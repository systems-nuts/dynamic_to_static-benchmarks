; ModuleID = 'cg.amd64.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4005b0__plt_type = type <{ [12 x i8], i32, [144 x i8] }>
%seg_400650__text_type = type <{ [60 x i8], i32, [1228 x i8], i32, [7772 x i8], i32, [2050 x i8] }>
%seg_4031d0__rodata_type = type <{ [4 x i8], [27 x i8], [46 x i8], [38 x i8], [44 x i8], [37 x i8], [39 x i8], [39 x i8], [25 x i8], [45 x i8], [45 x i8], [45 x i8], [37 x i8], [37 x i8], [20 x i8], [23 x i8], [23 x i8], [23 x i8], [23 x i8], [64 x i8], [39 x i8], [34 x i8], [21 x i8], [134 x i8], [11 x i8], [2 x i8], [5 x i8], [8 x i8], [7 x i8], [59 x i8], [13 x i8], [18 x i8], [39 x i8], [52 x i8], [30 x i8], [22 x i8], [26 x i8], [21 x i8], [21 x i8], [22 x i8], [30 x i8], [30 x i8], [23 x i8], [28 x i8], [3 x i8], [25 x i8], [6 x i8], [12 x i8], [4 x i8], [6 x i8], [4 x i8], [12 x i8], [29 x i8], [7 x i8], [25 x i8], [13 x i8], [24 x i8], [30 x i8], [5 x i8], [46 x i8], [21 x i8], [45 x i8], [28 x i8], [37 x i8], [8 x i8], [34 x i8], [37 x i8], [42 x i8], [40 x i8], [37 x i8], [37 x i8], [13 x i8], [19 x i8], [23 x i8], [23 x i8], [238 x i8] }>
%seg_604e00__init_array_type = type <{ i64, i64 }>
%seg_604ff0__got_type = type <{ i64, i64 }>
%seg_605000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_605060__data_type = type <{ [16 x i8], [4 x i8] }>
%__bss_start_type = type <{ [4 x i8] }>
%__TMC_END___type = type <{ [8 x i8] }>
%seg_605080__bss_type = type <{ [16 x i8], [512 x i8], [512 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4005b0__plt = internal global %seg_4005b0__plt_type <{ [12 x i8] c"\FF5RJ \00\FF%TJ \00", i32 0, [144 x i8] c"\FF%RJ \00h\00\00\00\00\E9\E0\FF\FF\FF\FF%JJ \00h\01\00\00\00\E9\D0\FF\FF\FF\FF%BJ \00h\02\00\00\00\E9\C0\FF\FF\FF\FF%:J \00h\03\00\00\00\E9\B0\FF\FF\FF\FF%2J \00h\04\00\00\00\E9\A0\FF\FF\FF\FF%*J \00h\05\00\00\00\E9\90\FF\FF\FF\FF%\22J \00h\06\00\00\00\E9\80\FF\FF\FF\FF%\1AJ \00h\07\00\00\00\E9p\FF\FF\FF\FF%\12J \00h\08\00\00\00\E9`\FF\FF\FF" }>
@seg_400650__text = internal global %seg_400650__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\C01@\00H\C7\C1P1@\00H\C7\C7\E0\0C@\00\FF\15vI \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 0, [1228 x i8] c"U\B8xP`\00H=xP`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFxP`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BExP`\00UH\81\EExP`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFxP`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=yI \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05gI \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\81\EC\08\01\00\00@\88\F0L\8BUXL\8B]PH\8B]HL\8Bu@L\8B}8L\8Be0L\8Bm(H\8Bu \88E\9F\8BE\18H\89u\90H\8Bu\10H\89u\88H\BE\D41@\00\00\00\00\00H\89}\D0@\8A}\9F@\88}\CF\89U\C8\89M\C4D\89E\C0D\89M\BC\F2\0F\11E\B0\F2\0F\11M\A8H\8B}\D0H\89}\80H\89\F7H\8Bu\80\89\85|\FF\FF\FF\B0\00L\89\9Dp\FF\FF\FFH\89\9Dh\FF\FF\FFL\89\B5`\FF\FF\FFL\89\BDX\FF\FF\FFL\89\A5P\FF\FF\FFL\89\ADH\FF\FF\FFL\89\95@\FF\FF\FF\E8\CC\FD\FF\FFH\BF\EF1@\00\00\00\00\00\0F\BEu\CF\89\85<\FF\FF\FF\B0\00\E8\B1\FD\FF\FF\83}\C0\00\89\858\FF\FF\FF\0F\85?\00\00\00HcE\C8H\89E\A0\83}\C4\00\0F\84\0D\00\00\00HcE\C4H\0F\AFE\A0H\89E\A0H\BF\1D2@\00\00\00\00\00H\8Bu\A0\B0\00\E8m\FD\FF\FF\89\854\FF\FF\FF\E9 \00\00\00H\BFC2@\00\00\00\00\00\8Bu\C8\8BU\C4\8BM\C0\B0\00\E8H\FD\FF\FF\89\850\FF\FF\FFH\BFo2@\00\00\00\00\00\8Bu\BC\B0\00\E8.\FD\FF\FFH\BF\942@\00\00\00\00\00\F2\0F\10E\B0\89\85,\FF\FF\FF\B0\01\E8\12\FD\FF\FFH\BF\BB2@\00\00\00\00\00\F2\0F\10E\A8\89\85(\FF\FF\FF\B0\01\E8\F6\FC\FF\FFH\BF\E22@\00\00\00\00\00H\8Bu\10\89\85$\FF\FF\FF\B0\00\E8\DB\FC\FF\FF\83}\18\00\89\85 \FF\FF\FF\0F\8D\1C\00\00\00H\BF\FB2@\00\00\00\00\00\B0\00\E8\BA\FC\FF\FF\89\85\1C\FF\FF\FF\E9B\00\00\00\83}\18\00\0F\84\1C\00\00\00H\BF(3@\00\00\00\00\00\B0\00\E8\94\FC\FF\FF\89\85\18\FF\FF\FF\E9\17\00\00\00H\BFU3@\00\00\00\00\00\B0\00\E8x\FC\FF\FF\89\85\14\FF\FF\FF\E9\00\00\00\00H\BF\823@\00\00\00\00\00H\8Bu \B0\00\E8X\FC\FF\FFH\BF\A73@\00\00\00\00\00H\8Bu(\89\85\10\FF\FF\FF\B0\00\E8=\FC\FF\FFH\BF\CC3@\00\00\00\00\00\89\85\0C\FF\FF\FF\B0\00\E8&\FC\FF\FFH\BF\BC9@\00\00\00\00\00H\8Bu0\89\85\08\FF\FF\FF\B0\00\E8\0B\FC\FF\FFH\BF\E03@\00\00\00\00\00H\8Bu8\89\85\04\FF\FF\FF\B0\00\E8\F0\FB\FF\FFH\BF\F73@\00\00\00\00\00H\8Bu@\89\85\00\FF\FF\FF\B0\00\E8\D5\FB\FF\FFH\BF\0E4@\00\00\00\00\00H\8BuH\89\85\FC\FE\FF\FF\B0\00\E8\BA\FB\FF\FFH\BF%4@\00\00\00\00\00H\8BuP\89\85\F8\FE\FF\FF\B0\00\E8\9F\FB\FF\FFH\BF<4@\00\00\00\00\00H\8BuX\89\85\F4\FE\FF\FF\B0\00\E8\84\FB\FF\FFH\BFS4@\00\00\00\00\00\89\85\F0\FE\FF\FF\B0\00\E8m\FB\FF\FFH\BF|4@\00\00\00\00\00\89\85\EC\FE\FF\FF\B0\00\E8V\FB\FF\FFH\BF\A34@\00\00\00\00\00\89\85\E8\FE\FF\FF\B0\00\E8?\FB\FF\FFH\BF\C54@\00\00\00\00\00\89\85\E4\FE\FF\FF\B0\00\E8(\FB\FF\FFH\BF\DA4@\00\00\00\00\00\89\85\E0\FE\FF\FF\B0\00\E8\11\FB\FF\FFH\BFT4@\00\00\00\00\00\89\85\DC\FE\FF\FF\B0\00\E8\FA\FA\FF\FF\89\85\D8\FE\FF\FFH\81\C4\08\01\00\00[A\5CA]A^A_]\C3f\90UH\89\E5\0FW\C0\89}\FCHcE\FC\F2\0F\11\04\C5\90P`\00]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC\10\89}\FC\E8 \00\00\00HcE\FC\F2\0F\11\04\C5\90R`\00H\83\C4\10]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\8D}\F8\E8\7F%\00\00\F2\0F\10E\F8H\83\C4\10]\C3", i32 0, [7772 x i8] c"UH\89\E5H\83\EC \89}\FC\E8\D0\FF\FF\FF\F2\0F\11E\E8\F2\0F\10E\E8HcE\FC\F2\0F\5C\04\C5\90R`\00\F2\0F\11E\F0\F2\0F\10E\F0HcE\FC\F2\0FX\04\C5\90P`\00\F2\0F\11\04\C5\90P`\00H\83\C4 ]\C3\0F\1F\00UH\89\E5\89}\FCHcE\FC\F2\0F\10\04\C5\90P`\00]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10\B8\00\0C{\00\89\C7\E8\1C\FA\FF\FF\B9\C4\DA\00\00\89\CFH\89\04%\90T`\00\E8\08\FA\FF\FF\B9\C0\DA\00\00\89\CFH\89\04%\98T`\00\E8\F4\F9\FF\FF\B9\C0\DA\00\00\89\CFH\89\04%\A0T`\00\E8\E0\F9\FF\FF\B9\00A\0A\00\89\CFH\89\04%\A8T`\00\E8\CC\F9\FF\FF\B9\00\82\14\00\89\CFH\89\04%\B0T`\00\E8\B8\F9\FF\FF\B9\00\18\F6\00\89\CFH\89\04%\B8T`\00\E8\A4\F9\FF\FF\B9\90\B5\01\00\89\CFH\89\04%\C0T`\00\E8\90\F9\FF\FF\B9\90\B5\01\00\89\CFH\89\04%\C8T`\00\E8|\F9\FF\FF\B9\90\B5\01\00\89\CFH\89\04%\D0T`\00\E8h\F9\FF\FF\B9\90\B5\01\00\89\CFH\89\04%\D8T`\00\E8T\F9\FF\FF\B9\90\B5\01\00\89\CFH\89\04%\E0T`\00\E8@\F9\FF\FFH\89\04%\E8T`\00\8BE\FCH\83\C4\10]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\81\EC\A8\01\00\00\F2\0F\10\05\FC'\00\00\C7E\D4\00\00\00\00\89}\D0H\89u\C8\F2\0F\11E\98\E8\BC\FE\FF\FF\C7E\C4\00\00\00\00\89\854\FF\FF\FF\83}\C4\03\0F\8D\16\00\00\00\8B}\C4\E8\BD\FD\FF\FF\8BE\C4\83\C0\01\89E\C4\E9\E0\FF\FF\FFH\BF`5@\00\00\00\00\00H\BEk5@\00\00\00\00\00\E8\B6\F8\FF\FFH\89\858\FF\FF\FFH\83\F8\00\0F\84U\00\00\00H\B8z5@\00\00\00\00\00H\B9r5@\00\00\00\00\00H\BAm5@\00\00\00\00\00\C7\04%\F0T`\00\01\00\00\00H\89\95@\FF\FF\FFH\89\8DH\FF\FF\FFH\89\85P\FF\FF\FFH\8B\BD8\FF\FF\FF\E8\0B\F8\FF\FF\89\850\FF\FF\FF\E9\0B\00\00\00\C7\04%\F0T`\00\00\00\00\001\FF\E8>\FD\FF\FFH\BF\815@\00\00\00\00\00\F2\0F\10\05,'\00\00\C7\04%\F4T`\00\00\00\00\00\C7\04%\F8T`\00\AF6\00\00\C7\04%\FCT`\00\00\00\00\00\C7\04%\00U`\00\AF6\00\00\C6\85\7F\FF\FF\FFA\F2\0F\11\85p\FF\FF\FF\B0\00\E8\AA\F7\FF\FFH\BF\BC5@\00\00\00\00\00\BE\B06\00\00\89\85,\FF\FF\FF\B0\00\E8\8E\F7\FF\FFH\BF\C95@\00\00\00\00\00\BE\0F\00\00\00\89\85(\FF\FF\FF\B0\00\E8r\F7\FF\FFH\BF\AB:@\00\00\00\00\00\89\85$\FF\FF\FF\B0\00\E8[\F7\FF\FFH\BF\10U`\00\00\00\00\00\F2\0F\10\05y&\00\00\F2\0F\10\0Dy&\00\00\C7\04%\04U`\00\B06\00\00\C7\04%\08U`\00\00\C3\1E\00\F2\0F\11\0C%\10U`\00\F2\0F\11\04%\18U`\00\F2\0F\10\04%\18U`\00\89\85 \FF\FF\FF\E8\05\1F\00\00\F2\0F\11E\98\8B<%\04U`\00\8B4%\08U`\00H\8B\14%\C0T`\00H\8B\0C%\90T`\00L\8B\04%\98T`\00D\8B\0C%\F4T`\00\8B\04%\F8T`\00D\8B\14%\FCT`\00D\8B\1C%\00U`\00H\8B\1C%\A8T`\00L\8B4%\B0T`\00L\8B<%\B8T`\00L\8B$%\A0T`\00\89\04$D\89T$\08D\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0\E85\0A\00\00\C7E\C0\00\00\00\00\8BE\C0\8B\0C%\F8T`\00+\0C%\F4T`\00\83\C1\019\C8\0F\8Du\00\00\00H\8B\04%\98T`\00HcM\C0\8B\14\88\89U\BC\8BE\BCH\8B\0C%\98T`\00\8BU\C0\83\C2\01Hc\F2;\04\B1\0F\8D3\00\00\00H\8B\04%\90T`\00HcM\BC\8B\14\88+\14%\FCT`\00H\8B\04%\90T`\00HcM\BC\89\14\88\8BE\BC\83\C0\01\89E\BC\E9\B0\FF\FF\FF\E9\00\00\00\00\8BE\C0\83\C0\01\89E\C0\E9o\FF\FF\FF\C7E\C4\00\00\00\00\81}\C4\B16\00\00\0F\8D'\00\00\00\F2\0F\10\05\E9$\00\00H\8B\04%\C8T`\00HcM\C4\F2\0F\11\04\C8\8BE\C4\83\C0\01\89E\C4\E9\CC\FF\FF\FF\C7E\C0\00\00\00\00\8BE\C0\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8DU\00\00\00\0FW\C0H\8B\04%\E0T`\00HcM\C0\F2\0F\11\04\C8H\8B\04%\D0T`\00HcM\C0\F2\0F\11\04\C8H\8B\04%\E8T`\00HcM\C0\F2\0F\11\04\C8H\8B\04%\D8T`\00HcM\C0\F2\0F\11\04\C8\8BE\C0\83\C0\01\89E\C0\E9\8F\FF\FF\FF\0FW\C0\F2\0F\11E\98\C7E\B8\01\00\00\00\83}\B8\01\0F\8F\8E\01\00\00H\8DE\B0H\8B<%\90T`\00H\8B4%\98T`\00H\8B\14%\C8T`\00H\8B\0C%\D0T`\00L\8B\04%\C0T`\00L\8B\0C%\D8T`\00L\8B\14%\E0T`\00L\8B\1C%\E8T`\00L\89\14$L\89\5C$\08H\89D$\10\E8j\0A\00\00\0FW\C0\F2\0F\11E\A8\F2\0F\11E\A0\C7E\C0\00\00\00\00\8BE\C0\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8Dn\00\00\00\F2\0F\10E\A8H\8B\04%\C8T`\00HcM\C0\F2\0F\10\0C\C8H\8B\04%\D0T`\00HcM\C0\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\A8\F2\0F\10E\A0H\8B\04%\D0T`\00HcM\C0\F2\0F\10\0C\C8H\8B\04%\D0T`\00HcM\C0\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\A0\8BE\C0\83\C0\01\89E\C0\E9v\FF\FF\FF\F2\0F\10\05<#\00\00\F2\0F\10M\A0\F2\0F\11\85\18\FF\FF\FF\0F(\C1\E8o\F4\FF\FF\F2\0F\10\8D\18\FF\FF\FF\F2\0F^\C8\F2\0F\11M\A0\C7E\C0\00\00\00\00\8BE\C0\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8D5\00\00\00\F2\0F\10E\A0H\8B\04%\D0T`\00HcM\C0\F2\0FY\04\C8H\8B\04%\C8T`\00HcM\C0\F2\0F\11\04\C8\8BE\C0\83\C0\01\89E\C0\E9\AF\FF\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9h\FE\FF\FF\C7E\C4\00\00\00\00\81}\C4\B16\00\00\0F\8D'\00\00\00\F2\0F\10\05\8F\22\00\00H\8B\04%\C8T`\00HcM\C4\F2\0F\11\04\C8\8BE\C4\83\C0\01\89E\C4\E9\CC\FF\FF\FF1\FF\0FW\C0\F2\0F\11E\98\E8\C9\F8\FF\FF1\FF\E8\12\F9\FF\FFH\BF\DB5@\00\00\00\00\00\B0\01\E8!\F3\FF\FF\BF\01\00\00\00\89\85\14\FF\FF\FF\E8Q\F8\FF\FF\C7E\B8\01\00\00\00\83}\B8\0F\0F\8F1\02\00\00\83<%\F0T`\00\00\0F\84\0A\00\00\00\BF\02\00\00\00\E8(\F8\FF\FFH\8DE\B0H\8B<%\90T`\00H\8B4%\98T`\00H\8B\14%\C8T`\00H\8B\0C%\D0T`\00L\8B\04%\C0T`\00L\8B\0C%\D8T`\00L\8B\14%\E0T`\00L\8B\1C%\E8T`\00L\89\14$L\89\5C$\08H\89D$\10\E8A\08\00\00\83<%\F0T`\00\00\0F\84\0A\00\00\00\BF\02\00\00\00\E8\09\F8\FF\FF\0FW\C0\F2\0F\11E\A8\F2\0F\11E\A0\C7E\C0\00\00\00\00\8BE\C0\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8Dn\00\00\00\F2\0F\10E\A8H\8B\04%\C8T`\00HcM\C0\F2\0F\10\0C\C8H\8B\04%\D0T`\00HcM\C0\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\A8\F2\0F\10E\A0H\8B\04%\D0T`\00HcM\C0\F2\0F\10\0C\C8H\8B\04%\D0T`\00HcM\C0\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\A0\8BE\C0\83\C0\01\89E\C0\E9v\FF\FF\FF\F2\0F\10\05;!\00\00\F2\0F\10\0D\F3 \00\00\F2\0F\10U\A0\F2\0F\11\85\08\FF\FF\FF\0F(\C2\F2\0F\11\8D\00\FF\FF\FF\E8\1E\F2\FF\FF\F2\0F\10\8D\00\FF\FF\FF\F2\0F^\C8\F2\0F\11M\A0\F2\0F\10\85\00\FF\FF\FF\F2\0F^E\A8\F2\0F\10\8D\08\FF\FF\FF\F2\0FX\C8\F2\0F\11M\98\83}\B8\01\0F\85\17\00\00\00H\BF\026@\00\00\00\00\00\B0\00\E8d\F1\FF\FF\89\85\FC\FE\FF\FFH\BF66@\00\00\00\00\00\8Bu\B8\F2\0F\10E\B0\F2\0F\10M\98\B0\02\E8@\F1\FF\FF\C7E\C0\00\00\00\00\89\85\F8\FE\FF\FF\8BE\C0\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8D5\00\00\00\F2\0F\10E\A0H\8B\04%\D0T`\00HcM\C0\F2\0FY\04\C8H\8B\04%\C8T`\00HcM\C0\F2\0F\11\04\C8\8BE\C0\83\C0\01\89E\C0\E9\AF\FF\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9\C5\FD\FF\FF\BF\01\00\00\00\E8U\F6\FF\FF\BF\01\00\00\00\E8\9B\F6\FF\FFH\BFT6@\00\00\00\00\00\F2\0F\11E\90\B0\00\E8\A5\F0\FF\FF\F2\0F\10\05\E5\1F\00\00\F2\0F\11\85h\FF\FF\FF\0F\BE\8D\7F\FF\FF\FF\83\F9U\89\85\F4\FE\FF\FF\0F\84\04\01\00\00\F2\0F\10E\98\F2\0F\5C\85p\FF\FF\FF\0F(\0D\EB\1F\00\00f\0F\DB\C1\F2\0F^\85p\FF\FF\FF\F2\0F\11\85`\FF\FF\FF\F2\0F\10\85`\FF\FF\FF\F2\0F\10\8Dh\FF\FF\FFf\0F.\C8\0F\82a\00\00\00H\BFj6@\00\00\00\00\00\C7\85x\FF\FF\FF\01\00\00\00\B0\00\E8\22\F0\FF\FFH\BF\846@\00\00\00\00\00\F2\0F\10E\98\89\85\F0\FE\FF\FF\B0\01\E8\06\F0\FF\FFH\BF\996@\00\00\00\00\00\F2\0F\10\85`\FF\FF\FF\89\85\EC\FE\FF\FF\B0\01\E8\E7\EF\FF\FF\89\85\E8\FE\FF\FF\E9\5C\00\00\00H\BF\AE6@\00\00\00\00\00\C7\85x\FF\FF\FF\00\00\00\00\B0\00\E8\C1\EF\FF\FFH\BF\C46@\00\00\00\00\00\F2\0F\10E\98\89\85\E4\FE\FF\FF\B0\01\E8\A5\EF\FF\FFH\BF\E26@\00\00\00\00\00\F2\0F\10\85p\FF\FF\FF\89\85\E0\FE\FF\FF\B0\01\E8\86\EF\FF\FF\89\85\DC\FE\FF\FF\E98\00\00\00H\BF\007@\00\00\00\00\00\C7\85x\FF\FF\FF\00\00\00\00\B0\00\E8`\EF\FF\FFH\BF\177@\00\00\00\00\00\89\85\D8\FE\FF\FF\B0\00\E8I\EF\FF\FF\89\85\D4\FE\FF\FF\0FW\C0\F2\0F\10M\90f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9#\00\00\00\F2\0F\10\05n\1E\00\00\F2\0F\10\0Dn\1E\00\00\F2\0F^M\90\F2\0F^\C8\F2\0F\11M\88\E9\08\00\00\00\0FW\C0\F2\0F\11E\88H\BF37@\00\00\00\00\00\BA\B06\00\001\C0A\B9\0F\00\00\00H\B967@\00\00\00\00\00H\BEO7@\00\00\00\00\00I\B8U7@\00\00\00\00\00I\BAa7@\00\00\00\00\00I\BBe7@\00\00\00\00\00H\BBk7@\00\00\00\00\00I\BEo7@\00\00\00\00\00I\BF{7@\00\00\00\00\00I\BC\847@\00\00\00\00\00I\BD\987@\00\00\00\00\00\89\85\D0\FE\FF\FF\8A\85\7F\FF\FF\FF\F2\0F\10E\90\F2\0F\10M\88\88\85\CF\FE\FF\FF\8B\85x\FF\FF\FF\89\85\C8\FE\FF\FF\8A\85\CF\FE\FF\FF\0F\BE\C0H\89\B5\C0\FE\FF\FF\89\C6\8B\85\D0\FE\FF\FFH\89\8D\B8\FE\FF\FF\89\C1L\89\85\B0\FE\FF\FFA\89\C0H\8B\85\B8\FE\FF\FFH\89\04$\8B\85\C8\FE\FF\FF\89D$\08H\8B\85\C0\FE\FF\FFH\89D$\10H\8B\85\B0\FE\FF\FFH\89D$\18L\89T$ L\89\5C$(H\89\5C$0L\89t$8L\89|$@L\89d$HL\89l$P\E8\E8\11\00\00\83<%\F0T`\00\00\0F\84n\01\00\00\BF\01\00\00\00\E8\A0\F3\FF\FF\0FW\C9\F2\0F\11E\80\F2\0F\10E\80f\0F.\C1\0F\85\13\00\00\00\0F\8A\0D\00\00\00\F2\0F\10\05\C3\1C\00\00\F2\0F\11E\80H\BF\9F7@\00\00\00\00\00\B0\00\E8\85\ED\FF\FF\C7E\C4\00\00\00\00\89\85\AC\FE\FF\FF\83}\C4\03\0F\8D\0D\01\00\00\8B}\C4\E8F\F3\FF\FF\F2\0F\11E\90\83}\C4\00\0F\85-\00\00\00H\BF\B87@\00\00\00\00\00HcE\C4H\8B\B4\C5@\FF\FF\FF\F2\0F\10E\90\B0\01\E85\ED\FF\FF\89\85\A8\FE\FF\FF\E9\B6\00\00\00H\BF\C57@\00\00\00\00\00\F2\0F\10\05x\1C\00\00HcE\C4H\8B\B4\C5@\FF\FF\FF\F2\0F\10M\90\F2\0FYE\90\F2\0F^E\80\F2\0F\11\85\A0\FE\FF\FF\0F(\C1\F2\0F\10\8D\A0\FE\FF\FF\B0\02\E8\E3\EC\FF\FF\83}\C4\02\89\85\9C\FE\FF\FF\0F\85Z\00\00\00H\BF\DD7@\00\00\00\00\00H\BE\FB7@\00\00\00\00\00\F2\0F\10\05\17\1C\00\00\F2\0F\10M\80\F2\0F\5CM\90\F2\0F\11M\90\F2\0F\10M\90\F2\0FYE\90\F2\0F^E\80\F2\0F\11\85\90\FE\FF\FF\0F(\C1\F2\0F\10\8D\90\FE\FF\FF\B0\02\E8\7F\EC\FF\FF\89\85\8C\FE\FF\FF\E9\00\00\00\00\E9\00\00\00\00\8BE\C4\83\C0\01\89E\C4\E9\E9\FE\FF\FF\E9\00\00\00\001\C0H\81\C4\A8\01\00\00[A\5CA]A^A_]\C3\0F\1F\84\00\00\00\00\00UH\89\E5AWAVATSH\81\EC0\01\00\00H\8BE@L\8BU8L\8B]0H\8B](D\8Bu D\8B}\18D\8Be\10\89}\DC\89u\D8H\89U\D0H\89M\C8L\89E\C0D\89M\BC\C7E\AC\01\00\00\00D\89\A5\0C\FF\FF\FFL\89\95\00\FF\FF\FFL\89\9D\F8\FE\FF\FFH\89\9D\F0\FE\FF\FFD\89\B5\EC\FE\FF\FFD\89\BD\E8\FE\FF\FFH\89\85\E0\FE\FF\FF\8BE\AC\C1\E0\01\89E\AC\8BE\AC;E\DC\0F\8C\EB\FF\FF\FF\C7E\B8\00\00\00\00\8BE\B8;E\DC\0F\8D\D9\00\00\00L\8D\85p\FF\FF\FFH\8D\8D\10\FF\FF\FF\C7E\B0\0B\00\00\00\8B}\DC\8Bu\B0\8BU\AC\E89\06\00\00H\8DM\B0\F2\0F\10\05\E5\1A\00\00H\8D\95p\FF\FF\FFH\8D\B5\10\FF\FF\FF\8B}\DC\8BE\B8\83\C0\01A\89\C0\E8.\07\00\00\8BE\B0H\8BM(HcU\B8\89\04\91\C7E\B4\00\00\00\00\8BE\B4;E\B0\0F\8DW\00\00\00HcE\B4\8B\8C\85p\FF\FF\FF\83\E9\01H\8BE0HcU\B8Hk\D20H\01\D0HcU\B4\89\0C\90HcE\B4\F2\0F\10\84\C5\10\FF\FF\FFH\8BE8HcU\B8Hk\D2`H\01\D0HcU\B4\F2\0F\11\04\D0\8BE\B4\83\C0\01\89E\B4\E9\9D\FF\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9\1B\FF\FF\FFA\B9\0B\00\00\00\F2\0F\10\05%\1A\00\00\F2\0F\10\0D\15\1A\00\00H\8B}\D0H\8Bu\C8H\8BU\C0\8BM\DCD\8BE\D8H\8BE(L\8BU0L\8B]8\8B]\BCD\8Bu\10L\8B}@H\89\04$L\89T$\08L\89\5C$\10\89\5C$\18D\89t$ L\89|$(\E8\02\07\00\00H\81\C40\01\00\00[A\5CA^A_]\C3f\90UH\89\E5H\81\EC\90\00\00\00H\8BE L\8BU\18L\8B]\10\0FW\C0H\89}\F8H\89u\F0H\89U\E8H\89M\E0L\89E\D8L\89M\D0\C7E\C0\19\00\00\00\F2\0F\11E\A8\C7E\CC\00\00\00\00L\89]\88L\89U\80H\89\85x\FF\FF\FF\8BE\CC\8B\0C%\04U`\00\83\C1\019\C8\0F\8D_\00\00\00\0FW\C0H\8BE\10HcM\CC\F2\0F\11\04\C8H\8BE\E0HcM\CC\F2\0F\11\04\C8H\8BE\E8HcM\CC\F2\0F\10\04\C8H\8BE\18HcM\CC\F2\0F\11\04\C8H\8BE\18HcM\CC\F2\0F\10\04\C8H\8BE\D0HcM\CC\F2\0F\11\04\C8\8BE\CC\83\C0\01\89E\CC\E9\8C\FF\FF\FF\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8D6\00\00\00\F2\0F\10E\A8H\8BE\18HcM\CC\F2\0F\10\0C\C8H\8BE\18HcM\CC\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\A8\8BE\CC\83\C0\01\89E\CC\E9\AE\FF\FF\FF\C7E\C4\01\00\00\00\8BE\C4;E\C0\0F\8F\9F\02\00\00\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\F8T`\00+\0C%\F4T`\00\83\C1\019\C8\0F\8D\8D\00\00\00\0FW\C0\F2\0F\11E\B0H\8BE\F0HcM\CC\8B\14\88\89U\C8\8BE\C8H\8BM\F0\8BU\CC\83\C2\01Hc\F2;\04\B1\0F\8D>\00\00\00\F2\0F\10E\B0H\8BE\D8HcM\C8\F2\0F\10\0C\C8H\8BE\D0H\8BM\F8HcU\C8Hc\0C\91\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\B0\8BE\C8\83\C0\01\89E\C8\E9\A9\FF\FF\FF\F2\0F\10E\B0H\8BE\10HcM\CC\F2\0F\11\04\C8\8BE\CC\83\C0\01\89E\CC\E9W\FF\FF\FF\0FW\C0\F2\0F\11E\B8\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8D6\00\00\00\F2\0F\10E\B8H\8BE\D0HcM\CC\F2\0F\10\0C\C8H\8BE\10HcM\CC\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\B8\8BE\CC\83\C0\01\89E\CC\E9\AE\FF\FF\FF\0FW\C0\F2\0F\10M\A8\F2\0F^M\B8\F2\0F\11M\98\F2\0F\10M\A8\F2\0F\11M\A0\F2\0F\11E\A8\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8Dn\00\00\00H\8BE\E0HcM\CC\F2\0F\10\04\C8\F2\0F\10M\98H\8BE\D0HcM\CC\F2\0FY\0C\C8\F2\0FX\C1H\8BE\E0HcM\CC\F2\0F\11\04\C8H\8BE\18HcM\CC\F2\0F\10\04\C8\F2\0F\10M\98H\8BE\10HcM\CC\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\18HcM\CC\F2\0F\11\04\C8\8BE\CC\83\C0\01\89E\CC\E9v\FF\FF\FF\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8D6\00\00\00\F2\0F\10E\A8H\8BE\18HcM\CC\F2\0F\10\0C\C8H\8BE\18HcM\CC\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\A8\8BE\CC\83\C0\01\89E\CC\E9\AE\FF\FF\FF\F2\0F\10E\A8\F2\0F^E\A0\F2\0F\11E\90\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8D>\00\00\00H\8BE\18HcM\CC\F2\0F\10\04\C8\F2\0F\10M\90H\8BE\D0HcM\CC\F2\0FY\0C\C8\F2\0FX\C1H\8BE\D0HcM\CC\F2\0F\11\04\C8\8BE\CC\83\C0\01\89E\CC\E9\A6\FF\FF\FF\E9\00\00\00\00\8BE\C4\83\C0\01\89E\C4\E9U\FD\FF\FF\0FW\C0\F2\0F\11E\B0\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\F8T`\00+\0C%\F4T`\00\83\C1\019\C8\0F\8D\8D\00\00\00\0FW\C0\F2\0F\11E\B8H\8BE\F0HcM\CC\8B\14\88\89U\C8\8BE\C8H\8BM\F0\8BU\CC\83\C2\01Hc\F2;\04\B1\0F\8D>\00\00\00\F2\0F\10E\B8H\8BE\D8HcM\C8\F2\0F\10\0C\C8H\8BE\E0H\8BM\F8HcU\C8Hc\0C\91\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\11E\B8\8BE\C8\83\C0\01\89E\C8\E9\A9\FF\FF\FF\F2\0F\10E\B8H\8BE\18HcM\CC\F2\0F\11\04\C8\8BE\CC\83\C0\01\89E\CC\E9W\FF\FF\FF\C7E\CC\00\00\00\00\8BE\CC\8B\0C%\00U`\00+\0C%\FCT`\00\83\C1\019\C8\0F\8DE\00\00\00H\8BE\E8HcM\CC\F2\0F\10\04\C8H\8BE\18HcM\CC\F2\0F\5C\04\C8\F2\0F\11E\B8\F2\0F\10E\B0\F2\0F\10M\B8\F2\0FYM\B8\F2\0FX\C1\F2\0F\11E\B0\8BE\CC\83\C0\01\89E\CC\E9\9F\FF\FF\FF\F2\0F\10E\B0\E8\C3\E5\FF\FFH\8BE \F2\0F\11\00H\81\C4\90\00\00\00]\C3f\90UH\89\E5H\83\ECP\89}\FC\89u\F8\89U\F4H\89M\E8L\89E\E0\C7E\DC\00\00\00\00\8BE\DC;E\F8\0F\8D\E8\00\00\00H\BF\10U`\00\00\00\00\00\F2\0F\10\04%\18U`\00\E8\FC\0C\00\00H\BF\10U`\00\00\00\00\00\F2\0F\11E\C8\F2\0F\10\04%\18U`\00\E8\DF\0C\00\00\F2\0F\11E\C0\F2\0F\10E\C0\8B}\F4\E8\BD\08\00\00\83\C0\01\89E\D4\8BE\D4;E\FC\0F\8E\05\00\00\00\E9\96\FF\FF\FF\C7E\BC\00\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\DC\0F\8D3\00\00\00H\8BE\E0HcM\D8\8B\14\88;U\D4\0F\85\0C\00\00\00\C7E\BC\01\00\00\00\E9\13\00\00\00\E9\00\00\00\00\8BE\D8\83\C0\01\89E\D8\E9\C1\FF\FF\FF\83}\BC\00\0F\84\05\00\00\00\E9:\FF\FF\FF\F2\0F\10E\C8H\8BE\E8HcM\DC\F2\0F\11\04\C8\8BU\D4H\8BE\E0HcM\DC\89\14\88\8BU\DC\83\C2\01\89U\DC\E9\0C\FF\FF\FFH\83\C4P]\C3f\0F\1FD\00\00UH\89\E5\89}\FCH\89u\F0H\89U\E8H\89M\E0D\89E\DC\F2\0F\11E\D0\C7E\C8\00\00\00\00\C7E\CC\00\00\00\00\8BE\CCH\8BM\E0;\01\0F\8D@\00\00\00H\8BE\E8HcM\CC\8B\14\88;U\DC\0F\85\19\00\00\00\F2\0F\10E\D0H\8BE\F0HcM\CC\F2\0F\11\04\C8\C7E\C8\01\00\00\00\E9\00\00\00\00\8BE\CC\83\C0\01\89E\CC\E9\B1\FF\FF\FF\83}\C8\00\0F\855\00\00\00\F2\0F\10E\D0H\8BE\F0H\8BM\E0Hc\09\F2\0F\11\04\C8\8BU\DCH\8BE\E8H\8BM\E0Hc\09\89\14\88H\8BE\E0\8B\10\83\C2\01H\8BE\E0\89\10]\C3f\0F\1FD\00\00UH\89\E5AWAVSH\81\EC\C8\00\00\00H\8BE8D\8BU0D\8B](H\8B] L\8Bu\18L\8B}\10H\89}\E0H\89u\D8H\89U\D0\89M\CCD\89E\C8D\89M\C4\F2\0F\11E\B8\F2\0F\11M\B0\8BM0+M(\83\C1\01\89M\AC\C7E\A4\00\00\00\00L\89\B5X\FF\FF\FFH\89\9DP\FF\FF\FFL\89\BDH\FF\FF\FFH\89\85@\FF\FF\FFD\89\95<\FF\FF\FFD\89\9D8\FF\FF\FF\8BE\A4\8BM\AC\83\C1\019\C8\0F\8D\1D\00\00\00H\8BE\D0HcM\A4\C7\04\88\00\00\00\00\8BE\A4\83\C0\01\89E\A4\E9\D2\FF\FF\FF\C7E\A8\00\00\00\00\8BE\A8;E\CC\0F\8Dy\00\00\00\C7E\98\00\00\00\00\8BE\98H\8BM\10HcU\A8;\04\91\0F\8DK\00\00\00H\8BE\18HcM\A8Hk\C90H\01\C8HcM\98\8B\14\88\83\C2\01\89U\A4H\8BE\D0HcM\A4\8B\14\88H\8BE\10HcM\A8\03\14\88H\8BE\D0HcM\A4\89\14\88\8BE\98\83\C0\01\89E\98\E9\A1\FF\FF\FF\E9\00\00\00\00\8BE\A8\83\C0\01\89E\A8\E9{\FF\FF\FFH\8BE\D0\C7\00\00\00\00\00\C7E\A4\01\00\00\00\8BE\A4\8BM\AC\83\C1\019\C8\0F\8D4\00\00\00H\8BE\D0HcM\A4\8B\14\88H\8BE\D0\8Bu\A4\83\EE\01Hc\CE\03\14\88H\8BE\D0HcM\A4\89\14\88\8BE\A4\83\C0\01\89E\A4\E9\BB\FF\FF\FFH\8BE\D0HcM\AC\8B\14\88\83\EA\01\89U\98\8BU\98;U\C8\0F\8E>\00\00\00H\BF\008@\00\00\00\00\00\B0\00\E8\9C\E1\FF\FFH\BF.8@\00\00\00\00\00\8Bu\98\8BU\C8\89\854\FF\FF\FF\B0\00\E8\7F\E1\FF\FF\BF\01\00\00\00\89\850\FF\FF\FF\E8\CF\E1\FF\FF\C7E\A4\00\00\00\00\8BE\A4;E\AC\0F\8Dq\00\00\00H\8BE\D0HcM\A4\8B\14\88\89U\94\8BE\94H\8BM\D0\8BU\A4\83\C2\01Hc\F2;\04\B1\0F\8D-\00\00\00\0FW\C0H\8BE\E0HcM\94\F2\0F\11\04\C8H\8BE\D8HcM\94\C7\04\88\FF\FF\FF\FF\8BE\94\83\C0\01\89E\94\E9\BA\FF\FF\FFH\8BE8HcM\A4\C7\04\88\00\00\00\00\8BE\A4\83\C0\01\89E\A4\E9\83\FF\FF\FF\F2\0F\10\05\0B\10\00\00\F2\0F\11E\80\F2\0F\10M\B8\8BE\CC\F2\0F*\D0\F2\0F^\C2\F2\0F\11\85(\FF\FF\FF\0F(\C1\F2\0F\10\8D(\FF\FF\FF\E8\D6\E0\FF\FF\F2\0F\11\85p\FF\FF\FF\C7E\A8\00\00\00\00\8BE\A8;E\CC\0F\8D\F6\02\00\00\C7E\98\00\00\00\00\8BE\98H\8BM\10HcU\A8;\04\91\0F\8D\BB\02\00\00H\8BE\18HcM\A8Hk\C90H\01\C8HcM\98\8B\14\88\89U\A4\F2\0F\10E\80H\8BE HcM\A8Hk\C9`H\01\C8HcM\98\F2\0FY\04\C8\F2\0F\11\85x\FF\FF\FF\C7E\8C\00\00\00\00\8BE\8CH\8BM\10HcU\A8;\04\91\0F\8DO\02\00\00H\8BE\18HcM\A8Hk\C90H\01\C8HcM\8C\8B\14\88\89U\88H\8BE HcM\A8Hk\C9`H\01\C8HcM\8C\F2\0F\10\04\C8\F2\0FY\85x\FF\FF\FF\F2\0F\11\85h\FF\FF\FF\8BU\88;U\A4\0F\85&\00\00\00\8BE\A4;E\A8\0F\85\1A\00\00\00\F2\0F\10\85h\FF\FF\FF\F2\0FXE\B8\F2\0F\5CE\B0\F2\0F\11\85h\FF\FF\FF\C7\85d\FF\FF\FF\00\00\00\00H\8BE\D0HcM\A4\8B\14\88\89U\94\8BE\94H\8BM\D0\8BU\A4\83\C2\01Hc\F2;\04\B1\0F\8DJ\01\00\00H\8BE\D8HcM\94\8B\14\88;U\88\0F\8E\AE\00\00\00H\8BE\D0\8BM\A4\83\C1\01Hc\D1\8B\0C\90\83\E9\02\89M\90\8BE\90;E\94\0F\8C_\00\00\00H\8BE\D8HcM\90\83<\88\FF\0F\8E:\00\00\00H\8BE\E0HcM\90\F2\0F\10\04\C8H\8BE\E0\8BU\90\83\C2\01Hc\CA\F2\0F\11\04\C8H\8BE\D8HcM\90\8B\14\88H\8BE\D8\8Bu\90\83\C6\01Hc\CE\89\14\88\E9\00\00\00\00\8BE\90\83\C0\FF\89E\90\E9\95\FF\FF\FF\0FW\C0\8BE\88H\8BM\D8HcU\94\89\04\91H\8BM\E0HcU\94\F2\0F\11\04\D1\C7\85d\FF\FF\FF\01\00\00\00\E9\88\00\00\00H\8BE\D8HcM\94\83<\88\FF\0F\85\1D\00\00\00\8BE\88H\8BM\D8HcU\94\89\04\91\C7\85d\FF\FF\FF\01\00\00\00\E9Y\00\00\00H\8BE\D8HcM\94\8B\14\88;U\88\0F\85(\00\00\00H\8BE8HcM\A4\8B\14\88\83\C2\01H\8BE8HcM\A4\89\14\88\C7\85d\FF\FF\FF\01\00\00\00\E9\1D\00\00\00\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\94\83\C0\01\89E\94\E9\9D\FE\FF\FF\83\BDd\FF\FF\FF\00\0F\85$\00\00\00H\BFC8@\00\00\00\00\00\8Bu\A8\B0\00\E8\18\DE\FF\FF\BF\01\00\00\00\89\85$\FF\FF\FF\E8h\DE\FF\FFH\8BE\E0HcM\94\F2\0F\10\04\C8\F2\0FX\85h\FF\FF\FFH\8BE\E0HcM\94\F2\0F\11\04\C8\8BE\8C\83\C0\01\89E\8C\E9\9D\FD\FF\FF\E9\00\00\00\00\8BE\98\83\C0\01\89E\98\E91\FD\FF\FF\F2\0F\10E\80\F2\0FY\85p\FF\FF\FF\F2\0F\11E\80\8BE\A8\83\C0\01\89E\A8\E9\FE\FC\FF\FF\C7E\A4\01\00\00\00\8BE\A4;E\AC\0F\8D4\00\00\00H\8BE8HcM\A4\8B\14\88H\8BE8\8Bu\A4\83\EE\01Hc\CE\03\14\88H\8BE8HcM\A4\89\14\88\8BE\A4\83\C0\01\89E\A4\E9\C0\FF\FF\FF\C7E\A4\00\00\00\00\8BE\A4;E\AC\0F\8D\CC\00\00\00\83}\A4\00\0F\8E#\00\00\00H\8BE\D0HcM\A4\8B\14\88H\8BE8\8Bu\A4\83\EE\01Hc\CE+\14\88\89U\A0\E9\07\00\00\00\C7E\A0\00\00\00\00H\8BE\D0\8BM\A4\83\C1\01Hc\D1\8B\0C\90H\8BE8HcU\A4+\0C\90\89M\9CH\8BE\D0HcU\A4\8B\0C\90\89M\98\8BM\A0\89M\94\8BE\94;E\9C\0F\8DG\00\00\00H\8BE\E0HcM\98\F2\0F\10\04\C8H\8BE\E0HcM\94\F2\0F\11\04\C8H\8BE\D8HcM\98\8B\14\88H\8BE\D8HcM\94\89\14\88\8BU\98\83\C2\01\89U\98\8BE\94\83\C0\01\89E\94\E9\AD\FF\FF\FF\E9\00\00\00\00\8BE\A4\83\C0\01\89E\A4\E9(\FF\FF\FF\C7E\A4\01\00\00\00\8BE\A4\8BM\AC\83\C1\019\C8\0F\8D4\00\00\00H\8BE\D0HcM\A4\8B\14\88H\8BE8\8Bu\A4\83\EE\01Hc\CE+\14\88H\8BE\D0HcM\A4\89\14\88\8BE\A4\83\C0\01\89E\A4\E9\BB\FF\FF\FFH\8BE\D0HcM\AC\8B\14\88\83\EA\01\89U\98H\81\C4\C8\00\00\00[A^A_]\C3", i32 0, [2050 x i8] c"UH\89\E5\F2\0F\11E\F8\89}\F4\8B}\F4\F2\0F*\C7\F2\0FYE\F8\F2\0F,\C0]\C3f\90UH\89\E5AWAVAUATSH\81\EC\18\01\00\00@\88\F0L\8BU`L\8B]XH\8B]PL\8BuHL\8B}@L\8Be8L\8Bm0H\8Bu(\88E\8BH\8BE \89M\84\8BM\18H\89\85x\FF\FF\FFH\8BE\10\89\8Dt\FF\FF\FF\8BM\84H\89\85h\FF\FF\FFH\B8p8@\00\00\00\00\00H\89}\D0@\8A}\8B@\88}\CF\89U\C8\89M\C4D\89E\C0D\89M\BC\F2\0F\11E\B0\F2\0F\11M\A8H\8B}\D0H\89\BD`\FF\FF\FFH\89\C7H\8B\85`\FF\FF\FFH\89\B5X\FF\FF\FFH\89\C6\B0\00L\89\9DP\FF\FF\FFH\89\9DH\FF\FF\FFL\89\B5@\FF\FF\FFL\89\BD8\FF\FF\FFL\89\AD0\FF\FF\FFL\89\A5(\FF\FF\FFL\89\95 \FF\FF\FF\E8\0C\DB\FF\FFH\BF\8C8@\00\00\00\00\00\0F\BEu\CF\89\85\1C\FF\FF\FF\B0\00\E8\F1\DA\FF\FF\83}\C4\00\89\85\18\FF\FF\FF\0F\85\E0\00\00\00\83}\C0\00\0F\85\D6\00\00\00H\8BE\D0\0F\BE\08\83\F9E\0F\85\A7\00\00\00H\8BE\D0\0F\BEH\01\83\F9P\0F\85\96\00\00\00\F2\0F\10\05F\0D\00\00H\8D}\90\8BE\C8\F2\0F*\C8H\89\BD\10\FF\FF\FF\E8\B7\DA\FF\FFH\BE\B18@\00\00\00\00\00H\8B\BD\10\FF\FF\FF\B0\01\E8\CF\DA\FF\FF\C7E\8C\0E\00\00\00Hcu\8C\0F\BEL5\90\83\F9.\89\85\0C\FF\FF\FF\0F\85\12\00\00\00HcE\8C\C6D\05\90 \8BM\8C\83\C1\FF\89M\8CH\BF\B98@\00\00\00\00\00H\8Du\90\8BE\8C\83\C0\01Hc\C8\C6D\0D\90\00\B0\00\E8+\DA\FF\FF\89\85\08\FF\FF\FF\E9\1A\00\00\00H\BF\DB8@\00\00\00\00\00\8Bu\C8\B0\00\E8\0C\DA\FF\FF\89\85\04\FF\FF\FF\E9 \00\00\00H\BF\009@\00\00\00\00\00\8Bu\C8\8BU\C4\8BM\C0\B0\00\E8\E7\D9\FF\FF\89\85\00\FF\FF\FFH\BFo2@\00\00\00\00\00\8Bu\BC\B0\00\E8\CD\D9\FF\FFH\BF*9@\00\00\00\00\00\F2\0F\10E\B0\89\85\FC\FE\FF\FF\B0\01\E8\B1\D9\FF\FFH\BFR9@\00\00\00\00\00\F2\0F\10E\A8\89\85\F8\FE\FF\FF\B0\01\E8\95\D9\FF\FFH\BF\E22@\00\00\00\00\00H\8Bu\10\89\85\F4\FE\FF\FF\B0\00\E8z\D9\FF\FF\83}\18\00\89\85\F0\FE\FF\FF\0F\84&\00\00\00H\BFw9@\00\00\00\00\00H\BE\9E9@\00\00\00\00\00\B0\00\E8O\D9\FF\FF\89\85\EC\FE\FF\FF\E9!\00\00\00H\BFw9@\00\00\00\00\00H\BE\9C9@\00\00\00\00\00\B0\00\E8)\D9\FF\FF\89\85\E8\FE\FF\FFH\BF\823@\00\00\00\00\00H\8Bu \B0\00\E8\0E\D9\FF\FFH\BF\A73@\00\00\00\00\00H\8Bu(\89\85\E4\FE\FF\FF\B0\00\E8\F3\D8\FF\FFH\BF\A99@\00\00\00\00\00H\8Bu0\89\85\E0\FE\FF\FF\B0\00\E8\D8\D8\FF\FFH\BF\E03@\00\00\00\00\00H\8Bu8\89\85\DC\FE\FF\FF\B0\00\E8\BD\D8\FF\FFH\BF\F73@\00\00\00\00\00H\8Bu@\89\85\D8\FE\FF\FF\B0\00\E8\A2\D8\FF\FFH\BF\0E4@\00\00\00\00\00H\8BuH\89\85\D4\FE\FF\FF\B0\00\E8\87\D8\FF\FFH\BF%4@\00\00\00\00\00H\8BuP\89\85\D0\FE\FF\FF\B0\00\E8l\D8\FF\FFH\BF<4@\00\00\00\00\00H\8BuX\89\85\CC\FE\FF\FF\B0\00\E8Q\D8\FF\FFH\BF\D39@\00\00\00\00\00H\8Bu`\89\85\C8\FE\FF\FF\B0\00\E86\D8\FF\FFH\BF\EA9@\00\00\00\00\00\89\85\C4\FE\FF\FF\B0\00\E8\1F\D8\FF\FF\89\85\C0\FE\FF\FFH\81\C4\18\01\00\00[A\5CA]A^A_]\C3\0F\1F\80\00\00\00\00UH\89\E5\F2\0F\10\0D\D4\0C\00\00\F2\0F\10\15\D4\0C\00\00\F2\0F\10\1D\D4\0C\00\00\F2\0F\10%\D4\0C\00\00H\89}\F8\F2\0F\11E\F0\F2\0F\11e\E8\F2\0F\11M\E0\F2\0F\11]\D8\F2\0F\11U\D0\0F(\C4\F2\0FYE\F0\F2\0F\11E\C8\F2\0F,E\C8\F2\0F*\C0\F2\0F\11E\A8\F2\0F\10E\F0\0F(\EB\F2\0FYm\A8\F2\0F\5C\C5\F2\0F\11E\A0H\8B}\F8\0F(\C4\F2\0FY\07\F2\0F\11E\C8\F2\0F,E\C8\F2\0F*\C0\F2\0F\11E\98H\8B}\F8\F2\0F\10\07\0F(\EB\F2\0FYm\98\F2\0F\5C\C5\F2\0F\11E\90\F2\0F\10E\A8\F2\0FYE\90\F2\0F\10m\A0\F2\0FYm\98\F2\0FX\C5\F2\0F\11E\C8\F2\0FYe\C8\F2\0F,\C4\F2\0F*\C0\F2\0F\11E\C0\F2\0F\10E\C8\0F(\E3\F2\0FYe\C0\F2\0F\5C\C4\F2\0F\11E\88\F2\0FY]\88\F2\0F\10E\A0\F2\0FYE\90\F2\0FX\D8\F2\0F\11]\B8\0F(\C1\F2\0FYE\B8\F2\0F,\C0\F2\0F*\C0\F2\0F\11E\B0\F2\0F\10E\B8\F2\0FYU\B0\F2\0F\5C\C2H\8B}\F8\F2\0F\11\07H\8B}\F8\F2\0FY\0F\F2\0F\11M\80\F2\0F\10E\80]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10\F2\0F\10\0D\90\0B\00\00\F2\0F\10\15\90\0B\00\00\F2\0F\10\1Dx\0B\00\00\F2\0F\10%h\0B\00\00\89}\FCH\89u\F0\F2\0F\11E\E8H\89U\E0\F2\0F\11U\D8\F2\0F\11e\D0\F2\0F\11M\C8\F2\0F\11]\C0\F2\0FYU\E8\F2\0F\11U\B8\F2\0F,}\B8\F2\0F*\C7\F2\0F\11E\98\F2\0F\10E\E8\F2\0FYM\98\F2\0F\5C\C1\F2\0F\11E\90\C7\85t\FF\FF\FF\00\00\00\00\8B\85t\FF\FF\FF;E\FC\0F\8D\11\01\00\00\F2\0F\10\05\F8\0A\00\00\F2\0F\10\0D\F8\0A\00\00\F2\0F\10\15\F8\0A\00\00\F2\0F\10\1D\F8\0A\00\00H\8BE\F0\0F(\E3\F2\0FY \F2\0F\11e\B8\F2\0F,M\B8\F2\0F*\E1\F2\0F\11e\88H\8BE\F0\F2\0F\10 \0F(\EA\F2\0FYm\88\F2\0F\5C\E5\F2\0F\11e\80\F2\0F\10e\98\F2\0FYe\80\F2\0F\10m\90\F2\0FYm\88\F2\0FX\E5\F2\0F\11e\B8\F2\0FY]\B8\F2\0F,\CB\F2\0F*\D9\F2\0F\11]\B0\F2\0F\10]\B8\0F(\E2\F2\0FYe\B0\F2\0F\5C\DC\F2\0F\11\9Dx\FF\FF\FF\F2\0FY\95x\FF\FF\FF\F2\0F\10]\90\F2\0FY]\80\F2\0FX\D3\F2\0F\11U\A8\0F(\D0\F2\0FYU\A8\F2\0F,\CA\F2\0F*\D1\F2\0F\11U\A0\F2\0F\10U\A8\F2\0FYM\A0\F2\0F\5C\D1H\8BE\F0\F2\0F\11\10H\8BE\F0\F2\0FY\00H\8BE\E0Hc\95t\FF\FF\FF\F2\0F\11\04\D0\8B\85t\FF\FF\FF\83\C0\01\89\85t\FF\FF\FF\E9\E0\FE\FF\FFH\83\C4\10]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\8DE\E81\C9\89\CEH\89}\F8H\89\C7\E8\F4\D4\FF\FF\83<%pP`\00\00\89E\E4\0F\8D\0D\00\00\00H\8BE\E8\89\C1\89\0C%pP`\00\F2\0F\10\05\BE\09\00\00H\8BE\E8Hc\0C%pP`\00H)\C8\F2H\0F*\C8H\8BE\F0\F2H\0F*\D0\F2\0FY\C2\F2\0FX\C8H\8BE\F8\F2\0F\11\08H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\90AWAVI\89\D7AUATL\8D%\9E\1C \00UH\8D-\9E\1C \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\17\D4\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_4031d0__rodata = internal constant %seg_4031d0__rodata_type <{ [4 x i8] c"\01\00\02\00", [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", [46 x i8] c" Class           =                        %c\0A\00", [38 x i8] c" Size            =             %12ld\0A\00", [44 x i8] c" Size            =             %4dx%4dx%4d\0A\00", [37 x i8] c" Iterations      =             %12d\0A\00", [39 x i8] c" Time in seconds =             %12.2f\0A\00", [39 x i8] c" Mop/s total     =             %12.2f\0A\00", [25 x i8] c" Operation type  = %24s\0A\00", [45 x i8] c" Verification    =            NOT PERFORMED\0A\00", [45 x i8] c" Verification    =               SUCCESSFUL\0A\00", [45 x i8] c" Verification    =             UNSUCCESSFUL\0A\00", [37 x i8] c" Version         =             %12s\0A\00", [37 x i8] c" Compile date    =             %12s\0A\00", [20 x i8] c"\0A Compile options:\0A\00", [23 x i8] c"    CLINK        = %s\0A\00", [23 x i8] c"    C_LIB        = %s\0A\00", [23 x i8] c"    C_INC        = %s\0A\00", [23 x i8] c"    CFLAGS       = %s\0A\00", [64 x i8] c"    CLINKFLAGS   = %s\0A\00\0A--------------------------------------\0A\00", [39 x i8] c" Please send all errors/feedbacks to:\0A\00", [34 x i8] c" Center for Manycore Programming\0A\00", [21 x i8] c" cmp@aces.snu.ac.kr\0A\00", [134 x i8] c" http://aces.snu.ac.kr\0A\00\00\00\00\00\00\00\00\00\00\00\00\00\F0?\00\00@\E5\9C0\D2A\00\00\00\A1\B0\B9\B2A\EC\D8\A1\15W!1@\BB\BD\D7\D9\DF|\DB=\00\00\00\00\80\84.A\00\00\00\B8\8AL\D6A\00\00\00\00\00\00Y@\00\00\00\00\00\004@\9A\99\99\99\99\99\B9?\00\00\00\00\00\00\E0?\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [11 x i8] c"timer.flag\00", [2 x i8] c"r\00", [5 x i8] c"init\00", [8 x i8] c"benchmk\00", [7 x i8] c"conjgd\00", [59 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-SER-C) - CG Benchmark\0A\0A\00", [13 x i8] c" Size: %11d\0A\00", [18 x i8] c" Iterations: %5d\0A\00", [39 x i8] c" Initialization time = %15.3f seconds\0A\00", [52 x i8] c"\0A   iteration           ||r||                 zeta\0A\00", [30 x i8] c"    %5d       %20.14E%20.13f\0A\00", [22 x i8] c" Benchmark completed\0A\00", [26 x i8] c" VERIFICATION SUCCESSFUL\0A\00", [21 x i8] c" Zeta is    %20.13E\0A\00", [21 x i8] c" Error is   %20.13E\0A\00", [22 x i8] c" VERIFICATION FAILED\0A\00", [30 x i8] c" Zeta                %20.13E\0A\00", [30 x i8] c" The correct zeta is %20.13E\0A\00", [23 x i8] c" Problem size unknown\0A\00", [28 x i8] c" NO VERIFICATION PERFORMED\0A\00", [3 x i8] c"CG\00", [25 x i8] c"          floating point\00", [6 x i8] c"3.3.1\00", [12 x i8] c"03 Nov 2017\00", [4 x i8] c"gcc\00", [6 x i8] c"$(CC)\00", [4 x i8] c"-lm\00", [12 x i8] c"-I../common\00", [29 x i8] c"-g -Wall -O3 -mcmodel=medium\00", [7 x i8] c"randdp\00", [25 x i8] c"  SECTION   Time (secs)\0A\00", [13 x i8] c"  %8s:%9.3f\0A\00", [24 x i8] c"  %8s:%9.3f  (%6.2f%%)\0A\00", [30 x i8] c"    --> %8s:%9.3f  (%6.2f%%)\0A\00", [5 x i8] c"rest\00", [46 x i8] c"Space for matrix elements exceeded in sparse\0A\00", [21 x i8] c"nza, nzmax = %d, %d\0A\00", [45 x i8] c"internal error in sparse: i=%d\0A\00\00\00\00\00\00\00\00\00\00\00\00\00@", [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", [37 x i8] c" Class           =             %12c\0A\00", [8 x i8] c"%15.0lf\00", [34 x i8] c" Size            =          %15s\0A\00", [37 x i8] c" Size            =             %12d\0A\00", [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", [40 x i8] c" Time in seconds =             %12.2lf\0A\00", [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", [37 x i8] c" Verification    =             %12s\0A\00", [13 x i8] c"UNSUCCESSFUL\00", [19 x i8] c"\0A Compile options:\0A", [23 x i8] c"    CC           = %s\0A\00", [23 x i8] c"    RAND         = %s\0A\00", [238 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00\00\00\00\00\00\00\00\00\00\10=\00\00\00\00\00\00\D0B\00\00\00\00\00\00`A\00\00\00\00\00\00\80>\8D\ED\B5\A0\F7\C6\B0>" }>
@seg_604e00__init_array = internal global %seg_604e00__init_array_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400730_frame_dummy to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400700___do_global_dtors_aux to i64) }>
@seg_604ff0__got = internal global %seg_604ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_605000__got_plt = internal global %seg_605000__got_plt_type <{ [24 x i8] c"\10N`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 ptrtoint (i64 (i64)* @fclose to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @pow to i64), i64 ptrtoint (i64 (i64)* @malloc to i64), i64 ptrtoint (i64 (i64, i64)* @fopen to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @sprintf to i64), i64 ptrtoint (i64 (i64)* @exit to i64), i64 ptrtoint (double (double)* @sqrt to i64) }>
@seg_605060__data = internal global %seg_605060__data_type <{ [16 x i8] zeroinitializer, [4 x i8] c"\FF\FF\FF\FF" }>
@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer

@seg_605080__bss = internal global %seg_605080__bss_type zeroinitializer
@__mcsema_reg_state = internal thread_local global %struct.State zeroinitializer
@__mcsema_stack = internal thread_local global [131072 x i64] zeroinitializer
@__mcsema_tls = internal thread_local global [512 x i64] zeroinitializer
@0 = internal global i1 false
@llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
define %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1 {
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @pow(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @sprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
define %struct.Memory* @sub_400b60_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400b60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, -32
  %24 = add i64 %1, 16
  %25 = add i64 %11, -48
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_400b40_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -24
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %29 to double*
  %34 = load double, double* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = add i64 %28, -4
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 3
  %41 = add i64 %40, add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 528)
  %42 = inttoptr i64 %41 to double*
  %43 = load double, double* %42
  %44 = fsub double %34, %43
  %45 = add i64 %28, -16
  %46 = inttoptr i64 %45 to double*
  store double %44, double* %46
  %47 = inttoptr i64 %45 to double*
  %48 = load double, double* %47
  %49 = inttoptr i64 %36 to i32*
  %50 = load i32, i32* %49
  %51 = sext i32 %50 to i64
  store i64 %51, i64* %6, align 8, !tbaa !1240
  %52 = shl nsw i64 %51, 3
  %53 = add i64 %52, add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 16)
  %54 = inttoptr i64 %53 to double*
  %55 = load double, double* %54
  %56 = fadd double %48, %55
  store double %56, double* %30, align 1, !tbaa !1244
  store i64 0, i64* %35, align 1, !tbaa !1244
  %57 = inttoptr i64 %53 to double*
  store double %56, double* %57
  %58 = load i64, i64* %7, align 8
  %59 = add i64 %58, 32
  %60 = icmp ugt i64 %58, -33
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %14, align 1, !tbaa !1246
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %15, align 1, !tbaa !1260
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %16, align 1, !tbaa !1261
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %17, align 1, !tbaa !1262
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %18, align 1, !tbaa !1263
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %19, align 1, !tbaa !1264
  %81 = add i64 %58, 40
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %58, 48
  store i64 %86, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4029c0_icnvrt(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4029c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %11 = load i64, i64* %9, align 8
  %12 = load i64, i64* %8, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  %15 = add i64 %12, -16
  %16 = bitcast %union.VectorReg* %10 to double*
  %17 = load double, double* %16, align 1
  %18 = inttoptr i64 %15 to double*
  store double %17, double* %18
  %19 = add i64 %12, -20
  %20 = load i32, i32* %5, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = inttoptr i64 %19 to i32*
  %23 = load i32, i32* %22
  %24 = zext i32 %23 to i64
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %25 = sitofp i32 %23 to double
  %26 = add i64 %12, -16
  %27 = inttoptr i64 %26 to double*
  %28 = load double, double* %27
  %29 = fmul double %25, %28
  store double %29, double* %16, align 1, !tbaa !1244
  %30 = tail call double @llvm.trunc.f64(double %29) #11
  %31 = tail call double @llvm.fabs.f64(double %30) #11
  %32 = fcmp ogt double %31, 0x41DFFFFFFFC00000
  %33 = fptosi double %30 to i32
  %34 = zext i32 %33 to i64
  %35 = select i1 %32, i64 2147483648, i64 %34
  store i64 %35, i64* %6, align 8, !tbaa !1240
  %36 = inttoptr i64 %13 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %9, align 8, !tbaa !1240
  %38 = inttoptr i64 %12 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %3, align 8, !tbaa !1240
  %40 = add i64 %12, 8
  store i64 %40, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400650__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400650:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %10, align 8, !tbaa !1240
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = load i64, i64* %6, align 8
  store i64 %19, i64* %12, align 8, !tbaa !1240
  %20 = load i64, i64* %9, align 8, !tbaa !1240
  %21 = add i64 %20, 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  store i64 %21, i64* %6, align 8, !tbaa !1240
  %24 = and i64 %21, -16
  store i8 0, i8* %13, align 1, !tbaa !1246
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 240
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %14, align 1, !tbaa !1260
  %31 = icmp eq i64 %24, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !1262
  %33 = lshr i64 %21, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %16, align 1, !tbaa !1263
  store i8 0, i8* %17, align 1, !tbaa !1264
  store i8 0, i8* %18, align 1, !tbaa !1261
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %24, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = add i64 %24, -16
  %39 = inttoptr i64 %38 to i64*
  store i64 %36, i64* %39
  store i64 ptrtoint (i64 ()* @callback_sub_4031c0___libc_csu_fini to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (i64 ()* @callback_sub_403150___libc_csu_init to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64* %8, align 8, !tbaa !1240
  %40 = add i64 %1, 42
  %41 = add i64 %24, -24
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  %45 = add i64 %24, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = inttoptr i64 %41 to i64*
  %49 = load i64, i64* %48
  store i64 %38, i64* %9, align 8, !alias.scope !1265, !noalias !1268
  %50 = tail call i64 @__libc_start_main(i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64 %23, i64 %21, i64 ptrtoint (i64 ()* @callback_sub_403150___libc_csu_init to i64), i64 ptrtoint (i64 ()* @callback_sub_4031c0___libc_csu_fini to i64), i64 %19, i64 %44, i64 %47), !noalias !1265
  store i64 %50, i64* %4, align 8, !alias.scope !1265, !noalias !1268
  %51 = add i64 %49, 1
  store i64 %51, i64* %3, align 8
  %52 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  ret %struct.Memory* %52
}

; Function Attrs: noinline
define %struct.Memory* @sub_400bd0_allocate_arrays(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400bd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  store i64 %11, i64* %8, align 8, !tbaa !1240
  %13 = add i64 %10, -24
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %1, 20
  %21 = add i64 %10, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  %23 = inttoptr i64 %21 to i64*
  %24 = load i64, i64* %23
  store i64 %24, i64* %3, align 8, !alias.scope !1270, !noalias !1273
  store i64 %13, i64* %7, align 8, !alias.scope !1270, !noalias !1273
  %25 = tail call i64 @malloc(i64 8064000)
  %26 = load i64, i64* %3, align 8
  store i64 %25, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1040) to i64*)
  %27 = add i64 %26, 20
  %28 = load i64, i64* %7, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31
  store i64 %32, i64* %3, align 8, !alias.scope !1275, !noalias !1278
  store i64 %28, i64* %7, align 8, !alias.scope !1275, !noalias !1278
  %33 = tail call i64 @malloc(i64 56004)
  %34 = load i64, i64* %3, align 8
  store i64 %33, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1048) to i64*)
  %35 = add i64 %34, 20
  %36 = load i64, i64* %7, align 8, !tbaa !1240
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %35, i64* %38
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39
  store i64 %40, i64* %3, align 8, !alias.scope !1280, !noalias !1283
  store i64 %36, i64* %7, align 8, !alias.scope !1280, !noalias !1283
  %41 = tail call i64 @malloc(i64 56000)
  %42 = load i64, i64* %3, align 8
  store i64 %41, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1056) to i64*)
  %43 = add i64 %42, 20
  %44 = load i64, i64* %7, align 8, !tbaa !1240
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %43, i64* %46
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %3, align 8, !alias.scope !1285, !noalias !1288
  store i64 %44, i64* %7, align 8, !alias.scope !1285, !noalias !1288
  %49 = tail call i64 @malloc(i64 56000)
  %50 = load i64, i64* %3, align 8
  store i64 %49, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1064) to i64*)
  %51 = add i64 %50, 20
  %52 = load i64, i64* %7, align 8, !tbaa !1240
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %51, i64* %54
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %3, align 8, !alias.scope !1290, !noalias !1293
  store i64 %52, i64* %7, align 8, !alias.scope !1290, !noalias !1293
  %57 = tail call i64 @malloc(i64 672000)
  %58 = load i64, i64* %3, align 8
  store i64 %57, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1072) to i64*)
  %59 = add i64 %58, 20
  %60 = load i64, i64* %7, align 8, !tbaa !1240
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %3, align 8, !alias.scope !1295, !noalias !1298
  store i64 %60, i64* %7, align 8, !alias.scope !1295, !noalias !1298
  %65 = tail call i64 @malloc(i64 1344000)
  %66 = load i64, i64* %3, align 8
  store i64 %65, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1080) to i64*)
  %67 = add i64 %66, 20
  %68 = load i64, i64* %7, align 8, !tbaa !1240
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71
  store i64 %72, i64* %3, align 8, !alias.scope !1300, !noalias !1303
  store i64 %68, i64* %7, align 8, !alias.scope !1300, !noalias !1303
  %73 = tail call i64 @malloc(i64 16128000)
  %74 = load i64, i64* %3, align 8
  store i64 %73, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1088) to i64*)
  %75 = add i64 %74, 20
  %76 = load i64, i64* %7, align 8, !tbaa !1240
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %3, align 8, !alias.scope !1305, !noalias !1308
  store i64 %76, i64* %7, align 8, !alias.scope !1305, !noalias !1308
  %81 = tail call i64 @malloc(i64 112016)
  %82 = load i64, i64* %3, align 8
  store i64 %81, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %83 = add i64 %82, 20
  %84 = load i64, i64* %7, align 8, !tbaa !1240
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %3, align 8, !alias.scope !1310, !noalias !1313
  store i64 %84, i64* %7, align 8, !alias.scope !1310, !noalias !1313
  %89 = tail call i64 @malloc(i64 112016)
  %90 = load i64, i64* %3, align 8
  store i64 %89, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %91 = add i64 %90, 20
  %92 = load i64, i64* %7, align 8, !tbaa !1240
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %3, align 8, !alias.scope !1315, !noalias !1318
  store i64 %92, i64* %7, align 8, !alias.scope !1315, !noalias !1318
  %97 = tail call i64 @malloc(i64 112016)
  %98 = load i64, i64* %3, align 8
  store i64 %97, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1112) to i64*)
  %99 = add i64 %98, 20
  %100 = load i64, i64* %7, align 8, !tbaa !1240
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102
  %103 = inttoptr i64 %101 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %3, align 8, !alias.scope !1320, !noalias !1323
  store i64 %100, i64* %7, align 8, !alias.scope !1320, !noalias !1323
  %105 = tail call i64 @malloc(i64 112016)
  %106 = load i64, i64* %3, align 8
  store i64 112016, i64* %5, align 8, !tbaa !1240
  store i64 112016, i64* %6, align 8, !tbaa !1240
  store i64 %105, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1120) to i64*)
  %107 = add i64 %106, 20
  %108 = load i64, i64* %7, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110
  store i64 %108, i64* %7, align 8, !alias.scope !1325, !noalias !1328
  %111 = tail call i64 @malloc(i64 112016)
  store i64 %111, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1128) to i64*)
  %112 = load i64, i64* %8, align 8
  %113 = add i64 %112, -4
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = zext i32 %115 to i64
  store i64 %116, i64* %4, align 8, !tbaa !1240
  %117 = load i64, i64* %7, align 8
  %118 = add i64 %117, 16
  %119 = icmp ugt i64 %117, -17
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %14, align 1, !tbaa !1246
  %121 = trunc i64 %118 to i32
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #11
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %15, align 1, !tbaa !1260
  %127 = xor i64 %117, 16
  %128 = xor i64 %127, %118
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %16, align 1, !tbaa !1261
  %132 = icmp eq i64 %118, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %17, align 1, !tbaa !1262
  %134 = lshr i64 %118, 63
  %135 = trunc i64 %134 to i8
  store i8 %135, i8* %18, align 1, !tbaa !1263
  %136 = lshr i64 %117, 63
  %137 = xor i64 %134, %136
  %138 = add nuw nsw i64 %137, %134
  %139 = icmp eq i64 %138, 2
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %19, align 1, !tbaa !1264
  %141 = add i64 %117, 24
  %142 = inttoptr i64 %118 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %8, align 8, !tbaa !1240
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %3, align 8, !tbaa !1240
  %146 = add i64 %117, 32
  store i64 %146, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402f20_vranlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402f20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %11, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %20, -24
  store i64 %23, i64* %11, align 8, !tbaa !1240
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2288) to double*)
  %31 = bitcast %union.VectorReg* %14 to double*
  store double %30, double* %31, align 1, !tbaa !1244
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = bitcast %union.VectorReg* %15 to i8*
  %35 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2296) to double*)
  %36 = bitcast %union.VectorReg* %15 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %38 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2280) to double*)
  %39 = bitcast %union.VectorReg* %16 to double*
  store double %38, double* %39, align 1, !tbaa !1244
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !1244
  %42 = bitcast %union.VectorReg* %17 to i8*
  %43 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2272) to double*)
  %44 = bitcast %union.VectorReg* %17 to double*
  store double %43, double* %44, align 1, !tbaa !1244
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %46 = bitcast i64* %45 to double*
  store double 0.000000e+00, double* %46, align 1, !tbaa !1244
  %47 = add i64 %20, -12
  %48 = load i32, i32* %5, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %20, -24
  %51 = load i64, i64* %9, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %20, -32
  %54 = bitcast [32 x %union.VectorReg]* %13 to double*
  %55 = load double, double* %54, align 1
  %56 = inttoptr i64 %53 to double*
  store double %55, double* %56
  %57 = add i64 %20, -40
  %58 = load i64, i64* %8, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %59
  %60 = add i64 %20, -48
  %61 = inttoptr i64 %60 to double*
  store double %35, double* %61
  %62 = add i64 %20, -56
  %63 = inttoptr i64 %62 to double*
  store double %43, double* %63
  %64 = add i64 %20, -64
  %65 = inttoptr i64 %64 to double*
  store double %30, double* %65
  %66 = load i64, i64* %12, align 8
  %67 = add i64 %66, -64
  %68 = inttoptr i64 %67 to double*
  store double %38, double* %68
  %69 = add i64 %66, -24
  %70 = inttoptr i64 %69 to double*
  %71 = load double, double* %70
  %72 = fmul double %35, %71
  store double %72, double* %36, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %73 = add i64 %66, -72
  %74 = inttoptr i64 %73 to double*
  store double %72, double* %74
  %75 = inttoptr i64 %73 to double*
  %76 = load double, double* %75
  %77 = tail call double @llvm.trunc.f64(double %76) #11
  %78 = tail call double @llvm.fabs.f64(double %77) #11
  %79 = fcmp ogt double %78, 0x41DFFFFFFFC00000
  %80 = fptosi double %77 to i32
  %81 = zext i32 %80 to i64
  %82 = select i1 %79, i64 2147483648, i64 %81
  store i64 %82, i64* %10, align 8, !tbaa !1240
  %83 = trunc i64 %82 to i32
  %84 = sitofp i32 %83 to double
  %85 = add i64 %66, -104
  %86 = inttoptr i64 %85 to double*
  store double %84, double* %86
  %87 = inttoptr i64 %69 to double*
  %88 = load double, double* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast i64* %89 to double*
  %91 = load double, double* %31, align 1
  %92 = inttoptr i64 %85 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  store double %94, double* %31, align 1, !tbaa !1244
  store i64 0, i64* %32, align 1, !tbaa !1244
  %95 = fsub double %88, %94
  store double %95, double* %54, align 1, !tbaa !1244
  store i64 0, i64* %89, align 1, !tbaa !1244
  %96 = add i64 %66, -112
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %66, -140
  %99 = inttoptr i64 %98 to i32*
  store i32 0, i32* %99
  %100 = add i64 %66, -4
  %101 = add i64 %66, -16
  %102 = bitcast %union.VectorReg* %17 to i32*
  %103 = getelementptr inbounds i8, i8* %42, i64 4
  %104 = bitcast i8* %103 to i32*
  %105 = bitcast i64* %45 to i32*
  %106 = getelementptr inbounds i8, i8* %42, i64 12
  %107 = bitcast i8* %106 to i32*
  %108 = add i64 %66, -120
  %109 = bitcast %union.VectorReg* %18 to i8*
  %110 = bitcast %union.VectorReg* %18 to i32*
  %111 = getelementptr inbounds i8, i8* %109, i64 4
  %112 = bitcast i8* %111 to i32*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast %union.VectorReg* %18 to double*
  %115 = add i64 %66, -128
  %116 = add i64 %66, -80
  %117 = add i64 %66, -136
  %118 = add i64 %66, -88
  %119 = bitcast [32 x %union.VectorReg]* %13 to <2 x i32>*
  %120 = bitcast %union.VectorReg* %15 to i32*
  %121 = getelementptr inbounds i8, i8* %34, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = add i64 %66, -96
  %124 = add i64 %66, -32
  br label %block_402fa1

block_4030c1:                                     ; preds = %block_402fa1
  %125 = zext i32 %280 to i64
  store i64 %125, i64* %6, align 8, !tbaa !1240
  %126 = load i64, i64* %11, align 8
  %127 = add i64 %126, 16
  %128 = icmp ugt i64 %126, -17
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %24, align 1, !tbaa !1246
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #11
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !1260
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %26, align 1, !tbaa !1261
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !1262
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !1263
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %29, align 1, !tbaa !1264
  %150 = add i64 %126, 24
  %151 = inttoptr i64 %127 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %12, align 8, !tbaa !1240
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %3, align 8, !tbaa !1240
  %155 = add i64 %126, 32
  store i64 %155, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %278

block_402fb0:                                     ; preds = %block_402fa1
  %156 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2272) to double*)
  store double %156, double* %54, align 1, !tbaa !1244
  store double 0.000000e+00, double* %90, align 1, !tbaa !1244
  %157 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2280) to double*)
  store double %157, double* %31, align 1, !tbaa !1244
  store double 0.000000e+00, double* %33, align 1, !tbaa !1244
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2288) to double*)
  store double %158, double* %36, align 1, !tbaa !1244
  %159 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2296) to double*)
  %160 = inttoptr i64 %101 to i64*
  %161 = load i64, i64* %160
  %162 = bitcast double %159 to <2 x i32>
  %163 = extractelement <2 x i32> %162, i32 0
  store i32 %163, i32* %102, align 1, !tbaa !1330
  %164 = extractelement <2 x i32> %162, i32 1
  store i32 %164, i32* %104, align 1, !tbaa !1330
  %165 = load double, double* %44, align 1
  %166 = inttoptr i64 %161 to double*
  %167 = load double, double* %166
  %168 = fmul double %165, %167
  %169 = inttoptr i64 %73 to double*
  store double %168, double* %169
  %170 = inttoptr i64 %73 to double*
  %171 = load double, double* %170
  %172 = tail call double @llvm.trunc.f64(double %171) #11
  %173 = tail call double @llvm.fabs.f64(double %172) #11
  %174 = fcmp ogt double %173, 0x41DFFFFFFFC00000
  %175 = fptosi double %172 to i32
  %176 = sitofp i32 %175 to double
  %177 = select i1 %174, double 0xC1E0000000000000, double %176
  %178 = inttoptr i64 %108 to double*
  store double %177, double* %178
  %179 = inttoptr i64 %101 to i64*
  %180 = load i64, i64* %179
  %181 = inttoptr i64 %180 to double*
  %182 = load double, double* %181
  %183 = bitcast double %158 to <2 x i32>
  %184 = extractelement <2 x i32> %183, i32 0
  store i32 %184, i32* %110, align 1, !tbaa !1330
  %185 = extractelement <2 x i32> %183, i32 1
  store i32 %185, i32* %112, align 1, !tbaa !1330
  %186 = load double, double* %114, align 1
  %187 = inttoptr i64 %108 to double*
  %188 = load double, double* %187
  %189 = fmul double %186, %188
  %190 = fsub double %182, %189
  %191 = inttoptr i64 %115 to double*
  store double %190, double* %191
  %192 = inttoptr i64 %85 to double*
  %193 = load double, double* %192
  %194 = inttoptr i64 %115 to double*
  %195 = load double, double* %194
  %196 = fmul double %193, %195
  %197 = inttoptr i64 %96 to double*
  %198 = load double, double* %197
  %199 = inttoptr i64 %108 to double*
  %200 = load double, double* %199
  %201 = fmul double %198, %200
  store double %201, double* %114, align 1, !tbaa !1244
  store i64 0, i64* %113, align 1, !tbaa !1244
  %202 = fadd double %196, %201
  %203 = inttoptr i64 %73 to double*
  store double %202, double* %203
  %204 = inttoptr i64 %73 to double*
  %205 = load double, double* %204
  %206 = fmul double %159, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = sitofp i32 %210 to double
  %212 = select i1 %209, double 0xC1E0000000000000, double %211
  %213 = inttoptr i64 %116 to double*
  store double %212, double* %213
  %214 = inttoptr i64 %73 to double*
  %215 = load double, double* %214
  store i32 %184, i32* %102, align 1, !tbaa !1330
  store i32 %185, i32* %104, align 1, !tbaa !1330
  store i32 0, i32* %105, align 1, !tbaa !1330
  store i32 0, i32* %107, align 1, !tbaa !1330
  %216 = load double, double* %44, align 1
  %217 = inttoptr i64 %116 to double*
  %218 = load double, double* %217
  %219 = fmul double %216, %218
  store double %219, double* %44, align 1, !tbaa !1244
  %220 = fsub double %215, %219
  %221 = inttoptr i64 %117 to double*
  store double %220, double* %221
  %222 = load double, double* %36, align 1
  %223 = inttoptr i64 %117 to double*
  %224 = load double, double* %223
  %225 = fmul double %222, %224
  %226 = inttoptr i64 %96 to double*
  %227 = load double, double* %226
  %228 = inttoptr i64 %115 to double*
  %229 = load double, double* %228
  %230 = fmul double %227, %229
  store double %230, double* %39, align 1, !tbaa !1244
  store i64 0, i64* %40, align 1, !tbaa !1244
  %231 = fadd double %230, %225
  %232 = inttoptr i64 %118 to double*
  store double %231, double* %232
  %233 = load <2 x i32>, <2 x i32>* %119, align 1
  %234 = load i64, i64* %89, align 1
  %235 = extractelement <2 x i32> %233, i32 0
  store i32 %235, i32* %120, align 1, !tbaa !1330
  %236 = extractelement <2 x i32> %233, i32 1
  store i32 %236, i32* %122, align 1, !tbaa !1330
  %237 = load double, double* %36, align 1
  %238 = inttoptr i64 %118 to double*
  %239 = load double, double* %238
  %240 = fmul double %237, %239
  %241 = tail call double @llvm.trunc.f64(double %240) #11
  %242 = tail call double @llvm.fabs.f64(double %241) #11
  %243 = fcmp ogt double %242, 0x41DFFFFFFFC00000
  %244 = fptosi double %241 to i32
  %245 = zext i32 %244 to i64
  %246 = select i1 %243, i64 2147483648, i64 %245
  store i64 %246, i64* %7, align 8, !tbaa !1240
  %247 = trunc i64 %246 to i32
  %248 = sitofp i32 %247 to double
  %249 = inttoptr i64 %123 to double*
  store double %248, double* %249
  %250 = inttoptr i64 %118 to double*
  %251 = load double, double* %250
  %252 = load double, double* %31, align 1
  %253 = inttoptr i64 %123 to double*
  %254 = load double, double* %253
  %255 = fmul double %252, %254
  store double %255, double* %31, align 1, !tbaa !1244
  %256 = fsub double %251, %255
  store double %256, double* %36, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %257 = inttoptr i64 %101 to i64*
  %258 = load i64, i64* %257
  %259 = inttoptr i64 %258 to double*
  store double %256, double* %259
  %260 = inttoptr i64 %101 to i64*
  %261 = load i64, i64* %260
  %262 = bitcast <2 x i32> %233 to double
  %263 = inttoptr i64 %261 to double*
  %264 = load double, double* %263
  %265 = fmul double %262, %264
  store double %265, double* %54, align 1, !tbaa !1244
  store i64 %234, i64* %89, align 1, !tbaa !1244
  %266 = inttoptr i64 %124 to i64*
  %267 = load i64, i64* %266
  %268 = inttoptr i64 %98 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  store i64 %270, i64* %8, align 8, !tbaa !1240
  %271 = shl nsw i64 %270, 3
  %272 = add i64 %271, %267
  %273 = inttoptr i64 %272 to double*
  store double %265, double* %273
  %274 = inttoptr i64 %98 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %98 to i32*
  store i32 %276, i32* %277
  br label %block_402fa1

block_402fa1:                                     ; preds = %block_402fb0, %block_402f20
  %278 = phi %struct.Memory* [ %2, %block_402f20 ], [ %278, %block_402fb0 ]
  %279 = inttoptr i64 %98 to i32*
  %280 = load i32, i32* %279
  %281 = inttoptr i64 %100 to i32*
  %282 = load i32, i32* %281
  %283 = sub i32 %280, %282
  %284 = lshr i32 %283, 31
  %285 = lshr i32 %280, 31
  %286 = lshr i32 %282, 31
  %287 = xor i32 %286, %285
  %288 = xor i32 %284, %285
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = icmp ne i32 %284, 0
  %292 = xor i1 %291, %290
  br i1 %292, label %block_402fb0, label %block_4030c1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006c0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4006f8:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i64 0, i64* %5, align 8, !tbaa !1240
  store i8 0, i8* %12, align 1, !tbaa !1332
  store i8 1, i8* %13, align 1, !tbaa !1332
  store i8 0, i8* %14, align 1, !tbaa !1332
  store i8 1, i8* %15, align 1, !tbaa !1332
  store i8 0, i8* %16, align 1, !tbaa !1332
  store i8 0, i8* %17, align 1, !tbaa !1332
  %18 = inttoptr i64 %10 to i64*
  %19 = load i64, i64* %18
  store i64 %19, i64* %7, align 8, !tbaa !1240
  %20 = inttoptr i64 %9 to i64*
  %21 = load i64, i64* %20
  store i64 %21, i64* %3, align 8, !tbaa !1240
  %22 = add i64 %9, 8
  store i64 %22, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b40_elapsed_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400b40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %5, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %6, align 8, !tbaa !1240
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %9, -16
  store i64 %18, i64* %4, align 8, !tbaa !1240
  %19 = add i64 %1, 9616
  %20 = add i64 %1, 17
  %21 = add i64 %9, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %23 = tail call %struct.Memory* @sub_4030d0_wtime_(%struct.State* nonnull %0, i64 %19, %struct.Memory* %2)
  %24 = load i64, i64* %6, align 8
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to double*
  %27 = load double, double* %26
  %28 = bitcast %union.VectorReg* %7 to double*
  store double %27, double* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !1244
  %31 = load i64, i64* %5, align 8
  %32 = add i64 %31, 16
  %33 = icmp ugt i64 %31, -17
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %12, align 1, !tbaa !1246
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #11
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %13, align 1, !tbaa !1260
  %41 = xor i64 %31, 16
  %42 = xor i64 %41, %32
  %43 = lshr i64 %42, 4
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* %14, align 1, !tbaa !1261
  %46 = icmp eq i64 %32, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %15, align 1, !tbaa !1262
  %48 = lshr i64 %32, 63
  %49 = trunc i64 %48 to i8
  store i8 %49, i8* %16, align 1, !tbaa !1263
  %50 = lshr i64 %31, 63
  %51 = xor i64 %48, %50
  %52 = add nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1264
  %55 = add i64 %31, 24
  %56 = inttoptr i64 %32 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %6, align 8, !tbaa !1240
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %3, align 8, !tbaa !1240
  %60 = add i64 %31, 32
  store i64 %60, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %23
}

; Function Attrs: noinline
define %struct.Memory* @sub_402270_sparse(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402270:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %14 = bitcast %union.anon* %13 to i32*
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = load i64, i64* %22, align 8
  %28 = load i64, i64* %21, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %22, align 8, !tbaa !1240
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %28, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %23, align 8
  %35 = add i64 %28, -24
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %16, align 8
  %38 = add i64 %28, -32
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = add i64 %28, -232
  store i64 %40, i64* %21, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %47 = add i64 %28, 48
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %15, align 8, !tbaa !1240
  %50 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %51 = add i64 %28, 40
  %52 = inttoptr i64 %51 to i32*
  %53 = load i32, i32* %52
  %54 = zext i32 %53 to i64
  store i64 %54, i64* %50, align 8, !tbaa !1240
  %55 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %56 = add i64 %28, 32
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %55, align 8, !tbaa !1240
  %60 = add i64 %28, 24
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %16, align 8, !tbaa !1240
  %63 = add i64 %28, 16
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %23, align 8, !tbaa !1240
  %66 = add i64 %28, 8
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %24, align 8, !tbaa !1240
  %69 = add i64 %28, -40
  %70 = load i64, i64* %20, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %70, i64* %71
  %72 = add i64 %28, -48
  %73 = load i64, i64* %19, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %73, i64* %74
  %75 = add i64 %28, -56
  %76 = load i64, i64* %18, align 8
  %77 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %77
  %78 = load i64, i64* %22, align 8
  %79 = add i64 %78, -52
  %80 = load i32, i32* %6, align 4
  %81 = inttoptr i64 %79 to i32*
  store i32 %80, i32* %81
  %82 = add i64 %78, -56
  %83 = load i32, i32* %8, align 4
  %84 = inttoptr i64 %82 to i32*
  store i32 %83, i32* %84
  %85 = add i64 %78, -60
  %86 = load i32, i32* %10, align 4
  %87 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %87
  %88 = add i64 %78, -72
  %89 = bitcast [32 x %union.VectorReg]* %25 to double*
  %90 = load double, double* %89, align 1
  %91 = inttoptr i64 %88 to double*
  store double %90, double* %91
  %92 = add i64 %78, -80
  %93 = bitcast %union.VectorReg* %26 to double*
  %94 = load double, double* %93, align 1
  %95 = inttoptr i64 %92 to double*
  store double %94, double* %95
  %96 = add i64 %78, 48
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97
  %99 = add i64 %78, 40
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100
  %102 = sub i32 %98, %101
  %103 = add i32 %102, 1
  %104 = add i64 %78, -84
  %105 = inttoptr i64 %104 to i32*
  store i32 %103, i32* %105
  %106 = load i64, i64* %22, align 8
  %107 = add i64 %106, -92
  %108 = inttoptr i64 %107 to i32*
  store i32 0, i32* %108
  %109 = add i64 %106, -168
  %110 = load i64, i64* %23, align 8
  %111 = inttoptr i64 %109 to i64*
  store i64 %110, i64* %111
  %112 = add i64 %106, -176
  %113 = load i64, i64* %16, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %113, i64* %114
  %115 = add i64 %106, -184
  %116 = load i64, i64* %24, align 8
  %117 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %117
  %118 = add i64 %106, -192
  %119 = load i64, i64* %15, align 8
  %120 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %120
  %121 = add i64 %106, -196
  %122 = load i32, i32* %12, align 4
  %123 = inttoptr i64 %121 to i32*
  store i32 %122, i32* %123
  %124 = add i64 %106, -200
  %125 = load i32, i32* %14, align 4
  %126 = add i64 %1, 134
  %127 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %127
  %128 = add i64 %106, -84
  %129 = add i64 %106, -48
  br label %block_4022f6

block_40277a:                                     ; preds = %block_40273e
  %130 = add i32 %969, 1
  %131 = inttoptr i64 %454 to i32*
  store i32 %130, i32* %131
  %132 = add i64 %940, -326
  br label %block_402634

block_4028f7:                                     ; preds = %block_4028eb
  %133 = inttoptr i64 %458 to i64*
  %134 = load i64, i64* %133
  %135 = inttoptr i64 %442 to i32*
  %136 = load i32, i32* %135
  %137 = sext i32 %136 to i64
  %138 = shl nsw i64 %137, 3
  %139 = add i64 %138, %134
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  store double %141, double* %89, align 1, !tbaa !1244
  store double 0.000000e+00, double* %401, align 1, !tbaa !1244
  %142 = sext i32 %525 to i64
  %143 = shl nsw i64 %142, 3
  %144 = add i64 %143, %134
  %145 = inttoptr i64 %144 to double*
  store double %141, double* %145
  %146 = inttoptr i64 %455 to i64*
  %147 = load i64, i64* %146
  %148 = inttoptr i64 %442 to i32*
  %149 = load i32, i32* %148
  %150 = sext i32 %149 to i64
  %151 = shl nsw i64 %150, 2
  %152 = add i64 %151, %147
  %153 = inttoptr i64 %152 to i32*
  %154 = load i32, i32* %153
  %155 = inttoptr i64 %454 to i32*
  %156 = load i32, i32* %155
  %157 = sext i32 %156 to i64
  %158 = shl nsw i64 %157, 2
  %159 = add i64 %158, %147
  %160 = inttoptr i64 %159 to i32*
  store i32 %154, i32* %160
  %161 = inttoptr i64 %442 to i32*
  %162 = load i32, i32* %161
  %163 = add i32 %162, 1
  %164 = inttoptr i64 %442 to i32*
  store i32 %163, i32* %164
  %165 = inttoptr i64 %454 to i32*
  %166 = load i32, i32* %165
  %167 = add i32 %166, 1
  %168 = inttoptr i64 %454 to i32*
  store i32 %167, i32* %168
  %169 = add i64 %539, -12
  br label %block_4028eb

block_402468:                                     ; preds = %block_402461, %block_4024c8
  %170 = phi i64 [ %1201, %block_402461 ], [ %574, %block_4024c8 ]
  %171 = phi %struct.Memory* [ %462, %block_402461 ], [ %1262, %block_4024c8 ]
  %172 = inttoptr i64 %1200 to i32*
  %173 = load i32, i32* %172
  %174 = inttoptr i64 %1203 to i32*
  %175 = load i32, i32* %174
  %176 = sub i32 %173, %175
  %177 = lshr i32 %176, 31
  %178 = trunc i32 %177 to i8
  %179 = lshr i32 %173, 31
  %180 = lshr i32 %175, 31
  %181 = xor i32 %180, %179
  %182 = xor i32 %177, %179
  %183 = add nuw nsw i32 %182, %181
  %184 = icmp eq i32 %183, 2
  %185 = icmp ne i8 %178, 0
  %186 = xor i1 %185, %184
  %187 = select i1 %186, i64 12, i64 125
  %188 = add i64 %170, %187
  br i1 %186, label %block_402474, label %block_4024e5

block_402695:                                     ; preds = %block_402683
  %189 = inttoptr i64 %458 to i64*
  %190 = load i64, i64* %189
  %191 = shl nsw i64 %1243, 3
  %192 = add i64 %191, %190
  %193 = inttoptr i64 %192 to double*
  %194 = load double, double* %193
  store double %194, double* %89, align 1, !tbaa !1244
  store double 0.000000e+00, double* %401, align 1, !tbaa !1244
  %195 = add i32 %881, 1
  %196 = sext i32 %195 to i64
  %197 = shl nsw i64 %196, 3
  %198 = add i64 %190, %197
  %199 = inttoptr i64 %198 to double*
  store double %194, double* %199
  %200 = inttoptr i64 %455 to i64*
  %201 = load i64, i64* %200
  %202 = inttoptr i64 %457 to i32*
  %203 = load i32, i32* %202
  %204 = sext i32 %203 to i64
  %205 = shl nsw i64 %204, 2
  %206 = add i64 %205, %201
  %207 = inttoptr i64 %206 to i32*
  %208 = load i32, i32* %207
  %209 = add i32 %203, 1
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %19, align 8, !tbaa !1240
  %211 = sext i32 %209 to i64
  %212 = shl nsw i64 %211, 2
  %213 = add i64 %201, %212
  %214 = add i64 %1260, 58
  %215 = inttoptr i64 %213 to i32*
  store i32 %208, i32* %215
  br label %block_4026cf

block_40233e:                                     ; preds = %block_402352, %block_402337
  %216 = phi i64 [ %540, %block_402337 ], [ %1072, %block_402352 ]
  %217 = phi %struct.Memory* [ %1129, %block_402337 ], [ %217, %block_402352 ]
  %218 = inttoptr i64 %712 to i32*
  %219 = load i32, i32* %218
  %220 = inttoptr i64 %713 to i64*
  %221 = load i64, i64* %220
  %222 = inttoptr i64 %708 to i32*
  %223 = load i32, i32* %222
  %224 = sext i32 %223 to i64
  %225 = shl nsw i64 %224, 2
  %226 = add i64 %221, %225
  %227 = inttoptr i64 %226 to i32*
  %228 = load i32, i32* %227
  %229 = sub i32 %219, %228
  %230 = lshr i32 %229, 31
  %231 = lshr i32 %219, 31
  %232 = lshr i32 %228, 31
  %233 = xor i32 %232, %231
  %234 = xor i32 %230, %231
  %235 = add nuw nsw i32 %234, %233
  %236 = icmp eq i32 %235, 2
  %237 = icmp ne i32 %230, 0
  %238 = xor i1 %237, %236
  %239 = select i1 %238, i64 20, i64 95
  %240 = add i64 %216, %239
  br i1 %238, label %block_402352, label %block_40239d

block_402661:                                     ; preds = %block_40264d
  store i64 %975, i64* %19, align 8, !tbaa !1240
  %241 = add i32 %979, -2
  %242 = add i64 %667, 22
  %243 = inttoptr i64 %457 to i32*
  store i32 %241, i32* %243
  br label %block_402677

block_4027a4:                                     ; preds = %block_402797
  store i64 %1108, i64* %18, align 8, !tbaa !1240
  store i64 %1109, i64* %17, align 8
  store i8 0, i8* %41, align 1, !tbaa !1246
  store i8 1, i8* %42, align 1, !tbaa !1260
  store i8 0, i8* %43, align 1, !tbaa !1261
  store i8 1, i8* %44, align 1, !tbaa !1262
  store i8 0, i8* %45, align 1, !tbaa !1263
  store i8 0, i8* %46, align 1, !tbaa !1264
  %244 = inttoptr i64 %438 to i32*
  %245 = load i32, i32* %244
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %19, align 8, !tbaa !1240
  %247 = add i64 %1116, 20
  %248 = load i64, i64* %21, align 8, !tbaa !1240
  %249 = add i64 %248, -8
  %250 = inttoptr i64 %249 to i64*
  store i64 %247, i64* %250
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %253 = load i64, i64* %251, align 8, !alias.scope !1333, !noalias !1336
  %254 = load i64, i64* %252, align 8, !alias.scope !1333, !noalias !1336
  %255 = inttoptr i64 %248 to i64*
  %256 = load i64, i64* %255
  %257 = add i64 %248, 8
  %258 = inttoptr i64 %257 to i64*
  %259 = load i64, i64* %258
  %260 = add i64 %248, 16
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  %263 = add i64 %248, 24
  %264 = inttoptr i64 %263 to i64*
  %265 = load i64, i64* %264
  %266 = add i64 %248, 32
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  %269 = add i64 %248, 40
  %270 = inttoptr i64 %269 to i64*
  %271 = load i64, i64* %270
  %272 = add i64 %248, 48
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273
  %275 = add i64 %248, 56
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %248, 64
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %248, 72
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = inttoptr i64 %249 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %3, align 8, !alias.scope !1333, !noalias !1336
  store i64 %248, i64* %21, align 8, !alias.scope !1333, !noalias !1336
  %286 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1651), i64 %246, i64 %1108, i64 %1109, i64 %253, i64 %254, i64 %256, i64 %259, i64 %262, i64 %265, i64 %268, i64 %271, i64 %274, i64 %277, i64 %280, i64 %283), !noalias !1333
  %287 = load i64, i64* %3, align 8
  store i64 1, i64* %20, align 8, !tbaa !1240
  %288 = load i64, i64* %22, align 8
  %289 = add i64 %288, -220
  %290 = trunc i64 %286 to i32
  %291 = inttoptr i64 %289 to i32*
  store i32 %290, i32* %291
  %292 = add i64 %287, 16
  %293 = load i64, i64* %21, align 8, !tbaa !1240
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %295
  %296 = inttoptr i64 %294 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %3, align 8, !alias.scope !1338, !noalias !1341
  store i64 %293, i64* %21, align 8, !alias.scope !1338, !noalias !1341
  %298 = tail call i64 @exit(i64 1), !noalias !1338
  store i64 %298, i64* %426, align 8, !alias.scope !1338, !noalias !1341
  %299 = load i64, i64* %3, align 8
  %300 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %299, %struct.Memory* %1111)
  ret %struct.Memory* %300

block_4027f8:                                     ; preds = %block_402595
  %301 = inttoptr i64 %442 to i32*
  %302 = load i32, i32* %301
  %303 = add i32 %302, 1
  %304 = inttoptr i64 %442 to i32*
  store i32 %303, i32* %304
  %305 = add i64 %965, -700
  br label %block_40253c

block_402550:                                     ; preds = %block_40253c
  %306 = inttoptr i64 %444 to i64*
  %307 = load i64, i64* %306
  %308 = mul nsw i64 %1224, 48
  %309 = add i64 %308, %307
  %310 = sext i32 %1219 to i64
  %311 = shl nsw i64 %310, 2
  %312 = add i64 %311, %309
  %313 = inttoptr i64 %312 to i32*
  %314 = load i32, i32* %313
  %315 = inttoptr i64 %445 to i32*
  store i32 %314, i32* %315
  %316 = inttoptr i64 %446 to double*
  %317 = load double, double* %316
  %318 = inttoptr i64 %447 to i64*
  %319 = load i64, i64* %318
  %320 = inttoptr i64 %438 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %322, 96
  %324 = add i64 %323, %319
  %325 = inttoptr i64 %442 to i32*
  %326 = load i32, i32* %325
  %327 = sext i32 %326 to i64
  %328 = shl nsw i64 %327, 3
  %329 = add i64 %328, %324
  %330 = inttoptr i64 %329 to double*
  %331 = load double, double* %330
  %332 = fmul double %317, %331
  store double %332, double* %89, align 1, !tbaa !1244
  store i64 0, i64* %1206, align 1, !tbaa !1244
  %333 = inttoptr i64 %448 to double*
  store double %332, double* %333
  %334 = add i64 %1240, 69
  %335 = inttoptr i64 %449 to i32*
  store i32 0, i32* %335
  br label %block_402595

block_4027c8:                                     ; preds = %block_402797
  %336 = inttoptr i64 %458 to i64*
  %337 = load i64, i64* %336
  %338 = inttoptr i64 %454 to i32*
  %339 = load i32, i32* %338
  %340 = sext i32 %339 to i64
  %341 = shl nsw i64 %340, 3
  %342 = add i64 %341, %337
  %343 = inttoptr i64 %342 to double*
  %344 = load double, double* %343
  %345 = inttoptr i64 %451 to double*
  %346 = load double, double* %345
  %347 = fadd double %344, %346
  store double %347, double* %89, align 1, !tbaa !1244
  store i64 0, i64* %1206, align 1, !tbaa !1244
  %348 = inttoptr i64 %342 to double*
  store double %347, double* %348
  %349 = inttoptr i64 %449 to i32*
  %350 = load i32, i32* %349
  %351 = add i32 %350, 1
  %352 = inttoptr i64 %449 to i32*
  store i32 %351, i32* %352
  %353 = add i64 %1116, -563
  br label %block_402595

block_4022f6:                                     ; preds = %block_402307, %block_402270
  %354 = phi i64 [ %126, %block_402270 ], [ %1127, %block_402307 ]
  %355 = phi %struct.Memory* [ %2, %block_402270 ], [ %355, %block_402307 ]
  %356 = inttoptr i64 %107 to i32*
  %357 = load i32, i32* %356
  %358 = inttoptr i64 %128 to i32*
  %359 = load i32, i32* %358
  %360 = add i32 %359, 1
  %361 = sub i32 %357, %360
  %362 = lshr i32 %361, 31
  %363 = trunc i32 %362 to i8
  %364 = lshr i32 %357, 31
  %365 = lshr i32 %360, 31
  %366 = xor i32 %365, %364
  %367 = xor i32 %362, %364
  %368 = add nuw nsw i32 %367, %366
  %369 = icmp eq i32 %368, 2
  %370 = icmp ne i8 %363, 0
  %371 = xor i1 %370, %369
  %372 = select i1 %371, i64 17, i64 46
  %373 = add i64 %354, %372
  br i1 %371, label %block_402307, label %block_402324

block_4025f6:                                     ; preds = %block_4025a9
  %374 = inttoptr i64 %438 to i32*
  %375 = load i32, i32* %374
  %376 = icmp ne i32 %1316, %375
  %377 = select i1 %376, i64 38, i64 12
  %378 = add i64 %1321, %377
  br i1 %376, label %block_40261c, label %block_402602

block_40283e:                                     ; preds = %block_402832
  %379 = inttoptr i64 %456 to i64*
  %380 = load i64, i64* %379
  %381 = sext i32 %828 to i64
  %382 = shl nsw i64 %381, 2
  %383 = add i64 %382, %380
  %384 = inttoptr i64 %383 to i32*
  %385 = load i32, i32* %384
  %386 = add i32 %828, -1
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %19, align 8, !tbaa !1240
  %388 = sext i32 %386 to i64
  %389 = shl nsw i64 %388, 2
  %390 = add i64 %380, %389
  %391 = inttoptr i64 %390 to i32*
  %392 = load i32, i32* %391
  %393 = add i32 %392, %385
  %394 = inttoptr i64 %383 to i32*
  store i32 %393, i32* %394
  %395 = inttoptr i64 %445 to i32*
  %396 = load i32, i32* %395
  %397 = add i32 %396, 1
  %398 = inttoptr i64 %445 to i32*
  store i32 %397, i32* %398
  %399 = add i64 %843, -12
  br label %block_402832

block_4024e5:                                     ; preds = %block_402468
  %400 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  %401 = bitcast i64* %1206 to double*
  %402 = add i64 %1199, -128
  %403 = inttoptr i64 %402 to double*
  store double %400, double* %403
  %404 = add i64 %1199, -72
  %405 = inttoptr i64 %404 to double*
  %406 = load double, double* %405
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %408 = bitcast i64* %407 to double*
  %409 = add i64 %1199, -52
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410
  %412 = sitofp i32 %411 to double
  %413 = bitcast %union.VectorReg* %706 to double*
  store double %412, double* %413, align 1, !tbaa !1244
  %414 = fdiv double %400, %412
  %415 = add i64 %1199, -216
  %416 = inttoptr i64 %415 to double*
  store double %414, double* %416
  %417 = bitcast double %406 to <2 x i32>
  %418 = extractelement <2 x i32> %417, i32 0
  store i32 %418, i32* %1207, align 1, !tbaa !1330
  %419 = extractelement <2 x i32> %417, i32 1
  store i32 %419, i32* %1209, align 1, !tbaa !1330
  store i32 0, i32* %1210, align 1, !tbaa !1330
  store i32 0, i32* %1212, align 1, !tbaa !1330
  %420 = inttoptr i64 %415 to double*
  %421 = load double, double* %420
  store double %421, double* %93, align 1, !tbaa !1244
  store double 0.000000e+00, double* %408, align 1, !tbaa !1244
  %422 = add i64 %188, 53
  %423 = load i64, i64* %21, align 8, !tbaa !1240
  %424 = add i64 %423, -8
  %425 = inttoptr i64 %424 to i64*
  store i64 %422, i64* %425
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %428 = load i64, i64* %20, align 8, !alias.scope !1343, !noalias !1346
  %429 = load i64, i64* %427, align 8, !alias.scope !1343, !noalias !1346
  %430 = inttoptr i64 %424 to i64*
  %431 = load i64, i64* %430
  store i64 %431, i64* %3, align 8, !alias.scope !1343, !noalias !1346
  store i64 %423, i64* %21, align 8, !alias.scope !1343, !noalias !1346
  %432 = tail call i64 @pow(i64 %428, i64 %429), !noalias !1343
  %433 = load i64, i64* %22, align 8
  %434 = add i64 %433, -144
  %435 = load i64, i64* %3, align 8
  %436 = load double, double* %89, align 1
  %437 = inttoptr i64 %434 to double*
  store double %436, double* %437
  %438 = add i64 %433, -88
  %439 = add i64 %435, 15
  %440 = inttoptr i64 %438 to i32*
  store i32 0, i32* %440
  %441 = add i64 %433, -52
  %442 = add i64 %433, -104
  %443 = add i64 %433, 16
  %444 = add i64 %433, 24
  %445 = add i64 %433, -92
  %446 = add i64 %433, -128
  %447 = add i64 %433, 32
  %448 = add i64 %433, -136
  %449 = add i64 %433, -116
  %450 = add i64 %433, -120
  %451 = add i64 %433, -152
  %452 = add i64 %433, -156
  %453 = add i64 %433, -48
  %454 = add i64 %433, -108
  %455 = add i64 %433, -40
  %456 = add i64 %433, 56
  %457 = add i64 %433, -112
  %458 = add i64 %433, -32
  %459 = add i64 %433, -72
  %460 = add i64 %433, -80
  br label %block_402529

block_4023c1:                                     ; preds = %block_4023d2, %block_4023b0
  %461 = phi i64 [ %578, %block_4023b0 ], [ %937, %block_4023d2 ]
  %462 = phi %struct.Memory* [ %1129, %block_4023b0 ], [ %462, %block_4023d2 ]
  %463 = inttoptr i64 %107 to i32*
  %464 = load i32, i32* %463
  %465 = inttoptr i64 %128 to i32*
  %466 = load i32, i32* %465
  %467 = add i32 %466, 1
  %468 = sub i32 %464, %467
  %469 = lshr i32 %468, 31
  %470 = lshr i32 %464, 31
  %471 = lshr i32 %467, 31
  %472 = xor i32 %471, %470
  %473 = xor i32 %469, %470
  %474 = add nuw nsw i32 %473, %472
  %475 = icmp eq i32 %474, 2
  %476 = icmp ne i32 %469, 0
  %477 = xor i1 %476, %475
  %478 = select i1 %477, i64 17, i64 69
  %479 = add i64 %461, %478
  %480 = inttoptr i64 %129 to i64*
  %481 = load i64, i64* %480
  br i1 %477, label %block_4023d2, label %block_402406

block_40293e:                                     ; preds = %block_4028eb
  %482 = inttoptr i64 %445 to i32*
  %483 = load i32, i32* %482
  %484 = add i32 %483, 1
  %485 = inttoptr i64 %445 to i32*
  store i32 %484, i32* %485
  %486 = add i64 %539, -197
  br label %block_402879

block_4028b9:                                     ; preds = %block_40288f, %block_4028b2
  %487 = phi i64 [ %544, %block_4028b2 ], [ %705, %block_40288f ]
  %488 = phi %struct.Memory* [ %581, %block_4028b2 ], [ %581, %block_40288f ]
  %489 = inttoptr i64 %453 to i64*
  %490 = load i64, i64* %489
  %491 = inttoptr i64 %445 to i32*
  %492 = load i32, i32* %491
  %493 = add i32 %492, 1
  %494 = sext i32 %493 to i64
  %495 = shl nsw i64 %494, 2
  %496 = add i64 %490, %495
  %497 = inttoptr i64 %496 to i32*
  %498 = load i32, i32* %497
  %499 = inttoptr i64 %456 to i64*
  %500 = load i64, i64* %499
  %501 = sext i32 %492 to i64
  %502 = shl nsw i64 %501, 2
  %503 = add i64 %500, %502
  %504 = inttoptr i64 %503 to i32*
  %505 = load i32, i32* %504
  %506 = sub i32 %498, %505
  %507 = inttoptr i64 %1099 to i32*
  store i32 %506, i32* %507
  %508 = inttoptr i64 %453 to i64*
  %509 = load i64, i64* %508
  %510 = inttoptr i64 %445 to i32*
  %511 = load i32, i32* %510
  %512 = sext i32 %511 to i64
  %513 = shl nsw i64 %512, 2
  %514 = add i64 %513, %509
  %515 = inttoptr i64 %514 to i32*
  %516 = load i32, i32* %515
  %517 = inttoptr i64 %442 to i32*
  store i32 %516, i32* %517
  %518 = inttoptr i64 %1098 to i32*
  %519 = load i32, i32* %518
  %520 = add i64 %487, 50
  %521 = inttoptr i64 %454 to i32*
  store i32 %519, i32* %521
  br label %block_4028eb

block_4028eb:                                     ; preds = %block_4028b9, %block_4028f7
  %522 = phi i64 [ %520, %block_4028b9 ], [ %169, %block_4028f7 ]
  %523 = phi %struct.Memory* [ %488, %block_4028b9 ], [ %523, %block_4028f7 ]
  %524 = inttoptr i64 %454 to i32*
  %525 = load i32, i32* %524
  %526 = inttoptr i64 %1099 to i32*
  %527 = load i32, i32* %526
  %528 = sub i32 %525, %527
  %529 = lshr i32 %528, 31
  %530 = lshr i32 %525, 31
  %531 = lshr i32 %527, 31
  %532 = xor i32 %531, %530
  %533 = xor i32 %529, %530
  %534 = add nuw nsw i32 %533, %532
  %535 = icmp eq i32 %534, 2
  %536 = icmp ne i32 %529, 0
  %537 = xor i1 %536, %535
  %538 = select i1 %537, i64 12, i64 83
  %539 = add i64 %522, %538
  br i1 %537, label %block_4028f7, label %block_40293e

block_402337:                                     ; preds = %block_40232b
  %540 = add i64 %1146, 7
  %541 = inttoptr i64 %712 to i32*
  store i32 0, i32* %541
  br label %block_40233e

block_402535:                                     ; preds = %block_402529
  %542 = add i64 %686, 7
  %543 = inttoptr i64 %442 to i32*
  store i32 0, i32* %543
  br label %block_40253c

block_4028b2:                                     ; preds = %block_402885
  %544 = add i64 %1198, 7
  %545 = inttoptr i64 %1098 to i32*
  store i32 0, i32* %545
  br label %block_4028b9

block_402958:                                     ; preds = %block_402951, %block_402969
  %546 = phi %struct.Memory* [ %581, %block_402951 ], [ %546, %block_402969 ]
  %547 = inttoptr i64 %445 to i32*
  %548 = load i32, i32* %547
  %549 = inttoptr i64 %1036 to i32*
  %550 = load i32, i32* %549
  %551 = add i32 %550, 1
  %552 = sub i32 %548, %551
  %553 = lshr i32 %552, 31
  %554 = lshr i32 %548, 31
  %555 = lshr i32 %551, 31
  %556 = xor i32 %555, %554
  %557 = xor i32 %553, %554
  %558 = add nuw nsw i32 %557, %556
  %559 = icmp eq i32 %558, 2
  %560 = icmp ne i32 %553, 0
  %561 = xor i1 %560, %559
  %562 = inttoptr i64 %453 to i64*
  %563 = load i64, i64* %562
  br i1 %561, label %block_402969, label %block_40299d

block_4024c8:                                     ; preds = %block_402482
  store i64 %1270, i64* %19, align 8, !tbaa !1240
  %564 = inttoptr i64 %1215 to i64*
  %565 = load i64, i64* %564
  %566 = sext i32 %1268 to i64
  %567 = shl nsw i64 %566, 2
  %568 = add i64 %567, %565
  %569 = inttoptr i64 %568 to i32*
  store i32 0, i32* %569
  %570 = inttoptr i64 %1200 to i32*
  %571 = load i32, i32* %570
  %572 = add i32 %571, 1
  %573 = inttoptr i64 %1200 to i32*
  store i32 %572, i32* %573
  %574 = add i64 %1286, -96
  br label %block_402468

block_4023b0:                                     ; preds = %block_40232b
  %575 = inttoptr i64 %129 to i64*
  %576 = load i64, i64* %575
  %577 = inttoptr i64 %576 to i32*
  store i32 0, i32* %577
  %578 = add i64 %1146, 17
  %579 = inttoptr i64 %107 to i32*
  store i32 1, i32* %579
  br label %block_4023c1

block_402879:                                     ; preds = %block_402872, %block_40293e
  %580 = phi i64 [ %1096, %block_402872 ], [ %486, %block_40293e ]
  %581 = phi %struct.Memory* [ %826, %block_402872 ], [ %523, %block_40293e ]
  %582 = inttoptr i64 %445 to i32*
  %583 = load i32, i32* %582
  %584 = inttoptr i64 %1036 to i32*
  %585 = load i32, i32* %584
  %586 = sub i32 %583, %585
  %587 = lshr i32 %586, 31
  %588 = trunc i32 %587 to i8
  %589 = lshr i32 %583, 31
  %590 = lshr i32 %585, 31
  %591 = xor i32 %590, %589
  %592 = xor i32 %587, %589
  %593 = add nuw nsw i32 %592, %591
  %594 = icmp eq i32 %593, 2
  %595 = icmp ne i8 %588, 0
  %596 = xor i1 %595, %594
  %597 = select i1 %596, i64 12, i64 216
  %598 = add i64 %580, %597
  br i1 %596, label %block_402885, label %block_402951

block_40299d:                                     ; preds = %block_402958
  store i64 %563, i64* %15, align 8, !tbaa !1240
  %599 = sext i32 %550 to i64
  store i64 %599, i64* %17, align 8, !tbaa !1240
  %600 = shl nsw i64 %599, 2
  %601 = add i64 %600, %563
  %602 = inttoptr i64 %601 to i32*
  %603 = load i32, i32* %602
  %604 = add i32 %603, -1
  %605 = zext i32 %604 to i64
  store i64 %605, i64* %18, align 8, !tbaa !1240
  %606 = inttoptr i64 %442 to i32*
  store i32 %604, i32* %606
  %607 = load i64, i64* %21, align 8
  %608 = add i64 %607, 200
  %609 = icmp ugt i64 %607, -201
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %41, align 1, !tbaa !1246
  %611 = trunc i64 %608 to i32
  %612 = and i32 %611, 255
  %613 = tail call i32 @llvm.ctpop.i32(i32 %612) #11
  %614 = trunc i32 %613 to i8
  %615 = and i8 %614, 1
  %616 = xor i8 %615, 1
  store i8 %616, i8* %42, align 1, !tbaa !1260
  %617 = xor i64 %608, %607
  %618 = lshr i64 %617, 4
  %619 = trunc i64 %618 to i8
  %620 = and i8 %619, 1
  store i8 %620, i8* %43, align 1, !tbaa !1261
  %621 = icmp eq i64 %608, 0
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %44, align 1, !tbaa !1262
  %623 = lshr i64 %608, 63
  %624 = trunc i64 %623 to i8
  store i8 %624, i8* %45, align 1, !tbaa !1263
  %625 = lshr i64 %607, 63
  %626 = xor i64 %623, %625
  %627 = add nuw nsw i64 %626, %623
  %628 = icmp eq i64 %627, 2
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %46, align 1, !tbaa !1264
  %630 = add i64 %607, 208
  %631 = inttoptr i64 %608 to i64*
  %632 = load i64, i64* %631
  store i64 %632, i64* %16, align 8, !tbaa !1240
  %633 = add i64 %607, 216
  %634 = inttoptr i64 %630 to i64*
  %635 = load i64, i64* %634
  store i64 %635, i64* %23, align 8, !tbaa !1240
  %636 = add i64 %607, 224
  %637 = inttoptr i64 %633 to i64*
  %638 = load i64, i64* %637
  store i64 %638, i64* %24, align 8, !tbaa !1240
  %639 = add i64 %607, 232
  %640 = inttoptr i64 %636 to i64*
  %641 = load i64, i64* %640
  store i64 %641, i64* %22, align 8, !tbaa !1240
  %642 = inttoptr i64 %639 to i64*
  %643 = load i64, i64* %642
  store i64 %643, i64* %3, align 8, !tbaa !1240
  %644 = add i64 %607, 240
  store i64 %644, i64* %21, align 8, !tbaa !1240
  ret %struct.Memory* %546

block_40264d:                                     ; preds = %block_402634
  %645 = inttoptr i64 %455 to i64*
  %646 = load i64, i64* %645
  %647 = sext i32 %969 to i64
  %648 = shl nsw i64 %647, 2
  %649 = add i64 %648, %646
  %650 = inttoptr i64 %649 to i32*
  %651 = load i32, i32* %650
  %652 = inttoptr i64 %450 to i32*
  %653 = load i32, i32* %652
  %654 = sub i32 %651, %653
  %655 = icmp eq i32 %654, 0
  %656 = lshr i32 %654, 31
  %657 = lshr i32 %651, 31
  %658 = lshr i32 %653, 31
  %659 = xor i32 %658, %657
  %660 = xor i32 %656, %657
  %661 = add nuw nsw i32 %660, %659
  %662 = icmp eq i32 %661, 2
  %663 = icmp ne i32 %656, 0
  %664 = xor i1 %663, %662
  %665 = or i1 %655, %664
  %666 = select i1 %665, i64 194, i64 20
  %667 = add i64 %991, %666
  br i1 %665, label %block_40270f, label %block_402661

block_402529:                                     ; preds = %block_40280b, %block_4024e5
  %668 = phi i64 [ %439, %block_4024e5 ], [ %1033, %block_40280b ]
  %669 = phi %struct.Memory* [ %171, %block_4024e5 ], [ %1217, %block_40280b ]
  %670 = inttoptr i64 %438 to i32*
  %671 = load i32, i32* %670
  %672 = inttoptr i64 %441 to i32*
  %673 = load i32, i32* %672
  %674 = sub i32 %671, %673
  %675 = lshr i32 %674, 31
  %676 = trunc i32 %675 to i8
  %677 = lshr i32 %671, 31
  %678 = lshr i32 %673, 31
  %679 = xor i32 %678, %677
  %680 = xor i32 %675, %677
  %681 = add nuw nsw i32 %680, %679
  %682 = icmp eq i32 %681, 2
  %683 = icmp ne i8 %676, 0
  %684 = xor i1 %683, %682
  %685 = select i1 %684, i64 12, i64 770
  %686 = add i64 %668, %685
  br i1 %684, label %block_402535, label %block_40282b

block_40288f:                                     ; preds = %block_402885
  %687 = inttoptr i64 %453 to i64*
  %688 = load i64, i64* %687
  %689 = sext i32 %583 to i64
  %690 = shl nsw i64 %689, 2
  %691 = add i64 %690, %688
  %692 = inttoptr i64 %691 to i32*
  %693 = load i32, i32* %692
  %694 = inttoptr i64 %456 to i64*
  %695 = load i64, i64* %694
  %696 = add i32 %583, -1
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %19, align 8, !tbaa !1240
  %698 = sext i32 %696 to i64
  %699 = shl nsw i64 %698, 2
  %700 = add i64 %695, %699
  %701 = inttoptr i64 %700 to i32*
  %702 = load i32, i32* %701
  %703 = sub i32 %693, %702
  %704 = inttoptr i64 %1098 to i32*
  store i32 %703, i32* %704
  %705 = add i64 %1198, 42
  br label %block_4028b9

block_402324:                                     ; preds = %block_4022f6
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %707 = bitcast [32 x %union.VectorReg]* %25 to i8*
  %708 = add i64 %106, -88
  %709 = add i64 %373, 7
  %710 = inttoptr i64 %708 to i32*
  store i32 0, i32* %710
  %711 = add i64 %106, -52
  %712 = add i64 %106, -104
  %713 = add i64 %106, 16
  %714 = add i64 %106, 24
  br label %block_40232b

block_402423:                                     ; preds = %block_402406
  %715 = add i64 %1188, 17
  %716 = load i64, i64* %21, align 8, !tbaa !1240
  %717 = add i64 %716, -8
  %718 = inttoptr i64 %717 to i64*
  store i64 %715, i64* %718
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %724 = load i64, i64* %721, align 8, !alias.scope !1348, !noalias !1351
  %725 = load i64, i64* %722, align 8, !alias.scope !1348, !noalias !1351
  %726 = load i64, i64* %723, align 8, !alias.scope !1348, !noalias !1351
  %727 = inttoptr i64 %716 to i64*
  %728 = load i64, i64* %727
  %729 = add i64 %716, 8
  %730 = inttoptr i64 %729 to i64*
  %731 = load i64, i64* %730
  %732 = add i64 %716, 16
  %733 = inttoptr i64 %732 to i64*
  %734 = load i64, i64* %733
  %735 = add i64 %716, 24
  %736 = inttoptr i64 %735 to i64*
  %737 = load i64, i64* %736
  %738 = add i64 %716, 32
  %739 = inttoptr i64 %738 to i64*
  %740 = load i64, i64* %739
  %741 = add i64 %716, 40
  %742 = inttoptr i64 %741 to i64*
  %743 = load i64, i64* %742
  %744 = add i64 %716, 48
  %745 = inttoptr i64 %744 to i64*
  %746 = load i64, i64* %745
  %747 = add i64 %716, 56
  %748 = inttoptr i64 %747 to i64*
  %749 = load i64, i64* %748
  %750 = add i64 %716, 64
  %751 = inttoptr i64 %750 to i64*
  %752 = load i64, i64* %751
  %753 = add i64 %716, 72
  %754 = inttoptr i64 %753 to i64*
  %755 = load i64, i64* %754
  %756 = inttoptr i64 %717 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %3, align 8, !alias.scope !1348, !noalias !1351
  store i64 %716, i64* %21, align 8, !alias.scope !1348, !noalias !1351
  %758 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1584), i64 %724, i64 %1156, i64 %1147, i64 %725, i64 %726, i64 %728, i64 %731, i64 %734, i64 %737, i64 %740, i64 %743, i64 %746, i64 %749, i64 %752, i64 %755), !noalias !1348
  %759 = load i64, i64* %3, align 8
  %760 = load i64, i64* %22, align 8
  %761 = add i64 %760, -104
  %762 = inttoptr i64 %761 to i32*
  %763 = load i32, i32* %762
  %764 = zext i32 %763 to i64
  store i64 %764, i64* %19, align 8, !tbaa !1240
  %765 = add i64 %760, -56
  %766 = inttoptr i64 %765 to i32*
  %767 = load i32, i32* %766
  %768 = zext i32 %767 to i64
  store i64 %768, i64* %18, align 8, !tbaa !1240
  %769 = add i64 %760, -204
  %770 = trunc i64 %758 to i32
  %771 = inttoptr i64 %769 to i32*
  store i32 %770, i32* %771
  %772 = add i64 %759, 29
  %773 = load i64, i64* %21, align 8, !tbaa !1240
  %774 = add i64 %773, -8
  %775 = inttoptr i64 %774 to i64*
  store i64 %772, i64* %775
  %776 = load i64, i64* %720, align 8, !alias.scope !1353, !noalias !1356
  %777 = load i64, i64* %722, align 8, !alias.scope !1353, !noalias !1356
  %778 = load i64, i64* %723, align 8, !alias.scope !1353, !noalias !1356
  %779 = inttoptr i64 %773 to i64*
  %780 = load i64, i64* %779
  %781 = add i64 %773, 8
  %782 = inttoptr i64 %781 to i64*
  %783 = load i64, i64* %782
  %784 = add i64 %773, 16
  %785 = inttoptr i64 %784 to i64*
  %786 = load i64, i64* %785
  %787 = add i64 %773, 24
  %788 = inttoptr i64 %787 to i64*
  %789 = load i64, i64* %788
  %790 = add i64 %773, 32
  %791 = inttoptr i64 %790 to i64*
  %792 = load i64, i64* %791
  %793 = add i64 %773, 40
  %794 = inttoptr i64 %793 to i64*
  %795 = load i64, i64* %794
  %796 = add i64 %773, 48
  %797 = inttoptr i64 %796 to i64*
  %798 = load i64, i64* %797
  %799 = add i64 %773, 56
  %800 = inttoptr i64 %799 to i64*
  %801 = load i64, i64* %800
  %802 = add i64 %773, 64
  %803 = inttoptr i64 %802 to i64*
  %804 = load i64, i64* %803
  %805 = add i64 %773, 72
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = inttoptr i64 %774 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %3, align 8, !alias.scope !1353, !noalias !1356
  store i64 %773, i64* %21, align 8, !alias.scope !1353, !noalias !1356
  %810 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1630), i64 %764, i64 %768, i64 %776, i64 %777, i64 %778, i64 %780, i64 %783, i64 %786, i64 %789, i64 %792, i64 %795, i64 %798, i64 %801, i64 %804, i64 %807), !noalias !1353
  %811 = load i64, i64* %3, align 8
  store i64 1, i64* %20, align 8, !tbaa !1240
  %812 = load i64, i64* %22, align 8
  %813 = add i64 %812, -208
  %814 = trunc i64 %810 to i32
  %815 = inttoptr i64 %813 to i32*
  store i32 %814, i32* %815
  %816 = add i64 %811, 16
  %817 = load i64, i64* %21, align 8, !tbaa !1240
  %818 = add i64 %817, -8
  %819 = inttoptr i64 %818 to i64*
  store i64 %816, i64* %819
  %820 = inttoptr i64 %818 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %3, align 8, !alias.scope !1358, !noalias !1361
  store i64 %817, i64* %21, align 8, !alias.scope !1358, !noalias !1361
  %822 = tail call i64 @exit(i64 1), !noalias !1358
  store i64 %822, i64* %719, align 8, !alias.scope !1358, !noalias !1361
  %823 = load i64, i64* %3, align 8
  %824 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %823, %struct.Memory* %462)
  ret %struct.Memory* %824

block_402832:                                     ; preds = %block_40282b, %block_40283e
  %825 = phi i64 [ %1034, %block_40282b ], [ %399, %block_40283e ]
  %826 = phi %struct.Memory* [ %669, %block_40282b ], [ %826, %block_40283e ]
  %827 = inttoptr i64 %445 to i32*
  %828 = load i32, i32* %827
  %829 = inttoptr i64 %1036 to i32*
  %830 = load i32, i32* %829
  %831 = sub i32 %828, %830
  %832 = lshr i32 %831, 31
  %833 = trunc i32 %832 to i8
  %834 = lshr i32 %828, 31
  %835 = lshr i32 %830, 31
  %836 = xor i32 %835, %834
  %837 = xor i32 %832, %834
  %838 = add nuw nsw i32 %837, %836
  %839 = icmp eq i32 %838, 2
  %840 = icmp ne i8 %833, 0
  %841 = xor i1 %840, %839
  %842 = select i1 %841, i64 12, i64 64
  %843 = add i64 %825, %842
  br i1 %841, label %block_40283e, label %block_402872

block_402969:                                     ; preds = %block_402958
  %844 = sext i32 %548 to i64
  %845 = shl nsw i64 %844, 2
  %846 = add i64 %845, %563
  %847 = inttoptr i64 %846 to i32*
  %848 = load i32, i32* %847
  %849 = inttoptr i64 %456 to i64*
  %850 = load i64, i64* %849
  %851 = add i32 %548, -1
  %852 = zext i32 %851 to i64
  store i64 %852, i64* %19, align 8, !tbaa !1240
  %853 = sext i32 %851 to i64
  %854 = shl nsw i64 %853, 2
  %855 = add i64 %850, %854
  %856 = inttoptr i64 %855 to i32*
  %857 = load i32, i32* %856
  %858 = sub i32 %848, %857
  %859 = inttoptr i64 %846 to i32*
  store i32 %858, i32* %859
  %860 = inttoptr i64 %445 to i32*
  %861 = load i32, i32* %860
  %862 = add i32 %861, 1
  %863 = inttoptr i64 %445 to i32*
  store i32 %862, i32* %863
  br label %block_402958

block_402721:                                     ; preds = %block_40270f
  store i64 %975, i64* %19, align 8, !tbaa !1240
  %864 = add i64 %994, 14
  %865 = inttoptr i64 %649 to i32*
  store i32 %653, i32* %865
  br label %block_402797.sink.split

block_402752:                                     ; preds = %block_40273e
  store i64 %975, i64* %19, align 8, !tbaa !1240
  %866 = inttoptr i64 %456 to i64*
  %867 = load i64, i64* %866
  %868 = sext i32 %973 to i64
  %869 = shl nsw i64 %868, 2
  %870 = add i64 %869, %867
  %871 = inttoptr i64 %870 to i32*
  %872 = load i32, i32* %871
  %873 = add i32 %872, 1
  %874 = zext i32 %873 to i64
  %875 = add i64 %940, 25
  %876 = inttoptr i64 %870 to i32*
  store i32 %873, i32* %876
  br label %block_402797.sink.split

block_402951:                                     ; preds = %block_402879
  %877 = inttoptr i64 %445 to i32*
  store i32 1, i32* %877
  br label %block_402958

block_402677:                                     ; preds = %block_4026cf, %block_402661
  %878 = phi i64 [ %242, %block_402661 ], [ %1195, %block_4026cf ]
  %879 = phi %struct.Memory* [ %967, %block_402661 ], [ %1190, %block_4026cf ]
  %880 = inttoptr i64 %457 to i32*
  %881 = load i32, i32* %880
  %882 = inttoptr i64 %454 to i32*
  %883 = load i32, i32* %882
  %884 = sub i32 %881, %883
  %885 = lshr i32 %884, 31
  %886 = lshr i32 %881, 31
  %887 = lshr i32 %883, 31
  %888 = xor i32 %887, %886
  %889 = xor i32 %885, %886
  %890 = add nuw nsw i32 %889, %888
  %891 = icmp eq i32 %890, 2
  %892 = icmp ne i32 %885, 0
  %893 = xor i1 %892, %891
  %894 = select i1 %893, i64 107, i64 12
  %895 = add i64 %878, %894
  br i1 %893, label %block_4026e2, label %block_402683

block_40239d:                                     ; preds = %block_40233e
  %896 = add i32 %223, 1
  %897 = inttoptr i64 %708 to i32*
  store i32 %896, i32* %897
  %898 = add i64 %240, -114
  br label %block_40232b

block_40249b:                                     ; preds = %block_402482
  store i32 0, i32* %1207, align 1, !tbaa !1363
  store i32 0, i32* %1209, align 1, !tbaa !1363
  store i32 0, i32* %1210, align 1, !tbaa !1363
  store i32 0, i32* %1212, align 1, !tbaa !1363
  %899 = inttoptr i64 %1213 to i64*
  %900 = load i64, i64* %899
  %901 = sext i32 %1264 to i64
  %902 = shl nsw i64 %901, 3
  %903 = add i64 %902, %900
  %904 = load double, double* %89, align 1
  %905 = inttoptr i64 %903 to double*
  store double %904, double* %905
  %906 = inttoptr i64 %1214 to i64*
  %907 = load i64, i64* %906
  %908 = inttoptr i64 %1205 to i32*
  %909 = load i32, i32* %908
  %910 = sext i32 %909 to i64
  %911 = shl nsw i64 %910, 2
  %912 = add i64 %911, %907
  %913 = inttoptr i64 %912 to i32*
  store i32 -1, i32* %913
  %914 = inttoptr i64 %1205 to i32*
  %915 = load i32, i32* %914
  %916 = add i32 %915, 1
  %917 = inttoptr i64 %1205 to i32*
  store i32 %916, i32* %917
  %918 = add i64 %1286, -25
  br label %block_402482

block_4023d2:                                     ; preds = %block_4023c1
  %919 = sext i32 %464 to i64
  %920 = shl nsw i64 %919, 2
  %921 = add i64 %920, %481
  %922 = inttoptr i64 %921 to i32*
  %923 = load i32, i32* %922
  %924 = add i32 %464, -1
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %19, align 8, !tbaa !1240
  %926 = sext i32 %924 to i64
  %927 = shl nsw i64 %926, 2
  %928 = add i64 %481, %927
  %929 = inttoptr i64 %928 to i32*
  %930 = load i32, i32* %929
  %931 = add i32 %930, %923
  %932 = inttoptr i64 %921 to i32*
  store i32 %931, i32* %932
  %933 = inttoptr i64 %107 to i32*
  %934 = load i32, i32* %933
  %935 = add i32 %934, 1
  %936 = inttoptr i64 %107 to i32*
  store i32 %935, i32* %936
  %937 = add i64 %479, -17
  br label %block_4023c1

block_40273e:                                     ; preds = %block_40270f
  %938 = icmp ne i32 %651, %653
  %939 = select i1 %938, i64 60, i64 20
  %940 = add i64 %994, %939
  br i1 %938, label %block_40277a, label %block_402752

block_402595:                                     ; preds = %block_4027c8, %block_402550
  %941 = phi i64 [ %334, %block_402550 ], [ %353, %block_4027c8 ]
  %942 = phi %struct.Memory* [ %1217, %block_402550 ], [ %1111, %block_4027c8 ]
  %943 = inttoptr i64 %449 to i32*
  %944 = load i32, i32* %943
  %945 = inttoptr i64 %443 to i64*
  %946 = load i64, i64* %945
  %947 = inttoptr i64 %438 to i32*
  %948 = load i32, i32* %947
  %949 = sext i32 %948 to i64
  %950 = shl nsw i64 %949, 2
  %951 = add i64 %946, %950
  %952 = inttoptr i64 %951 to i32*
  %953 = load i32, i32* %952
  %954 = sub i32 %944, %953
  %955 = lshr i32 %954, 31
  %956 = lshr i32 %944, 31
  %957 = lshr i32 %953, 31
  %958 = xor i32 %957, %956
  %959 = xor i32 %955, %956
  %960 = add nuw nsw i32 %959, %958
  %961 = icmp eq i32 %960, 2
  %962 = icmp ne i32 %955, 0
  %963 = xor i1 %962, %961
  %964 = select i1 %963, i64 20, i64 611
  %965 = add i64 %941, %964
  br i1 %963, label %block_4025a9, label %block_4027f8

block_402634:                                     ; preds = %block_40261c, %block_40277a
  %966 = phi i64 [ %1085, %block_40261c ], [ %132, %block_40277a ]
  %967 = phi %struct.Memory* [ %1074, %block_40261c ], [ %967, %block_40277a ]
  %968 = inttoptr i64 %454 to i32*
  %969 = load i32, i32* %968
  %970 = inttoptr i64 %453 to i64*
  %971 = load i64, i64* %970
  %972 = inttoptr i64 %445 to i32*
  %973 = load i32, i32* %972
  %974 = add i32 %973, 1
  %975 = sext i32 %974 to i64
  %976 = shl nsw i64 %975, 2
  %977 = add i64 %971, %976
  %978 = inttoptr i64 %977 to i32*
  %979 = load i32, i32* %978
  %980 = sub i32 %969, %979
  %981 = lshr i32 %980, 31
  %982 = lshr i32 %969, 31
  %983 = lshr i32 %979, 31
  %984 = xor i32 %983, %982
  %985 = xor i32 %981, %982
  %986 = add nuw nsw i32 %985, %984
  %987 = icmp eq i32 %986, 2
  %988 = icmp ne i32 %981, 0
  %989 = xor i1 %988, %987
  %990 = select i1 %989, i64 25, i64 355
  %991 = add i64 %966, %990
  br i1 %989, label %block_40264d, label %block_402797.loopexit

block_40270f:                                     ; preds = %block_40264d
  %992 = icmp ne i32 %651, -1
  %993 = select i1 %992, i64 47, i64 18
  %994 = add i64 %667, %993
  br i1 %992, label %block_40273e, label %block_402721

block_402602:                                     ; preds = %block_4025f6
  %995 = inttoptr i64 %451 to double*
  %996 = load double, double* %995
  %997 = inttoptr i64 %459 to double*
  %998 = load double, double* %997
  %999 = fadd double %996, %998
  %1000 = inttoptr i64 %460 to double*
  %1001 = load double, double* %1000
  %1002 = fsub double %999, %1001
  store double %1002, double* %89, align 1, !tbaa !1244
  store i64 0, i64* %1206, align 1, !tbaa !1244
  %1003 = add i64 %378, 26
  %1004 = inttoptr i64 %451 to double*
  store double %1002, double* %1004
  br label %block_40261c

block_4026e2:                                     ; preds = %block_402677
  store i32 0, i32* %1207, align 1, !tbaa !1363
  store i32 0, i32* %1209, align 1, !tbaa !1363
  store i32 0, i32* %1210, align 1, !tbaa !1363
  store i32 0, i32* %1212, align 1, !tbaa !1363
  %1005 = inttoptr i64 %450 to i32*
  %1006 = load i32, i32* %1005
  %1007 = inttoptr i64 %455 to i64*
  %1008 = load i64, i64* %1007
  %1009 = sext i32 %883 to i64
  %1010 = shl nsw i64 %1009, 2
  %1011 = add i64 %1010, %1008
  %1012 = inttoptr i64 %1011 to i32*
  store i32 %1006, i32* %1012
  %1013 = inttoptr i64 %458 to i64*
  %1014 = load i64, i64* %1013
  %1015 = inttoptr i64 %454 to i32*
  %1016 = load i32, i32* %1015
  %1017 = sext i32 %1016 to i64
  %1018 = shl nsw i64 %1017, 3
  %1019 = add i64 %1018, %1014
  %1020 = add i64 %895, 30
  %1021 = load double, double* %89, align 1
  %1022 = inttoptr i64 %1019 to double*
  store double %1021, double* %1022
  br label %block_402797.sink.split

block_40280b:                                     ; preds = %block_40253c
  %1023 = inttoptr i64 %446 to double*
  %1024 = load double, double* %1023
  %1025 = inttoptr i64 %434 to double*
  %1026 = load double, double* %1025
  %1027 = fmul double %1024, %1026
  store double %1027, double* %89, align 1, !tbaa !1244
  store i64 0, i64* %1206, align 1, !tbaa !1244
  %1028 = inttoptr i64 %446 to double*
  store double %1027, double* %1028
  %1029 = inttoptr i64 %438 to i32*
  %1030 = load i32, i32* %1029
  %1031 = add i32 %1030, 1
  %1032 = inttoptr i64 %438 to i32*
  store i32 %1031, i32* %1032
  %1033 = add i64 %1240, -738
  br label %block_402529

block_40282b:                                     ; preds = %block_402529
  %1034 = add i64 %686, 7
  %1035 = inttoptr i64 %445 to i32*
  store i32 1, i32* %1035
  %1036 = add i64 %433, -84
  br label %block_402832

block_402352:                                     ; preds = %block_40233e
  %1037 = inttoptr i64 %714 to i64*
  %1038 = load i64, i64* %1037
  %1039 = mul nsw i64 %224, 48
  %1040 = add i64 %1039, %1038
  %1041 = sext i32 %219 to i64
  %1042 = shl nsw i64 %1041, 2
  %1043 = add i64 %1042, %1040
  %1044 = inttoptr i64 %1043 to i32*
  %1045 = load i32, i32* %1044
  %1046 = add i32 %1045, 1
  %1047 = inttoptr i64 %107 to i32*
  store i32 %1046, i32* %1047
  %1048 = inttoptr i64 %129 to i64*
  %1049 = load i64, i64* %1048
  %1050 = inttoptr i64 %107 to i32*
  %1051 = load i32, i32* %1050
  %1052 = sext i32 %1051 to i64
  %1053 = shl nsw i64 %1052, 2
  %1054 = add i64 %1053, %1049
  %1055 = inttoptr i64 %1054 to i32*
  %1056 = load i32, i32* %1055
  %1057 = inttoptr i64 %713 to i64*
  %1058 = load i64, i64* %1057
  %1059 = inttoptr i64 %708 to i32*
  %1060 = load i32, i32* %1059
  %1061 = sext i32 %1060 to i64
  %1062 = shl nsw i64 %1061, 2
  %1063 = add i64 %1058, %1062
  %1064 = inttoptr i64 %1063 to i32*
  %1065 = load i32, i32* %1064
  %1066 = add i32 %1065, %1056
  %1067 = inttoptr i64 %1054 to i32*
  store i32 %1066, i32* %1067
  %1068 = inttoptr i64 %712 to i32*
  %1069 = load i32, i32* %1068
  %1070 = add i32 %1069, 1
  %1071 = inttoptr i64 %712 to i32*
  store i32 %1070, i32* %1071
  %1072 = add i64 %240, -20
  br label %block_40233e

block_40261c:                                     ; preds = %block_4025a9, %block_402602, %block_4025f6
  %1073 = phi i64 [ %1321, %block_4025a9 ], [ %378, %block_4025f6 ], [ %1003, %block_402602 ]
  %1074 = phi %struct.Memory* [ %942, %block_4025a9 ], [ %942, %block_4025f6 ], [ %942, %block_402602 ]
  %1075 = inttoptr i64 %452 to i32*
  store i32 0, i32* %1075
  %1076 = inttoptr i64 %453 to i64*
  %1077 = load i64, i64* %1076
  %1078 = inttoptr i64 %445 to i32*
  %1079 = load i32, i32* %1078
  %1080 = sext i32 %1079 to i64
  %1081 = shl nsw i64 %1080, 2
  %1082 = add i64 %1081, %1077
  %1083 = inttoptr i64 %1082 to i32*
  %1084 = load i32, i32* %1083
  %1085 = add i64 %1073, 24
  %1086 = inttoptr i64 %454 to i32*
  store i32 %1084, i32* %1086
  br label %block_402634

block_402474:                                     ; preds = %block_402468
  %1087 = inttoptr i64 %1204 to i64*
  %1088 = load i64, i64* %1087
  %1089 = sext i32 %173 to i64
  %1090 = shl nsw i64 %1089, 2
  %1091 = add i64 %1090, %1088
  %1092 = inttoptr i64 %1091 to i32*
  %1093 = load i32, i32* %1092
  %1094 = add i64 %188, 14
  %1095 = inttoptr i64 %1205 to i32*
  store i32 %1093, i32* %1095
  br label %block_402482

block_402872:                                     ; preds = %block_402832
  %1096 = add i64 %843, 7
  %1097 = inttoptr i64 %445 to i32*
  store i32 0, i32* %1097
  %1098 = add i64 %433, -96
  %1099 = add i64 %433, -100
  br label %block_402879

block_402797.sink.split:                          ; preds = %block_4026e2, %block_402752, %block_402721
  %1100 = phi i64 [ %1014, %block_4026e2 ], [ %868, %block_402752 ], [ %646, %block_402721 ]
  %1101 = phi i64 [ %1017, %block_4026e2 ], [ %874, %block_402752 ], [ %647, %block_402721 ]
  %1102 = phi i64 [ %1020, %block_4026e2 ], [ %875, %block_402752 ], [ %864, %block_402721 ]
  %1103 = phi %struct.Memory* [ %879, %block_4026e2 ], [ %967, %block_402752 ], [ %967, %block_402721 ]
  %1104 = phi i64 [ 151, %block_4026e2 ], [ 44, %block_402752 ], [ 104, %block_402721 ]
  %1105 = inttoptr i64 %452 to i32*
  store i32 1, i32* %1105
  %1106 = add i64 %1104, %1102
  br label %block_402797

block_402797.loopexit:                            ; preds = %block_402634
  %1107 = zext i32 %974 to i64
  store i64 %975, i64* %19, align 8, !tbaa !1240
  br label %block_402797

block_402797:                                     ; preds = %block_402797.loopexit, %block_402797.sink.split
  %1108 = phi i64 [ %1101, %block_402797.sink.split ], [ %1107, %block_402797.loopexit ]
  %1109 = phi i64 [ %1100, %block_402797.sink.split ], [ %971, %block_402797.loopexit ]
  %1110 = phi i64 [ %1106, %block_402797.sink.split ], [ %991, %block_402797.loopexit ]
  %1111 = phi %struct.Memory* [ %1103, %block_402797.sink.split ], [ %967, %block_402797.loopexit ]
  %1112 = inttoptr i64 %452 to i32*
  %1113 = load i32, i32* %1112
  %1114 = icmp eq i32 %1113, 0
  %1115 = select i1 %1114, i64 13, i64 49
  %1116 = add i64 %1110, %1115
  br i1 %1114, label %block_4027a4, label %block_4027c8

block_402307:                                     ; preds = %block_4022f6
  %1117 = inttoptr i64 %129 to i64*
  %1118 = load i64, i64* %1117
  %1119 = sext i32 %357 to i64
  %1120 = shl nsw i64 %1119, 2
  %1121 = add i64 %1120, %1118
  %1122 = inttoptr i64 %1121 to i32*
  store i32 0, i32* %1122
  %1123 = inttoptr i64 %107 to i32*
  %1124 = load i32, i32* %1123
  %1125 = add i32 %1124, 1
  %1126 = inttoptr i64 %107 to i32*
  store i32 %1125, i32* %1126
  %1127 = add i64 %373, -17
  br label %block_4022f6

block_40232b:                                     ; preds = %block_40239d, %block_402324
  %1128 = phi i64 [ %709, %block_402324 ], [ %898, %block_40239d ]
  %1129 = phi %struct.Memory* [ %355, %block_402324 ], [ %217, %block_40239d ]
  %1130 = inttoptr i64 %708 to i32*
  %1131 = load i32, i32* %1130
  %1132 = inttoptr i64 %711 to i32*
  %1133 = load i32, i32* %1132
  %1134 = sub i32 %1131, %1133
  %1135 = lshr i32 %1134, 31
  %1136 = trunc i32 %1135 to i8
  %1137 = lshr i32 %1131, 31
  %1138 = lshr i32 %1133, 31
  %1139 = xor i32 %1138, %1137
  %1140 = xor i32 %1135, %1137
  %1141 = add nuw nsw i32 %1140, %1139
  %1142 = icmp eq i32 %1141, 2
  %1143 = icmp ne i8 %1136, 0
  %1144 = xor i1 %1143, %1142
  %1145 = select i1 %1144, i64 12, i64 133
  %1146 = add i64 %1128, %1145
  br i1 %1144, label %block_402337, label %block_4023b0

block_402406:                                     ; preds = %block_4023c1
  %1147 = sext i32 %466 to i64
  store i64 %1147, i64* %17, align 8, !tbaa !1240
  %1148 = shl nsw i64 %1147, 2
  %1149 = add i64 %1148, %481
  %1150 = inttoptr i64 %1149 to i32*
  %1151 = load i32, i32* %1150
  %1152 = add i32 %1151, -1
  %1153 = inttoptr i64 %712 to i32*
  store i32 %1152, i32* %1153
  %1154 = inttoptr i64 %712 to i32*
  %1155 = load i32, i32* %1154
  %1156 = zext i32 %1155 to i64
  %1157 = add i64 %106, -56
  %1158 = inttoptr i64 %1157 to i32*
  %1159 = load i32, i32* %1158
  %1160 = sub i32 %1155, %1159
  %1161 = icmp ult i32 %1155, %1159
  %1162 = zext i1 %1161 to i8
  store i8 %1162, i8* %41, align 1, !tbaa !1246
  %1163 = and i32 %1160, 255
  %1164 = tail call i32 @llvm.ctpop.i32(i32 %1163) #11
  %1165 = trunc i32 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = xor i8 %1166, 1
  store i8 %1167, i8* %42, align 1, !tbaa !1260
  %1168 = xor i32 %1159, %1155
  %1169 = xor i32 %1168, %1160
  %1170 = lshr i32 %1169, 4
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  store i8 %1172, i8* %43, align 1, !tbaa !1261
  %1173 = icmp eq i32 %1160, 0
  %1174 = zext i1 %1173 to i8
  store i8 %1174, i8* %44, align 1, !tbaa !1262
  %1175 = lshr i32 %1160, 31
  %1176 = trunc i32 %1175 to i8
  store i8 %1176, i8* %45, align 1, !tbaa !1263
  %1177 = lshr i32 %1155, 31
  %1178 = lshr i32 %1159, 31
  %1179 = xor i32 %1178, %1177
  %1180 = xor i32 %1175, %1177
  %1181 = add nuw nsw i32 %1180, %1179
  %1182 = icmp eq i32 %1181, 2
  %1183 = zext i1 %1182 to i8
  store i8 %1183, i8* %46, align 1, !tbaa !1264
  %1184 = icmp ne i8 %1176, 0
  %1185 = xor i1 %1184, %1182
  %1186 = or i1 %1173, %1185
  %1187 = select i1 %1186, i64 91, i64 29
  %1188 = add i64 %479, %1187
  br i1 %1186, label %block_402461, label %block_402423

block_4026cf:                                     ; preds = %block_402683, %block_402695
  %1189 = phi i64 [ %1260, %block_402683 ], [ %214, %block_402695 ]
  %1190 = phi %struct.Memory* [ %879, %block_402683 ], [ %879, %block_402695 ]
  %1191 = inttoptr i64 %457 to i32*
  %1192 = load i32, i32* %1191
  %1193 = add i32 %1192, -1
  %1194 = inttoptr i64 %457 to i32*
  store i32 %1193, i32* %1194
  %1195 = add i64 %1189, -88
  br label %block_402677

block_402885:                                     ; preds = %block_402879
  %1196 = icmp slt i32 %583, 1
  %1197 = select i1 %1196, i64 45, i64 10
  %1198 = add i64 %598, %1197
  br i1 %1196, label %block_4028b2, label %block_40288f

block_402461:                                     ; preds = %block_402406
  %1199 = load i64, i64* %22, align 8
  %1200 = add i64 %1199, -92
  %1201 = add i64 %1188, 7
  %1202 = inttoptr i64 %1200 to i32*
  store i32 0, i32* %1202
  %1203 = add i64 %1199, -84
  %1204 = add i64 %1199, -48
  %1205 = add i64 %1199, -108
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1207 = bitcast [32 x %union.VectorReg]* %25 to i32*
  %1208 = getelementptr inbounds i8, i8* %707, i64 4
  %1209 = bitcast i8* %1208 to i32*
  %1210 = bitcast i64* %1206 to i32*
  %1211 = getelementptr inbounds i8, i8* %707, i64 12
  %1212 = bitcast i8* %1211 to i32*
  %1213 = add i64 %1199, -32
  %1214 = add i64 %1199, -40
  %1215 = add i64 %1199, 56
  br label %block_402468

block_40253c:                                     ; preds = %block_402535, %block_4027f8
  %1216 = phi i64 [ %542, %block_402535 ], [ %305, %block_4027f8 ]
  %1217 = phi %struct.Memory* [ %669, %block_402535 ], [ %942, %block_4027f8 ]
  %1218 = inttoptr i64 %442 to i32*
  %1219 = load i32, i32* %1218
  %1220 = inttoptr i64 %443 to i64*
  %1221 = load i64, i64* %1220
  %1222 = inttoptr i64 %438 to i32*
  %1223 = load i32, i32* %1222
  %1224 = sext i32 %1223 to i64
  %1225 = shl nsw i64 %1224, 2
  %1226 = add i64 %1221, %1225
  %1227 = inttoptr i64 %1226 to i32*
  %1228 = load i32, i32* %1227
  %1229 = sub i32 %1219, %1228
  %1230 = lshr i32 %1229, 31
  %1231 = lshr i32 %1219, 31
  %1232 = lshr i32 %1228, 31
  %1233 = xor i32 %1232, %1231
  %1234 = xor i32 %1230, %1231
  %1235 = add nuw nsw i32 %1234, %1233
  %1236 = icmp eq i32 %1235, 2
  %1237 = icmp ne i32 %1230, 0
  %1238 = xor i1 %1237, %1236
  %1239 = select i1 %1238, i64 20, i64 719
  %1240 = add i64 %1216, %1239
  br i1 %1238, label %block_402550, label %block_40280b

block_402683:                                     ; preds = %block_402677
  %1241 = inttoptr i64 %455 to i64*
  %1242 = load i64, i64* %1241
  %1243 = sext i32 %881 to i64
  %1244 = shl nsw i64 %1243, 2
  %1245 = add i64 %1244, %1242
  %1246 = inttoptr i64 %1245 to i32*
  %1247 = load i32, i32* %1246
  %1248 = add i32 %1247, 1
  %1249 = icmp eq i32 %1248, 0
  %1250 = lshr i32 %1248, 31
  %1251 = lshr i32 %1247, 31
  %1252 = xor i32 %1251, 1
  %1253 = xor i32 %1250, %1251
  %1254 = add nuw nsw i32 %1253, %1252
  %1255 = icmp eq i32 %1254, 2
  %1256 = icmp ne i32 %1250, 0
  %1257 = xor i1 %1256, %1255
  %1258 = or i1 %1249, %1257
  %1259 = select i1 %1258, i64 76, i64 18
  %1260 = add i64 %895, %1259
  br i1 %1258, label %block_4026cf, label %block_402695

block_402482:                                     ; preds = %block_402474, %block_40249b
  %1261 = phi i64 [ %1094, %block_402474 ], [ %918, %block_40249b ]
  %1262 = phi %struct.Memory* [ %171, %block_402474 ], [ %1262, %block_40249b ]
  %1263 = inttoptr i64 %1205 to i32*
  %1264 = load i32, i32* %1263
  %1265 = inttoptr i64 %1204 to i64*
  %1266 = load i64, i64* %1265
  %1267 = inttoptr i64 %1200 to i32*
  %1268 = load i32, i32* %1267
  %1269 = add i32 %1268, 1
  %1270 = sext i32 %1269 to i64
  %1271 = shl nsw i64 %1270, 2
  %1272 = add i64 %1266, %1271
  %1273 = inttoptr i64 %1272 to i32*
  %1274 = load i32, i32* %1273
  %1275 = sub i32 %1264, %1274
  %1276 = lshr i32 %1275, 31
  %1277 = lshr i32 %1264, 31
  %1278 = lshr i32 %1274, 31
  %1279 = xor i32 %1278, %1277
  %1280 = xor i32 %1276, %1277
  %1281 = add nuw nsw i32 %1280, %1279
  %1282 = icmp eq i32 %1281, 2
  %1283 = icmp ne i32 %1276, 0
  %1284 = xor i1 %1283, %1282
  %1285 = select i1 %1284, i64 25, i64 70
  %1286 = add i64 %1261, %1285
  br i1 %1284, label %block_40249b, label %block_4024c8

block_4025a9:                                     ; preds = %block_402595
  %1287 = inttoptr i64 %444 to i64*
  %1288 = load i64, i64* %1287
  %1289 = mul nsw i64 %949, 48
  %1290 = add i64 %1289, %1288
  %1291 = sext i32 %944 to i64
  %1292 = shl nsw i64 %1291, 2
  %1293 = add i64 %1292, %1290
  %1294 = inttoptr i64 %1293 to i32*
  %1295 = load i32, i32* %1294
  %1296 = inttoptr i64 %450 to i32*
  store i32 %1295, i32* %1296
  %1297 = inttoptr i64 %447 to i64*
  %1298 = load i64, i64* %1297
  %1299 = inttoptr i64 %438 to i32*
  %1300 = load i32, i32* %1299
  %1301 = sext i32 %1300 to i64
  %1302 = mul nsw i64 %1301, 96
  %1303 = add i64 %1302, %1298
  %1304 = inttoptr i64 %449 to i32*
  %1305 = load i32, i32* %1304
  %1306 = sext i32 %1305 to i64
  %1307 = shl nsw i64 %1306, 3
  %1308 = add i64 %1307, %1303
  %1309 = inttoptr i64 %1308 to double*
  %1310 = load double, double* %1309
  %1311 = inttoptr i64 %448 to double*
  %1312 = load double, double* %1311
  %1313 = fmul double %1310, %1312
  store double %1313, double* %89, align 1, !tbaa !1244
  store i64 0, i64* %1206, align 1, !tbaa !1244
  %1314 = inttoptr i64 %451 to double*
  store double %1313, double* %1314
  %1315 = inttoptr i64 %450 to i32*
  %1316 = load i32, i32* %1315
  %1317 = inttoptr i64 %445 to i32*
  %1318 = load i32, i32* %1317
  %1319 = icmp ne i32 %1316, %1318
  %1320 = select i1 %1319, i64 115, i64 77
  %1321 = add i64 %965, %1320
  br i1 %1319, label %block_40261c, label %block_4025f6
}

; Function Attrs: noinline
define %struct.Memory* @sub_4030d0_wtime_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4030d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -32
  store i64 0, i64* %6, align 8, !tbaa !1240
  %25 = add i64 %14, -16
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %28 = add i64 %1, 28
  %29 = add i64 %14, -48
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  store i64 %17, i64* %8, align 8, !alias.scope !1364, !noalias !1367
  %31 = tail call i64 @gettimeofday(i64 %24, i64 0), !noalias !1364
  %32 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605060__data_type* @seg_605060__data to i64), i64 16) to i32*)
  %33 = lshr i32 %32, 31
  %34 = trunc i32 %33 to i8
  %35 = load i64, i64* %9, align 8
  %36 = add i64 %35, -28
  %37 = trunc i64 %31 to i32
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = icmp ne i8 %34, 0
  %40 = add i64 %35, -24
  br i1 %39, label %block_4030fd, label %block_40310a

block_40310a:                                     ; preds = %block_4030fd, %block_4030d0
  %41 = phi %struct.Memory* [ %2, %block_4030fd ], [ %2, %block_4030d0 ]
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2304) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %10 to double*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = inttoptr i64 %40 to i64*
  %46 = load i64, i64* %45
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605060__data_type* @seg_605060__data to i64), i64 16) to i32*)
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %5, align 8, !tbaa !1240
  %49 = sub i64 %46, %48
  %50 = sitofp i64 %49 to double
  %51 = bitcast %union.VectorReg* %11 to double*
  %52 = add i64 %35, -16
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = sitofp i64 %54 to double
  %56 = bitcast %union.VectorReg* %12 to double*
  store double %55, double* %56, align 1, !tbaa !1244
  %57 = fmul double %55, %42
  store double %57, double* %43, align 1, !tbaa !1244
  store i64 0, i64* %44, align 1, !tbaa !1244
  %58 = fadd double %50, %57
  store double %58, double* %51, align 1, !tbaa !1244
  %59 = add i64 %35, -8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %4, align 8, !tbaa !1240
  %62 = inttoptr i64 %61 to double*
  store double %58, double* %62
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 32
  %65 = icmp ugt i64 %63, -33
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %18, align 1, !tbaa !1246
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #11
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %19, align 1, !tbaa !1260
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %20, align 1, !tbaa !1261
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %21, align 1, !tbaa !1262
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %22, align 1, !tbaa !1263
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %23, align 1, !tbaa !1264
  %86 = add i64 %63, 40
  %87 = inttoptr i64 %64 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %9, align 8, !tbaa !1240
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %3, align 8, !tbaa !1240
  %91 = add i64 %63, 48
  store i64 %91, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %41

block_4030fd:                                     ; preds = %block_4030d0
  %92 = inttoptr i64 %40 to i64*
  %93 = load i64, i64* %92
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605060__data_type* @seg_605060__data to i64), i64 16) to i32*)
  br label %block_40310a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400690_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4006b8:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %5, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %7, i64* %10
  store i64 6312056, i64* %4, align 8, !tbaa !1240
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1, !tbaa !1246
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1, !tbaa !1260
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1261
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %14, align 1, !tbaa !1262
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !1263
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1, !tbaa !1264
  %17 = inttoptr i64 %9 to i64*
  %18 = load i64, i64* %17
  store i64 %18, i64* %6, align 8, !tbaa !1240
  %19 = inttoptr i64 %8 to i64*
  %20 = load i64, i64* %19
  store i64 %20, i64* %3, align 8, !tbaa !1240
  %21 = add i64 %8, 8
  store i64 %21, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400700___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400700:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i8, i8* getelementptr inbounds (%seg_605080__bss_type, %seg_605080__bss_type* @seg_605080__bss, i32 0, i32 0, i32 0)
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !1246
  %7 = zext i8 %5 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #11
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !1260
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1261
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !1262
  %17 = lshr i8 %5, 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %17, i8* %18, align 1, !tbaa !1263
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !1264
  %20 = select i1 %14, i64 9, i64 32
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br i1 %14, label %block_400709, label %block_400720

block_400720:                                     ; preds = %block_400700
  %23 = load i64, i64* %22, align 8, !tbaa !1240
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %23, 8
  store i64 %26, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_400709:                                     ; preds = %block_400700
  %27 = load i64, i64* %4, align 8
  %28 = load i64, i64* %22, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %4, align 8, !tbaa !1240
  %31 = add i64 %21, -121
  %32 = add i64 %21, 9
  %33 = add i64 %28, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %22, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_400690_deregister_tm_clones(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  store i8 1, i8* getelementptr inbounds (%seg_605080__bss_type, %seg_605080__bss_type* @seg_605080__bss, i32 0, i32 0, i32 0)
  %36 = load i64, i64* %22, align 8, !tbaa !1240
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %4, align 8, !tbaa !1240
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %3, align 8, !tbaa !1240
  %42 = add i64 %36, 16
  store i64 %42, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4029e0_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4029e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %19, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %20, align 8, !tbaa !1240
  %33 = load i64, i64* %26, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %25, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %24, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %23, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %14, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -328
  store i64 %48, i64* %19, align 8, !tbaa !1240
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = load i8, i8* %5, align 1
  %56 = add i64 %30, 88
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %21, align 8, !tbaa !1240
  %59 = add i64 %30, 80
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %22, align 8, !tbaa !1240
  %62 = add i64 %30, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %14, align 8, !tbaa !1240
  %65 = add i64 %30, 64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  store i64 %67, i64* %25, align 8, !tbaa !1240
  %68 = add i64 %30, 56
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %26, align 8, !tbaa !1240
  %71 = add i64 %30, 48
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %23, align 8, !tbaa !1240
  %74 = load i64, i64* %20, align 8
  %75 = add i64 %74, 48
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %24, align 8, !tbaa !1240
  %78 = add i64 %74, 40
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %17, align 8, !tbaa !1240
  %81 = add i64 %74, -117
  %82 = inttoptr i64 %81 to i8*
  store i8 %55, i8* %82
  %83 = add i64 %74, 32
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %74, -124
  %87 = load i32, i32* %7, align 4
  %88 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %74, 24
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = add i64 %74, -136
  %93 = inttoptr i64 %92 to i64*
  store i64 %85, i64* %93
  %94 = add i64 %74, 16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %74, -140
  %98 = inttoptr i64 %97 to i32*
  store i32 %91, i32* %98
  %99 = inttoptr i64 %86 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %15, align 8, !tbaa !1240
  %102 = add i64 %74, -152
  %103 = inttoptr i64 %102 to i64*
  store i64 %96, i64* %103
  %104 = add i64 %74, -48
  %105 = load i64, i64* %18, align 8
  %106 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %106
  %107 = inttoptr i64 %81 to i8*
  %108 = load i8, i8* %107
  %109 = add i64 %74, -49
  %110 = inttoptr i64 %109 to i8*
  store i8 %108, i8* %110
  %111 = add i64 %74, -56
  %112 = load i32, i32* %9, align 4
  %113 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %113
  %114 = add i64 %74, -60
  %115 = inttoptr i64 %114 to i32*
  store i32 %100, i32* %115
  %116 = add i64 %74, -64
  %117 = load i32, i32* %11, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %74, -68
  %120 = load i32, i32* %13, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %74, -80
  %123 = bitcast [32 x %union.VectorReg]* %27 to double*
  %124 = load double, double* %123, align 1
  %125 = inttoptr i64 %122 to double*
  store double %124, double* %125
  %126 = add i64 %74, -88
  %127 = bitcast %union.VectorReg* %28 to double*
  %128 = load double, double* %127, align 1
  %129 = inttoptr i64 %126 to double*
  store double %128, double* %129
  %130 = inttoptr i64 %104 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %74, -160
  %133 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %133
  %134 = load i64, i64* %20, align 8
  %135 = add i64 %134, -160
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %134, -168
  %139 = load i64, i64* %17, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %140
  %141 = add i64 %134, -176
  %142 = load i64, i64* %22, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %142, i64* %143
  %144 = add i64 %134, -184
  %145 = load i64, i64* %14, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %146
  %147 = add i64 %134, -192
  %148 = load i64, i64* %25, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %148, i64* %149
  %150 = add i64 %134, -200
  %151 = load i64, i64* %26, align 8
  %152 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %152
  %153 = add i64 %134, -208
  %154 = load i64, i64* %24, align 8
  %155 = inttoptr i64 %153 to i64*
  store i64 %154, i64* %155
  %156 = add i64 %134, -216
  %157 = load i64, i64* %23, align 8
  %158 = inttoptr i64 %156 to i64*
  store i64 %157, i64* %158
  %159 = add i64 %134, -224
  %160 = load i64, i64* %21, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %161
  %162 = add i64 %1, 228
  %163 = load i64, i64* %19, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %172 = load i64, i64* %168, align 8, !alias.scope !1369, !noalias !1372
  %173 = load i64, i64* %167, align 8, !alias.scope !1369, !noalias !1372
  %174 = load i64, i64* %170, align 8, !alias.scope !1369, !noalias !1372
  %175 = load i64, i64* %171, align 8, !alias.scope !1369, !noalias !1372
  %176 = inttoptr i64 %163 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %163, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %163, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %163, 24
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %163, 32
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %163, 40
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %163, 48
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %163, 56
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %163, 64
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %163, 72
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = inttoptr i64 %164 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %3, align 8, !alias.scope !1369, !noalias !1372
  store i64 %163, i64* %19, align 8, !alias.scope !1369, !noalias !1372
  %207 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1696), i64 %137, i64 %172, i64 %173, i64 %174, i64 %175, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204), !noalias !1369
  %208 = load i64, i64* %3, align 8
  %209 = load i64, i64* %20, align 8
  %210 = add i64 %209, -49
  %211 = inttoptr i64 %210 to i8*
  %212 = load i8, i8* %211
  %213 = sext i8 %212 to i64
  %214 = and i64 %213, 4294967295
  store i64 %214, i64* %17, align 8, !tbaa !1240
  %215 = add i64 %209, -228
  %216 = trunc i64 %207 to i32
  %217 = inttoptr i64 %215 to i32*
  store i32 %216, i32* %217
  %218 = add i64 %208, 27
  %219 = load i64, i64* %19, align 8, !tbaa !1240
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %168, align 8, !alias.scope !1374, !noalias !1377
  %223 = load i64, i64* %167, align 8, !alias.scope !1374, !noalias !1377
  %224 = load i64, i64* %170, align 8, !alias.scope !1374, !noalias !1377
  %225 = load i64, i64* %171, align 8, !alias.scope !1374, !noalias !1377
  %226 = inttoptr i64 %219 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %219, 8
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %219, 16
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %219, 24
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %219, 32
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %219, 40
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %219, 48
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %219, 56
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %219, 64
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %219, 72
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = inttoptr i64 %220 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %3, align 8, !alias.scope !1374, !noalias !1377
  store i64 %219, i64* %19, align 8, !alias.scope !1374, !noalias !1377
  %257 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1724), i64 %214, i64 %222, i64 %223, i64 %224, i64 %225, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254), !noalias !1374
  %258 = load i64, i64* %20, align 8
  %259 = add i64 %258, -60
  %260 = load i64, i64* %3, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261
  %263 = icmp eq i32 %262, 0
  %264 = add i64 %258, -232
  %265 = trunc i64 %257 to i32
  %266 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %266
  %267 = select i1 %263, i64 16, i64 240
  %268 = add i64 %260, %267
  %269 = add i64 %258, -64
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  br i1 %263, label %block_402aef, label %block_402bcf

block_402aef:                                     ; preds = %block_4029e0
  %272 = icmp eq i32 %271, 0
  %273 = select i1 %272, i64 10, i64 224
  %274 = add i64 %268, %273
  br i1 %272, label %block_402af9, label %block_402bcf

block_402bb0:                                     ; preds = %block_402af9, %block_402b09
  %275 = phi i64 [ %1105, %block_402af9 ], [ %1038, %block_402b09 ]
  %276 = phi i64 [ %1110, %block_402af9 ], [ %1043, %block_402b09 ]
  %277 = add i64 %258, -56
  %278 = inttoptr i64 %277 to i32*
  %279 = load i32, i32* %278
  %280 = zext i32 %279 to i64
  %281 = add i64 %276, 20
  %282 = load i64, i64* %19, align 8, !tbaa !1240
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284
  %285 = load i64, i64* %168, align 8, !alias.scope !1379, !noalias !1382
  %286 = load i64, i64* %170, align 8, !alias.scope !1379, !noalias !1382
  %287 = load i64, i64* %171, align 8, !alias.scope !1379, !noalias !1382
  %288 = inttoptr i64 %282 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %282, 8
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = add i64 %282, 16
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %282, 24
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %282, 32
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %282, 40
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = add i64 %282, 48
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  %308 = add i64 %282, 56
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309
  %311 = add i64 %282, 64
  %312 = inttoptr i64 %311 to i64*
  %313 = load i64, i64* %312
  %314 = add i64 %282, 72
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  %317 = inttoptr i64 %283 to i64*
  %318 = load i64, i64* %317
  store i64 %318, i64* %3, align 8, !alias.scope !1379, !noalias !1382
  store i64 %282, i64* %19, align 8, !alias.scope !1379, !noalias !1382
  %319 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1803), i64 %280, i64 %285, i64 %275, i64 %286, i64 %287, i64 %289, i64 %292, i64 %295, i64 %298, i64 %301, i64 %304, i64 %307, i64 %310, i64 %313, i64 %316), !noalias !1379
  %320 = load i64, i64* %20, align 8
  %321 = add i64 %320, -252
  %322 = trunc i64 %319 to i32
  %323 = load i64, i64* %3, align 8
  %324 = add i64 %323, 6
  %325 = inttoptr i64 %321 to i32*
  store i32 %322, i32* %325
  br label %block_402bca

block_402bcf:                                     ; preds = %block_402aef, %block_4029e0
  %326 = phi i64 [ %274, %block_402aef ], [ %268, %block_4029e0 ]
  %327 = add i64 %258, -56
  %328 = inttoptr i64 %327 to i32*
  %329 = load i32, i32* %328
  %330 = zext i32 %329 to i64
  %331 = inttoptr i64 %259 to i32*
  %332 = load i32, i32* %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %16, align 8, !tbaa !1240
  %334 = zext i32 %271 to i64
  store i64 %334, i64* %15, align 8, !tbaa !1240
  %335 = add i64 %326, 26
  %336 = load i64, i64* %19, align 8, !tbaa !1240
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338
  %339 = load i64, i64* %170, align 8, !alias.scope !1384, !noalias !1387
  %340 = load i64, i64* %171, align 8, !alias.scope !1384, !noalias !1387
  %341 = inttoptr i64 %336 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %336, 8
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %336, 16
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %336, 24
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %336, 32
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %336, 40
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %336, 48
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %336, 56
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %336, 64
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %336, 72
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = inttoptr i64 %337 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %3, align 8, !alias.scope !1384, !noalias !1387
  store i64 %336, i64* %19, align 8, !alias.scope !1384, !noalias !1387
  %372 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1840), i64 %330, i64 %333, i64 %334, i64 %339, i64 %340, i64 %342, i64 %345, i64 %348, i64 %351, i64 %354, i64 %357, i64 %360, i64 %363, i64 %366, i64 %369), !noalias !1384
  %373 = load i64, i64* %20, align 8
  %374 = add i64 %373, -256
  %375 = trunc i64 %372 to i32
  %376 = load i64, i64* %3, align 8
  %377 = add i64 %376, 6
  %378 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %378
  br label %block_402bef

block_402cad:                                     ; preds = %block_402c66, %block_402c8c
  %379 = phi i64 [ %942, %block_402c8c ], [ %1368, %block_402c66 ]
  %380 = phi i64 [ %946, %block_402c8c ], [ %1373, %block_402c66 ]
  %381 = phi %struct.Memory* [ %1124, %block_402c8c ], [ %1124, %block_402c66 ]
  %382 = add i64 %379, 32
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %380, 21
  %386 = load i64, i64* %19, align 8, !tbaa !1240
  %387 = add i64 %386, -8
  %388 = inttoptr i64 %387 to i64*
  store i64 %385, i64* %388
  %389 = load i64, i64* %168, align 8, !alias.scope !1389, !noalias !1392
  %390 = load i64, i64* %167, align 8, !alias.scope !1389, !noalias !1392
  %391 = load i64, i64* %170, align 8, !alias.scope !1389, !noalias !1392
  %392 = load i64, i64* %171, align 8, !alias.scope !1389, !noalias !1392
  %393 = inttoptr i64 %386 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %386, 8
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %386, 16
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %386, 24
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %386, 32
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %386, 40
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %386, 48
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %386, 56
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = add i64 %386, 64
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %386, 72
  %420 = inttoptr i64 %419 to i64*
  %421 = load i64, i64* %420
  %422 = inttoptr i64 %387 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %3, align 8, !alias.scope !1389, !noalias !1392
  store i64 %386, i64* %19, align 8, !alias.scope !1389, !noalias !1392
  %424 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 434), i64 %384, i64 %389, i64 %390, i64 %391, i64 %392, i64 %394, i64 %397, i64 %400, i64 %403, i64 %406, i64 %409, i64 %412, i64 %415, i64 %418, i64 %421), !noalias !1389
  %425 = load i64, i64* %3, align 8
  %426 = load i64, i64* %20, align 8
  %427 = add i64 %426, 40
  %428 = inttoptr i64 %427 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %426, -284
  %431 = trunc i64 %424 to i32
  %432 = inttoptr i64 %430 to i32*
  store i32 %431, i32* %432
  %433 = add i64 %425, 27
  %434 = load i64, i64* %19, align 8, !tbaa !1240
  %435 = add i64 %434, -8
  %436 = inttoptr i64 %435 to i64*
  store i64 %433, i64* %436
  %437 = load i64, i64* %168, align 8, !alias.scope !1394, !noalias !1397
  %438 = load i64, i64* %167, align 8, !alias.scope !1394, !noalias !1397
  %439 = load i64, i64* %170, align 8, !alias.scope !1394, !noalias !1397
  %440 = load i64, i64* %171, align 8, !alias.scope !1394, !noalias !1397
  %441 = inttoptr i64 %434 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %434, 8
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %434, 16
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %434, 24
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %434, 32
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %434, 40
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %434, 48
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %434, 56
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = add i64 %434, 64
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %434, 72
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = inttoptr i64 %435 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %3, align 8, !alias.scope !1394, !noalias !1397
  store i64 %434, i64* %19, align 8, !alias.scope !1394, !noalias !1397
  %472 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 471), i64 %429, i64 %437, i64 %438, i64 %439, i64 %440, i64 %442, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457, i64 %460, i64 %463, i64 %466, i64 %469), !noalias !1394
  %473 = load i64, i64* %3, align 8
  %474 = load i64, i64* %20, align 8
  %475 = add i64 %474, 48
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = add i64 %474, -288
  %479 = trunc i64 %472 to i32
  %480 = inttoptr i64 %478 to i32*
  store i32 %479, i32* %480
  %481 = add i64 %473, 27
  %482 = load i64, i64* %19, align 8, !tbaa !1240
  %483 = add i64 %482, -8
  %484 = inttoptr i64 %483 to i64*
  store i64 %481, i64* %484
  %485 = load i64, i64* %168, align 8, !alias.scope !1399, !noalias !1402
  %486 = load i64, i64* %167, align 8, !alias.scope !1399, !noalias !1402
  %487 = load i64, i64* %170, align 8, !alias.scope !1399, !noalias !1402
  %488 = load i64, i64* %171, align 8, !alias.scope !1399, !noalias !1402
  %489 = inttoptr i64 %482 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %482, 8
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %482, 16
  %495 = inttoptr i64 %494 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %482, 24
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %482, 32
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %482, 40
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %482, 48
  %507 = inttoptr i64 %506 to i64*
  %508 = load i64, i64* %507
  %509 = add i64 %482, 56
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %482, 64
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %482, 72
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = inttoptr i64 %483 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %3, align 8, !alias.scope !1399, !noalias !1402
  store i64 %482, i64* %19, align 8, !alias.scope !1399, !noalias !1402
  %520 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2009), i64 %477, i64 %485, i64 %486, i64 %487, i64 %488, i64 %490, i64 %493, i64 %496, i64 %499, i64 %502, i64 %505, i64 %508, i64 %511, i64 %514, i64 %517), !noalias !1399
  %521 = load i64, i64* %3, align 8
  %522 = load i64, i64* %20, align 8
  %523 = add i64 %522, 56
  %524 = inttoptr i64 %523 to i64*
  %525 = load i64, i64* %524
  %526 = add i64 %522, -292
  %527 = trunc i64 %520 to i32
  %528 = inttoptr i64 %526 to i32*
  store i32 %527, i32* %528
  %529 = add i64 %521, 27
  %530 = load i64, i64* %19, align 8, !tbaa !1240
  %531 = add i64 %530, -8
  %532 = inttoptr i64 %531 to i64*
  store i64 %529, i64* %532
  %533 = load i64, i64* %168, align 8, !alias.scope !1404, !noalias !1407
  %534 = load i64, i64* %167, align 8, !alias.scope !1404, !noalias !1407
  %535 = load i64, i64* %170, align 8, !alias.scope !1404, !noalias !1407
  %536 = load i64, i64* %171, align 8, !alias.scope !1404, !noalias !1407
  %537 = inttoptr i64 %530 to i64*
  %538 = load i64, i64* %537
  %539 = add i64 %530, 8
  %540 = inttoptr i64 %539 to i64*
  %541 = load i64, i64* %540
  %542 = add i64 %530, 16
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = add i64 %530, 24
  %546 = inttoptr i64 %545 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %530, 32
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %530, 40
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = add i64 %530, 48
  %555 = inttoptr i64 %554 to i64*
  %556 = load i64, i64* %555
  %557 = add i64 %530, 56
  %558 = inttoptr i64 %557 to i64*
  %559 = load i64, i64* %558
  %560 = add i64 %530, 64
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %530, 72
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = inttoptr i64 %531 to i64*
  %567 = load i64, i64* %566
  store i64 %567, i64* %3, align 8, !alias.scope !1404, !noalias !1407
  store i64 %530, i64* %19, align 8, !alias.scope !1404, !noalias !1407
  %568 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 528), i64 %525, i64 %533, i64 %534, i64 %535, i64 %536, i64 %538, i64 %541, i64 %544, i64 %547, i64 %550, i64 %553, i64 %556, i64 %559, i64 %562, i64 %565), !noalias !1404
  %569 = load i64, i64* %3, align 8
  %570 = load i64, i64* %20, align 8
  %571 = add i64 %570, 64
  %572 = inttoptr i64 %571 to i64*
  %573 = load i64, i64* %572
  %574 = add i64 %570, -296
  %575 = trunc i64 %568 to i32
  %576 = inttoptr i64 %574 to i32*
  store i32 %575, i32* %576
  %577 = add i64 %569, 27
  %578 = load i64, i64* %19, align 8, !tbaa !1240
  %579 = add i64 %578, -8
  %580 = inttoptr i64 %579 to i64*
  store i64 %577, i64* %580
  %581 = load i64, i64* %168, align 8, !alias.scope !1409, !noalias !1412
  %582 = load i64, i64* %167, align 8, !alias.scope !1409, !noalias !1412
  %583 = load i64, i64* %170, align 8, !alias.scope !1409, !noalias !1412
  %584 = load i64, i64* %171, align 8, !alias.scope !1409, !noalias !1412
  %585 = inttoptr i64 %578 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %578, 8
  %588 = inttoptr i64 %587 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %578, 16
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %578, 24
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %578, 32
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %578, 40
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %578, 48
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = add i64 %578, 56
  %606 = inttoptr i64 %605 to i64*
  %607 = load i64, i64* %606
  %608 = add i64 %578, 64
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %578, 72
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = inttoptr i64 %579 to i64*
  %615 = load i64, i64* %614
  store i64 %615, i64* %3, align 8, !alias.scope !1409, !noalias !1412
  store i64 %578, i64* %19, align 8, !alias.scope !1409, !noalias !1412
  %616 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 551), i64 %573, i64 %581, i64 %582, i64 %583, i64 %584, i64 %586, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601, i64 %604, i64 %607, i64 %610, i64 %613), !noalias !1409
  %617 = load i64, i64* %3, align 8
  %618 = load i64, i64* %20, align 8
  %619 = add i64 %618, 72
  %620 = inttoptr i64 %619 to i64*
  %621 = load i64, i64* %620
  %622 = add i64 %618, -300
  %623 = trunc i64 %616 to i32
  %624 = inttoptr i64 %622 to i32*
  store i32 %623, i32* %624
  %625 = add i64 %617, 27
  %626 = load i64, i64* %19, align 8, !tbaa !1240
  %627 = add i64 %626, -8
  %628 = inttoptr i64 %627 to i64*
  store i64 %625, i64* %628
  %629 = load i64, i64* %168, align 8, !alias.scope !1414, !noalias !1417
  %630 = load i64, i64* %167, align 8, !alias.scope !1414, !noalias !1417
  %631 = load i64, i64* %170, align 8, !alias.scope !1414, !noalias !1417
  %632 = load i64, i64* %171, align 8, !alias.scope !1414, !noalias !1417
  %633 = inttoptr i64 %626 to i64*
  %634 = load i64, i64* %633
  %635 = add i64 %626, 8
  %636 = inttoptr i64 %635 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %626, 16
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %626, 24
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %626, 32
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %626, 40
  %648 = inttoptr i64 %647 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %626, 48
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = add i64 %626, 56
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %626, 64
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %626, 72
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = inttoptr i64 %627 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %3, align 8, !alias.scope !1414, !noalias !1417
  store i64 %626, i64* %19, align 8, !alias.scope !1414, !noalias !1417
  %664 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 574), i64 %621, i64 %629, i64 %630, i64 %631, i64 %632, i64 %634, i64 %637, i64 %640, i64 %643, i64 %646, i64 %649, i64 %652, i64 %655, i64 %658, i64 %661), !noalias !1414
  %665 = load i64, i64* %3, align 8
  %666 = load i64, i64* %20, align 8
  %667 = add i64 %666, 80
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668
  %670 = add i64 %666, -304
  %671 = trunc i64 %664 to i32
  %672 = inttoptr i64 %670 to i32*
  store i32 %671, i32* %672
  %673 = add i64 %665, 27
  %674 = load i64, i64* %19, align 8, !tbaa !1240
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  store i64 %673, i64* %676
  %677 = load i64, i64* %168, align 8, !alias.scope !1419, !noalias !1422
  %678 = load i64, i64* %167, align 8, !alias.scope !1419, !noalias !1422
  %679 = load i64, i64* %170, align 8, !alias.scope !1419, !noalias !1422
  %680 = load i64, i64* %171, align 8, !alias.scope !1419, !noalias !1422
  %681 = inttoptr i64 %674 to i64*
  %682 = load i64, i64* %681
  %683 = add i64 %674, 8
  %684 = inttoptr i64 %683 to i64*
  %685 = load i64, i64* %684
  %686 = add i64 %674, 16
  %687 = inttoptr i64 %686 to i64*
  %688 = load i64, i64* %687
  %689 = add i64 %674, 24
  %690 = inttoptr i64 %689 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %674, 32
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %674, 40
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %674, 48
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %674, 56
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %674, 64
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %674, 72
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = inttoptr i64 %675 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %3, align 8, !alias.scope !1419, !noalias !1422
  store i64 %674, i64* %19, align 8, !alias.scope !1419, !noalias !1422
  %712 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 597), i64 %669, i64 %677, i64 %678, i64 %679, i64 %680, i64 %682, i64 %685, i64 %688, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709), !noalias !1419
  %713 = load i64, i64* %3, align 8
  %714 = load i64, i64* %20, align 8
  %715 = add i64 %714, 88
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %714, -308
  %719 = trunc i64 %712 to i32
  %720 = inttoptr i64 %718 to i32*
  store i32 %719, i32* %720
  %721 = add i64 %713, 27
  %722 = load i64, i64* %19, align 8, !tbaa !1240
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %721, i64* %724
  %725 = load i64, i64* %168, align 8, !alias.scope !1424, !noalias !1427
  %726 = load i64, i64* %167, align 8, !alias.scope !1424, !noalias !1427
  %727 = load i64, i64* %170, align 8, !alias.scope !1424, !noalias !1427
  %728 = load i64, i64* %171, align 8, !alias.scope !1424, !noalias !1427
  %729 = inttoptr i64 %722 to i64*
  %730 = load i64, i64* %729
  %731 = add i64 %722, 8
  %732 = inttoptr i64 %731 to i64*
  %733 = load i64, i64* %732
  %734 = add i64 %722, 16
  %735 = inttoptr i64 %734 to i64*
  %736 = load i64, i64* %735
  %737 = add i64 %722, 24
  %738 = inttoptr i64 %737 to i64*
  %739 = load i64, i64* %738
  %740 = add i64 %722, 32
  %741 = inttoptr i64 %740 to i64*
  %742 = load i64, i64* %741
  %743 = add i64 %722, 40
  %744 = inttoptr i64 %743 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %722, 48
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %722, 56
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = add i64 %722, 64
  %753 = inttoptr i64 %752 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %722, 72
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  %758 = inttoptr i64 %723 to i64*
  %759 = load i64, i64* %758
  store i64 %759, i64* %3, align 8, !alias.scope !1424, !noalias !1427
  store i64 %722, i64* %19, align 8, !alias.scope !1424, !noalias !1427
  %760 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 620), i64 %717, i64 %725, i64 %726, i64 %727, i64 %728, i64 %730, i64 %733, i64 %736, i64 %739, i64 %742, i64 %745, i64 %748, i64 %751, i64 %754, i64 %757), !noalias !1424
  %761 = load i64, i64* %3, align 8
  %762 = load i64, i64* %20, align 8
  %763 = add i64 %762, 96
  %764 = inttoptr i64 %763 to i64*
  %765 = load i64, i64* %764
  store i64 %765, i64* %17, align 8, !tbaa !1240
  %766 = add i64 %762, -312
  %767 = trunc i64 %760 to i32
  %768 = inttoptr i64 %766 to i32*
  store i32 %767, i32* %768
  %769 = add i64 %761, 27
  %770 = load i64, i64* %19, align 8, !tbaa !1240
  %771 = add i64 %770, -8
  %772 = inttoptr i64 %771 to i64*
  store i64 %769, i64* %772
  %773 = load i64, i64* %168, align 8, !alias.scope !1429, !noalias !1432
  %774 = load i64, i64* %167, align 8, !alias.scope !1429, !noalias !1432
  %775 = load i64, i64* %170, align 8, !alias.scope !1429, !noalias !1432
  %776 = load i64, i64* %171, align 8, !alias.scope !1429, !noalias !1432
  %777 = inttoptr i64 %770 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %770, 8
  %780 = inttoptr i64 %779 to i64*
  %781 = load i64, i64* %780
  %782 = add i64 %770, 16
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = add i64 %770, 24
  %786 = inttoptr i64 %785 to i64*
  %787 = load i64, i64* %786
  %788 = add i64 %770, 32
  %789 = inttoptr i64 %788 to i64*
  %790 = load i64, i64* %789
  %791 = add i64 %770, 40
  %792 = inttoptr i64 %791 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %770, 48
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = add i64 %770, 56
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = add i64 %770, 64
  %801 = inttoptr i64 %800 to i64*
  %802 = load i64, i64* %801
  %803 = add i64 %770, 72
  %804 = inttoptr i64 %803 to i64*
  %805 = load i64, i64* %804
  %806 = inttoptr i64 %771 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %3, align 8, !alias.scope !1429, !noalias !1432
  store i64 %770, i64* %19, align 8, !alias.scope !1429, !noalias !1432
  %808 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2051), i64 %765, i64 %773, i64 %774, i64 %775, i64 %776, i64 %778, i64 %781, i64 %784, i64 %787, i64 %790, i64 %793, i64 %796, i64 %799, i64 %802, i64 %805), !noalias !1429
  %809 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2074), i64* %18, align 8, !tbaa !1240
  %810 = load i64, i64* %20, align 8
  %811 = add i64 %810, -316
  %812 = trunc i64 %808 to i32
  %813 = inttoptr i64 %811 to i32*
  store i32 %812, i32* %813
  %814 = add i64 %809, 23
  %815 = load i64, i64* %19, align 8, !tbaa !1240
  %816 = add i64 %815, -8
  %817 = inttoptr i64 %816 to i64*
  store i64 %814, i64* %817
  %818 = load i64, i64* %169, align 8, !alias.scope !1434, !noalias !1437
  %819 = load i64, i64* %168, align 8, !alias.scope !1434, !noalias !1437
  %820 = load i64, i64* %167, align 8, !alias.scope !1434, !noalias !1437
  %821 = load i64, i64* %170, align 8, !alias.scope !1434, !noalias !1437
  %822 = load i64, i64* %171, align 8, !alias.scope !1434, !noalias !1437
  %823 = inttoptr i64 %815 to i64*
  %824 = load i64, i64* %823
  %825 = add i64 %815, 8
  %826 = inttoptr i64 %825 to i64*
  %827 = load i64, i64* %826
  %828 = add i64 %815, 16
  %829 = inttoptr i64 %828 to i64*
  %830 = load i64, i64* %829
  %831 = add i64 %815, 24
  %832 = inttoptr i64 %831 to i64*
  %833 = load i64, i64* %832
  %834 = add i64 %815, 32
  %835 = inttoptr i64 %834 to i64*
  %836 = load i64, i64* %835
  %837 = add i64 %815, 40
  %838 = inttoptr i64 %837 to i64*
  %839 = load i64, i64* %838
  %840 = add i64 %815, 48
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  %843 = add i64 %815, 56
  %844 = inttoptr i64 %843 to i64*
  %845 = load i64, i64* %844
  %846 = add i64 %815, 64
  %847 = inttoptr i64 %846 to i64*
  %848 = load i64, i64* %847
  %849 = add i64 %815, 72
  %850 = inttoptr i64 %849 to i64*
  %851 = load i64, i64* %850
  store i64 %815, i64* %19, align 8, !alias.scope !1434, !noalias !1437
  %852 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2074), i64 %818, i64 %819, i64 %820, i64 %821, i64 %822, i64 %824, i64 %827, i64 %830, i64 %833, i64 %836, i64 %839, i64 %842, i64 %845, i64 %848, i64 %851), !noalias !1434
  store i64 %852, i64* %166, align 8, !alias.scope !1434, !noalias !1437
  %853 = load i64, i64* %20, align 8
  %854 = add i64 %853, -320
  %855 = trunc i64 %852 to i32
  %856 = inttoptr i64 %854 to i32*
  store i32 %855, i32* %856
  %857 = load i64, i64* %19, align 8
  %858 = add i64 %857, 280
  %859 = icmp ugt i64 %857, -281
  %860 = zext i1 %859 to i8
  store i8 %860, i8* %49, align 1, !tbaa !1246
  %861 = trunc i64 %858 to i32
  %862 = and i32 %861, 255
  %863 = tail call i32 @llvm.ctpop.i32(i32 %862) #11
  %864 = trunc i32 %863 to i8
  %865 = and i8 %864, 1
  %866 = xor i8 %865, 1
  store i8 %866, i8* %50, align 1, !tbaa !1260
  %867 = xor i64 %857, 16
  %868 = xor i64 %867, %858
  %869 = lshr i64 %868, 4
  %870 = trunc i64 %869 to i8
  %871 = and i8 %870, 1
  store i8 %871, i8* %51, align 1, !tbaa !1261
  %872 = icmp eq i64 %858, 0
  %873 = zext i1 %872 to i8
  store i8 %873, i8* %52, align 1, !tbaa !1262
  %874 = lshr i64 %858, 63
  %875 = trunc i64 %874 to i8
  store i8 %875, i8* %53, align 1, !tbaa !1263
  %876 = lshr i64 %857, 63
  %877 = xor i64 %874, %876
  %878 = add nuw nsw i64 %877, %874
  %879 = icmp eq i64 %878, 2
  %880 = zext i1 %879 to i8
  store i8 %880, i8* %54, align 1, !tbaa !1264
  %881 = add i64 %857, 288
  %882 = inttoptr i64 %858 to i64*
  %883 = load i64, i64* %882
  store i64 %883, i64* %14, align 8, !tbaa !1240
  %884 = add i64 %857, 296
  %885 = inttoptr i64 %881 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %23, align 8, !tbaa !1240
  %887 = add i64 %857, 304
  %888 = inttoptr i64 %884 to i64*
  %889 = load i64, i64* %888
  store i64 %889, i64* %24, align 8, !tbaa !1240
  %890 = add i64 %857, 312
  %891 = inttoptr i64 %887 to i64*
  %892 = load i64, i64* %891
  store i64 %892, i64* %25, align 8, !tbaa !1240
  %893 = add i64 %857, 320
  %894 = inttoptr i64 %890 to i64*
  %895 = load i64, i64* %894
  store i64 %895, i64* %26, align 8, !tbaa !1240
  %896 = add i64 %857, 328
  %897 = inttoptr i64 %893 to i64*
  %898 = load i64, i64* %897
  store i64 %898, i64* %20, align 8, !tbaa !1240
  %899 = inttoptr i64 %896 to i64*
  %900 = load i64, i64* %899
  store i64 %900, i64* %3, align 8, !tbaa !1240
  %901 = add i64 %857, 336
  store i64 %901, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %381

block_402c8c:                                     ; preds = %block_402bef
  %902 = add i64 %1327, 27
  %903 = load i64, i64* %19, align 8, !tbaa !1240
  %904 = add i64 %903, -8
  %905 = inttoptr i64 %904 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %168, align 8, !alias.scope !1439, !noalias !1442
  %907 = load i64, i64* %167, align 8, !alias.scope !1439, !noalias !1442
  %908 = load i64, i64* %170, align 8, !alias.scope !1439, !noalias !1442
  %909 = load i64, i64* %171, align 8, !alias.scope !1439, !noalias !1442
  %910 = inttoptr i64 %903 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %903, 8
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = add i64 %903, 16
  %916 = inttoptr i64 %915 to i64*
  %917 = load i64, i64* %916
  %918 = add i64 %903, 24
  %919 = inttoptr i64 %918 to i64*
  %920 = load i64, i64* %919
  %921 = add i64 %903, 32
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  %924 = add i64 %903, 40
  %925 = inttoptr i64 %924 to i64*
  %926 = load i64, i64* %925
  %927 = add i64 %903, 48
  %928 = inttoptr i64 %927 to i64*
  %929 = load i64, i64* %928
  %930 = add i64 %903, 56
  %931 = inttoptr i64 %930 to i64*
  %932 = load i64, i64* %931
  %933 = add i64 %903, 64
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %903, 72
  %937 = inttoptr i64 %936 to i64*
  %938 = load i64, i64* %937
  %939 = inttoptr i64 %904 to i64*
  %940 = load i64, i64* %939
  store i64 %940, i64* %3, align 8, !alias.scope !1439, !noalias !1442
  store i64 %903, i64* %19, align 8, !alias.scope !1439, !noalias !1442
  %941 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1959), i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1996), i64 %906, i64 %907, i64 %908, i64 %909, i64 %911, i64 %914, i64 %917, i64 %920, i64 %923, i64 %926, i64 %929, i64 %932, i64 %935, i64 %938), !noalias !1439
  %942 = load i64, i64* %20, align 8
  %943 = add i64 %942, -280
  %944 = trunc i64 %941 to i32
  %945 = load i64, i64* %3, align 8
  %946 = add i64 %945, 6
  %947 = inttoptr i64 %943 to i32*
  store i32 %944, i32* %947
  br label %block_402cad

block_402bca:                                     ; preds = %block_402b82, %block_402bb0
  %948 = phi i64 [ %320, %block_402bb0 ], [ %1093, %block_402b82 ]
  %949 = phi i64 [ %324, %block_402bb0 ], [ %1098, %block_402b82 ]
  %950 = phi %struct.Memory* [ %2, %block_402bb0 ], [ %1045, %block_402b82 ]
  %951 = add i64 %949, 37
  br label %block_402bef

block_402b1a:                                     ; preds = %block_402b09
  %952 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1688) to double*)
  store double %952, double* %123, align 1, !tbaa !1244
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %954 = bitcast i64* %953 to double*
  store double 0.000000e+00, double* %954, align 1, !tbaa !1244
  %955 = add i64 %258, -112
  %956 = add i64 %258, -56
  %957 = inttoptr i64 %956 to i32*
  %958 = load i32, i32* %957
  %959 = sitofp i32 %958 to double
  store double %959, double* %127, align 1, !tbaa !1244
  %960 = add i64 %258, -240
  %961 = inttoptr i64 %960 to i64*
  store i64 %955, i64* %961
  %962 = add i64 %1043, 31
  %963 = load i64, i64* %19, align 8, !tbaa !1240
  %964 = add i64 %963, -8
  %965 = inttoptr i64 %964 to i64*
  store i64 %962, i64* %965
  %966 = load i64, i64* %169, align 8, !alias.scope !1444, !noalias !1447
  %967 = inttoptr i64 %964 to i64*
  %968 = load i64, i64* %967
  store i64 %968, i64* %3, align 8, !alias.scope !1444, !noalias !1447
  store i64 %963, i64* %19, align 8, !alias.scope !1444, !noalias !1447
  %969 = tail call i64 @pow(i64 %955, i64 %966), !noalias !1444
  %970 = load i64, i64* %3, align 8
  %971 = load i64, i64* %20, align 8
  %972 = add i64 %971, -240
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  %975 = add i64 %970, 24
  %976 = load i64, i64* %19, align 8, !tbaa !1240
  %977 = add i64 %976, -8
  %978 = inttoptr i64 %977 to i64*
  store i64 %975, i64* %978
  %979 = load i64, i64* %168, align 8, !alias.scope !1449, !noalias !1452
  %980 = load i64, i64* %167, align 8, !alias.scope !1449, !noalias !1452
  %981 = load i64, i64* %170, align 8, !alias.scope !1449, !noalias !1452
  %982 = load i64, i64* %171, align 8, !alias.scope !1449, !noalias !1452
  %983 = inttoptr i64 %976 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %976, 8
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  %988 = add i64 %976, 16
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %976, 24
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = add i64 %976, 32
  %995 = inttoptr i64 %994 to i64*
  %996 = load i64, i64* %995
  %997 = add i64 %976, 40
  %998 = inttoptr i64 %997 to i64*
  %999 = load i64, i64* %998
  %1000 = add i64 %976, 48
  %1001 = inttoptr i64 %1000 to i64*
  %1002 = load i64, i64* %1001
  %1003 = add i64 %976, 56
  %1004 = inttoptr i64 %1003 to i64*
  %1005 = load i64, i64* %1004
  %1006 = add i64 %976, 64
  %1007 = inttoptr i64 %1006 to i64*
  %1008 = load i64, i64* %1007
  %1009 = add i64 %976, 72
  %1010 = inttoptr i64 %1009 to i64*
  %1011 = load i64, i64* %1010
  %1012 = inttoptr i64 %977 to i64*
  %1013 = load i64, i64* %1012
  store i64 %1013, i64* %3, align 8, !alias.scope !1449, !noalias !1452
  store i64 %976, i64* %19, align 8, !alias.scope !1449, !noalias !1452
  %1014 = tail call i64 @sprintf(i64 %974, i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1761), i64 %979, i64 %980, i64 %981, i64 %982, i64 %984, i64 %987, i64 %990, i64 %993, i64 %996, i64 %999, i64 %1002, i64 %1005, i64 %1008, i64 %1011), !noalias !1449
  %1015 = load i64, i64* %20, align 8
  %1016 = add i64 %1015, -116
  %1017 = load i64, i64* %3, align 8
  %1018 = inttoptr i64 %1016 to i32*
  store i32 14, i32* %1018
  %1019 = inttoptr i64 %1016 to i32*
  %1020 = load i32, i32* %1019
  %1021 = sext i32 %1020 to i64
  %1022 = add nsw i64 %1021, -112
  %1023 = add i64 %1022, %1015
  %1024 = inttoptr i64 %1023 to i8*
  %1025 = load i8, i8* %1024
  %1026 = sext i8 %1025 to i32
  %1027 = add nsw i32 %1026, -46
  %1028 = icmp eq i32 %1027, 0
  %1029 = add i64 %1015, -244
  %1030 = trunc i64 %1014 to i32
  %1031 = inttoptr i64 %1029 to i32*
  store i32 %1030, i32* %1031
  %1032 = select i1 %1028, i64 31, i64 49
  %1033 = add i64 %1017, %1032
  br i1 %1028, label %block_402b70, label %block_402b82

block_402b09:                                     ; preds = %block_402af9
  %1034 = add i64 %1101, 1
  %1035 = inttoptr i64 %1034 to i8*
  %1036 = load i8, i8* %1035
  %1037 = sext i8 %1036 to i64
  %1038 = and i64 %1037, 4294967295
  store i64 %1038, i64* %15, align 8, !tbaa !1240
  %1039 = sext i8 %1036 to i32
  %1040 = add nsw i32 %1039, -80
  %1041 = icmp eq i32 %1040, 0
  %1042 = select i1 %1041, i64 17, i64 167
  %1043 = add i64 %1110, %1042
  br i1 %1041, label %block_402b1a, label %block_402bb0

block_402b82:                                     ; preds = %block_402b70, %block_402b1a
  %1044 = phi i64 [ %1033, %block_402b1a ], [ %1120, %block_402b70 ]
  %1045 = phi %struct.Memory* [ %2, %block_402b1a ], [ %2, %block_402b70 ]
  %1046 = add i64 %1015, -112
  %1047 = inttoptr i64 %1016 to i32*
  %1048 = load i32, i32* %1047
  %1049 = add i32 %1048, 1
  %1050 = sext i32 %1049 to i64
  store i64 %1050, i64* %15, align 8, !tbaa !1240
  %1051 = add nsw i64 %1050, -112
  %1052 = add i64 %1051, %1015
  %1053 = inttoptr i64 %1052 to i8*
  store i8 0, i8* %1053
  %1054 = add i64 %1044, 35
  %1055 = load i64, i64* %19, align 8, !tbaa !1240
  %1056 = add i64 %1055, -8
  %1057 = inttoptr i64 %1056 to i64*
  store i64 %1054, i64* %1057
  %1058 = load i64, i64* %168, align 8, !alias.scope !1454, !noalias !1457
  %1059 = load i64, i64* %170, align 8, !alias.scope !1454, !noalias !1457
  %1060 = load i64, i64* %171, align 8, !alias.scope !1454, !noalias !1457
  %1061 = inttoptr i64 %1055 to i64*
  %1062 = load i64, i64* %1061
  %1063 = add i64 %1055, 8
  %1064 = inttoptr i64 %1063 to i64*
  %1065 = load i64, i64* %1064
  %1066 = add i64 %1055, 16
  %1067 = inttoptr i64 %1066 to i64*
  %1068 = load i64, i64* %1067
  %1069 = add i64 %1055, 24
  %1070 = inttoptr i64 %1069 to i64*
  %1071 = load i64, i64* %1070
  %1072 = add i64 %1055, 32
  %1073 = inttoptr i64 %1072 to i64*
  %1074 = load i64, i64* %1073
  %1075 = add i64 %1055, 40
  %1076 = inttoptr i64 %1075 to i64*
  %1077 = load i64, i64* %1076
  %1078 = add i64 %1055, 48
  %1079 = inttoptr i64 %1078 to i64*
  %1080 = load i64, i64* %1079
  %1081 = add i64 %1055, 56
  %1082 = inttoptr i64 %1081 to i64*
  %1083 = load i64, i64* %1082
  %1084 = add i64 %1055, 64
  %1085 = inttoptr i64 %1084 to i64*
  %1086 = load i64, i64* %1085
  %1087 = add i64 %1055, 72
  %1088 = inttoptr i64 %1087 to i64*
  %1089 = load i64, i64* %1088
  %1090 = inttoptr i64 %1056 to i64*
  %1091 = load i64, i64* %1090
  store i64 %1091, i64* %3, align 8, !alias.scope !1454, !noalias !1457
  store i64 %1055, i64* %19, align 8, !alias.scope !1454, !noalias !1457
  %1092 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1769), i64 %1046, i64 %1058, i64 %1050, i64 %1059, i64 %1060, i64 %1062, i64 %1065, i64 %1068, i64 %1071, i64 %1074, i64 %1077, i64 %1080, i64 %1083, i64 %1086, i64 %1089), !noalias !1454
  %1093 = load i64, i64* %20, align 8
  %1094 = add i64 %1093, -248
  %1095 = trunc i64 %1092 to i32
  %1096 = load i64, i64* %3, align 8
  %1097 = inttoptr i64 %1094 to i32*
  store i32 %1095, i32* %1097
  %1098 = add i64 %1096, 37
  br label %block_402bca

block_402af9:                                     ; preds = %block_402aef
  %1099 = add i64 %258, -48
  %1100 = inttoptr i64 %1099 to i64*
  %1101 = load i64, i64* %1100
  %1102 = inttoptr i64 %1101 to i8*
  %1103 = load i8, i8* %1102
  %1104 = sext i8 %1103 to i64
  %1105 = and i64 %1104, 4294967295
  store i64 %1105, i64* %15, align 8, !tbaa !1240
  %1106 = sext i8 %1103 to i32
  %1107 = add nsw i32 %1106, -69
  %1108 = icmp eq i32 %1107, 0
  %1109 = select i1 %1108, i64 16, i64 183
  %1110 = add i64 %274, %1109
  br i1 %1108, label %block_402b09, label %block_402bb0

block_402b70:                                     ; preds = %block_402b1a
  %1111 = inttoptr i64 %1016 to i32*
  %1112 = load i32, i32* %1111
  %1113 = sext i32 %1112 to i64
  %1114 = add nsw i64 %1113, -112
  %1115 = add i64 %1114, %1015
  %1116 = inttoptr i64 %1115 to i8*
  store i8 32, i8* %1116
  %1117 = inttoptr i64 %1016 to i32*
  %1118 = load i32, i32* %1117
  %1119 = add i32 %1118, -1
  %1120 = add i64 %1033, 18
  %1121 = inttoptr i64 %1016 to i32*
  store i32 %1119, i32* %1121
  br label %block_402b82

block_402bef:                                     ; preds = %block_402bca, %block_402bcf
  %1122 = phi i64 [ %373, %block_402bcf ], [ %948, %block_402bca ]
  %1123 = phi i64 [ %377, %block_402bcf ], [ %951, %block_402bca ]
  %1124 = phi %struct.Memory* [ %2, %block_402bcf ], [ %950, %block_402bca ]
  %1125 = add i64 %1122, -68
  %1126 = inttoptr i64 %1125 to i32*
  %1127 = load i32, i32* %1126
  %1128 = zext i32 %1127 to i64
  store i64 %1128, i64* %17, align 8, !tbaa !1240
  %1129 = add i64 %1123, 20
  %1130 = load i64, i64* %19, align 8, !tbaa !1240
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1129, i64* %1132
  %1133 = load i64, i64* %168, align 8, !alias.scope !1459, !noalias !1462
  %1134 = load i64, i64* %167, align 8, !alias.scope !1459, !noalias !1462
  %1135 = load i64, i64* %170, align 8, !alias.scope !1459, !noalias !1462
  %1136 = load i64, i64* %171, align 8, !alias.scope !1459, !noalias !1462
  %1137 = inttoptr i64 %1130 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1130, 8
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1130, 16
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = add i64 %1130, 24
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = add i64 %1130, 32
  %1149 = inttoptr i64 %1148 to i64*
  %1150 = load i64, i64* %1149
  %1151 = add i64 %1130, 40
  %1152 = inttoptr i64 %1151 to i64*
  %1153 = load i64, i64* %1152
  %1154 = add i64 %1130, 48
  %1155 = inttoptr i64 %1154 to i64*
  %1156 = load i64, i64* %1155
  %1157 = add i64 %1130, 56
  %1158 = inttoptr i64 %1157 to i64*
  %1159 = load i64, i64* %1158
  %1160 = add i64 %1130, 64
  %1161 = inttoptr i64 %1160 to i64*
  %1162 = load i64, i64* %1161
  %1163 = add i64 %1130, 72
  %1164 = inttoptr i64 %1163 to i64*
  %1165 = load i64, i64* %1164
  %1166 = inttoptr i64 %1131 to i64*
  %1167 = load i64, i64* %1166
  store i64 %1167, i64* %3, align 8, !alias.scope !1459, !noalias !1462
  store i64 %1130, i64* %19, align 8, !alias.scope !1459, !noalias !1462
  %1168 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 159), i64 %1128, i64 %1133, i64 %1134, i64 %1135, i64 %1136, i64 %1138, i64 %1141, i64 %1144, i64 %1147, i64 %1150, i64 %1153, i64 %1156, i64 %1159, i64 %1162, i64 %1165), !noalias !1459
  %1169 = load i64, i64* %3, align 8
  %1170 = load i64, i64* %20, align 8
  %1171 = add i64 %1170, -80
  %1172 = inttoptr i64 %1171 to double*
  %1173 = load double, double* %1172
  store double %1173, double* %123, align 1, !tbaa !1244
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1175 = bitcast i64* %1174 to double*
  store double 0.000000e+00, double* %1175, align 1, !tbaa !1244
  %1176 = add i64 %1170, -260
  %1177 = trunc i64 %1168 to i32
  %1178 = inttoptr i64 %1176 to i32*
  store i32 %1177, i32* %1178
  %1179 = add i64 %1169, 28
  %1180 = load i64, i64* %19, align 8, !tbaa !1240
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1179, i64* %1182
  %1183 = load i64, i64* %169, align 8, !alias.scope !1464, !noalias !1467
  %1184 = load i64, i64* %168, align 8, !alias.scope !1464, !noalias !1467
  %1185 = load i64, i64* %167, align 8, !alias.scope !1464, !noalias !1467
  %1186 = load i64, i64* %170, align 8, !alias.scope !1464, !noalias !1467
  %1187 = load i64, i64* %171, align 8, !alias.scope !1464, !noalias !1467
  %1188 = inttoptr i64 %1180 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1180, 8
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = add i64 %1180, 16
  %1194 = inttoptr i64 %1193 to i64*
  %1195 = load i64, i64* %1194
  %1196 = add i64 %1180, 24
  %1197 = inttoptr i64 %1196 to i64*
  %1198 = load i64, i64* %1197
  %1199 = add i64 %1180, 32
  %1200 = inttoptr i64 %1199 to i64*
  %1201 = load i64, i64* %1200
  %1202 = add i64 %1180, 40
  %1203 = inttoptr i64 %1202 to i64*
  %1204 = load i64, i64* %1203
  %1205 = add i64 %1180, 48
  %1206 = inttoptr i64 %1205 to i64*
  %1207 = load i64, i64* %1206
  %1208 = add i64 %1180, 56
  %1209 = inttoptr i64 %1208 to i64*
  %1210 = load i64, i64* %1209
  %1211 = add i64 %1180, 64
  %1212 = inttoptr i64 %1211 to i64*
  %1213 = load i64, i64* %1212
  %1214 = add i64 %1180, 72
  %1215 = inttoptr i64 %1214 to i64*
  %1216 = load i64, i64* %1215
  %1217 = inttoptr i64 %1181 to i64*
  %1218 = load i64, i64* %1217
  store i64 %1218, i64* %3, align 8, !alias.scope !1464, !noalias !1467
  store i64 %1180, i64* %19, align 8, !alias.scope !1464, !noalias !1467
  %1219 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1882), i64 %1183, i64 %1184, i64 %1185, i64 %1186, i64 %1187, i64 %1189, i64 %1192, i64 %1195, i64 %1198, i64 %1201, i64 %1204, i64 %1207, i64 %1210, i64 %1213, i64 %1216), !noalias !1464
  %1220 = load i64, i64* %3, align 8
  %1221 = load i64, i64* %20, align 8
  %1222 = add i64 %1221, -88
  %1223 = inttoptr i64 %1222 to double*
  %1224 = load double, double* %1223
  store double %1224, double* %123, align 1, !tbaa !1244
  store double 0.000000e+00, double* %1175, align 1, !tbaa !1244
  %1225 = add i64 %1221, -264
  %1226 = trunc i64 %1219 to i32
  %1227 = inttoptr i64 %1225 to i32*
  store i32 %1226, i32* %1227
  %1228 = add i64 %1220, 28
  %1229 = load i64, i64* %19, align 8, !tbaa !1240
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %169, align 8, !alias.scope !1469, !noalias !1472
  %1233 = load i64, i64* %168, align 8, !alias.scope !1469, !noalias !1472
  %1234 = load i64, i64* %167, align 8, !alias.scope !1469, !noalias !1472
  %1235 = load i64, i64* %170, align 8, !alias.scope !1469, !noalias !1472
  %1236 = load i64, i64* %171, align 8, !alias.scope !1469, !noalias !1472
  %1237 = inttoptr i64 %1229 to i64*
  %1238 = load i64, i64* %1237
  %1239 = add i64 %1229, 8
  %1240 = inttoptr i64 %1239 to i64*
  %1241 = load i64, i64* %1240
  %1242 = add i64 %1229, 16
  %1243 = inttoptr i64 %1242 to i64*
  %1244 = load i64, i64* %1243
  %1245 = add i64 %1229, 24
  %1246 = inttoptr i64 %1245 to i64*
  %1247 = load i64, i64* %1246
  %1248 = add i64 %1229, 32
  %1249 = inttoptr i64 %1248 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1229, 40
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1229, 48
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1229, 56
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1229, 64
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1229, 72
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = inttoptr i64 %1230 to i64*
  %1267 = load i64, i64* %1266
  store i64 %1267, i64* %3, align 8, !alias.scope !1469, !noalias !1472
  store i64 %1229, i64* %19, align 8, !alias.scope !1469, !noalias !1472
  %1268 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1922), i64 %1232, i64 %1233, i64 %1234, i64 %1235, i64 %1236, i64 %1238, i64 %1241, i64 %1244, i64 %1247, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265), !noalias !1469
  %1269 = load i64, i64* %3, align 8
  %1270 = load i64, i64* %20, align 8
  %1271 = add i64 %1270, 16
  %1272 = inttoptr i64 %1271 to i64*
  %1273 = load i64, i64* %1272
  %1274 = add i64 %1270, -268
  %1275 = trunc i64 %1268 to i32
  %1276 = inttoptr i64 %1274 to i32*
  store i32 %1275, i32* %1276
  %1277 = add i64 %1269, 27
  %1278 = load i64, i64* %19, align 8, !tbaa !1240
  %1279 = add i64 %1278, -8
  %1280 = inttoptr i64 %1279 to i64*
  store i64 %1277, i64* %1280
  %1281 = load i64, i64* %168, align 8, !alias.scope !1474, !noalias !1477
  %1282 = load i64, i64* %167, align 8, !alias.scope !1474, !noalias !1477
  %1283 = load i64, i64* %170, align 8, !alias.scope !1474, !noalias !1477
  %1284 = load i64, i64* %171, align 8, !alias.scope !1474, !noalias !1477
  %1285 = inttoptr i64 %1278 to i64*
  %1286 = load i64, i64* %1285
  %1287 = add i64 %1278, 8
  %1288 = inttoptr i64 %1287 to i64*
  %1289 = load i64, i64* %1288
  %1290 = add i64 %1278, 16
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  %1293 = add i64 %1278, 24
  %1294 = inttoptr i64 %1293 to i64*
  %1295 = load i64, i64* %1294
  %1296 = add i64 %1278, 32
  %1297 = inttoptr i64 %1296 to i64*
  %1298 = load i64, i64* %1297
  %1299 = add i64 %1278, 40
  %1300 = inttoptr i64 %1299 to i64*
  %1301 = load i64, i64* %1300
  %1302 = add i64 %1278, 48
  %1303 = inttoptr i64 %1302 to i64*
  %1304 = load i64, i64* %1303
  %1305 = add i64 %1278, 56
  %1306 = inttoptr i64 %1305 to i64*
  %1307 = load i64, i64* %1306
  %1308 = add i64 %1278, 64
  %1309 = inttoptr i64 %1308 to i64*
  %1310 = load i64, i64* %1309
  %1311 = add i64 %1278, 72
  %1312 = inttoptr i64 %1311 to i64*
  %1313 = load i64, i64* %1312
  %1314 = inttoptr i64 %1279 to i64*
  %1315 = load i64, i64* %1314
  store i64 %1315, i64* %3, align 8, !alias.scope !1474, !noalias !1477
  store i64 %1278, i64* %19, align 8, !alias.scope !1474, !noalias !1477
  %1316 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 274), i64 %1273, i64 %1281, i64 %1282, i64 %1283, i64 %1284, i64 %1286, i64 %1289, i64 %1292, i64 %1295, i64 %1298, i64 %1301, i64 %1304, i64 %1307, i64 %1310, i64 %1313), !noalias !1474
  %1317 = load i64, i64* %20, align 8
  %1318 = add i64 %1317, 24
  %1319 = load i64, i64* %3, align 8
  %1320 = inttoptr i64 %1318 to i32*
  %1321 = load i32, i32* %1320
  %1322 = icmp eq i32 %1321, 0
  %1323 = add i64 %1317, -272
  %1324 = trunc i64 %1316 to i32
  %1325 = inttoptr i64 %1323 to i32*
  store i32 %1324, i32* %1325
  %1326 = select i1 %1322, i64 54, i64 16
  %1327 = add i64 %1319, %1326
  br i1 %1322, label %block_402c8c, label %block_402c66

block_402c66:                                     ; preds = %block_402bef
  %1328 = add i64 %1327, 27
  %1329 = load i64, i64* %19, align 8, !tbaa !1240
  %1330 = add i64 %1329, -8
  %1331 = inttoptr i64 %1330 to i64*
  store i64 %1328, i64* %1331
  %1332 = load i64, i64* %168, align 8, !alias.scope !1479, !noalias !1482
  %1333 = load i64, i64* %167, align 8, !alias.scope !1479, !noalias !1482
  %1334 = load i64, i64* %170, align 8, !alias.scope !1479, !noalias !1482
  %1335 = load i64, i64* %171, align 8, !alias.scope !1479, !noalias !1482
  %1336 = inttoptr i64 %1329 to i64*
  %1337 = load i64, i64* %1336
  %1338 = add i64 %1329, 8
  %1339 = inttoptr i64 %1338 to i64*
  %1340 = load i64, i64* %1339
  %1341 = add i64 %1329, 16
  %1342 = inttoptr i64 %1341 to i64*
  %1343 = load i64, i64* %1342
  %1344 = add i64 %1329, 24
  %1345 = inttoptr i64 %1344 to i64*
  %1346 = load i64, i64* %1345
  %1347 = add i64 %1329, 32
  %1348 = inttoptr i64 %1347 to i64*
  %1349 = load i64, i64* %1348
  %1350 = add i64 %1329, 40
  %1351 = inttoptr i64 %1350 to i64*
  %1352 = load i64, i64* %1351
  %1353 = add i64 %1329, 48
  %1354 = inttoptr i64 %1353 to i64*
  %1355 = load i64, i64* %1354
  %1356 = add i64 %1329, 56
  %1357 = inttoptr i64 %1356 to i64*
  %1358 = load i64, i64* %1357
  %1359 = add i64 %1329, 64
  %1360 = inttoptr i64 %1359 to i64*
  %1361 = load i64, i64* %1360
  %1362 = add i64 %1329, 72
  %1363 = inttoptr i64 %1362 to i64*
  %1364 = load i64, i64* %1363
  %1365 = inttoptr i64 %1330 to i64*
  %1366 = load i64, i64* %1365
  store i64 %1366, i64* %3, align 8, !alias.scope !1479, !noalias !1482
  store i64 %1329, i64* %19, align 8, !alias.scope !1479, !noalias !1482
  %1367 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1959), i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1998), i64 %1332, i64 %1333, i64 %1334, i64 %1335, i64 %1337, i64 %1340, i64 %1343, i64 %1346, i64 %1349, i64 %1352, i64 %1355, i64 %1358, i64 %1361, i64 %1364), !noalias !1479
  %1368 = load i64, i64* %20, align 8
  %1369 = add i64 %1368, -276
  %1370 = trunc i64 %1367 to i32
  %1371 = load i64, i64* %3, align 8
  %1372 = inttoptr i64 %1369 to i32*
  store i32 %1370, i32* %1372
  %1373 = add i64 %1371, 44
  br label %block_402cad
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4031c0___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
block_4031c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400730_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400730:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %3, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %5, i64* %8
  %9 = inttoptr i64 %7 to i64*
  %10 = load i64, i64* %9
  store i64 %10, i64* %4, align 8, !tbaa !1240
  store i64 %6, i64* %3, align 8, !tbaa !1240
  %11 = add i64 %1, -112
  %12 = tail call %struct.Memory* @sub_4006c0_register_tm_clones(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  ret %struct.Memory* %12
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4021b0_vecset(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4021b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %15 = load i64, i64* %13, align 8
  %16 = load i64, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  %19 = add i64 %16, -12
  %20 = load i32, i32* %5, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %16, -24
  %23 = load i64, i64* %11, align 8
  %24 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %16, -32
  %26 = load i64, i64* %10, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %16, -40
  %29 = load i64, i64* %9, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %16, -44
  %32 = load i32, i32* %7, align 4
  %33 = inttoptr i64 %31 to i32*
  store i32 %32, i32* %33
  %34 = add i64 %16, -56
  %35 = bitcast %union.VectorReg* %14 to double*
  %36 = load double, double* %35, align 1
  %37 = inttoptr i64 %34 to double*
  store double %36, double* %37
  %38 = add i64 %16, -64
  %39 = inttoptr i64 %38 to i32*
  store i32 0, i32* %39
  %40 = add i64 %16, -60
  %41 = add i64 %1, 42
  %42 = inttoptr i64 %40 to i32*
  store i32 0, i32* %42
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = add i64 %16, -32
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %48 = bitcast i64* %47 to double*
  %49 = add i64 %16, -24
  br label %block_4021da

block_4021da:                                     ; preds = %block_402216, %block_4021b0
  %50 = phi i64 [ %41, %block_4021b0 ], [ %76, %block_402216 ]
  %51 = phi %struct.Memory* [ %2, %block_4021b0 ], [ %71, %block_402216 ]
  %52 = inttoptr i64 %40 to i32*
  %53 = load i32, i32* %52
  %54 = inttoptr i64 %28 to i64*
  %55 = load i64, i64* %54
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = sub i32 %53, %57
  %59 = lshr i32 %58, 31
  %60 = lshr i32 %53, 31
  %61 = lshr i32 %57, 31
  %62 = xor i32 %61, %60
  %63 = xor i32 %59, %60
  %64 = add nuw nsw i32 %63, %62
  %65 = icmp eq i32 %64, 2
  %66 = icmp ne i32 %59, 0
  %67 = xor i1 %66, %65
  %68 = select i1 %67, i64 15, i64 79
  %69 = add i64 %50, %68
  br i1 %67, label %block_4021e9, label %block_402229

block_402216:                                     ; preds = %block_4021e9, %block_4021fd
  %70 = phi i64 [ %161, %block_4021e9 ], [ %84, %block_4021fd ]
  %71 = phi %struct.Memory* [ %51, %block_4021e9 ], [ %51, %block_4021fd ]
  %72 = inttoptr i64 %40 to i32*
  %73 = load i32, i32* %72
  %74 = add i32 %73, 1
  %75 = inttoptr i64 %40 to i32*
  store i32 %74, i32* %75
  %76 = add i64 %70, -60
  br label %block_4021da

block_4021fd:                                     ; preds = %block_4021e9
  %77 = inttoptr i64 %34 to double*
  %78 = load double, double* %77
  store double %78, double* %35, align 1, !tbaa !1244
  store double 0.000000e+00, double* %48, align 1, !tbaa !1244
  %79 = inttoptr i64 %49 to i64*
  %80 = load i64, i64* %79
  %81 = shl nsw i64 %151, 3
  %82 = add i64 %81, %80
  %83 = inttoptr i64 %82 to double*
  store double %78, double* %83
  %84 = add i64 %161, 25
  %85 = inttoptr i64 %38 to i32*
  store i32 1, i32* %85
  br label %block_402216

block_402229:                                     ; preds = %block_4021da
  %86 = zext i32 %53 to i64
  store i64 %86, i64* %8, align 8, !tbaa !1240
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %55, i64* %9, align 8, !tbaa !1240
  %90 = inttoptr i64 %38 to i32*
  %91 = load i32, i32* %90
  store i8 0, i8* %43, align 1, !tbaa !1246
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #11
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %87, align 1, !tbaa !1260
  store i8 0, i8* %44, align 1, !tbaa !1261
  %97 = icmp eq i32 %91, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %88, align 1, !tbaa !1262
  %99 = lshr i32 %91, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %45, align 1, !tbaa !1263
  store i8 0, i8* %89, align 1, !tbaa !1264
  br i1 %97, label %block_402233, label %block_402268

block_402233:                                     ; preds = %block_402229
  %101 = inttoptr i64 %34 to double*
  %102 = load double, double* %101
  store double %102, double* %35, align 1, !tbaa !1244
  store double 0.000000e+00, double* %48, align 1, !tbaa !1244
  %103 = inttoptr i64 %49 to i64*
  %104 = load i64, i64* %103
  %105 = sext i32 %57 to i64
  %106 = shl nsw i64 %105, 3
  %107 = add i64 %106, %104
  %108 = inttoptr i64 %107 to double*
  store double %102, double* %108
  %109 = inttoptr i64 %31 to i32*
  %110 = load i32, i32* %109
  %111 = inttoptr i64 %46 to i64*
  %112 = load i64, i64* %111
  %113 = inttoptr i64 %28 to i64*
  %114 = load i64, i64* %113
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115
  %117 = sext i32 %116 to i64
  store i64 %117, i64* %9, align 8, !tbaa !1240
  %118 = shl nsw i64 %117, 2
  %119 = add i64 %118, %112
  %120 = inttoptr i64 %119 to i32*
  store i32 %110, i32* %120
  %121 = inttoptr i64 %28 to i64*
  %122 = load i64, i64* %121
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123
  %125 = add i32 %124, 1
  %126 = zext i32 %125 to i64
  store i64 %126, i64* %10, align 8, !tbaa !1240
  %127 = icmp eq i32 %124, -1
  %128 = icmp eq i32 %125, 0
  %129 = or i1 %127, %128
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %43, align 1, !tbaa !1246
  %131 = and i32 %125, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #11
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %87, align 1, !tbaa !1260
  %136 = xor i32 %125, %124
  %137 = lshr i32 %136, 4
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  store i8 %139, i8* %44, align 1, !tbaa !1261
  %140 = zext i1 %128 to i8
  store i8 %140, i8* %88, align 1, !tbaa !1262
  %141 = lshr i32 %125, 31
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %45, align 1, !tbaa !1263
  %143 = lshr i32 %124, 31
  %144 = xor i32 %141, %143
  %145 = add nuw nsw i32 %144, %141
  %146 = icmp eq i32 %145, 2
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %89, align 1, !tbaa !1264
  store i64 %122, i64* %8, align 8, !tbaa !1240
  %148 = inttoptr i64 %122 to i32*
  store i32 %125, i32* %148
  br label %block_402268

block_4021e9:                                     ; preds = %block_4021da
  %149 = inttoptr i64 %46 to i64*
  %150 = load i64, i64* %149
  %151 = sext i32 %53 to i64
  %152 = shl nsw i64 %151, 2
  %153 = add i64 %152, %150
  %154 = inttoptr i64 %153 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %10, align 8, !tbaa !1240
  %157 = inttoptr i64 %31 to i32*
  %158 = load i32, i32* %157
  %159 = icmp ne i32 %155, %158
  %160 = select i1 %159, i64 45, i64 20
  %161 = add i64 %69, %160
  br i1 %159, label %block_402216, label %block_4021fd

block_402268:                                     ; preds = %block_402233, %block_402229
  %162 = phi %struct.Memory* [ %51, %block_402229 ], [ %51, %block_402233 ]
  %163 = inttoptr i64 %17 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %13, align 8, !tbaa !1240
  %165 = inttoptr i64 %16 to i64*
  %166 = load i64, i64* %165
  store i64 %166, i64* %3, align 8, !tbaa !1240
  %167 = add i64 %16, 8
  store i64 %167, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %162
}

; Function Attrs: noinline
define %struct.Memory* @sub_401990_makea(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401990:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %23 = load i64, i64* %15, align 8
  %24 = load i64, i64* %14, align 8, !tbaa !1240
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  store i64 %23, i64* %26
  store i64 %25, i64* %15, align 8, !tbaa !1240
  %27 = load i64, i64* %21, align 8
  %28 = add i64 %24, -16
  %29 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %29
  %30 = load i64, i64* %20, align 8
  %31 = add i64 %24, -24
  %32 = inttoptr i64 %31 to i64*
  store i64 %30, i64* %32
  %33 = load i64, i64* %19, align 8
  %34 = add i64 %24, -32
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %24, -40
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = add i64 %24, -344
  store i64 %39, i64* %14, align 8, !tbaa !1240
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = add i64 %24, 56
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  %49 = add i64 %24, 48
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %17, align 8, !tbaa !1240
  %52 = add i64 %24, 40
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %18, align 8, !tbaa !1240
  %55 = add i64 %24, 32
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %10, align 8, !tbaa !1240
  %58 = add i64 %24, 24
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59
  %61 = zext i32 %60 to i64
  store i64 %61, i64* %20, align 8, !tbaa !1240
  %62 = add i64 %24, 16
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %21, align 8, !tbaa !1240
  %66 = add i64 %24, 8
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %19, align 8, !tbaa !1240
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, -36
  %72 = load i32, i32* %7, align 4
  %73 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %73
  %74 = add i64 %70, -40
  %75 = load i32, i32* %5, align 4
  %76 = inttoptr i64 %74 to i32*
  store i32 %75, i32* %76
  %77 = add i64 %70, -48
  %78 = load i64, i64* %12, align 8
  %79 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %79
  %80 = add i64 %70, -56
  %81 = load i64, i64* %11, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %82
  %83 = add i64 %70, -64
  %84 = load i64, i64* %16, align 8
  %85 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %85
  %86 = add i64 %70, -68
  %87 = load i32, i32* %9, align 4
  %88 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %70, -84
  %90 = inttoptr i64 %89 to i32*
  store i32 1, i32* %90
  %91 = add i64 %70, -244
  %92 = inttoptr i64 %91 to i32*
  store i32 %68, i32* %92
  %93 = add i64 %70, -256
  %94 = inttoptr i64 %93 to i64*
  store i64 %51, i64* %94
  %95 = add i64 %70, -264
  %96 = inttoptr i64 %95 to i64*
  store i64 %54, i64* %96
  %97 = add i64 %70, -272
  %98 = inttoptr i64 %97 to i64*
  store i64 %57, i64* %98
  %99 = add i64 %70, -276
  %100 = inttoptr i64 %99 to i32*
  store i32 %60, i32* %100
  %101 = add i64 %70, -280
  %102 = inttoptr i64 %101 to i32*
  store i32 %64, i32* %102
  %103 = add i64 %70, -288
  %104 = add i64 %1, 124
  %105 = inttoptr i64 %103 to i64*
  store i64 %48, i64* %105
  br label %block_401a0c

block_401afa:                                     ; preds = %block_401a97
  %106 = inttoptr i64 %178 to i32*
  %107 = load i32, i32* %106
  %108 = add i32 %107, 1
  %109 = inttoptr i64 %178 to i32*
  store i32 %108, i32* %109
  %110 = add i64 %128, -210
  br label %block_401a28

block_401a97:                                     ; preds = %block_401aa3, %block_401a34
  %111 = phi i64 [ %186, %block_401a34 ], [ %368, %block_401aa3 ]
  %112 = phi %struct.Memory* [ %169, %block_401a34 ], [ %112, %block_401aa3 ]
  %113 = inttoptr i64 %185 to i32*
  %114 = load i32, i32* %113
  %115 = inttoptr i64 %171 to i32*
  %116 = load i32, i32* %115
  %117 = sub i32 %114, %116
  %118 = lshr i32 %117, 31
  %119 = lshr i32 %114, 31
  %120 = lshr i32 %116, 31
  %121 = xor i32 %120, %119
  %122 = xor i32 %118, %119
  %123 = add nuw nsw i32 %122, %121
  %124 = icmp eq i32 %123, 2
  %125 = icmp ne i32 %118, 0
  %126 = xor i1 %125, %124
  %127 = select i1 %126, i64 12, i64 99
  %128 = add i64 %111, %127
  br i1 %126, label %block_401aa3, label %block_401afa

block_401a34:                                     ; preds = %block_401a28
  %129 = add i64 %312, -144
  store i64 %129, i64* %16, align 8, !tbaa !1240
  %130 = add i64 %312, -240
  store i64 %130, i64* %11, align 8, !tbaa !1240
  %131 = add i64 %312, -80
  %132 = inttoptr i64 %131 to i32*
  store i32 11, i32* %132
  %133 = inttoptr i64 %317 to i32*
  %134 = load i32, i32* %133
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %371, align 8, !tbaa !1240
  %136 = inttoptr i64 %131 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %13, align 8, !tbaa !1240
  %139 = add i64 %312, -84
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %12, align 8, !tbaa !1240
  %143 = add i64 %332, 1628
  %144 = add i64 %332, 35
  %145 = load i64, i64* %14, align 8, !tbaa !1240
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %144, i64* %147
  store i64 %146, i64* %14, align 8, !tbaa !1240
  %148 = tail call %struct.Memory* @sub_402090_sprnvc(%struct.State* nonnull %0, i64 %143, %struct.Memory* %313)
  %149 = load i64, i64* %15, align 8
  %150 = add i64 %149, -80
  %151 = load i64, i64* %3, align 8
  store i64 %150, i64* %11, align 8, !tbaa !1240
  %152 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 888) to double*)
  store double %152, double* %376, align 1, !tbaa !1244
  store double 0.000000e+00, double* %378, align 1, !tbaa !1244
  %153 = add i64 %149, -144
  store i64 %153, i64* %12, align 8, !tbaa !1240
  %154 = add i64 %149, -240
  store i64 %154, i64* %13, align 8, !tbaa !1240
  %155 = add i64 %149, -36
  %156 = inttoptr i64 %155 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %371, align 8, !tbaa !1240
  %159 = add i64 %149, -72
  %160 = inttoptr i64 %159 to i32*
  %161 = load i32, i32* %160
  %162 = add i32 %161, 1
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %16, align 8, !tbaa !1240
  %164 = add i64 %151, 1881
  %165 = add i64 %151, 43
  %166 = load i64, i64* %14, align 8, !tbaa !1240
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168
  store i64 %167, i64* %14, align 8, !tbaa !1240
  %169 = tail call %struct.Memory* @sub_4021b0_vecset(%struct.State* nonnull %0, i64 %164, %struct.Memory* %148)
  %170 = load i64, i64* %15, align 8
  %171 = add i64 %170, -80
  %172 = load i64, i64* %3, align 8
  %173 = inttoptr i64 %171 to i32*
  %174 = load i32, i32* %173
  %175 = add i64 %170, 40
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %170, -72
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  %182 = shl nsw i64 %181, 2
  %183 = add i64 %182, %177
  %184 = inttoptr i64 %183 to i32*
  store i32 %174, i32* %184
  %185 = add i64 %170, -76
  %186 = add i64 %172, 21
  %187 = inttoptr i64 %185 to i32*
  store i32 0, i32* %187
  %188 = add i64 %170, -144
  %189 = add i64 %170, 48
  %190 = add i64 %170, -240
  %191 = add i64 %170, 56
  br label %block_401a97

block_401b0d:                                     ; preds = %block_401a28
  %192 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  store i64 11, i64* %192, align 8, !tbaa !1240
  %193 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 880) to double*)
  store double %193, double* %376, align 1, !tbaa !1244
  store double 0.000000e+00, double* %378, align 1, !tbaa !1244
  %194 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 872) to double*)
  %195 = bitcast %union.VectorReg* %372 to double*
  store double %194, double* %195, align 1, !tbaa !1244
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %197 = bitcast i64* %196 to double*
  store double 0.000000e+00, double* %197, align 1, !tbaa !1244
  %198 = add i64 %312, -48
  %199 = inttoptr i64 %198 to i64*
  %200 = load i64, i64* %199
  store i64 %200, i64* %371, align 8, !tbaa !1240
  %201 = add i64 %312, -56
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %13, align 8, !tbaa !1240
  %204 = add i64 %312, -64
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %12, align 8, !tbaa !1240
  %207 = zext i32 %319 to i64
  store i64 %207, i64* %11, align 8, !tbaa !1240
  %208 = add i64 %312, -40
  %209 = inttoptr i64 %208 to i32*
  %210 = load i32, i32* %209
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %16, align 8, !tbaa !1240
  %212 = add i64 %312, 40
  %213 = inttoptr i64 %212 to i64*
  %214 = load i64, i64* %213
  %215 = add i64 %312, 48
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  %218 = add i64 %312, 56
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219
  %221 = add i64 %312, -68
  %222 = inttoptr i64 %221 to i32*
  %223 = load i32, i32* %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %10, align 8, !tbaa !1240
  %225 = add i64 %312, 16
  %226 = inttoptr i64 %225 to i32*
  %227 = load i32, i32* %226
  %228 = zext i32 %227 to i64
  store i64 %228, i64* %20, align 8, !tbaa !1240
  %229 = add i64 %312, 64
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %21, align 8, !tbaa !1240
  %232 = load i64, i64* %14, align 8
  %233 = inttoptr i64 %232 to i64*
  store i64 %214, i64* %233
  %234 = add i64 %232, 8
  %235 = inttoptr i64 %234 to i64*
  store i64 %217, i64* %235
  %236 = add i64 %232, 16
  %237 = inttoptr i64 %236 to i64*
  store i64 %220, i64* %237
  %238 = add i64 %232, 24
  %239 = inttoptr i64 %238 to i32*
  store i32 %223, i32* %239
  %240 = add i64 %232, 32
  %241 = inttoptr i64 %240 to i32*
  store i32 %227, i32* %241
  %242 = add i64 %232, 40
  %243 = inttoptr i64 %242 to i64*
  store i64 %231, i64* %243
  %244 = add i64 %332, 1891
  %245 = add i64 %332, 97
  %246 = add i64 %232, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %245, i64* %247
  store i64 %246, i64* %14, align 8, !tbaa !1240
  %248 = tail call %struct.Memory* @sub_402270_sparse(%struct.State* nonnull %0, i64 %244, %struct.Memory* %313)
  %249 = load i64, i64* %14, align 8
  %250 = add i64 %249, 304
  %251 = icmp ugt i64 %249, -305
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %40, align 1, !tbaa !1246
  %253 = trunc i64 %250 to i32
  %254 = and i32 %253, 255
  %255 = tail call i32 @llvm.ctpop.i32(i32 %254) #11
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  store i8 %258, i8* %41, align 1, !tbaa !1260
  %259 = xor i64 %249, 16
  %260 = xor i64 %259, %250
  %261 = lshr i64 %260, 4
  %262 = trunc i64 %261 to i8
  %263 = and i8 %262, 1
  store i8 %263, i8* %42, align 1, !tbaa !1261
  %264 = icmp eq i64 %250, 0
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %43, align 1, !tbaa !1262
  %266 = lshr i64 %250, 63
  %267 = trunc i64 %266 to i8
  store i8 %267, i8* %44, align 1, !tbaa !1263
  %268 = lshr i64 %249, 63
  %269 = xor i64 %266, %268
  %270 = add nuw nsw i64 %269, %266
  %271 = icmp eq i64 %270, 2
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %45, align 1, !tbaa !1264
  %273 = add i64 %249, 312
  %274 = inttoptr i64 %250 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %10, align 8, !tbaa !1240
  %276 = add i64 %249, 320
  %277 = inttoptr i64 %273 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %19, align 8, !tbaa !1240
  %279 = add i64 %249, 328
  %280 = inttoptr i64 %276 to i64*
  %281 = load i64, i64* %280
  store i64 %281, i64* %20, align 8, !tbaa !1240
  %282 = add i64 %249, 336
  %283 = inttoptr i64 %279 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %21, align 8, !tbaa !1240
  %285 = add i64 %249, 344
  %286 = inttoptr i64 %282 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %15, align 8, !tbaa !1240
  %288 = inttoptr i64 %285 to i64*
  %289 = load i64, i64* %288
  store i64 %289, i64* %3, align 8, !tbaa !1240
  %290 = add i64 %249, 352
  store i64 %290, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %248

block_401a0c:                                     ; preds = %block_401a0c, %block_401990
  %291 = phi %struct.Memory* [ %2, %block_401990 ], [ %291, %block_401a0c ]
  %292 = inttoptr i64 %89 to i32*
  %293 = load i32, i32* %292
  %294 = shl i32 %293, 1
  %295 = inttoptr i64 %89 to i32*
  store i32 %294, i32* %295
  %296 = inttoptr i64 %89 to i32*
  %297 = load i32, i32* %296
  %298 = inttoptr i64 %71 to i32*
  %299 = load i32, i32* %298
  %300 = sub i32 %297, %299
  %301 = lshr i32 %300, 31
  %302 = trunc i32 %301 to i8
  %303 = lshr i32 %297, 31
  %304 = lshr i32 %299, 31
  %305 = xor i32 %304, %303
  %306 = xor i32 %301, %303
  %307 = add nuw nsw i32 %306, %305
  %308 = icmp eq i32 %307, 2
  %309 = icmp ne i8 %302, 0
  %310 = xor i1 %309, %308
  br i1 %310, label %block_401a0c, label %block_401a21

block_401a28:                                     ; preds = %block_401a21, %block_401afa
  %311 = phi i64 [ %374, %block_401a21 ], [ %110, %block_401afa ]
  %312 = phi i64 [ %70, %block_401a21 ], [ %170, %block_401afa ]
  %313 = phi %struct.Memory* [ %291, %block_401a21 ], [ %112, %block_401afa ]
  %314 = add i64 %312, -72
  %315 = inttoptr i64 %314 to i32*
  %316 = load i32, i32* %315
  %317 = add i64 %312, -36
  %318 = inttoptr i64 %317 to i32*
  %319 = load i32, i32* %318
  %320 = sub i32 %316, %319
  %321 = lshr i32 %320, 31
  %322 = trunc i32 %321 to i8
  %323 = lshr i32 %316, 31
  %324 = lshr i32 %319, 31
  %325 = xor i32 %324, %323
  %326 = xor i32 %321, %323
  %327 = add nuw nsw i32 %326, %325
  %328 = icmp eq i32 %327, 2
  %329 = icmp ne i8 %322, 0
  %330 = xor i1 %329, %328
  %331 = select i1 %330, i64 12, i64 229
  %332 = add i64 %311, %331
  br i1 %330, label %block_401a34, label %block_401b0d

block_401aa3:                                     ; preds = %block_401a97
  %333 = sext i32 %114 to i64
  %334 = shl nsw i64 %333, 2
  %335 = add i64 %188, %334
  %336 = inttoptr i64 %335 to i32*
  %337 = load i32, i32* %336
  %338 = add i32 %337, -1
  %339 = inttoptr i64 %189 to i64*
  %340 = load i64, i64* %339
  %341 = inttoptr i64 %178 to i32*
  %342 = load i32, i32* %341
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, 48
  %345 = add i64 %344, %340
  %346 = add i64 %334, %345
  %347 = inttoptr i64 %346 to i32*
  store i32 %338, i32* %347
  %348 = inttoptr i64 %185 to i32*
  %349 = load i32, i32* %348
  %350 = sext i32 %349 to i64
  %351 = shl nsw i64 %350, 3
  %352 = add i64 %190, %351
  %353 = inttoptr i64 %352 to double*
  %354 = load double, double* %353
  store double %354, double* %376, align 1, !tbaa !1244
  store double 0.000000e+00, double* %378, align 1, !tbaa !1244
  %355 = inttoptr i64 %191 to i64*
  %356 = load i64, i64* %355
  %357 = inttoptr i64 %178 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  %360 = mul nsw i64 %359, 96
  %361 = add i64 %360, %356
  %362 = add i64 %351, %361
  %363 = inttoptr i64 %362 to double*
  store double %354, double* %363
  %364 = inttoptr i64 %185 to i32*
  %365 = load i32, i32* %364
  %366 = add i32 %365, 1
  %367 = inttoptr i64 %185 to i32*
  store i32 %366, i32* %367
  %368 = add i64 %128, -12
  br label %block_401a97

block_401a21:                                     ; preds = %block_401a0c
  %369 = add i64 %1, 145
  %370 = select i1 %310, i64 %104, i64 %369
  %371 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %373 = add i64 %70, -72
  %374 = add i64 %370, 7
  %375 = inttoptr i64 %373 to i32*
  store i32 0, i32* %375
  %376 = bitcast [32 x %union.VectorReg]* %22 to double*
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %378 = bitcast i64* %377 to double*
  br label %block_401a28
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005b0(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4005b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605000__got_plt_type* @seg_605000__got_plt to i64), i64 8) to i64*)
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8
  store i64 %7, i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605000__got_plt_type* @seg_605000__got_plt to i64), i64 16) to i64*)
  store i64 %9, i64* %3, align 8, !tbaa !1240
  %10 = icmp eq i64 %9, 4195772
  br i1 %10, label %block_4005bc, label %12

block_4005bc:                                     ; preds = %block_4005b0
  store i64 4195776, i64* %3, align 8
  %11 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 4195776, %struct.Memory* %2)
  ret %struct.Memory* %11

; <label>:12:                                     ; preds = %block_4005b0
  %13 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %9, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400bb0_timer_read(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400bb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -12
  %15 = load i32, i32* %5, align 4
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %6, align 8, !tbaa !1240
  %20 = shl nsw i64 %19, 3
  %21 = add i64 %20, add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 16)
  %22 = inttoptr i64 %21 to double*
  %23 = load double, double* %22
  %24 = bitcast %union.VectorReg* %9 to double*
  store double %23, double* %24, align 1, !tbaa !1244
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast i64* %25 to double*
  store double 0.000000e+00, double* %26, align 1, !tbaa !1244
  %27 = inttoptr i64 %12 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %8, align 8, !tbaa !1240
  %29 = inttoptr i64 %11 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %3, align 8, !tbaa !1240
  %31 = add i64 %11, 8
  store i64 %31, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400598__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400598:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_604ff0__got_type* @seg_604ff0__got to i64), i64 8) to i64*)
  store i64 %14, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %8, align 1, !tbaa !1246
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %9, align 1, !tbaa !1260
  %21 = icmp eq i64 %14, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %11, align 1, !tbaa !1262
  %23 = lshr i64 %14, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %12, align 1, !tbaa !1263
  store i8 0, i8* %13, align 1, !tbaa !1264
  store i8 0, i8* %10, align 1, !tbaa !1261
  %25 = select i1 %21, i64 18, i64 16
  %26 = add i64 %25, %1
  br i1 %21, label %block_4005aa, label %block_4005a8

block_4005aa:                                     ; preds = %block_4005a8, %block_400598
  %27 = phi i64 [ %7, %block_400598 ], [ %58, %block_4005a8 ]
  %28 = phi %struct.Memory* [ %2, %block_400598 ], [ %57, %block_4005a8 ]
  %29 = add i64 %27, 8
  %30 = icmp ugt i64 %27, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %8, align 1, !tbaa !1246
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #11
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %9, align 1, !tbaa !1260
  %38 = xor i64 %29, %27
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %10, align 1, !tbaa !1261
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %11, align 1, !tbaa !1262
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %12, align 1, !tbaa !1263
  %46 = lshr i64 %27, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %13, align 1, !tbaa !1264
  %51 = inttoptr i64 %29 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %3, align 8, !tbaa !1240
  %53 = add i64 %27, 16
  store i64 %53, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %28

block_4005a8:                                     ; preds = %block_400598
  %54 = add i64 %26, 2
  %55 = add i64 %6, -16
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  store i64 %55, i64* %5, align 8, !tbaa !1240
  store i64 %14, i64* %3, align 8, !tbaa !1240
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %14, %struct.Memory* %2)
  %58 = load i64, i64* %5, align 8
  br label %block_4005aa
}

; Function Attrs: noinline
define %struct.Memory* @sub_400740_c_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400740:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = load i64, i64* %18, align 8
  %28 = load i64, i64* %17, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %18, align 8, !tbaa !1240
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %28, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %23, align 8
  %35 = add i64 %28, -24
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %22, align 8
  %38 = add i64 %28, -32
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = load i64, i64* %21, align 8
  %41 = add i64 %28, -40
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = load i64, i64* %14, align 8
  %44 = add i64 %28, -48
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  %46 = add i64 %28, -312
  store i64 %46, i64* %17, align 8, !tbaa !1240
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = load i8, i8* %5, align 1
  %54 = add i64 %28, 80
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %19, align 8, !tbaa !1240
  %57 = add i64 %28, 72
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %20, align 8, !tbaa !1240
  %60 = add i64 %28, 64
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %14, align 8, !tbaa !1240
  %63 = add i64 %28, 56
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %23, align 8, !tbaa !1240
  %66 = add i64 %28, 48
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %24, align 8, !tbaa !1240
  %69 = add i64 %28, 40
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %21, align 8, !tbaa !1240
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %72, 40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %22, align 8, !tbaa !1240
  %76 = add i64 %72, 32
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %72, -97
  %80 = inttoptr i64 %79 to i8*
  store i8 %53, i8* %80
  %81 = add i64 %72, 24
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i64 %72, -112
  %85 = inttoptr i64 %84 to i64*
  store i64 %78, i64* %85
  %86 = add i64 %72, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %72, -120
  %90 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %90
  %91 = add i64 %72, -48
  %92 = load i64, i64* %16, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %93
  %94 = inttoptr i64 %79 to i8*
  %95 = load i8, i8* %94
  %96 = add i64 %72, -49
  %97 = inttoptr i64 %96 to i8*
  store i8 %95, i8* %97
  %98 = add i64 %72, -56
  %99 = load i32, i32* %9, align 4
  %100 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %72, -60
  %102 = load i32, i32* %7, align 4
  %103 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %103
  %104 = add i64 %72, -64
  %105 = load i32, i32* %11, align 4
  %106 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %72, -68
  %108 = load i32, i32* %13, align 4
  %109 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %109
  %110 = add i64 %72, -80
  %111 = bitcast [32 x %union.VectorReg]* %25 to double*
  %112 = load double, double* %111, align 1
  %113 = inttoptr i64 %110 to double*
  store double %112, double* %113
  %114 = add i64 %72, -88
  %115 = bitcast %union.VectorReg* %26 to double*
  %116 = load double, double* %115, align 1
  %117 = inttoptr i64 %114 to double*
  store double %116, double* %117
  %118 = inttoptr i64 %91 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %72, -128
  %121 = inttoptr i64 %120 to i64*
  store i64 %119, i64* %121
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %72, -132
  %125 = inttoptr i64 %124 to i32*
  store i32 %83, i32* %125
  %126 = add i64 %72, -144
  %127 = load i64, i64* %20, align 8
  %128 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %128
  %129 = add i64 %72, -152
  %130 = load i64, i64* %14, align 8
  %131 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %131
  %132 = add i64 %72, -160
  %133 = load i64, i64* %23, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %134
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, -168
  %137 = load i64, i64* %24, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %138
  %139 = add i64 %135, -176
  %140 = load i64, i64* %21, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %141
  %142 = add i64 %135, -184
  %143 = load i64, i64* %22, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %144
  %145 = add i64 %135, -192
  %146 = load i64, i64* %19, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %147
  %148 = add i64 %1, 196
  %149 = load i64, i64* %17, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %158 = load i64, i64* %154, align 8, !alias.scope !1484, !noalias !1487
  %159 = load i64, i64* %153, align 8, !alias.scope !1484, !noalias !1487
  %160 = load i64, i64* %156, align 8, !alias.scope !1484, !noalias !1487
  %161 = load i64, i64* %157, align 8, !alias.scope !1484, !noalias !1487
  %162 = inttoptr i64 %149 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %149, 8
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %149, 16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %149, 24
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %149, 32
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %149, 40
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %149, 48
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %149, 56
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %149, 64
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %149, 72
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %150 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %3, align 8, !alias.scope !1484, !noalias !1487
  store i64 %149, i64* %17, align 8, !alias.scope !1484, !noalias !1487
  %193 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 4), i64 %123, i64 %158, i64 %159, i64 %160, i64 %161, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184, i64 %187, i64 %190), !noalias !1484
  %194 = load i64, i64* %3, align 8
  %195 = load i64, i64* %18, align 8
  %196 = add i64 %195, -49
  %197 = inttoptr i64 %196 to i8*
  %198 = load i8, i8* %197
  %199 = sext i8 %198 to i64
  %200 = and i64 %199, 4294967295
  %201 = add i64 %195, -196
  %202 = trunc i64 %193 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  %204 = add i64 %194, 27
  %205 = load i64, i64* %17, align 8, !tbaa !1240
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207
  %208 = load i64, i64* %154, align 8, !alias.scope !1489, !noalias !1492
  %209 = load i64, i64* %153, align 8, !alias.scope !1489, !noalias !1492
  %210 = load i64, i64* %156, align 8, !alias.scope !1489, !noalias !1492
  %211 = load i64, i64* %157, align 8, !alias.scope !1489, !noalias !1492
  %212 = inttoptr i64 %205 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %205, 8
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %205, 16
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %205, 24
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %205, 32
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %205, 40
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %205, 48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %205, 56
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %205, 64
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %205, 72
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = inttoptr i64 %206 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %3, align 8, !alias.scope !1489, !noalias !1492
  store i64 %205, i64* %17, align 8, !alias.scope !1489, !noalias !1492
  %243 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 31), i64 %200, i64 %208, i64 %209, i64 %210, i64 %211, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237, i64 %240), !noalias !1489
  %244 = load i64, i64* %18, align 8
  %245 = add i64 %244, -64
  %246 = load i64, i64* %3, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247
  %249 = icmp eq i32 %248, 0
  %250 = add i64 %244, -200
  %251 = trunc i64 %243 to i32
  %252 = inttoptr i64 %250 to i32*
  store i32 %251, i32* %252
  %253 = select i1 %249, i64 16, i64 79
  %254 = add i64 %246, %253
  br i1 %249, label %block_40082f, label %block_40086e

block_40082f:                                     ; preds = %block_400740
  %255 = add i64 %244, -56
  %256 = inttoptr i64 %255 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = add i64 %244, -96
  %260 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %260
  %261 = add i64 %244, -60
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i64 31, i64 18
  %266 = add i64 %254, %265
  br i1 %264, label %block_40084e, label %block_400841

block_40092b:                                     ; preds = %block_400921
  %267 = add i64 %472, 17
  %268 = load i64, i64* %17, align 8, !tbaa !1240
  %269 = add i64 %268, -8
  %270 = inttoptr i64 %269 to i64*
  store i64 %267, i64* %270
  %271 = load i64, i64* %155, align 8, !alias.scope !1494, !noalias !1497
  %272 = load i64, i64* %154, align 8, !alias.scope !1494, !noalias !1497
  %273 = load i64, i64* %153, align 8, !alias.scope !1494, !noalias !1497
  %274 = load i64, i64* %156, align 8, !alias.scope !1494, !noalias !1497
  %275 = load i64, i64* %157, align 8, !alias.scope !1494, !noalias !1497
  %276 = inttoptr i64 %268 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %268, 8
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %268, 16
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = add i64 %268, 24
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %268, 32
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %268, 40
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = add i64 %268, 48
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %268, 56
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %268, 64
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %268, 72
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = inttoptr i64 %269 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %3, align 8, !alias.scope !1494, !noalias !1497
  store i64 %268, i64* %17, align 8, !alias.scope !1494, !noalias !1497
  %307 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 344), i64 %271, i64 %272, i64 %273, i64 %274, i64 %275, i64 %277, i64 %280, i64 %283, i64 %286, i64 %289, i64 %292, i64 %295, i64 %298, i64 %301, i64 %304), !noalias !1494
  %308 = load i64, i64* %18, align 8
  %309 = add i64 %308, -232
  %310 = trunc i64 %307 to i32
  %311 = load i64, i64* %3, align 8
  %312 = inttoptr i64 %309 to i32*
  store i32 %310, i32* %312
  %313 = add i64 %311, 34
  br label %block_400963

block_40084e:                                     ; preds = %block_400841, %block_40082f
  %314 = phi i64 [ %266, %block_40082f ], [ %1493, %block_400841 ]
  %315 = phi %struct.Memory* [ %2, %block_40082f ], [ %2, %block_400841 ]
  %316 = inttoptr i64 %259 to i64*
  %317 = load i64, i64* %316
  %318 = add i64 %314, 21
  %319 = load i64, i64* %17, align 8, !tbaa !1240
  %320 = add i64 %319, -8
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321
  %322 = load i64, i64* %154, align 8, !alias.scope !1499, !noalias !1502
  %323 = load i64, i64* %153, align 8, !alias.scope !1499, !noalias !1502
  %324 = load i64, i64* %156, align 8, !alias.scope !1499, !noalias !1502
  %325 = load i64, i64* %157, align 8, !alias.scope !1499, !noalias !1502
  %326 = inttoptr i64 %319 to i64*
  %327 = load i64, i64* %326
  %328 = add i64 %319, 8
  %329 = inttoptr i64 %328 to i64*
  %330 = load i64, i64* %329
  %331 = add i64 %319, 16
  %332 = inttoptr i64 %331 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %319, 24
  %335 = inttoptr i64 %334 to i64*
  %336 = load i64, i64* %335
  %337 = add i64 %319, 32
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338
  %340 = add i64 %319, 40
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %319, 48
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %319, 56
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %319, 64
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %319, 72
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = inttoptr i64 %320 to i64*
  %356 = load i64, i64* %355
  store i64 %356, i64* %3, align 8, !alias.scope !1499, !noalias !1502
  store i64 %319, i64* %17, align 8, !alias.scope !1499, !noalias !1502
  %357 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 77), i64 %317, i64 %322, i64 %323, i64 %324, i64 %325, i64 %327, i64 %330, i64 %333, i64 %336, i64 %339, i64 %342, i64 %345, i64 %348, i64 %351, i64 %354), !noalias !1499
  %358 = load i64, i64* %18, align 8
  %359 = add i64 %358, -204
  %360 = trunc i64 %357 to i32
  %361 = load i64, i64* %3, align 8
  %362 = inttoptr i64 %359 to i32*
  store i32 %360, i32* %362
  %363 = add i64 %361, 43
  br label %block_40088e

block_40086e:                                     ; preds = %block_400740
  %364 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %365 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %366 = add i64 %244, -56
  %367 = inttoptr i64 %366 to i32*
  %368 = load i32, i32* %367
  %369 = zext i32 %368 to i64
  %370 = add i64 %244, -60
  %371 = inttoptr i64 %370 to i32*
  %372 = load i32, i32* %371
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %364, align 8, !tbaa !1240
  %374 = inttoptr i64 %245 to i32*
  %375 = load i32, i32* %374
  %376 = zext i32 %375 to i64
  store i64 %376, i64* %365, align 8, !tbaa !1240
  %377 = add i64 %254, 26
  %378 = load i64, i64* %17, align 8, !tbaa !1240
  %379 = add i64 %378, -8
  %380 = inttoptr i64 %379 to i64*
  store i64 %377, i64* %380
  %381 = load i64, i64* %156, align 8, !alias.scope !1504, !noalias !1507
  %382 = load i64, i64* %157, align 8, !alias.scope !1504, !noalias !1507
  %383 = inttoptr i64 %378 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %378, 8
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %378, 16
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %378, 24
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %378, 32
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %378, 40
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %378, 48
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %378, 56
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %378, 64
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %378, 72
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = inttoptr i64 %379 to i64*
  %413 = load i64, i64* %412
  store i64 %413, i64* %3, align 8, !alias.scope !1504, !noalias !1507
  store i64 %378, i64* %17, align 8, !alias.scope !1504, !noalias !1507
  %414 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 115), i64 %369, i64 %373, i64 %376, i64 %381, i64 %382, i64 %384, i64 %387, i64 %390, i64 %393, i64 %396, i64 %399, i64 %402, i64 %405, i64 %408, i64 %411), !noalias !1504
  %415 = load i64, i64* %18, align 8
  %416 = add i64 %415, -208
  %417 = trunc i64 %414 to i32
  %418 = load i64, i64* %3, align 8
  %419 = add i64 %418, 6
  %420 = inttoptr i64 %416 to i32*
  store i32 %417, i32* %420
  br label %block_40088e

block_400947:                                     ; preds = %block_400921
  %421 = add i64 %472, 17
  %422 = load i64, i64* %17, align 8, !tbaa !1240
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %421, i64* %424
  %425 = load i64, i64* %155, align 8, !alias.scope !1509, !noalias !1512
  %426 = load i64, i64* %154, align 8, !alias.scope !1509, !noalias !1512
  %427 = load i64, i64* %153, align 8, !alias.scope !1509, !noalias !1512
  %428 = load i64, i64* %156, align 8, !alias.scope !1509, !noalias !1512
  %429 = load i64, i64* %157, align 8, !alias.scope !1509, !noalias !1512
  %430 = inttoptr i64 %422 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %422, 8
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %422, 16
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %422, 24
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %422, 32
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %422, 40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %422, 48
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %422, 56
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %422, 64
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %422, 72
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %423 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !1509, !noalias !1512
  store i64 %422, i64* %17, align 8, !alias.scope !1509, !noalias !1512
  %461 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 389), i64 %425, i64 %426, i64 %427, i64 %428, i64 %429, i64 %431, i64 %434, i64 %437, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458), !noalias !1509
  %462 = load i64, i64* %18, align 8
  %463 = add i64 %462, -236
  %464 = trunc i64 %461 to i32
  %465 = load i64, i64* %3, align 8
  %466 = add i64 %465, 6
  %467 = inttoptr i64 %463 to i32*
  store i32 %464, i32* %467
  br label %block_400963

block_400921:                                     ; preds = %block_40088e
  %468 = inttoptr i64 %669 to i32*
  %469 = load i32, i32* %468
  %470 = icmp eq i32 %469, 0
  %471 = select i1 %470, i64 38, i64 10
  %472 = add i64 %680, %471
  br i1 %470, label %block_400947, label %block_40092b

block_40088e:                                     ; preds = %block_40086e, %block_40084e
  %473 = phi i64 [ %415, %block_40086e ], [ %358, %block_40084e ]
  %474 = phi i64 [ %419, %block_40086e ], [ %363, %block_40084e ]
  %475 = phi %struct.Memory* [ %2, %block_40086e ], [ %315, %block_40084e ]
  %476 = add i64 %473, -68
  %477 = inttoptr i64 %476 to i32*
  %478 = load i32, i32* %477
  %479 = zext i32 %478 to i64
  store i64 %479, i64* %15, align 8, !tbaa !1240
  %480 = add i64 %474, 20
  %481 = load i64, i64* %17, align 8, !tbaa !1240
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %480, i64* %483
  %484 = load i64, i64* %154, align 8, !alias.scope !1514, !noalias !1517
  %485 = load i64, i64* %153, align 8, !alias.scope !1514, !noalias !1517
  %486 = load i64, i64* %156, align 8, !alias.scope !1514, !noalias !1517
  %487 = load i64, i64* %157, align 8, !alias.scope !1514, !noalias !1517
  %488 = inttoptr i64 %481 to i64*
  %489 = load i64, i64* %488
  %490 = add i64 %481, 8
  %491 = inttoptr i64 %490 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %481, 16
  %494 = inttoptr i64 %493 to i64*
  %495 = load i64, i64* %494
  %496 = add i64 %481, 24
  %497 = inttoptr i64 %496 to i64*
  %498 = load i64, i64* %497
  %499 = add i64 %481, 32
  %500 = inttoptr i64 %499 to i64*
  %501 = load i64, i64* %500
  %502 = add i64 %481, 40
  %503 = inttoptr i64 %502 to i64*
  %504 = load i64, i64* %503
  %505 = add i64 %481, 48
  %506 = inttoptr i64 %505 to i64*
  %507 = load i64, i64* %506
  %508 = add i64 %481, 56
  %509 = inttoptr i64 %508 to i64*
  %510 = load i64, i64* %509
  %511 = add i64 %481, 64
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %481, 72
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  %517 = inttoptr i64 %482 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %3, align 8, !alias.scope !1514, !noalias !1517
  store i64 %481, i64* %17, align 8, !alias.scope !1514, !noalias !1517
  %519 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 159), i64 %479, i64 %484, i64 %485, i64 %486, i64 %487, i64 %489, i64 %492, i64 %495, i64 %498, i64 %501, i64 %504, i64 %507, i64 %510, i64 %513, i64 %516), !noalias !1514
  %520 = load i64, i64* %3, align 8
  %521 = load i64, i64* %18, align 8
  %522 = add i64 %521, -80
  %523 = inttoptr i64 %522 to double*
  %524 = load double, double* %523
  store double %524, double* %111, align 1, !tbaa !1244
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %526 = bitcast i64* %525 to double*
  store double 0.000000e+00, double* %526, align 1, !tbaa !1244
  %527 = add i64 %521, -212
  %528 = trunc i64 %519 to i32
  %529 = inttoptr i64 %527 to i32*
  store i32 %528, i32* %529
  %530 = add i64 %520, 28
  %531 = load i64, i64* %17, align 8, !tbaa !1240
  %532 = add i64 %531, -8
  %533 = inttoptr i64 %532 to i64*
  store i64 %530, i64* %533
  %534 = load i64, i64* %155, align 8, !alias.scope !1519, !noalias !1522
  %535 = load i64, i64* %154, align 8, !alias.scope !1519, !noalias !1522
  %536 = load i64, i64* %153, align 8, !alias.scope !1519, !noalias !1522
  %537 = load i64, i64* %156, align 8, !alias.scope !1519, !noalias !1522
  %538 = load i64, i64* %157, align 8, !alias.scope !1519, !noalias !1522
  %539 = inttoptr i64 %531 to i64*
  %540 = load i64, i64* %539
  %541 = add i64 %531, 8
  %542 = inttoptr i64 %541 to i64*
  %543 = load i64, i64* %542
  %544 = add i64 %531, 16
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  %547 = add i64 %531, 24
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  %550 = add i64 %531, 32
  %551 = inttoptr i64 %550 to i64*
  %552 = load i64, i64* %551
  %553 = add i64 %531, 40
  %554 = inttoptr i64 %553 to i64*
  %555 = load i64, i64* %554
  %556 = add i64 %531, 48
  %557 = inttoptr i64 %556 to i64*
  %558 = load i64, i64* %557
  %559 = add i64 %531, 56
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560
  %562 = add i64 %531, 64
  %563 = inttoptr i64 %562 to i64*
  %564 = load i64, i64* %563
  %565 = add i64 %531, 72
  %566 = inttoptr i64 %565 to i64*
  %567 = load i64, i64* %566
  %568 = inttoptr i64 %532 to i64*
  %569 = load i64, i64* %568
  store i64 %569, i64* %3, align 8, !alias.scope !1519, !noalias !1522
  store i64 %531, i64* %17, align 8, !alias.scope !1519, !noalias !1522
  %570 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 196), i64 %534, i64 %535, i64 %536, i64 %537, i64 %538, i64 %540, i64 %543, i64 %546, i64 %549, i64 %552, i64 %555, i64 %558, i64 %561, i64 %564, i64 %567), !noalias !1519
  %571 = load i64, i64* %3, align 8
  %572 = load i64, i64* %18, align 8
  %573 = add i64 %572, -88
  %574 = inttoptr i64 %573 to double*
  %575 = load double, double* %574
  store double %575, double* %111, align 1, !tbaa !1244
  store double 0.000000e+00, double* %526, align 1, !tbaa !1244
  %576 = add i64 %572, -216
  %577 = trunc i64 %570 to i32
  %578 = inttoptr i64 %576 to i32*
  store i32 %577, i32* %578
  %579 = add i64 %571, 28
  %580 = load i64, i64* %17, align 8, !tbaa !1240
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %579, i64* %582
  %583 = load i64, i64* %155, align 8, !alias.scope !1524, !noalias !1527
  %584 = load i64, i64* %154, align 8, !alias.scope !1524, !noalias !1527
  %585 = load i64, i64* %153, align 8, !alias.scope !1524, !noalias !1527
  %586 = load i64, i64* %156, align 8, !alias.scope !1524, !noalias !1527
  %587 = load i64, i64* %157, align 8, !alias.scope !1524, !noalias !1527
  %588 = inttoptr i64 %580 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %580, 8
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %580, 16
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %580, 24
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %580, 32
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %580, 40
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = add i64 %580, 48
  %606 = inttoptr i64 %605 to i64*
  %607 = load i64, i64* %606
  %608 = add i64 %580, 56
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %580, 64
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %580, 72
  %615 = inttoptr i64 %614 to i64*
  %616 = load i64, i64* %615
  %617 = inttoptr i64 %581 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %3, align 8, !alias.scope !1524, !noalias !1527
  store i64 %580, i64* %17, align 8, !alias.scope !1524, !noalias !1527
  %619 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 235), i64 %583, i64 %584, i64 %585, i64 %586, i64 %587, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601, i64 %604, i64 %607, i64 %610, i64 %613, i64 %616), !noalias !1524
  %620 = load i64, i64* %3, align 8
  %621 = load i64, i64* %18, align 8
  %622 = add i64 %621, 16
  %623 = inttoptr i64 %622 to i64*
  %624 = load i64, i64* %623
  store i64 %624, i64* %15, align 8, !tbaa !1240
  %625 = add i64 %621, -220
  %626 = trunc i64 %619 to i32
  %627 = inttoptr i64 %625 to i32*
  store i32 %626, i32* %627
  %628 = add i64 %620, 27
  %629 = load i64, i64* %17, align 8, !tbaa !1240
  %630 = add i64 %629, -8
  %631 = inttoptr i64 %630 to i64*
  store i64 %628, i64* %631
  %632 = load i64, i64* %154, align 8, !alias.scope !1529, !noalias !1532
  %633 = load i64, i64* %153, align 8, !alias.scope !1529, !noalias !1532
  %634 = load i64, i64* %156, align 8, !alias.scope !1529, !noalias !1532
  %635 = load i64, i64* %157, align 8, !alias.scope !1529, !noalias !1532
  %636 = inttoptr i64 %629 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %629, 8
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %629, 16
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %629, 24
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %629, 32
  %648 = inttoptr i64 %647 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %629, 40
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = add i64 %629, 48
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %629, 56
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %629, 64
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %629, 72
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = inttoptr i64 %630 to i64*
  %666 = load i64, i64* %665
  store i64 %666, i64* %3, align 8, !alias.scope !1529, !noalias !1532
  store i64 %629, i64* %17, align 8, !alias.scope !1529, !noalias !1532
  %667 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 274), i64 %624, i64 %632, i64 %633, i64 %634, i64 %635, i64 %637, i64 %640, i64 %643, i64 %646, i64 %649, i64 %652, i64 %655, i64 %658, i64 %661, i64 %664), !noalias !1529
  %668 = load i64, i64* %18, align 8
  %669 = add i64 %668, 24
  %670 = load i64, i64* %3, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671
  %673 = lshr i32 %672, 31
  %674 = trunc i32 %673 to i8
  %675 = add i64 %668, -224
  %676 = trunc i64 %667 to i32
  %677 = inttoptr i64 %675 to i32*
  store i32 %676, i32* %677
  %678 = icmp ne i8 %674, 0
  %679 = select i1 %678, i64 16, i64 44
  %680 = add i64 %670, %679
  br i1 %678, label %block_400905, label %block_400921

block_400905:                                     ; preds = %block_40088e
  %681 = add i64 %680, 17
  %682 = load i64, i64* %17, align 8, !tbaa !1240
  %683 = add i64 %682, -8
  %684 = inttoptr i64 %683 to i64*
  store i64 %681, i64* %684
  %685 = load i64, i64* %155, align 8, !alias.scope !1534, !noalias !1537
  %686 = load i64, i64* %154, align 8, !alias.scope !1534, !noalias !1537
  %687 = load i64, i64* %153, align 8, !alias.scope !1534, !noalias !1537
  %688 = load i64, i64* %156, align 8, !alias.scope !1534, !noalias !1537
  %689 = load i64, i64* %157, align 8, !alias.scope !1534, !noalias !1537
  %690 = inttoptr i64 %682 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %682, 8
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %682, 16
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %682, 24
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %682, 32
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %682, 40
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %682, 48
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %682, 56
  %711 = inttoptr i64 %710 to i64*
  %712 = load i64, i64* %711
  %713 = add i64 %682, 64
  %714 = inttoptr i64 %713 to i64*
  %715 = load i64, i64* %714
  %716 = add i64 %682, 72
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = inttoptr i64 %683 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %3, align 8, !alias.scope !1534, !noalias !1537
  store i64 %682, i64* %17, align 8, !alias.scope !1534, !noalias !1537
  %721 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 299), i64 %685, i64 %686, i64 %687, i64 %688, i64 %689, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709, i64 %712, i64 %715, i64 %718), !noalias !1534
  %722 = load i64, i64* %18, align 8
  %723 = add i64 %722, -228
  %724 = trunc i64 %721 to i32
  %725 = load i64, i64* %3, align 8
  %726 = add i64 %725, 6
  %727 = inttoptr i64 %723 to i32*
  store i32 %724, i32* %727
  br label %block_400963

block_400963:                                     ; preds = %block_400905, %block_400947, %block_40092b
  %728 = phi i64 [ %722, %block_400905 ], [ %462, %block_400947 ], [ %308, %block_40092b ]
  %729 = phi i64 [ %726, %block_400905 ], [ %466, %block_400947 ], [ %313, %block_40092b ]
  %730 = phi i64 [ 71, %block_400905 ], [ 5, %block_400947 ], [ 5, %block_40092b ]
  %731 = phi %struct.Memory* [ %475, %block_400905 ], [ %475, %block_400947 ], [ %475, %block_40092b ]
  %732 = add i64 %729, %730
  %733 = add i64 %728, 32
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %732, 21
  %737 = load i64, i64* %17, align 8, !tbaa !1240
  %738 = add i64 %737, -8
  %739 = inttoptr i64 %738 to i64*
  store i64 %736, i64* %739
  %740 = load i64, i64* %154, align 8, !alias.scope !1539, !noalias !1542
  %741 = load i64, i64* %153, align 8, !alias.scope !1539, !noalias !1542
  %742 = load i64, i64* %156, align 8, !alias.scope !1539, !noalias !1542
  %743 = load i64, i64* %157, align 8, !alias.scope !1539, !noalias !1542
  %744 = inttoptr i64 %737 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %737, 8
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %737, 16
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = add i64 %737, 24
  %753 = inttoptr i64 %752 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %737, 32
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  %758 = add i64 %737, 40
  %759 = inttoptr i64 %758 to i64*
  %760 = load i64, i64* %759
  %761 = add i64 %737, 48
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  %764 = add i64 %737, 56
  %765 = inttoptr i64 %764 to i64*
  %766 = load i64, i64* %765
  %767 = add i64 %737, 64
  %768 = inttoptr i64 %767 to i64*
  %769 = load i64, i64* %768
  %770 = add i64 %737, 72
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = inttoptr i64 %738 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %3, align 8, !alias.scope !1539, !noalias !1542
  store i64 %737, i64* %17, align 8, !alias.scope !1539, !noalias !1542
  %775 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 434), i64 %735, i64 %740, i64 %741, i64 %742, i64 %743, i64 %745, i64 %748, i64 %751, i64 %754, i64 %757, i64 %760, i64 %763, i64 %766, i64 %769, i64 %772), !noalias !1539
  %776 = load i64, i64* %3, align 8
  %777 = load i64, i64* %18, align 8
  %778 = add i64 %777, 40
  %779 = inttoptr i64 %778 to i64*
  %780 = load i64, i64* %779
  store i64 %780, i64* %15, align 8, !tbaa !1240
  %781 = add i64 %777, -240
  %782 = trunc i64 %775 to i32
  %783 = inttoptr i64 %781 to i32*
  store i32 %782, i32* %783
  %784 = add i64 %776, 27
  %785 = load i64, i64* %17, align 8, !tbaa !1240
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %784, i64* %787
  %788 = load i64, i64* %154, align 8, !alias.scope !1544, !noalias !1547
  %789 = load i64, i64* %153, align 8, !alias.scope !1544, !noalias !1547
  %790 = load i64, i64* %156, align 8, !alias.scope !1544, !noalias !1547
  %791 = load i64, i64* %157, align 8, !alias.scope !1544, !noalias !1547
  %792 = inttoptr i64 %785 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %785, 8
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = add i64 %785, 16
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = add i64 %785, 24
  %801 = inttoptr i64 %800 to i64*
  %802 = load i64, i64* %801
  %803 = add i64 %785, 32
  %804 = inttoptr i64 %803 to i64*
  %805 = load i64, i64* %804
  %806 = add i64 %785, 40
  %807 = inttoptr i64 %806 to i64*
  %808 = load i64, i64* %807
  %809 = add i64 %785, 48
  %810 = inttoptr i64 %809 to i64*
  %811 = load i64, i64* %810
  %812 = add i64 %785, 56
  %813 = inttoptr i64 %812 to i64*
  %814 = load i64, i64* %813
  %815 = add i64 %785, 64
  %816 = inttoptr i64 %815 to i64*
  %817 = load i64, i64* %816
  %818 = add i64 %785, 72
  %819 = inttoptr i64 %818 to i64*
  %820 = load i64, i64* %819
  %821 = inttoptr i64 %786 to i64*
  %822 = load i64, i64* %821
  store i64 %822, i64* %3, align 8, !alias.scope !1544, !noalias !1547
  store i64 %785, i64* %17, align 8, !alias.scope !1544, !noalias !1547
  %823 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 471), i64 %780, i64 %788, i64 %789, i64 %790, i64 %791, i64 %793, i64 %796, i64 %799, i64 %802, i64 %805, i64 %808, i64 %811, i64 %814, i64 %817, i64 %820), !noalias !1544
  %824 = load i64, i64* %3, align 8
  %825 = load i64, i64* %18, align 8
  %826 = add i64 %825, -244
  %827 = trunc i64 %823 to i32
  %828 = inttoptr i64 %826 to i32*
  store i32 %827, i32* %828
  %829 = add i64 %824, 23
  %830 = load i64, i64* %17, align 8, !tbaa !1240
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %829, i64* %832
  %833 = load i64, i64* %155, align 8, !alias.scope !1549, !noalias !1552
  %834 = load i64, i64* %154, align 8, !alias.scope !1549, !noalias !1552
  %835 = load i64, i64* %153, align 8, !alias.scope !1549, !noalias !1552
  %836 = load i64, i64* %156, align 8, !alias.scope !1549, !noalias !1552
  %837 = load i64, i64* %157, align 8, !alias.scope !1549, !noalias !1552
  %838 = inttoptr i64 %830 to i64*
  %839 = load i64, i64* %838
  %840 = add i64 %830, 8
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  %843 = add i64 %830, 16
  %844 = inttoptr i64 %843 to i64*
  %845 = load i64, i64* %844
  %846 = add i64 %830, 24
  %847 = inttoptr i64 %846 to i64*
  %848 = load i64, i64* %847
  %849 = add i64 %830, 32
  %850 = inttoptr i64 %849 to i64*
  %851 = load i64, i64* %850
  %852 = add i64 %830, 40
  %853 = inttoptr i64 %852 to i64*
  %854 = load i64, i64* %853
  %855 = add i64 %830, 48
  %856 = inttoptr i64 %855 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %830, 56
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %830, 64
  %862 = inttoptr i64 %861 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %830, 72
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = inttoptr i64 %831 to i64*
  %868 = load i64, i64* %867
  store i64 %868, i64* %3, align 8, !alias.scope !1549, !noalias !1552
  store i64 %830, i64* %17, align 8, !alias.scope !1549, !noalias !1552
  %869 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 508), i64 %833, i64 %834, i64 %835, i64 %836, i64 %837, i64 %839, i64 %842, i64 %845, i64 %848, i64 %851, i64 %854, i64 %857, i64 %860, i64 %863, i64 %866), !noalias !1549
  %870 = load i64, i64* %3, align 8
  %871 = load i64, i64* %18, align 8
  %872 = add i64 %871, 48
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %871, -248
  %876 = trunc i64 %869 to i32
  %877 = inttoptr i64 %875 to i32*
  store i32 %876, i32* %877
  %878 = add i64 %870, 27
  %879 = load i64, i64* %17, align 8, !tbaa !1240
  %880 = add i64 %879, -8
  %881 = inttoptr i64 %880 to i64*
  store i64 %878, i64* %881
  %882 = load i64, i64* %154, align 8, !alias.scope !1554, !noalias !1557
  %883 = load i64, i64* %153, align 8, !alias.scope !1554, !noalias !1557
  %884 = load i64, i64* %156, align 8, !alias.scope !1554, !noalias !1557
  %885 = load i64, i64* %157, align 8, !alias.scope !1554, !noalias !1557
  %886 = inttoptr i64 %879 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %879, 8
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %879, 16
  %892 = inttoptr i64 %891 to i64*
  %893 = load i64, i64* %892
  %894 = add i64 %879, 24
  %895 = inttoptr i64 %894 to i64*
  %896 = load i64, i64* %895
  %897 = add i64 %879, 32
  %898 = inttoptr i64 %897 to i64*
  %899 = load i64, i64* %898
  %900 = add i64 %879, 40
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = add i64 %879, 48
  %904 = inttoptr i64 %903 to i64*
  %905 = load i64, i64* %904
  %906 = add i64 %879, 56
  %907 = inttoptr i64 %906 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %879, 64
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %879, 72
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = inttoptr i64 %880 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %3, align 8, !alias.scope !1554, !noalias !1557
  store i64 %879, i64* %17, align 8, !alias.scope !1554, !noalias !1557
  %917 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2028), i64 %874, i64 %882, i64 %883, i64 %884, i64 %885, i64 %887, i64 %890, i64 %893, i64 %896, i64 %899, i64 %902, i64 %905, i64 %908, i64 %911, i64 %914), !noalias !1554
  %918 = load i64, i64* %3, align 8
  %919 = load i64, i64* %18, align 8
  %920 = add i64 %919, 56
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %919, -252
  %924 = trunc i64 %917 to i32
  %925 = inttoptr i64 %923 to i32*
  store i32 %924, i32* %925
  %926 = add i64 %918, 27
  %927 = load i64, i64* %17, align 8, !tbaa !1240
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  store i64 %926, i64* %929
  %930 = load i64, i64* %154, align 8, !alias.scope !1559, !noalias !1562
  %931 = load i64, i64* %153, align 8, !alias.scope !1559, !noalias !1562
  %932 = load i64, i64* %156, align 8, !alias.scope !1559, !noalias !1562
  %933 = load i64, i64* %157, align 8, !alias.scope !1559, !noalias !1562
  %934 = inttoptr i64 %927 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %927, 8
  %937 = inttoptr i64 %936 to i64*
  %938 = load i64, i64* %937
  %939 = add i64 %927, 16
  %940 = inttoptr i64 %939 to i64*
  %941 = load i64, i64* %940
  %942 = add i64 %927, 24
  %943 = inttoptr i64 %942 to i64*
  %944 = load i64, i64* %943
  %945 = add i64 %927, 32
  %946 = inttoptr i64 %945 to i64*
  %947 = load i64, i64* %946
  %948 = add i64 %927, 40
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  %951 = add i64 %927, 48
  %952 = inttoptr i64 %951 to i64*
  %953 = load i64, i64* %952
  %954 = add i64 %927, 56
  %955 = inttoptr i64 %954 to i64*
  %956 = load i64, i64* %955
  %957 = add i64 %927, 64
  %958 = inttoptr i64 %957 to i64*
  %959 = load i64, i64* %958
  %960 = add i64 %927, 72
  %961 = inttoptr i64 %960 to i64*
  %962 = load i64, i64* %961
  %963 = inttoptr i64 %928 to i64*
  %964 = load i64, i64* %963
  store i64 %964, i64* %3, align 8, !alias.scope !1559, !noalias !1562
  store i64 %927, i64* %17, align 8, !alias.scope !1559, !noalias !1562
  %965 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 528), i64 %922, i64 %930, i64 %931, i64 %932, i64 %933, i64 %935, i64 %938, i64 %941, i64 %944, i64 %947, i64 %950, i64 %953, i64 %956, i64 %959, i64 %962), !noalias !1559
  %966 = load i64, i64* %3, align 8
  %967 = load i64, i64* %18, align 8
  %968 = add i64 %967, 64
  %969 = inttoptr i64 %968 to i64*
  %970 = load i64, i64* %969
  %971 = add i64 %967, -256
  %972 = trunc i64 %965 to i32
  %973 = inttoptr i64 %971 to i32*
  store i32 %972, i32* %973
  %974 = add i64 %966, 27
  %975 = load i64, i64* %17, align 8, !tbaa !1240
  %976 = add i64 %975, -8
  %977 = inttoptr i64 %976 to i64*
  store i64 %974, i64* %977
  %978 = load i64, i64* %154, align 8, !alias.scope !1564, !noalias !1567
  %979 = load i64, i64* %153, align 8, !alias.scope !1564, !noalias !1567
  %980 = load i64, i64* %156, align 8, !alias.scope !1564, !noalias !1567
  %981 = load i64, i64* %157, align 8, !alias.scope !1564, !noalias !1567
  %982 = inttoptr i64 %975 to i64*
  %983 = load i64, i64* %982
  %984 = add i64 %975, 8
  %985 = inttoptr i64 %984 to i64*
  %986 = load i64, i64* %985
  %987 = add i64 %975, 16
  %988 = inttoptr i64 %987 to i64*
  %989 = load i64, i64* %988
  %990 = add i64 %975, 24
  %991 = inttoptr i64 %990 to i64*
  %992 = load i64, i64* %991
  %993 = add i64 %975, 32
  %994 = inttoptr i64 %993 to i64*
  %995 = load i64, i64* %994
  %996 = add i64 %975, 40
  %997 = inttoptr i64 %996 to i64*
  %998 = load i64, i64* %997
  %999 = add i64 %975, 48
  %1000 = inttoptr i64 %999 to i64*
  %1001 = load i64, i64* %1000
  %1002 = add i64 %975, 56
  %1003 = inttoptr i64 %1002 to i64*
  %1004 = load i64, i64* %1003
  %1005 = add i64 %975, 64
  %1006 = inttoptr i64 %1005 to i64*
  %1007 = load i64, i64* %1006
  %1008 = add i64 %975, 72
  %1009 = inttoptr i64 %1008 to i64*
  %1010 = load i64, i64* %1009
  %1011 = inttoptr i64 %976 to i64*
  %1012 = load i64, i64* %1011
  store i64 %1012, i64* %3, align 8, !alias.scope !1564, !noalias !1567
  store i64 %975, i64* %17, align 8, !alias.scope !1564, !noalias !1567
  %1013 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 551), i64 %970, i64 %978, i64 %979, i64 %980, i64 %981, i64 %983, i64 %986, i64 %989, i64 %992, i64 %995, i64 %998, i64 %1001, i64 %1004, i64 %1007, i64 %1010), !noalias !1564
  %1014 = load i64, i64* %3, align 8
  %1015 = load i64, i64* %18, align 8
  %1016 = add i64 %1015, 72
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = add i64 %1015, -260
  %1020 = trunc i64 %1013 to i32
  %1021 = inttoptr i64 %1019 to i32*
  store i32 %1020, i32* %1021
  %1022 = add i64 %1014, 27
  %1023 = load i64, i64* %17, align 8, !tbaa !1240
  %1024 = add i64 %1023, -8
  %1025 = inttoptr i64 %1024 to i64*
  store i64 %1022, i64* %1025
  %1026 = load i64, i64* %154, align 8, !alias.scope !1569, !noalias !1572
  %1027 = load i64, i64* %153, align 8, !alias.scope !1569, !noalias !1572
  %1028 = load i64, i64* %156, align 8, !alias.scope !1569, !noalias !1572
  %1029 = load i64, i64* %157, align 8, !alias.scope !1569, !noalias !1572
  %1030 = inttoptr i64 %1023 to i64*
  %1031 = load i64, i64* %1030
  %1032 = add i64 %1023, 8
  %1033 = inttoptr i64 %1032 to i64*
  %1034 = load i64, i64* %1033
  %1035 = add i64 %1023, 16
  %1036 = inttoptr i64 %1035 to i64*
  %1037 = load i64, i64* %1036
  %1038 = add i64 %1023, 24
  %1039 = inttoptr i64 %1038 to i64*
  %1040 = load i64, i64* %1039
  %1041 = add i64 %1023, 32
  %1042 = inttoptr i64 %1041 to i64*
  %1043 = load i64, i64* %1042
  %1044 = add i64 %1023, 40
  %1045 = inttoptr i64 %1044 to i64*
  %1046 = load i64, i64* %1045
  %1047 = add i64 %1023, 48
  %1048 = inttoptr i64 %1047 to i64*
  %1049 = load i64, i64* %1048
  %1050 = add i64 %1023, 56
  %1051 = inttoptr i64 %1050 to i64*
  %1052 = load i64, i64* %1051
  %1053 = add i64 %1023, 64
  %1054 = inttoptr i64 %1053 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1023, 72
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  %1059 = inttoptr i64 %1024 to i64*
  %1060 = load i64, i64* %1059
  store i64 %1060, i64* %3, align 8, !alias.scope !1569, !noalias !1572
  store i64 %1023, i64* %17, align 8, !alias.scope !1569, !noalias !1572
  %1061 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 574), i64 %1018, i64 %1026, i64 %1027, i64 %1028, i64 %1029, i64 %1031, i64 %1034, i64 %1037, i64 %1040, i64 %1043, i64 %1046, i64 %1049, i64 %1052, i64 %1055, i64 %1058), !noalias !1569
  %1062 = load i64, i64* %3, align 8
  %1063 = load i64, i64* %18, align 8
  %1064 = add i64 %1063, 80
  %1065 = inttoptr i64 %1064 to i64*
  %1066 = load i64, i64* %1065
  %1067 = add i64 %1063, -264
  %1068 = trunc i64 %1061 to i32
  %1069 = inttoptr i64 %1067 to i32*
  store i32 %1068, i32* %1069
  %1070 = add i64 %1062, 27
  %1071 = load i64, i64* %17, align 8, !tbaa !1240
  %1072 = add i64 %1071, -8
  %1073 = inttoptr i64 %1072 to i64*
  store i64 %1070, i64* %1073
  %1074 = load i64, i64* %154, align 8, !alias.scope !1574, !noalias !1577
  %1075 = load i64, i64* %153, align 8, !alias.scope !1574, !noalias !1577
  %1076 = load i64, i64* %156, align 8, !alias.scope !1574, !noalias !1577
  %1077 = load i64, i64* %157, align 8, !alias.scope !1574, !noalias !1577
  %1078 = inttoptr i64 %1071 to i64*
  %1079 = load i64, i64* %1078
  %1080 = add i64 %1071, 8
  %1081 = inttoptr i64 %1080 to i64*
  %1082 = load i64, i64* %1081
  %1083 = add i64 %1071, 16
  %1084 = inttoptr i64 %1083 to i64*
  %1085 = load i64, i64* %1084
  %1086 = add i64 %1071, 24
  %1087 = inttoptr i64 %1086 to i64*
  %1088 = load i64, i64* %1087
  %1089 = add i64 %1071, 32
  %1090 = inttoptr i64 %1089 to i64*
  %1091 = load i64, i64* %1090
  %1092 = add i64 %1071, 40
  %1093 = inttoptr i64 %1092 to i64*
  %1094 = load i64, i64* %1093
  %1095 = add i64 %1071, 48
  %1096 = inttoptr i64 %1095 to i64*
  %1097 = load i64, i64* %1096
  %1098 = add i64 %1071, 56
  %1099 = inttoptr i64 %1098 to i64*
  %1100 = load i64, i64* %1099
  %1101 = add i64 %1071, 64
  %1102 = inttoptr i64 %1101 to i64*
  %1103 = load i64, i64* %1102
  %1104 = add i64 %1071, 72
  %1105 = inttoptr i64 %1104 to i64*
  %1106 = load i64, i64* %1105
  %1107 = inttoptr i64 %1072 to i64*
  %1108 = load i64, i64* %1107
  store i64 %1108, i64* %3, align 8, !alias.scope !1574, !noalias !1577
  store i64 %1071, i64* %17, align 8, !alias.scope !1574, !noalias !1577
  %1109 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 597), i64 %1066, i64 %1074, i64 %1075, i64 %1076, i64 %1077, i64 %1079, i64 %1082, i64 %1085, i64 %1088, i64 %1091, i64 %1094, i64 %1097, i64 %1100, i64 %1103, i64 %1106), !noalias !1574
  %1110 = load i64, i64* %3, align 8
  %1111 = load i64, i64* %18, align 8
  %1112 = add i64 %1111, 88
  %1113 = inttoptr i64 %1112 to i64*
  %1114 = load i64, i64* %1113
  store i64 %1114, i64* %15, align 8, !tbaa !1240
  %1115 = add i64 %1111, -268
  %1116 = trunc i64 %1109 to i32
  %1117 = inttoptr i64 %1115 to i32*
  store i32 %1116, i32* %1117
  %1118 = add i64 %1110, 27
  %1119 = load i64, i64* %17, align 8, !tbaa !1240
  %1120 = add i64 %1119, -8
  %1121 = inttoptr i64 %1120 to i64*
  store i64 %1118, i64* %1121
  %1122 = load i64, i64* %154, align 8, !alias.scope !1579, !noalias !1582
  %1123 = load i64, i64* %153, align 8, !alias.scope !1579, !noalias !1582
  %1124 = load i64, i64* %156, align 8, !alias.scope !1579, !noalias !1582
  %1125 = load i64, i64* %157, align 8, !alias.scope !1579, !noalias !1582
  %1126 = inttoptr i64 %1119 to i64*
  %1127 = load i64, i64* %1126
  %1128 = add i64 %1119, 8
  %1129 = inttoptr i64 %1128 to i64*
  %1130 = load i64, i64* %1129
  %1131 = add i64 %1119, 16
  %1132 = inttoptr i64 %1131 to i64*
  %1133 = load i64, i64* %1132
  %1134 = add i64 %1119, 24
  %1135 = inttoptr i64 %1134 to i64*
  %1136 = load i64, i64* %1135
  %1137 = add i64 %1119, 32
  %1138 = inttoptr i64 %1137 to i64*
  %1139 = load i64, i64* %1138
  %1140 = add i64 %1119, 40
  %1141 = inttoptr i64 %1140 to i64*
  %1142 = load i64, i64* %1141
  %1143 = add i64 %1119, 48
  %1144 = inttoptr i64 %1143 to i64*
  %1145 = load i64, i64* %1144
  %1146 = add i64 %1119, 56
  %1147 = inttoptr i64 %1146 to i64*
  %1148 = load i64, i64* %1147
  %1149 = add i64 %1119, 64
  %1150 = inttoptr i64 %1149 to i64*
  %1151 = load i64, i64* %1150
  %1152 = add i64 %1119, 72
  %1153 = inttoptr i64 %1152 to i64*
  %1154 = load i64, i64* %1153
  %1155 = inttoptr i64 %1120 to i64*
  %1156 = load i64, i64* %1155
  store i64 %1156, i64* %3, align 8, !alias.scope !1579, !noalias !1582
  store i64 %1119, i64* %17, align 8, !alias.scope !1579, !noalias !1582
  %1157 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 620), i64 %1114, i64 %1122, i64 %1123, i64 %1124, i64 %1125, i64 %1127, i64 %1130, i64 %1133, i64 %1136, i64 %1139, i64 %1142, i64 %1145, i64 %1148, i64 %1151, i64 %1154), !noalias !1579
  %1158 = load i64, i64* %3, align 8
  %1159 = load i64, i64* %18, align 8
  %1160 = add i64 %1159, -272
  %1161 = trunc i64 %1157 to i32
  %1162 = inttoptr i64 %1160 to i32*
  store i32 %1161, i32* %1162
  %1163 = add i64 %1158, 23
  %1164 = load i64, i64* %17, align 8, !tbaa !1240
  %1165 = add i64 %1164, -8
  %1166 = inttoptr i64 %1165 to i64*
  store i64 %1163, i64* %1166
  %1167 = load i64, i64* %155, align 8, !alias.scope !1584, !noalias !1587
  %1168 = load i64, i64* %154, align 8, !alias.scope !1584, !noalias !1587
  %1169 = load i64, i64* %153, align 8, !alias.scope !1584, !noalias !1587
  %1170 = load i64, i64* %156, align 8, !alias.scope !1584, !noalias !1587
  %1171 = load i64, i64* %157, align 8, !alias.scope !1584, !noalias !1587
  %1172 = inttoptr i64 %1164 to i64*
  %1173 = load i64, i64* %1172
  %1174 = add i64 %1164, 8
  %1175 = inttoptr i64 %1174 to i64*
  %1176 = load i64, i64* %1175
  %1177 = add i64 %1164, 16
  %1178 = inttoptr i64 %1177 to i64*
  %1179 = load i64, i64* %1178
  %1180 = add i64 %1164, 24
  %1181 = inttoptr i64 %1180 to i64*
  %1182 = load i64, i64* %1181
  %1183 = add i64 %1164, 32
  %1184 = inttoptr i64 %1183 to i64*
  %1185 = load i64, i64* %1184
  %1186 = add i64 %1164, 40
  %1187 = inttoptr i64 %1186 to i64*
  %1188 = load i64, i64* %1187
  %1189 = add i64 %1164, 48
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1164, 56
  %1193 = inttoptr i64 %1192 to i64*
  %1194 = load i64, i64* %1193
  %1195 = add i64 %1164, 64
  %1196 = inttoptr i64 %1195 to i64*
  %1197 = load i64, i64* %1196
  %1198 = add i64 %1164, 72
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = inttoptr i64 %1165 to i64*
  %1202 = load i64, i64* %1201
  store i64 %1202, i64* %3, align 8, !alias.scope !1584, !noalias !1587
  store i64 %1164, i64* %17, align 8, !alias.scope !1584, !noalias !1587
  %1203 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 643), i64 %1167, i64 %1168, i64 %1169, i64 %1170, i64 %1171, i64 %1173, i64 %1176, i64 %1179, i64 %1182, i64 %1185, i64 %1188, i64 %1191, i64 %1194, i64 %1197, i64 %1200), !noalias !1584
  %1204 = load i64, i64* %3, align 8
  %1205 = load i64, i64* %18, align 8
  %1206 = add i64 %1205, -276
  %1207 = trunc i64 %1203 to i32
  %1208 = inttoptr i64 %1206 to i32*
  store i32 %1207, i32* %1208
  %1209 = add i64 %1204, 23
  %1210 = load i64, i64* %17, align 8, !tbaa !1240
  %1211 = add i64 %1210, -8
  %1212 = inttoptr i64 %1211 to i64*
  store i64 %1209, i64* %1212
  %1213 = load i64, i64* %155, align 8, !alias.scope !1589, !noalias !1592
  %1214 = load i64, i64* %154, align 8, !alias.scope !1589, !noalias !1592
  %1215 = load i64, i64* %153, align 8, !alias.scope !1589, !noalias !1592
  %1216 = load i64, i64* %156, align 8, !alias.scope !1589, !noalias !1592
  %1217 = load i64, i64* %157, align 8, !alias.scope !1589, !noalias !1592
  %1218 = inttoptr i64 %1210 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1210, 8
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = add i64 %1210, 16
  %1224 = inttoptr i64 %1223 to i64*
  %1225 = load i64, i64* %1224
  %1226 = add i64 %1210, 24
  %1227 = inttoptr i64 %1226 to i64*
  %1228 = load i64, i64* %1227
  %1229 = add i64 %1210, 32
  %1230 = inttoptr i64 %1229 to i64*
  %1231 = load i64, i64* %1230
  %1232 = add i64 %1210, 40
  %1233 = inttoptr i64 %1232 to i64*
  %1234 = load i64, i64* %1233
  %1235 = add i64 %1210, 48
  %1236 = inttoptr i64 %1235 to i64*
  %1237 = load i64, i64* %1236
  %1238 = add i64 %1210, 56
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1210, 64
  %1242 = inttoptr i64 %1241 to i64*
  %1243 = load i64, i64* %1242
  %1244 = add i64 %1210, 72
  %1245 = inttoptr i64 %1244 to i64*
  %1246 = load i64, i64* %1245
  %1247 = inttoptr i64 %1211 to i64*
  %1248 = load i64, i64* %1247
  store i64 %1248, i64* %3, align 8, !alias.scope !1589, !noalias !1592
  store i64 %1210, i64* %17, align 8, !alias.scope !1589, !noalias !1592
  %1249 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 684), i64 %1213, i64 %1214, i64 %1215, i64 %1216, i64 %1217, i64 %1219, i64 %1222, i64 %1225, i64 %1228, i64 %1231, i64 %1234, i64 %1237, i64 %1240, i64 %1243, i64 %1246), !noalias !1589
  %1250 = load i64, i64* %3, align 8
  %1251 = load i64, i64* %18, align 8
  %1252 = add i64 %1251, -280
  %1253 = trunc i64 %1249 to i32
  %1254 = inttoptr i64 %1252 to i32*
  store i32 %1253, i32* %1254
  %1255 = add i64 %1250, 23
  %1256 = load i64, i64* %17, align 8, !tbaa !1240
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1255, i64* %1258
  %1259 = load i64, i64* %155, align 8, !alias.scope !1594, !noalias !1597
  %1260 = load i64, i64* %154, align 8, !alias.scope !1594, !noalias !1597
  %1261 = load i64, i64* %153, align 8, !alias.scope !1594, !noalias !1597
  %1262 = load i64, i64* %156, align 8, !alias.scope !1594, !noalias !1597
  %1263 = load i64, i64* %157, align 8, !alias.scope !1594, !noalias !1597
  %1264 = inttoptr i64 %1256 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1256, 8
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1256, 16
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1256, 24
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1256, 32
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = add i64 %1256, 40
  %1279 = inttoptr i64 %1278 to i64*
  %1280 = load i64, i64* %1279
  %1281 = add i64 %1256, 48
  %1282 = inttoptr i64 %1281 to i64*
  %1283 = load i64, i64* %1282
  %1284 = add i64 %1256, 56
  %1285 = inttoptr i64 %1284 to i64*
  %1286 = load i64, i64* %1285
  %1287 = add i64 %1256, 64
  %1288 = inttoptr i64 %1287 to i64*
  %1289 = load i64, i64* %1288
  %1290 = add i64 %1256, 72
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  %1293 = inttoptr i64 %1257 to i64*
  %1294 = load i64, i64* %1293
  store i64 %1294, i64* %3, align 8, !alias.scope !1594, !noalias !1597
  store i64 %1256, i64* %17, align 8, !alias.scope !1594, !noalias !1597
  %1295 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 723), i64 %1259, i64 %1260, i64 %1261, i64 %1262, i64 %1263, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277, i64 %1280, i64 %1283, i64 %1286, i64 %1289, i64 %1292), !noalias !1594
  %1296 = load i64, i64* %3, align 8
  %1297 = load i64, i64* %18, align 8
  %1298 = add i64 %1297, -284
  %1299 = trunc i64 %1295 to i32
  %1300 = inttoptr i64 %1298 to i32*
  store i32 %1299, i32* %1300
  %1301 = add i64 %1296, 23
  %1302 = load i64, i64* %17, align 8, !tbaa !1240
  %1303 = add i64 %1302, -8
  %1304 = inttoptr i64 %1303 to i64*
  store i64 %1301, i64* %1304
  %1305 = load i64, i64* %155, align 8, !alias.scope !1599, !noalias !1602
  %1306 = load i64, i64* %154, align 8, !alias.scope !1599, !noalias !1602
  %1307 = load i64, i64* %153, align 8, !alias.scope !1599, !noalias !1602
  %1308 = load i64, i64* %156, align 8, !alias.scope !1599, !noalias !1602
  %1309 = load i64, i64* %157, align 8, !alias.scope !1599, !noalias !1602
  %1310 = inttoptr i64 %1302 to i64*
  %1311 = load i64, i64* %1310
  %1312 = add i64 %1302, 8
  %1313 = inttoptr i64 %1312 to i64*
  %1314 = load i64, i64* %1313
  %1315 = add i64 %1302, 16
  %1316 = inttoptr i64 %1315 to i64*
  %1317 = load i64, i64* %1316
  %1318 = add i64 %1302, 24
  %1319 = inttoptr i64 %1318 to i64*
  %1320 = load i64, i64* %1319
  %1321 = add i64 %1302, 32
  %1322 = inttoptr i64 %1321 to i64*
  %1323 = load i64, i64* %1322
  %1324 = add i64 %1302, 40
  %1325 = inttoptr i64 %1324 to i64*
  %1326 = load i64, i64* %1325
  %1327 = add i64 %1302, 48
  %1328 = inttoptr i64 %1327 to i64*
  %1329 = load i64, i64* %1328
  %1330 = add i64 %1302, 56
  %1331 = inttoptr i64 %1330 to i64*
  %1332 = load i64, i64* %1331
  %1333 = add i64 %1302, 64
  %1334 = inttoptr i64 %1333 to i64*
  %1335 = load i64, i64* %1334
  %1336 = add i64 %1302, 72
  %1337 = inttoptr i64 %1336 to i64*
  %1338 = load i64, i64* %1337
  %1339 = inttoptr i64 %1303 to i64*
  %1340 = load i64, i64* %1339
  store i64 %1340, i64* %3, align 8, !alias.scope !1599, !noalias !1602
  store i64 %1302, i64* %17, align 8, !alias.scope !1599, !noalias !1602
  %1341 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 757), i64 %1305, i64 %1306, i64 %1307, i64 %1308, i64 %1309, i64 %1311, i64 %1314, i64 %1317, i64 %1320, i64 %1323, i64 %1326, i64 %1329, i64 %1332, i64 %1335, i64 %1338), !noalias !1599
  %1342 = load i64, i64* %3, align 8
  %1343 = load i64, i64* %18, align 8
  %1344 = add i64 %1343, -288
  %1345 = trunc i64 %1341 to i32
  %1346 = inttoptr i64 %1344 to i32*
  store i32 %1345, i32* %1346
  %1347 = add i64 %1342, 23
  %1348 = load i64, i64* %17, align 8, !tbaa !1240
  %1349 = add i64 %1348, -8
  %1350 = inttoptr i64 %1349 to i64*
  store i64 %1347, i64* %1350
  %1351 = load i64, i64* %155, align 8, !alias.scope !1604, !noalias !1607
  %1352 = load i64, i64* %154, align 8, !alias.scope !1604, !noalias !1607
  %1353 = load i64, i64* %153, align 8, !alias.scope !1604, !noalias !1607
  %1354 = load i64, i64* %156, align 8, !alias.scope !1604, !noalias !1607
  %1355 = load i64, i64* %157, align 8, !alias.scope !1604, !noalias !1607
  %1356 = inttoptr i64 %1348 to i64*
  %1357 = load i64, i64* %1356
  %1358 = add i64 %1348, 8
  %1359 = inttoptr i64 %1358 to i64*
  %1360 = load i64, i64* %1359
  %1361 = add i64 %1348, 16
  %1362 = inttoptr i64 %1361 to i64*
  %1363 = load i64, i64* %1362
  %1364 = add i64 %1348, 24
  %1365 = inttoptr i64 %1364 to i64*
  %1366 = load i64, i64* %1365
  %1367 = add i64 %1348, 32
  %1368 = inttoptr i64 %1367 to i64*
  %1369 = load i64, i64* %1368
  %1370 = add i64 %1348, 40
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1348, 48
  %1374 = inttoptr i64 %1373 to i64*
  %1375 = load i64, i64* %1374
  %1376 = add i64 %1348, 56
  %1377 = inttoptr i64 %1376 to i64*
  %1378 = load i64, i64* %1377
  %1379 = add i64 %1348, 64
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = add i64 %1348, 72
  %1383 = inttoptr i64 %1382 to i64*
  %1384 = load i64, i64* %1383
  %1385 = inttoptr i64 %1349 to i64*
  %1386 = load i64, i64* %1385
  store i64 %1386, i64* %3, align 8, !alias.scope !1604, !noalias !1607
  store i64 %1348, i64* %17, align 8, !alias.scope !1604, !noalias !1607
  %1387 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 778), i64 %1351, i64 %1352, i64 %1353, i64 %1354, i64 %1355, i64 %1357, i64 %1360, i64 %1363, i64 %1366, i64 %1369, i64 %1372, i64 %1375, i64 %1378, i64 %1381, i64 %1384), !noalias !1604
  %1388 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 644), i64* %16, align 8, !tbaa !1240
  %1389 = load i64, i64* %18, align 8
  %1390 = add i64 %1389, -292
  %1391 = trunc i64 %1387 to i32
  %1392 = inttoptr i64 %1390 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %1388, 23
  %1394 = load i64, i64* %17, align 8, !tbaa !1240
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1393, i64* %1396
  %1397 = load i64, i64* %155, align 8, !alias.scope !1609, !noalias !1612
  %1398 = load i64, i64* %154, align 8, !alias.scope !1609, !noalias !1612
  %1399 = load i64, i64* %153, align 8, !alias.scope !1609, !noalias !1612
  %1400 = load i64, i64* %156, align 8, !alias.scope !1609, !noalias !1612
  %1401 = load i64, i64* %157, align 8, !alias.scope !1609, !noalias !1612
  %1402 = inttoptr i64 %1394 to i64*
  %1403 = load i64, i64* %1402
  %1404 = add i64 %1394, 8
  %1405 = inttoptr i64 %1404 to i64*
  %1406 = load i64, i64* %1405
  %1407 = add i64 %1394, 16
  %1408 = inttoptr i64 %1407 to i64*
  %1409 = load i64, i64* %1408
  %1410 = add i64 %1394, 24
  %1411 = inttoptr i64 %1410 to i64*
  %1412 = load i64, i64* %1411
  %1413 = add i64 %1394, 32
  %1414 = inttoptr i64 %1413 to i64*
  %1415 = load i64, i64* %1414
  %1416 = add i64 %1394, 40
  %1417 = inttoptr i64 %1416 to i64*
  %1418 = load i64, i64* %1417
  %1419 = add i64 %1394, 48
  %1420 = inttoptr i64 %1419 to i64*
  %1421 = load i64, i64* %1420
  %1422 = add i64 %1394, 56
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  %1425 = add i64 %1394, 64
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1394, 72
  %1429 = inttoptr i64 %1428 to i64*
  %1430 = load i64, i64* %1429
  store i64 %1394, i64* %17, align 8, !alias.scope !1609, !noalias !1612
  %1431 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 644), i64 %1397, i64 %1398, i64 %1399, i64 %1400, i64 %1401, i64 %1403, i64 %1406, i64 %1409, i64 %1412, i64 %1415, i64 %1418, i64 %1421, i64 %1424, i64 %1427, i64 %1430), !noalias !1609
  store i64 %1431, i64* %152, align 8, !alias.scope !1609, !noalias !1612
  %1432 = load i64, i64* %18, align 8
  %1433 = add i64 %1432, -296
  %1434 = trunc i64 %1431 to i32
  %1435 = inttoptr i64 %1433 to i32*
  store i32 %1434, i32* %1435
  %1436 = load i64, i64* %17, align 8
  %1437 = add i64 %1436, 264
  %1438 = icmp ugt i64 %1436, -265
  %1439 = zext i1 %1438 to i8
  store i8 %1439, i8* %47, align 1, !tbaa !1246
  %1440 = trunc i64 %1437 to i32
  %1441 = and i32 %1440, 255
  %1442 = tail call i32 @llvm.ctpop.i32(i32 %1441) #11
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  store i8 %1445, i8* %48, align 1, !tbaa !1260
  %1446 = xor i64 %1437, %1436
  %1447 = lshr i64 %1446, 4
  %1448 = trunc i64 %1447 to i8
  %1449 = and i8 %1448, 1
  store i8 %1449, i8* %49, align 1, !tbaa !1261
  %1450 = icmp eq i64 %1437, 0
  %1451 = zext i1 %1450 to i8
  store i8 %1451, i8* %50, align 1, !tbaa !1262
  %1452 = lshr i64 %1437, 63
  %1453 = trunc i64 %1452 to i8
  store i8 %1453, i8* %51, align 1, !tbaa !1263
  %1454 = lshr i64 %1436, 63
  %1455 = xor i64 %1452, %1454
  %1456 = add nuw nsw i64 %1455, %1452
  %1457 = icmp eq i64 %1456, 2
  %1458 = zext i1 %1457 to i8
  store i8 %1458, i8* %52, align 1, !tbaa !1264
  %1459 = add i64 %1436, 272
  %1460 = inttoptr i64 %1437 to i64*
  %1461 = load i64, i64* %1460
  store i64 %1461, i64* %14, align 8, !tbaa !1240
  %1462 = add i64 %1436, 280
  %1463 = inttoptr i64 %1459 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %21, align 8, !tbaa !1240
  %1465 = add i64 %1436, 288
  %1466 = inttoptr i64 %1462 to i64*
  %1467 = load i64, i64* %1466
  store i64 %1467, i64* %22, align 8, !tbaa !1240
  %1468 = add i64 %1436, 296
  %1469 = inttoptr i64 %1465 to i64*
  %1470 = load i64, i64* %1469
  store i64 %1470, i64* %23, align 8, !tbaa !1240
  %1471 = add i64 %1436, 304
  %1472 = inttoptr i64 %1468 to i64*
  %1473 = load i64, i64* %1472
  store i64 %1473, i64* %24, align 8, !tbaa !1240
  %1474 = add i64 %1436, 312
  %1475 = inttoptr i64 %1471 to i64*
  %1476 = load i64, i64* %1475
  store i64 %1476, i64* %18, align 8, !tbaa !1240
  %1477 = inttoptr i64 %1474 to i64*
  %1478 = load i64, i64* %1477
  store i64 %1478, i64* %3, align 8, !tbaa !1240
  %1479 = add i64 %1436, 320
  store i64 %1479, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %731

block_400841:                                     ; preds = %block_40082f
  %1480 = sext i32 %263 to i64
  %1481 = inttoptr i64 %259 to i64*
  %1482 = load i64, i64* %1481
  %1483 = sext i32 %263 to i128
  %1484 = and i128 %1483, -18446744073709551616
  %1485 = sext i64 %1482 to i128
  %1486 = and i128 %1485, -18446744073709551616
  %1487 = zext i64 %1480 to i128
  %1488 = or i128 %1484, %1487
  %1489 = zext i64 %1482 to i128
  %1490 = or i128 %1486, %1489
  %1491 = mul nsw i128 %1490, %1488
  %1492 = trunc i128 %1491 to i64
  %1493 = add i64 %266, 13
  %1494 = inttoptr i64 %259 to i64*
  store i64 %1492, i64* %1494
  br label %block_40084e
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400680__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
block_400680:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402090_sprnvc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402090:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %18 = load i64, i64* %15, align 8
  %19 = load i64, i64* %14, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  store i64 %20, i64* %15, align 8, !tbaa !1240
  %22 = add i64 %19, -88
  store i64 %22, i64* %14, align 8, !tbaa !1240
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = add i64 %19, -12
  %30 = load i32, i32* %9, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = add i64 %19, -16
  %33 = load i32, i32* %7, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = add i64 %19, -20
  %36 = load i32, i32* %5, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %19, -32
  %39 = load i64, i64* %11, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %40
  %41 = add i64 %19, -40
  %42 = load i64, i64* %16, align 8
  %43 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %43
  %44 = add i64 %19, -44
  %45 = add i64 %1, 32
  %46 = inttoptr i64 %44 to i32*
  store i32 0, i32* %46
  %47 = bitcast %union.VectorReg* %17 to double*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast i64* %48 to double*
  br label %block_4020b0

block_40211a:                                     ; preds = %block_4020bc
  %50 = add i64 %168, -68
  %51 = inttoptr i64 %50 to i32*
  store i32 0, i32* %51
  %52 = add i64 %168, -40
  %53 = add i64 %190, 14
  %54 = inttoptr i64 %52 to i32*
  store i32 0, i32* %54
  %55 = add i64 %168, -36
  %56 = add i64 %168, -32
  br label %block_402128

block_402176:                                     ; preds = %block_402167
  %57 = add i64 %168, -56
  %58 = inttoptr i64 %57 to double*
  %59 = load double, double* %58
  store double %59, double* %47, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %60 = add i64 %168, -24
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = inttoptr i64 %55 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  %66 = shl nsw i64 %65, 3
  %67 = add i64 %66, %62
  %68 = inttoptr i64 %67 to double*
  store double %59, double* %68
  %69 = inttoptr i64 %169 to i32*
  %70 = load i32, i32* %69
  %71 = inttoptr i64 %56 to i64*
  %72 = load i64, i64* %71
  %73 = inttoptr i64 %55 to i32*
  %74 = load i32, i32* %73
  %75 = sext i32 %74 to i64
  store i64 %75, i64* %11, align 8, !tbaa !1240
  %76 = shl nsw i64 %75, 2
  %77 = add i64 %76, %72
  %78 = inttoptr i64 %77 to i32*
  store i32 %70, i32* %78
  %79 = inttoptr i64 %55 to i32*
  %80 = load i32, i32* %79
  %81 = add i32 %80, 1
  %82 = zext i32 %81 to i64
  store i64 %82, i64* %12, align 8, !tbaa !1240
  %83 = inttoptr i64 %55 to i32*
  store i32 %81, i32* %83
  %84 = add i64 %230, -198
  br label %block_4020b0.backedge

block_4020b0.backedge:                            ; preds = %block_402115, %block_402171, %block_402176
  %85 = phi i64 [ %84, %block_402176 ], [ %231, %block_402171 ], [ %262, %block_402115 ]
  %86 = phi %struct.Memory* [ %225, %block_402176 ], [ %225, %block_402171 ], [ %163, %block_402115 ]
  br label %block_4020b0

block_402154:                                     ; preds = %block_402134
  %87 = add i32 %194, 1
  %88 = inttoptr i64 %52 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %223, -44
  br label %block_402128

block_4020b0:                                     ; preds = %block_4020b0.backedge, %block_402090
  %90 = phi i64 [ %45, %block_402090 ], [ %85, %block_4020b0.backedge ]
  %91 = phi i64 [ %20, %block_402090 ], [ %168, %block_4020b0.backedge ]
  %92 = phi %struct.Memory* [ %2, %block_402090 ], [ %86, %block_4020b0.backedge ]
  %93 = add i64 %91, -36
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = zext i32 %95 to i64
  store i64 %96, i64* %10, align 8, !tbaa !1240
  %97 = add i64 %91, -8
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98
  %100 = sub i32 %95, %99
  %101 = icmp ult i32 %95, %99
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %23, align 1, !tbaa !1246
  %103 = and i32 %100, 255
  %104 = tail call i32 @llvm.ctpop.i32(i32 %103) #11
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  store i8 %107, i8* %24, align 1, !tbaa !1260
  %108 = xor i32 %99, %95
  %109 = xor i32 %108, %100
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  store i8 %112, i8* %25, align 1, !tbaa !1261
  %113 = icmp eq i32 %100, 0
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %26, align 1, !tbaa !1262
  %115 = lshr i32 %100, 31
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %27, align 1, !tbaa !1263
  %117 = lshr i32 %95, 31
  %118 = lshr i32 %99, 31
  %119 = xor i32 %118, %117
  %120 = xor i32 %115, %117
  %121 = add nuw nsw i32 %120, %119
  %122 = icmp eq i32 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %28, align 1, !tbaa !1264
  %124 = icmp ne i8 %116, 0
  %125 = xor i1 %124, %122
  %126 = select i1 %125, i64 12, i64 244
  %127 = add i64 %90, %126
  br i1 %125, label %block_4020bc, label %block_4021a4

block_4020bc:                                     ; preds = %block_4020b0
  store i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1168), i64* %13, align 8, !tbaa !1240
  %128 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1176) to double*)
  store double %128, double* %47, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %129 = add i64 %127, 3348
  %130 = add i64 %127, 24
  %131 = load i64, i64* %14, align 8, !tbaa !1240
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133
  store i64 %132, i64* %14, align 8, !tbaa !1240
  %134 = tail call %struct.Memory* @sub_402dd0_randlc(%struct.State* nonnull %0, i64 %129, %struct.Memory* %92)
  %135 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1168), i64* %13, align 8, !tbaa !1240
  %136 = load i64, i64* %15, align 8
  %137 = add i64 %136, -56
  %138 = load double, double* %47, align 1
  %139 = inttoptr i64 %137 to double*
  store double %138, double* %139
  %140 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1176) to double*)
  store double %140, double* %47, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %141 = add i64 %135, 3324
  %142 = add i64 %135, 29
  %143 = load i64, i64* %14, align 8, !tbaa !1240
  %144 = add i64 %143, -8
  %145 = inttoptr i64 %144 to i64*
  store i64 %142, i64* %145
  store i64 %144, i64* %14, align 8, !tbaa !1240
  %146 = tail call %struct.Memory* @sub_402dd0_randlc(%struct.State* nonnull %0, i64 %141, %struct.Memory* %134)
  %147 = load i64, i64* %15, align 8
  %148 = add i64 %147, -64
  %149 = load i64, i64* %3, align 8
  %150 = load double, double* %47, align 1
  %151 = inttoptr i64 %148 to double*
  store double %150, double* %151
  %152 = inttoptr i64 %148 to double*
  %153 = load double, double* %152
  store double %153, double* %47, align 1, !tbaa !1244
  store double 0.000000e+00, double* %49, align 1, !tbaa !1244
  %154 = add i64 %147, -12
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = zext i32 %156 to i64
  store i64 %157, i64* %13, align 8, !tbaa !1240
  %158 = add i64 %149, 2255
  %159 = add i64 %149, 18
  %160 = load i64, i64* %14, align 8, !tbaa !1240
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162
  store i64 %161, i64* %14, align 8, !tbaa !1240
  %163 = tail call %struct.Memory* @sub_4029c0_icnvrt(%struct.State* nonnull %0, i64 %158, %struct.Memory* %146)
  %164 = load i64, i64* %10, align 8
  %165 = load i64, i64* %3, align 8
  %166 = trunc i64 %164 to i32
  %167 = add i32 %166, 1
  %168 = load i64, i64* %15, align 8
  %169 = add i64 %168, -44
  %170 = inttoptr i64 %169 to i32*
  store i32 %167, i32* %170
  %171 = inttoptr i64 %169 to i32*
  %172 = load i32, i32* %171
  %173 = add i64 %168, -4
  %174 = inttoptr i64 %173 to i32*
  %175 = load i32, i32* %174
  %176 = sub i32 %172, %175
  %177 = icmp eq i32 %176, 0
  %178 = lshr i32 %176, 31
  %179 = trunc i32 %178 to i8
  %180 = lshr i32 %172, 31
  %181 = lshr i32 %175, 31
  %182 = xor i32 %181, %180
  %183 = xor i32 %178, %180
  %184 = add nuw nsw i32 %183, %182
  %185 = icmp eq i32 %184, 2
  %186 = icmp ne i8 %179, 0
  %187 = xor i1 %186, %185
  %188 = or i1 %177, %187
  %189 = select i1 %188, i64 23, i64 18
  %190 = add i64 %165, %189
  br i1 %188, label %block_40211a, label %block_402115

block_402128:                                     ; preds = %block_402154, %block_40211a
  %191 = phi i64 [ %53, %block_40211a ], [ %89, %block_402154 ]
  %192 = phi %struct.Memory* [ %163, %block_40211a ], [ %192, %block_402154 ]
  %193 = inttoptr i64 %52 to i32*
  %194 = load i32, i32* %193
  %195 = inttoptr i64 %55 to i32*
  %196 = load i32, i32* %195
  %197 = sub i32 %194, %196
  %198 = lshr i32 %197, 31
  %199 = trunc i32 %198 to i8
  %200 = lshr i32 %194, 31
  %201 = lshr i32 %196, 31
  %202 = xor i32 %201, %200
  %203 = xor i32 %198, %200
  %204 = add nuw nsw i32 %203, %202
  %205 = icmp eq i32 %204, 2
  %206 = icmp ne i8 %199, 0
  %207 = xor i1 %206, %205
  %208 = select i1 %207, i64 12, i64 63
  %209 = add i64 %191, %208
  br i1 %207, label %block_402134, label %block_402167.loopexit

block_402134:                                     ; preds = %block_402128
  %210 = inttoptr i64 %56 to i64*
  %211 = load i64, i64* %210
  %212 = sext i32 %194 to i64
  store i64 %212, i64* %11, align 8, !tbaa !1240
  %213 = shl nsw i64 %212, 2
  %214 = add i64 %213, %211
  %215 = inttoptr i64 %214 to i32*
  %216 = load i32, i32* %215
  %217 = zext i32 %216 to i64
  store i64 %217, i64* %12, align 8, !tbaa !1240
  %218 = inttoptr i64 %169 to i32*
  %219 = load i32, i32* %218
  %220 = sub i32 %216, %219
  %221 = icmp eq i32 %220, 0
  %222 = select i1 %221, i64 20, i64 32
  %223 = add i64 %209, %222
  br i1 %221, label %block_402148, label %block_402154

block_402167.loopexit:                            ; preds = %block_402128
  br label %block_402167

block_402167:                                     ; preds = %block_402148, %block_402167.loopexit
  %224 = phi i64 [ %264, %block_402148 ], [ %209, %block_402167.loopexit ]
  %225 = phi %struct.Memory* [ %192, %block_402148 ], [ %192, %block_402167.loopexit ]
  %226 = inttoptr i64 %50 to i32*
  %227 = load i32, i32* %226
  %228 = icmp eq i32 %227, 0
  %229 = select i1 %228, i64 15, i64 10
  %230 = add i64 %224, %229
  br i1 %228, label %block_402176, label %block_402171

block_402171:                                     ; preds = %block_402167
  %231 = add i64 %230, -193
  br label %block_4020b0.backedge

block_4021a4:                                     ; preds = %block_4020b0
  %232 = load i64, i64* %14, align 8
  %233 = add i64 %232, 80
  %234 = icmp ugt i64 %232, -81
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %23, align 1, !tbaa !1246
  %236 = trunc i64 %233 to i32
  %237 = and i32 %236, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #11
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %24, align 1, !tbaa !1260
  %242 = xor i64 %232, 16
  %243 = xor i64 %242, %233
  %244 = lshr i64 %243, 4
  %245 = trunc i64 %244 to i8
  %246 = and i8 %245, 1
  store i8 %246, i8* %25, align 1, !tbaa !1261
  %247 = icmp eq i64 %233, 0
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %26, align 1, !tbaa !1262
  %249 = lshr i64 %233, 63
  %250 = trunc i64 %249 to i8
  store i8 %250, i8* %27, align 1, !tbaa !1263
  %251 = lshr i64 %232, 63
  %252 = xor i64 %249, %251
  %253 = add nuw nsw i64 %252, %249
  %254 = icmp eq i64 %253, 2
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %28, align 1, !tbaa !1264
  %256 = add i64 %232, 88
  %257 = inttoptr i64 %233 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %15, align 8, !tbaa !1240
  %259 = inttoptr i64 %256 to i64*
  %260 = load i64, i64* %259
  store i64 %260, i64* %3, align 8, !tbaa !1240
  %261 = add i64 %232, 96
  store i64 %261, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %92

block_402115:                                     ; preds = %block_4020bc
  %262 = add i64 %190, -101
  br label %block_4020b0.backedge

block_402148:                                     ; preds = %block_402134
  %263 = inttoptr i64 %50 to i32*
  store i32 1, i32* %263
  %264 = add i64 %223, 31
  br label %block_402167
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402dd0_randlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402dd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %14 = load i64, i64* %7, align 8
  %15 = load i64, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %6, align 8, !tbaa !1240
  store i64 %16, i64* %7, align 8, !tbaa !1240
  %18 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2272) to double*)
  %19 = bitcast %union.VectorReg* %9 to double*
  store double %18, double* %19, align 1, !tbaa !1244
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %21 = bitcast i64* %20 to double*
  store double 0.000000e+00, double* %21, align 1, !tbaa !1244
  %22 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2280) to double*)
  %23 = bitcast %union.VectorReg* %10 to double*
  store double %22, double* %23, align 1, !tbaa !1244
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !1244
  %26 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2288) to double*)
  %27 = bitcast %union.VectorReg* %11 to double*
  store double %26, double* %27, align 1, !tbaa !1244
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %29 = bitcast i64* %28 to double*
  store double 0.000000e+00, double* %29, align 1, !tbaa !1244
  %30 = bitcast %union.VectorReg* %12 to i8*
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2296) to double*)
  %32 = bitcast %union.VectorReg* %12 to double*
  store double %31, double* %32, align 1, !tbaa !1244
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1244
  %35 = add i64 %15, -16
  %36 = load i64, i64* %5, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %15, -24
  %39 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %40 = bitcast [32 x %union.VectorReg]* %8 to double*
  %41 = load double, double* %40, align 1
  %42 = inttoptr i64 %38 to double*
  store double %41, double* %42
  %43 = add i64 %15, -32
  %44 = inttoptr i64 %43 to double*
  store double %31, double* %44
  %45 = add i64 %15, -40
  %46 = inttoptr i64 %45 to double*
  store double %18, double* %46
  %47 = add i64 %15, -48
  %48 = inttoptr i64 %47 to double*
  store double %26, double* %48
  %49 = add i64 %15, -56
  %50 = inttoptr i64 %49 to double*
  store double %22, double* %50
  %51 = bitcast %union.VectorReg* %12 to <2 x i32>*
  %52 = bitcast double %31 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i32 0
  %54 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %53, i32* %54, align 1, !tbaa !1330
  %55 = extractelement <2 x i32> %52, i32 1
  %56 = getelementptr inbounds i8, i8* %39, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 1, !tbaa !1330
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = load double, double* %40, align 1
  %60 = inttoptr i64 %38 to double*
  %61 = load double, double* %60
  %62 = fmul double %59, %61
  %63 = add i64 %15, -64
  %64 = inttoptr i64 %63 to double*
  store double %62, double* %64
  %65 = inttoptr i64 %63 to double*
  %66 = load double, double* %65
  %67 = tail call double @llvm.trunc.f64(double %66) #11
  %68 = tail call double @llvm.fabs.f64(double %67) #11
  %69 = fcmp ogt double %68, 0x41DFFFFFFFC00000
  %70 = fptosi double %67 to i32
  %71 = sitofp i32 %70 to double
  %72 = select i1 %69, double 0xC1E0000000000000, double %71
  %73 = load i64, i64* %7, align 8
  %74 = add i64 %73, -88
  %75 = inttoptr i64 %74 to double*
  store double %72, double* %75
  %76 = add i64 %73, -16
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  %79 = bitcast i64* %58 to double*
  %80 = bitcast %union.VectorReg* %13 to i8*
  %81 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %82 = load <2 x i32>, <2 x i32>* %81, align 1
  %83 = bitcast i64* %28 to <2 x i32>*
  %84 = extractelement <2 x i32> %82, i32 0
  %85 = bitcast %union.VectorReg* %13 to i32*
  store i32 %84, i32* %85, align 1, !tbaa !1330
  %86 = extractelement <2 x i32> %82, i32 1
  %87 = getelementptr inbounds i8, i8* %80, i64 4
  %88 = bitcast i8* %87 to i32*
  store i32 %86, i32* %88, align 1, !tbaa !1330
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast %union.VectorReg* %13 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %74 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  %95 = fsub double %78, %94
  %96 = add i64 %73, -96
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %73, -8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = load <2 x i32>, <2 x i32>* %51, align 1
  %102 = extractelement <2 x i32> %101, i32 0
  store i32 %102, i32* %54, align 1, !tbaa !1330
  %103 = extractelement <2 x i32> %101, i32 1
  store i32 %103, i32* %57, align 1, !tbaa !1330
  %104 = load double, double* %40, align 1
  %105 = inttoptr i64 %100 to double*
  %106 = load double, double* %105
  %107 = fmul double %104, %106
  %108 = add i64 %73, -56
  %109 = inttoptr i64 %108 to double*
  store double %107, double* %109
  %110 = inttoptr i64 %108 to double*
  %111 = load double, double* %110
  %112 = tail call double @llvm.trunc.f64(double %111) #11
  %113 = tail call double @llvm.fabs.f64(double %112) #11
  %114 = fcmp ogt double %113, 0x41DFFFFFFFC00000
  %115 = fptosi double %112 to i32
  %116 = sitofp i32 %115 to double
  %117 = select i1 %114, double 0xC1E0000000000000, double %116
  %118 = add i64 %73, -104
  %119 = inttoptr i64 %118 to double*
  store double %117, double* %119
  %120 = inttoptr i64 %98 to i64*
  %121 = load i64, i64* %120
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store i32 %84, i32* %85, align 1, !tbaa !1330
  store i32 %86, i32* %88, align 1, !tbaa !1330
  %124 = load i64, i64* %7, align 8
  %125 = add i64 %124, -104
  %126 = load double, double* %90, align 1
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127
  %129 = fmul double %126, %128
  %130 = fsub double %123, %129
  %131 = add i64 %124, -112
  %132 = inttoptr i64 %131 to double*
  store double %130, double* %132
  %133 = add i64 %124, -88
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = inttoptr i64 %131 to double*
  %137 = load double, double* %136
  %138 = fmul double %135, %137
  %139 = add i64 %124, -96
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  %142 = inttoptr i64 %125 to double*
  %143 = load double, double* %142
  %144 = fmul double %141, %143
  store double %144, double* %90, align 1, !tbaa !1244
  store i64 0, i64* %89, align 1, !tbaa !1244
  %145 = fadd double %138, %144
  %146 = add i64 %124, -56
  %147 = inttoptr i64 %146 to double*
  store double %145, double* %147
  %148 = load double, double* %32, align 1
  %149 = inttoptr i64 %146 to double*
  %150 = load double, double* %149
  %151 = fmul double %148, %150
  %152 = tail call double @llvm.trunc.f64(double %151) #11
  %153 = tail call double @llvm.fabs.f64(double %152) #11
  %154 = fcmp ogt double %153, 0x41DFFFFFFFC00000
  %155 = fptosi double %152 to i32
  %156 = sitofp i32 %155 to double
  %157 = select i1 %154, double 0xC1E0000000000000, double %156
  %158 = add i64 %124, -64
  %159 = inttoptr i64 %158 to double*
  store double %157, double* %159
  %160 = inttoptr i64 %146 to double*
  %161 = load double, double* %160
  %162 = load <2 x i32>, <2 x i32>* %81, align 1
  %163 = load <2 x i32>, <2 x i32>* %83, align 1
  %164 = extractelement <2 x i32> %162, i32 0
  %165 = bitcast %union.VectorReg* %12 to i32*
  store i32 %164, i32* %165, align 1, !tbaa !1330
  %166 = extractelement <2 x i32> %162, i32 1
  %167 = getelementptr inbounds i8, i8* %30, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 1, !tbaa !1330
  %169 = extractelement <2 x i32> %163, i32 0
  %170 = bitcast i64* %33 to i32*
  store i32 %169, i32* %170, align 1, !tbaa !1330
  %171 = extractelement <2 x i32> %163, i32 1
  %172 = getelementptr inbounds i8, i8* %30, i64 12
  %173 = bitcast i8* %172 to i32*
  store i32 %171, i32* %173, align 1, !tbaa !1330
  %174 = load i64, i64* %7, align 8
  %175 = add i64 %174, -64
  %176 = load double, double* %32, align 1
  %177 = inttoptr i64 %175 to double*
  %178 = load double, double* %177
  %179 = fmul double %176, %178
  store double %179, double* %32, align 1, !tbaa !1244
  %180 = fsub double %161, %179
  %181 = add i64 %174, -120
  %182 = inttoptr i64 %181 to double*
  store double %180, double* %182
  %183 = bitcast <2 x i32> %162 to double
  %184 = inttoptr i64 %181 to double*
  %185 = load double, double* %184
  %186 = fmul double %183, %185
  %187 = add i64 %174, -96
  %188 = inttoptr i64 %187 to double*
  %189 = load double, double* %188
  %190 = add i64 %174, -112
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = fmul double %189, %192
  %194 = fadd double %193, %186
  store double %194, double* %27, align 1, !tbaa !1244
  %195 = bitcast i64* %28 to <2 x i32>*
  store <2 x i32> %163, <2 x i32>* %195, align 1, !tbaa !1244
  %196 = add i64 %174, -72
  %197 = inttoptr i64 %196 to double*
  store double %194, double* %197
  %198 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %199 = load <2 x i32>, <2 x i32>* %198, align 1
  %200 = load i64, i64* %20, align 1
  %201 = extractelement <2 x i32> %199, i32 0
  store i32 %201, i32* %54, align 1, !tbaa !1330
  %202 = extractelement <2 x i32> %199, i32 1
  store i32 %202, i32* %57, align 1, !tbaa !1330
  %203 = load double, double* %40, align 1
  %204 = inttoptr i64 %196 to double*
  %205 = load double, double* %204
  %206 = fmul double %203, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = zext i32 %210 to i64
  %212 = select i1 %209, i64 2147483648, i64 %211
  store i64 %212, i64* %4, align 8, !tbaa !1240
  %213 = trunc i64 %212 to i32
  %214 = sitofp i32 %213 to double
  %215 = add i64 %174, -80
  %216 = inttoptr i64 %215 to double*
  store double %214, double* %216
  %217 = inttoptr i64 %196 to double*
  %218 = load double, double* %217
  %219 = load double, double* %23, align 1
  %220 = inttoptr i64 %215 to double*
  %221 = load double, double* %220
  %222 = fmul double %219, %221
  store double %222, double* %23, align 1, !tbaa !1244
  %223 = fsub double %218, %222
  %224 = load i64, i64* %7, align 8
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = inttoptr i64 %227 to double*
  store double %223, double* %228
  %229 = inttoptr i64 %225 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %5, align 8, !tbaa !1240
  %231 = bitcast <2 x i32> %199 to double
  %232 = inttoptr i64 %230 to double*
  %233 = load double, double* %232
  %234 = fmul double %231, %233
  store double %234, double* %19, align 1, !tbaa !1244
  store i64 %200, i64* %20, align 1, !tbaa !1244
  %235 = add i64 %224, -128
  %236 = inttoptr i64 %235 to double*
  store double %234, double* %236
  %237 = inttoptr i64 %235 to double*
  %238 = load double, double* %237
  store double %238, double* %40, align 1, !tbaa !1244
  store double 0.000000e+00, double* %79, align 1, !tbaa !1244
  %239 = load i64, i64* %6, align 8, !tbaa !1240
  %240 = add i64 %239, 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %7, align 8, !tbaa !1240
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !tbaa !1240
  %245 = add i64 %239, 16
  store i64 %245, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4031c4__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
block_4031c4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9 = xor i64 %6, %5
  %10 = lshr i64 %9, 4
  %11 = trunc i64 %10 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = lshr i64 %6, 63
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %5, 63
  %18 = xor i64 %15, %17
  %19 = add nuw nsw i64 %18, %17
  %20 = icmp eq i64 %19, 2
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = icmp ult i64 %5, 8
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !1246
  %25 = trunc i64 %5 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %8, align 1, !tbaa !1260
  store i8 %12, i8* %13, align 1, !tbaa !1261
  %31 = icmp eq i64 %5, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %14, align 1, !tbaa !1262
  %33 = trunc i64 %17 to i8
  store i8 %33, i8* %16, align 1, !tbaa !1263
  store i8 %21, i8* %22, align 1, !tbaa !1264
  %34 = inttoptr i64 %5 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %3, align 8, !tbaa !1240
  %36 = add i64 %5, 8
  store i64 %36, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b10_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400b10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, 48
  %24 = add i64 %1, 16
  %25 = add i64 %11, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_400b40_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -4
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %6, align 8, !tbaa !1240
  %33 = shl nsw i64 %32, 3
  %34 = add i64 %33, add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 528)
  %35 = bitcast %union.VectorReg* %9 to double*
  %36 = load double, double* %35, align 1
  %37 = inttoptr i64 %34 to double*
  store double %36, double* %37
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 16
  %40 = icmp ugt i64 %38, -17
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %14, align 1, !tbaa !1246
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #11
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %15, align 1, !tbaa !1260
  %48 = xor i64 %38, 16
  %49 = xor i64 %48, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %16, align 1, !tbaa !1261
  %53 = icmp eq i64 %39, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1262
  %55 = lshr i64 %39, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %18, align 1, !tbaa !1263
  %57 = lshr i64 %38, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %19, align 1, !tbaa !1264
  %62 = add i64 %38, 24
  %63 = inttoptr i64 %39 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %62 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %3, align 8, !tbaa !1240
  %67 = add i64 %38, 32
  store i64 %67, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400af0_timer_clear(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400af0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = bitcast %union.VectorReg* %9 to i8*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %16 = bitcast %union.VectorReg* %9 to i32*
  store i32 0, i32* %16, align 1, !tbaa !1363
  %17 = getelementptr inbounds i8, i8* %14, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !1363
  %19 = bitcast i64* %15 to i32*
  store i32 0, i32* %19, align 1, !tbaa !1363
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 1, !tbaa !1363
  %22 = add i64 %11, -12
  %23 = load i32, i32* %5, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = inttoptr i64 %22 to i32*
  %26 = load i32, i32* %25
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %6, align 8, !tbaa !1240
  %28 = shl nsw i64 %27, 3
  %29 = add i64 %28, add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 16)
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %12 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = inttoptr i64 %11 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %3, align 8, !tbaa !1240
  %37 = add i64 %11, 8
  store i64 %37, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401b80_conj_grad(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_401b80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %16 = load i64, i64* %10, align 8
  %17 = load i64, i64* %9, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %10, align 8, !tbaa !1240
  %20 = add i64 %17, -152
  store i64 %20, i64* %9, align 8, !tbaa !1240
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = add i64 %17, 24
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  %30 = add i64 %17, 16
  %31 = inttoptr i64 %30 to i64*
  %32 = load i64, i64* %31
  store i64 %32, i64* %13, align 8, !tbaa !1240
  %33 = add i64 %17, 8
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %14, align 8, !tbaa !1240
  %36 = bitcast [32 x %union.VectorReg]* %15 to i8*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %38 = bitcast [32 x %union.VectorReg]* %15 to i32*
  store i32 0, i32* %38, align 1, !tbaa !1363
  %39 = getelementptr inbounds i8, i8* %36, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 0, i32* %40, align 1, !tbaa !1363
  %41 = bitcast i64* %37 to i32*
  store i32 0, i32* %41, align 1, !tbaa !1363
  %42 = getelementptr inbounds i8, i8* %36, i64 12
  %43 = bitcast i8* %42 to i32*
  store i32 0, i32* %43, align 1, !tbaa !1363
  %44 = add i64 %17, -16
  %45 = load i64, i64* %8, align 8
  %46 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %46
  %47 = add i64 %17, -24
  %48 = load i64, i64* %7, align 8
  %49 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %49
  %50 = add i64 %17, -32
  %51 = load i64, i64* %6, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %17, -40
  %54 = load i64, i64* %5, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %55
  %56 = add i64 %17, -48
  %57 = load i64, i64* %11, align 8
  %58 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %58
  %59 = add i64 %17, -56
  %60 = load i64, i64* %12, align 8
  %61 = inttoptr i64 %59 to i64*
  store i64 %60, i64* %61
  %62 = add i64 %17, -72
  %63 = inttoptr i64 %62 to i32*
  store i32 25, i32* %63
  %64 = load i64, i64* %10, align 8
  %65 = add i64 %64, -88
  %66 = bitcast [32 x %union.VectorReg]* %15 to double*
  %67 = load double, double* %66, align 1
  %68 = inttoptr i64 %65 to double*
  store double %67, double* %68
  %69 = add i64 %64, -52
  %70 = inttoptr i64 %69 to i32*
  store i32 0, i32* %70
  %71 = add i64 %64, -120
  %72 = inttoptr i64 %71 to i64*
  store i64 %35, i64* %72
  %73 = add i64 %64, -128
  %74 = inttoptr i64 %73 to i64*
  store i64 %32, i64* %74
  %75 = add i64 %64, -136
  %76 = add i64 %1, 84
  %77 = inttoptr i64 %75 to i64*
  store i64 %29, i64* %77
  %78 = add i64 %64, 16
  %79 = add i64 %64, -32
  %80 = add i64 %64, -24
  %81 = bitcast i64* %37 to double*
  %82 = add i64 %64, 24
  %83 = add i64 %64, -48
  br label %block_401bd4

block_401f7e:                                     ; preds = %block_401f62
  store i32 0, i32* %38, align 1, !tbaa !1363
  store i32 0, i32* %40, align 1, !tbaa !1363
  store i32 0, i32* %41, align 1, !tbaa !1363
  store i32 0, i32* %43, align 1, !tbaa !1363
  %84 = load double, double* %66, align 1
  %85 = inttoptr i64 %373 to double*
  store double %84, double* %85
  %86 = inttoptr i64 %369 to i64*
  %87 = load i64, i64* %86
  %88 = inttoptr i64 %69 to i32*
  %89 = load i32, i32* %88
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 2
  %92 = add i64 %91, %87
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = add i64 %153, 22
  %96 = inttoptr i64 %370 to i32*
  store i32 %94, i32* %96
  br label %block_401f94

block_401ded:                                     ; preds = %block_401e09, %block_401dc5
  %97 = phi i64 [ %388, %block_401dc5 ], [ %596, %block_401e09 ]
  %98 = phi %struct.Memory* [ %391, %block_401dc5 ], [ %98, %block_401e09 ]
  %99 = inttoptr i64 %69 to i32*
  %100 = load i32, i32* %99
  %101 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %102 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %103 = sub i32 %101, %102
  %104 = add i32 %103, 1
  %105 = sub i32 %100, %104
  %106 = lshr i32 %105, 31
  %107 = lshr i32 %100, 31
  %108 = lshr i32 %104, 31
  %109 = xor i32 %108, %107
  %110 = xor i32 %106, %107
  %111 = add nuw nsw i32 %110, %109
  %112 = icmp eq i32 %111, 2
  %113 = icmp ne i32 %106, 0
  %114 = xor i1 %113, %112
  %115 = select i1 %114, i64 28, i64 138
  %116 = add i64 %97, %115
  br i1 %114, label %block_401e09, label %block_401e77

block_401feb:                                     ; preds = %block_401f94
  %117 = zext i32 %418 to i64
  store i64 %117, i64* %6, align 8, !tbaa !1240
  store double 0.000000e+00, double* %81, align 1, !tbaa !1244
  store i64 %419, i64* %7, align 8, !tbaa !1240
  store double %437, double* %66, align 1
  %118 = inttoptr i64 %82 to i64*
  %119 = load i64, i64* %118
  %120 = sext i32 %417 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add i64 %121, %119
  %123 = inttoptr i64 %122 to double*
  store double %437, double* %123
  %124 = inttoptr i64 %69 to i32*
  %125 = load i32, i32* %124
  %126 = add i32 %125, 1
  %127 = inttoptr i64 %69 to i32*
  store i32 %126, i32* %127
  %128 = add i64 %435, -137
  br label %block_401f62

block_401d64:                                     ; preds = %block_401cbb
  %129 = load double, double* %66, align 1
  %130 = inttoptr i64 %373 to double*
  store double %129, double* %130
  %131 = add i64 %228, 15
  %132 = inttoptr i64 %69 to i32*
  store i32 0, i32* %132
  br label %block_401d73

block_401f62:                                     ; preds = %block_401f53, %block_401feb
  %133 = phi i64 [ %156, %block_401f53 ], [ %128, %block_401feb ]
  %134 = phi %struct.Memory* [ %304, %block_401f53 ], [ %411, %block_401feb ]
  %135 = inttoptr i64 %69 to i32*
  %136 = load i32, i32* %135
  %137 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1144) to i32*)
  %138 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1140) to i32*)
  %139 = sub i32 %137, %138
  %140 = add i32 %139, 1
  %141 = sub i32 %136, %140
  %142 = lshr i32 %141, 31
  %143 = trunc i32 %142 to i8
  %144 = lshr i32 %136, 31
  %145 = lshr i32 %140, 31
  %146 = xor i32 %145, %144
  %147 = xor i32 %142, %144
  %148 = add nuw nsw i32 %147, %146
  %149 = icmp eq i32 %148, 2
  %150 = icmp ne i8 %143, 0
  %151 = xor i1 %150, %149
  %152 = select i1 %151, i64 28, i64 169
  %153 = add i64 %133, %152
  br i1 %151, label %block_401f7e, label %block_40200b

block_401f53:                                     ; preds = %block_401ca8
  store i32 0, i32* %38, align 1, !tbaa !1363
  store i32 0, i32* %40, align 1, !tbaa !1363
  store i32 0, i32* %41, align 1, !tbaa !1363
  store i32 0, i32* %43, align 1, !tbaa !1363
  %154 = load double, double* %66, align 1
  %155 = inttoptr i64 %368 to double*
  store double %154, double* %155
  %156 = add i64 %323, 15
  %157 = inttoptr i64 %69 to i32*
  store i32 0, i32* %157
  br label %block_401f62

block_401c48:                                     ; preds = %block_401bd4
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %159 = add i64 %342, 7
  %160 = inttoptr i64 %69 to i32*
  store i32 0, i32* %160
  %161 = bitcast %union.VectorReg* %158 to double*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %163 = bitcast i64* %162 to double*
  br label %block_401c4f

block_401d44:                                     ; preds = %block_401ced
  %164 = zext i32 %698 to i64
  store i64 %164, i64* %6, align 8, !tbaa !1240
  store double 0.000000e+00, double* %81, align 1, !tbaa !1244
  store i64 %699, i64* %7, align 8, !tbaa !1240
  store double %717, double* %66, align 1
  %165 = inttoptr i64 %78 to i64*
  %166 = load i64, i64* %165
  %167 = sext i32 %697 to i64
  %168 = shl nsw i64 %167, 3
  %169 = add i64 %168, %166
  %170 = inttoptr i64 %169 to double*
  store double %717, double* %170
  %171 = inttoptr i64 %69 to i32*
  %172 = load i32, i32* %171
  %173 = add i32 %172, 1
  %174 = inttoptr i64 %69 to i32*
  store i32 %173, i32* %174
  %175 = add i64 %715, -137
  br label %block_401cbb

block_401f40:                                     ; preds = %block_401ee6
  %176 = inttoptr i64 %364 to i32*
  %177 = load i32, i32* %176
  %178 = add i32 %177, 1
  %179 = inttoptr i64 %364 to i32*
  store i32 %178, i32* %179
  %180 = add i64 %276, -664
  br label %block_401ca8

block_401e7e:                                     ; preds = %block_401e77, %block_401e9a
  %181 = phi i64 [ %597, %block_401e77 ], [ %553, %block_401e9a ]
  %182 = phi %struct.Memory* [ %98, %block_401e77 ], [ %182, %block_401e9a ]
  %183 = inttoptr i64 %69 to i32*
  %184 = load i32, i32* %183
  %185 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %186 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %187 = sub i32 %185, %186
  %188 = add i32 %187, 1
  %189 = sub i32 %184, %188
  %190 = lshr i32 %189, 31
  %191 = lshr i32 %184, 31
  %192 = lshr i32 %188, 31
  %193 = xor i32 %192, %191
  %194 = xor i32 %190, %191
  %195 = add nuw nsw i32 %194, %193
  %196 = icmp eq i32 %195, 2
  %197 = icmp ne i32 %190, 0
  %198 = xor i1 %197, %196
  %199 = select i1 %198, i64 28, i64 82
  %200 = add i64 %181, %199
  %201 = inttoptr i64 %65 to double*
  %202 = load double, double* %201
  br i1 %198, label %block_401e9a, label %block_401ed0

block_401ed0:                                     ; preds = %block_401e7e
  store double 0.000000e+00, double* %81, align 1, !tbaa !1244
  %203 = inttoptr i64 %375 to double*
  %204 = load double, double* %203
  %205 = fdiv double %202, %204
  store double %205, double* %66, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %206 = inttoptr i64 %376 to double*
  store double %205, double* %206
  %207 = add i64 %200, 22
  %208 = inttoptr i64 %69 to i32*
  store i32 0, i32* %208
  br label %block_401ee6

block_401cbb:                                     ; preds = %block_401cb4, %block_401d44
  %209 = phi i64 [ %599, %block_401cb4 ], [ %175, %block_401d44 ]
  %210 = phi %struct.Memory* [ %304, %block_401cb4 ], [ %691, %block_401d44 ]
  %211 = inttoptr i64 %69 to i32*
  %212 = load i32, i32* %211
  %213 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1144) to i32*)
  %214 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1140) to i32*)
  %215 = sub i32 %213, %214
  %216 = add i32 %215, 1
  %217 = sub i32 %212, %216
  %218 = lshr i32 %217, 31
  %219 = lshr i32 %212, 31
  %220 = lshr i32 %216, 31
  %221 = xor i32 %220, %219
  %222 = xor i32 %218, %219
  %223 = add nuw nsw i32 %222, %221
  %224 = icmp eq i32 %223, 2
  %225 = icmp ne i32 %218, 0
  %226 = xor i1 %225, %224
  %227 = select i1 %226, i64 28, i64 169
  %228 = add i64 %209, %227
  store i32 0, i32* %38, align 1, !tbaa !1363
  store i32 0, i32* %40, align 1, !tbaa !1363
  store i32 0, i32* %41, align 1, !tbaa !1363
  store i32 0, i32* %43, align 1, !tbaa !1363
  br i1 %226, label %block_401cd7, label %block_401d64

block_401fad:                                     ; preds = %block_401f94
  %229 = inttoptr i64 %371 to i64*
  %230 = load i64, i64* %229
  %231 = sext i32 %413 to i64
  %232 = shl nsw i64 %231, 3
  %233 = add i64 %232, %230
  %234 = inttoptr i64 %233 to double*
  %235 = load double, double* %234
  %236 = inttoptr i64 %79 to i64*
  %237 = load i64, i64* %236
  %238 = inttoptr i64 %372 to i64*
  %239 = load i64, i64* %238
  %240 = shl nsw i64 %231, 2
  %241 = add i64 %240, %239
  %242 = inttoptr i64 %241 to i32*
  %243 = load i32, i32* %242
  %244 = sext i32 %243 to i64
  %245 = shl nsw i64 %244, 3
  %246 = add i64 %245, %237
  %247 = inttoptr i64 %246 to double*
  %248 = load double, double* %247
  %249 = fmul double %235, %248
  store double %249, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %250 = fadd double %437, %249
  %251 = inttoptr i64 %373 to double*
  store double %250, double* %251
  %252 = inttoptr i64 %370 to i32*
  %253 = load i32, i32* %252
  %254 = add i32 %253, 1
  %255 = inttoptr i64 %370 to i32*
  store i32 %254, i32* %255
  %256 = add i64 %435, -25
  br label %block_401f94

block_401ee6:                                     ; preds = %block_401f02, %block_401ed0
  %257 = phi i64 [ %207, %block_401ed0 ], [ %739, %block_401f02 ]
  %258 = phi %struct.Memory* [ %182, %block_401ed0 ], [ %258, %block_401f02 ]
  %259 = inttoptr i64 %69 to i32*
  %260 = load i32, i32* %259
  %261 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %262 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %263 = sub i32 %261, %262
  %264 = add i32 %263, 1
  %265 = sub i32 %260, %264
  %266 = lshr i32 %265, 31
  %267 = lshr i32 %260, 31
  %268 = lshr i32 %264, 31
  %269 = xor i32 %268, %267
  %270 = xor i32 %266, %267
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = icmp ne i32 %266, 0
  %274 = xor i1 %273, %272
  %275 = select i1 %274, i64 28, i64 90
  %276 = add i64 %257, %275
  br i1 %274, label %block_401f02, label %block_401f40

block_40202e:                                     ; preds = %block_402012
  %277 = inttoptr i64 %80 to i64*
  %278 = load i64, i64* %277
  %279 = sext i32 %441 to i64
  %280 = shl nsw i64 %279, 3
  %281 = add i64 %280, %278
  %282 = inttoptr i64 %281 to double*
  %283 = load double, double* %282
  %284 = inttoptr i64 %82 to i64*
  %285 = load i64, i64* %284
  %286 = add i64 %280, %285
  %287 = inttoptr i64 %286 to double*
  %288 = load double, double* %287
  %289 = fsub double %283, %288
  %290 = inttoptr i64 %373 to double*
  store double %289, double* %290
  %291 = inttoptr i64 %368 to double*
  %292 = load double, double* %291
  %293 = inttoptr i64 %373 to double*
  %294 = load double, double* %293
  %295 = fmul double %294, %294
  store double %295, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %296 = fadd double %292, %295
  store double %296, double* %66, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %297 = inttoptr i64 %368 to double*
  store double %296, double* %297
  %298 = inttoptr i64 %69 to i32*
  %299 = load i32, i32* %298
  %300 = add i32 %299, 1
  %301 = inttoptr i64 %69 to i32*
  store i32 %300, i32* %301
  %302 = add i64 %457, -28
  br label %block_402012

block_401ca8:                                     ; preds = %block_401ca1, %block_401f40
  %303 = phi i64 [ %365, %block_401ca1 ], [ %180, %block_401f40 ]
  %304 = phi %struct.Memory* [ %344, %block_401ca1 ], [ %258, %block_401f40 ]
  %305 = inttoptr i64 %364 to i32*
  %306 = load i32, i32* %305
  %307 = inttoptr i64 %367 to i32*
  %308 = load i32, i32* %307
  %309 = sub i32 %306, %308
  %310 = icmp eq i32 %309, 0
  %311 = lshr i32 %309, 31
  %312 = trunc i32 %311 to i8
  %313 = lshr i32 %306, 31
  %314 = lshr i32 %308, 31
  %315 = xor i32 %314, %313
  %316 = xor i32 %311, %313
  %317 = add nuw nsw i32 %316, %315
  %318 = icmp eq i32 %317, 2
  %319 = icmp ne i8 %312, 0
  %320 = xor i1 %319, %318
  %321 = or i1 %310, %320
  %322 = select i1 %321, i64 12, i64 683
  %323 = add i64 %303, %322
  br i1 %321, label %block_401cb4, label %block_401f53

block_401bd4:                                     ; preds = %block_401be9, %block_401b80
  %324 = phi i64 [ %76, %block_401b80 ], [ %525, %block_401be9 ]
  %325 = phi %struct.Memory* [ %2, %block_401b80 ], [ %325, %block_401be9 ]
  %326 = inttoptr i64 %69 to i32*
  %327 = load i32, i32* %326
  %328 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1156) to i32*)
  %329 = add i32 %328, 1
  %330 = sub i32 %327, %329
  %331 = lshr i32 %330, 31
  %332 = trunc i32 %331 to i8
  %333 = lshr i32 %327, 31
  %334 = lshr i32 %329, 31
  %335 = xor i32 %334, %333
  %336 = xor i32 %331, %333
  %337 = add nuw nsw i32 %336, %335
  %338 = icmp eq i32 %337, 2
  %339 = icmp ne i8 %332, 0
  %340 = xor i1 %339, %338
  %341 = select i1 %340, i64 21, i64 116
  %342 = add i64 %324, %341
  br i1 %340, label %block_401be9, label %block_401c48

block_401c4f:                                     ; preds = %block_401c6b, %block_401c48
  %343 = phi i64 [ %159, %block_401c48 ], [ %645, %block_401c6b ]
  %344 = phi %struct.Memory* [ %325, %block_401c48 ], [ %344, %block_401c6b ]
  %345 = inttoptr i64 %69 to i32*
  %346 = load i32, i32* %345
  %347 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %348 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %349 = sub i32 %347, %348
  %350 = add i32 %349, 1
  %351 = sub i32 %346, %350
  %352 = lshr i32 %351, 31
  %353 = trunc i32 %352 to i8
  %354 = lshr i32 %346, 31
  %355 = lshr i32 %350, 31
  %356 = xor i32 %355, %354
  %357 = xor i32 %352, %354
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = icmp ne i8 %353, 0
  %361 = xor i1 %360, %359
  %362 = select i1 %361, i64 28, i64 82
  %363 = add i64 %343, %362
  br i1 %361, label %block_401c6b, label %block_401ca1

block_401ca1:                                     ; preds = %block_401c4f
  %364 = add i64 %64, -60
  %365 = add i64 %363, 7
  %366 = inttoptr i64 %364 to i32*
  store i32 1, i32* %366
  %367 = add i64 %64, -64
  %368 = add i64 %64, -80
  %369 = add i64 %64, -16
  %370 = add i64 %64, -56
  %371 = add i64 %64, -40
  %372 = add i64 %64, -8
  %373 = add i64 %64, -72
  %374 = add i64 %64, -104
  %375 = add i64 %64, -96
  %376 = add i64 %64, -112
  br label %block_401ca8

block_401dc5:                                     ; preds = %block_401d73
  store i32 0, i32* %38, align 1, !tbaa !1363
  store i32 0, i32* %40, align 1, !tbaa !1363
  store i32 0, i32* %41, align 1, !tbaa !1363
  store i32 0, i32* %43, align 1, !tbaa !1363
  %377 = inttoptr i64 %65 to double*
  %378 = load double, double* %377
  %379 = inttoptr i64 %373 to double*
  %380 = load double, double* %379
  %381 = fdiv double %378, %380
  %382 = inttoptr i64 %374 to double*
  store double %381, double* %382
  %383 = inttoptr i64 %65 to double*
  %384 = load double, double* %383
  store double %384, double* %161, align 1, !tbaa !1244
  store double 0.000000e+00, double* %163, align 1, !tbaa !1244
  %385 = inttoptr i64 %375 to double*
  store double %384, double* %385
  %386 = load double, double* %66, align 1
  %387 = inttoptr i64 %65 to double*
  store double %386, double* %387
  %388 = add i64 %409, 40
  %389 = inttoptr i64 %69 to i32*
  store i32 0, i32* %389
  br label %block_401ded

block_401d73:                                     ; preds = %block_401d8f, %block_401d64
  %390 = phi i64 [ %131, %block_401d64 ], [ %479, %block_401d8f ]
  %391 = phi %struct.Memory* [ %210, %block_401d64 ], [ %391, %block_401d8f ]
  %392 = inttoptr i64 %69 to i32*
  %393 = load i32, i32* %392
  %394 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %395 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %396 = sub i32 %394, %395
  %397 = add i32 %396, 1
  %398 = sub i32 %393, %397
  %399 = lshr i32 %398, 31
  %400 = lshr i32 %393, 31
  %401 = lshr i32 %397, 31
  %402 = xor i32 %401, %400
  %403 = xor i32 %399, %400
  %404 = add nuw nsw i32 %403, %402
  %405 = icmp eq i32 %404, 2
  %406 = icmp ne i32 %399, 0
  %407 = xor i1 %406, %405
  %408 = select i1 %407, i64 28, i64 82
  %409 = add i64 %390, %408
  br i1 %407, label %block_401d8f, label %block_401dc5

block_401f94:                                     ; preds = %block_401fad, %block_401f7e
  %410 = phi i64 [ %95, %block_401f7e ], [ %256, %block_401fad ]
  %411 = phi %struct.Memory* [ %134, %block_401f7e ], [ %411, %block_401fad ]
  %412 = inttoptr i64 %370 to i32*
  %413 = load i32, i32* %412
  %414 = inttoptr i64 %369 to i64*
  %415 = load i64, i64* %414
  %416 = inttoptr i64 %69 to i32*
  %417 = load i32, i32* %416
  %418 = add i32 %417, 1
  %419 = sext i32 %418 to i64
  %420 = shl nsw i64 %419, 2
  %421 = add i64 %415, %420
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422
  %424 = sub i32 %413, %423
  %425 = lshr i32 %424, 31
  %426 = lshr i32 %413, 31
  %427 = lshr i32 %423, 31
  %428 = xor i32 %427, %426
  %429 = xor i32 %425, %426
  %430 = add nuw nsw i32 %429, %428
  %431 = icmp eq i32 %430, 2
  %432 = icmp ne i32 %425, 0
  %433 = xor i1 %432, %431
  %434 = select i1 %433, i64 25, i64 87
  %435 = add i64 %410, %434
  %436 = inttoptr i64 %373 to double*
  %437 = load double, double* %436
  br i1 %433, label %block_401fad, label %block_401feb

block_402012:                                     ; preds = %block_40200b, %block_40202e
  %438 = phi i64 [ %554, %block_40200b ], [ %302, %block_40202e ]
  %439 = phi %struct.Memory* [ %134, %block_40200b ], [ %439, %block_40202e ]
  %440 = inttoptr i64 %69 to i32*
  %441 = load i32, i32* %440
  %442 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %443 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %444 = sub i32 %442, %443
  %445 = add i32 %444, 1
  %446 = sub i32 %441, %445
  %447 = lshr i32 %446, 31
  %448 = lshr i32 %441, 31
  %449 = lshr i32 %445, 31
  %450 = xor i32 %449, %448
  %451 = xor i32 %447, %448
  %452 = add nuw nsw i32 %451, %450
  %453 = icmp eq i32 %452, 2
  %454 = icmp ne i32 %447, 0
  %455 = xor i1 %454, %453
  %456 = select i1 %455, i64 28, i64 97
  %457 = add i64 %438, %456
  br i1 %455, label %block_40202e, label %block_402073

block_401d8f:                                     ; preds = %block_401d73
  %458 = inttoptr i64 %373 to double*
  %459 = load double, double* %458
  %460 = inttoptr i64 %83 to i64*
  %461 = load i64, i64* %460
  %462 = sext i32 %393 to i64
  %463 = shl nsw i64 %462, 3
  %464 = add i64 %463, %461
  %465 = inttoptr i64 %464 to double*
  %466 = load double, double* %465
  %467 = inttoptr i64 %78 to i64*
  %468 = load i64, i64* %467
  %469 = add i64 %463, %468
  %470 = inttoptr i64 %469 to double*
  %471 = load double, double* %470
  %472 = fmul double %466, %471
  store double %472, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %473 = fadd double %459, %472
  store double %473, double* %66, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %474 = inttoptr i64 %373 to double*
  store double %473, double* %474
  %475 = inttoptr i64 %69 to i32*
  %476 = load i32, i32* %475
  %477 = add i32 %476, 1
  %478 = inttoptr i64 %69 to i32*
  store i32 %477, i32* %478
  %479 = add i64 %409, -28
  br label %block_401d73

block_401be9:                                     ; preds = %block_401bd4
  store i32 0, i32* %38, align 1, !tbaa !1363
  store i32 0, i32* %40, align 1, !tbaa !1363
  %480 = inttoptr i64 %78 to i64*
  %481 = load i64, i64* %480
  %482 = sext i32 %327 to i64
  %483 = shl nsw i64 %482, 3
  %484 = add i64 %483, %481
  %485 = load double, double* %66, align 1
  %486 = inttoptr i64 %484 to double*
  store double %485, double* %486
  %487 = inttoptr i64 %79 to i64*
  %488 = load i64, i64* %487
  %489 = inttoptr i64 %69 to i32*
  %490 = load i32, i32* %489
  %491 = sext i32 %490 to i64
  %492 = shl nsw i64 %491, 3
  %493 = add i64 %492, %488
  %494 = inttoptr i64 %493 to double*
  store double %485, double* %494
  %495 = inttoptr i64 %80 to i64*
  %496 = load i64, i64* %495
  %497 = inttoptr i64 %69 to i32*
  %498 = load i32, i32* %497
  %499 = sext i32 %498 to i64
  %500 = shl nsw i64 %499, 3
  %501 = add i64 %500, %496
  %502 = inttoptr i64 %501 to double*
  %503 = load double, double* %502
  %504 = inttoptr i64 %82 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %500, %505
  %507 = inttoptr i64 %506 to double*
  store double %503, double* %507
  %508 = inttoptr i64 %82 to i64*
  %509 = load i64, i64* %508
  %510 = inttoptr i64 %69 to i32*
  %511 = load i32, i32* %510
  %512 = sext i32 %511 to i64
  %513 = shl nsw i64 %512, 3
  %514 = add i64 %513, %509
  %515 = inttoptr i64 %514 to double*
  %516 = load double, double* %515
  store double %516, double* %66, align 1, !tbaa !1244
  store double 0.000000e+00, double* %81, align 1, !tbaa !1244
  %517 = inttoptr i64 %83 to i64*
  %518 = load i64, i64* %517
  %519 = add i64 %513, %518
  %520 = inttoptr i64 %519 to double*
  store double %516, double* %520
  %521 = inttoptr i64 %69 to i32*
  %522 = load i32, i32* %521
  %523 = add i32 %522, 1
  %524 = inttoptr i64 %69 to i32*
  store i32 %523, i32* %524
  %525 = add i64 %342, -21
  br label %block_401bd4

block_401cd7:                                     ; preds = %block_401cbb
  %526 = load double, double* %66, align 1
  %527 = inttoptr i64 %368 to double*
  store double %526, double* %527
  %528 = inttoptr i64 %369 to i64*
  %529 = load i64, i64* %528
  %530 = inttoptr i64 %69 to i32*
  %531 = load i32, i32* %530
  %532 = sext i32 %531 to i64
  %533 = shl nsw i64 %532, 2
  %534 = add i64 %533, %529
  %535 = inttoptr i64 %534 to i32*
  %536 = load i32, i32* %535
  %537 = add i64 %228, 22
  %538 = inttoptr i64 %370 to i32*
  store i32 %536, i32* %538
  br label %block_401ced

block_401e9a:                                     ; preds = %block_401e7e
  %539 = inttoptr i64 %82 to i64*
  %540 = load i64, i64* %539
  %541 = sext i32 %184 to i64
  %542 = shl nsw i64 %541, 3
  %543 = add i64 %542, %540
  %544 = inttoptr i64 %543 to double*
  %545 = load double, double* %544
  %546 = fmul double %545, %545
  store double %546, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %547 = fadd double %202, %546
  %548 = inttoptr i64 %65 to double*
  store double %547, double* %548
  %549 = inttoptr i64 %69 to i32*
  %550 = load i32, i32* %549
  %551 = add i32 %550, 1
  %552 = inttoptr i64 %69 to i32*
  store i32 %551, i32* %552
  %553 = add i64 %200, -28
  br label %block_401e7e

block_40200b:                                     ; preds = %block_401f62
  %554 = add i64 %153, 7
  %555 = inttoptr i64 %69 to i32*
  store i32 0, i32* %555
  br label %block_402012

block_401e09:                                     ; preds = %block_401ded
  %556 = inttoptr i64 %79 to i64*
  %557 = load i64, i64* %556
  %558 = sext i32 %100 to i64
  %559 = shl nsw i64 %558, 3
  %560 = add i64 %559, %557
  %561 = inttoptr i64 %560 to double*
  %562 = load double, double* %561
  %563 = inttoptr i64 %374 to double*
  %564 = load double, double* %563
  %565 = inttoptr i64 %83 to i64*
  %566 = load i64, i64* %565
  %567 = add i64 %559, %566
  %568 = inttoptr i64 %567 to double*
  %569 = load double, double* %568
  %570 = fmul double %564, %569
  %571 = fadd double %562, %570
  %572 = inttoptr i64 %560 to double*
  store double %571, double* %572
  %573 = inttoptr i64 %82 to i64*
  %574 = load i64, i64* %573
  %575 = inttoptr i64 %69 to i32*
  %576 = load i32, i32* %575
  %577 = sext i32 %576 to i64
  %578 = shl nsw i64 %577, 3
  %579 = add i64 %578, %574
  %580 = inttoptr i64 %579 to double*
  %581 = load double, double* %580
  %582 = inttoptr i64 %374 to double*
  %583 = load double, double* %582
  %584 = inttoptr i64 %78 to i64*
  %585 = load i64, i64* %584
  %586 = add i64 %578, %585
  %587 = inttoptr i64 %586 to double*
  %588 = load double, double* %587
  %589 = fmul double %583, %588
  store double %589, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %590 = fsub double %581, %589
  store double %590, double* %66, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %591 = inttoptr i64 %579 to double*
  store double %590, double* %591
  %592 = inttoptr i64 %69 to i32*
  %593 = load i32, i32* %592
  %594 = add i32 %593, 1
  %595 = inttoptr i64 %69 to i32*
  store i32 %594, i32* %595
  %596 = add i64 %116, -28
  br label %block_401ded

block_401e77:                                     ; preds = %block_401ded
  %597 = add i64 %116, 7
  %598 = inttoptr i64 %69 to i32*
  store i32 0, i32* %598
  br label %block_401e7e

block_401cb4:                                     ; preds = %block_401ca8
  %599 = add i64 %323, 7
  %600 = inttoptr i64 %69 to i32*
  store i32 0, i32* %600
  br label %block_401cbb

block_401d06:                                     ; preds = %block_401ced
  %601 = inttoptr i64 %371 to i64*
  %602 = load i64, i64* %601
  %603 = sext i32 %693 to i64
  %604 = shl nsw i64 %603, 3
  %605 = add i64 %604, %602
  %606 = inttoptr i64 %605 to double*
  %607 = load double, double* %606
  %608 = inttoptr i64 %83 to i64*
  %609 = load i64, i64* %608
  %610 = inttoptr i64 %372 to i64*
  %611 = load i64, i64* %610
  %612 = shl nsw i64 %603, 2
  %613 = add i64 %612, %611
  %614 = inttoptr i64 %613 to i32*
  %615 = load i32, i32* %614
  %616 = sext i32 %615 to i64
  %617 = shl nsw i64 %616, 3
  %618 = add i64 %617, %609
  %619 = inttoptr i64 %618 to double*
  %620 = load double, double* %619
  %621 = fmul double %607, %620
  store double %621, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %622 = fadd double %717, %621
  %623 = inttoptr i64 %368 to double*
  store double %622, double* %623
  %624 = inttoptr i64 %370 to i32*
  %625 = load i32, i32* %624
  %626 = add i32 %625, 1
  %627 = inttoptr i64 %370 to i32*
  store i32 %626, i32* %627
  %628 = add i64 %715, -25
  br label %block_401ced

block_401c6b:                                     ; preds = %block_401c4f
  %629 = inttoptr i64 %65 to double*
  %630 = load double, double* %629
  %631 = inttoptr i64 %82 to i64*
  %632 = load i64, i64* %631
  %633 = sext i32 %346 to i64
  %634 = shl nsw i64 %633, 3
  %635 = add i64 %634, %632
  %636 = inttoptr i64 %635 to double*
  %637 = load double, double* %636
  %638 = fmul double %637, %637
  store double %638, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %639 = fadd double %630, %638
  store double %639, double* %66, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %640 = inttoptr i64 %65 to double*
  store double %639, double* %640
  %641 = inttoptr i64 %69 to i32*
  %642 = load i32, i32* %641
  %643 = add i32 %642, 1
  %644 = inttoptr i64 %69 to i32*
  store i32 %643, i32* %644
  %645 = add i64 %363, -28
  br label %block_401c4f

block_402073:                                     ; preds = %block_402012
  %646 = zext i32 %445 to i64
  store i64 %646, i64* %5, align 8, !tbaa !1240
  %647 = inttoptr i64 %368 to double*
  %648 = load double, double* %647
  %649 = add i64 %457, 10
  %650 = load i64, i64* %9, align 8
  %651 = add i64 %650, -8
  %652 = inttoptr i64 %651 to i64*
  store i64 %649, i64* %652
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %654 = bitcast %union.VectorReg* %653 to double*
  %655 = tail call double @sqrt(double %648) #11
  %656 = bitcast %union.VectorReg* %653 to i128*
  store i128 0, i128* %656, align 8, !alias.scope !1614, !noalias !1617
  store double %655, double* %654, align 8, !alias.scope !1614, !noalias !1617
  %657 = add i64 %64, 32
  %658 = inttoptr i64 %657 to i64*
  %659 = load i64, i64* %658
  store i64 %659, i64* %4, align 8, !tbaa !1240
  %660 = inttoptr i64 %659 to double*
  store double %655, double* %660
  %661 = add i64 %650, 144
  %662 = icmp ugt i64 %650, -145
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %21, align 1, !tbaa !1246
  %664 = trunc i64 %661 to i32
  %665 = and i32 %664, 255
  %666 = tail call i32 @llvm.ctpop.i32(i32 %665) #11
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = xor i8 %668, 1
  store i8 %669, i8* %22, align 1, !tbaa !1260
  %670 = xor i64 %650, 16
  %671 = xor i64 %670, %661
  %672 = lshr i64 %671, 4
  %673 = trunc i64 %672 to i8
  %674 = and i8 %673, 1
  store i8 %674, i8* %23, align 1, !tbaa !1261
  %675 = icmp eq i64 %661, 0
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %24, align 1, !tbaa !1262
  %677 = lshr i64 %661, 63
  %678 = trunc i64 %677 to i8
  store i8 %678, i8* %25, align 1, !tbaa !1263
  %679 = lshr i64 %650, 63
  %680 = xor i64 %677, %679
  %681 = add nuw nsw i64 %680, %677
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  store i8 %683, i8* %26, align 1, !tbaa !1264
  %684 = add i64 %650, 152
  %685 = inttoptr i64 %661 to i64*
  %686 = load i64, i64* %685
  store i64 %686, i64* %10, align 8, !tbaa !1240
  %687 = inttoptr i64 %684 to i64*
  %688 = load i64, i64* %687
  store i64 %688, i64* %3, align 8, !tbaa !1240
  %689 = add i64 %650, 160
  store i64 %689, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %439

block_401ced:                                     ; preds = %block_401d06, %block_401cd7
  %690 = phi i64 [ %537, %block_401cd7 ], [ %628, %block_401d06 ]
  %691 = phi %struct.Memory* [ %210, %block_401cd7 ], [ %691, %block_401d06 ]
  %692 = inttoptr i64 %370 to i32*
  %693 = load i32, i32* %692
  %694 = inttoptr i64 %369 to i64*
  %695 = load i64, i64* %694
  %696 = inttoptr i64 %69 to i32*
  %697 = load i32, i32* %696
  %698 = add i32 %697, 1
  %699 = sext i32 %698 to i64
  %700 = shl nsw i64 %699, 2
  %701 = add i64 %695, %700
  %702 = inttoptr i64 %701 to i32*
  %703 = load i32, i32* %702
  %704 = sub i32 %693, %703
  %705 = lshr i32 %704, 31
  %706 = lshr i32 %693, 31
  %707 = lshr i32 %703, 31
  %708 = xor i32 %707, %706
  %709 = xor i32 %705, %706
  %710 = add nuw nsw i32 %709, %708
  %711 = icmp eq i32 %710, 2
  %712 = icmp ne i32 %705, 0
  %713 = xor i1 %712, %711
  %714 = select i1 %713, i64 25, i64 87
  %715 = add i64 %690, %714
  %716 = inttoptr i64 %368 to double*
  %717 = load double, double* %716
  br i1 %713, label %block_401d06, label %block_401d44

block_401f02:                                     ; preds = %block_401ee6
  %718 = inttoptr i64 %82 to i64*
  %719 = load i64, i64* %718
  %720 = sext i32 %260 to i64
  %721 = shl nsw i64 %720, 3
  %722 = add i64 %721, %719
  %723 = inttoptr i64 %722 to double*
  %724 = load double, double* %723
  %725 = inttoptr i64 %376 to double*
  %726 = load double, double* %725
  %727 = inttoptr i64 %83 to i64*
  %728 = load i64, i64* %727
  %729 = add i64 %721, %728
  %730 = inttoptr i64 %729 to double*
  %731 = load double, double* %730
  %732 = fmul double %726, %731
  store double %732, double* %161, align 1, !tbaa !1244
  store i64 0, i64* %162, align 1, !tbaa !1244
  %733 = fadd double %724, %732
  store double %733, double* %66, align 1, !tbaa !1244
  store i64 0, i64* %37, align 1, !tbaa !1244
  %734 = inttoptr i64 %729 to double*
  store double %733, double* %734
  %735 = inttoptr i64 %69 to i32*
  %736 = load i32, i32* %735
  %737 = add i32 %736, 1
  %738 = inttoptr i64 %69 to i32*
  store i32 %737, i32* %738
  %739 = add i64 %276, -28
  br label %block_401ee6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403150___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403150:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %12, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  %22 = load i64, i64* %16, align 8
  %23 = add i64 %19, -16
  %24 = inttoptr i64 %23 to i64*
  store i64 %22, i64* %24
  %25 = load i64, i64* %9, align 8
  store i64 %25, i64* %17, align 8, !tbaa !1240
  %26 = load i64, i64* %15, align 8
  %27 = add i64 %19, -24
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = load i64, i64* %14, align 8
  %30 = add i64 %19, -32
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  store i64 ptrtoint (%seg_604e00__init_array_type* @seg_604e00__init_array to i64), i64* %14, align 8, !tbaa !1240
  %32 = load i64, i64* %13, align 8
  %33 = add i64 %19, -40
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %8, align 8
  %36 = add i64 %19, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %15, align 8, !tbaa !1240
  %40 = load i64, i64* %10, align 8
  store i64 %40, i64* %16, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ashr (i64 sub (i64 add (i64 ptrtoint (%seg_604e00__init_array_type* @seg_604e00__init_array to i64), i64 8), i64 ptrtoint (%seg_604e00__init_array_type* @seg_604e00__init_array to i64)), i64 3), i64* %13, align 8, !tbaa !1240
  %47 = add i64 %1, -11192
  %48 = add i64 %1, 49
  %49 = add i64 %19, -64
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50
  store i64 %49, i64* %12, align 8, !tbaa !1240
  %51 = tail call %struct.Memory* @sub_400598__init_proc(%struct.State* nonnull %0, i64 %47, %struct.Memory* %2)
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %3, align 8
  %54 = icmp eq i64 %52, 0
  %55 = select i1 %54, i64 37, i64 5
  %56 = add i64 %53, %55
  br i1 %54, label %block_4031a6, label %block_403186

block_4031a6.loopexit:                            ; preds = %block_403190
  br label %block_4031a6

block_4031a6:                                     ; preds = %block_4031a6.loopexit, %block_403150
  %57 = phi %struct.Memory* [ %51, %block_403150 ], [ %119, %block_4031a6.loopexit ]
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %58, 8
  %60 = icmp ugt i64 %58, -9
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %41, align 1, !tbaa !1246
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %42, align 1, !tbaa !1260
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %43, align 1, !tbaa !1261
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %44, align 1, !tbaa !1262
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %45, align 1, !tbaa !1263
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %46, align 1, !tbaa !1264
  %81 = add i64 %58, 16
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = add i64 %58, 24
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %13, align 8, !tbaa !1240
  %87 = add i64 %58, 32
  %88 = inttoptr i64 %84 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %14, align 8, !tbaa !1240
  %90 = add i64 %58, 40
  %91 = inttoptr i64 %87 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %15, align 8, !tbaa !1240
  %93 = add i64 %58, 48
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %16, align 8, !tbaa !1240
  %96 = add i64 %58, 56
  %97 = inttoptr i64 %93 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %17, align 8, !tbaa !1240
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %3, align 8, !tbaa !1240
  %101 = add i64 %58, 64
  store i64 %101, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %57

block_403186:                                     ; preds = %block_403150
  store i64 0, i64* %8, align 8, !tbaa !1240
  store i8 0, i8* %41, align 1, !tbaa !1246
  store i8 1, i8* %42, align 1, !tbaa !1260
  store i8 1, i8* %44, align 1, !tbaa !1262
  store i8 0, i8* %45, align 1, !tbaa !1263
  store i8 0, i8* %46, align 1, !tbaa !1264
  store i8 0, i8* %43, align 1, !tbaa !1261
  %102 = add i64 %56, 10
  br label %block_403190

block_403190:                                     ; preds = %block_403190, %block_403186
  %103 = phi i64 [ 0, %block_403186 ], [ %122, %block_403190 ]
  %104 = phi i64 [ %102, %block_403186 ], [ %150, %block_403190 ]
  %105 = phi %struct.Memory* [ %51, %block_403186 ], [ %119, %block_403190 ]
  %106 = load i64, i64* %17, align 8
  store i64 %106, i64* %9, align 8, !tbaa !1240
  %107 = load i64, i64* %16, align 8
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %108 = load i32, i32* %7, align 4
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %110 = load i64, i64* %14, align 8
  %111 = shl i64 %103, 3
  %112 = add i64 %111, %110
  %113 = add i64 %104, 13
  %114 = load i64, i64* %12, align 8, !tbaa !1240
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %117 = inttoptr i64 %112 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %118, %struct.Memory* %105)
  %120 = load i64, i64* %8, align 8
  %121 = load i64, i64* %3, align 8
  %122 = add i64 %120, 1
  store i64 %122, i64* %8, align 8, !tbaa !1240
  %123 = lshr i64 %122, 63
  %124 = load i64, i64* %13, align 8
  %125 = sub i64 %124, %122
  %126 = icmp ult i64 %124, %122
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %41, align 1, !tbaa !1246
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #11
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %42, align 1, !tbaa !1260
  %134 = xor i64 %122, %124
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %43, align 1, !tbaa !1261
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %44, align 1, !tbaa !1262
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %45, align 1, !tbaa !1263
  %143 = lshr i64 %124, 63
  %144 = xor i64 %123, %143
  %145 = xor i64 %141, %143
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %46, align 1, !tbaa !1264
  %149 = select i1 %139, i64 9, i64 -13
  %150 = add i64 %121, %149
  br i1 %139, label %block_4031a6.loopexit, label %block_403190
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ce0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400ce0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %23 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %24 = load i64, i64* %14, align 8
  %25 = load i64, i64* %13, align 8, !tbaa !1240
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27
  store i64 %26, i64* %14, align 8, !tbaa !1240
  %28 = load i64, i64* %20, align 8
  %29 = add i64 %25, -16
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  %31 = load i64, i64* %19, align 8
  %32 = add i64 %25, -24
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %18, align 8
  %35 = add i64 %25, -32
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %17, align 8
  %38 = add i64 %25, -40
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = load i64, i64* %9, align 8
  %41 = add i64 %25, -48
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = add i64 %25, -472
  %44 = icmp ult i64 %41, 424
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %45, i8* %46, align 1, !tbaa !1246
  %47 = trunc i64 %43 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #11
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %52, i8* %53, align 1, !tbaa !1260
  %54 = xor i64 %41, %43
  %55 = lshr i64 %54, 4
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %57, i8* %58, align 1, !tbaa !1261
  %59 = icmp eq i64 %43, 0
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %60, i8* %61, align 1, !tbaa !1262
  %62 = lshr i64 %43, 63
  %63 = trunc i64 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %63, i8* %64, align 1, !tbaa !1263
  %65 = lshr i64 %41, 63
  %66 = xor i64 %62, %65
  %67 = add nuw nsw i64 %66, %65
  %68 = icmp eq i64 %67, 2
  %69 = zext i1 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %69, i8* %70, align 1, !tbaa !1264
  %71 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  %72 = bitcast [32 x %union.VectorReg]* %21 to double*
  store double %71, double* %72, align 1, !tbaa !1244
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %74 = bitcast i64* %73 to double*
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %75 = add i64 %25, -52
  %76 = inttoptr i64 %75 to i32*
  store i32 0, i32* %76
  %77 = add i64 %25, -56
  %78 = load i32, i32* %7, align 4
  %79 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %79
  %80 = add i64 %25, -64
  %81 = load i64, i64* %11, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %82
  %83 = add i64 %25, -112
  %84 = inttoptr i64 %83 to double*
  store double %71, double* %84
  %85 = add i64 %1, -272
  %86 = add i64 %1, 52
  %87 = add i64 %25, -480
  %88 = inttoptr i64 %87 to i64*
  store i64 %86, i64* %88
  store i64 %87, i64* %13, align 8, !tbaa !1240
  %89 = tail call %struct.Memory* @sub_400bd0_allocate_arrays(%struct.State* nonnull %0, i64 %85, %struct.Memory* %2)
  %90 = load i64, i64* %14, align 8
  %91 = add i64 %90, -60
  %92 = load i64, i64* %3, align 8
  %93 = inttoptr i64 %91 to i32*
  store i32 0, i32* %93
  %94 = add i64 %90, -204
  %95 = load i32, i32* %5, align 4
  %96 = add i64 %92, 13
  store i64 %96, i64* %3, align 8
  %97 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %97
  br label %block_400d21

block_4016d5:                                     ; preds = %block_4016aa, %block_4016a5
  %98 = phi i64 [ %1739, %block_4016aa ], [ %377, %block_4016a5 ]
  %99 = phi i64 [ %1747, %block_4016aa ], [ %379, %block_4016a5 ]
  %100 = phi %struct.Memory* [ %2069, %block_4016aa ], [ %2069, %block_4016a5 ]
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1379), i64* %12, align 8, !tbaa !1240
  store i64 14000, i64* %1563, align 8, !tbaa !1240
  store i8 0, i8* %46, align 1, !tbaa !1246
  store i8 1, i8* %53, align 1, !tbaa !1260
  store i8 1, i8* %61, align 1, !tbaa !1262
  store i8 0, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  store i8 0, i8* %58, align 1, !tbaa !1261
  store i64 15, i64* %1564, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1425), i64* %16, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1429), i64* %1565, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1435), i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1439), i64* %19, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1451), i64* %20, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1460), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1480), i64* %18, align 8, !tbaa !1240
  %101 = add i64 %98, -304
  %102 = inttoptr i64 %101 to i32*
  store i32 0, i32* %102
  %103 = add i64 %98, -129
  %104 = inttoptr i64 %103 to i8*
  %105 = load i8, i8* %104
  %106 = add i64 %98, -112
  %107 = inttoptr i64 %106 to double*
  %108 = load double, double* %107
  store double %108, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %109 = add i64 %98, -120
  %110 = inttoptr i64 %109 to double*
  %111 = load double, double* %110
  store double %111, double* %837, align 1, !tbaa !1244
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  %112 = add i64 %98, -305
  %113 = inttoptr i64 %112 to i8*
  store i8 %105, i8* %113
  %114 = add i64 %98, -136
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115
  %117 = add i64 %98, -312
  %118 = inttoptr i64 %117 to i32*
  store i32 %116, i32* %118
  %119 = load i64, i64* %14, align 8
  %120 = add i64 %119, -305
  %121 = inttoptr i64 %120 to i8*
  %122 = load i8, i8* %121
  %123 = add i64 %119, -320
  %124 = inttoptr i64 %123 to i64*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1407), i64* %124
  %125 = sext i8 %122 to i64
  %126 = and i64 %125, 4294967295
  store i64 %126, i64* %11, align 8, !tbaa !1240
  %127 = add i64 %119, -304
  %128 = inttoptr i64 %127 to i32*
  %129 = load i32, i32* %128
  %130 = zext i32 %129 to i64
  %131 = add i64 %119, -328
  %132 = inttoptr i64 %131 to i64*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1382), i64* %132
  store i64 %130, i64* %10, align 8, !tbaa !1240
  %133 = add i64 %119, -336
  %134 = inttoptr i64 %133 to i64*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1413), i64* %134
  store i64 %130, i64* %15, align 8, !tbaa !1240
  %135 = inttoptr i64 %131 to i64*
  %136 = load i64, i64* %135
  %137 = load i64, i64* %13, align 8
  %138 = inttoptr i64 %137 to i64*
  store i64 %136, i64* %138
  %139 = add i64 %119, -312
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140
  %142 = add i64 %137, 8
  %143 = inttoptr i64 %142 to i32*
  store i32 %141, i32* %143
  %144 = inttoptr i64 %123 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %137, 16
  %147 = inttoptr i64 %146 to i64*
  store i64 %145, i64* %147
  %148 = inttoptr i64 %133 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %8, align 8, !tbaa !1240
  %150 = add i64 %137, 24
  %151 = inttoptr i64 %150 to i64*
  store i64 %149, i64* %151
  %152 = add i64 %137, 32
  %153 = load i64, i64* %16, align 8
  %154 = inttoptr i64 %152 to i64*
  store i64 %153, i64* %154
  %155 = add i64 %137, 40
  %156 = load i64, i64* %1565, align 8
  %157 = inttoptr i64 %155 to i64*
  store i64 %156, i64* %157
  %158 = add i64 %137, 48
  %159 = load i64, i64* %9, align 8
  %160 = inttoptr i64 %158 to i64*
  store i64 %159, i64* %160
  %161 = add i64 %137, 56
  %162 = load i64, i64* %19, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %162, i64* %163
  %164 = add i64 %137, 64
  %165 = load i64, i64* %20, align 8
  %166 = inttoptr i64 %164 to i64*
  store i64 %165, i64* %166
  %167 = add i64 %137, 72
  %168 = load i64, i64* %17, align 8
  %169 = inttoptr i64 %167 to i64*
  store i64 %168, i64* %169
  %170 = add i64 %137, 80
  %171 = load i64, i64* %18, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %171, i64* %172
  %173 = add i64 %99, 4875
  %174 = add i64 %99, 291
  %175 = add i64 %137, -8
  %176 = inttoptr i64 %175 to i64*
  store i64 %174, i64* %176
  store i64 %175, i64* %13, align 8, !tbaa !1240
  %177 = tail call %struct.Memory* @sub_4029e0_print_results(%struct.State* nonnull %0, i64 %173, %struct.Memory* %100)
  %178 = load i64, i64* %3, align 8
  %179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1136) to i32*)
  store i8 0, i8* %46, align 1, !tbaa !1246
  %180 = and i32 %179, 255
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #11
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %53, align 1, !tbaa !1260
  store i8 0, i8* %58, align 1, !tbaa !1261
  %185 = icmp eq i32 %179, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %61, align 1, !tbaa !1262
  %187 = lshr i32 %179, 31
  %188 = trunc i32 %187 to i8
  store i8 %188, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  %189 = select i1 %185, i64 380, i64 14
  %190 = add i64 %178, %189
  store i64 %190, i64* %3, align 8, !tbaa !1240
  br i1 %185, label %block_4016d5.block_401974_crit_edge, label %block_401806

block_4016d5.block_401974_crit_edge:              ; preds = %block_4016d5
  %191 = load i64, i64* %8, align 8
  %192 = trunc i64 %191 to i32
  br label %block_401974

block_400f7e:                                     ; preds = %block_400f62
  %193 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1048) to i64*)
  %194 = sext i32 %2277 to i64
  %195 = shl nsw i64 %194, 2
  %196 = add i64 %195, %193
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %1563, align 8, !tbaa !1240
  %200 = add i64 %2294, 18
  %201 = inttoptr i64 %899 to i32*
  store i32 %198, i32* %201
  br label %block_400f90

block_400ffa:                                     ; preds = %block_401007, %block_400ff3
  %202 = phi i64 [ %1463, %block_400ff3 ], [ %2273, %block_401007 ]
  %203 = phi %struct.Memory* [ %2275, %block_400ff3 ], [ %203, %block_401007 ]
  %204 = inttoptr i64 %1462 to i32*
  %205 = load i32, i32* %204
  %206 = add i32 %205, -14001
  %207 = lshr i32 %206, 31
  %208 = trunc i32 %207 to i8
  %209 = lshr i32 %205, 31
  %210 = xor i32 %207, %209
  %211 = add nuw nsw i32 %210, %209
  %212 = icmp eq i32 %211, 2
  %213 = icmp ne i8 %208, 0
  %214 = xor i1 %213, %212
  %215 = select i1 %214, i64 13, i64 52
  %216 = add i64 %202, %215
  br i1 %214, label %block_401007, label %block_40102e

block_401472:                                     ; preds = %block_4013f5, %block_40145b
  %217 = phi i64 [ %2089, %block_4013f5 ], [ %589, %block_40145b ]
  %218 = phi i64 [ %2108, %block_4013f5 ], [ %583, %block_40145b ]
  %219 = phi i64 [ %2136, %block_4013f5 ], [ %587, %block_40145b ]
  %220 = phi %struct.Memory* [ %311, %block_4013f5 ], [ %311, %block_40145b ]
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1126), i64* %12, align 8, !tbaa !1240
  %221 = add i64 %218, -72
  %222 = inttoptr i64 %221 to i32*
  %223 = load i32, i32* %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %11, align 8, !tbaa !1240
  %225 = add i64 %218, -80
  %226 = inttoptr i64 %225 to double*
  %227 = load double, double* %226
  store double %227, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %228 = add i64 %218, -104
  %229 = inttoptr i64 %228 to double*
  %230 = load double, double* %229
  store double %230, double* %837, align 1, !tbaa !1244
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  store i8 2, i8* %1562, align 1, !tbaa !1332
  %231 = add i64 %219, 30
  %232 = add i64 %217, -8
  %233 = inttoptr i64 %232 to i64*
  store i64 %231, i64* %233
  %234 = load i64, i64* %660, align 8, !alias.scope !1619, !noalias !1622
  %235 = load i64, i64* %659, align 8, !alias.scope !1619, !noalias !1622
  %236 = load i64, i64* %15, align 8, !alias.scope !1619, !noalias !1622
  %237 = load i64, i64* %1564, align 8, !alias.scope !1619, !noalias !1622
  %238 = inttoptr i64 %217 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %217, 8
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %217, 16
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %217, 24
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %217, 32
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %217, 40
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %217, 48
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  %258 = add i64 %217, 56
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  %261 = add i64 %217, 64
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  %264 = add i64 %217, 72
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  %267 = inttoptr i64 %232 to i64*
  %268 = load i64, i64* %267
  store i64 %268, i64* %3, align 8, !alias.scope !1619, !noalias !1622
  store i64 %217, i64* %13, align 8, !alias.scope !1619, !noalias !1622
  %269 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1126), i64 %224, i64 %234, i64 %235, i64 %236, i64 %237, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254, i64 %257, i64 %260, i64 %263, i64 %266), !noalias !1619
  store i64 %269, i64* %1573, align 8, !alias.scope !1619, !noalias !1622
  %270 = load i64, i64* %14, align 8
  %271 = add i64 %270, -64
  %272 = load i64, i64* %3, align 8
  %273 = inttoptr i64 %271 to i32*
  store i32 0, i32* %273
  %274 = add i64 %270, -264
  %275 = trunc i64 %269 to i32
  %276 = add i64 %272, 13
  store i64 %276, i64* %3, align 8
  %277 = inttoptr i64 %274 to i32*
  store i32 %275, i32* %277
  %278 = add i64 %270, -96
  br label %block_40149d

block_40196f:                                     ; preds = %block_401858
  %279 = add i64 %639, 5
  store i64 %279, i64* %3, align 8, !tbaa !1240
  br label %block_401974

block_4014ee:                                     ; preds = %block_40149d
  %280 = zext i32 %1945 to i64
  %281 = zext i32 %1949 to i64
  store i64 %280, i64* %8, align 8, !tbaa !1240
  store i64 %281, i64* %10, align 8, !tbaa !1240
  %282 = add i64 %270, -72
  %283 = inttoptr i64 %282 to i32*
  %284 = load i32, i32* %283
  %285 = add i32 %284, 1
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %8, align 8, !tbaa !1240
  %287 = icmp eq i32 %284, -1
  %288 = icmp eq i32 %285, 0
  %289 = or i1 %287, %288
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %46, align 1, !tbaa !1246
  %291 = and i32 %285, 255
  %292 = tail call i32 @llvm.ctpop.i32(i32 %291) #11
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = xor i8 %294, 1
  store i8 %295, i8* %53, align 1, !tbaa !1260
  %296 = xor i32 %285, %284
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %58, align 1, !tbaa !1261
  %300 = zext i1 %288 to i8
  store i8 %300, i8* %61, align 1, !tbaa !1262
  %301 = lshr i32 %285, 31
  %302 = trunc i32 %301 to i8
  store i8 %302, i8* %64, align 1, !tbaa !1263
  %303 = lshr i32 %284, 31
  %304 = xor i32 %301, %303
  %305 = add nuw nsw i32 %304, %301
  %306 = icmp eq i32 %305, 2
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %70, align 1, !tbaa !1264
  %308 = inttoptr i64 %282 to i32*
  store i32 %285, i32* %308
  %309 = add i64 %1961, -552
  store i64 %309, i64* %3, align 8, !tbaa !1240
  br label %block_4012c6

block_40136b:                                     ; preds = %block_401357, %block_401387
  %310 = phi i64 [ %2183, %block_401357 ], [ %932, %block_401387 ]
  %311 = phi %struct.Memory* [ %2175, %block_401357 ], [ %311, %block_401387 ]
  %312 = inttoptr i64 %2182 to i32*
  %313 = load i32, i32* %312
  %314 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %315 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %316 = sub i32 %314, %315
  %317 = add i32 %316, 1
  %318 = sub i32 %313, %317
  %319 = lshr i32 %318, 31
  %320 = lshr i32 %313, 31
  %321 = lshr i32 %317, 31
  %322 = xor i32 %321, %320
  %323 = xor i32 %319, %320
  %324 = add nuw nsw i32 %323, %322
  %325 = icmp eq i32 %324, 2
  %326 = icmp ne i32 %319, 0
  %327 = xor i1 %326, %325
  %328 = select i1 %327, i64 28, i64 138
  %329 = add i64 %310, %328
  br i1 %327, label %block_401387, label %block_4013f5

block_4011e9:                                     ; preds = %block_401205, %block_4011b4
  %330 = phi i64 [ %1442, %block_4011b4 ], [ %2376, %block_401205 ]
  %331 = phi %struct.Memory* [ %1471, %block_4011b4 ], [ %331, %block_401205 ]
  %332 = inttoptr i64 %1518 to i32*
  %333 = load i32, i32* %332
  %334 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %335 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %336 = sub i32 %334, %335
  %337 = add i32 %336, 1
  %338 = sub i32 %333, %337
  %339 = lshr i32 %338, 31
  %340 = lshr i32 %333, 31
  %341 = lshr i32 %337, 31
  %342 = xor i32 %341, %340
  %343 = xor i32 %339, %340
  %344 = add nuw nsw i32 %343, %342
  %345 = icmp eq i32 %344, 2
  %346 = icmp ne i32 %339, 0
  %347 = xor i1 %346, %345
  %348 = select i1 %347, i64 28, i64 81
  %349 = add i64 %330, %348
  br i1 %347, label %block_401205, label %block_40123a

block_401862:                                     ; preds = %block_401858
  %350 = zext i32 %614 to i64
  store i64 %350, i64* %12, align 8, !tbaa !1240
  %351 = add i64 %639, -3250
  %352 = add i64 %639, 8
  %353 = load i64, i64* %13, align 8, !tbaa !1240
  %354 = add i64 %353, -8
  %355 = inttoptr i64 %354 to i64*
  store i64 %352, i64* %355
  store i64 %354, i64* %13, align 8, !tbaa !1240
  %356 = tail call %struct.Memory* @sub_400bb0_timer_read(%struct.State* nonnull %0, i64 %351, %struct.Memory* %611)
  %357 = load i64, i64* %14, align 8
  %358 = add i64 %357, -112
  %359 = load i64, i64* %3, align 8
  %360 = load double, double* %72, align 1
  %361 = inttoptr i64 %358 to double*
  store double %360, double* %361
  %362 = add i64 %357, -60
  %363 = inttoptr i64 %362 to i32*
  %364 = load i32, i32* %363
  store i8 0, i8* %46, align 1, !tbaa !1246
  %365 = and i32 %364, 255
  %366 = tail call i32 @llvm.ctpop.i32(i32 %365) #11
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  store i8 %369, i8* %53, align 1, !tbaa !1260
  store i8 0, i8* %58, align 1, !tbaa !1261
  %370 = icmp eq i32 %364, 0
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %61, align 1, !tbaa !1262
  %372 = lshr i32 %364, 31
  %373 = trunc i32 %372 to i8
  store i8 %373, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  %374 = select i1 %370, i64 15, i64 60
  %375 = add i64 %359, %374
  %376 = add i64 %375, 10
  store i64 %376, i64* %3, align 8
  br i1 %370, label %block_401879, label %block_4018a6

block_4016a5:                                     ; preds = %block_40169f
  store i32 0, i32* %1913, align 1, !tbaa !1363
  store i32 0, i32* %1915, align 1, !tbaa !1363
  store i32 0, i32* %1596, align 1, !tbaa !1363
  store i32 0, i32* %1597, align 1, !tbaa !1363
  %377 = load i64, i64* %14, align 8
  %378 = add i64 %377, -120
  %379 = add i64 %1731, 48
  store i64 %379, i64* %3, align 8
  %380 = load double, double* %72, align 1
  %381 = inttoptr i64 %378 to double*
  store double %380, double* %381
  br label %block_4016d5

block_40183a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212, %block_401827, %block_40182d
  %382 = phi i64 [ %2341, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212 ], [ %1560, %block_401827 ], [ %1468, %block_40182d ]
  %383 = phi %struct.Memory* [ %2340, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212 ], [ %2340, %block_401827 ], [ %2340, %block_40182d ]
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1487), i64* %12, align 8, !tbaa !1240
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %384 = add i64 %382, 17
  %385 = load i64, i64* %13, align 8, !tbaa !1240
  %386 = add i64 %385, -8
  %387 = inttoptr i64 %386 to i64*
  store i64 %384, i64* %387
  %388 = load i64, i64* %11, align 8, !alias.scope !1624, !noalias !1627
  %389 = load i64, i64* %660, align 8, !alias.scope !1624, !noalias !1627
  %390 = load i64, i64* %659, align 8, !alias.scope !1624, !noalias !1627
  %391 = load i64, i64* %15, align 8, !alias.scope !1624, !noalias !1627
  %392 = load i64, i64* %1564, align 8, !alias.scope !1624, !noalias !1627
  %393 = inttoptr i64 %385 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %385, 8
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %385, 16
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %385, 24
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %385, 32
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %385, 40
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %385, 48
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %385, 56
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = add i64 %385, 64
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %385, 72
  %420 = inttoptr i64 %419 to i64*
  %421 = load i64, i64* %420
  %422 = inttoptr i64 %386 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %3, align 8, !alias.scope !1624, !noalias !1627
  store i64 %385, i64* %13, align 8, !alias.scope !1624, !noalias !1627
  %424 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1487), i64 %388, i64 %389, i64 %390, i64 %391, i64 %392, i64 %394, i64 %397, i64 %400, i64 %403, i64 %406, i64 %409, i64 %412, i64 %415, i64 %418, i64 %421), !noalias !1624
  store i64 %424, i64* %1573, align 8, !alias.scope !1624, !noalias !1627
  %425 = load i64, i64* %14, align 8
  %426 = add i64 %425, -60
  %427 = load i64, i64* %3, align 8
  %428 = inttoptr i64 %426 to i32*
  store i32 0, i32* %428
  %429 = add i64 %425, -340
  %430 = trunc i64 %424 to i32
  %431 = add i64 %427, 13
  store i64 %431, i64* %3, align 8
  %432 = inttoptr i64 %429 to i32*
  store i32 %430, i32* %432
  br label %block_401858

block_40195c.sink.split:                          ; preds = %block_401879, %block_4018fd
  %433 = phi i64 [ %1639, %block_4018fd ], [ %1718, %block_401879 ]
  %434 = phi i64 [ %1058, %block_4018fd ], [ %357, %block_401879 ]
  %435 = phi %union.vec128_t* [ %23, %block_4018fd ], [ %1566, %block_401879 ]
  %436 = phi i64 [ 368, %block_4018fd ], [ 112, %block_401879 ]
  %437 = phi i64 [ 8, %block_4018fd ], [ 5, %block_401879 ]
  %438 = phi %struct.Memory* [ %356, %block_4018fd ], [ %356, %block_401879 ]
  %439 = phi i8 [ 2, %block_4018fd ], [ 1, %block_401879 ]
  %440 = phi i64 [ 372, %block_4018fd ], [ 344, %block_401879 ]
  %441 = phi i64 [ 5, %block_4018fd ], [ 187, %block_401879 ]
  %442 = bitcast %union.vec128_t* %435 to i8*
  %443 = sub i64 %434, %436
  %444 = add i64 %433, %437
  store i64 %444, i64* %3, align 8
  %445 = inttoptr i64 %443 to double*
  %446 = load double, double* %445
  %447 = bitcast %union.vec128_t* %435 to double*
  store double %446, double* %447, align 1, !tbaa !1244
  %448 = getelementptr inbounds i8, i8* %442, i64 8
  %449 = bitcast i8* %448 to double*
  store double 0.000000e+00, double* %449, align 1, !tbaa !1244
  %450 = load i64, i64* %3, align 8
  store i8 %439, i8* %1562, align 1, !tbaa !1332
  %451 = add i64 %450, 7
  %452 = load i64, i64* %13, align 8, !tbaa !1240
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %451, i64* %454
  %455 = load i64, i64* %1574, align 8, !alias.scope !1629, !noalias !1632
  %456 = load i64, i64* %11, align 8, !alias.scope !1629, !noalias !1632
  %457 = load i64, i64* %660, align 8, !alias.scope !1629, !noalias !1632
  %458 = load i64, i64* %659, align 8, !alias.scope !1629, !noalias !1632
  %459 = load i64, i64* %15, align 8, !alias.scope !1629, !noalias !1632
  %460 = load i64, i64* %1564, align 8, !alias.scope !1629, !noalias !1632
  %461 = inttoptr i64 %452 to i64*
  %462 = load i64, i64* %461
  %463 = add i64 %452, 8
  %464 = inttoptr i64 %463 to i64*
  %465 = load i64, i64* %464
  %466 = add i64 %452, 16
  %467 = inttoptr i64 %466 to i64*
  %468 = load i64, i64* %467
  %469 = add i64 %452, 24
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  %472 = add i64 %452, 32
  %473 = inttoptr i64 %472 to i64*
  %474 = load i64, i64* %473
  %475 = add i64 %452, 40
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = add i64 %452, 48
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479
  %481 = add i64 %452, 56
  %482 = inttoptr i64 %481 to i64*
  %483 = load i64, i64* %482
  %484 = add i64 %452, 64
  %485 = inttoptr i64 %484 to i64*
  %486 = load i64, i64* %485
  %487 = add i64 %452, 72
  %488 = inttoptr i64 %487 to i64*
  %489 = load i64, i64* %488
  %490 = inttoptr i64 %453 to i64*
  %491 = load i64, i64* %490
  store i64 %491, i64* %3, align 8, !alias.scope !1629, !noalias !1632
  store i64 %452, i64* %13, align 8, !alias.scope !1629, !noalias !1632
  %492 = tail call i64 @printf(i64 %455, i64 %456, i64 %457, i64 %458, i64 %459, i64 %460, i64 %462, i64 %465, i64 %468, i64 %471, i64 %474, i64 %477, i64 %480, i64 %483, i64 %486, i64 %489), !noalias !1629
  store i64 %492, i64* %1573, align 8, !alias.scope !1629, !noalias !1632
  %493 = load i64, i64* %14, align 8
  %494 = sub i64 %493, %440
  %495 = trunc i64 %492 to i32
  %496 = load i64, i64* %3, align 8
  %497 = add i64 %496, 6
  store i64 %497, i64* %3, align 8
  %498 = inttoptr i64 %494 to i32*
  store i32 %495, i32* %498
  br label %block_40195c

block_40195c:                                     ; preds = %block_4018a6, %block_40195c.sink.split
  %499 = phi i64 [ %1058, %block_4018a6 ], [ %493, %block_40195c.sink.split ]
  %500 = phi i64 [ %1088, %block_4018a6 ], [ %497, %block_40195c.sink.split ]
  %501 = phi i64 [ 5, %block_4018a6 ], [ %441, %block_40195c.sink.split ]
  %502 = phi %struct.Memory* [ %356, %block_4018a6 ], [ %438, %block_40195c.sink.split ]
  %503 = add i64 %500, %501
  %504 = add i64 %499, -60
  %505 = inttoptr i64 %504 to i32*
  %506 = load i32, i32* %505
  %507 = add i32 %506, 1
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %8, align 8, !tbaa !1240
  %509 = icmp eq i32 %506, -1
  %510 = icmp eq i32 %507, 0
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %46, align 1, !tbaa !1246
  %513 = and i32 %507, 255
  %514 = tail call i32 @llvm.ctpop.i32(i32 %513) #11
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  store i8 %517, i8* %53, align 1, !tbaa !1260
  %518 = xor i32 %507, %506
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  store i8 %521, i8* %58, align 1, !tbaa !1261
  %522 = zext i1 %510 to i8
  store i8 %522, i8* %61, align 1, !tbaa !1262
  %523 = lshr i32 %507, 31
  %524 = trunc i32 %523 to i8
  store i8 %524, i8* %64, align 1, !tbaa !1263
  %525 = lshr i32 %506, 31
  %526 = xor i32 %523, %525
  %527 = add nuw nsw i32 %526, %523
  %528 = icmp eq i32 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %70, align 1, !tbaa !1264
  %530 = inttoptr i64 %504 to i32*
  store i32 %507, i32* %530
  %531 = add i64 %503, -260
  store i64 %531, i64* %3, align 8, !tbaa !1240
  br label %block_401858

block_4012d0:                                     ; preds = %block_4012c6
  %532 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1136) to i32*)
  store i8 0, i8* %46, align 1, !tbaa !1246
  %533 = and i32 %532, 255
  %534 = tail call i32 @llvm.ctpop.i32(i32 %533) #11
  %535 = trunc i32 %534 to i8
  %536 = and i8 %535, 1
  %537 = xor i8 %536, 1
  store i8 %537, i8* %53, align 1, !tbaa !1260
  store i8 0, i8* %58, align 1, !tbaa !1261
  %538 = icmp eq i32 %532, 0
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %61, align 1, !tbaa !1262
  %540 = lshr i32 %532, 31
  %541 = trunc i32 %540 to i8
  store i8 %541, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  %542 = select i1 %538, i64 24, i64 14
  %543 = add i64 %964, %542
  store i64 %543, i64* %3, align 8, !tbaa !1240
  br i1 %538, label %block_4012e8, label %block_4012de

block_40145b:                                     ; preds = %block_4013f5
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1074), i64* %12, align 8, !tbaa !1240
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %544 = add i64 %2136, 17
  %545 = inttoptr i64 %2090 to i64*
  store i64 %544, i64* %545
  %546 = load i64, i64* %11, align 8, !alias.scope !1634, !noalias !1637
  %547 = load i64, i64* %660, align 8, !alias.scope !1634, !noalias !1637
  %548 = load i64, i64* %659, align 8, !alias.scope !1634, !noalias !1637
  %549 = load i64, i64* %15, align 8, !alias.scope !1634, !noalias !1637
  %550 = load i64, i64* %1564, align 8, !alias.scope !1634, !noalias !1637
  %551 = inttoptr i64 %2089 to i64*
  %552 = load i64, i64* %551
  %553 = add i64 %2089, 8
  %554 = inttoptr i64 %553 to i64*
  %555 = load i64, i64* %554
  %556 = add i64 %2089, 16
  %557 = inttoptr i64 %556 to i64*
  %558 = load i64, i64* %557
  %559 = add i64 %2089, 24
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560
  %562 = add i64 %2089, 32
  %563 = inttoptr i64 %562 to i64*
  %564 = load i64, i64* %563
  %565 = add i64 %2089, 40
  %566 = inttoptr i64 %565 to i64*
  %567 = load i64, i64* %566
  %568 = add i64 %2089, 48
  %569 = inttoptr i64 %568 to i64*
  %570 = load i64, i64* %569
  %571 = add i64 %2089, 56
  %572 = inttoptr i64 %571 to i64*
  %573 = load i64, i64* %572
  %574 = add i64 %2089, 64
  %575 = inttoptr i64 %574 to i64*
  %576 = load i64, i64* %575
  %577 = add i64 %2089, 72
  %578 = inttoptr i64 %577 to i64*
  %579 = load i64, i64* %578
  %580 = inttoptr i64 %2090 to i64*
  %581 = load i64, i64* %580
  store i64 %581, i64* %3, align 8, !alias.scope !1634, !noalias !1637
  store i64 %2089, i64* %13, align 8, !alias.scope !1634, !noalias !1637
  %582 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1074), i64 %546, i64 %547, i64 %548, i64 %549, i64 %550, i64 %552, i64 %555, i64 %558, i64 %561, i64 %564, i64 %567, i64 %570, i64 %573, i64 %576, i64 %579), !noalias !1634
  store i64 %582, i64* %1573, align 8, !alias.scope !1634, !noalias !1637
  %583 = load i64, i64* %14, align 8
  %584 = add i64 %583, -260
  %585 = trunc i64 %582 to i32
  %586 = load i64, i64* %3, align 8
  %587 = add i64 %586, 6
  store i64 %587, i64* %3, align 8
  %588 = inttoptr i64 %584 to i32*
  store i32 %585, i32* %588
  %589 = load i64, i64* %13, align 8, !tbaa !1240
  br label %block_401472

block_4014b9:                                     ; preds = %block_40149d
  %590 = inttoptr i64 %278 to double*
  %591 = load double, double* %590
  %592 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %593 = sext i32 %1945 to i64
  %594 = shl nsw i64 %593, 3
  %595 = add i64 %594, %592
  %596 = inttoptr i64 %595 to double*
  %597 = load double, double* %596
  %598 = fmul double %591, %597
  store double %598, double* %72, align 1, !tbaa !1244
  store i64 0, i64* %73, align 1, !tbaa !1244
  %599 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %600 = add i64 %594, %599
  %601 = inttoptr i64 %600 to double*
  store double %598, double* %601
  %602 = inttoptr i64 %271 to i32*
  %603 = load i32, i32* %602
  %604 = add i32 %603, 1
  %605 = inttoptr i64 %271 to i32*
  store i32 %604, i32* %605
  %606 = add i64 %1961, -28
  br label %block_40149d

block_401858:                                     ; preds = %block_40195c, %block_40183a
  %607 = phi i32 [ %430, %block_40183a ], [ %507, %block_40195c ]
  %608 = phi i64 [ %424, %block_40183a ], [ %508, %block_40195c ]
  %609 = phi i64 [ %431, %block_40183a ], [ %531, %block_40195c ]
  %610 = phi i64 [ %425, %block_40183a ], [ %499, %block_40195c ]
  %611 = phi %struct.Memory* [ %383, %block_40183a ], [ %502, %block_40195c ]
  %612 = add i64 %610, -60
  %613 = inttoptr i64 %612 to i32*
  %614 = load i32, i32* %613
  %615 = add i32 %614, -3
  %616 = icmp ult i32 %614, 3
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %46, align 1, !tbaa !1246
  %618 = and i32 %615, 255
  %619 = tail call i32 @llvm.ctpop.i32(i32 %618) #11
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = xor i8 %621, 1
  store i8 %622, i8* %53, align 1, !tbaa !1260
  %623 = xor i32 %615, %614
  %624 = lshr i32 %623, 4
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %58, align 1, !tbaa !1261
  %627 = icmp eq i32 %615, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %61, align 1, !tbaa !1262
  %629 = lshr i32 %615, 31
  %630 = trunc i32 %629 to i8
  store i8 %630, i8* %64, align 1, !tbaa !1263
  %631 = lshr i32 %614, 31
  %632 = xor i32 %629, %631
  %633 = add nuw nsw i32 %632, %631
  %634 = icmp eq i32 %633, 2
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %70, align 1, !tbaa !1264
  %636 = icmp ne i8 %630, 0
  %637 = xor i1 %636, %634
  %638 = select i1 %637, i64 10, i64 279
  %639 = add i64 %609, %638
  store i64 %639, i64* %3, align 8, !tbaa !1240
  br i1 %637, label %block_401862, label %block_40196f

block_400dcb:                                     ; preds = %block_400d6b, %block_400dc0
  %640 = phi i64 [ %1101, %block_400dc0 ], [ %2447, %block_400d6b ]
  %641 = phi %struct.Memory* [ %1685, %block_400dc0 ], [ %1685, %block_400d6b ]
  store i64 0, i64* %12, align 8, !tbaa !1240
  store i8 0, i8* %46, align 1, !tbaa !1246
  store i8 1, i8* %53, align 1, !tbaa !1260
  store i8 1, i8* %61, align 1, !tbaa !1262
  store i8 0, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  store i8 0, i8* %58, align 1, !tbaa !1261
  %642 = add i64 %640, -699
  %643 = add i64 %640, 7
  %644 = load i64, i64* %13, align 8, !tbaa !1240
  %645 = add i64 %644, -8
  %646 = inttoptr i64 %645 to i64*
  store i64 %643, i64* %646
  store i64 %645, i64* %13, align 8, !tbaa !1240
  %647 = tail call %struct.Memory* @sub_400b10_timer_start(%struct.State* nonnull %0, i64 %642, %struct.Memory* %641)
  %648 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 945), i64* %12, align 8, !tbaa !1240
  %649 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 832) to double*)
  store double %649, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1140) to i32*)
  store i32 13999, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1144) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  store i32 13999, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %650 = load i64, i64* %14, align 8
  %651 = add i64 %650, -129
  %652 = inttoptr i64 %651 to i8*
  store i8 65, i8* %652
  %653 = add i64 %650, -144
  %654 = inttoptr i64 %653 to double*
  store double %649, double* %654
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %655 = add i64 %648, 84
  %656 = load i64, i64* %13, align 8, !tbaa !1240
  %657 = add i64 %656, -8
  %658 = inttoptr i64 %657 to i64*
  store i64 %655, i64* %658
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %661 = load i64, i64* %11, align 8, !alias.scope !1639, !noalias !1642
  %662 = load i64, i64* %660, align 8, !alias.scope !1639, !noalias !1642
  %663 = load i64, i64* %659, align 8, !alias.scope !1639, !noalias !1642
  %664 = load i64, i64* %15, align 8, !alias.scope !1639, !noalias !1642
  %665 = load i64, i64* %1564, align 8, !alias.scope !1639, !noalias !1642
  %666 = inttoptr i64 %656 to i64*
  %667 = load i64, i64* %666
  %668 = add i64 %656, 8
  %669 = inttoptr i64 %668 to i64*
  %670 = load i64, i64* %669
  %671 = add i64 %656, 16
  %672 = inttoptr i64 %671 to i64*
  %673 = load i64, i64* %672
  %674 = add i64 %656, 24
  %675 = inttoptr i64 %674 to i64*
  %676 = load i64, i64* %675
  %677 = add i64 %656, 32
  %678 = inttoptr i64 %677 to i64*
  %679 = load i64, i64* %678
  %680 = add i64 %656, 40
  %681 = inttoptr i64 %680 to i64*
  %682 = load i64, i64* %681
  %683 = add i64 %656, 48
  %684 = inttoptr i64 %683 to i64*
  %685 = load i64, i64* %684
  %686 = add i64 %656, 56
  %687 = inttoptr i64 %686 to i64*
  %688 = load i64, i64* %687
  %689 = add i64 %656, 64
  %690 = inttoptr i64 %689 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %656, 72
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = inttoptr i64 %657 to i64*
  %696 = load i64, i64* %695
  store i64 %696, i64* %3, align 8, !alias.scope !1639, !noalias !1642
  store i64 %656, i64* %13, align 8, !alias.scope !1639, !noalias !1642
  %697 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 945), i64 %661, i64 %662, i64 %663, i64 %664, i64 %665, i64 %667, i64 %670, i64 %673, i64 %676, i64 %679, i64 %682, i64 %685, i64 %688, i64 %691, i64 %694), !noalias !1639
  store i64 %697, i64* %1573, align 8, !alias.scope !1639, !noalias !1642
  %698 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1004), i64* %12, align 8, !tbaa !1240
  store i64 14000, i64* %11, align 8, !tbaa !1240
  %699 = load i64, i64* %14, align 8
  %700 = add i64 %699, -212
  %701 = trunc i64 %697 to i32
  %702 = inttoptr i64 %700 to i32*
  store i32 %701, i32* %702
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %703 = add i64 %698, 28
  %704 = load i64, i64* %13, align 8, !tbaa !1240
  %705 = add i64 %704, -8
  %706 = inttoptr i64 %705 to i64*
  store i64 %703, i64* %706
  %707 = load i64, i64* %660, align 8, !alias.scope !1644, !noalias !1647
  %708 = load i64, i64* %659, align 8, !alias.scope !1644, !noalias !1647
  %709 = load i64, i64* %15, align 8, !alias.scope !1644, !noalias !1647
  %710 = load i64, i64* %1564, align 8, !alias.scope !1644, !noalias !1647
  %711 = inttoptr i64 %704 to i64*
  %712 = load i64, i64* %711
  %713 = add i64 %704, 8
  %714 = inttoptr i64 %713 to i64*
  %715 = load i64, i64* %714
  %716 = add i64 %704, 16
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = add i64 %704, 24
  %720 = inttoptr i64 %719 to i64*
  %721 = load i64, i64* %720
  %722 = add i64 %704, 32
  %723 = inttoptr i64 %722 to i64*
  %724 = load i64, i64* %723
  %725 = add i64 %704, 40
  %726 = inttoptr i64 %725 to i64*
  %727 = load i64, i64* %726
  %728 = add i64 %704, 48
  %729 = inttoptr i64 %728 to i64*
  %730 = load i64, i64* %729
  %731 = add i64 %704, 56
  %732 = inttoptr i64 %731 to i64*
  %733 = load i64, i64* %732
  %734 = add i64 %704, 64
  %735 = inttoptr i64 %734 to i64*
  %736 = load i64, i64* %735
  %737 = add i64 %704, 72
  %738 = inttoptr i64 %737 to i64*
  %739 = load i64, i64* %738
  %740 = inttoptr i64 %705 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %3, align 8, !alias.scope !1644, !noalias !1647
  store i64 %704, i64* %13, align 8, !alias.scope !1644, !noalias !1647
  %742 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1004), i64 14000, i64 %707, i64 %708, i64 %709, i64 %710, i64 %712, i64 %715, i64 %718, i64 %721, i64 %724, i64 %727, i64 %730, i64 %733, i64 %736, i64 %739), !noalias !1644
  store i64 %742, i64* %1573, align 8, !alias.scope !1644, !noalias !1647
  %743 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1017), i64* %12, align 8, !tbaa !1240
  store i64 15, i64* %11, align 8, !tbaa !1240
  %744 = load i64, i64* %14, align 8
  %745 = add i64 %744, -216
  %746 = trunc i64 %742 to i32
  %747 = inttoptr i64 %745 to i32*
  store i32 %746, i32* %747
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %748 = add i64 %743, 28
  %749 = load i64, i64* %13, align 8, !tbaa !1240
  %750 = add i64 %749, -8
  %751 = inttoptr i64 %750 to i64*
  store i64 %748, i64* %751
  %752 = load i64, i64* %660, align 8, !alias.scope !1649, !noalias !1652
  %753 = load i64, i64* %659, align 8, !alias.scope !1649, !noalias !1652
  %754 = load i64, i64* %15, align 8, !alias.scope !1649, !noalias !1652
  %755 = load i64, i64* %1564, align 8, !alias.scope !1649, !noalias !1652
  %756 = inttoptr i64 %749 to i64*
  %757 = load i64, i64* %756
  %758 = add i64 %749, 8
  %759 = inttoptr i64 %758 to i64*
  %760 = load i64, i64* %759
  %761 = add i64 %749, 16
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  %764 = add i64 %749, 24
  %765 = inttoptr i64 %764 to i64*
  %766 = load i64, i64* %765
  %767 = add i64 %749, 32
  %768 = inttoptr i64 %767 to i64*
  %769 = load i64, i64* %768
  %770 = add i64 %749, 40
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = add i64 %749, 48
  %774 = inttoptr i64 %773 to i64*
  %775 = load i64, i64* %774
  %776 = add i64 %749, 56
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %749, 64
  %780 = inttoptr i64 %779 to i64*
  %781 = load i64, i64* %780
  %782 = add i64 %749, 72
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = inttoptr i64 %750 to i64*
  %786 = load i64, i64* %785
  store i64 %786, i64* %3, align 8, !alias.scope !1649, !noalias !1652
  store i64 %749, i64* %13, align 8, !alias.scope !1649, !noalias !1652
  %787 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1017), i64 15, i64 %752, i64 %753, i64 %754, i64 %755, i64 %757, i64 %760, i64 %763, i64 %766, i64 %769, i64 %772, i64 %775, i64 %778, i64 %781, i64 %784), !noalias !1649
  store i64 %787, i64* %1573, align 8, !alias.scope !1649, !noalias !1652
  %788 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2267), i64* %12, align 8, !tbaa !1240
  %789 = load i64, i64* %14, align 8
  %790 = add i64 %789, -220
  %791 = trunc i64 %787 to i32
  %792 = inttoptr i64 %790 to i32*
  store i32 %791, i32* %792
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %793 = add i64 %788, 23
  %794 = load i64, i64* %13, align 8, !tbaa !1240
  %795 = add i64 %794, -8
  %796 = inttoptr i64 %795 to i64*
  store i64 %793, i64* %796
  %797 = load i64, i64* %11, align 8, !alias.scope !1654, !noalias !1657
  %798 = load i64, i64* %660, align 8, !alias.scope !1654, !noalias !1657
  %799 = load i64, i64* %659, align 8, !alias.scope !1654, !noalias !1657
  %800 = load i64, i64* %15, align 8, !alias.scope !1654, !noalias !1657
  %801 = load i64, i64* %1564, align 8, !alias.scope !1654, !noalias !1657
  %802 = inttoptr i64 %794 to i64*
  %803 = load i64, i64* %802
  %804 = add i64 %794, 8
  %805 = inttoptr i64 %804 to i64*
  %806 = load i64, i64* %805
  %807 = add i64 %794, 16
  %808 = inttoptr i64 %807 to i64*
  %809 = load i64, i64* %808
  %810 = add i64 %794, 24
  %811 = inttoptr i64 %810 to i64*
  %812 = load i64, i64* %811
  %813 = add i64 %794, 32
  %814 = inttoptr i64 %813 to i64*
  %815 = load i64, i64* %814
  %816 = add i64 %794, 40
  %817 = inttoptr i64 %816 to i64*
  %818 = load i64, i64* %817
  %819 = add i64 %794, 48
  %820 = inttoptr i64 %819 to i64*
  %821 = load i64, i64* %820
  %822 = add i64 %794, 56
  %823 = inttoptr i64 %822 to i64*
  %824 = load i64, i64* %823
  %825 = add i64 %794, 64
  %826 = inttoptr i64 %825 to i64*
  %827 = load i64, i64* %826
  %828 = add i64 %794, 72
  %829 = inttoptr i64 %828 to i64*
  %830 = load i64, i64* %829
  %831 = inttoptr i64 %795 to i64*
  %832 = load i64, i64* %831
  store i64 %832, i64* %3, align 8, !alias.scope !1654, !noalias !1657
  store i64 %794, i64* %13, align 8, !alias.scope !1654, !noalias !1657
  %833 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 2267), i64 %797, i64 %798, i64 %799, i64 %800, i64 %801, i64 %803, i64 %806, i64 %809, i64 %812, i64 %815, i64 %818, i64 %821, i64 %824, i64 %827, i64 %830), !noalias !1654
  store i64 %833, i64* %1573, align 8, !alias.scope !1654, !noalias !1657
  %834 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1168), i64* %12, align 8, !tbaa !1240
  %835 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 816) to double*)
  %836 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 824) to double*)
  %837 = bitcast %union.VectorReg* %22 to double*
  store double %836, double* %837, align 1, !tbaa !1244
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %839 = bitcast i64* %838 to double*
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  store i32 14000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1156) to i32*)
  store i32 2016000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1160) to i32*)
  store double %836, double* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1168) to double*)
  store double %835, double* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1176) to double*)
  %840 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1176) to double*)
  store double %840, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %841 = load i64, i64* %14, align 8
  %842 = add i64 %841, -224
  %843 = trunc i64 %833 to i32
  %844 = inttoptr i64 %842 to i32*
  store i32 %843, i32* %844
  %845 = add i64 %834, 8027
  %846 = add i64 %834, 86
  %847 = load i64, i64* %13, align 8, !tbaa !1240
  %848 = add i64 %847, -8
  %849 = inttoptr i64 %848 to i64*
  store i64 %846, i64* %849
  store i64 %848, i64* %13, align 8, !tbaa !1240
  %850 = tail call %struct.Memory* @sub_402dd0_randlc(%struct.State* nonnull %0, i64 %845, %struct.Memory* %647)
  %851 = load i64, i64* %14, align 8
  %852 = add i64 %851, -104
  %853 = load i64, i64* %3, align 8
  %854 = load double, double* %72, align 1
  %855 = inttoptr i64 %852 to double*
  store double %854, double* %855
  %856 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1156) to i32*)
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %12, align 8, !tbaa !1240
  %858 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1160) to i32*)
  %859 = zext i32 %858 to i64
  store i64 %859, i64* %11, align 8, !tbaa !1240
  %860 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1088) to i64*)
  store i64 %860, i64* %1563, align 8, !tbaa !1240
  %861 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1040) to i64*)
  store i64 %861, i64* %10, align 8, !tbaa !1240
  %862 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1048) to i64*)
  store i64 %862, i64* %15, align 8, !tbaa !1240
  %863 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1140) to i32*)
  %864 = zext i32 %863 to i64
  store i64 %864, i64* %1564, align 8, !tbaa !1240
  %865 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1144) to i32*)
  %866 = zext i32 %865 to i64
  store i64 %866, i64* %8, align 8, !tbaa !1240
  %867 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %868 = zext i32 %867 to i64
  store i64 %868, i64* %16, align 8, !tbaa !1240
  %869 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %870 = zext i32 %869 to i64
  store i64 %870, i64* %1565, align 8, !tbaa !1240
  %871 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1064) to i64*)
  store i64 %871, i64* %9, align 8, !tbaa !1240
  %872 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1072) to i64*)
  store i64 %872, i64* %19, align 8, !tbaa !1240
  %873 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1080) to i64*)
  store i64 %873, i64* %20, align 8, !tbaa !1240
  %874 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1056) to i64*)
  store i64 %874, i64* %17, align 8, !tbaa !1240
  %875 = load i64, i64* %13, align 8
  %876 = inttoptr i64 %875 to i32*
  store i32 %865, i32* %876
  %877 = add i64 %875, 8
  %878 = inttoptr i64 %877 to i32*
  store i32 %867, i32* %878
  %879 = add i64 %875, 16
  %880 = inttoptr i64 %879 to i32*
  store i32 %869, i32* %880
  %881 = add i64 %875, 24
  %882 = inttoptr i64 %881 to i64*
  store i64 %871, i64* %882
  %883 = add i64 %875, 32
  %884 = inttoptr i64 %883 to i64*
  store i64 %872, i64* %884
  %885 = add i64 %875, 40
  %886 = inttoptr i64 %885 to i64*
  store i64 %873, i64* %886
  %887 = add i64 %875, 48
  %888 = inttoptr i64 %887 to i64*
  store i64 %874, i64* %888
  %889 = add i64 %853, 2757
  %890 = add i64 %853, 144
  %891 = add i64 %875, -8
  %892 = inttoptr i64 %891 to i64*
  store i64 %890, i64* %892
  store i64 %891, i64* %13, align 8, !tbaa !1240
  %893 = tail call %struct.Memory* @sub_401990_makea(%struct.State* nonnull %0, i64 %889, %struct.Memory* %850)
  %894 = load i64, i64* %14, align 8
  %895 = add i64 %894, -64
  %896 = load i64, i64* %3, align 8
  %897 = add i64 %896, 7
  store i64 %897, i64* %3, align 8
  %898 = inttoptr i64 %895 to i32*
  store i32 0, i32* %898
  %899 = add i64 %894, -68
  br label %block_400f62

block_401387:                                     ; preds = %block_40136b
  %900 = inttoptr i64 %2177 to double*
  %901 = load double, double* %900
  %902 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %903 = sext i32 %313 to i64
  %904 = shl nsw i64 %903, 3
  %905 = add i64 %904, %902
  %906 = inttoptr i64 %905 to double*
  %907 = load double, double* %906
  %908 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %909 = add i64 %904, %908
  %910 = inttoptr i64 %909 to double*
  %911 = load double, double* %910
  %912 = fmul double %907, %911
  %913 = fadd double %901, %912
  %914 = inttoptr i64 %2177 to double*
  store double %913, double* %914
  %915 = inttoptr i64 %2180 to double*
  %916 = load double, double* %915
  %917 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %918 = inttoptr i64 %2182 to i32*
  %919 = load i32, i32* %918
  %920 = sext i32 %919 to i64
  %921 = shl nsw i64 %920, 3
  %922 = add i64 %921, %917
  %923 = inttoptr i64 %922 to double*
  %924 = load double, double* %923
  %925 = fmul double %924, %924
  store double %925, double* %837, align 1, !tbaa !1244
  store i64 0, i64* %838, align 1, !tbaa !1244
  %926 = fadd double %916, %925
  store double %926, double* %72, align 1, !tbaa !1244
  store i64 0, i64* %73, align 1, !tbaa !1244
  %927 = inttoptr i64 %2180 to double*
  store double %926, double* %927
  %928 = inttoptr i64 %2182 to i32*
  %929 = load i32, i32* %928
  %930 = add i32 %929, 1
  %931 = inttoptr i64 %2182 to i32*
  store i32 %930, i32* %931
  %932 = add i64 %329, -28
  br label %block_40136b

block_4012c6:                                     ; preds = %block_401288, %block_4014ee
  %933 = phi i64 [ %2257, %block_401288 ], [ %309, %block_4014ee ]
  %934 = phi i64 [ %2254, %block_401288 ], [ %270, %block_4014ee ]
  %935 = phi %struct.Memory* [ %2253, %block_401288 ], [ %1943, %block_4014ee ]
  %936 = add i64 %934, -72
  %937 = inttoptr i64 %936 to i32*
  %938 = load i32, i32* %937
  %939 = add i32 %938, -15
  %940 = icmp ult i32 %938, 15
  %941 = zext i1 %940 to i8
  store i8 %941, i8* %46, align 1, !tbaa !1246
  %942 = and i32 %939, 255
  %943 = tail call i32 @llvm.ctpop.i32(i32 %942) #11
  %944 = trunc i32 %943 to i8
  %945 = and i8 %944, 1
  %946 = xor i8 %945, 1
  store i8 %946, i8* %53, align 1, !tbaa !1260
  %947 = xor i32 %939, %938
  %948 = lshr i32 %947, 4
  %949 = trunc i32 %948 to i8
  %950 = and i8 %949, 1
  store i8 %950, i8* %58, align 1, !tbaa !1261
  %951 = icmp eq i32 %939, 0
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %61, align 1, !tbaa !1262
  %953 = lshr i32 %939, 31
  %954 = trunc i32 %953 to i8
  store i8 %954, i8* %64, align 1, !tbaa !1263
  %955 = lshr i32 %938, 31
  %956 = xor i32 %953, %955
  %957 = add nuw nsw i32 %956, %955
  %958 = icmp eq i32 %957, 2
  %959 = zext i1 %958 to i8
  store i8 %959, i8* %70, align 1, !tbaa !1264
  %960 = icmp ne i8 %954, 0
  %961 = xor i1 %960, %958
  %962 = or i1 %951, %961
  %963 = select i1 %962, i64 10, i64 571
  %964 = add i64 %933, %963
  store i64 %964, i64* %3, align 8, !tbaa !1240
  br i1 %962, label %block_4012d0, label %block_401501

block_401051:                                     ; preds = %block_401035
  %965 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1120) to i64*)
  %966 = sext i32 %1105 to i64
  %967 = shl nsw i64 %966, 3
  %968 = add i64 %967, %965
  %969 = load double, double* %72, align 1
  %970 = inttoptr i64 %968 to double*
  store double %969, double* %970
  %971 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %972 = inttoptr i64 %895 to i32*
  %973 = load i32, i32* %972
  %974 = sext i32 %973 to i64
  %975 = shl nsw i64 %974, 3
  %976 = add i64 %975, %971
  %977 = inttoptr i64 %976 to double*
  store double %969, double* %977
  %978 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1128) to i64*)
  %979 = inttoptr i64 %895 to i32*
  %980 = load i32, i32* %979
  %981 = sext i32 %980 to i64
  %982 = shl nsw i64 %981, 3
  %983 = add i64 %982, %978
  %984 = inttoptr i64 %983 to double*
  store double %969, double* %984
  %985 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1112) to i64*)
  %986 = inttoptr i64 %895 to i32*
  %987 = load i32, i32* %986
  %988 = sext i32 %987 to i64
  %989 = shl nsw i64 %988, 3
  %990 = add i64 %989, %985
  %991 = inttoptr i64 %990 to double*
  store double %969, double* %991
  %992 = inttoptr i64 %895 to i32*
  %993 = load i32, i32* %992
  %994 = add i32 %993, 1
  %995 = inttoptr i64 %895 to i32*
  store i32 %994, i32* %995
  %996 = add i64 %1122, -28
  br label %block_401035

block_4018a6:                                     ; preds = %block_401862
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1525), i64* %12, align 8, !tbaa !1240
  %997 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 864) to double*)
  %998 = sext i32 %364 to i64
  store i64 %998, i64* %8, align 8, !tbaa !1240
  %999 = shl nsw i64 %998, 3
  %1000 = add i64 %357, -192
  %1001 = add i64 %1000, %999
  %1002 = inttoptr i64 %1001 to i64*
  %1003 = load i64, i64* %1002
  store i64 %1003, i64* %11, align 8, !tbaa !1240
  %1004 = inttoptr i64 %358 to double*
  %1005 = load double, double* %1004
  %1006 = fmul double %997, %1005
  %1007 = add i64 %357, -128
  %1008 = inttoptr i64 %1007 to double*
  %1009 = load double, double* %1008
  %1010 = fdiv double %1006, %1009
  %1011 = add i64 %357, -352
  %1012 = inttoptr i64 %1011 to double*
  store double %1010, double* %1012
  %1013 = bitcast double %1005 to <2 x i32>
  %1014 = extractelement <2 x i32> %1013, i32 0
  store i32 %1014, i32* %1913, align 1, !tbaa !1330
  %1015 = extractelement <2 x i32> %1013, i32 1
  store i32 %1015, i32* %1915, align 1, !tbaa !1330
  store i32 0, i32* %1596, align 1, !tbaa !1330
  store i32 0, i32* %1597, align 1, !tbaa !1330
  %1016 = inttoptr i64 %1011 to double*
  %1017 = load double, double* %1016
  store double %1017, double* %837, align 1, !tbaa !1244
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  store i8 2, i8* %1562, align 1, !tbaa !1332
  %1018 = add i64 %375, 71
  %1019 = load i64, i64* %13, align 8, !tbaa !1240
  %1020 = add i64 %1019, -8
  %1021 = inttoptr i64 %1020 to i64*
  store i64 %1018, i64* %1021
  %1022 = load i64, i64* %660, align 8, !alias.scope !1659, !noalias !1662
  %1023 = load i64, i64* %659, align 8, !alias.scope !1659, !noalias !1662
  %1024 = load i64, i64* %15, align 8, !alias.scope !1659, !noalias !1662
  %1025 = load i64, i64* %1564, align 8, !alias.scope !1659, !noalias !1662
  %1026 = inttoptr i64 %1019 to i64*
  %1027 = load i64, i64* %1026
  %1028 = add i64 %1019, 8
  %1029 = inttoptr i64 %1028 to i64*
  %1030 = load i64, i64* %1029
  %1031 = add i64 %1019, 16
  %1032 = inttoptr i64 %1031 to i64*
  %1033 = load i64, i64* %1032
  %1034 = add i64 %1019, 24
  %1035 = inttoptr i64 %1034 to i64*
  %1036 = load i64, i64* %1035
  %1037 = add i64 %1019, 32
  %1038 = inttoptr i64 %1037 to i64*
  %1039 = load i64, i64* %1038
  %1040 = add i64 %1019, 40
  %1041 = inttoptr i64 %1040 to i64*
  %1042 = load i64, i64* %1041
  %1043 = add i64 %1019, 48
  %1044 = inttoptr i64 %1043 to i64*
  %1045 = load i64, i64* %1044
  %1046 = add i64 %1019, 56
  %1047 = inttoptr i64 %1046 to i64*
  %1048 = load i64, i64* %1047
  %1049 = add i64 %1019, 64
  %1050 = inttoptr i64 %1049 to i64*
  %1051 = load i64, i64* %1050
  %1052 = add i64 %1019, 72
  %1053 = inttoptr i64 %1052 to i64*
  %1054 = load i64, i64* %1053
  %1055 = inttoptr i64 %1020 to i64*
  %1056 = load i64, i64* %1055
  store i64 %1056, i64* %3, align 8, !alias.scope !1659, !noalias !1662
  store i64 %1019, i64* %13, align 8, !alias.scope !1659, !noalias !1662
  %1057 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1525), i64 %1003, i64 %1022, i64 %1023, i64 %1024, i64 %1025, i64 %1027, i64 %1030, i64 %1033, i64 %1036, i64 %1039, i64 %1042, i64 %1045, i64 %1048, i64 %1051, i64 %1054), !noalias !1659
  store i64 %1057, i64* %1573, align 8, !alias.scope !1659, !noalias !1662
  %1058 = load i64, i64* %14, align 8
  %1059 = add i64 %1058, -60
  %1060 = load i64, i64* %3, align 8
  %1061 = inttoptr i64 %1059 to i32*
  %1062 = load i32, i32* %1061
  %1063 = add i32 %1062, -2
  %1064 = icmp ult i32 %1062, 2
  %1065 = zext i1 %1064 to i8
  store i8 %1065, i8* %46, align 1, !tbaa !1246
  %1066 = and i32 %1063, 255
  %1067 = tail call i32 @llvm.ctpop.i32(i32 %1066) #11
  %1068 = trunc i32 %1067 to i8
  %1069 = and i8 %1068, 1
  %1070 = xor i8 %1069, 1
  store i8 %1070, i8* %53, align 1, !tbaa !1260
  %1071 = xor i32 %1063, %1062
  %1072 = lshr i32 %1071, 4
  %1073 = trunc i32 %1072 to i8
  %1074 = and i8 %1073, 1
  store i8 %1074, i8* %58, align 1, !tbaa !1261
  %1075 = icmp eq i32 %1063, 0
  %1076 = zext i1 %1075 to i8
  store i8 %1076, i8* %61, align 1, !tbaa !1262
  %1077 = lshr i32 %1063, 31
  %1078 = trunc i32 %1077 to i8
  store i8 %1078, i8* %64, align 1, !tbaa !1263
  %1079 = lshr i32 %1062, 31
  %1080 = xor i32 %1077, %1079
  %1081 = add nuw nsw i32 %1080, %1079
  %1082 = icmp eq i32 %1081, 2
  %1083 = zext i1 %1082 to i8
  store i8 %1083, i8* %70, align 1, !tbaa !1264
  %1084 = add i64 %1058, -356
  %1085 = trunc i64 %1057 to i32
  %1086 = inttoptr i64 %1084 to i32*
  store i32 %1085, i32* %1086
  %1087 = select i1 %1075, i64 16, i64 106
  %1088 = add i64 %1060, %1087
  store i64 %1088, i64* %3, align 8, !tbaa !1240
  br i1 %1075, label %block_4018fd, label %block_40195c

block_401261:                                     ; preds = %block_401254
  %1089 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  store double %1089, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1090 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %1091 = sext i32 %2349 to i64
  store i64 %1091, i64* %10, align 8, !tbaa !1240
  %1092 = shl nsw i64 %1091, 3
  %1093 = add i64 %1092, %1090
  %1094 = inttoptr i64 %1093 to double*
  store double %1089, double* %1094
  %1095 = inttoptr i64 %1725 to i32*
  %1096 = load i32, i32* %1095
  %1097 = add i32 %1096, 1
  %1098 = zext i32 %1097 to i64
  store i64 %1098, i64* %8, align 8, !tbaa !1240
  %1099 = inttoptr i64 %1725 to i32*
  store i32 %1097, i32* %1099
  %1100 = add i64 %2359, -13
  br label %block_401254

block_400dc0:                                     ; preds = %block_400d41
  %1101 = add i64 %1593, 11
  store i64 %1101, i64* %3, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1136) to i32*)
  br label %block_400dcb

block_401035:                                     ; preds = %block_40102e, %block_401051
  %1102 = phi i64 [ %1911, %block_40102e ], [ %996, %block_401051 ]
  %1103 = phi %struct.Memory* [ %203, %block_40102e ], [ %1103, %block_401051 ]
  %1104 = inttoptr i64 %895 to i32*
  %1105 = load i32, i32* %1104
  %1106 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %1107 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %1108 = sub i32 %1106, %1107
  %1109 = add i32 %1108, 1
  %1110 = sub i32 %1105, %1109
  %1111 = lshr i32 %1110, 31
  %1112 = trunc i32 %1111 to i8
  %1113 = lshr i32 %1105, 31
  %1114 = lshr i32 %1109, 31
  %1115 = xor i32 %1114, %1113
  %1116 = xor i32 %1111, %1113
  %1117 = add nuw nsw i32 %1116, %1115
  %1118 = icmp eq i32 %1117, 2
  %1119 = icmp ne i8 %1112, 0
  %1120 = xor i1 %1119, %1118
  %1121 = select i1 %1120, i64 28, i64 113
  %1122 = add i64 %1102, %1121
  store i32 0, i32* %1913, align 1, !tbaa !1363
  store i32 0, i32* %1915, align 1, !tbaa !1363
  br i1 %1120, label %block_401051, label %block_4010a6

block_4012de:                                     ; preds = %block_4012d0
  store i64 2, i64* %12, align 8, !tbaa !1240
  %1123 = add i64 %543, -1998
  %1124 = add i64 %543, 10
  %1125 = load i64, i64* %13, align 8, !tbaa !1240
  %1126 = add i64 %1125, -8
  %1127 = inttoptr i64 %1126 to i64*
  store i64 %1124, i64* %1127
  store i64 %1126, i64* %13, align 8, !tbaa !1240
  %1128 = tail call %struct.Memory* @sub_400b10_timer_start(%struct.State* nonnull %0, i64 %1123, %struct.Memory* %935)
  %1129 = load i64, i64* %14, align 8
  %1130 = load i64, i64* %3, align 8
  br label %block_4012e8

block_4015f4:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1246), i64* %12, align 8, !tbaa !1240
  %1131 = load i64, i64* %14, align 8
  %1132 = add i64 %1131, -136
  %1133 = inttoptr i64 %1132 to i32*
  store i32 0, i32* %1133
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %1134 = add i64 %2034, 27
  %1135 = load i64, i64* %13, align 8, !tbaa !1240
  %1136 = add i64 %1135, -8
  %1137 = inttoptr i64 %1136 to i64*
  store i64 %1134, i64* %1137
  %1138 = load i64, i64* %11, align 8, !alias.scope !1664, !noalias !1667
  %1139 = load i64, i64* %660, align 8, !alias.scope !1664, !noalias !1667
  %1140 = load i64, i64* %659, align 8, !alias.scope !1664, !noalias !1667
  %1141 = load i64, i64* %15, align 8, !alias.scope !1664, !noalias !1667
  %1142 = load i64, i64* %1564, align 8, !alias.scope !1664, !noalias !1667
  %1143 = inttoptr i64 %1135 to i64*
  %1144 = load i64, i64* %1143
  %1145 = add i64 %1135, 8
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = add i64 %1135, 16
  %1149 = inttoptr i64 %1148 to i64*
  %1150 = load i64, i64* %1149
  %1151 = add i64 %1135, 24
  %1152 = inttoptr i64 %1151 to i64*
  %1153 = load i64, i64* %1152
  %1154 = add i64 %1135, 32
  %1155 = inttoptr i64 %1154 to i64*
  %1156 = load i64, i64* %1155
  %1157 = add i64 %1135, 40
  %1158 = inttoptr i64 %1157 to i64*
  %1159 = load i64, i64* %1158
  %1160 = add i64 %1135, 48
  %1161 = inttoptr i64 %1160 to i64*
  %1162 = load i64, i64* %1161
  %1163 = add i64 %1135, 56
  %1164 = inttoptr i64 %1163 to i64*
  %1165 = load i64, i64* %1164
  %1166 = add i64 %1135, 64
  %1167 = inttoptr i64 %1166 to i64*
  %1168 = load i64, i64* %1167
  %1169 = add i64 %1135, 72
  %1170 = inttoptr i64 %1169 to i64*
  %1171 = load i64, i64* %1170
  %1172 = inttoptr i64 %1136 to i64*
  %1173 = load i64, i64* %1172
  store i64 %1173, i64* %3, align 8, !alias.scope !1664, !noalias !1667
  store i64 %1135, i64* %13, align 8, !alias.scope !1664, !noalias !1667
  %1174 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1246), i64 %1138, i64 %1139, i64 %1140, i64 %1141, i64 %1142, i64 %1144, i64 %1147, i64 %1150, i64 %1153, i64 %1156, i64 %1159, i64 %1162, i64 %1165, i64 %1168, i64 %1171), !noalias !1664
  store i64 %1174, i64* %1573, align 8, !alias.scope !1664, !noalias !1667
  %1175 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1268), i64* %12, align 8, !tbaa !1240
  %1176 = load i64, i64* %14, align 8
  %1177 = add i64 %1176, -104
  %1178 = inttoptr i64 %1177 to double*
  %1179 = load double, double* %1178
  store double %1179, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1180 = add i64 %1176, -284
  %1181 = trunc i64 %1174 to i32
  %1182 = inttoptr i64 %1180 to i32*
  store i32 %1181, i32* %1182
  store i8 1, i8* %1562, align 1, !tbaa !1332
  %1183 = add i64 %1175, 28
  %1184 = load i64, i64* %13, align 8, !tbaa !1240
  %1185 = add i64 %1184, -8
  %1186 = inttoptr i64 %1185 to i64*
  store i64 %1183, i64* %1186
  %1187 = load i64, i64* %11, align 8, !alias.scope !1669, !noalias !1672
  %1188 = load i64, i64* %660, align 8, !alias.scope !1669, !noalias !1672
  %1189 = load i64, i64* %659, align 8, !alias.scope !1669, !noalias !1672
  %1190 = load i64, i64* %15, align 8, !alias.scope !1669, !noalias !1672
  %1191 = load i64, i64* %1564, align 8, !alias.scope !1669, !noalias !1672
  %1192 = inttoptr i64 %1184 to i64*
  %1193 = load i64, i64* %1192
  %1194 = add i64 %1184, 8
  %1195 = inttoptr i64 %1194 to i64*
  %1196 = load i64, i64* %1195
  %1197 = add i64 %1184, 16
  %1198 = inttoptr i64 %1197 to i64*
  %1199 = load i64, i64* %1198
  %1200 = add i64 %1184, 24
  %1201 = inttoptr i64 %1200 to i64*
  %1202 = load i64, i64* %1201
  %1203 = add i64 %1184, 32
  %1204 = inttoptr i64 %1203 to i64*
  %1205 = load i64, i64* %1204
  %1206 = add i64 %1184, 40
  %1207 = inttoptr i64 %1206 to i64*
  %1208 = load i64, i64* %1207
  %1209 = add i64 %1184, 48
  %1210 = inttoptr i64 %1209 to i64*
  %1211 = load i64, i64* %1210
  %1212 = add i64 %1184, 56
  %1213 = inttoptr i64 %1212 to i64*
  %1214 = load i64, i64* %1213
  %1215 = add i64 %1184, 64
  %1216 = inttoptr i64 %1215 to i64*
  %1217 = load i64, i64* %1216
  %1218 = add i64 %1184, 72
  %1219 = inttoptr i64 %1218 to i64*
  %1220 = load i64, i64* %1219
  %1221 = inttoptr i64 %1185 to i64*
  %1222 = load i64, i64* %1221
  store i64 %1222, i64* %3, align 8, !alias.scope !1669, !noalias !1672
  store i64 %1184, i64* %13, align 8, !alias.scope !1669, !noalias !1672
  %1223 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1268), i64 %1187, i64 %1188, i64 %1189, i64 %1190, i64 %1191, i64 %1193, i64 %1196, i64 %1199, i64 %1202, i64 %1205, i64 %1208, i64 %1211, i64 %1214, i64 %1217, i64 %1220), !noalias !1669
  store i64 %1223, i64* %1573, align 8, !alias.scope !1669, !noalias !1672
  %1224 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1298), i64* %12, align 8, !tbaa !1240
  %1225 = load i64, i64* %14, align 8
  %1226 = add i64 %1225, -144
  %1227 = inttoptr i64 %1226 to double*
  %1228 = load double, double* %1227
  store double %1228, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1229 = add i64 %1225, -288
  %1230 = trunc i64 %1223 to i32
  %1231 = inttoptr i64 %1229 to i32*
  store i32 %1230, i32* %1231
  store i8 1, i8* %1562, align 1, !tbaa !1332
  %1232 = add i64 %1224, 31
  %1233 = load i64, i64* %13, align 8, !tbaa !1240
  %1234 = add i64 %1233, -8
  %1235 = inttoptr i64 %1234 to i64*
  store i64 %1232, i64* %1235
  %1236 = load i64, i64* %11, align 8, !alias.scope !1674, !noalias !1677
  %1237 = load i64, i64* %660, align 8, !alias.scope !1674, !noalias !1677
  %1238 = load i64, i64* %659, align 8, !alias.scope !1674, !noalias !1677
  %1239 = load i64, i64* %15, align 8, !alias.scope !1674, !noalias !1677
  %1240 = load i64, i64* %1564, align 8, !alias.scope !1674, !noalias !1677
  %1241 = inttoptr i64 %1233 to i64*
  %1242 = load i64, i64* %1241
  %1243 = add i64 %1233, 8
  %1244 = inttoptr i64 %1243 to i64*
  %1245 = load i64, i64* %1244
  %1246 = add i64 %1233, 16
  %1247 = inttoptr i64 %1246 to i64*
  %1248 = load i64, i64* %1247
  %1249 = add i64 %1233, 24
  %1250 = inttoptr i64 %1249 to i64*
  %1251 = load i64, i64* %1250
  %1252 = add i64 %1233, 32
  %1253 = inttoptr i64 %1252 to i64*
  %1254 = load i64, i64* %1253
  %1255 = add i64 %1233, 40
  %1256 = inttoptr i64 %1255 to i64*
  %1257 = load i64, i64* %1256
  %1258 = add i64 %1233, 48
  %1259 = inttoptr i64 %1258 to i64*
  %1260 = load i64, i64* %1259
  %1261 = add i64 %1233, 56
  %1262 = inttoptr i64 %1261 to i64*
  %1263 = load i64, i64* %1262
  %1264 = add i64 %1233, 64
  %1265 = inttoptr i64 %1264 to i64*
  %1266 = load i64, i64* %1265
  %1267 = add i64 %1233, 72
  %1268 = inttoptr i64 %1267 to i64*
  %1269 = load i64, i64* %1268
  %1270 = inttoptr i64 %1234 to i64*
  %1271 = load i64, i64* %1270
  store i64 %1271, i64* %3, align 8, !alias.scope !1674, !noalias !1677
  store i64 %1233, i64* %13, align 8, !alias.scope !1674, !noalias !1677
  %1272 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1298), i64 %1236, i64 %1237, i64 %1238, i64 %1239, i64 %1240, i64 %1242, i64 %1245, i64 %1248, i64 %1251, i64 %1254, i64 %1257, i64 %1260, i64 %1263, i64 %1266, i64 %1269), !noalias !1674
  store i64 %1272, i64* %1573, align 8, !alias.scope !1674, !noalias !1677
  %1273 = load i64, i64* %14, align 8
  %1274 = add i64 %1273, -292
  %1275 = trunc i64 %1272 to i32
  %1276 = load i64, i64* %3, align 8
  %1277 = add i64 %1276, 6
  store i64 %1277, i64* %3, align 8
  %1278 = inttoptr i64 %1274 to i32*
  store i32 %1275, i32* %1278
  br label %block_401650

block_4010b5:                                     ; preds = %block_40123a, %block_4010a6
  %1279 = phi i64 [ %1617, %block_4010a6 ], [ %2477, %block_40123a ]
  %1280 = phi i64 [ %894, %block_4010a6 ], [ %1512, %block_40123a ]
  %1281 = phi %struct.Memory* [ %1103, %block_4010a6 ], [ %331, %block_40123a ]
  %1282 = add i64 %1280, -72
  %1283 = inttoptr i64 %1282 to i32*
  %1284 = load i32, i32* %1283
  %1285 = add i32 %1284, -1
  %1286 = icmp eq i32 %1284, 0
  %1287 = zext i1 %1286 to i8
  store i8 %1287, i8* %46, align 1, !tbaa !1246
  %1288 = and i32 %1285, 255
  %1289 = tail call i32 @llvm.ctpop.i32(i32 %1288) #11
  %1290 = trunc i32 %1289 to i8
  %1291 = and i8 %1290, 1
  %1292 = xor i8 %1291, 1
  store i8 %1292, i8* %53, align 1, !tbaa !1260
  %1293 = xor i32 %1285, %1284
  %1294 = lshr i32 %1293, 4
  %1295 = trunc i32 %1294 to i8
  %1296 = and i8 %1295, 1
  store i8 %1296, i8* %58, align 1, !tbaa !1261
  %1297 = icmp eq i32 %1285, 0
  %1298 = zext i1 %1297 to i8
  store i8 %1298, i8* %61, align 1, !tbaa !1262
  %1299 = lshr i32 %1285, 31
  %1300 = trunc i32 %1299 to i8
  store i8 %1300, i8* %64, align 1, !tbaa !1263
  %1301 = lshr i32 %1284, 31
  %1302 = xor i32 %1299, %1301
  %1303 = add nuw nsw i32 %1302, %1301
  %1304 = icmp eq i32 %1303, 2
  %1305 = zext i1 %1304 to i8
  store i8 %1305, i8* %70, align 1, !tbaa !1264
  %1306 = icmp ne i8 %1300, 0
  %1307 = xor i1 %1306, %1304
  %1308 = or i1 %1297, %1307
  %1309 = select i1 %1308, i64 10, i64 408
  %1310 = add i64 %1279, %1309
  store i64 %1310, i64* %3, align 8, !tbaa !1240
  br i1 %1308, label %block_4010bf, label %block_40124d

block_401655:                                     ; preds = %block_401501
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1328), i64* %12, align 8, !tbaa !1240
  %1311 = add i64 %2539, -136
  %1312 = inttoptr i64 %1311 to i32*
  store i32 0, i32* %1312
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %1313 = add i64 %2574, 27
  %1314 = load i64, i64* %13, align 8, !tbaa !1240
  %1315 = add i64 %1314, -8
  %1316 = inttoptr i64 %1315 to i64*
  store i64 %1313, i64* %1316
  %1317 = load i64, i64* %11, align 8, !alias.scope !1679, !noalias !1682
  %1318 = load i64, i64* %660, align 8, !alias.scope !1679, !noalias !1682
  %1319 = load i64, i64* %15, align 8, !alias.scope !1679, !noalias !1682
  %1320 = load i64, i64* %1564, align 8, !alias.scope !1679, !noalias !1682
  %1321 = inttoptr i64 %1314 to i64*
  %1322 = load i64, i64* %1321
  %1323 = add i64 %1314, 8
  %1324 = inttoptr i64 %1323 to i64*
  %1325 = load i64, i64* %1324
  %1326 = add i64 %1314, 16
  %1327 = inttoptr i64 %1326 to i64*
  %1328 = load i64, i64* %1327
  %1329 = add i64 %1314, 24
  %1330 = inttoptr i64 %1329 to i64*
  %1331 = load i64, i64* %1330
  %1332 = add i64 %1314, 32
  %1333 = inttoptr i64 %1332 to i64*
  %1334 = load i64, i64* %1333
  %1335 = add i64 %1314, 40
  %1336 = inttoptr i64 %1335 to i64*
  %1337 = load i64, i64* %1336
  %1338 = add i64 %1314, 48
  %1339 = inttoptr i64 %1338 to i64*
  %1340 = load i64, i64* %1339
  %1341 = add i64 %1314, 56
  %1342 = inttoptr i64 %1341 to i64*
  %1343 = load i64, i64* %1342
  %1344 = add i64 %1314, 64
  %1345 = inttoptr i64 %1344 to i64*
  %1346 = load i64, i64* %1345
  %1347 = add i64 %1314, 72
  %1348 = inttoptr i64 %1347 to i64*
  %1349 = load i64, i64* %1348
  %1350 = inttoptr i64 %1315 to i64*
  %1351 = load i64, i64* %1350
  store i64 %1351, i64* %3, align 8, !alias.scope !1679, !noalias !1682
  store i64 %1314, i64* %13, align 8, !alias.scope !1679, !noalias !1682
  %1352 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1328), i64 %1317, i64 %1318, i64 %2546, i64 %1319, i64 %1320, i64 %1322, i64 %1325, i64 %1328, i64 %1331, i64 %1334, i64 %1337, i64 %1340, i64 %1343, i64 %1346, i64 %1349), !noalias !1679
  store i64 %1352, i64* %1573, align 8, !alias.scope !1679, !noalias !1682
  %1353 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1351), i64* %12, align 8, !tbaa !1240
  %1354 = load i64, i64* %14, align 8
  %1355 = add i64 %1354, -296
  %1356 = trunc i64 %1352 to i32
  %1357 = inttoptr i64 %1355 to i32*
  store i32 %1356, i32* %1357
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %1358 = add i64 %1353, 23
  %1359 = load i64, i64* %13, align 8, !tbaa !1240
  %1360 = add i64 %1359, -8
  %1361 = inttoptr i64 %1360 to i64*
  store i64 %1358, i64* %1361
  %1362 = load i64, i64* %11, align 8, !alias.scope !1684, !noalias !1687
  %1363 = load i64, i64* %660, align 8, !alias.scope !1684, !noalias !1687
  %1364 = load i64, i64* %659, align 8, !alias.scope !1684, !noalias !1687
  %1365 = load i64, i64* %15, align 8, !alias.scope !1684, !noalias !1687
  %1366 = load i64, i64* %1564, align 8, !alias.scope !1684, !noalias !1687
  %1367 = inttoptr i64 %1359 to i64*
  %1368 = load i64, i64* %1367
  %1369 = add i64 %1359, 8
  %1370 = inttoptr i64 %1369 to i64*
  %1371 = load i64, i64* %1370
  %1372 = add i64 %1359, 16
  %1373 = inttoptr i64 %1372 to i64*
  %1374 = load i64, i64* %1373
  %1375 = add i64 %1359, 24
  %1376 = inttoptr i64 %1375 to i64*
  %1377 = load i64, i64* %1376
  %1378 = add i64 %1359, 32
  %1379 = inttoptr i64 %1378 to i64*
  %1380 = load i64, i64* %1379
  %1381 = add i64 %1359, 40
  %1382 = inttoptr i64 %1381 to i64*
  %1383 = load i64, i64* %1382
  %1384 = add i64 %1359, 48
  %1385 = inttoptr i64 %1384 to i64*
  %1386 = load i64, i64* %1385
  %1387 = add i64 %1359, 56
  %1388 = inttoptr i64 %1387 to i64*
  %1389 = load i64, i64* %1388
  %1390 = add i64 %1359, 64
  %1391 = inttoptr i64 %1390 to i64*
  %1392 = load i64, i64* %1391
  %1393 = add i64 %1359, 72
  %1394 = inttoptr i64 %1393 to i64*
  %1395 = load i64, i64* %1394
  %1396 = inttoptr i64 %1360 to i64*
  %1397 = load i64, i64* %1396
  store i64 %1397, i64* %3, align 8, !alias.scope !1684, !noalias !1687
  store i64 %1359, i64* %13, align 8, !alias.scope !1684, !noalias !1687
  %1398 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1351), i64 %1362, i64 %1363, i64 %1364, i64 %1365, i64 %1366, i64 %1368, i64 %1371, i64 %1374, i64 %1377, i64 %1380, i64 %1383, i64 %1386, i64 %1389, i64 %1392, i64 %1395), !noalias !1684
  store i64 %1398, i64* %1573, align 8, !alias.scope !1684, !noalias !1687
  %1399 = load i64, i64* %14, align 8
  %1400 = add i64 %1399, -300
  %1401 = trunc i64 %1398 to i32
  %1402 = load i64, i64* %3, align 8
  %1403 = add i64 %1402, 6
  store i64 %1403, i64* %3, align 8
  %1404 = inttoptr i64 %1400 to i32*
  store i32 %1401, i32* %1404
  br label %block_40168d

block_4011b4:                                     ; preds = %block_40112a
  %1405 = zext i32 %1473 to i64
  %1406 = zext i32 %1477 to i64
  store i64 %1405, i64* %8, align 8, !tbaa !1240
  store i64 %1406, i64* %10, align 8, !tbaa !1240
  %1407 = icmp ult i32 %1473, %1477
  %1408 = zext i1 %1407 to i8
  %1409 = and i32 %1478, 255
  %1410 = tail call i32 @llvm.ctpop.i32(i32 %1409) #11
  %1411 = trunc i32 %1410 to i8
  %1412 = and i8 %1411, 1
  %1413 = xor i8 %1412, 1
  %1414 = xor i32 %1477, %1473
  %1415 = xor i32 %1414, %1478
  %1416 = lshr i32 %1415, 4
  %1417 = trunc i32 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = icmp eq i32 %1478, 0
  %1420 = zext i1 %1419 to i8
  %1421 = zext i1 %1486 to i8
  store i8 %1408, i8* %46, align 1, !tbaa !1246
  store i8 %1413, i8* %53, align 1, !tbaa !1260
  store i8 %1418, i8* %58, align 1, !tbaa !1261
  store i8 %1420, i8* %61, align 1, !tbaa !1262
  store i8 %1480, i8* %64, align 1, !tbaa !1263
  store i8 %1421, i8* %70, align 1, !tbaa !1264
  %1422 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  %1423 = inttoptr i64 %1516 to double*
  %1424 = load double, double* %1423
  %1425 = add i64 %1512, -232
  %1426 = inttoptr i64 %1425 to double*
  store double %1422, double* %1426
  %1427 = bitcast double %1424 to <2 x i32>
  %1428 = extractelement <2 x i32> %1427, i32 0
  store i32 %1428, i32* %1913, align 1, !tbaa !1330
  %1429 = extractelement <2 x i32> %1427, i32 1
  store i32 %1429, i32* %1915, align 1, !tbaa !1330
  store i32 0, i32* %1596, align 1, !tbaa !1330
  store i32 0, i32* %1597, align 1, !tbaa !1330
  %1430 = add i64 %1490, 29
  %1431 = load i64, i64* %13, align 8, !tbaa !1240
  %1432 = add i64 %1431, -8
  %1433 = inttoptr i64 %1432 to i64*
  store i64 %1430, i64* %1433
  %1434 = load double, double* %1620, align 8, !alias.scope !1689, !noalias !1692
  %1435 = inttoptr i64 %1432 to i64*
  %1436 = load i64, i64* %1435
  store i64 %1431, i64* %13, align 8, !alias.scope !1689, !noalias !1692
  %1437 = tail call double @sqrt(double %1434) #11
  store i128 0, i128* %1621, align 8, !alias.scope !1689, !noalias !1692
  store double %1437, double* %1620, align 8, !alias.scope !1689, !noalias !1692
  %1438 = inttoptr i64 %1425 to double*
  %1439 = load double, double* %1438
  %1440 = fdiv double %1439, %1437
  store double %1440, double* %837, align 1, !tbaa !1244
  store i64 0, i64* %838, align 1, !tbaa !1244
  %1441 = inttoptr i64 %1516 to double*
  store double %1440, double* %1441
  %1442 = add i64 %1436, 24
  store i64 %1442, i64* %3, align 8
  %1443 = inttoptr i64 %1518 to i32*
  store i32 0, i32* %1443
  br label %block_4011e9

block_400ff3:                                     ; preds = %block_400f62
  %1444 = zext i32 %2277 to i64
  %1445 = zext i32 %2281 to i64
  store i64 %1444, i64* %8, align 8, !tbaa !1240
  store i64 %1445, i64* %10, align 8
  %1446 = bitcast %union.VectorReg* %22 to i8*
  %1447 = icmp ult i32 %2277, %2281
  %1448 = zext i1 %1447 to i8
  %1449 = and i32 %2282, 255
  %1450 = tail call i32 @llvm.ctpop.i32(i32 %1449) #11
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = xor i8 %1452, 1
  %1454 = xor i32 %2281, %2277
  %1455 = xor i32 %1454, %2282
  %1456 = lshr i32 %1455, 4
  %1457 = trunc i32 %1456 to i8
  %1458 = and i8 %1457, 1
  %1459 = icmp eq i32 %2282, 0
  %1460 = zext i1 %1459 to i8
  %1461 = zext i1 %2290 to i8
  store i8 %1448, i8* %46, align 1, !tbaa !1246
  store i8 %1453, i8* %53, align 1, !tbaa !1260
  store i8 %1458, i8* %58, align 1, !tbaa !1261
  store i8 %1460, i8* %61, align 1, !tbaa !1262
  store i8 %2284, i8* %64, align 1, !tbaa !1263
  store i8 %1461, i8* %70, align 1, !tbaa !1264
  %1462 = add i64 %894, -60
  %1463 = add i64 %2294, 7
  store i64 %1463, i64* %3, align 8
  %1464 = inttoptr i64 %1462 to i32*
  store i32 0, i32* %1464
  br label %block_400ffa

block_40182d:                                     ; preds = %block_401827
  %1465 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  store double %1465, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1466 = load i64, i64* %14, align 8
  %1467 = add i64 %1466, -128
  %1468 = add i64 %1560, 13
  store i64 %1468, i64* %3, align 8
  %1469 = inttoptr i64 %1467 to double*
  store double %1465, double* %1469
  br label %block_40183a

block_40112a:                                     ; preds = %block_401146, %block_4010bf
  %1470 = phi i64 [ %1519, %block_4010bf ], [ %1675, %block_401146 ]
  %1471 = phi %struct.Memory* [ %1510, %block_4010bf ], [ %1471, %block_401146 ]
  %1472 = inttoptr i64 %1518 to i32*
  %1473 = load i32, i32* %1472
  %1474 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %1475 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %1476 = sub i32 %1474, %1475
  %1477 = add i32 %1476, 1
  %1478 = sub i32 %1473, %1477
  %1479 = lshr i32 %1478, 31
  %1480 = trunc i32 %1479 to i8
  %1481 = lshr i32 %1473, 31
  %1482 = lshr i32 %1477, 31
  %1483 = xor i32 %1482, %1481
  %1484 = xor i32 %1479, %1481
  %1485 = add nuw nsw i32 %1484, %1483
  %1486 = icmp eq i32 %1485, 2
  %1487 = icmp ne i8 %1480, 0
  %1488 = xor i1 %1487, %1486
  %1489 = select i1 %1488, i64 28, i64 138
  %1490 = add i64 %1470, %1489
  br i1 %1488, label %block_401146, label %block_4011b4

block_4010bf:                                     ; preds = %block_4010b5
  %1491 = add i64 %1280, -80
  store i64 %1491, i64* %8, align 8, !tbaa !1240
  %1492 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1040) to i64*)
  store i64 %1492, i64* %12, align 8, !tbaa !1240
  %1493 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1048) to i64*)
  store i64 %1493, i64* %11, align 8, !tbaa !1240
  %1494 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  store i64 %1494, i64* %1563, align 8, !tbaa !1240
  %1495 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  store i64 %1495, i64* %10, align 8, !tbaa !1240
  %1496 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1088) to i64*)
  store i64 %1496, i64* %15, align 8, !tbaa !1240
  %1497 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1112) to i64*)
  store i64 %1497, i64* %1564, align 8, !tbaa !1240
  %1498 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1120) to i64*)
  store i64 %1498, i64* %16, align 8, !tbaa !1240
  %1499 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1128) to i64*)
  store i64 %1499, i64* %1565, align 8, !tbaa !1240
  %1500 = load i64, i64* %13, align 8
  %1501 = inttoptr i64 %1500 to i64*
  store i64 %1498, i64* %1501
  %1502 = add i64 %1500, 8
  %1503 = inttoptr i64 %1502 to i64*
  store i64 %1499, i64* %1503
  %1504 = add i64 %1500, 16
  %1505 = inttoptr i64 %1504 to i64*
  store i64 %1491, i64* %1505
  %1506 = add i64 %1310, 2753
  %1507 = add i64 %1310, 87
  %1508 = add i64 %1500, -8
  %1509 = inttoptr i64 %1508 to i64*
  store i64 %1507, i64* %1509
  store i64 %1508, i64* %13, align 8, !tbaa !1240
  %1510 = tail call %struct.Memory* @sub_401b80_conj_grad(%struct.State* nonnull %0, i64 %1506, %struct.Memory* %1281)
  %1511 = load i64, i64* %3, align 8
  store i32 0, i32* %1913, align 1, !tbaa !1363
  store i32 0, i32* %1915, align 1, !tbaa !1363
  store i32 0, i32* %1596, align 1, !tbaa !1363
  store i32 0, i32* %1597, align 1, !tbaa !1363
  %1512 = load i64, i64* %14, align 8
  %1513 = add i64 %1512, -88
  %1514 = load double, double* %72, align 1
  %1515 = inttoptr i64 %1513 to double*
  store double %1514, double* %1515
  %1516 = add i64 %1512, -96
  %1517 = inttoptr i64 %1516 to double*
  store double %1514, double* %1517
  %1518 = add i64 %1512, -64
  %1519 = add i64 %1511, 20
  store i64 %1519, i64* %3, align 8
  %1520 = inttoptr i64 %1518 to i32*
  store i32 0, i32* %1520
  br label %block_40112a

block_4012e8:                                     ; preds = %block_4012de, %block_4012d0
  %1521 = phi i64 [ %543, %block_4012d0 ], [ %1130, %block_4012de ]
  %1522 = phi i64 [ %934, %block_4012d0 ], [ %1129, %block_4012de ]
  %1523 = phi %struct.Memory* [ %935, %block_4012d0 ], [ %1128, %block_4012de ]
  %1524 = add i64 %1522, -80
  store i64 %1524, i64* %8, align 8, !tbaa !1240
  %1525 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1040) to i64*)
  store i64 %1525, i64* %12, align 8, !tbaa !1240
  %1526 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1048) to i64*)
  store i64 %1526, i64* %11, align 8, !tbaa !1240
  %1527 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  store i64 %1527, i64* %1563, align 8, !tbaa !1240
  %1528 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  store i64 %1528, i64* %10, align 8, !tbaa !1240
  %1529 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1088) to i64*)
  store i64 %1529, i64* %15, align 8, !tbaa !1240
  %1530 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1112) to i64*)
  store i64 %1530, i64* %1564, align 8, !tbaa !1240
  %1531 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1120) to i64*)
  store i64 %1531, i64* %16, align 8, !tbaa !1240
  %1532 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1128) to i64*)
  store i64 %1532, i64* %1565, align 8, !tbaa !1240
  %1533 = load i64, i64* %13, align 8
  %1534 = inttoptr i64 %1533 to i64*
  store i64 %1531, i64* %1534
  %1535 = add i64 %1533, 8
  %1536 = inttoptr i64 %1535 to i64*
  store i64 %1532, i64* %1536
  %1537 = add i64 %1533, 16
  %1538 = inttoptr i64 %1537 to i64*
  store i64 %1524, i64* %1538
  %1539 = add i64 %1521, 2200
  %1540 = add i64 %1521, 87
  %1541 = add i64 %1533, -8
  %1542 = inttoptr i64 %1541 to i64*
  store i64 %1540, i64* %1542
  store i64 %1541, i64* %13, align 8, !tbaa !1240
  %1543 = tail call %struct.Memory* @sub_401b80_conj_grad(%struct.State* nonnull %0, i64 %1539, %struct.Memory* %1523)
  %1544 = load i64, i64* %3, align 8
  %1545 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1136) to i32*)
  store i8 0, i8* %46, align 1, !tbaa !1246
  %1546 = and i32 %1545, 255
  %1547 = tail call i32 @llvm.ctpop.i32(i32 %1546) #11
  %1548 = trunc i32 %1547 to i8
  %1549 = and i8 %1548, 1
  %1550 = xor i8 %1549, 1
  store i8 %1550, i8* %53, align 1, !tbaa !1260
  store i8 0, i8* %58, align 1, !tbaa !1261
  %1551 = icmp eq i32 %1545, 0
  %1552 = zext i1 %1551 to i8
  store i8 %1552, i8* %61, align 1, !tbaa !1262
  %1553 = lshr i32 %1545, 31
  %1554 = trunc i32 %1553 to i8
  store i8 %1554, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  %1555 = select i1 %1551, i64 24, i64 14
  %1556 = add i64 %1544, %1555
  store i64 %1556, i64* %3, align 8, !tbaa !1240
  br i1 %1551, label %block_401357, label %block_40134d

block_401827:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212
  %1557 = load i8, i8* %53, align 1, !tbaa !1260
  %1558 = icmp ne i8 %1557, 0
  %1559 = select i1 %1558, i64 19, i64 6
  %1560 = add i64 %2345, %1559
  store i64 %1560, i64* %3, align 8, !tbaa !1240
  %1561 = icmp eq i8 %1557, 1
  br i1 %1561, label %block_40183a, label %block_40182d

block_400d41:                                     ; preds = %block_400d21
  %1562 = bitcast %union.anon* %4 to i8*
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %1566 = bitcast [32 x %union.VectorReg]* %21 to %union.vec128_t*
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %1568 = bitcast [32 x %union.VectorReg]* %21 to i8*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 912), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 923), i64* %11, align 8, !tbaa !1240
  %1569 = add i64 %1713, 25
  %1570 = load i64, i64* %13, align 8, !tbaa !1240
  %1571 = add i64 %1570, -8
  %1572 = inttoptr i64 %1571 to i64*
  store i64 %1569, i64* %1572
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %1575 = inttoptr i64 %1571 to i64*
  %1576 = load i64, i64* %1575
  store i64 %1576, i64* %3, align 8, !alias.scope !1694, !noalias !1697
  store i64 %1570, i64* %13, align 8, !alias.scope !1694, !noalias !1697
  %1577 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 912), i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 923))
  store i64 %1577, i64* %1573, align 8, !alias.scope !1694, !noalias !1697
  %1578 = load i64, i64* %14, align 8
  %1579 = add i64 %1578, -200
  %1580 = load i64, i64* %3, align 8
  %1581 = inttoptr i64 %1579 to i64*
  store i64 %1577, i64* %1581
  store i8 0, i8* %46, align 1, !tbaa !1246
  %1582 = trunc i64 %1577 to i32
  %1583 = and i32 %1582, 255
  %1584 = tail call i32 @llvm.ctpop.i32(i32 %1583) #11
  %1585 = trunc i32 %1584 to i8
  %1586 = and i8 %1585, 1
  %1587 = xor i8 %1586, 1
  store i8 %1587, i8* %53, align 1, !tbaa !1260
  store i8 0, i8* %58, align 1, !tbaa !1261
  %1588 = icmp eq i64 %1577, 0
  %1589 = zext i1 %1588 to i8
  store i8 %1589, i8* %61, align 1, !tbaa !1262
  %1590 = lshr i64 %1577, 63
  %1591 = trunc i64 %1590 to i8
  store i8 %1591, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  %1592 = select i1 %1588, i64 102, i64 17
  %1593 = add i64 %1580, %1592
  store i64 %1593, i64* %3, align 8, !tbaa !1240
  br i1 %1588, label %block_400dc0, label %block_400d6b

block_4010a6:                                     ; preds = %block_401035
  %1594 = zext i32 %1105 to i64
  %1595 = zext i32 %1109 to i64
  store i64 %1594, i64* %8, align 8, !tbaa !1240
  store i64 %1595, i64* %10, align 8, !tbaa !1240
  %1596 = bitcast i64* %73 to i32*
  %1597 = bitcast i8* %1916 to i32*
  %1598 = icmp ult i32 %1105, %1109
  %1599 = zext i1 %1598 to i8
  %1600 = and i32 %1110, 255
  %1601 = tail call i32 @llvm.ctpop.i32(i32 %1600) #11
  %1602 = trunc i32 %1601 to i8
  %1603 = and i8 %1602, 1
  %1604 = xor i8 %1603, 1
  %1605 = xor i32 %1109, %1105
  %1606 = xor i32 %1605, %1110
  %1607 = lshr i32 %1606, 4
  %1608 = trunc i32 %1607 to i8
  %1609 = and i8 %1608, 1
  %1610 = icmp eq i32 %1110, 0
  %1611 = zext i1 %1610 to i8
  %1612 = zext i1 %1118 to i8
  store i8 %1599, i8* %46, align 1, !tbaa !1246
  store i8 %1604, i8* %53, align 1, !tbaa !1260
  store i8 %1609, i8* %58, align 1, !tbaa !1261
  store i8 %1611, i8* %61, align 1, !tbaa !1262
  store i8 %1112, i8* %64, align 1, !tbaa !1263
  store i8 %1612, i8* %70, align 1, !tbaa !1264
  store i32 0, i32* %1596, align 1, !tbaa !1363
  store i32 0, i32* %1597, align 1, !tbaa !1363
  %1613 = add i64 %894, -104
  %1614 = load double, double* %72, align 1
  %1615 = inttoptr i64 %1613 to double*
  store double %1614, double* %1615
  %1616 = add i64 %894, -72
  %1617 = add i64 %1122, 15
  store i64 %1617, i64* %3, align 8
  %1618 = inttoptr i64 %1616 to i32*
  store i32 1, i32* %1618
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %1620 = bitcast %union.VectorReg* %1619 to double*
  %1621 = bitcast %union.VectorReg* %1619 to i128*
  br label %block_4010b5

block_4018fd:                                     ; preds = %block_4018a6
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1549), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1579), i64* %11, align 8, !tbaa !1240
  %1622 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 864) to double*)
  %1623 = add i64 %1058, -128
  %1624 = inttoptr i64 %1623 to double*
  %1625 = load double, double* %1624
  %1626 = add i64 %1058, -112
  %1627 = inttoptr i64 %1626 to double*
  %1628 = load double, double* %1627
  %1629 = fsub double %1625, %1628
  %1630 = inttoptr i64 %1626 to double*
  store double %1629, double* %1630
  %1631 = inttoptr i64 %1626 to double*
  %1632 = load double, double* %1631
  store double %1632, double* %837, align 1, !tbaa !1244
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  %1633 = fmul double %1622, %1632
  %1634 = inttoptr i64 %1623 to double*
  %1635 = load double, double* %1634
  %1636 = fdiv double %1633, %1635
  %1637 = add i64 %1058, -368
  %1638 = inttoptr i64 %1637 to double*
  store double %1636, double* %1638
  %1639 = add i64 %1088, 69
  %1640 = bitcast double %1632 to <2 x i32>
  %1641 = extractelement <2 x i32> %1640, i32 0
  store i32 %1641, i32* %1913, align 1, !tbaa !1330
  %1642 = extractelement <2 x i32> %1640, i32 1
  store i32 %1642, i32* %1915, align 1, !tbaa !1330
  store i32 0, i32* %1596, align 1, !tbaa !1330
  store i32 0, i32* %1597, align 1, !tbaa !1330
  br label %block_40195c.sink.split

block_401146:                                     ; preds = %block_40112a
  %1643 = inttoptr i64 %1513 to double*
  %1644 = load double, double* %1643
  %1645 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %1646 = sext i32 %1473 to i64
  %1647 = shl nsw i64 %1646, 3
  %1648 = add i64 %1647, %1645
  %1649 = inttoptr i64 %1648 to double*
  %1650 = load double, double* %1649
  %1651 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %1652 = add i64 %1647, %1651
  %1653 = inttoptr i64 %1652 to double*
  %1654 = load double, double* %1653
  %1655 = fmul double %1650, %1654
  %1656 = fadd double %1644, %1655
  %1657 = inttoptr i64 %1513 to double*
  store double %1656, double* %1657
  %1658 = inttoptr i64 %1516 to double*
  %1659 = load double, double* %1658
  %1660 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %1661 = inttoptr i64 %1518 to i32*
  %1662 = load i32, i32* %1661
  %1663 = sext i32 %1662 to i64
  %1664 = shl nsw i64 %1663, 3
  %1665 = add i64 %1664, %1660
  %1666 = inttoptr i64 %1665 to double*
  %1667 = load double, double* %1666
  %1668 = fmul double %1667, %1667
  store double %1668, double* %837, align 1, !tbaa !1244
  store i64 0, i64* %838, align 1, !tbaa !1244
  %1669 = fadd double %1659, %1668
  store double %1669, double* %72, align 1, !tbaa !1244
  store i64 0, i64* %73, align 1, !tbaa !1244
  %1670 = inttoptr i64 %1516 to double*
  store double %1669, double* %1670
  %1671 = inttoptr i64 %1518 to i32*
  %1672 = load i32, i32* %1671
  %1673 = add i32 %1672, 1
  %1674 = inttoptr i64 %1518 to i32*
  store i32 %1673, i32* %1674
  %1675 = add i64 %1490, -28
  br label %block_40112a

block_40134d:                                     ; preds = %block_4012e8
  store i64 2, i64* %12, align 8, !tbaa !1240
  %1676 = add i64 %1556, -2029
  %1677 = add i64 %1556, 10
  %1678 = load i64, i64* %13, align 8, !tbaa !1240
  %1679 = add i64 %1678, -8
  %1680 = inttoptr i64 %1679 to i64*
  store i64 %1677, i64* %1680
  store i64 %1679, i64* %13, align 8, !tbaa !1240
  %1681 = tail call %struct.Memory* @sub_400b60_timer_stop(%struct.State* nonnull %0, i64 %1676, %struct.Memory* %1543)
  %1682 = load i64, i64* %3, align 8
  br label %block_401357

block_400d21:                                     ; preds = %block_400d2b, %block_400ce0
  %1683 = phi i64 [ %96, %block_400ce0 ], [ %2173, %block_400d2b ]
  %1684 = phi i64 [ %90, %block_400ce0 ], [ %2144, %block_400d2b ]
  %1685 = phi %struct.Memory* [ %89, %block_400ce0 ], [ %2143, %block_400d2b ]
  %1686 = add i64 %1684, -60
  %1687 = inttoptr i64 %1686 to i32*
  %1688 = load i32, i32* %1687
  %1689 = add i32 %1688, -3
  %1690 = icmp ult i32 %1688, 3
  %1691 = zext i1 %1690 to i8
  store i8 %1691, i8* %46, align 1, !tbaa !1246
  %1692 = and i32 %1689, 255
  %1693 = tail call i32 @llvm.ctpop.i32(i32 %1692) #11
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = xor i8 %1695, 1
  store i8 %1696, i8* %53, align 1, !tbaa !1260
  %1697 = xor i32 %1689, %1688
  %1698 = lshr i32 %1697, 4
  %1699 = trunc i32 %1698 to i8
  %1700 = and i8 %1699, 1
  store i8 %1700, i8* %58, align 1, !tbaa !1261
  %1701 = icmp eq i32 %1689, 0
  %1702 = zext i1 %1701 to i8
  store i8 %1702, i8* %61, align 1, !tbaa !1262
  %1703 = lshr i32 %1689, 31
  %1704 = trunc i32 %1703 to i8
  store i8 %1704, i8* %64, align 1, !tbaa !1263
  %1705 = lshr i32 %1688, 31
  %1706 = xor i32 %1703, %1705
  %1707 = add nuw nsw i32 %1706, %1705
  %1708 = icmp eq i32 %1707, 2
  %1709 = zext i1 %1708 to i8
  store i8 %1709, i8* %70, align 1, !tbaa !1264
  %1710 = icmp ne i8 %1704, 0
  %1711 = xor i1 %1710, %1708
  %1712 = select i1 %1711, i64 10, i64 32
  %1713 = add i64 %1683, %1712
  store i64 %1713, i64* %3, align 8, !tbaa !1240
  br i1 %1711, label %block_400d2b, label %block_400d41

block_401879:                                     ; preds = %block_401862
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1512), i64* %12, align 8, !tbaa !1240
  %1714 = sext i32 %364 to i64
  store i64 %1714, i64* %8, align 8, !tbaa !1240
  %1715 = shl nsw i64 %1714, 3
  %1716 = add i64 %357, -192
  %1717 = add i64 %1716, %1715
  %1718 = add i64 %375, 22
  store i64 %1718, i64* %3, align 8
  %1719 = inttoptr i64 %1717 to i64*
  %1720 = load i64, i64* %1719
  store i64 %1720, i64* %11, align 8, !tbaa !1240
  br label %block_40195c.sink.split

block_401650:                                     ; preds = %block_401593, %block_4015f4
  %1721 = phi i64 [ %1273, %block_4015f4 ], [ %1890, %block_401593 ]
  %1722 = phi i64 [ %1277, %block_4015f4 ], [ %1895, %block_401593 ]
  %1723 = phi %struct.Memory* [ %2031, %block_4015f4 ], [ %2031, %block_401593 ]
  %1724 = add i64 %1722, 61
  store i64 %1724, i64* %3, align 8, !tbaa !1240
  br label %block_40168d

block_40124d:                                     ; preds = %block_4010b5
  %1725 = add i64 %1280, -60
  %1726 = add i64 %1310, 7
  store i64 %1726, i64* %3, align 8
  %1727 = inttoptr i64 %1725 to i32*
  store i32 0, i32* %1727
  br label %block_401254

block_40169f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit200
  %1728 = load i8, i8* %53, align 1, !tbaa !1260
  %1729 = icmp ne i8 %1728, 0
  %1730 = select i1 %1729, i64 11, i64 6
  %1731 = add i64 %2074, %1730
  store i64 %1731, i64* %3, align 8, !tbaa !1240
  %1732 = icmp eq i8 %1728, 1
  br i1 %1732, label %block_4016aa, label %block_4016a5

block_400fe0:                                     ; preds = %block_400f90
  %1733 = zext i32 %1924 to i64
  store i64 %1733, i64* %1563, align 8, !tbaa !1240
  store i64 %1925, i64* %11, align 8, !tbaa !1240
  %1734 = inttoptr i64 %895 to i32*
  store i32 %1924, i32* %1734
  %1735 = add i64 %1941, -126
  br label %block_400f62

block_4016aa:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit200, %block_40169f
  %1736 = phi i64 [ %2070, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit200 ], [ %1731, %block_40169f ]
  %1737 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 848) to double*)
  store double %1737, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1738 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 856) to double*)
  %1739 = load i64, i64* %14, align 8
  %1740 = add i64 %1739, -112
  %1741 = inttoptr i64 %1740 to double*
  %1742 = load double, double* %1741
  %1743 = fdiv double %1738, %1742
  %1744 = fdiv double %1743, %1737
  store double %1744, double* %837, align 1, !tbaa !1244
  store i64 0, i64* %838, align 1, !tbaa !1244
  %1745 = add i64 %1739, -120
  %1746 = inttoptr i64 %1745 to double*
  store double %1744, double* %1746
  %1747 = add i64 %1736, 43
  store i64 %1747, i64* %3, align 8, !tbaa !1240
  br label %block_4016d5

block_401593:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1178), i64* %12, align 8, !tbaa !1240
  %1748 = load i64, i64* %14, align 8
  %1749 = add i64 %1748, -136
  %1750 = inttoptr i64 %1749 to i32*
  store i32 1, i32* %1750
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %1751 = add i64 %2034, 27
  %1752 = load i64, i64* %13, align 8, !tbaa !1240
  %1753 = add i64 %1752, -8
  %1754 = inttoptr i64 %1753 to i64*
  store i64 %1751, i64* %1754
  %1755 = load i64, i64* %11, align 8, !alias.scope !1699, !noalias !1702
  %1756 = load i64, i64* %660, align 8, !alias.scope !1699, !noalias !1702
  %1757 = load i64, i64* %659, align 8, !alias.scope !1699, !noalias !1702
  %1758 = load i64, i64* %15, align 8, !alias.scope !1699, !noalias !1702
  %1759 = load i64, i64* %1564, align 8, !alias.scope !1699, !noalias !1702
  %1760 = inttoptr i64 %1752 to i64*
  %1761 = load i64, i64* %1760
  %1762 = add i64 %1752, 8
  %1763 = inttoptr i64 %1762 to i64*
  %1764 = load i64, i64* %1763
  %1765 = add i64 %1752, 16
  %1766 = inttoptr i64 %1765 to i64*
  %1767 = load i64, i64* %1766
  %1768 = add i64 %1752, 24
  %1769 = inttoptr i64 %1768 to i64*
  %1770 = load i64, i64* %1769
  %1771 = add i64 %1752, 32
  %1772 = inttoptr i64 %1771 to i64*
  %1773 = load i64, i64* %1772
  %1774 = add i64 %1752, 40
  %1775 = inttoptr i64 %1774 to i64*
  %1776 = load i64, i64* %1775
  %1777 = add i64 %1752, 48
  %1778 = inttoptr i64 %1777 to i64*
  %1779 = load i64, i64* %1778
  %1780 = add i64 %1752, 56
  %1781 = inttoptr i64 %1780 to i64*
  %1782 = load i64, i64* %1781
  %1783 = add i64 %1752, 64
  %1784 = inttoptr i64 %1783 to i64*
  %1785 = load i64, i64* %1784
  %1786 = add i64 %1752, 72
  %1787 = inttoptr i64 %1786 to i64*
  %1788 = load i64, i64* %1787
  %1789 = inttoptr i64 %1753 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %3, align 8, !alias.scope !1699, !noalias !1702
  store i64 %1752, i64* %13, align 8, !alias.scope !1699, !noalias !1702
  %1791 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1178), i64 %1755, i64 %1756, i64 %1757, i64 %1758, i64 %1759, i64 %1761, i64 %1764, i64 %1767, i64 %1770, i64 %1773, i64 %1776, i64 %1779, i64 %1782, i64 %1785, i64 %1788), !noalias !1699
  store i64 %1791, i64* %1573, align 8, !alias.scope !1699, !noalias !1702
  %1792 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1204), i64* %12, align 8, !tbaa !1240
  %1793 = load i64, i64* %14, align 8
  %1794 = add i64 %1793, -104
  %1795 = inttoptr i64 %1794 to double*
  %1796 = load double, double* %1795
  store double %1796, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1797 = add i64 %1793, -272
  %1798 = trunc i64 %1791 to i32
  %1799 = inttoptr i64 %1797 to i32*
  store i32 %1798, i32* %1799
  store i8 1, i8* %1562, align 1, !tbaa !1332
  %1800 = add i64 %1792, 28
  %1801 = load i64, i64* %13, align 8, !tbaa !1240
  %1802 = add i64 %1801, -8
  %1803 = inttoptr i64 %1802 to i64*
  store i64 %1800, i64* %1803
  %1804 = load i64, i64* %11, align 8, !alias.scope !1704, !noalias !1707
  %1805 = load i64, i64* %660, align 8, !alias.scope !1704, !noalias !1707
  %1806 = load i64, i64* %659, align 8, !alias.scope !1704, !noalias !1707
  %1807 = load i64, i64* %15, align 8, !alias.scope !1704, !noalias !1707
  %1808 = load i64, i64* %1564, align 8, !alias.scope !1704, !noalias !1707
  %1809 = inttoptr i64 %1801 to i64*
  %1810 = load i64, i64* %1809
  %1811 = add i64 %1801, 8
  %1812 = inttoptr i64 %1811 to i64*
  %1813 = load i64, i64* %1812
  %1814 = add i64 %1801, 16
  %1815 = inttoptr i64 %1814 to i64*
  %1816 = load i64, i64* %1815
  %1817 = add i64 %1801, 24
  %1818 = inttoptr i64 %1817 to i64*
  %1819 = load i64, i64* %1818
  %1820 = add i64 %1801, 32
  %1821 = inttoptr i64 %1820 to i64*
  %1822 = load i64, i64* %1821
  %1823 = add i64 %1801, 40
  %1824 = inttoptr i64 %1823 to i64*
  %1825 = load i64, i64* %1824
  %1826 = add i64 %1801, 48
  %1827 = inttoptr i64 %1826 to i64*
  %1828 = load i64, i64* %1827
  %1829 = add i64 %1801, 56
  %1830 = inttoptr i64 %1829 to i64*
  %1831 = load i64, i64* %1830
  %1832 = add i64 %1801, 64
  %1833 = inttoptr i64 %1832 to i64*
  %1834 = load i64, i64* %1833
  %1835 = add i64 %1801, 72
  %1836 = inttoptr i64 %1835 to i64*
  %1837 = load i64, i64* %1836
  %1838 = inttoptr i64 %1802 to i64*
  %1839 = load i64, i64* %1838
  store i64 %1839, i64* %3, align 8, !alias.scope !1704, !noalias !1707
  store i64 %1801, i64* %13, align 8, !alias.scope !1704, !noalias !1707
  %1840 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1204), i64 %1804, i64 %1805, i64 %1806, i64 %1807, i64 %1808, i64 %1810, i64 %1813, i64 %1816, i64 %1819, i64 %1822, i64 %1825, i64 %1828, i64 %1831, i64 %1834, i64 %1837), !noalias !1704
  store i64 %1840, i64* %1573, align 8, !alias.scope !1704, !noalias !1707
  %1841 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1225), i64* %12, align 8, !tbaa !1240
  %1842 = load i64, i64* %14, align 8
  %1843 = add i64 %1842, -160
  %1844 = inttoptr i64 %1843 to double*
  %1845 = load double, double* %1844
  store double %1845, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %1846 = add i64 %1842, -276
  %1847 = trunc i64 %1840 to i32
  %1848 = inttoptr i64 %1846 to i32*
  store i32 %1847, i32* %1848
  store i8 1, i8* %1562, align 1, !tbaa !1332
  %1849 = add i64 %1841, 31
  %1850 = load i64, i64* %13, align 8, !tbaa !1240
  %1851 = add i64 %1850, -8
  %1852 = inttoptr i64 %1851 to i64*
  store i64 %1849, i64* %1852
  %1853 = load i64, i64* %11, align 8, !alias.scope !1709, !noalias !1712
  %1854 = load i64, i64* %660, align 8, !alias.scope !1709, !noalias !1712
  %1855 = load i64, i64* %659, align 8, !alias.scope !1709, !noalias !1712
  %1856 = load i64, i64* %15, align 8, !alias.scope !1709, !noalias !1712
  %1857 = load i64, i64* %1564, align 8, !alias.scope !1709, !noalias !1712
  %1858 = inttoptr i64 %1850 to i64*
  %1859 = load i64, i64* %1858
  %1860 = add i64 %1850, 8
  %1861 = inttoptr i64 %1860 to i64*
  %1862 = load i64, i64* %1861
  %1863 = add i64 %1850, 16
  %1864 = inttoptr i64 %1863 to i64*
  %1865 = load i64, i64* %1864
  %1866 = add i64 %1850, 24
  %1867 = inttoptr i64 %1866 to i64*
  %1868 = load i64, i64* %1867
  %1869 = add i64 %1850, 32
  %1870 = inttoptr i64 %1869 to i64*
  %1871 = load i64, i64* %1870
  %1872 = add i64 %1850, 40
  %1873 = inttoptr i64 %1872 to i64*
  %1874 = load i64, i64* %1873
  %1875 = add i64 %1850, 48
  %1876 = inttoptr i64 %1875 to i64*
  %1877 = load i64, i64* %1876
  %1878 = add i64 %1850, 56
  %1879 = inttoptr i64 %1878 to i64*
  %1880 = load i64, i64* %1879
  %1881 = add i64 %1850, 64
  %1882 = inttoptr i64 %1881 to i64*
  %1883 = load i64, i64* %1882
  %1884 = add i64 %1850, 72
  %1885 = inttoptr i64 %1884 to i64*
  %1886 = load i64, i64* %1885
  %1887 = inttoptr i64 %1851 to i64*
  %1888 = load i64, i64* %1887
  store i64 %1888, i64* %3, align 8, !alias.scope !1709, !noalias !1712
  store i64 %1850, i64* %13, align 8, !alias.scope !1709, !noalias !1712
  %1889 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1225), i64 %1853, i64 %1854, i64 %1855, i64 %1856, i64 %1857, i64 %1859, i64 %1862, i64 %1865, i64 %1868, i64 %1871, i64 %1874, i64 %1877, i64 %1880, i64 %1883, i64 %1886), !noalias !1709
  store i64 %1889, i64* %1573, align 8, !alias.scope !1709, !noalias !1712
  %1890 = load i64, i64* %14, align 8
  %1891 = add i64 %1890, -280
  %1892 = trunc i64 %1889 to i32
  %1893 = load i64, i64* %3, align 8
  %1894 = inttoptr i64 %1891 to i32*
  store i32 %1892, i32* %1894
  %1895 = add i64 %1893, 103
  br label %block_401650

block_40102e:                                     ; preds = %block_400ffa
  %1896 = icmp ult i32 %205, 14001
  %1897 = zext i1 %1896 to i8
  %1898 = and i32 %206, 255
  %1899 = tail call i32 @llvm.ctpop.i32(i32 %1898) #11
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = xor i8 %1901, 1
  %1903 = xor i32 %205, 16
  %1904 = xor i32 %1903, %206
  %1905 = lshr i32 %1904, 4
  %1906 = trunc i32 %1905 to i8
  %1907 = and i8 %1906, 1
  %1908 = icmp eq i32 %206, 0
  %1909 = zext i1 %1908 to i8
  %1910 = zext i1 %212 to i8
  store i8 %1897, i8* %46, align 1, !tbaa !1246
  store i8 %1902, i8* %53, align 1, !tbaa !1260
  store i8 %1907, i8* %58, align 1, !tbaa !1261
  store i8 %1909, i8* %61, align 1, !tbaa !1262
  store i8 %208, i8* %64, align 1, !tbaa !1263
  store i8 %1910, i8* %70, align 1, !tbaa !1264
  %1911 = add i64 %216, 7
  store i64 %1911, i64* %3, align 8
  %1912 = inttoptr i64 %895 to i32*
  store i32 0, i32* %1912
  %1913 = bitcast [32 x %union.VectorReg]* %21 to i32*
  %1914 = getelementptr inbounds i8, i8* %1568, i64 4
  %1915 = bitcast i8* %1914 to i32*
  %1916 = getelementptr inbounds i8, i8* %1568, i64 12
  br label %block_401035

block_400f90:                                     ; preds = %block_400fad, %block_400f7e
  %1917 = phi i64 [ %200, %block_400f7e ], [ %1975, %block_400fad ]
  %1918 = phi %struct.Memory* [ %2275, %block_400f7e ], [ %1918, %block_400fad ]
  %1919 = inttoptr i64 %899 to i32*
  %1920 = load i32, i32* %1919
  %1921 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1048) to i64*)
  %1922 = inttoptr i64 %895 to i32*
  %1923 = load i32, i32* %1922
  %1924 = add i32 %1923, 1
  %1925 = sext i32 %1924 to i64
  %1926 = shl nsw i64 %1925, 2
  %1927 = add i64 %1921, %1926
  %1928 = inttoptr i64 %1927 to i32*
  %1929 = load i32, i32* %1928
  %1930 = sub i32 %1920, %1929
  %1931 = lshr i32 %1930, 31
  %1932 = lshr i32 %1920, 31
  %1933 = lshr i32 %1929, 31
  %1934 = xor i32 %1933, %1932
  %1935 = xor i32 %1931, %1932
  %1936 = add nuw nsw i32 %1935, %1934
  %1937 = icmp eq i32 %1936, 2
  %1938 = icmp ne i32 %1931, 0
  %1939 = xor i1 %1938, %1937
  %1940 = select i1 %1939, i64 29, i64 80
  %1941 = add i64 %1917, %1940
  br i1 %1939, label %block_400fad, label %block_400fe0

block_40149d:                                     ; preds = %block_4014b9, %block_401472
  %1942 = phi i64 [ %276, %block_401472 ], [ %606, %block_4014b9 ]
  %1943 = phi %struct.Memory* [ %220, %block_401472 ], [ %1943, %block_4014b9 ]
  %1944 = inttoptr i64 %271 to i32*
  %1945 = load i32, i32* %1944
  %1946 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1152) to i32*)
  %1947 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %1948 = sub i32 %1946, %1947
  %1949 = add i32 %1948, 1
  %1950 = sub i32 %1945, %1949
  %1951 = lshr i32 %1950, 31
  %1952 = lshr i32 %1945, 31
  %1953 = lshr i32 %1949, 31
  %1954 = xor i32 %1953, %1952
  %1955 = xor i32 %1951, %1952
  %1956 = add nuw nsw i32 %1955, %1954
  %1957 = icmp eq i32 %1956, 2
  %1958 = icmp ne i32 %1951, 0
  %1959 = xor i1 %1958, %1957
  %1960 = select i1 %1959, i64 28, i64 81
  %1961 = add i64 %1942, %1960
  br i1 %1959, label %block_4014b9, label %block_4014ee

block_400fad:                                     ; preds = %block_400f90
  %1962 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1040) to i64*)
  %1963 = sext i32 %1920 to i64
  %1964 = shl nsw i64 %1963, 2
  %1965 = add i64 %1964, %1962
  %1966 = inttoptr i64 %1965 to i32*
  %1967 = load i32, i32* %1966
  %1968 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1148) to i32*)
  %1969 = sub i32 %1967, %1968
  %1970 = inttoptr i64 %1965 to i32*
  store i32 %1969, i32* %1970
  %1971 = inttoptr i64 %899 to i32*
  %1972 = load i32, i32* %1971
  %1973 = add i32 %1972, 1
  %1974 = inttoptr i64 %899 to i32*
  store i32 %1973, i32* %1974
  %1975 = add i64 %1941, -29
  br label %block_400f90

block_401551:                                     ; preds = %block_401501
  %1976 = add i64 %2539, -104
  %1977 = inttoptr i64 %1976 to double*
  %1978 = load double, double* %1977
  %1979 = add i64 %2539, -144
  %1980 = inttoptr i64 %1979 to double*
  %1981 = load double, double* %1980
  %1982 = fsub double %1978, %1981
  %1983 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 896) to float*)
  %1984 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 900) to float*)
  %1985 = bitcast %union.VectorReg* %22 to float*
  store float %1983, float* %1985, align 1, !tbaa !1330
  %1986 = getelementptr inbounds i8, i8* %1446, i64 4
  %1987 = bitcast i8* %1986 to float*
  store float %1984, float* %1987, align 1, !tbaa !1330
  %1988 = bitcast double %1982 to i64
  %1989 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %22, i64 0, i32 0, i32 0, i32 0, i64 0
  %1990 = load i64, i64* %1989, align 1
  %1991 = and i64 %1990, %1988
  %1992 = trunc i64 %1991 to i32
  %1993 = lshr i64 %1991, 32
  %1994 = trunc i64 %1993 to i32
  store i32 %1992, i32* %1913, align 1, !tbaa !1363
  store i32 %1994, i32* %1915, align 1, !tbaa !1363
  %1995 = load double, double* %72, align 1
  %1996 = fdiv double %1995, %1981
  %1997 = add i64 %2539, -160
  %1998 = inttoptr i64 %1997 to double*
  store double %1996, double* %1998
  %1999 = inttoptr i64 %1997 to double*
  %2000 = load double, double* %1999
  store double %2000, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %2001 = inttoptr i64 %2540 to double*
  %2002 = load double, double* %2001
  store double %2002, double* %837, align 1, !tbaa !1244
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  %2003 = add i64 %2574, 60
  store i64 %2003, i64* %3, align 8
  %2004 = fcmp uno double %2002, %2000
  br i1 %2004, label %2005, label %2017

; <label>:2005:                                   ; preds = %block_401551
  %2006 = fadd double %2002, %2000
  %2007 = bitcast double %2006 to i64
  %2008 = and i64 %2007, 9221120237041090560
  %2009 = icmp eq i64 %2008, 9218868437227405312
  %2010 = and i64 %2007, 2251799813685247
  %2011 = icmp ne i64 %2010, 0
  %2012 = and i1 %2009, %2011
  br i1 %2012, label %2013, label %2023

; <label>:2013:                                   ; preds = %2005
  %2014 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2003, %struct.Memory* %2490) #14
  %2015 = load i64, i64* %3, align 8
  %2016 = load i8, i8* %46, align 1, !tbaa !1246
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2017:                                   ; preds = %block_401551
  %2018 = fcmp ogt double %2002, %2000
  br i1 %2018, label %2023, label %2019

; <label>:2019:                                   ; preds = %2017
  %2020 = fcmp olt double %2002, %2000
  br i1 %2020, label %2023, label %2021

; <label>:2021:                                   ; preds = %2019
  %2022 = fcmp oeq double %2002, %2000
  br i1 %2022, label %2023, label %2027

; <label>:2023:                                   ; preds = %2021, %2019, %2017, %2005
  %2024 = phi i8 [ 0, %2017 ], [ 0, %2019 ], [ 1, %2021 ], [ 1, %2005 ]
  %2025 = phi i8 [ 0, %2017 ], [ 0, %2019 ], [ 0, %2021 ], [ 1, %2005 ]
  %2026 = phi i8 [ 0, %2017 ], [ 1, %2019 ], [ 0, %2021 ], [ 1, %2005 ]
  store i8 %2024, i8* %61, align 1, !tbaa !1332
  store i8 %2025, i8* %53, align 1, !tbaa !1332
  store i8 %2026, i8* %46, align 1, !tbaa !1332
  br label %2027

; <label>:2027:                                   ; preds = %2023, %2021
  %2028 = phi i8 [ %2026, %2023 ], [ %2550, %2021 ]
  store i8 0, i8* %70, align 1, !tbaa !1332
  store i8 0, i8* %64, align 1, !tbaa !1332
  store i8 0, i8* %58, align 1, !tbaa !1332
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2027, %2013
  %2029 = phi i8 [ %2016, %2013 ], [ %2028, %2027 ]
  %2030 = phi i64 [ %2015, %2013 ], [ %2003, %2027 ]
  %2031 = phi %struct.Memory* [ %2014, %2013 ], [ %2490, %2027 ]
  %2032 = icmp ne i8 %2029, 0
  %2033 = select i1 %2032, i64 103, i64 6
  %2034 = add i64 %2030, %2033
  %2035 = icmp eq i8 %2029, 1
  %2036 = add i64 %2034, 10
  store i64 %2036, i64* %3, align 8
  br i1 %2035, label %block_4015f4, label %block_401593

block_40168d:                                     ; preds = %block_401650, %block_401655
  %2037 = phi i64 [ %1399, %block_401655 ], [ %1721, %block_401650 ]
  %2038 = phi i64 [ %1403, %block_401655 ], [ %1724, %block_401650 ]
  %2039 = phi %struct.Memory* [ %2490, %block_401655 ], [ %1723, %block_401650 ]
  store i32 0, i32* %1913, align 1, !tbaa !1363
  store i32 0, i32* %1915, align 1, !tbaa !1363
  store i32 0, i32* %1596, align 1, !tbaa !1363
  store i32 0, i32* %1597, align 1, !tbaa !1363
  %2040 = add i64 %2037, -112
  %2041 = inttoptr i64 %2040 to double*
  %2042 = load double, double* %2041
  store double %2042, double* %837, align 1, !tbaa !1244
  store double 0.000000e+00, double* %839, align 1, !tbaa !1244
  %2043 = add i64 %2038, 12
  store i64 %2043, i64* %3, align 8
  %2044 = load double, double* %72, align 1
  %2045 = fcmp uno double %2042, %2044
  br i1 %2045, label %2046, label %2057

; <label>:2046:                                   ; preds = %block_40168d
  %2047 = fadd double %2042, %2044
  %2048 = bitcast double %2047 to i64
  %2049 = and i64 %2048, 9221120237041090560
  %2050 = icmp eq i64 %2049, 9218868437227405312
  %2051 = and i64 %2048, 2251799813685247
  %2052 = icmp ne i64 %2051, 0
  %2053 = and i1 %2050, %2052
  br i1 %2053, label %2054, label %2063

; <label>:2054:                                   ; preds = %2046
  %2055 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2043, %struct.Memory* %2039) #14
  %2056 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit200

; <label>:2057:                                   ; preds = %block_40168d
  %2058 = fcmp ogt double %2042, %2044
  br i1 %2058, label %2063, label %2059

; <label>:2059:                                   ; preds = %2057
  %2060 = fcmp olt double %2042, %2044
  br i1 %2060, label %2063, label %2061

; <label>:2061:                                   ; preds = %2059
  %2062 = fcmp oeq double %2042, %2044
  br i1 %2062, label %2063, label %2067

; <label>:2063:                                   ; preds = %2061, %2059, %2057, %2046
  %2064 = phi i8 [ 0, %2057 ], [ 0, %2059 ], [ 1, %2061 ], [ 1, %2046 ]
  %2065 = phi i8 [ 0, %2057 ], [ 0, %2059 ], [ 0, %2061 ], [ 1, %2046 ]
  %2066 = phi i8 [ 0, %2057 ], [ 1, %2059 ], [ 0, %2061 ], [ 1, %2046 ]
  store i8 %2064, i8* %61, align 1, !tbaa !1332
  store i8 %2065, i8* %53, align 1, !tbaa !1332
  store i8 %2066, i8* %46, align 1, !tbaa !1332
  br label %2067

; <label>:2067:                                   ; preds = %2063, %2061
  store i8 0, i8* %70, align 1, !tbaa !1332
  store i8 0, i8* %64, align 1, !tbaa !1332
  store i8 0, i8* %58, align 1, !tbaa !1332
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit200

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit200: ; preds = %2067, %2054
  %2068 = phi i64 [ %2056, %2054 ], [ %2043, %2067 ]
  %2069 = phi %struct.Memory* [ %2055, %2054 ], [ %2039, %2067 ]
  %2070 = add i64 %2068, 17
  %2071 = add i64 %2068, 6
  %2072 = load i8, i8* %61, align 1, !tbaa !1262
  %2073 = icmp eq i8 %2072, 0
  %2074 = select i1 %2073, i64 %2070, i64 %2071
  store i64 %2074, i64* %3, align 8, !tbaa !1240
  br i1 %2073, label %block_4016aa, label %block_40169f

block_4013f5:                                     ; preds = %block_40136b
  %2075 = zext i32 %313 to i64
  %2076 = zext i32 %317 to i64
  store i64 %2075, i64* %8, align 8, !tbaa !1240
  store i64 %2076, i64* %10, align 8, !tbaa !1240
  %2077 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 872) to double*)
  %2078 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  %2079 = inttoptr i64 %2180 to double*
  %2080 = load double, double* %2079
  store double %2080, double* %2259, align 1, !tbaa !1244
  store double 0.000000e+00, double* %2261, align 1, !tbaa !1244
  %2081 = add i64 %2176, -248
  %2082 = inttoptr i64 %2081 to double*
  store double %2077, double* %2082
  %2083 = bitcast double %2080 to <2 x i32>
  %2084 = extractelement <2 x i32> %2083, i32 0
  store i32 %2084, i32* %1913, align 1, !tbaa !1330
  %2085 = extractelement <2 x i32> %2083, i32 1
  store i32 %2085, i32* %1915, align 1, !tbaa !1330
  %2086 = add i64 %2176, -256
  %2087 = inttoptr i64 %2086 to double*
  store double %2078, double* %2087
  %2088 = add i64 %329, 45
  %2089 = load i64, i64* %13, align 8, !tbaa !1240
  %2090 = add i64 %2089, -8
  %2091 = inttoptr i64 %2090 to i64*
  store i64 %2088, i64* %2091
  %2092 = load double, double* %1620, align 8, !alias.scope !1714, !noalias !1717
  %2093 = inttoptr i64 %2090 to i64*
  %2094 = load i64, i64* %2093
  store i64 %2089, i64* %13, align 8, !alias.scope !1714, !noalias !1717
  %2095 = tail call double @sqrt(double %2092) #11
  %2096 = inttoptr i64 %2086 to double*
  %2097 = load double, double* %2096
  %2098 = fdiv double %2097, %2095
  %2099 = inttoptr i64 %2180 to double*
  store double %2098, double* %2099
  %2100 = inttoptr i64 %2086 to double*
  %2101 = load double, double* %2100
  %2102 = inttoptr i64 %2177 to double*
  %2103 = load double, double* %2102
  %2104 = fdiv double %2101, %2103
  store double %2104, double* %72, align 1, !tbaa !1244
  store i64 0, i64* %73, align 1, !tbaa !1244
  %2105 = inttoptr i64 %2081 to double*
  %2106 = load double, double* %2105
  %2107 = fadd double %2106, %2104
  store double %2107, double* %837, align 1, !tbaa !1244
  store i64 0, i64* %838, align 1, !tbaa !1244
  %2108 = load i64, i64* %14, align 8
  %2109 = add i64 %2108, -104
  %2110 = inttoptr i64 %2109 to double*
  store double %2107, double* %2110
  %2111 = add i64 %2108, -72
  %2112 = inttoptr i64 %2111 to i32*
  %2113 = load i32, i32* %2112
  %2114 = add i32 %2113, -1
  %2115 = icmp eq i32 %2113, 0
  %2116 = zext i1 %2115 to i8
  store i8 %2116, i8* %46, align 1, !tbaa !1246
  %2117 = and i32 %2114, 255
  %2118 = tail call i32 @llvm.ctpop.i32(i32 %2117) #11
  %2119 = trunc i32 %2118 to i8
  %2120 = and i8 %2119, 1
  %2121 = xor i8 %2120, 1
  store i8 %2121, i8* %53, align 1, !tbaa !1260
  %2122 = xor i32 %2114, %2113
  %2123 = lshr i32 %2122, 4
  %2124 = trunc i32 %2123 to i8
  %2125 = and i8 %2124, 1
  store i8 %2125, i8* %58, align 1, !tbaa !1261
  %2126 = icmp eq i32 %2114, 0
  %2127 = zext i1 %2126 to i8
  store i8 %2127, i8* %61, align 1, !tbaa !1262
  %2128 = lshr i32 %2114, 31
  %2129 = trunc i32 %2128 to i8
  store i8 %2129, i8* %64, align 1, !tbaa !1263
  %2130 = lshr i32 %2113, 31
  %2131 = xor i32 %2128, %2130
  %2132 = add nuw nsw i32 %2131, %2130
  %2133 = icmp eq i32 %2132, 2
  %2134 = zext i1 %2133 to i8
  store i8 %2134, i8* %70, align 1, !tbaa !1264
  %2135 = select i1 %2126, i64 57, i64 80
  %2136 = add i64 %2094, %2135
  store i64 %2136, i64* %3, align 8, !tbaa !1240
  br i1 %2126, label %block_40145b, label %block_401472

block_400d2b:                                     ; preds = %block_400d21
  %2137 = zext i32 %1688 to i64
  store i64 %2137, i64* %12, align 8, !tbaa !1240
  %2138 = add i64 %1713, -571
  %2139 = add i64 %1713, 8
  %2140 = load i64, i64* %13, align 8, !tbaa !1240
  %2141 = add i64 %2140, -8
  %2142 = inttoptr i64 %2141 to i64*
  store i64 %2139, i64* %2142
  store i64 %2141, i64* %13, align 8, !tbaa !1240
  %2143 = tail call %struct.Memory* @sub_400af0_timer_clear(%struct.State* nonnull %0, i64 %2138, %struct.Memory* %1685)
  %2144 = load i64, i64* %14, align 8
  %2145 = add i64 %2144, -60
  %2146 = load i64, i64* %3, align 8
  %2147 = inttoptr i64 %2145 to i32*
  %2148 = load i32, i32* %2147
  %2149 = add i32 %2148, 1
  %2150 = zext i32 %2149 to i64
  store i64 %2150, i64* %8, align 8, !tbaa !1240
  %2151 = icmp eq i32 %2148, -1
  %2152 = icmp eq i32 %2149, 0
  %2153 = or i1 %2151, %2152
  %2154 = zext i1 %2153 to i8
  store i8 %2154, i8* %46, align 1, !tbaa !1246
  %2155 = and i32 %2149, 255
  %2156 = tail call i32 @llvm.ctpop.i32(i32 %2155) #11
  %2157 = trunc i32 %2156 to i8
  %2158 = and i8 %2157, 1
  %2159 = xor i8 %2158, 1
  store i8 %2159, i8* %53, align 1, !tbaa !1260
  %2160 = xor i32 %2149, %2148
  %2161 = lshr i32 %2160, 4
  %2162 = trunc i32 %2161 to i8
  %2163 = and i8 %2162, 1
  store i8 %2163, i8* %58, align 1, !tbaa !1261
  %2164 = zext i1 %2152 to i8
  store i8 %2164, i8* %61, align 1, !tbaa !1262
  %2165 = lshr i32 %2149, 31
  %2166 = trunc i32 %2165 to i8
  store i8 %2166, i8* %64, align 1, !tbaa !1263
  %2167 = lshr i32 %2148, 31
  %2168 = xor i32 %2165, %2167
  %2169 = add nuw nsw i32 %2168, %2165
  %2170 = icmp eq i32 %2169, 2
  %2171 = zext i1 %2170 to i8
  store i8 %2171, i8* %70, align 1, !tbaa !1264
  %2172 = inttoptr i64 %2145 to i32*
  store i32 %2149, i32* %2172
  %2173 = add i64 %2146, -18
  store i64 %2173, i64* %3, align 8, !tbaa !1240
  br label %block_400d21

block_401357:                                     ; preds = %block_40134d, %block_4012e8
  %2174 = phi i64 [ %1556, %block_4012e8 ], [ %1682, %block_40134d ]
  %2175 = phi %struct.Memory* [ %1543, %block_4012e8 ], [ %1681, %block_40134d ]
  store i32 0, i32* %1913, align 1, !tbaa !1363
  store i32 0, i32* %1915, align 1, !tbaa !1363
  store i32 0, i32* %1596, align 1, !tbaa !1363
  store i32 0, i32* %1597, align 1, !tbaa !1363
  %2176 = load i64, i64* %14, align 8
  %2177 = add i64 %2176, -88
  %2178 = load double, double* %72, align 1
  %2179 = inttoptr i64 %2177 to double*
  store double %2178, double* %2179
  %2180 = add i64 %2176, -96
  %2181 = inttoptr i64 %2180 to double*
  store double %2178, double* %2181
  %2182 = add i64 %2176, -64
  %2183 = add i64 %2174, 20
  store i64 %2183, i64* %3, align 8
  %2184 = inttoptr i64 %2182 to i32*
  store i32 0, i32* %2184
  br label %block_40136b

block_401288:                                     ; preds = %block_401254
  store i64 0, i64* %12, align 8, !tbaa !1240
  store i8 0, i8* %46, align 1, !tbaa !1246
  store i8 1, i8* %53, align 1, !tbaa !1260
  store i8 1, i8* %61, align 1, !tbaa !1262
  store i8 0, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  store i8 0, i8* %58, align 1, !tbaa !1261
  store i32 0, i32* %1913, align 1, !tbaa !1363
  store i32 0, i32* %1915, align 1, !tbaa !1363
  store i32 0, i32* %1596, align 1, !tbaa !1363
  store i32 0, i32* %1597, align 1, !tbaa !1363
  %2185 = add i64 %1280, -104
  %2186 = load double, double* %72, align 1
  %2187 = inttoptr i64 %2185 to double*
  store double %2186, double* %2187
  %2188 = add i64 %2359, -1832
  %2189 = add i64 %2359, 15
  %2190 = load i64, i64* %13, align 8, !tbaa !1240
  %2191 = add i64 %2190, -8
  %2192 = inttoptr i64 %2191 to i64*
  store i64 %2189, i64* %2192
  store i64 %2191, i64* %13, align 8, !tbaa !1240
  %2193 = tail call %struct.Memory* @sub_400b60_timer_stop(%struct.State* nonnull %0, i64 %2188, %struct.Memory* %2347)
  %2194 = load i64, i64* %3, align 8
  store i64 0, i64* %12, align 8, !tbaa !1240
  store i8 0, i8* %46, align 1, !tbaa !1246
  store i8 1, i8* %53, align 1, !tbaa !1260
  store i8 1, i8* %61, align 1, !tbaa !1262
  store i8 0, i8* %64, align 1, !tbaa !1263
  store i8 0, i8* %70, align 1, !tbaa !1264
  store i8 0, i8* %58, align 1, !tbaa !1261
  %2195 = add i64 %2194, -1767
  %2196 = add i64 %2194, 7
  %2197 = load i64, i64* %13, align 8, !tbaa !1240
  %2198 = add i64 %2197, -8
  %2199 = inttoptr i64 %2198 to i64*
  store i64 %2196, i64* %2199
  store i64 %2198, i64* %13, align 8, !tbaa !1240
  %2200 = tail call %struct.Memory* @sub_400bb0_timer_read(%struct.State* nonnull %0, i64 %2195, %struct.Memory* %2193)
  %2201 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1035), i64* %12, align 8, !tbaa !1240
  store i8 1, i8* %1562, align 1, !tbaa !1332
  %2202 = add i64 %2201, 17
  %2203 = load i64, i64* %13, align 8, !tbaa !1240
  %2204 = add i64 %2203, -8
  %2205 = inttoptr i64 %2204 to i64*
  store i64 %2202, i64* %2205
  %2206 = load i64, i64* %11, align 8, !alias.scope !1719, !noalias !1722
  %2207 = load i64, i64* %660, align 8, !alias.scope !1719, !noalias !1722
  %2208 = load i64, i64* %659, align 8, !alias.scope !1719, !noalias !1722
  %2209 = load i64, i64* %15, align 8, !alias.scope !1719, !noalias !1722
  %2210 = load i64, i64* %1564, align 8, !alias.scope !1719, !noalias !1722
  %2211 = inttoptr i64 %2203 to i64*
  %2212 = load i64, i64* %2211
  %2213 = add i64 %2203, 8
  %2214 = inttoptr i64 %2213 to i64*
  %2215 = load i64, i64* %2214
  %2216 = add i64 %2203, 16
  %2217 = inttoptr i64 %2216 to i64*
  %2218 = load i64, i64* %2217
  %2219 = add i64 %2203, 24
  %2220 = inttoptr i64 %2219 to i64*
  %2221 = load i64, i64* %2220
  %2222 = add i64 %2203, 32
  %2223 = inttoptr i64 %2222 to i64*
  %2224 = load i64, i64* %2223
  %2225 = add i64 %2203, 40
  %2226 = inttoptr i64 %2225 to i64*
  %2227 = load i64, i64* %2226
  %2228 = add i64 %2203, 48
  %2229 = inttoptr i64 %2228 to i64*
  %2230 = load i64, i64* %2229
  %2231 = add i64 %2203, 56
  %2232 = inttoptr i64 %2231 to i64*
  %2233 = load i64, i64* %2232
  %2234 = add i64 %2203, 64
  %2235 = inttoptr i64 %2234 to i64*
  %2236 = load i64, i64* %2235
  %2237 = add i64 %2203, 72
  %2238 = inttoptr i64 %2237 to i64*
  %2239 = load i64, i64* %2238
  %2240 = inttoptr i64 %2204 to i64*
  %2241 = load i64, i64* %2240
  store i64 %2241, i64* %3, align 8, !alias.scope !1719, !noalias !1722
  store i64 %2203, i64* %13, align 8, !alias.scope !1719, !noalias !1722
  %2242 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1035), i64 %2206, i64 %2207, i64 %2208, i64 %2209, i64 %2210, i64 %2212, i64 %2215, i64 %2218, i64 %2221, i64 %2224, i64 %2227, i64 %2230, i64 %2233, i64 %2236, i64 %2239), !noalias !1719
  store i64 %2242, i64* %1573, align 8, !alias.scope !1719, !noalias !1722
  %2243 = load i64, i64* %3, align 8
  store i64 1, i64* %12, align 8, !tbaa !1240
  %2244 = load i64, i64* %14, align 8
  %2245 = add i64 %2244, -236
  %2246 = trunc i64 %2242 to i32
  %2247 = inttoptr i64 %2245 to i32*
  store i32 %2246, i32* %2247
  %2248 = add i64 %2243, -1951
  %2249 = add i64 %2243, 16
  %2250 = load i64, i64* %13, align 8, !tbaa !1240
  %2251 = add i64 %2250, -8
  %2252 = inttoptr i64 %2251 to i64*
  store i64 %2249, i64* %2252
  store i64 %2251, i64* %13, align 8, !tbaa !1240
  %2253 = tail call %struct.Memory* @sub_400b10_timer_start(%struct.State* nonnull %0, i64 %2248, %struct.Memory* %2200)
  %2254 = load i64, i64* %14, align 8
  %2255 = add i64 %2254, -72
  %2256 = load i64, i64* %3, align 8
  %2257 = add i64 %2256, 7
  store i64 %2257, i64* %3, align 8
  %2258 = inttoptr i64 %2255 to i32*
  store i32 1, i32* %2258
  %2259 = bitcast %union.VectorReg* %1567 to double*
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2261 = bitcast i64* %2260 to double*
  br label %block_4012c6

block_401007:                                     ; preds = %block_400ffa
  %2262 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 808) to double*)
  store double %2262, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %2263 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %2264 = sext i32 %205 to i64
  store i64 %2264, i64* %10, align 8, !tbaa !1240
  %2265 = shl nsw i64 %2264, 3
  %2266 = add i64 %2265, %2263
  %2267 = inttoptr i64 %2266 to double*
  store double %2262, double* %2267
  %2268 = inttoptr i64 %1462 to i32*
  %2269 = load i32, i32* %2268
  %2270 = add i32 %2269, 1
  %2271 = zext i32 %2270 to i64
  store i64 %2271, i64* %8, align 8, !tbaa !1240
  %2272 = inttoptr i64 %1462 to i32*
  store i32 %2270, i32* %2272
  %2273 = add i64 %216, -13
  br label %block_400ffa

block_400f62:                                     ; preds = %block_400fe0, %block_400dcb
  %2274 = phi i64 [ %897, %block_400dcb ], [ %1735, %block_400fe0 ]
  %2275 = phi %struct.Memory* [ %893, %block_400dcb ], [ %1918, %block_400fe0 ]
  %2276 = inttoptr i64 %895 to i32*
  %2277 = load i32, i32* %2276
  %2278 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1144) to i32*)
  %2279 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1140) to i32*)
  %2280 = sub i32 %2278, %2279
  %2281 = add i32 %2280, 1
  %2282 = sub i32 %2277, %2281
  %2283 = lshr i32 %2282, 31
  %2284 = trunc i32 %2283 to i8
  %2285 = lshr i32 %2277, 31
  %2286 = lshr i32 %2281, 31
  %2287 = xor i32 %2286, %2285
  %2288 = xor i32 %2283, %2285
  %2289 = add nuw nsw i32 %2288, %2287
  %2290 = icmp eq i32 %2289, 2
  %2291 = icmp ne i8 %2284, 0
  %2292 = xor i1 %2291, %2290
  %2293 = select i1 %2292, i64 28, i64 145
  %2294 = add i64 %2274, %2293
  br i1 %2292, label %block_400f7e, label %block_400ff3

block_401806:                                     ; preds = %block_4016d5
  store i64 1, i64* %12, align 8, !tbaa !1240
  %2295 = add i64 %190, -3158
  %2296 = add i64 %190, 10
  %2297 = load i64, i64* %13, align 8, !tbaa !1240
  %2298 = add i64 %2297, -8
  %2299 = inttoptr i64 %2298 to i64*
  store i64 %2296, i64* %2299
  store i64 %2298, i64* %13, align 8, !tbaa !1240
  %2300 = tail call %struct.Memory* @sub_400bb0_timer_read(%struct.State* nonnull %0, i64 %2295, %struct.Memory* %177)
  %2301 = load i64, i64* %3, align 8
  %2302 = bitcast %union.VectorReg* %22 to i32*
  store i32 0, i32* %2302, align 1, !tbaa !1363
  %2303 = getelementptr inbounds i8, i8* %1446, i64 4
  %2304 = bitcast i8* %2303 to i32*
  store i32 0, i32* %2304, align 1, !tbaa !1363
  %2305 = bitcast i64* %838 to i32*
  store i32 0, i32* %2305, align 1, !tbaa !1363
  %2306 = getelementptr inbounds i8, i8* %1446, i64 12
  %2307 = bitcast i8* %2306 to i32*
  store i32 0, i32* %2307, align 1, !tbaa !1363
  %2308 = load i64, i64* %14, align 8
  %2309 = add i64 %2308, -128
  %2310 = load double, double* %72, align 1
  %2311 = inttoptr i64 %2309 to double*
  store double %2310, double* %2311
  %2312 = inttoptr i64 %2309 to double*
  %2313 = load double, double* %2312
  store double %2313, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %2314 = add i64 %2301, 17
  store i64 %2314, i64* %3, align 8
  %2315 = load double, double* %837, align 1
  %2316 = fcmp uno double %2313, %2315
  br i1 %2316, label %2317, label %2328

; <label>:2317:                                   ; preds = %block_401806
  %2318 = fadd double %2313, %2315
  %2319 = bitcast double %2318 to i64
  %2320 = and i64 %2319, 9221120237041090560
  %2321 = icmp eq i64 %2320, 9218868437227405312
  %2322 = and i64 %2319, 2251799813685247
  %2323 = icmp ne i64 %2322, 0
  %2324 = and i1 %2321, %2323
  br i1 %2324, label %2325, label %2334

; <label>:2325:                                   ; preds = %2317
  %2326 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2314, %struct.Memory* %2300) #14
  %2327 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212

; <label>:2328:                                   ; preds = %block_401806
  %2329 = fcmp ogt double %2313, %2315
  br i1 %2329, label %2334, label %2330

; <label>:2330:                                   ; preds = %2328
  %2331 = fcmp olt double %2313, %2315
  br i1 %2331, label %2334, label %2332

; <label>:2332:                                   ; preds = %2330
  %2333 = fcmp oeq double %2313, %2315
  br i1 %2333, label %2334, label %2338

; <label>:2334:                                   ; preds = %2332, %2330, %2328, %2317
  %2335 = phi i8 [ 0, %2328 ], [ 0, %2330 ], [ 1, %2332 ], [ 1, %2317 ]
  %2336 = phi i8 [ 0, %2328 ], [ 0, %2330 ], [ 0, %2332 ], [ 1, %2317 ]
  %2337 = phi i8 [ 0, %2328 ], [ 1, %2330 ], [ 0, %2332 ], [ 1, %2317 ]
  store i8 %2335, i8* %61, align 1, !tbaa !1332
  store i8 %2336, i8* %53, align 1, !tbaa !1332
  store i8 %2337, i8* %46, align 1, !tbaa !1332
  br label %2338

; <label>:2338:                                   ; preds = %2334, %2332
  store i8 0, i8* %70, align 1, !tbaa !1332
  store i8 0, i8* %64, align 1, !tbaa !1332
  store i8 0, i8* %58, align 1, !tbaa !1332
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit212: ; preds = %2338, %2325
  %2339 = phi i64 [ %2327, %2325 ], [ %2314, %2338 ]
  %2340 = phi %struct.Memory* [ %2326, %2325 ], [ %2300, %2338 ]
  %2341 = add i64 %2339, 25
  %2342 = add i64 %2339, 6
  %2343 = load i8, i8* %61, align 1, !tbaa !1262
  %2344 = icmp eq i8 %2343, 0
  %2345 = select i1 %2344, i64 %2341, i64 %2342
  store i64 %2345, i64* %3, align 8, !tbaa !1240
  br i1 %2344, label %block_40183a, label %block_401827

block_401254:                                     ; preds = %block_40124d, %block_401261
  %2346 = phi i64 [ %1726, %block_40124d ], [ %1100, %block_401261 ]
  %2347 = phi %struct.Memory* [ %1281, %block_40124d ], [ %2347, %block_401261 ]
  %2348 = inttoptr i64 %1725 to i32*
  %2349 = load i32, i32* %2348
  %2350 = add i32 %2349, -14001
  %2351 = lshr i32 %2350, 31
  %2352 = lshr i32 %2349, 31
  %2353 = xor i32 %2351, %2352
  %2354 = add nuw nsw i32 %2353, %2352
  %2355 = icmp eq i32 %2354, 2
  %2356 = icmp ne i32 %2351, 0
  %2357 = xor i1 %2356, %2355
  %2358 = select i1 %2357, i64 13, i64 52
  %2359 = add i64 %2346, %2358
  br i1 %2357, label %block_401261, label %block_401288

block_401205:                                     ; preds = %block_4011e9
  %2360 = inttoptr i64 %1516 to double*
  %2361 = load double, double* %2360
  %2362 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1104) to i64*)
  %2363 = sext i32 %333 to i64
  %2364 = shl nsw i64 %2363, 3
  %2365 = add i64 %2364, %2362
  %2366 = inttoptr i64 %2365 to double*
  %2367 = load double, double* %2366
  %2368 = fmul double %2361, %2367
  store double %2368, double* %72, align 1, !tbaa !1244
  store i64 0, i64* %73, align 1, !tbaa !1244
  %2369 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1096) to i64*)
  %2370 = add i64 %2364, %2369
  %2371 = inttoptr i64 %2370 to double*
  store double %2368, double* %2371
  %2372 = inttoptr i64 %1518 to i32*
  %2373 = load i32, i32* %2372
  %2374 = add i32 %2373, 1
  %2375 = inttoptr i64 %1518 to i32*
  store i32 %2374, i32* %2375
  %2376 = add i64 %349, -28
  br label %block_4011e9

block_401974:                                     ; preds = %block_40196f, %block_4016d5.block_401974_crit_edge
  %2377 = phi i32 [ %192, %block_4016d5.block_401974_crit_edge ], [ %607, %block_40196f ]
  %2378 = phi i64 [ %191, %block_4016d5.block_401974_crit_edge ], [ %608, %block_40196f ]
  %2379 = phi %struct.Memory* [ %177, %block_4016d5.block_401974_crit_edge ], [ %611, %block_40196f ]
  %2380 = zext i32 %2377 to i64
  %2381 = and i64 %2378, 4294967295
  %2382 = xor i64 %2380, %2381
  store i64 %2382, i64* %8, align 8, !tbaa !1240
  %2383 = load i64, i64* %13, align 8
  %2384 = add i64 %2383, 424
  %2385 = icmp ugt i64 %2383, -425
  %2386 = zext i1 %2385 to i8
  store i8 %2386, i8* %46, align 1, !tbaa !1246
  %2387 = trunc i64 %2384 to i32
  %2388 = and i32 %2387, 255
  %2389 = tail call i32 @llvm.ctpop.i32(i32 %2388) #11
  %2390 = trunc i32 %2389 to i8
  %2391 = and i8 %2390, 1
  %2392 = xor i8 %2391, 1
  store i8 %2392, i8* %53, align 1, !tbaa !1260
  %2393 = xor i64 %2384, %2383
  %2394 = lshr i64 %2393, 4
  %2395 = trunc i64 %2394 to i8
  %2396 = and i8 %2395, 1
  store i8 %2396, i8* %58, align 1, !tbaa !1261
  %2397 = icmp eq i64 %2384, 0
  %2398 = zext i1 %2397 to i8
  store i8 %2398, i8* %61, align 1, !tbaa !1262
  %2399 = lshr i64 %2384, 63
  %2400 = trunc i64 %2399 to i8
  store i8 %2400, i8* %64, align 1, !tbaa !1263
  %2401 = lshr i64 %2383, 63
  %2402 = xor i64 %2399, %2401
  %2403 = add nuw nsw i64 %2402, %2399
  %2404 = icmp eq i64 %2403, 2
  %2405 = zext i1 %2404 to i8
  store i8 %2405, i8* %70, align 1, !tbaa !1264
  %2406 = add i64 %2383, 432
  %2407 = inttoptr i64 %2384 to i64*
  %2408 = load i64, i64* %2407
  store i64 %2408, i64* %9, align 8, !tbaa !1240
  %2409 = add i64 %2383, 440
  %2410 = inttoptr i64 %2406 to i64*
  %2411 = load i64, i64* %2410
  store i64 %2411, i64* %17, align 8, !tbaa !1240
  %2412 = add i64 %2383, 448
  %2413 = inttoptr i64 %2409 to i64*
  %2414 = load i64, i64* %2413
  store i64 %2414, i64* %18, align 8, !tbaa !1240
  %2415 = add i64 %2383, 456
  %2416 = inttoptr i64 %2412 to i64*
  %2417 = load i64, i64* %2416
  store i64 %2417, i64* %19, align 8, !tbaa !1240
  %2418 = add i64 %2383, 464
  %2419 = inttoptr i64 %2415 to i64*
  %2420 = load i64, i64* %2419
  store i64 %2420, i64* %20, align 8, !tbaa !1240
  %2421 = add i64 %2383, 472
  %2422 = inttoptr i64 %2418 to i64*
  %2423 = load i64, i64* %2422
  store i64 %2423, i64* %14, align 8, !tbaa !1240
  %2424 = inttoptr i64 %2421 to i64*
  %2425 = load i64, i64* %2424
  store i64 %2425, i64* %3, align 8, !tbaa !1240
  %2426 = add i64 %2383, 480
  store i64 %2426, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %2379

block_400d6b:                                     ; preds = %block_400d41
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 938), i64* %8, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 930), i64* %10, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 925), i64* %1563, align 8, !tbaa !1240
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_605080__bss_type* @seg_605080__bss to i64), i64 1136) to i32*)
  %2427 = add i64 %1578, -192
  %2428 = inttoptr i64 %2427 to i64*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 925), i64* %2428
  %2429 = add i64 %1578, -184
  %2430 = inttoptr i64 %2429 to i64*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 930), i64* %2430
  %2431 = add i64 %1578, -176
  %2432 = inttoptr i64 %2431 to i64*
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 938), i64* %2432
  %2433 = inttoptr i64 %1579 to i64*
  %2434 = load i64, i64* %2433
  store i64 %2434, i64* %12, align 8, !tbaa !1240
  %2435 = add i64 %1593, 74
  %2436 = load i64, i64* %13, align 8, !tbaa !1240
  %2437 = add i64 %2436, -8
  %2438 = inttoptr i64 %2437 to i64*
  store i64 %2435, i64* %2438
  %2439 = inttoptr i64 %2437 to i64*
  %2440 = load i64, i64* %2439
  store i64 %2440, i64* %3, align 8, !alias.scope !1724, !noalias !1727
  store i64 %2436, i64* %13, align 8, !alias.scope !1724, !noalias !1727
  %2441 = tail call i64 @fclose(i64 %2434), !noalias !1724
  store i64 %2441, i64* %1573, align 8, !alias.scope !1724, !noalias !1727
  %2442 = load i64, i64* %14, align 8
  %2443 = add i64 %2442, -208
  %2444 = trunc i64 %2441 to i32
  %2445 = load i64, i64* %3, align 8
  %2446 = inttoptr i64 %2443 to i32*
  store i32 %2444, i32* %2446
  %2447 = add i64 %2445, 22
  store i64 %2447, i64* %3, align 8, !tbaa !1240
  br label %block_400dcb

block_40123a:                                     ; preds = %block_4011e9
  %2448 = zext i32 %333 to i64
  %2449 = zext i32 %337 to i64
  store i64 %2448, i64* %8, align 8, !tbaa !1240
  store i64 %2449, i64* %10, align 8, !tbaa !1240
  %2450 = add i64 %1512, -72
  %2451 = inttoptr i64 %2450 to i32*
  %2452 = load i32, i32* %2451
  %2453 = add i32 %2452, 1
  %2454 = zext i32 %2453 to i64
  store i64 %2454, i64* %8, align 8, !tbaa !1240
  %2455 = icmp eq i32 %2452, -1
  %2456 = icmp eq i32 %2453, 0
  %2457 = or i1 %2455, %2456
  %2458 = zext i1 %2457 to i8
  store i8 %2458, i8* %46, align 1, !tbaa !1246
  %2459 = and i32 %2453, 255
  %2460 = tail call i32 @llvm.ctpop.i32(i32 %2459) #11
  %2461 = trunc i32 %2460 to i8
  %2462 = and i8 %2461, 1
  %2463 = xor i8 %2462, 1
  store i8 %2463, i8* %53, align 1, !tbaa !1260
  %2464 = xor i32 %2453, %2452
  %2465 = lshr i32 %2464, 4
  %2466 = trunc i32 %2465 to i8
  %2467 = and i8 %2466, 1
  store i8 %2467, i8* %58, align 1, !tbaa !1261
  %2468 = zext i1 %2456 to i8
  store i8 %2468, i8* %61, align 1, !tbaa !1262
  %2469 = lshr i32 %2453, 31
  %2470 = trunc i32 %2469 to i8
  store i8 %2470, i8* %64, align 1, !tbaa !1263
  %2471 = lshr i32 %2452, 31
  %2472 = xor i32 %2469, %2471
  %2473 = add nuw nsw i32 %2472, %2469
  %2474 = icmp eq i32 %2473, 2
  %2475 = zext i1 %2474 to i8
  store i8 %2475, i8* %70, align 1, !tbaa !1264
  %2476 = inttoptr i64 %2450 to i32*
  store i32 %2453, i32* %2476
  %2477 = add i64 %349, -389
  store i64 %2477, i64* %3, align 8, !tbaa !1240
  br label %block_4010b5

block_401501:                                     ; preds = %block_4012c6
  store i64 1, i64* %12, align 8, !tbaa !1240
  %2478 = add i64 %964, -2465
  %2479 = add i64 %964, 10
  %2480 = load i64, i64* %13, align 8, !tbaa !1240
  %2481 = add i64 %2480, -8
  %2482 = inttoptr i64 %2481 to i64*
  store i64 %2479, i64* %2482
  store i64 %2481, i64* %13, align 8, !tbaa !1240
  %2483 = tail call %struct.Memory* @sub_400b60_timer_stop(%struct.State* nonnull %0, i64 %2478, %struct.Memory* %935)
  %2484 = load i64, i64* %3, align 8
  store i64 1, i64* %12, align 8, !tbaa !1240
  %2485 = add i64 %2484, -2395
  %2486 = add i64 %2484, 10
  %2487 = load i64, i64* %13, align 8, !tbaa !1240
  %2488 = add i64 %2487, -8
  %2489 = inttoptr i64 %2488 to i64*
  store i64 %2486, i64* %2489
  store i64 %2488, i64* %13, align 8, !tbaa !1240
  %2490 = tail call %struct.Memory* @sub_400bb0_timer_read(%struct.State* nonnull %0, i64 %2485, %struct.Memory* %2483)
  %2491 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1156), i64* %12, align 8, !tbaa !1240
  %2492 = load i64, i64* %14, align 8
  %2493 = add i64 %2492, -112
  %2494 = load double, double* %72, align 1
  %2495 = inttoptr i64 %2493 to double*
  store double %2494, double* %2495
  store i8 0, i8* %1562, align 1, !tbaa !1332
  %2496 = add i64 %2491, 22
  %2497 = load i64, i64* %13, align 8, !tbaa !1240
  %2498 = add i64 %2497, -8
  %2499 = inttoptr i64 %2498 to i64*
  store i64 %2496, i64* %2499
  %2500 = load i64, i64* %11, align 8, !alias.scope !1729, !noalias !1732
  %2501 = load i64, i64* %660, align 8, !alias.scope !1729, !noalias !1732
  %2502 = load i64, i64* %659, align 8, !alias.scope !1729, !noalias !1732
  %2503 = load i64, i64* %15, align 8, !alias.scope !1729, !noalias !1732
  %2504 = load i64, i64* %1564, align 8, !alias.scope !1729, !noalias !1732
  %2505 = inttoptr i64 %2497 to i64*
  %2506 = load i64, i64* %2505
  %2507 = add i64 %2497, 8
  %2508 = inttoptr i64 %2507 to i64*
  %2509 = load i64, i64* %2508
  %2510 = add i64 %2497, 16
  %2511 = inttoptr i64 %2510 to i64*
  %2512 = load i64, i64* %2511
  %2513 = add i64 %2497, 24
  %2514 = inttoptr i64 %2513 to i64*
  %2515 = load i64, i64* %2514
  %2516 = add i64 %2497, 32
  %2517 = inttoptr i64 %2516 to i64*
  %2518 = load i64, i64* %2517
  %2519 = add i64 %2497, 40
  %2520 = inttoptr i64 %2519 to i64*
  %2521 = load i64, i64* %2520
  %2522 = add i64 %2497, 48
  %2523 = inttoptr i64 %2522 to i64*
  %2524 = load i64, i64* %2523
  %2525 = add i64 %2497, 56
  %2526 = inttoptr i64 %2525 to i64*
  %2527 = load i64, i64* %2526
  %2528 = add i64 %2497, 64
  %2529 = inttoptr i64 %2528 to i64*
  %2530 = load i64, i64* %2529
  %2531 = add i64 %2497, 72
  %2532 = inttoptr i64 %2531 to i64*
  %2533 = load i64, i64* %2532
  %2534 = inttoptr i64 %2498 to i64*
  %2535 = load i64, i64* %2534
  store i64 %2535, i64* %3, align 8, !alias.scope !1729, !noalias !1732
  store i64 %2497, i64* %13, align 8, !alias.scope !1729, !noalias !1732
  %2536 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 1156), i64 %2500, i64 %2501, i64 %2502, i64 %2503, i64 %2504, i64 %2506, i64 %2509, i64 %2512, i64 %2515, i64 %2518, i64 %2521, i64 %2524, i64 %2527, i64 %2530, i64 %2533), !noalias !1729
  store i64 %2536, i64* %1573, align 8, !alias.scope !1729, !noalias !1732
  %2537 = load i64, i64* %3, align 8
  %2538 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4031d0__rodata_type* @seg_4031d0__rodata to i64), i64 840) to double*)
  store double %2538, double* %72, align 1, !tbaa !1244
  store double 0.000000e+00, double* %74, align 1, !tbaa !1244
  %2539 = load i64, i64* %14, align 8
  %2540 = add i64 %2539, -152
  %2541 = inttoptr i64 %2540 to double*
  store double %2538, double* %2541
  %2542 = add i64 %2539, -129
  %2543 = inttoptr i64 %2542 to i8*
  %2544 = load i8, i8* %2543
  %2545 = sext i8 %2544 to i64
  %2546 = and i64 %2545, 4294967295
  store i64 %2546, i64* %10, align 8, !tbaa !1240
  %2547 = sext i8 %2544 to i32
  %2548 = add nsw i32 %2547, -85
  %2549 = icmp ult i8 %2544, 85
  %2550 = zext i1 %2549 to i8
  store i8 %2550, i8* %46, align 1, !tbaa !1246
  %2551 = and i32 %2548, 255
  %2552 = tail call i32 @llvm.ctpop.i32(i32 %2551) #11
  %2553 = trunc i32 %2552 to i8
  %2554 = and i8 %2553, 1
  %2555 = xor i8 %2554, 1
  store i8 %2555, i8* %53, align 1, !tbaa !1260
  %2556 = xor i32 %2547, 16
  %2557 = xor i32 %2556, %2548
  %2558 = lshr i32 %2557, 4
  %2559 = trunc i32 %2558 to i8
  %2560 = and i8 %2559, 1
  store i8 %2560, i8* %58, align 1, !tbaa !1261
  %2561 = icmp eq i32 %2548, 0
  %2562 = zext i1 %2561 to i8
  store i8 %2562, i8* %61, align 1, !tbaa !1262
  %2563 = lshr i32 %2548, 31
  %2564 = trunc i32 %2563 to i8
  store i8 %2564, i8* %64, align 1, !tbaa !1263
  %2565 = lshr i32 %2547, 31
  %2566 = xor i32 %2563, %2565
  %2567 = add nuw nsw i32 %2566, %2565
  %2568 = icmp eq i32 %2567, 2
  %2569 = zext i1 %2568 to i8
  store i8 %2569, i8* %70, align 1, !tbaa !1264
  %2570 = add i64 %2539, -268
  %2571 = trunc i64 %2536 to i32
  %2572 = inttoptr i64 %2570 to i32*
  store i32 %2571, i32* %2572
  %2573 = select i1 %2561, i64 298, i64 38
  %2574 = add i64 %2537, %2573
  store i64 %2574, i64* %3, align 8, !tbaa !1240
  br i1 %2561, label %block_401655, label %block_401551
}

; Function Attrs: nobuiltin noinline
define i64 @callback_sub_400650__start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4195920, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400650__start(%struct.State* nonnull @__mcsema_reg_state, i64 4195920, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: norecurse nounwind
define void @__mcsema_verify_reg_state() local_unnamed_addr #7 {
entry:
  %0 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %is_null, label %end

is_null:                                          ; preds = %entry
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %end

end:                                              ; preds = %is_null, %entry
  ret void
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400730_frame_dummy(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196144, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400730_frame_dummy(%struct.State* nonnull @__mcsema_reg_state, i64 4196144, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400700___do_global_dtors_aux(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196096, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400700___do_global_dtors_aux(%struct.State* nonnull @__mcsema_reg_state, i64 4196096, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_4031c0___libc_csu_fini() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4207040, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = phi i64 [ %3, %__mcsema_verify_reg_state.exit ], [ %.pre, %5 ]
  %7 = add i64 %6, -8
  store i64 %7, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = tail call %struct.Memory* @sub_4031c0___libc_csu_fini(%struct.State* nonnull @__mcsema_reg_state, i64 4207040, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %9 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %9
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_403150___libc_csu_init() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4206928, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = phi i64 [ %3, %__mcsema_verify_reg_state.exit ], [ %.pre, %5 ]
  %7 = add i64 %6, -8
  store i64 %7, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = tail call %struct.Memory* @sub_403150___libc_csu_init(%struct.State* nonnull @__mcsema_reg_state, i64 4206928, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %9 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %9
}

; Function Attrs: nobuiltin noinline
define i64 @main(i64, i64, i64) #6 {
  %4 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %3
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %3
  %6 = phi i64 [ %4, %3 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197600, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %7 = load volatile i1, i1* @0, align 1
  br i1 %7, label %__mcsema_early_init.exit, label %8

; <label>:8:                                      ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %8, %__mcsema_verify_reg_state.exit
  %9 = phi i64 [ %6, %__mcsema_verify_reg_state.exit ], [ %.pre, %8 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  %10 = add i64 %9, -8
  store i64 %10, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %11 = tail call %struct.Memory* @sub_400ce0_main(%struct.State* nonnull @__mcsema_reg_state, i64 4197600, %struct.Memory* null)
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %12 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %12
}

; Function Attrs: noinline nounwind
define %struct.Memory* @__mcsema_detach_call_value(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %1 to i64 (i64, i64, i64, i64, i64, i64, i64, i64)*
  %27 = tail call i64 %26(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25) #11
  store i64 %27, i64* %5, align 8
  %28 = inttoptr i64 %19 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605548___libc_start_main(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %19 to i64*
  %27 = load i64, i64* %26
  store i64 %27, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %28 = tail call i64 @__libc_start_main(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25)
  store i64 %28, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605550_malloc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @malloc(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4005d0_printf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @printf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605568_exit(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @exit(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4005f0_pow(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @pow(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605538_gettimeofday(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @gettimeofday(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605560_sprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @sprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint nounwind
define %struct.Memory* @ext_400640_sqrt(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = bitcast %union.VectorReg* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = load i64, i64* %5, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %5, align 8
  %13 = tail call double @sqrt(double %8)
  %14 = bitcast %union.VectorReg* %6 to i128*
  store i128 0, i128* %14, align 8
  store double %13, double* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605558_fopen(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @fopen(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605528_fclose(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fclose(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_clear(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197104, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400af0_timer_clear(%struct.State* nonnull @__mcsema_reg_state, i64 4197104, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline
define i64 @wtime_(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4206800, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_4030d0_wtime_(%struct.State* nonnull @__mcsema_reg_state, i64 4206800, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline
define i64 @timer_stop(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197216, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400b60_timer_stop(%struct.State* nonnull @__mcsema_reg_state, i64 4197216, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @vranlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4206368, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_402f20_vranlc(%struct.State* nonnull @__mcsema_reg_state, i64 4206368, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_read(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197296, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400bb0_timer_read(%struct.State* nonnull @__mcsema_reg_state, i64 4197296, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline
define i64 @timer_start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197136, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400b10_timer_start(%struct.State* nonnull @__mcsema_reg_state, i64 4197136, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline
define i64 @print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4205024, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_4029e0_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4205024, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline
define i64 @c_print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196160, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400740_c_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4196160, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.term_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4207044, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_4031c4__term_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4207044, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.init_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4195736, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400598__init_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4195736, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @randlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4206032, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_402dd0_randlc(%struct.State* nonnull @__mcsema_reg_state, i64 4206032, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nobuiltin noinline
define i64 @allocate_arrays(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197328, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  %.pre = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  %14 = phi i64 [ %11, %__mcsema_verify_reg_state.exit ], [ %.pre, %13 ]
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %7, i64* %15
  %16 = add i64 %14, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %6, i64* %17
  %18 = add i64 %14, -24
  store i64 %18, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = tail call %struct.Memory* @sub_400bd0_allocate_arrays(%struct.State* nonnull @__mcsema_reg_state, i64 4197328, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %20
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #11 {
  %1 = tail call i64 @callback_sub_4031c0___libc_csu_fini()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #11 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 9068) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 1292) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 60) to i32*), align 4
  store i32 trunc (i64 add (i64 ptrtoint (%seg_400650__text_type* @seg_400650__text to i64), i64 6335) to i32), i32* inttoptr (i64 add (i64 ptrtoint (%seg_4005b0__plt_type* @seg_4005b0__plt to i64), i64 12) to i32*), align 4
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  %3 = tail call i64 @callback_sub_403150___libc_csu_init()
  ret void
}

; Function Attrs: noinline optnone
define %struct.State* @__mcsema_debug_get_reg_state() #12 {
  ret %struct.State* @__mcsema_reg_state
}

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #13

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline }
attributes #4 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin noinline }
attributes #7 = { norecurse nounwind }
attributes #8 = { nobuiltin noinline nounwind }
attributes #9 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { alwaysinline inlinehint nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noinline optnone }
attributes #13 = { noreturn nounwind }
attributes #14 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1238, !1239}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/antonio/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !75, !81, !84, !91, !95, !100, !102, !110, !114, !118, !130, !134, !138, !142, !146, !151, !155, !159, !163, !167, !175, !179, !183, !185, !189, !193, !197, !203, !207, !211, !213, !221, !225, !233, !235, !239, !243, !247, !251, !256, !261, !266, !267, !268, !269, !272, !273, !274, !275, !276, !277, !278, !334, !338, !354, !357, !362, !370, !375, !379, !383, !387, !391, !393, !395, !399, !405, !409, !415, !421, !423, !427, !431, !435, !439, !450, !452, !456, !460, !464, !466, !470, !474, !478, !480, !482, !486, !494, !498, !502, !506, !508, !514, !516, !522, !526, !530, !534, !538, !542, !546, !548, !550, !554, !558, !562, !564, !568, !572, !574, !576, !580, !584, !588, !592, !593, !594, !522, !450, !456, !464, !592, !593, !594, !595, !598, !601, !603, !605, !607, !609, !611, !613, !615, !617, !619, !621, !623, !625, !626, !627, !628, !630, !632, !634, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !657, !661, !666, !669, !671, !673, !675, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !698, !704, !709, !713, !715, !717, !719, !721, !728, !732, !736, !740, !744, !748, !753, !757, !759, !763, !769, !773, !778, !780, !782, !786, !790, !794, !796, !798, !800, !802, !806, !808, !810, !814, !818, !822, !826, !830, !832, !834, !838, !842, !846, !850, !852, !854, !858, !862, !863, !864, !865, !866, !867, !872, !874, !876, !880, !882, !884, !886, !888, !890, !892, !894, !899, !903, !905, !907, !912, !914, !916, !918, !920, !922, !924, !927, !929, !931, !935, !939, !941, !943, !945, !947, !949, !951, !953, !955, !957, !959, !963, !967, !969, !971, !973, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !1001, !1005, !1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1031, !1035, !1039, !1041, !1043, !1045, !1049, !1053, !1057, !1059, !1061, !1063, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1085, !1089, !1093, !1095, !1097, !1099, !1101, !1105, !1109, !1111, !1113, !1115, !1117, !1119, !1121, !1125, !1129, !1131, !1133, !1135, !1137, !1141, !1145, !1149, !1151, !1153, !1155, !1157, !1159, !1161, !1165, !1169, !1173, !1175, !1179, !1183, !1185, !1187, !1189, !1191, !1193, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !73)
!72 = !DINamespace(name: "__gnu_debug", scope: null)
!73 = !DINamespace(name: "__debug", scope: !74)
!74 = !DINamespace(name: "std", scope: null)
!75 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !76)
!76 = !DISubprogram(name: "abs", scope: !77, file: !77, line: 837, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!77 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!78 = !DISubroutineType(types: !79)
!79 = !{!80, !80}
!80 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !82)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !77, line: 62, baseType: !83)
!83 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !85)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !77, line: 70, baseType: !86)
!86 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 66, size: 128, elements: !87, identifier: "_ZTS6ldiv_t")
!87 = !{!88, !90}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !86, file: !77, line: 68, baseType: !89, size: 64)
!89 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !86, file: !77, line: 69, baseType: !89, size: 64, offset: 64)
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !92)
!92 = !DISubprogram(name: "abort", scope: !77, file: !77, line: 588, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{null}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !96)
!96 = !DISubprogram(name: "atexit", scope: !77, file: !77, line: 592, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!80, !99}
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!100 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !101)
!101 = !DISubprogram(name: "at_quick_exit", scope: !77, file: !77, line: 597, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !103)
!103 = !DISubprogram(name: "atof", scope: !77, file: !77, line: 101, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DISubroutineType(types: !105)
!105 = !{!106, !107}
!106 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !109)
!109 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!110 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !111)
!111 = !DISubprogram(name: "atoi", scope: !77, file: !77, line: 104, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!112 = !DISubroutineType(types: !113)
!113 = !{!80, !107}
!114 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !115)
!115 = !DISubprogram(name: "atol", scope: !77, file: !77, line: 107, type: !116, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!116 = !DISubroutineType(types: !117)
!117 = !{!89, !107}
!118 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !119)
!119 = !DISubprogram(name: "bsearch", scope: !77, file: !77, line: 817, type: !120, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!120 = !DISubroutineType(types: !121)
!121 = !{!122, !68, !68, !123, !123, !126}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !124, line: 62, baseType: !125)
!124 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!125 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !77, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!80, !68, !68}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !131)
!131 = !DISubprogram(name: "calloc", scope: !77, file: !77, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!122, !123, !123}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !135)
!135 = !DISubprogram(name: "div", scope: !77, file: !77, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!82, !80, !80}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !139)
!139 = !DISubprogram(name: "exit", scope: !77, file: !77, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !80}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !143)
!143 = !DISubprogram(name: "free", scope: !77, file: !77, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !122}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !147)
!147 = !DISubprogram(name: "getenv", scope: !77, file: !77, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!150, !107}
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !152)
!152 = !DISubprogram(name: "labs", scope: !77, file: !77, line: 838, type: !153, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!153 = !DISubroutineType(types: !154)
!154 = !{!89, !89}
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !156)
!156 = !DISubprogram(name: "ldiv", scope: !77, file: !77, line: 851, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!85, !89, !89}
!159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !160)
!160 = !DISubprogram(name: "malloc", scope: !77, file: !77, line: 539, type: !161, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!161 = !DISubroutineType(types: !162)
!162 = !{!122, !123}
!163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !164)
!164 = !DISubprogram(name: "mblen", scope: !77, file: !77, line: 919, type: !165, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!165 = !DISubroutineType(types: !166)
!166 = !{!80, !107, !123}
!167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !168)
!168 = !DISubprogram(name: "mbstowcs", scope: !77, file: !77, line: 930, type: !169, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!169 = !DISubroutineType(types: !170)
!170 = !{!123, !171, !174, !123}
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !172)
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!173 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!174 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !107)
!175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !176)
!176 = !DISubprogram(name: "mbtowc", scope: !77, file: !77, line: 922, type: !177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!177 = !DISubroutineType(types: !178)
!178 = !{!80, !171, !174, !123}
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !180)
!180 = !DISubprogram(name: "qsort", scope: !77, file: !77, line: 827, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !122, !123, !123, !126}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !184)
!184 = !DISubprogram(name: "quick_exit", scope: !77, file: !77, line: 620, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !186)
!186 = !DISubprogram(name: "rand", scope: !77, file: !77, line: 453, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!187 = !DISubroutineType(types: !188)
!188 = !{!80}
!189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !190)
!190 = !DISubprogram(name: "realloc", scope: !77, file: !77, line: 549, type: !191, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!191 = !DISubroutineType(types: !192)
!192 = !{!122, !122, !123}
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !194)
!194 = !DISubprogram(name: "srand", scope: !77, file: !77, line: 455, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !10}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !198)
!198 = !DISubprogram(name: "strtod", scope: !77, file: !77, line: 117, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!106, !174, !201}
!201 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !202)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !204)
!204 = !DISubprogram(name: "strtol", scope: !77, file: !77, line: 176, type: !205, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!205 = !DISubroutineType(types: !206)
!206 = !{!89, !174, !201, !80}
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !208)
!208 = !DISubprogram(name: "strtoul", scope: !77, file: !77, line: 180, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!125, !174, !201, !80}
!211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !212)
!212 = !DISubprogram(name: "system", scope: !77, file: !77, line: 781, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !214)
!214 = !DISubprogram(name: "wcstombs", scope: !77, file: !77, line: 933, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!123, !217, !218, !123}
!217 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !150)
!218 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !219)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64)
!220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !173)
!221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !222)
!222 = !DISubprogram(name: "wctomb", scope: !77, file: !77, line: 926, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!223 = !DISubroutineType(types: !224)
!224 = !{!80, !150, !173}
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !227)
!226 = !DINamespace(name: "__gnu_cxx", scope: null)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !77, line: 80, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 76, size: 128, elements: !229, identifier: "_ZTS7lldiv_t")
!229 = !{!230, !232}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !228, file: !77, line: 78, baseType: !231, size: 64)
!231 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !228, file: !77, line: 79, baseType: !231, size: 64, offset: 64)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !234)
!234 = !DISubprogram(name: "_Exit", scope: !77, file: !77, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !236)
!236 = !DISubprogram(name: "llabs", scope: !77, file: !77, line: 841, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!231, !231}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !240)
!240 = !DISubprogram(name: "lldiv", scope: !77, file: !77, line: 855, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!227, !231, !231}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !244)
!244 = !DISubprogram(name: "atoll", scope: !77, file: !77, line: 112, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!231, !107}
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !248)
!248 = !DISubprogram(name: "strtoll", scope: !77, file: !77, line: 200, type: !249, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!249 = !DISubroutineType(types: !250)
!250 = !{!231, !174, !201, !80}
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !252)
!252 = !DISubprogram(name: "strtoull", scope: !77, file: !77, line: 205, type: !253, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!253 = !DISubroutineType(types: !254)
!254 = !{!255, !174, !201, !80}
!255 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !257)
!257 = !DISubprogram(name: "strtof", scope: !77, file: !77, line: 123, type: !258, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!258 = !DISubroutineType(types: !259)
!259 = !{!260, !174, !201}
!260 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !262)
!262 = !DISubprogram(name: "strtold", scope: !77, file: !77, line: 126, type: !263, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!263 = !DISubroutineType(types: !264)
!264 = !{!265, !174, !201}
!265 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !227)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !234)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !236)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !270)
!270 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !226, file: !271, line: 213, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!271 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/cstdlib", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !240)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !244)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !257)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !252)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !262)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !279)
!279 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !281, file: !280, line: 79, size: 64, elements: !282, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!280 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/bits/exception_ptr.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!281 = !DINamespace(name: "__exception_ptr", scope: !74)
!282 = !{!283, !284, !288, !291, !292, !297, !298, !302, !308, !312, !316, !319, !320, !323, !327}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !279, file: !280, line: 81, baseType: !122, size: 64)
!284 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 83, type: !285, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!285 = !DISubroutineType(types: !286)
!286 = !{null, !287, !122}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!288 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !279, file: !280, line: 85, type: !289, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!289 = !DISubroutineType(types: !290)
!290 = !{null, !287}
!291 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !279, file: !280, line: 86, type: !289, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!292 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !279, file: !280, line: 88, type: !293, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!293 = !DISubroutineType(types: !294)
!294 = !{!122, !295}
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!296 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !279)
!297 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 96, type: !289, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!298 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 98, type: !299, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!299 = !DISubroutineType(types: !300)
!300 = !{null, !287, !301}
!301 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !296, size: 64)
!302 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 101, type: !303, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!303 = !DISubroutineType(types: !304)
!304 = !{null, !287, !305}
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !74, file: !306, line: 235, baseType: !307)
!306 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/x86_64-linux-gnu/c++/7.3.0/bits/c++config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!307 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!308 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 105, type: !309, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!309 = !DISubroutineType(types: !310)
!310 = !{null, !287, !311}
!311 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !279, size: 64)
!312 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !279, file: !280, line: 118, type: !313, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!313 = !DISubroutineType(types: !314)
!314 = !{!315, !287, !301}
!315 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !279, size: 64)
!316 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !279, file: !280, line: 122, type: !317, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!317 = !DISubroutineType(types: !318)
!318 = !{!315, !287, !311}
!319 = !DISubprogram(name: "~exception_ptr", scope: !279, file: !280, line: 129, type: !289, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!320 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !279, file: !280, line: 132, type: !321, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !287, !315}
!323 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !279, file: !280, line: 144, type: !324, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!324 = !DISubroutineType(types: !325)
!325 = !{!326, !295}
!326 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!327 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !279, file: !280, line: 153, type: !328, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!328 = !DISubroutineType(types: !329)
!329 = !{!330, !295}
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !74, file: !333, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!333 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/typeinfo", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !281, entity: !335)
!335 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !74, file: !280, line: 69, type: !336, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!336 = !DISubroutineType(types: !337)
!337 = !{null, !279}
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !339)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !340, line: 6, baseType: !341)
!340 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !342, line: 21, baseType: !343)
!342 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!343 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !342, line: 13, size: 64, elements: !344, identifier: "_ZTS11__mbstate_t")
!344 = !{!345, !346}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !343, file: !342, line: 15, baseType: !80, size: 32)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !343, file: !342, line: 20, baseType: !347, size: 32, offset: 32)
!347 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !343, file: !342, line: 16, size: 32, elements: !348, identifier: "_ZTSN11__mbstate_tUt_E")
!348 = !{!349, !350}
!349 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !347, file: !342, line: 18, baseType: !10, size: 32)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !347, file: !342, line: 19, baseType: !351, size: 32)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !109, size: 32, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 4)
!354 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !355)
!355 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !356, line: 20, baseType: !10)
!356 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!357 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !358)
!358 = !DISubprogram(name: "btowc", scope: !359, file: !359, line: 284, type: !360, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!359 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!360 = !DISubroutineType(types: !361)
!361 = !{!355, !80}
!362 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !363)
!363 = !DISubprogram(name: "fgetwc", scope: !359, file: !359, line: 727, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!364 = !DISubroutineType(types: !365)
!365 = !{!355, !366}
!366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !367, size: 64)
!367 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !368, line: 5, baseType: !369)
!368 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !368, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!370 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !371)
!371 = !DISubprogram(name: "fgetws", scope: !359, file: !359, line: 756, type: !372, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!372 = !DISubroutineType(types: !373)
!373 = !{!172, !171, !80, !374}
!374 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !366)
!375 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !376)
!376 = !DISubprogram(name: "fputwc", scope: !359, file: !359, line: 741, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!377 = !DISubroutineType(types: !378)
!378 = !{!355, !173, !366}
!379 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !380)
!380 = !DISubprogram(name: "fputws", scope: !359, file: !359, line: 763, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!381 = !DISubroutineType(types: !382)
!382 = !{!80, !218, !374}
!383 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !384)
!384 = !DISubprogram(name: "fwide", scope: !359, file: !359, line: 573, type: !385, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!385 = !DISubroutineType(types: !386)
!386 = !{!80, !366, !80}
!387 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !388)
!388 = !DISubprogram(name: "fwprintf", scope: !359, file: !359, line: 580, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!389 = !DISubroutineType(types: !390)
!390 = !{!80, !374, !218, null}
!391 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !392)
!392 = !DISubprogram(name: "fwscanf", scope: !359, file: !359, line: 621, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!393 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !394)
!394 = !DISubprogram(name: "getwc", scope: !359, file: !359, line: 728, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!395 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !396)
!396 = !DISubprogram(name: "getwchar", scope: !359, file: !359, line: 734, type: !397, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!397 = !DISubroutineType(types: !398)
!398 = !{!355}
!399 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !400)
!400 = !DISubprogram(name: "mbrlen", scope: !359, file: !359, line: 307, type: !401, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!401 = !DISubroutineType(types: !402)
!402 = !{!123, !174, !123, !403}
!403 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !404)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!405 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !406)
!406 = !DISubprogram(name: "mbrtowc", scope: !359, file: !359, line: 296, type: !407, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!407 = !DISubroutineType(types: !408)
!408 = !{!123, !171, !174, !123, !403}
!409 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !410)
!410 = !DISubprogram(name: "mbsinit", scope: !359, file: !359, line: 292, type: !411, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!411 = !DISubroutineType(types: !412)
!412 = !{!80, !413}
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !339)
!415 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !416)
!416 = !DISubprogram(name: "mbsrtowcs", scope: !359, file: !359, line: 337, type: !417, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!417 = !DISubroutineType(types: !418)
!418 = !{!123, !171, !419, !123, !403}
!419 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !420)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!421 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !422)
!422 = !DISubprogram(name: "putwc", scope: !359, file: !359, line: 742, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!423 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !424)
!424 = !DISubprogram(name: "putwchar", scope: !359, file: !359, line: 748, type: !425, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!425 = !DISubroutineType(types: !426)
!426 = !{!355, !173}
!427 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !428)
!428 = !DISubprogram(name: "swprintf", scope: !359, file: !359, line: 590, type: !429, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!429 = !DISubroutineType(types: !430)
!430 = !{!80, !171, !123, !218, null}
!431 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !432)
!432 = !DISubprogram(name: "swscanf", scope: !359, file: !359, line: 631, type: !433, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!433 = !DISubroutineType(types: !434)
!434 = !{!80, !218, !218, null}
!435 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !436)
!436 = !DISubprogram(name: "ungetwc", scope: !359, file: !359, line: 771, type: !437, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!437 = !DISubroutineType(types: !438)
!438 = !{!355, !355, !366}
!439 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !440)
!440 = !DISubprogram(name: "vfwprintf", scope: !359, file: !359, line: 598, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!441 = !DISubroutineType(types: !442)
!442 = !{!80, !374, !218, !443}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !445, identifier: "_ZTS13__va_list_tag")
!445 = !{!446, !447, !448, !449}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !444, file: !2, baseType: !10, size: 32)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !444, file: !2, baseType: !10, size: 32, offset: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 64)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 128)
!450 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !451)
!451 = !DISubprogram(name: "vfwscanf", scope: !359, file: !359, line: 673, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!452 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !453)
!453 = !DISubprogram(name: "vswprintf", scope: !359, file: !359, line: 611, type: !454, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!454 = !DISubroutineType(types: !455)
!455 = !{!80, !171, !123, !218, !443}
!456 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !457)
!457 = !DISubprogram(name: "vswscanf", scope: !359, file: !359, line: 685, type: !458, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!458 = !DISubroutineType(types: !459)
!459 = !{!80, !218, !218, !443}
!460 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !461)
!461 = !DISubprogram(name: "vwprintf", scope: !359, file: !359, line: 606, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!462 = !DISubroutineType(types: !463)
!463 = !{!80, !218, !443}
!464 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !465)
!465 = !DISubprogram(name: "vwscanf", scope: !359, file: !359, line: 681, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!466 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !467)
!467 = !DISubprogram(name: "wcrtomb", scope: !359, file: !359, line: 301, type: !468, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!468 = !DISubroutineType(types: !469)
!469 = !{!123, !217, !173, !403}
!470 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !471)
!471 = !DISubprogram(name: "wcscat", scope: !359, file: !359, line: 97, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!472 = !DISubroutineType(types: !473)
!473 = !{!172, !171, !218}
!474 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !475)
!475 = !DISubprogram(name: "wcscmp", scope: !359, file: !359, line: 106, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!476 = !DISubroutineType(types: !477)
!477 = !{!80, !219, !219}
!478 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !479)
!479 = !DISubprogram(name: "wcscoll", scope: !359, file: !359, line: 131, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!480 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !481)
!481 = !DISubprogram(name: "wcscpy", scope: !359, file: !359, line: 87, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!482 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !483)
!483 = !DISubprogram(name: "wcscspn", scope: !359, file: !359, line: 187, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!484 = !DISubroutineType(types: !485)
!485 = !{!123, !219, !219}
!486 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !487)
!487 = !DISubprogram(name: "wcsftime", scope: !359, file: !359, line: 835, type: !488, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!488 = !DISubroutineType(types: !489)
!489 = !{!123, !171, !123, !218, !490}
!490 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !491)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !493)
!493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !359, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!494 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !495)
!495 = !DISubprogram(name: "wcslen", scope: !359, file: !359, line: 222, type: !496, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!496 = !DISubroutineType(types: !497)
!497 = !{!123, !219}
!498 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !499)
!499 = !DISubprogram(name: "wcsncat", scope: !359, file: !359, line: 101, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!500 = !DISubroutineType(types: !501)
!501 = !{!172, !171, !218, !123}
!502 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !503)
!503 = !DISubprogram(name: "wcsncmp", scope: !359, file: !359, line: 109, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!504 = !DISubroutineType(types: !505)
!505 = !{!80, !219, !219, !123}
!506 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !507)
!507 = !DISubprogram(name: "wcsncpy", scope: !359, file: !359, line: 92, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!508 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !509)
!509 = !DISubprogram(name: "wcsrtombs", scope: !359, file: !359, line: 343, type: !510, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!510 = !DISubroutineType(types: !511)
!511 = !{!123, !217, !512, !123, !403}
!512 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !513)
!513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!514 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !515)
!515 = !DISubprogram(name: "wcsspn", scope: !359, file: !359, line: 191, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!516 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !517)
!517 = !DISubprogram(name: "wcstod", scope: !359, file: !359, line: 377, type: !518, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!518 = !DISubroutineType(types: !519)
!519 = !{!106, !218, !520}
!520 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !521)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!522 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !523)
!523 = !DISubprogram(name: "wcstof", scope: !359, file: !359, line: 382, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!524 = !DISubroutineType(types: !525)
!525 = !{!260, !218, !520}
!526 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !527)
!527 = !DISubprogram(name: "wcstok", scope: !359, file: !359, line: 217, type: !528, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!528 = !DISubroutineType(types: !529)
!529 = !{!172, !171, !218, !520}
!530 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !531)
!531 = !DISubprogram(name: "wcstol", scope: !359, file: !359, line: 428, type: !532, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!532 = !DISubroutineType(types: !533)
!533 = !{!89, !218, !520, !80}
!534 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !535)
!535 = !DISubprogram(name: "wcstoul", scope: !359, file: !359, line: 433, type: !536, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!536 = !DISubroutineType(types: !537)
!537 = !{!125, !218, !520, !80}
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !539)
!539 = !DISubprogram(name: "wcsxfrm", scope: !359, file: !359, line: 135, type: !540, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!540 = !DISubroutineType(types: !541)
!541 = !{!123, !171, !218, !123}
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !543)
!543 = !DISubprogram(name: "wctob", scope: !359, file: !359, line: 288, type: !544, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!544 = !DISubroutineType(types: !545)
!545 = !{!80, !355}
!546 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !547)
!547 = !DISubprogram(name: "wmemcmp", scope: !359, file: !359, line: 258, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!548 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !549)
!549 = !DISubprogram(name: "wmemcpy", scope: !359, file: !359, line: 262, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !551)
!551 = !DISubprogram(name: "wmemmove", scope: !359, file: !359, line: 267, type: !552, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!552 = !DISubroutineType(types: !553)
!553 = !{!172, !172, !219, !123}
!554 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !555)
!555 = !DISubprogram(name: "wmemset", scope: !359, file: !359, line: 271, type: !556, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!556 = !DISubroutineType(types: !557)
!557 = !{!172, !172, !173, !123}
!558 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !559)
!559 = !DISubprogram(name: "wprintf", scope: !359, file: !359, line: 587, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!560 = !DISubroutineType(types: !561)
!561 = !{!80, !218, null}
!562 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !563)
!563 = !DISubprogram(name: "wscanf", scope: !359, file: !359, line: 628, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!564 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !565)
!565 = !DISubprogram(name: "wcschr", scope: !359, file: !359, line: 164, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!566 = !DISubroutineType(types: !567)
!567 = !{!172, !219, !173}
!568 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !569)
!569 = !DISubprogram(name: "wcspbrk", scope: !359, file: !359, line: 201, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!570 = !DISubroutineType(types: !571)
!571 = !{!172, !219, !219}
!572 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !573)
!573 = !DISubprogram(name: "wcsrchr", scope: !359, file: !359, line: 174, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!574 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !575)
!575 = !DISubprogram(name: "wcsstr", scope: !359, file: !359, line: 212, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!576 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !577)
!577 = !DISubprogram(name: "wmemchr", scope: !359, file: !359, line: 253, type: !578, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!578 = !DISubroutineType(types: !579)
!579 = !{!172, !219, !173, !123}
!580 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !581)
!581 = !DISubprogram(name: "wcstold", scope: !359, file: !359, line: 384, type: !582, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!582 = !DISubroutineType(types: !583)
!583 = !{!265, !218, !520}
!584 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !585)
!585 = !DISubprogram(name: "wcstoll", scope: !359, file: !359, line: 441, type: !586, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!586 = !DISubroutineType(types: !587)
!587 = !{!231, !218, !520, !80}
!588 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !589)
!589 = !DISubprogram(name: "wcstoull", scope: !359, file: !359, line: 448, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!590 = !DISubroutineType(types: !591)
!591 = !{!255, !218, !520, !80}
!592 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !581)
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !585)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !589)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !596)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !597)
!597 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !599)
!599 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !600)
!600 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !602)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !80)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !604)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !89)
!605 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !606)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !596)
!607 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !608)
!608 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !599)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !610)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !602)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !612)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !604)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !614)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !596)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !616)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !599)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !618)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !602)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !620)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !604)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !622)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !89)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !624)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !604)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !62)
!626 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !28)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !8)
!628 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !629)
!629 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !125)
!630 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !631)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!632 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !633)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !635)
!635 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !637)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !629)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !639)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !641)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !643)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !645)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !629)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !647)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !125)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !649)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !629)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !651)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !74, file: !306, line: 231, baseType: !125)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !653)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !74, file: !306, line: 232, baseType: !89)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !656, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!656 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!657 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !658)
!658 = !DISubprogram(name: "setlocale", scope: !656, file: !656, line: 122, type: !659, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!659 = !DISubroutineType(types: !660)
!660 = !{!150, !80, !107}
!661 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !662)
!662 = !DISubprogram(name: "localeconv", scope: !656, file: !656, line: 125, type: !663, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!663 = !DISubroutineType(types: !664)
!664 = !{!665}
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!666 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !667)
!667 = !DISubprogram(name: "isalnum", scope: !668, file: !668, line: 108, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!668 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !670)
!670 = !DISubprogram(name: "isalpha", scope: !668, file: !668, line: 109, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !672)
!672 = !DISubprogram(name: "iscntrl", scope: !668, file: !668, line: 110, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!673 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !674)
!674 = !DISubprogram(name: "isdigit", scope: !668, file: !668, line: 111, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!675 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !676)
!676 = !DISubprogram(name: "isgraph", scope: !668, file: !668, line: 113, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !678)
!678 = !DISubprogram(name: "islower", scope: !668, file: !668, line: 112, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !680)
!680 = !DISubprogram(name: "isprint", scope: !668, file: !668, line: 114, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !682)
!682 = !DISubprogram(name: "ispunct", scope: !668, file: !668, line: 115, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !684)
!684 = !DISubprogram(name: "isspace", scope: !668, file: !668, line: 116, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !686)
!686 = !DISubprogram(name: "isupper", scope: !668, file: !668, line: 117, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !688)
!688 = !DISubprogram(name: "isxdigit", scope: !668, file: !668, line: 118, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !690)
!690 = !DISubprogram(name: "tolower", scope: !668, file: !668, line: 122, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !692)
!692 = !DISubprogram(name: "toupper", scope: !668, file: !668, line: 125, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !694)
!694 = !DISubprogram(name: "isblank", scope: !668, file: !668, line: 130, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !696)
!696 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !697, line: 7, baseType: !369)
!697 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!698 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !699)
!699 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !700, line: 78, baseType: !701)
!700 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !702, line: 30, baseType: !703)
!702 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !702, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!704 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !705)
!705 = !DISubprogram(name: "clearerr", scope: !700, file: !700, line: 757, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!706 = !DISubroutineType(types: !707)
!707 = !{null, !708}
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!709 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !710)
!710 = !DISubprogram(name: "fclose", scope: !700, file: !700, line: 199, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!711 = !DISubroutineType(types: !712)
!712 = !{!80, !708}
!713 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !714)
!714 = !DISubprogram(name: "feof", scope: !700, file: !700, line: 759, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!715 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !716)
!716 = !DISubprogram(name: "ferror", scope: !700, file: !700, line: 761, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !718)
!718 = !DISubprogram(name: "fflush", scope: !700, file: !700, line: 204, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !720)
!720 = !DISubprogram(name: "fgetc", scope: !700, file: !700, line: 477, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !722)
!722 = !DISubprogram(name: "fgetpos", scope: !700, file: !700, line: 731, type: !723, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DISubroutineType(types: !724)
!724 = !{!80, !725, !726}
!725 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !708)
!726 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !727)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!728 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !729)
!729 = !DISubprogram(name: "fgets", scope: !700, file: !700, line: 564, type: !730, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!730 = !DISubroutineType(types: !731)
!731 = !{!150, !217, !80, !725}
!732 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !733)
!733 = !DISubprogram(name: "fopen", scope: !700, file: !700, line: 232, type: !734, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!734 = !DISubroutineType(types: !735)
!735 = !{!708, !174, !174}
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !737)
!737 = !DISubprogram(name: "fprintf", scope: !700, file: !700, line: 312, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!80, !725, !174, null}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !741)
!741 = !DISubprogram(name: "fputc", scope: !700, file: !700, line: 517, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!80, !80, !708}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !745)
!745 = !DISubprogram(name: "fputs", scope: !700, file: !700, line: 626, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!80, !174, !725}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !749)
!749 = !DISubprogram(name: "fread", scope: !700, file: !700, line: 646, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!123, !752, !123, !123, !725}
!752 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !122)
!753 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !754)
!754 = !DISubprogram(name: "freopen", scope: !700, file: !700, line: 238, type: !755, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!755 = !DISubroutineType(types: !756)
!756 = !{!708, !174, !174, !725}
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !758)
!758 = !DISubprogram(name: "fscanf", scope: !700, file: !700, line: 377, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!759 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !760)
!760 = !DISubprogram(name: "fseek", scope: !700, file: !700, line: 684, type: !761, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!761 = !DISubroutineType(types: !762)
!762 = !{!80, !708, !89, !80}
!763 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !764)
!764 = !DISubprogram(name: "fsetpos", scope: !700, file: !700, line: 736, type: !765, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!765 = !DISubroutineType(types: !766)
!766 = !{!80, !708, !767}
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !699)
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !770)
!770 = !DISubprogram(name: "ftell", scope: !700, file: !700, line: 689, type: !771, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!771 = !DISubroutineType(types: !772)
!772 = !{!89, !708}
!773 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !774)
!774 = !DISubprogram(name: "fwrite", scope: !700, file: !700, line: 652, type: !775, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!775 = !DISubroutineType(types: !776)
!776 = !{!123, !777, !123, !123, !725}
!777 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!778 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !779)
!779 = !DISubprogram(name: "getc", scope: !700, file: !700, line: 478, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!780 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !781)
!781 = !DISubprogram(name: "getchar", scope: !700, file: !700, line: 484, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!782 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !783)
!783 = !DISubprogram(name: "gets", scope: !700, file: !700, line: 577, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!784 = !DISubroutineType(types: !785)
!785 = !{!150, !150}
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !787)
!787 = !DISubprogram(name: "perror", scope: !700, file: !700, line: 775, type: !788, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DISubroutineType(types: !789)
!789 = !{null, !107}
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !791)
!791 = !DISubprogram(name: "printf", scope: !700, file: !700, line: 318, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!80, !174, null}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !795)
!795 = !DISubprogram(name: "putc", scope: !700, file: !700, line: 518, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !797)
!797 = !DISubprogram(name: "putchar", scope: !700, file: !700, line: 524, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !799)
!799 = !DISubprogram(name: "puts", scope: !700, file: !700, line: 632, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !801)
!801 = !DISubprogram(name: "remove", scope: !700, file: !700, line: 144, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !803)
!803 = !DISubprogram(name: "rename", scope: !700, file: !700, line: 146, type: !804, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DISubroutineType(types: !805)
!805 = !{!80, !107, !107}
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !807)
!807 = !DISubprogram(name: "rewind", scope: !700, file: !700, line: 694, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !809)
!809 = !DISubprogram(name: "scanf", scope: !700, file: !700, line: 383, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !811)
!811 = !DISubprogram(name: "setbuf", scope: !700, file: !700, line: 290, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{null, !725, !217}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !815)
!815 = !DISubprogram(name: "setvbuf", scope: !700, file: !700, line: 294, type: !816, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DISubroutineType(types: !817)
!817 = !{!80, !725, !217, !80, !123}
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !819)
!819 = !DISubprogram(name: "sprintf", scope: !700, file: !700, line: 320, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{!80, !217, !174, null}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !823)
!823 = !DISubprogram(name: "sscanf", scope: !700, file: !700, line: 385, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!80, !174, !174, null}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !827)
!827 = !DISubprogram(name: "tmpfile", scope: !700, file: !700, line: 159, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!708}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !831)
!831 = !DISubprogram(name: "tmpnam", scope: !700, file: !700, line: 173, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !833)
!833 = !DISubprogram(name: "ungetc", scope: !700, file: !700, line: 639, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !835)
!835 = !DISubprogram(name: "vfprintf", scope: !700, file: !700, line: 327, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!80, !725, !174, !443}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !839)
!839 = !DISubprogram(name: "vprintf", scope: !700, file: !700, line: 333, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DISubroutineType(types: !841)
!841 = !{!80, !174, !443}
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !843)
!843 = !DISubprogram(name: "vsprintf", scope: !700, file: !700, line: 335, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!80, !217, !174, !443}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !847)
!847 = !DISubprogram(name: "snprintf", scope: !700, file: !700, line: 340, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!80, !217, !123, !174, null}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !851)
!851 = !DISubprogram(name: "vfscanf", scope: !700, file: !700, line: 420, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !853)
!853 = !DISubprogram(name: "vscanf", scope: !700, file: !700, line: 428, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !855)
!855 = !DISubprogram(name: "vsnprintf", scope: !700, file: !700, line: 344, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!80, !217, !123, !174, !443}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !859)
!859 = !DISubprogram(name: "vsscanf", scope: !700, file: !700, line: 432, type: !860, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DISubroutineType(types: !861)
!861 = !{!80, !174, !174, !443}
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !847)
!863 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !851)
!864 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !853)
!865 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !855)
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !859)
!867 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !868)
!868 = !DISubprogram(name: "acos", scope: !869, file: !869, line: 53, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!869 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!870 = !DISubroutineType(types: !871)
!871 = !{!106, !106}
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !873)
!873 = !DISubprogram(name: "asin", scope: !869, file: !869, line: 55, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !875)
!875 = !DISubprogram(name: "atan", scope: !869, file: !869, line: 57, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!876 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !877)
!877 = !DISubprogram(name: "atan2", scope: !869, file: !869, line: 59, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!878 = !DISubroutineType(types: !879)
!879 = !{!106, !106, !106}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !881)
!881 = !DISubprogram(name: "ceil", scope: !869, file: !869, line: 159, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !883)
!883 = !DISubprogram(name: "cos", scope: !869, file: !869, line: 62, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !885)
!885 = !DISubprogram(name: "cosh", scope: !869, file: !869, line: 71, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !887)
!887 = !DISubprogram(name: "exp", scope: !869, file: !869, line: 95, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !889)
!889 = !DISubprogram(name: "fabs", scope: !869, file: !869, line: 162, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !891)
!891 = !DISubprogram(name: "floor", scope: !869, file: !869, line: 165, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !893)
!893 = !DISubprogram(name: "fmod", scope: !869, file: !869, line: 168, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !895)
!895 = !DISubprogram(name: "frexp", scope: !869, file: !869, line: 98, type: !896, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DISubroutineType(types: !897)
!897 = !{!106, !106, !898}
!898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!899 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !900)
!900 = !DISubprogram(name: "ldexp", scope: !869, file: !869, line: 101, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!901 = !DISubroutineType(types: !902)
!902 = !{!106, !106, !80}
!903 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !904)
!904 = !DISubprogram(name: "log", scope: !869, file: !869, line: 104, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!905 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !906)
!906 = !DISubprogram(name: "log10", scope: !869, file: !869, line: 107, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !908)
!908 = !DISubprogram(name: "modf", scope: !869, file: !869, line: 110, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!106, !106, !911}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!912 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !913)
!913 = !DISubprogram(name: "pow", scope: !869, file: !869, line: 140, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!914 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !915)
!915 = !DISubprogram(name: "sin", scope: !869, file: !869, line: 64, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!916 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !917)
!917 = !DISubprogram(name: "sinh", scope: !869, file: !869, line: 73, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!918 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !919)
!919 = !DISubprogram(name: "sqrt", scope: !869, file: !869, line: 143, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !921)
!921 = !DISubprogram(name: "tan", scope: !869, file: !869, line: 66, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !923)
!923 = !DISubprogram(name: "tanh", scope: !869, file: !869, line: 75, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !925)
!925 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !926, line: 150, baseType: !106)
!926 = !DIFile(filename: "/usr/include/math.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!927 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !928)
!928 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !926, line: 149, baseType: !260)
!929 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !930)
!930 = !DISubprogram(name: "acosh", scope: !869, file: !869, line: 85, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!931 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !932)
!932 = !DISubprogram(name: "acoshf", scope: !869, file: !869, line: 85, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!933 = !DISubroutineType(types: !934)
!934 = !{!260, !260}
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !936)
!936 = !DISubprogram(name: "acoshl", scope: !869, file: !869, line: 85, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!937 = !DISubroutineType(types: !938)
!938 = !{!265, !265}
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !940)
!940 = !DISubprogram(name: "asinh", scope: !869, file: !869, line: 87, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !942)
!942 = !DISubprogram(name: "asinhf", scope: !869, file: !869, line: 87, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !944)
!944 = !DISubprogram(name: "asinhl", scope: !869, file: !869, line: 87, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !946)
!946 = !DISubprogram(name: "atanh", scope: !869, file: !869, line: 89, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !948)
!948 = !DISubprogram(name: "atanhf", scope: !869, file: !869, line: 89, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !950)
!950 = !DISubprogram(name: "atanhl", scope: !869, file: !869, line: 89, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !952)
!952 = !DISubprogram(name: "cbrt", scope: !869, file: !869, line: 152, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !954)
!954 = !DISubprogram(name: "cbrtf", scope: !869, file: !869, line: 152, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !956)
!956 = !DISubprogram(name: "cbrtl", scope: !869, file: !869, line: 152, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !958)
!958 = !DISubprogram(name: "copysign", scope: !869, file: !869, line: 196, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !960)
!960 = !DISubprogram(name: "copysignf", scope: !869, file: !869, line: 196, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DISubroutineType(types: !962)
!962 = !{!260, !260, !260}
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !964)
!964 = !DISubprogram(name: "copysignl", scope: !869, file: !869, line: 196, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DISubroutineType(types: !966)
!966 = !{!265, !265, !265}
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !968)
!968 = !DISubprogram(name: "erf", scope: !869, file: !869, line: 228, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !970)
!970 = !DISubprogram(name: "erff", scope: !869, file: !869, line: 228, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !972)
!972 = !DISubprogram(name: "erfl", scope: !869, file: !869, line: 228, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !974)
!974 = !DISubprogram(name: "erfc", scope: !869, file: !869, line: 229, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !976)
!976 = !DISubprogram(name: "erfcf", scope: !869, file: !869, line: 229, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !978)
!978 = !DISubprogram(name: "erfcl", scope: !869, file: !869, line: 229, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !980)
!980 = !DISubprogram(name: "exp2", scope: !869, file: !869, line: 130, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !982)
!982 = !DISubprogram(name: "exp2f", scope: !869, file: !869, line: 130, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !984)
!984 = !DISubprogram(name: "exp2l", scope: !869, file: !869, line: 130, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !986)
!986 = !DISubprogram(name: "expm1", scope: !869, file: !869, line: 119, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !988)
!988 = !DISubprogram(name: "expm1f", scope: !869, file: !869, line: 119, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !990)
!990 = !DISubprogram(name: "expm1l", scope: !869, file: !869, line: 119, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !992)
!992 = !DISubprogram(name: "fdim", scope: !869, file: !869, line: 326, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !994)
!994 = !DISubprogram(name: "fdimf", scope: !869, file: !869, line: 326, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !996)
!996 = !DISubprogram(name: "fdiml", scope: !869, file: !869, line: 326, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !998)
!998 = !DISubprogram(name: "fma", scope: !869, file: !869, line: 335, type: !999, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!106, !106, !106, !106}
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1002)
!1002 = !DISubprogram(name: "fmaf", scope: !869, file: !869, line: 335, type: !1003, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!260, !260, !260, !260}
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1006)
!1006 = !DISubprogram(name: "fmal", scope: !869, file: !869, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!265, !265, !265, !265}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1010)
!1010 = !DISubprogram(name: "fmax", scope: !869, file: !869, line: 329, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1012)
!1012 = !DISubprogram(name: "fmaxf", scope: !869, file: !869, line: 329, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1014)
!1014 = !DISubprogram(name: "fmaxl", scope: !869, file: !869, line: 329, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1016)
!1016 = !DISubprogram(name: "fmin", scope: !869, file: !869, line: 332, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1018)
!1018 = !DISubprogram(name: "fminf", scope: !869, file: !869, line: 332, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1020)
!1020 = !DISubprogram(name: "fminl", scope: !869, file: !869, line: 332, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1022)
!1022 = !DISubprogram(name: "hypot", scope: !869, file: !869, line: 147, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1024)
!1024 = !DISubprogram(name: "hypotf", scope: !869, file: !869, line: 147, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1026)
!1026 = !DISubprogram(name: "hypotl", scope: !869, file: !869, line: 147, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1028)
!1028 = !DISubprogram(name: "ilogb", scope: !869, file: !869, line: 280, type: !1029, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DISubroutineType(types: !1030)
!1030 = !{!80, !106}
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1032)
!1032 = !DISubprogram(name: "ilogbf", scope: !869, file: !869, line: 280, type: !1033, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DISubroutineType(types: !1034)
!1034 = !{!80, !260}
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1036)
!1036 = !DISubprogram(name: "ilogbl", scope: !869, file: !869, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!80, !265}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1040)
!1040 = !DISubprogram(name: "lgamma", scope: !869, file: !869, line: 230, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1042)
!1042 = !DISubprogram(name: "lgammaf", scope: !869, file: !869, line: 230, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1044)
!1044 = !DISubprogram(name: "lgammal", scope: !869, file: !869, line: 230, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1046)
!1046 = !DISubprogram(name: "llrint", scope: !869, file: !869, line: 316, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1047 = !DISubroutineType(types: !1048)
!1048 = !{!231, !106}
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1050)
!1050 = !DISubprogram(name: "llrintf", scope: !869, file: !869, line: 316, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!231, !260}
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1054)
!1054 = !DISubprogram(name: "llrintl", scope: !869, file: !869, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!231, !265}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1058)
!1058 = !DISubprogram(name: "llround", scope: !869, file: !869, line: 322, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1060)
!1060 = !DISubprogram(name: "llroundf", scope: !869, file: !869, line: 322, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1062)
!1062 = !DISubprogram(name: "llroundl", scope: !869, file: !869, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1064)
!1064 = !DISubprogram(name: "log1p", scope: !869, file: !869, line: 122, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1066)
!1066 = !DISubprogram(name: "log1pf", scope: !869, file: !869, line: 122, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1068)
!1068 = !DISubprogram(name: "log1pl", scope: !869, file: !869, line: 122, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1070)
!1070 = !DISubprogram(name: "log2", scope: !869, file: !869, line: 133, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1072)
!1072 = !DISubprogram(name: "log2f", scope: !869, file: !869, line: 133, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1074)
!1074 = !DISubprogram(name: "log2l", scope: !869, file: !869, line: 133, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1076)
!1076 = !DISubprogram(name: "logb", scope: !869, file: !869, line: 125, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1078)
!1078 = !DISubprogram(name: "logbf", scope: !869, file: !869, line: 125, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1080)
!1080 = !DISubprogram(name: "logbl", scope: !869, file: !869, line: 125, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1082)
!1082 = !DISubprogram(name: "lrint", scope: !869, file: !869, line: 314, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!89, !106}
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1086)
!1086 = !DISubprogram(name: "lrintf", scope: !869, file: !869, line: 314, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DISubroutineType(types: !1088)
!1088 = !{!89, !260}
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1090)
!1090 = !DISubprogram(name: "lrintl", scope: !869, file: !869, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!89, !265}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1094)
!1094 = !DISubprogram(name: "lround", scope: !869, file: !869, line: 320, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1096)
!1096 = !DISubprogram(name: "lroundf", scope: !869, file: !869, line: 320, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1098)
!1098 = !DISubprogram(name: "lroundl", scope: !869, file: !869, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1100)
!1100 = !DISubprogram(name: "nan", scope: !869, file: !869, line: 201, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1102)
!1102 = !DISubprogram(name: "nanf", scope: !869, file: !869, line: 201, type: !1103, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!260, !107}
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1106)
!1106 = !DISubprogram(name: "nanl", scope: !869, file: !869, line: 201, type: !1107, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!265, !107}
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1110)
!1110 = !DISubprogram(name: "nearbyint", scope: !869, file: !869, line: 294, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1112)
!1112 = !DISubprogram(name: "nearbyintf", scope: !869, file: !869, line: 294, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1114)
!1114 = !DISubprogram(name: "nearbyintl", scope: !869, file: !869, line: 294, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1116)
!1116 = !DISubprogram(name: "nextafter", scope: !869, file: !869, line: 259, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1118)
!1118 = !DISubprogram(name: "nextafterf", scope: !869, file: !869, line: 259, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1120)
!1120 = !DISubprogram(name: "nextafterl", scope: !869, file: !869, line: 259, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1122)
!1122 = !DISubprogram(name: "nexttoward", scope: !869, file: !869, line: 261, type: !1123, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!106, !106, !265}
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1126)
!1126 = !DISubprogram(name: "nexttowardf", scope: !869, file: !869, line: 261, type: !1127, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DISubroutineType(types: !1128)
!1128 = !{!260, !260, !265}
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1130)
!1130 = !DISubprogram(name: "nexttowardl", scope: !869, file: !869, line: 261, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1132)
!1132 = !DISubprogram(name: "remainder", scope: !869, file: !869, line: 272, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1134)
!1134 = !DISubprogram(name: "remainderf", scope: !869, file: !869, line: 272, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1136)
!1136 = !DISubprogram(name: "remainderl", scope: !869, file: !869, line: 272, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1138)
!1138 = !DISubprogram(name: "remquo", scope: !869, file: !869, line: 307, type: !1139, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!106, !106, !106, !898}
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1142)
!1142 = !DISubprogram(name: "remquof", scope: !869, file: !869, line: 307, type: !1143, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!260, !260, !260, !898}
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1146)
!1146 = !DISubprogram(name: "remquol", scope: !869, file: !869, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!265, !265, !265, !898}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1150)
!1150 = !DISubprogram(name: "rint", scope: !869, file: !869, line: 256, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1152)
!1152 = !DISubprogram(name: "rintf", scope: !869, file: !869, line: 256, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1154)
!1154 = !DISubprogram(name: "rintl", scope: !869, file: !869, line: 256, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1156)
!1156 = !DISubprogram(name: "round", scope: !869, file: !869, line: 298, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1158)
!1158 = !DISubprogram(name: "roundf", scope: !869, file: !869, line: 298, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1160)
!1160 = !DISubprogram(name: "roundl", scope: !869, file: !869, line: 298, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1162)
!1162 = !DISubprogram(name: "scalbln", scope: !869, file: !869, line: 290, type: !1163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!106, !106, !89}
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1166)
!1166 = !DISubprogram(name: "scalblnf", scope: !869, file: !869, line: 290, type: !1167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DISubroutineType(types: !1168)
!1168 = !{!260, !260, !89}
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1170)
!1170 = !DISubprogram(name: "scalblnl", scope: !869, file: !869, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!265, !265, !89}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1174)
!1174 = !DISubprogram(name: "scalbn", scope: !869, file: !869, line: 276, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1176)
!1176 = !DISubprogram(name: "scalbnf", scope: !869, file: !869, line: 276, type: !1177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{!260, !260, !80}
!1179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1180)
!1180 = !DISubprogram(name: "scalbnl", scope: !869, file: !869, line: 276, type: !1181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!265, !265, !80}
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1184)
!1184 = !DISubprogram(name: "tgamma", scope: !869, file: !869, line: 235, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1186)
!1186 = !DISubprogram(name: "tgammaf", scope: !869, file: !869, line: 235, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1188)
!1188 = !DISubprogram(name: "tgammal", scope: !869, file: !869, line: 235, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1190)
!1190 = !DISubprogram(name: "trunc", scope: !869, file: !869, line: 302, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1192)
!1192 = !DISubprogram(name: "truncf", scope: !869, file: !869, line: 302, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1194)
!1194 = !DISubprogram(name: "truncl", scope: !869, file: !869, line: 302, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1197, line: 94, baseType: !1198)
!1197 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1197, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1197, line: 68, baseType: !29)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1202)
!1202 = !DISubprogram(name: "feclearexcept", scope: !1203, file: !1203, line: 71, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1205)
!1205 = !DISubprogram(name: "fegetexceptflag", scope: !1203, file: !1203, line: 75, type: !1206, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!80, !1208, !80}
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1200, size: 64)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1210)
!1210 = !DISubprogram(name: "feraiseexcept", scope: !1203, file: !1203, line: 78, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1212)
!1212 = !DISubprogram(name: "fesetexceptflag", scope: !1203, file: !1203, line: 88, type: !1213, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1213 = !DISubroutineType(types: !1214)
!1214 = !{!80, !1215, !80}
!1215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1216, size: 64)
!1216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1200)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1218)
!1218 = !DISubprogram(name: "fetestexcept", scope: !1203, file: !1203, line: 92, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1220)
!1220 = !DISubprogram(name: "fegetround", scope: !1203, file: !1203, line: 104, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1222)
!1222 = !DISubprogram(name: "fesetround", scope: !1203, file: !1203, line: 107, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1224)
!1224 = !DISubprogram(name: "fegetenv", scope: !1203, file: !1203, line: 114, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1225 = !DISubroutineType(types: !1226)
!1226 = !{!80, !1227}
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1228 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1229)
!1229 = !DISubprogram(name: "feholdexcept", scope: !1203, file: !1203, line: 119, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1231)
!1231 = !DISubprogram(name: "fesetenv", scope: !1203, file: !1203, line: 123, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1232 = !DISubroutineType(types: !1233)
!1233 = !{!80, !1234}
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1196)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1237)
!1237 = !DISubprogram(name: "feupdateenv", scope: !1203, file: !1203, line: 128, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !{i32 2, !"Dwarf Version", i32 4}
!1239 = !{i32 2, !"Debug Info Version", i32 3}
!1240 = !{!1241, !1241, i64 0}
!1241 = !{!"long", !1242, i64 0}
!1242 = !{!"omnipotent char", !1243, i64 0}
!1243 = !{!"Simple C++ TBAA"}
!1244 = !{!1245, !1245, i64 0}
!1245 = !{!"double", !1242, i64 0}
!1246 = !{!1247, !1242, i64 2065}
!1247 = !{!"_ZTS5State", !1242, i64 16, !1248, i64 2064, !1242, i64 2080, !1249, i64 2088, !1251, i64 2112, !1253, i64 2208, !1254, i64 2480, !1255, i64 2608, !1256, i64 2736, !1242, i64 2760, !1242, i64 2768, !1257, i64 3280}
!1248 = !{!"_ZTS10ArithFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15}
!1249 = !{!"_ZTS8Segments", !1250, i64 0, !1242, i64 2, !1250, i64 4, !1242, i64 6, !1250, i64 8, !1242, i64 10, !1250, i64 12, !1242, i64 14, !1250, i64 16, !1242, i64 18, !1250, i64 20, !1242, i64 22}
!1250 = !{!"short", !1242, i64 0}
!1251 = !{!"_ZTS12AddressSpace", !1241, i64 0, !1252, i64 8, !1241, i64 16, !1252, i64 24, !1241, i64 32, !1252, i64 40, !1241, i64 48, !1252, i64 56, !1241, i64 64, !1252, i64 72, !1241, i64 80, !1252, i64 88}
!1252 = !{!"_ZTS3Reg", !1242, i64 0}
!1253 = !{!"_ZTS3GPR", !1241, i64 0, !1252, i64 8, !1241, i64 16, !1252, i64 24, !1241, i64 32, !1252, i64 40, !1241, i64 48, !1252, i64 56, !1241, i64 64, !1252, i64 72, !1241, i64 80, !1252, i64 88, !1241, i64 96, !1252, i64 104, !1241, i64 112, !1252, i64 120, !1241, i64 128, !1252, i64 136, !1241, i64 144, !1252, i64 152, !1241, i64 160, !1252, i64 168, !1241, i64 176, !1252, i64 184, !1241, i64 192, !1252, i64 200, !1241, i64 208, !1252, i64 216, !1241, i64 224, !1252, i64 232, !1241, i64 240, !1252, i64 248, !1241, i64 256, !1252, i64 264}
!1254 = !{!"_ZTS8X87Stack", !1242, i64 0}
!1255 = !{!"_ZTS3MMX", !1242, i64 0}
!1256 = !{!"_ZTS14FPUStatusFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15, !1242, i64 16, !1242, i64 17, !1242, i64 18, !1242, i64 19, !1242, i64 20}
!1257 = !{!"_ZTS13SegmentCaches", !1258, i64 0, !1258, i64 16, !1258, i64 32, !1258, i64 48, !1258, i64 64, !1258, i64 80}
!1258 = !{!"_ZTS13SegmentShadow", !1242, i64 0, !1259, i64 8, !1259, i64 12}
!1259 = !{!"int", !1242, i64 0}
!1260 = !{!1247, !1242, i64 2067}
!1261 = !{!1247, !1242, i64 2069}
!1262 = !{!1247, !1242, i64 2071}
!1263 = !{!1247, !1242, i64 2073}
!1264 = !{!1247, !1242, i64 2077}
!1265 = !{!1266}
!1266 = distinct !{!1266, !1267, !"ext_605548___libc_start_main: argument 0"}
!1267 = distinct !{!1267, !"ext_605548___libc_start_main"}
!1268 = !{!1269}
!1269 = distinct !{!1269, !1267, !"ext_605548___libc_start_main: argument 1"}
!1270 = !{!1271}
!1271 = distinct !{!1271, !1272, !"ext_605550_malloc: argument 0"}
!1272 = distinct !{!1272, !"ext_605550_malloc"}
!1273 = !{!1274}
!1274 = distinct !{!1274, !1272, !"ext_605550_malloc: argument 1"}
!1275 = !{!1276}
!1276 = distinct !{!1276, !1277, !"ext_605550_malloc: argument 0"}
!1277 = distinct !{!1277, !"ext_605550_malloc"}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1277, !"ext_605550_malloc: argument 1"}
!1280 = !{!1281}
!1281 = distinct !{!1281, !1282, !"ext_605550_malloc: argument 0"}
!1282 = distinct !{!1282, !"ext_605550_malloc"}
!1283 = !{!1284}
!1284 = distinct !{!1284, !1282, !"ext_605550_malloc: argument 1"}
!1285 = !{!1286}
!1286 = distinct !{!1286, !1287, !"ext_605550_malloc: argument 0"}
!1287 = distinct !{!1287, !"ext_605550_malloc"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1287, !"ext_605550_malloc: argument 1"}
!1290 = !{!1291}
!1291 = distinct !{!1291, !1292, !"ext_605550_malloc: argument 0"}
!1292 = distinct !{!1292, !"ext_605550_malloc"}
!1293 = !{!1294}
!1294 = distinct !{!1294, !1292, !"ext_605550_malloc: argument 1"}
!1295 = !{!1296}
!1296 = distinct !{!1296, !1297, !"ext_605550_malloc: argument 0"}
!1297 = distinct !{!1297, !"ext_605550_malloc"}
!1298 = !{!1299}
!1299 = distinct !{!1299, !1297, !"ext_605550_malloc: argument 1"}
!1300 = !{!1301}
!1301 = distinct !{!1301, !1302, !"ext_605550_malloc: argument 0"}
!1302 = distinct !{!1302, !"ext_605550_malloc"}
!1303 = !{!1304}
!1304 = distinct !{!1304, !1302, !"ext_605550_malloc: argument 1"}
!1305 = !{!1306}
!1306 = distinct !{!1306, !1307, !"ext_605550_malloc: argument 0"}
!1307 = distinct !{!1307, !"ext_605550_malloc"}
!1308 = !{!1309}
!1309 = distinct !{!1309, !1307, !"ext_605550_malloc: argument 1"}
!1310 = !{!1311}
!1311 = distinct !{!1311, !1312, !"ext_605550_malloc: argument 0"}
!1312 = distinct !{!1312, !"ext_605550_malloc"}
!1313 = !{!1314}
!1314 = distinct !{!1314, !1312, !"ext_605550_malloc: argument 1"}
!1315 = !{!1316}
!1316 = distinct !{!1316, !1317, !"ext_605550_malloc: argument 0"}
!1317 = distinct !{!1317, !"ext_605550_malloc"}
!1318 = !{!1319}
!1319 = distinct !{!1319, !1317, !"ext_605550_malloc: argument 1"}
!1320 = !{!1321}
!1321 = distinct !{!1321, !1322, !"ext_605550_malloc: argument 0"}
!1322 = distinct !{!1322, !"ext_605550_malloc"}
!1323 = !{!1324}
!1324 = distinct !{!1324, !1322, !"ext_605550_malloc: argument 1"}
!1325 = !{!1326}
!1326 = distinct !{!1326, !1327, !"ext_605550_malloc: argument 0"}
!1327 = distinct !{!1327, !"ext_605550_malloc"}
!1328 = !{!1329}
!1329 = distinct !{!1329, !1327, !"ext_605550_malloc: argument 1"}
!1330 = !{!1331, !1331, i64 0}
!1331 = !{!"float", !1242, i64 0}
!1332 = !{!1242, !1242, i64 0}
!1333 = !{!1334}
!1334 = distinct !{!1334, !1335, !"ext_4005d0_printf: argument 0"}
!1335 = distinct !{!1335, !"ext_4005d0_printf"}
!1336 = !{!1337}
!1337 = distinct !{!1337, !1335, !"ext_4005d0_printf: argument 1"}
!1338 = !{!1339}
!1339 = distinct !{!1339, !1340, !"ext_605568_exit: argument 0"}
!1340 = distinct !{!1340, !"ext_605568_exit"}
!1341 = !{!1342}
!1342 = distinct !{!1342, !1340, !"ext_605568_exit: argument 1"}
!1343 = !{!1344}
!1344 = distinct !{!1344, !1345, !"ext_4005f0_pow: argument 0"}
!1345 = distinct !{!1345, !"ext_4005f0_pow"}
!1346 = !{!1347}
!1347 = distinct !{!1347, !1345, !"ext_4005f0_pow: argument 1"}
!1348 = !{!1349}
!1349 = distinct !{!1349, !1350, !"ext_4005d0_printf: argument 0"}
!1350 = distinct !{!1350, !"ext_4005d0_printf"}
!1351 = !{!1352}
!1352 = distinct !{!1352, !1350, !"ext_4005d0_printf: argument 1"}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355, !"ext_4005d0_printf: argument 0"}
!1355 = distinct !{!1355, !"ext_4005d0_printf"}
!1356 = !{!1357}
!1357 = distinct !{!1357, !1355, !"ext_4005d0_printf: argument 1"}
!1358 = !{!1359}
!1359 = distinct !{!1359, !1360, !"ext_605568_exit: argument 0"}
!1360 = distinct !{!1360, !"ext_605568_exit"}
!1361 = !{!1362}
!1362 = distinct !{!1362, !1360, !"ext_605568_exit: argument 1"}
!1363 = !{!1259, !1259, i64 0}
!1364 = !{!1365}
!1365 = distinct !{!1365, !1366, !"ext_605538_gettimeofday: argument 0"}
!1366 = distinct !{!1366, !"ext_605538_gettimeofday"}
!1367 = !{!1368}
!1368 = distinct !{!1368, !1366, !"ext_605538_gettimeofday: argument 1"}
!1369 = !{!1370}
!1370 = distinct !{!1370, !1371, !"ext_4005d0_printf: argument 0"}
!1371 = distinct !{!1371, !"ext_4005d0_printf"}
!1372 = !{!1373}
!1373 = distinct !{!1373, !1371, !"ext_4005d0_printf: argument 1"}
!1374 = !{!1375}
!1375 = distinct !{!1375, !1376, !"ext_4005d0_printf: argument 0"}
!1376 = distinct !{!1376, !"ext_4005d0_printf"}
!1377 = !{!1378}
!1378 = distinct !{!1378, !1376, !"ext_4005d0_printf: argument 1"}
!1379 = !{!1380}
!1380 = distinct !{!1380, !1381, !"ext_4005d0_printf: argument 0"}
!1381 = distinct !{!1381, !"ext_4005d0_printf"}
!1382 = !{!1383}
!1383 = distinct !{!1383, !1381, !"ext_4005d0_printf: argument 1"}
!1384 = !{!1385}
!1385 = distinct !{!1385, !1386, !"ext_4005d0_printf: argument 0"}
!1386 = distinct !{!1386, !"ext_4005d0_printf"}
!1387 = !{!1388}
!1388 = distinct !{!1388, !1386, !"ext_4005d0_printf: argument 1"}
!1389 = !{!1390}
!1390 = distinct !{!1390, !1391, !"ext_4005d0_printf: argument 0"}
!1391 = distinct !{!1391, !"ext_4005d0_printf"}
!1392 = !{!1393}
!1393 = distinct !{!1393, !1391, !"ext_4005d0_printf: argument 1"}
!1394 = !{!1395}
!1395 = distinct !{!1395, !1396, !"ext_4005d0_printf: argument 0"}
!1396 = distinct !{!1396, !"ext_4005d0_printf"}
!1397 = !{!1398}
!1398 = distinct !{!1398, !1396, !"ext_4005d0_printf: argument 1"}
!1399 = !{!1400}
!1400 = distinct !{!1400, !1401, !"ext_4005d0_printf: argument 0"}
!1401 = distinct !{!1401, !"ext_4005d0_printf"}
!1402 = !{!1403}
!1403 = distinct !{!1403, !1401, !"ext_4005d0_printf: argument 1"}
!1404 = !{!1405}
!1405 = distinct !{!1405, !1406, !"ext_4005d0_printf: argument 0"}
!1406 = distinct !{!1406, !"ext_4005d0_printf"}
!1407 = !{!1408}
!1408 = distinct !{!1408, !1406, !"ext_4005d0_printf: argument 1"}
!1409 = !{!1410}
!1410 = distinct !{!1410, !1411, !"ext_4005d0_printf: argument 0"}
!1411 = distinct !{!1411, !"ext_4005d0_printf"}
!1412 = !{!1413}
!1413 = distinct !{!1413, !1411, !"ext_4005d0_printf: argument 1"}
!1414 = !{!1415}
!1415 = distinct !{!1415, !1416, !"ext_4005d0_printf: argument 0"}
!1416 = distinct !{!1416, !"ext_4005d0_printf"}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1416, !"ext_4005d0_printf: argument 1"}
!1419 = !{!1420}
!1420 = distinct !{!1420, !1421, !"ext_4005d0_printf: argument 0"}
!1421 = distinct !{!1421, !"ext_4005d0_printf"}
!1422 = !{!1423}
!1423 = distinct !{!1423, !1421, !"ext_4005d0_printf: argument 1"}
!1424 = !{!1425}
!1425 = distinct !{!1425, !1426, !"ext_4005d0_printf: argument 0"}
!1426 = distinct !{!1426, !"ext_4005d0_printf"}
!1427 = !{!1428}
!1428 = distinct !{!1428, !1426, !"ext_4005d0_printf: argument 1"}
!1429 = !{!1430}
!1430 = distinct !{!1430, !1431, !"ext_4005d0_printf: argument 0"}
!1431 = distinct !{!1431, !"ext_4005d0_printf"}
!1432 = !{!1433}
!1433 = distinct !{!1433, !1431, !"ext_4005d0_printf: argument 1"}
!1434 = !{!1435}
!1435 = distinct !{!1435, !1436, !"ext_4005d0_printf: argument 0"}
!1436 = distinct !{!1436, !"ext_4005d0_printf"}
!1437 = !{!1438}
!1438 = distinct !{!1438, !1436, !"ext_4005d0_printf: argument 1"}
!1439 = !{!1440}
!1440 = distinct !{!1440, !1441, !"ext_4005d0_printf: argument 0"}
!1441 = distinct !{!1441, !"ext_4005d0_printf"}
!1442 = !{!1443}
!1443 = distinct !{!1443, !1441, !"ext_4005d0_printf: argument 1"}
!1444 = !{!1445}
!1445 = distinct !{!1445, !1446, !"ext_4005f0_pow: argument 0"}
!1446 = distinct !{!1446, !"ext_4005f0_pow"}
!1447 = !{!1448}
!1448 = distinct !{!1448, !1446, !"ext_4005f0_pow: argument 1"}
!1449 = !{!1450}
!1450 = distinct !{!1450, !1451, !"ext_605560_sprintf: argument 0"}
!1451 = distinct !{!1451, !"ext_605560_sprintf"}
!1452 = !{!1453}
!1453 = distinct !{!1453, !1451, !"ext_605560_sprintf: argument 1"}
!1454 = !{!1455}
!1455 = distinct !{!1455, !1456, !"ext_4005d0_printf: argument 0"}
!1456 = distinct !{!1456, !"ext_4005d0_printf"}
!1457 = !{!1458}
!1458 = distinct !{!1458, !1456, !"ext_4005d0_printf: argument 1"}
!1459 = !{!1460}
!1460 = distinct !{!1460, !1461, !"ext_4005d0_printf: argument 0"}
!1461 = distinct !{!1461, !"ext_4005d0_printf"}
!1462 = !{!1463}
!1463 = distinct !{!1463, !1461, !"ext_4005d0_printf: argument 1"}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1466, !"ext_4005d0_printf: argument 0"}
!1466 = distinct !{!1466, !"ext_4005d0_printf"}
!1467 = !{!1468}
!1468 = distinct !{!1468, !1466, !"ext_4005d0_printf: argument 1"}
!1469 = !{!1470}
!1470 = distinct !{!1470, !1471, !"ext_4005d0_printf: argument 0"}
!1471 = distinct !{!1471, !"ext_4005d0_printf"}
!1472 = !{!1473}
!1473 = distinct !{!1473, !1471, !"ext_4005d0_printf: argument 1"}
!1474 = !{!1475}
!1475 = distinct !{!1475, !1476, !"ext_4005d0_printf: argument 0"}
!1476 = distinct !{!1476, !"ext_4005d0_printf"}
!1477 = !{!1478}
!1478 = distinct !{!1478, !1476, !"ext_4005d0_printf: argument 1"}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1481, !"ext_4005d0_printf: argument 0"}
!1481 = distinct !{!1481, !"ext_4005d0_printf"}
!1482 = !{!1483}
!1483 = distinct !{!1483, !1481, !"ext_4005d0_printf: argument 1"}
!1484 = !{!1485}
!1485 = distinct !{!1485, !1486, !"ext_4005d0_printf: argument 0"}
!1486 = distinct !{!1486, !"ext_4005d0_printf"}
!1487 = !{!1488}
!1488 = distinct !{!1488, !1486, !"ext_4005d0_printf: argument 1"}
!1489 = !{!1490}
!1490 = distinct !{!1490, !1491, !"ext_4005d0_printf: argument 0"}
!1491 = distinct !{!1491, !"ext_4005d0_printf"}
!1492 = !{!1493}
!1493 = distinct !{!1493, !1491, !"ext_4005d0_printf: argument 1"}
!1494 = !{!1495}
!1495 = distinct !{!1495, !1496, !"ext_4005d0_printf: argument 0"}
!1496 = distinct !{!1496, !"ext_4005d0_printf"}
!1497 = !{!1498}
!1498 = distinct !{!1498, !1496, !"ext_4005d0_printf: argument 1"}
!1499 = !{!1500}
!1500 = distinct !{!1500, !1501, !"ext_4005d0_printf: argument 0"}
!1501 = distinct !{!1501, !"ext_4005d0_printf"}
!1502 = !{!1503}
!1503 = distinct !{!1503, !1501, !"ext_4005d0_printf: argument 1"}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1506, !"ext_4005d0_printf: argument 0"}
!1506 = distinct !{!1506, !"ext_4005d0_printf"}
!1507 = !{!1508}
!1508 = distinct !{!1508, !1506, !"ext_4005d0_printf: argument 1"}
!1509 = !{!1510}
!1510 = distinct !{!1510, !1511, !"ext_4005d0_printf: argument 0"}
!1511 = distinct !{!1511, !"ext_4005d0_printf"}
!1512 = !{!1513}
!1513 = distinct !{!1513, !1511, !"ext_4005d0_printf: argument 1"}
!1514 = !{!1515}
!1515 = distinct !{!1515, !1516, !"ext_4005d0_printf: argument 0"}
!1516 = distinct !{!1516, !"ext_4005d0_printf"}
!1517 = !{!1518}
!1518 = distinct !{!1518, !1516, !"ext_4005d0_printf: argument 1"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1521, !"ext_4005d0_printf: argument 0"}
!1521 = distinct !{!1521, !"ext_4005d0_printf"}
!1522 = !{!1523}
!1523 = distinct !{!1523, !1521, !"ext_4005d0_printf: argument 1"}
!1524 = !{!1525}
!1525 = distinct !{!1525, !1526, !"ext_4005d0_printf: argument 0"}
!1526 = distinct !{!1526, !"ext_4005d0_printf"}
!1527 = !{!1528}
!1528 = distinct !{!1528, !1526, !"ext_4005d0_printf: argument 1"}
!1529 = !{!1530}
!1530 = distinct !{!1530, !1531, !"ext_4005d0_printf: argument 0"}
!1531 = distinct !{!1531, !"ext_4005d0_printf"}
!1532 = !{!1533}
!1533 = distinct !{!1533, !1531, !"ext_4005d0_printf: argument 1"}
!1534 = !{!1535}
!1535 = distinct !{!1535, !1536, !"ext_4005d0_printf: argument 0"}
!1536 = distinct !{!1536, !"ext_4005d0_printf"}
!1537 = !{!1538}
!1538 = distinct !{!1538, !1536, !"ext_4005d0_printf: argument 1"}
!1539 = !{!1540}
!1540 = distinct !{!1540, !1541, !"ext_4005d0_printf: argument 0"}
!1541 = distinct !{!1541, !"ext_4005d0_printf"}
!1542 = !{!1543}
!1543 = distinct !{!1543, !1541, !"ext_4005d0_printf: argument 1"}
!1544 = !{!1545}
!1545 = distinct !{!1545, !1546, !"ext_4005d0_printf: argument 0"}
!1546 = distinct !{!1546, !"ext_4005d0_printf"}
!1547 = !{!1548}
!1548 = distinct !{!1548, !1546, !"ext_4005d0_printf: argument 1"}
!1549 = !{!1550}
!1550 = distinct !{!1550, !1551, !"ext_4005d0_printf: argument 0"}
!1551 = distinct !{!1551, !"ext_4005d0_printf"}
!1552 = !{!1553}
!1553 = distinct !{!1553, !1551, !"ext_4005d0_printf: argument 1"}
!1554 = !{!1555}
!1555 = distinct !{!1555, !1556, !"ext_4005d0_printf: argument 0"}
!1556 = distinct !{!1556, !"ext_4005d0_printf"}
!1557 = !{!1558}
!1558 = distinct !{!1558, !1556, !"ext_4005d0_printf: argument 1"}
!1559 = !{!1560}
!1560 = distinct !{!1560, !1561, !"ext_4005d0_printf: argument 0"}
!1561 = distinct !{!1561, !"ext_4005d0_printf"}
!1562 = !{!1563}
!1563 = distinct !{!1563, !1561, !"ext_4005d0_printf: argument 1"}
!1564 = !{!1565}
!1565 = distinct !{!1565, !1566, !"ext_4005d0_printf: argument 0"}
!1566 = distinct !{!1566, !"ext_4005d0_printf"}
!1567 = !{!1568}
!1568 = distinct !{!1568, !1566, !"ext_4005d0_printf: argument 1"}
!1569 = !{!1570}
!1570 = distinct !{!1570, !1571, !"ext_4005d0_printf: argument 0"}
!1571 = distinct !{!1571, !"ext_4005d0_printf"}
!1572 = !{!1573}
!1573 = distinct !{!1573, !1571, !"ext_4005d0_printf: argument 1"}
!1574 = !{!1575}
!1575 = distinct !{!1575, !1576, !"ext_4005d0_printf: argument 0"}
!1576 = distinct !{!1576, !"ext_4005d0_printf"}
!1577 = !{!1578}
!1578 = distinct !{!1578, !1576, !"ext_4005d0_printf: argument 1"}
!1579 = !{!1580}
!1580 = distinct !{!1580, !1581, !"ext_4005d0_printf: argument 0"}
!1581 = distinct !{!1581, !"ext_4005d0_printf"}
!1582 = !{!1583}
!1583 = distinct !{!1583, !1581, !"ext_4005d0_printf: argument 1"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1586, !"ext_4005d0_printf: argument 0"}
!1586 = distinct !{!1586, !"ext_4005d0_printf"}
!1587 = !{!1588}
!1588 = distinct !{!1588, !1586, !"ext_4005d0_printf: argument 1"}
!1589 = !{!1590}
!1590 = distinct !{!1590, !1591, !"ext_4005d0_printf: argument 0"}
!1591 = distinct !{!1591, !"ext_4005d0_printf"}
!1592 = !{!1593}
!1593 = distinct !{!1593, !1591, !"ext_4005d0_printf: argument 1"}
!1594 = !{!1595}
!1595 = distinct !{!1595, !1596, !"ext_4005d0_printf: argument 0"}
!1596 = distinct !{!1596, !"ext_4005d0_printf"}
!1597 = !{!1598}
!1598 = distinct !{!1598, !1596, !"ext_4005d0_printf: argument 1"}
!1599 = !{!1600}
!1600 = distinct !{!1600, !1601, !"ext_4005d0_printf: argument 0"}
!1601 = distinct !{!1601, !"ext_4005d0_printf"}
!1602 = !{!1603}
!1603 = distinct !{!1603, !1601, !"ext_4005d0_printf: argument 1"}
!1604 = !{!1605}
!1605 = distinct !{!1605, !1606, !"ext_4005d0_printf: argument 0"}
!1606 = distinct !{!1606, !"ext_4005d0_printf"}
!1607 = !{!1608}
!1608 = distinct !{!1608, !1606, !"ext_4005d0_printf: argument 1"}
!1609 = !{!1610}
!1610 = distinct !{!1610, !1611, !"ext_4005d0_printf: argument 0"}
!1611 = distinct !{!1611, !"ext_4005d0_printf"}
!1612 = !{!1613}
!1613 = distinct !{!1613, !1611, !"ext_4005d0_printf: argument 1"}
!1614 = !{!1615}
!1615 = distinct !{!1615, !1616, !"ext_400640_sqrt: argument 0"}
!1616 = distinct !{!1616, !"ext_400640_sqrt"}
!1617 = !{!1618}
!1618 = distinct !{!1618, !1616, !"ext_400640_sqrt: argument 1"}
!1619 = !{!1620}
!1620 = distinct !{!1620, !1621, !"ext_4005d0_printf: argument 0"}
!1621 = distinct !{!1621, !"ext_4005d0_printf"}
!1622 = !{!1623}
!1623 = distinct !{!1623, !1621, !"ext_4005d0_printf: argument 1"}
!1624 = !{!1625}
!1625 = distinct !{!1625, !1626, !"ext_4005d0_printf: argument 0"}
!1626 = distinct !{!1626, !"ext_4005d0_printf"}
!1627 = !{!1628}
!1628 = distinct !{!1628, !1626, !"ext_4005d0_printf: argument 1"}
!1629 = !{!1630}
!1630 = distinct !{!1630, !1631, !"ext_4005d0_printf: argument 0"}
!1631 = distinct !{!1631, !"ext_4005d0_printf"}
!1632 = !{!1633}
!1633 = distinct !{!1633, !1631, !"ext_4005d0_printf: argument 1"}
!1634 = !{!1635}
!1635 = distinct !{!1635, !1636, !"ext_4005d0_printf: argument 0"}
!1636 = distinct !{!1636, !"ext_4005d0_printf"}
!1637 = !{!1638}
!1638 = distinct !{!1638, !1636, !"ext_4005d0_printf: argument 1"}
!1639 = !{!1640}
!1640 = distinct !{!1640, !1641, !"ext_4005d0_printf: argument 0"}
!1641 = distinct !{!1641, !"ext_4005d0_printf"}
!1642 = !{!1643}
!1643 = distinct !{!1643, !1641, !"ext_4005d0_printf: argument 1"}
!1644 = !{!1645}
!1645 = distinct !{!1645, !1646, !"ext_4005d0_printf: argument 0"}
!1646 = distinct !{!1646, !"ext_4005d0_printf"}
!1647 = !{!1648}
!1648 = distinct !{!1648, !1646, !"ext_4005d0_printf: argument 1"}
!1649 = !{!1650}
!1650 = distinct !{!1650, !1651, !"ext_4005d0_printf: argument 0"}
!1651 = distinct !{!1651, !"ext_4005d0_printf"}
!1652 = !{!1653}
!1653 = distinct !{!1653, !1651, !"ext_4005d0_printf: argument 1"}
!1654 = !{!1655}
!1655 = distinct !{!1655, !1656, !"ext_4005d0_printf: argument 0"}
!1656 = distinct !{!1656, !"ext_4005d0_printf"}
!1657 = !{!1658}
!1658 = distinct !{!1658, !1656, !"ext_4005d0_printf: argument 1"}
!1659 = !{!1660}
!1660 = distinct !{!1660, !1661, !"ext_4005d0_printf: argument 0"}
!1661 = distinct !{!1661, !"ext_4005d0_printf"}
!1662 = !{!1663}
!1663 = distinct !{!1663, !1661, !"ext_4005d0_printf: argument 1"}
!1664 = !{!1665}
!1665 = distinct !{!1665, !1666, !"ext_4005d0_printf: argument 0"}
!1666 = distinct !{!1666, !"ext_4005d0_printf"}
!1667 = !{!1668}
!1668 = distinct !{!1668, !1666, !"ext_4005d0_printf: argument 1"}
!1669 = !{!1670}
!1670 = distinct !{!1670, !1671, !"ext_4005d0_printf: argument 0"}
!1671 = distinct !{!1671, !"ext_4005d0_printf"}
!1672 = !{!1673}
!1673 = distinct !{!1673, !1671, !"ext_4005d0_printf: argument 1"}
!1674 = !{!1675}
!1675 = distinct !{!1675, !1676, !"ext_4005d0_printf: argument 0"}
!1676 = distinct !{!1676, !"ext_4005d0_printf"}
!1677 = !{!1678}
!1678 = distinct !{!1678, !1676, !"ext_4005d0_printf: argument 1"}
!1679 = !{!1680}
!1680 = distinct !{!1680, !1681, !"ext_4005d0_printf: argument 0"}
!1681 = distinct !{!1681, !"ext_4005d0_printf"}
!1682 = !{!1683}
!1683 = distinct !{!1683, !1681, !"ext_4005d0_printf: argument 1"}
!1684 = !{!1685}
!1685 = distinct !{!1685, !1686, !"ext_4005d0_printf: argument 0"}
!1686 = distinct !{!1686, !"ext_4005d0_printf"}
!1687 = !{!1688}
!1688 = distinct !{!1688, !1686, !"ext_4005d0_printf: argument 1"}
!1689 = !{!1690}
!1690 = distinct !{!1690, !1691, !"ext_400640_sqrt: argument 0"}
!1691 = distinct !{!1691, !"ext_400640_sqrt"}
!1692 = !{!1693}
!1693 = distinct !{!1693, !1691, !"ext_400640_sqrt: argument 1"}
!1694 = !{!1695}
!1695 = distinct !{!1695, !1696, !"ext_605558_fopen: argument 0"}
!1696 = distinct !{!1696, !"ext_605558_fopen"}
!1697 = !{!1698}
!1698 = distinct !{!1698, !1696, !"ext_605558_fopen: argument 1"}
!1699 = !{!1700}
!1700 = distinct !{!1700, !1701, !"ext_4005d0_printf: argument 0"}
!1701 = distinct !{!1701, !"ext_4005d0_printf"}
!1702 = !{!1703}
!1703 = distinct !{!1703, !1701, !"ext_4005d0_printf: argument 1"}
!1704 = !{!1705}
!1705 = distinct !{!1705, !1706, !"ext_4005d0_printf: argument 0"}
!1706 = distinct !{!1706, !"ext_4005d0_printf"}
!1707 = !{!1708}
!1708 = distinct !{!1708, !1706, !"ext_4005d0_printf: argument 1"}
!1709 = !{!1710}
!1710 = distinct !{!1710, !1711, !"ext_4005d0_printf: argument 0"}
!1711 = distinct !{!1711, !"ext_4005d0_printf"}
!1712 = !{!1713}
!1713 = distinct !{!1713, !1711, !"ext_4005d0_printf: argument 1"}
!1714 = !{!1715}
!1715 = distinct !{!1715, !1716, !"ext_400640_sqrt: argument 0"}
!1716 = distinct !{!1716, !"ext_400640_sqrt"}
!1717 = !{!1718}
!1718 = distinct !{!1718, !1716, !"ext_400640_sqrt: argument 1"}
!1719 = !{!1720}
!1720 = distinct !{!1720, !1721, !"ext_4005d0_printf: argument 0"}
!1721 = distinct !{!1721, !"ext_4005d0_printf"}
!1722 = !{!1723}
!1723 = distinct !{!1723, !1721, !"ext_4005d0_printf: argument 1"}
!1724 = !{!1725}
!1725 = distinct !{!1725, !1726, !"ext_605528_fclose: argument 0"}
!1726 = distinct !{!1726, !"ext_605528_fclose"}
!1727 = !{!1728}
!1728 = distinct !{!1728, !1726, !"ext_605528_fclose: argument 1"}
!1729 = !{!1730}
!1730 = distinct !{!1730, !1731, !"ext_4005d0_printf: argument 0"}
!1731 = distinct !{!1731, !"ext_4005d0_printf"}
!1732 = !{!1733}
!1733 = distinct !{!1733, !1731, !"ext_4005d0_printf: argument 1"}
