; ModuleID = 'lu.amd64.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_41a5a0__rodata_type = type <{ [16 x i8], [27 x i8], [46 x i8], [38 x i8], [44 x i8], [37 x i8], [39 x i8], [39 x i8], [25 x i8], [45 x i8], [45 x i8], [45 x i8], [37 x i8], [37 x i8], [20 x i8], [23 x i8], [23 x i8], [23 x i8], [23 x i8], [64 x i8], [39 x i8], [34 x i8], [21 x i8], [24 x i8], [177 x i8], [249 x i8], [160 x i8], [11 x i8], [2 x i8], [6 x i8], [5 x i8], [5 x i8], [5 x i8], [6 x i8], [5 x i8], [5 x i8], [5 x i8], [4 x i8], [7 x i8], [3 x i8], [25 x i8], [6 x i8], [12 x i8], [4 x i8], [6 x i8], [4 x i8], [12 x i8], [29 x i8], [7 x i8], [27 x i8], [25 x i8], [31 x i8], [8 x i8], [23 x i8], [28 x i8], [37 x i8], [8 x i8], [34 x i8], [37 x i8], [42 x i8], [40 x i8], [37 x i8], [37 x i8], [13 x i8], [19 x i8], [23 x i8], [23 x i8], [246 x i8], [59 x i8], [13 x i8], [38 x i8], [16 x i8], [7 x i8], [86 x i8], [115 x i8], [20 x i8], [86 x i8], [16 x i8], [704 x i8], [45 x i8], [41 x i8], [50 x i8], [16 x i8], [38 x i8], [24 x i8], [38 x i8], [38 x i8], [44 x i8], [33 x i8], [19 x i8], [23 x i8], [37 x i8], [37 x i8], [31 x i8], [27 x i8], [26 x i8], [33 x i8] }>
%seg_61be00__init_array_type = type <{ i64, i64 }>
%seg_61bff0__got_type = type <{ i64, i64 }>
%seg_61c000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_61c068__data_type = type <{ [16 x i8], [4 x i8] }>
%__bss_start_type = type <{ [4 x i8] }>
%seg_61c080__bss_type = type <{ [16 x i8], [512 x i8], [512 x i8] }>
%dx1_type = type <{ [8 x i8] }>
%dx3_type = type <{ [8 x i8] }>
%jend_type = type <{ [4 x i8] }>
%ii1_type = type <{ [4 x i8] }>
%tx2_type = type <{ [8 x i8] }>
%iend_type = type <{ [4 x i8] }>
%invert_type = type <{ [4 x i8] }>
%nz_type = type <{ [4 x i8] }>
%nx_type = type <{ [4 x i8] }>
%dy4_type = type <{ [8 x i8] }>
%dy2_type = type <{ [8 x i8] }>
%ki2_type = type <{ [16 x i8] }>
%d_type = type <{ [31200 x i8] }>
%ty3_type = type <{ [8 x i8] }>
%dssp_type = type <{ [8 x i8] }>
%b_type = type <{ [31200 x i8] }>
%itmax_type = type <{ [8 x i8] }>
%ty1_type = type <{ [8 x i8] }>
%jst_type = type <{ [8 x i8] }>
%dz5_type = type <{ [8 x i8] }>
%dz3_type = type <{ [8 x i8] }>
%ttotal_type = type <{ [8 x i8] }>
%dz1_type = type <{ [8 x i8] }>
%omega_type = type <{ [8 x i8] }>
%tz2_type = type <{ [8 x i8] }>
%dzeta_type = type <{ [8 x i8] }>
%maxtime_type = type <{ [16 x i8] }>
%errnm_type = type <{ [40 x i8] }>
%timeron_type = type <{ [8 x i8] }>
%dxi_type = type <{ [16 x i8] }>
%rsd_type = type <{ [81120 x i8] }>
%frct_type = type <{ [81120 x i8] }>
%ji2_type = type <{ [16 x i8] }>
%qs_type = type <{ [16224 x i8] }>
%inorm_type = type <{ [8 x i8] }>
%dx2_type = type <{ [8 x i8] }>
%dx4_type = type <{ [8 x i8] }>
%tx3_type = type <{ [8 x i8] }>
%tx1_type = type <{ [8 x i8] }>
%ii2_type = type <{ [8 x i8] }>
%rho_i_type = type <{ [16224 x i8] }>
%ny_type = type <{ [4 x i8] }>
%nz0_type = type <{ [4 x i8] }>
%deta_type = type <{ [8 x i8] }>
%dy3_type = type <{ [8 x i8] }>
%ki1_type = type <{ [8 x i8] }>
%dy1_type = type <{ [8 x i8] }>
%ty2_type = type <{ [8 x i8] }>
%c_type = type <{ [31200 x i8] }>
%a_type = type <{ [31200 x i8] }>
%dy5_type = type <{ [16 x i8] }>
%u_type = type <{ [81120 x i8] }>
%ce_type = type <{ [520 x i8] }>
%dz4_type = type <{ [8 x i8] }>
%dz2_type = type <{ [8 x i8] }>
%tz3_type = type <{ [8 x i8] }>
%tz1_type = type <{ [16 x i8] }>
%tolrsd_type = type <{ [48 x i8] }>
%flux_type = type <{ [480 x i8] }>
%ipr_type = type <{ [4 x i8] }>
%nx0_type = type <{ [4 x i8] }>
%frc_type = type <{ [8 x i8] }>
%dt_type = type <{ [8 x i8] }>
%ji1_type = type <{ [4 x i8] }>
%ist_type = type <{ [4 x i8] }>
%rsdnm_type = type <{ [40 x i8] }>
%ny0_type = type <{ [8 x i8] }>
%dx5_type = type <{ [16 x i8] }>
%tmp_type = type <{ [16 x i8] }>
%delunm_type = type <{ [48 x i8] }>
%tv_type = type <{ [5760 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_41a5a0__rodata = internal constant %seg_41a5a0__rodata_type <{ [16 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00\F0?", [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", [46 x i8] c" Class           =                        %c\0A\00", [38 x i8] c" Size            =             %12ld\0A\00", [44 x i8] c" Size            =             %4dx%4dx%4d\0A\00", [37 x i8] c" Iterations      =             %12d\0A\00", [39 x i8] c" Time in seconds =             %12.2f\0A\00", [39 x i8] c" Mop/s total     =             %12.2f\0A\00", [25 x i8] c" Operation type  = %24s\0A\00", [45 x i8] c" Verification    =            NOT PERFORMED\0A\00", [45 x i8] c" Verification    =               SUCCESSFUL\0A\00", [45 x i8] c" Verification    =             UNSUCCESSFUL\0A\00", [37 x i8] c" Version         =             %12s\0A\00", [37 x i8] c" Compile date    =             %12s\0A\00", [20 x i8] c"\0A Compile options:\0A\00", [23 x i8] c"    CLINK        = %s\0A\00", [23 x i8] c"    C_LIB        = %s\0A\00", [23 x i8] c"    C_INC        = %s\0A\00", [23 x i8] c"    CFLAGS       = %s\0A\00", [64 x i8] c"    CLINKFLAGS   = %s\0A\00\0A--------------------------------------\0A\00", [39 x i8] c" Please send all errors/feedbacks to:\0A\00", [34 x i8] c" Center for Manycore Programming\0A\00", [21 x i8] c" cmp@aces.snu.ac.kr\0A\00", [24 x i8] c" http://aces.snu.ac.kr\0A\00", [177 x i8] c"     SUBDOMAIN SIZE IS TOO SMALL - \0A     ADJUST PROBLEM SIZE OR NUMBER OF PROCESSORS\0A     SO THAT NX, NY AND NZ ARE GREATER THAN OR EQUAL\0A     TO 4 THEY ARE CURRENTLY%3d%3d%3d\0A\00", [249 x i8] c"     SUBDOMAIN SIZE IS TOO LARGE - \0A     ADJUST PROBLEM SIZE OR NUMBER OF PROCESSORS\0A     SO THAT NX, NY AND NZ ARE LESS THAN OR EQUAL TO \0A     ISIZ1, ISIZ2 AND ISIZ3 RESPECTIVELY.  THEY ARE\0A     CURRENTLYi%4d%4d%4d\0A\00\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\00\00\00\00\00\00\18@\00\00\00\00\00\00\10\C0", [160 x i8] c"\00\00\00\00\00\00\00@\9A\99\99\99\99\99\B9?[\8F\C2\F5(\5C\FF?UUUUUU\C5?\B6\1E\85\EBQ\B8\DE\BFUUUUUU\F5?\9A\99\99\99\99\99\D9?ffffff\F6?\00\00\00\00\00\00\E0?I\0C\02+\87\16\C9?\9A\99\99\99\99\99\D9\BF\9A\99\99\99\99\99\E9?\9A\99\99\99\99\99\F9?\00\00\00\00\80\84.A\00\00\00\00P\94\01A\00\00\00\00\00\00\08@\9A\99\99\99\B9\1E\DB@ffff\A6U\C5@\AEG\E1z\14\03\9F@\00\00\00\00\00\00Y@", [11 x i8] c"timer.flag\00", [2 x i8] c"r\00", [6 x i8] c"total\00", [5 x i8] c"rhsx\00", [5 x i8] c"rhsy\00", [5 x i8] c"rhsz\00", [6 x i8] c"jacld\00", [5 x i8] c"blts\00", [5 x i8] c"jacu\00", [5 x i8] c"buts\00", [4 x i8] c"add\00", [7 x i8] c"l2norm\00", [3 x i8] c"LU\00", [25 x i8] c"          floating point\00", [6 x i8] c"3.3.1\00", [12 x i8] c"03 Nov 2017\00", [4 x i8] c"gcc\00", [6 x i8] c"$(CC)\00", [4 x i8] c"-lm\00", [12 x i8] c"-I../common\00", [29 x i8] c"-g -Wall -O3 -mcmodel=medium\00", [7 x i8] c"(none)\00", [27 x i8] c"  SECTION     Time (secs)\0A\00", [25 x i8] c"  %-8s:%9.3f  (%6.2f%%)\0A\00", [31 x i8] c"     --> %8s:%9.3f  (%6.2f%%)\0A\00", [8 x i8] c"sub-rhs\00", [23 x i8] c"rest-rhs\00\00\00\00\00\00\00\00\00\00\00\00\00\D0?", [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", [37 x i8] c" Class           =             %12c\0A\00", [8 x i8] c"%15.0lf\00", [34 x i8] c" Size            =          %15s\0A\00", [37 x i8] c" Size            =             %12d\0A\00", [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", [40 x i8] c" Time in seconds =             %12.2lf\0A\00", [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", [37 x i8] c" Verification    =             %12s\0A\00", [13 x i8] c"UNSUCCESSFUL\00", [19 x i8] c"\0A Compile options:\0A", [23 x i8] c"    CC           = %s\0A\00", [23 x i8] c"    RAND         = %s\0A\00", [246 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00\00\00\00\00\00\00\00\00\00\10=\00\00\00\00\00\00\D0B\00\00\00\00\00\00`A\00\00\00\00\00\00\80>:\8C0\E2\8EyE>333333\F3?", [59 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-SER-C) - LU Benchmark\0A\0A\00", [13 x i8] c"inputlu.data\00", [38 x i8] c"Reading from input file inputlu.data\0A\00", [16 x i8] c"%lf%lf%lf%lf%lf\00", [7 x i8] c"%d%d%d\00", [86 x i8] c"     PROBLEM SIZE IS TOO SMALL - \0A     SET EACH OF NX, NY AND NZ AT LEAST EQUAL TO 5\0A\00", [115 x i8] c"     PROBLEM SIZE IS TOO LARGE - \0A     NX, NY AND NZ SHOULD BE EQUAL TO \0A     ISIZ1, ISIZ2 AND ISIZ3 RESPECTIVELY\0A\00", [20 x i8] c" Size: %4dx%4dx%4d\0A\00", [86 x i8] c" Iterations: %4d\0A\00\00\00\00\00\00\00\00\00\00\00\E8?\9A\99\99\99\99\99\C9?333333\D3?\B8\1E\85\EBQ\B8\9E?{\14\AEG\E1z\A4?\9A\99\99\99\99\99\A9?{\14\AEG\E1z\94?{\14\AEG\E1z\84?", [16 x i8] c" Time step %4d\0A\00", [704 x i8] c" \0A convergence was achieved after %4d pseudo-time steps\0A\00\00\00\00\00\00\00\00\EC\8F\9D\D4\C8\C7W@\B3\A7\E6/l\22\8A@\A7d\E0P}2Z@>\B5\9E\C3sE^@2\97 \CC&\1CE@j\970\87\EA\00~@\BE\C0\AC\00\D0\E5\11A\95\FD\88\B93\05\E6@\A6\DEl6\09\F9\E9@4\E5\F9\02\02\CE\D4@X5\ADYa\A1\09A\01\DF\11,\D3\D5T@U\CD\CF\B4\18\E2\85@@B\BA\B4\A3\93T@\5C\FE\9D\ED\EF\95W@\03$5\B6^\D7>@\FF\EE\B4,\D4sw@n\AA\07\BF\FFo\F1@\C4\96`\E9\011\C4@l\AC\AB\9F\92\CA\C7@ 0#\FD^X\B2@\B4\ADf\BD\85\C5\E7@1sw8\FD\A8P@\D8/\CDQr~|@\09u\A5:\F6\1CH@\B89\89\A6\E1\10K@\9A\B1.\E9l(/@\96\A2#\96\90\FFj@\D4:\04\91\F3c\D1@J\9Fa\0A\E3\1F\A1@\BA\BE\0C\BB\C6\04\A4@\A2\90\99\1D\B3\E1\8B@\87\C9\1FYYD\C4@Kx&\8C\8E\F1G@\CF\0A\EB\02\C9Hp@\8B\D1:\F0\C7\E79@?\0F\02m\08{<@\D9\E7\1FVD8 @fZ\F6\BC\C0\80\5C@u\8E\85\05\CC\8C\BC@\B7\03m\A0\05Q\88@\050\9E\9F\B2\9A\8B@\E8\A7L1\5Cbp@\CF\F3&\DB\88\C2\AB@x\98\8D\BD\EA\07:@\8F\FDs\BB\C7\ADQ@1\1B\93\84\0E\DB\1A@\0F\B3\0An\ADc\1D@\A8\CF)\CE?\8E\06@\CC\A4\C9Q\CE\F6=@\97z\B4u\E7\B9\9C@\E9\151\12\7FNf@\99\12\A4\89\C2_h@D,\E1\CF\8D\B3O@K\D0\ED)+X\88@y\D0\10N]:'@\D7S\13G3Y\F1?vw<\A4\84\F0\B5?]\11\F4\AB\EE\C2\B7?N\C7\C9\81W\EE\A9?UCb\A8\87'\DF?em\A3H\9BD<@X\81\BDR\08\9C\02@\05\C3<\B0\A5f\04@\E6\1A\18+^\13\F5?\16)\CF\88\F0\BA(@\FA~j\BCt\93X?\BC\9E:+\19^\1F@\09\E7\DBD\F1wU?@*Y\FDF\A8\0E?\DC\8A\8E\9D\95\B7\0E?cq\F8\C9\D4\0E\16?\84=WKq\0BE?W\C0C\83\0F\8B\A1?\FAN3W\DD\9FX?\DD\BF\17R\EC\DEX?!\0D\9E\85\DB\00b?\D6\AD\9F1\C6\95\90?\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [45 x i8] c"\0A Verification being performed for class %c\0A\00", [41 x i8] c" Accuracy setting for epsilon = %20.13E\0A\00", [50 x i8] c" DT does not match the reference value of %15.8E\0A\00", [16 x i8] c" Unknown class\0A\00", [38 x i8] c" Comparison of RMS-norms of residual\0A\00", [24 x i8] c"          %2d  %20.13E\0A\00", [38 x i8] c"          %2d  %20.13E%20.13E%20.13E\0A\00", [38 x i8] c" FAILURE: %2d  %20.13E%20.13E%20.13E\0A\00", [44 x i8] c" Comparison of RMS-norms of solution error\0A\00", [33 x i8] c" Comparison of surface integral\0A\00", [19 x i8] c" Surface integral\0A\00", [23 x i8] c"              %20.13E\0A\00", [37 x i8] c"              %20.13E%20.13E%20.13E\0A\00", [37 x i8] c" FAILURE:     %20.13E%20.13E%20.13E\0A\00", [31 x i8] c" No reference values provided\0A\00", [27 x i8] c"No verification performed\0A\00", [26 x i8] c" Verification Successful\0A\00", [33 x i8] c" Verification failed\0A\00\00\00\00\8D\ED\B5\A0\F7\C6\B0>" }>
@seg_61be00__init_array = internal global %seg_61be00__init_array_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_4007c0_frame_dummy to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400790___do_global_dtors_aux to i64) }>
@seg_61bff0__got = internal global %seg_61bff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_61c000__got_plt = internal global %seg_61c000__got_plt_type <{ [24 x i8] c"\10\BEa\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), i64 ptrtoint (i64 (i64)* @fclose to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @pow to i64), i64 ptrtoint (i64 (i64)* @fgetc to i64), i64 ptrtoint (i64 (i64, i64)* @fopen to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @sprintf to i64), i64 ptrtoint (i64 (i64)* @exit to i64), i64 ptrtoint (double (double)* @sqrt to i64) }>
@seg_61c068__data = internal global %seg_61c068__data_type <{ [16 x i8] zeroinitializer, [4 x i8] c"\FF\FF\FF\FF" }>
@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@seg_61c080__bss = internal global %seg_61c080__bss_type zeroinitializer
@dx1 = global %dx1_type zeroinitializer
@dx3 = global %dx3_type zeroinitializer
@jend = global %jend_type zeroinitializer
@ii1 = global %ii1_type zeroinitializer
@tx2 = global %tx2_type zeroinitializer
@iend = global %iend_type zeroinitializer
@invert = local_unnamed_addr global %invert_type zeroinitializer
@nz = global %nz_type zeroinitializer
@nx = global %nx_type zeroinitializer
@dy4 = global %dy4_type zeroinitializer
@dy2 = global %dy2_type zeroinitializer
@ki2 = global %ki2_type zeroinitializer
@d = global %d_type zeroinitializer
@ty3 = global %ty3_type zeroinitializer
@dssp = global %dssp_type zeroinitializer
@b = global %b_type zeroinitializer
@itmax = global %itmax_type zeroinitializer
@ty1 = global %ty1_type zeroinitializer
@jst = global %jst_type zeroinitializer
@dz5 = global %dz5_type zeroinitializer
@dz3 = global %dz3_type zeroinitializer
@ttotal = local_unnamed_addr global %ttotal_type zeroinitializer
@dz1 = global %dz1_type zeroinitializer
@omega = global %omega_type zeroinitializer
@tz2 = global %tz2_type zeroinitializer
@dzeta = global %dzeta_type zeroinitializer
@maxtime = global %maxtime_type zeroinitializer
@errnm = global %errnm_type zeroinitializer
@timeron = global %timeron_type zeroinitializer
@dxi = global %dxi_type zeroinitializer
@rsd = global %rsd_type zeroinitializer
@frct = global %frct_type zeroinitializer
@ji2 = global %ji2_type zeroinitializer
@qs = global %qs_type zeroinitializer
@inorm = global %inorm_type zeroinitializer
@dx2 = global %dx2_type zeroinitializer
@dx4 = global %dx4_type zeroinitializer
@tx3 = global %tx3_type zeroinitializer
@tx1 = global %tx1_type zeroinitializer
@ii2 = global %ii2_type zeroinitializer
@rho_i = global %rho_i_type zeroinitializer
@ny = global %ny_type zeroinitializer
@nz0 = global %nz0_type zeroinitializer
@deta = global %deta_type zeroinitializer
@dy3 = global %dy3_type zeroinitializer
@ki1 = global %ki1_type zeroinitializer
@dy1 = global %dy1_type zeroinitializer
@ty2 = global %ty2_type zeroinitializer
@c = global %c_type zeroinitializer
@a = global %a_type zeroinitializer
@dy5 = global %dy5_type zeroinitializer
@u = global %u_type zeroinitializer
@ce = global %ce_type zeroinitializer
@dz4 = global %dz4_type zeroinitializer
@dz2 = global %dz2_type zeroinitializer
@tz3 = global %tz3_type zeroinitializer
@tz1 = global %tz1_type zeroinitializer
@tolrsd = global %tolrsd_type zeroinitializer
@flux = global %flux_type zeroinitializer
@ipr = global %ipr_type zeroinitializer
@nx0 = global %nx0_type zeroinitializer
@frc = global %frc_type zeroinitializer
@dt = global %dt_type zeroinitializer
@ji1 = global %ji1_type zeroinitializer
@ist = global %ist_type zeroinitializer
@rsdnm = global %rsdnm_type zeroinitializer
@ny0 = global %ny0_type zeroinitializer
@dx5 = global %dx5_type zeroinitializer
@tmp = global %tmp_type zeroinitializer
@delunm = global %delunm_type zeroinitializer
@tv = global %tv_type zeroinitializer
@__mcsema_reg_state = internal thread_local global %struct.State zeroinitializer
@__mcsema_stack = internal thread_local global [131072 x i64] zeroinitializer
@__mcsema_tls = internal thread_local global [512 x i64] zeroinitializer
@0 = internal global i1 false
@llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
define %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1 {
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_fscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fgetc(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @pow(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @sprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #3

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400750_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64* %4, align 8, !tbaa !1240
  store i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3)), i64 1), i64* %5, align 8, !tbaa !1240
  store i8 and (i8 trunc (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3)) to i8), i8 1), i8* %12, align 1, !tbaa !1244
  %18 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3)), i64 1) to i32), i32 255)) #11
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %13, align 1, !tbaa !1244
  store i8 0, i8* %14, align 1, !tbaa !1244
  store i8 zext (i1 icmp eq (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3)), i64 1), i64 0) to i8), i8* %15, align 1, !tbaa !1244
  store i8 trunc (i64 lshr (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3)), i64 1), i64 63) to i8), i8* %16, align 1, !tbaa !1244
  store i8 0, i8* %17, align 1, !tbaa !1244
  br i1 icmp eq (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 3)), i64 1), i64 0), label %block_400788, label %block_400773

block_400773:                                     ; preds = %block_400750
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %12, align 1, !tbaa !1245
  store i8 1, i8* %13, align 1, !tbaa !1259
  store i8 1, i8* %15, align 1, !tbaa !1260
  store i8 0, i8* %16, align 1, !tbaa !1261
  store i8 0, i8* %17, align 1, !tbaa !1262
  store i8 0, i8* %14, align 1, !tbaa !1263
  br label %block_400788

block_400788:                                     ; preds = %block_400773, %block_400750
  %22 = inttoptr i64 %10 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  %24 = inttoptr i64 %9 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %9, 8
  store i64 %26, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4196c0_verify(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4196c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %6 = bitcast %union.anon* %4 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10
  %21 = load i64, i64* %13, align 8
  %22 = load i64, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24
  store i64 %23, i64* %13, align 8, !tbaa !1240
  %25 = add i64 %22, -360
  store i64 %25, i64* %12, align 8, !tbaa !1240
  %26 = getelementptr %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2296) to double*)
  %33 = bitcast %union.VectorReg* %15 to double*
  store double %32, double* %33, align 1, !tbaa !1264
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %36 = bitcast %union.VectorReg* %16 to i8*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %38 = bitcast %union.VectorReg* %16 to i32*
  store i32 0, i32* %38, align 1, !tbaa !1266
  %39 = getelementptr inbounds i8, i8* %36, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 0, i32* %40, align 1, !tbaa !1266
  %41 = bitcast i64* %37 to i32*
  store i32 0, i32* %41, align 1, !tbaa !1266
  %42 = getelementptr inbounds i8, i8* %36, i64 12
  %43 = bitcast i8* %42 to i32*
  store i32 0, i32* %43, align 1, !tbaa !1266
  %44 = add i64 %22, -16
  %45 = load i64, i64* %11, align 8
  %46 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %46
  %47 = add i64 %22, -24
  %48 = load i64, i64* %10, align 8
  %49 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %49
  %50 = add i64 %22, -32
  %51 = bitcast [32 x %union.VectorReg]* %14 to double*
  %52 = load double, double* %51, align 1
  %53 = inttoptr i64 %50 to double*
  store double %52, double* %53
  %54 = add i64 %22, -40
  %55 = load i64, i64* %9, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %56
  %57 = add i64 %22, -48
  %58 = load i64, i64* %8, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %59
  %60 = add i64 %22, -256
  %61 = bitcast %union.VectorReg* %16 to double*
  %62 = load double, double* %61, align 1
  %63 = inttoptr i64 %60 to double*
  store double %62, double* %63
  %64 = add i64 %22, -248
  %65 = inttoptr i64 %64 to double*
  store double %32, double* %65
  %66 = inttoptr i64 %54 to i64*
  %67 = load i64, i64* %66
  %68 = inttoptr i64 %67 to i8*
  store i8 85, i8* %68
  %69 = load i64, i64* %13, align 8
  %70 = add i64 %69, -40
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = inttoptr i64 %72 to i32*
  store i32 1, i32* %73
  %74 = add i64 %69, -252
  %75 = add i64 %1, 86
  %76 = inttoptr i64 %74 to i32*
  store i32 0, i32* %76
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %78 = add i64 %69, -80
  %79 = add i64 %69, -128
  br label %block_419716

block_41a1f0:                                     ; preds = %block_41a1e0
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3662), i64* %11, align 8, !tbaa !1240
  %80 = add i32 %1368, 1
  %81 = zext i32 %80 to i64
  %82 = add i64 %1364, -16
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  %85 = sext i32 %1368 to i64
  store i64 %85, i64* %9, align 8, !tbaa !1240
  %86 = shl nsw i64 %85, 3
  %87 = add i64 %86, %84
  %88 = inttoptr i64 %87 to double*
  %89 = load double, double* %88
  store double %89, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  store i64 %81, i64* %10, align 8, !tbaa !1240
  %90 = add i64 %137, 44
  %91 = load i64, i64* %12, align 8, !tbaa !1240
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93
  %94 = load i64, i64* %902, align 8, !alias.scope !1267, !noalias !1270
  %95 = load i64, i64* %901, align 8, !alias.scope !1267, !noalias !1270
  %96 = inttoptr i64 %91 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %91, 8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %91, 16
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %91, 24
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %91, 32
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %91, 40
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %91, 48
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %91, 56
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %91, 64
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %91, 72
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = inttoptr i64 %92 to i64*
  %126 = load i64, i64* %125
  store i64 %126, i64* %3, align 8, !alias.scope !1267, !noalias !1270
  store i64 %91, i64* %12, align 8, !alias.scope !1267, !noalias !1270
  %127 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3662), i64 %81, i64 %85, i64 %84, i64 %94, i64 %95, i64 %97, i64 %100, i64 %103, i64 %106, i64 %109, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124), !noalias !1267
  %128 = load i64, i64* %13, align 8
  %129 = add i64 %128, -300
  %130 = trunc i64 %127 to i32
  %131 = load i64, i64* %3, align 8
  %132 = add i64 %131, 6
  %133 = inttoptr i64 %129 to i32*
  store i32 %130, i32* %133
  br label %block_41a2fb

block_41a052:                                     ; preds = %block_41a045
  %134 = select i1 %1992, i64 16, i64 71
  %135 = add i64 %1970, %134
  br i1 %1992, label %block_41a062, label %block_41a099

block_41a1e0:                                     ; preds = %block_41a1d3
  %136 = select i1 %1400, i64 16, i64 71
  %137 = add i64 %1378, %136
  br i1 %1400, label %block_41a1f0, label %block_41a227

block_419fdc:                                     ; preds = %block_419fb6, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91
  %138 = phi i64 [ %776, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91 ], [ %844, %block_419fb6 ]
  %139 = phi i64 [ %796, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91 ], [ %848, %block_419fb6 ]
  %140 = phi %struct.Memory* [ %778, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91 ], [ %778, %block_419fb6 ]
  %141 = add i64 %139, 28
  br label %block_419ff8

block_41a3d3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %142 = load i64, i64* %13, align 8
  %143 = add i64 %142, -40
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  %146 = inttoptr i64 %145 to i32*
  store i32 0, i32* %146
  %147 = add i64 %142, -24
  %148 = inttoptr i64 %147 to double*
  %149 = load double, double* %148
  store double %149, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %150 = add i64 %142, -136
  %151 = inttoptr i64 %150 to double*
  %152 = load double, double* %151
  store double %152, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %153 = add i64 %142, -232
  %154 = inttoptr i64 %153 to double*
  %155 = load double, double* %154
  store double %155, double* %61, align 1, !tbaa !1264
  store double 0.000000e+00, double* %912, align 1, !tbaa !1264
  %156 = add i64 %243, 48
  %157 = load i64, i64* %12, align 8, !tbaa !1240
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159
  %160 = load i64, i64* %903, align 8, !alias.scope !1272, !noalias !1275
  %161 = load i64, i64* %9, align 8, !alias.scope !1272, !noalias !1275
  %162 = load i64, i64* %908, align 8, !alias.scope !1272, !noalias !1275
  %163 = load i64, i64* %902, align 8, !alias.scope !1272, !noalias !1275
  %164 = load i64, i64* %901, align 8, !alias.scope !1272, !noalias !1275
  %165 = inttoptr i64 %157 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %157, 8
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %157, 16
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %157, 24
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %157, 32
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %157, 40
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %157, 48
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %157, 56
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %157, 64
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = add i64 %157, 72
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = inttoptr i64 %158 to i64*
  %195 = load i64, i64* %194
  store i64 %195, i64* %3, align 8, !alias.scope !1272, !noalias !1275
  store i64 %157, i64* %12, align 8, !alias.scope !1272, !noalias !1275
  %196 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3918), i64 %160, i64 %161, i64 %162, i64 %163, i64 %164, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184, i64 %187, i64 %190, i64 %193), !noalias !1272
  %197 = load i64, i64* %13, align 8
  %198 = add i64 %197, -328
  %199 = trunc i64 %196 to i32
  %200 = load i64, i64* %3, align 8
  %201 = add i64 %200, 6
  %202 = inttoptr i64 %198 to i32*
  store i32 %199, i32* %202
  br label %block_41a40e

block_419d48:                                     ; preds = %block_419d37
  %203 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %204 = add i32 %203, -1020
  %205 = icmp eq i32 %204, 0
  %206 = select i1 %205, i64 17, i64 216
  %207 = add i64 %2556, %206
  br i1 %205, label %block_419d59, label %block_419e20

block_41a388:                                     ; preds = %block_41a357
  %208 = add i64 %1329, -232
  %209 = inttoptr i64 %208 to double*
  %210 = load double, double* %209
  store double %210, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %211 = add i64 %1329, -240
  %212 = inttoptr i64 %211 to double*
  %213 = load double, double* %212
  store double %213, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %214 = add i64 %1362, 20
  store i64 %214, i64* %3, align 8
  %215 = fcmp uno double %213, %210
  br i1 %215, label %216, label %228

; <label>:216:                                    ; preds = %block_41a388
  %217 = fadd double %213, %210
  %218 = bitcast double %217 to i64
  %219 = and i64 %218, 9221120237041090560
  %220 = icmp eq i64 %219, 9218868437227405312
  %221 = and i64 %218, 2251799813685247
  %222 = icmp ne i64 %221, 0
  %223 = and i1 %220, %222
  br i1 %223, label %224, label %234

; <label>:224:                                    ; preds = %216
  %225 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %214, %struct.Memory* %1330) #14
  %226 = load i64, i64* %3, align 8
  %227 = load i8, i8* %26, align 1, !tbaa !1245
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:228:                                    ; preds = %block_41a388
  %229 = fcmp ogt double %213, %210
  br i1 %229, label %234, label %230

; <label>:230:                                    ; preds = %228
  %231 = fcmp olt double %213, %210
  br i1 %231, label %234, label %232

; <label>:232:                                    ; preds = %230
  %233 = fcmp oeq double %213, %210
  br i1 %233, label %234, label %236

; <label>:234:                                    ; preds = %232, %230, %228, %216
  %235 = phi i8 [ 0, %228 ], [ 1, %230 ], [ 0, %232 ], [ 1, %216 ]
  br label %236

; <label>:236:                                    ; preds = %234, %232
  %237 = phi i8 [ %235, %234 ], [ %1341, %232 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %236, %224
  %238 = phi i8 [ %227, %224 ], [ %237, %236 ]
  %239 = phi i64 [ %226, %224 ], [ %214, %236 ]
  %240 = phi %struct.Memory* [ %225, %224 ], [ %1330, %236 ]
  %241 = icmp ne i8 %238, 0
  %242 = select i1 %241, i64 55, i64 6
  %243 = add i64 %239, %242
  %244 = icmp eq i8 %238, 1
  br i1 %244, label %block_41a3d3, label %block_41a3a2

block_41a186:                                     ; preds = %block_41a045
  %245 = select i1 %1992, i64 44, i64 16
  %246 = add i64 %1970, %245
  br i1 %1992, label %block_41a1b2, label %block_41a196

block_419a39:                                     ; preds = %block_419972, %block_419956, %block_419948, %block_419964
  %247 = phi i64 [ %2470, %block_419972 ], [ %2005, %block_419956 ], [ %556, %block_419948 ], [ %525, %block_419964 ]
  %248 = add i32 %2461, -102
  %249 = icmp eq i32 %248, 0
  %250 = select i1 %249, i64 14, i64 241
  %251 = add i64 %247, %250
  br i1 %249, label %block_419a47, label %block_419b2a

block_419983:                                     ; preds = %block_419972
  %252 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3184) to double*)
  store double %252, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %253 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3192) to double*)
  store double %253, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %254 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3200) to double*)
  store double %254, double* %61, align 1, !tbaa !1264
  %255 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %255, align 1, !tbaa !1264
  %256 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3208) to double*)
  %257 = bitcast %union.VectorReg* %2451 to double*
  store double %256, double* %257, align 1, !tbaa !1264
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %259 = bitcast i64* %258 to double*
  store double 0.000000e+00, double* %259, align 1, !tbaa !1264
  %260 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3216) to double*)
  %261 = bitcast %union.VectorReg* %17 to double*
  store double %260, double* %261, align 1, !tbaa !1264
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %263 = bitcast i64* %262 to double*
  store double 0.000000e+00, double* %263, align 1, !tbaa !1264
  %264 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3224) to double*)
  %265 = bitcast %union.VectorReg* %2452 to double*
  store double %264, double* %265, align 1, !tbaa !1264
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %267 = bitcast i64* %266 to double*
  store double 0.000000e+00, double* %267, align 1, !tbaa !1264
  %268 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3232) to double*)
  %269 = bitcast %union.VectorReg* %18 to double*
  store double %268, double* %269, align 1, !tbaa !1264
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %271 = bitcast i64* %270 to double*
  store double 0.000000e+00, double* %271, align 1, !tbaa !1264
  %272 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3240) to double*)
  %273 = bitcast %union.VectorReg* %2453 to double*
  store double %272, double* %273, align 1, !tbaa !1264
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %275 = bitcast i64* %274 to double*
  store double 0.000000e+00, double* %275, align 1, !tbaa !1264
  %276 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3248) to double*)
  %277 = bitcast %union.VectorReg* %19 to double*
  store double %276, double* %277, align 1, !tbaa !1264
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %279 = bitcast i64* %278 to double*
  store double 0.000000e+00, double* %279, align 1, !tbaa !1264
  %280 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3256) to double*)
  %281 = bitcast %union.VectorReg* %2454 to double*
  store double %280, double* %281, align 1, !tbaa !1264
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %283 = bitcast i64* %282 to double*
  store double 0.000000e+00, double* %283, align 1, !tbaa !1264
  %284 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3264) to double*)
  %285 = bitcast %union.VectorReg* %20 to double*
  store double %284, double* %285, align 1, !tbaa !1264
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %287 = bitcast i64* %286 to double*
  store double 0.000000e+00, double* %287, align 1, !tbaa !1264
  %288 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %289 = bitcast %union.VectorReg* %2455 to double*
  store double %288, double* %289, align 1, !tbaa !1264
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %291 = bitcast i64* %290 to double*
  store double 0.000000e+00, double* %291, align 1, !tbaa !1264
  %292 = add i64 %69, -32
  %293 = inttoptr i64 %292 to i64*
  %294 = load i64, i64* %293
  %295 = inttoptr i64 %294 to i8*
  store i8 65, i8* %295
  %296 = add i64 %69, -248
  %297 = inttoptr i64 %296 to double*
  store double %288, double* %297
  %298 = inttoptr i64 %78 to double*
  store double %284, double* %298
  %299 = load i64, i64* %13, align 8
  %300 = add i64 %299, -72
  %301 = inttoptr i64 %300 to double*
  store double %280, double* %301
  %302 = add i64 %299, -64
  %303 = inttoptr i64 %302 to double*
  store double %276, double* %303
  %304 = add i64 %299, -56
  %305 = inttoptr i64 %304 to double*
  store double %272, double* %305
  %306 = add i64 %299, -48
  %307 = inttoptr i64 %306 to double*
  store double %268, double* %307
  %308 = add i64 %299, -128
  %309 = inttoptr i64 %308 to double*
  store double %264, double* %309
  %310 = add i64 %299, -120
  %311 = inttoptr i64 %310 to double*
  store double %260, double* %311
  %312 = add i64 %299, -112
  %313 = load double, double* %257, align 1
  %314 = inttoptr i64 %312 to double*
  store double %313, double* %314
  %315 = add i64 %299, -104
  %316 = load double, double* %61, align 1
  %317 = inttoptr i64 %315 to double*
  store double %316, double* %317
  %318 = add i64 %299, -96
  %319 = load double, double* %33, align 1
  %320 = inttoptr i64 %318 to double*
  store double %319, double* %320
  %321 = add i64 %299, -136
  %322 = add i64 %2470, 177
  %323 = load double, double* %51, align 1
  %324 = inttoptr i64 %321 to double*
  store double %323, double* %324
  br label %block_419e3e

block_419b6e:                                     ; preds = %block_419b5d
  %325 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3008) to double*)
  store double %325, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %326 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3016) to double*)
  store double %326, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %327 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3024) to double*)
  store double %327, double* %61, align 1, !tbaa !1264
  %328 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %328, align 1, !tbaa !1264
  %329 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3032) to double*)
  %330 = bitcast %union.VectorReg* %2451 to double*
  store double %329, double* %330, align 1, !tbaa !1264
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %332 = bitcast i64* %331 to double*
  store double 0.000000e+00, double* %332, align 1, !tbaa !1264
  %333 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3040) to double*)
  %334 = bitcast %union.VectorReg* %17 to double*
  store double %333, double* %334, align 1, !tbaa !1264
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %336 = bitcast i64* %335 to double*
  store double 0.000000e+00, double* %336, align 1, !tbaa !1264
  %337 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3048) to double*)
  %338 = bitcast %union.VectorReg* %2452 to double*
  store double %337, double* %338, align 1, !tbaa !1264
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %340 = bitcast i64* %339 to double*
  store double 0.000000e+00, double* %340, align 1, !tbaa !1264
  %341 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3056) to double*)
  %342 = bitcast %union.VectorReg* %18 to double*
  store double %341, double* %342, align 1, !tbaa !1264
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %344 = bitcast i64* %343 to double*
  store double 0.000000e+00, double* %344, align 1, !tbaa !1264
  %345 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3064) to double*)
  %346 = bitcast %union.VectorReg* %2453 to double*
  store double %345, double* %346, align 1, !tbaa !1264
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %348 = bitcast i64* %347 to double*
  store double 0.000000e+00, double* %348, align 1, !tbaa !1264
  %349 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3072) to double*)
  %350 = bitcast %union.VectorReg* %19 to double*
  store double %349, double* %350, align 1, !tbaa !1264
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %352 = bitcast i64* %351 to double*
  store double 0.000000e+00, double* %352, align 1, !tbaa !1264
  %353 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3080) to double*)
  %354 = bitcast %union.VectorReg* %2454 to double*
  store double %353, double* %354, align 1, !tbaa !1264
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %356 = bitcast i64* %355 to double*
  store double 0.000000e+00, double* %356, align 1, !tbaa !1264
  %357 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3088) to double*)
  %358 = bitcast %union.VectorReg* %20 to double*
  store double %357, double* %358, align 1, !tbaa !1264
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %360 = bitcast i64* %359 to double*
  store double 0.000000e+00, double* %360, align 1, !tbaa !1264
  %361 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %362 = bitcast %union.VectorReg* %2455 to double*
  store double %361, double* %362, align 1, !tbaa !1264
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %364 = bitcast i64* %363 to double*
  store double 0.000000e+00, double* %364, align 1, !tbaa !1264
  %365 = add i64 %69, -32
  %366 = inttoptr i64 %365 to i64*
  %367 = load i64, i64* %366
  %368 = inttoptr i64 %367 to i8*
  store i8 67, i8* %368
  %369 = add i64 %69, -248
  %370 = inttoptr i64 %369 to double*
  store double %361, double* %370
  %371 = inttoptr i64 %78 to double*
  store double %357, double* %371
  %372 = load i64, i64* %13, align 8
  %373 = add i64 %372, -72
  %374 = inttoptr i64 %373 to double*
  store double %353, double* %374
  %375 = add i64 %372, -64
  %376 = inttoptr i64 %375 to double*
  store double %349, double* %376
  %377 = add i64 %372, -56
  %378 = inttoptr i64 %377 to double*
  store double %345, double* %378
  %379 = add i64 %372, -48
  %380 = inttoptr i64 %379 to double*
  store double %341, double* %380
  %381 = add i64 %372, -128
  %382 = inttoptr i64 %381 to double*
  store double %337, double* %382
  %383 = add i64 %372, -120
  %384 = inttoptr i64 %383 to double*
  store double %333, double* %384
  %385 = add i64 %372, -112
  %386 = load double, double* %330, align 1
  %387 = inttoptr i64 %385 to double*
  store double %386, double* %387
  %388 = add i64 %372, -104
  %389 = load double, double* %61, align 1
  %390 = inttoptr i64 %388 to double*
  store double %389, double* %390
  %391 = add i64 %372, -96
  %392 = load double, double* %33, align 1
  %393 = inttoptr i64 %391 to double*
  store double %392, double* %393
  %394 = add i64 %372, -136
  %395 = load double, double* %51, align 1
  %396 = inttoptr i64 %394 to double*
  store double %395, double* %396
  %397 = add i64 %546, 185
  %398 = inttoptr i64 %394 to double*
  store double %395, double* %398
  br label %block_419e34

block_419d6a:                                     ; preds = %block_419d59
  %399 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2832) to double*)
  store double %399, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %400 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2840) to double*)
  store double %400, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %401 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2848) to double*)
  store double %401, double* %61, align 1, !tbaa !1264
  %402 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %402, align 1, !tbaa !1264
  %403 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2856) to double*)
  %404 = bitcast %union.VectorReg* %2451 to double*
  store double %403, double* %404, align 1, !tbaa !1264
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %406 = bitcast i64* %405 to double*
  store double 0.000000e+00, double* %406, align 1, !tbaa !1264
  %407 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2864) to double*)
  %408 = bitcast %union.VectorReg* %17 to double*
  store double %407, double* %408, align 1, !tbaa !1264
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %410 = bitcast i64* %409 to double*
  store double 0.000000e+00, double* %410, align 1, !tbaa !1264
  %411 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2872) to double*)
  %412 = bitcast %union.VectorReg* %2452 to double*
  store double %411, double* %412, align 1, !tbaa !1264
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %414 = bitcast i64* %413 to double*
  store double 0.000000e+00, double* %414, align 1, !tbaa !1264
  %415 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2880) to double*)
  %416 = bitcast %union.VectorReg* %18 to double*
  store double %415, double* %416, align 1, !tbaa !1264
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %418 = bitcast i64* %417 to double*
  store double 0.000000e+00, double* %418, align 1, !tbaa !1264
  %419 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2888) to double*)
  %420 = bitcast %union.VectorReg* %2453 to double*
  store double %419, double* %420, align 1, !tbaa !1264
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %422 = bitcast i64* %421 to double*
  store double 0.000000e+00, double* %422, align 1, !tbaa !1264
  %423 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2896) to double*)
  %424 = bitcast %union.VectorReg* %19 to double*
  store double %423, double* %424, align 1, !tbaa !1264
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %426 = bitcast i64* %425 to double*
  store double 0.000000e+00, double* %426, align 1, !tbaa !1264
  %427 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2904) to double*)
  %428 = bitcast %union.VectorReg* %2454 to double*
  store double %427, double* %428, align 1, !tbaa !1264
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %430 = bitcast i64* %429 to double*
  store double 0.000000e+00, double* %430, align 1, !tbaa !1264
  %431 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2912) to double*)
  %432 = bitcast %union.VectorReg* %20 to double*
  store double %431, double* %432, align 1, !tbaa !1264
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %434 = bitcast i64* %433 to double*
  store double 0.000000e+00, double* %434, align 1, !tbaa !1264
  %435 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  %436 = bitcast %union.VectorReg* %2455 to double*
  store double %435, double* %436, align 1, !tbaa !1264
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %438 = bitcast i64* %437 to double*
  store double 0.000000e+00, double* %438, align 1, !tbaa !1264
  %439 = add i64 %69, -32
  %440 = inttoptr i64 %439 to i64*
  %441 = load i64, i64* %440
  %442 = inttoptr i64 %441 to i8*
  store i8 69, i8* %442
  %443 = add i64 %69, -248
  %444 = inttoptr i64 %443 to double*
  store double %435, double* %444
  %445 = inttoptr i64 %78 to double*
  store double %431, double* %445
  %446 = load i64, i64* %13, align 8
  %447 = add i64 %446, -72
  %448 = inttoptr i64 %447 to double*
  store double %427, double* %448
  %449 = add i64 %446, -64
  %450 = inttoptr i64 %449 to double*
  store double %423, double* %450
  %451 = add i64 %446, -56
  %452 = inttoptr i64 %451 to double*
  store double %419, double* %452
  %453 = add i64 %446, -48
  %454 = inttoptr i64 %453 to double*
  store double %415, double* %454
  %455 = add i64 %446, -128
  %456 = inttoptr i64 %455 to double*
  store double %411, double* %456
  %457 = add i64 %446, -120
  %458 = inttoptr i64 %457 to double*
  store double %407, double* %458
  %459 = add i64 %446, -112
  %460 = load double, double* %404, align 1
  %461 = inttoptr i64 %459 to double*
  store double %460, double* %461
  %462 = add i64 %446, -104
  %463 = load double, double* %61, align 1
  %464 = inttoptr i64 %462 to double*
  store double %463, double* %464
  %465 = add i64 %446, -96
  %466 = load double, double* %33, align 1
  %467 = inttoptr i64 %465 to double*
  store double %466, double* %467
  %468 = add i64 %446, -136
  %469 = load double, double* %51, align 1
  %470 = inttoptr i64 %468 to double*
  store double %469, double* %470
  %471 = add i64 %551, 192
  br label %block_419e2f

block_41a367:                                     ; preds = %block_41a357
  %472 = add i64 %1329, -24
  %473 = inttoptr i64 %472 to double*
  %474 = load double, double* %473
  store double %474, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %475 = add i64 %1362, 22
  %476 = load i64, i64* %12, align 8, !tbaa !1240
  %477 = add i64 %476, -8
  %478 = inttoptr i64 %477 to i64*
  store i64 %475, i64* %478
  %479 = load i64, i64* %903, align 8, !alias.scope !1277, !noalias !1280
  %480 = load i64, i64* %9, align 8, !alias.scope !1277, !noalias !1280
  %481 = load i64, i64* %902, align 8, !alias.scope !1277, !noalias !1280
  %482 = load i64, i64* %901, align 8, !alias.scope !1277, !noalias !1280
  %483 = inttoptr i64 %476 to i64*
  %484 = load i64, i64* %483
  %485 = add i64 %476, 8
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %476, 16
  %489 = inttoptr i64 %488 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %476, 24
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %476, 32
  %495 = inttoptr i64 %494 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %476, 40
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %476, 48
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %476, 56
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %476, 64
  %507 = inttoptr i64 %506 to i64*
  %508 = load i64, i64* %507
  %509 = add i64 %476, 72
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = inttoptr i64 %477 to i64*
  %513 = load i64, i64* %512
  store i64 %513, i64* %3, align 8, !alias.scope !1277, !noalias !1280
  store i64 %476, i64* %12, align 8, !alias.scope !1277, !noalias !1280
  %514 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3858), i64 %479, i64 %480, i64 %1337, i64 %481, i64 %482, i64 %484, i64 %487, i64 %490, i64 %493, i64 %496, i64 %499, i64 %502, i64 %505, i64 %508, i64 %511), !noalias !1277
  %515 = load i64, i64* %13, align 8
  %516 = add i64 %515, -320
  %517 = trunc i64 %514 to i32
  %518 = load i64, i64* %3, align 8
  %519 = add i64 %518, 6
  %520 = inttoptr i64 %516 to i32*
  store i32 %517, i32* %520
  br label %block_41a40e

block_419964:                                     ; preds = %block_419956
  %521 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %522 = add i32 %521, -64
  %523 = icmp eq i32 %522, 0
  %524 = select i1 %523, i64 14, i64 213
  %525 = add i64 %2005, %524
  br i1 %523, label %block_419972, label %block_419a39

block_419793:                                     ; preds = %block_419785
  %526 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %527 = add i32 %526, -50
  %528 = icmp eq i32 %527, 0
  %529 = select i1 %528, i64 14, i64 196
  %530 = add i64 %932, %529
  br i1 %528, label %block_4197a1, label %block_419857

block_41a16d:                                     ; preds = %block_41a062, %block_41a0bb, %block_41a10f
  %531 = phi i64 [ %1696, %block_41a062 ], [ %1586, %block_41a0bb ], [ %1071, %block_41a10f ]
  %532 = phi i64 [ %1700, %block_41a062 ], [ %1591, %block_41a0bb ], [ %1075, %block_41a10f ]
  %533 = phi i64 [ 217, %block_41a062 ], [ 5, %block_41a0bb ], [ 5, %block_41a10f ]
  %534 = phi %struct.Memory* [ %1957, %block_41a062 ], [ %1288, %block_41a0bb ], [ %1288, %block_41a10f ]
  %535 = add i64 %532, %533
  %536 = add i64 %531, -252
  %537 = inttoptr i64 %536 to i32*
  %538 = load i32, i32* %537
  %539 = add i32 %538, 1
  %540 = inttoptr i64 %536 to i32*
  store i32 %539, i32* %540
  %541 = add i64 %535, -296
  br label %block_41a045

block_419b5d:                                     ; preds = %block_419b4c
  %542 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %543 = add i32 %542, -250
  %544 = icmp eq i32 %543, 0
  %545 = select i1 %544, i64 17, i64 207
  %546 = add i64 %1206, %545
  br i1 %544, label %block_419b6e, label %block_419c2c

block_419d59:                                     ; preds = %block_419d48
  %547 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %548 = add i32 %547, -300
  %549 = icmp eq i32 %548, 0
  %550 = select i1 %549, i64 17, i64 199
  %551 = add i64 %207, %550
  br i1 %549, label %block_419d6a, label %block_419e20

block_419948:                                     ; preds = %block_419873, %block_419857, %block_419865, %block_419881
  %552 = phi i64 [ %2098, %block_419873 ], [ %1750, %block_419857 ], [ %1596, %block_419865 ], [ %1327, %block_419881 ]
  %553 = add i32 %2461, -64
  %554 = icmp eq i32 %553, 0
  %555 = select i1 %554, i64 14, i64 241
  %556 = add i64 %552, %555
  br i1 %554, label %block_419956, label %block_419a39

block_4197a1:                                     ; preds = %block_419793
  %557 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3368) to double*)
  store double %557, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %558 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3376) to double*)
  store double %558, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %559 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3384) to double*)
  store double %559, double* %61, align 1, !tbaa !1264
  %560 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %560, align 1, !tbaa !1264
  %561 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3392) to double*)
  %562 = bitcast %union.VectorReg* %2451 to double*
  store double %561, double* %562, align 1, !tbaa !1264
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %564 = bitcast i64* %563 to double*
  store double 0.000000e+00, double* %564, align 1, !tbaa !1264
  %565 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3400) to double*)
  %566 = bitcast %union.VectorReg* %17 to double*
  store double %565, double* %566, align 1, !tbaa !1264
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %568 = bitcast i64* %567 to double*
  store double 0.000000e+00, double* %568, align 1, !tbaa !1264
  %569 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3408) to double*)
  %570 = bitcast %union.VectorReg* %2452 to double*
  store double %569, double* %570, align 1, !tbaa !1264
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %572 = bitcast i64* %571 to double*
  store double 0.000000e+00, double* %572, align 1, !tbaa !1264
  %573 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3416) to double*)
  %574 = bitcast %union.VectorReg* %18 to double*
  store double %573, double* %574, align 1, !tbaa !1264
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %576 = bitcast i64* %575 to double*
  store double 0.000000e+00, double* %576, align 1, !tbaa !1264
  %577 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3424) to double*)
  %578 = bitcast %union.VectorReg* %2453 to double*
  store double %577, double* %578, align 1, !tbaa !1264
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %580 = bitcast i64* %579 to double*
  store double 0.000000e+00, double* %580, align 1, !tbaa !1264
  %581 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3432) to double*)
  %582 = bitcast %union.VectorReg* %19 to double*
  store double %581, double* %582, align 1, !tbaa !1264
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %584 = bitcast i64* %583 to double*
  store double 0.000000e+00, double* %584, align 1, !tbaa !1264
  %585 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3440) to double*)
  %586 = bitcast %union.VectorReg* %2454 to double*
  store double %585, double* %586, align 1, !tbaa !1264
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %588 = bitcast i64* %587 to double*
  store double 0.000000e+00, double* %588, align 1, !tbaa !1264
  %589 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3448) to double*)
  %590 = bitcast %union.VectorReg* %20 to double*
  store double %589, double* %590, align 1, !tbaa !1264
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %592 = bitcast i64* %591 to double*
  store double 0.000000e+00, double* %592, align 1, !tbaa !1264
  %593 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  %594 = bitcast %union.VectorReg* %2455 to double*
  store double %593, double* %594, align 1, !tbaa !1264
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %596 = bitcast i64* %595 to double*
  store double 0.000000e+00, double* %596, align 1, !tbaa !1264
  %597 = add i64 %69, -32
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = inttoptr i64 %599 to i8*
  store i8 83, i8* %600
  %601 = add i64 %69, -248
  %602 = inttoptr i64 %601 to double*
  store double %593, double* %602
  %603 = inttoptr i64 %78 to double*
  store double %589, double* %603
  %604 = load i64, i64* %13, align 8
  %605 = add i64 %604, -72
  %606 = inttoptr i64 %605 to double*
  store double %585, double* %606
  %607 = add i64 %604, -64
  %608 = inttoptr i64 %607 to double*
  store double %581, double* %608
  %609 = add i64 %604, -56
  %610 = inttoptr i64 %609 to double*
  store double %577, double* %610
  %611 = add i64 %604, -48
  %612 = inttoptr i64 %611 to double*
  store double %573, double* %612
  %613 = add i64 %604, -128
  %614 = inttoptr i64 %613 to double*
  store double %569, double* %614
  %615 = add i64 %604, -120
  %616 = inttoptr i64 %615 to double*
  store double %565, double* %616
  %617 = add i64 %604, -112
  %618 = load double, double* %562, align 1
  %619 = inttoptr i64 %617 to double*
  store double %618, double* %619
  %620 = add i64 %604, -104
  %621 = load double, double* %61, align 1
  %622 = inttoptr i64 %620 to double*
  store double %621, double* %622
  %623 = add i64 %604, -96
  %624 = load double, double* %33, align 1
  %625 = inttoptr i64 %623 to double*
  store double %624, double* %625
  %626 = add i64 %604, -136
  %627 = add i64 %530, 177
  %628 = load double, double* %51, align 1
  %629 = inttoptr i64 %626 to double*
  store double %628, double* %629
  br label %block_419e48

block_419f35:                                     ; preds = %block_419efd
  %630 = load i64, i64* %13, align 8
  %631 = add i64 %630, -32
  %632 = inttoptr i64 %631 to i64*
  %633 = load i64, i64* %632
  %634 = inttoptr i64 %633 to i8*
  %635 = load i8, i8* %634
  %636 = sext i8 %635 to i64
  %637 = and i64 %636, 4294967295
  store i64 %637, i64* %10, align 8, !tbaa !1240
  %638 = add i64 %1144, 24
  %639 = load i64, i64* %12, align 8, !tbaa !1240
  %640 = add i64 %639, -8
  %641 = inttoptr i64 %640 to i64*
  store i64 %638, i64* %641
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %647 = load i64, i64* %9, align 8, !alias.scope !1282, !noalias !1285
  %648 = load i64, i64* %645, align 8, !alias.scope !1282, !noalias !1285
  %649 = load i64, i64* %646, align 8, !alias.scope !1282, !noalias !1285
  %650 = inttoptr i64 %639 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %639, 8
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = add i64 %639, 16
  %656 = inttoptr i64 %655 to i64*
  %657 = load i64, i64* %656
  %658 = add i64 %639, 24
  %659 = inttoptr i64 %658 to i64*
  %660 = load i64, i64* %659
  %661 = add i64 %639, 32
  %662 = inttoptr i64 %661 to i64*
  %663 = load i64, i64* %662
  %664 = add i64 %639, 40
  %665 = inttoptr i64 %664 to i64*
  %666 = load i64, i64* %665
  %667 = add i64 %639, 48
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668
  %670 = add i64 %639, 56
  %671 = inttoptr i64 %670 to i64*
  %672 = load i64, i64* %671
  %673 = add i64 %639, 64
  %674 = inttoptr i64 %673 to i64*
  %675 = load i64, i64* %674
  %676 = add i64 %639, 72
  %677 = inttoptr i64 %676 to i64*
  %678 = load i64, i64* %677
  %679 = inttoptr i64 %640 to i64*
  %680 = load i64, i64* %679
  store i64 %680, i64* %3, align 8, !alias.scope !1282, !noalias !1285
  store i64 %639, i64* %12, align 8, !alias.scope !1282, !noalias !1285
  %681 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3472), i64 %637, i64 %647, i64 %1119, i64 %648, i64 %649, i64 %651, i64 %654, i64 %657, i64 %660, i64 %663, i64 %666, i64 %669, i64 %672, i64 %675, i64 %678), !noalias !1282
  %682 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3517), i64* %11, align 8, !tbaa !1240
  %683 = load i64, i64* %13, align 8
  %684 = add i64 %683, -240
  %685 = inttoptr i64 %684 to double*
  %686 = load double, double* %685
  store double %686, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %687 = add i64 %683, -256
  %688 = trunc i64 %681 to i32
  %689 = inttoptr i64 %687 to i32*
  store i32 %688, i32* %689
  %690 = add i64 %682, 31
  %691 = load i64, i64* %12, align 8, !tbaa !1240
  %692 = add i64 %691, -8
  %693 = inttoptr i64 %692 to i64*
  store i64 %690, i64* %693
  %694 = load i64, i64* %644, align 8, !alias.scope !1287, !noalias !1290
  %695 = load i64, i64* %9, align 8, !alias.scope !1287, !noalias !1290
  %696 = load i64, i64* %643, align 8, !alias.scope !1287, !noalias !1290
  %697 = load i64, i64* %645, align 8, !alias.scope !1287, !noalias !1290
  %698 = load i64, i64* %646, align 8, !alias.scope !1287, !noalias !1290
  %699 = inttoptr i64 %691 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %691, 8
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %691, 16
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %691, 24
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %691, 32
  %711 = inttoptr i64 %710 to i64*
  %712 = load i64, i64* %711
  %713 = add i64 %691, 40
  %714 = inttoptr i64 %713 to i64*
  %715 = load i64, i64* %714
  %716 = add i64 %691, 48
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = add i64 %691, 56
  %720 = inttoptr i64 %719 to i64*
  %721 = load i64, i64* %720
  %722 = add i64 %691, 64
  %723 = inttoptr i64 %722 to i64*
  %724 = load i64, i64* %723
  %725 = add i64 %691, 72
  %726 = inttoptr i64 %725 to i64*
  %727 = load i64, i64* %726
  %728 = inttoptr i64 %692 to i64*
  %729 = load i64, i64* %728
  store i64 %729, i64* %3, align 8, !alias.scope !1287, !noalias !1290
  store i64 %691, i64* %12, align 8, !alias.scope !1287, !noalias !1290
  %730 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3517), i64 %694, i64 %695, i64 %696, i64 %697, i64 %698, i64 %700, i64 %703, i64 %706, i64 %709, i64 %712, i64 %715, i64 %718, i64 %721, i64 %724, i64 %727), !noalias !1287
  store i64 %730, i64* %642, align 8, !alias.scope !1287, !noalias !1290
  %731 = load i64, i64* %3, align 8
  %732 = load double, double* bitcast (%dt_type* @dt to double*)
  %733 = load i64, i64* %13, align 8
  %734 = add i64 %733, -248
  %735 = inttoptr i64 %734 to double*
  %736 = load double, double* %735
  %737 = fsub double %732, %736
  %738 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3456) to float*)
  %739 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3460) to float*)
  store float %738, float* %1933, align 1, !tbaa !1292
  store float %739, float* %1935, align 1, !tbaa !1292
  %740 = bitcast double %737 to i64
  %741 = load i64, i64* %1939, align 1
  %742 = and i64 %741, %740
  %743 = trunc i64 %742 to i32
  %744 = lshr i64 %742, 32
  %745 = trunc i64 %744 to i32
  store i32 %743, i32* %1940, align 1, !tbaa !1266
  store i32 %745, i32* %1942, align 1, !tbaa !1266
  store i32 0, i32* %1943, align 1, !tbaa !1266
  store i32 0, i32* %1945, align 1, !tbaa !1266
  %746 = add i64 %733, -240
  %747 = inttoptr i64 %746 to double*
  %748 = load double, double* %747
  store double %748, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %749 = add i64 %731, 40
  store i64 %749, i64* %3, align 8
  %750 = load double, double* %51, align 1
  %751 = fcmp uno double %748, %750
  %752 = trunc i64 %730 to i32
  br i1 %751, label %753, label %766

; <label>:753:                                    ; preds = %block_419f35
  %754 = fadd double %748, %750
  %755 = bitcast double %754 to i64
  %756 = and i64 %755, 9221120237041090560
  %757 = icmp eq i64 %756, 9218868437227405312
  %758 = and i64 %755, 2251799813685247
  %759 = icmp ne i64 %758, 0
  %760 = and i1 %757, %759
  br i1 %760, label %761, label %772

; <label>:761:                                    ; preds = %753
  %762 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %749, %struct.Memory* %1758) #14
  %763 = load i64, i64* %3, align 8
  %764 = load i64, i64* %13, align 8
  %765 = load i32, i32* %6, align 4
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91

; <label>:766:                                    ; preds = %block_419f35
  %767 = fcmp ogt double %748, %750
  br i1 %767, label %772, label %768

; <label>:768:                                    ; preds = %766
  %769 = fcmp olt double %748, %750
  br i1 %769, label %772, label %770

; <label>:770:                                    ; preds = %768
  %771 = fcmp oeq double %748, %750
  br i1 %771, label %772, label %774

; <label>:772:                                    ; preds = %770, %768, %766, %753
  %773 = phi i8 [ 0, %766 ], [ 1, %768 ], [ 0, %770 ], [ 1, %753 ]
  store i8 %773, i8* %26, align 1, !tbaa !1244
  br label %774

; <label>:774:                                    ; preds = %772, %770
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91: ; preds = %774, %761
  %775 = phi i32 [ %765, %761 ], [ %752, %774 ]
  %776 = phi i64 [ %764, %761 ], [ %733, %774 ]
  %777 = phi i64 [ %763, %761 ], [ %749, %774 ]
  %778 = phi %struct.Memory* [ %762, %761 ], [ %1758, %774 ]
  %779 = load i8, i8* %26, align 1, !tbaa !1245
  %780 = icmp eq i8 %779, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %2450, align 1, !tbaa !1244
  %782 = zext i1 %780 to i64
  store i64 %782, i64* %10, align 8, !tbaa !1240
  %783 = add i64 %776, -40
  %784 = inttoptr i64 %783 to i64*
  %785 = load i64, i64* %784
  %786 = zext i1 %780 to i32
  %787 = inttoptr i64 %785 to i32*
  store i32 %786, i32* %787
  %788 = inttoptr i64 %783 to i64*
  %789 = load i64, i64* %788
  %790 = inttoptr i64 %789 to i32*
  %791 = load i32, i32* %790
  %792 = icmp eq i32 %791, 0
  %793 = add i64 %776, -260
  %794 = inttoptr i64 %793 to i32*
  store i32 %775, i32* %794
  %795 = select i1 %792, i64 34, i64 72
  %796 = add i64 %777, %795
  br i1 %792, label %block_419fb6, label %block_419fdc

block_419fb6:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit91
  %797 = add i64 %776, -32
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = inttoptr i64 %799 to i8*
  store i8 85, i8* %800
  %801 = add i64 %776, -248
  %802 = inttoptr i64 %801 to double*
  %803 = load double, double* %802
  store double %803, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %804 = add i64 %796, 32
  %805 = load i64, i64* %12, align 8, !tbaa !1240
  %806 = add i64 %805, -8
  %807 = inttoptr i64 %806 to i64*
  store i64 %804, i64* %807
  %808 = load i64, i64* %9, align 8, !alias.scope !1294, !noalias !1297
  %809 = load i64, i64* %643, align 8, !alias.scope !1294, !noalias !1297
  %810 = load i64, i64* %645, align 8, !alias.scope !1294, !noalias !1297
  %811 = load i64, i64* %646, align 8, !alias.scope !1294, !noalias !1297
  %812 = inttoptr i64 %805 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %805, 8
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %805, 16
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %805, 24
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %805, 32
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %805, 40
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  %829 = add i64 %805, 48
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = add i64 %805, 56
  %833 = inttoptr i64 %832 to i64*
  %834 = load i64, i64* %833
  %835 = add i64 %805, 64
  %836 = inttoptr i64 %835 to i64*
  %837 = load i64, i64* %836
  %838 = add i64 %805, 72
  %839 = inttoptr i64 %838 to i64*
  %840 = load i64, i64* %839
  %841 = inttoptr i64 %806 to i64*
  %842 = load i64, i64* %841
  store i64 %842, i64* %3, align 8, !alias.scope !1294, !noalias !1297
  store i64 %805, i64* %12, align 8, !alias.scope !1294, !noalias !1297
  %843 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3558), i64 %782, i64 %808, i64 %809, i64 %810, i64 %811, i64 %813, i64 %816, i64 %819, i64 %822, i64 %825, i64 %828, i64 %831, i64 %834, i64 %837, i64 %840), !noalias !1294
  %844 = load i64, i64* %13, align 8
  %845 = add i64 %844, -264
  %846 = trunc i64 %843 to i32
  %847 = load i64, i64* %3, align 8
  %848 = add i64 %847, 6
  %849 = inttoptr i64 %845 to i32*
  store i32 %846, i32* %849
  br label %block_419fdc

block_419b2a:                                     ; preds = %block_419a47, %block_419a55, %block_419a63, %block_419a39
  %850 = phi i64 [ %2199, %block_419a47 ], [ %1755, %block_419a55 ], [ %1647, %block_419a63 ], [ %251, %block_419a39 ]
  %851 = add i32 %2461, -162
  %852 = icmp eq i32 %851, 0
  %853 = select i1 %852, i64 17, i64 258
  %854 = add i64 %850, %853
  br i1 %852, label %block_419b3b, label %block_419c2c

block_41a324:                                     ; preds = %block_41a314
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3806), i64* %11, align 8, !tbaa !1240
  %855 = add i64 %1005, 17
  %856 = load i64, i64* %12, align 8, !tbaa !1240
  %857 = add i64 %856, -8
  %858 = inttoptr i64 %857 to i64*
  store i64 %855, i64* %858
  %859 = load i64, i64* %903, align 8, !alias.scope !1299, !noalias !1302
  %860 = load i64, i64* %9, align 8, !alias.scope !1299, !noalias !1302
  %861 = load i64, i64* %902, align 8, !alias.scope !1299, !noalias !1302
  %862 = load i64, i64* %901, align 8, !alias.scope !1299, !noalias !1302
  %863 = inttoptr i64 %856 to i64*
  %864 = load i64, i64* %863
  %865 = add i64 %856, 8
  %866 = inttoptr i64 %865 to i64*
  %867 = load i64, i64* %866
  %868 = add i64 %856, 16
  %869 = inttoptr i64 %868 to i64*
  %870 = load i64, i64* %869
  %871 = add i64 %856, 24
  %872 = inttoptr i64 %871 to i64*
  %873 = load i64, i64* %872
  %874 = add i64 %856, 32
  %875 = inttoptr i64 %874 to i64*
  %876 = load i64, i64* %875
  %877 = add i64 %856, 40
  %878 = inttoptr i64 %877 to i64*
  %879 = load i64, i64* %878
  %880 = add i64 %856, 48
  %881 = inttoptr i64 %880 to i64*
  %882 = load i64, i64* %881
  %883 = add i64 %856, 56
  %884 = inttoptr i64 %883 to i64*
  %885 = load i64, i64* %884
  %886 = add i64 %856, 64
  %887 = inttoptr i64 %886 to i64*
  %888 = load i64, i64* %887
  %889 = add i64 %856, 72
  %890 = inttoptr i64 %889 to i64*
  %891 = load i64, i64* %890
  %892 = inttoptr i64 %857 to i64*
  %893 = load i64, i64* %892
  store i64 %893, i64* %3, align 8, !alias.scope !1299, !noalias !1302
  store i64 %856, i64* %12, align 8, !alias.scope !1299, !noalias !1302
  %894 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3806), i64 %859, i64 %860, i64 %1385, i64 %861, i64 %862, i64 %864, i64 %867, i64 %870, i64 %873, i64 %876, i64 %879, i64 %882, i64 %885, i64 %888, i64 %891), !noalias !1299
  %895 = load i64, i64* %13, align 8
  %896 = add i64 %895, -312
  %897 = trunc i64 %894 to i32
  %898 = load i64, i64* %3, align 8
  %899 = inttoptr i64 %896 to i32*
  store i32 %897, i32* %899
  %900 = add i64 %898, 34
  br label %block_41a357

block_41a03b:                                     ; preds = %block_41a008, %block_41a024
  %901 = phi i64* [ %2564, %block_41a008 ], [ %2301, %block_41a024 ]
  %902 = phi i64* [ %2563, %block_41a008 ], [ %2300, %block_41a024 ]
  %903 = phi i64* [ %2562, %block_41a008 ], [ %2299, %block_41a024 ]
  %904 = phi i64* [ %2561, %block_41a008 ], [ %2298, %block_41a024 ]
  %905 = phi i64 [ %2606, %block_41a008 ], [ %2342, %block_41a024 ]
  %906 = phi i64 [ %2601, %block_41a008 ], [ %2338, %block_41a024 ]
  %907 = phi %struct.Memory* [ %1079, %block_41a008 ], [ %1079, %block_41a024 ]
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %909 = add i64 %906, -252
  %910 = add i64 %905, 10
  %911 = inttoptr i64 %909 to i32*
  store i32 0, i32* %911
  %912 = bitcast i64* %37 to double*
  br label %block_41a045

block_419723:                                     ; preds = %block_419716
  %913 = sext i32 %992 to i64
  %914 = shl nsw i64 %913, 3
  %915 = add i64 %78, %914
  %916 = inttoptr i64 %915 to double*
  store double %1003, double* %916
  %917 = inttoptr i64 %74 to i32*
  %918 = load i32, i32* %917
  %919 = sext i32 %918 to i64
  %920 = shl nsw i64 %919, 3
  %921 = add i64 %79, %920
  %922 = inttoptr i64 %921 to double*
  store double %1003, double* %922
  %923 = inttoptr i64 %74 to i32*
  %924 = load i32, i32* %923
  %925 = add i32 %924, 1
  %926 = inttoptr i64 %74 to i32*
  store i32 %925, i32* %926
  %927 = add i64 %1002, -13
  br label %block_419716

block_419785:                                     ; preds = %block_419777
  %928 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %929 = add i32 %928, -12
  %930 = icmp eq i32 %929, 0
  %931 = select i1 %930, i64 14, i64 210
  %932 = add i64 %983, %931
  br i1 %930, label %block_419793, label %block_419857

block_41a1b2:                                     ; preds = %block_41a186
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3776), i64* %11, align 8, !tbaa !1240
  %933 = add i64 %246, 17
  %934 = load i64, i64* %12, align 8, !tbaa !1240
  %935 = add i64 %934, -8
  %936 = inttoptr i64 %935 to i64*
  store i64 %933, i64* %936
  %937 = load i64, i64* %903, align 8, !alias.scope !1304, !noalias !1307
  %938 = load i64, i64* %9, align 8, !alias.scope !1304, !noalias !1307
  %939 = load i64, i64* %902, align 8, !alias.scope !1304, !noalias !1307
  %940 = load i64, i64* %901, align 8, !alias.scope !1304, !noalias !1307
  %941 = inttoptr i64 %934 to i64*
  %942 = load i64, i64* %941
  %943 = add i64 %934, 8
  %944 = inttoptr i64 %943 to i64*
  %945 = load i64, i64* %944
  %946 = add i64 %934, 16
  %947 = inttoptr i64 %946 to i64*
  %948 = load i64, i64* %947
  %949 = add i64 %934, 24
  %950 = inttoptr i64 %949 to i64*
  %951 = load i64, i64* %950
  %952 = add i64 %934, 32
  %953 = inttoptr i64 %952 to i64*
  %954 = load i64, i64* %953
  %955 = add i64 %934, 40
  %956 = inttoptr i64 %955 to i64*
  %957 = load i64, i64* %956
  %958 = add i64 %934, 48
  %959 = inttoptr i64 %958 to i64*
  %960 = load i64, i64* %959
  %961 = add i64 %934, 56
  %962 = inttoptr i64 %961 to i64*
  %963 = load i64, i64* %962
  %964 = add i64 %934, 64
  %965 = inttoptr i64 %964 to i64*
  %966 = load i64, i64* %965
  %967 = add i64 %934, 72
  %968 = inttoptr i64 %967 to i64*
  %969 = load i64, i64* %968
  %970 = inttoptr i64 %935 to i64*
  %971 = load i64, i64* %970
  store i64 %971, i64* %3, align 8, !alias.scope !1304, !noalias !1307
  store i64 %934, i64* %12, align 8, !alias.scope !1304, !noalias !1307
  %972 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3776), i64 %937, i64 %938, i64 %1977, i64 %939, i64 %940, i64 %942, i64 %945, i64 %948, i64 %951, i64 %954, i64 %957, i64 %960, i64 %963, i64 %966, i64 %969), !noalias !1304
  %973 = load i64, i64* %13, align 8
  %974 = add i64 %973, -296
  %975 = trunc i64 %972 to i32
  %976 = load i64, i64* %3, align 8
  %977 = add i64 %976, 6
  %978 = inttoptr i64 %974 to i32*
  store i32 %975, i32* %978
  br label %block_41a1c9

block_419777:                                     ; preds = %block_419759
  %979 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %980 = add i32 %979, -12
  %981 = icmp eq i32 %980, 0
  %982 = select i1 %981, i64 14, i64 224
  %983 = add i64 %2465, %982
  br i1 %981, label %block_419785, label %block_419857

block_419d26:                                     ; preds = %block_419c2c, %block_419c5f, %block_419c3d, %block_419c4e
  %984 = phi i64 [ %2204, %block_419c2c ], [ %2108, %block_419c5f ], [ %2103, %block_419c3d ], [ %1858, %block_419c4e ]
  %985 = add i32 %2461, -1020
  %986 = icmp eq i32 %985, 0
  %987 = select i1 %986, i64 17, i64 250
  %988 = add i64 %984, %987
  br i1 %986, label %block_419d37, label %block_419e20

block_419716:                                     ; preds = %block_419723, %block_4196c0
  %989 = phi i64 [ %75, %block_4196c0 ], [ %927, %block_419723 ]
  %990 = phi %struct.Memory* [ %2, %block_4196c0 ], [ %990, %block_419723 ]
  %991 = inttoptr i64 %74 to i32*
  %992 = load i32, i32* %991
  %993 = add i32 %992, -5
  %994 = lshr i32 %993, 31
  %995 = lshr i32 %992, 31
  %996 = xor i32 %994, %995
  %997 = add nuw nsw i32 %996, %995
  %998 = icmp eq i32 %997, 2
  %999 = icmp ne i32 %994, 0
  %1000 = xor i1 %999, %998
  %1001 = select i1 %1000, i64 13, i64 67
  %1002 = add i64 %989, %1001
  %1003 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  br i1 %1000, label %block_419723, label %block_419759

block_41a314:                                     ; preds = %block_41a1d3
  %1004 = select i1 %1400, i64 44, i64 16
  %1005 = add i64 %1378, %1004
  br i1 %1400, label %block_41a340, label %block_41a324

block_41a10f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit146
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3724), i64* %11, align 8, !tbaa !1240
  %1006 = load i64, i64* %13, align 8
  %1007 = add i64 %1006, -40
  %1008 = inttoptr i64 %1007 to i64*
  %1009 = load i64, i64* %1008
  %1010 = inttoptr i64 %1009 to i32*
  store i32 0, i32* %1010
  %1011 = add i64 %1006, -252
  %1012 = inttoptr i64 %1011 to i32*
  %1013 = load i32, i32* %1012
  %1014 = add i32 %1013, 1
  %1015 = zext i32 %1014 to i64
  %1016 = add i64 %1006, -8
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = sext i32 %1013 to i64
  store i64 %1019, i64* %9, align 8, !tbaa !1240
  %1020 = shl nsw i64 %1019, 3
  %1021 = add i64 %1020, %1018
  %1022 = inttoptr i64 %1021 to double*
  %1023 = load double, double* %1022
  store double %1023, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1024 = add i64 %1006, -80
  %1025 = add i64 %1024, %1020
  %1026 = inttoptr i64 %1025 to double*
  %1027 = load double, double* %1026
  store double %1027, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1028 = add i64 %1006, -176
  %1029 = add i64 %1028, %1020
  %1030 = inttoptr i64 %1029 to double*
  %1031 = load double, double* %1030
  store double %1031, double* %61, align 1, !tbaa !1264
  store double 0.000000e+00, double* %912, align 1, !tbaa !1264
  store i64 %1015, i64* %10, align 8, !tbaa !1240
  %1032 = add i64 %1291, 83
  %1033 = load i64, i64* %12, align 8, !tbaa !1240
  %1034 = add i64 %1033, -8
  %1035 = inttoptr i64 %1034 to i64*
  store i64 %1032, i64* %1035
  %1036 = load i64, i64* %11, align 8, !alias.scope !1309, !noalias !1312
  %1037 = load i64, i64* %902, align 8, !alias.scope !1309, !noalias !1312
  %1038 = load i64, i64* %901, align 8, !alias.scope !1309, !noalias !1312
  %1039 = inttoptr i64 %1033 to i64*
  %1040 = load i64, i64* %1039
  %1041 = add i64 %1033, 8
  %1042 = inttoptr i64 %1041 to i64*
  %1043 = load i64, i64* %1042
  %1044 = add i64 %1033, 16
  %1045 = inttoptr i64 %1044 to i64*
  %1046 = load i64, i64* %1045
  %1047 = add i64 %1033, 24
  %1048 = inttoptr i64 %1047 to i64*
  %1049 = load i64, i64* %1048
  %1050 = add i64 %1033, 32
  %1051 = inttoptr i64 %1050 to i64*
  %1052 = load i64, i64* %1051
  %1053 = add i64 %1033, 40
  %1054 = inttoptr i64 %1053 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1033, 48
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  %1059 = add i64 %1033, 56
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  %1062 = add i64 %1033, 64
  %1063 = inttoptr i64 %1062 to i64*
  %1064 = load i64, i64* %1063
  %1065 = add i64 %1033, 72
  %1066 = inttoptr i64 %1065 to i64*
  %1067 = load i64, i64* %1066
  %1068 = inttoptr i64 %1034 to i64*
  %1069 = load i64, i64* %1068
  store i64 %1069, i64* %3, align 8, !alias.scope !1309, !noalias !1312
  store i64 %1033, i64* %12, align 8, !alias.scope !1309, !noalias !1312
  %1070 = tail call i64 @printf(i64 %1036, i64 %1015, i64 %1019, i64 %1015, i64 %1037, i64 %1038, i64 %1040, i64 %1043, i64 %1046, i64 %1049, i64 %1052, i64 %1055, i64 %1058, i64 %1061, i64 %1064, i64 %1067), !noalias !1309
  %1071 = load i64, i64* %13, align 8
  %1072 = add i64 %1071, -288
  %1073 = trunc i64 %1070 to i32
  %1074 = load i64, i64* %3, align 8
  %1075 = add i64 %1074, 6
  %1076 = inttoptr i64 %1072 to i32*
  store i32 %1073, i32* %1076
  br label %block_41a16d

block_419ff8:                                     ; preds = %block_419fe1, %block_419fdc
  %1077 = phi i64 [ %2252, %block_419fe1 ], [ %141, %block_419fdc ]
  %1078 = phi i64 [ %2248, %block_419fe1 ], [ %138, %block_419fdc ]
  %1079 = phi %struct.Memory* [ %1758, %block_419fe1 ], [ %140, %block_419fdc ]
  %1080 = add i64 %1078, -32
  %1081 = inttoptr i64 %1080 to i64*
  %1082 = load i64, i64* %1081
  %1083 = inttoptr i64 %1082 to i8*
  %1084 = load i8, i8* %1083
  %1085 = sext i8 %1084 to i64
  %1086 = and i64 %1085, 4294967295
  %1087 = sext i8 %1084 to i32
  %1088 = add nsw i32 %1087, -85
  %1089 = icmp eq i32 %1088, 0
  %1090 = select i1 %1089, i64 44, i64 16
  %1091 = add i64 %1077, %1090
  br i1 %1089, label %block_41a024, label %block_41a008

block_419efd:                                     ; preds = %block_419e52
  %1092 = add i64 %1757, -24
  %1093 = inttoptr i64 %1092 to double*
  %1094 = load double, double* %1093
  %1095 = add i64 %1757, -136
  %1096 = inttoptr i64 %1095 to double*
  %1097 = load double, double* %1096
  %1098 = fsub double %1094, %1097
  %1099 = fdiv double %1098, %1097
  %1100 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3456) to float*)
  %1101 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3460) to float*)
  %1102 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3464) to float*)
  %1103 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3468) to float*)
  store float %1100, float* %1933, align 1, !tbaa !1292
  store float %1101, float* %1935, align 1, !tbaa !1292
  store float %1102, float* %1936, align 1, !tbaa !1292
  store float %1103, float* %1938, align 1, !tbaa !1292
  %1104 = bitcast double %1099 to i64
  %1105 = load i64, i64* %1939, align 1
  %1106 = and i64 %1105, %1104
  %1107 = trunc i64 %1106 to i32
  %1108 = lshr i64 %1106, 32
  %1109 = trunc i64 %1108 to i32
  store i32 %1107, i32* %1940, align 1, !tbaa !1266
  store i32 %1109, i32* %1942, align 1, !tbaa !1266
  store i32 0, i32* %1943, align 1, !tbaa !1266
  store i32 0, i32* %1945, align 1, !tbaa !1266
  %1110 = add i64 %1757, -232
  %1111 = load double, double* %51, align 1
  %1112 = inttoptr i64 %1110 to double*
  store double %1111, double* %1112
  %1113 = add i64 %1757, -32
  %1114 = inttoptr i64 %1113 to i64*
  %1115 = load i64, i64* %1114
  %1116 = inttoptr i64 %1115 to i8*
  %1117 = load i8, i8* %1116
  %1118 = sext i8 %1117 to i64
  %1119 = and i64 %1118, 4294967295
  store i64 %1119, i64* %8, align 8, !tbaa !1240
  %1120 = sext i8 %1117 to i32
  %1121 = add nsw i32 %1120, -85
  %1122 = icmp ult i8 %1117, 85
  %1123 = zext i1 %1122 to i8
  store i8 %1123, i8* %26, align 1, !tbaa !1245
  %1124 = and i32 %1121, 255
  %1125 = tail call i32 @llvm.ctpop.i32(i32 %1124) #11
  %1126 = trunc i32 %1125 to i8
  %1127 = and i8 %1126, 1
  %1128 = xor i8 %1127, 1
  store i8 %1128, i8* %27, align 1, !tbaa !1259
  %1129 = xor i32 %1120, 16
  %1130 = xor i32 %1129, %1121
  %1131 = lshr i32 %1130, 4
  %1132 = trunc i32 %1131 to i8
  %1133 = and i8 %1132, 1
  store i8 %1133, i8* %28, align 1, !tbaa !1263
  %1134 = icmp eq i32 %1121, 0
  %1135 = zext i1 %1134 to i8
  store i8 %1135, i8* %29, align 1, !tbaa !1260
  %1136 = lshr i32 %1121, 31
  %1137 = trunc i32 %1136 to i8
  store i8 %1137, i8* %30, align 1, !tbaa !1261
  %1138 = lshr i32 %1120, 31
  %1139 = xor i32 %1136, %1138
  %1140 = add nuw nsw i32 %1139, %1138
  %1141 = icmp eq i32 %1140, 2
  %1142 = zext i1 %1141 to i8
  store i8 %1142, i8* %31, align 1, !tbaa !1262
  %1143 = select i1 %1134, i64 228, i64 56
  %1144 = add i64 %1772, %1143
  br i1 %1134, label %block_419fe1, label %block_419f35

block_41a3a2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1145 = load i64, i64* %13, align 8
  %1146 = add i64 %1145, -24
  %1147 = inttoptr i64 %1146 to double*
  %1148 = load double, double* %1147
  store double %1148, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1149 = add i64 %1145, -136
  %1150 = inttoptr i64 %1149 to double*
  %1151 = load double, double* %1150
  store double %1151, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1152 = add i64 %1145, -232
  %1153 = inttoptr i64 %1152 to double*
  %1154 = load double, double* %1153
  store double %1154, double* %61, align 1, !tbaa !1264
  store double 0.000000e+00, double* %912, align 1, !tbaa !1264
  %1155 = add i64 %243, 38
  %1156 = load i64, i64* %12, align 8, !tbaa !1240
  %1157 = add i64 %1156, -8
  %1158 = inttoptr i64 %1157 to i64*
  store i64 %1155, i64* %1158
  %1159 = load i64, i64* %903, align 8, !alias.scope !1314, !noalias !1317
  %1160 = load i64, i64* %9, align 8, !alias.scope !1314, !noalias !1317
  %1161 = load i64, i64* %908, align 8, !alias.scope !1314, !noalias !1317
  %1162 = load i64, i64* %902, align 8, !alias.scope !1314, !noalias !1317
  %1163 = load i64, i64* %901, align 8, !alias.scope !1314, !noalias !1317
  %1164 = inttoptr i64 %1156 to i64*
  %1165 = load i64, i64* %1164
  %1166 = add i64 %1156, 8
  %1167 = inttoptr i64 %1166 to i64*
  %1168 = load i64, i64* %1167
  %1169 = add i64 %1156, 16
  %1170 = inttoptr i64 %1169 to i64*
  %1171 = load i64, i64* %1170
  %1172 = add i64 %1156, 24
  %1173 = inttoptr i64 %1172 to i64*
  %1174 = load i64, i64* %1173
  %1175 = add i64 %1156, 32
  %1176 = inttoptr i64 %1175 to i64*
  %1177 = load i64, i64* %1176
  %1178 = add i64 %1156, 40
  %1179 = inttoptr i64 %1178 to i64*
  %1180 = load i64, i64* %1179
  %1181 = add i64 %1156, 48
  %1182 = inttoptr i64 %1181 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1156, 56
  %1185 = inttoptr i64 %1184 to i64*
  %1186 = load i64, i64* %1185
  %1187 = add i64 %1156, 64
  %1188 = inttoptr i64 %1187 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1156, 72
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = inttoptr i64 %1157 to i64*
  %1194 = load i64, i64* %1193
  store i64 %1194, i64* %3, align 8, !alias.scope !1314, !noalias !1317
  store i64 %1156, i64* %12, align 8, !alias.scope !1314, !noalias !1317
  %1195 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3881), i64 %1159, i64 %1160, i64 %1161, i64 %1162, i64 %1163, i64 %1165, i64 %1168, i64 %1171, i64 %1174, i64 %1177, i64 %1180, i64 %1183, i64 %1186, i64 %1189, i64 %1192), !noalias !1314
  %1196 = load i64, i64* %13, align 8
  %1197 = add i64 %1196, -324
  %1198 = trunc i64 %1195 to i32
  %1199 = load i64, i64* %3, align 8
  %1200 = inttoptr i64 %1197 to i32*
  store i32 %1198, i32* %1200
  %1201 = add i64 %1199, 65
  br label %block_41a40e

block_419b4c:                                     ; preds = %block_419b3b
  %1202 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %1203 = add i32 %1202, -162
  %1204 = icmp eq i32 %1203, 0
  %1205 = select i1 %1204, i64 17, i64 224
  %1206 = add i64 %2010, %1205
  br i1 %1204, label %block_419b5d, label %block_419c2c

block_41a340:                                     ; preds = %block_41a314
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3839), i64* %11, align 8, !tbaa !1240
  %1207 = add i64 %1005, 17
  %1208 = load i64, i64* %12, align 8, !tbaa !1240
  %1209 = add i64 %1208, -8
  %1210 = inttoptr i64 %1209 to i64*
  store i64 %1207, i64* %1210
  %1211 = load i64, i64* %903, align 8, !alias.scope !1319, !noalias !1322
  %1212 = load i64, i64* %9, align 8, !alias.scope !1319, !noalias !1322
  %1213 = load i64, i64* %902, align 8, !alias.scope !1319, !noalias !1322
  %1214 = load i64, i64* %901, align 8, !alias.scope !1319, !noalias !1322
  %1215 = inttoptr i64 %1208 to i64*
  %1216 = load i64, i64* %1215
  %1217 = add i64 %1208, 8
  %1218 = inttoptr i64 %1217 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1208, 16
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = add i64 %1208, 24
  %1224 = inttoptr i64 %1223 to i64*
  %1225 = load i64, i64* %1224
  %1226 = add i64 %1208, 32
  %1227 = inttoptr i64 %1226 to i64*
  %1228 = load i64, i64* %1227
  %1229 = add i64 %1208, 40
  %1230 = inttoptr i64 %1229 to i64*
  %1231 = load i64, i64* %1230
  %1232 = add i64 %1208, 48
  %1233 = inttoptr i64 %1232 to i64*
  %1234 = load i64, i64* %1233
  %1235 = add i64 %1208, 56
  %1236 = inttoptr i64 %1235 to i64*
  %1237 = load i64, i64* %1236
  %1238 = add i64 %1208, 64
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1208, 72
  %1242 = inttoptr i64 %1241 to i64*
  %1243 = load i64, i64* %1242
  %1244 = inttoptr i64 %1209 to i64*
  %1245 = load i64, i64* %1244
  store i64 %1245, i64* %3, align 8, !alias.scope !1319, !noalias !1322
  store i64 %1208, i64* %12, align 8, !alias.scope !1319, !noalias !1322
  %1246 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3839), i64 %1211, i64 %1212, i64 %1385, i64 %1213, i64 %1214, i64 %1216, i64 %1219, i64 %1222, i64 %1225, i64 %1228, i64 %1231, i64 %1234, i64 %1237, i64 %1240, i64 %1243), !noalias !1319
  %1247 = load i64, i64* %13, align 8
  %1248 = add i64 %1247, -316
  %1249 = trunc i64 %1246 to i32
  %1250 = load i64, i64* %3, align 8
  %1251 = add i64 %1250, 6
  %1252 = inttoptr i64 %1248 to i32*
  store i32 %1249, i32* %1252
  br label %block_41a357

block_41a099:                                     ; preds = %block_41a052
  %1253 = sext i32 %1960 to i64
  store i64 %1253, i64* %7, align 8, !tbaa !1240
  %1254 = shl nsw i64 %1253, 3
  %1255 = add i64 %1956, -176
  %1256 = add i64 %1255, %1254
  %1257 = inttoptr i64 %1256 to double*
  %1258 = load double, double* %1257
  store double %1258, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1259 = add i64 %1956, -240
  %1260 = inttoptr i64 %1259 to double*
  %1261 = load double, double* %1260
  store double %1261, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1262 = add i64 %135, 28
  store i64 %1262, i64* %3, align 8
  %1263 = fcmp uno double %1261, %1258
  br i1 %1263, label %1264, label %1276

; <label>:1264:                                   ; preds = %block_41a099
  %1265 = fadd double %1261, %1258
  %1266 = bitcast double %1265 to i64
  %1267 = and i64 %1266, 9221120237041090560
  %1268 = icmp eq i64 %1267, 9218868437227405312
  %1269 = and i64 %1266, 2251799813685247
  %1270 = icmp ne i64 %1269, 0
  %1271 = and i1 %1268, %1270
  br i1 %1271, label %1272, label %1282

; <label>:1272:                                   ; preds = %1264
  %1273 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1262, %struct.Memory* %1957) #14
  %1274 = load i64, i64* %3, align 8
  %1275 = load i8, i8* %26, align 1, !tbaa !1245
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit146

; <label>:1276:                                   ; preds = %block_41a099
  %1277 = fcmp ogt double %1261, %1258
  br i1 %1277, label %1282, label %1278

; <label>:1278:                                   ; preds = %1276
  %1279 = fcmp olt double %1261, %1258
  br i1 %1279, label %1282, label %1280

; <label>:1280:                                   ; preds = %1278
  %1281 = fcmp oeq double %1261, %1258
  br i1 %1281, label %1282, label %1284

; <label>:1282:                                   ; preds = %1280, %1278, %1276, %1264
  %1283 = phi i8 [ 0, %1276 ], [ 1, %1278 ], [ 0, %1280 ], [ 1, %1264 ]
  br label %1284

; <label>:1284:                                   ; preds = %1282, %1280
  %1285 = phi i8 [ %1283, %1282 ], [ %1981, %1280 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit146

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit146: ; preds = %1284, %1272
  %1286 = phi i8 [ %1275, %1272 ], [ %1285, %1284 ]
  %1287 = phi i64 [ %1274, %1272 ], [ %1262, %1284 ]
  %1288 = phi %struct.Memory* [ %1273, %1272 ], [ %1957, %1284 ]
  %1289 = icmp ne i8 %1286, 0
  %1290 = select i1 %1289, i64 90, i64 6
  %1291 = add i64 %1287, %1290
  %1292 = icmp eq i8 %1286, 1
  br i1 %1292, label %block_41a10f, label %block_41a0bb

block_41a496:                                     ; preds = %block_41a41e, %block_41a45e, %block_41a47a
  %1293 = phi %struct.Memory* [ %2538, %block_41a41e ], [ %2538, %block_41a45e ], [ %2538, %block_41a47a ]
  %1294 = load i64, i64* %12, align 8
  %1295 = add i64 %1294, 352
  %1296 = icmp ugt i64 %1294, -353
  %1297 = zext i1 %1296 to i8
  store i8 %1297, i8* %26, align 1, !tbaa !1245
  %1298 = trunc i64 %1295 to i32
  %1299 = and i32 %1298, 255
  %1300 = tail call i32 @llvm.ctpop.i32(i32 %1299) #11
  %1301 = trunc i32 %1300 to i8
  %1302 = and i8 %1301, 1
  %1303 = xor i8 %1302, 1
  store i8 %1303, i8* %27, align 1, !tbaa !1259
  %1304 = xor i64 %1295, %1294
  %1305 = lshr i64 %1304, 4
  %1306 = trunc i64 %1305 to i8
  %1307 = and i8 %1306, 1
  store i8 %1307, i8* %28, align 1, !tbaa !1263
  %1308 = icmp eq i64 %1295, 0
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %29, align 1, !tbaa !1260
  %1310 = lshr i64 %1295, 63
  %1311 = trunc i64 %1310 to i8
  store i8 %1311, i8* %30, align 1, !tbaa !1261
  %1312 = lshr i64 %1294, 63
  %1313 = xor i64 %1310, %1312
  %1314 = add nuw nsw i64 %1313, %1310
  %1315 = icmp eq i64 %1314, 2
  %1316 = zext i1 %1315 to i8
  store i8 %1316, i8* %31, align 1, !tbaa !1262
  %1317 = add i64 %1294, 360
  %1318 = inttoptr i64 %1295 to i64*
  %1319 = load i64, i64* %1318
  store i64 %1319, i64* %13, align 8, !tbaa !1240
  %1320 = inttoptr i64 %1317 to i64*
  %1321 = load i64, i64* %1320
  store i64 %1321, i64* %3, align 8, !tbaa !1240
  %1322 = add i64 %1294, 368
  store i64 %1322, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %1293

block_419881:                                     ; preds = %block_419873
  %1323 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %1324 = add i32 %1323, -300
  %1325 = icmp eq i32 %1324, 0
  %1326 = select i1 %1325, i64 17, i64 199
  %1327 = add i64 %2098, %1326
  br i1 %1325, label %block_419892, label %block_419948

block_41a357:                                     ; preds = %block_41a340, %block_41a324
  %1328 = phi i64 [ %1251, %block_41a340 ], [ %900, %block_41a324 ]
  %1329 = phi i64 [ %1247, %block_41a340 ], [ %895, %block_41a324 ]
  %1330 = phi %struct.Memory* [ %1365, %block_41a340 ], [ %1365, %block_41a324 ]
  %1331 = add i64 %1329, -32
  %1332 = inttoptr i64 %1331 to i64*
  %1333 = load i64, i64* %1332
  store i64 %1333, i64* %7, align 8, !tbaa !1240
  %1334 = inttoptr i64 %1333 to i8*
  %1335 = load i8, i8* %1334
  %1336 = sext i8 %1335 to i64
  %1337 = and i64 %1336, 4294967295
  store i64 %1337, i64* %8, align 8, !tbaa !1240
  %1338 = sext i8 %1335 to i32
  %1339 = add nsw i32 %1338, -85
  %1340 = icmp ult i8 %1335, 85
  %1341 = zext i1 %1340 to i8
  store i8 %1341, i8* %26, align 1, !tbaa !1245
  %1342 = and i32 %1339, 255
  %1343 = tail call i32 @llvm.ctpop.i32(i32 %1342) #11
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = xor i8 %1345, 1
  store i8 %1346, i8* %27, align 1, !tbaa !1259
  %1347 = xor i32 %1338, 16
  %1348 = xor i32 %1347, %1339
  %1349 = lshr i32 %1348, 4
  %1350 = trunc i32 %1349 to i8
  %1351 = and i8 %1350, 1
  store i8 %1351, i8* %28, align 1, !tbaa !1263
  %1352 = icmp eq i32 %1339, 0
  %1353 = zext i1 %1352 to i8
  store i8 %1353, i8* %29, align 1, !tbaa !1260
  %1354 = lshr i32 %1339, 31
  %1355 = trunc i32 %1354 to i8
  store i8 %1355, i8* %30, align 1, !tbaa !1261
  %1356 = lshr i32 %1338, 31
  %1357 = xor i32 %1354, %1356
  %1358 = add nuw nsw i32 %1357, %1356
  %1359 = icmp eq i32 %1358, 2
  %1360 = zext i1 %1359 to i8
  store i8 %1360, i8* %31, align 1, !tbaa !1262
  %1361 = select i1 %1352, i64 16, i64 49
  %1362 = add i64 %1328, %1361
  br i1 %1352, label %block_41a367, label %block_41a388

block_41a1d3:                                     ; preds = %block_41a2fb, %block_41a1c9
  %1363 = phi i64 [ %1953, %block_41a1c9 ], [ %2359, %block_41a2fb ]
  %1364 = phi i64 [ %1950, %block_41a1c9 ], [ %2349, %block_41a2fb ]
  %1365 = phi %struct.Memory* [ %1951, %block_41a1c9 ], [ %2352, %block_41a2fb ]
  %1366 = add i64 %1364, -252
  %1367 = inttoptr i64 %1366 to i32*
  %1368 = load i32, i32* %1367
  %1369 = add i32 %1368, -5
  %1370 = lshr i32 %1369, 31
  %1371 = lshr i32 %1368, 31
  %1372 = xor i32 %1370, %1371
  %1373 = add nuw nsw i32 %1372, %1371
  %1374 = icmp eq i32 %1373, 2
  %1375 = icmp ne i32 %1370, 0
  %1376 = xor i1 %1375, %1374
  %1377 = select i1 %1376, i64 13, i64 321
  %1378 = add i64 %1363, %1377
  %1379 = add i64 %1364, -32
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = inttoptr i64 %1381 to i8*
  %1383 = load i8, i8* %1382
  %1384 = sext i8 %1383 to i64
  %1385 = and i64 %1384, 4294967295
  store i64 %1385, i64* %8, align 8, !tbaa !1240
  %1386 = sext i8 %1383 to i32
  %1387 = add nsw i32 %1386, -85
  %1388 = icmp ult i8 %1383, 85
  %1389 = zext i1 %1388 to i8
  store i8 %1389, i8* %26, align 1, !tbaa !1245
  %1390 = and i32 %1387, 255
  %1391 = tail call i32 @llvm.ctpop.i32(i32 %1390) #11
  %1392 = trunc i32 %1391 to i8
  %1393 = and i8 %1392, 1
  %1394 = xor i8 %1393, 1
  store i8 %1394, i8* %27, align 1, !tbaa !1259
  %1395 = xor i32 %1386, 16
  %1396 = xor i32 %1395, %1387
  %1397 = lshr i32 %1396, 4
  %1398 = trunc i32 %1397 to i8
  %1399 = and i8 %1398, 1
  store i8 %1399, i8* %28, align 1, !tbaa !1263
  %1400 = icmp eq i32 %1387, 0
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %29, align 1, !tbaa !1260
  %1402 = lshr i32 %1387, 31
  %1403 = trunc i32 %1402 to i8
  store i8 %1403, i8* %30, align 1, !tbaa !1261
  %1404 = lshr i32 %1386, 31
  %1405 = xor i32 %1402, %1404
  %1406 = add nuw nsw i32 %1405, %1404
  %1407 = icmp eq i32 %1406, 2
  %1408 = zext i1 %1407 to i8
  store i8 %1408, i8* %31, align 1, !tbaa !1262
  br i1 %1376, label %block_41a1e0, label %block_41a314

block_41a47a:                                     ; preds = %block_41a451
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 4039), i64* %11, align 8, !tbaa !1240
  %1409 = add i64 %1853, 17
  %1410 = load i64, i64* %12, align 8, !tbaa !1240
  %1411 = add i64 %1410, -8
  %1412 = inttoptr i64 %1411 to i64*
  store i64 %1409, i64* %1412
  %1413 = load i64, i64* %903, align 8, !alias.scope !1324, !noalias !1327
  %1414 = load i64, i64* %9, align 8, !alias.scope !1324, !noalias !1327
  %1415 = load i64, i64* %902, align 8, !alias.scope !1324, !noalias !1327
  %1416 = load i64, i64* %901, align 8, !alias.scope !1324, !noalias !1327
  %1417 = inttoptr i64 %1410 to i64*
  %1418 = load i64, i64* %1417
  %1419 = add i64 %1410, 8
  %1420 = inttoptr i64 %1419 to i64*
  %1421 = load i64, i64* %1420
  %1422 = add i64 %1410, 16
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  %1425 = add i64 %1410, 24
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1410, 32
  %1429 = inttoptr i64 %1428 to i64*
  %1430 = load i64, i64* %1429
  %1431 = add i64 %1410, 40
  %1432 = inttoptr i64 %1431 to i64*
  %1433 = load i64, i64* %1432
  %1434 = add i64 %1410, 48
  %1435 = inttoptr i64 %1434 to i64*
  %1436 = load i64, i64* %1435
  %1437 = add i64 %1410, 56
  %1438 = inttoptr i64 %1437 to i64*
  %1439 = load i64, i64* %1438
  %1440 = add i64 %1410, 64
  %1441 = inttoptr i64 %1440 to i64*
  %1442 = load i64, i64* %1441
  %1443 = add i64 %1410, 72
  %1444 = inttoptr i64 %1443 to i64*
  %1445 = load i64, i64* %1444
  %1446 = inttoptr i64 %1411 to i64*
  %1447 = load i64, i64* %1446
  store i64 %1447, i64* %3, align 8, !alias.scope !1324, !noalias !1327
  store i64 %1410, i64* %12, align 8, !alias.scope !1324, !noalias !1327
  %1448 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 4039), i64 %1413, i64 %1414, i64 %2546, i64 %1415, i64 %1416, i64 %1418, i64 %1421, i64 %1424, i64 %1427, i64 %1430, i64 %1433, i64 %1436, i64 %1439, i64 %1442, i64 %1445), !noalias !1324
  store i64 %1448, i64* %904, align 8, !alias.scope !1324, !noalias !1327
  %1449 = load i64, i64* %13, align 8
  %1450 = add i64 %1449, -344
  %1451 = trunc i64 %1448 to i32
  %1452 = inttoptr i64 %1450 to i32*
  store i32 %1451, i32* %1452
  br label %block_41a496

block_419c70:                                     ; preds = %block_419c5f
  %1453 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2920) to double*)
  store double %1453, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1454 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2928) to double*)
  store double %1454, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1455 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2936) to double*)
  store double %1455, double* %61, align 1, !tbaa !1264
  %1456 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %1456, align 1, !tbaa !1264
  %1457 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2944) to double*)
  %1458 = bitcast %union.VectorReg* %2451 to double*
  store double %1457, double* %1458, align 1, !tbaa !1264
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %1460 = bitcast i64* %1459 to double*
  store double 0.000000e+00, double* %1460, align 1, !tbaa !1264
  %1461 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2952) to double*)
  %1462 = bitcast %union.VectorReg* %17 to double*
  store double %1461, double* %1462, align 1, !tbaa !1264
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %1464 = bitcast i64* %1463 to double*
  store double 0.000000e+00, double* %1464, align 1, !tbaa !1264
  %1465 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2960) to double*)
  %1466 = bitcast %union.VectorReg* %2452 to double*
  store double %1465, double* %1466, align 1, !tbaa !1264
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %1468 = bitcast i64* %1467 to double*
  store double 0.000000e+00, double* %1468, align 1, !tbaa !1264
  %1469 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2968) to double*)
  %1470 = bitcast %union.VectorReg* %18 to double*
  store double %1469, double* %1470, align 1, !tbaa !1264
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %1472 = bitcast i64* %1471 to double*
  store double 0.000000e+00, double* %1472, align 1, !tbaa !1264
  %1473 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2976) to double*)
  %1474 = bitcast %union.VectorReg* %2453 to double*
  store double %1473, double* %1474, align 1, !tbaa !1264
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %1476 = bitcast i64* %1475 to double*
  store double 0.000000e+00, double* %1476, align 1, !tbaa !1264
  %1477 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2984) to double*)
  %1478 = bitcast %union.VectorReg* %19 to double*
  store double %1477, double* %1478, align 1, !tbaa !1264
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %1480 = bitcast i64* %1479 to double*
  store double 0.000000e+00, double* %1480, align 1, !tbaa !1264
  %1481 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2992) to double*)
  %1482 = bitcast %union.VectorReg* %2454 to double*
  store double %1481, double* %1482, align 1, !tbaa !1264
  %1483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %1484 = bitcast i64* %1483 to double*
  store double 0.000000e+00, double* %1484, align 1, !tbaa !1264
  %1485 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3000) to double*)
  %1486 = bitcast %union.VectorReg* %20 to double*
  store double %1485, double* %1486, align 1, !tbaa !1264
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %1488 = bitcast i64* %1487 to double*
  store double 0.000000e+00, double* %1488, align 1, !tbaa !1264
  %1489 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  %1490 = bitcast %union.VectorReg* %2455 to double*
  store double %1489, double* %1490, align 1, !tbaa !1264
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %1492 = bitcast i64* %1491 to double*
  store double 0.000000e+00, double* %1492, align 1, !tbaa !1264
  %1493 = add i64 %69, -32
  %1494 = inttoptr i64 %1493 to i64*
  %1495 = load i64, i64* %1494
  %1496 = inttoptr i64 %1495 to i8*
  store i8 68, i8* %1496
  %1497 = add i64 %69, -248
  %1498 = inttoptr i64 %1497 to double*
  store double %1489, double* %1498
  %1499 = inttoptr i64 %78 to double*
  store double %1485, double* %1499
  %1500 = load i64, i64* %13, align 8
  %1501 = add i64 %1500, -72
  %1502 = inttoptr i64 %1501 to double*
  store double %1481, double* %1502
  %1503 = add i64 %1500, -64
  %1504 = inttoptr i64 %1503 to double*
  store double %1477, double* %1504
  %1505 = add i64 %1500, -56
  %1506 = inttoptr i64 %1505 to double*
  store double %1473, double* %1506
  %1507 = add i64 %1500, -48
  %1508 = inttoptr i64 %1507 to double*
  store double %1469, double* %1508
  %1509 = add i64 %1500, -128
  %1510 = inttoptr i64 %1509 to double*
  store double %1465, double* %1510
  %1511 = add i64 %1500, -120
  %1512 = inttoptr i64 %1511 to double*
  store double %1461, double* %1512
  %1513 = add i64 %1500, -112
  %1514 = load double, double* %1458, align 1
  %1515 = inttoptr i64 %1513 to double*
  store double %1514, double* %1515
  %1516 = add i64 %1500, -104
  %1517 = load double, double* %61, align 1
  %1518 = inttoptr i64 %1516 to double*
  store double %1517, double* %1518
  %1519 = add i64 %1500, -96
  %1520 = load double, double* %33, align 1
  %1521 = inttoptr i64 %1519 to double*
  store double %1520, double* %1521
  %1522 = add i64 %1500, -136
  %1523 = add i64 %2108, 177
  %1524 = load double, double* %51, align 1
  %1525 = inttoptr i64 %1522 to double*
  store double %1524, double* %1525
  br label %block_419e2f

block_41a0bb:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit146
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3686), i64* %11, align 8, !tbaa !1240
  %1526 = load i64, i64* %13, align 8
  %1527 = add i64 %1526, -252
  %1528 = inttoptr i64 %1527 to i32*
  %1529 = load i32, i32* %1528
  %1530 = add i32 %1529, 1
  %1531 = zext i32 %1530 to i64
  %1532 = add i64 %1526, -8
  %1533 = inttoptr i64 %1532 to i64*
  %1534 = load i64, i64* %1533
  %1535 = sext i32 %1529 to i64
  store i64 %1535, i64* %9, align 8, !tbaa !1240
  %1536 = shl nsw i64 %1535, 3
  %1537 = add i64 %1536, %1534
  %1538 = inttoptr i64 %1537 to double*
  %1539 = load double, double* %1538
  store double %1539, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1540 = add i64 %1526, -80
  %1541 = add i64 %1540, %1536
  %1542 = inttoptr i64 %1541 to double*
  %1543 = load double, double* %1542
  store double %1543, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1544 = add i64 %1526, -176
  %1545 = add i64 %1544, %1536
  %1546 = inttoptr i64 %1545 to double*
  %1547 = load double, double* %1546
  store double %1547, double* %61, align 1, !tbaa !1264
  store double 0.000000e+00, double* %912, align 1, !tbaa !1264
  store i64 %1531, i64* %10, align 8, !tbaa !1240
  %1548 = add i64 %1291, 73
  %1549 = load i64, i64* %12, align 8, !tbaa !1240
  %1550 = add i64 %1549, -8
  %1551 = inttoptr i64 %1550 to i64*
  store i64 %1548, i64* %1551
  %1552 = load i64, i64* %902, align 8, !alias.scope !1329, !noalias !1332
  %1553 = load i64, i64* %901, align 8, !alias.scope !1329, !noalias !1332
  %1554 = inttoptr i64 %1549 to i64*
  %1555 = load i64, i64* %1554
  %1556 = add i64 %1549, 8
  %1557 = inttoptr i64 %1556 to i64*
  %1558 = load i64, i64* %1557
  %1559 = add i64 %1549, 16
  %1560 = inttoptr i64 %1559 to i64*
  %1561 = load i64, i64* %1560
  %1562 = add i64 %1549, 24
  %1563 = inttoptr i64 %1562 to i64*
  %1564 = load i64, i64* %1563
  %1565 = add i64 %1549, 32
  %1566 = inttoptr i64 %1565 to i64*
  %1567 = load i64, i64* %1566
  %1568 = add i64 %1549, 40
  %1569 = inttoptr i64 %1568 to i64*
  %1570 = load i64, i64* %1569
  %1571 = add i64 %1549, 48
  %1572 = inttoptr i64 %1571 to i64*
  %1573 = load i64, i64* %1572
  %1574 = add i64 %1549, 56
  %1575 = inttoptr i64 %1574 to i64*
  %1576 = load i64, i64* %1575
  %1577 = add i64 %1549, 64
  %1578 = inttoptr i64 %1577 to i64*
  %1579 = load i64, i64* %1578
  %1580 = add i64 %1549, 72
  %1581 = inttoptr i64 %1580 to i64*
  %1582 = load i64, i64* %1581
  %1583 = inttoptr i64 %1550 to i64*
  %1584 = load i64, i64* %1583
  store i64 %1584, i64* %3, align 8, !alias.scope !1329, !noalias !1332
  store i64 %1549, i64* %12, align 8, !alias.scope !1329, !noalias !1332
  %1585 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3686), i64 %1531, i64 %1535, i64 %1535, i64 %1552, i64 %1553, i64 %1555, i64 %1558, i64 %1561, i64 %1564, i64 %1567, i64 %1570, i64 %1573, i64 %1576, i64 %1579, i64 %1582), !noalias !1329
  %1586 = load i64, i64* %13, align 8
  %1587 = add i64 %1586, -284
  %1588 = trunc i64 %1585 to i32
  %1589 = load i64, i64* %3, align 8
  %1590 = inttoptr i64 %1587 to i32*
  store i32 %1588, i32* %1590
  %1591 = add i64 %1589, 100
  br label %block_41a16d

block_419865:                                     ; preds = %block_419857
  %1592 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %1593 = add i32 %1592, -33
  %1594 = icmp eq i32 %1593, 0
  %1595 = select i1 %1594, i64 14, i64 227
  %1596 = add i64 %1750, %1595
  br i1 %1594, label %block_419873, label %block_419948

block_41a196:                                     ; preds = %block_41a186
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3762), i64* %11, align 8, !tbaa !1240
  %1597 = add i64 %246, 17
  %1598 = load i64, i64* %12, align 8, !tbaa !1240
  %1599 = add i64 %1598, -8
  %1600 = inttoptr i64 %1599 to i64*
  store i64 %1597, i64* %1600
  %1601 = load i64, i64* %903, align 8, !alias.scope !1334, !noalias !1337
  %1602 = load i64, i64* %9, align 8, !alias.scope !1334, !noalias !1337
  %1603 = load i64, i64* %902, align 8, !alias.scope !1334, !noalias !1337
  %1604 = load i64, i64* %901, align 8, !alias.scope !1334, !noalias !1337
  %1605 = inttoptr i64 %1598 to i64*
  %1606 = load i64, i64* %1605
  %1607 = add i64 %1598, 8
  %1608 = inttoptr i64 %1607 to i64*
  %1609 = load i64, i64* %1608
  %1610 = add i64 %1598, 16
  %1611 = inttoptr i64 %1610 to i64*
  %1612 = load i64, i64* %1611
  %1613 = add i64 %1598, 24
  %1614 = inttoptr i64 %1613 to i64*
  %1615 = load i64, i64* %1614
  %1616 = add i64 %1598, 32
  %1617 = inttoptr i64 %1616 to i64*
  %1618 = load i64, i64* %1617
  %1619 = add i64 %1598, 40
  %1620 = inttoptr i64 %1619 to i64*
  %1621 = load i64, i64* %1620
  %1622 = add i64 %1598, 48
  %1623 = inttoptr i64 %1622 to i64*
  %1624 = load i64, i64* %1623
  %1625 = add i64 %1598, 56
  %1626 = inttoptr i64 %1625 to i64*
  %1627 = load i64, i64* %1626
  %1628 = add i64 %1598, 64
  %1629 = inttoptr i64 %1628 to i64*
  %1630 = load i64, i64* %1629
  %1631 = add i64 %1598, 72
  %1632 = inttoptr i64 %1631 to i64*
  %1633 = load i64, i64* %1632
  %1634 = inttoptr i64 %1599 to i64*
  %1635 = load i64, i64* %1634
  store i64 %1635, i64* %3, align 8, !alias.scope !1334, !noalias !1337
  store i64 %1598, i64* %12, align 8, !alias.scope !1334, !noalias !1337
  %1636 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3762), i64 %1601, i64 %1602, i64 %1977, i64 %1603, i64 %1604, i64 %1606, i64 %1609, i64 %1612, i64 %1615, i64 %1618, i64 %1621, i64 %1624, i64 %1627, i64 %1630, i64 %1633), !noalias !1334
  %1637 = load i64, i64* %13, align 8
  %1638 = add i64 %1637, -292
  %1639 = trunc i64 %1636 to i32
  %1640 = load i64, i64* %3, align 8
  %1641 = inttoptr i64 %1638 to i32*
  store i32 %1639, i32* %1641
  %1642 = add i64 %1640, 34
  br label %block_41a1c9

block_419a63:                                     ; preds = %block_419a55
  %1643 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %1644 = add i32 %1643, -250
  %1645 = icmp eq i32 %1644, 0
  %1646 = select i1 %1645, i64 17, i64 199
  %1647 = add i64 %1755, %1646
  br i1 %1645, label %block_419a74, label %block_419b2a

block_41a062:                                     ; preds = %block_41a052
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3662), i64* %11, align 8, !tbaa !1240
  %1648 = add i32 %1960, 1
  %1649 = zext i32 %1648 to i64
  %1650 = add i64 %1956, -8
  %1651 = inttoptr i64 %1650 to i64*
  %1652 = load i64, i64* %1651
  %1653 = sext i32 %1960 to i64
  store i64 %1653, i64* %9, align 8, !tbaa !1240
  %1654 = shl nsw i64 %1653, 3
  %1655 = add i64 %1654, %1652
  %1656 = inttoptr i64 %1655 to double*
  %1657 = load double, double* %1656
  store double %1657, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  store i64 %1649, i64* %10, align 8, !tbaa !1240
  %1658 = add i64 %135, 44
  %1659 = load i64, i64* %12, align 8, !tbaa !1240
  %1660 = add i64 %1659, -8
  %1661 = inttoptr i64 %1660 to i64*
  store i64 %1658, i64* %1661
  %1662 = load i64, i64* %902, align 8, !alias.scope !1339, !noalias !1342
  %1663 = load i64, i64* %901, align 8, !alias.scope !1339, !noalias !1342
  %1664 = inttoptr i64 %1659 to i64*
  %1665 = load i64, i64* %1664
  %1666 = add i64 %1659, 8
  %1667 = inttoptr i64 %1666 to i64*
  %1668 = load i64, i64* %1667
  %1669 = add i64 %1659, 16
  %1670 = inttoptr i64 %1669 to i64*
  %1671 = load i64, i64* %1670
  %1672 = add i64 %1659, 24
  %1673 = inttoptr i64 %1672 to i64*
  %1674 = load i64, i64* %1673
  %1675 = add i64 %1659, 32
  %1676 = inttoptr i64 %1675 to i64*
  %1677 = load i64, i64* %1676
  %1678 = add i64 %1659, 40
  %1679 = inttoptr i64 %1678 to i64*
  %1680 = load i64, i64* %1679
  %1681 = add i64 %1659, 48
  %1682 = inttoptr i64 %1681 to i64*
  %1683 = load i64, i64* %1682
  %1684 = add i64 %1659, 56
  %1685 = inttoptr i64 %1684 to i64*
  %1686 = load i64, i64* %1685
  %1687 = add i64 %1659, 64
  %1688 = inttoptr i64 %1687 to i64*
  %1689 = load i64, i64* %1688
  %1690 = add i64 %1659, 72
  %1691 = inttoptr i64 %1690 to i64*
  %1692 = load i64, i64* %1691
  %1693 = inttoptr i64 %1660 to i64*
  %1694 = load i64, i64* %1693
  store i64 %1694, i64* %3, align 8, !alias.scope !1339, !noalias !1342
  store i64 %1659, i64* %12, align 8, !alias.scope !1339, !noalias !1342
  %1695 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3662), i64 %1649, i64 %1653, i64 %1652, i64 %1662, i64 %1663, i64 %1665, i64 %1668, i64 %1671, i64 %1674, i64 %1677, i64 %1680, i64 %1683, i64 %1686, i64 %1689, i64 %1692), !noalias !1339
  %1696 = load i64, i64* %13, align 8
  %1697 = add i64 %1696, -280
  %1698 = trunc i64 %1695 to i32
  %1699 = load i64, i64* %3, align 8
  %1700 = add i64 %1699, 6
  %1701 = inttoptr i64 %1697 to i32*
  store i32 %1698, i32* %1701
  br label %block_41a16d

block_41a45e:                                     ; preds = %block_41a451
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 4013), i64* %11, align 8, !tbaa !1240
  %1702 = add i64 %1853, 17
  %1703 = load i64, i64* %12, align 8, !tbaa !1240
  %1704 = add i64 %1703, -8
  %1705 = inttoptr i64 %1704 to i64*
  store i64 %1702, i64* %1705
  %1706 = load i64, i64* %903, align 8, !alias.scope !1344, !noalias !1347
  %1707 = load i64, i64* %9, align 8, !alias.scope !1344, !noalias !1347
  %1708 = load i64, i64* %902, align 8, !alias.scope !1344, !noalias !1347
  %1709 = load i64, i64* %901, align 8, !alias.scope !1344, !noalias !1347
  %1710 = inttoptr i64 %1703 to i64*
  %1711 = load i64, i64* %1710
  %1712 = add i64 %1703, 8
  %1713 = inttoptr i64 %1712 to i64*
  %1714 = load i64, i64* %1713
  %1715 = add i64 %1703, 16
  %1716 = inttoptr i64 %1715 to i64*
  %1717 = load i64, i64* %1716
  %1718 = add i64 %1703, 24
  %1719 = inttoptr i64 %1718 to i64*
  %1720 = load i64, i64* %1719
  %1721 = add i64 %1703, 32
  %1722 = inttoptr i64 %1721 to i64*
  %1723 = load i64, i64* %1722
  %1724 = add i64 %1703, 40
  %1725 = inttoptr i64 %1724 to i64*
  %1726 = load i64, i64* %1725
  %1727 = add i64 %1703, 48
  %1728 = inttoptr i64 %1727 to i64*
  %1729 = load i64, i64* %1728
  %1730 = add i64 %1703, 56
  %1731 = inttoptr i64 %1730 to i64*
  %1732 = load i64, i64* %1731
  %1733 = add i64 %1703, 64
  %1734 = inttoptr i64 %1733 to i64*
  %1735 = load i64, i64* %1734
  %1736 = add i64 %1703, 72
  %1737 = inttoptr i64 %1736 to i64*
  %1738 = load i64, i64* %1737
  %1739 = inttoptr i64 %1704 to i64*
  %1740 = load i64, i64* %1739
  store i64 %1740, i64* %3, align 8, !alias.scope !1344, !noalias !1347
  store i64 %1703, i64* %12, align 8, !alias.scope !1344, !noalias !1347
  %1741 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 4013), i64 %1706, i64 %1707, i64 %2546, i64 %1708, i64 %1709, i64 %1711, i64 %1714, i64 %1717, i64 %1720, i64 %1723, i64 %1726, i64 %1729, i64 %1732, i64 %1735, i64 %1738), !noalias !1344
  store i64 %1741, i64* %904, align 8, !alias.scope !1344, !noalias !1347
  %1742 = load i64, i64* %13, align 8
  %1743 = add i64 %1742, -340
  %1744 = trunc i64 %1741 to i32
  %1745 = inttoptr i64 %1743 to i32*
  store i32 %1744, i32* %1745
  br label %block_41a496

block_419857:                                     ; preds = %block_419759, %block_419777, %block_419785, %block_419793
  %1746 = phi i64 [ %2465, %block_419759 ], [ %983, %block_419777 ], [ %932, %block_419785 ], [ %530, %block_419793 ]
  %1747 = add i32 %2461, -33
  %1748 = icmp eq i32 %1747, 0
  %1749 = select i1 %1748, i64 14, i64 241
  %1750 = add i64 %1746, %1749
  br i1 %1748, label %block_419865, label %block_419948

block_419a55:                                     ; preds = %block_419a47
  %1751 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %1752 = add i32 %1751, -102
  %1753 = icmp eq i32 %1752, 0
  %1754 = select i1 %1753, i64 14, i64 213
  %1755 = add i64 %2199, %1754
  br i1 %1753, label %block_419a63, label %block_419b2a

block_419e52:                                     ; preds = %block_419e5f, %block_419e48
  %1756 = phi i64 [ %1931, %block_419e48 ], [ %2534, %block_419e5f ]
  %1757 = phi i64 [ %1925, %block_419e48 ], [ %1946, %block_419e5f ]
  %1758 = phi %struct.Memory* [ %1928, %block_419e48 ], [ %1758, %block_419e5f ]
  %1759 = add i64 %1757, -252
  %1760 = add i64 %1756, 7
  %1761 = inttoptr i64 %1759 to i32*
  %1762 = load i32, i32* %1761
  %1763 = add i32 %1762, -5
  %1764 = lshr i32 %1763, 31
  %1765 = lshr i32 %1762, 31
  %1766 = xor i32 %1764, %1765
  %1767 = add nuw nsw i32 %1766, %1765
  %1768 = icmp eq i32 %1767, 2
  %1769 = icmp ne i32 %1764, 0
  %1770 = xor i1 %1769, %1768
  %1771 = select i1 %1770, i64 6, i64 164
  %1772 = add i64 %1760, %1771
  br i1 %1770, label %block_419e5f, label %block_419efd

block_419892:                                     ; preds = %block_419881
  %1773 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3272) to double*)
  store double %1773, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1774 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3280) to double*)
  store double %1774, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1775 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3288) to double*)
  store double %1775, double* %61, align 1, !tbaa !1264
  %1776 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %1776, align 1, !tbaa !1264
  %1777 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3296) to double*)
  %1778 = bitcast %union.VectorReg* %2451 to double*
  store double %1777, double* %1778, align 1, !tbaa !1264
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %1780 = bitcast i64* %1779 to double*
  store double 0.000000e+00, double* %1780, align 1, !tbaa !1264
  %1781 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3304) to double*)
  %1782 = bitcast %union.VectorReg* %17 to double*
  store double %1781, double* %1782, align 1, !tbaa !1264
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %1784 = bitcast i64* %1783 to double*
  store double 0.000000e+00, double* %1784, align 1, !tbaa !1264
  %1785 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3312) to double*)
  %1786 = bitcast %union.VectorReg* %2452 to double*
  store double %1785, double* %1786, align 1, !tbaa !1264
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %1788 = bitcast i64* %1787 to double*
  store double 0.000000e+00, double* %1788, align 1, !tbaa !1264
  %1789 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3320) to double*)
  %1790 = bitcast %union.VectorReg* %18 to double*
  store double %1789, double* %1790, align 1, !tbaa !1264
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %1792 = bitcast i64* %1791 to double*
  store double 0.000000e+00, double* %1792, align 1, !tbaa !1264
  %1793 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3328) to double*)
  %1794 = bitcast %union.VectorReg* %2453 to double*
  store double %1793, double* %1794, align 1, !tbaa !1264
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %1796 = bitcast i64* %1795 to double*
  store double 0.000000e+00, double* %1796, align 1, !tbaa !1264
  %1797 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3336) to double*)
  %1798 = bitcast %union.VectorReg* %19 to double*
  store double %1797, double* %1798, align 1, !tbaa !1264
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %1800 = bitcast i64* %1799 to double*
  store double 0.000000e+00, double* %1800, align 1, !tbaa !1264
  %1801 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3344) to double*)
  %1802 = bitcast %union.VectorReg* %2454 to double*
  store double %1801, double* %1802, align 1, !tbaa !1264
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %1804 = bitcast i64* %1803 to double*
  store double 0.000000e+00, double* %1804, align 1, !tbaa !1264
  %1805 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3352) to double*)
  %1806 = bitcast %union.VectorReg* %20 to double*
  store double %1805, double* %1806, align 1, !tbaa !1264
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %1808 = bitcast i64* %1807 to double*
  store double 0.000000e+00, double* %1808, align 1, !tbaa !1264
  %1809 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3360) to double*)
  %1810 = bitcast %union.VectorReg* %2455 to double*
  store double %1809, double* %1810, align 1, !tbaa !1264
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %1812 = bitcast i64* %1811 to double*
  store double 0.000000e+00, double* %1812, align 1, !tbaa !1264
  %1813 = add i64 %69, -32
  %1814 = inttoptr i64 %1813 to i64*
  %1815 = load i64, i64* %1814
  %1816 = inttoptr i64 %1815 to i8*
  store i8 87, i8* %1816
  %1817 = add i64 %69, -248
  %1818 = inttoptr i64 %1817 to double*
  store double %1809, double* %1818
  %1819 = inttoptr i64 %78 to double*
  store double %1805, double* %1819
  %1820 = load i64, i64* %13, align 8
  %1821 = add i64 %1820, -72
  %1822 = inttoptr i64 %1821 to double*
  store double %1801, double* %1822
  %1823 = add i64 %1820, -64
  %1824 = inttoptr i64 %1823 to double*
  store double %1797, double* %1824
  %1825 = add i64 %1820, -56
  %1826 = inttoptr i64 %1825 to double*
  store double %1793, double* %1826
  %1827 = add i64 %1820, -48
  %1828 = inttoptr i64 %1827 to double*
  store double %1789, double* %1828
  %1829 = add i64 %1820, -128
  %1830 = inttoptr i64 %1829 to double*
  store double %1785, double* %1830
  %1831 = add i64 %1820, -120
  %1832 = inttoptr i64 %1831 to double*
  store double %1781, double* %1832
  %1833 = add i64 %1820, -112
  %1834 = load double, double* %1778, align 1
  %1835 = inttoptr i64 %1833 to double*
  store double %1834, double* %1835
  %1836 = add i64 %1820, -104
  %1837 = load double, double* %61, align 1
  %1838 = inttoptr i64 %1836 to double*
  store double %1837, double* %1838
  %1839 = add i64 %1820, -96
  %1840 = load double, double* %33, align 1
  %1841 = inttoptr i64 %1839 to double*
  store double %1840, double* %1841
  %1842 = add i64 %1820, -136
  %1843 = add i64 %1327, 177
  %1844 = load double, double* %51, align 1
  %1845 = inttoptr i64 %1842 to double*
  store double %1844, double* %1845
  br label %block_419e43

block_41a451:                                     ; preds = %block_41a40e
  %1846 = add i64 %2535, -40
  %1847 = inttoptr i64 %1846 to i64*
  %1848 = load i64, i64* %1847
  %1849 = inttoptr i64 %1848 to i32*
  %1850 = load i32, i32* %1849
  %1851 = icmp eq i32 %1850, 0
  %1852 = select i1 %1851, i64 41, i64 13
  %1853 = add i64 %2551, %1852
  br i1 %1851, label %block_41a47a, label %block_41a45e

block_419c4e:                                     ; preds = %block_419c3d
  %1854 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %1855 = add i32 %1854, -408
  %1856 = icmp eq i32 %1855, 0
  %1857 = select i1 %1856, i64 17, i64 216
  %1858 = add i64 %2103, %1857
  br i1 %1856, label %block_419c5f, label %block_419d26

block_41a249:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit219
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3686), i64* %11, align 8, !tbaa !1240
  %1859 = load i64, i64* %13, align 8
  %1860 = add i64 %1859, -252
  %1861 = inttoptr i64 %1860 to i32*
  %1862 = load i32, i32* %1861
  %1863 = add i32 %1862, 1
  %1864 = zext i32 %1863 to i64
  %1865 = add i64 %1859, -16
  %1866 = inttoptr i64 %1865 to i64*
  %1867 = load i64, i64* %1866
  %1868 = sext i32 %1862 to i64
  store i64 %1868, i64* %9, align 8, !tbaa !1240
  %1869 = shl nsw i64 %1868, 3
  %1870 = add i64 %1869, %1867
  %1871 = inttoptr i64 %1870 to double*
  %1872 = load double, double* %1871
  store double %1872, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %1873 = add i64 %1859, -128
  %1874 = add i64 %1873, %1869
  %1875 = inttoptr i64 %1874 to double*
  %1876 = load double, double* %1875
  store double %1876, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %1877 = add i64 %1859, -224
  %1878 = add i64 %1877, %1869
  %1879 = inttoptr i64 %1878 to double*
  %1880 = load double, double* %1879
  store double %1880, double* %61, align 1, !tbaa !1264
  store double 0.000000e+00, double* %912, align 1, !tbaa !1264
  store i64 %1864, i64* %10, align 8, !tbaa !1240
  %1881 = add i64 %2292, 73
  %1882 = load i64, i64* %12, align 8, !tbaa !1240
  %1883 = add i64 %1882, -8
  %1884 = inttoptr i64 %1883 to i64*
  store i64 %1881, i64* %1884
  %1885 = load i64, i64* %902, align 8, !alias.scope !1349, !noalias !1352
  %1886 = load i64, i64* %901, align 8, !alias.scope !1349, !noalias !1352
  %1887 = inttoptr i64 %1882 to i64*
  %1888 = load i64, i64* %1887
  %1889 = add i64 %1882, 8
  %1890 = inttoptr i64 %1889 to i64*
  %1891 = load i64, i64* %1890
  %1892 = add i64 %1882, 16
  %1893 = inttoptr i64 %1892 to i64*
  %1894 = load i64, i64* %1893
  %1895 = add i64 %1882, 24
  %1896 = inttoptr i64 %1895 to i64*
  %1897 = load i64, i64* %1896
  %1898 = add i64 %1882, 32
  %1899 = inttoptr i64 %1898 to i64*
  %1900 = load i64, i64* %1899
  %1901 = add i64 %1882, 40
  %1902 = inttoptr i64 %1901 to i64*
  %1903 = load i64, i64* %1902
  %1904 = add i64 %1882, 48
  %1905 = inttoptr i64 %1904 to i64*
  %1906 = load i64, i64* %1905
  %1907 = add i64 %1882, 56
  %1908 = inttoptr i64 %1907 to i64*
  %1909 = load i64, i64* %1908
  %1910 = add i64 %1882, 64
  %1911 = inttoptr i64 %1910 to i64*
  %1912 = load i64, i64* %1911
  %1913 = add i64 %1882, 72
  %1914 = inttoptr i64 %1913 to i64*
  %1915 = load i64, i64* %1914
  %1916 = inttoptr i64 %1883 to i64*
  %1917 = load i64, i64* %1916
  store i64 %1917, i64* %3, align 8, !alias.scope !1349, !noalias !1352
  store i64 %1882, i64* %12, align 8, !alias.scope !1349, !noalias !1352
  %1918 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3686), i64 %1864, i64 %1868, i64 %1868, i64 %1885, i64 %1886, i64 %1888, i64 %1891, i64 %1894, i64 %1897, i64 %1900, i64 %1903, i64 %1906, i64 %1909, i64 %1912, i64 %1915), !noalias !1349
  %1919 = load i64, i64* %13, align 8
  %1920 = add i64 %1919, -304
  %1921 = trunc i64 %1918 to i32
  %1922 = load i64, i64* %3, align 8
  %1923 = inttoptr i64 %1920 to i32*
  store i32 %1921, i32* %1923
  %1924 = add i64 %1922, 100
  br label %block_41a2fb

block_419e48:                                     ; preds = %block_419e43, %block_4197a1
  %1925 = phi i64 [ %2011, %block_419e43 ], [ %604, %block_4197a1 ]
  %1926 = phi i64 [ %2015, %block_419e43 ], [ %627, %block_4197a1 ]
  %1927 = phi i64 [ 5, %block_419e43 ], [ 1526, %block_4197a1 ]
  %1928 = phi %struct.Memory* [ %2014, %block_419e43 ], [ %990, %block_4197a1 ]
  %1929 = add i64 %1926, %1927
  %1930 = add i64 %1925, -252
  %1931 = add i64 %1929, 10
  %1932 = inttoptr i64 %1930 to i32*
  store i32 0, i32* %1932
  %1933 = bitcast %union.VectorReg* %15 to float*
  %1934 = getelementptr inbounds i8, i8* %2456, i64 4
  %1935 = bitcast i8* %1934 to float*
  %1936 = bitcast i64* %34 to float*
  %1937 = getelementptr inbounds i8, i8* %2456, i64 12
  %1938 = bitcast i8* %1937 to float*
  %1939 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %15, i64 0, i32 0, i32 0, i32 0, i64 0
  %1940 = bitcast [32 x %union.VectorReg]* %14 to i32*
  %1941 = getelementptr inbounds i8, i8* %2457, i64 4
  %1942 = bitcast i8* %1941 to i32*
  %1943 = bitcast i64* %77 to i32*
  %1944 = getelementptr inbounds i8, i8* %2457, i64 12
  %1945 = bitcast i8* %1944 to i32*
  %1946 = load i64, i64* %13, align 8
  %1947 = add i64 %1946, -252
  %1948 = add i64 %1946, -224
  br label %block_419e52

block_41a1c9:                                     ; preds = %block_41a196, %block_41a1b2
  %1949 = phi i64 [ %977, %block_41a1b2 ], [ %1642, %block_41a196 ]
  %1950 = phi i64 [ %973, %block_41a1b2 ], [ %1637, %block_41a196 ]
  %1951 = phi %struct.Memory* [ %1957, %block_41a1b2 ], [ %1957, %block_41a196 ]
  %1952 = add i64 %1950, -252
  %1953 = add i64 %1949, 10
  %1954 = inttoptr i64 %1952 to i32*
  store i32 0, i32* %1954
  br label %block_41a1d3

block_41a045:                                     ; preds = %block_41a03b, %block_41a16d
  %1955 = phi i64 [ %910, %block_41a03b ], [ %541, %block_41a16d ]
  %1956 = phi i64 [ %906, %block_41a03b ], [ %531, %block_41a16d ]
  %1957 = phi %struct.Memory* [ %907, %block_41a03b ], [ %534, %block_41a16d ]
  %1958 = add i64 %1956, -252
  %1959 = inttoptr i64 %1958 to i32*
  %1960 = load i32, i32* %1959
  %1961 = add i32 %1960, -5
  %1962 = lshr i32 %1961, 31
  %1963 = lshr i32 %1960, 31
  %1964 = xor i32 %1962, %1963
  %1965 = add nuw nsw i32 %1964, %1963
  %1966 = icmp eq i32 %1965, 2
  %1967 = icmp ne i32 %1962, 0
  %1968 = xor i1 %1967, %1966
  %1969 = select i1 %1968, i64 13, i64 321
  %1970 = add i64 %1955, %1969
  %1971 = add i64 %1956, -32
  %1972 = inttoptr i64 %1971 to i64*
  %1973 = load i64, i64* %1972
  %1974 = inttoptr i64 %1973 to i8*
  %1975 = load i8, i8* %1974
  %1976 = sext i8 %1975 to i64
  %1977 = and i64 %1976, 4294967295
  store i64 %1977, i64* %8, align 8, !tbaa !1240
  %1978 = sext i8 %1975 to i32
  %1979 = add nsw i32 %1978, -85
  %1980 = icmp ult i8 %1975, 85
  %1981 = zext i1 %1980 to i8
  store i8 %1981, i8* %26, align 1, !tbaa !1245
  %1982 = and i32 %1979, 255
  %1983 = tail call i32 @llvm.ctpop.i32(i32 %1982) #11
  %1984 = trunc i32 %1983 to i8
  %1985 = and i8 %1984, 1
  %1986 = xor i8 %1985, 1
  store i8 %1986, i8* %27, align 1, !tbaa !1259
  %1987 = xor i32 %1978, 16
  %1988 = xor i32 %1987, %1979
  %1989 = lshr i32 %1988, 4
  %1990 = trunc i32 %1989 to i8
  %1991 = and i8 %1990, 1
  store i8 %1991, i8* %28, align 1, !tbaa !1263
  %1992 = icmp eq i32 %1979, 0
  %1993 = zext i1 %1992 to i8
  store i8 %1993, i8* %29, align 1, !tbaa !1260
  %1994 = lshr i32 %1979, 31
  %1995 = trunc i32 %1994 to i8
  store i8 %1995, i8* %30, align 1, !tbaa !1261
  %1996 = lshr i32 %1978, 31
  %1997 = xor i32 %1994, %1996
  %1998 = add nuw nsw i32 %1997, %1996
  %1999 = icmp eq i32 %1998, 2
  %2000 = zext i1 %1999 to i8
  store i8 %2000, i8* %31, align 1, !tbaa !1262
  br i1 %1968, label %block_41a052, label %block_41a186

block_419956:                                     ; preds = %block_419948
  %2001 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %2002 = add i32 %2001, -64
  %2003 = icmp eq i32 %2002, 0
  %2004 = select i1 %2003, i64 14, i64 227
  %2005 = add i64 %556, %2004
  br i1 %2003, label %block_419964, label %block_419a39

block_419b3b:                                     ; preds = %block_419b2a
  %2006 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %2007 = add i32 %2006, -162
  %2008 = icmp eq i32 %2007, 0
  %2009 = select i1 %2008, i64 17, i64 241
  %2010 = add i64 %854, %2009
  br i1 %2008, label %block_419b4c, label %block_419c2c

block_419e43:                                     ; preds = %block_419e3e, %block_419892
  %2011 = phi i64 [ %2089, %block_419e3e ], [ %1820, %block_419892 ]
  %2012 = phi i64 [ %2093, %block_419e3e ], [ %1843, %block_419892 ]
  %2013 = phi i64 [ 5, %block_419e3e ], [ 1280, %block_419892 ]
  %2014 = phi %struct.Memory* [ %2092, %block_419e3e ], [ %990, %block_419892 ]
  %2015 = add i64 %2012, %2013
  br label %block_419e48

block_419a74:                                     ; preds = %block_419a63
  %2016 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3096) to double*)
  store double %2016, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %2017 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3104) to double*)
  store double %2017, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %2018 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3112) to double*)
  store double %2018, double* %61, align 1, !tbaa !1264
  %2019 = bitcast i64* %37 to double*
  store double 0.000000e+00, double* %2019, align 1, !tbaa !1264
  %2020 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3120) to double*)
  %2021 = bitcast %union.VectorReg* %2451 to double*
  store double %2020, double* %2021, align 1, !tbaa !1264
  %2022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %2023 = bitcast i64* %2022 to double*
  store double 0.000000e+00, double* %2023, align 1, !tbaa !1264
  %2024 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3128) to double*)
  %2025 = bitcast %union.VectorReg* %17 to double*
  store double %2024, double* %2025, align 1, !tbaa !1264
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %2027 = bitcast i64* %2026 to double*
  store double 0.000000e+00, double* %2027, align 1, !tbaa !1264
  %2028 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3136) to double*)
  %2029 = bitcast %union.VectorReg* %2452 to double*
  store double %2028, double* %2029, align 1, !tbaa !1264
  %2030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %2031 = bitcast i64* %2030 to double*
  store double 0.000000e+00, double* %2031, align 1, !tbaa !1264
  %2032 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3144) to double*)
  %2033 = bitcast %union.VectorReg* %18 to double*
  store double %2032, double* %2033, align 1, !tbaa !1264
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %2035 = bitcast i64* %2034 to double*
  store double 0.000000e+00, double* %2035, align 1, !tbaa !1264
  %2036 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3152) to double*)
  %2037 = bitcast %union.VectorReg* %2453 to double*
  store double %2036, double* %2037, align 1, !tbaa !1264
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %2039 = bitcast i64* %2038 to double*
  store double 0.000000e+00, double* %2039, align 1, !tbaa !1264
  %2040 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3160) to double*)
  %2041 = bitcast %union.VectorReg* %19 to double*
  store double %2040, double* %2041, align 1, !tbaa !1264
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %2043 = bitcast i64* %2042 to double*
  store double 0.000000e+00, double* %2043, align 1, !tbaa !1264
  %2044 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3168) to double*)
  %2045 = bitcast %union.VectorReg* %2454 to double*
  store double %2044, double* %2045, align 1, !tbaa !1264
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %2047 = bitcast i64* %2046 to double*
  store double 0.000000e+00, double* %2047, align 1, !tbaa !1264
  %2048 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3176) to double*)
  %2049 = bitcast %union.VectorReg* %20 to double*
  store double %2048, double* %2049, align 1, !tbaa !1264
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %2051 = bitcast i64* %2050 to double*
  store double 0.000000e+00, double* %2051, align 1, !tbaa !1264
  %2052 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %2053 = bitcast %union.VectorReg* %2455 to double*
  store double %2052, double* %2053, align 1, !tbaa !1264
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %2055 = bitcast i64* %2054 to double*
  store double 0.000000e+00, double* %2055, align 1, !tbaa !1264
  %2056 = add i64 %69, -32
  %2057 = inttoptr i64 %2056 to i64*
  %2058 = load i64, i64* %2057
  %2059 = inttoptr i64 %2058 to i8*
  store i8 66, i8* %2059
  %2060 = add i64 %69, -248
  %2061 = inttoptr i64 %2060 to double*
  store double %2052, double* %2061
  %2062 = inttoptr i64 %78 to double*
  store double %2048, double* %2062
  %2063 = load i64, i64* %13, align 8
  %2064 = add i64 %2063, -72
  %2065 = inttoptr i64 %2064 to double*
  store double %2044, double* %2065
  %2066 = add i64 %2063, -64
  %2067 = inttoptr i64 %2066 to double*
  store double %2040, double* %2067
  %2068 = add i64 %2063, -56
  %2069 = inttoptr i64 %2068 to double*
  store double %2036, double* %2069
  %2070 = add i64 %2063, -48
  %2071 = inttoptr i64 %2070 to double*
  store double %2032, double* %2071
  %2072 = add i64 %2063, -128
  %2073 = inttoptr i64 %2072 to double*
  store double %2028, double* %2073
  %2074 = add i64 %2063, -120
  %2075 = inttoptr i64 %2074 to double*
  store double %2024, double* %2075
  %2076 = add i64 %2063, -112
  %2077 = load double, double* %2021, align 1
  %2078 = inttoptr i64 %2076 to double*
  store double %2077, double* %2078
  %2079 = add i64 %2063, -104
  %2080 = load double, double* %61, align 1
  %2081 = inttoptr i64 %2079 to double*
  store double %2080, double* %2081
  %2082 = add i64 %2063, -96
  %2083 = load double, double* %33, align 1
  %2084 = inttoptr i64 %2082 to double*
  store double %2083, double* %2084
  %2085 = add i64 %2063, -136
  %2086 = add i64 %1647, 177
  %2087 = load double, double* %51, align 1
  %2088 = inttoptr i64 %2085 to double*
  store double %2087, double* %2088
  br label %block_419e39

block_419e3e:                                     ; preds = %block_419e39, %block_419983
  %2089 = phi i64 [ %2109, %block_419e39 ], [ %299, %block_419983 ]
  %2090 = phi i64 [ %2113, %block_419e39 ], [ %322, %block_419983 ]
  %2091 = phi i64 [ 5, %block_419e39 ], [ 1034, %block_419983 ]
  %2092 = phi %struct.Memory* [ %2112, %block_419e39 ], [ %990, %block_419983 ]
  %2093 = add i64 %2090, %2091
  br label %block_419e43

block_419873:                                     ; preds = %block_419865
  %2094 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %2095 = add i32 %2094, -33
  %2096 = icmp eq i32 %2095, 0
  %2097 = select i1 %2096, i64 14, i64 213
  %2098 = add i64 %1596, %2097
  br i1 %2096, label %block_419881, label %block_419948

block_419c3d:                                     ; preds = %block_419c2c
  %2099 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %2100 = add i32 %2099, -408
  %2101 = icmp eq i32 %2100, 0
  %2102 = select i1 %2101, i64 17, i64 233
  %2103 = add i64 %2204, %2102
  br i1 %2101, label %block_419c4e, label %block_419d26

block_419c5f:                                     ; preds = %block_419c4e
  %2104 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %2105 = add i32 %2104, -300
  %2106 = icmp eq i32 %2105, 0
  %2107 = select i1 %2106, i64 17, i64 199
  %2108 = add i64 %1858, %2107
  br i1 %2106, label %block_419c70, label %block_419d26

block_419e39:                                     ; preds = %block_419e34, %block_419a74
  %2109 = phi i64 [ %2114, %block_419e34 ], [ %2063, %block_419a74 ]
  %2110 = phi i64 [ %2118, %block_419e34 ], [ %2086, %block_419a74 ]
  %2111 = phi i64 [ 5, %block_419e34 ], [ 788, %block_419a74 ]
  %2112 = phi %struct.Memory* [ %2117, %block_419e34 ], [ %990, %block_419a74 ]
  %2113 = add i64 %2110, %2111
  br label %block_419e3e

block_419e34:                                     ; preds = %block_419e2f, %block_419b6e
  %2114 = phi i64 [ %2119, %block_419e2f ], [ %372, %block_419b6e ]
  %2115 = phi i64 [ %2123, %block_419e2f ], [ %397, %block_419b6e ]
  %2116 = phi i64 [ 5, %block_419e2f ], [ 525, %block_419b6e ]
  %2117 = phi %struct.Memory* [ %2122, %block_419e2f ], [ %990, %block_419b6e ]
  %2118 = add i64 %2115, %2116
  br label %block_419e39

block_419e2f:                                     ; preds = %block_419e20, %block_419c70, %block_419d6a
  %2119 = phi i64 [ %1500, %block_419c70 ], [ %69, %block_419e20 ], [ %446, %block_419d6a ]
  %2120 = phi i64 [ %1523, %block_419c70 ], [ %2347, %block_419e20 ], [ %471, %block_419d6a ]
  %2121 = phi i64 [ 270, %block_419c70 ], [ 5, %block_419e20 ], [ 5, %block_419d6a ]
  %2122 = phi %struct.Memory* [ %990, %block_419c70 ], [ %990, %block_419e20 ], [ %990, %block_419d6a ]
  %2123 = add i64 %2120, %2121
  br label %block_419e34

block_41a29d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit219
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3724), i64* %11, align 8, !tbaa !1240
  %2124 = load i64, i64* %13, align 8
  %2125 = add i64 %2124, -40
  %2126 = inttoptr i64 %2125 to i64*
  %2127 = load i64, i64* %2126
  %2128 = inttoptr i64 %2127 to i32*
  store i32 0, i32* %2128
  %2129 = add i64 %2124, -252
  %2130 = inttoptr i64 %2129 to i32*
  %2131 = load i32, i32* %2130
  %2132 = add i32 %2131, 1
  %2133 = zext i32 %2132 to i64
  %2134 = add i64 %2124, -16
  %2135 = inttoptr i64 %2134 to i64*
  %2136 = load i64, i64* %2135
  %2137 = sext i32 %2131 to i64
  store i64 %2137, i64* %9, align 8, !tbaa !1240
  %2138 = shl nsw i64 %2137, 3
  %2139 = add i64 %2138, %2136
  %2140 = inttoptr i64 %2139 to double*
  %2141 = load double, double* %2140
  store double %2141, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %2142 = add i64 %2124, -128
  %2143 = add i64 %2142, %2138
  %2144 = inttoptr i64 %2143 to double*
  %2145 = load double, double* %2144
  store double %2145, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %2146 = add i64 %2124, -224
  %2147 = add i64 %2146, %2138
  %2148 = inttoptr i64 %2147 to double*
  %2149 = load double, double* %2148
  store double %2149, double* %61, align 1, !tbaa !1264
  store double 0.000000e+00, double* %912, align 1, !tbaa !1264
  store i64 %2133, i64* %10, align 8, !tbaa !1240
  %2150 = add i64 %2292, 83
  %2151 = load i64, i64* %12, align 8, !tbaa !1240
  %2152 = add i64 %2151, -8
  %2153 = inttoptr i64 %2152 to i64*
  store i64 %2150, i64* %2153
  %2154 = load i64, i64* %11, align 8, !alias.scope !1354, !noalias !1357
  %2155 = load i64, i64* %902, align 8, !alias.scope !1354, !noalias !1357
  %2156 = load i64, i64* %901, align 8, !alias.scope !1354, !noalias !1357
  %2157 = inttoptr i64 %2151 to i64*
  %2158 = load i64, i64* %2157
  %2159 = add i64 %2151, 8
  %2160 = inttoptr i64 %2159 to i64*
  %2161 = load i64, i64* %2160
  %2162 = add i64 %2151, 16
  %2163 = inttoptr i64 %2162 to i64*
  %2164 = load i64, i64* %2163
  %2165 = add i64 %2151, 24
  %2166 = inttoptr i64 %2165 to i64*
  %2167 = load i64, i64* %2166
  %2168 = add i64 %2151, 32
  %2169 = inttoptr i64 %2168 to i64*
  %2170 = load i64, i64* %2169
  %2171 = add i64 %2151, 40
  %2172 = inttoptr i64 %2171 to i64*
  %2173 = load i64, i64* %2172
  %2174 = add i64 %2151, 48
  %2175 = inttoptr i64 %2174 to i64*
  %2176 = load i64, i64* %2175
  %2177 = add i64 %2151, 56
  %2178 = inttoptr i64 %2177 to i64*
  %2179 = load i64, i64* %2178
  %2180 = add i64 %2151, 64
  %2181 = inttoptr i64 %2180 to i64*
  %2182 = load i64, i64* %2181
  %2183 = add i64 %2151, 72
  %2184 = inttoptr i64 %2183 to i64*
  %2185 = load i64, i64* %2184
  %2186 = inttoptr i64 %2152 to i64*
  %2187 = load i64, i64* %2186
  store i64 %2187, i64* %3, align 8, !alias.scope !1354, !noalias !1357
  store i64 %2151, i64* %12, align 8, !alias.scope !1354, !noalias !1357
  %2188 = tail call i64 @printf(i64 %2154, i64 %2133, i64 %2137, i64 %2133, i64 %2155, i64 %2156, i64 %2158, i64 %2161, i64 %2164, i64 %2167, i64 %2170, i64 %2173, i64 %2176, i64 %2179, i64 %2182, i64 %2185), !noalias !1354
  %2189 = load i64, i64* %13, align 8
  %2190 = add i64 %2189, -308
  %2191 = trunc i64 %2188 to i32
  %2192 = load i64, i64* %3, align 8
  %2193 = add i64 %2192, 6
  %2194 = inttoptr i64 %2190 to i32*
  store i32 %2191, i32* %2194
  br label %block_41a2fb

block_419a47:                                     ; preds = %block_419a39
  %2195 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %2196 = add i32 %2195, -102
  %2197 = icmp eq i32 %2196, 0
  %2198 = select i1 %2197, i64 14, i64 227
  %2199 = add i64 %251, %2198
  br i1 %2197, label %block_419a55, label %block_419b2a

block_419c2c:                                     ; preds = %block_419b3b, %block_419b4c, %block_419b2a, %block_419b5d
  %2200 = phi i64 [ %2010, %block_419b3b ], [ %1206, %block_419b4c ], [ %854, %block_419b2a ], [ %546, %block_419b5d ]
  %2201 = add i32 %2461, -408
  %2202 = icmp eq i32 %2201, 0
  %2203 = select i1 %2202, i64 17, i64 250
  %2204 = add i64 %2200, %2203
  br i1 %2202, label %block_419c3d, label %block_419d26

block_419fe1:                                     ; preds = %block_419efd
  %2205 = add i64 %1144, 17
  %2206 = load i64, i64* %12, align 8, !tbaa !1240
  %2207 = add i64 %2206, -8
  %2208 = inttoptr i64 %2207 to i64*
  store i64 %2205, i64* %2208
  %2209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %2212 = load i64, i64* %2209, align 8, !alias.scope !1359, !noalias !1362
  %2213 = load i64, i64* %9, align 8, !alias.scope !1359, !noalias !1362
  %2214 = load i64, i64* %2210, align 8, !alias.scope !1359, !noalias !1362
  %2215 = load i64, i64* %2211, align 8, !alias.scope !1359, !noalias !1362
  %2216 = inttoptr i64 %2206 to i64*
  %2217 = load i64, i64* %2216
  %2218 = add i64 %2206, 8
  %2219 = inttoptr i64 %2218 to i64*
  %2220 = load i64, i64* %2219
  %2221 = add i64 %2206, 16
  %2222 = inttoptr i64 %2221 to i64*
  %2223 = load i64, i64* %2222
  %2224 = add i64 %2206, 24
  %2225 = inttoptr i64 %2224 to i64*
  %2226 = load i64, i64* %2225
  %2227 = add i64 %2206, 32
  %2228 = inttoptr i64 %2227 to i64*
  %2229 = load i64, i64* %2228
  %2230 = add i64 %2206, 40
  %2231 = inttoptr i64 %2230 to i64*
  %2232 = load i64, i64* %2231
  %2233 = add i64 %2206, 48
  %2234 = inttoptr i64 %2233 to i64*
  %2235 = load i64, i64* %2234
  %2236 = add i64 %2206, 56
  %2237 = inttoptr i64 %2236 to i64*
  %2238 = load i64, i64* %2237
  %2239 = add i64 %2206, 64
  %2240 = inttoptr i64 %2239 to i64*
  %2241 = load i64, i64* %2240
  %2242 = add i64 %2206, 72
  %2243 = inttoptr i64 %2242 to i64*
  %2244 = load i64, i64* %2243
  %2245 = inttoptr i64 %2207 to i64*
  %2246 = load i64, i64* %2245
  store i64 %2246, i64* %3, align 8, !alias.scope !1359, !noalias !1362
  store i64 %2206, i64* %12, align 8, !alias.scope !1359, !noalias !1362
  %2247 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3608), i64 %2212, i64 %2213, i64 %1119, i64 %2214, i64 %2215, i64 %2217, i64 %2220, i64 %2223, i64 %2226, i64 %2229, i64 %2232, i64 %2235, i64 %2238, i64 %2241, i64 %2244), !noalias !1359
  %2248 = load i64, i64* %13, align 8
  %2249 = add i64 %2248, -268
  %2250 = trunc i64 %2247 to i32
  %2251 = load i64, i64* %3, align 8
  %2252 = add i64 %2251, 6
  %2253 = inttoptr i64 %2249 to i32*
  store i32 %2250, i32* %2253
  br label %block_419ff8

block_41a227:                                     ; preds = %block_41a1e0
  %2254 = sext i32 %1368 to i64
  store i64 %2254, i64* %7, align 8, !tbaa !1240
  %2255 = shl nsw i64 %2254, 3
  %2256 = add i64 %1364, -224
  %2257 = add i64 %2256, %2255
  %2258 = inttoptr i64 %2257 to double*
  %2259 = load double, double* %2258
  store double %2259, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %2260 = add i64 %1364, -240
  %2261 = inttoptr i64 %2260 to double*
  %2262 = load double, double* %2261
  store double %2262, double* %33, align 1, !tbaa !1264
  store double 0.000000e+00, double* %35, align 1, !tbaa !1264
  %2263 = add i64 %137, 28
  store i64 %2263, i64* %3, align 8
  %2264 = fcmp uno double %2262, %2259
  br i1 %2264, label %2265, label %2277

; <label>:2265:                                   ; preds = %block_41a227
  %2266 = fadd double %2262, %2259
  %2267 = bitcast double %2266 to i64
  %2268 = and i64 %2267, 9221120237041090560
  %2269 = icmp eq i64 %2268, 9218868437227405312
  %2270 = and i64 %2267, 2251799813685247
  %2271 = icmp ne i64 %2270, 0
  %2272 = and i1 %2269, %2271
  br i1 %2272, label %2273, label %2283

; <label>:2273:                                   ; preds = %2265
  %2274 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2263, %struct.Memory* %1365) #14
  %2275 = load i64, i64* %3, align 8
  %2276 = load i8, i8* %26, align 1, !tbaa !1245
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit219

; <label>:2277:                                   ; preds = %block_41a227
  %2278 = fcmp ogt double %2262, %2259
  br i1 %2278, label %2283, label %2279

; <label>:2279:                                   ; preds = %2277
  %2280 = fcmp olt double %2262, %2259
  br i1 %2280, label %2283, label %2281

; <label>:2281:                                   ; preds = %2279
  %2282 = fcmp oeq double %2262, %2259
  br i1 %2282, label %2283, label %2285

; <label>:2283:                                   ; preds = %2281, %2279, %2277, %2265
  %2284 = phi i8 [ 0, %2277 ], [ 1, %2279 ], [ 0, %2281 ], [ 1, %2265 ]
  br label %2285

; <label>:2285:                                   ; preds = %2283, %2281
  %2286 = phi i8 [ %2284, %2283 ], [ %1389, %2281 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit219

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit219: ; preds = %2285, %2273
  %2287 = phi i8 [ %2276, %2273 ], [ %2286, %2285 ]
  %2288 = phi i64 [ %2275, %2273 ], [ %2263, %2285 ]
  %2289 = phi %struct.Memory* [ %2274, %2273 ], [ %1365, %2285 ]
  %2290 = icmp ne i8 %2287, 0
  %2291 = select i1 %2290, i64 90, i64 6
  %2292 = add i64 %2288, %2291
  %2293 = icmp eq i8 %2287, 1
  br i1 %2293, label %block_41a29d, label %block_41a249

block_41a024:                                     ; preds = %block_419ff8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3638), i64* %11, align 8, !tbaa !1240
  %2294 = add i64 %1091, 17
  %2295 = load i64, i64* %12, align 8, !tbaa !1240
  %2296 = add i64 %2295, -8
  %2297 = inttoptr i64 %2296 to i64*
  store i64 %2294, i64* %2297
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %2300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %2301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %2302 = load i64, i64* %2299, align 8, !alias.scope !1364, !noalias !1367
  %2303 = load i64, i64* %9, align 8, !alias.scope !1364, !noalias !1367
  %2304 = load i64, i64* %2300, align 8, !alias.scope !1364, !noalias !1367
  %2305 = load i64, i64* %2301, align 8, !alias.scope !1364, !noalias !1367
  %2306 = inttoptr i64 %2295 to i64*
  %2307 = load i64, i64* %2306
  %2308 = add i64 %2295, 8
  %2309 = inttoptr i64 %2308 to i64*
  %2310 = load i64, i64* %2309
  %2311 = add i64 %2295, 16
  %2312 = inttoptr i64 %2311 to i64*
  %2313 = load i64, i64* %2312
  %2314 = add i64 %2295, 24
  %2315 = inttoptr i64 %2314 to i64*
  %2316 = load i64, i64* %2315
  %2317 = add i64 %2295, 32
  %2318 = inttoptr i64 %2317 to i64*
  %2319 = load i64, i64* %2318
  %2320 = add i64 %2295, 40
  %2321 = inttoptr i64 %2320 to i64*
  %2322 = load i64, i64* %2321
  %2323 = add i64 %2295, 48
  %2324 = inttoptr i64 %2323 to i64*
  %2325 = load i64, i64* %2324
  %2326 = add i64 %2295, 56
  %2327 = inttoptr i64 %2326 to i64*
  %2328 = load i64, i64* %2327
  %2329 = add i64 %2295, 64
  %2330 = inttoptr i64 %2329 to i64*
  %2331 = load i64, i64* %2330
  %2332 = add i64 %2295, 72
  %2333 = inttoptr i64 %2332 to i64*
  %2334 = load i64, i64* %2333
  %2335 = inttoptr i64 %2296 to i64*
  %2336 = load i64, i64* %2335
  store i64 %2336, i64* %3, align 8, !alias.scope !1364, !noalias !1367
  store i64 %2295, i64* %12, align 8, !alias.scope !1364, !noalias !1367
  %2337 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3638), i64 %2302, i64 %2303, i64 %1086, i64 %2304, i64 %2305, i64 %2307, i64 %2310, i64 %2313, i64 %2316, i64 %2319, i64 %2322, i64 %2325, i64 %2328, i64 %2331, i64 %2334), !noalias !1364
  %2338 = load i64, i64* %13, align 8
  %2339 = add i64 %2338, -276
  %2340 = trunc i64 %2337 to i32
  %2341 = load i64, i64* %3, align 8
  %2342 = add i64 %2341, 6
  %2343 = inttoptr i64 %2339 to i32*
  store i32 %2340, i32* %2343
  br label %block_41a03b

block_419e20:                                     ; preds = %block_419d37, %block_419d26, %block_419d59, %block_419d48
  %2344 = phi i64 [ %2556, %block_419d37 ], [ %988, %block_419d26 ], [ %551, %block_419d59 ], [ %207, %block_419d48 ]
  %2345 = inttoptr i64 %70 to i64*
  %2346 = load i64, i64* %2345
  %2347 = add i64 %2344, 10
  %2348 = inttoptr i64 %2346 to i32*
  store i32 0, i32* %2348
  br label %block_419e2f

block_41a2fb:                                     ; preds = %block_41a29d, %block_41a249, %block_41a1f0
  %2349 = phi i64 [ %128, %block_41a1f0 ], [ %2189, %block_41a29d ], [ %1919, %block_41a249 ]
  %2350 = phi i64 [ %132, %block_41a1f0 ], [ %2193, %block_41a29d ], [ %1924, %block_41a249 ]
  %2351 = phi i64 [ 217, %block_41a1f0 ], [ 5, %block_41a29d ], [ 5, %block_41a249 ]
  %2352 = phi %struct.Memory* [ %1365, %block_41a1f0 ], [ %2289, %block_41a29d ], [ %2289, %block_41a249 ]
  %2353 = add i64 %2350, %2351
  %2354 = add i64 %2349, -252
  %2355 = inttoptr i64 %2354 to i32*
  %2356 = load i32, i32* %2355
  %2357 = add i32 %2356, 1
  %2358 = inttoptr i64 %2354 to i32*
  store i32 %2357, i32* %2358
  %2359 = add i64 %2353, -296
  br label %block_41a1d3

block_41a41e:                                     ; preds = %block_41a40e
  %2360 = add i64 %2551, 17
  %2361 = load i64, i64* %12, align 8, !tbaa !1240
  %2362 = add i64 %2361, -8
  %2363 = inttoptr i64 %2362 to i64*
  store i64 %2360, i64* %2363
  %2364 = load i64, i64* %903, align 8, !alias.scope !1369, !noalias !1372
  %2365 = load i64, i64* %9, align 8, !alias.scope !1369, !noalias !1372
  %2366 = load i64, i64* %902, align 8, !alias.scope !1369, !noalias !1372
  %2367 = load i64, i64* %901, align 8, !alias.scope !1369, !noalias !1372
  %2368 = inttoptr i64 %2361 to i64*
  %2369 = load i64, i64* %2368
  %2370 = add i64 %2361, 8
  %2371 = inttoptr i64 %2370 to i64*
  %2372 = load i64, i64* %2371
  %2373 = add i64 %2361, 16
  %2374 = inttoptr i64 %2373 to i64*
  %2375 = load i64, i64* %2374
  %2376 = add i64 %2361, 24
  %2377 = inttoptr i64 %2376 to i64*
  %2378 = load i64, i64* %2377
  %2379 = add i64 %2361, 32
  %2380 = inttoptr i64 %2379 to i64*
  %2381 = load i64, i64* %2380
  %2382 = add i64 %2361, 40
  %2383 = inttoptr i64 %2382 to i64*
  %2384 = load i64, i64* %2383
  %2385 = add i64 %2361, 48
  %2386 = inttoptr i64 %2385 to i64*
  %2387 = load i64, i64* %2386
  %2388 = add i64 %2361, 56
  %2389 = inttoptr i64 %2388 to i64*
  %2390 = load i64, i64* %2389
  %2391 = add i64 %2361, 64
  %2392 = inttoptr i64 %2391 to i64*
  %2393 = load i64, i64* %2392
  %2394 = add i64 %2361, 72
  %2395 = inttoptr i64 %2394 to i64*
  %2396 = load i64, i64* %2395
  %2397 = inttoptr i64 %2362 to i64*
  %2398 = load i64, i64* %2397
  store i64 %2398, i64* %3, align 8, !alias.scope !1369, !noalias !1372
  store i64 %2361, i64* %12, align 8, !alias.scope !1369, !noalias !1372
  %2399 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3955), i64 %2364, i64 %2365, i64 %2546, i64 %2366, i64 %2367, i64 %2369, i64 %2372, i64 %2375, i64 %2378, i64 %2381, i64 %2384, i64 %2387, i64 %2390, i64 %2393, i64 %2396), !noalias !1369
  %2400 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3986), i64* %11, align 8, !tbaa !1240
  %2401 = load i64, i64* %13, align 8
  %2402 = add i64 %2401, -332
  %2403 = trunc i64 %2399 to i32
  %2404 = inttoptr i64 %2402 to i32*
  store i32 %2403, i32* %2404
  %2405 = add i64 %2400, 23
  %2406 = load i64, i64* %12, align 8, !tbaa !1240
  %2407 = add i64 %2406, -8
  %2408 = inttoptr i64 %2407 to i64*
  store i64 %2405, i64* %2408
  %2409 = load i64, i64* %903, align 8, !alias.scope !1374, !noalias !1377
  %2410 = load i64, i64* %9, align 8, !alias.scope !1374, !noalias !1377
  %2411 = load i64, i64* %908, align 8, !alias.scope !1374, !noalias !1377
  %2412 = load i64, i64* %902, align 8, !alias.scope !1374, !noalias !1377
  %2413 = load i64, i64* %901, align 8, !alias.scope !1374, !noalias !1377
  %2414 = inttoptr i64 %2406 to i64*
  %2415 = load i64, i64* %2414
  %2416 = add i64 %2406, 8
  %2417 = inttoptr i64 %2416 to i64*
  %2418 = load i64, i64* %2417
  %2419 = add i64 %2406, 16
  %2420 = inttoptr i64 %2419 to i64*
  %2421 = load i64, i64* %2420
  %2422 = add i64 %2406, 24
  %2423 = inttoptr i64 %2422 to i64*
  %2424 = load i64, i64* %2423
  %2425 = add i64 %2406, 32
  %2426 = inttoptr i64 %2425 to i64*
  %2427 = load i64, i64* %2426
  %2428 = add i64 %2406, 40
  %2429 = inttoptr i64 %2428 to i64*
  %2430 = load i64, i64* %2429
  %2431 = add i64 %2406, 48
  %2432 = inttoptr i64 %2431 to i64*
  %2433 = load i64, i64* %2432
  %2434 = add i64 %2406, 56
  %2435 = inttoptr i64 %2434 to i64*
  %2436 = load i64, i64* %2435
  %2437 = add i64 %2406, 64
  %2438 = inttoptr i64 %2437 to i64*
  %2439 = load i64, i64* %2438
  %2440 = add i64 %2406, 72
  %2441 = inttoptr i64 %2440 to i64*
  %2442 = load i64, i64* %2441
  %2443 = inttoptr i64 %2407 to i64*
  %2444 = load i64, i64* %2443
  store i64 %2444, i64* %3, align 8, !alias.scope !1374, !noalias !1377
  store i64 %2406, i64* %12, align 8, !alias.scope !1374, !noalias !1377
  %2445 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3986), i64 %2409, i64 %2410, i64 %2411, i64 %2412, i64 %2413, i64 %2415, i64 %2418, i64 %2421, i64 %2424, i64 %2427, i64 %2430, i64 %2433, i64 %2436, i64 %2439, i64 %2442), !noalias !1374
  store i64 %2445, i64* %904, align 8, !alias.scope !1374, !noalias !1377
  %2446 = load i64, i64* %13, align 8
  %2447 = add i64 %2446, -336
  %2448 = trunc i64 %2445 to i32
  %2449 = inttoptr i64 %2447 to i32*
  store i32 %2448, i32* %2449
  br label %block_41a496

block_419759:                                     ; preds = %block_419716
  %2450 = bitcast %union.anon* %5 to i8*
  %2451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7
  %2454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11
  %2456 = bitcast %union.VectorReg* %15 to i8*
  %2457 = bitcast [32 x %union.VectorReg]* %14 to i8*
  %2458 = bitcast i64* %77 to double*
  store double %1003, double* %51, align 1
  store double 0.000000e+00, double* %2458, align 1, !tbaa !1264
  %2459 = add i64 %69, -136
  %2460 = inttoptr i64 %2459 to double*
  store double %1003, double* %2460
  %2461 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %2462 = add i32 %2461, -12
  %2463 = icmp eq i32 %2462, 0
  %2464 = select i1 %2463, i64 30, i64 254
  %2465 = add i64 %1002, %2464
  br i1 %2463, label %block_419777, label %block_419857

block_419972:                                     ; preds = %block_419964
  %2466 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %2467 = add i32 %2466, -250
  %2468 = icmp eq i32 %2467, 0
  %2469 = select i1 %2468, i64 17, i64 199
  %2470 = add i64 %525, %2469
  br i1 %2468, label %block_419983, label %block_419a39

block_419e5f:                                     ; preds = %block_419e52
  %2471 = add i64 %1757, -8
  %2472 = inttoptr i64 %2471 to i64*
  %2473 = load i64, i64* %2472
  %2474 = sext i32 %1762 to i64
  %2475 = shl nsw i64 %2474, 3
  %2476 = add i64 %2475, %2473
  %2477 = inttoptr i64 %2476 to double*
  %2478 = load double, double* %2477
  %2479 = add i64 %1757, -80
  %2480 = add i64 %2479, %2475
  %2481 = inttoptr i64 %2480 to double*
  %2482 = load double, double* %2481
  %2483 = fsub double %2478, %2482
  %2484 = fdiv double %2483, %2482
  %2485 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3456) to float*)
  %2486 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3460) to float*)
  store float %2485, float* %1933, align 1, !tbaa !1292
  store float %2486, float* %1935, align 1, !tbaa !1292
  %2487 = bitcast double %2484 to i64
  %2488 = load i64, i64* %1939, align 1
  %2489 = and i64 %2488, %2487
  %2490 = trunc i64 %2489 to i32
  %2491 = lshr i64 %2489, 32
  %2492 = trunc i64 %2491 to i32
  store i32 %2490, i32* %1940, align 1, !tbaa !1266
  store i32 %2492, i32* %1942, align 1, !tbaa !1266
  %2493 = add i64 %1757, -176
  %2494 = add i64 %2493, %2475
  %2495 = load double, double* %51, align 1
  %2496 = inttoptr i64 %2494 to double*
  store double %2495, double* %2496
  %2497 = add i64 %1757, -16
  %2498 = inttoptr i64 %2497 to i64*
  %2499 = load i64, i64* %2498
  %2500 = inttoptr i64 %1759 to i32*
  %2501 = load i32, i32* %2500
  %2502 = sext i32 %2501 to i64
  %2503 = shl nsw i64 %2502, 3
  %2504 = add i64 %2503, %2499
  %2505 = inttoptr i64 %2504 to double*
  %2506 = load double, double* %2505
  %2507 = add i64 %1757, -128
  %2508 = add i64 %2507, %2503
  %2509 = inttoptr i64 %2508 to double*
  %2510 = load double, double* %2509
  %2511 = fsub double %2506, %2510
  %2512 = fdiv double %2511, %2510
  %2513 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3456) to float*)
  %2514 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3460) to float*)
  %2515 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3464) to float*)
  %2516 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3468) to float*)
  store float %2513, float* %1933, align 1, !tbaa !1292
  store float %2514, float* %1935, align 1, !tbaa !1292
  store float %2515, float* %1936, align 1, !tbaa !1292
  store float %2516, float* %1938, align 1, !tbaa !1292
  %2517 = bitcast double %2512 to i64
  %2518 = load i64, i64* %1939, align 1
  %2519 = and i64 %2518, %2517
  %2520 = trunc i64 %2519 to i32
  %2521 = lshr i64 %2519, 32
  %2522 = trunc i64 %2521 to i32
  store i32 %2520, i32* %1940, align 1, !tbaa !1266
  store i32 %2522, i32* %1942, align 1, !tbaa !1266
  store i32 0, i32* %1943, align 1, !tbaa !1266
  store i32 0, i32* %1945, align 1, !tbaa !1266
  %2523 = inttoptr i64 %1947 to i32*
  %2524 = load i32, i32* %2523
  %2525 = sext i32 %2524 to i64
  %2526 = shl nsw i64 %2525, 3
  %2527 = add i64 %1948, %2526
  %2528 = load double, double* %51, align 1
  %2529 = inttoptr i64 %2527 to double*
  store double %2528, double* %2529
  %2530 = inttoptr i64 %1947 to i32*
  %2531 = load i32, i32* %2530
  %2532 = add i32 %2531, 1
  %2533 = inttoptr i64 %1947 to i32*
  store i32 %2532, i32* %2533
  %2534 = add i64 %1772, -13
  br label %block_419e52

block_41a40e:                                     ; preds = %block_41a3a2, %block_41a367, %block_41a3d3
  %2535 = phi i64 [ %515, %block_41a367 ], [ %1196, %block_41a3a2 ], [ %197, %block_41a3d3 ]
  %2536 = phi i64 [ %519, %block_41a367 ], [ %1201, %block_41a3a2 ], [ %201, %block_41a3d3 ]
  %2537 = phi i64 [ 139, %block_41a367 ], [ 5, %block_41a3a2 ], [ 5, %block_41a3d3 ]
  %2538 = phi %struct.Memory* [ %1330, %block_41a367 ], [ %240, %block_41a3a2 ], [ %240, %block_41a3d3 ]
  %2539 = add i64 %2536, %2537
  %2540 = add i64 %2535, -32
  %2541 = inttoptr i64 %2540 to i64*
  %2542 = load i64, i64* %2541
  %2543 = inttoptr i64 %2542 to i8*
  %2544 = load i8, i8* %2543
  %2545 = sext i8 %2544 to i64
  %2546 = and i64 %2545, 4294967295
  store i64 %2546, i64* %8, align 8, !tbaa !1240
  %2547 = sext i8 %2544 to i32
  %2548 = add nsw i32 %2547, -85
  %2549 = icmp eq i32 %2548, 0
  %2550 = select i1 %2549, i64 16, i64 67
  %2551 = add i64 %2539, %2550
  br i1 %2549, label %block_41a41e, label %block_41a451

block_419d37:                                     ; preds = %block_419d26
  %2552 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %2553 = add i32 %2552, -1020
  %2554 = icmp eq i32 %2553, 0
  %2555 = select i1 %2554, i64 17, i64 233
  %2556 = add i64 %988, %2555
  br i1 %2554, label %block_419d48, label %block_419e20

block_41a008:                                     ; preds = %block_419ff8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3624), i64* %11, align 8, !tbaa !1240
  %2557 = add i64 %1091, 17
  %2558 = load i64, i64* %12, align 8, !tbaa !1240
  %2559 = add i64 %2558, -8
  %2560 = inttoptr i64 %2559 to i64*
  store i64 %2557, i64* %2560
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %2565 = load i64, i64* %2562, align 8, !alias.scope !1379, !noalias !1382
  %2566 = load i64, i64* %9, align 8, !alias.scope !1379, !noalias !1382
  %2567 = load i64, i64* %2563, align 8, !alias.scope !1379, !noalias !1382
  %2568 = load i64, i64* %2564, align 8, !alias.scope !1379, !noalias !1382
  %2569 = inttoptr i64 %2558 to i64*
  %2570 = load i64, i64* %2569
  %2571 = add i64 %2558, 8
  %2572 = inttoptr i64 %2571 to i64*
  %2573 = load i64, i64* %2572
  %2574 = add i64 %2558, 16
  %2575 = inttoptr i64 %2574 to i64*
  %2576 = load i64, i64* %2575
  %2577 = add i64 %2558, 24
  %2578 = inttoptr i64 %2577 to i64*
  %2579 = load i64, i64* %2578
  %2580 = add i64 %2558, 32
  %2581 = inttoptr i64 %2580 to i64*
  %2582 = load i64, i64* %2581
  %2583 = add i64 %2558, 40
  %2584 = inttoptr i64 %2583 to i64*
  %2585 = load i64, i64* %2584
  %2586 = add i64 %2558, 48
  %2587 = inttoptr i64 %2586 to i64*
  %2588 = load i64, i64* %2587
  %2589 = add i64 %2558, 56
  %2590 = inttoptr i64 %2589 to i64*
  %2591 = load i64, i64* %2590
  %2592 = add i64 %2558, 64
  %2593 = inttoptr i64 %2592 to i64*
  %2594 = load i64, i64* %2593
  %2595 = add i64 %2558, 72
  %2596 = inttoptr i64 %2595 to i64*
  %2597 = load i64, i64* %2596
  %2598 = inttoptr i64 %2559 to i64*
  %2599 = load i64, i64* %2598
  store i64 %2599, i64* %3, align 8, !alias.scope !1379, !noalias !1382
  store i64 %2558, i64* %12, align 8, !alias.scope !1379, !noalias !1382
  %2600 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 3624), i64 %2565, i64 %2566, i64 %1086, i64 %2567, i64 %2568, i64 %2570, i64 %2573, i64 %2576, i64 %2579, i64 %2582, i64 %2585, i64 %2588, i64 %2591, i64 %2594, i64 %2597), !noalias !1379
  %2601 = load i64, i64* %13, align 8
  %2602 = add i64 %2601, -272
  %2603 = trunc i64 %2600 to i32
  %2604 = load i64, i64* %3, align 8
  %2605 = inttoptr i64 %2602 to i32*
  store i32 %2603, i32* %2605
  %2606 = add i64 %2604, 34
  br label %block_41a03b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408980_exact(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_408980:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %20 = load i64, i64* %14, align 8
  %21 = load i64, i64* %13, align 8, !tbaa !1240
  %22 = add i64 %21, -8
  %23 = inttoptr i64 %22 to i64*
  store i64 %20, i64* %23
  store i64 %22, i64* %13, align 8, !tbaa !1240
  store i64 %22, i64* %14, align 8, !tbaa !1240
  %24 = add i64 %21, -12
  %25 = load i32, i32* %9, align 4
  %26 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %26
  %27 = add i64 %21, -16
  %28 = load i32, i32* %7, align 4
  %29 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %29
  %30 = add i64 %21, -20
  %31 = load i32, i32* %5, align 4
  %32 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %32
  %33 = add i64 %21, -32
  %34 = load i64, i64* %11, align 8
  %35 = inttoptr i64 %33 to i64*
  store i64 %34, i64* %35
  %36 = add i64 %21, -12
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sitofp i32 %38 to double
  %40 = bitcast [32 x %union.VectorReg]* %15 to double*
  %41 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %42 = add i32 %41, -1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = sitofp i32 %42 to double
  %50 = bitcast %union.VectorReg* %16 to double*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = fdiv double %39, %49
  %53 = add i64 %21, -48
  %54 = inttoptr i64 %53 to double*
  store double %52, double* %54
  %55 = add i64 %21, -16
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = sitofp i32 %57 to double
  %59 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %60 = add i32 %59, -1
  %61 = sitofp i32 %60 to double
  %62 = fdiv double %58, %61
  %63 = load i64, i64* %14, align 8
  %64 = add i64 %63, -48
  %65 = inttoptr i64 %64 to double*
  store double %62, double* %65
  %66 = add i64 %63, -12
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67
  %69 = sitofp i32 %68 to double
  %70 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %71 = add i32 %70, -1
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %12, align 8, !tbaa !1240
  %73 = sitofp i32 %71 to double
  store double %73, double* %50, align 1, !tbaa !1264
  %74 = fdiv double %69, %73
  store double %74, double* %40, align 1, !tbaa !1264
  %75 = add i64 %63, -56
  %76 = inttoptr i64 %75 to double*
  store double %74, double* %76
  %77 = add i64 %63, -28
  %78 = inttoptr i64 %77 to i32*
  store i32 0, i32* %78
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %80 = bitcast %union.VectorReg* %17 to double*
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %82 = bitcast %union.VectorReg* %18 to double*
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %84 = bitcast %union.VectorReg* %19 to double*
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %86 = add i64 %63, -40
  %87 = add i64 %63, -24
  br label %block_4089f2

block_4089fc:                                     ; preds = %block_4089f2
  store i64 ptrtoint (%ce_type* @ce to i64), i64* %10, align 8, !tbaa !1240
  %88 = sext i32 %173 to i64
  %89 = mul nsw i64 %88, 104
  %90 = add i64 %89, ptrtoint (%ce_type* @ce to i64)
  %91 = inttoptr i64 %90 to double*
  %92 = load double, double* %91
  %93 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 8)
  %94 = inttoptr i64 %93 to double*
  %95 = load double, double* %94
  %96 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 32)
  %97 = inttoptr i64 %96 to double*
  %98 = load double, double* %97
  %99 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 56)
  %100 = inttoptr i64 %99 to double*
  %101 = load double, double* %100
  %102 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 80)
  %103 = inttoptr i64 %102 to double*
  %104 = load double, double* %103
  %105 = inttoptr i64 %86 to double*
  %106 = load double, double* %105
  %107 = fmul double %104, %106
  %108 = fadd double %101, %107
  %109 = fmul double %108, %106
  %110 = fadd double %98, %109
  %111 = fmul double %110, %106
  %112 = fadd double %95, %111
  %113 = fmul double %112, %106
  %114 = fadd double %92, %113
  %115 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 16)
  %116 = inttoptr i64 %115 to double*
  %117 = load double, double* %116
  %118 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 40)
  %119 = inttoptr i64 %118 to double*
  %120 = load double, double* %119
  %121 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 64)
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  %124 = add i64 %89, add (i64 ptrtoint (%ce_type* @ce to i64), i64 88)
  %125 = inttoptr i64 %124 to double*
  %126 = load double, double* %125
  %127 = inttoptr i64 %64 to double*
  %128 = load double, double* %127
  %129 = fmul double %126, %128
  %130 = fadd double %129, %123
  %131 = fmul double %130, %128
  %132 = fadd double %120, %131
  %133 = fmul double %132, %128
  %134 = fadd double %117, %133
  %135 = fmul double %134, %128
  %136 = fadd double %114, %135
  %137 = load i64, i64* %10, align 8
  %138 = add i64 %89, %137
  %139 = add i64 %138, 24
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  %142 = add i64 %138, 48
  %143 = inttoptr i64 %142 to double*
  %144 = load double, double* %143
  store i64 %138, i64* %12, align 8, !tbaa !1240
  %145 = add i64 %138, 72
  %146 = inttoptr i64 %145 to double*
  %147 = load double, double* %146
  %148 = add i64 %138, 96
  %149 = inttoptr i64 %148 to double*
  %150 = load double, double* %149
  %151 = inttoptr i64 %75 to double*
  %152 = load double, double* %151
  %153 = fmul double %150, %152
  store double %153, double* %84, align 1, !tbaa !1264
  store i64 0, i64* %85, align 1, !tbaa !1264
  %154 = fadd double %153, %147
  %155 = fmul double %154, %152
  store double %155, double* %82, align 1, !tbaa !1264
  store i64 0, i64* %83, align 1, !tbaa !1264
  %156 = fadd double %144, %155
  %157 = fmul double %156, %152
  store double %157, double* %80, align 1, !tbaa !1264
  store i64 0, i64* %81, align 1, !tbaa !1264
  %158 = fadd double %141, %157
  %159 = fmul double %158, %152
  store double %159, double* %50, align 1, !tbaa !1264
  store i64 0, i64* %79, align 1, !tbaa !1264
  %160 = fadd double %136, %159
  store double %160, double* %40, align 1, !tbaa !1264
  store i64 0, i64* %51, align 1, !tbaa !1264
  %161 = inttoptr i64 %87 to i64*
  %162 = load i64, i64* %161
  store i64 %88, i64* %11, align 8, !tbaa !1240
  %163 = shl nsw i64 %88, 3
  %164 = add i64 %163, %162
  %165 = inttoptr i64 %164 to double*
  store double %160, double* %165
  %166 = inttoptr i64 %77 to i32*
  %167 = load i32, i32* %166
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  store i64 %169, i64* %10, align 8, !tbaa !1240
  %170 = inttoptr i64 %77 to i32*
  store i32 %168, i32* %170
  br label %block_4089f2

block_4089f2:                                     ; preds = %block_4089fc, %block_408980
  %171 = phi %struct.Memory* [ %2, %block_408980 ], [ %171, %block_4089fc ]
  %172 = inttoptr i64 %77 to i32*
  %173 = load i32, i32* %172
  %174 = add i32 %173, -5
  %175 = lshr i32 %174, 31
  %176 = trunc i32 %175 to i8
  %177 = lshr i32 %173, 31
  %178 = xor i32 %175, %177
  %179 = add nuw nsw i32 %178, %177
  %180 = icmp eq i32 %179, 2
  %181 = icmp ne i8 %176, 0
  %182 = xor i1 %181, %180
  br i1 %182, label %block_4089fc, label %block_408b80

block_408b80:                                     ; preds = %block_4089f2
  %183 = icmp ult i32 %173, 5
  %184 = zext i1 %183 to i8
  %185 = and i32 %174, 255
  %186 = tail call i32 @llvm.ctpop.i32(i32 %185) #11
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  %190 = xor i32 %174, %173
  %191 = lshr i32 %190, 4
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = icmp eq i32 %174, 0
  %195 = zext i1 %194 to i8
  %196 = zext i1 %180 to i8
  store i8 %184, i8* %43, align 1, !tbaa !1245
  store i8 %189, i8* %44, align 1, !tbaa !1259
  store i8 %193, i8* %45, align 1, !tbaa !1263
  store i8 %195, i8* %46, align 1, !tbaa !1260
  store i8 %176, i8* %47, align 1, !tbaa !1261
  store i8 %196, i8* %48, align 1, !tbaa !1262
  %197 = load i64, i64* %13, align 8, !tbaa !1240
  %198 = add i64 %197, 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199
  store i64 %200, i64* %14, align 8, !tbaa !1240
  %201 = inttoptr i64 %198 to i64*
  %202 = load i64, i64* %201
  store i64 %202, i64* %3, align 8, !tbaa !1240
  %203 = add i64 %197, 16
  store i64 %203, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %171
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007d0_blts(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4007d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %15 = bitcast %union.anon* %14 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %17 = bitcast %union.anon* %16 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %19 = bitcast %union.anon* %18 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %21 = bitcast %union.anon* %20 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %23 = bitcast %union.anon* %22 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %25 = bitcast %union.anon* %24 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %27 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %28 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %29 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %30 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %31 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %34 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %35 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %38 = getelementptr inbounds %union.anon, %union.anon* %22, i64 0, i32 0
  %39 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %44 = load i64, i64* %33, align 8
  %45 = load i64, i64* %32, align 8, !tbaa !1240
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47
  store i64 %46, i64* %33, align 8, !tbaa !1240
  %48 = load i64, i64* %39, align 8
  %49 = add i64 %45, -16
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50
  %51 = load i64, i64* %38, align 8
  %52 = add i64 %45, -24
  %53 = inttoptr i64 %52 to i64*
  store i64 %51, i64* %53
  %54 = load i64, i64* %37, align 8
  %55 = add i64 %45, -32
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  %57 = load i64, i64* %36, align 8
  %58 = add i64 %45, -40
  %59 = inttoptr i64 %58 to i64*
  store i64 %57, i64* %59
  %60 = load i64, i64* %27, align 8
  %61 = add i64 %45, -48
  %62 = inttoptr i64 %61 to i64*
  store i64 %60, i64* %62
  %63 = add i64 %45, -408
  store i64 %63, i64* %32, align 8, !tbaa !1240
  %64 = icmp ult i64 %61, 360
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %66, align 1, !tbaa !1245
  %67 = trunc i64 %63 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #11
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !1259
  %74 = xor i64 %61, %63
  %75 = lshr i64 %74, 4
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %77, i8* %78, align 1, !tbaa !1263
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %80, i8* %81, align 1, !tbaa !1260
  %82 = lshr i64 %63, 63
  %83 = trunc i64 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %83, i8* %84, align 1, !tbaa !1261
  %85 = lshr i64 %61, 63
  %86 = xor i64 %82, %85
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %89, i8* %90, align 1, !tbaa !1262
  %91 = add i64 %45, 96
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92
  %94 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  %95 = add i64 %45, 88
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %94, align 8, !tbaa !1240
  %99 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %100 = add i64 %45, 80
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %99, align 8, !tbaa !1240
  %104 = add i64 %45, 72
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %27, align 8, !tbaa !1240
  %108 = add i64 %45, 64
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109
  %111 = zext i32 %110 to i64
  store i64 %111, i64* %38, align 8, !tbaa !1240
  %112 = load i64, i64* %33, align 8
  %113 = add i64 %112, 64
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = zext i32 %115 to i64
  store i64 %116, i64* %39, align 8, !tbaa !1240
  %117 = add i64 %112, 56
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %36, align 8, !tbaa !1240
  %120 = add i64 %112, 48
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %37, align 8, !tbaa !1240
  %123 = add i64 %112, -372
  %124 = load i32, i32* %11, align 4
  %125 = inttoptr i64 %123 to i32*
  store i32 %124, i32* %125
  %126 = add i64 %112, 40
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %112, -384
  %130 = inttoptr i64 %129 to i64*
  store i64 %128, i64* %130
  %131 = add i64 %112, 32
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %112, -392
  %135 = inttoptr i64 %134 to i64*
  store i64 %133, i64* %135
  %136 = add i64 %112, 24
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %30, align 8, !tbaa !1240
  %139 = add i64 %112, -396
  %140 = inttoptr i64 %139 to i32*
  store i32 %93, i32* %140
  %141 = add i64 %112, 16
  %142 = inttoptr i64 %141 to i32*
  %143 = load i32, i32* %142
  %144 = add i64 %112, -400
  %145 = inttoptr i64 %144 to i32*
  store i32 %143, i32* %145
  %146 = inttoptr i64 %123 to i32*
  %147 = load i32, i32* %146
  %148 = add i64 %112, -404
  %149 = inttoptr i64 %148 to i32*
  store i32 %147, i32* %149
  %150 = add i64 %112, -44
  %151 = load i32, i32* %13, align 4
  %152 = inttoptr i64 %150 to i32*
  store i32 %151, i32* %152
  %153 = inttoptr i64 %148 to i32*
  %154 = load i32, i32* %153
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %31, align 8, !tbaa !1240
  %156 = add i64 %112, -48
  %157 = inttoptr i64 %156 to i32*
  store i32 %154, i32* %157
  %158 = add i64 %112, -52
  %159 = load i32, i32* %9, align 4
  %160 = inttoptr i64 %158 to i32*
  store i32 %159, i32* %160
  %161 = add i64 %112, -56
  %162 = load i32, i32* %7, align 4
  %163 = inttoptr i64 %161 to i32*
  store i32 %162, i32* %163
  %164 = add i64 %112, -60
  %165 = load i32, i32* %15, align 4
  %166 = inttoptr i64 %164 to i32*
  store i32 %165, i32* %166
  %167 = add i64 %112, -64
  %168 = load i32, i32* %17, align 4
  %169 = inttoptr i64 %167 to i32*
  store i32 %168, i32* %169
  %170 = add i64 %112, -72
  %171 = bitcast [32 x %union.VectorReg]* %40 to double*
  %172 = load double, double* %171, align 1
  %173 = inttoptr i64 %170 to double*
  store double %172, double* %173
  %174 = inttoptr i64 %156 to i32*
  %175 = load i32, i32* %174
  %176 = zext i32 %175 to i64
  %177 = load i64, i64* %33, align 8
  %178 = add i64 %177, -408
  %179 = inttoptr i64 %178 to i32*
  store i32 2, i32* %179
  store i64 %176, i64* %26, align 8, !tbaa !1240
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %181 = sext i32 %175 to i64
  %182 = lshr i64 %181, 32
  store i64 %182, i64* %180, align 8, !tbaa !1240
  %183 = inttoptr i64 %178 to i32*
  %184 = load i32, i32* %183
  %185 = zext i32 %184 to i64
  store i64 %185, i64* %28, align 8, !tbaa !1240
  %186 = add i64 %1, 165
  store i64 %186, i64* %3, align 8
  %187 = sext i32 %184 to i64
  %188 = shl nuw i64 %182, 32
  %189 = or i64 %188, %176
  %190 = sdiv i64 %189, %187
  %191 = shl i64 %190, 32
  %192 = ashr exact i64 %191, 32
  %193 = icmp eq i64 %190, %192
  br i1 %193, label %200, label %194

; <label>:194:                                    ; preds = %block_4007d0
  %195 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %186, %struct.Memory* %2) #14
  %196 = load i64, i64* %26, align 8
  %197 = load i64, i64* %3, align 8
  %198 = load i64, i64* %33, align 8
  %199 = load i32, i32* %7, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:200:                                    ; preds = %block_4007d0
  %201 = and i64 %190, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %200, %194
  %202 = phi i32 [ %199, %194 ], [ %184, %200 ]
  %203 = phi i64 [ %198, %194 ], [ %177, %200 ]
  %204 = phi i64 [ %197, %194 ], [ %186, %200 ]
  %205 = phi i64 [ %196, %194 ], [ %201, %200 ]
  %206 = phi %struct.Memory* [ %195, %194 ], [ %2, %200 ]
  %207 = trunc i64 %205 to i32
  %208 = shl i32 %207, 1
  %209 = or i32 %208, 1
  %210 = zext i32 %209 to i64
  store i8 0, i8* %66, align 1, !tbaa !1245
  %211 = and i32 %209, 255
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #11
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  store i8 %215, i8* %73, align 1, !tbaa !1259
  store i8 0, i8* %78, align 1, !tbaa !1263
  store i8 0, i8* %81, align 1, !tbaa !1260
  %216 = lshr i32 %207, 30
  %217 = and i32 %216, 1
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %84, align 1, !tbaa !1261
  %219 = lshr i32 %207, 30
  %220 = and i32 %219, 1
  %221 = xor i32 %217, %220
  %222 = add nuw nsw i32 %221, %217
  %223 = icmp eq i32 %222, 2
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %90, align 1, !tbaa !1262
  store i64 %210, i64* %31, align 8, !tbaa !1240
  %225 = add i64 %203, -44
  %226 = inttoptr i64 %225 to i32*
  %227 = load i32, i32* %226
  %228 = zext i32 %227 to i64
  store i64 %228, i64* %26, align 8, !tbaa !1240
  %229 = sext i32 %227 to i64
  %230 = lshr i64 %229, 32
  store i64 %230, i64* %180, align 8, !tbaa !1240
  %231 = add i64 %204, 16
  store i64 %231, i64* %3, align 8
  %232 = sext i32 %202 to i64
  %233 = shl nuw i64 %230, 32
  %234 = or i64 %233, %228
  %235 = sdiv i64 %234, %232
  %236 = shl i64 %235, 32
  %237 = ashr exact i64 %236, 32
  %238 = icmp eq i64 %235, %237
  br i1 %238, label %245, label %239

; <label>:239:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %240 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %231, %struct.Memory* %206) #14
  %241 = load i64, i64* %26, align 8
  %242 = load i64, i64* %3, align 8
  %243 = load i64, i64* %33, align 8
  %244 = load i32, i32* %7, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:245:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %246 = and i64 %235, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %245, %239
  %247 = phi i32 [ %244, %239 ], [ %202, %245 ]
  %248 = phi i64 [ %243, %239 ], [ %203, %245 ]
  %249 = phi i64 [ %242, %239 ], [ %231, %245 ]
  %250 = phi i64 [ %241, %239 ], [ %246, %245 ]
  %251 = phi %struct.Memory* [ %240, %239 ], [ %206, %245 ]
  %252 = trunc i64 %250 to i32
  %253 = shl i32 %252, 1
  %254 = or i32 %253, 1
  %255 = zext i32 %254 to i64
  store i8 0, i8* %66, align 1, !tbaa !1245
  %256 = and i32 %254, 255
  %257 = tail call i32 @llvm.ctpop.i32(i32 %256) #11
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  store i8 %260, i8* %73, align 1, !tbaa !1259
  store i8 0, i8* %78, align 1, !tbaa !1263
  store i8 0, i8* %81, align 1, !tbaa !1260
  %261 = lshr i32 %252, 30
  %262 = and i32 %261, 1
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %84, align 1, !tbaa !1261
  %264 = lshr i32 %252, 30
  %265 = and i32 %264, 1
  %266 = xor i32 %262, %265
  %267 = add nuw nsw i32 %266, %262
  %268 = icmp eq i32 %267, 2
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %90, align 1, !tbaa !1262
  store i64 %255, i64* %34, align 8, !tbaa !1240
  %270 = add i64 %248, -44
  %271 = inttoptr i64 %270 to i32*
  %272 = load i32, i32* %271
  %273 = zext i32 %272 to i64
  store i64 %273, i64* %26, align 8, !tbaa !1240
  %274 = sext i32 %272 to i64
  %275 = lshr i64 %274, 32
  store i64 %275, i64* %180, align 8, !tbaa !1240
  %276 = add i64 %249, 17
  store i64 %276, i64* %3, align 8
  %277 = sext i32 %247 to i64
  %278 = shl nuw i64 %275, 32
  %279 = or i64 %278, %273
  %280 = sdiv i64 %279, %277
  %281 = shl i64 %280, 32
  %282 = ashr exact i64 %281, 32
  %283 = icmp eq i64 %280, %282
  br i1 %283, label %290, label %284

; <label>:284:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %285 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %276, %struct.Memory* %251) #14
  %286 = load i64, i64* %26, align 8
  %287 = load i64, i64* %3, align 8
  %288 = load i64, i64* %33, align 8
  %289 = load i32, i32* %7, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:290:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %291 = and i64 %280, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %290, %284
  %292 = phi i32 [ %289, %284 ], [ %247, %290 ]
  %293 = phi i64 [ %288, %284 ], [ %248, %290 ]
  %294 = phi i64 [ %287, %284 ], [ %276, %290 ]
  %295 = phi i64 [ %286, %284 ], [ %291, %290 ]
  %296 = phi %struct.Memory* [ %285, %284 ], [ %251, %290 ]
  %297 = trunc i64 %295 to i32
  %298 = shl i32 %297, 1
  %299 = or i32 %298, 1
  %300 = zext i32 %299 to i64
  store i8 0, i8* %66, align 1, !tbaa !1245
  %301 = and i32 %299, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #11
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %73, align 1, !tbaa !1259
  store i8 0, i8* %78, align 1, !tbaa !1263
  store i8 0, i8* %81, align 1, !tbaa !1260
  %306 = lshr i32 %297, 30
  %307 = and i32 %306, 1
  %308 = trunc i32 %307 to i8
  store i8 %308, i8* %84, align 1, !tbaa !1261
  %309 = lshr i32 %297, 30
  %310 = and i32 %309, 1
  %311 = xor i32 %307, %310
  %312 = add nuw nsw i32 %311, %307
  %313 = icmp eq i32 %312, 2
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %90, align 1, !tbaa !1262
  store i64 %300, i64* %35, align 8, !tbaa !1240
  %315 = add i64 %293, -44
  %316 = inttoptr i64 %315 to i32*
  %317 = load i32, i32* %316
  %318 = zext i32 %317 to i64
  store i64 %318, i64* %26, align 8, !tbaa !1240
  %319 = sext i32 %317 to i64
  %320 = lshr i64 %319, 32
  store i64 %320, i64* %180, align 8, !tbaa !1240
  %321 = add i64 %294, 17
  store i64 %321, i64* %3, align 8
  %322 = sext i32 %292 to i64
  %323 = shl nuw i64 %320, 32
  %324 = or i64 %323, %318
  %325 = sdiv i64 %324, %322
  %326 = shl i64 %325, 32
  %327 = ashr exact i64 %326, 32
  %328 = icmp eq i64 %325, %327
  br i1 %328, label %334, label %329

; <label>:329:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %330 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %321, %struct.Memory* %296) #14
  %331 = load i64, i64* %26, align 8
  %332 = load i64, i64* %3, align 8
  %333 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

; <label>:334:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %335 = and i64 %325, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5: ; preds = %334, %329
  %336 = phi i64 [ %333, %329 ], [ %293, %334 ]
  %337 = phi i64 [ %332, %329 ], [ %321, %334 ]
  %338 = phi i64 [ %331, %329 ], [ %335, %334 ]
  %339 = phi %struct.Memory* [ %330, %329 ], [ %296, %334 ]
  %340 = trunc i64 %338 to i32
  %341 = shl i32 %340, 1
  %342 = or i32 %341, 1
  %343 = zext i32 %342 to i64
  store i8 0, i8* %66, align 1, !tbaa !1245
  %344 = and i32 %342, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #11
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %73, align 1, !tbaa !1259
  store i8 0, i8* %78, align 1, !tbaa !1263
  store i8 0, i8* %81, align 1, !tbaa !1260
  %349 = lshr i32 %340, 30
  %350 = and i32 %349, 1
  %351 = trunc i32 %350 to i8
  store i8 %351, i8* %84, align 1, !tbaa !1261
  %352 = lshr i32 %340, 30
  %353 = and i32 %352, 1
  %354 = xor i32 %350, %353
  %355 = add nuw nsw i32 %354, %350
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %90, align 1, !tbaa !1262
  %358 = add i64 %336, -44
  %359 = inttoptr i64 %358 to i32*
  %360 = load i32, i32* %359
  %361 = zext i32 %360 to i64
  %362 = add i64 %336, -416
  %363 = inttoptr i64 %362 to i64*
  store i64 %343, i64* %363
  store i64 %361, i64* %26, align 8, !tbaa !1240
  %364 = sext i32 %360 to i64
  %365 = lshr i64 %364, 32
  store i64 %365, i64* %180, align 8, !tbaa !1240
  %366 = add i64 %336, -408
  %367 = inttoptr i64 %366 to i32*
  %368 = load i32, i32* %367
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %28, align 8, !tbaa !1240
  %370 = add i64 %337, 29
  store i64 %370, i64* %3, align 8
  %371 = sext i32 %368 to i64
  %372 = shl nuw i64 %365, 32
  %373 = or i64 %372, %361
  %374 = sdiv i64 %373, %371
  %375 = shl i64 %374, 32
  %376 = ashr exact i64 %375, 32
  %377 = icmp eq i64 %374, %376
  br i1 %377, label %383, label %378

; <label>:378:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %379 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %370, %struct.Memory* %339) #14
  %380 = load i64, i64* %26, align 8
  %381 = load i64, i64* %3, align 8
  %382 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

; <label>:383:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %384 = and i64 %374, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7: ; preds = %383, %378
  %385 = phi i64 [ %382, %378 ], [ %336, %383 ]
  %386 = phi i64 [ %381, %378 ], [ %370, %383 ]
  %387 = phi i64 [ %380, %378 ], [ %384, %383 ]
  %388 = phi %struct.Memory* [ %379, %378 ], [ %339, %383 ]
  %389 = trunc i64 %387 to i32
  %390 = shl i32 %389, 1
  %391 = or i32 %390, 1
  %392 = zext i32 %391 to i64
  store i8 0, i8* %66, align 1, !tbaa !1245
  %393 = and i32 %391, 255
  %394 = tail call i32 @llvm.ctpop.i32(i32 %393) #11
  %395 = trunc i32 %394 to i8
  %396 = and i8 %395, 1
  %397 = xor i8 %396, 1
  store i8 %397, i8* %73, align 1, !tbaa !1259
  store i8 0, i8* %78, align 1, !tbaa !1263
  store i8 0, i8* %81, align 1, !tbaa !1260
  %398 = lshr i32 %389, 30
  %399 = and i32 %398, 1
  %400 = trunc i32 %399 to i8
  store i8 %400, i8* %84, align 1, !tbaa !1261
  %401 = lshr i32 %389, 30
  %402 = and i32 %401, 1
  %403 = xor i32 %399, %402
  %404 = add nuw nsw i32 %403, %399
  %405 = icmp eq i32 %404, 2
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %90, align 1, !tbaa !1262
  %407 = add i64 %385, -44
  %408 = inttoptr i64 %407 to i32*
  %409 = load i32, i32* %408
  %410 = zext i32 %409 to i64
  %411 = add i64 %385, -424
  %412 = inttoptr i64 %411 to i64*
  store i64 %392, i64* %412
  store i64 %410, i64* %26, align 8, !tbaa !1240
  %413 = sext i32 %409 to i64
  %414 = lshr i64 %413, 32
  store i64 %414, i64* %180, align 8, !tbaa !1240
  %415 = add i64 %385, -408
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %28, align 8, !tbaa !1240
  %419 = add i64 %386, 29
  store i64 %419, i64* %3, align 8
  %420 = sext i32 %417 to i64
  %421 = shl nuw i64 %414, 32
  %422 = or i64 %421, %410
  %423 = sdiv i64 %422, %420
  %424 = shl i64 %423, 32
  %425 = ashr exact i64 %424, 32
  %426 = icmp eq i64 %423, %425
  br i1 %426, label %432, label %427

; <label>:427:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %428 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %419, %struct.Memory* %388) #14
  %429 = load i64, i64* %26, align 8
  %430 = load i64, i64* %3, align 8
  %431 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9

; <label>:432:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %433 = and i64 %423, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9: ; preds = %432, %427
  %434 = phi i64 [ %431, %427 ], [ %385, %432 ]
  %435 = phi i64 [ %430, %427 ], [ %419, %432 ]
  %436 = phi i64 [ %429, %427 ], [ %433, %432 ]
  %437 = phi %struct.Memory* [ %428, %427 ], [ %388, %432 ]
  %438 = trunc i64 %436 to i32
  %439 = shl i32 %438, 1
  %440 = or i32 %439, 1
  %441 = zext i32 %440 to i64
  store i8 0, i8* %66, align 1, !tbaa !1245
  %442 = and i32 %440, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442) #11
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %73, align 1, !tbaa !1259
  store i8 0, i8* %78, align 1, !tbaa !1263
  store i8 0, i8* %81, align 1, !tbaa !1260
  %447 = lshr i32 %438, 30
  %448 = and i32 %447, 1
  %449 = trunc i32 %448 to i8
  store i8 %449, i8* %84, align 1, !tbaa !1261
  %450 = lshr i32 %438, 30
  %451 = and i32 %450, 1
  %452 = xor i32 %448, %451
  %453 = add nuw nsw i32 %452, %448
  %454 = icmp eq i32 %453, 2
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %90, align 1, !tbaa !1262
  %456 = add i64 %434, -44
  %457 = inttoptr i64 %456 to i32*
  %458 = load i32, i32* %457
  %459 = zext i32 %458 to i64
  %460 = add i64 %434, -432
  %461 = inttoptr i64 %460 to i64*
  store i64 %441, i64* %461
  store i64 %459, i64* %26, align 8, !tbaa !1240
  %462 = sext i32 %458 to i64
  %463 = lshr i64 %462, 32
  store i64 %463, i64* %180, align 8, !tbaa !1240
  %464 = add i64 %434, -408
  %465 = inttoptr i64 %464 to i32*
  %466 = load i32, i32* %465
  %467 = zext i32 %466 to i64
  store i64 %467, i64* %28, align 8, !tbaa !1240
  %468 = add i64 %435, 29
  store i64 %468, i64* %3, align 8
  %469 = sext i32 %466 to i64
  %470 = shl nuw i64 %463, 32
  %471 = or i64 %470, %459
  %472 = sdiv i64 %471, %469
  %473 = shl i64 %472, 32
  %474 = ashr exact i64 %473, 32
  %475 = icmp eq i64 %472, %474
  br i1 %475, label %481, label %476

; <label>:476:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9
  %477 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %468, %struct.Memory* %437) #14
  %478 = load i64, i64* %26, align 8
  %479 = load i64, i64* %3, align 8
  %480 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11

; <label>:481:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9
  %482 = and i64 %472, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11: ; preds = %481, %476
  %483 = phi i64 [ %480, %476 ], [ %434, %481 ]
  %484 = phi i64 [ %479, %476 ], [ %468, %481 ]
  %485 = phi i64 [ %478, %476 ], [ %482, %481 ]
  %486 = phi %struct.Memory* [ %477, %476 ], [ %437, %481 ]
  %487 = shl i64 %485, 1
  %488 = and i64 %487, 4294967294
  %489 = or i64 %488, 1
  %490 = add i64 %483, 24
  %491 = inttoptr i64 %490 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %483, -440
  %494 = inttoptr i64 %493 to i64*
  store i64 %489, i64* %494
  %495 = add i64 %483, 16
  %496 = inttoptr i64 %495 to i32*
  %497 = load i32, i32* %496
  %498 = sext i32 %497 to i64
  %499 = add i64 %483, -448
  %500 = inttoptr i64 %499 to i64*
  store i64 %498, i64* %500
  %501 = load i64, i64* %31, align 8
  %502 = load i64, i64* %34, align 8
  %503 = mul i64 %502, %501
  %504 = add i64 %483, -456
  %505 = inttoptr i64 %504 to i64*
  store i64 %503, i64* %505
  %506 = inttoptr i64 %499 to i64*
  %507 = load i64, i64* %506
  %508 = add i64 %483, -464
  %509 = inttoptr i64 %508 to i64*
  store i64 %492, i64* %509
  %510 = inttoptr i64 %504 to i64*
  %511 = load i64, i64* %510
  %512 = sext i64 %507 to i128
  %513 = and i128 %512, -18446744073709551616
  %514 = sext i64 %511 to i128
  %515 = and i128 %514, -18446744073709551616
  %516 = zext i64 %507 to i128
  %517 = or i128 %513, %516
  %518 = zext i64 %511 to i128
  %519 = or i128 %515, %518
  %520 = mul nsw i128 %517, %519
  %521 = shl i128 %520, 64
  %522 = ashr exact i128 %521, 64
  %523 = and i128 %522, -18446744073709551616
  %524 = and i128 %520, 18446744073709551615
  %525 = or i128 %523, %524
  %526 = mul nsw i128 %525, 40
  %527 = trunc i128 %526 to i64
  %528 = lshr i64 %527, 63
  %529 = load i64, i64* %33, align 8
  %530 = add i64 %529, -464
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  %533 = add i64 %527, %532
  %534 = icmp ult i64 %533, %532
  %535 = icmp ult i64 %533, %527
  %536 = or i1 %534, %535
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %66, align 1, !tbaa !1245
  %538 = trunc i64 %533 to i32
  %539 = and i32 %538, 255
  %540 = tail call i32 @llvm.ctpop.i32(i32 %539) #11
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = xor i8 %542, 1
  store i8 %543, i8* %73, align 1, !tbaa !1259
  %544 = xor i64 %527, %532
  %545 = xor i64 %544, %533
  %546 = lshr i64 %545, 4
  %547 = trunc i64 %546 to i8
  %548 = and i8 %547, 1
  store i8 %548, i8* %78, align 1, !tbaa !1263
  %549 = icmp eq i64 %533, 0
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %81, align 1, !tbaa !1260
  %551 = lshr i64 %533, 63
  %552 = trunc i64 %551 to i8
  store i8 %552, i8* %84, align 1, !tbaa !1261
  %553 = lshr i64 %532, 63
  %554 = xor i64 %551, %553
  %555 = xor i64 %551, %528
  %556 = add nuw nsw i64 %554, %555
  %557 = icmp eq i64 %556, 2
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %90, align 1, !tbaa !1262
  %559 = add i64 %529, -360
  %560 = inttoptr i64 %559 to i64*
  store i64 %533, i64* %560
  %561 = add i64 %529, -44
  %562 = inttoptr i64 %561 to i32*
  %563 = load i32, i32* %562
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %26, align 8, !tbaa !1240
  %565 = sext i32 %563 to i64
  %566 = lshr i64 %565, 32
  store i64 %566, i64* %180, align 8, !tbaa !1240
  %567 = add i64 %529, -408
  %568 = inttoptr i64 %567 to i32*
  %569 = load i32, i32* %568
  %570 = zext i32 %569 to i64
  store i64 %570, i64* %28, align 8, !tbaa !1240
  %571 = add i64 %484, 102
  store i64 %571, i64* %3, align 8
  %572 = sext i32 %569 to i64
  %573 = shl nuw i64 %566, 32
  %574 = or i64 %573, %564
  %575 = sdiv i64 %574, %572
  %576 = shl i64 %575, 32
  %577 = ashr exact i64 %576, 32
  %578 = icmp eq i64 %575, %577
  br i1 %578, label %584, label %579

; <label>:579:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11
  %580 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %571, %struct.Memory* %486) #14
  %581 = load i64, i64* %26, align 8
  %582 = load i64, i64* %3, align 8
  %583 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit13

; <label>:584:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11
  %585 = srem i64 %574, %572
  %586 = and i64 %575, 4294967295
  %587 = and i64 %585, 4294967295
  store i64 %587, i64* %29, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit13

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit13: ; preds = %584, %579
  %588 = phi i64 [ %583, %579 ], [ %529, %584 ]
  %589 = phi i64 [ %582, %579 ], [ %571, %584 ]
  %590 = phi i64 [ %581, %579 ], [ %586, %584 ]
  %591 = phi %struct.Memory* [ %580, %579 ], [ %486, %584 ]
  %592 = shl i64 %590, 1
  %593 = and i64 %592, 4294967294
  %594 = or i64 %593, 1
  store i64 %594, i64* %26, align 8, !tbaa !1240
  %595 = add i64 %588, 24
  %596 = inttoptr i64 %595 to i64*
  %597 = load i64, i64* %596
  store i64 %597, i64* %28, align 8, !tbaa !1240
  %598 = add i64 %588, -472
  %599 = load i64, i64* %30, align 8
  %600 = inttoptr i64 %598 to i64*
  store i64 %599, i64* %600
  %601 = add i64 %588, 16
  %602 = inttoptr i64 %601 to i32*
  %603 = load i32, i32* %602
  %604 = add i32 %603, -1
  %605 = sext i32 %604 to i64
  %606 = load i64, i64* %31, align 8
  %607 = load i64, i64* %34, align 8
  %608 = sext i64 %606 to i128
  %609 = and i128 %608, -18446744073709551616
  %610 = sext i64 %607 to i128
  %611 = and i128 %610, -18446744073709551616
  %612 = zext i64 %606 to i128
  %613 = or i128 %609, %612
  %614 = zext i64 %607 to i128
  %615 = or i128 %611, %614
  %616 = mul nsw i128 %615, %613
  %617 = trunc i128 %616 to i64
  store i64 %617, i64* %31, align 8, !tbaa !1240
  %618 = sext i64 %617 to i128
  %619 = sext i32 %604 to i128
  %620 = and i128 %619, -18446744073709551616
  %621 = and i128 %618, -18446744073709551616
  %622 = zext i64 %605 to i128
  %623 = or i128 %620, %622
  %624 = and i128 %616, 18446744073709551615
  %625 = or i128 %621, %624
  %626 = mul nsw i128 %625, %623
  %627 = shl i128 %626, 64
  %628 = ashr exact i128 %627, 64
  %629 = and i128 %628, -18446744073709551616
  %630 = and i128 %626, 18446744073709551615
  %631 = or i128 %629, %630
  %632 = mul nsw i128 %631, 40
  %633 = trunc i128 %632 to i64
  %634 = load i64, i64* %28, align 8
  %635 = add i64 %633, %634
  store i64 %635, i64* %28, align 8, !tbaa !1240
  %636 = load i64, i64* %33, align 8
  %637 = add i64 %636, -368
  %638 = inttoptr i64 %637 to i64*
  store i64 %635, i64* %638
  %639 = add i64 %636, 80
  %640 = inttoptr i64 %639 to i32*
  %641 = load i32, i32* %640
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %30, align 8, !tbaa !1240
  %643 = add i64 %636, -80
  %644 = inttoptr i64 %643 to i32*
  store i32 %641, i32* %644
  %645 = add i64 %636, -480
  %646 = load i64, i64* %37, align 8
  %647 = inttoptr i64 %645 to i64*
  store i64 %646, i64* %647
  %648 = add i64 %636, -484
  %649 = load i32, i32* %5, align 4
  %650 = inttoptr i64 %648 to i32*
  store i32 %649, i32* %650
  %651 = add i64 %636, -488
  %652 = load i32, i32* %23, align 4
  %653 = inttoptr i64 %651 to i32*
  store i32 %652, i32* %653
  %654 = add i64 %636, -492
  %655 = load i32, i32* %25, align 4
  %656 = inttoptr i64 %654 to i32*
  store i32 %655, i32* %656
  %657 = add i64 %636, -504
  %658 = load i64, i64* %36, align 8
  %659 = inttoptr i64 %657 to i64*
  store i64 %658, i64* %659
  %660 = add i64 %636, -512
  %661 = load i64, i64* %26, align 8
  %662 = inttoptr i64 %660 to i64*
  store i64 %661, i64* %662
  %663 = add i64 %636, -520
  %664 = load i64, i64* %35, align 8
  %665 = inttoptr i64 %663 to i64*
  store i64 %664, i64* %665
  %666 = add i64 %636, -524
  %667 = load i32, i32* %21, align 4
  %668 = inttoptr i64 %666 to i32*
  store i32 %667, i32* %668
  %669 = add i64 %636, -528
  %670 = load i32, i32* %19, align 4
  %671 = add i64 %589, 118
  %672 = inttoptr i64 %669 to i32*
  store i32 %670, i32* %672
  %673 = add i64 %636, 88
  %674 = add i64 %636, 64
  %675 = add i64 %636, -76
  %676 = add i64 %636, 72
  %677 = add i64 %636, -84
  %678 = add i64 %636, -360
  %679 = add i64 %636, -440
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %681 = bitcast i64* %680 to double*
  %682 = add i64 %636, -72
  %683 = bitcast %union.VectorReg* %41 to double*
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %685 = bitcast i64* %684 to double*
  %686 = add i64 %636, 32
  %687 = bitcast %union.VectorReg* %42 to double*
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %689 = bitcast %union.VectorReg* %43 to double*
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  br label %block_4009da

block_4009ff:                                     ; preds = %block_400a09, %block_4009f8
  %691 = phi i64 [ %1001, %block_4009f8 ], [ %1835, %block_400a09 ]
  %692 = phi %struct.Memory* [ %1016, %block_4009f8 ], [ %692, %block_400a09 ]
  %693 = inttoptr i64 %677 to i32*
  %694 = load i32, i32* %693
  %695 = add i32 %694, -5
  %696 = lshr i32 %695, 31
  %697 = lshr i32 %694, 31
  %698 = xor i32 %696, %697
  %699 = add nuw nsw i32 %698, %697
  %700 = icmp eq i32 %699, 2
  %701 = icmp ne i32 %696, 0
  %702 = xor i1 %701, %700
  %703 = select i1 %702, i64 10, i64 579
  %704 = add i64 %691, %703
  br i1 %702, label %block_400a09, label %block_400c42

block_400c6e:                                     ; preds = %block_401b4c, %block_400c68
  %705 = phi %struct.Memory* [ %827, %block_400c68 ], [ %2028, %block_401b4c ]
  %706 = inttoptr i64 %723 to i32*
  %707 = load i32, i32* %706
  %708 = inttoptr i64 %725 to i32*
  %709 = load i32, i32* %708
  %710 = sub i32 %707, %709
  %711 = lshr i32 %710, 31
  %712 = lshr i32 %707, 31
  %713 = lshr i32 %709, 31
  %714 = xor i32 %713, %712
  %715 = xor i32 %711, %712
  %716 = add nuw nsw i32 %715, %714
  %717 = icmp eq i32 %716, 2
  %718 = icmp ne i32 %711, 0
  %719 = xor i1 %718, %717
  br i1 %719, label %block_400c7a, label %block_401b5f

block_400c68:                                     ; preds = %block_4009da
  %720 = inttoptr i64 %639 to i32*
  %721 = load i32, i32* %720
  %722 = load i64, i64* %33, align 8
  %723 = add i64 %722, -80
  %724 = inttoptr i64 %723 to i32*
  store i32 %721, i32* %724
  %725 = add i64 %722, 88
  %726 = add i64 %722, 64
  %727 = add i64 %722, -76
  %728 = add i64 %722, 72
  %729 = add i64 %722, -84
  %730 = add i64 %722, -360
  %731 = add i64 %722, -440
  %732 = add i64 %722, -72
  %733 = add i64 %722, 40
  %734 = add i64 %722, -416
  %735 = add i64 %722, 48
  %736 = add i64 %722, -424
  %737 = add i64 %722, -352
  %738 = add i64 %722, -304
  %739 = add i64 %722, 56
  %740 = add i64 %722, -432
  %741 = bitcast %union.VectorReg* %41 to i8*
  %742 = bitcast [32 x %union.VectorReg]* %40 to <2 x i32>*
  %743 = bitcast %union.VectorReg* %41 to i32*
  %744 = getelementptr inbounds i8, i8* %741, i64 4
  %745 = bitcast i8* %744 to i32*
  %746 = add i64 %722, -104
  %747 = add i64 %722, -264
  %748 = add i64 %722, -96
  %749 = add i64 %722, -256
  %750 = add i64 %722, -296
  %751 = add i64 %722, -248
  %752 = add i64 %722, -288
  %753 = add i64 %722, -240
  %754 = add i64 %722, -280
  %755 = add i64 %722, -232
  %756 = add i64 %722, -272
  %757 = add i64 %722, -344
  %758 = add i64 %722, -224
  %759 = add i64 %722, -216
  %760 = add i64 %722, -208
  %761 = add i64 %722, -200
  %762 = add i64 %722, -192
  %763 = add i64 %722, -336
  %764 = add i64 %722, -184
  %765 = add i64 %722, -176
  %766 = add i64 %722, -168
  %767 = add i64 %722, -160
  %768 = add i64 %722, -152
  %769 = add i64 %722, -328
  %770 = add i64 %722, -144
  %771 = add i64 %722, -136
  %772 = add i64 %722, -128
  %773 = add i64 %722, -120
  %774 = add i64 %722, -112
  %775 = add i64 %722, -320
  br label %block_400c6e

block_401b5f:                                     ; preds = %block_400c6e
  %776 = zext i32 %707 to i64
  store i64 %776, i64* %26, align 8
  %777 = load i64, i64* %32, align 8
  %778 = add i64 %777, 360
  %779 = icmp ugt i64 %777, -361
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %66, align 1, !tbaa !1245
  %781 = trunc i64 %778 to i32
  %782 = and i32 %781, 255
  %783 = tail call i32 @llvm.ctpop.i32(i32 %782) #11
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  %786 = xor i8 %785, 1
  store i8 %786, i8* %73, align 1, !tbaa !1259
  %787 = xor i64 %778, %777
  %788 = lshr i64 %787, 4
  %789 = trunc i64 %788 to i8
  %790 = and i8 %789, 1
  store i8 %790, i8* %78, align 1, !tbaa !1263
  %791 = icmp eq i64 %778, 0
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %81, align 1, !tbaa !1260
  %793 = lshr i64 %778, 63
  %794 = trunc i64 %793 to i8
  store i8 %794, i8* %84, align 1, !tbaa !1261
  %795 = lshr i64 %777, 63
  %796 = xor i64 %793, %795
  %797 = add nuw nsw i64 %796, %793
  %798 = icmp eq i64 %797, 2
  %799 = zext i1 %798 to i8
  store i8 %799, i8* %90, align 1, !tbaa !1262
  %800 = add i64 %777, 368
  %801 = inttoptr i64 %778 to i64*
  %802 = load i64, i64* %801
  store i64 %802, i64* %27, align 8, !tbaa !1240
  %803 = add i64 %777, 376
  %804 = inttoptr i64 %800 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %36, align 8, !tbaa !1240
  %806 = add i64 %777, 384
  %807 = inttoptr i64 %803 to i64*
  %808 = load i64, i64* %807
  store i64 %808, i64* %37, align 8, !tbaa !1240
  %809 = add i64 %777, 392
  %810 = inttoptr i64 %806 to i64*
  %811 = load i64, i64* %810
  store i64 %811, i64* %38, align 8, !tbaa !1240
  %812 = add i64 %777, 400
  %813 = inttoptr i64 %809 to i64*
  %814 = load i64, i64* %813
  store i64 %814, i64* %39, align 8, !tbaa !1240
  %815 = add i64 %777, 408
  %816 = inttoptr i64 %812 to i64*
  %817 = load i64, i64* %816
  store i64 %817, i64* %33, align 8, !tbaa !1240
  %818 = inttoptr i64 %815 to i64*
  %819 = load i64, i64* %818
  store i64 %819, i64* %3, align 8, !tbaa !1240
  %820 = add i64 %777, 416
  store i64 %820, i64* %32, align 8, !tbaa !1240
  ret %struct.Memory* %705

block_400c55:                                     ; preds = %block_4009ec
  %821 = inttoptr i64 %643 to i32*
  %822 = load i32, i32* %821
  %823 = add i32 %822, 1
  %824 = inttoptr i64 %643 to i32*
  store i32 %823, i32* %824
  %825 = add i64 %1032, -635
  br label %block_4009da

block_4009da:                                     ; preds = %block_400c55, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit13
  %826 = phi i64 [ %671, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit13 ], [ %825, %block_400c55 ]
  %827 = phi %struct.Memory* [ %591, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit13 ], [ %1016, %block_400c55 ]
  %828 = inttoptr i64 %643 to i32*
  %829 = load i32, i32* %828
  %830 = inttoptr i64 %673 to i32*
  %831 = load i32, i32* %830
  %832 = sub i32 %829, %831
  %833 = lshr i32 %832, 31
  %834 = trunc i32 %833 to i8
  %835 = lshr i32 %829, 31
  %836 = lshr i32 %831, 31
  %837 = xor i32 %836, %835
  %838 = xor i32 %833, %835
  %839 = add nuw nsw i32 %838, %837
  %840 = icmp eq i32 %839, 2
  %841 = icmp ne i8 %834, 0
  %842 = xor i1 %841, %840
  %843 = select i1 %842, i64 12, i64 654
  %844 = add i64 %826, %843
  br i1 %842, label %block_4009e6, label %block_400c68

block_401b4c:                                     ; preds = %block_400c80
  %845 = inttoptr i64 %723 to i32*
  %846 = load i32, i32* %845
  %847 = add i32 %846, 1
  %848 = inttoptr i64 %723 to i32*
  store i32 %847, i32* %848
  br label %block_400c6e

block_4009e6:                                     ; preds = %block_4009da
  %849 = inttoptr i64 %674 to i32*
  %850 = load i32, i32* %849
  %851 = add i64 %844, 6
  %852 = inttoptr i64 %675 to i32*
  store i32 %850, i32* %852
  br label %block_4009ec

block_400c42:                                     ; preds = %block_4009ff
  %853 = inttoptr i64 %675 to i32*
  %854 = load i32, i32* %853
  %855 = add i32 %854, 1
  %856 = inttoptr i64 %675 to i32*
  store i32 %855, i32* %856
  %857 = add i64 %704, -598
  br label %block_4009ec

block_4010b5:                                     ; preds = %block_4010ab
  %858 = inttoptr i64 %739 to i64*
  %859 = load i64, i64* %858
  %860 = inttoptr i64 %723 to i32*
  %861 = load i32, i32* %860
  %862 = sext i32 %861 to i64
  %863 = inttoptr i64 %740 to i64*
  %864 = load i64, i64* %863
  store i64 %864, i64* %30, align 8, !tbaa !1240
  %865 = mul i64 %862, %864
  %866 = mul i64 %865, 200
  %867 = add i64 %866, %859
  %868 = inttoptr i64 %727 to i32*
  %869 = load i32, i32* %868
  %870 = sext i32 %869 to i64
  %871 = mul nsw i64 %870, 200
  %872 = add i64 %871, %867
  %873 = sext i32 %991 to i64
  %874 = shl nsw i64 %873, 3
  %875 = add i64 %874, %872
  %876 = inttoptr i64 %875 to double*
  %877 = load double, double* %876
  %878 = mul nsw i64 %873, 40
  %879 = add i64 %878, %738
  %880 = inttoptr i64 %879 to double*
  store double %877, double* %880
  %881 = inttoptr i64 %739 to i64*
  %882 = load i64, i64* %881
  %883 = inttoptr i64 %723 to i32*
  %884 = load i32, i32* %883
  %885 = sext i32 %884 to i64
  %886 = mul i64 %864, %885
  %887 = mul i64 %886, 200
  %888 = add i64 %887, %882
  %889 = inttoptr i64 %727 to i32*
  %890 = load i32, i32* %889
  %891 = sext i32 %890 to i64
  %892 = mul nsw i64 %891, 200
  %893 = add i64 %892, %888
  %894 = inttoptr i64 %729 to i32*
  %895 = load i32, i32* %894
  %896 = sext i32 %895 to i64
  %897 = shl nsw i64 %896, 3
  %898 = add i64 %893, 40
  %899 = add i64 %898, %897
  %900 = inttoptr i64 %899 to double*
  %901 = load double, double* %900
  %902 = mul nsw i64 %896, 40
  %903 = add i64 %902, %738
  %904 = add i64 %903, 8
  %905 = inttoptr i64 %904 to double*
  store double %901, double* %905
  %906 = inttoptr i64 %739 to i64*
  %907 = load i64, i64* %906
  %908 = inttoptr i64 %723 to i32*
  %909 = load i32, i32* %908
  %910 = sext i32 %909 to i64
  %911 = mul i64 %864, %910
  %912 = mul i64 %911, 200
  %913 = add i64 %912, %907
  %914 = inttoptr i64 %727 to i32*
  %915 = load i32, i32* %914
  %916 = sext i32 %915 to i64
  %917 = mul nsw i64 %916, 200
  %918 = add i64 %917, %913
  %919 = inttoptr i64 %729 to i32*
  %920 = load i32, i32* %919
  %921 = sext i32 %920 to i64
  %922 = shl nsw i64 %921, 3
  %923 = add i64 %918, 80
  %924 = add i64 %923, %922
  %925 = inttoptr i64 %924 to double*
  %926 = load double, double* %925
  %927 = mul nsw i64 %921, 40
  %928 = add i64 %927, %738
  %929 = add i64 %928, 16
  %930 = inttoptr i64 %929 to double*
  store double %926, double* %930
  %931 = inttoptr i64 %739 to i64*
  %932 = load i64, i64* %931
  %933 = inttoptr i64 %723 to i32*
  %934 = load i32, i32* %933
  %935 = sext i32 %934 to i64
  %936 = mul i64 %864, %935
  %937 = mul i64 %936, 200
  %938 = add i64 %937, %932
  %939 = inttoptr i64 %727 to i32*
  %940 = load i32, i32* %939
  %941 = sext i32 %940 to i64
  %942 = mul nsw i64 %941, 200
  %943 = add i64 %942, %938
  %944 = inttoptr i64 %729 to i32*
  %945 = load i32, i32* %944
  %946 = sext i32 %945 to i64
  %947 = shl nsw i64 %946, 3
  %948 = add i64 %943, 120
  %949 = add i64 %948, %947
  %950 = inttoptr i64 %949 to double*
  %951 = load double, double* %950
  %952 = mul nsw i64 %946, 40
  %953 = add i64 %952, %738
  %954 = add i64 %953, 24
  %955 = inttoptr i64 %954 to double*
  store double %951, double* %955
  %956 = inttoptr i64 %739 to i64*
  %957 = load i64, i64* %956
  %958 = inttoptr i64 %723 to i32*
  %959 = load i32, i32* %958
  %960 = sext i32 %959 to i64
  %961 = load i64, i64* %30, align 8
  %962 = mul i64 %961, %960
  %963 = mul i64 %962, 200
  %964 = add i64 %963, %957
  %965 = inttoptr i64 %727 to i32*
  %966 = load i32, i32* %965
  %967 = sext i32 %966 to i64
  %968 = mul nsw i64 %967, 200
  %969 = add i64 %968, %964
  %970 = inttoptr i64 %729 to i32*
  %971 = load i32, i32* %970
  %972 = sext i32 %971 to i64
  %973 = shl nsw i64 %972, 3
  %974 = add i64 %969, 160
  %975 = add i64 %974, %973
  %976 = inttoptr i64 %975 to double*
  %977 = load double, double* %976
  store double %977, double* %171, align 1, !tbaa !1264
  store double 0.000000e+00, double* %681, align 1, !tbaa !1264
  %978 = mul nsw i64 %972, 40
  %979 = add i64 %978, %738
  %980 = add i64 %979, 32
  %981 = inttoptr i64 %980 to double*
  store double %977, double* %981
  %982 = inttoptr i64 %729 to i32*
  %983 = load i32, i32* %982
  %984 = add i32 %983, 1
  %985 = inttoptr i64 %729 to i32*
  store i32 %984, i32* %985
  br label %block_4010ab

block_400c7a:                                     ; preds = %block_400c6e
  %986 = inttoptr i64 %726 to i32*
  %987 = load i32, i32* %986
  %988 = inttoptr i64 %727 to i32*
  store i32 %987, i32* %988
  br label %block_400c80

block_4010ab:                                     ; preds = %block_4010a4, %block_4010b5
  %989 = phi %struct.Memory* [ %1003, %block_4010a4 ], [ %989, %block_4010b5 ]
  %990 = inttoptr i64 %729 to i32*
  %991 = load i32, i32* %990
  %992 = add i32 %991, -5
  %993 = lshr i32 %992, 31
  %994 = lshr i32 %991, 31
  %995 = xor i32 %993, %994
  %996 = add nuw nsw i32 %995, %994
  %997 = icmp eq i32 %996, 2
  %998 = icmp ne i32 %993, 0
  %999 = xor i1 %998, %997
  br i1 %999, label %block_4010b5, label %block_401214

block_4010a4:                                     ; preds = %block_400c93
  %1000 = inttoptr i64 %729 to i32*
  store i32 0, i32* %1000
  br label %block_4010ab

block_4009f8:                                     ; preds = %block_4009ec
  %1001 = add i64 %1032, 7
  %1002 = inttoptr i64 %677 to i32*
  store i32 0, i32* %1002
  br label %block_4009ff

block_400c93:                                     ; preds = %block_400c9d, %block_400c8c
  %1003 = phi %struct.Memory* [ %2028, %block_400c8c ], [ %1003, %block_400c9d ]
  %1004 = inttoptr i64 %729 to i32*
  %1005 = load i32, i32* %1004
  %1006 = add i32 %1005, -5
  %1007 = lshr i32 %1006, 31
  %1008 = lshr i32 %1005, 31
  %1009 = xor i32 %1007, %1008
  %1010 = add nuw nsw i32 %1009, %1008
  %1011 = icmp eq i32 %1010, 2
  %1012 = icmp ne i32 %1007, 0
  %1013 = xor i1 %1012, %1011
  br i1 %1013, label %block_400c9d, label %block_4010a4

block_400c8c:                                     ; preds = %block_400c80
  %1014 = inttoptr i64 %729 to i32*
  store i32 0, i32* %1014
  br label %block_400c93

block_4009ec:                                     ; preds = %block_400c42, %block_4009e6
  %1015 = phi i64 [ %851, %block_4009e6 ], [ %857, %block_400c42 ]
  %1016 = phi %struct.Memory* [ %827, %block_4009e6 ], [ %692, %block_400c42 ]
  %1017 = inttoptr i64 %675 to i32*
  %1018 = load i32, i32* %1017
  %1019 = inttoptr i64 %676 to i32*
  %1020 = load i32, i32* %1019
  %1021 = sub i32 %1018, %1020
  %1022 = lshr i32 %1021, 31
  %1023 = lshr i32 %1018, 31
  %1024 = lshr i32 %1020, 31
  %1025 = xor i32 %1024, %1023
  %1026 = xor i32 %1022, %1023
  %1027 = add nuw nsw i32 %1026, %1025
  %1028 = icmp eq i32 %1027, 2
  %1029 = icmp ne i32 %1022, 0
  %1030 = xor i1 %1029, %1028
  %1031 = select i1 %1030, i64 12, i64 617
  %1032 = add i64 %1015, %1031
  br i1 %1030, label %block_4009f8, label %block_400c55

block_401214:                                     ; preds = %block_4010ab
  %1033 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %1033, double* %171, align 1, !tbaa !1264
  store double 0.000000e+00, double* %681, align 1, !tbaa !1264
  %1034 = bitcast double %1033 to <2 x i32>
  %1035 = extractelement <2 x i32> %1034, i32 0
  store i32 %1035, i32* %743, align 1, !tbaa !1292
  %1036 = extractelement <2 x i32> %1034, i32 1
  store i32 %1036, i32* %745, align 1, !tbaa !1292
  %1037 = load double, double* %683, align 1
  %1038 = inttoptr i64 %738 to double*
  %1039 = load double, double* %1038
  %1040 = fdiv double %1037, %1039
  %1041 = inttoptr i64 %746 to double*
  store double %1040, double* %1041
  %1042 = inttoptr i64 %746 to double*
  %1043 = load double, double* %1042
  %1044 = inttoptr i64 %747 to double*
  %1045 = load double, double* %1044
  %1046 = fmul double %1043, %1045
  %1047 = inttoptr i64 %748 to double*
  store double %1046, double* %1047
  %1048 = inttoptr i64 %749 to double*
  %1049 = load double, double* %1048
  %1050 = inttoptr i64 %748 to double*
  %1051 = load double, double* %1050
  %1052 = inttoptr i64 %750 to double*
  %1053 = load double, double* %1052
  %1054 = fmul double %1051, %1053
  %1055 = fsub double %1049, %1054
  %1056 = inttoptr i64 %749 to double*
  store double %1055, double* %1056
  %1057 = inttoptr i64 %751 to double*
  %1058 = load double, double* %1057
  %1059 = inttoptr i64 %748 to double*
  %1060 = load double, double* %1059
  %1061 = inttoptr i64 %752 to double*
  %1062 = load double, double* %1061
  %1063 = fmul double %1060, %1062
  %1064 = fsub double %1058, %1063
  %1065 = inttoptr i64 %751 to double*
  store double %1064, double* %1065
  %1066 = inttoptr i64 %753 to double*
  %1067 = load double, double* %1066
  %1068 = inttoptr i64 %748 to double*
  %1069 = load double, double* %1068
  %1070 = inttoptr i64 %754 to double*
  %1071 = load double, double* %1070
  %1072 = fmul double %1069, %1071
  %1073 = fsub double %1067, %1072
  %1074 = inttoptr i64 %753 to double*
  store double %1073, double* %1074
  %1075 = inttoptr i64 %755 to double*
  %1076 = load double, double* %1075
  %1077 = inttoptr i64 %748 to double*
  %1078 = load double, double* %1077
  %1079 = inttoptr i64 %756 to double*
  %1080 = load double, double* %1079
  %1081 = fmul double %1078, %1080
  %1082 = fsub double %1076, %1081
  %1083 = inttoptr i64 %755 to double*
  store double %1082, double* %1083
  %1084 = inttoptr i64 %757 to double*
  %1085 = load double, double* %1084
  %1086 = inttoptr i64 %737 to double*
  %1087 = load double, double* %1086
  %1088 = inttoptr i64 %748 to double*
  %1089 = load double, double* %1088
  %1090 = fmul double %1087, %1089
  %1091 = fsub double %1085, %1090
  %1092 = inttoptr i64 %757 to double*
  store double %1091, double* %1092
  %1093 = inttoptr i64 %746 to double*
  %1094 = load double, double* %1093
  %1095 = inttoptr i64 %758 to double*
  %1096 = load double, double* %1095
  %1097 = fmul double %1094, %1096
  %1098 = inttoptr i64 %748 to double*
  store double %1097, double* %1098
  %1099 = inttoptr i64 %759 to double*
  %1100 = load double, double* %1099
  %1101 = inttoptr i64 %748 to double*
  %1102 = load double, double* %1101
  %1103 = inttoptr i64 %750 to double*
  %1104 = load double, double* %1103
  %1105 = fmul double %1102, %1104
  %1106 = fsub double %1100, %1105
  %1107 = inttoptr i64 %759 to double*
  store double %1106, double* %1107
  %1108 = inttoptr i64 %760 to double*
  %1109 = load double, double* %1108
  %1110 = inttoptr i64 %748 to double*
  %1111 = load double, double* %1110
  %1112 = inttoptr i64 %752 to double*
  %1113 = load double, double* %1112
  %1114 = fmul double %1111, %1113
  %1115 = fsub double %1109, %1114
  %1116 = inttoptr i64 %760 to double*
  store double %1115, double* %1116
  %1117 = inttoptr i64 %761 to double*
  %1118 = load double, double* %1117
  %1119 = inttoptr i64 %748 to double*
  %1120 = load double, double* %1119
  %1121 = inttoptr i64 %754 to double*
  %1122 = load double, double* %1121
  %1123 = fmul double %1120, %1122
  %1124 = fsub double %1118, %1123
  %1125 = inttoptr i64 %761 to double*
  store double %1124, double* %1125
  %1126 = inttoptr i64 %762 to double*
  %1127 = load double, double* %1126
  %1128 = inttoptr i64 %748 to double*
  %1129 = load double, double* %1128
  %1130 = inttoptr i64 %756 to double*
  %1131 = load double, double* %1130
  %1132 = fmul double %1129, %1131
  %1133 = fsub double %1127, %1132
  %1134 = inttoptr i64 %762 to double*
  store double %1133, double* %1134
  %1135 = inttoptr i64 %763 to double*
  %1136 = load double, double* %1135
  %1137 = inttoptr i64 %737 to double*
  %1138 = load double, double* %1137
  %1139 = inttoptr i64 %748 to double*
  %1140 = load double, double* %1139
  %1141 = fmul double %1138, %1140
  %1142 = fsub double %1136, %1141
  %1143 = inttoptr i64 %763 to double*
  store double %1142, double* %1143
  %1144 = inttoptr i64 %746 to double*
  %1145 = load double, double* %1144
  %1146 = inttoptr i64 %764 to double*
  %1147 = load double, double* %1146
  %1148 = fmul double %1145, %1147
  %1149 = inttoptr i64 %748 to double*
  store double %1148, double* %1149
  %1150 = inttoptr i64 %765 to double*
  %1151 = load double, double* %1150
  %1152 = inttoptr i64 %748 to double*
  %1153 = load double, double* %1152
  %1154 = inttoptr i64 %750 to double*
  %1155 = load double, double* %1154
  %1156 = fmul double %1153, %1155
  %1157 = fsub double %1151, %1156
  %1158 = inttoptr i64 %765 to double*
  store double %1157, double* %1158
  %1159 = inttoptr i64 %766 to double*
  %1160 = load double, double* %1159
  %1161 = inttoptr i64 %748 to double*
  %1162 = load double, double* %1161
  %1163 = inttoptr i64 %752 to double*
  %1164 = load double, double* %1163
  %1165 = fmul double %1162, %1164
  %1166 = fsub double %1160, %1165
  %1167 = inttoptr i64 %766 to double*
  store double %1166, double* %1167
  %1168 = inttoptr i64 %767 to double*
  %1169 = load double, double* %1168
  %1170 = inttoptr i64 %748 to double*
  %1171 = load double, double* %1170
  %1172 = inttoptr i64 %754 to double*
  %1173 = load double, double* %1172
  %1174 = fmul double %1171, %1173
  %1175 = fsub double %1169, %1174
  %1176 = inttoptr i64 %767 to double*
  store double %1175, double* %1176
  %1177 = inttoptr i64 %768 to double*
  %1178 = load double, double* %1177
  %1179 = inttoptr i64 %748 to double*
  %1180 = load double, double* %1179
  %1181 = inttoptr i64 %756 to double*
  %1182 = load double, double* %1181
  %1183 = fmul double %1180, %1182
  %1184 = fsub double %1178, %1183
  %1185 = inttoptr i64 %768 to double*
  store double %1184, double* %1185
  %1186 = inttoptr i64 %769 to double*
  %1187 = load double, double* %1186
  %1188 = inttoptr i64 %737 to double*
  %1189 = load double, double* %1188
  %1190 = inttoptr i64 %748 to double*
  %1191 = load double, double* %1190
  %1192 = fmul double %1189, %1191
  %1193 = fsub double %1187, %1192
  %1194 = inttoptr i64 %769 to double*
  store double %1193, double* %1194
  %1195 = inttoptr i64 %746 to double*
  %1196 = load double, double* %1195
  %1197 = inttoptr i64 %770 to double*
  %1198 = load double, double* %1197
  %1199 = fmul double %1196, %1198
  %1200 = inttoptr i64 %748 to double*
  store double %1199, double* %1200
  %1201 = inttoptr i64 %771 to double*
  %1202 = load double, double* %1201
  %1203 = inttoptr i64 %748 to double*
  %1204 = load double, double* %1203
  %1205 = inttoptr i64 %750 to double*
  %1206 = load double, double* %1205
  %1207 = fmul double %1204, %1206
  %1208 = fsub double %1202, %1207
  %1209 = inttoptr i64 %771 to double*
  store double %1208, double* %1209
  %1210 = inttoptr i64 %772 to double*
  %1211 = load double, double* %1210
  %1212 = inttoptr i64 %748 to double*
  %1213 = load double, double* %1212
  %1214 = inttoptr i64 %752 to double*
  %1215 = load double, double* %1214
  %1216 = fmul double %1213, %1215
  %1217 = fsub double %1211, %1216
  %1218 = inttoptr i64 %772 to double*
  store double %1217, double* %1218
  %1219 = inttoptr i64 %773 to double*
  %1220 = load double, double* %1219
  %1221 = inttoptr i64 %748 to double*
  %1222 = load double, double* %1221
  %1223 = inttoptr i64 %754 to double*
  %1224 = load double, double* %1223
  %1225 = fmul double %1222, %1224
  %1226 = fsub double %1220, %1225
  %1227 = inttoptr i64 %773 to double*
  store double %1226, double* %1227
  %1228 = inttoptr i64 %774 to double*
  %1229 = load double, double* %1228
  %1230 = inttoptr i64 %748 to double*
  %1231 = load double, double* %1230
  %1232 = inttoptr i64 %756 to double*
  %1233 = load double, double* %1232
  %1234 = fmul double %1231, %1233
  %1235 = fsub double %1229, %1234
  %1236 = inttoptr i64 %774 to double*
  store double %1235, double* %1236
  %1237 = inttoptr i64 %775 to double*
  %1238 = load double, double* %1237
  %1239 = inttoptr i64 %737 to double*
  %1240 = load double, double* %1239
  %1241 = inttoptr i64 %748 to double*
  %1242 = load double, double* %1241
  %1243 = fmul double %1240, %1242
  %1244 = fsub double %1238, %1243
  %1245 = inttoptr i64 %775 to double*
  store double %1244, double* %1245
  %1246 = load <2 x i32>, <2 x i32>* %742, align 1
  %1247 = extractelement <2 x i32> %1246, i32 0
  store i32 %1247, i32* %743, align 1, !tbaa !1292
  %1248 = extractelement <2 x i32> %1246, i32 1
  store i32 %1248, i32* %745, align 1, !tbaa !1292
  %1249 = load double, double* %683, align 1
  %1250 = inttoptr i64 %749 to double*
  %1251 = load double, double* %1250
  %1252 = fdiv double %1249, %1251
  %1253 = inttoptr i64 %746 to double*
  store double %1252, double* %1253
  %1254 = inttoptr i64 %746 to double*
  %1255 = load double, double* %1254
  %1256 = inttoptr i64 %759 to double*
  %1257 = load double, double* %1256
  %1258 = fmul double %1255, %1257
  %1259 = inttoptr i64 %748 to double*
  store double %1258, double* %1259
  %1260 = inttoptr i64 %760 to double*
  %1261 = load double, double* %1260
  %1262 = inttoptr i64 %748 to double*
  %1263 = load double, double* %1262
  %1264 = inttoptr i64 %751 to double*
  %1265 = load double, double* %1264
  %1266 = fmul double %1263, %1265
  %1267 = fsub double %1261, %1266
  %1268 = inttoptr i64 %760 to double*
  store double %1267, double* %1268
  %1269 = inttoptr i64 %761 to double*
  %1270 = load double, double* %1269
  %1271 = inttoptr i64 %748 to double*
  %1272 = load double, double* %1271
  %1273 = inttoptr i64 %753 to double*
  %1274 = load double, double* %1273
  %1275 = fmul double %1272, %1274
  %1276 = fsub double %1270, %1275
  %1277 = inttoptr i64 %761 to double*
  store double %1276, double* %1277
  %1278 = inttoptr i64 %762 to double*
  %1279 = load double, double* %1278
  %1280 = inttoptr i64 %748 to double*
  %1281 = load double, double* %1280
  %1282 = inttoptr i64 %755 to double*
  %1283 = load double, double* %1282
  %1284 = fmul double %1281, %1283
  %1285 = fsub double %1279, %1284
  %1286 = inttoptr i64 %762 to double*
  store double %1285, double* %1286
  %1287 = inttoptr i64 %763 to double*
  %1288 = load double, double* %1287
  %1289 = inttoptr i64 %757 to double*
  %1290 = load double, double* %1289
  %1291 = inttoptr i64 %748 to double*
  %1292 = load double, double* %1291
  %1293 = fmul double %1290, %1292
  %1294 = fsub double %1288, %1293
  %1295 = inttoptr i64 %763 to double*
  store double %1294, double* %1295
  %1296 = inttoptr i64 %746 to double*
  %1297 = load double, double* %1296
  %1298 = inttoptr i64 %765 to double*
  %1299 = load double, double* %1298
  %1300 = fmul double %1297, %1299
  %1301 = inttoptr i64 %748 to double*
  store double %1300, double* %1301
  %1302 = inttoptr i64 %766 to double*
  %1303 = load double, double* %1302
  %1304 = inttoptr i64 %748 to double*
  %1305 = load double, double* %1304
  %1306 = inttoptr i64 %751 to double*
  %1307 = load double, double* %1306
  %1308 = fmul double %1305, %1307
  %1309 = fsub double %1303, %1308
  %1310 = inttoptr i64 %766 to double*
  store double %1309, double* %1310
  %1311 = inttoptr i64 %767 to double*
  %1312 = load double, double* %1311
  %1313 = inttoptr i64 %748 to double*
  %1314 = load double, double* %1313
  %1315 = inttoptr i64 %753 to double*
  %1316 = load double, double* %1315
  %1317 = fmul double %1314, %1316
  %1318 = fsub double %1312, %1317
  %1319 = inttoptr i64 %767 to double*
  store double %1318, double* %1319
  %1320 = inttoptr i64 %768 to double*
  %1321 = load double, double* %1320
  %1322 = inttoptr i64 %748 to double*
  %1323 = load double, double* %1322
  %1324 = inttoptr i64 %755 to double*
  %1325 = load double, double* %1324
  %1326 = fmul double %1323, %1325
  %1327 = fsub double %1321, %1326
  %1328 = inttoptr i64 %768 to double*
  store double %1327, double* %1328
  %1329 = inttoptr i64 %769 to double*
  %1330 = load double, double* %1329
  %1331 = inttoptr i64 %757 to double*
  %1332 = load double, double* %1331
  %1333 = inttoptr i64 %748 to double*
  %1334 = load double, double* %1333
  %1335 = fmul double %1332, %1334
  %1336 = fsub double %1330, %1335
  %1337 = inttoptr i64 %769 to double*
  store double %1336, double* %1337
  %1338 = inttoptr i64 %746 to double*
  %1339 = load double, double* %1338
  %1340 = inttoptr i64 %771 to double*
  %1341 = load double, double* %1340
  %1342 = fmul double %1339, %1341
  %1343 = inttoptr i64 %748 to double*
  store double %1342, double* %1343
  %1344 = inttoptr i64 %772 to double*
  %1345 = load double, double* %1344
  %1346 = inttoptr i64 %748 to double*
  %1347 = load double, double* %1346
  %1348 = inttoptr i64 %751 to double*
  %1349 = load double, double* %1348
  %1350 = fmul double %1347, %1349
  %1351 = fsub double %1345, %1350
  %1352 = inttoptr i64 %772 to double*
  store double %1351, double* %1352
  %1353 = inttoptr i64 %773 to double*
  %1354 = load double, double* %1353
  %1355 = inttoptr i64 %748 to double*
  %1356 = load double, double* %1355
  %1357 = inttoptr i64 %753 to double*
  %1358 = load double, double* %1357
  %1359 = fmul double %1356, %1358
  %1360 = fsub double %1354, %1359
  %1361 = inttoptr i64 %773 to double*
  store double %1360, double* %1361
  %1362 = inttoptr i64 %774 to double*
  %1363 = load double, double* %1362
  %1364 = inttoptr i64 %748 to double*
  %1365 = load double, double* %1364
  %1366 = inttoptr i64 %755 to double*
  %1367 = load double, double* %1366
  %1368 = fmul double %1365, %1367
  %1369 = fsub double %1363, %1368
  %1370 = inttoptr i64 %774 to double*
  store double %1369, double* %1370
  %1371 = inttoptr i64 %775 to double*
  %1372 = load double, double* %1371
  %1373 = inttoptr i64 %757 to double*
  %1374 = load double, double* %1373
  %1375 = inttoptr i64 %748 to double*
  %1376 = load double, double* %1375
  %1377 = fmul double %1374, %1376
  %1378 = fsub double %1372, %1377
  %1379 = inttoptr i64 %775 to double*
  store double %1378, double* %1379
  %1380 = load <2 x i32>, <2 x i32>* %742, align 1
  %1381 = extractelement <2 x i32> %1380, i32 0
  store i32 %1381, i32* %743, align 1, !tbaa !1292
  %1382 = extractelement <2 x i32> %1380, i32 1
  store i32 %1382, i32* %745, align 1, !tbaa !1292
  %1383 = load double, double* %683, align 1
  %1384 = inttoptr i64 %760 to double*
  %1385 = load double, double* %1384
  %1386 = fdiv double %1383, %1385
  %1387 = inttoptr i64 %746 to double*
  store double %1386, double* %1387
  %1388 = inttoptr i64 %746 to double*
  %1389 = load double, double* %1388
  %1390 = inttoptr i64 %766 to double*
  %1391 = load double, double* %1390
  %1392 = fmul double %1389, %1391
  %1393 = inttoptr i64 %748 to double*
  store double %1392, double* %1393
  %1394 = inttoptr i64 %767 to double*
  %1395 = load double, double* %1394
  %1396 = inttoptr i64 %748 to double*
  %1397 = load double, double* %1396
  %1398 = inttoptr i64 %761 to double*
  %1399 = load double, double* %1398
  %1400 = fmul double %1397, %1399
  %1401 = fsub double %1395, %1400
  %1402 = inttoptr i64 %767 to double*
  store double %1401, double* %1402
  %1403 = inttoptr i64 %768 to double*
  %1404 = load double, double* %1403
  %1405 = inttoptr i64 %748 to double*
  %1406 = load double, double* %1405
  %1407 = inttoptr i64 %762 to double*
  %1408 = load double, double* %1407
  %1409 = fmul double %1406, %1408
  %1410 = fsub double %1404, %1409
  %1411 = inttoptr i64 %768 to double*
  store double %1410, double* %1411
  %1412 = inttoptr i64 %769 to double*
  %1413 = load double, double* %1412
  %1414 = inttoptr i64 %763 to double*
  %1415 = load double, double* %1414
  %1416 = inttoptr i64 %748 to double*
  %1417 = load double, double* %1416
  %1418 = fmul double %1415, %1417
  %1419 = fsub double %1413, %1418
  %1420 = inttoptr i64 %769 to double*
  store double %1419, double* %1420
  %1421 = inttoptr i64 %746 to double*
  %1422 = load double, double* %1421
  %1423 = inttoptr i64 %772 to double*
  %1424 = load double, double* %1423
  %1425 = fmul double %1422, %1424
  %1426 = inttoptr i64 %748 to double*
  store double %1425, double* %1426
  %1427 = inttoptr i64 %773 to double*
  %1428 = load double, double* %1427
  %1429 = inttoptr i64 %748 to double*
  %1430 = load double, double* %1429
  %1431 = inttoptr i64 %761 to double*
  %1432 = load double, double* %1431
  %1433 = fmul double %1430, %1432
  %1434 = fsub double %1428, %1433
  %1435 = inttoptr i64 %773 to double*
  store double %1434, double* %1435
  %1436 = inttoptr i64 %774 to double*
  %1437 = load double, double* %1436
  %1438 = inttoptr i64 %748 to double*
  %1439 = load double, double* %1438
  %1440 = inttoptr i64 %762 to double*
  %1441 = load double, double* %1440
  %1442 = fmul double %1439, %1441
  %1443 = fsub double %1437, %1442
  %1444 = inttoptr i64 %774 to double*
  store double %1443, double* %1444
  %1445 = inttoptr i64 %775 to double*
  %1446 = load double, double* %1445
  %1447 = inttoptr i64 %763 to double*
  %1448 = load double, double* %1447
  %1449 = inttoptr i64 %748 to double*
  %1450 = load double, double* %1449
  %1451 = fmul double %1448, %1450
  store double %1451, double* %687, align 1, !tbaa !1264
  store i64 0, i64* %688, align 1, !tbaa !1264
  %1452 = fsub double %1446, %1451
  %1453 = inttoptr i64 %775 to double*
  store double %1452, double* %1453
  %1454 = load double, double* %171, align 1
  %1455 = inttoptr i64 %767 to double*
  %1456 = load double, double* %1455
  %1457 = fdiv double %1454, %1456
  %1458 = inttoptr i64 %746 to double*
  store double %1457, double* %1458
  %1459 = inttoptr i64 %746 to double*
  %1460 = load double, double* %1459
  %1461 = inttoptr i64 %773 to double*
  %1462 = load double, double* %1461
  %1463 = fmul double %1460, %1462
  %1464 = inttoptr i64 %748 to double*
  store double %1463, double* %1464
  %1465 = inttoptr i64 %774 to double*
  %1466 = load double, double* %1465
  %1467 = inttoptr i64 %748 to double*
  %1468 = load double, double* %1467
  %1469 = inttoptr i64 %768 to double*
  %1470 = load double, double* %1469
  %1471 = fmul double %1468, %1470
  %1472 = fsub double %1466, %1471
  %1473 = inttoptr i64 %774 to double*
  store double %1472, double* %1473
  %1474 = inttoptr i64 %775 to double*
  %1475 = load double, double* %1474
  %1476 = inttoptr i64 %769 to double*
  %1477 = load double, double* %1476
  %1478 = inttoptr i64 %748 to double*
  %1479 = load double, double* %1478
  %1480 = fmul double %1477, %1479
  %1481 = fsub double %1475, %1480
  %1482 = inttoptr i64 %775 to double*
  store double %1481, double* %1482
  %1483 = inttoptr i64 %775 to double*
  %1484 = load double, double* %1483
  %1485 = inttoptr i64 %774 to double*
  %1486 = load double, double* %1485
  %1487 = fdiv double %1484, %1486
  %1488 = inttoptr i64 %730 to i64*
  %1489 = load i64, i64* %1488
  %1490 = inttoptr i64 %723 to i32*
  %1491 = load i32, i32* %1490
  %1492 = sext i32 %1491 to i64
  %1493 = inttoptr i64 %731 to i64*
  %1494 = load i64, i64* %1493
  store i64 %1494, i64* %29, align 8, !tbaa !1240
  %1495 = mul i64 %1492, %1494
  %1496 = mul i64 %1495, 40
  %1497 = add i64 %1496, %1489
  %1498 = inttoptr i64 %727 to i32*
  %1499 = load i32, i32* %1498
  %1500 = sext i32 %1499 to i64
  %1501 = mul nsw i64 %1500, 40
  %1502 = add i64 %1501, %1497
  %1503 = add i64 %1502, 32
  %1504 = inttoptr i64 %1503 to double*
  store double %1487, double* %1504
  %1505 = inttoptr i64 %769 to double*
  %1506 = load double, double* %1505
  %1507 = inttoptr i64 %768 to double*
  %1508 = load double, double* %1507
  %1509 = inttoptr i64 %730 to i64*
  %1510 = load i64, i64* %1509
  %1511 = inttoptr i64 %723 to i32*
  %1512 = load i32, i32* %1511
  %1513 = sext i32 %1512 to i64
  %1514 = mul i64 %1494, %1513
  %1515 = mul i64 %1514, 40
  %1516 = add i64 %1515, %1510
  %1517 = inttoptr i64 %727 to i32*
  %1518 = load i32, i32* %1517
  %1519 = sext i32 %1518 to i64
  %1520 = mul nsw i64 %1519, 40
  %1521 = add i64 %1520, %1516
  %1522 = add i64 %1521, 32
  %1523 = inttoptr i64 %1522 to double*
  %1524 = load double, double* %1523
  %1525 = fmul double %1508, %1524
  %1526 = fsub double %1506, %1525
  %1527 = inttoptr i64 %769 to double*
  store double %1526, double* %1527
  %1528 = inttoptr i64 %769 to double*
  %1529 = load double, double* %1528
  %1530 = inttoptr i64 %767 to double*
  %1531 = load double, double* %1530
  %1532 = fdiv double %1529, %1531
  %1533 = inttoptr i64 %730 to i64*
  %1534 = load i64, i64* %1533
  %1535 = inttoptr i64 %723 to i32*
  %1536 = load i32, i32* %1535
  %1537 = sext i32 %1536 to i64
  %1538 = mul i64 %1494, %1537
  %1539 = mul i64 %1538, 40
  %1540 = add i64 %1539, %1534
  %1541 = inttoptr i64 %727 to i32*
  %1542 = load i32, i32* %1541
  %1543 = sext i32 %1542 to i64
  %1544 = mul nsw i64 %1543, 40
  %1545 = add i64 %1544, %1540
  %1546 = add i64 %1545, 24
  %1547 = inttoptr i64 %1546 to double*
  store double %1532, double* %1547
  %1548 = inttoptr i64 %763 to double*
  %1549 = load double, double* %1548
  %1550 = inttoptr i64 %761 to double*
  %1551 = load double, double* %1550
  %1552 = inttoptr i64 %730 to i64*
  %1553 = load i64, i64* %1552
  %1554 = inttoptr i64 %723 to i32*
  %1555 = load i32, i32* %1554
  %1556 = sext i32 %1555 to i64
  %1557 = mul i64 %1494, %1556
  %1558 = mul i64 %1557, 40
  %1559 = add i64 %1558, %1553
  %1560 = inttoptr i64 %727 to i32*
  %1561 = load i32, i32* %1560
  %1562 = sext i32 %1561 to i64
  %1563 = mul nsw i64 %1562, 40
  %1564 = add i64 %1563, %1559
  %1565 = add i64 %1564, 24
  %1566 = inttoptr i64 %1565 to double*
  %1567 = load double, double* %1566
  %1568 = fmul double %1551, %1567
  %1569 = fsub double %1549, %1568
  %1570 = inttoptr i64 %762 to double*
  %1571 = load double, double* %1570
  %1572 = load i64, i64* %29, align 8
  %1573 = mul i64 %1572, %1556
  %1574 = mul i64 %1573, 40
  %1575 = add i64 %1574, %1553
  %1576 = add i64 %1563, %1575
  %1577 = add i64 %1576, 32
  %1578 = inttoptr i64 %1577 to double*
  %1579 = load double, double* %1578
  %1580 = fmul double %1571, %1579
  %1581 = fsub double %1569, %1580
  %1582 = inttoptr i64 %763 to double*
  store double %1581, double* %1582
  %1583 = inttoptr i64 %763 to double*
  %1584 = load double, double* %1583
  %1585 = inttoptr i64 %760 to double*
  %1586 = load double, double* %1585
  %1587 = fdiv double %1584, %1586
  %1588 = inttoptr i64 %730 to i64*
  %1589 = load i64, i64* %1588
  %1590 = inttoptr i64 %723 to i32*
  %1591 = load i32, i32* %1590
  %1592 = sext i32 %1591 to i64
  %1593 = mul i64 %1572, %1592
  %1594 = mul i64 %1593, 40
  %1595 = add i64 %1594, %1589
  %1596 = inttoptr i64 %727 to i32*
  %1597 = load i32, i32* %1596
  %1598 = sext i32 %1597 to i64
  %1599 = mul nsw i64 %1598, 40
  %1600 = add i64 %1599, %1595
  %1601 = add i64 %1600, 16
  %1602 = inttoptr i64 %1601 to double*
  store double %1587, double* %1602
  %1603 = inttoptr i64 %757 to double*
  %1604 = load double, double* %1603
  %1605 = inttoptr i64 %751 to double*
  %1606 = load double, double* %1605
  %1607 = inttoptr i64 %730 to i64*
  %1608 = load i64, i64* %1607
  %1609 = inttoptr i64 %723 to i32*
  %1610 = load i32, i32* %1609
  %1611 = sext i32 %1610 to i64
  %1612 = mul i64 %1572, %1611
  %1613 = mul i64 %1612, 40
  %1614 = add i64 %1613, %1608
  %1615 = inttoptr i64 %727 to i32*
  %1616 = load i32, i32* %1615
  %1617 = sext i32 %1616 to i64
  %1618 = mul nsw i64 %1617, 40
  %1619 = add i64 %1618, %1614
  %1620 = add i64 %1619, 16
  %1621 = inttoptr i64 %1620 to double*
  %1622 = load double, double* %1621
  %1623 = fmul double %1606, %1622
  %1624 = fsub double %1604, %1623
  %1625 = inttoptr i64 %753 to double*
  %1626 = load double, double* %1625
  %1627 = add i64 %1619, 24
  %1628 = inttoptr i64 %1627 to double*
  %1629 = load double, double* %1628
  %1630 = fmul double %1626, %1629
  %1631 = fsub double %1624, %1630
  %1632 = inttoptr i64 %755 to double*
  %1633 = load double, double* %1632
  %1634 = add i64 %1619, 32
  %1635 = inttoptr i64 %1634 to double*
  %1636 = load double, double* %1635
  %1637 = fmul double %1633, %1636
  %1638 = fsub double %1631, %1637
  %1639 = inttoptr i64 %757 to double*
  store double %1638, double* %1639
  %1640 = inttoptr i64 %757 to double*
  %1641 = load double, double* %1640
  %1642 = inttoptr i64 %749 to double*
  %1643 = load double, double* %1642
  %1644 = fdiv double %1641, %1643
  %1645 = inttoptr i64 %730 to i64*
  %1646 = load i64, i64* %1645
  %1647 = inttoptr i64 %723 to i32*
  %1648 = load i32, i32* %1647
  %1649 = sext i32 %1648 to i64
  %1650 = load i64, i64* %29, align 8
  %1651 = mul i64 %1650, %1649
  %1652 = mul i64 %1651, 40
  %1653 = add i64 %1652, %1646
  %1654 = inttoptr i64 %727 to i32*
  %1655 = load i32, i32* %1654
  %1656 = sext i32 %1655 to i64
  %1657 = mul nsw i64 %1656, 40
  %1658 = add i64 %1657, %1653
  %1659 = add i64 %1658, 8
  %1660 = inttoptr i64 %1659 to double*
  store double %1644, double* %1660
  %1661 = inttoptr i64 %737 to double*
  %1662 = load double, double* %1661
  %1663 = inttoptr i64 %750 to double*
  %1664 = load double, double* %1663
  %1665 = inttoptr i64 %730 to i64*
  %1666 = load i64, i64* %1665
  %1667 = inttoptr i64 %723 to i32*
  %1668 = load i32, i32* %1667
  %1669 = sext i32 %1668 to i64
  %1670 = mul i64 %1650, %1669
  %1671 = mul i64 %1670, 40
  %1672 = add i64 %1671, %1666
  %1673 = inttoptr i64 %727 to i32*
  %1674 = load i32, i32* %1673
  %1675 = sext i32 %1674 to i64
  %1676 = mul nsw i64 %1675, 40
  %1677 = add i64 %1676, %1672
  %1678 = add i64 %1677, 8
  %1679 = inttoptr i64 %1678 to double*
  %1680 = load double, double* %1679
  %1681 = fmul double %1664, %1680
  %1682 = fsub double %1662, %1681
  %1683 = inttoptr i64 %752 to double*
  %1684 = load double, double* %1683
  %1685 = add i64 %1677, 16
  %1686 = inttoptr i64 %1685 to double*
  %1687 = load double, double* %1686
  %1688 = fmul double %1684, %1687
  %1689 = fsub double %1682, %1688
  %1690 = inttoptr i64 %754 to double*
  %1691 = load double, double* %1690
  %1692 = add i64 %1677, 24
  %1693 = inttoptr i64 %1692 to double*
  %1694 = load double, double* %1693
  %1695 = fmul double %1691, %1694
  %1696 = fsub double %1689, %1695
  %1697 = inttoptr i64 %756 to double*
  %1698 = load double, double* %1697
  %1699 = add i64 %1677, 32
  %1700 = inttoptr i64 %1699 to double*
  %1701 = load double, double* %1700
  %1702 = fmul double %1698, %1701
  store double %1702, double* %683, align 1, !tbaa !1264
  store i64 0, i64* %684, align 1, !tbaa !1264
  %1703 = fsub double %1696, %1702
  %1704 = inttoptr i64 %737 to double*
  store double %1703, double* %1704
  %1705 = inttoptr i64 %737 to double*
  %1706 = load double, double* %1705
  %1707 = inttoptr i64 %738 to double*
  %1708 = load double, double* %1707
  %1709 = fdiv double %1706, %1708
  store double %1709, double* %171, align 1, !tbaa !1264
  store i64 0, i64* %680, align 1, !tbaa !1264
  %1710 = inttoptr i64 %730 to i64*
  %1711 = load i64, i64* %1710
  %1712 = inttoptr i64 %723 to i32*
  %1713 = load i32, i32* %1712
  %1714 = sext i32 %1713 to i64
  %1715 = load i64, i64* %29, align 8
  %1716 = mul i64 %1715, %1714
  %1717 = mul i64 %1716, 40
  %1718 = add i64 %1717, %1711
  %1719 = inttoptr i64 %727 to i32*
  %1720 = load i32, i32* %1719
  %1721 = sext i32 %1720 to i64
  %1722 = mul nsw i64 %1721, 40
  store i64 %1722, i64* %28, align 8, !tbaa !1240
  %1723 = add i64 %1722, %1718
  %1724 = inttoptr i64 %1723 to double*
  store double %1709, double* %1724
  %1725 = inttoptr i64 %727 to i32*
  %1726 = load i32, i32* %1725
  %1727 = add i32 %1726, 1
  %1728 = inttoptr i64 %727 to i32*
  store i32 %1727, i32* %1728
  br label %block_400c80

block_400a09:                                     ; preds = %block_4009ff
  %1729 = inttoptr i64 %678 to i64*
  %1730 = load i64, i64* %1729
  %1731 = inttoptr i64 %643 to i32*
  %1732 = load i32, i32* %1731
  %1733 = sext i32 %1732 to i64
  %1734 = inttoptr i64 %679 to i64*
  %1735 = load i64, i64* %1734
  store i64 %1735, i64* %29, align 8, !tbaa !1240
  %1736 = mul i64 %1733, %1735
  %1737 = mul i64 %1736, 40
  %1738 = add i64 %1737, %1730
  %1739 = inttoptr i64 %675 to i32*
  %1740 = load i32, i32* %1739
  %1741 = sext i32 %1740 to i64
  %1742 = mul nsw i64 %1741, 40
  %1743 = add i64 %1742, %1738
  %1744 = sext i32 %694 to i64
  %1745 = shl nsw i64 %1744, 3
  %1746 = add i64 %1745, %1743
  %1747 = inttoptr i64 %1746 to double*
  %1748 = load double, double* %1747
  store double %1748, double* %171, align 1, !tbaa !1264
  store double 0.000000e+00, double* %681, align 1, !tbaa !1264
  %1749 = inttoptr i64 %682 to double*
  %1750 = load double, double* %1749
  store double %1750, double* %683, align 1, !tbaa !1264
  store double 0.000000e+00, double* %685, align 1, !tbaa !1264
  %1751 = inttoptr i64 %686 to i64*
  %1752 = load i64, i64* %1751
  %1753 = inttoptr i64 %663 to i64*
  %1754 = load i64, i64* %1753
  store i64 %1754, i64* %30, align 8, !tbaa !1240
  %1755 = mul i64 %1733, %1754
  %1756 = mul i64 %1755, 200
  %1757 = add i64 %1756, %1752
  %1758 = mul nsw i64 %1741, 200
  %1759 = add i64 %1758, %1757
  %1760 = add i64 %1745, %1759
  %1761 = inttoptr i64 %1760 to double*
  %1762 = load double, double* %1761
  %1763 = inttoptr i64 %637 to i64*
  %1764 = load i64, i64* %1763
  %1765 = inttoptr i64 %660 to i64*
  %1766 = load i64, i64* %1765
  store i64 %1766, i64* %31, align 8, !tbaa !1240
  %1767 = mul i64 %1733, %1766
  %1768 = mul i64 %1767, 40
  %1769 = add i64 %1768, %1764
  %1770 = add i64 %1742, %1769
  %1771 = inttoptr i64 %1770 to double*
  %1772 = load double, double* %1771
  %1773 = fmul double %1762, %1772
  %1774 = add i64 %1759, 40
  %1775 = add i64 %1774, %1745
  %1776 = inttoptr i64 %1775 to double*
  %1777 = load double, double* %1776
  %1778 = add i64 %1770, 8
  %1779 = inttoptr i64 %1778 to double*
  %1780 = load double, double* %1779
  %1781 = fmul double %1777, %1780
  %1782 = fadd double %1773, %1781
  %1783 = add i64 %1759, 80
  %1784 = add i64 %1783, %1745
  %1785 = inttoptr i64 %1784 to double*
  %1786 = load double, double* %1785
  %1787 = add i64 %1770, 16
  %1788 = inttoptr i64 %1787 to double*
  %1789 = load double, double* %1788
  %1790 = fmul double %1786, %1789
  %1791 = fadd double %1782, %1790
  %1792 = add i64 %1759, 120
  %1793 = add i64 %1792, %1745
  %1794 = inttoptr i64 %1793 to double*
  %1795 = load double, double* %1794
  %1796 = add i64 %1770, 24
  %1797 = inttoptr i64 %1796 to double*
  %1798 = load double, double* %1797
  %1799 = fmul double %1795, %1798
  %1800 = fadd double %1791, %1799
  %1801 = load i64, i64* %30, align 8
  %1802 = mul i64 %1801, %1733
  %1803 = mul i64 %1802, 200
  %1804 = add i64 %1803, %1752
  %1805 = add i64 %1758, %1804
  %1806 = add i64 %1805, 160
  %1807 = add i64 %1806, %1745
  %1808 = inttoptr i64 %1807 to double*
  %1809 = load double, double* %1808
  %1810 = load i64, i64* %31, align 8
  %1811 = mul i64 %1810, %1733
  %1812 = mul i64 %1811, 40
  %1813 = add i64 %1812, %1764
  %1814 = add i64 %1742, %1813
  %1815 = add i64 %1814, 32
  %1816 = inttoptr i64 %1815 to double*
  %1817 = load double, double* %1816
  %1818 = fmul double %1809, %1817
  store double %1818, double* %689, align 1, !tbaa !1264
  store i64 0, i64* %690, align 1, !tbaa !1264
  %1819 = fadd double %1800, %1818
  store double %1819, double* %687, align 1, !tbaa !1264
  store i64 0, i64* %688, align 1, !tbaa !1264
  %1820 = load double, double* %683, align 1
  %1821 = fmul double %1820, %1819
  store double %1821, double* %683, align 1, !tbaa !1264
  %1822 = load double, double* %171, align 1
  %1823 = fsub double %1822, %1821
  store double %1823, double* %171, align 1, !tbaa !1264
  %1824 = load i64, i64* %29, align 8
  %1825 = mul i64 %1824, %1733
  %1826 = mul i64 %1825, 40
  %1827 = add i64 %1826, %1730
  %1828 = add i64 %1742, %1827
  store i64 %1744, i64* %28, align 8, !tbaa !1240
  %1829 = add i64 %1745, %1828
  %1830 = inttoptr i64 %1829 to double*
  store double %1823, double* %1830
  %1831 = inttoptr i64 %677 to i32*
  %1832 = load i32, i32* %1831
  %1833 = add i32 %1832, 1
  %1834 = inttoptr i64 %677 to i32*
  store i32 %1833, i32* %1834
  %1835 = add i64 %704, -10
  br label %block_4009ff

block_400c9d:                                     ; preds = %block_400c93
  %1836 = inttoptr i64 %730 to i64*
  %1837 = load i64, i64* %1836
  %1838 = inttoptr i64 %723 to i32*
  %1839 = load i32, i32* %1838
  %1840 = sext i32 %1839 to i64
  %1841 = inttoptr i64 %731 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %29, align 8, !tbaa !1240
  %1843 = mul i64 %1840, %1842
  %1844 = mul i64 %1843, 40
  %1845 = add i64 %1844, %1837
  %1846 = inttoptr i64 %727 to i32*
  %1847 = load i32, i32* %1846
  %1848 = sext i32 %1847 to i64
  %1849 = mul nsw i64 %1848, 40
  %1850 = add i64 %1849, %1845
  %1851 = sext i32 %1005 to i64
  %1852 = shl nsw i64 %1851, 3
  %1853 = add i64 %1852, %1850
  %1854 = inttoptr i64 %1853 to double*
  %1855 = load double, double* %1854
  store double %1855, double* %171, align 1, !tbaa !1264
  store double 0.000000e+00, double* %681, align 1, !tbaa !1264
  %1856 = inttoptr i64 %732 to double*
  %1857 = load double, double* %1856
  store double %1857, double* %683, align 1, !tbaa !1264
  store double 0.000000e+00, double* %685, align 1, !tbaa !1264
  %1858 = inttoptr i64 %733 to i64*
  %1859 = load i64, i64* %1858
  %1860 = inttoptr i64 %734 to i64*
  %1861 = load i64, i64* %1860
  store i64 %1861, i64* %30, align 8, !tbaa !1240
  %1862 = mul i64 %1840, %1861
  %1863 = mul i64 %1862, 200
  %1864 = add i64 %1863, %1859
  %1865 = mul nsw i64 %1848, 200
  %1866 = add i64 %1865, %1864
  %1867 = add i64 %1852, %1866
  %1868 = inttoptr i64 %1867 to double*
  %1869 = load double, double* %1868
  %1870 = add i32 %1839, -1
  %1871 = sext i32 %1870 to i64
  %1872 = mul i64 %1842, %1871
  %1873 = mul i64 %1872, 40
  %1874 = add i64 %1873, %1837
  %1875 = add i64 %1849, %1874
  %1876 = inttoptr i64 %1875 to double*
  %1877 = load double, double* %1876
  %1878 = fmul double %1869, %1877
  %1879 = inttoptr i64 %735 to i64*
  %1880 = load i64, i64* %1879
  %1881 = inttoptr i64 %736 to i64*
  %1882 = load i64, i64* %1881
  store i64 %1882, i64* %34, align 8, !tbaa !1240
  %1883 = mul i64 %1840, %1882
  %1884 = mul i64 %1883, 200
  %1885 = add i64 %1884, %1880
  %1886 = add i64 %1865, %1885
  %1887 = add i64 %1852, %1886
  %1888 = inttoptr i64 %1887 to double*
  %1889 = load double, double* %1888
  %1890 = add i32 %1847, -1
  %1891 = zext i32 %1890 to i64
  %1892 = sext i32 %1890 to i64
  %1893 = mul nsw i64 %1892, 40
  %1894 = add i64 %1893, %1845
  %1895 = inttoptr i64 %1894 to double*
  %1896 = load double, double* %1895
  %1897 = fmul double %1889, %1896
  %1898 = fadd double %1878, %1897
  %1899 = add i64 %1866, 40
  %1900 = add i64 %1899, %1852
  %1901 = inttoptr i64 %1900 to double*
  %1902 = load double, double* %1901
  %1903 = load i64, i64* %29, align 8
  %1904 = mul i64 %1903, %1871
  %1905 = mul i64 %1904, 40
  %1906 = add i64 %1905, %1837
  %1907 = add i64 %1849, %1906
  %1908 = add i64 %1907, 8
  %1909 = inttoptr i64 %1908 to double*
  %1910 = load double, double* %1909
  %1911 = fmul double %1902, %1910
  %1912 = fadd double %1898, %1911
  %1913 = add i64 %1886, 40
  %1914 = add i64 %1913, %1852
  %1915 = inttoptr i64 %1914 to double*
  %1916 = load double, double* %1915
  %1917 = mul i64 %1903, %1840
  %1918 = mul i64 %1917, 40
  %1919 = add i64 %1918, %1837
  %1920 = add i64 %1893, %1919
  %1921 = add i64 %1920, 8
  %1922 = inttoptr i64 %1921 to double*
  %1923 = load double, double* %1922
  %1924 = fmul double %1916, %1923
  %1925 = fadd double %1912, %1924
  %1926 = load i64, i64* %30, align 8
  %1927 = mul i64 %1926, %1840
  %1928 = mul i64 %1927, 200
  %1929 = add i64 %1928, %1859
  %1930 = add i64 %1865, %1929
  %1931 = add i64 %1930, 80
  %1932 = add i64 %1931, %1852
  %1933 = inttoptr i64 %1932 to double*
  %1934 = load double, double* %1933
  %1935 = add i64 %1907, 16
  %1936 = inttoptr i64 %1935 to double*
  %1937 = load double, double* %1936
  %1938 = fmul double %1934, %1937
  %1939 = fadd double %1925, %1938
  %1940 = load i64, i64* %34, align 8
  %1941 = mul i64 %1940, %1840
  %1942 = mul i64 %1941, 200
  %1943 = add i64 %1942, %1880
  %1944 = add i64 %1865, %1943
  %1945 = add i64 %1944, 80
  %1946 = add i64 %1945, %1852
  %1947 = inttoptr i64 %1946 to double*
  %1948 = load double, double* %1947
  %1949 = load i64, i64* %29, align 8
  %1950 = mul i64 %1949, %1840
  %1951 = mul i64 %1950, 40
  %1952 = add i64 %1951, %1837
  %1953 = add i64 %1893, %1952
  %1954 = add i64 %1953, 16
  %1955 = inttoptr i64 %1954 to double*
  %1956 = load double, double* %1955
  %1957 = fmul double %1948, %1956
  %1958 = fadd double %1939, %1957
  %1959 = add i64 %1930, 120
  %1960 = add i64 %1959, %1852
  %1961 = inttoptr i64 %1960 to double*
  %1962 = load double, double* %1961
  %1963 = mul i64 %1949, %1871
  %1964 = mul i64 %1963, 40
  %1965 = add i64 %1964, %1837
  %1966 = add i64 %1849, %1965
  %1967 = add i64 %1966, 24
  %1968 = inttoptr i64 %1967 to double*
  %1969 = load double, double* %1968
  %1970 = fmul double %1962, %1969
  %1971 = fadd double %1958, %1970
  %1972 = add i64 %1944, 120
  %1973 = add i64 %1972, %1852
  %1974 = inttoptr i64 %1973 to double*
  %1975 = load double, double* %1974
  %1976 = add i64 %1953, 24
  %1977 = inttoptr i64 %1976 to double*
  %1978 = load double, double* %1977
  %1979 = fmul double %1975, %1978
  %1980 = fadd double %1971, %1979
  %1981 = load i64, i64* %30, align 8
  %1982 = mul i64 %1981, %1840
  %1983 = mul i64 %1982, 200
  %1984 = add i64 %1983, %1859
  %1985 = add i64 %1865, %1984
  %1986 = add i64 %1985, 160
  %1987 = add i64 %1986, %1852
  %1988 = inttoptr i64 %1987 to double*
  %1989 = load double, double* %1988
  %1990 = load i64, i64* %29, align 8
  %1991 = mul i64 %1990, %1871
  %1992 = mul i64 %1991, 40
  %1993 = add i64 %1992, %1837
  %1994 = add i64 %1849, %1993
  %1995 = add i64 %1994, 32
  %1996 = inttoptr i64 %1995 to double*
  %1997 = load double, double* %1996
  %1998 = fmul double %1989, %1997
  %1999 = fadd double %1980, %1998
  %2000 = load i64, i64* %34, align 8
  %2001 = mul i64 %2000, %1840
  %2002 = mul i64 %2001, 200
  %2003 = add i64 %2002, %1880
  %2004 = add i64 %1865, %2003
  %2005 = add i64 %2004, 160
  %2006 = add i64 %2005, %1852
  %2007 = inttoptr i64 %2006 to double*
  %2008 = load double, double* %2007
  %2009 = mul i64 %1990, %1840
  %2010 = mul i64 %2009, 40
  %2011 = add i64 %2010, %1837
  store i64 %1891, i64* %31, align 8, !tbaa !1240
  %2012 = add i64 %1893, %2011
  %2013 = add i64 %2012, 32
  %2014 = inttoptr i64 %2013 to double*
  %2015 = load double, double* %2014
  %2016 = fmul double %2008, %2015
  store double %2016, double* %689, align 1, !tbaa !1264
  store i64 0, i64* %690, align 1, !tbaa !1264
  %2017 = fadd double %1999, %2016
  store double %2017, double* %687, align 1, !tbaa !1264
  store i64 0, i64* %688, align 1, !tbaa !1264
  %2018 = load double, double* %683, align 1
  %2019 = fmul double %2018, %2017
  store double %2019, double* %683, align 1, !tbaa !1264
  %2020 = load double, double* %171, align 1
  %2021 = fsub double %2020, %2019
  store double %2021, double* %171, align 1, !tbaa !1264
  %2022 = add i64 %737, %1852
  %2023 = inttoptr i64 %2022 to double*
  store double %2021, double* %2023
  %2024 = inttoptr i64 %729 to i32*
  %2025 = load i32, i32* %2024
  %2026 = add i32 %2025, 1
  %2027 = inttoptr i64 %729 to i32*
  store i32 %2026, i32* %2027
  br label %block_400c93

block_400c80:                                     ; preds = %block_401214, %block_400c7a
  %2028 = phi %struct.Memory* [ %705, %block_400c7a ], [ %989, %block_401214 ]
  %2029 = inttoptr i64 %727 to i32*
  %2030 = load i32, i32* %2029
  %2031 = inttoptr i64 %728 to i32*
  %2032 = load i32, i32* %2031
  %2033 = sub i32 %2030, %2032
  %2034 = lshr i32 %2033, 31
  %2035 = lshr i32 %2030, 31
  %2036 = lshr i32 %2032, 31
  %2037 = xor i32 %2036, %2035
  %2038 = xor i32 %2034, %2035
  %2039 = add nuw nsw i32 %2038, %2037
  %2040 = icmp eq i32 %2039, 2
  %2041 = icmp ne i32 %2034, 0
  %2042 = xor i1 %2041, %2040
  br i1 %2042, label %block_400c8c, label %block_401b4c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403b50_timer_clear(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403b50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = bitcast %union.VectorReg* %9 to i8*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %16 = bitcast %union.VectorReg* %9 to i32*
  store i32 0, i32* %16, align 1, !tbaa !1266
  %17 = getelementptr inbounds i8, i8* %14, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !1266
  %19 = bitcast i64* %15 to i32*
  store i32 0, i32* %19, align 1, !tbaa !1266
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 1, !tbaa !1266
  %22 = add i64 %11, -12
  %23 = load i32, i32* %5, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = inttoptr i64 %22 to i32*
  %26 = load i32, i32* %25
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %6, align 8, !tbaa !1240
  %28 = shl nsw i64 %27, 3
  %29 = add i64 %28, add (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 16)
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %12 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = inttoptr i64 %11 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %3, align 8, !tbaa !1240
  %37 = add i64 %11, 8
  store i64 %37, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_41a4a0_wtime_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_41a4a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -32
  store i64 0, i64* %6, align 8, !tbaa !1240
  %25 = add i64 %14, -16
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %28 = add i64 %1, 28
  %29 = add i64 %14, -48
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  store i64 %17, i64* %8, align 8, !alias.scope !1384, !noalias !1387
  %31 = tail call i64 @gettimeofday(i64 %24, i64 0), !noalias !1384
  %32 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_61c068__data_type* @seg_61c068__data to i64), i64 16) to i32*)
  %33 = lshr i32 %32, 31
  %34 = trunc i32 %33 to i8
  %35 = load i64, i64* %9, align 8
  %36 = add i64 %35, -28
  %37 = trunc i64 %31 to i32
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = icmp ne i8 %34, 0
  %40 = add i64 %35, -24
  br i1 %39, label %block_41a4cd, label %block_41a4da

block_41a4da:                                     ; preds = %block_41a4cd, %block_41a4a0
  %41 = phi %struct.Memory* [ %2, %block_41a4cd ], [ %2, %block_41a4a0 ]
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 4064) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %10 to double*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = inttoptr i64 %40 to i64*
  %46 = load i64, i64* %45
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_61c068__data_type* @seg_61c068__data to i64), i64 16) to i32*)
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %5, align 8, !tbaa !1240
  %49 = sub i64 %46, %48
  %50 = sitofp i64 %49 to double
  %51 = bitcast %union.VectorReg* %11 to double*
  %52 = add i64 %35, -16
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = sitofp i64 %54 to double
  %56 = bitcast %union.VectorReg* %12 to double*
  store double %55, double* %56, align 1, !tbaa !1264
  %57 = fmul double %55, %42
  store double %57, double* %43, align 1, !tbaa !1264
  store i64 0, i64* %44, align 1, !tbaa !1264
  %58 = fadd double %50, %57
  store double %58, double* %51, align 1, !tbaa !1264
  %59 = add i64 %35, -8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %4, align 8, !tbaa !1240
  %62 = inttoptr i64 %61 to double*
  store double %58, double* %62
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 32
  %65 = icmp ugt i64 %63, -33
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %18, align 1, !tbaa !1245
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #11
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %19, align 1, !tbaa !1259
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %20, align 1, !tbaa !1263
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %21, align 1, !tbaa !1260
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %22, align 1, !tbaa !1261
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %23, align 1, !tbaa !1262
  %86 = add i64 %63, 40
  %87 = inttoptr i64 %64 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %9, align 8, !tbaa !1240
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %3, align 8, !tbaa !1240
  %91 = add i64 %63, 48
  store i64 %91, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %41

block_41a4cd:                                     ; preds = %block_41a4a0
  %92 = inttoptr i64 %40 to i64*
  %93 = load i64, i64* %92
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* inttoptr (i64 add (i64 ptrtoint (%seg_61c068__data_type* @seg_61c068__data to i64), i64 16) to i32*)
  br label %block_41a4da
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_418750_setiv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_418750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = add i64 %15, -360
  store i64 %18, i64* %9, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -20
  %26 = add i64 %1, 18
  %27 = inttoptr i64 %25 to i32*
  store i32 1, i32* %27
  %28 = bitcast [32 x %union.VectorReg]* %11 to double*
  %29 = bitcast %union.VectorReg* %12 to i8*
  %30 = bitcast %union.VectorReg* %12 to double*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %32 = bitcast %union.VectorReg* %12 to i32*
  %33 = getelementptr inbounds i8, i8* %29, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %36 = bitcast %union.VectorReg* %13 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  br label %block_418762

block_418777:                                     ; preds = %block_418762
  %38 = sitofp i32 %403 to double
  %39 = sitofp i32 %406 to double
  store double %39, double* %30, align 1, !tbaa !1264
  %40 = fdiv double %38, %39
  store double %40, double* %28, align 1, !tbaa !1264
  %41 = add i64 %399, -40
  %42 = inttoptr i64 %41 to double*
  store double %40, double* %42
  %43 = add i64 %399, -8
  %44 = add i64 %420, 37
  %45 = inttoptr i64 %43 to i32*
  store i32 1, i32* %45
  br label %block_41879c

block_4187d6:                                     ; preds = %block_4189d3, %block_4187b1
  %46 = phi i64 [ %75, %block_4187b1 ], [ %348, %block_4189d3 ]
  %47 = phi i64 [ %78, %block_4187b1 ], [ %342, %block_4189d3 ]
  %48 = phi %struct.Memory* [ %79, %block_4187b1 ], [ %385, %block_4189d3 ]
  %49 = add i64 %47, -4
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50
  %52 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %53 = add i32 %52, -1
  %54 = lshr i32 %53, 31
  %55 = sub i32 %51, %53
  %56 = lshr i32 %55, 31
  %57 = trunc i32 %56 to i8
  %58 = lshr i32 %51, 31
  %59 = xor i32 %54, %58
  %60 = xor i32 %56, %58
  %61 = add nuw nsw i32 %60, %59
  %62 = icmp eq i32 %61, 2
  %63 = icmp ne i8 %57, 0
  %64 = xor i1 %63, %62
  %65 = select i1 %64, i64 21, i64 528
  %66 = add i64 %46, %65
  br i1 %64, label %block_4187eb, label %block_4189e6

block_4187b1:                                     ; preds = %block_41879c
  %67 = sitofp i32 %82 to double
  %68 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %69 = add i32 %68, -1
  %70 = sitofp i32 %69 to double
  store double %70, double* %30, align 1, !tbaa !1264
  %71 = fdiv double %67, %70
  store double %71, double* %28, align 1, !tbaa !1264
  %72 = add i64 %78, -32
  %73 = inttoptr i64 %72 to double*
  store double %71, double* %73
  %74 = add i64 %78, -4
  %75 = add i64 %97, 37
  %76 = inttoptr i64 %74 to i32*
  store i32 1, i32* %76
  br label %block_4187d6

block_41879c:                                     ; preds = %block_4189e6, %block_418777
  %77 = phi i64 [ %44, %block_418777 ], [ %383, %block_4189e6 ]
  %78 = phi i64 [ %399, %block_418777 ], [ %47, %block_4189e6 ]
  %79 = phi %struct.Memory* [ %400, %block_418777 ], [ %48, %block_4189e6 ]
  %80 = add i64 %78, -8
  %81 = inttoptr i64 %80 to i32*
  %82 = load i32, i32* %81
  %83 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %84 = add i32 %83, -1
  %85 = lshr i32 %84, 31
  %86 = sub i32 %82, %84
  %87 = lshr i32 %86, 31
  %88 = trunc i32 %87 to i8
  %89 = lshr i32 %82, 31
  %90 = xor i32 %85, %89
  %91 = xor i32 %87, %89
  %92 = add nuw nsw i32 %91, %90
  %93 = icmp eq i32 %92, 2
  %94 = icmp ne i8 %88, 0
  %95 = xor i1 %94, %93
  %96 = select i1 %95, i64 21, i64 605
  %97 = add i64 %77, %96
  br i1 %95, label %block_4187b1, label %block_4189f9

block_4188ad:                                     ; preds = %block_4188a3
  store i64 ptrtoint (%u_type* @u to i64), i64* %4, align 8, !tbaa !1240
  %98 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  %99 = bitcast double %98 to <2 x i32>
  %100 = extractelement <2 x i32> %99, i32 0
  store i32 %100, i32* %32, align 1, !tbaa !1292
  %101 = extractelement <2 x i32> %99, i32 1
  store i32 %101, i32* %34, align 1, !tbaa !1292
  %102 = load double, double* %30, align 1
  %103 = inttoptr i64 %321 to double*
  %104 = load double, double* %103
  %105 = fsub double %102, %104
  %106 = sext i32 %387 to i64
  %107 = shl nsw i64 %106, 3
  %108 = add i64 %322, %107
  %109 = inttoptr i64 %108 to double*
  %110 = load double, double* %109
  %111 = fmul double %105, %110
  %112 = add i64 %323, %107
  %113 = inttoptr i64 %112 to double*
  %114 = load double, double* %113
  %115 = fmul double %104, %114
  %116 = fadd double %111, %115
  %117 = inttoptr i64 %324 to double*
  store double %116, double* %117
  %118 = bitcast double %98 to <2 x i32>
  %119 = extractelement <2 x i32> %118, i32 0
  store i32 %119, i32* %32, align 1, !tbaa !1292
  %120 = extractelement <2 x i32> %118, i32 1
  store i32 %120, i32* %34, align 1, !tbaa !1292
  %121 = load double, double* %30, align 1
  %122 = inttoptr i64 %325 to double*
  %123 = load double, double* %122
  %124 = fsub double %121, %123
  %125 = inttoptr i64 %317 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = shl nsw i64 %127, 3
  %129 = add i64 %326, %128
  %130 = inttoptr i64 %129 to double*
  %131 = load double, double* %130
  %132 = fmul double %124, %131
  %133 = add i64 %327, %128
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = fmul double %123, %135
  store double %136, double* %36, align 1, !tbaa !1264
  store i64 0, i64* %37, align 1, !tbaa !1264
  %137 = fadd double %132, %136
  %138 = inttoptr i64 %328 to double*
  store double %137, double* %138
  %139 = inttoptr i64 %329 to double*
  %140 = load double, double* %139
  %141 = fsub double %98, %140
  %142 = inttoptr i64 %317 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 3
  %146 = add i64 %330, %145
  %147 = inttoptr i64 %146 to double*
  %148 = load double, double* %147
  %149 = fmul double %141, %148
  %150 = add i64 %331, %145
  %151 = inttoptr i64 %150 to double*
  %152 = load double, double* %151
  %153 = fmul double %140, %152
  %154 = fadd double %149, %153
  %155 = inttoptr i64 %332 to double*
  store double %154, double* %155
  %156 = inttoptr i64 %324 to double*
  %157 = load double, double* %156
  %158 = inttoptr i64 %328 to double*
  %159 = load double, double* %158
  %160 = fadd double %157, %159
  %161 = inttoptr i64 %332 to double*
  %162 = load double, double* %161
  %163 = fadd double %160, %162
  %164 = fmul double %157, %159
  %165 = fsub double %163, %164
  %166 = fmul double %159, %162
  %167 = fsub double %165, %166
  %168 = fmul double %162, %157
  %169 = fsub double %167, %168
  %170 = fmul double %164, %162
  store double %170, double* %30, align 1, !tbaa !1264
  store i64 0, i64* %35, align 1, !tbaa !1264
  %171 = fadd double %169, %170
  store double %171, double* %28, align 1, !tbaa !1264
  store i64 0, i64* %31, align 1, !tbaa !1264
  %172 = inttoptr i64 %333 to i32*
  %173 = load i32, i32* %172
  %174 = sext i32 %173 to i64
  %175 = mul nsw i64 %174, 6760
  %176 = load i64, i64* %4, align 8
  %177 = add i64 %175, %176
  %178 = inttoptr i64 %334 to i32*
  %179 = load i32, i32* %178
  %180 = sext i32 %179 to i64
  %181 = mul nsw i64 %180, 520
  %182 = add i64 %181, %177
  %183 = inttoptr i64 %335 to i32*
  %184 = load i32, i32* %183
  %185 = sext i32 %184 to i64
  %186 = mul nsw i64 %185, 40
  %187 = add i64 %186, %182
  %188 = inttoptr i64 %317 to i32*
  %189 = load i32, i32* %188
  %190 = sext i32 %189 to i64
  %191 = shl nsw i64 %190, 3
  %192 = add i64 %191, %187
  %193 = inttoptr i64 %192 to double*
  store double %171, double* %193
  %194 = inttoptr i64 %317 to i32*
  %195 = load i32, i32* %194
  %196 = add i32 %195, 1
  %197 = inttoptr i64 %317 to i32*
  store i32 %196, i32* %197
  %198 = add i64 %397, -10
  br label %block_4188a3

block_4187eb:                                     ; preds = %block_4187d6
  store i64 0, i64* %8, align 8, !tbaa !1240
  %199 = add i64 %47, -112
  store i64 %199, i64* %5, align 8, !tbaa !1240
  %200 = sitofp i32 %51 to double
  %201 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %202 = add i32 %201, -1
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %4, align 8, !tbaa !1240
  %204 = sitofp i32 %202 to double
  store double %204, double* %30, align 1, !tbaa !1264
  %205 = fdiv double %200, %204
  store double %205, double* %28, align 1, !tbaa !1264
  %206 = add i64 %47, -24
  %207 = inttoptr i64 %206 to double*
  store double %205, double* %207
  %208 = add i64 %47, -8
  %209 = inttoptr i64 %208 to i32*
  %210 = load i32, i32* %209
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %7, align 8, !tbaa !1240
  %212 = add i64 %47, -12
  %213 = inttoptr i64 %212 to i32*
  %214 = load i32, i32* %213
  %215 = zext i32 %214 to i64
  store i64 %215, i64* %6, align 8, !tbaa !1240
  %216 = add i64 %66, -65131
  %217 = add i64 %66, 47
  %218 = load i64, i64* %9, align 8, !tbaa !1240
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220
  store i64 %219, i64* %9, align 8, !tbaa !1240
  %221 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %216, %struct.Memory* %48)
  %222 = load i64, i64* %10, align 8
  %223 = add i64 %222, -160
  %224 = load i64, i64* %3, align 8
  store i64 %223, i64* %5, align 8, !tbaa !1240
  %225 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %226 = add i32 %225, -1
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %4, align 8, !tbaa !1240
  %228 = add i64 %222, -8
  %229 = inttoptr i64 %228 to i32*
  %230 = load i32, i32* %229
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %7, align 8, !tbaa !1240
  %232 = add i64 %222, -12
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = zext i32 %234 to i64
  store i64 %235, i64* %6, align 8, !tbaa !1240
  store i64 %227, i64* %8, align 8, !tbaa !1240
  %236 = add i64 %224, -65178
  %237 = add i64 %224, 30
  %238 = load i64, i64* %9, align 8, !tbaa !1240
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240
  store i64 %239, i64* %9, align 8, !tbaa !1240
  %241 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %236, %struct.Memory* %221)
  %242 = load i64, i64* %3, align 8
  store i64 0, i64* %7, align 8, !tbaa !1240
  %243 = load i64, i64* %10, align 8
  %244 = add i64 %243, -208
  store i64 %244, i64* %5, align 8, !tbaa !1240
  %245 = add i64 %243, -4
  %246 = inttoptr i64 %245 to i32*
  %247 = load i32, i32* %246
  %248 = zext i32 %247 to i64
  store i64 %248, i64* %8, align 8, !tbaa !1240
  %249 = add i64 %243, -12
  %250 = inttoptr i64 %249 to i32*
  %251 = load i32, i32* %250
  %252 = zext i32 %251 to i64
  store i64 %252, i64* %6, align 8, !tbaa !1240
  %253 = add i64 %242, -65208
  %254 = add i64 %242, 20
  %255 = load i64, i64* %9, align 8, !tbaa !1240
  %256 = add i64 %255, -8
  %257 = inttoptr i64 %256 to i64*
  store i64 %254, i64* %257
  store i64 %256, i64* %9, align 8, !tbaa !1240
  %258 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %253, %struct.Memory* %241)
  %259 = load i64, i64* %10, align 8
  %260 = add i64 %259, -256
  %261 = load i64, i64* %3, align 8
  store i64 %260, i64* %5, align 8, !tbaa !1240
  %262 = add i64 %259, -4
  %263 = inttoptr i64 %262 to i32*
  %264 = load i32, i32* %263
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %8, align 8, !tbaa !1240
  %266 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %267 = add i32 %266, -1
  %268 = zext i32 %267 to i64
  store i64 %268, i64* %4, align 8, !tbaa !1240
  %269 = add i64 %259, -12
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  %272 = zext i32 %271 to i64
  store i64 %272, i64* %6, align 8, !tbaa !1240
  store i64 %268, i64* %7, align 8, !tbaa !1240
  %273 = add i64 %261, -65228
  %274 = add i64 %261, 30
  %275 = load i64, i64* %9, align 8, !tbaa !1240
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %277
  store i64 %276, i64* %9, align 8, !tbaa !1240
  %278 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %273, %struct.Memory* %258)
  %279 = load i64, i64* %3, align 8
  store i64 0, i64* %6, align 8, !tbaa !1240
  %280 = load i64, i64* %10, align 8
  %281 = add i64 %280, -304
  store i64 %281, i64* %5, align 8, !tbaa !1240
  %282 = add i64 %280, -4
  %283 = inttoptr i64 %282 to i32*
  %284 = load i32, i32* %283
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %8, align 8, !tbaa !1240
  %286 = add i64 %280, -8
  %287 = inttoptr i64 %286 to i32*
  %288 = load i32, i32* %287
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %7, align 8, !tbaa !1240
  %290 = add i64 %279, -65258
  %291 = add i64 %279, 20
  %292 = load i64, i64* %9, align 8, !tbaa !1240
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294
  store i64 %293, i64* %9, align 8, !tbaa !1240
  %295 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %290, %struct.Memory* %278)
  %296 = load i64, i64* %10, align 8
  %297 = add i64 %296, -352
  %298 = load i64, i64* %3, align 8
  store i64 %297, i64* %5, align 8, !tbaa !1240
  %299 = add i64 %296, -4
  %300 = inttoptr i64 %299 to i32*
  %301 = load i32, i32* %300
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %8, align 8, !tbaa !1240
  %303 = add i64 %296, -8
  %304 = inttoptr i64 %303 to i32*
  %305 = load i32, i32* %304
  %306 = zext i32 %305 to i64
  store i64 %306, i64* %7, align 8, !tbaa !1240
  %307 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %308 = add i32 %307, -1
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %4, align 8, !tbaa !1240
  store i64 %309, i64* %6, align 8, !tbaa !1240
  %310 = add i64 %298, -65278
  %311 = add i64 %298, 30
  %312 = load i64, i64* %9, align 8, !tbaa !1240
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %311, i64* %314
  store i64 %313, i64* %9, align 8, !tbaa !1240
  %315 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %310, %struct.Memory* %295)
  %316 = load i64, i64* %10, align 8
  %317 = add i64 %316, -16
  %318 = load i64, i64* %3, align 8
  %319 = add i64 %318, 7
  %320 = inttoptr i64 %317 to i32*
  store i32 0, i32* %320
  %321 = add i64 %316, -24
  %322 = add i64 %316, -112
  %323 = add i64 %316, -160
  %324 = add i64 %316, -48
  %325 = add i64 %316, -32
  %326 = add i64 %316, -208
  %327 = add i64 %316, -256
  %328 = add i64 %316, -56
  %329 = add i64 %316, -40
  %330 = add i64 %316, -304
  %331 = add i64 %316, -352
  %332 = add i64 %316, -64
  %333 = add i64 %316, -12
  %334 = add i64 %316, -8
  %335 = add i64 %316, -4
  br label %block_4188a3

block_4189f9:                                     ; preds = %block_41879c
  %336 = add i64 %78, -12
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = add i32 %338, 1
  %340 = inttoptr i64 %336 to i32*
  store i32 %339, i32* %340
  %341 = add i64 %97, -663
  br label %block_418762

block_4189d3:                                     ; preds = %block_4188a3
  %342 = load i64, i64* %10, align 8
  %343 = add i64 %342, -4
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = add i32 %345, 1
  %347 = inttoptr i64 %343 to i32*
  store i32 %346, i32* %347
  %348 = add i64 %397, -509
  br label %block_4187d6

block_418a0c:                                     ; preds = %block_418762
  %349 = load i64, i64* %9, align 8
  %350 = add i64 %349, 352
  %351 = icmp ugt i64 %349, -353
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %19, align 1, !tbaa !1245
  %353 = trunc i64 %350 to i32
  %354 = and i32 %353, 255
  %355 = tail call i32 @llvm.ctpop.i32(i32 %354) #11
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  store i8 %358, i8* %20, align 1, !tbaa !1259
  %359 = xor i64 %350, %349
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %21, align 1, !tbaa !1263
  %363 = icmp eq i64 %350, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %22, align 1, !tbaa !1260
  %365 = lshr i64 %350, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %23, align 1, !tbaa !1261
  %367 = lshr i64 %349, 63
  %368 = xor i64 %365, %367
  %369 = add nuw nsw i64 %368, %365
  %370 = icmp eq i64 %369, 2
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %24, align 1, !tbaa !1262
  %372 = add i64 %349, 360
  %373 = inttoptr i64 %350 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %10, align 8, !tbaa !1240
  %375 = inttoptr i64 %372 to i64*
  %376 = load i64, i64* %375
  store i64 %376, i64* %3, align 8, !tbaa !1240
  %377 = add i64 %349, 368
  store i64 %377, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %400

block_4189e6:                                     ; preds = %block_4187d6
  %378 = add i64 %47, -8
  %379 = inttoptr i64 %378 to i32*
  %380 = load i32, i32* %379
  %381 = add i32 %380, 1
  %382 = inttoptr i64 %378 to i32*
  store i32 %381, i32* %382
  %383 = add i64 %66, -586
  br label %block_41879c

block_4188a3:                                     ; preds = %block_4187eb, %block_4188ad
  %384 = phi i64 [ %319, %block_4187eb ], [ %198, %block_4188ad ]
  %385 = phi %struct.Memory* [ %315, %block_4187eb ], [ %385, %block_4188ad ]
  %386 = inttoptr i64 %317 to i32*
  %387 = load i32, i32* %386
  %388 = add i32 %387, -5
  %389 = lshr i32 %388, 31
  %390 = lshr i32 %387, 31
  %391 = xor i32 %389, %390
  %392 = add nuw nsw i32 %391, %390
  %393 = icmp eq i32 %392, 2
  %394 = icmp ne i32 %389, 0
  %395 = xor i1 %394, %393
  %396 = select i1 %395, i64 10, i64 304
  %397 = add i64 %384, %396
  br i1 %395, label %block_4188ad, label %block_4189d3

block_418762:                                     ; preds = %block_4189f9, %block_418750
  %398 = phi i64 [ %26, %block_418750 ], [ %341, %block_4189f9 ]
  %399 = phi i64 [ %16, %block_418750 ], [ %78, %block_4189f9 ]
  %400 = phi %struct.Memory* [ %2, %block_418750 ], [ %79, %block_4189f9 ]
  %401 = add i64 %399, -12
  %402 = inttoptr i64 %401 to i32*
  %403 = load i32, i32* %402
  %404 = zext i32 %403 to i64
  store i64 %404, i64* %4, align 8, !tbaa !1240
  %405 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %406 = add i32 %405, -1
  %407 = zext i32 %406 to i64
  store i64 %407, i64* %5, align 8, !tbaa !1240
  %408 = lshr i32 %406, 31
  %409 = sub i32 %403, %406
  %410 = lshr i32 %409, 31
  %411 = trunc i32 %410 to i8
  %412 = lshr i32 %403, 31
  %413 = xor i32 %408, %412
  %414 = xor i32 %410, %412
  %415 = add nuw nsw i32 %414, %413
  %416 = icmp eq i32 %415, 2
  %417 = icmp ne i8 %411, 0
  %418 = xor i1 %417, %416
  %419 = select i1 %418, i64 21, i64 682
  %420 = add i64 %398, %419
  br i1 %418, label %block_418777, label %block_418a0c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403c10_timer_read(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403c10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -12
  %15 = load i32, i32* %5, align 4
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %6, align 8, !tbaa !1240
  %20 = shl nsw i64 %19, 3
  %21 = add i64 %20, add (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 16)
  %22 = inttoptr i64 %21 to double*
  %23 = load double, double* %22
  %24 = bitcast %union.VectorReg* %9 to double*
  store double %23, double* %24, align 1, !tbaa !1264
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast i64* %25 to double*
  store double 0.000000e+00, double* %26, align 1, !tbaa !1264
  %27 = inttoptr i64 %12 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %8, align 8, !tbaa !1240
  %29 = inttoptr i64 %11 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %3, align 8, !tbaa !1240
  %31 = add i64 %11, 8
  store i64 %31, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_417db0_setbv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_417db0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %10, align 8, !tbaa !1240
  %16 = add i64 %13, -136
  store i64 %16, i64* %9, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -16
  %24 = add i64 %1, 18
  %25 = inttoptr i64 %23 to i32*
  store i32 0, i32* %25
  %26 = bitcast %union.VectorReg* %11 to double*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast i64* %27 to double*
  br label %block_417dc2

block_4180f3:                                     ; preds = %block_41805c
  %29 = inttoptr i64 %346 to i32*
  %30 = load i32, i32* %29
  %31 = add i32 %30, 1
  %32 = inttoptr i64 %346 to i32*
  store i32 %31, i32* %32
  %33 = add i64 %211, -224
  br label %block_418013

block_417ff5:                                     ; preds = %block_417edb
  %34 = add i64 %442, 7
  %35 = inttoptr i64 %426 to i32*
  store i32 0, i32* %35
  br label %block_417ffc

block_417ef2:                                     ; preds = %block_417eeb, %block_417fcf
  %36 = phi i64 [ %397, %block_417eeb ], [ %242, %block_417fcf ]
  %37 = phi i64 [ %424, %block_417eeb ], [ %531, %block_417fcf ]
  %38 = phi %struct.Memory* [ %425, %block_417eeb ], [ %244, %block_417fcf ]
  %39 = add i64 %37, -4
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %4, align 8, !tbaa !1240
  %43 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %44 = sub i32 %41, %43
  %45 = lshr i32 %44, 31
  %46 = trunc i32 %45 to i8
  %47 = lshr i32 %41, 31
  %48 = lshr i32 %43, 31
  %49 = xor i32 %48, %47
  %50 = xor i32 %45, %47
  %51 = add nuw nsw i32 %50, %49
  %52 = icmp eq i32 %51, 2
  %53 = icmp ne i8 %46, 0
  %54 = xor i1 %53, %52
  %55 = select i1 %54, i64 16, i64 240
  %56 = add i64 %36, %55
  br i1 %54, label %block_417f02, label %block_417fe2

block_417de9:                                     ; preds = %block_417dd9
  store i64 0, i64* %6, align 8, !tbaa !1240
  %57 = add i64 %151, -64
  store i64 %57, i64* %5, align 8, !tbaa !1240
  store i64 %156, i64* %8, align 8, !tbaa !1240
  %58 = add i64 %151, -8
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59
  %61 = zext i32 %60 to i64
  store i64 %61, i64* %7, align 8, !tbaa !1240
  %62 = add i64 %170, -62569
  %63 = add i64 %170, 17
  %64 = load i64, i64* %9, align 8, !tbaa !1240
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %63, i64* %66
  store i64 %65, i64* %9, align 8, !tbaa !1240
  %67 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %62, %struct.Memory* %152)
  %68 = load i64, i64* %10, align 8
  %69 = add i64 %68, -112
  %70 = load i64, i64* %3, align 8
  store i64 %69, i64* %5, align 8, !tbaa !1240
  %71 = add i64 %68, -4
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72
  %74 = zext i32 %73 to i64
  store i64 %74, i64* %8, align 8, !tbaa !1240
  %75 = add i64 %68, -8
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %7, align 8, !tbaa !1240
  %79 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %80 = add i32 %79, -1
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %6, align 8, !tbaa !1240
  %82 = add i64 %70, -62586
  %83 = add i64 %70, 25
  %84 = load i64, i64* %9, align 8, !tbaa !1240
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86
  store i64 %85, i64* %9, align 8, !tbaa !1240
  %87 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %82, %struct.Memory* %67)
  %88 = load i64, i64* %10, align 8
  %89 = add i64 %88, -16
  %90 = load i64, i64* %3, align 8
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %89 to i32*
  store i32 0, i32* %92
  %93 = add i64 %88, -64
  %94 = add i64 %88, -8
  %95 = add i64 %88, -4
  %96 = add i64 %88, -112
  br label %block_417e1a

block_418066:                                     ; preds = %block_41805c
  %97 = sext i32 %201 to i64
  %98 = shl nsw i64 %97, 3
  %99 = add i64 %344, %98
  %100 = inttoptr i64 %99 to double*
  %101 = load double, double* %100
  %102 = inttoptr i64 %345 to i32*
  %103 = load i32, i32* %102
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, 6760
  %106 = add i64 %105, ptrtoint (%u_type* @u to i64)
  %107 = inttoptr i64 %346 to i32*
  %108 = load i32, i32* %107
  %109 = sext i32 %108 to i64
  %110 = mul nsw i64 %109, 520
  %111 = add i64 %110, %106
  store i64 %111, i64* %6, align 8, !tbaa !1240
  %112 = add i64 %98, %111
  %113 = inttoptr i64 %112 to double*
  store double %101, double* %113
  %114 = inttoptr i64 %340 to i32*
  %115 = load i32, i32* %114
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add i64 %347, %117
  %119 = inttoptr i64 %118 to double*
  %120 = load double, double* %119
  store double %120, double* %26, align 1, !tbaa !1264
  store double 0.000000e+00, double* %28, align 1, !tbaa !1264
  %121 = inttoptr i64 %345 to i32*
  %122 = load i32, i32* %121
  %123 = sext i32 %122 to i64
  %124 = mul nsw i64 %123, 6760
  %125 = add i64 %124, ptrtoint (%u_type* @u to i64)
  %126 = inttoptr i64 %346 to i32*
  %127 = load i32, i32* %126
  %128 = sext i32 %127 to i64
  %129 = mul nsw i64 %128, 520
  %130 = add i64 %129, %125
  %131 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %132 = add i32 %131, -1
  %133 = zext i32 %132 to i64
  store i64 %133, i64* %7, align 8, !tbaa !1240
  %134 = sext i32 %132 to i64
  %135 = mul nsw i64 %134, 40
  %136 = add i64 %135, %130
  store i64 %116, i64* %5, align 8, !tbaa !1240
  %137 = add i64 %117, %136
  %138 = inttoptr i64 %137 to double*
  store double %120, double* %138
  %139 = inttoptr i64 %340 to i32*
  %140 = load i32, i32* %139
  %141 = add i32 %140, 1
  %142 = inttoptr i64 %340 to i32*
  store i32 %141, i32* %142
  %143 = add i64 %211, -10
  br label %block_41805c

block_417fe2:                                     ; preds = %block_417ef2
  %144 = add i64 %37, -12
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145
  %147 = add i32 %146, 1
  %148 = inttoptr i64 %144 to i32*
  store i32 %147, i32* %148
  %149 = add i64 %56, -263
  br label %block_417edb

block_417dd9:                                     ; preds = %block_417eae, %block_417dd2
  %150 = phi i64 [ %196, %block_417dd2 ], [ %352, %block_417eae ]
  %151 = phi i64 [ %213, %block_417dd2 ], [ %88, %block_417eae ]
  %152 = phi %struct.Memory* [ %214, %block_417dd2 ], [ %354, %block_417eae ]
  %153 = add i64 %151, -4
  %154 = inttoptr i64 %153 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %4, align 8, !tbaa !1240
  %157 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %158 = sub i32 %155, %157
  %159 = lshr i32 %158, 31
  %160 = trunc i32 %159 to i8
  %161 = lshr i32 %155, 31
  %162 = lshr i32 %157, 31
  %163 = xor i32 %162, %161
  %164 = xor i32 %159, %161
  %165 = add nuw nsw i32 %164, %163
  %166 = icmp eq i32 %165, 2
  %167 = icmp ne i8 %160, 0
  %168 = xor i1 %167, %166
  %169 = select i1 %168, i64 16, i64 232
  %170 = add i64 %150, %169
  br i1 %168, label %block_417de9, label %block_417ec1

block_417ffc:                                     ; preds = %block_418106, %block_417ff5
  %171 = phi i64 [ %34, %block_417ff5 ], [ %448, %block_418106 ]
  %172 = phi i64 [ %424, %block_417ff5 ], [ %400, %block_418106 ]
  %173 = phi %struct.Memory* [ %425, %block_417ff5 ], [ %401, %block_418106 ]
  %174 = add i64 %172, -12
  %175 = inttoptr i64 %174 to i32*
  %176 = load i32, i32* %175
  %177 = zext i32 %176 to i64
  store i64 %177, i64* %4, align 8, !tbaa !1240
  %178 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %179 = sub i32 %176, %178
  %180 = lshr i32 %179, 31
  %181 = trunc i32 %180 to i8
  %182 = lshr i32 %176, 31
  %183 = lshr i32 %178, 31
  %184 = xor i32 %183, %182
  %185 = xor i32 %180, %182
  %186 = add nuw nsw i32 %185, %184
  %187 = icmp eq i32 %186, 2
  %188 = icmp ne i8 %181, 0
  %189 = xor i1 %188, %187
  %190 = select i1 %189, i64 16, i64 285
  %191 = add i64 %171, %190
  br i1 %189, label %block_41800c, label %block_418119

block_417ed4:                                     ; preds = %block_417dc2
  %192 = add i64 %213, -12
  %193 = add i64 %231, 7
  %194 = inttoptr i64 %192 to i32*
  store i32 0, i32* %194
  br label %block_417edb

block_417dd2:                                     ; preds = %block_417dc2
  %195 = add i64 %213, -4
  %196 = add i64 %231, 7
  %197 = inttoptr i64 %195 to i32*
  store i32 0, i32* %197
  br label %block_417dd9

block_41805c:                                     ; preds = %block_418023, %block_418066
  %198 = phi i64 [ %342, %block_418023 ], [ %143, %block_418066 ]
  %199 = phi %struct.Memory* [ %338, %block_418023 ], [ %199, %block_418066 ]
  %200 = inttoptr i64 %340 to i32*
  %201 = load i32, i32* %200
  %202 = add i32 %201, -5
  %203 = lshr i32 %202, 31
  %204 = lshr i32 %201, 31
  %205 = xor i32 %203, %204
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = icmp ne i32 %203, 0
  %209 = xor i1 %208, %207
  %210 = select i1 %209, i64 10, i64 151
  %211 = add i64 %198, %210
  br i1 %209, label %block_418066, label %block_4180f3

block_417dc2:                                     ; preds = %block_417ec1, %block_417db0
  %212 = phi i64 [ %24, %block_417db0 ], [ %237, %block_417ec1 ]
  %213 = phi i64 [ %14, %block_417db0 ], [ %151, %block_417ec1 ]
  %214 = phi %struct.Memory* [ %2, %block_417db0 ], [ %152, %block_417ec1 ]
  %215 = add i64 %213, -8
  %216 = inttoptr i64 %215 to i32*
  %217 = load i32, i32* %216
  %218 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %219 = sub i32 %217, %218
  %220 = lshr i32 %219, 31
  %221 = trunc i32 %220 to i8
  %222 = lshr i32 %217, 31
  %223 = lshr i32 %218, 31
  %224 = xor i32 %223, %222
  %225 = xor i32 %220, %222
  %226 = add nuw nsw i32 %225, %224
  %227 = icmp eq i32 %226, 2
  %228 = icmp ne i8 %221, 0
  %229 = xor i1 %228, %227
  %230 = select i1 %229, i64 16, i64 274
  %231 = add i64 %212, %230
  br i1 %229, label %block_417dd2, label %block_417ed4

block_417ec1:                                     ; preds = %block_417dd9
  %232 = add i64 %151, -8
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = add i32 %234, 1
  %236 = inttoptr i64 %232 to i32*
  store i32 %235, i32* %236
  %237 = add i64 %170, -255
  br label %block_417dc2

block_417fcf:                                     ; preds = %block_417f3b
  %238 = inttoptr i64 %538 to i32*
  %239 = load i32, i32* %238
  %240 = add i32 %239, 1
  %241 = inttoptr i64 %538 to i32*
  store i32 %240, i32* %241
  %242 = add i64 %256, -221
  br label %block_417ef2

block_417f3b:                                     ; preds = %block_417f02, %block_417f45
  %243 = phi i64 [ %534, %block_417f02 ], [ %303, %block_417f45 ]
  %244 = phi %struct.Memory* [ %530, %block_417f02 ], [ %244, %block_417f45 ]
  %245 = inttoptr i64 %532 to i32*
  %246 = load i32, i32* %245
  %247 = add i32 %246, -5
  %248 = lshr i32 %247, 31
  %249 = lshr i32 %246, 31
  %250 = xor i32 %248, %249
  %251 = add nuw nsw i32 %250, %249
  %252 = icmp eq i32 %251, 2
  %253 = icmp ne i32 %248, 0
  %254 = xor i1 %253, %252
  %255 = select i1 %254, i64 10, i64 148
  %256 = add i64 %243, %255
  br i1 %254, label %block_417f45, label %block_417fcf

block_417f45:                                     ; preds = %block_417f3b
  %257 = sext i32 %246 to i64
  %258 = shl nsw i64 %257, 3
  %259 = add i64 %536, %258
  %260 = inttoptr i64 %259 to double*
  %261 = load double, double* %260
  %262 = inttoptr i64 %537 to i32*
  %263 = load i32, i32* %262
  %264 = sext i32 %263 to i64
  %265 = mul nsw i64 %264, 6760
  %266 = add i64 %265, ptrtoint (%u_type* @u to i64)
  %267 = inttoptr i64 %538 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  %270 = mul nsw i64 %269, 40
  %271 = add i64 %270, %266
  store i64 %271, i64* %6, align 8, !tbaa !1240
  %272 = add i64 %258, %271
  %273 = inttoptr i64 %272 to double*
  store double %261, double* %273
  %274 = inttoptr i64 %532 to i32*
  %275 = load i32, i32* %274
  %276 = sext i32 %275 to i64
  %277 = shl nsw i64 %276, 3
  %278 = add i64 %539, %277
  %279 = inttoptr i64 %278 to double*
  %280 = load double, double* %279
  store double %280, double* %26, align 1, !tbaa !1264
  store double 0.000000e+00, double* %28, align 1, !tbaa !1264
  %281 = inttoptr i64 %537 to i32*
  %282 = load i32, i32* %281
  %283 = sext i32 %282 to i64
  %284 = mul nsw i64 %283, 6760
  %285 = add i64 %284, ptrtoint (%u_type* @u to i64)
  %286 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %287 = add i32 %286, -1
  %288 = zext i32 %287 to i64
  store i64 %288, i64* %7, align 8, !tbaa !1240
  %289 = sext i32 %287 to i64
  %290 = mul nsw i64 %289, 520
  %291 = add i64 %290, %285
  %292 = inttoptr i64 %538 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  %295 = mul nsw i64 %294, 40
  %296 = add i64 %295, %291
  store i64 %276, i64* %5, align 8, !tbaa !1240
  %297 = add i64 %277, %296
  %298 = inttoptr i64 %297 to double*
  store double %280, double* %298
  %299 = inttoptr i64 %532 to i32*
  %300 = load i32, i32* %299
  %301 = add i32 %300, 1
  %302 = inttoptr i64 %532 to i32*
  store i32 %301, i32* %302
  %303 = add i64 %256, -10
  br label %block_417f3b

block_418023:                                     ; preds = %block_418013
  store i64 0, i64* %8, align 8, !tbaa !1240
  %304 = add i64 %400, -64
  store i64 %304, i64* %5, align 8, !tbaa !1240
  store i64 %405, i64* %7, align 8, !tbaa !1240
  %305 = add i64 %400, -12
  %306 = inttoptr i64 %305 to i32*
  %307 = load i32, i32* %306
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %6, align 8, !tbaa !1240
  %309 = add i64 %419, -63139
  %310 = add i64 %419, 17
  %311 = load i64, i64* %9, align 8, !tbaa !1240
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313
  store i64 %312, i64* %9, align 8, !tbaa !1240
  %314 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %309, %struct.Memory* %401)
  %315 = load i64, i64* %10, align 8
  %316 = add i64 %315, -112
  %317 = load i64, i64* %3, align 8
  store i64 %316, i64* %5, align 8, !tbaa !1240
  %318 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %319 = add i32 %318, -1
  %320 = zext i32 %319 to i64
  %321 = add i64 %315, -8
  %322 = inttoptr i64 %321 to i32*
  %323 = load i32, i32* %322
  %324 = zext i32 %323 to i64
  store i64 %324, i64* %7, align 8, !tbaa !1240
  %325 = add i64 %315, -12
  %326 = inttoptr i64 %325 to i32*
  %327 = load i32, i32* %326
  %328 = add i64 %315, -120
  %329 = inttoptr i64 %328 to i32*
  store i32 %327, i32* %329
  store i64 %320, i64* %8, align 8, !tbaa !1240
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %6, align 8, !tbaa !1240
  %333 = add i64 %317, -63156
  %334 = add i64 %317, 33
  %335 = load i64, i64* %9, align 8, !tbaa !1240
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %334, i64* %337
  store i64 %336, i64* %9, align 8, !tbaa !1240
  %338 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %333, %struct.Memory* %314)
  %339 = load i64, i64* %10, align 8
  %340 = add i64 %339, -16
  %341 = load i64, i64* %3, align 8
  %342 = add i64 %341, 7
  %343 = inttoptr i64 %340 to i32*
  store i32 0, i32* %343
  %344 = add i64 %339, -64
  %345 = add i64 %339, -12
  %346 = add i64 %339, -8
  %347 = add i64 %339, -112
  br label %block_41805c

block_417eae:                                     ; preds = %block_417e1a
  %348 = inttoptr i64 %95 to i32*
  %349 = load i32, i32* %348
  %350 = add i32 %349, 1
  %351 = inttoptr i64 %95 to i32*
  store i32 %350, i32* %351
  %352 = add i64 %366, -213
  br label %block_417dd9

block_417e1a:                                     ; preds = %block_417e24, %block_417de9
  %353 = phi i64 [ %91, %block_417de9 ], [ %495, %block_417e24 ]
  %354 = phi %struct.Memory* [ %87, %block_417de9 ], [ %354, %block_417e24 ]
  %355 = inttoptr i64 %89 to i32*
  %356 = load i32, i32* %355
  %357 = add i32 %356, -5
  %358 = lshr i32 %357, 31
  %359 = lshr i32 %356, 31
  %360 = xor i32 %358, %359
  %361 = add nuw nsw i32 %360, %359
  %362 = icmp eq i32 %361, 2
  %363 = icmp ne i32 %358, 0
  %364 = xor i1 %363, %362
  %365 = select i1 %364, i64 10, i64 148
  %366 = add i64 %353, %365
  br i1 %364, label %block_417e24, label %block_417eae

block_418119:                                     ; preds = %block_417ffc
  %367 = load i64, i64* %9, align 8
  %368 = add i64 %367, 128
  %369 = icmp ugt i64 %367, -129
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %17, align 1, !tbaa !1245
  %371 = trunc i64 %368 to i32
  %372 = and i32 %371, 255
  %373 = tail call i32 @llvm.ctpop.i32(i32 %372) #11
  %374 = trunc i32 %373 to i8
  %375 = and i8 %374, 1
  %376 = xor i8 %375, 1
  store i8 %376, i8* %18, align 1, !tbaa !1259
  %377 = xor i64 %368, %367
  %378 = lshr i64 %377, 4
  %379 = trunc i64 %378 to i8
  %380 = and i8 %379, 1
  store i8 %380, i8* %19, align 1, !tbaa !1263
  %381 = icmp eq i64 %368, 0
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %20, align 1, !tbaa !1260
  %383 = lshr i64 %368, 63
  %384 = trunc i64 %383 to i8
  store i8 %384, i8* %21, align 1, !tbaa !1261
  %385 = lshr i64 %367, 63
  %386 = xor i64 %383, %385
  %387 = add nuw nsw i64 %386, %383
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %22, align 1, !tbaa !1262
  %390 = add i64 %367, 136
  %391 = inttoptr i64 %368 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %10, align 8, !tbaa !1240
  %393 = inttoptr i64 %390 to i64*
  %394 = load i64, i64* %393
  store i64 %394, i64* %3, align 8, !tbaa !1240
  %395 = add i64 %367, 144
  store i64 %395, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %173

block_417eeb:                                     ; preds = %block_417edb
  %396 = add i64 %424, -4
  %397 = add i64 %442, 7
  %398 = inttoptr i64 %396 to i32*
  store i32 0, i32* %398
  br label %block_417ef2

block_418013:                                     ; preds = %block_41800c, %block_4180f3
  %399 = phi i64 [ %421, %block_41800c ], [ %33, %block_4180f3 ]
  %400 = phi i64 [ %172, %block_41800c ], [ %339, %block_4180f3 ]
  %401 = phi %struct.Memory* [ %173, %block_41800c ], [ %199, %block_4180f3 ]
  %402 = add i64 %400, -8
  %403 = inttoptr i64 %402 to i32*
  %404 = load i32, i32* %403
  %405 = zext i32 %404 to i64
  store i64 %405, i64* %4, align 8, !tbaa !1240
  %406 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %407 = sub i32 %404, %406
  %408 = lshr i32 %407, 31
  %409 = trunc i32 %408 to i8
  %410 = lshr i32 %404, 31
  %411 = lshr i32 %406, 31
  %412 = xor i32 %411, %410
  %413 = xor i32 %408, %410
  %414 = add nuw nsw i32 %413, %412
  %415 = icmp eq i32 %414, 2
  %416 = icmp ne i8 %409, 0
  %417 = xor i1 %416, %415
  %418 = select i1 %417, i64 16, i64 243
  %419 = add i64 %399, %418
  br i1 %417, label %block_418023, label %block_418106

block_41800c:                                     ; preds = %block_417ffc
  %420 = add i64 %172, -8
  %421 = add i64 %191, 7
  %422 = inttoptr i64 %420 to i32*
  store i32 0, i32* %422
  br label %block_418013

block_417edb:                                     ; preds = %block_417ed4, %block_417fe2
  %423 = phi i64 [ %193, %block_417ed4 ], [ %149, %block_417fe2 ]
  %424 = phi i64 [ %213, %block_417ed4 ], [ %37, %block_417fe2 ]
  %425 = phi %struct.Memory* [ %214, %block_417ed4 ], [ %38, %block_417fe2 ]
  %426 = add i64 %424, -12
  %427 = inttoptr i64 %426 to i32*
  %428 = load i32, i32* %427
  %429 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %430 = sub i32 %428, %429
  %431 = lshr i32 %430, 31
  %432 = trunc i32 %431 to i8
  %433 = lshr i32 %428, 31
  %434 = lshr i32 %429, 31
  %435 = xor i32 %434, %433
  %436 = xor i32 %431, %433
  %437 = add nuw nsw i32 %436, %435
  %438 = icmp eq i32 %437, 2
  %439 = icmp ne i8 %432, 0
  %440 = xor i1 %439, %438
  %441 = select i1 %440, i64 16, i64 282
  %442 = add i64 %423, %441
  br i1 %440, label %block_417eeb, label %block_417ff5

block_418106:                                     ; preds = %block_418013
  %443 = add i64 %400, -12
  %444 = inttoptr i64 %443 to i32*
  %445 = load i32, i32* %444
  %446 = add i32 %445, 1
  %447 = inttoptr i64 %443 to i32*
  store i32 %446, i32* %447
  %448 = add i64 %419, -266
  br label %block_417ffc

block_417e24:                                     ; preds = %block_417e1a
  %449 = sext i32 %356 to i64
  %450 = shl nsw i64 %449, 3
  %451 = add i64 %93, %450
  %452 = inttoptr i64 %451 to double*
  %453 = load double, double* %452
  %454 = inttoptr i64 %94 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  %457 = mul nsw i64 %456, 520
  %458 = add i64 %457, ptrtoint (%u_type* @u to i64)
  %459 = inttoptr i64 %95 to i32*
  %460 = load i32, i32* %459
  %461 = sext i32 %460 to i64
  %462 = mul nsw i64 %461, 40
  %463 = add i64 %462, %458
  store i64 %463, i64* %6, align 8, !tbaa !1240
  %464 = add i64 %450, %463
  %465 = inttoptr i64 %464 to double*
  store double %453, double* %465
  %466 = inttoptr i64 %89 to i32*
  %467 = load i32, i32* %466
  %468 = sext i32 %467 to i64
  %469 = shl nsw i64 %468, 3
  %470 = add i64 %96, %469
  %471 = inttoptr i64 %470 to double*
  %472 = load double, double* %471
  store double %472, double* %26, align 1, !tbaa !1264
  store double 0.000000e+00, double* %28, align 1, !tbaa !1264
  %473 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %474 = add i32 %473, -1
  %475 = zext i32 %474 to i64
  store i64 %475, i64* %7, align 8, !tbaa !1240
  %476 = sext i32 %474 to i64
  %477 = mul nsw i64 %476, 6760
  %478 = add i64 %477, ptrtoint (%u_type* @u to i64)
  %479 = inttoptr i64 %94 to i32*
  %480 = load i32, i32* %479
  %481 = sext i32 %480 to i64
  %482 = mul nsw i64 %481, 520
  %483 = add i64 %482, %478
  %484 = inttoptr i64 %95 to i32*
  %485 = load i32, i32* %484
  %486 = sext i32 %485 to i64
  %487 = mul nsw i64 %486, 40
  %488 = add i64 %487, %483
  store i64 %468, i64* %5, align 8, !tbaa !1240
  %489 = add i64 %469, %488
  %490 = inttoptr i64 %489 to double*
  store double %472, double* %490
  %491 = inttoptr i64 %89 to i32*
  %492 = load i32, i32* %491
  %493 = add i32 %492, 1
  %494 = inttoptr i64 %89 to i32*
  store i32 %493, i32* %494
  %495 = add i64 %366, -10
  br label %block_417e1a

block_417f02:                                     ; preds = %block_417ef2
  store i64 0, i64* %7, align 8, !tbaa !1240
  %496 = add i64 %37, -64
  store i64 %496, i64* %5, align 8, !tbaa !1240
  store i64 %42, i64* %8, align 8, !tbaa !1240
  %497 = add i64 %37, -12
  %498 = inttoptr i64 %497 to i32*
  %499 = load i32, i32* %498
  %500 = zext i32 %499 to i64
  store i64 %500, i64* %6, align 8, !tbaa !1240
  %501 = add i64 %56, -62850
  %502 = add i64 %56, 17
  %503 = load i64, i64* %9, align 8, !tbaa !1240
  %504 = add i64 %503, -8
  %505 = inttoptr i64 %504 to i64*
  store i64 %502, i64* %505
  store i64 %504, i64* %9, align 8, !tbaa !1240
  %506 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %501, %struct.Memory* %38)
  %507 = load i64, i64* %10, align 8
  %508 = add i64 %507, -112
  %509 = load i64, i64* %3, align 8
  store i64 %508, i64* %5, align 8, !tbaa !1240
  %510 = add i64 %507, -4
  %511 = inttoptr i64 %510 to i32*
  %512 = load i32, i32* %511
  %513 = zext i32 %512 to i64
  store i64 %513, i64* %8, align 8, !tbaa !1240
  %514 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %515 = add i32 %514, -1
  %516 = zext i32 %515 to i64
  %517 = add i64 %507, -12
  %518 = inttoptr i64 %517 to i32*
  %519 = load i32, i32* %518
  %520 = add i64 %507, -116
  %521 = inttoptr i64 %520 to i32*
  store i32 %519, i32* %521
  store i64 %516, i64* %7, align 8, !tbaa !1240
  %522 = inttoptr i64 %520 to i32*
  %523 = load i32, i32* %522
  %524 = zext i32 %523 to i64
  store i64 %524, i64* %6, align 8, !tbaa !1240
  %525 = add i64 %509, -62867
  %526 = add i64 %509, 33
  %527 = load i64, i64* %9, align 8, !tbaa !1240
  %528 = add i64 %527, -8
  %529 = inttoptr i64 %528 to i64*
  store i64 %526, i64* %529
  store i64 %528, i64* %9, align 8, !tbaa !1240
  %530 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %525, %struct.Memory* %506)
  %531 = load i64, i64* %10, align 8
  %532 = add i64 %531, -16
  %533 = load i64, i64* %3, align 8
  %534 = add i64 %533, 7
  %535 = inttoptr i64 %532 to i32*
  store i32 0, i32* %535
  %536 = add i64 %531, -64
  %537 = add i64 %531, -12
  %538 = add i64 %531, -4
  %539 = add i64 %531, -112
  br label %block_417f3b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41a590___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_41a590:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408b90_jacld(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_408b90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12
  %32 = load i64, i64* %13, align 8
  %33 = load i64, i64* %12, align 8, !tbaa !1240
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35
  store i64 %34, i64* %13, align 8, !tbaa !1240
  %36 = load i64, i64* %18, align 8
  %37 = add i64 %33, -16
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %7, align 8
  %40 = add i64 %33, -24
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  store i64 %40, i64* %12, align 8, !tbaa !1240
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %19 to double*
  store double %42, double* %43, align 1, !tbaa !1264
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = bitcast i64* %44 to double*
  store double 0.000000e+00, double* %45, align 1, !tbaa !1264
  %46 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1312) to double*)
  %47 = bitcast %union.VectorReg* %20 to double*
  store double %46, double* %47, align 1, !tbaa !1264
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast i64* %48 to double*
  store double 0.000000e+00, double* %49, align 1, !tbaa !1264
  %50 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  %51 = bitcast %union.VectorReg* %21 to double*
  store double %50, double* %51, align 1, !tbaa !1264
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %53 = bitcast i64* %52 to double*
  store double 0.000000e+00, double* %53, align 1, !tbaa !1264
  %54 = add i64 %33, -28
  %55 = load i32, i32* %5, align 4
  %56 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %56
  %57 = add i64 %33, -48
  %58 = inttoptr i64 %57 to double*
  store double %50, double* %58
  %59 = add i64 %33, -56
  %60 = inttoptr i64 %59 to double*
  store double %46, double* %60
  %61 = add i64 %33, -64
  %62 = inttoptr i64 %61 to double*
  store double %42, double* %62
  %63 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %64 = zext i32 %63 to i64
  store i64 %64, i64* %11, align 8, !tbaa !1240
  %65 = add i64 %33, -36
  %66 = inttoptr i64 %65 to i32*
  store i32 %63, i32* %66
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %70 = add i64 %33, -32
  %71 = bitcast %union.VectorReg* %22 to double*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %73 = bitcast i64* %72 to double*
  %74 = bitcast %union.VectorReg* %23 to i8*
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %76 = bitcast %union.VectorReg* %23 to i32*
  %77 = getelementptr inbounds i8, i8* %74, i64 4
  %78 = bitcast i8* %77 to i32*
  %79 = bitcast i64* %75 to i32*
  %80 = getelementptr inbounds i8, i8* %74, i64 12
  %81 = bitcast i8* %80 to i32*
  %82 = bitcast %union.VectorReg* %24 to i8*
  %83 = bitcast %union.VectorReg* %24 to double*
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  %86 = bitcast %union.VectorReg* %25 to double*
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %88 = bitcast i64* %87 to double*
  %89 = bitcast %union.VectorReg* %26 to i8*
  %90 = bitcast %union.VectorReg* %26 to double*
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %92 = bitcast i64* %91 to double*
  %93 = bitcast %union.VectorReg* %27 to i8*
  %94 = bitcast %union.VectorReg* %27 to double*
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %96 = add i64 %33, -72
  %97 = add i64 %33, -80
  %98 = add i64 %33, -88
  %99 = bitcast %union.VectorReg* %25 to <2 x i32>*
  %100 = bitcast %union.VectorReg* %27 to i32*
  %101 = getelementptr inbounds i8, i8* %93, i64 4
  %102 = bitcast i8* %101 to i32*
  %103 = bitcast i64* %95 to i32*
  %104 = getelementptr inbounds i8, i8* %93, i64 12
  %105 = bitcast i8* %104 to i32*
  %106 = bitcast %union.VectorReg* %28 to i8*
  %107 = bitcast %union.VectorReg* %28 to double*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %109 = bitcast %union.VectorReg* %29 to double*
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %111 = bitcast %union.VectorReg* %26 to <2 x i32>*
  %112 = bitcast %union.VectorReg* %28 to i32*
  %113 = getelementptr inbounds i8, i8* %106, i64 4
  %114 = bitcast i8* %113 to i32*
  %115 = bitcast i64* %108 to i32*
  %116 = getelementptr inbounds i8, i8* %106, i64 12
  %117 = bitcast i8* %116 to i32*
  %118 = load i64, i64* %13, align 8
  %119 = add i64 %118, -28
  %120 = add i64 %118, -24
  %121 = bitcast %union.VectorReg* %23 to double*
  %122 = add i64 %118, -40
  %123 = add i64 %118, -56
  %124 = add i64 %118, -72
  %125 = add i64 %118, -20
  %126 = add i64 %118, -64
  %127 = bitcast %union.VectorReg* %30 to double*
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %129 = add i64 %118, -48
  %130 = bitcast %union.VectorReg* %31 to double*
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12, i32 0, i32 0, i32 0, i64 1
  %132 = add i64 %118, -80
  %133 = bitcast %union.VectorReg* %21 to <2 x i32>*
  %134 = bitcast i64* %52 to <2 x i32>*
  %135 = bitcast %union.VectorReg* %20 to <2 x i32>*
  %136 = bitcast %union.VectorReg* %22 to <2 x i32>*
  %137 = bitcast %union.VectorReg* %26 to i32*
  %138 = getelementptr inbounds i8, i8* %89, i64 4
  %139 = bitcast i8* %138 to i32*
  %140 = bitcast [32 x %union.VectorReg]* %19 to <2 x i32>*
  %141 = bitcast i64* %44 to <2 x i32>*
  %142 = bitcast %union.VectorReg* %24 to <2 x i32>*
  %143 = bitcast %union.VectorReg* %24 to i32*
  %144 = getelementptr inbounds i8, i8* %82, i64 4
  %145 = bitcast i8* %144 to i32*
  %146 = bitcast i64* %84 to i32*
  %147 = getelementptr inbounds i8, i8* %82, i64 12
  %148 = bitcast i8* %147 to i32*
  br label %block_408bcb

block_408bf5:                                     ; preds = %block_408be5
  %149 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %149, double* %43, align 1, !tbaa !1264
  store double 0.000000e+00, double* %45, align 1, !tbaa !1264
  store i64 ptrtoint (%u_type* @u to i64), i64* %8, align 8, !tbaa !1240
  store i64 -9223372036854775808, i64* %9, align 8, !tbaa !1240
  %150 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1320) to double*)
  store double %150, double* %47, align 1, !tbaa !1264
  store double 0.000000e+00, double* %49, align 1, !tbaa !1264
  %151 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %151, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %53, align 1, !tbaa !1264
  store i64 ptrtoint (%qs_type* @qs to i64), i64* %10, align 8, !tbaa !1240
  %152 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1328) to double*)
  store double %152, double* %71, align 1, !tbaa !1264
  store double 0.000000e+00, double* %73, align 1, !tbaa !1264
  store i32 0, i32* %76, align 1, !tbaa !1266
  store i32 0, i32* %78, align 1, !tbaa !1266
  store i32 0, i32* %79, align 1, !tbaa !1266
  store i32 0, i32* %81, align 1, !tbaa !1266
  %153 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1336) to double*)
  store double %153, double* %83, align 1, !tbaa !1264
  store double 0.000000e+00, double* %85, align 1, !tbaa !1264
  store i64 ptrtoint (%rho_i_type* @rho_i to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%b_type* @b to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%a_type* @a to i64), i64* %15, align 8, !tbaa !1240
  store i64 ptrtoint (%d_type* @d to i64), i64* %16, align 8, !tbaa !1240
  %154 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %154, double* %86, align 1, !tbaa !1264
  store double 0.000000e+00, double* %88, align 1, !tbaa !1264
  %155 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %155, double* %90, align 1, !tbaa !1264
  store double 0.000000e+00, double* %92, align 1, !tbaa !1264
  %156 = inttoptr i64 %54 to i32*
  %157 = load i32, i32* %156
  %158 = sext i32 %157 to i64
  %159 = mul nsw i64 %158, 1352
  %160 = add i64 %159, ptrtoint (%rho_i_type* @rho_i to i64)
  %161 = inttoptr i64 %65 to i32*
  %162 = load i32, i32* %161
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %163, 104
  %165 = add i64 %164, %160
  %166 = sext i32 %4217 to i64
  %167 = shl nsw i64 %166, 3
  %168 = add i64 %167, %165
  %169 = inttoptr i64 %168 to double*
  %170 = load double, double* %169
  %171 = inttoptr i64 %96 to double*
  store double %170, double* %171
  %172 = inttoptr i64 %96 to double*
  %173 = load double, double* %172
  %174 = fmul double %173, %173
  %175 = inttoptr i64 %97 to double*
  store double %174, double* %175
  %176 = inttoptr i64 %96 to double*
  %177 = load double, double* %176
  %178 = inttoptr i64 %97 to double*
  %179 = load double, double* %178
  %180 = fmul double %177, %179
  %181 = inttoptr i64 %98 to double*
  store double %180, double* %181
  %182 = bitcast double %154 to <2 x i32>
  %183 = extractelement <2 x i32> %182, i32 0
  store i32 %183, i32* %100, align 1, !tbaa !1292
  %184 = extractelement <2 x i32> %182, i32 1
  store i32 %184, i32* %102, align 1, !tbaa !1292
  %185 = load double, double* %94, align 1
  %186 = load double, double* bitcast (%dt_type* @dt to double*)
  %187 = fmul double %185, %186
  %188 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %189 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  %190 = fmul double %188, %189
  %191 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %192 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %193 = fmul double %191, %192
  %194 = fadd double %193, %190
  %195 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %196 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %197 = fmul double %195, %196
  store double %197, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %198 = fadd double %197, %194
  %199 = fmul double %198, %187
  %200 = bitcast double %155 to <2 x i32>
  %201 = extractelement <2 x i32> %200, i32 0
  store i32 %201, i32* %112, align 1, !tbaa !1292
  %202 = extractelement <2 x i32> %200, i32 1
  store i32 %202, i32* %114, align 1, !tbaa !1292
  %203 = load double, double* %107, align 1
  %204 = fadd double %203, %199
  %205 = inttoptr i64 %119 to i32*
  %206 = load i32, i32* %205
  %207 = sext i32 %206 to i64
  %208 = mul nsw i64 %207, 2600
  %209 = load i64, i64* %16, align 8
  %210 = add i64 %208, %209
  %211 = inttoptr i64 %120 to i32*
  %212 = load i32, i32* %211
  %213 = sext i32 %212 to i64
  %214 = mul nsw i64 %213, 200
  %215 = add i64 %214, %210
  %216 = inttoptr i64 %215 to double*
  store double %204, double* %216
  %217 = inttoptr i64 %119 to i32*
  %218 = load i32, i32* %217
  %219 = sext i32 %218 to i64
  %220 = mul nsw i64 %219, 2600
  %221 = add i64 %220, %209
  %222 = inttoptr i64 %120 to i32*
  %223 = load i32, i32* %222
  %224 = sext i32 %223 to i64
  %225 = mul nsw i64 %224, 200
  %226 = add i64 %225, %221
  %227 = add i64 %226, 40
  %228 = load double, double* %121, align 1
  %229 = inttoptr i64 %227 to double*
  store double %228, double* %229
  %230 = inttoptr i64 %119 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  %233 = mul nsw i64 %232, 2600
  %234 = add i64 %233, %209
  %235 = inttoptr i64 %120 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  %238 = mul nsw i64 %237, 200
  %239 = add i64 %238, %234
  %240 = add i64 %239, 80
  %241 = inttoptr i64 %240 to double*
  store double %228, double* %241
  %242 = inttoptr i64 %119 to i32*
  %243 = load i32, i32* %242
  %244 = sext i32 %243 to i64
  %245 = mul nsw i64 %244, 2600
  %246 = add i64 %245, %209
  %247 = inttoptr i64 %120 to i32*
  %248 = load i32, i32* %247
  %249 = sext i32 %248 to i64
  %250 = mul nsw i64 %249, 200
  %251 = add i64 %250, %246
  %252 = add i64 %251, 120
  %253 = inttoptr i64 %252 to double*
  store double %228, double* %253
  %254 = inttoptr i64 %119 to i32*
  %255 = load i32, i32* %254
  %256 = sext i32 %255 to i64
  %257 = mul nsw i64 %256, 2600
  %258 = add i64 %257, %209
  %259 = inttoptr i64 %120 to i32*
  %260 = load i32, i32* %259
  %261 = sext i32 %260 to i64
  %262 = mul nsw i64 %261, 200
  %263 = add i64 %262, %258
  %264 = add i64 %263, 160
  %265 = inttoptr i64 %264 to double*
  store double %228, double* %265
  %266 = load double, double* bitcast (%dt_type* @dt to double*)
  %267 = bitcast double %266 to i64
  %268 = load i64, i64* %9, align 8
  %269 = xor i64 %268, %267
  %270 = bitcast i64 %269 to double
  %271 = load double, double* %86, align 1
  %272 = fmul double %270, %271
  %273 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %274 = inttoptr i64 %122 to double*
  %275 = load double, double* %274
  %276 = fmul double %273, %275
  %277 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %278 = fadd double %276, %277
  %279 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %280 = fadd double %278, %279
  %281 = fmul double %280, %272
  %282 = inttoptr i64 %123 to double*
  %283 = load double, double* %282
  %284 = fmul double %281, %283
  %285 = inttoptr i64 %124 to double*
  %286 = load double, double* %285
  %287 = fmul double %284, %286
  %288 = inttoptr i64 %125 to i32*
  %289 = load i32, i32* %288
  %290 = sext i32 %289 to i64
  %291 = mul nsw i64 %290, 6760
  %292 = load i64, i64* %8, align 8
  %293 = add i64 %291, %292
  %294 = inttoptr i64 %119 to i32*
  %295 = load i32, i32* %294
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, 520
  %298 = add i64 %297, %293
  %299 = inttoptr i64 %120 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %301, 40
  %303 = add i64 %302, %298
  %304 = add i64 %303, 8
  %305 = inttoptr i64 %304 to double*
  %306 = load double, double* %305
  %307 = fmul double %287, %306
  %308 = mul nsw i64 %296, 2600
  %309 = load i64, i64* %16, align 8
  %310 = add i64 %308, %309
  %311 = mul nsw i64 %301, 200
  %312 = add i64 %311, %310
  %313 = add i64 %312, 8
  %314 = inttoptr i64 %313 to double*
  store double %307, double* %314
  %315 = bitcast double %271 to <2 x i32>
  %316 = extractelement <2 x i32> %315, i32 0
  store i32 %316, i32* %100, align 1, !tbaa !1292
  %317 = extractelement <2 x i32> %315, i32 1
  store i32 %317, i32* %102, align 1, !tbaa !1292
  %318 = load double, double* %94, align 1
  %319 = load double, double* bitcast (%dt_type* @dt to double*)
  %320 = fmul double %318, %319
  %321 = inttoptr i64 %123 to double*
  %322 = load double, double* %321
  %323 = fmul double %320, %322
  %324 = inttoptr i64 %126 to double*
  %325 = load double, double* %324
  %326 = fmul double %323, %325
  %327 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %328 = inttoptr i64 %122 to double*
  %329 = load double, double* %328
  %330 = fmul double %327, %329
  %331 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %332 = fadd double %330, %331
  %333 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %334 = fadd double %332, %333
  %335 = fmul double %334, %326
  %336 = load <2 x i32>, <2 x i32>* %111, align 1
  %337 = extractelement <2 x i32> %336, i32 0
  store i32 %337, i32* %112, align 1, !tbaa !1292
  %338 = extractelement <2 x i32> %336, i32 1
  store i32 %338, i32* %114, align 1, !tbaa !1292
  %339 = load double, double* %107, align 1
  %340 = fadd double %339, %335
  %341 = load <2 x i32>, <2 x i32>* %99, align 1
  %342 = extractelement <2 x i32> %341, i32 0
  store i32 %342, i32* %100, align 1, !tbaa !1292
  %343 = extractelement <2 x i32> %341, i32 1
  store i32 %343, i32* %102, align 1, !tbaa !1292
  %344 = load double, double* %94, align 1
  %345 = fmul double %319, %344
  %346 = load double, double* bitcast (%dx2_type* @dx2 to double*)
  %347 = fmul double %327, %346
  %348 = load double, double* bitcast (%dy2_type* @dy2 to double*)
  %349 = fmul double %331, %348
  %350 = fadd double %349, %347
  %351 = load double, double* bitcast (%dz2_type* @dz2 to double*)
  %352 = fmul double %333, %351
  store double %352, double* %127, align 1, !tbaa !1264
  store i64 0, i64* %128, align 1, !tbaa !1264
  %353 = fadd double %352, %350
  %354 = fmul double %353, %345
  %355 = fadd double %354, %340
  %356 = inttoptr i64 %119 to i32*
  %357 = load i32, i32* %356
  %358 = sext i32 %357 to i64
  %359 = mul nsw i64 %358, 2600
  %360 = load i64, i64* %16, align 8
  %361 = add i64 %359, %360
  %362 = inttoptr i64 %120 to i32*
  %363 = load i32, i32* %362
  %364 = sext i32 %363 to i64
  %365 = mul nsw i64 %364, 200
  %366 = add i64 %365, %361
  %367 = add i64 %366, 48
  %368 = inttoptr i64 %367 to double*
  store double %355, double* %368
  %369 = inttoptr i64 %119 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  %372 = mul nsw i64 %371, 2600
  %373 = add i64 %372, %360
  %374 = inttoptr i64 %120 to i32*
  %375 = load i32, i32* %374
  %376 = sext i32 %375 to i64
  %377 = mul nsw i64 %376, 200
  %378 = add i64 %377, %373
  %379 = add i64 %378, 88
  %380 = load double, double* %121, align 1
  %381 = inttoptr i64 %379 to double*
  store double %380, double* %381
  %382 = inttoptr i64 %119 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = mul nsw i64 %384, 2600
  %386 = add i64 %385, %360
  %387 = inttoptr i64 %120 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  %390 = mul nsw i64 %389, 200
  %391 = add i64 %390, %386
  %392 = add i64 %391, 128
  %393 = inttoptr i64 %392 to double*
  store double %380, double* %393
  %394 = inttoptr i64 %119 to i32*
  %395 = load i32, i32* %394
  %396 = sext i32 %395 to i64
  %397 = mul nsw i64 %396, 2600
  %398 = add i64 %397, %360
  %399 = inttoptr i64 %120 to i32*
  %400 = load i32, i32* %399
  %401 = sext i32 %400 to i64
  %402 = mul nsw i64 %401, 200
  %403 = add i64 %402, %398
  %404 = add i64 %403, 168
  %405 = inttoptr i64 %404 to double*
  store double %380, double* %405
  %406 = load double, double* bitcast (%dt_type* @dt to double*)
  %407 = bitcast double %406 to i64
  %408 = load i64, i64* %9, align 8
  %409 = xor i64 %408, %407
  %410 = bitcast i64 %409 to double
  %411 = load double, double* %86, align 1
  %412 = fmul double %410, %411
  %413 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %414 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %415 = inttoptr i64 %122 to double*
  %416 = load double, double* %415
  %417 = fmul double %414, %416
  %418 = fadd double %417, %413
  %419 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %420 = fadd double %418, %419
  %421 = fmul double %420, %412
  %422 = inttoptr i64 %123 to double*
  %423 = load double, double* %422
  %424 = fmul double %421, %423
  %425 = inttoptr i64 %124 to double*
  %426 = load double, double* %425
  %427 = fmul double %424, %426
  %428 = inttoptr i64 %125 to i32*
  %429 = load i32, i32* %428
  %430 = sext i32 %429 to i64
  %431 = mul nsw i64 %430, 6760
  %432 = load i64, i64* %8, align 8
  %433 = add i64 %431, %432
  %434 = inttoptr i64 %119 to i32*
  %435 = load i32, i32* %434
  %436 = sext i32 %435 to i64
  %437 = mul nsw i64 %436, 520
  %438 = add i64 %437, %433
  %439 = inttoptr i64 %120 to i32*
  %440 = load i32, i32* %439
  %441 = sext i32 %440 to i64
  %442 = mul nsw i64 %441, 40
  %443 = add i64 %442, %438
  %444 = add i64 %443, 16
  %445 = inttoptr i64 %444 to double*
  %446 = load double, double* %445
  %447 = fmul double %427, %446
  %448 = mul nsw i64 %436, 2600
  %449 = load i64, i64* %16, align 8
  %450 = add i64 %448, %449
  %451 = mul nsw i64 %441, 200
  %452 = add i64 %451, %450
  %453 = add i64 %452, 16
  %454 = inttoptr i64 %453 to double*
  store double %447, double* %454
  %455 = inttoptr i64 %119 to i32*
  %456 = load i32, i32* %455
  %457 = sext i32 %456 to i64
  %458 = mul nsw i64 %457, 2600
  %459 = add i64 %458, %449
  %460 = inttoptr i64 %120 to i32*
  %461 = load i32, i32* %460
  %462 = sext i32 %461 to i64
  %463 = mul nsw i64 %462, 200
  %464 = add i64 %463, %459
  %465 = add i64 %464, 56
  %466 = load double, double* %121, align 1
  %467 = inttoptr i64 %465 to double*
  store double %466, double* %467
  %468 = bitcast double %411 to <2 x i32>
  %469 = extractelement <2 x i32> %468, i32 0
  store i32 %469, i32* %100, align 1, !tbaa !1292
  %470 = extractelement <2 x i32> %468, i32 1
  store i32 %470, i32* %102, align 1, !tbaa !1292
  %471 = load double, double* %94, align 1
  %472 = load double, double* bitcast (%dt_type* @dt to double*)
  %473 = fmul double %471, %472
  %474 = inttoptr i64 %123 to double*
  %475 = load double, double* %474
  %476 = fmul double %473, %475
  %477 = inttoptr i64 %126 to double*
  %478 = load double, double* %477
  %479 = fmul double %476, %478
  %480 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %481 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %482 = inttoptr i64 %122 to double*
  %483 = load double, double* %482
  %484 = fmul double %481, %483
  %485 = fadd double %484, %480
  %486 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %487 = fadd double %485, %486
  %488 = fmul double %487, %479
  %489 = load <2 x i32>, <2 x i32>* %111, align 1
  %490 = extractelement <2 x i32> %489, i32 0
  store i32 %490, i32* %112, align 1, !tbaa !1292
  %491 = extractelement <2 x i32> %489, i32 1
  store i32 %491, i32* %114, align 1, !tbaa !1292
  %492 = load double, double* %107, align 1
  %493 = fadd double %492, %488
  %494 = load <2 x i32>, <2 x i32>* %99, align 1
  %495 = extractelement <2 x i32> %494, i32 0
  store i32 %495, i32* %100, align 1, !tbaa !1292
  %496 = extractelement <2 x i32> %494, i32 1
  store i32 %496, i32* %102, align 1, !tbaa !1292
  %497 = load double, double* %94, align 1
  %498 = fmul double %472, %497
  %499 = load double, double* bitcast (%dx3_type* @dx3 to double*)
  %500 = fmul double %480, %499
  %501 = load double, double* bitcast (%dy3_type* @dy3 to double*)
  %502 = fmul double %481, %501
  %503 = fadd double %502, %500
  %504 = load double, double* bitcast (%dz3_type* @dz3 to double*)
  %505 = fmul double %486, %504
  store double %505, double* %127, align 1, !tbaa !1264
  store i64 0, i64* %128, align 1, !tbaa !1264
  %506 = fadd double %505, %503
  %507 = fmul double %506, %498
  %508 = fadd double %507, %493
  %509 = inttoptr i64 %119 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  %512 = mul nsw i64 %511, 2600
  %513 = load i64, i64* %16, align 8
  %514 = add i64 %512, %513
  %515 = inttoptr i64 %120 to i32*
  %516 = load i32, i32* %515
  %517 = sext i32 %516 to i64
  %518 = mul nsw i64 %517, 200
  %519 = add i64 %518, %514
  %520 = add i64 %519, 96
  %521 = inttoptr i64 %520 to double*
  store double %508, double* %521
  %522 = inttoptr i64 %119 to i32*
  %523 = load i32, i32* %522
  %524 = sext i32 %523 to i64
  %525 = mul nsw i64 %524, 2600
  %526 = add i64 %525, %513
  %527 = inttoptr i64 %120 to i32*
  %528 = load i32, i32* %527
  %529 = sext i32 %528 to i64
  %530 = mul nsw i64 %529, 200
  %531 = add i64 %530, %526
  %532 = add i64 %531, 136
  %533 = load double, double* %121, align 1
  %534 = inttoptr i64 %532 to double*
  store double %533, double* %534
  %535 = inttoptr i64 %119 to i32*
  %536 = load i32, i32* %535
  %537 = sext i32 %536 to i64
  %538 = mul nsw i64 %537, 2600
  %539 = add i64 %538, %513
  %540 = inttoptr i64 %120 to i32*
  %541 = load i32, i32* %540
  %542 = sext i32 %541 to i64
  %543 = mul nsw i64 %542, 200
  %544 = add i64 %543, %539
  %545 = add i64 %544, 176
  %546 = inttoptr i64 %545 to double*
  store double %533, double* %546
  %547 = load double, double* bitcast (%dt_type* @dt to double*)
  %548 = bitcast double %547 to i64
  %549 = load i64, i64* %9, align 8
  %550 = xor i64 %549, %548
  %551 = bitcast i64 %550 to double
  %552 = bitcast <2 x i32> %494 to double
  %553 = fmul double %551, %552
  %554 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %555 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %556 = fadd double %554, %555
  %557 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %558 = inttoptr i64 %122 to double*
  %559 = load double, double* %558
  %560 = fmul double %557, %559
  %561 = fadd double %560, %556
  %562 = fmul double %561, %553
  %563 = inttoptr i64 %123 to double*
  %564 = load double, double* %563
  %565 = fmul double %562, %564
  %566 = inttoptr i64 %124 to double*
  %567 = load double, double* %566
  %568 = fmul double %565, %567
  %569 = inttoptr i64 %125 to i32*
  %570 = load i32, i32* %569
  %571 = sext i32 %570 to i64
  %572 = mul nsw i64 %571, 6760
  %573 = load i64, i64* %8, align 8
  %574 = add i64 %572, %573
  %575 = inttoptr i64 %119 to i32*
  %576 = load i32, i32* %575
  %577 = sext i32 %576 to i64
  %578 = mul nsw i64 %577, 520
  %579 = add i64 %578, %574
  %580 = inttoptr i64 %120 to i32*
  %581 = load i32, i32* %580
  %582 = sext i32 %581 to i64
  %583 = mul nsw i64 %582, 40
  %584 = add i64 %583, %579
  %585 = add i64 %584, 24
  %586 = inttoptr i64 %585 to double*
  %587 = load double, double* %586
  %588 = fmul double %568, %587
  %589 = mul nsw i64 %577, 2600
  %590 = load i64, i64* %16, align 8
  %591 = add i64 %589, %590
  %592 = mul nsw i64 %582, 200
  %593 = add i64 %592, %591
  %594 = add i64 %593, 24
  %595 = inttoptr i64 %594 to double*
  store double %588, double* %595
  %596 = inttoptr i64 %119 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %598, 2600
  %600 = add i64 %599, %590
  %601 = inttoptr i64 %120 to i32*
  %602 = load i32, i32* %601
  %603 = sext i32 %602 to i64
  %604 = mul nsw i64 %603, 200
  %605 = add i64 %604, %600
  %606 = add i64 %605, 64
  %607 = load double, double* %121, align 1
  %608 = inttoptr i64 %606 to double*
  store double %607, double* %608
  %609 = inttoptr i64 %119 to i32*
  %610 = load i32, i32* %609
  %611 = sext i32 %610 to i64
  %612 = mul nsw i64 %611, 2600
  %613 = add i64 %612, %590
  %614 = inttoptr i64 %120 to i32*
  %615 = load i32, i32* %614
  %616 = sext i32 %615 to i64
  %617 = mul nsw i64 %616, 200
  %618 = add i64 %617, %613
  %619 = add i64 %618, 104
  %620 = inttoptr i64 %619 to double*
  store double %607, double* %620
  %621 = load <2 x i32>, <2 x i32>* %99, align 1
  %622 = extractelement <2 x i32> %621, i32 0
  store i32 %622, i32* %100, align 1, !tbaa !1292
  %623 = extractelement <2 x i32> %621, i32 1
  store i32 %623, i32* %102, align 1, !tbaa !1292
  %624 = load double, double* %94, align 1
  %625 = load double, double* bitcast (%dt_type* @dt to double*)
  %626 = fmul double %624, %625
  %627 = inttoptr i64 %123 to double*
  %628 = load double, double* %627
  %629 = fmul double %626, %628
  %630 = inttoptr i64 %126 to double*
  %631 = load double, double* %630
  %632 = fmul double %629, %631
  %633 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %634 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %635 = fadd double %633, %634
  %636 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %637 = inttoptr i64 %122 to double*
  %638 = load double, double* %637
  %639 = fmul double %636, %638
  %640 = fadd double %639, %635
  %641 = fmul double %640, %632
  %642 = load <2 x i32>, <2 x i32>* %111, align 1
  %643 = extractelement <2 x i32> %642, i32 0
  store i32 %643, i32* %112, align 1, !tbaa !1292
  %644 = extractelement <2 x i32> %642, i32 1
  store i32 %644, i32* %114, align 1, !tbaa !1292
  %645 = load double, double* %107, align 1
  %646 = fadd double %645, %641
  store i32 %622, i32* %100, align 1, !tbaa !1292
  store i32 %623, i32* %102, align 1, !tbaa !1292
  %647 = load double, double* %94, align 1
  %648 = fmul double %625, %647
  %649 = load double, double* bitcast (%dx4_type* @dx4 to double*)
  %650 = fmul double %633, %649
  %651 = load double, double* bitcast (%dy4_type* @dy4 to double*)
  %652 = fmul double %634, %651
  %653 = fadd double %652, %650
  %654 = load double, double* bitcast (%dz4_type* @dz4 to double*)
  %655 = fmul double %636, %654
  %656 = fadd double %655, %653
  %657 = fmul double %656, %648
  %658 = fadd double %657, %646
  %659 = inttoptr i64 %119 to i32*
  %660 = load i32, i32* %659
  %661 = sext i32 %660 to i64
  %662 = mul nsw i64 %661, 2600
  %663 = load i64, i64* %16, align 8
  %664 = add i64 %662, %663
  %665 = inttoptr i64 %120 to i32*
  %666 = load i32, i32* %665
  %667 = sext i32 %666 to i64
  %668 = mul nsw i64 %667, 200
  %669 = add i64 %668, %664
  %670 = add i64 %669, 144
  %671 = inttoptr i64 %670 to double*
  store double %658, double* %671
  %672 = inttoptr i64 %119 to i32*
  %673 = load i32, i32* %672
  %674 = sext i32 %673 to i64
  %675 = mul nsw i64 %674, 2600
  %676 = add i64 %675, %663
  %677 = inttoptr i64 %120 to i32*
  %678 = load i32, i32* %677
  %679 = sext i32 %678 to i64
  %680 = mul nsw i64 %679, 200
  %681 = add i64 %680, %676
  %682 = add i64 %681, 184
  %683 = load double, double* %121, align 1
  %684 = inttoptr i64 %682 to double*
  store double %683, double* %684
  %685 = load double, double* bitcast (%dt_type* @dt to double*)
  %686 = bitcast double %685 to i64
  %687 = load i64, i64* %9, align 8
  %688 = xor i64 %687, %686
  %689 = bitcast i64 %688 to double
  %690 = load double, double* %86, align 1
  %691 = fmul double %689, %690
  store double %691, double* %94, align 1, !tbaa !1264
  %692 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %693 = inttoptr i64 %122 to double*
  %694 = load double, double* %693
  %695 = inttoptr i64 %123 to double*
  %696 = load double, double* %695
  %697 = fmul double %694, %696
  %698 = inttoptr i64 %129 to double*
  %699 = load double, double* %698
  %700 = fsub double %697, %699
  %701 = fmul double %692, %700
  %702 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %703 = fsub double %696, %699
  %704 = fmul double %703, %702
  %705 = fadd double %704, %701
  %706 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %707 = fmul double %703, %706
  %708 = fadd double %707, %705
  %709 = inttoptr i64 %125 to i32*
  %710 = load i32, i32* %709
  %711 = sext i32 %710 to i64
  %712 = mul nsw i64 %711, 6760
  %713 = load i64, i64* %8, align 8
  %714 = add i64 %712, %713
  %715 = inttoptr i64 %119 to i32*
  %716 = load i32, i32* %715
  %717 = sext i32 %716 to i64
  %718 = mul nsw i64 %717, 520
  %719 = add i64 %718, %714
  %720 = inttoptr i64 %120 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = mul nsw i64 %722, 40
  %724 = add i64 %723, %719
  %725 = add i64 %724, 8
  %726 = inttoptr i64 %725 to double*
  %727 = load double, double* %726
  %728 = fmul double %727, %727
  %729 = fmul double %708, %728
  %730 = fmul double %703, %692
  %731 = fmul double %702, %700
  %732 = fadd double %730, %731
  %733 = fadd double %707, %732
  %734 = add i64 %724, 16
  %735 = inttoptr i64 %734 to double*
  %736 = load double, double* %735
  %737 = fmul double %736, %736
  %738 = fmul double %733, %737
  %739 = fadd double %729, %738
  %740 = fadd double %704, %730
  store double %700, double* %130, align 1, !tbaa !1264
  store i64 0, i64* %131, align 1, !tbaa !1264
  %741 = fmul double %706, %700
  %742 = fadd double %740, %741
  %743 = load i64, i64* %8, align 8
  %744 = add i64 %712, %743
  %745 = add i64 %718, %744
  %746 = add i64 %723, %745
  %747 = add i64 %746, 24
  %748 = inttoptr i64 %747 to double*
  %749 = load double, double* %748
  %750 = fmul double %749, %749
  %751 = fmul double %742, %750
  %752 = fadd double %739, %751
  %753 = inttoptr i64 %132 to double*
  %754 = load double, double* %753
  %755 = fmul double %752, %754
  %756 = fadd double %692, %702
  %757 = fadd double %756, %706
  %758 = fmul double %757, %699
  %759 = inttoptr i64 %124 to double*
  %760 = load double, double* %759
  %761 = fmul double %758, %760
  %762 = add i64 %746, 32
  %763 = inttoptr i64 %762 to double*
  %764 = load double, double* %763
  %765 = fmul double %761, %764
  %766 = fadd double %755, %765
  %767 = load double, double* %94, align 1
  %768 = fmul double %767, %766
  %769 = mul nsw i64 %717, 2600
  %770 = load i64, i64* %16, align 8
  %771 = add i64 %769, %770
  %772 = mul nsw i64 %722, 200
  %773 = add i64 %772, %771
  %774 = add i64 %773, 32
  %775 = inttoptr i64 %774 to double*
  store double %768, double* %775
  %776 = load <2 x i32>, <2 x i32>* %99, align 1
  %777 = extractelement <2 x i32> %776, i32 0
  store i32 %777, i32* %100, align 1, !tbaa !1292
  %778 = extractelement <2 x i32> %776, i32 1
  store i32 %778, i32* %102, align 1, !tbaa !1292
  %779 = load double, double* %94, align 1
  %780 = load double, double* bitcast (%dt_type* @dt to double*)
  %781 = fmul double %779, %780
  %782 = inttoptr i64 %124 to double*
  %783 = load double, double* %782
  %784 = fmul double %781, %783
  %785 = inttoptr i64 %125 to i32*
  %786 = load i32, i32* %785
  %787 = sext i32 %786 to i64
  %788 = mul nsw i64 %787, 6760
  %789 = load i64, i64* %8, align 8
  %790 = add i64 %788, %789
  %791 = inttoptr i64 %119 to i32*
  %792 = load i32, i32* %791
  %793 = sext i32 %792 to i64
  %794 = mul nsw i64 %793, 520
  %795 = add i64 %794, %790
  %796 = inttoptr i64 %120 to i32*
  %797 = load i32, i32* %796
  %798 = sext i32 %797 to i64
  %799 = mul nsw i64 %798, 40
  %800 = add i64 %799, %795
  %801 = add i64 %800, 8
  %802 = inttoptr i64 %801 to double*
  %803 = load double, double* %802
  %804 = fmul double %784, %803
  %805 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %806 = inttoptr i64 %122 to double*
  %807 = load double, double* %806
  %808 = inttoptr i64 %123 to double*
  %809 = load double, double* %808
  %810 = fmul double %807, %809
  %811 = inttoptr i64 %129 to double*
  %812 = load double, double* %811
  %813 = fsub double %810, %812
  %814 = fmul double %805, %813
  %815 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %816 = fsub double %809, %812
  %817 = fmul double %816, %815
  %818 = fadd double %817, %814
  %819 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %820 = fmul double %816, %819
  %821 = fadd double %820, %818
  %822 = fmul double %821, %804
  %823 = mul nsw i64 %793, 2600
  %824 = load i64, i64* %16, align 8
  %825 = add i64 %823, %824
  %826 = mul nsw i64 %798, 200
  %827 = add i64 %826, %825
  %828 = add i64 %827, 72
  %829 = inttoptr i64 %828 to double*
  store double %822, double* %829
  %830 = load <2 x i32>, <2 x i32>* %99, align 1
  %831 = extractelement <2 x i32> %830, i32 0
  store i32 %831, i32* %100, align 1, !tbaa !1292
  %832 = extractelement <2 x i32> %830, i32 1
  store i32 %832, i32* %102, align 1, !tbaa !1292
  %833 = load double, double* %94, align 1
  %834 = load double, double* bitcast (%dt_type* @dt to double*)
  %835 = fmul double %833, %834
  %836 = inttoptr i64 %124 to double*
  %837 = load double, double* %836
  %838 = fmul double %835, %837
  %839 = inttoptr i64 %125 to i32*
  %840 = load i32, i32* %839
  %841 = sext i32 %840 to i64
  %842 = mul nsw i64 %841, 6760
  %843 = load i64, i64* %8, align 8
  %844 = add i64 %842, %843
  %845 = inttoptr i64 %119 to i32*
  %846 = load i32, i32* %845
  %847 = sext i32 %846 to i64
  %848 = mul nsw i64 %847, 520
  %849 = add i64 %848, %844
  %850 = inttoptr i64 %120 to i32*
  %851 = load i32, i32* %850
  %852 = sext i32 %851 to i64
  %853 = mul nsw i64 %852, 40
  %854 = add i64 %853, %849
  %855 = add i64 %854, 16
  %856 = inttoptr i64 %855 to double*
  %857 = load double, double* %856
  %858 = fmul double %838, %857
  %859 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %860 = inttoptr i64 %123 to double*
  %861 = load double, double* %860
  %862 = inttoptr i64 %129 to double*
  %863 = load double, double* %862
  %864 = fsub double %861, %863
  %865 = fmul double %864, %859
  %866 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %867 = inttoptr i64 %122 to double*
  %868 = load double, double* %867
  %869 = fmul double %868, %861
  %870 = fsub double %869, %863
  %871 = fmul double %866, %870
  %872 = fadd double %865, %871
  %873 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %874 = fmul double %864, %873
  %875 = fadd double %874, %872
  %876 = fmul double %875, %858
  %877 = mul nsw i64 %847, 2600
  %878 = load i64, i64* %16, align 8
  %879 = add i64 %877, %878
  %880 = mul nsw i64 %852, 200
  %881 = add i64 %880, %879
  %882 = add i64 %881, 112
  %883 = inttoptr i64 %882 to double*
  store double %876, double* %883
  %884 = load <2 x i32>, <2 x i32>* %99, align 1
  %885 = extractelement <2 x i32> %884, i32 0
  store i32 %885, i32* %100, align 1, !tbaa !1292
  %886 = extractelement <2 x i32> %884, i32 1
  store i32 %886, i32* %102, align 1, !tbaa !1292
  %887 = load double, double* %94, align 1
  %888 = load double, double* bitcast (%dt_type* @dt to double*)
  %889 = fmul double %887, %888
  %890 = inttoptr i64 %124 to double*
  %891 = load double, double* %890
  %892 = fmul double %889, %891
  %893 = inttoptr i64 %125 to i32*
  %894 = load i32, i32* %893
  %895 = sext i32 %894 to i64
  %896 = mul nsw i64 %895, 6760
  %897 = load i64, i64* %8, align 8
  %898 = add i64 %896, %897
  %899 = inttoptr i64 %119 to i32*
  %900 = load i32, i32* %899
  %901 = sext i32 %900 to i64
  %902 = mul nsw i64 %901, 520
  %903 = add i64 %902, %898
  %904 = inttoptr i64 %120 to i32*
  %905 = load i32, i32* %904
  %906 = sext i32 %905 to i64
  %907 = mul nsw i64 %906, 40
  %908 = add i64 %907, %903
  %909 = add i64 %908, 24
  %910 = inttoptr i64 %909 to double*
  %911 = load double, double* %910
  %912 = fmul double %892, %911
  %913 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %914 = inttoptr i64 %123 to double*
  %915 = load double, double* %914
  %916 = inttoptr i64 %129 to double*
  %917 = load double, double* %916
  %918 = fsub double %915, %917
  %919 = fmul double %918, %913
  %920 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %921 = fmul double %918, %920
  %922 = fadd double %921, %919
  %923 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %924 = inttoptr i64 %122 to double*
  %925 = load double, double* %924
  %926 = fmul double %925, %915
  %927 = fsub double %926, %917
  store double %927, double* %127, align 1, !tbaa !1264
  store i64 0, i64* %128, align 1, !tbaa !1264
  %928 = fmul double %923, %927
  store double %928, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %929 = fadd double %922, %928
  %930 = fmul double %912, %929
  %931 = mul nsw i64 %901, 2600
  %932 = load i64, i64* %16, align 8
  %933 = add i64 %931, %932
  %934 = mul nsw i64 %906, 200
  %935 = add i64 %934, %933
  %936 = add i64 %935, 152
  %937 = inttoptr i64 %936 to double*
  store double %930, double* %937
  %938 = load <2 x i32>, <2 x i32>* %99, align 1
  %939 = extractelement <2 x i32> %938, i32 0
  store i32 %939, i32* %100, align 1, !tbaa !1292
  %940 = extractelement <2 x i32> %938, i32 1
  store i32 %940, i32* %102, align 1, !tbaa !1292
  %941 = load double, double* %94, align 1
  %942 = load double, double* bitcast (%dt_type* @dt to double*)
  %943 = fmul double %941, %942
  %944 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %945 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %946 = fadd double %944, %945
  %947 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %948 = fadd double %946, %947
  %949 = fmul double %948, %943
  %950 = inttoptr i64 %129 to double*
  %951 = load double, double* %950
  %952 = fmul double %949, %951
  %953 = inttoptr i64 %126 to double*
  %954 = load double, double* %953
  %955 = fmul double %952, %954
  %956 = load double, double* %90, align 1
  %957 = fadd double %956, %955
  %958 = bitcast <2 x i32> %938 to double
  %959 = fmul double %942, %958
  %960 = load double, double* bitcast (%dx5_type* @dx5 to double*)
  %961 = fmul double %944, %960
  %962 = load double, double* bitcast (%dy5_type* @dy5 to double*)
  %963 = fmul double %945, %962
  %964 = fadd double %963, %961
  %965 = load double, double* bitcast (%dz5_type* @dz5 to double*)
  %966 = fmul double %947, %965
  store double %966, double* %107, align 1, !tbaa !1264
  store i64 0, i64* %108, align 1, !tbaa !1264
  %967 = fadd double %966, %964
  store double %967, double* %94, align 1, !tbaa !1264
  store i64 0, i64* %95, align 1, !tbaa !1264
  %968 = fmul double %967, %959
  %969 = fadd double %968, %957
  store double %969, double* %90, align 1, !tbaa !1264
  %970 = inttoptr i64 %119 to i32*
  %971 = load i32, i32* %970
  %972 = sext i32 %971 to i64
  %973 = mul nsw i64 %972, 2600
  %974 = add i64 %973, %932
  %975 = inttoptr i64 %120 to i32*
  %976 = load i32, i32* %975
  %977 = sext i32 %976 to i64
  %978 = mul nsw i64 %977, 200
  %979 = add i64 %978, %974
  %980 = add i64 %979, 192
  %981 = inttoptr i64 %980 to double*
  store double %969, double* %981
  %982 = inttoptr i64 %125 to i32*
  %983 = load i32, i32* %982
  %984 = add i32 %983, -1
  %985 = sext i32 %984 to i64
  %986 = mul nsw i64 %985, 1352
  %987 = load i64, i64* %11, align 8
  %988 = add i64 %986, %987
  %989 = inttoptr i64 %119 to i32*
  %990 = load i32, i32* %989
  %991 = sext i32 %990 to i64
  %992 = mul nsw i64 %991, 104
  %993 = add i64 %992, %988
  %994 = inttoptr i64 %120 to i32*
  %995 = load i32, i32* %994
  %996 = sext i32 %995 to i64
  %997 = shl nsw i64 %996, 3
  %998 = add i64 %997, %993
  %999 = inttoptr i64 %998 to double*
  %1000 = load double, double* %999
  %1001 = inttoptr i64 %126 to double*
  store double %1000, double* %1001
  %1002 = inttoptr i64 %126 to double*
  %1003 = load double, double* %1002
  %1004 = fmul double %1003, %1003
  %1005 = inttoptr i64 %124 to double*
  store double %1004, double* %1005
  %1006 = inttoptr i64 %126 to double*
  %1007 = load double, double* %1006
  %1008 = inttoptr i64 %124 to double*
  %1009 = load double, double* %1008
  %1010 = fmul double %1007, %1009
  %1011 = inttoptr i64 %132 to double*
  store double %1010, double* %1011
  %1012 = load double, double* bitcast (%dt_type* @dt to double*)
  %1013 = bitcast double %1012 to i64
  %1014 = load i64, i64* %9, align 8
  %1015 = xor i64 %1014, %1013
  %1016 = bitcast i64 %1015 to double
  %1017 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1018 = fmul double %1016, %1017
  %1019 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %1020 = fmul double %1018, %1019
  %1021 = inttoptr i64 %119 to i32*
  %1022 = load i32, i32* %1021
  %1023 = sext i32 %1022 to i64
  %1024 = mul nsw i64 %1023, 2600
  %1025 = load i64, i64* %15, align 8
  %1026 = add i64 %1024, %1025
  %1027 = inttoptr i64 %120 to i32*
  %1028 = load i32, i32* %1027
  %1029 = sext i32 %1028 to i64
  %1030 = mul nsw i64 %1029, 200
  %1031 = add i64 %1030, %1026
  %1032 = inttoptr i64 %1031 to double*
  store double %1020, double* %1032
  %1033 = inttoptr i64 %119 to i32*
  %1034 = load i32, i32* %1033
  %1035 = sext i32 %1034 to i64
  %1036 = mul nsw i64 %1035, 2600
  %1037 = add i64 %1036, %1025
  %1038 = inttoptr i64 %120 to i32*
  %1039 = load i32, i32* %1038
  %1040 = sext i32 %1039 to i64
  %1041 = mul nsw i64 %1040, 200
  %1042 = add i64 %1041, %1037
  %1043 = add i64 %1042, 40
  %1044 = load double, double* %121, align 1
  %1045 = inttoptr i64 %1043 to double*
  store double %1044, double* %1045
  %1046 = inttoptr i64 %119 to i32*
  %1047 = load i32, i32* %1046
  %1048 = sext i32 %1047 to i64
  %1049 = mul nsw i64 %1048, 2600
  %1050 = add i64 %1049, %1025
  %1051 = inttoptr i64 %120 to i32*
  %1052 = load i32, i32* %1051
  %1053 = sext i32 %1052 to i64
  %1054 = mul nsw i64 %1053, 200
  %1055 = add i64 %1054, %1050
  %1056 = add i64 %1055, 80
  %1057 = inttoptr i64 %1056 to double*
  store double %1044, double* %1057
  %1058 = load double, double* bitcast (%dt_type* @dt to double*)
  %1059 = bitcast double %1058 to i64
  %1060 = xor i64 %1014, %1059
  %1061 = bitcast i64 %1060 to double
  %1062 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1063 = fmul double %1061, %1062
  %1064 = inttoptr i64 %119 to i32*
  %1065 = load i32, i32* %1064
  %1066 = sext i32 %1065 to i64
  %1067 = mul nsw i64 %1066, 2600
  %1068 = add i64 %1067, %1025
  %1069 = inttoptr i64 %120 to i32*
  %1070 = load i32, i32* %1069
  %1071 = sext i32 %1070 to i64
  %1072 = mul nsw i64 %1071, 200
  %1073 = add i64 %1072, %1068
  %1074 = add i64 %1073, 120
  %1075 = inttoptr i64 %1074 to double*
  store double %1063, double* %1075
  %1076 = inttoptr i64 %119 to i32*
  %1077 = load i32, i32* %1076
  %1078 = sext i32 %1077 to i64
  %1079 = mul nsw i64 %1078, 2600
  %1080 = add i64 %1079, %1025
  %1081 = inttoptr i64 %120 to i32*
  %1082 = load i32, i32* %1081
  %1083 = sext i32 %1082 to i64
  %1084 = mul nsw i64 %1083, 200
  %1085 = add i64 %1084, %1080
  %1086 = add i64 %1085, 160
  %1087 = inttoptr i64 %1086 to double*
  store double %1044, double* %1087
  %1088 = load double, double* bitcast (%dt_type* @dt to double*)
  %1089 = bitcast double %1088 to i64
  %1090 = load i64, i64* %9, align 8
  %1091 = xor i64 %1090, %1089
  %1092 = bitcast i64 %1091 to double
  %1093 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1094 = fmul double %1092, %1093
  %1095 = inttoptr i64 %125 to i32*
  %1096 = load i32, i32* %1095
  %1097 = add i32 %1096, -1
  %1098 = sext i32 %1097 to i64
  %1099 = mul nsw i64 %1098, 6760
  %1100 = load i64, i64* %8, align 8
  %1101 = add i64 %1099, %1100
  %1102 = inttoptr i64 %119 to i32*
  %1103 = load i32, i32* %1102
  %1104 = sext i32 %1103 to i64
  %1105 = mul nsw i64 %1104, 520
  %1106 = add i64 %1105, %1101
  %1107 = inttoptr i64 %120 to i32*
  %1108 = load i32, i32* %1107
  %1109 = sext i32 %1108 to i64
  %1110 = mul nsw i64 %1109, 40
  %1111 = add i64 %1110, %1106
  %1112 = add i64 %1111, 8
  %1113 = inttoptr i64 %1112 to double*
  %1114 = load double, double* %1113
  %1115 = add i64 %1111, 24
  %1116 = inttoptr i64 %1115 to double*
  %1117 = load double, double* %1116
  %1118 = fmul double %1114, %1117
  %1119 = bitcast double %1118 to i64
  %1120 = xor i64 %1090, %1119
  %1121 = bitcast i64 %1120 to double
  %1122 = inttoptr i64 %124 to double*
  %1123 = load double, double* %1122
  %1124 = fmul double %1121, %1123
  %1125 = fmul double %1124, %1094
  %1126 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1127 = fmul double %1088, %1126
  %1128 = inttoptr i64 %123 to double*
  %1129 = load double, double* %1128
  %1130 = bitcast double %1129 to i64
  %1131 = xor i64 %1090, %1130
  %1132 = bitcast i64 %1131 to double
  %1133 = fmul double %1132, %1123
  %1134 = fmul double %1133, %1114
  store double %1134, double* %94, align 1, !tbaa !1264
  store i64 0, i64* %95, align 1, !tbaa !1264
  %1135 = fmul double %1127, %1134
  %1136 = fsub double %1125, %1135
  %1137 = mul nsw i64 %1104, 2600
  %1138 = load i64, i64* %15, align 8
  %1139 = add i64 %1137, %1138
  %1140 = mul nsw i64 %1109, 200
  %1141 = add i64 %1140, %1139
  %1142 = add i64 %1141, 8
  %1143 = inttoptr i64 %1142 to double*
  store double %1136, double* %1143
  %1144 = load double, double* bitcast (%dt_type* @dt to double*)
  %1145 = bitcast double %1144 to i64
  %1146 = load i64, i64* %9, align 8
  %1147 = xor i64 %1146, %1145
  %1148 = bitcast i64 %1147 to double
  %1149 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1150 = fmul double %1148, %1149
  %1151 = inttoptr i64 %125 to i32*
  %1152 = load i32, i32* %1151
  %1153 = add i32 %1152, -1
  %1154 = sext i32 %1153 to i64
  %1155 = mul nsw i64 %1154, 6760
  %1156 = load i64, i64* %8, align 8
  %1157 = add i64 %1155, %1156
  %1158 = inttoptr i64 %119 to i32*
  %1159 = load i32, i32* %1158
  %1160 = sext i32 %1159 to i64
  %1161 = mul nsw i64 %1160, 520
  %1162 = add i64 %1161, %1157
  %1163 = inttoptr i64 %120 to i32*
  %1164 = load i32, i32* %1163
  %1165 = sext i32 %1164 to i64
  %1166 = mul nsw i64 %1165, 40
  %1167 = add i64 %1166, %1162
  %1168 = add i64 %1167, 24
  %1169 = inttoptr i64 %1168 to double*
  %1170 = load double, double* %1169
  %1171 = inttoptr i64 %126 to double*
  %1172 = load double, double* %1171
  %1173 = fmul double %1170, %1172
  %1174 = fmul double %1173, %1150
  %1175 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1176 = fmul double %1144, %1175
  %1177 = inttoptr i64 %123 to double*
  %1178 = load double, double* %1177
  %1179 = fmul double %1176, %1178
  %1180 = fmul double %1179, %1172
  %1181 = fsub double %1174, %1180
  %1182 = load double, double* bitcast (%dz2_type* @dz2 to double*)
  %1183 = fmul double %1176, %1182
  %1184 = fsub double %1181, %1183
  %1185 = mul nsw i64 %1160, 2600
  %1186 = add i64 %1185, %1138
  %1187 = mul nsw i64 %1165, 200
  %1188 = add i64 %1187, %1186
  %1189 = add i64 %1188, 48
  %1190 = inttoptr i64 %1189 to double*
  store double %1184, double* %1190
  %1191 = inttoptr i64 %119 to i32*
  %1192 = load i32, i32* %1191
  %1193 = sext i32 %1192 to i64
  %1194 = mul nsw i64 %1193, 2600
  %1195 = load i64, i64* %15, align 8
  %1196 = add i64 %1194, %1195
  %1197 = inttoptr i64 %120 to i32*
  %1198 = load i32, i32* %1197
  %1199 = sext i32 %1198 to i64
  %1200 = mul nsw i64 %1199, 200
  %1201 = add i64 %1200, %1196
  %1202 = add i64 %1201, 88
  %1203 = load double, double* %121, align 1
  %1204 = inttoptr i64 %1202 to double*
  store double %1203, double* %1204
  %1205 = load double, double* bitcast (%dt_type* @dt to double*)
  %1206 = bitcast double %1205 to i64
  %1207 = load i64, i64* %9, align 8
  %1208 = xor i64 %1207, %1206
  %1209 = bitcast i64 %1208 to double
  %1210 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1211 = fmul double %1209, %1210
  %1212 = inttoptr i64 %125 to i32*
  %1213 = load i32, i32* %1212
  %1214 = add i32 %1213, -1
  %1215 = sext i32 %1214 to i64
  %1216 = mul nsw i64 %1215, 6760
  %1217 = load i64, i64* %8, align 8
  %1218 = add i64 %1216, %1217
  %1219 = inttoptr i64 %119 to i32*
  %1220 = load i32, i32* %1219
  %1221 = sext i32 %1220 to i64
  %1222 = mul nsw i64 %1221, 520
  %1223 = add i64 %1222, %1218
  %1224 = inttoptr i64 %120 to i32*
  %1225 = load i32, i32* %1224
  %1226 = sext i32 %1225 to i64
  %1227 = mul nsw i64 %1226, 40
  %1228 = add i64 %1227, %1223
  %1229 = add i64 %1228, 8
  %1230 = inttoptr i64 %1229 to double*
  %1231 = load double, double* %1230
  %1232 = inttoptr i64 %126 to double*
  %1233 = load double, double* %1232
  %1234 = fmul double %1231, %1233
  %1235 = fmul double %1234, %1211
  %1236 = mul nsw i64 %1221, 2600
  %1237 = add i64 %1236, %1195
  %1238 = mul nsw i64 %1226, 200
  %1239 = add i64 %1238, %1237
  %1240 = add i64 %1239, 128
  %1241 = inttoptr i64 %1240 to double*
  store double %1235, double* %1241
  %1242 = inttoptr i64 %119 to i32*
  %1243 = load i32, i32* %1242
  %1244 = sext i32 %1243 to i64
  %1245 = mul nsw i64 %1244, 2600
  %1246 = add i64 %1245, %1195
  %1247 = inttoptr i64 %120 to i32*
  %1248 = load i32, i32* %1247
  %1249 = sext i32 %1248 to i64
  %1250 = mul nsw i64 %1249, 200
  %1251 = add i64 %1250, %1246
  %1252 = add i64 %1251, 168
  %1253 = inttoptr i64 %1252 to double*
  store double %1203, double* %1253
  %1254 = load double, double* bitcast (%dt_type* @dt to double*)
  %1255 = bitcast double %1254 to i64
  %1256 = xor i64 %1207, %1255
  %1257 = bitcast i64 %1256 to double
  %1258 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1259 = fmul double %1257, %1258
  %1260 = inttoptr i64 %125 to i32*
  %1261 = load i32, i32* %1260
  %1262 = add i32 %1261, -1
  %1263 = sext i32 %1262 to i64
  %1264 = mul nsw i64 %1263, 6760
  %1265 = add i64 %1264, %1217
  %1266 = inttoptr i64 %119 to i32*
  %1267 = load i32, i32* %1266
  %1268 = sext i32 %1267 to i64
  %1269 = mul nsw i64 %1268, 520
  %1270 = add i64 %1269, %1265
  %1271 = inttoptr i64 %120 to i32*
  %1272 = load i32, i32* %1271
  %1273 = sext i32 %1272 to i64
  %1274 = mul nsw i64 %1273, 40
  %1275 = add i64 %1274, %1270
  %1276 = add i64 %1275, 16
  %1277 = inttoptr i64 %1276 to double*
  %1278 = load double, double* %1277
  %1279 = add i64 %1275, 24
  %1280 = inttoptr i64 %1279 to double*
  %1281 = load double, double* %1280
  %1282 = fmul double %1278, %1281
  %1283 = bitcast double %1282 to i64
  %1284 = load i64, i64* %9, align 8
  %1285 = xor i64 %1284, %1283
  %1286 = bitcast i64 %1285 to double
  %1287 = inttoptr i64 %124 to double*
  %1288 = load double, double* %1287
  %1289 = fmul double %1286, %1288
  %1290 = fmul double %1289, %1259
  %1291 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1292 = fmul double %1254, %1291
  %1293 = inttoptr i64 %123 to double*
  %1294 = load double, double* %1293
  %1295 = bitcast double %1294 to i64
  %1296 = xor i64 %1284, %1295
  %1297 = bitcast i64 %1296 to double
  %1298 = fmul double %1297, %1288
  %1299 = load i64, i64* %8, align 8
  %1300 = add i64 %1264, %1299
  %1301 = add i64 %1269, %1300
  %1302 = add i64 %1274, %1301
  %1303 = add i64 %1302, 16
  %1304 = inttoptr i64 %1303 to double*
  %1305 = load double, double* %1304
  %1306 = fmul double %1298, %1305
  %1307 = fmul double %1292, %1306
  %1308 = fsub double %1290, %1307
  %1309 = mul nsw i64 %1268, 2600
  %1310 = load i64, i64* %15, align 8
  %1311 = add i64 %1309, %1310
  %1312 = mul nsw i64 %1273, 200
  %1313 = add i64 %1312, %1311
  %1314 = add i64 %1313, 16
  %1315 = inttoptr i64 %1314 to double*
  store double %1308, double* %1315
  %1316 = inttoptr i64 %119 to i32*
  %1317 = load i32, i32* %1316
  %1318 = sext i32 %1317 to i64
  %1319 = mul nsw i64 %1318, 2600
  %1320 = add i64 %1319, %1310
  %1321 = inttoptr i64 %120 to i32*
  %1322 = load i32, i32* %1321
  %1323 = sext i32 %1322 to i64
  %1324 = mul nsw i64 %1323, 200
  %1325 = add i64 %1324, %1320
  %1326 = add i64 %1325, 56
  %1327 = load double, double* %121, align 1
  %1328 = inttoptr i64 %1326 to double*
  store double %1327, double* %1328
  %1329 = load double, double* bitcast (%dt_type* @dt to double*)
  %1330 = bitcast double %1329 to i64
  %1331 = xor i64 %1284, %1330
  %1332 = bitcast i64 %1331 to double
  %1333 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1334 = fmul double %1332, %1333
  %1335 = inttoptr i64 %125 to i32*
  %1336 = load i32, i32* %1335
  %1337 = add i32 %1336, -1
  %1338 = sext i32 %1337 to i64
  %1339 = mul nsw i64 %1338, 6760
  %1340 = add i64 %1339, %1299
  %1341 = inttoptr i64 %119 to i32*
  %1342 = load i32, i32* %1341
  %1343 = sext i32 %1342 to i64
  %1344 = mul nsw i64 %1343, 520
  %1345 = add i64 %1344, %1340
  %1346 = inttoptr i64 %120 to i32*
  %1347 = load i32, i32* %1346
  %1348 = sext i32 %1347 to i64
  %1349 = mul nsw i64 %1348, 40
  %1350 = add i64 %1349, %1345
  %1351 = add i64 %1350, 24
  %1352 = inttoptr i64 %1351 to double*
  %1353 = load double, double* %1352
  %1354 = inttoptr i64 %126 to double*
  %1355 = load double, double* %1354
  %1356 = fmul double %1353, %1355
  %1357 = fmul double %1356, %1334
  %1358 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1359 = fmul double %1329, %1358
  %1360 = inttoptr i64 %123 to double*
  %1361 = load double, double* %1360
  %1362 = fmul double %1361, %1355
  %1363 = fmul double %1362, %1359
  %1364 = fsub double %1357, %1363
  %1365 = load double, double* bitcast (%dz3_type* @dz3 to double*)
  %1366 = fmul double %1359, %1365
  %1367 = fsub double %1364, %1366
  %1368 = mul nsw i64 %1343, 2600
  %1369 = load i64, i64* %15, align 8
  %1370 = add i64 %1368, %1369
  %1371 = mul nsw i64 %1348, 200
  %1372 = add i64 %1371, %1370
  %1373 = add i64 %1372, 96
  %1374 = inttoptr i64 %1373 to double*
  store double %1367, double* %1374
  %1375 = load double, double* bitcast (%dt_type* @dt to double*)
  %1376 = bitcast double %1375 to i64
  %1377 = load i64, i64* %9, align 8
  %1378 = xor i64 %1377, %1376
  %1379 = bitcast i64 %1378 to double
  %1380 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1381 = fmul double %1379, %1380
  %1382 = inttoptr i64 %125 to i32*
  %1383 = load i32, i32* %1382
  %1384 = add i32 %1383, -1
  %1385 = sext i32 %1384 to i64
  %1386 = mul nsw i64 %1385, 6760
  %1387 = load i64, i64* %8, align 8
  %1388 = add i64 %1386, %1387
  %1389 = inttoptr i64 %119 to i32*
  %1390 = load i32, i32* %1389
  %1391 = sext i32 %1390 to i64
  %1392 = mul nsw i64 %1391, 520
  %1393 = add i64 %1392, %1388
  %1394 = inttoptr i64 %120 to i32*
  %1395 = load i32, i32* %1394
  %1396 = sext i32 %1395 to i64
  %1397 = mul nsw i64 %1396, 40
  %1398 = add i64 %1397, %1393
  %1399 = add i64 %1398, 16
  %1400 = inttoptr i64 %1399 to double*
  %1401 = load double, double* %1400
  %1402 = inttoptr i64 %126 to double*
  %1403 = load double, double* %1402
  %1404 = fmul double %1401, %1403
  %1405 = fmul double %1404, %1381
  %1406 = mul nsw i64 %1391, 2600
  %1407 = add i64 %1406, %1369
  %1408 = mul nsw i64 %1396, 200
  %1409 = add i64 %1408, %1407
  %1410 = add i64 %1409, 136
  %1411 = inttoptr i64 %1410 to double*
  store double %1405, double* %1411
  %1412 = inttoptr i64 %119 to i32*
  %1413 = load i32, i32* %1412
  %1414 = sext i32 %1413 to i64
  %1415 = mul nsw i64 %1414, 2600
  %1416 = add i64 %1415, %1369
  %1417 = inttoptr i64 %120 to i32*
  %1418 = load i32, i32* %1417
  %1419 = sext i32 %1418 to i64
  %1420 = mul nsw i64 %1419, 200
  %1421 = add i64 %1420, %1416
  %1422 = add i64 %1421, 176
  %1423 = load double, double* %121, align 1
  %1424 = inttoptr i64 %1422 to double*
  store double %1423, double* %1424
  %1425 = load double, double* bitcast (%dt_type* @dt to double*)
  %1426 = bitcast double %1425 to i64
  %1427 = xor i64 %1377, %1426
  %1428 = bitcast i64 %1427 to double
  %1429 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1430 = fmul double %1428, %1429
  store double %1430, double* %86, align 1, !tbaa !1264
  %1431 = inttoptr i64 %125 to i32*
  %1432 = load i32, i32* %1431
  %1433 = add i32 %1432, -1
  %1434 = sext i32 %1433 to i64
  %1435 = mul nsw i64 %1434, 6760
  %1436 = add i64 %1435, %1387
  %1437 = inttoptr i64 %119 to i32*
  %1438 = load i32, i32* %1437
  %1439 = sext i32 %1438 to i64
  %1440 = mul nsw i64 %1439, 520
  %1441 = add i64 %1440, %1436
  %1442 = inttoptr i64 %120 to i32*
  %1443 = load i32, i32* %1442
  %1444 = sext i32 %1443 to i64
  %1445 = mul nsw i64 %1444, 40
  %1446 = add i64 %1445, %1441
  %1447 = add i64 %1446, 24
  %1448 = inttoptr i64 %1447 to double*
  %1449 = load double, double* %1448
  %1450 = inttoptr i64 %126 to double*
  %1451 = load double, double* %1450
  %1452 = fmul double %1449, %1451
  %1453 = bitcast double %1452 to i64
  %1454 = load i64, i64* %9, align 8
  %1455 = xor i64 %1454, %1453
  %1456 = load i64, i64* %8, align 8
  %1457 = add i64 %1435, %1456
  %1458 = add i64 %1440, %1457
  %1459 = add i64 %1445, %1458
  %1460 = add i64 %1459, 24
  %1461 = inttoptr i64 %1460 to double*
  %1462 = load double, double* %1461
  %1463 = fmul double %1462, %1451
  %1464 = bitcast i64 %1455 to double
  %1465 = fmul double %1463, %1464
  %1466 = mul nsw i64 %1434, 1352
  %1467 = load i64, i64* %10, align 8
  %1468 = add i64 %1466, %1467
  %1469 = mul nsw i64 %1439, 104
  %1470 = add i64 %1469, %1468
  %1471 = load <2 x i32>, <2 x i32>* %133, align 1
  %1472 = extractelement <2 x i32> %1471, i32 0
  store i32 %1472, i32* %100, align 1, !tbaa !1292
  %1473 = extractelement <2 x i32> %1471, i32 1
  store i32 %1473, i32* %102, align 1, !tbaa !1292
  %1474 = shl nsw i64 %1444, 3
  %1475 = add i64 %1474, %1470
  %1476 = load double, double* %94, align 1
  %1477 = inttoptr i64 %1475 to double*
  %1478 = load double, double* %1477
  %1479 = fmul double %1476, %1478
  %1480 = fmul double %1479, %1451
  %1481 = fadd double %1465, %1480
  %1482 = load double, double* %86, align 1
  %1483 = fmul double %1482, %1481
  %1484 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1485 = fmul double %1425, %1484
  %1486 = inttoptr i64 %122 to double*
  %1487 = load double, double* %1486
  %1488 = bitcast double %1487 to i64
  %1489 = xor i64 %1454, %1488
  %1490 = bitcast i64 %1489 to double
  %1491 = inttoptr i64 %123 to double*
  %1492 = load double, double* %1491
  %1493 = fmul double %1490, %1492
  %1494 = inttoptr i64 %124 to double*
  %1495 = load double, double* %1494
  %1496 = fmul double %1493, %1495
  %1497 = fmul double %1496, %1462
  %1498 = fmul double %1485, %1497
  %1499 = fsub double %1483, %1498
  %1500 = mul nsw i64 %1439, 2600
  %1501 = load i64, i64* %15, align 8
  %1502 = add i64 %1500, %1501
  %1503 = mul nsw i64 %1444, 200
  %1504 = add i64 %1503, %1502
  %1505 = add i64 %1504, 24
  %1506 = inttoptr i64 %1505 to double*
  store double %1499, double* %1506
  %1507 = load double, double* bitcast (%dt_type* @dt to double*)
  %1508 = bitcast double %1507 to i64
  %1509 = load i64, i64* %9, align 8
  %1510 = xor i64 %1509, %1508
  %1511 = bitcast i64 %1510 to double
  %1512 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1513 = fmul double %1511, %1512
  %1514 = inttoptr i64 %125 to i32*
  %1515 = load i32, i32* %1514
  %1516 = add i32 %1515, -1
  %1517 = sext i32 %1516 to i64
  %1518 = mul nsw i64 %1517, 6760
  %1519 = load i64, i64* %8, align 8
  %1520 = add i64 %1518, %1519
  %1521 = inttoptr i64 %119 to i32*
  %1522 = load i32, i32* %1521
  %1523 = sext i32 %1522 to i64
  %1524 = mul nsw i64 %1523, 520
  %1525 = add i64 %1524, %1520
  %1526 = inttoptr i64 %120 to i32*
  %1527 = load i32, i32* %1526
  %1528 = sext i32 %1527 to i64
  %1529 = mul nsw i64 %1528, 40
  %1530 = add i64 %1529, %1525
  %1531 = add i64 %1530, 8
  %1532 = inttoptr i64 %1531 to double*
  %1533 = load double, double* %1532
  %1534 = inttoptr i64 %126 to double*
  %1535 = load double, double* %1534
  %1536 = fmul double %1533, %1535
  %1537 = load <2 x i32>, <2 x i32>* %135, align 1
  %1538 = extractelement <2 x i32> %1537, i32 0
  store i32 %1538, i32* %100, align 1, !tbaa !1292
  %1539 = extractelement <2 x i32> %1537, i32 1
  store i32 %1539, i32* %102, align 1, !tbaa !1292
  %1540 = load double, double* %94, align 1
  %1541 = fmul double %1540, %1536
  %1542 = fmul double %1513, %1541
  %1543 = mul nsw i64 %1523, 2600
  %1544 = add i64 %1543, %1501
  %1545 = mul nsw i64 %1528, 200
  %1546 = add i64 %1545, %1544
  %1547 = add i64 %1546, 64
  %1548 = inttoptr i64 %1547 to double*
  store double %1542, double* %1548
  %1549 = load double, double* bitcast (%dt_type* @dt to double*)
  %1550 = bitcast double %1549 to i64
  %1551 = xor i64 %1509, %1550
  %1552 = bitcast i64 %1551 to double
  %1553 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1554 = fmul double %1552, %1553
  %1555 = inttoptr i64 %125 to i32*
  %1556 = load i32, i32* %1555
  %1557 = add i32 %1556, -1
  %1558 = sext i32 %1557 to i64
  %1559 = mul nsw i64 %1558, 6760
  %1560 = add i64 %1559, %1519
  %1561 = inttoptr i64 %119 to i32*
  %1562 = load i32, i32* %1561
  %1563 = sext i32 %1562 to i64
  %1564 = mul nsw i64 %1563, 520
  %1565 = add i64 %1564, %1560
  %1566 = inttoptr i64 %120 to i32*
  %1567 = load i32, i32* %1566
  %1568 = sext i32 %1567 to i64
  %1569 = mul nsw i64 %1568, 40
  %1570 = add i64 %1569, %1565
  %1571 = add i64 %1570, 16
  %1572 = inttoptr i64 %1571 to double*
  %1573 = load double, double* %1572
  %1574 = inttoptr i64 %126 to double*
  %1575 = load double, double* %1574
  %1576 = fmul double %1573, %1575
  store i32 %1538, i32* %100, align 1, !tbaa !1292
  store i32 %1539, i32* %102, align 1, !tbaa !1292
  %1577 = load double, double* %94, align 1
  %1578 = fmul double %1577, %1576
  %1579 = fmul double %1554, %1578
  %1580 = mul nsw i64 %1563, 2600
  %1581 = load i64, i64* %15, align 8
  %1582 = add i64 %1580, %1581
  %1583 = mul nsw i64 %1568, 200
  %1584 = add i64 %1583, %1582
  %1585 = add i64 %1584, 104
  %1586 = inttoptr i64 %1585 to double*
  store double %1579, double* %1586
  %1587 = load double, double* bitcast (%dt_type* @dt to double*)
  %1588 = bitcast double %1587 to i64
  %1589 = load i64, i64* %9, align 8
  %1590 = xor i64 %1589, %1588
  %1591 = bitcast i64 %1590 to double
  %1592 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1593 = fmul double %1591, %1592
  %1594 = load double, double* %83, align 1
  %1595 = fmul double %1593, %1594
  %1596 = inttoptr i64 %125 to i32*
  %1597 = load i32, i32* %1596
  %1598 = add i32 %1597, -1
  %1599 = sext i32 %1598 to i64
  %1600 = mul nsw i64 %1599, 6760
  %1601 = load i64, i64* %8, align 8
  %1602 = add i64 %1600, %1601
  %1603 = inttoptr i64 %119 to i32*
  %1604 = load i32, i32* %1603
  %1605 = sext i32 %1604 to i64
  %1606 = mul nsw i64 %1605, 520
  %1607 = add i64 %1606, %1602
  %1608 = inttoptr i64 %120 to i32*
  %1609 = load i32, i32* %1608
  %1610 = sext i32 %1609 to i64
  %1611 = mul nsw i64 %1610, 40
  %1612 = add i64 %1611, %1607
  %1613 = add i64 %1612, 24
  %1614 = inttoptr i64 %1613 to double*
  %1615 = load double, double* %1614
  %1616 = inttoptr i64 %126 to double*
  %1617 = load double, double* %1616
  %1618 = fmul double %1615, %1617
  %1619 = fmul double %1618, %1595
  %1620 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1621 = fmul double %1587, %1620
  %1622 = inttoptr i64 %122 to double*
  %1623 = load double, double* %1622
  %1624 = inttoptr i64 %123 to double*
  %1625 = load double, double* %1624
  %1626 = fmul double %1623, %1625
  %1627 = fmul double %1626, %1617
  %1628 = fmul double %1621, %1627
  %1629 = fsub double %1619, %1628
  %1630 = load double, double* bitcast (%dz4_type* @dz4 to double*)
  %1631 = fmul double %1621, %1630
  %1632 = fsub double %1629, %1631
  %1633 = mul nsw i64 %1605, 2600
  %1634 = load i64, i64* %15, align 8
  %1635 = add i64 %1633, %1634
  %1636 = mul nsw i64 %1610, 200
  %1637 = add i64 %1636, %1635
  %1638 = add i64 %1637, 144
  %1639 = inttoptr i64 %1638 to double*
  store double %1632, double* %1639
  %1640 = load double, double* bitcast (%dt_type* @dt to double*)
  %1641 = bitcast double %1640 to i64
  %1642 = load i64, i64* %9, align 8
  %1643 = xor i64 %1642, %1641
  %1644 = bitcast i64 %1643 to double
  %1645 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1646 = fmul double %1644, %1645
  %1647 = load double, double* %51, align 1
  %1648 = fmul double %1646, %1647
  %1649 = inttoptr i64 %119 to i32*
  %1650 = load i32, i32* %1649
  %1651 = sext i32 %1650 to i64
  %1652 = mul nsw i64 %1651, 2600
  %1653 = add i64 %1652, %1634
  %1654 = inttoptr i64 %120 to i32*
  %1655 = load i32, i32* %1654
  %1656 = sext i32 %1655 to i64
  %1657 = mul nsw i64 %1656, 200
  %1658 = add i64 %1657, %1653
  %1659 = add i64 %1658, 184
  %1660 = inttoptr i64 %1659 to double*
  store double %1648, double* %1660
  %1661 = load double, double* bitcast (%dt_type* @dt to double*)
  %1662 = bitcast double %1661 to i64
  %1663 = xor i64 %1642, %1662
  %1664 = bitcast i64 %1663 to double
  %1665 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1666 = fmul double %1664, %1665
  %1667 = inttoptr i64 %125 to i32*
  %1668 = load i32, i32* %1667
  %1669 = add i32 %1668, -1
  %1670 = sext i32 %1669 to i64
  %1671 = mul nsw i64 %1670, 1352
  %1672 = load i64, i64* %10, align 8
  %1673 = add i64 %1671, %1672
  %1674 = inttoptr i64 %119 to i32*
  %1675 = load i32, i32* %1674
  %1676 = sext i32 %1675 to i64
  %1677 = mul nsw i64 %1676, 104
  %1678 = add i64 %1677, %1673
  %1679 = inttoptr i64 %120 to i32*
  %1680 = load i32, i32* %1679
  %1681 = sext i32 %1680 to i64
  %1682 = load <2 x i32>, <2 x i32>* %136, align 1
  %1683 = extractelement <2 x i32> %1682, i32 0
  store i32 %1683, i32* %137, align 1, !tbaa !1292
  %1684 = extractelement <2 x i32> %1682, i32 1
  store i32 %1684, i32* %139, align 1, !tbaa !1292
  %1685 = shl nsw i64 %1681, 3
  %1686 = add i64 %1685, %1678
  %1687 = load double, double* %90, align 1
  %1688 = inttoptr i64 %1686 to double*
  %1689 = load double, double* %1688
  %1690 = fmul double %1687, %1689
  %1691 = mul nsw i64 %1670, 6760
  %1692 = load i64, i64* %8, align 8
  %1693 = add i64 %1691, %1692
  %1694 = mul nsw i64 %1676, 520
  %1695 = add i64 %1694, %1693
  %1696 = mul nsw i64 %1681, 40
  %1697 = add i64 %1696, %1695
  %1698 = load <2 x i32>, <2 x i32>* %140, align 1
  %1699 = extractelement <2 x i32> %1698, i32 0
  store i32 %1699, i32* %100, align 1, !tbaa !1292
  %1700 = extractelement <2 x i32> %1698, i32 1
  store i32 %1700, i32* %102, align 1, !tbaa !1292
  %1701 = add i64 %1697, 32
  %1702 = load double, double* %94, align 1
  %1703 = inttoptr i64 %1701 to double*
  %1704 = load double, double* %1703
  %1705 = fmul double %1702, %1704
  %1706 = fsub double %1690, %1705
  %1707 = add i64 %1697, 24
  %1708 = inttoptr i64 %1707 to double*
  %1709 = load double, double* %1708
  %1710 = fmul double %1706, %1709
  %1711 = inttoptr i64 %124 to double*
  %1712 = load double, double* %1711
  %1713 = fmul double %1710, %1712
  %1714 = fmul double %1666, %1713
  store double %1714, double* %86, align 1, !tbaa !1264
  %1715 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1716 = fmul double %1661, %1715
  store double %1716, double* %90, align 1, !tbaa !1264
  %1717 = inttoptr i64 %123 to double*
  %1718 = load double, double* %1717
  %1719 = inttoptr i64 %129 to double*
  %1720 = load double, double* %1719
  %1721 = fsub double %1718, %1720
  %1722 = bitcast double %1721 to i64
  %1723 = load i64, i64* %9, align 8
  %1724 = xor i64 %1723, %1722
  %1725 = bitcast i64 %1724 to double
  %1726 = inttoptr i64 %132 to double*
  %1727 = load double, double* %1726
  %1728 = fmul double %1725, %1727
  %1729 = add i64 %1697, 8
  %1730 = inttoptr i64 %1729 to double*
  %1731 = load double, double* %1730
  %1732 = fmul double %1731, %1731
  %1733 = fmul double %1728, %1732
  %1734 = fmul double %1721, %1727
  %1735 = load i64, i64* %8, align 8
  %1736 = add i64 %1691, %1735
  %1737 = add i64 %1694, %1736
  %1738 = add i64 %1696, %1737
  %1739 = add i64 %1738, 16
  %1740 = inttoptr i64 %1739 to double*
  %1741 = load double, double* %1740
  %1742 = fmul double %1741, %1741
  %1743 = fmul double %1734, %1742
  %1744 = fsub double %1733, %1743
  %1745 = inttoptr i64 %122 to double*
  %1746 = load double, double* %1745
  %1747 = fmul double %1746, %1718
  %1748 = fsub double %1747, %1720
  %1749 = fmul double %1748, %1727
  %1750 = add i64 %1738, 24
  %1751 = inttoptr i64 %1750 to double*
  %1752 = load double, double* %1751
  %1753 = fmul double %1752, %1752
  store double %1753, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %1754 = fmul double %1749, %1753
  %1755 = fsub double %1744, %1754
  %1756 = fmul double %1720, %1712
  %1757 = add i64 %1738, 32
  %1758 = inttoptr i64 %1757 to double*
  %1759 = load double, double* %1758
  %1760 = fmul double %1756, %1759
  store double %1760, double* %107, align 1, !tbaa !1264
  store i64 0, i64* %108, align 1, !tbaa !1264
  %1761 = fsub double %1755, %1760
  %1762 = load double, double* %90, align 1
  %1763 = fmul double %1762, %1761
  %1764 = load double, double* %86, align 1
  %1765 = fsub double %1764, %1763
  %1766 = mul nsw i64 %1676, 2600
  %1767 = load i64, i64* %15, align 8
  %1768 = add i64 %1766, %1767
  %1769 = mul nsw i64 %1681, 200
  %1770 = add i64 %1769, %1768
  %1771 = add i64 %1770, 32
  %1772 = inttoptr i64 %1771 to double*
  store double %1765, double* %1772
  %1773 = load double, double* bitcast (%dt_type* @dt to double*)
  %1774 = bitcast double %1773 to i64
  %1775 = load i64, i64* %9, align 8
  %1776 = xor i64 %1775, %1774
  %1777 = bitcast i64 %1776 to double
  %1778 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1779 = fmul double %1777, %1778
  %1780 = inttoptr i64 %125 to i32*
  %1781 = load i32, i32* %1780
  %1782 = add i32 %1781, -1
  %1783 = sext i32 %1782 to i64
  %1784 = mul nsw i64 %1783, 6760
  %1785 = load i64, i64* %8, align 8
  %1786 = add i64 %1784, %1785
  %1787 = inttoptr i64 %119 to i32*
  %1788 = load i32, i32* %1787
  %1789 = sext i32 %1788 to i64
  %1790 = mul nsw i64 %1789, 520
  %1791 = add i64 %1790, %1786
  %1792 = inttoptr i64 %120 to i32*
  %1793 = load i32, i32* %1792
  %1794 = sext i32 %1793 to i64
  %1795 = mul nsw i64 %1794, 40
  %1796 = add i64 %1795, %1791
  %1797 = add i64 %1796, 8
  %1798 = inttoptr i64 %1797 to double*
  %1799 = load double, double* %1798
  %1800 = add i64 %1796, 24
  %1801 = inttoptr i64 %1800 to double*
  %1802 = load double, double* %1801
  %1803 = fmul double %1799, %1802
  %1804 = load <2 x i32>, <2 x i32>* %135, align 1
  %1805 = extractelement <2 x i32> %1804, i32 0
  store i32 %1805, i32* %100, align 1, !tbaa !1292
  %1806 = extractelement <2 x i32> %1804, i32 1
  store i32 %1806, i32* %102, align 1, !tbaa !1292
  %1807 = load double, double* %94, align 1
  %1808 = fmul double %1807, %1803
  %1809 = inttoptr i64 %124 to double*
  %1810 = load double, double* %1809
  %1811 = fmul double %1808, %1810
  %1812 = fmul double %1779, %1811
  %1813 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1814 = fmul double %1773, %1813
  %1815 = inttoptr i64 %123 to double*
  %1816 = load double, double* %1815
  %1817 = inttoptr i64 %129 to double*
  %1818 = load double, double* %1817
  %1819 = fsub double %1816, %1818
  %1820 = fmul double %1819, %1814
  %1821 = fmul double %1820, %1810
  %1822 = fmul double %1821, %1799
  %1823 = fsub double %1812, %1822
  %1824 = mul nsw i64 %1789, 2600
  %1825 = load i64, i64* %15, align 8
  %1826 = add i64 %1824, %1825
  %1827 = mul nsw i64 %1794, 200
  %1828 = add i64 %1827, %1826
  %1829 = add i64 %1828, 72
  %1830 = inttoptr i64 %1829 to double*
  store double %1823, double* %1830
  %1831 = load double, double* bitcast (%dt_type* @dt to double*)
  %1832 = bitcast double %1831 to i64
  %1833 = load i64, i64* %9, align 8
  %1834 = xor i64 %1833, %1832
  %1835 = bitcast i64 %1834 to double
  %1836 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1837 = fmul double %1835, %1836
  %1838 = inttoptr i64 %125 to i32*
  %1839 = load i32, i32* %1838
  %1840 = add i32 %1839, -1
  %1841 = sext i32 %1840 to i64
  %1842 = mul nsw i64 %1841, 6760
  %1843 = load i64, i64* %8, align 8
  %1844 = add i64 %1842, %1843
  %1845 = inttoptr i64 %119 to i32*
  %1846 = load i32, i32* %1845
  %1847 = sext i32 %1846 to i64
  %1848 = mul nsw i64 %1847, 520
  %1849 = add i64 %1848, %1844
  %1850 = inttoptr i64 %120 to i32*
  %1851 = load i32, i32* %1850
  %1852 = sext i32 %1851 to i64
  %1853 = mul nsw i64 %1852, 40
  %1854 = add i64 %1853, %1849
  %1855 = add i64 %1854, 16
  %1856 = inttoptr i64 %1855 to double*
  %1857 = load double, double* %1856
  %1858 = add i64 %1854, 24
  %1859 = inttoptr i64 %1858 to double*
  %1860 = load double, double* %1859
  %1861 = fmul double %1857, %1860
  %1862 = load <2 x i32>, <2 x i32>* %135, align 1
  %1863 = extractelement <2 x i32> %1862, i32 0
  store i32 %1863, i32* %100, align 1, !tbaa !1292
  %1864 = extractelement <2 x i32> %1862, i32 1
  store i32 %1864, i32* %102, align 1, !tbaa !1292
  %1865 = load double, double* %94, align 1
  %1866 = fmul double %1865, %1861
  %1867 = inttoptr i64 %124 to double*
  %1868 = load double, double* %1867
  %1869 = fmul double %1866, %1868
  %1870 = fmul double %1837, %1869
  %1871 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1872 = fmul double %1831, %1871
  %1873 = inttoptr i64 %123 to double*
  %1874 = load double, double* %1873
  %1875 = inttoptr i64 %129 to double*
  %1876 = load double, double* %1875
  %1877 = fsub double %1874, %1876
  %1878 = fmul double %1877, %1872
  %1879 = fmul double %1878, %1868
  %1880 = fmul double %1879, %1857
  %1881 = fsub double %1870, %1880
  %1882 = mul nsw i64 %1847, 2600
  %1883 = load i64, i64* %15, align 8
  %1884 = add i64 %1882, %1883
  %1885 = mul nsw i64 %1852, 200
  %1886 = add i64 %1885, %1884
  %1887 = add i64 %1886, 112
  %1888 = inttoptr i64 %1887 to double*
  store double %1881, double* %1888
  %1889 = load double, double* bitcast (%dt_type* @dt to double*)
  %1890 = bitcast double %1889 to i64
  %1891 = load i64, i64* %9, align 8
  %1892 = xor i64 %1891, %1890
  %1893 = bitcast i64 %1892 to double
  %1894 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1895 = fmul double %1893, %1894
  store double %1895, double* %86, align 1, !tbaa !1264
  %1896 = inttoptr i64 %125 to i32*
  %1897 = load i32, i32* %1896
  %1898 = add i32 %1897, -1
  %1899 = sext i32 %1898 to i64
  %1900 = mul nsw i64 %1899, 6760
  %1901 = load i64, i64* %8, align 8
  %1902 = add i64 %1900, %1901
  %1903 = inttoptr i64 %119 to i32*
  %1904 = load i32, i32* %1903
  %1905 = sext i32 %1904 to i64
  %1906 = mul nsw i64 %1905, 520
  %1907 = add i64 %1906, %1902
  %1908 = inttoptr i64 %120 to i32*
  %1909 = load i32, i32* %1908
  %1910 = sext i32 %1909 to i64
  %1911 = mul nsw i64 %1910, 40
  %1912 = add i64 %1911, %1907
  %1913 = add i64 %1912, 32
  %1914 = inttoptr i64 %1913 to double*
  %1915 = load double, double* %1914
  %1916 = inttoptr i64 %126 to double*
  %1917 = load double, double* %1916
  %1918 = fmul double %1915, %1917
  %1919 = load <2 x i32>, <2 x i32>* %140, align 1
  %1920 = extractelement <2 x i32> %1919, i32 0
  store i32 %1920, i32* %100, align 1, !tbaa !1292
  %1921 = extractelement <2 x i32> %1919, i32 1
  store i32 %1921, i32* %102, align 1, !tbaa !1292
  %1922 = load double, double* %94, align 1
  %1923 = fmul double %1922, %1918
  %1924 = mul nsw i64 %1899, 1352
  %1925 = load i64, i64* %10, align 8
  %1926 = add i64 %1924, %1925
  %1927 = mul nsw i64 %1905, 104
  %1928 = add i64 %1927, %1926
  %1929 = shl nsw i64 %1910, 3
  %1930 = add i64 %1929, %1928
  %1931 = inttoptr i64 %1930 to double*
  %1932 = load double, double* %1931
  %1933 = fmul double %1932, %1917
  %1934 = add i64 %1912, 24
  %1935 = inttoptr i64 %1934 to double*
  %1936 = load double, double* %1935
  %1937 = fmul double %1936, %1936
  %1938 = inttoptr i64 %124 to double*
  %1939 = load double, double* %1938
  %1940 = fmul double %1937, %1939
  %1941 = fadd double %1933, %1940
  %1942 = load <2 x i32>, <2 x i32>* %133, align 1
  %1943 = load <2 x i32>, <2 x i32>* %134, align 1
  %1944 = extractelement <2 x i32> %1942, i32 0
  store i32 %1944, i32* %112, align 1, !tbaa !1292
  %1945 = extractelement <2 x i32> %1942, i32 1
  store i32 %1945, i32* %114, align 1, !tbaa !1292
  %1946 = extractelement <2 x i32> %1943, i32 0
  store i32 %1946, i32* %115, align 1, !tbaa !1292
  %1947 = extractelement <2 x i32> %1943, i32 1
  store i32 %1947, i32* %117, align 1, !tbaa !1292
  %1948 = load double, double* %107, align 1
  %1949 = fmul double %1948, %1941
  store double %1949, double* %107, align 1, !tbaa !1264
  %1950 = fsub double %1923, %1949
  %1951 = load double, double* %86, align 1
  %1952 = fmul double %1951, %1950
  %1953 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %1954 = fmul double %1889, %1953
  %1955 = inttoptr i64 %122 to double*
  %1956 = load double, double* %1955
  %1957 = inttoptr i64 %123 to double*
  %1958 = load double, double* %1957
  %1959 = fmul double %1956, %1958
  %1960 = inttoptr i64 %129 to double*
  %1961 = load double, double* %1960
  %1962 = fsub double %1959, %1961
  %1963 = fmul double %1954, %1962
  %1964 = fmul double %1963, %1939
  %1965 = load i64, i64* %8, align 8
  %1966 = add i64 %1900, %1965
  %1967 = add i64 %1906, %1966
  %1968 = add i64 %1911, %1967
  %1969 = add i64 %1968, 24
  %1970 = inttoptr i64 %1969 to double*
  %1971 = load double, double* %1970
  %1972 = fmul double %1964, %1971
  %1973 = fsub double %1952, %1972
  %1974 = mul nsw i64 %1905, 2600
  %1975 = load i64, i64* %15, align 8
  %1976 = add i64 %1974, %1975
  %1977 = mul nsw i64 %1910, 200
  %1978 = add i64 %1977, %1976
  %1979 = add i64 %1978, 152
  %1980 = inttoptr i64 %1979 to double*
  store double %1973, double* %1980
  %1981 = load double, double* bitcast (%dt_type* @dt to double*)
  %1982 = bitcast double %1981 to i64
  %1983 = load i64, i64* %9, align 8
  %1984 = xor i64 %1983, %1982
  %1985 = bitcast i64 %1984 to double
  %1986 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %1987 = fmul double %1985, %1986
  %1988 = inttoptr i64 %125 to i32*
  %1989 = load i32, i32* %1988
  %1990 = add i32 %1989, -1
  %1991 = sext i32 %1990 to i64
  %1992 = mul nsw i64 %1991, 6760
  %1993 = add i64 %1992, %1965
  %1994 = inttoptr i64 %119 to i32*
  %1995 = load i32, i32* %1994
  %1996 = sext i32 %1995 to i64
  %1997 = mul nsw i64 %1996, 520
  %1998 = add i64 %1997, %1993
  %1999 = inttoptr i64 %120 to i32*
  %2000 = load i32, i32* %1999
  %2001 = sext i32 %2000 to i64
  %2002 = mul nsw i64 %2001, 40
  %2003 = add i64 %2002, %1998
  store i64 %2003, i64* %17, align 8, !tbaa !1240
  %2004 = add i64 %2003, 24
  %2005 = inttoptr i64 %2004 to double*
  %2006 = load double, double* %2005
  %2007 = inttoptr i64 %126 to double*
  %2008 = load double, double* %2007
  %2009 = fmul double %2006, %2008
  %2010 = load <2 x i32>, <2 x i32>* %140, align 1
  %2011 = load <2 x i32>, <2 x i32>* %141, align 1
  %2012 = extractelement <2 x i32> %2010, i32 0
  store i32 %2012, i32* %100, align 1, !tbaa !1292
  %2013 = extractelement <2 x i32> %2010, i32 1
  store i32 %2013, i32* %102, align 1, !tbaa !1292
  %2014 = extractelement <2 x i32> %2011, i32 0
  store i32 %2014, i32* %103, align 1, !tbaa !1292
  %2015 = extractelement <2 x i32> %2011, i32 1
  store i32 %2015, i32* %105, align 1, !tbaa !1292
  %2016 = load double, double* %94, align 1
  %2017 = fmul double %2016, %2009
  store double %2017, double* %94, align 1, !tbaa !1264
  %2018 = fmul double %1987, %2017
  %2019 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %2020 = fmul double %1981, %2019
  %2021 = inttoptr i64 %129 to double*
  %2022 = load double, double* %2021
  %2023 = fmul double %2020, %2022
  %2024 = fmul double %2023, %2008
  %2025 = fsub double %2018, %2024
  %2026 = load double, double* bitcast (%dz5_type* @dz5 to double*)
  %2027 = fmul double %2020, %2026
  store double %2027, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %2028 = fsub double %2025, %2027
  %2029 = mul nsw i64 %1996, 2600
  %2030 = load i64, i64* %15, align 8
  %2031 = add i64 %2029, %2030
  %2032 = mul nsw i64 %2001, 200
  %2033 = add i64 %2032, %2031
  %2034 = add i64 %2033, 192
  %2035 = inttoptr i64 %2034 to double*
  store double %2028, double* %2035
  %2036 = inttoptr i64 %125 to i32*
  %2037 = load i32, i32* %2036
  %2038 = sext i32 %2037 to i64
  %2039 = mul nsw i64 %2038, 1352
  %2040 = load i64, i64* %11, align 8
  %2041 = add i64 %2039, %2040
  %2042 = inttoptr i64 %119 to i32*
  %2043 = load i32, i32* %2042
  %2044 = add i32 %2043, -1
  %2045 = sext i32 %2044 to i64
  %2046 = mul nsw i64 %2045, 104
  %2047 = add i64 %2046, %2041
  %2048 = inttoptr i64 %120 to i32*
  %2049 = load i32, i32* %2048
  %2050 = sext i32 %2049 to i64
  %2051 = shl nsw i64 %2050, 3
  %2052 = add i64 %2051, %2047
  %2053 = inttoptr i64 %2052 to double*
  %2054 = load double, double* %2053
  %2055 = inttoptr i64 %126 to double*
  store double %2054, double* %2055
  %2056 = inttoptr i64 %126 to double*
  %2057 = load double, double* %2056
  %2058 = fmul double %2057, %2057
  %2059 = inttoptr i64 %124 to double*
  store double %2058, double* %2059
  %2060 = inttoptr i64 %126 to double*
  %2061 = load double, double* %2060
  %2062 = inttoptr i64 %124 to double*
  %2063 = load double, double* %2062
  %2064 = fmul double %2061, %2063
  %2065 = inttoptr i64 %132 to double*
  store double %2064, double* %2065
  %2066 = load double, double* bitcast (%dt_type* @dt to double*)
  %2067 = bitcast double %2066 to i64
  %2068 = load i64, i64* %9, align 8
  %2069 = xor i64 %2068, %2067
  %2070 = bitcast i64 %2069 to double
  %2071 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2072 = fmul double %2070, %2071
  %2073 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %2074 = fmul double %2072, %2073
  %2075 = inttoptr i64 %119 to i32*
  %2076 = load i32, i32* %2075
  %2077 = sext i32 %2076 to i64
  %2078 = mul nsw i64 %2077, 2600
  %2079 = load i64, i64* %14, align 8
  %2080 = add i64 %2078, %2079
  %2081 = inttoptr i64 %120 to i32*
  %2082 = load i32, i32* %2081
  %2083 = sext i32 %2082 to i64
  %2084 = mul nsw i64 %2083, 200
  %2085 = add i64 %2084, %2080
  %2086 = inttoptr i64 %2085 to double*
  store double %2074, double* %2086
  %2087 = inttoptr i64 %119 to i32*
  %2088 = load i32, i32* %2087
  %2089 = sext i32 %2088 to i64
  %2090 = mul nsw i64 %2089, 2600
  %2091 = add i64 %2090, %2079
  %2092 = inttoptr i64 %120 to i32*
  %2093 = load i32, i32* %2092
  %2094 = sext i32 %2093 to i64
  %2095 = mul nsw i64 %2094, 200
  %2096 = add i64 %2095, %2091
  %2097 = add i64 %2096, 40
  %2098 = load double, double* %121, align 1
  %2099 = inttoptr i64 %2097 to double*
  store double %2098, double* %2099
  %2100 = load double, double* bitcast (%dt_type* @dt to double*)
  %2101 = bitcast double %2100 to i64
  %2102 = xor i64 %2068, %2101
  %2103 = bitcast i64 %2102 to double
  %2104 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2105 = fmul double %2103, %2104
  %2106 = inttoptr i64 %119 to i32*
  %2107 = load i32, i32* %2106
  %2108 = sext i32 %2107 to i64
  %2109 = mul nsw i64 %2108, 2600
  %2110 = add i64 %2109, %2079
  %2111 = inttoptr i64 %120 to i32*
  %2112 = load i32, i32* %2111
  %2113 = sext i32 %2112 to i64
  %2114 = mul nsw i64 %2113, 200
  %2115 = add i64 %2114, %2110
  %2116 = add i64 %2115, 80
  %2117 = inttoptr i64 %2116 to double*
  store double %2105, double* %2117
  %2118 = inttoptr i64 %119 to i32*
  %2119 = load i32, i32* %2118
  %2120 = sext i32 %2119 to i64
  %2121 = mul nsw i64 %2120, 2600
  %2122 = add i64 %2121, %2079
  %2123 = inttoptr i64 %120 to i32*
  %2124 = load i32, i32* %2123
  %2125 = sext i32 %2124 to i64
  %2126 = mul nsw i64 %2125, 200
  %2127 = add i64 %2126, %2122
  %2128 = add i64 %2127, 120
  %2129 = inttoptr i64 %2128 to double*
  store double %2098, double* %2129
  %2130 = inttoptr i64 %119 to i32*
  %2131 = load i32, i32* %2130
  %2132 = sext i32 %2131 to i64
  %2133 = mul nsw i64 %2132, 2600
  %2134 = add i64 %2133, %2079
  %2135 = inttoptr i64 %120 to i32*
  %2136 = load i32, i32* %2135
  %2137 = sext i32 %2136 to i64
  %2138 = mul nsw i64 %2137, 200
  %2139 = add i64 %2138, %2134
  %2140 = add i64 %2139, 160
  %2141 = inttoptr i64 %2140 to double*
  store double %2098, double* %2141
  %2142 = load double, double* bitcast (%dt_type* @dt to double*)
  %2143 = bitcast double %2142 to i64
  %2144 = load i64, i64* %9, align 8
  %2145 = xor i64 %2144, %2143
  %2146 = bitcast i64 %2145 to double
  %2147 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2148 = fmul double %2146, %2147
  %2149 = inttoptr i64 %125 to i32*
  %2150 = load i32, i32* %2149
  %2151 = sext i32 %2150 to i64
  %2152 = mul nsw i64 %2151, 6760
  %2153 = load i64, i64* %8, align 8
  %2154 = add i64 %2152, %2153
  %2155 = inttoptr i64 %119 to i32*
  %2156 = load i32, i32* %2155
  %2157 = add i32 %2156, -1
  %2158 = sext i32 %2157 to i64
  %2159 = mul nsw i64 %2158, 520
  %2160 = add i64 %2159, %2154
  %2161 = inttoptr i64 %120 to i32*
  %2162 = load i32, i32* %2161
  %2163 = sext i32 %2162 to i64
  %2164 = mul nsw i64 %2163, 40
  %2165 = add i64 %2164, %2160
  %2166 = add i64 %2165, 8
  %2167 = inttoptr i64 %2166 to double*
  %2168 = load double, double* %2167
  %2169 = add i64 %2165, 16
  %2170 = inttoptr i64 %2169 to double*
  %2171 = load double, double* %2170
  %2172 = fmul double %2168, %2171
  %2173 = bitcast double %2172 to i64
  %2174 = xor i64 %2144, %2173
  %2175 = bitcast i64 %2174 to double
  %2176 = inttoptr i64 %124 to double*
  %2177 = load double, double* %2176
  %2178 = fmul double %2175, %2177
  %2179 = fmul double %2178, %2148
  %2180 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2181 = fmul double %2142, %2180
  %2182 = inttoptr i64 %123 to double*
  %2183 = load double, double* %2182
  %2184 = bitcast double %2183 to i64
  %2185 = xor i64 %2144, %2184
  %2186 = bitcast i64 %2185 to double
  %2187 = fmul double %2186, %2177
  %2188 = fmul double %2187, %2168
  %2189 = fmul double %2181, %2188
  %2190 = fsub double %2179, %2189
  %2191 = sext i32 %2156 to i64
  %2192 = mul nsw i64 %2191, 2600
  %2193 = load i64, i64* %14, align 8
  %2194 = add i64 %2192, %2193
  %2195 = mul nsw i64 %2163, 200
  %2196 = add i64 %2195, %2194
  %2197 = add i64 %2196, 8
  %2198 = inttoptr i64 %2197 to double*
  store double %2190, double* %2198
  %2199 = load double, double* bitcast (%dt_type* @dt to double*)
  %2200 = bitcast double %2199 to i64
  %2201 = load i64, i64* %9, align 8
  %2202 = xor i64 %2201, %2200
  %2203 = bitcast i64 %2202 to double
  %2204 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2205 = fmul double %2203, %2204
  %2206 = inttoptr i64 %125 to i32*
  %2207 = load i32, i32* %2206
  %2208 = sext i32 %2207 to i64
  %2209 = mul nsw i64 %2208, 6760
  %2210 = load i64, i64* %8, align 8
  %2211 = add i64 %2209, %2210
  %2212 = inttoptr i64 %119 to i32*
  %2213 = load i32, i32* %2212
  %2214 = add i32 %2213, -1
  %2215 = sext i32 %2214 to i64
  %2216 = mul nsw i64 %2215, 520
  %2217 = add i64 %2216, %2211
  %2218 = inttoptr i64 %120 to i32*
  %2219 = load i32, i32* %2218
  %2220 = sext i32 %2219 to i64
  %2221 = mul nsw i64 %2220, 40
  %2222 = add i64 %2221, %2217
  %2223 = add i64 %2222, 16
  %2224 = inttoptr i64 %2223 to double*
  %2225 = load double, double* %2224
  %2226 = inttoptr i64 %126 to double*
  %2227 = load double, double* %2226
  %2228 = fmul double %2225, %2227
  %2229 = fmul double %2228, %2205
  %2230 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2231 = fmul double %2199, %2230
  %2232 = inttoptr i64 %123 to double*
  %2233 = load double, double* %2232
  %2234 = fmul double %2233, %2227
  %2235 = fmul double %2234, %2231
  %2236 = fsub double %2229, %2235
  %2237 = load double, double* bitcast (%dy2_type* @dy2 to double*)
  %2238 = fmul double %2231, %2237
  %2239 = fsub double %2236, %2238
  %2240 = sext i32 %2213 to i64
  %2241 = mul nsw i64 %2240, 2600
  %2242 = add i64 %2241, %2193
  %2243 = mul nsw i64 %2220, 200
  %2244 = add i64 %2243, %2242
  %2245 = add i64 %2244, 48
  %2246 = inttoptr i64 %2245 to double*
  store double %2239, double* %2246
  %2247 = load double, double* bitcast (%dt_type* @dt to double*)
  %2248 = bitcast double %2247 to i64
  %2249 = xor i64 %2201, %2248
  %2250 = bitcast i64 %2249 to double
  %2251 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2252 = fmul double %2250, %2251
  %2253 = inttoptr i64 %125 to i32*
  %2254 = load i32, i32* %2253
  %2255 = sext i32 %2254 to i64
  %2256 = mul nsw i64 %2255, 6760
  %2257 = add i64 %2256, %2210
  %2258 = inttoptr i64 %119 to i32*
  %2259 = load i32, i32* %2258
  %2260 = add i32 %2259, -1
  %2261 = sext i32 %2260 to i64
  %2262 = mul nsw i64 %2261, 520
  %2263 = add i64 %2262, %2257
  %2264 = inttoptr i64 %120 to i32*
  %2265 = load i32, i32* %2264
  %2266 = sext i32 %2265 to i64
  %2267 = mul nsw i64 %2266, 40
  %2268 = add i64 %2267, %2263
  %2269 = add i64 %2268, 8
  %2270 = inttoptr i64 %2269 to double*
  %2271 = load double, double* %2270
  %2272 = inttoptr i64 %126 to double*
  %2273 = load double, double* %2272
  %2274 = fmul double %2271, %2273
  %2275 = fmul double %2274, %2252
  %2276 = sext i32 %2259 to i64
  %2277 = mul nsw i64 %2276, 2600
  %2278 = load i64, i64* %14, align 8
  %2279 = add i64 %2277, %2278
  %2280 = mul nsw i64 %2266, 200
  %2281 = add i64 %2280, %2279
  %2282 = add i64 %2281, 88
  %2283 = inttoptr i64 %2282 to double*
  store double %2275, double* %2283
  %2284 = inttoptr i64 %119 to i32*
  %2285 = load i32, i32* %2284
  %2286 = sext i32 %2285 to i64
  %2287 = mul nsw i64 %2286, 2600
  %2288 = add i64 %2287, %2278
  %2289 = inttoptr i64 %120 to i32*
  %2290 = load i32, i32* %2289
  %2291 = sext i32 %2290 to i64
  %2292 = mul nsw i64 %2291, 200
  %2293 = add i64 %2292, %2288
  %2294 = add i64 %2293, 128
  %2295 = load double, double* %121, align 1
  %2296 = inttoptr i64 %2294 to double*
  store double %2295, double* %2296
  %2297 = inttoptr i64 %119 to i32*
  %2298 = load i32, i32* %2297
  %2299 = sext i32 %2298 to i64
  %2300 = mul nsw i64 %2299, 2600
  %2301 = add i64 %2300, %2278
  %2302 = inttoptr i64 %120 to i32*
  %2303 = load i32, i32* %2302
  %2304 = sext i32 %2303 to i64
  %2305 = mul nsw i64 %2304, 200
  %2306 = add i64 %2305, %2301
  %2307 = add i64 %2306, 168
  %2308 = inttoptr i64 %2307 to double*
  store double %2295, double* %2308
  %2309 = load double, double* bitcast (%dt_type* @dt to double*)
  %2310 = bitcast double %2309 to i64
  %2311 = load i64, i64* %9, align 8
  %2312 = xor i64 %2311, %2310
  %2313 = bitcast i64 %2312 to double
  %2314 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2315 = fmul double %2313, %2314
  store double %2315, double* %86, align 1, !tbaa !1264
  %2316 = inttoptr i64 %125 to i32*
  %2317 = load i32, i32* %2316
  %2318 = sext i32 %2317 to i64
  %2319 = mul nsw i64 %2318, 6760
  %2320 = load i64, i64* %8, align 8
  %2321 = add i64 %2319, %2320
  %2322 = inttoptr i64 %119 to i32*
  %2323 = load i32, i32* %2322
  %2324 = add i32 %2323, -1
  %2325 = sext i32 %2324 to i64
  %2326 = mul nsw i64 %2325, 520
  %2327 = add i64 %2326, %2321
  %2328 = inttoptr i64 %120 to i32*
  %2329 = load i32, i32* %2328
  %2330 = sext i32 %2329 to i64
  %2331 = mul nsw i64 %2330, 40
  %2332 = add i64 %2331, %2327
  %2333 = add i64 %2332, 16
  %2334 = inttoptr i64 %2333 to double*
  %2335 = load double, double* %2334
  %2336 = inttoptr i64 %126 to double*
  %2337 = load double, double* %2336
  %2338 = fmul double %2335, %2337
  %2339 = bitcast double %2338 to i64
  %2340 = xor i64 %2311, %2339
  %2341 = bitcast i64 %2340 to double
  %2342 = fmul double %2338, %2341
  %2343 = mul nsw i64 %2318, 1352
  %2344 = load i64, i64* %10, align 8
  %2345 = add i64 %2343, %2344
  %2346 = mul nsw i64 %2325, 104
  %2347 = add i64 %2346, %2345
  %2348 = shl nsw i64 %2330, 3
  %2349 = add i64 %2348, %2347
  %2350 = inttoptr i64 %2349 to double*
  %2351 = load double, double* %2350
  %2352 = fmul double %2351, %2337
  %2353 = load <2 x i32>, <2 x i32>* %133, align 1
  %2354 = load <2 x i32>, <2 x i32>* %134, align 1
  %2355 = extractelement <2 x i32> %2353, i32 0
  store i32 %2355, i32* %112, align 1, !tbaa !1292
  %2356 = extractelement <2 x i32> %2353, i32 1
  store i32 %2356, i32* %114, align 1, !tbaa !1292
  %2357 = extractelement <2 x i32> %2354, i32 0
  store i32 %2357, i32* %115, align 1, !tbaa !1292
  %2358 = extractelement <2 x i32> %2354, i32 1
  store i32 %2358, i32* %117, align 1, !tbaa !1292
  %2359 = load double, double* %107, align 1
  %2360 = fmul double %2359, %2352
  store double %2360, double* %107, align 1, !tbaa !1264
  %2361 = fadd double %2342, %2360
  %2362 = load double, double* %86, align 1
  %2363 = fmul double %2362, %2361
  %2364 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2365 = fmul double %2309, %2364
  %2366 = inttoptr i64 %122 to double*
  %2367 = load double, double* %2366
  %2368 = bitcast double %2367 to i64
  %2369 = load i64, i64* %9, align 8
  %2370 = xor i64 %2369, %2368
  %2371 = bitcast i64 %2370 to double
  %2372 = inttoptr i64 %123 to double*
  %2373 = load double, double* %2372
  %2374 = fmul double %2371, %2373
  %2375 = inttoptr i64 %124 to double*
  %2376 = load double, double* %2375
  %2377 = fmul double %2374, %2376
  %2378 = load i64, i64* %8, align 8
  %2379 = add i64 %2319, %2378
  %2380 = add i64 %2326, %2379
  %2381 = add i64 %2331, %2380
  %2382 = add i64 %2381, 16
  %2383 = inttoptr i64 %2382 to double*
  %2384 = load double, double* %2383
  %2385 = fmul double %2377, %2384
  %2386 = fmul double %2365, %2385
  %2387 = fsub double %2363, %2386
  %2388 = sext i32 %2323 to i64
  %2389 = mul nsw i64 %2388, 2600
  %2390 = load i64, i64* %14, align 8
  %2391 = add i64 %2389, %2390
  %2392 = mul nsw i64 %2330, 200
  %2393 = add i64 %2392, %2391
  %2394 = add i64 %2393, 16
  %2395 = inttoptr i64 %2394 to double*
  store double %2387, double* %2395
  %2396 = load double, double* bitcast (%dt_type* @dt to double*)
  %2397 = bitcast double %2396 to i64
  %2398 = xor i64 %2369, %2397
  %2399 = bitcast i64 %2398 to double
  %2400 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2401 = fmul double %2399, %2400
  %2402 = inttoptr i64 %125 to i32*
  %2403 = load i32, i32* %2402
  %2404 = sext i32 %2403 to i64
  %2405 = mul nsw i64 %2404, 6760
  %2406 = add i64 %2405, %2378
  %2407 = inttoptr i64 %119 to i32*
  %2408 = load i32, i32* %2407
  %2409 = add i32 %2408, -1
  %2410 = sext i32 %2409 to i64
  %2411 = mul nsw i64 %2410, 520
  %2412 = add i64 %2411, %2406
  %2413 = inttoptr i64 %120 to i32*
  %2414 = load i32, i32* %2413
  %2415 = sext i32 %2414 to i64
  %2416 = mul nsw i64 %2415, 40
  %2417 = add i64 %2416, %2412
  %2418 = add i64 %2417, 8
  %2419 = inttoptr i64 %2418 to double*
  %2420 = load double, double* %2419
  %2421 = inttoptr i64 %126 to double*
  %2422 = load double, double* %2421
  %2423 = fmul double %2420, %2422
  %2424 = load <2 x i32>, <2 x i32>* %135, align 1
  %2425 = extractelement <2 x i32> %2424, i32 0
  store i32 %2425, i32* %100, align 1, !tbaa !1292
  %2426 = extractelement <2 x i32> %2424, i32 1
  store i32 %2426, i32* %102, align 1, !tbaa !1292
  %2427 = load double, double* %94, align 1
  %2428 = fmul double %2427, %2423
  %2429 = fmul double %2401, %2428
  %2430 = sext i32 %2408 to i64
  %2431 = mul nsw i64 %2430, 2600
  %2432 = add i64 %2431, %2390
  %2433 = mul nsw i64 %2415, 200
  %2434 = add i64 %2433, %2432
  %2435 = add i64 %2434, 56
  %2436 = inttoptr i64 %2435 to double*
  store double %2429, double* %2436
  %2437 = load double, double* bitcast (%dt_type* @dt to double*)
  %2438 = bitcast double %2437 to i64
  %2439 = load i64, i64* %9, align 8
  %2440 = xor i64 %2439, %2438
  %2441 = bitcast i64 %2440 to double
  %2442 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2443 = fmul double %2441, %2442
  %2444 = inttoptr i64 %125 to i32*
  %2445 = load i32, i32* %2444
  %2446 = sext i32 %2445 to i64
  %2447 = mul nsw i64 %2446, 6760
  %2448 = load i64, i64* %8, align 8
  %2449 = add i64 %2447, %2448
  %2450 = inttoptr i64 %119 to i32*
  %2451 = load i32, i32* %2450
  %2452 = add i32 %2451, -1
  %2453 = sext i32 %2452 to i64
  %2454 = mul nsw i64 %2453, 520
  %2455 = add i64 %2454, %2449
  %2456 = inttoptr i64 %120 to i32*
  %2457 = load i32, i32* %2456
  %2458 = sext i32 %2457 to i64
  %2459 = mul nsw i64 %2458, 40
  %2460 = add i64 %2459, %2455
  %2461 = add i64 %2460, 16
  %2462 = inttoptr i64 %2461 to double*
  %2463 = load double, double* %2462
  %2464 = inttoptr i64 %126 to double*
  %2465 = load double, double* %2464
  %2466 = fmul double %2463, %2465
  %2467 = load <2 x i32>, <2 x i32>* %142, align 1
  %2468 = extractelement <2 x i32> %2467, i32 0
  store i32 %2468, i32* %100, align 1, !tbaa !1292
  %2469 = extractelement <2 x i32> %2467, i32 1
  store i32 %2469, i32* %102, align 1, !tbaa !1292
  %2470 = load double, double* %94, align 1
  %2471 = fmul double %2470, %2466
  %2472 = fmul double %2443, %2471
  %2473 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2474 = fmul double %2437, %2473
  %2475 = inttoptr i64 %122 to double*
  %2476 = load double, double* %2475
  %2477 = inttoptr i64 %123 to double*
  %2478 = load double, double* %2477
  %2479 = fmul double %2476, %2478
  %2480 = fmul double %2479, %2465
  %2481 = fmul double %2474, %2480
  %2482 = fsub double %2472, %2481
  %2483 = load double, double* bitcast (%dy3_type* @dy3 to double*)
  %2484 = fmul double %2474, %2483
  %2485 = fsub double %2482, %2484
  %2486 = sext i32 %2451 to i64
  %2487 = mul nsw i64 %2486, 2600
  %2488 = load i64, i64* %14, align 8
  %2489 = add i64 %2487, %2488
  %2490 = mul nsw i64 %2458, 200
  %2491 = add i64 %2490, %2489
  %2492 = add i64 %2491, 96
  %2493 = inttoptr i64 %2492 to double*
  store double %2485, double* %2493
  %2494 = load double, double* bitcast (%dt_type* @dt to double*)
  %2495 = bitcast double %2494 to i64
  %2496 = load i64, i64* %9, align 8
  %2497 = xor i64 %2496, %2495
  %2498 = bitcast i64 %2497 to double
  %2499 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2500 = fmul double %2498, %2499
  %2501 = inttoptr i64 %125 to i32*
  %2502 = load i32, i32* %2501
  %2503 = sext i32 %2502 to i64
  %2504 = mul nsw i64 %2503, 6760
  %2505 = load i64, i64* %8, align 8
  %2506 = add i64 %2504, %2505
  %2507 = inttoptr i64 %119 to i32*
  %2508 = load i32, i32* %2507
  %2509 = add i32 %2508, -1
  %2510 = sext i32 %2509 to i64
  %2511 = mul nsw i64 %2510, 520
  %2512 = add i64 %2511, %2506
  %2513 = inttoptr i64 %120 to i32*
  %2514 = load i32, i32* %2513
  %2515 = sext i32 %2514 to i64
  %2516 = mul nsw i64 %2515, 40
  %2517 = add i64 %2516, %2512
  %2518 = add i64 %2517, 24
  %2519 = inttoptr i64 %2518 to double*
  %2520 = load double, double* %2519
  %2521 = inttoptr i64 %126 to double*
  %2522 = load double, double* %2521
  %2523 = fmul double %2520, %2522
  %2524 = load <2 x i32>, <2 x i32>* %135, align 1
  %2525 = extractelement <2 x i32> %2524, i32 0
  store i32 %2525, i32* %100, align 1, !tbaa !1292
  %2526 = extractelement <2 x i32> %2524, i32 1
  store i32 %2526, i32* %102, align 1, !tbaa !1292
  %2527 = load double, double* %94, align 1
  %2528 = fmul double %2527, %2523
  %2529 = fmul double %2500, %2528
  %2530 = sext i32 %2508 to i64
  %2531 = mul nsw i64 %2530, 2600
  %2532 = add i64 %2531, %2488
  %2533 = mul nsw i64 %2515, 200
  %2534 = add i64 %2533, %2532
  %2535 = add i64 %2534, 136
  %2536 = inttoptr i64 %2535 to double*
  store double %2529, double* %2536
  %2537 = load double, double* bitcast (%dt_type* @dt to double*)
  %2538 = bitcast double %2537 to i64
  %2539 = xor i64 %2496, %2538
  %2540 = bitcast i64 %2539 to double
  %2541 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2542 = fmul double %2540, %2541
  %2543 = load double, double* %51, align 1
  %2544 = fmul double %2542, %2543
  %2545 = inttoptr i64 %119 to i32*
  %2546 = load i32, i32* %2545
  %2547 = sext i32 %2546 to i64
  %2548 = mul nsw i64 %2547, 2600
  %2549 = load i64, i64* %14, align 8
  %2550 = add i64 %2548, %2549
  %2551 = inttoptr i64 %120 to i32*
  %2552 = load i32, i32* %2551
  %2553 = sext i32 %2552 to i64
  %2554 = mul nsw i64 %2553, 200
  %2555 = add i64 %2554, %2550
  %2556 = add i64 %2555, 176
  %2557 = inttoptr i64 %2556 to double*
  store double %2544, double* %2557
  %2558 = load double, double* bitcast (%dt_type* @dt to double*)
  %2559 = bitcast double %2558 to i64
  %2560 = load i64, i64* %9, align 8
  %2561 = xor i64 %2560, %2559
  %2562 = bitcast i64 %2561 to double
  %2563 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2564 = fmul double %2562, %2563
  %2565 = inttoptr i64 %125 to i32*
  %2566 = load i32, i32* %2565
  %2567 = sext i32 %2566 to i64
  %2568 = mul nsw i64 %2567, 6760
  %2569 = load i64, i64* %8, align 8
  %2570 = add i64 %2568, %2569
  %2571 = inttoptr i64 %119 to i32*
  %2572 = load i32, i32* %2571
  %2573 = add i32 %2572, -1
  %2574 = sext i32 %2573 to i64
  %2575 = mul nsw i64 %2574, 520
  %2576 = add i64 %2575, %2570
  %2577 = inttoptr i64 %120 to i32*
  %2578 = load i32, i32* %2577
  %2579 = sext i32 %2578 to i64
  %2580 = mul nsw i64 %2579, 40
  %2581 = add i64 %2580, %2576
  %2582 = add i64 %2581, 16
  %2583 = inttoptr i64 %2582 to double*
  %2584 = load double, double* %2583
  %2585 = add i64 %2581, 24
  %2586 = inttoptr i64 %2585 to double*
  %2587 = load double, double* %2586
  %2588 = fmul double %2584, %2587
  %2589 = bitcast double %2588 to i64
  %2590 = xor i64 %2560, %2589
  %2591 = bitcast i64 %2590 to double
  %2592 = inttoptr i64 %124 to double*
  %2593 = load double, double* %2592
  %2594 = fmul double %2591, %2593
  %2595 = fmul double %2594, %2564
  %2596 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2597 = fmul double %2558, %2596
  %2598 = inttoptr i64 %123 to double*
  %2599 = load double, double* %2598
  %2600 = bitcast double %2599 to i64
  %2601 = xor i64 %2560, %2600
  %2602 = bitcast i64 %2601 to double
  %2603 = fmul double %2602, %2593
  %2604 = fmul double %2603, %2587
  %2605 = fmul double %2597, %2604
  %2606 = fsub double %2595, %2605
  %2607 = sext i32 %2572 to i64
  %2608 = mul nsw i64 %2607, 2600
  %2609 = load i64, i64* %14, align 8
  %2610 = add i64 %2608, %2609
  %2611 = mul nsw i64 %2579, 200
  %2612 = add i64 %2611, %2610
  %2613 = add i64 %2612, 24
  %2614 = inttoptr i64 %2613 to double*
  store double %2606, double* %2614
  %2615 = inttoptr i64 %119 to i32*
  %2616 = load i32, i32* %2615
  %2617 = sext i32 %2616 to i64
  %2618 = mul nsw i64 %2617, 2600
  %2619 = add i64 %2618, %2609
  %2620 = inttoptr i64 %120 to i32*
  %2621 = load i32, i32* %2620
  %2622 = sext i32 %2621 to i64
  %2623 = mul nsw i64 %2622, 200
  %2624 = add i64 %2623, %2619
  %2625 = add i64 %2624, 64
  %2626 = load double, double* %121, align 1
  %2627 = inttoptr i64 %2625 to double*
  store double %2626, double* %2627
  %2628 = load double, double* bitcast (%dt_type* @dt to double*)
  %2629 = bitcast double %2628 to i64
  %2630 = load i64, i64* %9, align 8
  %2631 = xor i64 %2630, %2629
  %2632 = bitcast i64 %2631 to double
  %2633 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2634 = fmul double %2632, %2633
  %2635 = inttoptr i64 %125 to i32*
  %2636 = load i32, i32* %2635
  %2637 = sext i32 %2636 to i64
  %2638 = mul nsw i64 %2637, 6760
  %2639 = load i64, i64* %8, align 8
  %2640 = add i64 %2638, %2639
  %2641 = inttoptr i64 %119 to i32*
  %2642 = load i32, i32* %2641
  %2643 = add i32 %2642, -1
  %2644 = sext i32 %2643 to i64
  %2645 = mul nsw i64 %2644, 520
  %2646 = add i64 %2645, %2640
  %2647 = inttoptr i64 %120 to i32*
  %2648 = load i32, i32* %2647
  %2649 = sext i32 %2648 to i64
  %2650 = mul nsw i64 %2649, 40
  %2651 = add i64 %2650, %2646
  %2652 = add i64 %2651, 24
  %2653 = inttoptr i64 %2652 to double*
  %2654 = load double, double* %2653
  %2655 = inttoptr i64 %126 to double*
  %2656 = load double, double* %2655
  %2657 = fmul double %2654, %2656
  %2658 = fmul double %2657, %2634
  %2659 = sext i32 %2642 to i64
  %2660 = mul nsw i64 %2659, 2600
  %2661 = add i64 %2660, %2609
  %2662 = mul nsw i64 %2649, 200
  %2663 = add i64 %2662, %2661
  %2664 = add i64 %2663, 104
  %2665 = inttoptr i64 %2664 to double*
  store double %2658, double* %2665
  %2666 = load double, double* bitcast (%dt_type* @dt to double*)
  %2667 = bitcast double %2666 to i64
  %2668 = xor i64 %2630, %2667
  %2669 = bitcast i64 %2668 to double
  %2670 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2671 = fmul double %2669, %2670
  %2672 = inttoptr i64 %125 to i32*
  %2673 = load i32, i32* %2672
  %2674 = sext i32 %2673 to i64
  %2675 = mul nsw i64 %2674, 6760
  %2676 = add i64 %2675, %2639
  %2677 = inttoptr i64 %119 to i32*
  %2678 = load i32, i32* %2677
  %2679 = add i32 %2678, -1
  %2680 = sext i32 %2679 to i64
  %2681 = mul nsw i64 %2680, 520
  %2682 = add i64 %2681, %2676
  %2683 = inttoptr i64 %120 to i32*
  %2684 = load i32, i32* %2683
  %2685 = sext i32 %2684 to i64
  %2686 = mul nsw i64 %2685, 40
  %2687 = add i64 %2686, %2682
  %2688 = add i64 %2687, 16
  %2689 = inttoptr i64 %2688 to double*
  %2690 = load double, double* %2689
  %2691 = inttoptr i64 %126 to double*
  %2692 = load double, double* %2691
  %2693 = fmul double %2690, %2692
  %2694 = fmul double %2693, %2671
  %2695 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2696 = fmul double %2666, %2695
  %2697 = inttoptr i64 %123 to double*
  %2698 = load double, double* %2697
  %2699 = fmul double %2698, %2692
  %2700 = fmul double %2699, %2696
  %2701 = fsub double %2694, %2700
  %2702 = load double, double* bitcast (%dy4_type* @dy4 to double*)
  %2703 = fmul double %2696, %2702
  %2704 = fsub double %2701, %2703
  %2705 = sext i32 %2678 to i64
  %2706 = mul nsw i64 %2705, 2600
  %2707 = load i64, i64* %14, align 8
  %2708 = add i64 %2706, %2707
  %2709 = mul nsw i64 %2685, 200
  %2710 = add i64 %2709, %2708
  %2711 = add i64 %2710, 144
  %2712 = inttoptr i64 %2711 to double*
  store double %2704, double* %2712
  %2713 = inttoptr i64 %119 to i32*
  %2714 = load i32, i32* %2713
  %2715 = sext i32 %2714 to i64
  %2716 = mul nsw i64 %2715, 2600
  %2717 = add i64 %2716, %2707
  %2718 = inttoptr i64 %120 to i32*
  %2719 = load i32, i32* %2718
  %2720 = sext i32 %2719 to i64
  %2721 = mul nsw i64 %2720, 200
  %2722 = add i64 %2721, %2717
  %2723 = add i64 %2722, 184
  %2724 = load double, double* %121, align 1
  %2725 = inttoptr i64 %2723 to double*
  store double %2724, double* %2725
  %2726 = load double, double* bitcast (%dt_type* @dt to double*)
  %2727 = bitcast double %2726 to i64
  %2728 = load i64, i64* %9, align 8
  %2729 = xor i64 %2728, %2727
  %2730 = bitcast i64 %2729 to double
  %2731 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2732 = fmul double %2730, %2731
  store double %2732, double* %86, align 1, !tbaa !1264
  store i64 0, i64* %87, align 1, !tbaa !1264
  %2733 = inttoptr i64 %125 to i32*
  %2734 = load i32, i32* %2733
  %2735 = sext i32 %2734 to i64
  %2736 = mul nsw i64 %2735, 1352
  %2737 = load i64, i64* %10, align 8
  %2738 = add i64 %2736, %2737
  %2739 = inttoptr i64 %119 to i32*
  %2740 = load i32, i32* %2739
  %2741 = add i32 %2740, -1
  %2742 = sext i32 %2741 to i64
  %2743 = mul nsw i64 %2742, 104
  %2744 = add i64 %2743, %2738
  %2745 = inttoptr i64 %120 to i32*
  %2746 = load i32, i32* %2745
  %2747 = sext i32 %2746 to i64
  %2748 = load <2 x i32>, <2 x i32>* %136, align 1
  %2749 = extractelement <2 x i32> %2748, i32 0
  store i32 %2749, i32* %137, align 1, !tbaa !1292
  %2750 = extractelement <2 x i32> %2748, i32 1
  store i32 %2750, i32* %139, align 1, !tbaa !1292
  %2751 = shl nsw i64 %2747, 3
  %2752 = add i64 %2751, %2744
  %2753 = load double, double* %90, align 1
  %2754 = inttoptr i64 %2752 to double*
  %2755 = load double, double* %2754
  %2756 = fmul double %2753, %2755
  %2757 = mul nsw i64 %2735, 6760
  %2758 = load i64, i64* %8, align 8
  %2759 = add i64 %2757, %2758
  %2760 = mul nsw i64 %2742, 520
  %2761 = add i64 %2760, %2759
  %2762 = mul nsw i64 %2747, 40
  %2763 = add i64 %2762, %2761
  %2764 = load <2 x i32>, <2 x i32>* %140, align 1
  %2765 = extractelement <2 x i32> %2764, i32 0
  store i32 %2765, i32* %100, align 1, !tbaa !1292
  %2766 = extractelement <2 x i32> %2764, i32 1
  store i32 %2766, i32* %102, align 1, !tbaa !1292
  %2767 = add i64 %2763, 32
  %2768 = load double, double* %94, align 1
  %2769 = inttoptr i64 %2767 to double*
  %2770 = load double, double* %2769
  %2771 = fmul double %2768, %2770
  %2772 = fsub double %2756, %2771
  %2773 = add i64 %2763, 16
  %2774 = inttoptr i64 %2773 to double*
  %2775 = load double, double* %2774
  %2776 = inttoptr i64 %124 to double*
  %2777 = load double, double* %2776
  %2778 = fmul double %2775, %2777
  %2779 = fmul double %2778, %2772
  %2780 = load double, double* %86, align 1
  %2781 = fmul double %2779, %2780
  store double %2781, double* %86, align 1, !tbaa !1264
  %2782 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2783 = fmul double %2726, %2782
  store double %2783, double* %90, align 1, !tbaa !1264
  %2784 = inttoptr i64 %123 to double*
  %2785 = load double, double* %2784
  %2786 = inttoptr i64 %129 to double*
  %2787 = load double, double* %2786
  %2788 = fsub double %2785, %2787
  %2789 = bitcast double %2788 to i64
  %2790 = load i64, i64* %9, align 8
  %2791 = xor i64 %2790, %2789
  %2792 = bitcast i64 %2791 to double
  %2793 = inttoptr i64 %132 to double*
  %2794 = load double, double* %2793
  %2795 = fmul double %2792, %2794
  %2796 = add i64 %2763, 8
  %2797 = inttoptr i64 %2796 to double*
  %2798 = load double, double* %2797
  %2799 = load i64, i64* %8, align 8
  %2800 = add i64 %2757, %2799
  %2801 = add i64 %2760, %2800
  %2802 = add i64 %2762, %2801
  %2803 = add i64 %2802, 8
  %2804 = inttoptr i64 %2803 to double*
  %2805 = load double, double* %2804
  %2806 = fmul double %2798, %2805
  %2807 = fmul double %2795, %2806
  %2808 = inttoptr i64 %122 to double*
  %2809 = load double, double* %2808
  %2810 = fmul double %2809, %2785
  %2811 = fsub double %2810, %2787
  %2812 = fmul double %2811, %2794
  %2813 = add i64 %2802, 16
  %2814 = inttoptr i64 %2813 to double*
  %2815 = load double, double* %2814
  %2816 = fmul double %2815, %2815
  %2817 = fmul double %2812, %2816
  %2818 = fsub double %2807, %2817
  %2819 = fmul double %2788, %2794
  %2820 = add i64 %2802, 24
  %2821 = inttoptr i64 %2820 to double*
  %2822 = load double, double* %2821
  %2823 = fmul double %2822, %2822
  store double %2823, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %2824 = fmul double %2819, %2823
  %2825 = fsub double %2818, %2824
  %2826 = fmul double %2787, %2777
  %2827 = load i64, i64* %8, align 8
  %2828 = add i64 %2757, %2827
  %2829 = add i64 %2760, %2828
  %2830 = add i64 %2762, %2829
  %2831 = add i64 %2830, 32
  %2832 = inttoptr i64 %2831 to double*
  %2833 = load double, double* %2832
  %2834 = fmul double %2826, %2833
  store double %2834, double* %107, align 1, !tbaa !1264
  store i64 0, i64* %108, align 1, !tbaa !1264
  %2835 = fsub double %2825, %2834
  %2836 = load double, double* %90, align 1
  %2837 = fmul double %2836, %2835
  %2838 = load double, double* %86, align 1
  %2839 = fsub double %2838, %2837
  %2840 = sext i32 %2740 to i64
  %2841 = mul nsw i64 %2840, 2600
  %2842 = load i64, i64* %14, align 8
  %2843 = add i64 %2841, %2842
  %2844 = mul nsw i64 %2747, 200
  %2845 = add i64 %2844, %2843
  %2846 = add i64 %2845, 32
  %2847 = inttoptr i64 %2846 to double*
  store double %2839, double* %2847
  %2848 = load double, double* bitcast (%dt_type* @dt to double*)
  %2849 = bitcast double %2848 to i64
  %2850 = load i64, i64* %9, align 8
  %2851 = xor i64 %2850, %2849
  %2852 = bitcast i64 %2851 to double
  %2853 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2854 = fmul double %2852, %2853
  %2855 = inttoptr i64 %125 to i32*
  %2856 = load i32, i32* %2855
  %2857 = sext i32 %2856 to i64
  %2858 = mul nsw i64 %2857, 6760
  %2859 = add i64 %2858, %2827
  %2860 = inttoptr i64 %119 to i32*
  %2861 = load i32, i32* %2860
  %2862 = add i32 %2861, -1
  %2863 = sext i32 %2862 to i64
  %2864 = mul nsw i64 %2863, 520
  %2865 = add i64 %2864, %2859
  %2866 = inttoptr i64 %120 to i32*
  %2867 = load i32, i32* %2866
  %2868 = sext i32 %2867 to i64
  %2869 = mul nsw i64 %2868, 40
  %2870 = add i64 %2869, %2865
  %2871 = add i64 %2870, 8
  %2872 = inttoptr i64 %2871 to double*
  %2873 = load double, double* %2872
  %2874 = add i64 %2870, 16
  %2875 = inttoptr i64 %2874 to double*
  %2876 = load double, double* %2875
  %2877 = fmul double %2873, %2876
  %2878 = load <2 x i32>, <2 x i32>* %135, align 1
  %2879 = extractelement <2 x i32> %2878, i32 0
  store i32 %2879, i32* %100, align 1, !tbaa !1292
  %2880 = extractelement <2 x i32> %2878, i32 1
  store i32 %2880, i32* %102, align 1, !tbaa !1292
  %2881 = load double, double* %94, align 1
  %2882 = fmul double %2881, %2877
  %2883 = inttoptr i64 %124 to double*
  %2884 = load double, double* %2883
  %2885 = fmul double %2882, %2884
  %2886 = fmul double %2854, %2885
  %2887 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2888 = fmul double %2848, %2887
  %2889 = inttoptr i64 %123 to double*
  %2890 = load double, double* %2889
  %2891 = inttoptr i64 %129 to double*
  %2892 = load double, double* %2891
  %2893 = fsub double %2890, %2892
  %2894 = fmul double %2893, %2888
  %2895 = fmul double %2894, %2884
  %2896 = load i64, i64* %8, align 8
  %2897 = add i64 %2858, %2896
  %2898 = add i64 %2864, %2897
  %2899 = add i64 %2869, %2898
  %2900 = add i64 %2899, 8
  %2901 = inttoptr i64 %2900 to double*
  %2902 = load double, double* %2901
  %2903 = fmul double %2895, %2902
  %2904 = fsub double %2886, %2903
  %2905 = sext i32 %2861 to i64
  %2906 = mul nsw i64 %2905, 2600
  %2907 = load i64, i64* %14, align 8
  %2908 = add i64 %2906, %2907
  %2909 = mul nsw i64 %2868, 200
  %2910 = add i64 %2909, %2908
  %2911 = add i64 %2910, 72
  %2912 = inttoptr i64 %2911 to double*
  store double %2904, double* %2912
  %2913 = load double, double* bitcast (%dt_type* @dt to double*)
  %2914 = bitcast double %2913 to i64
  %2915 = load i64, i64* %9, align 8
  %2916 = xor i64 %2915, %2914
  %2917 = bitcast i64 %2916 to double
  %2918 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2919 = fmul double %2917, %2918
  store double %2919, double* %86, align 1, !tbaa !1264
  %2920 = inttoptr i64 %125 to i32*
  %2921 = load i32, i32* %2920
  %2922 = sext i32 %2921 to i64
  %2923 = mul nsw i64 %2922, 6760
  %2924 = add i64 %2923, %2896
  %2925 = inttoptr i64 %119 to i32*
  %2926 = load i32, i32* %2925
  %2927 = add i32 %2926, -1
  %2928 = sext i32 %2927 to i64
  %2929 = mul nsw i64 %2928, 520
  %2930 = add i64 %2929, %2924
  %2931 = inttoptr i64 %120 to i32*
  %2932 = load i32, i32* %2931
  %2933 = sext i32 %2932 to i64
  %2934 = mul nsw i64 %2933, 40
  %2935 = add i64 %2934, %2930
  %2936 = add i64 %2935, 32
  %2937 = inttoptr i64 %2936 to double*
  %2938 = load double, double* %2937
  %2939 = inttoptr i64 %126 to double*
  %2940 = load double, double* %2939
  %2941 = fmul double %2938, %2940
  %2942 = load <2 x i32>, <2 x i32>* %140, align 1
  %2943 = extractelement <2 x i32> %2942, i32 0
  store i32 %2943, i32* %100, align 1, !tbaa !1292
  %2944 = extractelement <2 x i32> %2942, i32 1
  store i32 %2944, i32* %102, align 1, !tbaa !1292
  %2945 = load double, double* %94, align 1
  %2946 = fmul double %2945, %2941
  %2947 = mul nsw i64 %2922, 1352
  %2948 = load i64, i64* %10, align 8
  %2949 = add i64 %2947, %2948
  %2950 = mul nsw i64 %2928, 104
  %2951 = add i64 %2950, %2949
  %2952 = shl nsw i64 %2933, 3
  %2953 = add i64 %2952, %2951
  %2954 = inttoptr i64 %2953 to double*
  %2955 = load double, double* %2954
  %2956 = fmul double %2955, %2940
  %2957 = load i64, i64* %8, align 8
  %2958 = add i64 %2923, %2957
  %2959 = add i64 %2929, %2958
  %2960 = add i64 %2934, %2959
  %2961 = add i64 %2960, 16
  %2962 = inttoptr i64 %2961 to double*
  %2963 = load double, double* %2962
  %2964 = fmul double %2963, %2963
  %2965 = inttoptr i64 %124 to double*
  %2966 = load double, double* %2965
  %2967 = fmul double %2964, %2966
  %2968 = fadd double %2956, %2967
  %2969 = load <2 x i32>, <2 x i32>* %133, align 1
  %2970 = load <2 x i32>, <2 x i32>* %134, align 1
  %2971 = extractelement <2 x i32> %2969, i32 0
  store i32 %2971, i32* %112, align 1, !tbaa !1292
  %2972 = extractelement <2 x i32> %2969, i32 1
  store i32 %2972, i32* %114, align 1, !tbaa !1292
  %2973 = extractelement <2 x i32> %2970, i32 0
  store i32 %2973, i32* %115, align 1, !tbaa !1292
  %2974 = extractelement <2 x i32> %2970, i32 1
  store i32 %2974, i32* %117, align 1, !tbaa !1292
  %2975 = load double, double* %107, align 1
  %2976 = fmul double %2975, %2968
  store double %2976, double* %107, align 1, !tbaa !1264
  %2977 = fsub double %2946, %2976
  %2978 = load double, double* %86, align 1
  %2979 = fmul double %2978, %2977
  %2980 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2981 = fmul double %2913, %2980
  %2982 = inttoptr i64 %122 to double*
  %2983 = load double, double* %2982
  %2984 = inttoptr i64 %123 to double*
  %2985 = load double, double* %2984
  %2986 = fmul double %2983, %2985
  %2987 = inttoptr i64 %129 to double*
  %2988 = load double, double* %2987
  %2989 = fsub double %2986, %2988
  %2990 = fmul double %2981, %2989
  %2991 = fmul double %2990, %2966
  %2992 = fmul double %2991, %2963
  %2993 = fsub double %2979, %2992
  %2994 = sext i32 %2926 to i64
  %2995 = mul nsw i64 %2994, 2600
  %2996 = load i64, i64* %14, align 8
  %2997 = add i64 %2995, %2996
  %2998 = mul nsw i64 %2933, 200
  %2999 = add i64 %2998, %2997
  %3000 = add i64 %2999, 112
  %3001 = inttoptr i64 %3000 to double*
  store double %2993, double* %3001
  %3002 = load double, double* bitcast (%dt_type* @dt to double*)
  %3003 = bitcast double %3002 to i64
  %3004 = load i64, i64* %9, align 8
  %3005 = xor i64 %3004, %3003
  %3006 = bitcast i64 %3005 to double
  %3007 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %3008 = fmul double %3006, %3007
  %3009 = inttoptr i64 %125 to i32*
  %3010 = load i32, i32* %3009
  %3011 = sext i32 %3010 to i64
  %3012 = mul nsw i64 %3011, 6760
  %3013 = load i64, i64* %8, align 8
  %3014 = add i64 %3012, %3013
  %3015 = inttoptr i64 %119 to i32*
  %3016 = load i32, i32* %3015
  %3017 = add i32 %3016, -1
  %3018 = sext i32 %3017 to i64
  %3019 = mul nsw i64 %3018, 520
  %3020 = add i64 %3019, %3014
  %3021 = inttoptr i64 %120 to i32*
  %3022 = load i32, i32* %3021
  %3023 = sext i32 %3022 to i64
  %3024 = mul nsw i64 %3023, 40
  %3025 = add i64 %3024, %3020
  %3026 = add i64 %3025, 16
  %3027 = inttoptr i64 %3026 to double*
  %3028 = load double, double* %3027
  %3029 = add i64 %3025, 24
  %3030 = inttoptr i64 %3029 to double*
  %3031 = load double, double* %3030
  %3032 = fmul double %3028, %3031
  %3033 = load <2 x i32>, <2 x i32>* %135, align 1
  %3034 = extractelement <2 x i32> %3033, i32 0
  store i32 %3034, i32* %100, align 1, !tbaa !1292
  %3035 = extractelement <2 x i32> %3033, i32 1
  store i32 %3035, i32* %102, align 1, !tbaa !1292
  %3036 = load double, double* %94, align 1
  %3037 = fmul double %3036, %3032
  %3038 = inttoptr i64 %124 to double*
  %3039 = load double, double* %3038
  %3040 = fmul double %3037, %3039
  %3041 = fmul double %3008, %3040
  %3042 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %3043 = fmul double %3002, %3042
  %3044 = inttoptr i64 %123 to double*
  %3045 = load double, double* %3044
  %3046 = inttoptr i64 %129 to double*
  %3047 = load double, double* %3046
  %3048 = fsub double %3045, %3047
  %3049 = fmul double %3048, %3043
  %3050 = fmul double %3049, %3039
  %3051 = fmul double %3050, %3031
  %3052 = fsub double %3041, %3051
  %3053 = sext i32 %3016 to i64
  %3054 = mul nsw i64 %3053, 2600
  %3055 = load i64, i64* %14, align 8
  %3056 = add i64 %3054, %3055
  %3057 = mul nsw i64 %3023, 200
  %3058 = add i64 %3057, %3056
  %3059 = add i64 %3058, 152
  %3060 = inttoptr i64 %3059 to double*
  store double %3052, double* %3060
  %3061 = load double, double* bitcast (%dt_type* @dt to double*)
  %3062 = bitcast double %3061 to i64
  %3063 = load i64, i64* %9, align 8
  %3064 = xor i64 %3063, %3062
  %3065 = bitcast i64 %3064 to double
  %3066 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %3067 = fmul double %3065, %3066
  %3068 = inttoptr i64 %125 to i32*
  %3069 = load i32, i32* %3068
  %3070 = sext i32 %3069 to i64
  %3071 = mul nsw i64 %3070, 6760
  %3072 = load i64, i64* %8, align 8
  %3073 = add i64 %3071, %3072
  %3074 = inttoptr i64 %119 to i32*
  %3075 = load i32, i32* %3074
  %3076 = add i32 %3075, -1
  %3077 = sext i32 %3076 to i64
  %3078 = mul nsw i64 %3077, 520
  %3079 = add i64 %3078, %3073
  %3080 = inttoptr i64 %120 to i32*
  %3081 = load i32, i32* %3080
  %3082 = sext i32 %3081 to i64
  %3083 = mul nsw i64 %3082, 40
  %3084 = add i64 %3083, %3079
  store i64 %3084, i64* %16, align 8, !tbaa !1240
  %3085 = add i64 %3084, 16
  %3086 = inttoptr i64 %3085 to double*
  %3087 = load double, double* %3086
  %3088 = inttoptr i64 %126 to double*
  %3089 = load double, double* %3088
  %3090 = fmul double %3087, %3089
  %3091 = load <2 x i32>, <2 x i32>* %140, align 1
  %3092 = load <2 x i32>, <2 x i32>* %141, align 1
  %3093 = extractelement <2 x i32> %3091, i32 0
  store i32 %3093, i32* %100, align 1, !tbaa !1292
  %3094 = extractelement <2 x i32> %3091, i32 1
  store i32 %3094, i32* %102, align 1, !tbaa !1292
  %3095 = extractelement <2 x i32> %3092, i32 0
  store i32 %3095, i32* %103, align 1, !tbaa !1292
  %3096 = extractelement <2 x i32> %3092, i32 1
  store i32 %3096, i32* %105, align 1, !tbaa !1292
  %3097 = load double, double* %94, align 1
  %3098 = fmul double %3097, %3090
  store double %3098, double* %94, align 1, !tbaa !1264
  %3099 = fmul double %3067, %3098
  %3100 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %3101 = fmul double %3061, %3100
  %3102 = inttoptr i64 %129 to double*
  %3103 = load double, double* %3102
  %3104 = fmul double %3101, %3103
  %3105 = fmul double %3104, %3089
  %3106 = fsub double %3099, %3105
  %3107 = load double, double* bitcast (%dy5_type* @dy5 to double*)
  %3108 = fmul double %3101, %3107
  store double %3108, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %3109 = fsub double %3106, %3108
  %3110 = sext i32 %3075 to i64
  %3111 = mul nsw i64 %3110, 2600
  %3112 = load i64, i64* %14, align 8
  %3113 = add i64 %3111, %3112
  %3114 = mul nsw i64 %3082, 200
  store i64 %3114, i64* %15, align 8, !tbaa !1240
  %3115 = add i64 %3114, %3113
  %3116 = add i64 %3115, 192
  %3117 = inttoptr i64 %3116 to double*
  store double %3109, double* %3117
  %3118 = inttoptr i64 %125 to i32*
  %3119 = load i32, i32* %3118
  %3120 = sext i32 %3119 to i64
  %3121 = mul nsw i64 %3120, 1352
  %3122 = load i64, i64* %11, align 8
  %3123 = add i64 %3121, %3122
  %3124 = inttoptr i64 %119 to i32*
  %3125 = load i32, i32* %3124
  %3126 = sext i32 %3125 to i64
  %3127 = mul nsw i64 %3126, 104
  %3128 = add i64 %3127, %3123
  %3129 = inttoptr i64 %120 to i32*
  %3130 = load i32, i32* %3129
  %3131 = add i32 %3130, -1
  %3132 = sext i32 %3131 to i64
  %3133 = shl nsw i64 %3132, 3
  %3134 = add i64 %3128, %3133
  %3135 = inttoptr i64 %3134 to double*
  %3136 = load double, double* %3135
  %3137 = inttoptr i64 %126 to double*
  store double %3136, double* %3137
  %3138 = inttoptr i64 %126 to double*
  %3139 = load double, double* %3138
  %3140 = fmul double %3139, %3139
  %3141 = inttoptr i64 %124 to double*
  store double %3140, double* %3141
  %3142 = inttoptr i64 %126 to double*
  %3143 = load double, double* %3142
  %3144 = inttoptr i64 %124 to double*
  %3145 = load double, double* %3144
  %3146 = fmul double %3143, %3145
  %3147 = inttoptr i64 %132 to double*
  store double %3146, double* %3147
  %3148 = load double, double* bitcast (%dt_type* @dt to double*)
  %3149 = bitcast double %3148 to i64
  %3150 = load i64, i64* %9, align 8
  %3151 = xor i64 %3150, %3149
  %3152 = bitcast i64 %3151 to double
  %3153 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3154 = fmul double %3152, %3153
  %3155 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  %3156 = fmul double %3154, %3155
  %3157 = inttoptr i64 %119 to i32*
  %3158 = load i32, i32* %3157
  %3159 = sext i32 %3158 to i64
  %3160 = mul nsw i64 %3159, 2600
  %3161 = add i64 %3160, ptrtoint (%c_type* @c to i64)
  %3162 = inttoptr i64 %120 to i32*
  %3163 = load i32, i32* %3162
  %3164 = sext i32 %3163 to i64
  %3165 = mul nsw i64 %3164, 200
  %3166 = add i64 %3165, %3161
  %3167 = inttoptr i64 %3166 to double*
  store double %3156, double* %3167
  %3168 = load double, double* bitcast (%dt_type* @dt to double*)
  %3169 = bitcast double %3168 to i64
  %3170 = xor i64 %3150, %3169
  %3171 = bitcast i64 %3170 to double
  %3172 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3173 = fmul double %3171, %3172
  %3174 = inttoptr i64 %119 to i32*
  %3175 = load i32, i32* %3174
  %3176 = sext i32 %3175 to i64
  %3177 = mul nsw i64 %3176, 2600
  %3178 = add i64 %3177, ptrtoint (%c_type* @c to i64)
  %3179 = inttoptr i64 %120 to i32*
  %3180 = load i32, i32* %3179
  %3181 = sext i32 %3180 to i64
  %3182 = mul nsw i64 %3181, 200
  %3183 = add i64 %3182, %3178
  %3184 = add i64 %3183, 40
  %3185 = inttoptr i64 %3184 to double*
  store double %3173, double* %3185
  %3186 = inttoptr i64 %119 to i32*
  %3187 = load i32, i32* %3186
  %3188 = sext i32 %3187 to i64
  %3189 = mul nsw i64 %3188, 2600
  %3190 = add i64 %3189, ptrtoint (%c_type* @c to i64)
  %3191 = inttoptr i64 %120 to i32*
  %3192 = load i32, i32* %3191
  %3193 = sext i32 %3192 to i64
  %3194 = mul nsw i64 %3193, 200
  %3195 = add i64 %3194, %3190
  %3196 = add i64 %3195, 80
  %3197 = load double, double* %121, align 1
  %3198 = inttoptr i64 %3196 to double*
  store double %3197, double* %3198
  %3199 = inttoptr i64 %119 to i32*
  %3200 = load i32, i32* %3199
  %3201 = sext i32 %3200 to i64
  %3202 = mul nsw i64 %3201, 2600
  %3203 = add i64 %3202, ptrtoint (%c_type* @c to i64)
  %3204 = inttoptr i64 %120 to i32*
  %3205 = load i32, i32* %3204
  %3206 = sext i32 %3205 to i64
  %3207 = mul nsw i64 %3206, 200
  %3208 = add i64 %3207, %3203
  %3209 = add i64 %3208, 120
  %3210 = inttoptr i64 %3209 to double*
  store double %3197, double* %3210
  %3211 = inttoptr i64 %119 to i32*
  %3212 = load i32, i32* %3211
  %3213 = sext i32 %3212 to i64
  %3214 = mul nsw i64 %3213, 2600
  %3215 = add i64 %3214, ptrtoint (%c_type* @c to i64)
  %3216 = inttoptr i64 %120 to i32*
  %3217 = load i32, i32* %3216
  %3218 = sext i32 %3217 to i64
  %3219 = mul nsw i64 %3218, 200
  %3220 = add i64 %3219, %3215
  %3221 = add i64 %3220, 160
  %3222 = inttoptr i64 %3221 to double*
  store double %3197, double* %3222
  %3223 = load double, double* bitcast (%dt_type* @dt to double*)
  %3224 = bitcast double %3223 to i64
  %3225 = load i64, i64* %9, align 8
  %3226 = xor i64 %3225, %3224
  %3227 = bitcast i64 %3226 to double
  %3228 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3229 = fmul double %3227, %3228
  %3230 = inttoptr i64 %125 to i32*
  %3231 = load i32, i32* %3230
  %3232 = sext i32 %3231 to i64
  %3233 = mul nsw i64 %3232, 6760
  %3234 = load i64, i64* %8, align 8
  %3235 = add i64 %3233, %3234
  %3236 = inttoptr i64 %119 to i32*
  %3237 = load i32, i32* %3236
  %3238 = sext i32 %3237 to i64
  %3239 = mul nsw i64 %3238, 520
  %3240 = add i64 %3239, %3235
  %3241 = inttoptr i64 %120 to i32*
  %3242 = load i32, i32* %3241
  %3243 = add i32 %3242, -1
  %3244 = sext i32 %3243 to i64
  %3245 = mul nsw i64 %3244, 40
  %3246 = add i64 %3245, %3240
  %3247 = add i64 %3246, 8
  %3248 = inttoptr i64 %3247 to double*
  %3249 = load double, double* %3248
  %3250 = inttoptr i64 %126 to double*
  %3251 = load double, double* %3250
  %3252 = fmul double %3249, %3251
  %3253 = bitcast double %3252 to i64
  %3254 = xor i64 %3225, %3253
  %3255 = bitcast i64 %3254 to double
  %3256 = fmul double %3252, %3255
  %3257 = mul nsw i64 %3232, 1352
  %3258 = load i64, i64* %10, align 8
  %3259 = add i64 %3257, %3258
  %3260 = mul nsw i64 %3238, 104
  %3261 = add i64 %3260, %3259
  %3262 = load <2 x i32>, <2 x i32>* %133, align 1
  %3263 = extractelement <2 x i32> %3262, i32 0
  store i32 %3263, i32* %100, align 1, !tbaa !1292
  %3264 = extractelement <2 x i32> %3262, i32 1
  store i32 %3264, i32* %102, align 1, !tbaa !1292
  %3265 = shl nsw i64 %3244, 3
  %3266 = add i64 %3265, %3261
  %3267 = load double, double* %94, align 1
  %3268 = inttoptr i64 %3266 to double*
  %3269 = load double, double* %3268
  %3270 = fmul double %3267, %3269
  %3271 = fmul double %3270, %3251
  %3272 = fadd double %3256, %3271
  %3273 = fmul double %3229, %3272
  %3274 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3275 = fmul double %3223, %3274
  %3276 = inttoptr i64 %122 to double*
  %3277 = load double, double* %3276
  %3278 = bitcast double %3277 to i64
  %3279 = load i64, i64* %9, align 8
  %3280 = xor i64 %3279, %3278
  %3281 = bitcast i64 %3280 to double
  %3282 = inttoptr i64 %123 to double*
  %3283 = load double, double* %3282
  %3284 = fmul double %3281, %3283
  %3285 = inttoptr i64 %124 to double*
  %3286 = load double, double* %3285
  %3287 = fmul double %3284, %3286
  %3288 = load i64, i64* %8, align 8
  %3289 = add i64 %3233, %3288
  %3290 = add i64 %3239, %3289
  %3291 = add i64 %3245, %3290
  %3292 = add i64 %3291, 8
  %3293 = inttoptr i64 %3292 to double*
  %3294 = load double, double* %3293
  %3295 = fmul double %3287, %3294
  store double %3295, double* %94, align 1, !tbaa !1264
  store i64 0, i64* %95, align 1, !tbaa !1264
  %3296 = fmul double %3275, %3295
  %3297 = fsub double %3273, %3296
  %3298 = mul nsw i64 %3238, 2600
  %3299 = add i64 %3298, ptrtoint (%c_type* @c to i64)
  %3300 = sext i32 %3242 to i64
  %3301 = mul nsw i64 %3300, 200
  %3302 = add i64 %3301, %3299
  %3303 = add i64 %3302, 8
  %3304 = inttoptr i64 %3303 to double*
  store double %3297, double* %3304
  %3305 = load double, double* bitcast (%dt_type* @dt to double*)
  %3306 = bitcast double %3305 to i64
  %3307 = xor i64 %3279, %3306
  %3308 = bitcast i64 %3307 to double
  %3309 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3310 = fmul double %3308, %3309
  %3311 = inttoptr i64 %125 to i32*
  %3312 = load i32, i32* %3311
  %3313 = sext i32 %3312 to i64
  %3314 = mul nsw i64 %3313, 6760
  %3315 = add i64 %3314, %3288
  %3316 = inttoptr i64 %119 to i32*
  %3317 = load i32, i32* %3316
  %3318 = sext i32 %3317 to i64
  %3319 = mul nsw i64 %3318, 520
  %3320 = add i64 %3319, %3315
  %3321 = inttoptr i64 %120 to i32*
  %3322 = load i32, i32* %3321
  %3323 = add i32 %3322, -1
  %3324 = sext i32 %3323 to i64
  %3325 = mul nsw i64 %3324, 40
  %3326 = add i64 %3325, %3320
  %3327 = add i64 %3326, 8
  %3328 = inttoptr i64 %3327 to double*
  %3329 = load double, double* %3328
  %3330 = inttoptr i64 %126 to double*
  %3331 = load double, double* %3330
  %3332 = fmul double %3329, %3331
  %3333 = load double, double* %83, align 1
  %3334 = fmul double %3332, %3333
  %3335 = fmul double %3334, %3310
  %3336 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3337 = fmul double %3305, %3336
  %3338 = inttoptr i64 %122 to double*
  %3339 = load double, double* %3338
  %3340 = inttoptr i64 %123 to double*
  %3341 = load double, double* %3340
  %3342 = fmul double %3339, %3341
  %3343 = fmul double %3342, %3331
  %3344 = fmul double %3337, %3343
  %3345 = fsub double %3335, %3344
  %3346 = load double, double* bitcast (%dx2_type* @dx2 to double*)
  %3347 = fmul double %3337, %3346
  %3348 = fsub double %3345, %3347
  %3349 = mul nsw i64 %3318, 2600
  %3350 = add i64 %3349, ptrtoint (%c_type* @c to i64)
  %3351 = sext i32 %3322 to i64
  %3352 = mul nsw i64 %3351, 200
  %3353 = add i64 %3352, %3350
  %3354 = add i64 %3353, 48
  %3355 = inttoptr i64 %3354 to double*
  store double %3348, double* %3355
  %3356 = load double, double* bitcast (%dt_type* @dt to double*)
  %3357 = bitcast double %3356 to i64
  %3358 = load i64, i64* %9, align 8
  %3359 = xor i64 %3358, %3357
  %3360 = bitcast i64 %3359 to double
  %3361 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3362 = fmul double %3360, %3361
  %3363 = inttoptr i64 %125 to i32*
  %3364 = load i32, i32* %3363
  %3365 = sext i32 %3364 to i64
  %3366 = mul nsw i64 %3365, 6760
  %3367 = load i64, i64* %8, align 8
  %3368 = add i64 %3366, %3367
  %3369 = inttoptr i64 %119 to i32*
  %3370 = load i32, i32* %3369
  %3371 = sext i32 %3370 to i64
  %3372 = mul nsw i64 %3371, 520
  %3373 = add i64 %3372, %3368
  %3374 = inttoptr i64 %120 to i32*
  %3375 = load i32, i32* %3374
  %3376 = add i32 %3375, -1
  %3377 = sext i32 %3376 to i64
  %3378 = mul nsw i64 %3377, 40
  %3379 = add i64 %3378, %3373
  %3380 = add i64 %3379, 16
  %3381 = inttoptr i64 %3380 to double*
  %3382 = load double, double* %3381
  %3383 = inttoptr i64 %126 to double*
  %3384 = load double, double* %3383
  %3385 = fmul double %3382, %3384
  %3386 = load <2 x i32>, <2 x i32>* %135, align 1
  %3387 = extractelement <2 x i32> %3386, i32 0
  store i32 %3387, i32* %137, align 1, !tbaa !1292
  %3388 = extractelement <2 x i32> %3386, i32 1
  store i32 %3388, i32* %139, align 1, !tbaa !1292
  %3389 = load double, double* %90, align 1
  %3390 = fmul double %3389, %3385
  %3391 = fmul double %3362, %3390
  %3392 = mul nsw i64 %3371, 2600
  %3393 = add i64 %3392, ptrtoint (%c_type* @c to i64)
  %3394 = sext i32 %3375 to i64
  %3395 = mul nsw i64 %3394, 200
  %3396 = add i64 %3395, %3393
  %3397 = add i64 %3396, 88
  %3398 = inttoptr i64 %3397 to double*
  store double %3391, double* %3398
  %3399 = load double, double* bitcast (%dt_type* @dt to double*)
  %3400 = bitcast double %3399 to i64
  %3401 = xor i64 %3358, %3400
  %3402 = bitcast i64 %3401 to double
  %3403 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3404 = fmul double %3402, %3403
  %3405 = inttoptr i64 %125 to i32*
  %3406 = load i32, i32* %3405
  %3407 = sext i32 %3406 to i64
  %3408 = mul nsw i64 %3407, 6760
  %3409 = add i64 %3408, %3367
  %3410 = inttoptr i64 %119 to i32*
  %3411 = load i32, i32* %3410
  %3412 = sext i32 %3411 to i64
  %3413 = mul nsw i64 %3412, 520
  %3414 = add i64 %3413, %3409
  %3415 = inttoptr i64 %120 to i32*
  %3416 = load i32, i32* %3415
  %3417 = add i32 %3416, -1
  %3418 = sext i32 %3417 to i64
  %3419 = mul nsw i64 %3418, 40
  %3420 = add i64 %3419, %3414
  %3421 = add i64 %3420, 24
  %3422 = inttoptr i64 %3421 to double*
  %3423 = load double, double* %3422
  %3424 = inttoptr i64 %126 to double*
  %3425 = load double, double* %3424
  %3426 = fmul double %3423, %3425
  store i32 %3387, i32* %137, align 1, !tbaa !1292
  store i32 %3388, i32* %139, align 1, !tbaa !1292
  %3427 = load double, double* %90, align 1
  %3428 = fmul double %3427, %3426
  %3429 = fmul double %3404, %3428
  %3430 = mul nsw i64 %3412, 2600
  %3431 = add i64 %3430, ptrtoint (%c_type* @c to i64)
  %3432 = sext i32 %3416 to i64
  %3433 = mul nsw i64 %3432, 200
  %3434 = add i64 %3433, %3431
  %3435 = add i64 %3434, 128
  %3436 = inttoptr i64 %3435 to double*
  store double %3429, double* %3436
  %3437 = load double, double* bitcast (%dt_type* @dt to double*)
  %3438 = bitcast double %3437 to i64
  %3439 = load i64, i64* %9, align 8
  %3440 = xor i64 %3439, %3438
  %3441 = bitcast i64 %3440 to double
  %3442 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3443 = fmul double %3441, %3442
  %3444 = load double, double* %51, align 1
  %3445 = fmul double %3443, %3444
  %3446 = inttoptr i64 %119 to i32*
  %3447 = load i32, i32* %3446
  %3448 = sext i32 %3447 to i64
  %3449 = mul nsw i64 %3448, 2600
  %3450 = add i64 %3449, ptrtoint (%c_type* @c to i64)
  %3451 = inttoptr i64 %120 to i32*
  %3452 = load i32, i32* %3451
  %3453 = sext i32 %3452 to i64
  %3454 = mul nsw i64 %3453, 200
  %3455 = add i64 %3454, %3450
  %3456 = add i64 %3455, 168
  %3457 = inttoptr i64 %3456 to double*
  store double %3445, double* %3457
  %3458 = load double, double* bitcast (%dt_type* @dt to double*)
  %3459 = bitcast double %3458 to i64
  %3460 = xor i64 %3439, %3459
  %3461 = bitcast i64 %3460 to double
  %3462 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3463 = fmul double %3461, %3462
  %3464 = inttoptr i64 %125 to i32*
  %3465 = load i32, i32* %3464
  %3466 = sext i32 %3465 to i64
  %3467 = mul nsw i64 %3466, 6760
  %3468 = load i64, i64* %8, align 8
  %3469 = add i64 %3467, %3468
  %3470 = inttoptr i64 %119 to i32*
  %3471 = load i32, i32* %3470
  %3472 = sext i32 %3471 to i64
  %3473 = mul nsw i64 %3472, 520
  %3474 = add i64 %3473, %3469
  %3475 = inttoptr i64 %120 to i32*
  %3476 = load i32, i32* %3475
  %3477 = add i32 %3476, -1
  %3478 = sext i32 %3477 to i64
  %3479 = mul nsw i64 %3478, 40
  %3480 = add i64 %3479, %3474
  %3481 = add i64 %3480, 8
  %3482 = inttoptr i64 %3481 to double*
  %3483 = load double, double* %3482
  %3484 = add i64 %3480, 16
  %3485 = inttoptr i64 %3484 to double*
  %3486 = load double, double* %3485
  %3487 = fmul double %3483, %3486
  %3488 = bitcast double %3487 to i64
  %3489 = xor i64 %3439, %3488
  %3490 = bitcast i64 %3489 to double
  %3491 = inttoptr i64 %124 to double*
  %3492 = load double, double* %3491
  %3493 = fmul double %3490, %3492
  %3494 = fmul double %3493, %3463
  %3495 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3496 = fmul double %3458, %3495
  %3497 = inttoptr i64 %123 to double*
  %3498 = load double, double* %3497
  %3499 = bitcast double %3498 to i64
  %3500 = load i64, i64* %9, align 8
  %3501 = xor i64 %3500, %3499
  %3502 = bitcast i64 %3501 to double
  %3503 = fmul double %3502, %3492
  %3504 = fmul double %3503, %3486
  %3505 = fmul double %3496, %3504
  %3506 = fsub double %3494, %3505
  %3507 = mul nsw i64 %3472, 2600
  %3508 = add i64 %3507, ptrtoint (%c_type* @c to i64)
  %3509 = sext i32 %3476 to i64
  %3510 = mul nsw i64 %3509, 200
  %3511 = add i64 %3510, %3508
  %3512 = add i64 %3511, 16
  %3513 = inttoptr i64 %3512 to double*
  store double %3506, double* %3513
  %3514 = load double, double* bitcast (%dt_type* @dt to double*)
  %3515 = bitcast double %3514 to i64
  %3516 = xor i64 %3500, %3515
  %3517 = bitcast i64 %3516 to double
  %3518 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3519 = fmul double %3517, %3518
  %3520 = inttoptr i64 %125 to i32*
  %3521 = load i32, i32* %3520
  %3522 = sext i32 %3521 to i64
  %3523 = mul nsw i64 %3522, 6760
  %3524 = load i64, i64* %8, align 8
  %3525 = add i64 %3523, %3524
  %3526 = inttoptr i64 %119 to i32*
  %3527 = load i32, i32* %3526
  %3528 = sext i32 %3527 to i64
  %3529 = mul nsw i64 %3528, 520
  %3530 = add i64 %3529, %3525
  %3531 = inttoptr i64 %120 to i32*
  %3532 = load i32, i32* %3531
  %3533 = add i32 %3532, -1
  %3534 = sext i32 %3533 to i64
  %3535 = mul nsw i64 %3534, 40
  %3536 = add i64 %3535, %3530
  %3537 = add i64 %3536, 16
  %3538 = inttoptr i64 %3537 to double*
  %3539 = load double, double* %3538
  %3540 = inttoptr i64 %126 to double*
  %3541 = load double, double* %3540
  %3542 = fmul double %3539, %3541
  %3543 = fmul double %3542, %3519
  %3544 = mul nsw i64 %3528, 2600
  %3545 = add i64 %3544, ptrtoint (%c_type* @c to i64)
  %3546 = sext i32 %3532 to i64
  %3547 = mul nsw i64 %3546, 200
  %3548 = add i64 %3547, %3545
  %3549 = add i64 %3548, 56
  %3550 = inttoptr i64 %3549 to double*
  store double %3543, double* %3550
  %3551 = load double, double* bitcast (%dt_type* @dt to double*)
  %3552 = bitcast double %3551 to i64
  %3553 = load i64, i64* %9, align 8
  %3554 = xor i64 %3553, %3552
  %3555 = bitcast i64 %3554 to double
  %3556 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3557 = fmul double %3555, %3556
  %3558 = inttoptr i64 %125 to i32*
  %3559 = load i32, i32* %3558
  %3560 = sext i32 %3559 to i64
  %3561 = mul nsw i64 %3560, 6760
  %3562 = add i64 %3561, %3524
  %3563 = inttoptr i64 %119 to i32*
  %3564 = load i32, i32* %3563
  %3565 = sext i32 %3564 to i64
  %3566 = mul nsw i64 %3565, 520
  %3567 = add i64 %3566, %3562
  %3568 = inttoptr i64 %120 to i32*
  %3569 = load i32, i32* %3568
  %3570 = add i32 %3569, -1
  %3571 = sext i32 %3570 to i64
  %3572 = mul nsw i64 %3571, 40
  %3573 = add i64 %3572, %3567
  %3574 = add i64 %3573, 8
  %3575 = inttoptr i64 %3574 to double*
  %3576 = load double, double* %3575
  %3577 = inttoptr i64 %126 to double*
  %3578 = load double, double* %3577
  %3579 = fmul double %3576, %3578
  %3580 = fmul double %3579, %3557
  %3581 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3582 = fmul double %3551, %3581
  %3583 = inttoptr i64 %123 to double*
  %3584 = load double, double* %3583
  %3585 = fmul double %3584, %3578
  %3586 = fmul double %3585, %3582
  %3587 = fsub double %3580, %3586
  %3588 = load double, double* bitcast (%dx3_type* @dx3 to double*)
  %3589 = fmul double %3582, %3588
  %3590 = fsub double %3587, %3589
  %3591 = mul nsw i64 %3565, 2600
  %3592 = add i64 %3591, ptrtoint (%c_type* @c to i64)
  %3593 = sext i32 %3569 to i64
  %3594 = mul nsw i64 %3593, 200
  %3595 = add i64 %3594, %3592
  %3596 = add i64 %3595, 96
  %3597 = inttoptr i64 %3596 to double*
  store double %3590, double* %3597
  %3598 = inttoptr i64 %119 to i32*
  %3599 = load i32, i32* %3598
  %3600 = sext i32 %3599 to i64
  %3601 = mul nsw i64 %3600, 2600
  %3602 = add i64 %3601, ptrtoint (%c_type* @c to i64)
  %3603 = inttoptr i64 %120 to i32*
  %3604 = load i32, i32* %3603
  %3605 = sext i32 %3604 to i64
  %3606 = mul nsw i64 %3605, 200
  %3607 = add i64 %3606, %3602
  %3608 = add i64 %3607, 136
  %3609 = load double, double* %121, align 1
  %3610 = inttoptr i64 %3608 to double*
  store double %3609, double* %3610
  %3611 = inttoptr i64 %119 to i32*
  %3612 = load i32, i32* %3611
  %3613 = sext i32 %3612 to i64
  %3614 = mul nsw i64 %3613, 2600
  %3615 = add i64 %3614, ptrtoint (%c_type* @c to i64)
  %3616 = inttoptr i64 %120 to i32*
  %3617 = load i32, i32* %3616
  %3618 = sext i32 %3617 to i64
  %3619 = mul nsw i64 %3618, 200
  %3620 = add i64 %3619, %3615
  %3621 = add i64 %3620, 176
  %3622 = inttoptr i64 %3621 to double*
  store double %3609, double* %3622
  %3623 = load double, double* bitcast (%dt_type* @dt to double*)
  %3624 = bitcast double %3623 to i64
  %3625 = load i64, i64* %9, align 8
  %3626 = xor i64 %3625, %3624
  %3627 = bitcast i64 %3626 to double
  %3628 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3629 = fmul double %3627, %3628
  %3630 = inttoptr i64 %125 to i32*
  %3631 = load i32, i32* %3630
  %3632 = sext i32 %3631 to i64
  %3633 = mul nsw i64 %3632, 6760
  %3634 = load i64, i64* %8, align 8
  %3635 = add i64 %3633, %3634
  %3636 = inttoptr i64 %119 to i32*
  %3637 = load i32, i32* %3636
  %3638 = sext i32 %3637 to i64
  %3639 = mul nsw i64 %3638, 520
  %3640 = add i64 %3639, %3635
  %3641 = inttoptr i64 %120 to i32*
  %3642 = load i32, i32* %3641
  %3643 = add i32 %3642, -1
  %3644 = sext i32 %3643 to i64
  %3645 = mul nsw i64 %3644, 40
  %3646 = add i64 %3645, %3640
  %3647 = add i64 %3646, 8
  %3648 = inttoptr i64 %3647 to double*
  %3649 = load double, double* %3648
  %3650 = add i64 %3646, 24
  %3651 = inttoptr i64 %3650 to double*
  %3652 = load double, double* %3651
  %3653 = fmul double %3649, %3652
  %3654 = bitcast double %3653 to i64
  %3655 = xor i64 %3625, %3654
  %3656 = bitcast i64 %3655 to double
  %3657 = inttoptr i64 %124 to double*
  %3658 = load double, double* %3657
  %3659 = fmul double %3656, %3658
  %3660 = fmul double %3659, %3629
  %3661 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3662 = fmul double %3623, %3661
  %3663 = inttoptr i64 %123 to double*
  %3664 = load double, double* %3663
  %3665 = bitcast double %3664 to i64
  %3666 = xor i64 %3625, %3665
  %3667 = bitcast i64 %3666 to double
  %3668 = fmul double %3667, %3658
  %3669 = fmul double %3668, %3652
  %3670 = fmul double %3662, %3669
  %3671 = fsub double %3660, %3670
  %3672 = mul nsw i64 %3638, 2600
  %3673 = add i64 %3672, ptrtoint (%c_type* @c to i64)
  %3674 = sext i32 %3642 to i64
  %3675 = mul nsw i64 %3674, 200
  %3676 = add i64 %3675, %3673
  %3677 = add i64 %3676, 24
  %3678 = inttoptr i64 %3677 to double*
  store double %3671, double* %3678
  %3679 = load double, double* bitcast (%dt_type* @dt to double*)
  %3680 = bitcast double %3679 to i64
  %3681 = load i64, i64* %9, align 8
  %3682 = xor i64 %3681, %3680
  %3683 = bitcast i64 %3682 to double
  %3684 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3685 = fmul double %3683, %3684
  %3686 = inttoptr i64 %125 to i32*
  %3687 = load i32, i32* %3686
  %3688 = sext i32 %3687 to i64
  %3689 = mul nsw i64 %3688, 6760
  %3690 = load i64, i64* %8, align 8
  %3691 = add i64 %3689, %3690
  %3692 = inttoptr i64 %119 to i32*
  %3693 = load i32, i32* %3692
  %3694 = sext i32 %3693 to i64
  %3695 = mul nsw i64 %3694, 520
  %3696 = add i64 %3695, %3691
  %3697 = inttoptr i64 %120 to i32*
  %3698 = load i32, i32* %3697
  %3699 = add i32 %3698, -1
  %3700 = sext i32 %3699 to i64
  %3701 = mul nsw i64 %3700, 40
  %3702 = add i64 %3701, %3696
  %3703 = add i64 %3702, 24
  %3704 = inttoptr i64 %3703 to double*
  %3705 = load double, double* %3704
  %3706 = inttoptr i64 %126 to double*
  %3707 = load double, double* %3706
  %3708 = fmul double %3705, %3707
  %3709 = fmul double %3708, %3685
  %3710 = mul nsw i64 %3694, 2600
  %3711 = add i64 %3710, ptrtoint (%c_type* @c to i64)
  %3712 = sext i32 %3698 to i64
  %3713 = mul nsw i64 %3712, 200
  %3714 = add i64 %3713, %3711
  %3715 = add i64 %3714, 64
  %3716 = inttoptr i64 %3715 to double*
  store double %3709, double* %3716
  %3717 = inttoptr i64 %119 to i32*
  %3718 = load i32, i32* %3717
  %3719 = sext i32 %3718 to i64
  %3720 = mul nsw i64 %3719, 2600
  %3721 = add i64 %3720, ptrtoint (%c_type* @c to i64)
  %3722 = inttoptr i64 %120 to i32*
  %3723 = load i32, i32* %3722
  %3724 = sext i32 %3723 to i64
  %3725 = mul nsw i64 %3724, 200
  %3726 = add i64 %3725, %3721
  %3727 = add i64 %3726, 104
  %3728 = load double, double* %121, align 1
  %3729 = inttoptr i64 %3727 to double*
  store double %3728, double* %3729
  %3730 = load double, double* bitcast (%dt_type* @dt to double*)
  %3731 = bitcast double %3730 to i64
  %3732 = xor i64 %3681, %3731
  %3733 = bitcast i64 %3732 to double
  %3734 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3735 = fmul double %3733, %3734
  %3736 = inttoptr i64 %125 to i32*
  %3737 = load i32, i32* %3736
  %3738 = sext i32 %3737 to i64
  %3739 = mul nsw i64 %3738, 6760
  %3740 = add i64 %3739, %3690
  %3741 = inttoptr i64 %119 to i32*
  %3742 = load i32, i32* %3741
  %3743 = sext i32 %3742 to i64
  %3744 = mul nsw i64 %3743, 520
  %3745 = add i64 %3744, %3740
  %3746 = inttoptr i64 %120 to i32*
  %3747 = load i32, i32* %3746
  %3748 = add i32 %3747, -1
  %3749 = sext i32 %3748 to i64
  %3750 = mul nsw i64 %3749, 40
  %3751 = add i64 %3750, %3745
  %3752 = add i64 %3751, 8
  %3753 = inttoptr i64 %3752 to double*
  %3754 = load double, double* %3753
  %3755 = inttoptr i64 %126 to double*
  %3756 = load double, double* %3755
  %3757 = fmul double %3754, %3756
  %3758 = fmul double %3757, %3735
  %3759 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3760 = fmul double %3730, %3759
  %3761 = inttoptr i64 %123 to double*
  %3762 = load double, double* %3761
  %3763 = fmul double %3762, %3756
  store double %3763, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %3764 = fmul double %3763, %3760
  %3765 = fsub double %3758, %3764
  %3766 = load double, double* bitcast (%dx4_type* @dx4 to double*)
  %3767 = fmul double %3760, %3766
  %3768 = fsub double %3765, %3767
  %3769 = mul nsw i64 %3743, 2600
  %3770 = add i64 %3769, ptrtoint (%c_type* @c to i64)
  %3771 = sext i32 %3747 to i64
  %3772 = mul nsw i64 %3771, 200
  %3773 = add i64 %3772, %3770
  %3774 = add i64 %3773, 144
  %3775 = inttoptr i64 %3774 to double*
  store double %3768, double* %3775
  %3776 = inttoptr i64 %119 to i32*
  %3777 = load i32, i32* %3776
  %3778 = sext i32 %3777 to i64
  %3779 = mul nsw i64 %3778, 2600
  %3780 = add i64 %3779, ptrtoint (%c_type* @c to i64)
  %3781 = inttoptr i64 %120 to i32*
  %3782 = load i32, i32* %3781
  %3783 = sext i32 %3782 to i64
  %3784 = mul nsw i64 %3783, 200
  %3785 = add i64 %3784, %3780
  %3786 = add i64 %3785, 184
  %3787 = load double, double* %121, align 1
  %3788 = inttoptr i64 %3786 to double*
  store double %3787, double* %3788
  %3789 = load double, double* bitcast (%dt_type* @dt to double*)
  %3790 = bitcast double %3789 to i64
  %3791 = load i64, i64* %9, align 8
  %3792 = xor i64 %3791, %3790
  %3793 = bitcast i64 %3792 to double
  %3794 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3795 = fmul double %3793, %3794
  %3796 = inttoptr i64 %125 to i32*
  %3797 = load i32, i32* %3796
  %3798 = sext i32 %3797 to i64
  %3799 = mul nsw i64 %3798, 1352
  %3800 = load i64, i64* %10, align 8
  %3801 = add i64 %3799, %3800
  %3802 = inttoptr i64 %119 to i32*
  %3803 = load i32, i32* %3802
  %3804 = sext i32 %3803 to i64
  %3805 = mul nsw i64 %3804, 104
  %3806 = add i64 %3805, %3801
  %3807 = inttoptr i64 %120 to i32*
  %3808 = load i32, i32* %3807
  %3809 = add i32 %3808, -1
  %3810 = sext i32 %3809 to i64
  %3811 = shl nsw i64 %3810, 3
  %3812 = add i64 %3806, %3811
  %3813 = load double, double* %71, align 1
  %3814 = inttoptr i64 %3812 to double*
  %3815 = load double, double* %3814
  %3816 = fmul double %3813, %3815
  %3817 = mul nsw i64 %3798, 6760
  %3818 = load i64, i64* %8, align 8
  %3819 = add i64 %3817, %3818
  %3820 = mul nsw i64 %3804, 520
  %3821 = add i64 %3820, %3819
  %3822 = mul nsw i64 %3810, 40
  %3823 = add i64 %3822, %3821
  %3824 = load <2 x i32>, <2 x i32>* %140, align 1
  %3825 = extractelement <2 x i32> %3824, i32 0
  store i32 %3825, i32* %143, align 1, !tbaa !1292
  %3826 = extractelement <2 x i32> %3824, i32 1
  store i32 %3826, i32* %145, align 1, !tbaa !1292
  %3827 = add i64 %3823, 32
  %3828 = load double, double* %83, align 1
  %3829 = inttoptr i64 %3827 to double*
  %3830 = load double, double* %3829
  %3831 = fmul double %3828, %3830
  %3832 = fsub double %3816, %3831
  %3833 = add i64 %3823, 8
  %3834 = inttoptr i64 %3833 to double*
  %3835 = load double, double* %3834
  %3836 = fmul double %3832, %3835
  %3837 = inttoptr i64 %124 to double*
  %3838 = load double, double* %3837
  %3839 = fmul double %3836, %3838
  %3840 = fmul double %3795, %3839
  store double %3840, double* %121, align 1, !tbaa !1264
  %3841 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3842 = fmul double %3789, %3841
  store double %3842, double* %71, align 1, !tbaa !1264
  %3843 = inttoptr i64 %122 to double*
  %3844 = load double, double* %3843
  %3845 = inttoptr i64 %123 to double*
  %3846 = load double, double* %3845
  %3847 = fmul double %3844, %3846
  %3848 = inttoptr i64 %129 to double*
  %3849 = load double, double* %3848
  %3850 = fsub double %3847, %3849
  %3851 = bitcast double %3850 to i64
  %3852 = load i64, i64* %9, align 8
  %3853 = xor i64 %3852, %3851
  %3854 = bitcast i64 %3853 to double
  %3855 = inttoptr i64 %132 to double*
  %3856 = load double, double* %3855
  %3857 = fmul double %3854, %3856
  %3858 = fmul double %3835, %3835
  %3859 = fmul double %3857, %3858
  %3860 = fsub double %3846, %3849
  %3861 = fmul double %3860, %3856
  %3862 = load i64, i64* %8, align 8
  %3863 = add i64 %3817, %3862
  %3864 = add i64 %3820, %3863
  %3865 = add i64 %3822, %3864
  %3866 = add i64 %3865, 16
  %3867 = inttoptr i64 %3866 to double*
  %3868 = load double, double* %3867
  %3869 = fmul double %3868, %3868
  %3870 = fmul double %3861, %3869
  %3871 = fsub double %3859, %3870
  %3872 = add i64 %3865, 24
  %3873 = inttoptr i64 %3872 to double*
  %3874 = load double, double* %3873
  %3875 = fmul double %3874, %3874
  store double %3875, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %3876 = fmul double %3861, %3875
  %3877 = fsub double %3871, %3876
  %3878 = fmul double %3849, %3838
  %3879 = add i64 %3865, 32
  %3880 = inttoptr i64 %3879 to double*
  %3881 = load double, double* %3880
  %3882 = fmul double %3878, %3881
  %3883 = fsub double %3877, %3882
  %3884 = load double, double* %71, align 1
  %3885 = fmul double %3884, %3883
  %3886 = load double, double* %121, align 1
  %3887 = fsub double %3886, %3885
  %3888 = mul nsw i64 %3804, 2600
  %3889 = add i64 %3888, ptrtoint (%c_type* @c to i64)
  %3890 = sext i32 %3808 to i64
  %3891 = mul nsw i64 %3890, 200
  %3892 = add i64 %3891, %3889
  %3893 = add i64 %3892, 32
  %3894 = inttoptr i64 %3893 to double*
  store double %3887, double* %3894
  %3895 = load double, double* bitcast (%dt_type* @dt to double*)
  %3896 = bitcast double %3895 to i64
  %3897 = load i64, i64* %9, align 8
  %3898 = xor i64 %3897, %3896
  %3899 = bitcast i64 %3898 to double
  %3900 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3901 = fmul double %3899, %3900
  store double %3901, double* %71, align 1, !tbaa !1264
  store i64 0, i64* %72, align 1, !tbaa !1264
  %3902 = inttoptr i64 %125 to i32*
  %3903 = load i32, i32* %3902
  %3904 = sext i32 %3903 to i64
  %3905 = mul nsw i64 %3904, 6760
  %3906 = load i64, i64* %8, align 8
  %3907 = add i64 %3905, %3906
  %3908 = inttoptr i64 %119 to i32*
  %3909 = load i32, i32* %3908
  %3910 = sext i32 %3909 to i64
  %3911 = mul nsw i64 %3910, 520
  %3912 = add i64 %3911, %3907
  %3913 = inttoptr i64 %120 to i32*
  %3914 = load i32, i32* %3913
  %3915 = add i32 %3914, -1
  %3916 = sext i32 %3915 to i64
  %3917 = mul nsw i64 %3916, 40
  %3918 = add i64 %3917, %3912
  %3919 = add i64 %3918, 32
  %3920 = inttoptr i64 %3919 to double*
  %3921 = load double, double* %3920
  %3922 = inttoptr i64 %126 to double*
  %3923 = load double, double* %3922
  %3924 = fmul double %3921, %3923
  %3925 = load <2 x i32>, <2 x i32>* %140, align 1
  %3926 = load <2 x i32>, <2 x i32>* %141, align 1
  %3927 = extractelement <2 x i32> %3925, i32 0
  store i32 %3927, i32* %143, align 1, !tbaa !1292
  %3928 = extractelement <2 x i32> %3925, i32 1
  store i32 %3928, i32* %145, align 1, !tbaa !1292
  %3929 = extractelement <2 x i32> %3926, i32 0
  store i32 %3929, i32* %146, align 1, !tbaa !1292
  %3930 = extractelement <2 x i32> %3926, i32 1
  store i32 %3930, i32* %148, align 1, !tbaa !1292
  %3931 = load double, double* %83, align 1
  %3932 = fmul double %3931, %3924
  %3933 = add i64 %3918, 8
  %3934 = inttoptr i64 %3933 to double*
  %3935 = load double, double* %3934
  store i64 %3918, i64* %14, align 8, !tbaa !1240
  %3936 = fmul double %3935, %3935
  %3937 = inttoptr i64 %124 to double*
  %3938 = load double, double* %3937
  %3939 = fmul double %3936, %3938
  %3940 = mul nsw i64 %3904, 1352
  %3941 = load i64, i64* %10, align 8
  %3942 = add i64 %3940, %3941
  %3943 = mul nsw i64 %3910, 104
  %3944 = add i64 %3943, %3942
  %3945 = shl nsw i64 %3916, 3
  %3946 = add i64 %3944, %3945
  %3947 = inttoptr i64 %3946 to double*
  %3948 = load double, double* %3947
  %3949 = fmul double %3948, %3923
  store double %3949, double* %86, align 1, !tbaa !1264
  store i64 0, i64* %87, align 1, !tbaa !1264
  %3950 = fadd double %3949, %3939
  %3951 = load double, double* %51, align 1
  %3952 = fmul double %3950, %3951
  %3953 = fsub double %3932, %3952
  store double %3953, double* %83, align 1, !tbaa !1264
  %3954 = load double, double* %71, align 1
  %3955 = fmul double %3953, %3954
  %3956 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3957 = fmul double %3895, %3956
  %3958 = inttoptr i64 %122 to double*
  %3959 = load double, double* %3958
  %3960 = inttoptr i64 %123 to double*
  %3961 = load double, double* %3960
  %3962 = fmul double %3959, %3961
  %3963 = inttoptr i64 %129 to double*
  %3964 = load double, double* %3963
  %3965 = fsub double %3962, %3964
  %3966 = fmul double %3957, %3965
  %3967 = fmul double %3966, %3938
  %3968 = load i64, i64* %8, align 8
  %3969 = add i64 %3905, %3968
  %3970 = add i64 %3911, %3969
  %3971 = add i64 %3917, %3970
  %3972 = add i64 %3971, 8
  %3973 = inttoptr i64 %3972 to double*
  %3974 = load double, double* %3973
  %3975 = fmul double %3967, %3974
  %3976 = fsub double %3955, %3975
  %3977 = mul nsw i64 %3910, 2600
  %3978 = add i64 %3977, ptrtoint (%c_type* @c to i64)
  %3979 = sext i32 %3914 to i64
  %3980 = mul nsw i64 %3979, 200
  %3981 = add i64 %3980, %3978
  %3982 = add i64 %3981, 72
  %3983 = inttoptr i64 %3982 to double*
  store double %3976, double* %3983
  %3984 = load double, double* bitcast (%dt_type* @dt to double*)
  %3985 = bitcast double %3984 to i64
  %3986 = load i64, i64* %9, align 8
  %3987 = xor i64 %3986, %3985
  %3988 = bitcast i64 %3987 to double
  %3989 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %3990 = fmul double %3988, %3989
  %3991 = inttoptr i64 %125 to i32*
  %3992 = load i32, i32* %3991
  %3993 = sext i32 %3992 to i64
  %3994 = mul nsw i64 %3993, 6760
  %3995 = add i64 %3994, %3968
  %3996 = inttoptr i64 %119 to i32*
  %3997 = load i32, i32* %3996
  %3998 = sext i32 %3997 to i64
  %3999 = mul nsw i64 %3998, 520
  %4000 = add i64 %3999, %3995
  %4001 = inttoptr i64 %120 to i32*
  %4002 = load i32, i32* %4001
  %4003 = add i32 %4002, -1
  %4004 = sext i32 %4003 to i64
  %4005 = mul nsw i64 %4004, 40
  %4006 = add i64 %4005, %4000
  %4007 = add i64 %4006, 16
  %4008 = inttoptr i64 %4007 to double*
  %4009 = load double, double* %4008
  %4010 = add i64 %4006, 8
  %4011 = inttoptr i64 %4010 to double*
  %4012 = load double, double* %4011
  %4013 = fmul double %4009, %4012
  %4014 = load <2 x i32>, <2 x i32>* %135, align 1
  %4015 = extractelement <2 x i32> %4014, i32 0
  store i32 %4015, i32* %76, align 1, !tbaa !1292
  %4016 = extractelement <2 x i32> %4014, i32 1
  store i32 %4016, i32* %78, align 1, !tbaa !1292
  %4017 = load double, double* %121, align 1
  %4018 = fmul double %4017, %4013
  %4019 = inttoptr i64 %124 to double*
  %4020 = load double, double* %4019
  %4021 = fmul double %4018, %4020
  %4022 = fmul double %3990, %4021
  %4023 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %4024 = fmul double %3984, %4023
  %4025 = inttoptr i64 %123 to double*
  %4026 = load double, double* %4025
  %4027 = inttoptr i64 %129 to double*
  %4028 = load double, double* %4027
  %4029 = fsub double %4026, %4028
  store double %4029, double* %121, align 1, !tbaa !1264
  store i64 0, i64* %75, align 1, !tbaa !1264
  %4030 = fmul double %4029, %4024
  %4031 = fmul double %4030, %4020
  %4032 = load i64, i64* %8, align 8
  %4033 = add i64 %3994, %4032
  %4034 = add i64 %3999, %4033
  %4035 = add i64 %4005, %4034
  %4036 = add i64 %4035, 16
  %4037 = inttoptr i64 %4036 to double*
  %4038 = load double, double* %4037
  %4039 = fmul double %4031, %4038
  %4040 = fsub double %4022, %4039
  %4041 = mul nsw i64 %3998, 2600
  %4042 = add i64 %4041, ptrtoint (%c_type* @c to i64)
  %4043 = sext i32 %4002 to i64
  %4044 = mul nsw i64 %4043, 200
  %4045 = add i64 %4044, %4042
  %4046 = add i64 %4045, 112
  %4047 = inttoptr i64 %4046 to double*
  store double %4040, double* %4047
  %4048 = load double, double* bitcast (%dt_type* @dt to double*)
  %4049 = bitcast double %4048 to i64
  %4050 = load i64, i64* %9, align 8
  %4051 = xor i64 %4050, %4049
  %4052 = bitcast i64 %4051 to double
  %4053 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %4054 = fmul double %4052, %4053
  %4055 = inttoptr i64 %125 to i32*
  %4056 = load i32, i32* %4055
  %4057 = sext i32 %4056 to i64
  %4058 = mul nsw i64 %4057, 6760
  %4059 = add i64 %4058, %4032
  %4060 = inttoptr i64 %119 to i32*
  %4061 = load i32, i32* %4060
  %4062 = sext i32 %4061 to i64
  %4063 = mul nsw i64 %4062, 520
  %4064 = add i64 %4063, %4059
  %4065 = inttoptr i64 %120 to i32*
  %4066 = load i32, i32* %4065
  %4067 = add i32 %4066, -1
  %4068 = sext i32 %4067 to i64
  %4069 = mul nsw i64 %4068, 40
  %4070 = add i64 %4069, %4064
  %4071 = add i64 %4070, 24
  %4072 = inttoptr i64 %4071 to double*
  %4073 = load double, double* %4072
  %4074 = add i64 %4070, 8
  %4075 = inttoptr i64 %4074 to double*
  %4076 = load double, double* %4075
  %4077 = fmul double %4073, %4076
  %4078 = load double, double* %47, align 1
  %4079 = fmul double %4078, %4077
  %4080 = inttoptr i64 %124 to double*
  %4081 = load double, double* %4080
  %4082 = fmul double %4079, %4081
  %4083 = fmul double %4054, %4082
  %4084 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %4085 = fmul double %4048, %4084
  %4086 = inttoptr i64 %123 to double*
  %4087 = load double, double* %4086
  %4088 = inttoptr i64 %129 to double*
  %4089 = load double, double* %4088
  %4090 = fsub double %4087, %4089
  store double %4090, double* %71, align 1, !tbaa !1264
  store i64 0, i64* %72, align 1, !tbaa !1264
  %4091 = fmul double %4090, %4085
  %4092 = fmul double %4091, %4081
  %4093 = load i64, i64* %8, align 8
  %4094 = add i64 %4058, %4093
  %4095 = add i64 %4063, %4094
  %4096 = add i64 %4069, %4095
  %4097 = add i64 %4096, 24
  %4098 = inttoptr i64 %4097 to double*
  %4099 = load double, double* %4098
  %4100 = fmul double %4092, %4099
  %4101 = fsub double %4083, %4100
  %4102 = mul nsw i64 %4062, 2600
  %4103 = add i64 %4102, ptrtoint (%c_type* @c to i64)
  %4104 = sext i32 %4066 to i64
  %4105 = mul nsw i64 %4104, 200
  %4106 = add i64 %4105, %4103
  store i64 %4106, i64* %11, align 8, !tbaa !1240
  %4107 = add i64 %4106, 152
  %4108 = inttoptr i64 %4107 to double*
  store double %4101, double* %4108
  %4109 = load double, double* bitcast (%dt_type* @dt to double*)
  %4110 = bitcast double %4109 to i64
  %4111 = load i64, i64* %9, align 8
  %4112 = xor i64 %4111, %4110
  store i64 %4112, i64* %10, align 8, !tbaa !1240
  %4113 = bitcast i64 %4112 to double
  %4114 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %4115 = fmul double %4113, %4114
  %4116 = inttoptr i64 %125 to i32*
  %4117 = load i32, i32* %4116
  %4118 = sext i32 %4117 to i64
  %4119 = mul nsw i64 %4118, 6760
  %4120 = add i64 %4119, %4093
  %4121 = inttoptr i64 %119 to i32*
  %4122 = load i32, i32* %4121
  %4123 = sext i32 %4122 to i64
  %4124 = mul nsw i64 %4123, 520
  %4125 = add i64 %4124, %4120
  %4126 = inttoptr i64 %120 to i32*
  %4127 = load i32, i32* %4126
  %4128 = add i32 %4127, -1
  %4129 = sext i32 %4128 to i64
  %4130 = mul nsw i64 %4129, 40
  store i64 %4130, i64* %9, align 8, !tbaa !1240
  %4131 = add i64 %4130, %4125
  %4132 = add i64 %4131, 8
  %4133 = inttoptr i64 %4132 to double*
  %4134 = load double, double* %4133
  %4135 = inttoptr i64 %126 to double*
  %4136 = load double, double* %4135
  %4137 = fmul double %4134, %4136
  store double %4137, double* %51, align 1, !tbaa !1264
  store i64 0, i64* %52, align 1, !tbaa !1264
  %4138 = load double, double* %43, align 1
  %4139 = fmul double %4137, %4138
  %4140 = fmul double %4139, %4115
  %4141 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %4142 = fmul double %4109, %4141
  %4143 = inttoptr i64 %129 to double*
  %4144 = load double, double* %4143
  %4145 = fmul double %4142, %4144
  %4146 = fmul double %4145, %4136
  %4147 = fsub double %4140, %4146
  %4148 = load double, double* bitcast (%dx5_type* @dx5 to double*)
  %4149 = fmul double %4142, %4148
  store double %4149, double* %43, align 1, !tbaa !1264
  store i64 0, i64* %44, align 1, !tbaa !1264
  %4150 = fsub double %4147, %4149
  store double %4150, double* %47, align 1, !tbaa !1264
  store i64 0, i64* %48, align 1, !tbaa !1264
  %4151 = mul nsw i64 %4123, 2600
  %4152 = add i64 %4151, ptrtoint (%c_type* @c to i64)
  %4153 = sext i32 %4127 to i64
  %4154 = mul nsw i64 %4153, 200
  store i64 %4154, i64* %8, align 8, !tbaa !1240
  %4155 = add i64 %4154, %4152
  %4156 = add i64 %4155, 192
  %4157 = inttoptr i64 %4156 to double*
  store double %4150, double* %4157
  %4158 = inttoptr i64 %120 to i32*
  %4159 = load i32, i32* %4158
  %4160 = add i32 %4159, 1
  %4161 = inttoptr i64 %120 to i32*
  store i32 %4160, i32* %4161
  br label %block_408be5

block_408bdb:                                     ; preds = %block_408bcb
  %4162 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %4163 = inttoptr i64 %70 to i32*
  store i32 %4162, i32* %4163
  br label %block_408be5

block_40d13e:                                     ; preds = %block_408bcb
  %4164 = zext i32 %4198 to i64
  store i64 %4164, i64* %6, align 8
  %4165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4168 = icmp ult i32 %4198, %4199
  %4169 = zext i1 %4168 to i8
  %4170 = and i32 %4200, 255
  %4171 = tail call i32 @llvm.ctpop.i32(i32 %4170) #11
  %4172 = trunc i32 %4171 to i8
  %4173 = and i8 %4172, 1
  %4174 = xor i8 %4173, 1
  %4175 = xor i32 %4199, %4198
  %4176 = xor i32 %4175, %4200
  %4177 = lshr i32 %4176, 4
  %4178 = trunc i32 %4177 to i8
  %4179 = and i8 %4178, 1
  %4180 = icmp eq i32 %4200, 0
  %4181 = zext i1 %4180 to i8
  %4182 = zext i1 %4208 to i8
  store i8 %4169, i8* %67, align 1, !tbaa !1245
  store i8 %4174, i8* %4165, align 1, !tbaa !1259
  store i8 %4179, i8* %68, align 1, !tbaa !1263
  store i8 %4181, i8* %4166, align 1, !tbaa !1260
  store i8 %4202, i8* %69, align 1, !tbaa !1261
  store i8 %4182, i8* %4167, align 1, !tbaa !1262
  %4183 = load i64, i64* %12, align 8, !tbaa !1240
  %4184 = add i64 %4183, 8
  %4185 = inttoptr i64 %4183 to i64*
  %4186 = load i64, i64* %4185
  store i64 %4186, i64* %7, align 8, !tbaa !1240
  %4187 = add i64 %4183, 16
  %4188 = inttoptr i64 %4184 to i64*
  %4189 = load i64, i64* %4188
  store i64 %4189, i64* %18, align 8, !tbaa !1240
  %4190 = add i64 %4183, 24
  %4191 = inttoptr i64 %4187 to i64*
  %4192 = load i64, i64* %4191
  store i64 %4192, i64* %13, align 8, !tbaa !1240
  %4193 = inttoptr i64 %4190 to i64*
  %4194 = load i64, i64* %4193
  store i64 %4194, i64* %3, align 8, !tbaa !1240
  %4195 = add i64 %4183, 32
  store i64 %4195, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %4196

block_408bcb:                                     ; preds = %block_40d12b, %block_408b90
  %4196 = phi %struct.Memory* [ %2, %block_408b90 ], [ %4215, %block_40d12b ]
  %4197 = inttoptr i64 %65 to i32*
  %4198 = load i32, i32* %4197
  %4199 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %4200 = sub i32 %4198, %4199
  %4201 = lshr i32 %4200, 31
  %4202 = trunc i32 %4201 to i8
  %4203 = lshr i32 %4198, 31
  %4204 = lshr i32 %4199, 31
  %4205 = xor i32 %4204, %4203
  %4206 = xor i32 %4201, %4203
  %4207 = add nuw nsw i32 %4206, %4205
  %4208 = icmp eq i32 %4207, 2
  %4209 = icmp ne i8 %4202, 0
  %4210 = xor i1 %4209, %4208
  br i1 %4210, label %block_408bdb, label %block_40d13e

block_40d12b:                                     ; preds = %block_408be5
  %4211 = inttoptr i64 %119 to i32*
  %4212 = load i32, i32* %4211
  %4213 = add i32 %4212, 1
  %4214 = inttoptr i64 %119 to i32*
  store i32 %4213, i32* %4214
  br label %block_408bcb

block_408be5:                                     ; preds = %block_408bdb, %block_408bf5
  %4215 = phi %struct.Memory* [ %4196, %block_408bdb ], [ %4215, %block_408bf5 ]
  %4216 = inttoptr i64 %70 to i32*
  %4217 = load i32, i32* %4216
  %4218 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %4219 = sub i32 %4217, %4218
  %4220 = lshr i32 %4219, 31
  %4221 = lshr i32 %4217, 31
  %4222 = lshr i32 %4218, 31
  %4223 = xor i32 %4222, %4221
  %4224 = xor i32 %4220, %4221
  %4225 = add nuw nsw i32 %4224, %4223
  %4226 = icmp eq i32 %4225, 2
  %4227 = icmp ne i32 %4220, 0
  %4228 = xor i1 %4227, %4226
  br i1 %4228, label %block_408bf5, label %block_40d12b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400720_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400720:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %5, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %7, i64* %10
  store i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64* %4, align 8, !tbaa !1240
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)) to i8), i8* %11, align 1, !tbaa !1245
  %12 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)) to i32), i32 255)) #11
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !1259
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64))), i64 4) to i8), i8 1), i8* %17, align 1, !tbaa !1263
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 0) to i8), i8* %18, align 1, !tbaa !1260
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 63) to i8), i8* %19, align 1, !tbaa !1261
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %20, align 1, !tbaa !1262
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 4294967295), i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64)), i64 0), label %block_400748, label %block_400731

block_400731:                                     ; preds = %block_400720
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %11, align 1, !tbaa !1245
  store i8 1, i8* %16, align 1, !tbaa !1259
  store i8 1, i8* %18, align 1, !tbaa !1260
  store i8 0, i8* %19, align 1, !tbaa !1261
  store i8 0, i8* %20, align 1, !tbaa !1262
  store i8 0, i8* %17, align 1, !tbaa !1263
  br label %block_400748

block_400748:                                     ; preds = %block_400731, %block_400720
  %21 = inttoptr i64 %9 to i64*
  %22 = load i64, i64* %21
  store i64 %22, i64* %6, align 8, !tbaa !1240
  %23 = inttoptr i64 %8 to i64*
  %24 = load i64, i64* %23
  store i64 %24, i64* %3, align 8, !tbaa !1240
  %25 = add i64 %8, 8
  store i64 %25, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403bc0_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403bc0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, -32
  %24 = add i64 %1, 16
  %25 = add i64 %11, -48
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_403ba0_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -24
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %29 to double*
  %34 = load double, double* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = add i64 %28, -4
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 3
  %41 = add i64 %40, add (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 528)
  %42 = inttoptr i64 %41 to double*
  %43 = load double, double* %42
  %44 = fsub double %34, %43
  %45 = add i64 %28, -16
  %46 = inttoptr i64 %45 to double*
  store double %44, double* %46
  %47 = inttoptr i64 %45 to double*
  %48 = load double, double* %47
  %49 = inttoptr i64 %36 to i32*
  %50 = load i32, i32* %49
  %51 = sext i32 %50 to i64
  store i64 %51, i64* %6, align 8, !tbaa !1240
  %52 = shl nsw i64 %51, 3
  %53 = add i64 %52, add (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 16)
  %54 = inttoptr i64 %53 to double*
  %55 = load double, double* %54
  %56 = fadd double %48, %55
  store double %56, double* %30, align 1, !tbaa !1264
  store i64 0, i64* %35, align 1, !tbaa !1264
  %57 = inttoptr i64 %53 to double*
  store double %56, double* %57
  %58 = load i64, i64* %7, align 8
  %59 = add i64 %58, 32
  %60 = icmp ugt i64 %58, -33
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %14, align 1, !tbaa !1245
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %15, align 1, !tbaa !1259
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %16, align 1, !tbaa !1263
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %17, align 1, !tbaa !1260
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %18, align 1, !tbaa !1261
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %19, align 1, !tbaa !1262
  %81 = add i64 %58, 40
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %58, 48
  store i64 %86, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41a594__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_41a594:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9 = xor i64 %6, %5
  %10 = lshr i64 %9, 4
  %11 = trunc i64 %10 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = lshr i64 %6, 63
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %5, 63
  %18 = xor i64 %15, %17
  %19 = add nuw nsw i64 %18, %17
  %20 = icmp eq i64 %19, 2
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = icmp ult i64 %5, 8
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !1245
  %25 = trunc i64 %5 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %8, align 1, !tbaa !1259
  store i8 %12, i8* %13, align 1, !tbaa !1263
  %31 = icmp eq i64 %5, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %14, align 1, !tbaa !1260
  %33 = trunc i64 %17 to i8
  store i8 %33, i8* %16, align 1, !tbaa !1261
  store i8 %21, i8* %22, align 1, !tbaa !1262
  %34 = inttoptr i64 %5 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %3, align 8, !tbaa !1240
  %36 = add i64 %5, 8
  store i64 %36, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_413be0_rhs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_413be0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %19 = load i64, i64* %10, align 8
  %20 = load i64, i64* %9, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %10, align 8, !tbaa !1240
  %23 = add i64 %20, -1320
  store i64 %23, i64* %9, align 8, !tbaa !1240
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i64 35, i64 25
  %33 = add i64 %32, %1
  br i1 %31, label %block_413c03, label %block_413bf9

block_417159:                                     ; preds = %block_417152, %block_417169
  %34 = phi i64 [ %3402, %block_417152 ], [ %3140, %block_417169 ]
  %35 = phi %struct.Memory* [ %3905, %block_417152 ], [ %35, %block_417169 ]
  %36 = inttoptr i64 %2426 to i32*
  %37 = load i32, i32* %36
  %38 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %39 = sub i32 %37, %38
  %40 = lshr i32 %39, 31
  %41 = lshr i32 %37, 31
  %42 = lshr i32 %38, 31
  %43 = xor i32 %42, %41
  %44 = xor i32 %40, %41
  %45 = add nuw nsw i32 %44, %43
  %46 = icmp eq i32 %45, 2
  %47 = icmp ne i32 %40, 0
  %48 = xor i1 %47, %46
  %49 = select i1 %48, i64 16, i64 780
  %50 = add i64 %34, %49
  br i1 %48, label %block_417169, label %block_417465

block_4179f5:                                     ; preds = %block_4179eb
  %51 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  %52 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %53 = inttoptr i64 %2426 to i32*
  %54 = load i32, i32* %53
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %55, 40
  %57 = add i64 %56, %2431
  %58 = sext i32 %152 to i64
  %59 = shl nsw i64 %58, 3
  %60 = add i64 %59, %57
  %61 = inttoptr i64 %60 to double*
  %62 = load double, double* %61
  %63 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %64 = add i32 %54, -2
  %65 = sext i32 %64 to i64
  %66 = mul nsw i64 %65, 48
  %67 = add i64 %66, %2427
  %68 = add i64 %59, %67
  %69 = inttoptr i64 %68 to double*
  %70 = load double, double* %69
  %71 = add i32 %54, -1
  %72 = sext i32 %71 to i64
  %73 = mul nsw i64 %72, 48
  %74 = add i64 %73, %2427
  %75 = bitcast double %51 to <2 x i32>
  %76 = extractelement <2 x i32> %75, i32 0
  store i32 %76, i32* %2089, align 1, !tbaa !1292
  %77 = extractelement <2 x i32> %75, i32 1
  store i32 %77, i32* %2091, align 1, !tbaa !1292
  store i32 0, i32* %2092, align 1, !tbaa !1292
  store i32 0, i32* %2094, align 1, !tbaa !1292
  %78 = add i64 %59, %74
  %79 = load double, double* %2076, align 1
  %80 = inttoptr i64 %78 to double*
  %81 = load double, double* %80
  %82 = fmul double %79, %81
  store double %82, double* %2076, align 1, !tbaa !1264
  %83 = fsub double %70, %82
  %84 = mul nsw i64 %55, 48
  %85 = add i64 %84, %2427
  %86 = add i64 %59, %85
  %87 = inttoptr i64 %86 to double*
  %88 = load double, double* %87
  %89 = fmul double %52, %88
  store double %89, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %90 = fadd double %83, %89
  %91 = add i32 %54, 1
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %92, 48
  %94 = add i64 %93, %2427
  store i64 %94, i64* %7, align 8, !tbaa !1240
  %95 = add i64 %59, %94
  %96 = inttoptr i64 %95 to double*
  %97 = load double, double* %96
  %98 = fmul double %51, %97
  store double %98, double* %4822, align 1, !tbaa !1264
  store i64 0, i64* %4823, align 1, !tbaa !1264
  %99 = fsub double %90, %98
  %100 = add i32 %54, 2
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %8, align 8, !tbaa !1240
  %102 = sext i32 %100 to i64
  %103 = mul nsw i64 %102, 48
  %104 = add i64 %103, %2427
  store i64 %58, i64* %6, align 8, !tbaa !1240
  %105 = add i64 %59, %104
  %106 = inttoptr i64 %105 to double*
  %107 = load double, double* %106
  %108 = fadd double %99, %107
  store double %108, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %109 = fmul double %63, %108
  store double %109, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %110 = fsub double %62, %109
  store double %110, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %111 = mul nsw i64 %55, 6760
  %112 = add i64 %111, ptrtoint (%rsd_type* @rsd to i64)
  %113 = inttoptr i64 %2422 to i32*
  %114 = load i32, i32* %113
  %115 = sext i32 %114 to i64
  %116 = mul nsw i64 %115, 520
  %117 = add i64 %116, %112
  %118 = inttoptr i64 %2425 to i32*
  %119 = load i32, i32* %118
  %120 = sext i32 %119 to i64
  %121 = mul nsw i64 %120, 40
  %122 = add i64 %121, %117
  %123 = add i64 %59, %122
  %124 = inttoptr i64 %123 to double*
  store double %110, double* %124
  %125 = inttoptr i64 %2430 to i32*
  %126 = load i32, i32* %125
  %127 = add i32 %126, 1
  %128 = inttoptr i64 %2430 to i32*
  store i32 %127, i32* %128
  %129 = add i64 %162, -10
  br label %block_4179eb

block_4141db:                                     ; preds = %block_4142c7, %block_4141d1
  %130 = phi i64 [ %164, %block_4141d1 ], [ %2452, %block_4142c7 ]
  %131 = phi %struct.Memory* [ %4742, %block_4141d1 ], [ %2109, %block_4142c7 ]
  %132 = inttoptr i64 %2049 to i32*
  %133 = load i32, i32* %132
  %134 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %135 = sub i32 %133, %134
  %136 = lshr i32 %135, 31
  %137 = lshr i32 %133, 31
  %138 = lshr i32 %134, 31
  %139 = xor i32 %138, %137
  %140 = xor i32 %136, %137
  %141 = add nuw nsw i32 %140, %139
  %142 = icmp eq i32 %141, 2
  %143 = icmp ne i32 %136, 0
  %144 = xor i1 %143, %142
  %145 = select i1 %144, i64 16, i64 255
  %146 = add i64 %130, %145
  br i1 %144, label %block_4141eb, label %block_4142da

block_4155d2:                                     ; preds = %block_4155c2
  %147 = add i64 %205, 7
  %148 = inttoptr i64 %633 to i32*
  store i32 0, i32* %148
  br label %block_4155d9

block_4179eb:                                     ; preds = %block_4179eb.preheader, %block_4179f5
  %149 = phi i64 [ %129, %block_4179f5 ], [ %184, %block_4179eb.preheader ]
  %150 = phi %struct.Memory* [ %150, %block_4179f5 ], [ %167, %block_4179eb.preheader ]
  %151 = inttoptr i64 %2430 to i32*
  %152 = load i32, i32* %151
  %153 = add i32 %152, -5
  %154 = lshr i32 %153, 31
  %155 = lshr i32 %152, 31
  %156 = xor i32 %154, %155
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = icmp ne i32 %154, 0
  %160 = xor i1 %159, %158
  %161 = select i1 %160, i64 10, i64 296
  %162 = add i64 %149, %161
  br i1 %160, label %block_4179f5, label %block_417b13

block_4141d1:                                     ; preds = %block_413f4d
  %163 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %164 = add i64 %4757, 10
  %165 = inttoptr i64 %2049 to i32*
  store i32 %163, i32* %165
  br label %block_4141db

block_4179cf:                                     ; preds = %block_417b13, %block_4179c8
  %166 = phi i64 [ %187, %block_4179c8 ], [ %2020, %block_417b13 ]
  %167 = phi %struct.Memory* [ %1201, %block_4179c8 ], [ %150, %block_417b13 ]
  %168 = inttoptr i64 %2426 to i32*
  %169 = load i32, i32* %168
  %170 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %171 = add i32 %170, -3
  %172 = sub i32 %169, %171
  %173 = lshr i32 %172, 31
  %174 = lshr i32 %169, 31
  %175 = lshr i32 %171, 31
  %176 = xor i32 %175, %174
  %177 = xor i32 %173, %174
  %178 = add nuw nsw i32 %177, %176
  %179 = icmp eq i32 %178, 2
  %180 = icmp ne i32 %173, 0
  %181 = xor i1 %180, %179
  %182 = select i1 %181, i64 21, i64 343
  %183 = add i64 %166, %182
  %184 = add i64 %183, 7
  %185 = inttoptr i64 %2430 to i32*
  store i32 0, i32* %185
  br i1 %181, label %block_4179eb.preheader, label %block_417b2d.preheader

block_4179eb.preheader:                           ; preds = %block_4179cf
  br label %block_4179eb

block_417b2d.preheader:                           ; preds = %block_4179cf
  %186 = zext i32 %171 to i64
  store i64 %186, i64* %5, align 8
  br label %block_417b2d

block_4179c8:                                     ; preds = %block_41788c
  %187 = add i64 %1213, 7
  %188 = inttoptr i64 %2426 to i32*
  store i32 3, i32* %188
  br label %block_4179cf

block_4155c2:                                     ; preds = %block_4155b8, %block_416474
  %189 = phi i64 [ %4074, %block_4155b8 ], [ %3819, %block_416474 ]
  %190 = phi %struct.Memory* [ %609, %block_4155b8 ], [ %4024, %block_416474 ]
  %191 = inttoptr i64 %632 to i32*
  %192 = load i32, i32* %191
  %193 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %194 = sub i32 %192, %193
  %195 = lshr i32 %194, 31
  %196 = lshr i32 %192, 31
  %197 = lshr i32 %193, 31
  %198 = xor i32 %197, %196
  %199 = xor i32 %195, %196
  %200 = add nuw nsw i32 %199, %198
  %201 = icmp eq i32 %200, 2
  %202 = icmp ne i32 %195, 0
  %203 = xor i1 %202, %201
  %204 = select i1 %203, i64 16, i64 3781
  %205 = add i64 %189, %204
  br i1 %203, label %block_4155d2, label %block_416487

block_415dae:                                     ; preds = %block_415d9e
  %206 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %206, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  store i64 ptrtoint (%flux_type* @flux to i64), i64* %6, align 8, !tbaa !1240
  %207 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %207, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %208, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %209 = inttoptr i64 %629 to i32*
  %210 = load i32, i32* %209
  %211 = sext i32 %210 to i64
  %212 = mul nsw i64 %211, 6760
  %213 = add i64 %212, ptrtoint (%rsd_type* @rsd to i64)
  %214 = sext i32 %4026 to i64
  %215 = mul nsw i64 %214, 520
  %216 = add i64 %215, %213
  %217 = inttoptr i64 %632 to i32*
  %218 = load i32, i32* %217
  %219 = sext i32 %218 to i64
  %220 = mul nsw i64 %219, 40
  %221 = add i64 %220, %216
  %222 = inttoptr i64 %221 to double*
  %223 = load double, double* %222
  %224 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %225 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %226 = fmul double %224, %225
  %227 = add i64 %212, ptrtoint (%u_type* @u to i64)
  %228 = add i32 %4026, -1
  %229 = sext i32 %228 to i64
  %230 = mul nsw i64 %229, 520
  %231 = add i64 %230, %227
  %232 = add i64 %220, %231
  %233 = inttoptr i64 %232 to double*
  %234 = load double, double* %233
  %235 = add i64 %215, %227
  %236 = add i64 %220, %235
  %237 = bitcast double %206 to <2 x i32>
  %238 = extractelement <2 x i32> %237, i32 0
  store i32 %238, i32* %2079, align 1, !tbaa !1292
  %239 = extractelement <2 x i32> %237, i32 1
  store i32 %239, i32* %2081, align 1, !tbaa !1292
  %240 = load double, double* %2086, align 1
  %241 = inttoptr i64 %236 to double*
  %242 = load double, double* %241
  %243 = fmul double %240, %242
  %244 = fsub double %234, %243
  %245 = add i32 %4026, 1
  %246 = sext i32 %245 to i64
  %247 = mul nsw i64 %246, 520
  %248 = add i64 %247, %227
  %249 = add i64 %220, %248
  %250 = inttoptr i64 %249 to double*
  %251 = load double, double* %250
  %252 = fadd double %244, %251
  %253 = fmul double %226, %252
  %254 = fadd double %223, %253
  %255 = add i64 %212, ptrtoint (%rsd_type* @rsd to i64)
  %256 = add i64 %215, %255
  %257 = add i64 %220, %256
  %258 = inttoptr i64 %257 to double*
  store double %254, double* %258
  %259 = inttoptr i64 %629 to i32*
  %260 = load i32, i32* %259
  %261 = sext i32 %260 to i64
  %262 = mul nsw i64 %261, 6760
  %263 = add i64 %262, ptrtoint (%rsd_type* @rsd to i64)
  %264 = inttoptr i64 %633 to i32*
  %265 = load i32, i32* %264
  %266 = sext i32 %265 to i64
  %267 = mul nsw i64 %266, 520
  %268 = add i64 %267, %263
  %269 = inttoptr i64 %632 to i32*
  %270 = load i32, i32* %269
  %271 = sext i32 %270 to i64
  %272 = mul nsw i64 %271, 40
  %273 = add i64 %272, %268
  %274 = add i64 %273, 8
  %275 = inttoptr i64 %274 to double*
  %276 = load double, double* %275
  %277 = load <2 x i32>, <2 x i32>* %2087, align 1
  %278 = extractelement <2 x i32> %277, i32 0
  store i32 %278, i32* %2058, align 1, !tbaa !1292
  %279 = extractelement <2 x i32> %277, i32 1
  store i32 %279, i32* %2060, align 1, !tbaa !1292
  %280 = load double, double* %2065, align 1
  %281 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %282 = fmul double %280, %281
  %283 = load double, double* %4826, align 1
  %284 = fmul double %282, %283
  %285 = add i32 %265, 1
  %286 = sext i32 %285 to i64
  %287 = mul nsw i64 %286, 40
  %288 = load i64, i64* %6, align 8
  %289 = add i64 %287, %288
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %290 to double*
  %292 = load double, double* %291
  %293 = mul nsw i64 %266, 40
  %294 = add i64 %293, %288
  %295 = add i64 %294, 8
  %296 = inttoptr i64 %295 to double*
  %297 = load double, double* %296
  %298 = fsub double %292, %297
  %299 = fmul double %284, %298
  %300 = fadd double %276, %299
  %301 = load double, double* bitcast (%dy2_type* @dy2 to double*)
  %302 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %303 = fmul double %301, %302
  %304 = add i64 %262, ptrtoint (%u_type* @u to i64)
  %305 = add i32 %265, -1
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 520
  %308 = add i64 %307, %304
  %309 = add i64 %272, %308
  %310 = add i64 %309, 8
  %311 = inttoptr i64 %310 to double*
  %312 = load double, double* %311
  %313 = add i64 %267, %304
  %314 = add i64 %272, %313
  %315 = load <2 x i32>, <2 x i32>* %2056, align 1
  %316 = extractelement <2 x i32> %315, i32 0
  store i32 %316, i32* %2079, align 1, !tbaa !1292
  %317 = extractelement <2 x i32> %315, i32 1
  store i32 %317, i32* %2081, align 1, !tbaa !1292
  %318 = add i64 %314, 8
  %319 = load double, double* %2086, align 1
  %320 = inttoptr i64 %318 to double*
  %321 = load double, double* %320
  %322 = fmul double %319, %321
  %323 = fsub double %312, %322
  %324 = mul nsw i64 %286, 520
  %325 = add i64 %324, %304
  %326 = add i64 %272, %325
  %327 = add i64 %326, 8
  %328 = inttoptr i64 %327 to double*
  %329 = load double, double* %328
  %330 = fadd double %323, %329
  %331 = fmul double %303, %330
  %332 = fadd double %300, %331
  %333 = add i64 %262, ptrtoint (%rsd_type* @rsd to i64)
  %334 = add i64 %267, %333
  %335 = add i64 %272, %334
  %336 = add i64 %335, 8
  %337 = inttoptr i64 %336 to double*
  store double %332, double* %337
  %338 = inttoptr i64 %629 to i32*
  %339 = load i32, i32* %338
  %340 = sext i32 %339 to i64
  %341 = mul nsw i64 %340, 6760
  %342 = add i64 %341, ptrtoint (%rsd_type* @rsd to i64)
  %343 = inttoptr i64 %633 to i32*
  %344 = load i32, i32* %343
  %345 = sext i32 %344 to i64
  %346 = mul nsw i64 %345, 520
  %347 = add i64 %346, %342
  %348 = inttoptr i64 %632 to i32*
  %349 = load i32, i32* %348
  %350 = sext i32 %349 to i64
  %351 = mul nsw i64 %350, 40
  %352 = add i64 %351, %347
  %353 = add i64 %352, 16
  %354 = inttoptr i64 %353 to double*
  %355 = load double, double* %354
  %356 = load <2 x i32>, <2 x i32>* %2087, align 1
  %357 = extractelement <2 x i32> %356, i32 0
  store i32 %357, i32* %2058, align 1, !tbaa !1292
  %358 = extractelement <2 x i32> %356, i32 1
  store i32 %358, i32* %2060, align 1, !tbaa !1292
  %359 = load double, double* %2065, align 1
  %360 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %361 = fmul double %359, %360
  %362 = load double, double* %4826, align 1
  %363 = fmul double %361, %362
  %364 = add i32 %344, 1
  %365 = sext i32 %364 to i64
  %366 = mul nsw i64 %365, 40
  %367 = load i64, i64* %6, align 8
  %368 = add i64 %366, %367
  %369 = add i64 %368, 16
  %370 = inttoptr i64 %369 to double*
  %371 = load double, double* %370
  %372 = mul nsw i64 %345, 40
  %373 = add i64 %372, %367
  %374 = add i64 %373, 16
  %375 = inttoptr i64 %374 to double*
  %376 = load double, double* %375
  %377 = fsub double %371, %376
  %378 = fmul double %363, %377
  %379 = fadd double %355, %378
  %380 = load double, double* bitcast (%dy3_type* @dy3 to double*)
  %381 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %382 = fmul double %380, %381
  %383 = add i64 %341, ptrtoint (%u_type* @u to i64)
  %384 = add i32 %344, -1
  %385 = sext i32 %384 to i64
  %386 = mul nsw i64 %385, 520
  %387 = add i64 %386, %383
  %388 = add i64 %351, %387
  %389 = add i64 %388, 16
  %390 = inttoptr i64 %389 to double*
  %391 = load double, double* %390
  %392 = add i64 %346, %383
  %393 = add i64 %351, %392
  %394 = load <2 x i32>, <2 x i32>* %2056, align 1
  %395 = extractelement <2 x i32> %394, i32 0
  store i32 %395, i32* %2079, align 1, !tbaa !1292
  %396 = extractelement <2 x i32> %394, i32 1
  store i32 %396, i32* %2081, align 1, !tbaa !1292
  %397 = add i64 %393, 16
  %398 = load double, double* %2086, align 1
  %399 = inttoptr i64 %397 to double*
  %400 = load double, double* %399
  %401 = fmul double %398, %400
  %402 = fsub double %391, %401
  %403 = mul nsw i64 %365, 520
  %404 = add i64 %403, %383
  %405 = add i64 %351, %404
  %406 = add i64 %405, 16
  %407 = inttoptr i64 %406 to double*
  %408 = load double, double* %407
  %409 = fadd double %402, %408
  %410 = fmul double %382, %409
  %411 = fadd double %379, %410
  %412 = add i64 %341, ptrtoint (%rsd_type* @rsd to i64)
  %413 = add i64 %346, %412
  %414 = add i64 %351, %413
  %415 = add i64 %414, 16
  %416 = inttoptr i64 %415 to double*
  store double %411, double* %416
  %417 = inttoptr i64 %629 to i32*
  %418 = load i32, i32* %417
  %419 = sext i32 %418 to i64
  %420 = mul nsw i64 %419, 6760
  %421 = add i64 %420, ptrtoint (%rsd_type* @rsd to i64)
  %422 = inttoptr i64 %633 to i32*
  %423 = load i32, i32* %422
  %424 = sext i32 %423 to i64
  %425 = mul nsw i64 %424, 520
  %426 = add i64 %425, %421
  %427 = inttoptr i64 %632 to i32*
  %428 = load i32, i32* %427
  %429 = sext i32 %428 to i64
  %430 = mul nsw i64 %429, 40
  %431 = add i64 %430, %426
  %432 = add i64 %431, 24
  %433 = inttoptr i64 %432 to double*
  %434 = load double, double* %433
  %435 = load <2 x i32>, <2 x i32>* %2087, align 1
  %436 = extractelement <2 x i32> %435, i32 0
  store i32 %436, i32* %2058, align 1, !tbaa !1292
  %437 = extractelement <2 x i32> %435, i32 1
  store i32 %437, i32* %2060, align 1, !tbaa !1292
  %438 = load double, double* %2065, align 1
  %439 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %440 = fmul double %438, %439
  %441 = load double, double* %4826, align 1
  %442 = fmul double %440, %441
  %443 = add i32 %423, 1
  %444 = sext i32 %443 to i64
  %445 = mul nsw i64 %444, 40
  %446 = load i64, i64* %6, align 8
  %447 = add i64 %445, %446
  %448 = add i64 %447, 24
  %449 = inttoptr i64 %448 to double*
  %450 = load double, double* %449
  %451 = mul nsw i64 %424, 40
  %452 = add i64 %451, %446
  %453 = add i64 %452, 24
  %454 = inttoptr i64 %453 to double*
  %455 = load double, double* %454
  %456 = fsub double %450, %455
  %457 = fmul double %442, %456
  %458 = fadd double %434, %457
  %459 = load double, double* bitcast (%dy4_type* @dy4 to double*)
  %460 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %461 = fmul double %459, %460
  %462 = add i64 %420, ptrtoint (%u_type* @u to i64)
  %463 = add i32 %423, -1
  %464 = sext i32 %463 to i64
  %465 = mul nsw i64 %464, 520
  %466 = add i64 %465, %462
  %467 = add i64 %430, %466
  %468 = add i64 %467, 24
  %469 = inttoptr i64 %468 to double*
  %470 = load double, double* %469
  %471 = add i64 %425, %462
  %472 = add i64 %430, %471
  %473 = load <2 x i32>, <2 x i32>* %2056, align 1
  %474 = load <2 x i32>, <2 x i32>* %2057, align 1
  %475 = extractelement <2 x i32> %473, i32 0
  store i32 %475, i32* %2079, align 1, !tbaa !1292
  %476 = extractelement <2 x i32> %473, i32 1
  store i32 %476, i32* %2081, align 1, !tbaa !1292
  %477 = extractelement <2 x i32> %474, i32 0
  store i32 %477, i32* %2083, align 1, !tbaa !1292
  %478 = extractelement <2 x i32> %474, i32 1
  store i32 %478, i32* %2085, align 1, !tbaa !1292
  %479 = add i64 %472, 24
  %480 = load double, double* %2086, align 1
  %481 = inttoptr i64 %479 to double*
  %482 = load double, double* %481
  %483 = fmul double %480, %482
  store double %483, double* %2086, align 1, !tbaa !1264
  %484 = fsub double %470, %483
  %485 = mul nsw i64 %444, 520
  %486 = add i64 %485, %462
  %487 = add i64 %430, %486
  %488 = add i64 %487, 24
  %489 = inttoptr i64 %488 to double*
  %490 = load double, double* %489
  %491 = fadd double %484, %490
  store double %491, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %492 = fmul double %461, %491
  store double %492, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %493 = fadd double %458, %492
  %494 = add i64 %420, ptrtoint (%rsd_type* @rsd to i64)
  %495 = add i64 %425, %494
  %496 = add i64 %430, %495
  %497 = add i64 %496, 24
  %498 = inttoptr i64 %497 to double*
  store double %493, double* %498
  %499 = inttoptr i64 %629 to i32*
  %500 = load i32, i32* %499
  %501 = sext i32 %500 to i64
  %502 = mul nsw i64 %501, 6760
  %503 = add i64 %502, ptrtoint (%rsd_type* @rsd to i64)
  %504 = inttoptr i64 %633 to i32*
  %505 = load i32, i32* %504
  %506 = sext i32 %505 to i64
  %507 = mul nsw i64 %506, 520
  %508 = add i64 %507, %503
  %509 = inttoptr i64 %632 to i32*
  %510 = load i32, i32* %509
  %511 = sext i32 %510 to i64
  %512 = mul nsw i64 %511, 40
  %513 = add i64 %512, %508
  %514 = add i64 %513, 32
  %515 = inttoptr i64 %514 to double*
  %516 = load double, double* %515
  %517 = load double, double* %4830, align 1
  %518 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %519 = fmul double %517, %518
  %520 = load double, double* %4826, align 1
  %521 = fmul double %519, %520
  %522 = add i32 %505, 1
  %523 = zext i32 %522 to i64
  %524 = sext i32 %522 to i64
  %525 = mul nsw i64 %524, 40
  %526 = load i64, i64* %6, align 8
  %527 = add i64 %525, %526
  store i64 %527, i64* %8, align 8, !tbaa !1240
  %528 = add i64 %527, 32
  %529 = inttoptr i64 %528 to double*
  %530 = load double, double* %529
  %531 = mul nsw i64 %506, 40
  %532 = add i64 %531, %526
  %533 = add i64 %532, 32
  %534 = inttoptr i64 %533 to double*
  %535 = load double, double* %534
  %536 = fsub double %530, %535
  %537 = fmul double %521, %536
  %538 = fadd double %516, %537
  %539 = load double, double* bitcast (%dy5_type* @dy5 to double*)
  %540 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %541 = fmul double %539, %540
  %542 = add i64 %502, ptrtoint (%u_type* @u to i64)
  %543 = add i32 %505, -1
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %544, 520
  %546 = add i64 %545, %542
  %547 = add i64 %512, %546
  %548 = add i64 %547, 32
  %549 = inttoptr i64 %548 to double*
  %550 = load double, double* %549
  %551 = add i64 %507, %542
  %552 = add i64 %512, %551
  store i64 %552, i64* %7, align 8, !tbaa !1240
  %553 = add i64 %552, 32
  %554 = load double, double* %4822, align 1
  %555 = inttoptr i64 %553 to double*
  %556 = load double, double* %555
  %557 = fmul double %554, %556
  store double %557, double* %4822, align 1, !tbaa !1264
  %558 = fsub double %550, %557
  store i64 %523, i64* %11, align 8, !tbaa !1240
  %559 = mul nsw i64 %524, 520
  %560 = add i64 %559, %542
  store i64 %512, i64* %6, align 8, !tbaa !1240
  %561 = add i64 %512, %560
  %562 = add i64 %561, 32
  %563 = inttoptr i64 %562 to double*
  %564 = load double, double* %563
  %565 = fadd double %558, %564
  store double %565, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %566 = fmul double %541, %565
  store double %566, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %567 = fadd double %538, %566
  store double %567, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %568 = add i64 %502, ptrtoint (%rsd_type* @rsd to i64)
  %569 = add i64 %507, %568
  %570 = add i64 %512, %569
  %571 = add i64 %570, 32
  %572 = inttoptr i64 %571 to double*
  store double %567, double* %572
  %573 = inttoptr i64 %633 to i32*
  %574 = load i32, i32* %573
  %575 = add i32 %574, 1
  %576 = inttoptr i64 %633 to i32*
  store i32 %575, i32* %576
  %577 = add i64 %4039, -16
  br label %block_415d9e

block_417d9c:                                     ; preds = %block_417d84, %block_417d92
  %578 = phi %struct.Memory* [ %4091, %block_417d84 ], [ %2918, %block_417d92 ]
  %579 = load i64, i64* %9, align 8
  %580 = add i64 %579, 1312
  %581 = icmp ugt i64 %579, -1313
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %24, align 1, !tbaa !1245
  %583 = trunc i64 %580 to i32
  %584 = and i32 %583, 255
  %585 = tail call i32 @llvm.ctpop.i32(i32 %584) #11
  %586 = trunc i32 %585 to i8
  %587 = and i8 %586, 1
  %588 = xor i8 %587, 1
  store i8 %588, i8* %25, align 1, !tbaa !1259
  %589 = xor i64 %580, %579
  %590 = lshr i64 %589, 4
  %591 = trunc i64 %590 to i8
  %592 = and i8 %591, 1
  store i8 %592, i8* %26, align 1, !tbaa !1263
  %593 = icmp eq i64 %580, 0
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %27, align 1, !tbaa !1260
  %595 = lshr i64 %580, 63
  %596 = trunc i64 %595 to i8
  store i8 %596, i8* %28, align 1, !tbaa !1261
  %597 = lshr i64 %579, 63
  %598 = xor i64 %595, %597
  %599 = add nuw nsw i64 %598, %595
  %600 = icmp eq i64 %599, 2
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %29, align 1, !tbaa !1262
  %602 = add i64 %579, 1320
  %603 = inttoptr i64 %580 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %10, align 8, !tbaa !1240
  %605 = inttoptr i64 %602 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %3, align 8, !tbaa !1240
  %607 = add i64 %579, 1328
  store i64 %607, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %578

block_4155a3:                                     ; preds = %block_416c89, %block_41559c
  %608 = phi i64 [ %630, %block_41559c ], [ %3401, %block_416c89 ]
  %609 = phi %struct.Memory* [ %627, %block_41559c ], [ %2131, %block_416c89 ]
  %610 = inttoptr i64 %629 to i32*
  %611 = load i32, i32* %610
  %612 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %613 = add i32 %612, -1
  %614 = sub i32 %611, %613
  %615 = lshr i32 %614, 31
  %616 = lshr i32 %611, 31
  %617 = lshr i32 %613, 31
  %618 = xor i32 %617, %616
  %619 = xor i32 %615, %616
  %620 = add nuw nsw i32 %619, %618
  %621 = icmp eq i32 %620, 2
  %622 = icmp ne i32 %615, 0
  %623 = xor i1 %622, %621
  %624 = select i1 %623, i64 21, i64 5881
  %625 = add i64 %608, %624
  br i1 %623, label %block_4155b8, label %block_416c9c

block_41559c:                                     ; preds = %block_415592, %block_415584
  %626 = phi i64 [ %2127, %block_415584 ], [ %4295, %block_415592 ]
  %627 = phi %struct.Memory* [ %2123, %block_415584 ], [ %4294, %block_415592 ]
  %628 = load i64, i64* %10, align 8
  %629 = add i64 %628, -12
  %630 = add i64 %626, 7
  %631 = inttoptr i64 %629 to i32*
  store i32 1, i32* %631
  %632 = add i64 %628, -4
  %633 = add i64 %628, -8
  %634 = add i64 %628, -1104
  %635 = add i64 %628, -24
  %636 = add i64 %628, -16
  %637 = add i64 %628, -32
  %638 = add i64 %628, -1152
  %639 = add i64 %628, -1160
  %640 = add i64 %628, -1168
  %641 = add i64 %628, -1176
  %642 = add i64 %628, -1248
  %643 = add i64 %628, -1256
  %644 = add i64 %628, -1264
  %645 = add i64 %628, -1272
  %646 = bitcast i64* %4823 to <2 x i32>*
  br label %block_4155a3

block_4141eb:                                     ; preds = %block_4141db
  %647 = add i64 %146, 7
  %648 = inttoptr i64 %2066 to i32*
  store i32 0, i32* %648
  br label %block_4141f2

block_415980:                                     ; preds = %block_415970
  %649 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1256) to double*)
  store double %649, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %650 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1264) to double*)
  store double %650, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %651 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1272) to double*)
  store double %651, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %652 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  store double %652, double* %2052, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2054, align 1, !tbaa !1264
  store i64 ptrtoint (%rho_i_type* @rho_i to i64), i64* %6, align 8, !tbaa !1240
  %653 = inttoptr i64 %629 to i32*
  %654 = load i32, i32* %653
  %655 = sext i32 %654 to i64
  %656 = mul nsw i64 %655, 1352
  %657 = add i64 %656, ptrtoint (%rho_i_type* @rho_i to i64)
  %658 = sext i32 %3470 to i64
  %659 = mul nsw i64 %658, 104
  %660 = add i64 %659, %657
  %661 = inttoptr i64 %632 to i32*
  %662 = load i32, i32* %661
  %663 = sext i32 %662 to i64
  %664 = shl nsw i64 %663, 3
  %665 = add i64 %664, %660
  %666 = inttoptr i64 %665 to double*
  %667 = load double, double* %666
  %668 = inttoptr i64 %637 to double*
  store double %667, double* %668
  %669 = inttoptr i64 %637 to double*
  %670 = load double, double* %669
  %671 = inttoptr i64 %629 to i32*
  %672 = load i32, i32* %671
  %673 = sext i32 %672 to i64
  %674 = mul nsw i64 %673, 6760
  %675 = add i64 %674, ptrtoint (%u_type* @u to i64)
  %676 = inttoptr i64 %633 to i32*
  %677 = load i32, i32* %676
  %678 = sext i32 %677 to i64
  %679 = mul nsw i64 %678, 520
  %680 = add i64 %679, %675
  %681 = inttoptr i64 %632 to i32*
  %682 = load i32, i32* %681
  %683 = sext i32 %682 to i64
  %684 = mul nsw i64 %683, 40
  %685 = add i64 %684, %680
  %686 = add i64 %685, 8
  %687 = inttoptr i64 %686 to double*
  %688 = load double, double* %687
  %689 = fmul double %670, %688
  %690 = inttoptr i64 %638 to double*
  store double %689, double* %690
  %691 = inttoptr i64 %637 to double*
  %692 = load double, double* %691
  %693 = inttoptr i64 %629 to i32*
  %694 = load i32, i32* %693
  %695 = sext i32 %694 to i64
  %696 = mul nsw i64 %695, 6760
  %697 = add i64 %696, ptrtoint (%u_type* @u to i64)
  %698 = inttoptr i64 %633 to i32*
  %699 = load i32, i32* %698
  %700 = sext i32 %699 to i64
  %701 = mul nsw i64 %700, 520
  %702 = add i64 %701, %697
  %703 = inttoptr i64 %632 to i32*
  %704 = load i32, i32* %703
  %705 = sext i32 %704 to i64
  %706 = mul nsw i64 %705, 40
  %707 = add i64 %706, %702
  %708 = add i64 %707, 16
  %709 = inttoptr i64 %708 to double*
  %710 = load double, double* %709
  %711 = fmul double %692, %710
  %712 = inttoptr i64 %639 to double*
  store double %711, double* %712
  %713 = inttoptr i64 %637 to double*
  %714 = load double, double* %713
  %715 = inttoptr i64 %629 to i32*
  %716 = load i32, i32* %715
  %717 = sext i32 %716 to i64
  %718 = mul nsw i64 %717, 6760
  %719 = add i64 %718, ptrtoint (%u_type* @u to i64)
  %720 = inttoptr i64 %633 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = mul nsw i64 %722, 520
  %724 = add i64 %723, %719
  %725 = inttoptr i64 %632 to i32*
  %726 = load i32, i32* %725
  %727 = sext i32 %726 to i64
  %728 = mul nsw i64 %727, 40
  %729 = add i64 %728, %724
  %730 = add i64 %729, 24
  %731 = inttoptr i64 %730 to double*
  %732 = load double, double* %731
  %733 = fmul double %714, %732
  %734 = inttoptr i64 %640 to double*
  store double %733, double* %734
  %735 = inttoptr i64 %637 to double*
  %736 = load double, double* %735
  %737 = inttoptr i64 %629 to i32*
  %738 = load i32, i32* %737
  %739 = sext i32 %738 to i64
  %740 = mul nsw i64 %739, 6760
  %741 = add i64 %740, ptrtoint (%u_type* @u to i64)
  %742 = inttoptr i64 %633 to i32*
  %743 = load i32, i32* %742
  %744 = sext i32 %743 to i64
  %745 = mul nsw i64 %744, 520
  %746 = add i64 %745, %741
  %747 = inttoptr i64 %632 to i32*
  %748 = load i32, i32* %747
  %749 = sext i32 %748 to i64
  %750 = mul nsw i64 %749, 40
  %751 = add i64 %750, %746
  store i64 %751, i64* %8, align 8, !tbaa !1240
  %752 = add i64 %751, 32
  %753 = inttoptr i64 %752 to double*
  %754 = load double, double* %753
  %755 = fmul double %736, %754
  %756 = inttoptr i64 %641 to double*
  store double %755, double* %756
  %757 = inttoptr i64 %629 to i32*
  %758 = load i32, i32* %757
  %759 = sext i32 %758 to i64
  %760 = mul nsw i64 %759, 1352
  %761 = load i64, i64* %6, align 8
  %762 = add i64 %760, %761
  %763 = inttoptr i64 %633 to i32*
  %764 = load i32, i32* %763
  %765 = add i32 %764, -1
  %766 = sext i32 %765 to i64
  %767 = mul nsw i64 %766, 104
  %768 = add i64 %767, %762
  %769 = inttoptr i64 %632 to i32*
  %770 = load i32, i32* %769
  %771 = sext i32 %770 to i64
  %772 = shl nsw i64 %771, 3
  %773 = add i64 %772, %768
  %774 = inttoptr i64 %773 to double*
  %775 = load double, double* %774
  %776 = inttoptr i64 %637 to double*
  store double %775, double* %776
  %777 = inttoptr i64 %637 to double*
  %778 = load double, double* %777
  %779 = inttoptr i64 %629 to i32*
  %780 = load i32, i32* %779
  %781 = sext i32 %780 to i64
  %782 = mul nsw i64 %781, 6760
  %783 = add i64 %782, ptrtoint (%u_type* @u to i64)
  %784 = inttoptr i64 %633 to i32*
  %785 = load i32, i32* %784
  %786 = add i32 %785, -1
  %787 = sext i32 %786 to i64
  %788 = mul nsw i64 %787, 520
  %789 = add i64 %788, %783
  %790 = inttoptr i64 %632 to i32*
  %791 = load i32, i32* %790
  %792 = sext i32 %791 to i64
  %793 = mul nsw i64 %792, 40
  %794 = add i64 %793, %789
  %795 = add i64 %794, 8
  %796 = inttoptr i64 %795 to double*
  %797 = load double, double* %796
  %798 = fmul double %778, %797
  %799 = inttoptr i64 %642 to double*
  store double %798, double* %799
  %800 = inttoptr i64 %637 to double*
  %801 = load double, double* %800
  %802 = inttoptr i64 %629 to i32*
  %803 = load i32, i32* %802
  %804 = sext i32 %803 to i64
  %805 = mul nsw i64 %804, 6760
  %806 = add i64 %805, ptrtoint (%u_type* @u to i64)
  %807 = inttoptr i64 %633 to i32*
  %808 = load i32, i32* %807
  %809 = add i32 %808, -1
  %810 = sext i32 %809 to i64
  %811 = mul nsw i64 %810, 520
  %812 = add i64 %811, %806
  %813 = inttoptr i64 %632 to i32*
  %814 = load i32, i32* %813
  %815 = sext i32 %814 to i64
  %816 = mul nsw i64 %815, 40
  %817 = add i64 %816, %812
  %818 = add i64 %817, 16
  %819 = inttoptr i64 %818 to double*
  %820 = load double, double* %819
  %821 = fmul double %801, %820
  %822 = inttoptr i64 %643 to double*
  store double %821, double* %822
  %823 = inttoptr i64 %637 to double*
  %824 = load double, double* %823
  %825 = inttoptr i64 %629 to i32*
  %826 = load i32, i32* %825
  %827 = sext i32 %826 to i64
  %828 = mul nsw i64 %827, 6760
  %829 = add i64 %828, ptrtoint (%u_type* @u to i64)
  %830 = inttoptr i64 %633 to i32*
  %831 = load i32, i32* %830
  %832 = add i32 %831, -1
  %833 = sext i32 %832 to i64
  %834 = mul nsw i64 %833, 520
  %835 = add i64 %834, %829
  %836 = inttoptr i64 %632 to i32*
  %837 = load i32, i32* %836
  %838 = sext i32 %837 to i64
  %839 = mul nsw i64 %838, 40
  %840 = add i64 %839, %835
  store i64 %840, i64* %7, align 8, !tbaa !1240
  %841 = add i64 %840, 24
  %842 = inttoptr i64 %841 to double*
  %843 = load double, double* %842
  %844 = fmul double %824, %843
  %845 = inttoptr i64 %644 to double*
  store double %844, double* %845
  %846 = inttoptr i64 %637 to double*
  %847 = load double, double* %846
  %848 = inttoptr i64 %629 to i32*
  %849 = load i32, i32* %848
  %850 = sext i32 %849 to i64
  %851 = mul nsw i64 %850, 6760
  %852 = add i64 %851, ptrtoint (%u_type* @u to i64)
  %853 = inttoptr i64 %633 to i32*
  %854 = load i32, i32* %853
  %855 = add i32 %854, -1
  %856 = zext i32 %855 to i64
  store i64 %856, i64* %11, align 8, !tbaa !1240
  %857 = sext i32 %855 to i64
  %858 = mul nsw i64 %857, 520
  %859 = add i64 %858, %852
  %860 = inttoptr i64 %632 to i32*
  %861 = load i32, i32* %860
  %862 = sext i32 %861 to i64
  %863 = mul nsw i64 %862, 40
  %864 = add i64 %863, %859
  %865 = add i64 %864, 32
  %866 = inttoptr i64 %865 to double*
  %867 = load double, double* %866
  %868 = fmul double %847, %867
  %869 = inttoptr i64 %645 to double*
  store double %868, double* %869
  %870 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %871 = inttoptr i64 %638 to double*
  %872 = load double, double* %871
  %873 = inttoptr i64 %642 to double*
  %874 = load double, double* %873
  %875 = fsub double %872, %874
  %876 = fmul double %870, %875
  %877 = inttoptr i64 %633 to i32*
  %878 = load i32, i32* %877
  %879 = sext i32 %878 to i64
  %880 = mul nsw i64 %879, 40
  %881 = add i64 %880, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %882 = inttoptr i64 %881 to double*
  store double %876, double* %882
  %883 = load double, double* %2052, align 1
  %884 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %885 = fmul double %883, %884
  %886 = inttoptr i64 %639 to double*
  %887 = load double, double* %886
  %888 = inttoptr i64 %643 to double*
  %889 = load double, double* %888
  %890 = fsub double %887, %889
  %891 = fmul double %890, %885
  %892 = inttoptr i64 %633 to i32*
  %893 = load i32, i32* %892
  %894 = sext i32 %893 to i64
  %895 = mul nsw i64 %894, 40
  %896 = add i64 %895, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %897 = inttoptr i64 %896 to double*
  store double %891, double* %897
  %898 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %899 = inttoptr i64 %640 to double*
  %900 = load double, double* %899
  %901 = inttoptr i64 %644 to double*
  %902 = load double, double* %901
  %903 = fsub double %900, %902
  %904 = fmul double %903, %898
  %905 = inttoptr i64 %633 to i32*
  %906 = load i32, i32* %905
  %907 = sext i32 %906 to i64
  %908 = mul nsw i64 %907, 40
  %909 = add i64 %908, ptrtoint (%flux_type* @flux to i64)
  store i64 %909, i64* %6, align 8, !tbaa !1240
  %910 = add i64 %908, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %911 = inttoptr i64 %910 to double*
  store double %904, double* %911
  %912 = load double, double* %4830, align 1
  %913 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %914 = fmul double %912, %913
  %915 = inttoptr i64 %638 to double*
  %916 = load double, double* %915
  %917 = fmul double %916, %916
  %918 = inttoptr i64 %639 to double*
  %919 = load double, double* %918
  %920 = fmul double %919, %919
  %921 = fadd double %920, %917
  %922 = inttoptr i64 %640 to double*
  %923 = load double, double* %922
  %924 = fmul double %923, %923
  %925 = fadd double %924, %921
  %926 = inttoptr i64 %642 to double*
  %927 = load double, double* %926
  %928 = fmul double %927, %927
  %929 = inttoptr i64 %643 to double*
  %930 = load double, double* %929
  %931 = fmul double %930, %930
  %932 = fadd double %931, %928
  %933 = inttoptr i64 %644 to double*
  %934 = load double, double* %933
  %935 = fmul double %934, %934
  store double %935, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %936 = fadd double %935, %932
  %937 = fsub double %925, %936
  %938 = fmul double %937, %914
  %939 = load double, double* %4826, align 1
  %940 = fmul double %913, %939
  store double %931, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %941 = fsub double %920, %931
  store double %941, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %942 = fmul double %941, %940
  %943 = fadd double %942, %938
  %944 = load double, double* %4822, align 1
  %945 = fmul double %913, %944
  %946 = inttoptr i64 %641 to double*
  %947 = load double, double* %946
  %948 = inttoptr i64 %645 to double*
  %949 = load double, double* %948
  %950 = fsub double %947, %949
  store double %950, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %951 = fmul double %950, %945
  store double %951, double* %4822, align 1, !tbaa !1264
  %952 = fadd double %951, %943
  store double %952, double* %4830, align 1, !tbaa !1264
  %953 = inttoptr i64 %633 to i32*
  %954 = load i32, i32* %953
  %955 = sext i32 %954 to i64
  %956 = mul nsw i64 %955, 40
  %957 = add i64 %956, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %958 = inttoptr i64 %957 to double*
  store double %952, double* %958
  %959 = inttoptr i64 %633 to i32*
  %960 = load i32, i32* %959
  %961 = add i32 %960, 1
  %962 = inttoptr i64 %633 to i32*
  store i32 %961, i32* %962
  %963 = add i64 %3483, -16
  br label %block_415970

block_417d7a:                                     ; preds = %block_417d6c
  store i64 4, i64* %8, align 8, !tbaa !1240
  %964 = add i64 %3809, -82362
  %965 = add i64 %3809, 10
  %966 = load i64, i64* %9, align 8, !tbaa !1240
  %967 = add i64 %966, -8
  %968 = inttoptr i64 %967 to i64*
  store i64 %965, i64* %968
  store i64 %967, i64* %9, align 8, !tbaa !1240
  %969 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %964, %struct.Memory* %2274)
  %970 = load i64, i64* %3, align 8
  br label %block_417d84

block_416972:                                     ; preds = %block_416968
  %971 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  store double %971, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %972 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %972, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %973 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %974 = inttoptr i64 %629 to i32*
  %975 = load i32, i32* %974
  %976 = sext i32 %975 to i64
  %977 = mul nsw i64 %976, 6760
  %978 = add i64 %977, ptrtoint (%rsd_type* @rsd to i64)
  %979 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %980 = add i32 %979, -3
  %981 = sext i32 %980 to i64
  %982 = mul nsw i64 %981, 520
  %983 = add i64 %982, %978
  %984 = inttoptr i64 %632 to i32*
  %985 = load i32, i32* %984
  %986 = sext i32 %985 to i64
  %987 = mul nsw i64 %986, 40
  %988 = add i64 %987, %983
  %989 = sext i32 %1117 to i64
  %990 = shl nsw i64 %989, 3
  %991 = add i64 %990, %988
  %992 = inttoptr i64 %991 to double*
  %993 = load double, double* %992
  store double %993, double* %2052, align 1, !tbaa !1264
  %994 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %994, double* %2065, align 1, !tbaa !1264
  %995 = add i64 %977, ptrtoint (%u_type* @u to i64)
  %996 = add i32 %979, -5
  %997 = sext i32 %996 to i64
  %998 = mul nsw i64 %997, 520
  %999 = add i64 %998, %995
  %1000 = add i64 %987, %999
  %1001 = add i64 %990, %1000
  %1002 = inttoptr i64 %1001 to double*
  %1003 = load double, double* %1002
  %1004 = add i32 %979, -4
  %1005 = sext i32 %1004 to i64
  %1006 = mul nsw i64 %1005, 520
  %1007 = add i64 %1006, %995
  %1008 = add i64 %987, %1007
  %1009 = bitcast double %972 to <2 x i32>
  %1010 = extractelement <2 x i32> %1009, i32 0
  store i32 %1010, i32* %2079, align 1, !tbaa !1292
  %1011 = extractelement <2 x i32> %1009, i32 1
  store i32 %1011, i32* %2081, align 1, !tbaa !1292
  store i32 0, i32* %2083, align 1, !tbaa !1292
  store i32 0, i32* %2085, align 1, !tbaa !1292
  %1012 = add i64 %990, %1008
  %1013 = load double, double* %2086, align 1
  %1014 = inttoptr i64 %1012 to double*
  %1015 = load double, double* %1014
  %1016 = fmul double %1013, %1015
  store double %1016, double* %2086, align 1, !tbaa !1264
  %1017 = fsub double %1003, %1016
  %1018 = add i64 %982, %995
  %1019 = add i64 %987, %1018
  %1020 = add i64 %990, %1019
  %1021 = inttoptr i64 %1020 to double*
  %1022 = load double, double* %1021
  %1023 = fmul double %973, %1022
  %1024 = fadd double %1017, %1023
  %1025 = add i64 %977, ptrtoint (%u_type* @u to i64)
  %1026 = add i32 %979, -2
  %1027 = sext i32 %1026 to i64
  %1028 = mul nsw i64 %1027, 520
  %1029 = add i64 %1028, %1025
  %1030 = add i64 %987, %1029
  %1031 = load <2 x i32>, <2 x i32>* %2096, align 1
  %1032 = extractelement <2 x i32> %1031, i32 0
  store i32 %1032, i32* %2097, align 1, !tbaa !1292
  %1033 = extractelement <2 x i32> %1031, i32 1
  store i32 %1033, i32* %2099, align 1, !tbaa !1292
  %1034 = add i64 %990, %1030
  %1035 = load double, double* %4830, align 1
  %1036 = inttoptr i64 %1034 to double*
  %1037 = load double, double* %1036
  %1038 = fmul double %1035, %1037
  %1039 = fsub double %1024, %1038
  store double %1039, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %1040 = load double, double* %2065, align 1
  %1041 = fmul double %1040, %1039
  %1042 = load double, double* %2052, align 1
  %1043 = fsub double %1042, %1041
  %1044 = add i64 %977, ptrtoint (%rsd_type* @rsd to i64)
  %1045 = add i64 %982, %1044
  %1046 = add i64 %987, %1045
  %1047 = add i64 %990, %1046
  %1048 = inttoptr i64 %1047 to double*
  store double %1043, double* %1048
  %1049 = inttoptr i64 %629 to i32*
  %1050 = load i32, i32* %1049
  %1051 = sext i32 %1050 to i64
  %1052 = mul nsw i64 %1051, 6760
  %1053 = add i64 %1052, ptrtoint (%rsd_type* @rsd to i64)
  %1054 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %1055 = add i32 %1054, -2
  %1056 = zext i32 %1055 to i64
  %1057 = sext i32 %1055 to i64
  %1058 = mul nsw i64 %1057, 520
  %1059 = add i64 %1058, %1053
  %1060 = inttoptr i64 %632 to i32*
  %1061 = load i32, i32* %1060
  %1062 = sext i32 %1061 to i64
  %1063 = mul nsw i64 %1062, 40
  %1064 = add i64 %1063, %1059
  %1065 = inttoptr i64 %636 to i32*
  %1066 = load i32, i32* %1065
  %1067 = sext i32 %1066 to i64
  %1068 = shl nsw i64 %1067, 3
  %1069 = add i64 %1068, %1064
  %1070 = inttoptr i64 %1069 to double*
  %1071 = load double, double* %1070
  %1072 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %1073 = add i64 %1052, ptrtoint (%u_type* @u to i64)
  %1074 = add i32 %1054, -4
  %1075 = sext i32 %1074 to i64
  %1076 = mul nsw i64 %1075, 520
  %1077 = add i64 %1076, %1073
  %1078 = add i64 %1063, %1077
  %1079 = add i64 %1068, %1078
  %1080 = inttoptr i64 %1079 to double*
  %1081 = load double, double* %1080
  %1082 = add i64 %1052, ptrtoint (%u_type* @u to i64)
  %1083 = add i32 %1054, -3
  %1084 = sext i32 %1083 to i64
  %1085 = mul nsw i64 %1084, 520
  %1086 = add i64 %1085, %1082
  %1087 = add i64 %1063, %1086
  store i64 %1087, i64* %7, align 8, !tbaa !1240
  %1088 = add i64 %1068, %1087
  %1089 = load double, double* %4826, align 1
  %1090 = inttoptr i64 %1088 to double*
  %1091 = load double, double* %1090
  %1092 = fmul double %1089, %1091
  store double %1092, double* %4826, align 1, !tbaa !1264
  %1093 = fsub double %1081, %1092
  %1094 = add i64 %1058, %1082
  %1095 = add i64 %1063, %1094
  store i64 %1067, i64* %6, align 8, !tbaa !1240
  %1096 = add i64 %1068, %1095
  %1097 = load double, double* %4822, align 1
  %1098 = inttoptr i64 %1096 to double*
  %1099 = load double, double* %1098
  %1100 = fmul double %1097, %1099
  store double %1100, double* %4822, align 1, !tbaa !1264
  %1101 = fadd double %1093, %1100
  store double %1101, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %1102 = fmul double %1072, %1101
  store double %1102, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %1103 = fsub double %1071, %1102
  store double %1103, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %1104 = add i64 %1052, ptrtoint (%rsd_type* @rsd to i64)
  store i64 %1056, i64* %8, align 8, !tbaa !1240
  %1105 = add i64 %1058, %1104
  %1106 = add i64 %1063, %1105
  %1107 = add i64 %1068, %1106
  %1108 = inttoptr i64 %1107 to double*
  store double %1103, double* %1108
  %1109 = inttoptr i64 %636 to i32*
  %1110 = load i32, i32* %1109
  %1111 = add i32 %1110, 1
  %1112 = inttoptr i64 %636 to i32*
  store i32 %1111, i32* %1112
  %1113 = add i64 %1127, -10
  br label %block_416968

block_416968:                                     ; preds = %block_416961, %block_416972
  %1114 = phi i64 [ %2241, %block_416961 ], [ %1113, %block_416972 ]
  %1115 = phi %struct.Memory* [ %2131, %block_416961 ], [ %1115, %block_416972 ]
  %1116 = inttoptr i64 %636 to i32*
  %1117 = load i32, i32* %1116
  %1118 = add i32 %1117, -5
  %1119 = lshr i32 %1118, 31
  %1120 = lshr i32 %1117, 31
  %1121 = xor i32 %1119, %1120
  %1122 = add nuw nsw i32 %1121, %1120
  %1123 = icmp eq i32 %1122, 2
  %1124 = icmp ne i32 %1119, 0
  %1125 = xor i1 %1124, %1123
  %1126 = select i1 %1125, i64 10, i64 782
  %1127 = add i64 %1114, %1126
  br i1 %1125, label %block_416972, label %block_416c76

block_4141fc:                                     ; preds = %block_4141f2
  %1128 = inttoptr i64 %2045 to i32*
  %1129 = load i32, i32* %1128
  %1130 = sext i32 %1129 to i64
  %1131 = mul nsw i64 %1130, 6760
  %1132 = add i64 %1131, ptrtoint (%rsd_type* @rsd to i64)
  %1133 = inttoptr i64 %2048 to i32*
  %1134 = load i32, i32* %1133
  %1135 = sext i32 %1134 to i64
  %1136 = mul nsw i64 %1135, 520
  %1137 = add i64 %1136, %1132
  %1138 = inttoptr i64 %2049 to i32*
  %1139 = load i32, i32* %1138
  %1140 = sext i32 %1139 to i64
  %1141 = mul nsw i64 %1140, 40
  %1142 = add i64 %1141, %1137
  %1143 = sext i32 %2111 to i64
  %1144 = shl nsw i64 %1143, 3
  %1145 = add i64 %1144, %1142
  %1146 = inttoptr i64 %1145 to double*
  %1147 = load double, double* %1146
  %1148 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1149 = add i32 %1139, 1
  %1150 = sext i32 %1149 to i64
  %1151 = mul nsw i64 %1150, 40
  %1152 = add i64 %1151, ptrtoint (%flux_type* @flux to i64)
  store i64 %1152, i64* %7, align 8, !tbaa !1240
  %1153 = add i64 %1144, %1152
  %1154 = inttoptr i64 %1153 to double*
  %1155 = load double, double* %1154
  %1156 = add i32 %1139, -1
  %1157 = zext i32 %1156 to i64
  store i64 %1157, i64* %8, align 8, !tbaa !1240
  %1158 = sext i32 %1156 to i64
  %1159 = mul nsw i64 %1158, 40
  %1160 = add i64 %1159, ptrtoint (%flux_type* @flux to i64)
  store i64 %1143, i64* %6, align 8, !tbaa !1240
  %1161 = add i64 %1144, %1160
  %1162 = inttoptr i64 %1161 to double*
  %1163 = load double, double* %1162
  %1164 = fsub double %1155, %1163
  store double %1164, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %1165 = fmul double %1148, %1164
  store double %1165, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %1166 = fsub double %1147, %1165
  store double %1166, double* %4822, align 1, !tbaa !1264
  store i64 0, i64* %4823, align 1, !tbaa !1264
  %1167 = inttoptr i64 %1145 to double*
  store double %1166, double* %1167
  %1168 = inttoptr i64 %2066 to i32*
  %1169 = load i32, i32* %1168
  %1170 = add i32 %1169, 1
  %1171 = inttoptr i64 %2066 to i32*
  store i32 %1170, i32* %1171
  %1172 = add i64 %2121, -10
  br label %block_4141f2

block_417d59:                                     ; preds = %block_416cf0
  %1173 = inttoptr i64 %2422 to i32*
  %1174 = load i32, i32* %1173
  %1175 = add i32 %1174, 1
  %1176 = inttoptr i64 %2422 to i32*
  store i32 %1175, i32* %1176
  %1177 = add i64 %4810, -4227
  br label %block_416cd6

block_415953:                                     ; preds = %block_41587e
  %1178 = inttoptr i64 %633 to i32*
  %1179 = load i32, i32* %1178
  %1180 = add i32 %1179, 1
  %1181 = inttoptr i64 %633 to i32*
  store i32 %1180, i32* %1181
  %1182 = add i64 %3794, -236
  br label %block_415867

block_413c38:                                     ; preds = %block_413cf2, %block_413c31
  %1183 = phi i64 [ %1301, %block_413c31 ], [ %4012, %block_413cf2 ]
  %1184 = phi %struct.Memory* [ %4297, %block_413c31 ], [ %1283, %block_413cf2 ]
  %1185 = inttoptr i64 %4820 to i32*
  %1186 = load i32, i32* %1185
  %1187 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %1188 = sub i32 %1186, %1187
  %1189 = lshr i32 %1188, 31
  %1190 = lshr i32 %1186, 31
  %1191 = lshr i32 %1187, 31
  %1192 = xor i32 %1191, %1190
  %1193 = xor i32 %1189, %1190
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = icmp eq i32 %1194, 2
  %1196 = icmp ne i32 %1189, 0
  %1197 = xor i1 %1196, %1195
  %1198 = select i1 %1197, i64 16, i64 666
  %1199 = add i64 %1183, %1198
  br i1 %1197, label %block_413c48, label %block_413ed2

block_41788c:                                     ; preds = %block_417885, %block_417896
  %1200 = phi i64 [ %3487, %block_417885 ], [ %3228, %block_417896 ]
  %1201 = phi %struct.Memory* [ %3851, %block_417885 ], [ %1201, %block_417896 ]
  %1202 = inttoptr i64 %2430 to i32*
  %1203 = load i32, i32* %1202
  %1204 = add i32 %1203, -5
  %1205 = lshr i32 %1204, 31
  %1206 = lshr i32 %1203, 31
  %1207 = xor i32 %1205, %1206
  %1208 = add nuw nsw i32 %1207, %1206
  %1209 = icmp eq i32 %1208, 2
  %1210 = icmp ne i32 %1205, 0
  %1211 = xor i1 %1210, %1209
  %1212 = select i1 %1211, i64 10, i64 316
  %1213 = add i64 %1200, %1212
  br i1 %1211, label %block_417896, label %block_4179c8

block_416752:                                     ; preds = %block_41674b, %block_41675c
  %1214 = phi i64 [ %4238, %block_41674b ], [ %2235, %block_41675c ]
  %1215 = phi %struct.Memory* [ %1249, %block_41674b ], [ %1215, %block_41675c ]
  %1216 = inttoptr i64 %636 to i32*
  %1217 = load i32, i32* %1216
  %1218 = add i32 %1217, -5
  %1219 = lshr i32 %1218, 31
  %1220 = lshr i32 %1217, 31
  %1221 = xor i32 %1219, %1220
  %1222 = add nuw nsw i32 %1221, %1220
  %1223 = icmp eq i32 %1222, 2
  %1224 = icmp ne i32 %1219, 0
  %1225 = xor i1 %1224, %1223
  %1226 = select i1 %1225, i64 10, i64 463
  %1227 = add i64 %1214, %1226
  br i1 %1225, label %block_41675c, label %block_416921

block_4155d9:                                     ; preds = %block_4155e9, %block_4155d2
  %1228 = phi i64 [ %147, %block_4155d2 ], [ %1881, %block_4155e9 ]
  %1229 = phi %struct.Memory* [ %190, %block_4155d2 ], [ %1229, %block_4155e9 ]
  %1230 = inttoptr i64 %633 to i32*
  %1231 = load i32, i32* %1230
  %1232 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %1233 = sub i32 %1231, %1232
  %1234 = lshr i32 %1233, 31
  %1235 = lshr i32 %1231, 31
  %1236 = lshr i32 %1232, 31
  %1237 = xor i32 %1236, %1235
  %1238 = xor i32 %1234, %1235
  %1239 = add nuw nsw i32 %1238, %1237
  %1240 = icmp eq i32 %1239, 2
  %1241 = icmp ne i32 %1234, 0
  %1242 = xor i1 %1241, %1240
  %1243 = select i1 %1242, i64 16, i64 644
  %1244 = add i64 %1228, %1243
  br i1 %1242, label %block_4155e9, label %block_41585d

block_41713f:                                     ; preds = %block_417082
  %1245 = add i32 %3849, 1
  %1246 = inttoptr i64 %2426 to i32*
  store i32 %1245, i32* %1246
  %1247 = add i64 %3847, -217
  br label %block_417066

block_41673b:                                     ; preds = %block_41673b.preheader, %block_416921
  %1248 = phi i64 [ %1664, %block_416921 ], [ %1689, %block_41673b.preheader ]
  %1249 = phi %struct.Memory* [ %1215, %block_416921 ], [ %1671, %block_41673b.preheader ]
  %1250 = inttoptr i64 %632 to i32*
  %1251 = load i32, i32* %1250
  %1252 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %1253 = sub i32 %1251, %1252
  %1254 = lshr i32 %1253, 31
  %1255 = lshr i32 %1251, 31
  %1256 = lshr i32 %1252, 31
  %1257 = xor i32 %1256, %1255
  %1258 = xor i32 %1254, %1255
  %1259 = add nuw nsw i32 %1258, %1257
  %1260 = icmp eq i32 %1259, 2
  %1261 = icmp ne i32 %1254, 0
  %1262 = xor i1 %1261, %1260
  %1263 = select i1 %1262, i64 16, i64 505
  %1264 = add i64 %1248, %1263
  br i1 %1262, label %block_41674b, label %block_416934

block_417b2d:                                     ; preds = %block_417b37, %block_417b2d.preheader
  %1265 = phi i64 [ %4441, %block_417b37 ], [ %184, %block_417b2d.preheader ]
  %1266 = phi %struct.Memory* [ %1266, %block_417b37 ], [ %167, %block_417b2d.preheader ]
  %1267 = inttoptr i64 %2430 to i32*
  %1268 = load i32, i32* %1267
  %1269 = add i32 %1268, -5
  %1270 = lshr i32 %1269, 31
  %1271 = lshr i32 %1268, 31
  %1272 = xor i32 %1270, %1271
  %1273 = add nuw nsw i32 %1272, %1271
  %1274 = icmp eq i32 %1273, 2
  %1275 = icmp ne i32 %1270, 0
  %1276 = xor i1 %1275, %1274
  %1277 = select i1 %1276, i64 10, i64 537
  %1278 = add i64 %1265, %1277
  br i1 %1276, label %block_417b37, label %block_417d46

block_415d94:                                     ; preds = %block_415970
  %1279 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1280 = add i64 %3483, 10
  %1281 = inttoptr i64 %633 to i32*
  store i32 %1279, i32* %1281
  br label %block_415d9e

block_413c4f:                                     ; preds = %block_413c48, %block_413c59
  %1282 = phi i64 [ %4096, %block_413c48 ], [ %4072, %block_413c59 ]
  %1283 = phi %struct.Memory* [ %1184, %block_413c48 ], [ %1283, %block_413c59 ]
  %1284 = inttoptr i64 %4821 to i32*
  %1285 = load i32, i32* %1284
  %1286 = add i32 %1285, -5
  %1287 = lshr i32 %1286, 31
  %1288 = lshr i32 %1285, 31
  %1289 = xor i32 %1287, %1288
  %1290 = add nuw nsw i32 %1289, %1288
  %1291 = icmp eq i32 %1290, 2
  %1292 = icmp ne i32 %1287, 0
  %1293 = xor i1 %1292, %1291
  %1294 = select i1 %1293, i64 10, i64 163
  %1295 = add i64 %1282, %1294
  br i1 %1293, label %block_413c59, label %block_413cf2

block_416934:                                     ; preds = %block_41673b
  %1296 = inttoptr i64 %633 to i32*
  %1297 = load i32, i32* %1296
  %1298 = add i32 %1297, 1
  %1299 = inttoptr i64 %633 to i32*
  store i32 %1298, i32* %1299
  %1300 = add i64 %1264, -536
  br label %block_41671c

block_413c31:                                     ; preds = %block_413c21
  %1301 = add i64 %4312, 7
  %1302 = inttoptr i64 %4820 to i32*
  store i32 0, i32* %1302
  br label %block_413c38

block_415966:                                     ; preds = %block_415867
  %1303 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1304 = add i64 %3884, 10
  %1305 = inttoptr i64 %633 to i32*
  store i32 %1303, i32* %1305
  br label %block_415970

block_414722:                                     ; preds = %block_414712
  %1306 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %1306, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  store i64 ptrtoint (%flux_type* @flux to i64), i64* %6, align 8, !tbaa !1240
  %1307 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %1307, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %1308 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %1308, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %1309 = inttoptr i64 %2045 to i32*
  %1310 = load i32, i32* %1309
  %1311 = sext i32 %1310 to i64
  %1312 = mul nsw i64 %1311, 6760
  %1313 = add i64 %1312, ptrtoint (%rsd_type* @rsd to i64)
  %1314 = inttoptr i64 %2048 to i32*
  %1315 = load i32, i32* %1314
  %1316 = sext i32 %1315 to i64
  %1317 = mul nsw i64 %1316, 520
  %1318 = add i64 %1317, %1313
  %1319 = sext i32 %2028 to i64
  %1320 = mul nsw i64 %1319, 40
  %1321 = add i64 %1320, %1318
  %1322 = inttoptr i64 %1321 to double*
  %1323 = load double, double* %1322
  %1324 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  %1325 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1326 = fmul double %1324, %1325
  %1327 = add i64 %1312, ptrtoint (%u_type* @u to i64)
  %1328 = add i64 %1317, %1327
  %1329 = add i32 %2028, -1
  %1330 = sext i32 %1329 to i64
  %1331 = mul nsw i64 %1330, 40
  %1332 = add i64 %1331, %1328
  %1333 = inttoptr i64 %1332 to double*
  %1334 = load double, double* %1333
  %1335 = add i64 %1320, %1328
  %1336 = bitcast double %1306 to <2 x i32>
  %1337 = extractelement <2 x i32> %1336, i32 0
  store i32 %1337, i32* %2079, align 1, !tbaa !1292
  %1338 = extractelement <2 x i32> %1336, i32 1
  store i32 %1338, i32* %2081, align 1, !tbaa !1292
  %1339 = load double, double* %2086, align 1
  %1340 = inttoptr i64 %1335 to double*
  %1341 = load double, double* %1340
  %1342 = fmul double %1339, %1341
  %1343 = fsub double %1334, %1342
  %1344 = add i32 %2028, 1
  %1345 = sext i32 %1344 to i64
  %1346 = mul nsw i64 %1345, 40
  %1347 = add i64 %1346, %1328
  %1348 = inttoptr i64 %1347 to double*
  %1349 = load double, double* %1348
  %1350 = fadd double %1343, %1349
  %1351 = fmul double %1326, %1350
  %1352 = fadd double %1323, %1351
  %1353 = add i64 %1312, ptrtoint (%rsd_type* @rsd to i64)
  %1354 = add i64 %1317, %1353
  %1355 = add i64 %1320, %1354
  %1356 = inttoptr i64 %1355 to double*
  store double %1352, double* %1356
  %1357 = inttoptr i64 %2045 to i32*
  %1358 = load i32, i32* %1357
  %1359 = sext i32 %1358 to i64
  %1360 = mul nsw i64 %1359, 6760
  %1361 = add i64 %1360, ptrtoint (%rsd_type* @rsd to i64)
  %1362 = inttoptr i64 %2048 to i32*
  %1363 = load i32, i32* %1362
  %1364 = sext i32 %1363 to i64
  %1365 = mul nsw i64 %1364, 520
  %1366 = add i64 %1365, %1361
  %1367 = inttoptr i64 %2049 to i32*
  %1368 = load i32, i32* %1367
  %1369 = sext i32 %1368 to i64
  %1370 = mul nsw i64 %1369, 40
  %1371 = add i64 %1370, %1366
  %1372 = add i64 %1371, 8
  %1373 = inttoptr i64 %1372 to double*
  %1374 = load double, double* %1373
  %1375 = load <2 x i32>, <2 x i32>* %2087, align 1
  %1376 = extractelement <2 x i32> %1375, i32 0
  store i32 %1376, i32* %2058, align 1, !tbaa !1292
  %1377 = extractelement <2 x i32> %1375, i32 1
  store i32 %1377, i32* %2060, align 1, !tbaa !1292
  %1378 = load double, double* %2065, align 1
  %1379 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %1380 = fmul double %1378, %1379
  %1381 = load double, double* %4826, align 1
  %1382 = fmul double %1380, %1381
  %1383 = add i32 %1368, 1
  %1384 = sext i32 %1383 to i64
  %1385 = mul nsw i64 %1384, 40
  %1386 = load i64, i64* %6, align 8
  %1387 = add i64 %1385, %1386
  %1388 = add i64 %1387, 8
  %1389 = inttoptr i64 %1388 to double*
  %1390 = load double, double* %1389
  %1391 = add i64 %1370, %1386
  %1392 = add i64 %1391, 8
  %1393 = inttoptr i64 %1392 to double*
  %1394 = load double, double* %1393
  %1395 = fsub double %1390, %1394
  %1396 = fmul double %1382, %1395
  %1397 = fadd double %1374, %1396
  %1398 = load double, double* bitcast (%dx2_type* @dx2 to double*)
  %1399 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1400 = fmul double %1398, %1399
  %1401 = add i64 %1360, ptrtoint (%u_type* @u to i64)
  %1402 = add i64 %1365, %1401
  %1403 = add i32 %1368, -1
  %1404 = sext i32 %1403 to i64
  %1405 = mul nsw i64 %1404, 40
  %1406 = add i64 %1405, %1402
  %1407 = add i64 %1406, 8
  %1408 = inttoptr i64 %1407 to double*
  %1409 = load double, double* %1408
  %1410 = add i64 %1370, %1402
  %1411 = load <2 x i32>, <2 x i32>* %2056, align 1
  %1412 = extractelement <2 x i32> %1411, i32 0
  store i32 %1412, i32* %2079, align 1, !tbaa !1292
  %1413 = extractelement <2 x i32> %1411, i32 1
  store i32 %1413, i32* %2081, align 1, !tbaa !1292
  %1414 = add i64 %1410, 8
  %1415 = load double, double* %2086, align 1
  %1416 = inttoptr i64 %1414 to double*
  %1417 = load double, double* %1416
  %1418 = fmul double %1415, %1417
  %1419 = fsub double %1409, %1418
  %1420 = add i64 %1385, %1402
  %1421 = add i64 %1420, 8
  %1422 = inttoptr i64 %1421 to double*
  %1423 = load double, double* %1422
  %1424 = fadd double %1419, %1423
  %1425 = fmul double %1400, %1424
  %1426 = fadd double %1397, %1425
  %1427 = add i64 %1360, ptrtoint (%rsd_type* @rsd to i64)
  %1428 = add i64 %1365, %1427
  %1429 = add i64 %1370, %1428
  %1430 = add i64 %1429, 8
  %1431 = inttoptr i64 %1430 to double*
  store double %1426, double* %1431
  %1432 = inttoptr i64 %2045 to i32*
  %1433 = load i32, i32* %1432
  %1434 = sext i32 %1433 to i64
  %1435 = mul nsw i64 %1434, 6760
  %1436 = add i64 %1435, ptrtoint (%rsd_type* @rsd to i64)
  %1437 = inttoptr i64 %2048 to i32*
  %1438 = load i32, i32* %1437
  %1439 = sext i32 %1438 to i64
  %1440 = mul nsw i64 %1439, 520
  %1441 = add i64 %1440, %1436
  %1442 = inttoptr i64 %2049 to i32*
  %1443 = load i32, i32* %1442
  %1444 = sext i32 %1443 to i64
  %1445 = mul nsw i64 %1444, 40
  %1446 = add i64 %1445, %1441
  %1447 = add i64 %1446, 16
  %1448 = inttoptr i64 %1447 to double*
  %1449 = load double, double* %1448
  %1450 = load <2 x i32>, <2 x i32>* %2087, align 1
  %1451 = extractelement <2 x i32> %1450, i32 0
  store i32 %1451, i32* %2058, align 1, !tbaa !1292
  %1452 = extractelement <2 x i32> %1450, i32 1
  store i32 %1452, i32* %2060, align 1, !tbaa !1292
  %1453 = load double, double* %2065, align 1
  %1454 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %1455 = fmul double %1453, %1454
  %1456 = load double, double* %4826, align 1
  %1457 = fmul double %1455, %1456
  %1458 = add i32 %1443, 1
  %1459 = sext i32 %1458 to i64
  %1460 = mul nsw i64 %1459, 40
  %1461 = load i64, i64* %6, align 8
  %1462 = add i64 %1460, %1461
  %1463 = add i64 %1462, 16
  %1464 = inttoptr i64 %1463 to double*
  %1465 = load double, double* %1464
  %1466 = add i64 %1445, %1461
  %1467 = add i64 %1466, 16
  %1468 = inttoptr i64 %1467 to double*
  %1469 = load double, double* %1468
  %1470 = fsub double %1465, %1469
  %1471 = fmul double %1457, %1470
  %1472 = fadd double %1449, %1471
  %1473 = load double, double* bitcast (%dx3_type* @dx3 to double*)
  %1474 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1475 = fmul double %1473, %1474
  %1476 = add i64 %1435, ptrtoint (%u_type* @u to i64)
  %1477 = add i64 %1440, %1476
  %1478 = add i32 %1443, -1
  %1479 = sext i32 %1478 to i64
  %1480 = mul nsw i64 %1479, 40
  %1481 = add i64 %1480, %1477
  %1482 = add i64 %1481, 16
  %1483 = inttoptr i64 %1482 to double*
  %1484 = load double, double* %1483
  %1485 = add i64 %1445, %1477
  %1486 = load <2 x i32>, <2 x i32>* %2056, align 1
  %1487 = extractelement <2 x i32> %1486, i32 0
  store i32 %1487, i32* %2079, align 1, !tbaa !1292
  %1488 = extractelement <2 x i32> %1486, i32 1
  store i32 %1488, i32* %2081, align 1, !tbaa !1292
  %1489 = add i64 %1485, 16
  %1490 = load double, double* %2086, align 1
  %1491 = inttoptr i64 %1489 to double*
  %1492 = load double, double* %1491
  %1493 = fmul double %1490, %1492
  %1494 = fsub double %1484, %1493
  %1495 = add i64 %1460, %1477
  %1496 = add i64 %1495, 16
  %1497 = inttoptr i64 %1496 to double*
  %1498 = load double, double* %1497
  %1499 = fadd double %1494, %1498
  %1500 = fmul double %1475, %1499
  %1501 = fadd double %1472, %1500
  %1502 = add i64 %1435, ptrtoint (%rsd_type* @rsd to i64)
  %1503 = add i64 %1440, %1502
  %1504 = add i64 %1445, %1503
  %1505 = add i64 %1504, 16
  %1506 = inttoptr i64 %1505 to double*
  store double %1501, double* %1506
  %1507 = inttoptr i64 %2045 to i32*
  %1508 = load i32, i32* %1507
  %1509 = sext i32 %1508 to i64
  %1510 = mul nsw i64 %1509, 6760
  %1511 = add i64 %1510, ptrtoint (%rsd_type* @rsd to i64)
  %1512 = inttoptr i64 %2048 to i32*
  %1513 = load i32, i32* %1512
  %1514 = sext i32 %1513 to i64
  %1515 = mul nsw i64 %1514, 520
  %1516 = add i64 %1515, %1511
  %1517 = inttoptr i64 %2049 to i32*
  %1518 = load i32, i32* %1517
  %1519 = sext i32 %1518 to i64
  %1520 = mul nsw i64 %1519, 40
  %1521 = add i64 %1520, %1516
  %1522 = add i64 %1521, 24
  %1523 = inttoptr i64 %1522 to double*
  %1524 = load double, double* %1523
  %1525 = load <2 x i32>, <2 x i32>* %2087, align 1
  %1526 = extractelement <2 x i32> %1525, i32 0
  store i32 %1526, i32* %2058, align 1, !tbaa !1292
  %1527 = extractelement <2 x i32> %1525, i32 1
  store i32 %1527, i32* %2060, align 1, !tbaa !1292
  %1528 = load double, double* %2065, align 1
  %1529 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %1530 = fmul double %1528, %1529
  %1531 = load double, double* %4826, align 1
  %1532 = fmul double %1530, %1531
  %1533 = add i32 %1518, 1
  %1534 = sext i32 %1533 to i64
  %1535 = mul nsw i64 %1534, 40
  %1536 = load i64, i64* %6, align 8
  %1537 = add i64 %1535, %1536
  %1538 = add i64 %1537, 24
  %1539 = inttoptr i64 %1538 to double*
  %1540 = load double, double* %1539
  %1541 = add i64 %1520, %1536
  %1542 = add i64 %1541, 24
  %1543 = inttoptr i64 %1542 to double*
  %1544 = load double, double* %1543
  %1545 = fsub double %1540, %1544
  %1546 = fmul double %1532, %1545
  %1547 = fadd double %1524, %1546
  %1548 = load double, double* bitcast (%dx4_type* @dx4 to double*)
  %1549 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1550 = fmul double %1548, %1549
  %1551 = add i64 %1510, ptrtoint (%u_type* @u to i64)
  %1552 = add i64 %1515, %1551
  %1553 = add i32 %1518, -1
  %1554 = sext i32 %1553 to i64
  %1555 = mul nsw i64 %1554, 40
  %1556 = add i64 %1555, %1552
  %1557 = add i64 %1556, 24
  %1558 = inttoptr i64 %1557 to double*
  %1559 = load double, double* %1558
  %1560 = add i64 %1520, %1552
  %1561 = load <2 x i32>, <2 x i32>* %2056, align 1
  %1562 = load <2 x i32>, <2 x i32>* %2057, align 1
  %1563 = extractelement <2 x i32> %1561, i32 0
  store i32 %1563, i32* %2079, align 1, !tbaa !1292
  %1564 = extractelement <2 x i32> %1561, i32 1
  store i32 %1564, i32* %2081, align 1, !tbaa !1292
  %1565 = extractelement <2 x i32> %1562, i32 0
  store i32 %1565, i32* %2083, align 1, !tbaa !1292
  %1566 = extractelement <2 x i32> %1562, i32 1
  store i32 %1566, i32* %2085, align 1, !tbaa !1292
  %1567 = add i64 %1560, 24
  %1568 = load double, double* %2086, align 1
  %1569 = inttoptr i64 %1567 to double*
  %1570 = load double, double* %1569
  %1571 = fmul double %1568, %1570
  store double %1571, double* %2086, align 1, !tbaa !1264
  %1572 = fsub double %1559, %1571
  %1573 = add i64 %1535, %1552
  %1574 = add i64 %1573, 24
  %1575 = inttoptr i64 %1574 to double*
  %1576 = load double, double* %1575
  %1577 = fadd double %1572, %1576
  store double %1577, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %1578 = fmul double %1550, %1577
  store double %1578, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %1579 = fadd double %1547, %1578
  %1580 = add i64 %1510, ptrtoint (%rsd_type* @rsd to i64)
  %1581 = add i64 %1515, %1580
  %1582 = add i64 %1520, %1581
  %1583 = add i64 %1582, 24
  %1584 = inttoptr i64 %1583 to double*
  store double %1579, double* %1584
  %1585 = inttoptr i64 %2045 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  %1588 = mul nsw i64 %1587, 6760
  %1589 = add i64 %1588, ptrtoint (%rsd_type* @rsd to i64)
  %1590 = inttoptr i64 %2048 to i32*
  %1591 = load i32, i32* %1590
  %1592 = sext i32 %1591 to i64
  %1593 = mul nsw i64 %1592, 520
  %1594 = add i64 %1593, %1589
  %1595 = inttoptr i64 %2049 to i32*
  %1596 = load i32, i32* %1595
  %1597 = sext i32 %1596 to i64
  %1598 = mul nsw i64 %1597, 40
  %1599 = add i64 %1598, %1594
  %1600 = add i64 %1599, 32
  %1601 = inttoptr i64 %1600 to double*
  %1602 = load double, double* %1601
  %1603 = load double, double* %4830, align 1
  %1604 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %1605 = fmul double %1603, %1604
  %1606 = load double, double* %4826, align 1
  %1607 = fmul double %1605, %1606
  %1608 = add i32 %1596, 1
  %1609 = zext i32 %1608 to i64
  %1610 = sext i32 %1608 to i64
  %1611 = mul nsw i64 %1610, 40
  %1612 = load i64, i64* %6, align 8
  %1613 = add i64 %1611, %1612
  store i64 %1613, i64* %8, align 8, !tbaa !1240
  %1614 = add i64 %1613, 32
  %1615 = inttoptr i64 %1614 to double*
  %1616 = load double, double* %1615
  %1617 = add i64 %1598, %1612
  %1618 = add i64 %1617, 32
  %1619 = inttoptr i64 %1618 to double*
  %1620 = load double, double* %1619
  %1621 = fsub double %1616, %1620
  %1622 = fmul double %1607, %1621
  %1623 = fadd double %1602, %1622
  %1624 = load double, double* bitcast (%dx5_type* @dx5 to double*)
  %1625 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1626 = fmul double %1624, %1625
  %1627 = add i64 %1588, ptrtoint (%u_type* @u to i64)
  %1628 = add i64 %1593, %1627
  %1629 = add i32 %1596, -1
  %1630 = sext i32 %1629 to i64
  %1631 = mul nsw i64 %1630, 40
  %1632 = add i64 %1631, %1628
  %1633 = add i64 %1632, 32
  %1634 = inttoptr i64 %1633 to double*
  %1635 = load double, double* %1634
  %1636 = add i64 %1598, %1628
  store i64 %1636, i64* %7, align 8, !tbaa !1240
  %1637 = add i64 %1636, 32
  %1638 = load double, double* %4822, align 1
  %1639 = inttoptr i64 %1637 to double*
  %1640 = load double, double* %1639
  %1641 = fmul double %1638, %1640
  store double %1641, double* %4822, align 1, !tbaa !1264
  %1642 = fsub double %1635, %1641
  store i64 %1609, i64* %11, align 8, !tbaa !1240
  store i64 %1611, i64* %6, align 8, !tbaa !1240
  %1643 = add i64 %1611, %1628
  %1644 = add i64 %1643, 32
  %1645 = inttoptr i64 %1644 to double*
  %1646 = load double, double* %1645
  %1647 = fadd double %1642, %1646
  store double %1647, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %1648 = fmul double %1626, %1647
  store double %1648, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %1649 = fadd double %1623, %1648
  store double %1649, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %1650 = add i64 %1588, ptrtoint (%rsd_type* @rsd to i64)
  %1651 = add i64 %1593, %1650
  %1652 = add i64 %1598, %1651
  %1653 = add i64 %1652, 32
  %1654 = inttoptr i64 %1653 to double*
  store double %1649, double* %1654
  %1655 = inttoptr i64 %2049 to i32*
  %1656 = load i32, i32* %1655
  %1657 = add i32 %1656, 1
  %1658 = inttoptr i64 %2049 to i32*
  store i32 %1657, i32* %1658
  %1659 = add i64 %2041, -16
  br label %block_414712

block_416921:                                     ; preds = %block_416752
  %1660 = inttoptr i64 %632 to i32*
  %1661 = load i32, i32* %1660
  %1662 = add i32 %1661, 1
  %1663 = inttoptr i64 %632 to i32*
  store i32 %1662, i32* %1663
  %1664 = add i64 %1227, -486
  br label %block_41673b

block_415559:                                     ; preds = %block_413f36
  %1665 = inttoptr i64 %2045 to i32*
  %1666 = load i32, i32* %1665
  %1667 = add i32 %1666, 1
  %1668 = inttoptr i64 %2045 to i32*
  store i32 %1667, i32* %1668
  %1669 = add i64 %4276, -5698
  br label %block_413f17

block_41671c:                                     ; preds = %block_416715, %block_416934
  %1670 = phi i64 [ %3246, %block_416715 ], [ %1300, %block_416934 ]
  %1671 = phi %struct.Memory* [ %3230, %block_416715 ], [ %1249, %block_416934 ]
  %1672 = inttoptr i64 %633 to i32*
  %1673 = load i32, i32* %1672
  %1674 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %1675 = add i32 %1674, -3
  %1676 = sub i32 %1673, %1675
  %1677 = lshr i32 %1676, 31
  %1678 = lshr i32 %1673, 31
  %1679 = lshr i32 %1675, 31
  %1680 = xor i32 %1679, %1678
  %1681 = xor i32 %1677, %1678
  %1682 = add nuw nsw i32 %1681, %1680
  %1683 = icmp eq i32 %1682, 2
  %1684 = icmp ne i32 %1677, 0
  %1685 = xor i1 %1684, %1683
  %1686 = select i1 %1685, i64 21, i64 555
  %1687 = add i64 %1670, %1686
  %1688 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %1689 = add i64 %1687, 10
  %1690 = inttoptr i64 %632 to i32*
  store i32 %1688, i32* %1690
  br i1 %1685, label %block_41673b.preheader, label %block_416951.preheader

block_416951.preheader:                           ; preds = %block_41671c
  br label %block_416951

block_41673b.preheader:                           ; preds = %block_41671c
  br label %block_41673b

block_4155e9:                                     ; preds = %block_4155d9
  %1691 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %1691, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %1692 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %1692, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %1693 = inttoptr i64 %629 to i32*
  %1694 = load i32, i32* %1693
  %1695 = sext i32 %1694 to i64
  %1696 = mul nsw i64 %1695, 6760
  %1697 = add i64 %1696, ptrtoint (%u_type* @u to i64)
  %1698 = sext i32 %1231 to i64
  %1699 = mul nsw i64 %1698, 520
  %1700 = add i64 %1699, %1697
  %1701 = inttoptr i64 %632 to i32*
  %1702 = load i32, i32* %1701
  %1703 = sext i32 %1702 to i64
  %1704 = mul nsw i64 %1703, 40
  %1705 = add i64 %1704, %1700
  %1706 = add i64 %1705, 16
  %1707 = inttoptr i64 %1706 to double*
  %1708 = load double, double* %1707
  %1709 = mul nsw i64 %1698, 40
  %1710 = add i64 %1709, ptrtoint (%flux_type* @flux to i64)
  %1711 = inttoptr i64 %1710 to double*
  store double %1708, double* %1711
  %1712 = inttoptr i64 %629 to i32*
  %1713 = load i32, i32* %1712
  %1714 = sext i32 %1713 to i64
  %1715 = mul nsw i64 %1714, 6760
  %1716 = add i64 %1715, ptrtoint (%u_type* @u to i64)
  %1717 = inttoptr i64 %633 to i32*
  %1718 = load i32, i32* %1717
  %1719 = sext i32 %1718 to i64
  %1720 = mul nsw i64 %1719, 520
  %1721 = add i64 %1720, %1716
  %1722 = inttoptr i64 %632 to i32*
  %1723 = load i32, i32* %1722
  %1724 = sext i32 %1723 to i64
  %1725 = mul nsw i64 %1724, 40
  %1726 = add i64 %1725, %1721
  store i64 %1726, i64* %11, align 8, !tbaa !1240
  %1727 = add i64 %1726, 16
  %1728 = inttoptr i64 %1727 to double*
  %1729 = load double, double* %1728
  %1730 = mul nsw i64 %1714, 1352
  %1731 = add i64 %1730, ptrtoint (%rho_i_type* @rho_i to i64)
  %1732 = mul nsw i64 %1719, 104
  %1733 = add i64 %1732, %1731
  store i64 %1724, i64* %8, align 8, !tbaa !1240
  %1734 = shl nsw i64 %1724, 3
  %1735 = add i64 %1734, %1733
  %1736 = inttoptr i64 %1735 to double*
  %1737 = load double, double* %1736
  %1738 = fmul double %1729, %1737
  %1739 = inttoptr i64 %634 to double*
  store double %1738, double* %1739
  %1740 = inttoptr i64 %629 to i32*
  %1741 = load i32, i32* %1740
  %1742 = sext i32 %1741 to i64
  %1743 = mul nsw i64 %1742, 1352
  %1744 = add i64 %1743, ptrtoint (%qs_type* @qs to i64)
  %1745 = inttoptr i64 %633 to i32*
  %1746 = load i32, i32* %1745
  %1747 = sext i32 %1746 to i64
  %1748 = mul nsw i64 %1747, 104
  %1749 = add i64 %1748, %1744
  %1750 = inttoptr i64 %632 to i32*
  %1751 = load i32, i32* %1750
  %1752 = sext i32 %1751 to i64
  %1753 = shl nsw i64 %1752, 3
  %1754 = add i64 %1753, %1749
  %1755 = inttoptr i64 %1754 to double*
  %1756 = load double, double* %1755
  %1757 = inttoptr i64 %635 to double*
  store double %1756, double* %1757
  %1758 = inttoptr i64 %629 to i32*
  %1759 = load i32, i32* %1758
  %1760 = sext i32 %1759 to i64
  %1761 = mul nsw i64 %1760, 6760
  %1762 = add i64 %1761, ptrtoint (%u_type* @u to i64)
  %1763 = inttoptr i64 %633 to i32*
  %1764 = load i32, i32* %1763
  %1765 = sext i32 %1764 to i64
  %1766 = mul nsw i64 %1765, 520
  %1767 = add i64 %1766, %1762
  %1768 = inttoptr i64 %632 to i32*
  %1769 = load i32, i32* %1768
  %1770 = sext i32 %1769 to i64
  %1771 = mul nsw i64 %1770, 40
  %1772 = add i64 %1771, %1767
  %1773 = add i64 %1772, 8
  %1774 = inttoptr i64 %1773 to double*
  %1775 = load double, double* %1774
  %1776 = inttoptr i64 %634 to double*
  %1777 = load double, double* %1776
  %1778 = fmul double %1775, %1777
  %1779 = mul nsw i64 %1765, 40
  %1780 = add i64 %1779, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %1781 = inttoptr i64 %1780 to double*
  store double %1778, double* %1781
  %1782 = inttoptr i64 %629 to i32*
  %1783 = load i32, i32* %1782
  %1784 = sext i32 %1783 to i64
  %1785 = mul nsw i64 %1784, 6760
  %1786 = add i64 %1785, ptrtoint (%u_type* @u to i64)
  %1787 = inttoptr i64 %633 to i32*
  %1788 = load i32, i32* %1787
  %1789 = sext i32 %1788 to i64
  %1790 = mul nsw i64 %1789, 520
  %1791 = add i64 %1790, %1786
  %1792 = inttoptr i64 %632 to i32*
  %1793 = load i32, i32* %1792
  %1794 = sext i32 %1793 to i64
  %1795 = mul nsw i64 %1794, 40
  %1796 = add i64 %1795, %1791
  %1797 = add i64 %1796, 16
  %1798 = inttoptr i64 %1797 to double*
  %1799 = load double, double* %1798
  %1800 = inttoptr i64 %634 to double*
  %1801 = load double, double* %1800
  %1802 = fmul double %1799, %1801
  %1803 = add i64 %1796, 32
  %1804 = inttoptr i64 %1803 to double*
  %1805 = load double, double* %1804
  %1806 = inttoptr i64 %635 to double*
  %1807 = load double, double* %1806
  %1808 = fsub double %1805, %1807
  store double %1808, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %1809 = load <2 x i32>, <2 x i32>* %2056, align 1
  %1810 = load <2 x i32>, <2 x i32>* %2057, align 1
  %1811 = extractelement <2 x i32> %1809, i32 0
  store i32 %1811, i32* %2058, align 1, !tbaa !1292
  %1812 = extractelement <2 x i32> %1809, i32 1
  store i32 %1812, i32* %2060, align 1, !tbaa !1292
  %1813 = extractelement <2 x i32> %1810, i32 0
  store i32 %1813, i32* %2062, align 1, !tbaa !1292
  %1814 = extractelement <2 x i32> %1810, i32 1
  store i32 %1814, i32* %2064, align 1, !tbaa !1292
  %1815 = load double, double* %2065, align 1
  %1816 = fmul double %1815, %1808
  store double %1816, double* %2065, align 1, !tbaa !1264
  %1817 = fadd double %1802, %1816
  %1818 = mul nsw i64 %1789, 40
  %1819 = add i64 %1818, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %1820 = inttoptr i64 %1819 to double*
  store double %1817, double* %1820
  %1821 = inttoptr i64 %629 to i32*
  %1822 = load i32, i32* %1821
  %1823 = sext i32 %1822 to i64
  %1824 = mul nsw i64 %1823, 6760
  %1825 = add i64 %1824, ptrtoint (%u_type* @u to i64)
  %1826 = inttoptr i64 %633 to i32*
  %1827 = load i32, i32* %1826
  %1828 = sext i32 %1827 to i64
  %1829 = mul nsw i64 %1828, 520
  %1830 = add i64 %1829, %1825
  %1831 = inttoptr i64 %632 to i32*
  %1832 = load i32, i32* %1831
  %1833 = sext i32 %1832 to i64
  %1834 = mul nsw i64 %1833, 40
  %1835 = add i64 %1834, %1830
  %1836 = add i64 %1835, 24
  %1837 = inttoptr i64 %1836 to double*
  %1838 = load double, double* %1837
  %1839 = inttoptr i64 %634 to double*
  %1840 = load double, double* %1839
  %1841 = fmul double %1838, %1840
  store double %1841, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %1842 = mul nsw i64 %1828, 40
  %1843 = add i64 %1842, ptrtoint (%flux_type* @flux to i64)
  store i64 %1843, i64* %7, align 8, !tbaa !1240
  %1844 = add i64 %1842, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %1845 = inttoptr i64 %1844 to double*
  store double %1841, double* %1845
  %1846 = inttoptr i64 %629 to i32*
  %1847 = load i32, i32* %1846
  %1848 = sext i32 %1847 to i64
  %1849 = mul nsw i64 %1848, 6760
  %1850 = add i64 %1849, ptrtoint (%u_type* @u to i64)
  %1851 = inttoptr i64 %633 to i32*
  %1852 = load i32, i32* %1851
  %1853 = sext i32 %1852 to i64
  %1854 = mul nsw i64 %1853, 520
  %1855 = add i64 %1854, %1850
  %1856 = inttoptr i64 %632 to i32*
  %1857 = load i32, i32* %1856
  %1858 = sext i32 %1857 to i64
  %1859 = mul nsw i64 %1858, 40
  store i64 %1859, i64* %6, align 8, !tbaa !1240
  %1860 = add i64 %1859, %1855
  %1861 = add i64 %1860, 32
  %1862 = load double, double* %4826, align 1
  %1863 = inttoptr i64 %1861 to double*
  %1864 = load double, double* %1863
  %1865 = fmul double %1862, %1864
  %1866 = bitcast <2 x i32> %1809 to double
  %1867 = inttoptr i64 %635 to double*
  %1868 = load double, double* %1867
  %1869 = fmul double %1866, %1868
  store double %1869, double* %4822, align 1, !tbaa !1264
  store <2 x i32> %1810, <2 x i32>* %646, align 1, !tbaa !1264
  %1870 = fsub double %1865, %1869
  %1871 = inttoptr i64 %634 to double*
  %1872 = load double, double* %1871
  %1873 = fmul double %1870, %1872
  store double %1873, double* %4826, align 1, !tbaa !1264
  %1874 = mul nsw i64 %1853, 40
  %1875 = add i64 %1874, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %1876 = inttoptr i64 %1875 to double*
  store double %1873, double* %1876
  %1877 = inttoptr i64 %633 to i32*
  %1878 = load i32, i32* %1877
  %1879 = add i32 %1878, 1
  %1880 = inttoptr i64 %633 to i32*
  store i32 %1879, i32* %1880
  %1881 = add i64 %1244, -16
  br label %block_4155d9

block_416d17:                                     ; preds = %block_416d07
  store i64 ptrtoint (%rho_i_type* @rho_i to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%u_type* @u to i64), i64* %6, align 8, !tbaa !1240
  %1882 = sext i32 %4639 to i64
  %1883 = mul nsw i64 %1882, 6760
  %1884 = add i64 %1883, ptrtoint (%u_type* @u to i64)
  %1885 = inttoptr i64 %2422 to i32*
  %1886 = load i32, i32* %1885
  %1887 = sext i32 %1886 to i64
  %1888 = mul nsw i64 %1887, 520
  %1889 = add i64 %1888, %1884
  %1890 = inttoptr i64 %2425 to i32*
  %1891 = load i32, i32* %1890
  %1892 = sext i32 %1891 to i64
  %1893 = mul nsw i64 %1892, 40
  %1894 = add i64 %1893, %1889
  %1895 = inttoptr i64 %1894 to double*
  %1896 = load double, double* %1895
  %1897 = mul nsw i64 %1882, 48
  %1898 = add i64 %1897, %2427
  %1899 = inttoptr i64 %1898 to double*
  store double %1896, double* %1899
  %1900 = inttoptr i64 %2426 to i32*
  %1901 = load i32, i32* %1900
  %1902 = sext i32 %1901 to i64
  %1903 = mul nsw i64 %1902, 6760
  %1904 = add i64 %1903, ptrtoint (%u_type* @u to i64)
  %1905 = inttoptr i64 %2422 to i32*
  %1906 = load i32, i32* %1905
  %1907 = sext i32 %1906 to i64
  %1908 = mul nsw i64 %1907, 520
  %1909 = add i64 %1908, %1904
  %1910 = inttoptr i64 %2425 to i32*
  %1911 = load i32, i32* %1910
  %1912 = sext i32 %1911 to i64
  %1913 = mul nsw i64 %1912, 40
  %1914 = add i64 %1913, %1909
  %1915 = add i64 %1914, 8
  %1916 = inttoptr i64 %1915 to double*
  %1917 = load double, double* %1916
  %1918 = mul nsw i64 %1902, 48
  %1919 = add i64 %1918, %2427
  %1920 = add i64 %1919, 8
  %1921 = inttoptr i64 %1920 to double*
  store double %1917, double* %1921
  %1922 = inttoptr i64 %2426 to i32*
  %1923 = load i32, i32* %1922
  %1924 = sext i32 %1923 to i64
  %1925 = mul nsw i64 %1924, 6760
  %1926 = add i64 %1925, ptrtoint (%u_type* @u to i64)
  %1927 = inttoptr i64 %2422 to i32*
  %1928 = load i32, i32* %1927
  %1929 = sext i32 %1928 to i64
  %1930 = mul nsw i64 %1929, 520
  %1931 = add i64 %1930, %1926
  %1932 = inttoptr i64 %2425 to i32*
  %1933 = load i32, i32* %1932
  %1934 = sext i32 %1933 to i64
  %1935 = mul nsw i64 %1934, 40
  %1936 = add i64 %1935, %1931
  %1937 = add i64 %1936, 16
  %1938 = inttoptr i64 %1937 to double*
  %1939 = load double, double* %1938
  %1940 = mul nsw i64 %1924, 48
  %1941 = add i64 %1940, %2427
  %1942 = add i64 %1941, 16
  %1943 = inttoptr i64 %1942 to double*
  store double %1939, double* %1943
  %1944 = inttoptr i64 %2426 to i32*
  %1945 = load i32, i32* %1944
  %1946 = sext i32 %1945 to i64
  %1947 = mul nsw i64 %1946, 6760
  %1948 = add i64 %1947, ptrtoint (%u_type* @u to i64)
  %1949 = inttoptr i64 %2422 to i32*
  %1950 = load i32, i32* %1949
  %1951 = sext i32 %1950 to i64
  %1952 = mul nsw i64 %1951, 520
  %1953 = add i64 %1952, %1948
  %1954 = inttoptr i64 %2425 to i32*
  %1955 = load i32, i32* %1954
  %1956 = sext i32 %1955 to i64
  %1957 = mul nsw i64 %1956, 40
  %1958 = add i64 %1957, %1953
  %1959 = add i64 %1958, 24
  %1960 = inttoptr i64 %1959 to double*
  %1961 = load double, double* %1960
  %1962 = mul nsw i64 %1946, 48
  %1963 = add i64 %1962, %2427
  store i64 %1963, i64* %8, align 8, !tbaa !1240
  %1964 = add i64 %1963, 24
  %1965 = inttoptr i64 %1964 to double*
  store double %1961, double* %1965
  %1966 = inttoptr i64 %2426 to i32*
  %1967 = load i32, i32* %1966
  %1968 = sext i32 %1967 to i64
  %1969 = mul nsw i64 %1968, 6760
  %1970 = load i64, i64* %6, align 8
  %1971 = add i64 %1969, %1970
  %1972 = inttoptr i64 %2422 to i32*
  %1973 = load i32, i32* %1972
  %1974 = sext i32 %1973 to i64
  %1975 = mul nsw i64 %1974, 520
  %1976 = add i64 %1975, %1971
  %1977 = inttoptr i64 %2425 to i32*
  %1978 = load i32, i32* %1977
  %1979 = sext i32 %1978 to i64
  %1980 = mul nsw i64 %1979, 40
  %1981 = add i64 %1980, %1976
  %1982 = add i64 %1981, 32
  %1983 = inttoptr i64 %1982 to double*
  %1984 = load double, double* %1983
  %1985 = mul nsw i64 %1968, 48
  %1986 = add i64 %1985, %2427
  store i64 %1986, i64* %7, align 8, !tbaa !1240
  %1987 = add i64 %1986, 32
  %1988 = inttoptr i64 %1987 to double*
  store double %1984, double* %1988
  %1989 = inttoptr i64 %2426 to i32*
  %1990 = load i32, i32* %1989
  %1991 = sext i32 %1990 to i64
  %1992 = mul nsw i64 %1991, 1352
  %1993 = load i64, i64* %5, align 8
  %1994 = add i64 %1992, %1993
  %1995 = inttoptr i64 %2422 to i32*
  %1996 = load i32, i32* %1995
  %1997 = sext i32 %1996 to i64
  %1998 = mul nsw i64 %1997, 104
  %1999 = add i64 %1998, %1994
  %2000 = inttoptr i64 %2425 to i32*
  %2001 = load i32, i32* %2000
  %2002 = sext i32 %2001 to i64
  store i64 %2002, i64* %6, align 8, !tbaa !1240
  %2003 = shl nsw i64 %2002, 3
  %2004 = add i64 %2003, %1999
  %2005 = inttoptr i64 %2004 to double*
  %2006 = load double, double* %2005
  store double %2006, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %2007 = mul nsw i64 %1991, 48
  %2008 = add i64 %2007, %2427
  %2009 = add i64 %2008, 40
  %2010 = inttoptr i64 %2009 to double*
  store double %2006, double* %2010
  %2011 = inttoptr i64 %2426 to i32*
  %2012 = load i32, i32* %2011
  %2013 = add i32 %2012, 1
  %2014 = inttoptr i64 %2426 to i32*
  store i32 %2013, i32* %2014
  %2015 = add i64 %4652, -16
  br label %block_416d07

block_417b13:                                     ; preds = %block_4179eb
  %2016 = inttoptr i64 %2426 to i32*
  %2017 = load i32, i32* %2016
  %2018 = add i32 %2017, 1
  %2019 = inttoptr i64 %2426 to i32*
  store i32 %2018, i32* %2019
  %2020 = add i64 %162, -324
  br label %block_4179cf

block_41556c:                                     ; preds = %block_413f17
  %2021 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %2022 = icmp eq i32 %2021, 0
  %2023 = select i1 %2022, i64 24, i64 14
  %2024 = add i64 %3421, %2023
  br i1 %2022, label %block_415584, label %block_41557a

block_414712:                                     ; preds = %block_414708, %block_414722
  %2025 = phi i64 [ %2101, %block_414708 ], [ %1659, %block_414722 ]
  %2026 = phi %struct.Memory* [ %2244, %block_414708 ], [ %2026, %block_414722 ]
  %2027 = inttoptr i64 %2049 to i32*
  %2028 = load i32, i32* %2027
  %2029 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %2030 = sub i32 %2028, %2029
  %2031 = lshr i32 %2030, 31
  %2032 = lshr i32 %2028, 31
  %2033 = lshr i32 %2029, 31
  %2034 = xor i32 %2033, %2032
  %2035 = xor i32 %2031, %2032
  %2036 = add nuw nsw i32 %2035, %2034
  %2037 = icmp eq i32 %2036, 2
  %2038 = icmp ne i32 %2031, 0
  %2039 = xor i1 %2038, %2037
  %2040 = select i1 %2039, i64 16, i64 1750
  %2041 = add i64 %2025, %2040
  br i1 %2039, label %block_414722, label %block_414de8

block_413f10:                                     ; preds = %block_413f06, %block_413ef8
  %2042 = phi i64 [ %3350, %block_413ef8 ], [ %3802, %block_413f06 ]
  %2043 = phi %struct.Memory* [ %4778, %block_413ef8 ], [ %3801, %block_413f06 ]
  %2044 = load i64, i64* %10, align 8
  %2045 = add i64 %2044, -12
  %2046 = add i64 %2042, 7
  %2047 = inttoptr i64 %2045 to i32*
  store i32 1, i32* %2047
  %2048 = add i64 %2044, -8
  %2049 = add i64 %2044, -4
  %2050 = add i64 %2044, -1096
  %2051 = add i64 %2044, -24
  %2052 = bitcast %union.VectorReg* %15 to double*
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %2054 = bitcast i64* %2053 to double*
  %2055 = bitcast %union.VectorReg* %16 to i8*
  %2056 = bitcast [32 x %union.VectorReg]* %12 to <2 x i32>*
  %2057 = bitcast i64* %4823 to <2 x i32>*
  %2058 = bitcast %union.VectorReg* %16 to i32*
  %2059 = getelementptr inbounds i8, i8* %2055, i64 4
  %2060 = bitcast i8* %2059 to i32*
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %2062 = bitcast i64* %2061 to i32*
  %2063 = getelementptr inbounds i8, i8* %2055, i64 12
  %2064 = bitcast i8* %2063 to i32*
  %2065 = bitcast %union.VectorReg* %16 to double*
  %2066 = add i64 %2044, -16
  %2067 = add i64 %2044, -32
  %2068 = add i64 %2044, -1120
  %2069 = add i64 %2044, -1128
  %2070 = add i64 %2044, -1136
  %2071 = add i64 %2044, -1144
  %2072 = add i64 %2044, -1216
  %2073 = add i64 %2044, -1224
  %2074 = add i64 %2044, -1232
  %2075 = add i64 %2044, -1240
  %2076 = bitcast %union.VectorReg* %17 to double*
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %2078 = bitcast %union.VectorReg* %18 to i8*
  %2079 = bitcast %union.VectorReg* %18 to i32*
  %2080 = getelementptr inbounds i8, i8* %2078, i64 4
  %2081 = bitcast i8* %2080 to i32*
  %2082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %2083 = bitcast i64* %2082 to i32*
  %2084 = getelementptr inbounds i8, i8* %2078, i64 12
  %2085 = bitcast i8* %2084 to i32*
  %2086 = bitcast %union.VectorReg* %18 to double*
  %2087 = bitcast %union.VectorReg* %14 to <2 x i32>*
  %2088 = bitcast %union.VectorReg* %17 to i8*
  %2089 = bitcast %union.VectorReg* %17 to i32*
  %2090 = getelementptr inbounds i8, i8* %2088, i64 4
  %2091 = bitcast i8* %2090 to i32*
  %2092 = bitcast i64* %2077 to i32*
  %2093 = getelementptr inbounds i8, i8* %2088, i64 12
  %2094 = bitcast i8* %2093 to i32*
  %2095 = bitcast %union.VectorReg* %14 to i8*
  %2096 = bitcast %union.VectorReg* %13 to <2 x i32>*
  %2097 = bitcast %union.VectorReg* %14 to i32*
  %2098 = getelementptr inbounds i8, i8* %2095, i64 4
  %2099 = bitcast i8* %2098 to i32*
  br label %block_413f17

block_414708:                                     ; preds = %block_4142e4
  %2100 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %2101 = add i64 %2259, 10
  %2102 = inttoptr i64 %2049 to i32*
  store i32 %2100, i32* %2102
  br label %block_414712

block_416702:                                     ; preds = %block_4164a8
  %2103 = inttoptr i64 %632 to i32*
  %2104 = load i32, i32* %2103
  %2105 = add i32 %2104, 1
  %2106 = inttoptr i64 %632 to i32*
  store i32 %2105, i32* %2106
  %2107 = add i64 %3903, -625
  br label %block_416491

block_4141f2:                                     ; preds = %block_4141fc, %block_4141eb
  %2108 = phi i64 [ %647, %block_4141eb ], [ %1172, %block_4141fc ]
  %2109 = phi %struct.Memory* [ %131, %block_4141eb ], [ %2109, %block_4141fc ]
  %2110 = inttoptr i64 %2066 to i32*
  %2111 = load i32, i32* %2110
  %2112 = add i32 %2111, -5
  %2113 = lshr i32 %2112, 31
  %2114 = lshr i32 %2111, 31
  %2115 = xor i32 %2113, %2114
  %2116 = add nuw nsw i32 %2115, %2114
  %2117 = icmp eq i32 %2116, 2
  %2118 = icmp ne i32 %2113, 0
  %2119 = xor i1 %2118, %2117
  %2120 = select i1 %2119, i64 10, i64 213
  %2121 = add i64 %2108, %2120
  br i1 %2119, label %block_4141fc, label %block_4142c7

block_415584:                                     ; preds = %block_41557a, %block_41556c
  %2122 = phi i64 [ %2024, %block_41556c ], [ %2266, %block_41557a ]
  %2123 = phi %struct.Memory* [ %3405, %block_41556c ], [ %2265, %block_41557a ]
  %2124 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %2125 = icmp eq i32 %2124, 0
  %2126 = select i1 %2125, i64 24, i64 14
  %2127 = add i64 %2122, %2126
  br i1 %2125, label %block_41559c, label %block_415592

block_416d00:                                     ; preds = %block_416cf0
  %2128 = add i64 %4810, 7
  %2129 = inttoptr i64 %2426 to i32*
  store i32 0, i32* %2129
  br label %block_416d07

block_416951:                                     ; preds = %block_416c76, %block_416951.preheader
  %2130 = phi i64 [ %3814, %block_416c76 ], [ %1689, %block_416951.preheader ]
  %2131 = phi %struct.Memory* [ %1115, %block_416c76 ], [ %1671, %block_416951.preheader ]
  %2132 = inttoptr i64 %632 to i32*
  %2133 = load i32, i32* %2132
  %2134 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %2135 = sub i32 %2133, %2134
  %2136 = lshr i32 %2135, 31
  %2137 = lshr i32 %2133, 31
  %2138 = lshr i32 %2134, 31
  %2139 = xor i32 %2138, %2137
  %2140 = xor i32 %2136, %2137
  %2141 = add nuw nsw i32 %2140, %2139
  %2142 = icmp eq i32 %2141, 2
  %2143 = icmp ne i32 %2136, 0
  %2144 = xor i1 %2143, %2142
  %2145 = select i1 %2144, i64 16, i64 824
  %2146 = add i64 %2130, %2145
  br i1 %2144, label %block_416961, label %block_416c89

block_41675c:                                     ; preds = %block_416752
  %2147 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %2147, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %2148 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %2149 = inttoptr i64 %629 to i32*
  %2150 = load i32, i32* %2149
  %2151 = sext i32 %2150 to i64
  %2152 = mul nsw i64 %2151, 6760
  %2153 = add i64 %2152, ptrtoint (%rsd_type* @rsd to i64)
  %2154 = inttoptr i64 %633 to i32*
  %2155 = load i32, i32* %2154
  %2156 = sext i32 %2155 to i64
  %2157 = mul nsw i64 %2156, 520
  %2158 = add i64 %2157, %2153
  %2159 = inttoptr i64 %632 to i32*
  %2160 = load i32, i32* %2159
  %2161 = sext i32 %2160 to i64
  %2162 = mul nsw i64 %2161, 40
  %2163 = add i64 %2162, %2158
  %2164 = sext i32 %1217 to i64
  %2165 = shl nsw i64 %2164, 3
  %2166 = add i64 %2165, %2163
  %2167 = inttoptr i64 %2166 to double*
  %2168 = load double, double* %2167
  store double %2168, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %2169 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %2169, double* %2052, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2054, align 1, !tbaa !1264
  %2170 = add i64 %2152, ptrtoint (%u_type* @u to i64)
  %2171 = add i32 %2155, -2
  %2172 = sext i32 %2171 to i64
  %2173 = mul nsw i64 %2172, 520
  %2174 = add i64 %2173, %2170
  %2175 = add i64 %2162, %2174
  %2176 = add i64 %2165, %2175
  %2177 = inttoptr i64 %2176 to double*
  %2178 = load double, double* %2177
  %2179 = add i32 %2155, -1
  %2180 = sext i32 %2179 to i64
  %2181 = mul nsw i64 %2180, 520
  %2182 = add i64 %2181, %2170
  %2183 = add i64 %2162, %2182
  %2184 = bitcast double %2147 to <2 x i32>
  %2185 = extractelement <2 x i32> %2184, i32 0
  store i32 %2185, i32* %2089, align 1, !tbaa !1292
  %2186 = extractelement <2 x i32> %2184, i32 1
  store i32 %2186, i32* %2091, align 1, !tbaa !1292
  store i32 0, i32* %2092, align 1, !tbaa !1292
  store i32 0, i32* %2094, align 1, !tbaa !1292
  %2187 = add i64 %2165, %2183
  %2188 = load double, double* %2076, align 1
  %2189 = inttoptr i64 %2187 to double*
  %2190 = load double, double* %2189
  %2191 = fmul double %2188, %2190
  store double %2191, double* %2076, align 1, !tbaa !1264
  %2192 = fsub double %2178, %2191
  %2193 = add i64 %2157, %2170
  %2194 = add i64 %2162, %2193
  %2195 = add i64 %2165, %2194
  %2196 = inttoptr i64 %2195 to double*
  %2197 = load double, double* %2196
  %2198 = fmul double %2148, %2197
  store double %2198, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %2199 = fadd double %2192, %2198
  %2200 = add i64 %2152, ptrtoint (%u_type* @u to i64)
  %2201 = add i32 %2155, 1
  %2202 = sext i32 %2201 to i64
  %2203 = mul nsw i64 %2202, 520
  %2204 = add i64 %2203, %2200
  %2205 = add i64 %2162, %2204
  store i64 %2205, i64* %7, align 8, !tbaa !1240
  %2206 = add i64 %2165, %2205
  %2207 = load double, double* %4822, align 1
  %2208 = inttoptr i64 %2206 to double*
  %2209 = load double, double* %2208
  %2210 = fmul double %2207, %2209
  store double %2210, double* %4822, align 1, !tbaa !1264
  %2211 = fsub double %2199, %2210
  %2212 = add i32 %2155, 2
  %2213 = zext i32 %2212 to i64
  store i64 %2213, i64* %8, align 8, !tbaa !1240
  %2214 = sext i32 %2212 to i64
  %2215 = mul nsw i64 %2214, 520
  %2216 = add i64 %2215, %2200
  %2217 = add i64 %2162, %2216
  store i64 %2164, i64* %6, align 8, !tbaa !1240
  %2218 = add i64 %2165, %2217
  %2219 = inttoptr i64 %2218 to double*
  %2220 = load double, double* %2219
  %2221 = fadd double %2211, %2220
  store double %2221, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %2222 = load double, double* %2052, align 1
  %2223 = fmul double %2222, %2221
  store double %2223, double* %2052, align 1, !tbaa !1264
  %2224 = load double, double* %4830, align 1
  %2225 = fsub double %2224, %2223
  store double %2225, double* %4830, align 1, !tbaa !1264
  %2226 = add i64 %2152, ptrtoint (%rsd_type* @rsd to i64)
  %2227 = add i64 %2157, %2226
  %2228 = add i64 %2162, %2227
  %2229 = add i64 %2165, %2228
  %2230 = inttoptr i64 %2229 to double*
  store double %2225, double* %2230
  %2231 = inttoptr i64 %636 to i32*
  %2232 = load i32, i32* %2231
  %2233 = add i32 %2232, 1
  %2234 = inttoptr i64 %636 to i32*
  store i32 %2233, i32* %2234
  %2235 = add i64 %1227, -10
  br label %block_416752

block_413ee5:                                     ; preds = %block_413c21
  %2236 = inttoptr i64 %4816 to i32*
  %2237 = load i32, i32* %2236
  %2238 = add i32 %2237, 1
  %2239 = inttoptr i64 %4816 to i32*
  store i32 %2238, i32* %2239
  %2240 = add i64 %4312, -731
  br label %block_413c0a

block_416961:                                     ; preds = %block_416951
  %2241 = add i64 %2146, 7
  %2242 = inttoptr i64 %636 to i32*
  store i32 0, i32* %2242
  br label %block_416968

block_4142e4:                                     ; preds = %block_4142f4, %block_4142da
  %2243 = phi i64 [ %2268, %block_4142da ], [ %2798, %block_4142f4 ]
  %2244 = phi %struct.Memory* [ %131, %block_4142da ], [ %2244, %block_4142f4 ]
  %2245 = inttoptr i64 %2049 to i32*
  %2246 = load i32, i32* %2245
  %2247 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %2248 = sub i32 %2246, %2247
  %2249 = lshr i32 %2248, 31
  %2250 = lshr i32 %2246, 31
  %2251 = lshr i32 %2247, 31
  %2252 = xor i32 %2251, %2250
  %2253 = xor i32 %2249, %2250
  %2254 = add nuw nsw i32 %2253, %2252
  %2255 = icmp eq i32 %2254, 2
  %2256 = icmp ne i32 %2249, 0
  %2257 = xor i1 %2256, %2255
  %2258 = select i1 %2257, i64 16, i64 1060
  %2259 = add i64 %2243, %2258
  br i1 %2257, label %block_4142f4, label %block_414708

block_41557a:                                     ; preds = %block_41556c
  store i64 2, i64* %8, align 8, !tbaa !1240
  %2260 = add i64 %2024, -72122
  %2261 = add i64 %2024, 10
  %2262 = load i64, i64* %9, align 8, !tbaa !1240
  %2263 = add i64 %2262, -8
  %2264 = inttoptr i64 %2263 to i64*
  store i64 %2261, i64* %2264
  store i64 %2263, i64* %9, align 8, !tbaa !1240
  %2265 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %2260, %struct.Memory* %3405)
  %2266 = load i64, i64* %3, align 8
  br label %block_415584

block_4142da:                                     ; preds = %block_4141db
  %2267 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %2268 = add i64 %146, 10
  %2269 = inttoptr i64 %2049 to i32*
  store i32 %2267, i32* %2269
  br label %block_4142e4

block_413f2c:                                     ; preds = %block_413f17
  %2270 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %2271 = add i64 %3421, 10
  %2272 = inttoptr i64 %2048 to i32*
  store i32 %2270, i32* %2272
  br label %block_413f36

block_416cd6:                                     ; preds = %block_416ccc, %block_417d59
  %2273 = phi i64 [ %2423, %block_416ccc ], [ %1177, %block_417d59 ]
  %2274 = phi %struct.Memory* [ %2419, %block_416ccc ], [ %4795, %block_417d59 ]
  %2275 = inttoptr i64 %2422 to i32*
  %2276 = load i32, i32* %2275
  %2277 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %2278 = sub i32 %2276, %2277
  %2279 = lshr i32 %2278, 31
  %2280 = lshr i32 %2276, 31
  %2281 = lshr i32 %2277, 31
  %2282 = xor i32 %2281, %2280
  %2283 = xor i32 %2279, %2280
  %2284 = add nuw nsw i32 %2283, %2282
  %2285 = icmp eq i32 %2284, 2
  %2286 = icmp ne i32 %2279, 0
  %2287 = xor i1 %2286, %2285
  %2288 = select i1 %2287, i64 16, i64 4246
  %2289 = add i64 %2273, %2288
  br i1 %2287, label %block_416ce6, label %block_417d6c

block_416ece:                                     ; preds = %block_416ebe
  %2290 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %2290, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %2291 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %2291, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  store i64 %2427, i64* %5, align 8, !tbaa !1240
  %2292 = sext i32 %2456 to i64
  %2293 = mul nsw i64 %2292, 48
  %2294 = add i64 %2293, %2427
  %2295 = add i64 %2294, 24
  %2296 = inttoptr i64 %2295 to double*
  %2297 = load double, double* %2296
  %2298 = mul nsw i64 %2292, 40
  %2299 = add i64 %2298, ptrtoint (%flux_type* @flux to i64)
  %2300 = inttoptr i64 %2299 to double*
  store double %2297, double* %2300
  %2301 = inttoptr i64 %2426 to i32*
  %2302 = load i32, i32* %2301
  %2303 = sext i32 %2302 to i64
  %2304 = mul nsw i64 %2303, 48
  %2305 = add i64 %2304, %2427
  %2306 = add i64 %2305, 24
  %2307 = inttoptr i64 %2306 to double*
  %2308 = load double, double* %2307
  store i64 %2305, i64* %8, align 8, !tbaa !1240
  %2309 = add i64 %2305, 40
  %2310 = inttoptr i64 %2309 to double*
  %2311 = load double, double* %2310
  %2312 = fmul double %2308, %2311
  %2313 = inttoptr i64 %2428 to double*
  store double %2312, double* %2313
  %2314 = inttoptr i64 %2426 to i32*
  %2315 = load i32, i32* %2314
  %2316 = sext i32 %2315 to i64
  %2317 = mul nsw i64 %2316, 1352
  %2318 = add i64 %2317, ptrtoint (%qs_type* @qs to i64)
  %2319 = inttoptr i64 %2422 to i32*
  %2320 = load i32, i32* %2319
  %2321 = sext i32 %2320 to i64
  %2322 = mul nsw i64 %2321, 104
  %2323 = add i64 %2322, %2318
  %2324 = inttoptr i64 %2425 to i32*
  %2325 = load i32, i32* %2324
  %2326 = sext i32 %2325 to i64
  %2327 = shl nsw i64 %2326, 3
  %2328 = add i64 %2327, %2323
  %2329 = inttoptr i64 %2328 to double*
  %2330 = load double, double* %2329
  %2331 = inttoptr i64 %2429 to double*
  store double %2330, double* %2331
  %2332 = inttoptr i64 %2426 to i32*
  %2333 = load i32, i32* %2332
  %2334 = sext i32 %2333 to i64
  %2335 = mul nsw i64 %2334, 48
  %2336 = add i64 %2335, %2427
  %2337 = add i64 %2336, 8
  %2338 = inttoptr i64 %2337 to double*
  %2339 = load double, double* %2338
  %2340 = inttoptr i64 %2428 to double*
  %2341 = load double, double* %2340
  %2342 = fmul double %2339, %2341
  %2343 = mul nsw i64 %2334, 40
  %2344 = add i64 %2343, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %2345 = inttoptr i64 %2344 to double*
  store double %2342, double* %2345
  %2346 = inttoptr i64 %2426 to i32*
  %2347 = load i32, i32* %2346
  %2348 = sext i32 %2347 to i64
  %2349 = mul nsw i64 %2348, 48
  %2350 = add i64 %2349, %2427
  %2351 = add i64 %2350, 16
  %2352 = inttoptr i64 %2351 to double*
  %2353 = load double, double* %2352
  %2354 = inttoptr i64 %2428 to double*
  %2355 = load double, double* %2354
  %2356 = fmul double %2353, %2355
  %2357 = mul nsw i64 %2348, 40
  %2358 = add i64 %2357, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %2359 = inttoptr i64 %2358 to double*
  store double %2356, double* %2359
  %2360 = inttoptr i64 %2426 to i32*
  %2361 = load i32, i32* %2360
  %2362 = sext i32 %2361 to i64
  %2363 = mul nsw i64 %2362, 48
  %2364 = add i64 %2363, %2427
  %2365 = add i64 %2364, 24
  %2366 = inttoptr i64 %2365 to double*
  %2367 = load double, double* %2366
  %2368 = inttoptr i64 %2428 to double*
  %2369 = load double, double* %2368
  %2370 = fmul double %2367, %2369
  %2371 = load i64, i64* %5, align 8
  %2372 = add i64 %2363, %2371
  %2373 = add i64 %2372, 32
  %2374 = inttoptr i64 %2373 to double*
  %2375 = load double, double* %2374
  %2376 = inttoptr i64 %2429 to double*
  %2377 = load double, double* %2376
  %2378 = fsub double %2375, %2377
  store double %2378, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %2379 = load <2 x i32>, <2 x i32>* %2056, align 1
  %2380 = load <2 x i32>, <2 x i32>* %2057, align 1
  %2381 = extractelement <2 x i32> %2379, i32 0
  store i32 %2381, i32* %2058, align 1, !tbaa !1292
  %2382 = extractelement <2 x i32> %2379, i32 1
  store i32 %2382, i32* %2060, align 1, !tbaa !1292
  %2383 = extractelement <2 x i32> %2380, i32 0
  store i32 %2383, i32* %2062, align 1, !tbaa !1292
  %2384 = extractelement <2 x i32> %2380, i32 1
  store i32 %2384, i32* %2064, align 1, !tbaa !1292
  %2385 = load double, double* %2065, align 1
  %2386 = fmul double %2385, %2378
  store double %2386, double* %2065, align 1, !tbaa !1264
  %2387 = fadd double %2370, %2386
  store double %2387, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %2388 = mul nsw i64 %2362, 40
  %2389 = add i64 %2388, ptrtoint (%flux_type* @flux to i64)
  store i64 %2389, i64* %7, align 8, !tbaa !1240
  %2390 = add i64 %2388, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %2391 = inttoptr i64 %2390 to double*
  store double %2387, double* %2391
  %2392 = inttoptr i64 %2426 to i32*
  %2393 = load i32, i32* %2392
  %2394 = sext i32 %2393 to i64
  %2395 = mul nsw i64 %2394, 48
  store i64 %2395, i64* %6, align 8, !tbaa !1240
  %2396 = add i64 %2395, %2371
  %2397 = add i64 %2396, 32
  %2398 = load double, double* %4826, align 1
  %2399 = inttoptr i64 %2397 to double*
  %2400 = load double, double* %2399
  %2401 = fmul double %2398, %2400
  %2402 = bitcast <2 x i32> %2379 to double
  %2403 = inttoptr i64 %2429 to double*
  %2404 = load double, double* %2403
  %2405 = fmul double %2402, %2404
  store double %2405, double* %4822, align 1, !tbaa !1264
  store <2 x i32> %2380, <2 x i32>* %2447, align 1, !tbaa !1264
  %2406 = fsub double %2401, %2405
  %2407 = inttoptr i64 %2428 to double*
  %2408 = load double, double* %2407
  %2409 = fmul double %2406, %2408
  store double %2409, double* %4826, align 1, !tbaa !1264
  %2410 = mul nsw i64 %2394, 40
  %2411 = add i64 %2410, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %2412 = inttoptr i64 %2411 to double*
  store double %2409, double* %2412
  %2413 = inttoptr i64 %2426 to i32*
  %2414 = load i32, i32* %2413
  %2415 = add i32 %2414, 1
  %2416 = inttoptr i64 %2426 to i32*
  store i32 %2415, i32* %2416
  %2417 = add i64 %2469, -16
  br label %block_416ebe

block_416ccc:                                     ; preds = %block_416cb4, %block_416cc2
  %2418 = phi i64 [ %2804, %block_416cb4 ], [ %2481, %block_416cc2 ]
  %2419 = phi %struct.Memory* [ %2800, %block_416cb4 ], [ %2480, %block_416cc2 ]
  %2420 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %2421 = load i64, i64* %10, align 8
  %2422 = add i64 %2421, -8
  %2423 = add i64 %2418, 10
  %2424 = inttoptr i64 %2422 to i32*
  store i32 %2420, i32* %2424
  %2425 = add i64 %2421, -4
  %2426 = add i64 %2421, -12
  %2427 = add i64 %2421, -608
  %2428 = add i64 %2421, -1112
  %2429 = add i64 %2421, -24
  %2430 = add i64 %2421, -16
  %2431 = add i64 %2421, -1088
  %2432 = add i64 %2421, -32
  %2433 = add i64 %2421, -1184
  %2434 = add i64 %2421, -1192
  %2435 = add i64 %2421, -1200
  %2436 = add i64 %2421, -1208
  %2437 = add i64 %2421, -1280
  %2438 = add i64 %2421, -1288
  %2439 = add i64 %2421, -1296
  %2440 = add i64 %2421, -1304
  %2441 = add i64 %2421, -1048
  %2442 = add i64 %2421, -560
  %2443 = add i64 %2421, -512
  %2444 = add i64 %2421, -464
  %2445 = add i64 %2421, -1008
  %2446 = add i64 %2421, -416
  %2447 = bitcast i64* %4823 to <2 x i32>*
  br label %block_416cd6

block_4142c7:                                     ; preds = %block_4141f2
  %2448 = inttoptr i64 %2049 to i32*
  %2449 = load i32, i32* %2448
  %2450 = add i32 %2449, 1
  %2451 = inttoptr i64 %2049 to i32*
  store i32 %2450, i32* %2451
  %2452 = add i64 %2121, -236
  br label %block_4141db

block_416ebe:                                     ; preds = %block_416eb7, %block_416ece
  %2453 = phi i64 [ %2482, %block_416eb7 ], [ %2417, %block_416ece ]
  %2454 = phi %struct.Memory* [ %4637, %block_416eb7 ], [ %2454, %block_416ece ]
  %2455 = inttoptr i64 %2426 to i32*
  %2456 = load i32, i32* %2455
  %2457 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %2458 = sub i32 %2456, %2457
  %2459 = lshr i32 %2458, 31
  %2460 = lshr i32 %2456, 31
  %2461 = lshr i32 %2457, 31
  %2462 = xor i32 %2461, %2460
  %2463 = xor i32 %2459, %2460
  %2464 = add nuw nsw i32 %2463, %2462
  %2465 = icmp eq i32 %2464, 2
  %2466 = icmp ne i32 %2459, 0
  %2467 = xor i1 %2466, %2465
  %2468 = select i1 %2467, i64 16, i64 417
  %2469 = add i64 %2453, %2468
  br i1 %2467, label %block_416ece, label %block_41705f

block_415546:                                     ; preds = %block_415238
  %2470 = inttoptr i64 %2048 to i32*
  %2471 = load i32, i32* %2470
  %2472 = add i32 %2471, 1
  %2473 = inttoptr i64 %2048 to i32*
  store i32 %2472, i32* %2473
  %2474 = add i64 %4776, -5648
  br label %block_413f36

block_416cc2:                                     ; preds = %block_416cb4
  store i64 4, i64* %8, align 8, !tbaa !1240
  %2475 = add i64 %2804, -78162
  %2476 = add i64 %2804, 10
  %2477 = load i64, i64* %9, align 8, !tbaa !1240
  %2478 = add i64 %2477, -8
  %2479 = inttoptr i64 %2478 to i64*
  store i64 %2476, i64* %2479
  store i64 %2478, i64* %9, align 8, !tbaa !1240
  %2480 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %2475, %struct.Memory* %2800)
  %2481 = load i64, i64* %3, align 8
  br label %block_416ccc

block_416eb7:                                     ; preds = %block_416d07
  %2482 = add i64 %4652, 7
  %2483 = inttoptr i64 %2426 to i32*
  store i32 0, i32* %2483
  br label %block_416ebe

block_4142f4:                                     ; preds = %block_4142e4
  %2484 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1256) to double*)
  store double %2484, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %2485 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1264) to double*)
  store double %2485, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %2486 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1272) to double*)
  store double %2486, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %2487 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  store double %2487, double* %2052, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2054, align 1, !tbaa !1264
  store i64 ptrtoint (%rho_i_type* @rho_i to i64), i64* %6, align 8, !tbaa !1240
  %2488 = inttoptr i64 %2045 to i32*
  %2489 = load i32, i32* %2488
  %2490 = sext i32 %2489 to i64
  %2491 = mul nsw i64 %2490, 1352
  %2492 = add i64 %2491, ptrtoint (%rho_i_type* @rho_i to i64)
  %2493 = inttoptr i64 %2048 to i32*
  %2494 = load i32, i32* %2493
  %2495 = sext i32 %2494 to i64
  %2496 = mul nsw i64 %2495, 104
  %2497 = add i64 %2496, %2492
  %2498 = sext i32 %2246 to i64
  %2499 = shl nsw i64 %2498, 3
  %2500 = add i64 %2499, %2497
  %2501 = inttoptr i64 %2500 to double*
  %2502 = load double, double* %2501
  %2503 = inttoptr i64 %2067 to double*
  store double %2502, double* %2503
  %2504 = inttoptr i64 %2067 to double*
  %2505 = load double, double* %2504
  %2506 = inttoptr i64 %2045 to i32*
  %2507 = load i32, i32* %2506
  %2508 = sext i32 %2507 to i64
  %2509 = mul nsw i64 %2508, 6760
  %2510 = add i64 %2509, ptrtoint (%u_type* @u to i64)
  %2511 = inttoptr i64 %2048 to i32*
  %2512 = load i32, i32* %2511
  %2513 = sext i32 %2512 to i64
  %2514 = mul nsw i64 %2513, 520
  %2515 = add i64 %2514, %2510
  %2516 = inttoptr i64 %2049 to i32*
  %2517 = load i32, i32* %2516
  %2518 = sext i32 %2517 to i64
  %2519 = mul nsw i64 %2518, 40
  %2520 = add i64 %2519, %2515
  %2521 = add i64 %2520, 8
  %2522 = inttoptr i64 %2521 to double*
  %2523 = load double, double* %2522
  %2524 = fmul double %2505, %2523
  %2525 = inttoptr i64 %2068 to double*
  store double %2524, double* %2525
  %2526 = inttoptr i64 %2067 to double*
  %2527 = load double, double* %2526
  %2528 = inttoptr i64 %2045 to i32*
  %2529 = load i32, i32* %2528
  %2530 = sext i32 %2529 to i64
  %2531 = mul nsw i64 %2530, 6760
  %2532 = add i64 %2531, ptrtoint (%u_type* @u to i64)
  %2533 = inttoptr i64 %2048 to i32*
  %2534 = load i32, i32* %2533
  %2535 = sext i32 %2534 to i64
  %2536 = mul nsw i64 %2535, 520
  %2537 = add i64 %2536, %2532
  %2538 = inttoptr i64 %2049 to i32*
  %2539 = load i32, i32* %2538
  %2540 = sext i32 %2539 to i64
  %2541 = mul nsw i64 %2540, 40
  %2542 = add i64 %2541, %2537
  %2543 = add i64 %2542, 16
  %2544 = inttoptr i64 %2543 to double*
  %2545 = load double, double* %2544
  %2546 = fmul double %2527, %2545
  %2547 = inttoptr i64 %2069 to double*
  store double %2546, double* %2547
  %2548 = inttoptr i64 %2067 to double*
  %2549 = load double, double* %2548
  %2550 = inttoptr i64 %2045 to i32*
  %2551 = load i32, i32* %2550
  %2552 = sext i32 %2551 to i64
  %2553 = mul nsw i64 %2552, 6760
  %2554 = add i64 %2553, ptrtoint (%u_type* @u to i64)
  %2555 = inttoptr i64 %2048 to i32*
  %2556 = load i32, i32* %2555
  %2557 = sext i32 %2556 to i64
  %2558 = mul nsw i64 %2557, 520
  %2559 = add i64 %2558, %2554
  %2560 = inttoptr i64 %2049 to i32*
  %2561 = load i32, i32* %2560
  %2562 = sext i32 %2561 to i64
  %2563 = mul nsw i64 %2562, 40
  %2564 = add i64 %2563, %2559
  %2565 = add i64 %2564, 24
  %2566 = inttoptr i64 %2565 to double*
  %2567 = load double, double* %2566
  %2568 = fmul double %2549, %2567
  %2569 = inttoptr i64 %2070 to double*
  store double %2568, double* %2569
  %2570 = inttoptr i64 %2067 to double*
  %2571 = load double, double* %2570
  %2572 = inttoptr i64 %2045 to i32*
  %2573 = load i32, i32* %2572
  %2574 = sext i32 %2573 to i64
  %2575 = mul nsw i64 %2574, 6760
  %2576 = add i64 %2575, ptrtoint (%u_type* @u to i64)
  %2577 = inttoptr i64 %2048 to i32*
  %2578 = load i32, i32* %2577
  %2579 = sext i32 %2578 to i64
  %2580 = mul nsw i64 %2579, 520
  %2581 = add i64 %2580, %2576
  %2582 = inttoptr i64 %2049 to i32*
  %2583 = load i32, i32* %2582
  %2584 = sext i32 %2583 to i64
  %2585 = mul nsw i64 %2584, 40
  %2586 = add i64 %2585, %2581
  store i64 %2586, i64* %8, align 8, !tbaa !1240
  %2587 = add i64 %2586, 32
  %2588 = inttoptr i64 %2587 to double*
  %2589 = load double, double* %2588
  %2590 = fmul double %2571, %2589
  %2591 = inttoptr i64 %2071 to double*
  store double %2590, double* %2591
  %2592 = inttoptr i64 %2045 to i32*
  %2593 = load i32, i32* %2592
  %2594 = sext i32 %2593 to i64
  %2595 = mul nsw i64 %2594, 1352
  %2596 = load i64, i64* %6, align 8
  %2597 = add i64 %2595, %2596
  %2598 = inttoptr i64 %2048 to i32*
  %2599 = load i32, i32* %2598
  %2600 = sext i32 %2599 to i64
  %2601 = mul nsw i64 %2600, 104
  %2602 = add i64 %2601, %2597
  %2603 = inttoptr i64 %2049 to i32*
  %2604 = load i32, i32* %2603
  %2605 = add i32 %2604, -1
  %2606 = sext i32 %2605 to i64
  %2607 = shl nsw i64 %2606, 3
  %2608 = add i64 %2602, %2607
  %2609 = inttoptr i64 %2608 to double*
  %2610 = load double, double* %2609
  %2611 = inttoptr i64 %2067 to double*
  store double %2610, double* %2611
  %2612 = inttoptr i64 %2067 to double*
  %2613 = load double, double* %2612
  %2614 = inttoptr i64 %2045 to i32*
  %2615 = load i32, i32* %2614
  %2616 = sext i32 %2615 to i64
  %2617 = mul nsw i64 %2616, 6760
  %2618 = add i64 %2617, ptrtoint (%u_type* @u to i64)
  %2619 = inttoptr i64 %2048 to i32*
  %2620 = load i32, i32* %2619
  %2621 = sext i32 %2620 to i64
  %2622 = mul nsw i64 %2621, 520
  %2623 = add i64 %2622, %2618
  %2624 = inttoptr i64 %2049 to i32*
  %2625 = load i32, i32* %2624
  %2626 = add i32 %2625, -1
  %2627 = sext i32 %2626 to i64
  %2628 = mul nsw i64 %2627, 40
  %2629 = add i64 %2628, %2623
  %2630 = add i64 %2629, 8
  %2631 = inttoptr i64 %2630 to double*
  %2632 = load double, double* %2631
  %2633 = fmul double %2613, %2632
  %2634 = inttoptr i64 %2072 to double*
  store double %2633, double* %2634
  %2635 = inttoptr i64 %2067 to double*
  %2636 = load double, double* %2635
  %2637 = inttoptr i64 %2045 to i32*
  %2638 = load i32, i32* %2637
  %2639 = sext i32 %2638 to i64
  %2640 = mul nsw i64 %2639, 6760
  %2641 = add i64 %2640, ptrtoint (%u_type* @u to i64)
  %2642 = inttoptr i64 %2048 to i32*
  %2643 = load i32, i32* %2642
  %2644 = sext i32 %2643 to i64
  %2645 = mul nsw i64 %2644, 520
  %2646 = add i64 %2645, %2641
  %2647 = inttoptr i64 %2049 to i32*
  %2648 = load i32, i32* %2647
  %2649 = add i32 %2648, -1
  %2650 = sext i32 %2649 to i64
  %2651 = mul nsw i64 %2650, 40
  %2652 = add i64 %2651, %2646
  %2653 = add i64 %2652, 16
  %2654 = inttoptr i64 %2653 to double*
  %2655 = load double, double* %2654
  %2656 = fmul double %2636, %2655
  %2657 = inttoptr i64 %2073 to double*
  store double %2656, double* %2657
  %2658 = inttoptr i64 %2067 to double*
  %2659 = load double, double* %2658
  %2660 = inttoptr i64 %2045 to i32*
  %2661 = load i32, i32* %2660
  %2662 = sext i32 %2661 to i64
  %2663 = mul nsw i64 %2662, 6760
  %2664 = add i64 %2663, ptrtoint (%u_type* @u to i64)
  %2665 = inttoptr i64 %2048 to i32*
  %2666 = load i32, i32* %2665
  %2667 = sext i32 %2666 to i64
  %2668 = mul nsw i64 %2667, 520
  %2669 = add i64 %2668, %2664
  %2670 = inttoptr i64 %2049 to i32*
  %2671 = load i32, i32* %2670
  %2672 = add i32 %2671, -1
  %2673 = sext i32 %2672 to i64
  %2674 = mul nsw i64 %2673, 40
  %2675 = add i64 %2674, %2669
  store i64 %2675, i64* %7, align 8, !tbaa !1240
  %2676 = add i64 %2675, 24
  %2677 = inttoptr i64 %2676 to double*
  %2678 = load double, double* %2677
  %2679 = fmul double %2659, %2678
  %2680 = inttoptr i64 %2074 to double*
  store double %2679, double* %2680
  %2681 = inttoptr i64 %2067 to double*
  %2682 = load double, double* %2681
  %2683 = inttoptr i64 %2045 to i32*
  %2684 = load i32, i32* %2683
  %2685 = sext i32 %2684 to i64
  %2686 = mul nsw i64 %2685, 6760
  %2687 = add i64 %2686, ptrtoint (%u_type* @u to i64)
  %2688 = inttoptr i64 %2048 to i32*
  %2689 = load i32, i32* %2688
  %2690 = sext i32 %2689 to i64
  %2691 = mul nsw i64 %2690, 520
  %2692 = add i64 %2691, %2687
  %2693 = inttoptr i64 %2049 to i32*
  %2694 = load i32, i32* %2693
  %2695 = add i32 %2694, -1
  %2696 = zext i32 %2695 to i64
  store i64 %2696, i64* %11, align 8, !tbaa !1240
  %2697 = sext i32 %2695 to i64
  %2698 = mul nsw i64 %2697, 40
  %2699 = add i64 %2698, %2692
  %2700 = add i64 %2699, 32
  %2701 = inttoptr i64 %2700 to double*
  %2702 = load double, double* %2701
  %2703 = fmul double %2682, %2702
  %2704 = inttoptr i64 %2075 to double*
  store double %2703, double* %2704
  %2705 = load double, double* %2052, align 1
  %2706 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %2707 = fmul double %2705, %2706
  %2708 = inttoptr i64 %2068 to double*
  %2709 = load double, double* %2708
  %2710 = inttoptr i64 %2072 to double*
  %2711 = load double, double* %2710
  %2712 = fsub double %2709, %2711
  %2713 = fmul double %2712, %2707
  %2714 = inttoptr i64 %2049 to i32*
  %2715 = load i32, i32* %2714
  %2716 = sext i32 %2715 to i64
  %2717 = mul nsw i64 %2716, 40
  %2718 = add i64 %2717, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %2719 = inttoptr i64 %2718 to double*
  store double %2713, double* %2719
  %2720 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %2721 = inttoptr i64 %2069 to double*
  %2722 = load double, double* %2721
  %2723 = inttoptr i64 %2073 to double*
  %2724 = load double, double* %2723
  %2725 = fsub double %2722, %2724
  %2726 = fmul double %2725, %2720
  %2727 = inttoptr i64 %2049 to i32*
  %2728 = load i32, i32* %2727
  %2729 = sext i32 %2728 to i64
  %2730 = mul nsw i64 %2729, 40
  %2731 = add i64 %2730, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %2732 = inttoptr i64 %2731 to double*
  store double %2726, double* %2732
  %2733 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %2734 = inttoptr i64 %2070 to double*
  %2735 = load double, double* %2734
  %2736 = inttoptr i64 %2074 to double*
  %2737 = load double, double* %2736
  %2738 = fsub double %2735, %2737
  %2739 = fmul double %2738, %2733
  %2740 = inttoptr i64 %2049 to i32*
  %2741 = load i32, i32* %2740
  %2742 = sext i32 %2741 to i64
  %2743 = mul nsw i64 %2742, 40
  %2744 = add i64 %2743, ptrtoint (%flux_type* @flux to i64)
  store i64 %2744, i64* %6, align 8, !tbaa !1240
  %2745 = add i64 %2743, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %2746 = inttoptr i64 %2745 to double*
  store double %2739, double* %2746
  %2747 = load double, double* %4830, align 1
  %2748 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %2749 = fmul double %2747, %2748
  %2750 = inttoptr i64 %2068 to double*
  %2751 = load double, double* %2750
  %2752 = fmul double %2751, %2751
  %2753 = inttoptr i64 %2069 to double*
  %2754 = load double, double* %2753
  %2755 = fmul double %2754, %2754
  %2756 = fadd double %2755, %2752
  %2757 = inttoptr i64 %2070 to double*
  %2758 = load double, double* %2757
  %2759 = fmul double %2758, %2758
  %2760 = fadd double %2759, %2756
  %2761 = inttoptr i64 %2072 to double*
  %2762 = load double, double* %2761
  %2763 = fmul double %2762, %2762
  %2764 = inttoptr i64 %2073 to double*
  %2765 = load double, double* %2764
  %2766 = fmul double %2765, %2765
  %2767 = fadd double %2763, %2766
  %2768 = inttoptr i64 %2074 to double*
  %2769 = load double, double* %2768
  %2770 = fmul double %2769, %2769
  store double %2770, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %2771 = fadd double %2770, %2767
  %2772 = fsub double %2760, %2771
  %2773 = fmul double %2772, %2749
  %2774 = load double, double* %4826, align 1
  %2775 = fmul double %2748, %2774
  store double %2763, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %2776 = fsub double %2752, %2763
  store double %2776, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %2777 = fmul double %2776, %2775
  %2778 = fadd double %2777, %2773
  %2779 = load double, double* %4822, align 1
  %2780 = fmul double %2748, %2779
  %2781 = inttoptr i64 %2071 to double*
  %2782 = load double, double* %2781
  %2783 = inttoptr i64 %2075 to double*
  %2784 = load double, double* %2783
  %2785 = fsub double %2782, %2784
  store double %2785, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %2786 = fmul double %2785, %2780
  store double %2786, double* %4822, align 1, !tbaa !1264
  %2787 = fadd double %2786, %2778
  store double %2787, double* %4830, align 1, !tbaa !1264
  %2788 = inttoptr i64 %2049 to i32*
  %2789 = load i32, i32* %2788
  %2790 = sext i32 %2789 to i64
  %2791 = mul nsw i64 %2790, 40
  %2792 = add i64 %2791, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %2793 = inttoptr i64 %2792 to double*
  store double %2787, double* %2793
  %2794 = inttoptr i64 %2049 to i32*
  %2795 = load i32, i32* %2794
  %2796 = add i32 %2795, 1
  %2797 = inttoptr i64 %2049 to i32*
  store i32 %2796, i32* %2797
  %2798 = add i64 %2259, -16
  br label %block_4142e4

block_416cb4:                                     ; preds = %block_416c9c, %block_416caa
  %2799 = phi i64 [ %2923, %block_416c9c ], [ %2912, %block_416caa ]
  %2800 = phi %struct.Memory* [ %609, %block_416c9c ], [ %2911, %block_416caa ]
  %2801 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %2802 = icmp eq i32 %2801, 0
  %2803 = select i1 %2802, i64 24, i64 14
  %2804 = add i64 %2799, %2803
  br i1 %2802, label %block_416ccc, label %block_416cc2

block_4164b2:                                     ; preds = %block_4164a8
  %2805 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %2805, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %2806 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  store double %2806, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %2807 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1232) to double*)
  store double %2807, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %2808 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %2809 = inttoptr i64 %629 to i32*
  %2810 = load i32, i32* %2809
  %2811 = sext i32 %2810 to i64
  %2812 = mul nsw i64 %2811, 6760
  %2813 = add i64 %2812, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 520)
  %2814 = inttoptr i64 %632 to i32*
  %2815 = load i32, i32* %2814
  %2816 = sext i32 %2815 to i64
  %2817 = mul nsw i64 %2816, 40
  %2818 = add i64 %2817, %2813
  %2819 = sext i32 %3893 to i64
  %2820 = shl nsw i64 %2819, 3
  %2821 = add i64 %2820, %2818
  %2822 = inttoptr i64 %2821 to double*
  %2823 = load double, double* %2822
  %2824 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %2825 = add i64 %2812, add (i64 ptrtoint (%u_type* @u to i64), i64 520)
  %2826 = add i64 %2817, %2825
  %2827 = add i64 %2820, %2826
  %2828 = inttoptr i64 %2827 to double*
  %2829 = load double, double* %2828
  %2830 = fmul double %2808, %2829
  %2831 = add i64 %2812, add (i64 ptrtoint (%u_type* @u to i64), i64 1040)
  %2832 = add i64 %2817, %2831
  %2833 = bitcast double %2805 to <2 x i32>
  %2834 = extractelement <2 x i32> %2833, i32 0
  store i32 %2834, i32* %2079, align 1, !tbaa !1292
  %2835 = extractelement <2 x i32> %2833, i32 1
  store i32 %2835, i32* %2081, align 1, !tbaa !1292
  store i32 0, i32* %2083, align 1, !tbaa !1292
  store i32 0, i32* %2085, align 1, !tbaa !1292
  %2836 = add i64 %2820, %2832
  %2837 = load double, double* %2086, align 1
  %2838 = inttoptr i64 %2836 to double*
  %2839 = load double, double* %2838
  %2840 = fmul double %2837, %2839
  store double %2840, double* %2086, align 1, !tbaa !1264
  %2841 = fsub double %2830, %2840
  %2842 = add i64 %2812, add (i64 ptrtoint (%u_type* @u to i64), i64 1560)
  %2843 = add i64 %2817, %2842
  %2844 = add i64 %2820, %2843
  %2845 = inttoptr i64 %2844 to double*
  %2846 = load double, double* %2845
  %2847 = fadd double %2841, %2846
  %2848 = fmul double %2824, %2847
  store double %2848, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %2849 = fsub double %2823, %2848
  %2850 = inttoptr i64 %2821 to double*
  store double %2849, double* %2850
  %2851 = inttoptr i64 %629 to i32*
  %2852 = load i32, i32* %2851
  %2853 = sext i32 %2852 to i64
  %2854 = mul nsw i64 %2853, 6760
  %2855 = add i64 %2854, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 1040)
  %2856 = inttoptr i64 %632 to i32*
  %2857 = load i32, i32* %2856
  %2858 = sext i32 %2857 to i64
  %2859 = mul nsw i64 %2858, 40
  %2860 = add i64 %2859, %2855
  %2861 = inttoptr i64 %636 to i32*
  %2862 = load i32, i32* %2861
  %2863 = sext i32 %2862 to i64
  %2864 = shl nsw i64 %2863, 3
  %2865 = add i64 %2864, %2860
  %2866 = inttoptr i64 %2865 to double*
  %2867 = load double, double* %2866
  %2868 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %2869 = add i64 %2854, add (i64 ptrtoint (%u_type* @u to i64), i64 520)
  %2870 = add i64 %2859, %2869
  %2871 = add i64 %2864, %2870
  %2872 = load double, double* %4830, align 1
  %2873 = inttoptr i64 %2871 to double*
  %2874 = load double, double* %2873
  %2875 = fmul double %2872, %2874
  %2876 = add i64 %2854, add (i64 ptrtoint (%u_type* @u to i64), i64 1040)
  %2877 = add i64 %2859, %2876
  %2878 = add i64 %2864, %2877
  %2879 = load double, double* %4826, align 1
  %2880 = inttoptr i64 %2878 to double*
  %2881 = load double, double* %2880
  %2882 = fmul double %2879, %2881
  store double %2882, double* %4826, align 1, !tbaa !1264
  %2883 = fadd double %2875, %2882
  %2884 = add i64 %2854, add (i64 ptrtoint (%u_type* @u to i64), i64 1560)
  %2885 = add i64 %2859, %2884
  store i64 %2885, i64* %7, align 8, !tbaa !1240
  %2886 = add i64 %2864, %2885
  %2887 = load double, double* %4822, align 1
  %2888 = inttoptr i64 %2886 to double*
  %2889 = load double, double* %2888
  %2890 = fmul double %2887, %2889
  store double %2890, double* %4822, align 1, !tbaa !1264
  %2891 = fsub double %2883, %2890
  %2892 = add i64 %2854, add (i64 ptrtoint (%u_type* @u to i64), i64 2080)
  %2893 = add i64 %2859, %2892
  store i64 %2863, i64* %6, align 8, !tbaa !1240
  %2894 = add i64 %2864, %2893
  %2895 = inttoptr i64 %2894 to double*
  %2896 = load double, double* %2895
  %2897 = fadd double %2891, %2896
  store double %2897, double* %4830, align 1, !tbaa !1264
  %2898 = fmul double %2868, %2897
  store double %2898, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %2899 = fsub double %2867, %2898
  store double %2899, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %2900 = inttoptr i64 %2865 to double*
  store double %2899, double* %2900
  %2901 = inttoptr i64 %636 to i32*
  %2902 = load i32, i32* %2901
  %2903 = add i32 %2902, 1
  %2904 = inttoptr i64 %636 to i32*
  store i32 %2903, i32* %2904
  %2905 = add i64 %3903, -10
  br label %block_4164a8

block_416caa:                                     ; preds = %block_416c9c
  store i64 3, i64* %8, align 8, !tbaa !1240
  %2906 = add i64 %2923, -78058
  %2907 = add i64 %2923, 10
  %2908 = load i64, i64* %9, align 8, !tbaa !1240
  %2909 = add i64 %2908, -8
  %2910 = inttoptr i64 %2909 to i64*
  store i64 %2907, i64* %2910
  store i64 %2909, i64* %9, align 8, !tbaa !1240
  %2911 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %2906, %struct.Memory* %609)
  %2912 = load i64, i64* %3, align 8
  br label %block_416cb4

block_417d92:                                     ; preds = %block_417d84
  store i64 5, i64* %8, align 8, !tbaa !1240
  %2913 = add i64 %4095, -82386
  %2914 = add i64 %4095, 10
  %2915 = load i64, i64* %9, align 8, !tbaa !1240
  %2916 = add i64 %2915, -8
  %2917 = inttoptr i64 %2916 to i64*
  store i64 %2914, i64* %2917
  store i64 %2916, i64* %9, align 8, !tbaa !1240
  %2918 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %2913, %struct.Memory* %4091)
  br label %block_417d9c

block_416c9c:                                     ; preds = %block_4155a3
  %2919 = zext i32 %613 to i64
  store i64 %2919, i64* %5, align 8
  %2920 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %2921 = icmp eq i32 %2920, 0
  %2922 = select i1 %2921, i64 24, i64 14
  %2923 = add i64 %625, %2922
  br i1 %2921, label %block_416cb4, label %block_416caa

block_417169:                                     ; preds = %block_417159
  %2924 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1256) to double*)
  store double %2924, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %2925 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1264) to double*)
  store double %2925, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %2926 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1272) to double*)
  store double %2926, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %2927 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  store double %2927, double* %2052, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2054, align 1, !tbaa !1264
  store i64 %2427, i64* %5, align 8, !tbaa !1240
  %2928 = sext i32 %37 to i64
  %2929 = mul nsw i64 %2928, 48
  %2930 = add i64 %2929, %2427
  %2931 = add i64 %2930, 40
  %2932 = inttoptr i64 %2931 to double*
  %2933 = load double, double* %2932
  %2934 = inttoptr i64 %2432 to double*
  store double %2933, double* %2934
  %2935 = inttoptr i64 %2432 to double*
  %2936 = load double, double* %2935
  %2937 = inttoptr i64 %2426 to i32*
  %2938 = load i32, i32* %2937
  %2939 = sext i32 %2938 to i64
  %2940 = mul nsw i64 %2939, 48
  %2941 = add i64 %2940, %2427
  %2942 = add i64 %2941, 8
  %2943 = inttoptr i64 %2942 to double*
  %2944 = load double, double* %2943
  %2945 = fmul double %2936, %2944
  %2946 = inttoptr i64 %2433 to double*
  store double %2945, double* %2946
  %2947 = inttoptr i64 %2432 to double*
  %2948 = load double, double* %2947
  %2949 = inttoptr i64 %2426 to i32*
  %2950 = load i32, i32* %2949
  %2951 = sext i32 %2950 to i64
  %2952 = mul nsw i64 %2951, 48
  %2953 = add i64 %2952, %2427
  %2954 = add i64 %2953, 16
  %2955 = inttoptr i64 %2954 to double*
  %2956 = load double, double* %2955
  %2957 = fmul double %2948, %2956
  %2958 = inttoptr i64 %2434 to double*
  store double %2957, double* %2958
  %2959 = inttoptr i64 %2432 to double*
  %2960 = load double, double* %2959
  %2961 = inttoptr i64 %2426 to i32*
  %2962 = load i32, i32* %2961
  %2963 = sext i32 %2962 to i64
  %2964 = mul nsw i64 %2963, 48
  %2965 = add i64 %2964, %2427
  %2966 = add i64 %2965, 24
  %2967 = inttoptr i64 %2966 to double*
  %2968 = load double, double* %2967
  %2969 = fmul double %2960, %2968
  %2970 = inttoptr i64 %2435 to double*
  store double %2969, double* %2970
  %2971 = inttoptr i64 %2432 to double*
  %2972 = load double, double* %2971
  %2973 = inttoptr i64 %2426 to i32*
  %2974 = load i32, i32* %2973
  %2975 = sext i32 %2974 to i64
  %2976 = mul nsw i64 %2975, 48
  %2977 = add i64 %2976, %2427
  %2978 = add i64 %2977, 32
  %2979 = inttoptr i64 %2978 to double*
  %2980 = load double, double* %2979
  %2981 = fmul double %2972, %2980
  %2982 = inttoptr i64 %2436 to double*
  store double %2981, double* %2982
  %2983 = inttoptr i64 %2426 to i32*
  %2984 = load i32, i32* %2983
  %2985 = add i32 %2984, -1
  %2986 = sext i32 %2985 to i64
  %2987 = mul nsw i64 %2986, 48
  %2988 = add i64 %2987, %2427
  %2989 = add i64 %2988, 40
  %2990 = inttoptr i64 %2989 to double*
  %2991 = load double, double* %2990
  %2992 = inttoptr i64 %2432 to double*
  store double %2991, double* %2992
  %2993 = inttoptr i64 %2432 to double*
  %2994 = load double, double* %2993
  %2995 = inttoptr i64 %2426 to i32*
  %2996 = load i32, i32* %2995
  %2997 = add i32 %2996, -1
  %2998 = sext i32 %2997 to i64
  %2999 = mul nsw i64 %2998, 48
  %3000 = add i64 %2999, %2427
  %3001 = add i64 %3000, 8
  %3002 = inttoptr i64 %3001 to double*
  %3003 = load double, double* %3002
  %3004 = fmul double %2994, %3003
  %3005 = inttoptr i64 %2437 to double*
  store double %3004, double* %3005
  %3006 = inttoptr i64 %2432 to double*
  %3007 = load double, double* %3006
  %3008 = inttoptr i64 %2426 to i32*
  %3009 = load i32, i32* %3008
  %3010 = add i32 %3009, -1
  %3011 = sext i32 %3010 to i64
  %3012 = mul nsw i64 %3011, 48
  %3013 = load i64, i64* %5, align 8
  %3014 = add i64 %3012, %3013
  %3015 = add i64 %3014, 16
  %3016 = inttoptr i64 %3015 to double*
  %3017 = load double, double* %3016
  %3018 = fmul double %3007, %3017
  %3019 = inttoptr i64 %2438 to double*
  store double %3018, double* %3019
  %3020 = inttoptr i64 %2432 to double*
  %3021 = load double, double* %3020
  %3022 = inttoptr i64 %2426 to i32*
  %3023 = load i32, i32* %3022
  %3024 = add i32 %3023, -1
  %3025 = sext i32 %3024 to i64
  %3026 = mul nsw i64 %3025, 48
  %3027 = add i64 %3026, %3013
  store i64 %3027, i64* %7, align 8, !tbaa !1240
  %3028 = add i64 %3027, 24
  %3029 = inttoptr i64 %3028 to double*
  %3030 = load double, double* %3029
  %3031 = fmul double %3021, %3030
  %3032 = inttoptr i64 %2439 to double*
  store double %3031, double* %3032
  %3033 = inttoptr i64 %2432 to double*
  %3034 = load double, double* %3033
  %3035 = inttoptr i64 %2426 to i32*
  %3036 = load i32, i32* %3035
  %3037 = add i32 %3036, -1
  %3038 = zext i32 %3037 to i64
  store i64 %3038, i64* %8, align 8, !tbaa !1240
  %3039 = sext i32 %3037 to i64
  %3040 = mul nsw i64 %3039, 48
  %3041 = add i64 %3040, %3013
  %3042 = add i64 %3041, 32
  %3043 = inttoptr i64 %3042 to double*
  %3044 = load double, double* %3043
  %3045 = fmul double %3034, %3044
  %3046 = inttoptr i64 %2440 to double*
  store double %3045, double* %3046
  %3047 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3048 = inttoptr i64 %2433 to double*
  %3049 = load double, double* %3048
  %3050 = inttoptr i64 %2437 to double*
  %3051 = load double, double* %3050
  %3052 = fsub double %3049, %3051
  %3053 = fmul double %3047, %3052
  %3054 = inttoptr i64 %2426 to i32*
  %3055 = load i32, i32* %3054
  %3056 = sext i32 %3055 to i64
  %3057 = mul nsw i64 %3056, 40
  %3058 = add i64 %3057, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %3059 = inttoptr i64 %3058 to double*
  store double %3053, double* %3059
  %3060 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3061 = inttoptr i64 %2434 to double*
  %3062 = load double, double* %3061
  %3063 = inttoptr i64 %2438 to double*
  %3064 = load double, double* %3063
  %3065 = fsub double %3062, %3064
  %3066 = fmul double %3065, %3060
  %3067 = inttoptr i64 %2426 to i32*
  %3068 = load i32, i32* %3067
  %3069 = sext i32 %3068 to i64
  %3070 = mul nsw i64 %3069, 40
  %3071 = add i64 %3070, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %3072 = inttoptr i64 %3071 to double*
  store double %3066, double* %3072
  %3073 = load double, double* %2052, align 1
  %3074 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3075 = fmul double %3073, %3074
  %3076 = inttoptr i64 %2435 to double*
  %3077 = load double, double* %3076
  %3078 = inttoptr i64 %2439 to double*
  %3079 = load double, double* %3078
  %3080 = fsub double %3077, %3079
  %3081 = fmul double %3080, %3075
  %3082 = inttoptr i64 %2426 to i32*
  %3083 = load i32, i32* %3082
  %3084 = sext i32 %3083 to i64
  %3085 = mul nsw i64 %3084, 40
  %3086 = add i64 %3085, ptrtoint (%flux_type* @flux to i64)
  store i64 %3086, i64* %6, align 8, !tbaa !1240
  %3087 = add i64 %3085, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %3088 = inttoptr i64 %3087 to double*
  store double %3081, double* %3088
  %3089 = load double, double* %4830, align 1
  %3090 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3091 = fmul double %3089, %3090
  %3092 = inttoptr i64 %2433 to double*
  %3093 = load double, double* %3092
  %3094 = fmul double %3093, %3093
  %3095 = inttoptr i64 %2434 to double*
  %3096 = load double, double* %3095
  %3097 = fmul double %3096, %3096
  %3098 = fadd double %3097, %3094
  %3099 = inttoptr i64 %2435 to double*
  %3100 = load double, double* %3099
  %3101 = fmul double %3100, %3100
  %3102 = fadd double %3101, %3098
  %3103 = inttoptr i64 %2437 to double*
  %3104 = load double, double* %3103
  %3105 = fmul double %3104, %3104
  %3106 = inttoptr i64 %2438 to double*
  %3107 = load double, double* %3106
  %3108 = fmul double %3107, %3107
  %3109 = fadd double %3108, %3105
  %3110 = inttoptr i64 %2439 to double*
  %3111 = load double, double* %3110
  %3112 = fmul double %3111, %3111
  store double %3112, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %3113 = fadd double %3112, %3109
  %3114 = fsub double %3102, %3113
  %3115 = fmul double %3114, %3091
  %3116 = load double, double* %4826, align 1
  %3117 = fmul double %3090, %3116
  store double %3112, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %3118 = fsub double %3101, %3112
  store double %3118, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %3119 = fmul double %3118, %3117
  %3120 = fadd double %3119, %3115
  %3121 = load double, double* %4822, align 1
  %3122 = fmul double %3090, %3121
  %3123 = inttoptr i64 %2436 to double*
  %3124 = load double, double* %3123
  %3125 = inttoptr i64 %2440 to double*
  %3126 = load double, double* %3125
  %3127 = fsub double %3124, %3126
  store double %3127, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %3128 = fmul double %3127, %3122
  store double %3128, double* %4822, align 1, !tbaa !1264
  %3129 = fadd double %3128, %3120
  store double %3129, double* %4830, align 1, !tbaa !1264
  %3130 = inttoptr i64 %2426 to i32*
  %3131 = load i32, i32* %3130
  %3132 = sext i32 %3131 to i64
  %3133 = mul nsw i64 %3132, 40
  %3134 = add i64 %3133, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %3135 = inttoptr i64 %3134 to double*
  store double %3129, double* %3135
  %3136 = inttoptr i64 %2426 to i32*
  %3137 = load i32, i32* %3136
  %3138 = add i32 %3137, 1
  %3139 = inttoptr i64 %2426 to i32*
  store i32 %3138, i32* %3139
  %3140 = add i64 %50, -16
  br label %block_417159

block_417896:                                     ; preds = %block_41788c
  store i64 add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 13520), i64* %5, align 8, !tbaa !1240
  %3141 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %3141, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %3142 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %3143 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1232) to double*)
  %3144 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %3145 = sext i32 %1203 to i64
  %3146 = shl nsw i64 %3145, 3
  %3147 = add i64 %2441, %3146
  %3148 = inttoptr i64 %3147 to double*
  %3149 = load double, double* %3148
  %3150 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3151 = add i64 %2442, %3146
  %3152 = inttoptr i64 %3151 to double*
  %3153 = load double, double* %3152
  %3154 = fmul double %3144, %3153
  %3155 = bitcast double %3141 to <2 x i32>
  %3156 = extractelement <2 x i32> %3155, i32 0
  store i32 %3156, i32* %2079, align 1, !tbaa !1292
  %3157 = extractelement <2 x i32> %3155, i32 1
  store i32 %3157, i32* %2081, align 1, !tbaa !1292
  store i32 0, i32* %2083, align 1, !tbaa !1292
  store i32 0, i32* %2085, align 1, !tbaa !1292
  %3158 = add i64 %2443, %3146
  %3159 = load double, double* %2086, align 1
  %3160 = inttoptr i64 %3158 to double*
  %3161 = load double, double* %3160
  %3162 = fmul double %3159, %3161
  store double %3162, double* %2086, align 1, !tbaa !1264
  %3163 = fsub double %3154, %3162
  %3164 = add i64 %2444, %3146
  %3165 = inttoptr i64 %3164 to double*
  %3166 = load double, double* %3165
  %3167 = fadd double %3163, %3166
  %3168 = fmul double %3150, %3167
  store double %3168, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %3169 = fsub double %3149, %3168
  %3170 = inttoptr i64 %2422 to i32*
  %3171 = load i32, i32* %3170
  %3172 = sext i32 %3171 to i64
  %3173 = mul nsw i64 %3172, 520
  %3174 = add i64 %3173, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 6760)
  %3175 = inttoptr i64 %2425 to i32*
  %3176 = load i32, i32* %3175
  %3177 = sext i32 %3176 to i64
  %3178 = mul nsw i64 %3177, 40
  %3179 = add i64 %3178, %3174
  store i64 %3145, i64* %6, align 8, !tbaa !1240
  %3180 = add i64 %3146, %3179
  %3181 = inttoptr i64 %3180 to double*
  store double %3169, double* %3181
  %3182 = inttoptr i64 %2430 to i32*
  %3183 = load i32, i32* %3182
  %3184 = sext i32 %3183 to i64
  %3185 = shl nsw i64 %3184, 3
  %3186 = add i64 %2445, %3185
  %3187 = inttoptr i64 %3186 to double*
  %3188 = load double, double* %3187
  %3189 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3190 = add i64 %2442, %3185
  %3191 = inttoptr i64 %3190 to double*
  %3192 = load double, double* %3191
  %3193 = fmul double %3143, %3192
  %3194 = add i64 %2443, %3185
  %3195 = inttoptr i64 %3194 to double*
  %3196 = load double, double* %3195
  %3197 = fmul double %3142, %3196
  store double %3197, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %3198 = fadd double %3193, %3197
  %3199 = add i64 %2444, %3185
  %3200 = load double, double* %4822, align 1
  %3201 = inttoptr i64 %3199 to double*
  %3202 = load double, double* %3201
  %3203 = fmul double %3200, %3202
  store double %3203, double* %4822, align 1, !tbaa !1264
  %3204 = fsub double %3198, %3203
  %3205 = add i64 %2446, %3185
  %3206 = inttoptr i64 %3205 to double*
  %3207 = load double, double* %3206
  %3208 = fadd double %3204, %3207
  store double %3208, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %3209 = fmul double %3189, %3208
  store double %3209, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %3210 = fsub double %3188, %3209
  store double %3210, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %3211 = inttoptr i64 %2422 to i32*
  %3212 = load i32, i32* %3211
  %3213 = sext i32 %3212 to i64
  %3214 = mul nsw i64 %3213, 520
  %3215 = load i64, i64* %5, align 8
  %3216 = add i64 %3214, %3215
  %3217 = inttoptr i64 %2425 to i32*
  %3218 = load i32, i32* %3217
  %3219 = sext i32 %3218 to i64
  %3220 = mul nsw i64 %3219, 40
  %3221 = add i64 %3220, %3216
  %3222 = add i64 %3185, %3221
  %3223 = inttoptr i64 %3222 to double*
  store double %3210, double* %3223
  %3224 = inttoptr i64 %2430 to i32*
  %3225 = load i32, i32* %3224
  %3226 = add i32 %3225, 1
  %3227 = inttoptr i64 %2430 to i32*
  store i32 %3226, i32* %3227
  %3228 = add i64 %1213, -10
  br label %block_41788c

block_416491:                                     ; preds = %block_416487, %block_416702
  %3229 = phi i64 [ %3485, %block_416487 ], [ %2107, %block_416702 ]
  %3230 = phi %struct.Memory* [ %190, %block_416487 ], [ %3891, %block_416702 ]
  %3231 = inttoptr i64 %632 to i32*
  %3232 = load i32, i32* %3231
  %3233 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %3234 = sub i32 %3232, %3233
  %3235 = lshr i32 %3234, 31
  %3236 = lshr i32 %3232, 31
  %3237 = lshr i32 %3233, 31
  %3238 = xor i32 %3237, %3236
  %3239 = xor i32 %3235, %3236
  %3240 = add nuw nsw i32 %3239, %3238
  %3241 = icmp eq i32 %3240, 2
  %3242 = icmp ne i32 %3235, 0
  %3243 = xor i1 %3242, %3241
  %3244 = select i1 %3243, i64 16, i64 644
  %3245 = add i64 %3229, %3244
  %3246 = add i64 %3245, 7
  br i1 %3243, label %block_4164a1, label %block_416715

block_414df9:                                     ; preds = %block_414def
  %3247 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %3247, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %3248 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  store double %3248, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %3249 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1232) to double*)
  store double %3249, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %3250 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %3251 = inttoptr i64 %2045 to i32*
  %3252 = load i32, i32* %3251
  %3253 = sext i32 %3252 to i64
  %3254 = mul nsw i64 %3253, 6760
  %3255 = add i64 %3254, ptrtoint (%rsd_type* @rsd to i64)
  %3256 = inttoptr i64 %2048 to i32*
  %3257 = load i32, i32* %3256
  %3258 = sext i32 %3257 to i64
  %3259 = mul nsw i64 %3258, 520
  %3260 = add i64 %3259, %3255
  %3261 = sext i32 %3823 to i64
  %3262 = shl nsw i64 %3261, 3
  %3263 = add i64 %3260, 40
  %3264 = add i64 %3263, %3262
  %3265 = inttoptr i64 %3264 to double*
  %3266 = load double, double* %3265
  %3267 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3268 = add i64 %3254, ptrtoint (%u_type* @u to i64)
  %3269 = add i64 %3259, %3268
  %3270 = add i64 %3269, 40
  %3271 = add i64 %3270, %3262
  %3272 = inttoptr i64 %3271 to double*
  %3273 = load double, double* %3272
  %3274 = fmul double %3250, %3273
  %3275 = bitcast double %3247 to <2 x i32>
  %3276 = extractelement <2 x i32> %3275, i32 0
  store i32 %3276, i32* %2079, align 1, !tbaa !1292
  %3277 = extractelement <2 x i32> %3275, i32 1
  store i32 %3277, i32* %2081, align 1, !tbaa !1292
  store i32 0, i32* %2083, align 1, !tbaa !1292
  store i32 0, i32* %2085, align 1, !tbaa !1292
  %3278 = add i64 %3269, 80
  %3279 = add i64 %3278, %3262
  %3280 = load double, double* %2086, align 1
  %3281 = inttoptr i64 %3279 to double*
  %3282 = load double, double* %3281
  %3283 = fmul double %3280, %3282
  store double %3283, double* %2086, align 1, !tbaa !1264
  %3284 = fsub double %3274, %3283
  %3285 = add i64 %3269, 120
  %3286 = add i64 %3285, %3262
  %3287 = inttoptr i64 %3286 to double*
  %3288 = load double, double* %3287
  %3289 = fadd double %3284, %3288
  %3290 = fmul double %3267, %3289
  store double %3290, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %3291 = fsub double %3266, %3290
  %3292 = inttoptr i64 %3264 to double*
  store double %3291, double* %3292
  %3293 = inttoptr i64 %2045 to i32*
  %3294 = load i32, i32* %3293
  %3295 = sext i32 %3294 to i64
  %3296 = mul nsw i64 %3295, 6760
  %3297 = add i64 %3296, ptrtoint (%rsd_type* @rsd to i64)
  %3298 = inttoptr i64 %2048 to i32*
  %3299 = load i32, i32* %3298
  %3300 = sext i32 %3299 to i64
  %3301 = mul nsw i64 %3300, 520
  %3302 = add i64 %3301, %3297
  %3303 = inttoptr i64 %2066 to i32*
  %3304 = load i32, i32* %3303
  %3305 = sext i32 %3304 to i64
  %3306 = shl nsw i64 %3305, 3
  %3307 = add i64 %3302, 80
  %3308 = add i64 %3307, %3306
  %3309 = inttoptr i64 %3308 to double*
  %3310 = load double, double* %3309
  %3311 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3312 = add i64 %3296, ptrtoint (%u_type* @u to i64)
  %3313 = add i64 %3301, %3312
  %3314 = add i64 %3313, 40
  %3315 = add i64 %3314, %3306
  %3316 = load double, double* %4830, align 1
  %3317 = inttoptr i64 %3315 to double*
  %3318 = load double, double* %3317
  %3319 = fmul double %3316, %3318
  %3320 = add i64 %3313, 80
  %3321 = add i64 %3320, %3306
  %3322 = load double, double* %4826, align 1
  %3323 = inttoptr i64 %3321 to double*
  %3324 = load double, double* %3323
  %3325 = fmul double %3322, %3324
  store double %3325, double* %4826, align 1, !tbaa !1264
  %3326 = fadd double %3319, %3325
  store i64 %3313, i64* %7, align 8, !tbaa !1240
  %3327 = add i64 %3313, 120
  %3328 = add i64 %3327, %3306
  %3329 = load double, double* %4822, align 1
  %3330 = inttoptr i64 %3328 to double*
  %3331 = load double, double* %3330
  %3332 = fmul double %3329, %3331
  store double %3332, double* %4822, align 1, !tbaa !1264
  %3333 = fsub double %3326, %3332
  store i64 %3305, i64* %6, align 8, !tbaa !1240
  %3334 = add i64 %3313, 160
  %3335 = add i64 %3334, %3306
  %3336 = inttoptr i64 %3335 to double*
  %3337 = load double, double* %3336
  %3338 = fadd double %3333, %3337
  store double %3338, double* %4830, align 1, !tbaa !1264
  %3339 = fmul double %3311, %3338
  store double %3339, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %3340 = fsub double %3310, %3339
  store double %3340, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %3341 = inttoptr i64 %3308 to double*
  store double %3340, double* %3341
  %3342 = inttoptr i64 %2066 to i32*
  %3343 = load i32, i32* %3342
  %3344 = add i32 %3343, 1
  %3345 = inttoptr i64 %2066 to i32*
  store i32 %3344, i32* %3345
  %3346 = add i64 %3833, -10
  br label %block_414def

block_413ef8:                                     ; preds = %block_413c0a
  %3347 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %3348 = icmp eq i32 %3347, 0
  %3349 = select i1 %3348, i64 24, i64 14
  %3350 = add i64 %4793, %3349
  br i1 %3348, label %block_413f10, label %block_413f06

block_41708c:                                     ; preds = %block_417082
  %3351 = sext i32 %3849 to i64
  %3352 = mul nsw i64 %3351, 6760
  %3353 = add i64 %3352, ptrtoint (%rsd_type* @rsd to i64)
  %3354 = inttoptr i64 %2422 to i32*
  %3355 = load i32, i32* %3354
  %3356 = sext i32 %3355 to i64
  %3357 = mul nsw i64 %3356, 520
  %3358 = add i64 %3357, %3353
  %3359 = inttoptr i64 %2425 to i32*
  %3360 = load i32, i32* %3359
  %3361 = sext i32 %3360 to i64
  %3362 = mul nsw i64 %3361, 40
  %3363 = add i64 %3362, %3358
  %3364 = sext i32 %3837 to i64
  %3365 = shl nsw i64 %3364, 3
  %3366 = add i64 %3365, %3363
  %3367 = inttoptr i64 %3366 to double*
  %3368 = load double, double* %3367
  %3369 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3370 = add i32 %3849, 1
  %3371 = sext i32 %3370 to i64
  %3372 = mul nsw i64 %3371, 40
  %3373 = add i64 %3372, ptrtoint (%flux_type* @flux to i64)
  store i64 %3373, i64* %7, align 8, !tbaa !1240
  %3374 = add i64 %3365, %3373
  %3375 = inttoptr i64 %3374 to double*
  %3376 = load double, double* %3375
  %3377 = add i32 %3849, -1
  %3378 = zext i32 %3377 to i64
  store i64 %3378, i64* %8, align 8, !tbaa !1240
  %3379 = sext i32 %3377 to i64
  %3380 = mul nsw i64 %3379, 40
  %3381 = add i64 %3380, ptrtoint (%flux_type* @flux to i64)
  store i64 %3364, i64* %6, align 8, !tbaa !1240
  %3382 = add i64 %3365, %3381
  %3383 = inttoptr i64 %3382 to double*
  %3384 = load double, double* %3383
  %3385 = fsub double %3376, %3384
  store double %3385, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %3386 = fmul double %3369, %3385
  store double %3386, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %3387 = fsub double %3368, %3386
  store double %3387, double* %4822, align 1, !tbaa !1264
  store i64 0, i64* %4823, align 1, !tbaa !1264
  %3388 = mul nsw i64 %3351, 40
  %3389 = add i64 %3388, %2431
  %3390 = add i64 %3365, %3389
  %3391 = inttoptr i64 %3390 to double*
  store double %3387, double* %3391
  %3392 = inttoptr i64 %2430 to i32*
  %3393 = load i32, i32* %3392
  %3394 = add i32 %3393, 1
  %3395 = inttoptr i64 %2430 to i32*
  store i32 %3394, i32* %3395
  %3396 = add i64 %3847, -10
  br label %block_417082

block_416c89:                                     ; preds = %block_416951
  %3397 = inttoptr i64 %629 to i32*
  %3398 = load i32, i32* %3397
  %3399 = add i32 %3398, 1
  %3400 = inttoptr i64 %629 to i32*
  store i32 %3399, i32* %3400
  %3401 = add i64 %2146, -5862
  br label %block_4155a3

block_417152:                                     ; preds = %block_417066
  %3402 = add i64 %3921, 7
  %3403 = inttoptr i64 %2426 to i32*
  store i32 1, i32* %3403
  br label %block_417159

block_413f17:                                     ; preds = %block_413f10, %block_415559
  %3404 = phi i64 [ %2046, %block_413f10 ], [ %1669, %block_415559 ]
  %3405 = phi %struct.Memory* [ %2043, %block_413f10 ], [ %4261, %block_415559 ]
  %3406 = inttoptr i64 %2045 to i32*
  %3407 = load i32, i32* %3406
  %3408 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3409 = add i32 %3408, -1
  %3410 = sub i32 %3407, %3409
  %3411 = lshr i32 %3410, 31
  %3412 = lshr i32 %3407, 31
  %3413 = lshr i32 %3409, 31
  %3414 = xor i32 %3413, %3412
  %3415 = xor i32 %3411, %3412
  %3416 = add nuw nsw i32 %3415, %3414
  %3417 = icmp eq i32 %3416, 2
  %3418 = icmp ne i32 %3411, 0
  %3419 = xor i1 %3418, %3417
  %3420 = select i1 %3419, i64 21, i64 5717
  %3421 = add i64 %3404, %3420
  br i1 %3419, label %block_413f2c, label %block_41556c

block_415888:                                     ; preds = %block_41587e
  %3422 = inttoptr i64 %629 to i32*
  %3423 = load i32, i32* %3422
  %3424 = sext i32 %3423 to i64
  %3425 = mul nsw i64 %3424, 6760
  %3426 = add i64 %3425, ptrtoint (%rsd_type* @rsd to i64)
  %3427 = inttoptr i64 %633 to i32*
  %3428 = load i32, i32* %3427
  %3429 = sext i32 %3428 to i64
  %3430 = mul nsw i64 %3429, 520
  %3431 = add i64 %3430, %3426
  %3432 = inttoptr i64 %632 to i32*
  %3433 = load i32, i32* %3432
  %3434 = sext i32 %3433 to i64
  %3435 = mul nsw i64 %3434, 40
  %3436 = add i64 %3435, %3431
  %3437 = sext i32 %3784 to i64
  %3438 = shl nsw i64 %3437, 3
  %3439 = add i64 %3438, %3436
  %3440 = inttoptr i64 %3439 to double*
  %3441 = load double, double* %3440
  %3442 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %3443 = add i32 %3428, 1
  %3444 = sext i32 %3443 to i64
  %3445 = mul nsw i64 %3444, 40
  %3446 = add i64 %3445, ptrtoint (%flux_type* @flux to i64)
  store i64 %3446, i64* %7, align 8, !tbaa !1240
  %3447 = add i64 %3438, %3446
  %3448 = inttoptr i64 %3447 to double*
  %3449 = load double, double* %3448
  %3450 = add i32 %3428, -1
  %3451 = zext i32 %3450 to i64
  store i64 %3451, i64* %8, align 8, !tbaa !1240
  %3452 = sext i32 %3450 to i64
  %3453 = mul nsw i64 %3452, 40
  %3454 = add i64 %3453, ptrtoint (%flux_type* @flux to i64)
  store i64 %3437, i64* %6, align 8, !tbaa !1240
  %3455 = add i64 %3438, %3454
  %3456 = inttoptr i64 %3455 to double*
  %3457 = load double, double* %3456
  %3458 = fsub double %3449, %3457
  store double %3458, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %3459 = fmul double %3442, %3458
  store double %3459, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %3460 = fsub double %3441, %3459
  store double %3460, double* %4822, align 1, !tbaa !1264
  store i64 0, i64* %4823, align 1, !tbaa !1264
  %3461 = inttoptr i64 %3439 to double*
  store double %3460, double* %3461
  %3462 = inttoptr i64 %636 to i32*
  %3463 = load i32, i32* %3462
  %3464 = add i32 %3463, 1
  %3465 = inttoptr i64 %636 to i32*
  store i32 %3464, i32* %3465
  %3466 = add i64 %3794, -10
  br label %block_41587e

block_415970:                                     ; preds = %block_415966, %block_415980
  %3467 = phi i64 [ %1304, %block_415966 ], [ %963, %block_415980 ]
  %3468 = phi %struct.Memory* [ %3869, %block_415966 ], [ %3468, %block_415980 ]
  %3469 = inttoptr i64 %633 to i32*
  %3470 = load i32, i32* %3469
  %3471 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %3472 = sub i32 %3470, %3471
  %3473 = lshr i32 %3472, 31
  %3474 = lshr i32 %3470, 31
  %3475 = lshr i32 %3471, 31
  %3476 = xor i32 %3475, %3474
  %3477 = xor i32 %3473, %3474
  %3478 = add nuw nsw i32 %3477, %3476
  %3479 = icmp eq i32 %3478, 2
  %3480 = icmp ne i32 %3473, 0
  %3481 = xor i1 %3480, %3479
  %3482 = select i1 %3481, i64 16, i64 1060
  %3483 = add i64 %3467, %3482
  br i1 %3481, label %block_415980, label %block_415d94

block_416487:                                     ; preds = %block_4155c2
  %3484 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %3485 = add i64 %205, 10
  %3486 = inttoptr i64 %632 to i32*
  store i32 %3484, i32* %3486
  br label %block_416491

block_417885:                                     ; preds = %block_41746c
  %3487 = add i64 %3867, 7
  %3488 = inttoptr i64 %2430 to i32*
  store i32 0, i32* %3488
  br label %block_41788c

block_417481:                                     ; preds = %block_41746c
  %3489 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %3489, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  store i64 ptrtoint (%flux_type* @flux to i64), i64* %6, align 8, !tbaa !1240
  %3490 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %3490, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %3491 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %3491, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %3492 = sext i32 %3853 to i64
  %3493 = mul nsw i64 %3492, 40
  %3494 = add i64 %3493, %2431
  %3495 = inttoptr i64 %3494 to double*
  %3496 = load double, double* %3495
  %3497 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %3498 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3499 = fmul double %3497, %3498
  %3500 = add i32 %3853, -1
  %3501 = sext i32 %3500 to i64
  %3502 = mul nsw i64 %3501, 48
  %3503 = add i64 %3502, %2427
  %3504 = inttoptr i64 %3503 to double*
  %3505 = load double, double* %3504
  %3506 = mul nsw i64 %3492, 48
  %3507 = add i64 %3506, %2427
  %3508 = bitcast double %3489 to <2 x i32>
  %3509 = extractelement <2 x i32> %3508, i32 0
  store i32 %3509, i32* %2079, align 1, !tbaa !1292
  %3510 = extractelement <2 x i32> %3508, i32 1
  store i32 %3510, i32* %2081, align 1, !tbaa !1292
  %3511 = load double, double* %2086, align 1
  %3512 = inttoptr i64 %3507 to double*
  %3513 = load double, double* %3512
  %3514 = fmul double %3511, %3513
  %3515 = fsub double %3505, %3514
  %3516 = add i32 %3853, 1
  %3517 = sext i32 %3516 to i64
  %3518 = mul nsw i64 %3517, 48
  %3519 = add i64 %3518, %2427
  %3520 = inttoptr i64 %3519 to double*
  %3521 = load double, double* %3520
  %3522 = fadd double %3515, %3521
  %3523 = fmul double %3499, %3522
  %3524 = fadd double %3496, %3523
  %3525 = inttoptr i64 %3494 to double*
  store double %3524, double* %3525
  %3526 = inttoptr i64 %2426 to i32*
  %3527 = load i32, i32* %3526
  %3528 = sext i32 %3527 to i64
  %3529 = mul nsw i64 %3528, 40
  %3530 = add i64 %3529, %2431
  %3531 = add i64 %3530, 8
  %3532 = inttoptr i64 %3531 to double*
  %3533 = load double, double* %3532
  %3534 = bitcast double %3491 to <2 x i32>
  %3535 = extractelement <2 x i32> %3534, i32 0
  store i32 %3535, i32* %2058, align 1, !tbaa !1292
  %3536 = extractelement <2 x i32> %3534, i32 1
  store i32 %3536, i32* %2060, align 1, !tbaa !1292
  %3537 = load double, double* %2065, align 1
  %3538 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3539 = fmul double %3537, %3538
  %3540 = load double, double* %4826, align 1
  %3541 = fmul double %3539, %3540
  %3542 = add i32 %3527, 1
  %3543 = sext i32 %3542 to i64
  %3544 = mul nsw i64 %3543, 40
  %3545 = load i64, i64* %6, align 8
  %3546 = add i64 %3544, %3545
  %3547 = add i64 %3546, 8
  %3548 = inttoptr i64 %3547 to double*
  %3549 = load double, double* %3548
  %3550 = add i64 %3529, %3545
  %3551 = add i64 %3550, 8
  %3552 = inttoptr i64 %3551 to double*
  %3553 = load double, double* %3552
  %3554 = fsub double %3549, %3553
  %3555 = fmul double %3541, %3554
  %3556 = fadd double %3533, %3555
  %3557 = load double, double* bitcast (%dz2_type* @dz2 to double*)
  %3558 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3559 = fmul double %3557, %3558
  %3560 = add i32 %3527, -1
  %3561 = sext i32 %3560 to i64
  %3562 = mul nsw i64 %3561, 48
  %3563 = add i64 %3562, %2427
  %3564 = add i64 %3563, 8
  %3565 = inttoptr i64 %3564 to double*
  %3566 = load double, double* %3565
  %3567 = mul nsw i64 %3528, 48
  %3568 = add i64 %3567, %2427
  %3569 = load <2 x i32>, <2 x i32>* %2056, align 1
  %3570 = extractelement <2 x i32> %3569, i32 0
  store i32 %3570, i32* %2079, align 1, !tbaa !1292
  %3571 = extractelement <2 x i32> %3569, i32 1
  store i32 %3571, i32* %2081, align 1, !tbaa !1292
  %3572 = add i64 %3568, 8
  %3573 = load double, double* %2086, align 1
  %3574 = inttoptr i64 %3572 to double*
  %3575 = load double, double* %3574
  %3576 = fmul double %3573, %3575
  %3577 = fsub double %3566, %3576
  %3578 = mul nsw i64 %3543, 48
  %3579 = add i64 %3578, %2427
  %3580 = add i64 %3579, 8
  %3581 = inttoptr i64 %3580 to double*
  %3582 = load double, double* %3581
  %3583 = fadd double %3577, %3582
  %3584 = fmul double %3559, %3583
  %3585 = fadd double %3556, %3584
  %3586 = add i64 %3529, %2431
  %3587 = add i64 %3586, 8
  %3588 = inttoptr i64 %3587 to double*
  store double %3585, double* %3588
  %3589 = inttoptr i64 %2426 to i32*
  %3590 = load i32, i32* %3589
  %3591 = sext i32 %3590 to i64
  %3592 = mul nsw i64 %3591, 40
  %3593 = add i64 %3592, %2431
  %3594 = add i64 %3593, 16
  %3595 = inttoptr i64 %3594 to double*
  %3596 = load double, double* %3595
  %3597 = load <2 x i32>, <2 x i32>* %2087, align 1
  %3598 = extractelement <2 x i32> %3597, i32 0
  store i32 %3598, i32* %2058, align 1, !tbaa !1292
  %3599 = extractelement <2 x i32> %3597, i32 1
  store i32 %3599, i32* %2060, align 1, !tbaa !1292
  %3600 = load double, double* %2065, align 1
  %3601 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3602 = fmul double %3600, %3601
  %3603 = load double, double* %4826, align 1
  %3604 = fmul double %3602, %3603
  %3605 = add i32 %3590, 1
  %3606 = sext i32 %3605 to i64
  %3607 = mul nsw i64 %3606, 40
  %3608 = load i64, i64* %6, align 8
  %3609 = add i64 %3607, %3608
  %3610 = add i64 %3609, 16
  %3611 = inttoptr i64 %3610 to double*
  %3612 = load double, double* %3611
  %3613 = add i64 %3592, %3608
  %3614 = add i64 %3613, 16
  %3615 = inttoptr i64 %3614 to double*
  %3616 = load double, double* %3615
  %3617 = fsub double %3612, %3616
  %3618 = fmul double %3604, %3617
  %3619 = fadd double %3596, %3618
  %3620 = load double, double* bitcast (%dz3_type* @dz3 to double*)
  %3621 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3622 = fmul double %3620, %3621
  %3623 = add i32 %3590, -1
  %3624 = sext i32 %3623 to i64
  %3625 = mul nsw i64 %3624, 48
  %3626 = add i64 %3625, %2427
  %3627 = add i64 %3626, 16
  %3628 = inttoptr i64 %3627 to double*
  %3629 = load double, double* %3628
  %3630 = mul nsw i64 %3591, 48
  %3631 = add i64 %3630, %2427
  %3632 = load <2 x i32>, <2 x i32>* %2056, align 1
  %3633 = extractelement <2 x i32> %3632, i32 0
  store i32 %3633, i32* %2079, align 1, !tbaa !1292
  %3634 = extractelement <2 x i32> %3632, i32 1
  store i32 %3634, i32* %2081, align 1, !tbaa !1292
  %3635 = add i64 %3631, 16
  %3636 = load double, double* %2086, align 1
  %3637 = inttoptr i64 %3635 to double*
  %3638 = load double, double* %3637
  %3639 = fmul double %3636, %3638
  %3640 = fsub double %3629, %3639
  %3641 = mul nsw i64 %3606, 48
  %3642 = add i64 %3641, %2427
  %3643 = add i64 %3642, 16
  %3644 = inttoptr i64 %3643 to double*
  %3645 = load double, double* %3644
  %3646 = fadd double %3640, %3645
  %3647 = fmul double %3622, %3646
  %3648 = fadd double %3619, %3647
  %3649 = add i64 %3592, %2431
  %3650 = add i64 %3649, 16
  %3651 = inttoptr i64 %3650 to double*
  store double %3648, double* %3651
  %3652 = inttoptr i64 %2426 to i32*
  %3653 = load i32, i32* %3652
  %3654 = sext i32 %3653 to i64
  %3655 = mul nsw i64 %3654, 40
  %3656 = add i64 %3655, %2431
  %3657 = add i64 %3656, 24
  %3658 = inttoptr i64 %3657 to double*
  %3659 = load double, double* %3658
  %3660 = load <2 x i32>, <2 x i32>* %2087, align 1
  %3661 = extractelement <2 x i32> %3660, i32 0
  store i32 %3661, i32* %2058, align 1, !tbaa !1292
  %3662 = extractelement <2 x i32> %3660, i32 1
  store i32 %3662, i32* %2060, align 1, !tbaa !1292
  %3663 = load double, double* %2065, align 1
  %3664 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3665 = fmul double %3663, %3664
  %3666 = load double, double* %4826, align 1
  %3667 = fmul double %3665, %3666
  %3668 = add i32 %3653, 1
  %3669 = sext i32 %3668 to i64
  %3670 = mul nsw i64 %3669, 40
  %3671 = load i64, i64* %6, align 8
  %3672 = add i64 %3670, %3671
  %3673 = add i64 %3672, 24
  %3674 = inttoptr i64 %3673 to double*
  %3675 = load double, double* %3674
  %3676 = add i64 %3655, %3671
  %3677 = add i64 %3676, 24
  %3678 = inttoptr i64 %3677 to double*
  %3679 = load double, double* %3678
  %3680 = fsub double %3675, %3679
  %3681 = fmul double %3667, %3680
  %3682 = fadd double %3659, %3681
  %3683 = load double, double* bitcast (%dz4_type* @dz4 to double*)
  %3684 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3685 = fmul double %3683, %3684
  %3686 = add i32 %3653, -1
  %3687 = sext i32 %3686 to i64
  %3688 = mul nsw i64 %3687, 48
  %3689 = add i64 %3688, %2427
  %3690 = add i64 %3689, 24
  %3691 = inttoptr i64 %3690 to double*
  %3692 = load double, double* %3691
  %3693 = mul nsw i64 %3654, 48
  %3694 = add i64 %3693, %2427
  %3695 = load <2 x i32>, <2 x i32>* %2056, align 1
  %3696 = load <2 x i32>, <2 x i32>* %2057, align 1
  %3697 = extractelement <2 x i32> %3695, i32 0
  store i32 %3697, i32* %2079, align 1, !tbaa !1292
  %3698 = extractelement <2 x i32> %3695, i32 1
  store i32 %3698, i32* %2081, align 1, !tbaa !1292
  %3699 = extractelement <2 x i32> %3696, i32 0
  store i32 %3699, i32* %2083, align 1, !tbaa !1292
  %3700 = extractelement <2 x i32> %3696, i32 1
  store i32 %3700, i32* %2085, align 1, !tbaa !1292
  %3701 = add i64 %3694, 24
  %3702 = load double, double* %2086, align 1
  %3703 = inttoptr i64 %3701 to double*
  %3704 = load double, double* %3703
  %3705 = fmul double %3702, %3704
  store double %3705, double* %2086, align 1, !tbaa !1264
  %3706 = fsub double %3692, %3705
  %3707 = mul nsw i64 %3669, 48
  %3708 = add i64 %3707, %2427
  %3709 = add i64 %3708, 24
  %3710 = inttoptr i64 %3709 to double*
  %3711 = load double, double* %3710
  %3712 = fadd double %3706, %3711
  store double %3712, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %3713 = fmul double %3685, %3712
  store double %3713, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %3714 = fadd double %3682, %3713
  %3715 = add i64 %3655, %2431
  %3716 = add i64 %3715, 24
  %3717 = inttoptr i64 %3716 to double*
  store double %3714, double* %3717
  %3718 = inttoptr i64 %2426 to i32*
  %3719 = load i32, i32* %3718
  %3720 = sext i32 %3719 to i64
  %3721 = mul nsw i64 %3720, 40
  %3722 = add i64 %3721, %2431
  %3723 = add i64 %3722, 32
  %3724 = inttoptr i64 %3723 to double*
  %3725 = load double, double* %3724
  %3726 = load double, double* %4830, align 1
  %3727 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3728 = fmul double %3726, %3727
  %3729 = load double, double* %4826, align 1
  %3730 = fmul double %3728, %3729
  %3731 = add i32 %3719, 1
  %3732 = zext i32 %3731 to i64
  %3733 = sext i32 %3731 to i64
  %3734 = mul nsw i64 %3733, 40
  %3735 = load i64, i64* %6, align 8
  %3736 = add i64 %3734, %3735
  store i64 %3736, i64* %8, align 8, !tbaa !1240
  %3737 = add i64 %3736, 32
  %3738 = inttoptr i64 %3737 to double*
  %3739 = load double, double* %3738
  %3740 = add i64 %3721, %3735
  %3741 = add i64 %3740, 32
  %3742 = inttoptr i64 %3741 to double*
  %3743 = load double, double* %3742
  %3744 = fsub double %3739, %3743
  %3745 = fmul double %3730, %3744
  %3746 = fadd double %3725, %3745
  %3747 = load double, double* bitcast (%dz5_type* @dz5 to double*)
  %3748 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3749 = fmul double %3747, %3748
  %3750 = add i32 %3719, -1
  %3751 = sext i32 %3750 to i64
  %3752 = mul nsw i64 %3751, 48
  %3753 = add i64 %3752, %2427
  %3754 = add i64 %3753, 32
  %3755 = inttoptr i64 %3754 to double*
  %3756 = load double, double* %3755
  %3757 = mul nsw i64 %3720, 48
  %3758 = add i64 %3757, %2427
  store i64 %3758, i64* %7, align 8, !tbaa !1240
  %3759 = add i64 %3758, 32
  %3760 = load double, double* %4822, align 1
  %3761 = inttoptr i64 %3759 to double*
  %3762 = load double, double* %3761
  %3763 = fmul double %3760, %3762
  store double %3763, double* %4822, align 1, !tbaa !1264
  %3764 = fsub double %3756, %3763
  store i64 %3732, i64* %11, align 8, !tbaa !1240
  %3765 = mul nsw i64 %3733, 48
  store i64 %3765, i64* %6, align 8, !tbaa !1240
  %3766 = add i64 %3765, %2427
  %3767 = add i64 %3766, 32
  %3768 = inttoptr i64 %3767 to double*
  %3769 = load double, double* %3768
  %3770 = fadd double %3764, %3769
  store double %3770, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %3771 = fmul double %3749, %3770
  store double %3771, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %3772 = fadd double %3746, %3771
  store double %3772, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %3773 = add i64 %3721, %2431
  %3774 = add i64 %3773, 32
  %3775 = inttoptr i64 %3774 to double*
  store double %3772, double* %3775
  %3776 = inttoptr i64 %2426 to i32*
  %3777 = load i32, i32* %3776
  %3778 = add i32 %3777, 1
  %3779 = inttoptr i64 %2426 to i32*
  store i32 %3778, i32* %3779
  %3780 = add i64 %3867, -21
  br label %block_41746c

block_41587e:                                     ; preds = %block_415877, %block_415888
  %3781 = phi i64 [ %3803, %block_415877 ], [ %3466, %block_415888 ]
  %3782 = phi %struct.Memory* [ %3869, %block_415877 ], [ %3782, %block_415888 ]
  %3783 = inttoptr i64 %636 to i32*
  %3784 = load i32, i32* %3783
  %3785 = add i32 %3784, -5
  %3786 = lshr i32 %3785, 31
  %3787 = lshr i32 %3784, 31
  %3788 = xor i32 %3786, %3787
  %3789 = add nuw nsw i32 %3788, %3787
  %3790 = icmp eq i32 %3789, 2
  %3791 = icmp ne i32 %3786, 0
  %3792 = xor i1 %3791, %3790
  %3793 = select i1 %3792, i64 10, i64 213
  %3794 = add i64 %3781, %3793
  br i1 %3792, label %block_415888, label %block_415953

block_416715:                                     ; preds = %block_416491
  %3795 = inttoptr i64 %633 to i32*
  store i32 3, i32* %3795
  br label %block_41671c

block_413f06:                                     ; preds = %block_413ef8
  store i64 2, i64* %8, align 8, !tbaa !1240
  %3796 = add i64 %3350, -66454
  %3797 = add i64 %3350, 10
  %3798 = load i64, i64* %9, align 8, !tbaa !1240
  %3799 = add i64 %3798, -8
  %3800 = inttoptr i64 %3799 to i64*
  store i64 %3797, i64* %3800
  store i64 %3799, i64* %9, align 8, !tbaa !1240
  %3801 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %3796, %struct.Memory* %4778)
  %3802 = load i64, i64* %3, align 8
  br label %block_413f10

block_415877:                                     ; preds = %block_415867
  %3803 = add i64 %3884, 7
  %3804 = inttoptr i64 %636 to i32*
  store i32 0, i32* %3804
  br label %block_41587e

block_417d6c:                                     ; preds = %block_416cd6
  %3805 = zext i32 %2276 to i64
  store i64 %3805, i64* %4, align 8
  %3806 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %3807 = icmp eq i32 %3806, 0
  %3808 = select i1 %3807, i64 24, i64 14
  %3809 = add i64 %2289, %3808
  br i1 %3807, label %block_417d84, label %block_417d7a

block_416c76:                                     ; preds = %block_416968
  %3810 = inttoptr i64 %632 to i32*
  %3811 = load i32, i32* %3810
  %3812 = add i32 %3811, 1
  %3813 = inttoptr i64 %632 to i32*
  store i32 %3812, i32* %3813
  %3814 = add i64 %1127, -805
  br label %block_416951

block_416474:                                     ; preds = %block_415d9e
  %3815 = inttoptr i64 %632 to i32*
  %3816 = load i32, i32* %3815
  %3817 = add i32 %3816, 1
  %3818 = inttoptr i64 %632 to i32*
  store i32 %3817, i32* %3818
  %3819 = add i64 %4039, -3762
  br label %block_4155c2

block_414def:                                     ; preds = %block_414de8, %block_414df9
  %3820 = phi i64 [ %3922, %block_414de8 ], [ %3346, %block_414df9 ]
  %3821 = phi %struct.Memory* [ %2026, %block_414de8 ], [ %3821, %block_414df9 ]
  %3822 = inttoptr i64 %2066 to i32*
  %3823 = load i32, i32* %3822
  %3824 = add i32 %3823, -5
  %3825 = lshr i32 %3824, 31
  %3826 = lshr i32 %3823, 31
  %3827 = xor i32 %3825, %3826
  %3828 = add nuw nsw i32 %3827, %3826
  %3829 = icmp eq i32 %3828, 2
  %3830 = icmp ne i32 %3825, 0
  %3831 = xor i1 %3830, %3829
  %3832 = select i1 %3831, i64 10, i64 573
  %3833 = add i64 %3820, %3832
  br i1 %3831, label %block_414df9, label %block_41502c

block_417082:                                     ; preds = %block_41707b, %block_41708c
  %3834 = phi i64 [ %4013, %block_41707b ], [ %3396, %block_41708c ]
  %3835 = phi %struct.Memory* [ %3905, %block_41707b ], [ %3835, %block_41708c ]
  %3836 = inttoptr i64 %2430 to i32*
  %3837 = load i32, i32* %3836
  %3838 = add i32 %3837, -5
  %3839 = lshr i32 %3838, 31
  %3840 = lshr i32 %3837, 31
  %3841 = xor i32 %3839, %3840
  %3842 = add nuw nsw i32 %3841, %3840
  %3843 = icmp eq i32 %3842, 2
  %3844 = icmp ne i32 %3839, 0
  %3845 = xor i1 %3844, %3843
  %3846 = select i1 %3845, i64 10, i64 189
  %3847 = add i64 %3834, %3846
  %3848 = inttoptr i64 %2426 to i32*
  %3849 = load i32, i32* %3848
  br i1 %3845, label %block_41708c, label %block_41713f

block_41746c:                                     ; preds = %block_417465, %block_417481
  %3850 = phi i64 [ %4015, %block_417465 ], [ %3780, %block_417481 ]
  %3851 = phi %struct.Memory* [ %35, %block_417465 ], [ %3851, %block_417481 ]
  %3852 = inttoptr i64 %2426 to i32*
  %3853 = load i32, i32* %3852
  %3854 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3855 = add i32 %3854, -1
  %3856 = sub i32 %3853, %3855
  %3857 = lshr i32 %3856, 31
  %3858 = lshr i32 %3853, 31
  %3859 = lshr i32 %3855, 31
  %3860 = xor i32 %3859, %3858
  %3861 = xor i32 %3857, %3858
  %3862 = add nuw nsw i32 %3861, %3860
  %3863 = icmp eq i32 %3862, 2
  %3864 = icmp ne i32 %3857, 0
  %3865 = xor i1 %3864, %3863
  %3866 = select i1 %3865, i64 21, i64 1049
  %3867 = add i64 %3850, %3866
  br i1 %3865, label %block_417481, label %block_417885

block_415867:                                     ; preds = %block_41585d, %block_415953
  %3868 = phi i64 [ %4021, %block_41585d ], [ %1182, %block_415953 ]
  %3869 = phi %struct.Memory* [ %1229, %block_41585d ], [ %3782, %block_415953 ]
  %3870 = inttoptr i64 %633 to i32*
  %3871 = load i32, i32* %3870
  %3872 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %3873 = sub i32 %3871, %3872
  %3874 = lshr i32 %3873, 31
  %3875 = lshr i32 %3871, 31
  %3876 = lshr i32 %3872, 31
  %3877 = xor i32 %3876, %3875
  %3878 = xor i32 %3874, %3875
  %3879 = add nuw nsw i32 %3878, %3877
  %3880 = icmp eq i32 %3879, 2
  %3881 = icmp ne i32 %3874, 0
  %3882 = xor i1 %3881, %3880
  %3883 = select i1 %3882, i64 16, i64 255
  %3884 = add i64 %3868, %3883
  br i1 %3882, label %block_415877, label %block_415966

block_413ed2:                                     ; preds = %block_413c38
  %3885 = inttoptr i64 %4819 to i32*
  %3886 = load i32, i32* %3885
  %3887 = add i32 %3886, 1
  %3888 = inttoptr i64 %4819 to i32*
  store i32 %3887, i32* %3888
  %3889 = add i64 %1199, -689
  br label %block_413c21

block_4164a8:                                     ; preds = %block_4164a1, %block_4164b2
  %3890 = phi i64 [ %3246, %block_4164a1 ], [ %2905, %block_4164b2 ]
  %3891 = phi %struct.Memory* [ %3230, %block_4164a1 ], [ %3891, %block_4164b2 ]
  %3892 = inttoptr i64 %636 to i32*
  %3893 = load i32, i32* %3892
  %3894 = add i32 %3893, -5
  %3895 = lshr i32 %3894, 31
  %3896 = lshr i32 %3893, 31
  %3897 = xor i32 %3895, %3896
  %3898 = add nuw nsw i32 %3897, %3896
  %3899 = icmp eq i32 %3898, 2
  %3900 = icmp ne i32 %3895, 0
  %3901 = xor i1 %3900, %3899
  %3902 = select i1 %3901, i64 10, i64 602
  %3903 = add i64 %3890, %3902
  br i1 %3901, label %block_4164b2, label %block_416702

block_417066:                                     ; preds = %block_41705f, %block_41713f
  %3904 = phi i64 [ %4018, %block_41705f ], [ %1247, %block_41713f ]
  %3905 = phi %struct.Memory* [ %2454, %block_41705f ], [ %3835, %block_41713f ]
  %3906 = inttoptr i64 %2426 to i32*
  %3907 = load i32, i32* %3906
  %3908 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3909 = add i32 %3908, -1
  %3910 = sub i32 %3907, %3909
  %3911 = lshr i32 %3910, 31
  %3912 = lshr i32 %3907, 31
  %3913 = lshr i32 %3909, 31
  %3914 = xor i32 %3913, %3912
  %3915 = xor i32 %3911, %3912
  %3916 = add nuw nsw i32 %3915, %3914
  %3917 = icmp eq i32 %3916, 2
  %3918 = icmp ne i32 %3911, 0
  %3919 = xor i1 %3918, %3917
  %3920 = select i1 %3919, i64 21, i64 236
  %3921 = add i64 %3904, %3920
  br i1 %3919, label %block_41707b, label %block_417152

block_414de8:                                     ; preds = %block_414712
  %3922 = add i64 %2041, 7
  %3923 = inttoptr i64 %2066 to i32*
  store i32 0, i32* %3923
  br label %block_414def

block_413cf2:                                     ; preds = %block_413c4f
  %3924 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %3924, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  store i64 ptrtoint (%u_type* @u to i64), i64* %5, align 8, !tbaa !1240
  %3925 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  %3926 = inttoptr i64 %4816 to i32*
  %3927 = load i32, i32* %3926
  %3928 = sext i32 %3927 to i64
  %3929 = mul nsw i64 %3928, 6760
  %3930 = add i64 %3929, ptrtoint (%u_type* @u to i64)
  %3931 = inttoptr i64 %4819 to i32*
  %3932 = load i32, i32* %3931
  %3933 = sext i32 %3932 to i64
  %3934 = mul nsw i64 %3933, 520
  %3935 = add i64 %3934, %3930
  %3936 = inttoptr i64 %4820 to i32*
  %3937 = load i32, i32* %3936
  %3938 = sext i32 %3937 to i64
  %3939 = mul nsw i64 %3938, 40
  %3940 = add i64 %3939, %3935
  store i64 %3940, i64* %8, align 8, !tbaa !1240
  %3941 = inttoptr i64 %3940 to double*
  %3942 = load double, double* %3941
  %3943 = fdiv double %3925, %3942
  %3944 = inttoptr i64 %4829 to double*
  store double %3943, double* %3944
  %3945 = inttoptr i64 %4829 to double*
  %3946 = load double, double* %3945
  %3947 = inttoptr i64 %4816 to i32*
  %3948 = load i32, i32* %3947
  %3949 = sext i32 %3948 to i64
  %3950 = mul nsw i64 %3949, 1352
  %3951 = add i64 %3950, ptrtoint (%rho_i_type* @rho_i to i64)
  %3952 = inttoptr i64 %4819 to i32*
  %3953 = load i32, i32* %3952
  %3954 = sext i32 %3953 to i64
  %3955 = mul nsw i64 %3954, 104
  %3956 = add i64 %3955, %3951
  %3957 = inttoptr i64 %4820 to i32*
  %3958 = load i32, i32* %3957
  %3959 = sext i32 %3958 to i64
  %3960 = shl nsw i64 %3959, 3
  %3961 = add i64 %3960, %3956
  %3962 = inttoptr i64 %3961 to double*
  store double %3946, double* %3962
  %3963 = inttoptr i64 %4816 to i32*
  %3964 = load i32, i32* %3963
  %3965 = sext i32 %3964 to i64
  %3966 = mul nsw i64 %3965, 6760
  %3967 = add i64 %3966, ptrtoint (%u_type* @u to i64)
  %3968 = inttoptr i64 %4819 to i32*
  %3969 = load i32, i32* %3968
  %3970 = sext i32 %3969 to i64
  %3971 = mul nsw i64 %3970, 520
  %3972 = add i64 %3971, %3967
  %3973 = inttoptr i64 %4820 to i32*
  %3974 = load i32, i32* %3973
  %3975 = sext i32 %3974 to i64
  %3976 = mul nsw i64 %3975, 40
  %3977 = add i64 %3976, %3972
  %3978 = add i64 %3977, 8
  %3979 = inttoptr i64 %3978 to double*
  %3980 = load double, double* %3979
  %3981 = fmul double %3980, %3980
  %3982 = add i64 %3977, 16
  %3983 = inttoptr i64 %3982 to double*
  %3984 = load double, double* %3983
  %3985 = fmul double %3984, %3984
  %3986 = fadd double %3981, %3985
  %3987 = load i64, i64* %5, align 8
  %3988 = add i64 %3966, %3987
  %3989 = add i64 %3971, %3988
  %3990 = add i64 %3976, %3989
  store i64 %3990, i64* %7, align 8, !tbaa !1240
  %3991 = add i64 %3990, 24
  %3992 = inttoptr i64 %3991 to double*
  %3993 = load double, double* %3992
  store i64 %3976, i64* %6, align 8, !tbaa !1240
  %3994 = fmul double %3993, %3993
  store double %3994, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %3995 = fadd double %3986, %3994
  store double %3995, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %3996 = load double, double* %4822, align 1
  %3997 = fmul double %3996, %3995
  %3998 = inttoptr i64 %4829 to double*
  %3999 = load double, double* %3998
  %4000 = fmul double %3997, %3999
  store double %4000, double* %4822, align 1, !tbaa !1264
  %4001 = mul nsw i64 %3965, 1352
  %4002 = add i64 %4001, ptrtoint (%qs_type* @qs to i64)
  %4003 = mul nsw i64 %3970, 104
  %4004 = add i64 %4003, %4002
  %4005 = shl nsw i64 %3975, 3
  %4006 = add i64 %4005, %4004
  %4007 = inttoptr i64 %4006 to double*
  store double %4000, double* %4007
  %4008 = inttoptr i64 %4820 to i32*
  %4009 = load i32, i32* %4008
  %4010 = add i32 %4009, 1
  %4011 = inttoptr i64 %4820 to i32*
  store i32 %4010, i32* %4011
  %4012 = add i64 %1295, -186
  br label %block_413c38

block_41707b:                                     ; preds = %block_417066
  %4013 = add i64 %3921, 7
  %4014 = inttoptr i64 %2430 to i32*
  store i32 0, i32* %4014
  br label %block_417082

block_417465:                                     ; preds = %block_417159
  %4015 = add i64 %50, 7
  %4016 = inttoptr i64 %2426 to i32*
  store i32 1, i32* %4016
  br label %block_41746c

block_4164a1:                                     ; preds = %block_416491
  %4017 = inttoptr i64 %636 to i32*
  store i32 0, i32* %4017
  br label %block_4164a8

block_41705f:                                     ; preds = %block_416ebe
  %4018 = add i64 %2469, 7
  %4019 = inttoptr i64 %2426 to i32*
  store i32 1, i32* %4019
  br label %block_417066

block_41585d:                                     ; preds = %block_4155d9
  %4020 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %4021 = add i64 %1244, 10
  %4022 = inttoptr i64 %633 to i32*
  store i32 %4020, i32* %4022
  br label %block_415867

block_415d9e:                                     ; preds = %block_415d94, %block_415dae
  %4023 = phi i64 [ %1280, %block_415d94 ], [ %577, %block_415dae ]
  %4024 = phi %struct.Memory* [ %3468, %block_415d94 ], [ %4024, %block_415dae ]
  %4025 = inttoptr i64 %633 to i32*
  %4026 = load i32, i32* %4025
  %4027 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %4028 = sub i32 %4026, %4027
  %4029 = lshr i32 %4028, 31
  %4030 = lshr i32 %4026, 31
  %4031 = lshr i32 %4027, 31
  %4032 = xor i32 %4031, %4030
  %4033 = xor i32 %4029, %4030
  %4034 = add nuw nsw i32 %4033, %4032
  %4035 = icmp eq i32 %4034, 2
  %4036 = icmp ne i32 %4029, 0
  %4037 = xor i1 %4036, %4035
  %4038 = select i1 %4037, i64 16, i64 1750
  %4039 = add i64 %4023, %4038
  br i1 %4037, label %block_415dae, label %block_416474

block_413c59:                                     ; preds = %block_413c4f
  %4040 = inttoptr i64 %4816 to i32*
  %4041 = load i32, i32* %4040
  %4042 = sext i32 %4041 to i64
  %4043 = mul nsw i64 %4042, 6760
  %4044 = add i64 %4043, ptrtoint (%frct_type* @frct to i64)
  %4045 = inttoptr i64 %4819 to i32*
  %4046 = load i32, i32* %4045
  %4047 = sext i32 %4046 to i64
  %4048 = mul nsw i64 %4047, 520
  %4049 = add i64 %4048, %4044
  %4050 = inttoptr i64 %4820 to i32*
  %4051 = load i32, i32* %4050
  %4052 = sext i32 %4051 to i64
  %4053 = mul nsw i64 %4052, 40
  %4054 = add i64 %4053, %4049
  %4055 = sext i32 %1285 to i64
  %4056 = shl nsw i64 %4055, 3
  %4057 = add i64 %4056, %4054
  %4058 = inttoptr i64 %4057 to double*
  %4059 = load double, double* %4058
  %4060 = bitcast double %4059 to i64
  %4061 = xor i64 %4060, -9223372036854775808
  store i64 %4061, i64* %4825, align 1, !tbaa !1240
  store i64 0, i64* %4823, align 1, !tbaa !1240
  %4062 = add i64 %4043, ptrtoint (%rsd_type* @rsd to i64)
  %4063 = add i64 %4048, %4062
  %4064 = add i64 %4053, %4063
  %4065 = add i64 %4056, %4064
  %4066 = bitcast i64 %4061 to double
  %4067 = inttoptr i64 %4065 to double*
  store double %4066, double* %4067
  %4068 = inttoptr i64 %4821 to i32*
  %4069 = load i32, i32* %4068
  %4070 = add i32 %4069, 1
  %4071 = inttoptr i64 %4821 to i32*
  store i32 %4070, i32* %4071
  %4072 = add i64 %1295, -10
  br label %block_413c4f

block_4155b8:                                     ; preds = %block_4155a3
  %4073 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %4074 = add i64 %625, 10
  %4075 = inttoptr i64 %632 to i32*
  store i32 %4073, i32* %4075
  br label %block_4155c2

block_41504f:                                     ; preds = %block_415059, %block_41504f.preheader
  %4076 = phi i64 [ %4740, %block_415059 ], [ %4258, %block_41504f.preheader ]
  %4077 = phi %struct.Memory* [ %4077, %block_415059 ], [ %4241, %block_41504f.preheader ]
  %4078 = inttoptr i64 %2066 to i32*
  %4079 = load i32, i32* %4078
  %4080 = add i32 %4079, -5
  %4081 = lshr i32 %4080, 31
  %4082 = lshr i32 %4079, 31
  %4083 = xor i32 %4081, %4082
  %4084 = add nuw nsw i32 %4083, %4082
  %4085 = icmp eq i32 %4084, 2
  %4086 = icmp ne i32 %4081, 0
  %4087 = xor i1 %4086, %4085
  %4088 = select i1 %4087, i64 10, i64 463
  %4089 = add i64 %4076, %4088
  br i1 %4087, label %block_415059, label %block_41521e

block_417d84:                                     ; preds = %block_417d6c, %block_417d7a
  %4090 = phi i64 [ %3809, %block_417d6c ], [ %970, %block_417d7a ]
  %4091 = phi %struct.Memory* [ %2274, %block_417d6c ], [ %969, %block_417d7a ]
  %4092 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %4093 = icmp eq i32 %4092, 0
  %4094 = select i1 %4093, i64 24, i64 14
  %4095 = add i64 %4090, %4094
  br i1 %4093, label %block_417d9c, label %block_417d92

block_413c48:                                     ; preds = %block_413c38
  %4096 = add i64 %1199, 7
  %4097 = inttoptr i64 %4821 to i32*
  store i32 0, i32* %4097
  br label %block_413c4f

block_415242:                                     ; preds = %block_415238
  %4098 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  store double %4098, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %4099 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %4099, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %4100 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %4101 = inttoptr i64 %2045 to i32*
  %4102 = load i32, i32* %4101
  %4103 = sext i32 %4102 to i64
  %4104 = mul nsw i64 %4103, 6760
  %4105 = add i64 %4104, ptrtoint (%rsd_type* @rsd to i64)
  %4106 = inttoptr i64 %2048 to i32*
  %4107 = load i32, i32* %4106
  %4108 = sext i32 %4107 to i64
  %4109 = mul nsw i64 %4108, 520
  %4110 = add i64 %4109, %4105
  %4111 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %4112 = add i32 %4111, -3
  %4113 = sext i32 %4112 to i64
  %4114 = mul nsw i64 %4113, 40
  %4115 = add i64 %4114, %4110
  %4116 = sext i32 %4766 to i64
  %4117 = shl nsw i64 %4116, 3
  %4118 = add i64 %4117, %4115
  %4119 = inttoptr i64 %4118 to double*
  %4120 = load double, double* %4119
  store double %4120, double* %2052, align 1, !tbaa !1264
  %4121 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %4121, double* %2065, align 1, !tbaa !1264
  %4122 = add i64 %4104, ptrtoint (%u_type* @u to i64)
  %4123 = add i64 %4109, %4122
  %4124 = add i32 %4111, -5
  %4125 = sext i32 %4124 to i64
  %4126 = mul nsw i64 %4125, 40
  %4127 = add i64 %4126, %4123
  %4128 = add i64 %4117, %4127
  %4129 = inttoptr i64 %4128 to double*
  %4130 = load double, double* %4129
  %4131 = add i32 %4111, -4
  %4132 = sext i32 %4131 to i64
  %4133 = mul nsw i64 %4132, 40
  %4134 = add i64 %4133, %4123
  %4135 = bitcast double %4099 to <2 x i32>
  %4136 = extractelement <2 x i32> %4135, i32 0
  store i32 %4136, i32* %2079, align 1, !tbaa !1292
  %4137 = extractelement <2 x i32> %4135, i32 1
  store i32 %4137, i32* %2081, align 1, !tbaa !1292
  store i32 0, i32* %2083, align 1, !tbaa !1292
  store i32 0, i32* %2085, align 1, !tbaa !1292
  %4138 = add i64 %4117, %4134
  %4139 = load double, double* %2086, align 1
  %4140 = inttoptr i64 %4138 to double*
  %4141 = load double, double* %4140
  %4142 = fmul double %4139, %4141
  store double %4142, double* %2086, align 1, !tbaa !1264
  %4143 = fsub double %4130, %4142
  %4144 = add i64 %4114, %4123
  %4145 = add i64 %4117, %4144
  %4146 = inttoptr i64 %4145 to double*
  %4147 = load double, double* %4146
  %4148 = fmul double %4100, %4147
  %4149 = fadd double %4143, %4148
  %4150 = add i64 %4104, ptrtoint (%u_type* @u to i64)
  %4151 = add i64 %4109, %4150
  %4152 = add i32 %4111, -2
  %4153 = sext i32 %4152 to i64
  %4154 = mul nsw i64 %4153, 40
  %4155 = add i64 %4154, %4151
  %4156 = load <2 x i32>, <2 x i32>* %2096, align 1
  %4157 = extractelement <2 x i32> %4156, i32 0
  store i32 %4157, i32* %2097, align 1, !tbaa !1292
  %4158 = extractelement <2 x i32> %4156, i32 1
  store i32 %4158, i32* %2099, align 1, !tbaa !1292
  %4159 = add i64 %4117, %4155
  %4160 = load double, double* %4830, align 1
  %4161 = inttoptr i64 %4159 to double*
  %4162 = load double, double* %4161
  %4163 = fmul double %4160, %4162
  %4164 = fsub double %4149, %4163
  store double %4164, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %4165 = load double, double* %2065, align 1
  %4166 = fmul double %4165, %4164
  %4167 = load double, double* %2052, align 1
  %4168 = fsub double %4167, %4166
  %4169 = add i64 %4104, ptrtoint (%rsd_type* @rsd to i64)
  %4170 = add i64 %4109, %4169
  %4171 = add i64 %4114, %4170
  %4172 = add i64 %4117, %4171
  %4173 = inttoptr i64 %4172 to double*
  store double %4168, double* %4173
  %4174 = inttoptr i64 %2045 to i32*
  %4175 = load i32, i32* %4174
  %4176 = sext i32 %4175 to i64
  %4177 = mul nsw i64 %4176, 6760
  %4178 = add i64 %4177, ptrtoint (%rsd_type* @rsd to i64)
  %4179 = inttoptr i64 %2048 to i32*
  %4180 = load i32, i32* %4179
  %4181 = sext i32 %4180 to i64
  %4182 = mul nsw i64 %4181, 520
  %4183 = add i64 %4182, %4178
  %4184 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %4185 = add i32 %4184, -2
  %4186 = zext i32 %4185 to i64
  %4187 = sext i32 %4185 to i64
  %4188 = mul nsw i64 %4187, 40
  %4189 = add i64 %4188, %4183
  %4190 = inttoptr i64 %2066 to i32*
  %4191 = load i32, i32* %4190
  %4192 = sext i32 %4191 to i64
  %4193 = shl nsw i64 %4192, 3
  %4194 = add i64 %4193, %4189
  %4195 = inttoptr i64 %4194 to double*
  %4196 = load double, double* %4195
  %4197 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %4198 = add i64 %4177, ptrtoint (%u_type* @u to i64)
  %4199 = add i64 %4182, %4198
  %4200 = add i32 %4184, -4
  %4201 = sext i32 %4200 to i64
  %4202 = mul nsw i64 %4201, 40
  %4203 = add i64 %4202, %4199
  %4204 = add i64 %4193, %4203
  %4205 = inttoptr i64 %4204 to double*
  %4206 = load double, double* %4205
  %4207 = add i64 %4177, ptrtoint (%u_type* @u to i64)
  %4208 = add i64 %4182, %4207
  %4209 = add i32 %4184, -3
  %4210 = sext i32 %4209 to i64
  %4211 = mul nsw i64 %4210, 40
  %4212 = add i64 %4211, %4208
  store i64 %4212, i64* %7, align 8, !tbaa !1240
  %4213 = add i64 %4193, %4212
  %4214 = load double, double* %4826, align 1
  %4215 = inttoptr i64 %4213 to double*
  %4216 = load double, double* %4215
  %4217 = fmul double %4214, %4216
  store double %4217, double* %4826, align 1, !tbaa !1264
  %4218 = fsub double %4206, %4217
  %4219 = add i64 %4188, %4208
  store i64 %4192, i64* %6, align 8, !tbaa !1240
  %4220 = add i64 %4193, %4219
  %4221 = load double, double* %4822, align 1
  %4222 = inttoptr i64 %4220 to double*
  %4223 = load double, double* %4222
  %4224 = fmul double %4221, %4223
  store double %4224, double* %4822, align 1, !tbaa !1264
  %4225 = fadd double %4218, %4224
  store double %4225, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %4226 = fmul double %4197, %4225
  store double %4226, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %4227 = fsub double %4196, %4226
  store double %4227, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %4228 = add i64 %4177, ptrtoint (%rsd_type* @rsd to i64)
  %4229 = add i64 %4182, %4228
  store i64 %4186, i64* %8, align 8, !tbaa !1240
  %4230 = add i64 %4188, %4229
  %4231 = add i64 %4193, %4230
  %4232 = inttoptr i64 %4231 to double*
  store double %4227, double* %4232
  %4233 = inttoptr i64 %2066 to i32*
  %4234 = load i32, i32* %4233
  %4235 = add i32 %4234, 1
  %4236 = inttoptr i64 %2066 to i32*
  store i32 %4235, i32* %4236
  %4237 = add i64 %4776, -10
  br label %block_415238

block_41674b:                                     ; preds = %block_41673b
  %4238 = add i64 %1264, 7
  %4239 = inttoptr i64 %636 to i32*
  store i32 0, i32* %4239
  br label %block_416752

block_415033:                                     ; preds = %block_41521e, %block_41502c
  %4240 = phi i64 [ %4277, %block_41502c ], [ %4446, %block_41521e ]
  %4241 = phi %struct.Memory* [ %3821, %block_41502c ], [ %4077, %block_41521e ]
  %4242 = inttoptr i64 %2049 to i32*
  %4243 = load i32, i32* %4242
  %4244 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %4245 = add i32 %4244, -3
  %4246 = sub i32 %4243, %4245
  %4247 = lshr i32 %4246, 31
  %4248 = lshr i32 %4243, 31
  %4249 = lshr i32 %4245, 31
  %4250 = xor i32 %4249, %4248
  %4251 = xor i32 %4247, %4248
  %4252 = add nuw nsw i32 %4251, %4250
  %4253 = icmp eq i32 %4252, 2
  %4254 = icmp ne i32 %4247, 0
  %4255 = xor i1 %4254, %4253
  %4256 = select i1 %4255, i64 21, i64 510
  %4257 = add i64 %4240, %4256
  %4258 = add i64 %4257, 7
  %4259 = inttoptr i64 %2066 to i32*
  store i32 0, i32* %4259
  br i1 %4255, label %block_41504f.preheader, label %block_415238.preheader

block_415238.preheader:                           ; preds = %block_415033
  br label %block_415238

block_41504f.preheader:                           ; preds = %block_415033
  br label %block_41504f

block_413f36:                                     ; preds = %block_415546, %block_413f2c
  %4260 = phi i64 [ %2271, %block_413f2c ], [ %2474, %block_415546 ]
  %4261 = phi %struct.Memory* [ %3405, %block_413f2c ], [ %4764, %block_415546 ]
  %4262 = inttoptr i64 %2048 to i32*
  %4263 = load i32, i32* %4262
  %4264 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %4265 = sub i32 %4263, %4264
  %4266 = lshr i32 %4265, 31
  %4267 = lshr i32 %4263, 31
  %4268 = lshr i32 %4264, 31
  %4269 = xor i32 %4268, %4267
  %4270 = xor i32 %4266, %4267
  %4271 = add nuw nsw i32 %4270, %4269
  %4272 = icmp eq i32 %4271, 2
  %4273 = icmp ne i32 %4266, 0
  %4274 = xor i1 %4273, %4272
  %4275 = select i1 %4274, i64 16, i64 5667
  %4276 = add i64 %4260, %4275
  br i1 %4274, label %block_413f46, label %block_415559

block_41502c:                                     ; preds = %block_414def
  %4277 = add i64 %3833, 7
  %4278 = inttoptr i64 %2049 to i32*
  store i32 3, i32* %4278
  br label %block_415033

block_413bf9:                                     ; preds = %block_413be0
  store i64 5, i64* %8, align 8, !tbaa !1240
  %4279 = add i64 %33, -65673
  %4280 = add i64 %33, 10
  %4281 = add i64 %20, -1328
  %4282 = inttoptr i64 %4281 to i64*
  store i64 %4280, i64* %4282
  store i64 %4281, i64* %9, align 8, !tbaa !1240
  %4283 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %4279, %struct.Memory* %2)
  %4284 = load i64, i64* %10, align 8
  %4285 = load i64, i64* %3, align 8
  br label %block_413c03

block_416ce6:                                     ; preds = %block_416cd6
  %4286 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %4287 = add i64 %2289, 10
  %4288 = inttoptr i64 %2425 to i32*
  store i32 %4286, i32* %4288
  br label %block_416cf0

block_415592:                                     ; preds = %block_415584
  store i64 3, i64* %8, align 8, !tbaa !1240
  %4289 = add i64 %2127, -72226
  %4290 = add i64 %2127, 10
  %4291 = load i64, i64* %9, align 8, !tbaa !1240
  %4292 = add i64 %4291, -8
  %4293 = inttoptr i64 %4292 to i64*
  store i64 %4290, i64* %4293
  store i64 %4292, i64* %9, align 8, !tbaa !1240
  %4294 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %4289, %struct.Memory* %2123)
  %4295 = load i64, i64* %3, align 8
  br label %block_41559c

block_413c21:                                     ; preds = %block_413c1a, %block_413ed2
  %4296 = phi i64 [ %4653, %block_413c1a ], [ %3889, %block_413ed2 ]
  %4297 = phi %struct.Memory* [ %4778, %block_413c1a ], [ %1184, %block_413ed2 ]
  %4298 = inttoptr i64 %4819 to i32*
  %4299 = load i32, i32* %4298
  %4300 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %4301 = sub i32 %4299, %4300
  %4302 = lshr i32 %4301, 31
  %4303 = lshr i32 %4299, 31
  %4304 = lshr i32 %4300, 31
  %4305 = xor i32 %4304, %4303
  %4306 = xor i32 %4302, %4303
  %4307 = add nuw nsw i32 %4306, %4305
  %4308 = icmp eq i32 %4307, 2
  %4309 = icmp ne i32 %4302, 0
  %4310 = xor i1 %4309, %4308
  %4311 = select i1 %4310, i64 16, i64 708
  %4312 = add i64 %4296, %4311
  br i1 %4310, label %block_413c31, label %block_413ee5

block_417b37:                                     ; preds = %block_417b2d
  %4313 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  store double %4313, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  store i64 %2427, i64* %5, align 8, !tbaa !1240
  %4314 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %4314, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  store i64 %2431, i64* %6, align 8, !tbaa !1240
  %4315 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %4316 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %4317 = add i32 %4316, -3
  %4318 = sext i32 %4317 to i64
  %4319 = mul nsw i64 %4318, 40
  %4320 = add i64 %4319, %2431
  %4321 = sext i32 %1268 to i64
  %4322 = shl nsw i64 %4321, 3
  %4323 = add i64 %4322, %4320
  %4324 = inttoptr i64 %4323 to double*
  %4325 = load double, double* %4324
  %4326 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %4327 = add i32 %4316, -5
  %4328 = sext i32 %4327 to i64
  %4329 = mul nsw i64 %4328, 48
  %4330 = add i64 %4329, %2427
  %4331 = add i64 %4322, %4330
  %4332 = inttoptr i64 %4331 to double*
  %4333 = load double, double* %4332
  %4334 = add i32 %4316, -4
  %4335 = sext i32 %4334 to i64
  %4336 = mul nsw i64 %4335, 48
  %4337 = add i64 %4336, %2427
  %4338 = bitcast double %4314 to <2 x i32>
  %4339 = extractelement <2 x i32> %4338, i32 0
  store i32 %4339, i32* %2079, align 1, !tbaa !1292
  %4340 = extractelement <2 x i32> %4338, i32 1
  store i32 %4340, i32* %2081, align 1, !tbaa !1292
  store i32 0, i32* %2083, align 1, !tbaa !1292
  store i32 0, i32* %2085, align 1, !tbaa !1292
  %4341 = add i64 %4322, %4337
  %4342 = load double, double* %2086, align 1
  %4343 = inttoptr i64 %4341 to double*
  %4344 = load double, double* %4343
  %4345 = fmul double %4342, %4344
  store double %4345, double* %2086, align 1, !tbaa !1264
  %4346 = fsub double %4333, %4345
  %4347 = mul nsw i64 %4318, 48
  %4348 = add i64 %4347, %2427
  %4349 = add i64 %4322, %4348
  %4350 = inttoptr i64 %4349 to double*
  %4351 = load double, double* %4350
  %4352 = fmul double %4315, %4351
  %4353 = fadd double %4346, %4352
  %4354 = add i32 %4316, -2
  %4355 = sext i32 %4354 to i64
  %4356 = mul nsw i64 %4355, 48
  %4357 = add i64 %4356, %2427
  store i32 %4339, i32* %2097, align 1, !tbaa !1292
  store i32 %4340, i32* %2099, align 1, !tbaa !1292
  %4358 = add i64 %4322, %4357
  %4359 = load double, double* %4830, align 1
  %4360 = inttoptr i64 %4358 to double*
  %4361 = load double, double* %4360
  %4362 = fmul double %4359, %4361
  %4363 = fsub double %4353, %4362
  store double %4363, double* %2076, align 1, !tbaa !1264
  store i64 0, i64* %2077, align 1, !tbaa !1264
  %4364 = fmul double %4326, %4363
  %4365 = fsub double %4325, %4364
  %4366 = mul nsw i64 %4318, 6760
  %4367 = add i64 %4366, ptrtoint (%rsd_type* @rsd to i64)
  %4368 = inttoptr i64 %2422 to i32*
  %4369 = load i32, i32* %4368
  %4370 = sext i32 %4369 to i64
  %4371 = mul nsw i64 %4370, 520
  %4372 = add i64 %4371, %4367
  %4373 = inttoptr i64 %2425 to i32*
  %4374 = load i32, i32* %4373
  %4375 = sext i32 %4374 to i64
  %4376 = mul nsw i64 %4375, 40
  %4377 = add i64 %4376, %4372
  store i64 %4377, i64* %11, align 8, !tbaa !1240
  %4378 = add i64 %4322, %4377
  %4379 = inttoptr i64 %4378 to double*
  store double %4365, double* %4379
  %4380 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %4381 = add i32 %4380, -2
  %4382 = zext i32 %4381 to i64
  %4383 = sext i32 %4381 to i64
  %4384 = mul nsw i64 %4383, 40
  %4385 = load i64, i64* %6, align 8
  %4386 = add i64 %4384, %4385
  %4387 = inttoptr i64 %2430 to i32*
  %4388 = load i32, i32* %4387
  %4389 = sext i32 %4388 to i64
  %4390 = shl nsw i64 %4389, 3
  %4391 = add i64 %4390, %4386
  %4392 = inttoptr i64 %4391 to double*
  %4393 = load double, double* %4392
  %4394 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %4395 = add i32 %4380, -4
  %4396 = sext i32 %4395 to i64
  %4397 = mul nsw i64 %4396, 48
  %4398 = load i64, i64* %5, align 8
  %4399 = add i64 %4397, %4398
  %4400 = add i64 %4390, %4399
  %4401 = inttoptr i64 %4400 to double*
  %4402 = load double, double* %4401
  %4403 = add i32 %4380, -3
  %4404 = sext i32 %4403 to i64
  %4405 = mul nsw i64 %4404, 48
  %4406 = add i64 %4405, %4398
  store i64 %4406, i64* %8, align 8, !tbaa !1240
  %4407 = add i64 %4390, %4406
  %4408 = load double, double* %4826, align 1
  %4409 = inttoptr i64 %4407 to double*
  %4410 = load double, double* %4409
  %4411 = fmul double %4408, %4410
  store double %4411, double* %4826, align 1, !tbaa !1264
  %4412 = fsub double %4402, %4411
  %4413 = mul nsw i64 %4383, 48
  %4414 = add i64 %4413, %4398
  store i64 %4389, i64* %6, align 8, !tbaa !1240
  %4415 = add i64 %4390, %4414
  %4416 = load double, double* %4822, align 1
  %4417 = inttoptr i64 %4415 to double*
  %4418 = load double, double* %4417
  %4419 = fmul double %4416, %4418
  store double %4419, double* %4822, align 1, !tbaa !1264
  %4420 = fadd double %4412, %4419
  store double %4420, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %4421 = fmul double %4394, %4420
  store double %4421, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %4422 = fsub double %4393, %4421
  store double %4422, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  store i64 %4382, i64* %7, align 8, !tbaa !1240
  %4423 = mul nsw i64 %4383, 6760
  %4424 = add i64 %4423, ptrtoint (%rsd_type* @rsd to i64)
  %4425 = inttoptr i64 %2422 to i32*
  %4426 = load i32, i32* %4425
  %4427 = sext i32 %4426 to i64
  %4428 = mul nsw i64 %4427, 520
  %4429 = add i64 %4428, %4424
  %4430 = inttoptr i64 %2425 to i32*
  %4431 = load i32, i32* %4430
  %4432 = sext i32 %4431 to i64
  %4433 = mul nsw i64 %4432, 40
  %4434 = add i64 %4433, %4429
  store i64 %4389, i64* %5, align 8, !tbaa !1240
  %4435 = add i64 %4390, %4434
  %4436 = inttoptr i64 %4435 to double*
  store double %4422, double* %4436
  %4437 = inttoptr i64 %2430 to i32*
  %4438 = load i32, i32* %4437
  %4439 = add i32 %4438, 1
  %4440 = inttoptr i64 %2430 to i32*
  store i32 %4439, i32* %4440
  %4441 = add i64 %1278, -10
  br label %block_417b2d

block_41521e:                                     ; preds = %block_41504f
  %4442 = inttoptr i64 %2049 to i32*
  %4443 = load i32, i32* %4442
  %4444 = add i32 %4443, 1
  %4445 = inttoptr i64 %2049 to i32*
  store i32 %4444, i32* %4445
  %4446 = add i64 %4089, -491
  br label %block_415033

block_413f5d:                                     ; preds = %block_413f4d
  %4447 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %4447, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %4448 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %4448, double* %4826, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4828, align 1, !tbaa !1264
  %4449 = inttoptr i64 %2045 to i32*
  %4450 = load i32, i32* %4449
  %4451 = sext i32 %4450 to i64
  %4452 = mul nsw i64 %4451, 6760
  %4453 = add i64 %4452, ptrtoint (%u_type* @u to i64)
  %4454 = inttoptr i64 %2048 to i32*
  %4455 = load i32, i32* %4454
  %4456 = sext i32 %4455 to i64
  %4457 = mul nsw i64 %4456, 520
  %4458 = add i64 %4457, %4453
  %4459 = sext i32 %4744 to i64
  %4460 = mul nsw i64 %4459, 40
  %4461 = add i64 %4460, %4458
  %4462 = add i64 %4461, 8
  %4463 = inttoptr i64 %4462 to double*
  %4464 = load double, double* %4463
  %4465 = add i64 %4460, ptrtoint (%flux_type* @flux to i64)
  %4466 = inttoptr i64 %4465 to double*
  store double %4464, double* %4466
  %4467 = inttoptr i64 %2045 to i32*
  %4468 = load i32, i32* %4467
  %4469 = sext i32 %4468 to i64
  %4470 = mul nsw i64 %4469, 6760
  %4471 = add i64 %4470, ptrtoint (%u_type* @u to i64)
  %4472 = inttoptr i64 %2048 to i32*
  %4473 = load i32, i32* %4472
  %4474 = sext i32 %4473 to i64
  %4475 = mul nsw i64 %4474, 520
  %4476 = add i64 %4475, %4471
  %4477 = inttoptr i64 %2049 to i32*
  %4478 = load i32, i32* %4477
  %4479 = sext i32 %4478 to i64
  %4480 = mul nsw i64 %4479, 40
  %4481 = add i64 %4480, %4476
  store i64 %4481, i64* %11, align 8, !tbaa !1240
  %4482 = add i64 %4481, 8
  %4483 = inttoptr i64 %4482 to double*
  %4484 = load double, double* %4483
  %4485 = mul nsw i64 %4469, 1352
  %4486 = add i64 %4485, ptrtoint (%rho_i_type* @rho_i to i64)
  %4487 = mul nsw i64 %4474, 104
  %4488 = add i64 %4487, %4486
  store i64 %4479, i64* %8, align 8, !tbaa !1240
  %4489 = shl nsw i64 %4479, 3
  %4490 = add i64 %4489, %4488
  %4491 = inttoptr i64 %4490 to double*
  %4492 = load double, double* %4491
  %4493 = fmul double %4484, %4492
  %4494 = inttoptr i64 %2050 to double*
  store double %4493, double* %4494
  %4495 = inttoptr i64 %2045 to i32*
  %4496 = load i32, i32* %4495
  %4497 = sext i32 %4496 to i64
  %4498 = mul nsw i64 %4497, 1352
  %4499 = add i64 %4498, ptrtoint (%qs_type* @qs to i64)
  %4500 = inttoptr i64 %2048 to i32*
  %4501 = load i32, i32* %4500
  %4502 = sext i32 %4501 to i64
  %4503 = mul nsw i64 %4502, 104
  %4504 = add i64 %4503, %4499
  %4505 = inttoptr i64 %2049 to i32*
  %4506 = load i32, i32* %4505
  %4507 = sext i32 %4506 to i64
  %4508 = shl nsw i64 %4507, 3
  %4509 = add i64 %4508, %4504
  %4510 = inttoptr i64 %4509 to double*
  %4511 = load double, double* %4510
  %4512 = inttoptr i64 %2051 to double*
  store double %4511, double* %4512
  %4513 = inttoptr i64 %2045 to i32*
  %4514 = load i32, i32* %4513
  %4515 = sext i32 %4514 to i64
  %4516 = mul nsw i64 %4515, 6760
  %4517 = add i64 %4516, ptrtoint (%u_type* @u to i64)
  %4518 = inttoptr i64 %2048 to i32*
  %4519 = load i32, i32* %4518
  %4520 = sext i32 %4519 to i64
  %4521 = mul nsw i64 %4520, 520
  %4522 = add i64 %4521, %4517
  %4523 = inttoptr i64 %2049 to i32*
  %4524 = load i32, i32* %4523
  %4525 = sext i32 %4524 to i64
  %4526 = mul nsw i64 %4525, 40
  %4527 = add i64 %4526, %4522
  %4528 = add i64 %4527, 8
  %4529 = inttoptr i64 %4528 to double*
  %4530 = load double, double* %4529
  %4531 = inttoptr i64 %2050 to double*
  %4532 = load double, double* %4531
  %4533 = fmul double %4530, %4532
  %4534 = add i64 %4516, ptrtoint (%u_type* @u to i64)
  %4535 = add i64 %4521, %4534
  %4536 = add i64 %4526, %4535
  %4537 = add i64 %4536, 32
  %4538 = inttoptr i64 %4537 to double*
  %4539 = load double, double* %4538
  %4540 = inttoptr i64 %2051 to double*
  %4541 = load double, double* %4540
  %4542 = fsub double %4539, %4541
  store double %4542, double* %2052, align 1, !tbaa !1264
  store i64 0, i64* %2053, align 1, !tbaa !1264
  %4543 = load <2 x i32>, <2 x i32>* %2056, align 1
  %4544 = load <2 x i32>, <2 x i32>* %2057, align 1
  %4545 = extractelement <2 x i32> %4543, i32 0
  store i32 %4545, i32* %2058, align 1, !tbaa !1292
  %4546 = extractelement <2 x i32> %4543, i32 1
  store i32 %4546, i32* %2060, align 1, !tbaa !1292
  %4547 = extractelement <2 x i32> %4544, i32 0
  store i32 %4547, i32* %2062, align 1, !tbaa !1292
  %4548 = extractelement <2 x i32> %4544, i32 1
  store i32 %4548, i32* %2064, align 1, !tbaa !1292
  %4549 = load double, double* %2065, align 1
  %4550 = fmul double %4549, %4542
  store double %4550, double* %2065, align 1, !tbaa !1264
  %4551 = fadd double %4533, %4550
  %4552 = add i64 %4526, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %4553 = inttoptr i64 %4552 to double*
  store double %4551, double* %4553
  %4554 = inttoptr i64 %2045 to i32*
  %4555 = load i32, i32* %4554
  %4556 = sext i32 %4555 to i64
  %4557 = mul nsw i64 %4556, 6760
  %4558 = add i64 %4557, ptrtoint (%u_type* @u to i64)
  %4559 = inttoptr i64 %2048 to i32*
  %4560 = load i32, i32* %4559
  %4561 = sext i32 %4560 to i64
  %4562 = mul nsw i64 %4561, 520
  %4563 = add i64 %4562, %4558
  %4564 = inttoptr i64 %2049 to i32*
  %4565 = load i32, i32* %4564
  %4566 = sext i32 %4565 to i64
  %4567 = mul nsw i64 %4566, 40
  %4568 = add i64 %4567, %4563
  %4569 = add i64 %4568, 16
  %4570 = inttoptr i64 %4569 to double*
  %4571 = load double, double* %4570
  %4572 = inttoptr i64 %2050 to double*
  %4573 = load double, double* %4572
  %4574 = fmul double %4571, %4573
  %4575 = add i64 %4567, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %4576 = inttoptr i64 %4575 to double*
  store double %4574, double* %4576
  %4577 = inttoptr i64 %2045 to i32*
  %4578 = load i32, i32* %4577
  %4579 = sext i32 %4578 to i64
  %4580 = mul nsw i64 %4579, 6760
  %4581 = add i64 %4580, ptrtoint (%u_type* @u to i64)
  %4582 = inttoptr i64 %2048 to i32*
  %4583 = load i32, i32* %4582
  %4584 = sext i32 %4583 to i64
  %4585 = mul nsw i64 %4584, 520
  %4586 = add i64 %4585, %4581
  %4587 = inttoptr i64 %2049 to i32*
  %4588 = load i32, i32* %4587
  %4589 = sext i32 %4588 to i64
  %4590 = mul nsw i64 %4589, 40
  %4591 = add i64 %4590, %4586
  %4592 = add i64 %4591, 24
  %4593 = inttoptr i64 %4592 to double*
  %4594 = load double, double* %4593
  %4595 = inttoptr i64 %2050 to double*
  %4596 = load double, double* %4595
  %4597 = fmul double %4594, %4596
  store double %4597, double* %4830, align 1, !tbaa !1264
  store i64 0, i64* %4831, align 1, !tbaa !1264
  %4598 = add i64 %4590, ptrtoint (%flux_type* @flux to i64)
  store i64 %4598, i64* %7, align 8, !tbaa !1240
  %4599 = add i64 %4590, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %4600 = inttoptr i64 %4599 to double*
  store double %4597, double* %4600
  %4601 = inttoptr i64 %2045 to i32*
  %4602 = load i32, i32* %4601
  %4603 = sext i32 %4602 to i64
  %4604 = mul nsw i64 %4603, 6760
  %4605 = add i64 %4604, ptrtoint (%u_type* @u to i64)
  %4606 = inttoptr i64 %2048 to i32*
  %4607 = load i32, i32* %4606
  %4608 = sext i32 %4607 to i64
  %4609 = mul nsw i64 %4608, 520
  %4610 = add i64 %4609, %4605
  %4611 = inttoptr i64 %2049 to i32*
  %4612 = load i32, i32* %4611
  %4613 = sext i32 %4612 to i64
  %4614 = mul nsw i64 %4613, 40
  store i64 %4614, i64* %6, align 8, !tbaa !1240
  %4615 = add i64 %4614, %4610
  %4616 = add i64 %4615, 32
  %4617 = load double, double* %4826, align 1
  %4618 = inttoptr i64 %4616 to double*
  %4619 = load double, double* %4618
  %4620 = fmul double %4617, %4619
  %4621 = load double, double* %4822, align 1
  %4622 = inttoptr i64 %2051 to double*
  %4623 = load double, double* %4622
  %4624 = fmul double %4621, %4623
  store double %4624, double* %4822, align 1, !tbaa !1264
  %4625 = fsub double %4620, %4624
  %4626 = inttoptr i64 %2050 to double*
  %4627 = load double, double* %4626
  %4628 = fmul double %4625, %4627
  store double %4628, double* %4826, align 1, !tbaa !1264
  %4629 = add i64 %4614, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %4630 = inttoptr i64 %4629 to double*
  store double %4628, double* %4630
  %4631 = inttoptr i64 %2049 to i32*
  %4632 = load i32, i32* %4631
  %4633 = add i32 %4632, 1
  %4634 = inttoptr i64 %2049 to i32*
  store i32 %4633, i32* %4634
  %4635 = add i64 %4757, -16
  br label %block_413f4d

block_416d07:                                     ; preds = %block_416d00, %block_416d17
  %4636 = phi i64 [ %2128, %block_416d00 ], [ %2015, %block_416d17 ]
  %4637 = phi %struct.Memory* [ %4795, %block_416d00 ], [ %4637, %block_416d17 ]
  %4638 = inttoptr i64 %2426 to i32*
  %4639 = load i32, i32* %4638
  %4640 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %4641 = sub i32 %4639, %4640
  %4642 = lshr i32 %4641, 31
  %4643 = lshr i32 %4639, 31
  %4644 = lshr i32 %4640, 31
  %4645 = xor i32 %4644, %4643
  %4646 = xor i32 %4642, %4643
  %4647 = add nuw nsw i32 %4646, %4645
  %4648 = icmp eq i32 %4647, 2
  %4649 = icmp ne i32 %4642, 0
  %4650 = xor i1 %4649, %4648
  %4651 = select i1 %4650, i64 16, i64 432
  %4652 = add i64 %4636, %4651
  br i1 %4650, label %block_416d17, label %block_416eb7

block_413c1a:                                     ; preds = %block_413c0a
  %4653 = add i64 %4793, 7
  %4654 = inttoptr i64 %4819 to i32*
  store i32 0, i32* %4654
  br label %block_413c21

block_415059:                                     ; preds = %block_41504f
  %4655 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %4655, double* %4822, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4824, align 1, !tbaa !1264
  %4656 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %4657 = inttoptr i64 %2045 to i32*
  %4658 = load i32, i32* %4657
  %4659 = sext i32 %4658 to i64
  %4660 = mul nsw i64 %4659, 6760
  %4661 = add i64 %4660, ptrtoint (%rsd_type* @rsd to i64)
  %4662 = inttoptr i64 %2048 to i32*
  %4663 = load i32, i32* %4662
  %4664 = sext i32 %4663 to i64
  %4665 = mul nsw i64 %4664, 520
  %4666 = add i64 %4665, %4661
  %4667 = inttoptr i64 %2049 to i32*
  %4668 = load i32, i32* %4667
  %4669 = sext i32 %4668 to i64
  %4670 = mul nsw i64 %4669, 40
  %4671 = add i64 %4670, %4666
  %4672 = sext i32 %4079 to i64
  %4673 = shl nsw i64 %4672, 3
  %4674 = add i64 %4673, %4671
  %4675 = inttoptr i64 %4674 to double*
  %4676 = load double, double* %4675
  store double %4676, double* %4830, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4832, align 1, !tbaa !1264
  %4677 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %4677, double* %2052, align 1, !tbaa !1264
  store double 0.000000e+00, double* %2054, align 1, !tbaa !1264
  %4678 = add i64 %4660, ptrtoint (%u_type* @u to i64)
  %4679 = add i64 %4665, %4678
  %4680 = add i32 %4668, -2
  %4681 = sext i32 %4680 to i64
  %4682 = mul nsw i64 %4681, 40
  %4683 = add i64 %4682, %4679
  %4684 = add i64 %4673, %4683
  %4685 = inttoptr i64 %4684 to double*
  %4686 = load double, double* %4685
  %4687 = add i32 %4668, -1
  %4688 = sext i32 %4687 to i64
  %4689 = mul nsw i64 %4688, 40
  %4690 = add i64 %4689, %4679
  %4691 = bitcast double %4655 to <2 x i32>
  %4692 = extractelement <2 x i32> %4691, i32 0
  store i32 %4692, i32* %2089, align 1, !tbaa !1292
  %4693 = extractelement <2 x i32> %4691, i32 1
  store i32 %4693, i32* %2091, align 1, !tbaa !1292
  store i32 0, i32* %2092, align 1, !tbaa !1292
  store i32 0, i32* %2094, align 1, !tbaa !1292
  %4694 = add i64 %4673, %4690
  %4695 = load double, double* %2076, align 1
  %4696 = inttoptr i64 %4694 to double*
  %4697 = load double, double* %4696
  %4698 = fmul double %4695, %4697
  store double %4698, double* %2076, align 1, !tbaa !1264
  %4699 = fsub double %4686, %4698
  %4700 = add i64 %4670, %4679
  %4701 = add i64 %4673, %4700
  %4702 = inttoptr i64 %4701 to double*
  %4703 = load double, double* %4702
  %4704 = fmul double %4656, %4703
  store double %4704, double* %4826, align 1, !tbaa !1264
  store i64 0, i64* %4827, align 1, !tbaa !1264
  %4705 = fadd double %4699, %4704
  %4706 = add i64 %4660, ptrtoint (%u_type* @u to i64)
  %4707 = add i64 %4665, %4706
  %4708 = add i32 %4668, 1
  %4709 = sext i32 %4708 to i64
  %4710 = mul nsw i64 %4709, 40
  %4711 = add i64 %4710, %4707
  store i64 %4711, i64* %7, align 8, !tbaa !1240
  %4712 = add i64 %4673, %4711
  %4713 = load double, double* %4822, align 1
  %4714 = inttoptr i64 %4712 to double*
  %4715 = load double, double* %4714
  %4716 = fmul double %4713, %4715
  store double %4716, double* %4822, align 1, !tbaa !1264
  %4717 = fsub double %4705, %4716
  %4718 = add i32 %4668, 2
  %4719 = zext i32 %4718 to i64
  store i64 %4719, i64* %8, align 8, !tbaa !1240
  %4720 = sext i32 %4718 to i64
  %4721 = mul nsw i64 %4720, 40
  %4722 = add i64 %4721, %4707
  store i64 %4672, i64* %6, align 8, !tbaa !1240
  %4723 = add i64 %4673, %4722
  %4724 = inttoptr i64 %4723 to double*
  %4725 = load double, double* %4724
  %4726 = fadd double %4717, %4725
  store double %4726, double* %2065, align 1, !tbaa !1264
  store i64 0, i64* %2061, align 1, !tbaa !1264
  %4727 = load double, double* %2052, align 1
  %4728 = fmul double %4727, %4726
  store double %4728, double* %2052, align 1, !tbaa !1264
  %4729 = load double, double* %4830, align 1
  %4730 = fsub double %4729, %4728
  store double %4730, double* %4830, align 1, !tbaa !1264
  %4731 = add i64 %4660, ptrtoint (%rsd_type* @rsd to i64)
  %4732 = add i64 %4665, %4731
  %4733 = add i64 %4670, %4732
  %4734 = add i64 %4673, %4733
  %4735 = inttoptr i64 %4734 to double*
  store double %4730, double* %4735
  %4736 = inttoptr i64 %2066 to i32*
  %4737 = load i32, i32* %4736
  %4738 = add i32 %4737, 1
  %4739 = inttoptr i64 %2066 to i32*
  store i32 %4738, i32* %4739
  %4740 = add i64 %4089, -10
  br label %block_41504f

block_413f4d:                                     ; preds = %block_413f46, %block_413f5d
  %4741 = phi i64 [ %4811, %block_413f46 ], [ %4635, %block_413f5d ]
  %4742 = phi %struct.Memory* [ %4261, %block_413f46 ], [ %4742, %block_413f5d ]
  %4743 = inttoptr i64 %2049 to i32*
  %4744 = load i32, i32* %4743
  %4745 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %4746 = sub i32 %4744, %4745
  %4747 = lshr i32 %4746, 31
  %4748 = lshr i32 %4744, 31
  %4749 = lshr i32 %4745, 31
  %4750 = xor i32 %4749, %4748
  %4751 = xor i32 %4747, %4748
  %4752 = add nuw nsw i32 %4751, %4750
  %4753 = icmp eq i32 %4752, 2
  %4754 = icmp ne i32 %4747, 0
  %4755 = xor i1 %4754, %4753
  %4756 = select i1 %4755, i64 16, i64 644
  %4757 = add i64 %4741, %4756
  br i1 %4755, label %block_413f5d, label %block_4141d1

block_417d46:                                     ; preds = %block_417b2d
  %4758 = inttoptr i64 %2425 to i32*
  %4759 = load i32, i32* %4758
  %4760 = add i32 %4759, 1
  %4761 = inttoptr i64 %2425 to i32*
  store i32 %4760, i32* %4761
  %4762 = add i64 %1278, -4182
  br label %block_416cf0

block_415238:                                     ; preds = %block_415238.preheader, %block_415242
  %4763 = phi i64 [ %4237, %block_415242 ], [ %4258, %block_415238.preheader ]
  %4764 = phi %struct.Memory* [ %4764, %block_415242 ], [ %4241, %block_415238.preheader ]
  %4765 = inttoptr i64 %2066 to i32*
  %4766 = load i32, i32* %4765
  %4767 = add i32 %4766, -5
  %4768 = lshr i32 %4767, 31
  %4769 = lshr i32 %4766, 31
  %4770 = xor i32 %4768, %4769
  %4771 = add nuw nsw i32 %4770, %4769
  %4772 = icmp eq i32 %4771, 2
  %4773 = icmp ne i32 %4768, 0
  %4774 = xor i1 %4773, %4772
  %4775 = select i1 %4774, i64 10, i64 782
  %4776 = add i64 %4763, %4775
  br i1 %4774, label %block_415242, label %block_415546

block_413c0a:                                     ; preds = %block_413c03, %block_413ee5
  %4777 = phi i64 [ %4817, %block_413c03 ], [ %2240, %block_413ee5 ]
  %4778 = phi %struct.Memory* [ %4815, %block_413c03 ], [ %4297, %block_413ee5 ]
  %4779 = inttoptr i64 %4816 to i32*
  %4780 = load i32, i32* %4779
  %4781 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %4782 = sub i32 %4780, %4781
  %4783 = lshr i32 %4782, 31
  %4784 = lshr i32 %4780, 31
  %4785 = lshr i32 %4781, 31
  %4786 = xor i32 %4785, %4784
  %4787 = xor i32 %4783, %4784
  %4788 = add nuw nsw i32 %4787, %4786
  %4789 = icmp eq i32 %4788, 2
  %4790 = icmp ne i32 %4783, 0
  %4791 = xor i1 %4790, %4789
  %4792 = select i1 %4791, i64 16, i64 750
  %4793 = add i64 %4777, %4792
  br i1 %4791, label %block_413c1a, label %block_413ef8

block_416cf0:                                     ; preds = %block_417d46, %block_416ce6
  %4794 = phi i64 [ %4287, %block_416ce6 ], [ %4762, %block_417d46 ]
  %4795 = phi %struct.Memory* [ %2274, %block_416ce6 ], [ %1266, %block_417d46 ]
  %4796 = inttoptr i64 %2425 to i32*
  %4797 = load i32, i32* %4796
  %4798 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %4799 = sub i32 %4797, %4798
  %4800 = lshr i32 %4799, 31
  %4801 = lshr i32 %4797, 31
  %4802 = lshr i32 %4798, 31
  %4803 = xor i32 %4802, %4801
  %4804 = xor i32 %4800, %4801
  %4805 = add nuw nsw i32 %4804, %4803
  %4806 = icmp eq i32 %4805, 2
  %4807 = icmp ne i32 %4800, 0
  %4808 = xor i1 %4807, %4806
  %4809 = select i1 %4808, i64 16, i64 4201
  %4810 = add i64 %4794, %4809
  br i1 %4808, label %block_416d00, label %block_417d59

block_413f46:                                     ; preds = %block_413f36
  %4811 = add i64 %4276, 7
  %4812 = inttoptr i64 %2049 to i32*
  store i32 0, i32* %4812
  br label %block_413f4d

block_413c03:                                     ; preds = %block_413bf9, %block_413be0
  %4813 = phi i64 [ %33, %block_413be0 ], [ %4285, %block_413bf9 ]
  %4814 = phi i64 [ %21, %block_413be0 ], [ %4284, %block_413bf9 ]
  %4815 = phi %struct.Memory* [ %2, %block_413be0 ], [ %4283, %block_413bf9 ]
  %4816 = add i64 %4814, -12
  %4817 = add i64 %4813, 7
  %4818 = inttoptr i64 %4816 to i32*
  store i32 0, i32* %4818
  %4819 = add i64 %4814, -8
  %4820 = add i64 %4814, -4
  %4821 = add i64 %4814, -16
  %4822 = bitcast [32 x %union.VectorReg]* %12 to double*
  %4823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %4824 = bitcast i64* %4823 to double*
  %4825 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4826 = bitcast %union.VectorReg* %13 to double*
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4828 = bitcast i64* %4827 to double*
  %4829 = add i64 %4814, -32
  %4830 = bitcast %union.VectorReg* %14 to double*
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %4832 = bitcast i64* %4831 to double*
  br label %block_413c0a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403db0_erhs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403db0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %8, align 8, !tbaa !1240
  %18 = add i64 %15, -152
  store i64 %18, i64* %7, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -20
  %26 = add i64 %1, 18
  %27 = inttoptr i64 %25 to i32*
  store i32 0, i32* %27
  %28 = add i64 %15, -16
  %29 = add i64 %15, -12
  %30 = add i64 %15, -24
  %31 = bitcast [32 x %union.VectorReg]* %10 to i8*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast [32 x %union.VectorReg]* %10 to i32*
  %34 = getelementptr inbounds i8, i8* %31, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = bitcast i64* %32 to i32*
  %37 = getelementptr inbounds i8, i8* %31, i64 12
  %38 = bitcast i8* %37 to i32*
  %39 = bitcast [32 x %union.VectorReg]* %10 to double*
  br label %block_403dc2

block_4073f4:                                     ; preds = %block_4073ed, %block_4074e5
  %40 = phi %struct.Memory* [ %3831, %block_4073ed ], [ %4851, %block_4074e5 ]
  %41 = inttoptr i64 %4933 to i32*
  %42 = load i32, i32* %41
  %43 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %44 = add i32 %43, -1
  %45 = sub i32 %42, %44
  %46 = lshr i32 %45, 31
  %47 = lshr i32 %42, 31
  %48 = lshr i32 %44, 31
  %49 = xor i32 %48, %47
  %50 = xor i32 %46, %47
  %51 = add nuw nsw i32 %50, %49
  %52 = icmp eq i32 %51, 2
  %53 = icmp ne i32 %46, 0
  %54 = xor i1 %53, %52
  br i1 %54, label %block_407409, label %block_4074f8

block_403de9:                                     ; preds = %block_403dd9
  %55 = add i64 %162, 7
  %56 = inttoptr i64 %29 to i32*
  store i32 0, i32* %56
  br label %block_403df0

block_406afb:                                     ; preds = %block_406af1
  %57 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %57, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %58 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %59 = inttoptr i64 %1411 to i32*
  %60 = load i32, i32* %59
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %61, 6760
  %63 = add i64 %62, ptrtoint (%frct_type* @frct to i64)
  %64 = inttoptr i64 %1415 to i32*
  %65 = load i32, i32* %64
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %66, 520
  %68 = add i64 %67, %63
  %69 = inttoptr i64 %1414 to i32*
  %70 = load i32, i32* %69
  %71 = sext i32 %70 to i64
  %72 = mul nsw i64 %71, 40
  %73 = add i64 %72, %68
  %74 = sext i32 %1886 to i64
  %75 = shl nsw i64 %74, 3
  %76 = add i64 %75, %73
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  store double %78, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %79 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %79, double* %4921, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4923, align 1, !tbaa !1264
  %80 = add i64 %62, ptrtoint (%rsd_type* @rsd to i64)
  %81 = add i32 %65, -2
  %82 = sext i32 %81 to i64
  %83 = mul nsw i64 %82, 520
  %84 = add i64 %83, %80
  %85 = add i64 %72, %84
  %86 = add i64 %75, %85
  %87 = inttoptr i64 %86 to double*
  %88 = load double, double* %87
  %89 = add i32 %65, -1
  %90 = sext i32 %89 to i64
  %91 = mul nsw i64 %90, 520
  %92 = add i64 %91, %80
  %93 = add i64 %72, %92
  %94 = bitcast double %57 to <2 x i32>
  %95 = extractelement <2 x i32> %94, i32 0
  store i32 %95, i32* %1453, align 1, !tbaa !1292
  %96 = extractelement <2 x i32> %94, i32 1
  store i32 %96, i32* %1455, align 1, !tbaa !1292
  store i32 0, i32* %1457, align 1, !tbaa !1292
  store i32 0, i32* %1459, align 1, !tbaa !1292
  %97 = add i64 %75, %93
  %98 = load double, double* %1460, align 1
  %99 = inttoptr i64 %97 to double*
  %100 = load double, double* %99
  %101 = fmul double %98, %100
  store double %101, double* %1460, align 1, !tbaa !1264
  %102 = fsub double %88, %101
  %103 = add i64 %67, %80
  %104 = add i64 %72, %103
  %105 = add i64 %75, %104
  %106 = inttoptr i64 %105 to double*
  %107 = load double, double* %106
  %108 = fmul double %58, %107
  store double %108, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %109 = fadd double %102, %108
  %110 = add i64 %62, ptrtoint (%rsd_type* @rsd to i64)
  %111 = add i32 %65, 1
  %112 = sext i32 %111 to i64
  %113 = mul nsw i64 %112, 520
  %114 = add i64 %113, %110
  %115 = add i64 %72, %114
  store i64 %115, i64* %6, align 8, !tbaa !1240
  %116 = add i64 %75, %115
  %117 = load double, double* %39, align 1
  %118 = inttoptr i64 %116 to double*
  %119 = load double, double* %118
  %120 = fmul double %117, %119
  store double %120, double* %39, align 1, !tbaa !1264
  %121 = fsub double %109, %120
  %122 = add i32 %65, 2
  %123 = zext i32 %122 to i64
  store i64 %123, i64* %4903, align 8, !tbaa !1240
  %124 = sext i32 %122 to i64
  %125 = mul nsw i64 %124, 520
  %126 = add i64 %125, %110
  %127 = add i64 %72, %126
  store i64 %74, i64* %4902, align 8, !tbaa !1240
  %128 = add i64 %75, %127
  %129 = inttoptr i64 %128 to double*
  %130 = load double, double* %129
  %131 = fadd double %121, %130
  store double %131, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %132 = load double, double* %4921, align 1
  %133 = fmul double %132, %131
  store double %133, double* %4921, align 1, !tbaa !1264
  %134 = load double, double* %4918, align 1
  %135 = fsub double %134, %133
  store double %135, double* %4918, align 1, !tbaa !1264
  %136 = add i64 %62, ptrtoint (%frct_type* @frct to i64)
  %137 = add i64 %67, %136
  %138 = add i64 %72, %137
  %139 = add i64 %75, %138
  %140 = inttoptr i64 %139 to double*
  store double %135, double* %140
  %141 = inttoptr i64 %1418 to i32*
  %142 = load i32, i32* %141
  %143 = add i32 %142, 1
  %144 = inttoptr i64 %1418 to i32*
  store i32 %143, i32* %144
  %145 = add i64 %1896, -10
  br label %block_406af1

block_403dd9:                                     ; preds = %block_403e6f, %block_403dd2
  %146 = phi i64 [ %163, %block_403dd2 ], [ %3830, %block_403e6f ]
  %147 = phi %struct.Memory* [ %166, %block_403dd2 ], [ %3356, %block_403e6f ]
  %148 = inttoptr i64 %28 to i32*
  %149 = load i32, i32* %148
  %150 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %151 = sub i32 %149, %150
  %152 = lshr i32 %151, 31
  %153 = lshr i32 %149, 31
  %154 = lshr i32 %150, 31
  %155 = xor i32 %154, %153
  %156 = xor i32 %152, %153
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = icmp ne i32 %152, 0
  %160 = xor i1 %159, %158
  %161 = select i1 %160, i64 16, i64 169
  %162 = add i64 %146, %161
  br i1 %160, label %block_403de9, label %block_403e82

block_403dd2:                                     ; preds = %block_403dc2
  %163 = add i64 %182, 7
  %164 = inttoptr i64 %28 to i32*
  store i32 0, i32* %164
  br label %block_403dd9

block_403dc2:                                     ; preds = %block_403e82, %block_403db0
  %165 = phi i64 [ %26, %block_403db0 ], [ %3207, %block_403e82 ]
  %166 = phi %struct.Memory* [ %2, %block_403db0 ], [ %147, %block_403e82 ]
  %167 = inttoptr i64 %25 to i32*
  %168 = load i32, i32* %167
  %169 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %170 = sub i32 %168, %169
  %171 = lshr i32 %170, 31
  %172 = trunc i32 %171 to i8
  %173 = lshr i32 %168, 31
  %174 = lshr i32 %169, 31
  %175 = xor i32 %174, %173
  %176 = xor i32 %171, %173
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = icmp ne i8 %172, 0
  %180 = xor i1 %179, %178
  %181 = select i1 %180, i64 16, i64 211
  %182 = add i64 %165, %181
  br i1 %180, label %block_403dd2, label %block_403e95

block_4061a7:                                     ; preds = %block_406197
  %183 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %183, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  store i64 ptrtoint (%flux_type* @flux to i64), i64* %4902, align 8, !tbaa !1240
  %184 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %184, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %185 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %185, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %186 = inttoptr i64 %1411 to i32*
  %187 = load i32, i32* %186
  %188 = sext i32 %187 to i64
  %189 = mul nsw i64 %188, 6760
  %190 = add i64 %189, ptrtoint (%frct_type* @frct to i64)
  %191 = sext i32 %654 to i64
  %192 = mul nsw i64 %191, 520
  %193 = add i64 %192, %190
  %194 = inttoptr i64 %1414 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  %197 = mul nsw i64 %196, 40
  %198 = add i64 %197, %193
  %199 = inttoptr i64 %198 to double*
  %200 = load double, double* %199
  %201 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %202 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %203 = fmul double %201, %202
  %204 = add i64 %189, ptrtoint (%rsd_type* @rsd to i64)
  %205 = add i32 %654, -1
  %206 = sext i32 %205 to i64
  %207 = mul nsw i64 %206, 520
  %208 = add i64 %207, %204
  %209 = add i64 %197, %208
  %210 = inttoptr i64 %209 to double*
  %211 = load double, double* %210
  %212 = add i64 %192, %204
  %213 = add i64 %197, %212
  %214 = bitcast double %183 to <2 x i32>
  %215 = extractelement <2 x i32> %214, i32 0
  store i32 %215, i32* %1471, align 1, !tbaa !1292
  %216 = extractelement <2 x i32> %214, i32 1
  store i32 %216, i32* %1473, align 1, !tbaa !1292
  %217 = load double, double* %1478, align 1
  %218 = inttoptr i64 %213 to double*
  %219 = load double, double* %218
  %220 = fmul double %217, %219
  %221 = fsub double %211, %220
  %222 = add i32 %654, 1
  %223 = sext i32 %222 to i64
  %224 = mul nsw i64 %223, 520
  %225 = add i64 %224, %204
  %226 = add i64 %197, %225
  %227 = inttoptr i64 %226 to double*
  %228 = load double, double* %227
  %229 = fadd double %221, %228
  %230 = fmul double %203, %229
  %231 = fadd double %200, %230
  %232 = add i64 %189, ptrtoint (%frct_type* @frct to i64)
  %233 = add i64 %192, %232
  %234 = add i64 %197, %233
  %235 = inttoptr i64 %234 to double*
  store double %231, double* %235
  %236 = inttoptr i64 %1411 to i32*
  %237 = load i32, i32* %236
  %238 = sext i32 %237 to i64
  %239 = mul nsw i64 %238, 6760
  %240 = add i64 %239, ptrtoint (%frct_type* @frct to i64)
  %241 = inttoptr i64 %1415 to i32*
  %242 = load i32, i32* %241
  %243 = sext i32 %242 to i64
  %244 = mul nsw i64 %243, 520
  %245 = add i64 %244, %240
  %246 = inttoptr i64 %1414 to i32*
  %247 = load i32, i32* %246
  %248 = sext i32 %247 to i64
  %249 = mul nsw i64 %248, 40
  %250 = add i64 %249, %245
  %251 = add i64 %250, 8
  %252 = inttoptr i64 %251 to double*
  %253 = load double, double* %252
  %254 = load <2 x i32>, <2 x i32>* %1479, align 1
  %255 = extractelement <2 x i32> %254, i32 0
  store i32 %255, i32* %1445, align 1, !tbaa !1292
  %256 = extractelement <2 x i32> %254, i32 1
  store i32 %256, i32* %1447, align 1, !tbaa !1292
  %257 = load double, double* %4924, align 1
  %258 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %259 = fmul double %257, %258
  %260 = load double, double* %4911, align 1
  %261 = fmul double %259, %260
  %262 = add i32 %242, 1
  %263 = sext i32 %262 to i64
  %264 = mul nsw i64 %263, 40
  %265 = load i64, i64* %4902, align 8
  %266 = add i64 %264, %265
  %267 = add i64 %266, 8
  %268 = inttoptr i64 %267 to double*
  %269 = load double, double* %268
  %270 = mul nsw i64 %243, 40
  %271 = add i64 %270, %265
  %272 = add i64 %271, 8
  %273 = inttoptr i64 %272 to double*
  %274 = load double, double* %273
  %275 = fsub double %269, %274
  %276 = fmul double %261, %275
  %277 = fadd double %253, %276
  %278 = load double, double* bitcast (%dy2_type* @dy2 to double*)
  %279 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %280 = fmul double %278, %279
  %281 = add i64 %239, ptrtoint (%rsd_type* @rsd to i64)
  %282 = add i32 %242, -1
  %283 = sext i32 %282 to i64
  %284 = mul nsw i64 %283, 520
  %285 = add i64 %284, %281
  %286 = add i64 %249, %285
  %287 = add i64 %286, 8
  %288 = inttoptr i64 %287 to double*
  %289 = load double, double* %288
  %290 = add i64 %244, %281
  %291 = add i64 %249, %290
  %292 = load <2 x i32>, <2 x i32>* %1443, align 1
  %293 = extractelement <2 x i32> %292, i32 0
  store i32 %293, i32* %1471, align 1, !tbaa !1292
  %294 = extractelement <2 x i32> %292, i32 1
  store i32 %294, i32* %1473, align 1, !tbaa !1292
  %295 = add i64 %291, 8
  %296 = load double, double* %1478, align 1
  %297 = inttoptr i64 %295 to double*
  %298 = load double, double* %297
  %299 = fmul double %296, %298
  %300 = fsub double %289, %299
  %301 = mul nsw i64 %263, 520
  %302 = add i64 %301, %281
  %303 = add i64 %249, %302
  %304 = add i64 %303, 8
  %305 = inttoptr i64 %304 to double*
  %306 = load double, double* %305
  %307 = fadd double %300, %306
  %308 = fmul double %280, %307
  %309 = fadd double %277, %308
  %310 = add i64 %239, ptrtoint (%frct_type* @frct to i64)
  %311 = add i64 %244, %310
  %312 = add i64 %249, %311
  %313 = add i64 %312, 8
  %314 = inttoptr i64 %313 to double*
  store double %309, double* %314
  %315 = inttoptr i64 %1411 to i32*
  %316 = load i32, i32* %315
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %317, 6760
  %319 = add i64 %318, ptrtoint (%frct_type* @frct to i64)
  %320 = inttoptr i64 %1415 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %322, 520
  %324 = add i64 %323, %319
  %325 = inttoptr i64 %1414 to i32*
  %326 = load i32, i32* %325
  %327 = sext i32 %326 to i64
  %328 = mul nsw i64 %327, 40
  %329 = add i64 %328, %324
  %330 = add i64 %329, 16
  %331 = inttoptr i64 %330 to double*
  %332 = load double, double* %331
  %333 = load <2 x i32>, <2 x i32>* %1479, align 1
  %334 = extractelement <2 x i32> %333, i32 0
  store i32 %334, i32* %1445, align 1, !tbaa !1292
  %335 = extractelement <2 x i32> %333, i32 1
  store i32 %335, i32* %1447, align 1, !tbaa !1292
  %336 = load double, double* %4924, align 1
  %337 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %338 = fmul double %336, %337
  %339 = load double, double* %4911, align 1
  %340 = fmul double %338, %339
  %341 = add i32 %321, 1
  %342 = sext i32 %341 to i64
  %343 = mul nsw i64 %342, 40
  %344 = load i64, i64* %4902, align 8
  %345 = add i64 %343, %344
  %346 = add i64 %345, 16
  %347 = inttoptr i64 %346 to double*
  %348 = load double, double* %347
  %349 = mul nsw i64 %322, 40
  %350 = add i64 %349, %344
  %351 = add i64 %350, 16
  %352 = inttoptr i64 %351 to double*
  %353 = load double, double* %352
  %354 = fsub double %348, %353
  %355 = fmul double %340, %354
  %356 = fadd double %332, %355
  %357 = load double, double* bitcast (%dy3_type* @dy3 to double*)
  %358 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %359 = fmul double %357, %358
  %360 = add i64 %318, ptrtoint (%rsd_type* @rsd to i64)
  %361 = add i32 %321, -1
  %362 = sext i32 %361 to i64
  %363 = mul nsw i64 %362, 520
  %364 = add i64 %363, %360
  %365 = add i64 %328, %364
  %366 = add i64 %365, 16
  %367 = inttoptr i64 %366 to double*
  %368 = load double, double* %367
  %369 = add i64 %323, %360
  %370 = add i64 %328, %369
  %371 = load <2 x i32>, <2 x i32>* %1443, align 1
  %372 = extractelement <2 x i32> %371, i32 0
  store i32 %372, i32* %1471, align 1, !tbaa !1292
  %373 = extractelement <2 x i32> %371, i32 1
  store i32 %373, i32* %1473, align 1, !tbaa !1292
  %374 = add i64 %370, 16
  %375 = load double, double* %1478, align 1
  %376 = inttoptr i64 %374 to double*
  %377 = load double, double* %376
  %378 = fmul double %375, %377
  %379 = fsub double %368, %378
  %380 = mul nsw i64 %342, 520
  %381 = add i64 %380, %360
  %382 = add i64 %328, %381
  %383 = add i64 %382, 16
  %384 = inttoptr i64 %383 to double*
  %385 = load double, double* %384
  %386 = fadd double %379, %385
  %387 = fmul double %359, %386
  %388 = fadd double %356, %387
  %389 = add i64 %318, ptrtoint (%frct_type* @frct to i64)
  %390 = add i64 %323, %389
  %391 = add i64 %328, %390
  %392 = add i64 %391, 16
  %393 = inttoptr i64 %392 to double*
  store double %388, double* %393
  %394 = inttoptr i64 %1411 to i32*
  %395 = load i32, i32* %394
  %396 = sext i32 %395 to i64
  %397 = mul nsw i64 %396, 6760
  %398 = add i64 %397, ptrtoint (%frct_type* @frct to i64)
  %399 = inttoptr i64 %1415 to i32*
  %400 = load i32, i32* %399
  %401 = sext i32 %400 to i64
  %402 = mul nsw i64 %401, 520
  %403 = add i64 %402, %398
  %404 = inttoptr i64 %1414 to i32*
  %405 = load i32, i32* %404
  %406 = sext i32 %405 to i64
  %407 = mul nsw i64 %406, 40
  %408 = add i64 %407, %403
  %409 = add i64 %408, 24
  %410 = inttoptr i64 %409 to double*
  %411 = load double, double* %410
  %412 = load <2 x i32>, <2 x i32>* %1479, align 1
  %413 = extractelement <2 x i32> %412, i32 0
  store i32 %413, i32* %1445, align 1, !tbaa !1292
  %414 = extractelement <2 x i32> %412, i32 1
  store i32 %414, i32* %1447, align 1, !tbaa !1292
  %415 = load double, double* %4924, align 1
  %416 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %417 = fmul double %415, %416
  %418 = load double, double* %4911, align 1
  %419 = fmul double %417, %418
  %420 = add i32 %400, 1
  %421 = sext i32 %420 to i64
  %422 = mul nsw i64 %421, 40
  %423 = load i64, i64* %4902, align 8
  %424 = add i64 %422, %423
  %425 = add i64 %424, 24
  %426 = inttoptr i64 %425 to double*
  %427 = load double, double* %426
  %428 = mul nsw i64 %401, 40
  %429 = add i64 %428, %423
  %430 = add i64 %429, 24
  %431 = inttoptr i64 %430 to double*
  %432 = load double, double* %431
  %433 = fsub double %427, %432
  %434 = fmul double %419, %433
  %435 = fadd double %411, %434
  %436 = load double, double* bitcast (%dy4_type* @dy4 to double*)
  %437 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %438 = fmul double %436, %437
  %439 = add i64 %397, ptrtoint (%rsd_type* @rsd to i64)
  %440 = add i32 %400, -1
  %441 = sext i32 %440 to i64
  %442 = mul nsw i64 %441, 520
  %443 = add i64 %442, %439
  %444 = add i64 %407, %443
  %445 = add i64 %444, 24
  %446 = inttoptr i64 %445 to double*
  %447 = load double, double* %446
  %448 = add i64 %402, %439
  %449 = add i64 %407, %448
  %450 = load <2 x i32>, <2 x i32>* %1443, align 1
  %451 = load <2 x i32>, <2 x i32>* %1444, align 1
  %452 = extractelement <2 x i32> %450, i32 0
  store i32 %452, i32* %1471, align 1, !tbaa !1292
  %453 = extractelement <2 x i32> %450, i32 1
  store i32 %453, i32* %1473, align 1, !tbaa !1292
  %454 = extractelement <2 x i32> %451, i32 0
  store i32 %454, i32* %1475, align 1, !tbaa !1292
  %455 = extractelement <2 x i32> %451, i32 1
  store i32 %455, i32* %1477, align 1, !tbaa !1292
  %456 = add i64 %449, 24
  %457 = load double, double* %1478, align 1
  %458 = inttoptr i64 %456 to double*
  %459 = load double, double* %458
  %460 = fmul double %457, %459
  store double %460, double* %1478, align 1, !tbaa !1264
  %461 = fsub double %447, %460
  %462 = mul nsw i64 %421, 520
  %463 = add i64 %462, %439
  %464 = add i64 %407, %463
  %465 = add i64 %464, 24
  %466 = inttoptr i64 %465 to double*
  %467 = load double, double* %466
  %468 = fadd double %461, %467
  store double %468, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %469 = fmul double %438, %468
  store double %469, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %470 = fadd double %435, %469
  %471 = add i64 %397, ptrtoint (%frct_type* @frct to i64)
  %472 = add i64 %402, %471
  %473 = add i64 %407, %472
  %474 = add i64 %473, 24
  %475 = inttoptr i64 %474 to double*
  store double %470, double* %475
  %476 = inttoptr i64 %1411 to i32*
  %477 = load i32, i32* %476
  %478 = sext i32 %477 to i64
  %479 = mul nsw i64 %478, 6760
  %480 = add i64 %479, ptrtoint (%frct_type* @frct to i64)
  %481 = inttoptr i64 %1415 to i32*
  %482 = load i32, i32* %481
  %483 = sext i32 %482 to i64
  %484 = mul nsw i64 %483, 520
  %485 = add i64 %484, %480
  %486 = inttoptr i64 %1414 to i32*
  %487 = load i32, i32* %486
  %488 = sext i32 %487 to i64
  %489 = mul nsw i64 %488, 40
  %490 = add i64 %489, %485
  %491 = add i64 %490, 32
  %492 = inttoptr i64 %491 to double*
  %493 = load double, double* %492
  %494 = load double, double* %4918, align 1
  %495 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %496 = fmul double %494, %495
  %497 = load double, double* %4911, align 1
  %498 = fmul double %496, %497
  %499 = add i32 %482, 1
  %500 = zext i32 %499 to i64
  %501 = sext i32 %499 to i64
  %502 = mul nsw i64 %501, 40
  %503 = load i64, i64* %4902, align 8
  %504 = add i64 %502, %503
  store i64 %504, i64* %4903, align 8, !tbaa !1240
  %505 = add i64 %504, 32
  %506 = inttoptr i64 %505 to double*
  %507 = load double, double* %506
  %508 = mul nsw i64 %483, 40
  %509 = add i64 %508, %503
  %510 = add i64 %509, 32
  %511 = inttoptr i64 %510 to double*
  %512 = load double, double* %511
  %513 = fsub double %507, %512
  %514 = fmul double %498, %513
  %515 = fadd double %493, %514
  %516 = load double, double* bitcast (%dy5_type* @dy5 to double*)
  %517 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %518 = fmul double %516, %517
  %519 = add i64 %479, ptrtoint (%rsd_type* @rsd to i64)
  %520 = add i32 %482, -1
  %521 = sext i32 %520 to i64
  %522 = mul nsw i64 %521, 520
  %523 = add i64 %522, %519
  %524 = add i64 %489, %523
  %525 = add i64 %524, 32
  %526 = inttoptr i64 %525 to double*
  %527 = load double, double* %526
  %528 = add i64 %484, %519
  %529 = add i64 %489, %528
  store i64 %529, i64* %6, align 8, !tbaa !1240
  %530 = add i64 %529, 32
  %531 = load double, double* %39, align 1
  %532 = inttoptr i64 %530 to double*
  %533 = load double, double* %532
  %534 = fmul double %531, %533
  store double %534, double* %39, align 1, !tbaa !1264
  %535 = fsub double %527, %534
  store i64 %500, i64* %4904, align 8, !tbaa !1240
  %536 = mul nsw i64 %501, 520
  %537 = add i64 %536, %519
  store i64 %489, i64* %4902, align 8, !tbaa !1240
  %538 = add i64 %489, %537
  %539 = add i64 %538, 32
  %540 = inttoptr i64 %539 to double*
  %541 = load double, double* %540
  %542 = fadd double %535, %541
  store double %542, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %543 = fmul double %518, %542
  store double %543, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %544 = fadd double %515, %543
  store double %544, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %545 = add i64 %479, ptrtoint (%frct_type* @frct to i64)
  %546 = add i64 %484, %545
  %547 = add i64 %489, %546
  %548 = add i64 %547, 32
  %549 = inttoptr i64 %548 to double*
  store double %544, double* %549
  %550 = inttoptr i64 %1415 to i32*
  %551 = load i32, i32* %550
  %552 = add i32 %551, 1
  %553 = inttoptr i64 %1415 to i32*
  store i32 %552, i32* %553
  %554 = add i64 %667, -16
  br label %block_406197

block_403f45:                                     ; preds = %block_403f3b
  store i64 ptrtoint (%ce_type* @ce to i64), i64* %5, align 8, !tbaa !1240
  %555 = sext i32 %4815 to i64
  %556 = mul nsw i64 %555, 104
  %557 = add i64 %556, ptrtoint (%ce_type* @ce to i64)
  %558 = inttoptr i64 %557 to double*
  %559 = load double, double* %558
  %560 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 8)
  %561 = inttoptr i64 %560 to double*
  %562 = load double, double* %561
  %563 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 32)
  %564 = inttoptr i64 %563 to double*
  %565 = load double, double* %564
  %566 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 56)
  %567 = inttoptr i64 %566 to double*
  %568 = load double, double* %567
  %569 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 80)
  %570 = inttoptr i64 %569 to double*
  %571 = load double, double* %570
  %572 = inttoptr i64 %4914 to double*
  %573 = load double, double* %572
  %574 = fmul double %571, %573
  %575 = fadd double %568, %574
  %576 = fmul double %575, %573
  %577 = fadd double %565, %576
  %578 = fmul double %577, %573
  %579 = fadd double %562, %578
  %580 = fmul double %579, %573
  %581 = fadd double %559, %580
  %582 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 16)
  %583 = inttoptr i64 %582 to double*
  %584 = load double, double* %583
  %585 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 40)
  %586 = inttoptr i64 %585 to double*
  %587 = load double, double* %586
  %588 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 64)
  %589 = inttoptr i64 %588 to double*
  %590 = load double, double* %589
  %591 = add i64 %556, add (i64 ptrtoint (%ce_type* @ce to i64), i64 88)
  %592 = inttoptr i64 %591 to double*
  %593 = load double, double* %592
  %594 = inttoptr i64 %4913 to double*
  %595 = load double, double* %594
  %596 = fmul double %593, %595
  %597 = fadd double %596, %590
  %598 = fmul double %597, %595
  %599 = fadd double %587, %598
  %600 = fmul double %599, %595
  %601 = fadd double %584, %600
  %602 = fmul double %601, %595
  %603 = fadd double %581, %602
  %604 = load i64, i64* %5, align 8
  %605 = add i64 %556, %604
  %606 = add i64 %605, 24
  %607 = inttoptr i64 %606 to double*
  %608 = load double, double* %607
  %609 = add i64 %605, 48
  %610 = inttoptr i64 %609 to double*
  %611 = load double, double* %610
  store i64 %605, i64* %6, align 8, !tbaa !1240
  %612 = add i64 %605, 72
  %613 = inttoptr i64 %612 to double*
  %614 = load double, double* %613
  store i64 %556, i64* %4902, align 8, !tbaa !1240
  %615 = add i64 %605, 96
  %616 = inttoptr i64 %615 to double*
  %617 = load double, double* %616
  %618 = inttoptr i64 %4912 to double*
  %619 = load double, double* %618
  %620 = fmul double %617, %619
  store double %620, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %621 = fadd double %620, %614
  %622 = fmul double %621, %619
  store double %622, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %623 = fadd double %611, %622
  %624 = fmul double %623, %619
  store double %624, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %625 = fadd double %608, %624
  %626 = fmul double %625, %619
  store double %626, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %627 = fadd double %603, %626
  store double %627, double* %39, align 1, !tbaa !1264
  store i64 0, i64* %32, align 1, !tbaa !1264
  %628 = inttoptr i64 %25 to i32*
  %629 = load i32, i32* %628
  %630 = sext i32 %629 to i64
  %631 = mul nsw i64 %630, 6760
  %632 = add i64 %631, ptrtoint (%rsd_type* @rsd to i64)
  %633 = inttoptr i64 %28 to i32*
  %634 = load i32, i32* %633
  %635 = sext i32 %634 to i64
  %636 = mul nsw i64 %635, 520
  %637 = add i64 %636, %632
  %638 = inttoptr i64 %29 to i32*
  %639 = load i32, i32* %638
  %640 = sext i32 %639 to i64
  %641 = mul nsw i64 %640, 40
  %642 = add i64 %641, %637
  %643 = shl nsw i64 %555, 3
  %644 = add i64 %643, %642
  %645 = inttoptr i64 %644 to double*
  store double %627, double* %645
  %646 = inttoptr i64 %30 to i32*
  %647 = load i32, i32* %646
  %648 = add i32 %647, 1
  %649 = inttoptr i64 %30 to i32*
  store i32 %648, i32* %649
  %650 = add i64 %4825, -10
  br label %block_403f3b

block_406197:                                     ; preds = %block_40618d, %block_4061a7
  %651 = phi i64 [ %700, %block_40618d ], [ %554, %block_4061a7 ]
  %652 = phi %struct.Memory* [ %4226, %block_40618d ], [ %652, %block_4061a7 ]
  %653 = inttoptr i64 %1415 to i32*
  %654 = load i32, i32* %653
  %655 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %656 = sub i32 %654, %655
  %657 = lshr i32 %656, 31
  %658 = lshr i32 %654, 31
  %659 = lshr i32 %655, 31
  %660 = xor i32 %659, %658
  %661 = xor i32 %657, %658
  %662 = add nuw nsw i32 %661, %660
  %663 = icmp eq i32 %662, 2
  %664 = icmp ne i32 %657, 0
  %665 = xor i1 %664, %663
  %666 = select i1 %665, i64 16, i64 1750
  %667 = add i64 %651, %666
  br i1 %665, label %block_4061a7, label %block_40686d

block_408796:                                     ; preds = %block_407018
  %668 = zext i32 %4799 to i64
  store i64 %668, i64* %4, align 8
  %669 = load i64, i64* %7, align 8
  %670 = add i64 %669, 144
  %671 = icmp ugt i64 %669, -145
  %672 = zext i1 %671 to i8
  store i8 %672, i8* %19, align 1, !tbaa !1245
  %673 = trunc i64 %670 to i32
  %674 = and i32 %673, 255
  %675 = tail call i32 @llvm.ctpop.i32(i32 %674) #11
  %676 = trunc i32 %675 to i8
  %677 = and i8 %676, 1
  %678 = xor i8 %677, 1
  store i8 %678, i8* %20, align 1, !tbaa !1259
  %679 = xor i64 %669, 16
  %680 = xor i64 %679, %670
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  store i8 %683, i8* %21, align 1, !tbaa !1263
  %684 = icmp eq i64 %670, 0
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %22, align 1, !tbaa !1260
  %686 = lshr i64 %670, 63
  %687 = trunc i64 %686 to i8
  store i8 %687, i8* %23, align 1, !tbaa !1261
  %688 = lshr i64 %669, 63
  %689 = xor i64 %686, %688
  %690 = add nuw nsw i64 %689, %686
  %691 = icmp eq i64 %690, 2
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %24, align 1, !tbaa !1262
  %693 = add i64 %669, 152
  %694 = inttoptr i64 %670 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %8, align 8, !tbaa !1240
  %696 = inttoptr i64 %693 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %3, align 8, !tbaa !1240
  %698 = add i64 %669, 160
  store i64 %698, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %4797

block_40618d:                                     ; preds = %block_405d7b
  %699 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %700 = add i64 %4241, 10
  %701 = inttoptr i64 %1415 to i32*
  store i32 %699, i32* %701
  br label %block_406197

block_405d8b:                                     ; preds = %block_405d7b
  %702 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1256) to double*)
  store double %702, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %703 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1264) to double*)
  store double %703, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %704 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1272) to double*)
  store double %704, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %705 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  store double %705, double* %4921, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4923, align 1, !tbaa !1264
  %706 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %706, double* %4924, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4926, align 1, !tbaa !1264
  %707 = inttoptr i64 %1411 to i32*
  %708 = load i32, i32* %707
  %709 = sext i32 %708 to i64
  %710 = mul nsw i64 %709, 6760
  %711 = add i64 %710, ptrtoint (%rsd_type* @rsd to i64)
  %712 = sext i32 %4228 to i64
  %713 = mul nsw i64 %712, 520
  %714 = add i64 %713, %711
  %715 = inttoptr i64 %1414 to i32*
  %716 = load i32, i32* %715
  %717 = sext i32 %716 to i64
  %718 = mul nsw i64 %717, 40
  %719 = add i64 %718, %714
  %720 = bitcast double %706 to <2 x i32>
  %721 = extractelement <2 x i32> %720, i32 0
  store i32 %721, i32* %1453, align 1, !tbaa !1292
  %722 = extractelement <2 x i32> %720, i32 1
  store i32 %722, i32* %1455, align 1, !tbaa !1292
  %723 = load double, double* %1460, align 1
  %724 = inttoptr i64 %719 to double*
  %725 = load double, double* %724
  %726 = fdiv double %723, %725
  %727 = inttoptr i64 %1419 to double*
  store double %726, double* %727
  %728 = inttoptr i64 %1419 to double*
  %729 = load double, double* %728
  %730 = inttoptr i64 %1411 to i32*
  %731 = load i32, i32* %730
  %732 = sext i32 %731 to i64
  %733 = mul nsw i64 %732, 6760
  %734 = add i64 %733, ptrtoint (%rsd_type* @rsd to i64)
  %735 = inttoptr i64 %1415 to i32*
  %736 = load i32, i32* %735
  %737 = sext i32 %736 to i64
  %738 = mul nsw i64 %737, 520
  %739 = add i64 %738, %734
  %740 = inttoptr i64 %1414 to i32*
  %741 = load i32, i32* %740
  %742 = sext i32 %741 to i64
  %743 = mul nsw i64 %742, 40
  %744 = add i64 %743, %739
  %745 = add i64 %744, 8
  %746 = inttoptr i64 %745 to double*
  %747 = load double, double* %746
  %748 = fmul double %729, %747
  %749 = inttoptr i64 %1420 to double*
  store double %748, double* %749
  %750 = inttoptr i64 %1419 to double*
  %751 = load double, double* %750
  %752 = inttoptr i64 %1411 to i32*
  %753 = load i32, i32* %752
  %754 = sext i32 %753 to i64
  %755 = mul nsw i64 %754, 6760
  %756 = add i64 %755, ptrtoint (%rsd_type* @rsd to i64)
  %757 = inttoptr i64 %1415 to i32*
  %758 = load i32, i32* %757
  %759 = sext i32 %758 to i64
  %760 = mul nsw i64 %759, 520
  %761 = add i64 %760, %756
  %762 = inttoptr i64 %1414 to i32*
  %763 = load i32, i32* %762
  %764 = sext i32 %763 to i64
  %765 = mul nsw i64 %764, 40
  %766 = add i64 %765, %761
  %767 = add i64 %766, 16
  %768 = inttoptr i64 %767 to double*
  %769 = load double, double* %768
  %770 = fmul double %751, %769
  %771 = inttoptr i64 %1421 to double*
  store double %770, double* %771
  %772 = inttoptr i64 %1419 to double*
  %773 = load double, double* %772
  %774 = inttoptr i64 %1411 to i32*
  %775 = load i32, i32* %774
  %776 = sext i32 %775 to i64
  %777 = mul nsw i64 %776, 6760
  %778 = add i64 %777, ptrtoint (%rsd_type* @rsd to i64)
  %779 = inttoptr i64 %1415 to i32*
  %780 = load i32, i32* %779
  %781 = sext i32 %780 to i64
  %782 = mul nsw i64 %781, 520
  %783 = add i64 %782, %778
  %784 = inttoptr i64 %1414 to i32*
  %785 = load i32, i32* %784
  %786 = sext i32 %785 to i64
  %787 = mul nsw i64 %786, 40
  %788 = add i64 %787, %783
  %789 = add i64 %788, 24
  %790 = inttoptr i64 %789 to double*
  %791 = load double, double* %790
  %792 = fmul double %773, %791
  %793 = inttoptr i64 %1422 to double*
  store double %792, double* %793
  %794 = inttoptr i64 %1419 to double*
  %795 = load double, double* %794
  %796 = inttoptr i64 %1411 to i32*
  %797 = load i32, i32* %796
  %798 = sext i32 %797 to i64
  %799 = mul nsw i64 %798, 6760
  %800 = add i64 %799, ptrtoint (%rsd_type* @rsd to i64)
  %801 = inttoptr i64 %1415 to i32*
  %802 = load i32, i32* %801
  %803 = sext i32 %802 to i64
  %804 = mul nsw i64 %803, 520
  %805 = add i64 %804, %800
  %806 = inttoptr i64 %1414 to i32*
  %807 = load i32, i32* %806
  %808 = sext i32 %807 to i64
  %809 = mul nsw i64 %808, 40
  %810 = add i64 %809, %805
  %811 = add i64 %810, 32
  %812 = inttoptr i64 %811 to double*
  %813 = load double, double* %812
  %814 = fmul double %795, %813
  store double %814, double* %1460, align 1, !tbaa !1264
  %815 = inttoptr i64 %1423 to double*
  store double %814, double* %815
  %816 = inttoptr i64 %1411 to i32*
  %817 = load i32, i32* %816
  %818 = sext i32 %817 to i64
  %819 = mul nsw i64 %818, 6760
  %820 = add i64 %819, ptrtoint (%rsd_type* @rsd to i64)
  %821 = inttoptr i64 %1415 to i32*
  %822 = load i32, i32* %821
  %823 = add i32 %822, -1
  %824 = sext i32 %823 to i64
  %825 = mul nsw i64 %824, 520
  %826 = add i64 %825, %820
  %827 = inttoptr i64 %1414 to i32*
  %828 = load i32, i32* %827
  %829 = sext i32 %828 to i64
  %830 = mul nsw i64 %829, 40
  %831 = add i64 %830, %826
  %832 = load double, double* %4924, align 1
  %833 = inttoptr i64 %831 to double*
  %834 = load double, double* %833
  %835 = fdiv double %832, %834
  %836 = inttoptr i64 %1419 to double*
  store double %835, double* %836
  %837 = inttoptr i64 %1419 to double*
  %838 = load double, double* %837
  %839 = inttoptr i64 %1411 to i32*
  %840 = load i32, i32* %839
  %841 = sext i32 %840 to i64
  %842 = mul nsw i64 %841, 6760
  %843 = add i64 %842, ptrtoint (%rsd_type* @rsd to i64)
  %844 = inttoptr i64 %1415 to i32*
  %845 = load i32, i32* %844
  %846 = add i32 %845, -1
  %847 = sext i32 %846 to i64
  %848 = mul nsw i64 %847, 520
  %849 = add i64 %848, %843
  %850 = inttoptr i64 %1414 to i32*
  %851 = load i32, i32* %850
  %852 = sext i32 %851 to i64
  %853 = mul nsw i64 %852, 40
  %854 = add i64 %853, %849
  %855 = add i64 %854, 8
  %856 = inttoptr i64 %855 to double*
  %857 = load double, double* %856
  %858 = fmul double %838, %857
  %859 = inttoptr i64 %1424 to double*
  store double %858, double* %859
  %860 = inttoptr i64 %1419 to double*
  %861 = load double, double* %860
  %862 = inttoptr i64 %1411 to i32*
  %863 = load i32, i32* %862
  %864 = sext i32 %863 to i64
  %865 = mul nsw i64 %864, 6760
  %866 = add i64 %865, ptrtoint (%rsd_type* @rsd to i64)
  %867 = inttoptr i64 %1415 to i32*
  %868 = load i32, i32* %867
  %869 = add i32 %868, -1
  %870 = sext i32 %869 to i64
  %871 = mul nsw i64 %870, 520
  %872 = add i64 %871, %866
  %873 = inttoptr i64 %1414 to i32*
  %874 = load i32, i32* %873
  %875 = sext i32 %874 to i64
  %876 = mul nsw i64 %875, 40
  %877 = add i64 %876, %872
  %878 = add i64 %877, 16
  %879 = inttoptr i64 %878 to double*
  %880 = load double, double* %879
  %881 = fmul double %861, %880
  %882 = inttoptr i64 %1425 to double*
  store double %881, double* %882
  %883 = inttoptr i64 %1419 to double*
  %884 = load double, double* %883
  %885 = inttoptr i64 %1411 to i32*
  %886 = load i32, i32* %885
  %887 = sext i32 %886 to i64
  %888 = mul nsw i64 %887, 6760
  %889 = add i64 %888, ptrtoint (%rsd_type* @rsd to i64)
  %890 = inttoptr i64 %1415 to i32*
  %891 = load i32, i32* %890
  %892 = add i32 %891, -1
  %893 = sext i32 %892 to i64
  %894 = mul nsw i64 %893, 520
  %895 = add i64 %894, %889
  %896 = inttoptr i64 %1414 to i32*
  %897 = load i32, i32* %896
  %898 = sext i32 %897 to i64
  %899 = mul nsw i64 %898, 40
  %900 = add i64 %899, %895
  store i64 %900, i64* %6, align 8, !tbaa !1240
  %901 = add i64 %900, 24
  %902 = inttoptr i64 %901 to double*
  %903 = load double, double* %902
  %904 = fmul double %884, %903
  %905 = inttoptr i64 %1426 to double*
  store double %904, double* %905
  %906 = inttoptr i64 %1419 to double*
  %907 = load double, double* %906
  %908 = inttoptr i64 %1411 to i32*
  %909 = load i32, i32* %908
  %910 = sext i32 %909 to i64
  %911 = mul nsw i64 %910, 6760
  %912 = add i64 %911, ptrtoint (%rsd_type* @rsd to i64)
  %913 = inttoptr i64 %1415 to i32*
  %914 = load i32, i32* %913
  %915 = add i32 %914, -1
  %916 = zext i32 %915 to i64
  store i64 %916, i64* %4903, align 8, !tbaa !1240
  %917 = sext i32 %915 to i64
  %918 = mul nsw i64 %917, 520
  %919 = add i64 %918, %912
  %920 = inttoptr i64 %1414 to i32*
  %921 = load i32, i32* %920
  %922 = sext i32 %921 to i64
  %923 = mul nsw i64 %922, 40
  %924 = add i64 %923, %919
  %925 = add i64 %924, 32
  %926 = inttoptr i64 %925 to double*
  %927 = load double, double* %926
  %928 = fmul double %907, %927
  %929 = inttoptr i64 %1427 to double*
  store double %928, double* %929
  %930 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %931 = inttoptr i64 %1420 to double*
  %932 = load double, double* %931
  %933 = inttoptr i64 %1424 to double*
  %934 = load double, double* %933
  %935 = fsub double %932, %934
  %936 = fmul double %935, %930
  %937 = inttoptr i64 %1415 to i32*
  %938 = load i32, i32* %937
  %939 = sext i32 %938 to i64
  %940 = mul nsw i64 %939, 40
  %941 = add i64 %940, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %942 = inttoptr i64 %941 to double*
  store double %936, double* %942
  %943 = load double, double* %4921, align 1
  %944 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %945 = fmul double %943, %944
  %946 = inttoptr i64 %1421 to double*
  %947 = load double, double* %946
  %948 = inttoptr i64 %1425 to double*
  %949 = load double, double* %948
  %950 = fsub double %947, %949
  %951 = fmul double %950, %945
  %952 = inttoptr i64 %1415 to i32*
  %953 = load i32, i32* %952
  %954 = sext i32 %953 to i64
  %955 = mul nsw i64 %954, 40
  %956 = add i64 %955, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %957 = inttoptr i64 %956 to double*
  store double %951, double* %957
  %958 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %959 = inttoptr i64 %1422 to double*
  %960 = load double, double* %959
  %961 = inttoptr i64 %1426 to double*
  %962 = load double, double* %961
  %963 = fsub double %960, %962
  %964 = fmul double %963, %958
  %965 = inttoptr i64 %1415 to i32*
  %966 = load i32, i32* %965
  %967 = sext i32 %966 to i64
  %968 = mul nsw i64 %967, 40
  %969 = add i64 %968, ptrtoint (%flux_type* @flux to i64)
  store i64 %969, i64* %4902, align 8, !tbaa !1240
  %970 = add i64 %968, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %971 = inttoptr i64 %970 to double*
  store double %964, double* %971
  %972 = load double, double* %4918, align 1
  %973 = load double, double* bitcast (%ty3_type* @ty3 to double*)
  %974 = fmul double %972, %973
  %975 = inttoptr i64 %1420 to double*
  %976 = load double, double* %975
  %977 = fmul double %976, %976
  %978 = inttoptr i64 %1421 to double*
  %979 = load double, double* %978
  %980 = fmul double %979, %979
  %981 = fadd double %980, %977
  %982 = inttoptr i64 %1422 to double*
  %983 = load double, double* %982
  %984 = fmul double %983, %983
  %985 = fadd double %984, %981
  %986 = inttoptr i64 %1424 to double*
  %987 = load double, double* %986
  %988 = fmul double %987, %987
  %989 = inttoptr i64 %1425 to double*
  %990 = load double, double* %989
  %991 = fmul double %990, %990
  %992 = fadd double %991, %988
  %993 = inttoptr i64 %1426 to double*
  %994 = load double, double* %993
  %995 = fmul double %994, %994
  store double %995, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %996 = fadd double %995, %992
  %997 = fsub double %985, %996
  %998 = fmul double %997, %974
  %999 = load double, double* %4911, align 1
  %1000 = fmul double %973, %999
  store double %991, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %1001 = fsub double %980, %991
  store double %1001, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %1002 = fmul double %1001, %1000
  %1003 = fadd double %1002, %998
  %1004 = load double, double* %39, align 1
  %1005 = fmul double %973, %1004
  %1006 = inttoptr i64 %1423 to double*
  %1007 = load double, double* %1006
  %1008 = inttoptr i64 %1427 to double*
  %1009 = load double, double* %1008
  %1010 = fsub double %1007, %1009
  store double %1010, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %1011 = fmul double %1010, %1005
  store double %1011, double* %39, align 1, !tbaa !1264
  %1012 = fadd double %1011, %1003
  store double %1012, double* %4918, align 1, !tbaa !1264
  %1013 = inttoptr i64 %1415 to i32*
  %1014 = load i32, i32* %1013
  %1015 = sext i32 %1014 to i64
  %1016 = mul nsw i64 %1015, 40
  %1017 = add i64 %1016, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %1018 = inttoptr i64 %1017 to double*
  store double %1012, double* %1018
  %1019 = inttoptr i64 %1415 to i32*
  %1020 = load i32, i32* %1019
  %1021 = add i32 %1020, 1
  %1022 = inttoptr i64 %1415 to i32*
  store i32 %1021, i32* %1022
  %1023 = add i64 %4241, -16
  br label %block_405d7b

block_408783:                                     ; preds = %block_407032
  %1024 = inttoptr i64 %4930 to i32*
  %1025 = load i32, i32* %1024
  %1026 = add i32 %1025, 1
  %1027 = inttoptr i64 %4930 to i32*
  store i32 %1026, i32* %1027
  br label %block_407018

block_405374:                                     ; preds = %block_40536a
  %1028 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %1028, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %1029 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %1030 = inttoptr i64 %1437 to i32*
  %1031 = load i32, i32* %1030
  %1032 = sext i32 %1031 to i64
  %1033 = mul nsw i64 %1032, 6760
  %1034 = add i64 %1033, ptrtoint (%frct_type* @frct to i64)
  %1035 = inttoptr i64 %1438 to i32*
  %1036 = load i32, i32* %1035
  %1037 = sext i32 %1036 to i64
  %1038 = mul nsw i64 %1037, 520
  %1039 = add i64 %1038, %1034
  %1040 = inttoptr i64 %1439 to i32*
  %1041 = load i32, i32* %1040
  %1042 = sext i32 %1041 to i64
  %1043 = mul nsw i64 %1042, 40
  %1044 = add i64 %1043, %1039
  %1045 = sext i32 %1120 to i64
  %1046 = shl nsw i64 %1045, 3
  %1047 = add i64 %1046, %1044
  %1048 = inttoptr i64 %1047 to double*
  %1049 = load double, double* %1048
  store double %1049, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %1050 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %1050, double* %4921, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4923, align 1, !tbaa !1264
  %1051 = add i64 %1033, ptrtoint (%rsd_type* @rsd to i64)
  %1052 = add i64 %1038, %1051
  %1053 = add i32 %1041, -2
  %1054 = sext i32 %1053 to i64
  %1055 = mul nsw i64 %1054, 40
  %1056 = add i64 %1055, %1052
  %1057 = add i64 %1046, %1056
  %1058 = inttoptr i64 %1057 to double*
  %1059 = load double, double* %1058
  %1060 = add i32 %1041, -1
  %1061 = sext i32 %1060 to i64
  %1062 = mul nsw i64 %1061, 40
  %1063 = add i64 %1062, %1052
  %1064 = bitcast double %1028 to <2 x i32>
  %1065 = extractelement <2 x i32> %1064, i32 0
  store i32 %1065, i32* %1453, align 1, !tbaa !1292
  %1066 = extractelement <2 x i32> %1064, i32 1
  store i32 %1066, i32* %1455, align 1, !tbaa !1292
  store i32 0, i32* %1457, align 1, !tbaa !1292
  store i32 0, i32* %1459, align 1, !tbaa !1292
  %1067 = add i64 %1046, %1063
  %1068 = load double, double* %1460, align 1
  %1069 = inttoptr i64 %1067 to double*
  %1070 = load double, double* %1069
  %1071 = fmul double %1068, %1070
  store double %1071, double* %1460, align 1, !tbaa !1264
  %1072 = fsub double %1059, %1071
  %1073 = add i64 %1043, %1052
  %1074 = add i64 %1046, %1073
  %1075 = inttoptr i64 %1074 to double*
  %1076 = load double, double* %1075
  %1077 = fmul double %1029, %1076
  store double %1077, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %1078 = fadd double %1072, %1077
  %1079 = add i64 %1033, ptrtoint (%rsd_type* @rsd to i64)
  %1080 = add i64 %1038, %1079
  %1081 = add i32 %1041, 1
  %1082 = sext i32 %1081 to i64
  %1083 = mul nsw i64 %1082, 40
  %1084 = add i64 %1083, %1080
  store i64 %1084, i64* %6, align 8, !tbaa !1240
  %1085 = add i64 %1046, %1084
  %1086 = load double, double* %39, align 1
  %1087 = inttoptr i64 %1085 to double*
  %1088 = load double, double* %1087
  %1089 = fmul double %1086, %1088
  store double %1089, double* %39, align 1, !tbaa !1264
  %1090 = fsub double %1078, %1089
  %1091 = add i32 %1041, 2
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %4903, align 8, !tbaa !1240
  %1093 = sext i32 %1091 to i64
  %1094 = mul nsw i64 %1093, 40
  %1095 = add i64 %1094, %1080
  store i64 %1045, i64* %4902, align 8, !tbaa !1240
  %1096 = add i64 %1046, %1095
  %1097 = inttoptr i64 %1096 to double*
  %1098 = load double, double* %1097
  %1099 = fadd double %1090, %1098
  store double %1099, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %1100 = load double, double* %4921, align 1
  %1101 = fmul double %1100, %1099
  store double %1101, double* %4921, align 1, !tbaa !1264
  %1102 = load double, double* %4918, align 1
  %1103 = fsub double %1102, %1101
  store double %1103, double* %4918, align 1, !tbaa !1264
  %1104 = add i64 %1033, ptrtoint (%frct_type* @frct to i64)
  %1105 = add i64 %1038, %1104
  %1106 = add i64 %1043, %1105
  %1107 = add i64 %1046, %1106
  %1108 = inttoptr i64 %1107 to double*
  store double %1103, double* %1108
  %1109 = inttoptr i64 %1451 to i32*
  %1110 = load i32, i32* %1109
  %1111 = add i32 %1110, 1
  %1112 = inttoptr i64 %1451 to i32*
  store i32 %1111, i32* %1112
  %1113 = add i64 %1130, -10
  br label %block_40536a

block_405d71:                                     ; preds = %block_405c72
  %1114 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1115 = add i64 %3354, 10
  %1116 = inttoptr i64 %1415 to i32*
  store i32 %1114, i32* %1116
  br label %block_405d7b

block_40536a:                                     ; preds = %block_40536a.preheader, %block_405374
  %1117 = phi i64 [ %1113, %block_405374 ], [ %1320, %block_40536a.preheader ]
  %1118 = phi %struct.Memory* [ %1118, %block_405374 ], [ %1303, %block_40536a.preheader ]
  %1119 = inttoptr i64 %1451 to i32*
  %1120 = load i32, i32* %1119
  %1121 = add i32 %1120, -5
  %1122 = lshr i32 %1121, 31
  %1123 = lshr i32 %1120, 31
  %1124 = xor i32 %1122, %1123
  %1125 = add nuw nsw i32 %1124, %1123
  %1126 = icmp eq i32 %1125, 2
  %1127 = icmp ne i32 %1122, 0
  %1128 = xor i1 %1127, %1126
  %1129 = select i1 %1128, i64 10, i64 463
  %1130 = add i64 %1117, %1129
  br i1 %1128, label %block_405374, label %block_405539

block_40555d:                                     ; preds = %block_405553
  %1131 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  store double %1131, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %1132 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %1132, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %1133 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %1134 = inttoptr i64 %1437 to i32*
  %1135 = load i32, i32* %1134
  %1136 = sext i32 %1135 to i64
  %1137 = mul nsw i64 %1136, 6760
  %1138 = add i64 %1137, ptrtoint (%frct_type* @frct to i64)
  %1139 = inttoptr i64 %1438 to i32*
  %1140 = load i32, i32* %1139
  %1141 = sext i32 %1140 to i64
  %1142 = mul nsw i64 %1141, 520
  %1143 = add i64 %1142, %1138
  %1144 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %1145 = add i32 %1144, -3
  %1146 = sext i32 %1145 to i64
  %1147 = mul nsw i64 %1146, 40
  %1148 = add i64 %1147, %1143
  %1149 = sext i32 %1291 to i64
  %1150 = shl nsw i64 %1149, 3
  %1151 = add i64 %1150, %1148
  %1152 = inttoptr i64 %1151 to double*
  %1153 = load double, double* %1152
  store double %1153, double* %4921, align 1, !tbaa !1264
  %1154 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %1154, double* %4924, align 1, !tbaa !1264
  %1155 = add i64 %1137, ptrtoint (%rsd_type* @rsd to i64)
  %1156 = add i64 %1142, %1155
  %1157 = add i32 %1144, -5
  %1158 = sext i32 %1157 to i64
  %1159 = mul nsw i64 %1158, 40
  %1160 = add i64 %1159, %1156
  %1161 = add i64 %1150, %1160
  %1162 = inttoptr i64 %1161 to double*
  %1163 = load double, double* %1162
  %1164 = add i32 %1144, -4
  %1165 = sext i32 %1164 to i64
  %1166 = mul nsw i64 %1165, 40
  %1167 = add i64 %1166, %1156
  %1168 = bitcast double %1132 to <2 x i32>
  %1169 = extractelement <2 x i32> %1168, i32 0
  store i32 %1169, i32* %1471, align 1, !tbaa !1292
  %1170 = extractelement <2 x i32> %1168, i32 1
  store i32 %1170, i32* %1473, align 1, !tbaa !1292
  store i32 0, i32* %1475, align 1, !tbaa !1292
  store i32 0, i32* %1477, align 1, !tbaa !1292
  %1171 = add i64 %1150, %1167
  %1172 = load double, double* %1478, align 1
  %1173 = inttoptr i64 %1171 to double*
  %1174 = load double, double* %1173
  %1175 = fmul double %1172, %1174
  store double %1175, double* %1478, align 1, !tbaa !1264
  %1176 = fsub double %1163, %1175
  %1177 = add i64 %1147, %1156
  %1178 = add i64 %1150, %1177
  %1179 = inttoptr i64 %1178 to double*
  %1180 = load double, double* %1179
  %1181 = fmul double %1133, %1180
  %1182 = fadd double %1176, %1181
  %1183 = add i64 %1137, ptrtoint (%rsd_type* @rsd to i64)
  %1184 = add i64 %1142, %1183
  %1185 = add i32 %1144, -2
  %1186 = sext i32 %1185 to i64
  %1187 = mul nsw i64 %1186, 40
  %1188 = add i64 %1187, %1184
  %1189 = load <2 x i32>, <2 x i32>* %1481, align 1
  %1190 = extractelement <2 x i32> %1189, i32 0
  store i32 %1190, i32* %1482, align 1, !tbaa !1292
  %1191 = extractelement <2 x i32> %1189, i32 1
  store i32 %1191, i32* %1484, align 1, !tbaa !1292
  %1192 = add i64 %1150, %1188
  %1193 = load double, double* %4918, align 1
  %1194 = inttoptr i64 %1192 to double*
  %1195 = load double, double* %1194
  %1196 = fmul double %1193, %1195
  %1197 = fsub double %1182, %1196
  store double %1197, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %1198 = load double, double* %4924, align 1
  %1199 = fmul double %1198, %1197
  %1200 = load double, double* %4921, align 1
  %1201 = fsub double %1200, %1199
  %1202 = add i64 %1137, ptrtoint (%frct_type* @frct to i64)
  %1203 = add i64 %1142, %1202
  %1204 = add i64 %1147, %1203
  %1205 = add i64 %1150, %1204
  %1206 = inttoptr i64 %1205 to double*
  store double %1201, double* %1206
  %1207 = inttoptr i64 %1437 to i32*
  %1208 = load i32, i32* %1207
  %1209 = sext i32 %1208 to i64
  %1210 = mul nsw i64 %1209, 6760
  %1211 = add i64 %1210, ptrtoint (%frct_type* @frct to i64)
  %1212 = inttoptr i64 %1438 to i32*
  %1213 = load i32, i32* %1212
  %1214 = sext i32 %1213 to i64
  %1215 = mul nsw i64 %1214, 520
  %1216 = add i64 %1215, %1211
  %1217 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %1218 = add i32 %1217, -2
  %1219 = zext i32 %1218 to i64
  %1220 = sext i32 %1218 to i64
  %1221 = mul nsw i64 %1220, 40
  %1222 = add i64 %1221, %1216
  %1223 = inttoptr i64 %1451 to i32*
  %1224 = load i32, i32* %1223
  %1225 = sext i32 %1224 to i64
  %1226 = shl nsw i64 %1225, 3
  %1227 = add i64 %1226, %1222
  %1228 = inttoptr i64 %1227 to double*
  %1229 = load double, double* %1228
  %1230 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %1231 = add i64 %1210, ptrtoint (%rsd_type* @rsd to i64)
  %1232 = add i64 %1215, %1231
  %1233 = add i32 %1217, -4
  %1234 = sext i32 %1233 to i64
  %1235 = mul nsw i64 %1234, 40
  %1236 = add i64 %1235, %1232
  %1237 = add i64 %1226, %1236
  %1238 = inttoptr i64 %1237 to double*
  %1239 = load double, double* %1238
  %1240 = add i64 %1210, ptrtoint (%rsd_type* @rsd to i64)
  %1241 = add i64 %1215, %1240
  %1242 = add i32 %1217, -3
  %1243 = sext i32 %1242 to i64
  %1244 = mul nsw i64 %1243, 40
  %1245 = add i64 %1244, %1241
  store i64 %1245, i64* %6, align 8, !tbaa !1240
  %1246 = add i64 %1226, %1245
  %1247 = load double, double* %4911, align 1
  %1248 = inttoptr i64 %1246 to double*
  %1249 = load double, double* %1248
  %1250 = fmul double %1247, %1249
  store double %1250, double* %4911, align 1, !tbaa !1264
  %1251 = fsub double %1239, %1250
  %1252 = add i64 %1221, %1241
  store i64 %1225, i64* %4902, align 8, !tbaa !1240
  %1253 = add i64 %1226, %1252
  %1254 = load double, double* %39, align 1
  %1255 = inttoptr i64 %1253 to double*
  %1256 = load double, double* %1255
  %1257 = fmul double %1254, %1256
  store double %1257, double* %39, align 1, !tbaa !1264
  %1258 = fadd double %1251, %1257
  store double %1258, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %1259 = fmul double %1230, %1258
  store double %1259, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %1260 = fsub double %1229, %1259
  store double %1260, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %1261 = add i64 %1210, ptrtoint (%frct_type* @frct to i64)
  %1262 = add i64 %1215, %1261
  store i64 %1219, i64* %4903, align 8, !tbaa !1240
  %1263 = add i64 %1221, %1262
  %1264 = add i64 %1226, %1263
  %1265 = inttoptr i64 %1264 to double*
  store double %1260, double* %1265
  %1266 = inttoptr i64 %1451 to i32*
  %1267 = load i32, i32* %1266
  %1268 = add i32 %1267, 1
  %1269 = inttoptr i64 %1451 to i32*
  store i32 %1268, i32* %1269
  %1270 = add i64 %1301, -10
  br label %block_405553

block_404155:                                     ; preds = %block_405861, %block_40414b
  %1271 = phi i64 [ %1323, %block_40414b ], [ %3570, %block_405861 ]
  %1272 = phi %struct.Memory* [ %1326, %block_40414b ], [ %1289, %block_405861 ]
  %1273 = inttoptr i64 %1438 to i32*
  %1274 = load i32, i32* %1273
  %1275 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %1276 = sub i32 %1274, %1275
  %1277 = lshr i32 %1276, 31
  %1278 = lshr i32 %1274, 31
  %1279 = lshr i32 %1275, 31
  %1280 = xor i32 %1279, %1278
  %1281 = xor i32 %1277, %1278
  %1282 = add nuw nsw i32 %1281, %1280
  %1283 = icmp eq i32 %1282, 2
  %1284 = icmp ne i32 %1277, 0
  %1285 = xor i1 %1284, %1283
  %1286 = select i1 %1285, i64 16, i64 5919
  %1287 = add i64 %1271, %1286
  br i1 %1285, label %block_404165, label %block_405874

block_405553:                                     ; preds = %block_405553.preheader, %block_40555d
  %1288 = phi i64 [ %1270, %block_40555d ], [ %1320, %block_405553.preheader ]
  %1289 = phi %struct.Memory* [ %1289, %block_40555d ], [ %1303, %block_405553.preheader ]
  %1290 = inttoptr i64 %1451 to i32*
  %1291 = load i32, i32* %1290
  %1292 = add i32 %1291, -5
  %1293 = lshr i32 %1292, 31
  %1294 = lshr i32 %1291, 31
  %1295 = xor i32 %1293, %1294
  %1296 = add nuw nsw i32 %1295, %1294
  %1297 = icmp eq i32 %1296, 2
  %1298 = icmp ne i32 %1293, 0
  %1299 = xor i1 %1298, %1297
  %1300 = select i1 %1299, i64 10, i64 782
  %1301 = add i64 %1288, %1300
  br i1 %1299, label %block_40555d, label %block_405861

block_40534e:                                     ; preds = %block_405347, %block_405539
  %1302 = phi i64 [ %2685, %block_405347 ], [ %1393, %block_405539 ]
  %1303 = phi %struct.Memory* [ %2713, %block_405347 ], [ %1118, %block_405539 ]
  %1304 = inttoptr i64 %1439 to i32*
  %1305 = load i32, i32* %1304
  %1306 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %1307 = add i32 %1306, -3
  %1308 = sub i32 %1305, %1307
  %1309 = lshr i32 %1308, 31
  %1310 = lshr i32 %1305, 31
  %1311 = lshr i32 %1307, 31
  %1312 = xor i32 %1311, %1310
  %1313 = xor i32 %1309, %1310
  %1314 = add nuw nsw i32 %1313, %1312
  %1315 = icmp eq i32 %1314, 2
  %1316 = icmp ne i32 %1309, 0
  %1317 = xor i1 %1316, %1315
  %1318 = select i1 %1317, i64 21, i64 510
  %1319 = add i64 %1302, %1318
  %1320 = add i64 %1319, 7
  %1321 = inttoptr i64 %1451 to i32*
  store i32 0, i32* %1321
  br i1 %1317, label %block_40536a.preheader, label %block_405553.preheader

block_405553.preheader:                           ; preds = %block_40534e
  br label %block_405553

block_40536a.preheader:                           ; preds = %block_40534e
  br label %block_40536a

block_40414b:                                     ; preds = %block_404136
  %1322 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1323 = add i64 %1343, 10
  %1324 = inttoptr i64 %1438 to i32*
  store i32 %1322, i32* %1324
  br label %block_404155

block_404136:                                     ; preds = %block_405874, %block_40412f
  %1325 = phi i64 [ %1434, %block_40412f ], [ %1877, %block_405874 ]
  %1326 = phi %struct.Memory* [ %4866, %block_40412f ], [ %1272, %block_405874 ]
  %1327 = inttoptr i64 %1437 to i32*
  %1328 = load i32, i32* %1327
  %1329 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %1330 = add i32 %1329, -1
  %1331 = sub i32 %1328, %1330
  %1332 = lshr i32 %1331, 31
  %1333 = trunc i32 %1332 to i8
  %1334 = lshr i32 %1328, 31
  %1335 = lshr i32 %1330, 31
  %1336 = xor i32 %1335, %1334
  %1337 = xor i32 %1332, %1334
  %1338 = add nuw nsw i32 %1337, %1336
  %1339 = icmp eq i32 %1338, 2
  %1340 = icmp ne i8 %1333, 0
  %1341 = xor i1 %1340, %1339
  %1342 = select i1 %1341, i64 21, i64 5969
  %1343 = add i64 %1325, %1342
  br i1 %1341, label %block_40414b, label %block_405887

block_40453b:                                     ; preds = %block_404531
  %1344 = inttoptr i64 %1437 to i32*
  %1345 = load i32, i32* %1344
  %1346 = sext i32 %1345 to i64
  %1347 = mul nsw i64 %1346, 6760
  %1348 = add i64 %1347, ptrtoint (%frct_type* @frct to i64)
  %1349 = inttoptr i64 %1438 to i32*
  %1350 = load i32, i32* %1349
  %1351 = sext i32 %1350 to i64
  %1352 = mul nsw i64 %1351, 520
  %1353 = add i64 %1352, %1348
  %1354 = inttoptr i64 %1439 to i32*
  %1355 = load i32, i32* %1354
  %1356 = sext i32 %1355 to i64
  %1357 = mul nsw i64 %1356, 40
  %1358 = add i64 %1357, %1353
  %1359 = sext i32 %3539 to i64
  %1360 = shl nsw i64 %1359, 3
  %1361 = add i64 %1360, %1358
  %1362 = inttoptr i64 %1361 to double*
  %1363 = load double, double* %1362
  %1364 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1365 = add i32 %1355, 1
  %1366 = sext i32 %1365 to i64
  %1367 = mul nsw i64 %1366, 40
  %1368 = add i64 %1367, ptrtoint (%flux_type* @flux to i64)
  store i64 %1368, i64* %6, align 8, !tbaa !1240
  %1369 = add i64 %1360, %1368
  %1370 = inttoptr i64 %1369 to double*
  %1371 = load double, double* %1370
  %1372 = add i32 %1355, -1
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %4903, align 8, !tbaa !1240
  %1374 = sext i32 %1372 to i64
  %1375 = mul nsw i64 %1374, 40
  %1376 = add i64 %1375, ptrtoint (%flux_type* @flux to i64)
  store i64 %1359, i64* %4902, align 8, !tbaa !1240
  %1377 = add i64 %1360, %1376
  %1378 = inttoptr i64 %1377 to double*
  %1379 = load double, double* %1378
  %1380 = fsub double %1371, %1379
  store double %1380, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %1381 = fmul double %1364, %1380
  store double %1381, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %1382 = fsub double %1363, %1381
  store double %1382, double* %39, align 1, !tbaa !1264
  store i64 0, i64* %32, align 1, !tbaa !1264
  %1383 = inttoptr i64 %1361 to double*
  store double %1382, double* %1383
  %1384 = inttoptr i64 %1451 to i32*
  %1385 = load i32, i32* %1384
  %1386 = add i32 %1385, 1
  %1387 = inttoptr i64 %1451 to i32*
  store i32 %1386, i32* %1387
  %1388 = add i64 %3549, -10
  br label %block_404531

block_405539:                                     ; preds = %block_40536a
  %1389 = inttoptr i64 %1439 to i32*
  %1390 = load i32, i32* %1389
  %1391 = add i32 %1390, 1
  %1392 = inttoptr i64 %1439 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %1130, -491
  br label %block_40534e

block_407936:                                     ; preds = %block_40794b, %block_40792f
  %1394 = phi %struct.Memory* [ %1858, %block_40792f ], [ %1394, %block_40794b ]
  %1395 = inttoptr i64 %4933 to i32*
  %1396 = load i32, i32* %1395
  %1397 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %1398 = add i32 %1397, -1
  %1399 = sub i32 %1396, %1398
  %1400 = lshr i32 %1399, 31
  %1401 = lshr i32 %1396, 31
  %1402 = lshr i32 %1398, 31
  %1403 = xor i32 %1402, %1401
  %1404 = xor i32 %1400, %1401
  %1405 = add nuw nsw i32 %1404, %1403
  %1406 = icmp eq i32 %1405, 2
  %1407 = icmp ne i32 %1400, 0
  %1408 = xor i1 %1407, %1406
  br i1 %1408, label %block_40794b, label %block_408011

block_40792f:                                     ; preds = %block_4074ff
  %1409 = inttoptr i64 %4933 to i32*
  store i32 1, i32* %1409
  br label %block_407936

block_405887:                                     ; preds = %block_404136
  %1410 = load i64, i64* %8, align 8
  %1411 = add i64 %1410, -12
  %1412 = add i64 %1343, 7
  %1413 = inttoptr i64 %1411 to i32*
  store i32 1, i32* %1413
  %1414 = add i64 %1410, -4
  %1415 = add i64 %1410, -8
  %1416 = add i64 %1410, -64
  %1417 = add i64 %1410, -48
  %1418 = add i64 %1410, -16
  %1419 = add i64 %1410, -80
  %1420 = add i64 %1410, -120
  %1421 = add i64 %1410, -128
  %1422 = add i64 %1410, -136
  %1423 = add i64 %1410, -144
  %1424 = add i64 %1410, -216
  %1425 = add i64 %1410, -224
  %1426 = add i64 %1410, -232
  %1427 = add i64 %1410, -240
  %1428 = bitcast i64* %32 to <2 x i32>*
  br label %block_40588e

block_40411c:                                     ; preds = %block_403ed1
  %1429 = inttoptr i64 %25 to i32*
  %1430 = load i32, i32* %1429
  %1431 = add i32 %1430, 1
  %1432 = inttoptr i64 %25 to i32*
  store i32 %1431, i32* %1432
  %1433 = add i64 %2288, -640
  br label %block_403e9c

block_40412f:                                     ; preds = %block_403e9c
  %1434 = add i64 %4882, 7
  %1435 = inttoptr i64 %25 to i32*
  store i32 1, i32* %1435
  %1436 = load i64, i64* %8, align 8
  %1437 = add i64 %1436, -12
  %1438 = add i64 %1436, -8
  %1439 = add i64 %1436, -4
  %1440 = add i64 %1436, -56
  %1441 = bitcast %union.VectorReg* %4907 to i8*
  %1442 = add i64 %1436, -48
  %1443 = bitcast [32 x %union.VectorReg]* %10 to <2 x i32>*
  %1444 = bitcast i64* %32 to <2 x i32>*
  %1445 = bitcast %union.VectorReg* %4907 to i32*
  %1446 = getelementptr inbounds i8, i8* %1441, i64 4
  %1447 = bitcast i8* %1446 to i32*
  %1448 = bitcast i64* %4925 to i32*
  %1449 = getelementptr inbounds i8, i8* %1441, i64 12
  %1450 = bitcast i8* %1449 to i32*
  %1451 = add i64 %1436, -16
  %1452 = bitcast %union.VectorReg* %13 to i8*
  %1453 = bitcast %union.VectorReg* %13 to i32*
  %1454 = getelementptr inbounds i8, i8* %1452, i64 4
  %1455 = bitcast i8* %1454 to i32*
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %1457 = bitcast i64* %1456 to i32*
  %1458 = getelementptr inbounds i8, i8* %1452, i64 12
  %1459 = bitcast i8* %1458 to i32*
  %1460 = bitcast %union.VectorReg* %13 to double*
  %1461 = add i64 %1436, -80
  %1462 = add i64 %1436, -88
  %1463 = add i64 %1436, -96
  %1464 = add i64 %1436, -104
  %1465 = add i64 %1436, -112
  %1466 = add i64 %1436, -184
  %1467 = add i64 %1436, -192
  %1468 = add i64 %1436, -200
  %1469 = add i64 %1436, -208
  %1470 = bitcast %union.VectorReg* %4908 to i8*
  %1471 = bitcast %union.VectorReg* %4908 to i32*
  %1472 = getelementptr inbounds i8, i8* %1470, i64 4
  %1473 = bitcast i8* %1472 to i32*
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %1475 = bitcast i64* %1474 to i32*
  %1476 = getelementptr inbounds i8, i8* %1470, i64 12
  %1477 = bitcast i8* %1476 to i32*
  %1478 = bitcast %union.VectorReg* %4908 to double*
  %1479 = bitcast %union.VectorReg* %4906 to <2 x i32>*
  %1480 = bitcast %union.VectorReg* %4906 to i8*
  %1481 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %1482 = bitcast %union.VectorReg* %4906 to i32*
  %1483 = getelementptr inbounds i8, i8* %1480, i64 4
  %1484 = bitcast i8* %1483 to i32*
  br label %block_404136

block_40451a:                                     ; preds = %block_404606, %block_404510
  %1485 = phi i64 [ %1511, %block_404510 ], [ %4901, %block_404606 ]
  %1486 = phi %struct.Memory* [ %3594, %block_404510 ], [ %3537, %block_404606 ]
  %1487 = inttoptr i64 %1439 to i32*
  %1488 = load i32, i32* %1487
  %1489 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %1490 = sub i32 %1488, %1489
  %1491 = lshr i32 %1490, 31
  %1492 = lshr i32 %1488, 31
  %1493 = lshr i32 %1489, 31
  %1494 = xor i32 %1493, %1492
  %1495 = xor i32 %1491, %1492
  %1496 = add nuw nsw i32 %1495, %1494
  %1497 = icmp eq i32 %1496, 2
  %1498 = icmp ne i32 %1491, 0
  %1499 = xor i1 %1498, %1497
  %1500 = select i1 %1499, i64 16, i64 255
  %1501 = add i64 %1485, %1500
  br i1 %1499, label %block_40452a, label %block_404619

block_403f16:                                     ; preds = %block_403f06
  %1502 = sitofp i32 %1842 to double
  %1503 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %1504 = add i32 %1503, -1
  %1505 = sitofp i32 %1504 to double
  store double %1505, double* %4911, align 1, !tbaa !1264
  %1506 = fdiv double %1502, %1505
  store double %1506, double* %39, align 1, !tbaa !1264
  store i64 %1838, i64* %32, align 1, !tbaa !1264
  %1507 = inttoptr i64 %4914 to double*
  store double %1506, double* %1507
  %1508 = add i64 %1855, 37
  %1509 = inttoptr i64 %30 to i32*
  store i32 0, i32* %1509
  br label %block_403f3b

block_404510:                                     ; preds = %block_40416c
  %1510 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %1511 = add i64 %3609, 10
  %1512 = inttoptr i64 %1439 to i32*
  store i32 %1510, i32* %1512
  br label %block_40451a

block_40750f:                                     ; preds = %block_4074ff
  %1513 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1256) to double*)
  store double %1513, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %1514 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1264) to double*)
  store double %1514, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %1515 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1272) to double*)
  store double %1515, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %1516 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  store double %1516, double* %4921, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4923, align 1, !tbaa !1264
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %5, align 8, !tbaa !1240
  %1517 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %1517, double* %4924, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4926, align 1, !tbaa !1264
  %1518 = sext i32 %1860 to i64
  %1519 = mul nsw i64 %1518, 6760
  %1520 = add i64 %1519, ptrtoint (%rsd_type* @rsd to i64)
  %1521 = inttoptr i64 %4930 to i32*
  %1522 = load i32, i32* %1521
  %1523 = sext i32 %1522 to i64
  %1524 = mul nsw i64 %1523, 520
  %1525 = add i64 %1524, %1520
  %1526 = inttoptr i64 %4932 to i32*
  %1527 = load i32, i32* %1526
  %1528 = sext i32 %1527 to i64
  %1529 = mul nsw i64 %1528, 40
  %1530 = add i64 %1529, %1525
  %1531 = bitcast double %1517 to <2 x i32>
  %1532 = extractelement <2 x i32> %1531, i32 0
  store i32 %1532, i32* %1453, align 1, !tbaa !1292
  %1533 = extractelement <2 x i32> %1531, i32 1
  store i32 %1533, i32* %1455, align 1, !tbaa !1292
  %1534 = load double, double* %1460, align 1
  %1535 = inttoptr i64 %1530 to double*
  %1536 = load double, double* %1535
  %1537 = fdiv double %1534, %1536
  %1538 = inttoptr i64 %4937 to double*
  store double %1537, double* %1538
  %1539 = inttoptr i64 %4937 to double*
  %1540 = load double, double* %1539
  %1541 = inttoptr i64 %4933 to i32*
  %1542 = load i32, i32* %1541
  %1543 = sext i32 %1542 to i64
  %1544 = mul nsw i64 %1543, 6760
  %1545 = add i64 %1544, ptrtoint (%rsd_type* @rsd to i64)
  %1546 = inttoptr i64 %4930 to i32*
  %1547 = load i32, i32* %1546
  %1548 = sext i32 %1547 to i64
  %1549 = mul nsw i64 %1548, 520
  %1550 = add i64 %1549, %1545
  %1551 = inttoptr i64 %4932 to i32*
  %1552 = load i32, i32* %1551
  %1553 = sext i32 %1552 to i64
  %1554 = mul nsw i64 %1553, 40
  %1555 = add i64 %1554, %1550
  %1556 = add i64 %1555, 8
  %1557 = inttoptr i64 %1556 to double*
  %1558 = load double, double* %1557
  %1559 = fmul double %1540, %1558
  %1560 = inttoptr i64 %4938 to double*
  store double %1559, double* %1560
  %1561 = inttoptr i64 %4937 to double*
  %1562 = load double, double* %1561
  %1563 = inttoptr i64 %4933 to i32*
  %1564 = load i32, i32* %1563
  %1565 = sext i32 %1564 to i64
  %1566 = mul nsw i64 %1565, 6760
  %1567 = add i64 %1566, ptrtoint (%rsd_type* @rsd to i64)
  %1568 = inttoptr i64 %4930 to i32*
  %1569 = load i32, i32* %1568
  %1570 = sext i32 %1569 to i64
  %1571 = mul nsw i64 %1570, 520
  %1572 = add i64 %1571, %1567
  %1573 = inttoptr i64 %4932 to i32*
  %1574 = load i32, i32* %1573
  %1575 = sext i32 %1574 to i64
  %1576 = mul nsw i64 %1575, 40
  %1577 = add i64 %1576, %1572
  %1578 = add i64 %1577, 16
  %1579 = inttoptr i64 %1578 to double*
  %1580 = load double, double* %1579
  %1581 = fmul double %1562, %1580
  %1582 = inttoptr i64 %4939 to double*
  store double %1581, double* %1582
  %1583 = inttoptr i64 %4937 to double*
  %1584 = load double, double* %1583
  %1585 = inttoptr i64 %4933 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  %1588 = mul nsw i64 %1587, 6760
  %1589 = add i64 %1588, ptrtoint (%rsd_type* @rsd to i64)
  %1590 = inttoptr i64 %4930 to i32*
  %1591 = load i32, i32* %1590
  %1592 = sext i32 %1591 to i64
  %1593 = mul nsw i64 %1592, 520
  %1594 = add i64 %1593, %1589
  %1595 = inttoptr i64 %4932 to i32*
  %1596 = load i32, i32* %1595
  %1597 = sext i32 %1596 to i64
  %1598 = mul nsw i64 %1597, 40
  %1599 = add i64 %1598, %1594
  %1600 = add i64 %1599, 24
  %1601 = inttoptr i64 %1600 to double*
  %1602 = load double, double* %1601
  %1603 = fmul double %1584, %1602
  %1604 = inttoptr i64 %4940 to double*
  store double %1603, double* %1604
  %1605 = inttoptr i64 %4937 to double*
  %1606 = load double, double* %1605
  %1607 = inttoptr i64 %4933 to i32*
  %1608 = load i32, i32* %1607
  %1609 = sext i32 %1608 to i64
  %1610 = mul nsw i64 %1609, 6760
  %1611 = load i64, i64* %5, align 8
  %1612 = add i64 %1610, %1611
  %1613 = inttoptr i64 %4930 to i32*
  %1614 = load i32, i32* %1613
  %1615 = sext i32 %1614 to i64
  %1616 = mul nsw i64 %1615, 520
  %1617 = add i64 %1616, %1612
  %1618 = inttoptr i64 %4932 to i32*
  %1619 = load i32, i32* %1618
  %1620 = sext i32 %1619 to i64
  %1621 = mul nsw i64 %1620, 40
  %1622 = add i64 %1621, %1617
  %1623 = add i64 %1622, 32
  %1624 = inttoptr i64 %1623 to double*
  %1625 = load double, double* %1624
  %1626 = fmul double %1606, %1625
  store double %1626, double* %1460, align 1, !tbaa !1264
  %1627 = inttoptr i64 %4941 to double*
  store double %1626, double* %1627
  %1628 = inttoptr i64 %4933 to i32*
  %1629 = load i32, i32* %1628
  %1630 = add i32 %1629, -1
  %1631 = sext i32 %1630 to i64
  %1632 = mul nsw i64 %1631, 6760
  %1633 = add i64 %1632, %1611
  %1634 = inttoptr i64 %4930 to i32*
  %1635 = load i32, i32* %1634
  %1636 = sext i32 %1635 to i64
  %1637 = mul nsw i64 %1636, 520
  %1638 = add i64 %1637, %1633
  %1639 = inttoptr i64 %4932 to i32*
  %1640 = load i32, i32* %1639
  %1641 = sext i32 %1640 to i64
  %1642 = mul nsw i64 %1641, 40
  %1643 = add i64 %1642, %1638
  %1644 = load double, double* %4924, align 1
  %1645 = inttoptr i64 %1643 to double*
  %1646 = load double, double* %1645
  %1647 = fdiv double %1644, %1646
  %1648 = inttoptr i64 %4937 to double*
  store double %1647, double* %1648
  %1649 = inttoptr i64 %4937 to double*
  %1650 = load double, double* %1649
  %1651 = inttoptr i64 %4933 to i32*
  %1652 = load i32, i32* %1651
  %1653 = add i32 %1652, -1
  %1654 = sext i32 %1653 to i64
  %1655 = mul nsw i64 %1654, 6760
  %1656 = add i64 %1655, %1611
  %1657 = inttoptr i64 %4930 to i32*
  %1658 = load i32, i32* %1657
  %1659 = sext i32 %1658 to i64
  %1660 = mul nsw i64 %1659, 520
  %1661 = add i64 %1660, %1656
  %1662 = inttoptr i64 %4932 to i32*
  %1663 = load i32, i32* %1662
  %1664 = sext i32 %1663 to i64
  %1665 = mul nsw i64 %1664, 40
  %1666 = add i64 %1665, %1661
  %1667 = add i64 %1666, 8
  %1668 = inttoptr i64 %1667 to double*
  %1669 = load double, double* %1668
  %1670 = fmul double %1650, %1669
  %1671 = inttoptr i64 %4942 to double*
  store double %1670, double* %1671
  %1672 = inttoptr i64 %4937 to double*
  %1673 = load double, double* %1672
  %1674 = inttoptr i64 %4933 to i32*
  %1675 = load i32, i32* %1674
  %1676 = add i32 %1675, -1
  %1677 = sext i32 %1676 to i64
  %1678 = mul nsw i64 %1677, 6760
  %1679 = add i64 %1678, %1611
  %1680 = inttoptr i64 %4930 to i32*
  %1681 = load i32, i32* %1680
  %1682 = sext i32 %1681 to i64
  %1683 = mul nsw i64 %1682, 520
  %1684 = add i64 %1683, %1679
  %1685 = inttoptr i64 %4932 to i32*
  %1686 = load i32, i32* %1685
  %1687 = sext i32 %1686 to i64
  %1688 = mul nsw i64 %1687, 40
  %1689 = add i64 %1688, %1684
  %1690 = add i64 %1689, 16
  %1691 = inttoptr i64 %1690 to double*
  %1692 = load double, double* %1691
  %1693 = fmul double %1673, %1692
  %1694 = inttoptr i64 %4943 to double*
  store double %1693, double* %1694
  %1695 = inttoptr i64 %4937 to double*
  %1696 = load double, double* %1695
  %1697 = inttoptr i64 %4933 to i32*
  %1698 = load i32, i32* %1697
  %1699 = add i32 %1698, -1
  %1700 = sext i32 %1699 to i64
  %1701 = mul nsw i64 %1700, 6760
  %1702 = load i64, i64* %5, align 8
  %1703 = add i64 %1701, %1702
  %1704 = inttoptr i64 %4930 to i32*
  %1705 = load i32, i32* %1704
  %1706 = sext i32 %1705 to i64
  %1707 = mul nsw i64 %1706, 520
  %1708 = add i64 %1707, %1703
  %1709 = inttoptr i64 %4932 to i32*
  %1710 = load i32, i32* %1709
  %1711 = sext i32 %1710 to i64
  %1712 = mul nsw i64 %1711, 40
  %1713 = add i64 %1712, %1708
  store i64 %1713, i64* %6, align 8, !tbaa !1240
  %1714 = add i64 %1713, 24
  %1715 = inttoptr i64 %1714 to double*
  %1716 = load double, double* %1715
  %1717 = fmul double %1696, %1716
  %1718 = inttoptr i64 %4944 to double*
  store double %1717, double* %1718
  %1719 = inttoptr i64 %4937 to double*
  %1720 = load double, double* %1719
  %1721 = inttoptr i64 %4933 to i32*
  %1722 = load i32, i32* %1721
  %1723 = add i32 %1722, -1
  %1724 = zext i32 %1723 to i64
  store i64 %1724, i64* %4903, align 8, !tbaa !1240
  %1725 = sext i32 %1723 to i64
  %1726 = mul nsw i64 %1725, 6760
  %1727 = add i64 %1726, %1702
  %1728 = inttoptr i64 %4930 to i32*
  %1729 = load i32, i32* %1728
  %1730 = sext i32 %1729 to i64
  %1731 = mul nsw i64 %1730, 520
  %1732 = add i64 %1731, %1727
  %1733 = inttoptr i64 %4932 to i32*
  %1734 = load i32, i32* %1733
  %1735 = sext i32 %1734 to i64
  %1736 = mul nsw i64 %1735, 40
  %1737 = add i64 %1736, %1732
  %1738 = add i64 %1737, 32
  %1739 = inttoptr i64 %1738 to double*
  %1740 = load double, double* %1739
  %1741 = fmul double %1720, %1740
  %1742 = inttoptr i64 %4945 to double*
  store double %1741, double* %1742
  %1743 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %1744 = inttoptr i64 %4938 to double*
  %1745 = load double, double* %1744
  %1746 = inttoptr i64 %4942 to double*
  %1747 = load double, double* %1746
  %1748 = fsub double %1745, %1747
  %1749 = fmul double %1748, %1743
  %1750 = inttoptr i64 %4933 to i32*
  %1751 = load i32, i32* %1750
  %1752 = sext i32 %1751 to i64
  %1753 = mul nsw i64 %1752, 40
  %1754 = add i64 %1753, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %1755 = inttoptr i64 %1754 to double*
  store double %1749, double* %1755
  %1756 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %1757 = inttoptr i64 %4939 to double*
  %1758 = load double, double* %1757
  %1759 = inttoptr i64 %4943 to double*
  %1760 = load double, double* %1759
  %1761 = fsub double %1758, %1760
  %1762 = fmul double %1761, %1756
  %1763 = inttoptr i64 %4933 to i32*
  %1764 = load i32, i32* %1763
  %1765 = sext i32 %1764 to i64
  %1766 = mul nsw i64 %1765, 40
  %1767 = add i64 %1766, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %1768 = inttoptr i64 %1767 to double*
  store double %1762, double* %1768
  %1769 = load double, double* %4921, align 1
  %1770 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %1771 = fmul double %1769, %1770
  %1772 = inttoptr i64 %4940 to double*
  %1773 = load double, double* %1772
  %1774 = inttoptr i64 %4944 to double*
  %1775 = load double, double* %1774
  %1776 = fsub double %1773, %1775
  %1777 = fmul double %1776, %1771
  %1778 = inttoptr i64 %4933 to i32*
  %1779 = load i32, i32* %1778
  %1780 = sext i32 %1779 to i64
  %1781 = mul nsw i64 %1780, 40
  %1782 = add i64 %1781, ptrtoint (%flux_type* @flux to i64)
  store i64 %1782, i64* %4902, align 8, !tbaa !1240
  %1783 = add i64 %1781, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %1784 = inttoptr i64 %1783 to double*
  store double %1777, double* %1784
  %1785 = load double, double* %4918, align 1
  %1786 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %1787 = fmul double %1785, %1786
  %1788 = inttoptr i64 %4938 to double*
  %1789 = load double, double* %1788
  %1790 = fmul double %1789, %1789
  %1791 = inttoptr i64 %4939 to double*
  %1792 = load double, double* %1791
  %1793 = fmul double %1792, %1792
  %1794 = fadd double %1793, %1790
  %1795 = inttoptr i64 %4940 to double*
  %1796 = load double, double* %1795
  %1797 = fmul double %1796, %1796
  %1798 = fadd double %1797, %1794
  %1799 = inttoptr i64 %4942 to double*
  %1800 = load double, double* %1799
  %1801 = fmul double %1800, %1800
  %1802 = inttoptr i64 %4943 to double*
  %1803 = load double, double* %1802
  %1804 = fmul double %1803, %1803
  %1805 = fadd double %1804, %1801
  %1806 = inttoptr i64 %4944 to double*
  %1807 = load double, double* %1806
  %1808 = fmul double %1807, %1807
  store double %1808, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %1809 = fadd double %1808, %1805
  %1810 = fsub double %1798, %1809
  %1811 = fmul double %1810, %1787
  %1812 = load double, double* %4911, align 1
  %1813 = fmul double %1786, %1812
  store double %1808, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %1814 = fsub double %1797, %1808
  store double %1814, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %1815 = fmul double %1814, %1813
  %1816 = fadd double %1815, %1811
  %1817 = load double, double* %39, align 1
  %1818 = fmul double %1786, %1817
  %1819 = inttoptr i64 %4941 to double*
  %1820 = load double, double* %1819
  %1821 = inttoptr i64 %4945 to double*
  %1822 = load double, double* %1821
  %1823 = fsub double %1820, %1822
  store double %1823, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %1824 = fmul double %1823, %1818
  store double %1824, double* %39, align 1, !tbaa !1264
  %1825 = fadd double %1824, %1816
  store double %1825, double* %4918, align 1, !tbaa !1264
  %1826 = inttoptr i64 %4933 to i32*
  %1827 = load i32, i32* %1826
  %1828 = sext i32 %1827 to i64
  %1829 = mul nsw i64 %1828, 40
  %1830 = add i64 %1829, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %1831 = inttoptr i64 %1830 to double*
  store double %1825, double* %1831
  %1832 = inttoptr i64 %4933 to i32*
  %1833 = load i32, i32* %1832
  %1834 = add i32 %1833, 1
  %1835 = inttoptr i64 %4933 to i32*
  store i32 %1834, i32* %1835
  br label %block_4074ff

block_405c82:                                     ; preds = %block_405c72
  %1836 = add i64 %3354, 7
  %1837 = inttoptr i64 %1418 to i32*
  store i32 0, i32* %1837
  br label %block_405c89

block_403f06:                                     ; preds = %block_4040f6, %block_403ee1
  %1838 = phi i64 [ %2271, %block_403ee1 ], [ %4811, %block_4040f6 ]
  %1839 = phi i64 [ %3533, %block_403ee1 ], [ %4246, %block_4040f6 ]
  %1840 = phi %struct.Memory* [ %2273, %block_403ee1 ], [ %4813, %block_4040f6 ]
  %1841 = inttoptr i64 %29 to i32*
  %1842 = load i32, i32* %1841
  %1843 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %1844 = sub i32 %1842, %1843
  %1845 = lshr i32 %1844, 31
  %1846 = lshr i32 %1842, 31
  %1847 = lshr i32 %1843, 31
  %1848 = xor i32 %1847, %1846
  %1849 = xor i32 %1845, %1846
  %1850 = add nuw nsw i32 %1849, %1848
  %1851 = icmp eq i32 %1850, 2
  %1852 = icmp ne i32 %1845, 0
  %1853 = xor i1 %1852, %1851
  %1854 = select i1 %1853, i64 16, i64 515
  %1855 = add i64 %1839, %1854
  br i1 %1853, label %block_403f16, label %block_404109

block_405103:                                     ; preds = %block_404a2d
  %1856 = add i64 %4602, 7
  %1857 = inttoptr i64 %1451 to i32*
  store i32 0, i32* %1857
  br label %block_40510a

block_4074ff:                                     ; preds = %block_4074f8, %block_40750f
  %1858 = phi %struct.Memory* [ %40, %block_4074f8 ], [ %1858, %block_40750f ]
  %1859 = inttoptr i64 %4933 to i32*
  %1860 = load i32, i32* %1859
  %1861 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %1862 = sub i32 %1860, %1861
  %1863 = lshr i32 %1862, 31
  %1864 = lshr i32 %1860, 31
  %1865 = lshr i32 %1861, 31
  %1866 = xor i32 %1865, %1864
  %1867 = xor i32 %1863, %1864
  %1868 = add nuw nsw i32 %1867, %1866
  %1869 = icmp eq i32 %1868, 2
  %1870 = icmp ne i32 %1863, 0
  %1871 = xor i1 %1870, %1869
  br i1 %1871, label %block_40750f, label %block_40792f

block_4074f8:                                     ; preds = %block_4073f4
  %1872 = inttoptr i64 %4933 to i32*
  store i32 1, i32* %1872
  br label %block_4074ff

block_405874:                                     ; preds = %block_404155
  %1873 = inttoptr i64 %1437 to i32*
  %1874 = load i32, i32* %1873
  %1875 = add i32 %1874, 1
  %1876 = inttoptr i64 %1437 to i32*
  store i32 %1875, i32* %1876
  %1877 = add i64 %1287, -5950
  br label %block_404136

block_404109:                                     ; preds = %block_403f06
  %1878 = inttoptr i64 %28 to i32*
  %1879 = load i32, i32* %1878
  %1880 = add i32 %1879, 1
  %1881 = inttoptr i64 %28 to i32*
  store i32 %1880, i32* %1881
  %1882 = add i64 %1855, -568
  br label %block_403ed1

block_406af1:                                     ; preds = %block_406af1.preheader, %block_406afb
  %1883 = phi i64 [ %145, %block_406afb ], [ %3869, %block_406af1.preheader ]
  %1884 = phi %struct.Memory* [ %1884, %block_406afb ], [ %3852, %block_406af1.preheader ]
  %1885 = inttoptr i64 %1418 to i32*
  %1886 = load i32, i32* %1885
  %1887 = add i32 %1886, -5
  %1888 = lshr i32 %1887, 31
  %1889 = lshr i32 %1886, 31
  %1890 = xor i32 %1888, %1889
  %1891 = add nuw nsw i32 %1890, %1889
  %1892 = icmp eq i32 %1891, 2
  %1893 = icmp ne i32 %1888, 0
  %1894 = xor i1 %1893, %1892
  %1895 = select i1 %1894, i64 10, i64 463
  %1896 = add i64 %1883, %1895
  br i1 %1894, label %block_406afb, label %block_406cc0

block_4074e5:                                     ; preds = %block_407410
  %1897 = add i32 %4863, 1
  %1898 = inttoptr i64 %4933 to i32*
  store i32 %1897, i32* %1898
  br label %block_4073f4

block_406ce4:                                     ; preds = %block_406cda
  %1899 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  store double %1899, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %1900 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %1900, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %1901 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %1902 = inttoptr i64 %1411 to i32*
  %1903 = load i32, i32* %1902
  %1904 = sext i32 %1903 to i64
  %1905 = mul nsw i64 %1904, 6760
  %1906 = add i64 %1905, ptrtoint (%frct_type* @frct to i64)
  %1907 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %1908 = add i32 %1907, -3
  %1909 = sext i32 %1908 to i64
  %1910 = mul nsw i64 %1909, 520
  %1911 = add i64 %1910, %1906
  %1912 = inttoptr i64 %1414 to i32*
  %1913 = load i32, i32* %1912
  %1914 = sext i32 %1913 to i64
  %1915 = mul nsw i64 %1914, 40
  %1916 = add i64 %1915, %1911
  %1917 = sext i32 %2045 to i64
  %1918 = shl nsw i64 %1917, 3
  %1919 = add i64 %1918, %1916
  %1920 = inttoptr i64 %1919 to double*
  %1921 = load double, double* %1920
  store double %1921, double* %4921, align 1, !tbaa !1264
  %1922 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %1922, double* %4924, align 1, !tbaa !1264
  %1923 = add i64 %1905, ptrtoint (%rsd_type* @rsd to i64)
  %1924 = add i32 %1907, -5
  %1925 = sext i32 %1924 to i64
  %1926 = mul nsw i64 %1925, 520
  %1927 = add i64 %1926, %1923
  %1928 = add i64 %1915, %1927
  %1929 = add i64 %1918, %1928
  %1930 = inttoptr i64 %1929 to double*
  %1931 = load double, double* %1930
  %1932 = add i32 %1907, -4
  %1933 = sext i32 %1932 to i64
  %1934 = mul nsw i64 %1933, 520
  %1935 = add i64 %1934, %1923
  %1936 = add i64 %1915, %1935
  %1937 = bitcast double %1900 to <2 x i32>
  %1938 = extractelement <2 x i32> %1937, i32 0
  store i32 %1938, i32* %1471, align 1, !tbaa !1292
  %1939 = extractelement <2 x i32> %1937, i32 1
  store i32 %1939, i32* %1473, align 1, !tbaa !1292
  store i32 0, i32* %1475, align 1, !tbaa !1292
  store i32 0, i32* %1477, align 1, !tbaa !1292
  %1940 = add i64 %1918, %1936
  %1941 = load double, double* %1478, align 1
  %1942 = inttoptr i64 %1940 to double*
  %1943 = load double, double* %1942
  %1944 = fmul double %1941, %1943
  store double %1944, double* %1478, align 1, !tbaa !1264
  %1945 = fsub double %1931, %1944
  %1946 = add i64 %1910, %1923
  %1947 = add i64 %1915, %1946
  %1948 = add i64 %1918, %1947
  %1949 = inttoptr i64 %1948 to double*
  %1950 = load double, double* %1949
  %1951 = fmul double %1901, %1950
  %1952 = fadd double %1945, %1951
  %1953 = add i64 %1905, ptrtoint (%rsd_type* @rsd to i64)
  %1954 = add i32 %1907, -2
  %1955 = sext i32 %1954 to i64
  %1956 = mul nsw i64 %1955, 520
  %1957 = add i64 %1956, %1953
  %1958 = add i64 %1915, %1957
  %1959 = load <2 x i32>, <2 x i32>* %1481, align 1
  %1960 = extractelement <2 x i32> %1959, i32 0
  store i32 %1960, i32* %1482, align 1, !tbaa !1292
  %1961 = extractelement <2 x i32> %1959, i32 1
  store i32 %1961, i32* %1484, align 1, !tbaa !1292
  %1962 = add i64 %1918, %1958
  %1963 = load double, double* %4918, align 1
  %1964 = inttoptr i64 %1962 to double*
  %1965 = load double, double* %1964
  %1966 = fmul double %1963, %1965
  %1967 = fsub double %1952, %1966
  store double %1967, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %1968 = load double, double* %4924, align 1
  %1969 = fmul double %1968, %1967
  %1970 = load double, double* %4921, align 1
  %1971 = fsub double %1970, %1969
  %1972 = add i64 %1905, ptrtoint (%frct_type* @frct to i64)
  %1973 = add i64 %1910, %1972
  %1974 = add i64 %1915, %1973
  %1975 = add i64 %1918, %1974
  %1976 = inttoptr i64 %1975 to double*
  store double %1971, double* %1976
  %1977 = inttoptr i64 %1411 to i32*
  %1978 = load i32, i32* %1977
  %1979 = sext i32 %1978 to i64
  %1980 = mul nsw i64 %1979, 6760
  %1981 = add i64 %1980, ptrtoint (%frct_type* @frct to i64)
  %1982 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %1983 = add i32 %1982, -2
  %1984 = zext i32 %1983 to i64
  %1985 = sext i32 %1983 to i64
  %1986 = mul nsw i64 %1985, 520
  %1987 = add i64 %1986, %1981
  %1988 = inttoptr i64 %1414 to i32*
  %1989 = load i32, i32* %1988
  %1990 = sext i32 %1989 to i64
  %1991 = mul nsw i64 %1990, 40
  %1992 = add i64 %1991, %1987
  %1993 = inttoptr i64 %1418 to i32*
  %1994 = load i32, i32* %1993
  %1995 = sext i32 %1994 to i64
  %1996 = shl nsw i64 %1995, 3
  %1997 = add i64 %1996, %1992
  %1998 = inttoptr i64 %1997 to double*
  %1999 = load double, double* %1998
  %2000 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %2001 = add i64 %1980, ptrtoint (%rsd_type* @rsd to i64)
  %2002 = add i32 %1982, -4
  %2003 = sext i32 %2002 to i64
  %2004 = mul nsw i64 %2003, 520
  %2005 = add i64 %2004, %2001
  %2006 = add i64 %1991, %2005
  %2007 = add i64 %1996, %2006
  %2008 = inttoptr i64 %2007 to double*
  %2009 = load double, double* %2008
  %2010 = add i64 %1980, ptrtoint (%rsd_type* @rsd to i64)
  %2011 = add i32 %1982, -3
  %2012 = sext i32 %2011 to i64
  %2013 = mul nsw i64 %2012, 520
  %2014 = add i64 %2013, %2010
  %2015 = add i64 %1991, %2014
  store i64 %2015, i64* %6, align 8, !tbaa !1240
  %2016 = add i64 %1996, %2015
  %2017 = load double, double* %4911, align 1
  %2018 = inttoptr i64 %2016 to double*
  %2019 = load double, double* %2018
  %2020 = fmul double %2017, %2019
  store double %2020, double* %4911, align 1, !tbaa !1264
  %2021 = fsub double %2009, %2020
  %2022 = add i64 %1986, %2010
  %2023 = add i64 %1991, %2022
  store i64 %1995, i64* %4902, align 8, !tbaa !1240
  %2024 = add i64 %1996, %2023
  %2025 = load double, double* %39, align 1
  %2026 = inttoptr i64 %2024 to double*
  %2027 = load double, double* %2026
  %2028 = fmul double %2025, %2027
  store double %2028, double* %39, align 1, !tbaa !1264
  %2029 = fadd double %2021, %2028
  store double %2029, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %2030 = fmul double %2000, %2029
  store double %2030, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %2031 = fsub double %1999, %2030
  store double %2031, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %2032 = add i64 %1980, ptrtoint (%frct_type* @frct to i64)
  store i64 %1984, i64* %4903, align 8, !tbaa !1240
  %2033 = add i64 %1986, %2032
  %2034 = add i64 %1991, %2033
  %2035 = add i64 %1996, %2034
  %2036 = inttoptr i64 %2035 to double*
  store double %2031, double* %2036
  %2037 = inttoptr i64 %1418 to i32*
  %2038 = load i32, i32* %2037
  %2039 = add i32 %2038, 1
  %2040 = inttoptr i64 %1418 to i32*
  store i32 %2039, i32* %2040
  %2041 = add i64 %2055, -10
  br label %block_406cda

block_406cda:                                     ; preds = %block_406cda.preheader, %block_406ce4
  %2042 = phi i64 [ %2041, %block_406ce4 ], [ %3869, %block_406cda.preheader ]
  %2043 = phi %struct.Memory* [ %2043, %block_406ce4 ], [ %3852, %block_406cda.preheader ]
  %2044 = inttoptr i64 %1418 to i32*
  %2045 = load i32, i32* %2044
  %2046 = add i32 %2045, -5
  %2047 = lshr i32 %2046, 31
  %2048 = lshr i32 %2045, 31
  %2049 = xor i32 %2047, %2048
  %2050 = add nuw nsw i32 %2049, %2048
  %2051 = icmp eq i32 %2050, 2
  %2052 = icmp ne i32 %2047, 0
  %2053 = xor i1 %2052, %2051
  %2054 = select i1 %2053, i64 10, i64 782
  %2055 = add i64 %2042, %2054
  br i1 %2053, label %block_406ce4, label %block_406fe8

block_4058d4:                                     ; preds = %block_4058c4
  %2056 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %2056, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %2057 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %2057, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %2058 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %2058, double* %4918, align 1, !tbaa !1264
  %2059 = inttoptr i64 %1411 to i32*
  %2060 = load i32, i32* %2059
  %2061 = sext i32 %2060 to i64
  %2062 = mul nsw i64 %2061, 6760
  %2063 = add i64 %2062, ptrtoint (%rsd_type* @rsd to i64)
  %2064 = sext i32 %2496 to i64
  %2065 = mul nsw i64 %2064, 520
  %2066 = add i64 %2065, %2063
  %2067 = inttoptr i64 %1414 to i32*
  %2068 = load i32, i32* %2067
  %2069 = sext i32 %2068 to i64
  %2070 = mul nsw i64 %2069, 40
  %2071 = add i64 %2070, %2066
  %2072 = add i64 %2071, 16
  %2073 = inttoptr i64 %2072 to double*
  %2074 = load double, double* %2073
  %2075 = mul nsw i64 %2064, 40
  %2076 = add i64 %2075, ptrtoint (%flux_type* @flux to i64)
  %2077 = inttoptr i64 %2076 to double*
  store double %2074, double* %2077
  %2078 = inttoptr i64 %1411 to i32*
  %2079 = load i32, i32* %2078
  %2080 = sext i32 %2079 to i64
  %2081 = mul nsw i64 %2080, 6760
  %2082 = add i64 %2081, ptrtoint (%rsd_type* @rsd to i64)
  %2083 = inttoptr i64 %1415 to i32*
  %2084 = load i32, i32* %2083
  %2085 = sext i32 %2084 to i64
  %2086 = mul nsw i64 %2085, 520
  %2087 = add i64 %2086, %2082
  %2088 = inttoptr i64 %1414 to i32*
  %2089 = load i32, i32* %2088
  %2090 = sext i32 %2089 to i64
  %2091 = mul nsw i64 %2090, 40
  %2092 = add i64 %2091, %2087
  %2093 = add i64 %2092, 16
  %2094 = inttoptr i64 %2093 to double*
  %2095 = load double, double* %2094
  %2096 = inttoptr i64 %2092 to double*
  %2097 = load double, double* %2096
  %2098 = fdiv double %2095, %2097
  %2099 = inttoptr i64 %1416 to double*
  store double %2098, double* %2099
  %2100 = inttoptr i64 %1411 to i32*
  %2101 = load i32, i32* %2100
  %2102 = sext i32 %2101 to i64
  %2103 = mul nsw i64 %2102, 6760
  %2104 = add i64 %2103, ptrtoint (%rsd_type* @rsd to i64)
  %2105 = inttoptr i64 %1415 to i32*
  %2106 = load i32, i32* %2105
  %2107 = sext i32 %2106 to i64
  %2108 = mul nsw i64 %2107, 520
  %2109 = add i64 %2108, %2104
  %2110 = inttoptr i64 %1414 to i32*
  %2111 = load i32, i32* %2110
  %2112 = sext i32 %2111 to i64
  %2113 = mul nsw i64 %2112, 40
  %2114 = add i64 %2113, %2109
  %2115 = add i64 %2114, 8
  %2116 = inttoptr i64 %2115 to double*
  %2117 = load double, double* %2116
  %2118 = fmul double %2117, %2117
  %2119 = add i64 %2114, 16
  %2120 = inttoptr i64 %2119 to double*
  %2121 = load double, double* %2120
  %2122 = add i64 %2103, ptrtoint (%rsd_type* @rsd to i64)
  %2123 = add i64 %2108, %2122
  %2124 = add i64 %2113, %2123
  %2125 = add i64 %2124, 16
  %2126 = inttoptr i64 %2125 to double*
  %2127 = load double, double* %2126
  %2128 = fmul double %2121, %2127
  %2129 = fadd double %2118, %2128
  %2130 = add i64 %2124, 24
  %2131 = inttoptr i64 %2130 to double*
  %2132 = load double, double* %2131
  %2133 = fmul double %2132, %2132
  %2134 = fadd double %2129, %2133
  %2135 = load double, double* %4918, align 1
  %2136 = fmul double %2135, %2134
  %2137 = inttoptr i64 %2124 to double*
  %2138 = load double, double* %2137
  %2139 = fdiv double %2136, %2138
  %2140 = inttoptr i64 %1417 to double*
  store double %2139, double* %2140
  %2141 = inttoptr i64 %1411 to i32*
  %2142 = load i32, i32* %2141
  %2143 = sext i32 %2142 to i64
  %2144 = mul nsw i64 %2143, 6760
  %2145 = add i64 %2144, ptrtoint (%rsd_type* @rsd to i64)
  %2146 = inttoptr i64 %1415 to i32*
  %2147 = load i32, i32* %2146
  %2148 = sext i32 %2147 to i64
  %2149 = mul nsw i64 %2148, 520
  %2150 = add i64 %2149, %2145
  %2151 = inttoptr i64 %1414 to i32*
  %2152 = load i32, i32* %2151
  %2153 = sext i32 %2152 to i64
  %2154 = mul nsw i64 %2153, 40
  %2155 = add i64 %2154, %2150
  %2156 = add i64 %2155, 8
  %2157 = inttoptr i64 %2156 to double*
  %2158 = load double, double* %2157
  %2159 = inttoptr i64 %1416 to double*
  %2160 = load double, double* %2159
  %2161 = fmul double %2158, %2160
  %2162 = mul nsw i64 %2148, 40
  %2163 = add i64 %2162, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %2164 = inttoptr i64 %2163 to double*
  store double %2161, double* %2164
  %2165 = inttoptr i64 %1411 to i32*
  %2166 = load i32, i32* %2165
  %2167 = sext i32 %2166 to i64
  %2168 = mul nsw i64 %2167, 6760
  %2169 = add i64 %2168, ptrtoint (%rsd_type* @rsd to i64)
  %2170 = inttoptr i64 %1415 to i32*
  %2171 = load i32, i32* %2170
  %2172 = sext i32 %2171 to i64
  %2173 = mul nsw i64 %2172, 520
  %2174 = add i64 %2173, %2169
  %2175 = inttoptr i64 %1414 to i32*
  %2176 = load i32, i32* %2175
  %2177 = sext i32 %2176 to i64
  %2178 = mul nsw i64 %2177, 40
  %2179 = add i64 %2178, %2174
  %2180 = add i64 %2179, 16
  %2181 = inttoptr i64 %2180 to double*
  %2182 = load double, double* %2181
  %2183 = inttoptr i64 %1416 to double*
  %2184 = load double, double* %2183
  %2185 = fmul double %2182, %2184
  %2186 = add i64 %2168, ptrtoint (%rsd_type* @rsd to i64)
  %2187 = add i64 %2173, %2186
  %2188 = add i64 %2178, %2187
  %2189 = add i64 %2188, 32
  %2190 = inttoptr i64 %2189 to double*
  %2191 = load double, double* %2190
  %2192 = inttoptr i64 %1417 to double*
  %2193 = load double, double* %2192
  %2194 = fsub double %2191, %2193
  store double %2194, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %2195 = load <2 x i32>, <2 x i32>* %1443, align 1
  %2196 = load <2 x i32>, <2 x i32>* %1444, align 1
  %2197 = extractelement <2 x i32> %2195, i32 0
  store i32 %2197, i32* %1445, align 1, !tbaa !1292
  %2198 = extractelement <2 x i32> %2195, i32 1
  store i32 %2198, i32* %1447, align 1, !tbaa !1292
  %2199 = extractelement <2 x i32> %2196, i32 0
  store i32 %2199, i32* %1448, align 1, !tbaa !1292
  %2200 = extractelement <2 x i32> %2196, i32 1
  store i32 %2200, i32* %1450, align 1, !tbaa !1292
  %2201 = load double, double* %4924, align 1
  %2202 = fmul double %2201, %2194
  store double %2202, double* %4924, align 1, !tbaa !1264
  %2203 = fadd double %2185, %2202
  %2204 = mul nsw i64 %2172, 40
  %2205 = add i64 %2204, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %2206 = inttoptr i64 %2205 to double*
  store double %2203, double* %2206
  %2207 = inttoptr i64 %1411 to i32*
  %2208 = load i32, i32* %2207
  %2209 = sext i32 %2208 to i64
  %2210 = mul nsw i64 %2209, 6760
  %2211 = add i64 %2210, ptrtoint (%rsd_type* @rsd to i64)
  %2212 = inttoptr i64 %1415 to i32*
  %2213 = load i32, i32* %2212
  %2214 = sext i32 %2213 to i64
  %2215 = mul nsw i64 %2214, 520
  %2216 = add i64 %2215, %2211
  %2217 = inttoptr i64 %1414 to i32*
  %2218 = load i32, i32* %2217
  %2219 = sext i32 %2218 to i64
  %2220 = mul nsw i64 %2219, 40
  %2221 = add i64 %2220, %2216
  %2222 = add i64 %2221, 24
  %2223 = inttoptr i64 %2222 to double*
  %2224 = load double, double* %2223
  %2225 = inttoptr i64 %1416 to double*
  %2226 = load double, double* %2225
  %2227 = fmul double %2224, %2226
  store double %2227, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %2228 = mul nsw i64 %2214, 40
  %2229 = add i64 %2228, ptrtoint (%flux_type* @flux to i64)
  store i64 %2229, i64* %6, align 8, !tbaa !1240
  %2230 = add i64 %2228, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %2231 = inttoptr i64 %2230 to double*
  store double %2227, double* %2231
  %2232 = inttoptr i64 %1411 to i32*
  %2233 = load i32, i32* %2232
  %2234 = sext i32 %2233 to i64
  %2235 = mul nsw i64 %2234, 6760
  %2236 = add i64 %2235, ptrtoint (%rsd_type* @rsd to i64)
  %2237 = inttoptr i64 %1415 to i32*
  %2238 = load i32, i32* %2237
  %2239 = sext i32 %2238 to i64
  %2240 = mul nsw i64 %2239, 520
  %2241 = add i64 %2240, %2236
  %2242 = inttoptr i64 %1414 to i32*
  %2243 = load i32, i32* %2242
  %2244 = sext i32 %2243 to i64
  %2245 = mul nsw i64 %2244, 40
  store i64 %2245, i64* %4902, align 8, !tbaa !1240
  %2246 = add i64 %2245, %2241
  %2247 = add i64 %2246, 32
  %2248 = load double, double* %4911, align 1
  %2249 = inttoptr i64 %2247 to double*
  %2250 = load double, double* %2249
  %2251 = fmul double %2248, %2250
  %2252 = bitcast <2 x i32> %2195 to double
  %2253 = inttoptr i64 %1417 to double*
  %2254 = load double, double* %2253
  %2255 = fmul double %2252, %2254
  store double %2255, double* %39, align 1, !tbaa !1264
  store <2 x i32> %2196, <2 x i32>* %1428, align 1, !tbaa !1264
  %2256 = fsub double %2251, %2255
  %2257 = inttoptr i64 %1416 to double*
  %2258 = load double, double* %2257
  %2259 = fmul double %2256, %2258
  store double %2259, double* %4911, align 1, !tbaa !1264
  %2260 = mul nsw i64 %2239, 40
  %2261 = add i64 %2260, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %2262 = inttoptr i64 %2261 to double*
  store double %2259, double* %2262
  %2263 = inttoptr i64 %1415 to i32*
  %2264 = load i32, i32* %2263
  %2265 = add i32 %2264, 1
  %2266 = inttoptr i64 %1415 to i32*
  store i32 %2265, i32* %2266
  %2267 = add i64 %2509, -16
  br label %block_4058c4

block_404a23:                                     ; preds = %block_404623
  %2268 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %2269 = add i64 %4627, 10
  %2270 = inttoptr i64 %1439 to i32*
  store i32 %2268, i32* %2270
  br label %block_404a2d

block_403ed1:                                     ; preds = %block_403eac, %block_404109
  %2271 = phi i64 [ %2632, %block_403eac ], [ %1838, %block_404109 ]
  %2272 = phi i64 [ %2635, %block_403eac ], [ %1882, %block_404109 ]
  %2273 = phi %struct.Memory* [ %4866, %block_403eac ], [ %1840, %block_404109 ]
  %2274 = inttoptr i64 %28 to i32*
  %2275 = load i32, i32* %2274
  %2276 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %2277 = sub i32 %2275, %2276
  %2278 = lshr i32 %2277, 31
  %2279 = lshr i32 %2275, 31
  %2280 = lshr i32 %2276, 31
  %2281 = xor i32 %2280, %2279
  %2282 = xor i32 %2278, %2279
  %2283 = add nuw nsw i32 %2282, %2281
  %2284 = icmp eq i32 %2283, 2
  %2285 = icmp ne i32 %2278, 0
  %2286 = xor i1 %2285, %2284
  %2287 = select i1 %2286, i64 16, i64 587
  %2288 = add i64 %2272, %2287
  br i1 %2286, label %block_403ee1, label %block_40411c

block_40417c:                                     ; preds = %block_40416c
  %2289 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %2289, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %2290 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %2290, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %2291 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %2291, double* %4918, align 1, !tbaa !1264
  %2292 = inttoptr i64 %1437 to i32*
  %2293 = load i32, i32* %2292
  %2294 = sext i32 %2293 to i64
  %2295 = mul nsw i64 %2294, 6760
  %2296 = add i64 %2295, ptrtoint (%rsd_type* @rsd to i64)
  %2297 = inttoptr i64 %1438 to i32*
  %2298 = load i32, i32* %2297
  %2299 = sext i32 %2298 to i64
  %2300 = mul nsw i64 %2299, 520
  %2301 = add i64 %2300, %2296
  %2302 = sext i32 %3596 to i64
  %2303 = mul nsw i64 %2302, 40
  %2304 = add i64 %2303, %2301
  %2305 = add i64 %2304, 8
  %2306 = inttoptr i64 %2305 to double*
  %2307 = load double, double* %2306
  %2308 = add i64 %2303, ptrtoint (%flux_type* @flux to i64)
  %2309 = inttoptr i64 %2308 to double*
  store double %2307, double* %2309
  %2310 = inttoptr i64 %1437 to i32*
  %2311 = load i32, i32* %2310
  %2312 = sext i32 %2311 to i64
  %2313 = mul nsw i64 %2312, 6760
  %2314 = add i64 %2313, ptrtoint (%rsd_type* @rsd to i64)
  %2315 = inttoptr i64 %1438 to i32*
  %2316 = load i32, i32* %2315
  %2317 = sext i32 %2316 to i64
  %2318 = mul nsw i64 %2317, 520
  %2319 = add i64 %2318, %2314
  %2320 = inttoptr i64 %1439 to i32*
  %2321 = load i32, i32* %2320
  %2322 = sext i32 %2321 to i64
  %2323 = mul nsw i64 %2322, 40
  %2324 = add i64 %2323, %2319
  %2325 = add i64 %2324, 8
  %2326 = inttoptr i64 %2325 to double*
  %2327 = load double, double* %2326
  %2328 = inttoptr i64 %2324 to double*
  %2329 = load double, double* %2328
  %2330 = fdiv double %2327, %2329
  %2331 = inttoptr i64 %1440 to double*
  store double %2330, double* %2331
  %2332 = inttoptr i64 %1437 to i32*
  %2333 = load i32, i32* %2332
  %2334 = sext i32 %2333 to i64
  %2335 = mul nsw i64 %2334, 6760
  %2336 = add i64 %2335, ptrtoint (%rsd_type* @rsd to i64)
  %2337 = inttoptr i64 %1438 to i32*
  %2338 = load i32, i32* %2337
  %2339 = sext i32 %2338 to i64
  %2340 = mul nsw i64 %2339, 520
  %2341 = add i64 %2340, %2336
  %2342 = inttoptr i64 %1439 to i32*
  %2343 = load i32, i32* %2342
  %2344 = sext i32 %2343 to i64
  %2345 = mul nsw i64 %2344, 40
  %2346 = add i64 %2345, %2341
  %2347 = add i64 %2346, 8
  %2348 = inttoptr i64 %2347 to double*
  %2349 = load double, double* %2348
  %2350 = fmul double %2349, %2349
  %2351 = add i64 %2346, 16
  %2352 = inttoptr i64 %2351 to double*
  %2353 = load double, double* %2352
  %2354 = add i64 %2335, ptrtoint (%rsd_type* @rsd to i64)
  %2355 = add i64 %2340, %2354
  %2356 = add i64 %2345, %2355
  %2357 = add i64 %2356, 16
  %2358 = inttoptr i64 %2357 to double*
  %2359 = load double, double* %2358
  %2360 = fmul double %2353, %2359
  %2361 = fadd double %2350, %2360
  %2362 = add i64 %2356, 24
  %2363 = inttoptr i64 %2362 to double*
  %2364 = load double, double* %2363
  %2365 = fmul double %2364, %2364
  %2366 = fadd double %2361, %2365
  %2367 = load double, double* %4918, align 1
  %2368 = fmul double %2367, %2366
  %2369 = inttoptr i64 %2356 to double*
  %2370 = load double, double* %2369
  %2371 = fdiv double %2368, %2370
  %2372 = inttoptr i64 %1442 to double*
  store double %2371, double* %2372
  %2373 = inttoptr i64 %1437 to i32*
  %2374 = load i32, i32* %2373
  %2375 = sext i32 %2374 to i64
  %2376 = mul nsw i64 %2375, 6760
  %2377 = add i64 %2376, ptrtoint (%rsd_type* @rsd to i64)
  %2378 = inttoptr i64 %1438 to i32*
  %2379 = load i32, i32* %2378
  %2380 = sext i32 %2379 to i64
  %2381 = mul nsw i64 %2380, 520
  %2382 = add i64 %2381, %2377
  %2383 = inttoptr i64 %1439 to i32*
  %2384 = load i32, i32* %2383
  %2385 = sext i32 %2384 to i64
  %2386 = mul nsw i64 %2385, 40
  %2387 = add i64 %2386, %2382
  %2388 = add i64 %2387, 8
  %2389 = inttoptr i64 %2388 to double*
  %2390 = load double, double* %2389
  %2391 = inttoptr i64 %1440 to double*
  %2392 = load double, double* %2391
  %2393 = fmul double %2390, %2392
  %2394 = add i64 %2387, 32
  %2395 = inttoptr i64 %2394 to double*
  %2396 = load double, double* %2395
  %2397 = inttoptr i64 %1442 to double*
  %2398 = load double, double* %2397
  %2399 = fsub double %2396, %2398
  store double %2399, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %2400 = load <2 x i32>, <2 x i32>* %1443, align 1
  %2401 = load <2 x i32>, <2 x i32>* %1444, align 1
  %2402 = extractelement <2 x i32> %2400, i32 0
  store i32 %2402, i32* %1445, align 1, !tbaa !1292
  %2403 = extractelement <2 x i32> %2400, i32 1
  store i32 %2403, i32* %1447, align 1, !tbaa !1292
  %2404 = extractelement <2 x i32> %2401, i32 0
  store i32 %2404, i32* %1448, align 1, !tbaa !1292
  %2405 = extractelement <2 x i32> %2401, i32 1
  store i32 %2405, i32* %1450, align 1, !tbaa !1292
  %2406 = load double, double* %4924, align 1
  %2407 = fmul double %2406, %2399
  store double %2407, double* %4924, align 1, !tbaa !1264
  %2408 = fadd double %2393, %2407
  %2409 = add i64 %2386, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %2410 = inttoptr i64 %2409 to double*
  store double %2408, double* %2410
  %2411 = inttoptr i64 %1437 to i32*
  %2412 = load i32, i32* %2411
  %2413 = sext i32 %2412 to i64
  %2414 = mul nsw i64 %2413, 6760
  %2415 = add i64 %2414, ptrtoint (%rsd_type* @rsd to i64)
  %2416 = inttoptr i64 %1438 to i32*
  %2417 = load i32, i32* %2416
  %2418 = sext i32 %2417 to i64
  %2419 = mul nsw i64 %2418, 520
  %2420 = add i64 %2419, %2415
  %2421 = inttoptr i64 %1439 to i32*
  %2422 = load i32, i32* %2421
  %2423 = sext i32 %2422 to i64
  %2424 = mul nsw i64 %2423, 40
  %2425 = add i64 %2424, %2420
  %2426 = add i64 %2425, 16
  %2427 = inttoptr i64 %2426 to double*
  %2428 = load double, double* %2427
  %2429 = inttoptr i64 %1440 to double*
  %2430 = load double, double* %2429
  %2431 = fmul double %2428, %2430
  %2432 = add i64 %2424, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %2433 = inttoptr i64 %2432 to double*
  store double %2431, double* %2433
  %2434 = inttoptr i64 %1437 to i32*
  %2435 = load i32, i32* %2434
  %2436 = sext i32 %2435 to i64
  %2437 = mul nsw i64 %2436, 6760
  %2438 = add i64 %2437, ptrtoint (%rsd_type* @rsd to i64)
  %2439 = inttoptr i64 %1438 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  %2442 = mul nsw i64 %2441, 520
  %2443 = add i64 %2442, %2438
  %2444 = inttoptr i64 %1439 to i32*
  %2445 = load i32, i32* %2444
  %2446 = sext i32 %2445 to i64
  %2447 = mul nsw i64 %2446, 40
  %2448 = add i64 %2447, %2443
  %2449 = add i64 %2448, 24
  %2450 = inttoptr i64 %2449 to double*
  %2451 = load double, double* %2450
  %2452 = inttoptr i64 %1440 to double*
  %2453 = load double, double* %2452
  %2454 = fmul double %2451, %2453
  store double %2454, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %2455 = add i64 %2447, ptrtoint (%flux_type* @flux to i64)
  store i64 %2455, i64* %6, align 8, !tbaa !1240
  %2456 = add i64 %2447, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %2457 = inttoptr i64 %2456 to double*
  store double %2454, double* %2457
  %2458 = inttoptr i64 %1437 to i32*
  %2459 = load i32, i32* %2458
  %2460 = sext i32 %2459 to i64
  %2461 = mul nsw i64 %2460, 6760
  %2462 = add i64 %2461, ptrtoint (%rsd_type* @rsd to i64)
  %2463 = inttoptr i64 %1438 to i32*
  %2464 = load i32, i32* %2463
  %2465 = sext i32 %2464 to i64
  %2466 = mul nsw i64 %2465, 520
  %2467 = add i64 %2466, %2462
  %2468 = inttoptr i64 %1439 to i32*
  %2469 = load i32, i32* %2468
  %2470 = sext i32 %2469 to i64
  %2471 = mul nsw i64 %2470, 40
  store i64 %2471, i64* %4902, align 8, !tbaa !1240
  %2472 = add i64 %2471, %2467
  %2473 = add i64 %2472, 32
  %2474 = load double, double* %4911, align 1
  %2475 = inttoptr i64 %2473 to double*
  %2476 = load double, double* %2475
  %2477 = fmul double %2474, %2476
  %2478 = load double, double* %39, align 1
  %2479 = inttoptr i64 %1442 to double*
  %2480 = load double, double* %2479
  %2481 = fmul double %2478, %2480
  store double %2481, double* %39, align 1, !tbaa !1264
  %2482 = fsub double %2477, %2481
  %2483 = inttoptr i64 %1440 to double*
  %2484 = load double, double* %2483
  %2485 = fmul double %2482, %2484
  store double %2485, double* %4911, align 1, !tbaa !1264
  %2486 = add i64 %2471, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %2487 = inttoptr i64 %2486 to double*
  store double %2485, double* %2487
  %2488 = inttoptr i64 %1439 to i32*
  %2489 = load i32, i32* %2488
  %2490 = add i32 %2489, 1
  %2491 = inttoptr i64 %1439 to i32*
  store i32 %2490, i32* %2491
  %2492 = add i64 %3609, -16
  br label %block_40416c

block_4058c4:                                     ; preds = %block_4058bd, %block_4058d4
  %2493 = phi i64 [ %3320, %block_4058bd ], [ %2267, %block_4058d4 ]
  %2494 = phi %struct.Memory* [ %2613, %block_4058bd ], [ %2494, %block_4058d4 ]
  %2495 = inttoptr i64 %1415 to i32*
  %2496 = load i32, i32* %2495
  %2497 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %2498 = sub i32 %2496, %2497
  %2499 = lshr i32 %2498, 31
  %2500 = lshr i32 %2496, 31
  %2501 = lshr i32 %2497, 31
  %2502 = xor i32 %2501, %2500
  %2503 = xor i32 %2499, %2500
  %2504 = add nuw nsw i32 %2503, %2502
  %2505 = icmp eq i32 %2504, 2
  %2506 = icmp ne i32 %2499, 0
  %2507 = xor i1 %2506, %2505
  %2508 = select i1 %2507, i64 16, i64 932
  %2509 = add i64 %2493, %2508
  br i1 %2507, label %block_4058d4, label %block_405c68

block_405114:                                     ; preds = %block_40510a
  %2510 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %2510, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %2511 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  store double %2511, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %2512 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1232) to double*)
  store double %2512, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %2513 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %2514 = inttoptr i64 %1437 to i32*
  %2515 = load i32, i32* %2514
  %2516 = sext i32 %2515 to i64
  %2517 = mul nsw i64 %2516, 6760
  %2518 = add i64 %2517, ptrtoint (%frct_type* @frct to i64)
  %2519 = inttoptr i64 %1438 to i32*
  %2520 = load i32, i32* %2519
  %2521 = sext i32 %2520 to i64
  %2522 = mul nsw i64 %2521, 520
  %2523 = add i64 %2522, %2518
  %2524 = sext i32 %2715 to i64
  %2525 = shl nsw i64 %2524, 3
  %2526 = add i64 %2523, 40
  %2527 = add i64 %2526, %2525
  %2528 = inttoptr i64 %2527 to double*
  %2529 = load double, double* %2528
  %2530 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %2531 = add i64 %2517, ptrtoint (%rsd_type* @rsd to i64)
  %2532 = add i64 %2522, %2531
  %2533 = add i64 %2532, 40
  %2534 = add i64 %2533, %2525
  %2535 = inttoptr i64 %2534 to double*
  %2536 = load double, double* %2535
  %2537 = fmul double %2513, %2536
  %2538 = bitcast double %2510 to <2 x i32>
  %2539 = extractelement <2 x i32> %2538, i32 0
  store i32 %2539, i32* %1471, align 1, !tbaa !1292
  %2540 = extractelement <2 x i32> %2538, i32 1
  store i32 %2540, i32* %1473, align 1, !tbaa !1292
  store i32 0, i32* %1475, align 1, !tbaa !1292
  store i32 0, i32* %1477, align 1, !tbaa !1292
  %2541 = add i64 %2532, 80
  %2542 = add i64 %2541, %2525
  %2543 = load double, double* %1478, align 1
  %2544 = inttoptr i64 %2542 to double*
  %2545 = load double, double* %2544
  %2546 = fmul double %2543, %2545
  store double %2546, double* %1478, align 1, !tbaa !1264
  %2547 = fsub double %2537, %2546
  %2548 = add i64 %2532, 120
  %2549 = add i64 %2548, %2525
  %2550 = inttoptr i64 %2549 to double*
  %2551 = load double, double* %2550
  %2552 = fadd double %2547, %2551
  %2553 = fmul double %2530, %2552
  store double %2553, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %2554 = fsub double %2529, %2553
  %2555 = inttoptr i64 %2527 to double*
  store double %2554, double* %2555
  %2556 = inttoptr i64 %1437 to i32*
  %2557 = load i32, i32* %2556
  %2558 = sext i32 %2557 to i64
  %2559 = mul nsw i64 %2558, 6760
  %2560 = add i64 %2559, ptrtoint (%frct_type* @frct to i64)
  %2561 = inttoptr i64 %1438 to i32*
  %2562 = load i32, i32* %2561
  %2563 = sext i32 %2562 to i64
  %2564 = mul nsw i64 %2563, 520
  %2565 = add i64 %2564, %2560
  %2566 = inttoptr i64 %1451 to i32*
  %2567 = load i32, i32* %2566
  %2568 = sext i32 %2567 to i64
  %2569 = shl nsw i64 %2568, 3
  %2570 = add i64 %2565, 80
  %2571 = add i64 %2570, %2569
  %2572 = inttoptr i64 %2571 to double*
  %2573 = load double, double* %2572
  %2574 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %2575 = add i64 %2559, ptrtoint (%rsd_type* @rsd to i64)
  %2576 = add i64 %2564, %2575
  %2577 = add i64 %2576, 40
  %2578 = add i64 %2577, %2569
  %2579 = load double, double* %4918, align 1
  %2580 = inttoptr i64 %2578 to double*
  %2581 = load double, double* %2580
  %2582 = fmul double %2579, %2581
  %2583 = add i64 %2576, 80
  %2584 = add i64 %2583, %2569
  %2585 = load double, double* %4911, align 1
  %2586 = inttoptr i64 %2584 to double*
  %2587 = load double, double* %2586
  %2588 = fmul double %2585, %2587
  store double %2588, double* %4911, align 1, !tbaa !1264
  %2589 = fadd double %2582, %2588
  store i64 %2576, i64* %6, align 8, !tbaa !1240
  %2590 = add i64 %2576, 120
  %2591 = add i64 %2590, %2569
  %2592 = load double, double* %39, align 1
  %2593 = inttoptr i64 %2591 to double*
  %2594 = load double, double* %2593
  %2595 = fmul double %2592, %2594
  store double %2595, double* %39, align 1, !tbaa !1264
  %2596 = fsub double %2589, %2595
  store i64 %2568, i64* %4902, align 8, !tbaa !1240
  %2597 = add i64 %2576, 160
  %2598 = add i64 %2597, %2569
  %2599 = inttoptr i64 %2598 to double*
  %2600 = load double, double* %2599
  %2601 = fadd double %2596, %2600
  store double %2601, double* %4918, align 1, !tbaa !1264
  %2602 = fmul double %2574, %2601
  store double %2602, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %2603 = fsub double %2573, %2602
  store double %2603, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %2604 = inttoptr i64 %2571 to double*
  store double %2603, double* %2604
  %2605 = inttoptr i64 %1451 to i32*
  %2606 = load i32, i32* %2605
  %2607 = add i32 %2606, 1
  %2608 = inttoptr i64 %1451 to i32*
  store i32 %2607, i32* %2608
  %2609 = add i64 %2725, -10
  br label %block_40510a

block_404165:                                     ; preds = %block_404155
  %2610 = add i64 %1287, 7
  %2611 = inttoptr i64 %1439 to i32*
  store i32 0, i32* %2611
  br label %block_40416c

block_4058ad:                                     ; preds = %block_406fe8, %block_4058a3
  %2612 = phi i64 [ %2638, %block_4058a3 ], [ %3825, %block_406fe8 ]
  %2613 = phi %struct.Memory* [ %4629, %block_4058a3 ], [ %2043, %block_406fe8 ]
  %2614 = inttoptr i64 %1414 to i32*
  %2615 = load i32, i32* %2614
  %2616 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %2617 = sub i32 %2615, %2616
  %2618 = lshr i32 %2617, 31
  %2619 = lshr i32 %2615, 31
  %2620 = lshr i32 %2616, 31
  %2621 = xor i32 %2620, %2619
  %2622 = xor i32 %2618, %2619
  %2623 = add nuw nsw i32 %2622, %2621
  %2624 = icmp eq i32 %2623, 2
  %2625 = icmp ne i32 %2618, 0
  %2626 = xor i1 %2625, %2624
  %2627 = select i1 %2626, i64 16, i64 5966
  %2628 = add i64 %2612, %2627
  br i1 %2626, label %block_4058bd, label %block_406ffb

block_403eac:                                     ; preds = %block_403e9c
  %2629 = sitofp i32 %4868 to double
  %2630 = add i32 %4869, -1
  %2631 = sitofp i32 %2630 to double
  store double %2631, double* %4911, align 1, !tbaa !1264
  %2632 = load i64, i64* %32, align 1
  %2633 = fdiv double %2629, %2631
  store double %2633, double* %39, align 1, !tbaa !1264
  %2634 = inttoptr i64 %4912 to double*
  store double %2633, double* %2634
  %2635 = add i64 %4882, 37
  %2636 = inttoptr i64 %28 to i32*
  store i32 0, i32* %2636
  br label %block_403ed1

block_4058a3:                                     ; preds = %block_40588e
  %2637 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %2638 = add i64 %4646, 10
  %2639 = inttoptr i64 %1414 to i32*
  store i32 %2637, i32* %2639
  br label %block_4058ad

block_405c93:                                     ; preds = %block_405c89
  %2640 = inttoptr i64 %1411 to i32*
  %2641 = load i32, i32* %2640
  %2642 = sext i32 %2641 to i64
  %2643 = mul nsw i64 %2642, 6760
  %2644 = add i64 %2643, ptrtoint (%frct_type* @frct to i64)
  %2645 = inttoptr i64 %1415 to i32*
  %2646 = load i32, i32* %2645
  %2647 = sext i32 %2646 to i64
  %2648 = mul nsw i64 %2647, 520
  %2649 = add i64 %2648, %2644
  %2650 = inttoptr i64 %1414 to i32*
  %2651 = load i32, i32* %2650
  %2652 = sext i32 %2651 to i64
  %2653 = mul nsw i64 %2652, 40
  %2654 = add i64 %2653, %2649
  %2655 = sext i32 %2701 to i64
  %2656 = shl nsw i64 %2655, 3
  %2657 = add i64 %2656, %2654
  %2658 = inttoptr i64 %2657 to double*
  %2659 = load double, double* %2658
  %2660 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2661 = add i32 %2646, 1
  %2662 = sext i32 %2661 to i64
  %2663 = mul nsw i64 %2662, 40
  %2664 = add i64 %2663, ptrtoint (%flux_type* @flux to i64)
  store i64 %2664, i64* %6, align 8, !tbaa !1240
  %2665 = add i64 %2656, %2664
  %2666 = inttoptr i64 %2665 to double*
  %2667 = load double, double* %2666
  %2668 = add i32 %2646, -1
  %2669 = zext i32 %2668 to i64
  store i64 %2669, i64* %4903, align 8, !tbaa !1240
  %2670 = sext i32 %2668 to i64
  %2671 = mul nsw i64 %2670, 40
  %2672 = add i64 %2671, ptrtoint (%flux_type* @flux to i64)
  store i64 %2655, i64* %4902, align 8, !tbaa !1240
  %2673 = add i64 %2656, %2672
  %2674 = inttoptr i64 %2673 to double*
  %2675 = load double, double* %2674
  %2676 = fsub double %2667, %2675
  store double %2676, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %2677 = fmul double %2660, %2676
  store double %2677, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %2678 = fsub double %2659, %2677
  store double %2678, double* %39, align 1, !tbaa !1264
  store i64 0, i64* %32, align 1, !tbaa !1264
  %2679 = inttoptr i64 %2657 to double*
  store double %2678, double* %2679
  %2680 = inttoptr i64 %1418 to i32*
  %2681 = load i32, i32* %2680
  %2682 = add i32 %2681, 1
  %2683 = inttoptr i64 %1418 to i32*
  store i32 %2682, i32* %2683
  %2684 = add i64 %2711, -10
  br label %block_405c89

block_405347:                                     ; preds = %block_40510a
  %2685 = add i64 %2725, 7
  %2686 = inttoptr i64 %1439 to i32*
  store i32 3, i32* %2686
  br label %block_40534e

block_408018:                                     ; preds = %block_408022, %block_408011
  %2687 = phi %struct.Memory* [ %1394, %block_408011 ], [ %2687, %block_408022 ]
  %2688 = inttoptr i64 %4936 to i32*
  %2689 = load i32, i32* %2688
  %2690 = add i32 %2689, -5
  %2691 = lshr i32 %2690, 31
  %2692 = lshr i32 %2689, 31
  %2693 = xor i32 %2691, %2692
  %2694 = add nuw nsw i32 %2693, %2692
  %2695 = icmp eq i32 %2694, 2
  %2696 = icmp ne i32 %2691, 0
  %2697 = xor i1 %2696, %2695
  br i1 %2697, label %block_408022, label %block_408256

block_405c89:                                     ; preds = %block_405c93, %block_405c82
  %2698 = phi i64 [ %1836, %block_405c82 ], [ %2684, %block_405c93 ]
  %2699 = phi %struct.Memory* [ %3339, %block_405c82 ], [ %2699, %block_405c93 ]
  %2700 = inttoptr i64 %1418 to i32*
  %2701 = load i32, i32* %2700
  %2702 = add i32 %2701, -5
  %2703 = lshr i32 %2702, 31
  %2704 = lshr i32 %2701, 31
  %2705 = xor i32 %2703, %2704
  %2706 = add nuw nsw i32 %2705, %2704
  %2707 = icmp eq i32 %2706, 2
  %2708 = icmp ne i32 %2703, 0
  %2709 = xor i1 %2708, %2707
  %2710 = select i1 %2709, i64 10, i64 213
  %2711 = add i64 %2698, %2710
  br i1 %2709, label %block_405c93, label %block_405d5e

block_40510a:                                     ; preds = %block_405114, %block_405103
  %2712 = phi i64 [ %1856, %block_405103 ], [ %2609, %block_405114 ]
  %2713 = phi %struct.Memory* [ %4587, %block_405103 ], [ %2713, %block_405114 ]
  %2714 = inttoptr i64 %1451 to i32*
  %2715 = load i32, i32* %2714
  %2716 = add i32 %2715, -5
  %2717 = lshr i32 %2716, 31
  %2718 = lshr i32 %2715, 31
  %2719 = xor i32 %2717, %2718
  %2720 = add nuw nsw i32 %2719, %2718
  %2721 = icmp eq i32 %2720, 2
  %2722 = icmp ne i32 %2717, 0
  %2723 = xor i1 %2722, %2721
  %2724 = select i1 %2723, i64 10, i64 573
  %2725 = add i64 %2712, %2724
  br i1 %2723, label %block_405114, label %block_405347

block_408283:                                     ; preds = %block_408279
  %2726 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %2726, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %2727 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  %2728 = inttoptr i64 %4933 to i32*
  %2729 = load i32, i32* %2728
  %2730 = sext i32 %2729 to i64
  %2731 = mul nsw i64 %2730, 6760
  %2732 = add i64 %2731, ptrtoint (%frct_type* @frct to i64)
  %2733 = inttoptr i64 %4930 to i32*
  %2734 = load i32, i32* %2733
  %2735 = sext i32 %2734 to i64
  %2736 = mul nsw i64 %2735, 520
  %2737 = add i64 %2736, %2732
  %2738 = inttoptr i64 %4932 to i32*
  %2739 = load i32, i32* %2738
  %2740 = sext i32 %2739 to i64
  %2741 = mul nsw i64 %2740, 40
  %2742 = add i64 %2741, %2737
  %2743 = sext i32 %3311 to i64
  %2744 = shl nsw i64 %2743, 3
  %2745 = add i64 %2744, %2742
  %2746 = inttoptr i64 %2745 to double*
  %2747 = load double, double* %2746
  store double %2747, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %2748 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %2748, double* %4921, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4923, align 1, !tbaa !1264
  %2749 = add i32 %2729, -2
  %2750 = sext i32 %2749 to i64
  %2751 = mul nsw i64 %2750, 6760
  %2752 = add i64 %2751, ptrtoint (%rsd_type* @rsd to i64)
  %2753 = add i64 %2736, %2752
  %2754 = add i64 %2741, %2753
  %2755 = add i64 %2744, %2754
  %2756 = inttoptr i64 %2755 to double*
  %2757 = load double, double* %2756
  %2758 = add i32 %2729, -1
  %2759 = sext i32 %2758 to i64
  %2760 = mul nsw i64 %2759, 6760
  %2761 = add i64 %2760, ptrtoint (%rsd_type* @rsd to i64)
  %2762 = add i64 %2736, %2761
  %2763 = add i64 %2741, %2762
  %2764 = bitcast double %2726 to <2 x i32>
  %2765 = extractelement <2 x i32> %2764, i32 0
  store i32 %2765, i32* %1453, align 1, !tbaa !1292
  %2766 = extractelement <2 x i32> %2764, i32 1
  store i32 %2766, i32* %1455, align 1, !tbaa !1292
  store i32 0, i32* %1457, align 1, !tbaa !1292
  store i32 0, i32* %1459, align 1, !tbaa !1292
  %2767 = add i64 %2744, %2763
  %2768 = load double, double* %1460, align 1
  %2769 = inttoptr i64 %2767 to double*
  %2770 = load double, double* %2769
  %2771 = fmul double %2768, %2770
  store double %2771, double* %1460, align 1, !tbaa !1264
  %2772 = fsub double %2757, %2771
  %2773 = add i64 %2731, ptrtoint (%rsd_type* @rsd to i64)
  %2774 = add i64 %2736, %2773
  %2775 = add i64 %2741, %2774
  %2776 = add i64 %2744, %2775
  %2777 = inttoptr i64 %2776 to double*
  %2778 = load double, double* %2777
  %2779 = fmul double %2727, %2778
  store double %2779, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %2780 = fadd double %2772, %2779
  %2781 = add i32 %2729, 1
  %2782 = sext i32 %2781 to i64
  %2783 = mul nsw i64 %2782, 6760
  %2784 = add i64 %2783, ptrtoint (%rsd_type* @rsd to i64)
  %2785 = add i64 %2736, %2784
  %2786 = add i64 %2741, %2785
  store i64 %2786, i64* %6, align 8, !tbaa !1240
  %2787 = add i64 %2744, %2786
  %2788 = load double, double* %39, align 1
  %2789 = inttoptr i64 %2787 to double*
  %2790 = load double, double* %2789
  %2791 = fmul double %2788, %2790
  store double %2791, double* %39, align 1, !tbaa !1264
  %2792 = fsub double %2780, %2791
  %2793 = add i32 %2729, 2
  %2794 = zext i32 %2793 to i64
  store i64 %2794, i64* %4903, align 8, !tbaa !1240
  %2795 = sext i32 %2793 to i64
  %2796 = mul nsw i64 %2795, 6760
  %2797 = add i64 %2796, ptrtoint (%rsd_type* @rsd to i64)
  %2798 = add i64 %2736, %2797
  %2799 = add i64 %2741, %2798
  store i64 %2743, i64* %4902, align 8, !tbaa !1240
  %2800 = add i64 %2744, %2799
  %2801 = inttoptr i64 %2800 to double*
  %2802 = load double, double* %2801
  %2803 = fadd double %2792, %2802
  store double %2803, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %2804 = load double, double* %4921, align 1
  %2805 = fmul double %2804, %2803
  store double %2805, double* %4921, align 1, !tbaa !1264
  %2806 = load double, double* %4918, align 1
  %2807 = fsub double %2806, %2805
  store double %2807, double* %4918, align 1, !tbaa !1264
  %2808 = add i64 %2731, ptrtoint (%frct_type* @frct to i64)
  %2809 = add i64 %2736, %2808
  %2810 = add i64 %2741, %2809
  %2811 = add i64 %2744, %2810
  %2812 = inttoptr i64 %2811 to double*
  store double %2807, double* %2812
  %2813 = inttoptr i64 %4936 to i32*
  %2814 = load i32, i32* %2813
  %2815 = add i32 %2814, 1
  %2816 = inttoptr i64 %4936 to i32*
  store i32 %2815, i32* %2816
  br label %block_408279

block_406ffb:                                     ; preds = %block_4058ad
  %2817 = inttoptr i64 %1411 to i32*
  %2818 = load i32, i32* %2817
  %2819 = add i32 %2818, 1
  %2820 = inttoptr i64 %1411 to i32*
  store i32 %2819, i32* %2820
  %2821 = add i64 %2628, -5997
  br label %block_40588e

block_40794b:                                     ; preds = %block_407936
  %2822 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %2822, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  store i64 ptrtoint (%flux_type* @flux to i64), i64* %4902, align 8, !tbaa !1240
  %2823 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %2823, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %2824 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %2824, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %2825 = sext i32 %1396 to i64
  %2826 = mul nsw i64 %2825, 6760
  %2827 = add i64 %2826, ptrtoint (%frct_type* @frct to i64)
  %2828 = inttoptr i64 %4930 to i32*
  %2829 = load i32, i32* %2828
  %2830 = sext i32 %2829 to i64
  %2831 = mul nsw i64 %2830, 520
  %2832 = add i64 %2831, %2827
  %2833 = inttoptr i64 %4932 to i32*
  %2834 = load i32, i32* %2833
  %2835 = sext i32 %2834 to i64
  %2836 = mul nsw i64 %2835, 40
  %2837 = add i64 %2836, %2832
  %2838 = inttoptr i64 %2837 to double*
  %2839 = load double, double* %2838
  %2840 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %2841 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %2842 = fmul double %2840, %2841
  %2843 = add i32 %1396, 1
  %2844 = sext i32 %2843 to i64
  %2845 = mul nsw i64 %2844, 6760
  %2846 = add i64 %2845, ptrtoint (%rsd_type* @rsd to i64)
  %2847 = add i64 %2831, %2846
  %2848 = add i64 %2836, %2847
  %2849 = inttoptr i64 %2848 to double*
  %2850 = load double, double* %2849
  %2851 = add i64 %2826, ptrtoint (%rsd_type* @rsd to i64)
  %2852 = add i64 %2831, %2851
  %2853 = add i64 %2836, %2852
  %2854 = bitcast double %2822 to <2 x i32>
  %2855 = extractelement <2 x i32> %2854, i32 0
  store i32 %2855, i32* %1471, align 1, !tbaa !1292
  %2856 = extractelement <2 x i32> %2854, i32 1
  store i32 %2856, i32* %1473, align 1, !tbaa !1292
  %2857 = load double, double* %1478, align 1
  %2858 = inttoptr i64 %2853 to double*
  %2859 = load double, double* %2858
  %2860 = fmul double %2857, %2859
  %2861 = fsub double %2850, %2860
  %2862 = add i32 %1396, -1
  %2863 = sext i32 %2862 to i64
  %2864 = mul nsw i64 %2863, 6760
  %2865 = add i64 %2864, ptrtoint (%rsd_type* @rsd to i64)
  %2866 = add i64 %2831, %2865
  %2867 = add i64 %2836, %2866
  %2868 = inttoptr i64 %2867 to double*
  %2869 = load double, double* %2868
  %2870 = fadd double %2861, %2869
  %2871 = fmul double %2842, %2870
  %2872 = fadd double %2839, %2871
  %2873 = add i64 %2826, ptrtoint (%frct_type* @frct to i64)
  %2874 = add i64 %2831, %2873
  %2875 = add i64 %2836, %2874
  %2876 = inttoptr i64 %2875 to double*
  store double %2872, double* %2876
  %2877 = inttoptr i64 %4933 to i32*
  %2878 = load i32, i32* %2877
  %2879 = sext i32 %2878 to i64
  %2880 = mul nsw i64 %2879, 6760
  %2881 = add i64 %2880, ptrtoint (%frct_type* @frct to i64)
  %2882 = inttoptr i64 %4930 to i32*
  %2883 = load i32, i32* %2882
  %2884 = sext i32 %2883 to i64
  %2885 = mul nsw i64 %2884, 520
  %2886 = add i64 %2885, %2881
  %2887 = inttoptr i64 %4932 to i32*
  %2888 = load i32, i32* %2887
  %2889 = sext i32 %2888 to i64
  %2890 = mul nsw i64 %2889, 40
  %2891 = add i64 %2890, %2886
  %2892 = add i64 %2891, 8
  %2893 = inttoptr i64 %2892 to double*
  %2894 = load double, double* %2893
  %2895 = load <2 x i32>, <2 x i32>* %1479, align 1
  %2896 = extractelement <2 x i32> %2895, i32 0
  store i32 %2896, i32* %1445, align 1, !tbaa !1292
  %2897 = extractelement <2 x i32> %2895, i32 1
  store i32 %2897, i32* %1447, align 1, !tbaa !1292
  %2898 = load double, double* %4924, align 1
  %2899 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %2900 = fmul double %2898, %2899
  %2901 = load double, double* %4911, align 1
  %2902 = fmul double %2900, %2901
  %2903 = add i32 %2878, 1
  %2904 = sext i32 %2903 to i64
  %2905 = mul nsw i64 %2904, 40
  %2906 = load i64, i64* %4902, align 8
  %2907 = add i64 %2905, %2906
  %2908 = add i64 %2907, 8
  %2909 = inttoptr i64 %2908 to double*
  %2910 = load double, double* %2909
  %2911 = mul nsw i64 %2879, 40
  %2912 = add i64 %2911, %2906
  %2913 = add i64 %2912, 8
  %2914 = inttoptr i64 %2913 to double*
  %2915 = load double, double* %2914
  %2916 = fsub double %2910, %2915
  %2917 = fmul double %2902, %2916
  %2918 = fadd double %2894, %2917
  %2919 = load double, double* bitcast (%dz2_type* @dz2 to double*)
  %2920 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %2921 = fmul double %2919, %2920
  %2922 = mul nsw i64 %2904, 6760
  %2923 = add i64 %2922, ptrtoint (%rsd_type* @rsd to i64)
  %2924 = add i64 %2885, %2923
  %2925 = add i64 %2890, %2924
  %2926 = add i64 %2925, 8
  %2927 = inttoptr i64 %2926 to double*
  %2928 = load double, double* %2927
  %2929 = add i64 %2880, ptrtoint (%rsd_type* @rsd to i64)
  %2930 = add i64 %2885, %2929
  %2931 = add i64 %2890, %2930
  %2932 = load <2 x i32>, <2 x i32>* %1443, align 1
  %2933 = extractelement <2 x i32> %2932, i32 0
  store i32 %2933, i32* %1471, align 1, !tbaa !1292
  %2934 = extractelement <2 x i32> %2932, i32 1
  store i32 %2934, i32* %1473, align 1, !tbaa !1292
  %2935 = add i64 %2931, 8
  %2936 = load double, double* %1478, align 1
  %2937 = inttoptr i64 %2935 to double*
  %2938 = load double, double* %2937
  %2939 = fmul double %2936, %2938
  %2940 = fsub double %2928, %2939
  %2941 = add i32 %2878, -1
  %2942 = sext i32 %2941 to i64
  %2943 = mul nsw i64 %2942, 6760
  %2944 = add i64 %2943, ptrtoint (%rsd_type* @rsd to i64)
  %2945 = add i64 %2885, %2944
  %2946 = add i64 %2890, %2945
  %2947 = add i64 %2946, 8
  %2948 = inttoptr i64 %2947 to double*
  %2949 = load double, double* %2948
  %2950 = fadd double %2940, %2949
  %2951 = fmul double %2921, %2950
  %2952 = fadd double %2918, %2951
  %2953 = add i64 %2880, ptrtoint (%frct_type* @frct to i64)
  %2954 = add i64 %2885, %2953
  %2955 = add i64 %2890, %2954
  %2956 = add i64 %2955, 8
  %2957 = inttoptr i64 %2956 to double*
  store double %2952, double* %2957
  %2958 = inttoptr i64 %4933 to i32*
  %2959 = load i32, i32* %2958
  %2960 = sext i32 %2959 to i64
  %2961 = mul nsw i64 %2960, 6760
  %2962 = add i64 %2961, ptrtoint (%frct_type* @frct to i64)
  %2963 = inttoptr i64 %4930 to i32*
  %2964 = load i32, i32* %2963
  %2965 = sext i32 %2964 to i64
  %2966 = mul nsw i64 %2965, 520
  %2967 = add i64 %2966, %2962
  %2968 = inttoptr i64 %4932 to i32*
  %2969 = load i32, i32* %2968
  %2970 = sext i32 %2969 to i64
  %2971 = mul nsw i64 %2970, 40
  %2972 = add i64 %2971, %2967
  %2973 = add i64 %2972, 16
  %2974 = inttoptr i64 %2973 to double*
  %2975 = load double, double* %2974
  %2976 = load <2 x i32>, <2 x i32>* %1479, align 1
  %2977 = extractelement <2 x i32> %2976, i32 0
  store i32 %2977, i32* %1445, align 1, !tbaa !1292
  %2978 = extractelement <2 x i32> %2976, i32 1
  store i32 %2978, i32* %1447, align 1, !tbaa !1292
  %2979 = load double, double* %4924, align 1
  %2980 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %2981 = fmul double %2979, %2980
  %2982 = load double, double* %4911, align 1
  %2983 = fmul double %2981, %2982
  %2984 = add i32 %2959, 1
  %2985 = sext i32 %2984 to i64
  %2986 = mul nsw i64 %2985, 40
  %2987 = load i64, i64* %4902, align 8
  %2988 = add i64 %2986, %2987
  %2989 = add i64 %2988, 16
  %2990 = inttoptr i64 %2989 to double*
  %2991 = load double, double* %2990
  %2992 = mul nsw i64 %2960, 40
  %2993 = add i64 %2992, %2987
  %2994 = add i64 %2993, 16
  %2995 = inttoptr i64 %2994 to double*
  %2996 = load double, double* %2995
  %2997 = fsub double %2991, %2996
  %2998 = fmul double %2983, %2997
  %2999 = fadd double %2975, %2998
  %3000 = load double, double* bitcast (%dz3_type* @dz3 to double*)
  %3001 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3002 = fmul double %3000, %3001
  %3003 = mul nsw i64 %2985, 6760
  %3004 = add i64 %3003, ptrtoint (%rsd_type* @rsd to i64)
  %3005 = add i64 %2966, %3004
  %3006 = add i64 %2971, %3005
  %3007 = add i64 %3006, 16
  %3008 = inttoptr i64 %3007 to double*
  %3009 = load double, double* %3008
  %3010 = add i64 %2961, ptrtoint (%rsd_type* @rsd to i64)
  %3011 = add i64 %2966, %3010
  %3012 = add i64 %2971, %3011
  %3013 = load <2 x i32>, <2 x i32>* %1443, align 1
  %3014 = extractelement <2 x i32> %3013, i32 0
  store i32 %3014, i32* %1471, align 1, !tbaa !1292
  %3015 = extractelement <2 x i32> %3013, i32 1
  store i32 %3015, i32* %1473, align 1, !tbaa !1292
  %3016 = add i64 %3012, 16
  %3017 = load double, double* %1478, align 1
  %3018 = inttoptr i64 %3016 to double*
  %3019 = load double, double* %3018
  %3020 = fmul double %3017, %3019
  %3021 = fsub double %3009, %3020
  %3022 = add i32 %2959, -1
  %3023 = sext i32 %3022 to i64
  %3024 = mul nsw i64 %3023, 6760
  %3025 = add i64 %3024, ptrtoint (%rsd_type* @rsd to i64)
  %3026 = add i64 %2966, %3025
  %3027 = add i64 %2971, %3026
  %3028 = add i64 %3027, 16
  %3029 = inttoptr i64 %3028 to double*
  %3030 = load double, double* %3029
  %3031 = fadd double %3021, %3030
  %3032 = fmul double %3002, %3031
  %3033 = fadd double %2999, %3032
  %3034 = add i64 %2961, ptrtoint (%frct_type* @frct to i64)
  %3035 = add i64 %2966, %3034
  %3036 = add i64 %2971, %3035
  %3037 = add i64 %3036, 16
  %3038 = inttoptr i64 %3037 to double*
  store double %3033, double* %3038
  %3039 = inttoptr i64 %4933 to i32*
  %3040 = load i32, i32* %3039
  %3041 = sext i32 %3040 to i64
  %3042 = mul nsw i64 %3041, 6760
  %3043 = add i64 %3042, ptrtoint (%frct_type* @frct to i64)
  %3044 = inttoptr i64 %4930 to i32*
  %3045 = load i32, i32* %3044
  %3046 = sext i32 %3045 to i64
  %3047 = mul nsw i64 %3046, 520
  %3048 = add i64 %3047, %3043
  %3049 = inttoptr i64 %4932 to i32*
  %3050 = load i32, i32* %3049
  %3051 = sext i32 %3050 to i64
  %3052 = mul nsw i64 %3051, 40
  %3053 = add i64 %3052, %3048
  %3054 = add i64 %3053, 24
  %3055 = inttoptr i64 %3054 to double*
  %3056 = load double, double* %3055
  %3057 = load <2 x i32>, <2 x i32>* %1479, align 1
  %3058 = extractelement <2 x i32> %3057, i32 0
  store i32 %3058, i32* %1445, align 1, !tbaa !1292
  %3059 = extractelement <2 x i32> %3057, i32 1
  store i32 %3059, i32* %1447, align 1, !tbaa !1292
  %3060 = load double, double* %4924, align 1
  %3061 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3062 = fmul double %3060, %3061
  %3063 = load double, double* %4911, align 1
  %3064 = fmul double %3062, %3063
  %3065 = add i32 %3040, 1
  %3066 = sext i32 %3065 to i64
  %3067 = mul nsw i64 %3066, 40
  %3068 = load i64, i64* %4902, align 8
  %3069 = add i64 %3067, %3068
  %3070 = add i64 %3069, 24
  %3071 = inttoptr i64 %3070 to double*
  %3072 = load double, double* %3071
  %3073 = mul nsw i64 %3041, 40
  %3074 = add i64 %3073, %3068
  %3075 = add i64 %3074, 24
  %3076 = inttoptr i64 %3075 to double*
  %3077 = load double, double* %3076
  %3078 = fsub double %3072, %3077
  %3079 = fmul double %3064, %3078
  %3080 = fadd double %3056, %3079
  %3081 = load double, double* bitcast (%dz4_type* @dz4 to double*)
  %3082 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3083 = fmul double %3081, %3082
  %3084 = mul nsw i64 %3066, 6760
  %3085 = add i64 %3084, ptrtoint (%rsd_type* @rsd to i64)
  %3086 = add i64 %3047, %3085
  %3087 = add i64 %3052, %3086
  %3088 = add i64 %3087, 24
  %3089 = inttoptr i64 %3088 to double*
  %3090 = load double, double* %3089
  %3091 = add i64 %3042, ptrtoint (%rsd_type* @rsd to i64)
  %3092 = add i64 %3047, %3091
  %3093 = add i64 %3052, %3092
  %3094 = load <2 x i32>, <2 x i32>* %1443, align 1
  %3095 = load <2 x i32>, <2 x i32>* %1444, align 1
  %3096 = extractelement <2 x i32> %3094, i32 0
  store i32 %3096, i32* %1471, align 1, !tbaa !1292
  %3097 = extractelement <2 x i32> %3094, i32 1
  store i32 %3097, i32* %1473, align 1, !tbaa !1292
  %3098 = extractelement <2 x i32> %3095, i32 0
  store i32 %3098, i32* %1475, align 1, !tbaa !1292
  %3099 = extractelement <2 x i32> %3095, i32 1
  store i32 %3099, i32* %1477, align 1, !tbaa !1292
  %3100 = add i64 %3093, 24
  %3101 = load double, double* %1478, align 1
  %3102 = inttoptr i64 %3100 to double*
  %3103 = load double, double* %3102
  %3104 = fmul double %3101, %3103
  store double %3104, double* %1478, align 1, !tbaa !1264
  %3105 = fsub double %3090, %3104
  %3106 = add i32 %3040, -1
  %3107 = sext i32 %3106 to i64
  %3108 = mul nsw i64 %3107, 6760
  %3109 = add i64 %3108, ptrtoint (%rsd_type* @rsd to i64)
  %3110 = add i64 %3047, %3109
  %3111 = add i64 %3052, %3110
  %3112 = add i64 %3111, 24
  %3113 = inttoptr i64 %3112 to double*
  %3114 = load double, double* %3113
  %3115 = fadd double %3105, %3114
  store double %3115, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %3116 = fmul double %3083, %3115
  store double %3116, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %3117 = fadd double %3080, %3116
  %3118 = add i64 %3042, ptrtoint (%frct_type* @frct to i64)
  %3119 = add i64 %3047, %3118
  %3120 = add i64 %3052, %3119
  %3121 = add i64 %3120, 24
  %3122 = inttoptr i64 %3121 to double*
  store double %3117, double* %3122
  %3123 = inttoptr i64 %4933 to i32*
  %3124 = load i32, i32* %3123
  %3125 = sext i32 %3124 to i64
  %3126 = mul nsw i64 %3125, 6760
  %3127 = add i64 %3126, ptrtoint (%frct_type* @frct to i64)
  %3128 = inttoptr i64 %4930 to i32*
  %3129 = load i32, i32* %3128
  %3130 = sext i32 %3129 to i64
  %3131 = mul nsw i64 %3130, 520
  %3132 = add i64 %3131, %3127
  %3133 = inttoptr i64 %4932 to i32*
  %3134 = load i32, i32* %3133
  %3135 = sext i32 %3134 to i64
  %3136 = mul nsw i64 %3135, 40
  %3137 = add i64 %3136, %3132
  %3138 = add i64 %3137, 32
  %3139 = inttoptr i64 %3138 to double*
  %3140 = load double, double* %3139
  %3141 = load double, double* %4918, align 1
  %3142 = load double, double* bitcast (%tz3_type* @tz3 to double*)
  %3143 = fmul double %3141, %3142
  %3144 = load double, double* %4911, align 1
  %3145 = fmul double %3143, %3144
  %3146 = add i32 %3124, 1
  %3147 = sext i32 %3146 to i64
  %3148 = mul nsw i64 %3147, 40
  %3149 = load i64, i64* %4902, align 8
  %3150 = add i64 %3148, %3149
  store i64 %3150, i64* %4903, align 8, !tbaa !1240
  %3151 = add i64 %3150, 32
  %3152 = inttoptr i64 %3151 to double*
  %3153 = load double, double* %3152
  %3154 = mul nsw i64 %3125, 40
  %3155 = add i64 %3154, %3149
  %3156 = add i64 %3155, 32
  %3157 = inttoptr i64 %3156 to double*
  %3158 = load double, double* %3157
  %3159 = fsub double %3153, %3158
  %3160 = fmul double %3145, %3159
  %3161 = fadd double %3140, %3160
  %3162 = load double, double* bitcast (%dz5_type* @dz5 to double*)
  %3163 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3164 = fmul double %3162, %3163
  %3165 = mul nsw i64 %3147, 6760
  %3166 = add i64 %3165, ptrtoint (%rsd_type* @rsd to i64)
  %3167 = add i64 %3131, %3166
  %3168 = add i64 %3136, %3167
  %3169 = add i64 %3168, 32
  %3170 = inttoptr i64 %3169 to double*
  %3171 = load double, double* %3170
  %3172 = add i64 %3126, ptrtoint (%rsd_type* @rsd to i64)
  %3173 = add i64 %3131, %3172
  %3174 = add i64 %3136, %3173
  store i64 %3174, i64* %6, align 8, !tbaa !1240
  %3175 = add i64 %3174, 32
  %3176 = load double, double* %39, align 1
  %3177 = inttoptr i64 %3175 to double*
  %3178 = load double, double* %3177
  %3179 = fmul double %3176, %3178
  store double %3179, double* %39, align 1, !tbaa !1264
  %3180 = fsub double %3171, %3179
  %3181 = add i32 %3124, -1
  %3182 = zext i32 %3181 to i64
  store i64 %3182, i64* %4904, align 8, !tbaa !1240
  %3183 = sext i32 %3181 to i64
  %3184 = mul nsw i64 %3183, 6760
  %3185 = add i64 %3184, ptrtoint (%rsd_type* @rsd to i64)
  %3186 = add i64 %3131, %3185
  store i64 %3136, i64* %4902, align 8, !tbaa !1240
  %3187 = add i64 %3136, %3186
  %3188 = add i64 %3187, 32
  %3189 = inttoptr i64 %3188 to double*
  %3190 = load double, double* %3189
  %3191 = fadd double %3180, %3190
  store double %3191, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %3192 = fmul double %3164, %3191
  store double %3192, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %3193 = fadd double %3161, %3192
  store double %3193, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %3194 = add i64 %3126, ptrtoint (%frct_type* @frct to i64)
  %3195 = add i64 %3131, %3194
  %3196 = add i64 %3136, %3195
  %3197 = add i64 %3196, 32
  %3198 = inttoptr i64 %3197 to double*
  store double %3193, double* %3198
  %3199 = inttoptr i64 %4933 to i32*
  %3200 = load i32, i32* %3199
  %3201 = add i32 %3200, 1
  %3202 = inttoptr i64 %4933 to i32*
  store i32 %3201, i32* %3202
  br label %block_407936

block_403e82:                                     ; preds = %block_403dd9
  %3203 = inttoptr i64 %25 to i32*
  %3204 = load i32, i32* %3203
  %3205 = add i32 %3204, 1
  %3206 = inttoptr i64 %25 to i32*
  store i32 %3205, i32* %3206
  %3207 = add i64 %162, -192
  br label %block_403dc2

block_40687e:                                     ; preds = %block_406874
  %3208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %3208, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %3209 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  store double %3209, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %3210 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1232) to double*)
  store double %3210, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %3211 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %3212 = inttoptr i64 %1411 to i32*
  %3213 = load i32, i32* %3212
  %3214 = sext i32 %3213 to i64
  %3215 = mul nsw i64 %3214, 6760
  %3216 = add i64 %3215, add (i64 ptrtoint (%frct_type* @frct to i64), i64 520)
  %3217 = inttoptr i64 %1414 to i32*
  %3218 = load i32, i32* %3217
  %3219 = sext i32 %3218 to i64
  %3220 = mul nsw i64 %3219, 40
  %3221 = add i64 %3220, %3216
  %3222 = sext i32 %3325 to i64
  %3223 = shl nsw i64 %3222, 3
  %3224 = add i64 %3223, %3221
  %3225 = inttoptr i64 %3224 to double*
  %3226 = load double, double* %3225
  %3227 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3228 = add i64 %3215, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 520)
  %3229 = add i64 %3220, %3228
  %3230 = add i64 %3223, %3229
  %3231 = inttoptr i64 %3230 to double*
  %3232 = load double, double* %3231
  %3233 = fmul double %3211, %3232
  %3234 = add i64 %3215, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 1040)
  %3235 = add i64 %3220, %3234
  %3236 = bitcast double %3208 to <2 x i32>
  %3237 = extractelement <2 x i32> %3236, i32 0
  store i32 %3237, i32* %1471, align 1, !tbaa !1292
  %3238 = extractelement <2 x i32> %3236, i32 1
  store i32 %3238, i32* %1473, align 1, !tbaa !1292
  store i32 0, i32* %1475, align 1, !tbaa !1292
  store i32 0, i32* %1477, align 1, !tbaa !1292
  %3239 = add i64 %3223, %3235
  %3240 = load double, double* %1478, align 1
  %3241 = inttoptr i64 %3239 to double*
  %3242 = load double, double* %3241
  %3243 = fmul double %3240, %3242
  store double %3243, double* %1478, align 1, !tbaa !1264
  %3244 = fsub double %3233, %3243
  %3245 = add i64 %3215, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 1560)
  %3246 = add i64 %3220, %3245
  %3247 = add i64 %3223, %3246
  %3248 = inttoptr i64 %3247 to double*
  %3249 = load double, double* %3248
  %3250 = fadd double %3244, %3249
  %3251 = fmul double %3227, %3250
  store double %3251, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %3252 = fsub double %3226, %3251
  %3253 = inttoptr i64 %3224 to double*
  store double %3252, double* %3253
  %3254 = inttoptr i64 %1411 to i32*
  %3255 = load i32, i32* %3254
  %3256 = sext i32 %3255 to i64
  %3257 = mul nsw i64 %3256, 6760
  %3258 = add i64 %3257, add (i64 ptrtoint (%frct_type* @frct to i64), i64 1040)
  %3259 = inttoptr i64 %1414 to i32*
  %3260 = load i32, i32* %3259
  %3261 = sext i32 %3260 to i64
  %3262 = mul nsw i64 %3261, 40
  %3263 = add i64 %3262, %3258
  %3264 = inttoptr i64 %1418 to i32*
  %3265 = load i32, i32* %3264
  %3266 = sext i32 %3265 to i64
  %3267 = shl nsw i64 %3266, 3
  %3268 = add i64 %3267, %3263
  %3269 = inttoptr i64 %3268 to double*
  %3270 = load double, double* %3269
  %3271 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3272 = add i64 %3257, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 520)
  %3273 = add i64 %3262, %3272
  %3274 = add i64 %3267, %3273
  %3275 = load double, double* %4918, align 1
  %3276 = inttoptr i64 %3274 to double*
  %3277 = load double, double* %3276
  %3278 = fmul double %3275, %3277
  %3279 = add i64 %3257, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 1040)
  %3280 = add i64 %3262, %3279
  %3281 = add i64 %3267, %3280
  %3282 = load double, double* %4911, align 1
  %3283 = inttoptr i64 %3281 to double*
  %3284 = load double, double* %3283
  %3285 = fmul double %3282, %3284
  store double %3285, double* %4911, align 1, !tbaa !1264
  %3286 = fadd double %3278, %3285
  %3287 = add i64 %3257, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 1560)
  %3288 = add i64 %3262, %3287
  store i64 %3288, i64* %6, align 8, !tbaa !1240
  %3289 = add i64 %3267, %3288
  %3290 = load double, double* %39, align 1
  %3291 = inttoptr i64 %3289 to double*
  %3292 = load double, double* %3291
  %3293 = fmul double %3290, %3292
  store double %3293, double* %39, align 1, !tbaa !1264
  %3294 = fsub double %3286, %3293
  %3295 = add i64 %3257, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 2080)
  %3296 = add i64 %3262, %3295
  store i64 %3266, i64* %4902, align 8, !tbaa !1240
  %3297 = add i64 %3267, %3296
  %3298 = inttoptr i64 %3297 to double*
  %3299 = load double, double* %3298
  %3300 = fadd double %3294, %3299
  store double %3300, double* %4918, align 1, !tbaa !1264
  %3301 = fmul double %3271, %3300
  store double %3301, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %3302 = fsub double %3270, %3301
  store double %3302, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %3303 = inttoptr i64 %3268 to double*
  store double %3302, double* %3303
  %3304 = inttoptr i64 %1418 to i32*
  %3305 = load i32, i32* %3304
  %3306 = add i32 %3305, 1
  %3307 = inttoptr i64 %1418 to i32*
  store i32 %3306, i32* %3307
  %3308 = add i64 %3335, -10
  br label %block_406874

block_408279:                                     ; preds = %block_408279.preheader, %block_408283
  %3309 = phi %struct.Memory* [ %3309, %block_408283 ], [ %3571, %block_408279.preheader ]
  %3310 = inttoptr i64 %4936 to i32*
  %3311 = load i32, i32* %3310
  %3312 = add i32 %3311, -5
  %3313 = lshr i32 %3312, 31
  %3314 = lshr i32 %3311, 31
  %3315 = xor i32 %3313, %3314
  %3316 = add nuw nsw i32 %3315, %3314
  %3317 = icmp eq i32 %3316, 2
  %3318 = icmp ne i32 %3313, 0
  %3319 = xor i1 %3318, %3317
  br i1 %3319, label %block_408283, label %block_408448

block_4058bd:                                     ; preds = %block_4058ad
  %3320 = add i64 %2628, 7
  %3321 = inttoptr i64 %1415 to i32*
  store i32 0, i32* %3321
  br label %block_4058c4

block_406874:                                     ; preds = %block_40686d, %block_40687e
  %3322 = phi i64 [ %3377, %block_40686d ], [ %3308, %block_40687e ]
  %3323 = phi %struct.Memory* [ %652, %block_40686d ], [ %3323, %block_40687e ]
  %3324 = inttoptr i64 %1418 to i32*
  %3325 = load i32, i32* %3324
  %3326 = add i32 %3325, -5
  %3327 = lshr i32 %3326, 31
  %3328 = lshr i32 %3325, 31
  %3329 = xor i32 %3327, %3328
  %3330 = add nuw nsw i32 %3329, %3328
  %3331 = icmp eq i32 %3330, 2
  %3332 = icmp ne i32 %3327, 0
  %3333 = xor i1 %3332, %3331
  %3334 = select i1 %3333, i64 10, i64 602
  %3335 = add i64 %3322, %3334
  br i1 %3333, label %block_40687e, label %block_406ace

block_40452a:                                     ; preds = %block_40451a
  %3336 = add i64 %1501, 7
  %3337 = inttoptr i64 %1451 to i32*
  store i32 0, i32* %3337
  br label %block_404531

block_405c72:                                     ; preds = %block_405c68, %block_405d5e
  %3338 = phi i64 [ %4570, %block_405c68 ], [ %3376, %block_405d5e ]
  %3339 = phi %struct.Memory* [ %2494, %block_405c68 ], [ %2699, %block_405d5e ]
  %3340 = inttoptr i64 %1415 to i32*
  %3341 = load i32, i32* %3340
  %3342 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %3343 = sub i32 %3341, %3342
  %3344 = lshr i32 %3343, 31
  %3345 = lshr i32 %3341, 31
  %3346 = lshr i32 %3342, 31
  %3347 = xor i32 %3346, %3345
  %3348 = xor i32 %3344, %3345
  %3349 = add nuw nsw i32 %3348, %3347
  %3350 = icmp eq i32 %3349, 2
  %3351 = icmp ne i32 %3344, 0
  %3352 = xor i1 %3351, %3350
  %3353 = select i1 %3352, i64 16, i64 255
  %3354 = add i64 %3338, %3353
  br i1 %3352, label %block_405c82, label %block_405d71

block_403df0:                                     ; preds = %block_403e5c, %block_403de9
  %3355 = phi i64 [ %55, %block_403de9 ], [ %3592, %block_403e5c ]
  %3356 = phi %struct.Memory* [ %147, %block_403de9 ], [ %4884, %block_403e5c ]
  %3357 = inttoptr i64 %29 to i32*
  %3358 = load i32, i32* %3357
  %3359 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %3360 = sub i32 %3358, %3359
  %3361 = lshr i32 %3360, 31
  %3362 = lshr i32 %3358, 31
  %3363 = lshr i32 %3359, 31
  %3364 = xor i32 %3363, %3362
  %3365 = xor i32 %3361, %3362
  %3366 = add nuw nsw i32 %3365, %3364
  %3367 = icmp eq i32 %3366, 2
  %3368 = icmp ne i32 %3361, 0
  %3369 = xor i1 %3368, %3367
  %3370 = select i1 %3369, i64 16, i64 127
  %3371 = add i64 %3355, %3370
  br i1 %3369, label %block_403e00, label %block_403e6f

block_405d5e:                                     ; preds = %block_405c89
  %3372 = inttoptr i64 %1415 to i32*
  %3373 = load i32, i32* %3372
  %3374 = add i32 %3373, 1
  %3375 = inttoptr i64 %1415 to i32*
  store i32 %3374, i32* %3375
  %3376 = add i64 %2711, -236
  br label %block_405c72

block_40686d:                                     ; preds = %block_406197
  %3377 = add i64 %667, 7
  %3378 = inttoptr i64 %1418 to i32*
  store i32 0, i32* %3378
  br label %block_406874

block_40846c:                                     ; preds = %block_408462
  %3379 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  store double %3379, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %5, align 8, !tbaa !1240
  %3380 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %3380, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %3381 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  store double %3381, double* %4918, align 1, !tbaa !1264
  %3382 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3383 = add i32 %3382, -3
  %3384 = sext i32 %3383 to i64
  %3385 = mul nsw i64 %3384, 6760
  %3386 = add i64 %3385, ptrtoint (%frct_type* @frct to i64)
  %3387 = inttoptr i64 %4930 to i32*
  %3388 = load i32, i32* %3387
  %3389 = sext i32 %3388 to i64
  %3390 = mul nsw i64 %3389, 520
  %3391 = add i64 %3390, %3386
  %3392 = inttoptr i64 %4932 to i32*
  %3393 = load i32, i32* %3392
  %3394 = sext i32 %3393 to i64
  %3395 = mul nsw i64 %3394, 40
  %3396 = add i64 %3395, %3391
  %3397 = sext i32 %3552 to i64
  %3398 = shl nsw i64 %3397, 3
  %3399 = add i64 %3398, %3396
  %3400 = inttoptr i64 %3399 to double*
  %3401 = load double, double* %3400
  store double %3401, double* %4921, align 1, !tbaa !1264
  %3402 = load double, double* bitcast (%dssp_type* @dssp to double*)
  store double %3402, double* %4924, align 1, !tbaa !1264
  %3403 = add i32 %3382, -5
  %3404 = sext i32 %3403 to i64
  %3405 = mul nsw i64 %3404, 6760
  %3406 = add i64 %3405, ptrtoint (%rsd_type* @rsd to i64)
  %3407 = add i64 %3390, %3406
  %3408 = add i64 %3395, %3407
  %3409 = add i64 %3398, %3408
  %3410 = inttoptr i64 %3409 to double*
  %3411 = load double, double* %3410
  %3412 = add i32 %3382, -4
  %3413 = sext i32 %3412 to i64
  %3414 = mul nsw i64 %3413, 6760
  %3415 = add i64 %3414, ptrtoint (%rsd_type* @rsd to i64)
  %3416 = add i64 %3390, %3415
  %3417 = add i64 %3395, %3416
  %3418 = bitcast double %3380 to <2 x i32>
  %3419 = extractelement <2 x i32> %3418, i32 0
  store i32 %3419, i32* %1471, align 1, !tbaa !1292
  %3420 = extractelement <2 x i32> %3418, i32 1
  store i32 %3420, i32* %1473, align 1, !tbaa !1292
  store i32 0, i32* %1475, align 1, !tbaa !1292
  store i32 0, i32* %1477, align 1, !tbaa !1292
  %3421 = add i64 %3398, %3417
  %3422 = load double, double* %1478, align 1
  %3423 = inttoptr i64 %3421 to double*
  %3424 = load double, double* %3423
  %3425 = fmul double %3422, %3424
  store double %3425, double* %1478, align 1, !tbaa !1264
  %3426 = fsub double %3411, %3425
  %3427 = add i64 %3385, ptrtoint (%rsd_type* @rsd to i64)
  %3428 = add i64 %3390, %3427
  %3429 = add i64 %3395, %3428
  %3430 = add i64 %3398, %3429
  %3431 = load double, double* %4918, align 1
  %3432 = inttoptr i64 %3430 to double*
  %3433 = load double, double* %3432
  %3434 = fmul double %3431, %3433
  %3435 = fadd double %3426, %3434
  %3436 = add i32 %3382, -2
  %3437 = sext i32 %3436 to i64
  %3438 = mul nsw i64 %3437, 6760
  %3439 = load i64, i64* %5, align 8
  %3440 = add i64 %3438, %3439
  %3441 = add i64 %3390, %3440
  %3442 = add i64 %3395, %3441
  %3443 = load <2 x i32>, <2 x i32>* %1481, align 1
  %3444 = extractelement <2 x i32> %3443, i32 0
  store i32 %3444, i32* %1482, align 1, !tbaa !1292
  %3445 = extractelement <2 x i32> %3443, i32 1
  store i32 %3445, i32* %1484, align 1, !tbaa !1292
  %3446 = add i64 %3398, %3442
  %3447 = load double, double* %4918, align 1
  %3448 = inttoptr i64 %3446 to double*
  %3449 = load double, double* %3448
  %3450 = fmul double %3447, %3449
  %3451 = fsub double %3435, %3450
  store double %3451, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %3452 = load double, double* %4924, align 1
  %3453 = fmul double %3452, %3451
  %3454 = load double, double* %4921, align 1
  %3455 = fsub double %3454, %3453
  %3456 = add i64 %3385, ptrtoint (%frct_type* @frct to i64)
  %3457 = add i64 %3390, %3456
  %3458 = add i64 %3395, %3457
  %3459 = add i64 %3398, %3458
  %3460 = inttoptr i64 %3459 to double*
  store double %3455, double* %3460
  %3461 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3462 = add i32 %3461, -2
  %3463 = zext i32 %3462 to i64
  %3464 = sext i32 %3462 to i64
  %3465 = mul nsw i64 %3464, 6760
  %3466 = add i64 %3465, ptrtoint (%frct_type* @frct to i64)
  %3467 = inttoptr i64 %4930 to i32*
  %3468 = load i32, i32* %3467
  %3469 = sext i32 %3468 to i64
  %3470 = mul nsw i64 %3469, 520
  %3471 = add i64 %3470, %3466
  %3472 = inttoptr i64 %4932 to i32*
  %3473 = load i32, i32* %3472
  %3474 = sext i32 %3473 to i64
  %3475 = mul nsw i64 %3474, 40
  %3476 = add i64 %3475, %3471
  %3477 = inttoptr i64 %4936 to i32*
  %3478 = load i32, i32* %3477
  %3479 = sext i32 %3478 to i64
  %3480 = shl nsw i64 %3479, 3
  %3481 = add i64 %3480, %3476
  %3482 = inttoptr i64 %3481 to double*
  %3483 = load double, double* %3482
  %3484 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %3485 = add i32 %3461, -4
  %3486 = sext i32 %3485 to i64
  %3487 = mul nsw i64 %3486, 6760
  %3488 = add i64 %3487, %3439
  %3489 = add i64 %3470, %3488
  %3490 = add i64 %3475, %3489
  %3491 = add i64 %3480, %3490
  %3492 = inttoptr i64 %3491 to double*
  %3493 = load double, double* %3492
  %3494 = add i32 %3461, -3
  %3495 = sext i32 %3494 to i64
  %3496 = mul nsw i64 %3495, 6760
  %3497 = load i64, i64* %5, align 8
  %3498 = add i64 %3496, %3497
  %3499 = add i64 %3470, %3498
  %3500 = add i64 %3475, %3499
  store i64 %3500, i64* %4903, align 8, !tbaa !1240
  %3501 = add i64 %3480, %3500
  %3502 = load double, double* %4911, align 1
  %3503 = inttoptr i64 %3501 to double*
  %3504 = load double, double* %3503
  %3505 = fmul double %3502, %3504
  store double %3505, double* %4911, align 1, !tbaa !1264
  %3506 = fsub double %3493, %3505
  %3507 = add i64 %3465, %3497
  %3508 = add i64 %3470, %3507
  %3509 = add i64 %3475, %3508
  store i64 %3479, i64* %6, align 8, !tbaa !1240
  %3510 = add i64 %3480, %3509
  %3511 = load double, double* %39, align 1
  %3512 = inttoptr i64 %3510 to double*
  %3513 = load double, double* %3512
  %3514 = fmul double %3511, %3513
  store double %3514, double* %39, align 1, !tbaa !1264
  %3515 = fadd double %3506, %3514
  store double %3515, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %3516 = fmul double %3484, %3515
  store double %3516, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %3517 = fsub double %3483, %3516
  store double %3517, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  store i64 %3463, i64* %4902, align 8, !tbaa !1240
  %3518 = add i64 %3465, ptrtoint (%frct_type* @frct to i64)
  %3519 = add i64 %3470, %3518
  %3520 = add i64 %3475, %3519
  store i64 %3479, i64* %5, align 8, !tbaa !1240
  %3521 = add i64 %3480, %3520
  %3522 = inttoptr i64 %3521 to double*
  store double %3517, double* %3522
  %3523 = inttoptr i64 %4936 to i32*
  %3524 = load i32, i32* %3523
  %3525 = add i32 %3524, 1
  %3526 = inttoptr i64 %4936 to i32*
  store i32 %3525, i32* %3526
  br label %block_408462

block_403ee1:                                     ; preds = %block_403ed1
  %3527 = sitofp i32 %2275 to double
  %3528 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %3529 = add i32 %3528, -1
  %3530 = sitofp i32 %3529 to double
  store double %3530, double* %4911, align 1, !tbaa !1264
  %3531 = fdiv double %3527, %3530
  store double %3531, double* %39, align 1, !tbaa !1264
  store i64 %2271, i64* %32, align 1, !tbaa !1264
  %3532 = inttoptr i64 %4913 to double*
  store double %3531, double* %3532
  %3533 = add i64 %2288, 37
  %3534 = inttoptr i64 %29 to i32*
  store i32 0, i32* %3534
  br label %block_403f06

block_408011:                                     ; preds = %block_407936
  %3535 = inttoptr i64 %4936 to i32*
  store i32 0, i32* %3535
  br label %block_408018

block_404531:                                     ; preds = %block_40452a, %block_40453b
  %3536 = phi i64 [ %3336, %block_40452a ], [ %1388, %block_40453b ]
  %3537 = phi %struct.Memory* [ %1486, %block_40452a ], [ %3537, %block_40453b ]
  %3538 = inttoptr i64 %1451 to i32*
  %3539 = load i32, i32* %3538
  %3540 = add i32 %3539, -5
  %3541 = lshr i32 %3540, 31
  %3542 = lshr i32 %3539, 31
  %3543 = xor i32 %3541, %3542
  %3544 = add nuw nsw i32 %3543, %3542
  %3545 = icmp eq i32 %3544, 2
  %3546 = icmp ne i32 %3541, 0
  %3547 = xor i1 %3546, %3545
  %3548 = select i1 %3547, i64 10, i64 213
  %3549 = add i64 %3536, %3548
  br i1 %3547, label %block_40453b, label %block_404606

block_408462:                                     ; preds = %block_408462.preheader, %block_40846c
  %3550 = phi %struct.Memory* [ %3550, %block_40846c ], [ %3571, %block_408462.preheader ]
  %3551 = inttoptr i64 %4936 to i32*
  %3552 = load i32, i32* %3551
  %3553 = add i32 %3552, -5
  %3554 = lshr i32 %3553, 31
  %3555 = lshr i32 %3552, 31
  %3556 = xor i32 %3554, %3555
  %3557 = add nuw nsw i32 %3556, %3555
  %3558 = icmp eq i32 %3557, 2
  %3559 = icmp ne i32 %3554, 0
  %3560 = xor i1 %3559, %3558
  br i1 %3560, label %block_40846c, label %block_408770

block_406cc0:                                     ; preds = %block_406af1
  %3561 = inttoptr i64 %1415 to i32*
  %3562 = load i32, i32* %3561
  %3563 = add i32 %3562, 1
  %3564 = inttoptr i64 %1415 to i32*
  store i32 %3563, i32* %3564
  %3565 = add i64 %1896, -491
  br label %block_406ad5

block_405861:                                     ; preds = %block_405553
  %3566 = inttoptr i64 %1438 to i32*
  %3567 = load i32, i32* %3566
  %3568 = add i32 %3567, 1
  %3569 = inttoptr i64 %1438 to i32*
  store i32 %3568, i32* %3569
  %3570 = add i64 %1301, -5900
  br label %block_404155

block_40825d:                                     ; preds = %block_408448, %block_408256
  %3571 = phi %struct.Memory* [ %2687, %block_408256 ], [ %3309, %block_408448 ]
  %3572 = inttoptr i64 %4933 to i32*
  %3573 = load i32, i32* %3572
  %3574 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3575 = add i32 %3574, -3
  %3576 = sub i32 %3573, %3575
  %3577 = lshr i32 %3576, 31
  %3578 = lshr i32 %3573, 31
  %3579 = lshr i32 %3575, 31
  %3580 = xor i32 %3579, %3578
  %3581 = xor i32 %3577, %3578
  %3582 = add nuw nsw i32 %3581, %3580
  %3583 = icmp eq i32 %3582, 2
  %3584 = icmp ne i32 %3577, 0
  %3585 = xor i1 %3584, %3583
  %3586 = inttoptr i64 %4936 to i32*
  store i32 0, i32* %3586
  br i1 %3585, label %block_408279.preheader, label %block_408462.preheader

block_408279.preheader:                           ; preds = %block_40825d
  br label %block_408279

block_408462.preheader:                           ; preds = %block_40825d
  %3587 = zext i32 %3575 to i64
  store i64 %3587, i64* %5, align 8
  br label %block_408462

block_403e5c:                                     ; preds = %block_403e07
  %3588 = inttoptr i64 %29 to i32*
  %3589 = load i32, i32* %3588
  %3590 = add i32 %3589, 1
  %3591 = inttoptr i64 %29 to i32*
  store i32 %3590, i32* %3591
  %3592 = add i64 %4896, -108
  br label %block_403df0

block_40416c:                                     ; preds = %block_404165, %block_40417c
  %3593 = phi i64 [ %2610, %block_404165 ], [ %2492, %block_40417c ]
  %3594 = phi %struct.Memory* [ %1272, %block_404165 ], [ %3594, %block_40417c ]
  %3595 = inttoptr i64 %1439 to i32*
  %3596 = load i32, i32* %3595
  %3597 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %3598 = sub i32 %3596, %3597
  %3599 = lshr i32 %3598, 31
  %3600 = lshr i32 %3596, 31
  %3601 = lshr i32 %3597, 31
  %3602 = xor i32 %3601, %3600
  %3603 = xor i32 %3599, %3600
  %3604 = add nuw nsw i32 %3603, %3602
  %3605 = icmp eq i32 %3604, 2
  %3606 = icmp ne i32 %3599, 0
  %3607 = xor i1 %3606, %3605
  %3608 = select i1 %3607, i64 16, i64 932
  %3609 = add i64 %3593, %3608
  br i1 %3607, label %block_40417c, label %block_404510

block_407059:                                     ; preds = %block_407049
  %3610 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %3610, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %3611 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %3611, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %5, align 8, !tbaa !1240
  %3612 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %3612, double* %4918, align 1, !tbaa !1264
  %3613 = sext i32 %3833 to i64
  %3614 = mul nsw i64 %3613, 6760
  %3615 = add i64 %3614, ptrtoint (%rsd_type* @rsd to i64)
  %3616 = inttoptr i64 %4930 to i32*
  %3617 = load i32, i32* %3616
  %3618 = sext i32 %3617 to i64
  %3619 = mul nsw i64 %3618, 520
  %3620 = add i64 %3619, %3615
  %3621 = inttoptr i64 %4932 to i32*
  %3622 = load i32, i32* %3621
  %3623 = sext i32 %3622 to i64
  %3624 = mul nsw i64 %3623, 40
  %3625 = add i64 %3624, %3620
  %3626 = add i64 %3625, 24
  %3627 = inttoptr i64 %3626 to double*
  %3628 = load double, double* %3627
  %3629 = mul nsw i64 %3613, 40
  %3630 = add i64 %3629, ptrtoint (%flux_type* @flux to i64)
  %3631 = inttoptr i64 %3630 to double*
  store double %3628, double* %3631
  %3632 = inttoptr i64 %4933 to i32*
  %3633 = load i32, i32* %3632
  %3634 = sext i32 %3633 to i64
  %3635 = mul nsw i64 %3634, 6760
  %3636 = add i64 %3635, ptrtoint (%rsd_type* @rsd to i64)
  %3637 = inttoptr i64 %4930 to i32*
  %3638 = load i32, i32* %3637
  %3639 = sext i32 %3638 to i64
  %3640 = mul nsw i64 %3639, 520
  %3641 = add i64 %3640, %3636
  %3642 = inttoptr i64 %4932 to i32*
  %3643 = load i32, i32* %3642
  %3644 = sext i32 %3643 to i64
  %3645 = mul nsw i64 %3644, 40
  %3646 = add i64 %3645, %3641
  %3647 = add i64 %3646, 24
  %3648 = inttoptr i64 %3647 to double*
  %3649 = load double, double* %3648
  %3650 = inttoptr i64 %3646 to double*
  %3651 = load double, double* %3650
  %3652 = fdiv double %3649, %3651
  %3653 = inttoptr i64 %4934 to double*
  store double %3652, double* %3653
  %3654 = inttoptr i64 %4933 to i32*
  %3655 = load i32, i32* %3654
  %3656 = sext i32 %3655 to i64
  %3657 = mul nsw i64 %3656, 6760
  %3658 = add i64 %3657, ptrtoint (%rsd_type* @rsd to i64)
  %3659 = inttoptr i64 %4930 to i32*
  %3660 = load i32, i32* %3659
  %3661 = sext i32 %3660 to i64
  %3662 = mul nsw i64 %3661, 520
  %3663 = add i64 %3662, %3658
  %3664 = inttoptr i64 %4932 to i32*
  %3665 = load i32, i32* %3664
  %3666 = sext i32 %3665 to i64
  %3667 = mul nsw i64 %3666, 40
  %3668 = add i64 %3667, %3663
  %3669 = add i64 %3668, 8
  %3670 = inttoptr i64 %3669 to double*
  %3671 = load double, double* %3670
  %3672 = fmul double %3671, %3671
  %3673 = add i64 %3668, 16
  %3674 = inttoptr i64 %3673 to double*
  %3675 = load double, double* %3674
  %3676 = load i64, i64* %5, align 8
  %3677 = add i64 %3657, %3676
  %3678 = add i64 %3662, %3677
  %3679 = add i64 %3667, %3678
  %3680 = add i64 %3679, 16
  %3681 = inttoptr i64 %3680 to double*
  %3682 = load double, double* %3681
  %3683 = fmul double %3675, %3682
  %3684 = fadd double %3672, %3683
  %3685 = add i64 %3679, 24
  %3686 = inttoptr i64 %3685 to double*
  %3687 = load double, double* %3686
  %3688 = fmul double %3687, %3687
  %3689 = fadd double %3684, %3688
  %3690 = load double, double* %4918, align 1
  %3691 = fmul double %3690, %3689
  %3692 = inttoptr i64 %3679 to double*
  %3693 = load double, double* %3692
  %3694 = fdiv double %3691, %3693
  %3695 = inttoptr i64 %4935 to double*
  store double %3694, double* %3695
  %3696 = inttoptr i64 %4933 to i32*
  %3697 = load i32, i32* %3696
  %3698 = sext i32 %3697 to i64
  %3699 = mul nsw i64 %3698, 6760
  %3700 = add i64 %3699, %3676
  %3701 = inttoptr i64 %4930 to i32*
  %3702 = load i32, i32* %3701
  %3703 = sext i32 %3702 to i64
  %3704 = mul nsw i64 %3703, 520
  %3705 = add i64 %3704, %3700
  %3706 = inttoptr i64 %4932 to i32*
  %3707 = load i32, i32* %3706
  %3708 = sext i32 %3707 to i64
  %3709 = mul nsw i64 %3708, 40
  %3710 = add i64 %3709, %3705
  %3711 = add i64 %3710, 8
  %3712 = inttoptr i64 %3711 to double*
  %3713 = load double, double* %3712
  %3714 = inttoptr i64 %4934 to double*
  %3715 = load double, double* %3714
  %3716 = fmul double %3713, %3715
  %3717 = mul nsw i64 %3698, 40
  %3718 = add i64 %3717, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %3719 = inttoptr i64 %3718 to double*
  store double %3716, double* %3719
  %3720 = inttoptr i64 %4933 to i32*
  %3721 = load i32, i32* %3720
  %3722 = sext i32 %3721 to i64
  %3723 = mul nsw i64 %3722, 6760
  %3724 = add i64 %3723, %3676
  %3725 = inttoptr i64 %4930 to i32*
  %3726 = load i32, i32* %3725
  %3727 = sext i32 %3726 to i64
  %3728 = mul nsw i64 %3727, 520
  %3729 = add i64 %3728, %3724
  %3730 = inttoptr i64 %4932 to i32*
  %3731 = load i32, i32* %3730
  %3732 = sext i32 %3731 to i64
  %3733 = mul nsw i64 %3732, 40
  %3734 = add i64 %3733, %3729
  %3735 = add i64 %3734, 16
  %3736 = inttoptr i64 %3735 to double*
  %3737 = load double, double* %3736
  %3738 = inttoptr i64 %4934 to double*
  %3739 = load double, double* %3738
  %3740 = fmul double %3737, %3739
  %3741 = mul nsw i64 %3722, 40
  %3742 = add i64 %3741, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %3743 = inttoptr i64 %3742 to double*
  store double %3740, double* %3743
  %3744 = inttoptr i64 %4933 to i32*
  %3745 = load i32, i32* %3744
  %3746 = sext i32 %3745 to i64
  %3747 = mul nsw i64 %3746, 6760
  %3748 = load i64, i64* %5, align 8
  %3749 = add i64 %3747, %3748
  %3750 = inttoptr i64 %4930 to i32*
  %3751 = load i32, i32* %3750
  %3752 = sext i32 %3751 to i64
  %3753 = mul nsw i64 %3752, 520
  %3754 = add i64 %3753, %3749
  %3755 = inttoptr i64 %4932 to i32*
  %3756 = load i32, i32* %3755
  %3757 = sext i32 %3756 to i64
  %3758 = mul nsw i64 %3757, 40
  %3759 = add i64 %3758, %3754
  %3760 = add i64 %3759, 24
  %3761 = inttoptr i64 %3760 to double*
  %3762 = load double, double* %3761
  %3763 = inttoptr i64 %4934 to double*
  %3764 = load double, double* %3763
  %3765 = fmul double %3762, %3764
  %3766 = add i64 %3759, 32
  %3767 = inttoptr i64 %3766 to double*
  %3768 = load double, double* %3767
  %3769 = inttoptr i64 %4935 to double*
  %3770 = load double, double* %3769
  %3771 = fsub double %3768, %3770
  store double %3771, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %3772 = load <2 x i32>, <2 x i32>* %1443, align 1
  %3773 = load <2 x i32>, <2 x i32>* %1444, align 1
  %3774 = extractelement <2 x i32> %3772, i32 0
  store i32 %3774, i32* %1445, align 1, !tbaa !1292
  %3775 = extractelement <2 x i32> %3772, i32 1
  store i32 %3775, i32* %1447, align 1, !tbaa !1292
  %3776 = extractelement <2 x i32> %3773, i32 0
  store i32 %3776, i32* %1448, align 1, !tbaa !1292
  %3777 = extractelement <2 x i32> %3773, i32 1
  store i32 %3777, i32* %1450, align 1, !tbaa !1292
  %3778 = load double, double* %4924, align 1
  %3779 = fmul double %3778, %3771
  store double %3779, double* %4924, align 1, !tbaa !1264
  %3780 = fadd double %3765, %3779
  store double %3780, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %3781 = mul nsw i64 %3746, 40
  %3782 = add i64 %3781, ptrtoint (%flux_type* @flux to i64)
  store i64 %3782, i64* %6, align 8, !tbaa !1240
  %3783 = add i64 %3781, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %3784 = inttoptr i64 %3783 to double*
  store double %3780, double* %3784
  %3785 = inttoptr i64 %4933 to i32*
  %3786 = load i32, i32* %3785
  %3787 = sext i32 %3786 to i64
  %3788 = mul nsw i64 %3787, 6760
  %3789 = add i64 %3788, %3748
  %3790 = inttoptr i64 %4930 to i32*
  %3791 = load i32, i32* %3790
  %3792 = sext i32 %3791 to i64
  %3793 = mul nsw i64 %3792, 520
  %3794 = add i64 %3793, %3789
  %3795 = inttoptr i64 %4932 to i32*
  %3796 = load i32, i32* %3795
  %3797 = sext i32 %3796 to i64
  %3798 = mul nsw i64 %3797, 40
  store i64 %3798, i64* %4902, align 8, !tbaa !1240
  %3799 = add i64 %3798, %3794
  %3800 = add i64 %3799, 32
  %3801 = load double, double* %4911, align 1
  %3802 = inttoptr i64 %3800 to double*
  %3803 = load double, double* %3802
  %3804 = fmul double %3801, %3803
  %3805 = bitcast <2 x i32> %3772 to double
  %3806 = inttoptr i64 %4935 to double*
  %3807 = load double, double* %3806
  %3808 = fmul double %3805, %3807
  store double %3808, double* %39, align 1, !tbaa !1264
  store <2 x i32> %3773, <2 x i32>* %4946, align 1, !tbaa !1264
  %3809 = fsub double %3804, %3808
  %3810 = inttoptr i64 %4934 to double*
  %3811 = load double, double* %3810
  %3812 = fmul double %3809, %3811
  store double %3812, double* %4911, align 1, !tbaa !1264
  %3813 = mul nsw i64 %3787, 40
  %3814 = add i64 %3813, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %3815 = inttoptr i64 %3814 to double*
  store double %3812, double* %3815
  %3816 = inttoptr i64 %4933 to i32*
  %3817 = load i32, i32* %3816
  %3818 = add i32 %3817, 1
  %3819 = inttoptr i64 %4933 to i32*
  store i32 %3818, i32* %3819
  br label %block_407049

block_408256:                                     ; preds = %block_408018
  %3820 = inttoptr i64 %4933 to i32*
  store i32 3, i32* %3820
  br label %block_40825d

block_406fe8:                                     ; preds = %block_406cda
  %3821 = inttoptr i64 %1414 to i32*
  %3822 = load i32, i32* %3821
  %3823 = add i32 %3822, 1
  %3824 = inttoptr i64 %1414 to i32*
  store i32 %3823, i32* %3824
  %3825 = add i64 %2055, -5947
  br label %block_4058ad

block_403e6f:                                     ; preds = %block_403df0
  %3826 = inttoptr i64 %28 to i32*
  %3827 = load i32, i32* %3826
  %3828 = add i32 %3827, 1
  %3829 = inttoptr i64 %28 to i32*
  store i32 %3828, i32* %3829
  %3830 = add i64 %3371, -150
  br label %block_403dd9

block_407049:                                     ; preds = %block_407042, %block_407059
  %3831 = phi %struct.Memory* [ %4572, %block_407042 ], [ %3831, %block_407059 ]
  %3832 = inttoptr i64 %4933 to i32*
  %3833 = load i32, i32* %3832
  %3834 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %3835 = sub i32 %3833, %3834
  %3836 = lshr i32 %3835, 31
  %3837 = lshr i32 %3833, 31
  %3838 = lshr i32 %3834, 31
  %3839 = xor i32 %3838, %3837
  %3840 = xor i32 %3836, %3837
  %3841 = add nuw nsw i32 %3840, %3839
  %3842 = icmp eq i32 %3841, 2
  %3843 = icmp ne i32 %3836, 0
  %3844 = xor i1 %3843, %3842
  br i1 %3844, label %block_407059, label %block_4073ed

block_408448:                                     ; preds = %block_408279
  %3845 = inttoptr i64 %4933 to i32*
  %3846 = load i32, i32* %3845
  %3847 = add i32 %3846, 1
  %3848 = inttoptr i64 %4933 to i32*
  store i32 %3847, i32* %3848
  br label %block_40825d

block_4073ed:                                     ; preds = %block_407049
  %3849 = inttoptr i64 %4933 to i32*
  store i32 1, i32* %3849
  br label %block_4073f4

block_407042:                                     ; preds = %block_407032
  %3850 = inttoptr i64 %4933 to i32*
  store i32 0, i32* %3850
  br label %block_407049

block_406ad5:                                     ; preds = %block_406ace, %block_406cc0
  %3851 = phi i64 [ %4609, %block_406ace ], [ %3565, %block_406cc0 ]
  %3852 = phi %struct.Memory* [ %3323, %block_406ace ], [ %1884, %block_406cc0 ]
  %3853 = inttoptr i64 %1415 to i32*
  %3854 = load i32, i32* %3853
  %3855 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %3856 = add i32 %3855, -3
  %3857 = sub i32 %3854, %3856
  %3858 = lshr i32 %3857, 31
  %3859 = lshr i32 %3854, 31
  %3860 = lshr i32 %3856, 31
  %3861 = xor i32 %3860, %3859
  %3862 = xor i32 %3858, %3859
  %3863 = add nuw nsw i32 %3862, %3861
  %3864 = icmp eq i32 %3863, 2
  %3865 = icmp ne i32 %3858, 0
  %3866 = xor i1 %3865, %3864
  %3867 = select i1 %3866, i64 21, i64 510
  %3868 = add i64 %3851, %3867
  %3869 = add i64 %3868, 7
  %3870 = inttoptr i64 %1418 to i32*
  store i32 0, i32* %3870
  br i1 %3866, label %block_406af1.preheader, label %block_406cda.preheader

block_406cda.preheader:                           ; preds = %block_406ad5
  br label %block_406cda

block_406af1.preheader:                           ; preds = %block_406ad5
  br label %block_406af1

block_404a3d:                                     ; preds = %block_404a2d
  %3871 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %3871, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  store i64 ptrtoint (%flux_type* @flux to i64), i64* %4902, align 8, !tbaa !1240
  %3872 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %3872, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %3873 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %3873, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %3874 = inttoptr i64 %1437 to i32*
  %3875 = load i32, i32* %3874
  %3876 = sext i32 %3875 to i64
  %3877 = mul nsw i64 %3876, 6760
  %3878 = add i64 %3877, ptrtoint (%frct_type* @frct to i64)
  %3879 = inttoptr i64 %1438 to i32*
  %3880 = load i32, i32* %3879
  %3881 = sext i32 %3880 to i64
  %3882 = mul nsw i64 %3881, 520
  %3883 = add i64 %3882, %3878
  %3884 = sext i32 %4589 to i64
  %3885 = mul nsw i64 %3884, 40
  %3886 = add i64 %3885, %3883
  %3887 = inttoptr i64 %3886 to double*
  %3888 = load double, double* %3887
  %3889 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  %3890 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3891 = fmul double %3889, %3890
  %3892 = add i64 %3877, ptrtoint (%rsd_type* @rsd to i64)
  %3893 = add i64 %3882, %3892
  %3894 = add i32 %4589, -1
  %3895 = sext i32 %3894 to i64
  %3896 = mul nsw i64 %3895, 40
  %3897 = add i64 %3896, %3893
  %3898 = inttoptr i64 %3897 to double*
  %3899 = load double, double* %3898
  %3900 = add i64 %3885, %3893
  %3901 = bitcast double %3871 to <2 x i32>
  %3902 = extractelement <2 x i32> %3901, i32 0
  store i32 %3902, i32* %1471, align 1, !tbaa !1292
  %3903 = extractelement <2 x i32> %3901, i32 1
  store i32 %3903, i32* %1473, align 1, !tbaa !1292
  %3904 = load double, double* %1478, align 1
  %3905 = inttoptr i64 %3900 to double*
  %3906 = load double, double* %3905
  %3907 = fmul double %3904, %3906
  %3908 = fsub double %3899, %3907
  %3909 = add i32 %4589, 1
  %3910 = sext i32 %3909 to i64
  %3911 = mul nsw i64 %3910, 40
  %3912 = add i64 %3911, %3893
  %3913 = inttoptr i64 %3912 to double*
  %3914 = load double, double* %3913
  %3915 = fadd double %3908, %3914
  %3916 = fmul double %3891, %3915
  %3917 = fadd double %3888, %3916
  %3918 = add i64 %3877, ptrtoint (%frct_type* @frct to i64)
  %3919 = add i64 %3882, %3918
  %3920 = add i64 %3885, %3919
  %3921 = inttoptr i64 %3920 to double*
  store double %3917, double* %3921
  %3922 = inttoptr i64 %1437 to i32*
  %3923 = load i32, i32* %3922
  %3924 = sext i32 %3923 to i64
  %3925 = mul nsw i64 %3924, 6760
  %3926 = add i64 %3925, ptrtoint (%frct_type* @frct to i64)
  %3927 = inttoptr i64 %1438 to i32*
  %3928 = load i32, i32* %3927
  %3929 = sext i32 %3928 to i64
  %3930 = mul nsw i64 %3929, 520
  %3931 = add i64 %3930, %3926
  %3932 = inttoptr i64 %1439 to i32*
  %3933 = load i32, i32* %3932
  %3934 = sext i32 %3933 to i64
  %3935 = mul nsw i64 %3934, 40
  %3936 = add i64 %3935, %3931
  %3937 = add i64 %3936, 8
  %3938 = inttoptr i64 %3937 to double*
  %3939 = load double, double* %3938
  %3940 = load <2 x i32>, <2 x i32>* %1479, align 1
  %3941 = extractelement <2 x i32> %3940, i32 0
  store i32 %3941, i32* %1445, align 1, !tbaa !1292
  %3942 = extractelement <2 x i32> %3940, i32 1
  store i32 %3942, i32* %1447, align 1, !tbaa !1292
  %3943 = load double, double* %4924, align 1
  %3944 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %3945 = fmul double %3943, %3944
  %3946 = load double, double* %4911, align 1
  %3947 = fmul double %3945, %3946
  %3948 = add i32 %3933, 1
  %3949 = sext i32 %3948 to i64
  %3950 = mul nsw i64 %3949, 40
  %3951 = load i64, i64* %4902, align 8
  %3952 = add i64 %3950, %3951
  %3953 = add i64 %3952, 8
  %3954 = inttoptr i64 %3953 to double*
  %3955 = load double, double* %3954
  %3956 = add i64 %3935, %3951
  %3957 = add i64 %3956, 8
  %3958 = inttoptr i64 %3957 to double*
  %3959 = load double, double* %3958
  %3960 = fsub double %3955, %3959
  %3961 = fmul double %3947, %3960
  %3962 = fadd double %3939, %3961
  %3963 = load double, double* bitcast (%dx2_type* @dx2 to double*)
  %3964 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %3965 = fmul double %3963, %3964
  %3966 = add i64 %3925, ptrtoint (%rsd_type* @rsd to i64)
  %3967 = add i64 %3930, %3966
  %3968 = add i32 %3933, -1
  %3969 = sext i32 %3968 to i64
  %3970 = mul nsw i64 %3969, 40
  %3971 = add i64 %3970, %3967
  %3972 = add i64 %3971, 8
  %3973 = inttoptr i64 %3972 to double*
  %3974 = load double, double* %3973
  %3975 = add i64 %3935, %3967
  %3976 = load <2 x i32>, <2 x i32>* %1443, align 1
  %3977 = extractelement <2 x i32> %3976, i32 0
  store i32 %3977, i32* %1471, align 1, !tbaa !1292
  %3978 = extractelement <2 x i32> %3976, i32 1
  store i32 %3978, i32* %1473, align 1, !tbaa !1292
  %3979 = add i64 %3975, 8
  %3980 = load double, double* %1478, align 1
  %3981 = inttoptr i64 %3979 to double*
  %3982 = load double, double* %3981
  %3983 = fmul double %3980, %3982
  %3984 = fsub double %3974, %3983
  %3985 = add i64 %3950, %3967
  %3986 = add i64 %3985, 8
  %3987 = inttoptr i64 %3986 to double*
  %3988 = load double, double* %3987
  %3989 = fadd double %3984, %3988
  %3990 = fmul double %3965, %3989
  %3991 = fadd double %3962, %3990
  %3992 = add i64 %3925, ptrtoint (%frct_type* @frct to i64)
  %3993 = add i64 %3930, %3992
  %3994 = add i64 %3935, %3993
  %3995 = add i64 %3994, 8
  %3996 = inttoptr i64 %3995 to double*
  store double %3991, double* %3996
  %3997 = inttoptr i64 %1437 to i32*
  %3998 = load i32, i32* %3997
  %3999 = sext i32 %3998 to i64
  %4000 = mul nsw i64 %3999, 6760
  %4001 = add i64 %4000, ptrtoint (%frct_type* @frct to i64)
  %4002 = inttoptr i64 %1438 to i32*
  %4003 = load i32, i32* %4002
  %4004 = sext i32 %4003 to i64
  %4005 = mul nsw i64 %4004, 520
  %4006 = add i64 %4005, %4001
  %4007 = inttoptr i64 %1439 to i32*
  %4008 = load i32, i32* %4007
  %4009 = sext i32 %4008 to i64
  %4010 = mul nsw i64 %4009, 40
  %4011 = add i64 %4010, %4006
  %4012 = add i64 %4011, 16
  %4013 = inttoptr i64 %4012 to double*
  %4014 = load double, double* %4013
  %4015 = load <2 x i32>, <2 x i32>* %1479, align 1
  %4016 = extractelement <2 x i32> %4015, i32 0
  store i32 %4016, i32* %1445, align 1, !tbaa !1292
  %4017 = extractelement <2 x i32> %4015, i32 1
  store i32 %4017, i32* %1447, align 1, !tbaa !1292
  %4018 = load double, double* %4924, align 1
  %4019 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4020 = fmul double %4018, %4019
  %4021 = load double, double* %4911, align 1
  %4022 = fmul double %4020, %4021
  %4023 = add i32 %4008, 1
  %4024 = sext i32 %4023 to i64
  %4025 = mul nsw i64 %4024, 40
  %4026 = load i64, i64* %4902, align 8
  %4027 = add i64 %4025, %4026
  %4028 = add i64 %4027, 16
  %4029 = inttoptr i64 %4028 to double*
  %4030 = load double, double* %4029
  %4031 = add i64 %4010, %4026
  %4032 = add i64 %4031, 16
  %4033 = inttoptr i64 %4032 to double*
  %4034 = load double, double* %4033
  %4035 = fsub double %4030, %4034
  %4036 = fmul double %4022, %4035
  %4037 = fadd double %4014, %4036
  %4038 = load double, double* bitcast (%dx3_type* @dx3 to double*)
  %4039 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %4040 = fmul double %4038, %4039
  %4041 = add i64 %4000, ptrtoint (%rsd_type* @rsd to i64)
  %4042 = add i64 %4005, %4041
  %4043 = add i32 %4008, -1
  %4044 = sext i32 %4043 to i64
  %4045 = mul nsw i64 %4044, 40
  %4046 = add i64 %4045, %4042
  %4047 = add i64 %4046, 16
  %4048 = inttoptr i64 %4047 to double*
  %4049 = load double, double* %4048
  %4050 = add i64 %4010, %4042
  %4051 = load <2 x i32>, <2 x i32>* %1443, align 1
  %4052 = extractelement <2 x i32> %4051, i32 0
  store i32 %4052, i32* %1471, align 1, !tbaa !1292
  %4053 = extractelement <2 x i32> %4051, i32 1
  store i32 %4053, i32* %1473, align 1, !tbaa !1292
  %4054 = add i64 %4050, 16
  %4055 = load double, double* %1478, align 1
  %4056 = inttoptr i64 %4054 to double*
  %4057 = load double, double* %4056
  %4058 = fmul double %4055, %4057
  %4059 = fsub double %4049, %4058
  %4060 = add i64 %4025, %4042
  %4061 = add i64 %4060, 16
  %4062 = inttoptr i64 %4061 to double*
  %4063 = load double, double* %4062
  %4064 = fadd double %4059, %4063
  %4065 = fmul double %4040, %4064
  %4066 = fadd double %4037, %4065
  %4067 = add i64 %4000, ptrtoint (%frct_type* @frct to i64)
  %4068 = add i64 %4005, %4067
  %4069 = add i64 %4010, %4068
  %4070 = add i64 %4069, 16
  %4071 = inttoptr i64 %4070 to double*
  store double %4066, double* %4071
  %4072 = inttoptr i64 %1437 to i32*
  %4073 = load i32, i32* %4072
  %4074 = sext i32 %4073 to i64
  %4075 = mul nsw i64 %4074, 6760
  %4076 = add i64 %4075, ptrtoint (%frct_type* @frct to i64)
  %4077 = inttoptr i64 %1438 to i32*
  %4078 = load i32, i32* %4077
  %4079 = sext i32 %4078 to i64
  %4080 = mul nsw i64 %4079, 520
  %4081 = add i64 %4080, %4076
  %4082 = inttoptr i64 %1439 to i32*
  %4083 = load i32, i32* %4082
  %4084 = sext i32 %4083 to i64
  %4085 = mul nsw i64 %4084, 40
  %4086 = add i64 %4085, %4081
  %4087 = add i64 %4086, 24
  %4088 = inttoptr i64 %4087 to double*
  %4089 = load double, double* %4088
  %4090 = load <2 x i32>, <2 x i32>* %1479, align 1
  %4091 = extractelement <2 x i32> %4090, i32 0
  store i32 %4091, i32* %1445, align 1, !tbaa !1292
  %4092 = extractelement <2 x i32> %4090, i32 1
  store i32 %4092, i32* %1447, align 1, !tbaa !1292
  %4093 = load double, double* %4924, align 1
  %4094 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4095 = fmul double %4093, %4094
  %4096 = load double, double* %4911, align 1
  %4097 = fmul double %4095, %4096
  %4098 = add i32 %4083, 1
  %4099 = sext i32 %4098 to i64
  %4100 = mul nsw i64 %4099, 40
  %4101 = load i64, i64* %4902, align 8
  %4102 = add i64 %4100, %4101
  %4103 = add i64 %4102, 24
  %4104 = inttoptr i64 %4103 to double*
  %4105 = load double, double* %4104
  %4106 = add i64 %4085, %4101
  %4107 = add i64 %4106, 24
  %4108 = inttoptr i64 %4107 to double*
  %4109 = load double, double* %4108
  %4110 = fsub double %4105, %4109
  %4111 = fmul double %4097, %4110
  %4112 = fadd double %4089, %4111
  %4113 = load double, double* bitcast (%dx4_type* @dx4 to double*)
  %4114 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %4115 = fmul double %4113, %4114
  %4116 = add i64 %4075, ptrtoint (%rsd_type* @rsd to i64)
  %4117 = add i64 %4080, %4116
  %4118 = add i32 %4083, -1
  %4119 = sext i32 %4118 to i64
  %4120 = mul nsw i64 %4119, 40
  %4121 = add i64 %4120, %4117
  %4122 = add i64 %4121, 24
  %4123 = inttoptr i64 %4122 to double*
  %4124 = load double, double* %4123
  %4125 = add i64 %4085, %4117
  %4126 = load <2 x i32>, <2 x i32>* %1443, align 1
  %4127 = load <2 x i32>, <2 x i32>* %1444, align 1
  %4128 = extractelement <2 x i32> %4126, i32 0
  store i32 %4128, i32* %1471, align 1, !tbaa !1292
  %4129 = extractelement <2 x i32> %4126, i32 1
  store i32 %4129, i32* %1473, align 1, !tbaa !1292
  %4130 = extractelement <2 x i32> %4127, i32 0
  store i32 %4130, i32* %1475, align 1, !tbaa !1292
  %4131 = extractelement <2 x i32> %4127, i32 1
  store i32 %4131, i32* %1477, align 1, !tbaa !1292
  %4132 = add i64 %4125, 24
  %4133 = load double, double* %1478, align 1
  %4134 = inttoptr i64 %4132 to double*
  %4135 = load double, double* %4134
  %4136 = fmul double %4133, %4135
  store double %4136, double* %1478, align 1, !tbaa !1264
  %4137 = fsub double %4124, %4136
  %4138 = add i64 %4100, %4117
  %4139 = add i64 %4138, 24
  %4140 = inttoptr i64 %4139 to double*
  %4141 = load double, double* %4140
  %4142 = fadd double %4137, %4141
  store double %4142, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %4143 = fmul double %4115, %4142
  store double %4143, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %4144 = fadd double %4112, %4143
  %4145 = add i64 %4075, ptrtoint (%frct_type* @frct to i64)
  %4146 = add i64 %4080, %4145
  %4147 = add i64 %4085, %4146
  %4148 = add i64 %4147, 24
  %4149 = inttoptr i64 %4148 to double*
  store double %4144, double* %4149
  %4150 = inttoptr i64 %1437 to i32*
  %4151 = load i32, i32* %4150
  %4152 = sext i32 %4151 to i64
  %4153 = mul nsw i64 %4152, 6760
  %4154 = add i64 %4153, ptrtoint (%frct_type* @frct to i64)
  %4155 = inttoptr i64 %1438 to i32*
  %4156 = load i32, i32* %4155
  %4157 = sext i32 %4156 to i64
  %4158 = mul nsw i64 %4157, 520
  %4159 = add i64 %4158, %4154
  %4160 = inttoptr i64 %1439 to i32*
  %4161 = load i32, i32* %4160
  %4162 = sext i32 %4161 to i64
  %4163 = mul nsw i64 %4162, 40
  %4164 = add i64 %4163, %4159
  %4165 = add i64 %4164, 32
  %4166 = inttoptr i64 %4165 to double*
  %4167 = load double, double* %4166
  %4168 = load double, double* %4918, align 1
  %4169 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4170 = fmul double %4168, %4169
  %4171 = load double, double* %4911, align 1
  %4172 = fmul double %4170, %4171
  %4173 = add i32 %4161, 1
  %4174 = zext i32 %4173 to i64
  %4175 = sext i32 %4173 to i64
  %4176 = mul nsw i64 %4175, 40
  %4177 = load i64, i64* %4902, align 8
  %4178 = add i64 %4176, %4177
  store i64 %4178, i64* %4903, align 8, !tbaa !1240
  %4179 = add i64 %4178, 32
  %4180 = inttoptr i64 %4179 to double*
  %4181 = load double, double* %4180
  %4182 = add i64 %4163, %4177
  %4183 = add i64 %4182, 32
  %4184 = inttoptr i64 %4183 to double*
  %4185 = load double, double* %4184
  %4186 = fsub double %4181, %4185
  %4187 = fmul double %4172, %4186
  %4188 = fadd double %4167, %4187
  %4189 = load double, double* bitcast (%dx5_type* @dx5 to double*)
  %4190 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %4191 = fmul double %4189, %4190
  %4192 = add i64 %4153, ptrtoint (%rsd_type* @rsd to i64)
  %4193 = add i64 %4158, %4192
  %4194 = add i32 %4161, -1
  %4195 = sext i32 %4194 to i64
  %4196 = mul nsw i64 %4195, 40
  %4197 = add i64 %4196, %4193
  %4198 = add i64 %4197, 32
  %4199 = inttoptr i64 %4198 to double*
  %4200 = load double, double* %4199
  %4201 = add i64 %4163, %4193
  store i64 %4201, i64* %6, align 8, !tbaa !1240
  %4202 = add i64 %4201, 32
  %4203 = load double, double* %39, align 1
  %4204 = inttoptr i64 %4202 to double*
  %4205 = load double, double* %4204
  %4206 = fmul double %4203, %4205
  store double %4206, double* %39, align 1, !tbaa !1264
  %4207 = fsub double %4200, %4206
  store i64 %4174, i64* %4904, align 8, !tbaa !1240
  store i64 %4176, i64* %4902, align 8, !tbaa !1240
  %4208 = add i64 %4176, %4193
  %4209 = add i64 %4208, 32
  %4210 = inttoptr i64 %4209 to double*
  %4211 = load double, double* %4210
  %4212 = fadd double %4207, %4211
  store double %4212, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %4213 = fmul double %4191, %4212
  store double %4213, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %4214 = fadd double %4188, %4213
  store double %4214, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %4215 = add i64 %4153, ptrtoint (%frct_type* @frct to i64)
  %4216 = add i64 %4158, %4215
  %4217 = add i64 %4163, %4216
  %4218 = add i64 %4217, 32
  %4219 = inttoptr i64 %4218 to double*
  store double %4214, double* %4219
  %4220 = inttoptr i64 %1439 to i32*
  %4221 = load i32, i32* %4220
  %4222 = add i32 %4221, 1
  %4223 = inttoptr i64 %1439 to i32*
  store i32 %4222, i32* %4223
  %4224 = add i64 %4602, -16
  br label %block_404a2d

block_405d7b:                                     ; preds = %block_405d71, %block_405d8b
  %4225 = phi i64 [ %1115, %block_405d71 ], [ %1023, %block_405d8b ]
  %4226 = phi %struct.Memory* [ %3339, %block_405d71 ], [ %4226, %block_405d8b ]
  %4227 = inttoptr i64 %1415 to i32*
  %4228 = load i32, i32* %4227
  %4229 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %4230 = sub i32 %4228, %4229
  %4231 = lshr i32 %4230, 31
  %4232 = lshr i32 %4228, 31
  %4233 = lshr i32 %4229, 31
  %4234 = xor i32 %4233, %4232
  %4235 = xor i32 %4231, %4232
  %4236 = add nuw nsw i32 %4235, %4234
  %4237 = icmp eq i32 %4236, 2
  %4238 = icmp ne i32 %4231, 0
  %4239 = xor i1 %4238, %4237
  %4240 = select i1 %4239, i64 16, i64 1042
  %4241 = add i64 %4225, %4240
  br i1 %4239, label %block_405d8b, label %block_40618d

block_4040f6:                                     ; preds = %block_403f3b
  %4242 = inttoptr i64 %29 to i32*
  %4243 = load i32, i32* %4242
  %4244 = add i32 %4243, 1
  %4245 = inttoptr i64 %29 to i32*
  store i32 %4244, i32* %4245
  %4246 = add i64 %4825, -496
  br label %block_403f06

block_404633:                                     ; preds = %block_404623
  %4247 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1256) to double*)
  store double %4247, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  %4248 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1264) to double*)
  store double %4248, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  %4249 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1272) to double*)
  store double %4249, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  %4250 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  store double %4250, double* %4921, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4923, align 1, !tbaa !1264
  %4251 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %4251, double* %4924, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4926, align 1, !tbaa !1264
  %4252 = inttoptr i64 %1437 to i32*
  %4253 = load i32, i32* %4252
  %4254 = sext i32 %4253 to i64
  %4255 = mul nsw i64 %4254, 6760
  %4256 = add i64 %4255, ptrtoint (%rsd_type* @rsd to i64)
  %4257 = inttoptr i64 %1438 to i32*
  %4258 = load i32, i32* %4257
  %4259 = sext i32 %4258 to i64
  %4260 = mul nsw i64 %4259, 520
  %4261 = add i64 %4260, %4256
  %4262 = sext i32 %4614 to i64
  %4263 = mul nsw i64 %4262, 40
  %4264 = add i64 %4263, %4261
  %4265 = bitcast double %4251 to <2 x i32>
  %4266 = extractelement <2 x i32> %4265, i32 0
  store i32 %4266, i32* %1453, align 1, !tbaa !1292
  %4267 = extractelement <2 x i32> %4265, i32 1
  store i32 %4267, i32* %1455, align 1, !tbaa !1292
  %4268 = load double, double* %1460, align 1
  %4269 = inttoptr i64 %4264 to double*
  %4270 = load double, double* %4269
  %4271 = fdiv double %4268, %4270
  %4272 = inttoptr i64 %1461 to double*
  store double %4271, double* %4272
  %4273 = inttoptr i64 %1461 to double*
  %4274 = load double, double* %4273
  %4275 = inttoptr i64 %1437 to i32*
  %4276 = load i32, i32* %4275
  %4277 = sext i32 %4276 to i64
  %4278 = mul nsw i64 %4277, 6760
  %4279 = add i64 %4278, ptrtoint (%rsd_type* @rsd to i64)
  %4280 = inttoptr i64 %1438 to i32*
  %4281 = load i32, i32* %4280
  %4282 = sext i32 %4281 to i64
  %4283 = mul nsw i64 %4282, 520
  %4284 = add i64 %4283, %4279
  %4285 = inttoptr i64 %1439 to i32*
  %4286 = load i32, i32* %4285
  %4287 = sext i32 %4286 to i64
  %4288 = mul nsw i64 %4287, 40
  %4289 = add i64 %4288, %4284
  %4290 = add i64 %4289, 8
  %4291 = inttoptr i64 %4290 to double*
  %4292 = load double, double* %4291
  %4293 = fmul double %4274, %4292
  %4294 = inttoptr i64 %1462 to double*
  store double %4293, double* %4294
  %4295 = inttoptr i64 %1461 to double*
  %4296 = load double, double* %4295
  %4297 = inttoptr i64 %1437 to i32*
  %4298 = load i32, i32* %4297
  %4299 = sext i32 %4298 to i64
  %4300 = mul nsw i64 %4299, 6760
  %4301 = add i64 %4300, ptrtoint (%rsd_type* @rsd to i64)
  %4302 = inttoptr i64 %1438 to i32*
  %4303 = load i32, i32* %4302
  %4304 = sext i32 %4303 to i64
  %4305 = mul nsw i64 %4304, 520
  %4306 = add i64 %4305, %4301
  %4307 = inttoptr i64 %1439 to i32*
  %4308 = load i32, i32* %4307
  %4309 = sext i32 %4308 to i64
  %4310 = mul nsw i64 %4309, 40
  %4311 = add i64 %4310, %4306
  %4312 = add i64 %4311, 16
  %4313 = inttoptr i64 %4312 to double*
  %4314 = load double, double* %4313
  %4315 = fmul double %4296, %4314
  %4316 = inttoptr i64 %1463 to double*
  store double %4315, double* %4316
  %4317 = inttoptr i64 %1461 to double*
  %4318 = load double, double* %4317
  %4319 = inttoptr i64 %1437 to i32*
  %4320 = load i32, i32* %4319
  %4321 = sext i32 %4320 to i64
  %4322 = mul nsw i64 %4321, 6760
  %4323 = add i64 %4322, ptrtoint (%rsd_type* @rsd to i64)
  %4324 = inttoptr i64 %1438 to i32*
  %4325 = load i32, i32* %4324
  %4326 = sext i32 %4325 to i64
  %4327 = mul nsw i64 %4326, 520
  %4328 = add i64 %4327, %4323
  %4329 = inttoptr i64 %1439 to i32*
  %4330 = load i32, i32* %4329
  %4331 = sext i32 %4330 to i64
  %4332 = mul nsw i64 %4331, 40
  %4333 = add i64 %4332, %4328
  %4334 = add i64 %4333, 24
  %4335 = inttoptr i64 %4334 to double*
  %4336 = load double, double* %4335
  %4337 = fmul double %4318, %4336
  %4338 = inttoptr i64 %1464 to double*
  store double %4337, double* %4338
  %4339 = inttoptr i64 %1461 to double*
  %4340 = load double, double* %4339
  %4341 = inttoptr i64 %1437 to i32*
  %4342 = load i32, i32* %4341
  %4343 = sext i32 %4342 to i64
  %4344 = mul nsw i64 %4343, 6760
  %4345 = add i64 %4344, ptrtoint (%rsd_type* @rsd to i64)
  %4346 = inttoptr i64 %1438 to i32*
  %4347 = load i32, i32* %4346
  %4348 = sext i32 %4347 to i64
  %4349 = mul nsw i64 %4348, 520
  %4350 = add i64 %4349, %4345
  %4351 = inttoptr i64 %1439 to i32*
  %4352 = load i32, i32* %4351
  %4353 = sext i32 %4352 to i64
  %4354 = mul nsw i64 %4353, 40
  %4355 = add i64 %4354, %4350
  %4356 = add i64 %4355, 32
  %4357 = inttoptr i64 %4356 to double*
  %4358 = load double, double* %4357
  %4359 = fmul double %4340, %4358
  store double %4359, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %4360 = inttoptr i64 %1465 to double*
  store double %4359, double* %4360
  %4361 = inttoptr i64 %1437 to i32*
  %4362 = load i32, i32* %4361
  %4363 = sext i32 %4362 to i64
  %4364 = mul nsw i64 %4363, 6760
  %4365 = add i64 %4364, ptrtoint (%rsd_type* @rsd to i64)
  %4366 = inttoptr i64 %1438 to i32*
  %4367 = load i32, i32* %4366
  %4368 = sext i32 %4367 to i64
  %4369 = mul nsw i64 %4368, 520
  %4370 = add i64 %4369, %4365
  %4371 = inttoptr i64 %1439 to i32*
  %4372 = load i32, i32* %4371
  %4373 = add i32 %4372, -1
  %4374 = sext i32 %4373 to i64
  %4375 = mul nsw i64 %4374, 40
  %4376 = add i64 %4375, %4370
  %4377 = load double, double* %4924, align 1
  %4378 = inttoptr i64 %4376 to double*
  %4379 = load double, double* %4378
  %4380 = fdiv double %4377, %4379
  %4381 = inttoptr i64 %1461 to double*
  store double %4380, double* %4381
  %4382 = inttoptr i64 %1461 to double*
  %4383 = load double, double* %4382
  %4384 = inttoptr i64 %1437 to i32*
  %4385 = load i32, i32* %4384
  %4386 = sext i32 %4385 to i64
  %4387 = mul nsw i64 %4386, 6760
  %4388 = add i64 %4387, ptrtoint (%rsd_type* @rsd to i64)
  %4389 = inttoptr i64 %1438 to i32*
  %4390 = load i32, i32* %4389
  %4391 = sext i32 %4390 to i64
  %4392 = mul nsw i64 %4391, 520
  %4393 = add i64 %4392, %4388
  %4394 = inttoptr i64 %1439 to i32*
  %4395 = load i32, i32* %4394
  %4396 = add i32 %4395, -1
  %4397 = sext i32 %4396 to i64
  %4398 = mul nsw i64 %4397, 40
  %4399 = add i64 %4398, %4393
  %4400 = add i64 %4399, 8
  %4401 = inttoptr i64 %4400 to double*
  %4402 = load double, double* %4401
  %4403 = fmul double %4383, %4402
  %4404 = inttoptr i64 %1466 to double*
  store double %4403, double* %4404
  %4405 = inttoptr i64 %1461 to double*
  %4406 = load double, double* %4405
  %4407 = inttoptr i64 %1437 to i32*
  %4408 = load i32, i32* %4407
  %4409 = sext i32 %4408 to i64
  %4410 = mul nsw i64 %4409, 6760
  %4411 = add i64 %4410, ptrtoint (%rsd_type* @rsd to i64)
  %4412 = inttoptr i64 %1438 to i32*
  %4413 = load i32, i32* %4412
  %4414 = sext i32 %4413 to i64
  %4415 = mul nsw i64 %4414, 520
  %4416 = add i64 %4415, %4411
  %4417 = inttoptr i64 %1439 to i32*
  %4418 = load i32, i32* %4417
  %4419 = add i32 %4418, -1
  %4420 = sext i32 %4419 to i64
  %4421 = mul nsw i64 %4420, 40
  %4422 = add i64 %4421, %4416
  %4423 = add i64 %4422, 16
  %4424 = inttoptr i64 %4423 to double*
  %4425 = load double, double* %4424
  %4426 = fmul double %4406, %4425
  %4427 = inttoptr i64 %1467 to double*
  store double %4426, double* %4427
  %4428 = inttoptr i64 %1461 to double*
  %4429 = load double, double* %4428
  %4430 = inttoptr i64 %1437 to i32*
  %4431 = load i32, i32* %4430
  %4432 = sext i32 %4431 to i64
  %4433 = mul nsw i64 %4432, 6760
  %4434 = add i64 %4433, ptrtoint (%rsd_type* @rsd to i64)
  %4435 = inttoptr i64 %1438 to i32*
  %4436 = load i32, i32* %4435
  %4437 = sext i32 %4436 to i64
  %4438 = mul nsw i64 %4437, 520
  %4439 = add i64 %4438, %4434
  %4440 = inttoptr i64 %1439 to i32*
  %4441 = load i32, i32* %4440
  %4442 = add i32 %4441, -1
  %4443 = sext i32 %4442 to i64
  %4444 = mul nsw i64 %4443, 40
  %4445 = add i64 %4444, %4439
  store i64 %4445, i64* %6, align 8, !tbaa !1240
  %4446 = add i64 %4445, 24
  %4447 = inttoptr i64 %4446 to double*
  %4448 = load double, double* %4447
  %4449 = fmul double %4429, %4448
  %4450 = inttoptr i64 %1468 to double*
  store double %4449, double* %4450
  %4451 = inttoptr i64 %1461 to double*
  %4452 = load double, double* %4451
  %4453 = inttoptr i64 %1437 to i32*
  %4454 = load i32, i32* %4453
  %4455 = sext i32 %4454 to i64
  %4456 = mul nsw i64 %4455, 6760
  %4457 = add i64 %4456, ptrtoint (%rsd_type* @rsd to i64)
  %4458 = inttoptr i64 %1438 to i32*
  %4459 = load i32, i32* %4458
  %4460 = sext i32 %4459 to i64
  %4461 = mul nsw i64 %4460, 520
  %4462 = add i64 %4461, %4457
  %4463 = inttoptr i64 %1439 to i32*
  %4464 = load i32, i32* %4463
  %4465 = add i32 %4464, -1
  %4466 = zext i32 %4465 to i64
  store i64 %4466, i64* %4903, align 8, !tbaa !1240
  %4467 = sext i32 %4465 to i64
  %4468 = mul nsw i64 %4467, 40
  %4469 = add i64 %4468, %4462
  %4470 = add i64 %4469, 32
  %4471 = inttoptr i64 %4470 to double*
  %4472 = load double, double* %4471
  %4473 = fmul double %4452, %4472
  %4474 = inttoptr i64 %1469 to double*
  store double %4473, double* %4474
  %4475 = load double, double* %4921, align 1
  %4476 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4477 = fmul double %4475, %4476
  %4478 = inttoptr i64 %1462 to double*
  %4479 = load double, double* %4478
  %4480 = inttoptr i64 %1466 to double*
  %4481 = load double, double* %4480
  %4482 = fsub double %4479, %4481
  %4483 = fmul double %4482, %4477
  %4484 = inttoptr i64 %1439 to i32*
  %4485 = load i32, i32* %4484
  %4486 = sext i32 %4485 to i64
  %4487 = mul nsw i64 %4486, 40
  %4488 = add i64 %4487, add (i64 ptrtoint (%flux_type* @flux to i64), i64 8)
  %4489 = inttoptr i64 %4488 to double*
  store double %4483, double* %4489
  %4490 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4491 = inttoptr i64 %1463 to double*
  %4492 = load double, double* %4491
  %4493 = inttoptr i64 %1467 to double*
  %4494 = load double, double* %4493
  %4495 = fsub double %4492, %4494
  %4496 = fmul double %4495, %4490
  %4497 = inttoptr i64 %1439 to i32*
  %4498 = load i32, i32* %4497
  %4499 = sext i32 %4498 to i64
  %4500 = mul nsw i64 %4499, 40
  %4501 = add i64 %4500, add (i64 ptrtoint (%flux_type* @flux to i64), i64 16)
  %4502 = inttoptr i64 %4501 to double*
  store double %4496, double* %4502
  %4503 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4504 = inttoptr i64 %1464 to double*
  %4505 = load double, double* %4504
  %4506 = inttoptr i64 %1468 to double*
  %4507 = load double, double* %4506
  %4508 = fsub double %4505, %4507
  %4509 = fmul double %4508, %4503
  %4510 = inttoptr i64 %1439 to i32*
  %4511 = load i32, i32* %4510
  %4512 = sext i32 %4511 to i64
  %4513 = mul nsw i64 %4512, 40
  %4514 = add i64 %4513, ptrtoint (%flux_type* @flux to i64)
  store i64 %4514, i64* %4902, align 8, !tbaa !1240
  %4515 = add i64 %4513, add (i64 ptrtoint (%flux_type* @flux to i64), i64 24)
  %4516 = inttoptr i64 %4515 to double*
  store double %4509, double* %4516
  %4517 = load double, double* %4918, align 1
  %4518 = load double, double* bitcast (%tx3_type* @tx3 to double*)
  %4519 = fmul double %4517, %4518
  %4520 = inttoptr i64 %1462 to double*
  %4521 = load double, double* %4520
  %4522 = fmul double %4521, %4521
  %4523 = inttoptr i64 %1463 to double*
  %4524 = load double, double* %4523
  %4525 = fmul double %4524, %4524
  %4526 = fadd double %4525, %4522
  %4527 = inttoptr i64 %1464 to double*
  %4528 = load double, double* %4527
  %4529 = fmul double %4528, %4528
  %4530 = fadd double %4529, %4526
  %4531 = inttoptr i64 %1466 to double*
  %4532 = load double, double* %4531
  %4533 = fmul double %4532, %4532
  %4534 = inttoptr i64 %1467 to double*
  %4535 = load double, double* %4534
  %4536 = fmul double %4535, %4535
  %4537 = fadd double %4536, %4533
  %4538 = inttoptr i64 %1468 to double*
  %4539 = load double, double* %4538
  %4540 = fmul double %4539, %4539
  store double %4540, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %4541 = fadd double %4540, %4537
  %4542 = fsub double %4530, %4541
  %4543 = fmul double %4542, %4519
  %4544 = load double, double* %4911, align 1
  %4545 = fmul double %4518, %4544
  store double %4533, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %4546 = fsub double %4522, %4533
  store double %4546, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %4547 = fmul double %4546, %4545
  %4548 = fadd double %4547, %4543
  %4549 = load double, double* %39, align 1
  %4550 = fmul double %4518, %4549
  %4551 = inttoptr i64 %1465 to double*
  %4552 = load double, double* %4551
  %4553 = inttoptr i64 %1469 to double*
  %4554 = load double, double* %4553
  %4555 = fsub double %4552, %4554
  store double %4555, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %4556 = fmul double %4555, %4550
  store double %4556, double* %39, align 1, !tbaa !1264
  %4557 = fadd double %4556, %4548
  store double %4557, double* %4918, align 1, !tbaa !1264
  %4558 = inttoptr i64 %1439 to i32*
  %4559 = load i32, i32* %4558
  %4560 = sext i32 %4559 to i64
  %4561 = mul nsw i64 %4560, 40
  %4562 = add i64 %4561, add (i64 ptrtoint (%flux_type* @flux to i64), i64 32)
  %4563 = inttoptr i64 %4562 to double*
  store double %4557, double* %4563
  %4564 = inttoptr i64 %1439 to i32*
  %4565 = load i32, i32* %4564
  %4566 = add i32 %4565, 1
  %4567 = inttoptr i64 %1439 to i32*
  store i32 %4566, i32* %4567
  %4568 = add i64 %4627, -16
  br label %block_404623

block_405c68:                                     ; preds = %block_4058c4
  %4569 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %4570 = add i64 %2509, 10
  %4571 = inttoptr i64 %1415 to i32*
  store i32 %4569, i32* %4571
  br label %block_405c72

block_407032:                                     ; preds = %block_407028, %block_408770
  %4572 = phi %struct.Memory* [ %4797, %block_407028 ], [ %3550, %block_408770 ]
  %4573 = inttoptr i64 %4932 to i32*
  %4574 = load i32, i32* %4573
  %4575 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %4576 = sub i32 %4574, %4575
  %4577 = lshr i32 %4576, 31
  %4578 = lshr i32 %4574, 31
  %4579 = lshr i32 %4575, 31
  %4580 = xor i32 %4579, %4578
  %4581 = xor i32 %4577, %4578
  %4582 = add nuw nsw i32 %4581, %4580
  %4583 = icmp eq i32 %4582, 2
  %4584 = icmp ne i32 %4577, 0
  %4585 = xor i1 %4584, %4583
  br i1 %4585, label %block_407042, label %block_408783

block_404a2d:                                     ; preds = %block_404a3d, %block_404a23
  %4586 = phi i64 [ %2269, %block_404a23 ], [ %4224, %block_404a3d ]
  %4587 = phi %struct.Memory* [ %4612, %block_404a23 ], [ %4587, %block_404a3d ]
  %4588 = inttoptr i64 %1439 to i32*
  %4589 = load i32, i32* %4588
  %4590 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %4591 = sub i32 %4589, %4590
  %4592 = lshr i32 %4591, 31
  %4593 = lshr i32 %4589, 31
  %4594 = lshr i32 %4590, 31
  %4595 = xor i32 %4594, %4593
  %4596 = xor i32 %4592, %4593
  %4597 = add nuw nsw i32 %4596, %4595
  %4598 = icmp eq i32 %4597, 2
  %4599 = icmp ne i32 %4592, 0
  %4600 = xor i1 %4599, %4598
  %4601 = select i1 %4600, i64 16, i64 1750
  %4602 = add i64 %4586, %4601
  br i1 %4600, label %block_404a3d, label %block_405103

block_408770:                                     ; preds = %block_408462
  %4603 = inttoptr i64 %4932 to i32*
  %4604 = load i32, i32* %4603
  %4605 = add i32 %4604, 1
  %4606 = inttoptr i64 %4932 to i32*
  store i32 %4605, i32* %4606
  br label %block_407032

block_407028:                                     ; preds = %block_407018
  %4607 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %4608 = inttoptr i64 %4932 to i32*
  store i32 %4607, i32* %4608
  br label %block_407032

block_406ace:                                     ; preds = %block_406874
  %4609 = add i64 %3335, 7
  %4610 = inttoptr i64 %1415 to i32*
  store i32 3, i32* %4610
  br label %block_406ad5

block_404623:                                     ; preds = %block_404619, %block_404633
  %4611 = phi i64 [ %4795, %block_404619 ], [ %4568, %block_404633 ]
  %4612 = phi %struct.Memory* [ %1486, %block_404619 ], [ %4612, %block_404633 ]
  %4613 = inttoptr i64 %1439 to i32*
  %4614 = load i32, i32* %4613
  %4615 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %4616 = sub i32 %4614, %4615
  %4617 = lshr i32 %4616, 31
  %4618 = lshr i32 %4614, 31
  %4619 = lshr i32 %4615, 31
  %4620 = xor i32 %4619, %4618
  %4621 = xor i32 %4617, %4618
  %4622 = add nuw nsw i32 %4621, %4620
  %4623 = icmp eq i32 %4622, 2
  %4624 = icmp ne i32 %4617, 0
  %4625 = xor i1 %4624, %4623
  %4626 = select i1 %4625, i64 16, i64 1024
  %4627 = add i64 %4611, %4626
  br i1 %4625, label %block_404633, label %block_404a23

block_40588e:                                     ; preds = %block_406ffb, %block_405887
  %4628 = phi i64 [ %1412, %block_405887 ], [ %2821, %block_406ffb ]
  %4629 = phi %struct.Memory* [ %1326, %block_405887 ], [ %2613, %block_406ffb ]
  %4630 = inttoptr i64 %1411 to i32*
  %4631 = load i32, i32* %4630
  %4632 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %4633 = add i32 %4632, -1
  %4634 = sub i32 %4631, %4633
  %4635 = lshr i32 %4634, 31
  %4636 = trunc i32 %4635 to i8
  %4637 = lshr i32 %4631, 31
  %4638 = lshr i32 %4633, 31
  %4639 = xor i32 %4638, %4637
  %4640 = xor i32 %4635, %4637
  %4641 = add nuw nsw i32 %4640, %4639
  %4642 = icmp eq i32 %4641, 2
  %4643 = icmp ne i8 %4636, 0
  %4644 = xor i1 %4643, %4642
  %4645 = select i1 %4644, i64 21, i64 6016
  %4646 = add i64 %4628, %4645
  br i1 %4644, label %block_4058a3, label %block_40700e

block_408022:                                     ; preds = %block_408018
  store i64 add (i64 ptrtoint (%frct_type* @frct to i64), i64 13520), i64* %5, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 27040), i64* %6, align 8, !tbaa !1240
  %4647 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  store double %4647, double* %39, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4915, align 1, !tbaa !1264
  store i64 add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 20280), i64* %4903, align 8, !tbaa !1240
  %4648 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1224) to double*)
  store double %4648, double* %4911, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4917, align 1, !tbaa !1264
  store i64 add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 13520), i64* %4904, align 8, !tbaa !1240
  %4649 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1232) to double*)
  store double %4649, double* %4918, align 1, !tbaa !1264
  store double 0.000000e+00, double* %4920, align 1, !tbaa !1264
  store i64 add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 6760), i64* %4902, align 8, !tbaa !1240
  %4650 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %4651 = inttoptr i64 %4930 to i32*
  %4652 = load i32, i32* %4651
  %4653 = sext i32 %4652 to i64
  %4654 = mul nsw i64 %4653, 520
  %4655 = add i64 %4654, add (i64 ptrtoint (%frct_type* @frct to i64), i64 6760)
  %4656 = inttoptr i64 %4932 to i32*
  %4657 = load i32, i32* %4656
  %4658 = sext i32 %4657 to i64
  %4659 = mul nsw i64 %4658, 40
  %4660 = add i64 %4659, %4655
  %4661 = sext i32 %2689 to i64
  %4662 = shl nsw i64 %4661, 3
  %4663 = add i64 %4662, %4660
  %4664 = inttoptr i64 %4663 to double*
  %4665 = load double, double* %4664
  %4666 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %4667 = add i64 %4654, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 6760)
  %4668 = add i64 %4659, %4667
  %4669 = add i64 %4662, %4668
  %4670 = inttoptr i64 %4669 to double*
  %4671 = load double, double* %4670
  %4672 = fmul double %4650, %4671
  %4673 = add i64 %4654, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 13520)
  %4674 = add i64 %4659, %4673
  %4675 = bitcast double %4647 to <2 x i32>
  %4676 = extractelement <2 x i32> %4675, i32 0
  store i32 %4676, i32* %1471, align 1, !tbaa !1292
  %4677 = extractelement <2 x i32> %4675, i32 1
  store i32 %4677, i32* %1473, align 1, !tbaa !1292
  store i32 0, i32* %1475, align 1, !tbaa !1292
  store i32 0, i32* %1477, align 1, !tbaa !1292
  %4678 = add i64 %4662, %4674
  %4679 = load double, double* %1478, align 1
  %4680 = inttoptr i64 %4678 to double*
  %4681 = load double, double* %4680
  %4682 = fmul double %4679, %4681
  store double %4682, double* %1478, align 1, !tbaa !1264
  %4683 = fsub double %4672, %4682
  %4684 = add i64 %4654, add (i64 ptrtoint (%rsd_type* @rsd to i64), i64 20280)
  %4685 = add i64 %4659, %4684
  store i64 %4685, i64* %4905, align 8, !tbaa !1240
  %4686 = add i64 %4662, %4685
  %4687 = inttoptr i64 %4686 to double*
  %4688 = load double, double* %4687
  %4689 = fadd double %4683, %4688
  %4690 = fmul double %4666, %4689
  store double %4690, double* %1460, align 1, !tbaa !1264
  store i64 0, i64* %1456, align 1, !tbaa !1264
  %4691 = fsub double %4665, %4690
  %4692 = inttoptr i64 %4663 to double*
  store double %4691, double* %4692
  %4693 = inttoptr i64 %4930 to i32*
  %4694 = load i32, i32* %4693
  %4695 = sext i32 %4694 to i64
  %4696 = mul nsw i64 %4695, 520
  %4697 = load i64, i64* %5, align 8
  %4698 = add i64 %4696, %4697
  %4699 = inttoptr i64 %4932 to i32*
  %4700 = load i32, i32* %4699
  %4701 = sext i32 %4700 to i64
  %4702 = mul nsw i64 %4701, 40
  %4703 = add i64 %4702, %4698
  store i64 %4703, i64* %9, align 8, !tbaa !1240
  %4704 = inttoptr i64 %4936 to i32*
  %4705 = load i32, i32* %4704
  %4706 = sext i32 %4705 to i64
  %4707 = shl nsw i64 %4706, 3
  %4708 = add i64 %4707, %4703
  %4709 = inttoptr i64 %4708 to double*
  %4710 = load double, double* %4709
  %4711 = load double, double* bitcast (%dssp_type* @dssp to double*)
  %4712 = load i64, i64* %4902, align 8
  %4713 = add i64 %4696, %4712
  %4714 = add i64 %4702, %4713
  store i64 %4714, i64* %4902, align 8, !tbaa !1240
  %4715 = add i64 %4707, %4714
  %4716 = load double, double* %4918, align 1
  %4717 = inttoptr i64 %4715 to double*
  %4718 = load double, double* %4717
  %4719 = fmul double %4716, %4718
  %4720 = load i64, i64* %4904, align 8
  %4721 = add i64 %4696, %4720
  %4722 = add i64 %4702, %4721
  store i64 %4722, i64* %4904, align 8, !tbaa !1240
  %4723 = add i64 %4707, %4722
  %4724 = load double, double* %4911, align 1
  %4725 = inttoptr i64 %4723 to double*
  %4726 = load double, double* %4725
  %4727 = fmul double %4724, %4726
  store double %4727, double* %4911, align 1, !tbaa !1264
  %4728 = fadd double %4719, %4727
  %4729 = load i64, i64* %4903, align 8
  %4730 = add i64 %4696, %4729
  %4731 = add i64 %4702, %4730
  store i64 %4731, i64* %4903, align 8, !tbaa !1240
  %4732 = add i64 %4707, %4731
  %4733 = load double, double* %39, align 1
  %4734 = inttoptr i64 %4732 to double*
  %4735 = load double, double* %4734
  %4736 = fmul double %4733, %4735
  store double %4736, double* %39, align 1, !tbaa !1264
  %4737 = fsub double %4728, %4736
  %4738 = load i64, i64* %6, align 8
  %4739 = add i64 %4696, %4738
  %4740 = add i64 %4702, %4739
  store i64 %4740, i64* %6, align 8, !tbaa !1240
  %4741 = add i64 %4707, %4740
  %4742 = inttoptr i64 %4741 to double*
  %4743 = load double, double* %4742
  %4744 = fadd double %4737, %4743
  store double %4744, double* %4918, align 1, !tbaa !1264
  %4745 = fmul double %4711, %4744
  store double %4745, double* %4924, align 1, !tbaa !1264
  store i64 0, i64* %4925, align 1, !tbaa !1264
  %4746 = fsub double %4710, %4745
  store double %4746, double* %4921, align 1, !tbaa !1264
  store i64 0, i64* %4922, align 1, !tbaa !1264
  %4747 = inttoptr i64 %4708 to double*
  store double %4746, double* %4747
  %4748 = inttoptr i64 %4936 to i32*
  %4749 = load i32, i32* %4748
  %4750 = add i32 %4749, 1
  %4751 = inttoptr i64 %4936 to i32*
  store i32 %4750, i32* %4751
  br label %block_408018

block_40741a:                                     ; preds = %block_407410
  %4752 = sext i32 %4863 to i64
  %4753 = mul nsw i64 %4752, 6760
  %4754 = add i64 %4753, ptrtoint (%frct_type* @frct to i64)
  %4755 = inttoptr i64 %4930 to i32*
  %4756 = load i32, i32* %4755
  %4757 = sext i32 %4756 to i64
  %4758 = mul nsw i64 %4757, 520
  %4759 = add i64 %4758, %4754
  %4760 = inttoptr i64 %4932 to i32*
  %4761 = load i32, i32* %4760
  %4762 = sext i32 %4761 to i64
  %4763 = mul nsw i64 %4762, 40
  %4764 = add i64 %4763, %4759
  %4765 = sext i32 %4853 to i64
  %4766 = shl nsw i64 %4765, 3
  %4767 = add i64 %4766, %4764
  %4768 = inttoptr i64 %4767 to double*
  %4769 = load double, double* %4768
  %4770 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %4771 = add i32 %4863, 1
  %4772 = sext i32 %4771 to i64
  %4773 = mul nsw i64 %4772, 40
  %4774 = add i64 %4773, ptrtoint (%flux_type* @flux to i64)
  store i64 %4774, i64* %6, align 8, !tbaa !1240
  %4775 = add i64 %4766, %4774
  %4776 = inttoptr i64 %4775 to double*
  %4777 = load double, double* %4776
  %4778 = add i32 %4863, -1
  %4779 = zext i32 %4778 to i64
  store i64 %4779, i64* %4903, align 8, !tbaa !1240
  %4780 = sext i32 %4778 to i64
  %4781 = mul nsw i64 %4780, 40
  %4782 = add i64 %4781, ptrtoint (%flux_type* @flux to i64)
  store i64 %4765, i64* %4902, align 8, !tbaa !1240
  %4783 = add i64 %4766, %4782
  %4784 = inttoptr i64 %4783 to double*
  %4785 = load double, double* %4784
  %4786 = fsub double %4777, %4785
  store double %4786, double* %4918, align 1, !tbaa !1264
  store i64 0, i64* %4919, align 1, !tbaa !1264
  %4787 = fmul double %4770, %4786
  store double %4787, double* %4911, align 1, !tbaa !1264
  store i64 0, i64* %4916, align 1, !tbaa !1264
  %4788 = fsub double %4769, %4787
  store double %4788, double* %39, align 1, !tbaa !1264
  store i64 0, i64* %32, align 1, !tbaa !1264
  %4789 = inttoptr i64 %4767 to double*
  store double %4788, double* %4789
  %4790 = inttoptr i64 %4936 to i32*
  %4791 = load i32, i32* %4790
  %4792 = add i32 %4791, 1
  %4793 = inttoptr i64 %4936 to i32*
  store i32 %4792, i32* %4793
  br label %block_407410

block_404619:                                     ; preds = %block_40451a
  %4794 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %4795 = add i64 %1501, 10
  %4796 = inttoptr i64 %1439 to i32*
  store i32 %4794, i32* %4796
  br label %block_404623

block_407018:                                     ; preds = %block_40700e, %block_408783
  %4797 = phi %struct.Memory* [ %4629, %block_40700e ], [ %4572, %block_408783 ]
  %4798 = inttoptr i64 %4930 to i32*
  %4799 = load i32, i32* %4798
  %4800 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %4801 = sub i32 %4799, %4800
  %4802 = lshr i32 %4801, 31
  %4803 = lshr i32 %4799, 31
  %4804 = lshr i32 %4800, 31
  %4805 = xor i32 %4804, %4803
  %4806 = xor i32 %4802, %4803
  %4807 = add nuw nsw i32 %4806, %4805
  %4808 = icmp eq i32 %4807, 2
  %4809 = icmp ne i32 %4802, 0
  %4810 = xor i1 %4809, %4808
  br i1 %4810, label %block_407028, label %block_408796

block_403f3b:                                     ; preds = %block_403f16, %block_403f45
  %4811 = phi i64 [ %1838, %block_403f16 ], [ 0, %block_403f45 ]
  %4812 = phi i64 [ %1508, %block_403f16 ], [ %650, %block_403f45 ]
  %4813 = phi %struct.Memory* [ %1840, %block_403f16 ], [ %4813, %block_403f45 ]
  %4814 = inttoptr i64 %30 to i32*
  %4815 = load i32, i32* %4814
  %4816 = add i32 %4815, -5
  %4817 = lshr i32 %4816, 31
  %4818 = lshr i32 %4815, 31
  %4819 = xor i32 %4817, %4818
  %4820 = add nuw nsw i32 %4819, %4818
  %4821 = icmp eq i32 %4820, 2
  %4822 = icmp ne i32 %4817, 0
  %4823 = xor i1 %4822, %4821
  %4824 = select i1 %4823, i64 10, i64 443
  %4825 = add i64 %4812, %4824
  br i1 %4823, label %block_403f45, label %block_4040f6

block_403e11:                                     ; preds = %block_403e07
  store i32 0, i32* %33, align 1, !tbaa !1266
  store i32 0, i32* %35, align 1, !tbaa !1266
  store i32 0, i32* %36, align 1, !tbaa !1266
  store i32 0, i32* %38, align 1, !tbaa !1266
  %4826 = inttoptr i64 %25 to i32*
  %4827 = load i32, i32* %4826
  %4828 = sext i32 %4827 to i64
  %4829 = mul nsw i64 %4828, 6760
  %4830 = add i64 %4829, ptrtoint (%frct_type* @frct to i64)
  %4831 = inttoptr i64 %28 to i32*
  %4832 = load i32, i32* %4831
  %4833 = sext i32 %4832 to i64
  %4834 = mul nsw i64 %4833, 520
  %4835 = add i64 %4834, %4830
  %4836 = inttoptr i64 %29 to i32*
  %4837 = load i32, i32* %4836
  %4838 = sext i32 %4837 to i64
  %4839 = mul nsw i64 %4838, 40
  %4840 = add i64 %4839, %4835
  %4841 = sext i32 %4886 to i64
  %4842 = shl nsw i64 %4841, 3
  %4843 = add i64 %4842, %4840
  %4844 = load double, double* %39, align 1
  %4845 = inttoptr i64 %4843 to double*
  store double %4844, double* %4845
  %4846 = inttoptr i64 %30 to i32*
  %4847 = load i32, i32* %4846
  %4848 = add i32 %4847, 1
  %4849 = inttoptr i64 %30 to i32*
  store i32 %4848, i32* %4849
  %4850 = add i64 %4896, -10
  br label %block_403e07

block_407410:                                     ; preds = %block_407409, %block_40741a
  %4851 = phi %struct.Memory* [ %40, %block_407409 ], [ %4851, %block_40741a ]
  %4852 = inttoptr i64 %4936 to i32*
  %4853 = load i32, i32* %4852
  %4854 = add i32 %4853, -5
  %4855 = lshr i32 %4854, 31
  %4856 = lshr i32 %4853, 31
  %4857 = xor i32 %4855, %4856
  %4858 = add nuw nsw i32 %4857, %4856
  %4859 = icmp eq i32 %4858, 2
  %4860 = icmp ne i32 %4855, 0
  %4861 = xor i1 %4860, %4859
  %4862 = inttoptr i64 %4933 to i32*
  %4863 = load i32, i32* %4862
  br i1 %4861, label %block_40741a, label %block_4074e5

block_407409:                                     ; preds = %block_4073f4
  %4864 = inttoptr i64 %4936 to i32*
  store i32 0, i32* %4864
  br label %block_407410

block_403e9c:                                     ; preds = %block_403e95, %block_40411c
  %4865 = phi i64 [ %4909, %block_403e95 ], [ %1433, %block_40411c ]
  %4866 = phi %struct.Memory* [ %166, %block_403e95 ], [ %2273, %block_40411c ]
  %4867 = inttoptr i64 %25 to i32*
  %4868 = load i32, i32* %4867
  %4869 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %4870 = sub i32 %4868, %4869
  %4871 = lshr i32 %4870, 31
  %4872 = trunc i32 %4871 to i8
  %4873 = lshr i32 %4868, 31
  %4874 = lshr i32 %4869, 31
  %4875 = xor i32 %4874, %4873
  %4876 = xor i32 %4871, %4873
  %4877 = add nuw nsw i32 %4876, %4875
  %4878 = icmp eq i32 %4877, 2
  %4879 = icmp ne i8 %4872, 0
  %4880 = xor i1 %4879, %4878
  %4881 = select i1 %4880, i64 16, i64 659
  %4882 = add i64 %4865, %4881
  br i1 %4880, label %block_403eac, label %block_40412f

block_403e07:                                     ; preds = %block_403e00, %block_403e11
  %4883 = phi i64 [ %4947, %block_403e00 ], [ %4850, %block_403e11 ]
  %4884 = phi %struct.Memory* [ %3356, %block_403e00 ], [ %4884, %block_403e11 ]
  %4885 = inttoptr i64 %30 to i32*
  %4886 = load i32, i32* %4885
  %4887 = add i32 %4886, -5
  %4888 = lshr i32 %4887, 31
  %4889 = lshr i32 %4886, 31
  %4890 = xor i32 %4888, %4889
  %4891 = add nuw nsw i32 %4890, %4889
  %4892 = icmp eq i32 %4891, 2
  %4893 = icmp ne i32 %4888, 0
  %4894 = xor i1 %4893, %4892
  %4895 = select i1 %4894, i64 10, i64 85
  %4896 = add i64 %4883, %4895
  br i1 %4894, label %block_403e11, label %block_403e5c

block_404606:                                     ; preds = %block_404531
  %4897 = inttoptr i64 %1439 to i32*
  %4898 = load i32, i32* %4897
  %4899 = add i32 %4898, 1
  %4900 = inttoptr i64 %1439 to i32*
  store i32 %4899, i32* %4900
  %4901 = add i64 %3549, -236
  br label %block_40451a

block_403e95:                                     ; preds = %block_403dc2
  %4902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %4908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %4909 = add i64 %182, 7
  %4910 = inttoptr i64 %25 to i32*
  store i32 0, i32* %4910
  %4911 = bitcast %union.VectorReg* %11 to double*
  %4912 = add i64 %15, -48
  %4913 = add i64 %15, -40
  %4914 = add i64 %15, -32
  %4915 = bitcast i64* %32 to double*
  %4916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4917 = bitcast i64* %4916 to double*
  %4918 = bitcast %union.VectorReg* %4906 to double*
  %4919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %4920 = bitcast i64* %4919 to double*
  %4921 = bitcast %union.VectorReg* %12 to double*
  %4922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %4923 = bitcast i64* %4922 to double*
  %4924 = bitcast %union.VectorReg* %4907 to double*
  %4925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %4926 = bitcast i64* %4925 to double*
  br label %block_403e9c

block_40700e:                                     ; preds = %block_40588e
  %4927 = zext i32 %4633 to i64
  store i64 %4927, i64* %5, align 8
  %4928 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %4929 = load i64, i64* %8, align 8
  %4930 = add i64 %4929, -8
  %4931 = inttoptr i64 %4930 to i32*
  store i32 %4928, i32* %4931
  %4932 = add i64 %4929, -4
  %4933 = add i64 %4929, -12
  %4934 = add i64 %4929, -72
  %4935 = add i64 %4929, -48
  %4936 = add i64 %4929, -16
  %4937 = add i64 %4929, -80
  %4938 = add i64 %4929, -152
  %4939 = add i64 %4929, -160
  %4940 = add i64 %4929, -168
  %4941 = add i64 %4929, -176
  %4942 = add i64 %4929, -248
  %4943 = add i64 %4929, -256
  %4944 = add i64 %4929, -264
  %4945 = add i64 %4929, -272
  %4946 = bitcast i64* %32 to <2 x i32>*
  br label %block_407018

block_403e00:                                     ; preds = %block_403df0
  %4947 = add i64 %3371, 7
  %4948 = inttoptr i64 %30 to i32*
  store i32 0, i32* %4948
  br label %block_403e07
}

; Function Attrs: noinline
define %struct.Memory* @sub_403ba0_elapsed_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403ba0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %5, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %6, align 8, !tbaa !1240
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %9, -16
  store i64 %18, i64* %4, align 8, !tbaa !1240
  %19 = add i64 %1, 92416
  %20 = add i64 %1, 17
  %21 = add i64 %9, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %23 = tail call %struct.Memory* @sub_41a4a0_wtime_(%struct.State* nonnull %0, i64 %19, %struct.Memory* %2)
  %24 = load i64, i64* %6, align 8
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to double*
  %27 = load double, double* %26
  %28 = bitcast %union.VectorReg* %7 to double*
  store double %27, double* %28, align 1, !tbaa !1264
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %31 = load i64, i64* %5, align 8
  %32 = add i64 %31, 16
  %33 = icmp ugt i64 %31, -17
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %12, align 1, !tbaa !1245
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #11
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %13, align 1, !tbaa !1259
  %41 = xor i64 %31, 16
  %42 = xor i64 %41, %32
  %43 = lshr i64 %42, 4
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* %14, align 1, !tbaa !1263
  %46 = icmp eq i64 %32, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %15, align 1, !tbaa !1260
  %48 = lshr i64 %32, 63
  %49 = trunc i64 %48 to i8
  store i8 %49, i8* %16, align 1, !tbaa !1261
  %50 = lshr i64 %31, 63
  %51 = xor i64 %48, %50
  %52 = add nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1262
  %55 = add i64 %31, 24
  %56 = inttoptr i64 %32 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %6, align 8, !tbaa !1240
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %3, align 8, !tbaa !1240
  %60 = add i64 %31, 32
  store i64 %60, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %23
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007c0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4007c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %3, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %5, i64* %8
  %9 = inttoptr i64 %7 to i64*
  %10 = load i64, i64* %9
  store i64 %10, i64* %4, align 8, !tbaa !1240
  store i64 %6, i64* %3, align 8, !tbaa !1240
  %11 = add i64 %1, -112
  %12 = tail call %struct.Memory* @sub_400750_register_tm_clones(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  ret %struct.Memory* %12
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400790___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400790:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i8, i8* getelementptr inbounds (%seg_61c080__bss_type, %seg_61c080__bss_type* @seg_61c080__bss, i32 0, i32 0, i32 0)
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !1245
  %7 = zext i8 %5 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #11
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !1259
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1263
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !1260
  %17 = lshr i8 %5, 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %17, i8* %18, align 1, !tbaa !1261
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !1262
  %20 = select i1 %14, i64 9, i64 32
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br i1 %14, label %block_400799, label %block_4007b0

block_4007b0:                                     ; preds = %block_400790
  %23 = load i64, i64* %22, align 8, !tbaa !1240
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %23, 8
  store i64 %26, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_400799:                                     ; preds = %block_400790
  %27 = load i64, i64* %4, align 8
  %28 = load i64, i64* %22, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %4, align 8, !tbaa !1240
  %31 = add i64 %21, -121
  %32 = add i64 %21, 9
  %33 = add i64 %28, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %22, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_400720_deregister_tm_clones(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  store i8 1, i8* getelementptr inbounds (%seg_61c080__bss_type, %seg_61c080__bss_type* @seg_61c080__bss, i32 0, i32 0, i32 0)
  %36 = load i64, i64* %22, align 8, !tbaa !1240
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %4, align 8, !tbaa !1240
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %3, align 8, !tbaa !1240
  %42 = add i64 %36, 16
  store i64 %42, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_403b70_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403b70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, 48
  %24 = add i64 %1, 16
  %25 = add i64 %11, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_403ba0_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -4
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %6, align 8, !tbaa !1240
  %33 = shl nsw i64 %32, 3
  %34 = add i64 %33, add (i64 ptrtoint (%seg_61c080__bss_type* @seg_61c080__bss to i64), i64 528)
  %35 = bitcast %union.VectorReg* %9 to double*
  %36 = load double, double* %35, align 1
  %37 = inttoptr i64 %34 to double*
  store double %36, double* %37
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 16
  %40 = icmp ugt i64 %38, -17
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %14, align 1, !tbaa !1245
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #11
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %15, align 1, !tbaa !1259
  %48 = xor i64 %38, 16
  %49 = xor i64 %48, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %16, align 1, !tbaa !1263
  %53 = icmp eq i64 %39, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1260
  %55 = lshr i64 %39, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %18, align 1, !tbaa !1261
  %57 = lshr i64 %38, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %19, align 1, !tbaa !1262
  %62 = add i64 %38, 24
  %63 = inttoptr i64 %39 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %62 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %3, align 8, !tbaa !1240
  %67 = add i64 %38, 32
  store i64 %67, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline
define %struct.Memory* @sub_413720_read_input(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_413720:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -88
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %1, 25
  %25 = add i64 %14, -96
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %28 = load i64, i64* %6, align 8, !alias.scope !1389, !noalias !1392
  %29 = load i64, i64* %5, align 8, !alias.scope !1389, !noalias !1392
  %30 = load i64, i64* %4, align 8, !alias.scope !1389, !noalias !1392
  %31 = load i64, i64* %10, align 8, !alias.scope !1389, !noalias !1392
  %32 = load i64, i64* %11, align 8, !alias.scope !1389, !noalias !1392
  %33 = inttoptr i64 %17 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %14, -80
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %14, -72
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %14, -64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %14, -56
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %14, -48
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %14, -40
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %14, -32
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %14, -24
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %14, -16
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = inttoptr i64 %25 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %3, align 8, !alias.scope !1389, !noalias !1392
  store i64 %17, i64* %8, align 8, !alias.scope !1389, !noalias !1392
  %64 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2312), i64 %28, i64 %29, i64 %30, i64 %31, i64 %32, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49, i64 %52, i64 %55, i64 %58, i64 %61), !noalias !1389
  %65 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1411), i64* %6, align 8, !tbaa !1240
  %66 = load i64, i64* %9, align 8
  %67 = add i64 %66, -16
  %68 = trunc i64 %64 to i32
  %69 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %69
  %70 = add i64 %65, 28
  %71 = load i64, i64* %8, align 8, !tbaa !1240
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %70, i64* %73
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %3, align 8, !alias.scope !1394, !noalias !1397
  store i64 %71, i64* %8, align 8, !alias.scope !1394, !noalias !1397
  %76 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2371), i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1411))
  %77 = load i64, i64* %9, align 8
  %78 = add i64 %77, -8
  %79 = load i64, i64* %3, align 8
  %80 = inttoptr i64 %78 to i64*
  store i64 %76, i64* %80
  %81 = icmp eq i64 %76, 0
  %82 = select i1 %81, i64 768, i64 14
  %83 = add i64 %79, %82
  br i1 %81, label %block_413a55, label %block_413763

block_413a55:                                     ; preds = %block_413720
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %87 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2296) to double*)
  %88 = bitcast [32 x %union.VectorReg]* %85 to double*
  store double %87, double* %88, align 1, !tbaa !1264
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast i64* %89 to double*
  store double 0.000000e+00, double* %90, align 1, !tbaa !1264
  %91 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2304) to double*)
  %92 = bitcast %union.VectorReg* %86 to double*
  store double %91, double* %92, align 1, !tbaa !1264
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to double*
  store double 0.000000e+00, double* %94, align 1, !tbaa !1264
  %95 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  %96 = bitcast %union.VectorReg* %84 to double*
  store double %95, double* %96, align 1, !tbaa !1264
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %98 = bitcast i64* %97 to double*
  store double 0.000000e+00, double* %98, align 1, !tbaa !1264
  store i32 1, i32* bitcast (%ipr_type* @ipr to i32*)
  store i32 50, i32* bitcast (%inorm_type* @inorm to i32*)
  store i32 50, i32* bitcast (%itmax_type* @itmax to i32*)
  store double %95, double* bitcast (%dt_type* @dt to double*)
  store double %91, double* bitcast (%omega_type* @omega to double*)
  store double %87, double* bitcast (%tolrsd_type* @tolrsd to double*)
  store double %87, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 8) to double*)
  store double %87, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 16) to double*)
  store double %87, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 24) to double*)
  store double %87, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 32) to double*)
  store i32 12, i32* bitcast (%nx0_type* @nx0 to i32*)
  store i32 12, i32* bitcast (%ny0_type* @ny0 to i32*)
  %99 = add i64 %83, 153
  store i32 12, i32* bitcast (%nz0_type* @nz0 to i32*)
  br label %block_413aee

block_413b7e:                                     ; preds = %block_413b52
  %100 = zext i32 %483 to i64
  %101 = zext i32 %454 to i64
  store i64 %101, i64* %5, align 8, !tbaa !1240
  %102 = zext i32 %1056 to i64
  store i64 %102, i64* %4, align 8, !tbaa !1240
  %103 = add i64 %536, 38
  %104 = load i64, i64* %8, align 8, !tbaa !1240
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %10, align 8, !alias.scope !1399, !noalias !1402
  %108 = load i64, i64* %11, align 8, !alias.scope !1399, !noalias !1402
  %109 = inttoptr i64 %104 to i64*
  %110 = load i64, i64* %109
  %111 = add i64 %104, 8
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %104, 16
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  %117 = add i64 %104, 24
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %104, 32
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  %123 = add i64 %104, 40
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %104, 48
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %104, 56
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %104, 64
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %104, 72
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = inttoptr i64 %105 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %3, align 8, !alias.scope !1399, !noalias !1402
  store i64 %104, i64* %8, align 8, !alias.scope !1399, !noalias !1402
  %140 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2646), i64 %100, i64 %101, i64 %102, i64 %107, i64 %108, i64 %110, i64 %113, i64 %116, i64 %119, i64 %122, i64 %125, i64 %128, i64 %131, i64 %134, i64 %137), !noalias !1399
  %141 = load i64, i64* %3, align 8
  %142 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %6, align 8, !tbaa !1240
  %144 = load i64, i64* %9, align 8
  %145 = add i64 %144, -64
  %146 = trunc i64 %140 to i32
  %147 = inttoptr i64 %145 to i32*
  store i32 %146, i32* %147
  %148 = add i64 %141, 27
  %149 = load i64, i64* %8, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151
  %152 = load i64, i64* %5, align 8, !alias.scope !1404, !noalias !1407
  %153 = load i64, i64* %4, align 8, !alias.scope !1404, !noalias !1407
  %154 = load i64, i64* %10, align 8, !alias.scope !1404, !noalias !1407
  %155 = load i64, i64* %11, align 8, !alias.scope !1404, !noalias !1407
  %156 = inttoptr i64 %149 to i64*
  %157 = load i64, i64* %156
  %158 = add i64 %149, 8
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159
  %161 = add i64 %149, 16
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %149, 24
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %149, 32
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %149, 40
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %149, 48
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %149, 56
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %149, 64
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %149, 72
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = inttoptr i64 %150 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %3, align 8, !alias.scope !1404, !noalias !1407
  store i64 %149, i64* %8, align 8, !alias.scope !1404, !noalias !1407
  %187 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2666), i64 %143, i64 %152, i64 %153, i64 %154, i64 %155, i64 %157, i64 %160, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184), !noalias !1404
  %188 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2259), i64* %7, align 8, !tbaa !1240
  %189 = load i64, i64* %9, align 8
  %190 = add i64 %189, -68
  %191 = trunc i64 %187 to i32
  %192 = inttoptr i64 %190 to i32*
  store i32 %191, i32* %192
  %193 = add i64 %188, 20
  %194 = load i64, i64* %8, align 8, !tbaa !1240
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196
  %197 = load i64, i64* %6, align 8, !alias.scope !1409, !noalias !1412
  %198 = load i64, i64* %5, align 8, !alias.scope !1409, !noalias !1412
  %199 = load i64, i64* %4, align 8, !alias.scope !1409, !noalias !1412
  %200 = load i64, i64* %10, align 8, !alias.scope !1409, !noalias !1412
  %201 = load i64, i64* %11, align 8, !alias.scope !1409, !noalias !1412
  %202 = inttoptr i64 %194 to i64*
  %203 = load i64, i64* %202
  %204 = add i64 %194, 8
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  %207 = add i64 %194, 16
  %208 = inttoptr i64 %207 to i64*
  %209 = load i64, i64* %208
  %210 = add i64 %194, 24
  %211 = inttoptr i64 %210 to i64*
  %212 = load i64, i64* %211
  %213 = add i64 %194, 32
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = add i64 %194, 40
  %217 = inttoptr i64 %216 to i64*
  %218 = load i64, i64* %217
  %219 = add i64 %194, 48
  %220 = inttoptr i64 %219 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %194, 56
  %223 = inttoptr i64 %222 to i64*
  %224 = load i64, i64* %223
  %225 = add i64 %194, 64
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %194, 72
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  store i64 %194, i64* %8, align 8, !alias.scope !1409, !noalias !1412
  %231 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2259), i64 %197, i64 %198, i64 %199, i64 %200, i64 %201, i64 %203, i64 %206, i64 %209, i64 %212, i64 %215, i64 %218, i64 %221, i64 %224, i64 %227, i64 %230), !noalias !1409
  store i64 %231, i64* %27, align 8, !alias.scope !1409, !noalias !1412
  %232 = load i64, i64* %9, align 8
  %233 = add i64 %232, -72
  %234 = trunc i64 %231 to i32
  %235 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %235
  %236 = load i64, i64* %8, align 8
  %237 = add i64 %236, 80
  %238 = icmp ugt i64 %236, -81
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %18, align 1, !tbaa !1245
  %240 = trunc i64 %237 to i32
  %241 = and i32 %240, 255
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #11
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %19, align 1, !tbaa !1259
  %246 = xor i64 %236, 16
  %247 = xor i64 %246, %237
  %248 = lshr i64 %247, 4
  %249 = trunc i64 %248 to i8
  %250 = and i8 %249, 1
  store i8 %250, i8* %20, align 1, !tbaa !1263
  %251 = icmp eq i64 %237, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %21, align 1, !tbaa !1260
  %253 = lshr i64 %237, 63
  %254 = trunc i64 %253 to i8
  store i8 %254, i8* %22, align 1, !tbaa !1261
  %255 = lshr i64 %236, 63
  %256 = xor i64 %253, %255
  %257 = add nuw nsw i64 %256, %253
  %258 = icmp eq i64 %257, 2
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %23, align 1, !tbaa !1262
  %260 = add i64 %236, 88
  %261 = inttoptr i64 %237 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %9, align 8, !tbaa !1240
  %263 = inttoptr i64 %260 to i64*
  %264 = load i64, i64* %263
  store i64 %264, i64* %3, align 8, !tbaa !1240
  %265 = add i64 %236, 96
  store i64 %265, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %482

block_4138f0:                                     ; preds = %block_4138eb, %block_4138f0
  %266 = phi i64 [ %285, %block_4138f0 ], [ %308, %block_4138eb ]
  %267 = phi %struct.Memory* [ %267, %block_4138f0 ], [ %926, %block_4138eb ]
  %268 = load i64, i64* %9, align 8
  %269 = add i64 %268, -8
  %270 = inttoptr i64 %269 to i64*
  %271 = load i64, i64* %270
  %272 = add i64 %266, 9
  %273 = load i64, i64* %8, align 8, !tbaa !1240
  %274 = add i64 %273, -8
  %275 = inttoptr i64 %274 to i64*
  store i64 %272, i64* %275
  %276 = inttoptr i64 %274 to i64*
  %277 = load i64, i64* %276
  store i64 %277, i64* %3, align 8, !alias.scope !1414, !noalias !1417
  store i64 %273, i64* %8, align 8, !alias.scope !1414, !noalias !1417
  %278 = tail call i64 @fgetc(i64 %271), !noalias !1414
  %279 = trunc i64 %278 to i32
  %280 = load i64, i64* %3, align 8
  %281 = add i32 %279, -10
  %282 = icmp eq i32 %281, 0
  %283 = select i1 %282, i64 14, i64 9
  %284 = add i64 %280, %283
  %285 = add i64 %284, -18
  br i1 %282, label %block_413907, label %block_4138f0

block_4139ed:                                     ; preds = %block_4139db
  %286 = add i64 %555, -18
  %287 = load i64, i64* %9, align 8
  br label %block_4139db

block_4139f7:                                     ; preds = %block_4139f2, %block_4139f7
  %288 = phi i64 [ %711, %block_4139f2 ], [ %307, %block_4139f7 ]
  %289 = phi %struct.Memory* [ %539, %block_4139f2 ], [ %289, %block_4139f7 ]
  %290 = load i64, i64* %9, align 8
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %288, 9
  %295 = load i64, i64* %8, align 8, !tbaa !1240
  %296 = add i64 %295, -8
  %297 = inttoptr i64 %296 to i64*
  store i64 %294, i64* %297
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %3, align 8, !alias.scope !1419, !noalias !1422
  store i64 %295, i64* %8, align 8, !alias.scope !1419, !noalias !1422
  %300 = tail call i64 @fgetc(i64 %293), !noalias !1419
  %301 = trunc i64 %300 to i32
  %302 = load i64, i64* %3, align 8
  %303 = add i32 %301, -10
  %304 = icmp eq i32 %303, 0
  %305 = select i1 %304, i64 14, i64 9
  %306 = add i64 %302, %305
  %307 = add i64 %306, -18
  br i1 %304, label %block_413a0e, label %block_4139f7

block_4138eb:                                     ; preds = %block_4138d4
  %308 = add i64 %943, 5
  br label %block_4138f0

block_41380e:                                     ; preds = %block_413809, %block_41380e
  %309 = phi i64 [ %626, %block_413809 ], [ %328, %block_41380e ]
  %310 = phi %struct.Memory* [ %673, %block_413809 ], [ %310, %block_41380e ]
  %311 = load i64, i64* %9, align 8
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = add i64 %309, 9
  %316 = load i64, i64* %8, align 8, !tbaa !1240
  %317 = add i64 %316, -8
  %318 = inttoptr i64 %317 to i64*
  store i64 %315, i64* %318
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %3, align 8, !alias.scope !1424, !noalias !1427
  store i64 %316, i64* %8, align 8, !alias.scope !1424, !noalias !1427
  %321 = tail call i64 @fgetc(i64 %314), !noalias !1424
  %322 = trunc i64 %321 to i32
  %323 = load i64, i64* %3, align 8
  %324 = add i32 %322, -10
  %325 = icmp eq i32 %324, 0
  %326 = select i1 %325, i64 14, i64 9
  %327 = add i64 %323, %326
  %328 = add i64 %327, -18
  br i1 %325, label %block_413825, label %block_41380e

block_41387f:                                     ; preds = %block_41387a, %block_41387f
  %329 = phi i64 [ %348, %block_41387f ], [ %780, %block_41387a ]
  %330 = phi %struct.Memory* [ %330, %block_41387f ], [ %579, %block_41387a ]
  %331 = load i64, i64* %9, align 8
  %332 = add i64 %331, -8
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %329, 9
  %336 = load i64, i64* %8, align 8, !tbaa !1240
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338
  %339 = inttoptr i64 %337 to i64*
  %340 = load i64, i64* %339
  store i64 %340, i64* %3, align 8, !alias.scope !1429, !noalias !1432
  store i64 %336, i64* %8, align 8, !alias.scope !1429, !noalias !1432
  %341 = tail call i64 @fgetc(i64 %334), !noalias !1429
  %342 = trunc i64 %341 to i32
  %343 = load i64, i64* %3, align 8
  %344 = add i32 %342, -10
  %345 = icmp eq i32 %344, 0
  %346 = select i1 %345, i64 14, i64 9
  %347 = add i64 %343, %346
  %348 = add i64 %347, -18
  br i1 %345, label %block_413896, label %block_41387f

block_413b60:                                     ; preds = %block_413b36, %block_413b44, %block_413b52
  %349 = phi i64 [ %671, %block_413b36 ], [ %622, %block_413b44 ], [ %536, %block_413b52 ]
  %350 = add i64 %349, 17
  %351 = load i64, i64* %8, align 8, !tbaa !1240
  %352 = add i64 %351, -8
  %353 = inttoptr i64 %352 to i64*
  store i64 %350, i64* %353
  %354 = load i64, i64* %6, align 8, !alias.scope !1434, !noalias !1437
  %355 = load i64, i64* %5, align 8, !alias.scope !1434, !noalias !1437
  %356 = load i64, i64* %4, align 8, !alias.scope !1434, !noalias !1437
  %357 = load i64, i64* %10, align 8, !alias.scope !1434, !noalias !1437
  %358 = load i64, i64* %11, align 8, !alias.scope !1434, !noalias !1437
  %359 = inttoptr i64 %351 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %351, 8
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %351, 16
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %351, 24
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = add i64 %351, 32
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  %373 = add i64 %351, 40
  %374 = inttoptr i64 %373 to i64*
  %375 = load i64, i64* %374
  %376 = add i64 %351, 48
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %351, 56
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380
  %382 = add i64 %351, 64
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %351, 72
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = inttoptr i64 %352 to i64*
  %389 = load i64, i64* %388
  store i64 %389, i64* %3, align 8, !alias.scope !1434, !noalias !1437
  store i64 %351, i64* %8, align 8, !alias.scope !1434, !noalias !1437
  %390 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2531), i64 %354, i64 %355, i64 %356, i64 %357, i64 %358, i64 %360, i64 %363, i64 %366, i64 %369, i64 %372, i64 %375, i64 %378, i64 %381, i64 %384, i64 %387), !noalias !1434
  %391 = load i64, i64* %3, align 8
  store i64 1, i64* %7, align 8, !tbaa !1240
  %392 = load i64, i64* %9, align 8
  %393 = add i64 %392, -60
  %394 = trunc i64 %390 to i32
  %395 = inttoptr i64 %393 to i32*
  store i32 %394, i32* %395
  %396 = add i64 %391, 13
  %397 = load i64, i64* %8, align 8, !tbaa !1240
  %398 = add i64 %397, -8
  %399 = inttoptr i64 %398 to i64*
  store i64 %396, i64* %399
  %400 = inttoptr i64 %398 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %3, align 8, !alias.scope !1439, !noalias !1442
  store i64 %397, i64* %8, align 8, !alias.scope !1439, !noalias !1442
  %402 = tail call i64 @exit(i64 1), !noalias !1439
  store i64 %402, i64* %27, align 8, !alias.scope !1439, !noalias !1442
  %403 = load i64, i64* %3, align 8
  %404 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %403, %struct.Memory* %482)
  ret %struct.Memory* %404

block_413825:                                     ; preds = %block_41380e
  %405 = load i64, i64* %9, align 8
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %327, 31
  %410 = load i64, i64* %8, align 8, !tbaa !1240
  %411 = add i64 %410, -8
  %412 = inttoptr i64 %411 to i64*
  store i64 %409, i64* %412
  %413 = load i64, i64* %4, align 8, !alias.scope !1444, !noalias !1447
  %414 = load i64, i64* %10, align 8, !alias.scope !1444, !noalias !1447
  %415 = load i64, i64* %11, align 8, !alias.scope !1444, !noalias !1447
  %416 = inttoptr i64 %410 to i64*
  %417 = load i64, i64* %416
  %418 = add i64 %410, 8
  %419 = inttoptr i64 %418 to i64*
  %420 = load i64, i64* %419
  %421 = add i64 %410, 16
  %422 = inttoptr i64 %421 to i64*
  %423 = load i64, i64* %422
  %424 = add i64 %410, 24
  %425 = inttoptr i64 %424 to i64*
  %426 = load i64, i64* %425
  %427 = add i64 %410, 32
  %428 = inttoptr i64 %427 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %410, 40
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431
  %433 = add i64 %410, 48
  %434 = inttoptr i64 %433 to i64*
  %435 = load i64, i64* %434
  %436 = add i64 %410, 56
  %437 = inttoptr i64 %436 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %410, 64
  %440 = inttoptr i64 %439 to i64*
  %441 = load i64, i64* %440
  %442 = add i64 %410, 72
  %443 = inttoptr i64 %442 to i64*
  %444 = load i64, i64* %443
  %445 = inttoptr i64 %411 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %3, align 8, !alias.scope !1444, !noalias !1447
  store i64 %410, i64* %8, align 8, !alias.scope !1444, !noalias !1447
  %447 = tail call i64 @__isoc99_fscanf(i64 %408, i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2442), i64 ptrtoint (%itmax_type* @itmax to i64), i64 %413, i64 %414, i64 %415, i64 %417, i64 %420, i64 %423, i64 %426, i64 %429, i64 %432, i64 %435, i64 %438, i64 %441, i64 %444), !noalias !1444
  %448 = load i64, i64* %9, align 8
  %449 = add i64 %448, -12
  %450 = trunc i64 %447 to i32
  %451 = load i64, i64* %3, align 8
  %452 = add i64 %451, 3
  %453 = inttoptr i64 %449 to i32*
  store i32 %450, i32* %453
  br label %block_413847

block_413afc:                                     ; preds = %block_413aee
  %454 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %455 = add i32 %454, -4
  %456 = icmp ult i32 %454, 4
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %18, align 1, !tbaa !1245
  %458 = and i32 %455, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #11
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %19, align 1, !tbaa !1259
  %463 = xor i32 %455, %454
  %464 = lshr i32 %463, 4
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  store i8 %466, i8* %20, align 1, !tbaa !1263
  %467 = icmp eq i32 %455, 0
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %21, align 1, !tbaa !1260
  %469 = lshr i32 %455, 31
  %470 = trunc i32 %469 to i8
  store i8 %470, i8* %22, align 1, !tbaa !1261
  %471 = lshr i32 %454, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %471
  %474 = icmp eq i32 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %23, align 1, !tbaa !1262
  %476 = icmp ne i8 %470, 0
  %477 = xor i1 %476, %474
  %478 = select i1 %477, i64 28, i64 14
  %479 = add i64 %508, %478
  br i1 %477, label %block_413b18, label %block_413b0a

block_41385e:                                     ; preds = %block_413847
  %480 = add i64 %1151, 5
  br label %block_413863

block_413aee:                                     ; preds = %block_413a0e, %block_413a55
  %481 = phi i64 [ %99, %block_413a55 ], [ %1213, %block_413a0e ]
  %482 = phi %struct.Memory* [ %2, %block_413a55 ], [ %289, %block_413a0e ]
  %483 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %484 = add i32 %483, -4
  %485 = icmp ult i32 %483, 4
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %18, align 1, !tbaa !1245
  %487 = and i32 %484, 255
  %488 = tail call i32 @llvm.ctpop.i32(i32 %487) #11
  %489 = trunc i32 %488 to i8
  %490 = and i8 %489, 1
  %491 = xor i8 %490, 1
  store i8 %491, i8* %19, align 1, !tbaa !1259
  %492 = xor i32 %484, %483
  %493 = lshr i32 %492, 4
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  store i8 %495, i8* %20, align 1, !tbaa !1263
  %496 = icmp eq i32 %484, 0
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %21, align 1, !tbaa !1260
  %498 = lshr i32 %484, 31
  %499 = trunc i32 %498 to i8
  store i8 %499, i8* %22, align 1, !tbaa !1261
  %500 = lshr i32 %483, 31
  %501 = xor i32 %498, %500
  %502 = add nuw nsw i32 %501, %500
  %503 = icmp eq i32 %502, 2
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %23, align 1, !tbaa !1262
  %505 = icmp ne i8 %499, 0
  %506 = xor i1 %505, %503
  %507 = select i1 %506, i64 42, i64 14
  %508 = add i64 %481, %507
  br i1 %506, label %block_413b18, label %block_413afc

block_41395c:                                     ; preds = %block_413945
  %509 = add i64 %1232, 5
  br label %block_413961

block_413859:                                     ; preds = %block_413847
  %510 = add i64 %1151, -18
  %511 = load i64, i64* %9, align 8
  br label %block_413847

block_413b52:                                     ; preds = %block_413b44
  %512 = add i32 %1056, -12
  %513 = icmp ult i32 %1056, 12
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %18, align 1, !tbaa !1245
  %515 = and i32 %512, 255
  %516 = tail call i32 @llvm.ctpop.i32(i32 %515) #11
  %517 = trunc i32 %516 to i8
  %518 = and i8 %517, 1
  %519 = xor i8 %518, 1
  store i8 %519, i8* %19, align 1, !tbaa !1259
  %520 = xor i32 %512, %1056
  %521 = lshr i32 %520, 4
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %20, align 1, !tbaa !1263
  %524 = icmp eq i32 %512, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %21, align 1, !tbaa !1260
  %526 = lshr i32 %512, 31
  %527 = trunc i32 %526 to i8
  store i8 %527, i8* %22, align 1, !tbaa !1261
  %528 = xor i32 %526, %1073
  %529 = add nuw nsw i32 %528, %1073
  %530 = icmp eq i32 %529, 2
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %23, align 1, !tbaa !1262
  %532 = icmp ne i8 %527, 0
  %533 = xor i1 %532, %530
  %534 = or i1 %524, %533
  %535 = select i1 %534, i64 44, i64 14
  %536 = add i64 %622, %535
  br i1 %534, label %block_413b7e, label %block_413b60

block_4139db:                                     ; preds = %block_413978, %block_4139ed
  %537 = phi i64 [ %1054, %block_413978 ], [ %286, %block_4139ed ]
  %538 = phi i64 [ %1050, %block_413978 ], [ %287, %block_4139ed ]
  %539 = phi %struct.Memory* [ %628, %block_413978 ], [ %539, %block_4139ed ]
  %540 = add i64 %538, -8
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %537, 9
  %544 = load i64, i64* %8, align 8, !tbaa !1240
  %545 = add i64 %544, -8
  %546 = inttoptr i64 %545 to i64*
  store i64 %543, i64* %546
  %547 = inttoptr i64 %545 to i64*
  %548 = load i64, i64* %547
  store i64 %548, i64* %3, align 8, !alias.scope !1449, !noalias !1452
  store i64 %544, i64* %8, align 8, !alias.scope !1449, !noalias !1452
  %549 = tail call i64 @fgetc(i64 %542), !noalias !1449
  %550 = trunc i64 %549 to i32
  %551 = load i64, i64* %3, align 8
  %552 = add i32 %550, -10
  %553 = icmp eq i32 %552, 0
  %554 = select i1 %553, i64 14, i64 9
  %555 = add i64 %551, %554
  br i1 %553, label %block_4139f2, label %block_4139ed

block_4138cf:                                     ; preds = %block_4138b8
  %556 = add i64 %710, 5
  br label %block_4138d4

block_413777:                                     ; preds = %block_413789, %block_413763
  %557 = phi i64 [ %778, %block_413763 ], [ %1082, %block_413789 ]
  %558 = phi i64 [ %774, %block_413763 ], [ %1083, %block_413789 ]
  %559 = phi %struct.Memory* [ %2, %block_413763 ], [ %559, %block_413789 ]
  %560 = add i64 %558, -8
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %557, 9
  %564 = load i64, i64* %8, align 8, !tbaa !1240
  %565 = add i64 %564, -8
  %566 = inttoptr i64 %565 to i64*
  store i64 %563, i64* %566
  %567 = inttoptr i64 %565 to i64*
  %568 = load i64, i64* %567
  store i64 %568, i64* %3, align 8, !alias.scope !1454, !noalias !1457
  store i64 %564, i64* %8, align 8, !alias.scope !1454, !noalias !1457
  %569 = tail call i64 @fgetc(i64 %562), !noalias !1454
  %570 = trunc i64 %569 to i32
  %571 = load i64, i64* %3, align 8
  %572 = add i32 %570, -10
  %573 = icmp eq i32 %572, 0
  %574 = select i1 %573, i64 14, i64 9
  %575 = add i64 %571, %574
  br i1 %573, label %block_41378e, label %block_413789

block_4138ca:                                     ; preds = %block_4138b8
  %576 = add i64 %710, -18
  %577 = load i64, i64* %9, align 8
  br label %block_4138b8

block_413863:                                     ; preds = %block_413863, %block_41385e
  %578 = phi i64 [ %597, %block_413863 ], [ %480, %block_41385e ]
  %579 = phi %struct.Memory* [ %579, %block_413863 ], [ %1135, %block_41385e ]
  %580 = load i64, i64* %9, align 8
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  %583 = load i64, i64* %582
  %584 = add i64 %578, 9
  %585 = load i64, i64* %8, align 8, !tbaa !1240
  %586 = add i64 %585, -8
  %587 = inttoptr i64 %586 to i64*
  store i64 %584, i64* %587
  %588 = inttoptr i64 %586 to i64*
  %589 = load i64, i64* %588
  store i64 %589, i64* %3, align 8, !alias.scope !1459, !noalias !1462
  store i64 %585, i64* %8, align 8, !alias.scope !1459, !noalias !1462
  %590 = tail call i64 @fgetc(i64 %583), !noalias !1459
  %591 = trunc i64 %590 to i32
  %592 = load i64, i64* %3, align 8
  %593 = add i32 %591, -10
  %594 = icmp eq i32 %593, 0
  %595 = select i1 %594, i64 14, i64 9
  %596 = add i64 %592, %595
  %597 = add i64 %596, -18
  br i1 %594, label %block_41387a, label %block_413863

block_413b44:                                     ; preds = %block_413b36
  %598 = add i32 %454, -12
  %599 = icmp ult i32 %454, 12
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %18, align 1, !tbaa !1245
  %601 = and i32 %598, 255
  %602 = tail call i32 @llvm.ctpop.i32(i32 %601) #11
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  store i8 %605, i8* %19, align 1, !tbaa !1259
  %606 = xor i32 %598, %454
  %607 = lshr i32 %606, 4
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  store i8 %609, i8* %20, align 1, !tbaa !1263
  %610 = icmp eq i32 %598, 0
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %21, align 1, !tbaa !1260
  %612 = lshr i32 %598, 31
  %613 = trunc i32 %612 to i8
  store i8 %613, i8* %22, align 1, !tbaa !1261
  %614 = xor i32 %612, %471
  %615 = add nuw nsw i32 %614, %471
  %616 = icmp eq i32 %615, 2
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %23, align 1, !tbaa !1262
  %618 = icmp ne i8 %613, 0
  %619 = xor i1 %618, %616
  %620 = or i1 %610, %619
  %621 = select i1 %620, i64 14, i64 28
  %622 = add i64 %671, %621
  br i1 %620, label %block_413b52, label %block_413b60

block_413940:                                     ; preds = %block_413929
  %623 = add i64 %730, 5
  br label %block_413945

block_41393b:                                     ; preds = %block_413929
  %624 = add i64 %730, -18
  %625 = load i64, i64* %9, align 8
  br label %block_413929

block_413809:                                     ; preds = %block_4137f2
  %626 = add i64 %690, 5
  br label %block_41380e

block_413961:                                     ; preds = %block_413961, %block_41395c
  %627 = phi i64 [ %509, %block_41395c ], [ %646, %block_413961 ]
  %628 = phi %struct.Memory* [ %1215, %block_41395c ], [ %628, %block_413961 ]
  %629 = load i64, i64* %9, align 8
  %630 = add i64 %629, -8
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = add i64 %627, 9
  %634 = load i64, i64* %8, align 8, !tbaa !1240
  %635 = add i64 %634, -8
  %636 = inttoptr i64 %635 to i64*
  store i64 %633, i64* %636
  %637 = inttoptr i64 %635 to i64*
  %638 = load i64, i64* %637
  store i64 %638, i64* %3, align 8, !alias.scope !1464, !noalias !1467
  store i64 %634, i64* %8, align 8, !alias.scope !1464, !noalias !1467
  %639 = tail call i64 @fgetc(i64 %632), !noalias !1464
  %640 = trunc i64 %639 to i32
  %641 = load i64, i64* %3, align 8
  %642 = add i32 %640, -10
  %643 = icmp eq i32 %642, 0
  %644 = select i1 %643, i64 14, i64 9
  %645 = add i64 %641, %644
  %646 = add i64 %645, -18
  br i1 %643, label %block_413978, label %block_413961

block_413b36:                                     ; preds = %block_413b0a
  %647 = add i32 %483, -12
  %648 = icmp ult i32 %483, 12
  %649 = zext i1 %648 to i8
  store i8 %649, i8* %18, align 1, !tbaa !1245
  %650 = and i32 %647, 255
  %651 = tail call i32 @llvm.ctpop.i32(i32 %650) #11
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  store i8 %654, i8* %19, align 1, !tbaa !1259
  %655 = xor i32 %647, %483
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  store i8 %658, i8* %20, align 1, !tbaa !1263
  %659 = icmp eq i32 %647, 0
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %21, align 1, !tbaa !1260
  %661 = lshr i32 %647, 31
  %662 = trunc i32 %661 to i8
  store i8 %662, i8* %22, align 1, !tbaa !1261
  %663 = xor i32 %661, %500
  %664 = add nuw nsw i32 %663, %500
  %665 = icmp eq i32 %664, 2
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %23, align 1, !tbaa !1262
  %667 = icmp ne i8 %662, 0
  %668 = xor i1 %667, %665
  %669 = or i1 %659, %668
  %670 = select i1 %669, i64 14, i64 42
  %671 = add i64 %1081, %670
  br i1 %669, label %block_413b44, label %block_413b60

block_4137f2:                                     ; preds = %block_4137ed, %block_4137f2
  %672 = phi i64 [ %691, %block_4137f2 ], [ %993, %block_4137ed ]
  %673 = phi %struct.Memory* [ %673, %block_4137f2 ], [ %888, %block_4137ed ]
  %674 = load i64, i64* %9, align 8
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %672, 9
  %679 = load i64, i64* %8, align 8, !tbaa !1240
  %680 = add i64 %679, -8
  %681 = inttoptr i64 %680 to i64*
  store i64 %678, i64* %681
  %682 = inttoptr i64 %680 to i64*
  %683 = load i64, i64* %682
  store i64 %683, i64* %3, align 8, !alias.scope !1469, !noalias !1472
  store i64 %679, i64* %8, align 8, !alias.scope !1469, !noalias !1472
  %684 = tail call i64 @fgetc(i64 %677), !noalias !1469
  %685 = trunc i64 %684 to i32
  %686 = load i64, i64* %3, align 8
  %687 = add i32 %685, -10
  %688 = icmp eq i32 %687, 0
  %689 = select i1 %688, i64 14, i64 9
  %690 = add i64 %686, %689
  %691 = add i64 %690, -18
  br i1 %688, label %block_413809, label %block_4137f2

block_4138b8:                                     ; preds = %block_413896, %block_4138ca
  %692 = phi i64 [ %884, %block_413896 ], [ %576, %block_4138ca ]
  %693 = phi i64 [ %880, %block_413896 ], [ %577, %block_4138ca ]
  %694 = phi %struct.Memory* [ %330, %block_413896 ], [ %694, %block_4138ca ]
  %695 = add i64 %693, -8
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %692, 9
  %699 = load i64, i64* %8, align 8, !tbaa !1240
  %700 = add i64 %699, -8
  %701 = inttoptr i64 %700 to i64*
  store i64 %698, i64* %701
  %702 = inttoptr i64 %700 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %3, align 8, !alias.scope !1474, !noalias !1477
  store i64 %699, i64* %8, align 8, !alias.scope !1474, !noalias !1477
  %704 = tail call i64 @fgetc(i64 %697), !noalias !1474
  %705 = trunc i64 %704 to i32
  %706 = load i64, i64* %3, align 8
  %707 = add i32 %705, -10
  %708 = icmp eq i32 %707, 0
  %709 = select i1 %708, i64 14, i64 9
  %710 = add i64 %706, %709
  br i1 %708, label %block_4138cf, label %block_4138ca

block_4139f2:                                     ; preds = %block_4139db
  %711 = add i64 %555, 5
  br label %block_4139f7

block_413929:                                     ; preds = %block_413907, %block_41393b
  %712 = phi i64 [ %1131, %block_413907 ], [ %624, %block_41393b ]
  %713 = phi i64 [ %1127, %block_413907 ], [ %625, %block_41393b ]
  %714 = phi %struct.Memory* [ %267, %block_413907 ], [ %714, %block_41393b ]
  %715 = add i64 %713, -8
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %712, 9
  %719 = load i64, i64* %8, align 8, !tbaa !1240
  %720 = add i64 %719, -8
  %721 = inttoptr i64 %720 to i64*
  store i64 %718, i64* %721
  %722 = inttoptr i64 %720 to i64*
  %723 = load i64, i64* %722
  store i64 %723, i64* %3, align 8, !alias.scope !1479, !noalias !1482
  store i64 %719, i64* %8, align 8, !alias.scope !1479, !noalias !1482
  %724 = tail call i64 @fgetc(i64 %717), !noalias !1479
  %725 = trunc i64 %724 to i32
  %726 = load i64, i64* %3, align 8
  %727 = add i32 %725, -10
  %728 = icmp eq i32 %727, 0
  %729 = select i1 %728, i64 14, i64 9
  %730 = add i64 %726, %729
  br i1 %728, label %block_413940, label %block_41393b

block_4137e8:                                     ; preds = %block_4137d6
  %731 = add i64 %904, -18
  %732 = load i64, i64* %9, align 8
  br label %block_4137d6

block_413763:                                     ; preds = %block_413720
  %733 = add i64 %83, 17
  %734 = load i64, i64* %8, align 8, !tbaa !1240
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %733, i64* %736
  %737 = load i64, i64* %6, align 8, !alias.scope !1484, !noalias !1487
  %738 = load i64, i64* %5, align 8, !alias.scope !1484, !noalias !1487
  %739 = load i64, i64* %4, align 8, !alias.scope !1484, !noalias !1487
  %740 = load i64, i64* %10, align 8, !alias.scope !1484, !noalias !1487
  %741 = load i64, i64* %11, align 8, !alias.scope !1484, !noalias !1487
  %742 = inttoptr i64 %734 to i64*
  %743 = load i64, i64* %742
  %744 = add i64 %734, 8
  %745 = inttoptr i64 %744 to i64*
  %746 = load i64, i64* %745
  %747 = add i64 %734, 16
  %748 = inttoptr i64 %747 to i64*
  %749 = load i64, i64* %748
  %750 = add i64 %734, 24
  %751 = inttoptr i64 %750 to i64*
  %752 = load i64, i64* %751
  %753 = add i64 %734, 32
  %754 = inttoptr i64 %753 to i64*
  %755 = load i64, i64* %754
  %756 = add i64 %734, 40
  %757 = inttoptr i64 %756 to i64*
  %758 = load i64, i64* %757
  %759 = add i64 %734, 48
  %760 = inttoptr i64 %759 to i64*
  %761 = load i64, i64* %760
  %762 = add i64 %734, 56
  %763 = inttoptr i64 %762 to i64*
  %764 = load i64, i64* %763
  %765 = add i64 %734, 64
  %766 = inttoptr i64 %765 to i64*
  %767 = load i64, i64* %766
  %768 = add i64 %734, 72
  %769 = inttoptr i64 %768 to i64*
  %770 = load i64, i64* %769
  %771 = inttoptr i64 %735 to i64*
  %772 = load i64, i64* %771
  store i64 %772, i64* %3, align 8, !alias.scope !1484, !noalias !1487
  store i64 %734, i64* %8, align 8, !alias.scope !1484, !noalias !1487
  %773 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2384), i64 %737, i64 %738, i64 %739, i64 %740, i64 %741, i64 %743, i64 %746, i64 %749, i64 %752, i64 %755, i64 %758, i64 %761, i64 %764, i64 %767, i64 %770), !noalias !1484
  %774 = load i64, i64* %9, align 8
  %775 = add i64 %774, -20
  %776 = trunc i64 %773 to i32
  %777 = load i64, i64* %3, align 8
  %778 = add i64 %777, 3
  %779 = inttoptr i64 %775 to i32*
  store i32 %776, i32* %779
  br label %block_413777

block_41387a:                                     ; preds = %block_413863
  %780 = add i64 %596, 5
  br label %block_41387f

block_413b18:                                     ; preds = %block_413b0a, %block_413aee, %block_413afc
  %781 = phi i64 [ %1081, %block_413b0a ], [ %508, %block_413aee ], [ %479, %block_413afc ]
  %782 = add i64 %781, 17
  %783 = load i64, i64* %8, align 8, !tbaa !1240
  %784 = add i64 %783, -8
  %785 = inttoptr i64 %784 to i64*
  store i64 %782, i64* %785
  %786 = load i64, i64* %6, align 8, !alias.scope !1489, !noalias !1492
  %787 = load i64, i64* %5, align 8, !alias.scope !1489, !noalias !1492
  %788 = load i64, i64* %4, align 8, !alias.scope !1489, !noalias !1492
  %789 = load i64, i64* %10, align 8, !alias.scope !1489, !noalias !1492
  %790 = load i64, i64* %11, align 8, !alias.scope !1489, !noalias !1492
  %791 = inttoptr i64 %783 to i64*
  %792 = load i64, i64* %791
  %793 = add i64 %783, 8
  %794 = inttoptr i64 %793 to i64*
  %795 = load i64, i64* %794
  %796 = add i64 %783, 16
  %797 = inttoptr i64 %796 to i64*
  %798 = load i64, i64* %797
  %799 = add i64 %783, 24
  %800 = inttoptr i64 %799 to i64*
  %801 = load i64, i64* %800
  %802 = add i64 %783, 32
  %803 = inttoptr i64 %802 to i64*
  %804 = load i64, i64* %803
  %805 = add i64 %783, 40
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = add i64 %783, 48
  %809 = inttoptr i64 %808 to i64*
  %810 = load i64, i64* %809
  %811 = add i64 %783, 56
  %812 = inttoptr i64 %811 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %783, 64
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %783, 72
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = inttoptr i64 %784 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %3, align 8, !alias.scope !1489, !noalias !1492
  store i64 %783, i64* %8, align 8, !alias.scope !1489, !noalias !1492
  %822 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2445), i64 %786, i64 %787, i64 %788, i64 %789, i64 %790, i64 %792, i64 %795, i64 %798, i64 %801, i64 %804, i64 %807, i64 %810, i64 %813, i64 %816, i64 %819), !noalias !1489
  %823 = load i64, i64* %3, align 8
  store i64 1, i64* %7, align 8, !tbaa !1240
  %824 = load i64, i64* %9, align 8
  %825 = add i64 %824, -56
  %826 = trunc i64 %822 to i32
  %827 = inttoptr i64 %825 to i32*
  store i32 %826, i32* %827
  %828 = add i64 %823, 13
  %829 = load i64, i64* %8, align 8, !tbaa !1240
  %830 = add i64 %829, -8
  %831 = inttoptr i64 %830 to i64*
  store i64 %828, i64* %831
  %832 = inttoptr i64 %830 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %3, align 8, !alias.scope !1494, !noalias !1497
  store i64 %829, i64* %8, align 8, !alias.scope !1494, !noalias !1497
  %834 = tail call i64 @exit(i64 1), !noalias !1494
  store i64 %834, i64* %27, align 8, !alias.scope !1494, !noalias !1497
  %835 = load i64, i64* %3, align 8
  %836 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %835, %struct.Memory* %482)
  ret %struct.Memory* %836

block_413896:                                     ; preds = %block_41387f
  %837 = load i64, i64* %9, align 8
  %838 = add i64 %837, -8
  %839 = inttoptr i64 %838 to i64*
  %840 = load i64, i64* %839
  %841 = add i64 %347, 31
  %842 = load i64, i64* %8, align 8, !tbaa !1240
  %843 = add i64 %842, -8
  %844 = inttoptr i64 %843 to i64*
  store i64 %841, i64* %844
  %845 = load i64, i64* %4, align 8, !alias.scope !1499, !noalias !1502
  %846 = load i64, i64* %10, align 8, !alias.scope !1499, !noalias !1502
  %847 = load i64, i64* %11, align 8, !alias.scope !1499, !noalias !1502
  %848 = inttoptr i64 %842 to i64*
  %849 = load i64, i64* %848
  %850 = add i64 %842, 8
  %851 = inttoptr i64 %850 to i64*
  %852 = load i64, i64* %851
  %853 = add i64 %842, 16
  %854 = inttoptr i64 %853 to i64*
  %855 = load i64, i64* %854
  %856 = add i64 %842, 24
  %857 = inttoptr i64 %856 to i64*
  %858 = load i64, i64* %857
  %859 = add i64 %842, 32
  %860 = inttoptr i64 %859 to i64*
  %861 = load i64, i64* %860
  %862 = add i64 %842, 40
  %863 = inttoptr i64 %862 to i64*
  %864 = load i64, i64* %863
  %865 = add i64 %842, 48
  %866 = inttoptr i64 %865 to i64*
  %867 = load i64, i64* %866
  %868 = add i64 %842, 56
  %869 = inttoptr i64 %868 to i64*
  %870 = load i64, i64* %869
  %871 = add i64 %842, 64
  %872 = inttoptr i64 %871 to i64*
  %873 = load i64, i64* %872
  %874 = add i64 %842, 72
  %875 = inttoptr i64 %874 to i64*
  %876 = load i64, i64* %875
  %877 = inttoptr i64 %843 to i64*
  %878 = load i64, i64* %877
  store i64 %878, i64* %3, align 8, !alias.scope !1499, !noalias !1502
  store i64 %842, i64* %8, align 8, !alias.scope !1499, !noalias !1502
  %879 = tail call i64 @__isoc99_fscanf(i64 %840, i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2434), i64 ptrtoint (%dt_type* @dt to i64), i64 %845, i64 %846, i64 %847, i64 %849, i64 %852, i64 %855, i64 %858, i64 %861, i64 %864, i64 %867, i64 %870, i64 %873, i64 %876), !noalias !1499
  %880 = load i64, i64* %9, align 8
  %881 = add i64 %880, -12
  %882 = trunc i64 %879 to i32
  %883 = load i64, i64* %3, align 8
  %884 = add i64 %883, 3
  %885 = inttoptr i64 %881 to i32*
  store i32 %882, i32* %885
  br label %block_4138b8

block_4137d6:                                     ; preds = %block_4137aa, %block_4137e8
  %886 = phi i64 [ %991, %block_4137aa ], [ %731, %block_4137e8 ]
  %887 = phi i64 [ %987, %block_4137aa ], [ %732, %block_4137e8 ]
  %888 = phi %struct.Memory* [ %906, %block_4137aa ], [ %888, %block_4137e8 ]
  %889 = add i64 %887, -8
  %890 = inttoptr i64 %889 to i64*
  %891 = load i64, i64* %890
  %892 = add i64 %886, 9
  %893 = load i64, i64* %8, align 8, !tbaa !1240
  %894 = add i64 %893, -8
  %895 = inttoptr i64 %894 to i64*
  store i64 %892, i64* %895
  %896 = inttoptr i64 %894 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %3, align 8, !alias.scope !1504, !noalias !1507
  store i64 %893, i64* %8, align 8, !alias.scope !1504, !noalias !1507
  %898 = tail call i64 @fgetc(i64 %891), !noalias !1504
  %899 = trunc i64 %898 to i32
  %900 = load i64, i64* %3, align 8
  %901 = add i32 %899, -10
  %902 = icmp eq i32 %901, 0
  %903 = select i1 %902, i64 14, i64 9
  %904 = add i64 %900, %903
  br i1 %902, label %block_4137ed, label %block_4137e8

block_413793:                                     ; preds = %block_41378e, %block_413793
  %905 = phi i64 [ %994, %block_41378e ], [ %924, %block_413793 ]
  %906 = phi %struct.Memory* [ %559, %block_41378e ], [ %906, %block_413793 ]
  %907 = load i64, i64* %9, align 8
  %908 = add i64 %907, -8
  %909 = inttoptr i64 %908 to i64*
  %910 = load i64, i64* %909
  %911 = add i64 %905, 9
  %912 = load i64, i64* %8, align 8, !tbaa !1240
  %913 = add i64 %912, -8
  %914 = inttoptr i64 %913 to i64*
  store i64 %911, i64* %914
  %915 = inttoptr i64 %913 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %3, align 8, !alias.scope !1509, !noalias !1512
  store i64 %912, i64* %8, align 8, !alias.scope !1509, !noalias !1512
  %917 = tail call i64 @fgetc(i64 %910), !noalias !1509
  %918 = trunc i64 %917 to i32
  %919 = load i64, i64* %3, align 8
  %920 = add i32 %918, -10
  %921 = icmp eq i32 %920, 0
  %922 = select i1 %921, i64 14, i64 9
  %923 = add i64 %919, %922
  %924 = add i64 %923, -18
  br i1 %921, label %block_4137aa, label %block_413793

block_4138d4:                                     ; preds = %block_4138d4, %block_4138cf
  %925 = phi i64 [ %944, %block_4138d4 ], [ %556, %block_4138cf ]
  %926 = phi %struct.Memory* [ %926, %block_4138d4 ], [ %694, %block_4138cf ]
  %927 = load i64, i64* %9, align 8
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  %930 = load i64, i64* %929
  %931 = add i64 %925, 9
  %932 = load i64, i64* %8, align 8, !tbaa !1240
  %933 = add i64 %932, -8
  %934 = inttoptr i64 %933 to i64*
  store i64 %931, i64* %934
  %935 = inttoptr i64 %933 to i64*
  %936 = load i64, i64* %935
  store i64 %936, i64* %3, align 8, !alias.scope !1514, !noalias !1517
  store i64 %932, i64* %8, align 8, !alias.scope !1514, !noalias !1517
  %937 = tail call i64 @fgetc(i64 %930), !noalias !1514
  %938 = trunc i64 %937 to i32
  %939 = load i64, i64* %3, align 8
  %940 = add i32 %938, -10
  %941 = icmp eq i32 %940, 0
  %942 = select i1 %941, i64 14, i64 9
  %943 = add i64 %939, %942
  %944 = add i64 %943, -18
  br i1 %941, label %block_4138eb, label %block_4138d4

block_4137aa:                                     ; preds = %block_413793
  store i64 ptrtoint (%inorm_type* @inorm to i64), i64* %4, align 8, !tbaa !1240
  %945 = load i64, i64* %9, align 8
  %946 = add i64 %945, -8
  %947 = inttoptr i64 %946 to i64*
  %948 = load i64, i64* %947
  %949 = add i64 %923, 41
  %950 = load i64, i64* %8, align 8, !tbaa !1240
  %951 = add i64 %950, -8
  %952 = inttoptr i64 %951 to i64*
  store i64 %949, i64* %952
  %953 = load i64, i64* %10, align 8, !alias.scope !1519, !noalias !1522
  %954 = load i64, i64* %11, align 8, !alias.scope !1519, !noalias !1522
  %955 = inttoptr i64 %950 to i64*
  %956 = load i64, i64* %955
  %957 = add i64 %950, 8
  %958 = inttoptr i64 %957 to i64*
  %959 = load i64, i64* %958
  %960 = add i64 %950, 16
  %961 = inttoptr i64 %960 to i64*
  %962 = load i64, i64* %961
  %963 = add i64 %950, 24
  %964 = inttoptr i64 %963 to i64*
  %965 = load i64, i64* %964
  %966 = add i64 %950, 32
  %967 = inttoptr i64 %966 to i64*
  %968 = load i64, i64* %967
  %969 = add i64 %950, 40
  %970 = inttoptr i64 %969 to i64*
  %971 = load i64, i64* %970
  %972 = add i64 %950, 48
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  %975 = add i64 %950, 56
  %976 = inttoptr i64 %975 to i64*
  %977 = load i64, i64* %976
  %978 = add i64 %950, 64
  %979 = inttoptr i64 %978 to i64*
  %980 = load i64, i64* %979
  %981 = add i64 %950, 72
  %982 = inttoptr i64 %981 to i64*
  %983 = load i64, i64* %982
  %984 = inttoptr i64 %951 to i64*
  %985 = load i64, i64* %984
  store i64 %985, i64* %3, align 8, !alias.scope !1519, !noalias !1522
  store i64 %950, i64* %8, align 8, !alias.scope !1519, !noalias !1522
  %986 = tail call i64 @__isoc99_fscanf(i64 %948, i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2440), i64 ptrtoint (%ipr_type* @ipr to i64), i64 ptrtoint (%inorm_type* @inorm to i64), i64 %953, i64 %954, i64 %956, i64 %959, i64 %962, i64 %965, i64 %968, i64 %971, i64 %974, i64 %977, i64 %980, i64 %983), !noalias !1519
  %987 = load i64, i64* %9, align 8
  %988 = add i64 %987, -12
  %989 = trunc i64 %986 to i32
  %990 = load i64, i64* %3, align 8
  %991 = add i64 %990, 3
  %992 = inttoptr i64 %988 to i32*
  store i32 %989, i32* %992
  br label %block_4137d6

block_4137ed:                                     ; preds = %block_4137d6
  %993 = add i64 %904, 5
  br label %block_4137f2

block_41378e:                                     ; preds = %block_413777
  %994 = add i64 %575, 5
  br label %block_413793

block_413978:                                     ; preds = %block_413961
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2422), i64* %6, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 8), i64* %4, align 8, !tbaa !1240
  %995 = load i64, i64* %9, align 8
  %996 = add i64 %995, -8
  %997 = inttoptr i64 %996 to i64*
  %998 = load i64, i64* %997
  %999 = add i64 %995, -32
  %1000 = inttoptr i64 %999 to i64*
  store i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 24), i64* %1000
  %1001 = add i64 %995, -40
  %1002 = inttoptr i64 %1001 to i64*
  store i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 16), i64* %1002
  %1003 = inttoptr i64 %1001 to i64*
  %1004 = load i64, i64* %1003
  %1005 = add i64 %995, -48
  %1006 = inttoptr i64 %1005 to i64*
  store i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 32), i64* %1006
  %1007 = inttoptr i64 %999 to i64*
  %1008 = load i64, i64* %1007
  store i64 %1008, i64* %11, align 8, !tbaa !1240
  %1009 = inttoptr i64 %1005 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %12, align 8, !tbaa !1240
  %1011 = load i64, i64* %8, align 8
  %1012 = inttoptr i64 %1011 to i64*
  store i64 %1010, i64* %1012
  %1013 = add i64 %645, 96
  %1014 = add i64 %1011, -8
  %1015 = inttoptr i64 %1014 to i64*
  store i64 %1013, i64* %1015
  %1016 = load i64, i64* %6, align 8, !alias.scope !1524, !noalias !1527
  %1017 = load i64, i64* %4, align 8, !alias.scope !1524, !noalias !1527
  %1018 = inttoptr i64 %1011 to i64*
  %1019 = load i64, i64* %1018
  %1020 = add i64 %1011, 8
  %1021 = inttoptr i64 %1020 to i64*
  %1022 = load i64, i64* %1021
  %1023 = add i64 %1011, 16
  %1024 = inttoptr i64 %1023 to i64*
  %1025 = load i64, i64* %1024
  %1026 = add i64 %1011, 24
  %1027 = inttoptr i64 %1026 to i64*
  %1028 = load i64, i64* %1027
  %1029 = add i64 %1011, 32
  %1030 = inttoptr i64 %1029 to i64*
  %1031 = load i64, i64* %1030
  %1032 = add i64 %1011, 40
  %1033 = inttoptr i64 %1032 to i64*
  %1034 = load i64, i64* %1033
  %1035 = add i64 %1011, 48
  %1036 = inttoptr i64 %1035 to i64*
  %1037 = load i64, i64* %1036
  %1038 = add i64 %1011, 56
  %1039 = inttoptr i64 %1038 to i64*
  %1040 = load i64, i64* %1039
  %1041 = add i64 %1011, 64
  %1042 = inttoptr i64 %1041 to i64*
  %1043 = load i64, i64* %1042
  %1044 = add i64 %1011, 72
  %1045 = inttoptr i64 %1044 to i64*
  %1046 = load i64, i64* %1045
  %1047 = inttoptr i64 %1014 to i64*
  %1048 = load i64, i64* %1047
  store i64 %1048, i64* %3, align 8, !alias.scope !1524, !noalias !1527
  store i64 %1011, i64* %8, align 8, !alias.scope !1524, !noalias !1527
  %1049 = tail call i64 @__isoc99_fscanf(i64 %998, i64 %1016, i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 %1017, i64 %1004, i64 %1008, i64 %1019, i64 %1022, i64 %1025, i64 %1028, i64 %1031, i64 %1034, i64 %1037, i64 %1040, i64 %1043, i64 %1046), !noalias !1524
  %1050 = load i64, i64* %9, align 8
  %1051 = add i64 %1050, -12
  %1052 = trunc i64 %1049 to i32
  %1053 = load i64, i64* %3, align 8
  %1054 = add i64 %1053, 3
  %1055 = inttoptr i64 %1051 to i32*
  store i32 %1052, i32* %1055
  br label %block_4139db

block_413b0a:                                     ; preds = %block_413afc
  %1056 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %1057 = add i32 %1056, -4
  %1058 = icmp ult i32 %1056, 4
  %1059 = zext i1 %1058 to i8
  store i8 %1059, i8* %18, align 1, !tbaa !1245
  %1060 = and i32 %1057, 255
  %1061 = tail call i32 @llvm.ctpop.i32(i32 %1060) #11
  %1062 = trunc i32 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = xor i8 %1063, 1
  store i8 %1064, i8* %19, align 1, !tbaa !1259
  %1065 = xor i32 %1057, %1056
  %1066 = lshr i32 %1065, 4
  %1067 = trunc i32 %1066 to i8
  %1068 = and i8 %1067, 1
  store i8 %1068, i8* %20, align 1, !tbaa !1263
  %1069 = icmp eq i32 %1057, 0
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %21, align 1, !tbaa !1260
  %1071 = lshr i32 %1057, 31
  %1072 = trunc i32 %1071 to i8
  store i8 %1072, i8* %22, align 1, !tbaa !1261
  %1073 = lshr i32 %1056, 31
  %1074 = xor i32 %1071, %1073
  %1075 = add nuw nsw i32 %1074, %1073
  %1076 = icmp eq i32 %1075, 2
  %1077 = zext i1 %1076 to i8
  store i8 %1077, i8* %23, align 1, !tbaa !1262
  %1078 = icmp ne i8 %1072, 0
  %1079 = xor i1 %1078, %1076
  %1080 = select i1 %1079, i64 14, i64 44
  %1081 = add i64 %479, %1080
  br i1 %1079, label %block_413b18, label %block_413b36

block_413789:                                     ; preds = %block_413777
  %1082 = add i64 %575, -18
  %1083 = load i64, i64* %9, align 8
  br label %block_413777

block_413907:                                     ; preds = %block_4138f0
  %1084 = load i64, i64* %9, align 8
  %1085 = add i64 %1084, -8
  %1086 = inttoptr i64 %1085 to i64*
  %1087 = load i64, i64* %1086
  %1088 = add i64 %284, 31
  %1089 = load i64, i64* %8, align 8, !tbaa !1240
  %1090 = add i64 %1089, -8
  %1091 = inttoptr i64 %1090 to i64*
  store i64 %1088, i64* %1091
  %1092 = load i64, i64* %4, align 8, !alias.scope !1529, !noalias !1532
  %1093 = load i64, i64* %10, align 8, !alias.scope !1529, !noalias !1532
  %1094 = load i64, i64* %11, align 8, !alias.scope !1529, !noalias !1532
  %1095 = inttoptr i64 %1089 to i64*
  %1096 = load i64, i64* %1095
  %1097 = add i64 %1089, 8
  %1098 = inttoptr i64 %1097 to i64*
  %1099 = load i64, i64* %1098
  %1100 = add i64 %1089, 16
  %1101 = inttoptr i64 %1100 to i64*
  %1102 = load i64, i64* %1101
  %1103 = add i64 %1089, 24
  %1104 = inttoptr i64 %1103 to i64*
  %1105 = load i64, i64* %1104
  %1106 = add i64 %1089, 32
  %1107 = inttoptr i64 %1106 to i64*
  %1108 = load i64, i64* %1107
  %1109 = add i64 %1089, 40
  %1110 = inttoptr i64 %1109 to i64*
  %1111 = load i64, i64* %1110
  %1112 = add i64 %1089, 48
  %1113 = inttoptr i64 %1112 to i64*
  %1114 = load i64, i64* %1113
  %1115 = add i64 %1089, 56
  %1116 = inttoptr i64 %1115 to i64*
  %1117 = load i64, i64* %1116
  %1118 = add i64 %1089, 64
  %1119 = inttoptr i64 %1118 to i64*
  %1120 = load i64, i64* %1119
  %1121 = add i64 %1089, 72
  %1122 = inttoptr i64 %1121 to i64*
  %1123 = load i64, i64* %1122
  %1124 = inttoptr i64 %1090 to i64*
  %1125 = load i64, i64* %1124
  store i64 %1125, i64* %3, align 8, !alias.scope !1529, !noalias !1532
  store i64 %1089, i64* %8, align 8, !alias.scope !1529, !noalias !1532
  %1126 = tail call i64 @__isoc99_fscanf(i64 %1087, i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2434), i64 ptrtoint (%omega_type* @omega to i64), i64 %1092, i64 %1093, i64 %1094, i64 %1096, i64 %1099, i64 %1102, i64 %1105, i64 %1108, i64 %1111, i64 %1114, i64 %1117, i64 %1120, i64 %1123), !noalias !1529
  %1127 = load i64, i64* %9, align 8
  %1128 = add i64 %1127, -12
  %1129 = trunc i64 %1126 to i32
  %1130 = load i64, i64* %3, align 8
  %1131 = add i64 %1130, 3
  %1132 = inttoptr i64 %1128 to i32*
  store i32 %1129, i32* %1132
  br label %block_413929

block_413847:                                     ; preds = %block_413859, %block_413825
  %1133 = phi i64 [ %452, %block_413825 ], [ %510, %block_413859 ]
  %1134 = phi i64 [ %448, %block_413825 ], [ %511, %block_413859 ]
  %1135 = phi %struct.Memory* [ %310, %block_413825 ], [ %1135, %block_413859 ]
  %1136 = add i64 %1134, -8
  %1137 = inttoptr i64 %1136 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1133, 9
  %1140 = load i64, i64* %8, align 8, !tbaa !1240
  %1141 = add i64 %1140, -8
  %1142 = inttoptr i64 %1141 to i64*
  store i64 %1139, i64* %1142
  %1143 = inttoptr i64 %1141 to i64*
  %1144 = load i64, i64* %1143
  store i64 %1144, i64* %3, align 8, !alias.scope !1534, !noalias !1537
  store i64 %1140, i64* %8, align 8, !alias.scope !1534, !noalias !1537
  %1145 = tail call i64 @fgetc(i64 %1138), !noalias !1534
  %1146 = trunc i64 %1145 to i32
  %1147 = load i64, i64* %3, align 8
  %1148 = add i32 %1146, -10
  %1149 = icmp eq i32 %1148, 0
  %1150 = select i1 %1149, i64 14, i64 9
  %1151 = add i64 %1147, %1150
  br i1 %1149, label %block_41385e, label %block_413859

block_413a0e:                                     ; preds = %block_4139f7
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2438), i64* %6, align 8, !tbaa !1240
  store i64 ptrtoint (%nx0_type* @nx0 to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%ny0_type* @ny0 to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%nz0_type* @nz0 to i64), i64* %10, align 8, !tbaa !1240
  %1152 = load i64, i64* %9, align 8
  %1153 = add i64 %1152, -8
  %1154 = inttoptr i64 %1153 to i64*
  %1155 = load i64, i64* %1154
  %1156 = add i64 %306, 51
  %1157 = load i64, i64* %8, align 8, !tbaa !1240
  %1158 = add i64 %1157, -8
  %1159 = inttoptr i64 %1158 to i64*
  store i64 %1156, i64* %1159
  %1160 = load i64, i64* %11, align 8, !alias.scope !1539, !noalias !1542
  %1161 = inttoptr i64 %1157 to i64*
  %1162 = load i64, i64* %1161
  %1163 = add i64 %1157, 8
  %1164 = inttoptr i64 %1163 to i64*
  %1165 = load i64, i64* %1164
  %1166 = add i64 %1157, 16
  %1167 = inttoptr i64 %1166 to i64*
  %1168 = load i64, i64* %1167
  %1169 = add i64 %1157, 24
  %1170 = inttoptr i64 %1169 to i64*
  %1171 = load i64, i64* %1170
  %1172 = add i64 %1157, 32
  %1173 = inttoptr i64 %1172 to i64*
  %1174 = load i64, i64* %1173
  %1175 = add i64 %1157, 40
  %1176 = inttoptr i64 %1175 to i64*
  %1177 = load i64, i64* %1176
  %1178 = add i64 %1157, 48
  %1179 = inttoptr i64 %1178 to i64*
  %1180 = load i64, i64* %1179
  %1181 = add i64 %1157, 56
  %1182 = inttoptr i64 %1181 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1157, 64
  %1185 = inttoptr i64 %1184 to i64*
  %1186 = load i64, i64* %1185
  %1187 = add i64 %1157, 72
  %1188 = inttoptr i64 %1187 to i64*
  %1189 = load i64, i64* %1188
  %1190 = inttoptr i64 %1158 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %3, align 8, !alias.scope !1539, !noalias !1542
  store i64 %1157, i64* %8, align 8, !alias.scope !1539, !noalias !1542
  %1192 = tail call i64 @__isoc99_fscanf(i64 %1155, i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2438), i64 ptrtoint (%nx0_type* @nx0 to i64), i64 ptrtoint (%ny0_type* @ny0 to i64), i64 ptrtoint (%nz0_type* @nz0 to i64), i64 %1160, i64 %1162, i64 %1165, i64 %1168, i64 %1171, i64 %1174, i64 %1177, i64 %1180, i64 %1183, i64 %1186, i64 %1189), !noalias !1539
  %1193 = load i64, i64* %9, align 8
  %1194 = add i64 %1193, -12
  %1195 = trunc i64 %1192 to i32
  %1196 = load i64, i64* %3, align 8
  %1197 = inttoptr i64 %1194 to i32*
  store i32 %1195, i32* %1197
  %1198 = add i64 %1193, -8
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = add i64 %1196, 12
  %1202 = load i64, i64* %8, align 8, !tbaa !1240
  %1203 = add i64 %1202, -8
  %1204 = inttoptr i64 %1203 to i64*
  store i64 %1201, i64* %1204
  %1205 = inttoptr i64 %1203 to i64*
  %1206 = load i64, i64* %1205
  store i64 %1206, i64* %3, align 8, !alias.scope !1544, !noalias !1547
  store i64 %1202, i64* %8, align 8, !alias.scope !1544, !noalias !1547
  %1207 = tail call i64 @fclose(i64 %1200), !noalias !1544
  %1208 = load i64, i64* %9, align 8
  %1209 = add i64 %1208, -52
  %1210 = trunc i64 %1207 to i32
  %1211 = load i64, i64* %3, align 8
  %1212 = inttoptr i64 %1209 to i32*
  store i32 %1210, i32* %1212
  %1213 = add i64 %1211, 161
  br label %block_413aee

block_413945:                                     ; preds = %block_413945, %block_413940
  %1214 = phi i64 [ %623, %block_413940 ], [ %1233, %block_413945 ]
  %1215 = phi %struct.Memory* [ %714, %block_413940 ], [ %1215, %block_413945 ]
  %1216 = load i64, i64* %9, align 8
  %1217 = add i64 %1216, -8
  %1218 = inttoptr i64 %1217 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1214, 9
  %1221 = load i64, i64* %8, align 8, !tbaa !1240
  %1222 = add i64 %1221, -8
  %1223 = inttoptr i64 %1222 to i64*
  store i64 %1220, i64* %1223
  %1224 = inttoptr i64 %1222 to i64*
  %1225 = load i64, i64* %1224
  store i64 %1225, i64* %3, align 8, !alias.scope !1549, !noalias !1552
  store i64 %1221, i64* %8, align 8, !alias.scope !1549, !noalias !1552
  %1226 = tail call i64 @fgetc(i64 %1219), !noalias !1549
  %1227 = trunc i64 %1226 to i32
  %1228 = load i64, i64* %3, align 8
  %1229 = add i32 %1227, -10
  %1230 = icmp eq i32 %1229, 0
  %1231 = select i1 %1230, i64 14, i64 9
  %1232 = add i64 %1228, %1231
  %1233 = add i64 %1232, -18
  br i1 %1230, label %block_41395c, label %block_413945
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_411d40_pintgr(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_411d40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -3096
  store i64 %17, i64* %8, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = load i32, i32* bitcast (%ii1_type* @ii1 to i32*)
  %25 = add i64 %14, -24
  %26 = inttoptr i64 %25 to i32*
  store i32 %24, i32* %26
  %27 = load i32, i32* bitcast (%ii2_type* @ii2 to i32*)
  %28 = add i64 %14, -28
  %29 = inttoptr i64 %28 to i32*
  store i32 %27, i32* %29
  %30 = load i32, i32* bitcast (%ji1_type* @ji1 to i32*)
  %31 = add i64 %14, -36
  %32 = inttoptr i64 %31 to i32*
  store i32 %30, i32* %32
  %33 = load i32, i32* bitcast (%ji2_type* @ji2 to i32*)
  %34 = add i64 %14, -40
  %35 = inttoptr i64 %34 to i32*
  store i32 %33, i32* %35
  %36 = inttoptr i64 %28 to i32*
  %37 = load i32, i32* %36
  %38 = add i32 %37, -1
  %39 = load i64, i64* %9, align 8
  %40 = add i64 %39, -24
  %41 = inttoptr i64 %40 to i32*
  store i32 %38, i32* %41
  %42 = add i64 %39, -32
  %43 = inttoptr i64 %42 to i32*
  %44 = load i32, i32* %43
  %45 = add i32 %44, -1
  %46 = add i64 %39, -36
  %47 = inttoptr i64 %46 to i32*
  store i32 %45, i32* %47
  %48 = add i64 %39, -12
  %49 = add i64 %1, 76
  %50 = inttoptr i64 %48 to i32*
  store i32 0, i32* %50
  %51 = add i64 %39, -4
  %52 = bitcast [32 x %union.VectorReg]* %10 to i8*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = bitcast [32 x %union.VectorReg]* %10 to i32*
  %55 = getelementptr inbounds i8, i8* %52, i64 4
  %56 = bitcast i8* %55 to i32*
  %57 = bitcast i64* %53 to i32*
  %58 = getelementptr inbounds i8, i8* %52, i64 12
  %59 = bitcast i8* %58 to i32*
  %60 = add i64 %39, -3184
  %61 = add i64 %39, -1616
  %62 = bitcast [32 x %union.VectorReg]* %10 to double*
  br label %block_411d8c

block_4121fd:                                     ; preds = %block_4121f1
  %63 = inttoptr i64 %485 to double*
  %64 = load double, double* %63
  %65 = inttoptr i64 %491 to i32*
  %66 = load i32, i32* %65
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, 112
  %69 = add i64 %68, %499
  %70 = sext i32 %877 to i64
  %71 = shl nsw i64 %70, 3
  %72 = add i64 %71, %69
  %73 = inttoptr i64 %72 to double*
  %74 = load double, double* %73
  %75 = add i32 %877, 1
  %76 = zext i32 %75 to i64
  %77 = sext i32 %75 to i64
  %78 = shl nsw i64 %77, 3
  %79 = add i64 %69, %78
  %80 = inttoptr i64 %79 to double*
  %81 = load double, double* %80
  %82 = fadd double %74, %81
  %83 = add i32 %66, 1
  %84 = sext i32 %83 to i64
  %85 = mul nsw i64 %84, 112
  %86 = add i64 %85, %499
  store i64 %86, i64* %7, align 8, !tbaa !1240
  %87 = add i64 %71, %86
  %88 = inttoptr i64 %87 to double*
  %89 = load double, double* %88
  %90 = fadd double %82, %89
  %91 = add i64 %86, %78
  %92 = inttoptr i64 %91 to double*
  %93 = load double, double* %92
  %94 = fadd double %90, %93
  %95 = add i64 %68, %498
  %96 = add i64 %71, %95
  %97 = inttoptr i64 %96 to double*
  %98 = load double, double* %97
  %99 = fadd double %94, %98
  %100 = add i64 %95, %78
  %101 = inttoptr i64 %100 to double*
  %102 = load double, double* %101
  %103 = fadd double %99, %102
  %104 = add i64 %85, %498
  store i64 %104, i64* %6, align 8, !tbaa !1240
  %105 = add i64 %71, %104
  %106 = inttoptr i64 %105 to double*
  %107 = load double, double* %106
  %108 = fadd double %103, %107
  store i64 %76, i64* %1314, align 8, !tbaa !1240
  %109 = add i64 %104, %78
  %110 = inttoptr i64 %109 to double*
  %111 = load double, double* %110
  %112 = fadd double %108, %111
  store double %112, double* %1327, align 1, !tbaa !1264
  store i64 0, i64* %1328, align 1, !tbaa !1264
  %113 = fadd double %64, %112
  store double %113, double* %62, align 1, !tbaa !1264
  store i64 0, i64* %53, align 1, !tbaa !1264
  %114 = inttoptr i64 %485 to double*
  store double %113, double* %114
  %115 = inttoptr i64 %496 to i32*
  %116 = load i32, i32* %115
  %117 = add i32 %116, 1
  %118 = inttoptr i64 %496 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %891, -12
  br label %block_4121f1

block_4123e8:                                     ; preds = %block_4123f4, %block_4123e2
  %120 = phi i64 [ %140, %block_4123e2 ], [ %223, %block_4123f4 ]
  %121 = phi %struct.Memory* [ %461, %block_4123e2 ], [ %121, %block_4123f4 ]
  %122 = inttoptr i64 %413 to i32*
  %123 = load i32, i32* %122
  %124 = inttoptr i64 %240 to i32*
  %125 = load i32, i32* %124
  %126 = sub i32 %123, %125
  %127 = lshr i32 %126, 31
  %128 = lshr i32 %123, 31
  %129 = lshr i32 %125, 31
  %130 = xor i32 %129, %128
  %131 = xor i32 %127, %128
  %132 = add nuw nsw i32 %131, %130
  %133 = icmp eq i32 %132, 2
  %134 = icmp ne i32 %127, 0
  %135 = xor i1 %134, %133
  %136 = select i1 %135, i64 12, i64 471
  %137 = add i64 %120, %136
  br i1 %135, label %block_4123f4, label %block_4125bf

block_4123e2:                                     ; preds = %block_4123d2
  %138 = inttoptr i64 %239 to i32*
  %139 = load i32, i32* %138
  %140 = add i64 %477, 6
  %141 = inttoptr i64 %413 to i32*
  store i32 %139, i32* %141
  br label %block_4123e8

block_4129aa:                                     ; preds = %block_4129a0
  %142 = add i64 %343, 7
  %143 = inttoptr i64 %320 to i32*
  store i32 0, i32* %143
  br label %block_4129b1

block_4125d7:                                     ; preds = %block_4123b8, %block_4125d2
  %144 = phi i64 [ %235, %block_4123b8 ], [ %173, %block_4125d2 ]
  %145 = phi i64 [ %404, %block_4123b8 ], [ %174, %block_4125d2 ]
  %146 = phi %struct.Memory* [ %626, %block_4123b8 ], [ %461, %block_4125d2 ]
  %147 = add i64 %145, -32
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = load i32, i32* bitcast (%ji2_type* @ji2 to i32*)
  %151 = sub i32 %149, %150
  %152 = icmp eq i32 %151, 0
  %153 = select i1 %152, i64 16, i64 583
  %154 = add i64 %144, %153
  br i1 %152, label %block_4125e7, label %block_41281e

block_412c4e:                                     ; preds = %block_412c44, %block_412e63
  %155 = phi i64 [ %797, %block_412c44 ], [ %645, %block_412e63 ]
  %156 = phi %struct.Memory* [ %865, %block_412c44 ], [ %589, %block_412e63 ]
  %157 = inttoptr i64 %796 to i32*
  %158 = load i32, i32* %157
  %159 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %160 = sub i32 %158, %159
  %161 = lshr i32 %160, 31
  %162 = trunc i32 %161 to i8
  %163 = lshr i32 %158, 31
  %164 = lshr i32 %159, 31
  %165 = xor i32 %164, %163
  %166 = xor i32 %161, %163
  %167 = add nuw nsw i32 %166, %165
  %168 = icmp eq i32 %167, 2
  %169 = icmp ne i8 %162, 0
  %170 = xor i1 %169, %168
  %171 = select i1 %170, i64 16, i64 552
  %172 = add i64 %155, %171
  br i1 %170, label %block_412c5e, label %block_412e76

block_4125d2:                                     ; preds = %block_4123d2
  %173 = add i64 %477, 5
  %174 = load i64, i64* %9, align 8
  br label %block_4125d7

block_4123f4:                                     ; preds = %block_4123e8
  %175 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %175, double* %62, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1326, align 1, !tbaa !1264
  %176 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  %177 = inttoptr i64 %410 to i32*
  %178 = load i32, i32* %177
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %179, 6760
  %181 = add i64 %180, ptrtoint (%u_type* @u to i64)
  %182 = inttoptr i64 %228 to i32*
  %183 = load i32, i32* %182
  %184 = sext i32 %183 to i64
  %185 = mul nsw i64 %184, 520
  %186 = add i64 %185, %181
  %187 = sext i32 %123 to i64
  %188 = mul nsw i64 %187, 40
  %189 = add i64 %188, %186
  %190 = add i64 %189, 32
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = add i64 %189, 8
  %194 = inttoptr i64 %193 to double*
  %195 = load double, double* %194
  %196 = fmul double %195, %195
  %197 = add i64 %189, 16
  %198 = inttoptr i64 %197 to double*
  %199 = load double, double* %198
  %200 = fmul double %199, %199
  %201 = fadd double %196, %200
  %202 = add i64 %189, 24
  %203 = inttoptr i64 %202 to double*
  %204 = load double, double* %203
  store i64 %189, i64* %7, align 8, !tbaa !1240
  %205 = fmul double %204, %204
  store double %205, double* %1336, align 1, !tbaa !1264
  store i64 0, i64* %1337, align 1, !tbaa !1264
  %206 = fadd double %201, %205
  store double %206, double* %1333, align 1, !tbaa !1264
  store i64 0, i64* %1334, align 1, !tbaa !1264
  %207 = fmul double %176, %206
  store i64 %188, i64* %6, align 8, !tbaa !1240
  %208 = inttoptr i64 %189 to double*
  %209 = load double, double* %208
  %210 = fdiv double %207, %209
  store double %210, double* %1327, align 1, !tbaa !1264
  store i64 0, i64* %1328, align 1, !tbaa !1264
  %211 = fsub double %192, %210
  store double %211, double* %1330, align 1, !tbaa !1264
  store i64 0, i64* %1331, align 1, !tbaa !1264
  %212 = load double, double* %62, align 1
  %213 = fmul double %212, %211
  store double %213, double* %62, align 1, !tbaa !1264
  %214 = mul nsw i64 %179, 112
  %215 = add i64 %214, %415
  %216 = shl nsw i64 %187, 3
  %217 = add i64 %216, %215
  %218 = inttoptr i64 %217 to double*
  store double %213, double* %218
  %219 = inttoptr i64 %413 to i32*
  %220 = load i32, i32* %219
  %221 = add i32 %220, 1
  %222 = inttoptr i64 %413 to i32*
  store i32 %221, i32* %222
  %223 = add i64 %137, -12
  br label %block_4123e8

block_412fc1:                                     ; preds = %block_412eab
  %224 = inttoptr i64 %524 to i32*
  %225 = load i32, i32* %224
  %226 = add i32 %225, 1
  %227 = inttoptr i64 %524 to i32*
  store i32 %226, i32* %227
  br label %block_412e90

block_4123b8:                                     ; preds = %block_412343
  %228 = add i64 %404, -28
  %229 = inttoptr i64 %228 to i32*
  %230 = load i32, i32* %229
  %231 = load i32, i32* bitcast (%ji1_type* @ji1 to i32*)
  %232 = sub i32 %230, %231
  %233 = icmp eq i32 %232, 0
  %234 = select i1 %233, i64 16, i64 543
  %235 = add i64 %640, %234
  br i1 %233, label %block_4123c8, label %block_4125d7

block_4123c8:                                     ; preds = %block_4123b8
  %236 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %237 = add i64 %235, 10
  %238 = inttoptr i64 %410 to i32*
  store i32 %236, i32* %238
  %239 = add i64 %404, -16
  %240 = add i64 %404, -20
  br label %block_4123d2

block_4129b1:                                     ; preds = %block_4129bb, %block_4129aa
  %241 = phi i64 [ %142, %block_4129aa ], [ %459, %block_4129bb ]
  %242 = phi %struct.Memory* [ %329, %block_4129aa ], [ %242, %block_4129bb ]
  %243 = inttoptr i64 %320 to i32*
  %244 = load i32, i32* %243
  %245 = add i32 %244, -13
  %246 = lshr i32 %245, 31
  %247 = lshr i32 %244, 31
  %248 = xor i32 %246, %247
  %249 = add nuw nsw i32 %248, %247
  %250 = icmp eq i32 %249, 2
  %251 = icmp ne i32 %245, 0
  %252 = icmp ne i32 %246, 0
  %253 = xor i1 %252, %250
  %254 = xor i1 %253, true
  %255 = and i1 %251, %254
  %256 = select i1 %255, i64 81, i64 10
  %257 = add i64 %241, %256
  br i1 %255, label %block_412a02, label %block_4129bb

block_411da7:                                     ; preds = %block_411d9d
  store i32 0, i32* %54, align 1, !tbaa !1266
  store i32 0, i32* %56, align 1, !tbaa !1266
  store i32 0, i32* %57, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  %258 = inttoptr i64 %48 to i32*
  %259 = load i32, i32* %258
  %260 = sext i32 %259 to i64
  %261 = mul nsw i64 %260, 112
  %262 = add i64 %261, %61
  %263 = sext i32 %1215 to i64
  store i64 %263, i64* %6, align 8, !tbaa !1240
  %264 = shl nsw i64 %263, 3
  %265 = add i64 %264, %262
  %266 = load double, double* %62, align 1
  %267 = inttoptr i64 %265 to double*
  store double %266, double* %267
  %268 = inttoptr i64 %48 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  %271 = mul nsw i64 %270, 112
  %272 = add i64 %271, %60
  %273 = inttoptr i64 %51 to i32*
  %274 = load i32, i32* %273
  %275 = sext i32 %274 to i64
  %276 = shl nsw i64 %275, 3
  %277 = add i64 %276, %272
  %278 = inttoptr i64 %277 to double*
  store double %266, double* %278
  %279 = inttoptr i64 %51 to i32*
  %280 = load i32, i32* %279
  %281 = add i32 %280, 1
  %282 = inttoptr i64 %51 to i32*
  store i32 %281, i32* %282
  %283 = add i64 %1228, -10
  br label %block_411d9d

block_4123a5:                                     ; preds = %block_412354
  %284 = inttoptr i64 %410 to i32*
  %285 = load i32, i32* %284
  %286 = add i32 %285, 1
  %287 = inttoptr i64 %410 to i32*
  store i32 %286, i32* %287
  %288 = add i64 %662, -98
  br label %block_412343

block_411d96:                                     ; preds = %block_411d8c
  %289 = add i64 %307, 7
  %290 = inttoptr i64 %51 to i32*
  store i32 0, i32* %290
  br label %block_411d9d

block_411d8c:                                     ; preds = %block_411dee, %block_411d40
  %291 = phi i64 [ %49, %block_411d40 ], [ %398, %block_411dee ]
  %292 = phi %struct.Memory* [ %2, %block_411d40 ], [ %1213, %block_411dee ]
  %293 = inttoptr i64 %48 to i32*
  %294 = load i32, i32* %293
  %295 = add i32 %294, -13
  %296 = icmp eq i32 %295, 0
  %297 = lshr i32 %295, 31
  %298 = trunc i32 %297 to i8
  %299 = lshr i32 %294, 31
  %300 = xor i32 %297, %299
  %301 = add nuw nsw i32 %300, %299
  %302 = icmp eq i32 %301, 2
  %303 = icmp ne i8 %298, 0
  %304 = xor i1 %303, %302
  %305 = or i1 %296, %304
  %306 = select i1 %305, i64 10, i64 117
  %307 = add i64 %291, %306
  br i1 %305, label %block_411d96, label %block_411e01

block_412977:                                     ; preds = %block_412833
  %308 = load double, double* bitcast (%dxi_type* @dxi to double*)
  %309 = load double, double* bitcast (%dzeta_type* @dzeta to double*)
  %310 = fmul double %308, %309
  %311 = load i64, i64* %9, align 8
  %312 = add i64 %311, -3200
  %313 = inttoptr i64 %312 to double*
  %314 = load double, double* %313
  %315 = fmul double %310, %314
  store double %315, double* %62, align 1, !tbaa !1264
  store i64 0, i64* %53, align 1, !tbaa !1264
  %316 = inttoptr i64 %312 to double*
  store double %315, double* %316
  %317 = add i64 %311, -12
  %318 = add i64 %910, 41
  %319 = inttoptr i64 %317 to i32*
  store i32 0, i32* %319
  %320 = add i64 %311, -4
  %321 = add i64 %311, -3184
  %322 = add i64 %311, -1616
  br label %block_4129a0

block_412964:                                     ; preds = %block_41284e
  %323 = inttoptr i64 %1111 to i32*
  %324 = load i32, i32* %323
  %325 = add i32 %324, 1
  %326 = inttoptr i64 %1111 to i32*
  store i32 %325, i32* %326
  %327 = add i64 %1103, -305
  br label %block_412833

block_4129a0:                                     ; preds = %block_412a02, %block_412977
  %328 = phi i64 [ %318, %block_412977 ], [ %1313, %block_412a02 ]
  %329 = phi %struct.Memory* [ %893, %block_412977 ], [ %242, %block_412a02 ]
  %330 = inttoptr i64 %317 to i32*
  %331 = load i32, i32* %330
  %332 = add i32 %331, -13
  %333 = icmp eq i32 %332, 0
  %334 = lshr i32 %332, 31
  %335 = lshr i32 %331, 31
  %336 = xor i32 %334, %335
  %337 = add nuw nsw i32 %336, %335
  %338 = icmp eq i32 %337, 2
  %339 = icmp ne i32 %334, 0
  %340 = xor i1 %339, %338
  %341 = or i1 %333, %340
  %342 = select i1 %341, i64 10, i64 117
  %343 = add i64 %328, %342
  br i1 %341, label %block_4129aa, label %block_412a15

block_41235e:                                     ; preds = %block_412354
  store i32 0, i32* %54, align 1, !tbaa !1266
  store i32 0, i32* %56, align 1, !tbaa !1266
  store i32 0, i32* %57, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  %344 = inttoptr i64 %410 to i32*
  %345 = load i32, i32* %344
  %346 = sext i32 %345 to i64
  %347 = mul nsw i64 %346, 112
  %348 = add i64 %347, %415
  %349 = sext i32 %649 to i64
  store i64 %349, i64* %6, align 8, !tbaa !1240
  %350 = shl nsw i64 %349, 3
  %351 = add i64 %350, %348
  %352 = load double, double* %62, align 1
  %353 = inttoptr i64 %351 to double*
  store double %352, double* %353
  %354 = inttoptr i64 %410 to i32*
  %355 = load i32, i32* %354
  %356 = sext i32 %355 to i64
  %357 = mul nsw i64 %356, 112
  %358 = add i64 %357, %414
  %359 = inttoptr i64 %413 to i32*
  %360 = load i32, i32* %359
  %361 = sext i32 %360 to i64
  %362 = shl nsw i64 %361, 3
  %363 = add i64 %362, %358
  %364 = inttoptr i64 %363 to double*
  store double %352, double* %364
  %365 = inttoptr i64 %413 to i32*
  %366 = load i32, i32* %365
  %367 = add i32 %366, 1
  %368 = inttoptr i64 %413 to i32*
  store i32 %367, i32* %368
  %369 = add i64 %662, -10
  br label %block_412354

block_412601:                                     ; preds = %block_4125f1
  %370 = inttoptr i64 %425 to i32*
  %371 = load i32, i32* %370
  %372 = add i64 %393, 6
  %373 = inttoptr i64 %426 to i32*
  store i32 %371, i32* %373
  br label %block_412607

block_41234d:                                     ; preds = %block_412343
  %374 = add i64 %640, 7
  %375 = inttoptr i64 %413 to i32*
  store i32 0, i32* %375
  br label %block_412354

block_4125f1:                                     ; preds = %block_412806, %block_4125e7
  %376 = phi i64 [ %423, %block_4125e7 ], [ %1308, %block_412806 ]
  %377 = phi %struct.Memory* [ %146, %block_4125e7 ], [ %936, %block_412806 ]
  %378 = inttoptr i64 %422 to i32*
  %379 = load i32, i32* %378
  %380 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %381 = sub i32 %379, %380
  %382 = lshr i32 %381, 31
  %383 = trunc i32 %382 to i8
  %384 = lshr i32 %379, 31
  %385 = lshr i32 %380, 31
  %386 = xor i32 %385, %384
  %387 = xor i32 %382, %384
  %388 = add nuw nsw i32 %387, %386
  %389 = icmp eq i32 %388, 2
  %390 = icmp ne i8 %383, 0
  %391 = xor i1 %390, %389
  %392 = select i1 %391, i64 16, i64 552
  %393 = add i64 %376, %392
  br i1 %391, label %block_412601, label %block_412819

block_411dee:                                     ; preds = %block_411d9d
  %394 = inttoptr i64 %48 to i32*
  %395 = load i32, i32* %394
  %396 = add i32 %395, 1
  %397 = inttoptr i64 %48 to i32*
  store i32 %396, i32* %397
  %398 = add i64 %1228, -98
  br label %block_411d8c

block_412c2f:                                     ; preds = %block_412a2f
  %399 = add i64 %930, 5
  %400 = load i64, i64* %9, align 8
  br label %block_412c34

block_41231a:                                     ; preds = %block_4121df
  %401 = load double, double* bitcast (%dxi_type* @dxi to double*)
  %402 = load double, double* bitcast (%deta_type* @deta to double*)
  %403 = fmul double %401, %402
  %404 = load i64, i64* %9, align 8
  %405 = add i64 %404, -3192
  %406 = inttoptr i64 %405 to double*
  %407 = load double, double* %406
  %408 = fmul double %403, %407
  store double %408, double* %62, align 1, !tbaa !1264
  store i64 0, i64* %53, align 1, !tbaa !1264
  %409 = inttoptr i64 %405 to double*
  store double %408, double* %409
  %410 = add i64 %404, -12
  %411 = add i64 %624, 41
  %412 = inttoptr i64 %410 to i32*
  store i32 0, i32* %412
  %413 = add i64 %404, -4
  %414 = add i64 %404, -3184
  %415 = add i64 %404, -1616
  br label %block_412343

block_412307:                                     ; preds = %block_4121f1
  %416 = inttoptr i64 %491 to i32*
  %417 = load i32, i32* %416
  %418 = add i32 %417, 1
  %419 = inttoptr i64 %491 to i32*
  store i32 %418, i32* %419
  %420 = add i64 %891, -296
  br label %block_4121df

block_4125e7:                                     ; preds = %block_4125d7
  %421 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %422 = add i64 %145, -12
  %423 = add i64 %154, 10
  %424 = inttoptr i64 %422 to i32*
  store i32 %421, i32* %424
  %425 = add i64 %145, -16
  %426 = add i64 %145, -4
  %427 = add i64 %145, -20
  %428 = add i64 %145, -3184
  br label %block_4125f1

block_4121bb:                                     ; preds = %block_411e19
  %429 = inttoptr i64 %1321 to i32*
  %430 = load i32, i32* %429
  %431 = add i32 %430, 1
  %432 = inttoptr i64 %1321 to i32*
  store i32 %431, i32* %432
  %433 = add i64 %1199, -948
  br label %block_411e07

block_4129bb:                                     ; preds = %block_4129b1
  store i32 0, i32* %54, align 1, !tbaa !1266
  store i32 0, i32* %56, align 1, !tbaa !1266
  store i32 0, i32* %57, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  %434 = inttoptr i64 %317 to i32*
  %435 = load i32, i32* %434
  %436 = sext i32 %435 to i64
  %437 = mul nsw i64 %436, 112
  %438 = add i64 %437, %322
  %439 = sext i32 %244 to i64
  store i64 %439, i64* %6, align 8, !tbaa !1240
  %440 = shl nsw i64 %439, 3
  %441 = add i64 %440, %438
  %442 = load double, double* %62, align 1
  %443 = inttoptr i64 %441 to double*
  store double %442, double* %443
  %444 = inttoptr i64 %317 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 112
  %448 = add i64 %447, %321
  %449 = inttoptr i64 %320 to i32*
  %450 = load i32, i32* %449
  %451 = sext i32 %450 to i64
  %452 = shl nsw i64 %451, 3
  %453 = add i64 %452, %448
  %454 = inttoptr i64 %453 to double*
  store double %442, double* %454
  %455 = inttoptr i64 %320 to i32*
  %456 = load i32, i32* %455
  %457 = add i32 %456, 1
  %458 = inttoptr i64 %320 to i32*
  store i32 %457, i32* %458
  %459 = add i64 %257, -10
  br label %block_4129b1

block_4123d2:                                     ; preds = %block_4125bf, %block_4123c8
  %460 = phi i64 [ %237, %block_4123c8 ], [ %1181, %block_4125bf ]
  %461 = phi %struct.Memory* [ %626, %block_4123c8 ], [ %121, %block_4125bf ]
  %462 = inttoptr i64 %410 to i32*
  %463 = load i32, i32* %462
  %464 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %465 = sub i32 %463, %464
  %466 = lshr i32 %465, 31
  %467 = trunc i32 %466 to i8
  %468 = lshr i32 %463, 31
  %469 = lshr i32 %464, 31
  %470 = xor i32 %469, %468
  %471 = xor i32 %466, %468
  %472 = add nuw nsw i32 %471, %470
  %473 = icmp eq i32 %472, 2
  %474 = icmp ne i8 %467, 0
  %475 = xor i1 %474, %473
  %476 = select i1 %475, i64 16, i64 512
  %477 = add i64 %460, %476
  br i1 %475, label %block_4123e2, label %block_4125d2

block_412a25:                                     ; preds = %block_412a15
  %478 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %479 = add i64 %1207, 10
  %480 = inttoptr i64 %317 to i32*
  store i32 %478, i32* %480
  %481 = add i64 %311, -28
  %482 = add i64 %311, -8
  %483 = add i64 %311, -32
  br label %block_412a2f

block_4121ce:                                     ; preds = %block_411e07
  store i32 0, i32* %54, align 1, !tbaa !1266
  store i32 0, i32* %56, align 1, !tbaa !1266
  store i32 0, i32* %57, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  %484 = load i64, i64* %9, align 8
  %485 = add i64 %484, -3192
  %486 = load double, double* %62, align 1
  %487 = inttoptr i64 %485 to double*
  store double %486, double* %487
  %488 = add i64 %484, -28
  %489 = inttoptr i64 %488 to i32*
  %490 = load i32, i32* %489
  %491 = add i64 %484, -8
  %492 = add i64 %1303, 17
  %493 = inttoptr i64 %491 to i32*
  store i32 %490, i32* %493
  %494 = add i64 %484, -36
  %495 = add i64 %484, -16
  %496 = add i64 %484, -4
  %497 = add i64 %484, -24
  %498 = add i64 %484, -3184
  %499 = add i64 %484, -1616
  br label %block_4121df

block_412eab:                                     ; preds = %block_412eb7, %block_412ea5
  %500 = phi %struct.Memory* [ %1071, %block_412ea5 ], [ %500, %block_412eb7 ]
  %501 = inttoptr i64 %527 to i32*
  %502 = load i32, i32* %501
  %503 = inttoptr i64 %528 to i32*
  %504 = load i32, i32* %503
  %505 = sub i32 %502, %504
  %506 = lshr i32 %505, 31
  %507 = lshr i32 %502, 31
  %508 = lshr i32 %504, 31
  %509 = xor i32 %508, %507
  %510 = xor i32 %506, %507
  %511 = add nuw nsw i32 %510, %509
  %512 = icmp eq i32 %511, 2
  %513 = icmp ne i32 %506, 0
  %514 = xor i1 %513, %512
  br i1 %514, label %block_412eb7, label %block_412fc1

block_412ea5:                                     ; preds = %block_412e90
  %515 = inttoptr i64 %526 to i32*
  %516 = load i32, i32* %515
  %517 = inttoptr i64 %527 to i32*
  store i32 %516, i32* %517
  br label %block_412eab

block_412e7b:                                     ; preds = %block_412c34, %block_412e76
  %518 = phi i64 [ %864, %block_412c34 ], [ %531, %block_412e76 ]
  %519 = phi %struct.Memory* [ %865, %block_412c34 ], [ %156, %block_412e76 ]
  store i32 0, i32* %54, align 1, !tbaa !1266
  store i32 0, i32* %56, align 1, !tbaa !1266
  store i32 0, i32* %57, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  %520 = add i64 %518, -3208
  %521 = load double, double* %62, align 1
  %522 = inttoptr i64 %520 to double*
  store double %521, double* %522
  %523 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %524 = add i64 %518, -12
  %525 = inttoptr i64 %524 to i32*
  store i32 %523, i32* %525
  %526 = add i64 %518, -28
  %527 = add i64 %518, -8
  %528 = add i64 %518, -36
  %529 = add i64 %518, -3184
  %530 = add i64 %518, -1616
  br label %block_412e90

block_412e76:                                     ; preds = %block_412c4e
  %531 = load i64, i64* %9, align 8
  br label %block_412e7b

block_412c70:                                     ; preds = %block_412c64
  %532 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %532, double* %62, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1326, align 1, !tbaa !1264
  store i64 ptrtoint (%u_type* @u to i64), i64* %5, align 8, !tbaa !1240
  %533 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %533, double* %1327, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1329, align 1, !tbaa !1264
  %534 = inttoptr i64 %796 to i32*
  %535 = load i32, i32* %534
  %536 = sext i32 %535 to i64
  %537 = mul nsw i64 %536, 6760
  %538 = add i64 %537, ptrtoint (%u_type* @u to i64)
  %539 = sext i32 %591 to i64
  %540 = mul nsw i64 %539, 520
  %541 = add i64 %540, %538
  %542 = inttoptr i64 %866 to i32*
  %543 = load i32, i32* %542
  %544 = add i32 %543, -1
  %545 = zext i32 %544 to i64
  %546 = sext i32 %544 to i64
  %547 = mul nsw i64 %546, 40
  %548 = add i64 %547, %541
  %549 = add i64 %548, 32
  %550 = inttoptr i64 %549 to double*
  %551 = load double, double* %550
  %552 = add i64 %548, 8
  %553 = inttoptr i64 %552 to double*
  %554 = load double, double* %553
  %555 = fmul double %554, %554
  %556 = add i64 %548, 16
  %557 = inttoptr i64 %556 to double*
  %558 = load double, double* %557
  %559 = fmul double %558, %558
  %560 = fadd double %555, %559
  %561 = add i64 %548, 24
  %562 = inttoptr i64 %561 to double*
  %563 = load double, double* %562
  store i64 %548, i64* %7, align 8, !tbaa !1240
  %564 = fmul double %563, %563
  store double %564, double* %1336, align 1, !tbaa !1264
  store i64 0, i64* %1337, align 1, !tbaa !1264
  %565 = fadd double %560, %564
  store double %565, double* %1333, align 1, !tbaa !1264
  store i64 0, i64* %1334, align 1, !tbaa !1264
  %566 = load double, double* %1327, align 1
  %567 = fmul double %566, %565
  %568 = load i64, i64* %5, align 8
  %569 = add i64 %537, %568
  %570 = add i64 %540, %569
  store i64 %545, i64* %1314, align 8, !tbaa !1240
  store i64 %547, i64* %6, align 8, !tbaa !1240
  %571 = add i64 %547, %570
  %572 = inttoptr i64 %571 to double*
  %573 = load double, double* %572
  %574 = fdiv double %567, %573
  store double %574, double* %1327, align 1, !tbaa !1264
  %575 = fsub double %551, %574
  store double %575, double* %1330, align 1, !tbaa !1264
  store i64 0, i64* %1331, align 1, !tbaa !1264
  %576 = load double, double* %62, align 1
  %577 = fmul double %576, %575
  store double %577, double* %62, align 1, !tbaa !1264
  %578 = mul nsw i64 %536, 112
  %579 = add i64 %578, %802
  %580 = shl nsw i64 %539, 3
  %581 = add i64 %580, %579
  %582 = inttoptr i64 %581 to double*
  store double %577, double* %582
  %583 = inttoptr i64 %800 to i32*
  %584 = load i32, i32* %583
  %585 = add i32 %584, 1
  %586 = inttoptr i64 %800 to i32*
  store i32 %585, i32* %586
  %587 = add i64 %605, -12
  br label %block_412c64

block_412c64:                                     ; preds = %block_412c5e, %block_412c70
  %588 = phi i64 [ %665, %block_412c5e ], [ %587, %block_412c70 ]
  %589 = phi %struct.Memory* [ %156, %block_412c5e ], [ %589, %block_412c70 ]
  %590 = inttoptr i64 %800 to i32*
  %591 = load i32, i32* %590
  %592 = inttoptr i64 %801 to i32*
  %593 = load i32, i32* %592
  %594 = sub i32 %591, %593
  %595 = lshr i32 %594, 31
  %596 = lshr i32 %591, 31
  %597 = lshr i32 %593, 31
  %598 = xor i32 %597, %596
  %599 = xor i32 %595, %596
  %600 = add nuw nsw i32 %599, %598
  %601 = icmp eq i32 %600, 2
  %602 = icmp ne i32 %595, 0
  %603 = xor i1 %602, %601
  %604 = select i1 %603, i64 12, i64 511
  %605 = add i64 %588, %604
  br i1 %603, label %block_412c70, label %block_412e63

block_4121df:                                     ; preds = %block_4121ce, %block_412307
  %606 = phi i64 [ %492, %block_4121ce ], [ %420, %block_412307 ]
  %607 = phi %struct.Memory* [ %1286, %block_4121ce ], [ %875, %block_412307 ]
  %608 = inttoptr i64 %491 to i32*
  %609 = load i32, i32* %608
  %610 = inttoptr i64 %494 to i32*
  %611 = load i32, i32* %610
  %612 = sub i32 %609, %611
  %613 = lshr i32 %612, 31
  %614 = trunc i32 %613 to i8
  %615 = lshr i32 %609, 31
  %616 = lshr i32 %611, 31
  %617 = xor i32 %616, %615
  %618 = xor i32 %613, %615
  %619 = add nuw nsw i32 %618, %617
  %620 = icmp eq i32 %619, 2
  %621 = icmp ne i8 %614, 0
  %622 = xor i1 %621, %620
  %623 = select i1 %622, i64 12, i64 315
  %624 = add i64 %606, %623
  br i1 %622, label %block_4121eb, label %block_41231a

block_412343:                                     ; preds = %block_41231a, %block_4123a5
  %625 = phi i64 [ %411, %block_41231a ], [ %288, %block_4123a5 ]
  %626 = phi %struct.Memory* [ %607, %block_41231a ], [ %647, %block_4123a5 ]
  %627 = inttoptr i64 %410 to i32*
  %628 = load i32, i32* %627
  %629 = add i32 %628, -13
  %630 = icmp eq i32 %629, 0
  %631 = lshr i32 %629, 31
  %632 = lshr i32 %628, 31
  %633 = xor i32 %631, %632
  %634 = add nuw nsw i32 %633, %632
  %635 = icmp eq i32 %634, 2
  %636 = icmp ne i32 %631, 0
  %637 = xor i1 %636, %635
  %638 = or i1 %630, %637
  %639 = select i1 %638, i64 10, i64 117
  %640 = add i64 %625, %639
  br i1 %638, label %block_41234d, label %block_4123b8

block_412e63:                                     ; preds = %block_412c64
  %641 = inttoptr i64 %796 to i32*
  %642 = load i32, i32* %641
  %643 = add i32 %642, 1
  %644 = inttoptr i64 %796 to i32*
  store i32 %643, i32* %644
  %645 = add i64 %605, -533
  br label %block_412c4e

block_412354:                                     ; preds = %block_41234d, %block_41235e
  %646 = phi i64 [ %374, %block_41234d ], [ %369, %block_41235e ]
  %647 = phi %struct.Memory* [ %626, %block_41234d ], [ %647, %block_41235e ]
  %648 = inttoptr i64 %413 to i32*
  %649 = load i32, i32* %648
  %650 = add i32 %649, -13
  %651 = lshr i32 %650, 31
  %652 = lshr i32 %649, 31
  %653 = xor i32 %651, %652
  %654 = add nuw nsw i32 %653, %652
  %655 = icmp eq i32 %654, 2
  %656 = icmp ne i32 %650, 0
  %657 = icmp ne i32 %651, 0
  %658 = xor i1 %657, %655
  %659 = xor i1 %658, true
  %660 = and i1 %656, %659
  %661 = select i1 %660, i64 81, i64 10
  %662 = add i64 %646, %661
  br i1 %660, label %block_4123a5, label %block_41235e

block_412c5e:                                     ; preds = %block_412c4e
  %663 = inttoptr i64 %799 to i32*
  %664 = load i32, i32* %663
  %665 = add i64 %172, 6
  %666 = inttoptr i64 %800 to i32*
  store i32 %664, i32* %666
  br label %block_412c64

block_41285a:                                     ; preds = %block_41284e
  %667 = inttoptr i64 %1107 to double*
  %668 = load double, double* %667
  %669 = inttoptr i64 %1111 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  %672 = mul nsw i64 %671, 112
  %673 = add i64 %672, %1118
  %674 = sext i32 %1089 to i64
  %675 = shl nsw i64 %674, 3
  %676 = add i64 %675, %673
  %677 = inttoptr i64 %676 to double*
  %678 = load double, double* %677
  %679 = add i32 %1089, 1
  %680 = zext i32 %679 to i64
  %681 = sext i32 %679 to i64
  %682 = shl nsw i64 %681, 3
  %683 = add i64 %673, %682
  %684 = inttoptr i64 %683 to double*
  %685 = load double, double* %684
  %686 = fadd double %678, %685
  %687 = add i32 %670, 1
  %688 = sext i32 %687 to i64
  %689 = mul nsw i64 %688, 112
  %690 = add i64 %689, %1118
  store i64 %690, i64* %7, align 8, !tbaa !1240
  %691 = add i64 %675, %690
  %692 = inttoptr i64 %691 to double*
  %693 = load double, double* %692
  %694 = fadd double %686, %693
  %695 = add i64 %690, %682
  %696 = inttoptr i64 %695 to double*
  %697 = load double, double* %696
  %698 = fadd double %694, %697
  %699 = add i64 %672, %1117
  %700 = add i64 %675, %699
  %701 = inttoptr i64 %700 to double*
  %702 = load double, double* %701
  %703 = fadd double %698, %702
  %704 = add i64 %699, %682
  %705 = inttoptr i64 %704 to double*
  %706 = load double, double* %705
  %707 = fadd double %703, %706
  %708 = add i64 %689, %1117
  store i64 %708, i64* %6, align 8, !tbaa !1240
  %709 = add i64 %675, %708
  %710 = inttoptr i64 %709 to double*
  %711 = load double, double* %710
  %712 = fadd double %707, %711
  store i64 %680, i64* %1314, align 8, !tbaa !1240
  %713 = add i64 %708, %682
  %714 = inttoptr i64 %713 to double*
  %715 = load double, double* %714
  %716 = fadd double %712, %715
  store double %716, double* %1327, align 1, !tbaa !1264
  store i64 0, i64* %1328, align 1, !tbaa !1264
  %717 = fadd double %668, %716
  store double %717, double* %62, align 1, !tbaa !1264
  store i64 0, i64* %53, align 1, !tbaa !1264
  %718 = inttoptr i64 %1107 to double*
  store double %717, double* %718
  %719 = inttoptr i64 %1115 to i32*
  %720 = load i32, i32* %719
  %721 = add i32 %720, 1
  %722 = inttoptr i64 %1115 to i32*
  store i32 %721, i32* %722
  %723 = add i64 %1103, -12
  br label %block_41284e

block_412a51:                                     ; preds = %block_412a45
  %724 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %724, double* %62, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1326, align 1, !tbaa !1264
  %725 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  %726 = inttoptr i64 %317 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  %729 = mul nsw i64 %728, 6760
  %730 = add i64 %729, ptrtoint (%u_type* @u to i64)
  %731 = sext i32 %780 to i64
  %732 = mul nsw i64 %731, 520
  %733 = add i64 %732, %730
  %734 = inttoptr i64 %1200 to i32*
  %735 = load i32, i32* %734
  %736 = sext i32 %735 to i64
  %737 = mul nsw i64 %736, 40
  %738 = add i64 %737, %733
  %739 = add i64 %738, 32
  %740 = inttoptr i64 %739 to double*
  %741 = load double, double* %740
  %742 = add i64 %738, 8
  %743 = inttoptr i64 %742 to double*
  %744 = load double, double* %743
  %745 = fmul double %744, %744
  %746 = add i64 %738, 16
  %747 = inttoptr i64 %746 to double*
  %748 = load double, double* %747
  %749 = fmul double %748, %748
  %750 = fadd double %745, %749
  %751 = add i64 %738, 24
  %752 = inttoptr i64 %751 to double*
  %753 = load double, double* %752
  store i64 %738, i64* %7, align 8, !tbaa !1240
  %754 = fmul double %753, %753
  store double %754, double* %1336, align 1, !tbaa !1264
  store i64 0, i64* %1337, align 1, !tbaa !1264
  %755 = fadd double %750, %754
  store double %755, double* %1333, align 1, !tbaa !1264
  store i64 0, i64* %1334, align 1, !tbaa !1264
  %756 = fmul double %725, %755
  store i64 %737, i64* %6, align 8, !tbaa !1240
  %757 = inttoptr i64 %738 to double*
  %758 = load double, double* %757
  %759 = fdiv double %756, %758
  store double %759, double* %1327, align 1, !tbaa !1264
  store i64 0, i64* %1328, align 1, !tbaa !1264
  %760 = fsub double %741, %759
  store double %760, double* %1330, align 1, !tbaa !1264
  store i64 0, i64* %1331, align 1, !tbaa !1264
  %761 = load double, double* %62, align 1
  %762 = fmul double %761, %760
  store double %762, double* %62, align 1, !tbaa !1264
  %763 = mul nsw i64 %728, 112
  %764 = add i64 %763, %322
  %765 = shl nsw i64 %731, 3
  %766 = add i64 %765, %764
  %767 = inttoptr i64 %766 to double*
  store double %762, double* %767
  %768 = inttoptr i64 %482 to i32*
  %769 = load i32, i32* %768
  %770 = add i32 %769, 1
  %771 = inttoptr i64 %482 to i32*
  store i32 %770, i32* %771
  %772 = add i64 %794, -12
  br label %block_412a45

block_412848:                                     ; preds = %block_412833
  %773 = inttoptr i64 %1114 to i32*
  %774 = load i32, i32* %773
  %775 = add i64 %910, 6
  %776 = inttoptr i64 %1115 to i32*
  store i32 %774, i32* %776
  br label %block_41284e

block_412a45:                                     ; preds = %block_412a3f, %block_412a51
  %777 = phi i64 [ %861, %block_412a3f ], [ %772, %block_412a51 ]
  %778 = phi %struct.Memory* [ %914, %block_412a3f ], [ %778, %block_412a51 ]
  %779 = inttoptr i64 %482 to i32*
  %780 = load i32, i32* %779
  %781 = inttoptr i64 %483 to i32*
  %782 = load i32, i32* %781
  %783 = sub i32 %780, %782
  %784 = lshr i32 %783, 31
  %785 = lshr i32 %780, 31
  %786 = lshr i32 %782, 31
  %787 = xor i32 %786, %785
  %788 = xor i32 %784, %785
  %789 = add nuw nsw i32 %788, %787
  %790 = icmp eq i32 %789, 2
  %791 = icmp ne i32 %784, 0
  %792 = xor i1 %791, %790
  %793 = select i1 %792, i64 12, i64 471
  %794 = add i64 %777, %793
  br i1 %792, label %block_412a51, label %block_412c1c

block_412c44:                                     ; preds = %block_412c34
  %795 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %796 = add i64 %864, -12
  %797 = add i64 %873, 10
  %798 = inttoptr i64 %796 to i32*
  store i32 %795, i32* %798
  %799 = add i64 %864, -28
  %800 = add i64 %864, -8
  %801 = add i64 %864, -32
  %802 = add i64 %864, -3184
  br label %block_412c4e

block_412613:                                     ; preds = %block_412607
  %803 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %803, double* %62, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1326, align 1, !tbaa !1264
  store i64 ptrtoint (%u_type* @u to i64), i64* %5, align 8, !tbaa !1240
  %804 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %804, double* %1327, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1329, align 1, !tbaa !1264
  %805 = inttoptr i64 %422 to i32*
  %806 = load i32, i32* %805
  %807 = sext i32 %806 to i64
  %808 = mul nsw i64 %807, 6760
  %809 = add i64 %808, ptrtoint (%u_type* @u to i64)
  %810 = inttoptr i64 %147 to i32*
  %811 = load i32, i32* %810
  %812 = add i32 %811, -1
  %813 = zext i32 %812 to i64
  %814 = sext i32 %812 to i64
  %815 = mul nsw i64 %814, 520
  %816 = add i64 %815, %809
  %817 = sext i32 %938 to i64
  %818 = mul nsw i64 %817, 40
  %819 = add i64 %818, %816
  %820 = add i64 %819, 32
  %821 = inttoptr i64 %820 to double*
  %822 = load double, double* %821
  %823 = add i64 %819, 8
  %824 = inttoptr i64 %823 to double*
  %825 = load double, double* %824
  %826 = fmul double %825, %825
  %827 = add i64 %819, 16
  %828 = inttoptr i64 %827 to double*
  %829 = load double, double* %828
  %830 = fmul double %829, %829
  %831 = fadd double %826, %830
  %832 = add i64 %819, 24
  %833 = inttoptr i64 %832 to double*
  %834 = load double, double* %833
  store i64 %819, i64* %7, align 8, !tbaa !1240
  %835 = fmul double %834, %834
  store double %835, double* %1336, align 1, !tbaa !1264
  store i64 0, i64* %1337, align 1, !tbaa !1264
  %836 = fadd double %831, %835
  store double %836, double* %1333, align 1, !tbaa !1264
  store i64 0, i64* %1334, align 1, !tbaa !1264
  %837 = load double, double* %1327, align 1
  %838 = fmul double %837, %836
  %839 = load i64, i64* %5, align 8
  %840 = add i64 %808, %839
  store i64 %813, i64* %1314, align 8, !tbaa !1240
  %841 = add i64 %815, %840
  store i64 %818, i64* %6, align 8, !tbaa !1240
  %842 = add i64 %818, %841
  %843 = inttoptr i64 %842 to double*
  %844 = load double, double* %843
  %845 = fdiv double %838, %844
  store double %845, double* %1327, align 1, !tbaa !1264
  %846 = fsub double %822, %845
  store double %846, double* %1330, align 1, !tbaa !1264
  store i64 0, i64* %1331, align 1, !tbaa !1264
  %847 = load double, double* %62, align 1
  %848 = fmul double %847, %846
  store double %848, double* %62, align 1, !tbaa !1264
  %849 = mul nsw i64 %807, 112
  %850 = add i64 %849, %428
  %851 = shl nsw i64 %817, 3
  %852 = add i64 %851, %850
  %853 = inttoptr i64 %852 to double*
  store double %848, double* %853
  %854 = inttoptr i64 %426 to i32*
  %855 = load i32, i32* %854
  %856 = add i32 %855, 1
  %857 = inttoptr i64 %426 to i32*
  store i32 %856, i32* %857
  %858 = add i64 %952, -12
  br label %block_412607

block_412a3f:                                     ; preds = %block_412a2f
  %859 = inttoptr i64 %481 to i32*
  %860 = load i32, i32* %859
  %861 = add i64 %930, 6
  %862 = inttoptr i64 %482 to i32*
  store i32 %860, i32* %862
  br label %block_412a45

block_412c34:                                     ; preds = %block_412a15, %block_412c2f
  %863 = phi i64 [ %1207, %block_412a15 ], [ %399, %block_412c2f ]
  %864 = phi i64 [ %311, %block_412a15 ], [ %400, %block_412c2f ]
  %865 = phi %struct.Memory* [ %329, %block_412a15 ], [ %914, %block_412c2f ]
  %866 = add i64 %864, -20
  %867 = inttoptr i64 %866 to i32*
  %868 = load i32, i32* %867
  %869 = load i32, i32* bitcast (%ii2_type* @ii2 to i32*)
  %870 = sub i32 %868, %869
  %871 = icmp eq i32 %870, 0
  %872 = select i1 %871, i64 16, i64 583
  %873 = add i64 %863, %872
  br i1 %871, label %block_412c44, label %block_412e7b

block_4121f1:                                     ; preds = %block_4121eb, %block_4121fd
  %874 = phi i64 [ %933, %block_4121eb ], [ %119, %block_4121fd ]
  %875 = phi %struct.Memory* [ %607, %block_4121eb ], [ %875, %block_4121fd ]
  %876 = inttoptr i64 %496 to i32*
  %877 = load i32, i32* %876
  %878 = inttoptr i64 %497 to i32*
  %879 = load i32, i32* %878
  %880 = sub i32 %877, %879
  %881 = lshr i32 %880, 31
  %882 = lshr i32 %877, 31
  %883 = lshr i32 %879, 31
  %884 = xor i32 %883, %882
  %885 = xor i32 %881, %882
  %886 = add nuw nsw i32 %885, %884
  %887 = icmp eq i32 %886, 2
  %888 = icmp ne i32 %881, 0
  %889 = xor i1 %888, %887
  %890 = select i1 %889, i64 12, i64 278
  %891 = add i64 %874, %890
  br i1 %889, label %block_4121fd, label %block_412307

block_412833:                                     ; preds = %block_41281e, %block_412964
  %892 = phi i64 [ %1112, %block_41281e ], [ %327, %block_412964 ]
  %893 = phi %struct.Memory* [ %1106, %block_41281e ], [ %1087, %block_412964 ]
  %894 = inttoptr i64 %1111 to i32*
  %895 = load i32, i32* %894
  %896 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %897 = add i32 %896, -1
  %898 = sub i32 %895, %897
  %899 = lshr i32 %898, 31
  %900 = trunc i32 %899 to i8
  %901 = lshr i32 %895, 31
  %902 = lshr i32 %897, 31
  %903 = xor i32 %902, %901
  %904 = xor i32 %899, %901
  %905 = add nuw nsw i32 %904, %903
  %906 = icmp eq i32 %905, 2
  %907 = icmp ne i8 %900, 0
  %908 = xor i1 %907, %906
  %909 = select i1 %908, i64 21, i64 324
  %910 = add i64 %892, %909
  br i1 %908, label %block_412848, label %block_412977

block_412819:                                     ; preds = %block_4125f1
  %911 = add i64 %393, 5
  %912 = load i64, i64* %9, align 8
  br label %block_41281e

block_412a2f:                                     ; preds = %block_412c1c, %block_412a25
  %913 = phi i64 [ %479, %block_412a25 ], [ %1123, %block_412c1c ]
  %914 = phi %struct.Memory* [ %329, %block_412a25 ], [ %778, %block_412c1c ]
  %915 = inttoptr i64 %317 to i32*
  %916 = load i32, i32* %915
  %917 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %918 = sub i32 %916, %917
  %919 = lshr i32 %918, 31
  %920 = trunc i32 %919 to i8
  %921 = lshr i32 %916, 31
  %922 = lshr i32 %917, 31
  %923 = xor i32 %922, %921
  %924 = xor i32 %919, %921
  %925 = add nuw nsw i32 %924, %923
  %926 = icmp eq i32 %925, 2
  %927 = icmp ne i8 %920, 0
  %928 = xor i1 %927, %926
  %929 = select i1 %928, i64 16, i64 512
  %930 = add i64 %913, %929
  br i1 %928, label %block_412a3f, label %block_412c2f

block_4121eb:                                     ; preds = %block_4121df
  %931 = inttoptr i64 %495 to i32*
  %932 = load i32, i32* %931
  %933 = add i64 %624, 6
  %934 = inttoptr i64 %496 to i32*
  store i32 %932, i32* %934
  br label %block_4121f1

block_412607:                                     ; preds = %block_412613, %block_412601
  %935 = phi i64 [ %372, %block_412601 ], [ %858, %block_412613 ]
  %936 = phi %struct.Memory* [ %377, %block_412601 ], [ %936, %block_412613 ]
  %937 = inttoptr i64 %426 to i32*
  %938 = load i32, i32* %937
  %939 = inttoptr i64 %427 to i32*
  %940 = load i32, i32* %939
  %941 = sub i32 %938, %940
  %942 = lshr i32 %941, 31
  %943 = lshr i32 %938, 31
  %944 = lshr i32 %940, 31
  %945 = xor i32 %944, %943
  %946 = xor i32 %942, %943
  %947 = add nuw nsw i32 %946, %945
  %948 = icmp eq i32 %947, 2
  %949 = icmp ne i32 %942, 0
  %950 = xor i1 %949, %948
  %951 = select i1 %950, i64 12, i64 511
  %952 = add i64 %935, %951
  br i1 %950, label %block_412613, label %block_412806

block_411e25:                                     ; preds = %block_411e19
  %953 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %953, double* %62, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1326, align 1, !tbaa !1264
  store i64 ptrtoint (%u_type* @u to i64), i64* %5, align 8, !tbaa !1240
  %954 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  store double %954, double* %1327, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1329, align 1, !tbaa !1264
  store i64 %61, i64* %6, align 8, !tbaa !1240
  %955 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %956 = inttoptr i64 %48 to i32*
  store i32 %955, i32* %956
  %957 = inttoptr i64 %48 to i32*
  %958 = load i32, i32* %957
  %959 = sext i32 %958 to i64
  %960 = mul nsw i64 %959, 6760
  %961 = add i64 %960, ptrtoint (%u_type* @u to i64)
  %962 = inttoptr i64 %1321 to i32*
  %963 = load i32, i32* %962
  %964 = sext i32 %963 to i64
  %965 = mul nsw i64 %964, 520
  %966 = add i64 %965, %961
  %967 = inttoptr i64 %51 to i32*
  %968 = load i32, i32* %967
  %969 = sext i32 %968 to i64
  %970 = mul nsw i64 %969, 40
  %971 = add i64 %970, %966
  %972 = add i64 %971, 32
  %973 = inttoptr i64 %972 to double*
  %974 = load double, double* %973
  %975 = add i64 %971, 8
  %976 = inttoptr i64 %975 to double*
  %977 = load double, double* %976
  %978 = fmul double %977, %977
  %979 = add i64 %971, 16
  %980 = inttoptr i64 %979 to double*
  %981 = load double, double* %980
  %982 = fmul double %981, %981
  %983 = fadd double %978, %982
  %984 = add i64 %971, 24
  %985 = inttoptr i64 %984 to double*
  %986 = load double, double* %985
  %987 = fmul double %986, %986
  %988 = fadd double %983, %987
  %989 = bitcast double %954 to <2 x i32>
  %990 = extractelement <2 x i32> %989, i32 0
  store i32 %990, i32* %1338, align 1, !tbaa !1292
  %991 = extractelement <2 x i32> %989, i32 1
  store i32 %991, i32* %1340, align 1, !tbaa !1292
  %992 = load double, double* %1336, align 1
  %993 = fmul double %992, %988
  %994 = load i64, i64* %5, align 8
  %995 = add i64 %960, %994
  %996 = add i64 %965, %995
  %997 = add i64 %970, %996
  store i64 %997, i64* %1315, align 8, !tbaa !1240
  %998 = inttoptr i64 %997 to double*
  %999 = load double, double* %998
  %1000 = fdiv double %993, %999
  %1001 = fsub double %974, %1000
  %1002 = load <2 x i32>, <2 x i32>* %1341, align 1
  %1003 = extractelement <2 x i32> %1002, i32 0
  store i32 %1003, i32* %1342, align 1, !tbaa !1292
  %1004 = extractelement <2 x i32> %1002, i32 1
  store i32 %1004, i32* %1344, align 1, !tbaa !1292
  %1005 = load double, double* %1333, align 1
  %1006 = fmul double %1005, %1001
  %1007 = mul nsw i64 %964, 112
  %1008 = load i64, i64* %6, align 8
  %1009 = add i64 %1007, %1008
  %1010 = shl nsw i64 %969, 3
  %1011 = add i64 %1010, %1009
  %1012 = inttoptr i64 %1011 to double*
  store double %1006, double* %1012
  %1013 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %1014 = add i32 %1013, -1
  %1015 = zext i32 %1014 to i64
  store i64 %1015, i64* %7, align 8, !tbaa !1240
  %1016 = inttoptr i64 %48 to i32*
  store i32 %1014, i32* %1016
  %1017 = inttoptr i64 %48 to i32*
  %1018 = load i32, i32* %1017
  %1019 = sext i32 %1018 to i64
  %1020 = mul nsw i64 %1019, 6760
  %1021 = add i64 %1020, %994
  %1022 = inttoptr i64 %1321 to i32*
  %1023 = load i32, i32* %1022
  %1024 = sext i32 %1023 to i64
  %1025 = mul nsw i64 %1024, 520
  %1026 = add i64 %1025, %1021
  %1027 = inttoptr i64 %51 to i32*
  %1028 = load i32, i32* %1027
  %1029 = sext i32 %1028 to i64
  %1030 = mul nsw i64 %1029, 40
  %1031 = add i64 %1030, %1026
  %1032 = add i64 %1031, 32
  %1033 = inttoptr i64 %1032 to double*
  %1034 = load double, double* %1033
  %1035 = add i64 %1031, 8
  %1036 = inttoptr i64 %1035 to double*
  %1037 = load double, double* %1036
  %1038 = fmul double %1037, %1037
  %1039 = add i64 %1031, 16
  %1040 = inttoptr i64 %1039 to double*
  %1041 = load double, double* %1040
  %1042 = fmul double %1041, %1041
  %1043 = fadd double %1038, %1042
  %1044 = load i64, i64* %5, align 8
  %1045 = add i64 %1020, %1044
  %1046 = add i64 %1025, %1045
  %1047 = add i64 %1030, %1046
  %1048 = add i64 %1047, 24
  %1049 = inttoptr i64 %1048 to double*
  %1050 = load double, double* %1049
  store i64 %1047, i64* %1314, align 8, !tbaa !1240
  %1051 = fmul double %1050, %1050
  store double %1051, double* %1336, align 1, !tbaa !1264
  store i64 0, i64* %1337, align 1, !tbaa !1264
  %1052 = fadd double %1043, %1051
  store double %1052, double* %1333, align 1, !tbaa !1264
  store i64 0, i64* %1334, align 1, !tbaa !1264
  %1053 = load double, double* %1327, align 1
  %1054 = fmul double %1053, %1052
  store i64 %1030, i64* %6, align 8, !tbaa !1240
  %1055 = inttoptr i64 %1047 to double*
  %1056 = load double, double* %1055
  %1057 = fdiv double %1054, %1056
  store double %1057, double* %1327, align 1, !tbaa !1264
  %1058 = fsub double %1034, %1057
  store double %1058, double* %1330, align 1, !tbaa !1264
  store i64 0, i64* %1331, align 1, !tbaa !1264
  %1059 = load double, double* %62, align 1
  %1060 = fmul double %1059, %1058
  store double %1060, double* %62, align 1, !tbaa !1264
  %1061 = mul nsw i64 %1024, 112
  %1062 = add i64 %1061, %60
  %1063 = shl nsw i64 %1029, 3
  %1064 = add i64 %1063, %1062
  %1065 = inttoptr i64 %1064 to double*
  store double %1060, double* %1065
  %1066 = inttoptr i64 %51 to i32*
  %1067 = load i32, i32* %1066
  %1068 = add i32 %1067, 1
  %1069 = inttoptr i64 %51 to i32*
  store i32 %1068, i32* %1069
  %1070 = add i64 %1199, -12
  br label %block_411e19

block_412e90:                                     ; preds = %block_412e7b, %block_412fc1
  %1071 = phi %struct.Memory* [ %519, %block_412e7b ], [ %500, %block_412fc1 ]
  %1072 = inttoptr i64 %524 to i32*
  %1073 = load i32, i32* %1072
  %1074 = load i32, i32* bitcast (%ki2_type* @ki2 to i32*)
  %1075 = add i32 %1074, -1
  %1076 = sub i32 %1073, %1075
  %1077 = lshr i32 %1076, 31
  %1078 = lshr i32 %1073, 31
  %1079 = lshr i32 %1075, 31
  %1080 = xor i32 %1079, %1078
  %1081 = xor i32 %1077, %1078
  %1082 = add nuw nsw i32 %1081, %1080
  %1083 = icmp eq i32 %1082, 2
  %1084 = icmp ne i32 %1077, 0
  %1085 = xor i1 %1084, %1083
  br i1 %1085, label %block_412ea5, label %block_412fd4

block_41284e:                                     ; preds = %block_412848, %block_41285a
  %1086 = phi i64 [ %775, %block_412848 ], [ %723, %block_41285a ]
  %1087 = phi %struct.Memory* [ %893, %block_412848 ], [ %1087, %block_41285a ]
  %1088 = inttoptr i64 %1115 to i32*
  %1089 = load i32, i32* %1088
  %1090 = inttoptr i64 %1116 to i32*
  %1091 = load i32, i32* %1090
  %1092 = sub i32 %1089, %1091
  %1093 = lshr i32 %1092, 31
  %1094 = lshr i32 %1089, 31
  %1095 = lshr i32 %1091, 31
  %1096 = xor i32 %1095, %1094
  %1097 = xor i32 %1093, %1094
  %1098 = add nuw nsw i32 %1097, %1096
  %1099 = icmp eq i32 %1098, 2
  %1100 = icmp ne i32 %1093, 0
  %1101 = xor i1 %1100, %1099
  %1102 = select i1 %1101, i64 12, i64 278
  %1103 = add i64 %1086, %1102
  br i1 %1101, label %block_41285a, label %block_412964

block_41281e:                                     ; preds = %block_412819, %block_4125d7
  %1104 = phi i64 [ %145, %block_4125d7 ], [ %912, %block_412819 ]
  %1105 = phi i64 [ %154, %block_4125d7 ], [ %911, %block_412819 ]
  %1106 = phi %struct.Memory* [ %146, %block_4125d7 ], [ %377, %block_412819 ]
  store i32 0, i32* %54, align 1, !tbaa !1266
  store i32 0, i32* %56, align 1, !tbaa !1266
  store i32 0, i32* %57, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  %1107 = add i64 %1104, -3200
  %1108 = load double, double* %62, align 1
  %1109 = inttoptr i64 %1107 to double*
  store double %1108, double* %1109
  %1110 = load i32, i32* bitcast (%ki1_type* @ki1 to i32*)
  %1111 = add i64 %1104, -12
  %1112 = add i64 %1105, 21
  %1113 = inttoptr i64 %1111 to i32*
  store i32 %1110, i32* %1113
  %1114 = add i64 %1104, -16
  %1115 = add i64 %1104, -4
  %1116 = add i64 %1104, -24
  %1117 = add i64 %1104, -3184
  %1118 = add i64 %1104, -1616
  br label %block_412833

block_412c1c:                                     ; preds = %block_412a45
  %1119 = inttoptr i64 %317 to i32*
  %1120 = load i32, i32* %1119
  %1121 = add i32 %1120, 1
  %1122 = inttoptr i64 %317 to i32*
  store i32 %1121, i32* %1122
  %1123 = add i64 %794, -493
  br label %block_412a2f

block_412fd4:                                     ; preds = %block_412e90
  %1124 = zext i32 %1073 to i64
  %1125 = zext i32 %1075 to i64
  store i64 %1124, i64* %4, align 8, !tbaa !1240
  store i64 %1125, i64* %5, align 8, !tbaa !1240
  %1126 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1680) to double*)
  %1127 = load double, double* bitcast (%deta_type* @deta to double*)
  %1128 = load double, double* bitcast (%dzeta_type* @dzeta to double*)
  %1129 = fmul double %1127, %1128
  %1130 = load i64, i64* %9, align 8
  %1131 = add i64 %1130, -3208
  %1132 = inttoptr i64 %1131 to double*
  %1133 = load double, double* %1132
  %1134 = fmul double %1129, %1133
  %1135 = inttoptr i64 %1131 to double*
  store double %1134, double* %1135
  %1136 = add i64 %1130, -3192
  %1137 = inttoptr i64 %1136 to double*
  %1138 = load double, double* %1137
  %1139 = add i64 %1130, -3200
  %1140 = inttoptr i64 %1139 to double*
  %1141 = load double, double* %1140
  %1142 = fadd double %1138, %1141
  %1143 = inttoptr i64 %1131 to double*
  %1144 = load double, double* %1143
  %1145 = fadd double %1142, %1144
  store double %1145, double* %1327, align 1, !tbaa !1264
  store i64 0, i64* %1328, align 1, !tbaa !1264
  %1146 = fmul double %1126, %1145
  store double %1146, double* %62, align 1, !tbaa !1264
  store i64 0, i64* %53, align 1, !tbaa !1264
  store double %1146, double* bitcast (%frc_type* @frc to double*)
  %1147 = load i64, i64* %8, align 8
  %1148 = add i64 %1147, 3088
  %1149 = icmp ugt i64 %1147, -3089
  %1150 = zext i1 %1149 to i8
  store i8 %1150, i8* %18, align 1, !tbaa !1245
  %1151 = trunc i64 %1148 to i32
  %1152 = and i32 %1151, 255
  %1153 = tail call i32 @llvm.ctpop.i32(i32 %1152) #11
  %1154 = trunc i32 %1153 to i8
  %1155 = and i8 %1154, 1
  %1156 = xor i8 %1155, 1
  store i8 %1156, i8* %19, align 1, !tbaa !1259
  %1157 = xor i64 %1147, 16
  %1158 = xor i64 %1157, %1148
  %1159 = lshr i64 %1158, 4
  %1160 = trunc i64 %1159 to i8
  %1161 = and i8 %1160, 1
  store i8 %1161, i8* %20, align 1, !tbaa !1263
  %1162 = icmp eq i64 %1148, 0
  %1163 = zext i1 %1162 to i8
  store i8 %1163, i8* %21, align 1, !tbaa !1260
  %1164 = lshr i64 %1148, 63
  %1165 = trunc i64 %1164 to i8
  store i8 %1165, i8* %22, align 1, !tbaa !1261
  %1166 = lshr i64 %1147, 63
  %1167 = xor i64 %1164, %1166
  %1168 = add nuw nsw i64 %1167, %1164
  %1169 = icmp eq i64 %1168, 2
  %1170 = zext i1 %1169 to i8
  store i8 %1170, i8* %23, align 1, !tbaa !1262
  %1171 = add i64 %1147, 3096
  %1172 = inttoptr i64 %1148 to i64*
  %1173 = load i64, i64* %1172
  store i64 %1173, i64* %9, align 8, !tbaa !1240
  %1174 = inttoptr i64 %1171 to i64*
  %1175 = load i64, i64* %1174
  store i64 %1175, i64* %3, align 8, !tbaa !1240
  %1176 = add i64 %1147, 3104
  store i64 %1176, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %1071

block_4125bf:                                     ; preds = %block_4123e8
  %1177 = inttoptr i64 %410 to i32*
  %1178 = load i32, i32* %1177
  %1179 = add i32 %1178, 1
  %1180 = inttoptr i64 %410 to i32*
  store i32 %1179, i32* %1180
  %1181 = add i64 %137, -493
  br label %block_4123d2

block_411e19:                                     ; preds = %block_411e13, %block_411e25
  %1182 = phi i64 [ %1210, %block_411e13 ], [ %1070, %block_411e25 ]
  %1183 = phi %struct.Memory* [ %1286, %block_411e13 ], [ %1183, %block_411e25 ]
  %1184 = inttoptr i64 %51 to i32*
  %1185 = load i32, i32* %1184
  %1186 = inttoptr i64 %1325 to i32*
  %1187 = load i32, i32* %1186
  %1188 = sub i32 %1185, %1187
  %1189 = lshr i32 %1188, 31
  %1190 = lshr i32 %1185, 31
  %1191 = lshr i32 %1187, 31
  %1192 = xor i32 %1191, %1190
  %1193 = xor i32 %1189, %1190
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = icmp eq i32 %1194, 2
  %1196 = icmp ne i32 %1189, 0
  %1197 = xor i1 %1196, %1195
  %1198 = select i1 %1197, i64 12, i64 930
  %1199 = add i64 %1182, %1198
  br i1 %1197, label %block_411e25, label %block_4121bb

block_412a15:                                     ; preds = %block_4129a0
  %1200 = add i64 %311, -16
  %1201 = inttoptr i64 %1200 to i32*
  %1202 = load i32, i32* %1201
  %1203 = load i32, i32* bitcast (%ii1_type* @ii1 to i32*)
  %1204 = sub i32 %1202, %1203
  %1205 = icmp eq i32 %1204, 0
  %1206 = select i1 %1205, i64 16, i64 543
  %1207 = add i64 %343, %1206
  br i1 %1205, label %block_412a25, label %block_412c34

block_411e13:                                     ; preds = %block_411e07
  %1208 = inttoptr i64 %1324 to i32*
  %1209 = load i32, i32* %1208
  %1210 = add i64 %1303, 6
  %1211 = inttoptr i64 %51 to i32*
  store i32 %1209, i32* %1211
  br label %block_411e19

block_411d9d:                                     ; preds = %block_411d96, %block_411da7
  %1212 = phi i64 [ %289, %block_411d96 ], [ %283, %block_411da7 ]
  %1213 = phi %struct.Memory* [ %292, %block_411d96 ], [ %1213, %block_411da7 ]
  %1214 = inttoptr i64 %51 to i32*
  %1215 = load i32, i32* %1214
  %1216 = add i32 %1215, -13
  %1217 = lshr i32 %1216, 31
  %1218 = lshr i32 %1215, 31
  %1219 = xor i32 %1217, %1218
  %1220 = add nuw nsw i32 %1219, %1218
  %1221 = icmp eq i32 %1220, 2
  %1222 = icmp ne i32 %1216, 0
  %1223 = icmp ne i32 %1217, 0
  %1224 = xor i1 %1223, %1221
  %1225 = xor i1 %1224, true
  %1226 = and i1 %1222, %1225
  %1227 = select i1 %1226, i64 81, i64 10
  %1228 = add i64 %1212, %1227
  br i1 %1226, label %block_411dee, label %block_411da7

block_412eb7:                                     ; preds = %block_412eab
  %1229 = inttoptr i64 %520 to double*
  %1230 = load double, double* %1229
  %1231 = inttoptr i64 %524 to i32*
  %1232 = load i32, i32* %1231
  %1233 = sext i32 %1232 to i64
  %1234 = mul nsw i64 %1233, 112
  %1235 = add i64 %1234, %530
  %1236 = sext i32 %502 to i64
  %1237 = shl nsw i64 %1236, 3
  %1238 = add i64 %1237, %1235
  %1239 = inttoptr i64 %1238 to double*
  %1240 = load double, double* %1239
  %1241 = add i32 %502, 1
  %1242 = zext i32 %1241 to i64
  %1243 = sext i32 %1241 to i64
  %1244 = shl nsw i64 %1243, 3
  %1245 = add i64 %1235, %1244
  %1246 = inttoptr i64 %1245 to double*
  %1247 = load double, double* %1246
  %1248 = fadd double %1240, %1247
  %1249 = add i32 %1232, 1
  %1250 = sext i32 %1249 to i64
  %1251 = mul nsw i64 %1250, 112
  %1252 = add i64 %1251, %530
  store i64 %1252, i64* %7, align 8, !tbaa !1240
  %1253 = add i64 %1237, %1252
  %1254 = inttoptr i64 %1253 to double*
  %1255 = load double, double* %1254
  %1256 = fadd double %1248, %1255
  %1257 = add i64 %1252, %1244
  %1258 = inttoptr i64 %1257 to double*
  %1259 = load double, double* %1258
  %1260 = fadd double %1256, %1259
  %1261 = add i64 %1234, %529
  %1262 = add i64 %1237, %1261
  %1263 = inttoptr i64 %1262 to double*
  %1264 = load double, double* %1263
  %1265 = fadd double %1260, %1264
  %1266 = add i64 %1261, %1244
  %1267 = inttoptr i64 %1266 to double*
  %1268 = load double, double* %1267
  %1269 = fadd double %1265, %1268
  %1270 = add i64 %1251, %529
  store i64 %1270, i64* %6, align 8, !tbaa !1240
  %1271 = add i64 %1237, %1270
  %1272 = inttoptr i64 %1271 to double*
  %1273 = load double, double* %1272
  %1274 = fadd double %1269, %1273
  store i64 %1242, i64* %1314, align 8, !tbaa !1240
  %1275 = add i64 %1270, %1244
  %1276 = inttoptr i64 %1275 to double*
  %1277 = load double, double* %1276
  %1278 = fadd double %1274, %1277
  store double %1278, double* %1327, align 1, !tbaa !1264
  store i64 0, i64* %1328, align 1, !tbaa !1264
  %1279 = fadd double %1230, %1278
  store double %1279, double* %62, align 1, !tbaa !1264
  store i64 0, i64* %53, align 1, !tbaa !1264
  %1280 = inttoptr i64 %520 to double*
  store double %1279, double* %1280
  %1281 = inttoptr i64 %527 to i32*
  %1282 = load i32, i32* %1281
  %1283 = add i32 %1282, 1
  %1284 = inttoptr i64 %527 to i32*
  store i32 %1283, i32* %1284
  br label %block_412eab

block_411e07:                                     ; preds = %block_411e01, %block_4121bb
  %1285 = phi i64 [ %1322, %block_411e01 ], [ %433, %block_4121bb ]
  %1286 = phi %struct.Memory* [ %292, %block_411e01 ], [ %1183, %block_4121bb ]
  %1287 = inttoptr i64 %1321 to i32*
  %1288 = load i32, i32* %1287
  %1289 = inttoptr i64 %42 to i32*
  %1290 = load i32, i32* %1289
  %1291 = sub i32 %1288, %1290
  %1292 = lshr i32 %1291, 31
  %1293 = trunc i32 %1292 to i8
  %1294 = lshr i32 %1288, 31
  %1295 = lshr i32 %1290, 31
  %1296 = xor i32 %1295, %1294
  %1297 = xor i32 %1292, %1294
  %1298 = add nuw nsw i32 %1297, %1296
  %1299 = icmp eq i32 %1298, 2
  %1300 = icmp ne i8 %1293, 0
  %1301 = xor i1 %1300, %1299
  %1302 = select i1 %1301, i64 12, i64 967
  %1303 = add i64 %1285, %1302
  br i1 %1301, label %block_411e13, label %block_4121ce

block_412806:                                     ; preds = %block_412607
  %1304 = inttoptr i64 %422 to i32*
  %1305 = load i32, i32* %1304
  %1306 = add i32 %1305, 1
  %1307 = inttoptr i64 %422 to i32*
  store i32 %1306, i32* %1307
  %1308 = add i64 %952, -533
  br label %block_4125f1

block_412a02:                                     ; preds = %block_4129b1
  %1309 = inttoptr i64 %317 to i32*
  %1310 = load i32, i32* %1309
  %1311 = add i32 %1310, 1
  %1312 = inttoptr i64 %317 to i32*
  store i32 %1311, i32* %1312
  %1313 = add i64 %257, -98
  br label %block_4129a0

block_411e01:                                     ; preds = %block_411d8c
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %1318 = add i64 %39, -28
  %1319 = inttoptr i64 %1318 to i32*
  %1320 = load i32, i32* %1319
  %1321 = add i64 %39, -8
  %1322 = add i64 %307, 6
  %1323 = inttoptr i64 %1321 to i32*
  store i32 %1320, i32* %1323
  %1324 = add i64 %39, -16
  %1325 = add i64 %39, -20
  %1326 = bitcast i64* %53 to double*
  %1327 = bitcast %union.VectorReg* %11 to double*
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %1329 = bitcast i64* %1328 to double*
  %1330 = bitcast %union.VectorReg* %1316 to double*
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %1332 = bitcast %union.VectorReg* %12 to i8*
  %1333 = bitcast %union.VectorReg* %12 to double*
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %1335 = bitcast %union.VectorReg* %1317 to i8*
  %1336 = bitcast %union.VectorReg* %1317 to double*
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %1338 = bitcast %union.VectorReg* %1317 to i32*
  %1339 = getelementptr inbounds i8, i8* %1335, i64 4
  %1340 = bitcast i8* %1339 to i32*
  %1341 = bitcast [32 x %union.VectorReg]* %10 to <2 x i32>*
  %1342 = bitcast %union.VectorReg* %12 to i32*
  %1343 = getelementptr inbounds i8, i8* %1332, i64 4
  %1344 = bitcast i8* %1343 to i32*
  br label %block_411e07
}

; Function Attrs: noinline
define %struct.Memory* @sub_418a20_ssor(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_418a20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %18 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %20 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %24 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %25 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %26 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %27 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %31 = load i64, i64* %22, align 8
  %32 = load i64, i64* %21, align 8, !tbaa !1240
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %31, i64* %34
  store i64 %33, i64* %22, align 8, !tbaa !1240
  %35 = load i64, i64* %27, align 8
  %36 = add i64 %32, -16
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i64, i64* %26, align 8
  %39 = add i64 %32, -24
  %40 = inttoptr i64 %39 to i64*
  store i64 %38, i64* %40
  %41 = load i64, i64* %25, align 8
  %42 = add i64 %32, -32
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43
  %44 = load i64, i64* %24, align 8
  %45 = add i64 %32, -40
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  %47 = load i64, i64* %16, align 8
  %48 = add i64 %32, -48
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49
  %50 = add i64 %32, -392
  store i64 %50, i64* %21, align 8, !tbaa !1240
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %57 = bitcast [32 x %union.VectorReg]* %28 to i8*
  %58 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  %59 = bitcast [32 x %union.VectorReg]* %28 to double*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %61 = bitcast i64* %60 to double*
  %62 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %63 = bitcast %union.VectorReg* %29 to double*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %65 = bitcast i64* %64 to double*
  %66 = add i64 %32, -52
  %67 = load i32, i32* %8, align 4
  %68 = inttoptr i64 %66 to i32*
  store i32 %67, i32* %68
  %69 = load double, double* bitcast (%omega_type* @omega to double*)
  %70 = bitcast %union.VectorReg* %30 to double*
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %72 = fsub double %62, %69
  store double %72, double* %63, align 1, !tbaa !1264
  store i64 0, i64* %64, align 1, !tbaa !1264
  %73 = fmul double %72, %69
  store double %73, double* %70, align 1, !tbaa !1264
  store i64 0, i64* %71, align 1, !tbaa !1264
  %74 = fdiv double %58, %73
  store double %74, double* %59, align 1, !tbaa !1264
  store i64 0, i64* %60, align 1, !tbaa !1264
  store double %74, double* bitcast (%tmp_type* @tmp to double*)
  %75 = load i64, i64* %22, align 8
  %76 = add i64 %75, -52
  %77 = add i64 %1, 81
  %78 = inttoptr i64 %76 to i32*
  store i32 0, i32* %78
  %79 = add i64 %75, -48
  %80 = add i64 %75, -64
  %81 = add i64 %75, -60
  %82 = bitcast [32 x %union.VectorReg]* %28 to i32*
  %83 = getelementptr inbounds i8, i8* %57, i64 4
  %84 = bitcast i8* %83 to i32*
  %85 = bitcast i64* %60 to i32*
  %86 = getelementptr inbounds i8, i8* %57, i64 12
  %87 = bitcast i8* %86 to i32*
  br label %block_418a71

block_4195ec:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %88 = load double, double* inttoptr (i64 add (i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64 8) to double*)
  store double %88, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %89 = load double, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 8) to double*)
  store double %89, double* %63, align 1, !tbaa !1264
  store double 0.000000e+00, double* %65, align 1, !tbaa !1264
  %90 = add i64 %1635, 22
  store i64 %90, i64* %3, align 8
  %91 = fcmp uno double %89, %88
  br i1 %91, label %92, label %105

; <label>:92:                                     ; preds = %block_4195ec
  %93 = fadd double %89, %88
  %94 = bitcast double %93 to i64
  %95 = and i64 %94, 9221120237041090560
  %96 = icmp eq i64 %95, 9218868437227405312
  %97 = and i64 %94, 2251799813685247
  %98 = icmp ne i64 %97, 0
  %99 = and i1 %96, %98
  br i1 %99, label %100, label %111

; <label>:100:                                    ; preds = %92
  %101 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %90, %struct.Memory* %1628) #14
  %102 = load i64, i64* %3, align 8
  %103 = load i8, i8* %51, align 1, !tbaa !1245
  %104 = load i8, i8* %54, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:105:                                    ; preds = %block_4195ec
  %106 = fcmp ogt double %89, %88
  br i1 %106, label %111, label %107

; <label>:107:                                    ; preds = %105
  %108 = fcmp olt double %89, %88
  br i1 %108, label %111, label %109

; <label>:109:                                    ; preds = %107
  %110 = fcmp oeq double %89, %88
  br i1 %110, label %111, label %115

; <label>:111:                                    ; preds = %109, %107, %105, %92
  %112 = phi i8 [ 0, %105 ], [ 0, %107 ], [ 1, %109 ], [ 1, %92 ]
  %113 = phi i8 [ 0, %105 ], [ 0, %107 ], [ 0, %109 ], [ 1, %92 ]
  %114 = phi i8 [ 0, %105 ], [ 1, %107 ], [ 0, %109 ], [ 1, %92 ]
  store i8 %112, i8* %54, align 1, !tbaa !1244
  store i8 %113, i8* %52, align 1, !tbaa !1244
  store i8 %114, i8* %51, align 1, !tbaa !1244
  br label %115

; <label>:115:                                    ; preds = %111, %109
  %116 = phi i8 [ %112, %111 ], [ %1632, %109 ]
  %117 = phi i8 [ %114, %111 ], [ %1631, %109 ]
  store i8 0, i8* %56, align 1, !tbaa !1244
  store i8 0, i8* %55, align 1, !tbaa !1244
  store i8 0, i8* %53, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %115, %100
  %118 = phi i8 [ %104, %100 ], [ %116, %115 ]
  %119 = phi i8 [ %103, %100 ], [ %117, %115 ]
  %120 = phi i64 [ %102, %100 ], [ %90, %115 ]
  %121 = phi %struct.Memory* [ %101, %100 ], [ %1628, %115 ]
  %122 = or i8 %118, %119
  %123 = icmp ne i8 %122, 0
  %124 = select i1 %123, i64 121, i64 6
  %125 = add i64 %120, %124
  br i1 %123, label %block_41967b, label %block_419608

block_4193e3:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %126 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %127 = icmp eq i32 %126, 0
  %128 = select i1 %127, i64 24, i64 14
  %129 = add i64 %165, %128
  br i1 %127, label %block_4193fb, label %block_4193f1

block_418ea4:                                     ; preds = %block_418e8f
  %130 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %131 = icmp eq i32 %130, 0
  %132 = select i1 %131, i64 24, i64 14
  %133 = add i64 %970, %132
  br i1 %131, label %block_418ebc, label %block_418eb2

block_4193cf:                                     ; preds = %block_4193c5, %block_4193b7
  %134 = phi i64 [ %1319, %block_4193b7 ], [ %1426, %block_4193c5 ]
  %135 = phi i64 [ %742, %block_4193b7 ], [ %1425, %block_4193c5 ]
  %136 = phi %struct.Memory* [ %1189, %block_4193b7 ], [ %1424, %block_4193c5 ]
  %137 = add i64 %134, -68
  %138 = inttoptr i64 %137 to i32*
  %139 = load i32, i32* %138
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %15, align 8, !tbaa !1240
  %141 = sext i32 %139 to i64
  %142 = lshr i64 %141, 32
  store i64 %142, i64* %689, align 8, !tbaa !1240
  %143 = add i64 %135, 11
  store i64 %143, i64* %3, align 8
  %144 = load i32, i32* bitcast (%inorm_type* @inorm to i32*)
  %145 = sext i32 %144 to i64
  %146 = shl nuw i64 %142, 32
  %147 = or i64 %146, %140
  %148 = sdiv i64 %147, %145
  %149 = shl i64 %148, 32
  %150 = ashr exact i64 %149, 32
  %151 = icmp eq i64 %148, %150
  br i1 %151, label %156, label %152

; <label>:152:                                    ; preds = %block_4193cf
  %153 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %143, %struct.Memory* %136) #14
  %154 = load i32, i32* %591, align 4
  %155 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:156:                                    ; preds = %block_4193cf
  %157 = srem i64 %147, %145
  %158 = and i64 %157, 4294967295
  store i64 %158, i64* %18, align 8, !tbaa !1240
  %159 = trunc i64 %157 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %156, %152
  %160 = phi i64 [ %155, %152 ], [ %143, %156 ]
  %161 = phi i32 [ %154, %152 ], [ %159, %156 ]
  %162 = phi %struct.Memory* [ %153, %152 ], [ %136, %156 ]
  %163 = icmp eq i32 %161, 0
  %164 = select i1 %163, i64 9, i64 234
  %165 = add i64 %160, %164
  br i1 %163, label %block_4193e3, label %block_4194c4

block_4195cb:                                     ; preds = %block_4195c1, %block_419507
  %166 = phi i64 [ %451, %block_419507 ], [ %1433, %block_4195c1 ]
  %167 = phi %struct.Memory* [ %438, %block_419507 ], [ %1432, %block_4195c1 ]
  %168 = add i64 %166, 5
  br label %block_4195d0

block_4190a1:                                     ; preds = %block_419093
  store i64 9, i64* %20, align 8, !tbaa !1240
  %169 = add i64 %1641, -87345
  %170 = add i64 %1641, 10
  %171 = load i64, i64* %21, align 8, !tbaa !1240
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 %170, i64* %173
  store i64 %172, i64* %21, align 8, !tbaa !1240
  %174 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %169, %struct.Memory* %1637)
  %175 = load i64, i64* %3, align 8
  br label %block_4190ab

block_418db3:                                     ; preds = %block_418da9
  %176 = load double, double* bitcast (%dt_type* @dt to double*)
  %177 = inttoptr i64 %1437 to i32*
  %178 = load i32, i32* %177
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %179, 6760
  %181 = add i64 %180, ptrtoint (%rsd_type* @rsd to i64)
  %182 = inttoptr i64 %1440 to i32*
  %183 = load i32, i32* %182
  %184 = sext i32 %183 to i64
  %185 = mul nsw i64 %184, 520
  %186 = add i64 %185, %181
  %187 = inttoptr i64 %1441 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, 40
  %191 = add i64 %190, %186
  store i64 %191, i64* %18, align 8, !tbaa !1240
  %192 = sext i32 %855 to i64
  %193 = shl nsw i64 %192, 3
  %194 = add i64 %193, %191
  %195 = inttoptr i64 %194 to double*
  %196 = load double, double* %195
  %197 = fmul double %176, %196
  store double %197, double* %59, align 1, !tbaa !1264
  store i64 0, i64* %60, align 1, !tbaa !1264
  %198 = inttoptr i64 %194 to double*
  store double %197, double* %198
  %199 = inttoptr i64 %1442 to i32*
  %200 = load i32, i32* %199
  %201 = add i32 %200, 1
  %202 = inttoptr i64 %1442 to i32*
  store i32 %201, i32* %202
  %203 = add i64 %865, -10
  br label %block_418da9

block_418ba7:                                     ; preds = %block_418aa4
  %204 = inttoptr i64 %80 to i32*
  %205 = load i32, i32* %204
  %206 = add i32 %205, 1
  %207 = inttoptr i64 %80 to i32*
  store i32 %206, i32* %207
  %208 = add i64 %894, -276
  br label %block_418a93

block_4193a4:                                     ; preds = %block_419281
  %209 = inttoptr i64 %1321 to i32*
  %210 = load i32, i32* %209
  %211 = add i32 %210, 1
  %212 = inttoptr i64 %1321 to i32*
  store i32 %211, i32* %212
  %213 = add i64 %1082, -322
  br label %block_419262

block_418da2:                                     ; preds = %block_418d92
  %214 = add i64 %1099, 7
  %215 = inttoptr i64 %1442 to i32*
  store i32 0, i32* %215
  br label %block_418da9

block_4193fb:                                     ; preds = %block_4193f1, %block_4193e3
  %216 = phi i64 [ %129, %block_4193e3 ], [ %576, %block_4193f1 ]
  %217 = phi %struct.Memory* [ %162, %block_4193e3 ], [ %575, %block_4193f1 ]
  %218 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %219 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %598, align 8, !tbaa !1240
  %221 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %23, align 8, !tbaa !1240
  %223 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %224 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %225 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %226 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %16, align 8, !tbaa !1240
  %228 = load i64, i64* %22, align 8
  %229 = add i64 %228, -220
  %230 = inttoptr i64 %229 to i32*
  store i32 %223, i32* %230
  store i64 12, i64* %20, align 8, !tbaa !1240
  %231 = add i64 %228, -224
  %232 = inttoptr i64 %231 to i32*
  store i32 %218, i32* %232
  store i64 12, i64* %19, align 8, !tbaa !1240
  %233 = add i64 %228, -232
  %234 = inttoptr i64 %233 to i64*
  store i64 ptrtoint (%delunm_type* @delunm to i64), i64* %234
  store i64 12, i64* %18, align 8, !tbaa !1240
  %235 = inttoptr i64 %231 to i32*
  %236 = load i32, i32* %235
  %237 = zext i32 %236 to i64
  %238 = add i64 %228, -240
  %239 = inttoptr i64 %238 to i64*
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %239
  store i64 %237, i64* %17, align 8, !tbaa !1240
  %240 = inttoptr i64 %229 to i32*
  %241 = load i32, i32* %240
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %26, align 8, !tbaa !1240
  %243 = load i64, i64* %21, align 8
  %244 = inttoptr i64 %243 to i32*
  store i32 %241, i32* %244
  %245 = add i64 %243, 8
  %246 = inttoptr i64 %245 to i32*
  store i32 %224, i32* %246
  %247 = add i64 %243, 16
  %248 = inttoptr i64 %247 to i32*
  store i32 %225, i32* %248
  %249 = add i64 %243, 24
  %250 = inttoptr i64 %249 to i32*
  store i32 %226, i32* %250
  %251 = inttoptr i64 %238 to i64*
  %252 = load i64, i64* %251
  store i64 %252, i64* %27, align 8, !tbaa !1240
  %253 = add i64 %243, 32
  %254 = inttoptr i64 %253 to i64*
  store i64 %252, i64* %254
  %255 = inttoptr i64 %233 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %24, align 8, !tbaa !1240
  %257 = add i64 %243, 40
  %258 = inttoptr i64 %257 to i64*
  store i64 %256, i64* %258
  %259 = add i64 %216, -32619
  %260 = add i64 %216, 172
  %261 = add i64 %243, -8
  %262 = inttoptr i64 %261 to i64*
  store i64 %260, i64* %262
  store i64 %261, i64* %21, align 8, !tbaa !1240
  %263 = tail call %struct.Memory* @sub_411490_l2norm(%struct.State* nonnull %0, i64 %259, %struct.Memory* %217)
  %264 = load i64, i64* %3, align 8
  %265 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %266 = icmp eq i32 %265, 0
  %267 = select i1 %266, i64 24, i64 14
  %268 = add i64 %264, %267
  br i1 %266, label %block_4194bf, label %block_4194b5

block_418d88:                                     ; preds = %block_418d78
  %269 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %270 = add i64 %288, 10
  %271 = inttoptr i64 %1441 to i32*
  store i32 %269, i32* %271
  br label %block_418d92

block_418d78:                                     ; preds = %block_418e4a, %block_418d6e
  %272 = phi i64 [ %1218, %block_418d6e ], [ %1410, %block_418e4a ]
  %273 = phi %struct.Memory* [ %290, %block_418d6e ], [ %1084, %block_418e4a ]
  %274 = inttoptr i64 %1440 to i32*
  %275 = load i32, i32* %274
  %276 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %277 = sub i32 %275, %276
  %278 = lshr i32 %277, 31
  %279 = lshr i32 %275, 31
  %280 = lshr i32 %276, 31
  %281 = xor i32 %280, %279
  %282 = xor i32 %278, %279
  %283 = add nuw nsw i32 %282, %281
  %284 = icmp eq i32 %283, 2
  %285 = icmp ne i32 %278, 0
  %286 = xor i1 %285, %284
  %287 = select i1 %286, i64 16, i64 229
  %288 = add i64 %272, %287
  br i1 %286, label %block_418d88, label %block_418e5d

block_418d59:                                     ; preds = %block_418d52, %block_418e5d
  %289 = phi i64 [ %1438, %block_418d52 ], [ %1216, %block_418e5d ]
  %290 = phi %struct.Memory* [ %1436, %block_418d52 ], [ %273, %block_418e5d ]
  %291 = inttoptr i64 %1437 to i32*
  %292 = load i32, i32* %291
  %293 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %294 = add i32 %293, -1
  %295 = sub i32 %292, %294
  %296 = lshr i32 %295, 31
  %297 = lshr i32 %292, 31
  %298 = lshr i32 %294, 31
  %299 = xor i32 %298, %297
  %300 = xor i32 %296, %297
  %301 = add nuw nsw i32 %300, %299
  %302 = icmp eq i32 %301, 2
  %303 = icmp ne i32 %296, 0
  %304 = xor i1 %303, %302
  %305 = select i1 %304, i64 21, i64 279
  %306 = add i64 %289, %305
  br i1 %304, label %block_418d6e, label %block_418e70

block_418d48:                                     ; preds = %block_418d3a
  store i64 5, i64* %20, align 8, !tbaa !1240
  %307 = add i64 %1523, -86488
  %308 = add i64 %1523, 10
  %309 = load i64, i64* %21, align 8, !tbaa !1240
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311
  store i64 %310, i64* %21, align 8, !tbaa !1240
  %312 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %307, %struct.Memory* %1519)
  %313 = load i64, i64* %22, align 8
  %314 = load i64, i64* %3, align 8
  br label %block_418d52

block_419391:                                     ; preds = %block_41929b
  %315 = inttoptr i64 %1324 to i32*
  %316 = load i32, i32* %315
  %317 = add i32 %316, 1
  %318 = inttoptr i64 %1324 to i32*
  store i32 %317, i32* %318
  %319 = add i64 %945, -272
  br label %block_419281

block_418d1e:                                     ; preds = %block_418d14
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2752), i64* %20, align 8, !tbaa !1240
  %320 = add i64 %631, -68
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %19, align 8, !tbaa !1240
  %324 = add i64 %386, 20
  %325 = load i64, i64* %21, align 8, !tbaa !1240
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %324, i64* %327
  %328 = load i64, i64* %689, align 8, !alias.scope !1554, !noalias !1557
  %329 = load i64, i64* %690, align 8, !alias.scope !1554, !noalias !1557
  %330 = load i64, i64* %598, align 8, !alias.scope !1554, !noalias !1557
  %331 = load i64, i64* %691, align 8, !alias.scope !1554, !noalias !1557
  %332 = inttoptr i64 %325 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %325, 8
  %335 = inttoptr i64 %334 to i64*
  %336 = load i64, i64* %335
  %337 = add i64 %325, 16
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338
  %340 = add i64 %325, 24
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %325, 32
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %325, 40
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %325, 48
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %325, 56
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %325, 64
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %325, 72
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = inttoptr i64 %326 to i64*
  %362 = load i64, i64* %361
  store i64 %362, i64* %3, align 8, !alias.scope !1554, !noalias !1557
  store i64 %325, i64* %21, align 8, !alias.scope !1554, !noalias !1557
  %363 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2752), i64 %323, i64 %328, i64 %329, i64 %330, i64 %331, i64 %333, i64 %336, i64 %339, i64 %342, i64 %345, i64 %348, i64 %351, i64 %354, i64 %357, i64 %360), !noalias !1554
  %364 = load i64, i64* %22, align 8
  %365 = add i64 %364, -96
  %366 = trunc i64 %363 to i32
  %367 = load i64, i64* %3, align 8
  %368 = add i64 %367, 3
  %369 = inttoptr i64 %365 to i32*
  store i32 %366, i32* %369
  br label %block_418d35

block_418d14:                                     ; preds = %block_418cfa, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_418d0a
  %370 = phi i64 [ %1141, %block_418cfa ], [ %390, %block_418d0a ], [ %630, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %371 = add i64 %631, -44
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = add i32 %373, -1
  %375 = icmp eq i32 %374, 0
  %376 = lshr i32 %374, 31
  %377 = trunc i32 %376 to i8
  %378 = lshr i32 %373, 31
  %379 = xor i32 %376, %378
  %380 = add nuw nsw i32 %379, %378
  %381 = icmp eq i32 %380, 2
  %382 = icmp ne i8 %377, 0
  %383 = xor i1 %382, %381
  %384 = or i1 %375, %383
  %385 = select i1 %384, i64 33, i64 10
  %386 = add i64 %370, %385
  br i1 %384, label %block_418d35, label %block_418d1e

block_418d0a:                                     ; preds = %block_418cfa
  %387 = add i32 %1136, -1
  %388 = icmp eq i32 %387, 0
  %389 = select i1 %388, i64 10, i64 48
  %390 = add i64 %1141, %389
  br i1 %388, label %block_418d14, label %block_418d3a

block_419507:                                     ; preds = %block_4194ef, %block_4194fd
  %391 = phi i64 [ %581, %block_4194ef ], [ %458, %block_4194fd ]
  %392 = phi %struct.Memory* [ %674, %block_4194ef ], [ %457, %block_4194fd ]
  %393 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %394 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %598, align 8, !tbaa !1240
  %396 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %23, align 8, !tbaa !1240
  %398 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %399 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %400 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %401 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %16, align 8, !tbaa !1240
  %403 = load i64, i64* %22, align 8
  %404 = add i64 %403, -244
  %405 = inttoptr i64 %404 to i32*
  store i32 %398, i32* %405
  store i64 12, i64* %20, align 8, !tbaa !1240
  %406 = add i64 %403, -248
  %407 = inttoptr i64 %406 to i32*
  store i32 %393, i32* %407
  store i64 12, i64* %19, align 8, !tbaa !1240
  %408 = add i64 %403, -256
  %409 = inttoptr i64 %408 to i64*
  store i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64* %409
  store i64 12, i64* %18, align 8, !tbaa !1240
  %410 = inttoptr i64 %406 to i32*
  %411 = load i32, i32* %410
  %412 = zext i32 %411 to i64
  %413 = add i64 %403, -264
  %414 = inttoptr i64 %413 to i64*
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %414
  store i64 %412, i64* %17, align 8, !tbaa !1240
  %415 = inttoptr i64 %404 to i32*
  %416 = load i32, i32* %415
  %417 = zext i32 %416 to i64
  store i64 %417, i64* %26, align 8, !tbaa !1240
  %418 = load i64, i64* %21, align 8
  %419 = inttoptr i64 %418 to i32*
  store i32 %416, i32* %419
  %420 = add i64 %418, 8
  %421 = inttoptr i64 %420 to i32*
  store i32 %399, i32* %421
  %422 = add i64 %418, 16
  %423 = inttoptr i64 %422 to i32*
  store i32 %400, i32* %423
  %424 = add i64 %418, 24
  %425 = inttoptr i64 %424 to i32*
  store i32 %401, i32* %425
  %426 = inttoptr i64 %413 to i64*
  %427 = load i64, i64* %426
  store i64 %427, i64* %27, align 8, !tbaa !1240
  %428 = add i64 %418, 32
  %429 = inttoptr i64 %428 to i64*
  store i64 %427, i64* %429
  %430 = inttoptr i64 %408 to i64*
  %431 = load i64, i64* %430
  store i64 %431, i64* %24, align 8, !tbaa !1240
  %432 = add i64 %418, 40
  %433 = inttoptr i64 %432 to i64*
  store i64 %431, i64* %433
  %434 = add i64 %391, -32887
  %435 = add i64 %391, 172
  %436 = add i64 %418, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %435, i64* %437
  store i64 %436, i64* %21, align 8, !tbaa !1240
  %438 = tail call %struct.Memory* @sub_411490_l2norm(%struct.State* nonnull %0, i64 %434, %struct.Memory* %392)
  %439 = load i64, i64* %3, align 8
  %440 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  store i8 0, i8* %51, align 1, !tbaa !1245
  %441 = and i32 %440, 255
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441) #11
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %52, align 1, !tbaa !1259
  store i8 0, i8* %53, align 1, !tbaa !1263
  %446 = icmp eq i32 %440, 0
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %54, align 1, !tbaa !1260
  %448 = lshr i32 %440, 31
  %449 = trunc i32 %448 to i8
  store i8 %449, i8* %55, align 1, !tbaa !1261
  store i8 0, i8* %56, align 1, !tbaa !1262
  %450 = select i1 %446, i64 24, i64 14
  %451 = add i64 %439, %450
  br i1 %446, label %block_4195cb, label %block_4195c1

block_4194fd:                                     ; preds = %block_4194ef
  store i64 11, i64* %20, align 8, !tbaa !1240
  %452 = add i64 %581, -88461
  %453 = add i64 %581, 10
  %454 = load i64, i64* %21, align 8, !tbaa !1240
  %455 = add i64 %454, -8
  %456 = inttoptr i64 %455 to i64*
  store i64 %453, i64* %456
  store i64 %455, i64* %21, align 8, !tbaa !1240
  %457 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %452, %struct.Memory* %674)
  %458 = load i64, i64* %3, align 8
  br label %block_419507

block_418ef4:                                     ; preds = %block_418edc, %block_418eea
  %459 = phi i64 [ %1211, %block_418edc ], [ %588, %block_418eea ]
  %460 = phi %struct.Memory* [ %1207, %block_418edc ], [ %587, %block_418eea ]
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %17, align 8, !tbaa !1240
  store i64 ptrtoint (%a_type* @a to i64), i64* %18, align 8, !tbaa !1240
  store i64 ptrtoint (%d_type* @d to i64), i64* %598, align 8, !tbaa !1240
  %461 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %462 = zext i32 %461 to i64
  %463 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %464 = zext i32 %463 to i64
  store i64 %464, i64* %599, align 8, !tbaa !1240
  %465 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %1693, align 8, !tbaa !1240
  %467 = load i64, i64* %22, align 8
  %468 = add i64 %467, -56
  %469 = inttoptr i64 %468 to i32*
  %470 = load i32, i32* %469
  %471 = zext i32 %470 to i64
  store i64 %471, i64* %16, align 8, !tbaa !1240
  %472 = load double, double* bitcast (%omega_type* @omega to double*)
  store double %472, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %473 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %474 = zext i32 %473 to i64
  store i64 %474, i64* %26, align 8, !tbaa !1240
  %475 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %476 = zext i32 %475 to i64
  store i64 %476, i64* %27, align 8, !tbaa !1240
  %477 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %478 = zext i32 %477 to i64
  store i64 %478, i64* %24, align 8, !tbaa !1240
  %479 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %480 = zext i32 %479 to i64
  store i64 %480, i64* %25, align 8, !tbaa !1240
  %481 = add i64 %467, -100
  %482 = inttoptr i64 %481 to i32*
  store i32 12, i32* %482
  %483 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %484 = add i64 %467, -104
  %485 = inttoptr i64 %484 to i32*
  store i32 %483, i32* %485
  %486 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %487 = add i64 %467, -108
  %488 = inttoptr i64 %487 to i32*
  store i32 %486, i32* %488
  %489 = inttoptr i64 %481 to i32*
  %490 = load i32, i32* %489
  %491 = zext i32 %490 to i64
  %492 = add i64 %467, -120
  %493 = inttoptr i64 %492 to i64*
  store i64 ptrtoint (%c_type* @c to i64), i64* %493
  store i64 %491, i64* %20, align 8, !tbaa !1240
  %494 = add i64 %467, -128
  %495 = inttoptr i64 %494 to i64*
  store i64 ptrtoint (%b_type* @b to i64), i64* %495
  store i64 %491, i64* %19, align 8, !tbaa !1240
  %496 = add i64 %467, -136
  %497 = load i64, i64* %18, align 8
  %498 = inttoptr i64 %496 to i64*
  store i64 %497, i64* %498
  store i64 %491, i64* %18, align 8, !tbaa !1240
  %499 = add i64 %467, -144
  %500 = load i64, i64* %17, align 8
  %501 = inttoptr i64 %499 to i64*
  store i64 %500, i64* %501
  store i64 %462, i64* %17, align 8, !tbaa !1240
  %502 = add i64 %467, -152
  %503 = load i64, i64* %598, align 8
  %504 = inttoptr i64 %502 to i64*
  store i64 %503, i64* %504
  %505 = load i32, i32* %592, align 4
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %598, align 8, !tbaa !1240
  %507 = load i32, i32* %593, align 4
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %23, align 8, !tbaa !1240
  %509 = load i64, i64* %21, align 8
  %510 = load i32, i32* %590, align 4
  %511 = inttoptr i64 %509 to i32*
  store i32 %510, i32* %511
  %512 = load i64, i64* %22, align 8
  %513 = add i64 %512, -144
  %514 = inttoptr i64 %513 to i64*
  %515 = load i64, i64* %514
  %516 = add i64 %509, 8
  %517 = inttoptr i64 %516 to i64*
  store i64 %515, i64* %517
  %518 = add i64 %512, -136
  %519 = inttoptr i64 %518 to i64*
  %520 = load i64, i64* %519
  %521 = add i64 %509, 16
  %522 = inttoptr i64 %521 to i64*
  store i64 %520, i64* %522
  %523 = add i64 %512, -128
  %524 = inttoptr i64 %523 to i64*
  %525 = load i64, i64* %524
  %526 = add i64 %509, 24
  %527 = inttoptr i64 %526 to i64*
  store i64 %525, i64* %527
  %528 = add i64 %512, -120
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %509, 32
  %532 = inttoptr i64 %531 to i64*
  store i64 %530, i64* %532
  %533 = add i64 %512, -152
  %534 = inttoptr i64 %533 to i64*
  %535 = load i64, i64* %534
  %536 = add i64 %509, 40
  %537 = inttoptr i64 %536 to i64*
  store i64 %535, i64* %537
  %538 = add i64 %509, 48
  %539 = load i32, i32* %596, align 4
  %540 = inttoptr i64 %538 to i32*
  store i32 %539, i32* %540
  %541 = add i64 %509, 56
  %542 = load i32, i32* %597, align 4
  %543 = inttoptr i64 %541 to i32*
  store i32 %542, i32* %543
  %544 = add i64 %509, 64
  %545 = load i32, i32* %594, align 4
  %546 = inttoptr i64 %544 to i32*
  store i32 %545, i32* %546
  %547 = add i64 %509, 72
  %548 = load i32, i32* %595, align 4
  %549 = inttoptr i64 %547 to i32*
  store i32 %548, i32* %549
  %550 = add i64 %512, -104
  %551 = inttoptr i64 %550 to i32*
  %552 = load i32, i32* %551
  %553 = add i64 %509, 80
  %554 = inttoptr i64 %553 to i32*
  store i32 %552, i32* %554
  %555 = add i64 %512, -108
  %556 = inttoptr i64 %555 to i32*
  %557 = load i32, i32* %556
  %558 = add i64 %509, 88
  %559 = inttoptr i64 %558 to i32*
  store i32 %557, i32* %559
  %560 = add i64 %459, -100132
  %561 = add i64 %459, 293
  %562 = add i64 %509, -8
  %563 = inttoptr i64 %562 to i64*
  store i64 %561, i64* %563
  store i64 %562, i64* %21, align 8, !tbaa !1240
  %564 = tail call %struct.Memory* @sub_4007d0_blts(%struct.State* nonnull %0, i64 %560, %struct.Memory* %460)
  %565 = load i64, i64* %3, align 8
  %566 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %567 = icmp eq i32 %566, 0
  %568 = select i1 %567, i64 24, i64 14
  %569 = add i64 %565, %568
  br i1 %567, label %block_419031, label %block_419027

block_4193f1:                                     ; preds = %block_4193e3
  store i64 11, i64* %20, align 8, !tbaa !1240
  %570 = add i64 %129, -88193
  %571 = add i64 %129, 10
  %572 = load i64, i64* %21, align 8, !tbaa !1240
  %573 = add i64 %572, -8
  %574 = inttoptr i64 %573 to i64*
  store i64 %571, i64* %574
  store i64 %573, i64* %21, align 8, !tbaa !1240
  %575 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %570, %struct.Memory* %162)
  %576 = load i64, i64* %3, align 8
  br label %block_4193fb

block_4194ef:                                     ; preds = %block_4194df, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit1
  %577 = phi i64 [ %1251, %block_4194df ], [ %677, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %578 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %579 = icmp eq i32 %578, 0
  %580 = select i1 %579, i64 24, i64 14
  %581 = add i64 %577, %580
  br i1 %579, label %block_419507, label %block_4194fd

block_418eea:                                     ; preds = %block_418edc
  store i64 7, i64* %20, align 8, !tbaa !1240
  %582 = add i64 %1211, -86906
  %583 = add i64 %1211, 10
  %584 = load i64, i64* %21, align 8, !tbaa !1240
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %583, i64* %586
  store i64 %585, i64* %21, align 8, !tbaa !1240
  %587 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %582, %struct.Memory* %1207)
  %588 = load i64, i64* %3, align 8
  br label %block_418ef4

block_418a7b:                                     ; preds = %block_418a71
  %589 = inttoptr i64 %79 to i32*
  store i32 0, i32* %589
  br label %block_418a82

block_418be0:                                     ; preds = %block_418a71
  %590 = bitcast %union.anon* %5 to i32*
  %591 = bitcast %union.anon* %6 to i32*
  %592 = bitcast %union.anon* %9 to i32*
  %593 = bitcast %union.anon* %10 to i32*
  %594 = bitcast %union.anon* %11 to i32*
  %595 = bitcast %union.anon* %12 to i32*
  %596 = bitcast %union.anon* %13 to i32*
  %597 = bitcast %union.anon* %14 to i32*
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %599 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %600 = inttoptr i64 %79 to i32*
  store i32 1, i32* %600
  %601 = load i64, i64* %22, align 8
  br label %block_418be7

block_418cde:                                     ; preds = %block_418cd2
  %602 = add i64 %1336, -92
  %603 = inttoptr i64 %602 to i32*
  store i32 20, i32* %603
  store i64 %1341, i64* %15, align 8, !tbaa !1240
  %604 = sext i32 %1340 to i64
  %605 = lshr i64 %604, 32
  store i64 %605, i64* %689, align 8, !tbaa !1240
  %606 = inttoptr i64 %602 to i32*
  %607 = load i32, i32* %606
  %608 = zext i32 %607 to i64
  store i64 %608, i64* %17, align 8, !tbaa !1240
  %609 = add i64 %1373, 19
  store i64 %609, i64* %3, align 8
  %610 = sext i32 %607 to i64
  %611 = shl nuw i64 %605, 32
  %612 = or i64 %611, %1341
  %613 = sdiv i64 %612, %610
  %614 = shl i64 %613, 32
  %615 = ashr exact i64 %614, 32
  %616 = icmp eq i64 %613, %615
  br i1 %616, label %621, label %617

; <label>:617:                                    ; preds = %block_418cde
  %618 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %609, %struct.Memory* %1337) #14
  %619 = load i32, i32* %591, align 4
  %620 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:621:                                    ; preds = %block_418cde
  %622 = srem i64 %612, %610
  %623 = and i64 %622, 4294967295
  store i64 %623, i64* %18, align 8, !tbaa !1240
  %624 = trunc i64 %622 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %621, %617
  %625 = phi i64 [ %620, %617 ], [ %609, %621 ]
  %626 = phi i32 [ %619, %617 ], [ %624, %621 ]
  %627 = phi %struct.Memory* [ %618, %617 ], [ %1337, %621 ]
  %628 = icmp eq i32 %626, 0
  %629 = select i1 %628, i64 35, i64 9
  %630 = add i64 %625, %629
  %631 = load i64, i64* %22, align 8
  br i1 %628, label %block_418d14, label %block_418cfa

block_418ed2:                                     ; preds = %block_418ebc
  store i64 6, i64* %20, align 8, !tbaa !1240
  %632 = add i64 %1502, -86802
  %633 = add i64 %1502, 10
  %634 = load i64, i64* %21, align 8, !tbaa !1240
  %635 = add i64 %634, -8
  %636 = inttoptr i64 %635 to i64*
  store i64 %633, i64* %636
  store i64 %635, i64* %21, align 8, !tbaa !1240
  %637 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %632, %struct.Memory* %1497)
  %638 = load i64, i64* %3, align 8
  br label %block_418edc

block_4194c4:                                     ; preds = %block_4194bf, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %639 = phi i64 [ %165, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %694, %block_4194bf ]
  %640 = phi %struct.Memory* [ %162, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %693, %block_4194bf ]
  %641 = add i64 %639, -22756
  %642 = add i64 %639, 7
  %643 = load i64, i64* %21, align 8, !tbaa !1240
  %644 = add i64 %643, -8
  %645 = inttoptr i64 %644 to i64*
  store i64 %642, i64* %645
  store i64 %644, i64* %21, align 8, !tbaa !1240
  %646 = tail call %struct.Memory* @sub_413be0_rhs(%struct.State* nonnull %0, i64 %641, %struct.Memory* %640)
  %647 = load i64, i64* %22, align 8
  %648 = add i64 %647, -68
  %649 = load i64, i64* %3, align 8
  %650 = inttoptr i64 %648 to i32*
  %651 = load i32, i32* %650
  %652 = zext i32 %651 to i64
  store i64 %652, i64* %15, align 8, !tbaa !1240
  %653 = sext i32 %651 to i64
  %654 = lshr i64 %653, 32
  store i64 %654, i64* %689, align 8, !tbaa !1240
  %655 = add i64 %649, 11
  store i64 %655, i64* %3, align 8
  %656 = load i32, i32* bitcast (%inorm_type* @inorm to i32*)
  %657 = sext i32 %656 to i64
  %658 = shl nuw i64 %654, 32
  %659 = or i64 %658, %652
  %660 = sdiv i64 %659, %657
  %661 = shl i64 %660, 32
  %662 = ashr exact i64 %661, 32
  %663 = icmp eq i64 %660, %662
  br i1 %663, label %668, label %664

; <label>:664:                                    ; preds = %block_4194c4
  %665 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %655, %struct.Memory* %646) #14
  %666 = load i32, i32* %591, align 4
  %667 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:668:                                    ; preds = %block_4194c4
  %669 = srem i64 %659, %657
  %670 = and i64 %669, 4294967295
  store i64 %670, i64* %18, align 8, !tbaa !1240
  %671 = trunc i64 %669 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %668, %664
  %672 = phi i64 [ %667, %664 ], [ %655, %668 ]
  %673 = phi i32 [ %666, %664 ], [ %671, %668 ]
  %674 = phi %struct.Memory* [ %665, %664 ], [ %646, %668 ]
  %675 = icmp eq i32 %673, 0
  %676 = select i1 %675, i64 25, i64 9
  %677 = add i64 %672, %676
  br i1 %675, label %block_4194ef, label %block_4194df

block_418cc1:                                     ; preds = %block_418ca1
  store i64 1, i64* %20, align 8, !tbaa !1240
  %678 = add i64 %926, -86353
  %679 = add i64 %926, 10
  %680 = load i64, i64* %21, align 8, !tbaa !1240
  %681 = add i64 %680, -8
  %682 = inttoptr i64 %681 to i64*
  store i64 %679, i64* %682
  store i64 %681, i64* %21, align 8, !tbaa !1240
  %683 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %678, %struct.Memory* %897)
  %684 = load i64, i64* %22, align 8
  %685 = add i64 %684, -68
  %686 = load i64, i64* %3, align 8
  %687 = add i64 %686, 7
  %688 = inttoptr i64 %685 to i32*
  store i32 1, i32* %688
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_418cd2

block_4194bf:                                     ; preds = %block_4194b5, %block_4193fb
  %692 = phi i64 [ %268, %block_4193fb ], [ %749, %block_4194b5 ]
  %693 = phi %struct.Memory* [ %263, %block_4193fb ], [ %748, %block_4194b5 ]
  %694 = add i64 %692, 5
  br label %block_4194c4

block_4192bc:                                     ; preds = %block_4192b2
  %695 = inttoptr i64 %1321 to i32*
  %696 = load i32, i32* %695
  %697 = sext i32 %696 to i64
  %698 = mul nsw i64 %697, 6760
  %699 = add i64 %698, ptrtoint (%u_type* @u to i64)
  %700 = inttoptr i64 %1324 to i32*
  %701 = load i32, i32* %700
  %702 = sext i32 %701 to i64
  %703 = mul nsw i64 %702, 520
  %704 = add i64 %703, %699
  %705 = inttoptr i64 %1325 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  %708 = mul nsw i64 %707, 40
  %709 = add i64 %708, %704
  store i64 %709, i64* %19, align 8, !tbaa !1240
  %710 = sext i32 %753 to i64
  %711 = shl nsw i64 %710, 3
  %712 = add i64 %711, %709
  %713 = inttoptr i64 %712 to double*
  %714 = load double, double* %713
  %715 = load double, double* bitcast (%tmp_type* @tmp to double*)
  %716 = add i64 %698, ptrtoint (%rsd_type* @rsd to i64)
  %717 = add i64 %703, %716
  %718 = add i64 %708, %717
  store i64 %710, i64* %18, align 8, !tbaa !1240
  %719 = add i64 %711, %718
  %720 = inttoptr i64 %719 to double*
  %721 = load double, double* %720
  %722 = fmul double %715, %721
  store double %722, double* %63, align 1, !tbaa !1264
  store i64 0, i64* %64, align 1, !tbaa !1264
  %723 = fadd double %714, %722
  store double %723, double* %59, align 1, !tbaa !1264
  store i64 0, i64* %60, align 1, !tbaa !1264
  %724 = inttoptr i64 %712 to double*
  store double %723, double* %724
  %725 = inttoptr i64 %1326 to i32*
  %726 = load i32, i32* %725
  %727 = add i32 %726, 1
  %728 = inttoptr i64 %1326 to i32*
  store i32 %727, i32* %728
  %729 = add i64 %763, -10
  br label %block_4192b2

block_4193b7:                                     ; preds = %block_419262
  %730 = zext i32 %1193 to i64
  store i64 %730, i64* %17, align 8, !tbaa !1240
  %731 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  store i8 0, i8* %51, align 1, !tbaa !1245
  %732 = and i32 %731, 255
  %733 = tail call i32 @llvm.ctpop.i32(i32 %732) #11
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  %736 = xor i8 %735, 1
  store i8 %736, i8* %52, align 1, !tbaa !1259
  store i8 0, i8* %53, align 1, !tbaa !1263
  %737 = icmp eq i32 %731, 0
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %54, align 1, !tbaa !1260
  %739 = lshr i32 %731, 31
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %55, align 1, !tbaa !1261
  store i8 0, i8* %56, align 1, !tbaa !1262
  %741 = select i1 %737, i64 24, i64 14
  %742 = add i64 %1205, %741
  br i1 %737, label %block_4193cf, label %block_4193c5

block_4194b5:                                     ; preds = %block_4193fb
  store i64 11, i64* %20, align 8, !tbaa !1240
  %743 = add i64 %268, -88309
  %744 = add i64 %268, 10
  %745 = load i64, i64* %21, align 8, !tbaa !1240
  %746 = add i64 %745, -8
  %747 = inttoptr i64 %746 to i64*
  store i64 %744, i64* %747
  store i64 %746, i64* %21, align 8, !tbaa !1240
  %748 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %743, %struct.Memory* %263)
  %749 = load i64, i64* %3, align 8
  br label %block_4194bf

block_4192b2:                                     ; preds = %block_4192ab, %block_4192bc
  %750 = phi i64 [ %1559, %block_4192ab ], [ %729, %block_4192bc ]
  %751 = phi %struct.Memory* [ %930, %block_4192ab ], [ %751, %block_4192bc ]
  %752 = inttoptr i64 %1326 to i32*
  %753 = load i32, i32* %752
  %754 = add i32 %753, -5
  %755 = lshr i32 %754, 31
  %756 = lshr i32 %753, 31
  %757 = xor i32 %755, %756
  %758 = add nuw nsw i32 %757, %756
  %759 = icmp eq i32 %758, 2
  %760 = icmp ne i32 %755, 0
  %761 = xor i1 %760, %759
  %762 = select i1 %761, i64 10, i64 204
  %763 = add i64 %750, %762
  br i1 %761, label %block_4192bc, label %block_41937e

block_418aae:                                     ; preds = %block_418aa4
  store i32 0, i32* %82, align 1, !tbaa !1266
  store i32 0, i32* %84, align 1, !tbaa !1266
  store i32 0, i32* %85, align 1, !tbaa !1266
  store i32 0, i32* %87, align 1, !tbaa !1266
  %764 = inttoptr i64 %76 to i32*
  %765 = load i32, i32* %764
  %766 = sext i32 %765 to i64
  %767 = mul nsw i64 %766, 2600
  %768 = add i64 %767, ptrtoint (%a_type* @a to i64)
  %769 = inttoptr i64 %79 to i32*
  %770 = load i32, i32* %769
  %771 = sext i32 %770 to i64
  %772 = mul nsw i64 %771, 200
  %773 = add i64 %772, %768
  %774 = inttoptr i64 %80 to i32*
  %775 = load i32, i32* %774
  %776 = sext i32 %775 to i64
  %777 = mul nsw i64 %776, 40
  %778 = add i64 %777, %773
  %779 = sext i32 %884 to i64
  store i64 %779, i64* %20, align 8, !tbaa !1240
  %780 = shl nsw i64 %779, 3
  %781 = add i64 %780, %778
  %782 = load double, double* %59, align 1
  %783 = inttoptr i64 %781 to double*
  store double %782, double* %783
  %784 = inttoptr i64 %76 to i32*
  %785 = load i32, i32* %784
  %786 = sext i32 %785 to i64
  %787 = mul nsw i64 %786, 2600
  %788 = add i64 %787, ptrtoint (%b_type* @b to i64)
  %789 = inttoptr i64 %79 to i32*
  %790 = load i32, i32* %789
  %791 = sext i32 %790 to i64
  %792 = mul nsw i64 %791, 200
  %793 = add i64 %792, %788
  %794 = inttoptr i64 %80 to i32*
  %795 = load i32, i32* %794
  %796 = sext i32 %795 to i64
  %797 = mul nsw i64 %796, 40
  %798 = add i64 %797, %793
  %799 = inttoptr i64 %81 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  store i64 %801, i64* %19, align 8, !tbaa !1240
  %802 = shl nsw i64 %801, 3
  %803 = add i64 %802, %798
  %804 = inttoptr i64 %803 to double*
  store double %782, double* %804
  %805 = inttoptr i64 %76 to i32*
  %806 = load i32, i32* %805
  %807 = sext i32 %806 to i64
  %808 = mul nsw i64 %807, 2600
  %809 = add i64 %808, ptrtoint (%c_type* @c to i64)
  %810 = inttoptr i64 %79 to i32*
  %811 = load i32, i32* %810
  %812 = sext i32 %811 to i64
  %813 = mul nsw i64 %812, 200
  %814 = add i64 %813, %809
  %815 = inttoptr i64 %80 to i32*
  %816 = load i32, i32* %815
  %817 = sext i32 %816 to i64
  %818 = mul nsw i64 %817, 40
  %819 = add i64 %818, %814
  %820 = inttoptr i64 %81 to i32*
  %821 = load i32, i32* %820
  %822 = sext i32 %821 to i64
  store i64 %822, i64* %18, align 8, !tbaa !1240
  %823 = shl nsw i64 %822, 3
  %824 = add i64 %823, %819
  %825 = inttoptr i64 %824 to double*
  store double %782, double* %825
  %826 = inttoptr i64 %76 to i32*
  %827 = load i32, i32* %826
  %828 = sext i32 %827 to i64
  %829 = mul nsw i64 %828, 2600
  %830 = add i64 %829, ptrtoint (%d_type* @d to i64)
  %831 = inttoptr i64 %79 to i32*
  %832 = load i32, i32* %831
  %833 = sext i32 %832 to i64
  %834 = mul nsw i64 %833, 200
  %835 = add i64 %834, %830
  %836 = inttoptr i64 %80 to i32*
  %837 = load i32, i32* %836
  %838 = sext i32 %837 to i64
  %839 = mul nsw i64 %838, 40
  %840 = add i64 %839, %835
  %841 = inttoptr i64 %81 to i32*
  %842 = load i32, i32* %841
  %843 = sext i32 %842 to i64
  store i64 %843, i64* %17, align 8, !tbaa !1240
  %844 = shl nsw i64 %843, 3
  %845 = add i64 %844, %840
  %846 = inttoptr i64 %845 to double*
  store double %782, double* %846
  %847 = inttoptr i64 %81 to i32*
  %848 = load i32, i32* %847
  %849 = add i32 %848, 1
  %850 = inttoptr i64 %81 to i32*
  store i32 %849, i32* %850
  %851 = add i64 %894, -10
  br label %block_418aa4

block_418da9:                                     ; preds = %block_418da2, %block_418db3
  %852 = phi i64 [ %214, %block_418da2 ], [ %203, %block_418db3 ]
  %853 = phi %struct.Memory* [ %1084, %block_418da2 ], [ %853, %block_418db3 ]
  %854 = inttoptr i64 %1442 to i32*
  %855 = load i32, i32* %854
  %856 = add i32 %855, -5
  %857 = lshr i32 %856, 31
  %858 = lshr i32 %855, 31
  %859 = xor i32 %857, %858
  %860 = add nuw nsw i32 %859, %858
  %861 = icmp eq i32 %860, 2
  %862 = icmp ne i32 %857, 0
  %863 = xor i1 %862, %861
  %864 = select i1 %863, i64 10, i64 142
  %865 = add i64 %852, %864
  br i1 %863, label %block_418db3, label %block_418e37

block_418cab:                                     ; preds = %block_418ca1
  %866 = zext i32 %900 to i64
  store i64 %866, i64* %20, align 8, !tbaa !1240
  %867 = add i64 %926, -86363
  %868 = add i64 %926, 8
  %869 = load i64, i64* %21, align 8, !tbaa !1240
  %870 = add i64 %869, -8
  %871 = inttoptr i64 %870 to i64*
  store i64 %868, i64* %871
  store i64 %870, i64* %21, align 8, !tbaa !1240
  %872 = tail call %struct.Memory* @sub_403b50_timer_clear(%struct.State* nonnull %0, i64 %867, %struct.Memory* %897)
  %873 = load i64, i64* %22, align 8
  %874 = add i64 %873, -48
  %875 = load i64, i64* %3, align 8
  %876 = inttoptr i64 %874 to i32*
  %877 = load i32, i32* %876
  %878 = add i32 %877, 1
  %879 = inttoptr i64 %874 to i32*
  store i32 %878, i32* %879
  %880 = add i64 %875, -18
  br label %block_418ca1

block_418aa4:                                     ; preds = %block_418a9d, %block_418aae
  %881 = phi i64 [ %927, %block_418a9d ], [ %851, %block_418aae ]
  %882 = phi %struct.Memory* [ %1109, %block_418a9d ], [ %882, %block_418aae ]
  %883 = inttoptr i64 %81 to i32*
  %884 = load i32, i32* %883
  %885 = add i32 %884, -5
  %886 = lshr i32 %885, 31
  %887 = lshr i32 %884, 31
  %888 = xor i32 %886, %887
  %889 = add nuw nsw i32 %888, %887
  %890 = icmp eq i32 %889, 2
  %891 = icmp ne i32 %886, 0
  %892 = xor i1 %891, %890
  %893 = select i1 %892, i64 10, i64 259
  %894 = add i64 %881, %893
  br i1 %892, label %block_418aae, label %block_418ba7

block_418ca1:                                     ; preds = %block_418c07, %block_418cab
  %895 = phi i64 [ %1733, %block_418c07 ], [ %880, %block_418cab ]
  %896 = phi i64 [ %1730, %block_418c07 ], [ %873, %block_418cab ]
  %897 = phi %struct.Memory* [ %1729, %block_418c07 ], [ %872, %block_418cab ]
  %898 = add i64 %896, -48
  %899 = inttoptr i64 %898 to i32*
  %900 = load i32, i32* %899
  %901 = add i32 %900, -11
  %902 = icmp ult i32 %900, 11
  %903 = zext i1 %902 to i8
  store i8 %903, i8* %51, align 1, !tbaa !1245
  %904 = and i32 %901, 255
  %905 = tail call i32 @llvm.ctpop.i32(i32 %904) #11
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  store i8 %908, i8* %52, align 1, !tbaa !1259
  %909 = xor i32 %901, %900
  %910 = lshr i32 %909, 4
  %911 = trunc i32 %910 to i8
  %912 = and i8 %911, 1
  store i8 %912, i8* %53, align 1, !tbaa !1263
  %913 = icmp eq i32 %901, 0
  %914 = zext i1 %913 to i8
  store i8 %914, i8* %54, align 1, !tbaa !1260
  %915 = lshr i32 %901, 31
  %916 = trunc i32 %915 to i8
  store i8 %916, i8* %55, align 1, !tbaa !1261
  %917 = lshr i32 %900, 31
  %918 = xor i32 %915, %917
  %919 = add nuw nsw i32 %918, %917
  %920 = icmp eq i32 %919, 2
  %921 = zext i1 %920 to i8
  store i8 %921, i8* %56, align 1, !tbaa !1262
  %922 = icmp ne i8 %916, 0
  %923 = xor i1 %922, %920
  %924 = or i1 %913, %923
  %925 = select i1 %924, i64 10, i64 32
  %926 = add i64 %895, %925
  br i1 %924, label %block_418cab, label %block_418cc1

block_418a9d:                                     ; preds = %block_418a93
  %927 = add i64 %1121, 7
  %928 = inttoptr i64 %81 to i32*
  store i32 0, i32* %928
  br label %block_418aa4

block_41929b:                                     ; preds = %block_41937e, %block_419291
  %929 = phi i64 [ %947, %block_419291 ], [ %1045, %block_41937e ]
  %930 = phi %struct.Memory* [ %1067, %block_419291 ], [ %751, %block_41937e ]
  %931 = inttoptr i64 %1325 to i32*
  %932 = load i32, i32* %931
  %933 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %934 = sub i32 %932, %933
  %935 = lshr i32 %934, 31
  %936 = lshr i32 %932, 31
  %937 = lshr i32 %933, 31
  %938 = xor i32 %937, %936
  %939 = xor i32 %935, %936
  %940 = add nuw nsw i32 %939, %938
  %941 = icmp eq i32 %940, 2
  %942 = icmp ne i32 %935, 0
  %943 = xor i1 %942, %941
  %944 = select i1 %943, i64 16, i64 246
  %945 = add i64 %929, %944
  br i1 %943, label %block_4192ab, label %block_419391

block_419291:                                     ; preds = %block_419281
  %946 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %947 = add i64 %1082, 10
  %948 = inttoptr i64 %1325 to i32*
  store i32 %946, i32* %948
  br label %block_41929b

block_418e8f:                                     ; preds = %block_419031, %block_418e88
  %949 = phi i64 [ %1050, %block_418e88 ], [ %1516, %block_419031 ]
  %950 = phi i64 [ %1047, %block_418e88 ], [ %1510, %block_419031 ]
  %951 = phi %struct.Memory* [ %1048, %block_418e88 ], [ %1509, %block_419031 ]
  %952 = add i64 %950, -56
  %953 = inttoptr i64 %952 to i32*
  %954 = load i32, i32* %953
  %955 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %956 = add i32 %955, -1
  %957 = zext i32 %956 to i64
  store i64 %957, i64* %17, align 8, !tbaa !1240
  %958 = lshr i32 %956, 31
  %959 = sub i32 %954, %956
  %960 = lshr i32 %959, 31
  %961 = trunc i32 %960 to i8
  %962 = lshr i32 %954, 31
  %963 = xor i32 %958, %962
  %964 = xor i32 %960, %962
  %965 = add nuw nsw i32 %964, %963
  %966 = icmp eq i32 %965, 2
  %967 = icmp ne i8 %961, 0
  %968 = xor i1 %967, %966
  %969 = select i1 %968, i64 21, i64 437
  %970 = add i64 %949, %969
  br i1 %968, label %block_418ea4, label %block_419044

block_41968e.loopexit:                            ; preds = %block_418cd2
  br label %block_41968e

block_41968e:                                     ; preds = %block_41965c, %block_41968e.loopexit
  %971 = phi i64 [ %1317, %block_41965c ], [ %1373, %block_41968e.loopexit ]
  %972 = phi %struct.Memory* [ %1475, %block_41965c ], [ %1337, %block_41968e.loopexit ]
  store i64 1, i64* %20, align 8, !tbaa !1240
  %973 = add i64 %971, -88782
  %974 = add i64 %971, 10
  %975 = load i64, i64* %21, align 8, !tbaa !1240
  %976 = add i64 %975, -8
  %977 = inttoptr i64 %976 to i64*
  store i64 %974, i64* %977
  store i64 %976, i64* %21, align 8, !tbaa !1240
  %978 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %973, %struct.Memory* %972)
  %979 = load i64, i64* %3, align 8
  store i64 1, i64* %20, align 8, !tbaa !1240
  %980 = add i64 %979, -88712
  %981 = add i64 %979, 10
  %982 = load i64, i64* %21, align 8, !tbaa !1240
  %983 = add i64 %982, -8
  %984 = inttoptr i64 %983 to i64*
  store i64 %981, i64* %984
  store i64 %983, i64* %21, align 8, !tbaa !1240
  %985 = tail call %struct.Memory* @sub_403c10_timer_read(%struct.State* nonnull %0, i64 %980, %struct.Memory* %978)
  %986 = load double, double* %59, align 1
  store double %986, double* bitcast (%maxtime_type* @maxtime to double*)
  %987 = load i64, i64* %21, align 8
  %988 = add i64 %987, 344
  %989 = icmp ugt i64 %987, -345
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %51, align 1, !tbaa !1245
  %991 = trunc i64 %988 to i32
  %992 = and i32 %991, 255
  %993 = tail call i32 @llvm.ctpop.i32(i32 %992) #11
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  store i8 %996, i8* %52, align 1, !tbaa !1259
  %997 = xor i64 %987, 16
  %998 = xor i64 %997, %988
  %999 = lshr i64 %998, 4
  %1000 = trunc i64 %999 to i8
  %1001 = and i8 %1000, 1
  store i8 %1001, i8* %53, align 1, !tbaa !1263
  %1002 = icmp eq i64 %988, 0
  %1003 = zext i1 %1002 to i8
  store i8 %1003, i8* %54, align 1, !tbaa !1260
  %1004 = lshr i64 %988, 63
  %1005 = trunc i64 %1004 to i8
  store i8 %1005, i8* %55, align 1, !tbaa !1261
  %1006 = lshr i64 %987, 63
  %1007 = xor i64 %1004, %1006
  %1008 = add nuw nsw i64 %1007, %1004
  %1009 = icmp eq i64 %1008, 2
  %1010 = zext i1 %1009 to i8
  store i8 %1010, i8* %56, align 1, !tbaa !1262
  %1011 = add i64 %987, 352
  %1012 = inttoptr i64 %988 to i64*
  %1013 = load i64, i64* %1012
  store i64 %1013, i64* %16, align 8, !tbaa !1240
  %1014 = add i64 %987, 360
  %1015 = inttoptr i64 %1011 to i64*
  %1016 = load i64, i64* %1015
  store i64 %1016, i64* %24, align 8, !tbaa !1240
  %1017 = add i64 %987, 368
  %1018 = inttoptr i64 %1014 to i64*
  %1019 = load i64, i64* %1018
  store i64 %1019, i64* %25, align 8, !tbaa !1240
  %1020 = add i64 %987, 376
  %1021 = inttoptr i64 %1017 to i64*
  %1022 = load i64, i64* %1021
  store i64 %1022, i64* %26, align 8, !tbaa !1240
  %1023 = add i64 %987, 384
  %1024 = inttoptr i64 %1020 to i64*
  %1025 = load i64, i64* %1024
  store i64 %1025, i64* %27, align 8, !tbaa !1240
  %1026 = add i64 %987, 392
  %1027 = inttoptr i64 %1023 to i64*
  %1028 = load i64, i64* %1027
  store i64 %1028, i64* %22, align 8, !tbaa !1240
  %1029 = inttoptr i64 %1026 to i64*
  %1030 = load i64, i64* %1029
  store i64 %1030, i64* %3, align 8, !tbaa !1240
  %1031 = add i64 %987, 400
  store i64 %1031, i64* %21, align 8, !tbaa !1240
  ret %struct.Memory* %985

block_418a8c:                                     ; preds = %block_418a82
  %1032 = add i64 %1065, 7
  %1033 = inttoptr i64 %80 to i32*
  store i32 0, i32* %1033
  br label %block_418a93

block_419089:                                     ; preds = %block_419073
  store i64 8, i64* %20, align 8, !tbaa !1240
  %1034 = add i64 %1159, -87241
  %1035 = add i64 %1159, 10
  %1036 = load i64, i64* %21, align 8, !tbaa !1240
  %1037 = add i64 %1036, -8
  %1038 = inttoptr i64 %1037 to i64*
  store i64 %1035, i64* %1038
  store i64 %1037, i64* %21, align 8, !tbaa !1240
  %1039 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %1034, %struct.Memory* %1154)
  %1040 = load i64, i64* %3, align 8
  br label %block_419093

block_41937e:                                     ; preds = %block_4192b2
  %1041 = inttoptr i64 %1325 to i32*
  %1042 = load i32, i32* %1041
  %1043 = add i32 %1042, 1
  %1044 = inttoptr i64 %1325 to i32*
  store i32 %1043, i32* %1044
  %1045 = add i64 %763, -227
  br label %block_41929b

block_418e88:                                     ; preds = %block_418e70, %block_418e7e
  %1046 = phi i64 [ %1179, %block_418e70 ], [ %1107, %block_418e7e ]
  %1047 = phi i64 [ %1435, %block_418e70 ], [ %1106, %block_418e7e ]
  %1048 = phi %struct.Memory* [ %290, %block_418e70 ], [ %1105, %block_418e7e ]
  %1049 = add i64 %1047, -56
  %1050 = add i64 %1046, 7
  %1051 = inttoptr i64 %1049 to i32*
  store i32 1, i32* %1051
  br label %block_418e8f

block_418a82:                                     ; preds = %block_418bba, %block_418a7b
  %1052 = phi i64 [ %1175, %block_418a7b ], [ %1507, %block_418bba ]
  %1053 = phi %struct.Memory* [ %1161, %block_418a7b ], [ %1109, %block_418bba ]
  %1054 = inttoptr i64 %79 to i32*
  %1055 = load i32, i32* %1054
  %1056 = add i32 %1055, -12
  %1057 = lshr i32 %1056, 31
  %1058 = lshr i32 %1055, 31
  %1059 = xor i32 %1057, %1058
  %1060 = add nuw nsw i32 %1059, %1058
  %1061 = icmp eq i32 %1060, 2
  %1062 = icmp ne i32 %1057, 0
  %1063 = xor i1 %1062, %1061
  %1064 = select i1 %1063, i64 10, i64 331
  %1065 = add i64 %1052, %1064
  br i1 %1063, label %block_418a8c, label %block_418bcd

block_419281:                                     ; preds = %block_419277, %block_419391
  %1066 = phi i64 [ %1132, %block_419277 ], [ %319, %block_419391 ]
  %1067 = phi %struct.Memory* [ %1189, %block_419277 ], [ %930, %block_419391 ]
  %1068 = inttoptr i64 %1324 to i32*
  %1069 = load i32, i32* %1068
  %1070 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %1071 = sub i32 %1069, %1070
  %1072 = lshr i32 %1071, 31
  %1073 = lshr i32 %1069, 31
  %1074 = lshr i32 %1070, 31
  %1075 = xor i32 %1074, %1073
  %1076 = xor i32 %1072, %1073
  %1077 = add nuw nsw i32 %1076, %1075
  %1078 = icmp eq i32 %1077, 2
  %1079 = icmp ne i32 %1072, 0
  %1080 = xor i1 %1079, %1078
  %1081 = select i1 %1080, i64 16, i64 291
  %1082 = add i64 %1066, %1081
  br i1 %1080, label %block_419291, label %block_4193a4

block_418d92:                                     ; preds = %block_418e37, %block_418d88
  %1083 = phi i64 [ %270, %block_418d88 ], [ %1484, %block_418e37 ]
  %1084 = phi %struct.Memory* [ %273, %block_418d88 ], [ %853, %block_418e37 ]
  %1085 = inttoptr i64 %1441 to i32*
  %1086 = load i32, i32* %1085
  %1087 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %1088 = sub i32 %1086, %1087
  %1089 = lshr i32 %1088, 31
  %1090 = lshr i32 %1086, 31
  %1091 = lshr i32 %1087, 31
  %1092 = xor i32 %1091, %1090
  %1093 = xor i32 %1089, %1090
  %1094 = add nuw nsw i32 %1093, %1092
  %1095 = icmp eq i32 %1094, 2
  %1096 = icmp ne i32 %1089, 0
  %1097 = xor i1 %1096, %1095
  %1098 = select i1 %1097, i64 16, i64 184
  %1099 = add i64 %1083, %1098
  br i1 %1097, label %block_418da2, label %block_418e4a

block_418e7e:                                     ; preds = %block_418e70
  store i64 5, i64* %20, align 8, !tbaa !1240
  %1100 = add i64 %1179, -86718
  %1101 = add i64 %1179, 10
  %1102 = load i64, i64* %21, align 8, !tbaa !1240
  %1103 = add i64 %1102, -8
  %1104 = inttoptr i64 %1103 to i64*
  store i64 %1101, i64* %1104
  store i64 %1103, i64* %21, align 8, !tbaa !1240
  %1105 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %1100, %struct.Memory* %290)
  %1106 = load i64, i64* %22, align 8
  %1107 = load i64, i64* %3, align 8
  br label %block_418e88

block_418a93:                                     ; preds = %block_418a8c, %block_418ba7
  %1108 = phi i64 [ %1032, %block_418a8c ], [ %208, %block_418ba7 ]
  %1109 = phi %struct.Memory* [ %1053, %block_418a8c ], [ %882, %block_418ba7 ]
  %1110 = inttoptr i64 %80 to i32*
  %1111 = load i32, i32* %1110
  %1112 = add i32 %1111, -5
  %1113 = lshr i32 %1112, 31
  %1114 = lshr i32 %1111, 31
  %1115 = xor i32 %1113, %1114
  %1116 = add nuw nsw i32 %1115, %1114
  %1117 = icmp eq i32 %1116, 2
  %1118 = icmp ne i32 %1113, 0
  %1119 = xor i1 %1118, %1117
  %1120 = select i1 %1119, i64 10, i64 295
  %1121 = add i64 %1108, %1120
  br i1 %1119, label %block_418a9d, label %block_418bba

block_41967b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1122 = phi i64 [ %1629, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3 ], [ %125, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1679, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ], [ %1598, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4 ], [ %1479, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5 ]
  %1123 = phi %struct.Memory* [ %1628, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3 ], [ %121, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1675, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ], [ %1594, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4 ], [ %1475, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5 ]
  %1124 = load i64, i64* %22, align 8
  %1125 = add i64 %1124, -68
  %1126 = inttoptr i64 %1125 to i32*
  %1127 = load i32, i32* %1126
  %1128 = add i32 %1127, 1
  %1129 = inttoptr i64 %1125 to i32*
  store i32 %1128, i32* %1129
  %1130 = add i64 %1122, -2473
  br label %block_418cd2

block_419277:                                     ; preds = %block_419262
  %1131 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1132 = add i64 %1205, 10
  %1133 = inttoptr i64 %1324 to i32*
  store i32 %1131, i32* %1133
  br label %block_419281

block_418cfa:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1134 = add i64 %631, -68
  %1135 = inttoptr i64 %1134 to i32*
  %1136 = load i32, i32* %1135
  %1137 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %1138 = sub i32 %1136, %1137
  %1139 = icmp eq i32 %1138, 0
  %1140 = select i1 %1139, i64 26, i64 16
  %1141 = add i64 %630, %1140
  br i1 %1139, label %block_418d14, label %block_418d0a

block_419073:                                     ; preds = %block_41905b, %block_419069
  %1142 = phi i64 [ %1747, %block_41905b ], [ %1187, %block_419069 ]
  %1143 = phi i64 [ %1736, %block_41905b ], [ %1186, %block_419069 ]
  %1144 = phi %struct.Memory* [ %1737, %block_41905b ], [ %1185, %block_419069 ]
  %1145 = add i64 %1143, -56
  %1146 = inttoptr i64 %1145 to i32*
  %1147 = load i32, i32* %1146
  %1148 = zext i32 %1147 to i64
  store i64 %1148, i64* %20, align 8, !tbaa !1240
  %1149 = add i64 %1142, -48931
  %1150 = add i64 %1142, 8
  %1151 = load i64, i64* %21, align 8, !tbaa !1240
  %1152 = add i64 %1151, -8
  %1153 = inttoptr i64 %1152 to i64*
  store i64 %1150, i64* %1153
  store i64 %1152, i64* %21, align 8, !tbaa !1240
  %1154 = tail call %struct.Memory* @sub_40d150_jacu(%struct.State* nonnull %0, i64 %1149, %struct.Memory* %1144)
  %1155 = load i64, i64* %3, align 8
  %1156 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1157 = icmp eq i32 %1156, 0
  %1158 = select i1 %1157, i64 24, i64 14
  %1159 = add i64 %1155, %1158
  br i1 %1157, label %block_419093, label %block_419089

block_418a71:                                     ; preds = %block_418bcd, %block_418a20
  %1160 = phi i64 [ %77, %block_418a20 ], [ %1415, %block_418bcd ]
  %1161 = phi %struct.Memory* [ %2, %block_418a20 ], [ %1053, %block_418bcd ]
  %1162 = inttoptr i64 %76 to i32*
  %1163 = load i32, i32* %1162
  %1164 = add i32 %1163, -12
  %1165 = lshr i32 %1164, 31
  %1166 = trunc i32 %1165 to i8
  %1167 = lshr i32 %1163, 31
  %1168 = xor i32 %1165, %1167
  %1169 = add nuw nsw i32 %1168, %1167
  %1170 = icmp eq i32 %1169, 2
  %1171 = icmp ne i8 %1166, 0
  %1172 = xor i1 %1171, %1170
  %1173 = select i1 %1172, i64 10, i64 367
  %1174 = add i64 %1160, %1173
  %1175 = add i64 %1174, 7
  br i1 %1172, label %block_418a7b, label %block_418be0

block_418e70:                                     ; preds = %block_418d59
  %1176 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1177 = icmp eq i32 %1176, 0
  %1178 = select i1 %1177, i64 24, i64 14
  %1179 = add i64 %306, %1178
  br i1 %1177, label %block_418e88, label %block_418e7e

block_419069:                                     ; preds = %block_41905b
  store i64 8, i64* %20, align 8, !tbaa !1240
  %1180 = add i64 %1747, -87289
  %1181 = add i64 %1747, 10
  %1182 = load i64, i64* %21, align 8, !tbaa !1240
  %1183 = add i64 %1182, -8
  %1184 = inttoptr i64 %1183 to i64*
  store i64 %1181, i64* %1184
  store i64 %1183, i64* %21, align 8, !tbaa !1240
  %1185 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %1180, %struct.Memory* %1737)
  %1186 = load i64, i64* %22, align 8
  %1187 = load i64, i64* %3, align 8
  br label %block_419073

block_419262:                                     ; preds = %block_41925b, %block_4193a4
  %1188 = phi i64 [ %1322, %block_41925b ], [ %213, %block_4193a4 ]
  %1189 = phi %struct.Memory* [ %1320, %block_41925b ], [ %1067, %block_4193a4 ]
  %1190 = inttoptr i64 %1321 to i32*
  %1191 = load i32, i32* %1190
  %1192 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %1193 = add i32 %1192, -1
  %1194 = sub i32 %1191, %1193
  %1195 = lshr i32 %1194, 31
  %1196 = lshr i32 %1191, 31
  %1197 = lshr i32 %1193, 31
  %1198 = xor i32 %1197, %1196
  %1199 = xor i32 %1195, %1196
  %1200 = add nuw nsw i32 %1199, %1198
  %1201 = icmp eq i32 %1200, 2
  %1202 = icmp ne i32 %1195, 0
  %1203 = xor i1 %1202, %1201
  %1204 = select i1 %1203, i64 21, i64 341
  %1205 = add i64 %1188, %1204
  br i1 %1203, label %block_419277, label %block_4193b7

block_418edc:                                     ; preds = %block_418ebc, %block_418ed2
  %1206 = phi i64 [ %1502, %block_418ebc ], [ %638, %block_418ed2 ]
  %1207 = phi %struct.Memory* [ %1497, %block_418ebc ], [ %637, %block_418ed2 ]
  %1208 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1209 = icmp eq i32 %1208, 0
  %1210 = select i1 %1209, i64 24, i64 14
  %1211 = add i64 %1206, %1210
  br i1 %1209, label %block_418ef4, label %block_418eea

block_418e5d:                                     ; preds = %block_418d78
  %1212 = inttoptr i64 %1437 to i32*
  %1213 = load i32, i32* %1212
  %1214 = add i32 %1213, 1
  %1215 = inttoptr i64 %1437 to i32*
  store i32 %1214, i32* %1215
  %1216 = add i64 %288, -260
  br label %block_418d59

block_418d6e:                                     ; preds = %block_418d59
  %1217 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1218 = add i64 %306, 10
  %1219 = inttoptr i64 %1440 to i32*
  store i32 %1217, i32* %1219
  br label %block_418d78

block_4194df:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit1
  %1220 = load i64, i64* %22, align 8
  %1221 = add i64 %1220, -68
  %1222 = inttoptr i64 %1221 to i32*
  %1223 = load i32, i32* %1222
  %1224 = zext i32 %1223 to i64
  store i64 %1224, i64* %15, align 8, !tbaa !1240
  %1225 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %1226 = sub i32 %1223, %1225
  %1227 = icmp ult i32 %1223, %1225
  %1228 = zext i1 %1227 to i8
  store i8 %1228, i8* %51, align 1, !tbaa !1245
  %1229 = and i32 %1226, 255
  %1230 = tail call i32 @llvm.ctpop.i32(i32 %1229) #11
  %1231 = trunc i32 %1230 to i8
  %1232 = and i8 %1231, 1
  %1233 = xor i8 %1232, 1
  store i8 %1233, i8* %52, align 1, !tbaa !1259
  %1234 = xor i32 %1225, %1223
  %1235 = xor i32 %1234, %1226
  %1236 = lshr i32 %1235, 4
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  store i8 %1238, i8* %53, align 1, !tbaa !1263
  %1239 = icmp eq i32 %1226, 0
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %54, align 1, !tbaa !1260
  %1241 = lshr i32 %1226, 31
  %1242 = trunc i32 %1241 to i8
  store i8 %1242, i8* %55, align 1, !tbaa !1261
  %1243 = lshr i32 %1223, 31
  %1244 = lshr i32 %1225, 31
  %1245 = xor i32 %1244, %1243
  %1246 = xor i32 %1241, %1243
  %1247 = add nuw nsw i32 %1246, %1245
  %1248 = icmp eq i32 %1247, 2
  %1249 = zext i1 %1248 to i8
  store i8 %1249, i8* %56, align 1, !tbaa !1262
  %1250 = select i1 %1239, i64 16, i64 241
  %1251 = add i64 %677, %1250
  br i1 %1239, label %block_4194ef, label %block_4195d0

block_418bf1:                                     ; preds = %block_418be7
  %1252 = zext i32 %1379 to i64
  store i64 %1252, i64* %20, align 8, !tbaa !1240
  %1253 = add i64 %1405, -86177
  %1254 = add i64 %1405, 8
  %1255 = load i64, i64* %21, align 8, !tbaa !1240
  %1256 = add i64 %1255, -8
  %1257 = inttoptr i64 %1256 to i64*
  store i64 %1254, i64* %1257
  store i64 %1256, i64* %21, align 8, !tbaa !1240
  %1258 = tail call %struct.Memory* @sub_403b50_timer_clear(%struct.State* nonnull %0, i64 %1253, %struct.Memory* %1376)
  %1259 = load i64, i64* %22, align 8
  %1260 = add i64 %1259, -48
  %1261 = load i64, i64* %3, align 8
  %1262 = inttoptr i64 %1260 to i32*
  %1263 = load i32, i32* %1262
  %1264 = add i32 %1263, 1
  %1265 = inttoptr i64 %1260 to i32*
  store i32 %1264, i32* %1265
  %1266 = add i64 %1261, -18
  br label %block_418be7

block_41965c:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5
  %1267 = load i64, i64* %22, align 8
  %1268 = add i64 %1267, -68
  %1269 = inttoptr i64 %1268 to i32*
  %1270 = load i32, i32* %1269
  %1271 = zext i32 %1270 to i64
  %1272 = add i64 %1479, 20
  %1273 = load i64, i64* %21, align 8, !tbaa !1240
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1272, i64* %1275
  %1276 = load i64, i64* %689, align 8, !alias.scope !1559, !noalias !1562
  %1277 = load i64, i64* %690, align 8, !alias.scope !1559, !noalias !1562
  %1278 = load i64, i64* %598, align 8, !alias.scope !1559, !noalias !1562
  %1279 = load i64, i64* %691, align 8, !alias.scope !1559, !noalias !1562
  %1280 = inttoptr i64 %1273 to i64*
  %1281 = load i64, i64* %1280
  %1282 = add i64 %1273, 8
  %1283 = inttoptr i64 %1282 to i64*
  %1284 = load i64, i64* %1283
  %1285 = add i64 %1273, 16
  %1286 = inttoptr i64 %1285 to i64*
  %1287 = load i64, i64* %1286
  %1288 = add i64 %1273, 24
  %1289 = inttoptr i64 %1288 to i64*
  %1290 = load i64, i64* %1289
  %1291 = add i64 %1273, 32
  %1292 = inttoptr i64 %1291 to i64*
  %1293 = load i64, i64* %1292
  %1294 = add i64 %1273, 40
  %1295 = inttoptr i64 %1294 to i64*
  %1296 = load i64, i64* %1295
  %1297 = add i64 %1273, 48
  %1298 = inttoptr i64 %1297 to i64*
  %1299 = load i64, i64* %1298
  %1300 = add i64 %1273, 56
  %1301 = inttoptr i64 %1300 to i64*
  %1302 = load i64, i64* %1301
  %1303 = add i64 %1273, 64
  %1304 = inttoptr i64 %1303 to i64*
  %1305 = load i64, i64* %1304
  %1306 = add i64 %1273, 72
  %1307 = inttoptr i64 %1306 to i64*
  %1308 = load i64, i64* %1307
  %1309 = inttoptr i64 %1274 to i64*
  %1310 = load i64, i64* %1309
  store i64 %1310, i64* %3, align 8, !alias.scope !1559, !noalias !1562
  store i64 %1273, i64* %21, align 8, !alias.scope !1559, !noalias !1562
  %1311 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2768), i64 %1271, i64 %1276, i64 %1277, i64 %1278, i64 %1279, i64 %1281, i64 %1284, i64 %1287, i64 %1290, i64 %1293, i64 %1296, i64 %1299, i64 %1302, i64 %1305, i64 %1308), !noalias !1559
  %1312 = load i64, i64* %22, align 8
  %1313 = add i64 %1312, -268
  %1314 = trunc i64 %1311 to i32
  %1315 = load i64, i64* %3, align 8
  %1316 = inttoptr i64 %1313 to i32*
  store i32 %1314, i32* %1316
  %1317 = add i64 %1315, 30
  br label %block_41968e

block_41925b:                                     ; preds = %block_419243, %block_419251
  %1318 = phi i64 [ %1747, %block_419243 ], [ %1334, %block_419251 ]
  %1319 = phi i64 [ %1736, %block_419243 ], [ %1333, %block_419251 ]
  %1320 = phi %struct.Memory* [ %1737, %block_419243 ], [ %1332, %block_419251 ]
  %1321 = add i64 %1319, -56
  %1322 = add i64 %1318, 7
  %1323 = inttoptr i64 %1321 to i32*
  store i32 1, i32* %1323
  %1324 = add i64 %1319, -52
  %1325 = add i64 %1319, -48
  %1326 = add i64 %1319, -60
  br label %block_419262

block_419251:                                     ; preds = %block_419243
  store i64 10, i64* %20, align 8, !tbaa !1240
  %1327 = add i64 %1747, -87777
  %1328 = add i64 %1747, 10
  %1329 = load i64, i64* %21, align 8, !tbaa !1240
  %1330 = add i64 %1329, -8
  %1331 = inttoptr i64 %1330 to i64*
  store i64 %1328, i64* %1331
  store i64 %1330, i64* %21, align 8, !tbaa !1240
  %1332 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %1327, %struct.Memory* %1737)
  %1333 = load i64, i64* %22, align 8
  %1334 = load i64, i64* %3, align 8
  br label %block_41925b

block_418cd2:                                     ; preds = %block_41967b, %block_418cc1
  %1335 = phi i64 [ %687, %block_418cc1 ], [ %1130, %block_41967b ]
  %1336 = phi i64 [ %684, %block_418cc1 ], [ %1124, %block_41967b ]
  %1337 = phi %struct.Memory* [ %683, %block_418cc1 ], [ %1123, %block_41967b ]
  %1338 = add i64 %1336, -68
  %1339 = inttoptr i64 %1338 to i32*
  %1340 = load i32, i32* %1339
  %1341 = zext i32 %1340 to i64
  %1342 = add i64 %1336, -44
  %1343 = inttoptr i64 %1342 to i32*
  %1344 = load i32, i32* %1343
  %1345 = sub i32 %1340, %1344
  %1346 = icmp ult i32 %1340, %1344
  %1347 = zext i1 %1346 to i8
  store i8 %1347, i8* %51, align 1, !tbaa !1245
  %1348 = and i32 %1345, 255
  %1349 = tail call i32 @llvm.ctpop.i32(i32 %1348) #11
  %1350 = trunc i32 %1349 to i8
  %1351 = and i8 %1350, 1
  %1352 = xor i8 %1351, 1
  store i8 %1352, i8* %52, align 1, !tbaa !1259
  %1353 = xor i32 %1344, %1340
  %1354 = xor i32 %1353, %1345
  %1355 = lshr i32 %1354, 4
  %1356 = trunc i32 %1355 to i8
  %1357 = and i8 %1356, 1
  store i8 %1357, i8* %53, align 1, !tbaa !1263
  %1358 = icmp eq i32 %1345, 0
  %1359 = zext i1 %1358 to i8
  store i8 %1359, i8* %54, align 1, !tbaa !1260
  %1360 = lshr i32 %1345, 31
  %1361 = trunc i32 %1360 to i8
  store i8 %1361, i8* %55, align 1, !tbaa !1261
  %1362 = lshr i32 %1340, 31
  %1363 = lshr i32 %1344, 31
  %1364 = xor i32 %1363, %1362
  %1365 = xor i32 %1360, %1362
  %1366 = add nuw nsw i32 %1365, %1364
  %1367 = icmp eq i32 %1366, 2
  %1368 = zext i1 %1367 to i8
  store i8 %1368, i8* %56, align 1, !tbaa !1262
  %1369 = icmp ne i8 %1361, 0
  %1370 = xor i1 %1369, %1367
  %1371 = or i1 %1358, %1370
  %1372 = select i1 %1371, i64 12, i64 2492
  %1373 = add i64 %1335, %1372
  br i1 %1371, label %block_418cde, label %block_41968e.loopexit

block_418be7:                                     ; preds = %block_418bf1, %block_418be0
  %1374 = phi i64 [ %1175, %block_418be0 ], [ %1266, %block_418bf1 ]
  %1375 = phi i64 [ %601, %block_418be0 ], [ %1259, %block_418bf1 ]
  %1376 = phi %struct.Memory* [ %1161, %block_418be0 ], [ %1258, %block_418bf1 ]
  %1377 = add i64 %1375, -48
  %1378 = inttoptr i64 %1377 to i32*
  %1379 = load i32, i32* %1378
  %1380 = add i32 %1379, -11
  %1381 = icmp ult i32 %1379, 11
  %1382 = zext i1 %1381 to i8
  store i8 %1382, i8* %51, align 1, !tbaa !1245
  %1383 = and i32 %1380, 255
  %1384 = tail call i32 @llvm.ctpop.i32(i32 %1383) #11
  %1385 = trunc i32 %1384 to i8
  %1386 = and i8 %1385, 1
  %1387 = xor i8 %1386, 1
  store i8 %1387, i8* %52, align 1, !tbaa !1259
  %1388 = xor i32 %1380, %1379
  %1389 = lshr i32 %1388, 4
  %1390 = trunc i32 %1389 to i8
  %1391 = and i8 %1390, 1
  store i8 %1391, i8* %53, align 1, !tbaa !1263
  %1392 = icmp eq i32 %1380, 0
  %1393 = zext i1 %1392 to i8
  store i8 %1393, i8* %54, align 1, !tbaa !1260
  %1394 = lshr i32 %1380, 31
  %1395 = trunc i32 %1394 to i8
  store i8 %1395, i8* %55, align 1, !tbaa !1261
  %1396 = lshr i32 %1379, 31
  %1397 = xor i32 %1394, %1396
  %1398 = add nuw nsw i32 %1397, %1396
  %1399 = icmp eq i32 %1398, 2
  %1400 = zext i1 %1399 to i8
  store i8 %1400, i8* %56, align 1, !tbaa !1262
  %1401 = icmp ne i8 %1395, 0
  %1402 = xor i1 %1401, %1399
  %1403 = or i1 %1392, %1402
  %1404 = select i1 %1403, i64 10, i64 32
  %1405 = add i64 %1374, %1404
  br i1 %1403, label %block_418bf1, label %block_418c07

block_418e4a:                                     ; preds = %block_418d92
  %1406 = inttoptr i64 %1440 to i32*
  %1407 = load i32, i32* %1406
  %1408 = add i32 %1407, 1
  %1409 = inttoptr i64 %1440 to i32*
  store i32 %1408, i32* %1409
  %1410 = add i64 %1099, -210
  br label %block_418d78

block_418bcd:                                     ; preds = %block_418a82
  %1411 = inttoptr i64 %76 to i32*
  %1412 = load i32, i32* %1411
  %1413 = add i32 %1412, 1
  %1414 = inttoptr i64 %76 to i32*
  store i32 %1413, i32* %1414
  %1415 = add i64 %1065, -348
  br label %block_418a71

block_419044:                                     ; preds = %block_418e8f
  %1416 = add i32 %955, -2
  %1417 = add i64 %970, 13
  %1418 = inttoptr i64 %952 to i32*
  store i32 %1416, i32* %1418
  br label %block_419051

block_419243:                                     ; preds = %block_419051
  br i1 %1745, label %block_41925b, label %block_419251

block_4193c5:                                     ; preds = %block_4193b7
  store i64 10, i64* %20, align 8, !tbaa !1240
  %1419 = add i64 %742, -88069
  %1420 = add i64 %742, 10
  %1421 = load i64, i64* %21, align 8, !tbaa !1240
  %1422 = add i64 %1421, -8
  %1423 = inttoptr i64 %1422 to i64*
  store i64 %1420, i64* %1423
  store i64 %1422, i64* %21, align 8, !tbaa !1240
  %1424 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %1419, %struct.Memory* %1189)
  %1425 = load i64, i64* %3, align 8
  %1426 = load i64, i64* %22, align 8
  br label %block_4193cf

block_4195c1:                                     ; preds = %block_419507
  store i64 11, i64* %20, align 8, !tbaa !1240
  %1427 = add i64 %451, -88577
  %1428 = add i64 %451, 10
  %1429 = load i64, i64* %21, align 8, !tbaa !1240
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1428, i64* %1431
  store i64 %1430, i64* %21, align 8, !tbaa !1240
  %1432 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %1427, %struct.Memory* %438)
  %1433 = load i64, i64* %3, align 8
  br label %block_4195cb

block_418d52:                                     ; preds = %block_418d3a, %block_418d48
  %1434 = phi i64 [ %1523, %block_418d3a ], [ %314, %block_418d48 ]
  %1435 = phi i64 [ %1517, %block_418d3a ], [ %313, %block_418d48 ]
  %1436 = phi %struct.Memory* [ %1519, %block_418d3a ], [ %312, %block_418d48 ]
  %1437 = add i64 %1435, -56
  %1438 = add i64 %1434, 7
  %1439 = inttoptr i64 %1437 to i32*
  store i32 1, i32* %1439
  %1440 = add i64 %1435, -52
  %1441 = add i64 %1435, -48
  %1442 = add i64 %1435, -60
  br label %block_418d59

block_419640:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4
  %1443 = load double, double* inttoptr (i64 add (i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64 32) to double*)
  store double %1443, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %1444 = load double, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 32) to double*)
  store double %1444, double* %63, align 1, !tbaa !1264
  store double 0.000000e+00, double* %65, align 1, !tbaa !1264
  %1445 = add i64 %1598, 22
  store i64 %1445, i64* %3, align 8
  %1446 = fcmp uno double %1444, %1443
  br i1 %1446, label %1447, label %1460

; <label>:1447:                                   ; preds = %block_419640
  %1448 = fadd double %1444, %1443
  %1449 = bitcast double %1448 to i64
  %1450 = and i64 %1449, 9221120237041090560
  %1451 = icmp eq i64 %1450, 9218868437227405312
  %1452 = and i64 %1449, 2251799813685247
  %1453 = icmp ne i64 %1452, 0
  %1454 = and i1 %1451, %1453
  br i1 %1454, label %1455, label %1466

; <label>:1455:                                   ; preds = %1447
  %1456 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1445, %struct.Memory* %1594) #14
  %1457 = load i64, i64* %3, align 8
  %1458 = load i8, i8* %51, align 1, !tbaa !1245
  %1459 = load i8, i8* %54, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5

; <label>:1460:                                   ; preds = %block_419640
  %1461 = fcmp ogt double %1444, %1443
  br i1 %1461, label %1466, label %1462

; <label>:1462:                                   ; preds = %1460
  %1463 = fcmp olt double %1444, %1443
  br i1 %1463, label %1466, label %1464

; <label>:1464:                                   ; preds = %1462
  %1465 = fcmp oeq double %1444, %1443
  br i1 %1465, label %1466, label %1469

; <label>:1466:                                   ; preds = %1464, %1462, %1460, %1447
  %1467 = phi i8 [ 0, %1460 ], [ 0, %1462 ], [ 1, %1464 ], [ 1, %1447 ]
  %1468 = phi i8 [ 0, %1460 ], [ 1, %1462 ], [ 0, %1464 ], [ 1, %1447 ]
  br label %1469

; <label>:1469:                                   ; preds = %1466, %1464
  %1470 = phi i8 [ %1467, %1466 ], [ %1591, %1464 ]
  %1471 = phi i8 [ %1468, %1466 ], [ %1592, %1464 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit5: ; preds = %1469, %1455
  %1472 = phi i8 [ %1459, %1455 ], [ %1470, %1469 ]
  %1473 = phi i8 [ %1458, %1455 ], [ %1471, %1469 ]
  %1474 = phi i64 [ %1457, %1455 ], [ %1445, %1469 ]
  %1475 = phi %struct.Memory* [ %1456, %1455 ], [ %1594, %1469 ]
  %1476 = or i8 %1472, %1473
  %1477 = icmp ne i8 %1476, 0
  %1478 = select i1 %1477, i64 37, i64 6
  %1479 = add i64 %1474, %1478
  br i1 %1477, label %block_41967b, label %block_41965c

block_418e37:                                     ; preds = %block_418da9
  %1480 = inttoptr i64 %1441 to i32*
  %1481 = load i32, i32* %1480
  %1482 = add i32 %1481, 1
  %1483 = inttoptr i64 %1441 to i32*
  store i32 %1482, i32* %1483
  %1484 = add i64 %865, -165
  br label %block_418d92

block_418ebc:                                     ; preds = %block_418eb2, %block_418ea4
  %1485 = phi i64 [ %133, %block_418ea4 ], [ %1544, %block_418eb2 ]
  %1486 = phi i64 [ %950, %block_418ea4 ], [ %1543, %block_418eb2 ]
  %1487 = phi %struct.Memory* [ %951, %block_418ea4 ], [ %1542, %block_418eb2 ]
  %1488 = add i64 %1486, -56
  %1489 = inttoptr i64 %1488 to i32*
  %1490 = load i32, i32* %1489
  %1491 = zext i32 %1490 to i64
  store i64 %1491, i64* %20, align 8, !tbaa !1240
  %1492 = add i64 %1485, -66348
  %1493 = add i64 %1485, 8
  %1494 = load i64, i64* %21, align 8, !tbaa !1240
  %1495 = add i64 %1494, -8
  %1496 = inttoptr i64 %1495 to i64*
  store i64 %1493, i64* %1496
  store i64 %1495, i64* %21, align 8, !tbaa !1240
  %1497 = tail call %struct.Memory* @sub_408b90_jacld(%struct.State* nonnull %0, i64 %1492, %struct.Memory* %1487)
  %1498 = load i64, i64* %3, align 8
  %1499 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1500 = icmp eq i32 %1499, 0
  %1501 = select i1 %1500, i64 24, i64 14
  %1502 = add i64 %1498, %1501
  br i1 %1500, label %block_418edc, label %block_418ed2

block_418bba:                                     ; preds = %block_418a93
  %1503 = inttoptr i64 %79 to i32*
  %1504 = load i32, i32* %1503
  %1505 = add i32 %1504, 1
  %1506 = inttoptr i64 %79 to i32*
  store i32 %1505, i32* %1506
  %1507 = add i64 %1121, -312
  br label %block_418a82

block_419031:                                     ; preds = %block_419027, %block_418ef4
  %1508 = phi i64 [ %569, %block_418ef4 ], [ %1551, %block_419027 ]
  %1509 = phi %struct.Memory* [ %564, %block_418ef4 ], [ %1550, %block_419027 ]
  %1510 = load i64, i64* %22, align 8
  %1511 = add i64 %1510, -56
  %1512 = inttoptr i64 %1511 to i32*
  %1513 = load i32, i32* %1512
  %1514 = add i32 %1513, 1
  %1515 = inttoptr i64 %1511 to i32*
  store i32 %1514, i32* %1515
  %1516 = add i64 %1508, -418
  br label %block_418e8f

block_418d3a:                                     ; preds = %block_418d35, %block_418d0a
  %1517 = phi i64 [ %1533, %block_418d35 ], [ %631, %block_418d0a ]
  %1518 = phi i64 [ %1536, %block_418d35 ], [ %390, %block_418d0a ]
  %1519 = phi %struct.Memory* [ %1535, %block_418d35 ], [ %627, %block_418d0a ]
  %1520 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1521 = icmp eq i32 %1520, 0
  %1522 = select i1 %1521, i64 24, i64 14
  %1523 = add i64 %1518, %1522
  br i1 %1521, label %block_418d52, label %block_418d48

block_419230:                                     ; preds = %block_4190ab, %block_419226
  %1524 = phi i64 [ %1872, %block_4190ab ], [ %1558, %block_419226 ]
  %1525 = phi %struct.Memory* [ %1867, %block_4190ab ], [ %1557, %block_419226 ]
  %1526 = load i64, i64* %22, align 8
  %1527 = add i64 %1526, -56
  %1528 = inttoptr i64 %1527 to i32*
  %1529 = load i32, i32* %1528
  %1530 = add i32 %1529, -1
  %1531 = inttoptr i64 %1527 to i32*
  store i32 %1530, i32* %1531
  %1532 = add i64 %1524, -479
  br label %block_419051

block_418d35:                                     ; preds = %block_418d14, %block_418d1e
  %1533 = phi i64 [ %631, %block_418d14 ], [ %364, %block_418d1e ]
  %1534 = phi i64 [ %386, %block_418d14 ], [ %368, %block_418d1e ]
  %1535 = phi %struct.Memory* [ %627, %block_418d14 ], [ %627, %block_418d1e ]
  %1536 = add i64 %1534, 5
  br label %block_418d3a

block_418eb2:                                     ; preds = %block_418ea4
  store i64 6, i64* %20, align 8, !tbaa !1240
  %1537 = add i64 %133, -86850
  %1538 = add i64 %133, 10
  %1539 = load i64, i64* %21, align 8, !tbaa !1240
  %1540 = add i64 %1539, -8
  %1541 = inttoptr i64 %1540 to i64*
  store i64 %1538, i64* %1541
  store i64 %1540, i64* %21, align 8, !tbaa !1240
  %1542 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull %0, i64 %1537, %struct.Memory* %951)
  %1543 = load i64, i64* %22, align 8
  %1544 = load i64, i64* %3, align 8
  br label %block_418ebc

block_419027:                                     ; preds = %block_418ef4
  store i64 7, i64* %20, align 8, !tbaa !1240
  %1545 = add i64 %569, -87143
  %1546 = add i64 %569, 10
  %1547 = load i64, i64* %21, align 8, !tbaa !1240
  %1548 = add i64 %1547, -8
  %1549 = inttoptr i64 %1548 to i64*
  store i64 %1546, i64* %1549
  store i64 %1548, i64* %21, align 8, !tbaa !1240
  %1550 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %1545, %struct.Memory* %564)
  %1551 = load i64, i64* %3, align 8
  br label %block_419031

block_419226:                                     ; preds = %block_4190ab
  store i64 9, i64* %20, align 8, !tbaa !1240
  %1552 = add i64 %1872, -87654
  %1553 = add i64 %1872, 10
  %1554 = load i64, i64* %21, align 8, !tbaa !1240
  %1555 = add i64 %1554, -8
  %1556 = inttoptr i64 %1555 to i64*
  store i64 %1553, i64* %1556
  store i64 %1555, i64* %21, align 8, !tbaa !1240
  %1557 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull %0, i64 %1552, %struct.Memory* %1867)
  %1558 = load i64, i64* %3, align 8
  br label %block_419230

block_4192ab:                                     ; preds = %block_41929b
  %1559 = add i64 %945, 7
  %1560 = inttoptr i64 %1326 to i32*
  store i32 0, i32* %1560
  br label %block_4192b2

block_419624:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1561 = load double, double* inttoptr (i64 add (i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64 24) to double*)
  store double %1561, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %1562 = load double, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 24) to double*)
  store double %1562, double* %63, align 1, !tbaa !1264
  store double 0.000000e+00, double* %65, align 1, !tbaa !1264
  %1563 = add i64 %1679, 22
  store i64 %1563, i64* %3, align 8
  %1564 = fcmp uno double %1562, %1561
  br i1 %1564, label %1565, label %1578

; <label>:1565:                                   ; preds = %block_419624
  %1566 = fadd double %1562, %1561
  %1567 = bitcast double %1566 to i64
  %1568 = and i64 %1567, 9221120237041090560
  %1569 = icmp eq i64 %1568, 9218868437227405312
  %1570 = and i64 %1567, 2251799813685247
  %1571 = icmp ne i64 %1570, 0
  %1572 = and i1 %1569, %1571
  br i1 %1572, label %1573, label %1584

; <label>:1573:                                   ; preds = %1565
  %1574 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1563, %struct.Memory* %1675) #14
  %1575 = load i64, i64* %3, align 8
  %1576 = load i8, i8* %51, align 1, !tbaa !1245
  %1577 = load i8, i8* %54, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4

; <label>:1578:                                   ; preds = %block_419624
  %1579 = fcmp ogt double %1562, %1561
  br i1 %1579, label %1584, label %1580

; <label>:1580:                                   ; preds = %1578
  %1581 = fcmp olt double %1562, %1561
  br i1 %1581, label %1584, label %1582

; <label>:1582:                                   ; preds = %1580
  %1583 = fcmp oeq double %1562, %1561
  br i1 %1583, label %1584, label %1588

; <label>:1584:                                   ; preds = %1582, %1580, %1578, %1565
  %1585 = phi i8 [ 0, %1578 ], [ 0, %1580 ], [ 1, %1582 ], [ 1, %1565 ]
  %1586 = phi i8 [ 0, %1578 ], [ 0, %1580 ], [ 0, %1582 ], [ 1, %1565 ]
  %1587 = phi i8 [ 0, %1578 ], [ 1, %1580 ], [ 0, %1582 ], [ 1, %1565 ]
  store i8 %1585, i8* %54, align 1, !tbaa !1244
  store i8 %1586, i8* %52, align 1, !tbaa !1244
  store i8 %1587, i8* %51, align 1, !tbaa !1244
  br label %1588

; <label>:1588:                                   ; preds = %1584, %1582
  %1589 = phi i8 [ %1585, %1584 ], [ %1672, %1582 ]
  %1590 = phi i8 [ %1587, %1584 ], [ %1673, %1582 ]
  store i8 0, i8* %56, align 1, !tbaa !1244
  store i8 0, i8* %55, align 1, !tbaa !1244
  store i8 0, i8* %53, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit4: ; preds = %1588, %1573
  %1591 = phi i8 [ %1577, %1573 ], [ %1589, %1588 ]
  %1592 = phi i8 [ %1576, %1573 ], [ %1590, %1588 ]
  %1593 = phi i64 [ %1575, %1573 ], [ %1563, %1588 ]
  %1594 = phi %struct.Memory* [ %1574, %1573 ], [ %1675, %1588 ]
  %1595 = or i8 %1591, %1592
  %1596 = icmp ne i8 %1595, 0
  %1597 = select i1 %1596, i64 65, i64 6
  %1598 = add i64 %1593, %1597
  br i1 %1596, label %block_41967b, label %block_419640

block_4195d0:                                     ; preds = %block_4194df, %block_4195cb
  %1599 = phi i64 [ %168, %block_4195cb ], [ %1251, %block_4194df ]
  %1600 = phi %struct.Memory* [ %167, %block_4195cb ], [ %674, %block_4194df ]
  %1601 = load double, double* bitcast (%rsdnm_type* @rsdnm to double*)
  store double %1601, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %1602 = load double, double* bitcast (%tolrsd_type* @tolrsd to double*)
  store double %1602, double* %63, align 1, !tbaa !1264
  store double 0.000000e+00, double* %65, align 1, !tbaa !1264
  %1603 = add i64 %1599, 22
  store i64 %1603, i64* %3, align 8
  %1604 = fcmp uno double %1602, %1601
  br i1 %1604, label %1605, label %1616

; <label>:1605:                                   ; preds = %block_4195d0
  %1606 = fadd double %1602, %1601
  %1607 = bitcast double %1606 to i64
  %1608 = and i64 %1607, 9221120237041090560
  %1609 = icmp eq i64 %1608, 9218868437227405312
  %1610 = and i64 %1607, 2251799813685247
  %1611 = icmp ne i64 %1610, 0
  %1612 = and i1 %1609, %1611
  br i1 %1612, label %1613, label %1622

; <label>:1613:                                   ; preds = %1605
  %1614 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1603, %struct.Memory* %1600) #14
  %1615 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

; <label>:1616:                                   ; preds = %block_4195d0
  %1617 = fcmp ogt double %1602, %1601
  br i1 %1617, label %1622, label %1618

; <label>:1618:                                   ; preds = %1616
  %1619 = fcmp olt double %1602, %1601
  br i1 %1619, label %1622, label %1620

; <label>:1620:                                   ; preds = %1618
  %1621 = fcmp oeq double %1602, %1601
  br i1 %1621, label %1622, label %1626

; <label>:1622:                                   ; preds = %1620, %1618, %1616, %1605
  %1623 = phi i8 [ 0, %1616 ], [ 0, %1618 ], [ 1, %1620 ], [ 1, %1605 ]
  %1624 = phi i8 [ 0, %1616 ], [ 0, %1618 ], [ 0, %1620 ], [ 1, %1605 ]
  %1625 = phi i8 [ 0, %1616 ], [ 1, %1618 ], [ 0, %1620 ], [ 1, %1605 ]
  store i8 %1623, i8* %54, align 1, !tbaa !1244
  store i8 %1624, i8* %52, align 1, !tbaa !1244
  store i8 %1625, i8* %51, align 1, !tbaa !1244
  br label %1626

; <label>:1626:                                   ; preds = %1622, %1620
  store i8 0, i8* %56, align 1, !tbaa !1244
  store i8 0, i8* %55, align 1, !tbaa !1244
  store i8 0, i8* %53, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3: ; preds = %1626, %1613
  %1627 = phi i64 [ %1615, %1613 ], [ %1603, %1626 ]
  %1628 = phi %struct.Memory* [ %1614, %1613 ], [ %1600, %1626 ]
  %1629 = add i64 %1627, 149
  %1630 = add i64 %1627, 6
  %1631 = load i8, i8* %51, align 1, !tbaa !1245
  %1632 = load i8, i8* %54, align 1, !tbaa !1260
  %1633 = or i8 %1632, %1631
  %1634 = icmp ne i8 %1633, 0
  %1635 = select i1 %1634, i64 %1629, i64 %1630
  br i1 %1634, label %block_41967b, label %block_4195ec

block_41905b:                                     ; preds = %block_419051
  br i1 %1745, label %block_419073, label %block_419069

block_419093:                                     ; preds = %block_419073, %block_419089
  %1636 = phi i64 [ %1159, %block_419073 ], [ %1040, %block_419089 ]
  %1637 = phi %struct.Memory* [ %1154, %block_419073 ], [ %1039, %block_419089 ]
  %1638 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1639 = icmp eq i32 %1638, 0
  %1640 = select i1 %1639, i64 24, i64 14
  %1641 = add i64 %1636, %1640
  br i1 %1639, label %block_4190ab, label %block_4190a1

block_419608:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1642 = load double, double* inttoptr (i64 add (i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64 16) to double*)
  store double %1642, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %1643 = load double, double* inttoptr (i64 add (i64 ptrtoint (%tolrsd_type* @tolrsd to i64), i64 16) to double*)
  store double %1643, double* %63, align 1, !tbaa !1264
  store double 0.000000e+00, double* %65, align 1, !tbaa !1264
  %1644 = add i64 %125, 22
  store i64 %1644, i64* %3, align 8
  %1645 = fcmp uno double %1643, %1642
  br i1 %1645, label %1646, label %1659

; <label>:1646:                                   ; preds = %block_419608
  %1647 = fadd double %1643, %1642
  %1648 = bitcast double %1647 to i64
  %1649 = and i64 %1648, 9221120237041090560
  %1650 = icmp eq i64 %1649, 9218868437227405312
  %1651 = and i64 %1648, 2251799813685247
  %1652 = icmp ne i64 %1651, 0
  %1653 = and i1 %1650, %1652
  br i1 %1653, label %1654, label %1665

; <label>:1654:                                   ; preds = %1646
  %1655 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1644, %struct.Memory* %121) #14
  %1656 = load i64, i64* %3, align 8
  %1657 = load i8, i8* %51, align 1, !tbaa !1245
  %1658 = load i8, i8* %54, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:1659:                                   ; preds = %block_419608
  %1660 = fcmp ogt double %1643, %1642
  br i1 %1660, label %1665, label %1661

; <label>:1661:                                   ; preds = %1659
  %1662 = fcmp olt double %1643, %1642
  br i1 %1662, label %1665, label %1663

; <label>:1663:                                   ; preds = %1661
  %1664 = fcmp oeq double %1643, %1642
  br i1 %1664, label %1665, label %1669

; <label>:1665:                                   ; preds = %1663, %1661, %1659, %1646
  %1666 = phi i8 [ 0, %1659 ], [ 0, %1661 ], [ 1, %1663 ], [ 1, %1646 ]
  %1667 = phi i8 [ 0, %1659 ], [ 0, %1661 ], [ 0, %1663 ], [ 1, %1646 ]
  %1668 = phi i8 [ 0, %1659 ], [ 1, %1661 ], [ 0, %1663 ], [ 1, %1646 ]
  store i8 %1666, i8* %54, align 1, !tbaa !1244
  store i8 %1667, i8* %52, align 1, !tbaa !1244
  store i8 %1668, i8* %51, align 1, !tbaa !1244
  br label %1669

; <label>:1669:                                   ; preds = %1665, %1663
  %1670 = phi i8 [ %1666, %1665 ], [ %118, %1663 ]
  %1671 = phi i8 [ %1668, %1665 ], [ %119, %1663 ]
  store i8 0, i8* %56, align 1, !tbaa !1244
  store i8 0, i8* %55, align 1, !tbaa !1244
  store i8 0, i8* %53, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %1669, %1654
  %1672 = phi i8 [ %1658, %1654 ], [ %1670, %1669 ]
  %1673 = phi i8 [ %1657, %1654 ], [ %1671, %1669 ]
  %1674 = phi i64 [ %1656, %1654 ], [ %1644, %1669 ]
  %1675 = phi %struct.Memory* [ %1655, %1654 ], [ %121, %1669 ]
  %1676 = or i8 %1672, %1673
  %1677 = icmp ne i8 %1676, 0
  %1678 = select i1 %1677, i64 93, i64 6
  %1679 = add i64 %1674, %1678
  br i1 %1677, label %block_41967b, label %block_419624

block_418c07:                                     ; preds = %block_418be7
  %1680 = add i64 %1405, -20519
  %1681 = add i64 %1405, 7
  %1682 = load i64, i64* %21, align 8, !tbaa !1240
  %1683 = add i64 %1682, -8
  %1684 = inttoptr i64 %1683 to i64*
  store i64 %1681, i64* %1684
  store i64 %1683, i64* %21, align 8, !tbaa !1240
  %1685 = tail call %struct.Memory* @sub_413be0_rhs(%struct.State* nonnull %0, i64 %1680, %struct.Memory* %1376)
  %1686 = load i64, i64* %3, align 8
  %1687 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %1688 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %1689 = zext i32 %1688 to i64
  store i64 %1689, i64* %598, align 8, !tbaa !1240
  %1690 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %1691 = zext i32 %1690 to i64
  store i64 %1691, i64* %23, align 8, !tbaa !1240
  %1692 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %1693 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %1694 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %1695 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1696 = zext i32 %1695 to i64
  store i64 %1696, i64* %16, align 8, !tbaa !1240
  %1697 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %1698 = zext i32 %1697 to i64
  store i64 %1698, i64* %26, align 8, !tbaa !1240
  %1699 = load i64, i64* %22, align 8
  %1700 = add i64 %1699, -72
  %1701 = inttoptr i64 %1700 to i32*
  store i32 %1687, i32* %1701
  store i64 12, i64* %20, align 8, !tbaa !1240
  %1702 = add i64 %1699, -80
  %1703 = inttoptr i64 %1702 to i64*
  store i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64* %1703
  store i64 12, i64* %19, align 8, !tbaa !1240
  %1704 = add i64 %1699, -88
  %1705 = inttoptr i64 %1704 to i64*
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %1705
  store i64 12, i64* %18, align 8, !tbaa !1240
  %1706 = inttoptr i64 %1700 to i32*
  %1707 = load i32, i32* %1706
  %1708 = zext i32 %1707 to i64
  store i64 %1708, i64* %17, align 8, !tbaa !1240
  %1709 = load i64, i64* %21, align 8
  %1710 = inttoptr i64 %1709 to i32*
  store i32 %1692, i32* %1710
  %1711 = add i64 %1709, 8
  %1712 = inttoptr i64 %1711 to i32*
  store i32 %1694, i32* %1712
  %1713 = add i64 %1709, 16
  %1714 = inttoptr i64 %1713 to i32*
  store i32 %1695, i32* %1714
  %1715 = add i64 %1709, 24
  %1716 = inttoptr i64 %1715 to i32*
  store i32 %1697, i32* %1716
  %1717 = inttoptr i64 %1704 to i64*
  %1718 = load i64, i64* %1717
  store i64 %1718, i64* %27, align 8, !tbaa !1240
  %1719 = add i64 %1709, 32
  %1720 = inttoptr i64 %1719 to i64*
  store i64 %1718, i64* %1720
  %1721 = inttoptr i64 %1702 to i64*
  %1722 = load i64, i64* %1721
  store i64 %1722, i64* %24, align 8, !tbaa !1240
  %1723 = add i64 %1709, 40
  %1724 = inttoptr i64 %1723 to i64*
  store i64 %1722, i64* %1724
  %1725 = add i64 %1686, -30590
  %1726 = add i64 %1686, 140
  %1727 = add i64 %1709, -8
  %1728 = inttoptr i64 %1727 to i64*
  store i64 %1726, i64* %1728
  store i64 %1727, i64* %21, align 8, !tbaa !1240
  %1729 = tail call %struct.Memory* @sub_411490_l2norm(%struct.State* nonnull %0, i64 %1725, %struct.Memory* %1685)
  %1730 = load i64, i64* %22, align 8
  %1731 = add i64 %1730, -48
  %1732 = load i64, i64* %3, align 8
  %1733 = add i64 %1732, 7
  %1734 = inttoptr i64 %1731 to i32*
  store i32 1, i32* %1734
  br label %block_418ca1

block_419051:                                     ; preds = %block_419230, %block_419044
  %1735 = phi i64 [ %1417, %block_419044 ], [ %1532, %block_419230 ]
  %1736 = phi i64 [ %950, %block_419044 ], [ %1526, %block_419230 ]
  %1737 = phi %struct.Memory* [ %951, %block_419044 ], [ %1525, %block_419230 ]
  %1738 = add i64 %1736, -56
  %1739 = inttoptr i64 %1738 to i32*
  %1740 = load i32, i32* %1739
  %1741 = icmp slt i32 %1740, 1
  %1742 = select i1 %1741, i64 498, i64 10
  %1743 = add i64 %1735, %1742
  %1744 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1745 = icmp eq i32 %1744, 0
  %1746 = select i1 %1745, i64 24, i64 14
  %1747 = add i64 %1743, %1746
  br i1 %1741, label %block_419243, label %block_41905b

block_4190ab:                                     ; preds = %block_419093, %block_4190a1
  %1748 = phi i64 [ %1641, %block_419093 ], [ %175, %block_4190a1 ]
  %1749 = phi %struct.Memory* [ %1637, %block_419093 ], [ %174, %block_4190a1 ]
  store i64 ptrtoint (%rsd_type* @rsd to i64), i64* %17, align 8, !tbaa !1240
  store i64 ptrtoint (%tv_type* @tv to i64), i64* %18, align 8, !tbaa !1240
  store i64 ptrtoint (%b_type* @b to i64), i64* %598, align 8, !tbaa !1240
  store i64 ptrtoint (%c_type* @c to i64), i64* %23, align 8, !tbaa !1240
  %1750 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %1751 = zext i32 %1750 to i64
  store i64 %1751, i64* %599, align 8, !tbaa !1240
  %1752 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %1753 = zext i32 %1752 to i64
  store i64 %1753, i64* %1693, align 8, !tbaa !1240
  %1754 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %1755 = zext i32 %1754 to i64
  store i64 %1755, i64* %16, align 8, !tbaa !1240
  %1756 = load i64, i64* %22, align 8
  %1757 = add i64 %1756, -56
  %1758 = inttoptr i64 %1757 to i32*
  %1759 = load i32, i32* %1758
  %1760 = zext i32 %1759 to i64
  store i64 %1760, i64* %26, align 8, !tbaa !1240
  %1761 = load double, double* bitcast (%omega_type* @omega to double*)
  store double %1761, double* %59, align 1, !tbaa !1264
  store double 0.000000e+00, double* %61, align 1, !tbaa !1264
  %1762 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %1763 = zext i32 %1762 to i64
  store i64 %1763, i64* %27, align 8, !tbaa !1240
  %1764 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %1765 = zext i32 %1764 to i64
  store i64 %1765, i64* %24, align 8, !tbaa !1240
  %1766 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %25, align 8, !tbaa !1240
  %1768 = add i64 %1756, -156
  %1769 = inttoptr i64 %1768 to i32*
  store i32 12, i32* %1769
  %1770 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %1771 = add i64 %1756, -160
  %1772 = inttoptr i64 %1771 to i32*
  store i32 %1770, i32* %1772
  %1773 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %1774 = add i64 %1756, -164
  %1775 = inttoptr i64 %1774 to i32*
  store i32 %1773, i32* %1775
  %1776 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %1777 = add i64 %1756, -168
  %1778 = inttoptr i64 %1777 to i32*
  store i32 %1776, i32* %1778
  %1779 = inttoptr i64 %1768 to i32*
  %1780 = load i32, i32* %1779
  %1781 = zext i32 %1780 to i64
  %1782 = add i64 %1756, -176
  %1783 = inttoptr i64 %1782 to i64*
  store i64 ptrtoint (%a_type* @a to i64), i64* %1783
  store i64 %1781, i64* %20, align 8, !tbaa !1240
  %1784 = add i64 %1756, -184
  %1785 = inttoptr i64 %1784 to i64*
  store i64 ptrtoint (%d_type* @d to i64), i64* %1785
  store i64 %1781, i64* %19, align 8, !tbaa !1240
  %1786 = add i64 %1756, -192
  %1787 = load i64, i64* %18, align 8
  %1788 = inttoptr i64 %1786 to i64*
  store i64 %1787, i64* %1788
  store i64 %1781, i64* %18, align 8, !tbaa !1240
  %1789 = add i64 %1756, -200
  %1790 = load i64, i64* %17, align 8
  %1791 = inttoptr i64 %1789 to i64*
  store i64 %1790, i64* %1791
  %1792 = load i32, i32* %592, align 4
  %1793 = zext i32 %1792 to i64
  store i64 %1793, i64* %17, align 8, !tbaa !1240
  %1794 = add i64 %1756, -208
  %1795 = load i64, i64* %598, align 8
  %1796 = inttoptr i64 %1794 to i64*
  store i64 %1795, i64* %1796
  %1797 = load i32, i32* %593, align 4
  %1798 = zext i32 %1797 to i64
  store i64 %1798, i64* %598, align 8, !tbaa !1240
  %1799 = load i64, i64* %22, align 8
  %1800 = add i64 %1799, -216
  %1801 = load i64, i64* %23, align 8
  %1802 = inttoptr i64 %1800 to i64*
  store i64 %1801, i64* %1802
  %1803 = load i32, i32* %590, align 4
  %1804 = zext i32 %1803 to i64
  store i64 %1804, i64* %23, align 8, !tbaa !1240
  %1805 = load i64, i64* %21, align 8
  %1806 = load i32, i32* %596, align 4
  %1807 = inttoptr i64 %1805 to i32*
  store i32 %1806, i32* %1807
  %1808 = add i64 %1799, -200
  %1809 = inttoptr i64 %1808 to i64*
  %1810 = load i64, i64* %1809
  %1811 = add i64 %1805, 8
  %1812 = inttoptr i64 %1811 to i64*
  store i64 %1810, i64* %1812
  %1813 = add i64 %1799, -192
  %1814 = inttoptr i64 %1813 to i64*
  %1815 = load i64, i64* %1814
  %1816 = add i64 %1805, 16
  %1817 = inttoptr i64 %1816 to i64*
  store i64 %1815, i64* %1817
  %1818 = add i64 %1799, -184
  %1819 = inttoptr i64 %1818 to i64*
  %1820 = load i64, i64* %1819
  %1821 = add i64 %1805, 24
  %1822 = inttoptr i64 %1821 to i64*
  store i64 %1820, i64* %1822
  %1823 = add i64 %1799, -176
  %1824 = inttoptr i64 %1823 to i64*
  %1825 = load i64, i64* %1824
  %1826 = add i64 %1805, 32
  %1827 = inttoptr i64 %1826 to i64*
  store i64 %1825, i64* %1827
  %1828 = add i64 %1799, -208
  %1829 = inttoptr i64 %1828 to i64*
  %1830 = load i64, i64* %1829
  %1831 = add i64 %1805, 40
  %1832 = inttoptr i64 %1831 to i64*
  store i64 %1830, i64* %1832
  %1833 = inttoptr i64 %1800 to i64*
  %1834 = load i64, i64* %1833
  %1835 = add i64 %1805, 48
  %1836 = inttoptr i64 %1835 to i64*
  store i64 %1834, i64* %1836
  %1837 = add i64 %1805, 56
  %1838 = load i32, i32* %597, align 4
  %1839 = inttoptr i64 %1837 to i32*
  store i32 %1838, i32* %1839
  %1840 = add i64 %1805, 64
  %1841 = load i32, i32* %594, align 4
  %1842 = inttoptr i64 %1840 to i32*
  store i32 %1841, i32* %1842
  %1843 = add i64 %1805, 72
  %1844 = load i32, i32* %595, align 4
  %1845 = inttoptr i64 %1843 to i32*
  store i32 %1844, i32* %1845
  %1846 = add i64 %1799, -160
  %1847 = inttoptr i64 %1846 to i32*
  %1848 = load i32, i32* %1847
  %1849 = add i64 %1805, 80
  %1850 = inttoptr i64 %1849 to i32*
  store i32 %1848, i32* %1850
  %1851 = add i64 %1799, -164
  %1852 = inttoptr i64 %1851 to i32*
  %1853 = load i32, i32* %1852
  %1854 = add i64 %1805, 88
  %1855 = inttoptr i64 %1854 to i32*
  store i32 %1853, i32* %1855
  %1856 = load i64, i64* %22, align 8
  %1857 = add i64 %1856, -168
  %1858 = inttoptr i64 %1857 to i32*
  %1859 = load i32, i32* %1858
  %1860 = load i64, i64* %21, align 8
  %1861 = add i64 %1860, 96
  %1862 = inttoptr i64 %1861 to i32*
  store i32 %1859, i32* %1862
  %1863 = add i64 %1748, -95531
  %1864 = add i64 %1748, 365
  %1865 = add i64 %1860, -8
  %1866 = inttoptr i64 %1865 to i64*
  store i64 %1864, i64* %1866
  store i64 %1865, i64* %21, align 8, !tbaa !1240
  %1867 = tail call %struct.Memory* @sub_401b80_buts(%struct.State* nonnull %0, i64 %1863, %struct.Memory* %1749)
  %1868 = load i64, i64* %3, align 8
  %1869 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1870 = icmp eq i32 %1869, 0
  %1871 = select i1 %1870, i64 24, i64 14
  %1872 = add i64 %1868, %1871
  br i1 %1870, label %block_419230, label %block_419226
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_413570_vranlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_413570:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %11, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %20, -24
  store i64 %23, i64* %11, align 8, !tbaa !1240
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2280) to double*)
  %31 = bitcast %union.VectorReg* %14 to double*
  store double %30, double* %31, align 1, !tbaa !1264
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = bitcast %union.VectorReg* %15 to i8*
  %35 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2288) to double*)
  %36 = bitcast %union.VectorReg* %15 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %38 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2272) to double*)
  %39 = bitcast %union.VectorReg* %16 to double*
  store double %38, double* %39, align 1, !tbaa !1264
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !1264
  %42 = bitcast %union.VectorReg* %17 to i8*
  %43 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2264) to double*)
  %44 = bitcast %union.VectorReg* %17 to double*
  store double %43, double* %44, align 1, !tbaa !1264
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %46 = bitcast i64* %45 to double*
  store double 0.000000e+00, double* %46, align 1, !tbaa !1264
  %47 = add i64 %20, -12
  %48 = load i32, i32* %5, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %20, -24
  %51 = load i64, i64* %9, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %20, -32
  %54 = bitcast [32 x %union.VectorReg]* %13 to double*
  %55 = load double, double* %54, align 1
  %56 = inttoptr i64 %53 to double*
  store double %55, double* %56
  %57 = add i64 %20, -40
  %58 = load i64, i64* %8, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %59
  %60 = add i64 %20, -48
  %61 = inttoptr i64 %60 to double*
  store double %35, double* %61
  %62 = add i64 %20, -56
  %63 = inttoptr i64 %62 to double*
  store double %43, double* %63
  %64 = add i64 %20, -64
  %65 = inttoptr i64 %64 to double*
  store double %30, double* %65
  %66 = load i64, i64* %12, align 8
  %67 = add i64 %66, -64
  %68 = inttoptr i64 %67 to double*
  store double %38, double* %68
  %69 = add i64 %66, -24
  %70 = inttoptr i64 %69 to double*
  %71 = load double, double* %70
  %72 = fmul double %35, %71
  store double %72, double* %36, align 1, !tbaa !1264
  store i64 0, i64* %37, align 1, !tbaa !1264
  %73 = add i64 %66, -72
  %74 = inttoptr i64 %73 to double*
  store double %72, double* %74
  %75 = inttoptr i64 %73 to double*
  %76 = load double, double* %75
  %77 = tail call double @llvm.trunc.f64(double %76) #11
  %78 = tail call double @llvm.fabs.f64(double %77) #11
  %79 = fcmp ogt double %78, 0x41DFFFFFFFC00000
  %80 = fptosi double %77 to i32
  %81 = zext i32 %80 to i64
  %82 = select i1 %79, i64 2147483648, i64 %81
  store i64 %82, i64* %10, align 8, !tbaa !1240
  %83 = trunc i64 %82 to i32
  %84 = sitofp i32 %83 to double
  %85 = add i64 %66, -104
  %86 = inttoptr i64 %85 to double*
  store double %84, double* %86
  %87 = inttoptr i64 %69 to double*
  %88 = load double, double* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast i64* %89 to double*
  %91 = load double, double* %31, align 1
  %92 = inttoptr i64 %85 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  store double %94, double* %31, align 1, !tbaa !1264
  store i64 0, i64* %32, align 1, !tbaa !1264
  %95 = fsub double %88, %94
  store double %95, double* %54, align 1, !tbaa !1264
  store i64 0, i64* %89, align 1, !tbaa !1264
  %96 = add i64 %66, -112
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %66, -140
  %99 = inttoptr i64 %98 to i32*
  store i32 0, i32* %99
  %100 = add i64 %66, -4
  %101 = add i64 %66, -16
  %102 = bitcast %union.VectorReg* %17 to i32*
  %103 = getelementptr inbounds i8, i8* %42, i64 4
  %104 = bitcast i8* %103 to i32*
  %105 = bitcast i64* %45 to i32*
  %106 = getelementptr inbounds i8, i8* %42, i64 12
  %107 = bitcast i8* %106 to i32*
  %108 = add i64 %66, -120
  %109 = bitcast %union.VectorReg* %18 to i8*
  %110 = bitcast %union.VectorReg* %18 to i32*
  %111 = getelementptr inbounds i8, i8* %109, i64 4
  %112 = bitcast i8* %111 to i32*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast %union.VectorReg* %18 to double*
  %115 = add i64 %66, -128
  %116 = add i64 %66, -80
  %117 = add i64 %66, -136
  %118 = add i64 %66, -88
  %119 = bitcast [32 x %union.VectorReg]* %13 to <2 x i32>*
  %120 = bitcast %union.VectorReg* %15 to i32*
  %121 = getelementptr inbounds i8, i8* %34, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = add i64 %66, -96
  %124 = add i64 %66, -32
  br label %block_4135f1

block_413711:                                     ; preds = %block_4135f1
  %125 = zext i32 %280 to i64
  store i64 %125, i64* %6, align 8, !tbaa !1240
  %126 = load i64, i64* %11, align 8
  %127 = add i64 %126, 16
  %128 = icmp ugt i64 %126, -17
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %24, align 1, !tbaa !1245
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #11
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !1259
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %26, align 1, !tbaa !1263
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !1260
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !1261
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %29, align 1, !tbaa !1262
  %150 = add i64 %126, 24
  %151 = inttoptr i64 %127 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %12, align 8, !tbaa !1240
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %3, align 8, !tbaa !1240
  %155 = add i64 %126, 32
  store i64 %155, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %278

block_413600:                                     ; preds = %block_4135f1
  %156 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2264) to double*)
  store double %156, double* %54, align 1, !tbaa !1264
  store double 0.000000e+00, double* %90, align 1, !tbaa !1264
  %157 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2272) to double*)
  store double %157, double* %31, align 1, !tbaa !1264
  store double 0.000000e+00, double* %33, align 1, !tbaa !1264
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2280) to double*)
  store double %158, double* %36, align 1, !tbaa !1264
  %159 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2288) to double*)
  %160 = inttoptr i64 %101 to i64*
  %161 = load i64, i64* %160
  %162 = bitcast double %159 to <2 x i32>
  %163 = extractelement <2 x i32> %162, i32 0
  store i32 %163, i32* %102, align 1, !tbaa !1292
  %164 = extractelement <2 x i32> %162, i32 1
  store i32 %164, i32* %104, align 1, !tbaa !1292
  %165 = load double, double* %44, align 1
  %166 = inttoptr i64 %161 to double*
  %167 = load double, double* %166
  %168 = fmul double %165, %167
  %169 = inttoptr i64 %73 to double*
  store double %168, double* %169
  %170 = inttoptr i64 %73 to double*
  %171 = load double, double* %170
  %172 = tail call double @llvm.trunc.f64(double %171) #11
  %173 = tail call double @llvm.fabs.f64(double %172) #11
  %174 = fcmp ogt double %173, 0x41DFFFFFFFC00000
  %175 = fptosi double %172 to i32
  %176 = sitofp i32 %175 to double
  %177 = select i1 %174, double 0xC1E0000000000000, double %176
  %178 = inttoptr i64 %108 to double*
  store double %177, double* %178
  %179 = inttoptr i64 %101 to i64*
  %180 = load i64, i64* %179
  %181 = inttoptr i64 %180 to double*
  %182 = load double, double* %181
  %183 = bitcast double %158 to <2 x i32>
  %184 = extractelement <2 x i32> %183, i32 0
  store i32 %184, i32* %110, align 1, !tbaa !1292
  %185 = extractelement <2 x i32> %183, i32 1
  store i32 %185, i32* %112, align 1, !tbaa !1292
  %186 = load double, double* %114, align 1
  %187 = inttoptr i64 %108 to double*
  %188 = load double, double* %187
  %189 = fmul double %186, %188
  %190 = fsub double %182, %189
  %191 = inttoptr i64 %115 to double*
  store double %190, double* %191
  %192 = inttoptr i64 %85 to double*
  %193 = load double, double* %192
  %194 = inttoptr i64 %115 to double*
  %195 = load double, double* %194
  %196 = fmul double %193, %195
  %197 = inttoptr i64 %96 to double*
  %198 = load double, double* %197
  %199 = inttoptr i64 %108 to double*
  %200 = load double, double* %199
  %201 = fmul double %198, %200
  store double %201, double* %114, align 1, !tbaa !1264
  store i64 0, i64* %113, align 1, !tbaa !1264
  %202 = fadd double %196, %201
  %203 = inttoptr i64 %73 to double*
  store double %202, double* %203
  %204 = inttoptr i64 %73 to double*
  %205 = load double, double* %204
  %206 = fmul double %159, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = sitofp i32 %210 to double
  %212 = select i1 %209, double 0xC1E0000000000000, double %211
  %213 = inttoptr i64 %116 to double*
  store double %212, double* %213
  %214 = inttoptr i64 %73 to double*
  %215 = load double, double* %214
  store i32 %184, i32* %102, align 1, !tbaa !1292
  store i32 %185, i32* %104, align 1, !tbaa !1292
  store i32 0, i32* %105, align 1, !tbaa !1292
  store i32 0, i32* %107, align 1, !tbaa !1292
  %216 = load double, double* %44, align 1
  %217 = inttoptr i64 %116 to double*
  %218 = load double, double* %217
  %219 = fmul double %216, %218
  store double %219, double* %44, align 1, !tbaa !1264
  %220 = fsub double %215, %219
  %221 = inttoptr i64 %117 to double*
  store double %220, double* %221
  %222 = load double, double* %36, align 1
  %223 = inttoptr i64 %117 to double*
  %224 = load double, double* %223
  %225 = fmul double %222, %224
  %226 = inttoptr i64 %96 to double*
  %227 = load double, double* %226
  %228 = inttoptr i64 %115 to double*
  %229 = load double, double* %228
  %230 = fmul double %227, %229
  store double %230, double* %39, align 1, !tbaa !1264
  store i64 0, i64* %40, align 1, !tbaa !1264
  %231 = fadd double %230, %225
  %232 = inttoptr i64 %118 to double*
  store double %231, double* %232
  %233 = load <2 x i32>, <2 x i32>* %119, align 1
  %234 = load i64, i64* %89, align 1
  %235 = extractelement <2 x i32> %233, i32 0
  store i32 %235, i32* %120, align 1, !tbaa !1292
  %236 = extractelement <2 x i32> %233, i32 1
  store i32 %236, i32* %122, align 1, !tbaa !1292
  %237 = load double, double* %36, align 1
  %238 = inttoptr i64 %118 to double*
  %239 = load double, double* %238
  %240 = fmul double %237, %239
  %241 = tail call double @llvm.trunc.f64(double %240) #11
  %242 = tail call double @llvm.fabs.f64(double %241) #11
  %243 = fcmp ogt double %242, 0x41DFFFFFFFC00000
  %244 = fptosi double %241 to i32
  %245 = zext i32 %244 to i64
  %246 = select i1 %243, i64 2147483648, i64 %245
  store i64 %246, i64* %7, align 8, !tbaa !1240
  %247 = trunc i64 %246 to i32
  %248 = sitofp i32 %247 to double
  %249 = inttoptr i64 %123 to double*
  store double %248, double* %249
  %250 = inttoptr i64 %118 to double*
  %251 = load double, double* %250
  %252 = load double, double* %31, align 1
  %253 = inttoptr i64 %123 to double*
  %254 = load double, double* %253
  %255 = fmul double %252, %254
  store double %255, double* %31, align 1, !tbaa !1264
  %256 = fsub double %251, %255
  store double %256, double* %36, align 1, !tbaa !1264
  store i64 0, i64* %37, align 1, !tbaa !1264
  %257 = inttoptr i64 %101 to i64*
  %258 = load i64, i64* %257
  %259 = inttoptr i64 %258 to double*
  store double %256, double* %259
  %260 = inttoptr i64 %101 to i64*
  %261 = load i64, i64* %260
  %262 = bitcast <2 x i32> %233 to double
  %263 = inttoptr i64 %261 to double*
  %264 = load double, double* %263
  %265 = fmul double %262, %264
  store double %265, double* %54, align 1, !tbaa !1264
  store i64 %234, i64* %89, align 1, !tbaa !1264
  %266 = inttoptr i64 %124 to i64*
  %267 = load i64, i64* %266
  %268 = inttoptr i64 %98 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  store i64 %270, i64* %8, align 8, !tbaa !1240
  %271 = shl nsw i64 %270, 3
  %272 = add i64 %271, %267
  %273 = inttoptr i64 %272 to double*
  store double %265, double* %273
  %274 = inttoptr i64 %98 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %98 to i32*
  store i32 %276, i32* %277
  br label %block_4135f1

block_4135f1:                                     ; preds = %block_413600, %block_413570
  %278 = phi %struct.Memory* [ %2, %block_413570 ], [ %278, %block_413600 ]
  %279 = inttoptr i64 %98 to i32*
  %280 = load i32, i32* %279
  %281 = inttoptr i64 %100 to i32*
  %282 = load i32, i32* %281
  %283 = sub i32 %280, %282
  %284 = lshr i32 %283, 31
  %285 = lshr i32 %280, 31
  %286 = lshr i32 %282, 31
  %287 = xor i32 %286, %285
  %288 = xor i32 %284, %285
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = icmp ne i32 %284, 0
  %292 = xor i1 %291, %290
  br i1 %292, label %block_413600, label %block_413711
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400710__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_400710:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400618__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400618:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_61bff0__got_type* @seg_61bff0__got to i64), i64 8) to i64*)
  store i64 %14, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %8, align 1, !tbaa !1245
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %9, align 1, !tbaa !1259
  %21 = icmp eq i64 %14, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %11, align 1, !tbaa !1260
  %23 = lshr i64 %14, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %12, align 1, !tbaa !1261
  store i8 0, i8* %13, align 1, !tbaa !1262
  store i8 0, i8* %10, align 1, !tbaa !1263
  %25 = select i1 %21, i64 18, i64 16
  %26 = add i64 %25, %1
  br i1 %21, label %block_40062a, label %block_400628

block_40062a:                                     ; preds = %block_400628, %block_400618
  %27 = phi i64 [ %7, %block_400618 ], [ %58, %block_400628 ]
  %28 = phi %struct.Memory* [ %2, %block_400618 ], [ %57, %block_400628 ]
  %29 = add i64 %27, 8
  %30 = icmp ugt i64 %27, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %8, align 1, !tbaa !1245
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #11
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %9, align 1, !tbaa !1259
  %38 = xor i64 %29, %27
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %10, align 1, !tbaa !1263
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %11, align 1, !tbaa !1260
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %12, align 1, !tbaa !1261
  %46 = lshr i64 %27, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %13, align 1, !tbaa !1262
  %51 = inttoptr i64 %29 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %3, align 8, !tbaa !1240
  %53 = add i64 %27, 16
  store i64 %53, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %28

block_400628:                                     ; preds = %block_400618
  %54 = add i64 %26, 2
  %55 = add i64 %6, -16
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  store i64 %55, i64* %5, align 8, !tbaa !1240
  store i64 %14, i64* %3, align 8, !tbaa !1240
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %14, %struct.Memory* %2)
  %58 = load i64, i64* %5, align 8
  br label %block_40062a
}

; Function Attrs: noinline
define %struct.Memory* @sub_403c30_domain(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403c30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -24
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  store i32 %23, i32* bitcast (%nx_type* @nx to i32*)
  %24 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  store i32 %24, i32* bitcast (%ny_type* @ny to i32*)
  %25 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  store i32 %25, i32* bitcast (%nz_type* @nz to i32*)
  %26 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %27 = add i32 %26, -4
  %28 = icmp ult i32 %26, 4
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %17, align 1, !tbaa !1245
  %30 = and i32 %27, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #11
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %18, align 1, !tbaa !1259
  %35 = xor i32 %27, %26
  %36 = lshr i32 %35, 4
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  store i8 %38, i8* %19, align 1, !tbaa !1263
  %39 = icmp eq i32 %27, 0
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %20, align 1, !tbaa !1260
  %41 = lshr i32 %27, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %21, align 1, !tbaa !1261
  %43 = lshr i32 %26, 31
  %44 = xor i32 %41, %43
  %45 = add nuw nsw i32 %44, %43
  %46 = icmp eq i32 %45, 2
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %22, align 1, !tbaa !1262
  %48 = icmp ne i8 %42, 0
  %49 = xor i1 %48, %46
  %50 = select i1 %49, i64 92, i64 64
  %51 = add i64 %50, %1
  %52 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  br i1 %49, label %block_403c8c, label %block_403c70

block_403c7e:                                     ; preds = %block_403c70
  %53 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %54 = add i32 %53, -4
  %55 = icmp ult i32 %53, 4
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %17, align 1, !tbaa !1245
  %57 = and i32 %54, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #11
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* %18, align 1, !tbaa !1259
  %62 = xor i32 %54, %53
  %63 = lshr i32 %62, 4
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  store i8 %65, i8* %19, align 1, !tbaa !1263
  %66 = icmp eq i32 %54, 0
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %20, align 1, !tbaa !1260
  %68 = lshr i32 %54, 31
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* %21, align 1, !tbaa !1261
  %70 = lshr i32 %53, 31
  %71 = xor i32 %68, %70
  %72 = add nuw nsw i32 %71, %70
  %73 = icmp eq i32 %72, 2
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %22, align 1, !tbaa !1262
  %75 = icmp ne i8 %69, 0
  %76 = xor i1 %75, %73
  %77 = select i1 %76, i64 14, i64 65
  %78 = add i64 %252, %77
  br i1 %76, label %block_403c8c, label %block_403cbf

block_403d1c:                                     ; preds = %block_403cdb
  store i32 1, i32* bitcast (%ist_type* @ist to i32*)
  %79 = load i32, i32* bitcast (%nx_type* @nx to i32*)
  %80 = add i32 %79, -1
  store i32 %80, i32* bitcast (%iend_type* @iend to i32*)
  store i32 1, i32* bitcast (%jst_type* @jst to i32*)
  %81 = load i32, i32* bitcast (%ny_type* @ny to i32*)
  %82 = add i32 %81, -1
  store i32 %82, i32* bitcast (%jend_type* @jend to i32*)
  store i32 1, i32* bitcast (%ii1_type* @ii1 to i32*)
  %83 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %84 = add i32 %83, -1
  store i32 %84, i32* bitcast (%ii2_type* @ii2 to i32*)
  store i32 1, i32* bitcast (%ji1_type* @ji1 to i32*)
  %85 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %86 = add i32 %85, -2
  store i32 %86, i32* bitcast (%ji2_type* @ji2 to i32*)
  store i32 2, i32* bitcast (%ki1_type* @ki1 to i32*)
  %87 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %88 = add i32 %87, -1
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %5, align 8, !tbaa !1240
  store i32 %88, i32* bitcast (%ki2_type* @ki2 to i32*)
  %90 = load i64, i64* %10, align 8
  %91 = add i64 %90, 16
  %92 = icmp ugt i64 %90, -17
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %17, align 1, !tbaa !1245
  %94 = trunc i64 %91 to i32
  %95 = and i32 %94, 255
  %96 = tail call i32 @llvm.ctpop.i32(i32 %95) #11
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  %99 = xor i8 %98, 1
  store i8 %99, i8* %18, align 1, !tbaa !1259
  %100 = xor i64 %90, 16
  %101 = xor i64 %100, %91
  %102 = lshr i64 %101, 4
  %103 = trunc i64 %102 to i8
  %104 = and i8 %103, 1
  store i8 %104, i8* %19, align 1, !tbaa !1263
  %105 = icmp eq i64 %91, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %20, align 1, !tbaa !1260
  %107 = lshr i64 %91, 63
  %108 = trunc i64 %107 to i8
  store i8 %108, i8* %21, align 1, !tbaa !1261
  %109 = lshr i64 %90, 63
  %110 = xor i64 %107, %109
  %111 = add nuw nsw i64 %110, %107
  %112 = icmp eq i64 %111, 2
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %22, align 1, !tbaa !1262
  %114 = add i64 %90, 24
  %115 = inttoptr i64 %91 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %11, align 8, !tbaa !1240
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !tbaa !1240
  %119 = add i64 %90, 32
  store i64 %119, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_403cdb:                                     ; preds = %block_403ccd
  %120 = add i32 %53, -12
  %121 = icmp ult i32 %53, 12
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %17, align 1, !tbaa !1245
  %123 = and i32 %120, 255
  %124 = tail call i32 @llvm.ctpop.i32(i32 %123) #11
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  store i8 %127, i8* %18, align 1, !tbaa !1259
  %128 = xor i32 %120, %53
  %129 = lshr i32 %128, 4
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %19, align 1, !tbaa !1263
  %132 = icmp eq i32 %120, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %20, align 1, !tbaa !1260
  %134 = lshr i32 %120, 31
  %135 = trunc i32 %134 to i8
  store i8 %135, i8* %21, align 1, !tbaa !1261
  %136 = xor i32 %134, %70
  %137 = add nuw nsw i32 %136, %70
  %138 = icmp eq i32 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %22, align 1, !tbaa !1262
  %140 = icmp ne i8 %135, 0
  %141 = xor i1 %140, %138
  %142 = or i1 %132, %141
  %143 = select i1 %142, i64 65, i64 14
  %144 = add i64 %169, %143
  br i1 %142, label %block_403d1c, label %block_403ce9

block_403ccd:                                     ; preds = %block_403cbf
  %145 = add i32 %52, -12
  %146 = icmp ult i32 %52, 12
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %17, align 1, !tbaa !1245
  %148 = and i32 %145, 255
  %149 = tail call i32 @llvm.ctpop.i32(i32 %148) #11
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  store i8 %152, i8* %18, align 1, !tbaa !1259
  %153 = xor i32 %145, %52
  %154 = lshr i32 %153, 4
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  store i8 %156, i8* %19, align 1, !tbaa !1263
  %157 = icmp eq i32 %145, 0
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %20, align 1, !tbaa !1260
  %159 = lshr i32 %145, 31
  %160 = trunc i32 %159 to i8
  store i8 %160, i8* %21, align 1, !tbaa !1261
  %161 = xor i32 %159, %244
  %162 = add nuw nsw i32 %161, %244
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %22, align 1, !tbaa !1262
  %165 = icmp ne i8 %160, 0
  %166 = xor i1 %165, %163
  %167 = or i1 %157, %166
  %168 = select i1 %167, i64 14, i64 28
  %169 = add i64 %334, %168
  br i1 %167, label %block_403cdb, label %block_403ce9

block_403c8c:                                     ; preds = %block_403c70, %block_403c7e, %block_403c30
  %170 = phi i64 [ %78, %block_403c7e ], [ %252, %block_403c70 ], [ %51, %block_403c30 ]
  %171 = zext i32 %26 to i64
  store i64 %171, i64* %8, align 8, !tbaa !1240
  %172 = zext i32 %52 to i64
  store i64 %172, i64* %7, align 8, !tbaa !1240
  %173 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %6, align 8, !tbaa !1240
  %175 = add i64 %170, 38
  %176 = add i64 %13, -32
  %177 = inttoptr i64 %176 to i64*
  store i64 %175, i64* %177
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %181 = load i64, i64* %179, align 8, !alias.scope !1564, !noalias !1567
  %182 = load i64, i64* %180, align 8, !alias.scope !1564, !noalias !1567
  %183 = inttoptr i64 %16 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %13, -16
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %13, -8
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %13 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %13, 8
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %13, 16
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %13, 24
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %13, 32
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %13, 40
  %206 = inttoptr i64 %205 to i64*
  %207 = load i64, i64* %206
  %208 = add i64 %13, 48
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209
  %211 = inttoptr i64 %176 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %3, align 8, !alias.scope !1564, !noalias !1567
  store i64 %16, i64* %10, align 8, !alias.scope !1564, !noalias !1567
  %213 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 814), i64 %171, i64 %172, i64 %174, i64 %181, i64 %182, i64 %184, i64 %187, i64 %190, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204, i64 %207, i64 %210), !noalias !1564
  %214 = load i64, i64* %3, align 8
  store i64 1, i64* %9, align 8, !tbaa !1240
  %215 = load i64, i64* %11, align 8
  %216 = add i64 %215, -4
  %217 = trunc i64 %213 to i32
  %218 = inttoptr i64 %216 to i32*
  store i32 %217, i32* %218
  %219 = add i64 %214, 13
  %220 = load i64, i64* %10, align 8, !tbaa !1240
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %3, align 8, !alias.scope !1569, !noalias !1572
  store i64 %220, i64* %10, align 8, !alias.scope !1569, !noalias !1572
  %225 = tail call i64 @exit(i64 1), !noalias !1569
  store i64 %225, i64* %178, align 8, !alias.scope !1569, !noalias !1572
  %226 = load i64, i64* %3, align 8
  %227 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %226, %struct.Memory* %2)
  ret %struct.Memory* %227

block_403c70:                                     ; preds = %block_403c30
  %228 = add i32 %52, -4
  %229 = icmp ult i32 %52, 4
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %17, align 1, !tbaa !1245
  %231 = and i32 %228, 255
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231) #11
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  store i8 %235, i8* %18, align 1, !tbaa !1259
  %236 = xor i32 %228, %52
  %237 = lshr i32 %236, 4
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !1263
  %240 = icmp eq i32 %228, 0
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %20, align 1, !tbaa !1260
  %242 = lshr i32 %228, 31
  %243 = trunc i32 %242 to i8
  store i8 %243, i8* %21, align 1, !tbaa !1261
  %244 = lshr i32 %52, 31
  %245 = xor i32 %242, %244
  %246 = add nuw nsw i32 %245, %244
  %247 = icmp eq i32 %246, 2
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %22, align 1, !tbaa !1262
  %249 = icmp ne i8 %243, 0
  %250 = xor i1 %249, %247
  %251 = select i1 %250, i64 28, i64 14
  %252 = add i64 %51, %251
  br i1 %250, label %block_403c8c, label %block_403c7e

block_403ce9:                                     ; preds = %block_403cbf, %block_403ccd, %block_403cdb
  %253 = phi i64 [ %334, %block_403cbf ], [ %169, %block_403ccd ], [ %144, %block_403cdb ]
  %254 = zext i32 %26 to i64
  store i64 %254, i64* %8, align 8, !tbaa !1240
  %255 = zext i32 %52 to i64
  store i64 %255, i64* %7, align 8, !tbaa !1240
  %256 = zext i32 %53 to i64
  store i64 %256, i64* %6, align 8, !tbaa !1240
  %257 = add i64 %253, 38
  %258 = add i64 %13, -32
  %259 = inttoptr i64 %258 to i64*
  store i64 %257, i64* %259
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %263 = load i64, i64* %261, align 8, !alias.scope !1574, !noalias !1577
  %264 = load i64, i64* %262, align 8, !alias.scope !1574, !noalias !1577
  %265 = inttoptr i64 %16 to i64*
  %266 = load i64, i64* %265
  %267 = add i64 %13, -16
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %13, -8
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  %273 = inttoptr i64 %13 to i64*
  %274 = load i64, i64* %273
  %275 = add i64 %13, 8
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %13, 16
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %13, 24
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = add i64 %13, 32
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %13, 40
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %13, 48
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = inttoptr i64 %258 to i64*
  %294 = load i64, i64* %293
  store i64 %294, i64* %3, align 8, !alias.scope !1574, !noalias !1577
  store i64 %16, i64* %10, align 8, !alias.scope !1574, !noalias !1577
  %295 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 991), i64 %254, i64 %255, i64 %256, i64 %263, i64 %264, i64 %266, i64 %269, i64 %272, i64 %274, i64 %277, i64 %280, i64 %283, i64 %286, i64 %289, i64 %292), !noalias !1574
  %296 = load i64, i64* %3, align 8
  store i64 1, i64* %9, align 8, !tbaa !1240
  %297 = load i64, i64* %11, align 8
  %298 = add i64 %297, -8
  %299 = trunc i64 %295 to i32
  %300 = inttoptr i64 %298 to i32*
  store i32 %299, i32* %300
  %301 = add i64 %296, 13
  %302 = load i64, i64* %10, align 8, !tbaa !1240
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %301, i64* %304
  %305 = inttoptr i64 %303 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %3, align 8, !alias.scope !1579, !noalias !1582
  store i64 %302, i64* %10, align 8, !alias.scope !1579, !noalias !1582
  %307 = tail call i64 @exit(i64 1), !noalias !1579
  store i64 %307, i64* %260, align 8, !alias.scope !1579, !noalias !1582
  %308 = load i64, i64* %3, align 8
  %309 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %308, %struct.Memory* %2)
  ret %struct.Memory* %309

block_403cbf:                                     ; preds = %block_403c7e
  %310 = add i32 %26, -12
  %311 = icmp ult i32 %26, 12
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %17, align 1, !tbaa !1245
  %313 = and i32 %310, 255
  %314 = tail call i32 @llvm.ctpop.i32(i32 %313) #11
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  %317 = xor i8 %316, 1
  store i8 %317, i8* %18, align 1, !tbaa !1259
  %318 = xor i32 %310, %26
  %319 = lshr i32 %318, 4
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  store i8 %321, i8* %19, align 1, !tbaa !1263
  %322 = icmp eq i32 %310, 0
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %20, align 1, !tbaa !1260
  %324 = lshr i32 %310, 31
  %325 = trunc i32 %324 to i8
  store i8 %325, i8* %21, align 1, !tbaa !1261
  %326 = xor i32 %324, %43
  %327 = add nuw nsw i32 %326, %43
  %328 = icmp eq i32 %327, 2
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %22, align 1, !tbaa !1262
  %330 = icmp ne i8 %325, 0
  %331 = xor i1 %330, %328
  %332 = or i1 %322, %331
  %333 = select i1 %332, i64 14, i64 42
  %334 = add i64 %78, %333
  br i1 %332, label %block_403ccd, label %block_403ce9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4087a0_error(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4087a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = add i64 %11, -72
  store i64 %14, i64* %7, align 8, !tbaa !1240
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %11, -24
  %22 = add i64 %1, 15
  %23 = inttoptr i64 %21 to i32*
  store i32 0, i32* %23
  %24 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast [32 x %union.VectorReg]* %9 to i32*
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  %28 = bitcast i8* %27 to i32*
  %29 = bitcast i64* %25 to i32*
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  %32 = bitcast [32 x %union.VectorReg]* %9 to double*
  br label %block_4087af

block_4088ef:                                     ; preds = %block_4087fd
  %33 = add i64 %298, -12
  %34 = inttoptr i64 %33 to i32*
  %35 = load i32, i32* %34
  %36 = add i32 %35, 1
  %37 = inttoptr i64 %33 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %316, -273
  br label %block_4087de

block_4087de:                                     ; preds = %block_4087d7, %block_4088ef
  %39 = phi i64 [ %72, %block_4087d7 ], [ %38, %block_4088ef ]
  %40 = phi i64 [ %12, %block_4087d7 ], [ %298, %block_4088ef ]
  %41 = phi %struct.Memory* [ %181, %block_4087d7 ], [ %299, %block_4088ef ]
  %42 = add i64 %40, -12
  %43 = inttoptr i64 %42 to i32*
  %44 = load i32, i32* %43
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %4, align 8, !tbaa !1240
  %46 = load i32, i32* bitcast (%nz_type* @nz to i32*)
  %47 = add i32 %46, -1
  %48 = zext i32 %47 to i64
  store i64 %48, i64* %5, align 8, !tbaa !1240
  %49 = lshr i32 %47, 31
  %50 = sub i32 %44, %47
  %51 = lshr i32 %50, 31
  %52 = trunc i32 %51 to i8
  %53 = lshr i32 %44, 31
  %54 = xor i32 %49, %53
  %55 = xor i32 %51, %53
  %56 = add nuw nsw i32 %55, %54
  %57 = icmp eq i32 %56, 2
  %58 = icmp ne i8 %52, 0
  %59 = xor i1 %58, %57
  %60 = select i1 %59, i64 21, i64 292
  %61 = add i64 %39, %60
  br i1 %59, label %block_4087f3, label %block_408902

block_4088dc:                                     ; preds = %block_408817
  %62 = add i64 %221, -8
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = add i32 %64, 1
  %66 = inttoptr i64 %62 to i32*
  store i32 %65, i32* %66
  %67 = add i64 %240, -223
  br label %block_4087fd

block_4087d7:                                     ; preds = %block_4087af
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %71 = add i64 %11, -20
  %72 = add i64 %194, 7
  %73 = inttoptr i64 %71 to i32*
  store i32 1, i32* %73
  %74 = bitcast %union.VectorReg* %70 to double*
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_4087de

block_4088c9:                                     ; preds = %block_408840
  %76 = inttoptr i64 %218 to i32*
  %77 = load i32, i32* %76
  %78 = add i32 %77, 1
  %79 = inttoptr i64 %218 to i32*
  store i32 %78, i32* %79
  %80 = add i64 %179, -178
  br label %block_408817

block_4087f3:                                     ; preds = %block_4087de
  %81 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %82 = add i64 %40, -8
  %83 = add i64 %61, 10
  %84 = inttoptr i64 %82 to i32*
  store i32 %81, i32* %84
  br label %block_4087fd

block_40896c:                                     ; preds = %block_408909
  %85 = load i64, i64* %7, align 8
  %86 = add i64 %85, 64
  %87 = icmp ugt i64 %85, -65
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %15, align 1, !tbaa !1245
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #11
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %16, align 1, !tbaa !1259
  %95 = xor i64 %86, %85
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %17, align 1, !tbaa !1263
  %99 = icmp eq i64 %86, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %18, align 1, !tbaa !1260
  %101 = lshr i64 %86, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %19, align 1, !tbaa !1261
  %103 = lshr i64 %85, 63
  %104 = xor i64 %101, %103
  %105 = add nuw nsw i64 %104, %101
  %106 = icmp eq i64 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %20, align 1, !tbaa !1262
  %108 = add i64 %85, 72
  %109 = inttoptr i64 %86 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %8, align 8, !tbaa !1240
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %3, align 8, !tbaa !1240
  %113 = add i64 %85, 80
  store i64 %113, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %286

block_40884a:                                     ; preds = %block_408840
  %114 = sext i32 %169 to i64
  %115 = shl nsw i64 %114, 3
  %116 = add i64 %215, %115
  %117 = inttoptr i64 %116 to double*
  %118 = load double, double* %117
  %119 = inttoptr i64 %216 to i32*
  %120 = load i32, i32* %119
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, 6760
  %123 = add i64 %122, ptrtoint (%u_type* @u to i64)
  %124 = inttoptr i64 %217 to i32*
  %125 = load i32, i32* %124
  %126 = sext i32 %125 to i64
  %127 = mul nsw i64 %126, 520
  %128 = add i64 %127, %123
  %129 = inttoptr i64 %218 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  %132 = mul nsw i64 %131, 40
  %133 = add i64 %132, %128
  %134 = add i64 %115, %133
  %135 = inttoptr i64 %134 to double*
  %136 = load double, double* %135
  %137 = fsub double %118, %136
  %138 = inttoptr i64 %219 to double*
  store double %137, double* %138
  %139 = inttoptr i64 %211 to i32*
  %140 = load i32, i32* %139
  %141 = sext i32 %140 to i64
  %142 = shl nsw i64 %141, 3
  %143 = add i64 %142, ptrtoint (%errnm_type* @errnm to i64)
  %144 = inttoptr i64 %143 to double*
  %145 = load double, double* %144
  %146 = inttoptr i64 %219 to double*
  %147 = load double, double* %146
  %148 = fmul double %147, %147
  store double %148, double* %74, align 1, !tbaa !1264
  store i64 0, i64* %75, align 1, !tbaa !1264
  %149 = fadd double %145, %148
  store double %149, double* %32, align 1, !tbaa !1264
  store i64 0, i64* %25, align 1, !tbaa !1264
  %150 = inttoptr i64 %143 to double*
  store double %149, double* %150
  %151 = inttoptr i64 %211 to i32*
  %152 = load i32, i32* %151
  %153 = add i32 %152, 1
  %154 = inttoptr i64 %211 to i32*
  store i32 %153, i32* %154
  %155 = add i64 %179, -10
  br label %block_408840

block_4087b9:                                     ; preds = %block_4087af
  store i32 0, i32* %26, align 1, !tbaa !1266
  store i32 0, i32* %28, align 1, !tbaa !1266
  store i32 0, i32* %29, align 1, !tbaa !1266
  store i32 0, i32* %31, align 1, !tbaa !1266
  %156 = sext i32 %183 to i64
  %157 = shl nsw i64 %156, 3
  %158 = add i64 %157, ptrtoint (%errnm_type* @errnm to i64)
  %159 = load double, double* %32, align 1
  %160 = inttoptr i64 %158 to double*
  store double %159, double* %160
  %161 = inttoptr i64 %21 to i32*
  %162 = load i32, i32* %161
  %163 = add i32 %162, 1
  %164 = inttoptr i64 %21 to i32*
  store i32 %163, i32* %164
  %165 = add i64 %194, -10
  br label %block_4087af

block_408840:                                     ; preds = %block_408827, %block_40884a
  %166 = phi i64 [ %213, %block_408827 ], [ %155, %block_40884a ]
  %167 = phi %struct.Memory* [ %209, %block_408827 ], [ %167, %block_40884a ]
  %168 = inttoptr i64 %211 to i32*
  %169 = load i32, i32* %168
  %170 = add i32 %169, -5
  %171 = lshr i32 %170, 31
  %172 = lshr i32 %169, 31
  %173 = xor i32 %171, %172
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = icmp ne i32 %171, 0
  %177 = xor i1 %176, %175
  %178 = select i1 %177, i64 10, i64 137
  %179 = add i64 %166, %178
  br i1 %177, label %block_40884a, label %block_4088c9

block_4087af:                                     ; preds = %block_4087b9, %block_4087a0
  %180 = phi i64 [ %22, %block_4087a0 ], [ %165, %block_4087b9 ]
  %181 = phi %struct.Memory* [ %2, %block_4087a0 ], [ %181, %block_4087b9 ]
  %182 = inttoptr i64 %21 to i32*
  %183 = load i32, i32* %182
  %184 = add i32 %183, -5
  %185 = lshr i32 %184, 31
  %186 = trunc i32 %185 to i8
  %187 = lshr i32 %183, 31
  %188 = xor i32 %185, %187
  %189 = add nuw nsw i32 %188, %187
  %190 = icmp eq i32 %189, 2
  %191 = icmp ne i8 %186, 0
  %192 = xor i1 %191, %190
  %193 = select i1 %192, i64 10, i64 40
  %194 = add i64 %180, %193
  br i1 %192, label %block_4087b9, label %block_4087d7

block_408827:                                     ; preds = %block_408817
  %195 = add i64 %221, -64
  store i64 %195, i64* %5, align 8, !tbaa !1240
  store i64 %226, i64* %69, align 8, !tbaa !1240
  %196 = add i64 %221, -8
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %6, align 8, !tbaa !1240
  %200 = add i64 %221, -12
  %201 = inttoptr i64 %200 to i32*
  %202 = load i32, i32* %201
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %68, align 8, !tbaa !1240
  %204 = add i64 %240, 345
  %205 = add i64 %240, 18
  %206 = load i64, i64* %7, align 8, !tbaa !1240
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %205, i64* %208
  store i64 %207, i64* %7, align 8, !tbaa !1240
  %209 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull %0, i64 %204, %struct.Memory* %222)
  %210 = load i64, i64* %8, align 8
  %211 = add i64 %210, -16
  %212 = load i64, i64* %3, align 8
  %213 = add i64 %212, 7
  %214 = inttoptr i64 %211 to i32*
  store i32 0, i32* %214
  %215 = add i64 %210, -64
  %216 = add i64 %210, -12
  %217 = add i64 %210, -8
  %218 = add i64 %210, -4
  %219 = add i64 %210, -24
  br label %block_408840

block_408817:                                     ; preds = %block_40880d, %block_4088c9
  %220 = phi i64 [ %283, %block_40880d ], [ %80, %block_4088c9 ]
  %221 = phi i64 [ %298, %block_40880d ], [ %210, %block_4088c9 ]
  %222 = phi %struct.Memory* [ %299, %block_40880d ], [ %167, %block_4088c9 ]
  %223 = add i64 %221, -4
  %224 = inttoptr i64 %223 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %4, align 8, !tbaa !1240
  %227 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %228 = sub i32 %225, %227
  %229 = lshr i32 %228, 31
  %230 = trunc i32 %229 to i8
  %231 = lshr i32 %225, 31
  %232 = lshr i32 %227, 31
  %233 = xor i32 %232, %231
  %234 = xor i32 %229, %231
  %235 = add nuw nsw i32 %234, %233
  %236 = icmp eq i32 %235, 2
  %237 = icmp ne i8 %230, 0
  %238 = xor i1 %237, %236
  %239 = select i1 %238, i64 16, i64 197
  %240 = add i64 %220, %239
  br i1 %238, label %block_408827, label %block_4088dc

block_408913:                                     ; preds = %block_408909
  %241 = sext i32 %288 to i64
  %242 = shl nsw i64 %241, 3
  %243 = add i64 %242, ptrtoint (%errnm_type* @errnm to i64)
  %244 = inttoptr i64 %243 to double*
  %245 = load double, double* %244
  %246 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %247 = add i32 %246, -2
  %248 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %249 = add i32 %248, -2
  %250 = sext i32 %247 to i64
  %251 = sext i32 %249 to i64
  %252 = mul nsw i64 %251, %250
  %253 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %254 = add i32 %253, -2
  %255 = zext i32 %254 to i64
  store i64 %255, i64* %68, align 8, !tbaa !1240
  %256 = shl i64 %252, 32
  %257 = ashr exact i64 %256, 32
  %258 = sext i32 %254 to i64
  %259 = mul nsw i64 %258, %257
  %260 = and i64 %259, 4294967295
  store i64 %260, i64* %5, align 8, !tbaa !1240
  %261 = trunc i64 %259 to i32
  %262 = sitofp i32 %261 to double
  store double %262, double* %74, align 1, !tbaa !1264
  %263 = fdiv double %245, %262
  %264 = add i64 %285, 72
  %265 = inttoptr i64 %324 to i64*
  store i64 %264, i64* %265
  %266 = inttoptr i64 %324 to i64*
  %267 = load i64, i64* %266
  %268 = tail call double @sqrt(double %263) #11
  store i128 0, i128* %322, align 8, !alias.scope !1584, !noalias !1587
  store double %268, double* %321, align 8, !alias.scope !1584, !noalias !1587
  %269 = inttoptr i64 %317 to i32*
  %270 = load i32, i32* %269
  %271 = sext i32 %270 to i64
  %272 = shl nsw i64 %271, 3
  %273 = add i64 %272, ptrtoint (%errnm_type* @errnm to i64)
  %274 = inttoptr i64 %273 to double*
  store double %268, double* %274
  %275 = inttoptr i64 %317 to i32*
  %276 = load i32, i32* %275
  %277 = add i32 %276, 1
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %4, align 8, !tbaa !1240
  %279 = inttoptr i64 %317 to i32*
  store i32 %277, i32* %279
  %280 = add i64 %267, -72
  br label %block_408909

block_40880d:                                     ; preds = %block_4087fd
  %281 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %282 = add i64 %298, -4
  %283 = add i64 %316, 10
  %284 = inttoptr i64 %282 to i32*
  store i32 %281, i32* %284
  br label %block_408817

block_408909:                                     ; preds = %block_408902, %block_408913
  %285 = phi i64 [ %318, %block_408902 ], [ %280, %block_408913 ]
  %286 = phi %struct.Memory* [ %41, %block_408902 ], [ %286, %block_408913 ]
  %287 = inttoptr i64 %317 to i32*
  %288 = load i32, i32* %287
  %289 = add i32 %288, -5
  %290 = lshr i32 %289, 31
  %291 = lshr i32 %288, 31
  %292 = xor i32 %290, %291
  %293 = add nuw nsw i32 %292, %291
  %294 = icmp eq i32 %293, 2
  %295 = icmp ne i32 %290, 0
  %296 = xor i1 %295, %294
  br i1 %296, label %block_408913, label %block_40896c

block_4087fd:                                     ; preds = %block_4087f3, %block_4088dc
  %297 = phi i64 [ %83, %block_4087f3 ], [ %67, %block_4088dc ]
  %298 = phi i64 [ %40, %block_4087f3 ], [ %221, %block_4088dc ]
  %299 = phi %struct.Memory* [ %41, %block_4087f3 ], [ %222, %block_4088dc ]
  %300 = add i64 %298, -8
  %301 = inttoptr i64 %300 to i32*
  %302 = load i32, i32* %301
  %303 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %304 = sub i32 %302, %303
  %305 = lshr i32 %304, 31
  %306 = trunc i32 %305 to i8
  %307 = lshr i32 %302, 31
  %308 = lshr i32 %303, 31
  %309 = xor i32 %308, %307
  %310 = xor i32 %305, %307
  %311 = add nuw nsw i32 %310, %309
  %312 = icmp eq i32 %311, 2
  %313 = icmp ne i8 %306, 0
  %314 = xor i1 %313, %312
  %315 = select i1 %314, i64 16, i64 242
  %316 = add i64 %297, %315
  br i1 %314, label %block_40880d, label %block_4088ef

block_408902:                                     ; preds = %block_4087de
  %317 = add i64 %40, -16
  %318 = add i64 %61, 7
  %319 = inttoptr i64 %317 to i32*
  store i32 0, i32* %319
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %321 = bitcast %union.VectorReg* %320 to double*
  %322 = bitcast %union.VectorReg* %320 to i128*
  %323 = load i64, i64* %7, align 8
  %324 = add i64 %323, -8
  br label %block_408909
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006e0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4006e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %10, align 8, !tbaa !1240
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = load i64, i64* %6, align 8
  store i64 %19, i64* %12, align 8, !tbaa !1240
  %20 = load i64, i64* %9, align 8, !tbaa !1240
  %21 = add i64 %20, 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  store i64 %21, i64* %6, align 8, !tbaa !1240
  %24 = and i64 %21, -16
  store i8 0, i8* %13, align 1, !tbaa !1245
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 240
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %14, align 1, !tbaa !1259
  %31 = icmp eq i64 %24, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !1260
  %33 = lshr i64 %21, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %16, align 1, !tbaa !1261
  store i8 0, i8* %17, align 1, !tbaa !1262
  store i8 0, i8* %18, align 1, !tbaa !1263
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %24, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = add i64 %24, -16
  %39 = inttoptr i64 %38 to i64*
  store i64 %36, i64* %39
  store i64 ptrtoint (i64 ()* @callback_sub_41a590___libc_csu_fini to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (i64 ()* @callback_sub_41a520___libc_csu_init to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64* %8, align 8, !tbaa !1240
  %40 = add i64 %1, 42
  %41 = add i64 %24, -24
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  %45 = add i64 %24, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = inttoptr i64 %41 to i64*
  %49 = load i64, i64* %48
  store i64 %38, i64* %9, align 8, !alias.scope !1589, !noalias !1592
  %50 = tail call i64 @__libc_start_main(i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64 %23, i64 %21, i64 ptrtoint (i64 ()* @callback_sub_41a520___libc_csu_init to i64), i64 ptrtoint (i64 ()* @callback_sub_41a590___libc_csu_fini to i64), i64 %19, i64 %44, i64 %47), !noalias !1589
  store i64 %50, i64* %4, align 8, !alias.scope !1589, !noalias !1592
  %51 = add i64 %49, 1
  store i64 %51, i64* %3, align 8
  %52 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  ret %struct.Memory* %52
}

; Function Attrs: noinline
define %struct.Memory* @sub_413030_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_413030:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %19, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %20, align 8, !tbaa !1240
  %33 = load i64, i64* %26, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %25, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %24, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %23, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %14, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -328
  store i64 %48, i64* %19, align 8, !tbaa !1240
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = load i8, i8* %5, align 1
  %56 = add i64 %30, 88
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %21, align 8, !tbaa !1240
  %59 = add i64 %30, 80
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %22, align 8, !tbaa !1240
  %62 = add i64 %30, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %14, align 8, !tbaa !1240
  %65 = add i64 %30, 64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  store i64 %67, i64* %25, align 8, !tbaa !1240
  %68 = add i64 %30, 56
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %26, align 8, !tbaa !1240
  %71 = add i64 %30, 48
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %23, align 8, !tbaa !1240
  %74 = load i64, i64* %20, align 8
  %75 = add i64 %74, 48
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %24, align 8, !tbaa !1240
  %78 = add i64 %74, 40
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %17, align 8, !tbaa !1240
  %81 = add i64 %74, -117
  %82 = inttoptr i64 %81 to i8*
  store i8 %55, i8* %82
  %83 = add i64 %74, 32
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %74, -124
  %87 = load i32, i32* %7, align 4
  %88 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %74, 24
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = add i64 %74, -136
  %93 = inttoptr i64 %92 to i64*
  store i64 %85, i64* %93
  %94 = add i64 %74, 16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %74, -140
  %98 = inttoptr i64 %97 to i32*
  store i32 %91, i32* %98
  %99 = inttoptr i64 %86 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %15, align 8, !tbaa !1240
  %102 = add i64 %74, -152
  %103 = inttoptr i64 %102 to i64*
  store i64 %96, i64* %103
  %104 = add i64 %74, -48
  %105 = load i64, i64* %18, align 8
  %106 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %106
  %107 = inttoptr i64 %81 to i8*
  %108 = load i8, i8* %107
  %109 = add i64 %74, -49
  %110 = inttoptr i64 %109 to i8*
  store i8 %108, i8* %110
  %111 = add i64 %74, -56
  %112 = load i32, i32* %9, align 4
  %113 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %113
  %114 = add i64 %74, -60
  %115 = inttoptr i64 %114 to i32*
  store i32 %100, i32* %115
  %116 = add i64 %74, -64
  %117 = load i32, i32* %11, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %74, -68
  %120 = load i32, i32* %13, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %74, -80
  %123 = bitcast [32 x %union.VectorReg]* %27 to double*
  %124 = load double, double* %123, align 1
  %125 = inttoptr i64 %122 to double*
  store double %124, double* %125
  %126 = add i64 %74, -88
  %127 = bitcast %union.VectorReg* %28 to double*
  %128 = load double, double* %127, align 1
  %129 = inttoptr i64 %126 to double*
  store double %128, double* %129
  %130 = inttoptr i64 %104 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %74, -160
  %133 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %133
  %134 = load i64, i64* %20, align 8
  %135 = add i64 %134, -160
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %134, -168
  %139 = load i64, i64* %17, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %140
  %141 = add i64 %134, -176
  %142 = load i64, i64* %22, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %142, i64* %143
  %144 = add i64 %134, -184
  %145 = load i64, i64* %14, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %146
  %147 = add i64 %134, -192
  %148 = load i64, i64* %25, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %148, i64* %149
  %150 = add i64 %134, -200
  %151 = load i64, i64* %26, align 8
  %152 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %152
  %153 = add i64 %134, -208
  %154 = load i64, i64* %24, align 8
  %155 = inttoptr i64 %153 to i64*
  store i64 %154, i64* %155
  %156 = add i64 %134, -216
  %157 = load i64, i64* %23, align 8
  %158 = inttoptr i64 %156 to i64*
  store i64 %157, i64* %158
  %159 = add i64 %134, -224
  %160 = load i64, i64* %21, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %161
  %162 = add i64 %1, 228
  %163 = load i64, i64* %19, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %172 = load i64, i64* %168, align 8, !alias.scope !1594, !noalias !1597
  %173 = load i64, i64* %167, align 8, !alias.scope !1594, !noalias !1597
  %174 = load i64, i64* %170, align 8, !alias.scope !1594, !noalias !1597
  %175 = load i64, i64* %171, align 8, !alias.scope !1594, !noalias !1597
  %176 = inttoptr i64 %163 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %163, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %163, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %163, 24
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %163, 32
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %163, 40
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %163, 48
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %163, 56
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %163, 64
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %163, 72
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = inttoptr i64 %164 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %3, align 8, !alias.scope !1594, !noalias !1597
  store i64 %163, i64* %19, align 8, !alias.scope !1594, !noalias !1597
  %207 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1688), i64 %137, i64 %172, i64 %173, i64 %174, i64 %175, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204), !noalias !1594
  %208 = load i64, i64* %3, align 8
  %209 = load i64, i64* %20, align 8
  %210 = add i64 %209, -49
  %211 = inttoptr i64 %210 to i8*
  %212 = load i8, i8* %211
  %213 = sext i8 %212 to i64
  %214 = and i64 %213, 4294967295
  store i64 %214, i64* %17, align 8, !tbaa !1240
  %215 = add i64 %209, -228
  %216 = trunc i64 %207 to i32
  %217 = inttoptr i64 %215 to i32*
  store i32 %216, i32* %217
  %218 = add i64 %208, 27
  %219 = load i64, i64* %19, align 8, !tbaa !1240
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %168, align 8, !alias.scope !1599, !noalias !1602
  %223 = load i64, i64* %167, align 8, !alias.scope !1599, !noalias !1602
  %224 = load i64, i64* %170, align 8, !alias.scope !1599, !noalias !1602
  %225 = load i64, i64* %171, align 8, !alias.scope !1599, !noalias !1602
  %226 = inttoptr i64 %219 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %219, 8
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %219, 16
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %219, 24
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %219, 32
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %219, 40
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %219, 48
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %219, 56
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %219, 64
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %219, 72
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = inttoptr i64 %220 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %3, align 8, !alias.scope !1599, !noalias !1602
  store i64 %219, i64* %19, align 8, !alias.scope !1599, !noalias !1602
  %257 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1716), i64 %214, i64 %222, i64 %223, i64 %224, i64 %225, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254), !noalias !1599
  %258 = load i64, i64* %20, align 8
  %259 = add i64 %258, -60
  %260 = load i64, i64* %3, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261
  %263 = icmp eq i32 %262, 0
  %264 = add i64 %258, -232
  %265 = trunc i64 %257 to i32
  %266 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %266
  %267 = select i1 %263, i64 16, i64 240
  %268 = add i64 %260, %267
  %269 = add i64 %258, -64
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  br i1 %263, label %block_41313f, label %block_41321f

block_4132fd:                                     ; preds = %block_4132b6, %block_4132dc
  %272 = phi i64 [ %835, %block_4132dc ], [ %1202, %block_4132b6 ]
  %273 = phi i64 [ %839, %block_4132dc ], [ %1207, %block_4132b6 ]
  %274 = phi %struct.Memory* [ %958, %block_4132dc ], [ %958, %block_4132b6 ]
  %275 = add i64 %272, 32
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %273, 21
  %279 = load i64, i64* %19, align 8, !tbaa !1240
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281
  %282 = load i64, i64* %168, align 8, !alias.scope !1604, !noalias !1607
  %283 = load i64, i64* %167, align 8, !alias.scope !1604, !noalias !1607
  %284 = load i64, i64* %170, align 8, !alias.scope !1604, !noalias !1607
  %285 = load i64, i64* %171, align 8, !alias.scope !1604, !noalias !1607
  %286 = inttoptr i64 %279 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %279, 8
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %279, 16
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %279, 24
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %279, 32
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %279, 40
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %279, 48
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %279, 56
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %279, 64
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %279, 72
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = inttoptr i64 %280 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %3, align 8, !alias.scope !1604, !noalias !1607
  store i64 %279, i64* %19, align 8, !alias.scope !1604, !noalias !1607
  %317 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 446), i64 %277, i64 %282, i64 %283, i64 %284, i64 %285, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314), !noalias !1604
  %318 = load i64, i64* %3, align 8
  %319 = load i64, i64* %20, align 8
  %320 = add i64 %319, 40
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %319, -284
  %324 = trunc i64 %317 to i32
  %325 = inttoptr i64 %323 to i32*
  store i32 %324, i32* %325
  %326 = add i64 %318, 27
  %327 = load i64, i64* %19, align 8, !tbaa !1240
  %328 = add i64 %327, -8
  %329 = inttoptr i64 %328 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %168, align 8, !alias.scope !1609, !noalias !1612
  %331 = load i64, i64* %167, align 8, !alias.scope !1609, !noalias !1612
  %332 = load i64, i64* %170, align 8, !alias.scope !1609, !noalias !1612
  %333 = load i64, i64* %171, align 8, !alias.scope !1609, !noalias !1612
  %334 = inttoptr i64 %327 to i64*
  %335 = load i64, i64* %334
  %336 = add i64 %327, 8
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337
  %339 = add i64 %327, 16
  %340 = inttoptr i64 %339 to i64*
  %341 = load i64, i64* %340
  %342 = add i64 %327, 24
  %343 = inttoptr i64 %342 to i64*
  %344 = load i64, i64* %343
  %345 = add i64 %327, 32
  %346 = inttoptr i64 %345 to i64*
  %347 = load i64, i64* %346
  %348 = add i64 %327, 40
  %349 = inttoptr i64 %348 to i64*
  %350 = load i64, i64* %349
  %351 = add i64 %327, 48
  %352 = inttoptr i64 %351 to i64*
  %353 = load i64, i64* %352
  %354 = add i64 %327, 56
  %355 = inttoptr i64 %354 to i64*
  %356 = load i64, i64* %355
  %357 = add i64 %327, 64
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  %360 = add i64 %327, 72
  %361 = inttoptr i64 %360 to i64*
  %362 = load i64, i64* %361
  %363 = inttoptr i64 %328 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %3, align 8, !alias.scope !1609, !noalias !1612
  store i64 %327, i64* %19, align 8, !alias.scope !1609, !noalias !1612
  %365 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 483), i64 %322, i64 %330, i64 %331, i64 %332, i64 %333, i64 %335, i64 %338, i64 %341, i64 %344, i64 %347, i64 %350, i64 %353, i64 %356, i64 %359, i64 %362), !noalias !1609
  %366 = load i64, i64* %3, align 8
  %367 = load i64, i64* %20, align 8
  %368 = add i64 %367, 48
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %367, -288
  %372 = trunc i64 %365 to i32
  %373 = inttoptr i64 %371 to i32*
  store i32 %372, i32* %373
  %374 = add i64 %366, 27
  %375 = load i64, i64* %19, align 8, !tbaa !1240
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377
  %378 = load i64, i64* %168, align 8, !alias.scope !1614, !noalias !1617
  %379 = load i64, i64* %167, align 8, !alias.scope !1614, !noalias !1617
  %380 = load i64, i64* %170, align 8, !alias.scope !1614, !noalias !1617
  %381 = load i64, i64* %171, align 8, !alias.scope !1614, !noalias !1617
  %382 = inttoptr i64 %375 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %375, 8
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %375, 16
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %375, 24
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = add i64 %375, 32
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  %396 = add i64 %375, 40
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  %399 = add i64 %375, 48
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  %402 = add i64 %375, 56
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = add i64 %375, 64
  %406 = inttoptr i64 %405 to i64*
  %407 = load i64, i64* %406
  %408 = add i64 %375, 72
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = inttoptr i64 %376 to i64*
  %412 = load i64, i64* %411
  store i64 %412, i64* %3, align 8, !alias.scope !1614, !noalias !1617
  store i64 %375, i64* %19, align 8, !alias.scope !1614, !noalias !1617
  %413 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2001), i64 %370, i64 %378, i64 %379, i64 %380, i64 %381, i64 %383, i64 %386, i64 %389, i64 %392, i64 %395, i64 %398, i64 %401, i64 %404, i64 %407, i64 %410), !noalias !1614
  %414 = load i64, i64* %3, align 8
  %415 = load i64, i64* %20, align 8
  %416 = add i64 %415, 56
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %415, -292
  %420 = trunc i64 %413 to i32
  %421 = inttoptr i64 %419 to i32*
  store i32 %420, i32* %421
  %422 = add i64 %414, 27
  %423 = load i64, i64* %19, align 8, !tbaa !1240
  %424 = add i64 %423, -8
  %425 = inttoptr i64 %424 to i64*
  store i64 %422, i64* %425
  %426 = load i64, i64* %168, align 8, !alias.scope !1619, !noalias !1622
  %427 = load i64, i64* %167, align 8, !alias.scope !1619, !noalias !1622
  %428 = load i64, i64* %170, align 8, !alias.scope !1619, !noalias !1622
  %429 = load i64, i64* %171, align 8, !alias.scope !1619, !noalias !1622
  %430 = inttoptr i64 %423 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %423, 8
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %423, 16
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %423, 24
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %423, 32
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %423, 40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %423, 48
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %423, 56
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %423, 64
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %423, 72
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %424 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !1619, !noalias !1622
  store i64 %423, i64* %19, align 8, !alias.scope !1619, !noalias !1622
  %461 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 540), i64 %418, i64 %426, i64 %427, i64 %428, i64 %429, i64 %431, i64 %434, i64 %437, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458), !noalias !1619
  %462 = load i64, i64* %3, align 8
  %463 = load i64, i64* %20, align 8
  %464 = add i64 %463, 64
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %463, -296
  %468 = trunc i64 %461 to i32
  %469 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %469
  %470 = add i64 %462, 27
  %471 = load i64, i64* %19, align 8, !tbaa !1240
  %472 = add i64 %471, -8
  %473 = inttoptr i64 %472 to i64*
  store i64 %470, i64* %473
  %474 = load i64, i64* %168, align 8, !alias.scope !1624, !noalias !1627
  %475 = load i64, i64* %167, align 8, !alias.scope !1624, !noalias !1627
  %476 = load i64, i64* %170, align 8, !alias.scope !1624, !noalias !1627
  %477 = load i64, i64* %171, align 8, !alias.scope !1624, !noalias !1627
  %478 = inttoptr i64 %471 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %471, 8
  %481 = inttoptr i64 %480 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %471, 16
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %471, 24
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %471, 32
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %471, 40
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %471, 48
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = add i64 %471, 56
  %499 = inttoptr i64 %498 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %471, 64
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %471, 72
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = inttoptr i64 %472 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %3, align 8, !alias.scope !1624, !noalias !1627
  store i64 %471, i64* %19, align 8, !alias.scope !1624, !noalias !1627
  %509 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 563), i64 %466, i64 %474, i64 %475, i64 %476, i64 %477, i64 %479, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497, i64 %500, i64 %503, i64 %506), !noalias !1624
  %510 = load i64, i64* %3, align 8
  %511 = load i64, i64* %20, align 8
  %512 = add i64 %511, 72
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %511, -300
  %516 = trunc i64 %509 to i32
  %517 = inttoptr i64 %515 to i32*
  store i32 %516, i32* %517
  %518 = add i64 %510, 27
  %519 = load i64, i64* %19, align 8, !tbaa !1240
  %520 = add i64 %519, -8
  %521 = inttoptr i64 %520 to i64*
  store i64 %518, i64* %521
  %522 = load i64, i64* %168, align 8, !alias.scope !1629, !noalias !1632
  %523 = load i64, i64* %167, align 8, !alias.scope !1629, !noalias !1632
  %524 = load i64, i64* %170, align 8, !alias.scope !1629, !noalias !1632
  %525 = load i64, i64* %171, align 8, !alias.scope !1629, !noalias !1632
  %526 = inttoptr i64 %519 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %519, 8
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %519, 16
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %519, 24
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %519, 32
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %519, 40
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %519, 48
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %519, 56
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = add i64 %519, 64
  %550 = inttoptr i64 %549 to i64*
  %551 = load i64, i64* %550
  %552 = add i64 %519, 72
  %553 = inttoptr i64 %552 to i64*
  %554 = load i64, i64* %553
  %555 = inttoptr i64 %520 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %3, align 8, !alias.scope !1629, !noalias !1632
  store i64 %519, i64* %19, align 8, !alias.scope !1629, !noalias !1632
  %557 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 586), i64 %514, i64 %522, i64 %523, i64 %524, i64 %525, i64 %527, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548, i64 %551, i64 %554), !noalias !1629
  %558 = load i64, i64* %3, align 8
  %559 = load i64, i64* %20, align 8
  %560 = add i64 %559, 80
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %559, -304
  %564 = trunc i64 %557 to i32
  %565 = inttoptr i64 %563 to i32*
  store i32 %564, i32* %565
  %566 = add i64 %558, 27
  %567 = load i64, i64* %19, align 8, !tbaa !1240
  %568 = add i64 %567, -8
  %569 = inttoptr i64 %568 to i64*
  store i64 %566, i64* %569
  %570 = load i64, i64* %168, align 8, !alias.scope !1634, !noalias !1637
  %571 = load i64, i64* %167, align 8, !alias.scope !1634, !noalias !1637
  %572 = load i64, i64* %170, align 8, !alias.scope !1634, !noalias !1637
  %573 = load i64, i64* %171, align 8, !alias.scope !1634, !noalias !1637
  %574 = inttoptr i64 %567 to i64*
  %575 = load i64, i64* %574
  %576 = add i64 %567, 8
  %577 = inttoptr i64 %576 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %567, 16
  %580 = inttoptr i64 %579 to i64*
  %581 = load i64, i64* %580
  %582 = add i64 %567, 24
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = add i64 %567, 32
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  %588 = add i64 %567, 40
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %567, 48
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = add i64 %567, 56
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  %597 = add i64 %567, 64
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %567, 72
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = inttoptr i64 %568 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %3, align 8, !alias.scope !1634, !noalias !1637
  store i64 %567, i64* %19, align 8, !alias.scope !1634, !noalias !1637
  %605 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 609), i64 %562, i64 %570, i64 %571, i64 %572, i64 %573, i64 %575, i64 %578, i64 %581, i64 %584, i64 %587, i64 %590, i64 %593, i64 %596, i64 %599, i64 %602), !noalias !1634
  %606 = load i64, i64* %3, align 8
  %607 = load i64, i64* %20, align 8
  %608 = add i64 %607, 88
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %607, -308
  %612 = trunc i64 %605 to i32
  %613 = inttoptr i64 %611 to i32*
  store i32 %612, i32* %613
  %614 = add i64 %606, 27
  %615 = load i64, i64* %19, align 8, !tbaa !1240
  %616 = add i64 %615, -8
  %617 = inttoptr i64 %616 to i64*
  store i64 %614, i64* %617
  %618 = load i64, i64* %168, align 8, !alias.scope !1639, !noalias !1642
  %619 = load i64, i64* %167, align 8, !alias.scope !1639, !noalias !1642
  %620 = load i64, i64* %170, align 8, !alias.scope !1639, !noalias !1642
  %621 = load i64, i64* %171, align 8, !alias.scope !1639, !noalias !1642
  %622 = inttoptr i64 %615 to i64*
  %623 = load i64, i64* %622
  %624 = add i64 %615, 8
  %625 = inttoptr i64 %624 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %615, 16
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %615, 24
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = add i64 %615, 32
  %634 = inttoptr i64 %633 to i64*
  %635 = load i64, i64* %634
  %636 = add i64 %615, 40
  %637 = inttoptr i64 %636 to i64*
  %638 = load i64, i64* %637
  %639 = add i64 %615, 48
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %615, 56
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = add i64 %615, 64
  %646 = inttoptr i64 %645 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %615, 72
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = inttoptr i64 %616 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %3, align 8, !alias.scope !1639, !noalias !1642
  store i64 %615, i64* %19, align 8, !alias.scope !1639, !noalias !1642
  %653 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 632), i64 %610, i64 %618, i64 %619, i64 %620, i64 %621, i64 %623, i64 %626, i64 %629, i64 %632, i64 %635, i64 %638, i64 %641, i64 %644, i64 %647, i64 %650), !noalias !1639
  %654 = load i64, i64* %3, align 8
  %655 = load i64, i64* %20, align 8
  %656 = add i64 %655, 96
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %17, align 8, !tbaa !1240
  %659 = add i64 %655, -312
  %660 = trunc i64 %653 to i32
  %661 = inttoptr i64 %659 to i32*
  store i32 %660, i32* %661
  %662 = add i64 %654, 27
  %663 = load i64, i64* %19, align 8, !tbaa !1240
  %664 = add i64 %663, -8
  %665 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %665
  %666 = load i64, i64* %168, align 8, !alias.scope !1644, !noalias !1647
  %667 = load i64, i64* %167, align 8, !alias.scope !1644, !noalias !1647
  %668 = load i64, i64* %170, align 8, !alias.scope !1644, !noalias !1647
  %669 = load i64, i64* %171, align 8, !alias.scope !1644, !noalias !1647
  %670 = inttoptr i64 %663 to i64*
  %671 = load i64, i64* %670
  %672 = add i64 %663, 8
  %673 = inttoptr i64 %672 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %663, 16
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %663, 24
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %663, 32
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %663, 40
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %663, 48
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %663, 56
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %663, 64
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = add i64 %663, 72
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = inttoptr i64 %664 to i64*
  %700 = load i64, i64* %699
  store i64 %700, i64* %3, align 8, !alias.scope !1644, !noalias !1647
  store i64 %663, i64* %19, align 8, !alias.scope !1644, !noalias !1647
  %701 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2043), i64 %658, i64 %666, i64 %667, i64 %668, i64 %669, i64 %671, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695, i64 %698), !noalias !1644
  %702 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2066), i64* %18, align 8, !tbaa !1240
  %703 = load i64, i64* %20, align 8
  %704 = add i64 %703, -316
  %705 = trunc i64 %701 to i32
  %706 = inttoptr i64 %704 to i32*
  store i32 %705, i32* %706
  %707 = add i64 %702, 23
  %708 = load i64, i64* %19, align 8, !tbaa !1240
  %709 = add i64 %708, -8
  %710 = inttoptr i64 %709 to i64*
  store i64 %707, i64* %710
  %711 = load i64, i64* %169, align 8, !alias.scope !1649, !noalias !1652
  %712 = load i64, i64* %168, align 8, !alias.scope !1649, !noalias !1652
  %713 = load i64, i64* %167, align 8, !alias.scope !1649, !noalias !1652
  %714 = load i64, i64* %170, align 8, !alias.scope !1649, !noalias !1652
  %715 = load i64, i64* %171, align 8, !alias.scope !1649, !noalias !1652
  %716 = inttoptr i64 %708 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %708, 8
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  %721 = add i64 %708, 16
  %722 = inttoptr i64 %721 to i64*
  %723 = load i64, i64* %722
  %724 = add i64 %708, 24
  %725 = inttoptr i64 %724 to i64*
  %726 = load i64, i64* %725
  %727 = add i64 %708, 32
  %728 = inttoptr i64 %727 to i64*
  %729 = load i64, i64* %728
  %730 = add i64 %708, 40
  %731 = inttoptr i64 %730 to i64*
  %732 = load i64, i64* %731
  %733 = add i64 %708, 48
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %708, 56
  %737 = inttoptr i64 %736 to i64*
  %738 = load i64, i64* %737
  %739 = add i64 %708, 64
  %740 = inttoptr i64 %739 to i64*
  %741 = load i64, i64* %740
  %742 = add i64 %708, 72
  %743 = inttoptr i64 %742 to i64*
  %744 = load i64, i64* %743
  store i64 %708, i64* %19, align 8, !alias.scope !1649, !noalias !1652
  %745 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2066), i64 %711, i64 %712, i64 %713, i64 %714, i64 %715, i64 %717, i64 %720, i64 %723, i64 %726, i64 %729, i64 %732, i64 %735, i64 %738, i64 %741, i64 %744), !noalias !1649
  store i64 %745, i64* %166, align 8, !alias.scope !1649, !noalias !1652
  %746 = load i64, i64* %20, align 8
  %747 = add i64 %746, -320
  %748 = trunc i64 %745 to i32
  %749 = inttoptr i64 %747 to i32*
  store i32 %748, i32* %749
  %750 = load i64, i64* %19, align 8
  %751 = add i64 %750, 280
  %752 = icmp ugt i64 %750, -281
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %49, align 1, !tbaa !1245
  %754 = trunc i64 %751 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #11
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %50, align 1, !tbaa !1259
  %760 = xor i64 %750, 16
  %761 = xor i64 %760, %751
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %51, align 1, !tbaa !1263
  %765 = icmp eq i64 %751, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %52, align 1, !tbaa !1260
  %767 = lshr i64 %751, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %53, align 1, !tbaa !1261
  %769 = lshr i64 %750, 63
  %770 = xor i64 %767, %769
  %771 = add nuw nsw i64 %770, %767
  %772 = icmp eq i64 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %54, align 1, !tbaa !1262
  %774 = add i64 %750, 288
  %775 = inttoptr i64 %751 to i64*
  %776 = load i64, i64* %775
  store i64 %776, i64* %14, align 8, !tbaa !1240
  %777 = add i64 %750, 296
  %778 = inttoptr i64 %774 to i64*
  %779 = load i64, i64* %778
  store i64 %779, i64* %23, align 8, !tbaa !1240
  %780 = add i64 %750, 304
  %781 = inttoptr i64 %777 to i64*
  %782 = load i64, i64* %781
  store i64 %782, i64* %24, align 8, !tbaa !1240
  %783 = add i64 %750, 312
  %784 = inttoptr i64 %780 to i64*
  %785 = load i64, i64* %784
  store i64 %785, i64* %25, align 8, !tbaa !1240
  %786 = add i64 %750, 320
  %787 = inttoptr i64 %783 to i64*
  %788 = load i64, i64* %787
  store i64 %788, i64* %26, align 8, !tbaa !1240
  %789 = add i64 %750, 328
  %790 = inttoptr i64 %786 to i64*
  %791 = load i64, i64* %790
  store i64 %791, i64* %20, align 8, !tbaa !1240
  %792 = inttoptr i64 %789 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %3, align 8, !tbaa !1240
  %794 = add i64 %750, 336
  store i64 %794, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %274

block_4132dc:                                     ; preds = %block_41323f
  %795 = add i64 %1161, 27
  %796 = load i64, i64* %19, align 8, !tbaa !1240
  %797 = add i64 %796, -8
  %798 = inttoptr i64 %797 to i64*
  store i64 %795, i64* %798
  %799 = load i64, i64* %168, align 8, !alias.scope !1654, !noalias !1657
  %800 = load i64, i64* %167, align 8, !alias.scope !1654, !noalias !1657
  %801 = load i64, i64* %170, align 8, !alias.scope !1654, !noalias !1657
  %802 = load i64, i64* %171, align 8, !alias.scope !1654, !noalias !1657
  %803 = inttoptr i64 %796 to i64*
  %804 = load i64, i64* %803
  %805 = add i64 %796, 8
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = add i64 %796, 16
  %809 = inttoptr i64 %808 to i64*
  %810 = load i64, i64* %809
  %811 = add i64 %796, 24
  %812 = inttoptr i64 %811 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %796, 32
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %796, 40
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %796, 48
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %796, 56
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %796, 64
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  %829 = add i64 %796, 72
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = inttoptr i64 %797 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %3, align 8, !alias.scope !1654, !noalias !1657
  store i64 %796, i64* %19, align 8, !alias.scope !1654, !noalias !1657
  %834 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1951), i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1988), i64 %799, i64 %800, i64 %801, i64 %802, i64 %804, i64 %807, i64 %810, i64 %813, i64 %816, i64 %819, i64 %822, i64 %825, i64 %828, i64 %831), !noalias !1654
  %835 = load i64, i64* %20, align 8
  %836 = add i64 %835, -280
  %837 = trunc i64 %834 to i32
  %838 = load i64, i64* %3, align 8
  %839 = add i64 %838, 6
  %840 = inttoptr i64 %836 to i32*
  store i32 %837, i32* %840
  br label %block_4132fd

block_41321f:                                     ; preds = %block_41313f, %block_413030
  %841 = phi i64 [ %955, %block_41313f ], [ %268, %block_413030 ]
  %842 = add i64 %258, -56
  %843 = inttoptr i64 %842 to i32*
  %844 = load i32, i32* %843
  %845 = zext i32 %844 to i64
  %846 = inttoptr i64 %259 to i32*
  %847 = load i32, i32* %846
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %16, align 8, !tbaa !1240
  %849 = zext i32 %271 to i64
  store i64 %849, i64* %15, align 8, !tbaa !1240
  %850 = add i64 %841, 26
  %851 = load i64, i64* %19, align 8, !tbaa !1240
  %852 = add i64 %851, -8
  %853 = inttoptr i64 %852 to i64*
  store i64 %850, i64* %853
  %854 = load i64, i64* %170, align 8, !alias.scope !1659, !noalias !1662
  %855 = load i64, i64* %171, align 8, !alias.scope !1659, !noalias !1662
  %856 = inttoptr i64 %851 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %851, 8
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %851, 16
  %862 = inttoptr i64 %861 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %851, 24
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = add i64 %851, 32
  %868 = inttoptr i64 %867 to i64*
  %869 = load i64, i64* %868
  %870 = add i64 %851, 40
  %871 = inttoptr i64 %870 to i64*
  %872 = load i64, i64* %871
  %873 = add i64 %851, 48
  %874 = inttoptr i64 %873 to i64*
  %875 = load i64, i64* %874
  %876 = add i64 %851, 56
  %877 = inttoptr i64 %876 to i64*
  %878 = load i64, i64* %877
  %879 = add i64 %851, 64
  %880 = inttoptr i64 %879 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %851, 72
  %883 = inttoptr i64 %882 to i64*
  %884 = load i64, i64* %883
  %885 = inttoptr i64 %852 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %3, align 8, !alias.scope !1659, !noalias !1662
  store i64 %851, i64* %19, align 8, !alias.scope !1659, !noalias !1662
  %887 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1832), i64 %845, i64 %848, i64 %849, i64 %854, i64 %855, i64 %857, i64 %860, i64 %863, i64 %866, i64 %869, i64 %872, i64 %875, i64 %878, i64 %881, i64 %884), !noalias !1659
  %888 = load i64, i64* %20, align 8
  %889 = add i64 %888, -256
  %890 = trunc i64 %887 to i32
  %891 = load i64, i64* %3, align 8
  %892 = add i64 %891, 6
  %893 = inttoptr i64 %889 to i32*
  store i32 %890, i32* %893
  br label %block_41323f

block_41321a:                                     ; preds = %block_413200, %block_4131d2
  %894 = phi i64 [ %1345, %block_413200 ], [ %947, %block_4131d2 ]
  %895 = phi i64 [ %1349, %block_413200 ], [ %952, %block_4131d2 ]
  %896 = phi %struct.Memory* [ %2, %block_413200 ], [ %899, %block_4131d2 ]
  %897 = add i64 %895, 37
  br label %block_41323f

block_4131d2:                                     ; preds = %block_4131c0, %block_41316a
  %898 = phi i64 [ %1299, %block_41316a ], [ %1372, %block_4131c0 ]
  %899 = phi %struct.Memory* [ %2, %block_41316a ], [ %2, %block_4131c0 ]
  %900 = add i64 %1281, -112
  %901 = inttoptr i64 %1282 to i32*
  %902 = load i32, i32* %901
  %903 = add i32 %902, 1
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %15, align 8, !tbaa !1240
  %905 = add nsw i64 %904, -112
  %906 = add i64 %905, %1281
  %907 = inttoptr i64 %906 to i8*
  store i8 0, i8* %907
  %908 = add i64 %898, 35
  %909 = load i64, i64* %19, align 8, !tbaa !1240
  %910 = add i64 %909, -8
  %911 = inttoptr i64 %910 to i64*
  store i64 %908, i64* %911
  %912 = load i64, i64* %168, align 8, !alias.scope !1664, !noalias !1667
  %913 = load i64, i64* %170, align 8, !alias.scope !1664, !noalias !1667
  %914 = load i64, i64* %171, align 8, !alias.scope !1664, !noalias !1667
  %915 = inttoptr i64 %909 to i64*
  %916 = load i64, i64* %915
  %917 = add i64 %909, 8
  %918 = inttoptr i64 %917 to i64*
  %919 = load i64, i64* %918
  %920 = add i64 %909, 16
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %909, 24
  %924 = inttoptr i64 %923 to i64*
  %925 = load i64, i64* %924
  %926 = add i64 %909, 32
  %927 = inttoptr i64 %926 to i64*
  %928 = load i64, i64* %927
  %929 = add i64 %909, 40
  %930 = inttoptr i64 %929 to i64*
  %931 = load i64, i64* %930
  %932 = add i64 %909, 48
  %933 = inttoptr i64 %932 to i64*
  %934 = load i64, i64* %933
  %935 = add i64 %909, 56
  %936 = inttoptr i64 %935 to i64*
  %937 = load i64, i64* %936
  %938 = add i64 %909, 64
  %939 = inttoptr i64 %938 to i64*
  %940 = load i64, i64* %939
  %941 = add i64 %909, 72
  %942 = inttoptr i64 %941 to i64*
  %943 = load i64, i64* %942
  %944 = inttoptr i64 %910 to i64*
  %945 = load i64, i64* %944
  store i64 %945, i64* %3, align 8, !alias.scope !1664, !noalias !1667
  store i64 %909, i64* %19, align 8, !alias.scope !1664, !noalias !1667
  %946 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1761), i64 %900, i64 %912, i64 %904, i64 %913, i64 %914, i64 %916, i64 %919, i64 %922, i64 %925, i64 %928, i64 %931, i64 %934, i64 %937, i64 %940, i64 %943), !noalias !1664
  %947 = load i64, i64* %20, align 8
  %948 = add i64 %947, -248
  %949 = trunc i64 %946 to i32
  %950 = load i64, i64* %3, align 8
  %951 = inttoptr i64 %948 to i32*
  store i32 %949, i32* %951
  %952 = add i64 %950, 37
  br label %block_41321a

block_41313f:                                     ; preds = %block_413030
  %953 = icmp eq i32 %271, 0
  %954 = select i1 %953, i64 10, i64 224
  %955 = add i64 %268, %954
  br i1 %953, label %block_413149, label %block_41321f

block_41323f:                                     ; preds = %block_41321a, %block_41321f
  %956 = phi i64 [ %888, %block_41321f ], [ %894, %block_41321a ]
  %957 = phi i64 [ %892, %block_41321f ], [ %897, %block_41321a ]
  %958 = phi %struct.Memory* [ %2, %block_41321f ], [ %896, %block_41321a ]
  %959 = add i64 %956, -68
  %960 = inttoptr i64 %959 to i32*
  %961 = load i32, i32* %960
  %962 = zext i32 %961 to i64
  store i64 %962, i64* %17, align 8, !tbaa !1240
  %963 = add i64 %957, 20
  %964 = load i64, i64* %19, align 8, !tbaa !1240
  %965 = add i64 %964, -8
  %966 = inttoptr i64 %965 to i64*
  store i64 %963, i64* %966
  %967 = load i64, i64* %168, align 8, !alias.scope !1669, !noalias !1672
  %968 = load i64, i64* %167, align 8, !alias.scope !1669, !noalias !1672
  %969 = load i64, i64* %170, align 8, !alias.scope !1669, !noalias !1672
  %970 = load i64, i64* %171, align 8, !alias.scope !1669, !noalias !1672
  %971 = inttoptr i64 %964 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %964, 8
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = add i64 %964, 16
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %964, 24
  %980 = inttoptr i64 %979 to i64*
  %981 = load i64, i64* %980
  %982 = add i64 %964, 32
  %983 = inttoptr i64 %982 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %964, 40
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  %988 = add i64 %964, 48
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %964, 56
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = add i64 %964, 64
  %995 = inttoptr i64 %994 to i64*
  %996 = load i64, i64* %995
  %997 = add i64 %964, 72
  %998 = inttoptr i64 %997 to i64*
  %999 = load i64, i64* %998
  %1000 = inttoptr i64 %965 to i64*
  %1001 = load i64, i64* %1000
  store i64 %1001, i64* %3, align 8, !alias.scope !1669, !noalias !1672
  store i64 %964, i64* %19, align 8, !alias.scope !1669, !noalias !1672
  %1002 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 171), i64 %962, i64 %967, i64 %968, i64 %969, i64 %970, i64 %972, i64 %975, i64 %978, i64 %981, i64 %984, i64 %987, i64 %990, i64 %993, i64 %996, i64 %999), !noalias !1669
  %1003 = load i64, i64* %3, align 8
  %1004 = load i64, i64* %20, align 8
  %1005 = add i64 %1004, -80
  %1006 = inttoptr i64 %1005 to double*
  %1007 = load double, double* %1006
  store double %1007, double* %123, align 1, !tbaa !1264
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1009 = bitcast i64* %1008 to double*
  store double 0.000000e+00, double* %1009, align 1, !tbaa !1264
  %1010 = add i64 %1004, -260
  %1011 = trunc i64 %1002 to i32
  %1012 = inttoptr i64 %1010 to i32*
  store i32 %1011, i32* %1012
  %1013 = add i64 %1003, 28
  %1014 = load i64, i64* %19, align 8, !tbaa !1240
  %1015 = add i64 %1014, -8
  %1016 = inttoptr i64 %1015 to i64*
  store i64 %1013, i64* %1016
  %1017 = load i64, i64* %169, align 8, !alias.scope !1674, !noalias !1677
  %1018 = load i64, i64* %168, align 8, !alias.scope !1674, !noalias !1677
  %1019 = load i64, i64* %167, align 8, !alias.scope !1674, !noalias !1677
  %1020 = load i64, i64* %170, align 8, !alias.scope !1674, !noalias !1677
  %1021 = load i64, i64* %171, align 8, !alias.scope !1674, !noalias !1677
  %1022 = inttoptr i64 %1014 to i64*
  %1023 = load i64, i64* %1022
  %1024 = add i64 %1014, 8
  %1025 = inttoptr i64 %1024 to i64*
  %1026 = load i64, i64* %1025
  %1027 = add i64 %1014, 16
  %1028 = inttoptr i64 %1027 to i64*
  %1029 = load i64, i64* %1028
  %1030 = add i64 %1014, 24
  %1031 = inttoptr i64 %1030 to i64*
  %1032 = load i64, i64* %1031
  %1033 = add i64 %1014, 32
  %1034 = inttoptr i64 %1033 to i64*
  %1035 = load i64, i64* %1034
  %1036 = add i64 %1014, 40
  %1037 = inttoptr i64 %1036 to i64*
  %1038 = load i64, i64* %1037
  %1039 = add i64 %1014, 48
  %1040 = inttoptr i64 %1039 to i64*
  %1041 = load i64, i64* %1040
  %1042 = add i64 %1014, 56
  %1043 = inttoptr i64 %1042 to i64*
  %1044 = load i64, i64* %1043
  %1045 = add i64 %1014, 64
  %1046 = inttoptr i64 %1045 to i64*
  %1047 = load i64, i64* %1046
  %1048 = add i64 %1014, 72
  %1049 = inttoptr i64 %1048 to i64*
  %1050 = load i64, i64* %1049
  %1051 = inttoptr i64 %1015 to i64*
  %1052 = load i64, i64* %1051
  store i64 %1052, i64* %3, align 8, !alias.scope !1674, !noalias !1677
  store i64 %1014, i64* %19, align 8, !alias.scope !1674, !noalias !1677
  %1053 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1874), i64 %1017, i64 %1018, i64 %1019, i64 %1020, i64 %1021, i64 %1023, i64 %1026, i64 %1029, i64 %1032, i64 %1035, i64 %1038, i64 %1041, i64 %1044, i64 %1047, i64 %1050), !noalias !1674
  %1054 = load i64, i64* %3, align 8
  %1055 = load i64, i64* %20, align 8
  %1056 = add i64 %1055, -88
  %1057 = inttoptr i64 %1056 to double*
  %1058 = load double, double* %1057
  store double %1058, double* %123, align 1, !tbaa !1264
  store double 0.000000e+00, double* %1009, align 1, !tbaa !1264
  %1059 = add i64 %1055, -264
  %1060 = trunc i64 %1053 to i32
  %1061 = inttoptr i64 %1059 to i32*
  store i32 %1060, i32* %1061
  %1062 = add i64 %1054, 28
  %1063 = load i64, i64* %19, align 8, !tbaa !1240
  %1064 = add i64 %1063, -8
  %1065 = inttoptr i64 %1064 to i64*
  store i64 %1062, i64* %1065
  %1066 = load i64, i64* %169, align 8, !alias.scope !1679, !noalias !1682
  %1067 = load i64, i64* %168, align 8, !alias.scope !1679, !noalias !1682
  %1068 = load i64, i64* %167, align 8, !alias.scope !1679, !noalias !1682
  %1069 = load i64, i64* %170, align 8, !alias.scope !1679, !noalias !1682
  %1070 = load i64, i64* %171, align 8, !alias.scope !1679, !noalias !1682
  %1071 = inttoptr i64 %1063 to i64*
  %1072 = load i64, i64* %1071
  %1073 = add i64 %1063, 8
  %1074 = inttoptr i64 %1073 to i64*
  %1075 = load i64, i64* %1074
  %1076 = add i64 %1063, 16
  %1077 = inttoptr i64 %1076 to i64*
  %1078 = load i64, i64* %1077
  %1079 = add i64 %1063, 24
  %1080 = inttoptr i64 %1079 to i64*
  %1081 = load i64, i64* %1080
  %1082 = add i64 %1063, 32
  %1083 = inttoptr i64 %1082 to i64*
  %1084 = load i64, i64* %1083
  %1085 = add i64 %1063, 40
  %1086 = inttoptr i64 %1085 to i64*
  %1087 = load i64, i64* %1086
  %1088 = add i64 %1063, 48
  %1089 = inttoptr i64 %1088 to i64*
  %1090 = load i64, i64* %1089
  %1091 = add i64 %1063, 56
  %1092 = inttoptr i64 %1091 to i64*
  %1093 = load i64, i64* %1092
  %1094 = add i64 %1063, 64
  %1095 = inttoptr i64 %1094 to i64*
  %1096 = load i64, i64* %1095
  %1097 = add i64 %1063, 72
  %1098 = inttoptr i64 %1097 to i64*
  %1099 = load i64, i64* %1098
  %1100 = inttoptr i64 %1064 to i64*
  %1101 = load i64, i64* %1100
  store i64 %1101, i64* %3, align 8, !alias.scope !1679, !noalias !1682
  store i64 %1063, i64* %19, align 8, !alias.scope !1679, !noalias !1682
  %1102 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1914), i64 %1066, i64 %1067, i64 %1068, i64 %1069, i64 %1070, i64 %1072, i64 %1075, i64 %1078, i64 %1081, i64 %1084, i64 %1087, i64 %1090, i64 %1093, i64 %1096, i64 %1099), !noalias !1679
  %1103 = load i64, i64* %3, align 8
  %1104 = load i64, i64* %20, align 8
  %1105 = add i64 %1104, 16
  %1106 = inttoptr i64 %1105 to i64*
  %1107 = load i64, i64* %1106
  %1108 = add i64 %1104, -268
  %1109 = trunc i64 %1102 to i32
  %1110 = inttoptr i64 %1108 to i32*
  store i32 %1109, i32* %1110
  %1111 = add i64 %1103, 27
  %1112 = load i64, i64* %19, align 8, !tbaa !1240
  %1113 = add i64 %1112, -8
  %1114 = inttoptr i64 %1113 to i64*
  store i64 %1111, i64* %1114
  %1115 = load i64, i64* %168, align 8, !alias.scope !1684, !noalias !1687
  %1116 = load i64, i64* %167, align 8, !alias.scope !1684, !noalias !1687
  %1117 = load i64, i64* %170, align 8, !alias.scope !1684, !noalias !1687
  %1118 = load i64, i64* %171, align 8, !alias.scope !1684, !noalias !1687
  %1119 = inttoptr i64 %1112 to i64*
  %1120 = load i64, i64* %1119
  %1121 = add i64 %1112, 8
  %1122 = inttoptr i64 %1121 to i64*
  %1123 = load i64, i64* %1122
  %1124 = add i64 %1112, 16
  %1125 = inttoptr i64 %1124 to i64*
  %1126 = load i64, i64* %1125
  %1127 = add i64 %1112, 24
  %1128 = inttoptr i64 %1127 to i64*
  %1129 = load i64, i64* %1128
  %1130 = add i64 %1112, 32
  %1131 = inttoptr i64 %1130 to i64*
  %1132 = load i64, i64* %1131
  %1133 = add i64 %1112, 40
  %1134 = inttoptr i64 %1133 to i64*
  %1135 = load i64, i64* %1134
  %1136 = add i64 %1112, 48
  %1137 = inttoptr i64 %1136 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1112, 56
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1112, 64
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = add i64 %1112, 72
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = inttoptr i64 %1113 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %3, align 8, !alias.scope !1684, !noalias !1687
  store i64 %1112, i64* %19, align 8, !alias.scope !1684, !noalias !1687
  %1150 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 286), i64 %1107, i64 %1115, i64 %1116, i64 %1117, i64 %1118, i64 %1120, i64 %1123, i64 %1126, i64 %1129, i64 %1132, i64 %1135, i64 %1138, i64 %1141, i64 %1144, i64 %1147), !noalias !1684
  %1151 = load i64, i64* %20, align 8
  %1152 = add i64 %1151, 24
  %1153 = load i64, i64* %3, align 8
  %1154 = inttoptr i64 %1152 to i32*
  %1155 = load i32, i32* %1154
  %1156 = icmp eq i32 %1155, 0
  %1157 = add i64 %1151, -272
  %1158 = trunc i64 %1150 to i32
  %1159 = inttoptr i64 %1157 to i32*
  store i32 %1158, i32* %1159
  %1160 = select i1 %1156, i64 54, i64 16
  %1161 = add i64 %1153, %1160
  br i1 %1156, label %block_4132dc, label %block_4132b6

block_4132b6:                                     ; preds = %block_41323f
  %1162 = add i64 %1161, 27
  %1163 = load i64, i64* %19, align 8, !tbaa !1240
  %1164 = add i64 %1163, -8
  %1165 = inttoptr i64 %1164 to i64*
  store i64 %1162, i64* %1165
  %1166 = load i64, i64* %168, align 8, !alias.scope !1689, !noalias !1692
  %1167 = load i64, i64* %167, align 8, !alias.scope !1689, !noalias !1692
  %1168 = load i64, i64* %170, align 8, !alias.scope !1689, !noalias !1692
  %1169 = load i64, i64* %171, align 8, !alias.scope !1689, !noalias !1692
  %1170 = inttoptr i64 %1163 to i64*
  %1171 = load i64, i64* %1170
  %1172 = add i64 %1163, 8
  %1173 = inttoptr i64 %1172 to i64*
  %1174 = load i64, i64* %1173
  %1175 = add i64 %1163, 16
  %1176 = inttoptr i64 %1175 to i64*
  %1177 = load i64, i64* %1176
  %1178 = add i64 %1163, 24
  %1179 = inttoptr i64 %1178 to i64*
  %1180 = load i64, i64* %1179
  %1181 = add i64 %1163, 32
  %1182 = inttoptr i64 %1181 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1163, 40
  %1185 = inttoptr i64 %1184 to i64*
  %1186 = load i64, i64* %1185
  %1187 = add i64 %1163, 48
  %1188 = inttoptr i64 %1187 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1163, 56
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = add i64 %1163, 64
  %1194 = inttoptr i64 %1193 to i64*
  %1195 = load i64, i64* %1194
  %1196 = add i64 %1163, 72
  %1197 = inttoptr i64 %1196 to i64*
  %1198 = load i64, i64* %1197
  %1199 = inttoptr i64 %1164 to i64*
  %1200 = load i64, i64* %1199
  store i64 %1200, i64* %3, align 8, !alias.scope !1689, !noalias !1692
  store i64 %1163, i64* %19, align 8, !alias.scope !1689, !noalias !1692
  %1201 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1951), i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1990), i64 %1166, i64 %1167, i64 %1168, i64 %1169, i64 %1171, i64 %1174, i64 %1177, i64 %1180, i64 %1183, i64 %1186, i64 %1189, i64 %1192, i64 %1195, i64 %1198), !noalias !1689
  %1202 = load i64, i64* %20, align 8
  %1203 = add i64 %1202, -276
  %1204 = trunc i64 %1201 to i32
  %1205 = load i64, i64* %3, align 8
  %1206 = inttoptr i64 %1203 to i32*
  store i32 %1204, i32* %1206
  %1207 = add i64 %1205, 44
  br label %block_4132fd

block_413159:                                     ; preds = %block_413149
  %1208 = add i64 %1353, 1
  %1209 = inttoptr i64 %1208 to i8*
  %1210 = load i8, i8* %1209
  %1211 = sext i8 %1210 to i64
  %1212 = and i64 %1211, 4294967295
  store i64 %1212, i64* %15, align 8, !tbaa !1240
  %1213 = sext i8 %1210 to i32
  %1214 = add nsw i32 %1213, -80
  %1215 = icmp eq i32 %1214, 0
  %1216 = select i1 %1215, i64 17, i64 167
  %1217 = add i64 %1362, %1216
  br i1 %1215, label %block_41316a, label %block_413200

block_41316a:                                     ; preds = %block_413159
  %1218 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %1218, double* %123, align 1, !tbaa !1264
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1220 = bitcast i64* %1219 to double*
  store double 0.000000e+00, double* %1220, align 1, !tbaa !1264
  %1221 = add i64 %258, -112
  %1222 = add i64 %258, -56
  %1223 = inttoptr i64 %1222 to i32*
  %1224 = load i32, i32* %1223
  %1225 = sitofp i32 %1224 to double
  store double %1225, double* %127, align 1, !tbaa !1264
  %1226 = add i64 %258, -240
  %1227 = inttoptr i64 %1226 to i64*
  store i64 %1221, i64* %1227
  %1228 = add i64 %1217, 31
  %1229 = load i64, i64* %19, align 8, !tbaa !1240
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %169, align 8, !alias.scope !1694, !noalias !1697
  %1233 = inttoptr i64 %1230 to i64*
  %1234 = load i64, i64* %1233
  store i64 %1234, i64* %3, align 8, !alias.scope !1694, !noalias !1697
  store i64 %1229, i64* %19, align 8, !alias.scope !1694, !noalias !1697
  %1235 = tail call i64 @pow(i64 %1221, i64 %1232), !noalias !1694
  %1236 = load i64, i64* %3, align 8
  %1237 = load i64, i64* %20, align 8
  %1238 = add i64 %1237, -240
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1236, 24
  %1242 = load i64, i64* %19, align 8, !tbaa !1240
  %1243 = add i64 %1242, -8
  %1244 = inttoptr i64 %1243 to i64*
  store i64 %1241, i64* %1244
  %1245 = load i64, i64* %168, align 8, !alias.scope !1699, !noalias !1702
  %1246 = load i64, i64* %167, align 8, !alias.scope !1699, !noalias !1702
  %1247 = load i64, i64* %170, align 8, !alias.scope !1699, !noalias !1702
  %1248 = load i64, i64* %171, align 8, !alias.scope !1699, !noalias !1702
  %1249 = inttoptr i64 %1242 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1242, 8
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1242, 16
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1242, 24
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1242, 32
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1242, 40
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1242, 48
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1242, 56
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1242, 64
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1242, 72
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = inttoptr i64 %1243 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %3, align 8, !alias.scope !1699, !noalias !1702
  store i64 %1242, i64* %19, align 8, !alias.scope !1699, !noalias !1702
  %1280 = tail call i64 @sprintf(i64 %1240, i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1753), i64 %1245, i64 %1246, i64 %1247, i64 %1248, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277), !noalias !1699
  %1281 = load i64, i64* %20, align 8
  %1282 = add i64 %1281, -116
  %1283 = load i64, i64* %3, align 8
  %1284 = inttoptr i64 %1282 to i32*
  store i32 14, i32* %1284
  %1285 = inttoptr i64 %1282 to i32*
  %1286 = load i32, i32* %1285
  %1287 = sext i32 %1286 to i64
  %1288 = add nsw i64 %1287, -112
  %1289 = add i64 %1288, %1281
  %1290 = inttoptr i64 %1289 to i8*
  %1291 = load i8, i8* %1290
  %1292 = sext i8 %1291 to i32
  %1293 = add nsw i32 %1292, -46
  %1294 = icmp eq i32 %1293, 0
  %1295 = add i64 %1281, -244
  %1296 = trunc i64 %1280 to i32
  %1297 = inttoptr i64 %1295 to i32*
  store i32 %1296, i32* %1297
  %1298 = select i1 %1294, i64 31, i64 49
  %1299 = add i64 %1283, %1298
  br i1 %1294, label %block_4131c0, label %block_4131d2

block_413200:                                     ; preds = %block_413149, %block_413159
  %1300 = phi i64 [ %1357, %block_413149 ], [ %1212, %block_413159 ]
  %1301 = phi i64 [ %1362, %block_413149 ], [ %1217, %block_413159 ]
  %1302 = add i64 %258, -56
  %1303 = inttoptr i64 %1302 to i32*
  %1304 = load i32, i32* %1303
  %1305 = zext i32 %1304 to i64
  %1306 = add i64 %1301, 20
  %1307 = load i64, i64* %19, align 8, !tbaa !1240
  %1308 = add i64 %1307, -8
  %1309 = inttoptr i64 %1308 to i64*
  store i64 %1306, i64* %1309
  %1310 = load i64, i64* %168, align 8, !alias.scope !1704, !noalias !1707
  %1311 = load i64, i64* %170, align 8, !alias.scope !1704, !noalias !1707
  %1312 = load i64, i64* %171, align 8, !alias.scope !1704, !noalias !1707
  %1313 = inttoptr i64 %1307 to i64*
  %1314 = load i64, i64* %1313
  %1315 = add i64 %1307, 8
  %1316 = inttoptr i64 %1315 to i64*
  %1317 = load i64, i64* %1316
  %1318 = add i64 %1307, 16
  %1319 = inttoptr i64 %1318 to i64*
  %1320 = load i64, i64* %1319
  %1321 = add i64 %1307, 24
  %1322 = inttoptr i64 %1321 to i64*
  %1323 = load i64, i64* %1322
  %1324 = add i64 %1307, 32
  %1325 = inttoptr i64 %1324 to i64*
  %1326 = load i64, i64* %1325
  %1327 = add i64 %1307, 40
  %1328 = inttoptr i64 %1327 to i64*
  %1329 = load i64, i64* %1328
  %1330 = add i64 %1307, 48
  %1331 = inttoptr i64 %1330 to i64*
  %1332 = load i64, i64* %1331
  %1333 = add i64 %1307, 56
  %1334 = inttoptr i64 %1333 to i64*
  %1335 = load i64, i64* %1334
  %1336 = add i64 %1307, 64
  %1337 = inttoptr i64 %1336 to i64*
  %1338 = load i64, i64* %1337
  %1339 = add i64 %1307, 72
  %1340 = inttoptr i64 %1339 to i64*
  %1341 = load i64, i64* %1340
  %1342 = inttoptr i64 %1308 to i64*
  %1343 = load i64, i64* %1342
  store i64 %1343, i64* %3, align 8, !alias.scope !1704, !noalias !1707
  store i64 %1307, i64* %19, align 8, !alias.scope !1704, !noalias !1707
  %1344 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1795), i64 %1305, i64 %1310, i64 %1300, i64 %1311, i64 %1312, i64 %1314, i64 %1317, i64 %1320, i64 %1323, i64 %1326, i64 %1329, i64 %1332, i64 %1335, i64 %1338, i64 %1341), !noalias !1704
  %1345 = load i64, i64* %20, align 8
  %1346 = add i64 %1345, -252
  %1347 = trunc i64 %1344 to i32
  %1348 = load i64, i64* %3, align 8
  %1349 = add i64 %1348, 6
  %1350 = inttoptr i64 %1346 to i32*
  store i32 %1347, i32* %1350
  br label %block_41321a

block_413149:                                     ; preds = %block_41313f
  %1351 = add i64 %258, -48
  %1352 = inttoptr i64 %1351 to i64*
  %1353 = load i64, i64* %1352
  %1354 = inttoptr i64 %1353 to i8*
  %1355 = load i8, i8* %1354
  %1356 = sext i8 %1355 to i64
  %1357 = and i64 %1356, 4294967295
  store i64 %1357, i64* %15, align 8, !tbaa !1240
  %1358 = sext i8 %1355 to i32
  %1359 = add nsw i32 %1358, -69
  %1360 = icmp eq i32 %1359, 0
  %1361 = select i1 %1360, i64 16, i64 183
  %1362 = add i64 %955, %1361
  br i1 %1360, label %block_413159, label %block_413200

block_4131c0:                                     ; preds = %block_41316a
  %1363 = inttoptr i64 %1282 to i32*
  %1364 = load i32, i32* %1363
  %1365 = sext i32 %1364 to i64
  %1366 = add nsw i64 %1365, -112
  %1367 = add i64 %1366, %1281
  %1368 = inttoptr i64 %1367 to i8*
  store i8 32, i8* %1368
  %1369 = inttoptr i64 %1282 to i32*
  %1370 = load i32, i32* %1369
  %1371 = add i32 %1370, -1
  %1372 = add i64 %1299, 18
  %1373 = inttoptr i64 %1282 to i32*
  store i32 %1371, i32* %1373
  br label %block_4131d2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4037a0_c_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4037a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = load i64, i64* %18, align 8
  %28 = load i64, i64* %17, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %18, align 8, !tbaa !1240
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %28, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %23, align 8
  %35 = add i64 %28, -24
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %22, align 8
  %38 = add i64 %28, -32
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = load i64, i64* %21, align 8
  %41 = add i64 %28, -40
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = load i64, i64* %14, align 8
  %44 = add i64 %28, -48
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  %46 = add i64 %28, -312
  store i64 %46, i64* %17, align 8, !tbaa !1240
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = load i8, i8* %5, align 1
  %54 = add i64 %28, 80
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %19, align 8, !tbaa !1240
  %57 = add i64 %28, 72
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %20, align 8, !tbaa !1240
  %60 = add i64 %28, 64
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %14, align 8, !tbaa !1240
  %63 = add i64 %28, 56
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %23, align 8, !tbaa !1240
  %66 = add i64 %28, 48
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %24, align 8, !tbaa !1240
  %69 = add i64 %28, 40
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %21, align 8, !tbaa !1240
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %72, 40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %22, align 8, !tbaa !1240
  %76 = add i64 %72, 32
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %72, -97
  %80 = inttoptr i64 %79 to i8*
  store i8 %53, i8* %80
  %81 = add i64 %72, 24
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i64 %72, -112
  %85 = inttoptr i64 %84 to i64*
  store i64 %78, i64* %85
  %86 = add i64 %72, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %72, -120
  %90 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %90
  %91 = add i64 %72, -48
  %92 = load i64, i64* %16, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %93
  %94 = inttoptr i64 %79 to i8*
  %95 = load i8, i8* %94
  %96 = add i64 %72, -49
  %97 = inttoptr i64 %96 to i8*
  store i8 %95, i8* %97
  %98 = add i64 %72, -56
  %99 = load i32, i32* %9, align 4
  %100 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %72, -60
  %102 = load i32, i32* %7, align 4
  %103 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %103
  %104 = add i64 %72, -64
  %105 = load i32, i32* %11, align 4
  %106 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %72, -68
  %108 = load i32, i32* %13, align 4
  %109 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %109
  %110 = add i64 %72, -80
  %111 = bitcast [32 x %union.VectorReg]* %25 to double*
  %112 = load double, double* %111, align 1
  %113 = inttoptr i64 %110 to double*
  store double %112, double* %113
  %114 = add i64 %72, -88
  %115 = bitcast %union.VectorReg* %26 to double*
  %116 = load double, double* %115, align 1
  %117 = inttoptr i64 %114 to double*
  store double %116, double* %117
  %118 = inttoptr i64 %91 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %72, -128
  %121 = inttoptr i64 %120 to i64*
  store i64 %119, i64* %121
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %72, -132
  %125 = inttoptr i64 %124 to i32*
  store i32 %83, i32* %125
  %126 = add i64 %72, -144
  %127 = load i64, i64* %20, align 8
  %128 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %128
  %129 = add i64 %72, -152
  %130 = load i64, i64* %14, align 8
  %131 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %131
  %132 = add i64 %72, -160
  %133 = load i64, i64* %23, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %134
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, -168
  %137 = load i64, i64* %24, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %138
  %139 = add i64 %135, -176
  %140 = load i64, i64* %21, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %141
  %142 = add i64 %135, -184
  %143 = load i64, i64* %22, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %144
  %145 = add i64 %135, -192
  %146 = load i64, i64* %19, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %147
  %148 = add i64 %1, 196
  %149 = load i64, i64* %17, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %158 = load i64, i64* %154, align 8, !alias.scope !1709, !noalias !1712
  %159 = load i64, i64* %153, align 8, !alias.scope !1709, !noalias !1712
  %160 = load i64, i64* %156, align 8, !alias.scope !1709, !noalias !1712
  %161 = load i64, i64* %157, align 8, !alias.scope !1709, !noalias !1712
  %162 = inttoptr i64 %149 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %149, 8
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %149, 16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %149, 24
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %149, 32
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %149, 40
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %149, 48
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %149, 56
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %149, 64
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %149, 72
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %150 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %3, align 8, !alias.scope !1709, !noalias !1712
  store i64 %149, i64* %17, align 8, !alias.scope !1709, !noalias !1712
  %193 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 16), i64 %123, i64 %158, i64 %159, i64 %160, i64 %161, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184, i64 %187, i64 %190), !noalias !1709
  %194 = load i64, i64* %3, align 8
  %195 = load i64, i64* %18, align 8
  %196 = add i64 %195, -49
  %197 = inttoptr i64 %196 to i8*
  %198 = load i8, i8* %197
  %199 = sext i8 %198 to i64
  %200 = and i64 %199, 4294967295
  %201 = add i64 %195, -196
  %202 = trunc i64 %193 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  %204 = add i64 %194, 27
  %205 = load i64, i64* %17, align 8, !tbaa !1240
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207
  %208 = load i64, i64* %154, align 8, !alias.scope !1714, !noalias !1717
  %209 = load i64, i64* %153, align 8, !alias.scope !1714, !noalias !1717
  %210 = load i64, i64* %156, align 8, !alias.scope !1714, !noalias !1717
  %211 = load i64, i64* %157, align 8, !alias.scope !1714, !noalias !1717
  %212 = inttoptr i64 %205 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %205, 8
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %205, 16
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %205, 24
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %205, 32
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %205, 40
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %205, 48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %205, 56
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %205, 64
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %205, 72
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = inttoptr i64 %206 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %3, align 8, !alias.scope !1714, !noalias !1717
  store i64 %205, i64* %17, align 8, !alias.scope !1714, !noalias !1717
  %243 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 43), i64 %200, i64 %208, i64 %209, i64 %210, i64 %211, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237, i64 %240), !noalias !1714
  %244 = load i64, i64* %18, align 8
  %245 = add i64 %244, -64
  %246 = load i64, i64* %3, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247
  %249 = icmp eq i32 %248, 0
  %250 = add i64 %244, -200
  %251 = trunc i64 %243 to i32
  %252 = inttoptr i64 %250 to i32*
  store i32 %251, i32* %252
  %253 = select i1 %249, i64 16, i64 79
  %254 = add i64 %246, %253
  br i1 %249, label %block_40388f, label %block_4038ce

block_40388f:                                     ; preds = %block_4037a0
  %255 = add i64 %244, -56
  %256 = inttoptr i64 %255 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = add i64 %244, -96
  %260 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %260
  %261 = add i64 %244, -60
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i64 31, i64 18
  %266 = add i64 %254, %265
  br i1 %264, label %block_4038ae, label %block_4038a1

block_4038ce:                                     ; preds = %block_4037a0
  %267 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %268 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %269 = add i64 %244, -56
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  %272 = zext i32 %271 to i64
  %273 = add i64 %244, -60
  %274 = inttoptr i64 %273 to i32*
  %275 = load i32, i32* %274
  %276 = zext i32 %275 to i64
  store i64 %276, i64* %267, align 8, !tbaa !1240
  %277 = inttoptr i64 %245 to i32*
  %278 = load i32, i32* %277
  %279 = zext i32 %278 to i64
  store i64 %279, i64* %268, align 8, !tbaa !1240
  %280 = add i64 %254, 26
  %281 = load i64, i64* %17, align 8, !tbaa !1240
  %282 = add i64 %281, -8
  %283 = inttoptr i64 %282 to i64*
  store i64 %280, i64* %283
  %284 = load i64, i64* %156, align 8, !alias.scope !1719, !noalias !1722
  %285 = load i64, i64* %157, align 8, !alias.scope !1719, !noalias !1722
  %286 = inttoptr i64 %281 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %281, 8
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %281, 16
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %281, 24
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %281, 32
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %281, 40
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %281, 48
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %281, 56
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %281, 64
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %281, 72
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = inttoptr i64 %282 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %3, align 8, !alias.scope !1719, !noalias !1722
  store i64 %281, i64* %17, align 8, !alias.scope !1719, !noalias !1722
  %317 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 127), i64 %272, i64 %276, i64 %279, i64 %284, i64 %285, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314), !noalias !1719
  %318 = load i64, i64* %18, align 8
  %319 = add i64 %318, -208
  %320 = trunc i64 %317 to i32
  %321 = load i64, i64* %3, align 8
  %322 = add i64 %321, 6
  %323 = inttoptr i64 %319 to i32*
  store i32 %320, i32* %323
  br label %block_4038ee

block_40398b:                                     ; preds = %block_403981
  %324 = add i64 %472, 17
  %325 = load i64, i64* %17, align 8, !tbaa !1240
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %324, i64* %327
  %328 = load i64, i64* %155, align 8, !alias.scope !1724, !noalias !1727
  %329 = load i64, i64* %154, align 8, !alias.scope !1724, !noalias !1727
  %330 = load i64, i64* %153, align 8, !alias.scope !1724, !noalias !1727
  %331 = load i64, i64* %156, align 8, !alias.scope !1724, !noalias !1727
  %332 = load i64, i64* %157, align 8, !alias.scope !1724, !noalias !1727
  %333 = inttoptr i64 %325 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %325, 8
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %325, 16
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %325, 24
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %325, 32
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %325, 40
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %325, 48
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %325, 56
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %325, 64
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %325, 72
  %360 = inttoptr i64 %359 to i64*
  %361 = load i64, i64* %360
  %362 = inttoptr i64 %326 to i64*
  %363 = load i64, i64* %362
  store i64 %363, i64* %3, align 8, !alias.scope !1724, !noalias !1727
  store i64 %325, i64* %17, align 8, !alias.scope !1724, !noalias !1727
  %364 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 356), i64 %328, i64 %329, i64 %330, i64 %331, i64 %332, i64 %334, i64 %337, i64 %340, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355, i64 %358, i64 %361), !noalias !1724
  %365 = load i64, i64* %18, align 8
  %366 = add i64 %365, -232
  %367 = trunc i64 %364 to i32
  %368 = load i64, i64* %3, align 8
  %369 = inttoptr i64 %366 to i32*
  store i32 %367, i32* %369
  %370 = add i64 %368, 34
  br label %block_4039c3

block_4038ae:                                     ; preds = %block_4038a1, %block_40388f
  %371 = phi i64 [ %266, %block_40388f ], [ %1493, %block_4038a1 ]
  %372 = phi %struct.Memory* [ %2, %block_40388f ], [ %2, %block_4038a1 ]
  %373 = inttoptr i64 %259 to i64*
  %374 = load i64, i64* %373
  %375 = add i64 %371, 21
  %376 = load i64, i64* %17, align 8, !tbaa !1240
  %377 = add i64 %376, -8
  %378 = inttoptr i64 %377 to i64*
  store i64 %375, i64* %378
  %379 = load i64, i64* %154, align 8, !alias.scope !1729, !noalias !1732
  %380 = load i64, i64* %153, align 8, !alias.scope !1729, !noalias !1732
  %381 = load i64, i64* %156, align 8, !alias.scope !1729, !noalias !1732
  %382 = load i64, i64* %157, align 8, !alias.scope !1729, !noalias !1732
  %383 = inttoptr i64 %376 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %376, 8
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %376, 16
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %376, 24
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %376, 32
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %376, 40
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %376, 48
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %376, 56
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %376, 64
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %376, 72
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = inttoptr i64 %377 to i64*
  %413 = load i64, i64* %412
  store i64 %413, i64* %3, align 8, !alias.scope !1729, !noalias !1732
  store i64 %376, i64* %17, align 8, !alias.scope !1729, !noalias !1732
  %414 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 89), i64 %374, i64 %379, i64 %380, i64 %381, i64 %382, i64 %384, i64 %387, i64 %390, i64 %393, i64 %396, i64 %399, i64 %402, i64 %405, i64 %408, i64 %411), !noalias !1729
  %415 = load i64, i64* %18, align 8
  %416 = add i64 %415, -204
  %417 = trunc i64 %414 to i32
  %418 = load i64, i64* %3, align 8
  %419 = inttoptr i64 %416 to i32*
  store i32 %417, i32* %419
  %420 = add i64 %418, 43
  br label %block_4038ee

block_4039a7:                                     ; preds = %block_403981
  %421 = add i64 %472, 17
  %422 = load i64, i64* %17, align 8, !tbaa !1240
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %421, i64* %424
  %425 = load i64, i64* %155, align 8, !alias.scope !1734, !noalias !1737
  %426 = load i64, i64* %154, align 8, !alias.scope !1734, !noalias !1737
  %427 = load i64, i64* %153, align 8, !alias.scope !1734, !noalias !1737
  %428 = load i64, i64* %156, align 8, !alias.scope !1734, !noalias !1737
  %429 = load i64, i64* %157, align 8, !alias.scope !1734, !noalias !1737
  %430 = inttoptr i64 %422 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %422, 8
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %422, 16
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %422, 24
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %422, 32
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %422, 40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %422, 48
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %422, 56
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %422, 64
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %422, 72
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %423 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !1734, !noalias !1737
  store i64 %422, i64* %17, align 8, !alias.scope !1734, !noalias !1737
  %461 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 401), i64 %425, i64 %426, i64 %427, i64 %428, i64 %429, i64 %431, i64 %434, i64 %437, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458), !noalias !1734
  %462 = load i64, i64* %18, align 8
  %463 = add i64 %462, -236
  %464 = trunc i64 %461 to i32
  %465 = load i64, i64* %3, align 8
  %466 = add i64 %465, 6
  %467 = inttoptr i64 %463 to i32*
  store i32 %464, i32* %467
  br label %block_4039c3

block_403981:                                     ; preds = %block_4038ee
  %468 = inttoptr i64 %669 to i32*
  %469 = load i32, i32* %468
  %470 = icmp eq i32 %469, 0
  %471 = select i1 %470, i64 38, i64 10
  %472 = add i64 %680, %471
  br i1 %470, label %block_4039a7, label %block_40398b

block_4038ee:                                     ; preds = %block_4038ae, %block_4038ce
  %473 = phi i64 [ %318, %block_4038ce ], [ %415, %block_4038ae ]
  %474 = phi i64 [ %322, %block_4038ce ], [ %420, %block_4038ae ]
  %475 = phi %struct.Memory* [ %2, %block_4038ce ], [ %372, %block_4038ae ]
  %476 = add i64 %473, -68
  %477 = inttoptr i64 %476 to i32*
  %478 = load i32, i32* %477
  %479 = zext i32 %478 to i64
  store i64 %479, i64* %15, align 8, !tbaa !1240
  %480 = add i64 %474, 20
  %481 = load i64, i64* %17, align 8, !tbaa !1240
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %480, i64* %483
  %484 = load i64, i64* %154, align 8, !alias.scope !1739, !noalias !1742
  %485 = load i64, i64* %153, align 8, !alias.scope !1739, !noalias !1742
  %486 = load i64, i64* %156, align 8, !alias.scope !1739, !noalias !1742
  %487 = load i64, i64* %157, align 8, !alias.scope !1739, !noalias !1742
  %488 = inttoptr i64 %481 to i64*
  %489 = load i64, i64* %488
  %490 = add i64 %481, 8
  %491 = inttoptr i64 %490 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %481, 16
  %494 = inttoptr i64 %493 to i64*
  %495 = load i64, i64* %494
  %496 = add i64 %481, 24
  %497 = inttoptr i64 %496 to i64*
  %498 = load i64, i64* %497
  %499 = add i64 %481, 32
  %500 = inttoptr i64 %499 to i64*
  %501 = load i64, i64* %500
  %502 = add i64 %481, 40
  %503 = inttoptr i64 %502 to i64*
  %504 = load i64, i64* %503
  %505 = add i64 %481, 48
  %506 = inttoptr i64 %505 to i64*
  %507 = load i64, i64* %506
  %508 = add i64 %481, 56
  %509 = inttoptr i64 %508 to i64*
  %510 = load i64, i64* %509
  %511 = add i64 %481, 64
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %481, 72
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  %517 = inttoptr i64 %482 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %3, align 8, !alias.scope !1739, !noalias !1742
  store i64 %481, i64* %17, align 8, !alias.scope !1739, !noalias !1742
  %519 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 171), i64 %479, i64 %484, i64 %485, i64 %486, i64 %487, i64 %489, i64 %492, i64 %495, i64 %498, i64 %501, i64 %504, i64 %507, i64 %510, i64 %513, i64 %516), !noalias !1739
  %520 = load i64, i64* %3, align 8
  %521 = load i64, i64* %18, align 8
  %522 = add i64 %521, -80
  %523 = inttoptr i64 %522 to double*
  %524 = load double, double* %523
  store double %524, double* %111, align 1, !tbaa !1264
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %526 = bitcast i64* %525 to double*
  store double 0.000000e+00, double* %526, align 1, !tbaa !1264
  %527 = add i64 %521, -212
  %528 = trunc i64 %519 to i32
  %529 = inttoptr i64 %527 to i32*
  store i32 %528, i32* %529
  %530 = add i64 %520, 28
  %531 = load i64, i64* %17, align 8, !tbaa !1240
  %532 = add i64 %531, -8
  %533 = inttoptr i64 %532 to i64*
  store i64 %530, i64* %533
  %534 = load i64, i64* %155, align 8, !alias.scope !1744, !noalias !1747
  %535 = load i64, i64* %154, align 8, !alias.scope !1744, !noalias !1747
  %536 = load i64, i64* %153, align 8, !alias.scope !1744, !noalias !1747
  %537 = load i64, i64* %156, align 8, !alias.scope !1744, !noalias !1747
  %538 = load i64, i64* %157, align 8, !alias.scope !1744, !noalias !1747
  %539 = inttoptr i64 %531 to i64*
  %540 = load i64, i64* %539
  %541 = add i64 %531, 8
  %542 = inttoptr i64 %541 to i64*
  %543 = load i64, i64* %542
  %544 = add i64 %531, 16
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  %547 = add i64 %531, 24
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  %550 = add i64 %531, 32
  %551 = inttoptr i64 %550 to i64*
  %552 = load i64, i64* %551
  %553 = add i64 %531, 40
  %554 = inttoptr i64 %553 to i64*
  %555 = load i64, i64* %554
  %556 = add i64 %531, 48
  %557 = inttoptr i64 %556 to i64*
  %558 = load i64, i64* %557
  %559 = add i64 %531, 56
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560
  %562 = add i64 %531, 64
  %563 = inttoptr i64 %562 to i64*
  %564 = load i64, i64* %563
  %565 = add i64 %531, 72
  %566 = inttoptr i64 %565 to i64*
  %567 = load i64, i64* %566
  %568 = inttoptr i64 %532 to i64*
  %569 = load i64, i64* %568
  store i64 %569, i64* %3, align 8, !alias.scope !1744, !noalias !1747
  store i64 %531, i64* %17, align 8, !alias.scope !1744, !noalias !1747
  %570 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 208), i64 %534, i64 %535, i64 %536, i64 %537, i64 %538, i64 %540, i64 %543, i64 %546, i64 %549, i64 %552, i64 %555, i64 %558, i64 %561, i64 %564, i64 %567), !noalias !1744
  %571 = load i64, i64* %3, align 8
  %572 = load i64, i64* %18, align 8
  %573 = add i64 %572, -88
  %574 = inttoptr i64 %573 to double*
  %575 = load double, double* %574
  store double %575, double* %111, align 1, !tbaa !1264
  store double 0.000000e+00, double* %526, align 1, !tbaa !1264
  %576 = add i64 %572, -216
  %577 = trunc i64 %570 to i32
  %578 = inttoptr i64 %576 to i32*
  store i32 %577, i32* %578
  %579 = add i64 %571, 28
  %580 = load i64, i64* %17, align 8, !tbaa !1240
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %579, i64* %582
  %583 = load i64, i64* %155, align 8, !alias.scope !1749, !noalias !1752
  %584 = load i64, i64* %154, align 8, !alias.scope !1749, !noalias !1752
  %585 = load i64, i64* %153, align 8, !alias.scope !1749, !noalias !1752
  %586 = load i64, i64* %156, align 8, !alias.scope !1749, !noalias !1752
  %587 = load i64, i64* %157, align 8, !alias.scope !1749, !noalias !1752
  %588 = inttoptr i64 %580 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %580, 8
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %580, 16
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %580, 24
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %580, 32
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %580, 40
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = add i64 %580, 48
  %606 = inttoptr i64 %605 to i64*
  %607 = load i64, i64* %606
  %608 = add i64 %580, 56
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %580, 64
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %580, 72
  %615 = inttoptr i64 %614 to i64*
  %616 = load i64, i64* %615
  %617 = inttoptr i64 %581 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %3, align 8, !alias.scope !1749, !noalias !1752
  store i64 %580, i64* %17, align 8, !alias.scope !1749, !noalias !1752
  %619 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 247), i64 %583, i64 %584, i64 %585, i64 %586, i64 %587, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601, i64 %604, i64 %607, i64 %610, i64 %613, i64 %616), !noalias !1749
  %620 = load i64, i64* %3, align 8
  %621 = load i64, i64* %18, align 8
  %622 = add i64 %621, 16
  %623 = inttoptr i64 %622 to i64*
  %624 = load i64, i64* %623
  store i64 %624, i64* %15, align 8, !tbaa !1240
  %625 = add i64 %621, -220
  %626 = trunc i64 %619 to i32
  %627 = inttoptr i64 %625 to i32*
  store i32 %626, i32* %627
  %628 = add i64 %620, 27
  %629 = load i64, i64* %17, align 8, !tbaa !1240
  %630 = add i64 %629, -8
  %631 = inttoptr i64 %630 to i64*
  store i64 %628, i64* %631
  %632 = load i64, i64* %154, align 8, !alias.scope !1754, !noalias !1757
  %633 = load i64, i64* %153, align 8, !alias.scope !1754, !noalias !1757
  %634 = load i64, i64* %156, align 8, !alias.scope !1754, !noalias !1757
  %635 = load i64, i64* %157, align 8, !alias.scope !1754, !noalias !1757
  %636 = inttoptr i64 %629 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %629, 8
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %629, 16
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %629, 24
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %629, 32
  %648 = inttoptr i64 %647 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %629, 40
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = add i64 %629, 48
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %629, 56
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %629, 64
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %629, 72
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = inttoptr i64 %630 to i64*
  %666 = load i64, i64* %665
  store i64 %666, i64* %3, align 8, !alias.scope !1754, !noalias !1757
  store i64 %629, i64* %17, align 8, !alias.scope !1754, !noalias !1757
  %667 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 286), i64 %624, i64 %632, i64 %633, i64 %634, i64 %635, i64 %637, i64 %640, i64 %643, i64 %646, i64 %649, i64 %652, i64 %655, i64 %658, i64 %661, i64 %664), !noalias !1754
  %668 = load i64, i64* %18, align 8
  %669 = add i64 %668, 24
  %670 = load i64, i64* %3, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671
  %673 = lshr i32 %672, 31
  %674 = trunc i32 %673 to i8
  %675 = add i64 %668, -224
  %676 = trunc i64 %667 to i32
  %677 = inttoptr i64 %675 to i32*
  store i32 %676, i32* %677
  %678 = icmp ne i8 %674, 0
  %679 = select i1 %678, i64 16, i64 44
  %680 = add i64 %670, %679
  br i1 %678, label %block_403965, label %block_403981

block_403965:                                     ; preds = %block_4038ee
  %681 = add i64 %680, 17
  %682 = load i64, i64* %17, align 8, !tbaa !1240
  %683 = add i64 %682, -8
  %684 = inttoptr i64 %683 to i64*
  store i64 %681, i64* %684
  %685 = load i64, i64* %155, align 8, !alias.scope !1759, !noalias !1762
  %686 = load i64, i64* %154, align 8, !alias.scope !1759, !noalias !1762
  %687 = load i64, i64* %153, align 8, !alias.scope !1759, !noalias !1762
  %688 = load i64, i64* %156, align 8, !alias.scope !1759, !noalias !1762
  %689 = load i64, i64* %157, align 8, !alias.scope !1759, !noalias !1762
  %690 = inttoptr i64 %682 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %682, 8
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %682, 16
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %682, 24
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %682, 32
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %682, 40
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %682, 48
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %682, 56
  %711 = inttoptr i64 %710 to i64*
  %712 = load i64, i64* %711
  %713 = add i64 %682, 64
  %714 = inttoptr i64 %713 to i64*
  %715 = load i64, i64* %714
  %716 = add i64 %682, 72
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = inttoptr i64 %683 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %3, align 8, !alias.scope !1759, !noalias !1762
  store i64 %682, i64* %17, align 8, !alias.scope !1759, !noalias !1762
  %721 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 311), i64 %685, i64 %686, i64 %687, i64 %688, i64 %689, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709, i64 %712, i64 %715, i64 %718), !noalias !1759
  %722 = load i64, i64* %18, align 8
  %723 = add i64 %722, -228
  %724 = trunc i64 %721 to i32
  %725 = load i64, i64* %3, align 8
  %726 = add i64 %725, 6
  %727 = inttoptr i64 %723 to i32*
  store i32 %724, i32* %727
  br label %block_4039c3

block_4039c3:                                     ; preds = %block_403965, %block_4039a7, %block_40398b
  %728 = phi i64 [ %722, %block_403965 ], [ %462, %block_4039a7 ], [ %365, %block_40398b ]
  %729 = phi i64 [ %726, %block_403965 ], [ %466, %block_4039a7 ], [ %370, %block_40398b ]
  %730 = phi i64 [ 71, %block_403965 ], [ 5, %block_4039a7 ], [ 5, %block_40398b ]
  %731 = phi %struct.Memory* [ %475, %block_403965 ], [ %475, %block_4039a7 ], [ %475, %block_40398b ]
  %732 = add i64 %729, %730
  %733 = add i64 %728, 32
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %732, 21
  %737 = load i64, i64* %17, align 8, !tbaa !1240
  %738 = add i64 %737, -8
  %739 = inttoptr i64 %738 to i64*
  store i64 %736, i64* %739
  %740 = load i64, i64* %154, align 8, !alias.scope !1764, !noalias !1767
  %741 = load i64, i64* %153, align 8, !alias.scope !1764, !noalias !1767
  %742 = load i64, i64* %156, align 8, !alias.scope !1764, !noalias !1767
  %743 = load i64, i64* %157, align 8, !alias.scope !1764, !noalias !1767
  %744 = inttoptr i64 %737 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %737, 8
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %737, 16
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = add i64 %737, 24
  %753 = inttoptr i64 %752 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %737, 32
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  %758 = add i64 %737, 40
  %759 = inttoptr i64 %758 to i64*
  %760 = load i64, i64* %759
  %761 = add i64 %737, 48
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  %764 = add i64 %737, 56
  %765 = inttoptr i64 %764 to i64*
  %766 = load i64, i64* %765
  %767 = add i64 %737, 64
  %768 = inttoptr i64 %767 to i64*
  %769 = load i64, i64* %768
  %770 = add i64 %737, 72
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = inttoptr i64 %738 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %3, align 8, !alias.scope !1764, !noalias !1767
  store i64 %737, i64* %17, align 8, !alias.scope !1764, !noalias !1767
  %775 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 446), i64 %735, i64 %740, i64 %741, i64 %742, i64 %743, i64 %745, i64 %748, i64 %751, i64 %754, i64 %757, i64 %760, i64 %763, i64 %766, i64 %769, i64 %772), !noalias !1764
  %776 = load i64, i64* %3, align 8
  %777 = load i64, i64* %18, align 8
  %778 = add i64 %777, 40
  %779 = inttoptr i64 %778 to i64*
  %780 = load i64, i64* %779
  store i64 %780, i64* %15, align 8, !tbaa !1240
  %781 = add i64 %777, -240
  %782 = trunc i64 %775 to i32
  %783 = inttoptr i64 %781 to i32*
  store i32 %782, i32* %783
  %784 = add i64 %776, 27
  %785 = load i64, i64* %17, align 8, !tbaa !1240
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %784, i64* %787
  %788 = load i64, i64* %154, align 8, !alias.scope !1769, !noalias !1772
  %789 = load i64, i64* %153, align 8, !alias.scope !1769, !noalias !1772
  %790 = load i64, i64* %156, align 8, !alias.scope !1769, !noalias !1772
  %791 = load i64, i64* %157, align 8, !alias.scope !1769, !noalias !1772
  %792 = inttoptr i64 %785 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %785, 8
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = add i64 %785, 16
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = add i64 %785, 24
  %801 = inttoptr i64 %800 to i64*
  %802 = load i64, i64* %801
  %803 = add i64 %785, 32
  %804 = inttoptr i64 %803 to i64*
  %805 = load i64, i64* %804
  %806 = add i64 %785, 40
  %807 = inttoptr i64 %806 to i64*
  %808 = load i64, i64* %807
  %809 = add i64 %785, 48
  %810 = inttoptr i64 %809 to i64*
  %811 = load i64, i64* %810
  %812 = add i64 %785, 56
  %813 = inttoptr i64 %812 to i64*
  %814 = load i64, i64* %813
  %815 = add i64 %785, 64
  %816 = inttoptr i64 %815 to i64*
  %817 = load i64, i64* %816
  %818 = add i64 %785, 72
  %819 = inttoptr i64 %818 to i64*
  %820 = load i64, i64* %819
  %821 = inttoptr i64 %786 to i64*
  %822 = load i64, i64* %821
  store i64 %822, i64* %3, align 8, !alias.scope !1769, !noalias !1772
  store i64 %785, i64* %17, align 8, !alias.scope !1769, !noalias !1772
  %823 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 483), i64 %780, i64 %788, i64 %789, i64 %790, i64 %791, i64 %793, i64 %796, i64 %799, i64 %802, i64 %805, i64 %808, i64 %811, i64 %814, i64 %817, i64 %820), !noalias !1769
  %824 = load i64, i64* %3, align 8
  %825 = load i64, i64* %18, align 8
  %826 = add i64 %825, -244
  %827 = trunc i64 %823 to i32
  %828 = inttoptr i64 %826 to i32*
  store i32 %827, i32* %828
  %829 = add i64 %824, 23
  %830 = load i64, i64* %17, align 8, !tbaa !1240
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %829, i64* %832
  %833 = load i64, i64* %155, align 8, !alias.scope !1774, !noalias !1777
  %834 = load i64, i64* %154, align 8, !alias.scope !1774, !noalias !1777
  %835 = load i64, i64* %153, align 8, !alias.scope !1774, !noalias !1777
  %836 = load i64, i64* %156, align 8, !alias.scope !1774, !noalias !1777
  %837 = load i64, i64* %157, align 8, !alias.scope !1774, !noalias !1777
  %838 = inttoptr i64 %830 to i64*
  %839 = load i64, i64* %838
  %840 = add i64 %830, 8
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  %843 = add i64 %830, 16
  %844 = inttoptr i64 %843 to i64*
  %845 = load i64, i64* %844
  %846 = add i64 %830, 24
  %847 = inttoptr i64 %846 to i64*
  %848 = load i64, i64* %847
  %849 = add i64 %830, 32
  %850 = inttoptr i64 %849 to i64*
  %851 = load i64, i64* %850
  %852 = add i64 %830, 40
  %853 = inttoptr i64 %852 to i64*
  %854 = load i64, i64* %853
  %855 = add i64 %830, 48
  %856 = inttoptr i64 %855 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %830, 56
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %830, 64
  %862 = inttoptr i64 %861 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %830, 72
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = inttoptr i64 %831 to i64*
  %868 = load i64, i64* %867
  store i64 %868, i64* %3, align 8, !alias.scope !1774, !noalias !1777
  store i64 %830, i64* %17, align 8, !alias.scope !1774, !noalias !1777
  %869 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 520), i64 %833, i64 %834, i64 %835, i64 %836, i64 %837, i64 %839, i64 %842, i64 %845, i64 %848, i64 %851, i64 %854, i64 %857, i64 %860, i64 %863, i64 %866), !noalias !1774
  %870 = load i64, i64* %3, align 8
  %871 = load i64, i64* %18, align 8
  %872 = add i64 %871, 48
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %871, -248
  %876 = trunc i64 %869 to i32
  %877 = inttoptr i64 %875 to i32*
  store i32 %876, i32* %877
  %878 = add i64 %870, 27
  %879 = load i64, i64* %17, align 8, !tbaa !1240
  %880 = add i64 %879, -8
  %881 = inttoptr i64 %880 to i64*
  store i64 %878, i64* %881
  %882 = load i64, i64* %154, align 8, !alias.scope !1779, !noalias !1782
  %883 = load i64, i64* %153, align 8, !alias.scope !1779, !noalias !1782
  %884 = load i64, i64* %156, align 8, !alias.scope !1779, !noalias !1782
  %885 = load i64, i64* %157, align 8, !alias.scope !1779, !noalias !1782
  %886 = inttoptr i64 %879 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %879, 8
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %879, 16
  %892 = inttoptr i64 %891 to i64*
  %893 = load i64, i64* %892
  %894 = add i64 %879, 24
  %895 = inttoptr i64 %894 to i64*
  %896 = load i64, i64* %895
  %897 = add i64 %879, 32
  %898 = inttoptr i64 %897 to i64*
  %899 = load i64, i64* %898
  %900 = add i64 %879, 40
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = add i64 %879, 48
  %904 = inttoptr i64 %903 to i64*
  %905 = load i64, i64* %904
  %906 = add i64 %879, 56
  %907 = inttoptr i64 %906 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %879, 64
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %879, 72
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = inttoptr i64 %880 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %3, align 8, !alias.scope !1779, !noalias !1782
  store i64 %879, i64* %17, align 8, !alias.scope !1779, !noalias !1782
  %917 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2020), i64 %874, i64 %882, i64 %883, i64 %884, i64 %885, i64 %887, i64 %890, i64 %893, i64 %896, i64 %899, i64 %902, i64 %905, i64 %908, i64 %911, i64 %914), !noalias !1779
  %918 = load i64, i64* %3, align 8
  %919 = load i64, i64* %18, align 8
  %920 = add i64 %919, 56
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %919, -252
  %924 = trunc i64 %917 to i32
  %925 = inttoptr i64 %923 to i32*
  store i32 %924, i32* %925
  %926 = add i64 %918, 27
  %927 = load i64, i64* %17, align 8, !tbaa !1240
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  store i64 %926, i64* %929
  %930 = load i64, i64* %154, align 8, !alias.scope !1784, !noalias !1787
  %931 = load i64, i64* %153, align 8, !alias.scope !1784, !noalias !1787
  %932 = load i64, i64* %156, align 8, !alias.scope !1784, !noalias !1787
  %933 = load i64, i64* %157, align 8, !alias.scope !1784, !noalias !1787
  %934 = inttoptr i64 %927 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %927, 8
  %937 = inttoptr i64 %936 to i64*
  %938 = load i64, i64* %937
  %939 = add i64 %927, 16
  %940 = inttoptr i64 %939 to i64*
  %941 = load i64, i64* %940
  %942 = add i64 %927, 24
  %943 = inttoptr i64 %942 to i64*
  %944 = load i64, i64* %943
  %945 = add i64 %927, 32
  %946 = inttoptr i64 %945 to i64*
  %947 = load i64, i64* %946
  %948 = add i64 %927, 40
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  %951 = add i64 %927, 48
  %952 = inttoptr i64 %951 to i64*
  %953 = load i64, i64* %952
  %954 = add i64 %927, 56
  %955 = inttoptr i64 %954 to i64*
  %956 = load i64, i64* %955
  %957 = add i64 %927, 64
  %958 = inttoptr i64 %957 to i64*
  %959 = load i64, i64* %958
  %960 = add i64 %927, 72
  %961 = inttoptr i64 %960 to i64*
  %962 = load i64, i64* %961
  %963 = inttoptr i64 %928 to i64*
  %964 = load i64, i64* %963
  store i64 %964, i64* %3, align 8, !alias.scope !1784, !noalias !1787
  store i64 %927, i64* %17, align 8, !alias.scope !1784, !noalias !1787
  %965 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 540), i64 %922, i64 %930, i64 %931, i64 %932, i64 %933, i64 %935, i64 %938, i64 %941, i64 %944, i64 %947, i64 %950, i64 %953, i64 %956, i64 %959, i64 %962), !noalias !1784
  %966 = load i64, i64* %3, align 8
  %967 = load i64, i64* %18, align 8
  %968 = add i64 %967, 64
  %969 = inttoptr i64 %968 to i64*
  %970 = load i64, i64* %969
  %971 = add i64 %967, -256
  %972 = trunc i64 %965 to i32
  %973 = inttoptr i64 %971 to i32*
  store i32 %972, i32* %973
  %974 = add i64 %966, 27
  %975 = load i64, i64* %17, align 8, !tbaa !1240
  %976 = add i64 %975, -8
  %977 = inttoptr i64 %976 to i64*
  store i64 %974, i64* %977
  %978 = load i64, i64* %154, align 8, !alias.scope !1789, !noalias !1792
  %979 = load i64, i64* %153, align 8, !alias.scope !1789, !noalias !1792
  %980 = load i64, i64* %156, align 8, !alias.scope !1789, !noalias !1792
  %981 = load i64, i64* %157, align 8, !alias.scope !1789, !noalias !1792
  %982 = inttoptr i64 %975 to i64*
  %983 = load i64, i64* %982
  %984 = add i64 %975, 8
  %985 = inttoptr i64 %984 to i64*
  %986 = load i64, i64* %985
  %987 = add i64 %975, 16
  %988 = inttoptr i64 %987 to i64*
  %989 = load i64, i64* %988
  %990 = add i64 %975, 24
  %991 = inttoptr i64 %990 to i64*
  %992 = load i64, i64* %991
  %993 = add i64 %975, 32
  %994 = inttoptr i64 %993 to i64*
  %995 = load i64, i64* %994
  %996 = add i64 %975, 40
  %997 = inttoptr i64 %996 to i64*
  %998 = load i64, i64* %997
  %999 = add i64 %975, 48
  %1000 = inttoptr i64 %999 to i64*
  %1001 = load i64, i64* %1000
  %1002 = add i64 %975, 56
  %1003 = inttoptr i64 %1002 to i64*
  %1004 = load i64, i64* %1003
  %1005 = add i64 %975, 64
  %1006 = inttoptr i64 %1005 to i64*
  %1007 = load i64, i64* %1006
  %1008 = add i64 %975, 72
  %1009 = inttoptr i64 %1008 to i64*
  %1010 = load i64, i64* %1009
  %1011 = inttoptr i64 %976 to i64*
  %1012 = load i64, i64* %1011
  store i64 %1012, i64* %3, align 8, !alias.scope !1789, !noalias !1792
  store i64 %975, i64* %17, align 8, !alias.scope !1789, !noalias !1792
  %1013 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 563), i64 %970, i64 %978, i64 %979, i64 %980, i64 %981, i64 %983, i64 %986, i64 %989, i64 %992, i64 %995, i64 %998, i64 %1001, i64 %1004, i64 %1007, i64 %1010), !noalias !1789
  %1014 = load i64, i64* %3, align 8
  %1015 = load i64, i64* %18, align 8
  %1016 = add i64 %1015, 72
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = add i64 %1015, -260
  %1020 = trunc i64 %1013 to i32
  %1021 = inttoptr i64 %1019 to i32*
  store i32 %1020, i32* %1021
  %1022 = add i64 %1014, 27
  %1023 = load i64, i64* %17, align 8, !tbaa !1240
  %1024 = add i64 %1023, -8
  %1025 = inttoptr i64 %1024 to i64*
  store i64 %1022, i64* %1025
  %1026 = load i64, i64* %154, align 8, !alias.scope !1794, !noalias !1797
  %1027 = load i64, i64* %153, align 8, !alias.scope !1794, !noalias !1797
  %1028 = load i64, i64* %156, align 8, !alias.scope !1794, !noalias !1797
  %1029 = load i64, i64* %157, align 8, !alias.scope !1794, !noalias !1797
  %1030 = inttoptr i64 %1023 to i64*
  %1031 = load i64, i64* %1030
  %1032 = add i64 %1023, 8
  %1033 = inttoptr i64 %1032 to i64*
  %1034 = load i64, i64* %1033
  %1035 = add i64 %1023, 16
  %1036 = inttoptr i64 %1035 to i64*
  %1037 = load i64, i64* %1036
  %1038 = add i64 %1023, 24
  %1039 = inttoptr i64 %1038 to i64*
  %1040 = load i64, i64* %1039
  %1041 = add i64 %1023, 32
  %1042 = inttoptr i64 %1041 to i64*
  %1043 = load i64, i64* %1042
  %1044 = add i64 %1023, 40
  %1045 = inttoptr i64 %1044 to i64*
  %1046 = load i64, i64* %1045
  %1047 = add i64 %1023, 48
  %1048 = inttoptr i64 %1047 to i64*
  %1049 = load i64, i64* %1048
  %1050 = add i64 %1023, 56
  %1051 = inttoptr i64 %1050 to i64*
  %1052 = load i64, i64* %1051
  %1053 = add i64 %1023, 64
  %1054 = inttoptr i64 %1053 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1023, 72
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  %1059 = inttoptr i64 %1024 to i64*
  %1060 = load i64, i64* %1059
  store i64 %1060, i64* %3, align 8, !alias.scope !1794, !noalias !1797
  store i64 %1023, i64* %17, align 8, !alias.scope !1794, !noalias !1797
  %1061 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 586), i64 %1018, i64 %1026, i64 %1027, i64 %1028, i64 %1029, i64 %1031, i64 %1034, i64 %1037, i64 %1040, i64 %1043, i64 %1046, i64 %1049, i64 %1052, i64 %1055, i64 %1058), !noalias !1794
  %1062 = load i64, i64* %3, align 8
  %1063 = load i64, i64* %18, align 8
  %1064 = add i64 %1063, 80
  %1065 = inttoptr i64 %1064 to i64*
  %1066 = load i64, i64* %1065
  %1067 = add i64 %1063, -264
  %1068 = trunc i64 %1061 to i32
  %1069 = inttoptr i64 %1067 to i32*
  store i32 %1068, i32* %1069
  %1070 = add i64 %1062, 27
  %1071 = load i64, i64* %17, align 8, !tbaa !1240
  %1072 = add i64 %1071, -8
  %1073 = inttoptr i64 %1072 to i64*
  store i64 %1070, i64* %1073
  %1074 = load i64, i64* %154, align 8, !alias.scope !1799, !noalias !1802
  %1075 = load i64, i64* %153, align 8, !alias.scope !1799, !noalias !1802
  %1076 = load i64, i64* %156, align 8, !alias.scope !1799, !noalias !1802
  %1077 = load i64, i64* %157, align 8, !alias.scope !1799, !noalias !1802
  %1078 = inttoptr i64 %1071 to i64*
  %1079 = load i64, i64* %1078
  %1080 = add i64 %1071, 8
  %1081 = inttoptr i64 %1080 to i64*
  %1082 = load i64, i64* %1081
  %1083 = add i64 %1071, 16
  %1084 = inttoptr i64 %1083 to i64*
  %1085 = load i64, i64* %1084
  %1086 = add i64 %1071, 24
  %1087 = inttoptr i64 %1086 to i64*
  %1088 = load i64, i64* %1087
  %1089 = add i64 %1071, 32
  %1090 = inttoptr i64 %1089 to i64*
  %1091 = load i64, i64* %1090
  %1092 = add i64 %1071, 40
  %1093 = inttoptr i64 %1092 to i64*
  %1094 = load i64, i64* %1093
  %1095 = add i64 %1071, 48
  %1096 = inttoptr i64 %1095 to i64*
  %1097 = load i64, i64* %1096
  %1098 = add i64 %1071, 56
  %1099 = inttoptr i64 %1098 to i64*
  %1100 = load i64, i64* %1099
  %1101 = add i64 %1071, 64
  %1102 = inttoptr i64 %1101 to i64*
  %1103 = load i64, i64* %1102
  %1104 = add i64 %1071, 72
  %1105 = inttoptr i64 %1104 to i64*
  %1106 = load i64, i64* %1105
  %1107 = inttoptr i64 %1072 to i64*
  %1108 = load i64, i64* %1107
  store i64 %1108, i64* %3, align 8, !alias.scope !1799, !noalias !1802
  store i64 %1071, i64* %17, align 8, !alias.scope !1799, !noalias !1802
  %1109 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 609), i64 %1066, i64 %1074, i64 %1075, i64 %1076, i64 %1077, i64 %1079, i64 %1082, i64 %1085, i64 %1088, i64 %1091, i64 %1094, i64 %1097, i64 %1100, i64 %1103, i64 %1106), !noalias !1799
  %1110 = load i64, i64* %3, align 8
  %1111 = load i64, i64* %18, align 8
  %1112 = add i64 %1111, 88
  %1113 = inttoptr i64 %1112 to i64*
  %1114 = load i64, i64* %1113
  store i64 %1114, i64* %15, align 8, !tbaa !1240
  %1115 = add i64 %1111, -268
  %1116 = trunc i64 %1109 to i32
  %1117 = inttoptr i64 %1115 to i32*
  store i32 %1116, i32* %1117
  %1118 = add i64 %1110, 27
  %1119 = load i64, i64* %17, align 8, !tbaa !1240
  %1120 = add i64 %1119, -8
  %1121 = inttoptr i64 %1120 to i64*
  store i64 %1118, i64* %1121
  %1122 = load i64, i64* %154, align 8, !alias.scope !1804, !noalias !1807
  %1123 = load i64, i64* %153, align 8, !alias.scope !1804, !noalias !1807
  %1124 = load i64, i64* %156, align 8, !alias.scope !1804, !noalias !1807
  %1125 = load i64, i64* %157, align 8, !alias.scope !1804, !noalias !1807
  %1126 = inttoptr i64 %1119 to i64*
  %1127 = load i64, i64* %1126
  %1128 = add i64 %1119, 8
  %1129 = inttoptr i64 %1128 to i64*
  %1130 = load i64, i64* %1129
  %1131 = add i64 %1119, 16
  %1132 = inttoptr i64 %1131 to i64*
  %1133 = load i64, i64* %1132
  %1134 = add i64 %1119, 24
  %1135 = inttoptr i64 %1134 to i64*
  %1136 = load i64, i64* %1135
  %1137 = add i64 %1119, 32
  %1138 = inttoptr i64 %1137 to i64*
  %1139 = load i64, i64* %1138
  %1140 = add i64 %1119, 40
  %1141 = inttoptr i64 %1140 to i64*
  %1142 = load i64, i64* %1141
  %1143 = add i64 %1119, 48
  %1144 = inttoptr i64 %1143 to i64*
  %1145 = load i64, i64* %1144
  %1146 = add i64 %1119, 56
  %1147 = inttoptr i64 %1146 to i64*
  %1148 = load i64, i64* %1147
  %1149 = add i64 %1119, 64
  %1150 = inttoptr i64 %1149 to i64*
  %1151 = load i64, i64* %1150
  %1152 = add i64 %1119, 72
  %1153 = inttoptr i64 %1152 to i64*
  %1154 = load i64, i64* %1153
  %1155 = inttoptr i64 %1120 to i64*
  %1156 = load i64, i64* %1155
  store i64 %1156, i64* %3, align 8, !alias.scope !1804, !noalias !1807
  store i64 %1119, i64* %17, align 8, !alias.scope !1804, !noalias !1807
  %1157 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 632), i64 %1114, i64 %1122, i64 %1123, i64 %1124, i64 %1125, i64 %1127, i64 %1130, i64 %1133, i64 %1136, i64 %1139, i64 %1142, i64 %1145, i64 %1148, i64 %1151, i64 %1154), !noalias !1804
  %1158 = load i64, i64* %3, align 8
  %1159 = load i64, i64* %18, align 8
  %1160 = add i64 %1159, -272
  %1161 = trunc i64 %1157 to i32
  %1162 = inttoptr i64 %1160 to i32*
  store i32 %1161, i32* %1162
  %1163 = add i64 %1158, 23
  %1164 = load i64, i64* %17, align 8, !tbaa !1240
  %1165 = add i64 %1164, -8
  %1166 = inttoptr i64 %1165 to i64*
  store i64 %1163, i64* %1166
  %1167 = load i64, i64* %155, align 8, !alias.scope !1809, !noalias !1812
  %1168 = load i64, i64* %154, align 8, !alias.scope !1809, !noalias !1812
  %1169 = load i64, i64* %153, align 8, !alias.scope !1809, !noalias !1812
  %1170 = load i64, i64* %156, align 8, !alias.scope !1809, !noalias !1812
  %1171 = load i64, i64* %157, align 8, !alias.scope !1809, !noalias !1812
  %1172 = inttoptr i64 %1164 to i64*
  %1173 = load i64, i64* %1172
  %1174 = add i64 %1164, 8
  %1175 = inttoptr i64 %1174 to i64*
  %1176 = load i64, i64* %1175
  %1177 = add i64 %1164, 16
  %1178 = inttoptr i64 %1177 to i64*
  %1179 = load i64, i64* %1178
  %1180 = add i64 %1164, 24
  %1181 = inttoptr i64 %1180 to i64*
  %1182 = load i64, i64* %1181
  %1183 = add i64 %1164, 32
  %1184 = inttoptr i64 %1183 to i64*
  %1185 = load i64, i64* %1184
  %1186 = add i64 %1164, 40
  %1187 = inttoptr i64 %1186 to i64*
  %1188 = load i64, i64* %1187
  %1189 = add i64 %1164, 48
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1164, 56
  %1193 = inttoptr i64 %1192 to i64*
  %1194 = load i64, i64* %1193
  %1195 = add i64 %1164, 64
  %1196 = inttoptr i64 %1195 to i64*
  %1197 = load i64, i64* %1196
  %1198 = add i64 %1164, 72
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = inttoptr i64 %1165 to i64*
  %1202 = load i64, i64* %1201
  store i64 %1202, i64* %3, align 8, !alias.scope !1809, !noalias !1812
  store i64 %1164, i64* %17, align 8, !alias.scope !1809, !noalias !1812
  %1203 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 655), i64 %1167, i64 %1168, i64 %1169, i64 %1170, i64 %1171, i64 %1173, i64 %1176, i64 %1179, i64 %1182, i64 %1185, i64 %1188, i64 %1191, i64 %1194, i64 %1197, i64 %1200), !noalias !1809
  %1204 = load i64, i64* %3, align 8
  %1205 = load i64, i64* %18, align 8
  %1206 = add i64 %1205, -276
  %1207 = trunc i64 %1203 to i32
  %1208 = inttoptr i64 %1206 to i32*
  store i32 %1207, i32* %1208
  %1209 = add i64 %1204, 23
  %1210 = load i64, i64* %17, align 8, !tbaa !1240
  %1211 = add i64 %1210, -8
  %1212 = inttoptr i64 %1211 to i64*
  store i64 %1209, i64* %1212
  %1213 = load i64, i64* %155, align 8, !alias.scope !1814, !noalias !1817
  %1214 = load i64, i64* %154, align 8, !alias.scope !1814, !noalias !1817
  %1215 = load i64, i64* %153, align 8, !alias.scope !1814, !noalias !1817
  %1216 = load i64, i64* %156, align 8, !alias.scope !1814, !noalias !1817
  %1217 = load i64, i64* %157, align 8, !alias.scope !1814, !noalias !1817
  %1218 = inttoptr i64 %1210 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1210, 8
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = add i64 %1210, 16
  %1224 = inttoptr i64 %1223 to i64*
  %1225 = load i64, i64* %1224
  %1226 = add i64 %1210, 24
  %1227 = inttoptr i64 %1226 to i64*
  %1228 = load i64, i64* %1227
  %1229 = add i64 %1210, 32
  %1230 = inttoptr i64 %1229 to i64*
  %1231 = load i64, i64* %1230
  %1232 = add i64 %1210, 40
  %1233 = inttoptr i64 %1232 to i64*
  %1234 = load i64, i64* %1233
  %1235 = add i64 %1210, 48
  %1236 = inttoptr i64 %1235 to i64*
  %1237 = load i64, i64* %1236
  %1238 = add i64 %1210, 56
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1210, 64
  %1242 = inttoptr i64 %1241 to i64*
  %1243 = load i64, i64* %1242
  %1244 = add i64 %1210, 72
  %1245 = inttoptr i64 %1244 to i64*
  %1246 = load i64, i64* %1245
  %1247 = inttoptr i64 %1211 to i64*
  %1248 = load i64, i64* %1247
  store i64 %1248, i64* %3, align 8, !alias.scope !1814, !noalias !1817
  store i64 %1210, i64* %17, align 8, !alias.scope !1814, !noalias !1817
  %1249 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 696), i64 %1213, i64 %1214, i64 %1215, i64 %1216, i64 %1217, i64 %1219, i64 %1222, i64 %1225, i64 %1228, i64 %1231, i64 %1234, i64 %1237, i64 %1240, i64 %1243, i64 %1246), !noalias !1814
  %1250 = load i64, i64* %3, align 8
  %1251 = load i64, i64* %18, align 8
  %1252 = add i64 %1251, -280
  %1253 = trunc i64 %1249 to i32
  %1254 = inttoptr i64 %1252 to i32*
  store i32 %1253, i32* %1254
  %1255 = add i64 %1250, 23
  %1256 = load i64, i64* %17, align 8, !tbaa !1240
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1255, i64* %1258
  %1259 = load i64, i64* %155, align 8, !alias.scope !1819, !noalias !1822
  %1260 = load i64, i64* %154, align 8, !alias.scope !1819, !noalias !1822
  %1261 = load i64, i64* %153, align 8, !alias.scope !1819, !noalias !1822
  %1262 = load i64, i64* %156, align 8, !alias.scope !1819, !noalias !1822
  %1263 = load i64, i64* %157, align 8, !alias.scope !1819, !noalias !1822
  %1264 = inttoptr i64 %1256 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1256, 8
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1256, 16
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1256, 24
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1256, 32
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = add i64 %1256, 40
  %1279 = inttoptr i64 %1278 to i64*
  %1280 = load i64, i64* %1279
  %1281 = add i64 %1256, 48
  %1282 = inttoptr i64 %1281 to i64*
  %1283 = load i64, i64* %1282
  %1284 = add i64 %1256, 56
  %1285 = inttoptr i64 %1284 to i64*
  %1286 = load i64, i64* %1285
  %1287 = add i64 %1256, 64
  %1288 = inttoptr i64 %1287 to i64*
  %1289 = load i64, i64* %1288
  %1290 = add i64 %1256, 72
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  %1293 = inttoptr i64 %1257 to i64*
  %1294 = load i64, i64* %1293
  store i64 %1294, i64* %3, align 8, !alias.scope !1819, !noalias !1822
  store i64 %1256, i64* %17, align 8, !alias.scope !1819, !noalias !1822
  %1295 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 735), i64 %1259, i64 %1260, i64 %1261, i64 %1262, i64 %1263, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277, i64 %1280, i64 %1283, i64 %1286, i64 %1289, i64 %1292), !noalias !1819
  %1296 = load i64, i64* %3, align 8
  %1297 = load i64, i64* %18, align 8
  %1298 = add i64 %1297, -284
  %1299 = trunc i64 %1295 to i32
  %1300 = inttoptr i64 %1298 to i32*
  store i32 %1299, i32* %1300
  %1301 = add i64 %1296, 23
  %1302 = load i64, i64* %17, align 8, !tbaa !1240
  %1303 = add i64 %1302, -8
  %1304 = inttoptr i64 %1303 to i64*
  store i64 %1301, i64* %1304
  %1305 = load i64, i64* %155, align 8, !alias.scope !1824, !noalias !1827
  %1306 = load i64, i64* %154, align 8, !alias.scope !1824, !noalias !1827
  %1307 = load i64, i64* %153, align 8, !alias.scope !1824, !noalias !1827
  %1308 = load i64, i64* %156, align 8, !alias.scope !1824, !noalias !1827
  %1309 = load i64, i64* %157, align 8, !alias.scope !1824, !noalias !1827
  %1310 = inttoptr i64 %1302 to i64*
  %1311 = load i64, i64* %1310
  %1312 = add i64 %1302, 8
  %1313 = inttoptr i64 %1312 to i64*
  %1314 = load i64, i64* %1313
  %1315 = add i64 %1302, 16
  %1316 = inttoptr i64 %1315 to i64*
  %1317 = load i64, i64* %1316
  %1318 = add i64 %1302, 24
  %1319 = inttoptr i64 %1318 to i64*
  %1320 = load i64, i64* %1319
  %1321 = add i64 %1302, 32
  %1322 = inttoptr i64 %1321 to i64*
  %1323 = load i64, i64* %1322
  %1324 = add i64 %1302, 40
  %1325 = inttoptr i64 %1324 to i64*
  %1326 = load i64, i64* %1325
  %1327 = add i64 %1302, 48
  %1328 = inttoptr i64 %1327 to i64*
  %1329 = load i64, i64* %1328
  %1330 = add i64 %1302, 56
  %1331 = inttoptr i64 %1330 to i64*
  %1332 = load i64, i64* %1331
  %1333 = add i64 %1302, 64
  %1334 = inttoptr i64 %1333 to i64*
  %1335 = load i64, i64* %1334
  %1336 = add i64 %1302, 72
  %1337 = inttoptr i64 %1336 to i64*
  %1338 = load i64, i64* %1337
  %1339 = inttoptr i64 %1303 to i64*
  %1340 = load i64, i64* %1339
  store i64 %1340, i64* %3, align 8, !alias.scope !1824, !noalias !1827
  store i64 %1302, i64* %17, align 8, !alias.scope !1824, !noalias !1827
  %1341 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 769), i64 %1305, i64 %1306, i64 %1307, i64 %1308, i64 %1309, i64 %1311, i64 %1314, i64 %1317, i64 %1320, i64 %1323, i64 %1326, i64 %1329, i64 %1332, i64 %1335, i64 %1338), !noalias !1824
  %1342 = load i64, i64* %3, align 8
  %1343 = load i64, i64* %18, align 8
  %1344 = add i64 %1343, -288
  %1345 = trunc i64 %1341 to i32
  %1346 = inttoptr i64 %1344 to i32*
  store i32 %1345, i32* %1346
  %1347 = add i64 %1342, 23
  %1348 = load i64, i64* %17, align 8, !tbaa !1240
  %1349 = add i64 %1348, -8
  %1350 = inttoptr i64 %1349 to i64*
  store i64 %1347, i64* %1350
  %1351 = load i64, i64* %155, align 8, !alias.scope !1829, !noalias !1832
  %1352 = load i64, i64* %154, align 8, !alias.scope !1829, !noalias !1832
  %1353 = load i64, i64* %153, align 8, !alias.scope !1829, !noalias !1832
  %1354 = load i64, i64* %156, align 8, !alias.scope !1829, !noalias !1832
  %1355 = load i64, i64* %157, align 8, !alias.scope !1829, !noalias !1832
  %1356 = inttoptr i64 %1348 to i64*
  %1357 = load i64, i64* %1356
  %1358 = add i64 %1348, 8
  %1359 = inttoptr i64 %1358 to i64*
  %1360 = load i64, i64* %1359
  %1361 = add i64 %1348, 16
  %1362 = inttoptr i64 %1361 to i64*
  %1363 = load i64, i64* %1362
  %1364 = add i64 %1348, 24
  %1365 = inttoptr i64 %1364 to i64*
  %1366 = load i64, i64* %1365
  %1367 = add i64 %1348, 32
  %1368 = inttoptr i64 %1367 to i64*
  %1369 = load i64, i64* %1368
  %1370 = add i64 %1348, 40
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1348, 48
  %1374 = inttoptr i64 %1373 to i64*
  %1375 = load i64, i64* %1374
  %1376 = add i64 %1348, 56
  %1377 = inttoptr i64 %1376 to i64*
  %1378 = load i64, i64* %1377
  %1379 = add i64 %1348, 64
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = add i64 %1348, 72
  %1383 = inttoptr i64 %1382 to i64*
  %1384 = load i64, i64* %1383
  %1385 = inttoptr i64 %1349 to i64*
  %1386 = load i64, i64* %1385
  store i64 %1386, i64* %3, align 8, !alias.scope !1829, !noalias !1832
  store i64 %1348, i64* %17, align 8, !alias.scope !1829, !noalias !1832
  %1387 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 790), i64 %1351, i64 %1352, i64 %1353, i64 %1354, i64 %1355, i64 %1357, i64 %1360, i64 %1363, i64 %1366, i64 %1369, i64 %1372, i64 %1375, i64 %1378, i64 %1381, i64 %1384), !noalias !1829
  %1388 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 656), i64* %16, align 8, !tbaa !1240
  %1389 = load i64, i64* %18, align 8
  %1390 = add i64 %1389, -292
  %1391 = trunc i64 %1387 to i32
  %1392 = inttoptr i64 %1390 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %1388, 23
  %1394 = load i64, i64* %17, align 8, !tbaa !1240
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1393, i64* %1396
  %1397 = load i64, i64* %155, align 8, !alias.scope !1834, !noalias !1837
  %1398 = load i64, i64* %154, align 8, !alias.scope !1834, !noalias !1837
  %1399 = load i64, i64* %153, align 8, !alias.scope !1834, !noalias !1837
  %1400 = load i64, i64* %156, align 8, !alias.scope !1834, !noalias !1837
  %1401 = load i64, i64* %157, align 8, !alias.scope !1834, !noalias !1837
  %1402 = inttoptr i64 %1394 to i64*
  %1403 = load i64, i64* %1402
  %1404 = add i64 %1394, 8
  %1405 = inttoptr i64 %1404 to i64*
  %1406 = load i64, i64* %1405
  %1407 = add i64 %1394, 16
  %1408 = inttoptr i64 %1407 to i64*
  %1409 = load i64, i64* %1408
  %1410 = add i64 %1394, 24
  %1411 = inttoptr i64 %1410 to i64*
  %1412 = load i64, i64* %1411
  %1413 = add i64 %1394, 32
  %1414 = inttoptr i64 %1413 to i64*
  %1415 = load i64, i64* %1414
  %1416 = add i64 %1394, 40
  %1417 = inttoptr i64 %1416 to i64*
  %1418 = load i64, i64* %1417
  %1419 = add i64 %1394, 48
  %1420 = inttoptr i64 %1419 to i64*
  %1421 = load i64, i64* %1420
  %1422 = add i64 %1394, 56
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  %1425 = add i64 %1394, 64
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1394, 72
  %1429 = inttoptr i64 %1428 to i64*
  %1430 = load i64, i64* %1429
  store i64 %1394, i64* %17, align 8, !alias.scope !1834, !noalias !1837
  %1431 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 656), i64 %1397, i64 %1398, i64 %1399, i64 %1400, i64 %1401, i64 %1403, i64 %1406, i64 %1409, i64 %1412, i64 %1415, i64 %1418, i64 %1421, i64 %1424, i64 %1427, i64 %1430), !noalias !1834
  store i64 %1431, i64* %152, align 8, !alias.scope !1834, !noalias !1837
  %1432 = load i64, i64* %18, align 8
  %1433 = add i64 %1432, -296
  %1434 = trunc i64 %1431 to i32
  %1435 = inttoptr i64 %1433 to i32*
  store i32 %1434, i32* %1435
  %1436 = load i64, i64* %17, align 8
  %1437 = add i64 %1436, 264
  %1438 = icmp ugt i64 %1436, -265
  %1439 = zext i1 %1438 to i8
  store i8 %1439, i8* %47, align 1, !tbaa !1245
  %1440 = trunc i64 %1437 to i32
  %1441 = and i32 %1440, 255
  %1442 = tail call i32 @llvm.ctpop.i32(i32 %1441) #11
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  store i8 %1445, i8* %48, align 1, !tbaa !1259
  %1446 = xor i64 %1437, %1436
  %1447 = lshr i64 %1446, 4
  %1448 = trunc i64 %1447 to i8
  %1449 = and i8 %1448, 1
  store i8 %1449, i8* %49, align 1, !tbaa !1263
  %1450 = icmp eq i64 %1437, 0
  %1451 = zext i1 %1450 to i8
  store i8 %1451, i8* %50, align 1, !tbaa !1260
  %1452 = lshr i64 %1437, 63
  %1453 = trunc i64 %1452 to i8
  store i8 %1453, i8* %51, align 1, !tbaa !1261
  %1454 = lshr i64 %1436, 63
  %1455 = xor i64 %1452, %1454
  %1456 = add nuw nsw i64 %1455, %1452
  %1457 = icmp eq i64 %1456, 2
  %1458 = zext i1 %1457 to i8
  store i8 %1458, i8* %52, align 1, !tbaa !1262
  %1459 = add i64 %1436, 272
  %1460 = inttoptr i64 %1437 to i64*
  %1461 = load i64, i64* %1460
  store i64 %1461, i64* %14, align 8, !tbaa !1240
  %1462 = add i64 %1436, 280
  %1463 = inttoptr i64 %1459 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %21, align 8, !tbaa !1240
  %1465 = add i64 %1436, 288
  %1466 = inttoptr i64 %1462 to i64*
  %1467 = load i64, i64* %1466
  store i64 %1467, i64* %22, align 8, !tbaa !1240
  %1468 = add i64 %1436, 296
  %1469 = inttoptr i64 %1465 to i64*
  %1470 = load i64, i64* %1469
  store i64 %1470, i64* %23, align 8, !tbaa !1240
  %1471 = add i64 %1436, 304
  %1472 = inttoptr i64 %1468 to i64*
  %1473 = load i64, i64* %1472
  store i64 %1473, i64* %24, align 8, !tbaa !1240
  %1474 = add i64 %1436, 312
  %1475 = inttoptr i64 %1471 to i64*
  %1476 = load i64, i64* %1475
  store i64 %1476, i64* %18, align 8, !tbaa !1240
  %1477 = inttoptr i64 %1474 to i64*
  %1478 = load i64, i64* %1477
  store i64 %1478, i64* %3, align 8, !tbaa !1240
  %1479 = add i64 %1436, 320
  store i64 %1479, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %731

block_4038a1:                                     ; preds = %block_40388f
  %1480 = sext i32 %263 to i64
  %1481 = inttoptr i64 %259 to i64*
  %1482 = load i64, i64* %1481
  %1483 = sext i32 %263 to i128
  %1484 = and i128 %1483, -18446744073709551616
  %1485 = sext i64 %1482 to i128
  %1486 = and i128 %1485, -18446744073709551616
  %1487 = zext i64 %1480 to i128
  %1488 = or i128 %1484, %1487
  %1489 = zext i64 %1482 to i128
  %1490 = or i128 %1486, %1489
  %1491 = mul nsw i128 %1490, %1488
  %1492 = trunc i128 %1491 to i64
  %1493 = add i64 %266, 13
  %1494 = inttoptr i64 %259 to i64*
  store i64 %1492, i64* %1494
  br label %block_4038ae
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41a520___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41a520:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %12, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  %22 = load i64, i64* %16, align 8
  %23 = add i64 %19, -16
  %24 = inttoptr i64 %23 to i64*
  store i64 %22, i64* %24
  %25 = load i64, i64* %9, align 8
  store i64 %25, i64* %17, align 8, !tbaa !1240
  %26 = load i64, i64* %15, align 8
  %27 = add i64 %19, -24
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = load i64, i64* %14, align 8
  %30 = add i64 %19, -32
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  store i64 ptrtoint (%seg_61be00__init_array_type* @seg_61be00__init_array to i64), i64* %14, align 8, !tbaa !1240
  %32 = load i64, i64* %13, align 8
  %33 = add i64 %19, -40
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %8, align 8
  %36 = add i64 %19, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %15, align 8, !tbaa !1240
  %40 = load i64, i64* %10, align 8
  store i64 %40, i64* %16, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ashr (i64 sub (i64 add (i64 ptrtoint (%seg_61be00__init_array_type* @seg_61be00__init_array to i64), i64 8), i64 ptrtoint (%seg_61be00__init_array_type* @seg_61be00__init_array to i64)), i64 3), i64* %13, align 8, !tbaa !1240
  %47 = add i64 %1, -106248
  %48 = add i64 %1, 49
  %49 = add i64 %19, -64
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50
  store i64 %49, i64* %12, align 8, !tbaa !1240
  %51 = tail call %struct.Memory* @sub_400618__init_proc(%struct.State* nonnull %0, i64 %47, %struct.Memory* %2)
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %3, align 8
  %54 = icmp eq i64 %52, 0
  %55 = select i1 %54, i64 37, i64 5
  %56 = add i64 %53, %55
  br i1 %54, label %block_41a576, label %block_41a556

block_41a576.loopexit:                            ; preds = %block_41a560
  br label %block_41a576

block_41a576:                                     ; preds = %block_41a576.loopexit, %block_41a520
  %57 = phi %struct.Memory* [ %51, %block_41a520 ], [ %119, %block_41a576.loopexit ]
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %58, 8
  %60 = icmp ugt i64 %58, -9
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %41, align 1, !tbaa !1245
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %42, align 1, !tbaa !1259
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %43, align 1, !tbaa !1263
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %44, align 1, !tbaa !1260
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %45, align 1, !tbaa !1261
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %46, align 1, !tbaa !1262
  %81 = add i64 %58, 16
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = add i64 %58, 24
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %13, align 8, !tbaa !1240
  %87 = add i64 %58, 32
  %88 = inttoptr i64 %84 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %14, align 8, !tbaa !1240
  %90 = add i64 %58, 40
  %91 = inttoptr i64 %87 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %15, align 8, !tbaa !1240
  %93 = add i64 %58, 48
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %16, align 8, !tbaa !1240
  %96 = add i64 %58, 56
  %97 = inttoptr i64 %93 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %17, align 8, !tbaa !1240
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %3, align 8, !tbaa !1240
  %101 = add i64 %58, 64
  store i64 %101, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %57

block_41a556:                                     ; preds = %block_41a520
  store i64 0, i64* %8, align 8, !tbaa !1240
  store i8 0, i8* %41, align 1, !tbaa !1245
  store i8 1, i8* %42, align 1, !tbaa !1259
  store i8 1, i8* %44, align 1, !tbaa !1260
  store i8 0, i8* %45, align 1, !tbaa !1261
  store i8 0, i8* %46, align 1, !tbaa !1262
  store i8 0, i8* %43, align 1, !tbaa !1263
  %102 = add i64 %56, 10
  br label %block_41a560

block_41a560:                                     ; preds = %block_41a560, %block_41a556
  %103 = phi i64 [ 0, %block_41a556 ], [ %122, %block_41a560 ]
  %104 = phi i64 [ %102, %block_41a556 ], [ %150, %block_41a560 ]
  %105 = phi %struct.Memory* [ %51, %block_41a556 ], [ %119, %block_41a560 ]
  %106 = load i64, i64* %17, align 8
  store i64 %106, i64* %9, align 8, !tbaa !1240
  %107 = load i64, i64* %16, align 8
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %108 = load i32, i32* %7, align 4
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %110 = load i64, i64* %14, align 8
  %111 = shl i64 %103, 3
  %112 = add i64 %111, %110
  %113 = add i64 %104, 13
  %114 = load i64, i64* %12, align 8, !tbaa !1240
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %117 = inttoptr i64 %112 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %118, %struct.Memory* %105)
  %120 = load i64, i64* %8, align 8
  %121 = load i64, i64* %3, align 8
  %122 = add i64 %120, 1
  store i64 %122, i64* %8, align 8, !tbaa !1240
  %123 = lshr i64 %122, 63
  %124 = load i64, i64* %13, align 8
  %125 = sub i64 %124, %122
  %126 = icmp ult i64 %124, %122
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %41, align 1, !tbaa !1245
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #11
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %42, align 1, !tbaa !1259
  %134 = xor i64 %122, %124
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %43, align 1, !tbaa !1263
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %44, align 1, !tbaa !1260
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %45, align 1, !tbaa !1261
  %143 = lshr i64 %124, 63
  %144 = xor i64 %123, %143
  %145 = xor i64 %141, %143
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %46, align 1, !tbaa !1262
  %149 = select i1 %139, i64 9, i64 -13
  %150 = add i64 %121, %149
  br i1 %139, label %block_41a576.loopexit, label %block_41a560
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401b80_buts(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401b80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %15 = bitcast %union.anon* %14 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %17 = bitcast %union.anon* %16 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %19 = bitcast %union.anon* %18 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %21 = bitcast %union.anon* %20 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %23 = bitcast %union.anon* %22 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %25 = bitcast %union.anon* %24 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %27 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %28 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %29 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %30 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %31 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %34 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %35 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %36 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %39 = getelementptr inbounds %union.anon, %union.anon* %22, i64 0, i32 0
  %40 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %45 = load i64, i64* %33, align 8
  %46 = load i64, i64* %32, align 8, !tbaa !1240
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48
  store i64 %47, i64* %33, align 8, !tbaa !1240
  %49 = load i64, i64* %40, align 8
  %50 = add i64 %46, -16
  %51 = inttoptr i64 %50 to i64*
  store i64 %49, i64* %51
  %52 = load i64, i64* %39, align 8
  %53 = add i64 %46, -24
  %54 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %54
  %55 = load i64, i64* %38, align 8
  %56 = add i64 %46, -32
  %57 = inttoptr i64 %56 to i64*
  store i64 %55, i64* %57
  %58 = load i64, i64* %37, align 8
  %59 = add i64 %46, -40
  %60 = inttoptr i64 %59 to i64*
  store i64 %58, i64* %60
  %61 = load i64, i64* %27, align 8
  %62 = add i64 %46, -48
  %63 = inttoptr i64 %62 to i64*
  store i64 %61, i64* %63
  %64 = add i64 %46, -344
  store i64 %64, i64* %32, align 8, !tbaa !1240
  %65 = icmp ult i64 %62, 296
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %66, i8* %67, align 1, !tbaa !1245
  %68 = trunc i64 %64 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #11
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %73, i8* %74, align 1, !tbaa !1259
  %75 = xor i64 %62, %64
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %78, i8* %79, align 1, !tbaa !1263
  %80 = icmp eq i64 %64, 0
  %81 = zext i1 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %81, i8* %82, align 1, !tbaa !1260
  %83 = lshr i64 %64, 63
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %84, i8* %85, align 1, !tbaa !1261
  %86 = lshr i64 %62, 63
  %87 = xor i64 %83, %86
  %88 = add nuw nsw i64 %87, %86
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %90, i8* %91, align 1, !tbaa !1262
  %92 = add i64 %46, 104
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = add i64 %46, 96
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %36, align 8, !tbaa !1240
  %99 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %100 = add i64 %46, 88
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %99, align 8, !tbaa !1240
  %104 = add i64 %46, 80
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %27, align 8, !tbaa !1240
  %108 = add i64 %46, 72
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109
  %111 = zext i32 %110 to i64
  store i64 %111, i64* %39, align 8, !tbaa !1240
  %112 = add i64 %46, 64
  %113 = inttoptr i64 %112 to i32*
  %114 = load i32, i32* %113
  %115 = zext i32 %114 to i64
  store i64 %115, i64* %40, align 8, !tbaa !1240
  %116 = load i64, i64* %33, align 8
  %117 = add i64 %116, 64
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %37, align 8, !tbaa !1240
  %120 = add i64 %116, 56
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %38, align 8, !tbaa !1240
  %123 = add i64 %116, -308
  %124 = load i32, i32* %11, align 4
  %125 = inttoptr i64 %123 to i32*
  store i32 %124, i32* %125
  %126 = add i64 %116, 48
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %116, -320
  %130 = inttoptr i64 %129 to i64*
  store i64 %128, i64* %130
  %131 = add i64 %116, 40
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %116, -328
  %135 = inttoptr i64 %134 to i64*
  store i64 %133, i64* %135
  %136 = add i64 %116, 32
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %116, -336
  %140 = inttoptr i64 %139 to i64*
  store i64 %138, i64* %140
  %141 = add i64 %116, 24
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %30, align 8, !tbaa !1240
  %144 = add i64 %116, -340
  %145 = inttoptr i64 %144 to i32*
  store i32 %94, i32* %145
  %146 = add i64 %116, 16
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = add i64 %116, -344
  %150 = inttoptr i64 %149 to i32*
  store i32 %148, i32* %150
  %151 = inttoptr i64 %123 to i32*
  %152 = load i32, i32* %151
  %153 = add i64 %116, -348
  %154 = inttoptr i64 %153 to i32*
  store i32 %152, i32* %154
  %155 = add i64 %116, -44
  %156 = load i32, i32* %13, align 4
  %157 = inttoptr i64 %155 to i32*
  store i32 %156, i32* %157
  %158 = inttoptr i64 %153 to i32*
  %159 = load i32, i32* %158
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %31, align 8, !tbaa !1240
  %161 = add i64 %116, -48
  %162 = inttoptr i64 %161 to i32*
  store i32 %159, i32* %162
  %163 = add i64 %116, -52
  %164 = load i32, i32* %9, align 4
  %165 = inttoptr i64 %163 to i32*
  store i32 %164, i32* %165
  %166 = add i64 %116, -56
  %167 = load i32, i32* %7, align 4
  %168 = inttoptr i64 %166 to i32*
  store i32 %167, i32* %168
  %169 = add i64 %116, -60
  %170 = load i32, i32* %15, align 4
  %171 = inttoptr i64 %169 to i32*
  store i32 %170, i32* %171
  %172 = add i64 %116, -64
  %173 = load i32, i32* %17, align 4
  %174 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %174
  %175 = add i64 %116, -72
  %176 = bitcast [32 x %union.VectorReg]* %41 to double*
  %177 = load double, double* %176, align 1
  %178 = inttoptr i64 %175 to double*
  store double %177, double* %178
  %179 = inttoptr i64 %161 to i32*
  %180 = load i32, i32* %179
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %33, align 8
  %183 = add i64 %182, -352
  %184 = inttoptr i64 %183 to i32*
  store i32 2, i32* %184
  store i64 %181, i64* %26, align 8, !tbaa !1240
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %186 = sext i32 %180 to i64
  %187 = lshr i64 %186, 32
  store i64 %187, i64* %185, align 8, !tbaa !1240
  %188 = inttoptr i64 %183 to i32*
  %189 = load i32, i32* %188
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %28, align 8, !tbaa !1240
  %191 = add i64 %1, 176
  store i64 %191, i64* %3, align 8
  %192 = sext i32 %189 to i64
  %193 = shl nuw i64 %187, 32
  %194 = or i64 %193, %181
  %195 = sdiv i64 %194, %192
  %196 = shl i64 %195, 32
  %197 = ashr exact i64 %196, 32
  %198 = icmp eq i64 %195, %197
  br i1 %198, label %205, label %199

; <label>:199:                                    ; preds = %block_401b80
  %200 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %191, %struct.Memory* %2) #14
  %201 = load i64, i64* %26, align 8
  %202 = load i64, i64* %3, align 8
  %203 = load i64, i64* %33, align 8
  %204 = load i32, i32* %7, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:205:                                    ; preds = %block_401b80
  %206 = and i64 %195, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %205, %199
  %207 = phi i32 [ %204, %199 ], [ %189, %205 ]
  %208 = phi i64 [ %203, %199 ], [ %182, %205 ]
  %209 = phi i64 [ %202, %199 ], [ %191, %205 ]
  %210 = phi i64 [ %201, %199 ], [ %206, %205 ]
  %211 = phi %struct.Memory* [ %200, %199 ], [ %2, %205 ]
  %212 = trunc i64 %210 to i32
  %213 = shl i32 %212, 1
  %214 = or i32 %213, 1
  %215 = zext i32 %214 to i64
  store i8 0, i8* %67, align 1, !tbaa !1245
  %216 = and i32 %214, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #11
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %74, align 1, !tbaa !1259
  store i8 0, i8* %79, align 1, !tbaa !1263
  store i8 0, i8* %82, align 1, !tbaa !1260
  %221 = lshr i32 %212, 30
  %222 = and i32 %221, 1
  %223 = trunc i32 %222 to i8
  store i8 %223, i8* %85, align 1, !tbaa !1261
  %224 = lshr i32 %212, 30
  %225 = and i32 %224, 1
  %226 = xor i32 %222, %225
  %227 = add nuw nsw i32 %226, %222
  %228 = icmp eq i32 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %91, align 1, !tbaa !1262
  store i64 %215, i64* %31, align 8, !tbaa !1240
  %230 = add i64 %208, -44
  %231 = inttoptr i64 %230 to i32*
  %232 = load i32, i32* %231
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %26, align 8, !tbaa !1240
  %234 = sext i32 %232 to i64
  %235 = lshr i64 %234, 32
  store i64 %235, i64* %185, align 8, !tbaa !1240
  %236 = add i64 %209, 16
  store i64 %236, i64* %3, align 8
  %237 = sext i32 %207 to i64
  %238 = shl nuw i64 %235, 32
  %239 = or i64 %238, %233
  %240 = sdiv i64 %239, %237
  %241 = shl i64 %240, 32
  %242 = ashr exact i64 %241, 32
  %243 = icmp eq i64 %240, %242
  br i1 %243, label %250, label %244

; <label>:244:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %245 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %236, %struct.Memory* %211) #14
  %246 = load i64, i64* %26, align 8
  %247 = load i64, i64* %3, align 8
  %248 = load i64, i64* %33, align 8
  %249 = load i32, i32* %7, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:250:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %251 = and i64 %240, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %250, %244
  %252 = phi i32 [ %249, %244 ], [ %207, %250 ]
  %253 = phi i64 [ %248, %244 ], [ %208, %250 ]
  %254 = phi i64 [ %247, %244 ], [ %236, %250 ]
  %255 = phi i64 [ %246, %244 ], [ %251, %250 ]
  %256 = phi %struct.Memory* [ %245, %244 ], [ %211, %250 ]
  %257 = trunc i64 %255 to i32
  %258 = shl i32 %257, 1
  %259 = or i32 %258, 1
  %260 = zext i32 %259 to i64
  store i8 0, i8* %67, align 1, !tbaa !1245
  %261 = and i32 %259, 255
  %262 = tail call i32 @llvm.ctpop.i32(i32 %261) #11
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  store i8 %265, i8* %74, align 1, !tbaa !1259
  store i8 0, i8* %79, align 1, !tbaa !1263
  store i8 0, i8* %82, align 1, !tbaa !1260
  %266 = lshr i32 %257, 30
  %267 = and i32 %266, 1
  %268 = trunc i32 %267 to i8
  store i8 %268, i8* %85, align 1, !tbaa !1261
  %269 = lshr i32 %257, 30
  %270 = and i32 %269, 1
  %271 = xor i32 %267, %270
  %272 = add nuw nsw i32 %271, %267
  %273 = icmp eq i32 %272, 2
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %91, align 1, !tbaa !1262
  store i64 %260, i64* %34, align 8, !tbaa !1240
  %275 = add i64 %253, -44
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %26, align 8, !tbaa !1240
  %279 = sext i32 %277 to i64
  %280 = lshr i64 %279, 32
  store i64 %280, i64* %185, align 8, !tbaa !1240
  %281 = add i64 %254, 17
  store i64 %281, i64* %3, align 8
  %282 = sext i32 %252 to i64
  %283 = shl nuw i64 %280, 32
  %284 = or i64 %283, %278
  %285 = sdiv i64 %284, %282
  %286 = shl i64 %285, 32
  %287 = ashr exact i64 %286, 32
  %288 = icmp eq i64 %285, %287
  br i1 %288, label %295, label %289

; <label>:289:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %290 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %281, %struct.Memory* %256) #14
  %291 = load i64, i64* %26, align 8
  %292 = load i64, i64* %3, align 8
  %293 = load i64, i64* %33, align 8
  %294 = load i32, i32* %7, align 4
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:295:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %296 = and i64 %285, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %295, %289
  %297 = phi i32 [ %294, %289 ], [ %252, %295 ]
  %298 = phi i64 [ %293, %289 ], [ %253, %295 ]
  %299 = phi i64 [ %292, %289 ], [ %281, %295 ]
  %300 = phi i64 [ %291, %289 ], [ %296, %295 ]
  %301 = phi %struct.Memory* [ %290, %289 ], [ %256, %295 ]
  %302 = trunc i64 %300 to i32
  %303 = shl i32 %302, 1
  %304 = or i32 %303, 1
  %305 = zext i32 %304 to i64
  store i8 0, i8* %67, align 1, !tbaa !1245
  %306 = and i32 %304, 255
  %307 = tail call i32 @llvm.ctpop.i32(i32 %306) #11
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  store i8 %310, i8* %74, align 1, !tbaa !1259
  store i8 0, i8* %79, align 1, !tbaa !1263
  store i8 0, i8* %82, align 1, !tbaa !1260
  %311 = lshr i32 %302, 30
  %312 = and i32 %311, 1
  %313 = trunc i32 %312 to i8
  store i8 %313, i8* %85, align 1, !tbaa !1261
  %314 = lshr i32 %302, 30
  %315 = and i32 %314, 1
  %316 = xor i32 %312, %315
  %317 = add nuw nsw i32 %316, %312
  %318 = icmp eq i32 %317, 2
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %91, align 1, !tbaa !1262
  store i64 %305, i64* %35, align 8, !tbaa !1240
  %320 = add i64 %298, -44
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %26, align 8, !tbaa !1240
  %324 = sext i32 %322 to i64
  %325 = lshr i64 %324, 32
  store i64 %325, i64* %185, align 8, !tbaa !1240
  %326 = add i64 %299, 17
  store i64 %326, i64* %3, align 8
  %327 = sext i32 %297 to i64
  %328 = shl nuw i64 %325, 32
  %329 = or i64 %328, %323
  %330 = sdiv i64 %329, %327
  %331 = shl i64 %330, 32
  %332 = ashr exact i64 %331, 32
  %333 = icmp eq i64 %330, %332
  br i1 %333, label %339, label %334

; <label>:334:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %335 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %326, %struct.Memory* %301) #14
  %336 = load i64, i64* %26, align 8
  %337 = load i64, i64* %3, align 8
  %338 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

; <label>:339:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %340 = and i64 %330, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5: ; preds = %339, %334
  %341 = phi i64 [ %338, %334 ], [ %298, %339 ]
  %342 = phi i64 [ %337, %334 ], [ %326, %339 ]
  %343 = phi i64 [ %336, %334 ], [ %340, %339 ]
  %344 = phi %struct.Memory* [ %335, %334 ], [ %301, %339 ]
  %345 = trunc i64 %343 to i32
  %346 = shl i32 %345, 1
  %347 = or i32 %346, 1
  %348 = zext i32 %347 to i64
  store i8 0, i8* %67, align 1, !tbaa !1245
  %349 = and i32 %347, 255
  %350 = tail call i32 @llvm.ctpop.i32(i32 %349) #11
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  %353 = xor i8 %352, 1
  store i8 %353, i8* %74, align 1, !tbaa !1259
  store i8 0, i8* %79, align 1, !tbaa !1263
  store i8 0, i8* %82, align 1, !tbaa !1260
  %354 = lshr i32 %345, 30
  %355 = and i32 %354, 1
  %356 = trunc i32 %355 to i8
  store i8 %356, i8* %85, align 1, !tbaa !1261
  %357 = lshr i32 %345, 30
  %358 = and i32 %357, 1
  %359 = xor i32 %355, %358
  %360 = add nuw nsw i32 %359, %355
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %91, align 1, !tbaa !1262
  %363 = add i64 %341, -44
  %364 = inttoptr i64 %363 to i32*
  %365 = load i32, i32* %364
  %366 = zext i32 %365 to i64
  %367 = add i64 %341, -360
  %368 = inttoptr i64 %367 to i64*
  store i64 %348, i64* %368
  store i64 %366, i64* %26, align 8, !tbaa !1240
  %369 = sext i32 %365 to i64
  %370 = lshr i64 %369, 32
  store i64 %370, i64* %185, align 8, !tbaa !1240
  %371 = add i64 %341, -352
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %28, align 8, !tbaa !1240
  %375 = add i64 %342, 29
  store i64 %375, i64* %3, align 8
  %376 = sext i32 %373 to i64
  %377 = shl nuw i64 %370, 32
  %378 = or i64 %377, %366
  %379 = sdiv i64 %378, %376
  %380 = shl i64 %379, 32
  %381 = ashr exact i64 %380, 32
  %382 = icmp eq i64 %379, %381
  br i1 %382, label %388, label %383

; <label>:383:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %384 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %375, %struct.Memory* %344) #14
  %385 = load i64, i64* %26, align 8
  %386 = load i64, i64* %3, align 8
  %387 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

; <label>:388:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %389 = and i64 %379, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7: ; preds = %388, %383
  %390 = phi i64 [ %387, %383 ], [ %341, %388 ]
  %391 = phi i64 [ %386, %383 ], [ %375, %388 ]
  %392 = phi i64 [ %385, %383 ], [ %389, %388 ]
  %393 = phi %struct.Memory* [ %384, %383 ], [ %344, %388 ]
  %394 = trunc i64 %392 to i32
  %395 = shl i32 %394, 1
  %396 = or i32 %395, 1
  %397 = zext i32 %396 to i64
  store i8 0, i8* %67, align 1, !tbaa !1245
  %398 = and i32 %396, 255
  %399 = tail call i32 @llvm.ctpop.i32(i32 %398) #11
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  store i8 %402, i8* %74, align 1, !tbaa !1259
  store i8 0, i8* %79, align 1, !tbaa !1263
  store i8 0, i8* %82, align 1, !tbaa !1260
  %403 = lshr i32 %394, 30
  %404 = and i32 %403, 1
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %85, align 1, !tbaa !1261
  %406 = lshr i32 %394, 30
  %407 = and i32 %406, 1
  %408 = xor i32 %404, %407
  %409 = add nuw nsw i32 %408, %404
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %91, align 1, !tbaa !1262
  %412 = add i64 %390, -44
  %413 = inttoptr i64 %412 to i32*
  %414 = load i32, i32* %413
  %415 = zext i32 %414 to i64
  %416 = add i64 %390, -368
  %417 = inttoptr i64 %416 to i64*
  store i64 %397, i64* %417
  store i64 %415, i64* %26, align 8, !tbaa !1240
  %418 = sext i32 %414 to i64
  %419 = lshr i64 %418, 32
  store i64 %419, i64* %185, align 8, !tbaa !1240
  %420 = add i64 %390, -352
  %421 = inttoptr i64 %420 to i32*
  %422 = load i32, i32* %421
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %28, align 8, !tbaa !1240
  %424 = add i64 %391, 29
  store i64 %424, i64* %3, align 8
  %425 = sext i32 %422 to i64
  %426 = shl nuw i64 %419, 32
  %427 = or i64 %426, %415
  %428 = sdiv i64 %427, %425
  %429 = shl i64 %428, 32
  %430 = ashr exact i64 %429, 32
  %431 = icmp eq i64 %428, %430
  br i1 %431, label %437, label %432

; <label>:432:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %433 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %424, %struct.Memory* %393) #14
  %434 = load i64, i64* %26, align 8
  %435 = load i64, i64* %3, align 8
  %436 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9

; <label>:437:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %438 = and i64 %428, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9: ; preds = %437, %432
  %439 = phi i64 [ %436, %432 ], [ %390, %437 ]
  %440 = phi i64 [ %435, %432 ], [ %424, %437 ]
  %441 = phi i64 [ %434, %432 ], [ %438, %437 ]
  %442 = phi %struct.Memory* [ %433, %432 ], [ %393, %437 ]
  %443 = trunc i64 %441 to i32
  %444 = shl i32 %443, 1
  %445 = or i32 %444, 1
  %446 = zext i32 %445 to i64
  store i8 0, i8* %67, align 1, !tbaa !1245
  %447 = and i32 %445, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #11
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %74, align 1, !tbaa !1259
  store i8 0, i8* %79, align 1, !tbaa !1263
  store i8 0, i8* %82, align 1, !tbaa !1260
  %452 = lshr i32 %443, 30
  %453 = and i32 %452, 1
  %454 = trunc i32 %453 to i8
  store i8 %454, i8* %85, align 1, !tbaa !1261
  %455 = lshr i32 %443, 30
  %456 = and i32 %455, 1
  %457 = xor i32 %453, %456
  %458 = add nuw nsw i32 %457, %453
  %459 = icmp eq i32 %458, 2
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %91, align 1, !tbaa !1262
  %461 = add i64 %439, -44
  %462 = inttoptr i64 %461 to i32*
  %463 = load i32, i32* %462
  %464 = zext i32 %463 to i64
  %465 = add i64 %439, -376
  %466 = inttoptr i64 %465 to i64*
  store i64 %446, i64* %466
  store i64 %464, i64* %26, align 8, !tbaa !1240
  %467 = sext i32 %463 to i64
  %468 = lshr i64 %467, 32
  store i64 %468, i64* %185, align 8, !tbaa !1240
  %469 = add i64 %439, -352
  %470 = inttoptr i64 %469 to i32*
  %471 = load i32, i32* %470
  %472 = zext i32 %471 to i64
  store i64 %472, i64* %28, align 8, !tbaa !1240
  %473 = add i64 %440, 29
  store i64 %473, i64* %3, align 8
  %474 = sext i32 %471 to i64
  %475 = shl nuw i64 %468, 32
  %476 = or i64 %475, %464
  %477 = sdiv i64 %476, %474
  %478 = shl i64 %477, 32
  %479 = ashr exact i64 %478, 32
  %480 = icmp eq i64 %477, %479
  br i1 %480, label %486, label %481

; <label>:481:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9
  %482 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %473, %struct.Memory* %442) #14
  %483 = load i64, i64* %26, align 8
  %484 = load i64, i64* %3, align 8
  %485 = load i64, i64* %33, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11

; <label>:486:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit9
  %487 = srem i64 %476, %474
  %488 = and i64 %477, 4294967295
  %489 = and i64 %487, 4294967295
  store i64 %489, i64* %29, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11: ; preds = %486, %481
  %490 = phi i64 [ %485, %481 ], [ %439, %486 ]
  %491 = phi i64 [ %484, %481 ], [ %473, %486 ]
  %492 = phi i64 [ %483, %481 ], [ %488, %486 ]
  %493 = phi %struct.Memory* [ %482, %481 ], [ %442, %486 ]
  %494 = shl i64 %492, 1
  %495 = and i64 %494, 4294967294
  %496 = or i64 %495, 1
  store i64 %496, i64* %26, align 8, !tbaa !1240
  %497 = add i64 %490, 96
  %498 = inttoptr i64 %497 to i32*
  %499 = load i32, i32* %498
  %500 = add i32 %499, -1
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %28, align 8, !tbaa !1240
  %502 = add i64 %490, -80
  %503 = inttoptr i64 %502 to i32*
  store i32 %500, i32* %503
  %504 = add i64 %490, -384
  %505 = load i64, i64* %38, align 8
  %506 = inttoptr i64 %504 to i64*
  store i64 %505, i64* %506
  %507 = add i64 %490, -388
  %508 = load i32, i32* %5, align 4
  %509 = inttoptr i64 %507 to i32*
  store i32 %508, i32* %509
  %510 = add i64 %490, -392
  %511 = load i32, i32* %23, align 4
  %512 = inttoptr i64 %510 to i32*
  store i32 %511, i32* %512
  %513 = add i64 %490, -396
  %514 = load i32, i32* %25, align 4
  %515 = inttoptr i64 %513 to i32*
  store i32 %514, i32* %515
  %516 = add i64 %490, -408
  %517 = load i64, i64* %37, align 8
  %518 = inttoptr i64 %516 to i64*
  store i64 %517, i64* %518
  %519 = add i64 %490, -416
  %520 = load i64, i64* %30, align 8
  %521 = inttoptr i64 %519 to i64*
  store i64 %520, i64* %521
  %522 = add i64 %490, -424
  %523 = load i64, i64* %31, align 8
  %524 = inttoptr i64 %522 to i64*
  store i64 %523, i64* %524
  %525 = add i64 %490, -428
  %526 = load i32, i32* %21, align 4
  %527 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %527
  %528 = add i64 %490, -432
  %529 = load i32, i32* %19, align 4
  %530 = inttoptr i64 %528 to i32*
  store i32 %529, i32* %530
  %531 = add i64 %490, -440
  %532 = load i64, i64* %35, align 8
  %533 = inttoptr i64 %531 to i64*
  store i64 %532, i64* %533
  %534 = add i64 %490, -448
  %535 = load i64, i64* %34, align 8
  %536 = inttoptr i64 %534 to i64*
  store i64 %535, i64* %536
  %537 = add i64 %490, -456
  %538 = load i64, i64* %26, align 8
  %539 = add i64 %491, 100
  %540 = inttoptr i64 %537 to i64*
  store i64 %538, i64* %540
  %541 = load i64, i64* %33, align 8
  %542 = add i64 %541, 88
  %543 = add i64 %541, 80
  %544 = add i64 %541, -76
  %545 = add i64 %541, 72
  %546 = add i64 %541, -84
  %547 = add i64 %541, -72
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %549 = bitcast i64* %548 to double*
  %550 = add i64 %541, 64
  %551 = add i64 %541, -80
  %552 = add i64 %541, -456
  %553 = bitcast %union.VectorReg* %42 to double*
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %555 = bitcast i64* %554 to double*
  %556 = add i64 %541, 24
  %557 = add i64 %541, 16
  %558 = add i64 %541, -424
  %559 = add i64 %541, -448
  %560 = bitcast %union.VectorReg* %43 to double*
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %562 = add i64 %541, 32
  %563 = add i64 %541, -440
  br label %block_401d1d

block_401ff6:                                     ; preds = %block_401d32
  %564 = inttoptr i64 %551 to i32*
  %565 = load i32, i32* %564
  %566 = add i32 %565, -1
  %567 = inttoptr i64 %551 to i32*
  store i32 %566, i32* %567
  %568 = add i64 %2354, -729
  br label %block_401d1d

block_402574:                                     ; preds = %block_40256a
  %569 = inttoptr i64 %2259 to i64*
  %570 = load i64, i64* %569
  %571 = inttoptr i64 %2238 to i32*
  %572 = load i32, i32* %571
  %573 = sext i32 %572 to i64
  %574 = inttoptr i64 %2260 to i64*
  %575 = load i64, i64* %574
  store i64 %575, i64* %30, align 8, !tbaa !1240
  %576 = mul i64 %573, %575
  %577 = mul i64 %576, 200
  %578 = add i64 %577, %570
  %579 = inttoptr i64 %2242 to i32*
  %580 = load i32, i32* %579
  %581 = sext i32 %580 to i64
  %582 = mul nsw i64 %581, 200
  %583 = add i64 %582, %578
  %584 = sext i32 %703 to i64
  %585 = shl nsw i64 %584, 3
  %586 = add i64 %585, %583
  %587 = inttoptr i64 %586 to double*
  %588 = load double, double* %587
  %589 = mul nsw i64 %584, 40
  %590 = add i64 %589, %2258
  %591 = inttoptr i64 %590 to double*
  store double %588, double* %591
  %592 = inttoptr i64 %2259 to i64*
  %593 = load i64, i64* %592
  %594 = inttoptr i64 %2238 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  %597 = mul i64 %575, %596
  %598 = mul i64 %597, 200
  %599 = add i64 %598, %593
  %600 = inttoptr i64 %2242 to i32*
  %601 = load i32, i32* %600
  %602 = sext i32 %601 to i64
  %603 = mul nsw i64 %602, 200
  %604 = add i64 %603, %599
  %605 = inttoptr i64 %2244 to i32*
  %606 = load i32, i32* %605
  %607 = sext i32 %606 to i64
  %608 = shl nsw i64 %607, 3
  %609 = add i64 %604, 40
  %610 = add i64 %609, %608
  %611 = inttoptr i64 %610 to double*
  %612 = load double, double* %611
  %613 = mul nsw i64 %607, 40
  %614 = add i64 %613, %2258
  %615 = add i64 %614, 8
  %616 = inttoptr i64 %615 to double*
  store double %612, double* %616
  %617 = inttoptr i64 %2259 to i64*
  %618 = load i64, i64* %617
  %619 = inttoptr i64 %2238 to i32*
  %620 = load i32, i32* %619
  %621 = sext i32 %620 to i64
  %622 = mul i64 %575, %621
  %623 = mul i64 %622, 200
  %624 = add i64 %623, %618
  %625 = inttoptr i64 %2242 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  %628 = mul nsw i64 %627, 200
  %629 = add i64 %628, %624
  %630 = inttoptr i64 %2244 to i32*
  %631 = load i32, i32* %630
  %632 = sext i32 %631 to i64
  %633 = shl nsw i64 %632, 3
  %634 = add i64 %629, 80
  %635 = add i64 %634, %633
  %636 = inttoptr i64 %635 to double*
  %637 = load double, double* %636
  %638 = mul nsw i64 %632, 40
  %639 = add i64 %638, %2258
  %640 = add i64 %639, 16
  %641 = inttoptr i64 %640 to double*
  store double %637, double* %641
  %642 = inttoptr i64 %2259 to i64*
  %643 = load i64, i64* %642
  %644 = inttoptr i64 %2238 to i32*
  %645 = load i32, i32* %644
  %646 = sext i32 %645 to i64
  %647 = mul i64 %575, %646
  %648 = mul i64 %647, 200
  %649 = add i64 %648, %643
  %650 = inttoptr i64 %2242 to i32*
  %651 = load i32, i32* %650
  %652 = sext i32 %651 to i64
  %653 = mul nsw i64 %652, 200
  %654 = add i64 %653, %649
  %655 = inttoptr i64 %2244 to i32*
  %656 = load i32, i32* %655
  %657 = sext i32 %656 to i64
  %658 = shl nsw i64 %657, 3
  %659 = add i64 %654, 120
  %660 = add i64 %659, %658
  %661 = inttoptr i64 %660 to double*
  %662 = load double, double* %661
  %663 = mul nsw i64 %657, 40
  %664 = add i64 %663, %2258
  %665 = add i64 %664, 24
  %666 = inttoptr i64 %665 to double*
  store double %662, double* %666
  %667 = inttoptr i64 %2259 to i64*
  %668 = load i64, i64* %667
  %669 = inttoptr i64 %2238 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  %672 = load i64, i64* %30, align 8
  %673 = mul i64 %672, %671
  %674 = mul i64 %673, 200
  %675 = add i64 %674, %668
  %676 = inttoptr i64 %2242 to i32*
  %677 = load i32, i32* %676
  %678 = sext i32 %677 to i64
  %679 = mul nsw i64 %678, 200
  %680 = add i64 %679, %675
  %681 = inttoptr i64 %2244 to i32*
  %682 = load i32, i32* %681
  %683 = sext i32 %682 to i64
  %684 = shl nsw i64 %683, 3
  %685 = add i64 %680, 160
  %686 = add i64 %685, %684
  %687 = inttoptr i64 %686 to double*
  %688 = load double, double* %687
  store double %688, double* %176, align 1, !tbaa !1264
  store double 0.000000e+00, double* %549, align 1, !tbaa !1264
  %689 = mul nsw i64 %683, 40
  %690 = add i64 %689, %2258
  %691 = add i64 %690, 32
  %692 = inttoptr i64 %691 to double*
  store double %688, double* %692
  %693 = inttoptr i64 %2244 to i32*
  %694 = load i32, i32* %693
  %695 = add i32 %694, 1
  %696 = inttoptr i64 %2244 to i32*
  store i32 %695, i32* %696
  br label %block_40256a

block_403775:                                     ; preds = %block_402027
  %697 = inttoptr i64 %2238 to i32*
  %698 = load i32, i32* %697
  %699 = add i32 %698, -1
  %700 = inttoptr i64 %2238 to i32*
  store i32 %699, i32* %700
  br label %block_402012

block_40256a:                                     ; preds = %block_402563, %block_402574
  %701 = phi %struct.Memory* [ %2158, %block_402563 ], [ %701, %block_402574 ]
  %702 = inttoptr i64 %2244 to i32*
  %703 = load i32, i32* %702
  %704 = add i32 %703, -5
  %705 = lshr i32 %704, 31
  %706 = lshr i32 %703, 31
  %707 = xor i32 %705, %706
  %708 = add nuw nsw i32 %707, %706
  %709 = icmp eq i32 %708, 2
  %710 = icmp ne i32 %705, 0
  %711 = xor i1 %710, %709
  br i1 %711, label %block_402574, label %block_4026d3

block_402563:                                     ; preds = %block_40203a
  %712 = inttoptr i64 %2244 to i32*
  store i32 0, i32* %712
  br label %block_40256a

block_4026d3:                                     ; preds = %block_40256a
  %713 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %713, double* %176, align 1, !tbaa !1264
  store double 0.000000e+00, double* %549, align 1, !tbaa !1264
  %714 = bitcast double %713 to <2 x i32>
  %715 = extractelement <2 x i32> %714, i32 0
  store i32 %715, i32* %2263, align 1, !tbaa !1292
  %716 = extractelement <2 x i32> %714, i32 1
  store i32 %716, i32* %2265, align 1, !tbaa !1292
  %717 = load double, double* %553, align 1
  %718 = inttoptr i64 %2258 to double*
  %719 = load double, double* %718
  %720 = fdiv double %717, %719
  %721 = inttoptr i64 %2266 to double*
  store double %720, double* %721
  %722 = inttoptr i64 %2266 to double*
  %723 = load double, double* %722
  %724 = inttoptr i64 %2267 to double*
  %725 = load double, double* %724
  %726 = fmul double %723, %725
  %727 = inttoptr i64 %2268 to double*
  store double %726, double* %727
  %728 = inttoptr i64 %2269 to double*
  %729 = load double, double* %728
  %730 = inttoptr i64 %2268 to double*
  %731 = load double, double* %730
  %732 = inttoptr i64 %2270 to double*
  %733 = load double, double* %732
  %734 = fmul double %731, %733
  %735 = fsub double %729, %734
  %736 = inttoptr i64 %2269 to double*
  store double %735, double* %736
  %737 = inttoptr i64 %2271 to double*
  %738 = load double, double* %737
  %739 = inttoptr i64 %2268 to double*
  %740 = load double, double* %739
  %741 = inttoptr i64 %2272 to double*
  %742 = load double, double* %741
  %743 = fmul double %740, %742
  %744 = fsub double %738, %743
  %745 = inttoptr i64 %2271 to double*
  store double %744, double* %745
  %746 = inttoptr i64 %2273 to double*
  %747 = load double, double* %746
  %748 = inttoptr i64 %2268 to double*
  %749 = load double, double* %748
  %750 = inttoptr i64 %2274 to double*
  %751 = load double, double* %750
  %752 = fmul double %749, %751
  %753 = fsub double %747, %752
  %754 = inttoptr i64 %2273 to double*
  store double %753, double* %754
  %755 = inttoptr i64 %2275 to double*
  %756 = load double, double* %755
  %757 = inttoptr i64 %2268 to double*
  %758 = load double, double* %757
  %759 = inttoptr i64 %2276 to double*
  %760 = load double, double* %759
  %761 = fmul double %758, %760
  %762 = fsub double %756, %761
  %763 = inttoptr i64 %2275 to double*
  store double %762, double* %763
  %764 = inttoptr i64 %2245 to i64*
  %765 = load i64, i64* %764
  %766 = inttoptr i64 %2238 to i32*
  %767 = load i32, i32* %766
  %768 = sext i32 %767 to i64
  %769 = inttoptr i64 %2246 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %29, align 8, !tbaa !1240
  %771 = mul i64 %768, %770
  %772 = mul i64 %771, 40
  %773 = add i64 %772, %765
  %774 = inttoptr i64 %2242 to i32*
  %775 = load i32, i32* %774
  %776 = sext i32 %775 to i64
  %777 = mul nsw i64 %776, 40
  %778 = add i64 %777, %773
  %779 = add i64 %778, 8
  %780 = inttoptr i64 %779 to double*
  %781 = load double, double* %780
  %782 = inttoptr i64 %778 to double*
  %783 = load double, double* %782
  %784 = inttoptr i64 %2268 to double*
  %785 = load double, double* %784
  %786 = fmul double %783, %785
  %787 = fsub double %781, %786
  %788 = inttoptr i64 %779 to double*
  store double %787, double* %788
  %789 = inttoptr i64 %2266 to double*
  %790 = load double, double* %789
  %791 = inttoptr i64 %2277 to double*
  %792 = load double, double* %791
  %793 = fmul double %790, %792
  %794 = inttoptr i64 %2268 to double*
  store double %793, double* %794
  %795 = inttoptr i64 %2278 to double*
  %796 = load double, double* %795
  %797 = inttoptr i64 %2268 to double*
  %798 = load double, double* %797
  %799 = inttoptr i64 %2270 to double*
  %800 = load double, double* %799
  %801 = fmul double %798, %800
  %802 = fsub double %796, %801
  %803 = inttoptr i64 %2278 to double*
  store double %802, double* %803
  %804 = inttoptr i64 %2279 to double*
  %805 = load double, double* %804
  %806 = inttoptr i64 %2268 to double*
  %807 = load double, double* %806
  %808 = inttoptr i64 %2272 to double*
  %809 = load double, double* %808
  %810 = fmul double %807, %809
  %811 = fsub double %805, %810
  %812 = inttoptr i64 %2279 to double*
  store double %811, double* %812
  %813 = inttoptr i64 %2280 to double*
  %814 = load double, double* %813
  %815 = inttoptr i64 %2268 to double*
  %816 = load double, double* %815
  %817 = inttoptr i64 %2274 to double*
  %818 = load double, double* %817
  %819 = fmul double %816, %818
  %820 = fsub double %814, %819
  %821 = inttoptr i64 %2280 to double*
  store double %820, double* %821
  %822 = inttoptr i64 %2281 to double*
  %823 = load double, double* %822
  %824 = inttoptr i64 %2268 to double*
  %825 = load double, double* %824
  %826 = inttoptr i64 %2276 to double*
  %827 = load double, double* %826
  %828 = fmul double %825, %827
  %829 = fsub double %823, %828
  %830 = inttoptr i64 %2281 to double*
  store double %829, double* %830
  %831 = inttoptr i64 %2245 to i64*
  %832 = load i64, i64* %831
  %833 = inttoptr i64 %2238 to i32*
  %834 = load i32, i32* %833
  %835 = sext i32 %834 to i64
  %836 = load i64, i64* %29, align 8
  %837 = mul i64 %836, %835
  %838 = mul i64 %837, 40
  %839 = add i64 %838, %832
  %840 = inttoptr i64 %2242 to i32*
  %841 = load i32, i32* %840
  %842 = sext i32 %841 to i64
  %843 = mul nsw i64 %842, 40
  %844 = add i64 %843, %839
  %845 = add i64 %844, 16
  %846 = inttoptr i64 %845 to double*
  %847 = load double, double* %846
  %848 = inttoptr i64 %844 to double*
  %849 = load double, double* %848
  %850 = inttoptr i64 %2268 to double*
  %851 = load double, double* %850
  %852 = fmul double %849, %851
  %853 = fsub double %847, %852
  %854 = inttoptr i64 %845 to double*
  store double %853, double* %854
  %855 = inttoptr i64 %2266 to double*
  %856 = load double, double* %855
  %857 = inttoptr i64 %2282 to double*
  %858 = load double, double* %857
  %859 = fmul double %856, %858
  %860 = inttoptr i64 %2268 to double*
  store double %859, double* %860
  %861 = inttoptr i64 %2283 to double*
  %862 = load double, double* %861
  %863 = inttoptr i64 %2268 to double*
  %864 = load double, double* %863
  %865 = inttoptr i64 %2270 to double*
  %866 = load double, double* %865
  %867 = fmul double %864, %866
  %868 = fsub double %862, %867
  %869 = inttoptr i64 %2283 to double*
  store double %868, double* %869
  %870 = inttoptr i64 %2284 to double*
  %871 = load double, double* %870
  %872 = inttoptr i64 %2268 to double*
  %873 = load double, double* %872
  %874 = inttoptr i64 %2272 to double*
  %875 = load double, double* %874
  %876 = fmul double %873, %875
  %877 = fsub double %871, %876
  %878 = inttoptr i64 %2284 to double*
  store double %877, double* %878
  %879 = inttoptr i64 %2285 to double*
  %880 = load double, double* %879
  %881 = inttoptr i64 %2268 to double*
  %882 = load double, double* %881
  %883 = inttoptr i64 %2274 to double*
  %884 = load double, double* %883
  %885 = fmul double %882, %884
  %886 = fsub double %880, %885
  %887 = inttoptr i64 %2285 to double*
  store double %886, double* %887
  %888 = inttoptr i64 %2286 to double*
  %889 = load double, double* %888
  %890 = inttoptr i64 %2268 to double*
  %891 = load double, double* %890
  %892 = inttoptr i64 %2276 to double*
  %893 = load double, double* %892
  %894 = fmul double %891, %893
  %895 = fsub double %889, %894
  %896 = inttoptr i64 %2286 to double*
  store double %895, double* %896
  %897 = inttoptr i64 %2245 to i64*
  %898 = load i64, i64* %897
  %899 = inttoptr i64 %2238 to i32*
  %900 = load i32, i32* %899
  %901 = sext i32 %900 to i64
  %902 = load i64, i64* %29, align 8
  %903 = mul i64 %902, %901
  %904 = mul i64 %903, 40
  %905 = add i64 %904, %898
  %906 = inttoptr i64 %2242 to i32*
  %907 = load i32, i32* %906
  %908 = sext i32 %907 to i64
  %909 = mul nsw i64 %908, 40
  %910 = add i64 %909, %905
  %911 = add i64 %910, 24
  %912 = inttoptr i64 %911 to double*
  %913 = load double, double* %912
  %914 = inttoptr i64 %910 to double*
  %915 = load double, double* %914
  %916 = inttoptr i64 %2268 to double*
  %917 = load double, double* %916
  %918 = fmul double %915, %917
  %919 = fsub double %913, %918
  %920 = inttoptr i64 %911 to double*
  store double %919, double* %920
  %921 = inttoptr i64 %2266 to double*
  %922 = load double, double* %921
  %923 = inttoptr i64 %2287 to double*
  %924 = load double, double* %923
  %925 = fmul double %922, %924
  %926 = inttoptr i64 %2268 to double*
  store double %925, double* %926
  %927 = inttoptr i64 %2288 to double*
  %928 = load double, double* %927
  %929 = inttoptr i64 %2268 to double*
  %930 = load double, double* %929
  %931 = inttoptr i64 %2270 to double*
  %932 = load double, double* %931
  %933 = fmul double %930, %932
  %934 = fsub double %928, %933
  %935 = inttoptr i64 %2288 to double*
  store double %934, double* %935
  %936 = inttoptr i64 %2289 to double*
  %937 = load double, double* %936
  %938 = inttoptr i64 %2268 to double*
  %939 = load double, double* %938
  %940 = inttoptr i64 %2272 to double*
  %941 = load double, double* %940
  %942 = fmul double %939, %941
  %943 = fsub double %937, %942
  %944 = inttoptr i64 %2289 to double*
  store double %943, double* %944
  %945 = inttoptr i64 %2290 to double*
  %946 = load double, double* %945
  %947 = inttoptr i64 %2268 to double*
  %948 = load double, double* %947
  %949 = inttoptr i64 %2274 to double*
  %950 = load double, double* %949
  %951 = fmul double %948, %950
  %952 = fsub double %946, %951
  %953 = inttoptr i64 %2290 to double*
  store double %952, double* %953
  %954 = inttoptr i64 %2291 to double*
  %955 = load double, double* %954
  %956 = inttoptr i64 %2268 to double*
  %957 = load double, double* %956
  %958 = inttoptr i64 %2276 to double*
  %959 = load double, double* %958
  %960 = fmul double %957, %959
  %961 = fsub double %955, %960
  %962 = inttoptr i64 %2291 to double*
  store double %961, double* %962
  %963 = inttoptr i64 %2245 to i64*
  %964 = load i64, i64* %963
  %965 = inttoptr i64 %2238 to i32*
  %966 = load i32, i32* %965
  %967 = sext i32 %966 to i64
  %968 = load i64, i64* %29, align 8
  %969 = mul i64 %968, %967
  %970 = mul i64 %969, 40
  %971 = add i64 %970, %964
  %972 = inttoptr i64 %2242 to i32*
  %973 = load i32, i32* %972
  %974 = sext i32 %973 to i64
  %975 = mul nsw i64 %974, 40
  %976 = add i64 %975, %971
  %977 = add i64 %976, 32
  %978 = inttoptr i64 %977 to double*
  %979 = load double, double* %978
  %980 = inttoptr i64 %976 to double*
  %981 = load double, double* %980
  %982 = inttoptr i64 %2268 to double*
  %983 = load double, double* %982
  %984 = fmul double %981, %983
  %985 = fsub double %979, %984
  %986 = inttoptr i64 %977 to double*
  store double %985, double* %986
  %987 = load <2 x i32>, <2 x i32>* %2262, align 1
  %988 = extractelement <2 x i32> %987, i32 0
  store i32 %988, i32* %2263, align 1, !tbaa !1292
  %989 = extractelement <2 x i32> %987, i32 1
  store i32 %989, i32* %2265, align 1, !tbaa !1292
  %990 = load double, double* %553, align 1
  %991 = inttoptr i64 %2269 to double*
  %992 = load double, double* %991
  %993 = fdiv double %990, %992
  %994 = inttoptr i64 %2266 to double*
  store double %993, double* %994
  %995 = inttoptr i64 %2266 to double*
  %996 = load double, double* %995
  %997 = inttoptr i64 %2278 to double*
  %998 = load double, double* %997
  %999 = fmul double %996, %998
  %1000 = inttoptr i64 %2268 to double*
  store double %999, double* %1000
  %1001 = inttoptr i64 %2279 to double*
  %1002 = load double, double* %1001
  %1003 = inttoptr i64 %2268 to double*
  %1004 = load double, double* %1003
  %1005 = inttoptr i64 %2271 to double*
  %1006 = load double, double* %1005
  %1007 = fmul double %1004, %1006
  %1008 = fsub double %1002, %1007
  %1009 = inttoptr i64 %2279 to double*
  store double %1008, double* %1009
  %1010 = inttoptr i64 %2280 to double*
  %1011 = load double, double* %1010
  %1012 = inttoptr i64 %2268 to double*
  %1013 = load double, double* %1012
  %1014 = inttoptr i64 %2273 to double*
  %1015 = load double, double* %1014
  %1016 = fmul double %1013, %1015
  %1017 = fsub double %1011, %1016
  %1018 = inttoptr i64 %2280 to double*
  store double %1017, double* %1018
  %1019 = inttoptr i64 %2281 to double*
  %1020 = load double, double* %1019
  %1021 = inttoptr i64 %2268 to double*
  %1022 = load double, double* %1021
  %1023 = inttoptr i64 %2275 to double*
  %1024 = load double, double* %1023
  %1025 = fmul double %1022, %1024
  %1026 = fsub double %1020, %1025
  %1027 = inttoptr i64 %2281 to double*
  store double %1026, double* %1027
  %1028 = inttoptr i64 %2245 to i64*
  %1029 = load i64, i64* %1028
  %1030 = inttoptr i64 %2238 to i32*
  %1031 = load i32, i32* %1030
  %1032 = sext i32 %1031 to i64
  %1033 = load i64, i64* %29, align 8
  %1034 = mul i64 %1033, %1032
  %1035 = mul i64 %1034, 40
  %1036 = add i64 %1035, %1029
  %1037 = inttoptr i64 %2242 to i32*
  %1038 = load i32, i32* %1037
  %1039 = sext i32 %1038 to i64
  %1040 = mul nsw i64 %1039, 40
  %1041 = add i64 %1040, %1036
  %1042 = add i64 %1041, 16
  %1043 = inttoptr i64 %1042 to double*
  %1044 = load double, double* %1043
  %1045 = add i64 %1041, 8
  %1046 = inttoptr i64 %1045 to double*
  %1047 = load double, double* %1046
  %1048 = inttoptr i64 %2268 to double*
  %1049 = load double, double* %1048
  %1050 = fmul double %1047, %1049
  %1051 = fsub double %1044, %1050
  %1052 = inttoptr i64 %1042 to double*
  store double %1051, double* %1052
  %1053 = inttoptr i64 %2266 to double*
  %1054 = load double, double* %1053
  %1055 = inttoptr i64 %2283 to double*
  %1056 = load double, double* %1055
  %1057 = fmul double %1054, %1056
  %1058 = inttoptr i64 %2268 to double*
  store double %1057, double* %1058
  %1059 = inttoptr i64 %2284 to double*
  %1060 = load double, double* %1059
  %1061 = inttoptr i64 %2268 to double*
  %1062 = load double, double* %1061
  %1063 = inttoptr i64 %2271 to double*
  %1064 = load double, double* %1063
  %1065 = fmul double %1062, %1064
  %1066 = fsub double %1060, %1065
  %1067 = inttoptr i64 %2284 to double*
  store double %1066, double* %1067
  %1068 = inttoptr i64 %2285 to double*
  %1069 = load double, double* %1068
  %1070 = inttoptr i64 %2268 to double*
  %1071 = load double, double* %1070
  %1072 = inttoptr i64 %2273 to double*
  %1073 = load double, double* %1072
  %1074 = fmul double %1071, %1073
  %1075 = fsub double %1069, %1074
  %1076 = inttoptr i64 %2285 to double*
  store double %1075, double* %1076
  %1077 = inttoptr i64 %2286 to double*
  %1078 = load double, double* %1077
  %1079 = inttoptr i64 %2268 to double*
  %1080 = load double, double* %1079
  %1081 = inttoptr i64 %2275 to double*
  %1082 = load double, double* %1081
  %1083 = fmul double %1080, %1082
  %1084 = fsub double %1078, %1083
  %1085 = inttoptr i64 %2286 to double*
  store double %1084, double* %1085
  %1086 = inttoptr i64 %2245 to i64*
  %1087 = load i64, i64* %1086
  %1088 = inttoptr i64 %2238 to i32*
  %1089 = load i32, i32* %1088
  %1090 = sext i32 %1089 to i64
  %1091 = mul i64 %1033, %1090
  %1092 = mul i64 %1091, 40
  %1093 = add i64 %1092, %1087
  %1094 = inttoptr i64 %2242 to i32*
  %1095 = load i32, i32* %1094
  %1096 = sext i32 %1095 to i64
  %1097 = mul nsw i64 %1096, 40
  %1098 = add i64 %1097, %1093
  %1099 = add i64 %1098, 24
  %1100 = inttoptr i64 %1099 to double*
  %1101 = load double, double* %1100
  %1102 = load i64, i64* %29, align 8
  %1103 = mul i64 %1102, %1090
  %1104 = mul i64 %1103, 40
  %1105 = add i64 %1104, %1087
  %1106 = add i64 %1097, %1105
  %1107 = add i64 %1106, 8
  %1108 = inttoptr i64 %1107 to double*
  %1109 = load double, double* %1108
  %1110 = inttoptr i64 %2268 to double*
  %1111 = load double, double* %1110
  %1112 = fmul double %1109, %1111
  %1113 = fsub double %1101, %1112
  %1114 = add i64 %1106, 24
  %1115 = inttoptr i64 %1114 to double*
  store double %1113, double* %1115
  %1116 = inttoptr i64 %2266 to double*
  %1117 = load double, double* %1116
  %1118 = inttoptr i64 %2288 to double*
  %1119 = load double, double* %1118
  %1120 = fmul double %1117, %1119
  %1121 = inttoptr i64 %2268 to double*
  store double %1120, double* %1121
  %1122 = inttoptr i64 %2289 to double*
  %1123 = load double, double* %1122
  %1124 = inttoptr i64 %2268 to double*
  %1125 = load double, double* %1124
  %1126 = inttoptr i64 %2271 to double*
  %1127 = load double, double* %1126
  %1128 = fmul double %1125, %1127
  %1129 = fsub double %1123, %1128
  %1130 = inttoptr i64 %2289 to double*
  store double %1129, double* %1130
  %1131 = inttoptr i64 %2290 to double*
  %1132 = load double, double* %1131
  %1133 = inttoptr i64 %2268 to double*
  %1134 = load double, double* %1133
  %1135 = inttoptr i64 %2273 to double*
  %1136 = load double, double* %1135
  %1137 = fmul double %1134, %1136
  %1138 = fsub double %1132, %1137
  %1139 = inttoptr i64 %2290 to double*
  store double %1138, double* %1139
  %1140 = inttoptr i64 %2291 to double*
  %1141 = load double, double* %1140
  %1142 = inttoptr i64 %2268 to double*
  %1143 = load double, double* %1142
  %1144 = inttoptr i64 %2275 to double*
  %1145 = load double, double* %1144
  %1146 = fmul double %1143, %1145
  %1147 = fsub double %1141, %1146
  %1148 = inttoptr i64 %2291 to double*
  store double %1147, double* %1148
  %1149 = inttoptr i64 %2245 to i64*
  %1150 = load i64, i64* %1149
  %1151 = inttoptr i64 %2238 to i32*
  %1152 = load i32, i32* %1151
  %1153 = sext i32 %1152 to i64
  %1154 = mul i64 %1102, %1153
  %1155 = mul i64 %1154, 40
  %1156 = add i64 %1155, %1150
  %1157 = inttoptr i64 %2242 to i32*
  %1158 = load i32, i32* %1157
  %1159 = sext i32 %1158 to i64
  %1160 = mul nsw i64 %1159, 40
  %1161 = add i64 %1160, %1156
  %1162 = add i64 %1161, 32
  %1163 = inttoptr i64 %1162 to double*
  %1164 = load double, double* %1163
  %1165 = load i64, i64* %29, align 8
  %1166 = mul i64 %1165, %1153
  %1167 = mul i64 %1166, 40
  %1168 = add i64 %1167, %1150
  %1169 = add i64 %1160, %1168
  %1170 = add i64 %1169, 8
  %1171 = inttoptr i64 %1170 to double*
  %1172 = load double, double* %1171
  %1173 = inttoptr i64 %2268 to double*
  %1174 = load double, double* %1173
  %1175 = fmul double %1172, %1174
  %1176 = fsub double %1164, %1175
  %1177 = add i64 %1169, 32
  %1178 = inttoptr i64 %1177 to double*
  store double %1176, double* %1178
  %1179 = load <2 x i32>, <2 x i32>* %2262, align 1
  %1180 = extractelement <2 x i32> %1179, i32 0
  store i32 %1180, i32* %2263, align 1, !tbaa !1292
  %1181 = extractelement <2 x i32> %1179, i32 1
  store i32 %1181, i32* %2265, align 1, !tbaa !1292
  %1182 = load double, double* %553, align 1
  %1183 = inttoptr i64 %2279 to double*
  %1184 = load double, double* %1183
  %1185 = fdiv double %1182, %1184
  %1186 = inttoptr i64 %2266 to double*
  store double %1185, double* %1186
  %1187 = inttoptr i64 %2266 to double*
  %1188 = load double, double* %1187
  %1189 = inttoptr i64 %2284 to double*
  %1190 = load double, double* %1189
  %1191 = fmul double %1188, %1190
  %1192 = inttoptr i64 %2268 to double*
  store double %1191, double* %1192
  %1193 = inttoptr i64 %2285 to double*
  %1194 = load double, double* %1193
  %1195 = inttoptr i64 %2268 to double*
  %1196 = load double, double* %1195
  %1197 = inttoptr i64 %2280 to double*
  %1198 = load double, double* %1197
  %1199 = fmul double %1196, %1198
  %1200 = fsub double %1194, %1199
  %1201 = inttoptr i64 %2285 to double*
  store double %1200, double* %1201
  %1202 = inttoptr i64 %2286 to double*
  %1203 = load double, double* %1202
  %1204 = inttoptr i64 %2268 to double*
  %1205 = load double, double* %1204
  %1206 = inttoptr i64 %2281 to double*
  %1207 = load double, double* %1206
  %1208 = fmul double %1205, %1207
  %1209 = fsub double %1203, %1208
  %1210 = inttoptr i64 %2286 to double*
  store double %1209, double* %1210
  %1211 = inttoptr i64 %2245 to i64*
  %1212 = load i64, i64* %1211
  %1213 = inttoptr i64 %2238 to i32*
  %1214 = load i32, i32* %1213
  %1215 = sext i32 %1214 to i64
  %1216 = mul i64 %1165, %1215
  %1217 = mul i64 %1216, 40
  %1218 = add i64 %1217, %1212
  %1219 = inttoptr i64 %2242 to i32*
  %1220 = load i32, i32* %1219
  %1221 = sext i32 %1220 to i64
  %1222 = mul nsw i64 %1221, 40
  %1223 = add i64 %1222, %1218
  %1224 = add i64 %1223, 24
  %1225 = inttoptr i64 %1224 to double*
  %1226 = load double, double* %1225
  %1227 = load i64, i64* %29, align 8
  %1228 = mul i64 %1227, %1215
  %1229 = mul i64 %1228, 40
  %1230 = add i64 %1229, %1212
  %1231 = add i64 %1222, %1230
  %1232 = add i64 %1231, 16
  %1233 = inttoptr i64 %1232 to double*
  %1234 = load double, double* %1233
  %1235 = inttoptr i64 %2268 to double*
  %1236 = load double, double* %1235
  %1237 = fmul double %1234, %1236
  %1238 = fsub double %1226, %1237
  %1239 = add i64 %1231, 24
  %1240 = inttoptr i64 %1239 to double*
  store double %1238, double* %1240
  %1241 = inttoptr i64 %2266 to double*
  %1242 = load double, double* %1241
  %1243 = inttoptr i64 %2289 to double*
  %1244 = load double, double* %1243
  %1245 = fmul double %1242, %1244
  %1246 = inttoptr i64 %2268 to double*
  store double %1245, double* %1246
  %1247 = inttoptr i64 %2290 to double*
  %1248 = load double, double* %1247
  %1249 = inttoptr i64 %2268 to double*
  %1250 = load double, double* %1249
  %1251 = inttoptr i64 %2280 to double*
  %1252 = load double, double* %1251
  %1253 = fmul double %1250, %1252
  %1254 = fsub double %1248, %1253
  %1255 = inttoptr i64 %2290 to double*
  store double %1254, double* %1255
  %1256 = inttoptr i64 %2291 to double*
  %1257 = load double, double* %1256
  %1258 = inttoptr i64 %2268 to double*
  %1259 = load double, double* %1258
  %1260 = inttoptr i64 %2281 to double*
  %1261 = load double, double* %1260
  %1262 = fmul double %1259, %1261
  %1263 = fsub double %1257, %1262
  %1264 = inttoptr i64 %2291 to double*
  store double %1263, double* %1264
  %1265 = inttoptr i64 %2245 to i64*
  %1266 = load i64, i64* %1265
  %1267 = inttoptr i64 %2238 to i32*
  %1268 = load i32, i32* %1267
  %1269 = sext i32 %1268 to i64
  %1270 = mul i64 %1227, %1269
  %1271 = mul i64 %1270, 40
  %1272 = add i64 %1271, %1266
  %1273 = inttoptr i64 %2242 to i32*
  %1274 = load i32, i32* %1273
  %1275 = sext i32 %1274 to i64
  %1276 = mul nsw i64 %1275, 40
  %1277 = add i64 %1276, %1272
  %1278 = add i64 %1277, 32
  %1279 = inttoptr i64 %1278 to double*
  %1280 = load double, double* %1279
  %1281 = add i64 %1277, 16
  %1282 = inttoptr i64 %1281 to double*
  %1283 = load double, double* %1282
  %1284 = inttoptr i64 %2268 to double*
  %1285 = load double, double* %1284
  %1286 = fmul double %1283, %1285
  store double %1286, double* %560, align 1, !tbaa !1264
  store i64 0, i64* %561, align 1, !tbaa !1264
  %1287 = fsub double %1280, %1286
  %1288 = load i64, i64* %29, align 8
  %1289 = mul i64 %1288, %1269
  %1290 = mul i64 %1289, 40
  %1291 = add i64 %1290, %1266
  %1292 = add i64 %1276, %1291
  %1293 = add i64 %1292, 32
  %1294 = inttoptr i64 %1293 to double*
  store double %1287, double* %1294
  %1295 = load double, double* %176, align 1
  %1296 = inttoptr i64 %2285 to double*
  %1297 = load double, double* %1296
  %1298 = fdiv double %1295, %1297
  %1299 = inttoptr i64 %2266 to double*
  store double %1298, double* %1299
  %1300 = inttoptr i64 %2266 to double*
  %1301 = load double, double* %1300
  %1302 = inttoptr i64 %2290 to double*
  %1303 = load double, double* %1302
  %1304 = fmul double %1301, %1303
  %1305 = inttoptr i64 %2268 to double*
  store double %1304, double* %1305
  %1306 = inttoptr i64 %2291 to double*
  %1307 = load double, double* %1306
  %1308 = inttoptr i64 %2268 to double*
  %1309 = load double, double* %1308
  %1310 = inttoptr i64 %2286 to double*
  %1311 = load double, double* %1310
  %1312 = fmul double %1309, %1311
  %1313 = fsub double %1307, %1312
  %1314 = inttoptr i64 %2291 to double*
  store double %1313, double* %1314
  %1315 = inttoptr i64 %2245 to i64*
  %1316 = load i64, i64* %1315
  %1317 = inttoptr i64 %2238 to i32*
  %1318 = load i32, i32* %1317
  %1319 = sext i32 %1318 to i64
  %1320 = mul i64 %1288, %1319
  %1321 = mul i64 %1320, 40
  %1322 = add i64 %1321, %1316
  %1323 = inttoptr i64 %2242 to i32*
  %1324 = load i32, i32* %1323
  %1325 = sext i32 %1324 to i64
  %1326 = mul nsw i64 %1325, 40
  %1327 = add i64 %1326, %1322
  %1328 = add i64 %1327, 32
  %1329 = inttoptr i64 %1328 to double*
  %1330 = load double, double* %1329
  %1331 = add i64 %1327, 24
  %1332 = inttoptr i64 %1331 to double*
  %1333 = load double, double* %1332
  %1334 = inttoptr i64 %2268 to double*
  %1335 = load double, double* %1334
  %1336 = fmul double %1333, %1335
  %1337 = fsub double %1330, %1336
  %1338 = inttoptr i64 %1328 to double*
  store double %1337, double* %1338
  %1339 = inttoptr i64 %2245 to i64*
  %1340 = load i64, i64* %1339
  %1341 = inttoptr i64 %2238 to i32*
  %1342 = load i32, i32* %1341
  %1343 = sext i32 %1342 to i64
  %1344 = mul i64 %1288, %1343
  %1345 = mul i64 %1344, 40
  %1346 = add i64 %1345, %1340
  %1347 = inttoptr i64 %2242 to i32*
  %1348 = load i32, i32* %1347
  %1349 = sext i32 %1348 to i64
  %1350 = mul nsw i64 %1349, 40
  %1351 = add i64 %1350, %1346
  %1352 = add i64 %1351, 32
  %1353 = inttoptr i64 %1352 to double*
  %1354 = load double, double* %1353
  %1355 = inttoptr i64 %2291 to double*
  %1356 = load double, double* %1355
  %1357 = fdiv double %1354, %1356
  %1358 = load i64, i64* %29, align 8
  %1359 = mul i64 %1358, %1343
  %1360 = mul i64 %1359, 40
  %1361 = add i64 %1360, %1340
  %1362 = add i64 %1350, %1361
  %1363 = add i64 %1362, 32
  %1364 = inttoptr i64 %1363 to double*
  store double %1357, double* %1364
  %1365 = inttoptr i64 %2245 to i64*
  %1366 = load i64, i64* %1365
  %1367 = inttoptr i64 %2238 to i32*
  %1368 = load i32, i32* %1367
  %1369 = sext i32 %1368 to i64
  %1370 = mul i64 %1358, %1369
  %1371 = mul i64 %1370, 40
  %1372 = add i64 %1371, %1366
  %1373 = inttoptr i64 %2242 to i32*
  %1374 = load i32, i32* %1373
  %1375 = sext i32 %1374 to i64
  %1376 = mul nsw i64 %1375, 40
  %1377 = add i64 %1376, %1372
  %1378 = add i64 %1377, 24
  %1379 = inttoptr i64 %1378 to double*
  %1380 = load double, double* %1379
  %1381 = inttoptr i64 %2286 to double*
  %1382 = load double, double* %1381
  %1383 = add i64 %1377, 32
  %1384 = inttoptr i64 %1383 to double*
  %1385 = load double, double* %1384
  %1386 = fmul double %1382, %1385
  %1387 = fsub double %1380, %1386
  %1388 = inttoptr i64 %1378 to double*
  store double %1387, double* %1388
  %1389 = inttoptr i64 %2245 to i64*
  %1390 = load i64, i64* %1389
  %1391 = inttoptr i64 %2238 to i32*
  %1392 = load i32, i32* %1391
  %1393 = sext i32 %1392 to i64
  %1394 = mul i64 %1358, %1393
  %1395 = mul i64 %1394, 40
  %1396 = add i64 %1395, %1390
  %1397 = inttoptr i64 %2242 to i32*
  %1398 = load i32, i32* %1397
  %1399 = sext i32 %1398 to i64
  %1400 = mul nsw i64 %1399, 40
  %1401 = add i64 %1400, %1396
  %1402 = add i64 %1401, 24
  %1403 = inttoptr i64 %1402 to double*
  %1404 = load double, double* %1403
  %1405 = inttoptr i64 %2285 to double*
  %1406 = load double, double* %1405
  %1407 = fdiv double %1404, %1406
  %1408 = inttoptr i64 %1402 to double*
  store double %1407, double* %1408
  %1409 = inttoptr i64 %2245 to i64*
  %1410 = load i64, i64* %1409
  %1411 = inttoptr i64 %2238 to i32*
  %1412 = load i32, i32* %1411
  %1413 = sext i32 %1412 to i64
  %1414 = mul i64 %1358, %1413
  %1415 = mul i64 %1414, 40
  %1416 = add i64 %1415, %1410
  %1417 = inttoptr i64 %2242 to i32*
  %1418 = load i32, i32* %1417
  %1419 = sext i32 %1418 to i64
  %1420 = mul nsw i64 %1419, 40
  %1421 = add i64 %1420, %1416
  %1422 = add i64 %1421, 16
  %1423 = inttoptr i64 %1422 to double*
  %1424 = load double, double* %1423
  %1425 = inttoptr i64 %2280 to double*
  %1426 = load double, double* %1425
  %1427 = load i64, i64* %29, align 8
  %1428 = mul i64 %1427, %1413
  %1429 = mul i64 %1428, 40
  %1430 = add i64 %1429, %1410
  %1431 = add i64 %1420, %1430
  %1432 = add i64 %1431, 24
  %1433 = inttoptr i64 %1432 to double*
  %1434 = load double, double* %1433
  %1435 = fmul double %1426, %1434
  %1436 = fsub double %1424, %1435
  %1437 = inttoptr i64 %2281 to double*
  %1438 = load double, double* %1437
  %1439 = add i64 %1431, 32
  %1440 = inttoptr i64 %1439 to double*
  %1441 = load double, double* %1440
  %1442 = fmul double %1438, %1441
  %1443 = fsub double %1436, %1442
  %1444 = add i64 %1431, 16
  %1445 = inttoptr i64 %1444 to double*
  store double %1443, double* %1445
  %1446 = inttoptr i64 %2245 to i64*
  %1447 = load i64, i64* %1446
  %1448 = inttoptr i64 %2238 to i32*
  %1449 = load i32, i32* %1448
  %1450 = sext i32 %1449 to i64
  %1451 = mul i64 %1427, %1450
  %1452 = mul i64 %1451, 40
  %1453 = add i64 %1452, %1447
  %1454 = inttoptr i64 %2242 to i32*
  %1455 = load i32, i32* %1454
  %1456 = sext i32 %1455 to i64
  %1457 = mul nsw i64 %1456, 40
  %1458 = add i64 %1457, %1453
  %1459 = add i64 %1458, 16
  %1460 = inttoptr i64 %1459 to double*
  %1461 = load double, double* %1460
  %1462 = inttoptr i64 %2279 to double*
  %1463 = load double, double* %1462
  %1464 = fdiv double %1461, %1463
  %1465 = inttoptr i64 %1459 to double*
  store double %1464, double* %1465
  %1466 = inttoptr i64 %2245 to i64*
  %1467 = load i64, i64* %1466
  %1468 = inttoptr i64 %2238 to i32*
  %1469 = load i32, i32* %1468
  %1470 = sext i32 %1469 to i64
  %1471 = mul i64 %1427, %1470
  %1472 = mul i64 %1471, 40
  %1473 = add i64 %1472, %1467
  %1474 = inttoptr i64 %2242 to i32*
  %1475 = load i32, i32* %1474
  %1476 = sext i32 %1475 to i64
  %1477 = mul nsw i64 %1476, 40
  %1478 = add i64 %1477, %1473
  %1479 = add i64 %1478, 8
  %1480 = inttoptr i64 %1479 to double*
  %1481 = load double, double* %1480
  %1482 = inttoptr i64 %2271 to double*
  %1483 = load double, double* %1482
  %1484 = add i64 %1478, 16
  %1485 = inttoptr i64 %1484 to double*
  %1486 = load double, double* %1485
  %1487 = fmul double %1483, %1486
  %1488 = fsub double %1481, %1487
  %1489 = inttoptr i64 %2273 to double*
  %1490 = load double, double* %1489
  %1491 = load i64, i64* %29, align 8
  %1492 = mul i64 %1491, %1470
  %1493 = mul i64 %1492, 40
  %1494 = add i64 %1493, %1467
  %1495 = add i64 %1477, %1494
  %1496 = add i64 %1495, 24
  %1497 = inttoptr i64 %1496 to double*
  %1498 = load double, double* %1497
  %1499 = fmul double %1490, %1498
  %1500 = fsub double %1488, %1499
  %1501 = inttoptr i64 %2275 to double*
  %1502 = load double, double* %1501
  %1503 = add i64 %1495, 32
  %1504 = inttoptr i64 %1503 to double*
  %1505 = load double, double* %1504
  %1506 = fmul double %1502, %1505
  %1507 = fsub double %1500, %1506
  %1508 = add i64 %1495, 8
  %1509 = inttoptr i64 %1508 to double*
  store double %1507, double* %1509
  %1510 = inttoptr i64 %2245 to i64*
  %1511 = load i64, i64* %1510
  %1512 = inttoptr i64 %2238 to i32*
  %1513 = load i32, i32* %1512
  %1514 = sext i32 %1513 to i64
  %1515 = mul i64 %1491, %1514
  %1516 = mul i64 %1515, 40
  %1517 = add i64 %1516, %1511
  %1518 = inttoptr i64 %2242 to i32*
  %1519 = load i32, i32* %1518
  %1520 = sext i32 %1519 to i64
  %1521 = mul nsw i64 %1520, 40
  %1522 = add i64 %1521, %1517
  %1523 = add i64 %1522, 8
  %1524 = inttoptr i64 %1523 to double*
  %1525 = load double, double* %1524
  %1526 = inttoptr i64 %2269 to double*
  %1527 = load double, double* %1526
  %1528 = fdiv double %1525, %1527
  %1529 = inttoptr i64 %1523 to double*
  store double %1528, double* %1529
  %1530 = inttoptr i64 %2245 to i64*
  %1531 = load i64, i64* %1530
  %1532 = inttoptr i64 %2238 to i32*
  %1533 = load i32, i32* %1532
  %1534 = sext i32 %1533 to i64
  %1535 = mul i64 %1491, %1534
  %1536 = mul i64 %1535, 40
  %1537 = add i64 %1536, %1531
  %1538 = inttoptr i64 %2242 to i32*
  %1539 = load i32, i32* %1538
  %1540 = sext i32 %1539 to i64
  %1541 = mul nsw i64 %1540, 40
  %1542 = add i64 %1541, %1537
  %1543 = inttoptr i64 %1542 to double*
  %1544 = load double, double* %1543
  %1545 = inttoptr i64 %2270 to double*
  %1546 = load double, double* %1545
  %1547 = add i64 %1542, 8
  %1548 = inttoptr i64 %1547 to double*
  %1549 = load double, double* %1548
  %1550 = fmul double %1546, %1549
  %1551 = fsub double %1544, %1550
  %1552 = inttoptr i64 %2272 to double*
  %1553 = load double, double* %1552
  %1554 = load i64, i64* %29, align 8
  %1555 = mul i64 %1554, %1534
  %1556 = mul i64 %1555, 40
  %1557 = add i64 %1556, %1531
  %1558 = add i64 %1541, %1557
  %1559 = add i64 %1558, 16
  %1560 = inttoptr i64 %1559 to double*
  %1561 = load double, double* %1560
  %1562 = fmul double %1553, %1561
  %1563 = fsub double %1551, %1562
  %1564 = inttoptr i64 %2274 to double*
  %1565 = load double, double* %1564
  %1566 = add i64 %1558, 24
  %1567 = inttoptr i64 %1566 to double*
  %1568 = load double, double* %1567
  %1569 = fmul double %1565, %1568
  %1570 = fsub double %1563, %1569
  %1571 = inttoptr i64 %2276 to double*
  %1572 = load double, double* %1571
  %1573 = add i64 %1558, 32
  %1574 = inttoptr i64 %1573 to double*
  %1575 = load double, double* %1574
  %1576 = fmul double %1572, %1575
  store double %1576, double* %553, align 1, !tbaa !1264
  store i64 0, i64* %554, align 1, !tbaa !1264
  %1577 = fsub double %1570, %1576
  %1578 = inttoptr i64 %1558 to double*
  store double %1577, double* %1578
  %1579 = inttoptr i64 %2245 to i64*
  %1580 = load i64, i64* %1579
  %1581 = inttoptr i64 %2238 to i32*
  %1582 = load i32, i32* %1581
  %1583 = sext i32 %1582 to i64
  %1584 = mul i64 %1554, %1583
  %1585 = mul i64 %1584, 40
  %1586 = add i64 %1585, %1580
  %1587 = inttoptr i64 %2242 to i32*
  %1588 = load i32, i32* %1587
  %1589 = sext i32 %1588 to i64
  %1590 = mul nsw i64 %1589, 40
  %1591 = add i64 %1590, %1586
  %1592 = inttoptr i64 %1591 to double*
  %1593 = load double, double* %1592
  %1594 = inttoptr i64 %2258 to double*
  %1595 = load double, double* %1594
  %1596 = fdiv double %1593, %1595
  %1597 = inttoptr i64 %1591 to double*
  store double %1596, double* %1597
  %1598 = inttoptr i64 %2250 to i64*
  %1599 = load i64, i64* %1598
  %1600 = inttoptr i64 %2251 to i32*
  %1601 = load i32, i32* %1600
  %1602 = sext i32 %1601 to i64
  %1603 = inttoptr i64 %2252 to i64*
  %1604 = load i64, i64* %1603
  %1605 = inttoptr i64 %2253 to i64*
  %1606 = load i64, i64* %1605
  store i64 %1606, i64* %31, align 8, !tbaa !1240
  %1607 = mul i64 %1606, %1604
  %1608 = mul i64 %1607, %1602
  %1609 = mul i64 %1608, 40
  %1610 = add i64 %1609, %1599
  %1611 = inttoptr i64 %2238 to i32*
  %1612 = load i32, i32* %1611
  %1613 = sext i32 %1612 to i64
  %1614 = mul i64 %1606, %1613
  %1615 = mul i64 %1614, 40
  %1616 = add i64 %1615, %1610
  %1617 = inttoptr i64 %2242 to i32*
  %1618 = load i32, i32* %1617
  %1619 = sext i32 %1618 to i64
  %1620 = mul nsw i64 %1619, 40
  %1621 = add i64 %1620, %1616
  %1622 = inttoptr i64 %1621 to double*
  %1623 = load double, double* %1622
  %1624 = inttoptr i64 %2245 to i64*
  %1625 = load i64, i64* %1624
  %1626 = load i64, i64* %29, align 8
  %1627 = mul i64 %1626, %1613
  %1628 = mul i64 %1627, 40
  %1629 = add i64 %1628, %1625
  %1630 = add i64 %1620, %1629
  %1631 = inttoptr i64 %1630 to double*
  %1632 = load double, double* %1631
  %1633 = fsub double %1623, %1632
  %1634 = inttoptr i64 %1621 to double*
  store double %1633, double* %1634
  %1635 = inttoptr i64 %2250 to i64*
  %1636 = load i64, i64* %1635
  %1637 = inttoptr i64 %2251 to i32*
  %1638 = load i32, i32* %1637
  %1639 = sext i32 %1638 to i64
  %1640 = inttoptr i64 %2252 to i64*
  %1641 = load i64, i64* %1640
  %1642 = mul i64 %1606, %1641
  %1643 = mul i64 %1642, %1639
  %1644 = mul i64 %1643, 40
  %1645 = add i64 %1644, %1636
  %1646 = inttoptr i64 %2238 to i32*
  %1647 = load i32, i32* %1646
  %1648 = sext i32 %1647 to i64
  %1649 = mul i64 %1606, %1648
  %1650 = mul i64 %1649, 40
  %1651 = add i64 %1650, %1645
  %1652 = inttoptr i64 %2242 to i32*
  %1653 = load i32, i32* %1652
  %1654 = sext i32 %1653 to i64
  %1655 = mul nsw i64 %1654, 40
  %1656 = add i64 %1655, %1651
  %1657 = add i64 %1656, 8
  %1658 = inttoptr i64 %1657 to double*
  %1659 = load double, double* %1658
  %1660 = inttoptr i64 %2245 to i64*
  %1661 = load i64, i64* %1660
  %1662 = mul i64 %1626, %1648
  %1663 = mul i64 %1662, 40
  %1664 = add i64 %1663, %1661
  %1665 = add i64 %1655, %1664
  %1666 = add i64 %1665, 8
  %1667 = inttoptr i64 %1666 to double*
  %1668 = load double, double* %1667
  %1669 = fsub double %1659, %1668
  %1670 = load i64, i64* %31, align 8
  %1671 = mul i64 %1670, %1641
  %1672 = mul i64 %1671, %1639
  %1673 = mul i64 %1672, 40
  %1674 = add i64 %1673, %1636
  %1675 = mul i64 %1670, %1648
  %1676 = mul i64 %1675, 40
  %1677 = add i64 %1676, %1674
  %1678 = add i64 %1655, %1677
  %1679 = add i64 %1678, 8
  %1680 = inttoptr i64 %1679 to double*
  store double %1669, double* %1680
  %1681 = inttoptr i64 %2250 to i64*
  %1682 = load i64, i64* %1681
  %1683 = inttoptr i64 %2251 to i32*
  %1684 = load i32, i32* %1683
  %1685 = sext i32 %1684 to i64
  %1686 = inttoptr i64 %2252 to i64*
  %1687 = load i64, i64* %1686
  %1688 = mul i64 %1670, %1687
  %1689 = mul i64 %1688, %1685
  %1690 = mul i64 %1689, 40
  %1691 = add i64 %1690, %1682
  %1692 = inttoptr i64 %2238 to i32*
  %1693 = load i32, i32* %1692
  %1694 = sext i32 %1693 to i64
  %1695 = mul i64 %1670, %1694
  %1696 = mul i64 %1695, 40
  %1697 = add i64 %1696, %1691
  %1698 = inttoptr i64 %2242 to i32*
  %1699 = load i32, i32* %1698
  %1700 = sext i32 %1699 to i64
  %1701 = mul nsw i64 %1700, 40
  %1702 = add i64 %1701, %1697
  %1703 = add i64 %1702, 16
  %1704 = inttoptr i64 %1703 to double*
  %1705 = load double, double* %1704
  %1706 = inttoptr i64 %2245 to i64*
  %1707 = load i64, i64* %1706
  %1708 = load i64, i64* %29, align 8
  %1709 = mul i64 %1708, %1694
  %1710 = mul i64 %1709, 40
  %1711 = add i64 %1710, %1707
  %1712 = add i64 %1701, %1711
  %1713 = add i64 %1712, 16
  %1714 = inttoptr i64 %1713 to double*
  %1715 = load double, double* %1714
  %1716 = fsub double %1705, %1715
  %1717 = inttoptr i64 %1703 to double*
  store double %1716, double* %1717
  %1718 = inttoptr i64 %2250 to i64*
  %1719 = load i64, i64* %1718
  %1720 = inttoptr i64 %2251 to i32*
  %1721 = load i32, i32* %1720
  %1722 = sext i32 %1721 to i64
  %1723 = inttoptr i64 %2252 to i64*
  %1724 = load i64, i64* %1723
  %1725 = mul i64 %1670, %1724
  %1726 = mul i64 %1725, %1722
  %1727 = mul i64 %1726, 40
  %1728 = add i64 %1727, %1719
  %1729 = inttoptr i64 %2238 to i32*
  %1730 = load i32, i32* %1729
  %1731 = sext i32 %1730 to i64
  %1732 = mul i64 %1670, %1731
  %1733 = mul i64 %1732, 40
  %1734 = add i64 %1733, %1728
  %1735 = inttoptr i64 %2242 to i32*
  %1736 = load i32, i32* %1735
  %1737 = sext i32 %1736 to i64
  %1738 = mul nsw i64 %1737, 40
  %1739 = add i64 %1738, %1734
  %1740 = add i64 %1739, 24
  %1741 = inttoptr i64 %1740 to double*
  %1742 = load double, double* %1741
  %1743 = inttoptr i64 %2245 to i64*
  %1744 = load i64, i64* %1743
  %1745 = mul i64 %1708, %1731
  %1746 = mul i64 %1745, 40
  %1747 = add i64 %1746, %1744
  %1748 = add i64 %1738, %1747
  %1749 = add i64 %1748, 24
  %1750 = inttoptr i64 %1749 to double*
  %1751 = load double, double* %1750
  %1752 = fsub double %1742, %1751
  %1753 = load i64, i64* %31, align 8
  %1754 = mul i64 %1753, %1724
  %1755 = mul i64 %1754, %1722
  %1756 = mul i64 %1755, 40
  %1757 = add i64 %1756, %1719
  %1758 = mul i64 %1753, %1731
  %1759 = mul i64 %1758, 40
  %1760 = add i64 %1759, %1757
  %1761 = add i64 %1738, %1760
  %1762 = add i64 %1761, 24
  %1763 = inttoptr i64 %1762 to double*
  store double %1752, double* %1763
  %1764 = inttoptr i64 %2250 to i64*
  %1765 = load i64, i64* %1764
  %1766 = inttoptr i64 %2251 to i32*
  %1767 = load i32, i32* %1766
  %1768 = sext i32 %1767 to i64
  %1769 = inttoptr i64 %2252 to i64*
  %1770 = load i64, i64* %1769
  %1771 = mul i64 %1753, %1770
  %1772 = mul i64 %1771, %1768
  %1773 = mul i64 %1772, 40
  %1774 = add i64 %1773, %1765
  %1775 = inttoptr i64 %2238 to i32*
  %1776 = load i32, i32* %1775
  %1777 = sext i32 %1776 to i64
  %1778 = mul i64 %1753, %1777
  %1779 = mul i64 %1778, 40
  %1780 = add i64 %1779, %1774
  %1781 = inttoptr i64 %2242 to i32*
  %1782 = load i32, i32* %1781
  %1783 = sext i32 %1782 to i64
  %1784 = mul nsw i64 %1783, 40
  %1785 = add i64 %1784, %1780
  %1786 = add i64 %1785, 32
  %1787 = inttoptr i64 %1786 to double*
  %1788 = load double, double* %1787
  %1789 = inttoptr i64 %2245 to i64*
  %1790 = load i64, i64* %1789
  %1791 = load i64, i64* %29, align 8
  %1792 = mul i64 %1791, %1777
  %1793 = mul i64 %1792, 40
  %1794 = add i64 %1793, %1790
  %1795 = add i64 %1784, %1794
  %1796 = add i64 %1795, 32
  %1797 = inttoptr i64 %1796 to double*
  %1798 = load double, double* %1797
  %1799 = fsub double %1788, %1798
  store double %1799, double* %176, align 1, !tbaa !1264
  store i64 0, i64* %548, align 1, !tbaa !1264
  store i64 %1771, i64* %30, align 8, !tbaa !1240
  store i64 %1784, i64* %28, align 8, !tbaa !1240
  %1800 = inttoptr i64 %1786 to double*
  store double %1799, double* %1800
  %1801 = inttoptr i64 %2242 to i32*
  %1802 = load i32, i32* %1801
  br label %block_402027

block_401d4f:                                     ; preds = %block_401d45
  %1803 = inttoptr i64 %547 to double*
  %1804 = load double, double* %1803
  store double %1804, double* %176, align 1, !tbaa !1264
  store double 0.000000e+00, double* %549, align 1, !tbaa !1264
  %1805 = inttoptr i64 %550 to i64*
  %1806 = load i64, i64* %1805
  %1807 = inttoptr i64 %551 to i32*
  %1808 = load i32, i32* %1807
  %1809 = sext i32 %1808 to i64
  %1810 = inttoptr i64 %552 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %29, align 8, !tbaa !1240
  %1812 = mul i64 %1809, %1811
  %1813 = mul i64 %1812, 200
  %1814 = add i64 %1813, %1806
  %1815 = inttoptr i64 %544 to i32*
  %1816 = load i32, i32* %1815
  %1817 = sext i32 %1816 to i64
  %1818 = mul nsw i64 %1817, 200
  %1819 = add i64 %1818, %1814
  %1820 = sext i32 %1918 to i64
  %1821 = shl nsw i64 %1820, 3
  %1822 = add i64 %1821, %1819
  %1823 = inttoptr i64 %1822 to double*
  %1824 = load double, double* %1823
  %1825 = inttoptr i64 %556 to i64*
  %1826 = load i64, i64* %1825
  %1827 = inttoptr i64 %557 to i32*
  %1828 = load i32, i32* %1827
  %1829 = add i32 %1828, 1
  %1830 = zext i32 %1829 to i64
  %1831 = sext i32 %1829 to i64
  %1832 = inttoptr i64 %558 to i64*
  %1833 = load i64, i64* %1832
  %1834 = inttoptr i64 %559 to i64*
  %1835 = load i64, i64* %1834
  store i64 %1835, i64* %34, align 8, !tbaa !1240
  %1836 = mul i64 %1835, %1833
  %1837 = mul i64 %1836, %1831
  %1838 = mul i64 %1837, 40
  %1839 = add i64 %1838, %1826
  %1840 = mul i64 %1835, %1809
  %1841 = mul i64 %1840, 40
  %1842 = add i64 %1841, %1839
  %1843 = mul nsw i64 %1817, 40
  %1844 = add i64 %1843, %1842
  %1845 = inttoptr i64 %1844 to double*
  %1846 = load double, double* %1845
  %1847 = fmul double %1824, %1846
  %1848 = add i64 %1819, 40
  %1849 = add i64 %1848, %1821
  %1850 = inttoptr i64 %1849 to double*
  %1851 = load double, double* %1850
  %1852 = add i64 %1844, 8
  %1853 = inttoptr i64 %1852 to double*
  %1854 = load double, double* %1853
  %1855 = fmul double %1851, %1854
  %1856 = fadd double %1847, %1855
  %1857 = add i64 %1819, 80
  %1858 = add i64 %1857, %1821
  %1859 = inttoptr i64 %1858 to double*
  %1860 = load double, double* %1859
  %1861 = add i64 %1844, 16
  %1862 = inttoptr i64 %1861 to double*
  %1863 = load double, double* %1862
  %1864 = fmul double %1860, %1863
  %1865 = fadd double %1856, %1864
  %1866 = load i64, i64* %29, align 8
  %1867 = mul i64 %1866, %1809
  %1868 = mul i64 %1867, 200
  %1869 = add i64 %1868, %1806
  %1870 = add i64 %1818, %1869
  %1871 = add i64 %1870, 120
  %1872 = add i64 %1871, %1821
  %1873 = inttoptr i64 %1872 to double*
  %1874 = load double, double* %1873
  %1875 = load i64, i64* %34, align 8
  %1876 = mul i64 %1875, %1833
  %1877 = mul i64 %1876, %1831
  %1878 = mul i64 %1877, 40
  %1879 = add i64 %1878, %1826
  %1880 = mul i64 %1875, %1809
  %1881 = mul i64 %1880, 40
  %1882 = add i64 %1881, %1879
  %1883 = add i64 %1843, %1882
  %1884 = add i64 %1883, 24
  %1885 = inttoptr i64 %1884 to double*
  %1886 = load double, double* %1885
  %1887 = fmul double %1874, %1886
  %1888 = fadd double %1865, %1887
  %1889 = add i64 %1870, 160
  %1890 = add i64 %1889, %1821
  %1891 = inttoptr i64 %1890 to double*
  %1892 = load double, double* %1891
  store i64 %1830, i64* %30, align 8, !tbaa !1240
  %1893 = add i64 %1883, 32
  %1894 = inttoptr i64 %1893 to double*
  %1895 = load double, double* %1894
  %1896 = fmul double %1892, %1895
  store double %1896, double* %560, align 1, !tbaa !1264
  store i64 0, i64* %561, align 1, !tbaa !1264
  %1897 = fadd double %1888, %1896
  store double %1897, double* %553, align 1, !tbaa !1264
  store i64 0, i64* %554, align 1, !tbaa !1264
  %1898 = load double, double* %176, align 1
  %1899 = fmul double %1898, %1897
  store double %1899, double* %176, align 1, !tbaa !1264
  %1900 = inttoptr i64 %562 to i64*
  %1901 = load i64, i64* %1900
  %1902 = inttoptr i64 %563 to i64*
  %1903 = load i64, i64* %1902
  store i64 %1903, i64* %31, align 8, !tbaa !1240
  %1904 = mul i64 %1809, %1903
  %1905 = mul i64 %1904, 40
  %1906 = add i64 %1905, %1901
  %1907 = add i64 %1843, %1906
  store i64 %1820, i64* %28, align 8, !tbaa !1240
  %1908 = add i64 %1821, %1907
  %1909 = inttoptr i64 %1908 to double*
  store double %1899, double* %1909
  %1910 = inttoptr i64 %546 to i32*
  %1911 = load i32, i32* %1910
  %1912 = add i32 %1911, 1
  %1913 = inttoptr i64 %546 to i32*
  store i32 %1912, i32* %1913
  %1914 = add i64 %1928, -10
  br label %block_401d45

block_401d45:                                     ; preds = %block_401d3e, %block_401d4f
  %1915 = phi i64 [ %2156, %block_401d3e ], [ %1914, %block_401d4f ]
  %1916 = phi %struct.Memory* [ %2338, %block_401d3e ], [ %1916, %block_401d4f ]
  %1917 = inttoptr i64 %546 to i32*
  %1918 = load i32, i32* %1917
  %1919 = add i32 %1918, -5
  %1920 = lshr i32 %1919, 31
  %1921 = lshr i32 %1918, 31
  %1922 = xor i32 %1920, %1921
  %1923 = add nuw nsw i32 %1922, %1921
  %1924 = icmp eq i32 %1923, 2
  %1925 = icmp ne i32 %1920, 0
  %1926 = xor i1 %1925, %1924
  %1927 = select i1 %1926, i64 10, i64 670
  %1928 = add i64 %1915, %1927
  br i1 %1926, label %block_401d4f, label %block_401fe3

block_402044:                                     ; preds = %block_40203a
  %1929 = inttoptr i64 %2245 to i64*
  %1930 = load i64, i64* %1929
  %1931 = inttoptr i64 %2238 to i32*
  %1932 = load i32, i32* %1931
  %1933 = sext i32 %1932 to i64
  %1934 = inttoptr i64 %2246 to i64*
  %1935 = load i64, i64* %1934
  store i64 %1935, i64* %29, align 8, !tbaa !1240
  %1936 = mul i64 %1933, %1935
  %1937 = mul i64 %1936, 40
  %1938 = add i64 %1937, %1930
  %1939 = inttoptr i64 %2242 to i32*
  %1940 = load i32, i32* %1939
  %1941 = sext i32 %1940 to i64
  %1942 = mul nsw i64 %1941, 40
  %1943 = add i64 %1942, %1938
  %1944 = sext i32 %2160 to i64
  %1945 = shl nsw i64 %1944, 3
  %1946 = add i64 %1945, %1943
  %1947 = inttoptr i64 %1946 to double*
  %1948 = load double, double* %1947
  store double %1948, double* %176, align 1, !tbaa !1264
  store double 0.000000e+00, double* %549, align 1, !tbaa !1264
  %1949 = inttoptr i64 %2247 to double*
  %1950 = load double, double* %1949
  store double %1950, double* %553, align 1, !tbaa !1264
  store double 0.000000e+00, double* %555, align 1, !tbaa !1264
  %1951 = inttoptr i64 %2248 to i64*
  %1952 = load i64, i64* %1951
  %1953 = inttoptr i64 %2249 to i64*
  %1954 = load i64, i64* %1953
  store i64 %1954, i64* %30, align 8, !tbaa !1240
  %1955 = mul i64 %1933, %1954
  %1956 = mul i64 %1955, 200
  %1957 = add i64 %1956, %1952
  %1958 = mul nsw i64 %1941, 200
  %1959 = add i64 %1958, %1957
  %1960 = add i64 %1945, %1959
  %1961 = inttoptr i64 %1960 to double*
  %1962 = load double, double* %1961
  %1963 = inttoptr i64 %2250 to i64*
  %1964 = load i64, i64* %1963
  %1965 = inttoptr i64 %2251 to i32*
  %1966 = load i32, i32* %1965
  %1967 = sext i32 %1966 to i64
  %1968 = inttoptr i64 %2252 to i64*
  %1969 = load i64, i64* %1968
  %1970 = inttoptr i64 %2253 to i64*
  %1971 = load i64, i64* %1970
  store i64 %1971, i64* %34, align 8, !tbaa !1240
  %1972 = mul i64 %1971, %1969
  %1973 = mul i64 %1972, %1967
  %1974 = mul i64 %1973, 40
  %1975 = add i64 %1974, %1964
  %1976 = add i32 %1932, 1
  %1977 = sext i32 %1976 to i64
  %1978 = mul i64 %1971, %1977
  %1979 = mul i64 %1978, 40
  %1980 = add i64 %1979, %1975
  %1981 = add i64 %1942, %1980
  %1982 = inttoptr i64 %1981 to double*
  %1983 = load double, double* %1982
  %1984 = fmul double %1962, %1983
  %1985 = inttoptr i64 %2254 to i64*
  %1986 = load i64, i64* %1985
  %1987 = inttoptr i64 %2255 to i64*
  %1988 = load i64, i64* %1987
  store i64 %1988, i64* %31, align 8, !tbaa !1240
  %1989 = mul i64 %1933, %1988
  %1990 = mul i64 %1989, 200
  %1991 = add i64 %1990, %1986
  %1992 = add i64 %1958, %1991
  %1993 = add i64 %1945, %1992
  %1994 = inttoptr i64 %1993 to double*
  %1995 = load double, double* %1994
  %1996 = mul i64 %1971, %1933
  %1997 = mul i64 %1996, 40
  %1998 = add i64 %1997, %1975
  %1999 = add i32 %1940, 1
  %2000 = zext i32 %1999 to i64
  %2001 = sext i32 %1999 to i64
  %2002 = mul nsw i64 %2001, 40
  %2003 = add i64 %2002, %1998
  %2004 = inttoptr i64 %2003 to double*
  %2005 = load double, double* %2004
  %2006 = fmul double %1995, %2005
  %2007 = fadd double %1984, %2006
  %2008 = load i64, i64* %30, align 8
  %2009 = mul i64 %2008, %1933
  %2010 = mul i64 %2009, 200
  %2011 = add i64 %2010, %1952
  %2012 = add i64 %1958, %2011
  %2013 = add i64 %2012, 40
  %2014 = add i64 %2013, %1945
  %2015 = inttoptr i64 %2014 to double*
  %2016 = load double, double* %2015
  %2017 = load i64, i64* %34, align 8
  %2018 = mul i64 %2017, %1977
  %2019 = mul i64 %2018, 40
  %2020 = add i64 %2019, %1975
  %2021 = add i64 %1942, %2020
  %2022 = add i64 %2021, 8
  %2023 = inttoptr i64 %2022 to double*
  %2024 = load double, double* %2023
  %2025 = fmul double %2016, %2024
  %2026 = fadd double %2007, %2025
  %2027 = add i64 %1992, 40
  %2028 = add i64 %2027, %1945
  %2029 = inttoptr i64 %2028 to double*
  %2030 = load double, double* %2029
  %2031 = mul i64 %2017, %1969
  %2032 = mul i64 %2031, %1967
  %2033 = mul i64 %2032, 40
  %2034 = add i64 %2033, %1964
  %2035 = mul i64 %2017, %1933
  %2036 = mul i64 %2035, 40
  %2037 = add i64 %2036, %2034
  %2038 = add i64 %2002, %2037
  %2039 = add i64 %2038, 8
  %2040 = inttoptr i64 %2039 to double*
  %2041 = load double, double* %2040
  %2042 = fmul double %2030, %2041
  %2043 = fadd double %2026, %2042
  %2044 = add i64 %2012, 80
  %2045 = add i64 %2044, %1945
  %2046 = inttoptr i64 %2045 to double*
  %2047 = load double, double* %2046
  %2048 = add i64 %2019, %2034
  %2049 = add i64 %1942, %2048
  %2050 = add i64 %2049, 16
  %2051 = inttoptr i64 %2050 to double*
  %2052 = load double, double* %2051
  %2053 = fmul double %2047, %2052
  %2054 = fadd double %2043, %2053
  %2055 = load i64, i64* %31, align 8
  %2056 = mul i64 %2055, %1933
  %2057 = mul i64 %2056, 200
  %2058 = add i64 %2057, %1986
  %2059 = add i64 %1958, %2058
  %2060 = add i64 %2059, 80
  %2061 = add i64 %2060, %1945
  %2062 = inttoptr i64 %2061 to double*
  %2063 = load double, double* %2062
  %2064 = load i64, i64* %34, align 8
  %2065 = mul i64 %2064, %1969
  %2066 = mul i64 %2065, %1967
  %2067 = mul i64 %2066, 40
  %2068 = add i64 %2067, %1964
  %2069 = mul i64 %2064, %1933
  %2070 = mul i64 %2069, 40
  %2071 = add i64 %2070, %2068
  %2072 = add i64 %2002, %2071
  %2073 = add i64 %2072, 16
  %2074 = inttoptr i64 %2073 to double*
  %2075 = load double, double* %2074
  %2076 = fmul double %2063, %2075
  %2077 = fadd double %2054, %2076
  %2078 = load i64, i64* %30, align 8
  %2079 = mul i64 %2078, %1933
  %2080 = mul i64 %2079, 200
  %2081 = add i64 %2080, %1952
  %2082 = add i64 %1958, %2081
  %2083 = add i64 %2082, 120
  %2084 = add i64 %2083, %1945
  %2085 = inttoptr i64 %2084 to double*
  %2086 = load double, double* %2085
  %2087 = mul i64 %2064, %1977
  %2088 = mul i64 %2087, 40
  %2089 = add i64 %2088, %2068
  %2090 = add i64 %1942, %2089
  %2091 = add i64 %2090, 24
  %2092 = inttoptr i64 %2091 to double*
  %2093 = load double, double* %2092
  %2094 = fmul double %2086, %2093
  %2095 = fadd double %2077, %2094
  %2096 = add i64 %2059, 120
  %2097 = add i64 %2096, %1945
  %2098 = inttoptr i64 %2097 to double*
  %2099 = load double, double* %2098
  %2100 = add i64 %2072, 24
  %2101 = inttoptr i64 %2100 to double*
  %2102 = load double, double* %2101
  %2103 = fmul double %2099, %2102
  %2104 = fadd double %2095, %2103
  %2105 = add i64 %2082, 160
  %2106 = add i64 %2105, %1945
  %2107 = inttoptr i64 %2106 to double*
  %2108 = load double, double* %2107
  %2109 = load i64, i64* %34, align 8
  %2110 = mul i64 %2109, %1969
  %2111 = mul i64 %2110, %1967
  %2112 = mul i64 %2111, 40
  %2113 = add i64 %2112, %1964
  %2114 = mul i64 %2109, %1977
  %2115 = mul i64 %2114, 40
  %2116 = add i64 %2115, %2113
  %2117 = add i64 %1942, %2116
  %2118 = add i64 %2117, 32
  %2119 = inttoptr i64 %2118 to double*
  %2120 = load double, double* %2119
  %2121 = fmul double %2108, %2120
  %2122 = fadd double %2104, %2121
  %2123 = load i64, i64* %31, align 8
  %2124 = mul i64 %2123, %1933
  %2125 = mul i64 %2124, 200
  %2126 = add i64 %2125, %1986
  %2127 = add i64 %1958, %2126
  %2128 = add i64 %2127, 160
  %2129 = add i64 %2128, %1945
  %2130 = inttoptr i64 %2129 to double*
  %2131 = load double, double* %2130
  store i64 %2110, i64* %36, align 8, !tbaa !1240
  %2132 = mul i64 %2109, %1933
  %2133 = mul i64 %2132, 40
  %2134 = add i64 %2133, %2113
  store i64 %2000, i64* %35, align 8, !tbaa !1240
  %2135 = add i64 %2002, %2134
  %2136 = add i64 %2135, 32
  %2137 = inttoptr i64 %2136 to double*
  %2138 = load double, double* %2137
  %2139 = fmul double %2131, %2138
  store double %2139, double* %2256, align 1, !tbaa !1264
  store i64 0, i64* %2257, align 1, !tbaa !1264
  %2140 = fadd double %2122, %2139
  store double %2140, double* %560, align 1, !tbaa !1264
  store i64 0, i64* %561, align 1, !tbaa !1264
  %2141 = load double, double* %553, align 1
  %2142 = fmul double %2141, %2140
  store double %2142, double* %553, align 1, !tbaa !1264
  %2143 = load double, double* %176, align 1
  %2144 = fadd double %2143, %2142
  store double %2144, double* %176, align 1, !tbaa !1264
  %2145 = load i64, i64* %29, align 8
  %2146 = mul i64 %2145, %1933
  %2147 = mul i64 %2146, 40
  %2148 = add i64 %2147, %1930
  %2149 = add i64 %1942, %2148
  %2150 = add i64 %1945, %2149
  %2151 = inttoptr i64 %2150 to double*
  store double %2144, double* %2151
  %2152 = inttoptr i64 %2244 to i32*
  %2153 = load i32, i32* %2152
  %2154 = add i32 %2153, 1
  %2155 = inttoptr i64 %2244 to i32*
  store i32 %2154, i32* %2155
  br label %block_40203a

block_401d3e:                                     ; preds = %block_401d32
  %2156 = add i64 %2354, 7
  %2157 = inttoptr i64 %546 to i32*
  store i32 0, i32* %2157
  br label %block_401d45

block_40203a:                                     ; preds = %block_402033, %block_402044
  %2158 = phi %struct.Memory* [ %2176, %block_402033 ], [ %2158, %block_402044 ]
  %2159 = inttoptr i64 %2244 to i32*
  %2160 = load i32, i32* %2159
  %2161 = add i32 %2160, -5
  %2162 = lshr i32 %2161, 31
  %2163 = lshr i32 %2160, 31
  %2164 = xor i32 %2162, %2163
  %2165 = add nuw nsw i32 %2164, %2163
  %2166 = icmp eq i32 %2165, 2
  %2167 = icmp ne i32 %2162, 0
  %2168 = xor i1 %2167, %2166
  br i1 %2168, label %block_402044, label %block_402563

block_402033:                                     ; preds = %block_402027
  %2169 = inttoptr i64 %2244 to i32*
  store i32 0, i32* %2169
  br label %block_40203a

block_401d29:                                     ; preds = %block_401d1d
  %2170 = inttoptr i64 %543 to i32*
  %2171 = load i32, i32* %2170
  %2172 = add i32 %2171, -1
  %2173 = add i64 %2217, 9
  %2174 = inttoptr i64 %544 to i32*
  store i32 %2172, i32* %2174
  br label %block_401d32

block_402027:                                     ; preds = %block_40201e, %block_4026d3
  %2175 = phi i32 [ %2199, %block_40201e ], [ %1802, %block_4026d3 ]
  %2176 = phi %struct.Memory* [ %2218, %block_40201e ], [ %701, %block_4026d3 ]
  %2177 = add i32 %2175, -1
  %2178 = inttoptr i64 %2242 to i32*
  store i32 %2177, i32* %2178
  %2179 = inttoptr i64 %2242 to i32*
  %2180 = load i32, i32* %2179
  %2181 = inttoptr i64 %2243 to i32*
  %2182 = load i32, i32* %2181
  %2183 = sub i32 %2180, %2182
  %2184 = lshr i32 %2183, 31
  %2185 = lshr i32 %2180, 31
  %2186 = lshr i32 %2182, 31
  %2187 = xor i32 %2186, %2185
  %2188 = xor i32 %2184, %2185
  %2189 = add nuw nsw i32 %2188, %2187
  %2190 = icmp eq i32 %2189, 2
  %2191 = icmp ne i32 %2184, 0
  %2192 = xor i1 %2191, %2190
  br i1 %2192, label %block_403775, label %block_402033

block_401fe3:                                     ; preds = %block_401d45
  %2193 = inttoptr i64 %544 to i32*
  %2194 = load i32, i32* %2193
  %2195 = add i32 %2194, -1
  %2196 = inttoptr i64 %544 to i32*
  store i32 %2195, i32* %2196
  %2197 = add i64 %1928, -689
  br label %block_401d32

block_40201e:                                     ; preds = %block_402012
  %2198 = inttoptr i64 %2241 to i32*
  %2199 = load i32, i32* %2198
  br label %block_402027

block_401d1d:                                     ; preds = %block_401ff6, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11
  %2200 = phi i64 [ %539, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11 ], [ %568, %block_401ff6 ]
  %2201 = phi %struct.Memory* [ %493, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit11 ], [ %2338, %block_401ff6 ]
  %2202 = inttoptr i64 %502 to i32*
  %2203 = load i32, i32* %2202
  %2204 = inttoptr i64 %542 to i32*
  %2205 = load i32, i32* %2204
  %2206 = sub i32 %2203, %2205
  %2207 = lshr i32 %2206, 31
  %2208 = lshr i32 %2203, 31
  %2209 = lshr i32 %2205, 31
  %2210 = xor i32 %2209, %2208
  %2211 = xor i32 %2207, %2208
  %2212 = add nuw nsw i32 %2211, %2210
  %2213 = icmp eq i32 %2212, 2
  %2214 = icmp ne i32 %2207, 0
  %2215 = xor i1 %2214, %2213
  %2216 = select i1 %2215, i64 748, i64 12
  %2217 = add i64 %2200, %2216
  br i1 %2215, label %block_402009, label %block_401d29

block_402012:                                     ; preds = %block_402009, %block_403775
  %2218 = phi %struct.Memory* [ %2201, %block_402009 ], [ %2176, %block_403775 ]
  %2219 = inttoptr i64 %2238 to i32*
  %2220 = load i32, i32* %2219
  %2221 = inttoptr i64 %2240 to i32*
  %2222 = load i32, i32* %2221
  %2223 = sub i32 %2220, %2222
  %2224 = lshr i32 %2223, 31
  %2225 = lshr i32 %2220, 31
  %2226 = lshr i32 %2222, 31
  %2227 = xor i32 %2226, %2225
  %2228 = xor i32 %2224, %2225
  %2229 = add nuw nsw i32 %2228, %2227
  %2230 = icmp eq i32 %2229, 2
  %2231 = icmp ne i32 %2224, 0
  %2232 = xor i1 %2231, %2230
  br i1 %2232, label %block_403788, label %block_40201e

block_402009:                                     ; preds = %block_401d1d
  %2233 = add i64 %541, 96
  %2234 = inttoptr i64 %2233 to i32*
  %2235 = load i32, i32* %2234
  %2236 = add i32 %2235, -1
  %2237 = load i64, i64* %33, align 8
  %2238 = add i64 %2237, -80
  %2239 = inttoptr i64 %2238 to i32*
  store i32 %2236, i32* %2239
  %2240 = add i64 %2237, 88
  %2241 = add i64 %2237, 80
  %2242 = add i64 %2237, -76
  %2243 = add i64 %2237, 72
  %2244 = add i64 %2237, -84
  %2245 = add i64 %2237, 32
  %2246 = add i64 %2237, -440
  %2247 = add i64 %2237, -72
  %2248 = add i64 %2237, 56
  %2249 = add i64 %2237, -376
  %2250 = add i64 %2237, 24
  %2251 = add i64 %2237, 16
  %2252 = add i64 %2237, -424
  %2253 = add i64 %2237, -448
  %2254 = add i64 %2237, 48
  %2255 = add i64 %2237, -368
  %2256 = bitcast %union.VectorReg* %44 to double*
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %2258 = add i64 %2237, -304
  %2259 = add i64 %2237, 40
  %2260 = add i64 %2237, -360
  %2261 = bitcast %union.VectorReg* %42 to i8*
  %2262 = bitcast [32 x %union.VectorReg]* %41 to <2 x i32>*
  %2263 = bitcast %union.VectorReg* %42 to i32*
  %2264 = getelementptr inbounds i8, i8* %2261, i64 4
  %2265 = bitcast i8* %2264 to i32*
  %2266 = add i64 %2237, -104
  %2267 = add i64 %2237, -264
  %2268 = add i64 %2237, -96
  %2269 = add i64 %2237, -256
  %2270 = add i64 %2237, -296
  %2271 = add i64 %2237, -248
  %2272 = add i64 %2237, -288
  %2273 = add i64 %2237, -240
  %2274 = add i64 %2237, -280
  %2275 = add i64 %2237, -232
  %2276 = add i64 %2237, -272
  %2277 = add i64 %2237, -224
  %2278 = add i64 %2237, -216
  %2279 = add i64 %2237, -208
  %2280 = add i64 %2237, -200
  %2281 = add i64 %2237, -192
  %2282 = add i64 %2237, -184
  %2283 = add i64 %2237, -176
  %2284 = add i64 %2237, -168
  %2285 = add i64 %2237, -160
  %2286 = add i64 %2237, -152
  %2287 = add i64 %2237, -144
  %2288 = add i64 %2237, -136
  %2289 = add i64 %2237, -128
  %2290 = add i64 %2237, -120
  %2291 = add i64 %2237, -112
  br label %block_402012

block_403788:                                     ; preds = %block_402012
  %2292 = zext i32 %2220 to i64
  store i64 %2292, i64* %26, align 8
  %2293 = load i64, i64* %32, align 8
  %2294 = add i64 %2293, 296
  %2295 = icmp ugt i64 %2293, -297
  %2296 = zext i1 %2295 to i8
  store i8 %2296, i8* %67, align 1, !tbaa !1245
  %2297 = trunc i64 %2294 to i32
  %2298 = and i32 %2297, 255
  %2299 = tail call i32 @llvm.ctpop.i32(i32 %2298) #11
  %2300 = trunc i32 %2299 to i8
  %2301 = and i8 %2300, 1
  %2302 = xor i8 %2301, 1
  store i8 %2302, i8* %74, align 1, !tbaa !1259
  %2303 = xor i64 %2294, %2293
  %2304 = lshr i64 %2303, 4
  %2305 = trunc i64 %2304 to i8
  %2306 = and i8 %2305, 1
  store i8 %2306, i8* %79, align 1, !tbaa !1263
  %2307 = icmp eq i64 %2294, 0
  %2308 = zext i1 %2307 to i8
  store i8 %2308, i8* %82, align 1, !tbaa !1260
  %2309 = lshr i64 %2294, 63
  %2310 = trunc i64 %2309 to i8
  store i8 %2310, i8* %85, align 1, !tbaa !1261
  %2311 = lshr i64 %2293, 63
  %2312 = xor i64 %2309, %2311
  %2313 = add nuw nsw i64 %2312, %2309
  %2314 = icmp eq i64 %2313, 2
  %2315 = zext i1 %2314 to i8
  store i8 %2315, i8* %91, align 1, !tbaa !1262
  %2316 = add i64 %2293, 304
  %2317 = inttoptr i64 %2294 to i64*
  %2318 = load i64, i64* %2317
  store i64 %2318, i64* %27, align 8, !tbaa !1240
  %2319 = add i64 %2293, 312
  %2320 = inttoptr i64 %2316 to i64*
  %2321 = load i64, i64* %2320
  store i64 %2321, i64* %37, align 8, !tbaa !1240
  %2322 = add i64 %2293, 320
  %2323 = inttoptr i64 %2319 to i64*
  %2324 = load i64, i64* %2323
  store i64 %2324, i64* %38, align 8, !tbaa !1240
  %2325 = add i64 %2293, 328
  %2326 = inttoptr i64 %2322 to i64*
  %2327 = load i64, i64* %2326
  store i64 %2327, i64* %39, align 8, !tbaa !1240
  %2328 = add i64 %2293, 336
  %2329 = inttoptr i64 %2325 to i64*
  %2330 = load i64, i64* %2329
  store i64 %2330, i64* %40, align 8, !tbaa !1240
  %2331 = add i64 %2293, 344
  %2332 = inttoptr i64 %2328 to i64*
  %2333 = load i64, i64* %2332
  store i64 %2333, i64* %33, align 8, !tbaa !1240
  %2334 = inttoptr i64 %2331 to i64*
  %2335 = load i64, i64* %2334
  store i64 %2335, i64* %3, align 8, !tbaa !1240
  %2336 = add i64 %2293, 352
  store i64 %2336, i64* %32, align 8, !tbaa !1240
  ret %struct.Memory* %2218

block_401d32:                                     ; preds = %block_401fe3, %block_401d29
  %2337 = phi i64 [ %2173, %block_401d29 ], [ %2197, %block_401fe3 ]
  %2338 = phi %struct.Memory* [ %2201, %block_401d29 ], [ %1916, %block_401fe3 ]
  %2339 = inttoptr i64 %544 to i32*
  %2340 = load i32, i32* %2339
  %2341 = inttoptr i64 %545 to i32*
  %2342 = load i32, i32* %2341
  %2343 = sub i32 %2340, %2342
  %2344 = lshr i32 %2343, 31
  %2345 = lshr i32 %2340, 31
  %2346 = lshr i32 %2342, 31
  %2347 = xor i32 %2346, %2345
  %2348 = xor i32 %2344, %2345
  %2349 = add nuw nsw i32 %2348, %2347
  %2350 = icmp eq i32 %2349, 2
  %2351 = icmp ne i32 %2344, 0
  %2352 = xor i1 %2351, %2350
  %2353 = select i1 %2352, i64 708, i64 12
  %2354 = add i64 %2337, %2353
  br i1 %2352, label %block_401ff6, label %block_401d3e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4116f0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4116f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %29 = load i64, i64* %14, align 8
  %30 = load i64, i64* %13, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %14, align 8, !tbaa !1240
  %33 = load i64, i64* %22, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %21, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %20, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %19, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %8, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -536
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1411), i64* %9, align 8, !tbaa !1240
  %55 = add i64 %30, -52
  %56 = inttoptr i64 %55 to i32*
  store i32 0, i32* %56
  %57 = add i64 %30, -56
  %58 = load i32, i32* %6, align 4
  %59 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %59
  %60 = add i64 %30, -64
  %61 = load i64, i64* %11, align 8
  %62 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %62
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1411), i64* %11, align 8, !tbaa !1240
  %63 = add i64 %1, 65
  %64 = add i64 %30, -544
  %65 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %65
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %3, align 8, !alias.scope !1839, !noalias !1842
  store i64 %48, i64* %13, align 8, !alias.scope !1839, !noalias !1842
  %69 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1400), i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1411))
  %70 = load i64, i64* %14, align 8
  %71 = add i64 %70, -312
  %72 = load i64, i64* %3, align 8
  %73 = inttoptr i64 %71 to i64*
  store i64 %69, i64* %73
  %74 = icmp eq i64 %69, 0
  %75 = select i1 %74, i64 238, i64 17
  %76 = add i64 %72, %75
  br i1 %74, label %block_41181f, label %block_411742

block_411d0a:                                     ; preds = %block_411c3d, %block_411bca
  %77 = phi i64 [ %202, %block_411bca ], [ %355, %block_411c3d ]
  %78 = phi i64 [ %213, %block_411bca ], [ %359, %block_411c3d ]
  %79 = phi %struct.Memory* [ %365, %block_411bca ], [ %365, %block_411c3d ]
  %80 = add i64 %77, -196
  %81 = inttoptr i64 %80 to i32*
  %82 = load i32, i32* %81
  %83 = add i32 %82, 1
  %84 = zext i32 %83 to i64
  %85 = inttoptr i64 %80 to i32*
  store i32 %83, i32* %85
  %86 = add i64 %78, -333
  br label %block_411bbd

block_411b9c:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_411b89, %block_411b8f
  %87 = phi i64 [ %763, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %391, %block_411b89 ], [ %385, %block_411b8f ]
  %88 = phi %struct.Memory* [ %760, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %760, %block_411b89 ], [ %760, %block_411b8f ]
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1574), i64* %12, align 8, !tbaa !1240
  %89 = add i64 %87, 17
  %90 = load i64, i64* %13, align 8, !tbaa !1240
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %94 = load i64, i64* %11, align 8, !alias.scope !1844, !noalias !1847
  %95 = load i64, i64* %10, align 8, !alias.scope !1844, !noalias !1847
  %96 = load i64, i64* %9, align 8, !alias.scope !1844, !noalias !1847
  %97 = load i64, i64* %93, align 8, !alias.scope !1844, !noalias !1847
  %98 = load i64, i64* %16, align 8, !alias.scope !1844, !noalias !1847
  %99 = inttoptr i64 %90 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %90, 8
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %90, 16
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %90, 24
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %90, 32
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %90, 40
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %90, 48
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %90, 56
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %90, 64
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %90, 72
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = inttoptr i64 %91 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %3, align 8, !alias.scope !1844, !noalias !1847
  store i64 %90, i64* %13, align 8, !alias.scope !1844, !noalias !1847
  %130 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1574), i64 %94, i64 %95, i64 %96, i64 %97, i64 %98, i64 %100, i64 %103, i64 %106, i64 %109, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124, i64 %127), !noalias !1844
  %131 = load i64, i64* %14, align 8
  %132 = add i64 %131, -196
  %133 = load i64, i64* %3, align 8
  %134 = inttoptr i64 %132 to i32*
  store i32 1, i32* %134
  %135 = add i64 %131, -388
  %136 = trunc i64 %130 to i32
  %137 = add i64 %133, 16
  %138 = inttoptr i64 %135 to i32*
  store i32 %136, i32* %138
  br label %block_411bbd

block_411bca:                                     ; preds = %block_411bbd
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1601), i64* %12, align 8, !tbaa !1240
  %139 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1392) to double*)
  %140 = sext i32 %368 to i64
  %141 = shl nsw i64 %140, 3
  %142 = add i64 %364, -304
  %143 = add i64 %142, %141
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %11, align 8, !tbaa !1240
  %146 = add i64 %364, -192
  %147 = add i64 %146, %141
  %148 = inttoptr i64 %147 to double*
  %149 = load double, double* %148
  %150 = fmul double %139, %149
  %151 = add i64 %364, -88
  %152 = inttoptr i64 %151 to double*
  %153 = load double, double* %152
  %154 = fdiv double %150, %153
  %155 = add i64 %364, -400
  %156 = inttoptr i64 %155 to double*
  store double %154, double* %156
  %157 = bitcast double %149 to <2 x i32>
  %158 = extractelement <2 x i32> %157, i32 0
  store i32 %158, i32* %559, align 1, !tbaa !1292
  %159 = extractelement <2 x i32> %157, i32 1
  store i32 %159, i32* %562, align 1, !tbaa !1292
  store i32 0, i32* %564, align 1, !tbaa !1292
  store i32 0, i32* %567, align 1, !tbaa !1292
  %160 = inttoptr i64 %155 to double*
  %161 = load double, double* %160
  store double %161, double* %529, align 1, !tbaa !1264
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %162 = add i64 %381, 96
  %163 = load i64, i64* %13, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = load i64, i64* %10, align 8, !alias.scope !1849, !noalias !1852
  %167 = load i64, i64* %9, align 8, !alias.scope !1849, !noalias !1852
  %168 = load i64, i64* %93, align 8, !alias.scope !1849, !noalias !1852
  %169 = load i64, i64* %16, align 8, !alias.scope !1849, !noalias !1852
  %170 = inttoptr i64 %163 to i64*
  %171 = load i64, i64* %170
  %172 = add i64 %163, 8
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  %175 = add i64 %163, 16
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %163, 24
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %163, 32
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %163, 40
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %163, 48
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %163, 56
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %163, 64
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %163, 72
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = inttoptr i64 %164 to i64*
  %200 = load i64, i64* %199
  store i64 %200, i64* %3, align 8, !alias.scope !1849, !noalias !1852
  store i64 %163, i64* %13, align 8, !alias.scope !1849, !noalias !1852
  %201 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1601), i64 %145, i64 %166, i64 %167, i64 %168, i64 %169, i64 %171, i64 %174, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198), !noalias !1849
  %202 = load i64, i64* %14, align 8
  %203 = add i64 %202, -196
  %204 = load i64, i64* %3, align 8
  %205 = inttoptr i64 %203 to i32*
  %206 = load i32, i32* %205
  %207 = add i32 %206, -5
  %208 = icmp eq i32 %207, 0
  %209 = add i64 %202, -404
  %210 = trunc i64 %201 to i32
  %211 = inttoptr i64 %209 to i32*
  store i32 %210, i32* %211
  %212 = select i1 %208, i64 19, i64 224
  %213 = add i64 %204, %212
  br i1 %208, label %block_411c3d, label %block_411d0a

block_411c3d:                                     ; preds = %block_411bca
  %214 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1392) to double*)
  %215 = add i64 %202, -176
  %216 = inttoptr i64 %215 to double*
  %217 = load double, double* %216
  %218 = add i64 %202, -168
  %219 = inttoptr i64 %218 to double*
  %220 = load double, double* %219
  %221 = fadd double %217, %220
  %222 = add i64 %202, -160
  %223 = inttoptr i64 %222 to double*
  %224 = load double, double* %223
  %225 = fadd double %221, %224
  %226 = add i64 %202, -80
  %227 = inttoptr i64 %226 to double*
  store double %225, double* %227
  %228 = inttoptr i64 %226 to double*
  %229 = load double, double* %228
  %230 = fmul double %214, %229
  %231 = add i64 %202, -88
  %232 = inttoptr i64 %231 to double*
  %233 = load double, double* %232
  %234 = fdiv double %230, %233
  %235 = add i64 %202, -416
  %236 = inttoptr i64 %235 to double*
  store double %234, double* %236
  %237 = bitcast double %229 to <2 x i32>
  %238 = extractelement <2 x i32> %237, i32 0
  store i32 %238, i32* %559, align 1, !tbaa !1292
  %239 = extractelement <2 x i32> %237, i32 1
  store i32 %239, i32* %562, align 1, !tbaa !1292
  store i32 0, i32* %564, align 1, !tbaa !1292
  store i32 0, i32* %567, align 1, !tbaa !1292
  %240 = inttoptr i64 %235 to double*
  %241 = load double, double* %240
  store double %241, double* %529, align 1, !tbaa !1264
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %242 = add i64 %213, 98
  %243 = load i64, i64* %13, align 8, !tbaa !1240
  %244 = add i64 %243, -8
  %245 = inttoptr i64 %244 to i64*
  store i64 %242, i64* %245
  %246 = load i64, i64* %10, align 8, !alias.scope !1854, !noalias !1857
  %247 = load i64, i64* %9, align 8, !alias.scope !1854, !noalias !1857
  %248 = load i64, i64* %93, align 8, !alias.scope !1854, !noalias !1857
  %249 = load i64, i64* %16, align 8, !alias.scope !1854, !noalias !1857
  %250 = inttoptr i64 %243 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %243, 8
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %243, 16
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  %258 = add i64 %243, 24
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  %261 = add i64 %243, 32
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  %264 = add i64 %243, 40
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  %267 = add i64 %243, 48
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %243, 56
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %243, 64
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %243, 72
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  %279 = inttoptr i64 %244 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %3, align 8, !alias.scope !1854, !noalias !1857
  store i64 %243, i64* %13, align 8, !alias.scope !1854, !noalias !1857
  %281 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1626), i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1657), i64 %246, i64 %247, i64 %248, i64 %249, i64 %251, i64 %254, i64 %257, i64 %260, i64 %263, i64 %266, i64 %269, i64 %272, i64 %275, i64 %278), !noalias !1854
  %282 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1626), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1665), i64* %11, align 8, !tbaa !1240
  %283 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1392) to double*)
  %284 = load i64, i64* %14, align 8
  %285 = add i64 %284, -196
  %286 = inttoptr i64 %285 to i32*
  %287 = load i32, i32* %286
  %288 = sext i32 %287 to i64
  store i64 %288, i64* %9, align 8, !tbaa !1240
  %289 = shl nsw i64 %288, 3
  %290 = add i64 %284, -192
  %291 = add i64 %290, %289
  %292 = inttoptr i64 %291 to double*
  %293 = load double, double* %292
  %294 = add i64 %284, -80
  %295 = inttoptr i64 %294 to double*
  %296 = load double, double* %295
  %297 = fsub double %293, %296
  %298 = inttoptr i64 %294 to double*
  store double %297, double* %298
  %299 = inttoptr i64 %294 to double*
  %300 = load double, double* %299
  %301 = fmul double %283, %300
  %302 = add i64 %284, -88
  %303 = inttoptr i64 %302 to double*
  %304 = load double, double* %303
  %305 = fdiv double %301, %304
  %306 = add i64 %284, -424
  %307 = inttoptr i64 %306 to double*
  store double %305, double* %307
  %308 = bitcast double %300 to <2 x i32>
  %309 = extractelement <2 x i32> %308, i32 0
  store i32 %309, i32* %559, align 1, !tbaa !1292
  %310 = extractelement <2 x i32> %308, i32 1
  store i32 %310, i32* %562, align 1, !tbaa !1292
  store i32 0, i32* %564, align 1, !tbaa !1292
  store i32 0, i32* %567, align 1, !tbaa !1292
  %311 = inttoptr i64 %306 to double*
  %312 = load double, double* %311
  store double %312, double* %529, align 1, !tbaa !1264
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %313 = add i64 %284, -428
  %314 = trunc i64 %281 to i32
  %315 = inttoptr i64 %313 to i32*
  store i32 %314, i32* %315
  %316 = add i64 %282, 101
  %317 = load i64, i64* %13, align 8, !tbaa !1240
  %318 = add i64 %317, -8
  %319 = inttoptr i64 %318 to i64*
  store i64 %316, i64* %319
  %320 = load i64, i64* %10, align 8, !alias.scope !1859, !noalias !1862
  %321 = load i64, i64* %93, align 8, !alias.scope !1859, !noalias !1862
  %322 = load i64, i64* %16, align 8, !alias.scope !1859, !noalias !1862
  %323 = inttoptr i64 %317 to i64*
  %324 = load i64, i64* %323
  %325 = add i64 %317, 8
  %326 = inttoptr i64 %325 to i64*
  %327 = load i64, i64* %326
  %328 = add i64 %317, 16
  %329 = inttoptr i64 %328 to i64*
  %330 = load i64, i64* %329
  %331 = add i64 %317, 24
  %332 = inttoptr i64 %331 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %317, 32
  %335 = inttoptr i64 %334 to i64*
  %336 = load i64, i64* %335
  %337 = add i64 %317, 40
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338
  %340 = add i64 %317, 48
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %317, 56
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %317, 64
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %317, 72
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = inttoptr i64 %318 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %3, align 8, !alias.scope !1859, !noalias !1862
  store i64 %317, i64* %13, align 8, !alias.scope !1859, !noalias !1862
  %354 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1626), i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1665), i64 %320, i64 %288, i64 %321, i64 %322, i64 %324, i64 %327, i64 %330, i64 %333, i64 %336, i64 %339, i64 %342, i64 %345, i64 %348, i64 %351), !noalias !1859
  %355 = load i64, i64* %14, align 8
  %356 = add i64 %355, -432
  %357 = trunc i64 %354 to i32
  %358 = load i64, i64* %3, align 8
  %359 = add i64 %358, 6
  %360 = inttoptr i64 %356 to i32*
  store i32 %357, i32* %360
  br label %block_411d0a

block_411d23:                                     ; preds = %block_411bbd
  br label %block_411d28

block_411bbd:                                     ; preds = %block_411b9c, %block_411d0a
  %361 = phi i32 [ %136, %block_411b9c ], [ %83, %block_411d0a ]
  %362 = phi i64 [ %130, %block_411b9c ], [ %84, %block_411d0a ]
  %363 = phi i64 [ %137, %block_411b9c ], [ %86, %block_411d0a ]
  %364 = phi i64 [ %131, %block_411b9c ], [ %77, %block_411d0a ]
  %365 = phi %struct.Memory* [ %88, %block_411b9c ], [ %79, %block_411d0a ]
  %366 = add i64 %364, -196
  %367 = inttoptr i64 %366 to i32*
  %368 = load i32, i32* %367
  %369 = add i32 %368, -11
  %370 = icmp eq i32 %369, 0
  %371 = lshr i32 %369, 31
  %372 = trunc i32 %371 to i8
  %373 = lshr i32 %368, 31
  %374 = xor i32 %371, %373
  %375 = add nuw nsw i32 %374, %373
  %376 = icmp eq i32 %375, 2
  %377 = icmp ne i8 %372, 0
  %378 = xor i1 %377, %376
  %379 = or i1 %370, %378
  %380 = select i1 %379, i64 13, i64 358
  %381 = add i64 %363, %380
  br i1 %379, label %block_411bca, label %block_411d23

block_411b8f:                                     ; preds = %block_411b89
  %382 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %382, double* %518, align 1, !tbaa !1264
  store double 0.000000e+00, double* %520, align 1, !tbaa !1264
  %383 = load i64, i64* %14, align 8
  %384 = add i64 %383, -88
  %385 = add i64 %391, 13
  %386 = inttoptr i64 %384 to double*
  store double %382, double* %386
  br label %block_411b9c

block_41181f:                                     ; preds = %block_4116f0
  %387 = add i64 %76, 11
  store i32 0, i32* bitcast (%timeron_type* @timeron to i32*)
  br label %block_41182a

block_411b89:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %388 = load i8, i8* %50, align 1, !tbaa !1259
  %389 = icmp ne i8 %388, 0
  %390 = select i1 %389, i64 19, i64 6
  %391 = add i64 %763, %390
  %392 = icmp eq i8 %388, 1
  br i1 %392, label %block_411b9c, label %block_411b8f

block_411b2d:                                     ; preds = %block_411b23, %block_411b3a
  %393 = phi i64 [ %840, %block_411b23 ], [ %837, %block_411b3a ]
  %394 = phi i64 [ %838, %block_411b23 ], [ %821, %block_411b3a ]
  %395 = phi %struct.Memory* [ %719, %block_411b23 ], [ %820, %block_411b3a ]
  %396 = add i64 %394, -196
  %397 = inttoptr i64 %396 to i32*
  %398 = load i32, i32* %397
  %399 = add i32 %398, -11
  %400 = icmp ult i32 %398, 11
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %49, align 1, !tbaa !1245
  %402 = and i32 %399, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #11
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %50, align 1, !tbaa !1259
  %407 = xor i32 %399, %398
  %408 = lshr i32 %407, 4
  %409 = trunc i32 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %51, align 1, !tbaa !1263
  %411 = icmp eq i32 %399, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %52, align 1, !tbaa !1260
  %413 = lshr i32 %399, 31
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %53, align 1, !tbaa !1261
  %415 = lshr i32 %398, 31
  %416 = xor i32 %413, %415
  %417 = add nuw nsw i32 %416, %415
  %418 = icmp eq i32 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %54, align 1, !tbaa !1262
  %420 = icmp ne i8 %414, 0
  %421 = xor i1 %420, %418
  %422 = or i1 %411, %421
  %423 = select i1 %422, i64 13, i64 60
  %424 = add i64 %393, %423
  br i1 %422, label %block_411b3a, label %block_411b69

block_41182a:                                     ; preds = %block_411742, %block_41181f
  %425 = phi i64 [ %387, %block_41181f ], [ %878, %block_411742 ]
  %426 = phi %struct.Memory* [ %2, %block_41181f ], [ %2, %block_411742 ]
  %427 = add i64 %425, 7926
  %428 = add i64 %425, 7
  %429 = load i64, i64* %13, align 8, !tbaa !1240
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431
  store i64 %430, i64* %13, align 8, !tbaa !1240
  %432 = tail call %struct.Memory* @sub_413720_read_input(%struct.State* nonnull %0, i64 %427, %struct.Memory* %426)
  %433 = load i64, i64* %3, align 8
  %434 = add i64 %433, -56321
  %435 = add i64 %433, 7
  %436 = load i64, i64* %13, align 8, !tbaa !1240
  %437 = add i64 %436, -8
  %438 = inttoptr i64 %437 to i64*
  store i64 %435, i64* %438
  store i64 %437, i64* %13, align 8, !tbaa !1240
  %439 = tail call %struct.Memory* @sub_403c30_domain(%struct.State* nonnull %0, i64 %434, %struct.Memory* %432)
  %440 = load i64, i64* %3, align 8
  %441 = add i64 %440, 26872
  %442 = add i64 %440, 7
  %443 = load i64, i64* %13, align 8, !tbaa !1240
  %444 = add i64 %443, -8
  %445 = inttoptr i64 %444 to i64*
  store i64 %442, i64* %445
  store i64 %444, i64* %13, align 8, !tbaa !1240
  %446 = tail call %struct.Memory* @sub_418130_setcoeff(%struct.State* nonnull %0, i64 %441, %struct.Memory* %439)
  %447 = load i64, i64* %3, align 8
  %448 = add i64 %447, 25969
  %449 = add i64 %447, 7
  %450 = load i64, i64* %13, align 8, !tbaa !1240
  %451 = add i64 %450, -8
  %452 = inttoptr i64 %451 to i64*
  store i64 %449, i64* %452
  store i64 %451, i64* %13, align 8, !tbaa !1240
  %453 = tail call %struct.Memory* @sub_417db0_setbv(%struct.State* nonnull %0, i64 %448, %struct.Memory* %446)
  %454 = load i64, i64* %3, align 8
  %455 = add i64 %454, 28426
  %456 = add i64 %454, 7
  %457 = load i64, i64* %13, align 8, !tbaa !1240
  %458 = add i64 %457, -8
  %459 = inttoptr i64 %458 to i64*
  store i64 %456, i64* %459
  store i64 %458, i64* %13, align 8, !tbaa !1240
  %460 = tail call %struct.Memory* @sub_418750_setiv(%struct.State* nonnull %0, i64 %455, %struct.Memory* %453)
  %461 = load i64, i64* %3, align 8
  %462 = add i64 %461, -55965
  %463 = add i64 %461, 7
  %464 = load i64, i64* %13, align 8, !tbaa !1240
  %465 = add i64 %464, -8
  %466 = inttoptr i64 %465 to i64*
  store i64 %463, i64* %466
  store i64 %465, i64* %13, align 8, !tbaa !1240
  %467 = tail call %struct.Memory* @sub_403db0_erhs(%struct.State* nonnull %0, i64 %462, %struct.Memory* %460)
  %468 = load i64, i64* %3, align 8
  store i64 1, i64* %12, align 8, !tbaa !1240
  %469 = add i64 %468, 29132
  %470 = add i64 %468, 10
  %471 = load i64, i64* %13, align 8, !tbaa !1240
  %472 = add i64 %471, -8
  %473 = inttoptr i64 %472 to i64*
  store i64 %470, i64* %473
  store i64 %472, i64* %13, align 8, !tbaa !1240
  %474 = tail call %struct.Memory* @sub_418a20_ssor(%struct.State* nonnull %0, i64 %469, %struct.Memory* %467)
  %475 = load i64, i64* %3, align 8
  %476 = add i64 %475, 25938
  %477 = add i64 %475, 7
  %478 = load i64, i64* %13, align 8, !tbaa !1240
  %479 = add i64 %478, -8
  %480 = inttoptr i64 %479 to i64*
  store i64 %477, i64* %480
  store i64 %479, i64* %13, align 8, !tbaa !1240
  %481 = tail call %struct.Memory* @sub_417db0_setbv(%struct.State* nonnull %0, i64 %476, %struct.Memory* %474)
  %482 = load i64, i64* %3, align 8
  %483 = add i64 %482, 28395
  %484 = add i64 %482, 7
  %485 = load i64, i64* %13, align 8, !tbaa !1240
  %486 = add i64 %485, -8
  %487 = inttoptr i64 %486 to i64*
  store i64 %484, i64* %487
  store i64 %486, i64* %13, align 8, !tbaa !1240
  %488 = tail call %struct.Memory* @sub_418750_setiv(%struct.State* nonnull %0, i64 %483, %struct.Memory* %481)
  %489 = load i64, i64* %3, align 8
  %490 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %491 = zext i32 %490 to i64
  store i64 %491, i64* %12, align 8, !tbaa !1240
  %492 = add i64 %489, 29108
  %493 = add i64 %489, 12
  %494 = load i64, i64* %13, align 8, !tbaa !1240
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %493, i64* %496
  store i64 %495, i64* %13, align 8, !tbaa !1240
  %497 = tail call %struct.Memory* @sub_418a20_ssor(%struct.State* nonnull %0, i64 %492, %struct.Memory* %488)
  %498 = load i64, i64* %3, align 8
  %499 = add i64 %498, -37080
  %500 = add i64 %498, 7
  %501 = load i64, i64* %13, align 8, !tbaa !1240
  %502 = add i64 %501, -8
  %503 = inttoptr i64 %502 to i64*
  store i64 %500, i64* %503
  store i64 %502, i64* %13, align 8, !tbaa !1240
  %504 = tail call %struct.Memory* @sub_4087a0_error(%struct.State* nonnull %0, i64 %499, %struct.Memory* %497)
  %505 = load i64, i64* %3, align 8
  %506 = add i64 %505, 1217
  %507 = add i64 %505, 7
  %508 = load i64, i64* %13, align 8, !tbaa !1240
  %509 = add i64 %508, -8
  %510 = inttoptr i64 %509 to i64*
  store i64 %507, i64* %510
  store i64 %509, i64* %13, align 8, !tbaa !1240
  %511 = tail call %struct.Memory* @sub_411d40_pintgr(%struct.State* nonnull %0, i64 %506, %struct.Memory* %504)
  %512 = load i64, i64* %3, align 8
  store i64 ptrtoint (%rsdnm_type* @rsdnm to i64), i64* %12, align 8, !tbaa !1240
  store i64 ptrtoint (%errnm_type* @errnm to i64), i64* %11, align 8, !tbaa !1240
  %513 = load i64, i64* %14, align 8
  %514 = add i64 %513, -57
  store i64 %514, i64* %10, align 8, !tbaa !1240
  %515 = add i64 %513, -64
  store i64 %515, i64* %9, align 8, !tbaa !1240
  %516 = bitcast [32 x %union.VectorReg]* %23 to i8*
  %517 = load double, double* bitcast (%frc_type* @frc to double*)
  %518 = bitcast [32 x %union.VectorReg]* %23 to double*
  store double %517, double* %518, align 1, !tbaa !1264
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %520 = bitcast i64* %519 to double*
  store double 0.000000e+00, double* %520, align 1, !tbaa !1264
  %521 = add i64 %512, 32314
  %522 = add i64 %512, 42
  %523 = load i64, i64* %13, align 8, !tbaa !1240
  %524 = add i64 %523, -8
  %525 = inttoptr i64 %524 to i64*
  store i64 %522, i64* %525
  store i64 %524, i64* %13, align 8, !tbaa !1240
  %526 = tail call %struct.Memory* @sub_4196c0_verify(%struct.State* nonnull %0, i64 %521, %struct.Memory* %511)
  %527 = load i64, i64* %3, align 8
  %528 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %529 = bitcast %union.VectorReg* %24 to double*
  store double %528, double* %529, align 1, !tbaa !1264
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %531 = bitcast i64* %530 to double*
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %532 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1360) to double*)
  store double %532, double* %518, align 1, !tbaa !1264
  %533 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1384) to double*)
  %534 = bitcast %union.VectorReg* %25 to double*
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %536 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %537 = sitofp i32 %536 to double
  %538 = bitcast %union.VectorReg* %26 to double*
  store double %537, double* %538, align 1, !tbaa !1264
  %539 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %540 = sitofp i32 %539 to double
  %541 = bitcast %union.VectorReg* %27 to double*
  %542 = fmul double %540, %533
  %543 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %544 = sitofp i32 %543 to double
  %545 = fmul double %544, %542
  %546 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %547 = sitofp i32 %546 to double
  %548 = fmul double %547, %545
  store double %548, double* %534, align 1, !tbaa !1264
  store i64 0, i64* %535, align 1, !tbaa !1264
  %549 = add i32 %539, %543
  %550 = add i32 %549, %546
  %551 = sitofp i32 %550 to double
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %553 = bitcast i64* %552 to <2 x i32>*
  %554 = load <2 x i32>, <2 x i32>* %553, align 1
  %555 = load double, double* %518, align 1
  %556 = fdiv double %551, %555
  store double %556, double* %541, align 1, !tbaa !1264
  %557 = bitcast double %556 to <2 x i32>
  %558 = extractelement <2 x i32> %557, i32 0
  %559 = bitcast [32 x %union.VectorReg]* %23 to i32*
  store i32 %558, i32* %559, align 1, !tbaa !1292
  %560 = extractelement <2 x i32> %557, i32 1
  %561 = getelementptr inbounds i8, i8* %516, i64 4
  %562 = bitcast i8* %561 to i32*
  store i32 %560, i32* %562, align 1, !tbaa !1292
  %563 = extractelement <2 x i32> %554, i32 0
  %564 = bitcast i64* %519 to i32*
  store i32 %563, i32* %564, align 1, !tbaa !1292
  %565 = extractelement <2 x i32> %554, i32 1
  %566 = getelementptr inbounds i8, i8* %516, i64 12
  %567 = bitcast i8* %566 to i32*
  store i32 %565, i32* %567, align 1, !tbaa !1292
  %568 = load i64, i64* %14, align 8
  %569 = add i64 %568, -328
  %570 = load double, double* %534, align 1
  %571 = inttoptr i64 %569 to double*
  store double %570, double* %571
  %572 = add i64 %568, -336
  %573 = load double, double* %538, align 1
  %574 = inttoptr i64 %572 to double*
  store double %573, double* %574
  %575 = add i64 %527, 145
  %576 = load i64, i64* %13, align 8, !tbaa !1240
  %577 = add i64 %576, -8
  %578 = inttoptr i64 %577 to i64*
  store i64 %575, i64* %578
  %579 = load i64, i64* %66, align 8, !alias.scope !1864, !noalias !1867
  %580 = load i64, i64* %11, align 8, !alias.scope !1864, !noalias !1867
  %581 = inttoptr i64 %577 to i64*
  %582 = load i64, i64* %581
  store i64 %582, i64* %3, align 8, !alias.scope !1864, !noalias !1867
  store i64 %576, i64* %13, align 8, !alias.scope !1864, !noalias !1867
  %583 = tail call i64 @pow(i64 %579, i64 %580), !noalias !1864
  %584 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1466), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1469), i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1494), i64* %10, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1500), i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1512), i64* %16, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1516), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1522), i64* %18, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1526), i64* %8, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1538), i64* %21, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1547), i64* %22, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1567), i64* %19, align 8, !tbaa !1240
  %585 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1344) to double*)
  store double %585, double* %529, align 1, !tbaa !1264
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %586 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1352) to double*)
  store double %586, double* %534, align 1, !tbaa !1264
  %587 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1360) to double*)
  store double %587, double* %538, align 1, !tbaa !1264
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %589 = bitcast i64* %588 to double*
  store double 0.000000e+00, double* %589, align 1, !tbaa !1264
  %590 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1368) to double*)
  store double %590, double* %541, align 1, !tbaa !1264
  %591 = bitcast i64* %552 to double*
  store double 0.000000e+00, double* %591, align 1, !tbaa !1264
  %592 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1376) to double*)
  %593 = bitcast %union.VectorReg* %28 to double*
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %595 = load double, double* %518, align 1
  %596 = fmul double %592, %595
  store i64 0, i64* %594, align 1, !tbaa !1264
  %597 = load i64, i64* %14, align 8
  %598 = add i64 %597, -328
  %599 = inttoptr i64 %598 to double*
  %600 = load double, double* %599
  %601 = fsub double %600, %596
  store double %601, double* %518, align 1, !tbaa !1264
  %602 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %603 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %604 = add i32 %603, %602
  %605 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %606 = add i32 %605, %604
  %607 = sitofp i32 %606 to double
  store double %607, double* %593, align 1, !tbaa !1264
  %608 = load double, double* %541, align 1
  %609 = fmul double %607, %608
  %610 = load double, double* %538, align 1
  %611 = fdiv double %609, %610
  store double %611, double* %541, align 1, !tbaa !1264
  %612 = load double, double* %518, align 1
  %613 = fadd double %611, %612
  %614 = load double, double* %534, align 1
  %615 = fsub double %613, %614
  %616 = load i64, i64* %14, align 8
  %617 = add i64 %616, -336
  %618 = inttoptr i64 %617 to double*
  %619 = load double, double* %618
  %620 = fmul double %619, %615
  %621 = load double, double* %529, align 1
  %622 = load double, double* bitcast (%maxtime_type* @maxtime to double*)
  %623 = fmul double %621, %622
  %624 = fdiv double %620, %623
  store double %624, double* %534, align 1, !tbaa !1264
  store i64 0, i64* %535, align 1, !tbaa !1264
  %625 = add i64 %616, -72
  %626 = inttoptr i64 %625 to double*
  store double %624, double* %626
  %627 = add i64 %616, -57
  %628 = inttoptr i64 %627 to i8*
  %629 = load i8, i8* %628
  %630 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %631 = zext i32 %630 to i64
  %632 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %633 = zext i32 %632 to i64
  %634 = add i64 %616, -337
  %635 = inttoptr i64 %634 to i8*
  store i8 %629, i8* %635
  %636 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %637 = add i64 %616, -344
  %638 = inttoptr i64 %637 to i32*
  store i32 %636, i32* %638
  %639 = load i32, i32* bitcast (%itmax_type* @itmax to i32*)
  %640 = load double, double* bitcast (%maxtime_type* @maxtime to double*)
  store double %640, double* %518, align 1, !tbaa !1264
  store double 0.000000e+00, double* %520, align 1, !tbaa !1264
  %641 = inttoptr i64 %625 to double*
  %642 = load double, double* %641
  store double %642, double* %529, align 1, !tbaa !1264
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %643 = add i64 %616, -348
  %644 = inttoptr i64 %643 to i32*
  store i32 %639, i32* %644
  %645 = add i64 %616, -64
  %646 = inttoptr i64 %645 to i32*
  %647 = load i32, i32* %646
  %648 = add i64 %616, -352
  %649 = inttoptr i64 %648 to i32*
  store i32 %647, i32* %649
  %650 = inttoptr i64 %634 to i8*
  %651 = load i8, i8* %650
  %652 = add i64 %616, -360
  %653 = load i64, i64* %11, align 8
  %654 = inttoptr i64 %652 to i64*
  store i64 %653, i64* %654
  %655 = sext i8 %651 to i64
  %656 = and i64 %655, 4294967295
  store i64 %656, i64* %11, align 8, !tbaa !1240
  %657 = load i64, i64* %14, align 8
  %658 = add i64 %657, -368
  %659 = load i64, i64* %10, align 8
  %660 = inttoptr i64 %658 to i64*
  store i64 %659, i64* %660
  store i64 %631, i64* %10, align 8, !tbaa !1240
  %661 = add i64 %657, -376
  %662 = load i64, i64* %9, align 8
  %663 = inttoptr i64 %661 to i64*
  store i64 %662, i64* %663
  store i64 %633, i64* %9, align 8, !tbaa !1240
  %664 = add i64 %657, -344
  %665 = inttoptr i64 %664 to i32*
  %666 = load i32, i32* %665
  %667 = zext i32 %666 to i64
  store i64 %667, i64* %15, align 8, !tbaa !1240
  %668 = add i64 %657, -348
  %669 = inttoptr i64 %668 to i32*
  %670 = load i32, i32* %669
  %671 = zext i32 %670 to i64
  %672 = add i64 %657, -384
  %673 = load i64, i64* %16, align 8
  %674 = inttoptr i64 %672 to i64*
  store i64 %673, i64* %674
  store i64 %671, i64* %16, align 8, !tbaa !1240
  %675 = inttoptr i64 %661 to i64*
  %676 = load i64, i64* %675
  %677 = load i64, i64* %13, align 8
  %678 = inttoptr i64 %677 to i64*
  store i64 %676, i64* %678
  %679 = add i64 %657, -352
  %680 = inttoptr i64 %679 to i32*
  %681 = load i32, i32* %680
  %682 = add i64 %677, 8
  %683 = inttoptr i64 %682 to i32*
  store i32 %681, i32* %683
  %684 = inttoptr i64 %658 to i64*
  %685 = load i64, i64* %684
  %686 = add i64 %677, 16
  %687 = inttoptr i64 %686 to i64*
  store i64 %685, i64* %687
  %688 = add i64 %657, -360
  %689 = inttoptr i64 %688 to i64*
  %690 = load i64, i64* %689
  %691 = add i64 %677, 24
  %692 = inttoptr i64 %691 to i64*
  store i64 %690, i64* %692
  %693 = inttoptr i64 %672 to i64*
  %694 = load i64, i64* %693
  store i64 %694, i64* %20, align 8, !tbaa !1240
  %695 = add i64 %677, 32
  %696 = inttoptr i64 %695 to i64*
  store i64 %694, i64* %696
  %697 = add i64 %677, 40
  %698 = load i64, i64* %17, align 8
  %699 = inttoptr i64 %697 to i64*
  store i64 %698, i64* %699
  %700 = add i64 %677, 48
  %701 = load i64, i64* %18, align 8
  %702 = inttoptr i64 %700 to i64*
  store i64 %701, i64* %702
  %703 = add i64 %677, 56
  %704 = load i64, i64* %8, align 8
  %705 = inttoptr i64 %703 to i64*
  store i64 %704, i64* %705
  %706 = add i64 %677, 64
  %707 = load i64, i64* %21, align 8
  %708 = inttoptr i64 %706 to i64*
  store i64 %707, i64* %708
  %709 = add i64 %677, 72
  %710 = load i64, i64* %22, align 8
  %711 = inttoptr i64 %709 to i64*
  store i64 %710, i64* %711
  %712 = add i64 %677, 80
  %713 = load i64, i64* %19, align 8
  %714 = inttoptr i64 %712 to i64*
  store i64 %713, i64* %714
  %715 = add i64 %584, 5871
  %716 = add i64 %584, 468
  %717 = add i64 %677, -8
  %718 = inttoptr i64 %717 to i64*
  store i64 %716, i64* %718
  store i64 %717, i64* %13, align 8, !tbaa !1240
  %719 = tail call %struct.Memory* @sub_413030_print_results(%struct.State* nonnull %0, i64 %715, %struct.Memory* %526)
  %720 = load i64, i64* %3, align 8
  %721 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %722 = icmp eq i32 %721, 0
  %723 = select i1 %722, i64 531, i64 14
  %724 = add i64 %720, %723
  br i1 %722, label %block_41182a.block_411d28_crit_edge, label %block_411b23

block_41182a.block_411d28_crit_edge:              ; preds = %block_41182a
  %725 = load i64, i64* %7, align 8
  %726 = trunc i64 %725 to i32
  br label %block_411d28

block_411b69:                                     ; preds = %block_411b2d
  store i32 0, i32* %559, align 1, !tbaa !1266
  store i32 0, i32* %562, align 1, !tbaa !1266
  store i32 0, i32* %564, align 1, !tbaa !1266
  store i32 0, i32* %567, align 1, !tbaa !1266
  %727 = load double, double* bitcast (%maxtime_type* @maxtime to double*)
  %728 = add i64 %394, -88
  %729 = inttoptr i64 %728 to double*
  store double %727, double* %729
  %730 = inttoptr i64 %728 to double*
  %731 = load double, double* %730
  store double %731, double* %529, align 1, !tbaa !1264
  store double 0.000000e+00, double* %531, align 1, !tbaa !1264
  %732 = add i64 %424, 26
  store i64 %732, i64* %3, align 8
  %733 = load double, double* %518, align 1
  %734 = fcmp uno double %731, %733
  br i1 %734, label %735, label %747

; <label>:735:                                    ; preds = %block_411b69
  %736 = fadd double %731, %733
  %737 = bitcast double %736 to i64
  %738 = and i64 %737, 9221120237041090560
  %739 = icmp eq i64 %738, 9218868437227405312
  %740 = and i64 %737, 2251799813685247
  %741 = icmp ne i64 %740, 0
  %742 = and i1 %739, %741
  br i1 %742, label %743, label %753

; <label>:743:                                    ; preds = %735
  %744 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %732, %struct.Memory* %395) #14
  %745 = load i64, i64* %3, align 8
  %746 = load i8, i8* %52, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:747:                                    ; preds = %block_411b69
  %748 = fcmp ogt double %731, %733
  br i1 %748, label %753, label %749

; <label>:749:                                    ; preds = %747
  %750 = fcmp olt double %731, %733
  br i1 %750, label %753, label %751

; <label>:751:                                    ; preds = %749
  %752 = fcmp oeq double %731, %733
  br i1 %752, label %753, label %756

; <label>:753:                                    ; preds = %751, %749, %747, %735
  %754 = phi i8 [ 0, %747 ], [ 0, %749 ], [ 1, %751 ], [ 1, %735 ]
  %755 = phi i8 [ 0, %747 ], [ 0, %749 ], [ 0, %751 ], [ 1, %735 ]
  store i8 %755, i8* %50, align 1, !tbaa !1244
  br label %756

; <label>:756:                                    ; preds = %753, %751
  %757 = phi i8 [ %754, %753 ], [ 0, %751 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %756, %743
  %758 = phi i8 [ %746, %743 ], [ %757, %756 ]
  %759 = phi i64 [ %745, %743 ], [ %732, %756 ]
  %760 = phi %struct.Memory* [ %744, %743 ], [ %395, %756 ]
  %761 = icmp eq i8 %758, 0
  %762 = select i1 %761, i64 25, i64 6
  %763 = add i64 %759, %762
  br i1 %761, label %block_411b9c, label %block_411b89

block_411d28:                                     ; preds = %block_41182a.block_411d28_crit_edge, %block_411d23
  %764 = phi i32 [ %726, %block_41182a.block_411d28_crit_edge ], [ %361, %block_411d23 ]
  %765 = phi i64 [ %725, %block_41182a.block_411d28_crit_edge ], [ %362, %block_411d23 ]
  %766 = phi %struct.Memory* [ %719, %block_41182a.block_411d28_crit_edge ], [ %365, %block_411d23 ]
  %767 = zext i32 %764 to i64
  %768 = and i64 %765, 4294967295
  %769 = xor i64 %767, %768
  store i64 %769, i64* %7, align 8, !tbaa !1240
  %770 = load i64, i64* %13, align 8
  %771 = add i64 %770, 488
  %772 = icmp ugt i64 %770, -489
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %49, align 1, !tbaa !1245
  %774 = trunc i64 %771 to i32
  %775 = and i32 %774, 255
  %776 = tail call i32 @llvm.ctpop.i32(i32 %775) #11
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  store i8 %779, i8* %50, align 1, !tbaa !1259
  %780 = xor i64 %771, %770
  %781 = lshr i64 %780, 4
  %782 = trunc i64 %781 to i8
  %783 = and i8 %782, 1
  store i8 %783, i8* %51, align 1, !tbaa !1263
  %784 = icmp eq i64 %771, 0
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %52, align 1, !tbaa !1260
  %786 = lshr i64 %771, 63
  %787 = trunc i64 %786 to i8
  store i8 %787, i8* %53, align 1, !tbaa !1261
  %788 = lshr i64 %770, 63
  %789 = xor i64 %786, %788
  %790 = add nuw nsw i64 %789, %786
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %54, align 1, !tbaa !1262
  %793 = add i64 %770, 496
  %794 = inttoptr i64 %771 to i64*
  %795 = load i64, i64* %794
  store i64 %795, i64* %8, align 8, !tbaa !1240
  %796 = add i64 %770, 504
  %797 = inttoptr i64 %793 to i64*
  %798 = load i64, i64* %797
  store i64 %798, i64* %19, align 8, !tbaa !1240
  %799 = add i64 %770, 512
  %800 = inttoptr i64 %796 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %20, align 8, !tbaa !1240
  %802 = add i64 %770, 520
  %803 = inttoptr i64 %799 to i64*
  %804 = load i64, i64* %803
  store i64 %804, i64* %21, align 8, !tbaa !1240
  %805 = add i64 %770, 528
  %806 = inttoptr i64 %802 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %22, align 8, !tbaa !1240
  %808 = add i64 %770, 536
  %809 = inttoptr i64 %805 to i64*
  %810 = load i64, i64* %809
  store i64 %810, i64* %14, align 8, !tbaa !1240
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %3, align 8, !tbaa !1240
  %813 = add i64 %770, 544
  store i64 %813, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %766

block_411b3a:                                     ; preds = %block_411b2d
  %814 = zext i32 %398 to i64
  store i64 %814, i64* %12, align 8, !tbaa !1240
  %815 = add i64 %424, -57130
  %816 = add i64 %424, 11
  %817 = load i64, i64* %13, align 8, !tbaa !1240
  %818 = add i64 %817, -8
  %819 = inttoptr i64 %818 to i64*
  store i64 %816, i64* %819
  store i64 %818, i64* %13, align 8, !tbaa !1240
  %820 = tail call %struct.Memory* @sub_403c10_timer_read(%struct.State* nonnull %0, i64 %815, %struct.Memory* %395)
  %821 = load i64, i64* %14, align 8
  %822 = add i64 %821, -196
  %823 = load i64, i64* %3, align 8
  %824 = inttoptr i64 %822 to i32*
  %825 = load i32, i32* %824
  %826 = sext i32 %825 to i64
  %827 = shl nsw i64 %826, 3
  %828 = add i64 %821, -192
  %829 = add i64 %828, %827
  %830 = load double, double* %518, align 1
  %831 = inttoptr i64 %829 to double*
  store double %830, double* %831
  %832 = inttoptr i64 %822 to i32*
  %833 = load i32, i32* %832
  %834 = add i32 %833, 1
  %835 = zext i32 %834 to i64
  store i64 %835, i64* %7, align 8, !tbaa !1240
  %836 = inttoptr i64 %822 to i32*
  store i32 %834, i32* %836
  %837 = add i64 %823, -24
  br label %block_411b2d

block_411b23:                                     ; preds = %block_41182a
  %838 = load i64, i64* %14, align 8
  %839 = add i64 %838, -196
  %840 = add i64 %724, 10
  %841 = inttoptr i64 %839 to i32*
  store i32 1, i32* %841
  br label %block_411b2d

block_411742:                                     ; preds = %block_4116f0
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1455), i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1450), i64* %10, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1445), i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1434), i64* %15, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1661), i64* %16, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1429), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1424), i64* %18, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1419), i64* %8, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1413), i64* %21, align 8, !tbaa !1240
  store i32 1, i32* bitcast (%timeron_type* @timeron to i32*)
  %842 = add i64 %70, -296
  %843 = inttoptr i64 %842 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1413), i64* %843
  %844 = add i64 %70, -288
  %845 = inttoptr i64 %844 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1419), i64* %845
  %846 = add i64 %70, -280
  %847 = inttoptr i64 %846 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1424), i64* %847
  %848 = add i64 %70, -272
  %849 = inttoptr i64 %848 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1429), i64* %849
  %850 = add i64 %70, -264
  %851 = inttoptr i64 %850 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1661), i64* %851
  %852 = add i64 %70, -256
  %853 = inttoptr i64 %852 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1434), i64* %853
  %854 = add i64 %70, -248
  %855 = inttoptr i64 %854 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1440), i64* %855
  %856 = add i64 %70, -240
  %857 = inttoptr i64 %856 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1445), i64* %857
  %858 = add i64 %70, -232
  %859 = inttoptr i64 %858 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1450), i64* %859
  %860 = add i64 %70, -224
  %861 = inttoptr i64 %860 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1455), i64* %861
  %862 = add i64 %70, -216
  %863 = inttoptr i64 %862 to i64*
  store i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1459), i64* %863
  %864 = inttoptr i64 %71 to i64*
  %865 = load i64, i64* %864
  %866 = add i64 %76, 210
  %867 = load i64, i64* %13, align 8, !tbaa !1240
  %868 = add i64 %867, -8
  %869 = inttoptr i64 %868 to i64*
  store i64 %866, i64* %869
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870
  store i64 %871, i64* %3, align 8, !alias.scope !1869, !noalias !1872
  store i64 %867, i64* %13, align 8, !alias.scope !1869, !noalias !1872
  %872 = tail call i64 @fclose(i64 %865), !noalias !1869
  %873 = load i64, i64* %14, align 8
  %874 = add i64 %873, -316
  %875 = trunc i64 %872 to i32
  %876 = load i64, i64* %3, align 8
  %877 = inttoptr i64 %874 to i32*
  store i32 %875, i32* %877
  %878 = add i64 %876, 22
  br label %block_41182a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_411490_l2norm(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_411490:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %15 = bitcast %union.anon* %14 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %17 = bitcast %union.anon* %16 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %19 = bitcast %union.anon* %18 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %22 = bitcast %union.anon* %21 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %24 = bitcast %union.anon* %23 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %26 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %27 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %28 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %29 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %33 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %35 = getelementptr inbounds %union.anon, %union.anon* %21, i64 0, i32 0
  %36 = getelementptr inbounds %union.anon, %union.anon* %23, i64 0, i32 0
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %39 = load i64, i64* %31, align 8
  %40 = load i64, i64* %30, align 8, !tbaa !1240
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %39, i64* %42
  store i64 %41, i64* %31, align 8, !tbaa !1240
  %43 = load i64, i64* %36, align 8
  %44 = add i64 %40, -16
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  %46 = load i64, i64* %35, align 8
  %47 = add i64 %40, -24
  %48 = inttoptr i64 %47 to i64*
  store i64 %46, i64* %48
  %49 = load i64, i64* %34, align 8
  %50 = add i64 %40, -32
  %51 = inttoptr i64 %50 to i64*
  store i64 %49, i64* %51
  %52 = load i64, i64* %33, align 8
  %53 = add i64 %40, -40
  %54 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %54
  %55 = load i64, i64* %26, align 8
  %56 = add i64 %40, -48
  %57 = inttoptr i64 %56 to i64*
  store i64 %55, i64* %57
  %58 = add i64 %40, -152
  store i64 %58, i64* %30, align 8, !tbaa !1240
  %59 = icmp ult i64 %56, 104
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !1245
  %62 = trunc i64 %58 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !1259
  %69 = xor i64 %56, %58
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %72, i8* %73, align 1, !tbaa !1263
  %74 = icmp eq i64 %58, 0
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %75, i8* %76, align 1, !tbaa !1260
  %77 = lshr i64 %58, 63
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %78, i8* %79, align 1, !tbaa !1261
  %80 = lshr i64 %56, 63
  %81 = xor i64 %77, %80
  %82 = add nuw nsw i64 %81, %80
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %84, i8* %85, align 1, !tbaa !1262
  %86 = add i64 %40, 48
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %40, 40
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %32, align 8, !tbaa !1240
  %92 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  %93 = add i64 %40, 32
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = zext i32 %95 to i64
  store i64 %96, i64* %92, align 8, !tbaa !1240
  %97 = add i64 %40, 24
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %26, align 8, !tbaa !1240
  %101 = add i64 %40, 16
  %102 = inttoptr i64 %101 to i32*
  %103 = load i32, i32* %102
  %104 = zext i32 %103 to i64
  store i64 %104, i64* %35, align 8, !tbaa !1240
  %105 = add i64 %40, 8
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106
  %108 = zext i32 %107 to i64
  store i64 %108, i64* %36, align 8, !tbaa !1240
  store i64 2, i64* %33, align 8, !tbaa !1240
  %109 = load i64, i64* %31, align 8
  %110 = add i64 %109, -44
  %111 = load i32, i32* %13, align 4
  %112 = inttoptr i64 %110 to i32*
  store i32 %111, i32* %112
  %113 = add i64 %109, -48
  %114 = load i32, i32* %11, align 4
  %115 = inttoptr i64 %113 to i32*
  store i32 %114, i32* %115
  %116 = add i64 %109, -52
  %117 = load i32, i32* %9, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %109, -56
  %120 = load i32, i32* %7, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %109, -60
  %123 = load i32, i32* %15, align 4
  %124 = inttoptr i64 %122 to i32*
  store i32 %123, i32* %124
  %125 = add i64 %109, -64
  %126 = load i32, i32* %17, align 4
  %127 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %127
  %128 = inttoptr i64 %113 to i32*
  %129 = load i32, i32* %128
  %130 = zext i32 %129 to i64
  store i64 %130, i64* %27, align 8, !tbaa !1240
  %131 = add i64 %109, -88
  %132 = inttoptr i64 %131 to i64*
  store i64 %88, i64* %132
  store i64 %130, i64* %25, align 8, !tbaa !1240
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %134 = sext i32 %129 to i64
  %135 = lshr i64 %134, 32
  store i64 %135, i64* %133, align 8, !tbaa !1240
  %136 = add i64 %1, 79
  store i64 %136, i64* %3, align 8
  %137 = shl nuw i64 %135, 32
  %138 = or i64 %137, %130
  %139 = sdiv i64 %138, 2
  %140 = shl i64 %139, 32
  %141 = ashr exact i64 %140, 32
  %142 = icmp eq i64 %139, %141
  br i1 %142, label %151, label %143

; <label>:143:                                    ; preds = %block_411490
  %144 = bitcast %union.anon* %20 to i32*
  %145 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %136, %struct.Memory* %2) #14
  %146 = load i64, i64* %25, align 8
  %147 = load i64, i64* %3, align 8
  %148 = load i64, i64* %31, align 8
  %149 = load i32, i32* %144, align 4
  %150 = sext i32 %149 to i64
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:151:                                    ; preds = %block_411490
  %152 = and i64 %139, 4294967295
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %151, %143
  %153 = phi i64 [ %150, %143 ], [ 2, %151 ]
  %154 = phi i64 [ %148, %143 ], [ %109, %151 ]
  %155 = phi i64 [ %147, %143 ], [ %136, %151 ]
  %156 = phi i64 [ %146, %143 ], [ %152, %151 ]
  %157 = phi %struct.Memory* [ %145, %143 ], [ %2, %151 ]
  %158 = trunc i64 %156 to i32
  %159 = shl i32 %158, 1
  %160 = or i32 %159, 1
  %161 = zext i32 %160 to i64
  store i8 0, i8* %61, align 1, !tbaa !1245
  %162 = and i32 %160, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #11
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %68, align 1, !tbaa !1259
  store i8 0, i8* %73, align 1, !tbaa !1263
  store i8 0, i8* %76, align 1, !tbaa !1260
  %167 = lshr i32 %158, 30
  %168 = and i32 %167, 1
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %79, align 1, !tbaa !1261
  %170 = lshr i32 %158, 30
  %171 = and i32 %170, 1
  %172 = xor i32 %168, %171
  %173 = add nuw nsw i32 %172, %168
  %174 = icmp eq i32 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %85, align 1, !tbaa !1262
  store i64 %161, i64* %34, align 8, !tbaa !1240
  %176 = add i64 %154, -44
  %177 = inttoptr i64 %176 to i32*
  %178 = load i32, i32* %177
  %179 = zext i32 %178 to i64
  store i64 %179, i64* %25, align 8, !tbaa !1240
  %180 = sext i32 %178 to i64
  %181 = lshr i64 %180, 32
  store i64 %181, i64* %133, align 8, !tbaa !1240
  %182 = add i64 %155, 18
  store i64 %182, i64* %3, align 8
  %183 = shl nuw i64 %181, 32
  %184 = or i64 %183, %179
  %185 = sdiv i64 %184, %153
  %186 = shl i64 %185, 32
  %187 = ashr exact i64 %186, 32
  %188 = icmp eq i64 %185, %187
  br i1 %188, label %195, label %189

; <label>:189:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %190 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %182, %struct.Memory* %157) #14
  %191 = load i64, i64* %25, align 8
  %192 = load i64, i64* %3, align 8
  %193 = load i64, i64* %31, align 8
  %194 = load i64, i64* %34, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:195:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %196 = srem i64 %184, %153
  %197 = and i64 %185, 4294967295
  %198 = and i64 %196, 4294967295
  store i64 %198, i64* %28, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %195, %189
  %199 = phi i64 [ %194, %189 ], [ %161, %195 ]
  %200 = phi i64 [ %193, %189 ], [ %154, %195 ]
  %201 = phi i64 [ %192, %189 ], [ %182, %195 ]
  %202 = phi i64 [ %191, %189 ], [ %197, %195 ]
  %203 = phi %struct.Memory* [ %190, %189 ], [ %157, %195 ]
  %204 = trunc i64 %202 to i32
  %205 = shl i32 %204, 1
  %206 = or i32 %205, 1
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %29, align 8, !tbaa !1240
  %208 = add i64 %200, -80
  %209 = inttoptr i64 %208 to i32*
  store i32 0, i32* %209
  %210 = add i64 %200, -92
  %211 = load i32, i32* %24, align 4
  %212 = inttoptr i64 %210 to i32*
  store i32 %211, i32* %212
  %213 = add i64 %200, -104
  %214 = load i64, i64* %32, align 8
  %215 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %215
  %216 = add i64 %200, -108
  %217 = load i32, i32* %19, align 4
  %218 = inttoptr i64 %216 to i32*
  store i32 %217, i32* %218
  %219 = add i64 %200, -112
  %220 = load i32, i32* %5, align 4
  %221 = inttoptr i64 %219 to i32*
  store i32 %220, i32* %221
  %222 = add i64 %200, -116
  %223 = load i32, i32* %22, align 4
  %224 = inttoptr i64 %222 to i32*
  store i32 %223, i32* %224
  %225 = add i64 %200, -128
  %226 = inttoptr i64 %225 to i64*
  store i64 %199, i64* %226
  %227 = add i64 %200, -136
  %228 = add i64 %201, 47
  %229 = inttoptr i64 %227 to i64*
  store i64 %207, i64* %229
  %230 = load i64, i64* %31, align 8
  %231 = add i64 %230, -80
  %232 = bitcast [32 x %union.VectorReg]* %37 to i8*
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %234 = bitcast [32 x %union.VectorReg]* %37 to i32*
  %235 = getelementptr inbounds i8, i8* %232, i64 4
  %236 = bitcast i8* %235 to i32*
  %237 = bitcast i64* %233 to i32*
  %238 = getelementptr inbounds i8, i8* %232, i64 12
  %239 = bitcast i8* %238 to i32*
  %240 = add i64 %230, 56
  %241 = bitcast [32 x %union.VectorReg]* %37 to double*
  br label %block_411520

block_411572:                                     ; preds = %block_411566
  %242 = inttoptr i64 %285 to i32*
  %243 = load i32, i32* %242
  %244 = add i64 %263, 6
  %245 = inttoptr i64 %286 to i32*
  store i32 %243, i32* %245
  br label %block_411578

block_411566:                                     ; preds = %block_411657, %block_411560
  %246 = phi i64 [ %266, %block_411560 ], [ %272, %block_411657 ]
  %247 = phi %struct.Memory* [ %457, %block_411560 ], [ %397, %block_411657 ]
  %248 = inttoptr i64 %283 to i32*
  %249 = load i32, i32* %248
  %250 = inttoptr i64 %284 to i32*
  %251 = load i32, i32* %250
  %252 = sub i32 %249, %251
  %253 = lshr i32 %252, 31
  %254 = lshr i32 %249, 31
  %255 = lshr i32 %251, 31
  %256 = xor i32 %255, %254
  %257 = xor i32 %253, %254
  %258 = add nuw nsw i32 %257, %256
  %259 = icmp eq i32 %258, 2
  %260 = icmp ne i32 %253, 0
  %261 = xor i1 %260, %259
  %262 = select i1 %261, i64 12, i64 260
  %263 = add i64 %246, %262
  br i1 %261, label %block_411572, label %block_41166a

block_411560:                                     ; preds = %block_41154f
  %264 = inttoptr i64 %282 to i32*
  %265 = load i32, i32* %264
  %266 = add i64 %475, 6
  %267 = inttoptr i64 %283 to i32*
  store i32 %265, i32* %267
  br label %block_411566

block_411657:                                     ; preds = %block_411578
  %268 = inttoptr i64 %283 to i32*
  %269 = load i32, i32* %268
  %270 = add i32 %269, 1
  %271 = inttoptr i64 %283 to i32*
  store i32 %270, i32* %271
  %272 = add i64 %413, -241
  br label %block_411566

block_41166a:                                     ; preds = %block_411566
  %273 = inttoptr i64 %278 to i32*
  %274 = load i32, i32* %273
  %275 = add i32 %274, 1
  %276 = inttoptr i64 %278 to i32*
  store i32 %275, i32* %276
  %277 = add i64 %263, -283
  br label %block_41154f

block_411548:                                     ; preds = %block_411520
  %278 = add i64 %230, -76
  %279 = add i64 %324, 7
  %280 = inttoptr i64 %278 to i32*
  store i32 1, i32* %280
  %281 = add i64 %230, -64
  %282 = add i64 %230, 32
  %283 = add i64 %230, -72
  %284 = add i64 %230, 40
  %285 = add i64 %230, 16
  %286 = add i64 %230, -68
  %287 = add i64 %230, 24
  %288 = add i64 %230, 48
  %289 = add i64 %230, -128
  %290 = add i64 %230, -136
  %291 = bitcast %union.VectorReg* %38 to double*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_41154f

block_411644:                                     ; preds = %block_41158b
  %293 = inttoptr i64 %286 to i32*
  %294 = load i32, i32* %293
  %295 = add i32 %294, 1
  %296 = inttoptr i64 %286 to i32*
  store i32 %295, i32* %296
  %297 = add i64 %536, -204
  br label %block_411578

block_41152a:                                     ; preds = %block_411520
  store i32 0, i32* %234, align 1, !tbaa !1266
  store i32 0, i32* %236, align 1, !tbaa !1266
  store i32 0, i32* %237, align 1, !tbaa !1266
  store i32 0, i32* %239, align 1, !tbaa !1266
  %298 = inttoptr i64 %240 to i64*
  %299 = load i64, i64* %298
  %300 = sext i32 %313 to i64
  %301 = shl nsw i64 %300, 3
  %302 = add i64 %301, %299
  %303 = load double, double* %241, align 1
  %304 = inttoptr i64 %302 to double*
  store double %303, double* %304
  %305 = inttoptr i64 %231 to i32*
  %306 = load i32, i32* %305
  %307 = add i32 %306, 1
  %308 = inttoptr i64 %231 to i32*
  store i32 %307, i32* %308
  %309 = add i64 %324, -10
  br label %block_411520

block_411520:                                     ; preds = %block_41152a, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %310 = phi i64 [ %228, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %309, %block_41152a ]
  %311 = phi %struct.Memory* [ %203, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %311, %block_41152a ]
  %312 = inttoptr i64 %231 to i32*
  %313 = load i32, i32* %312
  %314 = add i32 %313, -5
  %315 = lshr i32 %314, 31
  %316 = trunc i32 %315 to i8
  %317 = lshr i32 %313, 31
  %318 = xor i32 %315, %317
  %319 = add nuw nsw i32 %318, %317
  %320 = icmp eq i32 %319, 2
  %321 = icmp ne i8 %316, 0
  %322 = xor i1 %321, %320
  %323 = select i1 %322, i64 10, i64 40
  %324 = add i64 %310, %323
  br i1 %322, label %block_41152a, label %block_411548

block_4116db:                                     ; preds = %block_411684
  %325 = load i64, i64* %30, align 8
  %326 = add i64 %325, 104
  %327 = icmp ugt i64 %325, -105
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %61, align 1, !tbaa !1245
  %329 = trunc i64 %326 to i32
  %330 = and i32 %329, 255
  %331 = tail call i32 @llvm.ctpop.i32(i32 %330) #11
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  store i8 %334, i8* %68, align 1, !tbaa !1259
  %335 = xor i64 %326, %325
  %336 = lshr i64 %335, 4
  %337 = trunc i64 %336 to i8
  %338 = and i8 %337, 1
  store i8 %338, i8* %73, align 1, !tbaa !1263
  %339 = icmp eq i64 %326, 0
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %76, align 1, !tbaa !1260
  %341 = lshr i64 %326, 63
  %342 = trunc i64 %341 to i8
  store i8 %342, i8* %79, align 1, !tbaa !1261
  %343 = lshr i64 %325, 63
  %344 = xor i64 %341, %343
  %345 = add nuw nsw i64 %344, %341
  %346 = icmp eq i64 %345, 2
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %85, align 1, !tbaa !1262
  %348 = add i64 %325, 112
  %349 = inttoptr i64 %326 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %26, align 8, !tbaa !1240
  %351 = add i64 %325, 120
  %352 = inttoptr i64 %348 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %33, align 8, !tbaa !1240
  %354 = add i64 %325, 128
  %355 = inttoptr i64 %351 to i64*
  %356 = load i64, i64* %355
  store i64 %356, i64* %34, align 8, !tbaa !1240
  %357 = add i64 %325, 136
  %358 = inttoptr i64 %354 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %35, align 8, !tbaa !1240
  %360 = add i64 %325, 144
  %361 = inttoptr i64 %357 to i64*
  %362 = load i64, i64* %361
  store i64 %362, i64* %36, align 8, !tbaa !1240
  %363 = add i64 %325, 152
  %364 = inttoptr i64 %360 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %31, align 8, !tbaa !1240
  %366 = inttoptr i64 %363 to i64*
  %367 = load i64, i64* %366
  store i64 %367, i64* %3, align 8, !tbaa !1240
  %368 = add i64 %325, 160
  store i64 %368, i64* %30, align 8, !tbaa !1240
  ret %struct.Memory* %370

block_411684:                                     ; preds = %block_41168e, %block_41167d
  %369 = phi i64 [ %383, %block_41167d ], [ %522, %block_41168e ]
  %370 = phi %struct.Memory* [ %457, %block_41167d ], [ %370, %block_41168e ]
  %371 = inttoptr i64 %386 to i32*
  %372 = load i32, i32* %371
  %373 = add i32 %372, -5
  %374 = lshr i32 %373, 31
  %375 = lshr i32 %372, 31
  %376 = xor i32 %374, %375
  %377 = add nuw nsw i32 %376, %375
  %378 = icmp eq i32 %377, 2
  %379 = icmp ne i32 %374, 0
  %380 = xor i1 %379, %378
  br i1 %380, label %block_41168e, label %block_4116db

block_41167d:                                     ; preds = %block_41154f
  %381 = zext i32 %462 to i64
  %382 = zext i32 %459 to i64
  store i64 %381, i64* %27, align 8, !tbaa !1240
  store i64 %382, i64* %25, align 8, !tbaa !1240
  %383 = add i64 %475, 7
  %384 = inttoptr i64 %231 to i32*
  store i32 0, i32* %384
  %385 = load i64, i64* %31, align 8
  %386 = add i64 %385, -80
  %387 = add i64 %385, 56
  %388 = add i64 %385, -56
  %389 = add i64 %385, -60
  %390 = add i64 %385, -64
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %392 = bitcast %union.VectorReg* %391 to double*
  %393 = bitcast %union.VectorReg* %391 to i128*
  %394 = load i64, i64* %30, align 8
  %395 = add i64 %394, -8
  br label %block_411684

block_411578:                                     ; preds = %block_411644, %block_411572
  %396 = phi i64 [ %244, %block_411572 ], [ %297, %block_411644 ]
  %397 = phi %struct.Memory* [ %247, %block_411572 ], [ %524, %block_411644 ]
  %398 = inttoptr i64 %286 to i32*
  %399 = load i32, i32* %398
  %400 = inttoptr i64 %287 to i32*
  %401 = load i32, i32* %400
  %402 = sub i32 %399, %401
  %403 = lshr i32 %402, 31
  %404 = lshr i32 %399, 31
  %405 = lshr i32 %401, 31
  %406 = xor i32 %405, %404
  %407 = xor i32 %403, %404
  %408 = add nuw nsw i32 %407, %406
  %409 = icmp eq i32 %408, 2
  %410 = icmp ne i32 %403, 0
  %411 = xor i1 %410, %409
  %412 = select i1 %411, i64 12, i64 223
  %413 = add i64 %396, %412
  br i1 %411, label %block_411584, label %block_411657

block_411595:                                     ; preds = %block_41158b
  %414 = inttoptr i64 %240 to i64*
  %415 = load i64, i64* %414
  %416 = sext i32 %526 to i64
  %417 = shl nsw i64 %416, 3
  %418 = add i64 %417, %415
  %419 = inttoptr i64 %418 to double*
  %420 = load double, double* %419
  %421 = inttoptr i64 %288 to i64*
  %422 = load i64, i64* %421
  %423 = inttoptr i64 %278 to i32*
  %424 = load i32, i32* %423
  %425 = sext i32 %424 to i64
  %426 = inttoptr i64 %289 to i64*
  %427 = load i64, i64* %426
  %428 = inttoptr i64 %290 to i64*
  %429 = load i64, i64* %428
  store i64 %429, i64* %29, align 8, !tbaa !1240
  %430 = mul i64 %429, %427
  %431 = mul i64 %430, %425
  %432 = mul i64 %431, 40
  %433 = add i64 %432, %422
  %434 = inttoptr i64 %283 to i32*
  %435 = load i32, i32* %434
  %436 = sext i32 %435 to i64
  %437 = mul i64 %429, %436
  %438 = mul i64 %437, 40
  %439 = add i64 %438, %433
  %440 = inttoptr i64 %286 to i32*
  %441 = load i32, i32* %440
  %442 = sext i32 %441 to i64
  %443 = mul nsw i64 %442, 40
  %444 = add i64 %443, %439
  %445 = add i64 %417, %444
  %446 = inttoptr i64 %445 to double*
  %447 = load double, double* %446
  store i64 %430, i64* %28, align 8, !tbaa !1240
  %448 = fmul double %447, %447
  store double %448, double* %291, align 1, !tbaa !1264
  store i64 0, i64* %292, align 1, !tbaa !1264
  %449 = fadd double %420, %448
  store double %449, double* %241, align 1, !tbaa !1264
  store i64 0, i64* %233, align 1, !tbaa !1264
  %450 = inttoptr i64 %418 to double*
  store double %449, double* %450
  %451 = inttoptr i64 %231 to i32*
  %452 = load i32, i32* %451
  %453 = add i32 %452, 1
  %454 = inttoptr i64 %231 to i32*
  store i32 %453, i32* %454
  %455 = add i64 %536, -10
  br label %block_41158b

block_41154f:                                     ; preds = %block_411548, %block_41166a
  %456 = phi i64 [ %279, %block_411548 ], [ %277, %block_41166a ]
  %457 = phi %struct.Memory* [ %311, %block_411548 ], [ %247, %block_41166a ]
  %458 = inttoptr i64 %278 to i32*
  %459 = load i32, i32* %458
  %460 = inttoptr i64 %281 to i32*
  %461 = load i32, i32* %460
  %462 = add i32 %461, -1
  %463 = sub i32 %459, %462
  %464 = lshr i32 %463, 31
  %465 = trunc i32 %464 to i8
  %466 = lshr i32 %459, 31
  %467 = lshr i32 %462, 31
  %468 = xor i32 %467, %466
  %469 = xor i32 %464, %466
  %470 = add nuw nsw i32 %469, %468
  %471 = icmp eq i32 %470, 2
  %472 = icmp ne i8 %465, 0
  %473 = xor i1 %472, %471
  %474 = select i1 %473, i64 17, i64 302
  %475 = add i64 %456, %474
  br i1 %473, label %block_411560, label %block_41167d

block_41168e:                                     ; preds = %block_411684
  %476 = inttoptr i64 %387 to i64*
  %477 = load i64, i64* %476
  %478 = sext i32 %372 to i64
  %479 = shl nsw i64 %478, 3
  %480 = add i64 %479, %477
  %481 = inttoptr i64 %480 to double*
  %482 = load double, double* %481
  %483 = inttoptr i64 %388 to i32*
  %484 = load i32, i32* %483
  %485 = add i32 %484, -2
  %486 = inttoptr i64 %389 to i32*
  %487 = load i32, i32* %486
  %488 = add i32 %487, -2
  %489 = sext i32 %485 to i64
  %490 = sext i32 %488 to i64
  %491 = mul nsw i64 %490, %489
  %492 = inttoptr i64 %390 to i32*
  %493 = load i32, i32* %492
  %494 = add i32 %493, -2
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %29, align 8, !tbaa !1240
  %496 = shl i64 %491, 32
  %497 = ashr exact i64 %496, 32
  %498 = sext i32 %494 to i64
  %499 = mul nsw i64 %498, %497
  %500 = and i64 %499, 4294967295
  store i64 %500, i64* %28, align 8, !tbaa !1240
  %501 = trunc i64 %499 to i32
  %502 = sitofp i32 %501 to double
  store double %502, double* %291, align 1, !tbaa !1264
  %503 = fdiv double %482, %502
  %504 = add i64 %369, 60
  %505 = inttoptr i64 %395 to i64*
  store i64 %504, i64* %505
  %506 = inttoptr i64 %395 to i64*
  %507 = load i64, i64* %506
  %508 = tail call double @sqrt(double %503) #11
  store i128 0, i128* %393, align 8, !alias.scope !1874, !noalias !1877
  store double %508, double* %392, align 8, !alias.scope !1874, !noalias !1877
  %509 = inttoptr i64 %387 to i64*
  %510 = load i64, i64* %509
  %511 = inttoptr i64 %386 to i32*
  %512 = load i32, i32* %511
  %513 = sext i32 %512 to i64
  store i64 %513, i64* %27, align 8, !tbaa !1240
  %514 = shl nsw i64 %513, 3
  %515 = add i64 %514, %510
  %516 = inttoptr i64 %515 to double*
  store double %508, double* %516
  %517 = inttoptr i64 %386 to i32*
  %518 = load i32, i32* %517
  %519 = add i32 %518, 1
  %520 = zext i32 %519 to i64
  store i64 %520, i64* %25, align 8, !tbaa !1240
  %521 = inttoptr i64 %386 to i32*
  store i32 %519, i32* %521
  %522 = add i64 %507, -60
  br label %block_411684

block_41158b:                                     ; preds = %block_411584, %block_411595
  %523 = phi i64 [ %537, %block_411584 ], [ %455, %block_411595 ]
  %524 = phi %struct.Memory* [ %397, %block_411584 ], [ %524, %block_411595 ]
  %525 = inttoptr i64 %231 to i32*
  %526 = load i32, i32* %525
  %527 = add i32 %526, -5
  %528 = lshr i32 %527, 31
  %529 = lshr i32 %526, 31
  %530 = xor i32 %528, %529
  %531 = add nuw nsw i32 %530, %529
  %532 = icmp eq i32 %531, 2
  %533 = icmp ne i32 %528, 0
  %534 = xor i1 %533, %532
  %535 = select i1 %534, i64 10, i64 185
  %536 = add i64 %523, %535
  br i1 %534, label %block_411595, label %block_411644

block_411584:                                     ; preds = %block_411578
  %537 = add i64 %413, 7
  %538 = inttoptr i64 %231 to i32*
  store i32 0, i32* %538
  br label %block_41158b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_413420_randlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_413420:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %14 = load i64, i64* %7, align 8
  %15 = load i64, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %6, align 8, !tbaa !1240
  store i64 %16, i64* %7, align 8, !tbaa !1240
  %18 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2264) to double*)
  %19 = bitcast %union.VectorReg* %9 to double*
  store double %18, double* %19, align 1, !tbaa !1264
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %21 = bitcast i64* %20 to double*
  store double 0.000000e+00, double* %21, align 1, !tbaa !1264
  %22 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2272) to double*)
  %23 = bitcast %union.VectorReg* %10 to double*
  store double %22, double* %23, align 1, !tbaa !1264
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !1264
  %26 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2280) to double*)
  %27 = bitcast %union.VectorReg* %11 to double*
  store double %26, double* %27, align 1, !tbaa !1264
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %29 = bitcast i64* %28 to double*
  store double 0.000000e+00, double* %29, align 1, !tbaa !1264
  %30 = bitcast %union.VectorReg* %12 to i8*
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2288) to double*)
  %32 = bitcast %union.VectorReg* %12 to double*
  store double %31, double* %32, align 1, !tbaa !1264
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1264
  %35 = add i64 %15, -16
  %36 = load i64, i64* %5, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %15, -24
  %39 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %40 = bitcast [32 x %union.VectorReg]* %8 to double*
  %41 = load double, double* %40, align 1
  %42 = inttoptr i64 %38 to double*
  store double %41, double* %42
  %43 = add i64 %15, -32
  %44 = inttoptr i64 %43 to double*
  store double %31, double* %44
  %45 = add i64 %15, -40
  %46 = inttoptr i64 %45 to double*
  store double %18, double* %46
  %47 = add i64 %15, -48
  %48 = inttoptr i64 %47 to double*
  store double %26, double* %48
  %49 = add i64 %15, -56
  %50 = inttoptr i64 %49 to double*
  store double %22, double* %50
  %51 = bitcast %union.VectorReg* %12 to <2 x i32>*
  %52 = bitcast double %31 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i32 0
  %54 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %53, i32* %54, align 1, !tbaa !1292
  %55 = extractelement <2 x i32> %52, i32 1
  %56 = getelementptr inbounds i8, i8* %39, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 1, !tbaa !1292
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = load double, double* %40, align 1
  %60 = inttoptr i64 %38 to double*
  %61 = load double, double* %60
  %62 = fmul double %59, %61
  %63 = add i64 %15, -64
  %64 = inttoptr i64 %63 to double*
  store double %62, double* %64
  %65 = inttoptr i64 %63 to double*
  %66 = load double, double* %65
  %67 = tail call double @llvm.trunc.f64(double %66) #11
  %68 = tail call double @llvm.fabs.f64(double %67) #11
  %69 = fcmp ogt double %68, 0x41DFFFFFFFC00000
  %70 = fptosi double %67 to i32
  %71 = sitofp i32 %70 to double
  %72 = select i1 %69, double 0xC1E0000000000000, double %71
  %73 = load i64, i64* %7, align 8
  %74 = add i64 %73, -88
  %75 = inttoptr i64 %74 to double*
  store double %72, double* %75
  %76 = add i64 %73, -16
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  %79 = bitcast i64* %58 to double*
  %80 = bitcast %union.VectorReg* %13 to i8*
  %81 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %82 = load <2 x i32>, <2 x i32>* %81, align 1
  %83 = bitcast i64* %28 to <2 x i32>*
  %84 = extractelement <2 x i32> %82, i32 0
  %85 = bitcast %union.VectorReg* %13 to i32*
  store i32 %84, i32* %85, align 1, !tbaa !1292
  %86 = extractelement <2 x i32> %82, i32 1
  %87 = getelementptr inbounds i8, i8* %80, i64 4
  %88 = bitcast i8* %87 to i32*
  store i32 %86, i32* %88, align 1, !tbaa !1292
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast %union.VectorReg* %13 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %74 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  %95 = fsub double %78, %94
  %96 = add i64 %73, -96
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %73, -8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = load <2 x i32>, <2 x i32>* %51, align 1
  %102 = extractelement <2 x i32> %101, i32 0
  store i32 %102, i32* %54, align 1, !tbaa !1292
  %103 = extractelement <2 x i32> %101, i32 1
  store i32 %103, i32* %57, align 1, !tbaa !1292
  %104 = load double, double* %40, align 1
  %105 = inttoptr i64 %100 to double*
  %106 = load double, double* %105
  %107 = fmul double %104, %106
  %108 = add i64 %73, -56
  %109 = inttoptr i64 %108 to double*
  store double %107, double* %109
  %110 = inttoptr i64 %108 to double*
  %111 = load double, double* %110
  %112 = tail call double @llvm.trunc.f64(double %111) #11
  %113 = tail call double @llvm.fabs.f64(double %112) #11
  %114 = fcmp ogt double %113, 0x41DFFFFFFFC00000
  %115 = fptosi double %112 to i32
  %116 = sitofp i32 %115 to double
  %117 = select i1 %114, double 0xC1E0000000000000, double %116
  %118 = add i64 %73, -104
  %119 = inttoptr i64 %118 to double*
  store double %117, double* %119
  %120 = inttoptr i64 %98 to i64*
  %121 = load i64, i64* %120
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store i32 %84, i32* %85, align 1, !tbaa !1292
  store i32 %86, i32* %88, align 1, !tbaa !1292
  %124 = load i64, i64* %7, align 8
  %125 = add i64 %124, -104
  %126 = load double, double* %90, align 1
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127
  %129 = fmul double %126, %128
  %130 = fsub double %123, %129
  %131 = add i64 %124, -112
  %132 = inttoptr i64 %131 to double*
  store double %130, double* %132
  %133 = add i64 %124, -88
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = inttoptr i64 %131 to double*
  %137 = load double, double* %136
  %138 = fmul double %135, %137
  %139 = add i64 %124, -96
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  %142 = inttoptr i64 %125 to double*
  %143 = load double, double* %142
  %144 = fmul double %141, %143
  store double %144, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %89, align 1, !tbaa !1264
  %145 = fadd double %138, %144
  %146 = add i64 %124, -56
  %147 = inttoptr i64 %146 to double*
  store double %145, double* %147
  %148 = load double, double* %32, align 1
  %149 = inttoptr i64 %146 to double*
  %150 = load double, double* %149
  %151 = fmul double %148, %150
  %152 = tail call double @llvm.trunc.f64(double %151) #11
  %153 = tail call double @llvm.fabs.f64(double %152) #11
  %154 = fcmp ogt double %153, 0x41DFFFFFFFC00000
  %155 = fptosi double %152 to i32
  %156 = sitofp i32 %155 to double
  %157 = select i1 %154, double 0xC1E0000000000000, double %156
  %158 = add i64 %124, -64
  %159 = inttoptr i64 %158 to double*
  store double %157, double* %159
  %160 = inttoptr i64 %146 to double*
  %161 = load double, double* %160
  %162 = load <2 x i32>, <2 x i32>* %81, align 1
  %163 = load <2 x i32>, <2 x i32>* %83, align 1
  %164 = extractelement <2 x i32> %162, i32 0
  %165 = bitcast %union.VectorReg* %12 to i32*
  store i32 %164, i32* %165, align 1, !tbaa !1292
  %166 = extractelement <2 x i32> %162, i32 1
  %167 = getelementptr inbounds i8, i8* %30, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 1, !tbaa !1292
  %169 = extractelement <2 x i32> %163, i32 0
  %170 = bitcast i64* %33 to i32*
  store i32 %169, i32* %170, align 1, !tbaa !1292
  %171 = extractelement <2 x i32> %163, i32 1
  %172 = getelementptr inbounds i8, i8* %30, i64 12
  %173 = bitcast i8* %172 to i32*
  store i32 %171, i32* %173, align 1, !tbaa !1292
  %174 = load i64, i64* %7, align 8
  %175 = add i64 %174, -64
  %176 = load double, double* %32, align 1
  %177 = inttoptr i64 %175 to double*
  %178 = load double, double* %177
  %179 = fmul double %176, %178
  store double %179, double* %32, align 1, !tbaa !1264
  %180 = fsub double %161, %179
  %181 = add i64 %174, -120
  %182 = inttoptr i64 %181 to double*
  store double %180, double* %182
  %183 = bitcast <2 x i32> %162 to double
  %184 = inttoptr i64 %181 to double*
  %185 = load double, double* %184
  %186 = fmul double %183, %185
  %187 = add i64 %174, -96
  %188 = inttoptr i64 %187 to double*
  %189 = load double, double* %188
  %190 = add i64 %174, -112
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = fmul double %189, %192
  %194 = fadd double %193, %186
  store double %194, double* %27, align 1, !tbaa !1264
  %195 = bitcast i64* %28 to <2 x i32>*
  store <2 x i32> %163, <2 x i32>* %195, align 1, !tbaa !1264
  %196 = add i64 %174, -72
  %197 = inttoptr i64 %196 to double*
  store double %194, double* %197
  %198 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %199 = load <2 x i32>, <2 x i32>* %198, align 1
  %200 = load i64, i64* %20, align 1
  %201 = extractelement <2 x i32> %199, i32 0
  store i32 %201, i32* %54, align 1, !tbaa !1292
  %202 = extractelement <2 x i32> %199, i32 1
  store i32 %202, i32* %57, align 1, !tbaa !1292
  %203 = load double, double* %40, align 1
  %204 = inttoptr i64 %196 to double*
  %205 = load double, double* %204
  %206 = fmul double %203, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = zext i32 %210 to i64
  %212 = select i1 %209, i64 2147483648, i64 %211
  store i64 %212, i64* %4, align 8, !tbaa !1240
  %213 = trunc i64 %212 to i32
  %214 = sitofp i32 %213 to double
  %215 = add i64 %174, -80
  %216 = inttoptr i64 %215 to double*
  store double %214, double* %216
  %217 = inttoptr i64 %196 to double*
  %218 = load double, double* %217
  %219 = load double, double* %23, align 1
  %220 = inttoptr i64 %215 to double*
  %221 = load double, double* %220
  %222 = fmul double %219, %221
  store double %222, double* %23, align 1, !tbaa !1264
  %223 = fsub double %218, %222
  %224 = load i64, i64* %7, align 8
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = inttoptr i64 %227 to double*
  store double %223, double* %228
  %229 = inttoptr i64 %225 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %5, align 8, !tbaa !1240
  %231 = bitcast <2 x i32> %199 to double
  %232 = inttoptr i64 %230 to double*
  %233 = load double, double* %232
  %234 = fmul double %231, %233
  store double %234, double* %19, align 1, !tbaa !1264
  store i64 %200, i64* %20, align 1, !tbaa !1264
  %235 = add i64 %224, -128
  %236 = inttoptr i64 %235 to double*
  store double %234, double* %236
  %237 = inttoptr i64 %235 to double*
  %238 = load double, double* %237
  store double %238, double* %40, align 1, !tbaa !1264
  store double 0.000000e+00, double* %79, align 1, !tbaa !1264
  %239 = load i64, i64* %6, align 8, !tbaa !1240
  %240 = add i64 %239, 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %7, align 8, !tbaa !1240
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !tbaa !1240
  %245 = add i64 %239, 16
  store i64 %245, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400630(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400630:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_61c000__got_plt_type* @seg_61c000__got_plt to i64), i64 8) to i64*)
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8
  store i64 %7, i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_61c000__got_plt_type* @seg_61c000__got_plt to i64), i64 16) to i64*)
  store i64 %9, i64* %3, align 8, !tbaa !1240
  %10 = icmp eq i64 %9, 4195900
  br i1 %10, label %block_40063c, label %56

block_40063c:                                     ; preds = %block_400630
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %18 = load i64, i64* %15, align 8, !alias.scope !1879, !noalias !1882
  %19 = load i64, i64* %14, align 8, !alias.scope !1879, !noalias !1882
  %20 = load i64, i64* %13, align 8, !alias.scope !1879, !noalias !1882
  %21 = load i64, i64* %12, align 8, !alias.scope !1879, !noalias !1882
  %22 = load i64, i64* %16, align 8, !alias.scope !1879, !noalias !1882
  %23 = load i64, i64* %17, align 8, !alias.scope !1879, !noalias !1882
  %24 = inttoptr i64 %6 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %6, 8
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %6, 16
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %6, 24
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %6, 32
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %6, 40
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %6, 48
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %6, 56
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %6, 64
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %6, 72
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = inttoptr i64 %7 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %3, align 8, !alias.scope !1879, !noalias !1882
  store i64 %6, i64* %5, align 8, !alias.scope !1879, !noalias !1882
  %55 = tail call i64 @__isoc99_fscanf(i64 %18, i64 %19, i64 %20, i64 %21, i64 %22, i64 %23, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49, i64 %52), !noalias !1879
  store i64 %55, i64* %11, align 8, !alias.scope !1879, !noalias !1882
  ret %struct.Memory* %2

; <label>:56:                                     ; preds = %block_400630
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %9, %struct.Memory* %2)
  ret %struct.Memory* %57
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_418130_setcoeff(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_418130:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 13
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 14
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 15
  %23 = load i64, i64* %6, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !1240
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  store i64 %23, i64* %26
  store i64 %25, i64* %5, align 8, !tbaa !1240
  store i64 %25, i64* %6, align 8, !tbaa !1240
  %27 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  %28 = bitcast [32 x %union.VectorReg]* %7 to double*
  store double %27, double* %28, align 1, !tbaa !1264
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2688) to double*)
  %32 = bitcast %union.VectorReg* %8 to double*
  store double %31, double* %32, align 1, !tbaa !1264
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1264
  %35 = bitcast %union.VectorReg* %9 to i8*
  %36 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %37 = bitcast %union.VectorReg* %9 to double*
  store double %36, double* %37, align 1, !tbaa !1264
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %39 = bitcast i64* %38 to double*
  store double 0.000000e+00, double* %39, align 1, !tbaa !1264
  %40 = load i32, i32* bitcast (%nx0_type* @nx0 to i32*)
  %41 = add i32 %40, -1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %48 = bitcast %union.VectorReg* %10 to i8*
  %49 = sitofp i32 %41 to double
  %50 = bitcast %union.VectorReg* %10 to double*
  %51 = bitcast %union.VectorReg* %11 to i8*
  %52 = bitcast [32 x %union.VectorReg]* %7 to <2 x i32>*
  %53 = bitcast double %27 to <2 x i32>
  %54 = bitcast i64* %29 to <2 x i32>*
  %55 = extractelement <2 x i32> %53, i32 0
  %56 = bitcast %union.VectorReg* %11 to i32*
  store i32 %55, i32* %56, align 1, !tbaa !1292
  %57 = extractelement <2 x i32> %53, i32 1
  %58 = getelementptr inbounds i8, i8* %51, i64 4
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !1292
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %61 = bitcast i64* %60 to i32*
  %62 = getelementptr inbounds i8, i8* %51, i64 12
  %63 = bitcast i8* %62 to i32*
  %64 = bitcast %union.VectorReg* %11 to double*
  %65 = load double, double* %64, align 1
  %66 = fdiv double %65, %49
  store double %66, double* bitcast (%dxi_type* @dxi to double*)
  %67 = load i32, i32* bitcast (%ny0_type* @ny0 to i32*)
  %68 = add i32 %67, -1
  %69 = sitofp i32 %68 to double
  %70 = load <2 x i32>, <2 x i32>* %52, align 1
  %71 = extractelement <2 x i32> %70, i32 0
  store i32 %71, i32* %56, align 1, !tbaa !1292
  %72 = extractelement <2 x i32> %70, i32 1
  store i32 %72, i32* %59, align 1, !tbaa !1292
  %73 = load double, double* %64, align 1
  %74 = fdiv double %73, %69
  store double %74, double* bitcast (%deta_type* @deta to double*)
  %75 = load i32, i32* bitcast (%nz0_type* @nz0 to i32*)
  %76 = add i32 %75, -1
  %77 = zext i32 %76 to i64
  store i64 %77, i64* %4, align 8, !tbaa !1240
  %78 = icmp eq i32 %75, 0
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %42, align 1, !tbaa !1245
  %80 = and i32 %76, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80) #11
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %43, align 1, !tbaa !1259
  %85 = xor i32 %76, %75
  %86 = lshr i32 %85, 4
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %44, align 1, !tbaa !1263
  %89 = icmp eq i32 %76, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %45, align 1, !tbaa !1260
  %91 = lshr i32 %76, 31
  %92 = trunc i32 %91 to i8
  store i8 %92, i8* %46, align 1, !tbaa !1261
  %93 = lshr i32 %75, 31
  %94 = xor i32 %91, %93
  %95 = add nuw nsw i32 %94, %93
  %96 = icmp eq i32 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %47, align 1, !tbaa !1262
  %98 = sitofp i32 %76 to double
  store i32 %71, i32* %56, align 1, !tbaa !1292
  store i32 %72, i32* %59, align 1, !tbaa !1292
  %99 = load double, double* %64, align 1
  %100 = fdiv double %99, %98
  store double %100, double* bitcast (%dzeta_type* @dzeta to double*)
  %101 = load double, double* bitcast (%dxi_type* @dxi to double*)
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %103 = bitcast i64* %102 to double*
  %104 = fmul double %101, %101
  store i32 %71, i32* %56, align 1, !tbaa !1292
  store i32 %72, i32* %59, align 1, !tbaa !1292
  %105 = load double, double* %64, align 1
  %106 = fdiv double %105, %104
  store double %106, double* bitcast (%tx1_type* @tx1 to double*)
  %107 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %108 = load <2 x i32>, <2 x i32>* %107, align 1
  %109 = extractelement <2 x i32> %108, i32 0
  %110 = bitcast %union.VectorReg* %10 to i32*
  store i32 %109, i32* %110, align 1, !tbaa !1292
  %111 = extractelement <2 x i32> %108, i32 1
  %112 = getelementptr inbounds i8, i8* %48, i64 4
  %113 = bitcast i8* %112 to i32*
  store i32 %111, i32* %113, align 1, !tbaa !1292
  %114 = bitcast i64* %102 to i32*
  %115 = getelementptr inbounds i8, i8* %48, i64 12
  %116 = bitcast i8* %115 to i32*
  %117 = load double, double* %50, align 1
  %118 = load double, double* bitcast (%dxi_type* @dxi to double*)
  %119 = fmul double %117, %118
  %120 = load <2 x i32>, <2 x i32>* %52, align 1
  %121 = extractelement <2 x i32> %120, i32 0
  store i32 %121, i32* %56, align 1, !tbaa !1292
  %122 = extractelement <2 x i32> %120, i32 1
  store i32 %122, i32* %59, align 1, !tbaa !1292
  %123 = load double, double* %64, align 1
  %124 = fdiv double %123, %119
  store double %124, double* bitcast (%tx2_type* @tx2 to double*)
  store i32 %121, i32* %110, align 1, !tbaa !1292
  store i32 %122, i32* %113, align 1, !tbaa !1292
  %125 = load double, double* %50, align 1
  %126 = load double, double* bitcast (%dxi_type* @dxi to double*)
  %127 = fdiv double %125, %126
  store double %127, double* bitcast (%tx3_type* @tx3 to double*)
  %128 = load double, double* bitcast (%deta_type* @deta to double*)
  %129 = fmul double %128, %128
  store i32 %121, i32* %56, align 1, !tbaa !1292
  store i32 %122, i32* %59, align 1, !tbaa !1292
  %130 = load double, double* %64, align 1
  %131 = fdiv double %130, %129
  store double %131, double* bitcast (%ty1_type* @ty1 to double*)
  store i32 %109, i32* %110, align 1, !tbaa !1292
  store i32 %111, i32* %113, align 1, !tbaa !1292
  %132 = load double, double* %50, align 1
  %133 = load double, double* bitcast (%deta_type* @deta to double*)
  %134 = fmul double %132, %133
  store i32 %121, i32* %56, align 1, !tbaa !1292
  store i32 %122, i32* %59, align 1, !tbaa !1292
  %135 = load double, double* %64, align 1
  %136 = fdiv double %135, %134
  store double %136, double* bitcast (%ty2_type* @ty2 to double*)
  store i32 %121, i32* %110, align 1, !tbaa !1292
  store i32 %122, i32* %113, align 1, !tbaa !1292
  %137 = load double, double* %50, align 1
  %138 = load double, double* bitcast (%deta_type* @deta to double*)
  %139 = fdiv double %137, %138
  store double %139, double* bitcast (%ty3_type* @ty3 to double*)
  %140 = load double, double* bitcast (%dzeta_type* @dzeta to double*)
  %141 = fmul double %140, %140
  %142 = load <2 x i32>, <2 x i32>* %52, align 1
  %143 = load <2 x i32>, <2 x i32>* %54, align 1
  %144 = extractelement <2 x i32> %142, i32 0
  store i32 %144, i32* %56, align 1, !tbaa !1292
  %145 = extractelement <2 x i32> %142, i32 1
  store i32 %145, i32* %59, align 1, !tbaa !1292
  %146 = extractelement <2 x i32> %143, i32 0
  store i32 %146, i32* %61, align 1, !tbaa !1292
  %147 = extractelement <2 x i32> %143, i32 1
  store i32 %147, i32* %63, align 1, !tbaa !1292
  %148 = load double, double* %64, align 1
  %149 = fdiv double %148, %141
  store double %149, double* %64, align 1, !tbaa !1264
  store double %149, double* bitcast (%tz1_type* @tz1 to double*)
  %150 = load double, double* %37, align 1
  %151 = load double, double* bitcast (%dzeta_type* @dzeta to double*)
  %152 = fmul double %150, %151
  store i32 %144, i32* %110, align 1, !tbaa !1292
  store i32 %145, i32* %113, align 1, !tbaa !1292
  store i32 %146, i32* %114, align 1, !tbaa !1292
  store i32 %147, i32* %116, align 1, !tbaa !1292
  %153 = load double, double* %50, align 1
  %154 = fdiv double %153, %152
  store double %154, double* %50, align 1, !tbaa !1264
  store double %154, double* bitcast (%tz2_type* @tz2 to double*)
  %155 = bitcast %union.VectorReg* %9 to i32*
  store i32 %144, i32* %155, align 1, !tbaa !1292
  %156 = getelementptr inbounds i8, i8* %35, i64 4
  %157 = bitcast i8* %156 to i32*
  store i32 %145, i32* %157, align 1, !tbaa !1292
  %158 = load double, double* %37, align 1
  %159 = load double, double* bitcast (%dzeta_type* @dzeta to double*)
  %160 = fdiv double %158, %159
  store double %160, double* bitcast (%tz3_type* @tz3 to double*)
  %161 = load double, double* %32, align 1
  store double %161, double* bitcast (%dx1_type* @dx1 to double*)
  %162 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %162, double* bitcast (%dx2_type* @dx2 to double*)
  %163 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %163, double* bitcast (%dx3_type* @dx3 to double*)
  %164 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %164, double* bitcast (%dx4_type* @dx4 to double*)
  %165 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %165, double* %37, align 1, !tbaa !1264
  store double 0.000000e+00, double* %39, align 1, !tbaa !1264
  store double %165, double* bitcast (%dx5_type* @dx5 to double*)
  store double %161, double* bitcast (%dy1_type* @dy1 to double*)
  %166 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  store double %166, double* bitcast (%dy2_type* @dy2 to double*)
  %167 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  store double %167, double* bitcast (%dy3_type* @dy3 to double*)
  %168 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  store double %168, double* bitcast (%dy4_type* @dy4 to double*)
  %169 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  store double %169, double* %32, align 1, !tbaa !1264
  store double 0.000000e+00, double* %34, align 1, !tbaa !1264
  store double %169, double* bitcast (%dy5_type* @dy5 to double*)
  %170 = load double, double* %28, align 1
  store double %170, double* bitcast (%dz1_type* @dz1 to double*)
  %171 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  store double %171, double* bitcast (%dz2_type* @dz2 to double*)
  %172 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  store double %172, double* bitcast (%dz3_type* @dz3 to double*)
  %173 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  store double %173, double* bitcast (%dz4_type* @dz4 to double*)
  %174 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  store double %174, double* bitcast (%dz5_type* @dz5 to double*)
  %175 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %175, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %176 = add i64 %1, 625
  store i64 %176, i64* %3, align 8
  %177 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %178 = fcmp uno double %175, %177
  br i1 %178, label %179, label %190

; <label>:179:                                    ; preds = %block_418130
  %180 = fadd double %175, %177
  %181 = bitcast double %180 to i64
  %182 = and i64 %181, 9221120237041090560
  %183 = icmp eq i64 %182, 9218868437227405312
  %184 = and i64 %181, 2251799813685247
  %185 = icmp ne i64 %184, 0
  %186 = and i1 %183, %185
  br i1 %186, label %187, label %196

; <label>:187:                                    ; preds = %179
  %188 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %176, %struct.Memory* %2) #14
  %189 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

; <label>:190:                                    ; preds = %block_418130
  %191 = fcmp ogt double %175, %177
  br i1 %191, label %196, label %192

; <label>:192:                                    ; preds = %190
  %193 = fcmp olt double %175, %177
  br i1 %193, label %196, label %194

; <label>:194:                                    ; preds = %192
  %195 = fcmp oeq double %175, %177
  br i1 %195, label %196, label %200

; <label>:196:                                    ; preds = %194, %192, %190, %179
  %197 = phi i8 [ 0, %190 ], [ 0, %192 ], [ 1, %194 ], [ 1, %179 ]
  %198 = phi i8 [ 0, %190 ], [ 0, %192 ], [ 0, %194 ], [ 1, %179 ]
  %199 = phi i8 [ 0, %190 ], [ 1, %192 ], [ 0, %194 ], [ 1, %179 ]
  store i8 %197, i8* %45, align 1, !tbaa !1244
  store i8 %198, i8* %43, align 1, !tbaa !1244
  store i8 %199, i8* %42, align 1, !tbaa !1244
  br label %200

; <label>:200:                                    ; preds = %196, %194
  store i8 0, i8* %47, align 1, !tbaa !1244
  store i8 0, i8* %46, align 1, !tbaa !1244
  store i8 0, i8* %44, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1: ; preds = %200, %187
  %201 = phi i64 [ %189, %187 ], [ %176, %200 ]
  %202 = phi %struct.Memory* [ %188, %187 ], [ %2, %200 ]
  %203 = load i8, i8* %42, align 1, !tbaa !1245
  %204 = load i8, i8* %45, align 1, !tbaa !1260
  %205 = or i8 %204, %203
  %206 = icmp ne i8 %205, 0
  %207 = select i1 %206, i64 25, i64 6
  %208 = add i64 %201, %207
  br i1 %206, label %block_4183ba, label %block_4183a7

block_4183dc:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %209 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %209, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %210 = add i64 %404, 18
  store i64 %210, i64* %3, align 8
  %211 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %212 = fcmp uno double %209, %211
  br i1 %212, label %213, label %225

; <label>:213:                                    ; preds = %block_4183dc
  %214 = fadd double %209, %211
  %215 = bitcast double %214 to i64
  %216 = and i64 %215, 9221120237041090560
  %217 = icmp eq i64 %216, 9218868437227405312
  %218 = and i64 %215, 2251799813685247
  %219 = icmp ne i64 %218, 0
  %220 = and i1 %217, %219
  br i1 %220, label %221, label %231

; <label>:221:                                    ; preds = %213
  %222 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %210, %struct.Memory* %400) #14
  %223 = load i8, i8* %42, align 1, !tbaa !1245
  %224 = load i8, i8* %45, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2

; <label>:225:                                    ; preds = %block_4183dc
  %226 = fcmp ogt double %209, %211
  br i1 %226, label %231, label %227

; <label>:227:                                    ; preds = %225
  %228 = fcmp olt double %209, %211
  br i1 %228, label %231, label %229

; <label>:229:                                    ; preds = %227
  %230 = fcmp oeq double %209, %211
  br i1 %230, label %231, label %235

; <label>:231:                                    ; preds = %229, %227, %225, %213
  %232 = phi i8 [ 0, %225 ], [ 0, %227 ], [ 1, %229 ], [ 1, %213 ]
  %233 = phi i8 [ 0, %225 ], [ 0, %227 ], [ 0, %229 ], [ 1, %213 ]
  %234 = phi i8 [ 0, %225 ], [ 1, %227 ], [ 0, %229 ], [ 1, %213 ]
  store i8 %232, i8* %45, align 1, !tbaa !1244
  store i8 %233, i8* %43, align 1, !tbaa !1244
  store i8 %234, i8* %42, align 1, !tbaa !1244
  br label %235

; <label>:235:                                    ; preds = %231, %229
  %236 = phi i8 [ %232, %231 ], [ %397, %229 ]
  %237 = phi i8 [ %234, %231 ], [ %398, %229 ]
  store i8 0, i8* %47, align 1, !tbaa !1244
  store i8 0, i8* %46, align 1, !tbaa !1244
  store i8 0, i8* %44, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2: ; preds = %235, %221
  %238 = phi i8 [ %224, %221 ], [ %236, %235 ]
  %239 = phi i8 [ %223, %221 ], [ %237, %235 ]
  %240 = phi %struct.Memory* [ %222, %221 ], [ %400, %235 ]
  %241 = or i8 %238, %239
  %242 = icmp ne i8 %241, 0
  br i1 %242, label %block_418407, label %block_4183f4

block_4183f4:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2
  %243 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %243, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %244 = load i64, i64* %6, align 8
  %245 = add i64 %244, -16
  %246 = inttoptr i64 %245 to double*
  store double %243, double* %246
  br label %block_418415

block_418432:                                     ; preds = %block_418424, %block_418415
  %247 = phi i64 [ %410, %block_418424 ], [ %350, %block_418415 ]
  %248 = phi %struct.Memory* [ %400, %block_418424 ], [ %351, %block_418415 ]
  %249 = add i64 %247, -24
  %250 = inttoptr i64 %249 to double*
  %251 = load double, double* %250
  store double %251, double* %28, align 1, !tbaa !1264
  %252 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2696) to double*)
  store double %252, double* %32, align 1, !tbaa !1264
  store double 0.000000e+00, double* %34, align 1, !tbaa !1264
  %253 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2704) to double*)
  store double %253, double* %37, align 1, !tbaa !1264
  store double 0.000000e+00, double* %39, align 1, !tbaa !1264
  %254 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  store double %254, double* %50, align 1, !tbaa !1264
  store double 0.000000e+00, double* %103, align 1, !tbaa !1264
  %255 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2712) to double*)
  store double %255, double* %64, align 1, !tbaa !1264
  %256 = bitcast i64* %60 to double*
  store double 0.000000e+00, double* %256, align 1, !tbaa !1264
  %257 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2720) to double*)
  %258 = bitcast %union.VectorReg* %12 to double*
  store double %257, double* %258, align 1, !tbaa !1264
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %260 = bitcast i64* %259 to double*
  store double 0.000000e+00, double* %260, align 1, !tbaa !1264
  %261 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2728) to double*)
  %262 = bitcast %union.VectorReg* %13 to double*
  store double %261, double* %262, align 1, !tbaa !1264
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %264 = bitcast i64* %263 to double*
  store double 0.000000e+00, double* %264, align 1, !tbaa !1264
  %265 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  %266 = bitcast %union.VectorReg* %14 to double*
  store double %265, double* %266, align 1, !tbaa !1264
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %268 = bitcast i64* %267 to double*
  store double 0.000000e+00, double* %268, align 1, !tbaa !1264
  %269 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  %270 = bitcast %union.VectorReg* %15 to double*
  store double %269, double* %270, align 1, !tbaa !1264
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %272 = bitcast i64* %271 to double*
  store double 0.000000e+00, double* %272, align 1, !tbaa !1264
  %273 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1360) to double*)
  %274 = bitcast %union.VectorReg* %16 to double*
  store double %273, double* %274, align 1, !tbaa !1264
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %276 = bitcast i64* %275 to double*
  store double 0.000000e+00, double* %276, align 1, !tbaa !1264
  %277 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1216) to double*)
  %278 = bitcast %union.VectorReg* %17 to double*
  store double %277, double* %278, align 1, !tbaa !1264
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %280 = bitcast i64* %279 to double*
  store double 0.000000e+00, double* %280, align 1, !tbaa !1264
  %281 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1208) to double*)
  %282 = bitcast %union.VectorReg* %18 to double*
  store double %281, double* %282, align 1, !tbaa !1264
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %284 = bitcast i64* %283 to double*
  store double 0.000000e+00, double* %284, align 1, !tbaa !1264
  %285 = bitcast %union.VectorReg* %19 to i8*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12, i32 0, i32 0, i32 0, i64 1
  %287 = bitcast %union.VectorReg* %19 to i32*
  store i32 0, i32* %287, align 1, !tbaa !1266
  %288 = getelementptr inbounds i8, i8* %285, i64 4
  %289 = bitcast i8* %288 to i32*
  store i32 0, i32* %289, align 1, !tbaa !1266
  %290 = bitcast i64* %286 to i32*
  store i32 0, i32* %290, align 1, !tbaa !1266
  %291 = getelementptr inbounds i8, i8* %285, i64 12
  %292 = bitcast i8* %291 to i32*
  store i32 0, i32* %292, align 1, !tbaa !1266
  %293 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1304) to double*)
  %294 = bitcast %union.VectorReg* %20 to double*
  store double %293, double* %294, align 1, !tbaa !1264
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 13, i32 0, i32 0, i32 0, i64 1
  %296 = bitcast i64* %295 to double*
  store double 0.000000e+00, double* %296, align 1, !tbaa !1264
  %297 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2736) to double*)
  %298 = bitcast %union.VectorReg* %21 to double*
  store double %297, double* %298, align 1, !tbaa !1264
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 14, i32 0, i32 0, i32 0, i64 1
  %300 = bitcast i64* %299 to double*
  store double 0.000000e+00, double* %300, align 1, !tbaa !1264
  %301 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 2744) to double*)
  %302 = bitcast %union.VectorReg* %22 to double*
  store double %301, double* %302, align 1, !tbaa !1264
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 15, i32 0, i32 0, i32 0, i64 1
  %304 = bitcast i64* %303 to double*
  store double 0.000000e+00, double* %304, align 1, !tbaa !1264
  %305 = load i64, i64* %6, align 8
  %306 = add i64 %305, -32
  %307 = load double, double* %28, align 1
  %308 = inttoptr i64 %306 to double*
  store double %307, double* %308
  %309 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  %310 = add i64 %305, -40
  %311 = inttoptr i64 %310 to double*
  store double %309, double* %311
  %312 = inttoptr i64 %306 to double*
  %313 = load double, double* %312
  %314 = fdiv double %313, %277
  store double %314, double* bitcast (%dssp_type* @dssp to double*)
  store double %269, double* bitcast (%ce_type* @ce to double*)
  %315 = bitcast %union.VectorReg* %19 to double*
  %316 = load double, double* %315, align 1
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 8) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 16) to double*)
  store double %277, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 24) to double*)
  store double %281, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 32) to double*)
  store double %273, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 40) to double*)
  store double %293, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 48) to double*)
  store double %297, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 56) to double*)
  store double %301, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 64) to double*)
  %317 = load double, double* %64, align 1
  store double %317, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 72) to double*)
  store double %293, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 80) to double*)
  %318 = load double, double* %266, align 1
  store double %318, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 88) to double*)
  %319 = load double, double* %37, align 1
  store double %319, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 96) to double*)
  %320 = inttoptr i64 %310 to double*
  %321 = load double, double* %320
  store double %321, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  store double %321, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 104) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 112) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 120) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 128) to double*)
  store double %321, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 136) to double*)
  %322 = load double, double* %270, align 1
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 144) to double*)
  %323 = load double, double* %274, align 1
  store double %323, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 152) to double*)
  store double %301, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 160) to double*)
  store double %317, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 168) to double*)
  %324 = load double, double* %298, align 1
  store double %324, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 176) to double*)
  store double %318, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 184) to double*)
  store double %319, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 192) to double*)
  %325 = load double, double* %294, align 1
  store double %325, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 200) to double*)
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 208) to double*)
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 216) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 224) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 232) to double*)
  store double %316, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 240) to double*)
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 248) to double*)
  store double %323, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 256) to double*)
  %326 = load double, double* %258, align 1
  store double %326, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 264) to double*)
  store double %317, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 272) to double*)
  %327 = load double, double* %262, align 1
  store double %327, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 280) to double*)
  store double %319, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 288) to double*)
  store double %325, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 296) to double*)
  store double %318, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 304) to double*)
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 312) to double*)
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 320) to double*)
  %328 = load double, double* %315, align 1
  store double %328, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 328) to double*)
  store double %328, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 336) to double*)
  store double %328, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 344) to double*)
  store double %322, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 352) to double*)
  store double %323, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 360) to double*)
  %329 = load double, double* %64, align 1
  store double %329, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 368) to double*)
  store double %327, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 376) to double*)
  store double %326, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 384) to double*)
  %330 = load double, double* %32, align 1
  store double %330, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 392) to double*)
  %331 = load double, double* %50, align 1
  store double %331, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 400) to double*)
  %332 = load double, double* %37, align 1
  store double %332, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 408) to double*)
  %333 = load double, double* %282, align 1
  store double %333, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 416) to double*)
  %334 = load double, double* %278, align 1
  store double %334, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 424) to double*)
  %335 = load double, double* %274, align 1
  store double %335, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 432) to double*)
  %336 = load double, double* %270, align 1
  store double %336, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 440) to double*)
  store double %331, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 448) to double*)
  %337 = load double, double* %266, align 1
  store double %337, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 456) to double*)
  store double %332, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 464) to double*)
  store double %327, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 472) to double*)
  store double %326, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 480) to double*)
  store double %329, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 488) to double*)
  store double %331, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 496) to double*)
  store double %332, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 504) to double*)
  store double %330, double* inttoptr (i64 add (i64 ptrtoint (%ce_type* @ce to i64), i64 512) to double*)
  %338 = load i64, i64* %5, align 8, !tbaa !1240
  %339 = add i64 %338, 8
  %340 = inttoptr i64 %338 to i64*
  %341 = load i64, i64* %340
  store i64 %341, i64* %6, align 8, !tbaa !1240
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342
  store i64 %343, i64* %3, align 8, !tbaa !1240
  %344 = add i64 %338, 16
  store i64 %344, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %248

block_4183ba:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %345 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  store double %345, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %346 = load i64, i64* %6, align 8
  %347 = add i64 %346, -8
  %348 = add i64 %208, 14
  %349 = inttoptr i64 %347 to double*
  store double %345, double* %349
  br label %block_4183c8

block_418415:                                     ; preds = %block_418407, %block_4183f4
  %350 = phi i64 [ %406, %block_418407 ], [ %244, %block_4183f4 ]
  %351 = phi %struct.Memory* [ %240, %block_418407 ], [ %240, %block_4183f4 ]
  %352 = add i64 %350, -16
  %353 = inttoptr i64 %352 to double*
  %354 = load double, double* %353
  store double %354, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %355 = add i64 %350, -24
  %356 = inttoptr i64 %355 to double*
  store double %354, double* %356
  br label %block_418432

block_4183a7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %357 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  store double %357, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %358 = load i64, i64* %6, align 8
  %359 = add i64 %358, -8
  %360 = inttoptr i64 %359 to double*
  store double %357, double* %360
  %361 = add i64 %208, 33
  br label %block_4183c8

block_4183c8:                                     ; preds = %block_4183a7, %block_4183ba
  %362 = phi i64 [ %348, %block_4183ba ], [ %361, %block_4183a7 ]
  %363 = phi i64 [ %346, %block_4183ba ], [ %358, %block_4183a7 ]
  %364 = phi %struct.Memory* [ %202, %block_4183ba ], [ %202, %block_4183a7 ]
  %365 = add i64 %363, -8
  %366 = inttoptr i64 %365 to double*
  %367 = load double, double* %366
  store double %367, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %368 = add i64 %362, 14
  store i64 %368, i64* %3, align 8
  %369 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %370 = fcmp uno double %367, %369
  br i1 %370, label %371, label %384

; <label>:371:                                    ; preds = %block_4183c8
  %372 = fadd double %367, %369
  %373 = bitcast double %372 to i64
  %374 = and i64 %373, 9221120237041090560
  %375 = icmp eq i64 %374, 9218868437227405312
  %376 = and i64 %373, 2251799813685247
  %377 = icmp ne i64 %376, 0
  %378 = and i1 %375, %377
  br i1 %378, label %379, label %390

; <label>:379:                                    ; preds = %371
  %380 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %368, %struct.Memory* %364) #14
  %381 = load i64, i64* %3, align 8
  %382 = load i8, i8* %42, align 1, !tbaa !1245
  %383 = load i8, i8* %45, align 1, !tbaa !1260
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:384:                                    ; preds = %block_4183c8
  %385 = fcmp ogt double %367, %369
  br i1 %385, label %390, label %386

; <label>:386:                                    ; preds = %384
  %387 = fcmp olt double %367, %369
  br i1 %387, label %390, label %388

; <label>:388:                                    ; preds = %386
  %389 = fcmp oeq double %367, %369
  br i1 %389, label %390, label %394

; <label>:390:                                    ; preds = %388, %386, %384, %371
  %391 = phi i8 [ 0, %384 ], [ 0, %386 ], [ 1, %388 ], [ 1, %371 ]
  %392 = phi i8 [ 0, %384 ], [ 0, %386 ], [ 0, %388 ], [ 1, %371 ]
  %393 = phi i8 [ 0, %384 ], [ 1, %386 ], [ 0, %388 ], [ 1, %371 ]
  store i8 %391, i8* %45, align 1, !tbaa !1244
  store i8 %392, i8* %43, align 1, !tbaa !1244
  store i8 %393, i8* %42, align 1, !tbaa !1244
  br label %394

; <label>:394:                                    ; preds = %390, %388
  %395 = phi i8 [ %391, %390 ], [ %204, %388 ]
  %396 = phi i8 [ %393, %390 ], [ %203, %388 ]
  store i8 0, i8* %47, align 1, !tbaa !1244
  store i8 0, i8* %46, align 1, !tbaa !1244
  store i8 0, i8* %44, align 1, !tbaa !1244
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %394, %379
  %397 = phi i8 [ %383, %379 ], [ %395, %394 ]
  %398 = phi i8 [ %382, %379 ], [ %396, %394 ]
  %399 = phi i64 [ %381, %379 ], [ %368, %394 ]
  %400 = phi %struct.Memory* [ %380, %379 ], [ %364, %394 ]
  %401 = or i8 %397, %398
  %402 = icmp ne i8 %401, 0
  %403 = select i1 %402, i64 78, i64 6
  %404 = add i64 %399, %403
  br i1 %402, label %block_418424, label %block_4183dc

block_418407:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2
  %405 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  store double %405, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %406 = load i64, i64* %6, align 8
  %407 = add i64 %406, -16
  %408 = inttoptr i64 %407 to double*
  store double %405, double* %408
  br label %block_418415

block_418424:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %409 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  store double %409, double* %28, align 1, !tbaa !1264
  store double 0.000000e+00, double* %30, align 1, !tbaa !1264
  %410 = load i64, i64* %6, align 8
  %411 = add i64 %410, -24
  %412 = inttoptr i64 %411 to double*
  store double %409, double* %412
  br label %block_418432
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40d150_jacu(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40d150:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12
  %32 = load i64, i64* %13, align 8
  %33 = load i64, i64* %12, align 8, !tbaa !1240
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35
  store i64 %34, i64* %13, align 8, !tbaa !1240
  %36 = load i64, i64* %18, align 8
  %37 = add i64 %33, -16
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %7, align 8
  %40 = add i64 %33, -24
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  store i64 %40, i64* %12, align 8, !tbaa !1240
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1248) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %19 to double*
  store double %42, double* %43, align 1, !tbaa !1264
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = bitcast i64* %44 to double*
  store double 0.000000e+00, double* %45, align 1, !tbaa !1264
  %46 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1312) to double*)
  %47 = bitcast %union.VectorReg* %20 to double*
  store double %46, double* %47, align 1, !tbaa !1264
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast i64* %48 to double*
  store double 0.000000e+00, double* %49, align 1, !tbaa !1264
  %50 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1280) to double*)
  %51 = bitcast %union.VectorReg* %21 to double*
  store double %50, double* %51, align 1, !tbaa !1264
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %53 = bitcast i64* %52 to double*
  store double 0.000000e+00, double* %53, align 1, !tbaa !1264
  %54 = add i64 %33, -28
  %55 = load i32, i32* %5, align 4
  %56 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %56
  %57 = add i64 %33, -48
  %58 = inttoptr i64 %57 to double*
  store double %50, double* %58
  %59 = add i64 %33, -56
  %60 = inttoptr i64 %59 to double*
  store double %46, double* %60
  %61 = add i64 %33, -64
  %62 = inttoptr i64 %61 to double*
  store double %42, double* %62
  %63 = load i32, i32* bitcast (%jst_type* @jst to i32*)
  %64 = zext i32 %63 to i64
  store i64 %64, i64* %11, align 8, !tbaa !1240
  %65 = add i64 %33, -36
  %66 = inttoptr i64 %65 to i32*
  store i32 %63, i32* %66
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %70 = add i64 %33, -32
  %71 = bitcast %union.VectorReg* %22 to double*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %73 = bitcast i64* %72 to double*
  %74 = bitcast %union.VectorReg* %23 to i8*
  %75 = bitcast %union.VectorReg* %23 to double*
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %77 = bitcast i64* %76 to double*
  %78 = bitcast %union.VectorReg* %24 to i8*
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %80 = bitcast %union.VectorReg* %24 to i32*
  %81 = getelementptr inbounds i8, i8* %78, i64 4
  %82 = bitcast i8* %81 to i32*
  %83 = bitcast i64* %79 to i32*
  %84 = getelementptr inbounds i8, i8* %78, i64 12
  %85 = bitcast i8* %84 to i32*
  %86 = bitcast %union.VectorReg* %25 to double*
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %88 = bitcast i64* %87 to double*
  %89 = bitcast %union.VectorReg* %26 to i8*
  %90 = bitcast %union.VectorReg* %26 to double*
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %92 = bitcast i64* %91 to double*
  %93 = bitcast %union.VectorReg* %27 to i8*
  %94 = bitcast %union.VectorReg* %27 to double*
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %96 = add i64 %33, -72
  %97 = add i64 %33, -80
  %98 = add i64 %33, -88
  %99 = bitcast %union.VectorReg* %25 to <2 x i32>*
  %100 = bitcast %union.VectorReg* %27 to i32*
  %101 = getelementptr inbounds i8, i8* %93, i64 4
  %102 = bitcast i8* %101 to i32*
  %103 = bitcast i64* %95 to i32*
  %104 = getelementptr inbounds i8, i8* %93, i64 12
  %105 = bitcast i8* %104 to i32*
  %106 = bitcast %union.VectorReg* %28 to i8*
  %107 = bitcast %union.VectorReg* %28 to double*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %109 = bitcast %union.VectorReg* %29 to double*
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %111 = bitcast %union.VectorReg* %26 to <2 x i32>*
  %112 = bitcast %union.VectorReg* %28 to i32*
  %113 = getelementptr inbounds i8, i8* %106, i64 4
  %114 = bitcast i8* %113 to i32*
  %115 = bitcast i64* %108 to i32*
  %116 = getelementptr inbounds i8, i8* %106, i64 12
  %117 = bitcast i8* %116 to i32*
  %118 = load i64, i64* %13, align 8
  %119 = add i64 %118, -28
  %120 = add i64 %118, -24
  %121 = bitcast %union.VectorReg* %24 to double*
  %122 = add i64 %118, -40
  %123 = add i64 %118, -56
  %124 = add i64 %118, -72
  %125 = add i64 %118, -20
  %126 = add i64 %118, -64
  %127 = bitcast %union.VectorReg* %30 to double*
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %129 = add i64 %118, -48
  %130 = bitcast %union.VectorReg* %31 to double*
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12, i32 0, i32 0, i32 0, i64 1
  %132 = add i64 %118, -80
  %133 = bitcast %union.VectorReg* %20 to <2 x i32>*
  %134 = bitcast i64* %48 to <2 x i32>*
  %135 = bitcast %union.VectorReg* %23 to <2 x i32>*
  %136 = bitcast %union.VectorReg* %21 to <2 x i32>*
  %137 = bitcast i64* %52 to <2 x i32>*
  %138 = bitcast %union.VectorReg* %22 to <2 x i32>*
  %139 = bitcast %union.VectorReg* %26 to i32*
  %140 = getelementptr inbounds i8, i8* %89, i64 4
  %141 = bitcast i8* %140 to i32*
  %142 = bitcast i64* %91 to i32*
  %143 = getelementptr inbounds i8, i8* %89, i64 12
  %144 = bitcast i8* %143 to i32*
  %145 = bitcast [32 x %union.VectorReg]* %19 to <2 x i32>*
  %146 = bitcast i64* %44 to <2 x i32>*
  %147 = bitcast %union.VectorReg* %23 to i32*
  %148 = getelementptr inbounds i8, i8* %74, i64 4
  %149 = bitcast i8* %148 to i32*
  %150 = bitcast i64* %76 to i32*
  %151 = getelementptr inbounds i8, i8* %74, i64 12
  %152 = bitcast i8* %151 to i32*
  br label %block_40d18b

block_41146f:                                     ; preds = %block_40d1a5
  %153 = inttoptr i64 %119 to i32*
  %154 = load i32, i32* %153
  %155 = add i32 %154, 1
  %156 = inttoptr i64 %119 to i32*
  store i32 %155, i32* %156
  br label %block_40d18b

block_40d1b5:                                     ; preds = %block_40d1a5
  %157 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1296) to double*)
  store double %157, double* %43, align 1, !tbaa !1264
  store double 0.000000e+00, double* %45, align 1, !tbaa !1264
  store i64 ptrtoint (%u_type* @u to i64), i64* %8, align 8, !tbaa !1240
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1288) to double*)
  store double %158, double* %47, align 1, !tbaa !1264
  store double 0.000000e+00, double* %49, align 1, !tbaa !1264
  store i64 ptrtoint (%qs_type* @qs to i64), i64* %9, align 8, !tbaa !1240
  %159 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1320) to double*)
  store double %159, double* %51, align 1, !tbaa !1264
  store double 0.000000e+00, double* %53, align 1, !tbaa !1264
  store i64 -9223372036854775808, i64* %10, align 8, !tbaa !1240
  %160 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1328) to double*)
  store double %160, double* %71, align 1, !tbaa !1264
  store double 0.000000e+00, double* %73, align 1, !tbaa !1264
  %161 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1336) to double*)
  store double %161, double* %75, align 1, !tbaa !1264
  store double 0.000000e+00, double* %77, align 1, !tbaa !1264
  store i32 0, i32* %80, align 1, !tbaa !1266
  store i32 0, i32* %82, align 1, !tbaa !1266
  store i32 0, i32* %83, align 1, !tbaa !1266
  store i32 0, i32* %85, align 1, !tbaa !1266
  store i64 ptrtoint (%rho_i_type* @rho_i to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%b_type* @b to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%a_type* @a to i64), i64* %15, align 8, !tbaa !1240
  store i64 ptrtoint (%d_type* @d to i64), i64* %16, align 8, !tbaa !1240
  %162 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 1240) to double*)
  store double %162, double* %86, align 1, !tbaa !1264
  store double 0.000000e+00, double* %88, align 1, !tbaa !1264
  %163 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_41a5a0__rodata_type* @seg_41a5a0__rodata to i64), i64 8) to double*)
  store double %163, double* %90, align 1, !tbaa !1264
  store double 0.000000e+00, double* %92, align 1, !tbaa !1264
  %164 = inttoptr i64 %54 to i32*
  %165 = load i32, i32* %164
  %166 = sext i32 %165 to i64
  %167 = mul nsw i64 %166, 1352
  %168 = add i64 %167, ptrtoint (%rho_i_type* @rho_i to i64)
  %169 = inttoptr i64 %65 to i32*
  %170 = load i32, i32* %169
  %171 = sext i32 %170 to i64
  %172 = mul nsw i64 %171, 104
  %173 = add i64 %172, %168
  %174 = sext i32 %3988 to i64
  %175 = shl nsw i64 %174, 3
  %176 = add i64 %175, %173
  %177 = inttoptr i64 %176 to double*
  %178 = load double, double* %177
  %179 = inttoptr i64 %96 to double*
  store double %178, double* %179
  %180 = inttoptr i64 %96 to double*
  %181 = load double, double* %180
  %182 = fmul double %181, %181
  %183 = inttoptr i64 %97 to double*
  store double %182, double* %183
  %184 = inttoptr i64 %96 to double*
  %185 = load double, double* %184
  %186 = inttoptr i64 %97 to double*
  %187 = load double, double* %186
  %188 = fmul double %185, %187
  %189 = inttoptr i64 %98 to double*
  store double %188, double* %189
  %190 = bitcast double %162 to <2 x i32>
  %191 = extractelement <2 x i32> %190, i32 0
  store i32 %191, i32* %100, align 1, !tbaa !1292
  %192 = extractelement <2 x i32> %190, i32 1
  store i32 %192, i32* %102, align 1, !tbaa !1292
  %193 = load double, double* %94, align 1
  %194 = load double, double* bitcast (%dt_type* @dt to double*)
  %195 = fmul double %193, %194
  %196 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %197 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  %198 = fmul double %196, %197
  %199 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %200 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %201 = fmul double %199, %200
  %202 = fadd double %201, %198
  %203 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %204 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %205 = fmul double %203, %204
  store double %205, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %206 = fadd double %205, %202
  %207 = fmul double %206, %195
  %208 = bitcast double %163 to <2 x i32>
  %209 = extractelement <2 x i32> %208, i32 0
  store i32 %209, i32* %112, align 1, !tbaa !1292
  %210 = extractelement <2 x i32> %208, i32 1
  store i32 %210, i32* %114, align 1, !tbaa !1292
  %211 = load double, double* %107, align 1
  %212 = fadd double %211, %207
  %213 = inttoptr i64 %119 to i32*
  %214 = load i32, i32* %213
  %215 = sext i32 %214 to i64
  %216 = mul nsw i64 %215, 2600
  %217 = load i64, i64* %16, align 8
  %218 = add i64 %216, %217
  %219 = inttoptr i64 %120 to i32*
  %220 = load i32, i32* %219
  %221 = sext i32 %220 to i64
  %222 = mul nsw i64 %221, 200
  %223 = add i64 %222, %218
  %224 = inttoptr i64 %223 to double*
  store double %212, double* %224
  %225 = inttoptr i64 %119 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  %228 = mul nsw i64 %227, 2600
  %229 = add i64 %228, %217
  %230 = inttoptr i64 %120 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  %233 = mul nsw i64 %232, 200
  %234 = add i64 %233, %229
  %235 = add i64 %234, 40
  %236 = load double, double* %121, align 1
  %237 = inttoptr i64 %235 to double*
  store double %236, double* %237
  %238 = inttoptr i64 %119 to i32*
  %239 = load i32, i32* %238
  %240 = sext i32 %239 to i64
  %241 = mul nsw i64 %240, 2600
  %242 = add i64 %241, %217
  %243 = inttoptr i64 %120 to i32*
  %244 = load i32, i32* %243
  %245 = sext i32 %244 to i64
  %246 = mul nsw i64 %245, 200
  %247 = add i64 %246, %242
  %248 = add i64 %247, 80
  %249 = inttoptr i64 %248 to double*
  store double %236, double* %249
  %250 = inttoptr i64 %119 to i32*
  %251 = load i32, i32* %250
  %252 = sext i32 %251 to i64
  %253 = mul nsw i64 %252, 2600
  %254 = add i64 %253, %217
  %255 = inttoptr i64 %120 to i32*
  %256 = load i32, i32* %255
  %257 = sext i32 %256 to i64
  %258 = mul nsw i64 %257, 200
  %259 = add i64 %258, %254
  %260 = add i64 %259, 120
  %261 = inttoptr i64 %260 to double*
  store double %236, double* %261
  %262 = inttoptr i64 %119 to i32*
  %263 = load i32, i32* %262
  %264 = sext i32 %263 to i64
  %265 = mul nsw i64 %264, 2600
  %266 = add i64 %265, %217
  %267 = inttoptr i64 %120 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  %270 = mul nsw i64 %269, 200
  %271 = add i64 %270, %266
  %272 = add i64 %271, 160
  %273 = inttoptr i64 %272 to double*
  store double %236, double* %273
  %274 = load <2 x i32>, <2 x i32>* %99, align 1
  %275 = extractelement <2 x i32> %274, i32 0
  store i32 %275, i32* %100, align 1, !tbaa !1292
  %276 = extractelement <2 x i32> %274, i32 1
  store i32 %276, i32* %102, align 1, !tbaa !1292
  %277 = load double, double* %94, align 1
  %278 = load double, double* bitcast (%dt_type* @dt to double*)
  %279 = fmul double %277, %278
  %280 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %281 = bitcast double %280 to i64
  %282 = load i64, i64* %10, align 8
  %283 = xor i64 %282, %281
  %284 = bitcast i64 %283 to double
  %285 = inttoptr i64 %122 to double*
  %286 = load double, double* %285
  %287 = fmul double %284, %286
  %288 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %289 = fsub double %287, %288
  %290 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %291 = fsub double %289, %290
  %292 = fmul double %291, %279
  %293 = inttoptr i64 %123 to double*
  %294 = load double, double* %293
  %295 = inttoptr i64 %124 to double*
  %296 = load double, double* %295
  %297 = fmul double %294, %296
  %298 = inttoptr i64 %125 to i32*
  %299 = load i32, i32* %298
  %300 = sext i32 %299 to i64
  %301 = mul nsw i64 %300, 6760
  %302 = load i64, i64* %8, align 8
  %303 = add i64 %301, %302
  %304 = inttoptr i64 %119 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 520
  %308 = add i64 %307, %303
  %309 = inttoptr i64 %120 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  %312 = mul nsw i64 %311, 40
  %313 = add i64 %312, %308
  %314 = add i64 %313, 8
  %315 = inttoptr i64 %314 to double*
  %316 = load double, double* %315
  %317 = fmul double %297, %316
  %318 = fmul double %292, %317
  %319 = mul nsw i64 %306, 2600
  %320 = load i64, i64* %16, align 8
  %321 = add i64 %319, %320
  %322 = mul nsw i64 %311, 200
  %323 = add i64 %322, %321
  %324 = add i64 %323, 8
  %325 = inttoptr i64 %324 to double*
  store double %318, double* %325
  store i32 %275, i32* %100, align 1, !tbaa !1292
  store i32 %276, i32* %102, align 1, !tbaa !1292
  %326 = load double, double* %94, align 1
  %327 = load double, double* bitcast (%dt_type* @dt to double*)
  %328 = fmul double %326, %327
  %329 = inttoptr i64 %123 to double*
  %330 = load double, double* %329
  %331 = fmul double %328, %330
  %332 = inttoptr i64 %126 to double*
  %333 = load double, double* %332
  %334 = fmul double %331, %333
  %335 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %336 = inttoptr i64 %122 to double*
  %337 = load double, double* %336
  %338 = fmul double %335, %337
  %339 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %340 = fadd double %338, %339
  %341 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %342 = fadd double %340, %341
  %343 = fmul double %342, %334
  %344 = load <2 x i32>, <2 x i32>* %111, align 1
  %345 = extractelement <2 x i32> %344, i32 0
  store i32 %345, i32* %112, align 1, !tbaa !1292
  %346 = extractelement <2 x i32> %344, i32 1
  store i32 %346, i32* %114, align 1, !tbaa !1292
  %347 = load double, double* %107, align 1
  %348 = fadd double %347, %343
  %349 = load <2 x i32>, <2 x i32>* %99, align 1
  %350 = extractelement <2 x i32> %349, i32 0
  store i32 %350, i32* %100, align 1, !tbaa !1292
  %351 = extractelement <2 x i32> %349, i32 1
  store i32 %351, i32* %102, align 1, !tbaa !1292
  %352 = load double, double* %94, align 1
  %353 = fmul double %327, %352
  %354 = load double, double* bitcast (%dx2_type* @dx2 to double*)
  %355 = fmul double %335, %354
  %356 = load double, double* bitcast (%dy2_type* @dy2 to double*)
  %357 = fmul double %339, %356
  %358 = fadd double %357, %355
  %359 = load double, double* bitcast (%dz2_type* @dz2 to double*)
  %360 = fmul double %341, %359
  store double %360, double* %127, align 1, !tbaa !1264
  store i64 0, i64* %128, align 1, !tbaa !1264
  %361 = fadd double %360, %358
  %362 = fmul double %361, %353
  %363 = fadd double %362, %348
  %364 = inttoptr i64 %119 to i32*
  %365 = load i32, i32* %364
  %366 = sext i32 %365 to i64
  %367 = mul nsw i64 %366, 2600
  %368 = load i64, i64* %16, align 8
  %369 = add i64 %367, %368
  %370 = inttoptr i64 %120 to i32*
  %371 = load i32, i32* %370
  %372 = sext i32 %371 to i64
  %373 = mul nsw i64 %372, 200
  %374 = add i64 %373, %369
  %375 = add i64 %374, 48
  %376 = inttoptr i64 %375 to double*
  store double %363, double* %376
  %377 = inttoptr i64 %119 to i32*
  %378 = load i32, i32* %377
  %379 = sext i32 %378 to i64
  %380 = mul nsw i64 %379, 2600
  %381 = add i64 %380, %368
  %382 = inttoptr i64 %120 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = mul nsw i64 %384, 200
  %386 = add i64 %385, %381
  %387 = add i64 %386, 88
  %388 = load double, double* %121, align 1
  %389 = inttoptr i64 %387 to double*
  store double %388, double* %389
  %390 = inttoptr i64 %119 to i32*
  %391 = load i32, i32* %390
  %392 = sext i32 %391 to i64
  %393 = mul nsw i64 %392, 2600
  %394 = add i64 %393, %368
  %395 = inttoptr i64 %120 to i32*
  %396 = load i32, i32* %395
  %397 = sext i32 %396 to i64
  %398 = mul nsw i64 %397, 200
  %399 = add i64 %398, %394
  %400 = add i64 %399, 128
  %401 = inttoptr i64 %400 to double*
  store double %388, double* %401
  %402 = inttoptr i64 %119 to i32*
  %403 = load i32, i32* %402
  %404 = sext i32 %403 to i64
  %405 = mul nsw i64 %404, 2600
  %406 = add i64 %405, %368
  %407 = inttoptr i64 %120 to i32*
  %408 = load i32, i32* %407
  %409 = sext i32 %408 to i64
  %410 = mul nsw i64 %409, 200
  %411 = add i64 %410, %406
  %412 = add i64 %411, 168
  %413 = inttoptr i64 %412 to double*
  store double %388, double* %413
  %414 = load <2 x i32>, <2 x i32>* %99, align 1
  %415 = extractelement <2 x i32> %414, i32 0
  store i32 %415, i32* %100, align 1, !tbaa !1292
  %416 = extractelement <2 x i32> %414, i32 1
  store i32 %416, i32* %102, align 1, !tbaa !1292
  %417 = load double, double* %94, align 1
  %418 = load double, double* bitcast (%dt_type* @dt to double*)
  %419 = fmul double %417, %418
  %420 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %421 = bitcast double %420 to i64
  %422 = load i64, i64* %10, align 8
  %423 = xor i64 %422, %421
  %424 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %425 = inttoptr i64 %122 to double*
  %426 = load double, double* %425
  %427 = fmul double %424, %426
  %428 = bitcast i64 %423 to double
  %429 = fsub double %428, %427
  %430 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %431 = fsub double %429, %430
  %432 = fmul double %431, %419
  %433 = inttoptr i64 %123 to double*
  %434 = load double, double* %433
  %435 = inttoptr i64 %124 to double*
  %436 = load double, double* %435
  %437 = fmul double %434, %436
  %438 = inttoptr i64 %125 to i32*
  %439 = load i32, i32* %438
  %440 = sext i32 %439 to i64
  %441 = mul nsw i64 %440, 6760
  %442 = load i64, i64* %8, align 8
  %443 = add i64 %441, %442
  %444 = inttoptr i64 %119 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 520
  %448 = add i64 %447, %443
  %449 = inttoptr i64 %120 to i32*
  %450 = load i32, i32* %449
  %451 = sext i32 %450 to i64
  %452 = mul nsw i64 %451, 40
  %453 = add i64 %452, %448
  %454 = add i64 %453, 16
  %455 = inttoptr i64 %454 to double*
  %456 = load double, double* %455
  %457 = fmul double %437, %456
  %458 = fmul double %432, %457
  %459 = mul nsw i64 %446, 2600
  %460 = load i64, i64* %16, align 8
  %461 = add i64 %459, %460
  %462 = mul nsw i64 %451, 200
  %463 = add i64 %462, %461
  %464 = add i64 %463, 16
  %465 = inttoptr i64 %464 to double*
  store double %458, double* %465
  %466 = inttoptr i64 %119 to i32*
  %467 = load i32, i32* %466
  %468 = sext i32 %467 to i64
  %469 = mul nsw i64 %468, 2600
  %470 = add i64 %469, %460
  %471 = inttoptr i64 %120 to i32*
  %472 = load i32, i32* %471
  %473 = sext i32 %472 to i64
  %474 = mul nsw i64 %473, 200
  %475 = add i64 %474, %470
  %476 = add i64 %475, 56
  %477 = load double, double* %121, align 1
  %478 = inttoptr i64 %476 to double*
  store double %477, double* %478
  %479 = load <2 x i32>, <2 x i32>* %99, align 1
  %480 = extractelement <2 x i32> %479, i32 0
  store i32 %480, i32* %100, align 1, !tbaa !1292
  %481 = extractelement <2 x i32> %479, i32 1
  store i32 %481, i32* %102, align 1, !tbaa !1292
  %482 = load double, double* %94, align 1
  %483 = load double, double* bitcast (%dt_type* @dt to double*)
  %484 = fmul double %482, %483
  %485 = inttoptr i64 %123 to double*
  %486 = load double, double* %485
  %487 = fmul double %484, %486
  %488 = inttoptr i64 %126 to double*
  %489 = load double, double* %488
  %490 = fmul double %487, %489
  %491 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %492 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %493 = inttoptr i64 %122 to double*
  %494 = load double, double* %493
  %495 = fmul double %492, %494
  %496 = fadd double %495, %491
  %497 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %498 = fadd double %496, %497
  %499 = fmul double %498, %490
  %500 = load <2 x i32>, <2 x i32>* %111, align 1
  %501 = extractelement <2 x i32> %500, i32 0
  store i32 %501, i32* %112, align 1, !tbaa !1292
  %502 = extractelement <2 x i32> %500, i32 1
  store i32 %502, i32* %114, align 1, !tbaa !1292
  %503 = load double, double* %107, align 1
  %504 = fadd double %503, %499
  store i32 %480, i32* %100, align 1, !tbaa !1292
  store i32 %481, i32* %102, align 1, !tbaa !1292
  %505 = load double, double* %94, align 1
  %506 = fmul double %483, %505
  %507 = load double, double* bitcast (%dx3_type* @dx3 to double*)
  %508 = fmul double %491, %507
  %509 = load double, double* bitcast (%dy3_type* @dy3 to double*)
  %510 = fmul double %492, %509
  %511 = fadd double %510, %508
  %512 = load double, double* bitcast (%dz3_type* @dz3 to double*)
  %513 = fmul double %497, %512
  store double %513, double* %127, align 1, !tbaa !1264
  store i64 0, i64* %128, align 1, !tbaa !1264
  %514 = fadd double %513, %511
  %515 = fmul double %514, %506
  %516 = fadd double %515, %504
  %517 = inttoptr i64 %119 to i32*
  %518 = load i32, i32* %517
  %519 = sext i32 %518 to i64
  %520 = mul nsw i64 %519, 2600
  %521 = load i64, i64* %16, align 8
  %522 = add i64 %520, %521
  %523 = inttoptr i64 %120 to i32*
  %524 = load i32, i32* %523
  %525 = sext i32 %524 to i64
  %526 = mul nsw i64 %525, 200
  %527 = add i64 %526, %522
  %528 = add i64 %527, 96
  %529 = inttoptr i64 %528 to double*
  store double %516, double* %529
  %530 = inttoptr i64 %119 to i32*
  %531 = load i32, i32* %530
  %532 = sext i32 %531 to i64
  %533 = mul nsw i64 %532, 2600
  %534 = add i64 %533, %521
  %535 = inttoptr i64 %120 to i32*
  %536 = load i32, i32* %535
  %537 = sext i32 %536 to i64
  %538 = mul nsw i64 %537, 200
  %539 = add i64 %538, %534
  %540 = add i64 %539, 136
  %541 = load double, double* %121, align 1
  %542 = inttoptr i64 %540 to double*
  store double %541, double* %542
  %543 = inttoptr i64 %119 to i32*
  %544 = load i32, i32* %543
  %545 = sext i32 %544 to i64
  %546 = mul nsw i64 %545, 2600
  %547 = add i64 %546, %521
  %548 = inttoptr i64 %120 to i32*
  %549 = load i32, i32* %548
  %550 = sext i32 %549 to i64
  %551 = mul nsw i64 %550, 200
  %552 = add i64 %551, %547
  %553 = add i64 %552, 176
  %554 = inttoptr i64 %553 to double*
  store double %541, double* %554
  %555 = load <2 x i32>, <2 x i32>* %99, align 1
  %556 = extractelement <2 x i32> %555, i32 0
  store i32 %556, i32* %100, align 1, !tbaa !1292
  %557 = extractelement <2 x i32> %555, i32 1
  store i32 %557, i32* %102, align 1, !tbaa !1292
  %558 = load double, double* %94, align 1
  %559 = load double, double* bitcast (%dt_type* @dt to double*)
  %560 = fmul double %558, %559
  %561 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %562 = bitcast double %561 to i64
  %563 = load i64, i64* %10, align 8
  %564 = xor i64 %563, %562
  %565 = bitcast i64 %564 to double
  %566 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %567 = fsub double %565, %566
  %568 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %569 = inttoptr i64 %122 to double*
  %570 = load double, double* %569
  %571 = fmul double %568, %570
  %572 = fsub double %567, %571
  %573 = fmul double %572, %560
  %574 = inttoptr i64 %123 to double*
  %575 = load double, double* %574
  %576 = inttoptr i64 %124 to double*
  %577 = load double, double* %576
  %578 = fmul double %575, %577
  %579 = inttoptr i64 %125 to i32*
  %580 = load i32, i32* %579
  %581 = sext i32 %580 to i64
  %582 = mul nsw i64 %581, 6760
  %583 = load i64, i64* %8, align 8
  %584 = add i64 %582, %583
  %585 = inttoptr i64 %119 to i32*
  %586 = load i32, i32* %585
  %587 = sext i32 %586 to i64
  %588 = mul nsw i64 %587, 520
  %589 = add i64 %588, %584
  %590 = inttoptr i64 %120 to i32*
  %591 = load i32, i32* %590
  %592 = sext i32 %591 to i64
  %593 = mul nsw i64 %592, 40
  %594 = add i64 %593, %589
  %595 = add i64 %594, 24
  %596 = inttoptr i64 %595 to double*
  %597 = load double, double* %596
  %598 = fmul double %578, %597
  %599 = fmul double %573, %598
  %600 = mul nsw i64 %587, 2600
  %601 = load i64, i64* %16, align 8
  %602 = add i64 %600, %601
  %603 = mul nsw i64 %592, 200
  %604 = add i64 %603, %602
  %605 = add i64 %604, 24
  %606 = inttoptr i64 %605 to double*
  store double %599, double* %606
  %607 = inttoptr i64 %119 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  %610 = mul nsw i64 %609, 2600
  %611 = add i64 %610, %601
  %612 = inttoptr i64 %120 to i32*
  %613 = load i32, i32* %612
  %614 = sext i32 %613 to i64
  %615 = mul nsw i64 %614, 200
  %616 = add i64 %615, %611
  %617 = add i64 %616, 64
  %618 = load double, double* %121, align 1
  %619 = inttoptr i64 %617 to double*
  store double %618, double* %619
  %620 = inttoptr i64 %119 to i32*
  %621 = load i32, i32* %620
  %622 = sext i32 %621 to i64
  %623 = mul nsw i64 %622, 2600
  %624 = add i64 %623, %601
  %625 = inttoptr i64 %120 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  %628 = mul nsw i64 %627, 200
  %629 = add i64 %628, %624
  %630 = add i64 %629, 104
  %631 = inttoptr i64 %630 to double*
  store double %618, double* %631
  %632 = load <2 x i32>, <2 x i32>* %99, align 1
  %633 = extractelement <2 x i32> %632, i32 0
  store i32 %633, i32* %100, align 1, !tbaa !1292
  %634 = extractelement <2 x i32> %632, i32 1
  store i32 %634, i32* %102, align 1, !tbaa !1292
  %635 = load double, double* %94, align 1
  %636 = load double, double* bitcast (%dt_type* @dt to double*)
  %637 = fmul double %635, %636
  %638 = inttoptr i64 %123 to double*
  %639 = load double, double* %638
  %640 = fmul double %637, %639
  %641 = inttoptr i64 %126 to double*
  %642 = load double, double* %641
  %643 = fmul double %640, %642
  %644 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %645 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %646 = fadd double %644, %645
  %647 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %648 = inttoptr i64 %122 to double*
  %649 = load double, double* %648
  %650 = fmul double %647, %649
  %651 = fadd double %650, %646
  %652 = fmul double %651, %643
  %653 = load <2 x i32>, <2 x i32>* %111, align 1
  %654 = extractelement <2 x i32> %653, i32 0
  store i32 %654, i32* %112, align 1, !tbaa !1292
  %655 = extractelement <2 x i32> %653, i32 1
  store i32 %655, i32* %114, align 1, !tbaa !1292
  %656 = load double, double* %107, align 1
  %657 = fadd double %656, %652
  store i32 %633, i32* %100, align 1, !tbaa !1292
  store i32 %634, i32* %102, align 1, !tbaa !1292
  %658 = load double, double* %94, align 1
  %659 = fmul double %636, %658
  %660 = load double, double* bitcast (%dx4_type* @dx4 to double*)
  %661 = fmul double %644, %660
  %662 = load double, double* bitcast (%dy4_type* @dy4 to double*)
  %663 = fmul double %645, %662
  %664 = fadd double %663, %661
  %665 = load double, double* bitcast (%dz4_type* @dz4 to double*)
  %666 = fmul double %647, %665
  %667 = fadd double %666, %664
  %668 = fmul double %667, %659
  %669 = fadd double %668, %657
  %670 = inttoptr i64 %119 to i32*
  %671 = load i32, i32* %670
  %672 = sext i32 %671 to i64
  %673 = mul nsw i64 %672, 2600
  %674 = load i64, i64* %16, align 8
  %675 = add i64 %673, %674
  %676 = inttoptr i64 %120 to i32*
  %677 = load i32, i32* %676
  %678 = sext i32 %677 to i64
  %679 = mul nsw i64 %678, 200
  %680 = add i64 %679, %675
  %681 = add i64 %680, 144
  %682 = inttoptr i64 %681 to double*
  store double %669, double* %682
  %683 = inttoptr i64 %119 to i32*
  %684 = load i32, i32* %683
  %685 = sext i32 %684 to i64
  %686 = mul nsw i64 %685, 2600
  %687 = add i64 %686, %674
  %688 = inttoptr i64 %120 to i32*
  %689 = load i32, i32* %688
  %690 = sext i32 %689 to i64
  %691 = mul nsw i64 %690, 200
  %692 = add i64 %691, %687
  %693 = add i64 %692, 184
  %694 = load double, double* %121, align 1
  %695 = inttoptr i64 %693 to double*
  store double %694, double* %695
  %696 = load double, double* bitcast (%dt_type* @dt to double*)
  %697 = bitcast double %696 to i64
  %698 = load i64, i64* %10, align 8
  %699 = xor i64 %698, %697
  %700 = bitcast i64 %699 to double
  %701 = load double, double* %86, align 1
  %702 = fmul double %700, %701
  store double %702, double* %94, align 1, !tbaa !1264
  %703 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %704 = inttoptr i64 %122 to double*
  %705 = load double, double* %704
  %706 = inttoptr i64 %123 to double*
  %707 = load double, double* %706
  %708 = fmul double %705, %707
  %709 = inttoptr i64 %129 to double*
  %710 = load double, double* %709
  %711 = fsub double %708, %710
  %712 = fmul double %703, %711
  %713 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %714 = fsub double %707, %710
  %715 = fmul double %714, %713
  %716 = fadd double %715, %712
  %717 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %718 = fmul double %714, %717
  %719 = fadd double %718, %716
  %720 = inttoptr i64 %125 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = mul nsw i64 %722, 6760
  %724 = load i64, i64* %8, align 8
  %725 = add i64 %723, %724
  %726 = inttoptr i64 %119 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  %729 = mul nsw i64 %728, 520
  %730 = add i64 %729, %725
  %731 = inttoptr i64 %120 to i32*
  %732 = load i32, i32* %731
  %733 = sext i32 %732 to i64
  %734 = mul nsw i64 %733, 40
  %735 = add i64 %734, %730
  %736 = add i64 %735, 8
  %737 = inttoptr i64 %736 to double*
  %738 = load double, double* %737
  %739 = fmul double %738, %738
  %740 = fmul double %719, %739
  %741 = fmul double %714, %703
  %742 = fmul double %713, %711
  %743 = fadd double %741, %742
  %744 = fadd double %718, %743
  %745 = add i64 %735, 16
  %746 = inttoptr i64 %745 to double*
  %747 = load double, double* %746
  %748 = fmul double %747, %747
  %749 = fmul double %744, %748
  %750 = fadd double %740, %749
  %751 = fadd double %715, %741
  store double %711, double* %130, align 1, !tbaa !1264
  store i64 0, i64* %131, align 1, !tbaa !1264
  %752 = fmul double %717, %711
  %753 = fadd double %751, %752
  %754 = load i64, i64* %8, align 8
  %755 = add i64 %723, %754
  %756 = add i64 %729, %755
  %757 = add i64 %734, %756
  %758 = add i64 %757, 24
  %759 = inttoptr i64 %758 to double*
  %760 = load double, double* %759
  %761 = fmul double %760, %760
  %762 = fmul double %753, %761
  %763 = fadd double %750, %762
  %764 = inttoptr i64 %132 to double*
  %765 = load double, double* %764
  %766 = fmul double %763, %765
  %767 = fadd double %703, %713
  %768 = fadd double %767, %717
  %769 = fmul double %768, %710
  %770 = inttoptr i64 %124 to double*
  %771 = load double, double* %770
  %772 = fmul double %769, %771
  %773 = add i64 %757, 32
  %774 = inttoptr i64 %773 to double*
  %775 = load double, double* %774
  %776 = fmul double %772, %775
  %777 = fadd double %766, %776
  %778 = load double, double* %94, align 1
  %779 = fmul double %778, %777
  %780 = mul nsw i64 %728, 2600
  %781 = load i64, i64* %16, align 8
  %782 = add i64 %780, %781
  %783 = mul nsw i64 %733, 200
  %784 = add i64 %783, %782
  %785 = add i64 %784, 32
  %786 = inttoptr i64 %785 to double*
  store double %779, double* %786
  %787 = load <2 x i32>, <2 x i32>* %99, align 1
  %788 = extractelement <2 x i32> %787, i32 0
  store i32 %788, i32* %100, align 1, !tbaa !1292
  %789 = extractelement <2 x i32> %787, i32 1
  store i32 %789, i32* %102, align 1, !tbaa !1292
  %790 = load double, double* %94, align 1
  %791 = load double, double* bitcast (%dt_type* @dt to double*)
  %792 = fmul double %790, %791
  %793 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %794 = inttoptr i64 %122 to double*
  %795 = load double, double* %794
  %796 = inttoptr i64 %123 to double*
  %797 = load double, double* %796
  %798 = fmul double %795, %797
  %799 = inttoptr i64 %129 to double*
  %800 = load double, double* %799
  %801 = fsub double %798, %800
  %802 = fmul double %793, %801
  %803 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %804 = fsub double %797, %800
  %805 = fmul double %804, %803
  %806 = fadd double %805, %802
  %807 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %808 = fmul double %804, %807
  %809 = fadd double %808, %806
  %810 = fmul double %809, %792
  %811 = inttoptr i64 %124 to double*
  %812 = load double, double* %811
  %813 = fmul double %810, %812
  %814 = inttoptr i64 %125 to i32*
  %815 = load i32, i32* %814
  %816 = sext i32 %815 to i64
  %817 = mul nsw i64 %816, 6760
  %818 = load i64, i64* %8, align 8
  %819 = add i64 %817, %818
  %820 = inttoptr i64 %119 to i32*
  %821 = load i32, i32* %820
  %822 = sext i32 %821 to i64
  %823 = mul nsw i64 %822, 520
  %824 = add i64 %823, %819
  %825 = inttoptr i64 %120 to i32*
  %826 = load i32, i32* %825
  %827 = sext i32 %826 to i64
  %828 = mul nsw i64 %827, 40
  %829 = add i64 %828, %824
  %830 = add i64 %829, 8
  %831 = inttoptr i64 %830 to double*
  %832 = load double, double* %831
  %833 = fmul double %813, %832
  %834 = mul nsw i64 %822, 2600
  %835 = load i64, i64* %16, align 8
  %836 = add i64 %834, %835
  %837 = mul nsw i64 %827, 200
  %838 = add i64 %837, %836
  %839 = add i64 %838, 72
  %840 = inttoptr i64 %839 to double*
  store double %833, double* %840
  %841 = load <2 x i32>, <2 x i32>* %99, align 1
  %842 = extractelement <2 x i32> %841, i32 0
  store i32 %842, i32* %100, align 1, !tbaa !1292
  %843 = extractelement <2 x i32> %841, i32 1
  store i32 %843, i32* %102, align 1, !tbaa !1292
  %844 = load double, double* %94, align 1
  %845 = load double, double* bitcast (%dt_type* @dt to double*)
  %846 = fmul double %844, %845
  %847 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %848 = inttoptr i64 %123 to double*
  %849 = load double, double* %848
  %850 = inttoptr i64 %129 to double*
  %851 = load double, double* %850
  %852 = fsub double %849, %851
  %853 = fmul double %852, %847
  %854 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %855 = inttoptr i64 %122 to double*
  %856 = load double, double* %855
  %857 = fmul double %856, %849
  %858 = fsub double %857, %851
  %859 = fmul double %854, %858
  %860 = fadd double %853, %859
  %861 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %862 = fmul double %852, %861
  %863 = fadd double %862, %860
  %864 = fmul double %863, %846
  %865 = inttoptr i64 %124 to double*
  %866 = load double, double* %865
  %867 = fmul double %864, %866
  %868 = inttoptr i64 %125 to i32*
  %869 = load i32, i32* %868
  %870 = sext i32 %869 to i64
  %871 = mul nsw i64 %870, 6760
  %872 = load i64, i64* %8, align 8
  %873 = add i64 %871, %872
  %874 = inttoptr i64 %119 to i32*
  %875 = load i32, i32* %874
  %876 = sext i32 %875 to i64
  %877 = mul nsw i64 %876, 520
  %878 = add i64 %877, %873
  %879 = inttoptr i64 %120 to i32*
  %880 = load i32, i32* %879
  %881 = sext i32 %880 to i64
  %882 = mul nsw i64 %881, 40
  %883 = add i64 %882, %878
  %884 = add i64 %883, 16
  %885 = inttoptr i64 %884 to double*
  %886 = load double, double* %885
  %887 = fmul double %867, %886
  %888 = mul nsw i64 %876, 2600
  %889 = load i64, i64* %16, align 8
  %890 = add i64 %888, %889
  %891 = mul nsw i64 %881, 200
  %892 = add i64 %891, %890
  %893 = add i64 %892, 112
  %894 = inttoptr i64 %893 to double*
  store double %887, double* %894
  %895 = load <2 x i32>, <2 x i32>* %99, align 1
  %896 = extractelement <2 x i32> %895, i32 0
  store i32 %896, i32* %100, align 1, !tbaa !1292
  %897 = extractelement <2 x i32> %895, i32 1
  store i32 %897, i32* %102, align 1, !tbaa !1292
  %898 = load double, double* %94, align 1
  %899 = load double, double* bitcast (%dt_type* @dt to double*)
  %900 = fmul double %898, %899
  %901 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %902 = inttoptr i64 %123 to double*
  %903 = load double, double* %902
  %904 = inttoptr i64 %129 to double*
  %905 = load double, double* %904
  %906 = fsub double %903, %905
  %907 = fmul double %906, %901
  %908 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %909 = fmul double %906, %908
  %910 = fadd double %909, %907
  %911 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %912 = inttoptr i64 %122 to double*
  %913 = load double, double* %912
  %914 = fmul double %913, %903
  %915 = fsub double %914, %905
  store double %915, double* %127, align 1, !tbaa !1264
  store i64 0, i64* %128, align 1, !tbaa !1264
  %916 = fmul double %911, %915
  store double %916, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %917 = fadd double %910, %916
  %918 = fmul double %900, %917
  %919 = inttoptr i64 %124 to double*
  %920 = load double, double* %919
  %921 = fmul double %918, %920
  %922 = inttoptr i64 %125 to i32*
  %923 = load i32, i32* %922
  %924 = sext i32 %923 to i64
  %925 = mul nsw i64 %924, 6760
  %926 = load i64, i64* %8, align 8
  %927 = add i64 %925, %926
  %928 = inttoptr i64 %119 to i32*
  %929 = load i32, i32* %928
  %930 = sext i32 %929 to i64
  %931 = mul nsw i64 %930, 520
  %932 = add i64 %931, %927
  %933 = inttoptr i64 %120 to i32*
  %934 = load i32, i32* %933
  %935 = sext i32 %934 to i64
  %936 = mul nsw i64 %935, 40
  %937 = add i64 %936, %932
  %938 = add i64 %937, 24
  %939 = inttoptr i64 %938 to double*
  %940 = load double, double* %939
  %941 = fmul double %921, %940
  %942 = mul nsw i64 %930, 2600
  %943 = load i64, i64* %16, align 8
  %944 = add i64 %942, %943
  %945 = mul nsw i64 %935, 200
  %946 = add i64 %945, %944
  %947 = add i64 %946, 152
  %948 = inttoptr i64 %947 to double*
  store double %941, double* %948
  %949 = load <2 x i32>, <2 x i32>* %99, align 1
  %950 = extractelement <2 x i32> %949, i32 0
  store i32 %950, i32* %100, align 1, !tbaa !1292
  %951 = extractelement <2 x i32> %949, i32 1
  store i32 %951, i32* %102, align 1, !tbaa !1292
  %952 = load double, double* %94, align 1
  %953 = load double, double* bitcast (%dt_type* @dt to double*)
  %954 = fmul double %952, %953
  %955 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %956 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %957 = fadd double %955, %956
  %958 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %959 = fadd double %957, %958
  %960 = fmul double %959, %954
  %961 = inttoptr i64 %129 to double*
  %962 = load double, double* %961
  %963 = fmul double %960, %962
  %964 = inttoptr i64 %126 to double*
  %965 = load double, double* %964
  %966 = fmul double %963, %965
  %967 = load double, double* %90, align 1
  %968 = fadd double %967, %966
  %969 = bitcast <2 x i32> %949 to double
  %970 = fmul double %953, %969
  %971 = load double, double* bitcast (%dx5_type* @dx5 to double*)
  %972 = fmul double %955, %971
  %973 = load double, double* bitcast (%dy5_type* @dy5 to double*)
  %974 = fmul double %956, %973
  %975 = fadd double %974, %972
  %976 = load double, double* bitcast (%dz5_type* @dz5 to double*)
  %977 = fmul double %958, %976
  store double %977, double* %107, align 1, !tbaa !1264
  store i64 0, i64* %108, align 1, !tbaa !1264
  %978 = fadd double %977, %975
  store double %978, double* %94, align 1, !tbaa !1264
  store i64 0, i64* %95, align 1, !tbaa !1264
  %979 = fmul double %978, %970
  %980 = fadd double %979, %968
  store double %980, double* %90, align 1, !tbaa !1264
  %981 = inttoptr i64 %119 to i32*
  %982 = load i32, i32* %981
  %983 = sext i32 %982 to i64
  %984 = mul nsw i64 %983, 2600
  %985 = add i64 %984, %943
  %986 = inttoptr i64 %120 to i32*
  %987 = load i32, i32* %986
  %988 = sext i32 %987 to i64
  %989 = mul nsw i64 %988, 200
  %990 = add i64 %989, %985
  %991 = add i64 %990, 192
  %992 = inttoptr i64 %991 to double*
  store double %980, double* %992
  %993 = inttoptr i64 %125 to i32*
  %994 = load i32, i32* %993
  %995 = sext i32 %994 to i64
  %996 = mul nsw i64 %995, 1352
  %997 = load i64, i64* %11, align 8
  %998 = add i64 %996, %997
  %999 = inttoptr i64 %119 to i32*
  %1000 = load i32, i32* %999
  %1001 = sext i32 %1000 to i64
  %1002 = mul nsw i64 %1001, 104
  %1003 = add i64 %1002, %998
  %1004 = inttoptr i64 %120 to i32*
  %1005 = load i32, i32* %1004
  %1006 = add i32 %1005, 1
  %1007 = sext i32 %1006 to i64
  %1008 = shl nsw i64 %1007, 3
  %1009 = add i64 %1003, %1008
  %1010 = inttoptr i64 %1009 to double*
  %1011 = load double, double* %1010
  %1012 = inttoptr i64 %126 to double*
  store double %1011, double* %1012
  %1013 = inttoptr i64 %126 to double*
  %1014 = load double, double* %1013
  %1015 = fmul double %1014, %1014
  %1016 = inttoptr i64 %124 to double*
  store double %1015, double* %1016
  %1017 = inttoptr i64 %126 to double*
  %1018 = load double, double* %1017
  %1019 = inttoptr i64 %124 to double*
  %1020 = load double, double* %1019
  %1021 = fmul double %1018, %1020
  %1022 = inttoptr i64 %132 to double*
  store double %1021, double* %1022
  %1023 = load double, double* bitcast (%dt_type* @dt to double*)
  %1024 = bitcast double %1023 to i64
  %1025 = load i64, i64* %10, align 8
  %1026 = xor i64 %1025, %1024
  %1027 = bitcast i64 %1026 to double
  %1028 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1029 = fmul double %1027, %1028
  %1030 = load double, double* bitcast (%dx1_type* @dx1 to double*)
  %1031 = fmul double %1029, %1030
  %1032 = inttoptr i64 %119 to i32*
  %1033 = load i32, i32* %1032
  %1034 = sext i32 %1033 to i64
  %1035 = mul nsw i64 %1034, 2600
  %1036 = load i64, i64* %15, align 8
  %1037 = add i64 %1035, %1036
  %1038 = inttoptr i64 %120 to i32*
  %1039 = load i32, i32* %1038
  %1040 = sext i32 %1039 to i64
  %1041 = mul nsw i64 %1040, 200
  %1042 = add i64 %1041, %1037
  %1043 = inttoptr i64 %1042 to double*
  store double %1031, double* %1043
  %1044 = load double, double* bitcast (%dt_type* @dt to double*)
  %1045 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1046 = fmul double %1044, %1045
  %1047 = inttoptr i64 %119 to i32*
  %1048 = load i32, i32* %1047
  %1049 = sext i32 %1048 to i64
  %1050 = mul nsw i64 %1049, 2600
  %1051 = add i64 %1050, %1036
  %1052 = inttoptr i64 %120 to i32*
  %1053 = load i32, i32* %1052
  %1054 = sext i32 %1053 to i64
  %1055 = mul nsw i64 %1054, 200
  %1056 = add i64 %1055, %1051
  %1057 = add i64 %1056, 40
  %1058 = inttoptr i64 %1057 to double*
  store double %1046, double* %1058
  %1059 = inttoptr i64 %119 to i32*
  %1060 = load i32, i32* %1059
  %1061 = sext i32 %1060 to i64
  %1062 = mul nsw i64 %1061, 2600
  %1063 = add i64 %1062, %1036
  %1064 = inttoptr i64 %120 to i32*
  %1065 = load i32, i32* %1064
  %1066 = sext i32 %1065 to i64
  %1067 = mul nsw i64 %1066, 200
  %1068 = add i64 %1067, %1063
  %1069 = add i64 %1068, 80
  %1070 = load double, double* %121, align 1
  %1071 = inttoptr i64 %1069 to double*
  store double %1070, double* %1071
  %1072 = inttoptr i64 %119 to i32*
  %1073 = load i32, i32* %1072
  %1074 = sext i32 %1073 to i64
  %1075 = mul nsw i64 %1074, 2600
  %1076 = add i64 %1075, %1036
  %1077 = inttoptr i64 %120 to i32*
  %1078 = load i32, i32* %1077
  %1079 = sext i32 %1078 to i64
  %1080 = mul nsw i64 %1079, 200
  %1081 = add i64 %1080, %1076
  %1082 = add i64 %1081, 120
  %1083 = inttoptr i64 %1082 to double*
  store double %1070, double* %1083
  %1084 = inttoptr i64 %119 to i32*
  %1085 = load i32, i32* %1084
  %1086 = sext i32 %1085 to i64
  %1087 = mul nsw i64 %1086, 2600
  %1088 = add i64 %1087, %1036
  %1089 = inttoptr i64 %120 to i32*
  %1090 = load i32, i32* %1089
  %1091 = sext i32 %1090 to i64
  %1092 = mul nsw i64 %1091, 200
  %1093 = add i64 %1092, %1088
  %1094 = add i64 %1093, 160
  %1095 = inttoptr i64 %1094 to double*
  store double %1070, double* %1095
  %1096 = load double, double* bitcast (%dt_type* @dt to double*)
  %1097 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1098 = fmul double %1096, %1097
  %1099 = inttoptr i64 %125 to i32*
  %1100 = load i32, i32* %1099
  %1101 = sext i32 %1100 to i64
  %1102 = mul nsw i64 %1101, 6760
  %1103 = load i64, i64* %8, align 8
  %1104 = add i64 %1102, %1103
  %1105 = inttoptr i64 %119 to i32*
  %1106 = load i32, i32* %1105
  %1107 = sext i32 %1106 to i64
  %1108 = mul nsw i64 %1107, 520
  %1109 = add i64 %1108, %1104
  %1110 = inttoptr i64 %120 to i32*
  %1111 = load i32, i32* %1110
  %1112 = add i32 %1111, 1
  %1113 = sext i32 %1112 to i64
  %1114 = mul nsw i64 %1113, 40
  %1115 = add i64 %1114, %1109
  %1116 = add i64 %1115, 8
  %1117 = inttoptr i64 %1116 to double*
  %1118 = load double, double* %1117
  %1119 = inttoptr i64 %126 to double*
  %1120 = load double, double* %1119
  %1121 = fmul double %1118, %1120
  %1122 = bitcast double %1121 to i64
  %1123 = load i64, i64* %10, align 8
  %1124 = xor i64 %1123, %1122
  %1125 = bitcast i64 %1124 to double
  %1126 = fmul double %1121, %1125
  %1127 = mul nsw i64 %1101, 1352
  %1128 = load i64, i64* %9, align 8
  %1129 = add i64 %1127, %1128
  %1130 = mul nsw i64 %1107, 104
  %1131 = add i64 %1130, %1129
  %1132 = load <2 x i32>, <2 x i32>* %133, align 1
  %1133 = extractelement <2 x i32> %1132, i32 0
  store i32 %1133, i32* %100, align 1, !tbaa !1292
  %1134 = extractelement <2 x i32> %1132, i32 1
  store i32 %1134, i32* %102, align 1, !tbaa !1292
  %1135 = shl nsw i64 %1113, 3
  %1136 = add i64 %1135, %1131
  %1137 = load double, double* %94, align 1
  %1138 = inttoptr i64 %1136 to double*
  %1139 = load double, double* %1138
  %1140 = fmul double %1137, %1139
  %1141 = fmul double %1140, %1120
  %1142 = fadd double %1126, %1141
  %1143 = fmul double %1098, %1142
  %1144 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1145 = fmul double %1096, %1144
  %1146 = inttoptr i64 %122 to double*
  %1147 = load double, double* %1146
  %1148 = bitcast double %1147 to i64
  %1149 = xor i64 %1123, %1148
  %1150 = bitcast i64 %1149 to double
  %1151 = inttoptr i64 %123 to double*
  %1152 = load double, double* %1151
  %1153 = fmul double %1150, %1152
  %1154 = inttoptr i64 %124 to double*
  %1155 = load double, double* %1154
  %1156 = fmul double %1153, %1155
  %1157 = load i64, i64* %8, align 8
  %1158 = add i64 %1102, %1157
  %1159 = add i64 %1108, %1158
  %1160 = add i64 %1114, %1159
  %1161 = add i64 %1160, 8
  %1162 = inttoptr i64 %1161 to double*
  %1163 = load double, double* %1162
  %1164 = fmul double %1156, %1163
  %1165 = fmul double %1145, %1164
  %1166 = fsub double %1143, %1165
  %1167 = mul nsw i64 %1107, 2600
  %1168 = load i64, i64* %15, align 8
  %1169 = add i64 %1167, %1168
  %1170 = sext i32 %1111 to i64
  %1171 = mul nsw i64 %1170, 200
  %1172 = add i64 %1171, %1169
  %1173 = add i64 %1172, 8
  %1174 = inttoptr i64 %1173 to double*
  store double %1166, double* %1174
  %1175 = load double, double* bitcast (%dt_type* @dt to double*)
  %1176 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1177 = fmul double %1175, %1176
  %1178 = inttoptr i64 %125 to i32*
  %1179 = load i32, i32* %1178
  %1180 = sext i32 %1179 to i64
  %1181 = mul nsw i64 %1180, 6760
  %1182 = add i64 %1181, %1157
  %1183 = inttoptr i64 %119 to i32*
  %1184 = load i32, i32* %1183
  %1185 = sext i32 %1184 to i64
  %1186 = mul nsw i64 %1185, 520
  %1187 = add i64 %1186, %1182
  %1188 = inttoptr i64 %120 to i32*
  %1189 = load i32, i32* %1188
  %1190 = add i32 %1189, 1
  %1191 = sext i32 %1190 to i64
  %1192 = mul nsw i64 %1191, 40
  %1193 = add i64 %1192, %1187
  %1194 = add i64 %1193, 8
  %1195 = inttoptr i64 %1194 to double*
  %1196 = load double, double* %1195
  %1197 = inttoptr i64 %126 to double*
  %1198 = load double, double* %1197
  %1199 = fmul double %1196, %1198
  %1200 = load <2 x i32>, <2 x i32>* %135, align 1
  %1201 = extractelement <2 x i32> %1200, i32 0
  store i32 %1201, i32* %100, align 1, !tbaa !1292
  %1202 = extractelement <2 x i32> %1200, i32 1
  store i32 %1202, i32* %102, align 1, !tbaa !1292
  %1203 = load double, double* %94, align 1
  %1204 = fmul double %1203, %1199
  %1205 = fmul double %1177, %1204
  %1206 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1207 = fmul double %1175, %1206
  %1208 = inttoptr i64 %122 to double*
  %1209 = load double, double* %1208
  %1210 = inttoptr i64 %123 to double*
  %1211 = load double, double* %1210
  %1212 = fmul double %1209, %1211
  %1213 = fmul double %1212, %1198
  %1214 = fmul double %1207, %1213
  %1215 = fsub double %1205, %1214
  %1216 = load double, double* bitcast (%dx2_type* @dx2 to double*)
  %1217 = fmul double %1207, %1216
  %1218 = fsub double %1215, %1217
  %1219 = mul nsw i64 %1185, 2600
  %1220 = load i64, i64* %15, align 8
  %1221 = add i64 %1219, %1220
  %1222 = sext i32 %1189 to i64
  %1223 = mul nsw i64 %1222, 200
  %1224 = add i64 %1223, %1221
  %1225 = add i64 %1224, 48
  %1226 = inttoptr i64 %1225 to double*
  store double %1218, double* %1226
  %1227 = load double, double* bitcast (%dt_type* @dt to double*)
  %1228 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1229 = fmul double %1227, %1228
  %1230 = inttoptr i64 %125 to i32*
  %1231 = load i32, i32* %1230
  %1232 = sext i32 %1231 to i64
  %1233 = mul nsw i64 %1232, 6760
  %1234 = load i64, i64* %8, align 8
  %1235 = add i64 %1233, %1234
  %1236 = inttoptr i64 %119 to i32*
  %1237 = load i32, i32* %1236
  %1238 = sext i32 %1237 to i64
  %1239 = mul nsw i64 %1238, 520
  %1240 = add i64 %1239, %1235
  %1241 = inttoptr i64 %120 to i32*
  %1242 = load i32, i32* %1241
  %1243 = add i32 %1242, 1
  %1244 = sext i32 %1243 to i64
  %1245 = mul nsw i64 %1244, 40
  %1246 = add i64 %1245, %1240
  %1247 = add i64 %1246, 16
  %1248 = inttoptr i64 %1247 to double*
  %1249 = load double, double* %1248
  %1250 = inttoptr i64 %126 to double*
  %1251 = load double, double* %1250
  %1252 = fmul double %1249, %1251
  %1253 = load <2 x i32>, <2 x i32>* %136, align 1
  %1254 = extractelement <2 x i32> %1253, i32 0
  store i32 %1254, i32* %100, align 1, !tbaa !1292
  %1255 = extractelement <2 x i32> %1253, i32 1
  store i32 %1255, i32* %102, align 1, !tbaa !1292
  %1256 = load double, double* %94, align 1
  %1257 = fmul double %1256, %1252
  %1258 = fmul double %1229, %1257
  %1259 = mul nsw i64 %1238, 2600
  %1260 = add i64 %1259, %1220
  %1261 = sext i32 %1242 to i64
  %1262 = mul nsw i64 %1261, 200
  %1263 = add i64 %1262, %1260
  %1264 = add i64 %1263, 88
  %1265 = inttoptr i64 %1264 to double*
  store double %1258, double* %1265
  %1266 = load double, double* bitcast (%dt_type* @dt to double*)
  %1267 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1268 = fmul double %1266, %1267
  %1269 = inttoptr i64 %125 to i32*
  %1270 = load i32, i32* %1269
  %1271 = sext i32 %1270 to i64
  %1272 = mul nsw i64 %1271, 6760
  %1273 = add i64 %1272, %1234
  %1274 = inttoptr i64 %119 to i32*
  %1275 = load i32, i32* %1274
  %1276 = sext i32 %1275 to i64
  %1277 = mul nsw i64 %1276, 520
  %1278 = add i64 %1277, %1273
  %1279 = inttoptr i64 %120 to i32*
  %1280 = load i32, i32* %1279
  %1281 = add i32 %1280, 1
  %1282 = sext i32 %1281 to i64
  %1283 = mul nsw i64 %1282, 40
  %1284 = add i64 %1283, %1278
  %1285 = add i64 %1284, 24
  %1286 = inttoptr i64 %1285 to double*
  %1287 = load double, double* %1286
  %1288 = inttoptr i64 %126 to double*
  %1289 = load double, double* %1288
  %1290 = fmul double %1287, %1289
  store i32 %1254, i32* %100, align 1, !tbaa !1292
  store i32 %1255, i32* %102, align 1, !tbaa !1292
  %1291 = load double, double* %94, align 1
  %1292 = fmul double %1291, %1290
  %1293 = fmul double %1268, %1292
  %1294 = mul nsw i64 %1276, 2600
  %1295 = load i64, i64* %15, align 8
  %1296 = add i64 %1294, %1295
  %1297 = sext i32 %1280 to i64
  %1298 = mul nsw i64 %1297, 200
  %1299 = add i64 %1298, %1296
  %1300 = add i64 %1299, 128
  %1301 = inttoptr i64 %1300 to double*
  store double %1293, double* %1301
  %1302 = load double, double* bitcast (%dt_type* @dt to double*)
  %1303 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1304 = fmul double %1302, %1303
  %1305 = load double, double* %47, align 1
  %1306 = fmul double %1304, %1305
  %1307 = inttoptr i64 %119 to i32*
  %1308 = load i32, i32* %1307
  %1309 = sext i32 %1308 to i64
  %1310 = mul nsw i64 %1309, 2600
  %1311 = add i64 %1310, %1295
  %1312 = inttoptr i64 %120 to i32*
  %1313 = load i32, i32* %1312
  %1314 = sext i32 %1313 to i64
  %1315 = mul nsw i64 %1314, 200
  %1316 = add i64 %1315, %1311
  %1317 = add i64 %1316, 168
  %1318 = inttoptr i64 %1317 to double*
  store double %1306, double* %1318
  %1319 = load double, double* bitcast (%dt_type* @dt to double*)
  %1320 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1321 = fmul double %1319, %1320
  %1322 = inttoptr i64 %125 to i32*
  %1323 = load i32, i32* %1322
  %1324 = sext i32 %1323 to i64
  %1325 = mul nsw i64 %1324, 6760
  %1326 = load i64, i64* %8, align 8
  %1327 = add i64 %1325, %1326
  %1328 = inttoptr i64 %119 to i32*
  %1329 = load i32, i32* %1328
  %1330 = sext i32 %1329 to i64
  %1331 = mul nsw i64 %1330, 520
  %1332 = add i64 %1331, %1327
  %1333 = inttoptr i64 %120 to i32*
  %1334 = load i32, i32* %1333
  %1335 = add i32 %1334, 1
  %1336 = sext i32 %1335 to i64
  %1337 = mul nsw i64 %1336, 40
  %1338 = add i64 %1337, %1332
  %1339 = add i64 %1338, 8
  %1340 = inttoptr i64 %1339 to double*
  %1341 = load double, double* %1340
  %1342 = add i64 %1338, 16
  %1343 = inttoptr i64 %1342 to double*
  %1344 = load double, double* %1343
  %1345 = fmul double %1341, %1344
  %1346 = bitcast double %1345 to i64
  %1347 = load i64, i64* %10, align 8
  %1348 = xor i64 %1347, %1346
  %1349 = bitcast i64 %1348 to double
  %1350 = inttoptr i64 %124 to double*
  %1351 = load double, double* %1350
  %1352 = fmul double %1349, %1351
  %1353 = fmul double %1352, %1321
  %1354 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1355 = fmul double %1319, %1354
  %1356 = inttoptr i64 %123 to double*
  %1357 = load double, double* %1356
  %1358 = bitcast double %1357 to i64
  %1359 = xor i64 %1347, %1358
  %1360 = bitcast i64 %1359 to double
  %1361 = fmul double %1360, %1351
  %1362 = fmul double %1361, %1344
  %1363 = fmul double %1355, %1362
  %1364 = fsub double %1353, %1363
  %1365 = mul nsw i64 %1330, 2600
  %1366 = load i64, i64* %15, align 8
  %1367 = add i64 %1365, %1366
  %1368 = sext i32 %1334 to i64
  %1369 = mul nsw i64 %1368, 200
  %1370 = add i64 %1369, %1367
  %1371 = add i64 %1370, 16
  %1372 = inttoptr i64 %1371 to double*
  store double %1364, double* %1372
  %1373 = load double, double* bitcast (%dt_type* @dt to double*)
  %1374 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1375 = fmul double %1373, %1374
  %1376 = inttoptr i64 %125 to i32*
  %1377 = load i32, i32* %1376
  %1378 = sext i32 %1377 to i64
  %1379 = mul nsw i64 %1378, 6760
  %1380 = load i64, i64* %8, align 8
  %1381 = add i64 %1379, %1380
  %1382 = inttoptr i64 %119 to i32*
  %1383 = load i32, i32* %1382
  %1384 = sext i32 %1383 to i64
  %1385 = mul nsw i64 %1384, 520
  %1386 = add i64 %1385, %1381
  %1387 = inttoptr i64 %120 to i32*
  %1388 = load i32, i32* %1387
  %1389 = add i32 %1388, 1
  %1390 = sext i32 %1389 to i64
  %1391 = mul nsw i64 %1390, 40
  %1392 = add i64 %1391, %1386
  %1393 = add i64 %1392, 16
  %1394 = inttoptr i64 %1393 to double*
  %1395 = load double, double* %1394
  %1396 = inttoptr i64 %126 to double*
  %1397 = load double, double* %1396
  %1398 = fmul double %1395, %1397
  %1399 = fmul double %1398, %1375
  %1400 = mul nsw i64 %1384, 2600
  %1401 = add i64 %1400, %1366
  %1402 = sext i32 %1388 to i64
  %1403 = mul nsw i64 %1402, 200
  %1404 = add i64 %1403, %1401
  %1405 = add i64 %1404, 56
  %1406 = inttoptr i64 %1405 to double*
  store double %1399, double* %1406
  %1407 = load double, double* bitcast (%dt_type* @dt to double*)
  %1408 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1409 = fmul double %1407, %1408
  %1410 = inttoptr i64 %125 to i32*
  %1411 = load i32, i32* %1410
  %1412 = sext i32 %1411 to i64
  %1413 = mul nsw i64 %1412, 6760
  %1414 = add i64 %1413, %1380
  %1415 = inttoptr i64 %119 to i32*
  %1416 = load i32, i32* %1415
  %1417 = sext i32 %1416 to i64
  %1418 = mul nsw i64 %1417, 520
  %1419 = add i64 %1418, %1414
  %1420 = inttoptr i64 %120 to i32*
  %1421 = load i32, i32* %1420
  %1422 = add i32 %1421, 1
  %1423 = sext i32 %1422 to i64
  %1424 = mul nsw i64 %1423, 40
  %1425 = add i64 %1424, %1419
  %1426 = add i64 %1425, 8
  %1427 = inttoptr i64 %1426 to double*
  %1428 = load double, double* %1427
  %1429 = inttoptr i64 %126 to double*
  %1430 = load double, double* %1429
  %1431 = fmul double %1428, %1430
  %1432 = fmul double %1431, %1409
  %1433 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1434 = fmul double %1407, %1433
  %1435 = inttoptr i64 %123 to double*
  %1436 = load double, double* %1435
  %1437 = fmul double %1436, %1430
  %1438 = fmul double %1437, %1434
  %1439 = fsub double %1432, %1438
  %1440 = load double, double* bitcast (%dx3_type* @dx3 to double*)
  %1441 = fmul double %1434, %1440
  %1442 = fsub double %1439, %1441
  %1443 = mul nsw i64 %1417, 2600
  %1444 = load i64, i64* %15, align 8
  %1445 = add i64 %1443, %1444
  %1446 = sext i32 %1421 to i64
  %1447 = mul nsw i64 %1446, 200
  %1448 = add i64 %1447, %1445
  %1449 = add i64 %1448, 96
  %1450 = inttoptr i64 %1449 to double*
  store double %1442, double* %1450
  %1451 = inttoptr i64 %119 to i32*
  %1452 = load i32, i32* %1451
  %1453 = sext i32 %1452 to i64
  %1454 = mul nsw i64 %1453, 2600
  %1455 = add i64 %1454, %1444
  %1456 = inttoptr i64 %120 to i32*
  %1457 = load i32, i32* %1456
  %1458 = sext i32 %1457 to i64
  %1459 = mul nsw i64 %1458, 200
  %1460 = add i64 %1459, %1455
  %1461 = add i64 %1460, 136
  %1462 = load double, double* %121, align 1
  %1463 = inttoptr i64 %1461 to double*
  store double %1462, double* %1463
  %1464 = inttoptr i64 %119 to i32*
  %1465 = load i32, i32* %1464
  %1466 = sext i32 %1465 to i64
  %1467 = mul nsw i64 %1466, 2600
  %1468 = add i64 %1467, %1444
  %1469 = inttoptr i64 %120 to i32*
  %1470 = load i32, i32* %1469
  %1471 = sext i32 %1470 to i64
  %1472 = mul nsw i64 %1471, 200
  %1473 = add i64 %1472, %1468
  %1474 = add i64 %1473, 176
  %1475 = inttoptr i64 %1474 to double*
  store double %1462, double* %1475
  %1476 = load double, double* bitcast (%dt_type* @dt to double*)
  %1477 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1478 = fmul double %1476, %1477
  %1479 = inttoptr i64 %125 to i32*
  %1480 = load i32, i32* %1479
  %1481 = sext i32 %1480 to i64
  %1482 = mul nsw i64 %1481, 6760
  %1483 = load i64, i64* %8, align 8
  %1484 = add i64 %1482, %1483
  %1485 = inttoptr i64 %119 to i32*
  %1486 = load i32, i32* %1485
  %1487 = sext i32 %1486 to i64
  %1488 = mul nsw i64 %1487, 520
  %1489 = add i64 %1488, %1484
  %1490 = inttoptr i64 %120 to i32*
  %1491 = load i32, i32* %1490
  %1492 = add i32 %1491, 1
  %1493 = sext i32 %1492 to i64
  %1494 = mul nsw i64 %1493, 40
  %1495 = add i64 %1494, %1489
  %1496 = add i64 %1495, 8
  %1497 = inttoptr i64 %1496 to double*
  %1498 = load double, double* %1497
  %1499 = add i64 %1495, 24
  %1500 = inttoptr i64 %1499 to double*
  %1501 = load double, double* %1500
  %1502 = fmul double %1498, %1501
  %1503 = bitcast double %1502 to i64
  %1504 = load i64, i64* %10, align 8
  %1505 = xor i64 %1504, %1503
  %1506 = bitcast i64 %1505 to double
  %1507 = inttoptr i64 %124 to double*
  %1508 = load double, double* %1507
  %1509 = fmul double %1506, %1508
  %1510 = fmul double %1509, %1478
  %1511 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1512 = fmul double %1476, %1511
  %1513 = inttoptr i64 %123 to double*
  %1514 = load double, double* %1513
  %1515 = bitcast double %1514 to i64
  %1516 = xor i64 %1504, %1515
  %1517 = bitcast i64 %1516 to double
  %1518 = fmul double %1517, %1508
  %1519 = fmul double %1518, %1501
  %1520 = fmul double %1512, %1519
  %1521 = fsub double %1510, %1520
  %1522 = mul nsw i64 %1487, 2600
  %1523 = load i64, i64* %15, align 8
  %1524 = add i64 %1522, %1523
  %1525 = sext i32 %1491 to i64
  %1526 = mul nsw i64 %1525, 200
  %1527 = add i64 %1526, %1524
  %1528 = add i64 %1527, 24
  %1529 = inttoptr i64 %1528 to double*
  store double %1521, double* %1529
  %1530 = load double, double* bitcast (%dt_type* @dt to double*)
  %1531 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1532 = fmul double %1530, %1531
  %1533 = inttoptr i64 %125 to i32*
  %1534 = load i32, i32* %1533
  %1535 = sext i32 %1534 to i64
  %1536 = mul nsw i64 %1535, 6760
  %1537 = load i64, i64* %8, align 8
  %1538 = add i64 %1536, %1537
  %1539 = inttoptr i64 %119 to i32*
  %1540 = load i32, i32* %1539
  %1541 = sext i32 %1540 to i64
  %1542 = mul nsw i64 %1541, 520
  %1543 = add i64 %1542, %1538
  %1544 = inttoptr i64 %120 to i32*
  %1545 = load i32, i32* %1544
  %1546 = add i32 %1545, 1
  %1547 = sext i32 %1546 to i64
  %1548 = mul nsw i64 %1547, 40
  %1549 = add i64 %1548, %1543
  %1550 = add i64 %1549, 24
  %1551 = inttoptr i64 %1550 to double*
  %1552 = load double, double* %1551
  %1553 = inttoptr i64 %126 to double*
  %1554 = load double, double* %1553
  %1555 = fmul double %1552, %1554
  %1556 = fmul double %1555, %1532
  %1557 = mul nsw i64 %1541, 2600
  %1558 = add i64 %1557, %1523
  %1559 = sext i32 %1545 to i64
  %1560 = mul nsw i64 %1559, 200
  %1561 = add i64 %1560, %1558
  %1562 = add i64 %1561, 64
  %1563 = inttoptr i64 %1562 to double*
  store double %1556, double* %1563
  %1564 = inttoptr i64 %119 to i32*
  %1565 = load i32, i32* %1564
  %1566 = sext i32 %1565 to i64
  %1567 = mul nsw i64 %1566, 2600
  %1568 = add i64 %1567, %1523
  %1569 = inttoptr i64 %120 to i32*
  %1570 = load i32, i32* %1569
  %1571 = sext i32 %1570 to i64
  %1572 = mul nsw i64 %1571, 200
  %1573 = add i64 %1572, %1568
  %1574 = add i64 %1573, 104
  %1575 = load double, double* %121, align 1
  %1576 = inttoptr i64 %1574 to double*
  store double %1575, double* %1576
  %1577 = load double, double* bitcast (%dt_type* @dt to double*)
  %1578 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1579 = fmul double %1577, %1578
  %1580 = inttoptr i64 %125 to i32*
  %1581 = load i32, i32* %1580
  %1582 = sext i32 %1581 to i64
  %1583 = mul nsw i64 %1582, 6760
  %1584 = add i64 %1583, %1537
  %1585 = inttoptr i64 %119 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  %1588 = mul nsw i64 %1587, 520
  %1589 = add i64 %1588, %1584
  %1590 = inttoptr i64 %120 to i32*
  %1591 = load i32, i32* %1590
  %1592 = add i32 %1591, 1
  %1593 = sext i32 %1592 to i64
  %1594 = mul nsw i64 %1593, 40
  %1595 = add i64 %1594, %1589
  %1596 = add i64 %1595, 8
  %1597 = inttoptr i64 %1596 to double*
  %1598 = load double, double* %1597
  %1599 = inttoptr i64 %126 to double*
  %1600 = load double, double* %1599
  %1601 = fmul double %1598, %1600
  %1602 = fmul double %1601, %1579
  %1603 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1604 = fmul double %1577, %1603
  %1605 = inttoptr i64 %123 to double*
  %1606 = load double, double* %1605
  %1607 = fmul double %1606, %1600
  %1608 = fmul double %1607, %1604
  %1609 = fsub double %1602, %1608
  %1610 = load double, double* bitcast (%dx4_type* @dx4 to double*)
  %1611 = fmul double %1604, %1610
  %1612 = fsub double %1609, %1611
  %1613 = mul nsw i64 %1587, 2600
  %1614 = load i64, i64* %15, align 8
  %1615 = add i64 %1613, %1614
  %1616 = sext i32 %1591 to i64
  %1617 = mul nsw i64 %1616, 200
  %1618 = add i64 %1617, %1615
  %1619 = add i64 %1618, 144
  %1620 = inttoptr i64 %1619 to double*
  store double %1612, double* %1620
  %1621 = inttoptr i64 %119 to i32*
  %1622 = load i32, i32* %1621
  %1623 = sext i32 %1622 to i64
  %1624 = mul nsw i64 %1623, 2600
  %1625 = add i64 %1624, %1614
  %1626 = inttoptr i64 %120 to i32*
  %1627 = load i32, i32* %1626
  %1628 = sext i32 %1627 to i64
  %1629 = mul nsw i64 %1628, 200
  %1630 = add i64 %1629, %1625
  %1631 = add i64 %1630, 184
  %1632 = inttoptr i64 %1631 to double*
  store double %1575, double* %1632
  %1633 = load double, double* bitcast (%dt_type* @dt to double*)
  %1634 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1635 = fmul double %1633, %1634
  store double %1635, double* %86, align 1, !tbaa !1264
  store i64 0, i64* %87, align 1, !tbaa !1264
  %1636 = inttoptr i64 %125 to i32*
  %1637 = load i32, i32* %1636
  %1638 = sext i32 %1637 to i64
  %1639 = mul nsw i64 %1638, 1352
  %1640 = load i64, i64* %9, align 8
  %1641 = add i64 %1639, %1640
  %1642 = inttoptr i64 %119 to i32*
  %1643 = load i32, i32* %1642
  %1644 = sext i32 %1643 to i64
  %1645 = mul nsw i64 %1644, 104
  %1646 = add i64 %1645, %1641
  %1647 = inttoptr i64 %120 to i32*
  %1648 = load i32, i32* %1647
  %1649 = add i32 %1648, 1
  %1650 = sext i32 %1649 to i64
  %1651 = load <2 x i32>, <2 x i32>* %138, align 1
  %1652 = extractelement <2 x i32> %1651, i32 0
  store i32 %1652, i32* %139, align 1, !tbaa !1292
  %1653 = extractelement <2 x i32> %1651, i32 1
  store i32 %1653, i32* %141, align 1, !tbaa !1292
  %1654 = shl nsw i64 %1650, 3
  %1655 = add i64 %1654, %1646
  %1656 = load double, double* %90, align 1
  %1657 = inttoptr i64 %1655 to double*
  %1658 = load double, double* %1657
  %1659 = fmul double %1656, %1658
  %1660 = mul nsw i64 %1638, 6760
  %1661 = load i64, i64* %8, align 8
  %1662 = add i64 %1660, %1661
  %1663 = mul nsw i64 %1644, 520
  %1664 = add i64 %1663, %1662
  %1665 = mul nsw i64 %1650, 40
  %1666 = add i64 %1665, %1664
  %1667 = load <2 x i32>, <2 x i32>* %145, align 1
  %1668 = extractelement <2 x i32> %1667, i32 0
  store i32 %1668, i32* %100, align 1, !tbaa !1292
  %1669 = extractelement <2 x i32> %1667, i32 1
  store i32 %1669, i32* %102, align 1, !tbaa !1292
  %1670 = add i64 %1666, 32
  %1671 = load double, double* %94, align 1
  %1672 = inttoptr i64 %1670 to double*
  %1673 = load double, double* %1672
  %1674 = fmul double %1671, %1673
  %1675 = fsub double %1659, %1674
  %1676 = add i64 %1666, 8
  %1677 = inttoptr i64 %1676 to double*
  %1678 = load double, double* %1677
  %1679 = inttoptr i64 %124 to double*
  %1680 = load double, double* %1679
  %1681 = fmul double %1678, %1680
  %1682 = fmul double %1681, %1675
  %1683 = load double, double* %86, align 1
  %1684 = fmul double %1682, %1683
  store double %1684, double* %86, align 1, !tbaa !1264
  %1685 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1686 = fmul double %1633, %1685
  store double %1686, double* %90, align 1, !tbaa !1264
  %1687 = inttoptr i64 %122 to double*
  %1688 = load double, double* %1687
  %1689 = inttoptr i64 %123 to double*
  %1690 = load double, double* %1689
  %1691 = fmul double %1688, %1690
  %1692 = inttoptr i64 %129 to double*
  %1693 = load double, double* %1692
  %1694 = fsub double %1691, %1693
  %1695 = bitcast double %1694 to i64
  %1696 = load i64, i64* %10, align 8
  %1697 = xor i64 %1696, %1695
  %1698 = bitcast i64 %1697 to double
  %1699 = inttoptr i64 %132 to double*
  %1700 = load double, double* %1699
  %1701 = fmul double %1698, %1700
  %1702 = load i64, i64* %8, align 8
  %1703 = add i64 %1660, %1702
  %1704 = add i64 %1663, %1703
  %1705 = add i64 %1665, %1704
  %1706 = add i64 %1705, 8
  %1707 = inttoptr i64 %1706 to double*
  %1708 = load double, double* %1707
  %1709 = fmul double %1678, %1708
  %1710 = fmul double %1701, %1709
  %1711 = fsub double %1690, %1693
  %1712 = fmul double %1711, %1700
  %1713 = add i64 %1705, 16
  %1714 = inttoptr i64 %1713 to double*
  %1715 = load double, double* %1714
  %1716 = fmul double %1715, %1715
  %1717 = fmul double %1712, %1716
  %1718 = fsub double %1710, %1717
  %1719 = add i64 %1705, 24
  %1720 = inttoptr i64 %1719 to double*
  %1721 = load double, double* %1720
  %1722 = fmul double %1721, %1721
  store double %1722, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %1723 = fmul double %1712, %1722
  %1724 = fsub double %1718, %1723
  %1725 = fmul double %1693, %1680
  %1726 = load i64, i64* %8, align 8
  %1727 = add i64 %1660, %1726
  %1728 = add i64 %1663, %1727
  %1729 = add i64 %1665, %1728
  %1730 = add i64 %1729, 32
  %1731 = inttoptr i64 %1730 to double*
  %1732 = load double, double* %1731
  %1733 = fmul double %1725, %1732
  %1734 = fsub double %1724, %1733
  %1735 = load double, double* %90, align 1
  %1736 = fmul double %1735, %1734
  %1737 = load double, double* %86, align 1
  %1738 = fsub double %1737, %1736
  %1739 = mul nsw i64 %1644, 2600
  %1740 = load i64, i64* %15, align 8
  %1741 = add i64 %1739, %1740
  %1742 = sext i32 %1648 to i64
  %1743 = mul nsw i64 %1742, 200
  %1744 = add i64 %1743, %1741
  %1745 = add i64 %1744, 32
  %1746 = inttoptr i64 %1745 to double*
  store double %1738, double* %1746
  %1747 = load double, double* bitcast (%dt_type* @dt to double*)
  %1748 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1749 = fmul double %1747, %1748
  store double %1749, double* %86, align 1, !tbaa !1264
  %1750 = inttoptr i64 %125 to i32*
  %1751 = load i32, i32* %1750
  %1752 = sext i32 %1751 to i64
  %1753 = mul nsw i64 %1752, 6760
  %1754 = add i64 %1753, %1726
  %1755 = inttoptr i64 %119 to i32*
  %1756 = load i32, i32* %1755
  %1757 = sext i32 %1756 to i64
  %1758 = mul nsw i64 %1757, 520
  %1759 = add i64 %1758, %1754
  %1760 = inttoptr i64 %120 to i32*
  %1761 = load i32, i32* %1760
  %1762 = add i32 %1761, 1
  %1763 = sext i32 %1762 to i64
  %1764 = mul nsw i64 %1763, 40
  %1765 = add i64 %1764, %1759
  %1766 = add i64 %1765, 32
  %1767 = inttoptr i64 %1766 to double*
  %1768 = load double, double* %1767
  %1769 = inttoptr i64 %126 to double*
  %1770 = load double, double* %1769
  %1771 = fmul double %1768, %1770
  %1772 = load <2 x i32>, <2 x i32>* %145, align 1
  %1773 = extractelement <2 x i32> %1772, i32 0
  store i32 %1773, i32* %100, align 1, !tbaa !1292
  %1774 = extractelement <2 x i32> %1772, i32 1
  store i32 %1774, i32* %102, align 1, !tbaa !1292
  %1775 = load double, double* %94, align 1
  %1776 = fmul double %1775, %1771
  %1777 = add i64 %1765, 8
  %1778 = inttoptr i64 %1777 to double*
  %1779 = load double, double* %1778
  %1780 = load i64, i64* %8, align 8
  %1781 = add i64 %1753, %1780
  %1782 = add i64 %1758, %1781
  %1783 = add i64 %1764, %1782
  %1784 = add i64 %1783, 8
  %1785 = inttoptr i64 %1784 to double*
  %1786 = load double, double* %1785
  %1787 = fmul double %1779, %1786
  %1788 = inttoptr i64 %124 to double*
  %1789 = load double, double* %1788
  %1790 = fmul double %1787, %1789
  %1791 = mul nsw i64 %1752, 1352
  %1792 = load i64, i64* %9, align 8
  %1793 = add i64 %1791, %1792
  %1794 = mul nsw i64 %1757, 104
  %1795 = add i64 %1794, %1793
  %1796 = shl nsw i64 %1763, 3
  %1797 = add i64 %1795, %1796
  %1798 = inttoptr i64 %1797 to double*
  %1799 = load double, double* %1798
  %1800 = fmul double %1799, %1770
  %1801 = fadd double %1800, %1790
  %1802 = load <2 x i32>, <2 x i32>* %133, align 1
  %1803 = load <2 x i32>, <2 x i32>* %134, align 1
  %1804 = extractelement <2 x i32> %1802, i32 0
  store i32 %1804, i32* %112, align 1, !tbaa !1292
  %1805 = extractelement <2 x i32> %1802, i32 1
  store i32 %1805, i32* %114, align 1, !tbaa !1292
  %1806 = extractelement <2 x i32> %1803, i32 0
  store i32 %1806, i32* %115, align 1, !tbaa !1292
  %1807 = extractelement <2 x i32> %1803, i32 1
  store i32 %1807, i32* %117, align 1, !tbaa !1292
  %1808 = load double, double* %107, align 1
  %1809 = fmul double %1808, %1801
  store double %1809, double* %107, align 1, !tbaa !1264
  %1810 = fsub double %1776, %1809
  %1811 = load double, double* %86, align 1
  %1812 = fmul double %1811, %1810
  %1813 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1814 = fmul double %1747, %1813
  %1815 = inttoptr i64 %122 to double*
  %1816 = load double, double* %1815
  %1817 = inttoptr i64 %123 to double*
  %1818 = load double, double* %1817
  %1819 = fmul double %1816, %1818
  %1820 = inttoptr i64 %129 to double*
  %1821 = load double, double* %1820
  %1822 = fsub double %1819, %1821
  %1823 = fmul double %1814, %1822
  %1824 = fmul double %1823, %1789
  %1825 = fmul double %1824, %1786
  %1826 = fsub double %1812, %1825
  %1827 = mul nsw i64 %1757, 2600
  %1828 = load i64, i64* %15, align 8
  %1829 = add i64 %1827, %1828
  %1830 = sext i32 %1761 to i64
  %1831 = mul nsw i64 %1830, 200
  %1832 = add i64 %1831, %1829
  %1833 = add i64 %1832, 72
  %1834 = inttoptr i64 %1833 to double*
  store double %1826, double* %1834
  %1835 = load double, double* bitcast (%dt_type* @dt to double*)
  %1836 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1837 = fmul double %1835, %1836
  %1838 = inttoptr i64 %125 to i32*
  %1839 = load i32, i32* %1838
  %1840 = sext i32 %1839 to i64
  %1841 = mul nsw i64 %1840, 6760
  %1842 = load i64, i64* %8, align 8
  %1843 = add i64 %1841, %1842
  %1844 = inttoptr i64 %119 to i32*
  %1845 = load i32, i32* %1844
  %1846 = sext i32 %1845 to i64
  %1847 = mul nsw i64 %1846, 520
  %1848 = add i64 %1847, %1843
  %1849 = inttoptr i64 %120 to i32*
  %1850 = load i32, i32* %1849
  %1851 = add i32 %1850, 1
  %1852 = sext i32 %1851 to i64
  %1853 = mul nsw i64 %1852, 40
  %1854 = add i64 %1853, %1848
  %1855 = add i64 %1854, 16
  %1856 = inttoptr i64 %1855 to double*
  %1857 = load double, double* %1856
  %1858 = add i64 %1854, 8
  %1859 = inttoptr i64 %1858 to double*
  %1860 = load double, double* %1859
  %1861 = fmul double %1857, %1860
  %1862 = load <2 x i32>, <2 x i32>* %136, align 1
  %1863 = extractelement <2 x i32> %1862, i32 0
  store i32 %1863, i32* %100, align 1, !tbaa !1292
  %1864 = extractelement <2 x i32> %1862, i32 1
  store i32 %1864, i32* %102, align 1, !tbaa !1292
  %1865 = load double, double* %94, align 1
  %1866 = fmul double %1865, %1861
  %1867 = inttoptr i64 %124 to double*
  %1868 = load double, double* %1867
  %1869 = fmul double %1866, %1868
  %1870 = fmul double %1837, %1869
  %1871 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1872 = fmul double %1835, %1871
  %1873 = inttoptr i64 %123 to double*
  %1874 = load double, double* %1873
  %1875 = inttoptr i64 %129 to double*
  %1876 = load double, double* %1875
  %1877 = fsub double %1874, %1876
  %1878 = fmul double %1877, %1872
  %1879 = fmul double %1878, %1868
  %1880 = fmul double %1879, %1857
  %1881 = fsub double %1870, %1880
  %1882 = mul nsw i64 %1846, 2600
  %1883 = load i64, i64* %15, align 8
  %1884 = add i64 %1882, %1883
  %1885 = sext i32 %1850 to i64
  %1886 = mul nsw i64 %1885, 200
  %1887 = add i64 %1886, %1884
  %1888 = add i64 %1887, 112
  %1889 = inttoptr i64 %1888 to double*
  store double %1881, double* %1889
  %1890 = load double, double* bitcast (%dt_type* @dt to double*)
  %1891 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1892 = fmul double %1890, %1891
  %1893 = inttoptr i64 %125 to i32*
  %1894 = load i32, i32* %1893
  %1895 = sext i32 %1894 to i64
  %1896 = mul nsw i64 %1895, 6760
  %1897 = load i64, i64* %8, align 8
  %1898 = add i64 %1896, %1897
  %1899 = inttoptr i64 %119 to i32*
  %1900 = load i32, i32* %1899
  %1901 = sext i32 %1900 to i64
  %1902 = mul nsw i64 %1901, 520
  %1903 = add i64 %1902, %1898
  %1904 = inttoptr i64 %120 to i32*
  %1905 = load i32, i32* %1904
  %1906 = add i32 %1905, 1
  %1907 = sext i32 %1906 to i64
  %1908 = mul nsw i64 %1907, 40
  %1909 = add i64 %1908, %1903
  %1910 = add i64 %1909, 24
  %1911 = inttoptr i64 %1910 to double*
  %1912 = load double, double* %1911
  %1913 = add i64 %1909, 8
  %1914 = inttoptr i64 %1913 to double*
  %1915 = load double, double* %1914
  %1916 = fmul double %1912, %1915
  %1917 = load <2 x i32>, <2 x i32>* %136, align 1
  %1918 = extractelement <2 x i32> %1917, i32 0
  store i32 %1918, i32* %100, align 1, !tbaa !1292
  %1919 = extractelement <2 x i32> %1917, i32 1
  store i32 %1919, i32* %102, align 1, !tbaa !1292
  %1920 = load double, double* %94, align 1
  %1921 = fmul double %1920, %1916
  %1922 = inttoptr i64 %124 to double*
  %1923 = load double, double* %1922
  %1924 = fmul double %1921, %1923
  %1925 = fmul double %1892, %1924
  %1926 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1927 = fmul double %1890, %1926
  %1928 = inttoptr i64 %123 to double*
  %1929 = load double, double* %1928
  %1930 = inttoptr i64 %129 to double*
  %1931 = load double, double* %1930
  %1932 = fsub double %1929, %1931
  %1933 = fmul double %1932, %1927
  %1934 = fmul double %1933, %1923
  %1935 = fmul double %1934, %1912
  %1936 = fsub double %1925, %1935
  %1937 = mul nsw i64 %1901, 2600
  %1938 = load i64, i64* %15, align 8
  %1939 = add i64 %1937, %1938
  %1940 = sext i32 %1905 to i64
  %1941 = mul nsw i64 %1940, 200
  %1942 = add i64 %1941, %1939
  %1943 = add i64 %1942, 152
  %1944 = inttoptr i64 %1943 to double*
  store double %1936, double* %1944
  %1945 = load double, double* bitcast (%dt_type* @dt to double*)
  %1946 = load double, double* bitcast (%tx2_type* @tx2 to double*)
  %1947 = fmul double %1945, %1946
  %1948 = inttoptr i64 %125 to i32*
  %1949 = load i32, i32* %1948
  %1950 = sext i32 %1949 to i64
  %1951 = mul nsw i64 %1950, 6760
  %1952 = load i64, i64* %8, align 8
  %1953 = add i64 %1951, %1952
  %1954 = inttoptr i64 %119 to i32*
  %1955 = load i32, i32* %1954
  %1956 = sext i32 %1955 to i64
  %1957 = mul nsw i64 %1956, 520
  %1958 = add i64 %1957, %1953
  %1959 = inttoptr i64 %120 to i32*
  %1960 = load i32, i32* %1959
  %1961 = add i32 %1960, 1
  %1962 = sext i32 %1961 to i64
  %1963 = mul nsw i64 %1962, 40
  %1964 = add i64 %1963, %1958
  store i64 %1964, i64* %17, align 8, !tbaa !1240
  %1965 = add i64 %1964, 8
  %1966 = inttoptr i64 %1965 to double*
  %1967 = load double, double* %1966
  %1968 = inttoptr i64 %126 to double*
  %1969 = load double, double* %1968
  %1970 = fmul double %1967, %1969
  %1971 = load <2 x i32>, <2 x i32>* %145, align 1
  %1972 = load <2 x i32>, <2 x i32>* %146, align 1
  %1973 = extractelement <2 x i32> %1971, i32 0
  store i32 %1973, i32* %100, align 1, !tbaa !1292
  %1974 = extractelement <2 x i32> %1971, i32 1
  store i32 %1974, i32* %102, align 1, !tbaa !1292
  %1975 = extractelement <2 x i32> %1972, i32 0
  store i32 %1975, i32* %103, align 1, !tbaa !1292
  %1976 = extractelement <2 x i32> %1972, i32 1
  store i32 %1976, i32* %105, align 1, !tbaa !1292
  %1977 = load double, double* %94, align 1
  %1978 = fmul double %1977, %1970
  store double %1978, double* %94, align 1, !tbaa !1264
  %1979 = fmul double %1947, %1978
  %1980 = load double, double* bitcast (%tx1_type* @tx1 to double*)
  %1981 = fmul double %1945, %1980
  %1982 = inttoptr i64 %129 to double*
  %1983 = load double, double* %1982
  %1984 = fmul double %1981, %1983
  %1985 = fmul double %1984, %1969
  %1986 = fsub double %1979, %1985
  %1987 = load double, double* bitcast (%dx5_type* @dx5 to double*)
  %1988 = fmul double %1981, %1987
  store double %1988, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %1989 = fsub double %1986, %1988
  %1990 = mul nsw i64 %1956, 2600
  %1991 = add i64 %1990, %1938
  %1992 = sext i32 %1960 to i64
  %1993 = mul nsw i64 %1992, 200
  %1994 = add i64 %1993, %1991
  %1995 = add i64 %1994, 192
  %1996 = inttoptr i64 %1995 to double*
  store double %1989, double* %1996
  %1997 = inttoptr i64 %125 to i32*
  %1998 = load i32, i32* %1997
  %1999 = sext i32 %1998 to i64
  %2000 = mul nsw i64 %1999, 1352
  %2001 = load i64, i64* %11, align 8
  %2002 = add i64 %2000, %2001
  %2003 = inttoptr i64 %119 to i32*
  %2004 = load i32, i32* %2003
  %2005 = add i32 %2004, 1
  %2006 = sext i32 %2005 to i64
  %2007 = mul nsw i64 %2006, 104
  %2008 = add i64 %2007, %2002
  %2009 = inttoptr i64 %120 to i32*
  %2010 = load i32, i32* %2009
  %2011 = sext i32 %2010 to i64
  %2012 = shl nsw i64 %2011, 3
  %2013 = add i64 %2012, %2008
  %2014 = inttoptr i64 %2013 to double*
  %2015 = load double, double* %2014
  %2016 = inttoptr i64 %126 to double*
  store double %2015, double* %2016
  %2017 = inttoptr i64 %126 to double*
  %2018 = load double, double* %2017
  %2019 = fmul double %2018, %2018
  %2020 = inttoptr i64 %124 to double*
  store double %2019, double* %2020
  %2021 = inttoptr i64 %126 to double*
  %2022 = load double, double* %2021
  %2023 = inttoptr i64 %124 to double*
  %2024 = load double, double* %2023
  %2025 = fmul double %2022, %2024
  %2026 = inttoptr i64 %132 to double*
  store double %2025, double* %2026
  %2027 = load double, double* bitcast (%dt_type* @dt to double*)
  %2028 = bitcast double %2027 to i64
  %2029 = load i64, i64* %10, align 8
  %2030 = xor i64 %2029, %2028
  %2031 = bitcast i64 %2030 to double
  %2032 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2033 = fmul double %2031, %2032
  %2034 = load double, double* bitcast (%dy1_type* @dy1 to double*)
  %2035 = fmul double %2033, %2034
  %2036 = inttoptr i64 %119 to i32*
  %2037 = load i32, i32* %2036
  %2038 = sext i32 %2037 to i64
  %2039 = mul nsw i64 %2038, 2600
  %2040 = load i64, i64* %14, align 8
  %2041 = add i64 %2039, %2040
  %2042 = inttoptr i64 %120 to i32*
  %2043 = load i32, i32* %2042
  %2044 = sext i32 %2043 to i64
  %2045 = mul nsw i64 %2044, 200
  %2046 = add i64 %2045, %2041
  %2047 = inttoptr i64 %2046 to double*
  store double %2035, double* %2047
  %2048 = inttoptr i64 %119 to i32*
  %2049 = load i32, i32* %2048
  %2050 = sext i32 %2049 to i64
  %2051 = mul nsw i64 %2050, 2600
  %2052 = add i64 %2051, %2040
  %2053 = inttoptr i64 %120 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  %2056 = mul nsw i64 %2055, 200
  %2057 = add i64 %2056, %2052
  %2058 = add i64 %2057, 40
  %2059 = load double, double* %121, align 1
  %2060 = inttoptr i64 %2058 to double*
  store double %2059, double* %2060
  %2061 = load double, double* bitcast (%dt_type* @dt to double*)
  %2062 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2063 = fmul double %2061, %2062
  %2064 = inttoptr i64 %119 to i32*
  %2065 = load i32, i32* %2064
  %2066 = sext i32 %2065 to i64
  %2067 = mul nsw i64 %2066, 2600
  %2068 = add i64 %2067, %2040
  %2069 = inttoptr i64 %120 to i32*
  %2070 = load i32, i32* %2069
  %2071 = sext i32 %2070 to i64
  %2072 = mul nsw i64 %2071, 200
  %2073 = add i64 %2072, %2068
  %2074 = add i64 %2073, 80
  %2075 = inttoptr i64 %2074 to double*
  store double %2063, double* %2075
  %2076 = inttoptr i64 %119 to i32*
  %2077 = load i32, i32* %2076
  %2078 = sext i32 %2077 to i64
  %2079 = mul nsw i64 %2078, 2600
  %2080 = add i64 %2079, %2040
  %2081 = inttoptr i64 %120 to i32*
  %2082 = load i32, i32* %2081
  %2083 = sext i32 %2082 to i64
  %2084 = mul nsw i64 %2083, 200
  %2085 = add i64 %2084, %2080
  %2086 = add i64 %2085, 120
  %2087 = inttoptr i64 %2086 to double*
  store double %2059, double* %2087
  %2088 = inttoptr i64 %119 to i32*
  %2089 = load i32, i32* %2088
  %2090 = sext i32 %2089 to i64
  %2091 = mul nsw i64 %2090, 2600
  %2092 = add i64 %2091, %2040
  %2093 = inttoptr i64 %120 to i32*
  %2094 = load i32, i32* %2093
  %2095 = sext i32 %2094 to i64
  %2096 = mul nsw i64 %2095, 200
  %2097 = add i64 %2096, %2092
  %2098 = add i64 %2097, 160
  %2099 = inttoptr i64 %2098 to double*
  store double %2059, double* %2099
  %2100 = load double, double* bitcast (%dt_type* @dt to double*)
  %2101 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2102 = fmul double %2100, %2101
  %2103 = inttoptr i64 %125 to i32*
  %2104 = load i32, i32* %2103
  %2105 = sext i32 %2104 to i64
  %2106 = mul nsw i64 %2105, 6760
  %2107 = load i64, i64* %8, align 8
  %2108 = add i64 %2106, %2107
  %2109 = inttoptr i64 %119 to i32*
  %2110 = load i32, i32* %2109
  %2111 = add i32 %2110, 1
  %2112 = sext i32 %2111 to i64
  %2113 = mul nsw i64 %2112, 520
  %2114 = add i64 %2113, %2108
  %2115 = inttoptr i64 %120 to i32*
  %2116 = load i32, i32* %2115
  %2117 = sext i32 %2116 to i64
  %2118 = mul nsw i64 %2117, 40
  %2119 = add i64 %2118, %2114
  %2120 = add i64 %2119, 8
  %2121 = inttoptr i64 %2120 to double*
  %2122 = load double, double* %2121
  %2123 = add i64 %2119, 16
  %2124 = inttoptr i64 %2123 to double*
  %2125 = load double, double* %2124
  %2126 = fmul double %2122, %2125
  %2127 = bitcast double %2126 to i64
  %2128 = load i64, i64* %10, align 8
  %2129 = xor i64 %2128, %2127
  %2130 = bitcast i64 %2129 to double
  %2131 = inttoptr i64 %124 to double*
  %2132 = load double, double* %2131
  %2133 = fmul double %2130, %2132
  %2134 = fmul double %2133, %2102
  %2135 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2136 = fmul double %2100, %2135
  %2137 = inttoptr i64 %123 to double*
  %2138 = load double, double* %2137
  %2139 = bitcast double %2138 to i64
  %2140 = xor i64 %2128, %2139
  %2141 = bitcast i64 %2140 to double
  %2142 = fmul double %2141, %2132
  %2143 = fmul double %2142, %2122
  %2144 = fmul double %2136, %2143
  %2145 = fsub double %2134, %2144
  %2146 = sext i32 %2110 to i64
  %2147 = mul nsw i64 %2146, 2600
  %2148 = load i64, i64* %14, align 8
  %2149 = add i64 %2147, %2148
  %2150 = mul nsw i64 %2117, 200
  %2151 = add i64 %2150, %2149
  %2152 = add i64 %2151, 8
  %2153 = inttoptr i64 %2152 to double*
  store double %2145, double* %2153
  %2154 = load double, double* bitcast (%dt_type* @dt to double*)
  %2155 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2156 = fmul double %2154, %2155
  %2157 = inttoptr i64 %125 to i32*
  %2158 = load i32, i32* %2157
  %2159 = sext i32 %2158 to i64
  %2160 = mul nsw i64 %2159, 6760
  %2161 = load i64, i64* %8, align 8
  %2162 = add i64 %2160, %2161
  %2163 = inttoptr i64 %119 to i32*
  %2164 = load i32, i32* %2163
  %2165 = add i32 %2164, 1
  %2166 = sext i32 %2165 to i64
  %2167 = mul nsw i64 %2166, 520
  %2168 = add i64 %2167, %2162
  %2169 = inttoptr i64 %120 to i32*
  %2170 = load i32, i32* %2169
  %2171 = sext i32 %2170 to i64
  %2172 = mul nsw i64 %2171, 40
  %2173 = add i64 %2172, %2168
  %2174 = add i64 %2173, 16
  %2175 = inttoptr i64 %2174 to double*
  %2176 = load double, double* %2175
  %2177 = inttoptr i64 %126 to double*
  %2178 = load double, double* %2177
  %2179 = fmul double %2176, %2178
  %2180 = fmul double %2179, %2156
  %2181 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2182 = fmul double %2154, %2181
  %2183 = inttoptr i64 %123 to double*
  %2184 = load double, double* %2183
  %2185 = fmul double %2184, %2178
  %2186 = fmul double %2185, %2182
  %2187 = fsub double %2180, %2186
  %2188 = load double, double* bitcast (%dy2_type* @dy2 to double*)
  %2189 = fmul double %2182, %2188
  %2190 = fsub double %2187, %2189
  %2191 = sext i32 %2164 to i64
  %2192 = mul nsw i64 %2191, 2600
  %2193 = add i64 %2192, %2148
  %2194 = mul nsw i64 %2171, 200
  %2195 = add i64 %2194, %2193
  %2196 = add i64 %2195, 48
  %2197 = inttoptr i64 %2196 to double*
  store double %2190, double* %2197
  %2198 = load double, double* bitcast (%dt_type* @dt to double*)
  %2199 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2200 = fmul double %2198, %2199
  %2201 = inttoptr i64 %125 to i32*
  %2202 = load i32, i32* %2201
  %2203 = sext i32 %2202 to i64
  %2204 = mul nsw i64 %2203, 6760
  %2205 = add i64 %2204, %2161
  %2206 = inttoptr i64 %119 to i32*
  %2207 = load i32, i32* %2206
  %2208 = add i32 %2207, 1
  %2209 = sext i32 %2208 to i64
  %2210 = mul nsw i64 %2209, 520
  %2211 = add i64 %2210, %2205
  %2212 = inttoptr i64 %120 to i32*
  %2213 = load i32, i32* %2212
  %2214 = sext i32 %2213 to i64
  %2215 = mul nsw i64 %2214, 40
  %2216 = add i64 %2215, %2211
  %2217 = add i64 %2216, 8
  %2218 = inttoptr i64 %2217 to double*
  %2219 = load double, double* %2218
  %2220 = inttoptr i64 %126 to double*
  %2221 = load double, double* %2220
  %2222 = fmul double %2219, %2221
  %2223 = fmul double %2222, %2200
  %2224 = sext i32 %2207 to i64
  %2225 = mul nsw i64 %2224, 2600
  %2226 = load i64, i64* %14, align 8
  %2227 = add i64 %2225, %2226
  %2228 = mul nsw i64 %2214, 200
  %2229 = add i64 %2228, %2227
  %2230 = add i64 %2229, 88
  %2231 = inttoptr i64 %2230 to double*
  store double %2223, double* %2231
  %2232 = inttoptr i64 %119 to i32*
  %2233 = load i32, i32* %2232
  %2234 = sext i32 %2233 to i64
  %2235 = mul nsw i64 %2234, 2600
  %2236 = add i64 %2235, %2226
  %2237 = inttoptr i64 %120 to i32*
  %2238 = load i32, i32* %2237
  %2239 = sext i32 %2238 to i64
  %2240 = mul nsw i64 %2239, 200
  %2241 = add i64 %2240, %2236
  %2242 = add i64 %2241, 128
  %2243 = load double, double* %121, align 1
  %2244 = inttoptr i64 %2242 to double*
  store double %2243, double* %2244
  %2245 = inttoptr i64 %119 to i32*
  %2246 = load i32, i32* %2245
  %2247 = sext i32 %2246 to i64
  %2248 = mul nsw i64 %2247, 2600
  %2249 = add i64 %2248, %2226
  %2250 = inttoptr i64 %120 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  %2253 = mul nsw i64 %2252, 200
  %2254 = add i64 %2253, %2249
  %2255 = add i64 %2254, 168
  %2256 = inttoptr i64 %2255 to double*
  store double %2243, double* %2256
  %2257 = load double, double* bitcast (%dt_type* @dt to double*)
  %2258 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2259 = fmul double %2257, %2258
  store double %2259, double* %86, align 1, !tbaa !1264
  %2260 = inttoptr i64 %125 to i32*
  %2261 = load i32, i32* %2260
  %2262 = sext i32 %2261 to i64
  %2263 = mul nsw i64 %2262, 6760
  %2264 = load i64, i64* %8, align 8
  %2265 = add i64 %2263, %2264
  %2266 = inttoptr i64 %119 to i32*
  %2267 = load i32, i32* %2266
  %2268 = add i32 %2267, 1
  %2269 = sext i32 %2268 to i64
  %2270 = mul nsw i64 %2269, 520
  %2271 = add i64 %2270, %2265
  %2272 = inttoptr i64 %120 to i32*
  %2273 = load i32, i32* %2272
  %2274 = sext i32 %2273 to i64
  %2275 = mul nsw i64 %2274, 40
  %2276 = add i64 %2275, %2271
  %2277 = add i64 %2276, 16
  %2278 = inttoptr i64 %2277 to double*
  %2279 = load double, double* %2278
  %2280 = inttoptr i64 %126 to double*
  %2281 = load double, double* %2280
  %2282 = fmul double %2279, %2281
  %2283 = bitcast double %2282 to i64
  %2284 = load i64, i64* %10, align 8
  %2285 = xor i64 %2284, %2283
  %2286 = bitcast i64 %2285 to double
  %2287 = fmul double %2282, %2286
  %2288 = mul nsw i64 %2262, 1352
  %2289 = load i64, i64* %9, align 8
  %2290 = add i64 %2288, %2289
  %2291 = mul nsw i64 %2269, 104
  %2292 = add i64 %2291, %2290
  %2293 = shl nsw i64 %2274, 3
  %2294 = add i64 %2293, %2292
  %2295 = inttoptr i64 %2294 to double*
  %2296 = load double, double* %2295
  %2297 = fmul double %2296, %2281
  %2298 = load <2 x i32>, <2 x i32>* %133, align 1
  %2299 = load <2 x i32>, <2 x i32>* %134, align 1
  %2300 = extractelement <2 x i32> %2298, i32 0
  store i32 %2300, i32* %112, align 1, !tbaa !1292
  %2301 = extractelement <2 x i32> %2298, i32 1
  store i32 %2301, i32* %114, align 1, !tbaa !1292
  %2302 = extractelement <2 x i32> %2299, i32 0
  store i32 %2302, i32* %115, align 1, !tbaa !1292
  %2303 = extractelement <2 x i32> %2299, i32 1
  store i32 %2303, i32* %117, align 1, !tbaa !1292
  %2304 = load double, double* %107, align 1
  %2305 = fmul double %2304, %2297
  store double %2305, double* %107, align 1, !tbaa !1264
  %2306 = fadd double %2287, %2305
  %2307 = load double, double* %86, align 1
  %2308 = fmul double %2307, %2306
  %2309 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2310 = fmul double %2257, %2309
  %2311 = inttoptr i64 %122 to double*
  %2312 = load double, double* %2311
  %2313 = bitcast double %2312 to i64
  %2314 = xor i64 %2284, %2313
  %2315 = bitcast i64 %2314 to double
  %2316 = inttoptr i64 %123 to double*
  %2317 = load double, double* %2316
  %2318 = fmul double %2315, %2317
  %2319 = inttoptr i64 %124 to double*
  %2320 = load double, double* %2319
  %2321 = fmul double %2318, %2320
  %2322 = load i64, i64* %8, align 8
  %2323 = add i64 %2263, %2322
  %2324 = add i64 %2270, %2323
  %2325 = add i64 %2275, %2324
  %2326 = add i64 %2325, 16
  %2327 = inttoptr i64 %2326 to double*
  %2328 = load double, double* %2327
  %2329 = fmul double %2321, %2328
  %2330 = fmul double %2310, %2329
  %2331 = fsub double %2308, %2330
  %2332 = sext i32 %2267 to i64
  %2333 = mul nsw i64 %2332, 2600
  %2334 = load i64, i64* %14, align 8
  %2335 = add i64 %2333, %2334
  %2336 = mul nsw i64 %2274, 200
  %2337 = add i64 %2336, %2335
  %2338 = add i64 %2337, 16
  %2339 = inttoptr i64 %2338 to double*
  store double %2331, double* %2339
  %2340 = load double, double* bitcast (%dt_type* @dt to double*)
  %2341 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2342 = fmul double %2340, %2341
  %2343 = inttoptr i64 %125 to i32*
  %2344 = load i32, i32* %2343
  %2345 = sext i32 %2344 to i64
  %2346 = mul nsw i64 %2345, 6760
  %2347 = add i64 %2346, %2322
  %2348 = inttoptr i64 %119 to i32*
  %2349 = load i32, i32* %2348
  %2350 = add i32 %2349, 1
  %2351 = sext i32 %2350 to i64
  %2352 = mul nsw i64 %2351, 520
  %2353 = add i64 %2352, %2347
  %2354 = inttoptr i64 %120 to i32*
  %2355 = load i32, i32* %2354
  %2356 = sext i32 %2355 to i64
  %2357 = mul nsw i64 %2356, 40
  %2358 = add i64 %2357, %2353
  %2359 = add i64 %2358, 8
  %2360 = inttoptr i64 %2359 to double*
  %2361 = load double, double* %2360
  %2362 = inttoptr i64 %126 to double*
  %2363 = load double, double* %2362
  %2364 = fmul double %2361, %2363
  %2365 = load <2 x i32>, <2 x i32>* %136, align 1
  %2366 = extractelement <2 x i32> %2365, i32 0
  store i32 %2366, i32* %100, align 1, !tbaa !1292
  %2367 = extractelement <2 x i32> %2365, i32 1
  store i32 %2367, i32* %102, align 1, !tbaa !1292
  %2368 = load double, double* %94, align 1
  %2369 = fmul double %2368, %2364
  %2370 = fmul double %2342, %2369
  %2371 = sext i32 %2349 to i64
  %2372 = mul nsw i64 %2371, 2600
  %2373 = add i64 %2372, %2334
  %2374 = mul nsw i64 %2356, 200
  %2375 = add i64 %2374, %2373
  %2376 = add i64 %2375, 56
  %2377 = inttoptr i64 %2376 to double*
  store double %2370, double* %2377
  %2378 = load double, double* bitcast (%dt_type* @dt to double*)
  %2379 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2380 = fmul double %2378, %2379
  %2381 = inttoptr i64 %125 to i32*
  %2382 = load i32, i32* %2381
  %2383 = sext i32 %2382 to i64
  %2384 = mul nsw i64 %2383, 6760
  %2385 = load i64, i64* %8, align 8
  %2386 = add i64 %2384, %2385
  %2387 = inttoptr i64 %119 to i32*
  %2388 = load i32, i32* %2387
  %2389 = add i32 %2388, 1
  %2390 = sext i32 %2389 to i64
  %2391 = mul nsw i64 %2390, 520
  %2392 = add i64 %2391, %2386
  %2393 = inttoptr i64 %120 to i32*
  %2394 = load i32, i32* %2393
  %2395 = sext i32 %2394 to i64
  %2396 = mul nsw i64 %2395, 40
  %2397 = add i64 %2396, %2392
  %2398 = add i64 %2397, 16
  %2399 = inttoptr i64 %2398 to double*
  %2400 = load double, double* %2399
  %2401 = inttoptr i64 %126 to double*
  %2402 = load double, double* %2401
  %2403 = fmul double %2400, %2402
  %2404 = load <2 x i32>, <2 x i32>* %135, align 1
  %2405 = extractelement <2 x i32> %2404, i32 0
  store i32 %2405, i32* %100, align 1, !tbaa !1292
  %2406 = extractelement <2 x i32> %2404, i32 1
  store i32 %2406, i32* %102, align 1, !tbaa !1292
  %2407 = load double, double* %94, align 1
  %2408 = fmul double %2407, %2403
  %2409 = fmul double %2380, %2408
  %2410 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2411 = fmul double %2378, %2410
  %2412 = inttoptr i64 %122 to double*
  %2413 = load double, double* %2412
  %2414 = inttoptr i64 %123 to double*
  %2415 = load double, double* %2414
  %2416 = fmul double %2413, %2415
  %2417 = fmul double %2416, %2402
  %2418 = fmul double %2411, %2417
  %2419 = fsub double %2409, %2418
  %2420 = load double, double* bitcast (%dy3_type* @dy3 to double*)
  %2421 = fmul double %2411, %2420
  %2422 = fsub double %2419, %2421
  %2423 = sext i32 %2388 to i64
  %2424 = mul nsw i64 %2423, 2600
  %2425 = load i64, i64* %14, align 8
  %2426 = add i64 %2424, %2425
  %2427 = mul nsw i64 %2395, 200
  %2428 = add i64 %2427, %2426
  %2429 = add i64 %2428, 96
  %2430 = inttoptr i64 %2429 to double*
  store double %2422, double* %2430
  %2431 = load double, double* bitcast (%dt_type* @dt to double*)
  %2432 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2433 = fmul double %2431, %2432
  %2434 = inttoptr i64 %125 to i32*
  %2435 = load i32, i32* %2434
  %2436 = sext i32 %2435 to i64
  %2437 = mul nsw i64 %2436, 6760
  %2438 = load i64, i64* %8, align 8
  %2439 = add i64 %2437, %2438
  %2440 = inttoptr i64 %119 to i32*
  %2441 = load i32, i32* %2440
  %2442 = add i32 %2441, 1
  %2443 = sext i32 %2442 to i64
  %2444 = mul nsw i64 %2443, 520
  %2445 = add i64 %2444, %2439
  %2446 = inttoptr i64 %120 to i32*
  %2447 = load i32, i32* %2446
  %2448 = sext i32 %2447 to i64
  %2449 = mul nsw i64 %2448, 40
  %2450 = add i64 %2449, %2445
  %2451 = add i64 %2450, 24
  %2452 = inttoptr i64 %2451 to double*
  %2453 = load double, double* %2452
  %2454 = inttoptr i64 %126 to double*
  %2455 = load double, double* %2454
  %2456 = fmul double %2453, %2455
  %2457 = load <2 x i32>, <2 x i32>* %136, align 1
  %2458 = extractelement <2 x i32> %2457, i32 0
  store i32 %2458, i32* %100, align 1, !tbaa !1292
  %2459 = extractelement <2 x i32> %2457, i32 1
  store i32 %2459, i32* %102, align 1, !tbaa !1292
  %2460 = load double, double* %94, align 1
  %2461 = fmul double %2460, %2456
  %2462 = fmul double %2433, %2461
  %2463 = sext i32 %2441 to i64
  %2464 = mul nsw i64 %2463, 2600
  %2465 = add i64 %2464, %2425
  %2466 = mul nsw i64 %2448, 200
  %2467 = add i64 %2466, %2465
  %2468 = add i64 %2467, 136
  %2469 = inttoptr i64 %2468 to double*
  store double %2462, double* %2469
  %2470 = load double, double* bitcast (%dt_type* @dt to double*)
  %2471 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2472 = fmul double %2470, %2471
  %2473 = load double, double* %47, align 1
  %2474 = fmul double %2472, %2473
  %2475 = inttoptr i64 %119 to i32*
  %2476 = load i32, i32* %2475
  %2477 = sext i32 %2476 to i64
  %2478 = mul nsw i64 %2477, 2600
  %2479 = add i64 %2478, %2425
  %2480 = inttoptr i64 %120 to i32*
  %2481 = load i32, i32* %2480
  %2482 = sext i32 %2481 to i64
  %2483 = mul nsw i64 %2482, 200
  %2484 = add i64 %2483, %2479
  %2485 = add i64 %2484, 176
  %2486 = inttoptr i64 %2485 to double*
  store double %2474, double* %2486
  %2487 = load double, double* bitcast (%dt_type* @dt to double*)
  %2488 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2489 = fmul double %2487, %2488
  %2490 = inttoptr i64 %125 to i32*
  %2491 = load i32, i32* %2490
  %2492 = sext i32 %2491 to i64
  %2493 = mul nsw i64 %2492, 6760
  %2494 = add i64 %2493, %2438
  %2495 = inttoptr i64 %119 to i32*
  %2496 = load i32, i32* %2495
  %2497 = add i32 %2496, 1
  %2498 = sext i32 %2497 to i64
  %2499 = mul nsw i64 %2498, 520
  %2500 = add i64 %2499, %2494
  %2501 = inttoptr i64 %120 to i32*
  %2502 = load i32, i32* %2501
  %2503 = sext i32 %2502 to i64
  %2504 = mul nsw i64 %2503, 40
  %2505 = add i64 %2504, %2500
  %2506 = add i64 %2505, 16
  %2507 = inttoptr i64 %2506 to double*
  %2508 = load double, double* %2507
  %2509 = load i64, i64* %8, align 8
  %2510 = add i64 %2493, %2509
  %2511 = add i64 %2499, %2510
  %2512 = add i64 %2504, %2511
  %2513 = add i64 %2512, 24
  %2514 = inttoptr i64 %2513 to double*
  %2515 = load double, double* %2514
  %2516 = fmul double %2508, %2515
  %2517 = bitcast double %2516 to i64
  %2518 = load i64, i64* %10, align 8
  %2519 = xor i64 %2518, %2517
  %2520 = bitcast i64 %2519 to double
  %2521 = inttoptr i64 %124 to double*
  %2522 = load double, double* %2521
  %2523 = fmul double %2520, %2522
  %2524 = fmul double %2523, %2489
  %2525 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2526 = fmul double %2487, %2525
  %2527 = inttoptr i64 %123 to double*
  %2528 = load double, double* %2527
  %2529 = bitcast double %2528 to i64
  %2530 = xor i64 %2518, %2529
  %2531 = bitcast i64 %2530 to double
  %2532 = fmul double %2531, %2522
  %2533 = fmul double %2532, %2515
  %2534 = fmul double %2526, %2533
  %2535 = fsub double %2524, %2534
  %2536 = sext i32 %2496 to i64
  %2537 = mul nsw i64 %2536, 2600
  %2538 = load i64, i64* %14, align 8
  %2539 = add i64 %2537, %2538
  %2540 = mul nsw i64 %2503, 200
  %2541 = add i64 %2540, %2539
  %2542 = add i64 %2541, 24
  %2543 = inttoptr i64 %2542 to double*
  store double %2535, double* %2543
  %2544 = inttoptr i64 %119 to i32*
  %2545 = load i32, i32* %2544
  %2546 = sext i32 %2545 to i64
  %2547 = mul nsw i64 %2546, 2600
  %2548 = add i64 %2547, %2538
  %2549 = inttoptr i64 %120 to i32*
  %2550 = load i32, i32* %2549
  %2551 = sext i32 %2550 to i64
  %2552 = mul nsw i64 %2551, 200
  %2553 = add i64 %2552, %2548
  %2554 = add i64 %2553, 64
  %2555 = load double, double* %121, align 1
  %2556 = inttoptr i64 %2554 to double*
  store double %2555, double* %2556
  %2557 = load double, double* bitcast (%dt_type* @dt to double*)
  %2558 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2559 = fmul double %2557, %2558
  %2560 = inttoptr i64 %125 to i32*
  %2561 = load i32, i32* %2560
  %2562 = sext i32 %2561 to i64
  %2563 = mul nsw i64 %2562, 6760
  %2564 = load i64, i64* %8, align 8
  %2565 = add i64 %2563, %2564
  %2566 = inttoptr i64 %119 to i32*
  %2567 = load i32, i32* %2566
  %2568 = add i32 %2567, 1
  %2569 = sext i32 %2568 to i64
  %2570 = mul nsw i64 %2569, 520
  %2571 = add i64 %2570, %2565
  %2572 = inttoptr i64 %120 to i32*
  %2573 = load i32, i32* %2572
  %2574 = sext i32 %2573 to i64
  %2575 = mul nsw i64 %2574, 40
  %2576 = add i64 %2575, %2571
  %2577 = add i64 %2576, 24
  %2578 = inttoptr i64 %2577 to double*
  %2579 = load double, double* %2578
  %2580 = inttoptr i64 %126 to double*
  %2581 = load double, double* %2580
  %2582 = fmul double %2579, %2581
  %2583 = fmul double %2582, %2559
  %2584 = sext i32 %2567 to i64
  %2585 = mul nsw i64 %2584, 2600
  %2586 = add i64 %2585, %2538
  %2587 = mul nsw i64 %2574, 200
  %2588 = add i64 %2587, %2586
  %2589 = add i64 %2588, 104
  %2590 = inttoptr i64 %2589 to double*
  store double %2583, double* %2590
  %2591 = load double, double* bitcast (%dt_type* @dt to double*)
  %2592 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2593 = fmul double %2591, %2592
  %2594 = inttoptr i64 %125 to i32*
  %2595 = load i32, i32* %2594
  %2596 = sext i32 %2595 to i64
  %2597 = mul nsw i64 %2596, 6760
  %2598 = add i64 %2597, %2564
  %2599 = inttoptr i64 %119 to i32*
  %2600 = load i32, i32* %2599
  %2601 = add i32 %2600, 1
  %2602 = sext i32 %2601 to i64
  %2603 = mul nsw i64 %2602, 520
  %2604 = add i64 %2603, %2598
  %2605 = inttoptr i64 %120 to i32*
  %2606 = load i32, i32* %2605
  %2607 = sext i32 %2606 to i64
  %2608 = mul nsw i64 %2607, 40
  %2609 = add i64 %2608, %2604
  %2610 = add i64 %2609, 16
  %2611 = inttoptr i64 %2610 to double*
  %2612 = load double, double* %2611
  %2613 = inttoptr i64 %126 to double*
  %2614 = load double, double* %2613
  %2615 = fmul double %2612, %2614
  %2616 = fmul double %2615, %2593
  %2617 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2618 = fmul double %2591, %2617
  %2619 = inttoptr i64 %123 to double*
  %2620 = load double, double* %2619
  %2621 = fmul double %2620, %2614
  %2622 = fmul double %2621, %2618
  %2623 = fsub double %2616, %2622
  %2624 = load double, double* bitcast (%dy4_type* @dy4 to double*)
  %2625 = fmul double %2618, %2624
  %2626 = fsub double %2623, %2625
  %2627 = sext i32 %2600 to i64
  %2628 = mul nsw i64 %2627, 2600
  %2629 = load i64, i64* %14, align 8
  %2630 = add i64 %2628, %2629
  %2631 = mul nsw i64 %2607, 200
  %2632 = add i64 %2631, %2630
  %2633 = add i64 %2632, 144
  %2634 = inttoptr i64 %2633 to double*
  store double %2626, double* %2634
  %2635 = inttoptr i64 %119 to i32*
  %2636 = load i32, i32* %2635
  %2637 = sext i32 %2636 to i64
  %2638 = mul nsw i64 %2637, 2600
  %2639 = add i64 %2638, %2629
  %2640 = inttoptr i64 %120 to i32*
  %2641 = load i32, i32* %2640
  %2642 = sext i32 %2641 to i64
  %2643 = mul nsw i64 %2642, 200
  %2644 = add i64 %2643, %2639
  %2645 = add i64 %2644, 184
  %2646 = load double, double* %121, align 1
  %2647 = inttoptr i64 %2645 to double*
  store double %2646, double* %2647
  %2648 = load double, double* bitcast (%dt_type* @dt to double*)
  %2649 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2650 = fmul double %2648, %2649
  store double %2650, double* %86, align 1, !tbaa !1264
  store i64 0, i64* %87, align 1, !tbaa !1264
  %2651 = inttoptr i64 %125 to i32*
  %2652 = load i32, i32* %2651
  %2653 = sext i32 %2652 to i64
  %2654 = mul nsw i64 %2653, 1352
  %2655 = load i64, i64* %9, align 8
  %2656 = add i64 %2654, %2655
  %2657 = inttoptr i64 %119 to i32*
  %2658 = load i32, i32* %2657
  %2659 = add i32 %2658, 1
  %2660 = sext i32 %2659 to i64
  %2661 = mul nsw i64 %2660, 104
  %2662 = add i64 %2661, %2656
  %2663 = inttoptr i64 %120 to i32*
  %2664 = load i32, i32* %2663
  %2665 = sext i32 %2664 to i64
  %2666 = load <2 x i32>, <2 x i32>* %138, align 1
  %2667 = extractelement <2 x i32> %2666, i32 0
  store i32 %2667, i32* %139, align 1, !tbaa !1292
  %2668 = extractelement <2 x i32> %2666, i32 1
  store i32 %2668, i32* %141, align 1, !tbaa !1292
  %2669 = shl nsw i64 %2665, 3
  %2670 = add i64 %2669, %2662
  %2671 = load double, double* %90, align 1
  %2672 = inttoptr i64 %2670 to double*
  %2673 = load double, double* %2672
  %2674 = fmul double %2671, %2673
  %2675 = mul nsw i64 %2653, 6760
  %2676 = load i64, i64* %8, align 8
  %2677 = add i64 %2675, %2676
  %2678 = mul nsw i64 %2660, 520
  %2679 = add i64 %2678, %2677
  %2680 = mul nsw i64 %2665, 40
  %2681 = add i64 %2680, %2679
  %2682 = load <2 x i32>, <2 x i32>* %145, align 1
  %2683 = extractelement <2 x i32> %2682, i32 0
  store i32 %2683, i32* %100, align 1, !tbaa !1292
  %2684 = extractelement <2 x i32> %2682, i32 1
  store i32 %2684, i32* %102, align 1, !tbaa !1292
  %2685 = add i64 %2681, 32
  %2686 = load double, double* %94, align 1
  %2687 = inttoptr i64 %2685 to double*
  %2688 = load double, double* %2687
  %2689 = fmul double %2686, %2688
  %2690 = fsub double %2674, %2689
  %2691 = add i64 %2681, 16
  %2692 = inttoptr i64 %2691 to double*
  %2693 = load double, double* %2692
  %2694 = inttoptr i64 %124 to double*
  %2695 = load double, double* %2694
  %2696 = fmul double %2693, %2695
  %2697 = fmul double %2696, %2690
  %2698 = load double, double* %86, align 1
  %2699 = fmul double %2697, %2698
  store double %2699, double* %86, align 1, !tbaa !1264
  %2700 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2701 = fmul double %2648, %2700
  store double %2701, double* %90, align 1, !tbaa !1264
  %2702 = inttoptr i64 %123 to double*
  %2703 = load double, double* %2702
  %2704 = inttoptr i64 %129 to double*
  %2705 = load double, double* %2704
  %2706 = fsub double %2703, %2705
  %2707 = bitcast double %2706 to i64
  %2708 = load i64, i64* %10, align 8
  %2709 = xor i64 %2708, %2707
  %2710 = bitcast i64 %2709 to double
  %2711 = inttoptr i64 %132 to double*
  %2712 = load double, double* %2711
  %2713 = fmul double %2710, %2712
  %2714 = add i64 %2681, 8
  %2715 = inttoptr i64 %2714 to double*
  %2716 = load double, double* %2715
  %2717 = load i64, i64* %8, align 8
  %2718 = add i64 %2675, %2717
  %2719 = add i64 %2678, %2718
  %2720 = add i64 %2680, %2719
  %2721 = add i64 %2720, 8
  %2722 = inttoptr i64 %2721 to double*
  %2723 = load double, double* %2722
  %2724 = fmul double %2716, %2723
  %2725 = fmul double %2713, %2724
  %2726 = inttoptr i64 %122 to double*
  %2727 = load double, double* %2726
  %2728 = fmul double %2727, %2703
  %2729 = fsub double %2728, %2705
  %2730 = fmul double %2729, %2712
  %2731 = add i64 %2720, 16
  %2732 = inttoptr i64 %2731 to double*
  %2733 = load double, double* %2732
  %2734 = fmul double %2733, %2733
  %2735 = fmul double %2730, %2734
  %2736 = fsub double %2725, %2735
  %2737 = fmul double %2706, %2712
  %2738 = add i64 %2720, 24
  %2739 = inttoptr i64 %2738 to double*
  %2740 = load double, double* %2739
  %2741 = fmul double %2740, %2740
  store double %2741, double* %109, align 1, !tbaa !1264
  store i64 0, i64* %110, align 1, !tbaa !1264
  %2742 = fmul double %2737, %2741
  %2743 = fsub double %2736, %2742
  %2744 = fmul double %2705, %2695
  %2745 = load i64, i64* %8, align 8
  %2746 = add i64 %2675, %2745
  %2747 = add i64 %2678, %2746
  %2748 = add i64 %2680, %2747
  %2749 = add i64 %2748, 32
  %2750 = inttoptr i64 %2749 to double*
  %2751 = load double, double* %2750
  %2752 = fmul double %2744, %2751
  store double %2752, double* %107, align 1, !tbaa !1264
  store i64 0, i64* %108, align 1, !tbaa !1264
  %2753 = fsub double %2743, %2752
  %2754 = load double, double* %90, align 1
  %2755 = fmul double %2754, %2753
  %2756 = load double, double* %86, align 1
  %2757 = fsub double %2756, %2755
  %2758 = sext i32 %2658 to i64
  %2759 = mul nsw i64 %2758, 2600
  %2760 = load i64, i64* %14, align 8
  %2761 = add i64 %2759, %2760
  %2762 = mul nsw i64 %2665, 200
  %2763 = add i64 %2762, %2761
  %2764 = add i64 %2763, 32
  %2765 = inttoptr i64 %2764 to double*
  store double %2757, double* %2765
  %2766 = load double, double* bitcast (%dt_type* @dt to double*)
  %2767 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2768 = fmul double %2766, %2767
  %2769 = inttoptr i64 %125 to i32*
  %2770 = load i32, i32* %2769
  %2771 = sext i32 %2770 to i64
  %2772 = mul nsw i64 %2771, 6760
  %2773 = add i64 %2772, %2745
  %2774 = inttoptr i64 %119 to i32*
  %2775 = load i32, i32* %2774
  %2776 = add i32 %2775, 1
  %2777 = sext i32 %2776 to i64
  %2778 = mul nsw i64 %2777, 520
  %2779 = add i64 %2778, %2773
  %2780 = inttoptr i64 %120 to i32*
  %2781 = load i32, i32* %2780
  %2782 = sext i32 %2781 to i64
  %2783 = mul nsw i64 %2782, 40
  %2784 = add i64 %2783, %2779
  %2785 = add i64 %2784, 8
  %2786 = inttoptr i64 %2785 to double*
  %2787 = load double, double* %2786
  %2788 = add i64 %2784, 16
  %2789 = inttoptr i64 %2788 to double*
  %2790 = load double, double* %2789
  %2791 = fmul double %2787, %2790
  %2792 = load <2 x i32>, <2 x i32>* %136, align 1
  %2793 = extractelement <2 x i32> %2792, i32 0
  store i32 %2793, i32* %100, align 1, !tbaa !1292
  %2794 = extractelement <2 x i32> %2792, i32 1
  store i32 %2794, i32* %102, align 1, !tbaa !1292
  %2795 = load double, double* %94, align 1
  %2796 = fmul double %2795, %2791
  %2797 = inttoptr i64 %124 to double*
  %2798 = load double, double* %2797
  %2799 = fmul double %2796, %2798
  %2800 = fmul double %2768, %2799
  %2801 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2802 = fmul double %2766, %2801
  %2803 = inttoptr i64 %123 to double*
  %2804 = load double, double* %2803
  %2805 = inttoptr i64 %129 to double*
  %2806 = load double, double* %2805
  %2807 = fsub double %2804, %2806
  %2808 = fmul double %2807, %2802
  %2809 = fmul double %2808, %2798
  %2810 = load i64, i64* %8, align 8
  %2811 = add i64 %2772, %2810
  %2812 = add i64 %2778, %2811
  %2813 = add i64 %2783, %2812
  %2814 = add i64 %2813, 8
  %2815 = inttoptr i64 %2814 to double*
  %2816 = load double, double* %2815
  %2817 = fmul double %2809, %2816
  %2818 = fsub double %2800, %2817
  %2819 = sext i32 %2775 to i64
  %2820 = mul nsw i64 %2819, 2600
  %2821 = load i64, i64* %14, align 8
  %2822 = add i64 %2820, %2821
  %2823 = mul nsw i64 %2782, 200
  %2824 = add i64 %2823, %2822
  %2825 = add i64 %2824, 72
  %2826 = inttoptr i64 %2825 to double*
  store double %2818, double* %2826
  %2827 = load double, double* bitcast (%dt_type* @dt to double*)
  %2828 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2829 = fmul double %2827, %2828
  store double %2829, double* %86, align 1, !tbaa !1264
  %2830 = inttoptr i64 %125 to i32*
  %2831 = load i32, i32* %2830
  %2832 = sext i32 %2831 to i64
  %2833 = mul nsw i64 %2832, 6760
  %2834 = add i64 %2833, %2810
  %2835 = inttoptr i64 %119 to i32*
  %2836 = load i32, i32* %2835
  %2837 = add i32 %2836, 1
  %2838 = sext i32 %2837 to i64
  %2839 = mul nsw i64 %2838, 520
  %2840 = add i64 %2839, %2834
  %2841 = inttoptr i64 %120 to i32*
  %2842 = load i32, i32* %2841
  %2843 = sext i32 %2842 to i64
  %2844 = mul nsw i64 %2843, 40
  %2845 = add i64 %2844, %2840
  %2846 = add i64 %2845, 32
  %2847 = inttoptr i64 %2846 to double*
  %2848 = load double, double* %2847
  %2849 = inttoptr i64 %126 to double*
  %2850 = load double, double* %2849
  %2851 = fmul double %2848, %2850
  %2852 = load <2 x i32>, <2 x i32>* %145, align 1
  %2853 = extractelement <2 x i32> %2852, i32 0
  store i32 %2853, i32* %100, align 1, !tbaa !1292
  %2854 = extractelement <2 x i32> %2852, i32 1
  store i32 %2854, i32* %102, align 1, !tbaa !1292
  %2855 = load double, double* %94, align 1
  %2856 = fmul double %2855, %2851
  %2857 = mul nsw i64 %2832, 1352
  %2858 = load i64, i64* %9, align 8
  %2859 = add i64 %2857, %2858
  %2860 = mul nsw i64 %2838, 104
  %2861 = add i64 %2860, %2859
  %2862 = shl nsw i64 %2843, 3
  %2863 = add i64 %2862, %2861
  %2864 = inttoptr i64 %2863 to double*
  %2865 = load double, double* %2864
  %2866 = fmul double %2865, %2850
  %2867 = load i64, i64* %8, align 8
  %2868 = add i64 %2833, %2867
  %2869 = add i64 %2839, %2868
  %2870 = add i64 %2844, %2869
  %2871 = add i64 %2870, 16
  %2872 = inttoptr i64 %2871 to double*
  %2873 = load double, double* %2872
  %2874 = fmul double %2873, %2873
  %2875 = inttoptr i64 %124 to double*
  %2876 = load double, double* %2875
  %2877 = fmul double %2874, %2876
  %2878 = fadd double %2866, %2877
  %2879 = load <2 x i32>, <2 x i32>* %133, align 1
  %2880 = load <2 x i32>, <2 x i32>* %134, align 1
  %2881 = extractelement <2 x i32> %2879, i32 0
  store i32 %2881, i32* %112, align 1, !tbaa !1292
  %2882 = extractelement <2 x i32> %2879, i32 1
  store i32 %2882, i32* %114, align 1, !tbaa !1292
  %2883 = extractelement <2 x i32> %2880, i32 0
  store i32 %2883, i32* %115, align 1, !tbaa !1292
  %2884 = extractelement <2 x i32> %2880, i32 1
  store i32 %2884, i32* %117, align 1, !tbaa !1292
  %2885 = load double, double* %107, align 1
  %2886 = fmul double %2885, %2878
  store double %2886, double* %107, align 1, !tbaa !1264
  %2887 = fsub double %2856, %2886
  %2888 = load double, double* %86, align 1
  %2889 = fmul double %2888, %2887
  %2890 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2891 = fmul double %2827, %2890
  %2892 = inttoptr i64 %122 to double*
  %2893 = load double, double* %2892
  %2894 = inttoptr i64 %123 to double*
  %2895 = load double, double* %2894
  %2896 = fmul double %2893, %2895
  %2897 = inttoptr i64 %129 to double*
  %2898 = load double, double* %2897
  %2899 = fsub double %2896, %2898
  %2900 = fmul double %2891, %2899
  %2901 = fmul double %2900, %2876
  %2902 = fmul double %2901, %2873
  %2903 = fsub double %2889, %2902
  %2904 = sext i32 %2836 to i64
  %2905 = mul nsw i64 %2904, 2600
  %2906 = load i64, i64* %14, align 8
  %2907 = add i64 %2905, %2906
  %2908 = mul nsw i64 %2843, 200
  %2909 = add i64 %2908, %2907
  %2910 = add i64 %2909, 112
  %2911 = inttoptr i64 %2910 to double*
  store double %2903, double* %2911
  %2912 = load double, double* bitcast (%dt_type* @dt to double*)
  %2913 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2914 = fmul double %2912, %2913
  %2915 = inttoptr i64 %125 to i32*
  %2916 = load i32, i32* %2915
  %2917 = sext i32 %2916 to i64
  %2918 = mul nsw i64 %2917, 6760
  %2919 = load i64, i64* %8, align 8
  %2920 = add i64 %2918, %2919
  %2921 = inttoptr i64 %119 to i32*
  %2922 = load i32, i32* %2921
  %2923 = add i32 %2922, 1
  %2924 = sext i32 %2923 to i64
  %2925 = mul nsw i64 %2924, 520
  %2926 = add i64 %2925, %2920
  %2927 = inttoptr i64 %120 to i32*
  %2928 = load i32, i32* %2927
  %2929 = sext i32 %2928 to i64
  %2930 = mul nsw i64 %2929, 40
  %2931 = add i64 %2930, %2926
  %2932 = add i64 %2931, 16
  %2933 = inttoptr i64 %2932 to double*
  %2934 = load double, double* %2933
  %2935 = add i64 %2931, 24
  %2936 = inttoptr i64 %2935 to double*
  %2937 = load double, double* %2936
  %2938 = fmul double %2934, %2937
  %2939 = load <2 x i32>, <2 x i32>* %136, align 1
  %2940 = extractelement <2 x i32> %2939, i32 0
  store i32 %2940, i32* %100, align 1, !tbaa !1292
  %2941 = extractelement <2 x i32> %2939, i32 1
  store i32 %2941, i32* %102, align 1, !tbaa !1292
  %2942 = load double, double* %94, align 1
  %2943 = fmul double %2942, %2938
  %2944 = inttoptr i64 %124 to double*
  %2945 = load double, double* %2944
  %2946 = fmul double %2943, %2945
  %2947 = fmul double %2914, %2946
  %2948 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %2949 = fmul double %2912, %2948
  %2950 = inttoptr i64 %123 to double*
  %2951 = load double, double* %2950
  %2952 = inttoptr i64 %129 to double*
  %2953 = load double, double* %2952
  %2954 = fsub double %2951, %2953
  %2955 = fmul double %2954, %2949
  %2956 = fmul double %2955, %2945
  %2957 = fmul double %2956, %2937
  %2958 = fsub double %2947, %2957
  %2959 = sext i32 %2922 to i64
  %2960 = mul nsw i64 %2959, 2600
  %2961 = load i64, i64* %14, align 8
  %2962 = add i64 %2960, %2961
  %2963 = mul nsw i64 %2929, 200
  %2964 = add i64 %2963, %2962
  %2965 = add i64 %2964, 152
  %2966 = inttoptr i64 %2965 to double*
  store double %2958, double* %2966
  %2967 = load double, double* bitcast (%dt_type* @dt to double*)
  %2968 = load double, double* bitcast (%ty2_type* @ty2 to double*)
  %2969 = fmul double %2967, %2968
  %2970 = inttoptr i64 %125 to i32*
  %2971 = load i32, i32* %2970
  %2972 = sext i32 %2971 to i64
  %2973 = mul nsw i64 %2972, 6760
  %2974 = load i64, i64* %8, align 8
  %2975 = add i64 %2973, %2974
  %2976 = inttoptr i64 %119 to i32*
  %2977 = load i32, i32* %2976
  %2978 = add i32 %2977, 1
  %2979 = sext i32 %2978 to i64
  %2980 = mul nsw i64 %2979, 520
  %2981 = add i64 %2980, %2975
  %2982 = inttoptr i64 %120 to i32*
  %2983 = load i32, i32* %2982
  %2984 = sext i32 %2983 to i64
  %2985 = mul nsw i64 %2984, 40
  %2986 = add i64 %2985, %2981
  store i64 %2986, i64* %16, align 8, !tbaa !1240
  %2987 = add i64 %2986, 16
  %2988 = inttoptr i64 %2987 to double*
  %2989 = load double, double* %2988
  %2990 = inttoptr i64 %126 to double*
  %2991 = load double, double* %2990
  %2992 = fmul double %2989, %2991
  %2993 = load <2 x i32>, <2 x i32>* %145, align 1
  %2994 = load <2 x i32>, <2 x i32>* %146, align 1
  %2995 = extractelement <2 x i32> %2993, i32 0
  store i32 %2995, i32* %100, align 1, !tbaa !1292
  %2996 = extractelement <2 x i32> %2993, i32 1
  store i32 %2996, i32* %102, align 1, !tbaa !1292
  %2997 = extractelement <2 x i32> %2994, i32 0
  store i32 %2997, i32* %103, align 1, !tbaa !1292
  %2998 = extractelement <2 x i32> %2994, i32 1
  store i32 %2998, i32* %105, align 1, !tbaa !1292
  %2999 = load double, double* %94, align 1
  %3000 = fmul double %2999, %2992
  store double %3000, double* %94, align 1, !tbaa !1264
  %3001 = fmul double %2969, %3000
  %3002 = load double, double* bitcast (%ty1_type* @ty1 to double*)
  %3003 = fmul double %2967, %3002
  %3004 = inttoptr i64 %129 to double*
  %3005 = load double, double* %3004
  %3006 = fmul double %3003, %3005
  %3007 = fmul double %3006, %2991
  %3008 = fsub double %3001, %3007
  %3009 = load double, double* bitcast (%dy5_type* @dy5 to double*)
  %3010 = fmul double %3003, %3009
  store double %3010, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %3011 = fsub double %3008, %3010
  %3012 = sext i32 %2977 to i64
  %3013 = mul nsw i64 %3012, 2600
  %3014 = add i64 %3013, %2961
  %3015 = mul nsw i64 %2984, 200
  store i64 %3015, i64* %15, align 8, !tbaa !1240
  %3016 = add i64 %3015, %3014
  %3017 = add i64 %3016, 192
  %3018 = inttoptr i64 %3017 to double*
  store double %3011, double* %3018
  %3019 = inttoptr i64 %125 to i32*
  %3020 = load i32, i32* %3019
  %3021 = add i32 %3020, 1
  %3022 = sext i32 %3021 to i64
  %3023 = mul nsw i64 %3022, 1352
  %3024 = load i64, i64* %11, align 8
  %3025 = add i64 %3023, %3024
  %3026 = inttoptr i64 %119 to i32*
  %3027 = load i32, i32* %3026
  %3028 = sext i32 %3027 to i64
  %3029 = mul nsw i64 %3028, 104
  %3030 = add i64 %3029, %3025
  %3031 = inttoptr i64 %120 to i32*
  %3032 = load i32, i32* %3031
  %3033 = sext i32 %3032 to i64
  %3034 = shl nsw i64 %3033, 3
  %3035 = add i64 %3034, %3030
  %3036 = inttoptr i64 %3035 to double*
  %3037 = load double, double* %3036
  %3038 = inttoptr i64 %126 to double*
  store double %3037, double* %3038
  %3039 = inttoptr i64 %126 to double*
  %3040 = load double, double* %3039
  %3041 = fmul double %3040, %3040
  %3042 = inttoptr i64 %124 to double*
  store double %3041, double* %3042
  %3043 = inttoptr i64 %126 to double*
  %3044 = load double, double* %3043
  %3045 = inttoptr i64 %124 to double*
  %3046 = load double, double* %3045
  %3047 = fmul double %3044, %3046
  %3048 = inttoptr i64 %132 to double*
  store double %3047, double* %3048
  %3049 = load double, double* bitcast (%dt_type* @dt to double*)
  %3050 = bitcast double %3049 to i64
  %3051 = load i64, i64* %10, align 8
  %3052 = xor i64 %3051, %3050
  %3053 = bitcast i64 %3052 to double
  %3054 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3055 = fmul double %3053, %3054
  %3056 = load double, double* bitcast (%dz1_type* @dz1 to double*)
  %3057 = fmul double %3055, %3056
  %3058 = inttoptr i64 %119 to i32*
  %3059 = load i32, i32* %3058
  %3060 = sext i32 %3059 to i64
  %3061 = mul nsw i64 %3060, 2600
  %3062 = add i64 %3061, ptrtoint (%c_type* @c to i64)
  %3063 = inttoptr i64 %120 to i32*
  %3064 = load i32, i32* %3063
  %3065 = sext i32 %3064 to i64
  %3066 = mul nsw i64 %3065, 200
  %3067 = add i64 %3066, %3062
  %3068 = inttoptr i64 %3067 to double*
  store double %3057, double* %3068
  %3069 = inttoptr i64 %119 to i32*
  %3070 = load i32, i32* %3069
  %3071 = sext i32 %3070 to i64
  %3072 = mul nsw i64 %3071, 2600
  %3073 = add i64 %3072, ptrtoint (%c_type* @c to i64)
  %3074 = inttoptr i64 %120 to i32*
  %3075 = load i32, i32* %3074
  %3076 = sext i32 %3075 to i64
  %3077 = mul nsw i64 %3076, 200
  %3078 = add i64 %3077, %3073
  %3079 = add i64 %3078, 40
  %3080 = load double, double* %121, align 1
  %3081 = inttoptr i64 %3079 to double*
  store double %3080, double* %3081
  %3082 = inttoptr i64 %119 to i32*
  %3083 = load i32, i32* %3082
  %3084 = sext i32 %3083 to i64
  %3085 = mul nsw i64 %3084, 2600
  %3086 = add i64 %3085, ptrtoint (%c_type* @c to i64)
  %3087 = inttoptr i64 %120 to i32*
  %3088 = load i32, i32* %3087
  %3089 = sext i32 %3088 to i64
  %3090 = mul nsw i64 %3089, 200
  %3091 = add i64 %3090, %3086
  %3092 = add i64 %3091, 80
  %3093 = inttoptr i64 %3092 to double*
  store double %3080, double* %3093
  %3094 = load double, double* bitcast (%dt_type* @dt to double*)
  %3095 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3096 = fmul double %3094, %3095
  %3097 = inttoptr i64 %119 to i32*
  %3098 = load i32, i32* %3097
  %3099 = sext i32 %3098 to i64
  %3100 = mul nsw i64 %3099, 2600
  %3101 = add i64 %3100, ptrtoint (%c_type* @c to i64)
  %3102 = inttoptr i64 %120 to i32*
  %3103 = load i32, i32* %3102
  %3104 = sext i32 %3103 to i64
  %3105 = mul nsw i64 %3104, 200
  %3106 = add i64 %3105, %3101
  %3107 = add i64 %3106, 120
  %3108 = inttoptr i64 %3107 to double*
  store double %3096, double* %3108
  %3109 = inttoptr i64 %119 to i32*
  %3110 = load i32, i32* %3109
  %3111 = sext i32 %3110 to i64
  %3112 = mul nsw i64 %3111, 2600
  %3113 = add i64 %3112, ptrtoint (%c_type* @c to i64)
  %3114 = inttoptr i64 %120 to i32*
  %3115 = load i32, i32* %3114
  %3116 = sext i32 %3115 to i64
  %3117 = mul nsw i64 %3116, 200
  %3118 = add i64 %3117, %3113
  %3119 = add i64 %3118, 160
  %3120 = inttoptr i64 %3119 to double*
  store double %3080, double* %3120
  %3121 = load double, double* bitcast (%dt_type* @dt to double*)
  %3122 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3123 = fmul double %3121, %3122
  %3124 = inttoptr i64 %125 to i32*
  %3125 = load i32, i32* %3124
  %3126 = add i32 %3125, 1
  %3127 = sext i32 %3126 to i64
  %3128 = mul nsw i64 %3127, 6760
  %3129 = load i64, i64* %8, align 8
  %3130 = add i64 %3128, %3129
  %3131 = inttoptr i64 %119 to i32*
  %3132 = load i32, i32* %3131
  %3133 = sext i32 %3132 to i64
  %3134 = mul nsw i64 %3133, 520
  %3135 = add i64 %3134, %3130
  %3136 = inttoptr i64 %120 to i32*
  %3137 = load i32, i32* %3136
  %3138 = sext i32 %3137 to i64
  %3139 = mul nsw i64 %3138, 40
  %3140 = add i64 %3139, %3135
  %3141 = add i64 %3140, 8
  %3142 = inttoptr i64 %3141 to double*
  %3143 = load double, double* %3142
  %3144 = add i64 %3140, 24
  %3145 = inttoptr i64 %3144 to double*
  %3146 = load double, double* %3145
  %3147 = fmul double %3143, %3146
  %3148 = bitcast double %3147 to i64
  %3149 = load i64, i64* %10, align 8
  %3150 = xor i64 %3149, %3148
  %3151 = bitcast i64 %3150 to double
  %3152 = inttoptr i64 %124 to double*
  %3153 = load double, double* %3152
  %3154 = fmul double %3151, %3153
  %3155 = fmul double %3154, %3123
  %3156 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3157 = fmul double %3121, %3156
  %3158 = inttoptr i64 %123 to double*
  %3159 = load double, double* %3158
  %3160 = bitcast double %3159 to i64
  %3161 = xor i64 %3149, %3160
  %3162 = bitcast i64 %3161 to double
  %3163 = fmul double %3162, %3153
  %3164 = fmul double %3163, %3143
  store double %3164, double* %94, align 1, !tbaa !1264
  store i64 0, i64* %95, align 1, !tbaa !1264
  %3165 = fmul double %3157, %3164
  %3166 = fsub double %3155, %3165
  %3167 = mul nsw i64 %3133, 2600
  %3168 = add i64 %3167, ptrtoint (%c_type* @c to i64)
  %3169 = mul nsw i64 %3138, 200
  %3170 = add i64 %3169, %3168
  %3171 = add i64 %3170, 8
  %3172 = inttoptr i64 %3171 to double*
  store double %3166, double* %3172
  %3173 = load double, double* bitcast (%dt_type* @dt to double*)
  %3174 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3175 = fmul double %3173, %3174
  %3176 = inttoptr i64 %125 to i32*
  %3177 = load i32, i32* %3176
  %3178 = add i32 %3177, 1
  %3179 = sext i32 %3178 to i64
  %3180 = mul nsw i64 %3179, 6760
  %3181 = load i64, i64* %8, align 8
  %3182 = add i64 %3180, %3181
  %3183 = inttoptr i64 %119 to i32*
  %3184 = load i32, i32* %3183
  %3185 = sext i32 %3184 to i64
  %3186 = mul nsw i64 %3185, 520
  %3187 = add i64 %3186, %3182
  %3188 = inttoptr i64 %120 to i32*
  %3189 = load i32, i32* %3188
  %3190 = sext i32 %3189 to i64
  %3191 = mul nsw i64 %3190, 40
  %3192 = add i64 %3191, %3187
  %3193 = add i64 %3192, 24
  %3194 = inttoptr i64 %3193 to double*
  %3195 = load double, double* %3194
  %3196 = inttoptr i64 %126 to double*
  %3197 = load double, double* %3196
  %3198 = fmul double %3195, %3197
  %3199 = fmul double %3198, %3175
  %3200 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3201 = fmul double %3173, %3200
  %3202 = inttoptr i64 %123 to double*
  %3203 = load double, double* %3202
  %3204 = fmul double %3201, %3203
  %3205 = fmul double %3204, %3197
  %3206 = fsub double %3199, %3205
  %3207 = load double, double* bitcast (%dz2_type* @dz2 to double*)
  %3208 = fmul double %3201, %3207
  %3209 = fsub double %3206, %3208
  %3210 = mul nsw i64 %3185, 2600
  %3211 = add i64 %3210, ptrtoint (%c_type* @c to i64)
  %3212 = mul nsw i64 %3190, 200
  %3213 = add i64 %3212, %3211
  %3214 = add i64 %3213, 48
  %3215 = inttoptr i64 %3214 to double*
  store double %3209, double* %3215
  %3216 = inttoptr i64 %119 to i32*
  %3217 = load i32, i32* %3216
  %3218 = sext i32 %3217 to i64
  %3219 = mul nsw i64 %3218, 2600
  %3220 = add i64 %3219, ptrtoint (%c_type* @c to i64)
  %3221 = inttoptr i64 %120 to i32*
  %3222 = load i32, i32* %3221
  %3223 = sext i32 %3222 to i64
  %3224 = mul nsw i64 %3223, 200
  %3225 = add i64 %3224, %3220
  %3226 = add i64 %3225, 88
  %3227 = load double, double* %121, align 1
  %3228 = inttoptr i64 %3226 to double*
  store double %3227, double* %3228
  %3229 = load double, double* bitcast (%dt_type* @dt to double*)
  %3230 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3231 = fmul double %3229, %3230
  %3232 = inttoptr i64 %125 to i32*
  %3233 = load i32, i32* %3232
  %3234 = add i32 %3233, 1
  %3235 = sext i32 %3234 to i64
  %3236 = mul nsw i64 %3235, 6760
  %3237 = add i64 %3236, %3181
  %3238 = inttoptr i64 %119 to i32*
  %3239 = load i32, i32* %3238
  %3240 = sext i32 %3239 to i64
  %3241 = mul nsw i64 %3240, 520
  %3242 = add i64 %3241, %3237
  %3243 = inttoptr i64 %120 to i32*
  %3244 = load i32, i32* %3243
  %3245 = sext i32 %3244 to i64
  %3246 = mul nsw i64 %3245, 40
  %3247 = add i64 %3246, %3242
  %3248 = add i64 %3247, 8
  %3249 = inttoptr i64 %3248 to double*
  %3250 = load double, double* %3249
  %3251 = inttoptr i64 %126 to double*
  %3252 = load double, double* %3251
  %3253 = fmul double %3250, %3252
  %3254 = fmul double %3253, %3231
  %3255 = mul nsw i64 %3240, 2600
  %3256 = add i64 %3255, ptrtoint (%c_type* @c to i64)
  %3257 = mul nsw i64 %3245, 200
  %3258 = add i64 %3257, %3256
  %3259 = add i64 %3258, 128
  %3260 = inttoptr i64 %3259 to double*
  store double %3254, double* %3260
  %3261 = inttoptr i64 %119 to i32*
  %3262 = load i32, i32* %3261
  %3263 = sext i32 %3262 to i64
  %3264 = mul nsw i64 %3263, 2600
  %3265 = add i64 %3264, ptrtoint (%c_type* @c to i64)
  %3266 = inttoptr i64 %120 to i32*
  %3267 = load i32, i32* %3266
  %3268 = sext i32 %3267 to i64
  %3269 = mul nsw i64 %3268, 200
  %3270 = add i64 %3269, %3265
  %3271 = add i64 %3270, 168
  %3272 = inttoptr i64 %3271 to double*
  store double %3227, double* %3272
  %3273 = load double, double* bitcast (%dt_type* @dt to double*)
  %3274 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3275 = fmul double %3273, %3274
  %3276 = inttoptr i64 %125 to i32*
  %3277 = load i32, i32* %3276
  %3278 = add i32 %3277, 1
  %3279 = sext i32 %3278 to i64
  %3280 = mul nsw i64 %3279, 6760
  %3281 = load i64, i64* %8, align 8
  %3282 = add i64 %3280, %3281
  %3283 = inttoptr i64 %119 to i32*
  %3284 = load i32, i32* %3283
  %3285 = sext i32 %3284 to i64
  %3286 = mul nsw i64 %3285, 520
  %3287 = add i64 %3286, %3282
  %3288 = inttoptr i64 %120 to i32*
  %3289 = load i32, i32* %3288
  %3290 = sext i32 %3289 to i64
  %3291 = mul nsw i64 %3290, 40
  %3292 = add i64 %3291, %3287
  %3293 = add i64 %3292, 16
  %3294 = inttoptr i64 %3293 to double*
  %3295 = load double, double* %3294
  %3296 = add i64 %3292, 24
  %3297 = inttoptr i64 %3296 to double*
  %3298 = load double, double* %3297
  %3299 = fmul double %3295, %3298
  %3300 = bitcast double %3299 to i64
  %3301 = load i64, i64* %10, align 8
  %3302 = xor i64 %3301, %3300
  %3303 = bitcast i64 %3302 to double
  %3304 = inttoptr i64 %124 to double*
  %3305 = load double, double* %3304
  %3306 = fmul double %3303, %3305
  %3307 = fmul double %3306, %3275
  %3308 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3309 = fmul double %3273, %3308
  %3310 = inttoptr i64 %123 to double*
  %3311 = load double, double* %3310
  %3312 = bitcast double %3311 to i64
  %3313 = xor i64 %3301, %3312
  %3314 = bitcast i64 %3313 to double
  %3315 = fmul double %3314, %3305
  %3316 = fmul double %3315, %3295
  %3317 = fmul double %3309, %3316
  %3318 = fsub double %3307, %3317
  %3319 = mul nsw i64 %3285, 2600
  %3320 = add i64 %3319, ptrtoint (%c_type* @c to i64)
  %3321 = mul nsw i64 %3290, 200
  %3322 = add i64 %3321, %3320
  %3323 = add i64 %3322, 16
  %3324 = inttoptr i64 %3323 to double*
  store double %3318, double* %3324
  %3325 = inttoptr i64 %119 to i32*
  %3326 = load i32, i32* %3325
  %3327 = sext i32 %3326 to i64
  %3328 = mul nsw i64 %3327, 2600
  %3329 = add i64 %3328, ptrtoint (%c_type* @c to i64)
  %3330 = inttoptr i64 %120 to i32*
  %3331 = load i32, i32* %3330
  %3332 = sext i32 %3331 to i64
  %3333 = mul nsw i64 %3332, 200
  %3334 = add i64 %3333, %3329
  %3335 = add i64 %3334, 56
  %3336 = load double, double* %121, align 1
  %3337 = inttoptr i64 %3335 to double*
  store double %3336, double* %3337
  %3338 = load double, double* bitcast (%dt_type* @dt to double*)
  %3339 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3340 = fmul double %3338, %3339
  %3341 = inttoptr i64 %125 to i32*
  %3342 = load i32, i32* %3341
  %3343 = add i32 %3342, 1
  %3344 = sext i32 %3343 to i64
  %3345 = mul nsw i64 %3344, 6760
  %3346 = load i64, i64* %8, align 8
  %3347 = add i64 %3345, %3346
  %3348 = inttoptr i64 %119 to i32*
  %3349 = load i32, i32* %3348
  %3350 = sext i32 %3349 to i64
  %3351 = mul nsw i64 %3350, 520
  %3352 = add i64 %3351, %3347
  %3353 = inttoptr i64 %120 to i32*
  %3354 = load i32, i32* %3353
  %3355 = sext i32 %3354 to i64
  %3356 = mul nsw i64 %3355, 40
  %3357 = add i64 %3356, %3352
  %3358 = add i64 %3357, 24
  %3359 = inttoptr i64 %3358 to double*
  %3360 = load double, double* %3359
  %3361 = inttoptr i64 %126 to double*
  %3362 = load double, double* %3361
  %3363 = fmul double %3360, %3362
  %3364 = fmul double %3363, %3340
  %3365 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3366 = fmul double %3338, %3365
  %3367 = inttoptr i64 %123 to double*
  %3368 = load double, double* %3367
  %3369 = fmul double %3368, %3362
  store double %3369, double* %94, align 1, !tbaa !1264
  store i64 0, i64* %95, align 1, !tbaa !1264
  %3370 = fmul double %3369, %3366
  %3371 = fsub double %3364, %3370
  %3372 = load double, double* bitcast (%dz3_type* @dz3 to double*)
  %3373 = fmul double %3366, %3372
  %3374 = fsub double %3371, %3373
  %3375 = mul nsw i64 %3350, 2600
  %3376 = add i64 %3375, ptrtoint (%c_type* @c to i64)
  %3377 = mul nsw i64 %3355, 200
  %3378 = add i64 %3377, %3376
  %3379 = add i64 %3378, 96
  %3380 = inttoptr i64 %3379 to double*
  store double %3374, double* %3380
  %3381 = load double, double* bitcast (%dt_type* @dt to double*)
  %3382 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3383 = fmul double %3381, %3382
  %3384 = inttoptr i64 %125 to i32*
  %3385 = load i32, i32* %3384
  %3386 = add i32 %3385, 1
  %3387 = sext i32 %3386 to i64
  %3388 = mul nsw i64 %3387, 6760
  %3389 = add i64 %3388, %3346
  %3390 = inttoptr i64 %119 to i32*
  %3391 = load i32, i32* %3390
  %3392 = sext i32 %3391 to i64
  %3393 = mul nsw i64 %3392, 520
  %3394 = add i64 %3393, %3389
  %3395 = inttoptr i64 %120 to i32*
  %3396 = load i32, i32* %3395
  %3397 = sext i32 %3396 to i64
  %3398 = mul nsw i64 %3397, 40
  %3399 = add i64 %3398, %3394
  %3400 = add i64 %3399, 16
  %3401 = inttoptr i64 %3400 to double*
  %3402 = load double, double* %3401
  %3403 = inttoptr i64 %126 to double*
  %3404 = load double, double* %3403
  %3405 = fmul double %3402, %3404
  %3406 = fmul double %3405, %3383
  %3407 = mul nsw i64 %3392, 2600
  %3408 = add i64 %3407, ptrtoint (%c_type* @c to i64)
  %3409 = mul nsw i64 %3397, 200
  %3410 = add i64 %3409, %3408
  %3411 = add i64 %3410, 136
  %3412 = inttoptr i64 %3411 to double*
  store double %3406, double* %3412
  %3413 = inttoptr i64 %119 to i32*
  %3414 = load i32, i32* %3413
  %3415 = sext i32 %3414 to i64
  %3416 = mul nsw i64 %3415, 2600
  %3417 = add i64 %3416, ptrtoint (%c_type* @c to i64)
  %3418 = inttoptr i64 %120 to i32*
  %3419 = load i32, i32* %3418
  %3420 = sext i32 %3419 to i64
  %3421 = mul nsw i64 %3420, 200
  %3422 = add i64 %3421, %3417
  %3423 = add i64 %3422, 176
  %3424 = load double, double* %121, align 1
  %3425 = inttoptr i64 %3423 to double*
  store double %3424, double* %3425
  %3426 = load double, double* bitcast (%dt_type* @dt to double*)
  %3427 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3428 = fmul double %3426, %3427
  store double %3428, double* %121, align 1, !tbaa !1264
  %3429 = inttoptr i64 %125 to i32*
  %3430 = load i32, i32* %3429
  %3431 = add i32 %3430, 1
  %3432 = sext i32 %3431 to i64
  %3433 = mul nsw i64 %3432, 6760
  %3434 = load i64, i64* %8, align 8
  %3435 = add i64 %3433, %3434
  %3436 = inttoptr i64 %119 to i32*
  %3437 = load i32, i32* %3436
  %3438 = sext i32 %3437 to i64
  %3439 = mul nsw i64 %3438, 520
  %3440 = add i64 %3439, %3435
  %3441 = inttoptr i64 %120 to i32*
  %3442 = load i32, i32* %3441
  %3443 = sext i32 %3442 to i64
  %3444 = mul nsw i64 %3443, 40
  %3445 = add i64 %3444, %3440
  %3446 = add i64 %3445, 24
  %3447 = inttoptr i64 %3446 to double*
  %3448 = load double, double* %3447
  %3449 = inttoptr i64 %126 to double*
  %3450 = load double, double* %3449
  %3451 = fmul double %3448, %3450
  %3452 = bitcast double %3451 to i64
  %3453 = load i64, i64* %10, align 8
  %3454 = xor i64 %3453, %3452
  %3455 = bitcast i64 %3454 to double
  %3456 = fmul double %3451, %3455
  %3457 = mul nsw i64 %3432, 1352
  %3458 = load i64, i64* %9, align 8
  %3459 = add i64 %3457, %3458
  %3460 = mul nsw i64 %3438, 104
  %3461 = add i64 %3460, %3459
  %3462 = shl nsw i64 %3443, 3
  %3463 = add i64 %3462, %3461
  %3464 = inttoptr i64 %3463 to double*
  %3465 = load double, double* %3464
  %3466 = fmul double %3465, %3450
  %3467 = load <2 x i32>, <2 x i32>* %133, align 1
  %3468 = load <2 x i32>, <2 x i32>* %134, align 1
  %3469 = extractelement <2 x i32> %3467, i32 0
  store i32 %3469, i32* %100, align 1, !tbaa !1292
  %3470 = extractelement <2 x i32> %3467, i32 1
  store i32 %3470, i32* %102, align 1, !tbaa !1292
  %3471 = extractelement <2 x i32> %3468, i32 0
  store i32 %3471, i32* %103, align 1, !tbaa !1292
  %3472 = extractelement <2 x i32> %3468, i32 1
  store i32 %3472, i32* %105, align 1, !tbaa !1292
  %3473 = load double, double* %94, align 1
  %3474 = fmul double %3473, %3466
  store double %3474, double* %94, align 1, !tbaa !1264
  %3475 = fadd double %3456, %3474
  %3476 = load double, double* %121, align 1
  %3477 = fmul double %3476, %3475
  %3478 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3479 = fmul double %3426, %3478
  %3480 = inttoptr i64 %122 to double*
  %3481 = load double, double* %3480
  %3482 = bitcast double %3481 to i64
  %3483 = xor i64 %3453, %3482
  %3484 = bitcast i64 %3483 to double
  %3485 = inttoptr i64 %123 to double*
  %3486 = load double, double* %3485
  %3487 = fmul double %3484, %3486
  %3488 = inttoptr i64 %124 to double*
  %3489 = load double, double* %3488
  %3490 = fmul double %3487, %3489
  %3491 = load i64, i64* %8, align 8
  %3492 = add i64 %3433, %3491
  %3493 = add i64 %3439, %3492
  %3494 = add i64 %3444, %3493
  %3495 = add i64 %3494, 24
  %3496 = inttoptr i64 %3495 to double*
  %3497 = load double, double* %3496
  %3498 = fmul double %3490, %3497
  %3499 = fmul double %3479, %3498
  %3500 = fsub double %3477, %3499
  %3501 = mul nsw i64 %3438, 2600
  %3502 = add i64 %3501, ptrtoint (%c_type* @c to i64)
  %3503 = mul nsw i64 %3443, 200
  %3504 = add i64 %3503, %3502
  %3505 = add i64 %3504, 24
  %3506 = inttoptr i64 %3505 to double*
  store double %3500, double* %3506
  %3507 = load double, double* bitcast (%dt_type* @dt to double*)
  %3508 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3509 = fmul double %3507, %3508
  %3510 = inttoptr i64 %125 to i32*
  %3511 = load i32, i32* %3510
  %3512 = add i32 %3511, 1
  %3513 = sext i32 %3512 to i64
  %3514 = mul nsw i64 %3513, 6760
  %3515 = add i64 %3514, %3491
  %3516 = inttoptr i64 %119 to i32*
  %3517 = load i32, i32* %3516
  %3518 = sext i32 %3517 to i64
  %3519 = mul nsw i64 %3518, 520
  %3520 = add i64 %3519, %3515
  %3521 = inttoptr i64 %120 to i32*
  %3522 = load i32, i32* %3521
  %3523 = sext i32 %3522 to i64
  %3524 = mul nsw i64 %3523, 40
  %3525 = add i64 %3524, %3520
  %3526 = add i64 %3525, 8
  %3527 = inttoptr i64 %3526 to double*
  %3528 = load double, double* %3527
  %3529 = inttoptr i64 %126 to double*
  %3530 = load double, double* %3529
  %3531 = fmul double %3528, %3530
  %3532 = load <2 x i32>, <2 x i32>* %136, align 1
  %3533 = load <2 x i32>, <2 x i32>* %137, align 1
  %3534 = extractelement <2 x i32> %3532, i32 0
  store i32 %3534, i32* %139, align 1, !tbaa !1292
  %3535 = extractelement <2 x i32> %3532, i32 1
  store i32 %3535, i32* %141, align 1, !tbaa !1292
  %3536 = extractelement <2 x i32> %3533, i32 0
  %3537 = extractelement <2 x i32> %3533, i32 1
  %3538 = load double, double* %90, align 1
  %3539 = fmul double %3538, %3531
  %3540 = fmul double %3509, %3539
  %3541 = mul nsw i64 %3518, 2600
  %3542 = add i64 %3541, ptrtoint (%c_type* @c to i64)
  %3543 = mul nsw i64 %3523, 200
  %3544 = add i64 %3543, %3542
  %3545 = add i64 %3544, 64
  %3546 = inttoptr i64 %3545 to double*
  store double %3540, double* %3546
  %3547 = load double, double* bitcast (%dt_type* @dt to double*)
  %3548 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3549 = fmul double %3547, %3548
  %3550 = inttoptr i64 %125 to i32*
  %3551 = load i32, i32* %3550
  %3552 = add i32 %3551, 1
  %3553 = sext i32 %3552 to i64
  %3554 = mul nsw i64 %3553, 6760
  %3555 = load i64, i64* %8, align 8
  %3556 = add i64 %3554, %3555
  %3557 = inttoptr i64 %119 to i32*
  %3558 = load i32, i32* %3557
  %3559 = sext i32 %3558 to i64
  %3560 = mul nsw i64 %3559, 520
  %3561 = add i64 %3560, %3556
  %3562 = inttoptr i64 %120 to i32*
  %3563 = load i32, i32* %3562
  %3564 = sext i32 %3563 to i64
  %3565 = mul nsw i64 %3564, 40
  %3566 = add i64 %3565, %3561
  %3567 = add i64 %3566, 16
  %3568 = inttoptr i64 %3567 to double*
  %3569 = load double, double* %3568
  %3570 = inttoptr i64 %126 to double*
  %3571 = load double, double* %3570
  %3572 = fmul double %3569, %3571
  store i32 %3534, i32* %139, align 1, !tbaa !1292
  store i32 %3535, i32* %141, align 1, !tbaa !1292
  store i32 %3536, i32* %142, align 1, !tbaa !1292
  store i32 %3537, i32* %144, align 1, !tbaa !1292
  %3573 = load double, double* %90, align 1
  %3574 = fmul double %3573, %3572
  store double %3574, double* %90, align 1, !tbaa !1264
  %3575 = fmul double %3549, %3574
  %3576 = mul nsw i64 %3559, 2600
  %3577 = add i64 %3576, ptrtoint (%c_type* @c to i64)
  %3578 = mul nsw i64 %3564, 200
  %3579 = add i64 %3578, %3577
  %3580 = add i64 %3579, 104
  %3581 = inttoptr i64 %3580 to double*
  store double %3575, double* %3581
  %3582 = load double, double* bitcast (%dt_type* @dt to double*)
  %3583 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3584 = fmul double %3582, %3583
  %3585 = load double, double* %75, align 1
  %3586 = fmul double %3584, %3585
  %3587 = inttoptr i64 %125 to i32*
  %3588 = load i32, i32* %3587
  %3589 = add i32 %3588, 1
  %3590 = sext i32 %3589 to i64
  %3591 = mul nsw i64 %3590, 6760
  %3592 = add i64 %3591, %3555
  %3593 = inttoptr i64 %119 to i32*
  %3594 = load i32, i32* %3593
  %3595 = sext i32 %3594 to i64
  %3596 = mul nsw i64 %3595, 520
  %3597 = add i64 %3596, %3592
  %3598 = inttoptr i64 %120 to i32*
  %3599 = load i32, i32* %3598
  %3600 = sext i32 %3599 to i64
  %3601 = mul nsw i64 %3600, 40
  %3602 = add i64 %3601, %3597
  %3603 = add i64 %3602, 24
  %3604 = inttoptr i64 %3603 to double*
  %3605 = load double, double* %3604
  %3606 = inttoptr i64 %126 to double*
  %3607 = load double, double* %3606
  %3608 = fmul double %3605, %3607
  %3609 = fmul double %3608, %3586
  %3610 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3611 = fmul double %3582, %3610
  %3612 = inttoptr i64 %122 to double*
  %3613 = load double, double* %3612
  %3614 = inttoptr i64 %123 to double*
  %3615 = load double, double* %3614
  %3616 = fmul double %3613, %3615
  %3617 = fmul double %3616, %3607
  %3618 = fmul double %3611, %3617
  %3619 = fsub double %3609, %3618
  %3620 = load double, double* bitcast (%dz4_type* @dz4 to double*)
  %3621 = fmul double %3611, %3620
  %3622 = fsub double %3619, %3621
  %3623 = mul nsw i64 %3595, 2600
  %3624 = add i64 %3623, ptrtoint (%c_type* @c to i64)
  %3625 = mul nsw i64 %3600, 200
  %3626 = add i64 %3625, %3624
  %3627 = add i64 %3626, 144
  %3628 = inttoptr i64 %3627 to double*
  store double %3622, double* %3628
  %3629 = load double, double* bitcast (%dt_type* @dt to double*)
  %3630 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3631 = fmul double %3629, %3630
  %3632 = load double, double* %47, align 1
  %3633 = fmul double %3631, %3632
  %3634 = inttoptr i64 %119 to i32*
  %3635 = load i32, i32* %3634
  %3636 = sext i32 %3635 to i64
  %3637 = mul nsw i64 %3636, 2600
  %3638 = add i64 %3637, ptrtoint (%c_type* @c to i64)
  %3639 = inttoptr i64 %120 to i32*
  %3640 = load i32, i32* %3639
  %3641 = sext i32 %3640 to i64
  %3642 = mul nsw i64 %3641, 200
  %3643 = add i64 %3642, %3638
  %3644 = add i64 %3643, 184
  %3645 = inttoptr i64 %3644 to double*
  store double %3633, double* %3645
  %3646 = load double, double* bitcast (%dt_type* @dt to double*)
  %3647 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3648 = fmul double %3646, %3647
  %3649 = inttoptr i64 %125 to i32*
  %3650 = load i32, i32* %3649
  %3651 = add i32 %3650, 1
  %3652 = sext i32 %3651 to i64
  %3653 = mul nsw i64 %3652, 1352
  %3654 = load i64, i64* %9, align 8
  %3655 = add i64 %3653, %3654
  %3656 = inttoptr i64 %119 to i32*
  %3657 = load i32, i32* %3656
  %3658 = sext i32 %3657 to i64
  %3659 = mul nsw i64 %3658, 104
  %3660 = add i64 %3659, %3655
  %3661 = inttoptr i64 %120 to i32*
  %3662 = load i32, i32* %3661
  %3663 = sext i32 %3662 to i64
  %3664 = shl nsw i64 %3663, 3
  %3665 = add i64 %3664, %3660
  %3666 = load double, double* %71, align 1
  %3667 = inttoptr i64 %3665 to double*
  %3668 = load double, double* %3667
  %3669 = fmul double %3666, %3668
  %3670 = mul nsw i64 %3652, 6760
  %3671 = load i64, i64* %8, align 8
  %3672 = add i64 %3670, %3671
  %3673 = mul nsw i64 %3658, 520
  %3674 = add i64 %3673, %3672
  %3675 = mul nsw i64 %3663, 40
  %3676 = add i64 %3675, %3674
  %3677 = load <2 x i32>, <2 x i32>* %145, align 1
  %3678 = extractelement <2 x i32> %3677, i32 0
  store i32 %3678, i32* %80, align 1, !tbaa !1292
  %3679 = extractelement <2 x i32> %3677, i32 1
  store i32 %3679, i32* %82, align 1, !tbaa !1292
  %3680 = add i64 %3676, 32
  %3681 = load double, double* %121, align 1
  %3682 = inttoptr i64 %3680 to double*
  %3683 = load double, double* %3682
  %3684 = fmul double %3681, %3683
  %3685 = fsub double %3669, %3684
  store i64 %3676, i64* %14, align 8, !tbaa !1240
  %3686 = add i64 %3676, 24
  %3687 = inttoptr i64 %3686 to double*
  %3688 = load double, double* %3687
  %3689 = inttoptr i64 %124 to double*
  %3690 = load double, double* %3689
  %3691 = fmul double %3688, %3690
  %3692 = fmul double %3691, %3685
  %3693 = fmul double %3692, %3648
  store double %3693, double* %75, align 1, !tbaa !1264
  %3694 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3695 = fmul double %3646, %3694
  store double %3695, double* %71, align 1, !tbaa !1264
  %3696 = inttoptr i64 %123 to double*
  %3697 = load double, double* %3696
  %3698 = inttoptr i64 %129 to double*
  %3699 = load double, double* %3698
  %3700 = fsub double %3697, %3699
  %3701 = bitcast double %3700 to i64
  %3702 = load i64, i64* %10, align 8
  %3703 = xor i64 %3702, %3701
  %3704 = bitcast i64 %3703 to double
  %3705 = inttoptr i64 %132 to double*
  %3706 = load double, double* %3705
  %3707 = fmul double %3704, %3706
  %3708 = add i64 %3676, 8
  %3709 = inttoptr i64 %3708 to double*
  %3710 = load double, double* %3709
  %3711 = fmul double %3710, %3710
  %3712 = fmul double %3707, %3711
  %3713 = fmul double %3700, %3706
  %3714 = load i64, i64* %8, align 8
  %3715 = add i64 %3670, %3714
  %3716 = add i64 %3673, %3715
  %3717 = add i64 %3675, %3716
  %3718 = add i64 %3717, 16
  %3719 = inttoptr i64 %3718 to double*
  %3720 = load double, double* %3719
  %3721 = fmul double %3720, %3720
  %3722 = fmul double %3713, %3721
  %3723 = fsub double %3712, %3722
  %3724 = inttoptr i64 %122 to double*
  %3725 = load double, double* %3724
  %3726 = fmul double %3725, %3697
  %3727 = fsub double %3726, %3699
  %3728 = fmul double %3727, %3706
  %3729 = add i64 %3717, 24
  %3730 = inttoptr i64 %3729 to double*
  %3731 = load double, double* %3730
  %3732 = fmul double %3731, %3731
  store double %3732, double* %90, align 1, !tbaa !1264
  store i64 0, i64* %91, align 1, !tbaa !1264
  %3733 = fmul double %3728, %3732
  %3734 = fsub double %3723, %3733
  %3735 = fmul double %3699, %3690
  %3736 = add i64 %3717, 32
  %3737 = inttoptr i64 %3736 to double*
  %3738 = load double, double* %3737
  %3739 = fmul double %3735, %3738
  store double %3739, double* %86, align 1, !tbaa !1264
  store i64 0, i64* %87, align 1, !tbaa !1264
  %3740 = fsub double %3734, %3739
  %3741 = load double, double* %71, align 1
  %3742 = fmul double %3741, %3740
  %3743 = load double, double* %75, align 1
  %3744 = fsub double %3743, %3742
  %3745 = mul nsw i64 %3658, 2600
  %3746 = add i64 %3745, ptrtoint (%c_type* @c to i64)
  %3747 = mul nsw i64 %3663, 200
  %3748 = add i64 %3747, %3746
  %3749 = add i64 %3748, 32
  %3750 = inttoptr i64 %3749 to double*
  store double %3744, double* %3750
  %3751 = load double, double* bitcast (%dt_type* @dt to double*)
  %3752 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3753 = fmul double %3751, %3752
  %3754 = inttoptr i64 %125 to i32*
  %3755 = load i32, i32* %3754
  %3756 = add i32 %3755, 1
  %3757 = sext i32 %3756 to i64
  %3758 = mul nsw i64 %3757, 6760
  %3759 = load i64, i64* %8, align 8
  %3760 = add i64 %3758, %3759
  %3761 = inttoptr i64 %119 to i32*
  %3762 = load i32, i32* %3761
  %3763 = sext i32 %3762 to i64
  %3764 = mul nsw i64 %3763, 520
  %3765 = add i64 %3764, %3760
  %3766 = inttoptr i64 %120 to i32*
  %3767 = load i32, i32* %3766
  %3768 = sext i32 %3767 to i64
  %3769 = mul nsw i64 %3768, 40
  %3770 = add i64 %3769, %3765
  %3771 = add i64 %3770, 8
  %3772 = inttoptr i64 %3771 to double*
  %3773 = load double, double* %3772
  %3774 = add i64 %3770, 24
  %3775 = inttoptr i64 %3774 to double*
  %3776 = load double, double* %3775
  %3777 = fmul double %3773, %3776
  %3778 = load <2 x i32>, <2 x i32>* %136, align 1
  %3779 = extractelement <2 x i32> %3778, i32 0
  store i32 %3779, i32* %80, align 1, !tbaa !1292
  %3780 = extractelement <2 x i32> %3778, i32 1
  store i32 %3780, i32* %82, align 1, !tbaa !1292
  %3781 = load double, double* %121, align 1
  %3782 = fmul double %3781, %3777
  %3783 = inttoptr i64 %124 to double*
  %3784 = load double, double* %3783
  %3785 = fmul double %3782, %3784
  %3786 = fmul double %3753, %3785
  %3787 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3788 = fmul double %3751, %3787
  %3789 = inttoptr i64 %123 to double*
  %3790 = load double, double* %3789
  %3791 = inttoptr i64 %129 to double*
  %3792 = load double, double* %3791
  %3793 = fsub double %3790, %3792
  store double %3793, double* %121, align 1, !tbaa !1264
  store i64 0, i64* %79, align 1, !tbaa !1264
  %3794 = fmul double %3793, %3788
  %3795 = fmul double %3794, %3784
  %3796 = fmul double %3795, %3773
  %3797 = fsub double %3786, %3796
  %3798 = mul nsw i64 %3763, 2600
  %3799 = add i64 %3798, ptrtoint (%c_type* @c to i64)
  %3800 = mul nsw i64 %3768, 200
  %3801 = add i64 %3800, %3799
  %3802 = add i64 %3801, 72
  %3803 = inttoptr i64 %3802 to double*
  store double %3797, double* %3803
  %3804 = load double, double* bitcast (%dt_type* @dt to double*)
  %3805 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3806 = fmul double %3804, %3805
  %3807 = inttoptr i64 %125 to i32*
  %3808 = load i32, i32* %3807
  %3809 = add i32 %3808, 1
  %3810 = sext i32 %3809 to i64
  %3811 = mul nsw i64 %3810, 6760
  %3812 = load i64, i64* %8, align 8
  %3813 = add i64 %3811, %3812
  %3814 = inttoptr i64 %119 to i32*
  %3815 = load i32, i32* %3814
  %3816 = sext i32 %3815 to i64
  %3817 = mul nsw i64 %3816, 520
  %3818 = add i64 %3817, %3813
  %3819 = inttoptr i64 %120 to i32*
  %3820 = load i32, i32* %3819
  %3821 = sext i32 %3820 to i64
  %3822 = mul nsw i64 %3821, 40
  %3823 = add i64 %3822, %3818
  %3824 = add i64 %3823, 16
  %3825 = inttoptr i64 %3824 to double*
  %3826 = load double, double* %3825
  %3827 = add i64 %3823, 24
  %3828 = inttoptr i64 %3827 to double*
  %3829 = load double, double* %3828
  %3830 = fmul double %3826, %3829
  %3831 = load double, double* %51, align 1
  %3832 = fmul double %3831, %3830
  %3833 = inttoptr i64 %124 to double*
  %3834 = load double, double* %3833
  %3835 = fmul double %3832, %3834
  %3836 = fmul double %3806, %3835
  %3837 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3838 = fmul double %3804, %3837
  %3839 = inttoptr i64 %123 to double*
  %3840 = load double, double* %3839
  %3841 = inttoptr i64 %129 to double*
  %3842 = load double, double* %3841
  %3843 = fsub double %3840, %3842
  %3844 = fmul double %3843, %3838
  %3845 = fmul double %3844, %3834
  %3846 = fmul double %3845, %3826
  %3847 = fsub double %3836, %3846
  %3848 = mul nsw i64 %3816, 2600
  %3849 = add i64 %3848, ptrtoint (%c_type* @c to i64)
  %3850 = mul nsw i64 %3821, 200
  %3851 = add i64 %3850, %3849
  %3852 = add i64 %3851, 112
  %3853 = inttoptr i64 %3852 to double*
  store double %3847, double* %3853
  %3854 = load double, double* bitcast (%dt_type* @dt to double*)
  %3855 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3856 = fmul double %3854, %3855
  store double %3856, double* %51, align 1, !tbaa !1264
  store i64 0, i64* %52, align 1, !tbaa !1264
  %3857 = inttoptr i64 %125 to i32*
  %3858 = load i32, i32* %3857
  %3859 = add i32 %3858, 1
  %3860 = sext i32 %3859 to i64
  %3861 = mul nsw i64 %3860, 6760
  %3862 = load i64, i64* %8, align 8
  %3863 = add i64 %3861, %3862
  %3864 = inttoptr i64 %119 to i32*
  %3865 = load i32, i32* %3864
  %3866 = sext i32 %3865 to i64
  %3867 = mul nsw i64 %3866, 520
  %3868 = add i64 %3867, %3863
  %3869 = inttoptr i64 %120 to i32*
  %3870 = load i32, i32* %3869
  %3871 = sext i32 %3870 to i64
  %3872 = mul nsw i64 %3871, 40
  %3873 = add i64 %3872, %3868
  store i64 %3873, i64* %11, align 8, !tbaa !1240
  %3874 = add i64 %3873, 32
  %3875 = inttoptr i64 %3874 to double*
  %3876 = load double, double* %3875
  %3877 = inttoptr i64 %126 to double*
  %3878 = load double, double* %3877
  %3879 = fmul double %3876, %3878
  %3880 = load <2 x i32>, <2 x i32>* %145, align 1
  %3881 = load <2 x i32>, <2 x i32>* %146, align 1
  %3882 = extractelement <2 x i32> %3880, i32 0
  store i32 %3882, i32* %147, align 1, !tbaa !1292
  %3883 = extractelement <2 x i32> %3880, i32 1
  store i32 %3883, i32* %149, align 1, !tbaa !1292
  %3884 = extractelement <2 x i32> %3881, i32 0
  store i32 %3884, i32* %150, align 1, !tbaa !1292
  %3885 = extractelement <2 x i32> %3881, i32 1
  store i32 %3885, i32* %152, align 1, !tbaa !1292
  %3886 = load double, double* %75, align 1
  %3887 = fmul double %3886, %3879
  %3888 = mul nsw i64 %3860, 1352
  %3889 = load i64, i64* %9, align 8
  %3890 = add i64 %3888, %3889
  %3891 = mul nsw i64 %3866, 104
  %3892 = add i64 %3891, %3890
  %3893 = shl nsw i64 %3871, 3
  %3894 = add i64 %3893, %3892
  %3895 = inttoptr i64 %3894 to double*
  %3896 = load double, double* %3895
  %3897 = fmul double %3896, %3878
  %3898 = add i64 %3873, 24
  %3899 = inttoptr i64 %3898 to double*
  %3900 = load double, double* %3899
  %3901 = fmul double %3900, %3900
  %3902 = inttoptr i64 %124 to double*
  %3903 = load double, double* %3902
  %3904 = fmul double %3901, %3903
  store double %3904, double* %121, align 1, !tbaa !1264
  store i64 0, i64* %79, align 1, !tbaa !1264
  %3905 = fadd double %3897, %3904
  %3906 = load double, double* %47, align 1
  %3907 = fmul double %3906, %3905
  %3908 = fsub double %3887, %3907
  store double %3908, double* %75, align 1, !tbaa !1264
  %3909 = load double, double* %51, align 1
  %3910 = fmul double %3909, %3908
  %3911 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3912 = fmul double %3854, %3911
  %3913 = inttoptr i64 %122 to double*
  %3914 = load double, double* %3913
  %3915 = inttoptr i64 %123 to double*
  %3916 = load double, double* %3915
  %3917 = fmul double %3914, %3916
  %3918 = inttoptr i64 %129 to double*
  %3919 = load double, double* %3918
  %3920 = fsub double %3917, %3919
  store double %3920, double* %71, align 1, !tbaa !1264
  store i64 0, i64* %72, align 1, !tbaa !1264
  %3921 = fmul double %3912, %3920
  %3922 = fmul double %3921, %3903
  %3923 = load i64, i64* %8, align 8
  %3924 = add i64 %3861, %3923
  %3925 = add i64 %3867, %3924
  %3926 = add i64 %3872, %3925
  %3927 = add i64 %3926, 24
  %3928 = inttoptr i64 %3927 to double*
  %3929 = load double, double* %3928
  %3930 = fmul double %3922, %3929
  %3931 = fsub double %3910, %3930
  %3932 = mul nsw i64 %3866, 2600
  %3933 = add i64 %3932, ptrtoint (%c_type* @c to i64)
  %3934 = mul nsw i64 %3871, 200
  %3935 = add i64 %3934, %3933
  store i64 %3935, i64* %10, align 8, !tbaa !1240
  %3936 = add i64 %3935, 152
  %3937 = inttoptr i64 %3936 to double*
  store double %3931, double* %3937
  %3938 = load double, double* bitcast (%dt_type* @dt to double*)
  %3939 = load double, double* bitcast (%tz2_type* @tz2 to double*)
  %3940 = fmul double %3938, %3939
  %3941 = inttoptr i64 %125 to i32*
  %3942 = load i32, i32* %3941
  %3943 = add i32 %3942, 1
  %3944 = sext i32 %3943 to i64
  %3945 = mul nsw i64 %3944, 6760
  %3946 = add i64 %3945, %3923
  %3947 = inttoptr i64 %119 to i32*
  %3948 = load i32, i32* %3947
  %3949 = sext i32 %3948 to i64
  %3950 = mul nsw i64 %3949, 520
  %3951 = add i64 %3950, %3946
  %3952 = inttoptr i64 %120 to i32*
  %3953 = load i32, i32* %3952
  %3954 = sext i32 %3953 to i64
  %3955 = mul nsw i64 %3954, 40
  store i64 %3955, i64* %9, align 8, !tbaa !1240
  %3956 = add i64 %3955, %3951
  %3957 = add i64 %3956, 24
  %3958 = inttoptr i64 %3957 to double*
  %3959 = load double, double* %3958
  %3960 = inttoptr i64 %126 to double*
  %3961 = load double, double* %3960
  %3962 = fmul double %3959, %3961
  store double %3962, double* %51, align 1, !tbaa !1264
  store i64 0, i64* %52, align 1, !tbaa !1264
  %3963 = load double, double* %43, align 1
  %3964 = fmul double %3962, %3963
  %3965 = fmul double %3964, %3940
  %3966 = load double, double* bitcast (%tz1_type* @tz1 to double*)
  %3967 = fmul double %3938, %3966
  %3968 = inttoptr i64 %129 to double*
  %3969 = load double, double* %3968
  %3970 = fmul double %3967, %3969
  %3971 = fmul double %3970, %3961
  %3972 = fsub double %3965, %3971
  %3973 = load double, double* bitcast (%dz5_type* @dz5 to double*)
  %3974 = fmul double %3967, %3973
  store double %3974, double* %43, align 1, !tbaa !1264
  store i64 0, i64* %44, align 1, !tbaa !1264
  %3975 = fsub double %3972, %3974
  store double %3975, double* %47, align 1, !tbaa !1264
  store i64 0, i64* %48, align 1, !tbaa !1264
  %3976 = mul nsw i64 %3949, 2600
  %3977 = add i64 %3976, ptrtoint (%c_type* @c to i64)
  %3978 = mul nsw i64 %3954, 200
  store i64 %3978, i64* %8, align 8, !tbaa !1240
  %3979 = add i64 %3978, %3977
  %3980 = add i64 %3979, 192
  %3981 = inttoptr i64 %3980 to double*
  store double %3975, double* %3981
  %3982 = inttoptr i64 %120 to i32*
  %3983 = load i32, i32* %3982
  %3984 = add i32 %3983, 1
  %3985 = inttoptr i64 %120 to i32*
  store i32 %3984, i32* %3985
  br label %block_40d1a5

block_40d1a5:                                     ; preds = %block_40d19b, %block_40d1b5
  %3986 = phi %struct.Memory* [ %4002, %block_40d19b ], [ %3986, %block_40d1b5 ]
  %3987 = inttoptr i64 %70 to i32*
  %3988 = load i32, i32* %3987
  %3989 = load i32, i32* bitcast (%iend_type* @iend to i32*)
  %3990 = sub i32 %3988, %3989
  %3991 = lshr i32 %3990, 31
  %3992 = lshr i32 %3988, 31
  %3993 = lshr i32 %3989, 31
  %3994 = xor i32 %3993, %3992
  %3995 = xor i32 %3991, %3992
  %3996 = add nuw nsw i32 %3995, %3994
  %3997 = icmp eq i32 %3996, 2
  %3998 = icmp ne i32 %3991, 0
  %3999 = xor i1 %3998, %3997
  br i1 %3999, label %block_40d1b5, label %block_41146f

block_40d19b:                                     ; preds = %block_40d18b
  %4000 = load i32, i32* bitcast (%ist_type* @ist to i32*)
  %4001 = inttoptr i64 %70 to i32*
  store i32 %4000, i32* %4001
  br label %block_40d1a5

block_40d18b:                                     ; preds = %block_41146f, %block_40d150
  %4002 = phi %struct.Memory* [ %2, %block_40d150 ], [ %3986, %block_41146f ]
  %4003 = inttoptr i64 %65 to i32*
  %4004 = load i32, i32* %4003
  %4005 = load i32, i32* bitcast (%jend_type* @jend to i32*)
  %4006 = sub i32 %4004, %4005
  %4007 = lshr i32 %4006, 31
  %4008 = trunc i32 %4007 to i8
  %4009 = lshr i32 %4004, 31
  %4010 = lshr i32 %4005, 31
  %4011 = xor i32 %4010, %4009
  %4012 = xor i32 %4007, %4009
  %4013 = add nuw nsw i32 %4012, %4011
  %4014 = icmp eq i32 %4013, 2
  %4015 = icmp ne i8 %4008, 0
  %4016 = xor i1 %4015, %4014
  br i1 %4016, label %block_40d19b, label %block_411482

block_411482:                                     ; preds = %block_40d18b
  %4017 = zext i32 %4004 to i64
  store i64 %4017, i64* %6, align 8
  %4018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4021 = icmp ult i32 %4004, %4005
  %4022 = zext i1 %4021 to i8
  %4023 = and i32 %4006, 255
  %4024 = tail call i32 @llvm.ctpop.i32(i32 %4023) #11
  %4025 = trunc i32 %4024 to i8
  %4026 = and i8 %4025, 1
  %4027 = xor i8 %4026, 1
  %4028 = xor i32 %4005, %4004
  %4029 = xor i32 %4028, %4006
  %4030 = lshr i32 %4029, 4
  %4031 = trunc i32 %4030 to i8
  %4032 = and i8 %4031, 1
  %4033 = icmp eq i32 %4006, 0
  %4034 = zext i1 %4033 to i8
  %4035 = zext i1 %4014 to i8
  store i8 %4022, i8* %67, align 1, !tbaa !1245
  store i8 %4027, i8* %4018, align 1, !tbaa !1259
  store i8 %4032, i8* %68, align 1, !tbaa !1263
  store i8 %4034, i8* %4019, align 1, !tbaa !1260
  store i8 %4008, i8* %69, align 1, !tbaa !1261
  store i8 %4035, i8* %4020, align 1, !tbaa !1262
  %4036 = load i64, i64* %12, align 8, !tbaa !1240
  %4037 = add i64 %4036, 8
  %4038 = inttoptr i64 %4036 to i64*
  %4039 = load i64, i64* %4038
  store i64 %4039, i64* %7, align 8, !tbaa !1240
  %4040 = add i64 %4036, 16
  %4041 = inttoptr i64 %4037 to i64*
  %4042 = load i64, i64* %4041
  store i64 %4042, i64* %18, align 8, !tbaa !1240
  %4043 = add i64 %4036, 24
  %4044 = inttoptr i64 %4040 to i64*
  %4045 = load i64, i64* %4044
  store i64 %4045, i64* %13, align 8, !tbaa !1240
  %4046 = inttoptr i64 %4043 to i64*
  %4047 = load i64, i64* %4046
  store i64 %4047, i64* %3, align 8, !tbaa !1240
  %4048 = add i64 %4036, 32
  store i64 %4048, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %4002
}

; Function Attrs: nobuiltin noinline
define i64 @callback_sub_4006e0__start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196064, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4006e0__start(%struct.State* nonnull @__mcsema_reg_state, i64 4196064, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: norecurse nounwind
define void @__mcsema_verify_reg_state() local_unnamed_addr #7 {
entry:
  %0 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %is_null, label %end

is_null:                                          ; preds = %entry
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %end

end:                                              ; preds = %is_null, %entry
  ret void
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_4007c0_frame_dummy(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196288, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4007c0_frame_dummy(%struct.State* nonnull @__mcsema_reg_state, i64 4196288, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400790___do_global_dtors_aux(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196240, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400790___do_global_dtors_aux(%struct.State* nonnull @__mcsema_reg_state, i64 4196240, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: noinline nounwind
define %struct.Memory* @__mcsema_detach_call_value(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %1 to i64 (i64, i64, i64, i64, i64, i64, i64, i64)*
  %27 = tail call i64 %26(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25) #11
  store i64 %27, i64* %5, align 8
  %28 = inttoptr i64 %19 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400660_printf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @printf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_67fe70_gettimeofday(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @gettimeofday(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400690_fgetc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fgetc(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4006c0_exit(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @exit(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_67fe58___isoc99_fscanf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @__isoc99_fscanf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4006a0_fopen(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @fopen(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400650_fclose(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fclose(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint nounwind
define %struct.Memory* @ext_4006d0_sqrt(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = bitcast %union.VectorReg* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = load i64, i64* %5, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %5, align 8
  %13 = tail call double @sqrt(double %8)
  %14 = bitcast %union.VectorReg* %6 to i128*
  store i128 0, i128* %14, align 8
  store double %13, double* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_41a590___libc_csu_fini() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4302224, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_41a590___libc_csu_fini(%struct.State* nonnull @__mcsema_reg_state, i64 4302224, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_41a520___libc_csu_init() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4302112, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_41a520___libc_csu_init(%struct.State* nonnull @__mcsema_reg_state, i64 4302112, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline
define i64 @main(i64, i64, i64) #6 {
  %4 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %3
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %3
  %6 = phi i64 [ %4, %3 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4265712, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %7 = load volatile i1, i1* @0, align 1
  br i1 %7, label %__mcsema_early_init.exit, label %8

; <label>:8:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %8, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  %9 = add i64 %6, -8
  store i64 %9, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = tail call %struct.Memory* @sub_4116f0_main(%struct.State* nonnull @__mcsema_reg_state, i64 4265712, %struct.Memory* null)
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %11 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %11
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_67fe88___libc_start_main(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %19 to i64*
  %27 = load i64, i64* %26
  store i64 %27, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %28 = tail call i64 @__libc_start_main(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25)
  store i64 %28, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_67fe78_pow(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @pow(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4006b0_sprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @sprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @randlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4273184, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_413420_randlc(%struct.State* nonnull @__mcsema_reg_state, i64 4273184, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @jacu(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4247888, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40d150_jacu(%struct.State* nonnull @__mcsema_reg_state, i64 4247888, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_stop(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4209600, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403bc0_timer_stop(%struct.State* nonnull @__mcsema_reg_state, i64 4209600, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @exact(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4229504, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408980_exact(%struct.State* nonnull @__mcsema_reg_state, i64 4229504, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @vranlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4273520, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_413570_vranlc(%struct.State* nonnull @__mcsema_reg_state, i64 4273520, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_read(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4209680, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403c10_timer_read(%struct.State* nonnull @__mcsema_reg_state, i64 4209680, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @pintgr(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4267328, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_411d40_pintgr(%struct.State* nonnull @__mcsema_reg_state, i64 4267328, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @jacld(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4230032, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408b90_jacld(%struct.State* nonnull @__mcsema_reg_state, i64 4230032, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setiv(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4294480, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_418750_setiv(%struct.State* nonnull @__mcsema_reg_state, i64 4294480, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @l2norm(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4265104, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_411490_l2norm(%struct.State* nonnull @__mcsema_reg_state, i64 4265104, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @rhs(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4275168, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_413be0_rhs(%struct.State* nonnull @__mcsema_reg_state, i64 4275168, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @read_input(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4273952, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_413720_read_input(%struct.State* nonnull @__mcsema_reg_state, i64 4273952, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4272176, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_413030_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4272176, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @domain(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4209712, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403c30_domain(%struct.State* nonnull @__mcsema_reg_state, i64 4209712, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_clear(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4209488, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403b50_timer_clear(%struct.State* nonnull @__mcsema_reg_state, i64 4209488, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @error(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4229024, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4087a0_error(%struct.State* nonnull @__mcsema_reg_state, i64 4229024, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @wtime_(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4301984, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41a4a0_wtime_(%struct.State* nonnull @__mcsema_reg_state, i64 4301984, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @verify(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4298432, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4196c0_verify(%struct.State* nonnull @__mcsema_reg_state, i64 4298432, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @buts(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4201344, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_401b80_buts(%struct.State* nonnull @__mcsema_reg_state, i64 4201344, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @erhs(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4210096, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403db0_erhs(%struct.State* nonnull @__mcsema_reg_state, i64 4210096, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4209520, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403b70_timer_start(%struct.State* nonnull @__mcsema_reg_state, i64 4209520, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ssor(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4295200, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_418a20_ssor(%struct.State* nonnull @__mcsema_reg_state, i64 4295200, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.init_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4195864, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400618__init_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4195864, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.term_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4302228, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41a594__term_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4302228, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setbv(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4292016, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_417db0_setbv(%struct.State* nonnull @__mcsema_reg_state, i64 4292016, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @c_print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4208544, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4037a0_c_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4208544, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @blts(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196304, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4007d0_blts(%struct.State* nonnull @__mcsema_reg_state, i64 4196304, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setcoeff(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4292912, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_418130_setcoeff(%struct.State* nonnull @__mcsema_reg_state, i64 4292912, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #11 {
  %1 = tail call i64 @callback_sub_41a590___libc_csu_fini()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #11 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  %3 = tail call i64 @callback_sub_41a520___libc_csu_init()
  ret void
}

; Function Attrs: noinline optnone
define %struct.State* @__mcsema_debug_get_reg_state() #12 {
  ret %struct.State* @__mcsema_reg_state
}

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #13

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline }
attributes #4 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin noinline }
attributes #7 = { norecurse nounwind }
attributes #8 = { nobuiltin noinline nounwind }
attributes #9 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { alwaysinline inlinehint nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noinline optnone }
attributes #13 = { noreturn nounwind }
attributes #14 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1238, !1239}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/antonio/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !75, !81, !84, !91, !95, !100, !102, !110, !114, !118, !130, !134, !138, !142, !146, !151, !155, !159, !163, !167, !175, !179, !183, !185, !189, !193, !197, !203, !207, !211, !213, !221, !225, !233, !235, !239, !243, !247, !251, !256, !261, !266, !267, !268, !269, !272, !273, !274, !275, !276, !277, !278, !334, !338, !354, !357, !362, !370, !375, !379, !383, !387, !391, !393, !395, !399, !405, !409, !415, !421, !423, !427, !431, !435, !439, !450, !452, !456, !460, !464, !466, !470, !474, !478, !480, !482, !486, !494, !498, !502, !506, !508, !514, !516, !522, !526, !530, !534, !538, !542, !546, !548, !550, !554, !558, !562, !564, !568, !572, !574, !576, !580, !584, !588, !592, !593, !594, !522, !450, !456, !464, !592, !593, !594, !595, !598, !601, !603, !605, !607, !609, !611, !613, !615, !617, !619, !621, !623, !625, !626, !627, !628, !630, !632, !634, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !657, !661, !666, !669, !671, !673, !675, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !698, !704, !709, !713, !715, !717, !719, !721, !728, !732, !736, !740, !744, !748, !753, !757, !759, !763, !769, !773, !778, !780, !782, !786, !790, !794, !796, !798, !800, !802, !806, !808, !810, !814, !818, !822, !826, !830, !832, !834, !838, !842, !846, !850, !852, !854, !858, !862, !863, !864, !865, !866, !867, !872, !874, !876, !880, !882, !884, !886, !888, !890, !892, !894, !899, !903, !905, !907, !912, !914, !916, !918, !920, !922, !924, !927, !929, !931, !935, !939, !941, !943, !945, !947, !949, !951, !953, !955, !957, !959, !963, !967, !969, !971, !973, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !1001, !1005, !1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1031, !1035, !1039, !1041, !1043, !1045, !1049, !1053, !1057, !1059, !1061, !1063, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1085, !1089, !1093, !1095, !1097, !1099, !1101, !1105, !1109, !1111, !1113, !1115, !1117, !1119, !1121, !1125, !1129, !1131, !1133, !1135, !1137, !1141, !1145, !1149, !1151, !1153, !1155, !1157, !1159, !1161, !1165, !1169, !1173, !1175, !1179, !1183, !1185, !1187, !1189, !1191, !1193, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !73)
!72 = !DINamespace(name: "__gnu_debug", scope: null)
!73 = !DINamespace(name: "__debug", scope: !74)
!74 = !DINamespace(name: "std", scope: null)
!75 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !76)
!76 = !DISubprogram(name: "abs", scope: !77, file: !77, line: 837, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!77 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!78 = !DISubroutineType(types: !79)
!79 = !{!80, !80}
!80 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !82)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !77, line: 62, baseType: !83)
!83 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !85)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !77, line: 70, baseType: !86)
!86 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 66, size: 128, elements: !87, identifier: "_ZTS6ldiv_t")
!87 = !{!88, !90}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !86, file: !77, line: 68, baseType: !89, size: 64)
!89 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !86, file: !77, line: 69, baseType: !89, size: 64, offset: 64)
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !92)
!92 = !DISubprogram(name: "abort", scope: !77, file: !77, line: 588, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{null}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !96)
!96 = !DISubprogram(name: "atexit", scope: !77, file: !77, line: 592, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!80, !99}
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!100 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !101)
!101 = !DISubprogram(name: "at_quick_exit", scope: !77, file: !77, line: 597, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !103)
!103 = !DISubprogram(name: "atof", scope: !77, file: !77, line: 101, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DISubroutineType(types: !105)
!105 = !{!106, !107}
!106 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !109)
!109 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!110 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !111)
!111 = !DISubprogram(name: "atoi", scope: !77, file: !77, line: 104, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!112 = !DISubroutineType(types: !113)
!113 = !{!80, !107}
!114 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !115)
!115 = !DISubprogram(name: "atol", scope: !77, file: !77, line: 107, type: !116, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!116 = !DISubroutineType(types: !117)
!117 = !{!89, !107}
!118 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !119)
!119 = !DISubprogram(name: "bsearch", scope: !77, file: !77, line: 817, type: !120, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!120 = !DISubroutineType(types: !121)
!121 = !{!122, !68, !68, !123, !123, !126}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !124, line: 62, baseType: !125)
!124 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!125 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !77, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!80, !68, !68}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !131)
!131 = !DISubprogram(name: "calloc", scope: !77, file: !77, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!122, !123, !123}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !135)
!135 = !DISubprogram(name: "div", scope: !77, file: !77, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!82, !80, !80}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !139)
!139 = !DISubprogram(name: "exit", scope: !77, file: !77, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !80}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !143)
!143 = !DISubprogram(name: "free", scope: !77, file: !77, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !122}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !147)
!147 = !DISubprogram(name: "getenv", scope: !77, file: !77, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!150, !107}
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !152)
!152 = !DISubprogram(name: "labs", scope: !77, file: !77, line: 838, type: !153, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!153 = !DISubroutineType(types: !154)
!154 = !{!89, !89}
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !156)
!156 = !DISubprogram(name: "ldiv", scope: !77, file: !77, line: 851, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!85, !89, !89}
!159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !160)
!160 = !DISubprogram(name: "malloc", scope: !77, file: !77, line: 539, type: !161, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!161 = !DISubroutineType(types: !162)
!162 = !{!122, !123}
!163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !164)
!164 = !DISubprogram(name: "mblen", scope: !77, file: !77, line: 919, type: !165, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!165 = !DISubroutineType(types: !166)
!166 = !{!80, !107, !123}
!167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !168)
!168 = !DISubprogram(name: "mbstowcs", scope: !77, file: !77, line: 930, type: !169, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!169 = !DISubroutineType(types: !170)
!170 = !{!123, !171, !174, !123}
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !172)
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!173 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!174 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !107)
!175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !176)
!176 = !DISubprogram(name: "mbtowc", scope: !77, file: !77, line: 922, type: !177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!177 = !DISubroutineType(types: !178)
!178 = !{!80, !171, !174, !123}
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !180)
!180 = !DISubprogram(name: "qsort", scope: !77, file: !77, line: 827, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !122, !123, !123, !126}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !184)
!184 = !DISubprogram(name: "quick_exit", scope: !77, file: !77, line: 620, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !186)
!186 = !DISubprogram(name: "rand", scope: !77, file: !77, line: 453, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!187 = !DISubroutineType(types: !188)
!188 = !{!80}
!189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !190)
!190 = !DISubprogram(name: "realloc", scope: !77, file: !77, line: 549, type: !191, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!191 = !DISubroutineType(types: !192)
!192 = !{!122, !122, !123}
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !194)
!194 = !DISubprogram(name: "srand", scope: !77, file: !77, line: 455, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !10}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !198)
!198 = !DISubprogram(name: "strtod", scope: !77, file: !77, line: 117, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!106, !174, !201}
!201 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !202)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !204)
!204 = !DISubprogram(name: "strtol", scope: !77, file: !77, line: 176, type: !205, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!205 = !DISubroutineType(types: !206)
!206 = !{!89, !174, !201, !80}
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !208)
!208 = !DISubprogram(name: "strtoul", scope: !77, file: !77, line: 180, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!125, !174, !201, !80}
!211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !212)
!212 = !DISubprogram(name: "system", scope: !77, file: !77, line: 781, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !214)
!214 = !DISubprogram(name: "wcstombs", scope: !77, file: !77, line: 933, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!123, !217, !218, !123}
!217 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !150)
!218 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !219)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64)
!220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !173)
!221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !222)
!222 = !DISubprogram(name: "wctomb", scope: !77, file: !77, line: 926, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!223 = !DISubroutineType(types: !224)
!224 = !{!80, !150, !173}
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !227)
!226 = !DINamespace(name: "__gnu_cxx", scope: null)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !77, line: 80, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 76, size: 128, elements: !229, identifier: "_ZTS7lldiv_t")
!229 = !{!230, !232}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !228, file: !77, line: 78, baseType: !231, size: 64)
!231 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !228, file: !77, line: 79, baseType: !231, size: 64, offset: 64)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !234)
!234 = !DISubprogram(name: "_Exit", scope: !77, file: !77, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !236)
!236 = !DISubprogram(name: "llabs", scope: !77, file: !77, line: 841, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!231, !231}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !240)
!240 = !DISubprogram(name: "lldiv", scope: !77, file: !77, line: 855, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!227, !231, !231}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !244)
!244 = !DISubprogram(name: "atoll", scope: !77, file: !77, line: 112, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!231, !107}
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !248)
!248 = !DISubprogram(name: "strtoll", scope: !77, file: !77, line: 200, type: !249, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!249 = !DISubroutineType(types: !250)
!250 = !{!231, !174, !201, !80}
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !252)
!252 = !DISubprogram(name: "strtoull", scope: !77, file: !77, line: 205, type: !253, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!253 = !DISubroutineType(types: !254)
!254 = !{!255, !174, !201, !80}
!255 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !257)
!257 = !DISubprogram(name: "strtof", scope: !77, file: !77, line: 123, type: !258, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!258 = !DISubroutineType(types: !259)
!259 = !{!260, !174, !201}
!260 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !262)
!262 = !DISubprogram(name: "strtold", scope: !77, file: !77, line: 126, type: !263, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!263 = !DISubroutineType(types: !264)
!264 = !{!265, !174, !201}
!265 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !227)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !234)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !236)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !270)
!270 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !226, file: !271, line: 213, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!271 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/cstdlib", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !240)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !244)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !257)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !252)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !262)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !279)
!279 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !281, file: !280, line: 79, size: 64, elements: !282, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!280 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/bits/exception_ptr.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!281 = !DINamespace(name: "__exception_ptr", scope: !74)
!282 = !{!283, !284, !288, !291, !292, !297, !298, !302, !308, !312, !316, !319, !320, !323, !327}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !279, file: !280, line: 81, baseType: !122, size: 64)
!284 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 83, type: !285, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!285 = !DISubroutineType(types: !286)
!286 = !{null, !287, !122}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!288 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !279, file: !280, line: 85, type: !289, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!289 = !DISubroutineType(types: !290)
!290 = !{null, !287}
!291 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !279, file: !280, line: 86, type: !289, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!292 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !279, file: !280, line: 88, type: !293, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!293 = !DISubroutineType(types: !294)
!294 = !{!122, !295}
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!296 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !279)
!297 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 96, type: !289, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!298 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 98, type: !299, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!299 = !DISubroutineType(types: !300)
!300 = !{null, !287, !301}
!301 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !296, size: 64)
!302 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 101, type: !303, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!303 = !DISubroutineType(types: !304)
!304 = !{null, !287, !305}
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !74, file: !306, line: 235, baseType: !307)
!306 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/x86_64-linux-gnu/c++/7.3.0/bits/c++config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!307 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!308 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 105, type: !309, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!309 = !DISubroutineType(types: !310)
!310 = !{null, !287, !311}
!311 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !279, size: 64)
!312 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !279, file: !280, line: 118, type: !313, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!313 = !DISubroutineType(types: !314)
!314 = !{!315, !287, !301}
!315 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !279, size: 64)
!316 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !279, file: !280, line: 122, type: !317, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!317 = !DISubroutineType(types: !318)
!318 = !{!315, !287, !311}
!319 = !DISubprogram(name: "~exception_ptr", scope: !279, file: !280, line: 129, type: !289, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!320 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !279, file: !280, line: 132, type: !321, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !287, !315}
!323 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !279, file: !280, line: 144, type: !324, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!324 = !DISubroutineType(types: !325)
!325 = !{!326, !295}
!326 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!327 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !279, file: !280, line: 153, type: !328, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!328 = !DISubroutineType(types: !329)
!329 = !{!330, !295}
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !74, file: !333, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!333 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/typeinfo", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !281, entity: !335)
!335 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !74, file: !280, line: 69, type: !336, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!336 = !DISubroutineType(types: !337)
!337 = !{null, !279}
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !339)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !340, line: 6, baseType: !341)
!340 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !342, line: 21, baseType: !343)
!342 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!343 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !342, line: 13, size: 64, elements: !344, identifier: "_ZTS11__mbstate_t")
!344 = !{!345, !346}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !343, file: !342, line: 15, baseType: !80, size: 32)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !343, file: !342, line: 20, baseType: !347, size: 32, offset: 32)
!347 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !343, file: !342, line: 16, size: 32, elements: !348, identifier: "_ZTSN11__mbstate_tUt_E")
!348 = !{!349, !350}
!349 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !347, file: !342, line: 18, baseType: !10, size: 32)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !347, file: !342, line: 19, baseType: !351, size: 32)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !109, size: 32, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 4)
!354 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !355)
!355 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !356, line: 20, baseType: !10)
!356 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!357 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !358)
!358 = !DISubprogram(name: "btowc", scope: !359, file: !359, line: 284, type: !360, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!359 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!360 = !DISubroutineType(types: !361)
!361 = !{!355, !80}
!362 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !363)
!363 = !DISubprogram(name: "fgetwc", scope: !359, file: !359, line: 727, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!364 = !DISubroutineType(types: !365)
!365 = !{!355, !366}
!366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !367, size: 64)
!367 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !368, line: 5, baseType: !369)
!368 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !368, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!370 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !371)
!371 = !DISubprogram(name: "fgetws", scope: !359, file: !359, line: 756, type: !372, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!372 = !DISubroutineType(types: !373)
!373 = !{!172, !171, !80, !374}
!374 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !366)
!375 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !376)
!376 = !DISubprogram(name: "fputwc", scope: !359, file: !359, line: 741, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!377 = !DISubroutineType(types: !378)
!378 = !{!355, !173, !366}
!379 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !380)
!380 = !DISubprogram(name: "fputws", scope: !359, file: !359, line: 763, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!381 = !DISubroutineType(types: !382)
!382 = !{!80, !218, !374}
!383 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !384)
!384 = !DISubprogram(name: "fwide", scope: !359, file: !359, line: 573, type: !385, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!385 = !DISubroutineType(types: !386)
!386 = !{!80, !366, !80}
!387 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !388)
!388 = !DISubprogram(name: "fwprintf", scope: !359, file: !359, line: 580, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!389 = !DISubroutineType(types: !390)
!390 = !{!80, !374, !218, null}
!391 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !392)
!392 = !DISubprogram(name: "fwscanf", scope: !359, file: !359, line: 621, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!393 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !394)
!394 = !DISubprogram(name: "getwc", scope: !359, file: !359, line: 728, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!395 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !396)
!396 = !DISubprogram(name: "getwchar", scope: !359, file: !359, line: 734, type: !397, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!397 = !DISubroutineType(types: !398)
!398 = !{!355}
!399 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !400)
!400 = !DISubprogram(name: "mbrlen", scope: !359, file: !359, line: 307, type: !401, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!401 = !DISubroutineType(types: !402)
!402 = !{!123, !174, !123, !403}
!403 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !404)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!405 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !406)
!406 = !DISubprogram(name: "mbrtowc", scope: !359, file: !359, line: 296, type: !407, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!407 = !DISubroutineType(types: !408)
!408 = !{!123, !171, !174, !123, !403}
!409 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !410)
!410 = !DISubprogram(name: "mbsinit", scope: !359, file: !359, line: 292, type: !411, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!411 = !DISubroutineType(types: !412)
!412 = !{!80, !413}
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !339)
!415 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !416)
!416 = !DISubprogram(name: "mbsrtowcs", scope: !359, file: !359, line: 337, type: !417, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!417 = !DISubroutineType(types: !418)
!418 = !{!123, !171, !419, !123, !403}
!419 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !420)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!421 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !422)
!422 = !DISubprogram(name: "putwc", scope: !359, file: !359, line: 742, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!423 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !424)
!424 = !DISubprogram(name: "putwchar", scope: !359, file: !359, line: 748, type: !425, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!425 = !DISubroutineType(types: !426)
!426 = !{!355, !173}
!427 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !428)
!428 = !DISubprogram(name: "swprintf", scope: !359, file: !359, line: 590, type: !429, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!429 = !DISubroutineType(types: !430)
!430 = !{!80, !171, !123, !218, null}
!431 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !432)
!432 = !DISubprogram(name: "swscanf", scope: !359, file: !359, line: 631, type: !433, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!433 = !DISubroutineType(types: !434)
!434 = !{!80, !218, !218, null}
!435 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !436)
!436 = !DISubprogram(name: "ungetwc", scope: !359, file: !359, line: 771, type: !437, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!437 = !DISubroutineType(types: !438)
!438 = !{!355, !355, !366}
!439 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !440)
!440 = !DISubprogram(name: "vfwprintf", scope: !359, file: !359, line: 598, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!441 = !DISubroutineType(types: !442)
!442 = !{!80, !374, !218, !443}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !445, identifier: "_ZTS13__va_list_tag")
!445 = !{!446, !447, !448, !449}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !444, file: !2, baseType: !10, size: 32)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !444, file: !2, baseType: !10, size: 32, offset: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 64)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 128)
!450 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !451)
!451 = !DISubprogram(name: "vfwscanf", scope: !359, file: !359, line: 673, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!452 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !453)
!453 = !DISubprogram(name: "vswprintf", scope: !359, file: !359, line: 611, type: !454, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!454 = !DISubroutineType(types: !455)
!455 = !{!80, !171, !123, !218, !443}
!456 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !457)
!457 = !DISubprogram(name: "vswscanf", scope: !359, file: !359, line: 685, type: !458, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!458 = !DISubroutineType(types: !459)
!459 = !{!80, !218, !218, !443}
!460 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !461)
!461 = !DISubprogram(name: "vwprintf", scope: !359, file: !359, line: 606, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!462 = !DISubroutineType(types: !463)
!463 = !{!80, !218, !443}
!464 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !465)
!465 = !DISubprogram(name: "vwscanf", scope: !359, file: !359, line: 681, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!466 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !467)
!467 = !DISubprogram(name: "wcrtomb", scope: !359, file: !359, line: 301, type: !468, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!468 = !DISubroutineType(types: !469)
!469 = !{!123, !217, !173, !403}
!470 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !471)
!471 = !DISubprogram(name: "wcscat", scope: !359, file: !359, line: 97, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!472 = !DISubroutineType(types: !473)
!473 = !{!172, !171, !218}
!474 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !475)
!475 = !DISubprogram(name: "wcscmp", scope: !359, file: !359, line: 106, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!476 = !DISubroutineType(types: !477)
!477 = !{!80, !219, !219}
!478 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !479)
!479 = !DISubprogram(name: "wcscoll", scope: !359, file: !359, line: 131, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!480 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !481)
!481 = !DISubprogram(name: "wcscpy", scope: !359, file: !359, line: 87, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!482 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !483)
!483 = !DISubprogram(name: "wcscspn", scope: !359, file: !359, line: 187, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!484 = !DISubroutineType(types: !485)
!485 = !{!123, !219, !219}
!486 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !487)
!487 = !DISubprogram(name: "wcsftime", scope: !359, file: !359, line: 835, type: !488, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!488 = !DISubroutineType(types: !489)
!489 = !{!123, !171, !123, !218, !490}
!490 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !491)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !493)
!493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !359, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!494 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !495)
!495 = !DISubprogram(name: "wcslen", scope: !359, file: !359, line: 222, type: !496, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!496 = !DISubroutineType(types: !497)
!497 = !{!123, !219}
!498 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !499)
!499 = !DISubprogram(name: "wcsncat", scope: !359, file: !359, line: 101, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!500 = !DISubroutineType(types: !501)
!501 = !{!172, !171, !218, !123}
!502 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !503)
!503 = !DISubprogram(name: "wcsncmp", scope: !359, file: !359, line: 109, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!504 = !DISubroutineType(types: !505)
!505 = !{!80, !219, !219, !123}
!506 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !507)
!507 = !DISubprogram(name: "wcsncpy", scope: !359, file: !359, line: 92, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!508 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !509)
!509 = !DISubprogram(name: "wcsrtombs", scope: !359, file: !359, line: 343, type: !510, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!510 = !DISubroutineType(types: !511)
!511 = !{!123, !217, !512, !123, !403}
!512 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !513)
!513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!514 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !515)
!515 = !DISubprogram(name: "wcsspn", scope: !359, file: !359, line: 191, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!516 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !517)
!517 = !DISubprogram(name: "wcstod", scope: !359, file: !359, line: 377, type: !518, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!518 = !DISubroutineType(types: !519)
!519 = !{!106, !218, !520}
!520 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !521)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!522 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !523)
!523 = !DISubprogram(name: "wcstof", scope: !359, file: !359, line: 382, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!524 = !DISubroutineType(types: !525)
!525 = !{!260, !218, !520}
!526 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !527)
!527 = !DISubprogram(name: "wcstok", scope: !359, file: !359, line: 217, type: !528, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!528 = !DISubroutineType(types: !529)
!529 = !{!172, !171, !218, !520}
!530 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !531)
!531 = !DISubprogram(name: "wcstol", scope: !359, file: !359, line: 428, type: !532, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!532 = !DISubroutineType(types: !533)
!533 = !{!89, !218, !520, !80}
!534 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !535)
!535 = !DISubprogram(name: "wcstoul", scope: !359, file: !359, line: 433, type: !536, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!536 = !DISubroutineType(types: !537)
!537 = !{!125, !218, !520, !80}
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !539)
!539 = !DISubprogram(name: "wcsxfrm", scope: !359, file: !359, line: 135, type: !540, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!540 = !DISubroutineType(types: !541)
!541 = !{!123, !171, !218, !123}
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !543)
!543 = !DISubprogram(name: "wctob", scope: !359, file: !359, line: 288, type: !544, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!544 = !DISubroutineType(types: !545)
!545 = !{!80, !355}
!546 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !547)
!547 = !DISubprogram(name: "wmemcmp", scope: !359, file: !359, line: 258, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!548 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !549)
!549 = !DISubprogram(name: "wmemcpy", scope: !359, file: !359, line: 262, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !551)
!551 = !DISubprogram(name: "wmemmove", scope: !359, file: !359, line: 267, type: !552, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!552 = !DISubroutineType(types: !553)
!553 = !{!172, !172, !219, !123}
!554 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !555)
!555 = !DISubprogram(name: "wmemset", scope: !359, file: !359, line: 271, type: !556, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!556 = !DISubroutineType(types: !557)
!557 = !{!172, !172, !173, !123}
!558 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !559)
!559 = !DISubprogram(name: "wprintf", scope: !359, file: !359, line: 587, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!560 = !DISubroutineType(types: !561)
!561 = !{!80, !218, null}
!562 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !563)
!563 = !DISubprogram(name: "wscanf", scope: !359, file: !359, line: 628, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!564 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !565)
!565 = !DISubprogram(name: "wcschr", scope: !359, file: !359, line: 164, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!566 = !DISubroutineType(types: !567)
!567 = !{!172, !219, !173}
!568 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !569)
!569 = !DISubprogram(name: "wcspbrk", scope: !359, file: !359, line: 201, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!570 = !DISubroutineType(types: !571)
!571 = !{!172, !219, !219}
!572 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !573)
!573 = !DISubprogram(name: "wcsrchr", scope: !359, file: !359, line: 174, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!574 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !575)
!575 = !DISubprogram(name: "wcsstr", scope: !359, file: !359, line: 212, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!576 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !577)
!577 = !DISubprogram(name: "wmemchr", scope: !359, file: !359, line: 253, type: !578, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!578 = !DISubroutineType(types: !579)
!579 = !{!172, !219, !173, !123}
!580 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !581)
!581 = !DISubprogram(name: "wcstold", scope: !359, file: !359, line: 384, type: !582, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!582 = !DISubroutineType(types: !583)
!583 = !{!265, !218, !520}
!584 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !585)
!585 = !DISubprogram(name: "wcstoll", scope: !359, file: !359, line: 441, type: !586, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!586 = !DISubroutineType(types: !587)
!587 = !{!231, !218, !520, !80}
!588 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !589)
!589 = !DISubprogram(name: "wcstoull", scope: !359, file: !359, line: 448, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!590 = !DISubroutineType(types: !591)
!591 = !{!255, !218, !520, !80}
!592 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !581)
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !585)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !589)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !596)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !597)
!597 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !599)
!599 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !600)
!600 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !602)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !80)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !604)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !89)
!605 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !606)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !596)
!607 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !608)
!608 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !599)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !610)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !602)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !612)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !604)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !614)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !596)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !616)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !599)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !618)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !602)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !620)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !604)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !622)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !89)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !624)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !604)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !62)
!626 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !28)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !8)
!628 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !629)
!629 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !125)
!630 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !631)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!632 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !633)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !635)
!635 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !637)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !629)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !639)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !641)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !643)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !645)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !629)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !647)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !125)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !649)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !629)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !651)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !74, file: !306, line: 231, baseType: !125)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !653)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !74, file: !306, line: 232, baseType: !89)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !656, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!656 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!657 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !658)
!658 = !DISubprogram(name: "setlocale", scope: !656, file: !656, line: 122, type: !659, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!659 = !DISubroutineType(types: !660)
!660 = !{!150, !80, !107}
!661 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !662)
!662 = !DISubprogram(name: "localeconv", scope: !656, file: !656, line: 125, type: !663, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!663 = !DISubroutineType(types: !664)
!664 = !{!665}
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!666 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !667)
!667 = !DISubprogram(name: "isalnum", scope: !668, file: !668, line: 108, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!668 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !670)
!670 = !DISubprogram(name: "isalpha", scope: !668, file: !668, line: 109, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !672)
!672 = !DISubprogram(name: "iscntrl", scope: !668, file: !668, line: 110, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!673 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !674)
!674 = !DISubprogram(name: "isdigit", scope: !668, file: !668, line: 111, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!675 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !676)
!676 = !DISubprogram(name: "isgraph", scope: !668, file: !668, line: 113, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !678)
!678 = !DISubprogram(name: "islower", scope: !668, file: !668, line: 112, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !680)
!680 = !DISubprogram(name: "isprint", scope: !668, file: !668, line: 114, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !682)
!682 = !DISubprogram(name: "ispunct", scope: !668, file: !668, line: 115, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !684)
!684 = !DISubprogram(name: "isspace", scope: !668, file: !668, line: 116, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !686)
!686 = !DISubprogram(name: "isupper", scope: !668, file: !668, line: 117, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !688)
!688 = !DISubprogram(name: "isxdigit", scope: !668, file: !668, line: 118, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !690)
!690 = !DISubprogram(name: "tolower", scope: !668, file: !668, line: 122, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !692)
!692 = !DISubprogram(name: "toupper", scope: !668, file: !668, line: 125, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !694)
!694 = !DISubprogram(name: "isblank", scope: !668, file: !668, line: 130, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !696)
!696 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !697, line: 7, baseType: !369)
!697 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!698 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !699)
!699 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !700, line: 78, baseType: !701)
!700 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !702, line: 30, baseType: !703)
!702 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !702, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!704 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !705)
!705 = !DISubprogram(name: "clearerr", scope: !700, file: !700, line: 757, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!706 = !DISubroutineType(types: !707)
!707 = !{null, !708}
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!709 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !710)
!710 = !DISubprogram(name: "fclose", scope: !700, file: !700, line: 199, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!711 = !DISubroutineType(types: !712)
!712 = !{!80, !708}
!713 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !714)
!714 = !DISubprogram(name: "feof", scope: !700, file: !700, line: 759, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!715 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !716)
!716 = !DISubprogram(name: "ferror", scope: !700, file: !700, line: 761, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !718)
!718 = !DISubprogram(name: "fflush", scope: !700, file: !700, line: 204, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !720)
!720 = !DISubprogram(name: "fgetc", scope: !700, file: !700, line: 477, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !722)
!722 = !DISubprogram(name: "fgetpos", scope: !700, file: !700, line: 731, type: !723, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DISubroutineType(types: !724)
!724 = !{!80, !725, !726}
!725 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !708)
!726 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !727)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!728 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !729)
!729 = !DISubprogram(name: "fgets", scope: !700, file: !700, line: 564, type: !730, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!730 = !DISubroutineType(types: !731)
!731 = !{!150, !217, !80, !725}
!732 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !733)
!733 = !DISubprogram(name: "fopen", scope: !700, file: !700, line: 232, type: !734, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!734 = !DISubroutineType(types: !735)
!735 = !{!708, !174, !174}
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !737)
!737 = !DISubprogram(name: "fprintf", scope: !700, file: !700, line: 312, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!80, !725, !174, null}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !741)
!741 = !DISubprogram(name: "fputc", scope: !700, file: !700, line: 517, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!80, !80, !708}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !745)
!745 = !DISubprogram(name: "fputs", scope: !700, file: !700, line: 626, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!80, !174, !725}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !749)
!749 = !DISubprogram(name: "fread", scope: !700, file: !700, line: 646, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!123, !752, !123, !123, !725}
!752 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !122)
!753 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !754)
!754 = !DISubprogram(name: "freopen", scope: !700, file: !700, line: 238, type: !755, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!755 = !DISubroutineType(types: !756)
!756 = !{!708, !174, !174, !725}
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !758)
!758 = !DISubprogram(name: "fscanf", scope: !700, file: !700, line: 377, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!759 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !760)
!760 = !DISubprogram(name: "fseek", scope: !700, file: !700, line: 684, type: !761, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!761 = !DISubroutineType(types: !762)
!762 = !{!80, !708, !89, !80}
!763 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !764)
!764 = !DISubprogram(name: "fsetpos", scope: !700, file: !700, line: 736, type: !765, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!765 = !DISubroutineType(types: !766)
!766 = !{!80, !708, !767}
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !699)
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !770)
!770 = !DISubprogram(name: "ftell", scope: !700, file: !700, line: 689, type: !771, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!771 = !DISubroutineType(types: !772)
!772 = !{!89, !708}
!773 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !774)
!774 = !DISubprogram(name: "fwrite", scope: !700, file: !700, line: 652, type: !775, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!775 = !DISubroutineType(types: !776)
!776 = !{!123, !777, !123, !123, !725}
!777 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!778 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !779)
!779 = !DISubprogram(name: "getc", scope: !700, file: !700, line: 478, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!780 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !781)
!781 = !DISubprogram(name: "getchar", scope: !700, file: !700, line: 484, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!782 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !783)
!783 = !DISubprogram(name: "gets", scope: !700, file: !700, line: 577, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!784 = !DISubroutineType(types: !785)
!785 = !{!150, !150}
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !787)
!787 = !DISubprogram(name: "perror", scope: !700, file: !700, line: 775, type: !788, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DISubroutineType(types: !789)
!789 = !{null, !107}
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !791)
!791 = !DISubprogram(name: "printf", scope: !700, file: !700, line: 318, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!80, !174, null}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !795)
!795 = !DISubprogram(name: "putc", scope: !700, file: !700, line: 518, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !797)
!797 = !DISubprogram(name: "putchar", scope: !700, file: !700, line: 524, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !799)
!799 = !DISubprogram(name: "puts", scope: !700, file: !700, line: 632, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !801)
!801 = !DISubprogram(name: "remove", scope: !700, file: !700, line: 144, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !803)
!803 = !DISubprogram(name: "rename", scope: !700, file: !700, line: 146, type: !804, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DISubroutineType(types: !805)
!805 = !{!80, !107, !107}
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !807)
!807 = !DISubprogram(name: "rewind", scope: !700, file: !700, line: 694, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !809)
!809 = !DISubprogram(name: "scanf", scope: !700, file: !700, line: 383, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !811)
!811 = !DISubprogram(name: "setbuf", scope: !700, file: !700, line: 290, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{null, !725, !217}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !815)
!815 = !DISubprogram(name: "setvbuf", scope: !700, file: !700, line: 294, type: !816, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DISubroutineType(types: !817)
!817 = !{!80, !725, !217, !80, !123}
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !819)
!819 = !DISubprogram(name: "sprintf", scope: !700, file: !700, line: 320, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{!80, !217, !174, null}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !823)
!823 = !DISubprogram(name: "sscanf", scope: !700, file: !700, line: 385, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!80, !174, !174, null}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !827)
!827 = !DISubprogram(name: "tmpfile", scope: !700, file: !700, line: 159, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!708}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !831)
!831 = !DISubprogram(name: "tmpnam", scope: !700, file: !700, line: 173, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !833)
!833 = !DISubprogram(name: "ungetc", scope: !700, file: !700, line: 639, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !835)
!835 = !DISubprogram(name: "vfprintf", scope: !700, file: !700, line: 327, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!80, !725, !174, !443}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !839)
!839 = !DISubprogram(name: "vprintf", scope: !700, file: !700, line: 333, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DISubroutineType(types: !841)
!841 = !{!80, !174, !443}
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !843)
!843 = !DISubprogram(name: "vsprintf", scope: !700, file: !700, line: 335, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!80, !217, !174, !443}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !847)
!847 = !DISubprogram(name: "snprintf", scope: !700, file: !700, line: 340, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!80, !217, !123, !174, null}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !851)
!851 = !DISubprogram(name: "vfscanf", scope: !700, file: !700, line: 420, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !853)
!853 = !DISubprogram(name: "vscanf", scope: !700, file: !700, line: 428, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !855)
!855 = !DISubprogram(name: "vsnprintf", scope: !700, file: !700, line: 344, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!80, !217, !123, !174, !443}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !859)
!859 = !DISubprogram(name: "vsscanf", scope: !700, file: !700, line: 432, type: !860, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DISubroutineType(types: !861)
!861 = !{!80, !174, !174, !443}
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !847)
!863 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !851)
!864 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !853)
!865 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !855)
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !859)
!867 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !868)
!868 = !DISubprogram(name: "acos", scope: !869, file: !869, line: 53, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!869 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!870 = !DISubroutineType(types: !871)
!871 = !{!106, !106}
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !873)
!873 = !DISubprogram(name: "asin", scope: !869, file: !869, line: 55, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !875)
!875 = !DISubprogram(name: "atan", scope: !869, file: !869, line: 57, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!876 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !877)
!877 = !DISubprogram(name: "atan2", scope: !869, file: !869, line: 59, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!878 = !DISubroutineType(types: !879)
!879 = !{!106, !106, !106}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !881)
!881 = !DISubprogram(name: "ceil", scope: !869, file: !869, line: 159, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !883)
!883 = !DISubprogram(name: "cos", scope: !869, file: !869, line: 62, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !885)
!885 = !DISubprogram(name: "cosh", scope: !869, file: !869, line: 71, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !887)
!887 = !DISubprogram(name: "exp", scope: !869, file: !869, line: 95, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !889)
!889 = !DISubprogram(name: "fabs", scope: !869, file: !869, line: 162, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !891)
!891 = !DISubprogram(name: "floor", scope: !869, file: !869, line: 165, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !893)
!893 = !DISubprogram(name: "fmod", scope: !869, file: !869, line: 168, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !895)
!895 = !DISubprogram(name: "frexp", scope: !869, file: !869, line: 98, type: !896, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DISubroutineType(types: !897)
!897 = !{!106, !106, !898}
!898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!899 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !900)
!900 = !DISubprogram(name: "ldexp", scope: !869, file: !869, line: 101, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!901 = !DISubroutineType(types: !902)
!902 = !{!106, !106, !80}
!903 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !904)
!904 = !DISubprogram(name: "log", scope: !869, file: !869, line: 104, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!905 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !906)
!906 = !DISubprogram(name: "log10", scope: !869, file: !869, line: 107, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !908)
!908 = !DISubprogram(name: "modf", scope: !869, file: !869, line: 110, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!106, !106, !911}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!912 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !913)
!913 = !DISubprogram(name: "pow", scope: !869, file: !869, line: 140, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!914 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !915)
!915 = !DISubprogram(name: "sin", scope: !869, file: !869, line: 64, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!916 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !917)
!917 = !DISubprogram(name: "sinh", scope: !869, file: !869, line: 73, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!918 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !919)
!919 = !DISubprogram(name: "sqrt", scope: !869, file: !869, line: 143, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !921)
!921 = !DISubprogram(name: "tan", scope: !869, file: !869, line: 66, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !923)
!923 = !DISubprogram(name: "tanh", scope: !869, file: !869, line: 75, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !925)
!925 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !926, line: 150, baseType: !106)
!926 = !DIFile(filename: "/usr/include/math.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!927 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !928)
!928 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !926, line: 149, baseType: !260)
!929 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !930)
!930 = !DISubprogram(name: "acosh", scope: !869, file: !869, line: 85, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!931 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !932)
!932 = !DISubprogram(name: "acoshf", scope: !869, file: !869, line: 85, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!933 = !DISubroutineType(types: !934)
!934 = !{!260, !260}
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !936)
!936 = !DISubprogram(name: "acoshl", scope: !869, file: !869, line: 85, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!937 = !DISubroutineType(types: !938)
!938 = !{!265, !265}
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !940)
!940 = !DISubprogram(name: "asinh", scope: !869, file: !869, line: 87, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !942)
!942 = !DISubprogram(name: "asinhf", scope: !869, file: !869, line: 87, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !944)
!944 = !DISubprogram(name: "asinhl", scope: !869, file: !869, line: 87, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !946)
!946 = !DISubprogram(name: "atanh", scope: !869, file: !869, line: 89, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !948)
!948 = !DISubprogram(name: "atanhf", scope: !869, file: !869, line: 89, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !950)
!950 = !DISubprogram(name: "atanhl", scope: !869, file: !869, line: 89, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !952)
!952 = !DISubprogram(name: "cbrt", scope: !869, file: !869, line: 152, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !954)
!954 = !DISubprogram(name: "cbrtf", scope: !869, file: !869, line: 152, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !956)
!956 = !DISubprogram(name: "cbrtl", scope: !869, file: !869, line: 152, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !958)
!958 = !DISubprogram(name: "copysign", scope: !869, file: !869, line: 196, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !960)
!960 = !DISubprogram(name: "copysignf", scope: !869, file: !869, line: 196, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DISubroutineType(types: !962)
!962 = !{!260, !260, !260}
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !964)
!964 = !DISubprogram(name: "copysignl", scope: !869, file: !869, line: 196, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DISubroutineType(types: !966)
!966 = !{!265, !265, !265}
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !968)
!968 = !DISubprogram(name: "erf", scope: !869, file: !869, line: 228, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !970)
!970 = !DISubprogram(name: "erff", scope: !869, file: !869, line: 228, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !972)
!972 = !DISubprogram(name: "erfl", scope: !869, file: !869, line: 228, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !974)
!974 = !DISubprogram(name: "erfc", scope: !869, file: !869, line: 229, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !976)
!976 = !DISubprogram(name: "erfcf", scope: !869, file: !869, line: 229, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !978)
!978 = !DISubprogram(name: "erfcl", scope: !869, file: !869, line: 229, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !980)
!980 = !DISubprogram(name: "exp2", scope: !869, file: !869, line: 130, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !982)
!982 = !DISubprogram(name: "exp2f", scope: !869, file: !869, line: 130, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !984)
!984 = !DISubprogram(name: "exp2l", scope: !869, file: !869, line: 130, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !986)
!986 = !DISubprogram(name: "expm1", scope: !869, file: !869, line: 119, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !988)
!988 = !DISubprogram(name: "expm1f", scope: !869, file: !869, line: 119, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !990)
!990 = !DISubprogram(name: "expm1l", scope: !869, file: !869, line: 119, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !992)
!992 = !DISubprogram(name: "fdim", scope: !869, file: !869, line: 326, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !994)
!994 = !DISubprogram(name: "fdimf", scope: !869, file: !869, line: 326, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !996)
!996 = !DISubprogram(name: "fdiml", scope: !869, file: !869, line: 326, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !998)
!998 = !DISubprogram(name: "fma", scope: !869, file: !869, line: 335, type: !999, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!106, !106, !106, !106}
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1002)
!1002 = !DISubprogram(name: "fmaf", scope: !869, file: !869, line: 335, type: !1003, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!260, !260, !260, !260}
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1006)
!1006 = !DISubprogram(name: "fmal", scope: !869, file: !869, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!265, !265, !265, !265}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1010)
!1010 = !DISubprogram(name: "fmax", scope: !869, file: !869, line: 329, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1012)
!1012 = !DISubprogram(name: "fmaxf", scope: !869, file: !869, line: 329, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1014)
!1014 = !DISubprogram(name: "fmaxl", scope: !869, file: !869, line: 329, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1016)
!1016 = !DISubprogram(name: "fmin", scope: !869, file: !869, line: 332, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1018)
!1018 = !DISubprogram(name: "fminf", scope: !869, file: !869, line: 332, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1020)
!1020 = !DISubprogram(name: "fminl", scope: !869, file: !869, line: 332, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1022)
!1022 = !DISubprogram(name: "hypot", scope: !869, file: !869, line: 147, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1024)
!1024 = !DISubprogram(name: "hypotf", scope: !869, file: !869, line: 147, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1026)
!1026 = !DISubprogram(name: "hypotl", scope: !869, file: !869, line: 147, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1028)
!1028 = !DISubprogram(name: "ilogb", scope: !869, file: !869, line: 280, type: !1029, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DISubroutineType(types: !1030)
!1030 = !{!80, !106}
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1032)
!1032 = !DISubprogram(name: "ilogbf", scope: !869, file: !869, line: 280, type: !1033, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DISubroutineType(types: !1034)
!1034 = !{!80, !260}
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1036)
!1036 = !DISubprogram(name: "ilogbl", scope: !869, file: !869, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!80, !265}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1040)
!1040 = !DISubprogram(name: "lgamma", scope: !869, file: !869, line: 230, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1042)
!1042 = !DISubprogram(name: "lgammaf", scope: !869, file: !869, line: 230, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1044)
!1044 = !DISubprogram(name: "lgammal", scope: !869, file: !869, line: 230, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1046)
!1046 = !DISubprogram(name: "llrint", scope: !869, file: !869, line: 316, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1047 = !DISubroutineType(types: !1048)
!1048 = !{!231, !106}
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1050)
!1050 = !DISubprogram(name: "llrintf", scope: !869, file: !869, line: 316, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!231, !260}
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1054)
!1054 = !DISubprogram(name: "llrintl", scope: !869, file: !869, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!231, !265}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1058)
!1058 = !DISubprogram(name: "llround", scope: !869, file: !869, line: 322, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1060)
!1060 = !DISubprogram(name: "llroundf", scope: !869, file: !869, line: 322, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1062)
!1062 = !DISubprogram(name: "llroundl", scope: !869, file: !869, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1064)
!1064 = !DISubprogram(name: "log1p", scope: !869, file: !869, line: 122, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1066)
!1066 = !DISubprogram(name: "log1pf", scope: !869, file: !869, line: 122, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1068)
!1068 = !DISubprogram(name: "log1pl", scope: !869, file: !869, line: 122, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1070)
!1070 = !DISubprogram(name: "log2", scope: !869, file: !869, line: 133, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1072)
!1072 = !DISubprogram(name: "log2f", scope: !869, file: !869, line: 133, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1074)
!1074 = !DISubprogram(name: "log2l", scope: !869, file: !869, line: 133, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1076)
!1076 = !DISubprogram(name: "logb", scope: !869, file: !869, line: 125, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1078)
!1078 = !DISubprogram(name: "logbf", scope: !869, file: !869, line: 125, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1080)
!1080 = !DISubprogram(name: "logbl", scope: !869, file: !869, line: 125, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1082)
!1082 = !DISubprogram(name: "lrint", scope: !869, file: !869, line: 314, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!89, !106}
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1086)
!1086 = !DISubprogram(name: "lrintf", scope: !869, file: !869, line: 314, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DISubroutineType(types: !1088)
!1088 = !{!89, !260}
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1090)
!1090 = !DISubprogram(name: "lrintl", scope: !869, file: !869, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!89, !265}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1094)
!1094 = !DISubprogram(name: "lround", scope: !869, file: !869, line: 320, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1096)
!1096 = !DISubprogram(name: "lroundf", scope: !869, file: !869, line: 320, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1098)
!1098 = !DISubprogram(name: "lroundl", scope: !869, file: !869, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1100)
!1100 = !DISubprogram(name: "nan", scope: !869, file: !869, line: 201, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1102)
!1102 = !DISubprogram(name: "nanf", scope: !869, file: !869, line: 201, type: !1103, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!260, !107}
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1106)
!1106 = !DISubprogram(name: "nanl", scope: !869, file: !869, line: 201, type: !1107, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!265, !107}
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1110)
!1110 = !DISubprogram(name: "nearbyint", scope: !869, file: !869, line: 294, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1112)
!1112 = !DISubprogram(name: "nearbyintf", scope: !869, file: !869, line: 294, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1114)
!1114 = !DISubprogram(name: "nearbyintl", scope: !869, file: !869, line: 294, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1116)
!1116 = !DISubprogram(name: "nextafter", scope: !869, file: !869, line: 259, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1118)
!1118 = !DISubprogram(name: "nextafterf", scope: !869, file: !869, line: 259, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1120)
!1120 = !DISubprogram(name: "nextafterl", scope: !869, file: !869, line: 259, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1122)
!1122 = !DISubprogram(name: "nexttoward", scope: !869, file: !869, line: 261, type: !1123, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!106, !106, !265}
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1126)
!1126 = !DISubprogram(name: "nexttowardf", scope: !869, file: !869, line: 261, type: !1127, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DISubroutineType(types: !1128)
!1128 = !{!260, !260, !265}
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1130)
!1130 = !DISubprogram(name: "nexttowardl", scope: !869, file: !869, line: 261, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1132)
!1132 = !DISubprogram(name: "remainder", scope: !869, file: !869, line: 272, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1134)
!1134 = !DISubprogram(name: "remainderf", scope: !869, file: !869, line: 272, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1136)
!1136 = !DISubprogram(name: "remainderl", scope: !869, file: !869, line: 272, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1138)
!1138 = !DISubprogram(name: "remquo", scope: !869, file: !869, line: 307, type: !1139, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!106, !106, !106, !898}
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1142)
!1142 = !DISubprogram(name: "remquof", scope: !869, file: !869, line: 307, type: !1143, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!260, !260, !260, !898}
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1146)
!1146 = !DISubprogram(name: "remquol", scope: !869, file: !869, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!265, !265, !265, !898}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1150)
!1150 = !DISubprogram(name: "rint", scope: !869, file: !869, line: 256, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1152)
!1152 = !DISubprogram(name: "rintf", scope: !869, file: !869, line: 256, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1154)
!1154 = !DISubprogram(name: "rintl", scope: !869, file: !869, line: 256, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1156)
!1156 = !DISubprogram(name: "round", scope: !869, file: !869, line: 298, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1158)
!1158 = !DISubprogram(name: "roundf", scope: !869, file: !869, line: 298, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1160)
!1160 = !DISubprogram(name: "roundl", scope: !869, file: !869, line: 298, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1162)
!1162 = !DISubprogram(name: "scalbln", scope: !869, file: !869, line: 290, type: !1163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!106, !106, !89}
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1166)
!1166 = !DISubprogram(name: "scalblnf", scope: !869, file: !869, line: 290, type: !1167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DISubroutineType(types: !1168)
!1168 = !{!260, !260, !89}
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1170)
!1170 = !DISubprogram(name: "scalblnl", scope: !869, file: !869, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!265, !265, !89}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1174)
!1174 = !DISubprogram(name: "scalbn", scope: !869, file: !869, line: 276, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1176)
!1176 = !DISubprogram(name: "scalbnf", scope: !869, file: !869, line: 276, type: !1177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{!260, !260, !80}
!1179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1180)
!1180 = !DISubprogram(name: "scalbnl", scope: !869, file: !869, line: 276, type: !1181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!265, !265, !80}
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1184)
!1184 = !DISubprogram(name: "tgamma", scope: !869, file: !869, line: 235, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1186)
!1186 = !DISubprogram(name: "tgammaf", scope: !869, file: !869, line: 235, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1188)
!1188 = !DISubprogram(name: "tgammal", scope: !869, file: !869, line: 235, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1190)
!1190 = !DISubprogram(name: "trunc", scope: !869, file: !869, line: 302, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1192)
!1192 = !DISubprogram(name: "truncf", scope: !869, file: !869, line: 302, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1194)
!1194 = !DISubprogram(name: "truncl", scope: !869, file: !869, line: 302, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1197, line: 94, baseType: !1198)
!1197 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1197, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1197, line: 68, baseType: !29)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1202)
!1202 = !DISubprogram(name: "feclearexcept", scope: !1203, file: !1203, line: 71, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1205)
!1205 = !DISubprogram(name: "fegetexceptflag", scope: !1203, file: !1203, line: 75, type: !1206, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!80, !1208, !80}
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1200, size: 64)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1210)
!1210 = !DISubprogram(name: "feraiseexcept", scope: !1203, file: !1203, line: 78, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1212)
!1212 = !DISubprogram(name: "fesetexceptflag", scope: !1203, file: !1203, line: 88, type: !1213, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1213 = !DISubroutineType(types: !1214)
!1214 = !{!80, !1215, !80}
!1215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1216, size: 64)
!1216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1200)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1218)
!1218 = !DISubprogram(name: "fetestexcept", scope: !1203, file: !1203, line: 92, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1220)
!1220 = !DISubprogram(name: "fegetround", scope: !1203, file: !1203, line: 104, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1222)
!1222 = !DISubprogram(name: "fesetround", scope: !1203, file: !1203, line: 107, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1224)
!1224 = !DISubprogram(name: "fegetenv", scope: !1203, file: !1203, line: 114, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1225 = !DISubroutineType(types: !1226)
!1226 = !{!80, !1227}
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1228 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1229)
!1229 = !DISubprogram(name: "feholdexcept", scope: !1203, file: !1203, line: 119, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1231)
!1231 = !DISubprogram(name: "fesetenv", scope: !1203, file: !1203, line: 123, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1232 = !DISubroutineType(types: !1233)
!1233 = !{!80, !1234}
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1196)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1237)
!1237 = !DISubprogram(name: "feupdateenv", scope: !1203, file: !1203, line: 128, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !{i32 2, !"Dwarf Version", i32 4}
!1239 = !{i32 2, !"Debug Info Version", i32 3}
!1240 = !{!1241, !1241, i64 0}
!1241 = !{!"long", !1242, i64 0}
!1242 = !{!"omnipotent char", !1243, i64 0}
!1243 = !{!"Simple C++ TBAA"}
!1244 = !{!1242, !1242, i64 0}
!1245 = !{!1246, !1242, i64 2065}
!1246 = !{!"_ZTS5State", !1242, i64 16, !1247, i64 2064, !1242, i64 2080, !1248, i64 2088, !1250, i64 2112, !1252, i64 2208, !1253, i64 2480, !1254, i64 2608, !1255, i64 2736, !1242, i64 2760, !1242, i64 2768, !1256, i64 3280}
!1247 = !{!"_ZTS10ArithFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15}
!1248 = !{!"_ZTS8Segments", !1249, i64 0, !1242, i64 2, !1249, i64 4, !1242, i64 6, !1249, i64 8, !1242, i64 10, !1249, i64 12, !1242, i64 14, !1249, i64 16, !1242, i64 18, !1249, i64 20, !1242, i64 22}
!1249 = !{!"short", !1242, i64 0}
!1250 = !{!"_ZTS12AddressSpace", !1241, i64 0, !1251, i64 8, !1241, i64 16, !1251, i64 24, !1241, i64 32, !1251, i64 40, !1241, i64 48, !1251, i64 56, !1241, i64 64, !1251, i64 72, !1241, i64 80, !1251, i64 88}
!1251 = !{!"_ZTS3Reg", !1242, i64 0}
!1252 = !{!"_ZTS3GPR", !1241, i64 0, !1251, i64 8, !1241, i64 16, !1251, i64 24, !1241, i64 32, !1251, i64 40, !1241, i64 48, !1251, i64 56, !1241, i64 64, !1251, i64 72, !1241, i64 80, !1251, i64 88, !1241, i64 96, !1251, i64 104, !1241, i64 112, !1251, i64 120, !1241, i64 128, !1251, i64 136, !1241, i64 144, !1251, i64 152, !1241, i64 160, !1251, i64 168, !1241, i64 176, !1251, i64 184, !1241, i64 192, !1251, i64 200, !1241, i64 208, !1251, i64 216, !1241, i64 224, !1251, i64 232, !1241, i64 240, !1251, i64 248, !1241, i64 256, !1251, i64 264}
!1253 = !{!"_ZTS8X87Stack", !1242, i64 0}
!1254 = !{!"_ZTS3MMX", !1242, i64 0}
!1255 = !{!"_ZTS14FPUStatusFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15, !1242, i64 16, !1242, i64 17, !1242, i64 18, !1242, i64 19, !1242, i64 20}
!1256 = !{!"_ZTS13SegmentCaches", !1257, i64 0, !1257, i64 16, !1257, i64 32, !1257, i64 48, !1257, i64 64, !1257, i64 80}
!1257 = !{!"_ZTS13SegmentShadow", !1242, i64 0, !1258, i64 8, !1258, i64 12}
!1258 = !{!"int", !1242, i64 0}
!1259 = !{!1246, !1242, i64 2067}
!1260 = !{!1246, !1242, i64 2071}
!1261 = !{!1246, !1242, i64 2073}
!1262 = !{!1246, !1242, i64 2077}
!1263 = !{!1246, !1242, i64 2069}
!1264 = !{!1265, !1265, i64 0}
!1265 = !{!"double", !1242, i64 0}
!1266 = !{!1258, !1258, i64 0}
!1267 = !{!1268}
!1268 = distinct !{!1268, !1269, !"ext_400660_printf: argument 0"}
!1269 = distinct !{!1269, !"ext_400660_printf"}
!1270 = !{!1271}
!1271 = distinct !{!1271, !1269, !"ext_400660_printf: argument 1"}
!1272 = !{!1273}
!1273 = distinct !{!1273, !1274, !"ext_400660_printf: argument 0"}
!1274 = distinct !{!1274, !"ext_400660_printf"}
!1275 = !{!1276}
!1276 = distinct !{!1276, !1274, !"ext_400660_printf: argument 1"}
!1277 = !{!1278}
!1278 = distinct !{!1278, !1279, !"ext_400660_printf: argument 0"}
!1279 = distinct !{!1279, !"ext_400660_printf"}
!1280 = !{!1281}
!1281 = distinct !{!1281, !1279, !"ext_400660_printf: argument 1"}
!1282 = !{!1283}
!1283 = distinct !{!1283, !1284, !"ext_400660_printf: argument 0"}
!1284 = distinct !{!1284, !"ext_400660_printf"}
!1285 = !{!1286}
!1286 = distinct !{!1286, !1284, !"ext_400660_printf: argument 1"}
!1287 = !{!1288}
!1288 = distinct !{!1288, !1289, !"ext_400660_printf: argument 0"}
!1289 = distinct !{!1289, !"ext_400660_printf"}
!1290 = !{!1291}
!1291 = distinct !{!1291, !1289, !"ext_400660_printf: argument 1"}
!1292 = !{!1293, !1293, i64 0}
!1293 = !{!"float", !1242, i64 0}
!1294 = !{!1295}
!1295 = distinct !{!1295, !1296, !"ext_400660_printf: argument 0"}
!1296 = distinct !{!1296, !"ext_400660_printf"}
!1297 = !{!1298}
!1298 = distinct !{!1298, !1296, !"ext_400660_printf: argument 1"}
!1299 = !{!1300}
!1300 = distinct !{!1300, !1301, !"ext_400660_printf: argument 0"}
!1301 = distinct !{!1301, !"ext_400660_printf"}
!1302 = !{!1303}
!1303 = distinct !{!1303, !1301, !"ext_400660_printf: argument 1"}
!1304 = !{!1305}
!1305 = distinct !{!1305, !1306, !"ext_400660_printf: argument 0"}
!1306 = distinct !{!1306, !"ext_400660_printf"}
!1307 = !{!1308}
!1308 = distinct !{!1308, !1306, !"ext_400660_printf: argument 1"}
!1309 = !{!1310}
!1310 = distinct !{!1310, !1311, !"ext_400660_printf: argument 0"}
!1311 = distinct !{!1311, !"ext_400660_printf"}
!1312 = !{!1313}
!1313 = distinct !{!1313, !1311, !"ext_400660_printf: argument 1"}
!1314 = !{!1315}
!1315 = distinct !{!1315, !1316, !"ext_400660_printf: argument 0"}
!1316 = distinct !{!1316, !"ext_400660_printf"}
!1317 = !{!1318}
!1318 = distinct !{!1318, !1316, !"ext_400660_printf: argument 1"}
!1319 = !{!1320}
!1320 = distinct !{!1320, !1321, !"ext_400660_printf: argument 0"}
!1321 = distinct !{!1321, !"ext_400660_printf"}
!1322 = !{!1323}
!1323 = distinct !{!1323, !1321, !"ext_400660_printf: argument 1"}
!1324 = !{!1325}
!1325 = distinct !{!1325, !1326, !"ext_400660_printf: argument 0"}
!1326 = distinct !{!1326, !"ext_400660_printf"}
!1327 = !{!1328}
!1328 = distinct !{!1328, !1326, !"ext_400660_printf: argument 1"}
!1329 = !{!1330}
!1330 = distinct !{!1330, !1331, !"ext_400660_printf: argument 0"}
!1331 = distinct !{!1331, !"ext_400660_printf"}
!1332 = !{!1333}
!1333 = distinct !{!1333, !1331, !"ext_400660_printf: argument 1"}
!1334 = !{!1335}
!1335 = distinct !{!1335, !1336, !"ext_400660_printf: argument 0"}
!1336 = distinct !{!1336, !"ext_400660_printf"}
!1337 = !{!1338}
!1338 = distinct !{!1338, !1336, !"ext_400660_printf: argument 1"}
!1339 = !{!1340}
!1340 = distinct !{!1340, !1341, !"ext_400660_printf: argument 0"}
!1341 = distinct !{!1341, !"ext_400660_printf"}
!1342 = !{!1343}
!1343 = distinct !{!1343, !1341, !"ext_400660_printf: argument 1"}
!1344 = !{!1345}
!1345 = distinct !{!1345, !1346, !"ext_400660_printf: argument 0"}
!1346 = distinct !{!1346, !"ext_400660_printf"}
!1347 = !{!1348}
!1348 = distinct !{!1348, !1346, !"ext_400660_printf: argument 1"}
!1349 = !{!1350}
!1350 = distinct !{!1350, !1351, !"ext_400660_printf: argument 0"}
!1351 = distinct !{!1351, !"ext_400660_printf"}
!1352 = !{!1353}
!1353 = distinct !{!1353, !1351, !"ext_400660_printf: argument 1"}
!1354 = !{!1355}
!1355 = distinct !{!1355, !1356, !"ext_400660_printf: argument 0"}
!1356 = distinct !{!1356, !"ext_400660_printf"}
!1357 = !{!1358}
!1358 = distinct !{!1358, !1356, !"ext_400660_printf: argument 1"}
!1359 = !{!1360}
!1360 = distinct !{!1360, !1361, !"ext_400660_printf: argument 0"}
!1361 = distinct !{!1361, !"ext_400660_printf"}
!1362 = !{!1363}
!1363 = distinct !{!1363, !1361, !"ext_400660_printf: argument 1"}
!1364 = !{!1365}
!1365 = distinct !{!1365, !1366, !"ext_400660_printf: argument 0"}
!1366 = distinct !{!1366, !"ext_400660_printf"}
!1367 = !{!1368}
!1368 = distinct !{!1368, !1366, !"ext_400660_printf: argument 1"}
!1369 = !{!1370}
!1370 = distinct !{!1370, !1371, !"ext_400660_printf: argument 0"}
!1371 = distinct !{!1371, !"ext_400660_printf"}
!1372 = !{!1373}
!1373 = distinct !{!1373, !1371, !"ext_400660_printf: argument 1"}
!1374 = !{!1375}
!1375 = distinct !{!1375, !1376, !"ext_400660_printf: argument 0"}
!1376 = distinct !{!1376, !"ext_400660_printf"}
!1377 = !{!1378}
!1378 = distinct !{!1378, !1376, !"ext_400660_printf: argument 1"}
!1379 = !{!1380}
!1380 = distinct !{!1380, !1381, !"ext_400660_printf: argument 0"}
!1381 = distinct !{!1381, !"ext_400660_printf"}
!1382 = !{!1383}
!1383 = distinct !{!1383, !1381, !"ext_400660_printf: argument 1"}
!1384 = !{!1385}
!1385 = distinct !{!1385, !1386, !"ext_67fe70_gettimeofday: argument 0"}
!1386 = distinct !{!1386, !"ext_67fe70_gettimeofday"}
!1387 = !{!1388}
!1388 = distinct !{!1388, !1386, !"ext_67fe70_gettimeofday: argument 1"}
!1389 = !{!1390}
!1390 = distinct !{!1390, !1391, !"ext_400660_printf: argument 0"}
!1391 = distinct !{!1391, !"ext_400660_printf"}
!1392 = !{!1393}
!1393 = distinct !{!1393, !1391, !"ext_400660_printf: argument 1"}
!1394 = !{!1395}
!1395 = distinct !{!1395, !1396, !"ext_4006a0_fopen: argument 0"}
!1396 = distinct !{!1396, !"ext_4006a0_fopen"}
!1397 = !{!1398}
!1398 = distinct !{!1398, !1396, !"ext_4006a0_fopen: argument 1"}
!1399 = !{!1400}
!1400 = distinct !{!1400, !1401, !"ext_400660_printf: argument 0"}
!1401 = distinct !{!1401, !"ext_400660_printf"}
!1402 = !{!1403}
!1403 = distinct !{!1403, !1401, !"ext_400660_printf: argument 1"}
!1404 = !{!1405}
!1405 = distinct !{!1405, !1406, !"ext_400660_printf: argument 0"}
!1406 = distinct !{!1406, !"ext_400660_printf"}
!1407 = !{!1408}
!1408 = distinct !{!1408, !1406, !"ext_400660_printf: argument 1"}
!1409 = !{!1410}
!1410 = distinct !{!1410, !1411, !"ext_400660_printf: argument 0"}
!1411 = distinct !{!1411, !"ext_400660_printf"}
!1412 = !{!1413}
!1413 = distinct !{!1413, !1411, !"ext_400660_printf: argument 1"}
!1414 = !{!1415}
!1415 = distinct !{!1415, !1416, !"ext_400690_fgetc: argument 0"}
!1416 = distinct !{!1416, !"ext_400690_fgetc"}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1416, !"ext_400690_fgetc: argument 1"}
!1419 = !{!1420}
!1420 = distinct !{!1420, !1421, !"ext_400690_fgetc: argument 0"}
!1421 = distinct !{!1421, !"ext_400690_fgetc"}
!1422 = !{!1423}
!1423 = distinct !{!1423, !1421, !"ext_400690_fgetc: argument 1"}
!1424 = !{!1425}
!1425 = distinct !{!1425, !1426, !"ext_400690_fgetc: argument 0"}
!1426 = distinct !{!1426, !"ext_400690_fgetc"}
!1427 = !{!1428}
!1428 = distinct !{!1428, !1426, !"ext_400690_fgetc: argument 1"}
!1429 = !{!1430}
!1430 = distinct !{!1430, !1431, !"ext_400690_fgetc: argument 0"}
!1431 = distinct !{!1431, !"ext_400690_fgetc"}
!1432 = !{!1433}
!1433 = distinct !{!1433, !1431, !"ext_400690_fgetc: argument 1"}
!1434 = !{!1435}
!1435 = distinct !{!1435, !1436, !"ext_400660_printf: argument 0"}
!1436 = distinct !{!1436, !"ext_400660_printf"}
!1437 = !{!1438}
!1438 = distinct !{!1438, !1436, !"ext_400660_printf: argument 1"}
!1439 = !{!1440}
!1440 = distinct !{!1440, !1441, !"ext_4006c0_exit: argument 0"}
!1441 = distinct !{!1441, !"ext_4006c0_exit"}
!1442 = !{!1443}
!1443 = distinct !{!1443, !1441, !"ext_4006c0_exit: argument 1"}
!1444 = !{!1445}
!1445 = distinct !{!1445, !1446, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1446 = distinct !{!1446, !"ext_67fe58___isoc99_fscanf"}
!1447 = !{!1448}
!1448 = distinct !{!1448, !1446, !"ext_67fe58___isoc99_fscanf: argument 1"}
!1449 = !{!1450}
!1450 = distinct !{!1450, !1451, !"ext_400690_fgetc: argument 0"}
!1451 = distinct !{!1451, !"ext_400690_fgetc"}
!1452 = !{!1453}
!1453 = distinct !{!1453, !1451, !"ext_400690_fgetc: argument 1"}
!1454 = !{!1455}
!1455 = distinct !{!1455, !1456, !"ext_400690_fgetc: argument 0"}
!1456 = distinct !{!1456, !"ext_400690_fgetc"}
!1457 = !{!1458}
!1458 = distinct !{!1458, !1456, !"ext_400690_fgetc: argument 1"}
!1459 = !{!1460}
!1460 = distinct !{!1460, !1461, !"ext_400690_fgetc: argument 0"}
!1461 = distinct !{!1461, !"ext_400690_fgetc"}
!1462 = !{!1463}
!1463 = distinct !{!1463, !1461, !"ext_400690_fgetc: argument 1"}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1466, !"ext_400690_fgetc: argument 0"}
!1466 = distinct !{!1466, !"ext_400690_fgetc"}
!1467 = !{!1468}
!1468 = distinct !{!1468, !1466, !"ext_400690_fgetc: argument 1"}
!1469 = !{!1470}
!1470 = distinct !{!1470, !1471, !"ext_400690_fgetc: argument 0"}
!1471 = distinct !{!1471, !"ext_400690_fgetc"}
!1472 = !{!1473}
!1473 = distinct !{!1473, !1471, !"ext_400690_fgetc: argument 1"}
!1474 = !{!1475}
!1475 = distinct !{!1475, !1476, !"ext_400690_fgetc: argument 0"}
!1476 = distinct !{!1476, !"ext_400690_fgetc"}
!1477 = !{!1478}
!1478 = distinct !{!1478, !1476, !"ext_400690_fgetc: argument 1"}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1481, !"ext_400690_fgetc: argument 0"}
!1481 = distinct !{!1481, !"ext_400690_fgetc"}
!1482 = !{!1483}
!1483 = distinct !{!1483, !1481, !"ext_400690_fgetc: argument 1"}
!1484 = !{!1485}
!1485 = distinct !{!1485, !1486, !"ext_400660_printf: argument 0"}
!1486 = distinct !{!1486, !"ext_400660_printf"}
!1487 = !{!1488}
!1488 = distinct !{!1488, !1486, !"ext_400660_printf: argument 1"}
!1489 = !{!1490}
!1490 = distinct !{!1490, !1491, !"ext_400660_printf: argument 0"}
!1491 = distinct !{!1491, !"ext_400660_printf"}
!1492 = !{!1493}
!1493 = distinct !{!1493, !1491, !"ext_400660_printf: argument 1"}
!1494 = !{!1495}
!1495 = distinct !{!1495, !1496, !"ext_4006c0_exit: argument 0"}
!1496 = distinct !{!1496, !"ext_4006c0_exit"}
!1497 = !{!1498}
!1498 = distinct !{!1498, !1496, !"ext_4006c0_exit: argument 1"}
!1499 = !{!1500}
!1500 = distinct !{!1500, !1501, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1501 = distinct !{!1501, !"ext_67fe58___isoc99_fscanf"}
!1502 = !{!1503}
!1503 = distinct !{!1503, !1501, !"ext_67fe58___isoc99_fscanf: argument 1"}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1506, !"ext_400690_fgetc: argument 0"}
!1506 = distinct !{!1506, !"ext_400690_fgetc"}
!1507 = !{!1508}
!1508 = distinct !{!1508, !1506, !"ext_400690_fgetc: argument 1"}
!1509 = !{!1510}
!1510 = distinct !{!1510, !1511, !"ext_400690_fgetc: argument 0"}
!1511 = distinct !{!1511, !"ext_400690_fgetc"}
!1512 = !{!1513}
!1513 = distinct !{!1513, !1511, !"ext_400690_fgetc: argument 1"}
!1514 = !{!1515}
!1515 = distinct !{!1515, !1516, !"ext_400690_fgetc: argument 0"}
!1516 = distinct !{!1516, !"ext_400690_fgetc"}
!1517 = !{!1518}
!1518 = distinct !{!1518, !1516, !"ext_400690_fgetc: argument 1"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1521, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1521 = distinct !{!1521, !"ext_67fe58___isoc99_fscanf"}
!1522 = !{!1523}
!1523 = distinct !{!1523, !1521, !"ext_67fe58___isoc99_fscanf: argument 1"}
!1524 = !{!1525}
!1525 = distinct !{!1525, !1526, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1526 = distinct !{!1526, !"ext_67fe58___isoc99_fscanf"}
!1527 = !{!1528}
!1528 = distinct !{!1528, !1526, !"ext_67fe58___isoc99_fscanf: argument 1"}
!1529 = !{!1530}
!1530 = distinct !{!1530, !1531, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1531 = distinct !{!1531, !"ext_67fe58___isoc99_fscanf"}
!1532 = !{!1533}
!1533 = distinct !{!1533, !1531, !"ext_67fe58___isoc99_fscanf: argument 1"}
!1534 = !{!1535}
!1535 = distinct !{!1535, !1536, !"ext_400690_fgetc: argument 0"}
!1536 = distinct !{!1536, !"ext_400690_fgetc"}
!1537 = !{!1538}
!1538 = distinct !{!1538, !1536, !"ext_400690_fgetc: argument 1"}
!1539 = !{!1540}
!1540 = distinct !{!1540, !1541, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1541 = distinct !{!1541, !"ext_67fe58___isoc99_fscanf"}
!1542 = !{!1543}
!1543 = distinct !{!1543, !1541, !"ext_67fe58___isoc99_fscanf: argument 1"}
!1544 = !{!1545}
!1545 = distinct !{!1545, !1546, !"ext_400650_fclose: argument 0"}
!1546 = distinct !{!1546, !"ext_400650_fclose"}
!1547 = !{!1548}
!1548 = distinct !{!1548, !1546, !"ext_400650_fclose: argument 1"}
!1549 = !{!1550}
!1550 = distinct !{!1550, !1551, !"ext_400690_fgetc: argument 0"}
!1551 = distinct !{!1551, !"ext_400690_fgetc"}
!1552 = !{!1553}
!1553 = distinct !{!1553, !1551, !"ext_400690_fgetc: argument 1"}
!1554 = !{!1555}
!1555 = distinct !{!1555, !1556, !"ext_400660_printf: argument 0"}
!1556 = distinct !{!1556, !"ext_400660_printf"}
!1557 = !{!1558}
!1558 = distinct !{!1558, !1556, !"ext_400660_printf: argument 1"}
!1559 = !{!1560}
!1560 = distinct !{!1560, !1561, !"ext_400660_printf: argument 0"}
!1561 = distinct !{!1561, !"ext_400660_printf"}
!1562 = !{!1563}
!1563 = distinct !{!1563, !1561, !"ext_400660_printf: argument 1"}
!1564 = !{!1565}
!1565 = distinct !{!1565, !1566, !"ext_400660_printf: argument 0"}
!1566 = distinct !{!1566, !"ext_400660_printf"}
!1567 = !{!1568}
!1568 = distinct !{!1568, !1566, !"ext_400660_printf: argument 1"}
!1569 = !{!1570}
!1570 = distinct !{!1570, !1571, !"ext_4006c0_exit: argument 0"}
!1571 = distinct !{!1571, !"ext_4006c0_exit"}
!1572 = !{!1573}
!1573 = distinct !{!1573, !1571, !"ext_4006c0_exit: argument 1"}
!1574 = !{!1575}
!1575 = distinct !{!1575, !1576, !"ext_400660_printf: argument 0"}
!1576 = distinct !{!1576, !"ext_400660_printf"}
!1577 = !{!1578}
!1578 = distinct !{!1578, !1576, !"ext_400660_printf: argument 1"}
!1579 = !{!1580}
!1580 = distinct !{!1580, !1581, !"ext_4006c0_exit: argument 0"}
!1581 = distinct !{!1581, !"ext_4006c0_exit"}
!1582 = !{!1583}
!1583 = distinct !{!1583, !1581, !"ext_4006c0_exit: argument 1"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1586, !"ext_4006d0_sqrt: argument 0"}
!1586 = distinct !{!1586, !"ext_4006d0_sqrt"}
!1587 = !{!1588}
!1588 = distinct !{!1588, !1586, !"ext_4006d0_sqrt: argument 1"}
!1589 = !{!1590}
!1590 = distinct !{!1590, !1591, !"ext_67fe88___libc_start_main: argument 0"}
!1591 = distinct !{!1591, !"ext_67fe88___libc_start_main"}
!1592 = !{!1593}
!1593 = distinct !{!1593, !1591, !"ext_67fe88___libc_start_main: argument 1"}
!1594 = !{!1595}
!1595 = distinct !{!1595, !1596, !"ext_400660_printf: argument 0"}
!1596 = distinct !{!1596, !"ext_400660_printf"}
!1597 = !{!1598}
!1598 = distinct !{!1598, !1596, !"ext_400660_printf: argument 1"}
!1599 = !{!1600}
!1600 = distinct !{!1600, !1601, !"ext_400660_printf: argument 0"}
!1601 = distinct !{!1601, !"ext_400660_printf"}
!1602 = !{!1603}
!1603 = distinct !{!1603, !1601, !"ext_400660_printf: argument 1"}
!1604 = !{!1605}
!1605 = distinct !{!1605, !1606, !"ext_400660_printf: argument 0"}
!1606 = distinct !{!1606, !"ext_400660_printf"}
!1607 = !{!1608}
!1608 = distinct !{!1608, !1606, !"ext_400660_printf: argument 1"}
!1609 = !{!1610}
!1610 = distinct !{!1610, !1611, !"ext_400660_printf: argument 0"}
!1611 = distinct !{!1611, !"ext_400660_printf"}
!1612 = !{!1613}
!1613 = distinct !{!1613, !1611, !"ext_400660_printf: argument 1"}
!1614 = !{!1615}
!1615 = distinct !{!1615, !1616, !"ext_400660_printf: argument 0"}
!1616 = distinct !{!1616, !"ext_400660_printf"}
!1617 = !{!1618}
!1618 = distinct !{!1618, !1616, !"ext_400660_printf: argument 1"}
!1619 = !{!1620}
!1620 = distinct !{!1620, !1621, !"ext_400660_printf: argument 0"}
!1621 = distinct !{!1621, !"ext_400660_printf"}
!1622 = !{!1623}
!1623 = distinct !{!1623, !1621, !"ext_400660_printf: argument 1"}
!1624 = !{!1625}
!1625 = distinct !{!1625, !1626, !"ext_400660_printf: argument 0"}
!1626 = distinct !{!1626, !"ext_400660_printf"}
!1627 = !{!1628}
!1628 = distinct !{!1628, !1626, !"ext_400660_printf: argument 1"}
!1629 = !{!1630}
!1630 = distinct !{!1630, !1631, !"ext_400660_printf: argument 0"}
!1631 = distinct !{!1631, !"ext_400660_printf"}
!1632 = !{!1633}
!1633 = distinct !{!1633, !1631, !"ext_400660_printf: argument 1"}
!1634 = !{!1635}
!1635 = distinct !{!1635, !1636, !"ext_400660_printf: argument 0"}
!1636 = distinct !{!1636, !"ext_400660_printf"}
!1637 = !{!1638}
!1638 = distinct !{!1638, !1636, !"ext_400660_printf: argument 1"}
!1639 = !{!1640}
!1640 = distinct !{!1640, !1641, !"ext_400660_printf: argument 0"}
!1641 = distinct !{!1641, !"ext_400660_printf"}
!1642 = !{!1643}
!1643 = distinct !{!1643, !1641, !"ext_400660_printf: argument 1"}
!1644 = !{!1645}
!1645 = distinct !{!1645, !1646, !"ext_400660_printf: argument 0"}
!1646 = distinct !{!1646, !"ext_400660_printf"}
!1647 = !{!1648}
!1648 = distinct !{!1648, !1646, !"ext_400660_printf: argument 1"}
!1649 = !{!1650}
!1650 = distinct !{!1650, !1651, !"ext_400660_printf: argument 0"}
!1651 = distinct !{!1651, !"ext_400660_printf"}
!1652 = !{!1653}
!1653 = distinct !{!1653, !1651, !"ext_400660_printf: argument 1"}
!1654 = !{!1655}
!1655 = distinct !{!1655, !1656, !"ext_400660_printf: argument 0"}
!1656 = distinct !{!1656, !"ext_400660_printf"}
!1657 = !{!1658}
!1658 = distinct !{!1658, !1656, !"ext_400660_printf: argument 1"}
!1659 = !{!1660}
!1660 = distinct !{!1660, !1661, !"ext_400660_printf: argument 0"}
!1661 = distinct !{!1661, !"ext_400660_printf"}
!1662 = !{!1663}
!1663 = distinct !{!1663, !1661, !"ext_400660_printf: argument 1"}
!1664 = !{!1665}
!1665 = distinct !{!1665, !1666, !"ext_400660_printf: argument 0"}
!1666 = distinct !{!1666, !"ext_400660_printf"}
!1667 = !{!1668}
!1668 = distinct !{!1668, !1666, !"ext_400660_printf: argument 1"}
!1669 = !{!1670}
!1670 = distinct !{!1670, !1671, !"ext_400660_printf: argument 0"}
!1671 = distinct !{!1671, !"ext_400660_printf"}
!1672 = !{!1673}
!1673 = distinct !{!1673, !1671, !"ext_400660_printf: argument 1"}
!1674 = !{!1675}
!1675 = distinct !{!1675, !1676, !"ext_400660_printf: argument 0"}
!1676 = distinct !{!1676, !"ext_400660_printf"}
!1677 = !{!1678}
!1678 = distinct !{!1678, !1676, !"ext_400660_printf: argument 1"}
!1679 = !{!1680}
!1680 = distinct !{!1680, !1681, !"ext_400660_printf: argument 0"}
!1681 = distinct !{!1681, !"ext_400660_printf"}
!1682 = !{!1683}
!1683 = distinct !{!1683, !1681, !"ext_400660_printf: argument 1"}
!1684 = !{!1685}
!1685 = distinct !{!1685, !1686, !"ext_400660_printf: argument 0"}
!1686 = distinct !{!1686, !"ext_400660_printf"}
!1687 = !{!1688}
!1688 = distinct !{!1688, !1686, !"ext_400660_printf: argument 1"}
!1689 = !{!1690}
!1690 = distinct !{!1690, !1691, !"ext_400660_printf: argument 0"}
!1691 = distinct !{!1691, !"ext_400660_printf"}
!1692 = !{!1693}
!1693 = distinct !{!1693, !1691, !"ext_400660_printf: argument 1"}
!1694 = !{!1695}
!1695 = distinct !{!1695, !1696, !"ext_67fe78_pow: argument 0"}
!1696 = distinct !{!1696, !"ext_67fe78_pow"}
!1697 = !{!1698}
!1698 = distinct !{!1698, !1696, !"ext_67fe78_pow: argument 1"}
!1699 = !{!1700}
!1700 = distinct !{!1700, !1701, !"ext_4006b0_sprintf: argument 0"}
!1701 = distinct !{!1701, !"ext_4006b0_sprintf"}
!1702 = !{!1703}
!1703 = distinct !{!1703, !1701, !"ext_4006b0_sprintf: argument 1"}
!1704 = !{!1705}
!1705 = distinct !{!1705, !1706, !"ext_400660_printf: argument 0"}
!1706 = distinct !{!1706, !"ext_400660_printf"}
!1707 = !{!1708}
!1708 = distinct !{!1708, !1706, !"ext_400660_printf: argument 1"}
!1709 = !{!1710}
!1710 = distinct !{!1710, !1711, !"ext_400660_printf: argument 0"}
!1711 = distinct !{!1711, !"ext_400660_printf"}
!1712 = !{!1713}
!1713 = distinct !{!1713, !1711, !"ext_400660_printf: argument 1"}
!1714 = !{!1715}
!1715 = distinct !{!1715, !1716, !"ext_400660_printf: argument 0"}
!1716 = distinct !{!1716, !"ext_400660_printf"}
!1717 = !{!1718}
!1718 = distinct !{!1718, !1716, !"ext_400660_printf: argument 1"}
!1719 = !{!1720}
!1720 = distinct !{!1720, !1721, !"ext_400660_printf: argument 0"}
!1721 = distinct !{!1721, !"ext_400660_printf"}
!1722 = !{!1723}
!1723 = distinct !{!1723, !1721, !"ext_400660_printf: argument 1"}
!1724 = !{!1725}
!1725 = distinct !{!1725, !1726, !"ext_400660_printf: argument 0"}
!1726 = distinct !{!1726, !"ext_400660_printf"}
!1727 = !{!1728}
!1728 = distinct !{!1728, !1726, !"ext_400660_printf: argument 1"}
!1729 = !{!1730}
!1730 = distinct !{!1730, !1731, !"ext_400660_printf: argument 0"}
!1731 = distinct !{!1731, !"ext_400660_printf"}
!1732 = !{!1733}
!1733 = distinct !{!1733, !1731, !"ext_400660_printf: argument 1"}
!1734 = !{!1735}
!1735 = distinct !{!1735, !1736, !"ext_400660_printf: argument 0"}
!1736 = distinct !{!1736, !"ext_400660_printf"}
!1737 = !{!1738}
!1738 = distinct !{!1738, !1736, !"ext_400660_printf: argument 1"}
!1739 = !{!1740}
!1740 = distinct !{!1740, !1741, !"ext_400660_printf: argument 0"}
!1741 = distinct !{!1741, !"ext_400660_printf"}
!1742 = !{!1743}
!1743 = distinct !{!1743, !1741, !"ext_400660_printf: argument 1"}
!1744 = !{!1745}
!1745 = distinct !{!1745, !1746, !"ext_400660_printf: argument 0"}
!1746 = distinct !{!1746, !"ext_400660_printf"}
!1747 = !{!1748}
!1748 = distinct !{!1748, !1746, !"ext_400660_printf: argument 1"}
!1749 = !{!1750}
!1750 = distinct !{!1750, !1751, !"ext_400660_printf: argument 0"}
!1751 = distinct !{!1751, !"ext_400660_printf"}
!1752 = !{!1753}
!1753 = distinct !{!1753, !1751, !"ext_400660_printf: argument 1"}
!1754 = !{!1755}
!1755 = distinct !{!1755, !1756, !"ext_400660_printf: argument 0"}
!1756 = distinct !{!1756, !"ext_400660_printf"}
!1757 = !{!1758}
!1758 = distinct !{!1758, !1756, !"ext_400660_printf: argument 1"}
!1759 = !{!1760}
!1760 = distinct !{!1760, !1761, !"ext_400660_printf: argument 0"}
!1761 = distinct !{!1761, !"ext_400660_printf"}
!1762 = !{!1763}
!1763 = distinct !{!1763, !1761, !"ext_400660_printf: argument 1"}
!1764 = !{!1765}
!1765 = distinct !{!1765, !1766, !"ext_400660_printf: argument 0"}
!1766 = distinct !{!1766, !"ext_400660_printf"}
!1767 = !{!1768}
!1768 = distinct !{!1768, !1766, !"ext_400660_printf: argument 1"}
!1769 = !{!1770}
!1770 = distinct !{!1770, !1771, !"ext_400660_printf: argument 0"}
!1771 = distinct !{!1771, !"ext_400660_printf"}
!1772 = !{!1773}
!1773 = distinct !{!1773, !1771, !"ext_400660_printf: argument 1"}
!1774 = !{!1775}
!1775 = distinct !{!1775, !1776, !"ext_400660_printf: argument 0"}
!1776 = distinct !{!1776, !"ext_400660_printf"}
!1777 = !{!1778}
!1778 = distinct !{!1778, !1776, !"ext_400660_printf: argument 1"}
!1779 = !{!1780}
!1780 = distinct !{!1780, !1781, !"ext_400660_printf: argument 0"}
!1781 = distinct !{!1781, !"ext_400660_printf"}
!1782 = !{!1783}
!1783 = distinct !{!1783, !1781, !"ext_400660_printf: argument 1"}
!1784 = !{!1785}
!1785 = distinct !{!1785, !1786, !"ext_400660_printf: argument 0"}
!1786 = distinct !{!1786, !"ext_400660_printf"}
!1787 = !{!1788}
!1788 = distinct !{!1788, !1786, !"ext_400660_printf: argument 1"}
!1789 = !{!1790}
!1790 = distinct !{!1790, !1791, !"ext_400660_printf: argument 0"}
!1791 = distinct !{!1791, !"ext_400660_printf"}
!1792 = !{!1793}
!1793 = distinct !{!1793, !1791, !"ext_400660_printf: argument 1"}
!1794 = !{!1795}
!1795 = distinct !{!1795, !1796, !"ext_400660_printf: argument 0"}
!1796 = distinct !{!1796, !"ext_400660_printf"}
!1797 = !{!1798}
!1798 = distinct !{!1798, !1796, !"ext_400660_printf: argument 1"}
!1799 = !{!1800}
!1800 = distinct !{!1800, !1801, !"ext_400660_printf: argument 0"}
!1801 = distinct !{!1801, !"ext_400660_printf"}
!1802 = !{!1803}
!1803 = distinct !{!1803, !1801, !"ext_400660_printf: argument 1"}
!1804 = !{!1805}
!1805 = distinct !{!1805, !1806, !"ext_400660_printf: argument 0"}
!1806 = distinct !{!1806, !"ext_400660_printf"}
!1807 = !{!1808}
!1808 = distinct !{!1808, !1806, !"ext_400660_printf: argument 1"}
!1809 = !{!1810}
!1810 = distinct !{!1810, !1811, !"ext_400660_printf: argument 0"}
!1811 = distinct !{!1811, !"ext_400660_printf"}
!1812 = !{!1813}
!1813 = distinct !{!1813, !1811, !"ext_400660_printf: argument 1"}
!1814 = !{!1815}
!1815 = distinct !{!1815, !1816, !"ext_400660_printf: argument 0"}
!1816 = distinct !{!1816, !"ext_400660_printf"}
!1817 = !{!1818}
!1818 = distinct !{!1818, !1816, !"ext_400660_printf: argument 1"}
!1819 = !{!1820}
!1820 = distinct !{!1820, !1821, !"ext_400660_printf: argument 0"}
!1821 = distinct !{!1821, !"ext_400660_printf"}
!1822 = !{!1823}
!1823 = distinct !{!1823, !1821, !"ext_400660_printf: argument 1"}
!1824 = !{!1825}
!1825 = distinct !{!1825, !1826, !"ext_400660_printf: argument 0"}
!1826 = distinct !{!1826, !"ext_400660_printf"}
!1827 = !{!1828}
!1828 = distinct !{!1828, !1826, !"ext_400660_printf: argument 1"}
!1829 = !{!1830}
!1830 = distinct !{!1830, !1831, !"ext_400660_printf: argument 0"}
!1831 = distinct !{!1831, !"ext_400660_printf"}
!1832 = !{!1833}
!1833 = distinct !{!1833, !1831, !"ext_400660_printf: argument 1"}
!1834 = !{!1835}
!1835 = distinct !{!1835, !1836, !"ext_400660_printf: argument 0"}
!1836 = distinct !{!1836, !"ext_400660_printf"}
!1837 = !{!1838}
!1838 = distinct !{!1838, !1836, !"ext_400660_printf: argument 1"}
!1839 = !{!1840}
!1840 = distinct !{!1840, !1841, !"ext_4006a0_fopen: argument 0"}
!1841 = distinct !{!1841, !"ext_4006a0_fopen"}
!1842 = !{!1843}
!1843 = distinct !{!1843, !1841, !"ext_4006a0_fopen: argument 1"}
!1844 = !{!1845}
!1845 = distinct !{!1845, !1846, !"ext_400660_printf: argument 0"}
!1846 = distinct !{!1846, !"ext_400660_printf"}
!1847 = !{!1848}
!1848 = distinct !{!1848, !1846, !"ext_400660_printf: argument 1"}
!1849 = !{!1850}
!1850 = distinct !{!1850, !1851, !"ext_400660_printf: argument 0"}
!1851 = distinct !{!1851, !"ext_400660_printf"}
!1852 = !{!1853}
!1853 = distinct !{!1853, !1851, !"ext_400660_printf: argument 1"}
!1854 = !{!1855}
!1855 = distinct !{!1855, !1856, !"ext_400660_printf: argument 0"}
!1856 = distinct !{!1856, !"ext_400660_printf"}
!1857 = !{!1858}
!1858 = distinct !{!1858, !1856, !"ext_400660_printf: argument 1"}
!1859 = !{!1860}
!1860 = distinct !{!1860, !1861, !"ext_400660_printf: argument 0"}
!1861 = distinct !{!1861, !"ext_400660_printf"}
!1862 = !{!1863}
!1863 = distinct !{!1863, !1861, !"ext_400660_printf: argument 1"}
!1864 = !{!1865}
!1865 = distinct !{!1865, !1866, !"ext_67fe78_pow: argument 0"}
!1866 = distinct !{!1866, !"ext_67fe78_pow"}
!1867 = !{!1868}
!1868 = distinct !{!1868, !1866, !"ext_67fe78_pow: argument 1"}
!1869 = !{!1870}
!1870 = distinct !{!1870, !1871, !"ext_400650_fclose: argument 0"}
!1871 = distinct !{!1871, !"ext_400650_fclose"}
!1872 = !{!1873}
!1873 = distinct !{!1873, !1871, !"ext_400650_fclose: argument 1"}
!1874 = !{!1875}
!1875 = distinct !{!1875, !1876, !"ext_4006d0_sqrt: argument 0"}
!1876 = distinct !{!1876, !"ext_4006d0_sqrt"}
!1877 = !{!1878}
!1878 = distinct !{!1878, !1876, !"ext_4006d0_sqrt: argument 1"}
!1879 = !{!1880}
!1880 = distinct !{!1880, !1881, !"ext_67fe58___isoc99_fscanf: argument 0"}
!1881 = distinct !{!1881, !"ext_67fe58___isoc99_fscanf"}
!1882 = !{!1883}
!1883 = distinct !{!1883, !1881, !"ext_67fe58___isoc99_fscanf: argument 1"}
