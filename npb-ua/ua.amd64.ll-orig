; ModuleID = 'ua.amd64.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_420480__rodata_type = type <{ [32 x i8], [8 x i8], [55 x i8], [27 x i8], [46 x i8], [38 x i8], [44 x i8], [37 x i8], [39 x i8], [39 x i8], [25 x i8], [45 x i8], [45 x i8], [45 x i8], [37 x i8], [37 x i8], [20 x i8], [23 x i8], [23 x i8], [23 x i8], [23 x i8], [64 x i8], [39 x i8], [34 x i8], [21 x i8], [27 x i8], [16 x i8], [32 x i8], [28 x i8], [37 x i8], [8 x i8], [34 x i8], [37 x i8], [42 x i8], [40 x i8], [37 x i8], [37 x i8], [13 x i8], [19 x i8], [23 x i8], [23 x i8], [654 x i8], [11 x i8], [2 x i8], [6 x i8], [5 x i8], [10 x i8], [10 x i8], [7 x i8], [8 x i8], [11 x i8], [9 x i8], [5 x i8], [59 x i8], [13 x i8], [39 x i8], [3 x i8], [4 x i8], [54 x i8], [28 x i8], [28 x i8], [42 x i8], [28 x i8], [31 x i8], [3 x i8], [25 x i8], [6 x i8], [12 x i8], [4 x i8], [6 x i8], [4 x i8], [12 x i8], [29 x i8], [7 x i8], [27 x i8], [26 x i8], [31 x i8], [12 x i8], [15 x i8], [64 x i8], [44 x i8], [41 x i8], [16 x i8], [38 x i8], [23 x i8], [19 x i8], [33 x i8], [33 x i8], [31 x i8], [28 x i8], [26 x i8], [36 x i8] }>
%seg_621e00__init_array_type = type <{ i64, i64 }>
%seg_621ff0__got_type = type <{ i64, i64 }>
%seg_622000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_622080__data_type = type <{ [16 x i8], [4 x i8] }>
%__bss_start_type = type <{ [4 x i8] }>
%__TMC_END___type = type <{ [8 x i8] }>
%seg_6220a0__bss_type = type <{ [16 x i8], [512 x i8], [512 x i8] }>
%skip_type = type <{ [1008 x i8] }>
%rmor_type = type <{ [92800 x i8] }>
%pdiff_type = type <{ [250000 x i8] }>
%e1v1_type = type <{ [144 x i8] }>
%ifcoa_type = type <{ [1008 x i8] }>
%emo_type = type <{ [128000 x i8] }>
%zc_type = type <{ [16000 x i8] }>
%ifcoa_id_type = type <{ [1008 x i8] }>
%e2v2_type = type <{ [144 x i8] }>
%nvertex_type = type <{ [16 x i8] }>
%localedgenumber_type = type <{ [288 x i8] }>
%dxtm1_type = type <{ [208 x i8] }>
%bqnew_type = type <{ [144 x i8] }>
%ixtm31_type = type <{ [368 x i8] }>
%pdiffp_type = type <{ [250000 x i8] }>
%zc_new_type = type <{ [16000 x i8] }>
%fre_type = type <{ [16 x i8] }>
%t_type = type <{ [250000 x i8] }>
%map2_type = type <{ [48 x i8] }>
%map4_type = type <{ [48 x i8] }>
%f_e_ef_type = type <{ [96 x i8] }>
%cal_nnb_type = type <{ [96 x i8] }>
%if_1_edge_type = type <{ [12000 x i8] }>
%wxm1_type = type <{ [40 x i8] }>
%dlmin_type = type <{ [8 x i8] }>
%idel_type = type <{ [150000 x i8] }>
%c_f_type = type <{ [96 x i8] }>
%x0_type = type <{ [16 x i8] }>
%cal_iijj_type = type <{ [32 x i8] }>
%ta1_type = type <{ [250000 x i8] }>
%g4m1_s_type = type <{ [4000 x i8] }>
%tmult_type = type <{ [250000 x i8] }>
%dpcmor_type = type <{ [92800 x i8] }>
%pmorx_type = type <{ [92800 x i8] }>
%e_c_type = type <{ [96 x i8] }>
%v_end_type = type <{ [16 x i8] }>
%zgm1_type = type <{ [48 x i8] }>
%ixtmc1_type = type <{ [208 x i8] }>
%tmort_type = type <{ [92800 x i8] }>
%xc_new_type = type <{ [16000 x i8] }>
%timeron_type = type <{ [16 x i8] }>
%sje_type = type <{ [24000 x i8] }>
%bm1_s_type = type <{ [4000 x i8] }>
%g5m1_s_type = type <{ [4000 x i8] }>
%jjface_type = type <{ [32 x i8] }>
%diagn_type = type <{ [24000 x i8] }>
%wdtdr_type = type <{ [208 x i8] }>
%edgevis_type = type <{ [24000 x i8] }>
%umor_type = type <{ [92800 x i8] }>
%alpha_type = type <{ [16 x i8] }>
%pcmor_nc1_type = type <{ [3200 x i8] }>
%ijel_type = type <{ [12000 x i8] }>
%local_corner_type = type <{ [192 x i8] }>
%face_l1_type = type <{ [16 x i8] }>
%sje_new_type = type <{ [24000 x i8] }>
%niter_type = type <{ [16 x i8] }>
%yc_type = type <{ [16000 x i8] }>
%pcmor_cor_type = type <{ [256 x i8] }>
%ncon_edge_type = type <{ [12000 x i8] }>
%tcpre_type = type <{ [208 x i8] }>
%ixmc1_type = type <{ [208 x i8] }>
%dpcelm_type = type <{ [250000 x i8] }>
%z0_type = type <{ [16 x i8] }>
%mt_to_id_old_type = type <{ [1000 x i8] }>
%ntot_type = type <{ [8 x i8] }>
%front_type = type <{ [1000 x i8] }>
%nmor_type = type <{ [8 x i8] }>
%mt_to_id_type = type <{ [1008 x i8] }>
%e1v2_type = type <{ [144 x i8] }>
%ixm31_type = type <{ [368 x i8] }>
%tmmor_type = type <{ [92800 x i8] }>
%mormult_type = type <{ [92800 x i8] }>
%dtime_type = type <{ [16 x i8] }>
%e2v1_type = type <{ [144 x i8] }>
%ifpcmor_type = type <{ [8000 x i8] }>
%f_c_type = type <{ [96 x i8] }>
%nmxh_type = type <{ [16 x i8] }>
%id_to_mt_type = type <{ [1008 x i8] }>
%ref_front_id_type = type <{ [1008 x i8] }>
%oplc_type = type <{ [16 x i8] }>
%treenew_type = type <{ [1008 x i8] }>
%dxm1_type = type <{ [208 x i8] }>
%idmo_type = type <{ [600000 x i8] }>
%g6m1_s_type = type <{ [4000 x i8] }>
%iijj_type = type <{ [32 x i8] }>
%size_e_type = type <{ [1008 x i8] }>
%xrm1_s_type = type <{ [4000 x i8] }>
%fassign_type = type <{ [6000 x i8] }>
%ppmor_type = type <{ [92800 x i8] }>
%op_type = type <{ [16 x i8] }>
%ta2_type = type <{ [250000 x i8] }>
%time_type = type <{ [16 x i8] }>
%newc_type = type <{ [1008 x i8] }>
%cbc_new_type = type <{ [6000 x i8] }>
%ixtmc2_type = type <{ [208 x i8] }>
%tree_type = type <{ [1008 x i8] }>
%xc_type = type <{ [16000 x i8] }>
%rxm1_s_type = type <{ [4000 x i8] }>
%e_face2_type = type <{ [96 x i8] }>
%xfrac_type = type <{ [48 x i8] }>
%newi_type = type <{ [1000 x i8] }>
%_y0_type = type <{ [8 x i8] }>
%vassign_type = type <{ [8000 x i8] }>
%edgenumber_type = type <{ [96 x i8] }>
%jacm1_s_type = type <{ [4000 x i8] }>
%pcmor_c_type = type <{ [800 x i8] }>
%eassign_type = type <{ [12000 x i8] }>
%qbnew_type = type <{ [240 x i8] }>
%w3m1_type = type <{ [1008 x i8] }>
%pcmor_nc0_type = type <{ [3200 x i8] }>
%newe_type = type <{ [1008 x i8] }>
%children_type = type <{ [96 x i8] }>
%pcmor_nc2_type = type <{ [3200 x i8] }>
%yc_new_type = type <{ [16000 x i8] }>
%le_arr_type = type <{ [96 x i8] }>
%g1m1_s_type = type <{ [4000 x i8] }>
%action_type = type <{ [1008 x i8] }>
%cbc_type = type <{ [6000 x i8] }>
%face_l2_type = type <{ [16 x i8] }>
%trhs_type = type <{ [250000 x i8] }>
%nelt_type = type <{ [16 x i8] }>
%ich_type = type <{ [1008 x i8] }>
%cal_intempx_type = type <{ [96 x i8] }>
%ijel_new_type = type <{ [12000 x i8] }>
%nemo_type = type <{ [8000 x i8] }>
%face_ld_type = type <{ [16 x i8] }>
%ixmc2_type = type <{ [200 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_420480__rodata = internal constant %seg_420480__rodata_type <{ [32 x i8] c"\01\00\02\00\00\00\00\00\92$I\92$I\D2?\00\00\00\00\00\00\08@\DB\B6m\DB\B6m\DB?", [8 x i8] c"\00\00\00\00\00\00\00@", [55 x i8] c"Step %4d: elements refined, merged, total:%6d %6d %6d\0A\00", [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", [46 x i8] c" Class           =                        %c\0A\00", [38 x i8] c" Size            =             %12ld\0A\00", [44 x i8] c" Size            =             %4dx%4dx%4d\0A\00", [37 x i8] c" Iterations      =             %12d\0A\00", [39 x i8] c" Time in seconds =             %12.2f\0A\00", [39 x i8] c" Mop/s total     =             %12.2f\0A\00", [25 x i8] c" Operation type  = %24s\0A\00", [45 x i8] c" Verification    =            NOT PERFORMED\0A\00", [45 x i8] c" Verification    =               SUCCESSFUL\0A\00", [45 x i8] c" Verification    =             UNSUCCESSFUL\0A\00", [37 x i8] c" Version         =             %12s\0A\00", [37 x i8] c" Compile date    =             %12s\0A\00", [20 x i8] c"\0A Compile options:\0A\00", [23 x i8] c"    CLINK        = %s\0A\00", [23 x i8] c"    C_LIB        = %s\0A\00", [23 x i8] c"    C_INC        = %s\0A\00", [23 x i8] c"    CFLAGS       = %s\0A\00", [64 x i8] c"    CLINKFLAGS   = %s\0A\00\0A--------------------------------------\0A\00", [39 x i8] c" Please send all errors/feedbacks to:\0A\00", [34 x i8] c" Center for Manycore Programming\0A\00", [21 x i8] c" cmp@aces.snu.ac.kr\0A\00", [27 x i8] c" http://aces.snu.ac.kr\0A\00\00\00\00", [16 x i8] c"UUUUUU\C5?\00\00\00\00\00\00\F0?", [32 x i8] c"\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\08\C0{\14\AEG\E1zt?\00\00\00\00\00\00\10@", [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", [37 x i8] c" Class           =             %12c\0A\00", [8 x i8] c"%15.0lf\00", [34 x i8] c" Size            =          %15s\0A\00", [37 x i8] c" Size            =             %12d\0A\00", [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", [40 x i8] c" Time in seconds =             %12.2lf\0A\00", [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", [37 x i8] c" Verification    =             %12s\0A\00", [13 x i8] c"UNSUCCESSFUL\00", [19 x i8] c"\0A Compile options:\0A", [23 x i8] c"    CC           = %s\0A\00", [23 x i8] c"    RAND         = %s\0A\00", [654 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00\00\00\00\00\00\00\00\00\00\10=\00\00\00\00\00\00\D0B\00\00\00\00\00\00`A\00\00\00\00\00\00\80>\9A\99\99\99\99\99\B9?\17l\C1\16l\C1\E6?\C1\16l\C1\16l\E1?*\B5<A\EC\F2\E4?*\B5<A\EC\F2\E4\BF8\9C\FBV\90\EE\FB?VUUUUU\05\C0 \0E$P\08\90\F6\BF\B2(\1CL\BEp\E8?\9A\A3\98\82\A6b\F5\BF!\A7\A1\96\A8\06\1B@\00\00\00\00\00\00\E0?A\F0$\9E\9D\93\D0\BF\00\00\00\00\00\00\D8?\EC\C3v\98\18\DB\F3\BF\00\00\00\00\00\00\14\C0\00\00\00\00\00\00\B2?\E3\9A6\B6G\DB\A8\BF|\E4\9A\07\A7\CB\D6?UUUUUU\B5?\EA\FA\AEP2*\AE\BF\A9\AA\AA\AA\AA\AA\CA?wewb\CC&\DC?\A6s\E0\B9\F8A\CD\BF\01\BF\B8\D0\09\E3\E6?I\80\BC\B4\D8\F1\A2\BF\00\00\00\00\00\00\B8?\CA\96>\AE@\B1\C6\BFN\FE\CEe5\85\A9?\BBeF\BE\DB\19\C5\BF~\F8\CA\11\D1\E2\EC?-\0A\07\93/\1C\D2?Y\A0\CE\10*\16\B2\BF\00\00\00\00\00\00\A4?\A4\D5\93\0F\E7O\BE\BF\00\00\00\00\00\00\D4?\B6z\F2\E1\FCI\EC?\00\00\00\00\00\00\BE\BF\07l\AA\1C\A3`\A0\BFN\D7\E3\B3A\8F\B7? +\BEk\8D\1D\C8\BFm\99\91\EFvF\E9?_:X\CD\1C\AA\D5?n\A4\92\EC\90\DC\AF?\F2\02R\D6\95>\C9\BF\F32\0D\A1\7Fz\E6?\BE[f\E4\BB\9D\E1?\D7\C1A\F5\F82\BE\BF:\8C0\E2\8EyE>UUUUUU\D5?{\14\AEG\E1z\A4?\00\00\00\00\80\84.A\00\00\00\00\00\00Y@", [11 x i8] c"timer.flag\00", [2 x i8] c"r\00", [6 x i8] c"total\00", [5 x i8] c"init\00", [10 x i8] c"transfb_c\00", [10 x i8] c"diffusion\00", [7 x i8] c"transf\00", [8 x i8] c"transfb\00", [11 x i8] c"adaptation\00", [9 x i8] c"transf+b\00", [5 x i8] c"add2\00", [59 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-SER-C) - UA Benchmark\0A\0A\00", [13 x i8] c"inputua.data\00", [39 x i8] c" Reading from input file inputua.data\0A\00", [3 x i8] c"%d\00", [4 x i8] c"%lf\00", [54 x i8] c" No input file inputua.data. Using compiled defaults\0A\00", [28 x i8] c" Levels of refinement: %8d\0A\00", [28 x i8] c" Adaptation frequency: %8d\0A\00", [42 x i8] c" Time steps:           %8d    dt: %15.6E\0A\00", [28 x i8] c" CG iterations:        %8d\0A\00", [31 x i8] c" Heat source radius:   %8.4f\0A\0A\00", [3 x i8] c"UA\00", [25 x i8] c"    coll. point advanced\00", [6 x i8] c"3.3.1\00", [12 x i8] c"03 Nov 2017\00", [4 x i8] c"gcc\00", [6 x i8] c"$(CC)\00", [4 x i8] c"-lm\00", [12 x i8] c"-I../common\00", [29 x i8] c"-g -Wall -O3 -mcmodel=medium\00", [7 x i8] c"(none)\00", [27 x i8] c"  SECTION     Time (secs)\0A\00", [26 x i8] c"  %-10s:%9.3f  (%6.2f%%)\0A\00", [31 x i8] c"    --> %11s:%9.3f  (%6.2f%%)\0A\00", [12 x i8] c"sub-convect\00", [15 x i8] c"sub-diffuse\00\00\00\00", [64 x i8] c"$*Es\AEw\BA>\C7}L\E6\9E2\F0>\C4\A1\C5{\F2\A1\07?4\80\8C\AA\87o\17?\B1\BD\B2\90=\F2\FA>C\B7\09 J\F7^?\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [44 x i8] c" Verification being performed for class %c\0A\00", [41 x i8] c" accuracy setting for epsilon = %20.13E\0A\00", [16 x i8] c" Unknown class\0A\00", [38 x i8] c" Comparison of temperature integrals\0A\00", [23 x i8] c" Temperature integral\0A\00", [19 x i8] c"          %20.13E\0A\00", [33 x i8] c"          %20.13E%20.13E%20.13E\0A\00", [33 x i8] c" FAILURE: %20.13E%20.13E%20.13E\0A\00", [31 x i8] c" No reference values provided\0A\00", [28 x i8] c" No verification performed\0A\00", [26 x i8] c" Verification Successful\0A\00", [36 x i8] c" Verification failed\0A\00\00\00\00\00\00\00\8D\ED\B5\A0\F7\C6\B0>" }>
@seg_621e00__init_array = internal global %seg_621e00__init_array_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400870_frame_dummy to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400840___do_global_dtors_aux to i64) }>
@seg_621ff0__got = internal global %seg_621ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_622000__got_plt = internal global %seg_622000__got_plt_type <{ [24 x i8] c"\10\1Eb\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), i64 ptrtoint (i64 (i64)* @fclose to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (i64 (i64, i64)* @pow to i64), i64 ptrtoint (i64 (i64)* @log to i64), i64 ptrtoint (i64 (i64)* @fgetc to i64), i64 ptrtoint (double (double)* @cos to i64), i64 ptrtoint (i64 (i64)* @acos to i64), i64 ptrtoint (i64 (i64, i64)* @fopen to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @sprintf to i64), i64 ptrtoint (double (double)* @sqrt to i64) }>
@seg_622080__data = internal global %seg_622080__data_type <{ [16 x i8] zeroinitializer, [4 x i8] c"\FF\FF\FF\FF" }>
@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@__TMC_END__ = local_unnamed_addr global %__TMC_END___type zeroinitializer
@seg_6220a0__bss = internal global %seg_6220a0__bss_type zeroinitializer
@skip = global %skip_type zeroinitializer
@rmor = global %rmor_type zeroinitializer
@pdiff = global %pdiff_type zeroinitializer
@e1v1 = global %e1v1_type zeroinitializer
@ifcoa = global %ifcoa_type zeroinitializer
@emo = global %emo_type zeroinitializer
@zc = global %zc_type zeroinitializer
@ifcoa_id = global %ifcoa_id_type zeroinitializer
@e2v2 = global %e2v2_type zeroinitializer
@nvertex = global %nvertex_type zeroinitializer
@localedgenumber = global %localedgenumber_type zeroinitializer
@dxtm1 = global %dxtm1_type zeroinitializer
@bqnew = local_unnamed_addr global %bqnew_type zeroinitializer
@ixtm31 = local_unnamed_addr global %ixtm31_type zeroinitializer
@pdiffp = global %pdiffp_type zeroinitializer
@zc_new = global %zc_new_type zeroinitializer
@fre = global %fre_type zeroinitializer
@t = global %t_type zeroinitializer
@map2 = global %map2_type zeroinitializer
@map4 = global %map4_type zeroinitializer
@f_e_ef = global %f_e_ef_type zeroinitializer
@cal_nnb = global %cal_nnb_type zeroinitializer
@if_1_edge = global %if_1_edge_type zeroinitializer
@wxm1 = global %wxm1_type zeroinitializer
@dlmin = global %dlmin_type zeroinitializer
@idel = global %idel_type zeroinitializer
@c_f = global %c_f_type zeroinitializer
@x0 = global %x0_type zeroinitializer
@cal_iijj = global %cal_iijj_type zeroinitializer
@ta1 = global %ta1_type zeroinitializer
@g4m1_s = global %g4m1_s_type zeroinitializer
@tmult = global %tmult_type zeroinitializer
@dpcmor = global %dpcmor_type zeroinitializer
@pmorx = global %pmorx_type zeroinitializer
@e_c = global %e_c_type zeroinitializer
@v_end = global %v_end_type zeroinitializer
@zgm1 = global %zgm1_type zeroinitializer
@ixtmc1 = global %ixtmc1_type zeroinitializer
@tmort = global %tmort_type zeroinitializer
@xc_new = global %xc_new_type zeroinitializer
@timeron = global %timeron_type zeroinitializer
@sje = global %sje_type zeroinitializer
@bm1_s = global %bm1_s_type zeroinitializer
@g5m1_s = global %g5m1_s_type zeroinitializer
@jjface = global %jjface_type zeroinitializer
@diagn = global %diagn_type zeroinitializer
@wdtdr = global %wdtdr_type zeroinitializer
@edgevis = global %edgevis_type zeroinitializer
@umor = global %umor_type zeroinitializer
@alpha = global %alpha_type zeroinitializer
@pcmor_nc1 = global %pcmor_nc1_type zeroinitializer
@ijel = global %ijel_type zeroinitializer
@local_corner = global %local_corner_type zeroinitializer
@face_l1 = global %face_l1_type zeroinitializer
@sje_new = global %sje_new_type zeroinitializer
@niter = global %niter_type zeroinitializer
@yc = global %yc_type zeroinitializer
@pcmor_cor = global %pcmor_cor_type zeroinitializer
@ncon_edge = global %ncon_edge_type zeroinitializer
@tcpre = global %tcpre_type zeroinitializer
@ixmc1 = global %ixmc1_type zeroinitializer
@dpcelm = global %dpcelm_type zeroinitializer
@z0 = global %z0_type zeroinitializer
@mt_to_id_old = global %mt_to_id_old_type zeroinitializer
@ntot = global %ntot_type zeroinitializer
@front = global %front_type zeroinitializer
@nmor = global %nmor_type zeroinitializer
@mt_to_id = global %mt_to_id_type zeroinitializer
@e1v2 = global %e1v2_type zeroinitializer
@ixm31 = local_unnamed_addr global %ixm31_type zeroinitializer
@tmmor = global %tmmor_type zeroinitializer
@mormult = global %mormult_type zeroinitializer
@dtime = global %dtime_type zeroinitializer
@e2v1 = global %e2v1_type zeroinitializer
@ifpcmor = global %ifpcmor_type zeroinitializer
@f_c = global %f_c_type zeroinitializer
@nmxh = global %nmxh_type zeroinitializer
@id_to_mt = global %id_to_mt_type zeroinitializer
@ref_front_id = global %ref_front_id_type zeroinitializer
@oplc = global %oplc_type zeroinitializer
@treenew = global %treenew_type zeroinitializer
@dxm1 = global %dxm1_type zeroinitializer
@idmo = global %idmo_type zeroinitializer
@g6m1_s = global %g6m1_s_type zeroinitializer
@iijj = global %iijj_type zeroinitializer
@size_e = global %size_e_type zeroinitializer
@xrm1_s = global %xrm1_s_type zeroinitializer
@fassign = global %fassign_type zeroinitializer
@ppmor = global %ppmor_type zeroinitializer
@op = global %op_type zeroinitializer
@ta2 = global %ta2_type zeroinitializer
@time = global %time_type zeroinitializer
@newc = global %newc_type zeroinitializer
@cbc_new = global %cbc_new_type zeroinitializer
@ixtmc2 = global %ixtmc2_type zeroinitializer
@tree = global %tree_type zeroinitializer
@xc = global %xc_type zeroinitializer
@rxm1_s = global %rxm1_s_type zeroinitializer
@e_face2 = global %e_face2_type zeroinitializer
@xfrac = global %xfrac_type zeroinitializer
@newi = global %newi_type zeroinitializer
@_y0 = global %_y0_type zeroinitializer
@vassign = global %vassign_type zeroinitializer
@edgenumber = global %edgenumber_type zeroinitializer
@jacm1_s = global %jacm1_s_type zeroinitializer
@pcmor_c = global %pcmor_c_type zeroinitializer
@eassign = global %eassign_type zeroinitializer
@qbnew = global %qbnew_type zeroinitializer
@w3m1 = global %w3m1_type zeroinitializer
@pcmor_nc0 = global %pcmor_nc0_type zeroinitializer
@newe = global %newe_type zeroinitializer
@children = global %children_type zeroinitializer
@pcmor_nc2 = global %pcmor_nc2_type zeroinitializer
@yc_new = global %yc_new_type zeroinitializer
@le_arr = global %le_arr_type zeroinitializer
@g1m1_s = global %g1m1_s_type zeroinitializer
@action = global %action_type zeroinitializer
@cbc = global %cbc_type zeroinitializer
@face_l2 = global %face_l2_type zeroinitializer
@trhs = global %trhs_type zeroinitializer
@nelt = global %nelt_type zeroinitializer
@ich = global %ich_type zeroinitializer
@cal_intempx = global %cal_intempx_type zeroinitializer
@ijel_new = global %ijel_new_type zeroinitializer
@nemo = global %nemo_type zeroinitializer
@face_ld = global %face_ld_type zeroinitializer
@ixmc2 = global %ixmc2_type zeroinitializer
@__mcsema_reg_state = internal thread_local global %struct.State zeroinitializer
@__mcsema_stack = internal thread_local global [131072 x i64] zeroinitializer
@__mcsema_tls = internal thread_local global [512 x i64] zeroinitializer
@0 = internal global i1 false
@llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
define %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1 {
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #2

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_fscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @acos(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @sprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fgetc(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @log(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @pow(i64, i64) #3

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_412be0_setpcmo_pre(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_412be0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %16 = load i64, i64* %13, align 8
  %17 = load i64, i64* %12, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %13, align 8, !tbaa !1240
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%tcpre_type* @tcpre to i64), i64* %11, align 8, !tbaa !1240
  store i64 25, i64* %10, align 8, !tbaa !1240
  %26 = bitcast [32 x %union.VectorReg]* %14 to i8*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast [32 x %union.VectorReg]* %14 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %26, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = bitcast i64* %27 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = getelementptr inbounds i8, i8* %26, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 1, !tbaa !1244
  %34 = add i64 %1, 52336
  %35 = add i64 %1, 34
  %36 = add i64 %17, -3728
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  store i64 %36, i64* %12, align 8, !tbaa !1240
  %38 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %34, %struct.Memory* %2)
  %39 = load i64, i64* %3, align 8
  store i64 25, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %40 = load i64, i64* %13, align 8
  %41 = add i64 %40, -3664
  store i64 %41, i64* %11, align 8, !tbaa !1240
  %42 = add i64 %39, 52302
  %43 = add i64 %39, 20
  %44 = load i64, i64* %12, align 8, !tbaa !1240
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %43, i64* %46
  store i64 %45, i64* %12, align 8, !tbaa !1240
  %47 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %42, %struct.Memory* %38)
  %48 = load i64, i64* %3, align 8
  store i64 5, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %49 = load i64, i64* %13, align 8
  %50 = add i64 %49, -3712
  store i64 %50, i64* %11, align 8, !tbaa !1240
  %51 = add i64 %48, 52282
  %52 = add i64 %48, 20
  %53 = load i64, i64* %12, align 8, !tbaa !1240
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55
  store i64 %54, i64* %12, align 8, !tbaa !1240
  %56 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %51, %struct.Memory* %47)
  %57 = load i64, i64* %3, align 8
  %58 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %59 = bitcast [32 x %union.VectorReg]* %14 to double*
  store double %58, double* %59, align 1, !tbaa !1246
  %60 = bitcast i64* %27 to double*
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %61 = load i64, i64* %13, align 8
  %62 = add i64 %61, -3712
  %63 = inttoptr i64 %62 to double*
  store double %58, double* %63
  %64 = add i64 %61, -3664
  %65 = inttoptr i64 %64 to double*
  store double %58, double* %65
  %66 = add i64 %61, -8
  %67 = add i64 %57, 31
  %68 = inttoptr i64 %66 to i32*
  store i32 1, i32* %68
  %69 = add i64 %61, -12
  %70 = bitcast %union.VectorReg* %15 to double*
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %72 = bitcast i64* %71 to double*
  br label %block_412c49

block_412dff:                                     ; preds = %block_412df5
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %73 = add i64 %433, -1024
  store i64 %73, i64* %11, align 8, !tbaa !1240
  %74 = add i64 %448, 51793
  %75 = add i64 %448, 23
  %76 = load i64, i64* %12, align 8, !tbaa !1240
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78
  store i64 %77, i64* %12, align 8, !tbaa !1240
  %79 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %74, %struct.Memory* %434)
  %80 = load i64, i64* %13, align 8
  %81 = add i64 %80, -1024
  %82 = load i64, i64* %3, align 8
  %83 = add i64 %80, -3248
  store i64 %83, i64* %11, align 8, !tbaa !1240
  %84 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %84, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %85 = add i64 %80, -12
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, 40
  %90 = add i64 %89, %81
  %91 = add i64 %80, -8
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 3
  %96 = add i64 %95, %90
  %97 = inttoptr i64 %96 to double*
  store double %84, double* %97
  %98 = add i64 %80, -4
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %9, align 8, !tbaa !1240
  store i64 %81, i64* %10, align 8, !tbaa !1240
  %102 = add i64 %82, -43814
  %103 = add i64 %82, 56
  %104 = load i64, i64* %12, align 8, !tbaa !1240
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106
  store i64 %105, i64* %12, align 8, !tbaa !1240
  %107 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %102, %struct.Memory* %79)
  %108 = load i64, i64* %3, align 8
  store i64 4, i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %7, align 8, !tbaa !1240
  %109 = load i64, i64* %13, align 8
  %110 = add i64 %109, -3248
  store i64 %110, i64* %8, align 8, !tbaa !1240
  %111 = add i64 %109, -12
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, 40
  %116 = add i64 %115, %110
  %117 = add i64 %109, -8
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add i64 %121, %116
  %123 = inttoptr i64 %122 to double*
  %124 = load double, double* %123
  store double %124, double* %59, align 1, !tbaa !1246
  %125 = add i64 %109, -4
  %126 = inttoptr i64 %125 to i32*
  %127 = load i32, i32* %126
  %128 = sext i32 %127 to i64
  %129 = mul nsw i64 %128, 200
  %130 = load i64, i64* %7, align 8
  %131 = add i64 %129, %130
  %132 = load i64, i64* %13, align 8
  %133 = add i64 %132, -12
  %134 = inttoptr i64 %133 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 40
  %138 = add i64 %137, %131
  %139 = add i64 %132, -8
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140
  %142 = sext i32 %141 to i64
  %143 = shl nsw i64 %142, 3
  %144 = add i64 %143, %138
  %145 = load double, double* %59, align 1
  %146 = inttoptr i64 %144 to double*
  store double %145, double* %146
  %147 = inttoptr i64 %133 to i32*
  %148 = load i32, i32* %147
  %149 = sext i32 %148 to i64
  %150 = mul nsw i64 %149, 40
  %151 = load i64, i64* %8, align 8
  %152 = add i64 %150, %151
  %153 = load i64, i64* %13, align 8
  %154 = add i64 %153, -8
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = sext i32 %156 to i64
  %158 = shl nsw i64 %157, 3
  %159 = add i64 %158, %152
  %160 = inttoptr i64 %159 to double*
  %161 = load double, double* %160
  store double %161, double* %59, align 1, !tbaa !1246
  %162 = add i64 %153, -4
  %163 = inttoptr i64 %162 to i32*
  %164 = load i32, i32* %163
  %165 = sext i32 %164 to i64
  %166 = mul nsw i64 %165, 200
  %167 = load i64, i64* %7, align 8
  %168 = add i64 %166, %167
  %169 = add i64 %153, -12
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = sext i32 %171 to i64
  %173 = mul nsw i64 %172, 40
  %174 = add i64 %173, %168
  %175 = load i32, i32* %6, align 4
  %176 = load i64, i64* %13, align 8
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178
  %180 = sub i32 %175, %179
  %181 = sext i32 %180 to i64
  %182 = shl nsw i64 %181, 3
  %183 = add i64 %174, %182
  %184 = load double, double* %59, align 1
  %185 = inttoptr i64 %183 to double*
  store double %184, double* %185
  %186 = add i64 %176, -12
  %187 = inttoptr i64 %186 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, 40
  %191 = load i64, i64* %8, align 8
  %192 = add i64 %190, %191
  %193 = load i64, i64* %13, align 8
  %194 = add i64 %193, -8
  %195 = inttoptr i64 %194 to i32*
  %196 = load i32, i32* %195
  %197 = sext i32 %196 to i64
  %198 = shl nsw i64 %197, 3
  %199 = add i64 %198, %192
  %200 = inttoptr i64 %199 to double*
  %201 = load double, double* %200
  store double %201, double* %59, align 1, !tbaa !1246
  %202 = add i64 %193, -4
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203
  %205 = sext i32 %204 to i64
  %206 = mul nsw i64 %205, 200
  %207 = load i64, i64* %7, align 8
  %208 = add i64 %206, %207
  %209 = mul nsw i64 %197, 40
  %210 = add i64 %209, %208
  %211 = load i64, i64* %13, align 8
  %212 = add i64 %211, -12
  %213 = inttoptr i64 %212 to i32*
  %214 = load i32, i32* %213
  %215 = sext i32 %214 to i64
  %216 = shl nsw i64 %215, 3
  %217 = add i64 %216, %210
  %218 = load double, double* %59, align 1
  %219 = inttoptr i64 %217 to double*
  store double %218, double* %219
  %220 = inttoptr i64 %212 to i32*
  %221 = load i32, i32* %220
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, 40
  %224 = load i64, i64* %8, align 8
  %225 = add i64 %223, %224
  %226 = add i64 %211, -8
  %227 = inttoptr i64 %226 to i32*
  %228 = load i32, i32* %227
  %229 = sext i32 %228 to i64
  %230 = shl nsw i64 %229, 3
  %231 = add i64 %230, %225
  %232 = inttoptr i64 %231 to double*
  %233 = load double, double* %232
  store double %233, double* %59, align 1, !tbaa !1246
  %234 = add i64 %211, -4
  %235 = inttoptr i64 %234 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  %238 = mul nsw i64 %237, 200
  %239 = load i64, i64* %7, align 8
  %240 = add i64 %238, %239
  %241 = load i64, i64* %13, align 8
  %242 = add i64 %241, -8
  %243 = inttoptr i64 %242 to i32*
  %244 = load i32, i32* %243
  %245 = sext i32 %244 to i64
  %246 = mul nsw i64 %245, 40
  %247 = add i64 %246, %240
  %248 = load i32, i32* %6, align 4
  %249 = add i64 %241, -12
  %250 = inttoptr i64 %249 to i32*
  %251 = load i32, i32* %250
  %252 = sub i32 %248, %251
  %253 = sext i32 %252 to i64
  %254 = shl nsw i64 %253, 3
  %255 = add i64 %247, %254
  %256 = load double, double* %59, align 1
  %257 = inttoptr i64 %255 to double*
  store double %256, double* %257
  %258 = load i64, i64* %13, align 8
  %259 = add i64 %258, -12
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260
  %262 = sext i32 %261 to i64
  %263 = mul nsw i64 %262, 40
  %264 = load i64, i64* %8, align 8
  %265 = add i64 %263, %264
  %266 = add i64 %258, -8
  %267 = inttoptr i64 %266 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  %270 = shl nsw i64 %269, 3
  %271 = add i64 %270, %265
  %272 = inttoptr i64 %271 to double*
  %273 = load double, double* %272
  store double %273, double* %59, align 1, !tbaa !1246
  %274 = add i64 %258, -4
  %275 = inttoptr i64 %274 to i32*
  %276 = load i32, i32* %275
  %277 = sext i32 %276 to i64
  %278 = mul nsw i64 %277, 200
  %279 = load i64, i64* %7, align 8
  %280 = add i64 %278, %279
  store i64 %280, i64* %11, align 8, !tbaa !1240
  %281 = load i32, i32* %6, align 4
  %282 = load i64, i64* %13, align 8
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i32*
  %285 = load i32, i32* %284
  %286 = sub i32 %281, %285
  %287 = sext i32 %286 to i64
  %288 = mul nsw i64 %287, 40
  %289 = load i64, i64* %11, align 8
  %290 = add i64 %288, %289
  %291 = load i64, i64* %13, align 8
  %292 = add i64 %291, -12
  %293 = inttoptr i64 %292 to i32*
  %294 = load i32, i32* %293
  %295 = sext i32 %294 to i64
  %296 = shl nsw i64 %295, 3
  %297 = add i64 %296, %290
  %298 = load double, double* %59, align 1
  %299 = inttoptr i64 %297 to double*
  store double %298, double* %299
  %300 = inttoptr i64 %292 to i32*
  %301 = load i32, i32* %300
  %302 = sext i32 %301 to i64
  %303 = mul nsw i64 %302, 40
  %304 = load i64, i64* %8, align 8
  %305 = add i64 %303, %304
  %306 = add i64 %291, -8
  %307 = inttoptr i64 %306 to i32*
  %308 = load i32, i32* %307
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 3
  %311 = add i64 %310, %305
  %312 = inttoptr i64 %311 to double*
  %313 = load double, double* %312
  store double %313, double* %59, align 1, !tbaa !1246
  %314 = add i64 %291, -4
  %315 = inttoptr i64 %314 to i32*
  %316 = load i32, i32* %315
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %317, 200
  %319 = load i64, i64* %7, align 8
  %320 = add i64 %318, %319
  store i64 %320, i64* %11, align 8, !tbaa !1240
  %321 = load i32, i32* %6, align 4
  %322 = load i64, i64* %13, align 8
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i32*
  %325 = load i32, i32* %324
  %326 = sub i32 %321, %325
  %327 = sext i32 %326 to i64
  %328 = mul nsw i64 %327, 40
  %329 = load i64, i64* %11, align 8
  %330 = add i64 %328, %329
  %331 = load i32, i32* %6, align 4
  %332 = load i64, i64* %13, align 8
  %333 = add i64 %332, -12
  %334 = inttoptr i64 %333 to i32*
  %335 = load i32, i32* %334
  %336 = sub i32 %331, %335
  %337 = sext i32 %336 to i64
  %338 = shl nsw i64 %337, 3
  %339 = add i64 %330, %338
  %340 = load double, double* %59, align 1
  %341 = inttoptr i64 %339 to double*
  store double %340, double* %341
  %342 = inttoptr i64 %333 to i32*
  %343 = load i32, i32* %342
  %344 = sext i32 %343 to i64
  %345 = mul nsw i64 %344, 40
  %346 = load i64, i64* %8, align 8
  %347 = add i64 %345, %346
  %348 = load i64, i64* %13, align 8
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 3
  %354 = add i64 %353, %347
  %355 = inttoptr i64 %354 to double*
  %356 = load double, double* %355
  store double %356, double* %59, align 1, !tbaa !1246
  %357 = add i64 %348, -4
  %358 = inttoptr i64 %357 to i32*
  %359 = load i32, i32* %358
  %360 = sext i32 %359 to i64
  %361 = mul nsw i64 %360, 200
  %362 = load i64, i64* %7, align 8
  %363 = add i64 %361, %362
  store i64 %363, i64* %11, align 8, !tbaa !1240
  %364 = load i32, i32* %6, align 4
  %365 = add i64 %348, -12
  %366 = inttoptr i64 %365 to i32*
  %367 = load i32, i32* %366
  %368 = sub i32 %364, %367
  %369 = sext i32 %368 to i64
  %370 = mul nsw i64 %369, 40
  %371 = load i64, i64* %11, align 8
  %372 = add i64 %370, %371
  %373 = load i64, i64* %13, align 8
  %374 = add i64 %373, -8
  %375 = inttoptr i64 %374 to i32*
  %376 = load i32, i32* %375
  %377 = sext i32 %376 to i64
  %378 = shl nsw i64 %377, 3
  %379 = add i64 %378, %372
  %380 = load double, double* %59, align 1
  %381 = inttoptr i64 %379 to double*
  store double %380, double* %381
  %382 = add i64 %373, -12
  %383 = inttoptr i64 %382 to i32*
  %384 = load i32, i32* %383
  %385 = sext i32 %384 to i64
  %386 = mul nsw i64 %385, 40
  %387 = load i64, i64* %8, align 8
  %388 = add i64 %386, %387
  %389 = inttoptr i64 %374 to i32*
  %390 = load i32, i32* %389
  %391 = sext i32 %390 to i64
  %392 = shl nsw i64 %391, 3
  %393 = add i64 %392, %388
  %394 = inttoptr i64 %393 to double*
  %395 = load double, double* %394
  store double %395, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %396 = add i64 %373, -4
  %397 = inttoptr i64 %396 to i32*
  %398 = load i32, i32* %397
  %399 = sext i32 %398 to i64
  %400 = mul nsw i64 %399, 200
  %401 = load i64, i64* %7, align 8
  %402 = add i64 %400, %401
  store i64 %402, i64* %7, align 8, !tbaa !1240
  %403 = load i32, i32* %6, align 4
  %404 = load i64, i64* %13, align 8
  %405 = add i64 %404, -12
  %406 = inttoptr i64 %405 to i32*
  %407 = load i32, i32* %406
  %408 = sub i32 %403, %407
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %1554, align 8, !tbaa !1240
  %410 = sext i32 %408 to i64
  %411 = mul nsw i64 %410, 40
  %412 = load i64, i64* %7, align 8
  %413 = add i64 %411, %412
  %414 = load i64, i64* %9, align 8
  %415 = load i64, i64* %13, align 8
  %416 = add i64 %415, -8
  %417 = trunc i64 %414 to i32
  %418 = inttoptr i64 %416 to i32*
  %419 = load i32, i32* %418
  %420 = sub i32 %417, %419
  %421 = zext i32 %420 to i64
  store i64 %421, i64* %9, align 8, !tbaa !1240
  %422 = sext i32 %420 to i64
  store i64 %422, i64* %8, align 8, !tbaa !1240
  %423 = shl nsw i64 %422, 3
  %424 = add i64 %413, %423
  %425 = load double, double* %59, align 1
  %426 = inttoptr i64 %424 to double*
  store double %425, double* %426
  %427 = inttoptr i64 %416 to i32*
  %428 = load i32, i32* %427
  %429 = add i32 %428, 1
  %430 = inttoptr i64 %416 to i32*
  store i32 %429, i32* %430
  %431 = add i64 %108, -89
  br label %block_412df5

block_412df5:                                     ; preds = %block_412def, %block_412dff
  %432 = phi i64 [ %1219, %block_412def ], [ %431, %block_412dff ]
  %433 = phi i64 [ %2880, %block_412def ], [ %415, %block_412dff ]
  %434 = phi %struct.Memory* [ %2881, %block_412def ], [ %107, %block_412dff ]
  %435 = add i64 %433, -8
  %436 = inttoptr i64 %435 to i32*
  %437 = load i32, i32* %436
  %438 = add i32 %437, -3
  %439 = lshr i32 %438, 31
  %440 = trunc i32 %439 to i8
  %441 = lshr i32 %437, 31
  %442 = xor i32 %439, %441
  %443 = add nuw nsw i32 %442, %441
  %444 = icmp eq i32 %443, 2
  %445 = icmp ne i8 %440, 0
  %446 = xor i1 %445, %444
  %447 = select i1 %446, i64 10, i64 643
  %448 = add i64 %432, %447
  br i1 %446, label %block_412dff, label %block_413078

block_4147ef:                                     ; preds = %block_41479e
  %449 = add i32 %3044, 1
  %450 = inttoptr i64 %1418 to i32*
  store i32 %449, i32* %450
  %451 = add i64 %3042, -98
  br label %block_41478d

block_4133e4:                                     ; preds = %block_41334f.block_4133e4_crit_edge, %block_4133c1
  %452 = phi i64 [ %962, %block_41334f.block_4133e4_crit_edge ], [ %589, %block_4133c1 ]
  %453 = phi i64 [ %963, %block_41334f.block_4133e4_crit_edge ], [ %575, %block_4133c1 ]
  %454 = phi %struct.Memory* [ %939, %block_41334f.block_4133e4_crit_edge ], [ %939, %block_4133c1 ]
  %455 = add i64 %453, -1024
  %456 = add i64 %453, -2240
  store i64 %456, i64* %11, align 8, !tbaa !1240
  store i64 %455, i64* %10, align 8, !tbaa !1240
  %457 = add i64 %452, 39580
  %458 = add i64 %452, 22
  %459 = load i64, i64* %12, align 8, !tbaa !1240
  %460 = add i64 %459, -8
  %461 = inttoptr i64 %460 to i64*
  store i64 %458, i64* %461
  store i64 %460, i64* %12, align 8, !tbaa !1240
  %462 = tail call %struct.Memory* @sub_41ce80_transf_nc(%struct.State* nonnull %0, i64 %457, %struct.Memory* %454)
  %463 = load i64, i64* %13, align 8
  %464 = add i64 %463, -1024
  %465 = load i64, i64* %3, align 8
  store i64 %464, i64* %10, align 8, !tbaa !1240
  %466 = add i64 %463, -3248
  store i64 %466, i64* %11, align 8, !tbaa !1240
  %467 = add i64 %463, -4
  %468 = inttoptr i64 %467 to i32*
  %469 = load i32, i32* %468
  %470 = zext i32 %469 to i64
  store i64 %470, i64* %9, align 8, !tbaa !1240
  %471 = add i64 %465, -45322
  %472 = add i64 %465, 22
  %473 = load i64, i64* %12, align 8, !tbaa !1240
  %474 = add i64 %473, -8
  %475 = inttoptr i64 %474 to i64*
  store i64 %472, i64* %475
  store i64 %474, i64* %12, align 8, !tbaa !1240
  %476 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %471, %struct.Memory* %462)
  %477 = load i64, i64* %13, align 8
  %478 = add i64 %477, -3248
  %479 = load i64, i64* %3, align 8
  %480 = add i64 %477, -3456
  store i64 %480, i64* %11, align 8, !tbaa !1240
  store i64 %478, i64* %10, align 8, !tbaa !1240
  %481 = add i64 %479, 41728
  %482 = add i64 %479, 22
  %483 = load i64, i64* %12, align 8, !tbaa !1240
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485
  store i64 %484, i64* %12, align 8, !tbaa !1240
  %486 = tail call %struct.Memory* @sub_41d710_transfb_nc1(%struct.State* nonnull %0, i64 %481, %struct.Memory* %476)
  %487 = load i64, i64* %3, align 8
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %7, align 8, !tbaa !1240
  %488 = load i64, i64* %13, align 8
  %489 = add i64 %488, -3456
  store i64 %489, i64* %10, align 8, !tbaa !1240
  %490 = add i64 %488, -12
  %491 = inttoptr i64 %490 to i32*
  %492 = load i32, i32* %491
  %493 = sext i32 %492 to i64
  %494 = mul nsw i64 %493, 40
  %495 = add i64 %494, %489
  %496 = add i64 %488, -8
  %497 = inttoptr i64 %496 to i32*
  %498 = load i32, i32* %497
  %499 = sext i32 %498 to i64
  %500 = shl nsw i64 %499, 3
  %501 = add i64 %500, %495
  %502 = inttoptr i64 %501 to double*
  %503 = load double, double* %502
  store double %503, double* %59, align 1, !tbaa !1246
  %504 = add i64 %488, -4
  %505 = inttoptr i64 %504 to i32*
  %506 = load i32, i32* %505
  %507 = sext i32 %506 to i64
  %508 = mul nsw i64 %507, 800
  %509 = load i64, i64* %7, align 8
  %510 = add i64 %508, %509
  %511 = load i64, i64* %13, align 8
  %512 = add i64 %511, -12
  %513 = inttoptr i64 %512 to i32*
  %514 = load i32, i32* %513
  %515 = sext i32 %514 to i64
  %516 = mul nsw i64 %515, 40
  %517 = add i64 %516, %510
  %518 = add i64 %511, -8
  %519 = inttoptr i64 %518 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = shl nsw i64 %521, 3
  %523 = add i64 %522, %517
  %524 = load double, double* %59, align 1
  %525 = inttoptr i64 %523 to double*
  store double %524, double* %525
  %526 = inttoptr i64 %512 to i32*
  %527 = load i32, i32* %526
  %528 = sext i32 %527 to i64
  %529 = mul nsw i64 %528, 40
  %530 = load i64, i64* %10, align 8
  %531 = add i64 %529, %530
  %532 = load i64, i64* %13, align 8
  %533 = add i64 %532, -8
  %534 = inttoptr i64 %533 to i32*
  %535 = load i32, i32* %534
  %536 = sext i32 %535 to i64
  %537 = shl nsw i64 %536, 3
  %538 = add i64 %537, %531
  %539 = inttoptr i64 %538 to double*
  %540 = load double, double* %539
  store double %540, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %541 = add i64 %532, -4
  %542 = inttoptr i64 %541 to i32*
  %543 = load i32, i32* %542
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %544, 800
  %546 = load i64, i64* %7, align 8
  %547 = add i64 %545, %546
  %548 = mul nsw i64 %536, 40
  %549 = add i64 %548, %547
  %550 = load i64, i64* %13, align 8
  %551 = add i64 %550, -12
  %552 = inttoptr i64 %551 to i32*
  %553 = load i32, i32* %552
  %554 = sext i32 %553 to i64
  %555 = shl nsw i64 %554, 3
  %556 = add i64 %555, %549
  %557 = load double, double* %59, align 1
  %558 = inttoptr i64 %556 to double*
  store double %557, double* %558
  %559 = add i64 %550, -16
  %560 = add i64 %487, 138
  %561 = inttoptr i64 %559 to i32*
  store i32 0, i32* %561
  %562 = add i64 %550, -1024
  %563 = add i64 %550, -2032
  %564 = add i64 %550, -20
  br label %block_4134b0

block_412dcd:                                     ; preds = %block_412cda
  %565 = add i64 %61, -4
  %566 = add i64 %1286, 7
  %567 = inttoptr i64 %565 to i32*
  store i32 0, i32* %567
  %568 = bitcast %union.VectorReg* %15 to i8*
  %569 = bitcast [32 x %union.VectorReg]* %14 to <2 x i32>*
  %570 = bitcast %union.VectorReg* %15 to i32*
  %571 = getelementptr inbounds i8, i8* %568, i64 4
  %572 = bitcast i8* %571 to i32*
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_412dd4

block_4133c1:                                     ; preds = %block_41334f
  %574 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %574, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %575 = load i64, i64* %13, align 8
  %576 = add i64 %575, -2240
  %577 = add i64 %575, -12
  %578 = inttoptr i64 %577 to i32*
  %579 = load i32, i32* %578
  %580 = sext i32 %579 to i64
  %581 = mul nsw i64 %580, 40
  %582 = add i64 %581, %576
  %583 = add i64 %575, -8
  %584 = inttoptr i64 %583 to i32*
  %585 = load i32, i32* %584
  %586 = sext i32 %585 to i64
  %587 = shl nsw i64 %586, 3
  %588 = add i64 %587, %582
  %589 = add i64 %962, 35
  %590 = inttoptr i64 %588 to double*
  store double %574, double* %590
  br label %block_4133e4

block_412dba:                                     ; preds = %block_412d05
  %591 = inttoptr i64 %1555 to i32*
  %592 = load i32, i32* %591
  %593 = add i32 %592, 1
  %594 = zext i32 %593 to i64
  store i64 %594, i64* %7, align 8, !tbaa !1240
  %595 = inttoptr i64 %1555 to i32*
  store i32 %593, i32* %595
  %596 = add i64 %1337, -224
  br label %block_412cda

block_4147a8:                                     ; preds = %block_41479e
  %597 = sext i32 %3044 to i64
  %598 = mul nsw i64 %597, 40
  %599 = add i64 %598, ptrtoint (%tcpre_type* @tcpre to i64)
  %600 = sext i32 %3032 to i64
  %601 = shl nsw i64 %600, 3
  %602 = add i64 %601, %599
  %603 = inttoptr i64 %602 to double*
  %604 = load double, double* %603
  store double %604, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %605 = add i64 %598, %1423
  %606 = add i64 %601, %605
  %607 = inttoptr i64 %606 to double*
  store double %604, double* %607
  %608 = inttoptr i64 %1422 to i32*
  %609 = load i32, i32* %608
  %610 = add i32 %609, 1
  %611 = inttoptr i64 %1422 to i32*
  store i32 %610, i32* %611
  %612 = add i64 %3042, -10
  br label %block_41479e

block_412da7:                                     ; preds = %block_412d16
  %613 = add i32 %1305, 1
  %614 = inttoptr i64 %69 to i32*
  store i32 %613, i32* %614
  %615 = add i64 %1303, -162
  br label %block_412d05

block_4139a1:                                     ; preds = %block_413a28, %block_41399a
  %616 = phi i64 [ %1836, %block_41399a ], [ %3220, %block_413a28 ]
  %617 = phi %struct.Memory* [ %2823, %block_41399a ], [ %987, %block_413a28 ]
  %618 = inttoptr i64 %1835 to i32*
  %619 = load i32, i32* %618
  %620 = add i32 %619, -5
  %621 = lshr i32 %620, 31
  %622 = lshr i32 %619, 31
  %623 = xor i32 %621, %622
  %624 = add nuw nsw i32 %623, %622
  %625 = icmp eq i32 %624, 2
  %626 = icmp ne i32 %621, 0
  %627 = xor i1 %626, %625
  %628 = select i1 %627, i64 10, i64 439
  %629 = add i64 %616, %628
  br i1 %627, label %block_4139ab, label %block_413b58

block_413185:                                     ; preds = %block_413141, %block_41314b
  %630 = phi i64 [ %3245, %block_413141 ], [ %3068, %block_41314b ]
  %631 = phi i64 [ %3237, %block_413141 ], [ %3061, %block_41314b ]
  %632 = phi %struct.Memory* [ %3238, %block_413141 ], [ %3238, %block_41314b ]
  %633 = add i64 %631, -1024
  %634 = add i64 %631, -2240
  store i64 %634, i64* %11, align 8, !tbaa !1240
  store i64 %633, i64* %10, align 8, !tbaa !1240
  %635 = add i64 %630, 40187
  %636 = add i64 %630, 22
  %637 = load i64, i64* %12, align 8, !tbaa !1240
  %638 = add i64 %637, -8
  %639 = inttoptr i64 %638 to i64*
  store i64 %636, i64* %639
  store i64 %638, i64* %12, align 8, !tbaa !1240
  %640 = tail call %struct.Memory* @sub_41ce80_transf_nc(%struct.State* nonnull %0, i64 %635, %struct.Memory* %632)
  %641 = load i64, i64* %13, align 8
  %642 = add i64 %641, -1024
  %643 = load i64, i64* %3, align 8
  store i64 %642, i64* %10, align 8, !tbaa !1240
  %644 = add i64 %641, -3248
  store i64 %644, i64* %11, align 8, !tbaa !1240
  %645 = add i64 %641, -4
  %646 = inttoptr i64 %645 to i32*
  %647 = load i32, i32* %646
  %648 = zext i32 %647 to i64
  store i64 %648, i64* %9, align 8, !tbaa !1240
  %649 = add i64 %643, -44715
  %650 = add i64 %643, 22
  %651 = load i64, i64* %12, align 8, !tbaa !1240
  %652 = add i64 %651, -8
  %653 = inttoptr i64 %652 to i64*
  store i64 %650, i64* %653
  store i64 %652, i64* %12, align 8, !tbaa !1240
  %654 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %649, %struct.Memory* %640)
  %655 = load i64, i64* %13, align 8
  %656 = add i64 %655, -3248
  %657 = load i64, i64* %3, align 8
  %658 = add i64 %655, -3456
  store i64 %658, i64* %11, align 8, !tbaa !1240
  store i64 %656, i64* %10, align 8, !tbaa !1240
  %659 = add i64 %657, 42335
  %660 = add i64 %657, 22
  %661 = load i64, i64* %12, align 8, !tbaa !1240
  %662 = add i64 %661, -8
  %663 = inttoptr i64 %662 to i64*
  store i64 %660, i64* %663
  store i64 %662, i64* %12, align 8, !tbaa !1240
  %664 = tail call %struct.Memory* @sub_41d710_transfb_nc1(%struct.State* nonnull %0, i64 %659, %struct.Memory* %654)
  %665 = load i64, i64* %3, align 8
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %7, align 8, !tbaa !1240
  %666 = load i64, i64* %13, align 8
  %667 = add i64 %666, -3456
  store i64 %667, i64* %10, align 8, !tbaa !1240
  %668 = add i64 %666, -12
  %669 = inttoptr i64 %668 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  %672 = mul nsw i64 %671, 40
  %673 = add i64 %672, %667
  %674 = add i64 %666, -8
  %675 = inttoptr i64 %674 to i32*
  %676 = load i32, i32* %675
  %677 = sext i32 %676 to i64
  %678 = shl nsw i64 %677, 3
  %679 = add i64 %678, %673
  %680 = inttoptr i64 %679 to double*
  %681 = load double, double* %680
  store double %681, double* %59, align 1, !tbaa !1246
  %682 = add i64 %666, -4
  %683 = inttoptr i64 %682 to i32*
  %684 = load i32, i32* %683
  %685 = sext i32 %684 to i64
  %686 = mul nsw i64 %685, 800
  %687 = load i64, i64* %7, align 8
  %688 = add i64 %686, %687
  %689 = load i64, i64* %13, align 8
  %690 = add i64 %689, -12
  %691 = inttoptr i64 %690 to i32*
  %692 = load i32, i32* %691
  %693 = sext i32 %692 to i64
  %694 = mul nsw i64 %693, 40
  %695 = add i64 %694, %688
  %696 = add i64 %689, -8
  %697 = inttoptr i64 %696 to i32*
  %698 = load i32, i32* %697
  %699 = sext i32 %698 to i64
  %700 = shl nsw i64 %699, 3
  %701 = add i64 %700, %695
  %702 = load double, double* %59, align 1
  %703 = inttoptr i64 %701 to double*
  store double %702, double* %703
  %704 = inttoptr i64 %690 to i32*
  %705 = load i32, i32* %704
  %706 = sext i32 %705 to i64
  %707 = mul nsw i64 %706, 40
  %708 = load i64, i64* %10, align 8
  %709 = add i64 %707, %708
  %710 = load i64, i64* %13, align 8
  %711 = add i64 %710, -8
  %712 = inttoptr i64 %711 to i32*
  %713 = load i32, i32* %712
  %714 = sext i32 %713 to i64
  %715 = shl nsw i64 %714, 3
  %716 = add i64 %715, %709
  %717 = inttoptr i64 %716 to double*
  %718 = load double, double* %717
  store double %718, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %719 = add i64 %710, -4
  %720 = inttoptr i64 %719 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = mul nsw i64 %722, 800
  %724 = load i64, i64* %7, align 8
  %725 = add i64 %723, %724
  %726 = mul nsw i64 %714, 40
  %727 = add i64 %726, %725
  %728 = load i64, i64* %13, align 8
  %729 = add i64 %728, -12
  %730 = inttoptr i64 %729 to i32*
  %731 = load i32, i32* %730
  %732 = sext i32 %731 to i64
  store i64 %732, i64* %8, align 8, !tbaa !1240
  %733 = shl nsw i64 %732, 3
  %734 = add i64 %733, %727
  %735 = load double, double* %59, align 1
  %736 = inttoptr i64 %734 to double*
  store double %735, double* %736
  %737 = add i64 %728, -8
  %738 = inttoptr i64 %737 to i32*
  %739 = load i32, i32* %738
  %740 = add i32 %739, 1
  %741 = inttoptr i64 %737 to i32*
  store i32 %740, i32* %741
  %742 = add i64 %665, -293
  br label %block_4130a2

block_413c92:                                     ; preds = %block_413c88
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  %743 = inttoptr i64 %2763 to i32*
  store i32 0, i32* %743
  %744 = inttoptr i64 %2773 to i32*
  %745 = load i32, i32* %744
  %746 = sext i32 %745 to i64
  %747 = mul nsw i64 %746, 800
  %748 = add i64 %747, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %749 = inttoptr i64 %2757 to i32*
  %750 = load i32, i32* %749
  %751 = sub i32 4, %750
  %752 = sext i32 %751 to i64
  %753 = mul nsw i64 %752, 40
  %754 = add i64 %753, %748
  %755 = inttoptr i64 %2763 to i32*
  %756 = load i32, i32* %755
  %757 = sext i32 %756 to i64
  %758 = shl nsw i64 %757, 3
  %759 = add i64 %758, %754
  %760 = inttoptr i64 %759 to double*
  %761 = load double, double* %760
  %762 = add i64 %747, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 200)
  %763 = sext i32 %750 to i64
  %764 = mul nsw i64 %763, 40
  %765 = add i64 %764, %762
  %766 = add i64 %758, %765
  %767 = inttoptr i64 %766 to double*
  store double %761, double* %767
  %768 = inttoptr i64 %2773 to i32*
  %769 = load i32, i32* %768
  %770 = sext i32 %769 to i64
  %771 = mul nsw i64 %770, 800
  %772 = add i64 %771, ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64)
  %773 = inttoptr i64 %2757 to i32*
  %774 = load i32, i32* %773
  %775 = sub i32 4, %774
  %776 = sext i32 %775 to i64
  %777 = mul nsw i64 %776, 40
  %778 = add i64 %777, %772
  %779 = inttoptr i64 %2763 to i32*
  %780 = load i32, i32* %779
  %781 = sext i32 %780 to i64
  %782 = shl nsw i64 %781, 3
  %783 = add i64 %782, %778
  %784 = inttoptr i64 %783 to double*
  %785 = load double, double* %784
  %786 = add i64 %771, add (i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64 200)
  %787 = sext i32 %774 to i64
  %788 = mul nsw i64 %787, 40
  %789 = add i64 %788, %786
  %790 = add i64 %782, %789
  %791 = inttoptr i64 %790 to double*
  store double %785, double* %791
  %792 = inttoptr i64 %2773 to i32*
  %793 = load i32, i32* %792
  %794 = sext i32 %793 to i64
  %795 = mul nsw i64 %794, 800
  %796 = add i64 %795, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %797 = inttoptr i64 %2757 to i32*
  %798 = load i32, i32* %797
  %799 = sub i32 4, %798
  %800 = sext i32 %799 to i64
  %801 = mul nsw i64 %800, 40
  %802 = add i64 %801, %796
  %803 = inttoptr i64 %2763 to i32*
  %804 = load i32, i32* %803
  %805 = sext i32 %804 to i64
  %806 = shl nsw i64 %805, 3
  %807 = add i64 %806, %802
  %808 = inttoptr i64 %807 to double*
  %809 = load double, double* %808
  store double %809, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %810 = load i64, i64* %7, align 8
  %811 = add i64 %795, %810
  %812 = add i64 %811, 200
  %813 = sext i32 %798 to i64
  %814 = mul nsw i64 %813, 40
  %815 = add i64 %814, %812
  %816 = add i64 %806, %815
  %817 = inttoptr i64 %816 to double*
  store double %809, double* %817
  %818 = add i64 %2039, 297
  %819 = inttoptr i64 %2763 to i32*
  store i32 1, i32* %819
  br label %block_413dbb

block_41416c:                                     ; preds = %block_4140ec
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  store i64 4, i64* %8, align 8, !tbaa !1240
  %820 = inttoptr i64 %2369 to i32*
  store i32 4, i32* %820
  %821 = inttoptr i64 %2379 to i32*
  %822 = load i32, i32* %821
  %823 = sext i32 %822 to i64
  %824 = mul nsw i64 %823, 800
  %825 = add i64 %824, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %826 = inttoptr i64 %2363 to i32*
  %827 = load i32, i32* %826
  %828 = sub i32 4, %827
  %829 = sext i32 %828 to i64
  %830 = mul nsw i64 %829, 40
  %831 = add i64 %830, %825
  store i64 %831, i64* %1554, align 8, !tbaa !1240
  %832 = inttoptr i64 %2369 to i32*
  %833 = load i32, i32* %832
  %834 = sub i32 4, %833
  %835 = sext i32 %834 to i64
  %836 = shl nsw i64 %835, 3
  %837 = add i64 %831, %836
  %838 = inttoptr i64 %837 to double*
  %839 = load double, double* %838
  %840 = add i64 %824, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 600)
  %841 = sext i32 %827 to i64
  %842 = mul nsw i64 %841, 40
  %843 = add i64 %842, %840
  %844 = sext i32 %833 to i64
  %845 = shl nsw i64 %844, 3
  %846 = add i64 %845, %843
  %847 = inttoptr i64 %846 to double*
  store double %839, double* %847
  %848 = inttoptr i64 %2379 to i32*
  %849 = load i32, i32* %848
  %850 = sext i32 %849 to i64
  %851 = mul nsw i64 %850, 800
  %852 = add i64 %851, ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64)
  %853 = inttoptr i64 %2363 to i32*
  %854 = load i32, i32* %853
  %855 = sub i32 4, %854
  %856 = sext i32 %855 to i64
  %857 = mul nsw i64 %856, 40
  %858 = add i64 %857, %852
  %859 = inttoptr i64 %2369 to i32*
  %860 = load i32, i32* %859
  %861 = sub i32 4, %860
  %862 = sext i32 %861 to i64
  %863 = shl nsw i64 %862, 3
  %864 = add i64 %858, %863
  %865 = inttoptr i64 %864 to double*
  %866 = load double, double* %865
  %867 = add i64 %851, add (i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64 600)
  %868 = sext i32 %854 to i64
  %869 = mul nsw i64 %868, 40
  %870 = add i64 %869, %867
  %871 = sext i32 %860 to i64
  %872 = shl nsw i64 %871, 3
  %873 = add i64 %872, %870
  %874 = inttoptr i64 %873 to double*
  store double %866, double* %874
  %875 = inttoptr i64 %2379 to i32*
  %876 = load i32, i32* %875
  %877 = sext i32 %876 to i64
  %878 = mul nsw i64 %877, 800
  %879 = add i64 %878, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %880 = inttoptr i64 %2363 to i32*
  %881 = load i32, i32* %880
  %882 = sub i32 4, %881
  %883 = zext i32 %882 to i64
  store i64 %883, i64* %573, align 8, !tbaa !1240
  %884 = sext i32 %882 to i64
  %885 = mul nsw i64 %884, 40
  %886 = add i64 %885, %879
  %887 = load i64, i64* %8, align 8
  %888 = trunc i64 %887 to i32
  %889 = inttoptr i64 %2369 to i32*
  %890 = load i32, i32* %889
  %891 = sub i32 %888, %890
  %892 = zext i32 %891 to i64
  store i64 %892, i64* %8, align 8, !tbaa !1240
  %893 = sext i32 %891 to i64
  %894 = shl nsw i64 %893, 3
  %895 = add i64 %886, %894
  %896 = inttoptr i64 %895 to double*
  %897 = load double, double* %896
  store double %897, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %898 = load i64, i64* %7, align 8
  %899 = add i64 %878, %898
  %900 = add i64 %899, 600
  %901 = sext i32 %881 to i64
  %902 = mul nsw i64 %901, 40
  %903 = add i64 %902, %900
  %904 = sext i32 %890 to i64
  store i64 %904, i64* %9, align 8, !tbaa !1240
  %905 = shl nsw i64 %904, 3
  %906 = add i64 %905, %903
  %907 = inttoptr i64 %906 to double*
  store double %897, double* %907
  %908 = inttoptr i64 %2363 to i32*
  %909 = load i32, i32* %908
  %910 = add i32 %909, 1
  %911 = inttoptr i64 %2363 to i32*
  store i32 %910, i32* %911
  %912 = add i64 %1381, -145
  br label %block_4140db

block_4140e5:                                     ; preds = %block_4140db
  %913 = add i64 %1238, 7
  %914 = inttoptr i64 %2369 to i32*
  store i32 1, i32* %914
  br label %block_4140ec

block_41334f:                                     ; preds = %block_413345
  store i64 25, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %915 = add i64 %2605, -2240
  store i64 %915, i64* %11, align 8, !tbaa !1240
  %916 = add i64 %2620, 50433
  %917 = add i64 %2620, 23
  %918 = load i64, i64* %12, align 8, !tbaa !1240
  %919 = add i64 %918, -8
  %920 = inttoptr i64 %919 to i64*
  store i64 %917, i64* %920
  store i64 %919, i64* %12, align 8, !tbaa !1240
  %921 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %916, %struct.Memory* %2606)
  %922 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %923 = load i64, i64* %13, align 8
  %924 = add i64 %923, -1024
  store i64 %924, i64* %11, align 8, !tbaa !1240
  %925 = add i64 %922, 50410
  %926 = add i64 %922, 23
  %927 = load i64, i64* %12, align 8, !tbaa !1240
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  store i64 %926, i64* %929
  store i64 %928, i64* %12, align 8, !tbaa !1240
  %930 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %925, %struct.Memory* %921)
  %931 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %932 = load i64, i64* %13, align 8
  %933 = add i64 %932, -2032
  store i64 %933, i64* %11, align 8, !tbaa !1240
  %934 = add i64 %931, 50387
  %935 = add i64 %931, 23
  %936 = load i64, i64* %12, align 8, !tbaa !1240
  %937 = add i64 %936, -8
  %938 = inttoptr i64 %937 to i64*
  store i64 %935, i64* %938
  store i64 %937, i64* %12, align 8, !tbaa !1240
  %939 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %934, %struct.Memory* %930)
  %940 = load i64, i64* %3, align 8
  %941 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %941, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %942 = load i64, i64* %13, align 8
  %943 = add i64 %942, -2240
  %944 = add i64 %942, -12
  %945 = inttoptr i64 %944 to i32*
  %946 = load i32, i32* %945
  %947 = sext i32 %946 to i64
  %948 = mul nsw i64 %947, 40
  %949 = add i64 %948, %943
  %950 = add i64 %942, -8
  %951 = inttoptr i64 %950 to i32*
  %952 = load i32, i32* %951
  %953 = sext i32 %952 to i64
  %954 = shl nsw i64 %953, 3
  %955 = add i64 %954, %949
  %956 = inttoptr i64 %955 to double*
  store double %941, double* %956
  %957 = inttoptr i64 %950 to i32*
  %958 = load i32, i32* %957
  %959 = add i32 %958, -4
  %960 = icmp eq i32 %959, 0
  %961 = select i1 %960, i64 45, i64 80
  %962 = add i64 %940, %961
  br i1 %960, label %block_4133c1, label %block_41334f.block_4133e4_crit_edge

block_41334f.block_4133e4_crit_edge:              ; preds = %block_41334f
  %963 = load i64, i64* %13, align 8
  br label %block_4133e4

block_41453c:                                     ; preds = %block_414532
  %964 = sext i32 %2490 to i64
  %965 = shl nsw i64 %964, 3
  %966 = add i64 %965, ptrtoint (%tcpre_type* @tcpre to i64)
  %967 = inttoptr i64 %966 to double*
  %968 = load double, double* %967
  %969 = add i64 %2147, %965
  %970 = inttoptr i64 %969 to double*
  store double %968, double* %970
  %971 = inttoptr i64 %2143 to i32*
  %972 = load i32, i32* %971
  %973 = sext i32 %972 to i64
  %974 = shl nsw i64 %973, 3
  %975 = add i64 %974, ptrtoint (%tcpre_type* @tcpre to i64)
  %976 = inttoptr i64 %975 to double*
  %977 = load double, double* %976
  store double %977, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %978 = mul nsw i64 %973, 40
  %979 = add i64 %978, %2147
  %980 = inttoptr i64 %979 to double*
  store double %977, double* %980
  %981 = inttoptr i64 %2143 to i32*
  %982 = load i32, i32* %981
  %983 = add i32 %982, 1
  %984 = inttoptr i64 %2143 to i32*
  store i32 %983, i32* %984
  %985 = add i64 %2501, -10
  br label %block_414532

block_4139b2:                                     ; preds = %block_4139bc, %block_4139ab
  %986 = phi i64 [ %1591, %block_4139ab ], [ %1923, %block_4139bc ]
  %987 = phi %struct.Memory* [ %617, %block_4139ab ], [ %987, %block_4139bc ]
  %988 = inttoptr i64 %1838 to i32*
  %989 = load i32, i32* %988
  %990 = add i32 %989, -4
  %991 = lshr i32 %990, 31
  %992 = lshr i32 %989, 31
  %993 = xor i32 %991, %992
  %994 = add nuw nsw i32 %993, %992
  %995 = icmp eq i32 %994, 2
  %996 = icmp ne i32 %991, 0
  %997 = xor i1 %996, %995
  %998 = select i1 %997, i64 10, i64 118
  %999 = add i64 %986, %998
  br i1 %997, label %block_4139bc, label %block_413a28

block_414992:                                     ; preds = %block_41494b, %block_414a5c
  %1000 = phi i64 [ %2103, %block_41494b ], [ %1308, %block_414a5c ]
  %1001 = phi %struct.Memory* [ %2099, %block_41494b ], [ %1956, %block_414a5c ]
  %1002 = inttoptr i64 %2101 to i32*
  %1003 = load i32, i32* %1002
  %1004 = add i32 %1003, -5
  %1005 = lshr i32 %1004, 31
  %1006 = trunc i32 %1005 to i8
  %1007 = lshr i32 %1003, 31
  %1008 = xor i32 %1005, %1007
  %1009 = add nuw nsw i32 %1008, %1007
  %1010 = icmp eq i32 %1009, 2
  %1011 = icmp ne i8 %1006, 0
  %1012 = xor i1 %1011, %1010
  %1013 = select i1 %1012, i64 10, i64 221
  %1014 = add i64 %1000, %1013
  br i1 %1012, label %block_41499c, label %block_414a6f

block_41353b:                                     ; preds = %block_4134b0
  store i64 %562, i64* %10, align 8, !tbaa !1240
  %1015 = add i64 %550, -3248
  store i64 %1015, i64* %11, align 8, !tbaa !1240
  %1016 = add i64 %550, -4
  %1017 = inttoptr i64 %1016 to i32*
  %1018 = load i32, i32* %1017
  %1019 = zext i32 %1018 to i64
  store i64 %1019, i64* %9, align 8, !tbaa !1240
  %1020 = add i64 %3383, -45643
  %1021 = add i64 %3383, 22
  %1022 = load i64, i64* %12, align 8, !tbaa !1240
  %1023 = add i64 %1022, -8
  %1024 = inttoptr i64 %1023 to i64*
  store i64 %1021, i64* %1024
  store i64 %1023, i64* %12, align 8, !tbaa !1240
  %1025 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %1020, %struct.Memory* %3370)
  %1026 = load i64, i64* %13, align 8
  %1027 = add i64 %1026, -3248
  %1028 = load i64, i64* %3, align 8
  store i64 %1027, i64* %10, align 8, !tbaa !1240
  %1029 = add i64 %1026, -3456
  store i64 %1029, i64* %11, align 8, !tbaa !1240
  %1030 = add i64 %1028, 40191
  %1031 = add i64 %1028, 19
  %1032 = load i64, i64* %12, align 8, !tbaa !1240
  %1033 = add i64 %1032, -8
  %1034 = inttoptr i64 %1033 to i64*
  store i64 %1031, i64* %1034
  store i64 %1033, i64* %12, align 8, !tbaa !1240
  %1035 = tail call %struct.Memory* @sub_41d250_transfb_nc2(%struct.State* nonnull %0, i64 %1030, %struct.Memory* %1025)
  %1036 = load i64, i64* %13, align 8
  %1037 = add i64 %1036, -2032
  %1038 = load i64, i64* %3, align 8
  store i64 %1037, i64* %10, align 8, !tbaa !1240
  %1039 = add i64 %1036, -3248
  store i64 %1039, i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  %1040 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %1041 = add i64 %1036, -3456
  %1042 = add i64 %1036, -12
  %1043 = inttoptr i64 %1042 to i32*
  %1044 = load i32, i32* %1043
  %1045 = sext i32 %1044 to i64
  %1046 = mul nsw i64 %1045, 40
  %1047 = add i64 %1046, %1041
  %1048 = add i64 %1036, -8
  %1049 = inttoptr i64 %1048 to i32*
  %1050 = load i32, i32* %1049
  %1051 = sext i32 %1050 to i64
  %1052 = shl nsw i64 %1051, 3
  %1053 = add i64 %1052, %1047
  %1054 = inttoptr i64 %1053 to double*
  %1055 = load double, double* %1054
  %1056 = fmul double %1040, %1055
  store double %1056, double* %59, align 1, !tbaa !1246
  %1057 = load i64, i64* %13, align 8
  %1058 = add i64 %1057, -4
  %1059 = inttoptr i64 %1058 to i32*
  %1060 = load i32, i32* %1059
  %1061 = sext i32 %1060 to i64
  %1062 = mul nsw i64 %1061, 800
  %1063 = load i64, i64* %7, align 8
  %1064 = add i64 %1062, %1063
  %1065 = add i64 %1057, -12
  %1066 = inttoptr i64 %1065 to i32*
  %1067 = load i32, i32* %1066
  %1068 = sext i32 %1067 to i64
  %1069 = mul nsw i64 %1068, 40
  %1070 = add i64 %1069, %1064
  %1071 = load i64, i64* %13, align 8
  %1072 = add i64 %1071, -8
  %1073 = inttoptr i64 %1072 to i32*
  %1074 = load i32, i32* %1073
  %1075 = sext i32 %1074 to i64
  %1076 = shl nsw i64 %1075, 3
  %1077 = add i64 %1076, %1070
  %1078 = load double, double* %59, align 1
  %1079 = inttoptr i64 %1077 to double*
  store double %1078, double* %1079
  %1080 = add i64 %1071, -4
  %1081 = inttoptr i64 %1080 to i32*
  %1082 = load i32, i32* %1081
  %1083 = sext i32 %1082 to i64
  %1084 = mul nsw i64 %1083, 800
  %1085 = load i64, i64* %7, align 8
  %1086 = add i64 %1084, %1085
  %1087 = add i64 %1071, -12
  %1088 = inttoptr i64 %1087 to i32*
  %1089 = load i32, i32* %1088
  %1090 = sext i32 %1089 to i64
  %1091 = mul nsw i64 %1090, 40
  %1092 = add i64 %1091, %1086
  store i64 %1092, i64* %1554, align 8, !tbaa !1240
  %1093 = load i64, i64* %13, align 8
  %1094 = add i64 %1093, -8
  %1095 = inttoptr i64 %1094 to i32*
  %1096 = load i32, i32* %1095
  %1097 = sext i32 %1096 to i64
  %1098 = shl nsw i64 %1097, 3
  %1099 = add i64 %1098, %1092
  %1100 = inttoptr i64 %1099 to double*
  %1101 = load double, double* %1100
  store double %1101, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1102 = add i64 %1093, -4
  %1103 = inttoptr i64 %1102 to i32*
  %1104 = load i32, i32* %1103
  %1105 = sext i32 %1104 to i64
  %1106 = mul nsw i64 %1105, 800
  %1107 = load i64, i64* %7, align 8
  %1108 = add i64 %1106, %1107
  %1109 = mul nsw i64 %1097, 40
  %1110 = add i64 %1109, %1108
  %1111 = load i64, i64* %13, align 8
  %1112 = add i64 %1111, -12
  %1113 = inttoptr i64 %1112 to i32*
  %1114 = load i32, i32* %1113
  %1115 = sext i32 %1114 to i64
  %1116 = shl nsw i64 %1115, 3
  %1117 = add i64 %1116, %1110
  %1118 = load double, double* %59, align 1
  %1119 = inttoptr i64 %1117 to double*
  store double %1118, double* %1119
  %1120 = add i64 %1111, -4
  %1121 = inttoptr i64 %1120 to i32*
  %1122 = load i32, i32* %1121
  %1123 = zext i32 %1122 to i64
  store i64 %1123, i64* %9, align 8, !tbaa !1240
  %1124 = add i64 %1038, -45684
  %1125 = add i64 %1038, 178
  %1126 = load i64, i64* %12, align 8, !tbaa !1240
  %1127 = add i64 %1126, -8
  %1128 = inttoptr i64 %1127 to i64*
  store i64 %1125, i64* %1128
  store i64 %1127, i64* %12, align 8, !tbaa !1240
  %1129 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %1124, %struct.Memory* %1035)
  %1130 = load i64, i64* %13, align 8
  %1131 = add i64 %1130, -3248
  %1132 = load i64, i64* %3, align 8
  store i64 %1131, i64* %10, align 8, !tbaa !1240
  %1133 = add i64 %1130, -3456
  store i64 %1133, i64* %11, align 8, !tbaa !1240
  %1134 = add i64 %1132, 39802
  %1135 = add i64 %1132, 19
  %1136 = load i64, i64* %12, align 8, !tbaa !1240
  %1137 = add i64 %1136, -8
  %1138 = inttoptr i64 %1137 to i64*
  store i64 %1135, i64* %1138
  store i64 %1137, i64* %12, align 8, !tbaa !1240
  %1139 = tail call %struct.Memory* @sub_41d190_transfb_nc0(%struct.State* nonnull %0, i64 %1134, %struct.Memory* %1129)
  %1140 = load i64, i64* %3, align 8
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %7, align 8, !tbaa !1240
  %1141 = load i64, i64* %13, align 8
  %1142 = add i64 %1141, -3456
  store i64 %1142, i64* %8, align 8, !tbaa !1240
  %1143 = add i64 %1141, -12
  %1144 = inttoptr i64 %1143 to i32*
  %1145 = load i32, i32* %1144
  %1146 = sext i32 %1145 to i64
  %1147 = mul nsw i64 %1146, 40
  %1148 = add i64 %1147, %1142
  %1149 = add i64 %1141, -8
  %1150 = inttoptr i64 %1149 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sext i32 %1151 to i64
  %1153 = shl nsw i64 %1152, 3
  %1154 = add i64 %1153, %1148
  %1155 = inttoptr i64 %1154 to double*
  %1156 = load double, double* %1155
  store double %1156, double* %59, align 1, !tbaa !1246
  %1157 = add i64 %1141, -4
  %1158 = inttoptr i64 %1157 to i32*
  %1159 = load i32, i32* %1158
  %1160 = sext i32 %1159 to i64
  %1161 = mul nsw i64 %1160, 800
  %1162 = load i64, i64* %7, align 8
  %1163 = add i64 %1161, %1162
  %1164 = load i64, i64* %13, align 8
  %1165 = add i64 %1164, -12
  %1166 = inttoptr i64 %1165 to i32*
  %1167 = load i32, i32* %1166
  %1168 = sext i32 %1167 to i64
  %1169 = mul nsw i64 %1168, 40
  %1170 = add i64 %1169, %1163
  %1171 = add i64 %1164, -8
  %1172 = inttoptr i64 %1171 to i32*
  %1173 = load i32, i32* %1172
  %1174 = sext i32 %1173 to i64
  %1175 = shl nsw i64 %1174, 3
  %1176 = add i64 %1175, %1170
  %1177 = load double, double* %59, align 1
  %1178 = inttoptr i64 %1176 to double*
  store double %1177, double* %1178
  %1179 = inttoptr i64 %1165 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  %1182 = mul nsw i64 %1181, 40
  %1183 = load i64, i64* %8, align 8
  %1184 = add i64 %1182, %1183
  %1185 = load i64, i64* %13, align 8
  %1186 = add i64 %1185, -8
  %1187 = inttoptr i64 %1186 to i32*
  %1188 = load i32, i32* %1187
  %1189 = sext i32 %1188 to i64
  %1190 = shl nsw i64 %1189, 3
  %1191 = add i64 %1190, %1184
  %1192 = inttoptr i64 %1191 to double*
  %1193 = load double, double* %1192
  store double %1193, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1194 = add i64 %1185, -4
  %1195 = inttoptr i64 %1194 to i32*
  %1196 = load i32, i32* %1195
  %1197 = sext i32 %1196 to i64
  %1198 = mul nsw i64 %1197, 800
  %1199 = load i64, i64* %7, align 8
  %1200 = add i64 %1198, %1199
  %1201 = mul nsw i64 %1189, 40
  %1202 = add i64 %1201, %1200
  %1203 = load i64, i64* %13, align 8
  %1204 = add i64 %1203, -12
  %1205 = inttoptr i64 %1204 to i32*
  %1206 = load i32, i32* %1205
  %1207 = sext i32 %1206 to i64
  store i64 %1207, i64* %8, align 8, !tbaa !1240
  %1208 = shl nsw i64 %1207, 3
  %1209 = add i64 %1208, %1202
  %1210 = load double, double* %59, align 1
  %1211 = inttoptr i64 %1209 to double*
  store double %1210, double* %1211
  %1212 = add i64 %1203, -8
  %1213 = inttoptr i64 %1212 to i32*
  %1214 = load i32, i32* %1213
  %1215 = add i32 %1214, 1
  %1216 = inttoptr i64 %1212 to i32*
  store i32 %1215, i32* %1216
  %1217 = add i64 %1140, -740
  br label %block_413345

block_412def:                                     ; preds = %block_412de5
  %1218 = add i64 %2880, -8
  %1219 = add i64 %2895, 6
  %1220 = inttoptr i64 %1218 to i32*
  store i32 %2884, i32* %1220
  br label %block_412df5

block_414938:                                     ; preds = %block_4148b6
  %1221 = add i32 %3421, 1
  %1222 = inttoptr i64 %2873 to i32*
  store i32 %1221, i32* %1222
  %1223 = add i64 %3419, -147
  br label %block_4148a5

block_4140db:                                     ; preds = %block_413f85, %block_41416c
  %1224 = phi i64 [ %2377, %block_413f85 ], [ %912, %block_41416c ]
  %1225 = phi %struct.Memory* [ %2794, %block_413f85 ], [ %1369, %block_41416c ]
  %1226 = inttoptr i64 %2363 to i32*
  %1227 = load i32, i32* %1226
  %1228 = add i32 %1227, -4
  %1229 = lshr i32 %1228, 31
  %1230 = trunc i32 %1229 to i8
  %1231 = lshr i32 %1227, 31
  %1232 = xor i32 %1229, %1231
  %1233 = add nuw nsw i32 %1232, %1231
  %1234 = icmp eq i32 %1233, 2
  %1235 = icmp ne i8 %1230, 0
  %1236 = xor i1 %1235, %1234
  %1237 = select i1 %1236, i64 10, i64 487
  %1238 = add i64 %1224, %1237
  br i1 %1236, label %block_4140e5, label %block_4142c2

block_412d20:                                     ; preds = %block_412d16
  %1239 = sext i32 %1305 to i64
  %1240 = mul nsw i64 %1239, 40
  %1241 = add i64 %1240, ptrtoint (%tcpre_type* @tcpre to i64)
  store i64 %1241, i64* %11, align 8, !tbaa !1240
  %1242 = inttoptr i64 %1555 to i32*
  %1243 = load i32, i32* %1242
  %1244 = sext i32 %1243 to i64
  %1245 = shl nsw i64 %1244, 3
  %1246 = add i64 %1245, %1241
  %1247 = inttoptr i64 %1246 to double*
  %1248 = load double, double* %1247
  %1249 = sext i32 %1293 to i64
  %1250 = mul nsw i64 %1249, 24
  %1251 = add i64 %1250, ptrtoint (%qbnew_type* @qbnew to i64)
  %1252 = add i32 %1305, -1
  %1253 = zext i32 %1252 to i64
  store i64 %1253, i64* %1554, align 8, !tbaa !1240
  %1254 = sext i32 %1252 to i64
  store i64 %1254, i64* %10, align 8, !tbaa !1240
  %1255 = shl nsw i64 %1254, 3
  %1256 = add i64 %1251, %1255
  %1257 = inttoptr i64 %1256 to double*
  %1258 = load double, double* %1257
  %1259 = mul nsw i64 %1249, 40
  %1260 = add i64 %1259, %64
  store i64 %1244, i64* %9, align 8, !tbaa !1240
  %1261 = add i64 %1245, %1260
  %1262 = inttoptr i64 %1261 to double*
  %1263 = load double, double* %1262
  %1264 = fmul double %1258, %1263
  store double %1264, double* %70, align 1, !tbaa !1246
  store i64 0, i64* %71, align 1, !tbaa !1246
  %1265 = fadd double %1248, %1264
  store double %1265, double* %59, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  store i64 %1244, i64* %8, align 8, !tbaa !1240
  %1266 = inttoptr i64 %1246 to double*
  store double %1265, double* %1266
  %1267 = inttoptr i64 %66 to i32*
  %1268 = load i32, i32* %1267
  %1269 = add i32 %1268, 1
  %1270 = inttoptr i64 %66 to i32*
  store i32 %1269, i32* %1270
  %1271 = add i64 %1303, -10
  br label %block_412d16

block_412cda:                                     ; preds = %block_412cd3, %block_412dba
  %1272 = phi i64 [ %1556, %block_412cd3 ], [ %596, %block_412dba ]
  %1273 = phi %struct.Memory* [ %2808, %block_412cd3 ], [ %1325, %block_412dba ]
  %1274 = inttoptr i64 %1555 to i32*
  %1275 = load i32, i32* %1274
  %1276 = add i32 %1275, -5
  %1277 = lshr i32 %1276, 31
  %1278 = trunc i32 %1277 to i8
  %1279 = lshr i32 %1275, 31
  %1280 = xor i32 %1277, %1279
  %1281 = add nuw nsw i32 %1280, %1279
  %1282 = icmp eq i32 %1281, 2
  %1283 = icmp ne i8 %1278, 0
  %1284 = xor i1 %1283, %1282
  %1285 = select i1 %1284, i64 10, i64 243
  %1286 = add i64 %1272, %1285
  br i1 %1284, label %block_412ce4, label %block_412dcd

block_41471c:                                     ; preds = %block_4146cb
  %1287 = add i32 %3283, 1
  %1288 = inttoptr i64 %2481 to i32*
  store i32 %1287, i32* %1288
  %1289 = add i64 %3281, -98
  br label %block_4146ba

block_412d16:                                     ; preds = %block_412d0f, %block_412d20
  %1290 = phi i64 [ %2415, %block_412d0f ], [ %1271, %block_412d20 ]
  %1291 = phi %struct.Memory* [ %1325, %block_412d0f ], [ %1291, %block_412d20 ]
  %1292 = inttoptr i64 %66 to i32*
  %1293 = load i32, i32* %1292
  %1294 = add i32 %1293, -5
  %1295 = lshr i32 %1294, 31
  %1296 = lshr i32 %1293, 31
  %1297 = xor i32 %1295, %1296
  %1298 = add nuw nsw i32 %1297, %1296
  %1299 = icmp eq i32 %1298, 2
  %1300 = icmp ne i32 %1295, 0
  %1301 = xor i1 %1300, %1299
  %1302 = select i1 %1301, i64 10, i64 145
  %1303 = add i64 %1290, %1302
  %1304 = inttoptr i64 %69 to i32*
  %1305 = load i32, i32* %1304
  br i1 %1301, label %block_412d20, label %block_412da7

block_414a5c:                                     ; preds = %block_4149a3
  %1306 = add i32 %1970, 1
  %1307 = inttoptr i64 %2101 to i32*
  store i32 %1306, i32* %1307
  %1308 = add i64 %1968, -202
  br label %block_414992

block_4145e5:                                     ; preds = %block_414587, %block_4145ef
  %1309 = phi i64 [ %3475, %block_414587 ], [ %3012, %block_4145ef ]
  %1310 = phi %struct.Memory* [ %3471, %block_414587 ], [ %1310, %block_4145ef ]
  %1311 = inttoptr i64 %3473 to i32*
  %1312 = load i32, i32* %1311
  %1313 = add i32 %1312, -5
  %1314 = lshr i32 %1313, 31
  %1315 = trunc i32 %1314 to i8
  %1316 = lshr i32 %1312, 31
  %1317 = xor i32 %1314, %1316
  %1318 = add nuw nsw i32 %1317, %1316
  %1319 = icmp eq i32 %1318, 2
  %1320 = icmp ne i8 %1315, 0
  %1321 = xor i1 %1320, %1319
  %1322 = select i1 %1321, i64 10, i64 119
  %1323 = add i64 %1309, %1322
  br i1 %1321, label %block_4145ef, label %block_41465c

block_412d05:                                     ; preds = %block_412ce4, %block_412da7
  %1324 = phi i64 [ %1431, %block_412ce4 ], [ %615, %block_412da7 ]
  %1325 = phi %struct.Memory* [ %1273, %block_412ce4 ], [ %1291, %block_412da7 ]
  %1326 = inttoptr i64 %69 to i32*
  %1327 = load i32, i32* %1326
  %1328 = add i32 %1327, -4
  %1329 = lshr i32 %1328, 31
  %1330 = lshr i32 %1327, 31
  %1331 = xor i32 %1329, %1330
  %1332 = add nuw nsw i32 %1331, %1330
  %1333 = icmp eq i32 %1332, 2
  %1334 = icmp ne i32 %1329, 0
  %1335 = xor i1 %1334, %1333
  %1336 = select i1 %1335, i64 10, i64 181
  %1337 = add i64 %1324, %1336
  br i1 %1335, label %block_412d0f, label %block_412dba

block_4140f6:                                     ; preds = %block_4140ec
  %1338 = inttoptr i64 %2379 to i32*
  %1339 = load i32, i32* %1338
  %1340 = sext i32 %1339 to i64
  %1341 = mul nsw i64 %1340, 800
  %1342 = add i64 %1341, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %1343 = inttoptr i64 %2363 to i32*
  %1344 = load i32, i32* %1343
  %1345 = sub i32 4, %1344
  %1346 = sext i32 %1345 to i64
  %1347 = mul nsw i64 %1346, 40
  %1348 = add i64 %1347, %1342
  %1349 = sub i32 4, %1371
  %1350 = sext i32 %1349 to i64
  %1351 = shl nsw i64 %1350, 3
  %1352 = add i64 %1348, %1351
  %1353 = inttoptr i64 %1352 to double*
  %1354 = load double, double* %1353
  store double %1354, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1355 = add i64 %1341, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 600)
  %1356 = sext i32 %1344 to i64
  %1357 = mul nsw i64 %1356, 40
  %1358 = add i64 %1357, %1355
  %1359 = sext i32 %1371 to i64
  %1360 = shl nsw i64 %1359, 3
  %1361 = add i64 %1360, %1358
  %1362 = inttoptr i64 %1361 to double*
  store double %1354, double* %1362
  %1363 = inttoptr i64 %2369 to i32*
  %1364 = load i32, i32* %1363
  %1365 = add i32 %1364, 1
  %1366 = inttoptr i64 %2369 to i32*
  store i32 %1365, i32* %1366
  %1367 = add i64 %1381, -10
  br label %block_4140ec

block_4140ec:                                     ; preds = %block_4140f6, %block_4140e5
  %1368 = phi i64 [ %913, %block_4140e5 ], [ %1367, %block_4140f6 ]
  %1369 = phi %struct.Memory* [ %1225, %block_4140e5 ], [ %1369, %block_4140f6 ]
  %1370 = inttoptr i64 %2369 to i32*
  %1371 = load i32, i32* %1370
  %1372 = add i32 %1371, -4
  %1373 = lshr i32 %1372, 31
  %1374 = lshr i32 %1371, 31
  %1375 = xor i32 %1373, %1374
  %1376 = add nuw nsw i32 %1375, %1374
  %1377 = icmp eq i32 %1376, 2
  %1378 = icmp ne i32 %1373, 0
  %1379 = xor i1 %1378, %1377
  %1380 = select i1 %1379, i64 10, i64 128
  %1381 = add i64 %1368, %1380
  br i1 %1379, label %block_4140f6, label %block_41416c

block_41472f:                                     ; preds = %block_4146ba
  store i64 %2486, i64* %10, align 8, !tbaa !1240
  %1382 = add i64 %2480, -3248
  store i64 %1382, i64* %11, align 8, !tbaa !1240
  %1383 = add i64 %2480, -4
  %1384 = inttoptr i64 %1383 to i32*
  %1385 = load i32, i32* %1384
  %1386 = zext i32 %1385 to i64
  store i64 %1386, i64* %9, align 8, !tbaa !1240
  %1387 = add i64 %3436, -50239
  %1388 = add i64 %3436, 22
  %1389 = load i64, i64* %12, align 8, !tbaa !1240
  %1390 = add i64 %1389, -8
  %1391 = inttoptr i64 %1390 to i64*
  store i64 %1388, i64* %1391
  store i64 %1390, i64* %12, align 8, !tbaa !1240
  %1392 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %1387, %struct.Memory* %3423)
  %1393 = load i64, i64* %3, align 8
  store i64 4, i64* %11, align 8, !tbaa !1240
  %1394 = load i64, i64* %13, align 8
  %1395 = add i64 %1394, -3248
  store i64 %1395, i64* %9, align 8, !tbaa !1240
  %1396 = add i64 %1394, -4
  %1397 = inttoptr i64 %1396 to i32*
  %1398 = load i32, i32* %1397
  %1399 = sext i32 %1398 to i64
  %1400 = shl nsw i64 %1399, 6
  %1401 = add i64 %1400, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 24)
  store i64 %1401, i64* %10, align 8, !tbaa !1240
  %1402 = add i64 %1393, 33707
  %1403 = add i64 %1393, 42
  %1404 = load i64, i64* %12, align 8, !tbaa !1240
  %1405 = add i64 %1404, -8
  %1406 = inttoptr i64 %1405 to i64*
  store i64 %1403, i64* %1406
  store i64 %1405, i64* %12, align 8, !tbaa !1240
  %1407 = tail call %struct.Memory* @sub_41caf0_transfb_cor_f(%struct.State* nonnull %0, i64 %1402, %struct.Memory* %1392)
  %1408 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %1409 = load i64, i64* %13, align 8
  %1410 = add i64 %1409, -2032
  store i64 %1410, i64* %11, align 8, !tbaa !1240
  %1411 = add i64 %1408, 45281
  %1412 = add i64 %1408, 23
  %1413 = load i64, i64* %12, align 8, !tbaa !1240
  %1414 = add i64 %1413, -8
  %1415 = inttoptr i64 %1414 to i64*
  store i64 %1412, i64* %1415
  store i64 %1414, i64* %12, align 8, !tbaa !1240
  %1416 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1411, %struct.Memory* %1407)
  %1417 = load i64, i64* %13, align 8
  %1418 = add i64 %1417, -12
  %1419 = load i64, i64* %3, align 8
  %1420 = add i64 %1419, 7
  %1421 = inttoptr i64 %1418 to i32*
  store i32 0, i32* %1421
  %1422 = add i64 %1417, -8
  %1423 = add i64 %1417, -2032
  br label %block_41478d

block_412ce4:                                     ; preds = %block_412cda
  %1424 = sext i32 %1275 to i64
  %1425 = shl nsw i64 %1424, 3
  %1426 = add i64 %64, %1425
  %1427 = inttoptr i64 %1426 to double*
  %1428 = load double, double* %1427
  store double %1428, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1429 = add i64 %1425, ptrtoint (%tcpre_type* @tcpre to i64)
  %1430 = inttoptr i64 %1429 to double*
  store double %1428, double* %1430
  %1431 = add i64 %1286, 33
  %1432 = inttoptr i64 %69 to i32*
  store i32 1, i32* %1432
  br label %block_412d05

block_4134db:                                     ; preds = %block_4134ba, %block_4134e5
  %1433 = phi i64 [ %3253, %block_4134ba ], [ %2792, %block_4134e5 ]
  %1434 = phi %struct.Memory* [ %3370, %block_4134ba ], [ %1434, %block_4134e5 ]
  %1435 = inttoptr i64 %564 to i32*
  %1436 = load i32, i32* %1435
  %1437 = add i32 %1436, -5
  %1438 = lshr i32 %1437, 31
  %1439 = lshr i32 %1436, 31
  %1440 = xor i32 %1438, %1439
  %1441 = add nuw nsw i32 %1440, %1439
  %1442 = icmp eq i32 %1441, 2
  %1443 = icmp ne i32 %1438, 0
  %1444 = xor i1 %1443, %1442
  %1445 = select i1 %1444, i64 10, i64 77
  %1446 = add i64 %1433, %1445
  br i1 %1444, label %block_4134e5, label %block_413528

block_4142da:                                     ; preds = %block_4142d0
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  store i64 4, i64* %8, align 8, !tbaa !1240
  %1447 = inttoptr i64 %3404 to i32*
  %1448 = load i32, i32* %1447
  %1449 = sext i32 %1448 to i64
  %1450 = mul nsw i64 %1449, 800
  %1451 = add i64 %1450, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %1452 = inttoptr i64 %3405 to i32*
  %1453 = load i32, i32* %1452
  %1454 = sub i32 4, %1453
  %1455 = sext i32 %1454 to i64
  %1456 = mul nsw i64 %1455, 40
  %1457 = add i64 %1456, %1451
  store i64 %1457, i64* %1554, align 8, !tbaa !1240
  %1458 = sub i32 4, %1561
  %1459 = sext i32 %1458 to i64
  %1460 = shl nsw i64 %1459, 3
  %1461 = add i64 %1457, %1460
  %1462 = inttoptr i64 %1461 to double*
  %1463 = load double, double* %1462
  %1464 = add i64 %1450, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 600)
  %1465 = sext i32 %1453 to i64
  %1466 = mul nsw i64 %1465, 40
  %1467 = add i64 %1466, %1464
  %1468 = sext i32 %1561 to i64
  %1469 = shl nsw i64 %1468, 3
  %1470 = add i64 %1469, %1467
  %1471 = inttoptr i64 %1470 to double*
  store double %1463, double* %1471
  %1472 = inttoptr i64 %3404 to i32*
  %1473 = load i32, i32* %1472
  %1474 = sext i32 %1473 to i64
  %1475 = mul nsw i64 %1474, 800
  %1476 = add i64 %1475, ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64)
  %1477 = inttoptr i64 %3405 to i32*
  %1478 = load i32, i32* %1477
  %1479 = sub i32 4, %1478
  %1480 = sext i32 %1479 to i64
  %1481 = mul nsw i64 %1480, 40
  %1482 = add i64 %1481, %1476
  %1483 = inttoptr i64 %3401 to i32*
  %1484 = load i32, i32* %1483
  %1485 = sub i32 4, %1484
  %1486 = sext i32 %1485 to i64
  %1487 = shl nsw i64 %1486, 3
  %1488 = add i64 %1482, %1487
  %1489 = inttoptr i64 %1488 to double*
  %1490 = load double, double* %1489
  %1491 = add i64 %1475, add (i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64 600)
  %1492 = sext i32 %1478 to i64
  %1493 = mul nsw i64 %1492, 40
  %1494 = add i64 %1493, %1491
  %1495 = sext i32 %1484 to i64
  %1496 = shl nsw i64 %1495, 3
  %1497 = add i64 %1496, %1494
  %1498 = inttoptr i64 %1497 to double*
  store double %1490, double* %1498
  %1499 = inttoptr i64 %3404 to i32*
  %1500 = load i32, i32* %1499
  %1501 = sext i32 %1500 to i64
  %1502 = mul nsw i64 %1501, 800
  %1503 = add i64 %1502, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %1504 = inttoptr i64 %3405 to i32*
  %1505 = load i32, i32* %1504
  %1506 = sub i32 4, %1505
  %1507 = zext i32 %1506 to i64
  store i64 %1507, i64* %573, align 8, !tbaa !1240
  %1508 = sext i32 %1506 to i64
  %1509 = mul nsw i64 %1508, 40
  %1510 = add i64 %1509, %1503
  %1511 = load i64, i64* %8, align 8
  %1512 = trunc i64 %1511 to i32
  %1513 = inttoptr i64 %3401 to i32*
  %1514 = load i32, i32* %1513
  %1515 = sub i32 %1512, %1514
  %1516 = zext i32 %1515 to i64
  store i64 %1516, i64* %8, align 8, !tbaa !1240
  %1517 = sext i32 %1515 to i64
  %1518 = shl nsw i64 %1517, 3
  %1519 = add i64 %1510, %1518
  %1520 = inttoptr i64 %1519 to double*
  %1521 = load double, double* %1520
  store double %1521, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1522 = load i64, i64* %7, align 8
  %1523 = add i64 %1502, %1522
  %1524 = add i64 %1523, 600
  %1525 = sext i32 %1505 to i64
  %1526 = mul nsw i64 %1525, 40
  %1527 = add i64 %1526, %1524
  %1528 = sext i32 %1514 to i64
  store i64 %1528, i64* %9, align 8, !tbaa !1240
  %1529 = shl nsw i64 %1528, 3
  %1530 = add i64 %1529, %1527
  %1531 = inttoptr i64 %1530 to double*
  store double %1521, double* %1531
  %1532 = inttoptr i64 %3401 to i32*
  %1533 = load i32, i32* %1532
  %1534 = add i32 %1533, 1
  %1535 = inttoptr i64 %3401 to i32*
  store i32 %1534, i32* %1535
  %1536 = add i64 %1572, -10
  br label %block_4142d0

block_4146d5:                                     ; preds = %block_4146cb
  %1537 = sext i32 %3283 to i64
  %1538 = mul nsw i64 %1537, 40
  %1539 = add i64 %1538, ptrtoint (%tcpre_type* @tcpre to i64)
  %1540 = sext i32 %3271 to i64
  %1541 = shl nsw i64 %1540, 3
  %1542 = add i64 %1541, %1539
  %1543 = inttoptr i64 %1542 to double*
  %1544 = load double, double* %1543
  store double %1544, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1545 = add i64 %1538, %2486
  %1546 = add i64 %1541, %1545
  %1547 = inttoptr i64 %1546 to double*
  store double %1544, double* %1547
  %1548 = inttoptr i64 %2485 to i32*
  %1549 = load i32, i32* %1548
  %1550 = add i32 %1549, 1
  %1551 = inttoptr i64 %2485 to i32*
  store i32 %1550, i32* %1551
  %1552 = add i64 %3281, -10
  br label %block_4146cb

block_412cd3:                                     ; preds = %block_412c49
  %1553 = bitcast %union.anon* %4 to i32*
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1555 = add i64 %61, -24
  %1556 = add i64 %2821, 7
  %1557 = inttoptr i64 %1555 to i32*
  store i32 0, i32* %1557
  br label %block_412cda

block_4142d0:                                     ; preds = %block_4142c2, %block_4142da
  %1558 = phi i64 [ %3402, %block_4142c2 ], [ %1536, %block_4142da ]
  %1559 = phi %struct.Memory* [ %1225, %block_4142c2 ], [ %1559, %block_4142da ]
  %1560 = inttoptr i64 %3401 to i32*
  %1561 = load i32, i32* %1560
  %1562 = add i32 %1561, -4
  %1563 = lshr i32 %1562, 31
  %1564 = trunc i32 %1563 to i8
  %1565 = lshr i32 %1561, 31
  %1566 = xor i32 %1563, %1565
  %1567 = add nuw nsw i32 %1566, %1565
  %1568 = icmp eq i32 %1567, 2
  %1569 = icmp ne i8 %1564, 0
  %1570 = xor i1 %1569, %1568
  %1571 = select i1 %1570, i64 10, i64 345
  %1572 = add i64 %1558, %1571
  br i1 %1570, label %block_4142da, label %block_414429

block_4132f6:                                     ; preds = %block_413092
  %1573 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %1574 = add i64 %2007, -4
  %1575 = inttoptr i64 %1574 to i32*
  %1576 = load i32, i32* %1575
  %1577 = sext i32 %1576 to i64
  %1578 = mul nsw i64 %1577, 800
  %1579 = add i64 %1578, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  store i64 %1579, i64* %9, align 8, !tbaa !1240
  %1580 = add i64 %1578, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 192)
  %1581 = inttoptr i64 %1580 to double*
  %1582 = load double, double* %1581
  %1583 = fmul double %1573, %1582
  store double %1583, double* %59, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  store i64 %1578, i64* %8, align 8, !tbaa !1240
  %1584 = inttoptr i64 %1580 to double*
  store double %1583, double* %1584
  %1585 = load i64, i64* %13, align 8
  %1586 = add i64 %1585, -12
  %1587 = inttoptr i64 %1586 to i32*
  store i32 0, i32* %1587
  %1588 = add i64 %1585, -8
  %1589 = add i64 %2022, 79
  %1590 = inttoptr i64 %1588 to i32*
  store i32 1, i32* %1590
  br label %block_413345

block_4139ab:                                     ; preds = %block_4139a1
  %1591 = add i64 %629, 7
  %1592 = inttoptr i64 %1838 to i32*
  store i32 0, i32* %1592
  br label %block_4139b2

block_414abd:                                     ; preds = %block_412dd4
  %1593 = load i64, i64* %12, align 8
  %1594 = add i64 %1593, 3712
  %1595 = icmp ugt i64 %1593, -3713
  %1596 = zext i1 %1595 to i8
  store i8 %1596, i8* %20, align 1, !tbaa !1248
  %1597 = trunc i64 %1594 to i32
  %1598 = and i32 %1597, 255
  %1599 = tail call i32 @llvm.ctpop.i32(i32 %1598) #11
  %1600 = trunc i32 %1599 to i8
  %1601 = and i8 %1600, 1
  %1602 = xor i8 %1601, 1
  store i8 %1602, i8* %21, align 1, !tbaa !1261
  %1603 = xor i64 %1594, %1593
  %1604 = lshr i64 %1603, 4
  %1605 = trunc i64 %1604 to i8
  %1606 = and i8 %1605, 1
  store i8 %1606, i8* %22, align 1, !tbaa !1262
  %1607 = icmp eq i64 %1594, 0
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %23, align 1, !tbaa !1263
  %1609 = lshr i64 %1594, 63
  %1610 = trunc i64 %1609 to i8
  store i8 %1610, i8* %24, align 1, !tbaa !1264
  %1611 = lshr i64 %1593, 63
  %1612 = xor i64 %1609, %1611
  %1613 = add nuw nsw i64 %1612, %1609
  %1614 = icmp eq i64 %1613, 2
  %1615 = zext i1 %1614 to i8
  store i8 %1615, i8* %25, align 1, !tbaa !1265
  %1616 = add i64 %1593, 3720
  %1617 = inttoptr i64 %1594 to i64*
  %1618 = load i64, i64* %1617
  store i64 %1618, i64* %13, align 8, !tbaa !1240
  %1619 = inttoptr i64 %1616 to i64*
  %1620 = load i64, i64* %1619
  store i64 %1620, i64* %3, align 8, !tbaa !1240
  %1621 = add i64 %1593, 3728
  store i64 %1621, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %1882

block_4136ba:                                     ; preds = %block_413345
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %7, align 8, !tbaa !1240
  %1622 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %1622, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %9, align 8, !tbaa !1240
  %1623 = add i64 %2605, -4
  %1624 = inttoptr i64 %1623 to i32*
  %1625 = load i32, i32* %1624
  %1626 = sext i32 %1625 to i64
  %1627 = mul nsw i64 %1626, 800
  %1628 = add i64 %1627, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %1629 = add i64 %2605, -12
  %1630 = inttoptr i64 %1629 to i32*
  %1631 = load i32, i32* %1630
  %1632 = sext i32 %1631 to i64
  %1633 = mul nsw i64 %1632, 40
  %1634 = add i64 %1633, %1628
  %1635 = load <2 x i32>, <2 x i32>* %569, align 1
  %1636 = extractelement <2 x i32> %1635, i32 0
  store i32 %1636, i32* %570, align 1, !tbaa !1266
  %1637 = extractelement <2 x i32> %1635, i32 1
  store i32 %1637, i32* %572, align 1, !tbaa !1266
  %1638 = add i64 %1634, 32
  %1639 = load double, double* %70, align 1
  %1640 = inttoptr i64 %1638 to double*
  %1641 = load double, double* %1640
  %1642 = fmul double %1639, %1641
  store double %1642, double* %70, align 1, !tbaa !1246
  %1643 = load i64, i64* %13, align 8
  %1644 = add i64 %1643, -4
  %1645 = inttoptr i64 %1644 to i32*
  %1646 = load i32, i32* %1645
  %1647 = sext i32 %1646 to i64
  %1648 = mul nsw i64 %1647, 800
  %1649 = load i64, i64* %9, align 8
  %1650 = add i64 %1648, %1649
  %1651 = add i64 %1643, -12
  %1652 = inttoptr i64 %1651 to i32*
  %1653 = load i32, i32* %1652
  %1654 = sext i32 %1653 to i64
  %1655 = mul nsw i64 %1654, 40
  %1656 = add i64 %1655, %1650
  %1657 = add i64 %1656, 32
  %1658 = load double, double* %70, align 1
  %1659 = inttoptr i64 %1657 to double*
  store double %1658, double* %1659
  %1660 = load i64, i64* %13, align 8
  %1661 = add i64 %1660, -4
  %1662 = inttoptr i64 %1661 to i32*
  %1663 = load i32, i32* %1662
  %1664 = sext i32 %1663 to i64
  %1665 = mul nsw i64 %1664, 800
  %1666 = load i64, i64* %9, align 8
  %1667 = add i64 %1665, %1666
  %1668 = add i64 %1660, -12
  %1669 = inttoptr i64 %1668 to i32*
  %1670 = load i32, i32* %1669
  %1671 = sext i32 %1670 to i64
  %1672 = mul nsw i64 %1671, 40
  %1673 = add i64 %1672, %1667
  %1674 = add i64 %1673, 32
  %1675 = inttoptr i64 %1674 to double*
  %1676 = load double, double* %1675
  %1677 = load i64, i64* %13, align 8
  %1678 = add i64 %1677, -4
  %1679 = inttoptr i64 %1678 to i32*
  %1680 = load i32, i32* %1679
  %1681 = sext i32 %1680 to i64
  %1682 = mul nsw i64 %1681, 800
  %1683 = load i64, i64* %9, align 8
  %1684 = add i64 %1682, %1683
  %1685 = add i64 %1677, -12
  %1686 = inttoptr i64 %1685 to i32*
  %1687 = load i32, i32* %1686
  %1688 = sext i32 %1687 to i64
  %1689 = shl nsw i64 %1688, 3
  %1690 = add i64 %1684, 160
  %1691 = add i64 %1690, %1689
  %1692 = inttoptr i64 %1691 to double*
  store double %1676, double* %1692
  %1693 = inttoptr i64 %1678 to i32*
  %1694 = load i32, i32* %1693
  %1695 = sext i32 %1694 to i64
  %1696 = mul nsw i64 %1695, 800
  %1697 = load i64, i64* %8, align 8
  %1698 = add i64 %1696, %1697
  %1699 = load i64, i64* %13, align 8
  %1700 = add i64 %1699, -12
  %1701 = inttoptr i64 %1700 to i32*
  %1702 = load i32, i32* %1701
  %1703 = sext i32 %1702 to i64
  %1704 = mul nsw i64 %1703, 40
  %1705 = add i64 %1704, %1698
  %1706 = load <2 x i32>, <2 x i32>* %569, align 1
  %1707 = extractelement <2 x i32> %1706, i32 0
  store i32 %1707, i32* %570, align 1, !tbaa !1266
  %1708 = extractelement <2 x i32> %1706, i32 1
  store i32 %1708, i32* %572, align 1, !tbaa !1266
  %1709 = add i64 %1705, 32
  %1710 = load double, double* %70, align 1
  %1711 = inttoptr i64 %1709 to double*
  %1712 = load double, double* %1711
  %1713 = fmul double %1710, %1712
  store double %1713, double* %70, align 1, !tbaa !1246
  %1714 = add i64 %1699, -4
  %1715 = inttoptr i64 %1714 to i32*
  %1716 = load i32, i32* %1715
  %1717 = sext i32 %1716 to i64
  %1718 = mul nsw i64 %1717, 800
  %1719 = load i64, i64* %8, align 8
  %1720 = add i64 %1718, %1719
  %1721 = load i64, i64* %13, align 8
  %1722 = add i64 %1721, -12
  %1723 = inttoptr i64 %1722 to i32*
  %1724 = load i32, i32* %1723
  %1725 = sext i32 %1724 to i64
  %1726 = mul nsw i64 %1725, 40
  %1727 = add i64 %1726, %1720
  %1728 = add i64 %1727, 32
  %1729 = load double, double* %70, align 1
  %1730 = inttoptr i64 %1728 to double*
  store double %1729, double* %1730
  %1731 = add i64 %1721, -4
  %1732 = inttoptr i64 %1731 to i32*
  %1733 = load i32, i32* %1732
  %1734 = sext i32 %1733 to i64
  %1735 = mul nsw i64 %1734, 800
  %1736 = load i64, i64* %8, align 8
  %1737 = add i64 %1735, %1736
  %1738 = load i64, i64* %13, align 8
  %1739 = add i64 %1738, -12
  %1740 = inttoptr i64 %1739 to i32*
  %1741 = load i32, i32* %1740
  %1742 = sext i32 %1741 to i64
  %1743 = mul nsw i64 %1742, 40
  %1744 = add i64 %1743, %1737
  %1745 = add i64 %1744, 32
  %1746 = inttoptr i64 %1745 to double*
  %1747 = load double, double* %1746
  store double %1747, double* %70, align 1, !tbaa !1246
  store double 0.000000e+00, double* %72, align 1, !tbaa !1246
  %1748 = add i64 %1738, -4
  %1749 = inttoptr i64 %1748 to i32*
  %1750 = load i32, i32* %1749
  %1751 = sext i32 %1750 to i64
  %1752 = mul nsw i64 %1751, 800
  %1753 = load i64, i64* %8, align 8
  %1754 = add i64 %1752, %1753
  %1755 = load i64, i64* %13, align 8
  %1756 = add i64 %1755, -12
  %1757 = inttoptr i64 %1756 to i32*
  %1758 = load i32, i32* %1757
  %1759 = sext i32 %1758 to i64
  %1760 = shl nsw i64 %1759, 3
  %1761 = add i64 %1754, 160
  %1762 = add i64 %1761, %1760
  %1763 = inttoptr i64 %1762 to double*
  store double %1747, double* %1763
  %1764 = add i64 %1755, -4
  %1765 = inttoptr i64 %1764 to i32*
  %1766 = load i32, i32* %1765
  %1767 = sext i32 %1766 to i64
  %1768 = mul nsw i64 %1767, 800
  %1769 = load i64, i64* %7, align 8
  %1770 = add i64 %1768, %1769
  %1771 = inttoptr i64 %1756 to i32*
  %1772 = load i32, i32* %1771
  %1773 = sext i32 %1772 to i64
  %1774 = mul nsw i64 %1773, 40
  %1775 = add i64 %1774, %1770
  %1776 = add i64 %1775, 32
  %1777 = load double, double* %59, align 1
  %1778 = inttoptr i64 %1776 to double*
  %1779 = load double, double* %1778
  %1780 = fmul double %1777, %1779
  store double %1780, double* %59, align 1, !tbaa !1246
  %1781 = load i64, i64* %13, align 8
  %1782 = add i64 %1781, -4
  %1783 = inttoptr i64 %1782 to i32*
  %1784 = load i32, i32* %1783
  %1785 = sext i32 %1784 to i64
  %1786 = mul nsw i64 %1785, 800
  %1787 = load i64, i64* %7, align 8
  %1788 = add i64 %1786, %1787
  %1789 = add i64 %1781, -12
  %1790 = inttoptr i64 %1789 to i32*
  %1791 = load i32, i32* %1790
  %1792 = sext i32 %1791 to i64
  %1793 = mul nsw i64 %1792, 40
  %1794 = add i64 %1793, %1788
  %1795 = add i64 %1794, 32
  %1796 = load double, double* %59, align 1
  %1797 = inttoptr i64 %1795 to double*
  store double %1796, double* %1797
  %1798 = load i64, i64* %13, align 8
  %1799 = add i64 %1798, -4
  %1800 = inttoptr i64 %1799 to i32*
  %1801 = load i32, i32* %1800
  %1802 = sext i32 %1801 to i64
  %1803 = mul nsw i64 %1802, 800
  %1804 = load i64, i64* %7, align 8
  %1805 = add i64 %1803, %1804
  %1806 = add i64 %1798, -12
  %1807 = inttoptr i64 %1806 to i32*
  %1808 = load i32, i32* %1807
  %1809 = sext i32 %1808 to i64
  %1810 = mul nsw i64 %1809, 40
  %1811 = add i64 %1810, %1805
  %1812 = add i64 %1811, 32
  %1813 = inttoptr i64 %1812 to double*
  %1814 = load double, double* %1813
  store double %1814, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1815 = load i64, i64* %13, align 8
  %1816 = add i64 %1815, -4
  %1817 = inttoptr i64 %1816 to i32*
  %1818 = load i32, i32* %1817
  %1819 = sext i32 %1818 to i64
  %1820 = mul nsw i64 %1819, 800
  %1821 = load i64, i64* %7, align 8
  %1822 = add i64 %1820, %1821
  %1823 = add i64 %1815, -12
  %1824 = inttoptr i64 %1823 to i32*
  %1825 = load i32, i32* %1824
  %1826 = sext i32 %1825 to i64
  %1827 = shl nsw i64 %1826, 3
  %1828 = add i64 %1822, 160
  %1829 = add i64 %1828, %1827
  %1830 = inttoptr i64 %1829 to double*
  store double %1814, double* %1830
  %1831 = add i64 %1815, -8
  %1832 = add i64 %2620, 429
  %1833 = inttoptr i64 %1831 to i32*
  store i32 0, i32* %1833
  br label %block_413867

block_41399a:                                     ; preds = %block_413867
  %1834 = load i64, i64* %13, align 8
  %1835 = add i64 %1834, -12
  %1836 = add i64 %2836, 7
  %1837 = inttoptr i64 %1835 to i32*
  store i32 1, i32* %1837
  %1838 = add i64 %1834, -8
  %1839 = add i64 %1834, -4
  br label %block_4139a1

block_4130ac:                                     ; preds = %block_4130a2
  store i64 25, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %1840 = add i64 %1987, -2240
  store i64 %1840, i64* %11, align 8, !tbaa !1240
  %1841 = add i64 %2002, 51108
  %1842 = add i64 %2002, 23
  %1843 = load i64, i64* %12, align 8, !tbaa !1240
  %1844 = add i64 %1843, -8
  %1845 = inttoptr i64 %1844 to i64*
  store i64 %1842, i64* %1845
  store i64 %1844, i64* %12, align 8, !tbaa !1240
  %1846 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1841, %struct.Memory* %1988)
  %1847 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %1848 = load i64, i64* %13, align 8
  %1849 = add i64 %1848, -1024
  store i64 %1849, i64* %11, align 8, !tbaa !1240
  %1850 = add i64 %1847, 51085
  %1851 = add i64 %1847, 23
  %1852 = load i64, i64* %12, align 8, !tbaa !1240
  %1853 = add i64 %1852, -8
  %1854 = inttoptr i64 %1853 to i64*
  store i64 %1851, i64* %1854
  store i64 %1853, i64* %12, align 8, !tbaa !1240
  %1855 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1850, %struct.Memory* %1846)
  %1856 = load i64, i64* %3, align 8
  %1857 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %1857, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1858 = load i64, i64* %13, align 8
  %1859 = add i64 %1858, -2240
  %1860 = add i64 %1858, -12
  %1861 = inttoptr i64 %1860 to i32*
  %1862 = load i32, i32* %1861
  %1863 = sext i32 %1862 to i64
  %1864 = mul nsw i64 %1863, 40
  %1865 = add i64 %1864, %1859
  %1866 = add i64 %1858, -8
  %1867 = inttoptr i64 %1866 to i32*
  %1868 = load i32, i32* %1867
  %1869 = sext i32 %1868 to i64
  %1870 = shl nsw i64 %1869, 3
  %1871 = add i64 %1870, %1865
  %1872 = inttoptr i64 %1871 to double*
  store double %1857, double* %1872
  %1873 = inttoptr i64 %1866 to i32*
  %1874 = load i32, i32* %1873
  %1875 = add i32 %1874, -4
  %1876 = icmp eq i32 %1875, 0
  %1877 = select i1 %1876, i64 45, i64 103
  %1878 = add i64 %1856, %1877
  %1879 = load i64, i64* %13, align 8
  br i1 %1876, label %block_413107, label %block_413141

block_412dd4:                                     ; preds = %block_414a6f, %block_412dcd
  %1880 = phi i64 [ %566, %block_412dcd ], [ %2414, %block_414a6f ]
  %1881 = phi i64 [ %61, %block_412dcd ], [ %2406, %block_414a6f ]
  %1882 = phi %struct.Memory* [ %1273, %block_412dcd ], [ %2405, %block_414a6f ]
  %1883 = add i64 %1881, -4
  %1884 = inttoptr i64 %1883 to i32*
  %1885 = load i32, i32* %1884
  %1886 = add i32 %1885, -4
  %1887 = lshr i32 %1886, 31
  %1888 = trunc i32 %1887 to i8
  %1889 = lshr i32 %1885, 31
  %1890 = xor i32 %1887, %1889
  %1891 = add nuw nsw i32 %1890, %1889
  %1892 = icmp eq i32 %1891, 2
  %1893 = icmp ne i8 %1888, 0
  %1894 = xor i1 %1893, %1892
  %1895 = select i1 %1894, i64 10, i64 7401
  %1896 = add i64 %1880, %1895
  br i1 %1894, label %block_412dde, label %block_414abd

block_4139bc:                                     ; preds = %block_4139b2
  %1897 = inttoptr i64 %1839 to i32*
  %1898 = load i32, i32* %1897
  %1899 = sext i32 %1898 to i64
  %1900 = mul nsw i64 %1899, 800
  %1901 = add i64 %1900, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %1902 = inttoptr i64 %1835 to i32*
  %1903 = load i32, i32* %1902
  %1904 = sext i32 %1903 to i64
  %1905 = mul nsw i64 %1904, 40
  %1906 = add i64 %1905, %1901
  %1907 = sub i32 4, %989
  %1908 = sext i32 %1907 to i64
  %1909 = shl nsw i64 %1908, 3
  %1910 = add i64 %1906, %1909
  %1911 = inttoptr i64 %1910 to double*
  %1912 = load double, double* %1911
  store double %1912, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %1913 = add i64 %1900, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 400)
  %1914 = add i64 %1905, %1913
  %1915 = sext i32 %989 to i64
  %1916 = shl nsw i64 %1915, 3
  %1917 = add i64 %1916, %1914
  %1918 = inttoptr i64 %1917 to double*
  store double %1912, double* %1918
  %1919 = inttoptr i64 %1838 to i32*
  %1920 = load i32, i32* %1919
  %1921 = add i32 %1920, 1
  %1922 = inttoptr i64 %1838 to i32*
  store i32 %1921, i32* %1922
  %1923 = add i64 %999, -10
  br label %block_4139b2

block_41499c:                                     ; preds = %block_414992
  %1924 = add i64 %1014, 7
  %1925 = inttoptr i64 %2105 to i32*
  store i32 0, i32* %1925
  br label %block_4149a3

block_4144a6:                                     ; preds = %block_4144b0, %block_414429
  %1926 = phi i64 [ %3121, %block_414429 ], [ %3235, %block_4144b0 ]
  %1927 = phi %struct.Memory* [ %3117, %block_414429 ], [ %1927, %block_4144b0 ]
  %1928 = inttoptr i64 %3119 to i32*
  %1929 = load i32, i32* %1928
  %1930 = add i32 %1929, -5
  %1931 = lshr i32 %1930, 31
  %1932 = trunc i32 %1931 to i8
  %1933 = lshr i32 %1929, 31
  %1934 = xor i32 %1931, %1933
  %1935 = add nuw nsw i32 %1934, %1933
  %1936 = icmp eq i32 %1935, 2
  %1937 = icmp ne i8 %1932, 0
  %1938 = xor i1 %1937, %1936
  %1939 = select i1 %1938, i64 10, i64 50
  %1940 = add i64 %1926, %1939
  br i1 %1938, label %block_4144b0, label %block_4144d8

block_413dbb:                                     ; preds = %block_413dc5, %block_413c92
  %1941 = phi i64 [ %818, %block_413c92 ], [ %2973, %block_413dc5 ]
  %1942 = phi %struct.Memory* [ %2026, %block_413c92 ], [ %1942, %block_413dc5 ]
  %1943 = inttoptr i64 %2763 to i32*
  %1944 = load i32, i32* %1943
  %1945 = add i32 %1944, -5
  %1946 = lshr i32 %1945, 31
  %1947 = lshr i32 %1944, 31
  %1948 = xor i32 %1946, %1947
  %1949 = add nuw nsw i32 %1948, %1947
  %1950 = icmp eq i32 %1949, 2
  %1951 = icmp ne i32 %1946, 0
  %1952 = xor i1 %1951, %1950
  %1953 = select i1 %1952, i64 10, i64 118
  %1954 = add i64 %1941, %1953
  br i1 %1952, label %block_413dc5, label %block_413e31

block_4149a3:                                     ; preds = %block_4149ad, %block_41499c
  %1955 = phi i64 [ %1924, %block_41499c ], [ %2944, %block_4149ad ]
  %1956 = phi %struct.Memory* [ %1001, %block_41499c ], [ %1956, %block_4149ad ]
  %1957 = inttoptr i64 %2105 to i32*
  %1958 = load i32, i32* %1957
  %1959 = add i32 %1958, -5
  %1960 = lshr i32 %1959, 31
  %1961 = lshr i32 %1958, 31
  %1962 = xor i32 %1960, %1961
  %1963 = add nuw nsw i32 %1962, %1961
  %1964 = icmp eq i32 %1963, 2
  %1965 = icmp ne i32 %1960, 0
  %1966 = xor i1 %1965, %1964
  %1967 = select i1 %1966, i64 10, i64 185
  %1968 = add i64 %1955, %1967
  %1969 = inttoptr i64 %2101 to i32*
  %1970 = load i32, i32* %1969
  br i1 %1966, label %block_4149ad, label %block_414a5c

block_4148a5:                                     ; preds = %block_414847, %block_414938
  %1971 = phi i64 [ %2875, %block_414847 ], [ %1223, %block_414938 ]
  %1972 = phi %struct.Memory* [ %2871, %block_414847 ], [ %3407, %block_414938 ]
  %1973 = inttoptr i64 %2873 to i32*
  %1974 = load i32, i32* %1973
  %1975 = add i32 %1974, -5
  %1976 = lshr i32 %1975, 31
  %1977 = trunc i32 %1976 to i8
  %1978 = lshr i32 %1974, 31
  %1979 = xor i32 %1976, %1978
  %1980 = add nuw nsw i32 %1979, %1978
  %1981 = icmp eq i32 %1980, 2
  %1982 = icmp ne i8 %1977, 0
  %1983 = xor i1 %1982, %1981
  %1984 = select i1 %1983, i64 10, i64 166
  %1985 = add i64 %1971, %1984
  br i1 %1983, label %block_4148af, label %block_41494b

block_4130a2:                                     ; preds = %block_41309c, %block_413185
  %1986 = phi i64 [ %2004, %block_41309c ], [ %742, %block_413185 ]
  %1987 = phi i64 [ %2007, %block_41309c ], [ %728, %block_413185 ]
  %1988 = phi %struct.Memory* [ %2008, %block_41309c ], [ %664, %block_413185 ]
  %1989 = add i64 %1987, -8
  %1990 = inttoptr i64 %1989 to i32*
  %1991 = load i32, i32* %1990
  %1992 = add i32 %1991, -5
  %1993 = lshr i32 %1992, 31
  %1994 = trunc i32 %1993 to i8
  %1995 = lshr i32 %1991, 31
  %1996 = xor i32 %1993, %1995
  %1997 = add nuw nsw i32 %1996, %1995
  %1998 = icmp eq i32 %1997, 2
  %1999 = icmp ne i8 %1994, 0
  %2000 = xor i1 %1999, %1998
  %2001 = select i1 %2000, i64 10, i64 438
  %2002 = add i64 %1986, %2001
  br i1 %2000, label %block_4130ac, label %block_413258

block_41309c:                                     ; preds = %block_413092
  %2003 = add i64 %2007, -8
  %2004 = add i64 %2022, 6
  %2005 = inttoptr i64 %2003 to i32*
  store i32 %2011, i32* %2005
  br label %block_4130a2

block_413092:                                     ; preds = %block_413258, %block_41308b
  %2006 = phi i64 [ %2023, %block_41308b ], [ %2603, %block_413258 ]
  %2007 = phi i64 [ %2880, %block_41308b ], [ %2600, %block_413258 ]
  %2008 = phi %struct.Memory* [ %2881, %block_41308b ], [ %1988, %block_413258 ]
  %2009 = add i64 %2007, -12
  %2010 = inttoptr i64 %2009 to i32*
  %2011 = load i32, i32* %2010
  %2012 = add i32 %2011, -5
  %2013 = lshr i32 %2012, 31
  %2014 = trunc i32 %2013 to i8
  %2015 = lshr i32 %2011, 31
  %2016 = xor i32 %2013, %2015
  %2017 = add nuw nsw i32 %2016, %2015
  %2018 = icmp eq i32 %2017, 2
  %2019 = icmp ne i8 %2014, 0
  %2020 = xor i1 %2019, %2018
  %2021 = select i1 %2020, i64 10, i64 612
  %2022 = add i64 %2006, %2021
  br i1 %2020, label %block_41309c, label %block_4132f6

block_41308b:                                     ; preds = %block_412de5
  %2023 = add i64 %2895, 7
  %2024 = inttoptr i64 %2882 to i32*
  store i32 1, i32* %2024
  br label %block_413092

block_413c88:                                     ; preds = %block_413e31, %block_413b58
  %2025 = phi i64 [ %2771, %block_413b58 ], [ %3074, %block_413e31 ]
  %2026 = phi %struct.Memory* [ %617, %block_413b58 ], [ %1942, %block_413e31 ]
  %2027 = inttoptr i64 %2757 to i32*
  %2028 = load i32, i32* %2027
  %2029 = add i32 %2028, -4
  %2030 = lshr i32 %2029, 31
  %2031 = trunc i32 %2030 to i8
  %2032 = lshr i32 %2028, 31
  %2033 = xor i32 %2030, %2032
  %2034 = add nuw nsw i32 %2033, %2032
  %2035 = icmp eq i32 %2034, 2
  %2036 = icmp ne i8 %2031, 0
  %2037 = xor i1 %2036, %2035
  %2038 = select i1 %2037, i64 10, i64 444
  %2039 = add i64 %2025, %2038
  br i1 %2037, label %block_413c92, label %block_413e44

block_4146c4:                                     ; preds = %block_4146ba
  %2040 = add i64 %3436, 7
  %2041 = inttoptr i64 %2485 to i32*
  store i32 0, i32* %2041
  br label %block_4146cb

block_4148c0:                                     ; preds = %block_4148b6
  %2042 = sext i32 %3421 to i64
  %2043 = mul nsw i64 %2042, 40
  %2044 = add i64 %2043, ptrtoint (%tcpre_type* @tcpre to i64)
  %2045 = sext i32 %3409 to i64
  %2046 = shl nsw i64 %2045, 3
  %2047 = add i64 %2046, %2044
  %2048 = inttoptr i64 %2047 to double*
  %2049 = load double, double* %2048
  %2050 = add i64 %2043, %2878
  %2051 = add i64 %2046, %2050
  %2052 = inttoptr i64 %2051 to double*
  store double %2049, double* %2052
  %2053 = inttoptr i64 %2873 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  %2056 = mul nsw i64 %2055, 40
  %2057 = add i64 %2056, ptrtoint (%tcpre_type* @tcpre to i64)
  %2058 = inttoptr i64 %2877 to i32*
  %2059 = load i32, i32* %2058
  %2060 = sext i32 %2059 to i64
  %2061 = shl nsw i64 %2060, 3
  %2062 = add i64 %2061, %2057
  %2063 = inttoptr i64 %2062 to double*
  %2064 = load double, double* %2063
  store double %2064, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2065 = mul nsw i64 %2055, 200
  %2066 = add i64 %2065, %2878
  %2067 = add i64 %2061, %2066
  %2068 = inttoptr i64 %2067 to double*
  store double %2064, double* %2068
  %2069 = inttoptr i64 %2877 to i32*
  %2070 = load i32, i32* %2069
  %2071 = add i32 %2070, 1
  %2072 = inttoptr i64 %2877 to i32*
  store i32 %2071, i32* %2072
  %2073 = add i64 %3419, -10
  br label %block_4148b6

block_41494b:                                     ; preds = %block_4148a5
  store i64 %2878, i64* %10, align 8, !tbaa !1240
  %2074 = add i64 %2872, -3248
  store i64 %2074, i64* %11, align 8, !tbaa !1240
  %2075 = add i64 %2872, -4
  %2076 = inttoptr i64 %2075 to i32*
  %2077 = load i32, i32* %2076
  %2078 = zext i32 %2077 to i64
  store i64 %2078, i64* %9, align 8, !tbaa !1240
  %2079 = add i64 %1985, -50779
  %2080 = add i64 %1985, 22
  %2081 = load i64, i64* %12, align 8, !tbaa !1240
  %2082 = add i64 %2081, -8
  %2083 = inttoptr i64 %2082 to i64*
  store i64 %2080, i64* %2083
  store i64 %2082, i64* %12, align 8, !tbaa !1240
  %2084 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %2079, %struct.Memory* %1972)
  %2085 = load i64, i64* %3, align 8
  store i64 6, i64* %11, align 8, !tbaa !1240
  %2086 = load i64, i64* %13, align 8
  %2087 = add i64 %2086, -3248
  store i64 %2087, i64* %9, align 8, !tbaa !1240
  %2088 = add i64 %2086, -4
  %2089 = inttoptr i64 %2088 to i32*
  %2090 = load i32, i32* %2089
  %2091 = sext i32 %2090 to i64
  %2092 = shl nsw i64 %2091, 6
  %2093 = add i64 %2092, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 40)
  store i64 %2093, i64* %10, align 8, !tbaa !1240
  %2094 = add i64 %2085, 33167
  %2095 = add i64 %2085, 42
  %2096 = load i64, i64* %12, align 8, !tbaa !1240
  %2097 = add i64 %2096, -8
  %2098 = inttoptr i64 %2097 to i64*
  store i64 %2095, i64* %2098
  store i64 %2097, i64* %12, align 8, !tbaa !1240
  %2099 = tail call %struct.Memory* @sub_41caf0_transfb_cor_f(%struct.State* nonnull %0, i64 %2094, %struct.Memory* %2084)
  %2100 = load i64, i64* %13, align 8
  %2101 = add i64 %2100, -12
  %2102 = load i64, i64* %3, align 8
  %2103 = add i64 %2102, 7
  %2104 = inttoptr i64 %2101 to i32*
  store i32 0, i32* %2104
  %2105 = add i64 %2100, -8
  %2106 = add i64 %2100, -2032
  br label %block_414992

block_4144d8:                                     ; preds = %block_4144a6
  store i64 %3123, i64* %10, align 8, !tbaa !1240
  %2107 = add i64 %3118, -3248
  store i64 %2107, i64* %11, align 8, !tbaa !1240
  %2108 = add i64 %3118, -4
  %2109 = inttoptr i64 %2108 to i32*
  %2110 = load i32, i32* %2109
  %2111 = zext i32 %2110 to i64
  store i64 %2111, i64* %9, align 8, !tbaa !1240
  %2112 = add i64 %1940, -49640
  %2113 = add i64 %1940, 22
  %2114 = load i64, i64* %12, align 8, !tbaa !1240
  %2115 = add i64 %2114, -8
  %2116 = inttoptr i64 %2115 to i64*
  store i64 %2113, i64* %2116
  store i64 %2115, i64* %12, align 8, !tbaa !1240
  %2117 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %2112, %struct.Memory* %1927)
  %2118 = load i64, i64* %3, align 8
  store i64 1, i64* %11, align 8, !tbaa !1240
  %2119 = load i64, i64* %13, align 8
  %2120 = add i64 %2119, -3248
  store i64 %2120, i64* %9, align 8, !tbaa !1240
  %2121 = add i64 %2119, -4
  %2122 = inttoptr i64 %2121 to i32*
  %2123 = load i32, i32* %2122
  %2124 = sext i32 %2123 to i64
  %2125 = shl nsw i64 %2124, 6
  %2126 = add i64 %2125, ptrtoint (%pcmor_cor_type* @pcmor_cor to i64)
  store i64 %2126, i64* %10, align 8, !tbaa !1240
  %2127 = add i64 %2118, 33986
  %2128 = add i64 %2118, 38
  %2129 = load i64, i64* %12, align 8, !tbaa !1240
  %2130 = add i64 %2129, -8
  %2131 = inttoptr i64 %2130 to i64*
  store i64 %2128, i64* %2131
  store i64 %2130, i64* %12, align 8, !tbaa !1240
  %2132 = tail call %struct.Memory* @sub_41c9b0_transfb_cor_e(%struct.State* nonnull %0, i64 %2127, %struct.Memory* %2117)
  %2133 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %2134 = load i64, i64* %13, align 8
  %2135 = add i64 %2134, -2032
  store i64 %2135, i64* %11, align 8, !tbaa !1240
  %2136 = add i64 %2133, 45884
  %2137 = add i64 %2133, 23
  %2138 = load i64, i64* %12, align 8, !tbaa !1240
  %2139 = add i64 %2138, -8
  %2140 = inttoptr i64 %2139 to i64*
  store i64 %2137, i64* %2140
  store i64 %2139, i64* %12, align 8, !tbaa !1240
  %2141 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %2136, %struct.Memory* %2132)
  %2142 = load i64, i64* %13, align 8
  %2143 = add i64 %2142, -8
  %2144 = load i64, i64* %3, align 8
  %2145 = add i64 %2144, 7
  %2146 = inttoptr i64 %2143 to i32*
  store i32 0, i32* %2146
  %2147 = add i64 %2142, -2032
  br label %block_414532

block_413871:                                     ; preds = %block_413867
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  %2148 = inttoptr i64 %1816 to i32*
  %2149 = load i32, i32* %2148
  %2150 = sext i32 %2149 to i64
  %2151 = mul nsw i64 %2150, 800
  %2152 = add i64 %2151, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %2153 = inttoptr i64 %1823 to i32*
  %2154 = load i32, i32* %2153
  %2155 = sext i32 %2154 to i64
  %2156 = mul nsw i64 %2155, 40
  %2157 = add i64 %2156, %2152
  %2158 = sub i32 4, %2825
  %2159 = sext i32 %2158 to i64
  %2160 = shl nsw i64 %2159, 3
  %2161 = add i64 %2157, %2160
  %2162 = inttoptr i64 %2161 to double*
  %2163 = load double, double* %2162
  %2164 = add i64 %2151, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 400)
  %2165 = add i64 %2156, %2164
  %2166 = sext i32 %2825 to i64
  %2167 = shl nsw i64 %2166, 3
  %2168 = add i64 %2167, %2165
  %2169 = inttoptr i64 %2168 to double*
  store double %2163, double* %2169
  %2170 = inttoptr i64 %1816 to i32*
  %2171 = load i32, i32* %2170
  %2172 = sext i32 %2171 to i64
  %2173 = mul nsw i64 %2172, 800
  %2174 = add i64 %2173, ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64)
  %2175 = inttoptr i64 %1823 to i32*
  %2176 = load i32, i32* %2175
  %2177 = sext i32 %2176 to i64
  %2178 = mul nsw i64 %2177, 40
  %2179 = add i64 %2178, %2174
  %2180 = inttoptr i64 %1831 to i32*
  %2181 = load i32, i32* %2180
  %2182 = sub i32 4, %2181
  %2183 = sext i32 %2182 to i64
  %2184 = shl nsw i64 %2183, 3
  %2185 = add i64 %2179, %2184
  %2186 = inttoptr i64 %2185 to double*
  %2187 = load double, double* %2186
  %2188 = add i64 %2173, add (i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64 400)
  %2189 = add i64 %2178, %2188
  %2190 = sext i32 %2181 to i64
  %2191 = shl nsw i64 %2190, 3
  %2192 = add i64 %2191, %2189
  %2193 = inttoptr i64 %2192 to double*
  store double %2187, double* %2193
  %2194 = inttoptr i64 %1816 to i32*
  %2195 = load i32, i32* %2194
  %2196 = sext i32 %2195 to i64
  %2197 = mul nsw i64 %2196, 800
  %2198 = add i64 %2197, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %2199 = inttoptr i64 %1823 to i32*
  %2200 = load i32, i32* %2199
  %2201 = sext i32 %2200 to i64
  %2202 = mul nsw i64 %2201, 40
  %2203 = add i64 %2202, %2198
  %2204 = inttoptr i64 %1831 to i32*
  %2205 = load i32, i32* %2204
  %2206 = sub i32 4, %2205
  %2207 = sext i32 %2206 to i64
  %2208 = shl nsw i64 %2207, 3
  %2209 = add i64 %2203, %2208
  %2210 = inttoptr i64 %2209 to double*
  %2211 = load double, double* %2210
  store double %2211, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2212 = load i64, i64* %7, align 8
  %2213 = add i64 %2197, %2212
  %2214 = add i64 %2213, 400
  %2215 = add i64 %2202, %2214
  %2216 = sext i32 %2205 to i64
  %2217 = shl nsw i64 %2216, 3
  %2218 = add i64 %2217, %2215
  %2219 = inttoptr i64 %2218 to double*
  store double %2211, double* %2219
  %2220 = inttoptr i64 %1831 to i32*
  %2221 = load i32, i32* %2220
  %2222 = add i32 %2221, 1
  %2223 = inttoptr i64 %1831 to i32*
  store i32 %2222, i32* %2223
  %2224 = add i64 %2836, -10
  br label %block_413867

block_413f85:                                     ; preds = %block_413e52
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  store i64 4, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %9, align 8
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %10, align 8
  %2225 = inttoptr i64 %2975 to i32*
  store i32 0, i32* %2225
  %2226 = inttoptr i64 %2977 to i32*
  store i32 4, i32* %2226
  %2227 = inttoptr i64 %2980 to i32*
  %2228 = load i32, i32* %2227
  %2229 = sext i32 %2228 to i64
  %2230 = mul nsw i64 %2229, 800
  %2231 = add i64 %2230, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %2232 = inttoptr i64 %2975 to i32*
  %2233 = load i32, i32* %2232
  %2234 = sub i32 4, %2233
  %2235 = sext i32 %2234 to i64
  %2236 = mul nsw i64 %2235, 40
  %2237 = add i64 %2236, %2231
  store i64 %2237, i64* %1554, align 8, !tbaa !1240
  %2238 = load i32, i32* %1553, align 4
  %2239 = load i64, i64* %13, align 8
  %2240 = add i64 %2239, -8
  %2241 = inttoptr i64 %2240 to i32*
  %2242 = load i32, i32* %2241
  %2243 = sub i32 %2238, %2242
  %2244 = sext i32 %2243 to i64
  %2245 = shl nsw i64 %2244, 3
  %2246 = add i64 %2237, %2245
  %2247 = inttoptr i64 %2246 to double*
  %2248 = load double, double* %2247
  store double %2248, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2249 = add i64 %2239, -4
  %2250 = inttoptr i64 %2249 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  %2253 = mul nsw i64 %2252, 800
  %2254 = load i64, i64* %10, align 8
  %2255 = add i64 %2253, %2254
  %2256 = add i64 %2255, 600
  %2257 = load i64, i64* %13, align 8
  %2258 = add i64 %2257, -12
  %2259 = inttoptr i64 %2258 to i32*
  %2260 = load i32, i32* %2259
  %2261 = sext i32 %2260 to i64
  %2262 = mul nsw i64 %2261, 40
  %2263 = add i64 %2262, %2256
  %2264 = add i64 %2257, -8
  %2265 = inttoptr i64 %2264 to i32*
  %2266 = load i32, i32* %2265
  %2267 = sext i32 %2266 to i64
  %2268 = shl nsw i64 %2267, 3
  %2269 = add i64 %2268, %2263
  %2270 = load double, double* %59, align 1
  %2271 = inttoptr i64 %2269 to double*
  store double %2270, double* %2271
  %2272 = add i64 %2257, -4
  %2273 = inttoptr i64 %2272 to i32*
  %2274 = load i32, i32* %2273
  %2275 = sext i32 %2274 to i64
  %2276 = mul nsw i64 %2275, 800
  %2277 = load i64, i64* %9, align 8
  %2278 = add i64 %2276, %2277
  store i64 %2278, i64* %11, align 8, !tbaa !1240
  %2279 = load i32, i32* %1553, align 4
  %2280 = load i64, i64* %13, align 8
  %2281 = add i64 %2280, -12
  %2282 = inttoptr i64 %2281 to i32*
  %2283 = load i32, i32* %2282
  %2284 = sub i32 %2279, %2283
  %2285 = sext i32 %2284 to i64
  %2286 = mul nsw i64 %2285, 40
  %2287 = load i64, i64* %11, align 8
  %2288 = add i64 %2286, %2287
  %2289 = load i32, i32* %1553, align 4
  %2290 = load i64, i64* %13, align 8
  %2291 = add i64 %2290, -8
  %2292 = inttoptr i64 %2291 to i32*
  %2293 = load i32, i32* %2292
  %2294 = sub i32 %2289, %2293
  %2295 = sext i32 %2294 to i64
  %2296 = shl nsw i64 %2295, 3
  %2297 = add i64 %2288, %2296
  %2298 = inttoptr i64 %2297 to double*
  %2299 = load double, double* %2298
  store double %2299, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2300 = add i64 %2290, -4
  %2301 = inttoptr i64 %2300 to i32*
  %2302 = load i32, i32* %2301
  %2303 = sext i32 %2302 to i64
  %2304 = mul nsw i64 %2303, 800
  %2305 = load i64, i64* %9, align 8
  %2306 = add i64 %2304, %2305
  %2307 = add i64 %2306, 600
  %2308 = load i64, i64* %13, align 8
  %2309 = add i64 %2308, -12
  %2310 = inttoptr i64 %2309 to i32*
  %2311 = load i32, i32* %2310
  %2312 = sext i32 %2311 to i64
  %2313 = mul nsw i64 %2312, 40
  %2314 = add i64 %2313, %2307
  %2315 = add i64 %2308, -8
  %2316 = inttoptr i64 %2315 to i32*
  %2317 = load i32, i32* %2316
  %2318 = sext i32 %2317 to i64
  %2319 = shl nsw i64 %2318, 3
  %2320 = add i64 %2319, %2314
  %2321 = load double, double* %59, align 1
  %2322 = inttoptr i64 %2320 to double*
  store double %2321, double* %2322
  %2323 = add i64 %2308, -4
  %2324 = inttoptr i64 %2323 to i32*
  %2325 = load i32, i32* %2324
  %2326 = sext i32 %2325 to i64
  %2327 = mul nsw i64 %2326, 800
  %2328 = load i64, i64* %7, align 8
  %2329 = add i64 %2327, %2328
  store i64 %2329, i64* %10, align 8, !tbaa !1240
  %2330 = load i32, i32* %1553, align 4
  %2331 = load i64, i64* %13, align 8
  %2332 = add i64 %2331, -12
  %2333 = inttoptr i64 %2332 to i32*
  %2334 = load i32, i32* %2333
  %2335 = sub i32 %2330, %2334
  %2336 = zext i32 %2335 to i64
  store i64 %2336, i64* %573, align 8, !tbaa !1240
  %2337 = sext i32 %2335 to i64
  %2338 = mul nsw i64 %2337, 40
  %2339 = load i64, i64* %10, align 8
  %2340 = add i64 %2338, %2339
  %2341 = load i64, i64* %8, align 8
  %2342 = load i64, i64* %13, align 8
  %2343 = add i64 %2342, -8
  %2344 = trunc i64 %2341 to i32
  %2345 = inttoptr i64 %2343 to i32*
  %2346 = load i32, i32* %2345
  %2347 = sub i32 %2344, %2346
  %2348 = zext i32 %2347 to i64
  store i64 %2348, i64* %8, align 8, !tbaa !1240
  %2349 = sext i32 %2347 to i64
  %2350 = shl nsw i64 %2349, 3
  %2351 = add i64 %2340, %2350
  %2352 = inttoptr i64 %2351 to double*
  %2353 = load double, double* %2352
  store double %2353, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2354 = add i64 %2342, -4
  %2355 = inttoptr i64 %2354 to i32*
  %2356 = load i32, i32* %2355
  %2357 = sext i32 %2356 to i64
  %2358 = mul nsw i64 %2357, 800
  %2359 = load i64, i64* %7, align 8
  %2360 = add i64 %2358, %2359
  %2361 = add i64 %2360, 600
  %2362 = load i64, i64* %13, align 8
  %2363 = add i64 %2362, -12
  %2364 = inttoptr i64 %2363 to i32*
  %2365 = load i32, i32* %2364
  %2366 = sext i32 %2365 to i64
  %2367 = mul nsw i64 %2366, 40
  %2368 = add i64 %2367, %2361
  %2369 = add i64 %2362, -8
  %2370 = inttoptr i64 %2369 to i32*
  %2371 = load i32, i32* %2370
  %2372 = sext i32 %2371 to i64
  store i64 %2372, i64* %9, align 8, !tbaa !1240
  %2373 = shl nsw i64 %2372, 3
  %2374 = add i64 %2373, %2368
  %2375 = load double, double* %59, align 1
  %2376 = inttoptr i64 %2374 to double*
  store double %2375, double* %2376
  %2377 = add i64 %2806, 342
  %2378 = inttoptr i64 %2363 to i32*
  store i32 1, i32* %2378
  %2379 = add i64 %2362, -4
  br label %block_4140db

block_414a6f:                                     ; preds = %block_414992
  store i64 %2106, i64* %10, align 8, !tbaa !1240
  %2380 = add i64 %2100, -3248
  store i64 %2380, i64* %11, align 8, !tbaa !1240
  %2381 = add i64 %2100, -4
  %2382 = inttoptr i64 %2381 to i32*
  %2383 = load i32, i32* %2382
  %2384 = zext i32 %2383 to i64
  store i64 %2384, i64* %9, align 8, !tbaa !1240
  %2385 = add i64 %1014, -51071
  %2386 = add i64 %1014, 22
  %2387 = load i64, i64* %12, align 8, !tbaa !1240
  %2388 = add i64 %2387, -8
  %2389 = inttoptr i64 %2388 to i64*
  store i64 %2386, i64* %2389
  store i64 %2388, i64* %12, align 8, !tbaa !1240
  %2390 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %2385, %struct.Memory* %1001)
  %2391 = load i64, i64* %3, align 8
  store i64 7, i64* %11, align 8, !tbaa !1240
  %2392 = load i64, i64* %13, align 8
  %2393 = add i64 %2392, -3248
  store i64 %2393, i64* %9, align 8, !tbaa !1240
  %2394 = add i64 %2392, -4
  %2395 = inttoptr i64 %2394 to i32*
  %2396 = load i32, i32* %2395
  %2397 = sext i32 %2396 to i64
  %2398 = shl nsw i64 %2397, 6
  %2399 = add i64 %2398, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 48)
  store i64 %2399, i64* %10, align 8, !tbaa !1240
  %2400 = add i64 %2391, 32875
  %2401 = add i64 %2391, 42
  %2402 = load i64, i64* %12, align 8, !tbaa !1240
  %2403 = add i64 %2402, -8
  %2404 = inttoptr i64 %2403 to i64*
  store i64 %2401, i64* %2404
  store i64 %2403, i64* %12, align 8, !tbaa !1240
  %2405 = tail call %struct.Memory* @sub_41caf0_transfb_cor_f(%struct.State* nonnull %0, i64 %2400, %struct.Memory* %2390)
  %2406 = load i64, i64* %13, align 8
  %2407 = add i64 %2406, -4
  %2408 = load i64, i64* %3, align 8
  %2409 = inttoptr i64 %2407 to i32*
  %2410 = load i32, i32* %2409
  %2411 = add i32 %2410, 1
  %2412 = zext i32 %2411 to i64
  store i64 %2412, i64* %7, align 8, !tbaa !1240
  %2413 = inttoptr i64 %2407 to i32*
  store i32 %2411, i32* %2413
  %2414 = add i64 %2408, -7387
  br label %block_412dd4

block_412d0f:                                     ; preds = %block_412d05
  %2415 = add i64 %1337, 7
  %2416 = inttoptr i64 %66 to i32*
  store i32 0, i32* %2416
  br label %block_412d16

block_413107:                                     ; preds = %block_4130ac
  %2417 = add i64 %1879, -2240
  store i64 %2417, i64* %7, align 8, !tbaa !1240
  %2418 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %2419 = add i64 %1879, -12
  %2420 = inttoptr i64 %2419 to i32*
  %2421 = load i32, i32* %2420
  %2422 = sext i32 %2421 to i64
  %2423 = mul nsw i64 %2422, 40
  %2424 = add i64 %2423, %2417
  store i64 %2424, i64* %9, align 8, !tbaa !1240
  %2425 = add i64 %1879, -8
  %2426 = inttoptr i64 %2425 to i32*
  %2427 = load i32, i32* %2426
  %2428 = sext i32 %2427 to i64
  %2429 = shl nsw i64 %2428, 3
  %2430 = add i64 %2429, %2424
  %2431 = inttoptr i64 %2430 to double*
  %2432 = load double, double* %2431
  %2433 = fmul double %2418, %2432
  store double %2433, double* %59, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  %2434 = load i64, i64* %7, align 8
  %2435 = add i64 %2423, %2434
  %2436 = load i64, i64* %13, align 8
  %2437 = add i64 %2436, -8
  %2438 = inttoptr i64 %2437 to i32*
  %2439 = load i32, i32* %2438
  %2440 = sext i32 %2439 to i64
  %2441 = shl nsw i64 %2440, 3
  %2442 = add i64 %2441, %2435
  %2443 = add i64 %1878, 58
  %2444 = inttoptr i64 %2442 to double*
  store double %2433, double* %2444
  br label %block_413141

block_41465c:                                     ; preds = %block_4145e5
  store i64 %3477, i64* %10, align 8, !tbaa !1240
  %2445 = add i64 %3472, -3248
  store i64 %2445, i64* %11, align 8, !tbaa !1240
  %2446 = add i64 %3472, -4
  %2447 = inttoptr i64 %2446 to i32*
  %2448 = load i32, i32* %2447
  %2449 = zext i32 %2448 to i64
  store i64 %2449, i64* %9, align 8, !tbaa !1240
  %2450 = add i64 %1323, -50028
  %2451 = add i64 %1323, 22
  %2452 = load i64, i64* %12, align 8, !tbaa !1240
  %2453 = add i64 %2452, -8
  %2454 = inttoptr i64 %2453 to i64*
  store i64 %2451, i64* %2454
  store i64 %2453, i64* %12, align 8, !tbaa !1240
  %2455 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %2450, %struct.Memory* %1310)
  %2456 = load i64, i64* %3, align 8
  store i64 3, i64* %11, align 8, !tbaa !1240
  %2457 = load i64, i64* %13, align 8
  %2458 = add i64 %2457, -3248
  store i64 %2458, i64* %9, align 8, !tbaa !1240
  %2459 = add i64 %2457, -4
  %2460 = inttoptr i64 %2459 to i32*
  %2461 = load i32, i32* %2460
  %2462 = sext i32 %2461 to i64
  %2463 = shl nsw i64 %2462, 6
  %2464 = add i64 %2463, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 16)
  store i64 %2464, i64* %10, align 8, !tbaa !1240
  %2465 = add i64 %2456, 33598
  %2466 = add i64 %2456, 42
  %2467 = load i64, i64* %12, align 8, !tbaa !1240
  %2468 = add i64 %2467, -8
  %2469 = inttoptr i64 %2468 to i64*
  store i64 %2466, i64* %2469
  store i64 %2468, i64* %12, align 8, !tbaa !1240
  %2470 = tail call %struct.Memory* @sub_41c9b0_transfb_cor_e(%struct.State* nonnull %0, i64 %2465, %struct.Memory* %2455)
  %2471 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %2472 = load i64, i64* %13, align 8
  %2473 = add i64 %2472, -2032
  store i64 %2473, i64* %11, align 8, !tbaa !1240
  %2474 = add i64 %2471, 45492
  %2475 = add i64 %2471, 23
  %2476 = load i64, i64* %12, align 8, !tbaa !1240
  %2477 = add i64 %2476, -8
  %2478 = inttoptr i64 %2477 to i64*
  store i64 %2475, i64* %2478
  store i64 %2477, i64* %12, align 8, !tbaa !1240
  %2479 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %2474, %struct.Memory* %2470)
  %2480 = load i64, i64* %13, align 8
  %2481 = add i64 %2480, -12
  %2482 = load i64, i64* %3, align 8
  %2483 = add i64 %2482, 7
  %2484 = inttoptr i64 %2481 to i32*
  store i32 0, i32* %2484
  %2485 = add i64 %2480, -8
  %2486 = add i64 %2480, -2032
  br label %block_4146ba

block_414532:                                     ; preds = %block_4144d8, %block_41453c
  %2487 = phi i64 [ %2145, %block_4144d8 ], [ %985, %block_41453c ]
  %2488 = phi %struct.Memory* [ %2141, %block_4144d8 ], [ %2488, %block_41453c ]
  %2489 = inttoptr i64 %2143 to i32*
  %2490 = load i32, i32* %2489
  %2491 = add i32 %2490, -5
  %2492 = lshr i32 %2491, 31
  %2493 = trunc i32 %2492 to i8
  %2494 = lshr i32 %2490, 31
  %2495 = xor i32 %2492, %2494
  %2496 = add nuw nsw i32 %2495, %2494
  %2497 = icmp eq i32 %2496, 2
  %2498 = icmp ne i8 %2493, 0
  %2499 = xor i1 %2498, %2497
  %2500 = select i1 %2499, i64 10, i64 85
  %2501 = add i64 %2487, %2500
  br i1 %2499, label %block_41453c, label %block_414587

block_412c64:                                     ; preds = %block_412c5a
  %2502 = sext i32 %3028 to i64
  %2503 = shl nsw i64 %2502, 3
  %2504 = add i64 %64, %2503
  %2505 = inttoptr i64 %2504 to double*
  %2506 = load double, double* %2505
  %2507 = sext i32 %3016 to i64
  %2508 = mul nsw i64 %2507, 24
  %2509 = add i64 %2508, ptrtoint (%qbnew_type* @qbnew to i64)
  %2510 = add i32 %3028, -1
  %2511 = zext i32 %2510 to i64
  store i64 %2511, i64* %9, align 8, !tbaa !1240
  %2512 = sext i32 %2510 to i64
  store i64 %2512, i64* %8, align 8, !tbaa !1240
  %2513 = shl nsw i64 %2512, 3
  %2514 = add i64 %2509, %2513
  %2515 = inttoptr i64 %2514 to double*
  %2516 = load double, double* %2515
  %2517 = shl nsw i64 %2507, 3
  %2518 = add i64 %62, %2517
  %2519 = inttoptr i64 %2518 to double*
  %2520 = load double, double* %2519
  %2521 = fmul double %2516, %2520
  store double %2521, double* %70, align 1, !tbaa !1246
  store i64 0, i64* %71, align 1, !tbaa !1246
  %2522 = fadd double %2506, %2521
  store double %2522, double* %59, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  %2523 = inttoptr i64 %2504 to double*
  store double %2522, double* %2523
  %2524 = inttoptr i64 %69 to i32*
  %2525 = load i32, i32* %2524
  %2526 = add i32 %2525, 1
  %2527 = inttoptr i64 %69 to i32*
  store i32 %2526, i32* %2527
  %2528 = add i64 %3026, -10
  br label %block_412c5a

block_413258:                                     ; preds = %block_4130a2
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %7, align 8, !tbaa !1240
  %2529 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %2529, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2530 = add i64 %1987, -4
  %2531 = inttoptr i64 %2530 to i32*
  %2532 = load i32, i32* %2531
  %2533 = sext i32 %2532 to i64
  %2534 = mul nsw i64 %2533, 800
  %2535 = add i64 %2534, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %2536 = add i64 %1987, -12
  %2537 = inttoptr i64 %2536 to i32*
  %2538 = load i32, i32* %2537
  %2539 = sext i32 %2538 to i64
  %2540 = mul nsw i64 %2539, 40
  %2541 = add i64 %2540, %2535
  %2542 = add i64 %2541, 32
  %2543 = load double, double* %59, align 1
  %2544 = inttoptr i64 %2542 to double*
  %2545 = load double, double* %2544
  %2546 = fmul double %2543, %2545
  store double %2546, double* %59, align 1, !tbaa !1246
  %2547 = load i64, i64* %13, align 8
  %2548 = add i64 %2547, -4
  %2549 = inttoptr i64 %2548 to i32*
  %2550 = load i32, i32* %2549
  %2551 = sext i32 %2550 to i64
  %2552 = mul nsw i64 %2551, 800
  %2553 = load i64, i64* %7, align 8
  %2554 = add i64 %2552, %2553
  %2555 = add i64 %2547, -12
  %2556 = inttoptr i64 %2555 to i32*
  %2557 = load i32, i32* %2556
  %2558 = sext i32 %2557 to i64
  %2559 = mul nsw i64 %2558, 40
  %2560 = add i64 %2559, %2554
  %2561 = add i64 %2560, 32
  %2562 = load double, double* %59, align 1
  %2563 = inttoptr i64 %2561 to double*
  store double %2562, double* %2563
  %2564 = load i64, i64* %13, align 8
  %2565 = add i64 %2564, -4
  %2566 = inttoptr i64 %2565 to i32*
  %2567 = load i32, i32* %2566
  %2568 = sext i32 %2567 to i64
  %2569 = mul nsw i64 %2568, 800
  %2570 = load i64, i64* %7, align 8
  %2571 = add i64 %2569, %2570
  %2572 = add i64 %2564, -12
  %2573 = inttoptr i64 %2572 to i32*
  %2574 = load i32, i32* %2573
  %2575 = sext i32 %2574 to i64
  %2576 = mul nsw i64 %2575, 40
  %2577 = add i64 %2576, %2571
  store i64 %2577, i64* %9, align 8, !tbaa !1240
  %2578 = add i64 %2577, 32
  %2579 = inttoptr i64 %2578 to double*
  %2580 = load double, double* %2579
  store double %2580, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2581 = load i64, i64* %13, align 8
  %2582 = add i64 %2581, -4
  %2583 = inttoptr i64 %2582 to i32*
  %2584 = load i32, i32* %2583
  %2585 = sext i32 %2584 to i64
  %2586 = mul nsw i64 %2585, 800
  %2587 = load i64, i64* %7, align 8
  %2588 = add i64 %2586, %2587
  %2589 = add i64 %2581, -12
  %2590 = inttoptr i64 %2589 to i32*
  %2591 = load i32, i32* %2590
  %2592 = sext i32 %2591 to i64
  store i64 %2592, i64* %8, align 8, !tbaa !1240
  %2593 = shl nsw i64 %2592, 3
  %2594 = add i64 %2588, 160
  %2595 = add i64 %2594, %2593
  %2596 = inttoptr i64 %2595 to double*
  store double %2580, double* %2596
  %2597 = inttoptr i64 %2589 to i32*
  %2598 = load i32, i32* %2597
  %2599 = add i32 %2598, 1
  %2600 = load i64, i64* %13, align 8
  %2601 = add i64 %2600, -12
  %2602 = inttoptr i64 %2601 to i32*
  store i32 %2599, i32* %2602
  %2603 = add i64 %2002, -454
  br label %block_413092

block_413345:                                     ; preds = %block_4132f6, %block_41353b
  %2604 = phi i64 [ %1589, %block_4132f6 ], [ %1217, %block_41353b ]
  %2605 = phi i64 [ %1585, %block_4132f6 ], [ %1203, %block_41353b ]
  %2606 = phi %struct.Memory* [ %2008, %block_4132f6 ], [ %1139, %block_41353b ]
  %2607 = add i64 %2605, -8
  %2608 = inttoptr i64 %2607 to i32*
  %2609 = load i32, i32* %2608
  %2610 = add i32 %2609, -5
  %2611 = lshr i32 %2610, 31
  %2612 = trunc i32 %2611 to i8
  %2613 = lshr i32 %2609, 31
  %2614 = xor i32 %2611, %2613
  %2615 = add nuw nsw i32 %2614, %2613
  %2616 = icmp eq i32 %2615, 2
  %2617 = icmp ne i8 %2612, 0
  %2618 = xor i1 %2617, %2616
  %2619 = select i1 %2618, i64 10, i64 885
  %2620 = add i64 %2604, %2619
  br i1 %2618, label %block_41334f, label %block_4136ba

block_412c53:                                     ; preds = %block_412c49
  %2621 = add i64 %2821, 7
  %2622 = inttoptr i64 %69 to i32*
  store i32 0, i32* %2622
  br label %block_412c5a

block_413b58:                                     ; preds = %block_4139a1
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  store i64 4, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %10, align 8, !tbaa !1240
  %2623 = load i64, i64* %13, align 8
  %2624 = add i64 %2623, -12
  %2625 = inttoptr i64 %2624 to i32*
  store i32 0, i32* %2625
  %2626 = add i64 %2623, -8
  %2627 = inttoptr i64 %2626 to i32*
  store i32 0, i32* %2627
  %2628 = add i64 %2623, -4
  %2629 = inttoptr i64 %2628 to i32*
  %2630 = load i32, i32* %2629
  %2631 = sext i32 %2630 to i64
  %2632 = mul nsw i64 %2631, 800
  %2633 = add i64 %2632, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %2634 = inttoptr i64 %2624 to i32*
  %2635 = load i32, i32* %2634
  %2636 = sub i32 4, %2635
  %2637 = sext i32 %2636 to i64
  %2638 = mul nsw i64 %2637, 40
  %2639 = add i64 %2638, %2633
  %2640 = load i64, i64* %13, align 8
  %2641 = add i64 %2640, -8
  %2642 = inttoptr i64 %2641 to i32*
  %2643 = load i32, i32* %2642
  %2644 = sext i32 %2643 to i64
  %2645 = shl nsw i64 %2644, 3
  %2646 = add i64 %2645, %2639
  %2647 = inttoptr i64 %2646 to double*
  %2648 = load double, double* %2647
  store double %2648, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2649 = add i64 %2640, -4
  %2650 = inttoptr i64 %2649 to i32*
  %2651 = load i32, i32* %2650
  %2652 = sext i32 %2651 to i64
  %2653 = mul nsw i64 %2652, 800
  %2654 = load i64, i64* %10, align 8
  %2655 = add i64 %2653, %2654
  %2656 = add i64 %2655, 200
  %2657 = load i64, i64* %13, align 8
  %2658 = add i64 %2657, -12
  %2659 = inttoptr i64 %2658 to i32*
  %2660 = load i32, i32* %2659
  %2661 = sext i32 %2660 to i64
  %2662 = mul nsw i64 %2661, 40
  %2663 = add i64 %2662, %2656
  %2664 = add i64 %2657, -8
  %2665 = inttoptr i64 %2664 to i32*
  %2666 = load i32, i32* %2665
  %2667 = sext i32 %2666 to i64
  %2668 = shl nsw i64 %2667, 3
  %2669 = add i64 %2668, %2663
  %2670 = load double, double* %59, align 1
  %2671 = inttoptr i64 %2669 to double*
  store double %2670, double* %2671
  %2672 = add i64 %2657, -4
  %2673 = inttoptr i64 %2672 to i32*
  %2674 = load i32, i32* %2673
  %2675 = sext i32 %2674 to i64
  %2676 = mul nsw i64 %2675, 800
  %2677 = load i64, i64* %9, align 8
  %2678 = add i64 %2676, %2677
  store i64 %2678, i64* %11, align 8, !tbaa !1240
  %2679 = load i32, i32* %1553, align 4
  %2680 = load i64, i64* %13, align 8
  %2681 = add i64 %2680, -12
  %2682 = inttoptr i64 %2681 to i32*
  %2683 = load i32, i32* %2682
  %2684 = sub i32 %2679, %2683
  %2685 = sext i32 %2684 to i64
  %2686 = mul nsw i64 %2685, 40
  %2687 = load i64, i64* %11, align 8
  %2688 = add i64 %2686, %2687
  %2689 = load i64, i64* %13, align 8
  %2690 = add i64 %2689, -8
  %2691 = inttoptr i64 %2690 to i32*
  %2692 = load i32, i32* %2691
  %2693 = sext i32 %2692 to i64
  %2694 = shl nsw i64 %2693, 3
  %2695 = add i64 %2694, %2688
  %2696 = inttoptr i64 %2695 to double*
  %2697 = load double, double* %2696
  store double %2697, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2698 = add i64 %2689, -4
  %2699 = inttoptr i64 %2698 to i32*
  %2700 = load i32, i32* %2699
  %2701 = sext i32 %2700 to i64
  %2702 = mul nsw i64 %2701, 800
  %2703 = load i64, i64* %9, align 8
  %2704 = add i64 %2702, %2703
  %2705 = add i64 %2704, 200
  %2706 = load i64, i64* %13, align 8
  %2707 = add i64 %2706, -12
  %2708 = inttoptr i64 %2707 to i32*
  %2709 = load i32, i32* %2708
  %2710 = sext i32 %2709 to i64
  %2711 = mul nsw i64 %2710, 40
  %2712 = add i64 %2711, %2705
  %2713 = add i64 %2706, -8
  %2714 = inttoptr i64 %2713 to i32*
  %2715 = load i32, i32* %2714
  %2716 = sext i32 %2715 to i64
  %2717 = shl nsw i64 %2716, 3
  %2718 = add i64 %2717, %2712
  %2719 = load double, double* %59, align 1
  %2720 = inttoptr i64 %2718 to double*
  store double %2719, double* %2720
  %2721 = add i64 %2706, -4
  %2722 = inttoptr i64 %2721 to i32*
  %2723 = load i32, i32* %2722
  %2724 = sext i32 %2723 to i64
  %2725 = mul nsw i64 %2724, 800
  %2726 = load i64, i64* %7, align 8
  %2727 = add i64 %2725, %2726
  store i64 %2727, i64* %10, align 8, !tbaa !1240
  %2728 = load i64, i64* %8, align 8
  %2729 = load i64, i64* %13, align 8
  %2730 = add i64 %2729, -12
  %2731 = trunc i64 %2728 to i32
  %2732 = inttoptr i64 %2730 to i32*
  %2733 = load i32, i32* %2732
  %2734 = sub i32 %2731, %2733
  %2735 = sext i32 %2734 to i64
  %2736 = mul nsw i64 %2735, 40
  %2737 = load i64, i64* %10, align 8
  %2738 = add i64 %2736, %2737
  %2739 = load i64, i64* %13, align 8
  %2740 = add i64 %2739, -8
  %2741 = inttoptr i64 %2740 to i32*
  %2742 = load i32, i32* %2741
  %2743 = sext i32 %2742 to i64
  %2744 = shl nsw i64 %2743, 3
  %2745 = add i64 %2744, %2738
  %2746 = inttoptr i64 %2745 to double*
  %2747 = load double, double* %2746
  store double %2747, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2748 = add i64 %2739, -4
  %2749 = inttoptr i64 %2748 to i32*
  %2750 = load i32, i32* %2749
  %2751 = sext i32 %2750 to i64
  %2752 = mul nsw i64 %2751, 800
  %2753 = load i64, i64* %7, align 8
  %2754 = add i64 %2752, %2753
  %2755 = add i64 %2754, 200
  %2756 = load i64, i64* %13, align 8
  %2757 = add i64 %2756, -12
  %2758 = inttoptr i64 %2757 to i32*
  %2759 = load i32, i32* %2758
  %2760 = sext i32 %2759 to i64
  %2761 = mul nsw i64 %2760, 40
  %2762 = add i64 %2761, %2755
  %2763 = add i64 %2756, -8
  %2764 = inttoptr i64 %2763 to i32*
  %2765 = load i32, i32* %2764
  %2766 = sext i32 %2765 to i64
  %2767 = shl nsw i64 %2766, 3
  %2768 = add i64 %2767, %2762
  %2769 = load double, double* %59, align 1
  %2770 = inttoptr i64 %2768 to double*
  store double %2769, double* %2770
  %2771 = add i64 %629, 304
  %2772 = inttoptr i64 %2757 to i32*
  store i32 1, i32* %2772
  %2773 = add i64 %2756, -4
  br label %block_413c88

block_4134e5:                                     ; preds = %block_4134db
  %2774 = sext i32 %1436 to i64
  %2775 = mul nsw i64 %2774, 40
  %2776 = add i64 %2775, %562
  %2777 = inttoptr i64 %559 to i32*
  %2778 = load i32, i32* %2777
  %2779 = sext i32 %2778 to i64
  %2780 = shl nsw i64 %2779, 3
  %2781 = add i64 %2780, %2776
  %2782 = inttoptr i64 %2781 to double*
  %2783 = load double, double* %2782
  store double %2783, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2784 = mul nsw i64 %2774, 200
  %2785 = add i64 %2784, %562
  %2786 = add i64 %2780, %2785
  %2787 = inttoptr i64 %2786 to double*
  store double %2783, double* %2787
  %2788 = inttoptr i64 %564 to i32*
  %2789 = load i32, i32* %2788
  %2790 = add i32 %2789, 1
  %2791 = inttoptr i64 %564 to i32*
  store i32 %2790, i32* %2791
  %2792 = add i64 %1446, -10
  br label %block_4134db

block_413e52:                                     ; preds = %block_413e5c, %block_413e44
  %2793 = phi i64 [ %2978, %block_413e44 ], [ %3364, %block_413e5c ]
  %2794 = phi %struct.Memory* [ %2026, %block_413e44 ], [ %2794, %block_413e5c ]
  %2795 = inttoptr i64 %2977 to i32*
  %2796 = load i32, i32* %2795
  %2797 = add i32 %2796, -5
  %2798 = lshr i32 %2797, 31
  %2799 = lshr i32 %2796, 31
  %2800 = xor i32 %2798, %2799
  %2801 = add nuw nsw i32 %2800, %2799
  %2802 = icmp eq i32 %2801, 2
  %2803 = icmp ne i32 %2798, 0
  %2804 = xor i1 %2803, %2802
  %2805 = select i1 %2804, i64 10, i64 307
  %2806 = add i64 %2793, %2805
  br i1 %2804, label %block_413e5c, label %block_413f85

block_412c49:                                     ; preds = %block_412cc0, %block_412be0
  %2807 = phi i64 [ %67, %block_412be0 ], [ %3368, %block_412cc0 ]
  %2808 = phi %struct.Memory* [ %56, %block_412be0 ], [ %3014, %block_412cc0 ]
  %2809 = inttoptr i64 %66 to i32*
  %2810 = load i32, i32* %2809
  %2811 = add i32 %2810, -4
  %2812 = lshr i32 %2811, 31
  %2813 = trunc i32 %2812 to i8
  %2814 = lshr i32 %2810, 31
  %2815 = xor i32 %2812, %2814
  %2816 = add nuw nsw i32 %2815, %2814
  %2817 = icmp eq i32 %2816, 2
  %2818 = icmp ne i8 %2813, 0
  %2819 = xor i1 %2818, %2817
  %2820 = select i1 %2819, i64 10, i64 138
  %2821 = add i64 %2807, %2820
  br i1 %2819, label %block_412c53, label %block_412cd3

block_413867:                                     ; preds = %block_413871, %block_4136ba
  %2822 = phi i64 [ %1832, %block_4136ba ], [ %2224, %block_413871 ]
  %2823 = phi %struct.Memory* [ %2606, %block_4136ba ], [ %2823, %block_413871 ]
  %2824 = inttoptr i64 %1831 to i32*
  %2825 = load i32, i32* %2824
  %2826 = add i32 %2825, -4
  %2827 = lshr i32 %2826, 31
  %2828 = trunc i32 %2827 to i8
  %2829 = lshr i32 %2825, 31
  %2830 = xor i32 %2827, %2829
  %2831 = add nuw nsw i32 %2830, %2829
  %2832 = icmp eq i32 %2831, 2
  %2833 = icmp ne i8 %2828, 0
  %2834 = xor i1 %2833, %2832
  %2835 = select i1 %2834, i64 10, i64 307
  %2836 = add i64 %2822, %2835
  br i1 %2834, label %block_413871, label %block_41399a

block_414847:                                     ; preds = %block_414809
  store i64 %1423, i64* %10, align 8, !tbaa !1240
  %2837 = add i64 %1417, -3248
  store i64 %2837, i64* %11, align 8, !tbaa !1240
  %2838 = add i64 %1417, -4
  %2839 = inttoptr i64 %2838 to i32*
  %2840 = load i32, i32* %2839
  %2841 = zext i32 %2840 to i64
  store i64 %2841, i64* %9, align 8, !tbaa !1240
  %2842 = add i64 %3398, -50519
  %2843 = add i64 %3398, 22
  %2844 = load i64, i64* %12, align 8, !tbaa !1240
  %2845 = add i64 %2844, -8
  %2846 = inttoptr i64 %2845 to i64*
  store i64 %2843, i64* %2846
  store i64 %2845, i64* %12, align 8, !tbaa !1240
  %2847 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %2842, %struct.Memory* %3385)
  %2848 = load i64, i64* %3, align 8
  store i64 5, i64* %11, align 8, !tbaa !1240
  %2849 = load i64, i64* %13, align 8
  %2850 = add i64 %2849, -3248
  store i64 %2850, i64* %9, align 8, !tbaa !1240
  %2851 = add i64 %2849, -4
  %2852 = inttoptr i64 %2851 to i32*
  %2853 = load i32, i32* %2852
  %2854 = sext i32 %2853 to i64
  %2855 = shl nsw i64 %2854, 6
  %2856 = add i64 %2855, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 32)
  store i64 %2856, i64* %10, align 8, !tbaa !1240
  %2857 = add i64 %2848, 33427
  %2858 = add i64 %2848, 42
  %2859 = load i64, i64* %12, align 8, !tbaa !1240
  %2860 = add i64 %2859, -8
  %2861 = inttoptr i64 %2860 to i64*
  store i64 %2858, i64* %2861
  store i64 %2860, i64* %12, align 8, !tbaa !1240
  %2862 = tail call %struct.Memory* @sub_41caf0_transfb_cor_f(%struct.State* nonnull %0, i64 %2857, %struct.Memory* %2847)
  %2863 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %2864 = load i64, i64* %13, align 8
  %2865 = add i64 %2864, -2032
  store i64 %2865, i64* %11, align 8, !tbaa !1240
  %2866 = add i64 %2863, 45001
  %2867 = add i64 %2863, 23
  %2868 = load i64, i64* %12, align 8, !tbaa !1240
  %2869 = add i64 %2868, -8
  %2870 = inttoptr i64 %2869 to i64*
  store i64 %2867, i64* %2870
  store i64 %2869, i64* %12, align 8, !tbaa !1240
  %2871 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %2866, %struct.Memory* %2862)
  %2872 = load i64, i64* %13, align 8
  %2873 = add i64 %2872, -12
  %2874 = load i64, i64* %3, align 8
  %2875 = add i64 %2874, 7
  %2876 = inttoptr i64 %2873 to i32*
  store i32 0, i32* %2876
  %2877 = add i64 %2872, -8
  %2878 = add i64 %2872, -2032
  br label %block_4148a5

block_412de5:                                     ; preds = %block_413078, %block_412dde
  %2879 = phi i64 [ %3222, %block_412dde ], [ %3289, %block_413078 ]
  %2880 = phi i64 [ %1881, %block_412dde ], [ %433, %block_413078 ]
  %2881 = phi %struct.Memory* [ %1882, %block_412dde ], [ %434, %block_413078 ]
  %2882 = add i64 %2880, -12
  %2883 = inttoptr i64 %2882 to i32*
  %2884 = load i32, i32* %2883
  %2885 = add i32 %2884, -3
  %2886 = lshr i32 %2885, 31
  %2887 = trunc i32 %2886 to i8
  %2888 = lshr i32 %2884, 31
  %2889 = xor i32 %2886, %2888
  %2890 = add nuw nsw i32 %2889, %2888
  %2891 = icmp eq i32 %2890, 2
  %2892 = icmp ne i8 %2887, 0
  %2893 = xor i1 %2892, %2891
  %2894 = select i1 %2893, i64 10, i64 678
  %2895 = add i64 %2879, %2894
  br i1 %2893, label %block_412def, label %block_41308b

block_4149ad:                                     ; preds = %block_4149a3
  %2896 = sext i32 %1970 to i64
  %2897 = mul nsw i64 %2896, 40
  %2898 = add i64 %2897, ptrtoint (%tcpre_type* @tcpre to i64)
  %2899 = sext i32 %1958 to i64
  %2900 = shl nsw i64 %2899, 3
  %2901 = add i64 %2900, %2898
  %2902 = inttoptr i64 %2901 to double*
  %2903 = load double, double* %2902
  %2904 = add i64 %2897, %2106
  %2905 = add i64 %2900, %2904
  %2906 = inttoptr i64 %2905 to double*
  store double %2903, double* %2906
  %2907 = inttoptr i64 %2101 to i32*
  %2908 = load i32, i32* %2907
  %2909 = sext i32 %2908 to i64
  %2910 = mul nsw i64 %2909, 40
  %2911 = add i64 %2910, ptrtoint (%tcpre_type* @tcpre to i64)
  %2912 = inttoptr i64 %2105 to i32*
  %2913 = load i32, i32* %2912
  %2914 = sext i32 %2913 to i64
  %2915 = shl nsw i64 %2914, 3
  %2916 = add i64 %2915, %2911
  %2917 = inttoptr i64 %2916 to double*
  %2918 = load double, double* %2917
  %2919 = mul nsw i64 %2909, 200
  %2920 = add i64 %2919, %2106
  %2921 = add i64 %2915, %2920
  %2922 = inttoptr i64 %2921 to double*
  store double %2918, double* %2922
  %2923 = inttoptr i64 %2101 to i32*
  %2924 = load i32, i32* %2923
  %2925 = sext i32 %2924 to i64
  %2926 = mul nsw i64 %2925, 40
  %2927 = add i64 %2926, ptrtoint (%tcpre_type* @tcpre to i64)
  %2928 = inttoptr i64 %2105 to i32*
  %2929 = load i32, i32* %2928
  %2930 = sext i32 %2929 to i64
  %2931 = shl nsw i64 %2930, 3
  %2932 = add i64 %2931, %2927
  %2933 = inttoptr i64 %2932 to double*
  %2934 = load double, double* %2933
  store double %2934, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2935 = mul nsw i64 %2925, 200
  %2936 = add i64 %2935, %2106
  %2937 = mul nsw i64 %2930, 40
  %2938 = add i64 %2937, %2936
  %2939 = inttoptr i64 %2938 to double*
  store double %2934, double* %2939
  %2940 = inttoptr i64 %2105 to i32*
  %2941 = load i32, i32* %2940
  %2942 = add i32 %2941, 1
  %2943 = inttoptr i64 %2105 to i32*
  store i32 %2942, i32* %2943
  %2944 = add i64 %1968, -10
  br label %block_4149a3

block_4148af:                                     ; preds = %block_4148a5
  %2945 = add i64 %1985, 7
  %2946 = inttoptr i64 %2877 to i32*
  store i32 0, i32* %2946
  br label %block_4148b6

block_413dc5:                                     ; preds = %block_413dbb
  %2947 = inttoptr i64 %2773 to i32*
  %2948 = load i32, i32* %2947
  %2949 = sext i32 %2948 to i64
  %2950 = mul nsw i64 %2949, 800
  %2951 = add i64 %2950, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %2952 = inttoptr i64 %2757 to i32*
  %2953 = load i32, i32* %2952
  %2954 = sub i32 4, %2953
  %2955 = sext i32 %2954 to i64
  %2956 = mul nsw i64 %2955, 40
  %2957 = add i64 %2956, %2951
  %2958 = sext i32 %1944 to i64
  %2959 = shl nsw i64 %2958, 3
  %2960 = add i64 %2959, %2957
  %2961 = inttoptr i64 %2960 to double*
  %2962 = load double, double* %2961
  store double %2962, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %2963 = add i64 %2950, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 200)
  %2964 = sext i32 %2953 to i64
  %2965 = mul nsw i64 %2964, 40
  %2966 = add i64 %2965, %2963
  %2967 = add i64 %2959, %2966
  %2968 = inttoptr i64 %2967 to double*
  store double %2962, double* %2968
  %2969 = inttoptr i64 %2763 to i32*
  %2970 = load i32, i32* %2969
  %2971 = add i32 %2970, 1
  %2972 = inttoptr i64 %2763 to i32*
  store i32 %2971, i32* %2972
  %2973 = add i64 %1954, -10
  br label %block_413dbb

block_413e44:                                     ; preds = %block_413c88
  %2974 = load i64, i64* %13, align 8
  %2975 = add i64 %2974, -12
  %2976 = inttoptr i64 %2975 to i32*
  store i32 4, i32* %2976
  %2977 = add i64 %2974, -8
  %2978 = add i64 %2039, 14
  %2979 = inttoptr i64 %2977 to i32*
  store i32 1, i32* %2979
  %2980 = add i64 %2974, -4
  br label %block_413e52

block_4145ef:                                     ; preds = %block_4145e5
  %2981 = sext i32 %1312 to i64
  %2982 = shl nsw i64 %2981, 3
  %2983 = add i64 %2982, ptrtoint (%tcpre_type* @tcpre to i64)
  %2984 = inttoptr i64 %2983 to double*
  %2985 = load double, double* %2984
  %2986 = add i64 %3477, %2982
  %2987 = inttoptr i64 %2986 to double*
  store double %2985, double* %2987
  %2988 = inttoptr i64 %3473 to i32*
  %2989 = load i32, i32* %2988
  %2990 = sext i32 %2989 to i64
  %2991 = shl nsw i64 %2990, 3
  %2992 = add i64 %2991, ptrtoint (%tcpre_type* @tcpre to i64)
  %2993 = inttoptr i64 %2992 to double*
  %2994 = load double, double* %2993
  %2995 = mul nsw i64 %2990, 40
  %2996 = add i64 %2995, %3477
  %2997 = inttoptr i64 %2996 to double*
  store double %2994, double* %2997
  %2998 = inttoptr i64 %3473 to i32*
  %2999 = load i32, i32* %2998
  %3000 = sext i32 %2999 to i64
  %3001 = shl nsw i64 %3000, 3
  %3002 = add i64 %3001, ptrtoint (%tcpre_type* @tcpre to i64)
  %3003 = inttoptr i64 %3002 to double*
  %3004 = load double, double* %3003
  store double %3004, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3005 = mul nsw i64 %3000, 200
  %3006 = add i64 %3005, %3477
  %3007 = inttoptr i64 %3006 to double*
  store double %3004, double* %3007
  %3008 = inttoptr i64 %3473 to i32*
  %3009 = load i32, i32* %3008
  %3010 = add i32 %3009, 1
  %3011 = inttoptr i64 %3473 to i32*
  store i32 %3010, i32* %3011
  %3012 = add i64 %1323, -10
  br label %block_4145e5

block_412c5a:                                     ; preds = %block_412c53, %block_412c64
  %3013 = phi i64 [ %2621, %block_412c53 ], [ %2528, %block_412c64 ]
  %3014 = phi %struct.Memory* [ %2808, %block_412c53 ], [ %3014, %block_412c64 ]
  %3015 = inttoptr i64 %69 to i32*
  %3016 = load i32, i32* %3015
  %3017 = add i32 %3016, -5
  %3018 = lshr i32 %3017, 31
  %3019 = lshr i32 %3016, 31
  %3020 = xor i32 %3018, %3019
  %3021 = add nuw nsw i32 %3020, %3019
  %3022 = icmp eq i32 %3021, 2
  %3023 = icmp ne i32 %3018, 0
  %3024 = xor i1 %3023, %3022
  %3025 = select i1 %3024, i64 10, i64 102
  %3026 = add i64 %3013, %3025
  %3027 = inttoptr i64 %66 to i32*
  %3028 = load i32, i32* %3027
  br i1 %3024, label %block_412c64, label %block_412cc0

block_41479e:                                     ; preds = %block_41479e.preheader, %block_4147a8
  %3029 = phi i64 [ %612, %block_4147a8 ], [ %3139, %block_41479e.preheader ]
  %3030 = phi %struct.Memory* [ %3030, %block_4147a8 ], [ %3125, %block_41479e.preheader ]
  %3031 = inttoptr i64 %1422 to i32*
  %3032 = load i32, i32* %3031
  %3033 = add i32 %3032, -5
  %3034 = lshr i32 %3033, 31
  %3035 = lshr i32 %3032, 31
  %3036 = xor i32 %3034, %3035
  %3037 = add nuw nsw i32 %3036, %3035
  %3038 = icmp eq i32 %3037, 2
  %3039 = icmp ne i32 %3034, 0
  %3040 = xor i1 %3039, %3038
  %3041 = select i1 %3040, i64 10, i64 81
  %3042 = add i64 %3029, %3041
  %3043 = inttoptr i64 %1418 to i32*
  %3044 = load i32, i32* %3043
  br i1 %3040, label %block_4147a8, label %block_4147ef

block_41314b:                                     ; preds = %block_413141
  %3045 = add i64 %3237, -2240
  store i64 %3045, i64* %7, align 8, !tbaa !1240
  %3046 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %3047 = sext i32 %3241 to i64
  %3048 = mul nsw i64 %3047, 40
  %3049 = add i64 %3048, %3045
  store i64 %3049, i64* %9, align 8, !tbaa !1240
  %3050 = add i64 %3237, -8
  %3051 = inttoptr i64 %3050 to i32*
  %3052 = load i32, i32* %3051
  %3053 = sext i32 %3052 to i64
  %3054 = shl nsw i64 %3053, 3
  %3055 = add i64 %3054, %3049
  %3056 = inttoptr i64 %3055 to double*
  %3057 = load double, double* %3056
  %3058 = fmul double %3046, %3057
  store double %3058, double* %59, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  %3059 = load i64, i64* %7, align 8
  %3060 = add i64 %3048, %3059
  %3061 = load i64, i64* %13, align 8
  %3062 = add i64 %3061, -8
  %3063 = inttoptr i64 %3062 to i32*
  %3064 = load i32, i32* %3063
  %3065 = sext i32 %3064 to i64
  %3066 = shl nsw i64 %3065, 3
  %3067 = add i64 %3066, %3060
  %3068 = add i64 %3245, 58
  %3069 = inttoptr i64 %3067 to double*
  store double %3058, double* %3069
  br label %block_413185

block_413e31:                                     ; preds = %block_413dbb
  %3070 = inttoptr i64 %2757 to i32*
  %3071 = load i32, i32* %3070
  %3072 = add i32 %3071, 1
  %3073 = inttoptr i64 %2757 to i32*
  store i32 %3072, i32* %3073
  %3074 = add i64 %1954, -425
  br label %block_413c88

block_414429:                                     ; preds = %block_4142d0
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %3075 = load i64, i64* %13, align 8
  %3076 = add i64 %3075, -2032
  store i64 %3076, i64* %11, align 8, !tbaa !1240
  %3077 = add i64 %1572, 46119
  %3078 = add i64 %1572, 23
  %3079 = load i64, i64* %12, align 8, !tbaa !1240
  %3080 = add i64 %3079, -8
  %3081 = inttoptr i64 %3080 to i64*
  store i64 %3078, i64* %3081
  store i64 %3080, i64* %12, align 8, !tbaa !1240
  %3082 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %3077, %struct.Memory* %1559)
  %3083 = load i64, i64* %13, align 8
  %3084 = add i64 %3083, -2032
  %3085 = load i64, i64* %3, align 8
  store i64 %3084, i64* %10, align 8, !tbaa !1240
  %3086 = add i64 %3083, -3248
  store i64 %3086, i64* %11, align 8, !tbaa !1240
  %3087 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %3087, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3088 = inttoptr i64 %3084 to double*
  store double %3087, double* %3088
  %3089 = add i64 %3083, -4
  %3090 = inttoptr i64 %3089 to i32*
  %3091 = load i32, i32* %3090
  %3092 = zext i32 %3091 to i64
  store i64 %3092, i64* %9, align 8, !tbaa !1240
  %3093 = add i64 %3085, -49488
  %3094 = add i64 %3085, 38
  %3095 = load i64, i64* %12, align 8, !tbaa !1240
  %3096 = add i64 %3095, -8
  %3097 = inttoptr i64 %3096 to i64*
  store i64 %3094, i64* %3097
  store i64 %3096, i64* %12, align 8, !tbaa !1240
  %3098 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %3093, %struct.Memory* %3082)
  %3099 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %3100 = load i64, i64* %13, align 8
  %3101 = add i64 %3100, -2032
  %3102 = add i64 %3100, -3248
  %3103 = inttoptr i64 %3102 to double*
  %3104 = load double, double* %3103
  store double %3104, double* %70, align 1, !tbaa !1246
  store double 0.000000e+00, double* %72, align 1, !tbaa !1246
  %3105 = add i64 %3100, -4
  %3106 = inttoptr i64 %3105 to i32*
  %3107 = load i32, i32* %3106
  %3108 = sext i32 %3107 to i64
  %3109 = shl nsw i64 %3108, 6
  store i64 %3109, i64* %8, align 8, !tbaa !1240
  %3110 = add i64 %3109, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 56)
  %3111 = inttoptr i64 %3110 to double*
  store double %3104, double* %3111
  store i64 %3101, i64* %11, align 8, !tbaa !1240
  %3112 = add i64 %3099, 46058
  %3113 = add i64 %3099, 57
  %3114 = load i64, i64* %12, align 8, !tbaa !1240
  %3115 = add i64 %3114, -8
  %3116 = inttoptr i64 %3115 to i64*
  store i64 %3113, i64* %3116
  store i64 %3115, i64* %12, align 8, !tbaa !1240
  %3117 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %3112, %struct.Memory* %3098)
  %3118 = load i64, i64* %13, align 8
  %3119 = add i64 %3118, -8
  %3120 = load i64, i64* %3, align 8
  %3121 = add i64 %3120, 7
  %3122 = inttoptr i64 %3119 to i32*
  store i32 0, i32* %3122
  %3123 = add i64 %3118, -2032
  br label %block_4144a6

block_41478d:                                     ; preds = %block_41472f, %block_4147ef
  %3124 = phi i64 [ %1420, %block_41472f ], [ %451, %block_4147ef ]
  %3125 = phi %struct.Memory* [ %1416, %block_41472f ], [ %3030, %block_4147ef ]
  %3126 = inttoptr i64 %1418 to i32*
  %3127 = load i32, i32* %3126
  %3128 = add i32 %3127, -5
  %3129 = lshr i32 %3128, 31
  %3130 = trunc i32 %3129 to i8
  %3131 = lshr i32 %3127, 31
  %3132 = xor i32 %3129, %3131
  %3133 = add nuw nsw i32 %3132, %3131
  %3134 = icmp eq i32 %3133, 2
  %3135 = icmp ne i8 %3130, 0
  %3136 = xor i1 %3135, %3134
  %3137 = select i1 %3136, i64 10, i64 117
  %3138 = add i64 %3124, %3137
  %3139 = add i64 %3138, 7
  %3140 = inttoptr i64 %1422 to i32*
  store i32 0, i32* %3140
  br i1 %3136, label %block_41479e.preheader, label %block_414809.preheader

block_41479e.preheader:                           ; preds = %block_41478d
  br label %block_41479e

block_414809.preheader:                           ; preds = %block_41478d
  br label %block_414809

block_413a28:                                     ; preds = %block_4139b2
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %7, align 8, !tbaa !1240
  %3141 = inttoptr i64 %1838 to i32*
  store i32 4, i32* %3141
  %3142 = inttoptr i64 %1839 to i32*
  %3143 = load i32, i32* %3142
  %3144 = sext i32 %3143 to i64
  %3145 = mul nsw i64 %3144, 800
  %3146 = add i64 %3145, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %3147 = inttoptr i64 %1835 to i32*
  %3148 = load i32, i32* %3147
  %3149 = sext i32 %3148 to i64
  %3150 = mul nsw i64 %3149, 40
  %3151 = add i64 %3150, %3146
  %3152 = inttoptr i64 %1838 to i32*
  %3153 = load i32, i32* %3152
  %3154 = sub i32 4, %3153
  %3155 = sext i32 %3154 to i64
  %3156 = shl nsw i64 %3155, 3
  %3157 = add i64 %3151, %3156
  %3158 = inttoptr i64 %3157 to double*
  %3159 = load double, double* %3158
  %3160 = add i64 %3145, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 400)
  %3161 = add i64 %3150, %3160
  %3162 = sext i32 %3153 to i64
  %3163 = shl nsw i64 %3162, 3
  %3164 = add i64 %3163, %3161
  %3165 = inttoptr i64 %3164 to double*
  store double %3159, double* %3165
  %3166 = inttoptr i64 %1839 to i32*
  %3167 = load i32, i32* %3166
  %3168 = sext i32 %3167 to i64
  %3169 = mul nsw i64 %3168, 800
  %3170 = add i64 %3169, ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64)
  %3171 = inttoptr i64 %1835 to i32*
  %3172 = load i32, i32* %3171
  %3173 = sext i32 %3172 to i64
  %3174 = mul nsw i64 %3173, 40
  %3175 = add i64 %3174, %3170
  %3176 = inttoptr i64 %1838 to i32*
  %3177 = load i32, i32* %3176
  %3178 = sub i32 4, %3177
  %3179 = sext i32 %3178 to i64
  %3180 = shl nsw i64 %3179, 3
  %3181 = add i64 %3175, %3180
  %3182 = inttoptr i64 %3181 to double*
  %3183 = load double, double* %3182
  %3184 = add i64 %3169, add (i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64 400)
  %3185 = add i64 %3174, %3184
  %3186 = sext i32 %3177 to i64
  %3187 = shl nsw i64 %3186, 3
  %3188 = add i64 %3187, %3185
  %3189 = inttoptr i64 %3188 to double*
  store double %3183, double* %3189
  %3190 = inttoptr i64 %1839 to i32*
  %3191 = load i32, i32* %3190
  %3192 = sext i32 %3191 to i64
  %3193 = mul nsw i64 %3192, 800
  %3194 = add i64 %3193, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %3195 = inttoptr i64 %1835 to i32*
  %3196 = load i32, i32* %3195
  %3197 = sext i32 %3196 to i64
  %3198 = mul nsw i64 %3197, 40
  %3199 = add i64 %3198, %3194
  %3200 = inttoptr i64 %1838 to i32*
  %3201 = load i32, i32* %3200
  %3202 = sub i32 4, %3201
  %3203 = sext i32 %3202 to i64
  %3204 = shl nsw i64 %3203, 3
  %3205 = add i64 %3199, %3204
  %3206 = inttoptr i64 %3205 to double*
  %3207 = load double, double* %3206
  store double %3207, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3208 = load i64, i64* %7, align 8
  %3209 = add i64 %3193, %3208
  %3210 = add i64 %3209, 400
  %3211 = add i64 %3198, %3210
  %3212 = sext i32 %3201 to i64
  %3213 = shl nsw i64 %3212, 3
  %3214 = add i64 %3213, %3211
  %3215 = inttoptr i64 %3214 to double*
  store double %3207, double* %3215
  %3216 = inttoptr i64 %1835 to i32*
  %3217 = load i32, i32* %3216
  %3218 = add i32 %3217, 1
  %3219 = inttoptr i64 %1835 to i32*
  store i32 %3218, i32* %3219
  %3220 = add i64 %999, -135
  br label %block_4139a1

block_412dde:                                     ; preds = %block_412dd4
  %3221 = add i64 %1881, -12
  %3222 = add i64 %1896, 7
  %3223 = inttoptr i64 %3221 to i32*
  store i32 0, i32* %3223
  br label %block_412de5

block_4144b0:                                     ; preds = %block_4144a6
  %3224 = sext i32 %1929 to i64
  %3225 = shl nsw i64 %3224, 3
  %3226 = add i64 %3225, ptrtoint (%tcpre_type* @tcpre to i64)
  %3227 = inttoptr i64 %3226 to double*
  %3228 = load double, double* %3227
  store double %3228, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3229 = add i64 %3123, %3225
  %3230 = inttoptr i64 %3229 to double*
  store double %3228, double* %3230
  %3231 = inttoptr i64 %3119 to i32*
  %3232 = load i32, i32* %3231
  %3233 = add i32 %3232, 1
  %3234 = inttoptr i64 %3119 to i32*
  store i32 %3233, i32* %3234
  %3235 = add i64 %1940, -10
  br label %block_4144a6

block_413141:                                     ; preds = %block_413107, %block_4130ac
  %3236 = phi i64 [ %2443, %block_413107 ], [ %1878, %block_4130ac ]
  %3237 = phi i64 [ %2436, %block_413107 ], [ %1879, %block_4130ac ]
  %3238 = phi %struct.Memory* [ %1855, %block_413107 ], [ %1855, %block_4130ac ]
  %3239 = add i64 %3237, -12
  %3240 = inttoptr i64 %3239 to i32*
  %3241 = load i32, i32* %3240
  %3242 = add i32 %3241, -4
  %3243 = icmp eq i32 %3242, 0
  %3244 = select i1 %3243, i64 10, i64 68
  %3245 = add i64 %3236, %3244
  br i1 %3243, label %block_41314b, label %block_413185

block_4134ba:                                     ; preds = %block_4134b0
  %3246 = sext i32 %3372 to i64
  %3247 = shl nsw i64 %3246, 3
  %3248 = add i64 %562, %3247
  %3249 = inttoptr i64 %3248 to double*
  %3250 = load double, double* %3249
  store double %3250, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3251 = add i64 %563, %3247
  %3252 = inttoptr i64 %3251 to double*
  store double %3250, double* %3252
  %3253 = add i64 %3383, 33
  %3254 = inttoptr i64 %564 to i32*
  store i32 0, i32* %3254
  br label %block_4134db

block_414813:                                     ; preds = %block_414809
  %3255 = sext i32 %3387 to i64
  %3256 = shl nsw i64 %3255, 3
  %3257 = add i64 %3256, ptrtoint (%tcpre_type* @tcpre to i64)
  %3258 = inttoptr i64 %3257 to double*
  %3259 = load double, double* %3258
  store double %3259, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3260 = mul nsw i64 %3255, 200
  %3261 = add i64 %3260, %1423
  %3262 = inttoptr i64 %3261 to double*
  store double %3259, double* %3262
  %3263 = inttoptr i64 %1422 to i32*
  %3264 = load i32, i32* %3263
  %3265 = add i32 %3264, 1
  %3266 = inttoptr i64 %1422 to i32*
  store i32 %3265, i32* %3266
  %3267 = add i64 %3398, -10
  br label %block_414809

block_4146cb:                                     ; preds = %block_4146c4, %block_4146d5
  %3268 = phi i64 [ %2040, %block_4146c4 ], [ %1552, %block_4146d5 ]
  %3269 = phi %struct.Memory* [ %3423, %block_4146c4 ], [ %3269, %block_4146d5 ]
  %3270 = inttoptr i64 %2485 to i32*
  %3271 = load i32, i32* %3270
  %3272 = add i32 %3271, -5
  %3273 = lshr i32 %3272, 31
  %3274 = lshr i32 %3271, 31
  %3275 = xor i32 %3273, %3274
  %3276 = add nuw nsw i32 %3275, %3274
  %3277 = icmp eq i32 %3276, 2
  %3278 = icmp ne i32 %3273, 0
  %3279 = xor i1 %3278, %3277
  %3280 = select i1 %3279, i64 10, i64 81
  %3281 = add i64 %3268, %3280
  %3282 = inttoptr i64 %2481 to i32*
  %3283 = load i32, i32* %3282
  br i1 %3279, label %block_4146d5, label %block_41471c

block_413078:                                     ; preds = %block_412df5
  %3284 = add i64 %433, -12
  %3285 = inttoptr i64 %3284 to i32*
  %3286 = load i32, i32* %3285
  %3287 = add i32 %3286, 1
  %3288 = inttoptr i64 %3284 to i32*
  store i32 %3287, i32* %3288
  %3289 = add i64 %448, -659
  br label %block_412de5

block_413e5c:                                     ; preds = %block_413e52
  %3290 = inttoptr i64 %2980 to i32*
  %3291 = load i32, i32* %3290
  %3292 = sext i32 %3291 to i64
  %3293 = mul nsw i64 %3292, 800
  %3294 = add i64 %3293, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %3295 = inttoptr i64 %2975 to i32*
  %3296 = load i32, i32* %3295
  %3297 = sub i32 4, %3296
  %3298 = sext i32 %3297 to i64
  %3299 = mul nsw i64 %3298, 40
  %3300 = add i64 %3299, %3294
  %3301 = sext i32 %2796 to i64
  %3302 = shl nsw i64 %3301, 3
  %3303 = add i64 %3302, %3300
  %3304 = inttoptr i64 %3303 to double*
  %3305 = load double, double* %3304
  %3306 = add i64 %3293, add (i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64 200)
  %3307 = sext i32 %3296 to i64
  %3308 = mul nsw i64 %3307, 40
  %3309 = add i64 %3308, %3306
  %3310 = add i64 %3302, %3309
  %3311 = inttoptr i64 %3310 to double*
  store double %3305, double* %3311
  %3312 = inttoptr i64 %2980 to i32*
  %3313 = load i32, i32* %3312
  %3314 = sext i32 %3313 to i64
  %3315 = mul nsw i64 %3314, 800
  %3316 = add i64 %3315, ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64)
  %3317 = inttoptr i64 %2975 to i32*
  %3318 = load i32, i32* %3317
  %3319 = sub i32 4, %3318
  %3320 = sext i32 %3319 to i64
  %3321 = mul nsw i64 %3320, 40
  %3322 = add i64 %3321, %3316
  %3323 = inttoptr i64 %2977 to i32*
  %3324 = load i32, i32* %3323
  %3325 = sext i32 %3324 to i64
  %3326 = shl nsw i64 %3325, 3
  %3327 = add i64 %3326, %3322
  %3328 = inttoptr i64 %3327 to double*
  %3329 = load double, double* %3328
  %3330 = add i64 %3315, add (i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64 200)
  %3331 = sext i32 %3318 to i64
  %3332 = mul nsw i64 %3331, 40
  %3333 = add i64 %3332, %3330
  %3334 = add i64 %3326, %3333
  %3335 = inttoptr i64 %3334 to double*
  store double %3329, double* %3335
  %3336 = inttoptr i64 %2980 to i32*
  %3337 = load i32, i32* %3336
  %3338 = sext i32 %3337 to i64
  %3339 = mul nsw i64 %3338, 800
  %3340 = add i64 %3339, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %3341 = inttoptr i64 %2975 to i32*
  %3342 = load i32, i32* %3341
  %3343 = sub i32 4, %3342
  %3344 = sext i32 %3343 to i64
  %3345 = mul nsw i64 %3344, 40
  %3346 = add i64 %3345, %3340
  %3347 = inttoptr i64 %2977 to i32*
  %3348 = load i32, i32* %3347
  %3349 = sext i32 %3348 to i64
  %3350 = shl nsw i64 %3349, 3
  %3351 = add i64 %3350, %3346
  %3352 = inttoptr i64 %3351 to double*
  %3353 = load double, double* %3352
  store double %3353, double* %59, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %3354 = add i64 %3339, add (i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64 200)
  %3355 = sext i32 %3342 to i64
  %3356 = mul nsw i64 %3355, 40
  %3357 = add i64 %3356, %3354
  %3358 = add i64 %3350, %3357
  %3359 = inttoptr i64 %3358 to double*
  store double %3353, double* %3359
  %3360 = inttoptr i64 %2977 to i32*
  %3361 = load i32, i32* %3360
  %3362 = add i32 %3361, 1
  %3363 = inttoptr i64 %2977 to i32*
  store i32 %3362, i32* %3363
  %3364 = add i64 %2806, -10
  br label %block_413e52

block_412cc0:                                     ; preds = %block_412c5a
  %3365 = add i32 %3028, 1
  %3366 = zext i32 %3365 to i64
  store i64 %3366, i64* %7, align 8, !tbaa !1240
  %3367 = inttoptr i64 %66 to i32*
  store i32 %3365, i32* %3367
  %3368 = add i64 %3026, -119
  br label %block_412c49

block_4134b0:                                     ; preds = %block_413528, %block_4133e4
  %3369 = phi i64 [ %560, %block_4133e4 ], [ %3482, %block_413528 ]
  %3370 = phi %struct.Memory* [ %486, %block_4133e4 ], [ %1434, %block_413528 ]
  %3371 = inttoptr i64 %559 to i32*
  %3372 = load i32, i32* %3371
  %3373 = add i32 %3372, -5
  %3374 = lshr i32 %3373, 31
  %3375 = trunc i32 %3374 to i8
  %3376 = lshr i32 %3372, 31
  %3377 = xor i32 %3374, %3376
  %3378 = add nuw nsw i32 %3377, %3376
  %3379 = icmp eq i32 %3378, 2
  %3380 = icmp ne i8 %3375, 0
  %3381 = xor i1 %3380, %3379
  %3382 = select i1 %3381, i64 10, i64 139
  %3383 = add i64 %3369, %3382
  br i1 %3381, label %block_4134ba, label %block_41353b

block_414809:                                     ; preds = %block_414813, %block_414809.preheader
  %3384 = phi i64 [ %3267, %block_414813 ], [ %3139, %block_414809.preheader ]
  %3385 = phi %struct.Memory* [ %3385, %block_414813 ], [ %3125, %block_414809.preheader ]
  %3386 = inttoptr i64 %1422 to i32*
  %3387 = load i32, i32* %3386
  %3388 = add i32 %3387, -5
  %3389 = lshr i32 %3388, 31
  %3390 = trunc i32 %3389 to i8
  %3391 = lshr i32 %3387, 31
  %3392 = xor i32 %3389, %3391
  %3393 = add nuw nsw i32 %3392, %3391
  %3394 = icmp eq i32 %3393, 2
  %3395 = icmp ne i8 %3390, 0
  %3396 = xor i1 %3395, %3394
  %3397 = select i1 %3396, i64 10, i64 62
  %3398 = add i64 %3384, %3397
  br i1 %3396, label %block_414813, label %block_414847

block_4142c2:                                     ; preds = %block_4140db
  %3399 = inttoptr i64 %2363 to i32*
  store i32 4, i32* %3399
  %3400 = load i64, i64* %13, align 8
  %3401 = add i64 %3400, -8
  %3402 = add i64 %1238, 14
  %3403 = inttoptr i64 %3401 to i32*
  store i32 1, i32* %3403
  %3404 = add i64 %3400, -4
  %3405 = add i64 %3400, -12
  br label %block_4142d0

block_4148b6:                                     ; preds = %block_4148af, %block_4148c0
  %3406 = phi i64 [ %2945, %block_4148af ], [ %2073, %block_4148c0 ]
  %3407 = phi %struct.Memory* [ %1972, %block_4148af ], [ %3407, %block_4148c0 ]
  %3408 = inttoptr i64 %2877 to i32*
  %3409 = load i32, i32* %3408
  %3410 = add i32 %3409, -5
  %3411 = lshr i32 %3410, 31
  %3412 = lshr i32 %3409, 31
  %3413 = xor i32 %3411, %3412
  %3414 = add nuw nsw i32 %3413, %3412
  %3415 = icmp eq i32 %3414, 2
  %3416 = icmp ne i32 %3411, 0
  %3417 = xor i1 %3416, %3415
  %3418 = select i1 %3417, i64 10, i64 130
  %3419 = add i64 %3406, %3418
  %3420 = inttoptr i64 %2873 to i32*
  %3421 = load i32, i32* %3420
  br i1 %3417, label %block_4148c0, label %block_414938

block_4146ba:                                     ; preds = %block_41465c, %block_41471c
  %3422 = phi i64 [ %2483, %block_41465c ], [ %1289, %block_41471c ]
  %3423 = phi %struct.Memory* [ %2479, %block_41465c ], [ %3269, %block_41471c ]
  %3424 = inttoptr i64 %2481 to i32*
  %3425 = load i32, i32* %3424
  %3426 = add i32 %3425, -5
  %3427 = lshr i32 %3426, 31
  %3428 = trunc i32 %3427 to i8
  %3429 = lshr i32 %3425, 31
  %3430 = xor i32 %3427, %3429
  %3431 = add nuw nsw i32 %3430, %3429
  %3432 = icmp eq i32 %3431, 2
  %3433 = icmp ne i8 %3428, 0
  %3434 = xor i1 %3433, %3432
  %3435 = select i1 %3434, i64 10, i64 117
  %3436 = add i64 %3422, %3435
  br i1 %3434, label %block_4146c4, label %block_41472f

block_414587:                                     ; preds = %block_414532
  store i64 %2147, i64* %10, align 8, !tbaa !1240
  %3437 = add i64 %2142, -3248
  store i64 %3437, i64* %11, align 8, !tbaa !1240
  %3438 = add i64 %2142, -4
  %3439 = inttoptr i64 %3438 to i32*
  %3440 = load i32, i32* %3439
  %3441 = zext i32 %3440 to i64
  store i64 %3441, i64* %9, align 8, !tbaa !1240
  %3442 = add i64 %2501, -49815
  %3443 = add i64 %2501, 22
  %3444 = load i64, i64* %12, align 8, !tbaa !1240
  %3445 = add i64 %3444, -8
  %3446 = inttoptr i64 %3445 to i64*
  store i64 %3443, i64* %3446
  store i64 %3445, i64* %12, align 8, !tbaa !1240
  %3447 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %3442, %struct.Memory* %2488)
  %3448 = load i64, i64* %3, align 8
  store i64 2, i64* %11, align 8, !tbaa !1240
  %3449 = load i64, i64* %13, align 8
  %3450 = add i64 %3449, -3248
  store i64 %3450, i64* %9, align 8, !tbaa !1240
  %3451 = add i64 %3449, -4
  %3452 = inttoptr i64 %3451 to i32*
  %3453 = load i32, i32* %3452
  %3454 = sext i32 %3453 to i64
  %3455 = shl nsw i64 %3454, 6
  %3456 = add i64 %3455, add (i64 ptrtoint (%pcmor_cor_type* @pcmor_cor to i64), i64 8)
  store i64 %3456, i64* %10, align 8, !tbaa !1240
  %3457 = add i64 %3448, 33811
  %3458 = add i64 %3448, 42
  %3459 = load i64, i64* %12, align 8, !tbaa !1240
  %3460 = add i64 %3459, -8
  %3461 = inttoptr i64 %3460 to i64*
  store i64 %3458, i64* %3461
  store i64 %3460, i64* %12, align 8, !tbaa !1240
  %3462 = tail call %struct.Memory* @sub_41c9b0_transfb_cor_e(%struct.State* nonnull %0, i64 %3457, %struct.Memory* %3447)
  %3463 = load i64, i64* %3, align 8
  store i64 125, i64* %10, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %3464 = load i64, i64* %13, align 8
  %3465 = add i64 %3464, -2032
  store i64 %3465, i64* %11, align 8, !tbaa !1240
  %3466 = add i64 %3463, 45705
  %3467 = add i64 %3463, 23
  %3468 = load i64, i64* %12, align 8, !tbaa !1240
  %3469 = add i64 %3468, -8
  %3470 = inttoptr i64 %3469 to i64*
  store i64 %3467, i64* %3470
  store i64 %3469, i64* %12, align 8, !tbaa !1240
  %3471 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %3466, %struct.Memory* %3462)
  %3472 = load i64, i64* %13, align 8
  %3473 = add i64 %3472, -8
  %3474 = load i64, i64* %3, align 8
  %3475 = add i64 %3474, 7
  %3476 = inttoptr i64 %3473 to i32*
  store i32 0, i32* %3476
  %3477 = add i64 %3472, -2032
  br label %block_4145e5

block_413528:                                     ; preds = %block_4134db
  %3478 = inttoptr i64 %559 to i32*
  %3479 = load i32, i32* %3478
  %3480 = add i32 %3479, 1
  %3481 = inttoptr i64 %559 to i32*
  store i32 %3480, i32* %3481
  %3482 = add i64 %1446, -120
  br label %block_4134b0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41ff10_facev(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41ff10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  %16 = add i64 %13, -16
  %17 = load i64, i64* %8, align 8
  %18 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %18
  %19 = add i64 %13, -20
  %20 = load i32, i32* %5, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %13, -32
  %23 = bitcast %union.VectorReg* %11 to double*
  %24 = load double, double* %23, align 1
  %25 = inttoptr i64 %22 to double*
  store double %24, double* %25
  %26 = add i64 %13, -36
  %27 = inttoptr i64 %26 to i32*
  store i32 1, i32* %27
  %28 = add i64 %13, -44
  %29 = inttoptr i64 %28 to i32*
  store i32 1, i32* %29
  %30 = add i64 %13, -52
  %31 = inttoptr i64 %30 to i32*
  store i32 1, i32* %31
  %32 = add i64 %13, -40
  %33 = inttoptr i64 %32 to i32*
  store i32 5, i32* %33
  %34 = add i64 %13, -48
  %35 = inttoptr i64 %34 to i32*
  store i32 5, i32* %35
  %36 = add i64 %13, -56
  %37 = inttoptr i64 %36 to i32*
  store i32 5, i32* %37
  %38 = add i64 %13, -20
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = icmp eq i32 %40, 0
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br i1 %44, label %block_41ff54, label %block_41ff5b

block_41ff7d:                                     ; preds = %block_41ff76, %block_41ff6c
  %48 = phi %struct.Memory* [ %53, %block_41ff6c ], [ %53, %block_41ff76 ]
  %49 = inttoptr i64 %38 to i32*
  %50 = load i32, i32* %49
  %51 = add i32 %50, -3
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %block_41ff87, label %block_41ff8e

block_41ff6c:                                     ; preds = %block_41ff65, %block_41ff5b
  %53 = phi %struct.Memory* [ %58, %block_41ff5b ], [ %58, %block_41ff65 ]
  %54 = inttoptr i64 %38 to i32*
  %55 = load i32, i32* %54
  %56 = add i32 %55, -2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %block_41ff76, label %block_41ff7d

block_41ff5b:                                     ; preds = %block_41ff54, %block_41ff10
  %58 = phi %struct.Memory* [ %2, %block_41ff10 ], [ %2, %block_41ff54 ]
  %59 = inttoptr i64 %38 to i32*
  %60 = load i32, i32* %59
  %61 = add i32 %60, -1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %block_41ff65, label %block_41ff6c

block_41ffce:                                     ; preds = %block_420028, %block_41ffc5
  %63 = phi i32 [ 1, %block_420028 ], [ -1, %block_41ffc5 ]
  %64 = phi i32 [ %160, %block_420028 ], [ %106, %block_41ffc5 ]
  %65 = phi %struct.Memory* [ %141, %block_420028 ], [ %123, %block_41ffc5 ]
  %66 = add i32 %64, %63
  %67 = inttoptr i64 %118 to i32*
  store i32 %66, i32* %67
  %68 = inttoptr i64 %118 to i32*
  %69 = load i32, i32* %68
  %70 = inttoptr i64 %34 to i32*
  %71 = load i32, i32* %70
  %72 = sub i32 %69, %71
  %73 = lshr i32 %72, 31
  %74 = lshr i32 %69, 31
  %75 = lshr i32 %71, 31
  %76 = xor i32 %75, %74
  %77 = xor i32 %73, %74
  %78 = add nuw nsw i32 %77, %76
  %79 = icmp eq i32 %78, 2
  %80 = icmp ne i32 %73, 0
  %81 = xor i1 %80, %79
  br i1 %81, label %block_41ffda, label %block_42003b

block_41ffda:                                     ; preds = %block_41ffce
  %82 = inttoptr i64 %30 to i32*
  %83 = load i32, i32* %82
  br label %block_41ffe3

block_42004e:                                     ; preds = %block_41ffb9
  %84 = zext i32 %125 to i64
  store i64 %84, i64* %6, align 8, !tbaa !1240
  %85 = icmp ult i32 %125, %127
  %86 = zext i1 %85 to i8
  %87 = and i32 %128, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #11
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  %92 = xor i32 %127, %125
  %93 = xor i32 %92, %128
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = icmp eq i32 %128, 0
  %98 = zext i1 %97 to i8
  %99 = zext i1 %136 to i8
  store i8 %86, i8* %41, align 1, !tbaa !1248
  store i8 %91, i8* %42, align 1, !tbaa !1261
  store i8 %96, i8* %43, align 1, !tbaa !1262
  store i8 %98, i8* %45, align 1, !tbaa !1263
  store i8 %130, i8* %46, align 1, !tbaa !1264
  store i8 %99, i8* %47, align 1, !tbaa !1265
  %100 = inttoptr i64 %14 to i64*
  %101 = load i64, i64* %100
  store i64 %101, i64* %10, align 8, !tbaa !1240
  %102 = inttoptr i64 %13 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %3, align 8, !tbaa !1240
  %104 = add i64 %13, 8
  store i64 %104, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %123

block_41ffc5:                                     ; preds = %block_41ffb9
  %105 = inttoptr i64 %28 to i32*
  %106 = load i32, i32* %105
  br label %block_41ffce

block_42003b:                                     ; preds = %block_41ffce
  %107 = inttoptr i64 %116 to i32*
  %108 = load i32, i32* %107
  %109 = add i32 %108, 1
  %110 = inttoptr i64 %116 to i32*
  store i32 %109, i32* %110
  br label %block_41ffb9

block_41ff76:                                     ; preds = %block_41ff6c
  %111 = inttoptr i64 %28 to i32*
  store i32 5, i32* %111
  br label %block_41ff7d

block_41ffb0:                                     ; preds = %block_41ff9f, %block_41ffa9
  %112 = phi %struct.Memory* [ %162, %block_41ff9f ], [ %162, %block_41ffa9 ]
  %113 = inttoptr i64 %26 to i32*
  %114 = load i32, i32* %113
  %115 = add i32 %114, -1
  %116 = add i64 %13, -60
  %117 = inttoptr i64 %116 to i32*
  store i32 %115, i32* %117
  %118 = add i64 %13, -64
  %119 = add i64 %13, -68
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %121 = bitcast i64* %120 to double*
  %122 = add i64 %13, -16
  br label %block_41ffb9

block_41ffb9:                                     ; preds = %block_41ffb0, %block_42003b
  %123 = phi %struct.Memory* [ %112, %block_41ffb0 ], [ %65, %block_42003b ]
  %124 = inttoptr i64 %116 to i32*
  %125 = load i32, i32* %124
  %126 = inttoptr i64 %32 to i32*
  %127 = load i32, i32* %126
  %128 = sub i32 %125, %127
  %129 = lshr i32 %128, 31
  %130 = trunc i32 %129 to i8
  %131 = lshr i32 %125, 31
  %132 = lshr i32 %127, 31
  %133 = xor i32 %132, %131
  %134 = xor i32 %129, %131
  %135 = add nuw nsw i32 %134, %133
  %136 = icmp eq i32 %135, 2
  %137 = icmp ne i8 %130, 0
  %138 = xor i1 %137, %136
  br i1 %138, label %block_41ffc5, label %block_42004e

block_41ffe3:                                     ; preds = %block_41ffef, %block_41ffda
  %139 = phi i32 [ 1, %block_41ffef ], [ -1, %block_41ffda ]
  %140 = phi i32 [ %186, %block_41ffef ], [ %83, %block_41ffda ]
  %141 = phi %struct.Memory* [ %141, %block_41ffef ], [ %65, %block_41ffda ]
  %142 = add i32 %140, %139
  %143 = inttoptr i64 %119 to i32*
  store i32 %142, i32* %143
  %144 = inttoptr i64 %119 to i32*
  %145 = load i32, i32* %144
  %146 = inttoptr i64 %36 to i32*
  %147 = load i32, i32* %146
  %148 = sub i32 %145, %147
  %149 = lshr i32 %148, 31
  %150 = lshr i32 %145, 31
  %151 = lshr i32 %147, 31
  %152 = xor i32 %151, %150
  %153 = xor i32 %149, %150
  %154 = add nuw nsw i32 %153, %152
  %155 = icmp eq i32 %154, 2
  %156 = icmp ne i32 %149, 0
  %157 = xor i1 %156, %155
  br i1 %157, label %block_41ffef, label %block_420028

block_41ffa9:                                     ; preds = %block_41ff9f
  %158 = inttoptr i64 %36 to i32*
  store i32 1, i32* %158
  br label %block_41ffb0

block_420028:                                     ; preds = %block_41ffe3
  %159 = inttoptr i64 %118 to i32*
  %160 = load i32, i32* %159
  br label %block_41ffce

block_41ff65:                                     ; preds = %block_41ff5b
  %161 = inttoptr i64 %32 to i32*
  store i32 1, i32* %161
  br label %block_41ff6c

block_41ff9f:                                     ; preds = %block_41ff8e, %block_41ff98
  %162 = phi %struct.Memory* [ %189, %block_41ff8e ], [ %189, %block_41ff98 ]
  %163 = inttoptr i64 %38 to i32*
  %164 = load i32, i32* %163
  %165 = add i32 %164, -5
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %block_41ffa9, label %block_41ffb0

block_41ffef:                                     ; preds = %block_41ffe3
  %167 = inttoptr i64 %22 to double*
  %168 = load double, double* %167
  store double %168, double* %23, align 1, !tbaa !1246
  store double 0.000000e+00, double* %121, align 1, !tbaa !1246
  %169 = inttoptr i64 %122 to i64*
  %170 = load i64, i64* %169
  %171 = sext i32 %145 to i64
  %172 = mul nsw i64 %171, 200
  %173 = add i64 %172, %170
  %174 = inttoptr i64 %118 to i32*
  %175 = load i32, i32* %174
  %176 = sext i32 %175 to i64
  %177 = mul nsw i64 %176, 40
  %178 = add i64 %177, %173
  %179 = inttoptr i64 %116 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  store i64 %181, i64* %7, align 8, !tbaa !1240
  %182 = shl nsw i64 %181, 3
  %183 = add i64 %182, %178
  %184 = inttoptr i64 %183 to double*
  store double %168, double* %184
  %185 = inttoptr i64 %119 to i32*
  %186 = load i32, i32* %185
  br label %block_41ffe3

block_41ff98:                                     ; preds = %block_41ff8e
  %187 = inttoptr i64 %30 to i32*
  store i32 5, i32* %187
  br label %block_41ff9f

block_41ff54:                                     ; preds = %block_41ff10
  %188 = inttoptr i64 %26 to i32*
  store i32 5, i32* %188
  br label %block_41ff5b

block_41ff8e:                                     ; preds = %block_41ff87, %block_41ff7d
  %189 = phi %struct.Memory* [ %48, %block_41ff7d ], [ %48, %block_41ff87 ]
  %190 = inttoptr i64 %38 to i32*
  %191 = load i32, i32* %190
  %192 = add i32 %191, -4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %block_41ff98, label %block_41ff9f

block_41ff87:                                     ; preds = %block_41ff7d
  %194 = inttoptr i64 %34 to i32*
  store i32 1, i32* %194
  br label %block_41ff8e
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4108f0_mor_edge(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4108f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = load i64, i64* %14, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  %20 = add i64 %17, -12
  %21 = load i32, i32* %9, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %17, -16
  %24 = load i32, i32* %7, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %17, -20
  %27 = load i32, i32* %5, align 4
  %28 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %28
  %29 = add i64 %17, -32
  %30 = load i64, i64* %11, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %17, -12
  %33 = inttoptr i64 %32 to i32*
  %34 = load i32, i32* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %38 = icmp eq i32 %34, 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = lshr i32 %34, 31
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = select i1 %38, i64 27, i64 142
  %44 = add i64 %43, %1
  br i1 %38, label %block_41090b, label %block_41097e

block_410aff:                                     ; preds = %block_4109f6, %block_410afa
  %45 = phi %struct.Memory* [ %241, %block_4109f6 ], [ %123, %block_410afa ]
  br label %block_410b04

block_41097e:                                     ; preds = %block_4108f0
  %46 = add i32 %34, -1
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, i64 10, i64 125
  %49 = add i64 %44, %48
  br i1 %47, label %block_410988, label %block_4109fb

block_4109fb:                                     ; preds = %block_41097e
  %50 = add i32 %34, -2
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, i64 10, i64 125
  %53 = add i64 %49, %52
  br i1 %51, label %block_410a05, label %block_410a78

block_410a78:                                     ; preds = %block_4109fb
  %54 = add i32 %34, -3
  store i8 0, i8* %35, align 1, !tbaa !1248
  %55 = and i32 %54, 255
  %56 = tail call i32 @llvm.ctpop.i32(i32 %55) #11
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  store i8 %59, i8* %36, align 1, !tbaa !1261
  %60 = xor i32 %54, %34
  %61 = lshr i32 %60, 4
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  store i8 %63, i8* %37, align 1, !tbaa !1262
  %64 = icmp eq i32 %54, 0
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %39, align 1, !tbaa !1263
  %66 = lshr i32 %54, 31
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %41, align 1, !tbaa !1264
  %68 = xor i32 %66, %40
  %69 = add nuw nsw i32 %68, %40
  %70 = icmp eq i32 %69, 2
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %42, align 1, !tbaa !1265
  %72 = select i1 %64, i64 10, i64 125
  %73 = add i64 %53, %72
  br i1 %64, label %block_410a82, label %block_410af5

block_410af5:                                     ; preds = %block_410af0, %block_410a78
  %74 = phi %struct.Memory* [ %2, %block_410a78 ], [ %332, %block_410af0 ]
  br label %block_410afa

block_410af0:                                     ; preds = %block_410a90
  %75 = icmp ult i32 %334, 4
  %76 = zext i1 %75 to i8
  %77 = and i32 %335, 255
  %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #11
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = xor i32 %335, %334
  %83 = lshr i32 %82, 4
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = icmp eq i32 %335, 0
  %87 = zext i1 %86 to i8
  %88 = zext i1 %341 to i8
  store i8 %76, i8* %35, align 1, !tbaa !1248
  store i8 %81, i8* %36, align 1, !tbaa !1261
  store i8 %85, i8* %37, align 1, !tbaa !1262
  store i8 %87, i8* %39, align 1, !tbaa !1263
  store i8 %337, i8* %41, align 1, !tbaa !1264
  store i8 %88, i8* %42, align 1, !tbaa !1265
  br label %block_410af5

block_410923:                                     ; preds = %block_410919
  %89 = inttoptr i64 %29 to i64*
  %90 = load i64, i64* %89
  %91 = add i32 %299, -1
  %92 = sext i32 %91 to i64
  store i64 %92, i64* %13, align 8, !tbaa !1240
  %93 = shl nsw i64 %92, 2
  %94 = add i64 %90, %93
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = zext i32 %96 to i64
  store i64 %97, i64* %12, align 8, !tbaa !1240
  %98 = inttoptr i64 %26 to i32*
  %99 = load i32, i32* %98
  %100 = sext i32 %99 to i64
  %101 = mul nsw i64 %100, 2400
  %102 = add i64 %101, ptrtoint (%idmo_type* @idmo to i64)
  %103 = inttoptr i64 %289 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %105, 400
  %107 = add i64 %106, %102
  %108 = inttoptr i64 %284 to i32*
  %109 = load i32, i32* %108
  %110 = sext i32 %109 to i64
  %111 = mul nsw i64 %110, 20
  %112 = add i64 %111, %107
  %113 = sext i32 %299 to i64
  store i64 %113, i64* %11, align 8, !tbaa !1240
  %114 = shl nsw i64 %113, 2
  %115 = add i64 %114, %112
  %116 = inttoptr i64 %115 to i32*
  store i32 %96, i32* %116
  %117 = inttoptr i64 %286 to i32*
  %118 = load i32, i32* %117
  %119 = add i32 %118, 1
  %120 = zext i32 %119 to i64
  store i64 %120, i64* %10, align 8, !tbaa !1240
  %121 = inttoptr i64 %286 to i32*
  store i32 %119, i32* %121
  %122 = add i64 %310, -10
  br label %block_410919

block_410afa:                                     ; preds = %block_410a73, %block_410af5
  %123 = phi %struct.Memory* [ %270, %block_410a73 ], [ %74, %block_410af5 ]
  br label %block_410aff

block_4109a0:                                     ; preds = %block_410996
  %124 = inttoptr i64 %29 to i64*
  %125 = load i64, i64* %124
  %126 = add i32 %243, -1
  %127 = sext i32 %126 to i64
  store i64 %127, i64* %13, align 8, !tbaa !1240
  %128 = shl nsw i64 %127, 2
  %129 = add i64 %125, %128
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %12, align 8, !tbaa !1240
  %133 = inttoptr i64 %26 to i32*
  %134 = load i32, i32* %133
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, 2400
  %137 = add i64 %136, ptrtoint (%idmo_type* @idmo to i64)
  %138 = inttoptr i64 %295 to i32*
  %139 = load i32, i32* %138
  %140 = sext i32 %139 to i64
  %141 = mul nsw i64 %140, 400
  %142 = add i64 %141, %137
  %143 = sext i32 %243 to i64
  %144 = mul nsw i64 %143, 20
  %145 = add i64 %144, %142
  %146 = inttoptr i64 %290 to i32*
  %147 = load i32, i32* %146
  %148 = sext i32 %147 to i64
  store i64 %148, i64* %11, align 8, !tbaa !1240
  %149 = shl nsw i64 %148, 2
  %150 = add i64 %149, %145
  %151 = inttoptr i64 %150 to i32*
  store i32 %131, i32* %151
  %152 = inttoptr i64 %292 to i32*
  %153 = load i32, i32* %152
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %10, align 8, !tbaa !1240
  %156 = inttoptr i64 %292 to i32*
  store i32 %154, i32* %156
  %157 = add i64 %254, -10
  br label %block_410996

block_410a1d:                                     ; preds = %block_410a13
  %158 = inttoptr i64 %29 to i64*
  %159 = load i64, i64* %158
  %160 = add i32 %272, -1
  %161 = sext i32 %160 to i64
  store i64 %161, i64* %13, align 8, !tbaa !1240
  %162 = shl nsw i64 %161, 2
  %163 = add i64 %159, %162
  %164 = inttoptr i64 %163 to i32*
  %165 = load i32, i32* %164
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %12, align 8, !tbaa !1240
  %167 = inttoptr i64 %26 to i32*
  %168 = load i32, i32* %167
  %169 = sext i32 %168 to i64
  %170 = mul nsw i64 %169, 2400
  %171 = add i64 %170, ptrtoint (%idmo_type* @idmo to i64)
  %172 = inttoptr i64 %316 to i32*
  %173 = load i32, i32* %172
  %174 = sext i32 %173 to i64
  %175 = mul nsw i64 %174, 400
  %176 = add i64 %175, %171
  %177 = inttoptr i64 %311 to i32*
  %178 = load i32, i32* %177
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %179, 20
  %181 = add i64 %180, %176
  %182 = sext i32 %272 to i64
  store i64 %182, i64* %11, align 8, !tbaa !1240
  %183 = shl nsw i64 %182, 2
  %184 = add i64 %183, %181
  %185 = inttoptr i64 %184 to i32*
  store i32 %165, i32* %185
  %186 = inttoptr i64 %313 to i32*
  %187 = load i32, i32* %186
  %188 = add i32 %187, 1
  %189 = zext i32 %188 to i64
  store i64 %189, i64* %10, align 8, !tbaa !1240
  %190 = inttoptr i64 %313 to i32*
  store i32 %188, i32* %190
  %191 = add i64 %283, -10
  br label %block_410a13

block_410a9a:                                     ; preds = %block_410a90
  %192 = inttoptr i64 %29 to i64*
  %193 = load i64, i64* %192
  %194 = add i32 %334, -1
  %195 = sext i32 %194 to i64
  store i64 %195, i64* %13, align 8, !tbaa !1240
  %196 = shl nsw i64 %195, 2
  %197 = add i64 %193, %196
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %12, align 8, !tbaa !1240
  %201 = inttoptr i64 %26 to i32*
  %202 = load i32, i32* %201
  %203 = sext i32 %202 to i64
  %204 = mul nsw i64 %203, 2400
  %205 = add i64 %204, ptrtoint (%idmo_type* @idmo to i64)
  %206 = inttoptr i64 %357 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %207 to i64
  %209 = mul nsw i64 %208, 400
  %210 = add i64 %209, %205
  %211 = sext i32 %334 to i64
  %212 = mul nsw i64 %211, 20
  %213 = add i64 %212, %210
  %214 = inttoptr i64 %352 to i32*
  %215 = load i32, i32* %214
  %216 = sext i32 %215 to i64
  store i64 %216, i64* %11, align 8, !tbaa !1240
  %217 = shl nsw i64 %216, 2
  %218 = add i64 %217, %213
  %219 = inttoptr i64 %218 to i32*
  store i32 %199, i32* %219
  %220 = inttoptr i64 %354 to i32*
  %221 = load i32, i32* %220
  %222 = add i32 %221, 1
  %223 = zext i32 %222 to i64
  store i64 %223, i64* %10, align 8, !tbaa !1240
  %224 = inttoptr i64 %354 to i32*
  store i32 %222, i32* %224
  %225 = add i64 %345, -10
  br label %block_410a90

block_410979:                                     ; preds = %block_410919
  %226 = icmp ult i32 %299, 4
  %227 = zext i1 %226 to i8
  %228 = and i32 %300, 255
  %229 = tail call i32 @llvm.ctpop.i32(i32 %228) #11
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  %232 = xor i8 %231, 1
  %233 = xor i32 %300, %299
  %234 = lshr i32 %233, 4
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = icmp eq i32 %300, 0
  %238 = zext i1 %237 to i8
  %239 = zext i1 %306 to i8
  store i8 %227, i8* %35, align 1, !tbaa !1248
  store i8 %232, i8* %36, align 1, !tbaa !1261
  store i8 %236, i8* %37, align 1, !tbaa !1262
  store i8 %238, i8* %39, align 1, !tbaa !1263
  store i8 %302, i8* %41, align 1, !tbaa !1264
  store i8 %239, i8* %42, align 1, !tbaa !1265
  br label %block_410b04

block_410996:                                     ; preds = %block_410988, %block_4109a0
  %240 = phi i64 [ %293, %block_410988 ], [ %157, %block_4109a0 ]
  %241 = phi %struct.Memory* [ %2, %block_410988 ], [ %241, %block_4109a0 ]
  %242 = inttoptr i64 %292 to i32*
  %243 = load i32, i32* %242
  %244 = add i32 %243, -4
  %245 = lshr i32 %244, 31
  %246 = trunc i32 %245 to i8
  %247 = lshr i32 %243, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %247
  %250 = icmp eq i32 %249, 2
  %251 = icmp ne i8 %246, 0
  %252 = xor i1 %251, %250
  %253 = select i1 %252, i64 10, i64 96
  %254 = add i64 %240, %253
  br i1 %252, label %block_4109a0, label %block_4109f6

block_4109f6:                                     ; preds = %block_410996
  %255 = icmp ult i32 %243, 4
  %256 = zext i1 %255 to i8
  %257 = and i32 %244, 255
  %258 = tail call i32 @llvm.ctpop.i32(i32 %257) #11
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = xor i32 %244, %243
  %263 = lshr i32 %262, 4
  %264 = trunc i32 %263 to i8
  %265 = and i8 %264, 1
  %266 = icmp eq i32 %244, 0
  %267 = zext i1 %266 to i8
  %268 = zext i1 %250 to i8
  store i8 %256, i8* %35, align 1, !tbaa !1248
  store i8 %261, i8* %36, align 1, !tbaa !1261
  store i8 %265, i8* %37, align 1, !tbaa !1262
  store i8 %267, i8* %39, align 1, !tbaa !1263
  store i8 %246, i8* %41, align 1, !tbaa !1264
  store i8 %268, i8* %42, align 1, !tbaa !1265
  br label %block_410aff

block_410a13:                                     ; preds = %block_410a05, %block_410a1d
  %269 = phi i64 [ %314, %block_410a05 ], [ %191, %block_410a1d ]
  %270 = phi %struct.Memory* [ %2, %block_410a05 ], [ %270, %block_410a1d ]
  %271 = inttoptr i64 %313 to i32*
  %272 = load i32, i32* %271
  %273 = add i32 %272, -4
  %274 = lshr i32 %273, 31
  %275 = trunc i32 %274 to i8
  %276 = lshr i32 %272, 31
  %277 = xor i32 %274, %276
  %278 = add nuw nsw i32 %277, %276
  %279 = icmp eq i32 %278, 2
  %280 = icmp ne i8 %275, 0
  %281 = xor i1 %280, %279
  %282 = select i1 %281, i64 10, i64 96
  %283 = add i64 %269, %282
  br i1 %281, label %block_410a1d, label %block_410a73

block_41090b:                                     ; preds = %block_4108f0
  %284 = add i64 %17, -40
  %285 = inttoptr i64 %284 to i32*
  store i32 0, i32* %285
  %286 = add i64 %17, -44
  %287 = add i64 %44, 14
  %288 = inttoptr i64 %286 to i32*
  store i32 1, i32* %288
  %289 = add i64 %17, -16
  br label %block_410919

block_410988:                                     ; preds = %block_41097e
  %290 = add i64 %17, -36
  %291 = inttoptr i64 %290 to i32*
  store i32 4, i32* %291
  %292 = add i64 %17, -44
  %293 = add i64 %49, 14
  %294 = inttoptr i64 %292 to i32*
  store i32 1, i32* %294
  %295 = add i64 %17, -16
  br label %block_410996

block_410919:                                     ; preds = %block_41090b, %block_410923
  %296 = phi i64 [ %287, %block_41090b ], [ %122, %block_410923 ]
  %297 = phi %struct.Memory* [ %2, %block_41090b ], [ %297, %block_410923 ]
  %298 = inttoptr i64 %286 to i32*
  %299 = load i32, i32* %298
  %300 = add i32 %299, -4
  %301 = lshr i32 %300, 31
  %302 = trunc i32 %301 to i8
  %303 = lshr i32 %299, 31
  %304 = xor i32 %301, %303
  %305 = add nuw nsw i32 %304, %303
  %306 = icmp eq i32 %305, 2
  %307 = icmp ne i8 %302, 0
  %308 = xor i1 %307, %306
  %309 = select i1 %308, i64 10, i64 96
  %310 = add i64 %296, %309
  br i1 %308, label %block_410923, label %block_410979

block_410a05:                                     ; preds = %block_4109fb
  %311 = add i64 %17, -40
  %312 = inttoptr i64 %311 to i32*
  store i32 4, i32* %312
  %313 = add i64 %17, -44
  %314 = add i64 %53, 14
  %315 = inttoptr i64 %313 to i32*
  store i32 1, i32* %315
  %316 = add i64 %17, -16
  br label %block_410a13

block_410a73:                                     ; preds = %block_410a13
  %317 = icmp ult i32 %272, 4
  %318 = zext i1 %317 to i8
  %319 = and i32 %273, 255
  %320 = tail call i32 @llvm.ctpop.i32(i32 %319) #11
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  %324 = xor i32 %273, %272
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = icmp eq i32 %273, 0
  %329 = zext i1 %328 to i8
  %330 = zext i1 %279 to i8
  store i8 %318, i8* %35, align 1, !tbaa !1248
  store i8 %323, i8* %36, align 1, !tbaa !1261
  store i8 %327, i8* %37, align 1, !tbaa !1262
  store i8 %329, i8* %39, align 1, !tbaa !1263
  store i8 %275, i8* %41, align 1, !tbaa !1264
  store i8 %330, i8* %42, align 1, !tbaa !1265
  br label %block_410afa

block_410a90:                                     ; preds = %block_410a82, %block_410a9a
  %331 = phi i64 [ %355, %block_410a82 ], [ %225, %block_410a9a ]
  %332 = phi %struct.Memory* [ %2, %block_410a82 ], [ %332, %block_410a9a ]
  %333 = inttoptr i64 %354 to i32*
  %334 = load i32, i32* %333
  %335 = add i32 %334, -4
  %336 = lshr i32 %335, 31
  %337 = trunc i32 %336 to i8
  %338 = lshr i32 %334, 31
  %339 = xor i32 %336, %338
  %340 = add nuw nsw i32 %339, %338
  %341 = icmp eq i32 %340, 2
  %342 = icmp ne i8 %337, 0
  %343 = xor i1 %342, %341
  %344 = select i1 %343, i64 10, i64 96
  %345 = add i64 %331, %344
  br i1 %343, label %block_410a9a, label %block_410af0

block_410b04:                                     ; preds = %block_410979, %block_410aff
  %346 = phi %struct.Memory* [ %297, %block_410979 ], [ %45, %block_410aff ]
  %347 = inttoptr i64 %18 to i64*
  %348 = load i64, i64* %347
  store i64 %348, i64* %15, align 8, !tbaa !1240
  %349 = inttoptr i64 %17 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %3, align 8, !tbaa !1240
  %351 = add i64 %17, 8
  store i64 %351, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %346

block_410a82:                                     ; preds = %block_410a78
  %352 = add i64 %17, -36
  %353 = inttoptr i64 %352 to i32*
  store i32 0, i32* %353
  %354 = add i64 %17, -44
  %355 = add i64 %73, 14
  %356 = inttoptr i64 %354 to i32*
  store i32 1, i32* %356
  %357 = add i64 %17, -16
  br label %block_410a90
}

; Function Attrs: noinline
define %struct.Memory* @sub_405980_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_405980:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, 48
  %24 = add i64 %1, 16
  %25 = add i64 %11, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_4059b0_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -4
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %6, align 8, !tbaa !1240
  %33 = shl nsw i64 %32, 3
  %34 = add i64 %33, add (i64 ptrtoint (%seg_6220a0__bss_type* @seg_6220a0__bss to i64), i64 528)
  %35 = bitcast %union.VectorReg* %9 to double*
  %36 = load double, double* %35, align 1
  %37 = inttoptr i64 %34 to double*
  store double %36, double* %37
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 16
  %40 = icmp ugt i64 %38, -17
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %14, align 1, !tbaa !1248
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #11
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %15, align 1, !tbaa !1261
  %48 = xor i64 %38, 16
  %49 = xor i64 %48, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %16, align 1, !tbaa !1262
  %53 = icmp eq i64 %39, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1263
  %55 = lshr i64 %39, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %18, align 1, !tbaa !1264
  %57 = lshr i64 %38, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %19, align 1, !tbaa !1265
  %62 = add i64 %38, 24
  %63 = inttoptr i64 %39 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %62 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %3, align 8, !tbaa !1240
  %67 = add i64 %38, 32
  store i64 %67, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4165d0_randlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4165d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %14 = load i64, i64* %7, align 8
  %15 = load i64, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %6, align 8, !tbaa !1240
  store i64 %16, i64* %7, align 8, !tbaa !1240
  %18 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1520) to double*)
  %19 = bitcast %union.VectorReg* %9 to double*
  store double %18, double* %19, align 1, !tbaa !1246
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %21 = bitcast i64* %20 to double*
  store double 0.000000e+00, double* %21, align 1, !tbaa !1246
  %22 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1528) to double*)
  %23 = bitcast %union.VectorReg* %10 to double*
  store double %22, double* %23, align 1, !tbaa !1246
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !1246
  %26 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1536) to double*)
  %27 = bitcast %union.VectorReg* %11 to double*
  store double %26, double* %27, align 1, !tbaa !1246
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %29 = bitcast i64* %28 to double*
  store double 0.000000e+00, double* %29, align 1, !tbaa !1246
  %30 = bitcast %union.VectorReg* %12 to i8*
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1544) to double*)
  %32 = bitcast %union.VectorReg* %12 to double*
  store double %31, double* %32, align 1, !tbaa !1246
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %35 = add i64 %15, -16
  %36 = load i64, i64* %5, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %15, -24
  %39 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %40 = bitcast [32 x %union.VectorReg]* %8 to double*
  %41 = load double, double* %40, align 1
  %42 = inttoptr i64 %38 to double*
  store double %41, double* %42
  %43 = add i64 %15, -32
  %44 = inttoptr i64 %43 to double*
  store double %31, double* %44
  %45 = add i64 %15, -40
  %46 = inttoptr i64 %45 to double*
  store double %18, double* %46
  %47 = add i64 %15, -48
  %48 = inttoptr i64 %47 to double*
  store double %26, double* %48
  %49 = add i64 %15, -56
  %50 = inttoptr i64 %49 to double*
  store double %22, double* %50
  %51 = bitcast %union.VectorReg* %12 to <2 x i32>*
  %52 = bitcast double %31 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i32 0
  %54 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %53, i32* %54, align 1, !tbaa !1266
  %55 = extractelement <2 x i32> %52, i32 1
  %56 = getelementptr inbounds i8, i8* %39, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 1, !tbaa !1266
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = load double, double* %40, align 1
  %60 = inttoptr i64 %38 to double*
  %61 = load double, double* %60
  %62 = fmul double %59, %61
  %63 = add i64 %15, -64
  %64 = inttoptr i64 %63 to double*
  store double %62, double* %64
  %65 = inttoptr i64 %63 to double*
  %66 = load double, double* %65
  %67 = tail call double @llvm.trunc.f64(double %66) #11
  %68 = tail call double @llvm.fabs.f64(double %67) #11
  %69 = fcmp ogt double %68, 0x41DFFFFFFFC00000
  %70 = fptosi double %67 to i32
  %71 = sitofp i32 %70 to double
  %72 = select i1 %69, double 0xC1E0000000000000, double %71
  %73 = load i64, i64* %7, align 8
  %74 = add i64 %73, -88
  %75 = inttoptr i64 %74 to double*
  store double %72, double* %75
  %76 = add i64 %73, -16
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  %79 = bitcast i64* %58 to double*
  %80 = bitcast %union.VectorReg* %13 to i8*
  %81 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %82 = load <2 x i32>, <2 x i32>* %81, align 1
  %83 = bitcast i64* %28 to <2 x i32>*
  %84 = extractelement <2 x i32> %82, i32 0
  %85 = bitcast %union.VectorReg* %13 to i32*
  store i32 %84, i32* %85, align 1, !tbaa !1266
  %86 = extractelement <2 x i32> %82, i32 1
  %87 = getelementptr inbounds i8, i8* %80, i64 4
  %88 = bitcast i8* %87 to i32*
  store i32 %86, i32* %88, align 1, !tbaa !1266
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast %union.VectorReg* %13 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %74 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  %95 = fsub double %78, %94
  %96 = add i64 %73, -96
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %73, -8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = load <2 x i32>, <2 x i32>* %51, align 1
  %102 = extractelement <2 x i32> %101, i32 0
  store i32 %102, i32* %54, align 1, !tbaa !1266
  %103 = extractelement <2 x i32> %101, i32 1
  store i32 %103, i32* %57, align 1, !tbaa !1266
  %104 = load double, double* %40, align 1
  %105 = inttoptr i64 %100 to double*
  %106 = load double, double* %105
  %107 = fmul double %104, %106
  %108 = add i64 %73, -56
  %109 = inttoptr i64 %108 to double*
  store double %107, double* %109
  %110 = inttoptr i64 %108 to double*
  %111 = load double, double* %110
  %112 = tail call double @llvm.trunc.f64(double %111) #11
  %113 = tail call double @llvm.fabs.f64(double %112) #11
  %114 = fcmp ogt double %113, 0x41DFFFFFFFC00000
  %115 = fptosi double %112 to i32
  %116 = sitofp i32 %115 to double
  %117 = select i1 %114, double 0xC1E0000000000000, double %116
  %118 = add i64 %73, -104
  %119 = inttoptr i64 %118 to double*
  store double %117, double* %119
  %120 = inttoptr i64 %98 to i64*
  %121 = load i64, i64* %120
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store i32 %84, i32* %85, align 1, !tbaa !1266
  store i32 %86, i32* %88, align 1, !tbaa !1266
  %124 = load i64, i64* %7, align 8
  %125 = add i64 %124, -104
  %126 = load double, double* %90, align 1
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127
  %129 = fmul double %126, %128
  %130 = fsub double %123, %129
  %131 = add i64 %124, -112
  %132 = inttoptr i64 %131 to double*
  store double %130, double* %132
  %133 = add i64 %124, -88
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = inttoptr i64 %131 to double*
  %137 = load double, double* %136
  %138 = fmul double %135, %137
  %139 = add i64 %124, -96
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  %142 = inttoptr i64 %125 to double*
  %143 = load double, double* %142
  %144 = fmul double %141, %143
  store double %144, double* %90, align 1, !tbaa !1246
  store i64 0, i64* %89, align 1, !tbaa !1246
  %145 = fadd double %138, %144
  %146 = add i64 %124, -56
  %147 = inttoptr i64 %146 to double*
  store double %145, double* %147
  %148 = load double, double* %32, align 1
  %149 = inttoptr i64 %146 to double*
  %150 = load double, double* %149
  %151 = fmul double %148, %150
  %152 = tail call double @llvm.trunc.f64(double %151) #11
  %153 = tail call double @llvm.fabs.f64(double %152) #11
  %154 = fcmp ogt double %153, 0x41DFFFFFFFC00000
  %155 = fptosi double %152 to i32
  %156 = sitofp i32 %155 to double
  %157 = select i1 %154, double 0xC1E0000000000000, double %156
  %158 = add i64 %124, -64
  %159 = inttoptr i64 %158 to double*
  store double %157, double* %159
  %160 = inttoptr i64 %146 to double*
  %161 = load double, double* %160
  %162 = load <2 x i32>, <2 x i32>* %81, align 1
  %163 = load <2 x i32>, <2 x i32>* %83, align 1
  %164 = extractelement <2 x i32> %162, i32 0
  %165 = bitcast %union.VectorReg* %12 to i32*
  store i32 %164, i32* %165, align 1, !tbaa !1266
  %166 = extractelement <2 x i32> %162, i32 1
  %167 = getelementptr inbounds i8, i8* %30, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 1, !tbaa !1266
  %169 = extractelement <2 x i32> %163, i32 0
  %170 = bitcast i64* %33 to i32*
  store i32 %169, i32* %170, align 1, !tbaa !1266
  %171 = extractelement <2 x i32> %163, i32 1
  %172 = getelementptr inbounds i8, i8* %30, i64 12
  %173 = bitcast i8* %172 to i32*
  store i32 %171, i32* %173, align 1, !tbaa !1266
  %174 = load i64, i64* %7, align 8
  %175 = add i64 %174, -64
  %176 = load double, double* %32, align 1
  %177 = inttoptr i64 %175 to double*
  %178 = load double, double* %177
  %179 = fmul double %176, %178
  store double %179, double* %32, align 1, !tbaa !1246
  %180 = fsub double %161, %179
  %181 = add i64 %174, -120
  %182 = inttoptr i64 %181 to double*
  store double %180, double* %182
  %183 = bitcast <2 x i32> %162 to double
  %184 = inttoptr i64 %181 to double*
  %185 = load double, double* %184
  %186 = fmul double %183, %185
  %187 = add i64 %174, -96
  %188 = inttoptr i64 %187 to double*
  %189 = load double, double* %188
  %190 = add i64 %174, -112
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = fmul double %189, %192
  %194 = fadd double %193, %186
  store double %194, double* %27, align 1, !tbaa !1246
  %195 = bitcast i64* %28 to <2 x i32>*
  store <2 x i32> %163, <2 x i32>* %195, align 1, !tbaa !1246
  %196 = add i64 %174, -72
  %197 = inttoptr i64 %196 to double*
  store double %194, double* %197
  %198 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %199 = load <2 x i32>, <2 x i32>* %198, align 1
  %200 = load i64, i64* %20, align 1
  %201 = extractelement <2 x i32> %199, i32 0
  store i32 %201, i32* %54, align 1, !tbaa !1266
  %202 = extractelement <2 x i32> %199, i32 1
  store i32 %202, i32* %57, align 1, !tbaa !1266
  %203 = load double, double* %40, align 1
  %204 = inttoptr i64 %196 to double*
  %205 = load double, double* %204
  %206 = fmul double %203, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = zext i32 %210 to i64
  %212 = select i1 %209, i64 2147483648, i64 %211
  store i64 %212, i64* %4, align 8, !tbaa !1240
  %213 = trunc i64 %212 to i32
  %214 = sitofp i32 %213 to double
  %215 = add i64 %174, -80
  %216 = inttoptr i64 %215 to double*
  store double %214, double* %216
  %217 = inttoptr i64 %196 to double*
  %218 = load double, double* %217
  %219 = load double, double* %23, align 1
  %220 = inttoptr i64 %215 to double*
  %221 = load double, double* %220
  %222 = fmul double %219, %221
  store double %222, double* %23, align 1, !tbaa !1246
  %223 = fsub double %218, %222
  %224 = load i64, i64* %7, align 8
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = inttoptr i64 %227 to double*
  store double %223, double* %228
  %229 = inttoptr i64 %225 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %5, align 8, !tbaa !1240
  %231 = bitcast <2 x i32> %199 to double
  %232 = inttoptr i64 %230 to double*
  %233 = load double, double* %232
  %234 = fmul double %231, %233
  store double %234, double* %19, align 1, !tbaa !1246
  store i64 %200, i64* %20, align 1, !tbaa !1246
  %235 = add i64 %224, -128
  %236 = inttoptr i64 %235 to double*
  store double %234, double* %236
  %237 = inttoptr i64 %235 to double*
  %238 = load double, double* %237
  store double %238, double* %40, align 1, !tbaa !1246
  store double 0.000000e+00, double* %79, align 1, !tbaa !1246
  %239 = load i64, i64* %6, align 8, !tbaa !1240
  %240 = add i64 %239, 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %7, align 8, !tbaa !1240
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !tbaa !1240
  %245 = add i64 %239, 16
  store i64 %245, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400840___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400840:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i8, i8* getelementptr inbounds (%seg_6220a0__bss_type, %seg_6220a0__bss_type* @seg_6220a0__bss, i32 0, i32 0, i32 0)
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !1248
  %7 = zext i8 %5 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #11
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !1261
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1262
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !1263
  %17 = lshr i8 %5, 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %17, i8* %18, align 1, !tbaa !1264
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !1265
  %20 = select i1 %14, i64 9, i64 32
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br i1 %14, label %block_400849, label %block_400860

block_400860:                                     ; preds = %block_400840
  %23 = load i64, i64* %22, align 8, !tbaa !1240
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %23, 8
  store i64 %26, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_400849:                                     ; preds = %block_400840
  %27 = load i64, i64* %4, align 8
  %28 = load i64, i64* %22, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %4, align 8, !tbaa !1240
  %31 = add i64 %21, -121
  %32 = add i64 %21, 9
  %33 = add i64 %28, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %22, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_4007d0_deregister_tm_clones(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  store i8 1, i8* getelementptr inbounds (%seg_6220a0__bss_type, %seg_6220a0__bss_type* @seg_6220a0__bss, i32 0, i32 0, i32 0)
  %36 = load i64, i64* %22, align 8, !tbaa !1240
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %4, align 8, !tbaa !1240
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %3, align 8, !tbaa !1240
  %42 = add i64 %36, 16
  store i64 %42, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %35
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007c0__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_4007c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f8a0_nr_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f8a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  %18 = add i64 %15, -16
  %19 = load i64, i64* %11, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %15, -20
  %22 = load i32, i32* %7, align 4
  %23 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %23
  %24 = add i64 %15, -24
  %25 = load i32, i32* %5, align 4
  %26 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %26
  %27 = add i64 %15, -28
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %15, -20
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = add i64 %15, -16
  br label %block_41f8b5

block_41f8dd:                                     ; preds = %block_41f8b5
  %34 = zext i32 %72 to i64
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %38 = icmp ult i32 %72, %74
  %39 = zext i1 %38 to i8
  %40 = and i32 %75, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #11
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i32 %74, %72
  %46 = xor i32 %45, %75
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = icmp eq i32 %75, 0
  %51 = zext i1 %50 to i8
  %52 = zext i1 %83 to i8
  store i8 %39, i8* %30, align 1, !tbaa !1248
  store i8 %44, i8* %35, align 1, !tbaa !1261
  store i8 %49, i8* %31, align 1, !tbaa !1262
  store i8 %51, i8* %36, align 1, !tbaa !1263
  store i8 %77, i8* %32, align 1, !tbaa !1264
  store i8 %52, i8* %37, align 1, !tbaa !1265
  %53 = inttoptr i64 %16 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %13, align 8, !tbaa !1240
  %55 = inttoptr i64 %15 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %3, align 8, !tbaa !1240
  %57 = add i64 %15, 8
  store i64 %57, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %70

block_41f8c1:                                     ; preds = %block_41f8b5
  %58 = inttoptr i64 %24 to i32*
  %59 = load i32, i32* %58
  %60 = inttoptr i64 %33 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %9, align 8, !tbaa !1240
  %62 = sext i32 %72 to i64
  store i64 %62, i64* %10, align 8, !tbaa !1240
  %63 = shl nsw i64 %62, 2
  %64 = add i64 %63, %61
  %65 = inttoptr i64 %64 to i32*
  store i32 %59, i32* %65
  %66 = inttoptr i64 %27 to i32*
  %67 = load i32, i32* %66
  %68 = add i32 %67, 1
  %69 = inttoptr i64 %27 to i32*
  store i32 %68, i32* %69
  br label %block_41f8b5

block_41f8b5:                                     ; preds = %block_41f8c1, %block_41f8a0
  %70 = phi %struct.Memory* [ %2, %block_41f8a0 ], [ %70, %block_41f8c1 ]
  %71 = inttoptr i64 %27 to i32*
  %72 = load i32, i32* %71
  %73 = inttoptr i64 %29 to i32*
  %74 = load i32, i32* %73
  %75 = sub i32 %72, %74
  %76 = lshr i32 %75, 31
  %77 = trunc i32 %76 to i8
  %78 = lshr i32 %72, 31
  %79 = lshr i32 %74, 31
  %80 = xor i32 %79, %78
  %81 = xor i32 %76, %78
  %82 = add nuw nsw i32 %81, %80
  %83 = icmp eq i32 %82, 2
  %84 = icmp ne i8 %77, 0
  %85 = xor i1 %84, %83
  br i1 %85, label %block_41f8c1, label %block_41f8dd
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f800_reciprocal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f800:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  %16 = add i64 %13, -16
  %17 = load i64, i64* %8, align 8
  %18 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %18
  %19 = add i64 %13, -20
  %20 = load i32, i32* %5, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %13, -24
  %23 = inttoptr i64 %22 to i32*
  store i32 0, i32* %23
  %24 = add i64 %13, -20
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %28 = bitcast %union.VectorReg* %11 to double*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = add i64 %13, -16
  br label %block_41f812

block_41f84e:                                     ; preds = %block_41f812
  %31 = zext i32 %57 to i64
  store i64 %31, i64* %6, align 8, !tbaa !1240
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %35 = icmp ult i32 %57, %59
  %36 = zext i1 %35 to i8
  %37 = and i32 %60, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #11
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  %42 = xor i32 %59, %57
  %43 = xor i32 %42, %60
  %44 = lshr i32 %43, 4
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = icmp eq i32 %60, 0
  %48 = zext i1 %47 to i8
  %49 = zext i1 %68 to i8
  store i8 %36, i8* %25, align 1, !tbaa !1248
  store i8 %41, i8* %32, align 1, !tbaa !1261
  store i8 %46, i8* %26, align 1, !tbaa !1262
  store i8 %48, i8* %33, align 1, !tbaa !1263
  store i8 %62, i8* %27, align 1, !tbaa !1264
  store i8 %49, i8* %34, align 1, !tbaa !1265
  %50 = inttoptr i64 %14 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %10, align 8, !tbaa !1240
  %52 = inttoptr i64 %13 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %3, align 8, !tbaa !1240
  %54 = add i64 %13, 8
  store i64 %54, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %55

block_41f812:                                     ; preds = %block_41f81e, %block_41f800
  %55 = phi %struct.Memory* [ %2, %block_41f800 ], [ %55, %block_41f81e ]
  %56 = inttoptr i64 %22 to i32*
  %57 = load i32, i32* %56
  %58 = inttoptr i64 %24 to i32*
  %59 = load i32, i32* %58
  %60 = sub i32 %57, %59
  %61 = lshr i32 %60, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %57, 31
  %64 = lshr i32 %59, 31
  %65 = xor i32 %64, %63
  %66 = xor i32 %61, %63
  %67 = add nuw nsw i32 %66, %65
  %68 = icmp eq i32 %67, 2
  %69 = icmp ne i8 %62, 0
  %70 = xor i1 %69, %68
  br i1 %70, label %block_41f81e, label %block_41f84e

block_41f81e:                                     ; preds = %block_41f812
  %71 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %72 = inttoptr i64 %30 to i64*
  %73 = load i64, i64* %72
  %74 = sext i32 %57 to i64
  %75 = shl nsw i64 %74, 3
  %76 = add i64 %75, %73
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  %79 = fdiv double %71, %78
  store double %79, double* %28, align 1, !tbaa !1246
  store i64 0, i64* %29, align 1, !tbaa !1246
  store i64 %74, i64* %7, align 8, !tbaa !1240
  %80 = inttoptr i64 %76 to double*
  store double %79, double* %80
  %81 = inttoptr i64 %22 to i32*
  %82 = load i32, i32* %81
  %83 = add i32 %82, 1
  %84 = inttoptr i64 %22 to i32*
  store i32 %83, i32* %84
  br label %block_41f812
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4082f0_laplacian(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4082f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %16 = load i64, i64* %12, align 8
  %17 = load i64, i64* %11, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %12, align 8, !tbaa !1240
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %26 = bitcast [32 x %union.VectorReg]* %14 to i8*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast [32 x %union.VectorReg]* %14 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %26, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = bitcast i64* %27 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = getelementptr inbounds i8, i8* %26, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 1, !tbaa !1244
  %34 = add i64 %17, -1064
  store i64 %34, i64* %7, align 8, !tbaa !1240
  %35 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %36 = bitcast %union.VectorReg* %15 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %38 = add i64 %17, -16
  %39 = load i64, i64* %10, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %40
  %41 = add i64 %17, -24
  %42 = load i64, i64* %9, align 8
  %43 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %43
  %44 = add i64 %17, -28
  %45 = load i32, i32* %5, align 4
  %46 = inttoptr i64 %44 to i32*
  store i32 %45, i32* %46
  %47 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %48 = fdiv double %35, %47
  store double %48, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %49 = add i64 %17, -40
  %50 = inttoptr i64 %49 to double*
  store double %48, double* %50
  store i64 %34, i64* %10, align 8, !tbaa !1240
  store i64 125, i64* %9, align 8, !tbaa !1240
  %51 = add i64 %1, 95584
  %52 = add i64 %1, 69
  %53 = add i64 %17, -2080
  %54 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %54
  store i64 %53, i64* %11, align 8, !tbaa !1240
  %55 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  %56 = load i64, i64* %12, align 8
  %57 = add i64 %56, -48
  %58 = load i64, i64* %3, align 8
  %59 = add i64 %58, 7
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60
  %61 = add i64 %56, -44
  %62 = add i64 %56, -40
  %63 = add i64 %56, -36
  %64 = add i64 %56, -1056
  %65 = bitcast [32 x %union.VectorReg]* %14 to double*
  %66 = bitcast i64* %27 to double*
  %67 = add i64 %56, -16
  br label %block_40833c

block_4088f3:                                     ; preds = %block_4086c8
  %68 = load i64, i64* %11, align 8
  %69 = add i64 %68, 2064
  %70 = icmp ugt i64 %68, -2065
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %20, align 1, !tbaa !1248
  %72 = trunc i64 %69 to i32
  %73 = and i32 %72, 255
  %74 = tail call i32 @llvm.ctpop.i32(i32 %73) #11
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  store i8 %77, i8* %21, align 1, !tbaa !1261
  %78 = xor i64 %68, 16
  %79 = xor i64 %78, %69
  %80 = lshr i64 %79, 4
  %81 = trunc i64 %80 to i8
  %82 = and i8 %81, 1
  store i8 %82, i8* %22, align 1, !tbaa !1262
  %83 = icmp eq i64 %69, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %23, align 1, !tbaa !1263
  %85 = lshr i64 %69, 63
  %86 = trunc i64 %85 to i8
  store i8 %86, i8* %24, align 1, !tbaa !1264
  %87 = lshr i64 %68, 63
  %88 = xor i64 %85, %87
  %89 = add nuw nsw i64 %88, %85
  %90 = icmp eq i64 %89, 2
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %25, align 1, !tbaa !1265
  %92 = add i64 %68, 2072
  %93 = inttoptr i64 %69 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %12, align 8, !tbaa !1240
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %3, align 8, !tbaa !1240
  %97 = add i64 %68, 2080
  store i64 %97, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %579

block_408568:                                     ; preds = %block_408496
  %98 = inttoptr i64 %188 to i32*
  %99 = load i32, i32* %98
  %100 = add i32 %99, 1
  %101 = inttoptr i64 %188 to i32*
  store i32 %100, i32* %101
  %102 = add i64 %536, -227
  br label %block_408485

block_4086ea:                                     ; preds = %block_4086f4, %block_4086e3
  %103 = phi %struct.Memory* [ %163, %block_4086e3 ], [ %103, %block_4086f4 ]
  %104 = inttoptr i64 %562 to i32*
  %105 = load i32, i32* %104
  %106 = add i32 %105, -5
  %107 = lshr i32 %106, 31
  %108 = lshr i32 %105, 31
  %109 = xor i32 %107, %108
  %110 = add nuw nsw i32 %109, %108
  %111 = icmp eq i32 %110, 2
  %112 = icmp ne i32 %107, 0
  %113 = xor i1 %112, %111
  br i1 %113, label %block_4086f4, label %block_4088cd

block_4086d2:                                     ; preds = %block_4086c8
  %114 = inttoptr i64 %561 to i32*
  store i32 0, i32* %114
  br label %block_4086d9

block_4085e6:                                     ; preds = %block_4085dc
  %115 = inttoptr i64 %563 to i64*
  %116 = load i64, i64* %115
  %117 = inttoptr i64 %560 to i32*
  %118 = load i32, i32* %117
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %119, 200
  %121 = add i64 %120, %116
  %122 = inttoptr i64 %561 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %124, 40
  %126 = add i64 %125, %121
  %127 = sext i32 %568 to i64
  %128 = shl nsw i64 %127, 3
  %129 = add i64 %128, %126
  %130 = inttoptr i64 %129 to double*
  %131 = load double, double* %130
  %132 = inttoptr i64 %564 to i64*
  %133 = load i64, i64* %132
  %134 = inttoptr i64 %556 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 200
  %138 = add i64 %137, %133
  %139 = add i64 %125, %138
  store i64 %127, i64* %8, align 8, !tbaa !1240
  %140 = add i64 %128, %139
  %141 = inttoptr i64 %140 to double*
  %142 = load double, double* %141
  %143 = mul nsw i64 %119, 40
  %144 = add i64 %143, ptrtoint (%wdtdr_type* @wdtdr to i64)
  %145 = shl nsw i64 %136, 3
  %146 = add i64 %145, %144
  %147 = inttoptr i64 %146 to double*
  %148 = load double, double* %147
  %149 = fmul double %142, %148
  store double %149, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %150 = fadd double %131, %149
  store double %150, double* %65, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  store i64 %127, i64* %7, align 8, !tbaa !1240
  %151 = inttoptr i64 %129 to double*
  store double %150, double* %151
  %152 = inttoptr i64 %562 to i32*
  %153 = load i32, i32* %152
  %154 = add i32 %153, 1
  %155 = inttoptr i64 %562 to i32*
  store i32 %154, i32* %155
  %156 = add i64 %578, -10
  br label %block_4085dc

block_4086e3:                                     ; preds = %block_4086d9
  %157 = inttoptr i64 %562 to i32*
  store i32 0, i32* %157
  br label %block_4086ea

block_4088e0:                                     ; preds = %block_4086d9
  %158 = inttoptr i64 %556 to i32*
  %159 = load i32, i32* %158
  %160 = add i32 %159, 1
  %161 = zext i32 %160 to i64
  store i64 %161, i64* %6, align 8, !tbaa !1240
  %162 = inttoptr i64 %556 to i32*
  store i32 %160, i32* %162
  br label %block_4086c8

block_4086d9:                                     ; preds = %block_4088cd, %block_4086d2
  %163 = phi %struct.Memory* [ %579, %block_4086d2 ], [ %103, %block_4088cd ]
  %164 = inttoptr i64 %561 to i32*
  %165 = load i32, i32* %164
  %166 = add i32 %165, -5
  %167 = lshr i32 %166, 31
  %168 = lshr i32 %165, 31
  %169 = xor i32 %167, %168
  %170 = add nuw nsw i32 %169, %168
  %171 = icmp eq i32 %170, 2
  %172 = icmp ne i32 %167, 0
  %173 = xor i1 %172, %171
  br i1 %173, label %block_4086e3, label %block_4088e0

block_408456:                                     ; preds = %block_40833c
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  store i64 125, i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %176 = add i64 %56, -2064
  store i64 %176, i64* %10, align 8, !tbaa !1240
  %177 = add i64 %248, 95226
  %178 = add i64 %248, 23
  %179 = load i64, i64* %11, align 8, !tbaa !1240
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181
  store i64 %180, i64* %11, align 8, !tbaa !1240
  %182 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %177, %struct.Memory* %235)
  %183 = load i64, i64* %12, align 8
  %184 = add i64 %183, -48
  %185 = load i64, i64* %3, align 8
  %186 = add i64 %185, 7
  %187 = inttoptr i64 %184 to i32*
  store i32 0, i32* %187
  %188 = add i64 %183, -44
  %189 = add i64 %183, -40
  %190 = add i64 %183, -36
  %191 = add i64 %183, -2064
  %192 = add i64 %183, -16
  br label %block_408474

block_408555:                                     ; preds = %block_4084a7
  %193 = inttoptr i64 %189 to i32*
  %194 = load i32, i32* %193
  %195 = add i32 %194, 1
  %196 = inttoptr i64 %189 to i32*
  store i32 %195, i32* %196
  %197 = add i64 %443, -191
  br label %block_408496

block_4085cb:                                     ; preds = %block_408688, %block_4085c4
  %198 = phi i64 [ %214, %block_4085c4 ], [ %594, %block_408688 ]
  %199 = phi %struct.Memory* [ %486, %block_4085c4 ], [ %566, %block_408688 ]
  %200 = inttoptr i64 %561 to i32*
  %201 = load i32, i32* %200
  %202 = add i32 %201, -5
  %203 = lshr i32 %202, 31
  %204 = lshr i32 %201, 31
  %205 = xor i32 %203, %204
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = icmp ne i32 %203, 0
  %209 = xor i1 %208, %207
  %210 = select i1 %209, i64 10, i64 208
  %211 = add i64 %198, %210
  br i1 %209, label %block_4085d5, label %block_40869b

block_408346:                                     ; preds = %block_40833c
  %212 = add i64 %248, 7
  %213 = inttoptr i64 %61 to i32*
  store i32 0, i32* %213
  br label %block_40834d

block_4085c4:                                     ; preds = %block_4085ba
  %214 = add i64 %498, 7
  %215 = inttoptr i64 %561 to i32*
  store i32 0, i32* %215
  br label %block_4085cb

block_40847e:                                     ; preds = %block_408474
  %216 = add i64 %277, 7
  %217 = inttoptr i64 %188 to i32*
  store i32 0, i32* %217
  br label %block_408485

block_408357:                                     ; preds = %block_40834d
  %218 = add i64 %262, 7
  %219 = inttoptr i64 %62 to i32*
  store i32 0, i32* %219
  br label %block_40835e

block_408443:                                     ; preds = %block_40834d
  %220 = inttoptr i64 %57 to i32*
  %221 = load i32, i32* %220
  %222 = add i32 %221, 1
  %223 = inttoptr i64 %57 to i32*
  store i32 %222, i32* %223
  %224 = add i64 %262, -263
  br label %block_40833c

block_4085d5:                                     ; preds = %block_4085cb
  %225 = add i64 %211, 7
  %226 = inttoptr i64 %562 to i32*
  store i32 0, i32* %226
  br label %block_4085dc

block_4086c1:                                     ; preds = %block_4085a9
  %227 = inttoptr i64 %556 to i32*
  store i32 0, i32* %227
  %228 = add i64 %555, -2064
  %229 = add i64 %555, -1056
  %230 = add i64 %555, -20
  %231 = bitcast %union.VectorReg* %175 to double*
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %233 = add i64 %555, -32
  br label %block_4086c8

block_40833c:                                     ; preds = %block_408443, %block_4082f0
  %234 = phi i64 [ %59, %block_4082f0 ], [ %224, %block_408443 ]
  %235 = phi %struct.Memory* [ %55, %block_4082f0 ], [ %250, %block_408443 ]
  %236 = inttoptr i64 %57 to i32*
  %237 = load i32, i32* %236
  %238 = add i32 %237, -5
  %239 = lshr i32 %238, 31
  %240 = trunc i32 %239 to i8
  %241 = lshr i32 %237, 31
  %242 = xor i32 %239, %241
  %243 = add nuw nsw i32 %242, %241
  %244 = icmp eq i32 %243, 2
  %245 = icmp ne i8 %240, 0
  %246 = xor i1 %245, %244
  %247 = select i1 %246, i64 10, i64 282
  %248 = add i64 %234, %247
  br i1 %246, label %block_408346, label %block_408456

block_40834d:                                     ; preds = %block_408430, %block_408346
  %249 = phi i64 [ %212, %block_408346 ], [ %404, %block_408430 ]
  %250 = phi %struct.Memory* [ %235, %block_408346 ], [ %596, %block_408430 ]
  %251 = inttoptr i64 %61 to i32*
  %252 = load i32, i32* %251
  %253 = add i32 %252, -5
  %254 = lshr i32 %253, 31
  %255 = lshr i32 %252, 31
  %256 = xor i32 %254, %255
  %257 = add nuw nsw i32 %256, %255
  %258 = icmp eq i32 %257, 2
  %259 = icmp ne i32 %254, 0
  %260 = xor i1 %259, %258
  %261 = select i1 %260, i64 10, i64 246
  %262 = add i64 %249, %261
  br i1 %260, label %block_408357, label %block_408443

block_408474:                                     ; preds = %block_40857b, %block_408456
  %263 = phi i64 [ %186, %block_408456 ], [ %543, %block_40857b ]
  %264 = phi %struct.Memory* [ %182, %block_408456 ], [ %610, %block_40857b ]
  %265 = inttoptr i64 %184 to i32*
  %266 = load i32, i32* %265
  %267 = add i32 %266, -5
  %268 = lshr i32 %267, 31
  %269 = trunc i32 %268 to i8
  %270 = lshr i32 %266, 31
  %271 = xor i32 %268, %270
  %272 = add nuw nsw i32 %271, %270
  %273 = icmp eq i32 %272, 2
  %274 = icmp ne i8 %269, 0
  %275 = xor i1 %274, %273
  %276 = select i1 %275, i64 10, i64 282
  %277 = add i64 %263, %276
  br i1 %275, label %block_40847e, label %block_40858e

block_4085b3:                                     ; preds = %block_4085a9
  %278 = add i64 %425, 7
  %279 = inttoptr i64 %560 to i32*
  store i32 0, i32* %279
  br label %block_4085ba

block_4084b1:                                     ; preds = %block_4084a7
  %280 = inttoptr i64 %184 to i32*
  %281 = load i32, i32* %280
  %282 = sext i32 %281 to i64
  %283 = mul nsw i64 %282, 200
  %284 = add i64 %283, %191
  %285 = inttoptr i64 %189 to i32*
  %286 = load i32, i32* %285
  %287 = sext i32 %286 to i64
  %288 = mul nsw i64 %287, 40
  %289 = add i64 %288, %284
  %290 = sext i32 %433 to i64
  %291 = shl nsw i64 %290, 3
  %292 = add i64 %291, %289
  %293 = inttoptr i64 %292 to double*
  %294 = load double, double* %293
  %295 = inttoptr i64 %192 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %283, %296
  %298 = inttoptr i64 %188 to i32*
  %299 = load i32, i32* %298
  %300 = sext i32 %299 to i64
  %301 = mul nsw i64 %300, 40
  %302 = add i64 %301, %297
  %303 = add i64 %291, %302
  %304 = inttoptr i64 %303 to double*
  %305 = load double, double* %304
  %306 = add i64 %288, ptrtoint (%wdtdr_type* @wdtdr to i64)
  store i64 %300, i64* %8, align 8, !tbaa !1240
  %307 = shl nsw i64 %300, 3
  %308 = add i64 %307, %306
  %309 = inttoptr i64 %308 to double*
  %310 = load double, double* %309
  %311 = fmul double %305, %310
  store double %311, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %312 = fadd double %294, %311
  store double %312, double* %65, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  store i64 %290, i64* %7, align 8, !tbaa !1240
  %313 = inttoptr i64 %292 to double*
  store double %312, double* %313
  %314 = inttoptr i64 %190 to i32*
  %315 = load i32, i32* %314
  %316 = add i32 %315, 1
  %317 = inttoptr i64 %190 to i32*
  store i32 %316, i32* %317
  %318 = add i64 %443, -10
  br label %block_4084a7

block_4086f4:                                     ; preds = %block_4086ea
  store i64 ptrtoint (%bm1_s_type* @bm1_s to i64), i64* %6, align 8, !tbaa !1240
  %319 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 928) to double*)
  store double %319, double* %65, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %320 = inttoptr i64 %556 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %322, 200
  %324 = add i64 %323, %229
  %325 = inttoptr i64 %561 to i32*
  %326 = load i32, i32* %325
  %327 = sext i32 %326 to i64
  %328 = mul nsw i64 %327, 40
  %329 = add i64 %328, %324
  %330 = sext i32 %105 to i64
  store i64 %330, i64* %174, align 8, !tbaa !1240
  %331 = shl nsw i64 %330, 3
  %332 = add i64 %331, %329
  %333 = inttoptr i64 %332 to double*
  %334 = load double, double* %333
  %335 = inttoptr i64 %230 to i32*
  %336 = load i32, i32* %335
  %337 = sext i32 %336 to i64
  %338 = mul nsw i64 %337, 1000
  %339 = add i64 %338, ptrtoint (%g4m1_s_type* @g4m1_s to i64)
  %340 = add i64 %323, %339
  %341 = add i64 %328, %340
  store i64 %330, i64* %13, align 8, !tbaa !1240
  %342 = add i64 %331, %341
  %343 = inttoptr i64 %342 to double*
  %344 = load double, double* %343
  %345 = fmul double %334, %344
  %346 = add i64 %323, %228
  %347 = add i64 %328, %346
  store i64 %330, i64* %10, align 8, !tbaa !1240
  %348 = add i64 %331, %347
  %349 = inttoptr i64 %348 to double*
  %350 = load double, double* %349
  %351 = add i64 %338, ptrtoint (%g5m1_s_type* @g5m1_s to i64)
  %352 = add i64 %323, %351
  %353 = add i64 %328, %352
  %354 = add i64 %331, %353
  %355 = inttoptr i64 %354 to double*
  %356 = load double, double* %355
  %357 = fmul double %350, %356
  %358 = fadd double %345, %357
  %359 = inttoptr i64 %563 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %323, %360
  %362 = add i64 %328, %361
  store i64 %330, i64* %9, align 8, !tbaa !1240
  %363 = add i64 %331, %362
  %364 = inttoptr i64 %363 to double*
  %365 = load double, double* %364
  %366 = add i64 %338, ptrtoint (%g6m1_s_type* @g6m1_s to i64)
  %367 = add i64 %323, %366
  %368 = add i64 %328, %367
  store i64 %330, i64* %8, align 8, !tbaa !1240
  %369 = add i64 %331, %368
  %370 = inttoptr i64 %369 to double*
  %371 = load double, double* %370
  %372 = fmul double %365, %371
  store double %372, double* %231, align 1, !tbaa !1246
  store i64 0, i64* %232, align 1, !tbaa !1246
  %373 = fadd double %358, %372
  %374 = load double, double* %65, align 1
  %375 = fmul double %374, %373
  %376 = load i64, i64* %6, align 8
  %377 = add i64 %338, %376
  %378 = add i64 %323, %377
  %379 = add i64 %328, %378
  %380 = add i64 %331, %379
  %381 = inttoptr i64 %380 to double*
  %382 = load double, double* %381
  %383 = inttoptr i64 %233 to double*
  %384 = load double, double* %383
  %385 = fmul double %382, %384
  %386 = inttoptr i64 %564 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %323, %387
  %389 = add i64 %328, %388
  %390 = add i64 %331, %389
  %391 = inttoptr i64 %390 to double*
  %392 = load double, double* %391
  %393 = fmul double %385, %392
  store double %393, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %394 = fadd double %375, %393
  store double %394, double* %65, align 1, !tbaa !1246
  store i64 %330, i64* %7, align 8, !tbaa !1240
  %395 = inttoptr i64 %363 to double*
  store double %394, double* %395
  %396 = inttoptr i64 %562 to i32*
  %397 = load i32, i32* %396
  %398 = add i32 %397, 1
  %399 = inttoptr i64 %562 to i32*
  store i32 %398, i32* %399
  br label %block_4086ea

block_408430:                                     ; preds = %block_40835e
  %400 = inttoptr i64 %61 to i32*
  %401 = load i32, i32* %400
  %402 = add i32 %401, 1
  %403 = inttoptr i64 %61 to i32*
  store i32 %402, i32* %403
  %404 = add i64 %608, -227
  br label %block_40834d

block_4086ae:                                     ; preds = %block_4085ba
  %405 = inttoptr i64 %556 to i32*
  %406 = load i32, i32* %405
  %407 = add i32 %406, 1
  %408 = zext i32 %407 to i64
  store i64 %408, i64* %6, align 8, !tbaa !1240
  %409 = inttoptr i64 %556 to i32*
  store i32 %407, i32* %409
  %410 = add i64 %498, -261
  br label %block_4085a9

block_4085a9:                                     ; preds = %block_40858e, %block_4086ae
  %411 = phi i64 [ %558, %block_40858e ], [ %410, %block_4086ae ]
  %412 = phi %struct.Memory* [ %554, %block_40858e ], [ %486, %block_4086ae ]
  %413 = inttoptr i64 %556 to i32*
  %414 = load i32, i32* %413
  %415 = add i32 %414, -5
  %416 = lshr i32 %415, 31
  %417 = trunc i32 %416 to i8
  %418 = lshr i32 %414, 31
  %419 = xor i32 %416, %418
  %420 = add nuw nsw i32 %419, %418
  %421 = icmp eq i32 %420, 2
  %422 = icmp ne i8 %417, 0
  %423 = xor i1 %422, %421
  %424 = select i1 %423, i64 10, i64 280
  %425 = add i64 %411, %424
  br i1 %423, label %block_4085b3, label %block_4086c1

block_4088cd:                                     ; preds = %block_4086ea
  %426 = inttoptr i64 %561 to i32*
  %427 = load i32, i32* %426
  %428 = add i32 %427, 1
  %429 = inttoptr i64 %561 to i32*
  store i32 %428, i32* %429
  br label %block_4086d9

block_4084a7:                                     ; preds = %block_4084a0, %block_4084b1
  %430 = phi i64 [ %483, %block_4084a0 ], [ %318, %block_4084b1 ]
  %431 = phi %struct.Memory* [ %524, %block_4084a0 ], [ %431, %block_4084b1 ]
  %432 = inttoptr i64 %190 to i32*
  %433 = load i32, i32* %432
  %434 = add i32 %433, -5
  %435 = lshr i32 %434, 31
  %436 = lshr i32 %433, 31
  %437 = xor i32 %435, %436
  %438 = add nuw nsw i32 %437, %436
  %439 = icmp eq i32 %438, 2
  %440 = icmp ne i32 %435, 0
  %441 = xor i1 %440, %439
  %442 = select i1 %441, i64 10, i64 174
  %443 = add i64 %430, %442
  br i1 %441, label %block_4084b1, label %block_408555

block_408379:                                     ; preds = %block_40836f
  %444 = inttoptr i64 %57 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 200
  %448 = add i64 %447, %64
  %449 = inttoptr i64 %62 to i32*
  %450 = load i32, i32* %449
  %451 = sext i32 %450 to i64
  %452 = mul nsw i64 %451, 40
  %453 = add i64 %452, %448
  %454 = sext i32 %512 to i64
  %455 = shl nsw i64 %454, 3
  %456 = add i64 %455, %453
  %457 = inttoptr i64 %456 to double*
  %458 = load double, double* %457
  %459 = inttoptr i64 %61 to i32*
  %460 = load i32, i32* %459
  %461 = sext i32 %460 to i64
  %462 = mul nsw i64 %461, 40
  %463 = add i64 %462, ptrtoint (%wdtdr_type* @wdtdr to i64)
  %464 = add i64 %455, %463
  %465 = inttoptr i64 %464 to double*
  %466 = load double, double* %465
  %467 = inttoptr i64 %67 to i64*
  %468 = load i64, i64* %467
  %469 = add i64 %447, %468
  %470 = add i64 %452, %469
  store i64 %461, i64* %8, align 8, !tbaa !1240
  %471 = shl nsw i64 %461, 3
  %472 = add i64 %471, %470
  %473 = inttoptr i64 %472 to double*
  %474 = load double, double* %473
  %475 = fmul double %466, %474
  store double %475, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %476 = fadd double %458, %475
  store double %476, double* %65, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  store i64 %454, i64* %7, align 8, !tbaa !1240
  %477 = inttoptr i64 %456 to double*
  store double %476, double* %477
  %478 = inttoptr i64 %63 to i32*
  %479 = load i32, i32* %478
  %480 = add i32 %479, 1
  %481 = inttoptr i64 %63 to i32*
  store i32 %480, i32* %481
  %482 = add i64 %522, -10
  br label %block_40836f

block_4084a0:                                     ; preds = %block_408496
  %483 = add i64 %536, 7
  %484 = inttoptr i64 %190 to i32*
  store i32 0, i32* %484
  br label %block_4084a7

block_4085ba:                                     ; preds = %block_40869b, %block_4085b3
  %485 = phi i64 [ %278, %block_4085b3 ], [ %508, %block_40869b ]
  %486 = phi %struct.Memory* [ %412, %block_4085b3 ], [ %199, %block_40869b ]
  %487 = inttoptr i64 %560 to i32*
  %488 = load i32, i32* %487
  %489 = add i32 %488, -5
  %490 = lshr i32 %489, 31
  %491 = lshr i32 %488, 31
  %492 = xor i32 %490, %491
  %493 = add nuw nsw i32 %492, %491
  %494 = icmp eq i32 %493, 2
  %495 = icmp ne i32 %490, 0
  %496 = xor i1 %495, %494
  %497 = select i1 %496, i64 10, i64 244
  %498 = add i64 %485, %497
  br i1 %496, label %block_4085c4, label %block_4086ae

block_40841d:                                     ; preds = %block_40836f
  %499 = inttoptr i64 %62 to i32*
  %500 = load i32, i32* %499
  %501 = add i32 %500, 1
  %502 = inttoptr i64 %62 to i32*
  store i32 %501, i32* %502
  %503 = add i64 %522, -191
  br label %block_40835e

block_40869b:                                     ; preds = %block_4085cb
  %504 = inttoptr i64 %560 to i32*
  %505 = load i32, i32* %504
  %506 = add i32 %505, 1
  %507 = inttoptr i64 %560 to i32*
  store i32 %506, i32* %507
  %508 = add i64 %211, -225
  br label %block_4085ba

block_40836f:                                     ; preds = %block_408368, %block_408379
  %509 = phi i64 [ %537, %block_408368 ], [ %482, %block_408379 ]
  %510 = phi %struct.Memory* [ %596, %block_408368 ], [ %510, %block_408379 ]
  %511 = inttoptr i64 %63 to i32*
  %512 = load i32, i32* %511
  %513 = add i32 %512, -5
  %514 = lshr i32 %513, 31
  %515 = lshr i32 %512, 31
  %516 = xor i32 %514, %515
  %517 = add nuw nsw i32 %516, %515
  %518 = icmp eq i32 %517, 2
  %519 = icmp ne i32 %514, 0
  %520 = xor i1 %519, %518
  %521 = select i1 %520, i64 10, i64 174
  %522 = add i64 %509, %521
  br i1 %520, label %block_408379, label %block_40841d

block_408496:                                     ; preds = %block_40848f, %block_408555
  %523 = phi i64 [ %544, %block_40848f ], [ %197, %block_408555 ]
  %524 = phi %struct.Memory* [ %610, %block_40848f ], [ %431, %block_408555 ]
  %525 = inttoptr i64 %189 to i32*
  %526 = load i32, i32* %525
  %527 = add i32 %526, -5
  %528 = lshr i32 %527, 31
  %529 = lshr i32 %526, 31
  %530 = xor i32 %528, %529
  %531 = add nuw nsw i32 %530, %529
  %532 = icmp eq i32 %531, 2
  %533 = icmp ne i32 %528, 0
  %534 = xor i1 %533, %532
  %535 = select i1 %534, i64 10, i64 210
  %536 = add i64 %523, %535
  br i1 %534, label %block_4084a0, label %block_408568

block_408368:                                     ; preds = %block_40835e
  %537 = add i64 %608, 7
  %538 = inttoptr i64 %63 to i32*
  store i32 0, i32* %538
  br label %block_40836f

block_40857b:                                     ; preds = %block_408485
  %539 = inttoptr i64 %184 to i32*
  %540 = load i32, i32* %539
  %541 = add i32 %540, 1
  %542 = inttoptr i64 %184 to i32*
  store i32 %541, i32* %542
  %543 = add i64 %622, -263
  br label %block_408474

block_40848f:                                     ; preds = %block_408485
  %544 = add i64 %622, 7
  %545 = inttoptr i64 %189 to i32*
  store i32 0, i32* %545
  br label %block_408496

block_40858e:                                     ; preds = %block_408474
  store i64 125, i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  %546 = add i64 %183, -8
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  store i64 %548, i64* %10, align 8, !tbaa !1240
  %549 = add i64 %277, 94914
  %550 = add i64 %277, 20
  %551 = load i64, i64* %11, align 8, !tbaa !1240
  %552 = add i64 %551, -8
  %553 = inttoptr i64 %552 to i64*
  store i64 %550, i64* %553
  store i64 %552, i64* %11, align 8, !tbaa !1240
  %554 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %549, %struct.Memory* %264)
  %555 = load i64, i64* %12, align 8
  %556 = add i64 %555, -44
  %557 = load i64, i64* %3, align 8
  %558 = add i64 %557, 7
  %559 = inttoptr i64 %556 to i32*
  store i32 0, i32* %559
  %560 = add i64 %555, -48
  %561 = add i64 %555, -40
  %562 = add i64 %555, -36
  %563 = add i64 %555, -8
  %564 = add i64 %555, -16
  br label %block_4085a9

block_4085dc:                                     ; preds = %block_4085d5, %block_4085e6
  %565 = phi i64 [ %225, %block_4085d5 ], [ %156, %block_4085e6 ]
  %566 = phi %struct.Memory* [ %199, %block_4085d5 ], [ %566, %block_4085e6 ]
  %567 = inttoptr i64 %562 to i32*
  %568 = load i32, i32* %567
  %569 = add i32 %568, -5
  %570 = lshr i32 %569, 31
  %571 = lshr i32 %568, 31
  %572 = xor i32 %570, %571
  %573 = add nuw nsw i32 %572, %571
  %574 = icmp eq i32 %573, 2
  %575 = icmp ne i32 %570, 0
  %576 = xor i1 %575, %574
  %577 = select i1 %576, i64 10, i64 172
  %578 = add i64 %565, %577
  br i1 %576, label %block_4085e6, label %block_408688

block_4086c8:                                     ; preds = %block_4086c1, %block_4088e0
  %579 = phi %struct.Memory* [ %412, %block_4086c1 ], [ %163, %block_4088e0 ]
  %580 = inttoptr i64 %556 to i32*
  %581 = load i32, i32* %580
  %582 = add i32 %581, -5
  %583 = lshr i32 %582, 31
  %584 = lshr i32 %581, 31
  %585 = xor i32 %583, %584
  %586 = add nuw nsw i32 %585, %584
  %587 = icmp eq i32 %586, 2
  %588 = icmp ne i32 %583, 0
  %589 = xor i1 %588, %587
  br i1 %589, label %block_4086d2, label %block_4088f3

block_408688:                                     ; preds = %block_4085dc
  %590 = inttoptr i64 %561 to i32*
  %591 = load i32, i32* %590
  %592 = add i32 %591, 1
  %593 = inttoptr i64 %561 to i32*
  store i32 %592, i32* %593
  %594 = add i64 %578, -189
  br label %block_4085cb

block_40835e:                                     ; preds = %block_40841d, %block_408357
  %595 = phi i64 [ %218, %block_408357 ], [ %503, %block_40841d ]
  %596 = phi %struct.Memory* [ %250, %block_408357 ], [ %510, %block_40841d ]
  %597 = inttoptr i64 %62 to i32*
  %598 = load i32, i32* %597
  %599 = add i32 %598, -5
  %600 = lshr i32 %599, 31
  %601 = lshr i32 %598, 31
  %602 = xor i32 %600, %601
  %603 = add nuw nsw i32 %602, %601
  %604 = icmp eq i32 %603, 2
  %605 = icmp ne i32 %600, 0
  %606 = xor i1 %605, %604
  %607 = select i1 %606, i64 10, i64 210
  %608 = add i64 %595, %607
  br i1 %606, label %block_408368, label %block_408430

block_408485:                                     ; preds = %block_40847e, %block_408568
  %609 = phi i64 [ %216, %block_40847e ], [ %102, %block_408568 ]
  %610 = phi %struct.Memory* [ %264, %block_40847e ], [ %524, %block_408568 ]
  %611 = inttoptr i64 %188 to i32*
  %612 = load i32, i32* %611
  %613 = add i32 %612, -5
  %614 = lshr i32 %613, 31
  %615 = lshr i32 %612, 31
  %616 = xor i32 %614, %615
  %617 = add nuw nsw i32 %616, %615
  %618 = icmp eq i32 %617, 2
  %619 = icmp ne i32 %614, 0
  %620 = xor i1 %619, %618
  %621 = select i1 %620, i64 10, i64 246
  %622 = add i64 %609, %621
  br i1 %620, label %block_40848f, label %block_40857b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4117a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = load i64, i64* %14, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  %20 = add i64 %17, -12
  %21 = load i32, i32* %9, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %17, -16
  %24 = load i32, i32* %7, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %17, -20
  %27 = load i32, i32* %5, align 4
  %28 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %28
  %29 = add i64 %17, -32
  %30 = load i64, i64* %11, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %17, -12
  %33 = inttoptr i64 %32 to i32*
  %34 = load i32, i32* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %38 = icmp eq i32 %34, 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = lshr i32 %34, 31
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = select i1 %38, i64 27, i64 216
  %44 = add i64 %43, %1
  br i1 %38, label %block_4117bb, label %block_411878

block_411afc:                                     ; preds = %block_411a1f, %block_411af7
  %45 = phi %struct.Memory* [ %482, %block_411a1f ], [ %46, %block_411af7 ]
  br label %block_411b01

block_411af7:                                     ; preds = %block_411a24, %block_411af2
  %46 = phi %struct.Memory* [ %2, %block_411a24 ], [ %497, %block_411af2 ]
  br label %block_411afc

block_411974:                                     ; preds = %block_41196a
  %47 = inttoptr i64 %29 to i64*
  %48 = load i64, i64* %47
  %49 = add i32 %108, -1
  %50 = sext i32 %49 to i64
  store i64 %50, i64* %13, align 8, !tbaa !1240
  %51 = shl nsw i64 %50, 2
  %52 = add i64 %48, %51
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %12, align 8, !tbaa !1240
  %56 = inttoptr i64 %26 to i32*
  %57 = load i32, i32* %56
  %58 = sext i32 %57 to i64
  %59 = mul nsw i64 %58, 2400
  %60 = add i64 %59, ptrtoint (%idmo_type* @idmo to i64)
  %61 = inttoptr i64 %358 to i32*
  %62 = load i32, i32* %61
  %63 = sext i32 %62 to i64
  %64 = mul nsw i64 %63, 400
  %65 = add i64 %64, %60
  %66 = sext i32 %108 to i64
  store i64 %66, i64* %11, align 8, !tbaa !1240
  %67 = shl nsw i64 %66, 2
  %68 = add i64 %65, 180
  %69 = add i64 %68, %67
  %70 = inttoptr i64 %69 to i32*
  store i32 %54, i32* %70
  %71 = inttoptr i64 %355 to i32*
  %72 = load i32, i32* %71
  %73 = add i32 %72, 1
  %74 = zext i32 %73 to i64
  store i64 %74, i64* %10, align 8, !tbaa !1240
  %75 = inttoptr i64 %355 to i32*
  store i32 %73, i32* %75
  %76 = add i64 %119, -10
  br label %block_41196a

block_411873:                                     ; preds = %block_41181e
  %77 = icmp ult i32 %407, 4
  %78 = zext i1 %77 to i8
  %79 = and i32 %408, 255
  %80 = tail call i32 @llvm.ctpop.i32(i32 %79) #11
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = xor i32 %408, %407
  %85 = lshr i32 %84, 4
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = icmp eq i32 %408, 0
  %89 = zext i1 %88 to i8
  %90 = zext i1 %414 to i8
  store i8 %78, i8* %35, align 1, !tbaa !1248
  store i8 %83, i8* %36, align 1, !tbaa !1261
  store i8 %87, i8* %37, align 1, !tbaa !1262
  store i8 %89, i8* %39, align 1, !tbaa !1263
  store i8 %410, i8* %41, align 1, !tbaa !1264
  store i8 %90, i8* %42, align 1, !tbaa !1265
  br label %block_411b06

block_411af2:                                     ; preds = %block_411a97
  %91 = icmp ult i32 %499, 4
  %92 = zext i1 %91 to i8
  %93 = and i32 %500, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #11
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  %98 = xor i32 %500, %499
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = icmp eq i32 %500, 0
  %103 = zext i1 %102 to i8
  %104 = zext i1 %506 to i8
  store i8 %92, i8* %35, align 1, !tbaa !1248
  store i8 %97, i8* %36, align 1, !tbaa !1261
  store i8 %101, i8* %37, align 1, !tbaa !1262
  store i8 %103, i8* %39, align 1, !tbaa !1263
  store i8 %502, i8* %41, align 1, !tbaa !1264
  store i8 %104, i8* %42, align 1, !tbaa !1265
  br label %block_411af7

block_41196a:                                     ; preds = %block_411963, %block_411974
  %105 = phi i64 [ %356, %block_411963 ], [ %76, %block_411974 ]
  %106 = phi %struct.Memory* [ %2, %block_411963 ], [ %106, %block_411974 ]
  %107 = inttoptr i64 %355 to i32*
  %108 = load i32, i32* %107
  %109 = add i32 %108, -5
  %110 = lshr i32 %109, 31
  %111 = trunc i32 %110 to i8
  %112 = lshr i32 %108, 31
  %113 = xor i32 %110, %112
  %114 = add nuw nsw i32 %113, %112
  %115 = icmp eq i32 %114, 2
  %116 = icmp ne i8 %111, 0
  %117 = xor i1 %116, %115
  %118 = select i1 %117, i64 10, i64 89
  %119 = add i64 %105, %118
  br i1 %117, label %block_411974, label %block_4119c3

block_4118fc:                                     ; preds = %block_4118f2
  %120 = inttoptr i64 %29 to i64*
  %121 = load i64, i64* %120
  %122 = sext i32 %234 to i64
  store i64 %122, i64* %12, align 8, !tbaa !1240
  %123 = shl nsw i64 %122, 2
  %124 = add i64 %121, 16
  %125 = add i64 %124, %123
  %126 = inttoptr i64 %125 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %13, align 8, !tbaa !1240
  %129 = inttoptr i64 %26 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  %132 = mul nsw i64 %131, 2400
  %133 = add i64 %132, ptrtoint (%idmo_type* @idmo to i64)
  %134 = inttoptr i64 %514 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 400
  %138 = add i64 %137, %133
  %139 = add i64 %138, 300
  %140 = mul nsw i64 %122, 20
  store i64 %140, i64* %11, align 8, !tbaa !1240
  %141 = add i64 %140, %139
  %142 = add i64 %141, 16
  %143 = inttoptr i64 %142 to i32*
  store i32 %127, i32* %143
  %144 = inttoptr i64 %511 to i32*
  %145 = load i32, i32* %144
  %146 = add i32 %145, 1
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %10, align 8, !tbaa !1240
  %148 = inttoptr i64 %511 to i32*
  store i32 %146, i32* %148
  %149 = add i64 %245, -10
  br label %block_4118f2

block_411954:                                     ; preds = %block_4118f2
  %150 = icmp ult i32 %234, 4
  %151 = zext i1 %150 to i8
  %152 = and i32 %235, 255
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #11
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = xor i32 %235, %234
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = icmp eq i32 %235, 0
  %162 = zext i1 %161 to i8
  %163 = zext i1 %241 to i8
  store i8 %151, i8* %35, align 1, !tbaa !1248
  store i8 %156, i8* %36, align 1, !tbaa !1261
  store i8 %160, i8* %37, align 1, !tbaa !1262
  store i8 %162, i8* %39, align 1, !tbaa !1263
  store i8 %237, i8* %41, align 1, !tbaa !1264
  store i8 %163, i8* %42, align 1, !tbaa !1265
  br label %block_411b01

block_4117c2:                                     ; preds = %block_4117cc, %block_4117bb
  %164 = phi i64 [ %209, %block_4117bb ], [ %403, %block_4117cc ]
  %165 = phi %struct.Memory* [ %2, %block_4117bb ], [ %165, %block_4117cc ]
  %166 = inttoptr i64 %208 to i32*
  %167 = load i32, i32* %166
  %168 = add i32 %167, -5
  %169 = lshr i32 %168, 31
  %170 = trunc i32 %169 to i8
  %171 = lshr i32 %167, 31
  %172 = xor i32 %169, %171
  %173 = add nuw nsw i32 %172, %171
  %174 = icmp eq i32 %173, 2
  %175 = icmp ne i8 %170, 0
  %176 = xor i1 %175, %174
  %177 = select i1 %176, i64 10, i64 85
  %178 = add i64 %164, %177
  br i1 %176, label %block_4117cc, label %block_411817

block_411a3f:                                     ; preds = %block_411a35
  %179 = inttoptr i64 %29 to i64*
  %180 = load i64, i64* %179
  %181 = add i32 %215, -1
  %182 = sext i32 %181 to i64
  store i64 %182, i64* %13, align 8, !tbaa !1240
  %183 = shl nsw i64 %182, 2
  %184 = add i64 %180, %183
  %185 = inttoptr i64 %184 to i32*
  %186 = load i32, i32* %185
  %187 = zext i32 %186 to i64
  store i64 %187, i64* %12, align 8, !tbaa !1240
  %188 = inttoptr i64 %26 to i32*
  %189 = load i32, i32* %188
  %190 = sext i32 %189 to i64
  %191 = mul nsw i64 %190, 2400
  %192 = add i64 %191, ptrtoint (%idmo_type* @idmo to i64)
  %193 = inttoptr i64 %230 to i32*
  %194 = load i32, i32* %193
  %195 = sext i32 %194 to i64
  %196 = mul nsw i64 %195, 400
  %197 = add i64 %196, %192
  %198 = sext i32 %215 to i64
  %199 = mul nsw i64 %198, 20
  store i64 %199, i64* %11, align 8, !tbaa !1240
  %200 = add i64 %199, %197
  %201 = inttoptr i64 %200 to i32*
  store i32 %186, i32* %201
  %202 = inttoptr i64 %227 to i32*
  %203 = load i32, i32* %202
  %204 = add i32 %203, 1
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %10, align 8, !tbaa !1240
  %206 = inttoptr i64 %227 to i32*
  store i32 %204, i32* %206
  %207 = add i64 %226, -10
  br label %block_411a35

block_4117bb:                                     ; preds = %block_4117a0
  %208 = add i64 %17, -36
  %209 = add i64 %44, 7
  %210 = inttoptr i64 %208 to i32*
  store i32 1, i32* %210
  %211 = add i64 %17, -16
  br label %block_4117c2

block_411a35:                                     ; preds = %block_411a2e, %block_411a3f
  %212 = phi i64 [ %228, %block_411a2e ], [ %207, %block_411a3f ]
  %213 = phi %struct.Memory* [ %2, %block_411a2e ], [ %213, %block_411a3f ]
  %214 = inttoptr i64 %227 to i32*
  %215 = load i32, i32* %214
  %216 = add i32 %215, -5
  %217 = lshr i32 %216, 31
  %218 = trunc i32 %217 to i8
  %219 = lshr i32 %215, 31
  %220 = xor i32 %217, %219
  %221 = add nuw nsw i32 %220, %219
  %222 = icmp eq i32 %221, 2
  %223 = icmp ne i8 %218, 0
  %224 = xor i1 %223, %222
  %225 = select i1 %224, i64 10, i64 91
  %226 = add i64 %212, %225
  br i1 %224, label %block_411a3f, label %block_411a90

block_411a2e:                                     ; preds = %block_411a24
  %227 = add i64 %17, -36
  %228 = add i64 %293, 7
  %229 = inttoptr i64 %227 to i32*
  store i32 1, i32* %229
  %230 = add i64 %17, -16
  br label %block_411a35

block_4118f2:                                     ; preds = %block_4118eb, %block_4118fc
  %231 = phi i64 [ %373, %block_4118eb ], [ %149, %block_4118fc ]
  %232 = phi %struct.Memory* [ %457, %block_4118eb ], [ %232, %block_4118fc ]
  %233 = inttoptr i64 %511 to i32*
  %234 = load i32, i32* %233
  %235 = add i32 %234, -4
  %236 = lshr i32 %235, 31
  %237 = trunc i32 %236 to i8
  %238 = lshr i32 %234, 31
  %239 = xor i32 %236, %238
  %240 = add nuw nsw i32 %239, %238
  %241 = icmp eq i32 %240, 2
  %242 = icmp ne i8 %237, 0
  %243 = xor i1 %242, %241
  %244 = select i1 %243, i64 10, i64 98
  %245 = add i64 %231, %244
  br i1 %243, label %block_4118fc, label %block_411954

block_411828:                                     ; preds = %block_41181e
  %246 = inttoptr i64 %29 to i64*
  %247 = load i64, i64* %246
  %248 = sext i32 %407 to i64
  store i64 %248, i64* %12, align 8, !tbaa !1240
  %249 = shl nsw i64 %248, 2
  %250 = add i64 %247, 16
  %251 = add i64 %250, %249
  %252 = inttoptr i64 %251 to i32*
  %253 = load i32, i32* %252
  %254 = zext i32 %253 to i64
  store i64 %254, i64* %13, align 8, !tbaa !1240
  %255 = inttoptr i64 %26 to i32*
  %256 = load i32, i32* %255
  %257 = sext i32 %256 to i64
  %258 = mul nsw i64 %257, 2400
  %259 = add i64 %258, ptrtoint (%idmo_type* @idmo to i64)
  %260 = inttoptr i64 %211 to i32*
  %261 = load i32, i32* %260
  %262 = sext i32 %261 to i64
  %263 = mul nsw i64 %262, 400
  %264 = add i64 %263, %259
  store i64 %248, i64* %11, align 8, !tbaa !1240
  %265 = add i64 %264, 200
  %266 = add i64 %265, %249
  %267 = inttoptr i64 %266 to i32*
  store i32 %253, i32* %267
  %268 = inttoptr i64 %208 to i32*
  %269 = load i32, i32* %268
  %270 = add i32 %269, 1
  %271 = zext i32 %270 to i64
  store i64 %271, i64* %10, align 8, !tbaa !1240
  %272 = inttoptr i64 %208 to i32*
  store i32 %270, i32* %272
  %273 = add i64 %418, -10
  br label %block_41181e

block_411a24:                                     ; preds = %block_411959
  %274 = add i32 %34, -3
  store i8 0, i8* %35, align 1, !tbaa !1248
  %275 = and i32 %274, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #11
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %36, align 1, !tbaa !1261
  %280 = xor i32 %274, %34
  %281 = lshr i32 %280, 4
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %37, align 1, !tbaa !1262
  %284 = icmp eq i32 %274, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %39, align 1, !tbaa !1263
  %286 = lshr i32 %274, 31
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %41, align 1, !tbaa !1264
  %288 = xor i32 %286, %40
  %289 = add nuw nsw i32 %288, %40
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %42, align 1, !tbaa !1265
  %292 = select i1 %284, i64 10, i64 211
  %293 = add i64 %325, %292
  br i1 %284, label %block_411a2e, label %block_411af7

block_4119d4:                                     ; preds = %block_4119ca
  %294 = inttoptr i64 %29 to i64*
  %295 = load i64, i64* %294
  %296 = sext i32 %484 to i64
  store i64 %296, i64* %12, align 8, !tbaa !1240
  %297 = shl nsw i64 %296, 2
  %298 = add i64 %295, 16
  %299 = add i64 %298, %297
  %300 = inttoptr i64 %299 to i32*
  %301 = load i32, i32* %300
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %13, align 8, !tbaa !1240
  %303 = inttoptr i64 %26 to i32*
  %304 = load i32, i32* %303
  %305 = sext i32 %304 to i64
  %306 = mul nsw i64 %305, 2400
  %307 = add i64 %306, ptrtoint (%idmo_type* @idmo to i64)
  %308 = inttoptr i64 %358 to i32*
  %309 = load i32, i32* %308
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, 400
  %312 = add i64 %311, %307
  store i64 %296, i64* %11, align 8, !tbaa !1240
  %313 = add i64 %312, 380
  %314 = add i64 %313, %297
  %315 = inttoptr i64 %314 to i32*
  store i32 %301, i32* %315
  %316 = inttoptr i64 %355 to i32*
  %317 = load i32, i32* %316
  %318 = add i32 %317, 1
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %10, align 8, !tbaa !1240
  %320 = inttoptr i64 %355 to i32*
  store i32 %318, i32* %320
  %321 = add i64 %495, -10
  br label %block_4119ca

block_411959:                                     ; preds = %block_411878
  %322 = add i32 %34, -2
  %323 = icmp eq i32 %322, 0
  %324 = select i1 %323, i64 10, i64 203
  %325 = add i64 %474, %324
  br i1 %323, label %block_411963, label %block_411a24

block_411aa1:                                     ; preds = %block_411a97
  %326 = inttoptr i64 %29 to i64*
  %327 = load i64, i64* %326
  %328 = sext i32 %499 to i64
  store i64 %328, i64* %12, align 8, !tbaa !1240
  %329 = shl nsw i64 %328, 2
  %330 = add i64 %327, 16
  %331 = add i64 %330, %329
  %332 = inttoptr i64 %331 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %13, align 8, !tbaa !1240
  %335 = inttoptr i64 %26 to i32*
  %336 = load i32, i32* %335
  %337 = sext i32 %336 to i64
  %338 = mul nsw i64 %337, 2400
  %339 = add i64 %338, ptrtoint (%idmo_type* @idmo to i64)
  %340 = inttoptr i64 %230 to i32*
  %341 = load i32, i32* %340
  %342 = sext i32 %341 to i64
  %343 = mul nsw i64 %342, 400
  %344 = add i64 %343, %339
  %345 = add i64 %344, 100
  %346 = mul nsw i64 %328, 20
  store i64 %346, i64* %11, align 8, !tbaa !1240
  %347 = add i64 %346, %345
  %348 = inttoptr i64 %347 to i32*
  store i32 %333, i32* %348
  %349 = inttoptr i64 %227 to i32*
  %350 = load i32, i32* %349
  %351 = add i32 %350, 1
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %10, align 8, !tbaa !1240
  %353 = inttoptr i64 %227 to i32*
  store i32 %351, i32* %353
  %354 = add i64 %510, -10
  br label %block_411a97

block_411963:                                     ; preds = %block_411959
  %355 = add i64 %17, -36
  %356 = add i64 %325, 7
  %357 = inttoptr i64 %355 to i32*
  store i32 1, i32* %357
  %358 = add i64 %17, -16
  br label %block_41196a

block_411a1f:                                     ; preds = %block_4119ca
  %359 = icmp ult i32 %484, 4
  %360 = zext i1 %359 to i8
  %361 = and i32 %485, 255
  %362 = tail call i32 @llvm.ctpop.i32(i32 %361) #11
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  %366 = xor i32 %485, %484
  %367 = lshr i32 %366, 4
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = icmp eq i32 %485, 0
  %371 = zext i1 %370 to i8
  %372 = zext i1 %491 to i8
  store i8 %360, i8* %35, align 1, !tbaa !1248
  store i8 %365, i8* %36, align 1, !tbaa !1261
  store i8 %369, i8* %37, align 1, !tbaa !1262
  store i8 %371, i8* %39, align 1, !tbaa !1263
  store i8 %487, i8* %41, align 1, !tbaa !1264
  store i8 %372, i8* %42, align 1, !tbaa !1265
  br label %block_411afc

block_4118eb:                                     ; preds = %block_411889
  %373 = add i64 %470, 7
  %374 = inttoptr i64 %511 to i32*
  store i32 0, i32* %374
  br label %block_4118f2

block_4117cc:                                     ; preds = %block_4117c2
  %375 = inttoptr i64 %29 to i64*
  %376 = load i64, i64* %375
  %377 = add i32 %167, -1
  %378 = sext i32 %377 to i64
  store i64 %378, i64* %13, align 8, !tbaa !1240
  %379 = shl nsw i64 %378, 2
  %380 = add i64 %376, %379
  %381 = inttoptr i64 %380 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %12, align 8, !tbaa !1240
  %384 = inttoptr i64 %26 to i32*
  %385 = load i32, i32* %384
  %386 = sext i32 %385 to i64
  %387 = mul nsw i64 %386, 2400
  %388 = add i64 %387, ptrtoint (%idmo_type* @idmo to i64)
  %389 = inttoptr i64 %211 to i32*
  %390 = load i32, i32* %389
  %391 = sext i32 %390 to i64
  %392 = mul nsw i64 %391, 400
  %393 = add i64 %392, %388
  %394 = sext i32 %167 to i64
  store i64 %394, i64* %11, align 8, !tbaa !1240
  %395 = shl nsw i64 %394, 2
  %396 = add i64 %395, %393
  %397 = inttoptr i64 %396 to i32*
  store i32 %382, i32* %397
  %398 = inttoptr i64 %208 to i32*
  %399 = load i32, i32* %398
  %400 = add i32 %399, 1
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %10, align 8, !tbaa !1240
  %402 = inttoptr i64 %208 to i32*
  store i32 %400, i32* %402
  %403 = add i64 %178, -10
  br label %block_4117c2

block_41181e:                                     ; preds = %block_411817, %block_411828
  %404 = phi i64 [ %419, %block_411817 ], [ %273, %block_411828 ]
  %405 = phi %struct.Memory* [ %165, %block_411817 ], [ %405, %block_411828 ]
  %406 = inttoptr i64 %208 to i32*
  %407 = load i32, i32* %406
  %408 = add i32 %407, -4
  %409 = lshr i32 %408, 31
  %410 = trunc i32 %409 to i8
  %411 = lshr i32 %407, 31
  %412 = xor i32 %409, %411
  %413 = add nuw nsw i32 %412, %411
  %414 = icmp eq i32 %413, 2
  %415 = icmp ne i8 %410, 0
  %416 = xor i1 %415, %414
  %417 = select i1 %416, i64 10, i64 85
  %418 = add i64 %404, %417
  br i1 %416, label %block_411828, label %block_411873

block_411817:                                     ; preds = %block_4117c2
  %419 = add i64 %178, 7
  %420 = inttoptr i64 %208 to i32*
  store i32 0, i32* %420
  br label %block_41181e

block_411893:                                     ; preds = %block_411889
  %421 = inttoptr i64 %29 to i64*
  %422 = load i64, i64* %421
  %423 = add i32 %459, -1
  %424 = sext i32 %423 to i64
  store i64 %424, i64* %13, align 8, !tbaa !1240
  %425 = shl nsw i64 %424, 2
  %426 = add i64 %422, %425
  %427 = inttoptr i64 %426 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %12, align 8, !tbaa !1240
  %430 = inttoptr i64 %26 to i32*
  %431 = load i32, i32* %430
  %432 = sext i32 %431 to i64
  %433 = mul nsw i64 %432, 2400
  %434 = add i64 %433, ptrtoint (%idmo_type* @idmo to i64)
  %435 = inttoptr i64 %514 to i32*
  %436 = load i32, i32* %435
  %437 = sext i32 %436 to i64
  %438 = mul nsw i64 %437, 400
  %439 = add i64 %438, %434
  %440 = add i64 %439, 200
  %441 = sext i32 %459 to i64
  %442 = mul nsw i64 %441, 20
  store i64 %442, i64* %11, align 8, !tbaa !1240
  %443 = add i64 %442, %440
  %444 = add i64 %443, 16
  %445 = inttoptr i64 %444 to i32*
  store i32 %428, i32* %445
  %446 = inttoptr i64 %511 to i32*
  %447 = load i32, i32* %446
  %448 = add i32 %447, 1
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %10, align 8, !tbaa !1240
  %450 = inttoptr i64 %511 to i32*
  store i32 %448, i32* %450
  %451 = add i64 %470, -10
  br label %block_411889

block_4119c3:                                     ; preds = %block_41196a
  %452 = add i64 %119, 7
  %453 = inttoptr i64 %355 to i32*
  store i32 0, i32* %453
  br label %block_4119ca

block_411a90:                                     ; preds = %block_411a35
  %454 = add i64 %226, 7
  %455 = inttoptr i64 %227 to i32*
  store i32 0, i32* %455
  br label %block_411a97

block_411889:                                     ; preds = %block_411882, %block_411893
  %456 = phi i64 [ %512, %block_411882 ], [ %451, %block_411893 ]
  %457 = phi %struct.Memory* [ %2, %block_411882 ], [ %457, %block_411893 ]
  %458 = inttoptr i64 %511 to i32*
  %459 = load i32, i32* %458
  %460 = add i32 %459, -5
  %461 = lshr i32 %460, 31
  %462 = trunc i32 %461 to i8
  %463 = lshr i32 %459, 31
  %464 = xor i32 %461, %463
  %465 = add nuw nsw i32 %464, %463
  %466 = icmp eq i32 %465, 2
  %467 = icmp ne i8 %462, 0
  %468 = xor i1 %467, %466
  %469 = select i1 %468, i64 10, i64 98
  %470 = add i64 %456, %469
  br i1 %468, label %block_411893, label %block_4118eb

block_411878:                                     ; preds = %block_4117a0
  %471 = add i32 %34, -1
  %472 = icmp eq i32 %471, 0
  %473 = select i1 %472, i64 10, i64 225
  %474 = add i64 %44, %473
  br i1 %472, label %block_411882, label %block_411959

block_411b06:                                     ; preds = %block_411b01, %block_411873
  %475 = phi %struct.Memory* [ %515, %block_411b01 ], [ %405, %block_411873 ]
  %476 = inttoptr i64 %18 to i64*
  %477 = load i64, i64* %476
  store i64 %477, i64* %15, align 8, !tbaa !1240
  %478 = inttoptr i64 %17 to i64*
  %479 = load i64, i64* %478
  store i64 %479, i64* %3, align 8, !tbaa !1240
  %480 = add i64 %17, 8
  store i64 %480, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %475

block_4119ca:                                     ; preds = %block_4119c3, %block_4119d4
  %481 = phi i64 [ %452, %block_4119c3 ], [ %321, %block_4119d4 ]
  %482 = phi %struct.Memory* [ %106, %block_4119c3 ], [ %482, %block_4119d4 ]
  %483 = inttoptr i64 %355 to i32*
  %484 = load i32, i32* %483
  %485 = add i32 %484, -4
  %486 = lshr i32 %485, 31
  %487 = trunc i32 %486 to i8
  %488 = lshr i32 %484, 31
  %489 = xor i32 %486, %488
  %490 = add nuw nsw i32 %489, %488
  %491 = icmp eq i32 %490, 2
  %492 = icmp ne i8 %487, 0
  %493 = xor i1 %492, %491
  %494 = select i1 %493, i64 10, i64 85
  %495 = add i64 %481, %494
  br i1 %493, label %block_4119d4, label %block_411a1f

block_411a97:                                     ; preds = %block_411a90, %block_411aa1
  %496 = phi i64 [ %454, %block_411a90 ], [ %354, %block_411aa1 ]
  %497 = phi %struct.Memory* [ %213, %block_411a90 ], [ %497, %block_411aa1 ]
  %498 = inttoptr i64 %227 to i32*
  %499 = load i32, i32* %498
  %500 = add i32 %499, -4
  %501 = lshr i32 %500, 31
  %502 = trunc i32 %501 to i8
  %503 = lshr i32 %499, 31
  %504 = xor i32 %501, %503
  %505 = add nuw nsw i32 %504, %503
  %506 = icmp eq i32 %505, 2
  %507 = icmp ne i8 %502, 0
  %508 = xor i1 %507, %506
  %509 = select i1 %508, i64 10, i64 91
  %510 = add i64 %496, %509
  br i1 %508, label %block_411aa1, label %block_411af2

block_411882:                                     ; preds = %block_411878
  %511 = add i64 %17, -36
  %512 = add i64 %474, 7
  %513 = inttoptr i64 %511 to i32*
  store i32 1, i32* %513
  %514 = add i64 %17, -16
  br label %block_411889

block_411b01:                                     ; preds = %block_411954, %block_411afc
  %515 = phi %struct.Memory* [ %232, %block_411954 ], [ %45, %block_411afc ]
  br label %block_411b06
}

; Function Attrs: noinline
define %struct.Memory* @sub_420050_verify(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_420050:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %25 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1936) to double*)
  %26 = bitcast [32 x %union.VectorReg]* %11 to double*
  store double %25, double* %26, align 1, !tbaa !1246
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast i64* %27 to double*
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %29 = add i64 %15, -16
  %30 = load i64, i64* %8, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %15, -24
  %33 = load i64, i64* %7, align 8
  %34 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %34
  %35 = add i64 %15, -40
  %36 = inttoptr i64 %35 to double*
  store double %25, double* %36
  %37 = add i64 %1, -1200
  %38 = add i64 %1, 36
  %39 = add i64 %15, -128
  %40 = inttoptr i64 %39 to i64*
  store i64 %38, i64* %40
  store i64 %39, i64* %9, align 8, !tbaa !1240
  %41 = tail call %struct.Memory* @sub_41fba0_calc_norm(%struct.State* nonnull %0, i64 %37, %struct.Memory* %2)
  %42 = load i64, i64* %10, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %3, align 8
  %45 = load double, double* %26, align 1
  %46 = inttoptr i64 %43 to double*
  store double %45, double* %46
  %47 = add i64 %42, -16
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %49 to i32*
  store i32 1, i32* %50
  %51 = add i64 %42, -8
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %7, align 8, !tbaa !1240
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = sext i8 %55 to i64
  %57 = and i64 %56, 4294967295
  %58 = sext i8 %55 to i32
  %59 = add nsw i32 %58, -83
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, i64 31, i64 49
  %62 = add i64 %44, %61
  br i1 %60, label %block_420093, label %block_4200a5

block_4202ff:                                     ; preds = %block_4202ef
  %63 = add i64 %178, 17
  %64 = load i64, i64* %9, align 8, !tbaa !1240
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %63, i64* %66
  %67 = load i64, i64* %7, align 8, !alias.scope !1268, !noalias !1271
  %68 = load i64, i64* %863, align 8, !alias.scope !1268, !noalias !1271
  %69 = load i64, i64* %864, align 8, !alias.scope !1268, !noalias !1271
  %70 = load i64, i64* %865, align 8, !alias.scope !1268, !noalias !1271
  %71 = inttoptr i64 %64 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %64, 8
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %64, 16
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %64, 24
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  %82 = add i64 %64, 32
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %64, 40
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  %88 = add i64 %64, 48
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89
  %91 = add i64 %64, 56
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %64, 64
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %64, 72
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98
  %100 = inttoptr i64 %65 to i64*
  %101 = load i64, i64* %100
  store i64 %101, i64* %3, align 8, !alias.scope !1268, !noalias !1271
  store i64 %64, i64* %9, align 8, !alias.scope !1268, !noalias !1271
  %102 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2919), i64 %67, i64 %68, i64 %173, i64 %69, i64 %70, i64 %72, i64 %75, i64 %78, i64 %81, i64 %84, i64 %87, i64 %90, i64 %93, i64 %96, i64 %99), !noalias !1268
  %103 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2950), i64* %8, align 8, !tbaa !1240
  %104 = load i64, i64* %10, align 8
  %105 = add i64 %104, -88
  %106 = trunc i64 %102 to i32
  %107 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %107
  %108 = add i64 %103, 20
  %109 = load i64, i64* %9, align 8, !tbaa !1240
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %7, align 8, !alias.scope !1273, !noalias !1276
  %113 = load i64, i64* %863, align 8, !alias.scope !1273, !noalias !1276
  %114 = load i64, i64* %862, align 8, !alias.scope !1273, !noalias !1276
  %115 = load i64, i64* %864, align 8, !alias.scope !1273, !noalias !1276
  %116 = load i64, i64* %865, align 8, !alias.scope !1273, !noalias !1276
  %117 = inttoptr i64 %109 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %109, 8
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %109, 16
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %109, 24
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %109, 32
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %109, 40
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %109, 48
  %135 = inttoptr i64 %134 to i64*
  %136 = load i64, i64* %135
  %137 = add i64 %109, 56
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %109, 64
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = add i64 %109, 72
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  %146 = inttoptr i64 %110 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %3, align 8, !alias.scope !1273, !noalias !1276
  store i64 %109, i64* %9, align 8, !alias.scope !1273, !noalias !1276
  %148 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2950), i64 %112, i64 %113, i64 %114, i64 %115, i64 %116, i64 %118, i64 %121, i64 %124, i64 %127, i64 %130, i64 %133, i64 %136, i64 %139, i64 %142, i64 %145), !noalias !1273
  store i64 %148, i64* %861, align 8, !alias.scope !1273, !noalias !1276
  %149 = load i64, i64* %10, align 8
  %150 = add i64 %149, -92
  %151 = trunc i64 %148 to i32
  %152 = inttoptr i64 %150 to i32*
  store i32 %151, i32* %152
  br label %block_42036b

block_42017c:                                     ; preds = %block_420177, %block_4200d7
  %153 = phi i64 [ %195, %block_420177 ], [ %184, %block_4200d7 ]
  %154 = phi i64 [ %199, %block_420177 ], [ %185, %block_4200d7 ]
  %155 = phi i64 [ 5, %block_420177 ], [ 152, %block_4200d7 ]
  %156 = phi %struct.Memory* [ %198, %block_420177 ], [ %41, %block_4200d7 ]
  %157 = add i64 %154, %155
  br label %block_420181

block_4200f9:                                     ; preds = %block_4200e9
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2624) to double*)
  store double %158, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %159 = add i64 %42, -48
  %160 = add i64 %182, 13
  %161 = inttoptr i64 %159 to double*
  store double %158, double* %161
  br label %block_420177

block_4202ef:                                     ; preds = %block_420295, %block_420263, %block_4202bd
  %162 = phi i64 [ %552, %block_420263 ], [ %730, %block_420295 ], [ %362, %block_4202bd ]
  %163 = phi i64 [ %556, %block_420263 ], [ %735, %block_420295 ], [ %366, %block_4202bd ]
  %164 = phi i64 [ 115, %block_420263 ], [ 5, %block_420295 ], [ 5, %block_4202bd ]
  %165 = phi %struct.Memory* [ %781, %block_420263 ], [ %774, %block_420295 ], [ %774, %block_4202bd ]
  %166 = add i64 %163, %164
  %167 = add i64 %162, -8
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = inttoptr i64 %169 to i8*
  %171 = load i8, i8* %170
  %172 = sext i8 %171 to i64
  %173 = and i64 %172, 4294967295
  store i64 %173, i64* %6, align 8, !tbaa !1240
  %174 = sext i8 %171 to i32
  %175 = add nsw i32 %174, -85
  %176 = icmp eq i32 %175, 0
  %177 = select i1 %176, i64 16, i64 61
  %178 = add i64 %166, %177
  br i1 %176, label %block_4202ff, label %block_42032c

block_4200e9:                                     ; preds = %block_4200c7
  %179 = add nsw i32 %58, -66
  %180 = icmp eq i32 %179, 0
  %181 = select i1 %180, i64 16, i64 34
  %182 = add i64 %303, %181
  br i1 %180, label %block_4200f9, label %block_42010b

block_4200d7:                                     ; preds = %block_4200c7
  %183 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2632) to double*)
  store double %183, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %184 = add i64 %42, -48
  %185 = add i64 %303, 13
  %186 = inttoptr i64 %184 to double*
  store double %183, double* %186
  br label %block_42017c

block_42014f:                                     ; preds = %block_42012d
  %187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %187, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %188 = inttoptr i64 %53 to i8*
  store i8 85, i8* %188
  %189 = add i64 %42, -48
  %190 = inttoptr i64 %189 to double*
  store double %187, double* %190
  %191 = inttoptr i64 %47 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %450, 30
  %194 = inttoptr i64 %192 to i32*
  store i32 0, i32* %194
  br label %block_420172

block_420177:                                     ; preds = %block_420172, %block_4200f9
  %195 = phi i64 [ %562, %block_420172 ], [ %159, %block_4200f9 ]
  %196 = phi i64 [ %566, %block_420172 ], [ %160, %block_4200f9 ]
  %197 = phi i64 [ 5, %block_420172 ], [ 113, %block_4200f9 ]
  %198 = phi %struct.Memory* [ %565, %block_420172 ], [ %41, %block_4200f9 ]
  %199 = add i64 %196, %197
  br label %block_42017c

block_4201c9:                                     ; preds = %block_420186
  %200 = inttoptr i64 %902 to i64*
  %201 = load i64, i64* %200
  %202 = inttoptr i64 %201 to i8*
  %203 = load i8, i8* %202
  %204 = sext i8 %203 to i64
  %205 = and i64 %204, 4294967295
  store i64 %205, i64* %7, align 8, !tbaa !1240
  %206 = add i64 %917, 24
  %207 = load i64, i64* %9, align 8, !tbaa !1240
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209
  %210 = load i64, i64* %863, align 8, !alias.scope !1278, !noalias !1281
  %211 = load i64, i64* %864, align 8, !alias.scope !1278, !noalias !1281
  %212 = load i64, i64* %865, align 8, !alias.scope !1278, !noalias !1281
  %213 = inttoptr i64 %207 to i64*
  %214 = load i64, i64* %213
  %215 = add i64 %207, 8
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  %218 = add i64 %207, 16
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219
  %221 = add i64 %207, 24
  %222 = inttoptr i64 %221 to i64*
  %223 = load i64, i64* %222
  %224 = add i64 %207, 32
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = add i64 %207, 40
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %207, 48
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %207, 56
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %207, 64
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %207, 72
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = inttoptr i64 %208 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %3, align 8, !alias.scope !1278, !noalias !1281
  store i64 %207, i64* %9, align 8, !alias.scope !1278, !noalias !1281
  %244 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2672), i64 %205, i64 %210, i64 %909, i64 %211, i64 %212, i64 %214, i64 %217, i64 %220, i64 %223, i64 %226, i64 %229, i64 %232, i64 %235, i64 %238, i64 %241), !noalias !1278
  %245 = load i64, i64* %3, align 8
  %246 = load i64, i64* %10, align 8
  %247 = add i64 %246, -32
  %248 = inttoptr i64 %247 to double*
  %249 = load double, double* %248
  store double %249, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %250 = add i64 %246, -56
  %251 = trunc i64 %244 to i32
  %252 = inttoptr i64 %250 to i32*
  store i32 %251, i32* %252
  %253 = add i64 %245, 25
  %254 = load i64, i64* %9, align 8, !tbaa !1240
  %255 = add i64 %254, -8
  %256 = inttoptr i64 %255 to i64*
  store i64 %253, i64* %256
  %257 = load i64, i64* %7, align 8, !alias.scope !1283, !noalias !1286
  %258 = load i64, i64* %863, align 8, !alias.scope !1283, !noalias !1286
  %259 = load i64, i64* %862, align 8, !alias.scope !1283, !noalias !1286
  %260 = load i64, i64* %864, align 8, !alias.scope !1283, !noalias !1286
  %261 = load i64, i64* %865, align 8, !alias.scope !1283, !noalias !1286
  %262 = inttoptr i64 %254 to i64*
  %263 = load i64, i64* %262
  %264 = add i64 %254, 8
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  %267 = add i64 %254, 16
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %254, 24
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %254, 32
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %254, 40
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  %279 = add i64 %254, 48
  %280 = inttoptr i64 %279 to i64*
  %281 = load i64, i64* %280
  %282 = add i64 %254, 56
  %283 = inttoptr i64 %282 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %254, 64
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %254, 72
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = inttoptr i64 %255 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %3, align 8, !alias.scope !1283, !noalias !1286
  store i64 %254, i64* %9, align 8, !alias.scope !1283, !noalias !1286
  %293 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2716), i64 %257, i64 %258, i64 %259, i64 %260, i64 %261, i64 %263, i64 %266, i64 %269, i64 %272, i64 %275, i64 %278, i64 %281, i64 %284, i64 %287, i64 %290), !noalias !1283
  %294 = load i64, i64* %10, align 8
  %295 = add i64 %294, -60
  %296 = trunc i64 %293 to i32
  %297 = load i64, i64* %3, align 8
  %298 = inttoptr i64 %295 to i32*
  store i32 %296, i32* %298
  %299 = add i64 %297, 28
  br label %block_420216

block_4200c7:                                     ; preds = %block_4200a5
  %300 = add nsw i32 %58, -65
  %301 = icmp eq i32 %300, 0
  %302 = select i1 %301, i64 16, i64 34
  %303 = add i64 %616, %302
  br i1 %301, label %block_4200d7, label %block_4200e9

block_4202bd:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %304 = load i64, i64* %10, align 8
  %305 = add i64 %304, -16
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  %308 = inttoptr i64 %307 to i32*
  store i32 0, i32* %308
  %309 = add i64 %304, -24
  %310 = inttoptr i64 %309 to double*
  %311 = load double, double* %310
  store double %311, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %312 = add i64 %304, -48
  %313 = inttoptr i64 %312 to double*
  %314 = load double, double* %313
  store double %314, double* %746, align 1, !tbaa !1246
  store double 0.000000e+00, double* %747, align 1, !tbaa !1246
  %315 = add i64 %304, -40
  %316 = inttoptr i64 %315 to double*
  %317 = load double, double* %316
  %318 = bitcast %union.VectorReg* %13 to double*
  store double %317, double* %318, align 1, !tbaa !1246
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %320 = bitcast i64* %319 to double*
  store double 0.000000e+00, double* %320, align 1, !tbaa !1246
  %321 = add i64 %777, 42
  %322 = load i64, i64* %9, align 8, !tbaa !1240
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %324
  %325 = load i64, i64* %7, align 8, !alias.scope !1288, !noalias !1291
  %326 = load i64, i64* %863, align 8, !alias.scope !1288, !noalias !1291
  %327 = load i64, i64* %862, align 8, !alias.scope !1288, !noalias !1291
  %328 = load i64, i64* %864, align 8, !alias.scope !1288, !noalias !1291
  %329 = load i64, i64* %865, align 8, !alias.scope !1288, !noalias !1291
  %330 = inttoptr i64 %322 to i64*
  %331 = load i64, i64* %330
  %332 = add i64 %322, 8
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %322, 16
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %322, 24
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %322, 32
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %322, 40
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %322, 48
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %322, 56
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %322, 64
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %322, 72
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = inttoptr i64 %323 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %3, align 8, !alias.scope !1288, !noalias !1291
  store i64 %322, i64* %9, align 8, !alias.scope !1288, !noalias !1291
  %361 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2886), i64 %325, i64 %326, i64 %327, i64 %328, i64 %329, i64 %331, i64 %334, i64 %337, i64 %340, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355, i64 %358), !noalias !1288
  %362 = load i64, i64* %10, align 8
  %363 = add i64 %362, -84
  %364 = trunc i64 %361 to i32
  %365 = load i64, i64* %3, align 8
  %366 = add i64 %365, 3
  %367 = inttoptr i64 %363 to i32*
  store i32 %364, i32* %367
  br label %block_4202ef

block_420352:                                     ; preds = %block_42032c
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 3004), i64* %8, align 8, !tbaa !1240
  %368 = add i64 %458, 17
  %369 = load i64, i64* %9, align 8, !tbaa !1240
  %370 = add i64 %369, -8
  %371 = inttoptr i64 %370 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %7, align 8, !alias.scope !1293, !noalias !1296
  %373 = load i64, i64* %863, align 8, !alias.scope !1293, !noalias !1296
  %374 = load i64, i64* %864, align 8, !alias.scope !1293, !noalias !1296
  %375 = load i64, i64* %865, align 8, !alias.scope !1293, !noalias !1296
  %376 = inttoptr i64 %369 to i64*
  %377 = load i64, i64* %376
  %378 = add i64 %369, 8
  %379 = inttoptr i64 %378 to i64*
  %380 = load i64, i64* %379
  %381 = add i64 %369, 16
  %382 = inttoptr i64 %381 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %369, 24
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %369, 32
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %369, 40
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = add i64 %369, 48
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  %396 = add i64 %369, 56
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  %399 = add i64 %369, 64
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  %402 = add i64 %369, 72
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = inttoptr i64 %370 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %3, align 8, !alias.scope !1293, !noalias !1296
  store i64 %369, i64* %9, align 8, !alias.scope !1293, !noalias !1296
  %407 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 3004), i64 %372, i64 %373, i64 %173, i64 %374, i64 %375, i64 %377, i64 %380, i64 %383, i64 %386, i64 %389, i64 %392, i64 %395, i64 %398, i64 %401, i64 %404), !noalias !1293
  store i64 %407, i64* %861, align 8, !alias.scope !1293, !noalias !1296
  %408 = load i64, i64* %10, align 8
  %409 = add i64 %408, -100
  %410 = trunc i64 %407 to i32
  %411 = inttoptr i64 %409 to i32*
  store i32 %410, i32* %411
  br label %block_42036b

block_42013d:                                     ; preds = %block_42012d
  %412 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2608) to double*)
  store double %412, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %413 = add i64 %42, -48
  %414 = inttoptr i64 %413 to double*
  store double %412, double* %414
  %415 = add i64 %450, 48
  br label %block_420172

block_42036b:                                     ; preds = %block_420339, %block_420352, %block_4202ff
  %416 = phi %struct.Memory* [ %165, %block_4202ff ], [ %165, %block_420339 ], [ %165, %block_420352 ]
  %417 = load i64, i64* %9, align 8
  %418 = add i64 %417, 112
  %419 = icmp ugt i64 %417, -113
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %18, align 1, !tbaa !1248
  %421 = trunc i64 %418 to i32
  %422 = and i32 %421, 255
  %423 = tail call i32 @llvm.ctpop.i32(i32 %422) #11
  %424 = trunc i32 %423 to i8
  %425 = and i8 %424, 1
  %426 = xor i8 %425, 1
  store i8 %426, i8* %19, align 1, !tbaa !1261
  %427 = xor i64 %417, 16
  %428 = xor i64 %427, %418
  %429 = lshr i64 %428, 4
  %430 = trunc i64 %429 to i8
  %431 = and i8 %430, 1
  store i8 %431, i8* %20, align 1, !tbaa !1262
  %432 = icmp eq i64 %418, 0
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %21, align 1, !tbaa !1263
  %434 = lshr i64 %418, 63
  %435 = trunc i64 %434 to i8
  store i8 %435, i8* %22, align 1, !tbaa !1264
  %436 = lshr i64 %417, 63
  %437 = xor i64 %434, %436
  %438 = add nuw nsw i64 %437, %434
  %439 = icmp eq i64 %438, 2
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %23, align 1, !tbaa !1265
  %441 = add i64 %417, 120
  %442 = inttoptr i64 %418 to i64*
  %443 = load i64, i64* %442
  store i64 %443, i64* %10, align 8, !tbaa !1240
  %444 = inttoptr i64 %441 to i64*
  %445 = load i64, i64* %444
  store i64 %445, i64* %3, align 8, !tbaa !1240
  %446 = add i64 %417, 128
  store i64 %446, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %416

block_42012d:                                     ; preds = %block_42010b
  %447 = add nsw i32 %58, -68
  %448 = icmp eq i32 %447, 0
  %449 = select i1 %448, i64 16, i64 34
  %450 = add i64 %817, %449
  br i1 %448, label %block_42013d, label %block_42014f

block_42032c:                                     ; preds = %block_4202ef
  %451 = add i64 %162, -16
  %452 = inttoptr i64 %451 to i64*
  %453 = load i64, i64* %452
  %454 = inttoptr i64 %453 to i32*
  %455 = load i32, i32* %454
  %456 = icmp eq i32 %455, 0
  %457 = select i1 %456, i64 38, i64 13
  %458 = add i64 %178, %457
  br i1 %456, label %block_420352, label %block_420339

block_4200b5:                                     ; preds = %block_4200a5
  %459 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2640) to double*)
  store double %459, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %460 = add i64 %42, -48
  %461 = add i64 %616, 13
  %462 = inttoptr i64 %460 to double*
  store double %459, double* %462
  br label %block_420181

block_420226:                                     ; preds = %block_420216
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2773), i64* %8, align 8, !tbaa !1240
  %463 = add i64 %631, 17
  %464 = load i64, i64* %9, align 8, !tbaa !1240
  %465 = add i64 %464, -8
  %466 = inttoptr i64 %465 to i64*
  store i64 %463, i64* %466
  %467 = load i64, i64* %7, align 8, !alias.scope !1298, !noalias !1301
  %468 = load i64, i64* %863, align 8, !alias.scope !1298, !noalias !1301
  %469 = load i64, i64* %864, align 8, !alias.scope !1298, !noalias !1301
  %470 = load i64, i64* %865, align 8, !alias.scope !1298, !noalias !1301
  %471 = inttoptr i64 %464 to i64*
  %472 = load i64, i64* %471
  %473 = add i64 %464, 8
  %474 = inttoptr i64 %473 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %464, 16
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = add i64 %464, 24
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %464, 32
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483
  %485 = add i64 %464, 40
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %464, 48
  %489 = inttoptr i64 %488 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %464, 56
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %464, 64
  %495 = inttoptr i64 %494 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %464, 72
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = inttoptr i64 %465 to i64*
  %501 = load i64, i64* %500
  store i64 %501, i64* %3, align 8, !alias.scope !1298, !noalias !1301
  store i64 %464, i64* %9, align 8, !alias.scope !1298, !noalias !1301
  %502 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2773), i64 %467, i64 %468, i64 %626, i64 %469, i64 %470, i64 %472, i64 %475, i64 %478, i64 %481, i64 %484, i64 %487, i64 %490, i64 %493, i64 %496, i64 %499), !noalias !1298
  %503 = load i64, i64* %10, align 8
  %504 = add i64 %503, -68
  %505 = trunc i64 %502 to i32
  %506 = load i64, i64* %3, align 8
  %507 = inttoptr i64 %504 to i32*
  store i32 %505, i32* %507
  %508 = add i64 %506, 28
  br label %block_420253

block_420263:                                     ; preds = %block_420253
  %509 = add i64 %780, -24
  %510 = inttoptr i64 %509 to double*
  %511 = load double, double* %510
  store double %511, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %512 = add i64 %813, 22
  %513 = load i64, i64* %9, align 8, !tbaa !1240
  %514 = add i64 %513, -8
  %515 = inttoptr i64 %514 to i64*
  store i64 %512, i64* %515
  %516 = load i64, i64* %7, align 8, !alias.scope !1303, !noalias !1306
  %517 = load i64, i64* %863, align 8, !alias.scope !1303, !noalias !1306
  %518 = load i64, i64* %864, align 8, !alias.scope !1303, !noalias !1306
  %519 = load i64, i64* %865, align 8, !alias.scope !1303, !noalias !1306
  %520 = inttoptr i64 %513 to i64*
  %521 = load i64, i64* %520
  %522 = add i64 %513, 8
  %523 = inttoptr i64 %522 to i64*
  %524 = load i64, i64* %523
  %525 = add i64 %513, 16
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %513, 24
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %513, 32
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %513, 40
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %513, 48
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %513, 56
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %513, 64
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %513, 72
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = inttoptr i64 %514 to i64*
  %550 = load i64, i64* %549
  store i64 %550, i64* %3, align 8, !alias.scope !1303, !noalias !1306
  store i64 %513, i64* %9, align 8, !alias.scope !1303, !noalias !1306
  %551 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2834), i64 %516, i64 %517, i64 %788, i64 %518, i64 %519, i64 %521, i64 %524, i64 %527, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548), !noalias !1303
  %552 = load i64, i64* %10, align 8
  %553 = add i64 %552, -76
  %554 = trunc i64 %551 to i32
  %555 = load i64, i64* %3, align 8
  %556 = add i64 %555, 3
  %557 = inttoptr i64 %553 to i32*
  store i32 %554, i32* %557
  br label %block_4202ef

block_42011b:                                     ; preds = %block_42010b
  %558 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2616) to double*)
  store double %558, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %559 = add i64 %42, -48
  %560 = add i64 %817, 13
  %561 = inttoptr i64 %559 to double*
  store double %558, double* %561
  br label %block_420172

block_420172:                                     ; preds = %block_42011b, %block_42013d, %block_42014f
  %562 = phi i64 [ %189, %block_42014f ], [ %413, %block_42013d ], [ %559, %block_42011b ]
  %563 = phi i64 [ %193, %block_42014f ], [ %415, %block_42013d ], [ %560, %block_42011b ]
  %564 = phi i64 [ 5, %block_42014f ], [ 5, %block_42013d ], [ 74, %block_42011b ]
  %565 = phi %struct.Memory* [ %41, %block_42014f ], [ %41, %block_42013d ], [ %41, %block_42011b ]
  %566 = add i64 %563, %564
  br label %block_420177

block_42023f:                                     ; preds = %block_420216
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2811), i64* %8, align 8, !tbaa !1240
  %567 = add i64 %631, 17
  %568 = load i64, i64* %9, align 8, !tbaa !1240
  %569 = add i64 %568, -8
  %570 = inttoptr i64 %569 to i64*
  store i64 %567, i64* %570
  %571 = load i64, i64* %7, align 8, !alias.scope !1308, !noalias !1311
  %572 = load i64, i64* %863, align 8, !alias.scope !1308, !noalias !1311
  %573 = load i64, i64* %864, align 8, !alias.scope !1308, !noalias !1311
  %574 = load i64, i64* %865, align 8, !alias.scope !1308, !noalias !1311
  %575 = inttoptr i64 %568 to i64*
  %576 = load i64, i64* %575
  %577 = add i64 %568, 8
  %578 = inttoptr i64 %577 to i64*
  %579 = load i64, i64* %578
  %580 = add i64 %568, 16
  %581 = inttoptr i64 %580 to i64*
  %582 = load i64, i64* %581
  %583 = add i64 %568, 24
  %584 = inttoptr i64 %583 to i64*
  %585 = load i64, i64* %584
  %586 = add i64 %568, 32
  %587 = inttoptr i64 %586 to i64*
  %588 = load i64, i64* %587
  %589 = add i64 %568, 40
  %590 = inttoptr i64 %589 to i64*
  %591 = load i64, i64* %590
  %592 = add i64 %568, 48
  %593 = inttoptr i64 %592 to i64*
  %594 = load i64, i64* %593
  %595 = add i64 %568, 56
  %596 = inttoptr i64 %595 to i64*
  %597 = load i64, i64* %596
  %598 = add i64 %568, 64
  %599 = inttoptr i64 %598 to i64*
  %600 = load i64, i64* %599
  %601 = add i64 %568, 72
  %602 = inttoptr i64 %601 to i64*
  %603 = load i64, i64* %602
  %604 = inttoptr i64 %569 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %3, align 8, !alias.scope !1308, !noalias !1311
  store i64 %568, i64* %9, align 8, !alias.scope !1308, !noalias !1311
  %606 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2811), i64 %571, i64 %572, i64 %626, i64 %573, i64 %574, i64 %576, i64 %579, i64 %582, i64 %585, i64 %588, i64 %591, i64 %594, i64 %597, i64 %600, i64 %603), !noalias !1308
  %607 = load i64, i64* %10, align 8
  %608 = add i64 %607, -72
  %609 = trunc i64 %606 to i32
  %610 = load i64, i64* %3, align 8
  %611 = add i64 %610, 3
  %612 = inttoptr i64 %608 to i32*
  store i32 %609, i32* %612
  br label %block_420253

block_4200a5:                                     ; preds = %block_420050
  %613 = add nsw i32 %58, -87
  %614 = icmp eq i32 %613, 0
  %615 = select i1 %614, i64 16, i64 34
  %616 = add i64 %62, %615
  br i1 %614, label %block_4200b5, label %block_4200c7

block_420216:                                     ; preds = %block_420202, %block_4201c9
  %617 = phi i64 [ %962, %block_420202 ], [ %299, %block_4201c9 ]
  %618 = phi i64 [ %958, %block_420202 ], [ %294, %block_4201c9 ]
  %619 = phi %struct.Memory* [ %821, %block_420202 ], [ %821, %block_4201c9 ]
  %620 = add i64 %618, -8
  %621 = inttoptr i64 %620 to i64*
  %622 = load i64, i64* %621
  %623 = inttoptr i64 %622 to i8*
  %624 = load i8, i8* %623
  %625 = sext i8 %624 to i64
  %626 = and i64 %625, 4294967295
  %627 = sext i8 %624 to i32
  %628 = add nsw i32 %627, -85
  %629 = icmp eq i32 %628, 0
  %630 = select i1 %629, i64 41, i64 16
  %631 = add i64 %617, %630
  br i1 %629, label %block_42023f, label %block_420226

block_420339:                                     ; preds = %block_42032c
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2978), i64* %8, align 8, !tbaa !1240
  %632 = add i64 %458, 17
  %633 = load i64, i64* %9, align 8, !tbaa !1240
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %632, i64* %635
  %636 = load i64, i64* %7, align 8, !alias.scope !1313, !noalias !1316
  %637 = load i64, i64* %863, align 8, !alias.scope !1313, !noalias !1316
  %638 = load i64, i64* %864, align 8, !alias.scope !1313, !noalias !1316
  %639 = load i64, i64* %865, align 8, !alias.scope !1313, !noalias !1316
  %640 = inttoptr i64 %633 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %633, 8
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = add i64 %633, 16
  %646 = inttoptr i64 %645 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %633, 24
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = add i64 %633, 32
  %652 = inttoptr i64 %651 to i64*
  %653 = load i64, i64* %652
  %654 = add i64 %633, 40
  %655 = inttoptr i64 %654 to i64*
  %656 = load i64, i64* %655
  %657 = add i64 %633, 48
  %658 = inttoptr i64 %657 to i64*
  %659 = load i64, i64* %658
  %660 = add i64 %633, 56
  %661 = inttoptr i64 %660 to i64*
  %662 = load i64, i64* %661
  %663 = add i64 %633, 64
  %664 = inttoptr i64 %663 to i64*
  %665 = load i64, i64* %664
  %666 = add i64 %633, 72
  %667 = inttoptr i64 %666 to i64*
  %668 = load i64, i64* %667
  %669 = inttoptr i64 %634 to i64*
  %670 = load i64, i64* %669
  store i64 %670, i64* %3, align 8, !alias.scope !1313, !noalias !1316
  store i64 %633, i64* %9, align 8, !alias.scope !1313, !noalias !1316
  %671 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2978), i64 %636, i64 %637, i64 %173, i64 %638, i64 %639, i64 %641, i64 %644, i64 %647, i64 %650, i64 %653, i64 %656, i64 %659, i64 %662, i64 %665, i64 %668), !noalias !1313
  store i64 %671, i64* %861, align 8, !alias.scope !1313, !noalias !1316
  %672 = load i64, i64* %10, align 8
  %673 = add i64 %672, -96
  %674 = trunc i64 %671 to i32
  %675 = inttoptr i64 %673 to i32*
  store i32 %674, i32* %675
  br label %block_42036b

block_420295:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %676 = load i64, i64* %10, align 8
  %677 = add i64 %676, -24
  %678 = inttoptr i64 %677 to double*
  %679 = load double, double* %678
  store double %679, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %680 = add i64 %676, -48
  %681 = inttoptr i64 %680 to double*
  %682 = load double, double* %681
  store double %682, double* %746, align 1, !tbaa !1246
  store double 0.000000e+00, double* %747, align 1, !tbaa !1246
  %683 = add i64 %676, -40
  %684 = inttoptr i64 %683 to double*
  %685 = load double, double* %684
  %686 = bitcast %union.VectorReg* %13 to double*
  store double %685, double* %686, align 1, !tbaa !1246
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %688 = bitcast i64* %687 to double*
  store double 0.000000e+00, double* %688, align 1, !tbaa !1246
  %689 = add i64 %777, 32
  %690 = load i64, i64* %9, align 8, !tbaa !1240
  %691 = add i64 %690, -8
  %692 = inttoptr i64 %691 to i64*
  store i64 %689, i64* %692
  %693 = load i64, i64* %7, align 8, !alias.scope !1318, !noalias !1321
  %694 = load i64, i64* %863, align 8, !alias.scope !1318, !noalias !1321
  %695 = load i64, i64* %862, align 8, !alias.scope !1318, !noalias !1321
  %696 = load i64, i64* %864, align 8, !alias.scope !1318, !noalias !1321
  %697 = load i64, i64* %865, align 8, !alias.scope !1318, !noalias !1321
  %698 = inttoptr i64 %690 to i64*
  %699 = load i64, i64* %698
  %700 = add i64 %690, 8
  %701 = inttoptr i64 %700 to i64*
  %702 = load i64, i64* %701
  %703 = add i64 %690, 16
  %704 = inttoptr i64 %703 to i64*
  %705 = load i64, i64* %704
  %706 = add i64 %690, 24
  %707 = inttoptr i64 %706 to i64*
  %708 = load i64, i64* %707
  %709 = add i64 %690, 32
  %710 = inttoptr i64 %709 to i64*
  %711 = load i64, i64* %710
  %712 = add i64 %690, 40
  %713 = inttoptr i64 %712 to i64*
  %714 = load i64, i64* %713
  %715 = add i64 %690, 48
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %690, 56
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  %721 = add i64 %690, 64
  %722 = inttoptr i64 %721 to i64*
  %723 = load i64, i64* %722
  %724 = add i64 %690, 72
  %725 = inttoptr i64 %724 to i64*
  %726 = load i64, i64* %725
  %727 = inttoptr i64 %691 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %3, align 8, !alias.scope !1318, !noalias !1321
  store i64 %690, i64* %9, align 8, !alias.scope !1318, !noalias !1321
  %729 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2853), i64 %693, i64 %694, i64 %695, i64 %696, i64 %697, i64 %699, i64 %702, i64 %705, i64 %708, i64 %711, i64 %714, i64 %717, i64 %720, i64 %723, i64 %726), !noalias !1318
  %730 = load i64, i64* %10, align 8
  %731 = add i64 %730, -80
  %732 = trunc i64 %729 to i32
  %733 = load i64, i64* %3, align 8
  %734 = inttoptr i64 %731 to i32*
  store i32 %732, i32* %734
  %735 = add i64 %733, 53
  br label %block_4202ef

block_420093:                                     ; preds = %block_420050
  %736 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2648) to double*)
  store double %736, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %737 = add i64 %42, -48
  %738 = add i64 %62, 13
  %739 = inttoptr i64 %737 to double*
  store double %736, double* %739
  br label %block_420186

block_420281:                                     ; preds = %block_420253
  %740 = add i64 %780, -40
  %741 = inttoptr i64 %740 to double*
  %742 = load double, double* %741
  store double %742, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %743 = add i64 %780, -32
  %744 = inttoptr i64 %743 to double*
  %745 = load double, double* %744
  %746 = bitcast %union.VectorReg* %12 to double*
  store double %745, double* %746, align 1, !tbaa !1246
  %747 = bitcast i64* %837 to double*
  store double 0.000000e+00, double* %747, align 1, !tbaa !1246
  %748 = add i64 %813, 14
  store i64 %748, i64* %3, align 8
  %749 = fcmp uno double %745, %742
  br i1 %749, label %750, label %762

; <label>:750:                                    ; preds = %block_420281
  %751 = fadd double %745, %742
  %752 = bitcast double %751 to i64
  %753 = and i64 %752, 9221120237041090560
  %754 = icmp eq i64 %753, 9218868437227405312
  %755 = and i64 %752, 2251799813685247
  %756 = icmp ne i64 %755, 0
  %757 = and i1 %754, %756
  br i1 %757, label %758, label %768

; <label>:758:                                    ; preds = %750
  %759 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %748, %struct.Memory* %781) #14
  %760 = load i64, i64* %3, align 8
  %761 = load i8, i8* %18, align 1, !tbaa !1248
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:762:                                    ; preds = %block_420281
  %763 = fcmp ogt double %745, %742
  br i1 %763, label %768, label %764

; <label>:764:                                    ; preds = %762
  %765 = fcmp olt double %745, %742
  br i1 %765, label %768, label %766

; <label>:766:                                    ; preds = %764
  %767 = fcmp oeq double %745, %742
  br i1 %767, label %768, label %770

; <label>:768:                                    ; preds = %766, %764, %762, %750
  %769 = phi i8 [ 0, %762 ], [ 1, %764 ], [ 0, %766 ], [ 1, %750 ]
  br label %770

; <label>:770:                                    ; preds = %768, %766
  %771 = phi i8 [ %769, %768 ], [ %792, %766 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %770, %758
  %772 = phi i8 [ %761, %758 ], [ %771, %770 ]
  %773 = phi i64 [ %760, %758 ], [ %748, %770 ]
  %774 = phi %struct.Memory* [ %759, %758 ], [ %781, %770 ]
  %775 = icmp ne i8 %772, 0
  %776 = select i1 %775, i64 46, i64 6
  %777 = add i64 %773, %776
  %778 = icmp eq i8 %772, 1
  br i1 %778, label %block_4202bd, label %block_420295

block_420253:                                     ; preds = %block_42023f, %block_420226
  %779 = phi i64 [ %611, %block_42023f ], [ %508, %block_420226 ]
  %780 = phi i64 [ %607, %block_42023f ], [ %503, %block_420226 ]
  %781 = phi %struct.Memory* [ %619, %block_42023f ], [ %619, %block_420226 ]
  %782 = add i64 %780, -8
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  store i64 %784, i64* %5, align 8, !tbaa !1240
  %785 = inttoptr i64 %784 to i8*
  %786 = load i8, i8* %785
  %787 = sext i8 %786 to i64
  %788 = and i64 %787, 4294967295
  store i64 %788, i64* %6, align 8, !tbaa !1240
  %789 = sext i8 %786 to i32
  %790 = add nsw i32 %789, -85
  %791 = icmp ult i8 %786, 85
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %18, align 1, !tbaa !1248
  %793 = and i32 %790, 255
  %794 = tail call i32 @llvm.ctpop.i32(i32 %793) #11
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  store i8 %797, i8* %19, align 1, !tbaa !1261
  %798 = xor i32 %789, 16
  %799 = xor i32 %798, %790
  %800 = lshr i32 %799, 4
  %801 = trunc i32 %800 to i8
  %802 = and i8 %801, 1
  store i8 %802, i8* %20, align 1, !tbaa !1262
  %803 = icmp eq i32 %790, 0
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %21, align 1, !tbaa !1263
  %805 = lshr i32 %790, 31
  %806 = trunc i32 %805 to i8
  store i8 %806, i8* %22, align 1, !tbaa !1264
  %807 = lshr i32 %789, 31
  %808 = xor i32 %805, %807
  %809 = add nuw nsw i32 %808, %807
  %810 = icmp eq i32 %809, 2
  %811 = zext i1 %810 to i8
  store i8 %811, i8* %23, align 1, !tbaa !1265
  %812 = select i1 %803, i64 16, i64 46
  %813 = add i64 %779, %812
  br i1 %803, label %block_420263, label %block_420281

block_42010b:                                     ; preds = %block_4200e9
  %814 = add nsw i32 %58, -67
  %815 = icmp eq i32 %814, 0
  %816 = select i1 %815, i64 16, i64 34
  %817 = add i64 %182, %816
  br i1 %815, label %block_42011b, label %block_42012d

block_420186:                                     ; preds = %block_420181, %block_420093
  %818 = phi i64 [ %964, %block_420181 ], [ %737, %block_420093 ]
  %819 = phi i64 [ %968, %block_420181 ], [ %738, %block_420093 ]
  %820 = phi i64 [ 5, %block_420181 ], [ 230, %block_420093 ]
  %821 = phi %struct.Memory* [ %967, %block_420181 ], [ %41, %block_420093 ]
  %822 = add i64 %819, %820
  %823 = inttoptr i64 %43 to double*
  %824 = load double, double* %823
  %825 = inttoptr i64 %818 to double*
  %826 = load double, double* %825
  %827 = fsub double %824, %826
  %828 = fdiv double %827, %826
  %829 = bitcast %union.VectorReg* %12 to i8*
  %830 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2656) to float*)
  %831 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2660) to float*)
  %832 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2664) to float*)
  %833 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2668) to float*)
  %834 = bitcast %union.VectorReg* %12 to float*
  store float %830, float* %834, align 1, !tbaa !1266
  %835 = getelementptr inbounds i8, i8* %829, i64 4
  %836 = bitcast i8* %835 to float*
  store float %831, float* %836, align 1, !tbaa !1266
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %838 = bitcast i64* %837 to float*
  store float %832, float* %838, align 1, !tbaa !1266
  %839 = getelementptr inbounds i8, i8* %829, i64 12
  %840 = bitcast i8* %839 to float*
  store float %833, float* %840, align 1, !tbaa !1266
  %841 = bitcast double %828 to i64
  %842 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %12, i64 0, i32 0, i32 0, i32 0, i64 0
  %843 = load i64, i64* %842, align 1
  %844 = and i64 %843, %841
  %845 = trunc i64 %844 to i32
  %846 = lshr i64 %844, 32
  %847 = trunc i64 %846 to i32
  %848 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 %845, i32* %848, align 1, !tbaa !1244
  %849 = getelementptr inbounds i8, i8* %24, i64 4
  %850 = bitcast i8* %849 to i32*
  store i32 %847, i32* %850, align 1, !tbaa !1244
  %851 = bitcast i64* %27 to i32*
  store i32 0, i32* %851, align 1, !tbaa !1244
  %852 = getelementptr inbounds i8, i8* %24, i64 12
  %853 = bitcast i8* %852 to i32*
  store i32 0, i32* %853, align 1, !tbaa !1244
  %854 = add i64 %42, -40
  %855 = load double, double* %26, align 1
  %856 = inttoptr i64 %854 to double*
  store double %855, double* %856
  %857 = add i64 %822, 48
  %858 = load i64, i64* %9, align 8, !tbaa !1240
  %859 = add i64 %858, -8
  %860 = inttoptr i64 %859 to i64*
  store i64 %857, i64* %860
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %866 = load i64, i64* %863, align 8, !alias.scope !1323, !noalias !1326
  %867 = load i64, i64* %864, align 8, !alias.scope !1323, !noalias !1326
  %868 = load i64, i64* %865, align 8, !alias.scope !1323, !noalias !1326
  %869 = inttoptr i64 %858 to i64*
  %870 = load i64, i64* %869
  %871 = add i64 %858, 8
  %872 = inttoptr i64 %871 to i64*
  %873 = load i64, i64* %872
  %874 = add i64 %858, 16
  %875 = inttoptr i64 %874 to i64*
  %876 = load i64, i64* %875
  %877 = add i64 %858, 24
  %878 = inttoptr i64 %877 to i64*
  %879 = load i64, i64* %878
  %880 = add i64 %858, 32
  %881 = inttoptr i64 %880 to i64*
  %882 = load i64, i64* %881
  %883 = add i64 %858, 40
  %884 = inttoptr i64 %883 to i64*
  %885 = load i64, i64* %884
  %886 = add i64 %858, 48
  %887 = inttoptr i64 %886 to i64*
  %888 = load i64, i64* %887
  %889 = add i64 %858, 56
  %890 = inttoptr i64 %889 to i64*
  %891 = load i64, i64* %890
  %892 = add i64 %858, 64
  %893 = inttoptr i64 %892 to i64*
  %894 = load i64, i64* %893
  %895 = add i64 %858, 72
  %896 = inttoptr i64 %895 to i64*
  %897 = load i64, i64* %896
  %898 = inttoptr i64 %859 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %3, align 8, !alias.scope !1323, !noalias !1326
  store i64 %858, i64* %9, align 8, !alias.scope !1323, !noalias !1326
  %900 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1515), i64 %53, i64 %866, i64 %57, i64 %867, i64 %868, i64 %870, i64 %873, i64 %876, i64 %879, i64 %882, i64 %885, i64 %888, i64 %891, i64 %894, i64 %897), !noalias !1323
  %901 = load i64, i64* %10, align 8
  %902 = add i64 %901, -8
  %903 = load i64, i64* %3, align 8
  %904 = inttoptr i64 %902 to i64*
  %905 = load i64, i64* %904
  %906 = inttoptr i64 %905 to i8*
  %907 = load i8, i8* %906
  %908 = sext i8 %907 to i64
  %909 = and i64 %908, 4294967295
  store i64 %909, i64* %6, align 8, !tbaa !1240
  %910 = sext i8 %907 to i32
  %911 = add nsw i32 %910, -85
  %912 = icmp eq i32 %911, 0
  %913 = add i64 %901, -52
  %914 = trunc i64 %900 to i32
  %915 = inttoptr i64 %913 to i32*
  store i32 %914, i32* %915
  %916 = select i1 %912, i64 76, i64 19
  %917 = add i64 %903, %916
  br i1 %912, label %block_420202, label %block_4201c9

block_420202:                                     ; preds = %block_420186
  %918 = add i64 %917, 17
  %919 = load i64, i64* %9, align 8, !tbaa !1240
  %920 = add i64 %919, -8
  %921 = inttoptr i64 %920 to i64*
  store i64 %918, i64* %921
  %922 = load i64, i64* %7, align 8, !alias.scope !1328, !noalias !1331
  %923 = load i64, i64* %863, align 8, !alias.scope !1328, !noalias !1331
  %924 = load i64, i64* %864, align 8, !alias.scope !1328, !noalias !1331
  %925 = load i64, i64* %865, align 8, !alias.scope !1328, !noalias !1331
  %926 = inttoptr i64 %919 to i64*
  %927 = load i64, i64* %926
  %928 = add i64 %919, 8
  %929 = inttoptr i64 %928 to i64*
  %930 = load i64, i64* %929
  %931 = add i64 %919, 16
  %932 = inttoptr i64 %931 to i64*
  %933 = load i64, i64* %932
  %934 = add i64 %919, 24
  %935 = inttoptr i64 %934 to i64*
  %936 = load i64, i64* %935
  %937 = add i64 %919, 32
  %938 = inttoptr i64 %937 to i64*
  %939 = load i64, i64* %938
  %940 = add i64 %919, 40
  %941 = inttoptr i64 %940 to i64*
  %942 = load i64, i64* %941
  %943 = add i64 %919, 48
  %944 = inttoptr i64 %943 to i64*
  %945 = load i64, i64* %944
  %946 = add i64 %919, 56
  %947 = inttoptr i64 %946 to i64*
  %948 = load i64, i64* %947
  %949 = add i64 %919, 64
  %950 = inttoptr i64 %949 to i64*
  %951 = load i64, i64* %950
  %952 = add i64 %919, 72
  %953 = inttoptr i64 %952 to i64*
  %954 = load i64, i64* %953
  %955 = inttoptr i64 %920 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %3, align 8, !alias.scope !1328, !noalias !1331
  store i64 %919, i64* %9, align 8, !alias.scope !1328, !noalias !1331
  %957 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2757), i64 %922, i64 %923, i64 %909, i64 %924, i64 %925, i64 %927, i64 %930, i64 %933, i64 %936, i64 %939, i64 %942, i64 %945, i64 %948, i64 %951, i64 %954), !noalias !1328
  %958 = load i64, i64* %10, align 8
  %959 = add i64 %958, -64
  %960 = trunc i64 %957 to i32
  %961 = load i64, i64* %3, align 8
  %962 = add i64 %961, 3
  %963 = inttoptr i64 %959 to i32*
  store i32 %960, i32* %963
  br label %block_420216

block_420181:                                     ; preds = %block_4200b5, %block_42017c
  %964 = phi i64 [ %460, %block_4200b5 ], [ %153, %block_42017c ]
  %965 = phi i64 [ %461, %block_4200b5 ], [ %157, %block_42017c ]
  %966 = phi i64 [ 191, %block_4200b5 ], [ 5, %block_42017c ]
  %967 = phi %struct.Memory* [ %41, %block_4200b5 ], [ %156, %block_42017c ]
  %968 = add i64 %965, %966
  br label %block_420186
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41d710_transfb_nc1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41d710:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %25, align 1, !tbaa !1244
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 1, !tbaa !1244
  %28 = bitcast i64* %24 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %23, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = add i64 %14, -16
  %32 = load i64, i64* %8, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %14, -24
  %35 = load i64, i64* %7, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %35, i64* %36
  %37 = inttoptr i64 %31 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %8, align 8, !tbaa !1240
  store i64 25, i64* %7, align 8, !tbaa !1240
  %39 = add i64 %1, 8512
  %40 = add i64 %1, 41
  %41 = add i64 %14, -304
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  store i64 %41, i64* %9, align 8, !tbaa !1240
  %43 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %39, %struct.Memory* %2)
  %44 = load i64, i64* %3, align 8
  store i64 25, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %25, align 1, !tbaa !1244
  store i32 0, i32* %27, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  %45 = load i64, i64* %10, align 8
  %46 = add i64 %45, -272
  store i64 %46, i64* %8, align 8, !tbaa !1240
  %47 = add i64 %44, 8471
  %48 = add i64 %44, 20
  %49 = load i64, i64* %9, align 8, !tbaa !1240
  %50 = add i64 %49, -8
  %51 = inttoptr i64 %50 to i64*
  store i64 %48, i64* %51
  store i64 %50, i64* %9, align 8, !tbaa !1240
  %52 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %47, %struct.Memory* %43)
  %53 = load i64, i64* %10, align 8
  %54 = add i64 %53, -16
  %55 = load i64, i64* %3, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56
  %58 = inttoptr i64 %57 to double*
  %59 = load double, double* %58
  %60 = bitcast [32 x %union.VectorReg]* %11 to double*
  store double %59, double* %60, align 1, !tbaa !1246
  %61 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %61, align 1, !tbaa !1246
  %62 = add i64 %53, -8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %64 to double*
  store double %59, double* %65
  %66 = add i64 %53, -276
  %67 = add i64 %55, 26
  %68 = inttoptr i64 %66 to i32*
  store i32 0, i32* %68
  %69 = bitcast %union.VectorReg* %12 to double*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %71 = bitcast i64* %70 to double*
  %72 = add i64 %53, -272
  %73 = add i64 %53, -280
  %74 = add i64 %53, -64
  %75 = add i64 %53, -284
  br label %block_41d767

block_41daf4:                                     ; preds = %block_41dbb6, %block_41daa5
  %76 = phi %struct.Memory* [ %281, %block_41daa5 ], [ %442, %block_41dbb6 ]
  %77 = inttoptr i64 %424 to i32*
  %78 = load i32, i32* %77
  %79 = add i32 %78, -5
  %80 = lshr i32 %79, 31
  %81 = lshr i32 %78, 31
  %82 = xor i32 %80, %81
  %83 = add nuw nsw i32 %82, %81
  %84 = icmp eq i32 %83, 2
  %85 = icmp ne i32 %80, 0
  %86 = xor i1 %85, %84
  br i1 %86, label %block_41db01, label %block_41dbcf

block_41d86c:                                     ; preds = %block_41d85f
  %87 = sext i32 %180 to i64
  %88 = mul nsw i64 %87, 40
  %89 = add i64 %88, %72
  store i64 %89, i64* %7, align 8, !tbaa !1240
  %90 = inttoptr i64 %66 to i32*
  %91 = load i32, i32* %90
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 3
  %94 = add i64 %93, %89
  %95 = inttoptr i64 %94 to double*
  %96 = load double, double* %95
  %97 = mul nsw i64 %87, 24
  %98 = add i64 %97, ptrtoint (%qbnew_type* @qbnew to i64)
  %99 = add i32 %168, -1
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %8, align 8, !tbaa !1240
  %101 = sext i32 %99 to i64
  %102 = shl nsw i64 %101, 3
  %103 = add i64 %98, %102
  %104 = inttoptr i64 %103 to double*
  %105 = load double, double* %104
  %106 = inttoptr i64 %54 to i64*
  %107 = load i64, i64* %106
  %108 = sext i32 %168 to i64
  %109 = mul nsw i64 %108, 40
  %110 = add i64 %109, %107
  store i64 %92, i64* %6, align 8, !tbaa !1240
  %111 = add i64 %93, %110
  %112 = inttoptr i64 %111 to double*
  %113 = load double, double* %112
  %114 = fmul double %105, %113
  store double %114, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %115 = fadd double %96, %114
  store double %115, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  %116 = inttoptr i64 %94 to double*
  store double %115, double* %116
  %117 = inttoptr i64 %75 to i32*
  %118 = load i32, i32* %117
  %119 = add i32 %118, 1
  %120 = inttoptr i64 %75 to i32*
  store i32 %119, i32* %120
  %121 = add i64 %178, -13
  br label %block_41d85f

block_41dbe8:                                     ; preds = %block_41da98
  %122 = load i64, i64* %9, align 8
  %123 = add i64 %122, 288
  %124 = icmp ugt i64 %122, -289
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %17, align 1, !tbaa !1248
  %126 = trunc i64 %123 to i32
  %127 = and i32 %126, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #11
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  store i8 %131, i8* %18, align 1, !tbaa !1261
  %132 = xor i64 %123, %122
  %133 = lshr i64 %132, 4
  %134 = trunc i64 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %19, align 1, !tbaa !1262
  %136 = icmp eq i64 %123, 0
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %20, align 1, !tbaa !1263
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %21, align 1, !tbaa !1264
  %140 = lshr i64 %122, 63
  %141 = xor i64 %138, %140
  %142 = add nuw nsw i64 %141, %138
  %143 = icmp eq i64 %142, 2
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %22, align 1, !tbaa !1265
  %145 = add i64 %122, 296
  %146 = inttoptr i64 %123 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %10, align 8, !tbaa !1240
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %3, align 8, !tbaa !1240
  %150 = add i64 %122, 304
  store i64 %150, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %281

block_41d767:                                     ; preds = %block_41d922, %block_41d710
  %151 = phi i64 [ %67, %block_41d710 ], [ %266, %block_41d922 ]
  %152 = phi %struct.Memory* [ %52, %block_41d710 ], [ %268, %block_41d922 ]
  %153 = inttoptr i64 %66 to i32*
  %154 = load i32, i32* %153
  %155 = add i32 %154, -5
  %156 = lshr i32 %155, 31
  %157 = lshr i32 %154, 31
  %158 = xor i32 %156, %157
  %159 = add nuw nsw i32 %158, %157
  %160 = icmp eq i32 %159, 2
  %161 = icmp ne i32 %156, 0
  %162 = xor i1 %161, %160
  %163 = select i1 %162, i64 13, i64 468
  %164 = add i64 %151, %163
  br i1 %162, label %block_41d774, label %block_41d93b

block_41d85f:                                     ; preds = %block_41d855, %block_41d86c
  %165 = phi i64 [ %200, %block_41d855 ], [ %121, %block_41d86c ]
  %166 = phi %struct.Memory* [ %268, %block_41d855 ], [ %166, %block_41d86c ]
  %167 = inttoptr i64 %75 to i32*
  %168 = load i32, i32* %167
  %169 = add i32 %168, -4
  %170 = lshr i32 %169, 31
  %171 = lshr i32 %168, 31
  %172 = xor i32 %170, %171
  %173 = add nuw nsw i32 %172, %171
  %174 = icmp eq i32 %173, 2
  %175 = icmp ne i32 %170, 0
  %176 = xor i1 %175, %174
  %177 = select i1 %176, i64 13, i64 170
  %178 = add i64 %165, %177
  %179 = inttoptr i64 %73 to i32*
  %180 = load i32, i32* %179
  br i1 %176, label %block_41d86c, label %block_41d909

block_41d774:                                     ; preds = %block_41d767
  store i32 0, i32* %25, align 1, !tbaa !1244
  store i32 0, i32* %27, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  %181 = inttoptr i64 %54 to i64*
  %182 = load i64, i64* %181
  %183 = sext i32 %154 to i64
  %184 = shl nsw i64 %183, 3
  %185 = add i64 %184, %182
  %186 = inttoptr i64 %185 to double*
  %187 = load double, double* %186
  store double %187, double* %69, align 1, !tbaa !1246
  store double 0.000000e+00, double* %71, align 1, !tbaa !1246
  %188 = add i64 %72, %184
  %189 = inttoptr i64 %188 to double*
  store double %187, double* %189
  %190 = inttoptr i64 %73 to i32*
  store i32 0, i32* %190
  %191 = inttoptr i64 %66 to i32*
  %192 = load i32, i32* %191
  %193 = sext i32 %192 to i64
  %194 = shl nsw i64 %193, 3
  %195 = add i64 %74, %194
  %196 = load double, double* %60, align 1
  %197 = inttoptr i64 %195 to double*
  store double %196, double* %197
  %198 = add i64 %164, 68
  %199 = inttoptr i64 %75 to i32*
  store i32 1, i32* %199
  br label %block_41d7b8

block_41d855:                                     ; preds = %block_41d848
  %200 = add i64 %280, 10
  %201 = inttoptr i64 %75 to i32*
  store i32 1, i32* %201
  br label %block_41d85f

block_41daa5:                                     ; preds = %block_41da98
  %202 = inttoptr i64 %423 to i64*
  %203 = load i64, i64* %202
  %204 = sext i32 %283 to i64
  %205 = mul nsw i64 %204, 40
  store i64 %205, i64* %6, align 8, !tbaa !1240
  %206 = add i64 %205, %203
  %207 = inttoptr i64 %206 to double*
  %208 = load double, double* %207
  %209 = add i64 %205, %422
  %210 = inttoptr i64 %209 to double*
  %211 = load double, double* %210
  %212 = fadd double %208, %211
  store double %212, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %205, i64* %5, align 8, !tbaa !1240
  %213 = inttoptr i64 %206 to double*
  store double %212, double* %213
  %214 = inttoptr i64 %424 to i32*
  store i32 0, i32* %214
  br label %block_41daf4

block_41dbcf:                                     ; preds = %block_41daf4
  %215 = inttoptr i64 %421 to i32*
  %216 = load i32, i32* %215
  %217 = add i32 %216, 1
  %218 = zext i32 %217 to i64
  store i64 %218, i64* %4, align 8, !tbaa !1240
  %219 = inttoptr i64 %421 to i32*
  store i32 %217, i32* %219
  br label %block_41da98

block_41d9a4:                                     ; preds = %block_41d997
  %220 = inttoptr i64 %397 to i64*
  %221 = load i64, i64* %220
  %222 = inttoptr i64 %400 to i32*
  %223 = load i32, i32* %222
  %224 = sext i32 %223 to i64
  %225 = mul nsw i64 %224, 40
  %226 = add i64 %225, %221
  %227 = inttoptr i64 %407 to i32*
  %228 = load i32, i32* %227
  %229 = sext i32 %228 to i64
  %230 = shl nsw i64 %229, 3
  %231 = add i64 %230, %226
  %232 = inttoptr i64 %231 to double*
  %233 = load double, double* %232
  %234 = mul nsw i64 %229, 24
  %235 = add i64 %234, ptrtoint (%qbnew_type* @qbnew to i64)
  store i64 %235, i64* %7, align 8, !tbaa !1240
  %236 = add i32 %301, -1
  %237 = zext i32 %236 to i64
  %238 = sext i32 %236 to i64
  %239 = shl nsw i64 %238, 3
  %240 = add i64 %235, %239
  %241 = inttoptr i64 %240 to double*
  %242 = load double, double* %241
  %243 = sext i32 %301 to i64
  %244 = shl nsw i64 %243, 3
  %245 = add i64 %412, %244
  %246 = inttoptr i64 %245 to double*
  %247 = load double, double* %246
  %248 = fmul double %242, %247
  %249 = fadd double %233, %248
  store i64 %237, i64* %8, align 8, !tbaa !1240
  store i64 %238, i64* %6, align 8, !tbaa !1240
  %250 = add i64 %225, %411
  %251 = add i64 %244, %250
  %252 = inttoptr i64 %251 to double*
  %253 = load double, double* %252
  %254 = fmul double %242, %253
  store double %254, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %255 = fadd double %249, %254
  store double %255, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %229, i64* %5, align 8, !tbaa !1240
  %256 = inttoptr i64 %231 to double*
  store double %255, double* %256
  %257 = inttoptr i64 %410 to i32*
  %258 = load i32, i32* %257
  %259 = add i32 %258, 1
  %260 = inttoptr i64 %410 to i32*
  store i32 %259, i32* %260
  %261 = add i64 %311, -13
  br label %block_41d997

block_41d922:                                     ; preds = %block_41d848
  %262 = inttoptr i64 %66 to i32*
  %263 = load i32, i32* %262
  %264 = add i32 %263, 1
  %265 = inttoptr i64 %66 to i32*
  store i32 %264, i32* %265
  %266 = add i64 %280, -443
  br label %block_41d767

block_41d848:                                     ; preds = %block_41d909, %block_41d83e
  %267 = phi i64 [ %413, %block_41d83e ], [ %455, %block_41d909 ]
  %268 = phi %struct.Memory* [ %429, %block_41d83e ], [ %166, %block_41d909 ]
  %269 = inttoptr i64 %73 to i32*
  %270 = load i32, i32* %269
  %271 = add i32 %270, -5
  %272 = lshr i32 %271, 31
  %273 = lshr i32 %270, 31
  %274 = xor i32 %272, %273
  %275 = add nuw nsw i32 %274, %273
  %276 = icmp eq i32 %275, 2
  %277 = icmp ne i32 %272, 0
  %278 = xor i1 %277, %276
  %279 = select i1 %278, i64 13, i64 218
  %280 = add i64 %267, %279
  br i1 %278, label %block_41d855, label %block_41d922

block_41da98:                                     ; preds = %block_41da8e, %block_41dbcf
  %281 = phi %struct.Memory* [ %458, %block_41da8e ], [ %76, %block_41dbcf ]
  %282 = inttoptr i64 %421 to i32*
  %283 = load i32, i32* %282
  %284 = add i32 %283, -5
  %285 = lshr i32 %284, 31
  %286 = lshr i32 %283, 31
  %287 = xor i32 %285, %286
  %288 = add nuw nsw i32 %287, %286
  %289 = icmp eq i32 %288, 2
  %290 = icmp ne i32 %285, 0
  %291 = xor i1 %290, %289
  br i1 %291, label %block_41daa5, label %block_41dbe8

block_41da75:                                     ; preds = %block_41d997
  %292 = inttoptr i64 %407 to i32*
  %293 = load i32, i32* %292
  %294 = add i32 %293, 1
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %4, align 8, !tbaa !1240
  %296 = inttoptr i64 %407 to i32*
  store i32 %294, i32* %296
  %297 = add i64 %311, -245
  br label %block_41d980

block_41d997:                                     ; preds = %block_41d98d, %block_41d9a4
  %298 = phi i64 [ %426, %block_41d98d ], [ %261, %block_41d9a4 ]
  %299 = phi %struct.Memory* [ %458, %block_41d98d ], [ %299, %block_41d9a4 ]
  %300 = inttoptr i64 %410 to i32*
  %301 = load i32, i32* %300
  %302 = add i32 %301, -4
  %303 = lshr i32 %302, 31
  %304 = lshr i32 %301, 31
  %305 = xor i32 %303, %304
  %306 = add nuw nsw i32 %305, %304
  %307 = icmp eq i32 %306, 2
  %308 = icmp ne i32 %303, 0
  %309 = xor i1 %308, %307
  %310 = select i1 %309, i64 13, i64 222
  %311 = add i64 %298, %310
  br i1 %309, label %block_41d9a4, label %block_41da75

block_41d7c5:                                     ; preds = %block_41d7b8
  %312 = inttoptr i64 %66 to i32*
  %313 = load i32, i32* %312
  %314 = sext i32 %313 to i64
  %315 = shl nsw i64 %314, 3
  %316 = add i64 %74, %315
  %317 = inttoptr i64 %316 to double*
  %318 = load double, double* %317
  %319 = inttoptr i64 %73 to i32*
  %320 = load i32, i32* %319
  %321 = sext i32 %320 to i64
  %322 = mul nsw i64 %321, 24
  %323 = add i64 %322, ptrtoint (%qbnew_type* @qbnew to i64)
  %324 = add i32 %431, -1
  %325 = zext i32 %324 to i64
  store i64 %325, i64* %6, align 8, !tbaa !1240
  %326 = sext i32 %324 to i64
  %327 = shl nsw i64 %326, 3
  %328 = add i64 %323, %327
  %329 = inttoptr i64 %328 to double*
  %330 = load double, double* %329
  %331 = inttoptr i64 %54 to i64*
  %332 = load i64, i64* %331
  %333 = sext i32 %431 to i64
  %334 = mul nsw i64 %333, 40
  %335 = add i64 %334, %332
  %336 = add i64 %315, %335
  %337 = inttoptr i64 %336 to double*
  %338 = load double, double* %337
  %339 = fmul double %330, %338
  store double %339, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %340 = fadd double %318, %339
  store double %340, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  %341 = inttoptr i64 %316 to double*
  store double %340, double* %341
  %342 = inttoptr i64 %75 to i32*
  %343 = load i32, i32* %342
  %344 = add i32 %343, 1
  %345 = inttoptr i64 %75 to i32*
  store i32 %344, i32* %345
  %346 = add i64 %441, -13
  br label %block_41d7b8

block_41db18:                                     ; preds = %block_41db0b
  %347 = inttoptr i64 %423 to i64*
  %348 = load i64, i64* %347
  %349 = inttoptr i64 %421 to i32*
  %350 = load i32, i32* %349
  %351 = sext i32 %350 to i64
  %352 = mul nsw i64 %351, 40
  %353 = add i64 %352, %348
  %354 = inttoptr i64 %424 to i32*
  %355 = load i32, i32* %354
  %356 = sext i32 %355 to i64
  store i64 %356, i64* %7, align 8, !tbaa !1240
  %357 = shl nsw i64 %356, 3
  %358 = add i64 %357, %353
  %359 = inttoptr i64 %358 to double*
  %360 = load double, double* %359
  %361 = mul nsw i64 %356, 24
  %362 = add i64 %361, ptrtoint (%qbnew_type* @qbnew to i64)
  %363 = add i32 %444, -1
  %364 = zext i32 %363 to i64
  store i64 %364, i64* %8, align 8, !tbaa !1240
  %365 = sext i32 %363 to i64
  store i64 %365, i64* %6, align 8, !tbaa !1240
  %366 = shl nsw i64 %365, 3
  %367 = add i64 %362, %366
  %368 = inttoptr i64 %367 to double*
  %369 = load double, double* %368
  %370 = add i64 %352, %422
  %371 = sext i32 %444 to i64
  %372 = shl nsw i64 %371, 3
  %373 = add i64 %372, %370
  %374 = inttoptr i64 %373 to double*
  %375 = load double, double* %374
  %376 = fmul double %369, %375
  store double %376, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %377 = fadd double %360, %376
  store double %377, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %356, i64* %5, align 8, !tbaa !1240
  %378 = inttoptr i64 %358 to double*
  store double %377, double* %378
  %379 = inttoptr i64 %425 to i32*
  %380 = load i32, i32* %379
  %381 = add i32 %380, 1
  %382 = inttoptr i64 %425 to i32*
  store i32 %381, i32* %382
  br label %block_41db0b

block_41d93b:                                     ; preds = %block_41d767
  %383 = inttoptr i64 %66 to i32*
  store i32 0, i32* %383
  %384 = inttoptr i64 %62 to i64*
  %385 = load i64, i64* %384
  %386 = inttoptr i64 %66 to i32*
  %387 = load i32, i32* %386
  %388 = sext i32 %387 to i64
  %389 = mul nsw i64 %388, 40
  %390 = add i64 %389, %385
  %391 = inttoptr i64 %390 to double*
  %392 = load double, double* %391
  %393 = inttoptr i64 %74 to double*
  %394 = load double, double* %393
  %395 = fadd double %392, %394
  store double %395, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  %396 = load i64, i64* %10, align 8
  %397 = add i64 %396, -8
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %396, -276
  %401 = inttoptr i64 %400 to i32*
  %402 = load i32, i32* %401
  %403 = sext i32 %402 to i64
  %404 = mul nsw i64 %403, 40
  store i64 %404, i64* %5, align 8, !tbaa !1240
  %405 = add i64 %404, %399
  store i64 %405, i64* %4, align 8, !tbaa !1240
  %406 = inttoptr i64 %405 to double*
  store double %395, double* %406
  %407 = add i64 %396, -280
  %408 = add i64 %164, 69
  %409 = inttoptr i64 %407 to i32*
  store i32 0, i32* %409
  %410 = add i64 %396, -284
  %411 = add i64 %396, -272
  %412 = add i64 %396, -64
  br label %block_41d980

block_41d83e:                                     ; preds = %block_41d7b8
  %413 = add i64 %441, 10
  %414 = inttoptr i64 %73 to i32*
  store i32 1, i32* %414
  br label %block_41d848

block_41dbb6:                                     ; preds = %block_41db0b
  %415 = inttoptr i64 %424 to i32*
  %416 = load i32, i32* %415
  %417 = add i32 %416, 1
  %418 = inttoptr i64 %424 to i32*
  store i32 %417, i32* %418
  br label %block_41daf4

block_41da8e:                                     ; preds = %block_41d980
  %419 = inttoptr i64 %400 to i32*
  store i32 1, i32* %419
  %420 = load i64, i64* %10, align 8
  %421 = add i64 %420, -276
  %422 = add i64 %420, -272
  %423 = add i64 %420, -8
  %424 = add i64 %420, -280
  %425 = add i64 %420, -284
  br label %block_41da98

block_41d98d:                                     ; preds = %block_41d980
  %426 = add i64 %471, 10
  %427 = inttoptr i64 %410 to i32*
  store i32 1, i32* %427
  br label %block_41d997

block_41d7b8:                                     ; preds = %block_41d7c5, %block_41d774
  %428 = phi i64 [ %198, %block_41d774 ], [ %346, %block_41d7c5 ]
  %429 = phi %struct.Memory* [ %152, %block_41d774 ], [ %429, %block_41d7c5 ]
  %430 = inttoptr i64 %75 to i32*
  %431 = load i32, i32* %430
  %432 = add i32 %431, -4
  %433 = lshr i32 %432, 31
  %434 = lshr i32 %431, 31
  %435 = xor i32 %433, %434
  %436 = add nuw nsw i32 %435, %434
  %437 = icmp eq i32 %436, 2
  %438 = icmp ne i32 %433, 0
  %439 = xor i1 %438, %437
  %440 = select i1 %439, i64 13, i64 134
  %441 = add i64 %428, %440
  br i1 %439, label %block_41d7c5, label %block_41d83e

block_41db0b:                                     ; preds = %block_41db01, %block_41db18
  %442 = phi %struct.Memory* [ %76, %block_41db01 ], [ %442, %block_41db18 ]
  %443 = inttoptr i64 %425 to i32*
  %444 = load i32, i32* %443
  %445 = add i32 %444, -4
  %446 = lshr i32 %445, 31
  %447 = lshr i32 %444, 31
  %448 = xor i32 %446, %447
  %449 = add nuw nsw i32 %448, %447
  %450 = icmp eq i32 %449, 2
  %451 = icmp ne i32 %446, 0
  %452 = xor i1 %451, %450
  br i1 %452, label %block_41db18, label %block_41dbb6

block_41d909:                                     ; preds = %block_41d85f
  %453 = add i32 %180, 1
  %454 = inttoptr i64 %73 to i32*
  store i32 %453, i32* %454
  %455 = add i64 %178, -193
  br label %block_41d848

block_41db01:                                     ; preds = %block_41daf4
  %456 = inttoptr i64 %425 to i32*
  store i32 1, i32* %456
  br label %block_41db0b

block_41d980:                                     ; preds = %block_41d93b, %block_41da75
  %457 = phi i64 [ %408, %block_41d93b ], [ %297, %block_41da75 ]
  %458 = phi %struct.Memory* [ %152, %block_41d93b ], [ %299, %block_41da75 ]
  %459 = inttoptr i64 %407 to i32*
  %460 = load i32, i32* %459
  %461 = add i32 %460, -5
  %462 = lshr i32 %461, 31
  %463 = trunc i32 %462 to i8
  %464 = lshr i32 %460, 31
  %465 = xor i32 %462, %464
  %466 = add nuw nsw i32 %465, %464
  %467 = icmp eq i32 %466, 2
  %468 = icmp ne i8 %463, 0
  %469 = xor i1 %468, %467
  %470 = select i1 %469, i64 13, i64 270
  %471 = add i64 %457, %470
  br i1 %469, label %block_41d98d, label %block_41da8e
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402a70_find_coarsen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402a70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -16
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -20
  %28 = load i32, i32* %7, align 4
  %29 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %29
  %30 = inttoptr i64 %24 to i64*
  %31 = load i64, i64* %30
  store i64 %31, i64* %10, align 8, !tbaa !1240
  %32 = inttoptr i64 %31 to i32*
  store i32 0, i32* %32
  %33 = add i64 %14, -28
  %34 = add i64 %1, 32
  %35 = inttoptr i64 %33 to i32*
  store i32 0, i32* %35
  br label %block_402a90

block_402b63:                                     ; preds = %block_402a90
  %36 = load i64, i64* %11, align 8
  %37 = add i64 %36, 32
  %38 = icmp ugt i64 %36, -33
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %18, align 1, !tbaa !1248
  %40 = trunc i64 %37 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) #11
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %19, align 1, !tbaa !1261
  %46 = xor i64 %37, %36
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  store i8 %49, i8* %20, align 1, !tbaa !1262
  %50 = icmp eq i64 %37, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %21, align 1, !tbaa !1263
  %52 = lshr i64 %37, 63
  %53 = trunc i64 %52 to i8
  store i8 %53, i8* %22, align 1, !tbaa !1264
  %54 = lshr i64 %36, 63
  %55 = xor i64 %52, %54
  %56 = add nuw nsw i64 %55, %52
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %23, align 1, !tbaa !1265
  %59 = add i64 %36, 40
  %60 = inttoptr i64 %37 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %12, align 8, !tbaa !1240
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %3, align 8, !tbaa !1240
  %64 = add i64 %36, 48
  store i64 %64, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %165

block_402b50:                                     ; preds = %block_402a9c, %block_402b4b
  %65 = phi i64 [ %164, %block_402a9c ], [ %125, %block_402b4b ]
  %66 = phi i64 [ %148, %block_402a9c ], [ %93, %block_402b4b ]
  %67 = phi %struct.Memory* [ %165, %block_402a9c ], [ %92, %block_402b4b ]
  %68 = add i64 %65, -20
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69
  %71 = add i32 %70, 1
  %72 = inttoptr i64 %68 to i32*
  store i32 %71, i32* %72
  %73 = add i64 %66, -192
  br label %block_402a90

block_402ace:                                     ; preds = %block_402aae
  %74 = add i64 %125, -16
  %75 = inttoptr i64 %74 to i32*
  store i32 0, i32* %75
  %76 = add i64 %125, -24
  %77 = add i64 %124, 14
  %78 = inttoptr i64 %76 to i32*
  store i32 0, i32* %78
  %79 = add i64 %125, -20
  br label %block_402adc

block_402b2d:                                     ; preds = %block_402b23
  %80 = add i64 %125, -8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = inttoptr i64 %82 to i32*
  store i32 1, i32* %83
  %84 = inttoptr i64 %79 to i32*
  %85 = load i32, i32* %84
  %86 = sext i32 %85 to i64
  %87 = shl nsw i64 %86, 2
  %88 = add i64 %87, ptrtoint (%ich_type* @ich to i64)
  %89 = add i64 %140, 25
  %90 = inttoptr i64 %88 to i32*
  store i32 2, i32* %90
  br label %block_402b46

block_402b4b:                                     ; preds = %block_402b46, %block_402aae
  %91 = phi i64 [ %128, %block_402b46 ], [ %124, %block_402aae ]
  %92 = phi %struct.Memory* [ %127, %block_402b46 ], [ %119, %block_402aae ]
  %93 = add i64 %91, 5
  br label %block_402b50

block_402b09:                                     ; preds = %block_402ae6
  %94 = add i64 %108, 7
  %95 = inttoptr i64 %74 to i32*
  store i32 1, i32* %95
  br label %block_402b10

block_402ae6:                                     ; preds = %block_402adc
  %96 = inttoptr i64 %79 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  %99 = mul nsw i64 %98, 24
  %100 = add i64 %99, ptrtoint (%cbc_type* @cbc to i64)
  %101 = sext i32 %152 to i64
  store i64 %101, i64* %9, align 8, !tbaa !1240
  %102 = shl nsw i64 %101, 2
  %103 = add i64 %102, %100
  %104 = inttoptr i64 %103 to i32*
  %105 = load i32, i32* %104
  %106 = icmp ne i32 %105, 3
  %107 = select i1 %106, i64 42, i64 35
  %108 = add i64 %162, %107
  br i1 %106, label %block_402b10, label %block_402b09

block_402aae:                                     ; preds = %block_402a9c
  %109 = add i64 %142, ptrtoint (%ich_type* @ich to i64)
  %110 = inttoptr i64 %109 to i32*
  store i32 0, i32* %110
  %111 = inttoptr i64 %166 to i32*
  %112 = load i32, i32* %111
  %113 = zext i32 %112 to i64
  store i64 %113, i64* %10, align 8, !tbaa !1240
  %114 = add i64 %148, 10114
  %115 = add i64 %148, 23
  %116 = load i64, i64* %11, align 8, !tbaa !1240
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118
  store i64 %117, i64* %11, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @sub_405230_iftouch(%struct.State* nonnull %0, i64 %114, %struct.Memory* %165)
  %120 = load i32, i32* %5, align 4
  %121 = load i64, i64* %3, align 8
  %122 = icmp eq i32 %120, 0
  %123 = select i1 %122, i64 9, i64 134
  %124 = add i64 %121, %123
  %125 = load i64, i64* %12, align 8
  br i1 %122, label %block_402ace, label %block_402b4b

block_402b46:                                     ; preds = %block_402b23, %block_402b2d
  %126 = phi i64 [ %140, %block_402b23 ], [ %89, %block_402b2d ]
  %127 = phi %struct.Memory* [ %150, %block_402b23 ], [ %150, %block_402b2d ]
  %128 = add i64 %126, 5
  br label %block_402b4b

block_402b10:                                     ; preds = %block_402ae6, %block_402b09
  %129 = phi i64 [ %108, %block_402ae6 ], [ %94, %block_402b09 ]
  %130 = phi %struct.Memory* [ %150, %block_402ae6 ], [ %150, %block_402b09 ]
  %131 = inttoptr i64 %76 to i32*
  %132 = load i32, i32* %131
  %133 = add i32 %132, 1
  %134 = inttoptr i64 %76 to i32*
  store i32 %133, i32* %134
  %135 = add i64 %129, -52
  br label %block_402adc

block_402b23:                                     ; preds = %block_402adc
  %136 = inttoptr i64 %74 to i32*
  %137 = load i32, i32* %136
  %138 = icmp eq i32 %137, 0
  %139 = select i1 %138, i64 10, i64 35
  %140 = add i64 %162, %139
  br i1 %138, label %block_402b2d, label %block_402b46

block_402a9c:                                     ; preds = %block_402a90
  %141 = sext i32 %168 to i64
  %142 = shl nsw i64 %141, 2
  %143 = add i64 %142, ptrtoint (%skip_type* @skip to i64)
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144
  %146 = icmp eq i32 %145, 0
  %147 = select i1 %146, i64 18, i64 180
  %148 = add i64 %185, %147
  br i1 %146, label %block_402aae, label %block_402b50

block_402adc:                                     ; preds = %block_402b10, %block_402ace
  %149 = phi i64 [ %77, %block_402ace ], [ %135, %block_402b10 ]
  %150 = phi %struct.Memory* [ %119, %block_402ace ], [ %130, %block_402b10 ]
  %151 = inttoptr i64 %76 to i32*
  %152 = load i32, i32* %151
  %153 = add i32 %152, -6
  %154 = lshr i32 %153, 31
  %155 = lshr i32 %152, 31
  %156 = xor i32 %154, %155
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = icmp ne i32 %154, 0
  %160 = xor i1 %159, %158
  %161 = select i1 %160, i64 10, i64 71
  %162 = add i64 %149, %161
  br i1 %160, label %block_402ae6, label %block_402b23

block_402a90:                                     ; preds = %block_402b50, %block_402a70
  %163 = phi i64 [ %34, %block_402a70 ], [ %73, %block_402b50 ]
  %164 = phi i64 [ %15, %block_402a70 ], [ %65, %block_402b50 ]
  %165 = phi %struct.Memory* [ %2, %block_402a70 ], [ %67, %block_402b50 ]
  %166 = add i64 %164, -20
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  %169 = zext i32 %168 to i64
  store i64 %169, i64* %8, align 8, !tbaa !1240
  %170 = add i64 %164, -12
  %171 = inttoptr i64 %170 to i32*
  %172 = load i32, i32* %171
  %173 = sub i32 %168, %172
  %174 = lshr i32 %173, 31
  %175 = trunc i32 %174 to i8
  %176 = lshr i32 %168, 31
  %177 = lshr i32 %172, 31
  %178 = xor i32 %177, %176
  %179 = xor i32 %174, %176
  %180 = add nuw nsw i32 %179, %178
  %181 = icmp eq i32 %180, 2
  %182 = icmp ne i8 %175, 0
  %183 = xor i1 %182, %181
  %184 = select i1 %183, i64 12, i64 211
  %185 = add i64 %163, %184
  br i1 %183, label %block_402a9c, label %block_402b63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404540_remap(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_404540:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = bitcast [32 x %union.VectorReg]* %12 to i8*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast [32 x %union.VectorReg]* %12 to i32*
  store i32 0, i32* %26, align 1, !tbaa !1244
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = bitcast i64* %25 to i32*
  store i32 0, i32* %29, align 1, !tbaa !1244
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = add i64 %15, -16
  %33 = load i64, i64* %8, align 8
  %34 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %34
  %35 = add i64 %15, -24
  %36 = load i64, i64* %7, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %15, -32
  %39 = load i64, i64* %6, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %40
  %41 = inttoptr i64 %32 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %6, align 8, !tbaa !1240
  store i64 %42, i64* %8, align 8, !tbaa !1240
  store i64 125, i64* %7, align 8, !tbaa !1240
  %43 = add i64 %1, 111376
  %44 = add i64 %1, 45
  %45 = add i64 %15, -6080
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  store i64 %45, i64* %9, align 8, !tbaa !1240
  %47 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %48 = load i64, i64* %3, align 8
  store i64 875, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %49 = load i64, i64* %10, align 8
  %50 = add i64 %49, -16
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %6, align 8, !tbaa !1240
  store i64 %52, i64* %8, align 8, !tbaa !1240
  %53 = add i64 %48, 111331
  %54 = add i64 %48, 20
  %55 = load i64, i64* %9, align 8, !tbaa !1240
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57
  store i64 %56, i64* %9, align 8, !tbaa !1240
  %58 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %53, %struct.Memory* %47)
  %59 = load i64, i64* %3, align 8
  store i64 250, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %60 = load i64, i64* %10, align 8
  %61 = add i64 %60, -2032
  store i64 %61, i64* %6, align 8, !tbaa !1240
  store i64 %61, i64* %8, align 8, !tbaa !1240
  %62 = add i64 %59, 111311
  %63 = add i64 %59, 23
  %64 = load i64, i64* %9, align 8, !tbaa !1240
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %63, i64* %66
  store i64 %65, i64* %9, align 8, !tbaa !1240
  %67 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %62, %struct.Memory* %58)
  %68 = load i64, i64* %3, align 8
  store i64 500, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %69 = load i64, i64* %10, align 8
  %70 = add i64 %69, -6032
  store i64 %70, i64* %6, align 8, !tbaa !1240
  store i64 %70, i64* %8, align 8, !tbaa !1240
  %71 = add i64 %68, 111288
  %72 = add i64 %68, 23
  %73 = load i64, i64* %9, align 8, !tbaa !1240
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75
  store i64 %74, i64* %9, align 8, !tbaa !1240
  %76 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %71, %struct.Memory* %67)
  %77 = load i64, i64* %10, align 8
  %78 = add i64 %77, -6036
  %79 = load i64, i64* %3, align 8
  %80 = add i64 %79, 10
  %81 = inttoptr i64 %78 to i32*
  store i32 0, i32* %81
  %82 = add i64 %77, -6052
  %83 = add i64 %77, -6048
  %84 = add i64 %77, -6044
  %85 = add i64 %77, -2032
  %86 = bitcast [32 x %union.VectorReg]* %12 to double*
  %87 = bitcast %union.VectorReg* %13 to double*
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %89 = add i64 %77, -24
  %90 = add i64 %77, -6032
  %91 = add i64 %77, -1032
  %92 = add i64 %77, -5032
  br label %block_4045b9

block_4045fe:                                     ; preds = %block_40460b, %block_4045f4
  %93 = phi i64 [ %568, %block_4045f4 ], [ %833, %block_40460b ]
  %94 = phi %struct.Memory* [ %148, %block_4045f4 ], [ %94, %block_40460b ]
  %95 = inttoptr i64 %84 to i32*
  %96 = load i32, i32* %95
  %97 = add i32 %96, -5
  %98 = lshr i32 %97, 31
  %99 = lshr i32 %96, 31
  %100 = xor i32 %98, %99
  %101 = add nuw nsw i32 %100, %99
  %102 = icmp eq i32 %101, 2
  %103 = icmp ne i32 %98, 0
  %104 = xor i1 %103, %102
  %105 = select i1 %104, i64 13, i64 408
  %106 = add i64 %93, %105
  br i1 %104, label %block_40460b, label %block_404796

block_404b79:                                     ; preds = %block_405208, %block_404b6f
  %107 = phi %struct.Memory* [ %521, %block_404b6f ], [ %575, %block_405208 ]
  %108 = inttoptr i64 %137 to i32*
  %109 = load i32, i32* %108
  %110 = add i32 %109, -5
  %111 = lshr i32 %110, 31
  %112 = lshr i32 %109, 31
  %113 = xor i32 %111, %112
  %114 = add nuw nsw i32 %113, %112
  %115 = icmp eq i32 %114, 2
  %116 = icmp ne i32 %111, 0
  %117 = xor i1 %116, %115
  br i1 %117, label %block_404b86, label %block_405221

block_4047f6:                                     ; preds = %block_4047e9
  %118 = add i64 %133, 10
  %119 = inttoptr i64 %84 to i32*
  store i32 0, i32* %119
  br label %block_404800

block_4047e9:                                     ; preds = %block_404b24, %block_4047df
  %120 = phi i64 [ %145, %block_4047df ], [ %566, %block_404b24 ]
  %121 = phi %struct.Memory* [ %507, %block_4047df ], [ %883, %block_404b24 ]
  %122 = inttoptr i64 %83 to i32*
  %123 = load i32, i32* %122
  %124 = add i32 %123, -5
  %125 = lshr i32 %124, 31
  %126 = lshr i32 %123, 31
  %127 = xor i32 %125, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = icmp ne i32 %125, 0
  %131 = xor i1 %130, %129
  %132 = select i1 %131, i64 13, i64 852
  %133 = add i64 %120, %132
  br i1 %131, label %block_4047f6, label %block_404b3d

block_404b6f:                                     ; preds = %block_4045b9
  %134 = add i64 %77, -6040
  %135 = inttoptr i64 %134 to i32*
  store i32 0, i32* %135
  %136 = load i64, i64* %10, align 8
  %137 = add i64 %136, -6040
  %138 = add i64 %136, -6052
  %139 = add i64 %136, -6048
  %140 = add i64 %136, -6044
  %141 = add i64 %136, -6032
  %142 = add i64 %136, -8
  %143 = add i64 %136, -16
  %144 = add i64 %136, -4032
  br label %block_404b79

block_4047df:                                     ; preds = %block_4047d2
  %145 = add i64 %519, 10
  %146 = inttoptr i64 %83 to i32*
  store i32 0, i32* %146
  br label %block_4047e9

block_4045e7:                                     ; preds = %block_404796, %block_4045dd
  %147 = phi i64 [ %179, %block_4045dd ], [ %574, %block_404796 ]
  %148 = phi %struct.Memory* [ %166, %block_4045dd ], [ %94, %block_404796 ]
  %149 = inttoptr i64 %83 to i32*
  %150 = load i32, i32* %149
  %151 = add i32 %150, -5
  %152 = lshr i32 %151, 31
  %153 = lshr i32 %150, 31
  %154 = xor i32 %152, %153
  %155 = add nuw nsw i32 %154, %153
  %156 = icmp eq i32 %155, 2
  %157 = icmp ne i32 %152, 0
  %158 = xor i1 %157, %156
  %159 = select i1 %158, i64 13, i64 456
  %160 = add i64 %147, %159
  br i1 %158, label %block_4045f4, label %block_4047af

block_4051d6:                                     ; preds = %block_404bbe
  %161 = inttoptr i64 %139 to i32*
  %162 = load i32, i32* %161
  %163 = add i32 %162, 1
  %164 = inttoptr i64 %139 to i32*
  store i32 %163, i32* %164
  br label %block_404ba7

block_4045d0:                                     ; preds = %block_4047af, %block_4045c6
  %165 = phi i64 [ %504, %block_4045c6 ], [ %590, %block_4047af ]
  %166 = phi %struct.Memory* [ %521, %block_4045c6 ], [ %148, %block_4047af ]
  %167 = inttoptr i64 %82 to i32*
  %168 = load i32, i32* %167
  %169 = add i32 %168, -5
  %170 = lshr i32 %169, 31
  %171 = lshr i32 %168, 31
  %172 = xor i32 %170, %171
  %173 = add nuw nsw i32 %172, %171
  %174 = icmp eq i32 %173, 2
  %175 = icmp ne i32 %170, 0
  %176 = xor i1 %175, %174
  %177 = select i1 %176, i64 13, i64 504
  %178 = add i64 %165, %177
  %179 = add i64 %178, 10
  br i1 %176, label %block_4045dd, label %block_4047c8

block_404bcb:                                     ; preds = %block_404bbe
  store i64 ptrtoint (%ixtmc2_type* @ixtmc2 to i64), i64* %4, align 8, !tbaa !1240
  store i64 %141, i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64* %6, align 8, !tbaa !1240
  %180 = inttoptr i64 %142 to i64*
  %181 = load i64, i64* %180
  %182 = inttoptr i64 %139 to i32*
  %183 = load i32, i32* %182
  %184 = sext i32 %183 to i64
  %185 = mul nsw i64 %184, 200
  %186 = add i64 %185, %181
  %187 = inttoptr i64 %137 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, 40
  %191 = add i64 %190, %186
  %192 = sext i32 %537 to i64
  %193 = shl nsw i64 %192, 3
  %194 = add i64 %193, %191
  %195 = inttoptr i64 %194 to double*
  %196 = load double, double* %195
  %197 = mul nsw i64 %189, 200
  %198 = add i64 %197, %141
  %199 = inttoptr i64 %138 to i32*
  %200 = load i32, i32* %199
  %201 = sext i32 %200 to i64
  %202 = mul nsw i64 %201, 40
  %203 = add i64 %202, %198
  %204 = add i64 %193, %203
  %205 = inttoptr i64 %204 to double*
  %206 = load double, double* %205
  %207 = mul nsw i64 %184, 40
  %208 = add i64 %207, ptrtoint (%ixtmc1_type* @ixtmc1 to i64)
  %209 = shl nsw i64 %201, 3
  %210 = add i64 %209, %208
  %211 = inttoptr i64 %210 to double*
  %212 = load double, double* %211
  %213 = fmul double %206, %212
  %214 = fadd double %196, %213
  %215 = inttoptr i64 %194 to double*
  store double %214, double* %215
  %216 = inttoptr i64 %143 to i64*
  %217 = load i64, i64* %216
  %218 = inttoptr i64 %139 to i32*
  %219 = load i32, i32* %218
  %220 = sext i32 %219 to i64
  %221 = mul nsw i64 %220, 200
  %222 = add i64 %221, %217
  %223 = inttoptr i64 %137 to i32*
  %224 = load i32, i32* %223
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, 40
  %227 = add i64 %226, %222
  %228 = inttoptr i64 %140 to i32*
  %229 = load i32, i32* %228
  %230 = sext i32 %229 to i64
  %231 = shl nsw i64 %230, 3
  %232 = add i64 %231, %227
  %233 = inttoptr i64 %232 to double*
  %234 = load double, double* %233
  %235 = mul nsw i64 %225, 200
  %236 = add i64 %235, %144
  %237 = inttoptr i64 %138 to i32*
  %238 = load i32, i32* %237
  %239 = sext i32 %238 to i64
  %240 = mul nsw i64 %239, 40
  %241 = add i64 %240, %236
  %242 = add i64 %231, %241
  %243 = inttoptr i64 %242 to double*
  %244 = load double, double* %243
  %245 = mul nsw i64 %220, 40
  %246 = add i64 %245, ptrtoint (%ixtmc1_type* @ixtmc1 to i64)
  %247 = shl nsw i64 %239, 3
  %248 = add i64 %247, %246
  %249 = inttoptr i64 %248 to double*
  %250 = load double, double* %249
  %251 = fmul double %244, %250
  %252 = fadd double %234, %251
  %253 = inttoptr i64 %232 to double*
  store double %252, double* %253
  %254 = inttoptr i64 %143 to i64*
  %255 = load i64, i64* %254
  %256 = add i64 %255, 1000
  %257 = inttoptr i64 %139 to i32*
  %258 = load i32, i32* %257
  %259 = sext i32 %258 to i64
  %260 = mul nsw i64 %259, 200
  %261 = add i64 %260, %256
  %262 = inttoptr i64 %137 to i32*
  %263 = load i32, i32* %262
  %264 = sext i32 %263 to i64
  %265 = mul nsw i64 %264, 40
  %266 = add i64 %265, %261
  %267 = inttoptr i64 %140 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  %270 = shl nsw i64 %269, 3
  %271 = add i64 %270, %266
  %272 = inttoptr i64 %271 to double*
  %273 = load double, double* %272
  %274 = load i64, i64* %5, align 8
  %275 = add i64 %274, 1000
  %276 = mul nsw i64 %264, 200
  %277 = add i64 %276, %275
  %278 = inttoptr i64 %138 to i32*
  %279 = load i32, i32* %278
  %280 = sext i32 %279 to i64
  %281 = mul nsw i64 %280, 40
  %282 = add i64 %281, %277
  %283 = add i64 %270, %282
  %284 = inttoptr i64 %283 to double*
  %285 = load double, double* %284
  %286 = mul nsw i64 %259, 40
  %287 = load i64, i64* %6, align 8
  %288 = add i64 %286, %287
  %289 = shl nsw i64 %280, 3
  %290 = add i64 %289, %288
  %291 = inttoptr i64 %290 to double*
  %292 = load double, double* %291
  %293 = fmul double %285, %292
  %294 = fadd double %273, %293
  %295 = inttoptr i64 %271 to double*
  store double %294, double* %295
  %296 = inttoptr i64 %143 to i64*
  %297 = load i64, i64* %296
  %298 = add i64 %297, 2000
  %299 = inttoptr i64 %139 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %301, 200
  %303 = add i64 %302, %298
  %304 = inttoptr i64 %137 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 40
  %308 = add i64 %307, %303
  %309 = inttoptr i64 %140 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 3
  %313 = add i64 %312, %308
  %314 = inttoptr i64 %313 to double*
  %315 = load double, double* %314
  %316 = add i64 %274, 3000
  %317 = mul nsw i64 %306, 200
  %318 = add i64 %317, %316
  %319 = inttoptr i64 %138 to i32*
  %320 = load i32, i32* %319
  %321 = sext i32 %320 to i64
  %322 = mul nsw i64 %321, 40
  %323 = add i64 %322, %318
  store i64 %311, i64* %8, align 8, !tbaa !1240
  %324 = add i64 %312, %323
  %325 = inttoptr i64 %324 to double*
  %326 = load double, double* %325
  %327 = mul nsw i64 %301, 40
  %328 = add i64 %327, %287
  %329 = shl nsw i64 %321, 3
  %330 = add i64 %329, %328
  %331 = inttoptr i64 %330 to double*
  %332 = load double, double* %331
  %333 = fmul double %326, %332
  %334 = fadd double %315, %333
  %335 = inttoptr i64 %313 to double*
  store double %334, double* %335
  %336 = inttoptr i64 %143 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %337, 3000
  %339 = inttoptr i64 %139 to i32*
  %340 = load i32, i32* %339
  %341 = sext i32 %340 to i64
  %342 = mul nsw i64 %341, 200
  %343 = add i64 %342, %338
  %344 = inttoptr i64 %137 to i32*
  %345 = load i32, i32* %344
  %346 = sext i32 %345 to i64
  %347 = mul nsw i64 %346, 40
  %348 = add i64 %347, %343
  %349 = inttoptr i64 %140 to i32*
  %350 = load i32, i32* %349
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 3
  %353 = add i64 %352, %348
  %354 = inttoptr i64 %353 to double*
  %355 = load double, double* %354
  %356 = mul nsw i64 %346, 200
  %357 = load i64, i64* %5, align 8
  %358 = add i64 %356, %357
  %359 = inttoptr i64 %138 to i32*
  %360 = load i32, i32* %359
  %361 = sext i32 %360 to i64
  %362 = mul nsw i64 %361, 40
  %363 = add i64 %362, %358
  %364 = add i64 %352, %363
  %365 = inttoptr i64 %364 to double*
  %366 = load double, double* %365
  %367 = mul nsw i64 %341, 40
  %368 = load i64, i64* %4, align 8
  %369 = add i64 %367, %368
  %370 = shl nsw i64 %361, 3
  %371 = add i64 %370, %369
  %372 = inttoptr i64 %371 to double*
  %373 = load double, double* %372
  %374 = fmul double %366, %373
  %375 = fadd double %355, %374
  %376 = inttoptr i64 %353 to double*
  store double %375, double* %376
  %377 = inttoptr i64 %143 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %378, 4000
  %380 = inttoptr i64 %139 to i32*
  %381 = load i32, i32* %380
  %382 = sext i32 %381 to i64
  %383 = mul nsw i64 %382, 200
  %384 = add i64 %383, %379
  %385 = inttoptr i64 %137 to i32*
  %386 = load i32, i32* %385
  %387 = sext i32 %386 to i64
  %388 = mul nsw i64 %387, 40
  %389 = add i64 %388, %384
  %390 = inttoptr i64 %140 to i32*
  %391 = load i32, i32* %390
  %392 = sext i32 %391 to i64
  %393 = shl nsw i64 %392, 3
  %394 = add i64 %393, %389
  %395 = inttoptr i64 %394 to double*
  %396 = load double, double* %395
  %397 = add i64 %357, 2000
  %398 = mul nsw i64 %387, 200
  %399 = add i64 %398, %397
  %400 = inttoptr i64 %138 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  %403 = mul nsw i64 %402, 40
  %404 = add i64 %403, %399
  %405 = add i64 %393, %404
  %406 = inttoptr i64 %405 to double*
  %407 = load double, double* %406
  %408 = mul nsw i64 %382, 40
  %409 = add i64 %408, %368
  %410 = shl nsw i64 %402, 3
  %411 = add i64 %410, %409
  %412 = inttoptr i64 %411 to double*
  %413 = load double, double* %412
  %414 = fmul double %407, %413
  %415 = fadd double %396, %414
  %416 = inttoptr i64 %394 to double*
  store double %415, double* %416
  %417 = inttoptr i64 %143 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %418, 5000
  %420 = inttoptr i64 %139 to i32*
  %421 = load i32, i32* %420
  %422 = sext i32 %421 to i64
  %423 = mul nsw i64 %422, 200
  %424 = add i64 %423, %419
  %425 = inttoptr i64 %137 to i32*
  %426 = load i32, i32* %425
  %427 = sext i32 %426 to i64
  %428 = mul nsw i64 %427, 40
  %429 = add i64 %428, %424
  %430 = inttoptr i64 %140 to i32*
  %431 = load i32, i32* %430
  %432 = sext i32 %431 to i64
  %433 = shl nsw i64 %432, 3
  %434 = add i64 %433, %429
  %435 = inttoptr i64 %434 to double*
  %436 = load double, double* %435
  %437 = load i64, i64* %5, align 8
  %438 = add i64 %437, 1000
  %439 = mul nsw i64 %427, 200
  %440 = add i64 %439, %438
  %441 = inttoptr i64 %138 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  %444 = mul nsw i64 %443, 40
  %445 = add i64 %444, %440
  %446 = add i64 %433, %445
  %447 = inttoptr i64 %446 to double*
  %448 = load double, double* %447
  %449 = mul nsw i64 %422, 40
  %450 = load i64, i64* %4, align 8
  %451 = add i64 %449, %450
  %452 = shl nsw i64 %443, 3
  %453 = add i64 %452, %451
  %454 = inttoptr i64 %453 to double*
  %455 = load double, double* %454
  %456 = fmul double %448, %455
  %457 = fadd double %436, %456
  %458 = inttoptr i64 %434 to double*
  store double %457, double* %458
  %459 = inttoptr i64 %143 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %460, 6000
  %462 = inttoptr i64 %139 to i32*
  %463 = load i32, i32* %462
  %464 = sext i32 %463 to i64
  %465 = mul nsw i64 %464, 200
  %466 = add i64 %465, %461
  %467 = inttoptr i64 %137 to i32*
  %468 = load i32, i32* %467
  %469 = sext i32 %468 to i64
  %470 = mul nsw i64 %469, 40
  %471 = add i64 %470, %466
  %472 = inttoptr i64 %140 to i32*
  %473 = load i32, i32* %472
  %474 = sext i32 %473 to i64
  store i64 %474, i64* %7, align 8, !tbaa !1240
  %475 = shl nsw i64 %474, 3
  %476 = add i64 %475, %471
  %477 = inttoptr i64 %476 to double*
  %478 = load double, double* %477
  %479 = add i64 %437, 3000
  %480 = mul nsw i64 %469, 200
  %481 = add i64 %480, %479
  %482 = inttoptr i64 %138 to i32*
  %483 = load i32, i32* %482
  %484 = sext i32 %483 to i64
  %485 = mul nsw i64 %484, 40
  %486 = add i64 %485, %481
  store i64 %474, i64* %6, align 8, !tbaa !1240
  %487 = add i64 %475, %486
  %488 = inttoptr i64 %487 to double*
  %489 = load double, double* %488
  %490 = mul nsw i64 %464, 40
  %491 = add i64 %490, %450
  %492 = shl nsw i64 %484, 3
  %493 = add i64 %492, %491
  %494 = inttoptr i64 %493 to double*
  %495 = load double, double* %494
  %496 = fmul double %489, %495
  store double %496, double* %87, align 1, !tbaa !1246
  store i64 0, i64* %88, align 1, !tbaa !1246
  %497 = fadd double %478, %496
  store double %497, double* %86, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  store i64 %474, i64* %5, align 8, !tbaa !1240
  %498 = inttoptr i64 %476 to double*
  store double %497, double* %498
  %499 = inttoptr i64 %140 to i32*
  %500 = load i32, i32* %499
  %501 = add i32 %500, 1
  %502 = inttoptr i64 %140 to i32*
  store i32 %501, i32* %502
  br label %block_404bbe

block_4047c8:                                     ; preds = %block_4045d0
  %503 = inttoptr i64 %82 to i32*
  store i32 0, i32* %503
  br label %block_4047d2

block_4045c6:                                     ; preds = %block_4045b9
  %504 = add i64 %534, 10
  %505 = inttoptr i64 %82 to i32*
  store i32 0, i32* %505
  br label %block_4045d0

block_4047d2:                                     ; preds = %block_404b3d, %block_4047c8
  %506 = phi i64 [ %179, %block_4047c8 ], [ %838, %block_404b3d ]
  %507 = phi %struct.Memory* [ %166, %block_4047c8 ], [ %121, %block_404b3d ]
  %508 = inttoptr i64 %82 to i32*
  %509 = load i32, i32* %508
  %510 = add i32 %509, -5
  %511 = lshr i32 %510, 31
  %512 = lshr i32 %509, 31
  %513 = xor i32 %511, %512
  %514 = add nuw nsw i32 %513, %512
  %515 = icmp eq i32 %514, 2
  %516 = icmp ne i32 %511, 0
  %517 = xor i1 %516, %515
  %518 = select i1 %517, i64 13, i64 900
  %519 = add i64 %506, %518
  br i1 %517, label %block_4047df, label %block_404b56

block_4045b9:                                     ; preds = %block_404b56, %block_404540
  %520 = phi i64 [ %80, %block_404540 ], [ %881, %block_404b56 ]
  %521 = phi %struct.Memory* [ %76, %block_404540 ], [ %507, %block_404b56 ]
  %522 = inttoptr i64 %78 to i32*
  %523 = load i32, i32* %522
  %524 = add i32 %523, -5
  %525 = lshr i32 %524, 31
  %526 = trunc i32 %525 to i8
  %527 = lshr i32 %523, 31
  %528 = xor i32 %525, %527
  %529 = add nuw nsw i32 %528, %527
  %530 = icmp eq i32 %529, 2
  %531 = icmp ne i8 %526, 0
  %532 = xor i1 %531, %530
  %533 = select i1 %532, i64 13, i64 1462
  %534 = add i64 %520, %533
  br i1 %532, label %block_4045c6, label %block_404b6f

block_404bbe:                                     ; preds = %block_404bb4, %block_404bcb
  %535 = phi %struct.Memory* [ %547, %block_404bb4 ], [ %535, %block_404bcb ]
  %536 = inttoptr i64 %140 to i32*
  %537 = load i32, i32* %536
  %538 = add i32 %537, -5
  %539 = lshr i32 %538, 31
  %540 = lshr i32 %537, 31
  %541 = xor i32 %539, %540
  %542 = add nuw nsw i32 %541, %540
  %543 = icmp eq i32 %542, 2
  %544 = icmp ne i32 %539, 0
  %545 = xor i1 %544, %543
  br i1 %545, label %block_404bcb, label %block_4051d6

block_4045dd:                                     ; preds = %block_4045d0
  %546 = inttoptr i64 %83 to i32*
  store i32 0, i32* %546
  br label %block_4045e7

block_404ba7:                                     ; preds = %block_404b9d, %block_4051d6
  %547 = phi %struct.Memory* [ %575, %block_404b9d ], [ %535, %block_4051d6 ]
  %548 = inttoptr i64 %139 to i32*
  %549 = load i32, i32* %548
  %550 = add i32 %549, -5
  %551 = lshr i32 %550, 31
  %552 = lshr i32 %549, 31
  %553 = xor i32 %551, %552
  %554 = add nuw nsw i32 %553, %552
  %555 = icmp eq i32 %554, 2
  %556 = icmp ne i32 %551, 0
  %557 = xor i1 %556, %555
  br i1 %557, label %block_404bb4, label %block_4051ef

block_4051ef:                                     ; preds = %block_404ba7
  %558 = inttoptr i64 %138 to i32*
  %559 = load i32, i32* %558
  %560 = add i32 %559, 1
  %561 = inttoptr i64 %138 to i32*
  store i32 %560, i32* %561
  br label %block_404b90

block_404b24:                                     ; preds = %block_404800
  %562 = inttoptr i64 %83 to i32*
  %563 = load i32, i32* %562
  %564 = add i32 %563, 1
  %565 = inttoptr i64 %83 to i32*
  store i32 %564, i32* %565
  %566 = add i64 %895, -827
  br label %block_4047e9

block_404b9d:                                     ; preds = %block_404b90
  %567 = inttoptr i64 %139 to i32*
  store i32 0, i32* %567
  br label %block_404ba7

block_4045f4:                                     ; preds = %block_4045e7
  %568 = add i64 %160, 10
  %569 = inttoptr i64 %84 to i32*
  store i32 0, i32* %569
  br label %block_4045fe

block_404796:                                     ; preds = %block_4045fe
  %570 = inttoptr i64 %83 to i32*
  %571 = load i32, i32* %570
  %572 = add i32 %571, 1
  %573 = inttoptr i64 %83 to i32*
  store i32 %572, i32* %573
  %574 = add i64 %106, -431
  br label %block_4045e7

block_404b90:                                     ; preds = %block_404b86, %block_4051ef
  %575 = phi %struct.Memory* [ %107, %block_404b86 ], [ %547, %block_4051ef ]
  %576 = inttoptr i64 %138 to i32*
  %577 = load i32, i32* %576
  %578 = add i32 %577, -5
  %579 = lshr i32 %578, 31
  %580 = lshr i32 %577, 31
  %581 = xor i32 %579, %580
  %582 = add nuw nsw i32 %581, %580
  %583 = icmp eq i32 %582, 2
  %584 = icmp ne i32 %579, 0
  %585 = xor i1 %584, %583
  br i1 %585, label %block_404b9d, label %block_405208

block_4047af:                                     ; preds = %block_4045e7
  %586 = inttoptr i64 %82 to i32*
  %587 = load i32, i32* %586
  %588 = add i32 %587, 1
  %589 = inttoptr i64 %82 to i32*
  store i32 %588, i32* %589
  %590 = add i64 %160, -479
  br label %block_4045d0

block_40480d:                                     ; preds = %block_404800
  store i64 %90, i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%ixtmc2_type* @ixtmc2 to i64), i64* %5, align 8, !tbaa !1240
  store i64 %85, i64* %6, align 8, !tbaa !1240
  store i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64* %7, align 8, !tbaa !1240
  %591 = inttoptr i64 %83 to i32*
  %592 = load i32, i32* %591
  %593 = sext i32 %592 to i64
  %594 = mul nsw i64 %593, 200
  %595 = add i64 %594, %90
  %596 = inttoptr i64 %78 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %598, 40
  %600 = add i64 %599, %595
  %601 = sext i32 %885 to i64
  %602 = shl nsw i64 %601, 3
  %603 = add i64 %602, %600
  %604 = inttoptr i64 %603 to double*
  %605 = load double, double* %604
  %606 = mul nsw i64 %598, 200
  %607 = add i64 %606, %85
  %608 = inttoptr i64 %82 to i32*
  %609 = load i32, i32* %608
  %610 = sext i32 %609 to i64
  %611 = mul nsw i64 %610, 40
  %612 = add i64 %611, %607
  %613 = add i64 %602, %612
  %614 = inttoptr i64 %613 to double*
  %615 = load double, double* %614
  %616 = mul nsw i64 %593, 40
  %617 = add i64 %616, ptrtoint (%ixtmc1_type* @ixtmc1 to i64)
  %618 = shl nsw i64 %610, 3
  %619 = add i64 %618, %617
  %620 = inttoptr i64 %619 to double*
  %621 = load double, double* %620
  %622 = fmul double %615, %621
  %623 = fadd double %605, %622
  %624 = inttoptr i64 %603 to double*
  store double %623, double* %624
  %625 = inttoptr i64 %83 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  %628 = mul nsw i64 %627, 200
  %629 = add i64 %628, %92
  %630 = inttoptr i64 %78 to i32*
  %631 = load i32, i32* %630
  %632 = sext i32 %631 to i64
  %633 = mul nsw i64 %632, 40
  %634 = add i64 %633, %629
  %635 = inttoptr i64 %84 to i32*
  %636 = load i32, i32* %635
  %637 = sext i32 %636 to i64
  %638 = shl nsw i64 %637, 3
  %639 = add i64 %638, %634
  %640 = inttoptr i64 %639 to double*
  %641 = load double, double* %640
  %642 = mul nsw i64 %632, 200
  %643 = add i64 %642, %85
  %644 = inttoptr i64 %82 to i32*
  %645 = load i32, i32* %644
  %646 = sext i32 %645 to i64
  %647 = mul nsw i64 %646, 40
  %648 = add i64 %647, %643
  %649 = add i64 %638, %648
  %650 = inttoptr i64 %649 to double*
  %651 = load double, double* %650
  %652 = mul nsw i64 %627, 40
  %653 = add i64 %652, ptrtoint (%ixtmc2_type* @ixtmc2 to i64)
  %654 = shl nsw i64 %646, 3
  %655 = add i64 %654, %653
  %656 = inttoptr i64 %655 to double*
  %657 = load double, double* %656
  %658 = fmul double %651, %657
  %659 = fadd double %641, %658
  %660 = load i64, i64* %4, align 8
  %661 = add i64 %660, 1000
  %662 = add i64 %628, %661
  %663 = add i64 %633, %662
  %664 = add i64 %638, %663
  %665 = inttoptr i64 %664 to double*
  store double %659, double* %665
  %666 = add i64 %660, 2000
  %667 = inttoptr i64 %83 to i32*
  %668 = load i32, i32* %667
  %669 = sext i32 %668 to i64
  %670 = mul nsw i64 %669, 200
  %671 = add i64 %670, %666
  %672 = inttoptr i64 %78 to i32*
  %673 = load i32, i32* %672
  %674 = sext i32 %673 to i64
  %675 = mul nsw i64 %674, 40
  %676 = add i64 %675, %671
  %677 = inttoptr i64 %84 to i32*
  %678 = load i32, i32* %677
  %679 = sext i32 %678 to i64
  %680 = shl nsw i64 %679, 3
  %681 = add i64 %680, %676
  %682 = inttoptr i64 %681 to double*
  %683 = load double, double* %682
  %684 = load i64, i64* %6, align 8
  %685 = add i64 %684, 1000
  %686 = mul nsw i64 %674, 200
  %687 = add i64 %686, %685
  %688 = inttoptr i64 %82 to i32*
  %689 = load i32, i32* %688
  %690 = sext i32 %689 to i64
  %691 = mul nsw i64 %690, 40
  %692 = add i64 %691, %687
  store i64 %679, i64* %11, align 8, !tbaa !1240
  %693 = add i64 %680, %692
  %694 = inttoptr i64 %693 to double*
  %695 = load double, double* %694
  %696 = mul nsw i64 %669, 40
  %697 = load i64, i64* %7, align 8
  %698 = add i64 %696, %697
  %699 = shl nsw i64 %690, 3
  %700 = add i64 %699, %698
  %701 = inttoptr i64 %700 to double*
  %702 = load double, double* %701
  %703 = fmul double %695, %702
  %704 = fadd double %683, %703
  %705 = inttoptr i64 %681 to double*
  store double %704, double* %705
  %706 = add i64 %660, 3000
  %707 = inttoptr i64 %83 to i32*
  %708 = load i32, i32* %707
  %709 = sext i32 %708 to i64
  %710 = mul nsw i64 %709, 200
  %711 = add i64 %710, %706
  %712 = inttoptr i64 %78 to i32*
  %713 = load i32, i32* %712
  %714 = sext i32 %713 to i64
  %715 = mul nsw i64 %714, 40
  %716 = add i64 %715, %711
  %717 = inttoptr i64 %84 to i32*
  %718 = load i32, i32* %717
  %719 = sext i32 %718 to i64
  store i64 %719, i64* %8, align 8, !tbaa !1240
  %720 = shl nsw i64 %719, 3
  %721 = add i64 %720, %716
  %722 = inttoptr i64 %721 to double*
  %723 = load double, double* %722
  %724 = mul nsw i64 %714, 200
  %725 = add i64 %724, %685
  %726 = inttoptr i64 %82 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  %729 = mul nsw i64 %728, 40
  %730 = add i64 %729, %725
  store i64 %719, i64* %7, align 8, !tbaa !1240
  %731 = add i64 %720, %730
  %732 = inttoptr i64 %731 to double*
  %733 = load double, double* %732
  %734 = mul nsw i64 %709, 40
  %735 = load i64, i64* %5, align 8
  %736 = add i64 %734, %735
  store i64 %728, i64* %6, align 8, !tbaa !1240
  %737 = shl nsw i64 %728, 3
  %738 = add i64 %737, %736
  %739 = inttoptr i64 %738 to double*
  %740 = load double, double* %739
  %741 = fmul double %733, %740
  store double %741, double* %87, align 1, !tbaa !1246
  store i64 0, i64* %88, align 1, !tbaa !1246
  %742 = fadd double %723, %741
  store double %742, double* %86, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %743 = load i64, i64* %4, align 8
  %744 = add i64 %743, 3000
  %745 = add i64 %710, %744
  %746 = add i64 %715, %745
  store i64 %719, i64* %5, align 8, !tbaa !1240
  %747 = add i64 %720, %746
  %748 = inttoptr i64 %747 to double*
  store double %742, double* %748
  %749 = inttoptr i64 %84 to i32*
  %750 = load i32, i32* %749
  %751 = add i32 %750, 1
  %752 = inttoptr i64 %84 to i32*
  store i32 %751, i32* %752
  %753 = add i64 %895, -13
  br label %block_404800

block_40460b:                                     ; preds = %block_4045fe
  store i64 %85, i64* %4, align 8, !tbaa !1240
  %754 = inttoptr i64 %78 to i32*
  %755 = load i32, i32* %754
  %756 = sext i32 %755 to i64
  %757 = mul nsw i64 %756, 200
  %758 = add i64 %757, %85
  %759 = inttoptr i64 %83 to i32*
  %760 = load i32, i32* %759
  %761 = sext i32 %760 to i64
  %762 = mul nsw i64 %761, 40
  %763 = add i64 %762, %758
  store i64 %763, i64* %8, align 8, !tbaa !1240
  %764 = sext i32 %96 to i64
  %765 = shl nsw i64 %764, 3
  %766 = add i64 %765, %763
  %767 = inttoptr i64 %766 to double*
  %768 = load double, double* %767
  %769 = inttoptr i64 %82 to i32*
  %770 = load i32, i32* %769
  %771 = sext i32 %770 to i64
  %772 = mul nsw i64 %771, 40
  %773 = add i64 %772, ptrtoint (%ixmc1_type* @ixmc1 to i64)
  %774 = add i64 %765, %773
  %775 = inttoptr i64 %774 to double*
  %776 = load double, double* %775
  %777 = inttoptr i64 %89 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %757, %778
  %780 = add i64 %762, %779
  %781 = shl nsw i64 %771, 3
  %782 = add i64 %781, %780
  %783 = inttoptr i64 %782 to double*
  %784 = load double, double* %783
  %785 = fmul double %776, %784
  %786 = fadd double %768, %785
  %787 = inttoptr i64 %766 to double*
  store double %786, double* %787
  %788 = inttoptr i64 %78 to i32*
  %789 = load i32, i32* %788
  %790 = sext i32 %789 to i64
  %791 = mul nsw i64 %790, 200
  %792 = add i64 %791, %91
  %793 = inttoptr i64 %83 to i32*
  %794 = load i32, i32* %793
  %795 = sext i32 %794 to i64
  %796 = mul nsw i64 %795, 40
  %797 = add i64 %796, %792
  %798 = inttoptr i64 %84 to i32*
  %799 = load i32, i32* %798
  %800 = sext i32 %799 to i64
  store i64 %800, i64* %7, align 8, !tbaa !1240
  %801 = shl nsw i64 %800, 3
  %802 = add i64 %801, %797
  %803 = inttoptr i64 %802 to double*
  %804 = load double, double* %803
  %805 = inttoptr i64 %82 to i32*
  %806 = load i32, i32* %805
  %807 = sext i32 %806 to i64
  %808 = mul nsw i64 %807, 40
  %809 = add i64 %808, ptrtoint (%ixmc2_type* @ixmc2 to i64)
  %810 = add i64 %801, %809
  %811 = inttoptr i64 %810 to double*
  %812 = load double, double* %811
  %813 = inttoptr i64 %89 to i64*
  %814 = load i64, i64* %813
  %815 = add i64 %791, %814
  %816 = add i64 %796, %815
  store i64 %807, i64* %6, align 8, !tbaa !1240
  %817 = shl nsw i64 %807, 3
  %818 = add i64 %817, %816
  %819 = inttoptr i64 %818 to double*
  %820 = load double, double* %819
  %821 = fmul double %812, %820
  store double %821, double* %87, align 1, !tbaa !1246
  store i64 0, i64* %88, align 1, !tbaa !1246
  %822 = fadd double %804, %821
  store double %822, double* %86, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %823 = load i64, i64* %4, align 8
  %824 = add i64 %823, 1000
  %825 = add i64 %791, %824
  %826 = add i64 %796, %825
  store i64 %800, i64* %5, align 8, !tbaa !1240
  %827 = add i64 %801, %826
  %828 = inttoptr i64 %827 to double*
  store double %822, double* %828
  %829 = inttoptr i64 %84 to i32*
  %830 = load i32, i32* %829
  %831 = add i32 %830, 1
  %832 = inttoptr i64 %84 to i32*
  store i32 %831, i32* %832
  %833 = add i64 %106, -13
  br label %block_4045fe

block_404b3d:                                     ; preds = %block_4047e9
  %834 = inttoptr i64 %82 to i32*
  %835 = load i32, i32* %834
  %836 = add i32 %835, 1
  %837 = inttoptr i64 %82 to i32*
  store i32 %836, i32* %837
  %838 = add i64 %133, -875
  br label %block_4047d2

block_405208:                                     ; preds = %block_404b90
  %839 = inttoptr i64 %137 to i32*
  %840 = load i32, i32* %839
  %841 = add i32 %840, 1
  %842 = zext i32 %841 to i64
  store i64 %842, i64* %4, align 8, !tbaa !1240
  %843 = inttoptr i64 %137 to i32*
  store i32 %841, i32* %843
  br label %block_404b79

block_404b86:                                     ; preds = %block_404b79
  %844 = inttoptr i64 %138 to i32*
  store i32 0, i32* %844
  br label %block_404b90

block_404bb4:                                     ; preds = %block_404ba7
  %845 = inttoptr i64 %140 to i32*
  store i32 0, i32* %845
  br label %block_404bbe

block_405221:                                     ; preds = %block_404b79
  %846 = load i64, i64* %9, align 8
  %847 = add i64 %846, 6064
  %848 = icmp ugt i64 %846, -6065
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %18, align 1, !tbaa !1248
  %850 = trunc i64 %847 to i32
  %851 = and i32 %850, 255
  %852 = tail call i32 @llvm.ctpop.i32(i32 %851) #11
  %853 = trunc i32 %852 to i8
  %854 = and i8 %853, 1
  %855 = xor i8 %854, 1
  store i8 %855, i8* %19, align 1, !tbaa !1261
  %856 = xor i64 %846, 16
  %857 = xor i64 %856, %847
  %858 = lshr i64 %857, 4
  %859 = trunc i64 %858 to i8
  %860 = and i8 %859, 1
  store i8 %860, i8* %20, align 1, !tbaa !1262
  %861 = icmp eq i64 %847, 0
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %21, align 1, !tbaa !1263
  %863 = lshr i64 %847, 63
  %864 = trunc i64 %863 to i8
  store i8 %864, i8* %22, align 1, !tbaa !1264
  %865 = lshr i64 %846, 63
  %866 = xor i64 %863, %865
  %867 = add nuw nsw i64 %866, %863
  %868 = icmp eq i64 %867, 2
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %23, align 1, !tbaa !1265
  %870 = add i64 %846, 6072
  %871 = inttoptr i64 %847 to i64*
  %872 = load i64, i64* %871
  store i64 %872, i64* %10, align 8, !tbaa !1240
  %873 = inttoptr i64 %870 to i64*
  %874 = load i64, i64* %873
  store i64 %874, i64* %3, align 8, !tbaa !1240
  %875 = add i64 %846, 6080
  store i64 %875, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %107

block_404b56:                                     ; preds = %block_4047d2
  %876 = inttoptr i64 %78 to i32*
  %877 = load i32, i32* %876
  %878 = add i32 %877, 1
  %879 = zext i32 %878 to i64
  store i64 %879, i64* %4, align 8, !tbaa !1240
  %880 = inttoptr i64 %78 to i32*
  store i32 %878, i32* %880
  %881 = add i64 %519, -1437
  br label %block_4045b9

block_404800:                                     ; preds = %block_40480d, %block_4047f6
  %882 = phi i64 [ %118, %block_4047f6 ], [ %753, %block_40480d ]
  %883 = phi %struct.Memory* [ %121, %block_4047f6 ], [ %883, %block_40480d ]
  %884 = inttoptr i64 %84 to i32*
  %885 = load i32, i32* %884
  %886 = add i32 %885, -5
  %887 = lshr i32 %886, 31
  %888 = lshr i32 %885, 31
  %889 = xor i32 %887, %888
  %890 = add nuw nsw i32 %889, %888
  %891 = icmp eq i32 %890, 2
  %892 = icmp ne i32 %887, 0
  %893 = xor i1 %892, %891
  %894 = select i1 %893, i64 13, i64 804
  %895 = add i64 %882, %894
  br i1 %893, label %block_40480d, label %block_404b24
}

; Function Attrs: noinline
define %struct.Memory* @sub_417300_geom1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_417300:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = load i64, i64* %9, align 8
  %15 = load i64, i64* %8, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %9, align 8, !tbaa !1240
  %18 = load i64, i64* %5, align 8
  %19 = add i64 %15, -16
  %20 = inttoptr i64 %19 to i64*
  store i64 %18, i64* %20
  %21 = add i64 %15, -72
  store i64 %21, i64* %8, align 8, !tbaa !1240
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %28 = add i64 %15, -56
  %29 = add i64 %1, 16
  %30 = inttoptr i64 %28 to i32*
  store i32 0, i32* %30
  %31 = bitcast [32 x %union.VectorReg]* %12 to double*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = bitcast %union.VectorReg* %13 to i8*
  %35 = bitcast %union.VectorReg* %13 to i32*
  %36 = getelementptr inbounds i8, i8* %34, i64 4
  %37 = bitcast i8* %36 to i32*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %39 = bitcast i64* %38 to i32*
  %40 = getelementptr inbounds i8, i8* %34, i64 12
  %41 = bitcast i8* %40 to i32*
  %42 = bitcast %union.VectorReg* %13 to double*
  br label %block_417310

block_4176f8:                                     ; preds = %block_4173de
  %43 = inttoptr i64 %440 to i32*
  %44 = load i32, i32* %43
  %45 = add i32 %44, 1
  %46 = inttoptr i64 %440 to i32*
  store i32 %45, i32* %46
  %47 = add i64 %672, -811
  br label %block_4173cd

block_4178ee:                                     ; preds = %block_417764
  %48 = inttoptr i64 %676 to i32*
  %49 = load i32, i32* %48
  %50 = add i32 %49, 1
  %51 = inttoptr i64 %676 to i32*
  store i32 %50, i32* %51
  br label %block_417753

block_4173e8:                                     ; preds = %block_4173de
  store i64 ptrtoint (%g6m1_s_type* @g6m1_s to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%g1m1_s_type* @g1m1_s to i64), i64* %6, align 8, !tbaa !1240
  store i64 ptrtoint (%g5m1_s_type* @g5m1_s to i64), i64* %357, align 8, !tbaa !1240
  store i64 ptrtoint (%g4m1_s_type* @g4m1_s to i64), i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%bm1_s_type* @bm1_s to i64), i64* %358, align 8, !tbaa !1240
  store i64 ptrtoint (%w3m1_type* @w3m1 to i64), i64* %10, align 8, !tbaa !1240
  %52 = inttoptr i64 %424 to double*
  %53 = load double, double* %52
  %54 = inttoptr i64 %442 to i32*
  %55 = load i32, i32* %54
  %56 = sext i32 %55 to i64
  %57 = mul nsw i64 %56, 1000
  %58 = add i64 %57, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %59 = inttoptr i64 %437 to i32*
  %60 = load i32, i32* %59
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %61, 200
  %63 = add i64 %62, %58
  %64 = inttoptr i64 %440 to i32*
  %65 = load i32, i32* %64
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %66, 40
  %68 = add i64 %67, %63
  %69 = sext i32 %662 to i64
  %70 = shl nsw i64 %69, 3
  %71 = add i64 %70, %68
  %72 = inttoptr i64 %71 to double*
  store double %53, double* %72
  %73 = inttoptr i64 %430 to double*
  %74 = load double, double* %73
  %75 = inttoptr i64 %442 to i32*
  %76 = load i32, i32* %75
  %77 = sext i32 %76 to i64
  %78 = mul nsw i64 %77, 1000
  %79 = add i64 %78, ptrtoint (%jacm1_s_type* @jacm1_s to i64)
  %80 = inttoptr i64 %437 to i32*
  %81 = load i32, i32* %80
  %82 = sext i32 %81 to i64
  %83 = mul nsw i64 %82, 200
  %84 = add i64 %83, %79
  %85 = inttoptr i64 %440 to i32*
  %86 = load i32, i32* %85
  %87 = sext i32 %86 to i64
  %88 = mul nsw i64 %87, 40
  %89 = add i64 %88, %84
  %90 = inttoptr i64 %441 to i32*
  %91 = load i32, i32* %90
  %92 = sext i32 %91 to i64
  store i64 %92, i64* %360, align 8, !tbaa !1240
  %93 = shl nsw i64 %92, 3
  %94 = add i64 %93, %89
  %95 = inttoptr i64 %94 to double*
  store double %74, double* %95
  %96 = inttoptr i64 %435 to double*
  %97 = load double, double* %96
  %98 = inttoptr i64 %442 to i32*
  %99 = load i32, i32* %98
  %100 = sext i32 %99 to i64
  %101 = mul nsw i64 %100, 1000
  %102 = add i64 %101, ptrtoint (%rxm1_s_type* @rxm1_s to i64)
  %103 = inttoptr i64 %437 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %105, 200
  %107 = add i64 %106, %102
  %108 = inttoptr i64 %440 to i32*
  %109 = load i32, i32* %108
  %110 = sext i32 %109 to i64
  %111 = mul nsw i64 %110, 40
  %112 = add i64 %111, %107
  %113 = inttoptr i64 %441 to i32*
  %114 = load i32, i32* %113
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 3
  %117 = add i64 %116, %112
  %118 = inttoptr i64 %117 to double*
  store double %97, double* %118
  %119 = inttoptr i64 %437 to i32*
  %120 = load i32, i32* %119
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, 200
  %123 = add i64 %122, ptrtoint (%w3m1_type* @w3m1 to i64)
  %124 = inttoptr i64 %440 to i32*
  %125 = load i32, i32* %124
  %126 = sext i32 %125 to i64
  %127 = mul nsw i64 %126, 40
  %128 = add i64 %127, %123
  %129 = inttoptr i64 %441 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  %132 = shl nsw i64 %131, 3
  %133 = add i64 %132, %128
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = inttoptr i64 %418 to double*
  %137 = load double, double* %136
  %138 = fmul double %135, %137
  %139 = inttoptr i64 %442 to i32*
  %140 = load i32, i32* %139
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %141, 1000
  %143 = load i64, i64* %6, align 8
  %144 = add i64 %142, %143
  %145 = add i64 %122, %144
  %146 = add i64 %127, %145
  store i64 %146, i64* %11, align 8, !tbaa !1240
  %147 = add i64 %132, %146
  %148 = inttoptr i64 %147 to double*
  store double %138, double* %148
  %149 = inttoptr i64 %437 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %150 to i64
  %152 = mul nsw i64 %151, 200
  %153 = load i64, i64* %10, align 8
  %154 = add i64 %152, %153
  %155 = inttoptr i64 %440 to i32*
  %156 = load i32, i32* %155
  %157 = sext i32 %156 to i64
  %158 = mul nsw i64 %157, 40
  %159 = add i64 %158, %154
  %160 = inttoptr i64 %441 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  store i64 %162, i64* %359, align 8, !tbaa !1240
  %163 = shl nsw i64 %162, 3
  %164 = add i64 %163, %159
  %165 = inttoptr i64 %164 to double*
  %166 = load double, double* %165
  %167 = inttoptr i64 %430 to double*
  %168 = load double, double* %167
  %169 = fmul double %166, %168
  %170 = inttoptr i64 %442 to i32*
  %171 = load i32, i32* %170
  %172 = sext i32 %171 to i64
  %173 = mul nsw i64 %172, 1000
  %174 = load i64, i64* %358, align 8
  %175 = add i64 %173, %174
  %176 = add i64 %152, %175
  %177 = add i64 %158, %176
  %178 = add i64 %163, %177
  %179 = inttoptr i64 %178 to double*
  store double %169, double* %179
  %180 = inttoptr i64 %442 to i32*
  %181 = load i32, i32* %180
  %182 = sext i32 %181 to i64
  %183 = mul nsw i64 %182, 1000
  %184 = add i64 %183, %143
  %185 = inttoptr i64 %437 to i32*
  %186 = load i32, i32* %185
  %187 = sext i32 %186 to i64
  %188 = mul nsw i64 %187, 200
  %189 = add i64 %188, %184
  %190 = inttoptr i64 %440 to i32*
  %191 = load i32, i32* %190
  %192 = sext i32 %191 to i64
  %193 = mul nsw i64 %192, 40
  %194 = add i64 %193, %189
  store i64 %194, i64* %10, align 8, !tbaa !1240
  %195 = inttoptr i64 %441 to i32*
  %196 = load i32, i32* %195
  %197 = sext i32 %196 to i64
  %198 = shl nsw i64 %197, 3
  %199 = add i64 %198, %194
  %200 = inttoptr i64 %199 to double*
  %201 = load double, double* %200
  %202 = add i64 %198, ptrtoint (%wxm1_type* @wxm1 to i64)
  %203 = inttoptr i64 %202 to double*
  %204 = load double, double* %203
  %205 = fdiv double %201, %204
  %206 = load i64, i64* %7, align 8
  %207 = add i64 %183, %206
  %208 = add i64 %188, %207
  %209 = add i64 %193, %208
  %210 = add i64 %198, %209
  %211 = inttoptr i64 %210 to double*
  store double %205, double* %211
  %212 = inttoptr i64 %442 to i32*
  %213 = load i32, i32* %212
  %214 = sext i32 %213 to i64
  %215 = mul nsw i64 %214, 1000
  %216 = load i64, i64* %6, align 8
  %217 = add i64 %215, %216
  %218 = inttoptr i64 %437 to i32*
  %219 = load i32, i32* %218
  %220 = sext i32 %219 to i64
  %221 = mul nsw i64 %220, 200
  %222 = add i64 %221, %217
  %223 = inttoptr i64 %440 to i32*
  %224 = load i32, i32* %223
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, 40
  %227 = add i64 %226, %222
  store i64 %227, i64* %358, align 8, !tbaa !1240
  %228 = inttoptr i64 %441 to i32*
  %229 = load i32, i32* %228
  %230 = sext i32 %229 to i64
  %231 = shl nsw i64 %230, 3
  %232 = add i64 %231, %227
  %233 = inttoptr i64 %232 to double*
  %234 = load double, double* %233
  %235 = shl nsw i64 %225, 3
  %236 = add i64 %235, ptrtoint (%wxm1_type* @wxm1 to i64)
  %237 = inttoptr i64 %236 to double*
  %238 = load double, double* %237
  %239 = fdiv double %234, %238
  %240 = load i64, i64* %357, align 8
  %241 = add i64 %215, %240
  %242 = add i64 %221, %241
  %243 = add i64 %226, %242
  store i64 %230, i64* %7, align 8, !tbaa !1240
  %244 = add i64 %231, %243
  %245 = inttoptr i64 %244 to double*
  store double %239, double* %245
  %246 = inttoptr i64 %442 to i32*
  %247 = load i32, i32* %246
  %248 = sext i32 %247 to i64
  %249 = mul nsw i64 %248, 1000
  %250 = add i64 %249, %216
  %251 = inttoptr i64 %437 to i32*
  %252 = load i32, i32* %251
  %253 = sext i32 %252 to i64
  %254 = mul nsw i64 %253, 200
  %255 = add i64 %254, %250
  %256 = inttoptr i64 %440 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 40
  %260 = add i64 %259, %255
  %261 = inttoptr i64 %441 to i32*
  %262 = load i32, i32* %261
  %263 = sext i32 %262 to i64
  store i64 %263, i64* %357, align 8, !tbaa !1240
  %264 = shl nsw i64 %263, 3
  %265 = add i64 %264, %260
  %266 = inttoptr i64 %265 to double*
  %267 = load double, double* %266
  %268 = shl nsw i64 %253, 3
  %269 = add i64 %268, ptrtoint (%wxm1_type* @wxm1 to i64)
  %270 = inttoptr i64 %269 to double*
  %271 = load double, double* %270
  %272 = fdiv double %267, %271
  store double %272, double* %31, align 1, !tbaa !1246
  store i64 0, i64* %32, align 1, !tbaa !1246
  %273 = load i64, i64* %4, align 8
  %274 = add i64 %249, %273
  %275 = add i64 %254, %274
  %276 = add i64 %259, %275
  store i64 %263, i64* %6, align 8, !tbaa !1240
  %277 = add i64 %264, %276
  %278 = inttoptr i64 %277 to double*
  store double %272, double* %278
  %279 = inttoptr i64 %441 to i32*
  %280 = load i32, i32* %279
  %281 = add i32 %280, 1
  %282 = inttoptr i64 %441 to i32*
  store i32 %281, i32* %282
  %283 = add i64 %672, -10
  br label %block_4173de

block_417310:                                     ; preds = %block_41731a, %block_417300
  %284 = phi i64 [ %29, %block_417300 ], [ %402, %block_41731a ]
  %285 = phi %struct.Memory* [ %2, %block_417300 ], [ %285, %block_41731a ]
  %286 = inttoptr i64 %28 to i32*
  %287 = load i32, i32* %286
  %288 = add i32 %287, -5
  %289 = lshr i32 %288, 31
  %290 = trunc i32 %289 to i8
  %291 = lshr i32 %287, 31
  %292 = xor i32 %289, %291
  %293 = add nuw nsw i32 %292, %291
  %294 = icmp eq i32 %293, 2
  %295 = icmp ne i8 %290, 0
  %296 = xor i1 %295, %294
  %297 = select i1 %296, i64 10, i64 65
  %298 = add i64 %284, %297
  br i1 %296, label %block_41731a, label %block_417351

block_417764:                                     ; preds = %block_41776e, %block_41775d
  %299 = phi %struct.Memory* [ %329, %block_41775d ], [ %299, %block_41776e ]
  %300 = inttoptr i64 %677 to i32*
  %301 = load i32, i32* %300
  %302 = add i32 %301, -5
  %303 = lshr i32 %302, 31
  %304 = lshr i32 %301, 31
  %305 = xor i32 %303, %304
  %306 = add nuw nsw i32 %305, %304
  %307 = icmp eq i32 %306, 2
  %308 = icmp ne i32 %303, 0
  %309 = xor i1 %308, %307
  br i1 %309, label %block_41776e, label %block_4178ee

block_417358:                                     ; preds = %block_41771e, %block_417351
  %310 = phi i64 [ %362, %block_417351 ], [ %382, %block_41771e ]
  %311 = phi i64 [ %16, %block_417351 ], [ %375, %block_41771e ]
  %312 = phi %struct.Memory* [ %285, %block_417351 ], [ %343, %block_41771e ]
  %313 = add i64 %311, -44
  %314 = inttoptr i64 %313 to i32*
  %315 = load i32, i32* %314
  %316 = add i32 %315, -4
  %317 = lshr i32 %316, 31
  %318 = trunc i32 %317 to i8
  %319 = lshr i32 %315, 31
  %320 = xor i32 %317, %319
  %321 = add nuw nsw i32 %320, %319
  %322 = icmp eq i32 %321, 2
  %323 = icmp ne i8 %318, 0
  %324 = xor i1 %323, %322
  %325 = select i1 %324, i64 10, i64 985
  %326 = add i64 %310, %325
  br i1 %324, label %block_417362, label %block_417731

block_4173d7:                                     ; preds = %block_4173cd
  %327 = add i64 %648, 7
  %328 = inttoptr i64 %441 to i32*
  store i32 0, i32* %328
  br label %block_4173de

block_417753:                                     ; preds = %block_417745, %block_4178ee
  %329 = phi %struct.Memory* [ %364, %block_417745 ], [ %299, %block_4178ee ]
  %330 = inttoptr i64 %676 to i32*
  %331 = load i32, i32* %330
  %332 = add i32 %331, -5
  %333 = lshr i32 %332, 31
  %334 = lshr i32 %331, 31
  %335 = xor i32 %333, %334
  %336 = add nuw nsw i32 %335, %334
  %337 = icmp eq i32 %336, 2
  %338 = icmp ne i32 %333, 0
  %339 = xor i1 %338, %337
  br i1 %339, label %block_41775d, label %block_417901

block_4173c6:                                     ; preds = %block_4173bc
  %340 = add i64 %355, 7
  %341 = inttoptr i64 %440 to i32*
  store i32 0, i32* %341
  br label %block_4173cd

block_4173bc:                                     ; preds = %block_41770b, %block_417362
  %342 = phi i64 [ %438, %block_417362 ], [ %634, %block_41770b ]
  %343 = phi %struct.Memory* [ %312, %block_417362 ], [ %636, %block_41770b ]
  %344 = inttoptr i64 %437 to i32*
  %345 = load i32, i32* %344
  %346 = add i32 %345, -5
  %347 = lshr i32 %346, 31
  %348 = lshr i32 %345, 31
  %349 = xor i32 %347, %348
  %350 = add nuw nsw i32 %349, %348
  %351 = icmp eq i32 %350, 2
  %352 = icmp ne i32 %347, 0
  %353 = xor i1 %352, %351
  %354 = select i1 %353, i64 10, i64 866
  %355 = add i64 %342, %354
  br i1 %353, label %block_4173c6, label %block_41771e

block_41775d:                                     ; preds = %block_417753
  %356 = inttoptr i64 %677 to i32*
  store i32 0, i32* %356
  br label %block_417764

block_417351:                                     ; preds = %block_417310
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %361 = add i64 %15, -52
  %362 = add i64 %298, 7
  %363 = inttoptr i64 %361 to i32*
  store i32 0, i32* %363
  br label %block_417358

block_417738:                                     ; preds = %block_417731, %block_417901
  %364 = phi %struct.Memory* [ %312, %block_417731 ], [ %329, %block_417901 ]
  %365 = inttoptr i64 %673 to i32*
  %366 = load i32, i32* %365
  %367 = add i32 %366, -250
  %368 = lshr i32 %367, 31
  %369 = lshr i32 %366, 31
  %370 = xor i32 %368, %369
  %371 = add nuw nsw i32 %370, %369
  %372 = icmp eq i32 %371, 2
  %373 = icmp ne i32 %368, 0
  %374 = xor i1 %373, %372
  br i1 %374, label %block_417745, label %block_417914

block_41771e:                                     ; preds = %block_4173bc
  %375 = load i64, i64* %9, align 8
  %376 = add i64 %375, -44
  %377 = inttoptr i64 %376 to i32*
  %378 = load i32, i32* %377
  %379 = add i32 %378, 1
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %4, align 8, !tbaa !1240
  %381 = inttoptr i64 %376 to i32*
  store i32 %379, i32* %381
  %382 = add i64 %355, -966
  br label %block_417358

block_41731a:                                     ; preds = %block_417310
  %383 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %383, double* %31, align 1, !tbaa !1246
  store double 0.000000e+00, double* %33, align 1, !tbaa !1246
  %384 = sext i32 %287 to i64
  %385 = bitcast double %383 to <2 x i32>
  %386 = extractelement <2 x i32> %385, i32 0
  store i32 %386, i32* %35, align 1, !tbaa !1266
  %387 = extractelement <2 x i32> %385, i32 1
  store i32 %387, i32* %37, align 1, !tbaa !1266
  store i32 0, i32* %39, align 1, !tbaa !1266
  store i32 0, i32* %41, align 1, !tbaa !1266
  %388 = shl nsw i64 %384, 3
  %389 = add i64 %388, ptrtoint (%zgm1_type* @zgm1 to i64)
  %390 = load double, double* %42, align 1
  %391 = inttoptr i64 %389 to double*
  %392 = load double, double* %391
  %393 = fmul double %390, %392
  %394 = fadd double %393, %383
  store double %394, double* %42, align 1, !tbaa !1246
  %395 = add i64 %388, ptrtoint (%xfrac_type* @xfrac to i64)
  %396 = inttoptr i64 %395 to double*
  store double %394, double* %396
  %397 = inttoptr i64 %28 to i32*
  %398 = load i32, i32* %397
  %399 = add i32 %398, 1
  %400 = zext i32 %399 to i64
  store i64 %400, i64* %4, align 8, !tbaa !1240
  %401 = inttoptr i64 %28 to i32*
  store i32 %399, i32* %401
  %402 = add i64 %298, -10
  br label %block_417310

block_417362:                                     ; preds = %block_417358
  %403 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %403, double* %31, align 1, !tbaa !1246
  store double 0.000000e+00, double* %33, align 1, !tbaa !1246
  %404 = sub i32 -2, %315
  %405 = sitofp i32 %404 to double
  store double %405, double* %42, align 1, !tbaa !1246
  %406 = add i64 %326, 25
  %407 = load i64, i64* %8, align 8, !tbaa !1240
  %408 = add i64 %407, -8
  %409 = inttoptr i64 %408 to i64*
  store i64 %406, i64* %409
  %410 = load i64, i64* %358, align 8, !alias.scope !1333, !noalias !1336
  %411 = load i64, i64* %7, align 8, !alias.scope !1333, !noalias !1336
  %412 = inttoptr i64 %408 to i64*
  %413 = load i64, i64* %412
  store i64 %413, i64* %3, align 8, !alias.scope !1333, !noalias !1336
  store i64 %407, i64* %8, align 8, !alias.scope !1333, !noalias !1336
  %414 = tail call i64 @pow(i64 %410, i64 %411), !noalias !1333
  %415 = load i64, i64* %3, align 8
  %416 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %417 = load i64, i64* %9, align 8
  %418 = add i64 %417, -16
  %419 = load double, double* %31, align 1
  %420 = inttoptr i64 %418 to double*
  store double %419, double* %420
  %421 = inttoptr i64 %418 to double*
  %422 = load double, double* %421
  %423 = fdiv double %416, %422
  store double %423, double* %42, align 1, !tbaa !1246
  store i64 0, i64* %38, align 1, !tbaa !1246
  %424 = add i64 %417, -40
  %425 = inttoptr i64 %424 to double*
  store double %423, double* %425
  %426 = inttoptr i64 %418 to double*
  %427 = load double, double* %426
  %428 = fmul double %427, %427
  %429 = fmul double %428, %427
  %430 = add i64 %417, -24
  %431 = inttoptr i64 %430 to double*
  store double %429, double* %431
  %432 = inttoptr i64 %418 to double*
  %433 = load double, double* %432
  %434 = fmul double %433, %433
  store double %434, double* %31, align 1, !tbaa !1246
  store i64 0, i64* %32, align 1, !tbaa !1246
  %435 = add i64 %417, -32
  %436 = inttoptr i64 %435 to double*
  store double %434, double* %436
  %437 = add i64 %417, -56
  %438 = add i64 %415, 65
  %439 = inttoptr i64 %437 to i32*
  store i32 0, i32* %439
  %440 = add i64 %417, -52
  %441 = add i64 %417, -48
  %442 = add i64 %417, -44
  br label %block_4173bc

block_41776e:                                     ; preds = %block_417764
  store i64 ptrtoint (%idel_type* @idel to i64), i64* %4, align 8, !tbaa !1240
  %443 = inttoptr i64 %675 to i32*
  %444 = load i32, i32* %443
  %445 = sext i32 %301 to i64
  %446 = mul i32 %301, 5
  %447 = add i32 %446, %444
  %448 = inttoptr i64 %676 to i32*
  %449 = load i32, i32* %448
  %450 = sext i32 %449 to i64
  %451 = mul i64 %450, 21474836480
  %452 = ashr exact i64 %451, 32
  %453 = mul nsw i64 %452, 5
  %454 = trunc i64 %453 to i32
  %455 = add i32 %454, %447
  %456 = add i32 %455, 4
  %457 = inttoptr i64 %673 to i32*
  %458 = load i32, i32* %457
  %459 = sext i32 %458 to i64
  %460 = mul nsw i64 %459, 600
  %461 = add i64 %460, ptrtoint (%idel_type* @idel to i64)
  %462 = mul nsw i64 %450, 20
  %463 = add i64 %462, %461
  %464 = shl nsw i64 %445, 2
  %465 = add i64 %464, %463
  %466 = inttoptr i64 %465 to i32*
  store i32 %456, i32* %466
  %467 = inttoptr i64 %675 to i32*
  %468 = load i32, i32* %467
  %469 = inttoptr i64 %677 to i32*
  %470 = load i32, i32* %469
  %471 = sext i32 %470 to i64
  %472 = mul i32 %470, 5
  %473 = add i32 %472, %468
  %474 = inttoptr i64 %676 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  %477 = mul i64 %476, 21474836480
  %478 = ashr exact i64 %477, 32
  %479 = mul nsw i64 %478, 5
  %480 = trunc i64 %479 to i32
  %481 = add i32 %480, %473
  %482 = inttoptr i64 %673 to i32*
  %483 = load i32, i32* %482
  %484 = sext i32 %483 to i64
  %485 = mul nsw i64 %484, 600
  %486 = add i64 %485, add (i64 ptrtoint (%idel_type* @idel to i64), i64 100)
  %487 = mul nsw i64 %476, 20
  %488 = add i64 %487, %486
  %489 = shl nsw i64 %471, 2
  %490 = add i64 %489, %488
  %491 = inttoptr i64 %490 to i32*
  store i32 %481, i32* %491
  %492 = inttoptr i64 %675 to i32*
  %493 = load i32, i32* %492
  %494 = inttoptr i64 %677 to i32*
  %495 = load i32, i32* %494
  %496 = add i32 %495, %493
  %497 = inttoptr i64 %676 to i32*
  %498 = load i32, i32* %497
  %499 = sext i32 %498 to i64
  %500 = mul i64 %499, 21474836480
  %501 = ashr exact i64 %500, 32
  %502 = mul nsw i64 %501, 5
  %503 = trunc i64 %502 to i32
  %504 = add i32 %503, %496
  %505 = add i32 %504, 20
  %506 = inttoptr i64 %673 to i32*
  %507 = load i32, i32* %506
  %508 = sext i32 %507 to i64
  %509 = mul nsw i64 %508, 600
  %510 = load i64, i64* %4, align 8
  %511 = add i64 %509, %510
  %512 = add i64 %511, 200
  %513 = mul nsw i64 %499, 20
  %514 = add i64 %513, %512
  %515 = sext i32 %495 to i64
  %516 = shl nsw i64 %515, 2
  %517 = add i64 %516, %514
  %518 = inttoptr i64 %517 to i32*
  store i32 %505, i32* %518
  %519 = inttoptr i64 %675 to i32*
  %520 = load i32, i32* %519
  %521 = inttoptr i64 %677 to i32*
  %522 = load i32, i32* %521
  %523 = add i32 %522, %520
  %524 = inttoptr i64 %676 to i32*
  %525 = load i32, i32* %524
  %526 = sext i32 %525 to i64
  %527 = mul i64 %526, 21474836480
  %528 = ashr exact i64 %527, 32
  %529 = mul nsw i64 %528, 5
  %530 = trunc i64 %529 to i32
  %531 = add i32 %530, %523
  %532 = inttoptr i64 %673 to i32*
  %533 = load i32, i32* %532
  %534 = sext i32 %533 to i64
  %535 = mul nsw i64 %534, 600
  %536 = add i64 %535, %510
  %537 = add i64 %536, 300
  %538 = mul nsw i64 %526, 20
  %539 = add i64 %538, %537
  %540 = sext i32 %522 to i64
  %541 = shl nsw i64 %540, 2
  %542 = add i64 %541, %539
  %543 = inttoptr i64 %542 to i32*
  store i32 %531, i32* %543
  %544 = inttoptr i64 %675 to i32*
  %545 = load i32, i32* %544
  %546 = inttoptr i64 %677 to i32*
  %547 = load i32, i32* %546
  %548 = add i32 %547, %545
  %549 = inttoptr i64 %676 to i32*
  %550 = load i32, i32* %549
  %551 = sext i32 %550 to i64
  %552 = mul i32 %550, 5
  %553 = add i32 %552, %548
  %554 = add i32 %553, 100
  %555 = inttoptr i64 %673 to i32*
  %556 = load i32, i32* %555
  %557 = sext i32 %556 to i64
  %558 = mul nsw i64 %557, 600
  %559 = add i64 %558, %510
  %560 = add i64 %559, 400
  %561 = mul nsw i64 %551, 20
  %562 = add i64 %561, %560
  store i64 %562, i64* %358, align 8, !tbaa !1240
  %563 = sext i32 %547 to i64
  %564 = shl nsw i64 %563, 2
  %565 = add i64 %564, %562
  %566 = inttoptr i64 %565 to i32*
  store i32 %554, i32* %566
  %567 = inttoptr i64 %675 to i32*
  %568 = load i32, i32* %567
  %569 = inttoptr i64 %677 to i32*
  %570 = load i32, i32* %569
  %571 = add i32 %570, %568
  %572 = inttoptr i64 %676 to i32*
  %573 = load i32, i32* %572
  %574 = sext i32 %573 to i64
  %575 = mul nsw i64 %574, 5
  %576 = and i64 %575, 4294967295
  store i64 %576, i64* %357, align 8, !tbaa !1240
  %577 = trunc i64 %575 to i32
  %578 = add i32 %577, %571
  %579 = zext i32 %578 to i64
  store i64 %579, i64* %6, align 8, !tbaa !1240
  %580 = inttoptr i64 %673 to i32*
  %581 = load i32, i32* %580
  %582 = sext i32 %581 to i64
  %583 = mul nsw i64 %582, 600
  %584 = load i64, i64* %4, align 8
  %585 = add i64 %583, %584
  %586 = add i64 %585, 500
  %587 = mul nsw i64 %574, 20
  %588 = add i64 %587, %586
  %589 = sext i32 %570 to i64
  store i64 %589, i64* %7, align 8, !tbaa !1240
  %590 = shl nsw i64 %589, 2
  %591 = add i64 %590, %588
  %592 = inttoptr i64 %591 to i32*
  store i32 %578, i32* %592
  %593 = inttoptr i64 %677 to i32*
  %594 = load i32, i32* %593
  %595 = add i32 %594, 1
  %596 = inttoptr i64 %677 to i32*
  store i32 %595, i32* %596
  br label %block_417764

block_417914:                                     ; preds = %block_417738
  %597 = load i64, i64* %8, align 8
  %598 = add i64 %597, 56
  %599 = icmp ugt i64 %597, -57
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %22, align 1, !tbaa !1248
  %601 = trunc i64 %598 to i32
  %602 = and i32 %601, 255
  %603 = tail call i32 @llvm.ctpop.i32(i32 %602) #11
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = xor i8 %605, 1
  store i8 %606, i8* %23, align 1, !tbaa !1261
  %607 = xor i64 %597, 16
  %608 = xor i64 %607, %598
  %609 = lshr i64 %608, 4
  %610 = trunc i64 %609 to i8
  %611 = and i8 %610, 1
  store i8 %611, i8* %24, align 1, !tbaa !1262
  %612 = icmp eq i64 %598, 0
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %25, align 1, !tbaa !1263
  %614 = lshr i64 %598, 63
  %615 = trunc i64 %614 to i8
  store i8 %615, i8* %26, align 1, !tbaa !1264
  %616 = lshr i64 %597, 63
  %617 = xor i64 %614, %616
  %618 = add nuw nsw i64 %617, %614
  %619 = icmp eq i64 %618, 2
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %27, align 1, !tbaa !1265
  %621 = add i64 %597, 64
  %622 = inttoptr i64 %598 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %5, align 8, !tbaa !1240
  %624 = add i64 %597, 72
  %625 = inttoptr i64 %621 to i64*
  %626 = load i64, i64* %625
  store i64 %626, i64* %9, align 8, !tbaa !1240
  %627 = inttoptr i64 %624 to i64*
  %628 = load i64, i64* %627
  store i64 %628, i64* %3, align 8, !tbaa !1240
  %629 = add i64 %597, 80
  store i64 %629, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %364

block_41770b:                                     ; preds = %block_4173cd
  %630 = inttoptr i64 %437 to i32*
  %631 = load i32, i32* %630
  %632 = add i32 %631, 1
  %633 = inttoptr i64 %437 to i32*
  store i32 %632, i32* %633
  %634 = add i64 %648, -847
  br label %block_4173bc

block_4173cd:                                     ; preds = %block_4173c6, %block_4176f8
  %635 = phi i64 [ %340, %block_4173c6 ], [ %47, %block_4176f8 ]
  %636 = phi %struct.Memory* [ %343, %block_4173c6 ], [ %660, %block_4176f8 ]
  %637 = inttoptr i64 %440 to i32*
  %638 = load i32, i32* %637
  %639 = add i32 %638, -5
  %640 = lshr i32 %639, 31
  %641 = lshr i32 %638, 31
  %642 = xor i32 %640, %641
  %643 = add nuw nsw i32 %642, %641
  %644 = icmp eq i32 %643, 2
  %645 = icmp ne i32 %640, 0
  %646 = xor i1 %645, %644
  %647 = select i1 %646, i64 10, i64 830
  %648 = add i64 %635, %647
  br i1 %646, label %block_4173d7, label %block_41770b

block_417745:                                     ; preds = %block_417738
  %649 = sext i32 %366 to i64
  %650 = mul nsw i64 %649, 125
  %651 = trunc i64 %650 to i32
  %652 = inttoptr i64 %675 to i32*
  store i32 %651, i32* %652
  %653 = inttoptr i64 %676 to i32*
  store i32 0, i32* %653
  br label %block_417753

block_417901:                                     ; preds = %block_417753
  %654 = inttoptr i64 %673 to i32*
  %655 = load i32, i32* %654
  %656 = add i32 %655, 1
  %657 = zext i32 %656 to i64
  store i64 %657, i64* %4, align 8, !tbaa !1240
  %658 = inttoptr i64 %673 to i32*
  store i32 %656, i32* %658
  br label %block_417738

block_4173de:                                     ; preds = %block_4173d7, %block_4173e8
  %659 = phi i64 [ %327, %block_4173d7 ], [ %283, %block_4173e8 ]
  %660 = phi %struct.Memory* [ %636, %block_4173d7 ], [ %660, %block_4173e8 ]
  %661 = inttoptr i64 %441 to i32*
  %662 = load i32, i32* %661
  %663 = add i32 %662, -5
  %664 = lshr i32 %663, 31
  %665 = lshr i32 %662, 31
  %666 = xor i32 %664, %665
  %667 = add nuw nsw i32 %666, %665
  %668 = icmp eq i32 %667, 2
  %669 = icmp ne i32 %664, 0
  %670 = xor i1 %669, %668
  %671 = select i1 %670, i64 10, i64 794
  %672 = add i64 %659, %671
  br i1 %670, label %block_4173e8, label %block_4176f8

block_417731:                                     ; preds = %block_417358
  %673 = add i64 %311, -64
  %674 = inttoptr i64 %673 to i32*
  store i32 0, i32* %674
  %675 = add i64 %311, -60
  %676 = add i64 %311, -52
  %677 = add i64 %311, -48
  br label %block_417738
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4033a0_merging(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4033a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = add i64 %14, -136
  store i64 %17, i64* %9, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%zc_type* @zc to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%yc_type* @yc to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%xc_type* @xc to i64), i64* %6, align 8, !tbaa !1240
  %24 = add i64 %14, -16
  %25 = load i64, i64* %8, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = inttoptr i64 %24 to i64*
  %28 = load i64, i64* %27
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29
  %31 = add i64 %14, -68
  %32 = inttoptr i64 %31 to i32*
  store i32 %30, i32* %32
  %33 = inttoptr i64 %31 to i32*
  %34 = load i32, i32* %33
  %35 = sext i32 %34 to i64
  %36 = shl nsw i64 %35, 2
  %37 = add i64 %36, ptrtoint (%tree_type* @tree to i64)
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  %41 = shl nuw i64 %40, 32
  %42 = ashr i64 %41, 34
  %43 = lshr i64 %42, 1
  %44 = load i64, i64* %10, align 8
  %45 = add i64 %44, -60
  %46 = inttoptr i64 %45 to i32*
  %47 = load i32, i32* %46
  %48 = sext i32 %47 to i64
  %49 = shl nsw i64 %48, 2
  %50 = add i64 %49, ptrtoint (%tree_type* @tree to i64)
  %51 = trunc i64 %43 to i32
  %52 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %52
  %53 = add i64 %44, -8
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = sext i32 %57 to i64
  %59 = shl nsw i64 %58, 6
  %60 = load i64, i64* %6, align 8
  %61 = add i64 %59, %60
  store i64 %61, i64* %11, align 8, !tbaa !1240
  %62 = inttoptr i64 %61 to double*
  %63 = load double, double* %62
  %64 = bitcast %union.VectorReg* %12 to double*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %67 = add i64 %44, -16
  %68 = inttoptr i64 %67 to double*
  store double %63, double* %68
  %69 = inttoptr i64 %53 to i64*
  %70 = load i64, i64* %69
  %71 = add i64 %70, 4
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 6
  %76 = add i64 %75, %60
  %77 = add i64 %76, 8
  %78 = inttoptr i64 %77 to double*
  %79 = load double, double* %78
  %80 = load i64, i64* %10, align 8
  %81 = add i64 %80, -24
  %82 = inttoptr i64 %81 to double*
  store double %79, double* %82
  %83 = add i64 %80, -8
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86
  %88 = sext i32 %87 to i64
  %89 = shl nsw i64 %88, 6
  %90 = load i64, i64* %5, align 8
  %91 = add i64 %89, %90
  %92 = inttoptr i64 %91 to double*
  %93 = load double, double* %92
  %94 = add i64 %80, -32
  %95 = inttoptr i64 %94 to double*
  store double %93, double* %95
  %96 = inttoptr i64 %83 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 6
  %103 = add i64 %102, %90
  %104 = add i64 %103, 16
  %105 = inttoptr i64 %104 to double*
  %106 = load double, double* %105
  %107 = load i64, i64* %10, align 8
  %108 = add i64 %107, -40
  %109 = inttoptr i64 %108 to double*
  store double %106, double* %109
  %110 = add i64 %107, -8
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = inttoptr i64 %112 to i32*
  %114 = load i32, i32* %113
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 6
  %117 = load i64, i64* %4, align 8
  %118 = add i64 %116, %117
  %119 = inttoptr i64 %118 to double*
  %120 = load double, double* %119
  %121 = add i64 %107, -48
  %122 = inttoptr i64 %121 to double*
  store double %120, double* %122
  %123 = inttoptr i64 %110 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %124, 16
  %126 = inttoptr i64 %125 to i32*
  %127 = load i32, i32* %126
  %128 = sext i32 %127 to i64
  %129 = shl nsw i64 %128, 6
  %130 = add i64 %129, %117
  %131 = add i64 %130, 32
  %132 = inttoptr i64 %131 to double*
  %133 = load double, double* %132
  store double %133, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %134 = load i64, i64* %10, align 8
  %135 = add i64 %134, -56
  %136 = inttoptr i64 %135 to double*
  store double %133, double* %136
  %137 = add i64 %134, -64
  %138 = add i64 %1, 240
  %139 = inttoptr i64 %137 to i32*
  store i32 0, i32* %139
  %140 = add i64 %134, -16
  %141 = add i64 %134, -60
  br label %block_403490

block_403577:                                     ; preds = %block_403581, %block_403570
  %142 = phi i64 [ %200, %block_403570 ], [ %1027, %block_403581 ]
  %143 = phi %struct.Memory* [ %917, %block_403570 ], [ %143, %block_403581 ]
  %144 = inttoptr i64 %137 to i32*
  %145 = load i32, i32* %144
  %146 = add i32 %145, -4
  %147 = lshr i32 %146, 31
  %148 = trunc i32 %147 to i8
  %149 = lshr i32 %145, 31
  %150 = xor i32 %147, %149
  %151 = add nuw nsw i32 %150, %149
  %152 = icmp eq i32 %151, 2
  %153 = icmp ne i8 %148, 0
  %154 = xor i1 %153, %152
  %155 = select i1 %154, i64 10, i64 92
  %156 = add i64 %142, %155
  br i1 %154, label %block_403581, label %block_4035d3

block_403c1c:                                     ; preds = %block_40365e
  %157 = load i64, i64* %10, align 8
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %8, align 8, !tbaa !1240
  %161 = add i64 %157, -60
  %162 = inttoptr i64 %161 to i32*
  %163 = load i32, i32* %162
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %7, align 8, !tbaa !1240
  %165 = add i64 %256, 36
  %166 = add i64 %256, 12
  %167 = load i64, i64* %9, align 8, !tbaa !1240
  %168 = add i64 %167, -8
  %169 = inttoptr i64 %168 to i64*
  store i64 %166, i64* %169
  store i64 %168, i64* %9, align 8, !tbaa !1240
  %170 = tail call %struct.Memory* @sub_403c40_remap2(%struct.State* nonnull %0, i64 %165, %struct.Memory* %243)
  %171 = load i64, i64* %9, align 8
  %172 = add i64 %171, 128
  %173 = icmp ugt i64 %171, -129
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %18, align 1, !tbaa !1248
  %175 = trunc i64 %172 to i32
  %176 = and i32 %175, 255
  %177 = tail call i32 @llvm.ctpop.i32(i32 %176) #11
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  store i8 %180, i8* %19, align 1, !tbaa !1261
  %181 = xor i64 %172, %171
  %182 = lshr i64 %181, 4
  %183 = trunc i64 %182 to i8
  %184 = and i8 %183, 1
  store i8 %184, i8* %20, align 1, !tbaa !1262
  %185 = icmp eq i64 %172, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %21, align 1, !tbaa !1263
  %187 = lshr i64 %172, 63
  %188 = trunc i64 %187 to i8
  store i8 %188, i8* %22, align 1, !tbaa !1264
  %189 = lshr i64 %171, 63
  %190 = xor i64 %187, %189
  %191 = add nuw nsw i64 %190, %187
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %23, align 1, !tbaa !1265
  %194 = add i64 %171, 136
  %195 = inttoptr i64 %172 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %10, align 8, !tbaa !1240
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %3, align 8, !tbaa !1240
  %199 = add i64 %171, 144
  store i64 %199, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %170

block_403570:                                     ; preds = %block_403514
  %200 = add i64 %930, 7
  %201 = inttoptr i64 %137 to i32*
  store i32 2, i32* %201
  %202 = add i64 %134, -40
  br label %block_403577

block_403668:                                     ; preds = %block_40365e
  %203 = sext i32 %245 to i64
  %204 = shl nsw i64 %203, 2
  %205 = add i64 %204, ptrtoint (%jjface_type* @jjface to i64)
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206
  %208 = inttoptr i64 %977 to i32*
  store i32 %207, i32* %208
  %209 = inttoptr i64 %978 to i64*
  %210 = load i64, i64* %209
  %211 = inttoptr i64 %137 to i32*
  %212 = load i32, i32* %211
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 4
  %215 = add i64 %214, ptrtoint (%children_type* @children to i64)
  %216 = inttoptr i64 %215 to i32*
  %217 = load i32, i32* %216
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 2
  %220 = add i64 %219, %210
  %221 = inttoptr i64 %220 to i32*
  %222 = load i32, i32* %221
  %223 = inttoptr i64 %979 to i32*
  store i32 %222, i32* %223
  %224 = add i64 %256, 55
  %225 = inttoptr i64 %980 to i32*
  store i32 0, i32* %225
  br label %block_40369f

block_4035e4:                                     ; preds = %block_4035da
  %226 = inttoptr i64 %708 to double*
  %227 = load double, double* %226
  store double %227, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %228 = inttoptr i64 %141 to i32*
  %229 = load i32, i32* %228
  %230 = sext i32 %229 to i64
  %231 = shl nsw i64 %230, 6
  %232 = add i64 %231, ptrtoint (%zc_type* @zc to i64)
  %233 = sext i32 %740 to i64
  %234 = shl nsw i64 %233, 3
  %235 = add i64 %234, %232
  %236 = inttoptr i64 %235 to double*
  store double %227, double* %236
  %237 = inttoptr i64 %137 to i32*
  %238 = load i32, i32* %237
  %239 = add i32 %238, 1
  %240 = inttoptr i64 %137 to i32*
  store i32 %239, i32* %240
  %241 = add i64 %751, -10
  br label %block_4035da

block_40365e:                                     ; preds = %block_403c09, %block_403657
  %242 = phi i64 [ %975, %block_403657 ], [ %993, %block_403c09 ]
  %243 = phi %struct.Memory* [ %833, %block_403657 ], [ %987, %block_403c09 ]
  %244 = inttoptr i64 %137 to i32*
  %245 = load i32, i32* %244
  %246 = add i32 %245, -6
  %247 = lshr i32 %246, 31
  %248 = trunc i32 %247 to i8
  %249 = lshr i32 %245, 31
  %250 = xor i32 %247, %249
  %251 = add nuw nsw i32 %250, %249
  %252 = icmp eq i32 %251, 2
  %253 = icmp ne i8 %248, 0
  %254 = xor i1 %253, %252
  %255 = select i1 %254, i64 10, i64 1470
  %256 = add i64 %242, %255
  br i1 %254, label %block_403668, label %block_403c1c

block_403b59:                                     ; preds = %block_403b4f
  %257 = inttoptr i64 %141 to i32*
  %258 = load i32, i32* %257
  %259 = sext i32 %258 to i64
  %260 = mul nsw i64 %259, 24
  %261 = add i64 %260, ptrtoint (%cbc_type* @cbc to i64)
  %262 = inttoptr i64 %137 to i32*
  %263 = load i32, i32* %262
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 2
  %266 = add i64 %265, %261
  %267 = inttoptr i64 %266 to i32*
  store i32 0, i32* %267
  %268 = inttoptr i64 %141 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  %271 = mul nsw i64 %270, 96
  %272 = add i64 %271, ptrtoint (%sje_type* @sje to i64)
  %273 = inttoptr i64 %137 to i32*
  %274 = load i32, i32* %273
  %275 = sext i32 %274 to i64
  %276 = shl nsw i64 %275, 4
  %277 = add i64 %276, %272
  %278 = inttoptr i64 %277 to i32*
  store i32 -1, i32* %278
  %279 = inttoptr i64 %141 to i32*
  %280 = load i32, i32* %279
  %281 = sext i32 %280 to i64
  %282 = mul nsw i64 %281, 96
  %283 = add i64 %282, ptrtoint (%sje_type* @sje to i64)
  %284 = inttoptr i64 %137 to i32*
  %285 = load i32, i32* %284
  %286 = sext i32 %285 to i64
  %287 = shl nsw i64 %286, 4
  %288 = add i64 %287, %283
  %289 = or i64 %288, 8
  %290 = inttoptr i64 %289 to i32*
  store i32 -1, i32* %290
  %291 = inttoptr i64 %141 to i32*
  %292 = load i32, i32* %291
  %293 = sext i32 %292 to i64
  %294 = mul nsw i64 %293, 96
  %295 = add i64 %294, ptrtoint (%sje_type* @sje to i64)
  %296 = inttoptr i64 %137 to i32*
  %297 = load i32, i32* %296
  %298 = sext i32 %297 to i64
  %299 = shl nsw i64 %298, 4
  %300 = add i64 %299, %295
  %301 = or i64 %300, 4
  %302 = inttoptr i64 %301 to i32*
  store i32 -1, i32* %302
  %303 = inttoptr i64 %141 to i32*
  %304 = load i32, i32* %303
  %305 = sext i32 %304 to i64
  %306 = mul nsw i64 %305, 96
  %307 = add i64 %306, ptrtoint (%sje_type* @sje to i64)
  %308 = inttoptr i64 %137 to i32*
  %309 = load i32, i32* %308
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 4
  %312 = add i64 %311, %307
  %313 = or i64 %312, 12
  %314 = add i64 %318, 166
  %315 = inttoptr i64 %313 to i32*
  store i32 -1, i32* %315
  br label %block_403c04

block_403b4f:                                     ; preds = %block_4039d3
  %316 = icmp ne i32 %948, 0
  %317 = select i1 %316, i64 176, i64 10
  %318 = add i64 %933, %317
  br i1 %316, label %block_403c04, label %block_403b59

block_40384d:                                     ; preds = %block_403846, %block_403857
  %319 = phi i64 [ %864, %block_403846 ], [ %555, %block_403857 ]
  %320 = phi %struct.Memory* [ %867, %block_403846 ], [ %320, %block_403857 ]
  %321 = inttoptr i64 %980 to i32*
  %322 = load i32, i32* %321
  %323 = add i32 %322, -4
  %324 = lshr i32 %323, 31
  %325 = lshr i32 %322, 31
  %326 = xor i32 %324, %325
  %327 = add nuw nsw i32 %326, %325
  %328 = icmp eq i32 %327, 2
  %329 = icmp ne i32 %324, 0
  %330 = xor i1 %329, %328
  %331 = select i1 %330, i64 10, i64 353
  %332 = add i64 %319, %331
  br i1 %330, label %block_403857, label %block_4039ae

block_4034cb:                                     ; preds = %block_403490
  %333 = add i64 %915, 7
  %334 = inttoptr i64 %137 to i32*
  store i32 1, i32* %334
  %335 = add i64 %134, -24
  br label %block_4034d2

block_403747:                                     ; preds = %block_40373d
  %336 = icmp eq i32 %961, 3
  %337 = select i1 %336, i64 20, i64 10
  %338 = add i64 %558, %337
  br i1 %336, label %block_40375b, label %block_403751

block_4034d2:                                     ; preds = %block_4034dc, %block_4034cb
  %339 = phi i64 [ %333, %block_4034cb ], [ %797, %block_4034dc ]
  %340 = phi %struct.Memory* [ %902, %block_4034cb ], [ %340, %block_4034dc ]
  %341 = inttoptr i64 %137 to i32*
  %342 = load i32, i32* %341
  %343 = add i32 %342, -8
  %344 = lshr i32 %343, 31
  %345 = trunc i32 %344 to i8
  %346 = lshr i32 %342, 31
  %347 = xor i32 %344, %346
  %348 = add nuw nsw i32 %347, %346
  %349 = icmp eq i32 %348, 2
  %350 = icmp ne i8 %345, 0
  %351 = xor i1 %350, %349
  %352 = select i1 %351, i64 10, i64 59
  %353 = add i64 %339, %352
  br i1 %351, label %block_4034dc, label %block_40350d

block_4037c2:                                     ; preds = %block_40375b, %block_40379d
  %354 = phi i64 [ %863, %block_40375b ], [ %806, %block_40379d ]
  %355 = phi %struct.Memory* [ %867, %block_40375b ], [ %867, %block_40379d ]
  %356 = inttoptr i64 %983 to i32*
  %357 = load i32, i32* %356
  %358 = inttoptr i64 %141 to i32*
  %359 = load i32, i32* %358
  %360 = sext i32 %359 to i64
  %361 = mul nsw i64 %360, 96
  %362 = add i64 %361, ptrtoint (%sje_type* @sje to i64)
  %363 = inttoptr i64 %137 to i32*
  %364 = load i32, i32* %363
  %365 = sext i32 %364 to i64
  %366 = shl nsw i64 %365, 4
  %367 = add i64 %366, %362
  %368 = inttoptr i64 %367 to i32*
  store i32 %357, i32* %368
  %369 = inttoptr i64 %141 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  %372 = mul nsw i64 %371, 48
  %373 = add i64 %372, ptrtoint (%ijel_type* @ijel to i64)
  %374 = inttoptr i64 %137 to i32*
  %375 = load i32, i32* %374
  %376 = sext i32 %375 to i64
  %377 = shl nsw i64 %376, 3
  %378 = add i64 %377, %373
  %379 = inttoptr i64 %378 to i32*
  store i32 0, i32* %379
  %380 = inttoptr i64 %141 to i32*
  %381 = load i32, i32* %380
  %382 = sext i32 %381 to i64
  %383 = mul nsw i64 %382, 48
  %384 = inttoptr i64 %137 to i32*
  %385 = load i32, i32* %384
  %386 = sext i32 %385 to i64
  %387 = shl nsw i64 %386, 3
  %388 = add i64 %383, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %389 = add i64 %388, %387
  %390 = inttoptr i64 %389 to i32*
  store i32 0, i32* %390
  %391 = inttoptr i64 %141 to i32*
  %392 = load i32, i32* %391
  %393 = sext i32 %392 to i64
  %394 = mul nsw i64 %393, 24
  %395 = add i64 %394, ptrtoint (%cbc_type* @cbc to i64)
  %396 = inttoptr i64 %137 to i32*
  %397 = load i32, i32* %396
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 2
  %400 = add i64 %399, %395
  %401 = inttoptr i64 %400 to i32*
  store i32 2, i32* %401
  %402 = add i64 %354, 524
  br label %block_403c09

block_403857:                                     ; preds = %block_40384d
  store i64 ptrtoint (%ijel_type* @ijel to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %5, align 8, !tbaa !1240
  %403 = sext i32 %322 to i64
  %404 = shl nsw i64 %403, 2
  %405 = add i64 %981, %404
  %406 = inttoptr i64 %405 to i32*
  %407 = load i32, i32* %406
  %408 = sext i32 %407 to i64
  %409 = mul nsw i64 %408, 96
  %410 = add i64 %409, ptrtoint (%sje_type* @sje to i64)
  %411 = inttoptr i64 %137 to i32*
  %412 = load i32, i32* %411
  %413 = sext i32 %412 to i64
  %414 = shl nsw i64 %413, 4
  %415 = add i64 %414, %410
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = add i64 %984, %404
  %419 = inttoptr i64 %418 to i32*
  store i32 %417, i32* %419
  %420 = inttoptr i64 %980 to i32*
  %421 = load i32, i32* %420
  %422 = sext i32 %421 to i64
  %423 = shl nsw i64 %422, 2
  %424 = add i64 %984, %423
  %425 = inttoptr i64 %424 to i32*
  %426 = load i32, i32* %425
  %427 = sext i32 %426 to i64
  %428 = mul nsw i64 %427, 24
  %429 = add i64 %428, ptrtoint (%cbc_type* @cbc to i64)
  %430 = inttoptr i64 %977 to i32*
  %431 = load i32, i32* %430
  %432 = sext i32 %431 to i64
  %433 = shl nsw i64 %432, 2
  %434 = add i64 %433, %429
  %435 = inttoptr i64 %434 to i32*
  store i32 1, i32* %435
  %436 = inttoptr i64 %141 to i32*
  %437 = load i32, i32* %436
  %438 = inttoptr i64 %980 to i32*
  %439 = load i32, i32* %438
  %440 = sext i32 %439 to i64
  %441 = shl nsw i64 %440, 2
  %442 = add i64 %984, %441
  %443 = inttoptr i64 %442 to i32*
  %444 = load i32, i32* %443
  %445 = sext i32 %444 to i64
  %446 = mul nsw i64 %445, 96
  %447 = add i64 %446, ptrtoint (%sje_type* @sje to i64)
  %448 = inttoptr i64 %977 to i32*
  %449 = load i32, i32* %448
  %450 = sext i32 %449 to i64
  %451 = shl nsw i64 %450, 4
  %452 = add i64 %451, %447
  %453 = inttoptr i64 %452 to i32*
  store i32 %437, i32* %453
  %454 = inttoptr i64 %980 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  %457 = shl nsw i64 %456, 3
  %458 = add i64 %457, ptrtoint (%iijj_type* @iijj to i64)
  %459 = inttoptr i64 %458 to i32*
  %460 = load i32, i32* %459
  %461 = shl nsw i64 %456, 2
  %462 = add i64 %984, %461
  %463 = inttoptr i64 %462 to i32*
  %464 = load i32, i32* %463
  %465 = sext i32 %464 to i64
  %466 = mul nsw i64 %465, 48
  %467 = add i64 %466, ptrtoint (%ijel_type* @ijel to i64)
  %468 = inttoptr i64 %977 to i32*
  %469 = load i32, i32* %468
  %470 = sext i32 %469 to i64
  %471 = shl nsw i64 %470, 3
  %472 = add i64 %471, %467
  %473 = inttoptr i64 %472 to i32*
  store i32 %460, i32* %473
  %474 = inttoptr i64 %980 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  %477 = shl nsw i64 %476, 3
  %478 = add i64 %477, add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 4)
  %479 = inttoptr i64 %478 to i32*
  %480 = load i32, i32* %479
  %481 = shl nsw i64 %476, 2
  %482 = add i64 %984, %481
  %483 = inttoptr i64 %482 to i32*
  %484 = load i32, i32* %483
  %485 = sext i32 %484 to i64
  %486 = mul nsw i64 %485, 48
  %487 = inttoptr i64 %977 to i32*
  %488 = load i32, i32* %487
  %489 = sext i32 %488 to i64
  %490 = shl nsw i64 %489, 3
  %491 = add i64 %486, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %492 = add i64 %491, %490
  %493 = inttoptr i64 %492 to i32*
  store i32 %480, i32* %493
  %494 = inttoptr i64 %980 to i32*
  %495 = load i32, i32* %494
  %496 = sext i32 %495 to i64
  %497 = shl nsw i64 %496, 2
  %498 = add i64 %984, %497
  %499 = inttoptr i64 %498 to i32*
  %500 = load i32, i32* %499
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %11, align 8, !tbaa !1240
  %502 = inttoptr i64 %141 to i32*
  %503 = load i32, i32* %502
  %504 = sext i32 %503 to i64
  %505 = mul nsw i64 %504, 96
  %506 = load i64, i64* %5, align 8
  %507 = add i64 %505, %506
  %508 = inttoptr i64 %137 to i32*
  %509 = load i32, i32* %508
  %510 = sext i32 %509 to i64
  %511 = shl nsw i64 %510, 4
  %512 = add i64 %511, %507
  %513 = shl nsw i64 %496, 3
  %514 = add i64 %513, add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 4)
  %515 = inttoptr i64 %514 to i32*
  %516 = load i32, i32* %515
  %517 = sext i32 %516 to i64
  %518 = shl nsw i64 %517, 3
  %519 = add i64 %518, %512
  %520 = add i64 %513, ptrtoint (%iijj_type* @iijj to i64)
  %521 = inttoptr i64 %520 to i32*
  %522 = load i32, i32* %521
  %523 = sext i32 %522 to i64
  %524 = shl nsw i64 %523, 2
  %525 = add i64 %524, %519
  %526 = inttoptr i64 %525 to i32*
  store i32 %500, i32* %526
  %527 = inttoptr i64 %141 to i32*
  %528 = load i32, i32* %527
  %529 = sext i32 %528 to i64
  %530 = mul nsw i64 %529, 48
  %531 = load i64, i64* %4, align 8
  %532 = add i64 %530, %531
  %533 = inttoptr i64 %137 to i32*
  %534 = load i32, i32* %533
  %535 = sext i32 %534 to i64
  %536 = shl nsw i64 %535, 3
  %537 = add i64 %536, %532
  %538 = inttoptr i64 %537 to i32*
  store i32 0, i32* %538
  %539 = inttoptr i64 %141 to i32*
  %540 = load i32, i32* %539
  %541 = sext i32 %540 to i64
  %542 = mul nsw i64 %541, 48
  %543 = add i64 %542, %531
  %544 = inttoptr i64 %137 to i32*
  %545 = load i32, i32* %544
  %546 = sext i32 %545 to i64
  %547 = shl nsw i64 %546, 3
  %548 = add i64 %543, 4
  %549 = add i64 %548, %547
  %550 = inttoptr i64 %549 to i32*
  store i32 0, i32* %550
  %551 = inttoptr i64 %980 to i32*
  %552 = load i32, i32* %551
  %553 = add i32 %552, 1
  %554 = inttoptr i64 %980 to i32*
  store i32 %553, i32* %554
  %555 = add i64 %332, -10
  br label %block_40384d

block_40373d:                                     ; preds = %block_40370c
  %556 = icmp eq i32 %961, 1
  %557 = select i1 %556, i64 30, i64 10
  %558 = add i64 %974, %557
  br i1 %556, label %block_40375b, label %block_403747

block_4039dd:                                     ; preds = %block_4039d3
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%ijel_type* @ijel to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %6, align 8, !tbaa !1240
  %559 = inttoptr i64 %979 to i32*
  %560 = load i32, i32* %559
  %561 = sext i32 %560 to i64
  %562 = mul nsw i64 %561, 96
  %563 = add i64 %562, ptrtoint (%sje_type* @sje to i64)
  %564 = inttoptr i64 %137 to i32*
  %565 = load i32, i32* %564
  %566 = sext i32 %565 to i64
  %567 = shl nsw i64 %566, 4
  %568 = add i64 %567, %563
  %569 = inttoptr i64 %568 to i32*
  %570 = load i32, i32* %569
  %571 = inttoptr i64 %983 to i32*
  store i32 %570, i32* %571
  %572 = inttoptr i64 %983 to i32*
  %573 = load i32, i32* %572
  %574 = sext i32 %573 to i64
  %575 = mul nsw i64 %574, 24
  %576 = add i64 %575, ptrtoint (%cbc_type* @cbc to i64)
  %577 = inttoptr i64 %977 to i32*
  %578 = load i32, i32* %577
  %579 = sext i32 %578 to i64
  %580 = shl nsw i64 %579, 2
  %581 = add i64 %580, %576
  %582 = inttoptr i64 %581 to i32*
  store i32 2, i32* %582
  %583 = inttoptr i64 %983 to i32*
  %584 = load i32, i32* %583
  %585 = sext i32 %584 to i64
  %586 = mul nsw i64 %585, 48
  %587 = add i64 %586, ptrtoint (%ijel_type* @ijel to i64)
  %588 = inttoptr i64 %977 to i32*
  %589 = load i32, i32* %588
  %590 = sext i32 %589 to i64
  %591 = shl nsw i64 %590, 3
  %592 = add i64 %591, %587
  %593 = inttoptr i64 %592 to i32*
  store i32 0, i32* %593
  %594 = inttoptr i64 %983 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  %597 = mul nsw i64 %596, 48
  %598 = inttoptr i64 %977 to i32*
  %599 = load i32, i32* %598
  %600 = sext i32 %599 to i64
  %601 = shl nsw i64 %600, 3
  %602 = add i64 %597, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %603 = add i64 %602, %601
  %604 = inttoptr i64 %603 to i32*
  store i32 0, i32* %604
  %605 = inttoptr i64 %141 to i32*
  %606 = load i32, i32* %605
  %607 = inttoptr i64 %983 to i32*
  %608 = load i32, i32* %607
  %609 = sext i32 %608 to i64
  %610 = mul nsw i64 %609, 96
  %611 = add i64 %610, ptrtoint (%sje_type* @sje to i64)
  %612 = inttoptr i64 %977 to i32*
  %613 = load i32, i32* %612
  %614 = sext i32 %613 to i64
  %615 = shl nsw i64 %614, 4
  %616 = add i64 %615, %611
  %617 = inttoptr i64 %616 to i32*
  store i32 %606, i32* %617
  %618 = inttoptr i64 %983 to i32*
  %619 = load i32, i32* %618
  %620 = sext i32 %619 to i64
  %621 = mul nsw i64 %620, 96
  %622 = add i64 %621, ptrtoint (%sje_type* @sje to i64)
  %623 = inttoptr i64 %977 to i32*
  %624 = load i32, i32* %623
  %625 = sext i32 %624 to i64
  %626 = shl nsw i64 %625, 4
  %627 = add i64 %626, %622
  %628 = or i64 %627, 8
  %629 = inttoptr i64 %628 to i32*
  store i32 -1, i32* %629
  %630 = inttoptr i64 %983 to i32*
  %631 = load i32, i32* %630
  %632 = sext i32 %631 to i64
  %633 = mul nsw i64 %632, 96
  %634 = add i64 %633, ptrtoint (%sje_type* @sje to i64)
  %635 = inttoptr i64 %977 to i32*
  %636 = load i32, i32* %635
  %637 = sext i32 %636 to i64
  %638 = shl nsw i64 %637, 4
  %639 = add i64 %638, %634
  %640 = or i64 %639, 4
  %641 = inttoptr i64 %640 to i32*
  store i32 -1, i32* %641
  %642 = inttoptr i64 %983 to i32*
  %643 = load i32, i32* %642
  %644 = sext i32 %643 to i64
  %645 = mul nsw i64 %644, 96
  %646 = load i64, i64* %4, align 8
  %647 = add i64 %645, %646
  %648 = inttoptr i64 %977 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  %651 = shl nsw i64 %650, 4
  %652 = add i64 %651, %647
  %653 = add i64 %652, 12
  %654 = inttoptr i64 %653 to i32*
  store i32 -1, i32* %654
  %655 = inttoptr i64 %141 to i32*
  %656 = load i32, i32* %655
  %657 = sext i32 %656 to i64
  %658 = mul nsw i64 %657, 24
  %659 = load i64, i64* %6, align 8
  %660 = add i64 %658, %659
  %661 = inttoptr i64 %137 to i32*
  %662 = load i32, i32* %661
  %663 = sext i32 %662 to i64
  %664 = shl nsw i64 %663, 2
  %665 = add i64 %664, %660
  %666 = inttoptr i64 %665 to i32*
  store i32 2, i32* %666
  %667 = inttoptr i64 %141 to i32*
  %668 = load i32, i32* %667
  %669 = sext i32 %668 to i64
  %670 = mul nsw i64 %669, 48
  %671 = load i64, i64* %5, align 8
  %672 = add i64 %670, %671
  %673 = inttoptr i64 %137 to i32*
  %674 = load i32, i32* %673
  %675 = sext i32 %674 to i64
  %676 = shl nsw i64 %675, 3
  %677 = add i64 %676, %672
  %678 = inttoptr i64 %677 to i32*
  store i32 0, i32* %678
  %679 = inttoptr i64 %141 to i32*
  %680 = load i32, i32* %679
  %681 = sext i32 %680 to i64
  %682 = mul nsw i64 %681, 48
  %683 = add i64 %682, %671
  %684 = inttoptr i64 %137 to i32*
  %685 = load i32, i32* %684
  %686 = sext i32 %685 to i64
  %687 = shl nsw i64 %686, 3
  %688 = add i64 %683, 4
  %689 = add i64 %688, %687
  %690 = inttoptr i64 %689 to i32*
  store i32 0, i32* %690
  %691 = inttoptr i64 %983 to i32*
  %692 = load i32, i32* %691
  %693 = zext i32 %692 to i64
  store i64 %693, i64* %11, align 8, !tbaa !1240
  %694 = inttoptr i64 %141 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  %697 = mul nsw i64 %696, 96
  %698 = add i64 %697, %646
  %699 = inttoptr i64 %137 to i32*
  %700 = load i32, i32* %699
  %701 = sext i32 %700 to i64
  %702 = shl nsw i64 %701, 4
  %703 = add i64 %702, %698
  %704 = add i64 %933, 365
  %705 = inttoptr i64 %703 to i32*
  store i32 %692, i32* %705
  br label %block_403c04

block_4035d3:                                     ; preds = %block_403577
  %706 = add i64 %156, 7
  %707 = inttoptr i64 %137 to i32*
  store i32 0, i32* %707
  %708 = add i64 %134, -48
  br label %block_4035da

block_4039ae:                                     ; preds = %block_40384d
  %709 = inttoptr i64 %141 to i32*
  %710 = load i32, i32* %709
  %711 = sext i32 %710 to i64
  %712 = mul nsw i64 %711, 24
  %713 = add i64 %712, ptrtoint (%cbc_type* @cbc to i64)
  %714 = inttoptr i64 %137 to i32*
  %715 = load i32, i32* %714
  %716 = sext i32 %715 to i64
  %717 = shl nsw i64 %716, 2
  %718 = add i64 %717, %713
  %719 = add i64 %332, 32
  %720 = inttoptr i64 %718 to i32*
  store i32 3, i32* %720
  br label %block_403c09

block_403626:                                     ; preds = %block_40361c
  %721 = inttoptr i64 %135 to double*
  %722 = load double, double* %721
  store double %722, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %723 = inttoptr i64 %141 to i32*
  %724 = load i32, i32* %723
  %725 = sext i32 %724 to i64
  %726 = shl nsw i64 %725, 6
  %727 = add i64 %726, ptrtoint (%zc_type* @zc to i64)
  %728 = sext i32 %835 to i64
  %729 = shl nsw i64 %728, 3
  %730 = add i64 %729, %727
  %731 = inttoptr i64 %730 to double*
  store double %722, double* %731
  %732 = inttoptr i64 %137 to i32*
  %733 = load i32, i32* %732
  %734 = add i32 %733, 1
  %735 = inttoptr i64 %137 to i32*
  store i32 %734, i32* %735
  %736 = add i64 %846, -10
  br label %block_40361c

block_4035da:                                     ; preds = %block_4035d3, %block_4035e4
  %737 = phi i64 [ %706, %block_4035d3 ], [ %241, %block_4035e4 ]
  %738 = phi %struct.Memory* [ %143, %block_4035d3 ], [ %738, %block_4035e4 ]
  %739 = inttoptr i64 %137 to i32*
  %740 = load i32, i32* %739
  %741 = add i32 %740, -4
  %742 = lshr i32 %741, 31
  %743 = trunc i32 %742 to i8
  %744 = lshr i32 %740, 31
  %745 = xor i32 %742, %744
  %746 = add nuw nsw i32 %745, %744
  %747 = icmp eq i32 %746, 2
  %748 = icmp ne i8 %743, 0
  %749 = xor i1 %748, %747
  %750 = select i1 %749, i64 10, i64 59
  %751 = add i64 %737, %750
  br i1 %749, label %block_4035e4, label %block_403615

block_40351e:                                     ; preds = %block_403514
  %752 = inttoptr i64 %954 to double*
  %753 = load double, double* %752
  %754 = inttoptr i64 %141 to i32*
  %755 = load i32, i32* %754
  %756 = sext i32 %755 to i64
  %757 = shl nsw i64 %756, 6
  %758 = add i64 %757, ptrtoint (%yc_type* @yc to i64)
  %759 = sext i32 %919 to i64
  %760 = shl nsw i64 %759, 3
  %761 = add i64 %760, %758
  %762 = inttoptr i64 %761 to double*
  store double %753, double* %762
  %763 = inttoptr i64 %954 to double*
  %764 = load double, double* %763
  store double %764, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %765 = inttoptr i64 %141 to i32*
  %766 = load i32, i32* %765
  %767 = sext i32 %766 to i64
  %768 = shl nsw i64 %767, 6
  %769 = add i64 %768, ptrtoint (%yc_type* @yc to i64)
  %770 = inttoptr i64 %137 to i32*
  %771 = load i32, i32* %770
  %772 = add i32 %771, 4
  %773 = sext i32 %772 to i64
  %774 = shl nsw i64 %773, 3
  %775 = add i64 %769, %774
  %776 = inttoptr i64 %775 to double*
  store double %764, double* %776
  %777 = inttoptr i64 %137 to i32*
  %778 = load i32, i32* %777
  %779 = add i32 %778, 1
  %780 = inttoptr i64 %137 to i32*
  store i32 %779, i32* %780
  %781 = add i64 %930, -10
  br label %block_403514

block_4034dc:                                     ; preds = %block_4034d2
  %782 = inttoptr i64 %335 to double*
  %783 = load double, double* %782
  store double %783, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %784 = inttoptr i64 %141 to i32*
  %785 = load i32, i32* %784
  %786 = sext i32 %785 to i64
  %787 = shl nsw i64 %786, 6
  %788 = add i64 %787, ptrtoint (%xc_type* @xc to i64)
  %789 = sext i32 %342 to i64
  %790 = shl nsw i64 %789, 3
  %791 = add i64 %790, %788
  %792 = inttoptr i64 %791 to double*
  store double %783, double* %792
  %793 = inttoptr i64 %137 to i32*
  %794 = load i32, i32* %793
  %795 = add i32 %794, 2
  %796 = inttoptr i64 %137 to i32*
  store i32 %795, i32* %796
  %797 = add i64 %353, -10
  br label %block_4034d2

block_40379d:                                     ; preds = %block_403751
  %798 = inttoptr i64 %981 to i32*
  %799 = load i32, i32* %798
  %800 = sext i32 %799 to i64
  %801 = mul nsw i64 %800, 96
  %802 = add i64 %801, ptrtoint (%sje_type* @sje to i64)
  %803 = add i64 %963, %802
  %804 = inttoptr i64 %803 to i32*
  %805 = load i32, i32* %804
  %806 = add i64 %900, 37
  %807 = inttoptr i64 %983 to i32*
  store i32 %805, i32* %807
  br label %block_4037c2

block_4036a9:                                     ; preds = %block_40369f
  %808 = inttoptr i64 %978 to i64*
  %809 = load i64, i64* %808
  %810 = inttoptr i64 %137 to i32*
  %811 = load i32, i32* %810
  %812 = sext i32 %811 to i64
  %813 = shl nsw i64 %812, 4
  %814 = add i64 %813, ptrtoint (%children_type* @children to i64)
  %815 = sext i32 %869 to i64
  %816 = shl nsw i64 %815, 2
  %817 = add i64 %816, %814
  %818 = inttoptr i64 %817 to i32*
  %819 = load i32, i32* %818
  %820 = sext i32 %819 to i64
  %821 = shl nsw i64 %820, 2
  %822 = add i64 %821, %809
  %823 = inttoptr i64 %822 to i32*
  %824 = load i32, i32* %823
  %825 = add i64 %981, %816
  %826 = inttoptr i64 %825 to i32*
  store i32 %824, i32* %826
  %827 = inttoptr i64 %980 to i32*
  %828 = load i32, i32* %827
  %829 = add i32 %828, 1
  %830 = inttoptr i64 %980 to i32*
  store i32 %829, i32* %830
  %831 = add i64 %879, -10
  br label %block_40369f

block_40361c:                                     ; preds = %block_403615, %block_403626
  %832 = phi i64 [ %896, %block_403615 ], [ %736, %block_403626 ]
  %833 = phi %struct.Memory* [ %738, %block_403615 ], [ %833, %block_403626 ]
  %834 = inttoptr i64 %137 to i32*
  %835 = load i32, i32* %834
  %836 = add i32 %835, -8
  %837 = lshr i32 %836, 31
  %838 = trunc i32 %837 to i8
  %839 = lshr i32 %835, 31
  %840 = xor i32 %837, %839
  %841 = add nuw nsw i32 %840, %839
  %842 = icmp eq i32 %841, 2
  %843 = icmp ne i8 %838, 0
  %844 = xor i1 %843, %842
  %845 = select i1 %844, i64 10, i64 59
  %846 = add i64 %832, %845
  br i1 %844, label %block_403626, label %block_403657

block_40375b:                                     ; preds = %block_403751, %block_40373d, %block_403747
  %847 = phi i64 [ %900, %block_403751 ], [ %558, %block_40373d ], [ %338, %block_403747 ]
  %848 = inttoptr i64 %981 to i32*
  %849 = load i32, i32* %848
  %850 = sext i32 %849 to i64
  %851 = mul nsw i64 %850, 96
  %852 = add i64 %851, ptrtoint (%sje_type* @sje to i64)
  %853 = add i64 %963, %852
  %854 = inttoptr i64 %853 to i32*
  %855 = load i32, i32* %854
  %856 = sext i32 %855 to i64
  %857 = mul nsw i64 %856, 96
  %858 = add i64 %857, ptrtoint (%sje_type* @sje to i64)
  %859 = add i64 %963, %858
  %860 = inttoptr i64 %859 to i32*
  %861 = load i32, i32* %860
  %862 = inttoptr i64 %983 to i32*
  store i32 %861, i32* %862
  %863 = add i64 %847, 103
  br label %block_4037c2

block_403846:                                     ; preds = %block_40370c
  %864 = add i64 %974, 7
  %865 = inttoptr i64 %980 to i32*
  store i32 0, i32* %865
  br label %block_40384d

block_40369f:                                     ; preds = %block_4036a9, %block_403668
  %866 = phi i64 [ %224, %block_403668 ], [ %831, %block_4036a9 ]
  %867 = phi %struct.Memory* [ %243, %block_403668 ], [ %867, %block_4036a9 ]
  %868 = inttoptr i64 %980 to i32*
  %869 = load i32, i32* %868
  %870 = add i32 %869, -4
  %871 = lshr i32 %870, 31
  %872 = lshr i32 %869, 31
  %873 = xor i32 %871, %872
  %874 = add nuw nsw i32 %873, %872
  %875 = icmp eq i32 %874, 2
  %876 = icmp ne i32 %871, 0
  %877 = xor i1 %876, %875
  %878 = select i1 %877, i64 10, i64 68
  %879 = add i64 %866, %878
  br i1 %877, label %block_4036a9, label %block_4036e3

block_40349a:                                     ; preds = %block_403490
  %880 = inttoptr i64 %140 to double*
  %881 = load double, double* %880
  store double %881, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %882 = inttoptr i64 %141 to i32*
  %883 = load i32, i32* %882
  %884 = sext i32 %883 to i64
  %885 = shl nsw i64 %884, 6
  %886 = add i64 %885, ptrtoint (%xc_type* @xc to i64)
  %887 = sext i32 %904 to i64
  %888 = shl nsw i64 %887, 3
  %889 = add i64 %888, %886
  %890 = inttoptr i64 %889 to double*
  store double %881, double* %890
  %891 = inttoptr i64 %137 to i32*
  %892 = load i32, i32* %891
  %893 = add i32 %892, 2
  %894 = inttoptr i64 %137 to i32*
  store i32 %893, i32* %894
  %895 = add i64 %915, -10
  br label %block_403490

block_403615:                                     ; preds = %block_4035da
  %896 = add i64 %751, 7
  %897 = inttoptr i64 %137 to i32*
  store i32 4, i32* %897
  br label %block_40361c

block_403751:                                     ; preds = %block_403747
  %898 = icmp ne i32 %961, 5
  %899 = select i1 %898, i64 76, i64 10
  %900 = add i64 %338, %899
  br i1 %898, label %block_40379d, label %block_40375b

block_403490:                                     ; preds = %block_40349a, %block_4033a0
  %901 = phi i64 [ %138, %block_4033a0 ], [ %895, %block_40349a ]
  %902 = phi %struct.Memory* [ %2, %block_4033a0 ], [ %902, %block_40349a ]
  %903 = inttoptr i64 %137 to i32*
  %904 = load i32, i32* %903
  %905 = add i32 %904, -7
  %906 = lshr i32 %905, 31
  %907 = trunc i32 %906 to i8
  %908 = lshr i32 %904, 31
  %909 = xor i32 %906, %908
  %910 = add nuw nsw i32 %909, %908
  %911 = icmp eq i32 %910, 2
  %912 = icmp ne i8 %907, 0
  %913 = xor i1 %912, %911
  %914 = select i1 %913, i64 10, i64 59
  %915 = add i64 %901, %914
  br i1 %913, label %block_40349a, label %block_4034cb

block_403514:                                     ; preds = %block_40350d, %block_40351e
  %916 = phi i64 [ %952, %block_40350d ], [ %781, %block_40351e ]
  %917 = phi %struct.Memory* [ %340, %block_40350d ], [ %917, %block_40351e ]
  %918 = inttoptr i64 %137 to i32*
  %919 = load i32, i32* %918
  %920 = add i32 %919, -2
  %921 = lshr i32 %920, 31
  %922 = trunc i32 %921 to i8
  %923 = lshr i32 %919, 31
  %924 = xor i32 %921, %923
  %925 = add nuw nsw i32 %924, %923
  %926 = icmp eq i32 %925, 2
  %927 = icmp ne i8 %922, 0
  %928 = xor i1 %927, %926
  %929 = select i1 %928, i64 10, i64 92
  %930 = add i64 %916, %929
  br i1 %928, label %block_40351e, label %block_403570

block_4039d3:                                     ; preds = %block_4036e3
  %931 = icmp ne i32 %948, 1
  %932 = select i1 %931, i64 380, i64 10
  %933 = add i64 %951, %932
  br i1 %931, label %block_403b4f, label %block_4039dd

block_4036e3:                                     ; preds = %block_40369f
  %934 = inttoptr i64 %979 to i32*
  %935 = load i32, i32* %934
  %936 = sext i32 %935 to i64
  %937 = mul nsw i64 %936, 24
  %938 = add i64 %937, ptrtoint (%cbc_type* @cbc to i64)
  %939 = inttoptr i64 %137 to i32*
  %940 = load i32, i32* %939
  %941 = sext i32 %940 to i64
  %942 = shl nsw i64 %941, 2
  %943 = add i64 %942, %938
  %944 = inttoptr i64 %943 to i32*
  %945 = load i32, i32* %944
  %946 = inttoptr i64 %982 to i32*
  store i32 %945, i32* %946
  %947 = inttoptr i64 %982 to i32*
  %948 = load i32, i32* %947
  %949 = icmp ne i32 %948, 2
  %950 = select i1 %949, i64 752, i64 41
  %951 = add i64 %879, %950
  br i1 %949, label %block_4039d3, label %block_40370c

block_40350d:                                     ; preds = %block_4034d2
  %952 = add i64 %353, 7
  %953 = inttoptr i64 %137 to i32*
  store i32 0, i32* %953
  %954 = add i64 %134, -32
  br label %block_403514

block_40370c:                                     ; preds = %block_4036e3
  %955 = inttoptr i64 %979 to i32*
  %956 = load i32, i32* %955
  %957 = sext i32 %956 to i64
  %958 = mul nsw i64 %957, 96
  %959 = add i64 %958, ptrtoint (%sje_type* @sje to i64)
  %960 = inttoptr i64 %137 to i32*
  %961 = load i32, i32* %960
  %962 = sext i32 %961 to i64
  %963 = shl nsw i64 %962, 4
  %964 = add i64 %963, %959
  %965 = inttoptr i64 %964 to i32*
  %966 = load i32, i32* %965
  %967 = sext i32 %966 to i64
  %968 = shl nsw i64 %967, 2
  %969 = add i64 %968, ptrtoint (%ifcoa_id_type* @ifcoa_id to i64)
  %970 = inttoptr i64 %969 to i32*
  %971 = load i32, i32* %970
  %972 = icmp eq i32 %971, 0
  %973 = select i1 %972, i64 314, i64 49
  %974 = add i64 %951, %973
  br i1 %972, label %block_403846, label %block_40373d

block_403657:                                     ; preds = %block_40361c
  %975 = add i64 %846, 7
  %976 = inttoptr i64 %137 to i32*
  store i32 0, i32* %976
  %977 = add i64 %134, -72
  %978 = add i64 %134, -8
  %979 = add i64 %134, -100
  %980 = add i64 %134, -76
  %981 = add i64 %134, -96
  %982 = add i64 %134, -80
  %983 = add i64 %134, -68
  %984 = add i64 %134, -128
  br label %block_40365e

block_403c09:                                     ; preds = %block_403c04, %block_4039ae, %block_4037c2
  %985 = phi i64 [ %997, %block_403c04 ], [ %719, %block_4039ae ], [ %402, %block_4037c2 ]
  %986 = phi i64 [ 5, %block_403c04 ], [ 571, %block_4039ae ], [ 571, %block_4037c2 ]
  %987 = phi %struct.Memory* [ %996, %block_403c04 ], [ %320, %block_4039ae ], [ %355, %block_4037c2 ]
  %988 = add i64 %985, %986
  %989 = inttoptr i64 %137 to i32*
  %990 = load i32, i32* %989
  %991 = add i32 %990, 1
  %992 = inttoptr i64 %137 to i32*
  store i32 %991, i32* %992
  %993 = add i64 %988, -1451
  br label %block_40365e

block_403c04:                                     ; preds = %block_4039dd, %block_403b4f, %block_403b59
  %994 = phi i64 [ %704, %block_4039dd ], [ %318, %block_403b4f ], [ %314, %block_403b59 ]
  %995 = phi i64 [ 186, %block_4039dd ], [ 5, %block_403b4f ], [ 5, %block_403b59 ]
  %996 = phi %struct.Memory* [ %867, %block_4039dd ], [ %867, %block_403b4f ], [ %867, %block_403b59 ]
  %997 = add i64 %994, %995
  br label %block_403c09

block_403581:                                     ; preds = %block_403577
  %998 = inttoptr i64 %202 to double*
  %999 = load double, double* %998
  %1000 = inttoptr i64 %141 to i32*
  %1001 = load i32, i32* %1000
  %1002 = sext i32 %1001 to i64
  %1003 = shl nsw i64 %1002, 6
  %1004 = add i64 %1003, ptrtoint (%yc_type* @yc to i64)
  %1005 = sext i32 %145 to i64
  %1006 = shl nsw i64 %1005, 3
  %1007 = add i64 %1006, %1004
  %1008 = inttoptr i64 %1007 to double*
  store double %999, double* %1008
  %1009 = inttoptr i64 %202 to double*
  %1010 = load double, double* %1009
  store double %1010, double* %64, align 1, !tbaa !1246
  store double 0.000000e+00, double* %66, align 1, !tbaa !1246
  %1011 = inttoptr i64 %141 to i32*
  %1012 = load i32, i32* %1011
  %1013 = sext i32 %1012 to i64
  %1014 = shl nsw i64 %1013, 6
  %1015 = add i64 %1014, ptrtoint (%yc_type* @yc to i64)
  %1016 = inttoptr i64 %137 to i32*
  %1017 = load i32, i32* %1016
  %1018 = add i32 %1017, 4
  %1019 = sext i32 %1018 to i64
  %1020 = shl nsw i64 %1019, 3
  %1021 = add i64 %1015, %1020
  %1022 = inttoptr i64 %1021 to double*
  store double %1010, double* %1022
  %1023 = inttoptr i64 %137 to i32*
  %1024 = load i32, i32* %1023
  %1025 = add i32 %1024, 1
  %1026 = inttoptr i64 %137 to i32*
  store i32 %1025, i32* %1026
  %1027 = add i64 %156, -10
  br label %block_403577
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_416a40_coef(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_416a40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 14
  %21 = load i64, i64* %8, align 8
  %22 = load i64, i64* %7, align 8, !tbaa !1240
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24
  store i64 %23, i64* %7, align 8, !tbaa !1240
  store i64 %23, i64* %8, align 8, !tbaa !1240
  %25 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1552) to double*)
  %26 = bitcast [32 x %union.VectorReg]* %9 to double*
  store double %25, double* %26, align 1, !tbaa !1246
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast i64* %27 to double*
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %29 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1560) to double*)
  %30 = bitcast %union.VectorReg* %10 to double*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %32 = bitcast i64* %31 to double*
  %33 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1568) to double*)
  %34 = bitcast %union.VectorReg* %11 to double*
  store double %33, double* %34, align 1, !tbaa !1246
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %36 = bitcast i64* %35 to double*
  store double 0.000000e+00, double* %36, align 1, !tbaa !1246
  %37 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %38 = bitcast %union.VectorReg* %12 to double*
  store double %37, double* %38, align 1, !tbaa !1246
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %40 = bitcast i64* %39 to double*
  store double 0.000000e+00, double* %40, align 1, !tbaa !1246
  %41 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1576) to double*)
  %42 = bitcast %union.VectorReg* %13 to double*
  store double %41, double* %42, align 1, !tbaa !1246
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %44 = bitcast i64* %43 to double*
  store double 0.000000e+00, double* %44, align 1, !tbaa !1246
  %45 = bitcast %union.VectorReg* %14 to i8*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %47 = bitcast %union.VectorReg* %14 to i32*
  store i32 0, i32* %47, align 1, !tbaa !1244
  %48 = getelementptr inbounds i8, i8* %45, i64 4
  %49 = bitcast i8* %48 to i32*
  store i32 0, i32* %49, align 1, !tbaa !1244
  %50 = bitcast i64* %46 to i32*
  store i32 0, i32* %50, align 1, !tbaa !1244
  %51 = getelementptr inbounds i8, i8* %45, i64 12
  %52 = bitcast i8* %51 to i32*
  store i32 0, i32* %52, align 1, !tbaa !1244
  %53 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1584) to double*)
  %54 = bitcast %union.VectorReg* %15 to double*
  store double %53, double* %54, align 1, !tbaa !1246
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 6, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast i64* %55 to double*
  store double 0.000000e+00, double* %56, align 1, !tbaa !1246
  %57 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 912) to double*)
  %58 = bitcast %union.VectorReg* %16 to double*
  store double %57, double* %58, align 1, !tbaa !1246
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 7, i32 0, i32 0, i32 0, i64 1
  %60 = bitcast i64* %59 to double*
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  store double %57, double* bitcast (%zgm1_type* @zgm1 to double*)
  store double %53, double* inttoptr (i64 add (i64 ptrtoint (%zgm1_type* @zgm1 to i64), i64 8) to double*)
  %61 = bitcast %union.VectorReg* %14 to double*
  %62 = load double, double* %61, align 1
  store double %62, double* inttoptr (i64 add (i64 ptrtoint (%zgm1_type* @zgm1 to i64), i64 16) to double*)
  store double %41, double* inttoptr (i64 add (i64 ptrtoint (%zgm1_type* @zgm1 to i64), i64 24) to double*)
  store double %37, double* inttoptr (i64 add (i64 ptrtoint (%zgm1_type* @zgm1 to i64), i64 32) to double*)
  store double %25, double* bitcast (%wxm1_type* @wxm1 to double*)
  store double %33, double* inttoptr (i64 add (i64 ptrtoint (%wxm1_type* @wxm1 to i64), i64 8) to double*)
  store double %29, double* inttoptr (i64 add (i64 ptrtoint (%wxm1_type* @wxm1 to i64), i64 16) to double*)
  %63 = load double, double* inttoptr (i64 add (i64 ptrtoint (%wxm1_type* @wxm1 to i64), i64 8) to double*)
  store double %63, double* %30, align 1, !tbaa !1246
  store double 0.000000e+00, double* %32, align 1, !tbaa !1246
  store double %63, double* inttoptr (i64 add (i64 ptrtoint (%wxm1_type* @wxm1 to i64), i64 24) to double*)
  %64 = load double, double* %26, align 1
  store double %64, double* inttoptr (i64 add (i64 ptrtoint (%wxm1_type* @wxm1 to i64), i64 32) to double*)
  %65 = load i64, i64* %8, align 8
  %66 = add i64 %65, -12
  %67 = add i64 %1, 169
  %68 = inttoptr i64 %66 to i32*
  store i32 0, i32* %68
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %72 = add i64 %65, -8
  %73 = add i64 %65, -4
  br label %block_416ae9

block_4171fb:                                     ; preds = %block_4171f1
  %74 = add i64 %424, 7
  %75 = inttoptr i64 %252 to i32*
  store i32 0, i32* %75
  br label %block_417202

block_416afa:                                     ; preds = %block_416af3, %block_416b76
  %76 = phi i64 [ %186, %block_416af3 ], [ %122, %block_416b76 ]
  %77 = phi %struct.Memory* [ %126, %block_416af3 ], [ %607, %block_416b76 ]
  %78 = inttoptr i64 %72 to i32*
  %79 = load i32, i32* %78
  %80 = add i32 %79, -5
  %81 = lshr i32 %80, 31
  %82 = lshr i32 %79, 31
  %83 = xor i32 %81, %82
  %84 = add nuw nsw i32 %83, %82
  %85 = icmp eq i32 %84, 2
  %86 = icmp ne i32 %81, 0
  %87 = xor i1 %86, %85
  %88 = select i1 %87, i64 10, i64 143
  %89 = add i64 %76, %88
  br i1 %87, label %block_416b04, label %block_416b89

block_4170f2:                                     ; preds = %block_4170e8
  %90 = add i64 %394, 7
  %91 = inttoptr i64 %252 to i32*
  store i32 0, i32* %91
  br label %block_4170f9

block_417171:                                     ; preds = %block_417167
  %92 = add i64 %202, 7
  %93 = inttoptr i64 %252 to i32*
  store i32 0, i32* %93
  br label %block_417178

block_416eec:                                     ; preds = %block_416ee2
  %94 = sub i32 4, %156
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %6, align 8, !tbaa !1240
  %96 = sext i32 %94 to i64
  %97 = mul nsw i64 %96, 24
  %98 = add i64 %97, ptrtoint (%qbnew_type* @qbnew to i64)
  %99 = sub i32 2, %144
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %470, align 8, !tbaa !1240
  %101 = sext i32 %99 to i64
  store i64 %101, i64* %471, align 8, !tbaa !1240
  %102 = shl nsw i64 %101, 3
  %103 = add i64 %98, %102
  %104 = inttoptr i64 %103 to double*
  %105 = load double, double* %104
  store double %105, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %106 = sext i32 %156 to i64
  %107 = mul nsw i64 %106, 24
  %108 = add i64 %107, add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 120)
  store i64 %108, i64* %5, align 8, !tbaa !1240
  %109 = sext i32 %144 to i64
  %110 = shl nsw i64 %109, 3
  %111 = add i64 %110, %108
  %112 = inttoptr i64 %111 to double*
  store double %105, double* %112
  %113 = inttoptr i64 %646 to i32*
  %114 = load i32, i32* %113
  %115 = add i32 %114, 1
  %116 = inttoptr i64 %646 to i32*
  store i32 %115, i32* %116
  %117 = add i64 %154, -10
  br label %block_416ee2

block_416b76:                                     ; preds = %block_416b0b
  %118 = inttoptr i64 %72 to i32*
  %119 = load i32, i32* %118
  %120 = add i32 %119, 1
  %121 = inttoptr i64 %72 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %619, -124
  br label %block_416afa

block_4171ea:                                     ; preds = %block_417167
  %123 = add i64 %202, 7
  %124 = inttoptr i64 %249 to i32*
  store i32 0, i32* %124
  br label %block_4171f1

block_416ae9:                                     ; preds = %block_416b89, %block_416a40
  %125 = phi i64 [ %67, %block_416a40 ], [ %624, %block_416b89 ]
  %126 = phi %struct.Memory* [ %2, %block_416a40 ], [ %77, %block_416b89 ]
  %127 = inttoptr i64 %66 to i32*
  %128 = load i32, i32* %127
  %129 = add i32 %128, -5
  %130 = lshr i32 %129, 31
  %131 = lshr i32 %128, 31
  %132 = xor i32 %130, %131
  %133 = add nuw nsw i32 %132, %131
  %134 = icmp eq i32 %133, 2
  %135 = icmp ne i32 %130, 0
  %136 = xor i1 %135, %134
  %137 = select i1 %136, i64 10, i64 179
  %138 = add i64 %125, %137
  br i1 %136, label %block_416af3, label %block_416b9c

block_416d68:                                     ; preds = %block_416d5e
  %139 = add i64 %409, 7
  %140 = inttoptr i64 %527 to i32*
  store i32 0, i32* %140
  br label %block_416d6f

block_416ee2:                                     ; preds = %block_416edb, %block_416eec
  %141 = phi i64 [ %433, %block_416edb ], [ %117, %block_416eec ]
  %142 = phi %struct.Memory* [ %309, %block_416edb ], [ %142, %block_416eec ]
  %143 = inttoptr i64 %646 to i32*
  %144 = load i32, i32* %143
  %145 = add i32 %144, -3
  %146 = lshr i32 %145, 31
  %147 = lshr i32 %144, 31
  %148 = xor i32 %146, %147
  %149 = add nuw nsw i32 %148, %147
  %150 = icmp eq i32 %149, 2
  %151 = icmp ne i32 %146, 0
  %152 = xor i1 %151, %150
  %153 = select i1 %152, i64 10, i64 95
  %154 = add i64 %141, %153
  %155 = inttoptr i64 %643 to i32*
  %156 = load i32, i32* %155
  br i1 %152, label %block_416eec, label %block_416f41

block_417160:                                     ; preds = %block_4170e8
  %157 = add i64 %394, 7
  %158 = inttoptr i64 %249 to i32*
  store i32 0, i32* %158
  br label %block_417167

block_416cde:                                     ; preds = %block_416cd4
  %159 = sub i32 4, %293
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %6, align 8, !tbaa !1240
  %161 = sext i32 %159 to i64
  %162 = mul nsw i64 %161, 40
  %163 = add i64 %162, ptrtoint (%dxm1_type* @dxm1 to i64)
  store i64 %163, i64* %472, align 8, !tbaa !1240
  %164 = sub i32 4, %281
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %470, align 8, !tbaa !1240
  %166 = sext i32 %164 to i64
  %167 = shl nsw i64 %166, 3
  %168 = add i64 %163, %167
  %169 = inttoptr i64 %168 to double*
  %170 = load double, double* %169
  %171 = bitcast double %170 to i64
  %172 = xor i64 %171, -9223372036854775808
  store i64 %172, i64* %471, align 8, !tbaa !1240
  store i64 %172, i64* %481, align 1, !tbaa !1240
  store i64 0, i64* %27, align 1, !tbaa !1240
  %173 = sext i32 %293 to i64
  %174 = mul nsw i64 %173, 40
  %175 = add i64 %174, ptrtoint (%dxm1_type* @dxm1 to i64)
  %176 = sext i32 %281 to i64
  store i64 %176, i64* %5, align 8, !tbaa !1240
  %177 = shl nsw i64 %176, 3
  %178 = add i64 %177, %175
  %179 = bitcast i64 %172 to double
  %180 = inttoptr i64 %178 to double*
  store double %179, double* %180
  %181 = inttoptr i64 %527 to i32*
  %182 = load i32, i32* %181
  %183 = add i32 %182, 1
  %184 = inttoptr i64 %527 to i32*
  store i32 %183, i32* %184
  %185 = add i64 %291, -10
  br label %block_416cd4

block_416af3:                                     ; preds = %block_416ae9
  %186 = add i64 %138, 7
  %187 = inttoptr i64 %72 to i32*
  store i32 0, i32* %187
  br label %block_416afa

block_417167:                                     ; preds = %block_4171d7, %block_417160
  %188 = phi i64 [ %157, %block_417160 ], [ %277, %block_4171d7 ]
  %189 = phi %struct.Memory* [ %381, %block_417160 ], [ %648, %block_4171d7 ]
  %190 = inttoptr i64 %249 to i32*
  %191 = load i32, i32* %190
  %192 = add i32 %191, -5
  %193 = lshr i32 %192, 31
  %194 = trunc i32 %193 to i8
  %195 = lshr i32 %191, 31
  %196 = xor i32 %193, %195
  %197 = add nuw nsw i32 %196, %195
  %198 = icmp eq i32 %197, 2
  %199 = icmp ne i8 %194, 0
  %200 = xor i1 %199, %198
  %201 = select i1 %200, i64 10, i64 131
  %202 = add i64 %188, %201
  br i1 %200, label %block_417171, label %block_4171ea

block_416f54:                                     ; preds = %block_416ed1
  store i32 0, i32* %482, align 1, !tbaa !1244
  store i32 0, i32* %484, align 1, !tbaa !1244
  %203 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %203, double* %30, align 1, !tbaa !1246
  store double 0.000000e+00, double* %32, align 1, !tbaa !1246
  %204 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1776) to double*)
  store double %204, double* %34, align 1, !tbaa !1246
  %205 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1784) to double*)
  store double %205, double* %38, align 1, !tbaa !1246
  store double 0.000000e+00, double* %40, align 1, !tbaa !1246
  %206 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1792) to double*)
  store double %206, double* %42, align 1, !tbaa !1246
  store double 0.000000e+00, double* %44, align 1, !tbaa !1246
  %207 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1800) to double*)
  store double %207, double* %61, align 1, !tbaa !1246
  store double 0.000000e+00, double* %493, align 1, !tbaa !1246
  %208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1808) to double*)
  store double %208, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %56, align 1, !tbaa !1246
  %209 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1816) to double*)
  store double %209, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %210 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1824) to double*)
  store double %210, double* %497, align 1, !tbaa !1246
  store double 0.000000e+00, double* %499, align 1, !tbaa !1246
  %211 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1832) to double*)
  store double %211, double* %501, align 1, !tbaa !1246
  store double 0.000000e+00, double* %503, align 1, !tbaa !1246
  %212 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1840) to double*)
  store double %212, double* %505, align 1, !tbaa !1246
  store double 0.000000e+00, double* %507, align 1, !tbaa !1246
  %213 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1848) to double*)
  store double %213, double* %509, align 1, !tbaa !1246
  store double 0.000000e+00, double* %511, align 1, !tbaa !1246
  %214 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1856) to double*)
  store double %214, double* %637, align 1, !tbaa !1246
  store double 0.000000e+00, double* %639, align 1, !tbaa !1246
  %215 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1864) to double*)
  %216 = bitcast %union.VectorReg* %475 to double*
  store double %215, double* %216, align 1, !tbaa !1246
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 13, i32 0, i32 0, i32 0, i64 1
  %218 = bitcast i64* %217 to double*
  store double 0.000000e+00, double* %218, align 1, !tbaa !1246
  %219 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1872) to double*)
  %220 = bitcast %union.VectorReg* %20 to double*
  store double %219, double* %220, align 1, !tbaa !1246
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 14, i32 0, i32 0, i32 0, i64 1
  %222 = bitcast i64* %221 to double*
  store double 0.000000e+00, double* %222, align 1, !tbaa !1246
  %223 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1880) to double*)
  %224 = bitcast %union.VectorReg* %476 to double*
  store double %223, double* %224, align 1, !tbaa !1246
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 15, i32 0, i32 0, i32 0, i64 1
  %226 = bitcast i64* %225 to double*
  store double 0.000000e+00, double* %226, align 1, !tbaa !1246
  %227 = load i64, i64* %8, align 8
  %228 = add i64 %227, -24
  %229 = load double, double* %26, align 1
  %230 = inttoptr i64 %228 to double*
  store double %229, double* %230
  %231 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1888) to double*)
  store double %203, double* bitcast (%ixtmc1_type* @ixtmc1 to double*)
  %232 = add i64 %227, -32
  %233 = inttoptr i64 %232 to double*
  store double %231, double* %233
  %234 = inttoptr i64 %228 to double*
  %235 = load double, double* %234
  store double %235, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 8) to double*)
  store double %235, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 16) to double*)
  store double %235, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 24) to double*)
  store double %235, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 32) to double*)
  %236 = inttoptr i64 %232 to double*
  %237 = load double, double* %236
  store double %237, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  store double %237, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 40) to double*)
  store double %223, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 48) to double*)
  store double %219, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 56) to double*)
  store double %215, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 64) to double*)
  store double %214, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 72) to double*)
  store double %213, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 80) to double*)
  store double %212, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 88) to double*)
  store double %211, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 96) to double*)
  %238 = load double, double* %497, align 1
  store double %238, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 104) to double*)
  %239 = load double, double* %58, align 1
  store double %239, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 112) to double*)
  %240 = load double, double* %54, align 1
  store double %240, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 120) to double*)
  %241 = load double, double* %61, align 1
  store double %241, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 128) to double*)
  %242 = load double, double* %42, align 1
  store double %242, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 136) to double*)
  %243 = load double, double* %38, align 1
  store double %243, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 144) to double*)
  %244 = load double, double* %34, align 1
  store double %244, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 152) to double*)
  %245 = inttoptr i64 %228 to double*
  %246 = load double, double* %245
  store double %246, double* %34, align 1, !tbaa !1246
  store double 0.000000e+00, double* %36, align 1, !tbaa !1246
  store double %246, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 160) to double*)
  store double %246, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 168) to double*)
  %247 = load double, double* %30, align 1
  store double %247, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 176) to double*)
  store double %246, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 184) to double*)
  store double %246, double* inttoptr (i64 add (i64 ptrtoint (%ixtmc1_type* @ixtmc1 to i64), i64 192) to double*)
  %248 = load i64, i64* %8, align 8
  %249 = add i64 %248, -8
  %250 = add i64 %322, 404
  %251 = inttoptr i64 %249 to i32*
  store i32 0, i32* %251
  %252 = add i64 %248, -4
  br label %block_4170e8

block_4172fe:                                     ; preds = %block_4172c5
  %253 = icmp ult i32 %356, 5
  %254 = zext i1 %253 to i8
  %255 = and i32 %357, 255
  %256 = tail call i32 @llvm.ctpop.i32(i32 %255) #11
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = xor i8 %258, 1
  %260 = xor i32 %357, %356
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = icmp eq i32 %357, 0
  %265 = zext i1 %264 to i8
  %266 = zext i1 %363 to i8
  store i8 %254, i8* %69, align 1, !tbaa !1248
  store i8 %259, i8* %478, align 1, !tbaa !1261
  store i8 %263, i8* %70, align 1, !tbaa !1262
  store i8 %265, i8* %479, align 1, !tbaa !1263
  store i8 %359, i8* %71, align 1, !tbaa !1264
  store i8 %266, i8* %480, align 1, !tbaa !1265
  %267 = load i64, i64* %7, align 8, !tbaa !1240
  %268 = add i64 %267, 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269
  store i64 %270, i64* %8, align 8, !tbaa !1240
  %271 = inttoptr i64 %268 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %3, align 8, !tbaa !1240
  %273 = add i64 %267, 16
  store i64 %273, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %354

block_4171d7:                                     ; preds = %block_417178
  %274 = add i32 %662, 1
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %4, align 8, !tbaa !1240
  %276 = inttoptr i64 %249 to i32*
  store i32 %274, i32* %276
  %277 = add i64 %660, -112
  br label %block_417167

block_416cd4:                                     ; preds = %block_416ccd, %block_416cde
  %278 = phi i64 [ %338, %block_416ccd ], [ %185, %block_416cde ]
  %279 = phi %struct.Memory* [ %456, %block_416ccd ], [ %279, %block_416cde ]
  %280 = inttoptr i64 %527 to i32*
  %281 = load i32, i32* %280
  %282 = add i32 %281, -5
  %283 = lshr i32 %282, 31
  %284 = lshr i32 %281, 31
  %285 = xor i32 %283, %284
  %286 = add nuw nsw i32 %285, %284
  %287 = icmp eq i32 %286, 2
  %288 = icmp ne i32 %283, 0
  %289 = xor i1 %288, %287
  %290 = select i1 %289, i64 10, i64 112
  %291 = add i64 %278, %290
  %292 = inttoptr i64 %524 to i32*
  %293 = load i32, i32* %292
  br i1 %289, label %block_416cde, label %block_416d44

block_416d6f:                                     ; preds = %block_416d79, %block_416d68
  %294 = phi i64 [ %139, %block_416d68 ], [ %454, %block_416d79 ]
  %295 = phi %struct.Memory* [ %396, %block_416d68 ], [ %295, %block_416d79 ]
  %296 = inttoptr i64 %527 to i32*
  %297 = load i32, i32* %296
  %298 = add i32 %297, -5
  %299 = lshr i32 %298, 31
  %300 = lshr i32 %297, 31
  %301 = xor i32 %299, %300
  %302 = add nuw nsw i32 %301, %300
  %303 = icmp eq i32 %302, 2
  %304 = icmp ne i32 %299, 0
  %305 = xor i1 %304, %303
  %306 = select i1 %305, i64 10, i64 84
  %307 = add i64 %294, %306
  br i1 %305, label %block_416d79, label %block_416dc3

block_416ed1:                                     ; preds = %block_416dd6, %block_416f41
  %308 = phi i64 [ %644, %block_416dd6 ], [ %379, %block_416f41 ]
  %309 = phi %struct.Memory* [ %396, %block_416dd6 ], [ %142, %block_416f41 ]
  %310 = inttoptr i64 %643 to i32*
  %311 = load i32, i32* %310
  %312 = add i32 %311, -5
  %313 = lshr i32 %312, 31
  %314 = trunc i32 %313 to i8
  %315 = lshr i32 %311, 31
  %316 = xor i32 %313, %315
  %317 = add nuw nsw i32 %316, %315
  %318 = icmp eq i32 %317, 2
  %319 = icmp ne i8 %314, 0
  %320 = xor i1 %319, %318
  %321 = select i1 %320, i64 10, i64 131
  %322 = add i64 %308, %321
  br i1 %320, label %block_416edb, label %block_416f54

block_4172cf:                                     ; preds = %block_4172c5
  %323 = sub i32 4, %356
  %324 = sext i32 %323 to i64
  %325 = shl nsw i64 %324, 3
  %326 = add i64 %325, ptrtoint (%map2_type* @map2 to i64)
  %327 = inttoptr i64 %326 to double*
  %328 = load double, double* %327
  store double %328, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %329 = sext i32 %356 to i64
  store i64 %329, i64* %5, align 8, !tbaa !1240
  %330 = shl nsw i64 %329, 3
  %331 = add i64 %330, ptrtoint (%map4_type* @map4 to i64)
  %332 = inttoptr i64 %331 to double*
  store double %328, double* %332
  %333 = inttoptr i64 %252 to i32*
  %334 = load i32, i32* %333
  %335 = add i32 %334, 1
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %4, align 8, !tbaa !1240
  %337 = inttoptr i64 %252 to i32*
  store i32 %335, i32* %337
  br label %block_4172c5

block_416ccd:                                     ; preds = %block_416cc3
  %338 = add i64 %469, 7
  %339 = inttoptr i64 %527 to i32*
  store i32 0, i32* %339
  br label %block_416cd4

block_4170f9:                                     ; preds = %block_417103, %block_4170f2
  %340 = phi i64 [ %90, %block_4170f2 ], [ %684, %block_417103 ]
  %341 = phi %struct.Memory* [ %381, %block_4170f2 ], [ %341, %block_417103 ]
  %342 = inttoptr i64 %252 to i32*
  %343 = load i32, i32* %342
  %344 = add i32 %343, -5
  %345 = lshr i32 %344, 31
  %346 = lshr i32 %343, 31
  %347 = xor i32 %345, %346
  %348 = add nuw nsw i32 %347, %346
  %349 = icmp eq i32 %348, 2
  %350 = icmp ne i32 %345, 0
  %351 = xor i1 %350, %349
  %352 = select i1 %351, i64 10, i64 84
  %353 = add i64 %340, %352
  br i1 %351, label %block_417103, label %block_41714d

block_4172c5:                                     ; preds = %block_417269, %block_4172cf
  %354 = phi %struct.Memory* [ %411, %block_417269 ], [ %354, %block_4172cf ]
  %355 = inttoptr i64 %252 to i32*
  %356 = load i32, i32* %355
  %357 = add i32 %356, -5
  %358 = lshr i32 %357, 31
  %359 = trunc i32 %358 to i8
  %360 = lshr i32 %356, 31
  %361 = xor i32 %358, %360
  %362 = add nuw nsw i32 %361, %360
  %363 = icmp eq i32 %362, 2
  %364 = icmp ne i8 %359, 0
  %365 = xor i1 %364, %363
  br i1 %365, label %block_4172cf, label %block_4172fe

block_417256:                                     ; preds = %block_417202
  %366 = inttoptr i64 %249 to i32*
  %367 = load i32, i32* %366
  %368 = add i32 %367, 1
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %4, align 8, !tbaa !1240
  %370 = inttoptr i64 %249 to i32*
  store i32 %368, i32* %370
  %371 = add i64 %585, -101
  br label %block_4171f1

block_416d44:                                     ; preds = %block_416cd4
  %372 = add i32 %293, 1
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %4, align 8, !tbaa !1240
  %374 = inttoptr i64 %524 to i32*
  store i32 %372, i32* %374
  %375 = add i64 %291, -129
  br label %block_416cc3

block_416f41:                                     ; preds = %block_416ee2
  %376 = add i32 %156, 1
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %4, align 8, !tbaa !1240
  %378 = inttoptr i64 %643 to i32*
  store i32 %376, i32* %378
  %379 = add i64 %154, -112
  br label %block_416ed1

block_4170e8:                                     ; preds = %block_41714d, %block_416f54
  %380 = phi i64 [ %250, %block_416f54 ], [ %533, %block_41714d ]
  %381 = phi %struct.Memory* [ %309, %block_416f54 ], [ %341, %block_41714d ]
  %382 = inttoptr i64 %249 to i32*
  %383 = load i32, i32* %382
  %384 = add i32 %383, -5
  %385 = lshr i32 %384, 31
  %386 = trunc i32 %385 to i8
  %387 = lshr i32 %383, 31
  %388 = xor i32 %385, %387
  %389 = add nuw nsw i32 %388, %387
  %390 = icmp eq i32 %389, 2
  %391 = icmp ne i8 %386, 0
  %392 = xor i1 %391, %390
  %393 = select i1 %392, i64 10, i64 120
  %394 = add i64 %380, %393
  br i1 %392, label %block_4170f2, label %block_417160

block_416d5e:                                     ; preds = %block_416dc3, %block_416d57
  %395 = phi i64 [ %431, %block_416d57 ], [ %571, %block_416dc3 ]
  %396 = phi %struct.Memory* [ %456, %block_416d57 ], [ %295, %block_416dc3 ]
  %397 = inttoptr i64 %524 to i32*
  %398 = load i32, i32* %397
  %399 = add i32 %398, -5
  %400 = lshr i32 %399, 31
  %401 = trunc i32 %400 to i8
  %402 = lshr i32 %398, 31
  %403 = xor i32 %400, %402
  %404 = add nuw nsw i32 %403, %402
  %405 = icmp eq i32 %404, 2
  %406 = icmp ne i8 %401, 0
  %407 = xor i1 %406, %405
  %408 = select i1 %407, i64 10, i64 120
  %409 = add i64 %395, %408
  br i1 %407, label %block_416d68, label %block_416dd6

block_4171f1:                                     ; preds = %block_417256, %block_4171ea
  %410 = phi i64 [ %123, %block_4171ea ], [ %371, %block_417256 ]
  %411 = phi %struct.Memory* [ %189, %block_4171ea ], [ %573, %block_417256 ]
  %412 = inttoptr i64 %249 to i32*
  %413 = load i32, i32* %412
  %414 = add i32 %413, -5
  %415 = lshr i32 %414, 31
  %416 = trunc i32 %415 to i8
  %417 = lshr i32 %413, 31
  %418 = xor i32 %415, %417
  %419 = add nuw nsw i32 %418, %417
  %420 = icmp eq i32 %419, 2
  %421 = icmp ne i8 %416, 0
  %422 = xor i1 %421, %420
  %423 = select i1 %422, i64 10, i64 120
  %424 = add i64 %410, %423
  br i1 %422, label %block_4171fb, label %block_417269

block_417269:                                     ; preds = %block_4171f1
  %425 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1896) to double*)
  store double %425, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %426 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1904) to double*)
  store double %426, double* %30, align 1, !tbaa !1246
  store double 0.000000e+00, double* %32, align 1, !tbaa !1246
  %427 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1912) to double*)
  store double %427, double* %34, align 1, !tbaa !1246
  store double 0.000000e+00, double* %36, align 1, !tbaa !1246
  %428 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1920) to double*)
  store double %428, double* %38, align 1, !tbaa !1246
  store double 0.000000e+00, double* %40, align 1, !tbaa !1246
  %429 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1928) to double*)
  store double %429, double* %42, align 1, !tbaa !1246
  store double 0.000000e+00, double* %44, align 1, !tbaa !1246
  store double %429, double* bitcast (%map2_type* @map2 to double*)
  store double %428, double* inttoptr (i64 add (i64 ptrtoint (%map2_type* @map2 to i64), i64 8) to double*)
  store double %427, double* inttoptr (i64 add (i64 ptrtoint (%map2_type* @map2 to i64), i64 16) to double*)
  store double %426, double* inttoptr (i64 add (i64 ptrtoint (%map2_type* @map2 to i64), i64 24) to double*)
  store double %425, double* inttoptr (i64 add (i64 ptrtoint (%map2_type* @map2 to i64), i64 32) to double*)
  %430 = inttoptr i64 %252 to i32*
  store i32 0, i32* %430
  br label %block_4172c5

block_416d57:                                     ; preds = %block_416cc3
  %431 = add i64 %469, 7
  %432 = inttoptr i64 %524 to i32*
  store i32 0, i32* %432
  br label %block_416d5e

block_416edb:                                     ; preds = %block_416ed1
  %433 = add i64 %322, 7
  %434 = inttoptr i64 %646 to i32*
  store i32 0, i32* %434
  br label %block_416ee2

block_416d79:                                     ; preds = %block_416d6f
  %435 = sext i32 %297 to i64
  %436 = mul nsw i64 %435, 40
  %437 = add i64 %436, ptrtoint (%dxm1_type* @dxm1 to i64)
  %438 = inttoptr i64 %524 to i32*
  %439 = load i32, i32* %438
  %440 = sext i32 %439 to i64
  store i64 %440, i64* %470, align 8, !tbaa !1240
  %441 = shl nsw i64 %440, 3
  %442 = add i64 %441, %437
  %443 = inttoptr i64 %442 to double*
  %444 = load double, double* %443
  store double %444, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %445 = mul nsw i64 %440, 40
  %446 = add i64 %445, ptrtoint (%dxtm1_type* @dxtm1 to i64)
  store i64 %435, i64* %5, align 8, !tbaa !1240
  %447 = shl nsw i64 %435, 3
  %448 = add i64 %447, %446
  %449 = inttoptr i64 %448 to double*
  store double %444, double* %449
  %450 = inttoptr i64 %527 to i32*
  %451 = load i32, i32* %450
  %452 = add i32 %451, 1
  %453 = inttoptr i64 %527 to i32*
  store i32 %452, i32* %453
  %454 = add i64 %307, -10
  br label %block_416d6f

block_416cc3:                                     ; preds = %block_416b9c, %block_416d44
  %455 = phi i64 [ %525, %block_416b9c ], [ %375, %block_416d44 ]
  %456 = phi %struct.Memory* [ %126, %block_416b9c ], [ %279, %block_416d44 ]
  %457 = inttoptr i64 %524 to i32*
  %458 = load i32, i32* %457
  %459 = add i32 %458, -5
  %460 = lshr i32 %459, 31
  %461 = trunc i32 %460 to i8
  %462 = lshr i32 %458, 31
  %463 = xor i32 %460, %462
  %464 = add nuw nsw i32 %463, %462
  %465 = icmp eq i32 %464, 2
  %466 = icmp ne i8 %461, 0
  %467 = xor i1 %466, %465
  %468 = select i1 %467, i64 10, i64 148
  %469 = add i64 %455, %468
  br i1 %467, label %block_416ccd, label %block_416d57

block_416b9c:                                     ; preds = %block_416ae9
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 13
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 15
  %477 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 -9223372036854775808, i64* %4, align 8, !tbaa !1240
  %481 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %482 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 0, i32* %482, align 1, !tbaa !1244
  %483 = getelementptr inbounds i8, i8* %477, i64 4
  %484 = bitcast i8* %483 to i32*
  store i32 0, i32* %484, align 1, !tbaa !1244
  %485 = bitcast i64* %27 to i32*
  %486 = getelementptr inbounds i8, i8* %477, i64 12
  %487 = bitcast i8* %486 to i32*
  %488 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1592) to double*)
  store double %488, double* %30, align 1, !tbaa !1246
  store double 0.000000e+00, double* %32, align 1, !tbaa !1246
  %489 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1600) to double*)
  store double %489, double* %34, align 1, !tbaa !1246
  store double 0.000000e+00, double* %36, align 1, !tbaa !1246
  %490 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1608) to double*)
  store double %490, double* %38, align 1, !tbaa !1246
  store double 0.000000e+00, double* %40, align 1, !tbaa !1246
  %491 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1616) to double*)
  store double %491, double* %42, align 1, !tbaa !1246
  store double 0.000000e+00, double* %44, align 1, !tbaa !1246
  %492 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1624) to double*)
  store double %492, double* %61, align 1, !tbaa !1246
  %493 = bitcast i64* %46 to double*
  store double 0.000000e+00, double* %493, align 1, !tbaa !1246
  %494 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1632) to double*)
  store double %494, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %56, align 1, !tbaa !1246
  %495 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %495, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %496 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1648) to double*)
  %497 = bitcast %union.VectorReg* %17 to double*
  store double %496, double* %497, align 1, !tbaa !1246
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 8, i32 0, i32 0, i32 0, i64 1
  %499 = bitcast i64* %498 to double*
  store double 0.000000e+00, double* %499, align 1, !tbaa !1246
  %500 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1656) to double*)
  %501 = bitcast %union.VectorReg* %473 to double*
  store double %500, double* %501, align 1, !tbaa !1246
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 9, i32 0, i32 0, i32 0, i64 1
  %503 = bitcast i64* %502 to double*
  store double 0.000000e+00, double* %503, align 1, !tbaa !1246
  %504 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1664) to double*)
  %505 = bitcast %union.VectorReg* %18 to double*
  store double %504, double* %505, align 1, !tbaa !1246
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 10, i32 0, i32 0, i32 0, i64 1
  %507 = bitcast i64* %506 to double*
  store double 0.000000e+00, double* %507, align 1, !tbaa !1246
  %508 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1672) to double*)
  %509 = bitcast %union.VectorReg* %474 to double*
  store double %508, double* %509, align 1, !tbaa !1246
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 11, i32 0, i32 0, i32 0, i64 1
  %511 = bitcast i64* %510 to double*
  store double 0.000000e+00, double* %511, align 1, !tbaa !1246
  store double %508, double* bitcast (%dxm1_type* @dxm1 to double*)
  store double %504, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 8) to double*)
  store double %500, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 16) to double*)
  store double %496, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 24) to double*)
  store double %495, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 32) to double*)
  store double %494, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 40) to double*)
  %512 = load double, double* %26, align 1
  store double %512, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 48) to double*)
  store double %492, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 56) to double*)
  store double %491, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 64) to double*)
  store double %490, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 72) to double*)
  store double %489, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 80) to double*)
  %513 = load double, double* %30, align 1
  store double %513, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 88) to double*)
  store double %512, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 96) to double*)
  %514 = load double, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 88) to double*)
  %515 = bitcast double %514 to i64
  %516 = load i64, i64* %4, align 8
  %517 = xor i64 %516, %515
  %518 = bitcast i64 %517 to double
  store double %518, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 104) to double*)
  %519 = load double, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 80) to double*)
  %520 = bitcast double %519 to i64
  %521 = xor i64 %516, %520
  store i64 %521, i64* %5, align 8, !tbaa !1240
  store i64 %521, i64* %481, align 1, !tbaa !1240
  store i64 0, i64* %27, align 1, !tbaa !1240
  %522 = bitcast i64 %521 to double
  store double %522, double* inttoptr (i64 add (i64 ptrtoint (%dxm1_type* @dxm1 to i64), i64 112) to double*)
  %523 = load i64, i64* %8, align 8
  %524 = add i64 %523, -8
  %525 = add i64 %138, 295
  %526 = inttoptr i64 %524 to i32*
  store i32 3, i32* %526
  %527 = add i64 %523, -4
  br label %block_416cc3

block_41714d:                                     ; preds = %block_4170f9
  %528 = inttoptr i64 %249 to i32*
  %529 = load i32, i32* %528
  %530 = add i32 %529, 1
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %4, align 8, !tbaa !1240
  %532 = inttoptr i64 %249 to i32*
  store i32 %530, i32* %532
  %533 = add i64 %353, -101
  br label %block_4170e8

block_416b15:                                     ; preds = %block_416b0b
  %534 = sext i32 %609 to i64
  %535 = shl nsw i64 %534, 3
  %536 = add i64 %535, ptrtoint (%wxm1_type* @wxm1 to i64)
  %537 = inttoptr i64 %536 to double*
  %538 = load double, double* %537
  %539 = inttoptr i64 %72 to i32*
  %540 = load i32, i32* %539
  %541 = sext i32 %540 to i64
  %542 = shl nsw i64 %541, 3
  %543 = add i64 %542, ptrtoint (%wxm1_type* @wxm1 to i64)
  %544 = inttoptr i64 %543 to double*
  %545 = load double, double* %544
  %546 = fmul double %538, %545
  %547 = inttoptr i64 %66 to i32*
  %548 = load i32, i32* %547
  %549 = sext i32 %548 to i64
  %550 = shl nsw i64 %549, 3
  %551 = add i64 %550, ptrtoint (%wxm1_type* @wxm1 to i64)
  %552 = inttoptr i64 %551 to double*
  %553 = load double, double* %552
  %554 = fmul double %546, %553
  store double %554, double* %26, align 1, !tbaa !1246
  store i64 0, i64* %27, align 1, !tbaa !1246
  %555 = mul nsw i64 %549, 200
  %556 = add i64 %555, ptrtoint (%w3m1_type* @w3m1 to i64)
  %557 = mul nsw i64 %541, 40
  %558 = add i64 %557, %556
  %559 = add i64 %535, %558
  %560 = inttoptr i64 %559 to double*
  store double %554, double* %560
  %561 = inttoptr i64 %73 to i32*
  %562 = load i32, i32* %561
  %563 = add i32 %562, 1
  %564 = inttoptr i64 %73 to i32*
  store i32 %563, i32* %564
  %565 = add i64 %619, -10
  br label %block_416b0b

block_416dc3:                                     ; preds = %block_416d6f
  %566 = inttoptr i64 %524 to i32*
  %567 = load i32, i32* %566
  %568 = add i32 %567, 1
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %4, align 8, !tbaa !1240
  %570 = inttoptr i64 %524 to i32*
  store i32 %568, i32* %570
  %571 = add i64 %307, -101
  br label %block_416d5e

block_417202:                                     ; preds = %block_41720c, %block_4171fb
  %572 = phi i64 [ %74, %block_4171fb ], [ %605, %block_41720c ]
  %573 = phi %struct.Memory* [ %411, %block_4171fb ], [ %573, %block_41720c ]
  %574 = inttoptr i64 %252 to i32*
  %575 = load i32, i32* %574
  %576 = add i32 %575, -5
  %577 = lshr i32 %576, 31
  %578 = lshr i32 %575, 31
  %579 = xor i32 %577, %578
  %580 = add nuw nsw i32 %579, %578
  %581 = icmp eq i32 %580, 2
  %582 = icmp ne i32 %577, 0
  %583 = xor i1 %582, %581
  %584 = select i1 %583, i64 10, i64 84
  %585 = add i64 %572, %584
  br i1 %583, label %block_41720c, label %block_417256

block_41720c:                                     ; preds = %block_417202
  %586 = sext i32 %575 to i64
  %587 = mul nsw i64 %586, 40
  %588 = add i64 %587, ptrtoint (%ixtmc2_type* @ixtmc2 to i64)
  %589 = inttoptr i64 %249 to i32*
  %590 = load i32, i32* %589
  %591 = sext i32 %590 to i64
  store i64 %591, i64* %470, align 8, !tbaa !1240
  %592 = shl nsw i64 %591, 3
  %593 = add i64 %592, %588
  %594 = inttoptr i64 %593 to double*
  %595 = load double, double* %594
  store double %595, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %596 = mul nsw i64 %591, 40
  %597 = add i64 %596, ptrtoint (%ixmc2_type* @ixmc2 to i64)
  store i64 %586, i64* %5, align 8, !tbaa !1240
  %598 = shl nsw i64 %586, 3
  %599 = add i64 %598, %597
  %600 = inttoptr i64 %599 to double*
  store double %595, double* %600
  %601 = inttoptr i64 %252 to i32*
  %602 = load i32, i32* %601
  %603 = add i32 %602, 1
  %604 = inttoptr i64 %252 to i32*
  store i32 %603, i32* %604
  %605 = add i64 %585, -10
  br label %block_417202

block_416b0b:                                     ; preds = %block_416b04, %block_416b15
  %606 = phi i64 [ %663, %block_416b04 ], [ %565, %block_416b15 ]
  %607 = phi %struct.Memory* [ %77, %block_416b04 ], [ %607, %block_416b15 ]
  %608 = inttoptr i64 %73 to i32*
  %609 = load i32, i32* %608
  %610 = add i32 %609, -5
  %611 = lshr i32 %610, 31
  %612 = lshr i32 %609, 31
  %613 = xor i32 %611, %612
  %614 = add nuw nsw i32 %613, %612
  %615 = icmp eq i32 %614, 2
  %616 = icmp ne i32 %611, 0
  %617 = xor i1 %616, %615
  %618 = select i1 %617, i64 10, i64 107
  %619 = add i64 %606, %618
  br i1 %617, label %block_416b15, label %block_416b76

block_416b89:                                     ; preds = %block_416afa
  %620 = inttoptr i64 %66 to i32*
  %621 = load i32, i32* %620
  %622 = add i32 %621, 1
  %623 = inttoptr i64 %66 to i32*
  store i32 %622, i32* %623
  %624 = add i64 %89, -160
  br label %block_416ae9

block_416dd6:                                     ; preds = %block_416d5e
  store i32 0, i32* %482, align 1, !tbaa !1244
  store i32 0, i32* %484, align 1, !tbaa !1244
  store i32 0, i32* %485, align 1, !tbaa !1244
  store i32 0, i32* %487, align 1, !tbaa !1244
  %625 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1680) to double*)
  store double %625, double* %30, align 1, !tbaa !1246
  store double 0.000000e+00, double* %32, align 1, !tbaa !1246
  %626 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1688) to double*)
  store double %626, double* %34, align 1, !tbaa !1246
  store double 0.000000e+00, double* %36, align 1, !tbaa !1246
  %627 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1696) to double*)
  store double %627, double* %38, align 1, !tbaa !1246
  store double 0.000000e+00, double* %40, align 1, !tbaa !1246
  %628 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1704) to double*)
  store double %628, double* %42, align 1, !tbaa !1246
  store double 0.000000e+00, double* %44, align 1, !tbaa !1246
  %629 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1712) to double*)
  store double %629, double* %61, align 1, !tbaa !1246
  store double 0.000000e+00, double* %493, align 1, !tbaa !1246
  %630 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1720) to double*)
  store double %630, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %56, align 1, !tbaa !1246
  %631 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1728) to double*)
  store double %631, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %632 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1736) to double*)
  store double %632, double* %497, align 1, !tbaa !1246
  store double 0.000000e+00, double* %499, align 1, !tbaa !1246
  %633 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1744) to double*)
  store double %633, double* %501, align 1, !tbaa !1246
  store double 0.000000e+00, double* %503, align 1, !tbaa !1246
  %634 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1752) to double*)
  store double %634, double* %505, align 1, !tbaa !1246
  store double 0.000000e+00, double* %507, align 1, !tbaa !1246
  %635 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1760) to double*)
  store double %635, double* %509, align 1, !tbaa !1246
  store double 0.000000e+00, double* %511, align 1, !tbaa !1246
  %636 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1768) to double*)
  %637 = bitcast %union.VectorReg* %19 to double*
  store double %636, double* %637, align 1, !tbaa !1246
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 12, i32 0, i32 0, i32 0, i64 1
  %639 = bitcast i64* %638 to double*
  store double 0.000000e+00, double* %639, align 1, !tbaa !1246
  store double %636, double* bitcast (%qbnew_type* @qbnew to double*)
  store double %635, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 8) to double*)
  store double %634, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 16) to double*)
  store double %633, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 24) to double*)
  store double %632, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 32) to double*)
  store double %628, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 40) to double*)
  store double %631, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 48) to double*)
  store double %630, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 56) to double*)
  store double %629, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 64) to double*)
  store double %628, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 72) to double*)
  store double %627, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 80) to double*)
  store double %626, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 88) to double*)
  %640 = load double, double* %26, align 1
  store double %640, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 96) to double*)
  %641 = load double, double* %30, align 1
  store double %641, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 104) to double*)
  store double %640, double* inttoptr (i64 add (i64 ptrtoint (%qbnew_type* @qbnew to i64), i64 112) to double*)
  %642 = load i64, i64* %8, align 8
  %643 = add i64 %642, -8
  %644 = add i64 %409, 251
  %645 = inttoptr i64 %643 to i32*
  store i32 0, i32* %645
  %646 = add i64 %642, -4
  br label %block_416ed1

block_417178:                                     ; preds = %block_417182, %block_417171
  %647 = phi i64 [ %92, %block_417171 ], [ %708, %block_417182 ]
  %648 = phi %struct.Memory* [ %189, %block_417171 ], [ %648, %block_417182 ]
  %649 = inttoptr i64 %252 to i32*
  %650 = load i32, i32* %649
  %651 = add i32 %650, -5
  %652 = lshr i32 %651, 31
  %653 = lshr i32 %650, 31
  %654 = xor i32 %652, %653
  %655 = add nuw nsw i32 %654, %653
  %656 = icmp eq i32 %655, 2
  %657 = icmp ne i32 %652, 0
  %658 = xor i1 %657, %656
  %659 = select i1 %658, i64 10, i64 95
  %660 = add i64 %647, %659
  %661 = inttoptr i64 %249 to i32*
  %662 = load i32, i32* %661
  br i1 %658, label %block_417182, label %block_4171d7

block_416b04:                                     ; preds = %block_416afa
  %663 = add i64 %89, 7
  %664 = inttoptr i64 %73 to i32*
  store i32 0, i32* %664
  br label %block_416b0b

block_417103:                                     ; preds = %block_4170f9
  %665 = sext i32 %343 to i64
  %666 = mul nsw i64 %665, 40
  %667 = add i64 %666, ptrtoint (%ixtmc1_type* @ixtmc1 to i64)
  %668 = inttoptr i64 %249 to i32*
  %669 = load i32, i32* %668
  %670 = sext i32 %669 to i64
  store i64 %670, i64* %470, align 8, !tbaa !1240
  %671 = shl nsw i64 %670, 3
  %672 = add i64 %671, %667
  %673 = inttoptr i64 %672 to double*
  %674 = load double, double* %673
  store double %674, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %675 = mul nsw i64 %670, 40
  %676 = add i64 %675, ptrtoint (%ixmc1_type* @ixmc1 to i64)
  store i64 %665, i64* %5, align 8, !tbaa !1240
  %677 = shl nsw i64 %665, 3
  %678 = add i64 %677, %676
  %679 = inttoptr i64 %678 to double*
  store double %674, double* %679
  %680 = inttoptr i64 %252 to i32*
  %681 = load i32, i32* %680
  %682 = add i32 %681, 1
  %683 = inttoptr i64 %252 to i32*
  store i32 %682, i32* %683
  %684 = add i64 %353, -10
  br label %block_4170f9

block_417182:                                     ; preds = %block_417178
  %685 = sub i32 4, %662
  %686 = zext i32 %685 to i64
  store i64 %686, i64* %6, align 8, !tbaa !1240
  %687 = sext i32 %685 to i64
  %688 = mul nsw i64 %687, 40
  %689 = add i64 %688, ptrtoint (%ixtmc1_type* @ixtmc1 to i64)
  %690 = sub i32 4, %650
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %5, align 8, !tbaa !1240
  %692 = sext i32 %690 to i64
  store i64 %692, i64* %471, align 8, !tbaa !1240
  %693 = shl nsw i64 %692, 3
  %694 = add i64 %689, %693
  %695 = inttoptr i64 %694 to double*
  %696 = load double, double* %695
  store double %696, double* %26, align 1, !tbaa !1246
  store double 0.000000e+00, double* %28, align 1, !tbaa !1246
  %697 = sext i32 %662 to i64
  %698 = mul nsw i64 %697, 40
  %699 = add i64 %698, ptrtoint (%ixtmc2_type* @ixtmc2 to i64)
  %700 = sext i32 %650 to i64
  store i64 %700, i64* %470, align 8, !tbaa !1240
  %701 = shl nsw i64 %700, 3
  %702 = add i64 %701, %699
  %703 = inttoptr i64 %702 to double*
  store double %696, double* %703
  %704 = inttoptr i64 %252 to i32*
  %705 = load i32, i32* %704
  %706 = add i32 %705, 1
  %707 = inttoptr i64 %252 to i32*
  store i32 %706, i32* %707
  %708 = add i64 %660, -10
  br label %block_417178
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f920_ncopy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f920:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %10, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %9, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -28
  %24 = load i32, i32* %5, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %14, -32
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = add i64 %14, -28
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = add i64 %14, -24
  %33 = add i64 %14, -16
  br label %block_41f936

block_41f936:                                     ; preds = %block_41f942, %block_41f920
  %34 = phi %struct.Memory* [ %2, %block_41f920 ], [ %34, %block_41f942 ]
  %35 = inttoptr i64 %26 to i32*
  %36 = load i32, i32* %35
  %37 = inttoptr i64 %28 to i32*
  %38 = load i32, i32* %37
  %39 = sub i32 %36, %38
  %40 = lshr i32 %39, 31
  %41 = trunc i32 %40 to i8
  %42 = lshr i32 %36, 31
  %43 = lshr i32 %38, 31
  %44 = xor i32 %43, %42
  %45 = xor i32 %40, %42
  %46 = add nuw nsw i32 %45, %44
  %47 = icmp eq i32 %46, 2
  %48 = icmp ne i8 %41, 0
  %49 = xor i1 %48, %47
  br i1 %49, label %block_41f942, label %block_41f966

block_41f942:                                     ; preds = %block_41f936
  %50 = inttoptr i64 %32 to i64*
  %51 = load i64, i64* %50
  %52 = sext i32 %36 to i64
  %53 = shl nsw i64 %52, 2
  %54 = add i64 %53, %51
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = zext i32 %56 to i64
  store i64 %57, i64* %8, align 8, !tbaa !1240
  %58 = inttoptr i64 %33 to i64*
  %59 = load i64, i64* %58
  store i64 %52, i64* %7, align 8, !tbaa !1240
  %60 = add i64 %53, %59
  %61 = inttoptr i64 %60 to i32*
  store i32 %56, i32* %61
  %62 = inttoptr i64 %26 to i32*
  %63 = load i32, i32* %62
  %64 = add i32 %63, 1
  %65 = inttoptr i64 %26 to i32*
  store i32 %64, i32* %65
  br label %block_41f936

block_41f966:                                     ; preds = %block_41f936
  %66 = zext i32 %36 to i64
  store i64 %66, i64* %6, align 8, !tbaa !1240
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %70 = icmp ult i32 %36, %38
  %71 = zext i1 %70 to i8
  %72 = and i32 %39, 255
  %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #11
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  %76 = xor i8 %75, 1
  %77 = xor i32 %38, %36
  %78 = xor i32 %77, %39
  %79 = lshr i32 %78, 4
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = icmp eq i32 %39, 0
  %83 = zext i1 %82 to i8
  %84 = zext i1 %47 to i8
  store i8 %71, i8* %29, align 1, !tbaa !1248
  store i8 %76, i8* %67, align 1, !tbaa !1261
  store i8 %81, i8* %30, align 1, !tbaa !1262
  store i8 %83, i8* %68, align 1, !tbaa !1263
  store i8 %41, i8* %31, align 1, !tbaa !1264
  store i8 %84, i8* %69, align 1, !tbaa !1265
  %85 = inttoptr i64 %15 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %12, align 8, !tbaa !1240
  %87 = inttoptr i64 %14 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %3, align 8, !tbaa !1240
  %89 = add i64 %14, 8
  store i64 %89, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %34
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402b70_do_coarsen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402b70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%mt_to_id_type* @mt_to_id to i64), i64* %9, align 8, !tbaa !1240
  %25 = add i64 %16, -16
  %26 = load i64, i64* %12, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %16, -24
  %29 = load i64, i64* %11, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %16, -28
  %32 = load i32, i32* %7, align 4
  %33 = inttoptr i64 %31 to i32*
  store i32 %32, i32* %33
  %34 = inttoptr i64 %25 to i64*
  %35 = load i64, i64* %34
  %36 = inttoptr i64 %35 to i32*
  store i32 0, i32* %36
  %37 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %38 = zext i32 %37 to i64
  store i64 %38, i64* %10, align 8, !tbaa !1240
  store i64 ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64), i64* %12, align 8, !tbaa !1240
  store i64 ptrtoint (%mt_to_id_type* @mt_to_id to i64), i64* %11, align 8, !tbaa !1240
  %39 = add i64 %1, 118192
  %40 = add i64 %1, 67
  %41 = add i64 %16, -128
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  store i64 %41, i64* %13, align 8, !tbaa !1240
  %43 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %39, %struct.Memory* %2)
  %44 = load i64, i64* %3, align 8
  store i64 ptrtoint (%mt_to_id_type* @mt_to_id to i64), i64* %12, align 8, !tbaa !1240
  store i64 4294967295, i64* %10, align 8, !tbaa !1240
  %45 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %46 = zext i32 %45 to i64
  store i64 %46, i64* %11, align 8, !tbaa !1240
  %47 = add i64 %44, 117997
  %48 = add i64 %44, 27
  %49 = load i64, i64* %13, align 8, !tbaa !1240
  %50 = add i64 %49, -8
  %51 = inttoptr i64 %50 to i64*
  store i64 %48, i64* %51
  store i64 %50, i64* %13, align 8, !tbaa !1240
  %52 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %47, %struct.Memory* %43)
  %53 = load i64, i64* %3, align 8
  store i64 ptrtoint (%ifcoa_id_type* @ifcoa_id to i64), i64* %12, align 8, !tbaa !1240
  store i64 0, i64* %10, align 8, !tbaa !1240
  %54 = load i64, i64* %14, align 8
  %55 = add i64 %54, -20
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = zext i32 %57 to i64
  store i64 %58, i64* %11, align 8, !tbaa !1240
  %59 = add i64 %53, 118034
  %60 = add i64 %53, 20
  %61 = load i64, i64* %13, align 8, !tbaa !1240
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63
  store i64 %62, i64* %13, align 8, !tbaa !1240
  %64 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %59, %struct.Memory* %52)
  %65 = load i64, i64* %14, align 8
  %66 = add i64 %65, -96
  %67 = load i64, i64* %3, align 8
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %66 to i32*
  store i32 0, i32* %69
  br label %block_402be9

block_402d5a:                                     ; preds = %block_402d37, %block_402d53
  %70 = phi i64 [ %465, %block_402d37 ], [ %229, %block_402d53 ]
  %71 = phi %struct.Memory* [ %660, %block_402d37 ], [ %660, %block_402d53 ]
  %72 = inttoptr i64 %355 to i32*
  %73 = load i32, i32* %72
  %74 = add i32 %73, 1
  %75 = inttoptr i64 %355 to i32*
  store i32 %74, i32* %75
  %76 = add i64 %70, -45
  br label %block_402d2d

block_402bf9:                                     ; preds = %block_402be9
  %77 = sext i32 %135 to i64
  %78 = shl nsw i64 %77, 2
  %79 = add i64 %78, ptrtoint (%ifcoa_type* @ifcoa to i64)
  %80 = inttoptr i64 %79 to i32*
  store i32 0, i32* %80
  %81 = inttoptr i64 %133 to i32*
  %82 = load i32, i32* %81
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 2
  %85 = add i64 %84, ptrtoint (%front_type* @front to i64)
  %86 = inttoptr i64 %85 to i32*
  store i32 0, i32* %86
  %87 = inttoptr i64 %133 to i32*
  %88 = load i32, i32* %87
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 2
  %91 = add i64 %90, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %9, align 8, !tbaa !1240
  %95 = add i64 %131, -40
  %96 = inttoptr i64 %95 to i32*
  store i32 %93, i32* %96
  %97 = inttoptr i64 %95 to i32*
  %98 = load i32, i32* %97
  %99 = sext i32 %98 to i64
  %100 = shl nsw i64 %99, 2
  %101 = add i64 %100, ptrtoint (%ich_type* @ich to i64)
  %102 = inttoptr i64 %101 to i32*
  %103 = load i32, i32* %102
  %104 = add i32 %103, -2
  %105 = icmp eq i32 %104, 0
  %106 = select i1 %105, i64 62, i64 734
  %107 = add i64 %150, %106
  br i1 %105, label %block_402c37, label %block_402ed7

block_402eea:                                     ; preds = %block_402be9
  store i64 ptrtoint (%front_type* @front to i64), i64* %12, align 8, !tbaa !1240
  %108 = add i64 %150, 118326
  %109 = add i64 %150, 15
  %110 = load i64, i64* %13, align 8, !tbaa !1240
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112
  store i64 %111, i64* %13, align 8, !tbaa !1240
  %113 = tail call %struct.Memory* @sub_41fd20_parallel_add(%struct.State* nonnull %0, i64 %108, %struct.Memory* %132)
  %114 = load i64, i64* %3, align 8
  %115 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %116 = add i32 %115, -1
  %117 = sext i32 %116 to i64
  store i64 %117, i64* %12, align 8, !tbaa !1240
  %118 = shl nsw i64 %117, 2
  %119 = add i64 %118, ptrtoint (%front_type* @front to i64)
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120
  %122 = load i64, i64* %14, align 8
  %123 = add i64 %122, -108
  %124 = inttoptr i64 %123 to i32*
  store i32 %121, i32* %124
  %125 = add i64 %122, -96
  %126 = add i64 %114, 30
  %127 = inttoptr i64 %125 to i32*
  store i32 0, i32* %127
  %128 = add i64 %122, -40
  %129 = add i64 %122, -92
  br label %block_402f17

block_402be9:                                     ; preds = %block_402ed7, %block_402b70
  %130 = phi i64 [ %68, %block_402b70 ], [ %525, %block_402ed7 ]
  %131 = phi i64 [ %65, %block_402b70 ], [ %517, %block_402ed7 ]
  %132 = phi %struct.Memory* [ %64, %block_402b70 ], [ %519, %block_402ed7 ]
  %133 = add i64 %131, -96
  %134 = inttoptr i64 %133 to i32*
  %135 = load i32, i32* %134
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %8, align 8, !tbaa !1240
  %137 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %138 = sub i32 %135, %137
  %139 = lshr i32 %138, 31
  %140 = trunc i32 %139 to i8
  %141 = lshr i32 %135, 31
  %142 = lshr i32 %137, 31
  %143 = xor i32 %142, %141
  %144 = xor i32 %139, %141
  %145 = add nuw nsw i32 %144, %143
  %146 = icmp eq i32 %145, 2
  %147 = icmp ne i8 %140, 0
  %148 = xor i1 %147, %146
  %149 = select i1 %148, i64 16, i64 769
  %150 = add i64 %130, %149
  br i1 %148, label %block_402bf9, label %block_402eea

block_402fa6:                                     ; preds = %block_402f92, %block_402f59
  %151 = phi i64 [ %434, %block_402f92 ], [ %200, %block_402f59 ]
  %152 = phi %struct.Memory* [ %547, %block_402f92 ], [ %547, %block_402f59 ]
  %153 = inttoptr i64 %128 to i32*
  %154 = load i32, i32* %153
  %155 = inttoptr i64 %129 to i32*
  %156 = load i32, i32* %155
  %157 = sext i32 %156 to i64
  %158 = shl nsw i64 %157, 2
  %159 = add i64 %158, ptrtoint (%mt_to_id_type* @mt_to_id to i64)
  %160 = add i64 %151, 14
  %161 = inttoptr i64 %159 to i32*
  store i32 %154, i32* %161
  br label %block_402fb4

block_402de2:                                     ; preds = %block_402dd8
  %162 = sext i32 %206 to i64
  %163 = shl nsw i64 %162, 2
  %164 = add i64 %202, -80
  %165 = add i64 %164, %163
  %166 = inttoptr i64 %165 to i32*
  %167 = load i32, i32* %166
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %12, align 8, !tbaa !1240
  %169 = zext i32 %206 to i64
  store i64 %169, i64* %11, align 8, !tbaa !1240
  %170 = add i64 %217, 750
  %171 = add i64 %217, 16
  %172 = load i64, i64* %13, align 8, !tbaa !1240
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174
  store i64 %173, i64* %13, align 8, !tbaa !1240
  %175 = tail call %struct.Memory* @sub_4030d0_icheck(%struct.State* nonnull %0, i64 %170, %struct.Memory* %203)
  %176 = load i32, i32* %5, align 4
  %177 = load i64, i64* %3, align 8
  %178 = icmp eq i32 %176, 0
  %179 = select i1 %178, i64 9, i64 16
  %180 = add i64 %177, %179
  %181 = load i64, i64* %14, align 8
  br i1 %178, label %block_402dfb, label %block_402e02

block_402f59:                                     ; preds = %block_402f47
  %182 = add i32 %402, -1
  %183 = sext i32 %182 to i64
  %184 = shl nsw i64 %183, 2
  %185 = add i64 %184, ptrtoint (%action_type* @action to i64)
  %186 = inttoptr i64 %185 to i32*
  store i32 %391, i32* %186
  %187 = inttoptr i64 %125 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = shl nsw i64 %189, 2
  %191 = add i64 %190, ptrtoint (%front_type* @front to i64)
  %192 = inttoptr i64 %191 to i32*
  %193 = load i32, i32* %192
  %194 = add i32 %193, -1
  %195 = sext i32 %194 to i64
  %196 = mul nsw i64 %195, 7
  %197 = trunc i64 %196 to i32
  %198 = sub i32 %188, %197
  %199 = inttoptr i64 %129 to i32*
  store i32 %198, i32* %199
  %200 = add i64 %399, 77
  br label %block_402fa6

block_402dd8:                                     ; preds = %block_402e02, %block_402dca
  %201 = phi i64 [ %388, %block_402dca ], [ %812, %block_402e02 ]
  %202 = phi i64 [ %347, %block_402dca ], [ %181, %block_402e02 ]
  %203 = phi %struct.Memory* [ %682, %block_402dca ], [ %806, %block_402e02 ]
  %204 = add i64 %202, -100
  %205 = inttoptr i64 %204 to i32*
  %206 = load i32, i32* %205
  %207 = add i32 %206, -8
  %208 = lshr i32 %207, 31
  %209 = trunc i32 %208 to i8
  %210 = lshr i32 %206, 31
  %211 = xor i32 %208, %210
  %212 = add nuw nsw i32 %211, %210
  %213 = icmp eq i32 %212, 2
  %214 = icmp ne i8 %209, 0
  %215 = xor i1 %214, %213
  %216 = select i1 %215, i64 10, i64 61
  %217 = add i64 %201, %216
  br i1 %215, label %block_402de2, label %block_402e15

block_402fc7:                                     ; preds = %block_402f17
  %218 = add i64 %122, -104
  %219 = add i64 %563, 7
  %220 = inttoptr i64 %218 to i32*
  store i32 0, i32* %220
  br label %block_402fce

block_402c54:                                     ; preds = %block_402c37
  %221 = and i64 %366, 2
  %222 = trunc i64 %221 to i32
  %223 = lshr exact i32 %222, 1
  %224 = trunc i32 %223 to i8
  %225 = xor i8 %224, 1
  %226 = icmp eq i8 %225, 0
  %227 = select i1 %226, i64 638, i64 15
  %228 = add i64 %372, %227
  br i1 %226, label %block_402ed2, label %block_402c63

block_402d53:                                     ; preds = %block_402d37
  %229 = add i64 %465, 7
  %230 = inttoptr i64 %353 to i32*
  store i32 0, i32* %230
  br label %block_402d5a

block_402ed2:                                     ; preds = %block_402ecd, %block_402c63, %block_402c37, %block_402c54
  %231 = phi i64 [ %131, %block_402c37 ], [ %131, %block_402c54 ], [ %131, %block_402c63 ], [ %437, %block_402ecd ]
  %232 = phi i64 [ %372, %block_402c37 ], [ %228, %block_402c54 ], [ %480, %block_402c63 ], [ %587, %block_402ecd ]
  %233 = phi %struct.Memory* [ %132, %block_402c37 ], [ %132, %block_402c54 ], [ %132, %block_402c63 ], [ %586, %block_402ecd ]
  %234 = add i64 %232, 5
  br label %block_402ed7

block_402fce:                                     ; preds = %block_402fda, %block_402fc7
  %235 = phi i64 [ %219, %block_402fc7 ], [ %804, %block_402fda ]
  %236 = phi i64 [ %122, %block_402fc7 ], [ %797, %block_402fda ]
  %237 = phi %struct.Memory* [ %547, %block_402fc7 ], [ %796, %block_402fda ]
  %238 = add i64 %236, -104
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239
  %241 = add i64 %236, -108
  %242 = inttoptr i64 %241 to i32*
  %243 = load i32, i32* %242
  %244 = sub i32 %240, %243
  %245 = lshr i32 %244, 31
  %246 = trunc i32 %245 to i8
  %247 = lshr i32 %240, 31
  %248 = lshr i32 %243, 31
  %249 = xor i32 %248, %247
  %250 = xor i32 %245, %247
  %251 = add nuw nsw i32 %250, %249
  %252 = icmp eq i32 %251, 2
  %253 = icmp ne i8 %246, 0
  %254 = xor i1 %253, %252
  %255 = select i1 %254, i64 12, i64 212
  %256 = add i64 %235, %255
  br i1 %254, label %block_402fda, label %block_4030a2

block_402c72:                                     ; preds = %block_402c63
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %8, align 8, !tbaa !1240
  %257 = inttoptr i64 %95 to i32*
  %258 = load i32, i32* %257
  %259 = add i64 %131, -80
  %260 = inttoptr i64 %259 to i32*
  store i32 %258, i32* %260
  %261 = inttoptr i64 %95 to i32*
  %262 = load i32, i32* %261
  %263 = sext i32 %262 to i64
  %264 = mul nsw i64 %263, 96
  %265 = add i64 %264, ptrtoint (%sje_type* @sje to i64)
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266
  %268 = add i64 %131, -76
  %269 = inttoptr i64 %268 to i32*
  store i32 %267, i32* %269
  %270 = inttoptr i64 %95 to i32*
  %271 = load i32, i32* %270
  %272 = sext i32 %271 to i64
  %273 = mul nsw i64 %272, 96
  %274 = load i64, i64* %8, align 8
  %275 = add i64 %273, %274
  %276 = add i64 %275, 32
  %277 = inttoptr i64 %276 to i32*
  %278 = load i32, i32* %277
  %279 = load i64, i64* %14, align 8
  %280 = add i64 %279, -72
  %281 = inttoptr i64 %280 to i32*
  store i32 %278, i32* %281
  %282 = inttoptr i64 %280 to i32*
  %283 = load i32, i32* %282
  %284 = sext i32 %283 to i64
  %285 = mul nsw i64 %284, 96
  %286 = add i64 %285, %274
  %287 = inttoptr i64 %286 to i32*
  %288 = load i32, i32* %287
  %289 = add i64 %279, -68
  %290 = inttoptr i64 %289 to i32*
  store i32 %288, i32* %290
  %291 = add i64 %279, -40
  %292 = inttoptr i64 %291 to i32*
  %293 = load i32, i32* %292
  %294 = sext i32 %293 to i64
  %295 = mul nsw i64 %294, 96
  %296 = load i64, i64* %8, align 8
  %297 = add i64 %295, %296
  %298 = add i64 %297, 64
  %299 = inttoptr i64 %298 to i32*
  %300 = load i32, i32* %299
  %301 = load i64, i64* %14, align 8
  %302 = add i64 %301, -64
  %303 = inttoptr i64 %302 to i32*
  store i32 %300, i32* %303
  %304 = inttoptr i64 %302 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 96
  %308 = add i64 %307, %296
  %309 = inttoptr i64 %308 to i32*
  %310 = load i32, i32* %309
  %311 = add i64 %301, -60
  %312 = inttoptr i64 %311 to i32*
  store i32 %310, i32* %312
  %313 = inttoptr i64 %302 to i32*
  %314 = load i32, i32* %313
  %315 = sext i32 %314 to i64
  %316 = mul nsw i64 %315, 96
  %317 = load i64, i64* %8, align 8
  %318 = add i64 %316, %317
  store i64 %318, i64* %11, align 8, !tbaa !1240
  %319 = add i64 %318, 32
  %320 = inttoptr i64 %319 to i32*
  %321 = load i32, i32* %320
  %322 = load i64, i64* %14, align 8
  %323 = add i64 %322, -56
  %324 = inttoptr i64 %323 to i32*
  store i32 %321, i32* %324
  %325 = inttoptr i64 %323 to i32*
  %326 = load i32, i32* %325
  %327 = sext i32 %326 to i64
  %328 = mul nsw i64 %327, 96
  store i64 %328, i64* %10, align 8, !tbaa !1240
  %329 = add i64 %328, %317
  %330 = inttoptr i64 %329 to i32*
  %331 = load i32, i32* %330
  %332 = add i64 %322, -52
  %333 = inttoptr i64 %332 to i32*
  store i32 %331, i32* %333
  %334 = add i64 %322, -40
  %335 = inttoptr i64 %334 to i32*
  %336 = load i32, i32* %335
  %337 = sext i32 %336 to i64
  %338 = shl nsw i64 %337, 2
  %339 = add i64 %338, ptrtoint (%tree_type* @tree to i64)
  %340 = inttoptr i64 %339 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  %343 = shl nuw i64 %342, 32
  %344 = ashr i64 %343, 34
  %345 = lshr i64 %344, 1
  %346 = and i64 %345, 4294967295
  store i64 %346, i64* %9, align 8, !tbaa !1240
  %347 = load i64, i64* %14, align 8
  %348 = add i64 %347, -88
  %349 = trunc i64 %345 to i32
  %350 = inttoptr i64 %348 to i32*
  store i32 %349, i32* %350
  %351 = add i64 %347, -24
  %352 = inttoptr i64 %351 to i32*
  store i32 0, i32* %352
  %353 = add i64 %347, -28
  %354 = inttoptr i64 %353 to i32*
  store i32 1, i32* %354
  %355 = add i64 %347, -100
  %356 = add i64 %480, 187
  %357 = inttoptr i64 %355 to i32*
  store i32 0, i32* %357
  %358 = add i64 %347, -80
  br label %block_402d2d

block_402c37:                                     ; preds = %block_402bf9
  %359 = add i64 %100, ptrtoint (%tree_type* @tree to i64)
  %360 = inttoptr i64 %359 to i32*
  %361 = load i32, i32* %360
  %362 = add i64 %131, -84
  %363 = inttoptr i64 %362 to i32*
  store i32 %361, i32* %363
  %364 = inttoptr i64 %362 to i32*
  %365 = load i32, i32* %364
  %366 = zext i32 %365 to i64
  %367 = and i64 %366, 1
  store i64 %367, i64* %9, align 8, !tbaa !1240
  %368 = trunc i64 %367 to i8
  %369 = xor i8 %368, 1
  %370 = icmp eq i8 %369, 0
  %371 = select i1 %370, i64 667, i64 29
  %372 = add i64 %107, %371
  br i1 %370, label %block_402ed2, label %block_402c54

block_402d8f:                                     ; preds = %block_402d85
  %373 = sext i32 %684 to i64
  %374 = shl nsw i64 %373, 2
  %375 = add i64 %358, %374
  %376 = inttoptr i64 %375 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  %379 = shl nsw i64 %378, 2
  %380 = add i64 %379, ptrtoint (%ich_type* @ich to i64)
  %381 = inttoptr i64 %380 to i32*
  %382 = load i32, i32* %381
  %383 = icmp eq i32 %382, 2
  %384 = select i1 %383, i64 30, i64 23
  %385 = add i64 %694, %384
  br i1 %383, label %block_402dad, label %block_402da6

block_402dca:                                     ; preds = %block_402dc0
  %386 = add i64 %347, -36
  %387 = inttoptr i64 %386 to i32*
  store i32 1, i32* %387
  %388 = add i64 %680, 14
  %389 = inttoptr i64 %355 to i32*
  store i32 0, i32* %389
  br label %block_402dd8

block_402f47:                                     ; preds = %block_402f27
  %390 = inttoptr i64 %125 to i32*
  %391 = load i32, i32* %390
  %392 = sext i32 %391 to i64
  %393 = shl nsw i64 %392, 2
  %394 = add i64 %393, ptrtoint (%ifcoa_type* @ifcoa to i64)
  %395 = inttoptr i64 %394 to i32*
  %396 = load i32, i32* %395
  %397 = icmp eq i32 %396, 0
  %398 = select i1 %397, i64 75, i64 18
  %399 = add i64 %496, %398
  %400 = add i64 %393, ptrtoint (%front_type* @front to i64)
  %401 = inttoptr i64 %400 to i32*
  %402 = load i32, i32* %401
  br i1 %397, label %block_402f92, label %block_402f59

block_402ec3:                                     ; preds = %block_402e92
  %403 = add i64 %437, -8
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %604, 10
  %407 = inttoptr i64 %405 to i32*
  store i32 1, i32* %407
  br label %block_402ecd

block_402e3a:                                     ; preds = %block_402e30
  %408 = add i64 %437, -96
  %409 = inttoptr i64 %408 to i32*
  %410 = load i32, i32* %409
  %411 = sext i32 %410 to i64
  %412 = shl nsw i64 %411, 2
  %413 = add i64 %412, ptrtoint (%ifcoa_type* @ifcoa to i64)
  %414 = inttoptr i64 %413 to i32*
  store i32 1, i32* %414
  %415 = add i64 %437, -100
  %416 = add i64 %444, 22
  %417 = inttoptr i64 %415 to i32*
  store i32 0, i32* %417
  %418 = add i64 %437, -80
  br label %block_402e50

block_402fb4:                                     ; preds = %block_402f27, %block_402fa6
  %419 = phi i64 [ %496, %block_402f27 ], [ %160, %block_402fa6 ]
  %420 = phi %struct.Memory* [ %547, %block_402f27 ], [ %152, %block_402fa6 ]
  %421 = inttoptr i64 %125 to i32*
  %422 = load i32, i32* %421
  %423 = add i32 %422, 1
  %424 = inttoptr i64 %125 to i32*
  store i32 %423, i32* %424
  %425 = add i64 %419, -157
  br label %block_402f17

block_402d77:                                     ; preds = %block_402d6d
  %426 = add i64 %347, -32
  %427 = inttoptr i64 %426 to i32*
  store i32 1, i32* %427
  %428 = add i64 %609, 14
  %429 = inttoptr i64 %355 to i32*
  store i32 0, i32* %429
  br label %block_402d85

block_402f92:                                     ; preds = %block_402f47
  %430 = sext i32 %402 to i64
  %431 = mul nsw i64 %430, 7
  %432 = trunc i64 %431 to i32
  %433 = sub i32 %391, %432
  %434 = add i64 %399, 20
  %435 = inttoptr i64 %129 to i32*
  store i32 %433, i32* %435
  br label %block_402fa6

block_402e30:                                     ; preds = %block_402d6d, %block_402e2b
  %436 = phi i64 [ %609, %block_402d6d ], [ %545, %block_402e2b ]
  %437 = phi i64 [ %347, %block_402d6d ], [ %542, %block_402e2b ]
  %438 = phi %struct.Memory* [ %660, %block_402d6d ], [ %544, %block_402e2b ]
  %439 = add i64 %437, -24
  %440 = inttoptr i64 %439 to i32*
  %441 = load i32, i32* %440
  %442 = icmp eq i32 %441, 0
  %443 = select i1 %442, i64 157, i64 10
  %444 = add i64 %436, %443
  br i1 %442, label %block_402ecd, label %block_402e3a

block_402d37:                                     ; preds = %block_402d2d
  %445 = sext i32 %662 to i64
  %446 = shl nsw i64 %445, 2
  %447 = add i64 %358, %446
  %448 = inttoptr i64 %447 to i32*
  %449 = load i32, i32* %448
  %450 = sext i32 %449 to i64
  %451 = shl nsw i64 %450, 2
  %452 = add i64 %451, ptrtoint (%tree_type* @tree to i64)
  %453 = inttoptr i64 %452 to i32*
  %454 = load i32, i32* %453
  %455 = zext i32 %454 to i64
  %456 = shl nuw i64 %455, 32
  %457 = ashr i64 %456, 34
  %458 = lshr i64 %457, 1
  %459 = and i64 %458, 4294967295
  store i64 %459, i64* %9, align 8, !tbaa !1240
  %460 = trunc i64 %458 to i32
  %461 = inttoptr i64 %348 to i32*
  %462 = load i32, i32* %461
  %463 = icmp eq i32 %460, %462
  %464 = select i1 %463, i64 35, i64 28
  %465 = add i64 %672, %464
  br i1 %463, label %block_402d5a, label %block_402d53

block_402dad:                                     ; preds = %block_402da6, %block_402d8f
  %466 = phi i64 [ %385, %block_402d8f ], [ %588, %block_402da6 ]
  %467 = phi %struct.Memory* [ %682, %block_402d8f ], [ %682, %block_402da6 ]
  %468 = inttoptr i64 %355 to i32*
  %469 = load i32, i32* %468
  %470 = add i32 %469, 1
  %471 = inttoptr i64 %355 to i32*
  store i32 %470, i32* %471
  %472 = add i64 %466, -40
  br label %block_402d85

block_402c63:                                     ; preds = %block_402c54
  %473 = and i64 %366, 4
  %474 = trunc i64 %473 to i32
  %475 = lshr exact i32 %474, 2
  %476 = trunc i32 %475 to i8
  %477 = xor i8 %476, 1
  %478 = icmp eq i8 %477, 0
  %479 = select i1 %478, i64 623, i64 15
  %480 = add i64 %228, %479
  br i1 %478, label %block_402ed2, label %block_402c72

block_402f27:                                     ; preds = %block_402f17
  %481 = sext i32 %549 to i64
  %482 = shl nsw i64 %481, 2
  %483 = add i64 %482, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %484 = inttoptr i64 %483 to i32*
  %485 = load i32, i32* %484
  %486 = inttoptr i64 %128 to i32*
  store i32 %485, i32* %486
  %487 = inttoptr i64 %128 to i32*
  %488 = load i32, i32* %487
  %489 = sext i32 %488 to i64
  %490 = shl nsw i64 %489, 2
  %491 = add i64 %490, ptrtoint (%skip_type* @skip to i64)
  %492 = inttoptr i64 %491 to i32*
  %493 = load i32, i32* %492
  %494 = icmp ne i32 %493, 0
  %495 = select i1 %494, i64 141, i64 32
  %496 = add i64 %563, %495
  br i1 %494, label %block_402fb4, label %block_402f47

block_402e1f:                                     ; preds = %block_402e15
  %497 = add i64 %202, -24
  %498 = add i64 %584, 7
  %499 = inttoptr i64 %497 to i32*
  store i32 1, i32* %499
  br label %block_402e26

block_402e5a:                                     ; preds = %block_402e50
  %500 = sext i32 %567 to i64
  %501 = shl nsw i64 %500, 2
  %502 = add i64 %418, %501
  %503 = inttoptr i64 %502 to i32*
  %504 = load i32, i32* %503
  %505 = sext i32 %504 to i64
  %506 = shl nsw i64 %505, 2
  %507 = add i64 %506, ptrtoint (%ifcoa_id_type* @ifcoa_id to i64)
  %508 = inttoptr i64 %507 to i32*
  store i32 1, i32* %508
  %509 = inttoptr i64 %415 to i32*
  %510 = load i32, i32* %509
  %511 = add i32 %510, 1
  %512 = inttoptr i64 %415 to i32*
  store i32 %511, i32* %512
  %513 = add i64 %578, -10
  br label %block_402e50

block_402e26:                                     ; preds = %block_402e15, %block_402e1f
  %514 = phi i64 [ %584, %block_402e15 ], [ %498, %block_402e1f ]
  %515 = phi %struct.Memory* [ %203, %block_402e15 ], [ %203, %block_402e1f ]
  %516 = add i64 %514, 5
  br label %block_402e2b

block_402ed7:                                     ; preds = %block_402ed2, %block_402bf9
  %517 = phi i64 [ %131, %block_402bf9 ], [ %231, %block_402ed2 ]
  %518 = phi i64 [ %107, %block_402bf9 ], [ %234, %block_402ed2 ]
  %519 = phi %struct.Memory* [ %132, %block_402bf9 ], [ %233, %block_402ed2 ]
  %520 = add i64 %517, -96
  %521 = inttoptr i64 %520 to i32*
  %522 = load i32, i32* %521
  %523 = add i32 %522, 1
  %524 = inttoptr i64 %520 to i32*
  store i32 %523, i32* %524
  %525 = add i64 %518, -750
  br label %block_402be9

block_402e9c:                                     ; preds = %block_402e92
  %526 = add i32 %593, 1
  %527 = sext i32 %526 to i64
  %528 = shl nsw i64 %527, 2
  %529 = add nsw i64 %528, -80
  %530 = add i64 %529, %437
  %531 = inttoptr i64 %530 to i32*
  %532 = load i32, i32* %531
  %533 = sext i32 %532 to i64
  store i64 %533, i64* %9, align 8, !tbaa !1240
  %534 = shl nsw i64 %533, 2
  %535 = add i64 %534, ptrtoint (%skip_type* @skip to i64)
  %536 = inttoptr i64 %535 to i32*
  store i32 1, i32* %536
  %537 = inttoptr i64 %415 to i32*
  %538 = load i32, i32* %537
  %539 = add i32 %538, 1
  %540 = inttoptr i64 %415 to i32*
  store i32 %539, i32* %540
  %541 = add i64 %604, -10
  br label %block_402e92

block_402e2b:                                     ; preds = %block_402dc0, %block_402e26
  %542 = phi i64 [ %347, %block_402dc0 ], [ %202, %block_402e26 ]
  %543 = phi i64 [ %680, %block_402dc0 ], [ %516, %block_402e26 ]
  %544 = phi %struct.Memory* [ %682, %block_402dc0 ], [ %515, %block_402e26 ]
  %545 = add i64 %543, 5
  br label %block_402e30

block_402f17:                                     ; preds = %block_402fb4, %block_402eea
  %546 = phi i64 [ %126, %block_402eea ], [ %425, %block_402fb4 ]
  %547 = phi %struct.Memory* [ %113, %block_402eea ], [ %420, %block_402fb4 ]
  %548 = inttoptr i64 %125 to i32*
  %549 = load i32, i32* %548
  %550 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %551 = sub i32 %549, %550
  %552 = lshr i32 %551, 31
  %553 = trunc i32 %552 to i8
  %554 = lshr i32 %549, 31
  %555 = lshr i32 %550, 31
  %556 = xor i32 %555, %554
  %557 = xor i32 %552, %554
  %558 = add nuw nsw i32 %557, %556
  %559 = icmp eq i32 %558, 2
  %560 = icmp ne i8 %553, 0
  %561 = xor i1 %560, %559
  %562 = select i1 %561, i64 16, i64 176
  %563 = add i64 %546, %562
  br i1 %561, label %block_402f27, label %block_402fc7

block_402e50:                                     ; preds = %block_402e5a, %block_402e3a
  %564 = phi i64 [ %416, %block_402e3a ], [ %513, %block_402e5a ]
  %565 = phi %struct.Memory* [ %438, %block_402e3a ], [ %565, %block_402e5a ]
  %566 = inttoptr i64 %415 to i32*
  %567 = load i32, i32* %566
  %568 = add i32 %567, -8
  %569 = lshr i32 %568, 31
  %570 = trunc i32 %569 to i8
  %571 = lshr i32 %567, 31
  %572 = xor i32 %569, %571
  %573 = add nuw nsw i32 %572, %571
  %574 = icmp eq i32 %573, 2
  %575 = icmp ne i8 %570, 0
  %576 = xor i1 %575, %574
  %577 = select i1 %576, i64 10, i64 44
  %578 = add i64 %564, %577
  br i1 %576, label %block_402e5a, label %block_402e7c

block_402e15:                                     ; preds = %block_402dd8
  %579 = add i64 %202, -36
  %580 = inttoptr i64 %579 to i32*
  %581 = load i32, i32* %580
  %582 = icmp eq i32 %581, 0
  %583 = select i1 %582, i64 17, i64 10
  %584 = add i64 %217, %583
  br i1 %582, label %block_402e26, label %block_402e1f

block_402ecd:                                     ; preds = %block_402e30, %block_402ec3
  %585 = phi i64 [ %444, %block_402e30 ], [ %406, %block_402ec3 ]
  %586 = phi %struct.Memory* [ %438, %block_402e30 ], [ %591, %block_402ec3 ]
  %587 = add i64 %585, 5
  br label %block_402ed2

block_402da6:                                     ; preds = %block_402d8f
  %588 = add i64 %385, 7
  %589 = inttoptr i64 %426 to i32*
  store i32 0, i32* %589
  br label %block_402dad

block_402e92:                                     ; preds = %block_402e7c, %block_402e9c
  %590 = phi i64 [ %819, %block_402e7c ], [ %541, %block_402e9c ]
  %591 = phi %struct.Memory* [ %565, %block_402e7c ], [ %591, %block_402e9c ]
  %592 = inttoptr i64 %415 to i32*
  %593 = load i32, i32* %592
  %594 = add i32 %593, -7
  %595 = lshr i32 %594, 31
  %596 = trunc i32 %595 to i8
  %597 = lshr i32 %593, 31
  %598 = xor i32 %595, %597
  %599 = add nuw nsw i32 %598, %597
  %600 = icmp eq i32 %599, 2
  %601 = icmp ne i8 %596, 0
  %602 = xor i1 %601, %600
  %603 = select i1 %602, i64 10, i64 49
  %604 = add i64 %590, %603
  br i1 %602, label %block_402e9c, label %block_402ec3

block_402d6d:                                     ; preds = %block_402d2d
  %605 = inttoptr i64 %353 to i32*
  %606 = load i32, i32* %605
  %607 = icmp eq i32 %606, 0
  %608 = select i1 %607, i64 195, i64 10
  %609 = add i64 %672, %608
  br i1 %607, label %block_402e30, label %block_402d77

block_4030a2:                                     ; preds = %block_402fce
  %610 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %611 = mul i32 %243, -7
  %612 = add i32 %610, %611
  store i32 %612, i32* bitcast (%nelt_type* @nelt to i32*)
  %613 = add i64 %236, -16
  %614 = inttoptr i64 %613 to i64*
  %615 = load i64, i64* %614
  %616 = inttoptr i64 %615 to i32*
  %617 = load i32, i32* %616
  %618 = inttoptr i64 %241 to i32*
  %619 = load i32, i32* %618
  %620 = shl i32 %619, 3
  %621 = zext i32 %620 to i64
  store i64 %621, i64* %9, align 8, !tbaa !1240
  %622 = add i32 %620, %617
  %623 = zext i32 %622 to i64
  store i64 %623, i64* %8, align 8, !tbaa !1240
  %624 = load i64, i64* %14, align 8
  %625 = add i64 %624, -16
  %626 = inttoptr i64 %625 to i64*
  %627 = load i64, i64* %626
  store i64 %627, i64* %10, align 8, !tbaa !1240
  %628 = inttoptr i64 %627 to i32*
  store i32 %622, i32* %628
  %629 = load i64, i64* %13, align 8
  %630 = add i64 %629, 112
  %631 = icmp ugt i64 %629, -113
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %19, align 1, !tbaa !1248
  %633 = trunc i64 %630 to i32
  %634 = and i32 %633, 255
  %635 = tail call i32 @llvm.ctpop.i32(i32 %634) #11
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = xor i8 %637, 1
  store i8 %638, i8* %20, align 1, !tbaa !1261
  %639 = xor i64 %629, 16
  %640 = xor i64 %639, %630
  %641 = lshr i64 %640, 4
  %642 = trunc i64 %641 to i8
  %643 = and i8 %642, 1
  store i8 %643, i8* %21, align 1, !tbaa !1262
  %644 = icmp eq i64 %630, 0
  %645 = zext i1 %644 to i8
  store i8 %645, i8* %22, align 1, !tbaa !1263
  %646 = lshr i64 %630, 63
  %647 = trunc i64 %646 to i8
  store i8 %647, i8* %23, align 1, !tbaa !1264
  %648 = lshr i64 %629, 63
  %649 = xor i64 %646, %648
  %650 = add nuw nsw i64 %649, %646
  %651 = icmp eq i64 %650, 2
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %24, align 1, !tbaa !1265
  %653 = add i64 %629, 120
  %654 = inttoptr i64 %630 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %14, align 8, !tbaa !1240
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656
  store i64 %657, i64* %3, align 8, !tbaa !1240
  %658 = add i64 %629, 128
  store i64 %658, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %237

block_402d2d:                                     ; preds = %block_402c72, %block_402d5a
  %659 = phi i64 [ %356, %block_402c72 ], [ %76, %block_402d5a ]
  %660 = phi %struct.Memory* [ %132, %block_402c72 ], [ %71, %block_402d5a ]
  %661 = inttoptr i64 %355 to i32*
  %662 = load i32, i32* %661
  %663 = add i32 %662, -8
  %664 = lshr i32 %663, 31
  %665 = lshr i32 %662, 31
  %666 = xor i32 %664, %665
  %667 = add nuw nsw i32 %666, %665
  %668 = icmp eq i32 %667, 2
  %669 = icmp ne i32 %664, 0
  %670 = xor i1 %669, %668
  %671 = select i1 %670, i64 10, i64 64
  %672 = add i64 %659, %671
  br i1 %670, label %block_402d37, label %block_402d6d

block_402dfb:                                     ; preds = %block_402de2
  %673 = add i64 %181, -36
  %674 = add i64 %180, 7
  %675 = inttoptr i64 %673 to i32*
  store i32 0, i32* %675
  br label %block_402e02

block_402dc0:                                     ; preds = %block_402d85
  %676 = inttoptr i64 %426 to i32*
  %677 = load i32, i32* %676
  %678 = icmp eq i32 %677, 0
  %679 = select i1 %678, i64 107, i64 10
  %680 = add i64 %694, %679
  br i1 %678, label %block_402e2b, label %block_402dca

block_402d85:                                     ; preds = %block_402dad, %block_402d77
  %681 = phi i64 [ %428, %block_402d77 ], [ %472, %block_402dad ]
  %682 = phi %struct.Memory* [ %660, %block_402d77 ], [ %467, %block_402dad ]
  %683 = inttoptr i64 %355 to i32*
  %684 = load i32, i32* %683
  %685 = add i32 %684, -8
  %686 = lshr i32 %685, 31
  %687 = lshr i32 %684, 31
  %688 = xor i32 %686, %687
  %689 = add nuw nsw i32 %688, %687
  %690 = icmp eq i32 %689, 2
  %691 = icmp ne i32 %686, 0
  %692 = xor i1 %691, %690
  %693 = select i1 %692, i64 10, i64 59
  %694 = add i64 %681, %693
  br i1 %692, label %block_402d8f, label %block_402dc0

block_402fda:                                     ; preds = %block_402fce
  %695 = add i64 %236, -80
  store i64 %695, i64* %12, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %8, align 8, !tbaa !1240
  %696 = sext i32 %240 to i64
  %697 = shl nsw i64 %696, 2
  %698 = add i64 %697, ptrtoint (%action_type* @action to i64)
  %699 = inttoptr i64 %698 to i32*
  %700 = load i32, i32* %699
  %701 = add i64 %236, -96
  %702 = inttoptr i64 %701 to i32*
  store i32 %700, i32* %702
  %703 = inttoptr i64 %701 to i32*
  %704 = load i32, i32* %703
  %705 = sext i32 %704 to i64
  %706 = shl nsw i64 %705, 2
  %707 = add i64 %706, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %708 = inttoptr i64 %707 to i32*
  %709 = load i32, i32* %708
  %710 = add i64 %236, -40
  %711 = inttoptr i64 %710 to i32*
  store i32 %709, i32* %711
  %712 = inttoptr i64 %710 to i32*
  %713 = load i32, i32* %712
  %714 = inttoptr i64 %695 to i32*
  store i32 %713, i32* %714
  %715 = inttoptr i64 %710 to i32*
  %716 = load i32, i32* %715
  %717 = sext i32 %716 to i64
  %718 = mul nsw i64 %717, 96
  %719 = add i64 %718, ptrtoint (%sje_type* @sje to i64)
  %720 = inttoptr i64 %719 to i32*
  %721 = load i32, i32* %720
  %722 = load i64, i64* %14, align 8
  %723 = add i64 %722, -76
  %724 = inttoptr i64 %723 to i32*
  store i32 %721, i32* %724
  %725 = add i64 %722, -40
  %726 = inttoptr i64 %725 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  %729 = mul nsw i64 %728, 96
  %730 = load i64, i64* %8, align 8
  %731 = add i64 %729, %730
  %732 = add i64 %731, 32
  %733 = inttoptr i64 %732 to i32*
  %734 = load i32, i32* %733
  %735 = add i64 %722, -72
  %736 = inttoptr i64 %735 to i32*
  store i32 %734, i32* %736
  %737 = inttoptr i64 %735 to i32*
  %738 = load i32, i32* %737
  %739 = sext i32 %738 to i64
  %740 = mul nsw i64 %739, 96
  %741 = add i64 %740, %730
  %742 = inttoptr i64 %741 to i32*
  %743 = load i32, i32* %742
  %744 = load i64, i64* %14, align 8
  %745 = add i64 %744, -68
  %746 = inttoptr i64 %745 to i32*
  store i32 %743, i32* %746
  %747 = add i64 %744, -40
  %748 = inttoptr i64 %747 to i32*
  %749 = load i32, i32* %748
  %750 = sext i32 %749 to i64
  %751 = mul nsw i64 %750, 96
  %752 = load i64, i64* %8, align 8
  %753 = add i64 %751, %752
  %754 = add i64 %753, 64
  %755 = inttoptr i64 %754 to i32*
  %756 = load i32, i32* %755
  %757 = add i64 %744, -64
  %758 = inttoptr i64 %757 to i32*
  store i32 %756, i32* %758
  %759 = inttoptr i64 %757 to i32*
  %760 = load i32, i32* %759
  %761 = sext i32 %760 to i64
  %762 = mul nsw i64 %761, 96
  %763 = add i64 %762, %752
  %764 = inttoptr i64 %763 to i32*
  %765 = load i32, i32* %764
  %766 = load i64, i64* %14, align 8
  %767 = add i64 %766, -60
  %768 = inttoptr i64 %767 to i32*
  store i32 %765, i32* %768
  %769 = add i64 %766, -64
  %770 = inttoptr i64 %769 to i32*
  %771 = load i32, i32* %770
  %772 = sext i32 %771 to i64
  %773 = mul nsw i64 %772, 96
  %774 = load i64, i64* %8, align 8
  %775 = add i64 %773, %774
  %776 = add i64 %775, 32
  %777 = inttoptr i64 %776 to i32*
  %778 = load i32, i32* %777
  %779 = add i64 %766, -56
  %780 = inttoptr i64 %779 to i32*
  store i32 %778, i32* %780
  %781 = inttoptr i64 %779 to i32*
  %782 = load i32, i32* %781
  %783 = sext i32 %782 to i64
  %784 = mul nsw i64 %783, 96
  %785 = add i64 %784, %774
  %786 = inttoptr i64 %785 to i32*
  %787 = load i32, i32* %786
  %788 = load i64, i64* %14, align 8
  %789 = add i64 %788, -52
  %790 = inttoptr i64 %789 to i32*
  store i32 %787, i32* %790
  %791 = add i64 %256, 966
  %792 = add i64 %256, 186
  %793 = load i64, i64* %13, align 8, !tbaa !1240
  %794 = add i64 %793, -8
  %795 = inttoptr i64 %794 to i64*
  store i64 %792, i64* %795
  store i64 %794, i64* %13, align 8, !tbaa !1240
  %796 = tail call %struct.Memory* @sub_4033a0_merging(%struct.State* nonnull %0, i64 %791, %struct.Memory* %237)
  %797 = load i64, i64* %14, align 8
  %798 = add i64 %797, -104
  %799 = load i64, i64* %3, align 8
  %800 = inttoptr i64 %798 to i32*
  %801 = load i32, i32* %800
  %802 = add i32 %801, 1
  %803 = inttoptr i64 %798 to i32*
  store i32 %802, i32* %803
  %804 = add i64 %799, -198
  br label %block_402fce

block_402e02:                                     ; preds = %block_402dfb, %block_402de2
  %805 = phi i64 [ %674, %block_402dfb ], [ %180, %block_402de2 ]
  %806 = phi %struct.Memory* [ %175, %block_402dfb ], [ %175, %block_402de2 ]
  %807 = add i64 %181, -100
  %808 = inttoptr i64 %807 to i32*
  %809 = load i32, i32* %808
  %810 = add i32 %809, 1
  %811 = inttoptr i64 %807 to i32*
  store i32 %810, i32* %811
  %812 = add i64 %805, -42
  br label %block_402dd8

block_402e7c:                                     ; preds = %block_402e50
  %813 = inttoptr i64 %408 to i32*
  %814 = load i32, i32* %813
  %815 = sext i32 %814 to i64
  %816 = shl nsw i64 %815, 2
  %817 = add i64 %816, ptrtoint (%front_type* @front to i64)
  %818 = inttoptr i64 %817 to i32*
  store i32 1, i32* %818
  %819 = add i64 %578, 22
  %820 = inttoptr i64 %415 to i32*
  store i32 0, i32* %820
  br label %block_402e92
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_410f90_edgecopy_s(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_410f90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = load i64, i64* %16, align 8
  %21 = load i64, i64* %15, align 8, !tbaa !1240
  %22 = add i64 %21, -8
  %23 = inttoptr i64 %22 to i64*
  store i64 %20, i64* %23
  store i64 %22, i64* %16, align 8, !tbaa !1240
  %24 = add i64 %21, -104
  store i64 %24, i64* %15, align 8, !tbaa !1240
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 8, i64* %10, align 8, !tbaa !1240
  store i64 4294967295, i64* %12, align 8, !tbaa !1240
  %31 = add i64 %21, -88
  store i64 %31, i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %17, align 8, !tbaa !1240
  %32 = add i64 %21, -12
  %33 = load i32, i32* %9, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = add i64 %21, -16
  %36 = load i32, i32* %7, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = inttoptr i64 %35 to i32*
  %39 = load i32, i32* %38
  %40 = sext i32 %39 to i64
  %41 = mul nsw i64 %40, 96
  %42 = add i64 %41, ptrtoint (%sje_type* @sje to i64)
  %43 = load i64, i64* %16, align 8
  %44 = add i64 %43, -4
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45
  %47 = sext i32 %46 to i64
  %48 = shl nsw i64 %47, 4
  %49 = add i64 %48, %42
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50
  %52 = add i64 %43, -12
  %53 = inttoptr i64 %52 to i32*
  store i32 %51, i32* %53
  %54 = add i64 %43, -8
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %57, 96
  %59 = load i64, i64* %17, align 8
  %60 = add i64 %58, %59
  %61 = load i64, i64* %16, align 8
  %62 = add i64 %61, -4
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  %66 = shl nsw i64 %65, 4
  %67 = add i64 %66, %60
  %68 = add i64 %67, 8
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69
  %71 = add i64 %61, -16
  %72 = inttoptr i64 %71 to i32*
  store i32 %70, i32* %72
  %73 = add i64 %61, -8
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %76, 96
  %78 = load i64, i64* %17, align 8
  %79 = add i64 %77, %78
  %80 = load i64, i64* %16, align 8
  %81 = add i64 %80, -4
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = sext i32 %83 to i64
  %85 = shl nsw i64 %84, 4
  %86 = add i64 %85, %79
  store i64 %86, i64* %19, align 8, !tbaa !1240
  %87 = add i64 %86, 4
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  %90 = add i64 %80, -20
  %91 = inttoptr i64 %90 to i32*
  store i32 %89, i32* %91
  %92 = add i64 %80, -8
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = sext i32 %94 to i64
  %96 = mul nsw i64 %95, 96
  %97 = load i64, i64* %17, align 8
  %98 = add i64 %96, %97
  %99 = load i64, i64* %16, align 8
  %100 = add i64 %99, -4
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101
  %103 = sext i32 %102 to i64
  %104 = shl nsw i64 %103, 4
  store i64 %104, i64* %18, align 8, !tbaa !1240
  %105 = add i64 %104, %98
  store i64 %105, i64* %17, align 8, !tbaa !1240
  %106 = add i64 %105, 12
  %107 = inttoptr i64 %106 to i32*
  %108 = load i32, i32* %107
  %109 = add i64 %99, -24
  %110 = inttoptr i64 %109 to i32*
  store i32 %108, i32* %110
  %111 = load i64, i64* %11, align 8
  store i64 %111, i64* %14, align 8, !tbaa !1240
  %112 = load i32, i32* %5, align 4
  %113 = zext i32 %112 to i64
  store i64 %113, i64* %13, align 8, !tbaa !1240
  %114 = add i64 %1, 59664
  %115 = add i64 %1, 172
  %116 = load i64, i64* %15, align 8, !tbaa !1240
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118
  store i64 %117, i64* %15, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %114, %struct.Memory* %2)
  %120 = load i64, i64* %16, align 8
  %121 = add i64 %120, -84
  %122 = load i64, i64* %3, align 8
  %123 = add i64 %122, 7
  %124 = inttoptr i64 %121 to i32*
  store i32 1, i32* %124
  %125 = add i64 %120, -12
  %126 = add i64 %120, -4
  br label %block_411043

block_41127f:                                     ; preds = %block_411289, %block_411211
  %127 = phi i64 [ %815, %block_411211 ], [ %892, %block_411289 ]
  %128 = phi %struct.Memory* [ %548, %block_411211 ], [ %128, %block_411289 ]
  %129 = inttoptr i64 %814 to i32*
  %130 = load i32, i32* %129
  %131 = add i32 %130, -4
  %132 = lshr i32 %131, 31
  %133 = trunc i32 %132 to i8
  %134 = lshr i32 %130, 31
  %135 = xor i32 %132, %134
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = icmp ne i8 %133, 0
  %139 = xor i1 %138, %137
  %140 = select i1 %139, i64 10, i64 92
  %141 = add i64 %127, %140
  br i1 %139, label %block_411289, label %block_4112db

block_4115fd:                                     ; preds = %block_4115a2
  store i64 3, i64* %14, align 8, !tbaa !1240
  %142 = add i64 %315, -80
  store i64 %142, i64* %11, align 8, !tbaa !1240
  %143 = inttoptr i64 %321 to i32*
  %144 = load i32, i32* %143
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %13, align 8, !tbaa !1240
  %146 = add i64 %315, -8
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %12, align 8, !tbaa !1240
  %150 = add i64 %666, 419
  %151 = add i64 %666, 20
  %152 = load i64, i64* %15, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  store i64 %153, i64* %15, align 8, !tbaa !1240
  %155 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %150, %struct.Memory* %653)
  %156 = load i64, i64* %16, align 8
  %157 = add i64 %156, -80
  %158 = load i64, i64* %3, align 8
  store i64 %157, i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64* %10, align 8, !tbaa !1240
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %17, align 8, !tbaa !1240
  %159 = add i64 %156, -4
  %160 = inttoptr i64 %159 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  %163 = shl nsw i64 %162, 4
  store i64 %163, i64* %19, align 8, !tbaa !1240
  %164 = add i64 %163, add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 12)
  %165 = inttoptr i64 %164 to i32*
  %166 = load i32, i32* %165
  %167 = add i64 %156, -36
  %168 = inttoptr i64 %167 to i32*
  store i32 %166, i32* %168
  %169 = inttoptr i64 %159 to i32*
  %170 = load i32, i32* %169
  %171 = sext i32 %170 to i64
  %172 = shl nsw i64 %171, 4
  store i64 %172, i64* %18, align 8, !tbaa !1240
  %173 = load i64, i64* %17, align 8
  %174 = add i64 %172, %173
  %175 = add i64 %174, 12
  %176 = inttoptr i64 %175 to i32*
  %177 = load i32, i32* %176
  %178 = load i64, i64* %16, align 8
  %179 = add i64 %178, -28
  %180 = inttoptr i64 %179 to i32*
  store i32 %177, i32* %180
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181
  %183 = sext i32 %182 to i64
  %184 = mul nsw i64 %183, 24
  %185 = load i64, i64* %10, align 8
  %186 = add i64 %184, %185
  store i64 %186, i64* %10, align 8, !tbaa !1240
  %187 = add i64 %178, -36
  %188 = inttoptr i64 %187 to i32*
  %189 = load i32, i32* %188
  %190 = sext i32 %189 to i64
  store i64 %190, i64* %17, align 8, !tbaa !1240
  %191 = shl nsw i64 %190, 2
  %192 = add i64 %191, %186
  %193 = inttoptr i64 %192 to i32*
  %194 = load i32, i32* %193
  %195 = add i64 %178, -32
  %196 = inttoptr i64 %195 to i32*
  store i32 %194, i32* %196
  %197 = inttoptr i64 %195 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %14, align 8, !tbaa !1240
  %200 = inttoptr i64 %187 to i32*
  %201 = load i32, i32* %200
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %13, align 8, !tbaa !1240
  %203 = load i64, i64* %16, align 8
  %204 = add i64 %203, -8
  %205 = inttoptr i64 %204 to i32*
  %206 = load i32, i32* %205
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %12, align 8, !tbaa !1240
  %208 = add i64 %158, 399
  %209 = add i64 %158, 106
  %210 = load i64, i64* %15, align 8, !tbaa !1240
  %211 = add i64 %210, -8
  %212 = inttoptr i64 %211 to i64*
  store i64 %209, i64* %212
  store i64 %211, i64* %15, align 8, !tbaa !1240
  %213 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %208, %struct.Memory* %155)
  %214 = load i64, i64* %15, align 8
  %215 = add i64 %214, 96
  %216 = icmp ugt i64 %214, -97
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %25, align 1, !tbaa !1248
  %218 = trunc i64 %215 to i32
  %219 = and i32 %218, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #11
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %26, align 1, !tbaa !1261
  %224 = xor i64 %215, %214
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  store i8 %227, i8* %27, align 1, !tbaa !1262
  %228 = icmp eq i64 %215, 0
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %28, align 1, !tbaa !1263
  %230 = lshr i64 %215, 63
  %231 = trunc i64 %230 to i8
  store i8 %231, i8* %29, align 1, !tbaa !1264
  %232 = lshr i64 %214, 63
  %233 = xor i64 %230, %232
  %234 = add nuw nsw i64 %233, %230
  %235 = icmp eq i64 %234, 2
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %30, align 1, !tbaa !1265
  %237 = add i64 %214, 104
  %238 = inttoptr i64 %215 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %16, align 8, !tbaa !1240
  %240 = inttoptr i64 %237 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %3, align 8, !tbaa !1240
  %242 = add i64 %214, 112
  store i64 %242, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %213

block_41147f:                                     ; preds = %block_411429
  store i64 2, i64* %14, align 8, !tbaa !1240
  %243 = add i64 %511, -80
  store i64 %243, i64* %11, align 8, !tbaa !1240
  %244 = inttoptr i64 %518 to i32*
  %245 = load i32, i32* %244
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %13, align 8, !tbaa !1240
  %247 = add i64 %511, -8
  %248 = inttoptr i64 %247 to i32*
  %249 = load i32, i32* %248
  %250 = zext i32 %249 to i64
  store i64 %250, i64* %12, align 8, !tbaa !1240
  %251 = add i64 %651, 801
  %252 = add i64 %651, 20
  %253 = load i64, i64* %15, align 8, !tbaa !1240
  %254 = add i64 %253, -8
  %255 = inttoptr i64 %254 to i64*
  store i64 %252, i64* %255
  store i64 %254, i64* %15, align 8, !tbaa !1240
  %256 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %251, %struct.Memory* %638)
  %257 = load i64, i64* %16, align 8
  %258 = add i64 %257, -80
  %259 = load i64, i64* %3, align 8
  store i64 %258, i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64* %10, align 8, !tbaa !1240
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %17, align 8, !tbaa !1240
  %260 = add i64 %257, -4
  %261 = inttoptr i64 %260 to i32*
  %262 = load i32, i32* %261
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 4
  store i64 %264, i64* %19, align 8, !tbaa !1240
  %265 = add i64 %264, add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 8)
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266
  %268 = add i64 %257, -36
  %269 = inttoptr i64 %268 to i32*
  store i32 %267, i32* %269
  %270 = inttoptr i64 %260 to i32*
  %271 = load i32, i32* %270
  %272 = sext i32 %271 to i64
  %273 = shl nsw i64 %272, 4
  store i64 %273, i64* %18, align 8, !tbaa !1240
  %274 = load i64, i64* %17, align 8
  %275 = add i64 %273, %274
  %276 = add i64 %275, 8
  %277 = inttoptr i64 %276 to i32*
  %278 = load i32, i32* %277
  %279 = load i64, i64* %16, align 8
  %280 = add i64 %279, -28
  %281 = inttoptr i64 %280 to i32*
  store i32 %278, i32* %281
  %282 = inttoptr i64 %280 to i32*
  %283 = load i32, i32* %282
  %284 = sext i32 %283 to i64
  %285 = mul nsw i64 %284, 24
  %286 = load i64, i64* %10, align 8
  %287 = add i64 %285, %286
  store i64 %287, i64* %10, align 8, !tbaa !1240
  %288 = add i64 %279, -36
  %289 = inttoptr i64 %288 to i32*
  %290 = load i32, i32* %289
  %291 = sext i32 %290 to i64
  store i64 %291, i64* %17, align 8, !tbaa !1240
  %292 = shl nsw i64 %291, 2
  %293 = add i64 %292, %287
  %294 = inttoptr i64 %293 to i32*
  %295 = load i32, i32* %294
  %296 = add i64 %279, -32
  %297 = inttoptr i64 %296 to i32*
  store i32 %295, i32* %297
  %298 = inttoptr i64 %296 to i32*
  %299 = load i32, i32* %298
  %300 = zext i32 %299 to i64
  store i64 %300, i64* %14, align 8, !tbaa !1240
  %301 = inttoptr i64 %288 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %13, align 8, !tbaa !1240
  %304 = load i64, i64* %16, align 8
  %305 = add i64 %304, -8
  %306 = inttoptr i64 %305 to i32*
  %307 = load i32, i32* %306
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %12, align 8, !tbaa !1240
  %309 = add i64 %259, 781
  %310 = add i64 %259, 106
  %311 = load i64, i64* %15, align 8, !tbaa !1240
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313
  store i64 %312, i64* %15, align 8, !tbaa !1240
  %314 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %309, %struct.Memory* %256)
  %315 = load i64, i64* %16, align 8
  %316 = add i64 %315, -84
  %317 = load i64, i64* %3, align 8
  %318 = add i64 %317, 7
  %319 = inttoptr i64 %316 to i32*
  store i32 1, i32* %319
  %320 = add i64 %315, -12
  %321 = add i64 %315, -4
  br label %block_411504

block_411564:                                     ; preds = %block_411504
  store i64 %921, i64* %10, align 8, !tbaa !1240
  %322 = add i64 %921, 180
  %323 = inttoptr i64 %322 to i32*
  %324 = load i32, i32* %323
  %325 = add i64 %315, -68
  %326 = inttoptr i64 %325 to i32*
  store i32 %324, i32* %326
  %327 = add i64 %906, 62
  %328 = inttoptr i64 %316 to i32*
  store i32 0, i32* %328
  %329 = add i64 %315, -20
  %330 = add i64 %315, -64
  br label %block_4115a2

block_411360:                                     ; preds = %block_41136a, %block_4112db
  %331 = phi i64 [ %424, %block_4112db ], [ %846, %block_41136a ]
  %332 = phi %struct.Memory* [ %420, %block_4112db ], [ %332, %block_41136a ]
  %333 = inttoptr i64 %422 to i32*
  %334 = load i32, i32* %333
  %335 = add i32 %334, -4
  %336 = lshr i32 %335, 31
  %337 = lshr i32 %334, 31
  %338 = xor i32 %336, %337
  %339 = add nuw nsw i32 %338, %337
  %340 = icmp eq i32 %339, 2
  %341 = icmp ne i32 %336, 0
  %342 = xor i1 %341, %340
  %343 = select i1 %342, i64 10, i64 91
  %344 = add i64 %331, %343
  %345 = inttoptr i64 %426 to i32*
  %346 = load i32, i32* %345
  %347 = sext i32 %346 to i64
  %348 = mul nsw i64 %347, 2400
  br i1 %342, label %block_41136a, label %block_4113bb

block_4112db:                                     ; preds = %block_41127f
  store i64 1, i64* %14, align 8, !tbaa !1240
  %349 = add i64 %811, -80
  store i64 %349, i64* %11, align 8, !tbaa !1240
  %350 = inttoptr i64 %818 to i32*
  %351 = load i32, i32* %350
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %13, align 8, !tbaa !1240
  %353 = add i64 %811, -8
  %354 = inttoptr i64 %353 to i32*
  %355 = load i32, i32* %354
  %356 = zext i32 %355 to i64
  store i64 %356, i64* %12, align 8, !tbaa !1240
  %357 = add i64 %141, 1221
  %358 = add i64 %141, 20
  %359 = load i64, i64* %15, align 8, !tbaa !1240
  %360 = add i64 %359, -8
  %361 = inttoptr i64 %360 to i64*
  store i64 %358, i64* %361
  store i64 %360, i64* %15, align 8, !tbaa !1240
  %362 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %357, %struct.Memory* %128)
  %363 = load i64, i64* %16, align 8
  %364 = add i64 %363, -80
  %365 = load i64, i64* %3, align 8
  store i64 %364, i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64* %10, align 8, !tbaa !1240
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %17, align 8, !tbaa !1240
  %366 = add i64 %363, -4
  %367 = inttoptr i64 %366 to i32*
  %368 = load i32, i32* %367
  %369 = sext i32 %368 to i64
  %370 = shl nsw i64 %369, 4
  store i64 %370, i64* %19, align 8, !tbaa !1240
  %371 = add i64 %370, add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 4)
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = add i64 %363, -36
  %375 = inttoptr i64 %374 to i32*
  store i32 %373, i32* %375
  %376 = inttoptr i64 %366 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  %379 = shl nsw i64 %378, 4
  store i64 %379, i64* %18, align 8, !tbaa !1240
  %380 = load i64, i64* %17, align 8
  %381 = add i64 %379, %380
  %382 = add i64 %381, 4
  %383 = inttoptr i64 %382 to i32*
  %384 = load i32, i32* %383
  %385 = load i64, i64* %16, align 8
  %386 = add i64 %385, -28
  %387 = inttoptr i64 %386 to i32*
  store i32 %384, i32* %387
  %388 = inttoptr i64 %386 to i32*
  %389 = load i32, i32* %388
  %390 = sext i32 %389 to i64
  %391 = mul nsw i64 %390, 24
  %392 = load i64, i64* %10, align 8
  %393 = add i64 %391, %392
  store i64 %393, i64* %10, align 8, !tbaa !1240
  %394 = add i64 %385, -36
  %395 = inttoptr i64 %394 to i32*
  %396 = load i32, i32* %395
  %397 = sext i32 %396 to i64
  store i64 %397, i64* %17, align 8, !tbaa !1240
  %398 = shl nsw i64 %397, 2
  %399 = add i64 %398, %393
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400
  %402 = add i64 %385, -32
  %403 = inttoptr i64 %402 to i32*
  store i32 %401, i32* %403
  %404 = inttoptr i64 %402 to i32*
  %405 = load i32, i32* %404
  %406 = zext i32 %405 to i64
  store i64 %406, i64* %14, align 8, !tbaa !1240
  %407 = inttoptr i64 %394 to i32*
  %408 = load i32, i32* %407
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %13, align 8, !tbaa !1240
  %410 = load i64, i64* %16, align 8
  %411 = add i64 %410, -8
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %12, align 8, !tbaa !1240
  %415 = add i64 %365, 1201
  %416 = add i64 %365, 106
  %417 = load i64, i64* %15, align 8, !tbaa !1240
  %418 = add i64 %417, -8
  %419 = inttoptr i64 %418 to i64*
  store i64 %416, i64* %419
  store i64 %418, i64* %15, align 8, !tbaa !1240
  %420 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %415, %struct.Memory* %362)
  %421 = load i64, i64* %16, align 8
  %422 = add i64 %421, -84
  %423 = load i64, i64* %3, align 8
  %424 = add i64 %423, 7
  %425 = inttoptr i64 %422 to i32*
  store i32 1, i32* %425
  %426 = add i64 %421, -20
  %427 = add i64 %421, -4
  br label %block_411360

block_41104d:                                     ; preds = %block_411043
  %428 = sext i32 %447 to i64
  %429 = shl nsw i64 %428, 2
  %430 = add i64 %429, %472
  %431 = inttoptr i64 %430 to i32*
  %432 = load i32, i32* %431
  %433 = add i32 %447, -1
  %434 = sext i32 %433 to i64
  %435 = shl nsw i64 %434, 2
  %436 = add nsw i64 %435, -80
  %437 = add i64 %436, %120
  %438 = inttoptr i64 %437 to i32*
  store i32 %432, i32* %438
  %439 = inttoptr i64 %121 to i32*
  %440 = load i32, i32* %439
  %441 = add i32 %440, 1
  %442 = inttoptr i64 %121 to i32*
  store i32 %441, i32* %442
  %443 = add i64 %457, -10
  br label %block_411043

block_411043:                                     ; preds = %block_41104d, %block_410f90
  %444 = phi i64 [ %123, %block_410f90 ], [ %443, %block_41104d ]
  %445 = phi %struct.Memory* [ %119, %block_410f90 ], [ %445, %block_41104d ]
  %446 = inttoptr i64 %121 to i32*
  %447 = load i32, i32* %446
  %448 = add i32 %447, -4
  %449 = lshr i32 %448, 31
  %450 = lshr i32 %447, 31
  %451 = xor i32 %449, %450
  %452 = add nuw nsw i32 %451, %450
  %453 = icmp eq i32 %452, 2
  %454 = icmp ne i32 %449, 0
  %455 = xor i1 %454, %453
  %456 = select i1 %455, i64 10, i64 90
  %457 = add i64 %444, %456
  %458 = inttoptr i64 %125 to i32*
  %459 = load i32, i32* %458
  %460 = sext i32 %459 to i64
  %461 = mul nsw i64 %460, 2400
  %462 = add i64 %461, ptrtoint (%idmo_type* @idmo to i64)
  %463 = inttoptr i64 %126 to i32*
  %464 = load i32, i32* %463
  %465 = sext i32 %464 to i64
  %466 = shl nsw i64 %465, 2
  %467 = add i64 %466, ptrtoint (%jjface_type* @jjface to i64)
  %468 = inttoptr i64 %467 to i32*
  %469 = load i32, i32* %468
  %470 = sext i32 %469 to i64
  %471 = mul nsw i64 %470, 400
  %472 = add i64 %471, %462
  br i1 %455, label %block_41104d, label %block_41109d

block_4113bb:                                     ; preds = %block_411360
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %10, align 8, !tbaa !1240
  %473 = add i64 %348, ptrtoint (%idmo_type* @idmo to i64)
  %474 = inttoptr i64 %427 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  %477 = shl nsw i64 %476, 2
  %478 = add i64 %477, ptrtoint (%jjface_type* @jjface to i64)
  %479 = inttoptr i64 %478 to i32*
  %480 = load i32, i32* %479
  %481 = sext i32 %480 to i64
  %482 = mul nsw i64 %481, 400
  %483 = add i64 %482, %473
  %484 = add i64 %483, 396
  %485 = inttoptr i64 %484 to i32*
  %486 = load i32, i32* %485
  %487 = load i64, i64* %16, align 8
  %488 = add i64 %487, -68
  %489 = inttoptr i64 %488 to i32*
  store i32 %486, i32* %489
  %490 = add i64 %487, -24
  %491 = inttoptr i64 %490 to i32*
  %492 = load i32, i32* %491
  %493 = sext i32 %492 to i64
  %494 = mul nsw i64 %493, 2400
  %495 = load i64, i64* %10, align 8
  %496 = add i64 %494, %495
  %497 = add i64 %487, -4
  %498 = inttoptr i64 %497 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  %501 = shl nsw i64 %500, 2
  %502 = add i64 %501, ptrtoint (%jjface_type* @jjface to i64)
  %503 = inttoptr i64 %502 to i32*
  %504 = load i32, i32* %503
  %505 = sext i32 %504 to i64
  %506 = mul nsw i64 %505, 400
  %507 = add i64 %506, %496
  store i64 %507, i64* %10, align 8, !tbaa !1240
  %508 = add i64 %507, 180
  %509 = inttoptr i64 %508 to i32*
  %510 = load i32, i32* %509
  %511 = load i64, i64* %16, align 8
  %512 = add i64 %511, -64
  %513 = inttoptr i64 %512 to i32*
  store i32 %510, i32* %513
  %514 = add i64 %511, -84
  %515 = add i64 %344, 110
  %516 = inttoptr i64 %514 to i32*
  store i32 1, i32* %516
  %517 = add i64 %511, -24
  %518 = add i64 %511, -4
  br label %block_411429

block_4110e5:                                     ; preds = %block_4110db
  %519 = inttoptr i64 %929 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = mul nsw i64 %521, 2400
  %523 = add i64 %522, ptrtoint (%idmo_type* @idmo to i64)
  %524 = inttoptr i64 %126 to i32*
  %525 = load i32, i32* %524
  %526 = sext i32 %525 to i64
  %527 = shl nsw i64 %526, 2
  %528 = add i64 %527, ptrtoint (%jjface_type* @jjface to i64)
  %529 = inttoptr i64 %528 to i32*
  %530 = load i32, i32* %529
  %531 = sext i32 %530 to i64
  %532 = mul nsw i64 %531, 400
  %533 = add i64 %532, %523
  %534 = sext i32 %626 to i64
  %535 = shl nsw i64 %534, 2
  %536 = add i64 %535, %533
  %537 = inttoptr i64 %536 to i32*
  %538 = load i32, i32* %537
  %539 = add i64 %930, %535
  %540 = inttoptr i64 %539 to i32*
  store i32 %538, i32* %540
  %541 = inttoptr i64 %121 to i32*
  %542 = load i32, i32* %541
  %543 = add i32 %542, 1
  %544 = zext i32 %543 to i64
  store i64 %544, i64* %10, align 8, !tbaa !1240
  %545 = inttoptr i64 %121 to i32*
  store i32 %543, i32* %545
  %546 = add i64 %636, -10
  br label %block_4110db

block_4111b0:                                     ; preds = %block_4111ba, %block_411130
  %547 = phi i64 [ %741, %block_411130 ], [ %772, %block_4111ba ]
  %548 = phi %struct.Memory* [ %737, %block_411130 ], [ %548, %block_4111ba ]
  %549 = inttoptr i64 %739 to i32*
  %550 = load i32, i32* %549
  %551 = add i32 %550, -4
  %552 = lshr i32 %551, 31
  %553 = lshr i32 %550, 31
  %554 = xor i32 %552, %553
  %555 = add nuw nsw i32 %554, %553
  %556 = icmp eq i32 %555, 2
  %557 = icmp ne i32 %552, 0
  %558 = xor i1 %557, %556
  %559 = select i1 %558, i64 10, i64 97
  %560 = add i64 %547, %559
  %561 = inttoptr i64 %743 to i32*
  %562 = load i32, i32* %561
  %563 = sext i32 %562 to i64
  %564 = mul nsw i64 %563, 2400
  br i1 %558, label %block_4111ba, label %block_411211

block_411433:                                     ; preds = %block_411429
  %565 = inttoptr i64 %517 to i32*
  %566 = load i32, i32* %565
  %567 = sext i32 %566 to i64
  %568 = mul nsw i64 %567, 2400
  %569 = add i64 %568, ptrtoint (%idmo_type* @idmo to i64)
  %570 = inttoptr i64 %518 to i32*
  %571 = load i32, i32* %570
  %572 = sext i32 %571 to i64
  %573 = shl nsw i64 %572, 2
  %574 = add i64 %573, ptrtoint (%jjface_type* @jjface to i64)
  %575 = inttoptr i64 %574 to i32*
  %576 = load i32, i32* %575
  %577 = sext i32 %576 to i64
  %578 = mul nsw i64 %577, 400
  %579 = add i64 %578, %569
  %580 = sext i32 %640 to i64
  %581 = shl nsw i64 %580, 2
  %582 = add i64 %579, 80
  %583 = add i64 %582, %581
  %584 = inttoptr i64 %583 to i32*
  %585 = load i32, i32* %584
  %586 = add i64 %512, %581
  %587 = inttoptr i64 %586 to i32*
  store i32 %585, i32* %587
  %588 = inttoptr i64 %514 to i32*
  %589 = load i32, i32* %588
  %590 = add i32 %589, 1
  %591 = zext i32 %590 to i64
  store i64 %591, i64* %10, align 8, !tbaa !1240
  %592 = inttoptr i64 %514 to i32*
  store i32 %590, i32* %592
  %593 = add i64 %651, -10
  br label %block_411429

block_4115ac:                                     ; preds = %block_4115a2
  %594 = inttoptr i64 %329 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  %597 = mul nsw i64 %596, 2400
  %598 = add i64 %597, ptrtoint (%idmo_type* @idmo to i64)
  %599 = inttoptr i64 %321 to i32*
  %600 = load i32, i32* %599
  %601 = sext i32 %600 to i64
  %602 = shl nsw i64 %601, 2
  %603 = add i64 %602, ptrtoint (%jjface_type* @jjface to i64)
  %604 = inttoptr i64 %603 to i32*
  %605 = load i32, i32* %604
  %606 = sext i32 %605 to i64
  %607 = mul nsw i64 %606, 400
  %608 = add i64 %607, %598
  %609 = sext i32 %655 to i64
  %610 = mul nsw i64 %609, 20
  %611 = add i64 %610, %608
  %612 = inttoptr i64 %611 to i32*
  %613 = load i32, i32* %612
  %614 = shl nsw i64 %609, 2
  %615 = add i64 %330, %614
  %616 = inttoptr i64 %615 to i32*
  store i32 %613, i32* %616
  %617 = inttoptr i64 %316 to i32*
  %618 = load i32, i32* %617
  %619 = add i32 %618, 1
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %10, align 8, !tbaa !1240
  %621 = inttoptr i64 %316 to i32*
  store i32 %619, i32* %621
  %622 = add i64 %666, -10
  br label %block_4115a2

block_4110db:                                     ; preds = %block_41109d, %block_4110e5
  %623 = phi i64 [ %927, %block_41109d ], [ %546, %block_4110e5 ]
  %624 = phi %struct.Memory* [ %445, %block_41109d ], [ %624, %block_4110e5 ]
  %625 = inttoptr i64 %121 to i32*
  %626 = load i32, i32* %625
  %627 = add i32 %626, -4
  %628 = lshr i32 %627, 31
  %629 = lshr i32 %626, 31
  %630 = xor i32 %628, %629
  %631 = add nuw nsw i32 %630, %629
  %632 = icmp eq i32 %631, 2
  %633 = icmp ne i32 %628, 0
  %634 = xor i1 %633, %632
  %635 = select i1 %634, i64 10, i64 85
  %636 = add i64 %623, %635
  br i1 %634, label %block_4110e5, label %block_411130

block_411429:                                     ; preds = %block_411433, %block_4113bb
  %637 = phi i64 [ %515, %block_4113bb ], [ %593, %block_411433 ]
  %638 = phi %struct.Memory* [ %332, %block_4113bb ], [ %638, %block_411433 ]
  %639 = inttoptr i64 %514 to i32*
  %640 = load i32, i32* %639
  %641 = add i32 %640, -4
  %642 = lshr i32 %641, 31
  %643 = trunc i32 %642 to i8
  %644 = lshr i32 %640, 31
  %645 = xor i32 %642, %644
  %646 = add nuw nsw i32 %645, %644
  %647 = icmp eq i32 %646, 2
  %648 = icmp ne i8 %643, 0
  %649 = xor i1 %648, %647
  %650 = select i1 %649, i64 10, i64 86
  %651 = add i64 %637, %650
  br i1 %649, label %block_411433, label %block_41147f

block_4115a2:                                     ; preds = %block_4115ac, %block_411564
  %652 = phi i64 [ %327, %block_411564 ], [ %622, %block_4115ac ]
  %653 = phi %struct.Memory* [ %894, %block_411564 ], [ %653, %block_4115ac ]
  %654 = inttoptr i64 %316 to i32*
  %655 = load i32, i32* %654
  %656 = add i32 %655, -4
  %657 = lshr i32 %656, 31
  %658 = trunc i32 %657 to i8
  %659 = lshr i32 %655, 31
  %660 = xor i32 %657, %659
  %661 = add nuw nsw i32 %660, %659
  %662 = icmp eq i32 %661, 2
  %663 = icmp ne i8 %658, 0
  %664 = xor i1 %663, %662
  %665 = select i1 %664, i64 10, i64 91
  %666 = add i64 %652, %665
  br i1 %664, label %block_4115ac, label %block_4115fd

block_411130:                                     ; preds = %block_4110db
  store i64 0, i64* %14, align 8, !tbaa !1240
  %667 = add i64 %120, -80
  store i64 %667, i64* %11, align 8, !tbaa !1240
  %668 = inttoptr i64 %126 to i32*
  %669 = load i32, i32* %668
  %670 = zext i32 %669 to i64
  store i64 %670, i64* %13, align 8, !tbaa !1240
  %671 = add i64 %120, -8
  %672 = inttoptr i64 %671 to i32*
  %673 = load i32, i32* %672
  %674 = zext i32 %673 to i64
  store i64 %674, i64* %12, align 8, !tbaa !1240
  %675 = add i64 %636, 1648
  %676 = add i64 %636, 17
  %677 = load i64, i64* %15, align 8, !tbaa !1240
  %678 = add i64 %677, -8
  %679 = inttoptr i64 %678 to i64*
  store i64 %676, i64* %679
  store i64 %678, i64* %15, align 8, !tbaa !1240
  %680 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %675, %struct.Memory* %624)
  %681 = load i64, i64* %16, align 8
  %682 = add i64 %681, -80
  %683 = load i64, i64* %3, align 8
  store i64 %682, i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64* %10, align 8, !tbaa !1240
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %17, align 8, !tbaa !1240
  %684 = add i64 %681, -4
  %685 = inttoptr i64 %684 to i32*
  %686 = load i32, i32* %685
  %687 = sext i32 %686 to i64
  %688 = shl nsw i64 %687, 4
  store i64 %688, i64* %19, align 8, !tbaa !1240
  %689 = add i64 %688, ptrtoint (%f_e_ef_type* @f_e_ef to i64)
  %690 = inttoptr i64 %689 to i32*
  %691 = load i32, i32* %690
  %692 = add i64 %681, -36
  %693 = inttoptr i64 %692 to i32*
  store i32 %691, i32* %693
  %694 = inttoptr i64 %684 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  %697 = shl nsw i64 %696, 4
  store i64 %697, i64* %18, align 8, !tbaa !1240
  %698 = load i64, i64* %17, align 8
  %699 = add i64 %697, %698
  %700 = inttoptr i64 %699 to i32*
  %701 = load i32, i32* %700
  %702 = load i64, i64* %16, align 8
  %703 = add i64 %702, -28
  %704 = inttoptr i64 %703 to i32*
  store i32 %701, i32* %704
  %705 = inttoptr i64 %703 to i32*
  %706 = load i32, i32* %705
  %707 = sext i32 %706 to i64
  %708 = mul nsw i64 %707, 24
  %709 = load i64, i64* %10, align 8
  %710 = add i64 %708, %709
  store i64 %710, i64* %10, align 8, !tbaa !1240
  %711 = add i64 %702, -36
  %712 = inttoptr i64 %711 to i32*
  %713 = load i32, i32* %712
  %714 = sext i32 %713 to i64
  store i64 %714, i64* %17, align 8, !tbaa !1240
  %715 = shl nsw i64 %714, 2
  %716 = add i64 %715, %710
  %717 = inttoptr i64 %716 to i32*
  %718 = load i32, i32* %717
  %719 = add i64 %702, -32
  %720 = inttoptr i64 %719 to i32*
  store i32 %718, i32* %720
  %721 = inttoptr i64 %719 to i32*
  %722 = load i32, i32* %721
  %723 = zext i32 %722 to i64
  store i64 %723, i64* %14, align 8, !tbaa !1240
  %724 = inttoptr i64 %711 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %13, align 8, !tbaa !1240
  %727 = load i64, i64* %16, align 8
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i32*
  %730 = load i32, i32* %729
  %731 = zext i32 %730 to i64
  store i64 %731, i64* %12, align 8, !tbaa !1240
  %732 = add i64 %683, 1631
  %733 = add i64 %683, 104
  %734 = load i64, i64* %15, align 8, !tbaa !1240
  %735 = add i64 %734, -8
  %736 = inttoptr i64 %735 to i64*
  store i64 %733, i64* %736
  store i64 %735, i64* %15, align 8, !tbaa !1240
  %737 = tail call %struct.Memory* @sub_4117a0_mor_s_e(%struct.State* nonnull %0, i64 %732, %struct.Memory* %680)
  %738 = load i64, i64* %16, align 8
  %739 = add i64 %738, -84
  %740 = load i64, i64* %3, align 8
  %741 = add i64 %740, 7
  %742 = inttoptr i64 %739 to i32*
  store i32 1, i32* %742
  %743 = add i64 %738, -16
  %744 = add i64 %738, -4
  br label %block_4111b0

block_4111ba:                                     ; preds = %block_4111b0
  %745 = add i64 %564, ptrtoint (%idmo_type* @idmo to i64)
  %746 = inttoptr i64 %744 to i32*
  %747 = load i32, i32* %746
  %748 = sext i32 %747 to i64
  %749 = shl nsw i64 %748, 2
  %750 = add i64 %749, ptrtoint (%jjface_type* @jjface to i64)
  %751 = inttoptr i64 %750 to i32*
  %752 = load i32, i32* %751
  %753 = sext i32 %752 to i64
  %754 = mul nsw i64 %753, 400
  %755 = add i64 %754, %745
  %756 = sext i32 %550 to i64
  %757 = mul nsw i64 %756, 20
  %758 = add i64 %757, %755
  %759 = add i64 %758, 16
  %760 = inttoptr i64 %759 to i32*
  %761 = load i32, i32* %760
  %762 = add i32 %550, -1
  %763 = sext i32 %762 to i64
  %764 = shl nsw i64 %763, 2
  %765 = add nsw i64 %764, -80
  %766 = add i64 %765, %738
  %767 = inttoptr i64 %766 to i32*
  store i32 %761, i32* %767
  %768 = inttoptr i64 %739 to i32*
  %769 = load i32, i32* %768
  %770 = add i32 %769, 1
  %771 = inttoptr i64 %739 to i32*
  store i32 %770, i32* %771
  %772 = add i64 %560, -10
  br label %block_4111b0

block_411211:                                     ; preds = %block_4111b0
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %10, align 8, !tbaa !1240
  %773 = add i64 %564, ptrtoint (%idmo_type* @idmo to i64)
  %774 = inttoptr i64 %744 to i32*
  %775 = load i32, i32* %774
  %776 = sext i32 %775 to i64
  %777 = shl nsw i64 %776, 2
  %778 = add i64 %777, ptrtoint (%jjface_type* @jjface to i64)
  %779 = inttoptr i64 %778 to i32*
  %780 = load i32, i32* %779
  %781 = sext i32 %780 to i64
  %782 = mul nsw i64 %781, 400
  %783 = add i64 %782, %773
  %784 = add i64 %783, 396
  %785 = inttoptr i64 %784 to i32*
  %786 = load i32, i32* %785
  %787 = load i64, i64* %16, align 8
  %788 = add i64 %787, -68
  %789 = inttoptr i64 %788 to i32*
  store i32 %786, i32* %789
  %790 = add i64 %787, -24
  %791 = inttoptr i64 %790 to i32*
  %792 = load i32, i32* %791
  %793 = sext i32 %792 to i64
  %794 = mul nsw i64 %793, 2400
  %795 = load i64, i64* %10, align 8
  %796 = add i64 %794, %795
  %797 = add i64 %787, -4
  %798 = inttoptr i64 %797 to i32*
  %799 = load i32, i32* %798
  %800 = sext i32 %799 to i64
  %801 = shl nsw i64 %800, 2
  %802 = add i64 %801, ptrtoint (%jjface_type* @jjface to i64)
  %803 = inttoptr i64 %802 to i32*
  %804 = load i32, i32* %803
  %805 = sext i32 %804 to i64
  %806 = mul nsw i64 %805, 400
  %807 = add i64 %806, %796
  store i64 %807, i64* %10, align 8, !tbaa !1240
  %808 = add i64 %807, 216
  %809 = inttoptr i64 %808 to i32*
  %810 = load i32, i32* %809
  %811 = load i64, i64* %16, align 8
  %812 = add i64 %811, -64
  %813 = inttoptr i64 %812 to i32*
  store i32 %810, i32* %813
  %814 = add i64 %811, -84
  %815 = add i64 %560, 110
  %816 = inttoptr i64 %814 to i32*
  store i32 1, i32* %816
  %817 = add i64 %811, -24
  %818 = add i64 %811, -4
  br label %block_41127f

block_41136a:                                     ; preds = %block_411360
  %819 = add i64 %348, ptrtoint (%idmo_type* @idmo to i64)
  %820 = inttoptr i64 %427 to i32*
  %821 = load i32, i32* %820
  %822 = sext i32 %821 to i64
  %823 = shl nsw i64 %822, 2
  %824 = add i64 %823, ptrtoint (%jjface_type* @jjface to i64)
  %825 = inttoptr i64 %824 to i32*
  %826 = load i32, i32* %825
  %827 = sext i32 %826 to i64
  %828 = mul nsw i64 %827, 400
  %829 = add i64 %828, %819
  %830 = sext i32 %334 to i64
  %831 = shl nsw i64 %830, 2
  %832 = add i64 %829, 80
  %833 = add i64 %832, %831
  %834 = inttoptr i64 %833 to i32*
  %835 = load i32, i32* %834
  %836 = add i32 %334, -1
  %837 = sext i32 %836 to i64
  %838 = shl nsw i64 %837, 2
  %839 = add nsw i64 %838, -80
  %840 = add i64 %839, %421
  %841 = inttoptr i64 %840 to i32*
  store i32 %835, i32* %841
  %842 = inttoptr i64 %422 to i32*
  %843 = load i32, i32* %842
  %844 = add i32 %843, 1
  %845 = inttoptr i64 %422 to i32*
  store i32 %844, i32* %845
  %846 = add i64 %344, -10
  br label %block_411360

block_41150e:                                     ; preds = %block_411504
  %847 = sext i32 %896 to i64
  %848 = mul nsw i64 %847, 20
  %849 = add i64 %848, %921
  %850 = inttoptr i64 %849 to i32*
  %851 = load i32, i32* %850
  %852 = add i32 %896, -1
  %853 = sext i32 %852 to i64
  %854 = shl nsw i64 %853, 2
  %855 = add nsw i64 %854, -80
  %856 = add i64 %855, %315
  %857 = inttoptr i64 %856 to i32*
  store i32 %851, i32* %857
  %858 = inttoptr i64 %316 to i32*
  %859 = load i32, i32* %858
  %860 = add i32 %859, 1
  %861 = inttoptr i64 %316 to i32*
  store i32 %860, i32* %861
  %862 = add i64 %906, -10
  br label %block_411504

block_411289:                                     ; preds = %block_41127f
  %863 = inttoptr i64 %817 to i32*
  %864 = load i32, i32* %863
  %865 = sext i32 %864 to i64
  %866 = mul nsw i64 %865, 2400
  %867 = add i64 %866, ptrtoint (%idmo_type* @idmo to i64)
  %868 = inttoptr i64 %818 to i32*
  %869 = load i32, i32* %868
  %870 = sext i32 %869 to i64
  %871 = shl nsw i64 %870, 2
  %872 = add i64 %871, ptrtoint (%jjface_type* @jjface to i64)
  %873 = inttoptr i64 %872 to i32*
  %874 = load i32, i32* %873
  %875 = sext i32 %874 to i64
  %876 = mul nsw i64 %875, 400
  %877 = add i64 %876, %867
  %878 = sext i32 %130 to i64
  %879 = mul nsw i64 %878, 20
  %880 = add i64 %879, %877
  %881 = add i64 %880, 16
  %882 = inttoptr i64 %881 to i32*
  %883 = load i32, i32* %882
  %884 = shl nsw i64 %878, 2
  %885 = add i64 %812, %884
  %886 = inttoptr i64 %885 to i32*
  store i32 %883, i32* %886
  %887 = inttoptr i64 %814 to i32*
  %888 = load i32, i32* %887
  %889 = add i32 %888, 1
  %890 = zext i32 %889 to i64
  store i64 %890, i64* %10, align 8, !tbaa !1240
  %891 = inttoptr i64 %814 to i32*
  store i32 %889, i32* %891
  %892 = add i64 %141, -10
  br label %block_41127f

block_411504:                                     ; preds = %block_41150e, %block_41147f
  %893 = phi i64 [ %318, %block_41147f ], [ %862, %block_41150e ]
  %894 = phi %struct.Memory* [ %314, %block_41147f ], [ %894, %block_41150e ]
  %895 = inttoptr i64 %316 to i32*
  %896 = load i32, i32* %895
  %897 = add i32 %896, -4
  %898 = lshr i32 %897, 31
  %899 = lshr i32 %896, 31
  %900 = xor i32 %898, %899
  %901 = add nuw nsw i32 %900, %899
  %902 = icmp eq i32 %901, 2
  %903 = icmp ne i32 %898, 0
  %904 = xor i1 %903, %902
  %905 = select i1 %904, i64 10, i64 96
  %906 = add i64 %893, %905
  %907 = inttoptr i64 %320 to i32*
  %908 = load i32, i32* %907
  %909 = sext i32 %908 to i64
  %910 = mul nsw i64 %909, 2400
  %911 = add i64 %910, ptrtoint (%idmo_type* @idmo to i64)
  %912 = inttoptr i64 %321 to i32*
  %913 = load i32, i32* %912
  %914 = sext i32 %913 to i64
  %915 = shl nsw i64 %914, 2
  %916 = add i64 %915, ptrtoint (%jjface_type* @jjface to i64)
  %917 = inttoptr i64 %916 to i32*
  %918 = load i32, i32* %917
  %919 = sext i32 %918 to i64
  %920 = mul nsw i64 %919, 400
  %921 = add i64 %920, %911
  br i1 %904, label %block_41150e, label %block_411564

block_41109d:                                     ; preds = %block_411043
  store i64 %472, i64* %10, align 8, !tbaa !1240
  %922 = add i64 %472, 216
  %923 = inttoptr i64 %922 to i32*
  %924 = load i32, i32* %923
  %925 = add i64 %120, -68
  %926 = inttoptr i64 %925 to i32*
  store i32 %924, i32* %926
  %927 = add i64 %457, 62
  %928 = inttoptr i64 %121 to i32*
  store i32 0, i32* %928
  %929 = add i64 %120, -16
  %930 = add i64 %120, -64
  br label %block_4110db
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41ce80_transf_nc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41ce80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %25, align 1, !tbaa !1244
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 1, !tbaa !1244
  %28 = bitcast i64* %24 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %23, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = add i64 %14, -232
  store i64 %31, i64* %5, align 8, !tbaa !1240
  %32 = add i64 %14, -16
  %33 = load i64, i64* %8, align 8
  %34 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %34
  %35 = add i64 %14, -24
  %36 = load i64, i64* %7, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  store i64 %31, i64* %8, align 8, !tbaa !1240
  store i64 25, i64* %7, align 8, !tbaa !1240
  %38 = add i64 %1, 10704
  %39 = add i64 %1, 44
  %40 = add i64 %14, -256
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  store i64 %40, i64* %9, align 8, !tbaa !1240
  %42 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %38, %struct.Memory* %2)
  %43 = load i64, i64* %10, align 8
  %44 = add i64 %43, -228
  %45 = load i64, i64* %3, align 8
  %46 = add i64 %45, 10
  %47 = inttoptr i64 %44 to i32*
  store i32 0, i32* %47
  %48 = add i64 %43, -224
  %49 = add i64 %43, -232
  %50 = add i64 %43, -8
  %51 = bitcast [32 x %union.VectorReg]* %11 to double*
  %52 = bitcast i64* %24 to double*
  %53 = add i64 %43, -236
  %54 = bitcast %union.VectorReg* %12 to double*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_41ceb6

block_41d16c:                                     ; preds = %block_41d091
  %56 = inttoptr i64 %44 to i32*
  %57 = load i32, i32* %56
  %58 = add i32 %57, 1
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %4, align 8, !tbaa !1240
  %60 = inttoptr i64 %44 to i32*
  store i32 %58, i32* %60
  br label %block_41d013

block_41cfd7:                                     ; preds = %block_41cf2d
  %61 = inttoptr i64 %49 to i32*
  %62 = load i32, i32* %61
  %63 = add i32 %62, 1
  %64 = inttoptr i64 %49 to i32*
  store i32 %63, i32* %64
  %65 = add i64 %269, -193
  br label %block_41cf16

block_41d153:                                     ; preds = %block_41d0a8
  %66 = inttoptr i64 %49 to i32*
  %67 = load i32, i32* %66
  %68 = add i32 %67, 1
  %69 = inttoptr i64 %49 to i32*
  store i32 %68, i32* %69
  br label %block_41d091

block_41cec3:                                     ; preds = %block_41ceb6
  %70 = inttoptr i64 %49 to i32*
  store i32 0, i32* %70
  %71 = inttoptr i64 %50 to i64*
  %72 = load i64, i64* %71
  %73 = inttoptr i64 %44 to i32*
  %74 = load i32, i32* %73
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %75, 40
  %77 = add i64 %76, %72
  %78 = inttoptr i64 %49 to i32*
  %79 = load i32, i32* %78
  %80 = sext i32 %79 to i64
  store i64 %80, i64* %6, align 8, !tbaa !1240
  %81 = shl nsw i64 %80, 3
  %82 = add i64 %81, %77
  %83 = inttoptr i64 %82 to double*
  %84 = load double, double* %83
  store double %84, double* %51, align 1, !tbaa !1246
  store double 0.000000e+00, double* %52, align 1, !tbaa !1246
  %85 = add i64 %76, %48
  store i64 %80, i64* %5, align 8, !tbaa !1240
  %86 = add i64 %81, %85
  %87 = inttoptr i64 %86 to double*
  store double %84, double* %87
  %88 = add i64 %141, 83
  %89 = inttoptr i64 %49 to i32*
  store i32 1, i32* %89
  br label %block_41cf16

block_41cf3a:                                     ; preds = %block_41cf2d
  %90 = inttoptr i64 %44 to i32*
  %91 = load i32, i32* %90
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %92, 40
  %94 = add i64 %93, %48
  store i64 %94, i64* %7, align 8, !tbaa !1240
  %95 = inttoptr i64 %49 to i32*
  %96 = load i32, i32* %95
  %97 = sext i32 %96 to i64
  %98 = shl nsw i64 %97, 3
  %99 = add i64 %98, %94
  %100 = inttoptr i64 %99 to double*
  %101 = load double, double* %100
  %102 = sext i32 %259 to i64
  %103 = mul nsw i64 %102, 24
  %104 = add i64 %103, ptrtoint (%qbnew_type* @qbnew to i64)
  %105 = add i32 %96, -1
  %106 = zext i32 %105 to i64
  store i64 %106, i64* %8, align 8, !tbaa !1240
  %107 = sext i32 %105 to i64
  %108 = shl nsw i64 %107, 3
  %109 = add i64 %104, %108
  %110 = inttoptr i64 %109 to double*
  %111 = load double, double* %110
  %112 = inttoptr i64 %50 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %93, %113
  store i64 %102, i64* %6, align 8, !tbaa !1240
  %115 = shl nsw i64 %102, 3
  %116 = add i64 %115, %114
  %117 = inttoptr i64 %116 to double*
  %118 = load double, double* %117
  %119 = fmul double %111, %118
  store double %119, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %55, align 1, !tbaa !1246
  %120 = fadd double %101, %119
  store double %120, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %97, i64* %5, align 8, !tbaa !1240
  %121 = inttoptr i64 %99 to double*
  store double %120, double* %121
  %122 = inttoptr i64 %53 to i32*
  %123 = load i32, i32* %122
  %124 = add i32 %123, 1
  %125 = inttoptr i64 %53 to i32*
  store i32 %124, i32* %125
  %126 = add i64 %269, -13
  br label %block_41cf2d

block_41ceb6:                                     ; preds = %block_41cff0, %block_41ce80
  %127 = phi i64 [ %46, %block_41ce80 ], [ %218, %block_41cff0 ]
  %128 = phi %struct.Memory* [ %42, %block_41ce80 ], [ %221, %block_41cff0 ]
  %129 = inttoptr i64 %44 to i32*
  %130 = load i32, i32* %129
  %131 = add i32 %130, -5
  %132 = lshr i32 %131, 31
  %133 = trunc i32 %132 to i8
  %134 = lshr i32 %130, 31
  %135 = xor i32 %132, %134
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = icmp ne i8 %133, 0
  %139 = xor i1 %138, %137
  %140 = select i1 %139, i64 13, i64 339
  %141 = add i64 %127, %140
  br i1 %139, label %block_41cec3, label %block_41d009

block_41d0b5:                                     ; preds = %block_41d0a8
  %142 = inttoptr i64 %271 to i64*
  %143 = load i64, i64* %142
  %144 = inttoptr i64 %49 to i32*
  %145 = load i32, i32* %144
  %146 = sext i32 %145 to i64
  %147 = mul nsw i64 %146, 40
  %148 = add i64 %147, %143
  %149 = inttoptr i64 %44 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %150 to i64
  store i64 %151, i64* %7, align 8, !tbaa !1240
  %152 = shl nsw i64 %151, 3
  %153 = add i64 %152, %148
  %154 = inttoptr i64 %153 to double*
  %155 = load double, double* %154
  %156 = sext i32 %180 to i64
  %157 = mul nsw i64 %156, 24
  %158 = add i64 %157, ptrtoint (%qbnew_type* @qbnew to i64)
  %159 = add i32 %145, -1
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %8, align 8, !tbaa !1240
  %161 = sext i32 %159 to i64
  store i64 %161, i64* %6, align 8, !tbaa !1240
  %162 = shl nsw i64 %161, 3
  %163 = add i64 %158, %162
  %164 = inttoptr i64 %163 to double*
  %165 = load double, double* %164
  %166 = mul nsw i64 %156, 40
  %167 = add i64 %166, %48
  %168 = add i64 %152, %167
  %169 = inttoptr i64 %168 to double*
  %170 = load double, double* %169
  %171 = fmul double %165, %170
  store double %171, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %55, align 1, !tbaa !1246
  %172 = fadd double %155, %171
  store double %172, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %151, i64* %5, align 8, !tbaa !1240
  %173 = inttoptr i64 %153 to double*
  store double %172, double* %173
  %174 = inttoptr i64 %53 to i32*
  %175 = load i32, i32* %174
  %176 = add i32 %175, 1
  %177 = inttoptr i64 %53 to i32*
  store i32 %176, i32* %177
  br label %block_41d0a8

block_41d0a8:                                     ; preds = %block_41d09e, %block_41d0b5
  %178 = phi %struct.Memory* [ %245, %block_41d09e ], [ %178, %block_41d0b5 ]
  %179 = inttoptr i64 %53 to i32*
  %180 = load i32, i32* %179
  %181 = add i32 %180, -5
  %182 = lshr i32 %181, 31
  %183 = lshr i32 %180, 31
  %184 = xor i32 %182, %183
  %185 = add nuw nsw i32 %184, %183
  %186 = icmp eq i32 %185, 2
  %187 = icmp ne i32 %182, 0
  %188 = xor i1 %187, %186
  br i1 %188, label %block_41d0b5, label %block_41d153

block_41cf23:                                     ; preds = %block_41cf16
  %189 = add i64 %233, 10
  %190 = inttoptr i64 %53 to i32*
  store i32 0, i32* %190
  br label %block_41cf2d

block_41d020:                                     ; preds = %block_41d013
  %191 = inttoptr i64 %49 to i32*
  store i32 0, i32* %191
  %192 = inttoptr i64 %271 to i64*
  %193 = load i64, i64* %192
  %194 = inttoptr i64 %49 to i32*
  %195 = load i32, i32* %194
  %196 = sext i32 %195 to i64
  %197 = mul nsw i64 %196, 40
  %198 = add i64 %197, %193
  %199 = inttoptr i64 %44 to i32*
  %200 = load i32, i32* %199
  %201 = sext i32 %200 to i64
  store i64 %201, i64* %6, align 8, !tbaa !1240
  %202 = shl nsw i64 %201, 3
  %203 = add i64 %202, %198
  %204 = inttoptr i64 %203 to double*
  %205 = load double, double* %204
  %206 = add i64 %197, %48
  %207 = add i64 %202, %206
  %208 = inttoptr i64 %207 to double*
  %209 = load double, double* %208
  %210 = fadd double %205, %209
  store double %210, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %201, i64* %5, align 8, !tbaa !1240
  %211 = inttoptr i64 %203 to double*
  store double %210, double* %211
  %212 = inttoptr i64 %49 to i32*
  store i32 1, i32* %212
  br label %block_41d091

block_41cff0:                                     ; preds = %block_41cf16
  %213 = inttoptr i64 %44 to i32*
  %214 = load i32, i32* %213
  %215 = add i32 %214, 1
  %216 = zext i32 %215 to i64
  store i64 %216, i64* %4, align 8, !tbaa !1240
  %217 = inttoptr i64 %44 to i32*
  store i32 %215, i32* %217
  %218 = add i64 %233, -314
  br label %block_41ceb6

block_41d09e:                                     ; preds = %block_41d091
  %219 = inttoptr i64 %53 to i32*
  store i32 0, i32* %219
  br label %block_41d0a8

block_41cf16:                                     ; preds = %block_41cec3, %block_41cfd7
  %220 = phi i64 [ %88, %block_41cec3 ], [ %65, %block_41cfd7 ]
  %221 = phi %struct.Memory* [ %128, %block_41cec3 ], [ %257, %block_41cfd7 ]
  %222 = inttoptr i64 %49 to i32*
  %223 = load i32, i32* %222
  %224 = add i32 %223, -4
  %225 = lshr i32 %224, 31
  %226 = lshr i32 %223, 31
  %227 = xor i32 %225, %226
  %228 = add nuw nsw i32 %227, %226
  %229 = icmp eq i32 %228, 2
  %230 = icmp ne i32 %225, 0
  %231 = xor i1 %230, %229
  %232 = select i1 %231, i64 13, i64 218
  %233 = add i64 %220, %232
  br i1 %231, label %block_41cf23, label %block_41cff0

block_41d013:                                     ; preds = %block_41d009, %block_41d16c
  %234 = phi %struct.Memory* [ %128, %block_41d009 ], [ %245, %block_41d16c ]
  %235 = inttoptr i64 %44 to i32*
  %236 = load i32, i32* %235
  %237 = add i32 %236, -5
  %238 = lshr i32 %237, 31
  %239 = lshr i32 %236, 31
  %240 = xor i32 %238, %239
  %241 = add nuw nsw i32 %240, %239
  %242 = icmp eq i32 %241, 2
  %243 = icmp ne i32 %238, 0
  %244 = xor i1 %243, %242
  br i1 %244, label %block_41d020, label %block_41d185

block_41d091:                                     ; preds = %block_41d020, %block_41d153
  %245 = phi %struct.Memory* [ %234, %block_41d020 ], [ %178, %block_41d153 ]
  %246 = inttoptr i64 %49 to i32*
  %247 = load i32, i32* %246
  %248 = add i32 %247, -4
  %249 = lshr i32 %248, 31
  %250 = lshr i32 %247, 31
  %251 = xor i32 %249, %250
  %252 = add nuw nsw i32 %251, %250
  %253 = icmp eq i32 %252, 2
  %254 = icmp ne i32 %249, 0
  %255 = xor i1 %254, %253
  br i1 %255, label %block_41d09e, label %block_41d16c

block_41cf2d:                                     ; preds = %block_41cf23, %block_41cf3a
  %256 = phi i64 [ %189, %block_41cf23 ], [ %126, %block_41cf3a ]
  %257 = phi %struct.Memory* [ %221, %block_41cf23 ], [ %257, %block_41cf3a ]
  %258 = inttoptr i64 %53 to i32*
  %259 = load i32, i32* %258
  %260 = add i32 %259, -5
  %261 = lshr i32 %260, 31
  %262 = lshr i32 %259, 31
  %263 = xor i32 %261, %262
  %264 = add nuw nsw i32 %263, %262
  %265 = icmp eq i32 %264, 2
  %266 = icmp ne i32 %261, 0
  %267 = xor i1 %266, %265
  %268 = select i1 %267, i64 13, i64 170
  %269 = add i64 %256, %268
  br i1 %267, label %block_41cf3a, label %block_41cfd7

block_41d009:                                     ; preds = %block_41ceb6
  %270 = inttoptr i64 %44 to i32*
  store i32 0, i32* %270
  %271 = add i64 %43, -16
  br label %block_41d013

block_41d185:                                     ; preds = %block_41d013
  %272 = load i64, i64* %9, align 8
  %273 = add i64 %272, 240
  %274 = icmp ugt i64 %272, -241
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %17, align 1, !tbaa !1248
  %276 = trunc i64 %273 to i32
  %277 = and i32 %276, 255
  %278 = tail call i32 @llvm.ctpop.i32(i32 %277) #11
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  store i8 %281, i8* %18, align 1, !tbaa !1261
  %282 = xor i64 %272, 16
  %283 = xor i64 %282, %273
  %284 = lshr i64 %283, 4
  %285 = trunc i64 %284 to i8
  %286 = and i8 %285, 1
  store i8 %286, i8* %19, align 1, !tbaa !1262
  %287 = icmp eq i64 %273, 0
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %20, align 1, !tbaa !1263
  %289 = lshr i64 %273, 63
  %290 = trunc i64 %289 to i8
  store i8 %290, i8* %21, align 1, !tbaa !1264
  %291 = lshr i64 %272, 63
  %292 = xor i64 %289, %291
  %293 = add nuw nsw i64 %292, %289
  %294 = icmp eq i64 %293, 2
  %295 = zext i1 %294 to i8
  store i8 %295, i8* %22, align 1, !tbaa !1265
  %296 = add i64 %272, 248
  %297 = inttoptr i64 %273 to i64*
  %298 = load i64, i64* %297
  store i64 %298, i64* %10, align 8, !tbaa !1240
  %299 = inttoptr i64 %296 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %3, align 8, !tbaa !1240
  %301 = add i64 %272, 256
  store i64 %301, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %234
}

; Function Attrs: noinline
define %struct.Memory* @sub_4161e0_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4161e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %19, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %20, align 8, !tbaa !1240
  %33 = load i64, i64* %26, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %25, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %24, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %23, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %14, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -328
  store i64 %48, i64* %19, align 8, !tbaa !1240
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = load i8, i8* %5, align 1
  %56 = add i64 %30, 88
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %21, align 8, !tbaa !1240
  %59 = add i64 %30, 80
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %22, align 8, !tbaa !1240
  %62 = add i64 %30, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %14, align 8, !tbaa !1240
  %65 = add i64 %30, 64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  store i64 %67, i64* %25, align 8, !tbaa !1240
  %68 = add i64 %30, 56
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %26, align 8, !tbaa !1240
  %71 = add i64 %30, 48
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %23, align 8, !tbaa !1240
  %74 = load i64, i64* %20, align 8
  %75 = add i64 %74, 48
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %24, align 8, !tbaa !1240
  %78 = add i64 %74, 40
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %17, align 8, !tbaa !1240
  %81 = add i64 %74, -117
  %82 = inttoptr i64 %81 to i8*
  store i8 %55, i8* %82
  %83 = add i64 %74, 32
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %74, -124
  %87 = load i32, i32* %7, align 4
  %88 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %74, 24
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = add i64 %74, -136
  %93 = inttoptr i64 %92 to i64*
  store i64 %85, i64* %93
  %94 = add i64 %74, 16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %74, -140
  %98 = inttoptr i64 %97 to i32*
  store i32 %91, i32* %98
  %99 = inttoptr i64 %86 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %15, align 8, !tbaa !1240
  %102 = add i64 %74, -152
  %103 = inttoptr i64 %102 to i64*
  store i64 %96, i64* %103
  %104 = add i64 %74, -48
  %105 = load i64, i64* %18, align 8
  %106 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %106
  %107 = inttoptr i64 %81 to i8*
  %108 = load i8, i8* %107
  %109 = add i64 %74, -49
  %110 = inttoptr i64 %109 to i8*
  store i8 %108, i8* %110
  %111 = add i64 %74, -56
  %112 = load i32, i32* %9, align 4
  %113 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %113
  %114 = add i64 %74, -60
  %115 = inttoptr i64 %114 to i32*
  store i32 %100, i32* %115
  %116 = add i64 %74, -64
  %117 = load i32, i32* %11, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %74, -68
  %120 = load i32, i32* %13, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %74, -80
  %123 = bitcast [32 x %union.VectorReg]* %27 to double*
  %124 = load double, double* %123, align 1
  %125 = inttoptr i64 %122 to double*
  store double %124, double* %125
  %126 = add i64 %74, -88
  %127 = bitcast %union.VectorReg* %28 to double*
  %128 = load double, double* %127, align 1
  %129 = inttoptr i64 %126 to double*
  store double %128, double* %129
  %130 = inttoptr i64 %104 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %74, -160
  %133 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %133
  %134 = load i64, i64* %20, align 8
  %135 = add i64 %134, -160
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %134, -168
  %139 = load i64, i64* %17, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %140
  %141 = add i64 %134, -176
  %142 = load i64, i64* %22, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %142, i64* %143
  %144 = add i64 %134, -184
  %145 = load i64, i64* %14, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %146
  %147 = add i64 %134, -192
  %148 = load i64, i64* %25, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %148, i64* %149
  %150 = add i64 %134, -200
  %151 = load i64, i64* %26, align 8
  %152 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %152
  %153 = add i64 %134, -208
  %154 = load i64, i64* %24, align 8
  %155 = inttoptr i64 %153 to i64*
  store i64 %154, i64* %155
  %156 = add i64 %134, -216
  %157 = load i64, i64* %23, align 8
  %158 = inttoptr i64 %156 to i64*
  store i64 %157, i64* %158
  %159 = add i64 %134, -224
  %160 = load i64, i64* %21, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %161
  %162 = add i64 %1, 228
  %163 = load i64, i64* %19, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %172 = load i64, i64* %168, align 8, !alias.scope !1338, !noalias !1341
  %173 = load i64, i64* %167, align 8, !alias.scope !1338, !noalias !1341
  %174 = load i64, i64* %170, align 8, !alias.scope !1338, !noalias !1341
  %175 = load i64, i64* %171, align 8, !alias.scope !1338, !noalias !1341
  %176 = inttoptr i64 %163 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %163, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %163, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %163, 24
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %163, 32
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %163, 40
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %163, 48
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %163, 56
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %163, 64
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %163, 72
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = inttoptr i64 %164 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %3, align 8, !alias.scope !1338, !noalias !1341
  store i64 %163, i64* %19, align 8, !alias.scope !1338, !noalias !1341
  %207 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 944), i64 %137, i64 %172, i64 %173, i64 %174, i64 %175, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204), !noalias !1338
  %208 = load i64, i64* %3, align 8
  %209 = load i64, i64* %20, align 8
  %210 = add i64 %209, -49
  %211 = inttoptr i64 %210 to i8*
  %212 = load i8, i8* %211
  %213 = sext i8 %212 to i64
  %214 = and i64 %213, 4294967295
  store i64 %214, i64* %17, align 8, !tbaa !1240
  %215 = add i64 %209, -228
  %216 = trunc i64 %207 to i32
  %217 = inttoptr i64 %215 to i32*
  store i32 %216, i32* %217
  %218 = add i64 %208, 27
  %219 = load i64, i64* %19, align 8, !tbaa !1240
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %168, align 8, !alias.scope !1343, !noalias !1346
  %223 = load i64, i64* %167, align 8, !alias.scope !1343, !noalias !1346
  %224 = load i64, i64* %170, align 8, !alias.scope !1343, !noalias !1346
  %225 = load i64, i64* %171, align 8, !alias.scope !1343, !noalias !1346
  %226 = inttoptr i64 %219 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %219, 8
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %219, 16
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %219, 24
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %219, 32
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %219, 40
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %219, 48
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %219, 56
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %219, 64
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %219, 72
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = inttoptr i64 %220 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %3, align 8, !alias.scope !1343, !noalias !1346
  store i64 %219, i64* %19, align 8, !alias.scope !1343, !noalias !1346
  %257 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 972), i64 %214, i64 %222, i64 %223, i64 %224, i64 %225, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254), !noalias !1343
  %258 = load i64, i64* %20, align 8
  %259 = add i64 %258, -60
  %260 = load i64, i64* %3, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261
  %263 = icmp eq i32 %262, 0
  %264 = add i64 %258, -232
  %265 = trunc i64 %257 to i32
  %266 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %266
  %267 = select i1 %263, i64 16, i64 240
  %268 = add i64 %260, %267
  %269 = add i64 %258, -64
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  br i1 %263, label %block_4162ef, label %block_4163cf

block_4162ef:                                     ; preds = %block_4161e0
  %272 = icmp eq i32 %271, 0
  %273 = select i1 %272, i64 10, i64 224
  %274 = add i64 %268, %273
  br i1 %272, label %block_4162f9, label %block_4163cf

block_4163cf:                                     ; preds = %block_4162ef, %block_4161e0
  %275 = phi i64 [ %274, %block_4162ef ], [ %268, %block_4161e0 ]
  %276 = add i64 %258, -56
  %277 = inttoptr i64 %276 to i32*
  %278 = load i32, i32* %277
  %279 = zext i32 %278 to i64
  %280 = inttoptr i64 %259 to i32*
  %281 = load i32, i32* %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %16, align 8, !tbaa !1240
  %283 = zext i32 %271 to i64
  store i64 %283, i64* %15, align 8, !tbaa !1240
  %284 = add i64 %275, 26
  %285 = load i64, i64* %19, align 8, !tbaa !1240
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %284, i64* %287
  %288 = load i64, i64* %170, align 8, !alias.scope !1348, !noalias !1351
  %289 = load i64, i64* %171, align 8, !alias.scope !1348, !noalias !1351
  %290 = inttoptr i64 %285 to i64*
  %291 = load i64, i64* %290
  %292 = add i64 %285, 8
  %293 = inttoptr i64 %292 to i64*
  %294 = load i64, i64* %293
  %295 = add i64 %285, 16
  %296 = inttoptr i64 %295 to i64*
  %297 = load i64, i64* %296
  %298 = add i64 %285, 24
  %299 = inttoptr i64 %298 to i64*
  %300 = load i64, i64* %299
  %301 = add i64 %285, 32
  %302 = inttoptr i64 %301 to i64*
  %303 = load i64, i64* %302
  %304 = add i64 %285, 40
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  %307 = add i64 %285, 48
  %308 = inttoptr i64 %307 to i64*
  %309 = load i64, i64* %308
  %310 = add i64 %285, 56
  %311 = inttoptr i64 %310 to i64*
  %312 = load i64, i64* %311
  %313 = add i64 %285, 64
  %314 = inttoptr i64 %313 to i64*
  %315 = load i64, i64* %314
  %316 = add i64 %285, 72
  %317 = inttoptr i64 %316 to i64*
  %318 = load i64, i64* %317
  %319 = inttoptr i64 %286 to i64*
  %320 = load i64, i64* %319
  store i64 %320, i64* %3, align 8, !alias.scope !1348, !noalias !1351
  store i64 %285, i64* %19, align 8, !alias.scope !1348, !noalias !1351
  %321 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1088), i64 %279, i64 %282, i64 %283, i64 %288, i64 %289, i64 %291, i64 %294, i64 %297, i64 %300, i64 %303, i64 %306, i64 %309, i64 %312, i64 %315, i64 %318), !noalias !1348
  %322 = load i64, i64* %20, align 8
  %323 = add i64 %322, -256
  %324 = trunc i64 %321 to i32
  %325 = load i64, i64* %3, align 8
  %326 = add i64 %325, 6
  %327 = inttoptr i64 %323 to i32*
  store i32 %324, i32* %327
  br label %block_4163ef

block_4163b0:                                     ; preds = %block_4162f9, %block_416309
  %328 = phi i64 [ %1105, %block_4162f9 ], [ %1038, %block_416309 ]
  %329 = phi i64 [ %1110, %block_4162f9 ], [ %1043, %block_416309 ]
  %330 = add i64 %258, -56
  %331 = inttoptr i64 %330 to i32*
  %332 = load i32, i32* %331
  %333 = zext i32 %332 to i64
  %334 = add i64 %329, 20
  %335 = load i64, i64* %19, align 8, !tbaa !1240
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %334, i64* %337
  %338 = load i64, i64* %168, align 8, !alias.scope !1353, !noalias !1356
  %339 = load i64, i64* %170, align 8, !alias.scope !1353, !noalias !1356
  %340 = load i64, i64* %171, align 8, !alias.scope !1353, !noalias !1356
  %341 = inttoptr i64 %335 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %335, 8
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %335, 16
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %335, 24
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %335, 32
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %335, 40
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %335, 48
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %335, 56
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %335, 64
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %335, 72
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = inttoptr i64 %336 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %3, align 8, !alias.scope !1353, !noalias !1356
  store i64 %335, i64* %19, align 8, !alias.scope !1353, !noalias !1356
  %372 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1051), i64 %333, i64 %338, i64 %328, i64 %339, i64 %340, i64 %342, i64 %345, i64 %348, i64 %351, i64 %354, i64 %357, i64 %360, i64 %363, i64 %366, i64 %369), !noalias !1353
  %373 = load i64, i64* %20, align 8
  %374 = add i64 %373, -252
  %375 = trunc i64 %372 to i32
  %376 = load i64, i64* %3, align 8
  %377 = add i64 %376, 6
  %378 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %378
  br label %block_4163ca

block_4164ad:                                     ; preds = %block_416466, %block_41648c
  %379 = phi i64 [ %942, %block_41648c ], [ %1368, %block_416466 ]
  %380 = phi i64 [ %946, %block_41648c ], [ %1373, %block_416466 ]
  %381 = phi %struct.Memory* [ %1124, %block_41648c ], [ %1124, %block_416466 ]
  %382 = add i64 %379, 32
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %380, 21
  %386 = load i64, i64* %19, align 8, !tbaa !1240
  %387 = add i64 %386, -8
  %388 = inttoptr i64 %387 to i64*
  store i64 %385, i64* %388
  %389 = load i64, i64* %168, align 8, !alias.scope !1358, !noalias !1361
  %390 = load i64, i64* %167, align 8, !alias.scope !1358, !noalias !1361
  %391 = load i64, i64* %170, align 8, !alias.scope !1358, !noalias !1361
  %392 = load i64, i64* %171, align 8, !alias.scope !1358, !noalias !1361
  %393 = inttoptr i64 %386 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %386, 8
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %386, 16
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %386, 24
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %386, 32
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %386, 40
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %386, 48
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %386, 56
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = add i64 %386, 64
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %386, 72
  %420 = inttoptr i64 %419 to i64*
  %421 = load i64, i64* %420
  %422 = inttoptr i64 %387 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %3, align 8, !alias.scope !1358, !noalias !1361
  store i64 %386, i64* %19, align 8, !alias.scope !1358, !noalias !1361
  %424 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 525), i64 %384, i64 %389, i64 %390, i64 %391, i64 %392, i64 %394, i64 %397, i64 %400, i64 %403, i64 %406, i64 %409, i64 %412, i64 %415, i64 %418, i64 %421), !noalias !1358
  %425 = load i64, i64* %3, align 8
  %426 = load i64, i64* %20, align 8
  %427 = add i64 %426, 40
  %428 = inttoptr i64 %427 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %426, -284
  %431 = trunc i64 %424 to i32
  %432 = inttoptr i64 %430 to i32*
  store i32 %431, i32* %432
  %433 = add i64 %425, 27
  %434 = load i64, i64* %19, align 8, !tbaa !1240
  %435 = add i64 %434, -8
  %436 = inttoptr i64 %435 to i64*
  store i64 %433, i64* %436
  %437 = load i64, i64* %168, align 8, !alias.scope !1363, !noalias !1366
  %438 = load i64, i64* %167, align 8, !alias.scope !1363, !noalias !1366
  %439 = load i64, i64* %170, align 8, !alias.scope !1363, !noalias !1366
  %440 = load i64, i64* %171, align 8, !alias.scope !1363, !noalias !1366
  %441 = inttoptr i64 %434 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %434, 8
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %434, 16
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %434, 24
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %434, 32
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %434, 40
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %434, 48
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %434, 56
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = add i64 %434, 64
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %434, 72
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = inttoptr i64 %435 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %3, align 8, !alias.scope !1363, !noalias !1366
  store i64 %434, i64* %19, align 8, !alias.scope !1363, !noalias !1366
  %472 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 562), i64 %429, i64 %437, i64 %438, i64 %439, i64 %440, i64 %442, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457, i64 %460, i64 %463, i64 %466, i64 %469), !noalias !1363
  %473 = load i64, i64* %3, align 8
  %474 = load i64, i64* %20, align 8
  %475 = add i64 %474, 48
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = add i64 %474, -288
  %479 = trunc i64 %472 to i32
  %480 = inttoptr i64 %478 to i32*
  store i32 %479, i32* %480
  %481 = add i64 %473, 27
  %482 = load i64, i64* %19, align 8, !tbaa !1240
  %483 = add i64 %482, -8
  %484 = inttoptr i64 %483 to i64*
  store i64 %481, i64* %484
  %485 = load i64, i64* %168, align 8, !alias.scope !1368, !noalias !1371
  %486 = load i64, i64* %167, align 8, !alias.scope !1368, !noalias !1371
  %487 = load i64, i64* %170, align 8, !alias.scope !1368, !noalias !1371
  %488 = load i64, i64* %171, align 8, !alias.scope !1368, !noalias !1371
  %489 = inttoptr i64 %482 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %482, 8
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %482, 16
  %495 = inttoptr i64 %494 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %482, 24
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %482, 32
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %482, 40
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %482, 48
  %507 = inttoptr i64 %506 to i64*
  %508 = load i64, i64* %507
  %509 = add i64 %482, 56
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %482, 64
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %482, 72
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = inttoptr i64 %483 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %3, align 8, !alias.scope !1368, !noalias !1371
  store i64 %482, i64* %19, align 8, !alias.scope !1368, !noalias !1371
  %520 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1257), i64 %477, i64 %485, i64 %486, i64 %487, i64 %488, i64 %490, i64 %493, i64 %496, i64 %499, i64 %502, i64 %505, i64 %508, i64 %511, i64 %514, i64 %517), !noalias !1368
  %521 = load i64, i64* %3, align 8
  %522 = load i64, i64* %20, align 8
  %523 = add i64 %522, 56
  %524 = inttoptr i64 %523 to i64*
  %525 = load i64, i64* %524
  %526 = add i64 %522, -292
  %527 = trunc i64 %520 to i32
  %528 = inttoptr i64 %526 to i32*
  store i32 %527, i32* %528
  %529 = add i64 %521, 27
  %530 = load i64, i64* %19, align 8, !tbaa !1240
  %531 = add i64 %530, -8
  %532 = inttoptr i64 %531 to i64*
  store i64 %529, i64* %532
  %533 = load i64, i64* %168, align 8, !alias.scope !1373, !noalias !1376
  %534 = load i64, i64* %167, align 8, !alias.scope !1373, !noalias !1376
  %535 = load i64, i64* %170, align 8, !alias.scope !1373, !noalias !1376
  %536 = load i64, i64* %171, align 8, !alias.scope !1373, !noalias !1376
  %537 = inttoptr i64 %530 to i64*
  %538 = load i64, i64* %537
  %539 = add i64 %530, 8
  %540 = inttoptr i64 %539 to i64*
  %541 = load i64, i64* %540
  %542 = add i64 %530, 16
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = add i64 %530, 24
  %546 = inttoptr i64 %545 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %530, 32
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %530, 40
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = add i64 %530, 48
  %555 = inttoptr i64 %554 to i64*
  %556 = load i64, i64* %555
  %557 = add i64 %530, 56
  %558 = inttoptr i64 %557 to i64*
  %559 = load i64, i64* %558
  %560 = add i64 %530, 64
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %530, 72
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = inttoptr i64 %531 to i64*
  %567 = load i64, i64* %566
  store i64 %567, i64* %3, align 8, !alias.scope !1373, !noalias !1376
  store i64 %530, i64* %19, align 8, !alias.scope !1373, !noalias !1376
  %568 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 619), i64 %525, i64 %533, i64 %534, i64 %535, i64 %536, i64 %538, i64 %541, i64 %544, i64 %547, i64 %550, i64 %553, i64 %556, i64 %559, i64 %562, i64 %565), !noalias !1373
  %569 = load i64, i64* %3, align 8
  %570 = load i64, i64* %20, align 8
  %571 = add i64 %570, 64
  %572 = inttoptr i64 %571 to i64*
  %573 = load i64, i64* %572
  %574 = add i64 %570, -296
  %575 = trunc i64 %568 to i32
  %576 = inttoptr i64 %574 to i32*
  store i32 %575, i32* %576
  %577 = add i64 %569, 27
  %578 = load i64, i64* %19, align 8, !tbaa !1240
  %579 = add i64 %578, -8
  %580 = inttoptr i64 %579 to i64*
  store i64 %577, i64* %580
  %581 = load i64, i64* %168, align 8, !alias.scope !1378, !noalias !1381
  %582 = load i64, i64* %167, align 8, !alias.scope !1378, !noalias !1381
  %583 = load i64, i64* %170, align 8, !alias.scope !1378, !noalias !1381
  %584 = load i64, i64* %171, align 8, !alias.scope !1378, !noalias !1381
  %585 = inttoptr i64 %578 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %578, 8
  %588 = inttoptr i64 %587 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %578, 16
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %578, 24
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %578, 32
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %578, 40
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %578, 48
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = add i64 %578, 56
  %606 = inttoptr i64 %605 to i64*
  %607 = load i64, i64* %606
  %608 = add i64 %578, 64
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %578, 72
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = inttoptr i64 %579 to i64*
  %615 = load i64, i64* %614
  store i64 %615, i64* %3, align 8, !alias.scope !1378, !noalias !1381
  store i64 %578, i64* %19, align 8, !alias.scope !1378, !noalias !1381
  %616 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 642), i64 %573, i64 %581, i64 %582, i64 %583, i64 %584, i64 %586, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601, i64 %604, i64 %607, i64 %610, i64 %613), !noalias !1378
  %617 = load i64, i64* %3, align 8
  %618 = load i64, i64* %20, align 8
  %619 = add i64 %618, 72
  %620 = inttoptr i64 %619 to i64*
  %621 = load i64, i64* %620
  %622 = add i64 %618, -300
  %623 = trunc i64 %616 to i32
  %624 = inttoptr i64 %622 to i32*
  store i32 %623, i32* %624
  %625 = add i64 %617, 27
  %626 = load i64, i64* %19, align 8, !tbaa !1240
  %627 = add i64 %626, -8
  %628 = inttoptr i64 %627 to i64*
  store i64 %625, i64* %628
  %629 = load i64, i64* %168, align 8, !alias.scope !1383, !noalias !1386
  %630 = load i64, i64* %167, align 8, !alias.scope !1383, !noalias !1386
  %631 = load i64, i64* %170, align 8, !alias.scope !1383, !noalias !1386
  %632 = load i64, i64* %171, align 8, !alias.scope !1383, !noalias !1386
  %633 = inttoptr i64 %626 to i64*
  %634 = load i64, i64* %633
  %635 = add i64 %626, 8
  %636 = inttoptr i64 %635 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %626, 16
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %626, 24
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %626, 32
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %626, 40
  %648 = inttoptr i64 %647 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %626, 48
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = add i64 %626, 56
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %626, 64
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %626, 72
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = inttoptr i64 %627 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %3, align 8, !alias.scope !1383, !noalias !1386
  store i64 %626, i64* %19, align 8, !alias.scope !1383, !noalias !1386
  %664 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 665), i64 %621, i64 %629, i64 %630, i64 %631, i64 %632, i64 %634, i64 %637, i64 %640, i64 %643, i64 %646, i64 %649, i64 %652, i64 %655, i64 %658, i64 %661), !noalias !1383
  %665 = load i64, i64* %3, align 8
  %666 = load i64, i64* %20, align 8
  %667 = add i64 %666, 80
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668
  %670 = add i64 %666, -304
  %671 = trunc i64 %664 to i32
  %672 = inttoptr i64 %670 to i32*
  store i32 %671, i32* %672
  %673 = add i64 %665, 27
  %674 = load i64, i64* %19, align 8, !tbaa !1240
  %675 = add i64 %674, -8
  %676 = inttoptr i64 %675 to i64*
  store i64 %673, i64* %676
  %677 = load i64, i64* %168, align 8, !alias.scope !1388, !noalias !1391
  %678 = load i64, i64* %167, align 8, !alias.scope !1388, !noalias !1391
  %679 = load i64, i64* %170, align 8, !alias.scope !1388, !noalias !1391
  %680 = load i64, i64* %171, align 8, !alias.scope !1388, !noalias !1391
  %681 = inttoptr i64 %674 to i64*
  %682 = load i64, i64* %681
  %683 = add i64 %674, 8
  %684 = inttoptr i64 %683 to i64*
  %685 = load i64, i64* %684
  %686 = add i64 %674, 16
  %687 = inttoptr i64 %686 to i64*
  %688 = load i64, i64* %687
  %689 = add i64 %674, 24
  %690 = inttoptr i64 %689 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %674, 32
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %674, 40
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %674, 48
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %674, 56
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %674, 64
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %674, 72
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = inttoptr i64 %675 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %3, align 8, !alias.scope !1388, !noalias !1391
  store i64 %674, i64* %19, align 8, !alias.scope !1388, !noalias !1391
  %712 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 688), i64 %669, i64 %677, i64 %678, i64 %679, i64 %680, i64 %682, i64 %685, i64 %688, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709), !noalias !1388
  %713 = load i64, i64* %3, align 8
  %714 = load i64, i64* %20, align 8
  %715 = add i64 %714, 88
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %714, -308
  %719 = trunc i64 %712 to i32
  %720 = inttoptr i64 %718 to i32*
  store i32 %719, i32* %720
  %721 = add i64 %713, 27
  %722 = load i64, i64* %19, align 8, !tbaa !1240
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %721, i64* %724
  %725 = load i64, i64* %168, align 8, !alias.scope !1393, !noalias !1396
  %726 = load i64, i64* %167, align 8, !alias.scope !1393, !noalias !1396
  %727 = load i64, i64* %170, align 8, !alias.scope !1393, !noalias !1396
  %728 = load i64, i64* %171, align 8, !alias.scope !1393, !noalias !1396
  %729 = inttoptr i64 %722 to i64*
  %730 = load i64, i64* %729
  %731 = add i64 %722, 8
  %732 = inttoptr i64 %731 to i64*
  %733 = load i64, i64* %732
  %734 = add i64 %722, 16
  %735 = inttoptr i64 %734 to i64*
  %736 = load i64, i64* %735
  %737 = add i64 %722, 24
  %738 = inttoptr i64 %737 to i64*
  %739 = load i64, i64* %738
  %740 = add i64 %722, 32
  %741 = inttoptr i64 %740 to i64*
  %742 = load i64, i64* %741
  %743 = add i64 %722, 40
  %744 = inttoptr i64 %743 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %722, 48
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %722, 56
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = add i64 %722, 64
  %753 = inttoptr i64 %752 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %722, 72
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  %758 = inttoptr i64 %723 to i64*
  %759 = load i64, i64* %758
  store i64 %759, i64* %3, align 8, !alias.scope !1393, !noalias !1396
  store i64 %722, i64* %19, align 8, !alias.scope !1393, !noalias !1396
  %760 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 711), i64 %717, i64 %725, i64 %726, i64 %727, i64 %728, i64 %730, i64 %733, i64 %736, i64 %739, i64 %742, i64 %745, i64 %748, i64 %751, i64 %754, i64 %757), !noalias !1393
  %761 = load i64, i64* %3, align 8
  %762 = load i64, i64* %20, align 8
  %763 = add i64 %762, 96
  %764 = inttoptr i64 %763 to i64*
  %765 = load i64, i64* %764
  store i64 %765, i64* %17, align 8, !tbaa !1240
  %766 = add i64 %762, -312
  %767 = trunc i64 %760 to i32
  %768 = inttoptr i64 %766 to i32*
  store i32 %767, i32* %768
  %769 = add i64 %761, 27
  %770 = load i64, i64* %19, align 8, !tbaa !1240
  %771 = add i64 %770, -8
  %772 = inttoptr i64 %771 to i64*
  store i64 %769, i64* %772
  %773 = load i64, i64* %168, align 8, !alias.scope !1398, !noalias !1401
  %774 = load i64, i64* %167, align 8, !alias.scope !1398, !noalias !1401
  %775 = load i64, i64* %170, align 8, !alias.scope !1398, !noalias !1401
  %776 = load i64, i64* %171, align 8, !alias.scope !1398, !noalias !1401
  %777 = inttoptr i64 %770 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %770, 8
  %780 = inttoptr i64 %779 to i64*
  %781 = load i64, i64* %780
  %782 = add i64 %770, 16
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = add i64 %770, 24
  %786 = inttoptr i64 %785 to i64*
  %787 = load i64, i64* %786
  %788 = add i64 %770, 32
  %789 = inttoptr i64 %788 to i64*
  %790 = load i64, i64* %789
  %791 = add i64 %770, 40
  %792 = inttoptr i64 %791 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %770, 48
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = add i64 %770, 56
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = add i64 %770, 64
  %801 = inttoptr i64 %800 to i64*
  %802 = load i64, i64* %801
  %803 = add i64 %770, 72
  %804 = inttoptr i64 %803 to i64*
  %805 = load i64, i64* %804
  %806 = inttoptr i64 %771 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %3, align 8, !alias.scope !1398, !noalias !1401
  store i64 %770, i64* %19, align 8, !alias.scope !1398, !noalias !1401
  %808 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1299), i64 %765, i64 %773, i64 %774, i64 %775, i64 %776, i64 %778, i64 %781, i64 %784, i64 %787, i64 %790, i64 %793, i64 %796, i64 %799, i64 %802, i64 %805), !noalias !1398
  %809 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1322), i64* %18, align 8, !tbaa !1240
  %810 = load i64, i64* %20, align 8
  %811 = add i64 %810, -316
  %812 = trunc i64 %808 to i32
  %813 = inttoptr i64 %811 to i32*
  store i32 %812, i32* %813
  %814 = add i64 %809, 23
  %815 = load i64, i64* %19, align 8, !tbaa !1240
  %816 = add i64 %815, -8
  %817 = inttoptr i64 %816 to i64*
  store i64 %814, i64* %817
  %818 = load i64, i64* %169, align 8, !alias.scope !1403, !noalias !1406
  %819 = load i64, i64* %168, align 8, !alias.scope !1403, !noalias !1406
  %820 = load i64, i64* %167, align 8, !alias.scope !1403, !noalias !1406
  %821 = load i64, i64* %170, align 8, !alias.scope !1403, !noalias !1406
  %822 = load i64, i64* %171, align 8, !alias.scope !1403, !noalias !1406
  %823 = inttoptr i64 %815 to i64*
  %824 = load i64, i64* %823
  %825 = add i64 %815, 8
  %826 = inttoptr i64 %825 to i64*
  %827 = load i64, i64* %826
  %828 = add i64 %815, 16
  %829 = inttoptr i64 %828 to i64*
  %830 = load i64, i64* %829
  %831 = add i64 %815, 24
  %832 = inttoptr i64 %831 to i64*
  %833 = load i64, i64* %832
  %834 = add i64 %815, 32
  %835 = inttoptr i64 %834 to i64*
  %836 = load i64, i64* %835
  %837 = add i64 %815, 40
  %838 = inttoptr i64 %837 to i64*
  %839 = load i64, i64* %838
  %840 = add i64 %815, 48
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  %843 = add i64 %815, 56
  %844 = inttoptr i64 %843 to i64*
  %845 = load i64, i64* %844
  %846 = add i64 %815, 64
  %847 = inttoptr i64 %846 to i64*
  %848 = load i64, i64* %847
  %849 = add i64 %815, 72
  %850 = inttoptr i64 %849 to i64*
  %851 = load i64, i64* %850
  store i64 %815, i64* %19, align 8, !alias.scope !1403, !noalias !1406
  %852 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1322), i64 %818, i64 %819, i64 %820, i64 %821, i64 %822, i64 %824, i64 %827, i64 %830, i64 %833, i64 %836, i64 %839, i64 %842, i64 %845, i64 %848, i64 %851), !noalias !1403
  store i64 %852, i64* %166, align 8, !alias.scope !1403, !noalias !1406
  %853 = load i64, i64* %20, align 8
  %854 = add i64 %853, -320
  %855 = trunc i64 %852 to i32
  %856 = inttoptr i64 %854 to i32*
  store i32 %855, i32* %856
  %857 = load i64, i64* %19, align 8
  %858 = add i64 %857, 280
  %859 = icmp ugt i64 %857, -281
  %860 = zext i1 %859 to i8
  store i8 %860, i8* %49, align 1, !tbaa !1248
  %861 = trunc i64 %858 to i32
  %862 = and i32 %861, 255
  %863 = tail call i32 @llvm.ctpop.i32(i32 %862) #11
  %864 = trunc i32 %863 to i8
  %865 = and i8 %864, 1
  %866 = xor i8 %865, 1
  store i8 %866, i8* %50, align 1, !tbaa !1261
  %867 = xor i64 %857, 16
  %868 = xor i64 %867, %858
  %869 = lshr i64 %868, 4
  %870 = trunc i64 %869 to i8
  %871 = and i8 %870, 1
  store i8 %871, i8* %51, align 1, !tbaa !1262
  %872 = icmp eq i64 %858, 0
  %873 = zext i1 %872 to i8
  store i8 %873, i8* %52, align 1, !tbaa !1263
  %874 = lshr i64 %858, 63
  %875 = trunc i64 %874 to i8
  store i8 %875, i8* %53, align 1, !tbaa !1264
  %876 = lshr i64 %857, 63
  %877 = xor i64 %874, %876
  %878 = add nuw nsw i64 %877, %874
  %879 = icmp eq i64 %878, 2
  %880 = zext i1 %879 to i8
  store i8 %880, i8* %54, align 1, !tbaa !1265
  %881 = add i64 %857, 288
  %882 = inttoptr i64 %858 to i64*
  %883 = load i64, i64* %882
  store i64 %883, i64* %14, align 8, !tbaa !1240
  %884 = add i64 %857, 296
  %885 = inttoptr i64 %881 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %23, align 8, !tbaa !1240
  %887 = add i64 %857, 304
  %888 = inttoptr i64 %884 to i64*
  %889 = load i64, i64* %888
  store i64 %889, i64* %24, align 8, !tbaa !1240
  %890 = add i64 %857, 312
  %891 = inttoptr i64 %887 to i64*
  %892 = load i64, i64* %891
  store i64 %892, i64* %25, align 8, !tbaa !1240
  %893 = add i64 %857, 320
  %894 = inttoptr i64 %890 to i64*
  %895 = load i64, i64* %894
  store i64 %895, i64* %26, align 8, !tbaa !1240
  %896 = add i64 %857, 328
  %897 = inttoptr i64 %893 to i64*
  %898 = load i64, i64* %897
  store i64 %898, i64* %20, align 8, !tbaa !1240
  %899 = inttoptr i64 %896 to i64*
  %900 = load i64, i64* %899
  store i64 %900, i64* %3, align 8, !tbaa !1240
  %901 = add i64 %857, 336
  store i64 %901, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %381

block_41648c:                                     ; preds = %block_4163ef
  %902 = add i64 %1327, 27
  %903 = load i64, i64* %19, align 8, !tbaa !1240
  %904 = add i64 %903, -8
  %905 = inttoptr i64 %904 to i64*
  store i64 %902, i64* %905
  %906 = load i64, i64* %168, align 8, !alias.scope !1408, !noalias !1411
  %907 = load i64, i64* %167, align 8, !alias.scope !1408, !noalias !1411
  %908 = load i64, i64* %170, align 8, !alias.scope !1408, !noalias !1411
  %909 = load i64, i64* %171, align 8, !alias.scope !1408, !noalias !1411
  %910 = inttoptr i64 %903 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %903, 8
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = add i64 %903, 16
  %916 = inttoptr i64 %915 to i64*
  %917 = load i64, i64* %916
  %918 = add i64 %903, 24
  %919 = inttoptr i64 %918 to i64*
  %920 = load i64, i64* %919
  %921 = add i64 %903, 32
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  %924 = add i64 %903, 40
  %925 = inttoptr i64 %924 to i64*
  %926 = load i64, i64* %925
  %927 = add i64 %903, 48
  %928 = inttoptr i64 %927 to i64*
  %929 = load i64, i64* %928
  %930 = add i64 %903, 56
  %931 = inttoptr i64 %930 to i64*
  %932 = load i64, i64* %931
  %933 = add i64 %903, 64
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %903, 72
  %937 = inttoptr i64 %936 to i64*
  %938 = load i64, i64* %937
  %939 = inttoptr i64 %904 to i64*
  %940 = load i64, i64* %939
  store i64 %940, i64* %3, align 8, !alias.scope !1408, !noalias !1411
  store i64 %903, i64* %19, align 8, !alias.scope !1408, !noalias !1411
  %941 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1207), i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1244), i64 %906, i64 %907, i64 %908, i64 %909, i64 %911, i64 %914, i64 %917, i64 %920, i64 %923, i64 %926, i64 %929, i64 %932, i64 %935, i64 %938), !noalias !1408
  %942 = load i64, i64* %20, align 8
  %943 = add i64 %942, -280
  %944 = trunc i64 %941 to i32
  %945 = load i64, i64* %3, align 8
  %946 = add i64 %945, 6
  %947 = inttoptr i64 %943 to i32*
  store i32 %944, i32* %947
  br label %block_4164ad

block_4163ca:                                     ; preds = %block_416382, %block_4163b0
  %948 = phi i64 [ %373, %block_4163b0 ], [ %1093, %block_416382 ]
  %949 = phi i64 [ %377, %block_4163b0 ], [ %1098, %block_416382 ]
  %950 = phi %struct.Memory* [ %2, %block_4163b0 ], [ %1045, %block_416382 ]
  %951 = add i64 %949, 37
  br label %block_4163ef

block_41631a:                                     ; preds = %block_416309
  %952 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %952, double* %123, align 1, !tbaa !1246
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %954 = bitcast i64* %953 to double*
  store double 0.000000e+00, double* %954, align 1, !tbaa !1246
  %955 = add i64 %258, -112
  %956 = add i64 %258, -56
  %957 = inttoptr i64 %956 to i32*
  %958 = load i32, i32* %957
  %959 = sitofp i32 %958 to double
  store double %959, double* %127, align 1, !tbaa !1246
  %960 = add i64 %258, -240
  %961 = inttoptr i64 %960 to i64*
  store i64 %955, i64* %961
  %962 = add i64 %1043, 31
  %963 = load i64, i64* %19, align 8, !tbaa !1240
  %964 = add i64 %963, -8
  %965 = inttoptr i64 %964 to i64*
  store i64 %962, i64* %965
  %966 = load i64, i64* %169, align 8, !alias.scope !1413, !noalias !1416
  %967 = inttoptr i64 %964 to i64*
  %968 = load i64, i64* %967
  store i64 %968, i64* %3, align 8, !alias.scope !1413, !noalias !1416
  store i64 %963, i64* %19, align 8, !alias.scope !1413, !noalias !1416
  %969 = tail call i64 @pow(i64 %955, i64 %966), !noalias !1413
  %970 = load i64, i64* %3, align 8
  %971 = load i64, i64* %20, align 8
  %972 = add i64 %971, -240
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  %975 = add i64 %970, 24
  %976 = load i64, i64* %19, align 8, !tbaa !1240
  %977 = add i64 %976, -8
  %978 = inttoptr i64 %977 to i64*
  store i64 %975, i64* %978
  %979 = load i64, i64* %168, align 8, !alias.scope !1418, !noalias !1421
  %980 = load i64, i64* %167, align 8, !alias.scope !1418, !noalias !1421
  %981 = load i64, i64* %170, align 8, !alias.scope !1418, !noalias !1421
  %982 = load i64, i64* %171, align 8, !alias.scope !1418, !noalias !1421
  %983 = inttoptr i64 %976 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %976, 8
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  %988 = add i64 %976, 16
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %976, 24
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = add i64 %976, 32
  %995 = inttoptr i64 %994 to i64*
  %996 = load i64, i64* %995
  %997 = add i64 %976, 40
  %998 = inttoptr i64 %997 to i64*
  %999 = load i64, i64* %998
  %1000 = add i64 %976, 48
  %1001 = inttoptr i64 %1000 to i64*
  %1002 = load i64, i64* %1001
  %1003 = add i64 %976, 56
  %1004 = inttoptr i64 %1003 to i64*
  %1005 = load i64, i64* %1004
  %1006 = add i64 %976, 64
  %1007 = inttoptr i64 %1006 to i64*
  %1008 = load i64, i64* %1007
  %1009 = add i64 %976, 72
  %1010 = inttoptr i64 %1009 to i64*
  %1011 = load i64, i64* %1010
  %1012 = inttoptr i64 %977 to i64*
  %1013 = load i64, i64* %1012
  store i64 %1013, i64* %3, align 8, !alias.scope !1418, !noalias !1421
  store i64 %976, i64* %19, align 8, !alias.scope !1418, !noalias !1421
  %1014 = tail call i64 @sprintf(i64 %974, i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1009), i64 %979, i64 %980, i64 %981, i64 %982, i64 %984, i64 %987, i64 %990, i64 %993, i64 %996, i64 %999, i64 %1002, i64 %1005, i64 %1008, i64 %1011), !noalias !1418
  %1015 = load i64, i64* %20, align 8
  %1016 = add i64 %1015, -116
  %1017 = load i64, i64* %3, align 8
  %1018 = inttoptr i64 %1016 to i32*
  store i32 14, i32* %1018
  %1019 = inttoptr i64 %1016 to i32*
  %1020 = load i32, i32* %1019
  %1021 = sext i32 %1020 to i64
  %1022 = add nsw i64 %1021, -112
  %1023 = add i64 %1022, %1015
  %1024 = inttoptr i64 %1023 to i8*
  %1025 = load i8, i8* %1024
  %1026 = sext i8 %1025 to i32
  %1027 = add nsw i32 %1026, -46
  %1028 = icmp eq i32 %1027, 0
  %1029 = add i64 %1015, -244
  %1030 = trunc i64 %1014 to i32
  %1031 = inttoptr i64 %1029 to i32*
  store i32 %1030, i32* %1031
  %1032 = select i1 %1028, i64 31, i64 49
  %1033 = add i64 %1017, %1032
  br i1 %1028, label %block_416370, label %block_416382

block_416309:                                     ; preds = %block_4162f9
  %1034 = add i64 %1101, 1
  %1035 = inttoptr i64 %1034 to i8*
  %1036 = load i8, i8* %1035
  %1037 = sext i8 %1036 to i64
  %1038 = and i64 %1037, 4294967295
  store i64 %1038, i64* %15, align 8, !tbaa !1240
  %1039 = sext i8 %1036 to i32
  %1040 = add nsw i32 %1039, -80
  %1041 = icmp eq i32 %1040, 0
  %1042 = select i1 %1041, i64 17, i64 167
  %1043 = add i64 %1110, %1042
  br i1 %1041, label %block_41631a, label %block_4163b0

block_416382:                                     ; preds = %block_416370, %block_41631a
  %1044 = phi i64 [ %1033, %block_41631a ], [ %1120, %block_416370 ]
  %1045 = phi %struct.Memory* [ %2, %block_41631a ], [ %2, %block_416370 ]
  %1046 = add i64 %1015, -112
  %1047 = inttoptr i64 %1016 to i32*
  %1048 = load i32, i32* %1047
  %1049 = add i32 %1048, 1
  %1050 = sext i32 %1049 to i64
  store i64 %1050, i64* %15, align 8, !tbaa !1240
  %1051 = add nsw i64 %1050, -112
  %1052 = add i64 %1051, %1015
  %1053 = inttoptr i64 %1052 to i8*
  store i8 0, i8* %1053
  %1054 = add i64 %1044, 35
  %1055 = load i64, i64* %19, align 8, !tbaa !1240
  %1056 = add i64 %1055, -8
  %1057 = inttoptr i64 %1056 to i64*
  store i64 %1054, i64* %1057
  %1058 = load i64, i64* %168, align 8, !alias.scope !1423, !noalias !1426
  %1059 = load i64, i64* %170, align 8, !alias.scope !1423, !noalias !1426
  %1060 = load i64, i64* %171, align 8, !alias.scope !1423, !noalias !1426
  %1061 = inttoptr i64 %1055 to i64*
  %1062 = load i64, i64* %1061
  %1063 = add i64 %1055, 8
  %1064 = inttoptr i64 %1063 to i64*
  %1065 = load i64, i64* %1064
  %1066 = add i64 %1055, 16
  %1067 = inttoptr i64 %1066 to i64*
  %1068 = load i64, i64* %1067
  %1069 = add i64 %1055, 24
  %1070 = inttoptr i64 %1069 to i64*
  %1071 = load i64, i64* %1070
  %1072 = add i64 %1055, 32
  %1073 = inttoptr i64 %1072 to i64*
  %1074 = load i64, i64* %1073
  %1075 = add i64 %1055, 40
  %1076 = inttoptr i64 %1075 to i64*
  %1077 = load i64, i64* %1076
  %1078 = add i64 %1055, 48
  %1079 = inttoptr i64 %1078 to i64*
  %1080 = load i64, i64* %1079
  %1081 = add i64 %1055, 56
  %1082 = inttoptr i64 %1081 to i64*
  %1083 = load i64, i64* %1082
  %1084 = add i64 %1055, 64
  %1085 = inttoptr i64 %1084 to i64*
  %1086 = load i64, i64* %1085
  %1087 = add i64 %1055, 72
  %1088 = inttoptr i64 %1087 to i64*
  %1089 = load i64, i64* %1088
  %1090 = inttoptr i64 %1056 to i64*
  %1091 = load i64, i64* %1090
  store i64 %1091, i64* %3, align 8, !alias.scope !1423, !noalias !1426
  store i64 %1055, i64* %19, align 8, !alias.scope !1423, !noalias !1426
  %1092 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1017), i64 %1046, i64 %1058, i64 %1050, i64 %1059, i64 %1060, i64 %1062, i64 %1065, i64 %1068, i64 %1071, i64 %1074, i64 %1077, i64 %1080, i64 %1083, i64 %1086, i64 %1089), !noalias !1423
  %1093 = load i64, i64* %20, align 8
  %1094 = add i64 %1093, -248
  %1095 = trunc i64 %1092 to i32
  %1096 = load i64, i64* %3, align 8
  %1097 = inttoptr i64 %1094 to i32*
  store i32 %1095, i32* %1097
  %1098 = add i64 %1096, 37
  br label %block_4163ca

block_4162f9:                                     ; preds = %block_4162ef
  %1099 = add i64 %258, -48
  %1100 = inttoptr i64 %1099 to i64*
  %1101 = load i64, i64* %1100
  %1102 = inttoptr i64 %1101 to i8*
  %1103 = load i8, i8* %1102
  %1104 = sext i8 %1103 to i64
  %1105 = and i64 %1104, 4294967295
  store i64 %1105, i64* %15, align 8, !tbaa !1240
  %1106 = sext i8 %1103 to i32
  %1107 = add nsw i32 %1106, -69
  %1108 = icmp eq i32 %1107, 0
  %1109 = select i1 %1108, i64 16, i64 183
  %1110 = add i64 %274, %1109
  br i1 %1108, label %block_416309, label %block_4163b0

block_416370:                                     ; preds = %block_41631a
  %1111 = inttoptr i64 %1016 to i32*
  %1112 = load i32, i32* %1111
  %1113 = sext i32 %1112 to i64
  %1114 = add nsw i64 %1113, -112
  %1115 = add i64 %1114, %1015
  %1116 = inttoptr i64 %1115 to i8*
  store i8 32, i8* %1116
  %1117 = inttoptr i64 %1016 to i32*
  %1118 = load i32, i32* %1117
  %1119 = add i32 %1118, -1
  %1120 = add i64 %1033, 18
  %1121 = inttoptr i64 %1016 to i32*
  store i32 %1119, i32* %1121
  br label %block_416382

block_4163ef:                                     ; preds = %block_4163ca, %block_4163cf
  %1122 = phi i64 [ %322, %block_4163cf ], [ %948, %block_4163ca ]
  %1123 = phi i64 [ %326, %block_4163cf ], [ %951, %block_4163ca ]
  %1124 = phi %struct.Memory* [ %2, %block_4163cf ], [ %950, %block_4163ca ]
  %1125 = add i64 %1122, -68
  %1126 = inttoptr i64 %1125 to i32*
  %1127 = load i32, i32* %1126
  %1128 = zext i32 %1127 to i64
  store i64 %1128, i64* %17, align 8, !tbaa !1240
  %1129 = add i64 %1123, 20
  %1130 = load i64, i64* %19, align 8, !tbaa !1240
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1129, i64* %1132
  %1133 = load i64, i64* %168, align 8, !alias.scope !1428, !noalias !1431
  %1134 = load i64, i64* %167, align 8, !alias.scope !1428, !noalias !1431
  %1135 = load i64, i64* %170, align 8, !alias.scope !1428, !noalias !1431
  %1136 = load i64, i64* %171, align 8, !alias.scope !1428, !noalias !1431
  %1137 = inttoptr i64 %1130 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1130, 8
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1130, 16
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = add i64 %1130, 24
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = add i64 %1130, 32
  %1149 = inttoptr i64 %1148 to i64*
  %1150 = load i64, i64* %1149
  %1151 = add i64 %1130, 40
  %1152 = inttoptr i64 %1151 to i64*
  %1153 = load i64, i64* %1152
  %1154 = add i64 %1130, 48
  %1155 = inttoptr i64 %1154 to i64*
  %1156 = load i64, i64* %1155
  %1157 = add i64 %1130, 56
  %1158 = inttoptr i64 %1157 to i64*
  %1159 = load i64, i64* %1158
  %1160 = add i64 %1130, 64
  %1161 = inttoptr i64 %1160 to i64*
  %1162 = load i64, i64* %1161
  %1163 = add i64 %1130, 72
  %1164 = inttoptr i64 %1163 to i64*
  %1165 = load i64, i64* %1164
  %1166 = inttoptr i64 %1131 to i64*
  %1167 = load i64, i64* %1166
  store i64 %1167, i64* %3, align 8, !alias.scope !1428, !noalias !1431
  store i64 %1130, i64* %19, align 8, !alias.scope !1428, !noalias !1431
  %1168 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 250), i64 %1128, i64 %1133, i64 %1134, i64 %1135, i64 %1136, i64 %1138, i64 %1141, i64 %1144, i64 %1147, i64 %1150, i64 %1153, i64 %1156, i64 %1159, i64 %1162, i64 %1165), !noalias !1428
  %1169 = load i64, i64* %3, align 8
  %1170 = load i64, i64* %20, align 8
  %1171 = add i64 %1170, -80
  %1172 = inttoptr i64 %1171 to double*
  %1173 = load double, double* %1172
  store double %1173, double* %123, align 1, !tbaa !1246
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1175 = bitcast i64* %1174 to double*
  store double 0.000000e+00, double* %1175, align 1, !tbaa !1246
  %1176 = add i64 %1170, -260
  %1177 = trunc i64 %1168 to i32
  %1178 = inttoptr i64 %1176 to i32*
  store i32 %1177, i32* %1178
  %1179 = add i64 %1169, 28
  %1180 = load i64, i64* %19, align 8, !tbaa !1240
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1179, i64* %1182
  %1183 = load i64, i64* %169, align 8, !alias.scope !1433, !noalias !1436
  %1184 = load i64, i64* %168, align 8, !alias.scope !1433, !noalias !1436
  %1185 = load i64, i64* %167, align 8, !alias.scope !1433, !noalias !1436
  %1186 = load i64, i64* %170, align 8, !alias.scope !1433, !noalias !1436
  %1187 = load i64, i64* %171, align 8, !alias.scope !1433, !noalias !1436
  %1188 = inttoptr i64 %1180 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1180, 8
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = add i64 %1180, 16
  %1194 = inttoptr i64 %1193 to i64*
  %1195 = load i64, i64* %1194
  %1196 = add i64 %1180, 24
  %1197 = inttoptr i64 %1196 to i64*
  %1198 = load i64, i64* %1197
  %1199 = add i64 %1180, 32
  %1200 = inttoptr i64 %1199 to i64*
  %1201 = load i64, i64* %1200
  %1202 = add i64 %1180, 40
  %1203 = inttoptr i64 %1202 to i64*
  %1204 = load i64, i64* %1203
  %1205 = add i64 %1180, 48
  %1206 = inttoptr i64 %1205 to i64*
  %1207 = load i64, i64* %1206
  %1208 = add i64 %1180, 56
  %1209 = inttoptr i64 %1208 to i64*
  %1210 = load i64, i64* %1209
  %1211 = add i64 %1180, 64
  %1212 = inttoptr i64 %1211 to i64*
  %1213 = load i64, i64* %1212
  %1214 = add i64 %1180, 72
  %1215 = inttoptr i64 %1214 to i64*
  %1216 = load i64, i64* %1215
  %1217 = inttoptr i64 %1181 to i64*
  %1218 = load i64, i64* %1217
  store i64 %1218, i64* %3, align 8, !alias.scope !1433, !noalias !1436
  store i64 %1180, i64* %19, align 8, !alias.scope !1433, !noalias !1436
  %1219 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1130), i64 %1183, i64 %1184, i64 %1185, i64 %1186, i64 %1187, i64 %1189, i64 %1192, i64 %1195, i64 %1198, i64 %1201, i64 %1204, i64 %1207, i64 %1210, i64 %1213, i64 %1216), !noalias !1433
  %1220 = load i64, i64* %3, align 8
  %1221 = load i64, i64* %20, align 8
  %1222 = add i64 %1221, -88
  %1223 = inttoptr i64 %1222 to double*
  %1224 = load double, double* %1223
  store double %1224, double* %123, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1175, align 1, !tbaa !1246
  %1225 = add i64 %1221, -264
  %1226 = trunc i64 %1219 to i32
  %1227 = inttoptr i64 %1225 to i32*
  store i32 %1226, i32* %1227
  %1228 = add i64 %1220, 28
  %1229 = load i64, i64* %19, align 8, !tbaa !1240
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %169, align 8, !alias.scope !1438, !noalias !1441
  %1233 = load i64, i64* %168, align 8, !alias.scope !1438, !noalias !1441
  %1234 = load i64, i64* %167, align 8, !alias.scope !1438, !noalias !1441
  %1235 = load i64, i64* %170, align 8, !alias.scope !1438, !noalias !1441
  %1236 = load i64, i64* %171, align 8, !alias.scope !1438, !noalias !1441
  %1237 = inttoptr i64 %1229 to i64*
  %1238 = load i64, i64* %1237
  %1239 = add i64 %1229, 8
  %1240 = inttoptr i64 %1239 to i64*
  %1241 = load i64, i64* %1240
  %1242 = add i64 %1229, 16
  %1243 = inttoptr i64 %1242 to i64*
  %1244 = load i64, i64* %1243
  %1245 = add i64 %1229, 24
  %1246 = inttoptr i64 %1245 to i64*
  %1247 = load i64, i64* %1246
  %1248 = add i64 %1229, 32
  %1249 = inttoptr i64 %1248 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1229, 40
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1229, 48
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1229, 56
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1229, 64
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1229, 72
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = inttoptr i64 %1230 to i64*
  %1267 = load i64, i64* %1266
  store i64 %1267, i64* %3, align 8, !alias.scope !1438, !noalias !1441
  store i64 %1229, i64* %19, align 8, !alias.scope !1438, !noalias !1441
  %1268 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1170), i64 %1232, i64 %1233, i64 %1234, i64 %1235, i64 %1236, i64 %1238, i64 %1241, i64 %1244, i64 %1247, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265), !noalias !1438
  %1269 = load i64, i64* %3, align 8
  %1270 = load i64, i64* %20, align 8
  %1271 = add i64 %1270, 16
  %1272 = inttoptr i64 %1271 to i64*
  %1273 = load i64, i64* %1272
  %1274 = add i64 %1270, -268
  %1275 = trunc i64 %1268 to i32
  %1276 = inttoptr i64 %1274 to i32*
  store i32 %1275, i32* %1276
  %1277 = add i64 %1269, 27
  %1278 = load i64, i64* %19, align 8, !tbaa !1240
  %1279 = add i64 %1278, -8
  %1280 = inttoptr i64 %1279 to i64*
  store i64 %1277, i64* %1280
  %1281 = load i64, i64* %168, align 8, !alias.scope !1443, !noalias !1446
  %1282 = load i64, i64* %167, align 8, !alias.scope !1443, !noalias !1446
  %1283 = load i64, i64* %170, align 8, !alias.scope !1443, !noalias !1446
  %1284 = load i64, i64* %171, align 8, !alias.scope !1443, !noalias !1446
  %1285 = inttoptr i64 %1278 to i64*
  %1286 = load i64, i64* %1285
  %1287 = add i64 %1278, 8
  %1288 = inttoptr i64 %1287 to i64*
  %1289 = load i64, i64* %1288
  %1290 = add i64 %1278, 16
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  %1293 = add i64 %1278, 24
  %1294 = inttoptr i64 %1293 to i64*
  %1295 = load i64, i64* %1294
  %1296 = add i64 %1278, 32
  %1297 = inttoptr i64 %1296 to i64*
  %1298 = load i64, i64* %1297
  %1299 = add i64 %1278, 40
  %1300 = inttoptr i64 %1299 to i64*
  %1301 = load i64, i64* %1300
  %1302 = add i64 %1278, 48
  %1303 = inttoptr i64 %1302 to i64*
  %1304 = load i64, i64* %1303
  %1305 = add i64 %1278, 56
  %1306 = inttoptr i64 %1305 to i64*
  %1307 = load i64, i64* %1306
  %1308 = add i64 %1278, 64
  %1309 = inttoptr i64 %1308 to i64*
  %1310 = load i64, i64* %1309
  %1311 = add i64 %1278, 72
  %1312 = inttoptr i64 %1311 to i64*
  %1313 = load i64, i64* %1312
  %1314 = inttoptr i64 %1279 to i64*
  %1315 = load i64, i64* %1314
  store i64 %1315, i64* %3, align 8, !alias.scope !1443, !noalias !1446
  store i64 %1278, i64* %19, align 8, !alias.scope !1443, !noalias !1446
  %1316 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 365), i64 %1273, i64 %1281, i64 %1282, i64 %1283, i64 %1284, i64 %1286, i64 %1289, i64 %1292, i64 %1295, i64 %1298, i64 %1301, i64 %1304, i64 %1307, i64 %1310, i64 %1313), !noalias !1443
  %1317 = load i64, i64* %20, align 8
  %1318 = add i64 %1317, 24
  %1319 = load i64, i64* %3, align 8
  %1320 = inttoptr i64 %1318 to i32*
  %1321 = load i32, i32* %1320
  %1322 = icmp eq i32 %1321, 0
  %1323 = add i64 %1317, -272
  %1324 = trunc i64 %1316 to i32
  %1325 = inttoptr i64 %1323 to i32*
  store i32 %1324, i32* %1325
  %1326 = select i1 %1322, i64 54, i64 16
  %1327 = add i64 %1319, %1326
  br i1 %1322, label %block_41648c, label %block_416466

block_416466:                                     ; preds = %block_4163ef
  %1328 = add i64 %1327, 27
  %1329 = load i64, i64* %19, align 8, !tbaa !1240
  %1330 = add i64 %1329, -8
  %1331 = inttoptr i64 %1330 to i64*
  store i64 %1328, i64* %1331
  %1332 = load i64, i64* %168, align 8, !alias.scope !1448, !noalias !1451
  %1333 = load i64, i64* %167, align 8, !alias.scope !1448, !noalias !1451
  %1334 = load i64, i64* %170, align 8, !alias.scope !1448, !noalias !1451
  %1335 = load i64, i64* %171, align 8, !alias.scope !1448, !noalias !1451
  %1336 = inttoptr i64 %1329 to i64*
  %1337 = load i64, i64* %1336
  %1338 = add i64 %1329, 8
  %1339 = inttoptr i64 %1338 to i64*
  %1340 = load i64, i64* %1339
  %1341 = add i64 %1329, 16
  %1342 = inttoptr i64 %1341 to i64*
  %1343 = load i64, i64* %1342
  %1344 = add i64 %1329, 24
  %1345 = inttoptr i64 %1344 to i64*
  %1346 = load i64, i64* %1345
  %1347 = add i64 %1329, 32
  %1348 = inttoptr i64 %1347 to i64*
  %1349 = load i64, i64* %1348
  %1350 = add i64 %1329, 40
  %1351 = inttoptr i64 %1350 to i64*
  %1352 = load i64, i64* %1351
  %1353 = add i64 %1329, 48
  %1354 = inttoptr i64 %1353 to i64*
  %1355 = load i64, i64* %1354
  %1356 = add i64 %1329, 56
  %1357 = inttoptr i64 %1356 to i64*
  %1358 = load i64, i64* %1357
  %1359 = add i64 %1329, 64
  %1360 = inttoptr i64 %1359 to i64*
  %1361 = load i64, i64* %1360
  %1362 = add i64 %1329, 72
  %1363 = inttoptr i64 %1362 to i64*
  %1364 = load i64, i64* %1363
  %1365 = inttoptr i64 %1330 to i64*
  %1366 = load i64, i64* %1365
  store i64 %1366, i64* %3, align 8, !alias.scope !1448, !noalias !1451
  store i64 %1329, i64* %19, align 8, !alias.scope !1448, !noalias !1451
  %1367 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1207), i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1246), i64 %1332, i64 %1333, i64 %1334, i64 %1335, i64 %1337, i64 %1340, i64 %1343, i64 %1346, i64 %1349, i64 %1352, i64 %1355, i64 %1358, i64 %1361, i64 %1364), !noalias !1448
  %1368 = load i64, i64* %20, align 8
  %1369 = add i64 %1368, -276
  %1370 = trunc i64 %1367 to i32
  %1371 = load i64, i64* %3, align 8
  %1372 = inttoptr i64 %1369 to i32*
  store i32 %1370, i32* %1372
  %1373 = add i64 %1371, 44
  br label %block_4164ad
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b50_check_refine(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400b50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -16
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = inttoptr i64 %24 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %10, align 8, !tbaa !1240
  %29 = inttoptr i64 %28 to i32*
  store i32 0, i32* %29
  %30 = add i64 %14, -20
  %31 = add i64 %1, 29
  %32 = inttoptr i64 %30 to i32*
  store i32 0, i32* %32
  br label %block_400b6d

block_400cfe:                                     ; preds = %block_400ba0
  %33 = mul nsw i64 %404, 24
  %34 = add i64 %33, ptrtoint (%cbc_type* @cbc to i64)
  %35 = add i64 %400, -28
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36
  %38 = sext i32 %37 to i64
  store i64 %38, i64* %7, align 8, !tbaa !1240
  %39 = shl nsw i64 %38, 2
  %40 = add i64 %39, %34
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41
  %43 = add i32 %42, -2
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i64 35, i64 217
  %46 = add i64 %399, %45
  %47 = load i64, i64* %12, align 8
  br i1 %44, label %block_400d21, label %block_400ddc

block_400df4:                                     ; preds = %block_400b7d, %block_400def
  %48 = phi i64 [ %308, %block_400b7d ], [ %329, %block_400def ]
  %49 = phi i64 [ %356, %block_400b7d ], [ %295, %block_400def ]
  %50 = phi %struct.Memory* [ %309, %block_400b7d ], [ %330, %block_400def ]
  %51 = add i64 %48, -12
  %52 = inttoptr i64 %51 to i32*
  %53 = load i32, i32* %52
  %54 = add i32 %53, 1
  %55 = inttoptr i64 %51 to i32*
  store i32 %54, i32* %55
  %56 = add i64 %49, -647
  br label %block_400b6d

block_400ce6:                                     ; preds = %block_400c41, %block_400ce1, %block_400c4d
  %57 = phi i64 [ %189, %block_400c41 ], [ %189, %block_400c4d ], [ %96, %block_400ce1 ]
  %58 = phi i64 [ %133, %block_400c41 ], [ %92, %block_400c4d ], [ %95, %block_400ce1 ]
  %59 = phi %struct.Memory* [ %190, %block_400c41 ], [ %190, %block_400c4d ], [ %94, %block_400ce1 ]
  %60 = add i64 %57, -16
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61
  %63 = add i32 %62, 1
  %64 = inttoptr i64 %60 to i32*
  store i32 %63, i32* %64
  %65 = add i64 %58, -175
  br label %block_400c37

block_400ddc.loopexit:                            ; preds = %block_400c37
  br label %block_400ddc

block_400ddc:                                     ; preds = %block_400dd2, %block_400ddc.loopexit, %block_400cfe
  %66 = phi i64 [ %47, %block_400dd2 ], [ %47, %block_400cfe ], [ %189, %block_400ddc.loopexit ]
  %67 = phi i64 [ %230, %block_400dd2 ], [ %46, %block_400cfe ], [ %204, %block_400ddc.loopexit ]
  %68 = phi i64 [ 5, %block_400dd2 ], [ 5, %block_400cfe ], [ 227, %block_400ddc.loopexit ]
  %69 = phi %struct.Memory* [ %259, %block_400dd2 ], [ %330, %block_400cfe ], [ %190, %block_400ddc.loopexit ]
  %70 = add i64 %67, %68
  %71 = add i64 %66, -28
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72
  %74 = add i32 %73, 1
  %75 = inttoptr i64 %71 to i32*
  store i32 %74, i32* %75
  %76 = add i64 %70, -582
  br label %block_400b96

block_400ccd:                                     ; preds = %block_400cb3
  %77 = load i64, i64* %12, align 8
  %78 = add i64 %77, -24
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = sext i32 %80 to i64
  %82 = shl nsw i64 %81, 2
  %83 = add i64 %82, ptrtoint (%ich_type* @ich to i64)
  %84 = add i64 %254, 15
  %85 = inttoptr i64 %83 to i32*
  store i32 4, i32* %85
  br label %block_400cdc

block_400c4d:                                     ; preds = %block_400c41
  %86 = add i64 %189, -32
  %87 = inttoptr i64 %86 to i32*
  %88 = load i32, i32* %87
  %89 = sub i32 %193, %88
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, i64 153, i64 12
  %92 = add i64 %133, %91
  br i1 %90, label %block_400ce6, label %block_400c59

block_400ce1:                                     ; preds = %block_400cdc, %block_400c59
  %93 = phi i64 [ %224, %block_400c59 ], [ %257, %block_400cdc ]
  %94 = phi %struct.Memory* [ %190, %block_400c59 ], [ %256, %block_400cdc ]
  %95 = add i64 %93, 5
  %96 = load i64, i64* %12, align 8
  br label %block_400ce6

block_400c7c:                                     ; preds = %block_400c59
  %97 = load i64, i64* %12, align 8
  %98 = add i64 %97, -20
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  %102 = mul nsw i64 %101, 96
  %103 = add i64 %102, ptrtoint (%sje_type* @sje to i64)
  %104 = add i64 %97, -16
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = sext i32 %106 to i64
  %108 = shl nsw i64 %107, 4
  store i64 %108, i64* %7, align 8, !tbaa !1240
  %109 = add i64 %108, %103
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110
  %112 = zext i32 %111 to i64
  store i64 %112, i64* %8, align 8, !tbaa !1240
  %113 = load i64, i64* %12, align 8
  %114 = add i64 %113, -24
  %115 = inttoptr i64 %114 to i32*
  store i32 %111, i32* %115
  %116 = inttoptr i64 %114 to i32*
  %117 = load i32, i32* %116
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 2
  %120 = add i64 %119, ptrtoint (%ich_type* @ich to i64)
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121
  %123 = add i32 %122, -4
  %124 = icmp eq i32 %123, 0
  %125 = select i1 %124, i64 96, i64 55
  %126 = add i64 %224, %125
  br i1 %124, label %block_400cdc, label %block_400cb3

block_400c41:                                     ; preds = %block_400c37
  %127 = add i64 %189, -28
  %128 = inttoptr i64 %127 to i32*
  %129 = load i32, i32* %128
  %130 = sub i32 %193, %129
  %131 = icmp eq i32 %130, 0
  %132 = select i1 %131, i64 165, i64 12
  %133 = add i64 %204, %132
  br i1 %131, label %block_400ce6, label %block_400c4d

block_400d6d:                                     ; preds = %block_400d4a
  %134 = mul nsw i64 %275, 96
  %135 = add i64 %134, ptrtoint (%sje_type* @sje to i64)
  %136 = shl nsw i64 %278, 4
  store i64 %136, i64* %7, align 8, !tbaa !1240
  %137 = add i64 %136, %135
  %138 = inttoptr i64 %137 to i32*
  %139 = load i32, i32* %138
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %8, align 8, !tbaa !1240
  %141 = inttoptr i64 %292 to i32*
  store i32 %139, i32* %141
  %142 = inttoptr i64 %292 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 2
  %146 = add i64 %145, ptrtoint (%ich_type* @ich to i64)
  %147 = inttoptr i64 %146 to i32*
  store i32 4, i32* %147
  %148 = inttoptr i64 %293 to i32*
  %149 = load i32, i32* %148
  %150 = sext i32 %149 to i64
  %151 = shl nsw i64 %150, 2
  %152 = add i64 %151, ptrtoint (%ich_type* @ich to i64)
  %153 = inttoptr i64 %152 to i32*
  store i32 0, i32* %153
  %154 = inttoptr i64 %294 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %285, 77
  %157 = inttoptr i64 %155 to i32*
  store i32 1, i32* %157
  br label %block_400dba

block_400dbf:                                     ; preds = %block_400d32, %block_400dba, %block_400d3e
  %158 = phi i64 [ %209, %block_400d32 ], [ %184, %block_400d3e ], [ %187, %block_400dba ]
  %159 = phi %struct.Memory* [ %259, %block_400d32 ], [ %259, %block_400d3e ], [ %186, %block_400dba ]
  %160 = inttoptr i64 %286 to i32*
  %161 = load i32, i32* %160
  %162 = add i32 %161, 1
  %163 = inttoptr i64 %286 to i32*
  store i32 %162, i32* %163
  %164 = add i64 %158, -151
  br label %block_400d28

block_400bf6:                                     ; preds = %block_400ba0
  %165 = shl nsw i64 %404, 2
  %166 = add i64 %165, ptrtoint (%ich_type* @ich to i64)
  %167 = inttoptr i64 %166 to i32*
  store i32 0, i32* %167
  %168 = add i64 %400, -20
  %169 = inttoptr i64 %168 to i32*
  %170 = load i32, i32* %169
  %171 = sext i32 %170 to i64
  %172 = shl nsw i64 %171, 2
  %173 = add i64 %172, ptrtoint (%ich_type* @ich to i64)
  %174 = inttoptr i64 %173 to i32*
  %175 = load i32, i32* %174
  %176 = add i32 %175, -4
  %177 = icmp eq i32 %176, 0
  %178 = select i1 %177, i64 58, i64 33
  %179 = add i64 %399, %178
  br i1 %177, label %block_400c30, label %block_400c17

block_400d3e:                                     ; preds = %block_400d32
  %180 = inttoptr i64 %290 to i32*
  %181 = load i32, i32* %180
  %182 = icmp eq i32 %261, %181
  %183 = select i1 %182, i64 129, i64 12
  %184 = add i64 %209, %183
  br i1 %182, label %block_400dbf, label %block_400d4a

block_400dba:                                     ; preds = %block_400d4a, %block_400d6d
  %185 = phi i64 [ %285, %block_400d4a ], [ %156, %block_400d6d ]
  %186 = phi %struct.Memory* [ %259, %block_400d4a ], [ %259, %block_400d6d ]
  %187 = add i64 %185, 5
  br label %block_400dbf

block_400c37:                                     ; preds = %block_400c30, %block_400ce6
  %188 = phi i64 [ %228, %block_400c30 ], [ %65, %block_400ce6 ]
  %189 = phi i64 [ %400, %block_400c30 ], [ %57, %block_400ce6 ]
  %190 = phi %struct.Memory* [ %226, %block_400c30 ], [ %59, %block_400ce6 ]
  %191 = add i64 %189, -16
  %192 = inttoptr i64 %191 to i32*
  %193 = load i32, i32* %192
  %194 = add i32 %193, -6
  %195 = lshr i32 %194, 31
  %196 = trunc i32 %195 to i8
  %197 = lshr i32 %193, 31
  %198 = xor i32 %195, %197
  %199 = add nuw nsw i32 %198, %197
  %200 = icmp eq i32 %199, 2
  %201 = icmp ne i8 %196, 0
  %202 = xor i1 %201, %200
  %203 = select i1 %202, i64 10, i64 194
  %204 = add i64 %188, %203
  br i1 %202, label %block_400c41, label %block_400ddc.loopexit

block_400d32:                                     ; preds = %block_400d28
  %205 = inttoptr i64 %289 to i32*
  %206 = load i32, i32* %205
  %207 = icmp eq i32 %261, %206
  %208 = select i1 %207, i64 141, i64 12
  %209 = add i64 %272, %208
  br i1 %207, label %block_400dbf, label %block_400d3e

block_400c59:                                     ; preds = %block_400c4d
  %210 = add i64 %189, -20
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211
  %213 = sext i32 %212 to i64
  %214 = mul nsw i64 %213, 24
  %215 = add i64 %214, ptrtoint (%cbc_type* @cbc to i64)
  %216 = sext i32 %193 to i64
  store i64 %216, i64* %7, align 8, !tbaa !1240
  %217 = shl nsw i64 %216, 2
  %218 = add i64 %217, %215
  %219 = inttoptr i64 %218 to i32*
  %220 = load i32, i32* %219
  %221 = add i32 %220, -2
  %222 = icmp eq i32 %221, 0
  %223 = select i1 %222, i64 35, i64 136
  %224 = add i64 %92, %223
  br i1 %222, label %block_400c7c, label %block_400ce1

block_400c30:                                     ; preds = %block_400c17, %block_400bf6
  %225 = phi i64 [ %179, %block_400bf6 ], [ %305, %block_400c17 ]
  %226 = phi %struct.Memory* [ %330, %block_400bf6 ], [ %330, %block_400c17 ]
  %227 = add i64 %400, -16
  %228 = add i64 %225, 7
  %229 = inttoptr i64 %227 to i32*
  store i32 0, i32* %229
  br label %block_400c37

block_400dd2:                                     ; preds = %block_400d28
  %230 = add i64 %272, 5
  br label %block_400ddc

block_400cb3:                                     ; preds = %block_400c7c
  %231 = add i64 %113, -12
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232
  %234 = zext i32 %233 to i64
  store i64 %234, i64* %10, align 8, !tbaa !1240
  %235 = zext i32 %117 to i64
  store i64 %235, i64* %9, align 8, !tbaa !1240
  %236 = add i64 %113, -28
  %237 = inttoptr i64 %236 to i32*
  %238 = load i32, i32* %237
  %239 = zext i32 %238 to i64
  store i64 %239, i64* %8, align 8, !tbaa !1240
  %240 = add i64 %113, -16
  %241 = inttoptr i64 %240 to i32*
  %242 = load i32, i32* %241
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %7, align 8, !tbaa !1240
  %244 = add i64 %126, 18477
  %245 = add i64 %126, 17
  %246 = load i64, i64* %11, align 8, !tbaa !1240
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248
  store i64 %247, i64* %11, align 8, !tbaa !1240
  %249 = tail call %struct.Memory* @sub_4054e0_ifcor(%struct.State* nonnull %0, i64 %244, %struct.Memory* %190)
  %250 = load i32, i32* %5, align 4
  %251 = load i64, i64* %3, align 8
  %252 = icmp eq i32 %250, 0
  %253 = select i1 %252, i64 24, i64 9
  %254 = add i64 %251, %253
  br i1 %252, label %block_400cdc, label %block_400ccd

block_400cdc:                                     ; preds = %block_400cb3, %block_400c7c, %block_400ccd
  %255 = phi i64 [ %126, %block_400c7c ], [ %254, %block_400cb3 ], [ %84, %block_400ccd ]
  %256 = phi %struct.Memory* [ %190, %block_400c7c ], [ %249, %block_400cb3 ], [ %249, %block_400ccd ]
  %257 = add i64 %255, 5
  br label %block_400ce1

block_400d28:                                     ; preds = %block_400d21, %block_400dbf
  %258 = phi i64 [ %287, %block_400d21 ], [ %164, %block_400dbf ]
  %259 = phi %struct.Memory* [ %330, %block_400d21 ], [ %159, %block_400dbf ]
  %260 = inttoptr i64 %286 to i32*
  %261 = load i32, i32* %260
  %262 = add i32 %261, -6
  %263 = lshr i32 %262, 31
  %264 = trunc i32 %263 to i8
  %265 = lshr i32 %261, 31
  %266 = xor i32 %263, %265
  %267 = add nuw nsw i32 %266, %265
  %268 = icmp eq i32 %267, 2
  %269 = icmp ne i8 %264, 0
  %270 = xor i1 %269, %268
  %271 = select i1 %270, i64 10, i64 170
  %272 = add i64 %258, %271
  br i1 %270, label %block_400d32, label %block_400dd2

block_400d4a:                                     ; preds = %block_400d3e
  %273 = inttoptr i64 %291 to i32*
  %274 = load i32, i32* %273
  %275 = sext i32 %274 to i64
  %276 = mul nsw i64 %275, 24
  %277 = add i64 %276, ptrtoint (%cbc_type* @cbc to i64)
  %278 = sext i32 %261 to i64
  store i64 %278, i64* %7, align 8, !tbaa !1240
  %279 = shl nsw i64 %278, 2
  %280 = add i64 %279, %277
  %281 = inttoptr i64 %280 to i32*
  %282 = load i32, i32* %281
  %283 = icmp ne i32 %282, 1
  %284 = select i1 %283, i64 112, i64 35
  %285 = add i64 %184, %284
  br i1 %283, label %block_400dba, label %block_400d6d

block_400d21:                                     ; preds = %block_400cfe
  %286 = add i64 %47, -16
  %287 = add i64 %46, 7
  %288 = inttoptr i64 %286 to i32*
  store i32 0, i32* %288
  %289 = add i64 %47, -28
  %290 = add i64 %47, -32
  %291 = add i64 %47, -20
  %292 = add i64 %47, -24
  %293 = add i64 %47, -12
  %294 = add i64 %47, -8
  br label %block_400d28

block_400def:                                     ; preds = %block_400b96
  %295 = add i64 %344, 5
  br label %block_400df4

block_400c17:                                     ; preds = %block_400bf6
  %296 = add i64 %400, -8
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = inttoptr i64 %298 to i32*
  store i32 1, i32* %299
  %300 = inttoptr i64 %168 to i32*
  %301 = load i32, i32* %300
  %302 = sext i32 %301 to i64
  %303 = shl nsw i64 %302, 2
  %304 = add i64 %303, ptrtoint (%ich_type* @ich to i64)
  %305 = add i64 %179, 25
  %306 = inttoptr i64 %304 to i32*
  store i32 4, i32* %306
  br label %block_400c30

block_400b6d:                                     ; preds = %block_400df4, %block_400b50
  %307 = phi i64 [ %31, %block_400b50 ], [ %56, %block_400df4 ]
  %308 = phi i64 [ %15, %block_400b50 ], [ %48, %block_400df4 ]
  %309 = phi %struct.Memory* [ %2, %block_400b50 ], [ %50, %block_400df4 ]
  %310 = add i64 %308, -12
  %311 = inttoptr i64 %310 to i32*
  %312 = load i32, i32* %311
  %313 = zext i32 %312 to i64
  store i64 %313, i64* %6, align 8, !tbaa !1240
  %314 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %315 = sub i32 %312, %314
  %316 = lshr i32 %315, 31
  %317 = trunc i32 %316 to i8
  %318 = lshr i32 %312, 31
  %319 = lshr i32 %314, 31
  %320 = xor i32 %319, %318
  %321 = xor i32 %316, %318
  %322 = add nuw nsw i32 %321, %320
  %323 = icmp eq i32 %322, 2
  %324 = icmp ne i8 %317, 0
  %325 = xor i1 %324, %323
  %326 = select i1 %325, i64 16, i64 666
  %327 = add i64 %307, %326
  br i1 %325, label %block_400b7d, label %block_400e07

block_400b96:                                     ; preds = %block_400b8f, %block_400ddc
  %328 = phi i64 [ %346, %block_400b8f ], [ %76, %block_400ddc ]
  %329 = phi i64 [ %308, %block_400b8f ], [ %66, %block_400ddc ]
  %330 = phi %struct.Memory* [ %309, %block_400b8f ], [ %69, %block_400ddc ]
  %331 = add i64 %329, -28
  %332 = inttoptr i64 %331 to i32*
  %333 = load i32, i32* %332
  %334 = add i32 %333, -6
  %335 = lshr i32 %334, 31
  %336 = trunc i32 %335 to i8
  %337 = lshr i32 %333, 31
  %338 = xor i32 %335, %337
  %339 = add nuw nsw i32 %338, %337
  %340 = icmp eq i32 %339, 2
  %341 = icmp ne i8 %336, 0
  %342 = xor i1 %341, %340
  %343 = select i1 %342, i64 10, i64 601
  %344 = add i64 %328, %343
  br i1 %342, label %block_400ba0, label %block_400def

block_400b8f:                                     ; preds = %block_400b7d
  %345 = add i64 %308, -28
  %346 = add i64 %356, 7
  %347 = inttoptr i64 %345 to i32*
  store i32 0, i32* %347
  br label %block_400b96

block_400b7d:                                     ; preds = %block_400b6d
  %348 = sext i32 %312 to i64
  %349 = shl nsw i64 %348, 2
  %350 = add i64 %349, ptrtoint (%ich_type* @ich to i64)
  %351 = inttoptr i64 %350 to i32*
  %352 = load i32, i32* %351
  %353 = add i32 %352, -4
  %354 = icmp eq i32 %353, 0
  %355 = select i1 %354, i64 18, i64 631
  %356 = add i64 %327, %355
  br i1 %354, label %block_400b8f, label %block_400df4

block_400ba0:                                     ; preds = %block_400b96
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %6, align 8, !tbaa !1240
  %357 = sext i32 %333 to i64
  %358 = shl nsw i64 %357, 2
  %359 = add i64 %358, ptrtoint (%jjface_type* @jjface to i64)
  %360 = inttoptr i64 %359 to i32*
  %361 = load i32, i32* %360
  %362 = add i64 %329, -32
  %363 = inttoptr i64 %362 to i32*
  store i32 %361, i32* %363
  %364 = add i64 %329, -12
  %365 = inttoptr i64 %364 to i32*
  %366 = load i32, i32* %365
  %367 = sext i32 %366 to i64
  %368 = mul nsw i64 %367, 96
  %369 = add i64 %368, ptrtoint (%sje_type* @sje to i64)
  %370 = inttoptr i64 %331 to i32*
  %371 = load i32, i32* %370
  %372 = sext i32 %371 to i64
  %373 = shl nsw i64 %372, 4
  store i64 %373, i64* %8, align 8, !tbaa !1240
  %374 = add i64 %373, %369
  %375 = inttoptr i64 %374 to i32*
  %376 = load i32, i32* %375
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %9, align 8, !tbaa !1240
  %378 = load i64, i64* %12, align 8
  %379 = add i64 %378, -20
  %380 = inttoptr i64 %379 to i32*
  store i32 %376, i32* %380
  %381 = add i64 %378, -12
  %382 = inttoptr i64 %381 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = mul nsw i64 %384, 24
  %386 = load i64, i64* %6, align 8
  %387 = add i64 %385, %386
  %388 = add i64 %378, -28
  %389 = inttoptr i64 %388 to i32*
  %390 = load i32, i32* %389
  %391 = sext i32 %390 to i64
  store i64 %391, i64* %7, align 8, !tbaa !1240
  %392 = shl nsw i64 %391, 2
  %393 = add i64 %392, %387
  %394 = inttoptr i64 %393 to i32*
  %395 = load i32, i32* %394
  %396 = add i32 %395, -1
  %397 = icmp eq i32 %396, 0
  %398 = select i1 %397, i64 86, i64 350
  %399 = add i64 %344, %398
  %400 = load i64, i64* %12, align 8
  %401 = add i64 %400, -12
  %402 = inttoptr i64 %401 to i32*
  %403 = load i32, i32* %402
  %404 = sext i32 %403 to i64
  br i1 %397, label %block_400bf6, label %block_400cfe

block_400e07:                                     ; preds = %block_400b6d
  %405 = load i64, i64* %11, align 8
  %406 = add i64 %405, 32
  %407 = icmp ugt i64 %405, -33
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %18, align 1, !tbaa !1248
  %409 = trunc i64 %406 to i32
  %410 = and i32 %409, 255
  %411 = tail call i32 @llvm.ctpop.i32(i32 %410) #11
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  store i8 %414, i8* %19, align 1, !tbaa !1261
  %415 = xor i64 %406, %405
  %416 = lshr i64 %415, 4
  %417 = trunc i64 %416 to i8
  %418 = and i8 %417, 1
  store i8 %418, i8* %20, align 1, !tbaa !1262
  %419 = icmp eq i64 %406, 0
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %21, align 1, !tbaa !1263
  %421 = lshr i64 %406, 63
  %422 = trunc i64 %421 to i8
  store i8 %422, i8* %22, align 1, !tbaa !1264
  %423 = lshr i64 %405, 63
  %424 = xor i64 %421, %423
  %425 = add nuw nsw i64 %424, %421
  %426 = icmp eq i64 %425, 2
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %23, align 1, !tbaa !1265
  %428 = add i64 %405, 40
  %429 = inttoptr i64 %406 to i64*
  %430 = load i64, i64* %429
  store i64 %430, i64* %12, align 8, !tbaa !1240
  %431 = inttoptr i64 %428 to i64*
  %432 = load i64, i64* %431
  store i64 %432, i64* %3, align 8, !tbaa !1240
  %433 = add i64 %405, 48
  store i64 %433, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %309
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400a90_find_refine(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400a90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %13 = load i64, i64* %11, align 8
  %14 = load i64, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %11, align 8, !tbaa !1240
  %17 = add i64 %14, -24
  store i64 %17, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -16
  %25 = load i64, i64* %9, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = inttoptr i64 %24 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %9, align 8, !tbaa !1240
  %29 = inttoptr i64 %28 to i32*
  store i32 0, i32* %29
  %30 = add i64 %14, -20
  %31 = add i64 %1, 29
  %32 = inttoptr i64 %30 to i32*
  store i32 0, i32* %32
  %33 = bitcast %union.VectorReg* %12 to double*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  br label %block_400aad

block_400abd:                                     ; preds = %block_400aad
  %35 = sext i32 %144 to i64
  %36 = shl nsw i64 %35, 2
  %37 = add i64 %36, ptrtoint (%ich_type* @ich to i64)
  %38 = inttoptr i64 %37 to i32*
  store i32 0, i32* %38
  %39 = inttoptr i64 %142 to i32*
  %40 = load i32, i32* %39
  %41 = zext i32 %40 to i64
  store i64 %41, i64* %9, align 8, !tbaa !1240
  %42 = add i64 %159, 18291
  %43 = add i64 %159, 23
  %44 = load i64, i64* %10, align 8, !tbaa !1240
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %43, i64* %46
  store i64 %45, i64* %10, align 8, !tbaa !1240
  %47 = tail call %struct.Memory* @sub_405230_iftouch(%struct.State* nonnull %0, i64 %42, %struct.Memory* %141)
  %48 = load i32, i32* %5, align 4
  %49 = load i64, i64* %3, align 8
  %50 = icmp eq i32 %48, 0
  %51 = select i1 %50, i64 98, i64 9
  %52 = add i64 %49, %51
  br i1 %50, label %block_400b36, label %block_400add

block_400b36:                                     ; preds = %block_400b31, %block_400abd
  %53 = phi i64 [ %52, %block_400abd ], [ %138, %block_400b31 ]
  %54 = phi %struct.Memory* [ %47, %block_400abd ], [ %137, %block_400b31 ]
  %55 = load i64, i64* %11, align 8
  %56 = add i64 %55, -12
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57
  %59 = add i32 %58, 1
  %60 = inttoptr i64 %56 to i32*
  store i32 %59, i32* %60
  %61 = add i64 %53, -137
  br label %block_400aad

block_400add:                                     ; preds = %block_400abd
  %62 = load i64, i64* %11, align 8
  %63 = add i64 %62, -12
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64
  %66 = sext i32 %65 to i64
  %67 = shl nsw i64 %66, 6
  %68 = add i64 %67, ptrtoint (%xc_type* @xc to i64)
  store i64 %68, i64* %8, align 8, !tbaa !1240
  %69 = icmp ult i64 %68, ptrtoint (%xc_type* @xc to i64)
  %70 = icmp ult i64 %68, %67
  %71 = or i1 %69, %70
  %72 = zext i1 %71 to i8
  %73 = trunc i64 %68 to i32
  %74 = and i32 %73, 240
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #11
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = xor i64 %68, ptrtoint (%xc_type* @xc to i64)
  %80 = lshr exact i64 %79, 4
  %81 = trunc i64 %80 to i8
  %82 = and i8 %81, 1
  %83 = icmp eq i64 %68, 0
  %84 = zext i1 %83 to i8
  %85 = lshr i64 %68, 63
  %86 = trunc i64 %85 to i8
  %87 = lshr i64 %66, 57
  %88 = and i64 %87, 1
  %89 = xor i64 %85, lshr (i64 ptrtoint (%xc_type* @xc to i64), i64 63)
  %90 = xor i64 %85, %88
  %91 = add nuw nsw i64 %89, %90
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  %94 = add i64 %67, add (i64 ptrtoint (%xc_type* @xc to i64), i64 8)
  %95 = inttoptr i64 %94 to double*
  %96 = load double, double* %95
  store i64 %67, i64* %7, align 8, !tbaa !1240
  store i64 %68, i64* %6, align 8, !tbaa !1240
  store i8 %72, i8* %18, align 1, !tbaa !1248
  store i8 %78, i8* %19, align 1, !tbaa !1261
  store i8 %82, i8* %20, align 1, !tbaa !1262
  store i8 %84, i8* %21, align 1, !tbaa !1263
  store i8 %86, i8* %22, align 1, !tbaa !1264
  store i8 %93, i8* %23, align 1, !tbaa !1265
  %97 = inttoptr i64 %68 to double*
  %98 = load double, double* %97
  %99 = fsub double %96, %98
  store double %99, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %100 = add i64 %52, 53
  store i64 %100, i64* %3, align 8
  %101 = load double, double* bitcast (%dlmin_type* @dlmin to double*)
  %102 = fcmp uno double %99, %101
  br i1 %102, label %103, label %116

; <label>:103:                                    ; preds = %block_400add
  %104 = fadd double %99, %101
  %105 = bitcast double %104 to i64
  %106 = and i64 %105, 9221120237041090560
  %107 = icmp eq i64 %106, 9218868437227405312
  %108 = and i64 %105, 2251799813685247
  %109 = icmp ne i64 %108, 0
  %110 = and i1 %107, %109
  br i1 %110, label %111, label %122

; <label>:111:                                    ; preds = %103
  %112 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %100, %struct.Memory* %47) #14
  %113 = load i64, i64* %3, align 8
  %114 = load i8, i8* %18, align 1, !tbaa !1248
  %115 = load i8, i8* %21, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:116:                                    ; preds = %block_400add
  %117 = fcmp ogt double %99, %101
  br i1 %117, label %122, label %118

; <label>:118:                                    ; preds = %116
  %119 = fcmp olt double %99, %101
  br i1 %119, label %122, label %120

; <label>:120:                                    ; preds = %118
  %121 = fcmp oeq double %99, %101
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %120, %118, %116, %103
  %123 = phi i8 [ 0, %116 ], [ 0, %118 ], [ 1, %120 ], [ 1, %103 ]
  %124 = phi i8 [ 0, %116 ], [ 1, %118 ], [ 0, %120 ], [ 1, %103 ]
  br label %125

; <label>:125:                                    ; preds = %122, %120
  %126 = phi i8 [ %123, %122 ], [ %84, %120 ]
  %127 = phi i8 [ %124, %122 ], [ %72, %120 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %125, %111
  %128 = phi i8 [ %115, %111 ], [ %126, %125 ]
  %129 = phi i8 [ %114, %111 ], [ %127, %125 ]
  %130 = phi i64 [ %113, %111 ], [ %100, %125 ]
  %131 = phi %struct.Memory* [ %112, %111 ], [ %47, %125 ]
  %132 = or i8 %128, %129
  %133 = icmp ne i8 %132, 0
  %134 = select i1 %133, i64 31, i64 6
  %135 = add i64 %130, %134
  br i1 %133, label %block_400b31, label %block_400b18

block_400b31:                                     ; preds = %block_400b18, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %136 = phi i64 [ %135, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ], [ %201, %block_400b18 ]
  %137 = phi %struct.Memory* [ %131, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ], [ %131, %block_400b18 ]
  %138 = add i64 %136, 5
  br label %block_400b36

block_400aad:                                     ; preds = %block_400b36, %block_400a90
  %139 = phi i64 [ %31, %block_400a90 ], [ %61, %block_400b36 ]
  %140 = phi i64 [ %15, %block_400a90 ], [ %55, %block_400b36 ]
  %141 = phi %struct.Memory* [ %2, %block_400a90 ], [ %54, %block_400b36 ]
  %142 = add i64 %140, -12
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %6, align 8, !tbaa !1240
  %146 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %147 = sub i32 %144, %146
  %148 = lshr i32 %147, 31
  %149 = trunc i32 %148 to i8
  %150 = lshr i32 %144, 31
  %151 = lshr i32 %146, 31
  %152 = xor i32 %151, %150
  %153 = xor i32 %148, %150
  %154 = add nuw nsw i32 %153, %152
  %155 = icmp eq i32 %154, 2
  %156 = icmp ne i8 %149, 0
  %157 = xor i1 %156, %155
  %158 = select i1 %157, i64 16, i64 156
  %159 = add i64 %139, %158
  br i1 %157, label %block_400abd, label %block_400b49

block_400b49:                                     ; preds = %block_400aad
  %160 = load i64, i64* %10, align 8
  %161 = add i64 %160, 16
  %162 = icmp ugt i64 %160, -17
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %18, align 1, !tbaa !1248
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #11
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %19, align 1, !tbaa !1261
  %170 = xor i64 %160, 16
  %171 = xor i64 %170, %161
  %172 = lshr i64 %171, 4
  %173 = trunc i64 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %20, align 1, !tbaa !1262
  %175 = icmp eq i64 %161, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %21, align 1, !tbaa !1263
  %177 = lshr i64 %161, 63
  %178 = trunc i64 %177 to i8
  store i8 %178, i8* %22, align 1, !tbaa !1264
  %179 = lshr i64 %160, 63
  %180 = xor i64 %177, %179
  %181 = add nuw nsw i64 %180, %177
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %23, align 1, !tbaa !1265
  %184 = add i64 %160, 24
  %185 = inttoptr i64 %161 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %11, align 8, !tbaa !1240
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %3, align 8, !tbaa !1240
  %189 = add i64 %160, 32
  store i64 %189, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %141

block_400b18:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %190 = load i64, i64* %11, align 8
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = inttoptr i64 %193 to i32*
  store i32 1, i32* %194
  %195 = add i64 %190, -12
  %196 = inttoptr i64 %195 to i32*
  %197 = load i32, i32* %196
  %198 = sext i32 %197 to i64
  %199 = shl nsw i64 %198, 2
  %200 = add i64 %199, ptrtoint (%ich_type* @ich to i64)
  %201 = add i64 %135, 25
  %202 = inttoptr i64 %200 to i32*
  store i32 4, i32* %202
  br label %block_400b31
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41b0e0_transfb(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41b0e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %26, align 1, !tbaa !1244
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = bitcast i64* %25 to i32*
  store i32 0, i32* %29, align 1, !tbaa !1244
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1944) to double*)
  %33 = bitcast %union.VectorReg* %12 to double*
  store double %32, double* %33, align 1, !tbaa !1246
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  store double 0.000000e+00, double* %35, align 1, !tbaa !1246
  %36 = add i64 %15, -16
  %37 = load i64, i64* %8, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %38
  %39 = add i64 %15, -24
  %40 = load i64, i64* %7, align 8
  %41 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %41
  %42 = add i64 %15, -32
  %43 = inttoptr i64 %42 to double*
  store double %32, double* %43
  %44 = inttoptr i64 %36 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %8, align 8, !tbaa !1240
  %46 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %47 = zext i32 %46 to i64
  store i64 %47, i64* %7, align 8, !tbaa !1240
  %48 = add i64 %1, 18288
  %49 = add i64 %1, 51
  %50 = add i64 %15, -624
  %51 = inttoptr i64 %50 to i64*
  store i64 %49, i64* %51
  store i64 %50, i64* %9, align 8, !tbaa !1240
  %52 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %53 = load i64, i64* %10, align 8
  %54 = add i64 %53, -564
  %55 = load i64, i64* %3, align 8
  %56 = add i64 %55, 10
  %57 = inttoptr i64 %54 to i32*
  store i32 0, i32* %57
  %58 = bitcast [32 x %union.VectorReg]* %11 to double*
  %59 = bitcast i64* %25 to double*
  %60 = bitcast %union.VectorReg* %13 to i8*
  %61 = bitcast [32 x %union.VectorReg]* %11 to <2 x i32>*
  %62 = bitcast i64* %25 to <2 x i32>*
  %63 = bitcast %union.VectorReg* %13 to i32*
  %64 = getelementptr inbounds i8, i8* %60, i64 4
  %65 = bitcast i8* %64 to i32*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to i32*
  %68 = getelementptr inbounds i8, i8* %60, i64 12
  %69 = bitcast i8* %68 to i32*
  %70 = bitcast %union.VectorReg* %13 to double*
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %72 = bitcast i64* %25 to <2 x i32>*
  br label %block_41b11d

block_41b5f6:                                     ; preds = %block_41b5bf, %block_41b6db
  %73 = phi i64 [ %2250, %block_41b5bf ], [ %1343, %block_41b6db ]
  %74 = phi %struct.Memory* [ %1044, %block_41b5bf ], [ %2480, %block_41b6db ]
  %75 = inttoptr i64 %1039 to i32*
  %76 = load i32, i32* %75
  %77 = inttoptr i64 %1032 to i32*
  %78 = load i32, i32* %77
  %79 = sub i32 5, %78
  %80 = sub i32 %76, %79
  %81 = lshr i32 %80, 31
  %82 = lshr i32 %76, 31
  %83 = lshr i32 %79, 31
  %84 = xor i32 %83, %82
  %85 = xor i32 %81, %82
  %86 = add nuw nsw i32 %85, %84
  %87 = icmp eq i32 %86, 2
  %88 = icmp ne i32 %81, 0
  %89 = xor i1 %88, %87
  %90 = select i1 %89, i64 22, i64 350
  %91 = add i64 %73, %90
  br i1 %89, label %block_41b60c, label %block_41b754

block_41b7ee:                                     ; preds = %block_41b7d8
  %92 = inttoptr i64 %1035 to i32*
  %93 = load i32, i32* %92
  %94 = sext i32 %93 to i64
  %95 = mul nsw i64 %94, 2400
  %96 = add i64 %95, ptrtoint (%idmo_type* @idmo to i64)
  %97 = inttoptr i64 %1036 to i32*
  %98 = load i32, i32* %97
  %99 = sext i32 %98 to i64
  %100 = mul nsw i64 %99, 400
  %101 = add i64 %100, %96
  %102 = inttoptr i64 %1027 to i32*
  %103 = load i32, i32* %102
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, 200
  %106 = add i64 %105, %101
  %107 = inttoptr i64 %1762 to i32*
  %108 = load i32, i32* %107
  %109 = sext i32 %108 to i64
  %110 = mul nsw i64 %109, 100
  %111 = add i64 %110, %106
  %112 = sext i32 %1407 to i64
  %113 = mul nsw i64 %112, 20
  %114 = add i64 %113, %111
  %115 = shl nsw i64 %104, 2
  %116 = add i64 %115, ptrtoint (%v_end_type* @v_end to i64)
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 2
  %121 = add i64 %120, %114
  %122 = inttoptr i64 %121 to i32*
  %123 = load i32, i32* %122
  %124 = inttoptr i64 %1765 to i32*
  store i32 %123, i32* %124
  %125 = inttoptr i64 %1766 to i64*
  %126 = load i64, i64* %125
  %127 = inttoptr i64 %1765 to i32*
  %128 = load i32, i32* %127
  %129 = sext i32 %128 to i64
  %130 = shl nsw i64 %129, 3
  %131 = add i64 %130, %126
  %132 = inttoptr i64 %131 to double*
  %133 = load double, double* %132
  %134 = inttoptr i64 %1762 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 200
  %138 = add i64 %137, %1034
  %139 = inttoptr i64 %1033 to i32*
  %140 = load i32, i32* %139
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %141, 40
  %143 = add i64 %142, %138
  %144 = inttoptr i64 %1027 to i32*
  %145 = load i32, i32* %144
  %146 = sext i32 %145 to i64
  %147 = shl nsw i64 %146, 2
  %148 = add i64 %147, ptrtoint (%v_end_type* @v_end to i64)
  %149 = inttoptr i64 %148 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %150 to i64
  %152 = shl nsw i64 %151, 3
  %153 = add i64 %152, %143
  %154 = inttoptr i64 %153 to double*
  %155 = load double, double* %154
  %156 = fmul double %1423, %155
  store double %156, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %157 = fadd double %133, %156
  store double %157, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %158 = inttoptr i64 %131 to double*
  store double %157, double* %158
  %159 = add i64 %1422, 225
  %160 = inttoptr i64 %1039 to i32*
  store i32 0, i32* %160
  br label %block_41b8cf

block_41c6fc:                                     ; preds = %block_41c6ef
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %161 = load double, double* %58, align 1
  %162 = inttoptr i64 %1393 to double*
  store double %161, double* %162
  %163 = add i64 %1227, 18
  %164 = inttoptr i64 %1394 to i32*
  store i32 1, i32* %164
  br label %block_41c70e

block_41b7c7:                                     ; preds = %block_41b7b5
  %165 = inttoptr i64 %1032 to i32*
  %166 = load i32, i32* %165
  %167 = sub i32 2, %166
  %168 = add i32 %167, -1
  %169 = add i64 %1187, 17
  %170 = inttoptr i64 %1033 to i32*
  store i32 %168, i32* %170
  br label %block_41b7d8

block_41c186:                                     ; preds = %block_41c179
  %171 = inttoptr i64 %1642 to i32*
  %172 = load i32, i32* %171
  %173 = sext i32 %172 to i64
  %174 = mul nsw i64 %173, 600
  %175 = add i64 %174, ptrtoint (%idel_type* @idel to i64)
  %176 = inttoptr i64 %1643 to i32*
  %177 = load i32, i32* %176
  %178 = sext i32 %177 to i64
  %179 = mul nsw i64 %178, 100
  %180 = add i64 %179, %175
  %181 = sext i32 %253 to i64
  %182 = mul nsw i64 %181, 20
  %183 = add i64 %182, %180
  %184 = add i64 %183, 16
  %185 = inttoptr i64 %184 to i32*
  %186 = load i32, i32* %185
  %187 = inttoptr i64 %1644 to i32*
  store i32 %186, i32* %187
  %188 = inttoptr i64 %1640 to double*
  %189 = load double, double* %188
  %190 = inttoptr i64 %1636 to i32*
  %191 = load i32, i32* %190
  %192 = sext i32 %191 to i64
  %193 = mul nsw i64 %192, 120
  %194 = add i64 %193, ptrtoint (%qbnew_type* @qbnew to i64)
  %195 = inttoptr i64 %1639 to i32*
  %196 = load i32, i32* %195
  %197 = sext i32 %196 to i64
  %198 = mul nsw i64 %197, 24
  %199 = add i64 %198, %194
  %200 = inttoptr i64 %1641 to i32*
  %201 = load i32, i32* %200
  %202 = add i32 %201, -1
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %7, align 8, !tbaa !1240
  %204 = sext i32 %202 to i64
  %205 = shl nsw i64 %204, 3
  %206 = add i64 %199, %205
  %207 = inttoptr i64 %206 to double*
  %208 = load double, double* %207
  %209 = inttoptr i64 %1645 to i64*
  %210 = load i64, i64* %209
  %211 = inttoptr i64 %1644 to i32*
  %212 = load i32, i32* %211
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 3
  %215 = add i64 %214, %210
  %216 = inttoptr i64 %215 to double*
  %217 = load double, double* %216
  %218 = fmul double %208, %217
  store double %218, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %219 = fadd double %189, %218
  store double %219, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %220 = inttoptr i64 %1640 to double*
  store double %219, double* %220
  %221 = inttoptr i64 %1641 to i32*
  %222 = load i32, i32* %221
  %223 = add i32 %222, 1
  %224 = inttoptr i64 %1641 to i32*
  store i32 %223, i32* %224
  %225 = add i64 %263, -13
  br label %block_41c179

block_41c597:                                     ; preds = %block_41c432
  %226 = inttoptr i64 %1750 to i32*
  %227 = load i32, i32* %226
  %228 = add i32 %227, 1
  %229 = inttoptr i64 %1750 to i32*
  store i32 %228, i32* %229
  %230 = add i64 %2265, -380
  br label %block_41c41b

block_41b790:                                     ; preds = %block_41b786, %block_41bd10
  %231 = phi i64 [ %1763, %block_41b786 ], [ %1197, %block_41bd10 ]
  %232 = phi %struct.Memory* [ %2522, %block_41b786 ], [ %1171, %block_41bd10 ]
  %233 = inttoptr i64 %1762 to i32*
  %234 = load i32, i32* %233
  %235 = inttoptr i64 %1031 to i32*
  %236 = load i32, i32* %235
  %237 = sub i32 %234, %236
  %238 = lshr i32 %237, 31
  %239 = trunc i32 %238 to i8
  %240 = lshr i32 %234, 31
  %241 = lshr i32 %236, 31
  %242 = xor i32 %241, %240
  %243 = xor i32 %238, %240
  %244 = add nuw nsw i32 %243, %242
  %245 = icmp eq i32 %244, 2
  %246 = icmp ne i8 %239, 0
  %247 = xor i1 %246, %245
  %248 = select i1 %247, i64 18, i64 1433
  %249 = add i64 %231, %248
  br i1 %247, label %block_41b7a2, label %block_41c968.loopexit

block_41c179:                                     ; preds = %block_41c167, %block_41c186
  %250 = phi i64 [ %2268, %block_41c167 ], [ %225, %block_41c186 ]
  %251 = phi %struct.Memory* [ %354, %block_41c167 ], [ %251, %block_41c186 ]
  %252 = inttoptr i64 %1641 to i32*
  %253 = load i32, i32* %252
  %254 = add i32 %253, -4
  %255 = lshr i32 %254, 31
  %256 = lshr i32 %253, 31
  %257 = xor i32 %255, %256
  %258 = add nuw nsw i32 %257, %256
  %259 = icmp eq i32 %258, 2
  %260 = icmp ne i32 %255, 0
  %261 = xor i1 %260, %259
  %262 = select i1 %261, i64 13, i64 182
  %263 = add i64 %250, %262
  br i1 %261, label %block_41c186, label %block_41c22f

block_41c99a:                                     ; preds = %block_41b11d
  %264 = load i64, i64* %9, align 8
  %265 = add i64 %264, 608
  %266 = icmp ugt i64 %264, -609
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %18, align 1, !tbaa !1248
  %268 = trunc i64 %265 to i32
  %269 = and i32 %268, 255
  %270 = tail call i32 @llvm.ctpop.i32(i32 %269) #11
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  store i8 %273, i8* %19, align 1, !tbaa !1261
  %274 = xor i64 %265, %264
  %275 = lshr i64 %274, 4
  %276 = trunc i64 %275 to i8
  %277 = and i8 %276, 1
  store i8 %277, i8* %20, align 1, !tbaa !1262
  %278 = icmp eq i64 %265, 0
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %21, align 1, !tbaa !1263
  %280 = lshr i64 %265, 63
  %281 = trunc i64 %280 to i8
  store i8 %281, i8* %22, align 1, !tbaa !1264
  %282 = lshr i64 %264, 63
  %283 = xor i64 %280, %282
  %284 = add nuw nsw i64 %283, %280
  %285 = icmp eq i64 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %23, align 1, !tbaa !1265
  %287 = add i64 %264, 616
  %288 = inttoptr i64 %265 to i64*
  %289 = load i64, i64* %288
  store i64 %289, i64* %10, align 8, !tbaa !1240
  %290 = inttoptr i64 %287 to i64*
  %291 = load i64, i64* %290
  store i64 %291, i64* %3, align 8, !tbaa !1240
  %292 = add i64 %264, 624
  store i64 %292, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %922

block_41bf6f:                                     ; preds = %block_41bec0
  %293 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %294 = inttoptr i64 %1735 to i32*
  %295 = load i32, i32* %294
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, 2400
  %298 = add i64 %297, ptrtoint (%idmo_type* @idmo to i64)
  %299 = inttoptr i64 %1736 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %301, 400
  %303 = add i64 %302, %298
  %304 = inttoptr i64 %1729 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 200
  %308 = add i64 %307, %303
  %309 = inttoptr i64 %1732 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 2
  %313 = add i64 %312, %308
  %314 = inttoptr i64 %313 to i32*
  %315 = load i32, i32* %314
  %316 = zext i32 %315 to i64
  store i64 %316, i64* %6, align 8, !tbaa !1240
  %317 = inttoptr i64 %1739 to i32*
  store i32 %315, i32* %317
  %318 = inttoptr i64 %1740 to i64*
  %319 = load i64, i64* %318
  %320 = inttoptr i64 %1739 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  %323 = shl nsw i64 %322, 3
  %324 = add i64 %323, %319
  %325 = inttoptr i64 %324 to double*
  %326 = load double, double* %325
  %327 = inttoptr i64 %1733 to double*
  %328 = load double, double* %327
  %329 = fmul double %293, %328
  store double %329, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %330 = fadd double %326, %329
  store double %330, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %331 = inttoptr i64 %324 to double*
  store double %330, double* %331
  %332 = inttoptr i64 %1732 to i32*
  %333 = load i32, i32* %332
  %334 = add i32 %333, 1
  %335 = inttoptr i64 %1732 to i32*
  store i32 %334, i32* %335
  %336 = add i64 %1505, -206
  br label %block_41bea1

block_41c968.loopexit:                            ; preds = %block_41b790
  %337 = load i64, i64* %10, align 8
  br label %block_41c968

block_41c968:                                     ; preds = %block_41c963, %block_41c968.loopexit
  %338 = phi i64 [ %1555, %block_41c963 ], [ %337, %block_41c968.loopexit ]
  %339 = phi i64 [ %352, %block_41c963 ], [ %249, %block_41c968.loopexit ]
  %340 = phi i64 [ 5, %block_41c963 ], [ 3135, %block_41c968.loopexit ]
  %341 = phi %struct.Memory* [ %351, %block_41c963 ], [ %232, %block_41c968.loopexit ]
  %342 = add i64 %339, %340
  %343 = add i64 %338, -568
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = add i32 %345, 1
  %347 = inttoptr i64 %343 to i32*
  store i32 %346, i32* %347
  %348 = add i64 %342, -6190
  br label %block_41b13a

block_41c963.loopexit:                            ; preds = %block_41c880
  br label %block_41c963

block_41c963.loopexit379:                         ; preds = %block_41c6d8
  br label %block_41c963

block_41c963:                                     ; preds = %block_41c963.loopexit379, %block_41c963.loopexit
  %349 = phi i64 [ %1374, %block_41c963.loopexit379 ], [ %1283, %block_41c963.loopexit ]
  %350 = phi i64 [ 242, %block_41c963.loopexit379 ], [ 5, %block_41c963.loopexit ]
  %351 = phi %struct.Memory* [ %1361, %block_41c963.loopexit379 ], [ %1270, %block_41c963.loopexit ]
  %352 = add i64 %349, %350
  br label %block_41c968

block_41c15a:                                     ; preds = %block_41c22f, %block_41c150
  %353 = phi i64 [ %373, %block_41c150 ], [ %2393, %block_41c22f ]
  %354 = phi %struct.Memory* [ %707, %block_41c150 ], [ %251, %block_41c22f ]
  %355 = inttoptr i64 %1639 to i32*
  %356 = load i32, i32* %355
  %357 = add i32 %356, -5
  %358 = lshr i32 %357, 31
  %359 = lshr i32 %356, 31
  %360 = xor i32 %358, %359
  %361 = add nuw nsw i32 %360, %359
  %362 = icmp eq i32 %361, 2
  %363 = icmp ne i32 %358, 0
  %364 = xor i1 %363, %362
  %365 = select i1 %364, i64 13, i64 369
  %366 = add i64 %353, %365
  br i1 %364, label %block_41c167, label %block_41c2cb

block_41b754:                                     ; preds = %block_41b5f6
  %367 = zext i32 %76 to i64
  store i64 %367, i64* %5, align 8, !tbaa !1240
  %368 = inttoptr i64 %1033 to i32*
  %369 = load i32, i32* %368
  %370 = add i32 %369, 1
  %371 = inttoptr i64 %1033 to i32*
  store i32 %370, i32* %371
  %372 = add i64 %91, -798
  br label %block_41b436

block_41c150:                                     ; preds = %block_41c143
  %373 = add i64 %719, 10
  %374 = inttoptr i64 %1639 to i32*
  store i32 0, i32* %374
  br label %block_41c15a

block_41b436:                                     ; preds = %block_41b423, %block_41b754
  %375 = phi i64 [ %2464, %block_41b423 ], [ %372, %block_41b754 ]
  %376 = phi %struct.Memory* [ %2522, %block_41b423 ], [ %74, %block_41b754 ]
  %377 = inttoptr i64 %1033 to i32*
  %378 = load i32, i32* %377
  %379 = add i32 %378, -5
  %380 = lshr i32 %379, 31
  %381 = lshr i32 %378, 31
  %382 = xor i32 %380, %381
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = icmp ne i32 %380, 0
  %386 = xor i1 %385, %384
  %387 = select i1 %386, i64 13, i64 823
  %388 = add i64 %375, %387
  br i1 %386, label %block_41b443, label %block_41b76d

block_41b189:                                     ; preds = %block_41b170, %block_41b17f
  %389 = phi i64 [ %705, %block_41b17f ], [ %1345, %block_41b170 ]
  %390 = phi %struct.Memory* [ %2153, %block_41b17f ], [ %2153, %block_41b170 ]
  %391 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1944) to double*)
  store double %391, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %59, align 1, !tbaa !1246
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%idel_type* @idel to i64), i64* %5, align 8, !tbaa !1240
  %392 = add i64 %703, -564
  %393 = inttoptr i64 %392 to i32*
  %394 = load i32, i32* %393
  %395 = sext i32 %394 to i64
  %396 = mul nsw i64 %395, 600
  %397 = add i64 %396, ptrtoint (%idel_type* @idel to i64)
  %398 = add i64 %703, -568
  %399 = inttoptr i64 %398 to i32*
  %400 = load i32, i32* %399
  %401 = sext i32 %400 to i64
  %402 = mul nsw i64 %401, 100
  %403 = add i64 %402, %397
  %404 = inttoptr i64 %403 to i32*
  %405 = load i32, i32* %404
  %406 = load i64, i64* %10, align 8
  %407 = add i64 %406, -532
  %408 = inttoptr i64 %407 to i32*
  store i32 %405, i32* %408
  %409 = add i64 %406, -564
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410
  %412 = sext i32 %411 to i64
  %413 = mul nsw i64 %412, 600
  %414 = load i64, i64* %5, align 8
  %415 = add i64 %413, %414
  %416 = add i64 %406, -568
  %417 = inttoptr i64 %416 to i32*
  %418 = load i32, i32* %417
  %419 = sext i32 %418 to i64
  %420 = mul nsw i64 %419, 100
  %421 = add i64 %420, %415
  %422 = add i64 %421, 16
  %423 = inttoptr i64 %422 to i32*
  %424 = load i32, i32* %423
  %425 = load i64, i64* %10, align 8
  %426 = add i64 %425, -536
  %427 = inttoptr i64 %426 to i32*
  store i32 %424, i32* %427
  %428 = add i64 %425, -564
  %429 = inttoptr i64 %428 to i32*
  %430 = load i32, i32* %429
  %431 = sext i32 %430 to i64
  %432 = mul nsw i64 %431, 600
  %433 = load i64, i64* %5, align 8
  %434 = add i64 %432, %433
  %435 = add i64 %425, -568
  %436 = inttoptr i64 %435 to i32*
  %437 = load i32, i32* %436
  %438 = sext i32 %437 to i64
  %439 = mul nsw i64 %438, 100
  %440 = add i64 %439, %434
  store i64 %440, i64* %7, align 8, !tbaa !1240
  %441 = add i64 %440, 80
  %442 = inttoptr i64 %441 to i32*
  %443 = load i32, i32* %442
  %444 = load i64, i64* %10, align 8
  %445 = add i64 %444, -540
  %446 = inttoptr i64 %445 to i32*
  store i32 %443, i32* %446
  %447 = add i64 %444, -564
  %448 = inttoptr i64 %447 to i32*
  %449 = load i32, i32* %448
  %450 = sext i32 %449 to i64
  %451 = mul nsw i64 %450, 600
  %452 = load i64, i64* %5, align 8
  %453 = add i64 %451, %452
  %454 = add i64 %444, -568
  %455 = inttoptr i64 %454 to i32*
  %456 = load i32, i32* %455
  %457 = sext i32 %456 to i64
  %458 = mul nsw i64 %457, 100
  %459 = add i64 %458, %453
  %460 = add i64 %459, 96
  %461 = inttoptr i64 %460 to i32*
  %462 = load i32, i32* %461
  %463 = load i64, i64* %10, align 8
  %464 = add i64 %463, -544
  %465 = inttoptr i64 %464 to i32*
  store i32 %462, i32* %465
  %466 = add i64 %463, -564
  %467 = inttoptr i64 %466 to i32*
  %468 = load i32, i32* %467
  %469 = sext i32 %468 to i64
  %470 = mul nsw i64 %469, 2400
  %471 = load i64, i64* %4, align 8
  %472 = add i64 %470, %471
  %473 = add i64 %463, -568
  %474 = inttoptr i64 %473 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  %477 = mul nsw i64 %476, 400
  %478 = add i64 %477, %472
  %479 = inttoptr i64 %478 to i32*
  %480 = load i32, i32* %479
  %481 = load i64, i64* %10, align 8
  %482 = add i64 %481, -548
  %483 = inttoptr i64 %482 to i32*
  store i32 %480, i32* %483
  %484 = add i64 %481, -564
  %485 = inttoptr i64 %484 to i32*
  %486 = load i32, i32* %485
  %487 = sext i32 %486 to i64
  %488 = mul nsw i64 %487, 2400
  %489 = load i64, i64* %4, align 8
  %490 = add i64 %488, %489
  %491 = add i64 %481, -568
  %492 = inttoptr i64 %491 to i32*
  %493 = load i32, i32* %492
  %494 = sext i32 %493 to i64
  %495 = mul nsw i64 %494, 400
  %496 = add i64 %495, %490
  %497 = add i64 %496, 216
  %498 = inttoptr i64 %497 to i32*
  %499 = load i32, i32* %498
  %500 = load i64, i64* %10, align 8
  %501 = add i64 %500, -552
  %502 = inttoptr i64 %501 to i32*
  store i32 %499, i32* %502
  %503 = add i64 %500, -564
  %504 = inttoptr i64 %503 to i32*
  %505 = load i32, i32* %504
  %506 = sext i32 %505 to i64
  %507 = mul nsw i64 %506, 2400
  %508 = load i64, i64* %4, align 8
  %509 = add i64 %507, %508
  %510 = add i64 %500, -568
  %511 = inttoptr i64 %510 to i32*
  %512 = load i32, i32* %511
  %513 = sext i32 %512 to i64
  %514 = mul nsw i64 %513, 400
  %515 = add i64 %514, %509
  store i64 %515, i64* %6, align 8, !tbaa !1240
  %516 = add i64 %515, 180
  %517 = inttoptr i64 %516 to i32*
  %518 = load i32, i32* %517
  %519 = load i64, i64* %10, align 8
  %520 = add i64 %519, -556
  %521 = inttoptr i64 %520 to i32*
  store i32 %518, i32* %521
  %522 = add i64 %519, -564
  %523 = inttoptr i64 %522 to i32*
  %524 = load i32, i32* %523
  %525 = sext i32 %524 to i64
  %526 = mul nsw i64 %525, 2400
  %527 = load i64, i64* %4, align 8
  %528 = add i64 %526, %527
  %529 = add i64 %519, -568
  %530 = inttoptr i64 %529 to i32*
  %531 = load i32, i32* %530
  %532 = sext i32 %531 to i64
  %533 = mul nsw i64 %532, 400
  %534 = add i64 %533, %528
  %535 = add i64 %534, 396
  %536 = inttoptr i64 %535 to i32*
  %537 = load i32, i32* %536
  %538 = zext i32 %537 to i64
  store i64 %538, i64* %8, align 8, !tbaa !1240
  %539 = load i64, i64* %10, align 8
  %540 = add i64 %539, -560
  %541 = inttoptr i64 %540 to i32*
  store i32 %537, i32* %541
  %542 = add i64 %539, -8
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = add i64 %539, -548
  %546 = inttoptr i64 %545 to i32*
  %547 = load i32, i32* %546
  %548 = sext i32 %547 to i64
  %549 = shl nsw i64 %548, 3
  %550 = add i64 %549, %544
  %551 = inttoptr i64 %550 to double*
  %552 = load double, double* %551
  %553 = add i64 %539, -16
  %554 = inttoptr i64 %553 to i64*
  %555 = load i64, i64* %554
  %556 = add i64 %539, -532
  %557 = inttoptr i64 %556 to i32*
  %558 = load i32, i32* %557
  %559 = sext i32 %558 to i64
  %560 = load <2 x i32>, <2 x i32>* %61, align 1
  %561 = extractelement <2 x i32> %560, i32 0
  store i32 %561, i32* %63, align 1, !tbaa !1266
  %562 = extractelement <2 x i32> %560, i32 1
  store i32 %562, i32* %65, align 1, !tbaa !1266
  %563 = shl nsw i64 %559, 3
  %564 = add i64 %563, %555
  %565 = load double, double* %70, align 1
  %566 = inttoptr i64 %564 to double*
  %567 = load double, double* %566
  %568 = fmul double %565, %567
  %569 = fadd double %552, %568
  %570 = inttoptr i64 %550 to double*
  store double %569, double* %570
  %571 = inttoptr i64 %542 to i64*
  %572 = load i64, i64* %571
  %573 = add i64 %539, -552
  %574 = inttoptr i64 %573 to i32*
  %575 = load i32, i32* %574
  %576 = sext i32 %575 to i64
  %577 = shl nsw i64 %576, 3
  %578 = add i64 %577, %572
  %579 = inttoptr i64 %578 to double*
  %580 = load double, double* %579
  %581 = inttoptr i64 %553 to i64*
  %582 = load i64, i64* %581
  %583 = add i64 %539, -536
  %584 = inttoptr i64 %583 to i32*
  %585 = load i32, i32* %584
  %586 = sext i32 %585 to i64
  store i32 %561, i32* %63, align 1, !tbaa !1266
  store i32 %562, i32* %65, align 1, !tbaa !1266
  %587 = shl nsw i64 %586, 3
  %588 = add i64 %587, %582
  %589 = load double, double* %70, align 1
  %590 = inttoptr i64 %588 to double*
  %591 = load double, double* %590
  %592 = fmul double %589, %591
  %593 = fadd double %580, %592
  %594 = load i64, i64* %10, align 8
  %595 = add i64 %594, -8
  %596 = inttoptr i64 %595 to i64*
  %597 = load i64, i64* %596
  %598 = add i64 %594, -552
  %599 = inttoptr i64 %598 to i32*
  %600 = load i32, i32* %599
  %601 = sext i32 %600 to i64
  %602 = shl nsw i64 %601, 3
  %603 = add i64 %602, %597
  %604 = inttoptr i64 %603 to double*
  store double %593, double* %604
  %605 = inttoptr i64 %595 to i64*
  %606 = load i64, i64* %605
  %607 = add i64 %594, -556
  %608 = inttoptr i64 %607 to i32*
  %609 = load i32, i32* %608
  %610 = sext i32 %609 to i64
  %611 = shl nsw i64 %610, 3
  %612 = add i64 %611, %606
  %613 = inttoptr i64 %612 to double*
  %614 = load double, double* %613
  %615 = add i64 %594, -16
  %616 = inttoptr i64 %615 to i64*
  %617 = load i64, i64* %616
  %618 = add i64 %594, -540
  %619 = inttoptr i64 %618 to i32*
  %620 = load i32, i32* %619
  %621 = sext i32 %620 to i64
  %622 = load <2 x i32>, <2 x i32>* %61, align 1
  %623 = load <2 x i32>, <2 x i32>* %62, align 1
  %624 = extractelement <2 x i32> %622, i32 0
  store i32 %624, i32* %63, align 1, !tbaa !1266
  %625 = extractelement <2 x i32> %622, i32 1
  store i32 %625, i32* %65, align 1, !tbaa !1266
  %626 = extractelement <2 x i32> %623, i32 0
  store i32 %626, i32* %67, align 1, !tbaa !1266
  %627 = extractelement <2 x i32> %623, i32 1
  store i32 %627, i32* %69, align 1, !tbaa !1266
  %628 = shl nsw i64 %621, 3
  %629 = add i64 %628, %617
  %630 = load double, double* %70, align 1
  %631 = inttoptr i64 %629 to double*
  %632 = load double, double* %631
  %633 = fmul double %630, %632
  store double %633, double* %70, align 1, !tbaa !1246
  %634 = fadd double %614, %633
  %635 = inttoptr i64 %612 to double*
  store double %634, double* %635
  %636 = inttoptr i64 %595 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %594, -560
  %639 = inttoptr i64 %638 to i32*
  %640 = load i32, i32* %639
  %641 = sext i32 %640 to i64
  %642 = shl nsw i64 %641, 3
  %643 = add i64 %642, %637
  %644 = inttoptr i64 %643 to double*
  %645 = load double, double* %644
  %646 = inttoptr i64 %615 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %594, -544
  %649 = inttoptr i64 %648 to i32*
  %650 = load i32, i32* %649
  %651 = sext i32 %650 to i64
  %652 = shl nsw i64 %651, 3
  %653 = add i64 %652, %647
  %654 = bitcast <2 x i32> %622 to double
  %655 = inttoptr i64 %653 to double*
  %656 = load double, double* %655
  %657 = fmul double %654, %656
  store double %657, double* %58, align 1, !tbaa !1246
  store <2 x i32> %623, <2 x i32>* %72, align 1, !tbaa !1246
  %658 = fadd double %645, %657
  store double %658, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %659 = load i64, i64* %10, align 8
  %660 = add i64 %659, -8
  %661 = inttoptr i64 %660 to i64*
  %662 = load i64, i64* %661
  %663 = add i64 %659, -560
  %664 = inttoptr i64 %663 to i32*
  %665 = load i32, i32* %664
  %666 = sext i32 %665 to i64
  store i64 %666, i64* %5, align 8, !tbaa !1240
  %667 = shl nsw i64 %666, 3
  %668 = add i64 %667, %662
  %669 = inttoptr i64 %668 to double*
  store double %658, double* %669
  %670 = add i64 %659, -572
  %671 = inttoptr i64 %670 to i32*
  %672 = load i32, i32* %671
  %673 = add i32 %672, -2
  %674 = icmp eq i32 %673, 0
  %675 = select i1 %674, i64 615, i64 2981
  %676 = add i64 %389, %675
  br i1 %674, label %block_41b3f0, label %block_41bd2e

block_41bd4f:                                     ; preds = %block_41bd5c, %block_41bd45
  %677 = phi i64 [ %729, %block_41bd45 ], [ %1991, %block_41bd5c ]
  %678 = phi %struct.Memory* [ %1829, %block_41bd45 ], [ %678, %block_41bd5c ]
  %679 = inttoptr i64 %723 to i32*
  %680 = load i32, i32* %679
  %681 = add i32 %680, -4
  %682 = lshr i32 %681, 31
  %683 = lshr i32 %680, 31
  %684 = xor i32 %682, %683
  %685 = add nuw nsw i32 %684, %683
  %686 = icmp eq i32 %685, 2
  %687 = icmp ne i32 %682, 0
  %688 = xor i1 %687, %686
  %689 = select i1 %688, i64 13, i64 226
  %690 = add i64 %677, %689
  br i1 %688, label %block_41bd5c, label %block_41be31

block_41b147:                                     ; preds = %block_41b13a
  %691 = sext i32 %2170 to i64
  %692 = mul nsw i64 %691, 24
  %693 = add i64 %692, ptrtoint (%cbc_type* @cbc to i64)
  %694 = sext i32 %2156 to i64
  %695 = shl nsw i64 %694, 2
  %696 = add i64 %695, %693
  %697 = inttoptr i64 %696 to i32*
  %698 = load i32, i32* %697
  %699 = add i32 %698, -3
  %700 = icmp eq i32 %699, 0
  %701 = select i1 %700, i64 41, i64 56
  %702 = add i64 %2167, %701
  %703 = load i64, i64* %10, align 8
  %704 = add i64 %703, -572
  %705 = add i64 %702, 10
  br i1 %700, label %block_41b170, label %block_41b17f

block_41c143:                                     ; preds = %block_41c139, %block_41c2cb
  %706 = phi i64 [ %1637, %block_41c139 ], [ %1482, %block_41c2cb ]
  %707 = phi %struct.Memory* [ %1106, %block_41c139 ], [ %354, %block_41c2cb ]
  %708 = inttoptr i64 %1636 to i32*
  %709 = load i32, i32* %708
  %710 = add i32 %709, -2
  %711 = lshr i32 %710, 31
  %712 = lshr i32 %709, 31
  %713 = xor i32 %711, %712
  %714 = add nuw nsw i32 %713, %712
  %715 = icmp eq i32 %714, 2
  %716 = icmp ne i32 %711, 0
  %717 = xor i1 %716, %715
  %718 = select i1 %717, i64 13, i64 417
  %719 = add i64 %706, %718
  br i1 %717, label %block_41c150, label %block_41c3d8.loopexit603

block_41bd2e:                                     ; preds = %block_41b189
  %720 = add i64 %659, -584
  %721 = add i64 %676, 10
  %722 = inttoptr i64 %720 to i32*
  store i32 1, i32* %722
  %723 = add i64 %659, -592
  %724 = add i64 %659, -564
  %725 = add i64 %659, -568
  %726 = add i64 %659, -604
  %727 = add i64 %659, -600
  %728 = add i64 %659, -16
  br label %block_41bd38

block_41bd45:                                     ; preds = %block_41bd38
  %729 = add i64 %1841, 10
  %730 = inttoptr i64 %723 to i32*
  store i32 1, i32* %730
  br label %block_41bd4f

block_41b17f:                                     ; preds = %block_41b147
  %731 = inttoptr i64 %704 to i32*
  store i32 1, i32* %731
  br label %block_41b189

block_41b986:                                     ; preds = %block_41b8ee
  %732 = inttoptr i64 %1035 to i32*
  %733 = load i32, i32* %732
  %734 = sext i32 %733 to i64
  %735 = mul nsw i64 %734, 2400
  %736 = add i64 %735, ptrtoint (%idmo_type* @idmo to i64)
  %737 = inttoptr i64 %1036 to i32*
  %738 = load i32, i32* %737
  %739 = sext i32 %738 to i64
  %740 = mul nsw i64 %739, 400
  %741 = add i64 %740, %736
  %742 = inttoptr i64 %1027 to i32*
  %743 = load i32, i32* %742
  %744 = sext i32 %743 to i64
  %745 = mul nsw i64 %744, 200
  %746 = add i64 %745, %741
  %747 = inttoptr i64 %1762 to i32*
  %748 = load i32, i32* %747
  %749 = sext i32 %748 to i64
  %750 = mul nsw i64 %749, 100
  %751 = add i64 %750, %746
  %752 = inttoptr i64 %1033 to i32*
  %753 = load i32, i32* %752
  %754 = sext i32 %753 to i64
  %755 = mul nsw i64 %754, 20
  %756 = add i64 %755, %751
  %757 = inttoptr i64 %1039 to i32*
  %758 = load i32, i32* %757
  %759 = sext i32 %758 to i64
  %760 = shl nsw i64 %759, 2
  %761 = add i64 %760, %756
  %762 = inttoptr i64 %761 to i32*
  %763 = load i32, i32* %762
  %764 = inttoptr i64 %1765 to i32*
  store i32 %763, i32* %764
  %765 = inttoptr i64 %1766 to i64*
  %766 = load i64, i64* %765
  %767 = inttoptr i64 %1765 to i32*
  %768 = load i32, i32* %767
  %769 = sext i32 %768 to i64
  %770 = shl nsw i64 %769, 3
  %771 = add i64 %770, %766
  %772 = inttoptr i64 %771 to double*
  %773 = load double, double* %772
  %774 = inttoptr i64 %1040 to double*
  %775 = load double, double* %774
  %776 = fadd double %773, %775
  store double %776, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %777 = inttoptr i64 %771 to double*
  store double %776, double* %777
  %778 = inttoptr i64 %1039 to i32*
  %779 = load i32, i32* %778
  %780 = add i32 %779, 1
  %781 = inttoptr i64 %1039 to i32*
  store i32 %780, i32* %781
  %782 = add i64 %1359, -183
  br label %block_41b8cf

block_41c71b:                                     ; preds = %block_41c70e
  %783 = inttoptr i64 %1395 to i32*
  %784 = load i32, i32* %783
  %785 = sext i32 %784 to i64
  %786 = mul nsw i64 %785, 600
  %787 = add i64 %786, ptrtoint (%idel_type* @idel to i64)
  %788 = inttoptr i64 %1396 to i32*
  %789 = load i32, i32* %788
  %790 = sext i32 %789 to i64
  %791 = mul nsw i64 %790, 100
  %792 = add i64 %791, %787
  %793 = sext i32 %944 to i64
  %794 = mul nsw i64 %793, 20
  %795 = add i64 %794, %792
  %796 = inttoptr i64 %795 to i32*
  %797 = load i32, i32* %796
  %798 = inttoptr i64 %1397 to i32*
  store i32 %797, i32* %798
  %799 = inttoptr i64 %1393 to double*
  %800 = load double, double* %799
  %801 = inttoptr i64 %1389 to i32*
  %802 = load i32, i32* %801
  %803 = sext i32 %802 to i64
  %804 = mul nsw i64 %803, 120
  %805 = add i64 %804, ptrtoint (%qbnew_type* @qbnew to i64)
  %806 = inttoptr i64 %1392 to i32*
  %807 = load i32, i32* %806
  %808 = sext i32 %807 to i64
  %809 = mul nsw i64 %808, 24
  %810 = add i64 %809, %805
  %811 = inttoptr i64 %1394 to i32*
  %812 = load i32, i32* %811
  %813 = add i32 %812, -1
  %814 = zext i32 %813 to i64
  store i64 %814, i64* %7, align 8, !tbaa !1240
  %815 = sext i32 %813 to i64
  %816 = shl nsw i64 %815, 3
  %817 = add i64 %810, %816
  %818 = inttoptr i64 %817 to double*
  %819 = load double, double* %818
  %820 = inttoptr i64 %1398 to i64*
  %821 = load i64, i64* %820
  %822 = inttoptr i64 %1397 to i32*
  %823 = load i32, i32* %822
  %824 = sext i32 %823 to i64
  %825 = shl nsw i64 %824, 3
  %826 = add i64 %825, %821
  %827 = inttoptr i64 %826 to double*
  %828 = load double, double* %827
  %829 = fmul double %819, %828
  store double %829, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %830 = fadd double %800, %829
  store double %830, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %831 = inttoptr i64 %1393 to double*
  store double %830, double* %831
  %832 = inttoptr i64 %1394 to i32*
  %833 = load i32, i32* %832
  %834 = add i32 %833, 1
  %835 = inttoptr i64 %1394 to i32*
  store i32 %834, i32* %835
  %836 = add i64 %954, -13
  br label %block_41c70e

block_41b50f:                                     ; preds = %block_41b502
  %837 = inttoptr i64 %1035 to i32*
  %838 = load i32, i32* %837
  %839 = sext i32 %838 to i64
  %840 = mul nsw i64 %839, 600
  %841 = add i64 %840, ptrtoint (%idel_type* @idel to i64)
  %842 = inttoptr i64 %1036 to i32*
  %843 = load i32, i32* %842
  %844 = sext i32 %843 to i64
  %845 = mul nsw i64 %844, 100
  %846 = add i64 %845, %841
  %847 = sext i32 %1046 to i64
  %848 = mul nsw i64 %847, 20
  %849 = add i64 %848, %846
  %850 = inttoptr i64 %1033 to i32*
  %851 = load i32, i32* %850
  %852 = sext i32 %851 to i64
  %853 = shl nsw i64 %852, 2
  %854 = add i64 %853, %849
  %855 = inttoptr i64 %854 to i32*
  %856 = load i32, i32* %855
  %857 = inttoptr i64 %1037 to i32*
  store i32 %856, i32* %857
  %858 = inttoptr i64 %1040 to double*
  %859 = load double, double* %858
  %860 = inttoptr i64 %1027 to i32*
  %861 = load i32, i32* %860
  %862 = sext i32 %861 to i64
  %863 = mul nsw i64 %862, 120
  %864 = add i64 %863, ptrtoint (%qbnew_type* @qbnew to i64)
  %865 = inttoptr i64 %1039 to i32*
  %866 = load i32, i32* %865
  %867 = sext i32 %866 to i64
  %868 = mul nsw i64 %867, 24
  %869 = add i64 %868, %864
  %870 = inttoptr i64 %1041 to i32*
  %871 = load i32, i32* %870
  %872 = add i32 %871, -1
  %873 = zext i32 %872 to i64
  store i64 %873, i64* %7, align 8, !tbaa !1240
  %874 = sext i32 %872 to i64
  %875 = shl nsw i64 %874, 3
  %876 = add i64 %869, %875
  %877 = inttoptr i64 %876 to double*
  %878 = load double, double* %877
  %879 = inttoptr i64 %1038 to i64*
  %880 = load i64, i64* %879
  %881 = inttoptr i64 %1037 to i32*
  %882 = load i32, i32* %881
  %883 = sext i32 %882 to i64
  %884 = shl nsw i64 %883, 3
  %885 = add i64 %884, %880
  %886 = inttoptr i64 %885 to double*
  %887 = load double, double* %886
  %888 = fmul double %878, %887
  store double %888, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %889 = fadd double %859, %888
  store double %889, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %890 = inttoptr i64 %1040 to double*
  store double %889, double* %890
  %891 = inttoptr i64 %1041 to i32*
  %892 = load i32, i32* %891
  %893 = add i32 %892, 1
  %894 = inttoptr i64 %1041 to i32*
  store i32 %893, i32* %894
  %895 = add i64 %1056, -13
  br label %block_41b502

block_41c3d8.loopexit:                            ; preds = %block_41c2f3
  br label %block_41c3d8

block_41c3d8.loopexit603:                         ; preds = %block_41c143
  br label %block_41c3d8

block_41c3d8:                                     ; preds = %block_41c3d8.loopexit603, %block_41c3d8.loopexit
  %896 = phi i64 [ %1510, %block_41c3d8.loopexit ], [ %1643, %block_41c3d8.loopexit603 ]
  %897 = phi i64 [ %1509, %block_41c3d8.loopexit ], [ %1642, %block_41c3d8.loopexit603 ]
  %898 = phi i64 [ %1211, %block_41c3d8.loopexit ], [ %719, %block_41c3d8.loopexit603 ]
  %899 = phi i64 [ 5, %block_41c3d8.loopexit ], [ 244, %block_41c3d8.loopexit603 ]
  %900 = phi %struct.Memory* [ %1199, %block_41c3d8.loopexit ], [ %707, %block_41c3d8.loopexit603 ]
  %901 = add i64 %898, %899
  %902 = inttoptr i64 %897 to i32*
  %903 = load i32, i32* %902
  %904 = sext i32 %903 to i64
  %905 = mul nsw i64 %904, 2400
  %906 = add i64 %905, ptrtoint (%idmo_type* @idmo to i64)
  %907 = inttoptr i64 %896 to i32*
  %908 = load i32, i32* %907
  %909 = sext i32 %908 to i64
  %910 = mul nsw i64 %909, 400
  %911 = add i64 %910, %906
  %912 = add i64 %911, 184
  %913 = inttoptr i64 %912 to i32*
  %914 = load i32, i32* %913
  %915 = add i32 %914, 1
  %916 = icmp eq i32 %915, 0
  %917 = select i1 %916, i64 477, i64 57
  %918 = add i64 %901, %917
  %919 = load i64, i64* %10, align 8
  br i1 %916, label %block_41c5b5, label %block_41c411

block_41b11d:                                     ; preds = %block_41c981, %block_41b0e0
  %920 = phi i64 [ %56, %block_41b0e0 ], [ %1403, %block_41c981 ]
  %921 = phi i64 [ %53, %block_41b0e0 ], [ %2152, %block_41c981 ]
  %922 = phi %struct.Memory* [ %52, %block_41b0e0 ], [ %2153, %block_41c981 ]
  %923 = add i64 %921, -564
  %924 = inttoptr i64 %923 to i32*
  %925 = load i32, i32* %924
  %926 = zext i32 %925 to i64
  store i64 %926, i64* %4, align 8, !tbaa !1240
  %927 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %928 = sub i32 %925, %927
  %929 = lshr i32 %928, 31
  %930 = trunc i32 %929 to i8
  %931 = lshr i32 %925, 31
  %932 = lshr i32 %927, 31
  %933 = xor i32 %932, %931
  %934 = xor i32 %929, %931
  %935 = add nuw nsw i32 %934, %933
  %936 = icmp eq i32 %935, 2
  %937 = icmp ne i8 %930, 0
  %938 = xor i1 %937, %936
  %939 = select i1 %938, i64 19, i64 6269
  %940 = add i64 %920, %939
  br i1 %938, label %block_41b130, label %block_41c99a

block_41c70e:                                     ; preds = %block_41c71b, %block_41c6fc
  %941 = phi i64 [ %163, %block_41c6fc ], [ %836, %block_41c71b ]
  %942 = phi %struct.Memory* [ %1215, %block_41c6fc ], [ %942, %block_41c71b ]
  %943 = inttoptr i64 %1394 to i32*
  %944 = load i32, i32* %943
  %945 = add i32 %944, -4
  %946 = lshr i32 %945, 31
  %947 = lshr i32 %944, 31
  %948 = xor i32 %946, %947
  %949 = add nuw nsw i32 %948, %947
  %950 = icmp eq i32 %949, 2
  %951 = icmp ne i32 %946, 0
  %952 = xor i1 %951, %950
  %953 = select i1 %952, i64 13, i64 181
  %954 = add i64 %941, %953
  br i1 %952, label %block_41c71b, label %block_41c7c3

block_41c300:                                     ; preds = %block_41c2f3
  %955 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %956 = inttoptr i64 %1509 to i32*
  %957 = load i32, i32* %956
  %958 = sext i32 %957 to i64
  %959 = mul nsw i64 %958, 600
  %960 = add i64 %959, ptrtoint (%idel_type* @idel to i64)
  %961 = inttoptr i64 %1510 to i32*
  %962 = load i32, i32* %961
  %963 = sext i32 %962 to i64
  %964 = mul nsw i64 %963, 100
  %965 = add i64 %964, %960
  %966 = sext i32 %1201 to i64
  %967 = mul nsw i64 %966, 20
  store i64 %967, i64* %6, align 8, !tbaa !1240
  %968 = add i64 %967, %965
  %969 = add i64 %968, 16
  %970 = inttoptr i64 %969 to i32*
  %971 = load i32, i32* %970
  %972 = inttoptr i64 %1511 to i32*
  store i32 %971, i32* %972
  %973 = inttoptr i64 %1509 to i32*
  %974 = load i32, i32* %973
  %975 = sext i32 %974 to i64
  %976 = mul nsw i64 %975, 2400
  %977 = add i64 %976, ptrtoint (%idmo_type* @idmo to i64)
  %978 = inttoptr i64 %1510 to i32*
  %979 = load i32, i32* %978
  %980 = sext i32 %979 to i64
  %981 = mul nsw i64 %980, 400
  %982 = add i64 %981, %977
  %983 = inttoptr i64 %1506 to i32*
  %984 = load i32, i32* %983
  %985 = sext i32 %984 to i64
  %986 = mul nsw i64 %985, 20
  %987 = add i64 %986, %982
  %988 = add i64 %987, 16
  %989 = inttoptr i64 %988 to i32*
  %990 = load i32, i32* %989
  %991 = zext i32 %990 to i64
  store i64 %991, i64* %7, align 8, !tbaa !1240
  %992 = inttoptr i64 %1512 to i32*
  store i32 %990, i32* %992
  %993 = inttoptr i64 %1513 to i64*
  %994 = load i64, i64* %993
  %995 = inttoptr i64 %1512 to i32*
  %996 = load i32, i32* %995
  %997 = sext i32 %996 to i64
  %998 = shl nsw i64 %997, 3
  %999 = add i64 %998, %994
  %1000 = inttoptr i64 %999 to double*
  %1001 = load double, double* %1000
  %1002 = inttoptr i64 %1514 to i64*
  %1003 = load i64, i64* %1002
  %1004 = inttoptr i64 %1511 to i32*
  %1005 = load i32, i32* %1004
  %1006 = sext i32 %1005 to i64
  %1007 = shl nsw i64 %1006, 3
  %1008 = add i64 %1007, %1003
  %1009 = inttoptr i64 %1008 to double*
  %1010 = load double, double* %1009
  %1011 = fmul double %955, %1010
  store double %1011, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1012 = fadd double %1001, %1011
  store double %1012, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %1013 = inttoptr i64 %999 to double*
  store double %1012, double* %1013
  %1014 = inttoptr i64 %1506 to i32*
  %1015 = load i32, i32* %1014
  %1016 = add i32 %1015, 1
  %1017 = inttoptr i64 %1506 to i32*
  store i32 %1016, i32* %1017
  %1018 = add i64 %1211, -13
  br label %block_41c2f3

block_41b3f0:                                     ; preds = %block_41b189
  store i64 50, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %1019 = add i64 %659, -448
  store i64 %1019, i64* %8, align 8, !tbaa !1240
  %1020 = add i64 %676, 17504
  %1021 = add i64 %676, 23
  %1022 = load i64, i64* %9, align 8, !tbaa !1240
  %1023 = add i64 %1022, -8
  %1024 = inttoptr i64 %1023 to i64*
  store i64 %1021, i64* %1024
  store i64 %1023, i64* %9, align 8, !tbaa !1240
  %1025 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1020, %struct.Memory* %390)
  %1026 = load i64, i64* %10, align 8
  %1027 = add i64 %1026, -580
  %1028 = load i64, i64* %3, align 8
  %1029 = add i64 %1028, 10
  %1030 = inttoptr i64 %1027 to i32*
  store i32 0, i32* %1030
  %1031 = add i64 %1026, -572
  %1032 = add i64 %1026, -28
  %1033 = add i64 %1026, -584
  %1034 = add i64 %1026, -448
  %1035 = add i64 %1026, -564
  %1036 = add i64 %1026, -568
  %1037 = add i64 %1026, -604
  %1038 = add i64 %1026, -16
  %1039 = add i64 %1026, -592
  %1040 = add i64 %1026, -40
  %1041 = add i64 %1026, -588
  %1042 = add i64 %1026, -528
  br label %block_41b411

block_41b502:                                     ; preds = %block_41b443, %block_41b50f
  %1043 = phi i64 [ %2070, %block_41b443 ], [ %895, %block_41b50f ]
  %1044 = phi %struct.Memory* [ %376, %block_41b443 ], [ %1044, %block_41b50f ]
  %1045 = inttoptr i64 %1041 to i32*
  %1046 = load i32, i32* %1045
  %1047 = add i32 %1046, -4
  %1048 = lshr i32 %1047, 31
  %1049 = lshr i32 %1046, 31
  %1050 = xor i32 %1048, %1049
  %1051 = add nuw nsw i32 %1050, %1049
  %1052 = icmp eq i32 %1051, 2
  %1053 = icmp ne i32 %1048, 0
  %1054 = xor i1 %1053, %1052
  %1055 = select i1 %1054, i64 13, i64 189
  %1056 = add i64 %1043, %1055
  br i1 %1054, label %block_41b50f, label %block_41b5bf

block_41c501:                                     ; preds = %block_41c451
  %1057 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %1058 = inttoptr i64 %1756 to i32*
  %1059 = load i32, i32* %1058
  %1060 = sext i32 %1059 to i64
  %1061 = mul nsw i64 %1060, 2400
  %1062 = add i64 %1061, ptrtoint (%idmo_type* @idmo to i64)
  %1063 = inttoptr i64 %1757 to i32*
  %1064 = load i32, i32* %1063
  %1065 = sext i32 %1064 to i64
  %1066 = mul nsw i64 %1065, 400
  %1067 = add i64 %1066, %1062
  %1068 = inttoptr i64 %1750 to i32*
  %1069 = load i32, i32* %1068
  %1070 = sext i32 %1069 to i64
  %1071 = mul nsw i64 %1070, 200
  %1072 = add i64 %1071, %1067
  %1073 = inttoptr i64 %1753 to i32*
  %1074 = load i32, i32* %1073
  %1075 = sext i32 %1074 to i64
  %1076 = shl nsw i64 %1075, 2
  %1077 = add i64 %1072, 180
  %1078 = add i64 %1077, %1076
  %1079 = inttoptr i64 %1078 to i32*
  %1080 = load i32, i32* %1079
  %1081 = zext i32 %1080 to i64
  store i64 %1081, i64* %6, align 8, !tbaa !1240
  %1082 = inttoptr i64 %1760 to i32*
  store i32 %1080, i32* %1082
  %1083 = inttoptr i64 %1761 to i64*
  %1084 = load i64, i64* %1083
  %1085 = inttoptr i64 %1760 to i32*
  %1086 = load i32, i32* %1085
  %1087 = sext i32 %1086 to i64
  %1088 = shl nsw i64 %1087, 3
  %1089 = add i64 %1088, %1084
  %1090 = inttoptr i64 %1089 to double*
  %1091 = load double, double* %1090
  %1092 = inttoptr i64 %1754 to double*
  %1093 = load double, double* %1092
  %1094 = fmul double %1057, %1093
  store double %1094, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1095 = fadd double %1091, %1094
  store double %1095, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %1096 = inttoptr i64 %1089 to double*
  store double %1095, double* %1096
  %1097 = inttoptr i64 %1753 to i32*
  %1098 = load i32, i32* %1097
  %1099 = add i32 %1098, 1
  %1100 = inttoptr i64 %1753 to i32*
  store i32 %1099, i32* %1100
  %1101 = add i64 %2005, -207
  br label %block_41c432

block_41c100.loopexit:                            ; preds = %block_41c029
  br label %block_41c100

block_41c100.loopexit604:                         ; preds = %block_41be8a
  br label %block_41c100

block_41c100:                                     ; preds = %block_41c100.loopexit604, %block_41c100.loopexit
  %1102 = phi i64 [ %2470, %block_41c100.loopexit ], [ %1736, %block_41c100.loopexit604 ]
  %1103 = phi i64 [ %2469, %block_41c100.loopexit ], [ %1735, %block_41c100.loopexit604 ]
  %1104 = phi i64 [ %2347, %block_41c100.loopexit ], [ %1728, %block_41c100.loopexit604 ]
  %1105 = phi i64 [ 5, %block_41c100.loopexit ], [ 230, %block_41c100.loopexit604 ]
  %1106 = phi %struct.Memory* [ %2335, %block_41c100.loopexit ], [ %1716, %block_41c100.loopexit604 ]
  %1107 = add i64 %1104, %1105
  %1108 = inttoptr i64 %1103 to i32*
  %1109 = load i32, i32* %1108
  %1110 = sext i32 %1109 to i64
  %1111 = mul nsw i64 %1110, 2400
  %1112 = add i64 %1111, ptrtoint (%idmo_type* @idmo to i64)
  %1113 = inttoptr i64 %1102 to i32*
  %1114 = load i32, i32* %1113
  %1115 = sext i32 %1114 to i64
  %1116 = mul nsw i64 %1115, 400
  %1117 = add i64 %1116, %1112
  %1118 = add i64 %1117, 236
  %1119 = inttoptr i64 %1118 to i32*
  %1120 = load i32, i32* %1119
  %1121 = add i32 %1120, 1
  %1122 = icmp eq i32 %1121, 0
  %1123 = select i1 %1122, i64 489, i64 57
  %1124 = add i64 %1107, %1123
  %1125 = load i64, i64* %10, align 8
  br i1 %1122, label %block_41c2e9, label %block_41c139

block_41c7c3:                                     ; preds = %block_41c70e
  %1126 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %1127 = inttoptr i64 %1395 to i32*
  %1128 = load i32, i32* %1127
  %1129 = sext i32 %1128 to i64
  %1130 = mul nsw i64 %1129, 2400
  %1131 = add i64 %1130, ptrtoint (%idmo_type* @idmo to i64)
  %1132 = inttoptr i64 %1396 to i32*
  %1133 = load i32, i32* %1132
  %1134 = sext i32 %1133 to i64
  %1135 = mul nsw i64 %1134, 400
  %1136 = add i64 %1135, %1131
  %1137 = inttoptr i64 %1389 to i32*
  %1138 = load i32, i32* %1137
  %1139 = sext i32 %1138 to i64
  %1140 = mul nsw i64 %1139, 100
  %1141 = add i64 %1140, %1136
  %1142 = inttoptr i64 %1392 to i32*
  %1143 = load i32, i32* %1142
  %1144 = sext i32 %1143 to i64
  %1145 = mul nsw i64 %1144, 20
  %1146 = add i64 %1145, %1141
  %1147 = inttoptr i64 %1146 to i32*
  %1148 = load i32, i32* %1147
  %1149 = zext i32 %1148 to i64
  store i64 %1149, i64* %6, align 8, !tbaa !1240
  %1150 = inttoptr i64 %1399 to i32*
  store i32 %1148, i32* %1150
  %1151 = inttoptr i64 %1400 to i64*
  %1152 = load i64, i64* %1151
  %1153 = inttoptr i64 %1399 to i32*
  %1154 = load i32, i32* %1153
  %1155 = sext i32 %1154 to i64
  %1156 = shl nsw i64 %1155, 3
  %1157 = add i64 %1156, %1152
  %1158 = inttoptr i64 %1157 to double*
  %1159 = load double, double* %1158
  %1160 = inttoptr i64 %1393 to double*
  %1161 = load double, double* %1160
  %1162 = fmul double %1126, %1161
  store double %1162, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1163 = fadd double %1159, %1162
  store double %1163, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  store i64 %1155, i64* %5, align 8, !tbaa !1240
  %1164 = inttoptr i64 %1157 to double*
  store double %1163, double* %1164
  %1165 = inttoptr i64 %1392 to i32*
  %1166 = load i32, i32* %1165
  %1167 = add i32 %1166, 1
  %1168 = inttoptr i64 %1392 to i32*
  store i32 %1167, i32* %1168
  %1169 = add i64 %954, -212
  br label %block_41c6ef

block_41b7b5:                                     ; preds = %block_41b7a2, %block_41bcf7
  %1170 = phi i64 [ %1557, %block_41b7a2 ], [ %1192, %block_41bcf7 ]
  %1171 = phi %struct.Memory* [ %232, %block_41b7a2 ], [ %1301, %block_41bcf7 ]
  %1172 = inttoptr i64 %1027 to i32*
  %1173 = load i32, i32* %1172
  %1174 = inttoptr i64 %1031 to i32*
  %1175 = load i32, i32* %1174
  %1176 = sub i32 %1173, %1175
  %1177 = lshr i32 %1176, 31
  %1178 = lshr i32 %1173, 31
  %1179 = lshr i32 %1175, 31
  %1180 = xor i32 %1179, %1178
  %1181 = xor i32 %1177, %1178
  %1182 = add nuw nsw i32 %1181, %1180
  %1183 = icmp eq i32 %1182, 2
  %1184 = icmp ne i32 %1177, 0
  %1185 = xor i1 %1184, %1183
  %1186 = select i1 %1185, i64 18, i64 1371
  %1187 = add i64 %1170, %1186
  br i1 %1185, label %block_41b7c7, label %block_41bd10

block_41bcf7:                                     ; preds = %block_41bb25
  %1188 = inttoptr i64 %1027 to i32*
  %1189 = load i32, i32* %1188
  %1190 = add i32 %1189, 1
  %1191 = inttoptr i64 %1027 to i32*
  store i32 %1190, i32* %1191
  %1192 = add i64 %1313, -1346
  br label %block_41b7b5

block_41bd10:                                     ; preds = %block_41b7b5
  %1193 = inttoptr i64 %1762 to i32*
  %1194 = load i32, i32* %1193
  %1195 = add i32 %1194, 1
  %1196 = inttoptr i64 %1762 to i32*
  store i32 %1195, i32* %1196
  %1197 = add i64 %1187, -1408
  br label %block_41b790

block_41c2f3:                                     ; preds = %block_41c2e9, %block_41c300
  %1198 = phi i64 [ %1507, %block_41c2e9 ], [ %1018, %block_41c300 ]
  %1199 = phi %struct.Memory* [ %1106, %block_41c2e9 ], [ %1199, %block_41c300 ]
  %1200 = inttoptr i64 %1506 to i32*
  %1201 = load i32, i32* %1200
  %1202 = add i32 %1201, -4
  %1203 = lshr i32 %1202, 31
  %1204 = lshr i32 %1201, 31
  %1205 = xor i32 %1203, %1204
  %1206 = add nuw nsw i32 %1205, %1204
  %1207 = icmp eq i32 %1206, 2
  %1208 = icmp ne i32 %1203, 0
  %1209 = xor i1 %1208, %1207
  %1210 = select i1 %1209, i64 13, i64 224
  %1211 = add i64 %1198, %1210
  br i1 %1209, label %block_41c300, label %block_41c3d8.loopexit

block_41c428:                                     ; preds = %block_41c41b
  %1212 = add i64 %2506, 10
  %1213 = inttoptr i64 %1753 to i32*
  store i32 0, i32* %1213
  br label %block_41c432

block_41c6ef:                                     ; preds = %block_41c6e5, %block_41c7c3
  %1214 = phi i64 [ %1284, %block_41c6e5 ], [ %1169, %block_41c7c3 ]
  %1215 = phi %struct.Memory* [ %1361, %block_41c6e5 ], [ %942, %block_41c7c3 ]
  %1216 = inttoptr i64 %1392 to i32*
  %1217 = load i32, i32* %1216
  %1218 = add i32 %1217, -5
  %1219 = lshr i32 %1218, 31
  %1220 = lshr i32 %1217, 31
  %1221 = xor i32 %1219, %1220
  %1222 = add nuw nsw i32 %1221, %1220
  %1223 = icmp eq i32 %1222, 2
  %1224 = icmp ne i32 %1219, 0
  %1225 = xor i1 %1224, %1223
  %1226 = select i1 %1225, i64 13, i64 361
  %1227 = add i64 %1214, %1226
  br i1 %1225, label %block_41c6fc, label %block_41c858

block_41b8fb:                                     ; preds = %block_41b8ee
  %1228 = inttoptr i64 %1040 to double*
  %1229 = load double, double* %1228
  %1230 = inttoptr i64 %1027 to i32*
  %1231 = load i32, i32* %1230
  %1232 = sext i32 %1231 to i64
  %1233 = mul nsw i64 %1232, 120
  %1234 = add i64 %1233, ptrtoint (%qbnew_type* @qbnew to i64)
  %1235 = inttoptr i64 %1039 to i32*
  %1236 = load i32, i32* %1235
  %1237 = sext i32 %1236 to i64
  %1238 = mul nsw i64 %1237, 24
  %1239 = add i64 %1238, %1234
  %1240 = add i32 %1349, -1
  %1241 = sext i32 %1240 to i64
  %1242 = shl nsw i64 %1241, 3
  %1243 = add i64 %1239, %1242
  %1244 = inttoptr i64 %1243 to double*
  %1245 = load double, double* %1244
  %1246 = inttoptr i64 %1762 to i32*
  %1247 = load i32, i32* %1246
  %1248 = sext i32 %1247 to i64
  %1249 = mul nsw i64 %1248, 200
  %1250 = add i64 %1249, %1034
  %1251 = inttoptr i64 %1033 to i32*
  %1252 = load i32, i32* %1251
  %1253 = sext i32 %1252 to i64
  %1254 = mul nsw i64 %1253, 40
  %1255 = add i64 %1254, %1250
  %1256 = sext i32 %1349 to i64
  %1257 = shl nsw i64 %1256, 3
  %1258 = add i64 %1257, %1255
  %1259 = inttoptr i64 %1258 to double*
  %1260 = load double, double* %1259
  %1261 = fmul double %1245, %1260
  store double %1261, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %1262 = fadd double %1229, %1261
  store double %1262, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1263 = inttoptr i64 %1040 to double*
  store double %1262, double* %1263
  %1264 = inttoptr i64 %1041 to i32*
  %1265 = load i32, i32* %1264
  %1266 = add i32 %1265, 1
  %1267 = inttoptr i64 %1041 to i32*
  store i32 %1266, i32* %1267
  %1268 = add i64 %1359, -13
  br label %block_41b8ee

block_41c880:                                     ; preds = %block_41c876, %block_41c88d
  %1269 = phi i64 [ %1742, %block_41c876 ], [ %1714, %block_41c88d ]
  %1270 = phi %struct.Memory* [ %1536, %block_41c876 ], [ %1270, %block_41c88d ]
  %1271 = inttoptr i64 %1741 to i32*
  %1272 = load i32, i32* %1271
  %1273 = add i32 %1272, -4
  %1274 = lshr i32 %1273, 31
  %1275 = trunc i32 %1274 to i8
  %1276 = lshr i32 %1272, 31
  %1277 = xor i32 %1274, %1276
  %1278 = add nuw nsw i32 %1277, %1276
  %1279 = icmp eq i32 %1278, 2
  %1280 = icmp ne i8 %1275, 0
  %1281 = xor i1 %1280, %1279
  %1282 = select i1 %1281, i64 13, i64 222
  %1283 = add i64 %1269, %1282
  br i1 %1281, label %block_41c88d, label %block_41c963.loopexit

block_41c6e5:                                     ; preds = %block_41c6d8
  %1284 = add i64 %1374, 10
  %1285 = inttoptr i64 %1392 to i32*
  store i32 0, i32* %1285
  br label %block_41c6ef

block_41c5bf:                                     ; preds = %block_41c5cc, %block_41c5b5
  %1286 = phi i64 [ %1484, %block_41c5b5 ], [ %2462, %block_41c5cc ]
  %1287 = phi %struct.Memory* [ %900, %block_41c5b5 ], [ %1287, %block_41c5cc ]
  %1288 = inttoptr i64 %1483 to i32*
  %1289 = load i32, i32* %1288
  %1290 = add i32 %1289, -4
  %1291 = lshr i32 %1290, 31
  %1292 = lshr i32 %1289, 31
  %1293 = xor i32 %1291, %1292
  %1294 = add nuw nsw i32 %1293, %1292
  %1295 = icmp eq i32 %1294, 2
  %1296 = icmp ne i32 %1291, 0
  %1297 = xor i1 %1296, %1295
  %1298 = select i1 %1297, i64 13, i64 212
  %1299 = add i64 %1286, %1298
  br i1 %1297, label %block_41c5cc, label %block_41c698.loopexit

block_41bb25:                                     ; preds = %block_41ba41, %block_41bc44
  %1300 = phi i64 [ %2145, %block_41ba41 ], [ %1921, %block_41bc44 ]
  %1301 = phi %struct.Memory* [ %1405, %block_41ba41 ], [ %2508, %block_41bc44 ]
  %1302 = inttoptr i64 %1039 to i32*
  %1303 = load i32, i32* %1302
  %1304 = add i32 %1303, -5
  %1305 = lshr i32 %1304, 31
  %1306 = lshr i32 %1303, 31
  %1307 = xor i32 %1305, %1306
  %1308 = add nuw nsw i32 %1307, %1306
  %1309 = icmp eq i32 %1308, 2
  %1310 = icmp ne i32 %1305, 0
  %1311 = xor i1 %1310, %1309
  %1312 = select i1 %1311, i64 13, i64 466
  %1313 = add i64 %1300, %1312
  br i1 %1311, label %block_41bb32, label %block_41bcf7

block_41b8dc:                                     ; preds = %block_41b8cf
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %1314 = load double, double* %58, align 1
  %1315 = inttoptr i64 %1040 to double*
  store double %1314, double* %1315
  %1316 = add i64 %1388, 18
  %1317 = inttoptr i64 %1041 to i32*
  store i32 1, i32* %1317
  br label %block_41b8ee

block_41b6db:                                     ; preds = %block_41b61e
  %1318 = inttoptr i64 %1040 to double*
  %1319 = load double, double* %1318
  %1320 = inttoptr i64 %1027 to i32*
  %1321 = load i32, i32* %1320
  %1322 = sext i32 %1321 to i64
  %1323 = mul nsw i64 %1322, 200
  %1324 = add i64 %1323, %1034
  %1325 = inttoptr i64 %1039 to i32*
  %1326 = load i32, i32* %1325
  %1327 = sext i32 %1326 to i64
  %1328 = mul nsw i64 %1327, 40
  %1329 = add i64 %1328, %1324
  store i64 %1329, i64* %6, align 8, !tbaa !1240
  %1330 = inttoptr i64 %1033 to i32*
  %1331 = load i32, i32* %1330
  %1332 = sext i32 %1331 to i64
  %1333 = shl nsw i64 %1332, 3
  %1334 = add i64 %1333, %1329
  %1335 = inttoptr i64 %1334 to double*
  %1336 = load double, double* %1335
  %1337 = fadd double %1319, %1336
  store double %1337, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1338 = inttoptr i64 %1334 to double*
  store double %1337, double* %1338
  %1339 = inttoptr i64 %1039 to i32*
  %1340 = load i32, i32* %1339
  %1341 = add i32 %1340, 1
  %1342 = inttoptr i64 %1039 to i32*
  store i32 %1341, i32* %1342
  %1343 = add i64 %2492, -229
  br label %block_41b5f6

block_41b170:                                     ; preds = %block_41b147
  %1344 = inttoptr i64 %704 to i32*
  store i32 2, i32* %1344
  %1345 = add i64 %702, 25
  br label %block_41b189

block_41b8ee:                                     ; preds = %block_41b8dc, %block_41b8fb
  %1346 = phi i64 [ %1316, %block_41b8dc ], [ %1268, %block_41b8fb ]
  %1347 = phi %struct.Memory* [ %1376, %block_41b8dc ], [ %1347, %block_41b8fb ]
  %1348 = inttoptr i64 %1041 to i32*
  %1349 = load i32, i32* %1348
  %1350 = add i32 %1349, -4
  %1351 = lshr i32 %1350, 31
  %1352 = lshr i32 %1349, 31
  %1353 = xor i32 %1351, %1352
  %1354 = add nuw nsw i32 %1353, %1352
  %1355 = icmp eq i32 %1354, 2
  %1356 = icmp ne i32 %1351, 0
  %1357 = xor i1 %1356, %1355
  %1358 = select i1 %1357, i64 13, i64 152
  %1359 = add i64 %1346, %1358
  br i1 %1357, label %block_41b8fb, label %block_41b986

block_41c6d8:                                     ; preds = %block_41c858, %block_41c6ce
  %1360 = phi i64 [ %1390, %block_41c6ce ], [ %1827, %block_41c858 ]
  %1361 = phi %struct.Memory* [ %1536, %block_41c6ce ], [ %1215, %block_41c858 ]
  %1362 = inttoptr i64 %1389 to i32*
  %1363 = load i32, i32* %1362
  %1364 = add i32 %1363, -2
  %1365 = lshr i32 %1364, 31
  %1366 = trunc i32 %1365 to i8
  %1367 = lshr i32 %1363, 31
  %1368 = xor i32 %1365, %1367
  %1369 = add nuw nsw i32 %1368, %1367
  %1370 = icmp eq i32 %1369, 2
  %1371 = icmp ne i8 %1366, 0
  %1372 = xor i1 %1371, %1370
  %1373 = select i1 %1372, i64 13, i64 409
  %1374 = add i64 %1360, %1373
  br i1 %1372, label %block_41c6e5, label %block_41c963.loopexit379

block_41b8cf:                                     ; preds = %block_41b986, %block_41b7ee
  %1375 = phi i64 [ %159, %block_41b7ee ], [ %782, %block_41b986 ]
  %1376 = phi %struct.Memory* [ %1405, %block_41b7ee ], [ %1347, %block_41b986 ]
  %1377 = inttoptr i64 %1039 to i32*
  %1378 = load i32, i32* %1377
  %1379 = add i32 %1378, -5
  %1380 = lshr i32 %1379, 31
  %1381 = lshr i32 %1378, 31
  %1382 = xor i32 %1380, %1381
  %1383 = add nuw nsw i32 %1382, %1381
  %1384 = icmp eq i32 %1383, 2
  %1385 = icmp ne i32 %1380, 0
  %1386 = xor i1 %1385, %1384
  %1387 = select i1 %1386, i64 13, i64 345
  %1388 = add i64 %1375, %1387
  br i1 %1386, label %block_41b8dc, label %block_41ba28

block_41c6ce:                                     ; preds = %block_41c698
  %1389 = add i64 %1555, -596
  %1390 = add i64 %1554, 10
  %1391 = inttoptr i64 %1389 to i32*
  store i32 0, i32* %1391
  %1392 = add i64 %1555, -592
  %1393 = add i64 %1555, -40
  %1394 = add i64 %1555, -588
  %1395 = add i64 %1555, -564
  %1396 = add i64 %1555, -568
  %1397 = add i64 %1555, -604
  %1398 = add i64 %1555, -16
  %1399 = add i64 %1555, -600
  %1400 = add i64 %1555, -8
  br label %block_41c6d8

block_41c981:                                     ; preds = %block_41b13a
  %1401 = add i32 %2170, 1
  %1402 = inttoptr i64 %2168 to i32*
  store i32 %1401, i32* %1402
  %1403 = add i64 %2167, -6244
  br label %block_41b11d

block_41b7d8:                                     ; preds = %block_41ba28, %block_41b7c7
  %1404 = phi i64 [ %169, %block_41b7c7 ], [ %2398, %block_41ba28 ]
  %1405 = phi %struct.Memory* [ %1171, %block_41b7c7 ], [ %1376, %block_41ba28 ]
  %1406 = inttoptr i64 %1033 to i32*
  %1407 = load i32, i32* %1406
  %1408 = inttoptr i64 %1032 to i32*
  %1409 = load i32, i32* %1408
  %1410 = sub i32 5, %1409
  %1411 = sub i32 %1407, %1410
  %1412 = lshr i32 %1411, 31
  %1413 = lshr i32 %1407, 31
  %1414 = lshr i32 %1410, 31
  %1415 = xor i32 %1414, %1413
  %1416 = xor i32 %1412, %1413
  %1417 = add nuw nsw i32 %1416, %1415
  %1418 = icmp eq i32 %1417, 2
  %1419 = icmp ne i32 %1412, 0
  %1420 = xor i1 %1419, %1418
  %1421 = select i1 %1420, i64 22, i64 617
  %1422 = add i64 %1404, %1421
  %1423 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %1423, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %59, align 1, !tbaa !1246
  br i1 %1420, label %block_41b7ee, label %block_41ba41

block_41becd:                                     ; preds = %block_41bec0
  %1424 = inttoptr i64 %1735 to i32*
  %1425 = load i32, i32* %1424
  %1426 = sext i32 %1425 to i64
  %1427 = mul nsw i64 %1426, 600
  %1428 = add i64 %1427, ptrtoint (%idel_type* @idel to i64)
  %1429 = inttoptr i64 %1736 to i32*
  %1430 = load i32, i32* %1429
  %1431 = sext i32 %1430 to i64
  %1432 = mul nsw i64 %1431, 100
  %1433 = add i64 %1432, %1428
  %1434 = sext i32 %1495 to i64
  %1435 = shl nsw i64 %1434, 2
  %1436 = add i64 %1435, %1433
  %1437 = inttoptr i64 %1436 to i32*
  %1438 = load i32, i32* %1437
  %1439 = inttoptr i64 %1737 to i32*
  store i32 %1438, i32* %1439
  %1440 = inttoptr i64 %1733 to double*
  %1441 = load double, double* %1440
  %1442 = inttoptr i64 %1729 to i32*
  %1443 = load i32, i32* %1442
  %1444 = sext i32 %1443 to i64
  %1445 = mul nsw i64 %1444, 120
  %1446 = add i64 %1445, ptrtoint (%qbnew_type* @qbnew to i64)
  %1447 = inttoptr i64 %1732 to i32*
  %1448 = load i32, i32* %1447
  %1449 = sext i32 %1448 to i64
  %1450 = mul nsw i64 %1449, 24
  %1451 = add i64 %1450, %1446
  %1452 = inttoptr i64 %1734 to i32*
  %1453 = load i32, i32* %1452
  %1454 = add i32 %1453, -1
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %7, align 8, !tbaa !1240
  %1456 = sext i32 %1454 to i64
  %1457 = shl nsw i64 %1456, 3
  %1458 = add i64 %1451, %1457
  %1459 = inttoptr i64 %1458 to double*
  %1460 = load double, double* %1459
  %1461 = inttoptr i64 %1738 to i64*
  %1462 = load i64, i64* %1461
  %1463 = inttoptr i64 %1737 to i32*
  %1464 = load i32, i32* %1463
  %1465 = sext i32 %1464 to i64
  %1466 = shl nsw i64 %1465, 3
  %1467 = add i64 %1466, %1462
  %1468 = inttoptr i64 %1467 to double*
  %1469 = load double, double* %1468
  %1470 = fmul double %1460, %1469
  store double %1470, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %1471 = fadd double %1441, %1470
  store double %1471, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1472 = inttoptr i64 %1733 to double*
  store double %1471, double* %1472
  %1473 = inttoptr i64 %1734 to i32*
  %1474 = load i32, i32* %1473
  %1475 = add i32 %1474, 1
  %1476 = inttoptr i64 %1734 to i32*
  store i32 %1475, i32* %1476
  %1477 = add i64 %1505, -13
  br label %block_41bec0

block_41c2cb:                                     ; preds = %block_41c15a
  %1478 = inttoptr i64 %1636 to i32*
  %1479 = load i32, i32* %1478
  %1480 = add i32 %1479, 1
  %1481 = inttoptr i64 %1636 to i32*
  store i32 %1480, i32* %1481
  %1482 = add i64 %366, -392
  br label %block_41c143

block_41c5b5:                                     ; preds = %block_41c3d8
  %1483 = add i64 %919, -592
  %1484 = add i64 %918, 10
  %1485 = inttoptr i64 %1483 to i32*
  store i32 1, i32* %1485
  %1486 = add i64 %919, -564
  %1487 = add i64 %919, -568
  %1488 = add i64 %919, -604
  %1489 = add i64 %919, -600
  %1490 = add i64 %919, -8
  %1491 = add i64 %919, -16
  br label %block_41c5bf

block_41bec0:                                     ; preds = %block_41beae, %block_41becd
  %1492 = phi i64 [ %2477, %block_41beae ], [ %1477, %block_41becd ]
  %1493 = phi %struct.Memory* [ %1516, %block_41beae ], [ %1493, %block_41becd ]
  %1494 = inttoptr i64 %1734 to i32*
  %1495 = load i32, i32* %1494
  %1496 = add i32 %1495, -4
  %1497 = lshr i32 %1496, 31
  %1498 = lshr i32 %1495, 31
  %1499 = xor i32 %1497, %1498
  %1500 = add nuw nsw i32 %1499, %1498
  %1501 = icmp eq i32 %1500, 2
  %1502 = icmp ne i32 %1497, 0
  %1503 = xor i1 %1502, %1501
  %1504 = select i1 %1503, i64 13, i64 175
  %1505 = add i64 %1492, %1504
  br i1 %1503, label %block_41becd, label %block_41bf6f

block_41c2e9:                                     ; preds = %block_41c100
  %1506 = add i64 %1125, -592
  %1507 = add i64 %1124, 10
  %1508 = inttoptr i64 %1506 to i32*
  store i32 1, i32* %1508
  %1509 = add i64 %1125, -564
  %1510 = add i64 %1125, -568
  %1511 = add i64 %1125, -604
  %1512 = add i64 %1125, -600
  %1513 = add i64 %1125, -8
  %1514 = add i64 %1125, -16
  br label %block_41c2f3

block_41bea1:                                     ; preds = %block_41be97, %block_41bf6f
  %1515 = phi i64 [ %1559, %block_41be97 ], [ %336, %block_41bf6f ]
  %1516 = phi %struct.Memory* [ %1716, %block_41be97 ], [ %1493, %block_41bf6f ]
  %1517 = inttoptr i64 %1732 to i32*
  %1518 = load i32, i32* %1517
  %1519 = add i32 %1518, -5
  %1520 = lshr i32 %1519, 31
  %1521 = lshr i32 %1518, 31
  %1522 = xor i32 %1520, %1521
  %1523 = add nuw nsw i32 %1522, %1521
  %1524 = icmp eq i32 %1523, 2
  %1525 = icmp ne i32 %1520, 0
  %1526 = xor i1 %1525, %1524
  %1527 = select i1 %1526, i64 13, i64 352
  %1528 = add i64 %1515, %1527
  br i1 %1526, label %block_41beae, label %block_41c001

block_41b130:                                     ; preds = %block_41b11d
  %1529 = add i64 %921, -568
  %1530 = add i64 %940, 10
  %1531 = inttoptr i64 %1529 to i32*
  store i32 0, i32* %1531
  br label %block_41b13a

block_41c698.loopexit:                            ; preds = %block_41c5bf
  br label %block_41c698

block_41c698.loopexit602:                         ; preds = %block_41c41b
  br label %block_41c698

block_41c698:                                     ; preds = %block_41c698.loopexit602, %block_41c698.loopexit
  %1532 = phi i64 [ %1487, %block_41c698.loopexit ], [ %1757, %block_41c698.loopexit602 ]
  %1533 = phi i64 [ %1486, %block_41c698.loopexit ], [ %1756, %block_41c698.loopexit602 ]
  %1534 = phi i64 [ %1299, %block_41c698.loopexit ], [ %2506, %block_41c698.loopexit602 ]
  %1535 = phi i64 [ 5, %block_41c698.loopexit ], [ 232, %block_41c698.loopexit602 ]
  %1536 = phi %struct.Memory* [ %1287, %block_41c698.loopexit ], [ %2494, %block_41c698.loopexit602 ]
  %1537 = add i64 %1534, %1535
  %1538 = inttoptr i64 %1533 to i32*
  %1539 = load i32, i32* %1538
  %1540 = sext i32 %1539 to i64
  %1541 = mul nsw i64 %1540, 2400
  %1542 = add i64 %1541, ptrtoint (%idmo_type* @idmo to i64)
  %1543 = inttoptr i64 %1532 to i32*
  %1544 = load i32, i32* %1543
  %1545 = sext i32 %1544 to i64
  %1546 = mul nsw i64 %1545, 400
  store i64 %1546, i64* %5, align 8, !tbaa !1240
  %1547 = add i64 %1546, %1542
  %1548 = add i64 %1547, 80
  %1549 = inttoptr i64 %1548 to i32*
  %1550 = load i32, i32* %1549
  %1551 = add i32 %1550, 1
  %1552 = icmp eq i32 %1551, 0
  %1553 = select i1 %1552, i64 478, i64 54
  %1554 = add i64 %1537, %1553
  %1555 = load i64, i64* %10, align 8
  br i1 %1552, label %block_41c876, label %block_41c6ce

block_41b7a2:                                     ; preds = %block_41b790
  %1556 = inttoptr i64 %1032 to i32*
  store i32 %234, i32* %1556
  %1557 = add i64 %249, 19
  %1558 = inttoptr i64 %1027 to i32*
  store i32 0, i32* %1558
  br label %block_41b7b5

block_41be97:                                     ; preds = %block_41be8a
  %1559 = add i64 %1728, 10
  %1560 = inttoptr i64 %1732 to i32*
  store i32 0, i32* %1560
  br label %block_41bea1

block_41bb56:                                     ; preds = %block_41bb49
  %1561 = inttoptr i64 %1040 to double*
  %1562 = load double, double* %1561
  %1563 = inttoptr i64 %1027 to i32*
  %1564 = load i32, i32* %1563
  %1565 = sext i32 %1564 to i64
  %1566 = mul nsw i64 %1565, 120
  %1567 = add i64 %1566, ptrtoint (%qbnew_type* @qbnew to i64)
  %1568 = inttoptr i64 %1039 to i32*
  %1569 = load i32, i32* %1568
  %1570 = sext i32 %1569 to i64
  %1571 = mul nsw i64 %1570, 24
  %1572 = add i64 %1571, %1567
  store i64 %1572, i64* %8, align 8, !tbaa !1240
  %1573 = add i32 %2510, -1
  %1574 = sext i32 %1573 to i64
  %1575 = shl nsw i64 %1574, 3
  %1576 = add i64 %1572, %1575
  %1577 = inttoptr i64 %1576 to double*
  %1578 = load double, double* %1577
  %1579 = inttoptr i64 %1762 to i32*
  %1580 = load i32, i32* %1579
  %1581 = sext i32 %1580 to i64
  %1582 = mul nsw i64 %1581, 200
  %1583 = add i64 %1582, %1034
  %1584 = inttoptr i64 %1033 to i32*
  %1585 = load i32, i32* %1584
  %1586 = sext i32 %1585 to i64
  %1587 = mul nsw i64 %1586, 40
  %1588 = add i64 %1587, %1583
  %1589 = sext i32 %2510 to i64
  store i64 %1589, i64* %7, align 8, !tbaa !1240
  %1590 = shl nsw i64 %1589, 3
  %1591 = add i64 %1590, %1588
  %1592 = inttoptr i64 %1591 to double*
  %1593 = load double, double* %1592
  %1594 = fmul double %1578, %1593
  %1595 = fadd double %1562, %1594
  %1596 = inttoptr i64 %1040 to double*
  store double %1595, double* %1596
  %1597 = inttoptr i64 %1767 to double*
  %1598 = load double, double* %1597
  %1599 = inttoptr i64 %1027 to i32*
  %1600 = load i32, i32* %1599
  %1601 = sext i32 %1600 to i64
  %1602 = mul nsw i64 %1601, 120
  %1603 = add i64 %1602, ptrtoint (%qbnew_type* @qbnew to i64)
  %1604 = inttoptr i64 %1039 to i32*
  %1605 = load i32, i32* %1604
  %1606 = sext i32 %1605 to i64
  %1607 = mul nsw i64 %1606, 24
  %1608 = add i64 %1607, %1603
  %1609 = inttoptr i64 %1041 to i32*
  %1610 = load i32, i32* %1609
  %1611 = add i32 %1610, -1
  %1612 = zext i32 %1611 to i64
  store i64 %1612, i64* %71, align 8, !tbaa !1240
  %1613 = sext i32 %1611 to i64
  %1614 = shl nsw i64 %1613, 3
  %1615 = add i64 %1608, %1614
  %1616 = inttoptr i64 %1615 to double*
  %1617 = load double, double* %1616
  %1618 = inttoptr i64 %1762 to i32*
  %1619 = load i32, i32* %1618
  %1620 = sext i32 %1619 to i64
  %1621 = mul nsw i64 %1620, 40
  %1622 = add i64 %1621, %1042
  %1623 = sext i32 %1610 to i64
  %1624 = shl nsw i64 %1623, 3
  %1625 = add i64 %1624, %1622
  %1626 = inttoptr i64 %1625 to double*
  %1627 = load double, double* %1626
  %1628 = fmul double %1617, %1627
  store double %1628, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %1629 = fadd double %1598, %1628
  store double %1629, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1630 = inttoptr i64 %1767 to double*
  store double %1629, double* %1630
  %1631 = inttoptr i64 %1041 to i32*
  %1632 = load i32, i32* %1631
  %1633 = add i32 %1632, 1
  %1634 = inttoptr i64 %1041 to i32*
  store i32 %1633, i32* %1634
  %1635 = add i64 %2520, -13
  br label %block_41bb49

block_41c139:                                     ; preds = %block_41c100
  %1636 = add i64 %1125, -596
  %1637 = add i64 %1124, 10
  %1638 = inttoptr i64 %1636 to i32*
  store i32 0, i32* %1638
  %1639 = add i64 %1125, -592
  %1640 = add i64 %1125, -40
  %1641 = add i64 %1125, -588
  %1642 = add i64 %1125, -564
  %1643 = add i64 %1125, -568
  %1644 = add i64 %1125, -604
  %1645 = add i64 %1125, -16
  %1646 = add i64 %1125, -600
  %1647 = add i64 %1125, -8
  br label %block_41c143

block_41b76d:                                     ; preds = %block_41b436
  %1648 = inttoptr i64 %1027 to i32*
  %1649 = load i32, i32* %1648
  %1650 = add i32 %1649, 1
  %1651 = inttoptr i64 %1027 to i32*
  store i32 %1650, i32* %1651
  %1652 = add i64 %388, -860
  br label %block_41b411

block_41c88d:                                     ; preds = %block_41c880
  %1653 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %1654 = inttoptr i64 %1744 to i32*
  %1655 = load i32, i32* %1654
  %1656 = sext i32 %1655 to i64
  %1657 = mul nsw i64 %1656, 600
  %1658 = add i64 %1657, ptrtoint (%idel_type* @idel to i64)
  %1659 = inttoptr i64 %1745 to i32*
  %1660 = load i32, i32* %1659
  %1661 = sext i32 %1660 to i64
  %1662 = mul nsw i64 %1661, 100
  %1663 = add i64 %1662, %1658
  %1664 = sext i32 %1272 to i64
  %1665 = mul nsw i64 %1664, 20
  store i64 %1665, i64* %6, align 8, !tbaa !1240
  %1666 = add i64 %1665, %1663
  %1667 = inttoptr i64 %1666 to i32*
  %1668 = load i32, i32* %1667
  %1669 = inttoptr i64 %1746 to i32*
  store i32 %1668, i32* %1669
  %1670 = inttoptr i64 %1744 to i32*
  %1671 = load i32, i32* %1670
  %1672 = sext i32 %1671 to i64
  %1673 = mul nsw i64 %1672, 2400
  %1674 = add i64 %1673, ptrtoint (%idmo_type* @idmo to i64)
  %1675 = inttoptr i64 %1745 to i32*
  %1676 = load i32, i32* %1675
  %1677 = sext i32 %1676 to i64
  %1678 = mul nsw i64 %1677, 400
  %1679 = add i64 %1678, %1674
  %1680 = inttoptr i64 %1741 to i32*
  %1681 = load i32, i32* %1680
  %1682 = sext i32 %1681 to i64
  %1683 = mul nsw i64 %1682, 20
  %1684 = add i64 %1683, %1679
  %1685 = inttoptr i64 %1684 to i32*
  %1686 = load i32, i32* %1685
  %1687 = zext i32 %1686 to i64
  store i64 %1687, i64* %7, align 8, !tbaa !1240
  %1688 = inttoptr i64 %1747 to i32*
  store i32 %1686, i32* %1688
  %1689 = inttoptr i64 %1748 to i64*
  %1690 = load i64, i64* %1689
  %1691 = inttoptr i64 %1747 to i32*
  %1692 = load i32, i32* %1691
  %1693 = sext i32 %1692 to i64
  %1694 = shl nsw i64 %1693, 3
  %1695 = add i64 %1694, %1690
  %1696 = inttoptr i64 %1695 to double*
  %1697 = load double, double* %1696
  %1698 = inttoptr i64 %1749 to i64*
  %1699 = load i64, i64* %1698
  %1700 = inttoptr i64 %1746 to i32*
  %1701 = load i32, i32* %1700
  %1702 = sext i32 %1701 to i64
  %1703 = shl nsw i64 %1702, 3
  %1704 = add i64 %1703, %1699
  %1705 = inttoptr i64 %1704 to double*
  %1706 = load double, double* %1705
  %1707 = fmul double %1653, %1706
  store double %1707, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1708 = fadd double %1697, %1707
  store double %1708, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  store i64 %1693, i64* %5, align 8, !tbaa !1240
  %1709 = inttoptr i64 %1695 to double*
  store double %1708, double* %1709
  %1710 = inttoptr i64 %1741 to i32*
  %1711 = load i32, i32* %1710
  %1712 = add i32 %1711, 1
  %1713 = inttoptr i64 %1741 to i32*
  store i32 %1712, i32* %1713
  %1714 = add i64 %1283, -13
  br label %block_41c880

block_41be8a:                                     ; preds = %block_41c001, %block_41be80
  %1715 = phi i64 [ %1730, %block_41be80 ], [ %2548, %block_41c001 ]
  %1716 = phi %struct.Memory* [ %1829, %block_41be80 ], [ %1516, %block_41c001 ]
  %1717 = inttoptr i64 %1729 to i32*
  %1718 = load i32, i32* %1717
  %1719 = add i32 %1718, -2
  %1720 = lshr i32 %1719, 31
  %1721 = lshr i32 %1718, 31
  %1722 = xor i32 %1720, %1721
  %1723 = add nuw nsw i32 %1722, %1721
  %1724 = icmp eq i32 %1723, 2
  %1725 = icmp ne i32 %1720, 0
  %1726 = xor i1 %1725, %1724
  %1727 = select i1 %1726, i64 13, i64 400
  %1728 = add i64 %1715, %1727
  br i1 %1726, label %block_41be97, label %block_41c100.loopexit604

block_41be80:                                     ; preds = %block_41be4a
  %1729 = add i64 %1859, -596
  %1730 = add i64 %1858, 10
  %1731 = inttoptr i64 %1729 to i32*
  store i32 0, i32* %1731
  %1732 = add i64 %1859, -592
  %1733 = add i64 %1859, -40
  %1734 = add i64 %1859, -588
  %1735 = add i64 %1859, -564
  %1736 = add i64 %1859, -568
  %1737 = add i64 %1859, -604
  %1738 = add i64 %1859, -16
  %1739 = add i64 %1859, -600
  %1740 = add i64 %1859, -8
  br label %block_41be8a

block_41c876:                                     ; preds = %block_41c698
  %1741 = add i64 %1555, -592
  %1742 = add i64 %1554, 10
  %1743 = inttoptr i64 %1741 to i32*
  store i32 1, i32* %1743
  %1744 = add i64 %1555, -564
  %1745 = add i64 %1555, -568
  %1746 = add i64 %1555, -604
  %1747 = add i64 %1555, -600
  %1748 = add i64 %1555, -8
  %1749 = add i64 %1555, -16
  br label %block_41c880

block_41c411:                                     ; preds = %block_41c3d8
  %1750 = add i64 %919, -596
  %1751 = add i64 %918, 10
  %1752 = inttoptr i64 %1750 to i32*
  store i32 0, i32* %1752
  %1753 = add i64 %919, -592
  %1754 = add i64 %919, -40
  %1755 = add i64 %919, -588
  %1756 = add i64 %919, -564
  %1757 = add i64 %919, -568
  %1758 = add i64 %919, -604
  %1759 = add i64 %919, -16
  %1760 = add i64 %919, -600
  %1761 = add i64 %919, -8
  br label %block_41c41b

block_41b786:                                     ; preds = %block_41b411
  %1762 = add i64 %1026, -576
  %1763 = add i64 %2539, 10
  %1764 = inttoptr i64 %1762 to i32*
  store i32 0, i32* %1764
  %1765 = add i64 %1026, -600
  %1766 = add i64 %1026, -8
  %1767 = add i64 %1026, -48
  br label %block_41b790

block_41c45e:                                     ; preds = %block_41c451
  %1768 = inttoptr i64 %1756 to i32*
  %1769 = load i32, i32* %1768
  %1770 = sext i32 %1769 to i64
  %1771 = mul nsw i64 %1770, 600
  %1772 = add i64 %1771, ptrtoint (%idel_type* @idel to i64)
  %1773 = inttoptr i64 %1757 to i32*
  %1774 = load i32, i32* %1773
  %1775 = sext i32 %1774 to i64
  %1776 = mul nsw i64 %1775, 100
  %1777 = add i64 %1776, %1772
  %1778 = sext i32 %1995 to i64
  %1779 = shl nsw i64 %1778, 2
  %1780 = add i64 %1777, 80
  %1781 = add i64 %1780, %1779
  %1782 = inttoptr i64 %1781 to i32*
  %1783 = load i32, i32* %1782
  %1784 = inttoptr i64 %1758 to i32*
  store i32 %1783, i32* %1784
  %1785 = inttoptr i64 %1754 to double*
  %1786 = load double, double* %1785
  %1787 = inttoptr i64 %1750 to i32*
  %1788 = load i32, i32* %1787
  %1789 = sext i32 %1788 to i64
  %1790 = mul nsw i64 %1789, 120
  %1791 = add i64 %1790, ptrtoint (%qbnew_type* @qbnew to i64)
  %1792 = inttoptr i64 %1753 to i32*
  %1793 = load i32, i32* %1792
  %1794 = sext i32 %1793 to i64
  %1795 = mul nsw i64 %1794, 24
  %1796 = add i64 %1795, %1791
  %1797 = inttoptr i64 %1755 to i32*
  %1798 = load i32, i32* %1797
  %1799 = add i32 %1798, -1
  %1800 = zext i32 %1799 to i64
  store i64 %1800, i64* %7, align 8, !tbaa !1240
  %1801 = sext i32 %1799 to i64
  %1802 = shl nsw i64 %1801, 3
  %1803 = add i64 %1796, %1802
  %1804 = inttoptr i64 %1803 to double*
  %1805 = load double, double* %1804
  %1806 = inttoptr i64 %1759 to i64*
  %1807 = load i64, i64* %1806
  %1808 = inttoptr i64 %1758 to i32*
  %1809 = load i32, i32* %1808
  %1810 = sext i32 %1809 to i64
  %1811 = shl nsw i64 %1810, 3
  %1812 = add i64 %1811, %1807
  %1813 = inttoptr i64 %1812 to double*
  %1814 = load double, double* %1813
  %1815 = fmul double %1805, %1814
  store double %1815, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %1816 = fadd double %1786, %1815
  store double %1816, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1817 = inttoptr i64 %1754 to double*
  store double %1816, double* %1817
  %1818 = inttoptr i64 %1755 to i32*
  %1819 = load i32, i32* %1818
  %1820 = add i32 %1819, 1
  %1821 = inttoptr i64 %1755 to i32*
  store i32 %1820, i32* %1821
  %1822 = add i64 %2005, -13
  br label %block_41c451

block_41c858:                                     ; preds = %block_41c6ef
  %1823 = inttoptr i64 %1389 to i32*
  %1824 = load i32, i32* %1823
  %1825 = add i32 %1824, 1
  %1826 = inttoptr i64 %1389 to i32*
  store i32 %1825, i32* %1826
  %1827 = add i64 %1227, -384
  br label %block_41c6d8

block_41bd38:                                     ; preds = %block_41be31, %block_41bd2e
  %1828 = phi i64 [ %721, %block_41bd2e ], [ %2274, %block_41be31 ]
  %1829 = phi %struct.Memory* [ %390, %block_41bd2e ], [ %678, %block_41be31 ]
  %1830 = inttoptr i64 %720 to i32*
  %1831 = load i32, i32* %1830
  %1832 = add i32 %1831, -4
  %1833 = lshr i32 %1832, 31
  %1834 = lshr i32 %1831, 31
  %1835 = xor i32 %1833, %1834
  %1836 = add nuw nsw i32 %1835, %1834
  %1837 = icmp eq i32 %1836, 2
  %1838 = icmp ne i32 %1833, 0
  %1839 = xor i1 %1838, %1837
  %1840 = select i1 %1839, i64 13, i64 274
  %1841 = add i64 %1828, %1840
  br i1 %1839, label %block_41bd45, label %block_41be4a

block_41be4a:                                     ; preds = %block_41bd38
  %1842 = inttoptr i64 %724 to i32*
  %1843 = load i32, i32* %1842
  %1844 = sext i32 %1843 to i64
  %1845 = mul nsw i64 %1844, 2400
  %1846 = add i64 %1845, ptrtoint (%idmo_type* @idmo to i64)
  %1847 = inttoptr i64 %725 to i32*
  %1848 = load i32, i32* %1847
  %1849 = sext i32 %1848 to i64
  %1850 = mul nsw i64 %1849, 400
  %1851 = add i64 %1850, %1846
  %1852 = add i64 %1851, 16
  %1853 = inttoptr i64 %1852 to i32*
  %1854 = load i32, i32* %1853
  %1855 = add i32 %1854, 1
  %1856 = icmp eq i32 %1855, 0
  %1857 = select i1 %1856, i64 469, i64 54
  %1858 = add i64 %1841, %1857
  %1859 = load i64, i64* %10, align 8
  br i1 %1856, label %block_41c01f, label %block_41be80

block_41bb32:                                     ; preds = %block_41bb25
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %1860 = load double, double* %58, align 1
  %1861 = inttoptr i64 %1040 to double*
  store double %1860, double* %1861
  %1862 = inttoptr i64 %1767 to double*
  store double %1860, double* %1862
  %1863 = add i64 %1313, 23
  %1864 = inttoptr i64 %1041 to i32*
  store i32 1, i32* %1864
  br label %block_41bb49

block_41bc44:                                     ; preds = %block_41bb49
  %1865 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %1866 = inttoptr i64 %1035 to i32*
  %1867 = load i32, i32* %1866
  %1868 = sext i32 %1867 to i64
  %1869 = mul nsw i64 %1868, 2400
  %1870 = add i64 %1869, ptrtoint (%idmo_type* @idmo to i64)
  %1871 = inttoptr i64 %1036 to i32*
  %1872 = load i32, i32* %1871
  %1873 = sext i32 %1872 to i64
  %1874 = mul nsw i64 %1873, 400
  %1875 = add i64 %1874, %1870
  %1876 = inttoptr i64 %1027 to i32*
  %1877 = load i32, i32* %1876
  %1878 = sext i32 %1877 to i64
  %1879 = mul nsw i64 %1878, 200
  %1880 = add i64 %1879, %1875
  %1881 = inttoptr i64 %1762 to i32*
  %1882 = load i32, i32* %1881
  %1883 = sext i32 %1882 to i64
  %1884 = mul nsw i64 %1883, 100
  %1885 = add i64 %1884, %1880
  %1886 = inttoptr i64 %1033 to i32*
  %1887 = load i32, i32* %1886
  %1888 = sext i32 %1887 to i64
  %1889 = mul nsw i64 %1888, 20
  %1890 = add i64 %1889, %1885
  %1891 = inttoptr i64 %1039 to i32*
  %1892 = load i32, i32* %1891
  %1893 = sext i32 %1892 to i64
  %1894 = shl nsw i64 %1893, 2
  %1895 = add i64 %1894, %1890
  %1896 = inttoptr i64 %1895 to i32*
  %1897 = load i32, i32* %1896
  %1898 = zext i32 %1897 to i64
  store i64 %1898, i64* %6, align 8, !tbaa !1240
  %1899 = inttoptr i64 %1765 to i32*
  store i32 %1897, i32* %1899
  %1900 = inttoptr i64 %1766 to i64*
  %1901 = load i64, i64* %1900
  %1902 = inttoptr i64 %1765 to i32*
  %1903 = load i32, i32* %1902
  %1904 = sext i32 %1903 to i64
  %1905 = shl nsw i64 %1904, 3
  %1906 = add i64 %1905, %1901
  %1907 = inttoptr i64 %1906 to double*
  %1908 = load double, double* %1907
  %1909 = inttoptr i64 %1040 to double*
  %1910 = load double, double* %1909
  %1911 = fmul double %1865, %1910
  store double %1911, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1912 = fadd double %1908, %1911
  %1913 = inttoptr i64 %1767 to double*
  %1914 = load double, double* %1913
  %1915 = fadd double %1912, %1914
  store double %1915, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  store i64 %1904, i64* %5, align 8, !tbaa !1240
  %1916 = inttoptr i64 %1906 to double*
  store double %1915, double* %1916
  %1917 = inttoptr i64 %1039 to i32*
  %1918 = load i32, i32* %1917
  %1919 = add i32 %1918, 1
  %1920 = inttoptr i64 %1039 to i32*
  store i32 %1919, i32* %1920
  %1921 = add i64 %2520, -287
  br label %block_41bb25

block_41bd5c:                                     ; preds = %block_41bd4f
  %1922 = inttoptr i64 %724 to i32*
  %1923 = load i32, i32* %1922
  %1924 = sext i32 %1923 to i64
  %1925 = mul nsw i64 %1924, 600
  %1926 = add i64 %1925, ptrtoint (%idel_type* @idel to i64)
  %1927 = inttoptr i64 %725 to i32*
  %1928 = load i32, i32* %1927
  %1929 = sext i32 %1928 to i64
  %1930 = mul nsw i64 %1929, 100
  %1931 = add i64 %1930, %1926
  %1932 = inttoptr i64 %720 to i32*
  %1933 = load i32, i32* %1932
  %1934 = sext i32 %1933 to i64
  %1935 = mul nsw i64 %1934, 20
  %1936 = add i64 %1935, %1931
  %1937 = sext i32 %680 to i64
  store i64 %1937, i64* %6, align 8, !tbaa !1240
  %1938 = shl nsw i64 %1937, 2
  %1939 = add i64 %1938, %1936
  %1940 = inttoptr i64 %1939 to i32*
  %1941 = load i32, i32* %1940
  %1942 = inttoptr i64 %726 to i32*
  store i32 %1941, i32* %1942
  %1943 = inttoptr i64 %724 to i32*
  %1944 = load i32, i32* %1943
  %1945 = sext i32 %1944 to i64
  %1946 = mul nsw i64 %1945, 2400
  %1947 = add i64 %1946, ptrtoint (%idmo_type* @idmo to i64)
  %1948 = inttoptr i64 %725 to i32*
  %1949 = load i32, i32* %1948
  %1950 = sext i32 %1949 to i64
  %1951 = mul nsw i64 %1950, 400
  %1952 = add i64 %1951, %1947
  %1953 = inttoptr i64 %720 to i32*
  %1954 = load i32, i32* %1953
  %1955 = sext i32 %1954 to i64
  %1956 = mul nsw i64 %1955, 20
  %1957 = add i64 %1956, %1952
  %1958 = inttoptr i64 %723 to i32*
  %1959 = load i32, i32* %1958
  %1960 = sext i32 %1959 to i64
  %1961 = shl nsw i64 %1960, 2
  %1962 = add i64 %1961, %1957
  %1963 = inttoptr i64 %1962 to i32*
  %1964 = load i32, i32* %1963
  %1965 = zext i32 %1964 to i64
  store i64 %1965, i64* %7, align 8, !tbaa !1240
  %1966 = inttoptr i64 %727 to i32*
  store i32 %1964, i32* %1966
  %1967 = inttoptr i64 %660 to i64*
  %1968 = load i64, i64* %1967
  %1969 = inttoptr i64 %727 to i32*
  %1970 = load i32, i32* %1969
  %1971 = sext i32 %1970 to i64
  %1972 = shl nsw i64 %1971, 3
  %1973 = add i64 %1972, %1968
  %1974 = inttoptr i64 %1973 to double*
  %1975 = load double, double* %1974
  %1976 = inttoptr i64 %728 to i64*
  %1977 = load i64, i64* %1976
  %1978 = inttoptr i64 %726 to i32*
  %1979 = load i32, i32* %1978
  %1980 = sext i32 %1979 to i64
  %1981 = shl nsw i64 %1980, 3
  %1982 = add i64 %1981, %1977
  %1983 = inttoptr i64 %1982 to double*
  %1984 = load double, double* %1983
  %1985 = fadd double %1975, %1984
  store double %1985, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %1986 = inttoptr i64 %1973 to double*
  store double %1985, double* %1986
  %1987 = inttoptr i64 %723 to i32*
  %1988 = load i32, i32* %1987
  %1989 = add i32 %1988, 1
  %1990 = inttoptr i64 %723 to i32*
  store i32 %1989, i32* %1990
  %1991 = add i64 %690, -13
  br label %block_41bd4f

block_41c451:                                     ; preds = %block_41c43f, %block_41c45e
  %1992 = phi i64 [ %2149, %block_41c43f ], [ %1822, %block_41c45e ]
  %1993 = phi %struct.Memory* [ %2253, %block_41c43f ], [ %1993, %block_41c45e ]
  %1994 = inttoptr i64 %1755 to i32*
  %1995 = load i32, i32* %1994
  %1996 = add i32 %1995, -4
  %1997 = lshr i32 %1996, 31
  %1998 = lshr i32 %1995, 31
  %1999 = xor i32 %1997, %1998
  %2000 = add nuw nsw i32 %1999, %1998
  %2001 = icmp eq i32 %2000, 2
  %2002 = icmp ne i32 %1997, 0
  %2003 = xor i1 %2002, %2001
  %2004 = select i1 %2003, i64 13, i64 176
  %2005 = add i64 %1992, %2004
  br i1 %2003, label %block_41c45e, label %block_41c501

block_41b443:                                     ; preds = %block_41b436
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %2006 = inttoptr i64 %1035 to i32*
  %2007 = load i32, i32* %2006
  %2008 = sext i32 %2007 to i64
  %2009 = mul nsw i64 %2008, 600
  %2010 = add i64 %2009, ptrtoint (%idel_type* @idel to i64)
  %2011 = inttoptr i64 %1036 to i32*
  %2012 = load i32, i32* %2011
  %2013 = sext i32 %2012 to i64
  %2014 = mul nsw i64 %2013, 100
  %2015 = add i64 %2014, %2010
  %2016 = inttoptr i64 %1027 to i32*
  %2017 = load i32, i32* %2016
  %2018 = sext i32 %2017 to i64
  %2019 = shl nsw i64 %2018, 2
  %2020 = add i64 %2019, ptrtoint (%v_end_type* @v_end to i64)
  %2021 = inttoptr i64 %2020 to i32*
  %2022 = load i32, i32* %2021
  %2023 = sext i32 %2022 to i64
  %2024 = mul nsw i64 %2023, 20
  %2025 = add i64 %2024, %2015
  %2026 = sext i32 %378 to i64
  %2027 = shl nsw i64 %2026, 2
  %2028 = add i64 %2027, %2025
  %2029 = inttoptr i64 %2028 to i32*
  %2030 = load i32, i32* %2029
  %2031 = inttoptr i64 %1037 to i32*
  store i32 %2030, i32* %2031
  %2032 = inttoptr i64 %1038 to i64*
  %2033 = load i64, i64* %2032
  %2034 = inttoptr i64 %1037 to i32*
  %2035 = load i32, i32* %2034
  %2036 = sext i32 %2035 to i64
  %2037 = shl nsw i64 %2036, 3
  %2038 = add i64 %2037, %2033
  %2039 = inttoptr i64 %2038 to double*
  %2040 = load double, double* %2039
  store double %2040, double* %33, align 1, !tbaa !1246
  store double 0.000000e+00, double* %35, align 1, !tbaa !1246
  %2041 = inttoptr i64 %1027 to i32*
  %2042 = load i32, i32* %2041
  %2043 = sext i32 %2042 to i64
  %2044 = mul nsw i64 %2043, 200
  %2045 = add i64 %2044, %1034
  %2046 = shl nsw i64 %2043, 2
  %2047 = add i64 %2046, ptrtoint (%v_end_type* @v_end to i64)
  %2048 = inttoptr i64 %2047 to i32*
  %2049 = load i32, i32* %2048
  %2050 = sext i32 %2049 to i64
  %2051 = mul nsw i64 %2050, 40
  %2052 = add i64 %2051, %2045
  %2053 = inttoptr i64 %1033 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  %2056 = shl nsw i64 %2055, 3
  %2057 = add i64 %2056, %2052
  %2058 = inttoptr i64 %2057 to double*
  store double %2040, double* %2058
  %2059 = inttoptr i64 %1027 to i32*
  %2060 = load i32, i32* %2059
  %2061 = sext i32 %2060 to i64
  %2062 = shl nsw i64 %2061, 2
  %2063 = add i64 %2062, ptrtoint (%v_end_type* @v_end to i64)
  %2064 = inttoptr i64 %2063 to i32*
  %2065 = load i32, i32* %2064
  %2066 = zext i32 %2065 to i64
  store i64 %2066, i64* %7, align 8, !tbaa !1240
  %2067 = inttoptr i64 %1039 to i32*
  store i32 %2065, i32* %2067
  %2068 = load double, double* %58, align 1
  %2069 = inttoptr i64 %1040 to double*
  store double %2068, double* %2069
  %2070 = add i64 %388, 191
  %2071 = inttoptr i64 %1041 to i32*
  store i32 1, i32* %2071
  br label %block_41b502

block_41ba41:                                     ; preds = %block_41b7d8
  %2072 = inttoptr i64 %1762 to i32*
  %2073 = load i32, i32* %2072
  %2074 = sext i32 %2073 to i64
  %2075 = shl nsw i64 %2074, 2
  %2076 = add i64 %2075, ptrtoint (%v_end_type* @v_end to i64)
  %2077 = inttoptr i64 %2076 to i32*
  %2078 = load i32, i32* %2077
  %2079 = inttoptr i64 %1033 to i32*
  store i32 %2078, i32* %2079
  %2080 = inttoptr i64 %1035 to i32*
  %2081 = load i32, i32* %2080
  %2082 = sext i32 %2081 to i64
  %2083 = mul nsw i64 %2082, 2400
  %2084 = add i64 %2083, ptrtoint (%idmo_type* @idmo to i64)
  %2085 = inttoptr i64 %1036 to i32*
  %2086 = load i32, i32* %2085
  %2087 = sext i32 %2086 to i64
  %2088 = mul nsw i64 %2087, 400
  %2089 = add i64 %2088, %2084
  %2090 = inttoptr i64 %1027 to i32*
  %2091 = load i32, i32* %2090
  %2092 = sext i32 %2091 to i64
  %2093 = mul nsw i64 %2092, 200
  %2094 = add i64 %2093, %2089
  %2095 = inttoptr i64 %1762 to i32*
  %2096 = load i32, i32* %2095
  %2097 = sext i32 %2096 to i64
  %2098 = mul nsw i64 %2097, 100
  %2099 = add i64 %2098, %2094
  %2100 = inttoptr i64 %1033 to i32*
  %2101 = load i32, i32* %2100
  %2102 = sext i32 %2101 to i64
  %2103 = mul nsw i64 %2102, 20
  %2104 = add i64 %2103, %2099
  %2105 = shl nsw i64 %2092, 2
  %2106 = add i64 %2105, ptrtoint (%v_end_type* @v_end to i64)
  %2107 = inttoptr i64 %2106 to i32*
  %2108 = load i32, i32* %2107
  %2109 = sext i32 %2108 to i64
  %2110 = shl nsw i64 %2109, 2
  %2111 = add i64 %2110, %2104
  %2112 = inttoptr i64 %2111 to i32*
  %2113 = load i32, i32* %2112
  %2114 = zext i32 %2113 to i64
  store i64 %2114, i64* %7, align 8, !tbaa !1240
  %2115 = inttoptr i64 %1765 to i32*
  store i32 %2113, i32* %2115
  %2116 = inttoptr i64 %1766 to i64*
  %2117 = load i64, i64* %2116
  %2118 = inttoptr i64 %1765 to i32*
  %2119 = load i32, i32* %2118
  %2120 = sext i32 %2119 to i64
  store i64 %2120, i64* %6, align 8, !tbaa !1240
  %2121 = shl nsw i64 %2120, 3
  %2122 = add i64 %2121, %2117
  %2123 = inttoptr i64 %2122 to double*
  %2124 = load double, double* %2123
  %2125 = inttoptr i64 %1762 to i32*
  %2126 = load i32, i32* %2125
  %2127 = sext i32 %2126 to i64
  %2128 = mul nsw i64 %2127, 40
  %2129 = add i64 %2128, %1042
  %2130 = inttoptr i64 %1027 to i32*
  %2131 = load i32, i32* %2130
  %2132 = sext i32 %2131 to i64
  %2133 = shl nsw i64 %2132, 2
  %2134 = add i64 %2133, ptrtoint (%v_end_type* @v_end to i64)
  %2135 = inttoptr i64 %2134 to i32*
  %2136 = load i32, i32* %2135
  %2137 = sext i32 %2136 to i64
  %2138 = shl nsw i64 %2137, 3
  %2139 = add i64 %2138, %2129
  %2140 = inttoptr i64 %2139 to double*
  %2141 = load double, double* %2140
  %2142 = fmul double %1423, %2141
  store double %2142, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %2143 = fadd double %2124, %2142
  store double %2143, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  store i64 %2120, i64* %5, align 8, !tbaa !1240
  %2144 = inttoptr i64 %2122 to double*
  store double %2143, double* %2144
  %2145 = add i64 %1422, 228
  %2146 = inttoptr i64 %1039 to i32*
  store i32 0, i32* %2146
  br label %block_41bb25

block_41c43f:                                     ; preds = %block_41c432
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %2147 = load double, double* %58, align 1
  %2148 = inttoptr i64 %1754 to double*
  store double %2147, double* %2148
  %2149 = add i64 %2265, 18
  %2150 = inttoptr i64 %1755 to i32*
  store i32 1, i32* %2150
  br label %block_41c451

block_41b13a:                                     ; preds = %block_41b130, %block_41c968
  %2151 = phi i64 [ %1530, %block_41b130 ], [ %348, %block_41c968 ]
  %2152 = phi i64 [ %921, %block_41b130 ], [ %338, %block_41c968 ]
  %2153 = phi %struct.Memory* [ %922, %block_41b130 ], [ %341, %block_41c968 ]
  %2154 = add i64 %2152, -568
  %2155 = inttoptr i64 %2154 to i32*
  %2156 = load i32, i32* %2155
  %2157 = add i32 %2156, -6
  %2158 = lshr i32 %2157, 31
  %2159 = trunc i32 %2158 to i8
  %2160 = lshr i32 %2156, 31
  %2161 = xor i32 %2158, %2160
  %2162 = add nuw nsw i32 %2161, %2160
  %2163 = icmp eq i32 %2162, 2
  %2164 = icmp ne i8 %2159, 0
  %2165 = xor i1 %2164, %2163
  %2166 = select i1 %2165, i64 13, i64 6215
  %2167 = add i64 %2151, %2166
  %2168 = add i64 %2152, -564
  %2169 = inttoptr i64 %2168 to i32*
  %2170 = load i32, i32* %2169
  br i1 %2165, label %block_41b147, label %block_41c981

block_41c036:                                     ; preds = %block_41c029
  %2171 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %2172 = inttoptr i64 %2469 to i32*
  %2173 = load i32, i32* %2172
  %2174 = sext i32 %2173 to i64
  %2175 = mul nsw i64 %2174, 600
  %2176 = add i64 %2175, ptrtoint (%idel_type* @idel to i64)
  %2177 = inttoptr i64 %2470 to i32*
  %2178 = load i32, i32* %2177
  %2179 = sext i32 %2178 to i64
  %2180 = mul nsw i64 %2179, 100
  %2181 = add i64 %2180, %2176
  %2182 = sext i32 %2337 to i64
  store i64 %2182, i64* %6, align 8, !tbaa !1240
  %2183 = shl nsw i64 %2182, 2
  %2184 = add i64 %2183, %2181
  %2185 = inttoptr i64 %2184 to i32*
  %2186 = load i32, i32* %2185
  %2187 = inttoptr i64 %2471 to i32*
  store i32 %2186, i32* %2187
  %2188 = inttoptr i64 %2469 to i32*
  %2189 = load i32, i32* %2188
  %2190 = sext i32 %2189 to i64
  %2191 = mul nsw i64 %2190, 2400
  %2192 = add i64 %2191, ptrtoint (%idmo_type* @idmo to i64)
  %2193 = inttoptr i64 %2470 to i32*
  %2194 = load i32, i32* %2193
  %2195 = sext i32 %2194 to i64
  %2196 = mul nsw i64 %2195, 400
  %2197 = add i64 %2196, %2192
  %2198 = inttoptr i64 %2466 to i32*
  %2199 = load i32, i32* %2198
  %2200 = sext i32 %2199 to i64
  %2201 = shl nsw i64 %2200, 2
  %2202 = add i64 %2201, %2197
  %2203 = inttoptr i64 %2202 to i32*
  %2204 = load i32, i32* %2203
  %2205 = zext i32 %2204 to i64
  store i64 %2205, i64* %7, align 8, !tbaa !1240
  %2206 = inttoptr i64 %2472 to i32*
  store i32 %2204, i32* %2206
  %2207 = inttoptr i64 %2473 to i64*
  %2208 = load i64, i64* %2207
  %2209 = inttoptr i64 %2472 to i32*
  %2210 = load i32, i32* %2209
  %2211 = sext i32 %2210 to i64
  %2212 = shl nsw i64 %2211, 3
  %2213 = add i64 %2212, %2208
  %2214 = inttoptr i64 %2213 to double*
  %2215 = load double, double* %2214
  %2216 = inttoptr i64 %2474 to i64*
  %2217 = load i64, i64* %2216
  %2218 = inttoptr i64 %2471 to i32*
  %2219 = load i32, i32* %2218
  %2220 = sext i32 %2219 to i64
  %2221 = shl nsw i64 %2220, 3
  %2222 = add i64 %2221, %2217
  %2223 = inttoptr i64 %2222 to double*
  %2224 = load double, double* %2223
  %2225 = fmul double %2171, %2224
  store double %2225, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %2226 = fadd double %2215, %2225
  store double %2226, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %2227 = inttoptr i64 %2213 to double*
  store double %2226, double* %2227
  %2228 = inttoptr i64 %2466 to i32*
  %2229 = load i32, i32* %2228
  %2230 = add i32 %2229, 1
  %2231 = inttoptr i64 %2466 to i32*
  store i32 %2230, i32* %2231
  %2232 = add i64 %2347, -13
  br label %block_41c029

block_41b5bf:                                     ; preds = %block_41b502
  %2233 = inttoptr i64 %1040 to double*
  %2234 = load double, double* %2233
  store double %2234, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %59, align 1, !tbaa !1246
  %2235 = inttoptr i64 %1027 to i32*
  %2236 = load i32, i32* %2235
  %2237 = sext i32 %2236 to i64
  %2238 = mul nsw i64 %2237, 40
  %2239 = add i64 %2238, %1042
  %2240 = inttoptr i64 %1033 to i32*
  %2241 = load i32, i32* %2240
  %2242 = sext i32 %2241 to i64
  store i64 %2242, i64* %6, align 8, !tbaa !1240
  %2243 = shl nsw i64 %2242, 3
  %2244 = add i64 %2243, %2239
  %2245 = inttoptr i64 %2244 to double*
  store double %2234, double* %2245
  %2246 = inttoptr i64 %1032 to i32*
  %2247 = load i32, i32* %2246
  %2248 = sub i32 2, %2247
  %2249 = add i32 %2248, -1
  %2250 = add i64 %1056, 55
  %2251 = inttoptr i64 %1039 to i32*
  store i32 %2249, i32* %2251
  br label %block_41b5f6

block_41c432:                                     ; preds = %block_41c428, %block_41c501
  %2252 = phi i64 [ %1212, %block_41c428 ], [ %1101, %block_41c501 ]
  %2253 = phi %struct.Memory* [ %2494, %block_41c428 ], [ %1993, %block_41c501 ]
  %2254 = inttoptr i64 %1753 to i32*
  %2255 = load i32, i32* %2254
  %2256 = add i32 %2255, -5
  %2257 = lshr i32 %2256, 31
  %2258 = lshr i32 %2255, 31
  %2259 = xor i32 %2257, %2258
  %2260 = add nuw nsw i32 %2259, %2258
  %2261 = icmp eq i32 %2260, 2
  %2262 = icmp ne i32 %2257, 0
  %2263 = xor i1 %2262, %2261
  %2264 = select i1 %2263, i64 13, i64 357
  %2265 = add i64 %2252, %2264
  br i1 %2263, label %block_41c43f, label %block_41c597

block_41c167:                                     ; preds = %block_41c15a
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %2266 = load double, double* %58, align 1
  %2267 = inttoptr i64 %1640 to double*
  store double %2266, double* %2267
  %2268 = add i64 %366, 18
  %2269 = inttoptr i64 %1641 to i32*
  store i32 1, i32* %2269
  br label %block_41c179

block_41be31:                                     ; preds = %block_41bd4f
  %2270 = inttoptr i64 %720 to i32*
  %2271 = load i32, i32* %2270
  %2272 = add i32 %2271, 1
  %2273 = inttoptr i64 %720 to i32*
  store i32 %2272, i32* %2273
  %2274 = add i64 %690, -249
  br label %block_41bd38

block_41b62b:                                     ; preds = %block_41b61e
  %2275 = inttoptr i64 %1035 to i32*
  %2276 = load i32, i32* %2275
  %2277 = sext i32 %2276 to i64
  %2278 = mul nsw i64 %2277, 600
  %2279 = add i64 %2278, ptrtoint (%idel_type* @idel to i64)
  %2280 = inttoptr i64 %1036 to i32*
  %2281 = load i32, i32* %2280
  %2282 = sext i32 %2281 to i64
  %2283 = mul nsw i64 %2282, 100
  %2284 = add i64 %2283, %2279
  %2285 = sext i32 %2482 to i64
  %2286 = mul nsw i64 %2285, 20
  %2287 = add i64 %2286, %2284
  %2288 = inttoptr i64 %1033 to i32*
  %2289 = load i32, i32* %2288
  %2290 = sext i32 %2289 to i64
  %2291 = shl nsw i64 %2290, 2
  %2292 = add i64 %2291, %2287
  %2293 = inttoptr i64 %2292 to i32*
  %2294 = load i32, i32* %2293
  %2295 = inttoptr i64 %1037 to i32*
  store i32 %2294, i32* %2295
  %2296 = inttoptr i64 %1040 to double*
  %2297 = load double, double* %2296
  %2298 = inttoptr i64 %1027 to i32*
  %2299 = load i32, i32* %2298
  %2300 = sext i32 %2299 to i64
  %2301 = mul nsw i64 %2300, 120
  %2302 = add i64 %2301, ptrtoint (%qbnew_type* @qbnew to i64)
  %2303 = inttoptr i64 %1039 to i32*
  %2304 = load i32, i32* %2303
  %2305 = sext i32 %2304 to i64
  %2306 = mul nsw i64 %2305, 24
  %2307 = add i64 %2306, %2302
  %2308 = inttoptr i64 %1041 to i32*
  %2309 = load i32, i32* %2308
  %2310 = add i32 %2309, -1
  %2311 = zext i32 %2310 to i64
  store i64 %2311, i64* %7, align 8, !tbaa !1240
  %2312 = sext i32 %2310 to i64
  %2313 = shl nsw i64 %2312, 3
  %2314 = add i64 %2307, %2313
  %2315 = inttoptr i64 %2314 to double*
  %2316 = load double, double* %2315
  %2317 = inttoptr i64 %1038 to i64*
  %2318 = load i64, i64* %2317
  %2319 = inttoptr i64 %1037 to i32*
  %2320 = load i32, i32* %2319
  %2321 = sext i32 %2320 to i64
  %2322 = shl nsw i64 %2321, 3
  %2323 = add i64 %2322, %2318
  %2324 = inttoptr i64 %2323 to double*
  %2325 = load double, double* %2324
  %2326 = fmul double %2316, %2325
  store double %2326, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %2327 = fadd double %2297, %2326
  store double %2327, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %2328 = inttoptr i64 %1040 to double*
  store double %2327, double* %2328
  %2329 = inttoptr i64 %1041 to i32*
  %2330 = load i32, i32* %2329
  %2331 = add i32 %2330, 1
  %2332 = inttoptr i64 %1041 to i32*
  store i32 %2331, i32* %2332
  %2333 = add i64 %2492, -13
  br label %block_41b61e

block_41c029:                                     ; preds = %block_41c01f, %block_41c036
  %2334 = phi i64 [ %2467, %block_41c01f ], [ %2232, %block_41c036 ]
  %2335 = phi %struct.Memory* [ %1829, %block_41c01f ], [ %2335, %block_41c036 ]
  %2336 = inttoptr i64 %2466 to i32*
  %2337 = load i32, i32* %2336
  %2338 = add i32 %2337, -4
  %2339 = lshr i32 %2338, 31
  %2340 = lshr i32 %2337, 31
  %2341 = xor i32 %2339, %2340
  %2342 = add nuw nsw i32 %2341, %2340
  %2343 = icmp eq i32 %2342, 2
  %2344 = icmp ne i32 %2339, 0
  %2345 = xor i1 %2344, %2343
  %2346 = select i1 %2345, i64 13, i64 210
  %2347 = add i64 %2334, %2346
  br i1 %2345, label %block_41c036, label %block_41c100.loopexit

block_41c22f:                                     ; preds = %block_41c179
  %2348 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %2349 = inttoptr i64 %1642 to i32*
  %2350 = load i32, i32* %2349
  %2351 = sext i32 %2350 to i64
  %2352 = mul nsw i64 %2351, 2400
  %2353 = add i64 %2352, ptrtoint (%idmo_type* @idmo to i64)
  %2354 = inttoptr i64 %1643 to i32*
  %2355 = load i32, i32* %2354
  %2356 = sext i32 %2355 to i64
  %2357 = mul nsw i64 %2356, 400
  %2358 = add i64 %2357, %2353
  %2359 = add i64 %2358, 200
  %2360 = inttoptr i64 %1636 to i32*
  %2361 = load i32, i32* %2360
  %2362 = sext i32 %2361 to i64
  %2363 = mul nsw i64 %2362, 100
  %2364 = add i64 %2363, %2359
  %2365 = inttoptr i64 %1639 to i32*
  %2366 = load i32, i32* %2365
  %2367 = sext i32 %2366 to i64
  %2368 = mul nsw i64 %2367, 20
  %2369 = add i64 %2368, %2364
  %2370 = add i64 %2369, 16
  %2371 = inttoptr i64 %2370 to i32*
  %2372 = load i32, i32* %2371
  %2373 = zext i32 %2372 to i64
  store i64 %2373, i64* %6, align 8, !tbaa !1240
  %2374 = inttoptr i64 %1646 to i32*
  store i32 %2372, i32* %2374
  %2375 = inttoptr i64 %1647 to i64*
  %2376 = load i64, i64* %2375
  %2377 = inttoptr i64 %1646 to i32*
  %2378 = load i32, i32* %2377
  %2379 = sext i32 %2378 to i64
  %2380 = shl nsw i64 %2379, 3
  %2381 = add i64 %2380, %2376
  %2382 = inttoptr i64 %2381 to double*
  %2383 = load double, double* %2382
  %2384 = inttoptr i64 %1640 to double*
  %2385 = load double, double* %2384
  %2386 = fmul double %2348, %2385
  store double %2386, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %2387 = fadd double %2383, %2386
  store double %2387, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %2388 = inttoptr i64 %2381 to double*
  store double %2387, double* %2388
  %2389 = inttoptr i64 %1639 to i32*
  %2390 = load i32, i32* %2389
  %2391 = add i32 %2390, 1
  %2392 = inttoptr i64 %1639 to i32*
  store i32 %2391, i32* %2392
  %2393 = add i64 %263, -213
  br label %block_41c15a

block_41ba28:                                     ; preds = %block_41b8cf
  %2394 = inttoptr i64 %1033 to i32*
  %2395 = load i32, i32* %2394
  %2396 = add i32 %2395, 1
  %2397 = inttoptr i64 %1033 to i32*
  store i32 %2396, i32* %2397
  %2398 = add i64 %1388, -592
  br label %block_41b7d8

block_41c5cc:                                     ; preds = %block_41c5bf
  %2399 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %2400 = inttoptr i64 %1486 to i32*
  %2401 = load i32, i32* %2400
  %2402 = sext i32 %2401 to i64
  %2403 = mul nsw i64 %2402, 600
  %2404 = add i64 %2403, ptrtoint (%idel_type* @idel to i64)
  %2405 = inttoptr i64 %1487 to i32*
  %2406 = load i32, i32* %2405
  %2407 = sext i32 %2406 to i64
  %2408 = mul nsw i64 %2407, 100
  %2409 = add i64 %2408, %2404
  %2410 = sext i32 %1289 to i64
  store i64 %2410, i64* %6, align 8, !tbaa !1240
  %2411 = shl nsw i64 %2410, 2
  %2412 = add i64 %2409, 80
  %2413 = add i64 %2412, %2411
  %2414 = inttoptr i64 %2413 to i32*
  %2415 = load i32, i32* %2414
  %2416 = inttoptr i64 %1488 to i32*
  store i32 %2415, i32* %2416
  %2417 = inttoptr i64 %1486 to i32*
  %2418 = load i32, i32* %2417
  %2419 = sext i32 %2418 to i64
  %2420 = mul nsw i64 %2419, 2400
  %2421 = add i64 %2420, ptrtoint (%idmo_type* @idmo to i64)
  %2422 = inttoptr i64 %1487 to i32*
  %2423 = load i32, i32* %2422
  %2424 = sext i32 %2423 to i64
  %2425 = mul nsw i64 %2424, 400
  %2426 = add i64 %2425, %2421
  %2427 = inttoptr i64 %1483 to i32*
  %2428 = load i32, i32* %2427
  %2429 = sext i32 %2428 to i64
  %2430 = shl nsw i64 %2429, 2
  %2431 = add i64 %2426, 80
  %2432 = add i64 %2431, %2430
  %2433 = inttoptr i64 %2432 to i32*
  %2434 = load i32, i32* %2433
  %2435 = zext i32 %2434 to i64
  store i64 %2435, i64* %7, align 8, !tbaa !1240
  %2436 = inttoptr i64 %1489 to i32*
  store i32 %2434, i32* %2436
  %2437 = inttoptr i64 %1490 to i64*
  %2438 = load i64, i64* %2437
  %2439 = inttoptr i64 %1489 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  %2442 = shl nsw i64 %2441, 3
  %2443 = add i64 %2442, %2438
  %2444 = inttoptr i64 %2443 to double*
  %2445 = load double, double* %2444
  %2446 = inttoptr i64 %1491 to i64*
  %2447 = load i64, i64* %2446
  %2448 = inttoptr i64 %1488 to i32*
  %2449 = load i32, i32* %2448
  %2450 = sext i32 %2449 to i64
  %2451 = shl nsw i64 %2450, 3
  %2452 = add i64 %2451, %2447
  %2453 = inttoptr i64 %2452 to double*
  %2454 = load double, double* %2453
  %2455 = fmul double %2399, %2454
  store double %2455, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %2456 = fadd double %2445, %2455
  store double %2456, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %2457 = inttoptr i64 %2443 to double*
  store double %2456, double* %2457
  %2458 = inttoptr i64 %1483 to i32*
  %2459 = load i32, i32* %2458
  %2460 = add i32 %2459, 1
  %2461 = inttoptr i64 %1483 to i32*
  store i32 %2460, i32* %2461
  %2462 = add i64 %1299, -13
  br label %block_41c5bf

block_41b423:                                     ; preds = %block_41b411
  %2463 = inttoptr i64 %1032 to i32*
  store i32 %2524, i32* %2463
  %2464 = add i64 %2539, 19
  %2465 = inttoptr i64 %1033 to i32*
  store i32 0, i32* %2465
  br label %block_41b436

block_41c01f:                                     ; preds = %block_41be4a
  %2466 = add i64 %1859, -592
  %2467 = add i64 %1858, 10
  %2468 = inttoptr i64 %2466 to i32*
  store i32 1, i32* %2468
  %2469 = add i64 %1859, -564
  %2470 = add i64 %1859, -568
  %2471 = add i64 %1859, -604
  %2472 = add i64 %1859, -600
  %2473 = add i64 %1859, -8
  %2474 = add i64 %1859, -16
  br label %block_41c029

block_41beae:                                     ; preds = %block_41bea1
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %2475 = load double, double* %58, align 1
  %2476 = inttoptr i64 %1733 to double*
  store double %2475, double* %2476
  %2477 = add i64 %1528, 18
  %2478 = inttoptr i64 %1734 to i32*
  store i32 1, i32* %2478
  br label %block_41bec0

block_41b61e:                                     ; preds = %block_41b60c, %block_41b62b
  %2479 = phi i64 [ %2542, %block_41b60c ], [ %2333, %block_41b62b ]
  %2480 = phi %struct.Memory* [ %74, %block_41b60c ], [ %2480, %block_41b62b ]
  %2481 = inttoptr i64 %1041 to i32*
  %2482 = load i32, i32* %2481
  %2483 = add i32 %2482, -4
  %2484 = lshr i32 %2483, 31
  %2485 = lshr i32 %2482, 31
  %2486 = xor i32 %2484, %2485
  %2487 = add nuw nsw i32 %2486, %2485
  %2488 = icmp eq i32 %2487, 2
  %2489 = icmp ne i32 %2484, 0
  %2490 = xor i1 %2489, %2488
  %2491 = select i1 %2490, i64 13, i64 189
  %2492 = add i64 %2479, %2491
  br i1 %2490, label %block_41b62b, label %block_41b6db

block_41c41b:                                     ; preds = %block_41c411, %block_41c597
  %2493 = phi i64 [ %1751, %block_41c411 ], [ %230, %block_41c597 ]
  %2494 = phi %struct.Memory* [ %900, %block_41c411 ], [ %2253, %block_41c597 ]
  %2495 = inttoptr i64 %1750 to i32*
  %2496 = load i32, i32* %2495
  %2497 = add i32 %2496, -2
  %2498 = lshr i32 %2497, 31
  %2499 = lshr i32 %2496, 31
  %2500 = xor i32 %2498, %2499
  %2501 = add nuw nsw i32 %2500, %2499
  %2502 = icmp eq i32 %2501, 2
  %2503 = icmp ne i32 %2498, 0
  %2504 = xor i1 %2503, %2502
  %2505 = select i1 %2504, i64 13, i64 405
  %2506 = add i64 %2493, %2505
  br i1 %2504, label %block_41c428, label %block_41c698.loopexit602

block_41bb49:                                     ; preds = %block_41bb32, %block_41bb56
  %2507 = phi i64 [ %1863, %block_41bb32 ], [ %1635, %block_41bb56 ]
  %2508 = phi %struct.Memory* [ %1301, %block_41bb32 ], [ %2508, %block_41bb56 ]
  %2509 = inttoptr i64 %1041 to i32*
  %2510 = load i32, i32* %2509
  %2511 = add i32 %2510, -4
  %2512 = lshr i32 %2511, 31
  %2513 = lshr i32 %2510, 31
  %2514 = xor i32 %2512, %2513
  %2515 = add nuw nsw i32 %2514, %2513
  %2516 = icmp eq i32 %2515, 2
  %2517 = icmp ne i32 %2512, 0
  %2518 = xor i1 %2517, %2516
  %2519 = select i1 %2518, i64 13, i64 251
  %2520 = add i64 %2507, %2519
  br i1 %2518, label %block_41bb56, label %block_41bc44

block_41b411:                                     ; preds = %block_41b76d, %block_41b3f0
  %2521 = phi i64 [ %1029, %block_41b3f0 ], [ %1652, %block_41b76d ]
  %2522 = phi %struct.Memory* [ %1025, %block_41b3f0 ], [ %376, %block_41b76d ]
  %2523 = inttoptr i64 %1027 to i32*
  %2524 = load i32, i32* %2523
  %2525 = inttoptr i64 %1031 to i32*
  %2526 = load i32, i32* %2525
  %2527 = sub i32 %2524, %2526
  %2528 = lshr i32 %2527, 31
  %2529 = trunc i32 %2528 to i8
  %2530 = lshr i32 %2524, 31
  %2531 = lshr i32 %2526, 31
  %2532 = xor i32 %2531, %2530
  %2533 = xor i32 %2528, %2530
  %2534 = add nuw nsw i32 %2533, %2532
  %2535 = icmp eq i32 %2534, 2
  %2536 = icmp ne i8 %2529, 0
  %2537 = xor i1 %2536, %2535
  %2538 = select i1 %2537, i64 18, i64 885
  %2539 = add i64 %2521, %2538
  br i1 %2537, label %block_41b423, label %block_41b786

block_41b60c:                                     ; preds = %block_41b5f6
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %2540 = load double, double* %58, align 1
  %2541 = inttoptr i64 %1040 to double*
  store double %2540, double* %2541
  %2542 = add i64 %91, 18
  %2543 = inttoptr i64 %1041 to i32*
  store i32 1, i32* %2543
  br label %block_41b61e

block_41c001:                                     ; preds = %block_41bea1
  %2544 = inttoptr i64 %1729 to i32*
  %2545 = load i32, i32* %2544
  %2546 = add i32 %2545, 1
  %2547 = inttoptr i64 %1729 to i32*
  store i32 %2546, i32* %2547
  %2548 = add i64 %1528, -375
  br label %block_41be8a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f850_r_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f850:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  %16 = add i64 %13, -16
  %17 = load i64, i64* %8, align 8
  %18 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %18
  %19 = add i64 %13, -20
  %20 = load i32, i32* %5, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %13, -32
  %23 = bitcast %union.VectorReg* %11 to double*
  %24 = load double, double* %23, align 1
  %25 = inttoptr i64 %22 to double*
  store double %24, double* %25
  %26 = add i64 %13, -36
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = add i64 %13, -20
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = add i64 %13, -16
  br label %block_41f867

block_41f867:                                     ; preds = %block_41f873, %block_41f850
  %35 = phi %struct.Memory* [ %2, %block_41f850 ], [ %35, %block_41f873 ]
  %36 = inttoptr i64 %26 to i32*
  %37 = load i32, i32* %36
  %38 = inttoptr i64 %28 to i32*
  %39 = load i32, i32* %38
  %40 = sub i32 %37, %39
  %41 = lshr i32 %40, 31
  %42 = trunc i32 %41 to i8
  %43 = lshr i32 %37, 31
  %44 = lshr i32 %39, 31
  %45 = xor i32 %44, %43
  %46 = xor i32 %41, %43
  %47 = add nuw nsw i32 %46, %45
  %48 = icmp eq i32 %47, 2
  %49 = icmp ne i8 %42, 0
  %50 = xor i1 %49, %48
  br i1 %50, label %block_41f873, label %block_41f893

block_41f893:                                     ; preds = %block_41f867
  %51 = zext i32 %37 to i64
  store i64 %51, i64* %6, align 8, !tbaa !1240
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = icmp ult i32 %37, %39
  %56 = zext i1 %55 to i8
  %57 = and i32 %40, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #11
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  %62 = xor i32 %39, %37
  %63 = xor i32 %62, %40
  %64 = lshr i32 %63, 4
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = icmp eq i32 %40, 0
  %68 = zext i1 %67 to i8
  %69 = zext i1 %48 to i8
  store i8 %56, i8* %29, align 1, !tbaa !1248
  store i8 %61, i8* %52, align 1, !tbaa !1261
  store i8 %66, i8* %30, align 1, !tbaa !1262
  store i8 %68, i8* %53, align 1, !tbaa !1263
  store i8 %42, i8* %31, align 1, !tbaa !1264
  store i8 %69, i8* %54, align 1, !tbaa !1265
  %70 = inttoptr i64 %14 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %10, align 8, !tbaa !1240
  %72 = inttoptr i64 %13 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %3, align 8, !tbaa !1240
  %74 = add i64 %13, 8
  store i64 %74, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %35

block_41f873:                                     ; preds = %block_41f867
  %75 = inttoptr i64 %22 to double*
  %76 = load double, double* %75
  store double %76, double* %23, align 1, !tbaa !1246
  store double 0.000000e+00, double* %33, align 1, !tbaa !1246
  %77 = inttoptr i64 %34 to i64*
  %78 = load i64, i64* %77
  %79 = sext i32 %37 to i64
  store i64 %79, i64* %7, align 8, !tbaa !1240
  %80 = shl nsw i64 %79, 3
  %81 = add i64 %80, %78
  %82 = inttoptr i64 %81 to double*
  store double %76, double* %82
  %83 = inttoptr i64 %26 to i32*
  %84 = load i32, i32* %83
  %85 = add i32 %84, 1
  %86 = inttoptr i64 %26 to i32*
  store i32 %85, i32* %86
  br label %block_41f867
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_417920_setdef(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_417920:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%wdtdr_type* @wdtdr to i64), i64* %8, align 8, !tbaa !1240
  store i64 25, i64* %7, align 8, !tbaa !1240
  %23 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %25, align 1, !tbaa !1244
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 1, !tbaa !1244
  %28 = bitcast i64* %24 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %23, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = add i64 %1, 32560
  %32 = add i64 %1, 31
  %33 = add i64 %14, -32
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %9, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, -4
  %38 = inttoptr i64 %37 to i32*
  store i32 0, i32* %38
  %39 = add i64 %36, -8
  %40 = add i64 %36, -12
  %41 = bitcast [32 x %union.VectorReg]* %11 to double*
  %42 = bitcast %union.VectorReg* %12 to double*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_417946

block_4179fb:                                     ; preds = %block_417968
  %44 = add i32 %99, 1
  %45 = inttoptr i64 %39 to i32*
  store i32 %44, i32* %45
  br label %block_417957

block_417a21:                                     ; preds = %block_417946
  %46 = load i64, i64* %9, align 8
  %47 = add i64 %46, 16
  %48 = icmp ugt i64 %46, -17
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %17, align 1, !tbaa !1248
  %50 = trunc i64 %47 to i32
  %51 = and i32 %50, 255
  %52 = tail call i32 @llvm.ctpop.i32(i32 %51) #11
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  store i8 %55, i8* %18, align 1, !tbaa !1261
  %56 = xor i64 %46, 16
  %57 = xor i64 %56, %47
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  store i8 %60, i8* %19, align 1, !tbaa !1262
  %61 = icmp eq i64 %47, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %20, align 1, !tbaa !1263
  %63 = lshr i64 %47, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %21, align 1, !tbaa !1264
  %65 = lshr i64 %46, 63
  %66 = xor i64 %63, %65
  %67 = add nuw nsw i64 %66, %63
  %68 = icmp eq i64 %67, 2
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %22, align 1, !tbaa !1265
  %70 = add i64 %46, 24
  %71 = inttoptr i64 %47 to i64*
  %72 = load i64, i64* %71
  store i64 %72, i64* %10, align 8, !tbaa !1240
  %73 = inttoptr i64 %70 to i64*
  %74 = load i64, i64* %73
  store i64 %74, i64* %3, align 8, !tbaa !1240
  %75 = add i64 %46, 32
  store i64 %75, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %100

block_417957:                                     ; preds = %block_417950, %block_4179fb
  %76 = phi %struct.Memory* [ %100, %block_417950 ], [ %87, %block_4179fb ]
  %77 = inttoptr i64 %39 to i32*
  %78 = load i32, i32* %77
  %79 = add i32 %78, -5
  %80 = lshr i32 %79, 31
  %81 = lshr i32 %78, 31
  %82 = xor i32 %80, %81
  %83 = add nuw nsw i32 %82, %81
  %84 = icmp eq i32 %83, 2
  %85 = icmp ne i32 %80, 0
  %86 = xor i1 %85, %84
  br i1 %86, label %block_417961, label %block_417a0e

block_417968:                                     ; preds = %block_417961, %block_417972
  %87 = phi %struct.Memory* [ %76, %block_417961 ], [ %87, %block_417972 ]
  %88 = inttoptr i64 %40 to i32*
  %89 = load i32, i32* %88
  %90 = add i32 %89, -5
  %91 = lshr i32 %90, 31
  %92 = lshr i32 %89, 31
  %93 = xor i32 %91, %92
  %94 = add nuw nsw i32 %93, %92
  %95 = icmp eq i32 %94, 2
  %96 = icmp ne i32 %91, 0
  %97 = xor i1 %96, %95
  %98 = inttoptr i64 %39 to i32*
  %99 = load i32, i32* %98
  br i1 %97, label %block_417972, label %block_4179fb

block_417946:                                     ; preds = %block_417a0e, %block_417920
  %100 = phi %struct.Memory* [ %35, %block_417920 ], [ %76, %block_417a0e ]
  %101 = inttoptr i64 %37 to i32*
  %102 = load i32, i32* %101
  %103 = add i32 %102, -5
  %104 = lshr i32 %103, 31
  %105 = lshr i32 %102, 31
  %106 = xor i32 %104, %105
  %107 = add nuw nsw i32 %106, %105
  %108 = icmp eq i32 %107, 2
  %109 = icmp ne i32 %104, 0
  %110 = xor i1 %109, %108
  br i1 %110, label %block_417950, label %block_417a21

block_417972:                                     ; preds = %block_417968
  %111 = sext i32 %99 to i64
  %112 = mul nsw i64 %111, 40
  %113 = add i64 %112, ptrtoint (%wdtdr_type* @wdtdr to i64)
  %114 = inttoptr i64 %37 to i32*
  %115 = load i32, i32* %114
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 3
  %118 = add i64 %117, %113
  %119 = inttoptr i64 %118 to double*
  %120 = load double, double* %119
  %121 = sext i32 %89 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add i64 %122, ptrtoint (%wxm1_type* @wxm1 to i64)
  %124 = inttoptr i64 %123 to double*
  %125 = load double, double* %124
  %126 = mul nsw i64 %116, 40
  %127 = add i64 %126, ptrtoint (%dxm1_type* @dxm1 to i64)
  store i64 %127, i64* %7, align 8, !tbaa !1240
  %128 = add i64 %122, %127
  %129 = inttoptr i64 %128 to double*
  %130 = load double, double* %129
  %131 = fmul double %125, %130
  %132 = add i64 %112, ptrtoint (%dxm1_type* @dxm1 to i64)
  store i64 %121, i64* %6, align 8, !tbaa !1240
  %133 = add i64 %122, %132
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = fmul double %131, %135
  store double %136, double* %42, align 1, !tbaa !1246
  store i64 0, i64* %43, align 1, !tbaa !1246
  %137 = fadd double %120, %136
  store double %137, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %116, i64* %5, align 8, !tbaa !1240
  %138 = inttoptr i64 %118 to double*
  store double %137, double* %138
  %139 = inttoptr i64 %40 to i32*
  %140 = load i32, i32* %139
  %141 = add i32 %140, 1
  %142 = inttoptr i64 %40 to i32*
  store i32 %141, i32* %142
  br label %block_417968

block_417950:                                     ; preds = %block_417946
  %143 = inttoptr i64 %39 to i32*
  store i32 0, i32* %143
  br label %block_417957

block_417961:                                     ; preds = %block_417957
  %144 = inttoptr i64 %40 to i32*
  store i32 0, i32* %144
  br label %block_417968

block_417a0e:                                     ; preds = %block_417957
  %145 = inttoptr i64 %37 to i32*
  %146 = load i32, i32* %145
  %147 = add i32 %146, 1
  %148 = zext i32 %147 to i64
  store i64 %148, i64* %4, align 8, !tbaa !1240
  %149 = inttoptr i64 %37 to i32*
  store i32 %147, i32* %149
  br label %block_417946
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_415900_com_dpc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_415900:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %18 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %25 = load i64, i64* %20, align 8
  %26 = load i64, i64* %19, align 8, !tbaa !1240
  %27 = add i64 %26, -8
  %28 = inttoptr i64 %27 to i64*
  store i64 %25, i64* %28
  store i64 %27, i64* %19, align 8, !tbaa !1240
  store i64 %27, i64* %20, align 8, !tbaa !1240
  %29 = bitcast [32 x %union.VectorReg]* %22 to i8*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %31 = bitcast [32 x %union.VectorReg]* %22 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = getelementptr inbounds i8, i8* %29, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 1, !tbaa !1244
  %34 = bitcast i64* %30 to i32*
  store i32 0, i32* %34, align 1, !tbaa !1244
  %35 = getelementptr inbounds i8, i8* %29, i64 12
  %36 = bitcast i8* %35 to i32*
  store i32 0, i32* %36, align 1, !tbaa !1244
  %37 = add i64 %26, -12
  %38 = load i32, i32* %11, align 4
  %39 = inttoptr i64 %37 to i32*
  store i32 %38, i32* %39
  %40 = add i64 %26, -16
  %41 = load i32, i32* %9, align 4
  %42 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %42
  %43 = add i64 %26, -20
  %44 = load i32, i32* %7, align 4
  %45 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %45
  %46 = add i64 %26, -24
  %47 = load i32, i32* %5, align 4
  %48 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %48
  %49 = add i64 %26, -28
  %50 = load i32, i32* %13, align 4
  %51 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %51
  %52 = add i64 %26, -80
  %53 = inttoptr i64 %52 to i32*
  store i32 0, i32* %53
  %54 = add i64 %26, -120
  %55 = bitcast [32 x %union.VectorReg]* %22 to double*
  %56 = load double, double* %55, align 1
  %57 = inttoptr i64 %54 to double*
  store double %56, double* %57
  %58 = inttoptr i64 %43 to i32*
  %59 = load i32, i32* %58
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %63 = icmp eq i32 %59, 0
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %65 = lshr i32 %59, 31
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %68 = select i1 %63, i64 45, i64 106
  %69 = add i64 %68, %1
  br i1 %63, label %block_41592d, label %block_41596a

block_415af6:                                     ; preds = %block_415aec
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  %70 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %71 = bitcast %union.VectorReg* %23 to double*
  store double %70, double* %71, align 1, !tbaa !1246
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %73 = bitcast i64* %72 to double*
  store double 0.000000e+00, double* %73, align 1, !tbaa !1246
  %74 = add i64 %26, -104
  %75 = inttoptr i64 %74 to double*
  store double %70, double* %75
  %76 = add i64 %26, -96
  %77 = inttoptr i64 %76 to double*
  store double %70, double* %77
  %78 = add i64 %26, -88
  %79 = load double, double* %55, align 1
  %80 = inttoptr i64 %78 to double*
  store double %79, double* %80
  %81 = add i64 %26, -112
  %82 = add i64 %211, 31
  %83 = inttoptr i64 %81 to double*
  store double %79, double* %83
  br label %block_415ba1

block_415974:                                     ; preds = %block_41596a
  %84 = add i64 %26, -32
  %85 = inttoptr i64 %84 to i32*
  store i32 1, i32* %85
  %86 = add i64 %26, -36
  %87 = inttoptr i64 %86 to i32*
  store i32 2, i32* %87
  %88 = add i64 %26, -40
  %89 = inttoptr i64 %88 to i32*
  store i32 2, i32* %89
  %90 = add i64 %26, -44
  %91 = inttoptr i64 %90 to i32*
  store i32 2, i32* %91
  %92 = add i64 %26, -48
  %93 = inttoptr i64 %92 to i32*
  store i32 2, i32* %93
  %94 = add i64 %26, -52
  %95 = inttoptr i64 %94 to i32*
  store i32 4, i32* %95
  %96 = add i64 %26, -56
  %97 = inttoptr i64 %96 to i32*
  store i32 5, i32* %97
  %98 = add i64 %26, -60
  %99 = add i64 %233, 56
  %100 = inttoptr i64 %98 to i32*
  store i32 5, i32* %100
  br label %block_415a83

block_415df0:                                     ; preds = %block_415de6
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %15, align 8, !tbaa !1240
  %101 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %101, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %386, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %16, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %17, align 8, !tbaa !1240
  %102 = load i64, i64* %20, align 8
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i32*
  %105 = load i32, i32* %104
  %106 = sext i32 %105 to i64
  %107 = mul nsw i64 %106, 2400
  %108 = add i64 %107, ptrtoint (%idmo_type* @idmo to i64)
  %109 = add i64 %102, -4
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110
  %112 = sext i32 %111 to i64
  %113 = mul nsw i64 %112, 400
  store i64 %113, i64* %21, align 8, !tbaa !1240
  %114 = add i64 %113, %108
  %115 = add i64 %114, 16
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116
  %118 = load i64, i64* %20, align 8
  %119 = add i64 %118, -72
  %120 = inttoptr i64 %119 to i32*
  store i32 %117, i32* %120
  %121 = add i64 %118, -80
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store double %123, double* %363, align 1, !tbaa !1246
  store double 0.000000e+00, double* %361, align 1, !tbaa !1246
  %124 = add i64 %118, -20
  %125 = inttoptr i64 %124 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = mul nsw i64 %127, 800
  store i64 %128, i64* %18, align 8, !tbaa !1240
  %129 = load i64, i64* %17, align 8
  %130 = add i64 %128, %129
  %131 = add i64 %130, 32
  %132 = inttoptr i64 %131 to double*
  %133 = load double, double* %132
  %134 = fmul double %123, %133
  store double %134, double* %363, align 1, !tbaa !1246
  store i64 0, i64* %362, align 1, !tbaa !1246
  %135 = add i64 %118, -88
  %136 = inttoptr i64 %135 to double*
  %137 = load double, double* %136
  store double %137, double* %359, align 1, !tbaa !1246
  store double 0.000000e+00, double* %357, align 1, !tbaa !1246
  %138 = add i32 %126, 1
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %387, align 8, !tbaa !1240
  %140 = sext i32 %138 to i64
  %141 = mul nsw i64 %140, 200
  store i64 %141, i64* %17, align 8, !tbaa !1240
  %142 = load i64, i64* %16, align 8
  %143 = add i64 %141, %142
  %144 = add i64 %143, 32
  %145 = load double, double* %359, align 1
  %146 = inttoptr i64 %144 to double*
  %147 = load double, double* %146
  %148 = fmul double %145, %147
  %149 = load double, double* %55, align 1
  %150 = fmul double %148, %149
  store double %150, double* %359, align 1, !tbaa !1246
  %151 = load double, double* %363, align 1
  %152 = load i64, i64* %362, align 1
  %153 = fadd double %150, %151
  store double %153, double* %363, align 1, !tbaa !1246
  %154 = load i64, i64* %20, align 8
  %155 = add i64 %154, -104
  %156 = inttoptr i64 %155 to double*
  %157 = load double, double* %156
  %158 = add i64 %154, -20
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159
  %161 = sext i32 %160 to i64
  %162 = mul nsw i64 %161, 800
  store i64 %162, i64* %16, align 8, !tbaa !1240
  %163 = lshr i64 %162, 63
  %164 = load i64, i64* %15, align 8
  %165 = add i64 %162, %164
  %166 = add i64 %165, 32
  %167 = inttoptr i64 %166 to double*
  %168 = load double, double* %167
  %169 = fmul double %157, %168
  %170 = fadd double %153, %169
  store double %170, double* %363, align 1, !tbaa !1246
  store i64 %152, i64* %362, align 1, !tbaa !1246
  %171 = add i64 %154, -96
  %172 = inttoptr i64 %171 to double*
  %173 = load double, double* %172
  store i64 %162, i64* %15, align 8, !tbaa !1240
  %174 = load i64, i64* %14, align 8
  %175 = add i64 %162, %174
  %176 = icmp ult i64 %175, %174
  %177 = icmp ult i64 %175, %162
  %178 = or i1 %176, %177
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %60, align 1, !tbaa !1248
  %180 = trunc i64 %175 to i32
  %181 = and i32 %180, 255
  %182 = tail call i32 @llvm.ctpop.i32(i32 %181) #11
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  %185 = xor i8 %184, 1
  store i8 %185, i8* %61, align 1, !tbaa !1261
  %186 = xor i64 %174, %175
  %187 = lshr i64 %186, 4
  %188 = trunc i64 %187 to i8
  %189 = and i8 %188, 1
  store i8 %189, i8* %62, align 1, !tbaa !1262
  %190 = icmp eq i64 %175, 0
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %64, align 1, !tbaa !1263
  %192 = lshr i64 %175, 63
  %193 = trunc i64 %192 to i8
  store i8 %193, i8* %66, align 1, !tbaa !1264
  %194 = lshr i64 %174, 63
  %195 = xor i64 %192, %194
  %196 = xor i64 %192, %163
  %197 = add nuw nsw i64 %195, %196
  %198 = icmp eq i64 %197, 2
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %67, align 1, !tbaa !1265
  %200 = add i64 %175, 32
  %201 = inttoptr i64 %200 to double*
  %202 = load double, double* %201
  %203 = fmul double %173, %202
  store double %203, double* %55, align 1, !tbaa !1246
  store i64 0, i64* %30, align 1, !tbaa !1246
  %204 = fadd double %170, %203
  store double %204, double* %363, align 1, !tbaa !1246
  store i64 %152, i64* %362, align 1, !tbaa !1246
  %205 = load i64, i64* %20, align 8
  %206 = add i64 %205, -112
  %207 = inttoptr i64 %206 to double*
  store double %204, double* %207
  br label %block_4161be

block_415aec:                                     ; preds = %block_415abe
  %208 = add i32 %659, -3
  %209 = icmp eq i32 %208, 0
  %210 = select i1 %209, i64 10, i64 46
  %211 = add i64 %670, %210
  br i1 %209, label %block_415af6, label %block_415b1a

block_415bf3:                                     ; preds = %block_415bff, %block_415bea
  %212 = phi i64 [ %652, %block_415bea ], [ %942, %block_415bff ]
  %213 = phi %struct.Memory* [ %246, %block_415bea ], [ %213, %block_415bff ]
  %214 = inttoptr i64 %384 to i32*
  %215 = load i32, i32* %214
  %216 = inttoptr i64 %385 to i32*
  %217 = load i32, i32* %216
  %218 = sub i32 %215, %217
  %219 = lshr i32 %218, 31
  %220 = lshr i32 %215, 31
  %221 = lshr i32 %217, 31
  %222 = xor i32 %221, %220
  %223 = xor i32 %219, %220
  %224 = add nuw nsw i32 %223, %222
  %225 = icmp eq i32 %224, 2
  %226 = icmp ne i32 %219, 0
  %227 = xor i1 %226, %225
  %228 = select i1 %227, i64 12, i64 442
  %229 = add i64 %212, %228
  br i1 %227, label %block_415bff, label %block_415dad

block_41596a:                                     ; preds = %block_415900
  %230 = add i32 %59, -1
  %231 = icmp eq i32 %230, 0
  %232 = select i1 %231, i64 10, i64 71
  %233 = add i64 %69, %232
  br i1 %231, label %block_415974, label %block_4159b1

block_415de6:                                     ; preds = %block_415bb4
  %234 = inttoptr i64 %43 to i32*
  %235 = load i32, i32* %234
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %block_415df0, label %block_415ecf

block_415b50:                                     ; preds = %block_415b1a
  store i8 0, i8* %60, align 1, !tbaa !1248
  %237 = and i32 %659, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #11
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %61, align 1, !tbaa !1261
  store i8 0, i8* %62, align 1, !tbaa !1262
  store i8 %662, i8* %64, align 1, !tbaa !1263
  %242 = trunc i32 %664 to i8
  store i8 %242, i8* %66, align 1, !tbaa !1264
  store i8 0, i8* %67, align 1, !tbaa !1265
  %243 = select i1 %661, i64 10, i64 46
  %244 = add i64 %500, %243
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  br i1 %661, label %block_415b5a, label %block_415b7e

block_415bde:                                     ; preds = %block_415dad, %block_415bd5
  %245 = phi i64 [ %405, %block_415bd5 ], [ %411, %block_415dad ]
  %246 = phi %struct.Memory* [ %306, %block_415bd5 ], [ %213, %block_415dad ]
  %247 = inttoptr i64 %381 to i32*
  %248 = load i32, i32* %247
  %249 = inttoptr i64 %382 to i32*
  %250 = load i32, i32* %249
  %251 = sub i32 %248, %250
  %252 = lshr i32 %251, 31
  %253 = lshr i32 %248, 31
  %254 = lshr i32 %250, 31
  %255 = xor i32 %254, %253
  %256 = xor i32 %252, %253
  %257 = add nuw nsw i32 %256, %255
  %258 = icmp eq i32 %257, 2
  %259 = icmp ne i32 %252, 0
  %260 = xor i1 %259, %258
  %261 = select i1 %260, i64 12, i64 482
  %262 = add i64 %245, %261
  br i1 %260, label %block_415bea, label %block_415dc0

block_4160bf:                                     ; preds = %block_415fc7
  %263 = add i32 %468, -3
  %264 = icmp ult i32 %468, 3
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %60, align 1, !tbaa !1248
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #11
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %61, align 1, !tbaa !1261
  %271 = xor i32 %263, %468
  %272 = lshr i32 %271, 4
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  store i8 %274, i8* %62, align 1, !tbaa !1262
  %275 = icmp eq i32 %263, 0
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %64, align 1, !tbaa !1263
  %277 = lshr i32 %263, 31
  %278 = trunc i32 %277 to i8
  store i8 %278, i8* %66, align 1, !tbaa !1264
  %279 = xor i32 %277, %471
  %280 = add nuw nsw i32 %279, %471
  %281 = icmp eq i32 %280, 2
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %67, align 1, !tbaa !1265
  br i1 %275, label %block_4161b4.sink.split, label %block_4161b4

block_415dc0:                                     ; preds = %block_415bde
  %283 = inttoptr i64 %378 to i32*
  %284 = load i32, i32* %283
  %285 = add i32 %284, 1
  %286 = inttoptr i64 %378 to i32*
  store i32 %285, i32* %286
  %287 = add i64 %262, -503
  br label %block_415bc9

block_4159bb:                                     ; preds = %block_4159b1
  %288 = add i64 %26, -32
  %289 = inttoptr i64 %288 to i32*
  store i32 2, i32* %289
  %290 = add i64 %26, -36
  %291 = inttoptr i64 %290 to i32*
  store i32 2, i32* %291
  %292 = add i64 %26, -40
  %293 = inttoptr i64 %292 to i32*
  store i32 1, i32* %293
  %294 = add i64 %26, -44
  %295 = inttoptr i64 %294 to i32*
  store i32 2, i32* %295
  %296 = add i64 %26, -48
  %297 = inttoptr i64 %296 to i32*
  store i32 5, i32* %297
  %298 = add i64 %26, -52
  %299 = inttoptr i64 %298 to i32*
  store i32 5, i32* %299
  %300 = add i64 %26, -56
  %301 = inttoptr i64 %300 to i32*
  store i32 2, i32* %301
  %302 = add i64 %26, -60
  %303 = inttoptr i64 %302 to i32*
  store i32 4, i32* %303
  %304 = add i64 %946, 195
  br label %block_415a83

block_415bc9:                                     ; preds = %block_415bc0, %block_415dc0
  %305 = phi i64 [ %827, %block_415bc0 ], [ %287, %block_415dc0 ]
  %306 = phi %struct.Memory* [ %338, %block_415bc0 ], [ %246, %block_415dc0 ]
  %307 = inttoptr i64 %378 to i32*
  %308 = load i32, i32* %307
  %309 = inttoptr i64 %379 to i32*
  %310 = load i32, i32* %309
  %311 = sub i32 %308, %310
  %312 = lshr i32 %311, 31
  %313 = lshr i32 %308, 31
  %314 = lshr i32 %310, 31
  %315 = xor i32 %314, %313
  %316 = xor i32 %312, %313
  %317 = add nuw nsw i32 %316, %315
  %318 = icmp eq i32 %317, 2
  %319 = icmp ne i32 %312, 0
  %320 = xor i1 %319, %318
  %321 = select i1 %320, i64 12, i64 522
  %322 = add i64 %305, %321
  br i1 %320, label %block_415bd5, label %block_415dd3

block_415ac8:                                     ; preds = %block_415abe
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  %323 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %324 = bitcast %union.VectorReg* %23 to double*
  store double %323, double* %324, align 1, !tbaa !1246
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %326 = bitcast i64* %325 to double*
  store double 0.000000e+00, double* %326, align 1, !tbaa !1246
  %327 = add i64 %26, -88
  %328 = inttoptr i64 %327 to double*
  store double %323, double* %328
  %329 = add i64 %26, -96
  %330 = inttoptr i64 %329 to double*
  store double %323, double* %330
  %331 = add i64 %26, -112
  %332 = load double, double* %55, align 1
  %333 = inttoptr i64 %331 to double*
  store double %332, double* %333
  %334 = add i64 %26, -104
  %335 = add i64 %670, 31
  %336 = inttoptr i64 %334 to double*
  store double %332, double* %336
  br label %block_415ba6

block_415bb4:                                     ; preds = %block_415dd3, %block_415bab
  %337 = phi i64 [ %374, %block_415bab ], [ %802, %block_415dd3 ]
  %338 = phi %struct.Memory* [ %367, %block_415bab ], [ %306, %block_415dd3 ]
  %339 = inttoptr i64 %373 to i32*
  %340 = load i32, i32* %339
  %341 = inttoptr i64 %376 to i32*
  %342 = load i32, i32* %341
  %343 = sub i32 %340, %342
  %344 = lshr i32 %343, 31
  %345 = lshr i32 %340, 31
  %346 = lshr i32 %342, 31
  %347 = xor i32 %346, %345
  %348 = xor i32 %344, %345
  %349 = add nuw nsw i32 %348, %347
  %350 = icmp eq i32 %349, 2
  %351 = icmp ne i32 %344, 0
  %352 = xor i1 %351, %350
  %353 = select i1 %352, i64 12, i64 562
  %354 = add i64 %337, %353
  br i1 %352, label %block_415bc0, label %block_415de6

block_415bab:                                     ; preds = %block_415a92, %block_415ba6
  %355 = phi i64 [ %517, %block_415a92 ], [ %388, %block_415ba6 ]
  %356 = phi i64 [ %515, %block_415a92 ], [ %389, %block_415ba6 ]
  %357 = phi double* [ %510, %block_415a92 ], [ %401, %block_415ba6 ]
  %358 = phi i64* [ %509, %block_415a92 ], [ %400, %block_415ba6 ]
  %359 = phi double* [ %508, %block_415a92 ], [ %399, %block_415ba6 ]
  %360 = phi i64 [ %513, %block_415a92 ], [ %390, %block_415ba6 ]
  %361 = phi double* [ %506, %block_415a92 ], [ %391, %block_415ba6 ]
  %362 = phi i64* [ %505, %block_415a92 ], [ %392, %block_415ba6 ]
  %363 = phi double* [ %504, %block_415a92 ], [ %393, %block_415ba6 ]
  %364 = phi i64 [ %511, %block_415a92 ], [ %394, %block_415ba6 ]
  %365 = phi i64 [ %518, %block_415a92 ], [ %398, %block_415ba6 ]
  %366 = phi i64 [ 242, %block_415a92 ], [ 5, %block_415ba6 ]
  %367 = phi %struct.Memory* [ %656, %block_415a92 ], [ %397, %block_415ba6 ]
  %368 = add i64 %365, %366
  %369 = add i64 %26, -40
  %370 = inttoptr i64 %369 to i32*
  %371 = load i32, i32* %370
  %372 = add i32 %371, -1
  %373 = add i64 %26, -76
  %374 = add i64 %368, 9
  %375 = inttoptr i64 %373 to i32*
  store i32 %372, i32* %375
  %376 = add i64 %26, -44
  %377 = add i64 %26, -32
  %378 = add i64 %26, -72
  %379 = add i64 %26, -36
  %380 = add i64 %26, -48
  %381 = add i64 %26, -68
  %382 = add i64 %26, -52
  %383 = add i64 %26, -56
  %384 = add i64 %26, -64
  %385 = add i64 %26, -60
  %386 = bitcast i64* %30 to double*
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_415bb4

block_415ba6:                                     ; preds = %block_415ba1, %block_415ac8
  %388 = phi i64 [ %434, %block_415ba1 ], [ %334, %block_415ac8 ]
  %389 = phi i64 [ %435, %block_415ba1 ], [ %331, %block_415ac8 ]
  %390 = phi i64 [ %436, %block_415ba1 ], [ %329, %block_415ac8 ]
  %391 = phi double* [ %437, %block_415ba1 ], [ %326, %block_415ac8 ]
  %392 = phi i64* [ %438, %block_415ba1 ], [ %325, %block_415ac8 ]
  %393 = phi double* [ %439, %block_415ba1 ], [ %324, %block_415ac8 ]
  %394 = phi i64 [ %440, %block_415ba1 ], [ %327, %block_415ac8 ]
  %395 = phi i64 [ %444, %block_415ba1 ], [ %335, %block_415ac8 ]
  %396 = phi i64 [ 5, %block_415ba1 ], [ 191, %block_415ac8 ]
  %397 = phi %struct.Memory* [ %443, %block_415ba1 ], [ %656, %block_415ac8 ]
  %398 = add i64 %395, %396
  %399 = bitcast %union.VectorReg* %24 to double*
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %401 = bitcast i64* %400 to double*
  br label %block_415bab

block_415bd5:                                     ; preds = %block_415bc9
  %402 = inttoptr i64 %380 to i32*
  %403 = load i32, i32* %402
  %404 = add i32 %403, -1
  %405 = add i64 %322, 9
  %406 = inttoptr i64 %381 to i32*
  store i32 %404, i32* %406
  br label %block_415bde

block_415dad:                                     ; preds = %block_415bf3
  %407 = inttoptr i64 %381 to i32*
  %408 = load i32, i32* %407
  %409 = add i32 %408, 1
  %410 = inttoptr i64 %381 to i32*
  store i32 %409, i32* %410
  %411 = add i64 %229, -463
  br label %block_415bde

block_415b24:                                     ; preds = %block_415b1a
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  %412 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %413 = bitcast %union.VectorReg* %23 to double*
  store double %412, double* %413, align 1, !tbaa !1246
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %415 = bitcast i64* %414 to double*
  store double 0.000000e+00, double* %415, align 1, !tbaa !1246
  %416 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 16) to double*)
  %417 = bitcast %union.VectorReg* %24 to double*
  store double %416, double* %417, align 1, !tbaa !1246
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %419 = bitcast i64* %418 to double*
  store double 0.000000e+00, double* %419, align 1, !tbaa !1246
  %420 = add i64 %26, -88
  %421 = load double, double* %55, align 1
  %422 = inttoptr i64 %420 to double*
  store double %421, double* %422
  %423 = add i64 %26, -96
  %424 = inttoptr i64 %423 to double*
  store double %416, double* %424
  %425 = add i64 %26, -104
  %426 = inttoptr i64 %425 to double*
  store double %412, double* %426
  %427 = add i64 %26, -112
  %428 = add i64 %500, 39
  %429 = inttoptr i64 %427 to double*
  store double %421, double* %429
  br label %block_415b9c

block_415fc7:                                     ; preds = %block_415ecf
  %430 = add i32 %468, -2
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %block_4161b4.sink.split, label %block_4160bf

block_415a3f:                                     ; preds = %block_4159f8
  %432 = add i64 %464, 2
  store i64 %432, i64* %3, align 8
  %433 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %432, %struct.Memory* %2)
  ret %struct.Memory* %433

block_415ba1:                                     ; preds = %block_415b9c, %block_415af6
  %434 = phi i64 [ %486, %block_415b9c ], [ %74, %block_415af6 ]
  %435 = phi i64 [ %487, %block_415b9c ], [ %81, %block_415af6 ]
  %436 = phi i64 [ %488, %block_415b9c ], [ %76, %block_415af6 ]
  %437 = phi double* [ %489, %block_415b9c ], [ %73, %block_415af6 ]
  %438 = phi i64* [ %490, %block_415b9c ], [ %72, %block_415af6 ]
  %439 = phi double* [ %491, %block_415b9c ], [ %71, %block_415af6 ]
  %440 = phi i64 [ %492, %block_415b9c ], [ %78, %block_415af6 ]
  %441 = phi i64 [ %496, %block_415b9c ], [ %82, %block_415af6 ]
  %442 = phi i64 [ 5, %block_415b9c ], [ 140, %block_415af6 ]
  %443 = phi %struct.Memory* [ %495, %block_415b9c ], [ %656, %block_415af6 ]
  %444 = add i64 %441, %442
  br label %block_415ba6

block_4159f8:                                     ; preds = %block_4159b1
  %445 = add i32 %59, -3
  store i8 0, i8* %60, align 1, !tbaa !1248
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #11
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %61, align 1, !tbaa !1261
  %451 = xor i32 %445, %59
  %452 = lshr i32 %451, 4
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  store i8 %454, i8* %62, align 1, !tbaa !1262
  %455 = icmp eq i32 %445, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %64, align 1, !tbaa !1263
  %457 = lshr i32 %445, 31
  %458 = trunc i32 %457 to i8
  store i8 %458, i8* %66, align 1, !tbaa !1264
  %459 = xor i32 %457, %65
  %460 = add nuw nsw i32 %459, %65
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %67, align 1, !tbaa !1265
  %463 = select i1 %455, i64 10, i64 71
  %464 = add i64 %946, %463
  br i1 %455, label %block_415a02, label %block_415a3f

block_415ecf:                                     ; preds = %block_415de6
  %465 = load i64, i64* %20, align 8
  %466 = add i64 %465, -12
  %467 = inttoptr i64 %466 to i32*
  %468 = load i32, i32* %467
  %469 = add i32 %468, -1
  %470 = icmp eq i32 %469, 0
  %471 = lshr i32 %468, 31
  br i1 %470, label %block_415ed9, label %block_415fc7

block_415b5a:                                     ; preds = %block_415b50
  %472 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %473 = bitcast %union.VectorReg* %23 to double*
  store double %472, double* %473, align 1, !tbaa !1246
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %475 = bitcast i64* %474 to double*
  store double 0.000000e+00, double* %475, align 1, !tbaa !1246
  %476 = add i64 %26, -88
  %477 = inttoptr i64 %476 to double*
  store double %472, double* %477
  %478 = add i64 %26, -96
  %479 = inttoptr i64 %478 to double*
  store double %472, double* %479
  %480 = add i64 %26, -104
  %481 = load double, double* %55, align 1
  %482 = inttoptr i64 %480 to double*
  store double %481, double* %482
  %483 = add i64 %26, -112
  %484 = inttoptr i64 %483 to double*
  store double %481, double* %484
  %485 = add i64 %244, 61
  br label %block_415b9c

block_415b9c:                                     ; preds = %block_415b5a, %block_415b24
  %486 = phi i64 [ %480, %block_415b5a ], [ %425, %block_415b24 ]
  %487 = phi i64 [ %483, %block_415b5a ], [ %427, %block_415b24 ]
  %488 = phi i64 [ %478, %block_415b5a ], [ %423, %block_415b24 ]
  %489 = phi double* [ %475, %block_415b5a ], [ %415, %block_415b24 ]
  %490 = phi i64* [ %474, %block_415b5a ], [ %414, %block_415b24 ]
  %491 = phi double* [ %473, %block_415b5a ], [ %413, %block_415b24 ]
  %492 = phi i64 [ %476, %block_415b5a ], [ %420, %block_415b24 ]
  %493 = phi i64 [ %485, %block_415b5a ], [ %428, %block_415b24 ]
  %494 = phi i64 [ 5, %block_415b5a ], [ 81, %block_415b24 ]
  %495 = phi %struct.Memory* [ %656, %block_415b5a ], [ %656, %block_415b24 ]
  %496 = add i64 %493, %494
  br label %block_415ba1

block_415b1a:                                     ; preds = %block_415aec
  %497 = add i32 %659, -4
  %498 = icmp eq i32 %497, 0
  %499 = select i1 %498, i64 10, i64 54
  %500 = add i64 %211, %499
  br i1 %498, label %block_415b24, label %block_415b50

block_415b7e:                                     ; preds = %block_415b50
  %501 = add i64 %244, 5
  store i64 %501, i64* %3, align 8
  %502 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %501, %struct.Memory* %656)
  ret %struct.Memory* %502

block_415a92:                                     ; preds = %block_415a88
  store i32 0, i32* %31, align 1, !tbaa !1244
  store i32 0, i32* %33, align 1, !tbaa !1244
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  %503 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %504 = bitcast %union.VectorReg* %23 to double*
  store double %503, double* %504, align 1, !tbaa !1246
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %506 = bitcast i64* %505 to double*
  store double 0.000000e+00, double* %506, align 1, !tbaa !1246
  %507 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %508 = bitcast %union.VectorReg* %24 to double*
  store double %507, double* %508, align 1, !tbaa !1246
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %510 = bitcast i64* %509 to double*
  store double 0.000000e+00, double* %510, align 1, !tbaa !1246
  %511 = add i64 %26, -88
  %512 = inttoptr i64 %511 to double*
  store double %507, double* %512
  %513 = add i64 %26, -96
  %514 = inttoptr i64 %513 to double*
  store double %503, double* %514
  %515 = add i64 %26, -112
  %516 = inttoptr i64 %515 to double*
  store double %503, double* %516
  %517 = add i64 %26, -104
  %518 = add i64 %666, 39
  %519 = load double, double* %55, align 1
  %520 = inttoptr i64 %517 to double*
  store double %519, double* %520
  br label %block_415bab

block_4161b4.sink.split:                          ; preds = %block_415fc7, %block_4160bf
  %521 = phi i64 [ 80, %block_4160bf ], [ 196, %block_415fc7 ]
  %522 = phi i64 [ 160, %block_4160bf ], [ 392, %block_415fc7 ]
  %523 = phi i64 [ 160, %block_4160bf ], [ 192, %block_415fc7 ]
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %15, align 8, !tbaa !1240
  %524 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %524, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %386, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %16, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %17, align 8, !tbaa !1240
  %525 = add i64 %465, -8
  %526 = inttoptr i64 %525 to i32*
  %527 = load i32, i32* %526
  %528 = sext i32 %527 to i64
  %529 = mul nsw i64 %528, 2400
  %530 = add i64 %529, ptrtoint (%idmo_type* @idmo to i64)
  %531 = add i64 %465, -4
  %532 = inttoptr i64 %531 to i32*
  %533 = load i32, i32* %532
  %534 = sext i32 %533 to i64
  %535 = mul nsw i64 %534, 400
  store i64 %535, i64* %21, align 8, !tbaa !1240
  %536 = add i64 %535, %530
  %537 = add i64 %536, %521
  %538 = inttoptr i64 %537 to i32*
  %539 = load i32, i32* %538
  %540 = load i64, i64* %20, align 8
  %541 = add i64 %540, -72
  %542 = inttoptr i64 %541 to i32*
  store i32 %539, i32* %542
  %543 = add i64 %540, -80
  %544 = inttoptr i64 %543 to double*
  %545 = load double, double* %544
  store double %545, double* %363, align 1, !tbaa !1246
  store double 0.000000e+00, double* %361, align 1, !tbaa !1246
  %546 = add i64 %540, -20
  %547 = inttoptr i64 %546 to i32*
  %548 = load i32, i32* %547
  %549 = sext i32 %548 to i64
  %550 = mul nsw i64 %549, 800
  store i64 %550, i64* %18, align 8, !tbaa !1240
  %551 = load i64, i64* %17, align 8
  %552 = add i64 %550, %551
  %553 = add i64 %552, %522
  %554 = inttoptr i64 %553 to double*
  %555 = load double, double* %554
  %556 = fmul double %545, %555
  store double %556, double* %363, align 1, !tbaa !1246
  store i64 0, i64* %362, align 1, !tbaa !1246
  %557 = add i64 %540, -88
  %558 = inttoptr i64 %557 to double*
  %559 = load double, double* %558
  store double %559, double* %359, align 1, !tbaa !1246
  store double 0.000000e+00, double* %357, align 1, !tbaa !1246
  %560 = add i32 %548, 1
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %387, align 8, !tbaa !1240
  %562 = sext i32 %560 to i64
  %563 = mul nsw i64 %562, 200
  store i64 %563, i64* %17, align 8, !tbaa !1240
  %564 = load i64, i64* %16, align 8
  %565 = add i64 %563, %564
  %566 = add i64 %565, %523
  %567 = load double, double* %359, align 1
  %568 = inttoptr i64 %566 to double*
  %569 = load double, double* %568
  %570 = fmul double %567, %569
  %571 = load double, double* %55, align 1
  %572 = fmul double %570, %571
  store double %572, double* %359, align 1, !tbaa !1246
  %573 = load double, double* %363, align 1
  %574 = load i64, i64* %362, align 1
  %575 = fadd double %572, %573
  store double %575, double* %363, align 1, !tbaa !1246
  %576 = load i64, i64* %20, align 8
  %577 = add i64 %576, -104
  %578 = inttoptr i64 %577 to double*
  %579 = load double, double* %578
  %580 = add i64 %576, -20
  %581 = inttoptr i64 %580 to i32*
  %582 = load i32, i32* %581
  %583 = sext i32 %582 to i64
  %584 = mul nsw i64 %583, 800
  store i64 %584, i64* %16, align 8, !tbaa !1240
  %585 = lshr i64 %584, 63
  %586 = load i64, i64* %15, align 8
  %587 = add i64 %584, %586
  %588 = add i64 %587, %522
  %589 = inttoptr i64 %588 to double*
  %590 = load double, double* %589
  %591 = fmul double %579, %590
  %592 = fadd double %575, %591
  store double %592, double* %363, align 1, !tbaa !1246
  store i64 %574, i64* %362, align 1, !tbaa !1246
  %593 = add i64 %576, -96
  %594 = inttoptr i64 %593 to double*
  %595 = load double, double* %594
  store i64 %584, i64* %15, align 8, !tbaa !1240
  %596 = load i64, i64* %14, align 8
  %597 = add i64 %584, %596
  %598 = icmp ult i64 %597, %596
  %599 = icmp ult i64 %597, %584
  %600 = or i1 %598, %599
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %60, align 1, !tbaa !1248
  %602 = trunc i64 %597 to i32
  %603 = and i32 %602, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #11
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %61, align 1, !tbaa !1261
  %608 = xor i64 %596, %597
  %609 = lshr i64 %608, 4
  %610 = trunc i64 %609 to i8
  %611 = and i8 %610, 1
  store i8 %611, i8* %62, align 1, !tbaa !1262
  %612 = icmp eq i64 %597, 0
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %64, align 1, !tbaa !1263
  %614 = lshr i64 %597, 63
  %615 = trunc i64 %614 to i8
  store i8 %615, i8* %66, align 1, !tbaa !1264
  %616 = lshr i64 %596, 63
  %617 = xor i64 %614, %616
  %618 = xor i64 %614, %585
  %619 = add nuw nsw i64 %617, %618
  %620 = icmp eq i64 %619, 2
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %67, align 1, !tbaa !1265
  %622 = add i64 %597, %522
  %623 = inttoptr i64 %622 to double*
  %624 = load double, double* %623
  %625 = fmul double %595, %624
  store double %625, double* %55, align 1, !tbaa !1246
  store i64 0, i64* %30, align 1, !tbaa !1246
  %626 = fadd double %592, %625
  store double %626, double* %363, align 1, !tbaa !1246
  store i64 %574, i64* %362, align 1, !tbaa !1246
  %627 = load i64, i64* %20, align 8
  %628 = add i64 %627, -112
  %629 = inttoptr i64 %628 to double*
  store double %626, double* %629
  br label %block_4161b4

block_4161b4:                                     ; preds = %block_4161b4.sink.split, %block_4160bf
  %630 = phi i64 [ %465, %block_4160bf ], [ %627, %block_4161b4.sink.split ]
  %631 = phi %struct.Memory* [ %338, %block_4160bf ], [ %338, %block_4161b4.sink.split ]
  br label %block_4161be

block_41592d:                                     ; preds = %block_415900
  %632 = add i64 %26, -32
  %633 = inttoptr i64 %632 to i32*
  store i32 1, i32* %633
  %634 = add i64 %26, -36
  %635 = inttoptr i64 %634 to i32*
  store i32 1, i32* %635
  %636 = add i64 %26, -40
  %637 = inttoptr i64 %636 to i32*
  store i32 1, i32* %637
  %638 = add i64 %26, -44
  %639 = inttoptr i64 %638 to i32*
  store i32 2, i32* %639
  %640 = add i64 %26, -48
  %641 = inttoptr i64 %640 to i32*
  store i32 1, i32* %641
  %642 = add i64 %26, -52
  %643 = inttoptr i64 %642 to i32*
  store i32 1, i32* %643
  %644 = add i64 %26, -56
  %645 = inttoptr i64 %644 to i32*
  store i32 2, i32* %645
  %646 = add i64 %26, -60
  %647 = add i64 %69, 56
  %648 = inttoptr i64 %646 to i32*
  store i32 4, i32* %648
  br label %block_415a88

block_415bea:                                     ; preds = %block_415bde
  %649 = inttoptr i64 %383 to i32*
  %650 = load i32, i32* %649
  %651 = add i32 %650, -1
  %652 = add i64 %262, 9
  %653 = inttoptr i64 %384 to i32*
  store i32 %651, i32* %653
  br label %block_415bf3

block_415a88:                                     ; preds = %block_415a83, %block_41592d
  %654 = phi i64 [ %674, %block_415a83 ], [ %647, %block_41592d ]
  %655 = phi i64 [ 5, %block_415a83 ], [ 291, %block_41592d ]
  %656 = phi %struct.Memory* [ %673, %block_415a83 ], [ %2, %block_41592d ]
  %657 = add i64 %654, %655
  %658 = inttoptr i64 %46 to i32*
  %659 = load i32, i32* %658
  %660 = add i32 %659, -1
  %661 = icmp eq i32 %659, 0
  %662 = zext i1 %661 to i8
  %663 = icmp eq i32 %660, 0
  %664 = lshr i32 %659, 31
  %665 = select i1 %663, i64 10, i64 54
  %666 = add i64 %657, %665
  br i1 %663, label %block_415a92, label %block_415abe

block_415abe:                                     ; preds = %block_415a88
  %667 = add i32 %659, -2
  %668 = icmp eq i32 %667, 0
  %669 = select i1 %668, i64 10, i64 46
  %670 = add i64 %666, %669
  br i1 %668, label %block_415ac8, label %block_415aec

block_415a83:                                     ; preds = %block_415a02, %block_4159bb, %block_415974
  %671 = phi i64 [ %99, %block_415974 ], [ %304, %block_4159bb ], [ %797, %block_415a02 ]
  %672 = phi i64 [ 215, %block_415974 ], [ 5, %block_4159bb ], [ 5, %block_415a02 ]
  %673 = phi %struct.Memory* [ %2, %block_415974 ], [ %2, %block_4159bb ], [ %2, %block_415a02 ]
  %674 = add i64 %671, %672
  br label %block_415a88

block_415ed9:                                     ; preds = %block_415ecf
  store i64 ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %15, align 8, !tbaa !1240
  %675 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %675, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %386, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %16, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %17, align 8, !tbaa !1240
  %676 = add i64 %465, -8
  %677 = inttoptr i64 %676 to i32*
  %678 = load i32, i32* %677
  %679 = sext i32 %678 to i64
  %680 = mul nsw i64 %679, 2400
  %681 = add i64 %680, ptrtoint (%idmo_type* @idmo to i64)
  %682 = add i64 %465, -4
  %683 = inttoptr i64 %682 to i32*
  %684 = load i32, i32* %683
  %685 = sext i32 %684 to i64
  %686 = mul nsw i64 %685, 400
  store i64 %686, i64* %21, align 8, !tbaa !1240
  %687 = add i64 %686, %681
  %688 = add i64 %687, 296
  %689 = inttoptr i64 %688 to i32*
  %690 = load i32, i32* %689
  %691 = load i64, i64* %20, align 8
  %692 = add i64 %691, -72
  %693 = inttoptr i64 %692 to i32*
  store i32 %690, i32* %693
  %694 = add i64 %691, -80
  %695 = inttoptr i64 %694 to double*
  %696 = load double, double* %695
  store double %696, double* %363, align 1, !tbaa !1246
  store double 0.000000e+00, double* %361, align 1, !tbaa !1246
  %697 = add i64 %691, -20
  %698 = inttoptr i64 %697 to i32*
  %699 = load i32, i32* %698
  %700 = sext i32 %699 to i64
  %701 = mul nsw i64 %700, 800
  store i64 %701, i64* %18, align 8, !tbaa !1240
  %702 = load i64, i64* %17, align 8
  %703 = add i64 %701, %702
  %704 = add i64 %703, 592
  %705 = inttoptr i64 %704 to double*
  %706 = load double, double* %705
  %707 = fmul double %696, %706
  store double %707, double* %363, align 1, !tbaa !1246
  store i64 0, i64* %362, align 1, !tbaa !1246
  %708 = add i64 %691, -88
  %709 = inttoptr i64 %708 to double*
  %710 = load double, double* %709
  store double %710, double* %359, align 1, !tbaa !1246
  store double 0.000000e+00, double* %357, align 1, !tbaa !1246
  %711 = add i32 %699, 1
  %712 = zext i32 %711 to i64
  store i64 %712, i64* %387, align 8, !tbaa !1240
  %713 = sext i32 %711 to i64
  %714 = mul nsw i64 %713, 200
  store i64 %714, i64* %17, align 8, !tbaa !1240
  %715 = load i64, i64* %16, align 8
  %716 = add i64 %714, %715
  %717 = add i64 %716, 192
  %718 = load double, double* %359, align 1
  %719 = inttoptr i64 %717 to double*
  %720 = load double, double* %719
  %721 = fmul double %718, %720
  %722 = load double, double* %55, align 1
  %723 = fmul double %721, %722
  store double %723, double* %359, align 1, !tbaa !1246
  %724 = load double, double* %363, align 1
  %725 = load i64, i64* %362, align 1
  %726 = fadd double %723, %724
  store double %726, double* %363, align 1, !tbaa !1246
  %727 = load i64, i64* %20, align 8
  %728 = add i64 %727, -104
  %729 = inttoptr i64 %728 to double*
  %730 = load double, double* %729
  %731 = add i64 %727, -20
  %732 = inttoptr i64 %731 to i32*
  %733 = load i32, i32* %732
  %734 = sext i32 %733 to i64
  %735 = mul nsw i64 %734, 800
  store i64 %735, i64* %16, align 8, !tbaa !1240
  %736 = lshr i64 %735, 63
  %737 = load i64, i64* %15, align 8
  %738 = add i64 %735, %737
  %739 = add i64 %738, 592
  %740 = inttoptr i64 %739 to double*
  %741 = load double, double* %740
  %742 = fmul double %730, %741
  %743 = fadd double %726, %742
  store double %743, double* %363, align 1, !tbaa !1246
  store i64 %725, i64* %362, align 1, !tbaa !1246
  %744 = add i64 %727, -96
  %745 = inttoptr i64 %744 to double*
  %746 = load double, double* %745
  store i64 %735, i64* %15, align 8, !tbaa !1240
  %747 = load i64, i64* %14, align 8
  %748 = add i64 %735, %747
  %749 = icmp ult i64 %748, %747
  %750 = icmp ult i64 %748, %735
  %751 = or i1 %749, %750
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %60, align 1, !tbaa !1248
  %753 = trunc i64 %748 to i32
  %754 = and i32 %753, 255
  %755 = tail call i32 @llvm.ctpop.i32(i32 %754) #11
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  store i8 %758, i8* %61, align 1, !tbaa !1261
  %759 = xor i64 %747, %748
  %760 = lshr i64 %759, 4
  %761 = trunc i64 %760 to i8
  %762 = and i8 %761, 1
  store i8 %762, i8* %62, align 1, !tbaa !1262
  %763 = icmp eq i64 %748, 0
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %64, align 1, !tbaa !1263
  %765 = lshr i64 %748, 63
  %766 = trunc i64 %765 to i8
  store i8 %766, i8* %66, align 1, !tbaa !1264
  %767 = lshr i64 %747, 63
  %768 = xor i64 %765, %767
  %769 = xor i64 %765, %736
  %770 = add nuw nsw i64 %768, %769
  %771 = icmp eq i64 %770, 2
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %67, align 1, !tbaa !1265
  %773 = add i64 %748, 592
  %774 = inttoptr i64 %773 to double*
  %775 = load double, double* %774
  %776 = fmul double %746, %775
  store double %776, double* %55, align 1, !tbaa !1246
  store i64 0, i64* %30, align 1, !tbaa !1246
  %777 = fadd double %743, %776
  store double %777, double* %363, align 1, !tbaa !1246
  store i64 %725, i64* %362, align 1, !tbaa !1246
  %778 = load i64, i64* %20, align 8
  %779 = add i64 %778, -112
  %780 = inttoptr i64 %779 to double*
  store double %777, double* %780
  br label %block_4161be

block_415a02:                                     ; preds = %block_4159f8
  %781 = add i64 %26, -32
  %782 = inttoptr i64 %781 to i32*
  store i32 1, i32* %782
  %783 = add i64 %26, -36
  %784 = inttoptr i64 %783 to i32*
  store i32 2, i32* %784
  %785 = add i64 %26, -40
  %786 = inttoptr i64 %785 to i32*
  store i32 1, i32* %786
  %787 = add i64 %26, -44
  %788 = inttoptr i64 %787 to i32*
  store i32 1, i32* %788
  %789 = add i64 %26, -48
  %790 = inttoptr i64 %789 to i32*
  store i32 2, i32* %790
  %791 = add i64 %26, -52
  %792 = inttoptr i64 %791 to i32*
  store i32 4, i32* %792
  %793 = add i64 %26, -56
  %794 = inttoptr i64 %793 to i32*
  store i32 1, i32* %794
  %795 = add i64 %26, -60
  %796 = inttoptr i64 %795 to i32*
  store i32 1, i32* %796
  %797 = add i64 %464, 124
  br label %block_415a83

block_415dd3:                                     ; preds = %block_415bc9
  %798 = inttoptr i64 %373 to i32*
  %799 = load i32, i32* %798
  %800 = add i32 %799, 1
  %801 = inttoptr i64 %373 to i32*
  store i32 %800, i32* %801
  %802 = add i64 %322, -543
  br label %block_415bb4

block_4161be:                                     ; preds = %block_415ed9, %block_4161b4, %block_415df0
  %803 = phi i64 [ %205, %block_415df0 ], [ %778, %block_415ed9 ], [ %630, %block_4161b4 ]
  %804 = phi %struct.Memory* [ %338, %block_415df0 ], [ %338, %block_415ed9 ], [ %631, %block_4161b4 ]
  %805 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %806 = add i64 %803, -112
  %807 = inttoptr i64 %806 to double*
  %808 = load double, double* %807
  %809 = fdiv double %805, %808
  store double %809, double* %55, align 1, !tbaa !1246
  store i64 0, i64* %30, align 1, !tbaa !1246
  %810 = add i64 %803, -72
  %811 = inttoptr i64 %810 to i32*
  %812 = load i32, i32* %811
  %813 = sext i32 %812 to i64
  store i64 %813, i64* %14, align 8, !tbaa !1240
  %814 = shl nsw i64 %813, 3
  %815 = add i64 %814, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %816 = inttoptr i64 %815 to double*
  store double %809, double* %816
  %817 = load i64, i64* %19, align 8, !tbaa !1240
  %818 = add i64 %817, 8
  %819 = inttoptr i64 %817 to i64*
  %820 = load i64, i64* %819
  store i64 %820, i64* %20, align 8, !tbaa !1240
  %821 = inttoptr i64 %818 to i64*
  %822 = load i64, i64* %821
  store i64 %822, i64* %3, align 8, !tbaa !1240
  %823 = add i64 %817, 16
  store i64 %823, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %804

block_415bc0:                                     ; preds = %block_415bb4
  %824 = inttoptr i64 %377 to i32*
  %825 = load i32, i32* %824
  %826 = add i32 %825, -1
  %827 = add i64 %354, 9
  %828 = inttoptr i64 %378 to i32*
  store i32 %826, i32* %828
  br label %block_415bc9

block_415bff:                                     ; preds = %block_415bf3
  %829 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %829, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %386, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_nc0_type* @pcmor_nc0 to i64), i64* %15, align 8, !tbaa !1240
  %830 = inttoptr i64 %40 to i32*
  %831 = load i32, i32* %830
  %832 = sext i32 %831 to i64
  %833 = mul nsw i64 %832, 2400
  %834 = add i64 %833, ptrtoint (%idmo_type* @idmo to i64)
  %835 = inttoptr i64 %37 to i32*
  %836 = load i32, i32* %835
  %837 = sext i32 %836 to i64
  %838 = mul nsw i64 %837, 400
  %839 = add i64 %838, %834
  %840 = inttoptr i64 %373 to i32*
  %841 = load i32, i32* %840
  %842 = sext i32 %841 to i64
  %843 = mul nsw i64 %842, 200
  %844 = add i64 %843, %839
  %845 = inttoptr i64 %378 to i32*
  %846 = load i32, i32* %845
  %847 = sext i32 %846 to i64
  %848 = mul nsw i64 %847, 100
  %849 = add i64 %848, %844
  %850 = inttoptr i64 %381 to i32*
  %851 = load i32, i32* %850
  %852 = sext i32 %851 to i64
  %853 = mul nsw i64 %852, 20
  %854 = add i64 %853, %849
  %855 = sext i32 %215 to i64
  store i64 %855, i64* %21, align 8, !tbaa !1240
  %856 = shl nsw i64 %855, 2
  %857 = add i64 %856, %854
  %858 = inttoptr i64 %857 to i32*
  %859 = load i32, i32* %858
  %860 = inttoptr i64 %52 to i32*
  store i32 %859, i32* %860
  %861 = inttoptr i64 %364 to double*
  %862 = load double, double* %861
  store double 0.000000e+00, double* %361, align 1, !tbaa !1246
  %863 = inttoptr i64 %49 to i32*
  %864 = load i32, i32* %863
  %865 = sext i32 %864 to i64
  %866 = mul nsw i64 %865, 800
  %867 = add i64 %866, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %868 = inttoptr i64 %373 to i32*
  %869 = load i32, i32* %868
  %870 = sext i32 %869 to i64
  %871 = mul nsw i64 %870, 400
  %872 = add i64 %871, %867
  %873 = inttoptr i64 %378 to i32*
  %874 = load i32, i32* %873
  %875 = sext i32 %874 to i64
  %876 = mul nsw i64 %875, 200
  %877 = add i64 %876, %872
  %878 = inttoptr i64 %381 to i32*
  %879 = load i32, i32* %878
  %880 = sext i32 %879 to i64
  %881 = mul nsw i64 %880, 40
  %882 = add i64 %881, %877
  %883 = inttoptr i64 %384 to i32*
  %884 = load i32, i32* %883
  %885 = sext i32 %884 to i64
  store i64 %885, i64* %18, align 8, !tbaa !1240
  %886 = shl nsw i64 %885, 3
  %887 = add i64 %886, %882
  %888 = inttoptr i64 %887 to double*
  %889 = load double, double* %888
  %890 = fmul double %862, %889
  %891 = inttoptr i64 %360 to double*
  %892 = load double, double* %891
  %893 = add i32 %864, 1
  %894 = zext i32 %893 to i64
  store i64 %894, i64* %387, align 8, !tbaa !1240
  %895 = sext i32 %893 to i64
  %896 = mul nsw i64 %895, 200
  %897 = add i64 %896, ptrtoint (%pcmor_c_type* @pcmor_c to i64)
  %898 = add i64 %881, %897
  store i64 %885, i64* %17, align 8, !tbaa !1240
  %899 = add i64 %886, %898
  %900 = inttoptr i64 %899 to double*
  %901 = load double, double* %900
  %902 = fmul double %892, %901
  %903 = fadd double %890, %902
  store double %903, double* %363, align 1, !tbaa !1246
  store i64 0, i64* %362, align 1, !tbaa !1246
  %904 = inttoptr i64 %356 to double*
  %905 = load double, double* %904
  %906 = load i64, i64* %15, align 8
  %907 = add i64 %866, %906
  %908 = add i64 %871, %907
  %909 = add i64 %876, %908
  %910 = add i64 %881, %909
  store i64 %885, i64* %16, align 8, !tbaa !1240
  %911 = add i64 %886, %910
  %912 = inttoptr i64 %911 to double*
  %913 = load double, double* %912
  %914 = fmul double %905, %913
  %915 = fadd double %903, %914
  store double %915, double* %363, align 1, !tbaa !1246
  store i64 0, i64* %362, align 1, !tbaa !1246
  %916 = inttoptr i64 %355 to double*
  %917 = load double, double* %916
  store double 0.000000e+00, double* %357, align 1, !tbaa !1246
  %918 = add i64 %866, ptrtoint (%pcmor_nc2_type* @pcmor_nc2 to i64)
  %919 = add i64 %871, %918
  %920 = add i64 %876, %919
  %921 = add i64 %881, %920
  store i64 %885, i64* %15, align 8, !tbaa !1240
  %922 = add i64 %886, %921
  %923 = inttoptr i64 %922 to double*
  %924 = load double, double* %923
  %925 = fmul double %917, %924
  store double %925, double* %359, align 1, !tbaa !1246
  store i64 0, i64* %358, align 1, !tbaa !1246
  %926 = fadd double %915, %925
  store double %926, double* %363, align 1, !tbaa !1246
  store i64 0, i64* %362, align 1, !tbaa !1246
  %927 = inttoptr i64 %54 to double*
  store double %926, double* %927
  %928 = load double, double* %55, align 1
  %929 = inttoptr i64 %54 to double*
  %930 = load double, double* %929
  %931 = fdiv double %928, %930
  store double %931, double* %55, align 1, !tbaa !1246
  %932 = inttoptr i64 %52 to i32*
  %933 = load i32, i32* %932
  %934 = sext i32 %933 to i64
  %935 = shl nsw i64 %934, 3
  %936 = add i64 %935, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %937 = inttoptr i64 %936 to double*
  store double %931, double* %937
  %938 = inttoptr i64 %384 to i32*
  %939 = load i32, i32* %938
  %940 = add i32 %939, 1
  %941 = inttoptr i64 %384 to i32*
  store i32 %940, i32* %941
  %942 = add i64 %229, -12
  br label %block_415bf3

block_4159b1:                                     ; preds = %block_41596a
  %943 = add i32 %59, -2
  %944 = icmp eq i32 %943, 0
  %945 = select i1 %944, i64 10, i64 71
  %946 = add i64 %233, %945
  br i1 %944, label %block_4159bb, label %block_4159f8
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_411fb0_move(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_411fb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %10, align 8, !tbaa !1240
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20
  store i64 %19, i64* %11, align 8, !tbaa !1240
  %21 = load i64, i64* %5, align 8
  %22 = add i64 %18, -16
  %23 = inttoptr i64 %22 to i64*
  store i64 %21, i64* %23
  %24 = add i64 %18, -56
  store i64 %24, i64* %10, align 8, !tbaa !1240
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%sje_new_type* @sje_new to i64), i64* %9, align 8, !tbaa !1240
  store i64 4294967295, i64* %7, align 8, !tbaa !1240
  %31 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %32 = mul i32 %31, 12
  %33 = add i64 %18, -52
  %34 = inttoptr i64 %33 to i32*
  store i32 %32, i32* %34
  %35 = inttoptr i64 %33 to i32*
  %36 = load i32, i32* %35
  %37 = shl i32 %36, 1
  %38 = load i64, i64* %11, align 8
  %39 = add i64 %38, -40
  %40 = inttoptr i64 %39 to i32*
  store i32 %37, i32* %40
  %41 = inttoptr i64 %39 to i32*
  %42 = load i32, i32* %41
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %8, align 8, !tbaa !1240
  %44 = add i64 %1, 55536
  %45 = add i64 %1, 52
  %46 = load i64, i64* %10, align 8, !tbaa !1240
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48
  store i64 %47, i64* %10, align 8, !tbaa !1240
  %49 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %44, %struct.Memory* %2)
  %50 = load i64, i64* %3, align 8
  store i64 ptrtoint (%ijel_new_type* @ijel_new to i64), i64* %9, align 8, !tbaa !1240
  store i64 4294967295, i64* %7, align 8, !tbaa !1240
  %51 = load i64, i64* %11, align 8
  %52 = add i64 %51, -44
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %8, align 8, !tbaa !1240
  %56 = add i64 %50, 55484
  %57 = add i64 %50, 23
  %58 = load i64, i64* %10, align 8, !tbaa !1240
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %57, i64* %60
  store i64 %59, i64* %10, align 8, !tbaa !1240
  %61 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %56, %struct.Memory* %49)
  %62 = load i64, i64* %11, align 8
  %63 = add i64 %62, -24
  %64 = load i64, i64* %3, align 8
  %65 = add i64 %64, 7
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66
  %67 = bitcast %union.VectorReg* %16 to double*
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %69 = bitcast i64* %68 to double*
  br label %block_412002

block_41237d:                                     ; preds = %block_412373
  %70 = add i64 %195, 7
  %71 = inttoptr i64 %501 to i32*
  store i32 0, i32* %71
  br label %block_412384

block_4120f5:                                     ; preds = %block_4120eb
  store i64 ptrtoint (%cbc_new_type* @cbc_new to i64), i64* %4, align 8, !tbaa !1240
  %72 = sext i32 %401 to i64
  %73 = shl nsw i64 %72, 2
  %74 = add i64 %73, ptrtoint (%jjface_type* @jjface to i64)
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = inttoptr i64 %496 to i32*
  store i32 %76, i32* %77
  %78 = inttoptr i64 %497 to i32*
  %79 = load i32, i32* %78
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, 24
  %82 = add i64 %81, ptrtoint (%cbc_type* @cbc to i64)
  %83 = inttoptr i64 %492 to i32*
  %84 = load i32, i32* %83
  %85 = sext i32 %84 to i64
  store i64 %85, i64* %15, align 8, !tbaa !1240
  %86 = shl nsw i64 %85, 2
  %87 = add i64 %86, %82
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  %90 = inttoptr i64 %498 to i32*
  store i32 %89, i32* %90
  %91 = inttoptr i64 %497 to i32*
  %92 = load i32, i32* %91
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 6
  %95 = add i64 %94, ptrtoint (%xc_type* @xc to i64)
  %96 = inttoptr i64 %492 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %14, align 8, !tbaa !1240
  %99 = shl nsw i64 %98, 3
  %100 = add i64 %99, %95
  %101 = inttoptr i64 %100 to double*
  %102 = load double, double* %101
  %103 = inttoptr i64 %499 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  %106 = shl nsw i64 %105, 6
  %107 = add i64 %106, ptrtoint (%xc_new_type* @xc_new to i64)
  store i64 %98, i64* %13, align 8, !tbaa !1240
  %108 = add i64 %99, %107
  %109 = inttoptr i64 %108 to double*
  store double %102, double* %109
  %110 = inttoptr i64 %497 to i32*
  %111 = load i32, i32* %110
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 6
  %114 = add i64 %113, ptrtoint (%yc_type* @yc to i64)
  %115 = inttoptr i64 %492 to i32*
  %116 = load i32, i32* %115
  %117 = sext i32 %116 to i64
  store i64 %117, i64* %12, align 8, !tbaa !1240
  %118 = shl nsw i64 %117, 3
  %119 = add i64 %118, %114
  %120 = inttoptr i64 %119 to double*
  %121 = load double, double* %120
  %122 = inttoptr i64 %499 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  %125 = shl nsw i64 %124, 6
  %126 = add i64 %125, ptrtoint (%yc_new_type* @yc_new to i64)
  %127 = add i64 %118, %126
  %128 = inttoptr i64 %127 to double*
  store double %121, double* %128
  %129 = inttoptr i64 %497 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  %132 = shl nsw i64 %131, 6
  %133 = add i64 %132, ptrtoint (%zc_type* @zc to i64)
  %134 = inttoptr i64 %492 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = shl nsw i64 %136, 3
  %138 = add i64 %137, %133
  %139 = inttoptr i64 %138 to double*
  %140 = load double, double* %139
  store double %140, double* %67, align 1, !tbaa !1246
  store double 0.000000e+00, double* %69, align 1, !tbaa !1246
  %141 = inttoptr i64 %499 to i32*
  %142 = load i32, i32* %141
  %143 = sext i32 %142 to i64
  %144 = shl nsw i64 %143, 6
  %145 = add i64 %144, ptrtoint (%zc_new_type* @zc_new to i64)
  %146 = add i64 %137, %145
  %147 = inttoptr i64 %146 to double*
  store double %140, double* %147
  %148 = inttoptr i64 %498 to i32*
  %149 = load i32, i32* %148
  %150 = zext i32 %149 to i64
  store i64 %150, i64* %5, align 8, !tbaa !1240
  %151 = inttoptr i64 %499 to i32*
  %152 = load i32, i32* %151
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %153, 24
  %155 = load i64, i64* %4, align 8
  %156 = add i64 %154, %155
  %157 = inttoptr i64 %492 to i32*
  %158 = load i32, i32* %157
  %159 = sext i32 %158 to i64
  %160 = shl nsw i64 %159, 2
  %161 = add i64 %160, %156
  %162 = inttoptr i64 %161 to i32*
  store i32 %149, i32* %162
  %163 = inttoptr i64 %498 to i32*
  %164 = load i32, i32* %163
  %165 = icmp ne i32 %164, 2
  %166 = select i1 %165, i64 416, i64 271
  %167 = add i64 %411, %166
  br i1 %165, label %block_412295, label %block_412204

block_41267a:                                     ; preds = %block_41268a, %block_412560
  %168 = phi %struct.Memory* [ %363, %block_412560 ], [ %168, %block_41268a ]
  %169 = inttoptr i64 %365 to i32*
  %170 = load i32, i32* %169
  %171 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %172 = sub i32 %170, %171
  %173 = lshr i32 %172, 31
  %174 = lshr i32 %170, 31
  %175 = lshr i32 %171, 31
  %176 = xor i32 %175, %174
  %177 = xor i32 %173, %174
  %178 = add nuw nsw i32 %177, %176
  %179 = icmp eq i32 %178, 2
  %180 = icmp ne i32 %173, 0
  %181 = xor i1 %180, %179
  br i1 %181, label %block_41268a, label %block_4126b4

block_412373:                                     ; preds = %block_412448, %block_41236c
  %182 = phi i64 [ %233, %block_41236c ], [ %507, %block_412448 ]
  %183 = phi %struct.Memory* [ %399, %block_41236c ], [ %382, %block_412448 ]
  %184 = inttoptr i64 %500 to i32*
  %185 = load i32, i32* %184
  %186 = add i32 %185, -2
  %187 = lshr i32 %186, 31
  %188 = lshr i32 %185, 31
  %189 = xor i32 %187, %188
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = icmp ne i32 %187, 0
  %193 = xor i1 %192, %191
  %194 = select i1 %193, i64 10, i64 232
  %195 = add i64 %182, %194
  br i1 %193, label %block_41237d, label %block_4124f5.loopexit

block_412512:                                     ; preds = %block_4120eb
  store i64 125, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %4, align 8, !tbaa !1240
  %196 = load i64, i64* %11, align 8
  %197 = add i64 %196, -24
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198
  %200 = sext i32 %199 to i64
  %201 = mul nsw i64 %200, 1000
  %202 = add i64 %201, ptrtoint (%ta2_type* @ta2 to i64)
  store i64 %202, i64* %6, align 8, !tbaa !1240
  %203 = add i64 %196, -12
  %204 = inttoptr i64 %203 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  %207 = mul nsw i64 %206, 1000
  %208 = load i64, i64* %4, align 8
  %209 = add i64 %207, %208
  store i64 %202, i64* %9, align 8, !tbaa !1240
  store i64 %209, i64* %8, align 8, !tbaa !1240
  %210 = add i64 %411, 54366
  %211 = add i64 %411, 64
  %212 = load i64, i64* %10, align 8, !tbaa !1240
  %213 = add i64 %212, -8
  %214 = inttoptr i64 %213 to i64*
  store i64 %211, i64* %214
  store i64 %213, i64* %10, align 8, !tbaa !1240
  %215 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %210, %struct.Memory* %399)
  %216 = load i64, i64* %11, align 8
  %217 = add i64 %216, -24
  %218 = load i64, i64* %3, align 8
  %219 = inttoptr i64 %217 to i32*
  %220 = load i32, i32* %219
  %221 = add i32 %220, 1
  %222 = inttoptr i64 %217 to i32*
  store i32 %221, i32* %222
  %223 = add i64 %218, -1360
  br label %block_412002

block_4124ff:                                     ; preds = %block_412204, %block_4124fa
  %224 = phi i64 [ %754, %block_412204 ], [ %370, %block_4124fa ]
  %225 = phi i64 [ 623, %block_412204 ], [ 5, %block_4124fa ]
  %226 = phi %struct.Memory* [ %399, %block_412204 ], [ %369, %block_4124fa ]
  %227 = add i64 %224, %225
  %228 = inttoptr i64 %492 to i32*
  %229 = load i32, i32* %228
  %230 = add i32 %229, 1
  %231 = inttoptr i64 %492 to i32*
  store i32 %230, i32* %231
  %232 = add i64 %227, -1044
  br label %block_4120eb

block_41236c:                                     ; preds = %block_412362
  %233 = add i64 %376, 7
  %234 = inttoptr i64 %500 to i32*
  store i32 0, i32* %234
  br label %block_412373

block_41246a:                                     ; preds = %block_412460
  %235 = inttoptr i64 %499 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  %238 = mul nsw i64 %237, 96
  %239 = add i64 %238, ptrtoint (%sje_new_type* @sje_new to i64)
  %240 = inttoptr i64 %492 to i32*
  %241 = load i32, i32* %240
  %242 = sext i32 %241 to i64
  %243 = shl nsw i64 %242, 4
  %244 = add i64 %243, %239
  %245 = inttoptr i64 %244 to i32*
  store i32 -1, i32* %245
  %246 = inttoptr i64 %499 to i32*
  %247 = load i32, i32* %246
  %248 = sext i32 %247 to i64
  %249 = mul nsw i64 %248, 96
  %250 = add i64 %249, ptrtoint (%sje_new_type* @sje_new to i64)
  %251 = inttoptr i64 %492 to i32*
  %252 = load i32, i32* %251
  %253 = sext i32 %252 to i64
  %254 = shl nsw i64 %253, 4
  %255 = add i64 %254, %250
  %256 = or i64 %255, 8
  %257 = inttoptr i64 %256 to i32*
  store i32 -1, i32* %257
  %258 = inttoptr i64 %499 to i32*
  %259 = load i32, i32* %258
  %260 = sext i32 %259 to i64
  %261 = mul nsw i64 %260, 96
  %262 = add i64 %261, ptrtoint (%sje_new_type* @sje_new to i64)
  %263 = inttoptr i64 %492 to i32*
  %264 = load i32, i32* %263
  %265 = sext i32 %264 to i64
  %266 = shl nsw i64 %265, 4
  %267 = add i64 %266, %262
  %268 = or i64 %267, 4
  %269 = inttoptr i64 %268 to i32*
  store i32 -1, i32* %269
  %270 = inttoptr i64 %499 to i32*
  %271 = load i32, i32* %270
  %272 = sext i32 %271 to i64
  %273 = mul nsw i64 %272, 96
  %274 = add i64 %273, ptrtoint (%sje_new_type* @sje_new to i64)
  %275 = inttoptr i64 %492 to i32*
  %276 = load i32, i32* %275
  %277 = sext i32 %276 to i64
  %278 = shl nsw i64 %277, 4
  %279 = add i64 %278, %274
  %280 = or i64 %279, 12
  %281 = add i64 %373, 134
  %282 = inttoptr i64 %280 to i32*
  store i32 -1, i32* %282
  br label %block_4124f5

block_412560:                                     ; preds = %block_412002
  store i64 ptrtoint (%xc_type* @xc to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%xc_new_type* @xc_new to i64), i64* %8, align 8, !tbaa !1240
  %283 = shl i32 %762, 3
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %7, align 8, !tbaa !1240
  %285 = add i64 %775, 54288
  %286 = add i64 %775, 37
  %287 = load i64, i64* %10, align 8, !tbaa !1240
  %288 = add i64 %287, -8
  %289 = inttoptr i64 %288 to i64*
  store i64 %286, i64* %289
  store i64 %288, i64* %10, align 8, !tbaa !1240
  %290 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %285, %struct.Memory* %758)
  %291 = load i64, i64* %3, align 8
  store i64 ptrtoint (%yc_type* @yc to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%yc_new_type* @yc_new to i64), i64* %8, align 8, !tbaa !1240
  %292 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %293 = shl i32 %292, 3
  %294 = zext i32 %293 to i64
  store i64 %294, i64* %7, align 8, !tbaa !1240
  %295 = add i64 %291, 54251
  %296 = add i64 %291, 37
  %297 = load i64, i64* %10, align 8, !tbaa !1240
  %298 = add i64 %297, -8
  %299 = inttoptr i64 %298 to i64*
  store i64 %296, i64* %299
  store i64 %298, i64* %10, align 8, !tbaa !1240
  %300 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %295, %struct.Memory* %290)
  %301 = load i64, i64* %3, align 8
  store i64 ptrtoint (%zc_type* @zc to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%zc_new_type* @zc_new to i64), i64* %8, align 8, !tbaa !1240
  %302 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %303 = shl i32 %302, 3
  %304 = zext i32 %303 to i64
  store i64 %304, i64* %7, align 8, !tbaa !1240
  %305 = add i64 %301, 54214
  %306 = add i64 %301, 37
  %307 = load i64, i64* %10, align 8, !tbaa !1240
  %308 = add i64 %307, -8
  %309 = inttoptr i64 %308 to i64*
  store i64 %306, i64* %309
  store i64 %308, i64* %10, align 8, !tbaa !1240
  %310 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %305, %struct.Memory* %300)
  %311 = load i64, i64* %3, align 8
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_new_type* @sje_new to i64), i64* %8, align 8, !tbaa !1240
  %312 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %313 = sext i32 %312 to i64
  %314 = mul nsw i64 %313, 24
  %315 = and i64 %314, 4294967288
  store i64 %315, i64* %7, align 8, !tbaa !1240
  %316 = add i64 %311, 54097
  %317 = add i64 %311, 33
  %318 = load i64, i64* %10, align 8, !tbaa !1240
  %319 = add i64 %318, -8
  %320 = inttoptr i64 %319 to i64*
  store i64 %317, i64* %320
  store i64 %319, i64* %10, align 8, !tbaa !1240
  %321 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %316, %struct.Memory* %310)
  %322 = load i64, i64* %3, align 8
  store i64 ptrtoint (%ijel_type* @ijel to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%ijel_new_type* @ijel_new to i64), i64* %8, align 8, !tbaa !1240
  %323 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %324 = sext i32 %323 to i64
  %325 = mul nsw i64 %324, 12
  %326 = and i64 %325, 4294967292
  store i64 %326, i64* %7, align 8, !tbaa !1240
  %327 = add i64 %322, 54064
  %328 = add i64 %322, 33
  %329 = load i64, i64* %10, align 8, !tbaa !1240
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %328, i64* %331
  store i64 %330, i64* %10, align 8, !tbaa !1240
  %332 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %327, %struct.Memory* %321)
  %333 = load i64, i64* %3, align 8
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%cbc_new_type* @cbc_new to i64), i64* %8, align 8, !tbaa !1240
  %334 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %335 = sext i32 %334 to i64
  %336 = mul nsw i64 %335, 6
  %337 = and i64 %336, 4294967294
  store i64 %337, i64* %7, align 8, !tbaa !1240
  %338 = add i64 %333, 54031
  %339 = add i64 %333, 33
  %340 = load i64, i64* %10, align 8, !tbaa !1240
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %339, i64* %342
  store i64 %341, i64* %10, align 8, !tbaa !1240
  %343 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %338, %struct.Memory* %332)
  %344 = load i64, i64* %3, align 8
  store i64 ptrtoint (%tree_type* @tree to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%treenew_type* @treenew to i64), i64* %8, align 8, !tbaa !1240
  %345 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %7, align 8, !tbaa !1240
  %347 = add i64 %344, 53998
  %348 = add i64 %344, 32
  %349 = load i64, i64* %10, align 8, !tbaa !1240
  %350 = add i64 %349, -8
  %351 = inttoptr i64 %350 to i64*
  store i64 %348, i64* %351
  store i64 %350, i64* %10, align 8, !tbaa !1240
  %352 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %347, %struct.Memory* %343)
  %353 = load i64, i64* %3, align 8
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%ta2_type* @ta2 to i64), i64* %8, align 8, !tbaa !1240
  %354 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %355 = sext i32 %354 to i64
  %356 = mul nsw i64 %355, 125
  %357 = and i64 %356, 4294967295
  store i64 %357, i64* %7, align 8, !tbaa !1240
  %358 = add i64 %353, 54046
  %359 = add i64 %353, 33
  %360 = load i64, i64* %10, align 8, !tbaa !1240
  %361 = add i64 %360, -8
  %362 = inttoptr i64 %361 to i64*
  store i64 %359, i64* %362
  store i64 %361, i64* %10, align 8, !tbaa !1240
  %363 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %358, %struct.Memory* %352)
  %364 = load i64, i64* %11, align 8
  %365 = add i64 %364, -24
  %366 = inttoptr i64 %365 to i32*
  store i32 0, i32* %366
  br label %block_41267a

block_4124fa:                                     ; preds = %block_41229f, %block_4124f5
  %367 = phi i64 [ %700, %block_41229f ], [ %380, %block_4124f5 ]
  %368 = phi i64 [ 413, %block_41229f ], [ 5, %block_4124f5 ]
  %369 = phi %struct.Memory* [ %399, %block_41229f ], [ %379, %block_4124f5 ]
  %370 = add i64 %367, %368
  br label %block_4124ff

block_412460:                                     ; preds = %block_412362
  %371 = icmp ne i32 %164, 0
  %372 = select i1 %371, i64 144, i64 10
  %373 = add i64 %376, %372
  br i1 %371, label %block_4124f5, label %block_41246a

block_412362:                                     ; preds = %block_412295
  %374 = icmp ne i32 %164, 3
  %375 = select i1 %374, i64 254, i64 10
  %376 = add i64 %397, %375
  br i1 %374, label %block_412460, label %block_41236c

block_4124f5.loopexit:                            ; preds = %block_412373
  br label %block_4124f5

block_4124f5:                                     ; preds = %block_4124f5.loopexit, %block_412460, %block_41246a
  %377 = phi i64 [ %373, %block_412460 ], [ %281, %block_41246a ], [ %195, %block_4124f5.loopexit ]
  %378 = phi i64 [ 5, %block_412460 ], [ 5, %block_41246a ], [ 154, %block_4124f5.loopexit ]
  %379 = phi %struct.Memory* [ %399, %block_412460 ], [ %399, %block_41246a ], [ %183, %block_4124f5.loopexit ]
  %380 = add i64 %377, %378
  br label %block_4124fa

block_412384:                                     ; preds = %block_41238e, %block_41237d
  %381 = phi i64 [ %70, %block_41237d ], [ %616, %block_41238e ]
  %382 = phi %struct.Memory* [ %183, %block_41237d ], [ %382, %block_41238e ]
  %383 = inttoptr i64 %501 to i32*
  %384 = load i32, i32* %383
  %385 = add i32 %384, -2
  %386 = lshr i32 %385, 31
  %387 = lshr i32 %384, 31
  %388 = xor i32 %386, %387
  %389 = add nuw nsw i32 %388, %387
  %390 = icmp eq i32 %389, 2
  %391 = icmp ne i32 %386, 0
  %392 = xor i1 %391, %390
  %393 = select i1 %392, i64 10, i64 196
  %394 = add i64 %381, %393
  br i1 %392, label %block_41238e, label %block_412448

block_412295:                                     ; preds = %block_4120f5
  %395 = icmp ne i32 %164, 1
  %396 = select i1 %395, i64 205, i64 10
  %397 = add i64 %167, %396
  br i1 %395, label %block_412362, label %block_41229f

block_4120eb:                                     ; preds = %block_412012, %block_4124ff
  %398 = phi i64 [ %494, %block_412012 ], [ %232, %block_4124ff ]
  %399 = phi %struct.Memory* [ %490, %block_412012 ], [ %226, %block_4124ff ]
  %400 = inttoptr i64 %492 to i32*
  %401 = load i32, i32* %400
  %402 = add i32 %401, -6
  %403 = lshr i32 %402, 31
  %404 = lshr i32 %401, 31
  %405 = xor i32 %403, %404
  %406 = add nuw nsw i32 %405, %404
  %407 = icmp eq i32 %406, 2
  %408 = icmp ne i32 %403, 0
  %409 = xor i1 %408, %407
  %410 = select i1 %409, i64 10, i64 1063
  %411 = add i64 %398, %410
  br i1 %409, label %block_4120f5, label %block_412512

block_412012:                                     ; preds = %block_412002
  store i64 8, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%xc_type* @xc to i64), i64* %4, align 8, !tbaa !1240
  %412 = sext i32 %761 to i64
  %413 = shl nsw i64 %412, 2
  %414 = add i64 %413, ptrtoint (%mt_to_id_type* @mt_to_id to i64)
  %415 = inttoptr i64 %414 to i32*
  %416 = load i32, i32* %415
  %417 = add i64 %757, -12
  %418 = inttoptr i64 %417 to i32*
  store i32 %416, i32* %418
  %419 = inttoptr i64 %417 to i32*
  %420 = load i32, i32* %419
  %421 = sext i32 %420 to i64
  %422 = shl nsw i64 %421, 2
  %423 = add i64 %422, ptrtoint (%tree_type* @tree to i64)
  %424 = inttoptr i64 %423 to i32*
  %425 = load i32, i32* %424
  %426 = inttoptr i64 %759 to i32*
  %427 = load i32, i32* %426
  %428 = sext i32 %427 to i64
  %429 = shl nsw i64 %428, 2
  %430 = add i64 %429, ptrtoint (%treenew_type* @treenew to i64)
  %431 = inttoptr i64 %430 to i32*
  store i32 %425, i32* %431
  %432 = inttoptr i64 %759 to i32*
  %433 = load i32, i32* %432
  %434 = sext i32 %433 to i64
  %435 = shl nsw i64 %434, 6
  %436 = add i64 %435, ptrtoint (%xc_new_type* @xc_new to i64)
  store i64 %436, i64* %6, align 8, !tbaa !1240
  %437 = load i64, i64* %11, align 8
  %438 = add i64 %437, -12
  %439 = inttoptr i64 %438 to i32*
  %440 = load i32, i32* %439
  %441 = sext i32 %440 to i64
  %442 = shl nsw i64 %441, 6
  %443 = load i64, i64* %4, align 8
  %444 = add i64 %442, %443
  store i64 %436, i64* %9, align 8, !tbaa !1240
  store i64 %444, i64* %8, align 8, !tbaa !1240
  %445 = add i64 %775, 55646
  %446 = add i64 %775, 94
  %447 = load i64, i64* %10, align 8, !tbaa !1240
  %448 = add i64 %447, -8
  %449 = inttoptr i64 %448 to i64*
  store i64 %446, i64* %449
  store i64 %448, i64* %10, align 8, !tbaa !1240
  %450 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %445, %struct.Memory* %758)
  %451 = load i64, i64* %3, align 8
  store i64 8, i64* %7, align 8, !tbaa !1240
  %452 = load i64, i64* %11, align 8
  %453 = add i64 %452, -24
  %454 = inttoptr i64 %453 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  %457 = shl nsw i64 %456, 6
  %458 = add i64 %457, ptrtoint (%yc_new_type* @yc_new to i64)
  store i64 %458, i64* %6, align 8, !tbaa !1240
  %459 = add i64 %452, -12
  %460 = inttoptr i64 %459 to i32*
  %461 = load i32, i32* %460
  %462 = sext i32 %461 to i64
  %463 = shl nsw i64 %462, 6
  %464 = add i64 %463, ptrtoint (%yc_type* @yc to i64)
  store i64 %458, i64* %9, align 8, !tbaa !1240
  store i64 %464, i64* %8, align 8, !tbaa !1240
  %465 = add i64 %451, 55552
  %466 = add i64 %451, 58
  %467 = load i64, i64* %10, align 8, !tbaa !1240
  %468 = add i64 %467, -8
  %469 = inttoptr i64 %468 to i64*
  store i64 %466, i64* %469
  store i64 %468, i64* %10, align 8, !tbaa !1240
  %470 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %465, %struct.Memory* %450)
  %471 = load i64, i64* %3, align 8
  store i64 8, i64* %7, align 8, !tbaa !1240
  %472 = load i64, i64* %11, align 8
  %473 = add i64 %472, -24
  %474 = inttoptr i64 %473 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  %477 = shl nsw i64 %476, 6
  %478 = add i64 %477, ptrtoint (%zc_new_type* @zc_new to i64)
  store i64 %478, i64* %6, align 8, !tbaa !1240
  %479 = add i64 %472, -12
  %480 = inttoptr i64 %479 to i32*
  %481 = load i32, i32* %480
  %482 = sext i32 %481 to i64
  %483 = shl nsw i64 %482, 6
  %484 = add i64 %483, ptrtoint (%zc_type* @zc to i64)
  store i64 %478, i64* %9, align 8, !tbaa !1240
  store i64 %484, i64* %8, align 8, !tbaa !1240
  %485 = add i64 %471, 55494
  %486 = add i64 %471, 58
  %487 = load i64, i64* %10, align 8, !tbaa !1240
  %488 = add i64 %487, -8
  %489 = inttoptr i64 %488 to i64*
  store i64 %486, i64* %489
  store i64 %488, i64* %10, align 8, !tbaa !1240
  %490 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %485, %struct.Memory* %470)
  %491 = load i64, i64* %11, align 8
  %492 = add i64 %491, -16
  %493 = load i64, i64* %3, align 8
  %494 = add i64 %493, 7
  %495 = inttoptr i64 %492 to i32*
  store i32 0, i32* %495
  %496 = add i64 %491, -20
  %497 = add i64 %491, -12
  %498 = add i64 %491, -48
  %499 = add i64 %491, -24
  %500 = add i64 %491, -36
  %501 = add i64 %491, -32
  %502 = add i64 %491, -28
  br label %block_4120eb

block_412448:                                     ; preds = %block_412384
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = add i32 %504, 1
  %506 = inttoptr i64 %500 to i32*
  store i32 %505, i32* %506
  %507 = add i64 %394, -213
  br label %block_412373

block_4126b4:                                     ; preds = %block_41267a
  %508 = zext i32 %170 to i64
  store i64 %508, i64* %4, align 8, !tbaa !1240
  %509 = load i64, i64* %10, align 8
  %510 = add i64 %509, 40
  %511 = icmp ugt i64 %509, -41
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %25, align 1, !tbaa !1248
  %513 = trunc i64 %510 to i32
  %514 = and i32 %513, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #11
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %26, align 1, !tbaa !1261
  %519 = xor i64 %510, %509
  %520 = lshr i64 %519, 4
  %521 = trunc i64 %520 to i8
  %522 = and i8 %521, 1
  store i8 %522, i8* %27, align 1, !tbaa !1262
  %523 = icmp eq i64 %510, 0
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %28, align 1, !tbaa !1263
  %525 = lshr i64 %510, 63
  %526 = trunc i64 %525 to i8
  store i8 %526, i8* %29, align 1, !tbaa !1264
  %527 = lshr i64 %509, 63
  %528 = xor i64 %525, %527
  %529 = add nuw nsw i64 %528, %525
  %530 = icmp eq i64 %529, 2
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %30, align 1, !tbaa !1265
  %532 = add i64 %509, 48
  %533 = inttoptr i64 %510 to i64*
  %534 = load i64, i64* %533
  store i64 %534, i64* %5, align 8, !tbaa !1240
  %535 = add i64 %509, 56
  %536 = inttoptr i64 %532 to i64*
  %537 = load i64, i64* %536
  store i64 %537, i64* %11, align 8, !tbaa !1240
  %538 = inttoptr i64 %535 to i64*
  %539 = load i64, i64* %538
  store i64 %539, i64* %3, align 8, !tbaa !1240
  %540 = add i64 %509, 64
  store i64 %540, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %168

block_41238e:                                     ; preds = %block_412384
  %541 = inttoptr i64 %497 to i32*
  %542 = load i32, i32* %541
  %543 = sext i32 %542 to i64
  %544 = mul nsw i64 %543, 96
  %545 = add i64 %544, ptrtoint (%sje_type* @sje to i64)
  %546 = inttoptr i64 %492 to i32*
  %547 = load i32, i32* %546
  %548 = sext i32 %547 to i64
  %549 = shl nsw i64 %548, 4
  %550 = add i64 %549, %545
  %551 = inttoptr i64 %500 to i32*
  %552 = load i32, i32* %551
  %553 = sext i32 %552 to i64
  %554 = shl nsw i64 %553, 3
  %555 = add i64 %554, %550
  %556 = sext i32 %384 to i64
  %557 = shl nsw i64 %556, 2
  %558 = add i64 %557, %555
  %559 = inttoptr i64 %558 to i32*
  %560 = load i32, i32* %559
  %561 = inttoptr i64 %502 to i32*
  store i32 %560, i32* %561
  %562 = inttoptr i64 %499 to i32*
  %563 = load i32, i32* %562
  %564 = sext i32 %563 to i64
  %565 = mul nsw i64 %564, 48
  %566 = add i64 %565, ptrtoint (%ijel_new_type* @ijel_new to i64)
  %567 = inttoptr i64 %492 to i32*
  %568 = load i32, i32* %567
  %569 = sext i32 %568 to i64
  %570 = shl nsw i64 %569, 3
  %571 = add i64 %570, %566
  %572 = inttoptr i64 %571 to i32*
  store i32 0, i32* %572
  %573 = inttoptr i64 %499 to i32*
  %574 = load i32, i32* %573
  %575 = sext i32 %574 to i64
  %576 = mul nsw i64 %575, 48
  %577 = inttoptr i64 %492 to i32*
  %578 = load i32, i32* %577
  %579 = sext i32 %578 to i64
  %580 = shl nsw i64 %579, 3
  %581 = add i64 %576, add (i64 ptrtoint (%ijel_new_type* @ijel_new to i64), i64 4)
  %582 = add i64 %581, %580
  %583 = inttoptr i64 %582 to i32*
  store i32 0, i32* %583
  %584 = inttoptr i64 %502 to i32*
  %585 = load i32, i32* %584
  %586 = sext i32 %585 to i64
  %587 = shl nsw i64 %586, 2
  %588 = add i64 %587, ptrtoint (%id_to_mt_type* @id_to_mt to i64)
  %589 = inttoptr i64 %588 to i32*
  %590 = load i32, i32* %589
  %591 = inttoptr i64 %499 to i32*
  %592 = load i32, i32* %591
  %593 = sext i32 %592 to i64
  %594 = mul nsw i64 %593, 96
  %595 = add i64 %594, ptrtoint (%sje_new_type* @sje_new to i64)
  %596 = inttoptr i64 %492 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  %599 = shl nsw i64 %598, 4
  %600 = add i64 %599, %595
  %601 = inttoptr i64 %500 to i32*
  %602 = load i32, i32* %601
  %603 = sext i32 %602 to i64
  %604 = shl nsw i64 %603, 3
  %605 = add i64 %604, %600
  %606 = inttoptr i64 %501 to i32*
  %607 = load i32, i32* %606
  %608 = sext i32 %607 to i64
  %609 = shl nsw i64 %608, 2
  %610 = add i64 %609, %605
  %611 = inttoptr i64 %610 to i32*
  store i32 %590, i32* %611
  %612 = inttoptr i64 %501 to i32*
  %613 = load i32, i32* %612
  %614 = add i32 %613, 1
  %615 = inttoptr i64 %501 to i32*
  store i32 %614, i32* %615
  %616 = add i64 %394, -10
  br label %block_412384

block_41268a:                                     ; preds = %block_41267a
  %617 = sext i32 %170 to i64
  %618 = shl nsw i64 %617, 2
  %619 = add i64 %618, ptrtoint (%mt_to_id_type* @mt_to_id to i64)
  %620 = inttoptr i64 %619 to i32*
  store i32 %170, i32* %620
  %621 = inttoptr i64 %365 to i32*
  %622 = load i32, i32* %621
  %623 = sext i32 %622 to i64
  store i64 %623, i64* %6, align 8, !tbaa !1240
  %624 = shl nsw i64 %623, 2
  %625 = add i64 %624, ptrtoint (%id_to_mt_type* @id_to_mt to i64)
  %626 = inttoptr i64 %625 to i32*
  store i32 %622, i32* %626
  %627 = inttoptr i64 %365 to i32*
  %628 = load i32, i32* %627
  %629 = add i32 %628, 1
  %630 = inttoptr i64 %365 to i32*
  store i32 %629, i32* %630
  br label %block_41267a

block_41229f:                                     ; preds = %block_412295
  %631 = inttoptr i64 %497 to i32*
  %632 = load i32, i32* %631
  %633 = sext i32 %632 to i64
  %634 = mul nsw i64 %633, 96
  %635 = add i64 %634, ptrtoint (%sje_type* @sje to i64)
  %636 = inttoptr i64 %492 to i32*
  %637 = load i32, i32* %636
  %638 = sext i32 %637 to i64
  %639 = shl nsw i64 %638, 4
  %640 = add i64 %639, %635
  %641 = inttoptr i64 %640 to i32*
  %642 = load i32, i32* %641
  %643 = inttoptr i64 %502 to i32*
  store i32 %642, i32* %643
  %644 = inttoptr i64 %497 to i32*
  %645 = load i32, i32* %644
  %646 = sext i32 %645 to i64
  %647 = mul nsw i64 %646, 48
  %648 = add i64 %647, ptrtoint (%ijel_type* @ijel to i64)
  %649 = inttoptr i64 %492 to i32*
  %650 = load i32, i32* %649
  %651 = sext i32 %650 to i64
  %652 = shl nsw i64 %651, 3
  %653 = add i64 %652, %648
  %654 = inttoptr i64 %653 to i32*
  %655 = load i32, i32* %654
  %656 = inttoptr i64 %499 to i32*
  %657 = load i32, i32* %656
  %658 = sext i32 %657 to i64
  %659 = mul nsw i64 %658, 48
  %660 = add i64 %659, ptrtoint (%ijel_new_type* @ijel_new to i64)
  %661 = add i64 %652, %660
  %662 = inttoptr i64 %661 to i32*
  store i32 %655, i32* %662
  %663 = inttoptr i64 %497 to i32*
  %664 = load i32, i32* %663
  %665 = sext i32 %664 to i64
  %666 = mul nsw i64 %665, 48
  %667 = inttoptr i64 %492 to i32*
  %668 = load i32, i32* %667
  %669 = sext i32 %668 to i64
  %670 = shl nsw i64 %669, 3
  %671 = add i64 %666, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %672 = add i64 %671, %670
  %673 = inttoptr i64 %672 to i32*
  %674 = load i32, i32* %673
  %675 = inttoptr i64 %499 to i32*
  %676 = load i32, i32* %675
  %677 = sext i32 %676 to i64
  %678 = mul nsw i64 %677, 48
  %679 = add i64 %678, add (i64 ptrtoint (%ijel_new_type* @ijel_new to i64), i64 4)
  %680 = add i64 %679, %670
  %681 = inttoptr i64 %680 to i32*
  store i32 %674, i32* %681
  %682 = inttoptr i64 %502 to i32*
  %683 = load i32, i32* %682
  %684 = sext i32 %683 to i64
  %685 = shl nsw i64 %684, 2
  %686 = add i64 %685, ptrtoint (%id_to_mt_type* @id_to_mt to i64)
  %687 = inttoptr i64 %686 to i32*
  %688 = load i32, i32* %687
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %12, align 8, !tbaa !1240
  %690 = inttoptr i64 %499 to i32*
  %691 = load i32, i32* %690
  %692 = sext i32 %691 to i64
  %693 = mul nsw i64 %692, 96
  %694 = add i64 %693, ptrtoint (%sje_new_type* @sje_new to i64)
  %695 = inttoptr i64 %492 to i32*
  %696 = load i32, i32* %695
  %697 = sext i32 %696 to i64
  %698 = shl nsw i64 %697, 4
  %699 = add i64 %698, %694
  %700 = add i64 %397, 190
  %701 = inttoptr i64 %699 to i32*
  store i32 %688, i32* %701
  br label %block_4124fa

block_412204:                                     ; preds = %block_4120f5
  %702 = inttoptr i64 %497 to i32*
  %703 = load i32, i32* %702
  %704 = sext i32 %703 to i64
  %705 = mul nsw i64 %704, 96
  %706 = add i64 %705, ptrtoint (%sje_type* @sje to i64)
  %707 = inttoptr i64 %492 to i32*
  %708 = load i32, i32* %707
  %709 = sext i32 %708 to i64
  %710 = shl nsw i64 %709, 4
  %711 = add i64 %710, %706
  %712 = inttoptr i64 %711 to i32*
  %713 = load i32, i32* %712
  %714 = inttoptr i64 %502 to i32*
  store i32 %713, i32* %714
  %715 = inttoptr i64 %499 to i32*
  %716 = load i32, i32* %715
  %717 = sext i32 %716 to i64
  %718 = mul nsw i64 %717, 48
  %719 = add i64 %718, ptrtoint (%ijel_new_type* @ijel_new to i64)
  %720 = inttoptr i64 %492 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = shl nsw i64 %722, 3
  %724 = add i64 %723, %719
  %725 = inttoptr i64 %724 to i32*
  store i32 0, i32* %725
  %726 = inttoptr i64 %499 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  %729 = mul nsw i64 %728, 48
  %730 = inttoptr i64 %492 to i32*
  %731 = load i32, i32* %730
  %732 = sext i32 %731 to i64
  %733 = shl nsw i64 %732, 3
  %734 = add i64 %729, add (i64 ptrtoint (%ijel_new_type* @ijel_new to i64), i64 4)
  %735 = add i64 %734, %733
  %736 = inttoptr i64 %735 to i32*
  store i32 0, i32* %736
  %737 = inttoptr i64 %502 to i32*
  %738 = load i32, i32* %737
  %739 = sext i32 %738 to i64
  %740 = shl nsw i64 %739, 2
  %741 = add i64 %740, ptrtoint (%id_to_mt_type* @id_to_mt to i64)
  %742 = inttoptr i64 %741 to i32*
  %743 = load i32, i32* %742
  %744 = inttoptr i64 %499 to i32*
  %745 = load i32, i32* %744
  %746 = sext i32 %745 to i64
  %747 = mul nsw i64 %746, 96
  %748 = add i64 %747, ptrtoint (%sje_new_type* @sje_new to i64)
  %749 = inttoptr i64 %492 to i32*
  %750 = load i32, i32* %749
  %751 = sext i32 %750 to i64
  %752 = shl nsw i64 %751, 4
  %753 = add i64 %752, %748
  %754 = add i64 %167, 140
  %755 = inttoptr i64 %753 to i32*
  store i32 %743, i32* %755
  br label %block_4124ff

block_412002:                                     ; preds = %block_412512, %block_411fb0
  %756 = phi i64 [ %65, %block_411fb0 ], [ %223, %block_412512 ]
  %757 = phi i64 [ %62, %block_411fb0 ], [ %216, %block_412512 ]
  %758 = phi %struct.Memory* [ %61, %block_411fb0 ], [ %215, %block_412512 ]
  %759 = add i64 %757, -24
  %760 = inttoptr i64 %759 to i32*
  %761 = load i32, i32* %760
  %762 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %763 = sub i32 %761, %762
  %764 = lshr i32 %763, 31
  %765 = trunc i32 %764 to i8
  %766 = lshr i32 %761, 31
  %767 = lshr i32 %762, 31
  %768 = xor i32 %767, %766
  %769 = xor i32 %764, %766
  %770 = add nuw nsw i32 %769, %768
  %771 = icmp eq i32 %770, 2
  %772 = icmp ne i8 %765, 0
  %773 = xor i1 %772, %771
  %774 = select i1 %773, i64 16, i64 1374
  %775 = add i64 %756, %774
  br i1 %773, label %block_412012, label %block_412560
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_416720_vranlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_416720:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %11, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %20, -24
  store i64 %23, i64* %11, align 8, !tbaa !1240
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1536) to double*)
  %31 = bitcast %union.VectorReg* %14 to double*
  store double %30, double* %31, align 1, !tbaa !1246
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = bitcast %union.VectorReg* %15 to i8*
  %35 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1544) to double*)
  %36 = bitcast %union.VectorReg* %15 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %38 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1528) to double*)
  %39 = bitcast %union.VectorReg* %16 to double*
  store double %38, double* %39, align 1, !tbaa !1246
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !1246
  %42 = bitcast %union.VectorReg* %17 to i8*
  %43 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1520) to double*)
  %44 = bitcast %union.VectorReg* %17 to double*
  store double %43, double* %44, align 1, !tbaa !1246
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %46 = bitcast i64* %45 to double*
  store double 0.000000e+00, double* %46, align 1, !tbaa !1246
  %47 = add i64 %20, -12
  %48 = load i32, i32* %5, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %20, -24
  %51 = load i64, i64* %9, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %20, -32
  %54 = bitcast [32 x %union.VectorReg]* %13 to double*
  %55 = load double, double* %54, align 1
  %56 = inttoptr i64 %53 to double*
  store double %55, double* %56
  %57 = add i64 %20, -40
  %58 = load i64, i64* %8, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %59
  %60 = add i64 %20, -48
  %61 = inttoptr i64 %60 to double*
  store double %35, double* %61
  %62 = add i64 %20, -56
  %63 = inttoptr i64 %62 to double*
  store double %43, double* %63
  %64 = add i64 %20, -64
  %65 = inttoptr i64 %64 to double*
  store double %30, double* %65
  %66 = load i64, i64* %12, align 8
  %67 = add i64 %66, -64
  %68 = inttoptr i64 %67 to double*
  store double %38, double* %68
  %69 = add i64 %66, -24
  %70 = inttoptr i64 %69 to double*
  %71 = load double, double* %70
  %72 = fmul double %35, %71
  store double %72, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %73 = add i64 %66, -72
  %74 = inttoptr i64 %73 to double*
  store double %72, double* %74
  %75 = inttoptr i64 %73 to double*
  %76 = load double, double* %75
  %77 = tail call double @llvm.trunc.f64(double %76) #11
  %78 = tail call double @llvm.fabs.f64(double %77) #11
  %79 = fcmp ogt double %78, 0x41DFFFFFFFC00000
  %80 = fptosi double %77 to i32
  %81 = zext i32 %80 to i64
  %82 = select i1 %79, i64 2147483648, i64 %81
  store i64 %82, i64* %10, align 8, !tbaa !1240
  %83 = trunc i64 %82 to i32
  %84 = sitofp i32 %83 to double
  %85 = add i64 %66, -104
  %86 = inttoptr i64 %85 to double*
  store double %84, double* %86
  %87 = inttoptr i64 %69 to double*
  %88 = load double, double* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast i64* %89 to double*
  %91 = load double, double* %31, align 1
  %92 = inttoptr i64 %85 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  store double %94, double* %31, align 1, !tbaa !1246
  store i64 0, i64* %32, align 1, !tbaa !1246
  %95 = fsub double %88, %94
  store double %95, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %89, align 1, !tbaa !1246
  %96 = add i64 %66, -112
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %66, -140
  %99 = inttoptr i64 %98 to i32*
  store i32 0, i32* %99
  %100 = add i64 %66, -4
  %101 = add i64 %66, -16
  %102 = bitcast %union.VectorReg* %17 to i32*
  %103 = getelementptr inbounds i8, i8* %42, i64 4
  %104 = bitcast i8* %103 to i32*
  %105 = bitcast i64* %45 to i32*
  %106 = getelementptr inbounds i8, i8* %42, i64 12
  %107 = bitcast i8* %106 to i32*
  %108 = add i64 %66, -120
  %109 = bitcast %union.VectorReg* %18 to i8*
  %110 = bitcast %union.VectorReg* %18 to i32*
  %111 = getelementptr inbounds i8, i8* %109, i64 4
  %112 = bitcast i8* %111 to i32*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast %union.VectorReg* %18 to double*
  %115 = add i64 %66, -128
  %116 = add i64 %66, -80
  %117 = add i64 %66, -136
  %118 = add i64 %66, -88
  %119 = bitcast [32 x %union.VectorReg]* %13 to <2 x i32>*
  %120 = bitcast %union.VectorReg* %15 to i32*
  %121 = getelementptr inbounds i8, i8* %34, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = add i64 %66, -96
  %124 = add i64 %66, -32
  br label %block_4167a1

block_4168c1:                                     ; preds = %block_4167a1
  %125 = zext i32 %280 to i64
  store i64 %125, i64* %6, align 8, !tbaa !1240
  %126 = load i64, i64* %11, align 8
  %127 = add i64 %126, 16
  %128 = icmp ugt i64 %126, -17
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %24, align 1, !tbaa !1248
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #11
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !1261
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %26, align 1, !tbaa !1262
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !1263
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !1264
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %29, align 1, !tbaa !1265
  %150 = add i64 %126, 24
  %151 = inttoptr i64 %127 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %12, align 8, !tbaa !1240
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %3, align 8, !tbaa !1240
  %155 = add i64 %126, 32
  store i64 %155, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %278

block_4167b0:                                     ; preds = %block_4167a1
  %156 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1520) to double*)
  store double %156, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %90, align 1, !tbaa !1246
  %157 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1528) to double*)
  store double %157, double* %31, align 1, !tbaa !1246
  store double 0.000000e+00, double* %33, align 1, !tbaa !1246
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1536) to double*)
  store double %158, double* %36, align 1, !tbaa !1246
  %159 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1544) to double*)
  %160 = inttoptr i64 %101 to i64*
  %161 = load i64, i64* %160
  %162 = bitcast double %159 to <2 x i32>
  %163 = extractelement <2 x i32> %162, i32 0
  store i32 %163, i32* %102, align 1, !tbaa !1266
  %164 = extractelement <2 x i32> %162, i32 1
  store i32 %164, i32* %104, align 1, !tbaa !1266
  %165 = load double, double* %44, align 1
  %166 = inttoptr i64 %161 to double*
  %167 = load double, double* %166
  %168 = fmul double %165, %167
  %169 = inttoptr i64 %73 to double*
  store double %168, double* %169
  %170 = inttoptr i64 %73 to double*
  %171 = load double, double* %170
  %172 = tail call double @llvm.trunc.f64(double %171) #11
  %173 = tail call double @llvm.fabs.f64(double %172) #11
  %174 = fcmp ogt double %173, 0x41DFFFFFFFC00000
  %175 = fptosi double %172 to i32
  %176 = sitofp i32 %175 to double
  %177 = select i1 %174, double 0xC1E0000000000000, double %176
  %178 = inttoptr i64 %108 to double*
  store double %177, double* %178
  %179 = inttoptr i64 %101 to i64*
  %180 = load i64, i64* %179
  %181 = inttoptr i64 %180 to double*
  %182 = load double, double* %181
  %183 = bitcast double %158 to <2 x i32>
  %184 = extractelement <2 x i32> %183, i32 0
  store i32 %184, i32* %110, align 1, !tbaa !1266
  %185 = extractelement <2 x i32> %183, i32 1
  store i32 %185, i32* %112, align 1, !tbaa !1266
  %186 = load double, double* %114, align 1
  %187 = inttoptr i64 %108 to double*
  %188 = load double, double* %187
  %189 = fmul double %186, %188
  %190 = fsub double %182, %189
  %191 = inttoptr i64 %115 to double*
  store double %190, double* %191
  %192 = inttoptr i64 %85 to double*
  %193 = load double, double* %192
  %194 = inttoptr i64 %115 to double*
  %195 = load double, double* %194
  %196 = fmul double %193, %195
  %197 = inttoptr i64 %96 to double*
  %198 = load double, double* %197
  %199 = inttoptr i64 %108 to double*
  %200 = load double, double* %199
  %201 = fmul double %198, %200
  store double %201, double* %114, align 1, !tbaa !1246
  store i64 0, i64* %113, align 1, !tbaa !1246
  %202 = fadd double %196, %201
  %203 = inttoptr i64 %73 to double*
  store double %202, double* %203
  %204 = inttoptr i64 %73 to double*
  %205 = load double, double* %204
  %206 = fmul double %159, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #11
  %208 = tail call double @llvm.fabs.f64(double %207) #11
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = sitofp i32 %210 to double
  %212 = select i1 %209, double 0xC1E0000000000000, double %211
  %213 = inttoptr i64 %116 to double*
  store double %212, double* %213
  %214 = inttoptr i64 %73 to double*
  %215 = load double, double* %214
  store i32 %184, i32* %102, align 1, !tbaa !1266
  store i32 %185, i32* %104, align 1, !tbaa !1266
  store i32 0, i32* %105, align 1, !tbaa !1266
  store i32 0, i32* %107, align 1, !tbaa !1266
  %216 = load double, double* %44, align 1
  %217 = inttoptr i64 %116 to double*
  %218 = load double, double* %217
  %219 = fmul double %216, %218
  store double %219, double* %44, align 1, !tbaa !1246
  %220 = fsub double %215, %219
  %221 = inttoptr i64 %117 to double*
  store double %220, double* %221
  %222 = load double, double* %36, align 1
  %223 = inttoptr i64 %117 to double*
  %224 = load double, double* %223
  %225 = fmul double %222, %224
  %226 = inttoptr i64 %96 to double*
  %227 = load double, double* %226
  %228 = inttoptr i64 %115 to double*
  %229 = load double, double* %228
  %230 = fmul double %227, %229
  store double %230, double* %39, align 1, !tbaa !1246
  store i64 0, i64* %40, align 1, !tbaa !1246
  %231 = fadd double %230, %225
  %232 = inttoptr i64 %118 to double*
  store double %231, double* %232
  %233 = load <2 x i32>, <2 x i32>* %119, align 1
  %234 = load i64, i64* %89, align 1
  %235 = extractelement <2 x i32> %233, i32 0
  store i32 %235, i32* %120, align 1, !tbaa !1266
  %236 = extractelement <2 x i32> %233, i32 1
  store i32 %236, i32* %122, align 1, !tbaa !1266
  %237 = load double, double* %36, align 1
  %238 = inttoptr i64 %118 to double*
  %239 = load double, double* %238
  %240 = fmul double %237, %239
  %241 = tail call double @llvm.trunc.f64(double %240) #11
  %242 = tail call double @llvm.fabs.f64(double %241) #11
  %243 = fcmp ogt double %242, 0x41DFFFFFFFC00000
  %244 = fptosi double %241 to i32
  %245 = zext i32 %244 to i64
  %246 = select i1 %243, i64 2147483648, i64 %245
  store i64 %246, i64* %7, align 8, !tbaa !1240
  %247 = trunc i64 %246 to i32
  %248 = sitofp i32 %247 to double
  %249 = inttoptr i64 %123 to double*
  store double %248, double* %249
  %250 = inttoptr i64 %118 to double*
  %251 = load double, double* %250
  %252 = load double, double* %31, align 1
  %253 = inttoptr i64 %123 to double*
  %254 = load double, double* %253
  %255 = fmul double %252, %254
  store double %255, double* %31, align 1, !tbaa !1246
  %256 = fsub double %251, %255
  store double %256, double* %36, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  %257 = inttoptr i64 %101 to i64*
  %258 = load i64, i64* %257
  %259 = inttoptr i64 %258 to double*
  store double %256, double* %259
  %260 = inttoptr i64 %101 to i64*
  %261 = load i64, i64* %260
  %262 = bitcast <2 x i32> %233 to double
  %263 = inttoptr i64 %261 to double*
  %264 = load double, double* %263
  %265 = fmul double %262, %264
  store double %265, double* %54, align 1, !tbaa !1246
  store i64 %234, i64* %89, align 1, !tbaa !1246
  %266 = inttoptr i64 %124 to i64*
  %267 = load i64, i64* %266
  %268 = inttoptr i64 %98 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  store i64 %270, i64* %8, align 8, !tbaa !1240
  %271 = shl nsw i64 %270, 3
  %272 = add i64 %271, %267
  %273 = inttoptr i64 %272 to double*
  store double %265, double* %273
  %274 = inttoptr i64 %98 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %98 to i32*
  store i32 %276, i32* %277
  br label %block_4167a1

block_4167a1:                                     ; preds = %block_4167b0, %block_416720
  %278 = phi %struct.Memory* [ %2, %block_416720 ], [ %278, %block_4167b0 ]
  %279 = inttoptr i64 %98 to i32*
  %280 = load i32, i32* %279
  %281 = inttoptr i64 %100 to i32*
  %282 = load i32, i32* %281
  %283 = sub i32 %280, %282
  %284 = lshr i32 %283, 31
  %285 = lshr i32 %280, 31
  %286 = lshr i32 %282, 31
  %287 = xor i32 %286, %285
  %288 = xor i32 %284, %285
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = icmp ne i32 %284, 0
  %292 = xor i1 %291, %290
  br i1 %292, label %block_4167b0, label %block_4168c1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41d250_transfb_nc2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41d250:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %25, align 1, !tbaa !1244
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 1, !tbaa !1244
  %28 = bitcast i64* %24 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %23, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = add i64 %14, -16
  %32 = load i64, i64* %8, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %14, -24
  %35 = load i64, i64* %7, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %35, i64* %36
  %37 = inttoptr i64 %31 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %8, align 8, !tbaa !1240
  store i64 25, i64* %7, align 8, !tbaa !1240
  %39 = add i64 %1, 9728
  %40 = add i64 %1, 41
  %41 = add i64 %14, -304
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  store i64 %41, i64* %9, align 8, !tbaa !1240
  %43 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %39, %struct.Memory* %2)
  %44 = load i64, i64* %3, align 8
  store i64 25, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %25, align 1, !tbaa !1244
  store i32 0, i32* %27, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  %45 = load i64, i64* %10, align 8
  %46 = add i64 %45, -272
  store i64 %46, i64* %8, align 8, !tbaa !1240
  %47 = add i64 %44, 9687
  %48 = add i64 %44, 20
  %49 = load i64, i64* %9, align 8, !tbaa !1240
  %50 = add i64 %49, -8
  %51 = inttoptr i64 %50 to i64*
  store i64 %48, i64* %51
  store i64 %50, i64* %9, align 8, !tbaa !1240
  %52 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %47, %struct.Memory* %43)
  %53 = load i64, i64* %10, align 8
  %54 = add i64 %53, -16
  %55 = load i64, i64* %3, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56
  %58 = inttoptr i64 %57 to double*
  %59 = load double, double* %58
  %60 = bitcast [32 x %union.VectorReg]* %11 to double*
  store double %59, double* %60, align 1, !tbaa !1246
  %61 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %61, align 1, !tbaa !1246
  %62 = add i64 %53, -8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %64 to double*
  store double %59, double* %65
  %66 = add i64 %53, -276
  %67 = add i64 %55, 26
  %68 = inttoptr i64 %66 to i32*
  store i32 0, i32* %68
  %69 = bitcast %union.VectorReg* %12 to double*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %71 = bitcast i64* %70 to double*
  %72 = add i64 %53, -272
  %73 = add i64 %53, -280
  %74 = add i64 %53, -64
  %75 = add i64 %53, -284
  br label %block_41d2a7

block_41d61c:                                     ; preds = %block_41d60f
  %76 = inttoptr i64 %189 to i32*
  store i32 1, i32* %76
  br label %block_41d626

block_41d6ea:                                     ; preds = %block_41d60f
  %77 = inttoptr i64 %185 to i32*
  %78 = load i32, i32* %77
  %79 = add i32 %78, 1
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %4, align 8, !tbaa !1240
  %81 = inttoptr i64 %185 to i32*
  store i32 %79, i32* %81
  br label %block_41d5b3

block_41d462:                                     ; preds = %block_41d388
  %82 = inttoptr i64 %66 to i32*
  %83 = load i32, i32* %82
  %84 = add i32 %83, 1
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %4, align 8, !tbaa !1240
  %86 = inttoptr i64 %66 to i32*
  store i32 %84, i32* %86
  %87 = add i64 %305, -443
  br label %block_41d2a7

block_41d60f:                                     ; preds = %block_41d5c0, %block_41d6d1
  %88 = phi %struct.Memory* [ %281, %block_41d5c0 ], [ %255, %block_41d6d1 ]
  %89 = inttoptr i64 %188 to i32*
  %90 = load i32, i32* %89
  %91 = add i32 %90, -5
  %92 = lshr i32 %91, 31
  %93 = lshr i32 %90, 31
  %94 = xor i32 %92, %93
  %95 = add nuw nsw i32 %94, %93
  %96 = icmp eq i32 %95, 2
  %97 = icmp ne i32 %92, 0
  %98 = xor i1 %97, %96
  br i1 %98, label %block_41d61c, label %block_41d6ea

block_41d47b:                                     ; preds = %block_41d2a7
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %100 = inttoptr i64 %66 to i32*
  store i32 0, i32* %100
  %101 = add i64 %176, 20
  %102 = inttoptr i64 %73 to i32*
  store i32 0, i32* %102
  %103 = bitcast %union.VectorReg* %99 to double*
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  br label %block_41d48f

block_41d449:                                     ; preds = %block_41d39f
  %105 = add i32 %219, 1
  %106 = inttoptr i64 %73 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %217, -193
  br label %block_41d388

block_41d2b4:                                     ; preds = %block_41d2a7
  store i32 0, i32* %25, align 1, !tbaa !1244
  store i32 0, i32* %27, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  %108 = inttoptr i64 %54 to i64*
  %109 = load i64, i64* %108
  %110 = sext i32 %165 to i64
  store i64 %110, i64* %5, align 8, !tbaa !1240
  %111 = shl nsw i64 %110, 3
  %112 = add i64 %111, %109
  %113 = inttoptr i64 %112 to double*
  %114 = load double, double* %113
  store double %114, double* %69, align 1, !tbaa !1246
  store double 0.000000e+00, double* %71, align 1, !tbaa !1246
  %115 = add i64 %72, %111
  %116 = inttoptr i64 %115 to double*
  store double %114, double* %116
  %117 = inttoptr i64 %73 to i32*
  store i32 0, i32* %117
  %118 = inttoptr i64 %66 to i32*
  %119 = load i32, i32* %118
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add i64 %74, %121
  %123 = load double, double* %60, align 1
  %124 = inttoptr i64 %122 to double*
  store double %123, double* %124
  %125 = add i64 %176, 68
  %126 = inttoptr i64 %75 to i32*
  store i32 1, i32* %126
  br label %block_41d2f8

block_41d3ac:                                     ; preds = %block_41d39f
  %127 = sext i32 %219 to i64
  %128 = mul nsw i64 %127, 40
  %129 = add i64 %128, %72
  store i64 %129, i64* %7, align 8, !tbaa !1240
  %130 = inttoptr i64 %66 to i32*
  %131 = load i32, i32* %130
  %132 = sext i32 %131 to i64
  %133 = shl nsw i64 %132, 3
  %134 = add i64 %133, %129
  %135 = inttoptr i64 %134 to double*
  %136 = load double, double* %135
  %137 = mul nsw i64 %127, 24
  %138 = add i64 %137, ptrtoint (%qbnew_type* @qbnew to i64)
  %139 = add i32 %207, -1
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %8, align 8, !tbaa !1240
  %141 = sext i32 %139 to i64
  %142 = shl nsw i64 %141, 3
  %143 = add i64 %138, %142
  %144 = inttoptr i64 %143 to double*
  %145 = load double, double* %144
  %146 = inttoptr i64 %54 to i64*
  %147 = load i64, i64* %146
  %148 = sext i32 %207 to i64
  %149 = mul nsw i64 %148, 40
  %150 = add i64 %149, %147
  store i64 %132, i64* %6, align 8, !tbaa !1240
  %151 = add i64 %133, %150
  %152 = inttoptr i64 %151 to double*
  %153 = load double, double* %152
  %154 = fmul double %145, %153
  store double %154, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %155 = fadd double %136, %154
  store double %155, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %132, i64* %5, align 8, !tbaa !1240
  %156 = inttoptr i64 %134 to double*
  store double %155, double* %156
  %157 = inttoptr i64 %75 to i32*
  %158 = load i32, i32* %157
  %159 = add i32 %158, 1
  %160 = inttoptr i64 %75 to i32*
  store i32 %159, i32* %160
  %161 = add i64 %217, -13
  br label %block_41d39f

block_41d2a7:                                     ; preds = %block_41d462, %block_41d250
  %162 = phi i64 [ %67, %block_41d250 ], [ %87, %block_41d462 ]
  %163 = phi %struct.Memory* [ %52, %block_41d250 ], [ %293, %block_41d462 ]
  %164 = inttoptr i64 %66 to i32*
  %165 = load i32, i32* %164
  %166 = add i32 %165, -5
  %167 = lshr i32 %166, 31
  %168 = trunc i32 %167 to i8
  %169 = lshr i32 %165, 31
  %170 = xor i32 %167, %169
  %171 = add nuw nsw i32 %170, %169
  %172 = icmp eq i32 %171, 2
  %173 = icmp ne i8 %168, 0
  %174 = xor i1 %173, %172
  %175 = select i1 %174, i64 13, i64 468
  %176 = add i64 %162, %175
  br i1 %174, label %block_41d2b4, label %block_41d47b

block_41d37e:                                     ; preds = %block_41d2f8
  %177 = add i64 %254, 10
  %178 = inttoptr i64 %73 to i32*
  store i32 1, i32* %178
  br label %block_41d388

block_41d6d1:                                     ; preds = %block_41d626
  %179 = inttoptr i64 %188 to i32*
  %180 = load i32, i32* %179
  %181 = add i32 %180, 1
  %182 = inttoptr i64 %188 to i32*
  store i32 %181, i32* %182
  br label %block_41d60f

block_41d5a9:                                     ; preds = %block_41d48f
  %183 = inttoptr i64 %66 to i32*
  store i32 1, i32* %183
  %184 = load i64, i64* %10, align 8
  %185 = add i64 %184, -276
  %186 = add i64 %184, -272
  %187 = add i64 %184, -8
  %188 = add i64 %184, -280
  %189 = add i64 %184, -284
  br label %block_41d5b3

block_41d4a6:                                     ; preds = %block_41d4b3, %block_41d49c
  %190 = phi i64 [ %342, %block_41d49c ], [ %422, %block_41d4b3 ]
  %191 = phi %struct.Memory* [ %267, %block_41d49c ], [ %191, %block_41d4b3 ]
  %192 = inttoptr i64 %75 to i32*
  %193 = load i32, i32* %192
  %194 = add i32 %193, -4
  %195 = lshr i32 %194, 31
  %196 = lshr i32 %193, 31
  %197 = xor i32 %195, %196
  %198 = add nuw nsw i32 %197, %196
  %199 = icmp eq i32 %198, 2
  %200 = icmp ne i32 %195, 0
  %201 = xor i1 %200, %199
  %202 = select i1 %201, i64 13, i64 234
  %203 = add i64 %190, %202
  br i1 %201, label %block_41d4b3, label %block_41d590

block_41d39f:                                     ; preds = %block_41d395, %block_41d3ac
  %204 = phi i64 [ %233, %block_41d395 ], [ %161, %block_41d3ac ]
  %205 = phi %struct.Memory* [ %293, %block_41d395 ], [ %205, %block_41d3ac ]
  %206 = inttoptr i64 %75 to i32*
  %207 = load i32, i32* %206
  %208 = add i32 %207, -4
  %209 = lshr i32 %208, 31
  %210 = lshr i32 %207, 31
  %211 = xor i32 %209, %210
  %212 = add nuw nsw i32 %211, %210
  %213 = icmp eq i32 %212, 2
  %214 = icmp ne i32 %209, 0
  %215 = xor i1 %214, %213
  %216 = select i1 %215, i64 13, i64 170
  %217 = add i64 %204, %216
  %218 = inttoptr i64 %73 to i32*
  %219 = load i32, i32* %218
  br i1 %215, label %block_41d3ac, label %block_41d449

block_41d5c0:                                     ; preds = %block_41d5b3
  %220 = inttoptr i64 %187 to i64*
  %221 = load i64, i64* %220
  %222 = sext i32 %283 to i64
  %223 = mul nsw i64 %222, 40
  store i64 %223, i64* %6, align 8, !tbaa !1240
  %224 = add i64 %223, %221
  %225 = inttoptr i64 %224 to double*
  %226 = load double, double* %225
  %227 = add i64 %223, %186
  %228 = inttoptr i64 %227 to double*
  %229 = load double, double* %228
  %230 = fadd double %226, %229
  store double %230, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %223, i64* %5, align 8, !tbaa !1240
  %231 = inttoptr i64 %224 to double*
  store double %230, double* %231
  %232 = inttoptr i64 %188 to i32*
  store i32 0, i32* %232
  br label %block_41d60f

block_41d395:                                     ; preds = %block_41d388
  %233 = add i64 %305, 10
  %234 = inttoptr i64 %75 to i32*
  store i32 1, i32* %234
  br label %block_41d39f

block_41d590:                                     ; preds = %block_41d4a6
  %235 = inttoptr i64 %73 to i32*
  %236 = load i32, i32* %235
  %237 = add i32 %236, 1
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %4, align 8, !tbaa !1240
  %239 = inttoptr i64 %73 to i32*
  store i32 %237, i32* %239
  %240 = add i64 %203, -257
  br label %block_41d48f

block_41d2f8:                                     ; preds = %block_41d305, %block_41d2b4
  %241 = phi i64 [ %125, %block_41d2b4 ], [ %378, %block_41d305 ]
  %242 = phi %struct.Memory* [ %163, %block_41d2b4 ], [ %242, %block_41d305 ]
  %243 = inttoptr i64 %75 to i32*
  %244 = load i32, i32* %243
  %245 = add i32 %244, -4
  %246 = lshr i32 %245, 31
  %247 = lshr i32 %244, 31
  %248 = xor i32 %246, %247
  %249 = add nuw nsw i32 %248, %247
  %250 = icmp eq i32 %249, 2
  %251 = icmp ne i32 %246, 0
  %252 = xor i1 %251, %250
  %253 = select i1 %252, i64 13, i64 134
  %254 = add i64 %241, %253
  br i1 %252, label %block_41d305, label %block_41d37e

block_41d626:                                     ; preds = %block_41d633, %block_41d61c
  %255 = phi %struct.Memory* [ %88, %block_41d61c ], [ %255, %block_41d633 ]
  %256 = inttoptr i64 %189 to i32*
  %257 = load i32, i32* %256
  %258 = add i32 %257, -4
  %259 = lshr i32 %258, 31
  %260 = lshr i32 %257, 31
  %261 = xor i32 %259, %260
  %262 = add nuw nsw i32 %261, %260
  %263 = icmp eq i32 %262, 2
  %264 = icmp ne i32 %259, 0
  %265 = xor i1 %264, %263
  br i1 %265, label %block_41d633, label %block_41d6d1

block_41d48f:                                     ; preds = %block_41d590, %block_41d47b
  %266 = phi i64 [ %101, %block_41d47b ], [ %240, %block_41d590 ]
  %267 = phi %struct.Memory* [ %163, %block_41d47b ], [ %191, %block_41d590 ]
  %268 = inttoptr i64 %73 to i32*
  %269 = load i32, i32* %268
  %270 = add i32 %269, -5
  %271 = lshr i32 %270, 31
  %272 = trunc i32 %271 to i8
  %273 = lshr i32 %269, 31
  %274 = xor i32 %271, %273
  %275 = add nuw nsw i32 %274, %273
  %276 = icmp eq i32 %275, 2
  %277 = icmp ne i8 %272, 0
  %278 = xor i1 %277, %276
  %279 = select i1 %278, i64 13, i64 282
  %280 = add i64 %266, %279
  br i1 %278, label %block_41d49c, label %block_41d5a9

block_41d5b3:                                     ; preds = %block_41d5a9, %block_41d6ea
  %281 = phi %struct.Memory* [ %267, %block_41d5a9 ], [ %88, %block_41d6ea ]
  %282 = inttoptr i64 %185 to i32*
  %283 = load i32, i32* %282
  %284 = add i32 %283, -5
  %285 = lshr i32 %284, 31
  %286 = lshr i32 %283, 31
  %287 = xor i32 %285, %286
  %288 = add nuw nsw i32 %287, %286
  %289 = icmp eq i32 %288, 2
  %290 = icmp ne i32 %285, 0
  %291 = xor i1 %290, %289
  br i1 %291, label %block_41d5c0, label %block_41d703

block_41d388:                                     ; preds = %block_41d37e, %block_41d449
  %292 = phi i64 [ %177, %block_41d37e ], [ %107, %block_41d449 ]
  %293 = phi %struct.Memory* [ %242, %block_41d37e ], [ %205, %block_41d449 ]
  %294 = inttoptr i64 %73 to i32*
  %295 = load i32, i32* %294
  %296 = add i32 %295, -5
  %297 = lshr i32 %296, 31
  %298 = lshr i32 %295, 31
  %299 = xor i32 %297, %298
  %300 = add nuw nsw i32 %299, %298
  %301 = icmp eq i32 %300, 2
  %302 = icmp ne i32 %297, 0
  %303 = xor i1 %302, %301
  %304 = select i1 %303, i64 13, i64 218
  %305 = add i64 %292, %304
  br i1 %303, label %block_41d395, label %block_41d462

block_41d633:                                     ; preds = %block_41d626
  %306 = inttoptr i64 %187 to i64*
  %307 = load i64, i64* %306
  %308 = inttoptr i64 %185 to i32*
  %309 = load i32, i32* %308
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, 40
  %312 = add i64 %311, %307
  %313 = inttoptr i64 %188 to i32*
  %314 = load i32, i32* %313
  %315 = sext i32 %314 to i64
  store i64 %315, i64* %7, align 8, !tbaa !1240
  %316 = shl nsw i64 %315, 3
  %317 = add i64 %316, %312
  %318 = inttoptr i64 %317 to double*
  %319 = load double, double* %318
  %320 = mul nsw i64 %315, 24
  %321 = add i64 %320, ptrtoint (%qbnew_type* @qbnew to i64)
  %322 = add i32 %257, -1
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %8, align 8, !tbaa !1240
  %324 = sext i32 %322 to i64
  store i64 %324, i64* %6, align 8, !tbaa !1240
  %325 = shl nsw i64 %324, 3
  %326 = add i64 %321, %325
  %327 = inttoptr i64 %326 to double*
  %328 = load double, double* %327
  %329 = add i64 %311, %186
  %330 = sext i32 %257 to i64
  %331 = shl nsw i64 %330, 3
  %332 = add i64 %331, %329
  %333 = inttoptr i64 %332 to double*
  %334 = load double, double* %333
  %335 = fmul double %328, %334
  store double %335, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %336 = fadd double %319, %335
  store double %336, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %315, i64* %5, align 8, !tbaa !1240
  %337 = inttoptr i64 %317 to double*
  store double %336, double* %337
  %338 = inttoptr i64 %189 to i32*
  %339 = load i32, i32* %338
  %340 = add i32 %339, 1
  %341 = inttoptr i64 %189 to i32*
  store i32 %340, i32* %341
  br label %block_41d626

block_41d49c:                                     ; preds = %block_41d48f
  %342 = add i64 %280, 10
  %343 = inttoptr i64 %75 to i32*
  store i32 1, i32* %343
  br label %block_41d4a6

block_41d305:                                     ; preds = %block_41d2f8
  %344 = inttoptr i64 %66 to i32*
  %345 = load i32, i32* %344
  %346 = sext i32 %345 to i64
  %347 = shl nsw i64 %346, 3
  %348 = add i64 %74, %347
  %349 = inttoptr i64 %348 to double*
  %350 = load double, double* %349
  %351 = inttoptr i64 %73 to i32*
  %352 = load i32, i32* %351
  %353 = sext i32 %352 to i64
  %354 = mul nsw i64 %353, 24
  %355 = add i64 %354, ptrtoint (%qbnew_type* @qbnew to i64)
  %356 = add i32 %244, -1
  %357 = zext i32 %356 to i64
  store i64 %357, i64* %6, align 8, !tbaa !1240
  %358 = sext i32 %356 to i64
  %359 = shl nsw i64 %358, 3
  %360 = add i64 %355, %359
  %361 = inttoptr i64 %360 to double*
  %362 = load double, double* %361
  %363 = inttoptr i64 %54 to i64*
  %364 = load i64, i64* %363
  %365 = sext i32 %244 to i64
  %366 = mul nsw i64 %365, 40
  %367 = add i64 %366, %364
  store i64 %346, i64* %5, align 8, !tbaa !1240
  %368 = add i64 %347, %367
  %369 = inttoptr i64 %368 to double*
  %370 = load double, double* %369
  %371 = fmul double %362, %370
  store double %371, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  %372 = fadd double %350, %371
  store double %372, double* %60, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  %373 = inttoptr i64 %348 to double*
  store double %372, double* %373
  %374 = inttoptr i64 %75 to i32*
  %375 = load i32, i32* %374
  %376 = add i32 %375, 1
  %377 = inttoptr i64 %75 to i32*
  store i32 %376, i32* %377
  %378 = add i64 %254, -13
  br label %block_41d2f8

block_41d4b3:                                     ; preds = %block_41d4a6
  %379 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %379, double* %60, align 1, !tbaa !1246
  store double 0.000000e+00, double* %61, align 1, !tbaa !1246
  %380 = inttoptr i64 %62 to i64*
  %381 = load i64, i64* %380
  %382 = inttoptr i64 %66 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = mul nsw i64 %384, 40
  %386 = add i64 %385, %381
  %387 = inttoptr i64 %73 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  %390 = shl nsw i64 %389, 3
  %391 = add i64 %390, %386
  %392 = inttoptr i64 %391 to double*
  %393 = load double, double* %392
  %394 = mul nsw i64 %389, 24
  %395 = add i64 %394, ptrtoint (%qbnew_type* @qbnew to i64)
  store i64 %395, i64* %7, align 8, !tbaa !1240
  %396 = add i32 %193, -1
  %397 = zext i32 %396 to i64
  %398 = sext i32 %396 to i64
  %399 = shl nsw i64 %398, 3
  %400 = add i64 %395, %399
  %401 = inttoptr i64 %400 to double*
  %402 = load double, double* %401
  %403 = sext i32 %193 to i64
  %404 = shl nsw i64 %403, 3
  %405 = add i64 %74, %404
  %406 = inttoptr i64 %405 to double*
  %407 = load double, double* %406
  %408 = fmul double %402, %407
  %409 = fadd double %393, %408
  store i64 %397, i64* %8, align 8, !tbaa !1240
  store i64 %398, i64* %6, align 8, !tbaa !1240
  %410 = add i64 %385, %72
  %411 = add i64 %404, %410
  %412 = inttoptr i64 %411 to double*
  %413 = load double, double* %412
  %414 = fmul double %402, %413
  %415 = fmul double %414, %379
  store double %415, double* %103, align 1, !tbaa !1246
  store i64 0, i64* %104, align 1, !tbaa !1246
  %416 = fadd double %415, %409
  store double %416, double* %69, align 1, !tbaa !1246
  store i64 0, i64* %70, align 1, !tbaa !1246
  store i64 %389, i64* %5, align 8, !tbaa !1240
  %417 = inttoptr i64 %391 to double*
  store double %416, double* %417
  %418 = inttoptr i64 %75 to i32*
  %419 = load i32, i32* %418
  %420 = add i32 %419, 1
  %421 = inttoptr i64 %75 to i32*
  store i32 %420, i32* %421
  %422 = add i64 %203, -13
  br label %block_41d4a6

block_41d703:                                     ; preds = %block_41d5b3
  %423 = load i64, i64* %9, align 8
  %424 = add i64 %423, 288
  %425 = icmp ugt i64 %423, -289
  %426 = zext i1 %425 to i8
  store i8 %426, i8* %17, align 1, !tbaa !1248
  %427 = trunc i64 %424 to i32
  %428 = and i32 %427, 255
  %429 = tail call i32 @llvm.ctpop.i32(i32 %428) #11
  %430 = trunc i32 %429 to i8
  %431 = and i8 %430, 1
  %432 = xor i8 %431, 1
  store i8 %432, i8* %18, align 1, !tbaa !1261
  %433 = xor i64 %424, %423
  %434 = lshr i64 %433, 4
  %435 = trunc i64 %434 to i8
  %436 = and i8 %435, 1
  store i8 %436, i8* %19, align 1, !tbaa !1262
  %437 = icmp eq i64 %424, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %20, align 1, !tbaa !1263
  %439 = lshr i64 %424, 63
  %440 = trunc i64 %439 to i8
  store i8 %440, i8* %21, align 1, !tbaa !1264
  %441 = lshr i64 %423, 63
  %442 = xor i64 %439, %441
  %443 = add nuw nsw i64 %442, %439
  %444 = icmp eq i64 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %22, align 1, !tbaa !1265
  %446 = add i64 %423, 296
  %447 = inttoptr i64 %424 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %10, align 8, !tbaa !1240
  %449 = inttoptr i64 %446 to i64*
  %450 = load i64, i64* %449
  store i64 %450, i64* %3, align 8, !tbaa !1240
  %451 = add i64 %423, 304
  store i64 %451, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %281
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4182f0_top_constants(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4182f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* %4, align 8, !tbaa !1240
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %6, i64* %9
  store i64 %8, i64* %4, align 8, !tbaa !1240
  store i32 5, i32* bitcast (%f_e_ef_type* @f_e_ef to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 4) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 8) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 12) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 16) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 20) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 24) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 28) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 32) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 36) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 40) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 44) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 48) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 52) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 56) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 60) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 64) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 68) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 72) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 76) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 80) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 88) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64 92) to i32*)
  store i32 4, i32* bitcast (%e_c_type* @e_c to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 4) to i32*)
  store i32 10, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 8) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 12) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 16) to i32*)
  store i32 10, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 20) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 24) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 28) to i32*)
  store i32 8, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 32) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 36) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 40) to i32*)
  store i32 8, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 44) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 48) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 52) to i32*)
  store i32 11, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 56) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 60) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 64) to i32*)
  store i32 11, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 68) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 72) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 76) to i32*)
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 80) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 88) to i32*)
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%e_c_type* @e_c to i64), i64 92) to i32*)
  store i32 -1, i32* bitcast (%local_corner_type* @local_corner to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 4) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 12) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 16) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 20) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 24) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 28) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 32) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 36) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 40) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 44) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 48) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 52) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 56) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 60) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 64) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 68) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 72) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 76) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 80) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 88) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 92) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 96) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 100) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 104) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 108) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 112) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 116) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 120) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 124) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 128) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 132) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 136) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 140) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 144) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 148) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 152) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 156) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 160) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 164) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 168) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 172) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 176) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 180) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 184) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%local_corner_type* @local_corner to i64), i64 188) to i32*)
  store i32 4, i32* bitcast (%cal_nnb_type* @cal_nnb to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 4) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 8) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 12) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 16) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 20) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 24) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 28) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 32) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 36) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 40) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 44) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 48) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 52) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 56) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 60) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 64) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 68) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 72) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 76) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 80) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 84) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 88) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64 92) to i32*)
  store i32 3, i32* bitcast (%oplc_type* @oplc to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%oplc_type* @oplc to i64), i64 4) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%oplc_type* @oplc to i64), i64 8) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%oplc_type* @oplc to i64), i64 12) to i32*)
  store i32 0, i32* bitcast (%cal_iijj_type* @cal_iijj to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 12) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 16) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 20) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 24) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 28) to i32*)
  store i32 7, i32* bitcast (%cal_intempx_type* @cal_intempx to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 4) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 12) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 16) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 20) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 24) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 28) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 32) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 36) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 40) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 44) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 48) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 52) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 56) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 60) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 64) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 68) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 72) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 76) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 80) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 84) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 88) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64 92) to i32*)
  store i32 1, i32* bitcast (%c_f_type* @c_f to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 4) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 8) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 12) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 16) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 20) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 24) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 28) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 32) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 36) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 40) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 44) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 48) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 52) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 56) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 60) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 64) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 68) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 72) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 76) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 80) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 88) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%c_f_type* @c_f to i64), i64 92) to i32*)
  store i32 7, i32* bitcast (%le_arr_type* @le_arr to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 4) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 8) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 12) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 16) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 20) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 24) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 28) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 32) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 36) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 40) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 44) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 48) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 52) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 56) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 60) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 64) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 68) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 72) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 76) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 80) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 84) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 88) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%le_arr_type* @le_arr to i64), i64 92) to i32*)
  store i32 1, i32* bitcast (%jjface_type* @jjface to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%jjface_type* @jjface to i64), i64 4) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%jjface_type* @jjface to i64), i64 8) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%jjface_type* @jjface to i64), i64 12) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%jjface_type* @jjface to i64), i64 16) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%jjface_type* @jjface to i64), i64 20) to i32*)
  store i32 1, i32* bitcast (%e_face2_type* @e_face2 to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 4) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 12) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 16) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 20) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 24) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 28) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 32) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 36) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 40) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 44) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 48) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 52) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 56) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 60) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 64) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 68) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 72) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 76) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 80) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 84) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 88) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64 92) to i32*)
  store i32 2, i32* bitcast (%op_type* @op to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%op_type* @op to i64), i64 4) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%op_type* @op to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%op_type* @op to i64), i64 12) to i32*)
  store i32 0, i32* bitcast (%localedgenumber_type* @localedgenumber to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 4) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 8) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 12) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 16) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 20) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 24) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 28) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 32) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 36) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 40) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 44) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 48) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 52) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 56) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 60) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 64) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 68) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 72) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 76) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 80) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 84) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 88) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 92) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 96) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 100) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 104) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 108) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 112) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 116) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 120) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 124) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 128) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 132) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 136) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 140) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 144) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 148) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 152) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 156) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 160) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 164) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 168) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 172) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 176) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 180) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 184) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 188) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 192) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 196) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 200) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 204) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 208) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 212) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 216) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 220) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 224) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 228) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 232) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 236) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 240) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 244) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 248) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 252) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 256) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 260) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 264) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 268) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 272) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 276) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 280) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64 284) to i32*)
  store i32 0, i32* bitcast (%edgenumber_type* @edgenumber to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 4) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 8) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 12) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 16) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 20) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 24) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 28) to i32*)
  store i32 8, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 32) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 36) to i32*)
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 40) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 44) to i32*)
  store i32 10, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 48) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 52) to i32*)
  store i32 11, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 56) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 60) to i32*)
  store i32 11, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 64) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 68) to i32*)
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 72) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 76) to i32*)
  store i32 10, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 80) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 84) to i32*)
  store i32 8, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 88) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64 92) to i32*)
  store i32 1, i32* bitcast (%f_c_type* @f_c to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 4) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 8) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 12) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 16) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 20) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 24) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 28) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 32) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 36) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 40) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 44) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 48) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 52) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 56) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 60) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 64) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 68) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 72) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 76) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 80) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 88) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%f_c_type* @f_c to i64), i64 92) to i32*)
  store i32 -1, i32* bitcast (%e1v1_type* @e1v1 to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 4) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 12) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 16) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 20) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 24) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 28) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 32) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 36) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 40) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 44) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 48) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 52) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 56) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 60) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 64) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 68) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 72) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 76) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 80) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 84) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 88) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 92) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 96) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 100) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 104) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 108) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 112) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 116) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 120) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 124) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 128) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 132) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 136) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v1_type* @e1v1 to i64), i64 140) to i32*)
  store i32 -1, i32* bitcast (%e2v1_type* @e2v1 to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 4) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 8) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 12) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 16) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 20) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 24) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 28) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 32) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 36) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 40) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 44) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 48) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 52) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 56) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 60) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 64) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 68) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 72) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 76) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 80) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 88) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 92) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 96) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 100) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 104) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 108) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 112) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 116) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 120) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 124) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 128) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 132) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 136) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64 140) to i32*)
  store i32 -1, i32* bitcast (%e1v2_type* @e1v2 to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 4) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 8) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 12) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 16) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 20) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 24) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 28) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 32) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 36) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 40) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 44) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 48) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 52) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 56) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 60) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 64) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 68) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 72) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 76) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 80) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 84) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 88) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 92) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 96) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 100) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 104) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 108) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 112) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 116) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 120) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 124) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 128) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 132) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 136) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e1v2_type* @e1v2 to i64), i64 140) to i32*)
  store i32 -1, i32* bitcast (%e2v2_type* @e2v2 to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 4) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 8) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 12) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 16) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 20) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 24) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 28) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 32) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 36) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 40) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 44) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 48) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 52) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 56) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 60) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 64) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 68) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 72) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 76) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 80) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 84) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 88) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 92) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 96) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 100) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 104) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 108) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 112) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 116) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 120) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 124) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 128) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 132) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 136) to i32*)
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64 140) to i32*)
  store i32 1, i32* bitcast (%children_type* @children to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 4) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 8) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 12) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 16) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 20) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 24) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 28) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 32) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 36) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 40) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 44) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 48) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 52) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 56) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 60) to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 64) to i32*)
  store i32 5, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 68) to i32*)
  store i32 6, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 72) to i32*)
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 76) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 80) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 84) to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 88) to i32*)
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%children_type* @children to i64), i64 92) to i32*)
  store i32 0, i32* bitcast (%iijj_type* @iijj to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 4) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 8) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 12) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 16) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 20) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 24) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%iijj_type* @iijj to i64), i64 28) to i32*)
  store i32 0, i32* bitcast (%v_end_type* @v_end to i32*)
  store i32 4, i32* inttoptr (i64 add (i64 ptrtoint (%v_end_type* @v_end to i64), i64 4) to i32*)
  store i32 1, i32* bitcast (%face_l1_type* @face_l1 to i32*)
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%face_l1_type* @face_l1 to i64), i64 4) to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%face_l1_type* @face_l1 to i64), i64 8) to i32*)
  store i32 2, i32* bitcast (%face_l2_type* @face_l2 to i32*)
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%face_l2_type* @face_l2 to i64), i64 4) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%face_l2_type* @face_l2 to i64), i64 8) to i32*)
  store i32 1, i32* bitcast (%face_ld_type* @face_ld to i32*)
  store i32 -2, i32* inttoptr (i64 add (i64 ptrtoint (%face_ld_type* @face_ld to i64), i64 4) to i32*)
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%face_ld_type* @face_ld to i64), i64 8) to i32*)
  %10 = load i64, i64* %4, align 8, !tbaa !1240
  %11 = add i64 %10, 8
  %12 = inttoptr i64 %10 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %5, align 8, !tbaa !1240
  %14 = inttoptr i64 %11 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %3, align 8, !tbaa !1240
  %16 = add i64 %10, 16
  store i64 %16, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4168d0_create_initial_grid(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4168d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %7, align 8
  %11 = load i64, i64* %6, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %6, align 8, !tbaa !1240
  store i64 %12, i64* %7, align 8, !tbaa !1240
  store i32 1, i32* bitcast (%nelt_type* @nelt to i32*)
  %14 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %22 = mul i64 %15, 21474836480
  %23 = ashr exact i64 %22, 32
  %24 = mul i64 %23, 21474836480
  %25 = ashr exact i64 %24, 32
  %26 = mul nsw i64 %25, 5
  %27 = and i64 %26, 4294967295
  store i64 %27, i64* %4, align 8, !tbaa !1240
  %28 = trunc i64 %26 to i32
  store i32 %28, i32* bitcast (%ntot_type* @ntot to i32*)
  store i32 1, i32* bitcast (%tree_type* @tree to i32*)
  store i32 0, i32* bitcast (%mt_to_id_type* @mt_to_id to i32*)
  %29 = add i64 %11, -12
  %30 = add i64 %1, 65
  %31 = inttoptr i64 %29 to i32*
  store i32 0, i32* %31
  %32 = bitcast [32 x %union.VectorReg]* %8 to double*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  %35 = bitcast %union.VectorReg* %9 to i8*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %37 = bitcast %union.VectorReg* %9 to i32*
  %38 = getelementptr inbounds i8, i8* %35, i64 4
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i64* %36 to i32*
  %41 = getelementptr inbounds i8, i8* %35, i64 12
  %42 = bitcast i8* %41 to i32*
  %43 = load i64, i64* %7, align 8
  %44 = add i64 %43, -4
  %45 = bitcast %union.VectorReg* %9 to double*
  br label %block_416911

block_416911:                                     ; preds = %block_41691b, %block_4168d0
  %46 = phi i64 [ %30, %block_4168d0 ], [ %103, %block_41691b ]
  %47 = phi %struct.Memory* [ %2, %block_4168d0 ], [ %47, %block_41691b ]
  %48 = inttoptr i64 %29 to i32*
  %49 = load i32, i32* %48
  %50 = add i32 %49, -7
  %51 = lshr i32 %50, 31
  %52 = trunc i32 %51 to i8
  %53 = lshr i32 %49, 31
  %54 = xor i32 %51, %53
  %55 = add nuw nsw i32 %54, %53
  %56 = icmp eq i32 %55, 2
  %57 = icmp ne i8 %52, 0
  %58 = xor i1 %57, %56
  %59 = select i1 %58, i64 10, i64 66
  %60 = add i64 %46, %59
  br i1 %58, label %block_41691b, label %block_416953

block_416a10:                                     ; preds = %block_416a09, %block_416a1a
  %61 = phi %struct.Memory* [ %106, %block_416a09 ], [ %61, %block_416a1a ]
  %62 = inttoptr i64 %44 to i32*
  %63 = load i32, i32* %62
  %64 = add i32 %63, -6
  %65 = lshr i32 %64, 31
  %66 = trunc i32 %65 to i8
  %67 = lshr i32 %63, 31
  %68 = xor i32 %65, %67
  %69 = add nuw nsw i32 %68, %67
  %70 = icmp eq i32 %69, 2
  %71 = icmp ne i8 %66, 0
  %72 = xor i1 %71, %70
  br i1 %72, label %block_416a1a, label %block_416a37

block_416a1a:                                     ; preds = %block_416a10
  %73 = sext i32 %63 to i64
  %74 = shl nsw i64 %73, 2
  %75 = add i64 %74, ptrtoint (%cbc_type* @cbc to i64)
  %76 = inttoptr i64 %75 to i32*
  store i32 0, i32* %76
  %77 = inttoptr i64 %44 to i32*
  %78 = load i32, i32* %77
  %79 = add i32 %78, 1
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %4, align 8, !tbaa !1240
  %81 = inttoptr i64 %44 to i32*
  store i32 %79, i32* %81
  br label %block_416a10

block_41691b:                                     ; preds = %block_416911
  %82 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %82, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  store i32 0, i32* %40, align 1, !tbaa !1244
  store i32 0, i32* %42, align 1, !tbaa !1244
  %83 = inttoptr i64 %44 to i32*
  %84 = load i32, i32* %83
  %85 = sext i32 %84 to i64
  %86 = shl nsw i64 %85, 3
  %87 = add i64 %86, ptrtoint (%xc_type* @xc to i64)
  %88 = load double, double* %45, align 1
  %89 = inttoptr i64 %87 to double*
  store double %88, double* %89
  %90 = inttoptr i64 %44 to i32*
  %91 = load i32, i32* %90
  %92 = add i32 %91, 1
  %93 = zext i32 %92 to i64
  store i64 %93, i64* %5, align 8, !tbaa !1240
  %94 = sext i32 %92 to i64
  %95 = shl nsw i64 %94, 3
  %96 = add i64 %95, ptrtoint (%xc_type* @xc to i64)
  %97 = inttoptr i64 %96 to double*
  store double %82, double* %97
  %98 = inttoptr i64 %44 to i32*
  %99 = load i32, i32* %98
  %100 = add i32 %99, 2
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %4, align 8, !tbaa !1240
  %102 = inttoptr i64 %44 to i32*
  store i32 %100, i32* %102
  %103 = add i64 %60, -10
  br label %block_416911

block_416a09:                                     ; preds = %block_4169c7
  %104 = inttoptr i64 %44 to i32*
  store i32 0, i32* %104
  br label %block_416a10

block_4169c7:                                     ; preds = %block_4169c0, %block_4169d1
  %105 = phi i64 [ %212, %block_4169c0 ], [ %211, %block_4169d1 ]
  %106 = phi %struct.Memory* [ %157, %block_4169c0 ], [ %106, %block_4169d1 ]
  %107 = inttoptr i64 %44 to i32*
  %108 = load i32, i32* %107
  %109 = add i32 %108, -4
  %110 = lshr i32 %109, 31
  %111 = trunc i32 %110 to i8
  %112 = lshr i32 %108, 31
  %113 = xor i32 %110, %112
  %114 = add nuw nsw i32 %113, %112
  %115 = icmp eq i32 %114, 2
  %116 = icmp ne i8 %111, 0
  %117 = xor i1 %116, %115
  %118 = select i1 %117, i64 10, i64 66
  %119 = add i64 %105, %118
  br i1 %117, label %block_4169d1, label %block_416a09

block_416953:                                     ; preds = %block_416911
  %120 = add i64 %60, 7
  %121 = inttoptr i64 %44 to i32*
  store i32 0, i32* %121
  br label %block_41695a

block_416964:                                     ; preds = %block_41695a
  %122 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %122, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  store i32 0, i32* %40, align 1, !tbaa !1244
  store i32 0, i32* %42, align 1, !tbaa !1244
  %123 = sext i32 %159 to i64
  %124 = shl nsw i64 %123, 3
  %125 = add i64 %124, ptrtoint (%yc_type* @yc to i64)
  %126 = load double, double* %45, align 1
  %127 = inttoptr i64 %125 to double*
  store double %126, double* %127
  %128 = inttoptr i64 %44 to i32*
  %129 = load i32, i32* %128
  %130 = add i32 %129, 2
  %131 = sext i32 %130 to i64
  %132 = shl nsw i64 %131, 3
  %133 = add i64 %132, ptrtoint (%yc_type* @yc to i64)
  %134 = inttoptr i64 %133 to double*
  store double %122, double* %134
  %135 = inttoptr i64 %44 to i32*
  %136 = load i32, i32* %135
  %137 = add i32 %136, 4
  %138 = sext i32 %137 to i64
  %139 = shl nsw i64 %138, 3
  %140 = add i64 %139, ptrtoint (%yc_type* @yc to i64)
  %141 = inttoptr i64 %140 to double*
  store double %126, double* %141
  %142 = inttoptr i64 %44 to i32*
  %143 = load i32, i32* %142
  %144 = add i32 %143, 6
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %5, align 8, !tbaa !1240
  %146 = sext i32 %144 to i64
  %147 = shl nsw i64 %146, 3
  %148 = add i64 %147, ptrtoint (%yc_type* @yc to i64)
  %149 = inttoptr i64 %148 to double*
  store double %122, double* %149
  %150 = inttoptr i64 %44 to i32*
  %151 = load i32, i32* %150
  %152 = add i32 %151, 1
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %4, align 8, !tbaa !1240
  %154 = inttoptr i64 %44 to i32*
  store i32 %152, i32* %154
  %155 = add i64 %170, -10
  br label %block_41695a

block_41695a:                                     ; preds = %block_416964, %block_416953
  %156 = phi i64 [ %120, %block_416953 ], [ %155, %block_416964 ]
  %157 = phi %struct.Memory* [ %47, %block_416953 ], [ %157, %block_416964 ]
  %158 = inttoptr i64 %44 to i32*
  %159 = load i32, i32* %158
  %160 = add i32 %159, -2
  %161 = lshr i32 %160, 31
  %162 = trunc i32 %161 to i8
  %163 = lshr i32 %159, 31
  %164 = xor i32 %161, %163
  %165 = add nuw nsw i32 %164, %163
  %166 = icmp eq i32 %165, 2
  %167 = icmp ne i8 %162, 0
  %168 = xor i1 %167, %166
  %169 = select i1 %168, i64 10, i64 102
  %170 = add i64 %156, %169
  br i1 %168, label %block_416964, label %block_4169c0

block_416a37:                                     ; preds = %block_416a10
  %171 = icmp ult i32 %63, 6
  %172 = zext i1 %171 to i8
  %173 = and i32 %64, 255
  %174 = tail call i32 @llvm.ctpop.i32(i32 %173) #11
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = xor i8 %176, 1
  %178 = xor i32 %64, %63
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = icmp eq i32 %64, 0
  %183 = zext i1 %182 to i8
  %184 = zext i1 %70 to i8
  store i8 %172, i8* %16, align 1, !tbaa !1248
  store i8 %177, i8* %17, align 1, !tbaa !1261
  store i8 %181, i8* %18, align 1, !tbaa !1262
  store i8 %183, i8* %19, align 1, !tbaa !1263
  store i8 %66, i8* %20, align 1, !tbaa !1264
  store i8 %184, i8* %21, align 1, !tbaa !1265
  %185 = load i64, i64* %6, align 8, !tbaa !1240
  %186 = add i64 %185, 8
  %187 = inttoptr i64 %185 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %7, align 8, !tbaa !1240
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %3, align 8, !tbaa !1240
  %191 = add i64 %185, 16
  store i64 %191, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %61

block_4169d1:                                     ; preds = %block_4169c7
  %192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %192, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  store i32 0, i32* %40, align 1, !tbaa !1244
  store i32 0, i32* %42, align 1, !tbaa !1244
  %193 = sext i32 %108 to i64
  %194 = shl nsw i64 %193, 3
  %195 = add i64 %194, ptrtoint (%zc_type* @zc to i64)
  %196 = load double, double* %45, align 1
  %197 = inttoptr i64 %195 to double*
  store double %196, double* %197
  %198 = inttoptr i64 %44 to i32*
  %199 = load i32, i32* %198
  %200 = add i32 %199, 4
  %201 = zext i32 %200 to i64
  store i64 %201, i64* %5, align 8, !tbaa !1240
  %202 = sext i32 %200 to i64
  %203 = shl nsw i64 %202, 3
  %204 = add i64 %203, ptrtoint (%zc_type* @zc to i64)
  %205 = inttoptr i64 %204 to double*
  store double %192, double* %205
  %206 = inttoptr i64 %44 to i32*
  %207 = load i32, i32* %206
  %208 = add i32 %207, 1
  %209 = zext i32 %208 to i64
  store i64 %209, i64* %4, align 8, !tbaa !1240
  %210 = inttoptr i64 %44 to i32*
  store i32 %208, i32* %210
  %211 = add i64 %119, -10
  br label %block_4169c7

block_4169c0:                                     ; preds = %block_41695a
  %212 = add i64 %170, 7
  %213 = inttoptr i64 %44 to i32*
  store i32 0, i32* %213
  br label %block_4169c7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4126c0_setuppc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4126c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %10, align 8, !tbaa !1240
  %16 = add i64 %13, -248
  store i64 %16, i64* %9, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -240
  %24 = add i64 %1, 21
  %25 = inttoptr i64 %23 to i32*
  store i32 0, i32* %25
  %26 = add i64 %13, -236
  %27 = add i64 %13, -216
  %28 = bitcast [32 x %union.VectorReg]* %11 to double*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  br label %block_4126d5

block_412b95:                                     ; preds = %block_412b82
  %30 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %31 = sext i32 %410 to i64
  %32 = shl nsw i64 %31, 3
  %33 = add i64 %32, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %34 = inttoptr i64 %33 to double*
  %35 = load double, double* %34
  %36 = fdiv double %30, %35
  store double %36, double* %28, align 1, !tbaa !1246
  store i64 0, i64* %29, align 1, !tbaa !1246
  %37 = inttoptr i64 %33 to double*
  store double %36, double* %37
  %38 = inttoptr i64 %235 to i32*
  %39 = load i32, i32* %38
  %40 = add i32 %39, 1
  %41 = inttoptr i64 %235 to i32*
  store i32 %40, i32* %41
  br label %block_412b82

block_41276f:                                     ; preds = %block_4126ec
  %42 = add i32 %268, 1
  %43 = inttoptr i64 %23 to i32*
  store i32 %42, i32* %43
  %44 = add i64 %266, -154
  br label %block_4126d5

block_4126e2:                                     ; preds = %block_4126d5
  %45 = add i64 %61, 10
  %46 = inttoptr i64 %26 to i32*
  store i32 0, i32* %46
  br label %block_4126ec

block_4126d5:                                     ; preds = %block_41276f, %block_4126c0
  %47 = phi i64 [ %24, %block_4126c0 ], [ %44, %block_41276f ]
  %48 = phi %struct.Memory* [ %2, %block_4126c0 ], [ %254, %block_41276f ]
  %49 = inttoptr i64 %23 to i32*
  %50 = load i32, i32* %49
  %51 = add i32 %50, -5
  %52 = lshr i32 %51, 31
  %53 = trunc i32 %52 to i8
  %54 = lshr i32 %50, 31
  %55 = xor i32 %52, %54
  %56 = add nuw nsw i32 %55, %54
  %57 = icmp eq i32 %56, 2
  %58 = icmp ne i8 %53, 0
  %59 = xor i1 %58, %57
  %60 = select i1 %59, i64 13, i64 179
  %61 = add i64 %47, %60
  br i1 %59, label %block_4126e2, label %block_412788

block_4126f9:                                     ; preds = %block_4126ec
  %62 = sext i32 %268 to i64
  %63 = mul nsw i64 %62, 40
  %64 = add i64 %63, ptrtoint (%dxtm1_type* @dxtm1 to i64)
  %65 = sext i32 %256 to i64
  %66 = shl nsw i64 %65, 3
  %67 = add i64 %66, %64
  %68 = inttoptr i64 %67 to double*
  %69 = load double, double* %68
  store i64 %65, i64* %7, align 8, !tbaa !1240
  %70 = fmul double %69, %69
  store double %70, double* %28, align 1, !tbaa !1246
  store i64 0, i64* %29, align 1, !tbaa !1246
  %71 = add i64 %63, %27
  store i64 %65, i64* %6, align 8, !tbaa !1240
  %72 = add i64 %66, %71
  %73 = inttoptr i64 %72 to double*
  store double %70, double* %73
  %74 = inttoptr i64 %26 to i32*
  %75 = load i32, i32* %74
  %76 = add i32 %75, 1
  %77 = inttoptr i64 %26 to i32*
  store i32 %76, i32* %77
  %78 = add i64 %266, -13
  br label %block_4126ec

block_412bd1:                                     ; preds = %block_412b82
  %79 = zext i32 %410 to i64
  store i64 %79, i64* %5, align 8, !tbaa !1240
  %80 = load i64, i64* %9, align 8
  %81 = add i64 %80, 240
  %82 = icmp ugt i64 %80, -241
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %17, align 1, !tbaa !1248
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #11
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %18, align 1, !tbaa !1261
  %90 = xor i64 %80, 16
  %91 = xor i64 %90, %81
  %92 = lshr i64 %91, 4
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %19, align 1, !tbaa !1262
  %95 = icmp eq i64 %81, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %20, align 1, !tbaa !1263
  %97 = lshr i64 %81, 63
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %21, align 1, !tbaa !1264
  %99 = lshr i64 %80, 63
  %100 = xor i64 %97, %99
  %101 = add nuw nsw i64 %100, %97
  %102 = icmp eq i64 %101, 2
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %22, align 1, !tbaa !1265
  %104 = add i64 %80, 248
  %105 = inttoptr i64 %81 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %10, align 8, !tbaa !1240
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %3, align 8, !tbaa !1240
  %109 = add i64 %80, 256
  store i64 %109, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %408

block_412b42:                                     ; preds = %block_412807
  %110 = load i64, i64* %10, align 8
  %111 = add i64 %110, -220
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, 1
  %115 = inttoptr i64 %111 to i32*
  store i32 %114, i32* %115
  %116 = add i64 %373, -919
  br label %block_4127ab

block_412859:                                     ; preds = %block_41284c
  %117 = inttoptr i64 %200 to i32*
  %118 = load i32, i32* %117
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %119, 1000
  %121 = add i64 %120, ptrtoint (%dpcelm_type* @dpcelm to i64)
  %122 = inttoptr i64 %211 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %124, 200
  %126 = add i64 %125, %121
  %127 = inttoptr i64 %214 to i32*
  %128 = load i32, i32* %127
  %129 = sext i32 %128 to i64
  %130 = mul nsw i64 %129, 40
  %131 = add i64 %130, %126
  %132 = inttoptr i64 %215 to i32*
  %133 = load i32, i32* %132
  %134 = sext i32 %133 to i64
  %135 = shl nsw i64 %134, 3
  %136 = add i64 %135, %131
  %137 = inttoptr i64 %136 to double*
  %138 = load double, double* %137
  %139 = inttoptr i64 %209 to i32*
  %140 = load i32, i32* %139
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %141, 1000
  %143 = add i64 %142, ptrtoint (%g1m1_s_type* @g1m1_s to i64)
  %144 = add i64 %125, %143
  %145 = add i64 %130, %144
  %146 = sext i32 %277 to i64
  %147 = shl nsw i64 %146, 3
  %148 = add i64 %147, %145
  %149 = inttoptr i64 %148 to double*
  %150 = load double, double* %149
  %151 = mul nsw i64 %146, 40
  %152 = add i64 %151, %217
  %153 = add i64 %135, %152
  %154 = inttoptr i64 %153 to double*
  %155 = load double, double* %154
  %156 = fmul double %150, %155
  %157 = fadd double %138, %156
  %158 = add i64 %151, %144
  %159 = add i64 %135, %158
  %160 = inttoptr i64 %159 to double*
  %161 = load double, double* %160
  %162 = shl nsw i64 %129, 3
  %163 = add i64 %162, %152
  %164 = inttoptr i64 %163 to double*
  %165 = load double, double* %164
  %166 = fmul double %161, %165
  %167 = fadd double %157, %166
  %168 = mul nsw i64 %146, 200
  %169 = add i64 %168, %143
  %170 = add i64 %130, %169
  %171 = add i64 %135, %170
  %172 = inttoptr i64 %171 to double*
  %173 = load double, double* %172
  %174 = shl nsw i64 %124, 3
  %175 = add i64 %174, %152
  %176 = inttoptr i64 %175 to double*
  %177 = load double, double* %176
  %178 = fmul double %173, %177
  store double %178, double* %358, align 1, !tbaa !1246
  store i64 0, i64* %359, align 1, !tbaa !1246
  %179 = fadd double %167, %178
  store double %179, double* %28, align 1, !tbaa !1246
  store i64 0, i64* %29, align 1, !tbaa !1246
  %180 = add i64 %120, ptrtoint (%dpcelm_type* @dpcelm to i64)
  %181 = add i64 %125, %180
  %182 = add i64 %130, %181
  %183 = add i64 %135, %182
  %184 = inttoptr i64 %183 to double*
  store double %179, double* %184
  %185 = inttoptr i64 %216 to i32*
  %186 = load i32, i32* %185
  %187 = add i32 %186, 1
  %188 = inttoptr i64 %216 to i32*
  store i32 %187, i32* %188
  %189 = add i64 %287, -13
  br label %block_41284c

block_4127be:                                     ; preds = %block_4127ab
  store i64 125, i64* %8, align 8, !tbaa !1240
  store i32 0, i32* %352, align 1, !tbaa !1244
  store i32 0, i32* %354, align 1, !tbaa !1244
  store i32 0, i32* %355, align 1, !tbaa !1244
  store i32 0, i32* %357, align 1, !tbaa !1244
  %190 = sext i32 %379 to i64
  %191 = mul nsw i64 %190, 1000
  store i64 %191, i64* %6, align 8, !tbaa !1240
  %192 = add i64 %191, ptrtoint (%dpcelm_type* @dpcelm to i64)
  store i64 %192, i64* %341, align 8, !tbaa !1240
  %193 = add i64 %393, 53394
  %194 = add i64 %393, 43
  %195 = load i64, i64* %9, align 8, !tbaa !1240
  %196 = add i64 %195, -8
  %197 = inttoptr i64 %196 to i64*
  store i64 %194, i64* %197
  store i64 %196, i64* %9, align 8, !tbaa !1240
  %198 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %193, %struct.Memory* %376)
  %199 = load i64, i64* %10, align 8
  %200 = add i64 %199, -220
  %201 = load i64, i64* %3, align 8
  %202 = inttoptr i64 %200 to i32*
  %203 = load i32, i32* %202
  %204 = sext i32 %203 to i64
  %205 = shl nsw i64 %204, 2
  %206 = add i64 %205, ptrtoint (%size_e_type* @size_e to i64)
  %207 = inttoptr i64 %206 to i32*
  %208 = load i32, i32* %207
  %209 = add i64 %199, -240
  %210 = inttoptr i64 %209 to i32*
  store i32 %208, i32* %210
  %211 = add i64 %199, -224
  %212 = add i64 %201, 30
  %213 = inttoptr i64 %211 to i32*
  store i32 0, i32* %213
  %214 = add i64 %199, -232
  %215 = add i64 %199, -228
  %216 = add i64 %199, -236
  %217 = add i64 %199, -208
  %218 = add i64 %199, -216
  br label %block_412807

block_412b5b:                                     ; preds = %block_4127ab
  %219 = add i64 %393, 54133
  %220 = add i64 %393, 7
  %221 = load i64, i64* %9, align 8, !tbaa !1240
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %220, i64* %223
  store i64 %222, i64* %9, align 8, !tbaa !1240
  %224 = tail call %struct.Memory* @sub_41fed0_dssum(%struct.State* nonnull %0, i64 %219, %struct.Memory* %376)
  %225 = load i64, i64* %3, align 8
  store i64 ptrtoint (%dpcelm_type* @dpcelm to i64), i64* %341, align 8, !tbaa !1240
  %226 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %8, align 8, !tbaa !1240
  %228 = add i64 %225, 52382
  %229 = add i64 %225, 22
  %230 = load i64, i64* %9, align 8, !tbaa !1240
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 %229, i64* %232
  store i64 %231, i64* %9, align 8, !tbaa !1240
  %233 = tail call %struct.Memory* @sub_41f800_reciprocal(%struct.State* nonnull %0, i64 %228, %struct.Memory* %224)
  %234 = load i64, i64* %10, align 8
  %235 = add i64 %234, -228
  %236 = inttoptr i64 %235 to i32*
  store i32 0, i32* %236
  br label %block_412b82

block_412835:                                     ; preds = %block_412a1d, %block_41282b
  %237 = phi i64 [ %251, %block_41282b ], [ %331, %block_412a1d ]
  %238 = phi %struct.Memory* [ %395, %block_41282b ], [ %275, %block_412a1d ]
  %239 = inttoptr i64 %215 to i32*
  %240 = load i32, i32* %239
  %241 = add i32 %240, -5
  %242 = lshr i32 %241, 31
  %243 = lshr i32 %240, 31
  %244 = xor i32 %242, %243
  %245 = add nuw nsw i32 %244, %243
  %246 = icmp eq i32 %245, 2
  %247 = icmp ne i32 %242, 0
  %248 = xor i1 %247, %246
  %249 = select i1 %248, i64 13, i64 731
  %250 = add i64 %237, %249
  br i1 %248, label %block_412842, label %block_412b10

block_41282b:                                     ; preds = %block_41281e
  %251 = add i64 %407, 10
  %252 = inttoptr i64 %215 to i32*
  store i32 0, i32* %252
  br label %block_412835

block_4126ec:                                     ; preds = %block_4126f9, %block_4126e2
  %253 = phi i64 [ %45, %block_4126e2 ], [ %78, %block_4126f9 ]
  %254 = phi %struct.Memory* [ %48, %block_4126e2 ], [ %254, %block_4126f9 ]
  %255 = inttoptr i64 %26 to i32*
  %256 = load i32, i32* %255
  %257 = add i32 %256, -5
  %258 = lshr i32 %257, 31
  %259 = lshr i32 %256, 31
  %260 = xor i32 %258, %259
  %261 = add nuw nsw i32 %260, %259
  %262 = icmp eq i32 %261, 2
  %263 = icmp ne i32 %258, 0
  %264 = xor i1 %263, %262
  %265 = select i1 %264, i64 13, i64 131
  %266 = add i64 %253, %265
  %267 = inttoptr i64 %23 to i32*
  %268 = load i32, i32* %267
  br i1 %264, label %block_4126f9, label %block_41276f

block_412b29:                                     ; preds = %block_41281e
  %269 = inttoptr i64 %211 to i32*
  %270 = load i32, i32* %269
  %271 = add i32 %270, 1
  %272 = inttoptr i64 %211 to i32*
  store i32 %271, i32* %272
  %273 = add i64 %407, -802
  br label %block_412807

block_41284c:                                     ; preds = %block_412842, %block_412859
  %274 = phi i64 [ %339, %block_412842 ], [ %189, %block_412859 ]
  %275 = phi %struct.Memory* [ %238, %block_412842 ], [ %275, %block_412859 ]
  %276 = inttoptr i64 %216 to i32*
  %277 = load i32, i32* %276
  %278 = add i32 %277, -5
  %279 = lshr i32 %278, 31
  %280 = lshr i32 %277, 31
  %281 = xor i32 %279, %280
  %282 = add nuw nsw i32 %281, %280
  %283 = icmp eq i32 %282, 2
  %284 = icmp ne i32 %279, 0
  %285 = xor i1 %284, %283
  %286 = select i1 %285, i64 13, i64 465
  %287 = add i64 %274, %286
  br i1 %285, label %block_412859, label %block_412a1d

block_412a1d:                                     ; preds = %block_41284c
  %288 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 928) to double*)
  %289 = inttoptr i64 %200 to i32*
  %290 = load i32, i32* %289
  %291 = sext i32 %290 to i64
  %292 = mul nsw i64 %291, 1000
  %293 = add i64 %292, ptrtoint (%dpcelm_type* @dpcelm to i64)
  %294 = inttoptr i64 %211 to i32*
  %295 = load i32, i32* %294
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, 200
  %298 = add i64 %297, %293
  %299 = inttoptr i64 %214 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %301, 40
  %303 = add i64 %302, %298
  %304 = inttoptr i64 %215 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 3
  %308 = add i64 %307, %303
  %309 = inttoptr i64 %308 to double*
  %310 = load double, double* %309
  %311 = fmul double %288, %310
  %312 = inttoptr i64 %218 to double*
  %313 = load double, double* %312
  %314 = inttoptr i64 %209 to i32*
  %315 = load i32, i32* %314
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %316, 1000
  %318 = add i64 %317, ptrtoint (%bm1_s_type* @bm1_s to i64)
  %319 = add i64 %297, %318
  %320 = add i64 %302, %319
  store i64 %306, i64* %7, align 8, !tbaa !1240
  %321 = add i64 %307, %320
  %322 = inttoptr i64 %321 to double*
  %323 = load double, double* %322
  %324 = fmul double %313, %323
  store double %324, double* %358, align 1, !tbaa !1246
  store i64 0, i64* %359, align 1, !tbaa !1246
  %325 = fadd double %311, %324
  store double %325, double* %28, align 1, !tbaa !1246
  store i64 0, i64* %29, align 1, !tbaa !1246
  store i64 %306, i64* %6, align 8, !tbaa !1240
  %326 = inttoptr i64 %308 to double*
  store double %325, double* %326
  %327 = inttoptr i64 %215 to i32*
  %328 = load i32, i32* %327
  %329 = add i32 %328, 1
  %330 = inttoptr i64 %215 to i32*
  store i32 %329, i32* %330
  %331 = add i64 %287, -488
  br label %block_412835

block_412814:                                     ; preds = %block_412807
  %332 = add i64 %373, 10
  %333 = inttoptr i64 %214 to i32*
  store i32 0, i32* %333
  br label %block_41281e

block_412b10:                                     ; preds = %block_412835
  %334 = inttoptr i64 %214 to i32*
  %335 = load i32, i32* %334
  %336 = add i32 %335, 1
  %337 = inttoptr i64 %214 to i32*
  store i32 %336, i32* %337
  %338 = add i64 %250, -754
  br label %block_41281e

block_412842:                                     ; preds = %block_412835
  %339 = add i64 %250, 10
  %340 = inttoptr i64 %216 to i32*
  store i32 0, i32* %340
  br label %block_41284c

block_412788:                                     ; preds = %block_4126d5
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %343 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %344 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %345 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %346 = fdiv double %344, %345
  store double %346, double* %28, align 1, !tbaa !1246
  store i64 0, i64* %29, align 1, !tbaa !1246
  %347 = add i64 %13, -224
  %348 = inttoptr i64 %347 to double*
  store double %346, double* %348
  %349 = add i64 %13, -228
  %350 = add i64 %61, 35
  %351 = inttoptr i64 %349 to i32*
  store i32 0, i32* %351
  %352 = bitcast [32 x %union.VectorReg]* %11 to i32*
  %353 = getelementptr inbounds i8, i8* %343, i64 4
  %354 = bitcast i8* %353 to i32*
  %355 = bitcast i64* %29 to i32*
  %356 = getelementptr inbounds i8, i8* %343, i64 12
  %357 = bitcast i8* %356 to i32*
  %358 = bitcast %union.VectorReg* %342 to double*
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_4127ab

block_412807:                                     ; preds = %block_412b29, %block_4127be
  %360 = phi i64 [ %212, %block_4127be ], [ %273, %block_412b29 ]
  %361 = phi %struct.Memory* [ %198, %block_4127be ], [ %395, %block_412b29 ]
  %362 = inttoptr i64 %211 to i32*
  %363 = load i32, i32* %362
  %364 = add i32 %363, -5
  %365 = lshr i32 %364, 31
  %366 = lshr i32 %363, 31
  %367 = xor i32 %365, %366
  %368 = add nuw nsw i32 %367, %366
  %369 = icmp eq i32 %368, 2
  %370 = icmp ne i32 %365, 0
  %371 = xor i1 %370, %369
  %372 = select i1 %371, i64 13, i64 827
  %373 = add i64 %360, %372
  br i1 %371, label %block_412814, label %block_412b42

block_4127ab:                                     ; preds = %block_412788, %block_412b42
  %374 = phi i64 [ %350, %block_412788 ], [ %116, %block_412b42 ]
  %375 = phi i64 [ %14, %block_412788 ], [ %110, %block_412b42 ]
  %376 = phi %struct.Memory* [ %48, %block_412788 ], [ %361, %block_412b42 ]
  %377 = add i64 %375, -220
  %378 = inttoptr i64 %377 to i32*
  %379 = load i32, i32* %378
  %380 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %381 = sub i32 %379, %380
  %382 = lshr i32 %381, 31
  %383 = trunc i32 %382 to i8
  %384 = lshr i32 %379, 31
  %385 = lshr i32 %380, 31
  %386 = xor i32 %385, %384
  %387 = xor i32 %382, %384
  %388 = add nuw nsw i32 %387, %386
  %389 = icmp eq i32 %388, 2
  %390 = icmp ne i8 %383, 0
  %391 = xor i1 %390, %389
  %392 = select i1 %391, i64 19, i64 944
  %393 = add i64 %374, %392
  br i1 %391, label %block_4127be, label %block_412b5b

block_41281e:                                     ; preds = %block_412b10, %block_412814
  %394 = phi i64 [ %332, %block_412814 ], [ %338, %block_412b10 ]
  %395 = phi %struct.Memory* [ %361, %block_412814 ], [ %238, %block_412b10 ]
  %396 = inttoptr i64 %214 to i32*
  %397 = load i32, i32* %396
  %398 = add i32 %397, -5
  %399 = lshr i32 %398, 31
  %400 = lshr i32 %397, 31
  %401 = xor i32 %399, %400
  %402 = add nuw nsw i32 %401, %400
  %403 = icmp eq i32 %402, 2
  %404 = icmp ne i32 %399, 0
  %405 = xor i1 %404, %403
  %406 = select i1 %405, i64 13, i64 779
  %407 = add i64 %394, %406
  br i1 %405, label %block_41282b, label %block_412b29

block_412b82:                                     ; preds = %block_412b5b, %block_412b95
  %408 = phi %struct.Memory* [ %233, %block_412b5b ], [ %408, %block_412b95 ]
  %409 = inttoptr i64 %235 to i32*
  %410 = load i32, i32* %409
  %411 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %412 = sub i32 %410, %411
  %413 = lshr i32 %412, 31
  %414 = lshr i32 %410, 31
  %415 = lshr i32 %411, 31
  %416 = xor i32 %415, %414
  %417 = xor i32 %413, %414
  %418 = add nuw nsw i32 %417, %416
  %419 = icmp eq i32 %418, 2
  %420 = icmp ne i32 %413, 0
  %421 = xor i1 %420, %419
  br i1 %421, label %block_412b95, label %block_412bd1
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400790:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %10, align 8, !tbaa !1240
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = load i64, i64* %6, align 8
  store i64 %19, i64* %12, align 8, !tbaa !1240
  %20 = load i64, i64* %9, align 8, !tbaa !1240
  %21 = add i64 %20, 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  store i64 %21, i64* %6, align 8, !tbaa !1240
  %24 = and i64 %21, -16
  store i8 0, i8* %13, align 1, !tbaa !1248
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 240
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %14, align 1, !tbaa !1261
  %31 = icmp eq i64 %24, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !1263
  %33 = lshr i64 %21, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %16, align 1, !tbaa !1264
  store i8 0, i8* %17, align 1, !tbaa !1265
  store i8 0, i8* %18, align 1, !tbaa !1262
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %24, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = add i64 %24, -16
  %39 = inttoptr i64 %38 to i64*
  store i64 %36, i64* %39
  store i64 ptrtoint (i64 ()* @callback_sub_420470___libc_csu_fini to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (i64 ()* @callback_sub_420400___libc_csu_init to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64* %8, align 8, !tbaa !1240
  %40 = add i64 %1, 42
  %41 = add i64 %24, -24
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  %45 = add i64 %24, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = inttoptr i64 %41 to i64*
  %49 = load i64, i64* %48
  store i64 %38, i64* %9, align 8, !alias.scope !1453, !noalias !1456
  %50 = tail call i64 @__libc_start_main(i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64 %23, i64 %21, i64 ptrtoint (i64 ()* @callback_sub_420400___libc_csu_init to i64), i64 ptrtoint (i64 ()* @callback_sub_420470___libc_csu_fini to i64), i64 %19, i64 %44, i64 %47), !noalias !1453
  store i64 %50, i64* %4, align 8, !alias.scope !1453, !noalias !1456
  %51 = add i64 %49, 1
  store i64 %51, i64* %3, align 8
  %52 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  ret %struct.Memory* %52
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41fba0_calc_norm(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41fba0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = load i64, i64* %9, align 8
  %13 = load i64, i64* %8, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %8, align 8, !tbaa !1240
  store i64 %14, i64* %9, align 8, !tbaa !1240
  %16 = bitcast [32 x %union.VectorReg]* %10 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %10 to i32*
  store i32 0, i32* %18, align 1, !tbaa !1244
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !1244
  %21 = bitcast i64* %17 to i32*
  store i32 0, i32* %21, align 1, !tbaa !1244
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 1, !tbaa !1244
  %24 = add i64 %13, -16
  %25 = bitcast [32 x %union.VectorReg]* %10 to double*
  %26 = load double, double* %25, align 1
  %27 = inttoptr i64 %24 to double*
  store double %26, double* %27
  %28 = add i64 %13, -28
  %29 = inttoptr i64 %28 to i32*
  store i32 0, i32* %29
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = add i64 %13, -24
  %34 = add i64 %13, -44
  %35 = add i64 %13, -32
  %36 = add i64 %13, -36
  %37 = add i64 %13, -40
  %38 = bitcast i64* %17 to double*
  %39 = bitcast %union.VectorReg* %11 to double*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_41fbb3

block_41fcdb:                                     ; preds = %block_41fbf1
  %41 = inttoptr i64 %35 to i32*
  %42 = load i32, i32* %41
  %43 = add i32 %42, 1
  %44 = inttoptr i64 %35 to i32*
  store i32 %43, i32* %44
  br label %block_41fbe0

block_41fbb3:                                     ; preds = %block_41fcee, %block_41fba0
  %45 = phi %struct.Memory* [ %2, %block_41fba0 ], [ %185, %block_41fcee ]
  %46 = inttoptr i64 %28 to i32*
  %47 = load i32, i32* %46
  %48 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %49 = sub i32 %47, %48
  %50 = lshr i32 %49, 31
  %51 = trunc i32 %50 to i8
  %52 = lshr i32 %47, 31
  %53 = lshr i32 %48, 31
  %54 = xor i32 %53, %52
  %55 = xor i32 %50, %52
  %56 = add nuw nsw i32 %55, %54
  %57 = icmp eq i32 %56, 2
  %58 = icmp ne i8 %51, 0
  %59 = xor i1 %58, %57
  br i1 %59, label %block_41fbc3, label %block_41fd0b

block_41fcee:                                     ; preds = %block_41fbe0
  %60 = inttoptr i64 %24 to double*
  %61 = load double, double* %60
  %62 = inttoptr i64 %33 to double*
  %63 = load double, double* %62
  %64 = fadd double %61, %63
  store double %64, double* %25, align 1, !tbaa !1246
  store i64 0, i64* %17, align 1, !tbaa !1246
  %65 = inttoptr i64 %24 to double*
  store double %64, double* %65
  %66 = inttoptr i64 %28 to i32*
  %67 = load i32, i32* %66
  %68 = add i32 %67, 1
  %69 = inttoptr i64 %28 to i32*
  store i32 %68, i32* %69
  br label %block_41fbb3

block_41fbfb:                                     ; preds = %block_41fbf1
  %70 = inttoptr i64 %37 to i32*
  store i32 0, i32* %70
  br label %block_41fc02

block_41fc0c:                                     ; preds = %block_41fc02
  %71 = inttoptr i64 %33 to double*
  %72 = load double, double* %71
  %73 = inttoptr i64 %28 to i32*
  %74 = load i32, i32* %73
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %75, 1000
  %77 = add i64 %76, ptrtoint (%ta1_type* @ta1 to i64)
  %78 = inttoptr i64 %35 to i32*
  %79 = load i32, i32* %78
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, 200
  %82 = add i64 %81, %77
  %83 = inttoptr i64 %36 to i32*
  %84 = load i32, i32* %83
  %85 = sext i32 %84 to i64
  %86 = mul nsw i64 %85, 40
  %87 = add i64 %86, %82
  %88 = sext i32 %176 to i64
  store i64 %88, i64* %7, align 8, !tbaa !1240
  %89 = shl nsw i64 %88, 3
  %90 = add i64 %89, %87
  %91 = inttoptr i64 %90 to double*
  %92 = load double, double* %91
  %93 = add i64 %81, ptrtoint (%w3m1_type* @w3m1 to i64)
  %94 = add i64 %86, %93
  store i64 %88, i64* %6, align 8, !tbaa !1240
  %95 = add i64 %89, %94
  %96 = inttoptr i64 %95 to double*
  %97 = load double, double* %96
  %98 = fmul double %92, %97
  %99 = inttoptr i64 %34 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  %102 = mul nsw i64 %101, 1000
  %103 = add i64 %102, ptrtoint (%jacm1_s_type* @jacm1_s to i64)
  %104 = add i64 %81, %103
  %105 = add i64 %86, %104
  store i64 %88, i64* %5, align 8, !tbaa !1240
  %106 = add i64 %89, %105
  %107 = inttoptr i64 %106 to double*
  %108 = load double, double* %107
  %109 = fmul double %98, %108
  store double %109, double* %39, align 1, !tbaa !1246
  store i64 0, i64* %40, align 1, !tbaa !1246
  %110 = fadd double %72, %109
  store double %110, double* %25, align 1, !tbaa !1246
  store i64 0, i64* %17, align 1, !tbaa !1246
  %111 = inttoptr i64 %33 to double*
  store double %110, double* %111
  %112 = inttoptr i64 %37 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, 1
  %115 = inttoptr i64 %37 to i32*
  store i32 %114, i32* %115
  br label %block_41fc02

block_41fd0b:                                     ; preds = %block_41fbb3
  %116 = zext i32 %47 to i64
  store i64 %116, i64* %4, align 8, !tbaa !1240
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %120 = icmp ult i32 %47, %48
  %121 = zext i1 %120 to i8
  %122 = and i32 %49, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #11
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  %127 = xor i32 %48, %47
  %128 = xor i32 %127, %49
  %129 = lshr i32 %128, 4
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = icmp eq i32 %49, 0
  %133 = zext i1 %132 to i8
  %134 = zext i1 %57 to i8
  store i8 %121, i8* %30, align 1, !tbaa !1248
  store i8 %126, i8* %117, align 1, !tbaa !1261
  store i8 %131, i8* %31, align 1, !tbaa !1262
  store i8 %133, i8* %118, align 1, !tbaa !1263
  store i8 %51, i8* %32, align 1, !tbaa !1264
  store i8 %134, i8* %119, align 1, !tbaa !1265
  %135 = load i64, i64* %9, align 8
  %136 = add i64 %135, -8
  %137 = inttoptr i64 %136 to double*
  %138 = load double, double* %137
  store double %138, double* %25, align 1, !tbaa !1246
  store double 0.000000e+00, double* %38, align 1, !tbaa !1246
  %139 = load i64, i64* %8, align 8, !tbaa !1240
  %140 = add i64 %139, 8
  %141 = inttoptr i64 %139 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %9, align 8, !tbaa !1240
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %3, align 8, !tbaa !1240
  %145 = add i64 %139, 16
  store i64 %145, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %45

block_41fbea:                                     ; preds = %block_41fbe0
  %146 = inttoptr i64 %36 to i32*
  store i32 0, i32* %146
  br label %block_41fbf1

block_41fcc8:                                     ; preds = %block_41fc02
  %147 = inttoptr i64 %36 to i32*
  %148 = load i32, i32* %147
  %149 = add i32 %148, 1
  %150 = inttoptr i64 %36 to i32*
  store i32 %149, i32* %150
  br label %block_41fbf1

block_41fbc3:                                     ; preds = %block_41fbb3
  store i32 0, i32* %18, align 1, !tbaa !1244
  store i32 0, i32* %20, align 1, !tbaa !1244
  store i32 0, i32* %21, align 1, !tbaa !1244
  store i32 0, i32* %23, align 1, !tbaa !1244
  %151 = load double, double* %25, align 1
  %152 = inttoptr i64 %33 to double*
  store double %151, double* %152
  %153 = inttoptr i64 %28 to i32*
  %154 = load i32, i32* %153
  %155 = sext i32 %154 to i64
  %156 = shl nsw i64 %155, 2
  %157 = add i64 %156, ptrtoint (%size_e_type* @size_e to i64)
  %158 = inttoptr i64 %157 to i32*
  %159 = load i32, i32* %158
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %5, align 8, !tbaa !1240
  %161 = inttoptr i64 %34 to i32*
  store i32 %159, i32* %161
  %162 = inttoptr i64 %35 to i32*
  store i32 0, i32* %162
  br label %block_41fbe0

block_41fbf1:                                     ; preds = %block_41fcc8, %block_41fbea
  %163 = phi %struct.Memory* [ %185, %block_41fbea ], [ %174, %block_41fcc8 ]
  %164 = inttoptr i64 %36 to i32*
  %165 = load i32, i32* %164
  %166 = add i32 %165, -5
  %167 = lshr i32 %166, 31
  %168 = lshr i32 %165, 31
  %169 = xor i32 %167, %168
  %170 = add nuw nsw i32 %169, %168
  %171 = icmp eq i32 %170, 2
  %172 = icmp ne i32 %167, 0
  %173 = xor i1 %172, %171
  br i1 %173, label %block_41fbfb, label %block_41fcdb

block_41fc02:                                     ; preds = %block_41fc0c, %block_41fbfb
  %174 = phi %struct.Memory* [ %163, %block_41fbfb ], [ %174, %block_41fc0c ]
  %175 = inttoptr i64 %37 to i32*
  %176 = load i32, i32* %175
  %177 = add i32 %176, -5
  %178 = lshr i32 %177, 31
  %179 = lshr i32 %176, 31
  %180 = xor i32 %178, %179
  %181 = add nuw nsw i32 %180, %179
  %182 = icmp eq i32 %181, 2
  %183 = icmp ne i32 %178, 0
  %184 = xor i1 %183, %182
  br i1 %184, label %block_41fc0c, label %block_41fcc8

block_41fbe0:                                     ; preds = %block_41fbc3, %block_41fcdb
  %185 = phi %struct.Memory* [ %45, %block_41fbc3 ], [ %163, %block_41fcdb ]
  %186 = inttoptr i64 %35 to i32*
  %187 = load i32, i32* %186
  %188 = add i32 %187, -5
  %189 = lshr i32 %188, 31
  %190 = lshr i32 %187, 31
  %191 = xor i32 %189, %190
  %192 = add nuw nsw i32 %191, %190
  %193 = icmp eq i32 %192, 2
  %194 = icmp ne i32 %189, 0
  %195 = xor i1 %194, %193
  br i1 %195, label %block_41fbea, label %block_41fcee
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404070_remapy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_404070:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %8, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %7, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -32
  %24 = load i64, i64* %6, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %14, -40
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = add i64 %14, -36
  %32 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast [32 x %union.VectorReg]* %11 to i32*
  %35 = getelementptr inbounds i8, i8* %32, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = bitcast i64* %33 to i32*
  %38 = getelementptr inbounds i8, i8* %32, i64 12
  %39 = bitcast i8* %38 to i32*
  %40 = add i64 %14, -16
  %41 = bitcast %union.VectorReg* %12 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast i64* %42 to double*
  %44 = add i64 %14, -32
  %45 = bitcast [32 x %union.VectorReg]* %11 to double*
  %46 = add i64 %14, -44
  %47 = bitcast i64* %33 to double*
  %48 = add i64 %14, -24
  br label %block_404087

block_4042b9:                                     ; preds = %block_404098
  %49 = inttoptr i64 %26 to i32*
  %50 = load i32, i32* %49
  %51 = add i32 %50, 1
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %4, align 8, !tbaa !1240
  %53 = inttoptr i64 %26 to i32*
  store i32 %51, i32* %53
  br label %block_404087

block_4041f0:                                     ; preds = %block_4041e6
  %54 = inttoptr i64 %44 to i64*
  %55 = load i64, i64* %54
  %56 = inttoptr i64 %26 to i32*
  %57 = load i32, i32* %56
  %58 = sext i32 %57 to i64
  %59 = mul nsw i64 %58, 200
  %60 = add i64 %59, %55
  %61 = inttoptr i64 %31 to i32*
  %62 = load i32, i32* %61
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 3
  %65 = add i64 %60, 120
  %66 = add i64 %65, %64
  %67 = inttoptr i64 %66 to double*
  %68 = load double, double* %67
  %69 = sext i32 %278 to i64
  %70 = shl nsw i64 %69, 3
  %71 = add i64 %70, ptrtoint (%map4_type* @map4 to i64)
  %72 = inttoptr i64 %71 to double*
  %73 = load double, double* %72
  %74 = inttoptr i64 %48 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %59, %75
  %77 = mul nsw i64 %69, 40
  %78 = add i64 %77, %76
  %79 = add i64 %64, %78
  %80 = inttoptr i64 %79 to double*
  %81 = load double, double* %80
  %82 = fmul double %73, %81
  store double %82, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %83 = fadd double %68, %82
  store double %83, double* %45, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %84 = inttoptr i64 %66 to double*
  store double %83, double* %84
  %85 = inttoptr i64 %46 to i32*
  %86 = load i32, i32* %85
  %87 = add i32 %86, 1
  %88 = inttoptr i64 %46 to i32*
  store i32 %87, i32* %88
  br label %block_4041e6

block_4042cc:                                     ; preds = %block_404087
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %92 = icmp ult i32 %135, 5
  %93 = zext i1 %92 to i8
  %94 = and i32 %136, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #11
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  %99 = xor i32 %136, %135
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = icmp eq i32 %136, 0
  %104 = zext i1 %103 to i8
  %105 = zext i1 %142 to i8
  store i8 %93, i8* %28, align 1, !tbaa !1248
  store i8 %98, i8* %89, align 1, !tbaa !1261
  store i8 %102, i8* %29, align 1, !tbaa !1262
  store i8 %104, i8* %90, align 1, !tbaa !1263
  store i8 %138, i8* %30, align 1, !tbaa !1264
  store i8 %105, i8* %91, align 1, !tbaa !1265
  %106 = inttoptr i64 %15 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %108 = inttoptr i64 %14 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %3, align 8, !tbaa !1240
  %110 = add i64 %14, 8
  store i64 %110, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %133

block_404098:                                     ; preds = %block_40426d, %block_404091
  %111 = phi %struct.Memory* [ %133, %block_404091 ], [ %276, %block_40426d ]
  %112 = inttoptr i64 %31 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, -5
  %115 = lshr i32 %114, 31
  %116 = lshr i32 %113, 31
  %117 = xor i32 %115, %116
  %118 = add nuw nsw i32 %117, %116
  %119 = icmp eq i32 %118, 2
  %120 = icmp ne i32 %115, 0
  %121 = xor i1 %120, %119
  br i1 %121, label %block_4040a2, label %block_4042b9

block_4040fe:                                     ; preds = %block_4040a2, %block_404108
  %122 = phi %struct.Memory* [ %111, %block_4040a2 ], [ %122, %block_404108 ]
  %123 = inttoptr i64 %46 to i32*
  %124 = load i32, i32* %123
  %125 = add i32 %124, -5
  %126 = lshr i32 %125, 31
  %127 = lshr i32 %124, 31
  %128 = xor i32 %126, %127
  %129 = add nuw nsw i32 %128, %127
  %130 = icmp eq i32 %129, 2
  %131 = icmp ne i32 %126, 0
  %132 = xor i1 %131, %130
  br i1 %132, label %block_404108, label %block_404185

block_404087:                                     ; preds = %block_4042b9, %block_404070
  %133 = phi %struct.Memory* [ %2, %block_404070 ], [ %111, %block_4042b9 ]
  %134 = inttoptr i64 %26 to i32*
  %135 = load i32, i32* %134
  %136 = add i32 %135, -5
  %137 = lshr i32 %136, 31
  %138 = trunc i32 %137 to i8
  %139 = lshr i32 %135, 31
  %140 = xor i32 %137, %139
  %141 = add nuw nsw i32 %140, %139
  %142 = icmp eq i32 %141, 2
  %143 = icmp ne i8 %138, 0
  %144 = xor i1 %143, %142
  br i1 %144, label %block_404091, label %block_4042cc

block_404185:                                     ; preds = %block_4040fe
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  %145 = inttoptr i64 %40 to i64*
  %146 = load i64, i64* %145
  %147 = inttoptr i64 %26 to i32*
  %148 = load i32, i32* %147
  %149 = sext i32 %148 to i64
  %150 = mul nsw i64 %149, 200
  %151 = add i64 %150, %146
  %152 = inttoptr i64 %31 to i32*
  %153 = load i32, i32* %152
  %154 = sext i32 %153 to i64
  %155 = shl nsw i64 %154, 3
  %156 = add i64 %151, 160
  %157 = add i64 %156, %155
  %158 = inttoptr i64 %157 to double*
  %159 = load double, double* %158
  store double %159, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %160 = inttoptr i64 %44 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %150, %161
  %163 = add i64 %162, 80
  %164 = add i64 %163, %155
  %165 = inttoptr i64 %164 to double*
  store double %159, double* %165
  %166 = inttoptr i64 %44 to i64*
  %167 = load i64, i64* %166
  %168 = inttoptr i64 %26 to i32*
  %169 = load i32, i32* %168
  %170 = sext i32 %169 to i64
  %171 = mul nsw i64 %170, 200
  %172 = add i64 %171, %167
  %173 = inttoptr i64 %31 to i32*
  %174 = load i32, i32* %173
  %175 = sext i32 %174 to i64
  %176 = shl nsw i64 %175, 3
  %177 = add i64 %172, 120
  %178 = add i64 %177, %176
  %179 = load double, double* %45, align 1
  %180 = inttoptr i64 %178 to double*
  store double %179, double* %180
  %181 = inttoptr i64 %46 to i32*
  store i32 0, i32* %181
  br label %block_4041e6

block_404091:                                     ; preds = %block_404087
  %182 = inttoptr i64 %31 to i32*
  store i32 0, i32* %182
  br label %block_404098

block_40426d:                                     ; preds = %block_4041e6
  %183 = inttoptr i64 %48 to i64*
  %184 = load i64, i64* %183
  %185 = inttoptr i64 %26 to i32*
  %186 = load i32, i32* %185
  %187 = sext i32 %186 to i64
  %188 = mul nsw i64 %187, 200
  %189 = add i64 %188, %184
  %190 = inttoptr i64 %31 to i32*
  %191 = load i32, i32* %190
  %192 = sext i32 %191 to i64
  %193 = shl nsw i64 %192, 3
  %194 = add i64 %189, 160
  %195 = add i64 %194, %193
  %196 = inttoptr i64 %195 to double*
  %197 = load double, double* %196
  store double %197, double* %45, align 1, !tbaa !1246
  store double 0.000000e+00, double* %47, align 1, !tbaa !1246
  %198 = inttoptr i64 %44 to i64*
  %199 = load i64, i64* %198
  %200 = add i64 %188, %199
  store i64 %192, i64* %5, align 8, !tbaa !1240
  %201 = add i64 %200, 160
  %202 = add i64 %201, %193
  %203 = inttoptr i64 %202 to double*
  store double %197, double* %203
  %204 = inttoptr i64 %31 to i32*
  %205 = load i32, i32* %204
  %206 = add i32 %205, 1
  %207 = inttoptr i64 %31 to i32*
  store i32 %206, i32* %207
  br label %block_404098

block_404108:                                     ; preds = %block_4040fe
  %208 = inttoptr i64 %44 to i64*
  %209 = load i64, i64* %208
  %210 = inttoptr i64 %26 to i32*
  %211 = load i32, i32* %210
  %212 = sext i32 %211 to i64
  %213 = mul nsw i64 %212, 200
  %214 = add i64 %213, %209
  %215 = inttoptr i64 %31 to i32*
  %216 = load i32, i32* %215
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 3
  %219 = add i64 %214, 40
  %220 = add i64 %219, %218
  %221 = inttoptr i64 %220 to double*
  %222 = load double, double* %221
  %223 = sext i32 %124 to i64
  %224 = shl nsw i64 %223, 3
  %225 = add i64 %224, ptrtoint (%map2_type* @map2 to i64)
  %226 = inttoptr i64 %225 to double*
  %227 = load double, double* %226
  %228 = inttoptr i64 %40 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %213, %229
  %231 = mul nsw i64 %223, 40
  %232 = add i64 %231, %230
  %233 = add i64 %218, %232
  %234 = inttoptr i64 %233 to double*
  %235 = load double, double* %234
  %236 = fmul double %227, %235
  store double %236, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %237 = fadd double %222, %236
  store double %237, double* %45, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %238 = inttoptr i64 %220 to double*
  store double %237, double* %238
  %239 = inttoptr i64 %46 to i32*
  %240 = load i32, i32* %239
  %241 = add i32 %240, 1
  %242 = inttoptr i64 %46 to i32*
  store i32 %241, i32* %242
  br label %block_4040fe

block_4040a2:                                     ; preds = %block_404098
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  %243 = inttoptr i64 %40 to i64*
  %244 = load i64, i64* %243
  %245 = inttoptr i64 %26 to i32*
  %246 = load i32, i32* %245
  %247 = sext i32 %246 to i64
  %248 = mul nsw i64 %247, 200
  %249 = add i64 %248, %244
  %250 = sext i32 %113 to i64
  %251 = shl nsw i64 %250, 3
  %252 = add i64 %251, %249
  %253 = inttoptr i64 %252 to double*
  %254 = load double, double* %253
  store double %254, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %255 = inttoptr i64 %44 to i64*
  %256 = load i64, i64* %255
  %257 = add i64 %248, %256
  %258 = add i64 %251, %257
  %259 = inttoptr i64 %258 to double*
  store double %254, double* %259
  %260 = inttoptr i64 %44 to i64*
  %261 = load i64, i64* %260
  %262 = inttoptr i64 %26 to i32*
  %263 = load i32, i32* %262
  %264 = sext i32 %263 to i64
  %265 = mul nsw i64 %264, 200
  %266 = add i64 %265, %261
  %267 = inttoptr i64 %31 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  %270 = shl nsw i64 %269, 3
  %271 = add i64 %266, 40
  %272 = add i64 %271, %270
  %273 = load double, double* %45, align 1
  %274 = inttoptr i64 %272 to double*
  store double %273, double* %274
  %275 = inttoptr i64 %46 to i32*
  store i32 0, i32* %275
  br label %block_4040fe

block_4041e6:                                     ; preds = %block_404185, %block_4041f0
  %276 = phi %struct.Memory* [ %122, %block_404185 ], [ %276, %block_4041f0 ]
  %277 = inttoptr i64 %46 to i32*
  %278 = load i32, i32* %277
  %279 = add i32 %278, -5
  %280 = lshr i32 %279, 31
  %281 = lshr i32 %278, 31
  %282 = xor i32 %280, %281
  %283 = add nuw nsw i32 %282, %281
  %284 = icmp eq i32 %283, 2
  %285 = icmp ne i32 %280, 0
  %286 = xor i1 %285, %284
  br i1 %286, label %block_4041f0, label %block_40426d
}

; Function Attrs: noinline
define %struct.Memory* @sub_400880_adaptation(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400880:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %16 = load i64, i64* %11, align 8
  %17 = load i64, i64* %10, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %11, align 8, !tbaa !1240
  %20 = add i64 %17, -56
  store i64 %20, i64* %10, align 8, !tbaa !1240
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = add i64 %17, -16
  %28 = load i64, i64* %9, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = add i64 %17, -20
  %31 = load i32, i32* %5, align 4
  %32 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %32
  %33 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i64 39, i64 29
  %36 = add i64 %35, %1
  br i1 %34, label %block_4008a7, label %block_40089d

block_400a76:                                     ; preds = %block_400a68
  store i64 8, i64* %9, align 8, !tbaa !1240
  %37 = add i64 %48, 20314
  %38 = add i64 %48, 10
  %39 = load i64, i64* %10, align 8, !tbaa !1240
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41
  store i64 %40, i64* %10, align 8, !tbaa !1240
  %42 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %37, %struct.Memory* %44)
  br label %block_400a80

block_400a68:                                     ; preds = %block_400a46, %block_400a5a
  %43 = phi i64 [ %332, %block_400a46 ], [ %220, %block_400a5a ]
  %44 = phi %struct.Memory* [ %322, %block_400a46 ], [ %219, %block_400a5a ]
  %45 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, i64 24, i64 14
  %48 = add i64 %43, %47
  br i1 %46, label %block_400a80, label %block_400a76

block_40095f:                                     ; preds = %block_40091b
  store i64 ptrtoint (%skip_type* @skip to i64), i64* %9, align 8, !tbaa !1240
  store i64 0, i64* %7, align 8, !tbaa !1240
  %49 = add i64 %287, -40
  %50 = inttoptr i64 %49 to i32*
  store i32 0, i32* %50
  %51 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %8, align 8, !tbaa !1240
  %53 = add i64 %294, 126849
  %54 = add i64 %294, 41
  %55 = load i64, i64* %10, align 8, !tbaa !1240
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57
  store i64 %56, i64* %10, align 8, !tbaa !1240
  %58 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %53, %struct.Memory* %286)
  %59 = load i64, i64* %3, align 8
  %60 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %61 = zext i32 %60 to i64
  store i64 %61, i64* %7, align 8, !tbaa !1240
  %62 = load i64, i64* %11, align 8
  %63 = add i64 %62, -44
  %64 = add i64 %59, 10
  %65 = inttoptr i64 %63 to i32*
  store i32 %60, i32* %65
  br label %block_400992

block_4009db:                                     ; preds = %block_400992, %block_4009c2
  %66 = phi i64 [ %316, %block_400992 ], [ %149, %block_4009c2 ]
  %67 = phi i64 [ %309, %block_400992 ], [ %179, %block_4009c2 ]
  %68 = phi %struct.Memory* [ %308, %block_400992 ], [ %178, %block_4009c2 ]
  %69 = add i64 %66, -73
  br label %block_400992

block_4009d1:                                     ; preds = %block_4009a8
  %70 = add i64 %179, -12
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  %74 = add i64 %179, -36
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = zext i32 %76 to i64
  %78 = add i64 %179, -40
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %6, align 8, !tbaa !1240
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %83 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %84 = zext i32 %83 to i64
  store i64 %84, i64* %82, align 8, !tbaa !1240
  %85 = add i64 %186, 49
  %86 = load i64, i64* %10, align 8, !tbaa !1240
  %87 = add i64 %86, -8
  %88 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %88
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %90 = load i64, i64* %89, align 8, !alias.scope !1458, !noalias !1461
  %91 = inttoptr i64 %86 to i64*
  %92 = load i64, i64* %91
  %93 = add i64 %86, 8
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %86, 16
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %86, 24
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %86, 32
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %86, 40
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %86, 48
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  %111 = add i64 %86, 56
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %86, 64
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  %117 = add i64 %86, 72
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = inttoptr i64 %87 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %3, align 8, !alias.scope !1458, !noalias !1461
  store i64 %86, i64* %10, align 8, !alias.scope !1458, !noalias !1461
  %122 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 40), i64 %73, i64 %77, i64 %81, i64 %84, i64 %90, i64 %92, i64 %95, i64 %98, i64 %101, i64 %104, i64 %107, i64 %110, i64 %113, i64 %116, i64 %119), !noalias !1458
  %123 = load i64, i64* %11, align 8
  %124 = add i64 %123, -32
  %125 = load i64, i64* %3, align 8
  %126 = inttoptr i64 %124 to i32*
  store i32 0, i32* %126
  %127 = add i64 %123, -48
  %128 = trunc i64 %122 to i32
  %129 = add i64 %125, 10
  %130 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %130
  %131 = add i64 %123, -28
  br label %block_400a0c

block_40094d:                                     ; preds = %block_400935
  %132 = add i64 %160, -36
  store i64 %132, i64* %8, align 8, !tbaa !1240
  %133 = add i64 %160, -8
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %9, align 8, !tbaa !1240
  %136 = add i64 %167, 1219
  %137 = add i64 %167, 13
  %138 = load i64, i64* %10, align 8, !tbaa !1240
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140
  store i64 %139, i64* %10, align 8, !tbaa !1240
  %141 = tail call %struct.Memory* @sub_400e10_do_refine(%struct.State* nonnull %0, i64 %136, %struct.Memory* %161)
  %142 = load i64, i64* %3, align 8
  %143 = add i64 %142, -63
  %144 = load i64, i64* %11, align 8
  br label %block_40091b

block_4009c2:                                     ; preds = %block_4009a8
  %145 = add i64 %179, -8
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  %148 = inttoptr i64 %147 to i32*
  store i32 1, i32* %148
  %149 = add i64 %186, 25
  br label %block_4009db

block_40093f:                                     ; preds = %block_400935
  store i64 %162, i64* %9, align 8, !tbaa !1240
  %150 = add i64 %167, 529
  %151 = add i64 %167, 9
  %152 = load i64, i64* %10, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  store i64 %153, i64* %10, align 8, !tbaa !1240
  %155 = tail call %struct.Memory* @sub_400b50_check_refine(%struct.State* nonnull %0, i64 %150, %struct.Memory* %161)
  %156 = load i64, i64* %3, align 8
  %157 = add i64 %156, -19
  %158 = load i64, i64* %11, align 8
  br label %block_400935

block_400935:                                     ; preds = %block_40092e, %block_40093f
  %159 = phi i64 [ %383, %block_40092e ], [ %157, %block_40093f ]
  %160 = phi i64 [ %287, %block_40092e ], [ %158, %block_40093f ]
  %161 = phi %struct.Memory* [ %286, %block_40092e ], [ %155, %block_40093f ]
  %162 = add i64 %160, -24
  %163 = inttoptr i64 %162 to i32*
  %164 = load i32, i32* %163
  %165 = icmp eq i32 %164, 0
  %166 = select i1 %165, i64 24, i64 10
  %167 = add i64 %159, %166
  br i1 %165, label %block_40094d, label %block_40093f

block_4009a8:                                     ; preds = %block_400992
  store i64 %310, i64* %9, align 8, !tbaa !1240
  %168 = add i64 %309, -40
  store i64 %168, i64* %8, align 8, !tbaa !1240
  %169 = add i64 %309, -44
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %7, align 8, !tbaa !1240
  %173 = add i64 %316, 8648
  %174 = add i64 %316, 16
  %175 = load i64, i64* %10, align 8, !tbaa !1240
  %176 = add i64 %175, -8
  %177 = inttoptr i64 %176 to i64*
  store i64 %174, i64* %177
  store i64 %176, i64* %10, align 8, !tbaa !1240
  %178 = tail call %struct.Memory* @sub_402b70_do_coarsen(%struct.State* nonnull %0, i64 %173, %struct.Memory* %308)
  %179 = load i64, i64* %11, align 8
  %180 = add i64 %179, -16
  %181 = load i64, i64* %3, align 8
  %182 = inttoptr i64 %180 to i32*
  %183 = load i32, i32* %182
  %184 = icmp eq i32 %183, 0
  %185 = select i1 %184, i64 25, i64 10
  %186 = add i64 %181, %185
  br i1 %184, label %block_4009d1, label %block_4009c2

block_400a1c:                                     ; preds = %block_400a0c
  %187 = sext i32 %336 to i64
  %188 = shl nsw i64 %187, 2
  %189 = add i64 %188, ptrtoint (%mt_to_id_type* @mt_to_id to i64)
  %190 = inttoptr i64 %189 to i32*
  %191 = load i32, i32* %190
  %192 = inttoptr i64 %131 to i32*
  store i32 %191, i32* %192
  %193 = inttoptr i64 %124 to i32*
  %194 = load i32, i32* %193
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %6, align 8, !tbaa !1240
  %196 = inttoptr i64 %131 to i32*
  %197 = load i32, i32* %196
  %198 = sext i32 %197 to i64
  %199 = shl nsw i64 %198, 2
  %200 = add i64 %199, ptrtoint (%id_to_mt_type* @id_to_mt to i64)
  %201 = inttoptr i64 %200 to i32*
  store i32 %194, i32* %201
  %202 = inttoptr i64 %124 to i32*
  %203 = load i32, i32* %202
  %204 = add i32 %203, 1
  %205 = inttoptr i64 %124 to i32*
  store i32 %204, i32* %205
  %206 = add i64 %350, -16
  br label %block_400a0c

block_400a5a:                                     ; preds = %block_400a46
  %207 = add i64 %332, 32422
  %208 = add i64 %332, 7
  %209 = load i64, i64* %10, align 8, !tbaa !1240
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211
  store i64 %210, i64* %10, align 8, !tbaa !1240
  %212 = tail call %struct.Memory* @sub_408900_mortar(%struct.State* nonnull %0, i64 %207, %struct.Memory* %322)
  %213 = load i64, i64* %3, align 8
  %214 = add i64 %213, 94159
  %215 = add i64 %213, 7
  %216 = load i64, i64* %10, align 8, !tbaa !1240
  %217 = add i64 %216, -8
  %218 = inttoptr i64 %217 to i64*
  store i64 %215, i64* %218
  store i64 %217, i64* %10, align 8, !tbaa !1240
  %219 = tail call %struct.Memory* @sub_417a30_prepwork(%struct.State* nonnull %0, i64 %214, %struct.Memory* %212)
  %220 = load i64, i64* %3, align 8
  br label %block_400a68

block_4008a7:                                     ; preds = %block_40089d, %block_400880
  %221 = phi i64 [ %18, %block_400880 ], [ %391, %block_40089d ]
  %222 = phi i64 [ %36, %block_400880 ], [ %390, %block_40089d ]
  %223 = phi %struct.Memory* [ %2, %block_400880 ], [ %389, %block_40089d ]
  %224 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 8) to double*)
  %225 = bitcast [32 x %union.VectorReg]* %12 to double*
  store double %224, double* %225, align 1, !tbaa !1246
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %227 = bitcast i64* %226 to double*
  store double 0.000000e+00, double* %227, align 1, !tbaa !1246
  %228 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 16) to double*)
  %229 = bitcast %union.VectorReg* %13 to double*
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %231 = bitcast %union.VectorReg* %14 to i8*
  %232 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 24) to double*)
  %233 = bitcast %union.VectorReg* %14 to double*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %235 = add i64 %221, -8
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = inttoptr i64 %237 to i32*
  store i32 0, i32* %238
  %239 = bitcast %union.VectorReg* %15 to i8*
  %240 = bitcast double %228 to <2 x i32>
  %241 = extractelement <2 x i32> %240, i32 0
  %242 = bitcast %union.VectorReg* %15 to i32*
  store i32 %241, i32* %242, align 1, !tbaa !1266
  %243 = extractelement <2 x i32> %240, i32 1
  %244 = getelementptr inbounds i8, i8* %239, i64 4
  %245 = bitcast i8* %244 to i32*
  store i32 %243, i32* %245, align 1, !tbaa !1266
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %247 = bitcast i64* %246 to i32*
  %248 = getelementptr inbounds i8, i8* %239, i64 12
  %249 = bitcast i8* %248 to i32*
  %250 = bitcast %union.VectorReg* %15 to double*
  %251 = load double, double* %250, align 1
  %252 = load double, double* bitcast (%time_type* @time to double*)
  %253 = fmul double %251, %252
  %254 = fadd double %232, %253
  store double %254, double* bitcast (%x0_type* @x0 to double*)
  %255 = bitcast %union.VectorReg* %14 to i32*
  store i32 %241, i32* %255, align 1, !tbaa !1266
  %256 = getelementptr inbounds i8, i8* %231, i64 4
  %257 = bitcast i8* %256 to i32*
  store i32 %243, i32* %257, align 1, !tbaa !1266
  %258 = bitcast i64* %234 to i32*
  store i32 0, i32* %258, align 1, !tbaa !1266
  %259 = getelementptr inbounds i8, i8* %231, i64 12
  %260 = bitcast i8* %259 to i32*
  store i32 0, i32* %260, align 1, !tbaa !1266
  %261 = load double, double* %233, align 1
  %262 = load double, double* bitcast (%time_type* @time to double*)
  %263 = fmul double %261, %262
  store double %263, double* %233, align 1, !tbaa !1246
  %264 = bitcast double %224 to <2 x i32>
  %265 = extractelement <2 x i32> %264, i32 0
  store i32 %265, i32* %242, align 1, !tbaa !1266
  %266 = extractelement <2 x i32> %264, i32 1
  store i32 %266, i32* %245, align 1, !tbaa !1266
  store i32 0, i32* %247, align 1, !tbaa !1266
  store i32 0, i32* %249, align 1, !tbaa !1266
  %267 = load double, double* %250, align 1
  %268 = fadd double %267, %263
  store double %268, double* %250, align 1, !tbaa !1246
  store double %268, double* bitcast (%_y0_type* @_y0 to double*)
  %269 = load double, double* bitcast (%time_type* @time to double*)
  %270 = fmul double %228, %269
  store double %270, double* %229, align 1, !tbaa !1246
  store i64 0, i64* %230, align 1, !tbaa !1246
  %271 = load double, double* %225, align 1
  %272 = fadd double %271, %270
  store double %272, double* %225, align 1, !tbaa !1246
  store double %272, double* bitcast (%z0_type* @z0 to double*)
  %273 = load i64, i64* %11, align 8
  %274 = add i64 %273, -36
  %275 = add i64 %222, 116
  %276 = inttoptr i64 %274 to i32*
  store i32 0, i32* %276
  br label %block_40091b

block_40091b:                                     ; preds = %block_4008a7, %block_40094d
  %277 = phi i64 [ %275, %block_4008a7 ], [ %143, %block_40094d ]
  %278 = phi i64 [ %273, %block_4008a7 ], [ %144, %block_40094d ]
  %279 = phi %struct.Memory* [ %223, %block_4008a7 ], [ %141, %block_40094d ]
  %280 = add i64 %278, -20
  store i64 %280, i64* %9, align 8, !tbaa !1240
  %281 = add i64 %277, 373
  %282 = add i64 %277, 9
  %283 = load i64, i64* %10, align 8, !tbaa !1240
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285
  store i64 %284, i64* %10, align 8, !tbaa !1240
  %286 = tail call %struct.Memory* @sub_400a90_find_refine(%struct.State* nonnull %0, i64 %281, %struct.Memory* %279)
  %287 = load i64, i64* %11, align 8
  %288 = add i64 %287, -20
  %289 = load i64, i64* %3, align 8
  %290 = inttoptr i64 %288 to i32*
  %291 = load i32, i32* %290
  %292 = icmp eq i32 %291, 0
  %293 = select i1 %292, i64 59, i64 10
  %294 = add i64 %289, %293
  br i1 %292, label %block_40095f, label %block_40092e

block_400992:                                     ; preds = %block_4009db, %block_40095f
  %295 = phi i64 [ %64, %block_40095f ], [ %69, %block_4009db ]
  %296 = phi i64 [ %62, %block_40095f ], [ %67, %block_4009db ]
  %297 = phi %struct.Memory* [ %58, %block_40095f ], [ %68, %block_4009db ]
  %298 = add i64 %296, -16
  store i64 %298, i64* %9, align 8, !tbaa !1240
  %299 = add i64 %296, -44
  %300 = inttoptr i64 %299 to i32*
  %301 = load i32, i32* %300
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %8, align 8, !tbaa !1240
  %303 = add i64 %295, 8414
  %304 = add i64 %295, 12
  %305 = load i64, i64* %10, align 8, !tbaa !1240
  %306 = add i64 %305, -8
  %307 = inttoptr i64 %306 to i64*
  store i64 %304, i64* %307
  store i64 %306, i64* %10, align 8, !tbaa !1240
  %308 = tail call %struct.Memory* @sub_402a70_find_coarsen(%struct.State* nonnull %0, i64 %303, %struct.Memory* %297)
  %309 = load i64, i64* %11, align 8
  %310 = add i64 %309, -16
  %311 = load i64, i64* %3, align 8
  %312 = inttoptr i64 %310 to i32*
  %313 = load i32, i32* %312
  %314 = icmp eq i32 %313, 0
  %315 = select i1 %314, i64 61, i64 10
  %316 = add i64 %311, %315
  br i1 %314, label %block_4009db, label %block_4009a8

block_400a46:                                     ; preds = %block_400a0c
  %317 = add i64 %350, 71018
  %318 = add i64 %350, 7
  %319 = load i64, i64* %10, align 8, !tbaa !1240
  %320 = add i64 %319, -8
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321
  store i64 %320, i64* %10, align 8, !tbaa !1240
  %322 = tail call %struct.Memory* @sub_411fb0_move(%struct.State* nonnull %0, i64 %317, %struct.Memory* %334)
  %323 = load i64, i64* %11, align 8
  %324 = add i64 %323, -8
  %325 = load i64, i64* %3, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326
  store i64 %327, i64* %6, align 8, !tbaa !1240
  %328 = inttoptr i64 %327 to i32*
  %329 = load i32, i32* %328
  %330 = icmp eq i32 %329, 0
  %331 = select i1 %330, i64 27, i64 13
  %332 = add i64 %325, %331
  br i1 %330, label %block_400a68, label %block_400a5a

block_400a0c:                                     ; preds = %block_400a1c, %block_4009d1
  %333 = phi i64 [ %129, %block_4009d1 ], [ %206, %block_400a1c ]
  %334 = phi %struct.Memory* [ %178, %block_4009d1 ], [ %334, %block_400a1c ]
  %335 = inttoptr i64 %124 to i32*
  %336 = load i32, i32* %335
  %337 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %338 = sub i32 %336, %337
  %339 = lshr i32 %338, 31
  %340 = trunc i32 %339 to i8
  %341 = lshr i32 %336, 31
  %342 = lshr i32 %337, 31
  %343 = xor i32 %342, %341
  %344 = xor i32 %339, %341
  %345 = add nuw nsw i32 %344, %343
  %346 = icmp eq i32 %345, 2
  %347 = icmp ne i8 %340, 0
  %348 = xor i1 %347, %346
  %349 = select i1 %348, i64 16, i64 58
  %350 = add i64 %333, %349
  br i1 %348, label %block_400a1c, label %block_400a46

block_400a80:                                     ; preds = %block_400a68, %block_400a76
  %351 = phi %struct.Memory* [ %44, %block_400a68 ], [ %42, %block_400a76 ]
  %352 = load i64, i64* %10, align 8
  %353 = add i64 %352, 48
  %354 = icmp ugt i64 %352, -49
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %21, align 1, !tbaa !1248
  %356 = trunc i64 %353 to i32
  %357 = and i32 %356, 255
  %358 = tail call i32 @llvm.ctpop.i32(i32 %357) #11
  %359 = trunc i32 %358 to i8
  %360 = and i8 %359, 1
  %361 = xor i8 %360, 1
  store i8 %361, i8* %22, align 1, !tbaa !1261
  %362 = xor i64 %352, 16
  %363 = xor i64 %362, %353
  %364 = lshr i64 %363, 4
  %365 = trunc i64 %364 to i8
  %366 = and i8 %365, 1
  store i8 %366, i8* %23, align 1, !tbaa !1262
  %367 = icmp eq i64 %353, 0
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %24, align 1, !tbaa !1263
  %369 = lshr i64 %353, 63
  %370 = trunc i64 %369 to i8
  store i8 %370, i8* %25, align 1, !tbaa !1264
  %371 = lshr i64 %352, 63
  %372 = xor i64 %369, %371
  %373 = add nuw nsw i64 %372, %369
  %374 = icmp eq i64 %373, 2
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %26, align 1, !tbaa !1265
  %376 = add i64 %352, 56
  %377 = inttoptr i64 %353 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %11, align 8, !tbaa !1240
  %379 = inttoptr i64 %376 to i64*
  %380 = load i64, i64* %379
  store i64 %380, i64* %3, align 8, !tbaa !1240
  %381 = add i64 %352, 64
  store i64 %381, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %351

block_40092e:                                     ; preds = %block_40091b
  %382 = add i64 %287, -24
  %383 = add i64 %294, 7
  %384 = inttoptr i64 %382 to i32*
  store i32 1, i32* %384
  br label %block_400935

block_40089d:                                     ; preds = %block_400880
  store i64 8, i64* %9, align 8, !tbaa !1240
  %385 = add i64 %36, 20707
  %386 = add i64 %36, 10
  %387 = add i64 %17, -64
  %388 = inttoptr i64 %387 to i64*
  store i64 %386, i64* %388
  store i64 %387, i64* %10, align 8, !tbaa !1240
  %389 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %385, %struct.Memory* %2)
  %390 = load i64, i64* %3, align 8
  %391 = load i64, i64* %11, align 8
  br label %block_4008a7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41dc00_transfb_c(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41dc00:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %26, align 1, !tbaa !1244
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = bitcast i64* %25 to i32*
  store i32 0, i32* %29, align 1, !tbaa !1244
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1944) to double*)
  %33 = bitcast %union.VectorReg* %12 to double*
  store double %32, double* %33, align 1, !tbaa !1246
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  store double 0.000000e+00, double* %35, align 1, !tbaa !1246
  %36 = add i64 %15, -16
  %37 = load i64, i64* %8, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %38
  %39 = add i64 %15, -24
  %40 = inttoptr i64 %39 to double*
  store double %32, double* %40
  %41 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%tmort_type* @tmort to i64), i64* %8, align 8, !tbaa !1240
  %43 = add i64 %1, 7248
  %44 = add i64 %1, 53
  %45 = add i64 %15, -96
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  store i64 %45, i64* %9, align 8, !tbaa !1240
  %47 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %48 = load i64, i64* %10, align 8
  %49 = add i64 %48, -52
  %50 = inttoptr i64 %49 to i32*
  store i32 0, i32* %50
  %51 = add i64 %48, -56
  %52 = bitcast [32 x %union.VectorReg]* %11 to double*
  %53 = bitcast i64* %25 to double*
  %54 = add i64 %48, -20
  %55 = add i64 %48, -24
  %56 = add i64 %48, -28
  %57 = add i64 %48, -32
  %58 = add i64 %48, -36
  %59 = add i64 %48, -40
  %60 = add i64 %48, -44
  %61 = add i64 %48, -48
  %62 = add i64 %48, -8
  %63 = bitcast %union.VectorReg* %13 to i8*
  %64 = bitcast [32 x %union.VectorReg]* %11 to <2 x i32>*
  %65 = bitcast i64* %25 to <2 x i32>*
  %66 = bitcast %union.VectorReg* %13 to i32*
  %67 = getelementptr inbounds i8, i8* %63, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to i32*
  %71 = getelementptr inbounds i8, i8* %63, i64 12
  %72 = bitcast i8* %71 to i32*
  %73 = bitcast %union.VectorReg* %13 to double*
  %74 = add i64 %48, -60
  %75 = add i64 %48, -64
  %76 = add i64 %48, -72
  %77 = add i64 %48, -68
  %78 = bitcast i64* %25 to <2 x i32>*
  br label %block_41dc3c

block_41de7f:                                     ; preds = %block_41de75
  %79 = inttoptr i64 %75 to i32*
  store i32 1, i32* %79
  br label %block_41de86

block_41df7b:                                     ; preds = %block_41df4b
  %80 = inttoptr i64 %75 to i32*
  store i32 1, i32* %80
  br label %block_41df82

block_41e23d:                                     ; preds = %block_41e20d
  %81 = inttoptr i64 %75 to i32*
  store i32 1, i32* %81
  br label %block_41e244

block_41e069:                                     ; preds = %block_41e073, %block_41e062
  %82 = phi %struct.Memory* [ %513, %block_41e062 ], [ %82, %block_41e073 ]
  %83 = inttoptr i64 %75 to i32*
  %84 = load i32, i32* %83
  %85 = add i32 %84, -4
  %86 = lshr i32 %85, 31
  %87 = lshr i32 %84, 31
  %88 = xor i32 %86, %87
  %89 = add nuw nsw i32 %88, %87
  %90 = icmp eq i32 %89, 2
  %91 = icmp ne i32 %86, 0
  %92 = xor i1 %91, %90
  br i1 %92, label %block_41e073, label %block_41e124.loopexit

block_41e15e:                                     ; preds = %block_41e168, %block_41e157
  %93 = phi %struct.Memory* [ %250, %block_41e157 ], [ %93, %block_41e168 ]
  %94 = inttoptr i64 %75 to i32*
  %95 = load i32, i32* %94
  %96 = add i32 %95, -4
  %97 = lshr i32 %96, 31
  %98 = lshr i32 %95, 31
  %99 = xor i32 %97, %98
  %100 = add nuw nsw i32 %99, %98
  %101 = icmp eq i32 %100, 2
  %102 = icmp ne i32 %97, 0
  %103 = xor i1 %102, %101
  br i1 %103, label %block_41e168, label %block_41e20d.loopexit

block_41dc5d:                                     ; preds = %block_41dc53
  %104 = sext i32 %125 to i64
  %105 = mul nsw i64 %104, 24
  %106 = add i64 %105, ptrtoint (%cbc_type* @cbc to i64)
  %107 = sext i32 %115 to i64
  store i64 %107, i64* %5, align 8, !tbaa !1240
  %108 = shl nsw i64 %107, 2
  %109 = add i64 %108, %106
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110
  %112 = icmp eq i32 %111, 3
  br i1 %112, label %block_41e302, label %block_41dc80

block_41dc53:                                     ; preds = %block_41e302, %block_41dc4c
  %113 = phi %struct.Memory* [ %201, %block_41dc4c ], [ %475, %block_41e302 ]
  %114 = inttoptr i64 %51 to i32*
  %115 = load i32, i32* %114
  %116 = add i32 %115, -6
  %117 = lshr i32 %116, 31
  %118 = lshr i32 %115, 31
  %119 = xor i32 %117, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = icmp ne i32 %117, 0
  %123 = xor i1 %122, %121
  %124 = inttoptr i64 %49 to i32*
  %125 = load i32, i32* %124
  br i1 %123, label %block_41dc5d, label %block_41e315

block_41e062:                                     ; preds = %block_41e02f
  %126 = inttoptr i64 %75 to i32*
  store i32 1, i32* %126
  br label %block_41e069

block_41e24e:                                     ; preds = %block_41e244
  %127 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %128 = inttoptr i64 %49 to i32*
  %129 = load i32, i32* %128
  %130 = sext i32 %129 to i64
  %131 = mul nsw i64 %130, 600
  %132 = add i64 %131, ptrtoint (%idel_type* @idel to i64)
  %133 = inttoptr i64 %51 to i32*
  %134 = load i32, i32* %133
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, 100
  %137 = add i64 %136, %132
  %138 = sext i32 %504 to i64
  %139 = mul nsw i64 %138, 20
  store i64 %139, i64* %6, align 8, !tbaa !1240
  %140 = add i64 %139, %137
  %141 = inttoptr i64 %140 to i32*
  %142 = load i32, i32* %141
  %143 = inttoptr i64 %76 to i32*
  store i32 %142, i32* %143
  %144 = inttoptr i64 %49 to i32*
  %145 = load i32, i32* %144
  %146 = sext i32 %145 to i64
  %147 = mul nsw i64 %146, 2400
  %148 = add i64 %147, ptrtoint (%idmo_type* @idmo to i64)
  %149 = inttoptr i64 %51 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %150 to i64
  %152 = mul nsw i64 %151, 400
  %153 = add i64 %152, %148
  %154 = inttoptr i64 %75 to i32*
  %155 = load i32, i32* %154
  %156 = sext i32 %155 to i64
  %157 = mul nsw i64 %156, 20
  %158 = add i64 %157, %153
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159
  %161 = zext i32 %160 to i64
  store i64 %161, i64* %7, align 8, !tbaa !1240
  %162 = inttoptr i64 %77 to i32*
  store i32 %160, i32* %162
  %163 = inttoptr i64 %77 to i32*
  %164 = load i32, i32* %163
  %165 = sext i32 %164 to i64
  %166 = shl nsw i64 %165, 3
  %167 = add i64 %166, ptrtoint (%tmort_type* @tmort to i64)
  %168 = inttoptr i64 %167 to double*
  %169 = load double, double* %168
  %170 = inttoptr i64 %62 to i64*
  %171 = load i64, i64* %170
  %172 = inttoptr i64 %76 to i32*
  %173 = load i32, i32* %172
  %174 = sext i32 %173 to i64
  store i64 %174, i64* %5, align 8, !tbaa !1240
  %175 = shl nsw i64 %174, 3
  %176 = add i64 %175, %171
  %177 = inttoptr i64 %176 to double*
  %178 = load double, double* %177
  %179 = fmul double %127, %178
  store double %179, double* %52, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %180 = fadd double %169, %179
  store double %180, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %181 = inttoptr i64 %167 to double*
  store double %180, double* %181
  %182 = inttoptr i64 %75 to i32*
  %183 = load i32, i32* %182
  %184 = add i32 %183, 1
  %185 = inttoptr i64 %75 to i32*
  store i32 %184, i32* %185
  br label %block_41e244

block_41dc4c:                                     ; preds = %block_41dc3c
  %186 = inttoptr i64 %51 to i32*
  store i32 0, i32* %186
  br label %block_41dc53

block_41df4b:                                     ; preds = %block_41de75
  %187 = inttoptr i64 %49 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, 2400
  %191 = add i64 %190, ptrtoint (%idmo_type* @idmo to i64)
  %192 = inttoptr i64 %51 to i32*
  %193 = load i32, i32* %192
  %194 = sext i32 %193 to i64
  %195 = mul nsw i64 %194, 400
  %196 = add i64 %195, %191
  %197 = add i64 %196, 16
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198
  %200 = icmp eq i32 %199, -1
  br i1 %200, label %block_41df7b, label %block_41e02f

block_41dc3c:                                     ; preds = %block_41e315, %block_41dc00
  %201 = phi %struct.Memory* [ %47, %block_41dc00 ], [ %113, %block_41e315 ]
  %202 = inttoptr i64 %49 to i32*
  %203 = load i32, i32* %202
  %204 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %205 = sub i32 %203, %204
  %206 = lshr i32 %205, 31
  %207 = lshr i32 %203, 31
  %208 = lshr i32 %204, 31
  %209 = xor i32 %208, %207
  %210 = xor i32 %206, %207
  %211 = add nuw nsw i32 %210, %209
  %212 = icmp eq i32 %211, 2
  %213 = icmp ne i32 %206, 0
  %214 = xor i1 %213, %212
  br i1 %214, label %block_41dc4c, label %block_41e328

block_41e328:                                     ; preds = %block_41dc3c
  %215 = zext i32 %203 to i64
  store i64 %215, i64* %4, align 8
  %216 = load i64, i64* %9, align 8
  %217 = add i64 %216, 80
  %218 = icmp ugt i64 %216, -81
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %18, align 1, !tbaa !1248
  %220 = trunc i64 %217 to i32
  %221 = and i32 %220, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #11
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %19, align 1, !tbaa !1261
  %226 = xor i64 %216, 16
  %227 = xor i64 %226, %217
  %228 = lshr i64 %227, 4
  %229 = trunc i64 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %20, align 1, !tbaa !1262
  %231 = icmp eq i64 %217, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %21, align 1, !tbaa !1263
  %233 = lshr i64 %217, 63
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %22, align 1, !tbaa !1264
  %235 = lshr i64 %216, 63
  %236 = xor i64 %233, %235
  %237 = add nuw nsw i64 %236, %233
  %238 = icmp eq i64 %237, 2
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %23, align 1, !tbaa !1265
  %240 = add i64 %216, 88
  %241 = inttoptr i64 %217 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %10, align 8, !tbaa !1240
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !tbaa !1240
  %245 = add i64 %216, 96
  store i64 %245, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %201

block_41df38:                                     ; preds = %block_41de86
  %246 = inttoptr i64 %74 to i32*
  %247 = load i32, i32* %246
  %248 = add i32 %247, 1
  %249 = inttoptr i64 %74 to i32*
  store i32 %248, i32* %249
  br label %block_41de75

block_41e124.loopexit:                            ; preds = %block_41e069
  br label %block_41e124

block_41e124:                                     ; preds = %block_41e02f, %block_41e124.loopexit
  %250 = phi %struct.Memory* [ %513, %block_41e02f ], [ %82, %block_41e124.loopexit ]
  %251 = inttoptr i64 %49 to i32*
  %252 = load i32, i32* %251
  %253 = sext i32 %252 to i64
  %254 = mul nsw i64 %253, 2400
  %255 = add i64 %254, ptrtoint (%idmo_type* @idmo to i64)
  %256 = inttoptr i64 %51 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 400
  %260 = add i64 %259, %255
  %261 = add i64 %260, 184
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = icmp eq i32 %263, -1
  br i1 %264, label %block_41e157, label %block_41e20d

block_41de75:                                     ; preds = %block_41dc80, %block_41df38
  %265 = phi %struct.Memory* [ %113, %block_41dc80 ], [ %480, %block_41df38 ]
  %266 = inttoptr i64 %74 to i32*
  %267 = load i32, i32* %266
  %268 = add i32 %267, -4
  %269 = lshr i32 %268, 31
  %270 = lshr i32 %267, 31
  %271 = xor i32 %269, %270
  %272 = add nuw nsw i32 %271, %270
  %273 = icmp eq i32 %272, 2
  %274 = icmp ne i32 %269, 0
  %275 = xor i1 %274, %273
  br i1 %275, label %block_41de7f, label %block_41df4b

block_41e157:                                     ; preds = %block_41e124
  %276 = inttoptr i64 %75 to i32*
  store i32 1, i32* %276
  br label %block_41e15e

block_41e315:                                     ; preds = %block_41dc53
  %277 = add i32 %125, 1
  %278 = inttoptr i64 %49 to i32*
  store i32 %277, i32* %278
  br label %block_41dc3c

block_41e073:                                     ; preds = %block_41e069
  %279 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %280 = inttoptr i64 %49 to i32*
  %281 = load i32, i32* %280
  %282 = sext i32 %281 to i64
  %283 = mul nsw i64 %282, 600
  %284 = add i64 %283, ptrtoint (%idel_type* @idel to i64)
  %285 = inttoptr i64 %51 to i32*
  %286 = load i32, i32* %285
  %287 = sext i32 %286 to i64
  %288 = mul nsw i64 %287, 100
  %289 = add i64 %288, %284
  %290 = sext i32 %84 to i64
  %291 = mul nsw i64 %290, 20
  store i64 %291, i64* %6, align 8, !tbaa !1240
  %292 = add i64 %291, %289
  %293 = add i64 %292, 16
  %294 = inttoptr i64 %293 to i32*
  %295 = load i32, i32* %294
  %296 = inttoptr i64 %76 to i32*
  store i32 %295, i32* %296
  %297 = inttoptr i64 %49 to i32*
  %298 = load i32, i32* %297
  %299 = sext i32 %298 to i64
  %300 = mul nsw i64 %299, 2400
  %301 = add i64 %300, ptrtoint (%idmo_type* @idmo to i64)
  %302 = inttoptr i64 %51 to i32*
  %303 = load i32, i32* %302
  %304 = sext i32 %303 to i64
  %305 = mul nsw i64 %304, 400
  %306 = add i64 %305, %301
  %307 = inttoptr i64 %75 to i32*
  %308 = load i32, i32* %307
  %309 = sext i32 %308 to i64
  %310 = mul nsw i64 %309, 20
  %311 = add i64 %310, %306
  %312 = add i64 %311, 16
  %313 = inttoptr i64 %312 to i32*
  %314 = load i32, i32* %313
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %7, align 8, !tbaa !1240
  %316 = inttoptr i64 %77 to i32*
  store i32 %314, i32* %316
  %317 = inttoptr i64 %77 to i32*
  %318 = load i32, i32* %317
  %319 = sext i32 %318 to i64
  %320 = shl nsw i64 %319, 3
  %321 = add i64 %320, ptrtoint (%tmort_type* @tmort to i64)
  %322 = inttoptr i64 %321 to double*
  %323 = load double, double* %322
  %324 = inttoptr i64 %62 to i64*
  %325 = load i64, i64* %324
  %326 = inttoptr i64 %76 to i32*
  %327 = load i32, i32* %326
  %328 = sext i32 %327 to i64
  %329 = shl nsw i64 %328, 3
  %330 = add i64 %329, %325
  %331 = inttoptr i64 %330 to double*
  %332 = load double, double* %331
  %333 = fmul double %279, %332
  store double %333, double* %52, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %334 = fadd double %323, %333
  store double %334, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %335 = inttoptr i64 %321 to double*
  store double %334, double* %335
  %336 = inttoptr i64 %75 to i32*
  %337 = load i32, i32* %336
  %338 = add i32 %337, 1
  %339 = inttoptr i64 %75 to i32*
  store i32 %338, i32* %339
  br label %block_41e069

block_41e20d.loopexit:                            ; preds = %block_41e15e
  br label %block_41e20d

block_41e20d:                                     ; preds = %block_41e20d.loopexit, %block_41e124
  %340 = phi %struct.Memory* [ %250, %block_41e124 ], [ %93, %block_41e20d.loopexit ]
  %341 = inttoptr i64 %49 to i32*
  %342 = load i32, i32* %341
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, 2400
  %345 = add i64 %344, ptrtoint (%idmo_type* @idmo to i64)
  %346 = inttoptr i64 %51 to i32*
  %347 = load i32, i32* %346
  %348 = sext i32 %347 to i64
  %349 = mul nsw i64 %348, 400
  store i64 %349, i64* %5, align 8, !tbaa !1240
  %350 = add i64 %349, %345
  %351 = add i64 %350, 80
  %352 = inttoptr i64 %351 to i32*
  %353 = load i32, i32* %352
  %354 = icmp eq i32 %353, -1
  br i1 %354, label %block_41e23d, label %block_41e302

block_41df8c:                                     ; preds = %block_41df82
  %355 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %356 = inttoptr i64 %49 to i32*
  %357 = load i32, i32* %356
  %358 = sext i32 %357 to i64
  %359 = mul nsw i64 %358, 600
  %360 = add i64 %359, ptrtoint (%idel_type* @idel to i64)
  %361 = inttoptr i64 %51 to i32*
  %362 = load i32, i32* %361
  %363 = sext i32 %362 to i64
  %364 = mul nsw i64 %363, 100
  %365 = add i64 %364, %360
  %366 = sext i32 %493 to i64
  store i64 %366, i64* %6, align 8, !tbaa !1240
  %367 = shl nsw i64 %366, 2
  %368 = add i64 %367, %365
  %369 = inttoptr i64 %368 to i32*
  %370 = load i32, i32* %369
  %371 = inttoptr i64 %76 to i32*
  store i32 %370, i32* %371
  %372 = inttoptr i64 %49 to i32*
  %373 = load i32, i32* %372
  %374 = sext i32 %373 to i64
  %375 = mul nsw i64 %374, 2400
  %376 = add i64 %375, ptrtoint (%idmo_type* @idmo to i64)
  %377 = inttoptr i64 %51 to i32*
  %378 = load i32, i32* %377
  %379 = sext i32 %378 to i64
  %380 = mul nsw i64 %379, 400
  %381 = add i64 %380, %376
  %382 = inttoptr i64 %75 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = shl nsw i64 %384, 2
  %386 = add i64 %385, %381
  %387 = inttoptr i64 %386 to i32*
  %388 = load i32, i32* %387
  %389 = zext i32 %388 to i64
  store i64 %389, i64* %7, align 8, !tbaa !1240
  %390 = inttoptr i64 %77 to i32*
  store i32 %388, i32* %390
  %391 = inttoptr i64 %77 to i32*
  %392 = load i32, i32* %391
  %393 = sext i32 %392 to i64
  %394 = shl nsw i64 %393, 3
  %395 = add i64 %394, ptrtoint (%tmort_type* @tmort to i64)
  %396 = inttoptr i64 %395 to double*
  %397 = load double, double* %396
  %398 = inttoptr i64 %62 to i64*
  %399 = load i64, i64* %398
  %400 = inttoptr i64 %76 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 3
  %404 = add i64 %403, %399
  %405 = inttoptr i64 %404 to double*
  %406 = load double, double* %405
  %407 = fmul double %355, %406
  store double %407, double* %52, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %408 = fadd double %397, %407
  store double %408, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %409 = inttoptr i64 %395 to double*
  store double %408, double* %409
  %410 = inttoptr i64 %75 to i32*
  %411 = load i32, i32* %410
  %412 = add i32 %411, 1
  %413 = inttoptr i64 %75 to i32*
  store i32 %412, i32* %413
  br label %block_41df82

block_41e168:                                     ; preds = %block_41e15e
  %414 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %415 = inttoptr i64 %49 to i32*
  %416 = load i32, i32* %415
  %417 = sext i32 %416 to i64
  %418 = mul nsw i64 %417, 600
  %419 = add i64 %418, ptrtoint (%idel_type* @idel to i64)
  %420 = inttoptr i64 %51 to i32*
  %421 = load i32, i32* %420
  %422 = sext i32 %421 to i64
  %423 = mul nsw i64 %422, 100
  %424 = add i64 %423, %419
  %425 = sext i32 %95 to i64
  store i64 %425, i64* %6, align 8, !tbaa !1240
  %426 = shl nsw i64 %425, 2
  %427 = add i64 %424, 80
  %428 = add i64 %427, %426
  %429 = inttoptr i64 %428 to i32*
  %430 = load i32, i32* %429
  %431 = inttoptr i64 %76 to i32*
  store i32 %430, i32* %431
  %432 = inttoptr i64 %49 to i32*
  %433 = load i32, i32* %432
  %434 = sext i32 %433 to i64
  %435 = mul nsw i64 %434, 2400
  %436 = add i64 %435, ptrtoint (%idmo_type* @idmo to i64)
  %437 = inttoptr i64 %51 to i32*
  %438 = load i32, i32* %437
  %439 = sext i32 %438 to i64
  %440 = mul nsw i64 %439, 400
  %441 = add i64 %440, %436
  %442 = inttoptr i64 %75 to i32*
  %443 = load i32, i32* %442
  %444 = sext i32 %443 to i64
  %445 = shl nsw i64 %444, 2
  %446 = add i64 %441, 80
  %447 = add i64 %446, %445
  %448 = inttoptr i64 %447 to i32*
  %449 = load i32, i32* %448
  %450 = zext i32 %449 to i64
  store i64 %450, i64* %7, align 8, !tbaa !1240
  %451 = inttoptr i64 %77 to i32*
  store i32 %449, i32* %451
  %452 = inttoptr i64 %77 to i32*
  %453 = load i32, i32* %452
  %454 = sext i32 %453 to i64
  %455 = shl nsw i64 %454, 3
  %456 = add i64 %455, ptrtoint (%tmort_type* @tmort to i64)
  %457 = inttoptr i64 %456 to double*
  %458 = load double, double* %457
  %459 = inttoptr i64 %62 to i64*
  %460 = load i64, i64* %459
  %461 = inttoptr i64 %76 to i32*
  %462 = load i32, i32* %461
  %463 = sext i32 %462 to i64
  %464 = shl nsw i64 %463, 3
  %465 = add i64 %464, %460
  %466 = inttoptr i64 %465 to double*
  %467 = load double, double* %466
  %468 = fmul double %414, %467
  store double %468, double* %52, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %469 = fadd double %458, %468
  store double %469, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %470 = inttoptr i64 %456 to double*
  store double %469, double* %470
  %471 = inttoptr i64 %75 to i32*
  %472 = load i32, i32* %471
  %473 = add i32 %472, 1
  %474 = inttoptr i64 %75 to i32*
  store i32 %473, i32* %474
  br label %block_41e15e

block_41e302.loopexit:                            ; preds = %block_41e244
  br label %block_41e302

block_41e302:                                     ; preds = %block_41e302.loopexit, %block_41e20d, %block_41dc5d
  %475 = phi %struct.Memory* [ %113, %block_41dc5d ], [ %340, %block_41e20d ], [ %502, %block_41e302.loopexit ]
  %476 = inttoptr i64 %51 to i32*
  %477 = load i32, i32* %476
  %478 = add i32 %477, 1
  %479 = inttoptr i64 %51 to i32*
  store i32 %478, i32* %479
  br label %block_41dc53

block_41de86:                                     ; preds = %block_41de90, %block_41de7f
  %480 = phi %struct.Memory* [ %265, %block_41de7f ], [ %480, %block_41de90 ]
  %481 = inttoptr i64 %75 to i32*
  %482 = load i32, i32* %481
  %483 = add i32 %482, -4
  %484 = lshr i32 %483, 31
  %485 = lshr i32 %482, 31
  %486 = xor i32 %484, %485
  %487 = add nuw nsw i32 %486, %485
  %488 = icmp eq i32 %487, 2
  %489 = icmp ne i32 %484, 0
  %490 = xor i1 %489, %488
  br i1 %490, label %block_41de90, label %block_41df38

block_41df82:                                     ; preds = %block_41df8c, %block_41df7b
  %491 = phi %struct.Memory* [ %265, %block_41df7b ], [ %491, %block_41df8c ]
  %492 = inttoptr i64 %75 to i32*
  %493 = load i32, i32* %492
  %494 = add i32 %493, -4
  %495 = lshr i32 %494, 31
  %496 = lshr i32 %493, 31
  %497 = xor i32 %495, %496
  %498 = add nuw nsw i32 %497, %496
  %499 = icmp eq i32 %498, 2
  %500 = icmp ne i32 %495, 0
  %501 = xor i1 %500, %499
  br i1 %501, label %block_41df8c, label %block_41e02f.loopexit

block_41e244:                                     ; preds = %block_41e24e, %block_41e23d
  %502 = phi %struct.Memory* [ %340, %block_41e23d ], [ %502, %block_41e24e ]
  %503 = inttoptr i64 %75 to i32*
  %504 = load i32, i32* %503
  %505 = add i32 %504, -4
  %506 = lshr i32 %505, 31
  %507 = lshr i32 %504, 31
  %508 = xor i32 %506, %507
  %509 = add nuw nsw i32 %508, %507
  %510 = icmp eq i32 %509, 2
  %511 = icmp ne i32 %506, 0
  %512 = xor i1 %511, %510
  br i1 %512, label %block_41e24e, label %block_41e302.loopexit

block_41e02f.loopexit:                            ; preds = %block_41df82
  br label %block_41e02f

block_41e02f:                                     ; preds = %block_41e02f.loopexit, %block_41df4b
  %513 = phi %struct.Memory* [ %265, %block_41df4b ], [ %491, %block_41e02f.loopexit ]
  %514 = inttoptr i64 %49 to i32*
  %515 = load i32, i32* %514
  %516 = sext i32 %515 to i64
  %517 = mul nsw i64 %516, 2400
  %518 = add i64 %517, ptrtoint (%idmo_type* @idmo to i64)
  %519 = inttoptr i64 %51 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = mul nsw i64 %521, 400
  %523 = add i64 %522, %518
  %524 = add i64 %523, 236
  %525 = inttoptr i64 %524 to i32*
  %526 = load i32, i32* %525
  %527 = icmp eq i32 %526, -1
  br i1 %527, label %block_41e062, label %block_41e124

block_41dc80:                                     ; preds = %block_41dc5d
  %528 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1944) to double*)
  store double %528, double* %52, align 1, !tbaa !1246
  store double 0.000000e+00, double* %53, align 1, !tbaa !1246
  %529 = mul nsw i64 %104, 600
  %530 = add i64 %529, ptrtoint (%idel_type* @idel to i64)
  %531 = mul nsw i64 %107, 100
  %532 = add i64 %531, %530
  %533 = inttoptr i64 %532 to i32*
  %534 = load i32, i32* %533
  %535 = inttoptr i64 %54 to i32*
  store i32 %534, i32* %535
  %536 = inttoptr i64 %49 to i32*
  %537 = load i32, i32* %536
  %538 = sext i32 %537 to i64
  %539 = mul nsw i64 %538, 600
  %540 = add i64 %539, ptrtoint (%idel_type* @idel to i64)
  %541 = inttoptr i64 %51 to i32*
  %542 = load i32, i32* %541
  %543 = sext i32 %542 to i64
  %544 = mul nsw i64 %543, 100
  %545 = add i64 %544, %540
  %546 = add i64 %545, 16
  %547 = inttoptr i64 %546 to i32*
  %548 = load i32, i32* %547
  %549 = inttoptr i64 %55 to i32*
  store i32 %548, i32* %549
  %550 = inttoptr i64 %49 to i32*
  %551 = load i32, i32* %550
  %552 = sext i32 %551 to i64
  %553 = mul nsw i64 %552, 600
  %554 = add i64 %553, ptrtoint (%idel_type* @idel to i64)
  %555 = inttoptr i64 %51 to i32*
  %556 = load i32, i32* %555
  %557 = sext i32 %556 to i64
  %558 = mul nsw i64 %557, 100
  %559 = add i64 %558, %554
  store i64 %559, i64* %7, align 8, !tbaa !1240
  %560 = add i64 %559, 80
  %561 = inttoptr i64 %560 to i32*
  %562 = load i32, i32* %561
  %563 = inttoptr i64 %56 to i32*
  store i32 %562, i32* %563
  %564 = inttoptr i64 %49 to i32*
  %565 = load i32, i32* %564
  %566 = sext i32 %565 to i64
  %567 = mul nsw i64 %566, 600
  %568 = add i64 %567, ptrtoint (%idel_type* @idel to i64)
  %569 = inttoptr i64 %51 to i32*
  %570 = load i32, i32* %569
  %571 = sext i32 %570 to i64
  %572 = mul nsw i64 %571, 100
  %573 = add i64 %572, %568
  %574 = add i64 %573, 96
  %575 = inttoptr i64 %574 to i32*
  %576 = load i32, i32* %575
  %577 = inttoptr i64 %57 to i32*
  store i32 %576, i32* %577
  %578 = inttoptr i64 %49 to i32*
  %579 = load i32, i32* %578
  %580 = sext i32 %579 to i64
  %581 = mul nsw i64 %580, 2400
  %582 = add i64 %581, ptrtoint (%idmo_type* @idmo to i64)
  %583 = inttoptr i64 %51 to i32*
  %584 = load i32, i32* %583
  %585 = sext i32 %584 to i64
  %586 = mul nsw i64 %585, 400
  %587 = add i64 %586, %582
  %588 = inttoptr i64 %587 to i32*
  %589 = load i32, i32* %588
  %590 = inttoptr i64 %58 to i32*
  store i32 %589, i32* %590
  %591 = inttoptr i64 %49 to i32*
  %592 = load i32, i32* %591
  %593 = sext i32 %592 to i64
  %594 = mul nsw i64 %593, 2400
  %595 = add i64 %594, ptrtoint (%idmo_type* @idmo to i64)
  %596 = inttoptr i64 %51 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %598, 400
  %600 = add i64 %599, %595
  %601 = add i64 %600, 216
  %602 = inttoptr i64 %601 to i32*
  %603 = load i32, i32* %602
  %604 = inttoptr i64 %59 to i32*
  store i32 %603, i32* %604
  %605 = inttoptr i64 %49 to i32*
  %606 = load i32, i32* %605
  %607 = sext i32 %606 to i64
  %608 = mul nsw i64 %607, 2400
  %609 = add i64 %608, ptrtoint (%idmo_type* @idmo to i64)
  %610 = inttoptr i64 %51 to i32*
  %611 = load i32, i32* %610
  %612 = sext i32 %611 to i64
  %613 = mul nsw i64 %612, 400
  %614 = add i64 %613, %609
  store i64 %614, i64* %6, align 8, !tbaa !1240
  %615 = add i64 %614, 180
  %616 = inttoptr i64 %615 to i32*
  %617 = load i32, i32* %616
  %618 = inttoptr i64 %60 to i32*
  store i32 %617, i32* %618
  %619 = inttoptr i64 %49 to i32*
  %620 = load i32, i32* %619
  %621 = sext i32 %620 to i64
  %622 = mul nsw i64 %621, 2400
  %623 = add i64 %622, ptrtoint (%idmo_type* @idmo to i64)
  %624 = inttoptr i64 %51 to i32*
  %625 = load i32, i32* %624
  %626 = sext i32 %625 to i64
  %627 = mul nsw i64 %626, 400
  %628 = add i64 %627, %623
  %629 = add i64 %628, 396
  %630 = inttoptr i64 %629 to i32*
  %631 = load i32, i32* %630
  %632 = zext i32 %631 to i64
  store i64 %632, i64* %8, align 8, !tbaa !1240
  %633 = inttoptr i64 %61 to i32*
  store i32 %631, i32* %633
  %634 = inttoptr i64 %58 to i32*
  %635 = load i32, i32* %634
  %636 = sext i32 %635 to i64
  %637 = shl nsw i64 %636, 3
  %638 = add i64 %637, ptrtoint (%tmort_type* @tmort to i64)
  %639 = inttoptr i64 %638 to double*
  %640 = load double, double* %639
  %641 = inttoptr i64 %62 to i64*
  %642 = load i64, i64* %641
  %643 = inttoptr i64 %54 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  %646 = load <2 x i32>, <2 x i32>* %64, align 1
  %647 = load <2 x i32>, <2 x i32>* %65, align 1
  %648 = extractelement <2 x i32> %646, i32 0
  store i32 %648, i32* %66, align 1, !tbaa !1266
  %649 = extractelement <2 x i32> %646, i32 1
  store i32 %649, i32* %68, align 1, !tbaa !1266
  %650 = extractelement <2 x i32> %647, i32 0
  %651 = extractelement <2 x i32> %647, i32 1
  %652 = shl nsw i64 %645, 3
  %653 = add i64 %652, %642
  %654 = load double, double* %73, align 1
  %655 = inttoptr i64 %653 to double*
  %656 = load double, double* %655
  %657 = fmul double %654, %656
  %658 = fadd double %640, %657
  %659 = inttoptr i64 %638 to double*
  store double %658, double* %659
  %660 = inttoptr i64 %59 to i32*
  %661 = load i32, i32* %660
  %662 = sext i32 %661 to i64
  %663 = shl nsw i64 %662, 3
  %664 = add i64 %663, ptrtoint (%tmort_type* @tmort to i64)
  %665 = inttoptr i64 %664 to double*
  %666 = load double, double* %665
  %667 = inttoptr i64 %62 to i64*
  %668 = load i64, i64* %667
  %669 = inttoptr i64 %55 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  store i32 %648, i32* %66, align 1, !tbaa !1266
  store i32 %649, i32* %68, align 1, !tbaa !1266
  %672 = shl nsw i64 %671, 3
  %673 = add i64 %672, %668
  %674 = load double, double* %73, align 1
  %675 = inttoptr i64 %673 to double*
  %676 = load double, double* %675
  %677 = fmul double %674, %676
  %678 = fadd double %666, %677
  %679 = inttoptr i64 %664 to double*
  store double %678, double* %679
  %680 = inttoptr i64 %60 to i32*
  %681 = load i32, i32* %680
  %682 = sext i32 %681 to i64
  %683 = shl nsw i64 %682, 3
  %684 = add i64 %683, ptrtoint (%tmort_type* @tmort to i64)
  %685 = inttoptr i64 %684 to double*
  %686 = load double, double* %685
  %687 = inttoptr i64 %62 to i64*
  %688 = load i64, i64* %687
  %689 = inttoptr i64 %56 to i32*
  %690 = load i32, i32* %689
  %691 = sext i32 %690 to i64
  store i32 %648, i32* %66, align 1, !tbaa !1266
  store i32 %649, i32* %68, align 1, !tbaa !1266
  store i32 %650, i32* %70, align 1, !tbaa !1266
  store i32 %651, i32* %72, align 1, !tbaa !1266
  %692 = shl nsw i64 %691, 3
  %693 = add i64 %692, %688
  %694 = load double, double* %73, align 1
  %695 = inttoptr i64 %693 to double*
  %696 = load double, double* %695
  %697 = fmul double %694, %696
  store double %697, double* %73, align 1, !tbaa !1246
  %698 = fadd double %686, %697
  %699 = inttoptr i64 %684 to double*
  store double %698, double* %699
  %700 = inttoptr i64 %61 to i32*
  %701 = load i32, i32* %700
  %702 = sext i32 %701 to i64
  %703 = shl nsw i64 %702, 3
  %704 = add i64 %703, ptrtoint (%tmort_type* @tmort to i64)
  %705 = inttoptr i64 %704 to double*
  %706 = load double, double* %705
  %707 = inttoptr i64 %62 to i64*
  %708 = load i64, i64* %707
  %709 = inttoptr i64 %57 to i32*
  %710 = load i32, i32* %709
  %711 = sext i32 %710 to i64
  %712 = shl nsw i64 %711, 3
  %713 = add i64 %712, %708
  %714 = bitcast <2 x i32> %646 to double
  %715 = inttoptr i64 %713 to double*
  %716 = load double, double* %715
  %717 = fmul double %714, %716
  store double %717, double* %52, align 1, !tbaa !1246
  store <2 x i32> %647, <2 x i32>* %78, align 1, !tbaa !1246
  %718 = fadd double %706, %717
  store double %718, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  %719 = inttoptr i64 %704 to double*
  store double %718, double* %719
  %720 = inttoptr i64 %74 to i32*
  store i32 1, i32* %720
  br label %block_41de75

block_41de90:                                     ; preds = %block_41de86
  %721 = inttoptr i64 %49 to i32*
  %722 = load i32, i32* %721
  %723 = sext i32 %722 to i64
  %724 = mul nsw i64 %723, 600
  %725 = add i64 %724, ptrtoint (%idel_type* @idel to i64)
  %726 = inttoptr i64 %51 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  %729 = mul nsw i64 %728, 100
  %730 = add i64 %729, %725
  %731 = inttoptr i64 %74 to i32*
  %732 = load i32, i32* %731
  %733 = sext i32 %732 to i64
  %734 = mul nsw i64 %733, 20
  %735 = add i64 %734, %730
  %736 = sext i32 %482 to i64
  store i64 %736, i64* %6, align 8, !tbaa !1240
  %737 = shl nsw i64 %736, 2
  %738 = add i64 %737, %735
  %739 = inttoptr i64 %738 to i32*
  %740 = load i32, i32* %739
  %741 = inttoptr i64 %76 to i32*
  store i32 %740, i32* %741
  %742 = inttoptr i64 %49 to i32*
  %743 = load i32, i32* %742
  %744 = sext i32 %743 to i64
  %745 = mul nsw i64 %744, 2400
  %746 = add i64 %745, ptrtoint (%idmo_type* @idmo to i64)
  %747 = inttoptr i64 %51 to i32*
  %748 = load i32, i32* %747
  %749 = sext i32 %748 to i64
  %750 = mul nsw i64 %749, 400
  %751 = add i64 %750, %746
  %752 = inttoptr i64 %74 to i32*
  %753 = load i32, i32* %752
  %754 = sext i32 %753 to i64
  %755 = mul nsw i64 %754, 20
  %756 = add i64 %755, %751
  %757 = inttoptr i64 %75 to i32*
  %758 = load i32, i32* %757
  %759 = sext i32 %758 to i64
  %760 = shl nsw i64 %759, 2
  %761 = add i64 %760, %756
  %762 = inttoptr i64 %761 to i32*
  %763 = load i32, i32* %762
  %764 = zext i32 %763 to i64
  store i64 %764, i64* %7, align 8, !tbaa !1240
  %765 = inttoptr i64 %77 to i32*
  store i32 %763, i32* %765
  %766 = inttoptr i64 %77 to i32*
  %767 = load i32, i32* %766
  %768 = sext i32 %767 to i64
  %769 = shl nsw i64 %768, 3
  %770 = add i64 %769, ptrtoint (%tmort_type* @tmort to i64)
  %771 = inttoptr i64 %770 to double*
  %772 = load double, double* %771
  %773 = inttoptr i64 %62 to i64*
  %774 = load i64, i64* %773
  %775 = inttoptr i64 %76 to i32*
  %776 = load i32, i32* %775
  %777 = sext i32 %776 to i64
  %778 = shl nsw i64 %777, 3
  %779 = add i64 %778, %774
  %780 = inttoptr i64 %779 to double*
  %781 = load double, double* %780
  %782 = fadd double %772, %781
  store double %782, double* %52, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %783 = inttoptr i64 %770 to double*
  store double %782, double* %783
  %784 = inttoptr i64 %75 to i32*
  %785 = load i32, i32* %784
  %786 = add i32 %785, 1
  %787 = inttoptr i64 %75 to i32*
  store i32 %786, i32* %787
  br label %block_41de86
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4108a0_mor_assign(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4108a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = add i64 %12, -24
  %19 = load i64, i64* %7, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %12, -28
  %22 = inttoptr i64 %21 to i32*
  store i32 0, i32* %22
  %23 = add i64 %12, -28
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %27 = add i64 %12, -24
  %28 = add i64 %12, -16
  br label %block_4108b3

block_4108bd:                                     ; preds = %block_4108b3
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31
  %33 = inttoptr i64 %28 to i64*
  %34 = load i64, i64* %33
  %35 = sext i32 %75 to i64
  store i64 %35, i64* %6, align 8, !tbaa !1240
  %36 = shl nsw i64 %35, 2
  %37 = add i64 %36, %34
  %38 = inttoptr i64 %37 to i32*
  store i32 %32, i32* %38
  %39 = inttoptr i64 %27 to i64*
  %40 = load i64, i64* %39
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41
  %43 = add i32 %42, 1
  %44 = zext i32 %43 to i64
  store i64 %44, i64* %5, align 8, !tbaa !1240
  %45 = inttoptr i64 %40 to i32*
  store i32 %43, i32* %45
  %46 = inttoptr i64 %23 to i32*
  %47 = load i32, i32* %46
  %48 = add i32 %47, 1
  %49 = zext i32 %48 to i64
  store i64 %49, i64* %4, align 8, !tbaa !1240
  %50 = inttoptr i64 %23 to i32*
  store i32 %48, i32* %50
  br label %block_4108b3

block_4108eb:                                     ; preds = %block_4108b3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %54 = icmp ult i32 %75, 3
  %55 = zext i1 %54 to i8
  %56 = and i32 %76, 255
  %57 = tail call i32 @llvm.ctpop.i32(i32 %56) #11
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  %61 = xor i32 %76, %75
  %62 = lshr i32 %61, 4
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = icmp eq i32 %76, 0
  %66 = zext i1 %65 to i8
  %67 = zext i1 %82 to i8
  store i8 %55, i8* %24, align 1, !tbaa !1248
  store i8 %60, i8* %51, align 1, !tbaa !1261
  store i8 %64, i8* %25, align 1, !tbaa !1262
  store i8 %66, i8* %52, align 1, !tbaa !1263
  store i8 %78, i8* %26, align 1, !tbaa !1264
  store i8 %67, i8* %53, align 1, !tbaa !1265
  %68 = inttoptr i64 %13 to i64*
  %69 = load i64, i64* %68
  store i64 %69, i64* %10, align 8, !tbaa !1240
  %70 = inttoptr i64 %12 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %3, align 8, !tbaa !1240
  %72 = add i64 %12, 8
  store i64 %72, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %73

block_4108b3:                                     ; preds = %block_4108bd, %block_4108a0
  %73 = phi %struct.Memory* [ %2, %block_4108a0 ], [ %73, %block_4108bd ]
  %74 = inttoptr i64 %23 to i32*
  %75 = load i32, i32* %74
  %76 = add i32 %75, -3
  %77 = lshr i32 %76, 31
  %78 = trunc i32 %77 to i8
  %79 = lshr i32 %75, 31
  %80 = xor i32 %77, %79
  %81 = add nuw nsw i32 %80, %79
  %82 = icmp eq i32 %81, 2
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %82
  br i1 %84, label %block_4108bd, label %block_4108eb
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_411690_ifsame(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_411690:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %18 = load i64, i64* %16, align 8
  %19 = load i64, i64* %15, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  store i64 %20, i64* %15, align 8, !tbaa !1240
  store i64 %20, i64* %16, align 8, !tbaa !1240
  %22 = add i64 %19, -16
  %23 = load i32, i32* %11, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %19, -20
  %26 = load i32, i32* %9, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = add i64 %19, -24
  %29 = load i32, i32* %7, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = add i64 %19, -28
  %32 = load i32, i32* %5, align 4
  %33 = inttoptr i64 %31 to i32*
  store i32 %32, i32* %33
  %34 = inttoptr i64 %28 to i32*
  %35 = load i32, i32* %34
  %36 = add i32 %35, 1
  %37 = icmp ne i32 %35, -1
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !1248
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #11
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !1261
  %46 = xor i32 %35, 16
  %47 = xor i32 %46, %36
  %48 = lshr i32 %47, 4
  %49 = trunc i32 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !1262
  %52 = icmp eq i32 %36, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !1263
  %55 = lshr i32 %36, 31
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !1264
  %58 = lshr i32 %35, 31
  %59 = xor i32 %58, 1
  %60 = xor i32 %55, %58
  %61 = add nuw nsw i32 %60, %59
  %62 = icmp eq i32 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !1265
  %65 = select i1 %52, i64 36, i64 26
  %66 = add i64 %65, %1
  br i1 %52, label %block_4116b4, label %block_4116aa

block_41177d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2
  %67 = load i8, i8* %45, align 1, !tbaa !1261
  %68 = icmp eq i8 %67, 1
  br i1 %68, label %block_41178f, label %block_411783

block_411796:                                     ; preds = %block_411783, %block_41178f, %block_4116b4
  %69 = phi i64 [ %20, %block_4116b4 ], [ %90, %block_41178f ], [ %126, %block_411783 ]
  %70 = phi %struct.Memory* [ %2, %block_4116b4 ], [ %89, %block_41178f ], [ %212, %block_411783 ]
  %71 = add i64 %69, -4
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72
  %74 = zext i32 %73 to i64
  store i64 %74, i64* %12, align 8, !tbaa !1240
  %75 = load i64, i64* %15, align 8, !tbaa !1240
  %76 = add i64 %75, 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %16, align 8, !tbaa !1240
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %3, align 8, !tbaa !1240
  %81 = add i64 %75, 16
  store i64 %81, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %70

block_41173c:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %82 = load i8, i8* %45, align 1, !tbaa !1261
  %83 = icmp ne i8 %82, 0
  %84 = select i1 %83, i64 83, i64 6
  %85 = add i64 %302, %84
  %86 = icmp eq i8 %82, 1
  br i1 %86, label %block_41178f, label %block_411742

block_4116b4:                                     ; preds = %block_4116aa, %block_411690
  %87 = add i64 %19, -12
  %88 = inttoptr i64 %87 to i32*
  store i32 0, i32* %88
  br label %block_411796

block_41178f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2, %block_4116fb, %block_41173c, %block_41177d
  %89 = phi %struct.Memory* [ %384, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ], [ %384, %block_4116fb ], [ %299, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1 ], [ %299, %block_41173c ], [ %212, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2 ], [ %212, %block_41177d ]
  %90 = load i64, i64* %16, align 8
  %91 = add i64 %90, -4
  %92 = inttoptr i64 %91 to i32*
  store i32 0, i32* %92
  br label %block_411796

block_4116aa:                                     ; preds = %block_411690
  %93 = add i64 %19, -16
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = add i32 %95, 1
  %97 = icmp ne i32 %95, -1
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %39, align 1, !tbaa !1248
  %99 = and i32 %96, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #11
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %45, align 1, !tbaa !1261
  %104 = xor i32 %95, 16
  %105 = xor i32 %104, %96
  %106 = lshr i32 %105, 4
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %51, align 1, !tbaa !1262
  %109 = icmp eq i32 %96, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %54, align 1, !tbaa !1263
  %111 = lshr i32 %96, 31
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %57, align 1, !tbaa !1264
  %113 = lshr i32 %95, 31
  %114 = xor i32 %113, 1
  %115 = xor i32 %111, %113
  %116 = add nuw nsw i32 %115, %114
  %117 = icmp eq i32 %116, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %64, align 1, !tbaa !1265
  %119 = select i1 %109, i64 10, i64 22
  %120 = add i64 %66, %119
  br i1 %109, label %block_4116b4, label %block_4116c0

block_4116fb:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %121 = load i8, i8* %45, align 1, !tbaa !1261
  %122 = icmp ne i8 %121, 0
  %123 = select i1 %122, i64 148, i64 6
  %124 = add i64 %387, %123
  %125 = icmp eq i8 %121, 1
  br i1 %125, label %block_41178f, label %block_411701

block_411783:                                     ; preds = %block_41177d
  %126 = load i64, i64* %16, align 8
  %127 = add i64 %126, -4
  %128 = inttoptr i64 %127 to i32*
  store i32 1, i32* %128
  br label %block_411796

block_411742:                                     ; preds = %block_41173c
  store i64 ptrtoint (%zc_type* @zc to i64), i64* %12, align 8, !tbaa !1240
  %129 = load i64, i64* %16, align 8
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i32*
  %132 = load i32, i32* %131
  %133 = sext i32 %132 to i64
  %134 = shl nsw i64 %133, 6
  %135 = add i64 %134, ptrtoint (%zc_type* @zc to i64)
  store i64 %135, i64* %14, align 8, !tbaa !1240
  %136 = add i64 %129, -12
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = sext i32 %138 to i64
  %140 = shl nsw i64 %139, 3
  %141 = add i64 %140, %135
  %142 = inttoptr i64 %141 to double*
  %143 = load double, double* %142
  store double %143, double* %314, align 1, !tbaa !1246
  store double 0.000000e+00, double* %316, align 1, !tbaa !1246
  %144 = add i64 %129, -16
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145
  %147 = sext i32 %146 to i64
  %148 = shl nsw i64 %147, 6
  %149 = load i64, i64* %12, align 8
  %150 = add i64 %148, %149
  store i64 %150, i64* %12, align 8, !tbaa !1240
  %151 = icmp ult i64 %150, %149
  %152 = icmp ult i64 %150, %148
  %153 = or i1 %151, %152
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %39, align 1, !tbaa !1248
  %155 = trunc i64 %150 to i32
  %156 = and i32 %155, 255
  %157 = tail call i32 @llvm.ctpop.i32(i32 %156) #11
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  store i8 %160, i8* %45, align 1, !tbaa !1261
  %161 = xor i64 %149, %150
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  store i8 %164, i8* %51, align 1, !tbaa !1262
  %165 = icmp eq i64 %150, 0
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %54, align 1, !tbaa !1263
  %167 = lshr i64 %150, 63
  %168 = trunc i64 %167 to i8
  store i8 %168, i8* %57, align 1, !tbaa !1264
  %169 = lshr i64 %149, 63
  %170 = lshr i64 %147, 57
  %171 = and i64 %170, 1
  %172 = xor i64 %167, %169
  %173 = xor i64 %167, %171
  %174 = add nuw nsw i64 %172, %173
  %175 = icmp eq i64 %174, 2
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %64, align 1, !tbaa !1265
  %177 = load i64, i64* %16, align 8
  %178 = add i64 %177, -20
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  store i64 %181, i64* %13, align 8, !tbaa !1240
  %182 = shl nsw i64 %181, 3
  %183 = add i64 %182, %150
  %184 = add i64 %85, 53
  store i64 %184, i64* %3, align 8
  %185 = inttoptr i64 %183 to double*
  %186 = load double, double* %185
  %187 = fcmp uno double %143, %186
  br i1 %187, label %188, label %199

; <label>:188:                                    ; preds = %block_411742
  %189 = fadd double %143, %186
  %190 = bitcast double %189 to i64
  %191 = and i64 %190, 9221120237041090560
  %192 = icmp eq i64 %191, 9218868437227405312
  %193 = and i64 %190, 2251799813685247
  %194 = icmp ne i64 %193, 0
  %195 = and i1 %192, %194
  br i1 %195, label %196, label %205

; <label>:196:                                    ; preds = %188
  %197 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %184, %struct.Memory* %299) #14
  %198 = load i8, i8* %54, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2

; <label>:199:                                    ; preds = %block_411742
  %200 = fcmp ogt double %143, %186
  br i1 %200, label %205, label %201

; <label>:201:                                    ; preds = %199
  %202 = fcmp olt double %143, %186
  br i1 %202, label %205, label %203

; <label>:203:                                    ; preds = %201
  %204 = fcmp oeq double %143, %186
  br i1 %204, label %205, label %209

; <label>:205:                                    ; preds = %203, %201, %199, %188
  %206 = phi i8 [ 0, %199 ], [ 0, %201 ], [ 1, %203 ], [ 1, %188 ]
  %207 = phi i8 [ 0, %199 ], [ 0, %201 ], [ 0, %203 ], [ 1, %188 ]
  %208 = phi i8 [ 0, %199 ], [ 1, %201 ], [ 0, %203 ], [ 1, %188 ]
  store i8 %206, i8* %54, align 1, !tbaa !1463
  store i8 %207, i8* %45, align 1, !tbaa !1463
  store i8 %208, i8* %39, align 1, !tbaa !1463
  br label %209

; <label>:209:                                    ; preds = %205, %203
  %210 = phi i8 [ %206, %205 ], [ %166, %203 ]
  store i8 0, i8* %64, align 1, !tbaa !1463
  store i8 0, i8* %57, align 1, !tbaa !1463
  store i8 0, i8* %51, align 1, !tbaa !1463
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit2: ; preds = %209, %196
  %211 = phi i8 [ %198, %196 ], [ %210, %209 ]
  %212 = phi %struct.Memory* [ %197, %196 ], [ %299, %209 ]
  %213 = icmp eq i8 %211, 0
  br i1 %213, label %block_41178f, label %block_41177d

block_411701:                                     ; preds = %block_4116fb
  store i64 ptrtoint (%yc_type* @yc to i64), i64* %12, align 8, !tbaa !1240
  %214 = load i64, i64* %16, align 8
  %215 = add i64 %214, -8
  %216 = inttoptr i64 %215 to i32*
  %217 = load i32, i32* %216
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 6
  %220 = add i64 %219, ptrtoint (%yc_type* @yc to i64)
  store i64 %220, i64* %14, align 8, !tbaa !1240
  %221 = add i64 %214, -12
  %222 = inttoptr i64 %221 to i32*
  %223 = load i32, i32* %222
  %224 = sext i32 %223 to i64
  %225 = shl nsw i64 %224, 3
  %226 = add i64 %225, %220
  %227 = inttoptr i64 %226 to double*
  %228 = load double, double* %227
  store double %228, double* %314, align 1, !tbaa !1246
  store double 0.000000e+00, double* %316, align 1, !tbaa !1246
  %229 = add i64 %214, -16
  %230 = inttoptr i64 %229 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  %233 = shl nsw i64 %232, 6
  %234 = load i64, i64* %12, align 8
  %235 = add i64 %233, %234
  store i64 %235, i64* %12, align 8, !tbaa !1240
  %236 = icmp ult i64 %235, %234
  %237 = icmp ult i64 %235, %233
  %238 = or i1 %236, %237
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %39, align 1, !tbaa !1248
  %240 = trunc i64 %235 to i32
  %241 = and i32 %240, 255
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #11
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %45, align 1, !tbaa !1261
  %246 = xor i64 %234, %235
  %247 = lshr i64 %246, 4
  %248 = trunc i64 %247 to i8
  %249 = and i8 %248, 1
  store i8 %249, i8* %51, align 1, !tbaa !1262
  %250 = icmp eq i64 %235, 0
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %54, align 1, !tbaa !1263
  %252 = lshr i64 %235, 63
  %253 = trunc i64 %252 to i8
  store i8 %253, i8* %57, align 1, !tbaa !1264
  %254 = lshr i64 %234, 63
  %255 = lshr i64 %232, 57
  %256 = and i64 %255, 1
  %257 = xor i64 %252, %254
  %258 = xor i64 %252, %256
  %259 = add nuw nsw i64 %257, %258
  %260 = icmp eq i64 %259, 2
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %64, align 1, !tbaa !1265
  %262 = load i64, i64* %16, align 8
  %263 = add i64 %262, -20
  %264 = inttoptr i64 %263 to i32*
  %265 = load i32, i32* %264
  %266 = sext i32 %265 to i64
  store i64 %266, i64* %13, align 8, !tbaa !1240
  %267 = shl nsw i64 %266, 3
  %268 = add i64 %267, %235
  %269 = add i64 %124, 53
  store i64 %269, i64* %3, align 8
  %270 = inttoptr i64 %268 to double*
  %271 = load double, double* %270
  %272 = fcmp uno double %228, %271
  br i1 %272, label %273, label %285

; <label>:273:                                    ; preds = %block_411701
  %274 = fadd double %228, %271
  %275 = bitcast double %274 to i64
  %276 = and i64 %275, 9221120237041090560
  %277 = icmp eq i64 %276, 9218868437227405312
  %278 = and i64 %275, 2251799813685247
  %279 = icmp ne i64 %278, 0
  %280 = and i1 %277, %279
  br i1 %280, label %281, label %291

; <label>:281:                                    ; preds = %273
  %282 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %269, %struct.Memory* %384) #14
  %283 = load i64, i64* %3, align 8
  %284 = load i8, i8* %54, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

; <label>:285:                                    ; preds = %block_411701
  %286 = fcmp ogt double %228, %271
  br i1 %286, label %291, label %287

; <label>:287:                                    ; preds = %285
  %288 = fcmp olt double %228, %271
  br i1 %288, label %291, label %289

; <label>:289:                                    ; preds = %287
  %290 = fcmp oeq double %228, %271
  br i1 %290, label %291, label %295

; <label>:291:                                    ; preds = %289, %287, %285, %273
  %292 = phi i8 [ 0, %285 ], [ 0, %287 ], [ 1, %289 ], [ 1, %273 ]
  %293 = phi i8 [ 0, %285 ], [ 0, %287 ], [ 0, %289 ], [ 1, %273 ]
  %294 = phi i8 [ 0, %285 ], [ 1, %287 ], [ 0, %289 ], [ 1, %273 ]
  store i8 %292, i8* %54, align 1, !tbaa !1463
  store i8 %293, i8* %45, align 1, !tbaa !1463
  store i8 %294, i8* %39, align 1, !tbaa !1463
  br label %295

; <label>:295:                                    ; preds = %291, %289
  %296 = phi i8 [ %292, %291 ], [ %251, %289 ]
  store i8 0, i8* %64, align 1, !tbaa !1463
  store i8 0, i8* %57, align 1, !tbaa !1463
  store i8 0, i8* %51, align 1, !tbaa !1463
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1: ; preds = %295, %281
  %297 = phi i8 [ %284, %281 ], [ %296, %295 ]
  %298 = phi i64 [ %283, %281 ], [ %269, %295 ]
  %299 = phi %struct.Memory* [ %282, %281 ], [ %384, %295 ]
  %300 = icmp eq i8 %297, 0
  %301 = select i1 %300, i64 89, i64 6
  %302 = add i64 %298, %301
  br i1 %300, label %block_41178f, label %block_41173c

block_4116c0:                                     ; preds = %block_4116aa
  store i64 ptrtoint (%xc_type* @xc to i64), i64* %12, align 8, !tbaa !1240
  %303 = sext i32 %95 to i64
  %304 = shl nsw i64 %303, 6
  %305 = add i64 %304, ptrtoint (%xc_type* @xc to i64)
  store i64 %305, i64* %14, align 8, !tbaa !1240
  %306 = add i64 %19, -20
  %307 = inttoptr i64 %306 to i32*
  %308 = load i32, i32* %307
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 3
  %311 = add i64 %310, %305
  %312 = inttoptr i64 %311 to double*
  %313 = load double, double* %312
  %314 = bitcast %union.VectorReg* %17 to double*
  store double %313, double* %314, align 1, !tbaa !1246
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %316 = bitcast i64* %315 to double*
  store double 0.000000e+00, double* %316, align 1, !tbaa !1246
  %317 = sext i32 %35 to i64
  %318 = shl nsw i64 %317, 6
  %319 = load i64, i64* %12, align 8
  %320 = add i64 %318, %319
  store i64 %320, i64* %12, align 8, !tbaa !1240
  %321 = icmp ult i64 %320, %319
  %322 = icmp ult i64 %320, %318
  %323 = or i1 %321, %322
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %39, align 1, !tbaa !1248
  %325 = trunc i64 %320 to i32
  %326 = and i32 %325, 255
  %327 = tail call i32 @llvm.ctpop.i32(i32 %326) #11
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  %330 = xor i8 %329, 1
  store i8 %330, i8* %45, align 1, !tbaa !1261
  %331 = xor i64 %319, %320
  %332 = lshr i64 %331, 4
  %333 = trunc i64 %332 to i8
  %334 = and i8 %333, 1
  store i8 %334, i8* %51, align 1, !tbaa !1262
  %335 = icmp eq i64 %320, 0
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %54, align 1, !tbaa !1263
  %337 = lshr i64 %320, 63
  %338 = trunc i64 %337 to i8
  store i8 %338, i8* %57, align 1, !tbaa !1264
  %339 = lshr i64 %319, 63
  %340 = lshr i64 %317, 57
  %341 = and i64 %340, 1
  %342 = xor i64 %337, %339
  %343 = xor i64 %337, %341
  %344 = add nuw nsw i64 %342, %343
  %345 = icmp eq i64 %344, 2
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %64, align 1, !tbaa !1265
  %347 = load i64, i64* %16, align 8
  %348 = add i64 %347, -20
  %349 = inttoptr i64 %348 to i32*
  %350 = load i32, i32* %349
  %351 = sext i32 %350 to i64
  store i64 %351, i64* %13, align 8, !tbaa !1240
  %352 = shl nsw i64 %351, 3
  %353 = add i64 %352, %320
  %354 = add i64 %120, 53
  store i64 %354, i64* %3, align 8
  %355 = inttoptr i64 %353 to double*
  %356 = load double, double* %355
  %357 = fcmp uno double %313, %356
  br i1 %357, label %358, label %370

; <label>:358:                                    ; preds = %block_4116c0
  %359 = fadd double %313, %356
  %360 = bitcast double %359 to i64
  %361 = and i64 %360, 9221120237041090560
  %362 = icmp eq i64 %361, 9218868437227405312
  %363 = and i64 %360, 2251799813685247
  %364 = icmp ne i64 %363, 0
  %365 = and i1 %362, %364
  br i1 %365, label %366, label %376

; <label>:366:                                    ; preds = %358
  %367 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %354, %struct.Memory* %2) #14
  %368 = load i64, i64* %3, align 8
  %369 = load i8, i8* %54, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:370:                                    ; preds = %block_4116c0
  %371 = fcmp ogt double %313, %356
  br i1 %371, label %376, label %372

; <label>:372:                                    ; preds = %370
  %373 = fcmp olt double %313, %356
  br i1 %373, label %376, label %374

; <label>:374:                                    ; preds = %372
  %375 = fcmp oeq double %313, %356
  br i1 %375, label %376, label %380

; <label>:376:                                    ; preds = %374, %372, %370, %358
  %377 = phi i8 [ 0, %370 ], [ 0, %372 ], [ 1, %374 ], [ 1, %358 ]
  %378 = phi i8 [ 0, %370 ], [ 0, %372 ], [ 0, %374 ], [ 1, %358 ]
  %379 = phi i8 [ 0, %370 ], [ 1, %372 ], [ 0, %374 ], [ 1, %358 ]
  store i8 %377, i8* %54, align 1, !tbaa !1463
  store i8 %378, i8* %45, align 1, !tbaa !1463
  store i8 %379, i8* %39, align 1, !tbaa !1463
  br label %380

; <label>:380:                                    ; preds = %376, %374
  %381 = phi i8 [ %377, %376 ], [ %336, %374 ]
  store i8 0, i8* %64, align 1, !tbaa !1463
  store i8 0, i8* %57, align 1, !tbaa !1463
  store i8 0, i8* %51, align 1, !tbaa !1463
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %380, %366
  %382 = phi i8 [ %369, %366 ], [ %381, %380 ]
  %383 = phi i64 [ %368, %366 ], [ %354, %380 ]
  %384 = phi %struct.Memory* [ %367, %366 ], [ %2, %380 ]
  %385 = icmp eq i8 %382, 0
  %386 = select i1 %385, i64 154, i64 6
  %387 = add i64 %383, %386
  br i1 %385, label %block_41178f, label %block_4116fb
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400690__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400690:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_621ff0__got_type* @seg_621ff0__got to i64), i64 8) to i64*)
  store i64 %14, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %8, align 1, !tbaa !1248
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %9, align 1, !tbaa !1261
  %21 = icmp eq i64 %14, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %11, align 1, !tbaa !1263
  %23 = lshr i64 %14, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %12, align 1, !tbaa !1264
  store i8 0, i8* %13, align 1, !tbaa !1265
  store i8 0, i8* %10, align 1, !tbaa !1262
  %25 = select i1 %21, i64 18, i64 16
  %26 = add i64 %25, %1
  br i1 %21, label %block_4006a2, label %block_4006a0

block_4006a2:                                     ; preds = %block_4006a0, %block_400690
  %27 = phi i64 [ %7, %block_400690 ], [ %58, %block_4006a0 ]
  %28 = phi %struct.Memory* [ %2, %block_400690 ], [ %57, %block_4006a0 ]
  %29 = add i64 %27, 8
  %30 = icmp ugt i64 %27, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %8, align 1, !tbaa !1248
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #11
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %9, align 1, !tbaa !1261
  %38 = xor i64 %29, %27
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %10, align 1, !tbaa !1262
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %11, align 1, !tbaa !1263
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %12, align 1, !tbaa !1264
  %46 = lshr i64 %27, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %13, align 1, !tbaa !1265
  %51 = inttoptr i64 %29 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %3, align 8, !tbaa !1240
  %53 = add i64 %27, 16
  store i64 %53, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %28

block_4006a0:                                     ; preds = %block_400690
  %54 = add i64 %26, 2
  %55 = add i64 %6, -16
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  store i64 %55, i64* %5, align 8, !tbaa !1240
  store i64 %14, i64* %3, align 8, !tbaa !1240
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %14, %struct.Memory* %2)
  %58 = load i64, i64* %5, align 8
  br label %block_4006a2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41faa0_col2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41faa0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %13 = load i64, i64* %11, align 8
  %14 = load i64, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %9, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %8, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -28
  %24 = load i32, i32* %5, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %14, -32
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = add i64 %14, -28
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = add i64 %14, -16
  %33 = bitcast %union.VectorReg* %12 to double*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = add i64 %14, -24
  br label %block_41fab6

block_41faf7:                                     ; preds = %block_41fab6
  %36 = zext i32 %62 to i64
  store i64 %36, i64* %6, align 8, !tbaa !1240
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %40 = icmp ult i32 %62, %64
  %41 = zext i1 %40 to i8
  %42 = and i32 %65, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #11
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = xor i32 %64, %62
  %48 = xor i32 %47, %65
  %49 = lshr i32 %48, 4
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = icmp eq i32 %65, 0
  %53 = zext i1 %52 to i8
  %54 = zext i1 %73 to i8
  store i8 %41, i8* %29, align 1, !tbaa !1248
  store i8 %46, i8* %37, align 1, !tbaa !1261
  store i8 %51, i8* %30, align 1, !tbaa !1262
  store i8 %53, i8* %38, align 1, !tbaa !1263
  store i8 %67, i8* %31, align 1, !tbaa !1264
  store i8 %54, i8* %39, align 1, !tbaa !1265
  %55 = inttoptr i64 %15 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %11, align 8, !tbaa !1240
  %57 = inttoptr i64 %14 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %3, align 8, !tbaa !1240
  %59 = add i64 %14, 8
  store i64 %59, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %60

block_41fab6:                                     ; preds = %block_41fac2, %block_41faa0
  %60 = phi %struct.Memory* [ %2, %block_41faa0 ], [ %60, %block_41fac2 ]
  %61 = inttoptr i64 %26 to i32*
  %62 = load i32, i32* %61
  %63 = inttoptr i64 %28 to i32*
  %64 = load i32, i32* %63
  %65 = sub i32 %62, %64
  %66 = lshr i32 %65, 31
  %67 = trunc i32 %66 to i8
  %68 = lshr i32 %62, 31
  %69 = lshr i32 %64, 31
  %70 = xor i32 %69, %68
  %71 = xor i32 %66, %68
  %72 = add nuw nsw i32 %71, %70
  %73 = icmp eq i32 %72, 2
  %74 = icmp ne i8 %67, 0
  %75 = xor i1 %74, %73
  br i1 %75, label %block_41fac2, label %block_41faf7

block_41fac2:                                     ; preds = %block_41fab6
  %76 = inttoptr i64 %32 to i64*
  %77 = load i64, i64* %76
  %78 = sext i32 %62 to i64
  %79 = shl nsw i64 %78, 3
  %80 = add i64 %79, %77
  %81 = inttoptr i64 %80 to double*
  %82 = load double, double* %81
  %83 = inttoptr i64 %35 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %79, %84
  %86 = inttoptr i64 %85 to double*
  %87 = load double, double* %86
  %88 = fmul double %82, %87
  store double %88, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  store i64 %78, i64* %7, align 8, !tbaa !1240
  %89 = inttoptr i64 %80 to double*
  store double %88, double* %89
  %90 = inttoptr i64 %26 to i32*
  %91 = load i32, i32* %90
  %92 = add i32 %91, 1
  %93 = inttoptr i64 %26 to i32*
  store i32 %92, i32* %93
  br label %block_41fab6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41caf0_transfb_cor_f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41caf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = load i64, i64* %12, align 8
  %16 = load i64, i64* %11, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %12, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = bitcast [32 x %union.VectorReg]* %13 to i8*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %27 = bitcast [32 x %union.VectorReg]* %13 to i32*
  store i32 0, i32* %27, align 1, !tbaa !1244
  %28 = getelementptr inbounds i8, i8* %25, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 0, i32* %29, align 1, !tbaa !1244
  %30 = bitcast i64* %26 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = getelementptr inbounds i8, i8* %25, i64 12
  %32 = bitcast i8* %31 to i32*
  store i32 0, i32* %32, align 1, !tbaa !1244
  %33 = add i64 %16, -72
  store i64 %33, i64* %7, align 8, !tbaa !1240
  %34 = add i64 %16, -12
  %35 = load i32, i32* %5, align 4
  %36 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %36
  %37 = add i64 %16, -24
  %38 = load i64, i64* %9, align 8
  %39 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %39
  %40 = add i64 %16, -32
  %41 = load i64, i64* %8, align 8
  %42 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %42
  store i64 %33, i64* %10, align 8, !tbaa !1240
  store i64 5, i64* %9, align 8, !tbaa !1240
  %43 = add i64 %1, 11616
  %44 = add i64 %1, 41
  %45 = add i64 %16, -96
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  store i64 %45, i64* %11, align 8, !tbaa !1240
  %47 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %48 = load i64, i64* %12, align 8
  %49 = add i64 %48, -76
  %50 = load i64, i64* %3, align 8
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %49 to i32*
  store i32 0, i32* %52
  %53 = add i64 %48, -24
  %54 = bitcast [32 x %union.VectorReg]* %13 to double*
  %55 = bitcast i64* %26 to double*
  %56 = add i64 %48, -64
  %57 = add i64 %48, -80
  %58 = bitcast %union.VectorReg* %14 to double*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_41cb20

block_41ccfc:                                     ; preds = %block_41cc9f
  %60 = add i32 %414, 1
  %61 = inttoptr i64 %186 to i32*
  store i32 %60, i32* %61
  %62 = add i64 %412, -110
  br label %block_41cc8e

block_41cd6c:                                     ; preds = %block_41cc6c, %block_41cd67
  %63 = phi i64 [ %488, %block_41cc6c ], [ %73, %block_41cd67 ]
  %64 = phi i64 [ %48, %block_41cc6c ], [ %185, %block_41cd67 ]
  %65 = phi %struct.Memory* [ %475, %block_41cc6c ], [ %308, %block_41cd67 ]
  %66 = add i64 %64, -4
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67
  %69 = add i32 %68, -7
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %70, i64 10, i64 247
  %72 = add i64 %63, %71
  br i1 %70, label %block_41cd76, label %block_41ce63

block_41cd67:                                     ; preds = %block_41cd25
  %73 = add i64 %321, 5
  br label %block_41cd6c

block_41ce63:                                     ; preds = %block_41ce5e, %block_41cd6c
  %74 = phi i64 [ %64, %block_41cd6c ], [ %391, %block_41ce5e ]
  %75 = phi %struct.Memory* [ %65, %block_41cd6c ], [ %416, %block_41ce5e ]
  %76 = add i64 %74, -72
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  store double %78, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %55, align 1, !tbaa !1246
  %79 = add i64 %74, -16
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %6, align 8, !tbaa !1240
  %82 = inttoptr i64 %81 to double*
  store double %78, double* %82
  %83 = load i64, i64* %11, align 8
  %84 = add i64 %83, 80
  %85 = icmp ugt i64 %83, -81
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %19, align 1, !tbaa !1248
  %87 = trunc i64 %84 to i32
  %88 = and i32 %87, 255
  %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #11
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  store i8 %92, i8* %20, align 1, !tbaa !1261
  %93 = xor i64 %83, 16
  %94 = xor i64 %93, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %21, align 1, !tbaa !1262
  %98 = icmp eq i64 %84, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %22, align 1, !tbaa !1263
  %100 = lshr i64 %84, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %23, align 1, !tbaa !1264
  %102 = lshr i64 %83, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %24, align 1, !tbaa !1265
  %107 = add i64 %83, 88
  %108 = inttoptr i64 %84 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %12, align 8, !tbaa !1240
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %3, align 8, !tbaa !1240
  %112 = add i64 %83, 96
  store i64 %112, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %75

block_41ce5e:                                     ; preds = %block_41ce1c
  br label %block_41ce63

block_41cda9:                                     ; preds = %block_41cd9f
  %113 = sext i32 %222 to i64
  %114 = shl nsw i64 %113, 3
  %115 = add i64 %397, %114
  %116 = inttoptr i64 %115 to double*
  %117 = load double, double* %116
  %118 = add i32 %210, -1
  %119 = zext i32 %118 to i64
  store i64 %119, i64* %7, align 8, !tbaa !1240
  %120 = sext i32 %118 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add i64 %121, ptrtoint (%qbnew_type* @qbnew to i64)
  %123 = inttoptr i64 %122 to double*
  %124 = load double, double* %123
  %125 = inttoptr i64 %398 to i64*
  %126 = load i64, i64* %125
  %127 = sext i32 %210 to i64
  %128 = mul nsw i64 %127, 200
  %129 = add i64 %128, %126
  %130 = mul nsw i64 %113, 40
  store i64 %130, i64* %8, align 8, !tbaa !1240
  %131 = add i64 %130, %129
  %132 = inttoptr i64 %131 to double*
  %133 = load double, double* %132
  %134 = fmul double %124, %133
  store double %134, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %135 = fadd double %117, %134
  store double %135, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %136 = inttoptr i64 %115 to double*
  store double %135, double* %136
  %137 = inttoptr i64 %396 to i32*
  %138 = load i32, i32* %137
  %139 = add i32 %138, 1
  %140 = inttoptr i64 %396 to i32*
  store i32 %139, i32* %140
  %141 = add i64 %220, -10
  br label %block_41cd9f

block_41cbd0:                                     ; preds = %block_41cbc6
  %142 = inttoptr i64 %243 to double*
  %143 = load double, double* %142
  %144 = add i32 %196, -1
  %145 = sext i32 %144 to i64
  %146 = shl nsw i64 %145, 3
  %147 = add i64 %146, ptrtoint (%qbnew_type* @qbnew to i64)
  %148 = inttoptr i64 %147 to double*
  %149 = load double, double* %148
  %150 = sext i32 %196 to i64
  store i64 %150, i64* %7, align 8, !tbaa !1240
  %151 = shl nsw i64 %150, 3
  %152 = add i64 %56, %151
  %153 = inttoptr i64 %152 to double*
  %154 = load double, double* %153
  %155 = fmul double %149, %154
  store double %155, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %156 = fadd double %143, %155
  store double %156, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %157 = inttoptr i64 %243 to double*
  store double %156, double* %157
  %158 = inttoptr i64 %57 to i32*
  %159 = load i32, i32* %158
  %160 = add i32 %159, 1
  %161 = inttoptr i64 %57 to i32*
  store i32 %160, i32* %161
  %162 = add i64 %206, -10
  br label %block_41cbc6

block_41cb48:                                     ; preds = %block_41cb52, %block_41cb2a
  %163 = phi i64 [ %277, %block_41cb2a ], [ %523, %block_41cb52 ]
  %164 = phi %struct.Memory* [ %370, %block_41cb2a ], [ %164, %block_41cb52 ]
  %165 = inttoptr i64 %57 to i32*
  %166 = load i32, i32* %165
  %167 = add i32 %166, -4
  %168 = lshr i32 %167, 31
  %169 = lshr i32 %166, 31
  %170 = xor i32 %168, %169
  %171 = add nuw nsw i32 %170, %169
  %172 = icmp eq i32 %171, 2
  %173 = icmp ne i32 %168, 0
  %174 = xor i1 %173, %172
  %175 = select i1 %174, i64 10, i64 90
  %176 = add i64 %163, %175
  %177 = inttoptr i64 %49 to i32*
  %178 = load i32, i32* %177
  br i1 %174, label %block_41cb52, label %block_41cba2

block_41cc76:                                     ; preds = %block_41cc6c
  store i64 5, i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %27, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %32, align 1, !tbaa !1244
  store i64 %56, i64* %10, align 8, !tbaa !1240
  %179 = add i64 %488, 11226
  %180 = add i64 %488, 17
  %181 = load i64, i64* %11, align 8, !tbaa !1240
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183
  store i64 %182, i64* %11, align 8, !tbaa !1240
  %184 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %179, %struct.Memory* %475)
  %185 = load i64, i64* %12, align 8
  %186 = add i64 %185, -76
  %187 = load i64, i64* %3, align 8
  %188 = add i64 %187, 7
  %189 = inttoptr i64 %186 to i32*
  store i32 0, i32* %189
  %190 = add i64 %185, -80
  %191 = add i64 %185, -64
  %192 = add i64 %185, -24
  br label %block_41cc8e

block_41cbc6:                                     ; preds = %block_41cbb5, %block_41cbd0
  %193 = phi i64 [ %245, %block_41cbb5 ], [ %162, %block_41cbd0 ]
  %194 = phi %struct.Memory* [ %370, %block_41cbb5 ], [ %194, %block_41cbd0 ]
  %195 = inttoptr i64 %57 to i32*
  %196 = load i32, i32* %195
  %197 = add i32 %196, -4
  %198 = lshr i32 %197, 31
  %199 = lshr i32 %196, 31
  %200 = xor i32 %198, %199
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = icmp ne i32 %198, 0
  %204 = xor i1 %203, %202
  %205 = select i1 %204, i64 10, i64 66
  %206 = add i64 %193, %205
  br i1 %204, label %block_41cbd0, label %block_41cc08

block_41cd9f:                                     ; preds = %block_41cd9f.preheader, %block_41cda9
  %207 = phi i64 [ %141, %block_41cda9 ], [ %238, %block_41cd9f.preheader ]
  %208 = phi %struct.Memory* [ %208, %block_41cda9 ], [ %224, %block_41cd9f.preheader ]
  %209 = inttoptr i64 %396 to i32*
  %210 = load i32, i32* %209
  %211 = add i32 %210, -4
  %212 = lshr i32 %211, 31
  %213 = lshr i32 %210, 31
  %214 = xor i32 %212, %213
  %215 = add nuw nsw i32 %214, %213
  %216 = icmp eq i32 %215, 2
  %217 = icmp ne i32 %212, 0
  %218 = xor i1 %217, %216
  %219 = select i1 %218, i64 10, i64 99
  %220 = add i64 %207, %219
  %221 = inttoptr i64 %392 to i32*
  %222 = load i32, i32* %221
  br i1 %218, label %block_41cda9, label %block_41ce02

block_41cd8e:                                     ; preds = %block_41ce02, %block_41cd76
  %223 = phi i64 [ %394, %block_41cd76 ], [ %526, %block_41ce02 ]
  %224 = phi %struct.Memory* [ %390, %block_41cd76 ], [ %208, %block_41ce02 ]
  %225 = inttoptr i64 %392 to i32*
  %226 = load i32, i32* %225
  %227 = add i32 %226, -4
  %228 = lshr i32 %227, 31
  %229 = trunc i32 %228 to i8
  %230 = lshr i32 %226, 31
  %231 = xor i32 %228, %230
  %232 = add nuw nsw i32 %231, %230
  %233 = icmp eq i32 %232, 2
  %234 = icmp ne i8 %229, 0
  %235 = xor i1 %234, %233
  %236 = select i1 %235, i64 10, i64 135
  %237 = add i64 %223, %236
  %238 = add i64 %237, 7
  %239 = inttoptr i64 %396 to i32*
  store i32 1, i32* %239
  br i1 %235, label %block_41cd9f.preheader, label %block_41ce1c.preheader

block_41cd9f.preheader:                           ; preds = %block_41cd8e
  br label %block_41cd9f

block_41ce1c.preheader:                           ; preds = %block_41cd8e
  %240 = add i64 %391, -72
  br label %block_41ce1c

block_41cbb5:                                     ; preds = %block_41cb20
  %241 = inttoptr i64 %56 to double*
  %242 = load double, double* %241
  store double %242, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %55, align 1, !tbaa !1246
  %243 = add i64 %48, -72
  %244 = inttoptr i64 %243 to double*
  store double %242, double* %244
  %245 = add i64 %383, 17
  %246 = inttoptr i64 %57 to i32*
  store i32 1, i32* %246
  br label %block_41cbc6

block_41cd2f:                                     ; preds = %block_41cd25
  %247 = inttoptr i64 %450 to double*
  %248 = load double, double* %247
  %249 = add i32 %310, -1
  %250 = sext i32 %249 to i64
  %251 = shl nsw i64 %250, 3
  %252 = add i64 %251, ptrtoint (%qbnew_type* @qbnew to i64)
  %253 = inttoptr i64 %252 to double*
  %254 = load double, double* %253
  %255 = sext i32 %310 to i64
  store i64 %255, i64* %7, align 8, !tbaa !1240
  %256 = shl nsw i64 %255, 3
  %257 = add i64 %191, %256
  %258 = inttoptr i64 %257 to double*
  %259 = load double, double* %258
  %260 = fmul double %254, %259
  store double %260, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %261 = fadd double %248, %260
  store double %261, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %262 = inttoptr i64 %450 to double*
  store double %261, double* %262
  %263 = inttoptr i64 %190 to i32*
  %264 = load i32, i32* %263
  %265 = add i32 %264, 1
  %266 = inttoptr i64 %190 to i32*
  store i32 %265, i32* %266
  %267 = add i64 %321, -10
  br label %block_41cd25

block_41cb2a:                                     ; preds = %block_41cb20
  %268 = inttoptr i64 %53 to i64*
  %269 = load i64, i64* %268
  %270 = sext i32 %372 to i64
  store i64 %270, i64* %7, align 8, !tbaa !1240
  %271 = shl nsw i64 %270, 3
  %272 = add i64 %271, %269
  %273 = inttoptr i64 %272 to double*
  %274 = load double, double* %273
  store double %274, double* %54, align 1, !tbaa !1246
  store double 0.000000e+00, double* %55, align 1, !tbaa !1246
  %275 = add i64 %56, %271
  %276 = inttoptr i64 %275 to double*
  store double %274, double* %276
  %277 = add i64 %383, 30
  %278 = inttoptr i64 %57 to i32*
  store i32 1, i32* %278
  br label %block_41cb48

block_41cca9:                                     ; preds = %block_41cc9f
  %279 = sext i32 %414 to i64
  %280 = shl nsw i64 %279, 3
  %281 = add i64 %191, %280
  %282 = inttoptr i64 %281 to double*
  %283 = load double, double* %282
  %284 = add i32 %402, -1
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %7, align 8, !tbaa !1240
  %286 = sext i32 %284 to i64
  %287 = shl nsw i64 %286, 3
  %288 = add i64 %287, ptrtoint (%qbnew_type* @qbnew to i64)
  %289 = inttoptr i64 %288 to double*
  %290 = load double, double* %289
  %291 = inttoptr i64 %192 to i64*
  %292 = load i64, i64* %291
  %293 = sext i32 %402 to i64
  %294 = mul nsw i64 %293, 200
  %295 = add i64 %294, %292
  store i64 %279, i64* %8, align 8, !tbaa !1240
  %296 = add i64 %280, %295
  %297 = inttoptr i64 %296 to double*
  %298 = load double, double* %297
  %299 = fmul double %290, %298
  store double %299, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %300 = fadd double %283, %299
  store double %300, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %301 = inttoptr i64 %281 to double*
  store double %300, double* %301
  %302 = inttoptr i64 %190 to i32*
  %303 = load i32, i32* %302
  %304 = add i32 %303, 1
  %305 = inttoptr i64 %190 to i32*
  store i32 %304, i32* %305
  %306 = add i64 %412, -10
  br label %block_41cc9f

block_41cd25:                                     ; preds = %block_41cd0f, %block_41cd2f
  %307 = phi i64 [ %457, %block_41cd0f ], [ %267, %block_41cd2f ]
  %308 = phi %struct.Memory* [ %460, %block_41cd0f ], [ %308, %block_41cd2f ]
  %309 = inttoptr i64 %190 to i32*
  %310 = load i32, i32* %309
  %311 = add i32 %310, -4
  %312 = lshr i32 %311, 31
  %313 = trunc i32 %312 to i8
  %314 = lshr i32 %310, 31
  %315 = xor i32 %312, %314
  %316 = add nuw nsw i32 %315, %314
  %317 = icmp eq i32 %316, 2
  %318 = icmp ne i8 %313, 0
  %319 = xor i1 %318, %317
  %320 = select i1 %319, i64 10, i64 66
  %321 = add i64 %307, %320
  br i1 %319, label %block_41cd2f, label %block_41cd67

block_41cc23:                                     ; preds = %block_41cc19
  %322 = inttoptr i64 %243 to double*
  %323 = load double, double* %322
  %324 = add i32 %433, -1
  %325 = sext i32 %324 to i64
  %326 = shl nsw i64 %325, 3
  %327 = add i64 %326, ptrtoint (%qbnew_type* @qbnew to i64)
  %328 = inttoptr i64 %327 to double*
  %329 = load double, double* %328
  %330 = inttoptr i64 %53 to i64*
  %331 = load i64, i64* %330
  %332 = sext i32 %433 to i64
  %333 = mul nsw i64 %332, 200
  store i64 %333, i64* %8, align 8, !tbaa !1240
  %334 = add i64 %333, %331
  store i64 %334, i64* %7, align 8, !tbaa !1240
  %335 = inttoptr i64 %334 to double*
  %336 = load double, double* %335
  %337 = fmul double %329, %336
  store double %337, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %338 = fadd double %323, %337
  store double %338, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %339 = inttoptr i64 %243 to double*
  store double %338, double* %339
  %340 = inttoptr i64 %57 to i32*
  %341 = load i32, i32* %340
  %342 = add i32 %341, 1
  %343 = inttoptr i64 %57 to i32*
  store i32 %342, i32* %343
  %344 = add i64 %444, -10
  br label %block_41cc19

block_41cba2:                                     ; preds = %block_41cb48
  %345 = add i32 %178, 1
  %346 = inttoptr i64 %49 to i32*
  store i32 %345, i32* %346
  %347 = add i64 %176, -130
  br label %block_41cb20

block_41ce26:                                     ; preds = %block_41ce1c
  %348 = inttoptr i64 %240 to double*
  %349 = load double, double* %348
  %350 = add i32 %418, -1
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 3
  %353 = add i64 %352, ptrtoint (%qbnew_type* @qbnew to i64)
  %354 = inttoptr i64 %353 to double*
  %355 = load double, double* %354
  %356 = sext i32 %418 to i64
  store i64 %356, i64* %7, align 8, !tbaa !1240
  %357 = shl nsw i64 %356, 3
  %358 = add i64 %397, %357
  %359 = inttoptr i64 %358 to double*
  %360 = load double, double* %359
  %361 = fmul double %355, %360
  store double %361, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %362 = fadd double %349, %361
  store double %362, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %363 = inttoptr i64 %240 to double*
  store double %362, double* %363
  %364 = inttoptr i64 %396 to i32*
  %365 = load i32, i32* %364
  %366 = add i32 %365, 1
  %367 = inttoptr i64 %396 to i32*
  store i32 %366, i32* %367
  %368 = add i64 %429, -10
  br label %block_41ce1c

block_41cb20:                                     ; preds = %block_41cba2, %block_41caf0
  %369 = phi i64 [ %51, %block_41caf0 ], [ %347, %block_41cba2 ]
  %370 = phi %struct.Memory* [ %47, %block_41caf0 ], [ %164, %block_41cba2 ]
  %371 = inttoptr i64 %49 to i32*
  %372 = load i32, i32* %371
  %373 = add i32 %372, -5
  %374 = lshr i32 %373, 31
  %375 = trunc i32 %374 to i8
  %376 = lshr i32 %372, 31
  %377 = xor i32 %374, %376
  %378 = add nuw nsw i32 %377, %376
  %379 = icmp eq i32 %378, 2
  %380 = icmp ne i8 %375, 0
  %381 = xor i1 %380, %379
  %382 = select i1 %381, i64 10, i64 149
  %383 = add i64 %369, %382
  br i1 %381, label %block_41cb2a, label %block_41cbb5

block_41cd76:                                     ; preds = %block_41cd6c
  store i64 5, i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %27, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %30, align 1, !tbaa !1244
  store i32 0, i32* %32, align 1, !tbaa !1244
  %384 = add i64 %64, -64
  store i64 %384, i64* %10, align 8, !tbaa !1240
  %385 = add i64 %72, 10970
  %386 = add i64 %72, 17
  %387 = load i64, i64* %11, align 8, !tbaa !1240
  %388 = add i64 %387, -8
  %389 = inttoptr i64 %388 to i64*
  store i64 %386, i64* %389
  store i64 %388, i64* %11, align 8, !tbaa !1240
  %390 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %385, %struct.Memory* %65)
  %391 = load i64, i64* %12, align 8
  %392 = add i64 %391, -76
  %393 = load i64, i64* %3, align 8
  %394 = add i64 %393, 7
  %395 = inttoptr i64 %392 to i32*
  store i32 1, i32* %395
  %396 = add i64 %391, -80
  %397 = add i64 %391, -64
  %398 = add i64 %391, -24
  br label %block_41cd8e

block_41cc9f:                                     ; preds = %block_41cc98, %block_41cca9
  %399 = phi i64 [ %445, %block_41cc98 ], [ %306, %block_41cca9 ]
  %400 = phi %struct.Memory* [ %460, %block_41cc98 ], [ %400, %block_41cca9 ]
  %401 = inttoptr i64 %190 to i32*
  %402 = load i32, i32* %401
  %403 = add i32 %402, -4
  %404 = lshr i32 %403, 31
  %405 = lshr i32 %402, 31
  %406 = xor i32 %404, %405
  %407 = add nuw nsw i32 %406, %405
  %408 = icmp eq i32 %407, 2
  %409 = icmp ne i32 %404, 0
  %410 = xor i1 %409, %408
  %411 = select i1 %410, i64 10, i64 93
  %412 = add i64 %399, %411
  %413 = inttoptr i64 %186 to i32*
  %414 = load i32, i32* %413
  br i1 %410, label %block_41cca9, label %block_41ccfc

block_41ce1c:                                     ; preds = %block_41ce26, %block_41ce1c.preheader
  %415 = phi i64 [ %368, %block_41ce26 ], [ %238, %block_41ce1c.preheader ]
  %416 = phi %struct.Memory* [ %416, %block_41ce26 ], [ %224, %block_41ce1c.preheader ]
  %417 = inttoptr i64 %396 to i32*
  %418 = load i32, i32* %417
  %419 = add i32 %418, -4
  %420 = lshr i32 %419, 31
  %421 = trunc i32 %420 to i8
  %422 = lshr i32 %418, 31
  %423 = xor i32 %420, %422
  %424 = add nuw nsw i32 %423, %422
  %425 = icmp eq i32 %424, 2
  %426 = icmp ne i8 %421, 0
  %427 = xor i1 %426, %425
  %428 = select i1 %427, i64 10, i64 66
  %429 = add i64 %415, %428
  br i1 %427, label %block_41ce26, label %block_41ce5e

block_41cc19:                                     ; preds = %block_41cc12, %block_41cc23
  %430 = phi i64 [ %448, %block_41cc12 ], [ %344, %block_41cc23 ]
  %431 = phi %struct.Memory* [ %194, %block_41cc12 ], [ %431, %block_41cc23 ]
  %432 = inttoptr i64 %57 to i32*
  %433 = load i32, i32* %432
  %434 = add i32 %433, -4
  %435 = lshr i32 %434, 31
  %436 = trunc i32 %435 to i8
  %437 = lshr i32 %433, 31
  %438 = xor i32 %435, %437
  %439 = add nuw nsw i32 %438, %437
  %440 = icmp eq i32 %439, 2
  %441 = icmp ne i8 %436, 0
  %442 = xor i1 %441, %440
  %443 = select i1 %442, i64 10, i64 78
  %444 = add i64 %430, %443
  br i1 %442, label %block_41cc23, label %block_41cc67

block_41cc98:                                     ; preds = %block_41cc8e
  %445 = add i64 %473, 7
  %446 = inttoptr i64 %190 to i32*
  store i32 1, i32* %446
  br label %block_41cc9f

block_41cc67:                                     ; preds = %block_41cc19
  %447 = add i64 %444, 5
  br label %block_41cc6c

block_41cc12:                                     ; preds = %block_41cc08
  %448 = add i64 %495, 7
  %449 = inttoptr i64 %57 to i32*
  store i32 1, i32* %449
  br label %block_41cc19

block_41cd0f:                                     ; preds = %block_41cc8e
  %450 = add i64 %185, -72
  %451 = inttoptr i64 %450 to double*
  %452 = load double, double* %451
  %453 = inttoptr i64 %191 to double*
  %454 = load double, double* %453
  %455 = fadd double %452, %454
  store double %455, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %456 = inttoptr i64 %450 to double*
  store double %455, double* %456
  %457 = add i64 %473, 22
  %458 = inttoptr i64 %190 to i32*
  store i32 1, i32* %458
  br label %block_41cd25

block_41cc8e:                                     ; preds = %block_41cc76, %block_41ccfc
  %459 = phi i64 [ %188, %block_41cc76 ], [ %62, %block_41ccfc ]
  %460 = phi %struct.Memory* [ %184, %block_41cc76 ], [ %400, %block_41ccfc ]
  %461 = inttoptr i64 %186 to i32*
  %462 = load i32, i32* %461
  %463 = add i32 %462, -5
  %464 = lshr i32 %463, 31
  %465 = trunc i32 %464 to i8
  %466 = lshr i32 %462, 31
  %467 = xor i32 %464, %466
  %468 = add nuw nsw i32 %467, %466
  %469 = icmp eq i32 %468, 2
  %470 = icmp ne i8 %465, 0
  %471 = xor i1 %470, %469
  %472 = select i1 %471, i64 10, i64 129
  %473 = add i64 %459, %472
  br i1 %471, label %block_41cc98, label %block_41cd0f

block_41cc6c:                                     ; preds = %block_41cc08, %block_41cc67
  %474 = phi i64 [ %495, %block_41cc08 ], [ %447, %block_41cc67 ]
  %475 = phi %struct.Memory* [ %194, %block_41cc08 ], [ %431, %block_41cc67 ]
  %476 = inttoptr i64 %489 to i32*
  %477 = load i32, i32* %476
  %478 = add i32 %477, -6
  %479 = lshr i32 %478, 31
  %480 = trunc i32 %479 to i8
  %481 = lshr i32 %477, 31
  %482 = xor i32 %479, %481
  %483 = add nuw nsw i32 %482, %481
  %484 = icmp eq i32 %483, 2
  %485 = icmp ne i8 %480, 0
  %486 = xor i1 %485, %484
  %487 = select i1 %486, i64 256, i64 10
  %488 = add i64 %474, %487
  br i1 %486, label %block_41cd6c, label %block_41cc76

block_41cc08:                                     ; preds = %block_41cbc6
  %489 = add i64 %48, -4
  %490 = inttoptr i64 %489 to i32*
  %491 = load i32, i32* %490
  %492 = add i32 %491, -5
  %493 = icmp eq i32 %492, 0
  %494 = select i1 %493, i64 10, i64 100
  %495 = add i64 %206, %494
  br i1 %493, label %block_41cc12, label %block_41cc6c

block_41cb52:                                     ; preds = %block_41cb48
  %496 = sext i32 %178 to i64
  %497 = shl nsw i64 %496, 3
  %498 = add i64 %56, %497
  %499 = inttoptr i64 %498 to double*
  %500 = load double, double* %499
  %501 = add i32 %166, -1
  %502 = zext i32 %501 to i64
  store i64 %502, i64* %7, align 8, !tbaa !1240
  %503 = sext i32 %501 to i64
  %504 = shl nsw i64 %503, 3
  %505 = add i64 %504, ptrtoint (%qbnew_type* @qbnew to i64)
  %506 = inttoptr i64 %505 to double*
  %507 = load double, double* %506
  %508 = inttoptr i64 %53 to i64*
  %509 = load i64, i64* %508
  %510 = sext i32 %166 to i64
  %511 = mul nsw i64 %510, 40
  %512 = add i64 %511, %509
  store i64 %496, i64* %8, align 8, !tbaa !1240
  %513 = add i64 %497, %512
  %514 = inttoptr i64 %513 to double*
  %515 = load double, double* %514
  %516 = fmul double %507, %515
  store double %516, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %517 = fadd double %500, %516
  store double %517, double* %54, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %518 = inttoptr i64 %498 to double*
  store double %517, double* %518
  %519 = inttoptr i64 %57 to i32*
  %520 = load i32, i32* %519
  %521 = add i32 %520, 1
  %522 = inttoptr i64 %57 to i32*
  store i32 %521, i32* %522
  %523 = add i64 %176, -10
  br label %block_41cb48

block_41ce02:                                     ; preds = %block_41cd9f
  %524 = add i32 %222, 1
  %525 = inttoptr i64 %392 to i32*
  store i32 %524, i32* %525
  %526 = add i64 %220, -116
  br label %block_41cd8e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4059d0_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4059d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, -32
  %24 = add i64 %1, 16
  %25 = add i64 %11, -48
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_4059b0_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -24
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %29 to double*
  %34 = load double, double* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = add i64 %28, -4
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 3
  %41 = add i64 %40, add (i64 ptrtoint (%seg_6220a0__bss_type* @seg_6220a0__bss to i64), i64 528)
  %42 = inttoptr i64 %41 to double*
  %43 = load double, double* %42
  %44 = fsub double %34, %43
  %45 = add i64 %28, -16
  %46 = inttoptr i64 %45 to double*
  store double %44, double* %46
  %47 = inttoptr i64 %45 to double*
  %48 = load double, double* %47
  %49 = inttoptr i64 %36 to i32*
  %50 = load i32, i32* %49
  %51 = sext i32 %50 to i64
  store i64 %51, i64* %6, align 8, !tbaa !1240
  %52 = shl nsw i64 %51, 3
  %53 = add i64 %52, add (i64 ptrtoint (%seg_6220a0__bss_type* @seg_6220a0__bss to i64), i64 16)
  %54 = inttoptr i64 %53 to double*
  %55 = load double, double* %54
  %56 = fadd double %48, %55
  store double %56, double* %30, align 1, !tbaa !1246
  store i64 0, i64* %35, align 1, !tbaa !1246
  %57 = inttoptr i64 %53 to double*
  store double %56, double* %57
  %58 = load i64, i64* %7, align 8
  %59 = add i64 %58, 32
  %60 = icmp ugt i64 %58, -33
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %14, align 1, !tbaa !1248
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %15, align 1, !tbaa !1261
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %16, align 1, !tbaa !1262
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %17, align 1, !tbaa !1263
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %18, align 1, !tbaa !1264
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %19, align 1, !tbaa !1265
  %81 = add i64 %58, 40
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %58, 48
  store i64 %86, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_420474__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_420474:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9 = xor i64 %6, %5
  %10 = lshr i64 %9, 4
  %11 = trunc i64 %10 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = lshr i64 %6, 63
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %5, 63
  %18 = xor i64 %15, %17
  %19 = add nuw nsw i64 %18, %17
  %20 = icmp eq i64 %19, 2
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = icmp ult i64 %5, 8
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !1248
  %25 = trunc i64 %5 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #11
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %8, align 1, !tbaa !1261
  store i8 %12, i8* %13, align 1, !tbaa !1262
  %31 = icmp eq i64 %5, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %14, align 1, !tbaa !1263
  %33 = trunc i64 %17 to i8
  store i8 %33, i8* %16, align 1, !tbaa !1264
  store i8 %21, i8* %22, align 1, !tbaa !1265
  %34 = inttoptr i64 %5 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %3, align 8, !tbaa !1240
  %36 = add i64 %5, 8
  store i64 %36, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_420470___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
block_420470:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400870_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400870:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %3, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %5, i64* %8
  %9 = inttoptr i64 %7 to i64*
  %10 = load i64, i64* %9
  store i64 %10, i64* %4, align 8, !tbaa !1240
  store i64 %6, i64* %3, align 8, !tbaa !1240
  %11 = add i64 %1, -112
  %12 = tail call %struct.Memory* @sub_400800_register_tm_clones(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  ret %struct.Memory* %12
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403c40_remap2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403c40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -6072
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -1032
  store i64 %24, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %6, align 8, !tbaa !1240
  %25 = add i64 %14, -16
  %26 = load i64, i64* %10, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %14, -20
  %29 = load i32, i32* %5, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = inttoptr i64 %25 to i64*
  %32 = load i64, i64* %31
  %33 = inttoptr i64 %32 to i32*
  %34 = load i32, i32* %33
  %35 = sext i32 %34 to i64
  %36 = mul nsw i64 %35, 1000
  %37 = add i64 %36, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %37, i64* %7, align 8, !tbaa !1240
  %38 = load i64, i64* %12, align 8
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  %41 = load i64, i64* %40
  %42 = add i64 %41, 4
  %43 = inttoptr i64 %42 to i32*
  %44 = load i32, i32* %43
  %45 = sext i32 %44 to i64
  %46 = mul nsw i64 %45, 1000
  %47 = load i64, i64* %6, align 8
  %48 = add i64 %46, %47
  store i64 %48, i64* %6, align 8, !tbaa !1240
  %49 = load i64, i64* %7, align 8
  store i64 %49, i64* %10, align 8, !tbaa !1240
  store i64 %48, i64* %9, align 8, !tbaa !1240
  %50 = add i64 %1, 400
  %51 = add i64 %1, 84
  %52 = load i64, i64* %11, align 8, !tbaa !1240
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %51, i64* %54
  store i64 %53, i64* %11, align 8, !tbaa !1240
  %55 = tail call %struct.Memory* @sub_403dd0_remapx(%struct.State* nonnull %0, i64 %50, %struct.Memory* %2)
  %56 = load i64, i64* %12, align 8
  %57 = add i64 %56, -2032
  %58 = load i64, i64* %3, align 8
  store i64 %57, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %6, align 8, !tbaa !1240
  %59 = add i64 %56, -8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %61, 8
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  %66 = mul nsw i64 %65, 1000
  %67 = add i64 %66, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %67, i64* %9, align 8, !tbaa !1240
  %68 = add i64 %61, 12
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69
  %71 = sext i32 %70 to i64
  %72 = mul nsw i64 %71, 1000
  store i64 %72, i64* %7, align 8, !tbaa !1240
  %73 = load i64, i64* %6, align 8
  %74 = add i64 %72, %73
  store i64 %74, i64* %6, align 8, !tbaa !1240
  %75 = load i64, i64* %9, align 8
  store i64 %75, i64* %10, align 8, !tbaa !1240
  store i64 %74, i64* %9, align 8, !tbaa !1240
  %76 = add i64 %58, 316
  %77 = add i64 %58, 67
  %78 = load i64, i64* %11, align 8, !tbaa !1240
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80
  store i64 %79, i64* %11, align 8, !tbaa !1240
  %81 = tail call %struct.Memory* @sub_403dd0_remapx(%struct.State* nonnull %0, i64 %76, %struct.Memory* %55)
  %82 = load i64, i64* %12, align 8
  %83 = add i64 %82, -3040
  %84 = load i64, i64* %3, align 8
  store i64 %83, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %6, align 8, !tbaa !1240
  %85 = add i64 %82, -8
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  %88 = add i64 %87, 16
  %89 = inttoptr i64 %88 to i32*
  %90 = load i32, i32* %89
  %91 = sext i32 %90 to i64
  %92 = mul nsw i64 %91, 1000
  %93 = add i64 %92, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %93, i64* %9, align 8, !tbaa !1240
  %94 = add i64 %87, 20
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %97, 1000
  store i64 %98, i64* %7, align 8, !tbaa !1240
  %99 = load i64, i64* %6, align 8
  %100 = add i64 %98, %99
  store i64 %100, i64* %6, align 8, !tbaa !1240
  %101 = load i64, i64* %9, align 8
  store i64 %101, i64* %10, align 8, !tbaa !1240
  store i64 %100, i64* %9, align 8, !tbaa !1240
  %102 = add i64 %84, 249
  %103 = add i64 %84, 67
  %104 = load i64, i64* %11, align 8, !tbaa !1240
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106
  store i64 %105, i64* %11, align 8, !tbaa !1240
  %107 = tail call %struct.Memory* @sub_403dd0_remapx(%struct.State* nonnull %0, i64 %102, %struct.Memory* %81)
  %108 = load i64, i64* %12, align 8
  %109 = add i64 %108, -4048
  %110 = load i64, i64* %3, align 8
  store i64 %109, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %6, align 8, !tbaa !1240
  %111 = add i64 %108, -8
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %113, 24
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115
  %117 = sext i32 %116 to i64
  %118 = mul nsw i64 %117, 1000
  %119 = add i64 %118, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %119, i64* %9, align 8, !tbaa !1240
  %120 = add i64 %113, 28
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121
  %123 = sext i32 %122 to i64
  %124 = mul nsw i64 %123, 1000
  store i64 %124, i64* %7, align 8, !tbaa !1240
  %125 = load i64, i64* %6, align 8
  %126 = add i64 %124, %125
  store i64 %126, i64* %6, align 8, !tbaa !1240
  %127 = load i64, i64* %9, align 8
  store i64 %127, i64* %10, align 8, !tbaa !1240
  store i64 %126, i64* %9, align 8, !tbaa !1240
  %128 = add i64 %110, 182
  %129 = add i64 %110, 67
  %130 = load i64, i64* %11, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  store i64 %131, i64* %11, align 8, !tbaa !1240
  %133 = tail call %struct.Memory* @sub_403dd0_remapx(%struct.State* nonnull %0, i64 %128, %struct.Memory* %107)
  %134 = load i64, i64* %12, align 8
  %135 = add i64 %134, -5056
  %136 = load i64, i64* %3, align 8
  store i64 %135, i64* %8, align 8, !tbaa !1240
  %137 = add i64 %134, -2032
  store i64 %137, i64* %9, align 8, !tbaa !1240
  %138 = add i64 %134, -1024
  store i64 %138, i64* %10, align 8, !tbaa !1240
  %139 = add i64 %136, 787
  %140 = add i64 %136, 26
  %141 = load i64, i64* %11, align 8, !tbaa !1240
  %142 = add i64 %141, -8
  %143 = inttoptr i64 %142 to i64*
  store i64 %140, i64* %143
  store i64 %142, i64* %11, align 8, !tbaa !1240
  %144 = tail call %struct.Memory* @sub_404070_remapy(%struct.State* nonnull %0, i64 %139, %struct.Memory* %133)
  %145 = load i64, i64* %12, align 8
  %146 = add i64 %145, -6064
  %147 = load i64, i64* %3, align 8
  store i64 %146, i64* %8, align 8, !tbaa !1240
  %148 = add i64 %145, -4048
  store i64 %148, i64* %9, align 8, !tbaa !1240
  %149 = add i64 %145, -3040
  store i64 %149, i64* %10, align 8, !tbaa !1240
  %150 = add i64 %147, 761
  %151 = add i64 %147, 26
  %152 = load i64, i64* %11, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  store i64 %153, i64* %11, align 8, !tbaa !1240
  %155 = tail call %struct.Memory* @sub_404070_remapy(%struct.State* nonnull %0, i64 %150, %struct.Memory* %144)
  %156 = load i64, i64* %3, align 8
  %157 = load i64, i64* %12, align 8
  %158 = add i64 %157, -6064
  store i64 %158, i64* %9, align 8, !tbaa !1240
  %159 = add i64 %157, -5056
  store i64 %159, i64* %10, align 8, !tbaa !1240
  %160 = add i64 %157, -12
  %161 = inttoptr i64 %160 to i32*
  %162 = load i32, i32* %161
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %163, 1000
  store i64 %164, i64* %7, align 8, !tbaa !1240
  %165 = add i64 %164, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %165, i64* %6, align 8, !tbaa !1240
  store i64 %165, i64* %8, align 8, !tbaa !1240
  %166 = add i64 %156, 1343
  %167 = add i64 %156, 46
  %168 = load i64, i64* %11, align 8, !tbaa !1240
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170
  store i64 %169, i64* %11, align 8, !tbaa !1240
  %171 = tail call %struct.Memory* @sub_4042d0_remapz(%struct.State* nonnull %0, i64 %166, %struct.Memory* %155)
  %172 = load i64, i64* %11, align 8
  %173 = add i64 %172, 6064
  %174 = icmp ugt i64 %172, -6065
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %18, align 1, !tbaa !1248
  %176 = trunc i64 %173 to i32
  %177 = and i32 %176, 255
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #11
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  store i8 %181, i8* %19, align 1, !tbaa !1261
  %182 = xor i64 %172, 16
  %183 = xor i64 %182, %173
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  store i8 %186, i8* %20, align 1, !tbaa !1262
  %187 = icmp eq i64 %173, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %21, align 1, !tbaa !1263
  %189 = lshr i64 %173, 63
  %190 = trunc i64 %189 to i8
  store i8 %190, i8* %22, align 1, !tbaa !1264
  %191 = lshr i64 %172, 63
  %192 = xor i64 %189, %191
  %193 = add nuw nsw i64 %192, %189
  %194 = icmp eq i64 %193, 2
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %23, align 1, !tbaa !1265
  %196 = add i64 %172, 6072
  %197 = inttoptr i64 %173 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %12, align 8, !tbaa !1240
  %199 = inttoptr i64 %196 to i64*
  %200 = load i64, i64* %199
  store i64 %200, i64* %3, align 8, !tbaa !1240
  %201 = add i64 %172, 6080
  store i64 %201, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %171
}

; Function Attrs: noinline
define %struct.Memory* @sub_4055b0_c_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4055b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = load i64, i64* %18, align 8
  %28 = load i64, i64* %17, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %18, align 8, !tbaa !1240
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %28, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %23, align 8
  %35 = add i64 %28, -24
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %22, align 8
  %38 = add i64 %28, -32
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = load i64, i64* %21, align 8
  %41 = add i64 %28, -40
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = load i64, i64* %14, align 8
  %44 = add i64 %28, -48
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  %46 = add i64 %28, -312
  store i64 %46, i64* %17, align 8, !tbaa !1240
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = load i8, i8* %5, align 1
  %54 = add i64 %28, 80
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %19, align 8, !tbaa !1240
  %57 = add i64 %28, 72
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %20, align 8, !tbaa !1240
  %60 = add i64 %28, 64
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %14, align 8, !tbaa !1240
  %63 = add i64 %28, 56
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %23, align 8, !tbaa !1240
  %66 = add i64 %28, 48
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %24, align 8, !tbaa !1240
  %69 = add i64 %28, 40
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %21, align 8, !tbaa !1240
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %72, 40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %22, align 8, !tbaa !1240
  %76 = add i64 %72, 32
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %72, -97
  %80 = inttoptr i64 %79 to i8*
  store i8 %53, i8* %80
  %81 = add i64 %72, 24
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i64 %72, -112
  %85 = inttoptr i64 %84 to i64*
  store i64 %78, i64* %85
  %86 = add i64 %72, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %72, -120
  %90 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %90
  %91 = add i64 %72, -48
  %92 = load i64, i64* %16, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %93
  %94 = inttoptr i64 %79 to i8*
  %95 = load i8, i8* %94
  %96 = add i64 %72, -49
  %97 = inttoptr i64 %96 to i8*
  store i8 %95, i8* %97
  %98 = add i64 %72, -56
  %99 = load i32, i32* %9, align 4
  %100 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %72, -60
  %102 = load i32, i32* %7, align 4
  %103 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %103
  %104 = add i64 %72, -64
  %105 = load i32, i32* %11, align 4
  %106 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %72, -68
  %108 = load i32, i32* %13, align 4
  %109 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %109
  %110 = add i64 %72, -80
  %111 = bitcast [32 x %union.VectorReg]* %25 to double*
  %112 = load double, double* %111, align 1
  %113 = inttoptr i64 %110 to double*
  store double %112, double* %113
  %114 = add i64 %72, -88
  %115 = bitcast %union.VectorReg* %26 to double*
  %116 = load double, double* %115, align 1
  %117 = inttoptr i64 %114 to double*
  store double %116, double* %117
  %118 = inttoptr i64 %91 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %72, -128
  %121 = inttoptr i64 %120 to i64*
  store i64 %119, i64* %121
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %72, -132
  %125 = inttoptr i64 %124 to i32*
  store i32 %83, i32* %125
  %126 = add i64 %72, -144
  %127 = load i64, i64* %20, align 8
  %128 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %128
  %129 = add i64 %72, -152
  %130 = load i64, i64* %14, align 8
  %131 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %131
  %132 = add i64 %72, -160
  %133 = load i64, i64* %23, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %134
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, -168
  %137 = load i64, i64* %24, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %138
  %139 = add i64 %135, -176
  %140 = load i64, i64* %21, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %141
  %142 = add i64 %135, -184
  %143 = load i64, i64* %22, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %144
  %145 = add i64 %135, -192
  %146 = load i64, i64* %19, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %147
  %148 = add i64 %1, 196
  %149 = load i64, i64* %17, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %158 = load i64, i64* %154, align 8, !alias.scope !1464, !noalias !1467
  %159 = load i64, i64* %153, align 8, !alias.scope !1464, !noalias !1467
  %160 = load i64, i64* %156, align 8, !alias.scope !1464, !noalias !1467
  %161 = load i64, i64* %157, align 8, !alias.scope !1464, !noalias !1467
  %162 = inttoptr i64 %149 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %149, 8
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %149, 16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %149, 24
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %149, 32
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %149, 40
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %149, 48
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %149, 56
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %149, 64
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %149, 72
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %150 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %3, align 8, !alias.scope !1464, !noalias !1467
  store i64 %149, i64* %17, align 8, !alias.scope !1464, !noalias !1467
  %193 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 95), i64 %123, i64 %158, i64 %159, i64 %160, i64 %161, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184, i64 %187, i64 %190), !noalias !1464
  %194 = load i64, i64* %3, align 8
  %195 = load i64, i64* %18, align 8
  %196 = add i64 %195, -49
  %197 = inttoptr i64 %196 to i8*
  %198 = load i8, i8* %197
  %199 = sext i8 %198 to i64
  %200 = and i64 %199, 4294967295
  %201 = add i64 %195, -196
  %202 = trunc i64 %193 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  %204 = add i64 %194, 27
  %205 = load i64, i64* %17, align 8, !tbaa !1240
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207
  %208 = load i64, i64* %154, align 8, !alias.scope !1469, !noalias !1472
  %209 = load i64, i64* %153, align 8, !alias.scope !1469, !noalias !1472
  %210 = load i64, i64* %156, align 8, !alias.scope !1469, !noalias !1472
  %211 = load i64, i64* %157, align 8, !alias.scope !1469, !noalias !1472
  %212 = inttoptr i64 %205 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %205, 8
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %205, 16
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %205, 24
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %205, 32
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %205, 40
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %205, 48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %205, 56
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %205, 64
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %205, 72
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = inttoptr i64 %206 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %3, align 8, !alias.scope !1469, !noalias !1472
  store i64 %205, i64* %17, align 8, !alias.scope !1469, !noalias !1472
  %243 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 122), i64 %200, i64 %208, i64 %209, i64 %210, i64 %211, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237, i64 %240), !noalias !1469
  %244 = load i64, i64* %18, align 8
  %245 = add i64 %244, -64
  %246 = load i64, i64* %3, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247
  %249 = icmp eq i32 %248, 0
  %250 = add i64 %244, -200
  %251 = trunc i64 %243 to i32
  %252 = inttoptr i64 %250 to i32*
  store i32 %251, i32* %252
  %253 = select i1 %249, i64 16, i64 79
  %254 = add i64 %246, %253
  br i1 %249, label %block_40569f, label %block_4056de

block_40569f:                                     ; preds = %block_4055b0
  %255 = add i64 %244, -56
  %256 = inttoptr i64 %255 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = add i64 %244, -96
  %260 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %260
  %261 = add i64 %244, -60
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i64 31, i64 18
  %266 = add i64 %254, %265
  br i1 %264, label %block_4056be, label %block_4056b1

block_4057b7:                                     ; preds = %block_405791
  %267 = add i64 %1127, 17
  %268 = load i64, i64* %17, align 8, !tbaa !1240
  %269 = add i64 %268, -8
  %270 = inttoptr i64 %269 to i64*
  store i64 %267, i64* %270
  %271 = load i64, i64* %155, align 8, !alias.scope !1474, !noalias !1477
  %272 = load i64, i64* %154, align 8, !alias.scope !1474, !noalias !1477
  %273 = load i64, i64* %153, align 8, !alias.scope !1474, !noalias !1477
  %274 = load i64, i64* %156, align 8, !alias.scope !1474, !noalias !1477
  %275 = load i64, i64* %157, align 8, !alias.scope !1474, !noalias !1477
  %276 = inttoptr i64 %268 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %268, 8
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %268, 16
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = add i64 %268, 24
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %268, 32
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %268, 40
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = add i64 %268, 48
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %268, 56
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %268, 64
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %268, 72
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = inttoptr i64 %269 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %3, align 8, !alias.scope !1474, !noalias !1477
  store i64 %268, i64* %17, align 8, !alias.scope !1474, !noalias !1477
  %307 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 480), i64 %271, i64 %272, i64 %273, i64 %274, i64 %275, i64 %277, i64 %280, i64 %283, i64 %286, i64 %289, i64 %292, i64 %295, i64 %298, i64 %301, i64 %304), !noalias !1474
  %308 = load i64, i64* %18, align 8
  %309 = add i64 %308, -236
  %310 = trunc i64 %307 to i32
  %311 = load i64, i64* %3, align 8
  %312 = add i64 %311, 6
  %313 = inttoptr i64 %309 to i32*
  store i32 %310, i32* %313
  br label %block_4057d3

block_4056de:                                     ; preds = %block_4055b0
  %314 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %315 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %316 = add i64 %244, -56
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  %320 = add i64 %244, -60
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %314, align 8, !tbaa !1240
  %324 = inttoptr i64 %245 to i32*
  %325 = load i32, i32* %324
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %315, align 8, !tbaa !1240
  %327 = add i64 %254, 26
  %328 = load i64, i64* %17, align 8, !tbaa !1240
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %327, i64* %330
  %331 = load i64, i64* %156, align 8, !alias.scope !1479, !noalias !1482
  %332 = load i64, i64* %157, align 8, !alias.scope !1479, !noalias !1482
  %333 = inttoptr i64 %328 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %328, 8
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %328, 16
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %328, 24
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %328, 32
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %328, 40
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %328, 48
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %328, 56
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %328, 64
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %328, 72
  %360 = inttoptr i64 %359 to i64*
  %361 = load i64, i64* %360
  %362 = inttoptr i64 %329 to i64*
  %363 = load i64, i64* %362
  store i64 %363, i64* %3, align 8, !alias.scope !1479, !noalias !1482
  store i64 %328, i64* %17, align 8, !alias.scope !1479, !noalias !1482
  %364 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 206), i64 %319, i64 %323, i64 %326, i64 %331, i64 %332, i64 %334, i64 %337, i64 %340, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355, i64 %358, i64 %361), !noalias !1479
  %365 = load i64, i64* %18, align 8
  %366 = add i64 %365, -208
  %367 = trunc i64 %364 to i32
  %368 = load i64, i64* %3, align 8
  %369 = add i64 %368, 6
  %370 = inttoptr i64 %366 to i32*
  store i32 %367, i32* %370
  br label %block_4056fe

block_4057d3:                                     ; preds = %block_405775, %block_40579b, %block_4057b7
  %371 = phi i64 [ %1281, %block_405775 ], [ %1169, %block_40579b ], [ %308, %block_4057b7 ]
  %372 = phi i64 [ %1285, %block_405775 ], [ %1174, %block_40579b ], [ %312, %block_4057b7 ]
  %373 = phi i64 [ 71, %block_405775 ], [ 5, %block_40579b ], [ 5, %block_4057b7 ]
  %374 = phi %struct.Memory* [ %1289, %block_405775 ], [ %1289, %block_40579b ], [ %1289, %block_4057b7 ]
  %375 = add i64 %372, %373
  %376 = add i64 %371, 32
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %375, 21
  %380 = load i64, i64* %17, align 8, !tbaa !1240
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %382
  %383 = load i64, i64* %154, align 8, !alias.scope !1484, !noalias !1487
  %384 = load i64, i64* %153, align 8, !alias.scope !1484, !noalias !1487
  %385 = load i64, i64* %156, align 8, !alias.scope !1484, !noalias !1487
  %386 = load i64, i64* %157, align 8, !alias.scope !1484, !noalias !1487
  %387 = inttoptr i64 %380 to i64*
  %388 = load i64, i64* %387
  %389 = add i64 %380, 8
  %390 = inttoptr i64 %389 to i64*
  %391 = load i64, i64* %390
  %392 = add i64 %380, 16
  %393 = inttoptr i64 %392 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %380, 24
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %380, 32
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %380, 40
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %380, 48
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %380, 56
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %380, 64
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %380, 72
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = inttoptr i64 %381 to i64*
  %417 = load i64, i64* %416
  store i64 %417, i64* %3, align 8, !alias.scope !1484, !noalias !1487
  store i64 %380, i64* %17, align 8, !alias.scope !1484, !noalias !1487
  %418 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 525), i64 %378, i64 %383, i64 %384, i64 %385, i64 %386, i64 %388, i64 %391, i64 %394, i64 %397, i64 %400, i64 %403, i64 %406, i64 %409, i64 %412, i64 %415), !noalias !1484
  %419 = load i64, i64* %3, align 8
  %420 = load i64, i64* %18, align 8
  %421 = add i64 %420, 40
  %422 = inttoptr i64 %421 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %15, align 8, !tbaa !1240
  %424 = add i64 %420, -240
  %425 = trunc i64 %418 to i32
  %426 = inttoptr i64 %424 to i32*
  store i32 %425, i32* %426
  %427 = add i64 %419, 27
  %428 = load i64, i64* %17, align 8, !tbaa !1240
  %429 = add i64 %428, -8
  %430 = inttoptr i64 %429 to i64*
  store i64 %427, i64* %430
  %431 = load i64, i64* %154, align 8, !alias.scope !1489, !noalias !1492
  %432 = load i64, i64* %153, align 8, !alias.scope !1489, !noalias !1492
  %433 = load i64, i64* %156, align 8, !alias.scope !1489, !noalias !1492
  %434 = load i64, i64* %157, align 8, !alias.scope !1489, !noalias !1492
  %435 = inttoptr i64 %428 to i64*
  %436 = load i64, i64* %435
  %437 = add i64 %428, 8
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %428, 16
  %441 = inttoptr i64 %440 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %428, 24
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %428, 32
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %428, 40
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %428, 48
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %428, 56
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %428, 64
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %428, 72
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = inttoptr i64 %429 to i64*
  %465 = load i64, i64* %464
  store i64 %465, i64* %3, align 8, !alias.scope !1489, !noalias !1492
  store i64 %428, i64* %17, align 8, !alias.scope !1489, !noalias !1492
  %466 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 562), i64 %423, i64 %431, i64 %432, i64 %433, i64 %434, i64 %436, i64 %439, i64 %442, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457, i64 %460, i64 %463), !noalias !1489
  %467 = load i64, i64* %3, align 8
  %468 = load i64, i64* %18, align 8
  %469 = add i64 %468, -244
  %470 = trunc i64 %466 to i32
  %471 = inttoptr i64 %469 to i32*
  store i32 %470, i32* %471
  %472 = add i64 %467, 23
  %473 = load i64, i64* %17, align 8, !tbaa !1240
  %474 = add i64 %473, -8
  %475 = inttoptr i64 %474 to i64*
  store i64 %472, i64* %475
  %476 = load i64, i64* %155, align 8, !alias.scope !1494, !noalias !1497
  %477 = load i64, i64* %154, align 8, !alias.scope !1494, !noalias !1497
  %478 = load i64, i64* %153, align 8, !alias.scope !1494, !noalias !1497
  %479 = load i64, i64* %156, align 8, !alias.scope !1494, !noalias !1497
  %480 = load i64, i64* %157, align 8, !alias.scope !1494, !noalias !1497
  %481 = inttoptr i64 %473 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %473, 8
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %473, 16
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %473, 24
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %473, 32
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %473, 40
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = add i64 %473, 48
  %499 = inttoptr i64 %498 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %473, 56
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %473, 64
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = add i64 %473, 72
  %508 = inttoptr i64 %507 to i64*
  %509 = load i64, i64* %508
  %510 = inttoptr i64 %474 to i64*
  %511 = load i64, i64* %510
  store i64 %511, i64* %3, align 8, !alias.scope !1494, !noalias !1497
  store i64 %473, i64* %17, align 8, !alias.scope !1494, !noalias !1497
  %512 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 599), i64 %476, i64 %477, i64 %478, i64 %479, i64 %480, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497, i64 %500, i64 %503, i64 %506, i64 %509), !noalias !1494
  %513 = load i64, i64* %3, align 8
  %514 = load i64, i64* %18, align 8
  %515 = add i64 %514, 48
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = add i64 %514, -248
  %519 = trunc i64 %512 to i32
  %520 = inttoptr i64 %518 to i32*
  store i32 %519, i32* %520
  %521 = add i64 %513, 27
  %522 = load i64, i64* %17, align 8, !tbaa !1240
  %523 = add i64 %522, -8
  %524 = inttoptr i64 %523 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %154, align 8, !alias.scope !1499, !noalias !1502
  %526 = load i64, i64* %153, align 8, !alias.scope !1499, !noalias !1502
  %527 = load i64, i64* %156, align 8, !alias.scope !1499, !noalias !1502
  %528 = load i64, i64* %157, align 8, !alias.scope !1499, !noalias !1502
  %529 = inttoptr i64 %522 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %522, 8
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %522, 16
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %522, 24
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %522, 32
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %522, 40
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %522, 48
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = add i64 %522, 56
  %550 = inttoptr i64 %549 to i64*
  %551 = load i64, i64* %550
  %552 = add i64 %522, 64
  %553 = inttoptr i64 %552 to i64*
  %554 = load i64, i64* %553
  %555 = add i64 %522, 72
  %556 = inttoptr i64 %555 to i64*
  %557 = load i64, i64* %556
  %558 = inttoptr i64 %523 to i64*
  %559 = load i64, i64* %558
  store i64 %559, i64* %3, align 8, !alias.scope !1499, !noalias !1502
  store i64 %522, i64* %17, align 8, !alias.scope !1499, !noalias !1502
  %560 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1276), i64 %517, i64 %525, i64 %526, i64 %527, i64 %528, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548, i64 %551, i64 %554, i64 %557), !noalias !1499
  %561 = load i64, i64* %3, align 8
  %562 = load i64, i64* %18, align 8
  %563 = add i64 %562, 56
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %562, -252
  %567 = trunc i64 %560 to i32
  %568 = inttoptr i64 %566 to i32*
  store i32 %567, i32* %568
  %569 = add i64 %561, 27
  %570 = load i64, i64* %17, align 8, !tbaa !1240
  %571 = add i64 %570, -8
  %572 = inttoptr i64 %571 to i64*
  store i64 %569, i64* %572
  %573 = load i64, i64* %154, align 8, !alias.scope !1504, !noalias !1507
  %574 = load i64, i64* %153, align 8, !alias.scope !1504, !noalias !1507
  %575 = load i64, i64* %156, align 8, !alias.scope !1504, !noalias !1507
  %576 = load i64, i64* %157, align 8, !alias.scope !1504, !noalias !1507
  %577 = inttoptr i64 %570 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %570, 8
  %580 = inttoptr i64 %579 to i64*
  %581 = load i64, i64* %580
  %582 = add i64 %570, 16
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = add i64 %570, 24
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  %588 = add i64 %570, 32
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %570, 40
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = add i64 %570, 48
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  %597 = add i64 %570, 56
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %570, 64
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = add i64 %570, 72
  %604 = inttoptr i64 %603 to i64*
  %605 = load i64, i64* %604
  %606 = inttoptr i64 %571 to i64*
  %607 = load i64, i64* %606
  store i64 %607, i64* %3, align 8, !alias.scope !1504, !noalias !1507
  store i64 %570, i64* %17, align 8, !alias.scope !1504, !noalias !1507
  %608 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 619), i64 %565, i64 %573, i64 %574, i64 %575, i64 %576, i64 %578, i64 %581, i64 %584, i64 %587, i64 %590, i64 %593, i64 %596, i64 %599, i64 %602, i64 %605), !noalias !1504
  %609 = load i64, i64* %3, align 8
  %610 = load i64, i64* %18, align 8
  %611 = add i64 %610, 64
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %610, -256
  %615 = trunc i64 %608 to i32
  %616 = inttoptr i64 %614 to i32*
  store i32 %615, i32* %616
  %617 = add i64 %609, 27
  %618 = load i64, i64* %17, align 8, !tbaa !1240
  %619 = add i64 %618, -8
  %620 = inttoptr i64 %619 to i64*
  store i64 %617, i64* %620
  %621 = load i64, i64* %154, align 8, !alias.scope !1509, !noalias !1512
  %622 = load i64, i64* %153, align 8, !alias.scope !1509, !noalias !1512
  %623 = load i64, i64* %156, align 8, !alias.scope !1509, !noalias !1512
  %624 = load i64, i64* %157, align 8, !alias.scope !1509, !noalias !1512
  %625 = inttoptr i64 %618 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %618, 8
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %618, 16
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = add i64 %618, 24
  %634 = inttoptr i64 %633 to i64*
  %635 = load i64, i64* %634
  %636 = add i64 %618, 32
  %637 = inttoptr i64 %636 to i64*
  %638 = load i64, i64* %637
  %639 = add i64 %618, 40
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %618, 48
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = add i64 %618, 56
  %646 = inttoptr i64 %645 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %618, 64
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = add i64 %618, 72
  %652 = inttoptr i64 %651 to i64*
  %653 = load i64, i64* %652
  %654 = inttoptr i64 %619 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %3, align 8, !alias.scope !1509, !noalias !1512
  store i64 %618, i64* %17, align 8, !alias.scope !1509, !noalias !1512
  %656 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 642), i64 %613, i64 %621, i64 %622, i64 %623, i64 %624, i64 %626, i64 %629, i64 %632, i64 %635, i64 %638, i64 %641, i64 %644, i64 %647, i64 %650, i64 %653), !noalias !1509
  %657 = load i64, i64* %3, align 8
  %658 = load i64, i64* %18, align 8
  %659 = add i64 %658, 72
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %658, -260
  %663 = trunc i64 %656 to i32
  %664 = inttoptr i64 %662 to i32*
  store i32 %663, i32* %664
  %665 = add i64 %657, 27
  %666 = load i64, i64* %17, align 8, !tbaa !1240
  %667 = add i64 %666, -8
  %668 = inttoptr i64 %667 to i64*
  store i64 %665, i64* %668
  %669 = load i64, i64* %154, align 8, !alias.scope !1514, !noalias !1517
  %670 = load i64, i64* %153, align 8, !alias.scope !1514, !noalias !1517
  %671 = load i64, i64* %156, align 8, !alias.scope !1514, !noalias !1517
  %672 = load i64, i64* %157, align 8, !alias.scope !1514, !noalias !1517
  %673 = inttoptr i64 %666 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %666, 8
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %666, 16
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %666, 24
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %666, 32
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %666, 40
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %666, 48
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %666, 56
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = add i64 %666, 64
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = add i64 %666, 72
  %700 = inttoptr i64 %699 to i64*
  %701 = load i64, i64* %700
  %702 = inttoptr i64 %667 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %3, align 8, !alias.scope !1514, !noalias !1517
  store i64 %666, i64* %17, align 8, !alias.scope !1514, !noalias !1517
  %704 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 665), i64 %661, i64 %669, i64 %670, i64 %671, i64 %672, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695, i64 %698, i64 %701), !noalias !1514
  %705 = load i64, i64* %3, align 8
  %706 = load i64, i64* %18, align 8
  %707 = add i64 %706, 80
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %706, -264
  %711 = trunc i64 %704 to i32
  %712 = inttoptr i64 %710 to i32*
  store i32 %711, i32* %712
  %713 = add i64 %705, 27
  %714 = load i64, i64* %17, align 8, !tbaa !1240
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716
  %717 = load i64, i64* %154, align 8, !alias.scope !1519, !noalias !1522
  %718 = load i64, i64* %153, align 8, !alias.scope !1519, !noalias !1522
  %719 = load i64, i64* %156, align 8, !alias.scope !1519, !noalias !1522
  %720 = load i64, i64* %157, align 8, !alias.scope !1519, !noalias !1522
  %721 = inttoptr i64 %714 to i64*
  %722 = load i64, i64* %721
  %723 = add i64 %714, 8
  %724 = inttoptr i64 %723 to i64*
  %725 = load i64, i64* %724
  %726 = add i64 %714, 16
  %727 = inttoptr i64 %726 to i64*
  %728 = load i64, i64* %727
  %729 = add i64 %714, 24
  %730 = inttoptr i64 %729 to i64*
  %731 = load i64, i64* %730
  %732 = add i64 %714, 32
  %733 = inttoptr i64 %732 to i64*
  %734 = load i64, i64* %733
  %735 = add i64 %714, 40
  %736 = inttoptr i64 %735 to i64*
  %737 = load i64, i64* %736
  %738 = add i64 %714, 48
  %739 = inttoptr i64 %738 to i64*
  %740 = load i64, i64* %739
  %741 = add i64 %714, 56
  %742 = inttoptr i64 %741 to i64*
  %743 = load i64, i64* %742
  %744 = add i64 %714, 64
  %745 = inttoptr i64 %744 to i64*
  %746 = load i64, i64* %745
  %747 = add i64 %714, 72
  %748 = inttoptr i64 %747 to i64*
  %749 = load i64, i64* %748
  %750 = inttoptr i64 %715 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %3, align 8, !alias.scope !1519, !noalias !1522
  store i64 %714, i64* %17, align 8, !alias.scope !1519, !noalias !1522
  %752 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 688), i64 %709, i64 %717, i64 %718, i64 %719, i64 %720, i64 %722, i64 %725, i64 %728, i64 %731, i64 %734, i64 %737, i64 %740, i64 %743, i64 %746, i64 %749), !noalias !1519
  %753 = load i64, i64* %3, align 8
  %754 = load i64, i64* %18, align 8
  %755 = add i64 %754, 88
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %15, align 8, !tbaa !1240
  %758 = add i64 %754, -268
  %759 = trunc i64 %752 to i32
  %760 = inttoptr i64 %758 to i32*
  store i32 %759, i32* %760
  %761 = add i64 %753, 27
  %762 = load i64, i64* %17, align 8, !tbaa !1240
  %763 = add i64 %762, -8
  %764 = inttoptr i64 %763 to i64*
  store i64 %761, i64* %764
  %765 = load i64, i64* %154, align 8, !alias.scope !1524, !noalias !1527
  %766 = load i64, i64* %153, align 8, !alias.scope !1524, !noalias !1527
  %767 = load i64, i64* %156, align 8, !alias.scope !1524, !noalias !1527
  %768 = load i64, i64* %157, align 8, !alias.scope !1524, !noalias !1527
  %769 = inttoptr i64 %762 to i64*
  %770 = load i64, i64* %769
  %771 = add i64 %762, 8
  %772 = inttoptr i64 %771 to i64*
  %773 = load i64, i64* %772
  %774 = add i64 %762, 16
  %775 = inttoptr i64 %774 to i64*
  %776 = load i64, i64* %775
  %777 = add i64 %762, 24
  %778 = inttoptr i64 %777 to i64*
  %779 = load i64, i64* %778
  %780 = add i64 %762, 32
  %781 = inttoptr i64 %780 to i64*
  %782 = load i64, i64* %781
  %783 = add i64 %762, 40
  %784 = inttoptr i64 %783 to i64*
  %785 = load i64, i64* %784
  %786 = add i64 %762, 48
  %787 = inttoptr i64 %786 to i64*
  %788 = load i64, i64* %787
  %789 = add i64 %762, 56
  %790 = inttoptr i64 %789 to i64*
  %791 = load i64, i64* %790
  %792 = add i64 %762, 64
  %793 = inttoptr i64 %792 to i64*
  %794 = load i64, i64* %793
  %795 = add i64 %762, 72
  %796 = inttoptr i64 %795 to i64*
  %797 = load i64, i64* %796
  %798 = inttoptr i64 %763 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %3, align 8, !alias.scope !1524, !noalias !1527
  store i64 %762, i64* %17, align 8, !alias.scope !1524, !noalias !1527
  %800 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 711), i64 %757, i64 %765, i64 %766, i64 %767, i64 %768, i64 %770, i64 %773, i64 %776, i64 %779, i64 %782, i64 %785, i64 %788, i64 %791, i64 %794, i64 %797), !noalias !1524
  %801 = load i64, i64* %3, align 8
  %802 = load i64, i64* %18, align 8
  %803 = add i64 %802, -272
  %804 = trunc i64 %800 to i32
  %805 = inttoptr i64 %803 to i32*
  store i32 %804, i32* %805
  %806 = add i64 %801, 23
  %807 = load i64, i64* %17, align 8, !tbaa !1240
  %808 = add i64 %807, -8
  %809 = inttoptr i64 %808 to i64*
  store i64 %806, i64* %809
  %810 = load i64, i64* %155, align 8, !alias.scope !1529, !noalias !1532
  %811 = load i64, i64* %154, align 8, !alias.scope !1529, !noalias !1532
  %812 = load i64, i64* %153, align 8, !alias.scope !1529, !noalias !1532
  %813 = load i64, i64* %156, align 8, !alias.scope !1529, !noalias !1532
  %814 = load i64, i64* %157, align 8, !alias.scope !1529, !noalias !1532
  %815 = inttoptr i64 %807 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %807, 8
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %807, 16
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %807, 24
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %807, 32
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  %829 = add i64 %807, 40
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = add i64 %807, 48
  %833 = inttoptr i64 %832 to i64*
  %834 = load i64, i64* %833
  %835 = add i64 %807, 56
  %836 = inttoptr i64 %835 to i64*
  %837 = load i64, i64* %836
  %838 = add i64 %807, 64
  %839 = inttoptr i64 %838 to i64*
  %840 = load i64, i64* %839
  %841 = add i64 %807, 72
  %842 = inttoptr i64 %841 to i64*
  %843 = load i64, i64* %842
  %844 = inttoptr i64 %808 to i64*
  %845 = load i64, i64* %844
  store i64 %845, i64* %3, align 8, !alias.scope !1529, !noalias !1532
  store i64 %807, i64* %17, align 8, !alias.scope !1529, !noalias !1532
  %846 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 734), i64 %810, i64 %811, i64 %812, i64 %813, i64 %814, i64 %816, i64 %819, i64 %822, i64 %825, i64 %828, i64 %831, i64 %834, i64 %837, i64 %840, i64 %843), !noalias !1529
  %847 = load i64, i64* %3, align 8
  %848 = load i64, i64* %18, align 8
  %849 = add i64 %848, -276
  %850 = trunc i64 %846 to i32
  %851 = inttoptr i64 %849 to i32*
  store i32 %850, i32* %851
  %852 = add i64 %847, 23
  %853 = load i64, i64* %17, align 8, !tbaa !1240
  %854 = add i64 %853, -8
  %855 = inttoptr i64 %854 to i64*
  store i64 %852, i64* %855
  %856 = load i64, i64* %155, align 8, !alias.scope !1534, !noalias !1537
  %857 = load i64, i64* %154, align 8, !alias.scope !1534, !noalias !1537
  %858 = load i64, i64* %153, align 8, !alias.scope !1534, !noalias !1537
  %859 = load i64, i64* %156, align 8, !alias.scope !1534, !noalias !1537
  %860 = load i64, i64* %157, align 8, !alias.scope !1534, !noalias !1537
  %861 = inttoptr i64 %853 to i64*
  %862 = load i64, i64* %861
  %863 = add i64 %853, 8
  %864 = inttoptr i64 %863 to i64*
  %865 = load i64, i64* %864
  %866 = add i64 %853, 16
  %867 = inttoptr i64 %866 to i64*
  %868 = load i64, i64* %867
  %869 = add i64 %853, 24
  %870 = inttoptr i64 %869 to i64*
  %871 = load i64, i64* %870
  %872 = add i64 %853, 32
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %853, 40
  %876 = inttoptr i64 %875 to i64*
  %877 = load i64, i64* %876
  %878 = add i64 %853, 48
  %879 = inttoptr i64 %878 to i64*
  %880 = load i64, i64* %879
  %881 = add i64 %853, 56
  %882 = inttoptr i64 %881 to i64*
  %883 = load i64, i64* %882
  %884 = add i64 %853, 64
  %885 = inttoptr i64 %884 to i64*
  %886 = load i64, i64* %885
  %887 = add i64 %853, 72
  %888 = inttoptr i64 %887 to i64*
  %889 = load i64, i64* %888
  %890 = inttoptr i64 %854 to i64*
  %891 = load i64, i64* %890
  store i64 %891, i64* %3, align 8, !alias.scope !1534, !noalias !1537
  store i64 %853, i64* %17, align 8, !alias.scope !1534, !noalias !1537
  %892 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 775), i64 %856, i64 %857, i64 %858, i64 %859, i64 %860, i64 %862, i64 %865, i64 %868, i64 %871, i64 %874, i64 %877, i64 %880, i64 %883, i64 %886, i64 %889), !noalias !1534
  %893 = load i64, i64* %3, align 8
  %894 = load i64, i64* %18, align 8
  %895 = add i64 %894, -280
  %896 = trunc i64 %892 to i32
  %897 = inttoptr i64 %895 to i32*
  store i32 %896, i32* %897
  %898 = add i64 %893, 23
  %899 = load i64, i64* %17, align 8, !tbaa !1240
  %900 = add i64 %899, -8
  %901 = inttoptr i64 %900 to i64*
  store i64 %898, i64* %901
  %902 = load i64, i64* %155, align 8, !alias.scope !1539, !noalias !1542
  %903 = load i64, i64* %154, align 8, !alias.scope !1539, !noalias !1542
  %904 = load i64, i64* %153, align 8, !alias.scope !1539, !noalias !1542
  %905 = load i64, i64* %156, align 8, !alias.scope !1539, !noalias !1542
  %906 = load i64, i64* %157, align 8, !alias.scope !1539, !noalias !1542
  %907 = inttoptr i64 %899 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %899, 8
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %899, 16
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = add i64 %899, 24
  %916 = inttoptr i64 %915 to i64*
  %917 = load i64, i64* %916
  %918 = add i64 %899, 32
  %919 = inttoptr i64 %918 to i64*
  %920 = load i64, i64* %919
  %921 = add i64 %899, 40
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  %924 = add i64 %899, 48
  %925 = inttoptr i64 %924 to i64*
  %926 = load i64, i64* %925
  %927 = add i64 %899, 56
  %928 = inttoptr i64 %927 to i64*
  %929 = load i64, i64* %928
  %930 = add i64 %899, 64
  %931 = inttoptr i64 %930 to i64*
  %932 = load i64, i64* %931
  %933 = add i64 %899, 72
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = inttoptr i64 %900 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %3, align 8, !alias.scope !1539, !noalias !1542
  store i64 %899, i64* %17, align 8, !alias.scope !1539, !noalias !1542
  %938 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 814), i64 %902, i64 %903, i64 %904, i64 %905, i64 %906, i64 %908, i64 %911, i64 %914, i64 %917, i64 %920, i64 %923, i64 %926, i64 %929, i64 %932, i64 %935), !noalias !1539
  %939 = load i64, i64* %3, align 8
  %940 = load i64, i64* %18, align 8
  %941 = add i64 %940, -284
  %942 = trunc i64 %938 to i32
  %943 = inttoptr i64 %941 to i32*
  store i32 %942, i32* %943
  %944 = add i64 %939, 23
  %945 = load i64, i64* %17, align 8, !tbaa !1240
  %946 = add i64 %945, -8
  %947 = inttoptr i64 %946 to i64*
  store i64 %944, i64* %947
  %948 = load i64, i64* %155, align 8, !alias.scope !1544, !noalias !1547
  %949 = load i64, i64* %154, align 8, !alias.scope !1544, !noalias !1547
  %950 = load i64, i64* %153, align 8, !alias.scope !1544, !noalias !1547
  %951 = load i64, i64* %156, align 8, !alias.scope !1544, !noalias !1547
  %952 = load i64, i64* %157, align 8, !alias.scope !1544, !noalias !1547
  %953 = inttoptr i64 %945 to i64*
  %954 = load i64, i64* %953
  %955 = add i64 %945, 8
  %956 = inttoptr i64 %955 to i64*
  %957 = load i64, i64* %956
  %958 = add i64 %945, 16
  %959 = inttoptr i64 %958 to i64*
  %960 = load i64, i64* %959
  %961 = add i64 %945, 24
  %962 = inttoptr i64 %961 to i64*
  %963 = load i64, i64* %962
  %964 = add i64 %945, 32
  %965 = inttoptr i64 %964 to i64*
  %966 = load i64, i64* %965
  %967 = add i64 %945, 40
  %968 = inttoptr i64 %967 to i64*
  %969 = load i64, i64* %968
  %970 = add i64 %945, 48
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %945, 56
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = add i64 %945, 64
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %945, 72
  %980 = inttoptr i64 %979 to i64*
  %981 = load i64, i64* %980
  %982 = inttoptr i64 %946 to i64*
  %983 = load i64, i64* %982
  store i64 %983, i64* %3, align 8, !alias.scope !1544, !noalias !1547
  store i64 %945, i64* %17, align 8, !alias.scope !1544, !noalias !1547
  %984 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 848), i64 %948, i64 %949, i64 %950, i64 %951, i64 %952, i64 %954, i64 %957, i64 %960, i64 %963, i64 %966, i64 %969, i64 %972, i64 %975, i64 %978, i64 %981), !noalias !1544
  %985 = load i64, i64* %3, align 8
  %986 = load i64, i64* %18, align 8
  %987 = add i64 %986, -288
  %988 = trunc i64 %984 to i32
  %989 = inttoptr i64 %987 to i32*
  store i32 %988, i32* %989
  %990 = add i64 %985, 23
  %991 = load i64, i64* %17, align 8, !tbaa !1240
  %992 = add i64 %991, -8
  %993 = inttoptr i64 %992 to i64*
  store i64 %990, i64* %993
  %994 = load i64, i64* %155, align 8, !alias.scope !1549, !noalias !1552
  %995 = load i64, i64* %154, align 8, !alias.scope !1549, !noalias !1552
  %996 = load i64, i64* %153, align 8, !alias.scope !1549, !noalias !1552
  %997 = load i64, i64* %156, align 8, !alias.scope !1549, !noalias !1552
  %998 = load i64, i64* %157, align 8, !alias.scope !1549, !noalias !1552
  %999 = inttoptr i64 %991 to i64*
  %1000 = load i64, i64* %999
  %1001 = add i64 %991, 8
  %1002 = inttoptr i64 %1001 to i64*
  %1003 = load i64, i64* %1002
  %1004 = add i64 %991, 16
  %1005 = inttoptr i64 %1004 to i64*
  %1006 = load i64, i64* %1005
  %1007 = add i64 %991, 24
  %1008 = inttoptr i64 %1007 to i64*
  %1009 = load i64, i64* %1008
  %1010 = add i64 %991, 32
  %1011 = inttoptr i64 %1010 to i64*
  %1012 = load i64, i64* %1011
  %1013 = add i64 %991, 40
  %1014 = inttoptr i64 %1013 to i64*
  %1015 = load i64, i64* %1014
  %1016 = add i64 %991, 48
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = add i64 %991, 56
  %1020 = inttoptr i64 %1019 to i64*
  %1021 = load i64, i64* %1020
  %1022 = add i64 %991, 64
  %1023 = inttoptr i64 %1022 to i64*
  %1024 = load i64, i64* %1023
  %1025 = add i64 %991, 72
  %1026 = inttoptr i64 %1025 to i64*
  %1027 = load i64, i64* %1026
  %1028 = inttoptr i64 %992 to i64*
  %1029 = load i64, i64* %1028
  store i64 %1029, i64* %3, align 8, !alias.scope !1549, !noalias !1552
  store i64 %991, i64* %17, align 8, !alias.scope !1549, !noalias !1552
  %1030 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 869), i64 %994, i64 %995, i64 %996, i64 %997, i64 %998, i64 %1000, i64 %1003, i64 %1006, i64 %1009, i64 %1012, i64 %1015, i64 %1018, i64 %1021, i64 %1024, i64 %1027), !noalias !1549
  %1031 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 735), i64* %16, align 8, !tbaa !1240
  %1032 = load i64, i64* %18, align 8
  %1033 = add i64 %1032, -292
  %1034 = trunc i64 %1030 to i32
  %1035 = inttoptr i64 %1033 to i32*
  store i32 %1034, i32* %1035
  %1036 = add i64 %1031, 23
  %1037 = load i64, i64* %17, align 8, !tbaa !1240
  %1038 = add i64 %1037, -8
  %1039 = inttoptr i64 %1038 to i64*
  store i64 %1036, i64* %1039
  %1040 = load i64, i64* %155, align 8, !alias.scope !1554, !noalias !1557
  %1041 = load i64, i64* %154, align 8, !alias.scope !1554, !noalias !1557
  %1042 = load i64, i64* %153, align 8, !alias.scope !1554, !noalias !1557
  %1043 = load i64, i64* %156, align 8, !alias.scope !1554, !noalias !1557
  %1044 = load i64, i64* %157, align 8, !alias.scope !1554, !noalias !1557
  %1045 = inttoptr i64 %1037 to i64*
  %1046 = load i64, i64* %1045
  %1047 = add i64 %1037, 8
  %1048 = inttoptr i64 %1047 to i64*
  %1049 = load i64, i64* %1048
  %1050 = add i64 %1037, 16
  %1051 = inttoptr i64 %1050 to i64*
  %1052 = load i64, i64* %1051
  %1053 = add i64 %1037, 24
  %1054 = inttoptr i64 %1053 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1037, 32
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  %1059 = add i64 %1037, 40
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  %1062 = add i64 %1037, 48
  %1063 = inttoptr i64 %1062 to i64*
  %1064 = load i64, i64* %1063
  %1065 = add i64 %1037, 56
  %1066 = inttoptr i64 %1065 to i64*
  %1067 = load i64, i64* %1066
  %1068 = add i64 %1037, 64
  %1069 = inttoptr i64 %1068 to i64*
  %1070 = load i64, i64* %1069
  %1071 = add i64 %1037, 72
  %1072 = inttoptr i64 %1071 to i64*
  %1073 = load i64, i64* %1072
  store i64 %1037, i64* %17, align 8, !alias.scope !1554, !noalias !1557
  %1074 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 735), i64 %1040, i64 %1041, i64 %1042, i64 %1043, i64 %1044, i64 %1046, i64 %1049, i64 %1052, i64 %1055, i64 %1058, i64 %1061, i64 %1064, i64 %1067, i64 %1070, i64 %1073), !noalias !1554
  store i64 %1074, i64* %152, align 8, !alias.scope !1554, !noalias !1557
  %1075 = load i64, i64* %18, align 8
  %1076 = add i64 %1075, -296
  %1077 = trunc i64 %1074 to i32
  %1078 = inttoptr i64 %1076 to i32*
  store i32 %1077, i32* %1078
  %1079 = load i64, i64* %17, align 8
  %1080 = add i64 %1079, 264
  %1081 = icmp ugt i64 %1079, -265
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %47, align 1, !tbaa !1248
  %1083 = trunc i64 %1080 to i32
  %1084 = and i32 %1083, 255
  %1085 = tail call i32 @llvm.ctpop.i32(i32 %1084) #11
  %1086 = trunc i32 %1085 to i8
  %1087 = and i8 %1086, 1
  %1088 = xor i8 %1087, 1
  store i8 %1088, i8* %48, align 1, !tbaa !1261
  %1089 = xor i64 %1080, %1079
  %1090 = lshr i64 %1089, 4
  %1091 = trunc i64 %1090 to i8
  %1092 = and i8 %1091, 1
  store i8 %1092, i8* %49, align 1, !tbaa !1262
  %1093 = icmp eq i64 %1080, 0
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %50, align 1, !tbaa !1263
  %1095 = lshr i64 %1080, 63
  %1096 = trunc i64 %1095 to i8
  store i8 %1096, i8* %51, align 1, !tbaa !1264
  %1097 = lshr i64 %1079, 63
  %1098 = xor i64 %1095, %1097
  %1099 = add nuw nsw i64 %1098, %1095
  %1100 = icmp eq i64 %1099, 2
  %1101 = zext i1 %1100 to i8
  store i8 %1101, i8* %52, align 1, !tbaa !1265
  %1102 = add i64 %1079, 272
  %1103 = inttoptr i64 %1080 to i64*
  %1104 = load i64, i64* %1103
  store i64 %1104, i64* %14, align 8, !tbaa !1240
  %1105 = add i64 %1079, 280
  %1106 = inttoptr i64 %1102 to i64*
  %1107 = load i64, i64* %1106
  store i64 %1107, i64* %21, align 8, !tbaa !1240
  %1108 = add i64 %1079, 288
  %1109 = inttoptr i64 %1105 to i64*
  %1110 = load i64, i64* %1109
  store i64 %1110, i64* %22, align 8, !tbaa !1240
  %1111 = add i64 %1079, 296
  %1112 = inttoptr i64 %1108 to i64*
  %1113 = load i64, i64* %1112
  store i64 %1113, i64* %23, align 8, !tbaa !1240
  %1114 = add i64 %1079, 304
  %1115 = inttoptr i64 %1111 to i64*
  %1116 = load i64, i64* %1115
  store i64 %1116, i64* %24, align 8, !tbaa !1240
  %1117 = add i64 %1079, 312
  %1118 = inttoptr i64 %1114 to i64*
  %1119 = load i64, i64* %1118
  store i64 %1119, i64* %18, align 8, !tbaa !1240
  %1120 = inttoptr i64 %1117 to i64*
  %1121 = load i64, i64* %1120
  store i64 %1121, i64* %3, align 8, !tbaa !1240
  %1122 = add i64 %1079, 320
  store i64 %1122, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %374

block_405791:                                     ; preds = %block_4056fe
  %1123 = inttoptr i64 %1483 to i32*
  %1124 = load i32, i32* %1123
  %1125 = icmp eq i32 %1124, 0
  %1126 = select i1 %1125, i64 38, i64 10
  %1127 = add i64 %1494, %1126
  br i1 %1125, label %block_4057b7, label %block_40579b

block_40579b:                                     ; preds = %block_405791
  %1128 = add i64 %1127, 17
  %1129 = load i64, i64* %17, align 8, !tbaa !1240
  %1130 = add i64 %1129, -8
  %1131 = inttoptr i64 %1130 to i64*
  store i64 %1128, i64* %1131
  %1132 = load i64, i64* %155, align 8, !alias.scope !1559, !noalias !1562
  %1133 = load i64, i64* %154, align 8, !alias.scope !1559, !noalias !1562
  %1134 = load i64, i64* %153, align 8, !alias.scope !1559, !noalias !1562
  %1135 = load i64, i64* %156, align 8, !alias.scope !1559, !noalias !1562
  %1136 = load i64, i64* %157, align 8, !alias.scope !1559, !noalias !1562
  %1137 = inttoptr i64 %1129 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1129, 8
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1129, 16
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = add i64 %1129, 24
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = add i64 %1129, 32
  %1149 = inttoptr i64 %1148 to i64*
  %1150 = load i64, i64* %1149
  %1151 = add i64 %1129, 40
  %1152 = inttoptr i64 %1151 to i64*
  %1153 = load i64, i64* %1152
  %1154 = add i64 %1129, 48
  %1155 = inttoptr i64 %1154 to i64*
  %1156 = load i64, i64* %1155
  %1157 = add i64 %1129, 56
  %1158 = inttoptr i64 %1157 to i64*
  %1159 = load i64, i64* %1158
  %1160 = add i64 %1129, 64
  %1161 = inttoptr i64 %1160 to i64*
  %1162 = load i64, i64* %1161
  %1163 = add i64 %1129, 72
  %1164 = inttoptr i64 %1163 to i64*
  %1165 = load i64, i64* %1164
  %1166 = inttoptr i64 %1130 to i64*
  %1167 = load i64, i64* %1166
  store i64 %1167, i64* %3, align 8, !alias.scope !1559, !noalias !1562
  store i64 %1129, i64* %17, align 8, !alias.scope !1559, !noalias !1562
  %1168 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 435), i64 %1132, i64 %1133, i64 %1134, i64 %1135, i64 %1136, i64 %1138, i64 %1141, i64 %1144, i64 %1147, i64 %1150, i64 %1153, i64 %1156, i64 %1159, i64 %1162, i64 %1165), !noalias !1559
  %1169 = load i64, i64* %18, align 8
  %1170 = add i64 %1169, -232
  %1171 = trunc i64 %1168 to i32
  %1172 = load i64, i64* %3, align 8
  %1173 = inttoptr i64 %1170 to i32*
  store i32 %1171, i32* %1173
  %1174 = add i64 %1172, 34
  br label %block_4057d3

block_4056be:                                     ; preds = %block_4056b1, %block_40569f
  %1175 = phi i64 [ %266, %block_40569f ], [ %1238, %block_4056b1 ]
  %1176 = phi %struct.Memory* [ %2, %block_40569f ], [ %2, %block_4056b1 ]
  %1177 = inttoptr i64 %259 to i64*
  %1178 = load i64, i64* %1177
  %1179 = add i64 %1175, 21
  %1180 = load i64, i64* %17, align 8, !tbaa !1240
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1179, i64* %1182
  %1183 = load i64, i64* %154, align 8, !alias.scope !1564, !noalias !1567
  %1184 = load i64, i64* %153, align 8, !alias.scope !1564, !noalias !1567
  %1185 = load i64, i64* %156, align 8, !alias.scope !1564, !noalias !1567
  %1186 = load i64, i64* %157, align 8, !alias.scope !1564, !noalias !1567
  %1187 = inttoptr i64 %1180 to i64*
  %1188 = load i64, i64* %1187
  %1189 = add i64 %1180, 8
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1180, 16
  %1193 = inttoptr i64 %1192 to i64*
  %1194 = load i64, i64* %1193
  %1195 = add i64 %1180, 24
  %1196 = inttoptr i64 %1195 to i64*
  %1197 = load i64, i64* %1196
  %1198 = add i64 %1180, 32
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = add i64 %1180, 40
  %1202 = inttoptr i64 %1201 to i64*
  %1203 = load i64, i64* %1202
  %1204 = add i64 %1180, 48
  %1205 = inttoptr i64 %1204 to i64*
  %1206 = load i64, i64* %1205
  %1207 = add i64 %1180, 56
  %1208 = inttoptr i64 %1207 to i64*
  %1209 = load i64, i64* %1208
  %1210 = add i64 %1180, 64
  %1211 = inttoptr i64 %1210 to i64*
  %1212 = load i64, i64* %1211
  %1213 = add i64 %1180, 72
  %1214 = inttoptr i64 %1213 to i64*
  %1215 = load i64, i64* %1214
  %1216 = inttoptr i64 %1181 to i64*
  %1217 = load i64, i64* %1216
  store i64 %1217, i64* %3, align 8, !alias.scope !1564, !noalias !1567
  store i64 %1180, i64* %17, align 8, !alias.scope !1564, !noalias !1567
  %1218 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 168), i64 %1178, i64 %1183, i64 %1184, i64 %1185, i64 %1186, i64 %1188, i64 %1191, i64 %1194, i64 %1197, i64 %1200, i64 %1203, i64 %1206, i64 %1209, i64 %1212, i64 %1215), !noalias !1564
  %1219 = load i64, i64* %18, align 8
  %1220 = add i64 %1219, -204
  %1221 = trunc i64 %1218 to i32
  %1222 = load i64, i64* %3, align 8
  %1223 = inttoptr i64 %1220 to i32*
  store i32 %1221, i32* %1223
  %1224 = add i64 %1222, 43
  br label %block_4056fe

block_4056b1:                                     ; preds = %block_40569f
  %1225 = sext i32 %263 to i64
  %1226 = inttoptr i64 %259 to i64*
  %1227 = load i64, i64* %1226
  %1228 = sext i32 %263 to i128
  %1229 = and i128 %1228, -18446744073709551616
  %1230 = sext i64 %1227 to i128
  %1231 = and i128 %1230, -18446744073709551616
  %1232 = zext i64 %1225 to i128
  %1233 = or i128 %1229, %1232
  %1234 = zext i64 %1227 to i128
  %1235 = or i128 %1231, %1234
  %1236 = mul nsw i128 %1235, %1233
  %1237 = trunc i128 %1236 to i64
  %1238 = add i64 %266, 13
  %1239 = inttoptr i64 %259 to i64*
  store i64 %1237, i64* %1239
  br label %block_4056be

block_405775:                                     ; preds = %block_4056fe
  %1240 = add i64 %1494, 17
  %1241 = load i64, i64* %17, align 8, !tbaa !1240
  %1242 = add i64 %1241, -8
  %1243 = inttoptr i64 %1242 to i64*
  store i64 %1240, i64* %1243
  %1244 = load i64, i64* %155, align 8, !alias.scope !1569, !noalias !1572
  %1245 = load i64, i64* %154, align 8, !alias.scope !1569, !noalias !1572
  %1246 = load i64, i64* %153, align 8, !alias.scope !1569, !noalias !1572
  %1247 = load i64, i64* %156, align 8, !alias.scope !1569, !noalias !1572
  %1248 = load i64, i64* %157, align 8, !alias.scope !1569, !noalias !1572
  %1249 = inttoptr i64 %1241 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1241, 8
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1241, 16
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1241, 24
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1241, 32
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1241, 40
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1241, 48
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1241, 56
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1241, 64
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1241, 72
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = inttoptr i64 %1242 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %3, align 8, !alias.scope !1569, !noalias !1572
  store i64 %1241, i64* %17, align 8, !alias.scope !1569, !noalias !1572
  %1280 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 390), i64 %1244, i64 %1245, i64 %1246, i64 %1247, i64 %1248, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277), !noalias !1569
  %1281 = load i64, i64* %18, align 8
  %1282 = add i64 %1281, -228
  %1283 = trunc i64 %1280 to i32
  %1284 = load i64, i64* %3, align 8
  %1285 = add i64 %1284, 6
  %1286 = inttoptr i64 %1282 to i32*
  store i32 %1283, i32* %1286
  br label %block_4057d3

block_4056fe:                                     ; preds = %block_4056be, %block_4056de
  %1287 = phi i64 [ %365, %block_4056de ], [ %1219, %block_4056be ]
  %1288 = phi i64 [ %369, %block_4056de ], [ %1224, %block_4056be ]
  %1289 = phi %struct.Memory* [ %2, %block_4056de ], [ %1176, %block_4056be ]
  %1290 = add i64 %1287, -68
  %1291 = inttoptr i64 %1290 to i32*
  %1292 = load i32, i32* %1291
  %1293 = zext i32 %1292 to i64
  store i64 %1293, i64* %15, align 8, !tbaa !1240
  %1294 = add i64 %1288, 20
  %1295 = load i64, i64* %17, align 8, !tbaa !1240
  %1296 = add i64 %1295, -8
  %1297 = inttoptr i64 %1296 to i64*
  store i64 %1294, i64* %1297
  %1298 = load i64, i64* %154, align 8, !alias.scope !1574, !noalias !1577
  %1299 = load i64, i64* %153, align 8, !alias.scope !1574, !noalias !1577
  %1300 = load i64, i64* %156, align 8, !alias.scope !1574, !noalias !1577
  %1301 = load i64, i64* %157, align 8, !alias.scope !1574, !noalias !1577
  %1302 = inttoptr i64 %1295 to i64*
  %1303 = load i64, i64* %1302
  %1304 = add i64 %1295, 8
  %1305 = inttoptr i64 %1304 to i64*
  %1306 = load i64, i64* %1305
  %1307 = add i64 %1295, 16
  %1308 = inttoptr i64 %1307 to i64*
  %1309 = load i64, i64* %1308
  %1310 = add i64 %1295, 24
  %1311 = inttoptr i64 %1310 to i64*
  %1312 = load i64, i64* %1311
  %1313 = add i64 %1295, 32
  %1314 = inttoptr i64 %1313 to i64*
  %1315 = load i64, i64* %1314
  %1316 = add i64 %1295, 40
  %1317 = inttoptr i64 %1316 to i64*
  %1318 = load i64, i64* %1317
  %1319 = add i64 %1295, 48
  %1320 = inttoptr i64 %1319 to i64*
  %1321 = load i64, i64* %1320
  %1322 = add i64 %1295, 56
  %1323 = inttoptr i64 %1322 to i64*
  %1324 = load i64, i64* %1323
  %1325 = add i64 %1295, 64
  %1326 = inttoptr i64 %1325 to i64*
  %1327 = load i64, i64* %1326
  %1328 = add i64 %1295, 72
  %1329 = inttoptr i64 %1328 to i64*
  %1330 = load i64, i64* %1329
  %1331 = inttoptr i64 %1296 to i64*
  %1332 = load i64, i64* %1331
  store i64 %1332, i64* %3, align 8, !alias.scope !1574, !noalias !1577
  store i64 %1295, i64* %17, align 8, !alias.scope !1574, !noalias !1577
  %1333 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 250), i64 %1293, i64 %1298, i64 %1299, i64 %1300, i64 %1301, i64 %1303, i64 %1306, i64 %1309, i64 %1312, i64 %1315, i64 %1318, i64 %1321, i64 %1324, i64 %1327, i64 %1330), !noalias !1574
  %1334 = load i64, i64* %3, align 8
  %1335 = load i64, i64* %18, align 8
  %1336 = add i64 %1335, -80
  %1337 = inttoptr i64 %1336 to double*
  %1338 = load double, double* %1337
  store double %1338, double* %111, align 1, !tbaa !1246
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1340 = bitcast i64* %1339 to double*
  store double 0.000000e+00, double* %1340, align 1, !tbaa !1246
  %1341 = add i64 %1335, -212
  %1342 = trunc i64 %1333 to i32
  %1343 = inttoptr i64 %1341 to i32*
  store i32 %1342, i32* %1343
  %1344 = add i64 %1334, 28
  %1345 = load i64, i64* %17, align 8, !tbaa !1240
  %1346 = add i64 %1345, -8
  %1347 = inttoptr i64 %1346 to i64*
  store i64 %1344, i64* %1347
  %1348 = load i64, i64* %155, align 8, !alias.scope !1579, !noalias !1582
  %1349 = load i64, i64* %154, align 8, !alias.scope !1579, !noalias !1582
  %1350 = load i64, i64* %153, align 8, !alias.scope !1579, !noalias !1582
  %1351 = load i64, i64* %156, align 8, !alias.scope !1579, !noalias !1582
  %1352 = load i64, i64* %157, align 8, !alias.scope !1579, !noalias !1582
  %1353 = inttoptr i64 %1345 to i64*
  %1354 = load i64, i64* %1353
  %1355 = add i64 %1345, 8
  %1356 = inttoptr i64 %1355 to i64*
  %1357 = load i64, i64* %1356
  %1358 = add i64 %1345, 16
  %1359 = inttoptr i64 %1358 to i64*
  %1360 = load i64, i64* %1359
  %1361 = add i64 %1345, 24
  %1362 = inttoptr i64 %1361 to i64*
  %1363 = load i64, i64* %1362
  %1364 = add i64 %1345, 32
  %1365 = inttoptr i64 %1364 to i64*
  %1366 = load i64, i64* %1365
  %1367 = add i64 %1345, 40
  %1368 = inttoptr i64 %1367 to i64*
  %1369 = load i64, i64* %1368
  %1370 = add i64 %1345, 48
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1345, 56
  %1374 = inttoptr i64 %1373 to i64*
  %1375 = load i64, i64* %1374
  %1376 = add i64 %1345, 64
  %1377 = inttoptr i64 %1376 to i64*
  %1378 = load i64, i64* %1377
  %1379 = add i64 %1345, 72
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = inttoptr i64 %1346 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %3, align 8, !alias.scope !1579, !noalias !1582
  store i64 %1345, i64* %17, align 8, !alias.scope !1579, !noalias !1582
  %1384 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 287), i64 %1348, i64 %1349, i64 %1350, i64 %1351, i64 %1352, i64 %1354, i64 %1357, i64 %1360, i64 %1363, i64 %1366, i64 %1369, i64 %1372, i64 %1375, i64 %1378, i64 %1381), !noalias !1579
  %1385 = load i64, i64* %3, align 8
  %1386 = load i64, i64* %18, align 8
  %1387 = add i64 %1386, -88
  %1388 = inttoptr i64 %1387 to double*
  %1389 = load double, double* %1388
  store double %1389, double* %111, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1340, align 1, !tbaa !1246
  %1390 = add i64 %1386, -216
  %1391 = trunc i64 %1384 to i32
  %1392 = inttoptr i64 %1390 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %1385, 28
  %1394 = load i64, i64* %17, align 8, !tbaa !1240
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1393, i64* %1396
  %1397 = load i64, i64* %155, align 8, !alias.scope !1584, !noalias !1587
  %1398 = load i64, i64* %154, align 8, !alias.scope !1584, !noalias !1587
  %1399 = load i64, i64* %153, align 8, !alias.scope !1584, !noalias !1587
  %1400 = load i64, i64* %156, align 8, !alias.scope !1584, !noalias !1587
  %1401 = load i64, i64* %157, align 8, !alias.scope !1584, !noalias !1587
  %1402 = inttoptr i64 %1394 to i64*
  %1403 = load i64, i64* %1402
  %1404 = add i64 %1394, 8
  %1405 = inttoptr i64 %1404 to i64*
  %1406 = load i64, i64* %1405
  %1407 = add i64 %1394, 16
  %1408 = inttoptr i64 %1407 to i64*
  %1409 = load i64, i64* %1408
  %1410 = add i64 %1394, 24
  %1411 = inttoptr i64 %1410 to i64*
  %1412 = load i64, i64* %1411
  %1413 = add i64 %1394, 32
  %1414 = inttoptr i64 %1413 to i64*
  %1415 = load i64, i64* %1414
  %1416 = add i64 %1394, 40
  %1417 = inttoptr i64 %1416 to i64*
  %1418 = load i64, i64* %1417
  %1419 = add i64 %1394, 48
  %1420 = inttoptr i64 %1419 to i64*
  %1421 = load i64, i64* %1420
  %1422 = add i64 %1394, 56
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  %1425 = add i64 %1394, 64
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1394, 72
  %1429 = inttoptr i64 %1428 to i64*
  %1430 = load i64, i64* %1429
  %1431 = inttoptr i64 %1395 to i64*
  %1432 = load i64, i64* %1431
  store i64 %1432, i64* %3, align 8, !alias.scope !1584, !noalias !1587
  store i64 %1394, i64* %17, align 8, !alias.scope !1584, !noalias !1587
  %1433 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 326), i64 %1397, i64 %1398, i64 %1399, i64 %1400, i64 %1401, i64 %1403, i64 %1406, i64 %1409, i64 %1412, i64 %1415, i64 %1418, i64 %1421, i64 %1424, i64 %1427, i64 %1430), !noalias !1584
  %1434 = load i64, i64* %3, align 8
  %1435 = load i64, i64* %18, align 8
  %1436 = add i64 %1435, 16
  %1437 = inttoptr i64 %1436 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %15, align 8, !tbaa !1240
  %1439 = add i64 %1435, -220
  %1440 = trunc i64 %1433 to i32
  %1441 = inttoptr i64 %1439 to i32*
  store i32 %1440, i32* %1441
  %1442 = add i64 %1434, 27
  %1443 = load i64, i64* %17, align 8, !tbaa !1240
  %1444 = add i64 %1443, -8
  %1445 = inttoptr i64 %1444 to i64*
  store i64 %1442, i64* %1445
  %1446 = load i64, i64* %154, align 8, !alias.scope !1589, !noalias !1592
  %1447 = load i64, i64* %153, align 8, !alias.scope !1589, !noalias !1592
  %1448 = load i64, i64* %156, align 8, !alias.scope !1589, !noalias !1592
  %1449 = load i64, i64* %157, align 8, !alias.scope !1589, !noalias !1592
  %1450 = inttoptr i64 %1443 to i64*
  %1451 = load i64, i64* %1450
  %1452 = add i64 %1443, 8
  %1453 = inttoptr i64 %1452 to i64*
  %1454 = load i64, i64* %1453
  %1455 = add i64 %1443, 16
  %1456 = inttoptr i64 %1455 to i64*
  %1457 = load i64, i64* %1456
  %1458 = add i64 %1443, 24
  %1459 = inttoptr i64 %1458 to i64*
  %1460 = load i64, i64* %1459
  %1461 = add i64 %1443, 32
  %1462 = inttoptr i64 %1461 to i64*
  %1463 = load i64, i64* %1462
  %1464 = add i64 %1443, 40
  %1465 = inttoptr i64 %1464 to i64*
  %1466 = load i64, i64* %1465
  %1467 = add i64 %1443, 48
  %1468 = inttoptr i64 %1467 to i64*
  %1469 = load i64, i64* %1468
  %1470 = add i64 %1443, 56
  %1471 = inttoptr i64 %1470 to i64*
  %1472 = load i64, i64* %1471
  %1473 = add i64 %1443, 64
  %1474 = inttoptr i64 %1473 to i64*
  %1475 = load i64, i64* %1474
  %1476 = add i64 %1443, 72
  %1477 = inttoptr i64 %1476 to i64*
  %1478 = load i64, i64* %1477
  %1479 = inttoptr i64 %1444 to i64*
  %1480 = load i64, i64* %1479
  store i64 %1480, i64* %3, align 8, !alias.scope !1589, !noalias !1592
  store i64 %1443, i64* %17, align 8, !alias.scope !1589, !noalias !1592
  %1481 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 365), i64 %1438, i64 %1446, i64 %1447, i64 %1448, i64 %1449, i64 %1451, i64 %1454, i64 %1457, i64 %1460, i64 %1463, i64 %1466, i64 %1469, i64 %1472, i64 %1475, i64 %1478), !noalias !1589
  %1482 = load i64, i64* %18, align 8
  %1483 = add i64 %1482, 24
  %1484 = load i64, i64* %3, align 8
  %1485 = inttoptr i64 %1483 to i32*
  %1486 = load i32, i32* %1485
  %1487 = lshr i32 %1486, 31
  %1488 = trunc i32 %1487 to i8
  %1489 = add i64 %1482, -224
  %1490 = trunc i64 %1481 to i32
  %1491 = inttoptr i64 %1489 to i32*
  store i32 %1490, i32* %1491
  %1492 = icmp ne i8 %1488, 0
  %1493 = select i1 %1492, i64 16, i64 44
  %1494 = add i64 %1484, %1493
  br i1 %1492, label %block_405775, label %block_405791
}

; Function Attrs: noinline
define %struct.Memory* @sub_405a40_convect(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_405a40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %11, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %20, -6552
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = bitcast [32 x %union.VectorReg]* %15 to i8*
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 896) to double*)
  %32 = bitcast [32 x %union.VectorReg]* %15 to double*
  store double %31, double* %32, align 1, !tbaa !1246
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %35 = add i64 %20, -12
  %36 = load i32, i32* %5, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %20, -6448
  %39 = inttoptr i64 %38 to double*
  store double %31, double* %39
  %40 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, i64 54, i64 44
  %43 = add i64 %42, %1
  br i1 %41, label %block_405a76, label %block_405a6c

block_4074ff:                                     ; preds = %block_4074d6
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %44 = load i64, i64* %12, align 8
  %45 = add i64 %44, -1024
  store i64 %45, i64* %10, align 8, !tbaa !1240
  %46 = add i64 %44, -6420
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47
  %49 = zext i32 %48 to i64
  store i64 %49, i64* %9, align 8, !tbaa !1240
  %50 = add i64 %1571, 100881
  %51 = add i64 %1571, 21
  %52 = load i64, i64* %11, align 8, !tbaa !1240
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %51, i64* %54
  store i64 %53, i64* %11, align 8, !tbaa !1240
  %55 = tail call %struct.Memory* @sub_41ff10_facev(%struct.State* nonnull %0, i64 %50, %struct.Memory* %1647)
  %56 = load i64, i64* %3, align 8
  br label %block_407514

block_4077df:                                     ; preds = %block_4077bc, %block_4077d0
  %57 = phi i64 [ %69, %block_4077d0 ], [ %94, %block_4077bc ]
  %58 = phi %struct.Memory* [ %68, %block_4077d0 ], [ %92, %block_4077bc ]
  %59 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, i64 24, i64 14
  %62 = add i64 %57, %61
  br i1 %60, label %block_4077f7, label %block_4077ed

block_4077d0:                                     ; preds = %block_4077b2
  %63 = add i64 %1644, 91184
  %64 = add i64 %1644, 15
  %65 = load i64, i64* %11, align 8, !tbaa !1240
  %66 = add i64 %65, -8
  %67 = inttoptr i64 %66 to i64*
  store i64 %64, i64* %67
  store i64 %66, i64* %11, align 8, !tbaa !1240
  %68 = tail call %struct.Memory* @sub_41dc00_transfb_c(%struct.State* nonnull %0, i64 %63, %struct.Memory* %1638)
  %69 = load i64, i64* %3, align 8
  br label %block_4077df

block_4063c0:                                     ; preds = %block_4063b6, %block_406900
  %70 = phi i64 [ %2942, %block_4063b6 ], [ %1393, %block_406900 ]
  %71 = phi i64 [ %3020, %block_4063b6 ], [ %2215, %block_406900 ]
  %72 = phi %struct.Memory* [ %3021, %block_4063b6 ], [ %2216, %block_406900 ]
  %73 = add i64 %71, -6416
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74
  %76 = add i32 %75, -5
  %77 = lshr i32 %76, 31
  %78 = trunc i32 %77 to i8
  %79 = lshr i32 %75, 31
  %80 = xor i32 %77, %79
  %81 = add nuw nsw i32 %80, %79
  %82 = icmp eq i32 %81, 2
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %82
  %85 = select i1 %84, i64 13, i64 1369
  %86 = add i64 %70, %85
  br i1 %84, label %block_4063cd, label %block_406919

block_4077bc:                                     ; preds = %block_4077b2
  %87 = add i64 %1644, 93044
  %88 = add i64 %1644, 15
  %89 = load i64, i64* %11, align 8, !tbaa !1240
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91
  store i64 %90, i64* %11, align 8, !tbaa !1240
  %92 = tail call %struct.Memory* @sub_41e330_transfb_c_2(%struct.State* nonnull %0, i64 %87, %struct.Memory* %1638)
  %93 = load i64, i64* %3, align 8
  %94 = add i64 %93, 20
  br label %block_4077df

block_4071b3:                                     ; preds = %block_407128
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %95 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %96 = inttoptr i64 %3087 to double*
  %97 = load double, double* %96
  %98 = fmul double %95, %97
  store double %98, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %99 = add i64 %3074, -6424
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %102, 1000
  %104 = add i64 %103, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %105 = load i64, i64* %12, align 8
  %106 = add i64 %105, -6404
  %107 = inttoptr i64 %106 to i32*
  %108 = load i32, i32* %107
  %109 = sext i32 %108 to i64
  %110 = mul nsw i64 %109, 200
  %111 = add i64 %110, %104
  %112 = add i64 %105, -6416
  %113 = inttoptr i64 %112 to i32*
  %114 = load i32, i32* %113
  %115 = sext i32 %114 to i64
  %116 = mul nsw i64 %115, 40
  %117 = add i64 %116, %111
  %118 = load i64, i64* %12, align 8
  %119 = add i64 %118, -6412
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 3
  %124 = add i64 %123, %117
  %125 = load double, double* %2419, align 1
  %126 = inttoptr i64 %124 to double*
  %127 = load double, double* %126
  %128 = fmul double %125, %127
  store double %128, double* %2419, align 1, !tbaa !1246
  %129 = add i64 %118, -1056
  %130 = inttoptr i64 %129 to double*
  store double %128, double* %130
  %131 = add i64 %118, -6264
  %132 = load double, double* %32, align 1
  %133 = inttoptr i64 %131 to double*
  store double %132, double* %133
  %134 = add i64 %118, -6432
  %135 = add i64 %1962, 115
  %136 = inttoptr i64 %134 to i32*
  store i32 0, i32* %136
  %137 = add i64 %118, -6112
  %138 = add i64 %118, -6404
  %139 = add i64 %118, -6416
  br label %block_407226

block_406ba1:                                     ; preds = %block_406b94
  %140 = inttoptr i64 %2644 to double*
  %141 = load double, double* %140
  %142 = sext i32 %196 to i64
  %143 = mul nsw i64 %142, 40
  %144 = add i64 %143, ptrtoint (%dxm1_type* @dxm1 to i64)
  %145 = inttoptr i64 %2651 to i32*
  %146 = load i32, i32* %145
  %147 = sext i32 %146 to i64
  %148 = shl nsw i64 %147, 3
  %149 = add i64 %148, %144
  %150 = inttoptr i64 %149 to double*
  %151 = load double, double* %150
  %152 = inttoptr i64 %2652 to i32*
  %153 = load i32, i32* %152
  %154 = sext i32 %153 to i64
  %155 = mul nsw i64 %154, 200
  %156 = add i64 %155, %2650
  %157 = add i64 %143, %156
  %158 = inttoptr i64 %2632 to i32*
  %159 = load i32, i32* %158
  %160 = sext i32 %159 to i64
  %161 = shl nsw i64 %160, 3
  %162 = add i64 %161, %157
  %163 = inttoptr i64 %162 to double*
  %164 = load double, double* %163
  %165 = fmul double %151, %164
  store double %165, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %166 = fadd double %141, %165
  store double %166, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %167 = inttoptr i64 %2644 to double*
  store double %166, double* %167
  %168 = inttoptr i64 %2647 to i32*
  %169 = load i32, i32* %168
  %170 = add i32 %169, 1
  %171 = inttoptr i64 %2647 to i32*
  store i32 %170, i32* %171
  %172 = add i64 %206, -13
  br label %block_406b94

block_40639f:                                     ; preds = %block_405dda
  %173 = add i64 %2281, 10
  %174 = inttoptr i64 %2268 to i32*
  store i32 0, i32* %174
  br label %block_4063a9

block_405dfe:                                     ; preds = %block_405df1
  %175 = add i64 %1372, -6412
  %176 = add i64 %1387, 10
  %177 = inttoptr i64 %175 to i32*
  store i32 0, i32* %177
  br label %block_405e08

block_40779a:                                     ; preds = %block_405be7
  %178 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %179 = icmp eq i32 %178, 0
  %180 = select i1 %179, i64 24, i64 14
  %181 = add i64 %442, %180
  br i1 %179, label %block_4077b2, label %block_4077a8

block_405bdd:                                     ; preds = %block_405b2f
  %182 = add i64 %2480, -6408
  %183 = add i64 %841, 10
  %184 = inttoptr i64 %182 to i32*
  store i32 0, i32* %184
  %185 = bitcast [32 x %union.VectorReg]* %15 to i32*
  %186 = getelementptr inbounds i8, i8* %30, i64 4
  %187 = bitcast i8* %186 to i32*
  %188 = bitcast i64* %33 to i32*
  %189 = getelementptr inbounds i8, i8* %30, i64 12
  %190 = bitcast i8* %189 to i32*
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %192 = bitcast %union.VectorReg* %191 to double*
  br label %block_405be7

block_406b94:                                     ; preds = %block_406b21, %block_406ba1
  %193 = phi i64 [ %2648, %block_406b21 ], [ %172, %block_406ba1 ]
  %194 = phi %struct.Memory* [ %2201, %block_406b21 ], [ %194, %block_406ba1 ]
  %195 = inttoptr i64 %2647 to i32*
  %196 = load i32, i32* %195
  %197 = add i32 %196, -5
  %198 = lshr i32 %197, 31
  %199 = lshr i32 %196, 31
  %200 = xor i32 %198, %199
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = icmp ne i32 %198, 0
  %204 = xor i1 %203, %202
  %205 = select i1 %204, i64 13, i64 139
  %206 = add i64 %193, %205
  br i1 %204, label %block_406ba1, label %block_406c1f

block_40658e:                                     ; preds = %block_406503
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %207 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %208 = inttoptr i64 %2584 to double*
  %209 = load double, double* %208
  %210 = fmul double %207, %209
  store double %210, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %211 = add i64 %2581, -6424
  %212 = inttoptr i64 %211 to i32*
  %213 = load i32, i32* %212
  %214 = sext i32 %213 to i64
  %215 = mul nsw i64 %214, 1000
  %216 = add i64 %215, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %217 = load i64, i64* %12, align 8
  %218 = add i64 %217, -6404
  %219 = inttoptr i64 %218 to i32*
  %220 = load i32, i32* %219
  %221 = sext i32 %220 to i64
  %222 = mul nsw i64 %221, 200
  %223 = add i64 %222, %216
  %224 = add i64 %217, -6416
  %225 = inttoptr i64 %224 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  %228 = mul nsw i64 %227, 40
  %229 = add i64 %228, %223
  %230 = load i64, i64* %12, align 8
  %231 = add i64 %230, -6412
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232
  %234 = sext i32 %233 to i64
  %235 = shl nsw i64 %234, 3
  %236 = add i64 %235, %229
  %237 = load double, double* %2419, align 1
  %238 = inttoptr i64 %236 to double*
  %239 = load double, double* %238
  %240 = fmul double %237, %239
  store double %240, double* %2419, align 1, !tbaa !1246
  %241 = add i64 %230, -1048
  %242 = inttoptr i64 %241 to double*
  store double %240, double* %242
  %243 = add i64 %230, -6264
  %244 = load double, double* %32, align 1
  %245 = inttoptr i64 %243 to double*
  store double %244, double* %245
  %246 = add i64 %230, -6432
  %247 = add i64 %1370, 115
  %248 = inttoptr i64 %246 to i32*
  store i32 0, i32* %248
  %249 = add i64 %230, -6112
  %250 = add i64 %230, -6416
  %251 = add i64 %230, -6404
  br label %block_406601

block_405bfa:                                     ; preds = %block_405be7
  %252 = sext i32 %428 to i64
  %253 = shl nsw i64 %252, 2
  %254 = add i64 %253, ptrtoint (%size_e_type* @size_e to i64)
  %255 = inttoptr i64 %254 to i32*
  %256 = load i32, i32* %255
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %7, align 8, !tbaa !1240
  %258 = add i64 %424, -6424
  %259 = inttoptr i64 %258 to i32*
  store i32 %256, i32* %259
  %260 = add i64 %424, -6412
  %261 = add i64 %442, 30
  %262 = inttoptr i64 %260 to i32*
  store i32 0, i32* %262
  %263 = add i64 %424, -6304
  br label %block_405c18

block_406fc4:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit46
  %264 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %265 = load i64, i64* %12, align 8
  %266 = add i64 %265, -6256
  %267 = inttoptr i64 %266 to double*
  %268 = load double, double* %267
  %269 = add i64 %265, -6536
  %270 = inttoptr i64 %269 to double*
  store double %264, double* %270
  %271 = bitcast double %268 to <2 x i32>
  %272 = extractelement <2 x i32> %271, i32 0
  store i32 %272, i32* %185, align 1, !tbaa !1266
  %273 = extractelement <2 x i32> %271, i32 1
  store i32 %273, i32* %187, align 1, !tbaa !1266
  %274 = add i64 %1355, 32
  %275 = load i64, i64* %11, align 8, !tbaa !1240
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %277
  %278 = load double, double* %192, align 8, !alias.scope !1594, !noalias !1597
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  %281 = tail call double @sqrt(double %278) #11
  %282 = add i64 %265, -1040
  %283 = inttoptr i64 %282 to double*
  %284 = load double, double* %283
  %285 = fmul double %281, %284
  %286 = add i64 %280, 13
  %287 = inttoptr i64 %276 to i64*
  store i64 %286, i64* %287
  %288 = inttoptr i64 %276 to i64*
  %289 = load i64, i64* %288
  store i64 %275, i64* %11, align 8, !alias.scope !1599, !noalias !1602
  %290 = tail call double @cos(double %285) #11
  %291 = inttoptr i64 %269 to double*
  %292 = load double, double* %291
  store double %292, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %293 = fadd double %292, %290
  store double %293, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %294 = add i64 %265, -1072
  %295 = inttoptr i64 %294 to double*
  store double %293, double* %295
  %296 = add i64 %289, 36
  br label %block_407015

block_406977:                                     ; preds = %block_40696a
  %297 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %297, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %298 = sext i32 %454 to i64
  %299 = shl nsw i64 %298, 3
  %300 = add i64 %450, -6304
  %301 = add i64 %300, %299
  %302 = inttoptr i64 %301 to double*
  %303 = load double, double* %302
  %304 = add i64 %450, -6168
  %305 = inttoptr i64 %304 to double*
  %306 = load double, double* %305
  %307 = fsub double %303, %306
  store double %307, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %308 = add i64 %479, 37
  %309 = load i64, i64* %11, align 8, !tbaa !1240
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311
  %312 = load i64, i64* %2412, align 8, !alias.scope !1604, !noalias !1607
  %313 = load i64, i64* %9, align 8, !alias.scope !1604, !noalias !1607
  %314 = inttoptr i64 %310 to i64*
  %315 = load i64, i64* %314
  store i64 %315, i64* %3, align 8, !alias.scope !1604, !noalias !1607
  store i64 %309, i64* %11, align 8, !alias.scope !1604, !noalias !1607
  %316 = tail call i64 @pow(i64 %312, i64 %313), !noalias !1604
  %317 = load i64, i64* %3, align 8
  %318 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %318, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %319 = load i64, i64* %12, align 8
  %320 = add i64 %319, -6416
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = sext i32 %322 to i64
  %324 = shl nsw i64 %323, 3
  %325 = add i64 %319, -6352
  %326 = add i64 %325, %324
  %327 = inttoptr i64 %326 to double*
  %328 = load double, double* %327
  %329 = add i64 %319, -6200
  %330 = inttoptr i64 %329 to double*
  %331 = load double, double* %330
  %332 = fsub double %328, %331
  store double %332, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %333 = add i64 %319, -6496
  %334 = load double, double* %32, align 1
  %335 = inttoptr i64 %333 to double*
  store double %334, double* %335
  %336 = bitcast double %332 to <2 x i32>
  %337 = extractelement <2 x i32> %336, i32 0
  store i32 %337, i32* %185, align 1, !tbaa !1266
  %338 = extractelement <2 x i32> %336, i32 1
  store i32 %338, i32* %187, align 1, !tbaa !1266
  store i32 0, i32* %188, align 1, !tbaa !1266
  store i32 0, i32* %190, align 1, !tbaa !1266
  %339 = add i64 %317, 48
  %340 = load i64, i64* %11, align 8, !tbaa !1240
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %339, i64* %342
  %343 = load i64, i64* %2412, align 8, !alias.scope !1609, !noalias !1612
  %344 = load i64, i64* %9, align 8, !alias.scope !1609, !noalias !1612
  %345 = inttoptr i64 %341 to i64*
  %346 = load i64, i64* %345
  store i64 %346, i64* %3, align 8, !alias.scope !1609, !noalias !1612
  store i64 %340, i64* %11, align 8, !alias.scope !1609, !noalias !1612
  %347 = tail call i64 @pow(i64 %343, i64 %344), !noalias !1609
  %348 = load i64, i64* %3, align 8
  %349 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %349, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %350 = load i64, i64* %12, align 8
  %351 = add i64 %350, -6496
  %352 = inttoptr i64 %351 to double*
  %353 = load double, double* %352
  %354 = load double, double* %32, align 1
  %355 = fadd double %353, %354
  store double %355, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %356 = add i64 %350, -6404
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  %360 = shl nsw i64 %359, 3
  %361 = add i64 %350, -6400
  %362 = add i64 %361, %360
  %363 = inttoptr i64 %362 to double*
  %364 = load double, double* %363
  %365 = add i64 %350, -6232
  %366 = inttoptr i64 %365 to double*
  %367 = load double, double* %366
  %368 = fsub double %364, %367
  store double %368, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %369 = add i64 %350, -6504
  %370 = inttoptr i64 %369 to double*
  store double %355, double* %370
  %371 = add i64 %348, 57
  %372 = load i64, i64* %11, align 8, !tbaa !1240
  %373 = add i64 %372, -8
  %374 = inttoptr i64 %373 to i64*
  store i64 %371, i64* %374
  %375 = load i64, i64* %2412, align 8, !alias.scope !1614, !noalias !1617
  %376 = load i64, i64* %9, align 8, !alias.scope !1614, !noalias !1617
  %377 = inttoptr i64 %373 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %3, align 8, !alias.scope !1614, !noalias !1617
  store i64 %372, i64* %11, align 8, !alias.scope !1614, !noalias !1617
  %379 = tail call i64 @pow(i64 %375, i64 %376), !noalias !1614
  store i64 %379, i64* %2411, align 8, !alias.scope !1614, !noalias !1617
  %380 = load i64, i64* %12, align 8
  %381 = add i64 %380, -6504
  %382 = load i64, i64* %3, align 8
  %383 = inttoptr i64 %381 to double*
  %384 = load double, double* %383
  %385 = load double, double* %32, align 1
  %386 = fadd double %384, %385
  %387 = add i64 %380, -6256
  %388 = inttoptr i64 %387 to double*
  store double %386, double* %388
  %389 = inttoptr i64 %387 to double*
  %390 = load double, double* %389
  store double %390, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %391 = add i64 %380, -16
  %392 = inttoptr i64 %391 to double*
  %393 = load double, double* %392
  store double %393, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %394 = add i64 %382, 37
  store i64 %394, i64* %3, align 8
  %395 = fcmp uno double %393, %390
  br i1 %395, label %396, label %407

; <label>:396:                                    ; preds = %block_406977
  %397 = fadd double %393, %390
  %398 = bitcast double %397 to i64
  %399 = and i64 %398, 9221120237041090560
  %400 = icmp eq i64 %399, 9218868437227405312
  %401 = and i64 %398, 2251799813685247
  %402 = icmp ne i64 %401, 0
  %403 = and i1 %400, %402
  br i1 %403, label %404, label %413

; <label>:404:                                    ; preds = %396
  %405 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %394, %struct.Memory* %451) #14
  %406 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:407:                                    ; preds = %block_406977
  %408 = fcmp ogt double %393, %390
  br i1 %408, label %413, label %409

; <label>:409:                                    ; preds = %407
  %410 = fcmp olt double %393, %390
  br i1 %410, label %413, label %411

; <label>:411:                                    ; preds = %409
  %412 = fcmp oeq double %393, %390
  br i1 %412, label %413, label %415

; <label>:413:                                    ; preds = %411, %409, %407, %396
  %414 = phi i8 [ 0, %407 ], [ 1, %409 ], [ 0, %411 ], [ 1, %396 ]
  store i8 %414, i8* %24, align 1, !tbaa !1463
  br label %415

; <label>:415:                                    ; preds = %413, %411
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %415, %404
  %416 = phi i64 [ %406, %404 ], [ %394, %415 ]
  %417 = phi %struct.Memory* [ %405, %404 ], [ %451, %415 ]
  %418 = load i8, i8* %24, align 1, !tbaa !1248
  %419 = icmp ne i8 %418, 0
  %420 = select i1 %419, i64 76, i64 6
  %421 = add i64 %416, %420
  %422 = icmp eq i8 %418, 1
  br i1 %422, label %block_406a76, label %block_406a30

block_405be7:                                     ; preds = %block_407781, %block_405bdd
  %423 = phi i64 [ %183, %block_405bdd ], [ %1684, %block_407781 ]
  %424 = phi i64 [ %2480, %block_405bdd ], [ %1678, %block_407781 ]
  %425 = phi %struct.Memory* [ %828, %block_405bdd ], [ %1573, %block_407781 ]
  %426 = add i64 %424, -6408
  %427 = inttoptr i64 %426 to i32*
  %428 = load i32, i32* %427
  %429 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %430 = sub i32 %428, %429
  %431 = lshr i32 %430, 31
  %432 = trunc i32 %431 to i8
  %433 = lshr i32 %428, 31
  %434 = lshr i32 %429, 31
  %435 = xor i32 %434, %433
  %436 = xor i32 %431, %433
  %437 = add nuw nsw i32 %436, %435
  %438 = icmp eq i32 %437, 2
  %439 = icmp ne i8 %432, 0
  %440 = xor i1 %439, %438
  %441 = select i1 %440, i64 19, i64 7091
  %442 = add i64 %423, %441
  br i1 %440, label %block_405bfa, label %block_40779a

block_4077f7:                                     ; preds = %block_4077ed, %block_4077df
  %443 = phi i64 [ %62, %block_4077df ], [ %1106, %block_4077ed ]
  %444 = phi %struct.Memory* [ %58, %block_4077df ], [ %1105, %block_4077ed ]
  %445 = load i64, i64* %12, align 8
  %446 = add i64 %445, -6412
  %447 = add i64 %443, 10
  %448 = inttoptr i64 %446 to i32*
  store i32 0, i32* %448
  br label %block_407801

block_40696a:                                     ; preds = %block_406960, %block_406d1d
  %449 = phi i64 [ %1108, %block_406960 ], [ %1020, %block_406d1d ]
  %450 = phi i64 [ %1395, %block_406960 ], [ %1007, %block_406d1d ]
  %451 = phi %struct.Memory* [ %1396, %block_406960 ], [ %2246, %block_406d1d ]
  %452 = add i64 %450, -6412
  %453 = inttoptr i64 %452 to i32*
  %454 = load i32, i32* %453
  %455 = add i32 %454, -5
  %456 = icmp ult i32 %454, 5
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %24, align 1, !tbaa !1248
  %458 = and i32 %455, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #11
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %25, align 1, !tbaa !1261
  %463 = xor i32 %455, %454
  %464 = lshr i32 %463, 4
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  store i8 %466, i8* %26, align 1, !tbaa !1262
  %467 = icmp eq i32 %455, 0
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %27, align 1, !tbaa !1263
  %469 = lshr i32 %455, 31
  %470 = trunc i32 %469 to i8
  store i8 %470, i8* %28, align 1, !tbaa !1264
  %471 = lshr i32 %454, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %471
  %474 = icmp eq i32 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %29, align 1, !tbaa !1265
  %476 = icmp ne i8 %470, 0
  %477 = xor i1 %476, %474
  %478 = select i1 %477, i64 13, i64 1322
  %479 = add i64 %449, %478
  br i1 %477, label %block_406977, label %block_406e94

block_40693c:                                     ; preds = %block_406ead, %block_406932
  %480 = phi i64 [ %1556, %block_406932 ], [ %3373, %block_406ead ]
  %481 = phi i64 [ %3020, %block_406932 ], [ %1395, %block_406ead ]
  %482 = phi %struct.Memory* [ %3021, %block_406932 ], [ %1396, %block_406ead ]
  %483 = add i64 %481, -6404
  %484 = inttoptr i64 %483 to i32*
  %485 = load i32, i32* %484
  %486 = add i32 %485, -5
  %487 = lshr i32 %486, 31
  %488 = trunc i32 %487 to i8
  %489 = lshr i32 %485, 31
  %490 = xor i32 %487, %489
  %491 = add nuw nsw i32 %490, %489
  %492 = icmp eq i32 %491, 2
  %493 = icmp ne i8 %488, 0
  %494 = xor i1 %493, %492
  %495 = select i1 %494, i64 13, i64 1418
  %496 = add i64 %480, %495
  br i1 %494, label %block_406949, label %block_406ec6

block_405d51:                                     ; preds = %block_405d44
  %497 = sext i32 %687 to i64
  %498 = shl nsw i64 %497, 3
  %499 = add i64 %498, ptrtoint (%xfrac_type* @xfrac to i64)
  %500 = inttoptr i64 %499 to double*
  %501 = load double, double* %500
  %502 = inttoptr i64 %426 to i32*
  %503 = load i32, i32* %502
  %504 = sext i32 %503 to i64
  %505 = shl nsw i64 %504, 6
  %506 = add i64 %505, ptrtoint (%zc_type* @zc to i64)
  %507 = add i64 %505, add (i64 ptrtoint (%zc_type* @zc to i64), i64 32)
  %508 = inttoptr i64 %507 to double*
  %509 = load double, double* %508
  store i64 %506, i64* %8, align 8, !tbaa !1240
  %510 = inttoptr i64 %506 to double*
  %511 = load double, double* %510
  %512 = fsub double %509, %511
  store double %512, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %513 = fmul double %501, %512
  store i64 %505, i64* %7, align 8, !tbaa !1240
  %514 = fadd double %513, %511
  store double %514, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %515 = add i64 %793, %498
  %516 = inttoptr i64 %515 to double*
  store double %514, double* %516
  %517 = inttoptr i64 %790 to i32*
  %518 = load i32, i32* %517
  %519 = add i32 %518, 1
  %520 = inttoptr i64 %790 to i32*
  store i32 %519, i32* %520
  %521 = add i64 %698, -13
  br label %block_405d44

block_40678a:                                     ; preds = %block_4066ff
  %522 = add i64 %2325, -1024
  store i64 %522, i64* %6, align 8, !tbaa !1240
  %523 = add i64 %2325, -3088
  store i64 %523, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %8, align 8, !tbaa !1240
  %524 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %525 = inttoptr i64 %2338 to double*
  %526 = load double, double* %525
  %527 = fmul double %524, %526
  store double %527, double* %32, align 1, !tbaa !1246
  %528 = add i64 %2325, -6424
  %529 = inttoptr i64 %528 to i32*
  %530 = load i32, i32* %529
  %531 = sext i32 %530 to i64
  %532 = mul nsw i64 %531, 1000
  %533 = add i64 %532, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %534 = load i64, i64* %12, align 8
  %535 = add i64 %534, -6404
  %536 = inttoptr i64 %535 to i32*
  %537 = load i32, i32* %536
  %538 = sext i32 %537 to i64
  %539 = mul nsw i64 %538, 200
  %540 = add i64 %539, %533
  %541 = add i64 %534, -6416
  %542 = inttoptr i64 %541 to i32*
  %543 = load i32, i32* %542
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %544, 40
  %546 = add i64 %545, %540
  %547 = load i64, i64* %12, align 8
  %548 = add i64 %547, -6412
  %549 = inttoptr i64 %548 to i32*
  %550 = load i32, i32* %549
  %551 = sext i32 %550 to i64
  %552 = shl nsw i64 %551, 3
  %553 = add i64 %552, %546
  %554 = load double, double* %32, align 1
  %555 = inttoptr i64 %553 to double*
  %556 = load double, double* %555
  %557 = fmul double %554, %556
  %558 = add i64 %547, -1064
  %559 = inttoptr i64 %558 to double*
  store double %557, double* %559
  %560 = add i64 %547, -1048
  %561 = inttoptr i64 %560 to double*
  %562 = load double, double* %561
  %563 = add i64 %547, -1056
  %564 = inttoptr i64 %563 to double*
  %565 = load double, double* %564
  %566 = fadd double %562, %565
  %567 = inttoptr i64 %558 to double*
  %568 = load double, double* %567
  %569 = fadd double %566, %568
  %570 = add i64 %547, -1072
  %571 = inttoptr i64 %570 to double*
  %572 = load double, double* %571
  %573 = fadd double %569, %572
  store double %573, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %574 = add i64 %547, -6404
  %575 = inttoptr i64 %574 to i32*
  %576 = load i32, i32* %575
  %577 = sext i32 %576 to i64
  %578 = mul nsw i64 %577, 200
  %579 = load i64, i64* %7, align 8
  %580 = add i64 %578, %579
  %581 = load i64, i64* %12, align 8
  %582 = add i64 %581, -6416
  %583 = inttoptr i64 %582 to i32*
  %584 = load i32, i32* %583
  %585 = sext i32 %584 to i64
  %586 = mul nsw i64 %585, 40
  %587 = add i64 %586, %580
  store i64 %587, i64* %10, align 8, !tbaa !1240
  %588 = add i64 %581, -6412
  %589 = inttoptr i64 %588 to i32*
  %590 = load i32, i32* %589
  %591 = sext i32 %590 to i64
  %592 = shl nsw i64 %591, 3
  %593 = add i64 %592, %587
  %594 = load double, double* %32, align 1
  %595 = inttoptr i64 %593 to double*
  store double %594, double* %595
  %596 = add i64 %581, -6408
  %597 = inttoptr i64 %596 to i32*
  %598 = load i32, i32* %597
  %599 = sext i32 %598 to i64
  %600 = mul nsw i64 %599, 1000
  %601 = load i64, i64* %8, align 8
  %602 = add i64 %600, %601
  %603 = load i64, i64* %12, align 8
  %604 = add i64 %603, -6404
  %605 = inttoptr i64 %604 to i32*
  %606 = load i32, i32* %605
  %607 = sext i32 %606 to i64
  %608 = mul nsw i64 %607, 200
  %609 = add i64 %608, %602
  %610 = add i64 %603, -6416
  %611 = inttoptr i64 %610 to i32*
  %612 = load i32, i32* %611
  %613 = sext i32 %612 to i64
  %614 = mul nsw i64 %613, 40
  %615 = add i64 %614, %609
  %616 = load i64, i64* %12, align 8
  %617 = add i64 %616, -6412
  %618 = inttoptr i64 %617 to i32*
  %619 = load i32, i32* %618
  %620 = sext i32 %619 to i64
  store i64 %620, i64* %9, align 8, !tbaa !1240
  %621 = shl nsw i64 %620, 3
  %622 = add i64 %621, %615
  %623 = inttoptr i64 %622 to double*
  %624 = load double, double* %623
  store double %624, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %625 = add i64 %616, -6248
  %626 = inttoptr i64 %625 to double*
  %627 = load double, double* %626
  store double %627, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %628 = add i64 %616, -6404
  %629 = inttoptr i64 %628 to i32*
  %630 = load i32, i32* %629
  %631 = sext i32 %630 to i64
  %632 = mul nsw i64 %631, 200
  %633 = load i64, i64* %7, align 8
  %634 = add i64 %632, %633
  %635 = add i64 %616, -6416
  %636 = inttoptr i64 %635 to i32*
  %637 = load i32, i32* %636
  %638 = sext i32 %637 to i64
  %639 = mul nsw i64 %638, 40
  %640 = add i64 %639, %634
  %641 = load i64, i64* %12, align 8
  %642 = add i64 %641, -6412
  %643 = inttoptr i64 %642 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  store i64 %645, i64* %8, align 8, !tbaa !1240
  %646 = shl nsw i64 %645, 3
  %647 = add i64 %646, %640
  %648 = load double, double* %2419, align 1
  %649 = inttoptr i64 %647 to double*
  %650 = load double, double* %649
  %651 = fmul double %648, %650
  store double %651, double* %2419, align 1, !tbaa !1246
  %652 = load double, double* %32, align 1
  %653 = fadd double %652, %651
  store double %653, double* %32, align 1, !tbaa !1246
  %654 = add i64 %641, -6404
  %655 = inttoptr i64 %654 to i32*
  %656 = load i32, i32* %655
  %657 = sext i32 %656 to i64
  %658 = mul nsw i64 %657, 200
  %659 = load i64, i64* %6, align 8
  %660 = add i64 %658, %659
  %661 = add i64 %641, -6416
  %662 = inttoptr i64 %661 to i32*
  %663 = load i32, i32* %662
  %664 = sext i32 %663 to i64
  %665 = mul nsw i64 %664, 40
  %666 = add i64 %665, %660
  %667 = load i64, i64* %12, align 8
  %668 = add i64 %667, -6412
  %669 = inttoptr i64 %668 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  store i64 %671, i64* %7, align 8, !tbaa !1240
  %672 = shl nsw i64 %671, 3
  %673 = add i64 %672, %666
  %674 = load double, double* %32, align 1
  %675 = inttoptr i64 %673 to double*
  store double %674, double* %675
  %676 = inttoptr i64 %668 to i32*
  %677 = load i32, i32* %676
  %678 = add i32 %677, 1
  %679 = inttoptr i64 %668 to i32*
  store i32 %678, i32* %679
  %680 = add i64 %1424, -947
  br label %block_4063d7

block_406949:                                     ; preds = %block_40693c
  %681 = add i64 %481, -6416
  %682 = add i64 %496, 10
  %683 = inttoptr i64 %681 to i32*
  store i32 0, i32* %683
  br label %block_406953

block_405d44:                                     ; preds = %block_405d3a, %block_405d51
  %684 = phi i64 [ %791, %block_405d3a ], [ %521, %block_405d51 ]
  %685 = phi %struct.Memory* [ %1935, %block_405d3a ], [ %685, %block_405d51 ]
  %686 = inttoptr i64 %790 to i32*
  %687 = load i32, i32* %686
  %688 = add i32 %687, -5
  %689 = lshr i32 %688, 31
  %690 = trunc i32 %689 to i8
  %691 = lshr i32 %687, 31
  %692 = xor i32 %689, %691
  %693 = add nuw nsw i32 %692, %691
  %694 = icmp eq i32 %693, 2
  %695 = icmp ne i8 %690, 0
  %696 = xor i1 %695, %694
  %697 = select i1 %696, i64 13, i64 140
  %698 = add i64 %684, %697
  br i1 %696, label %block_405d51, label %block_405dd0

block_405f41:                                     ; preds = %block_405f34
  %699 = inttoptr i64 %851 to double*
  %700 = load double, double* %699
  %701 = sext i32 %2350 to i64
  %702 = mul nsw i64 %701, 40
  %703 = add i64 %702, ptrtoint (%dxm1_type* @dxm1 to i64)
  %704 = inttoptr i64 %857 to i32*
  %705 = load i32, i32* %704
  %706 = sext i32 %705 to i64
  %707 = shl nsw i64 %706, 3
  %708 = add i64 %707, %703
  %709 = inttoptr i64 %708 to double*
  %710 = load double, double* %709
  %711 = inttoptr i64 %858 to i32*
  %712 = load i32, i32* %711
  %713 = sext i32 %712 to i64
  %714 = mul nsw i64 %713, 1000
  %715 = add i64 %714, ptrtoint (%ta1_type* @ta1 to i64)
  %716 = inttoptr i64 %859 to i32*
  %717 = load i32, i32* %716
  %718 = sext i32 %717 to i64
  %719 = mul nsw i64 %718, 200
  %720 = add i64 %719, %715
  %721 = inttoptr i64 %860 to i32*
  %722 = load i32, i32* %721
  %723 = sext i32 %722 to i64
  %724 = mul nsw i64 %723, 40
  %725 = add i64 %724, %720
  %726 = shl nsw i64 %701, 3
  %727 = add i64 %726, %725
  %728 = inttoptr i64 %727 to double*
  %729 = load double, double* %728
  %730 = fmul double %710, %729
  store double %730, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %731 = fadd double %700, %730
  store double %731, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %732 = inttoptr i64 %851 to double*
  store double %731, double* %732
  %733 = inttoptr i64 %854 to i32*
  %734 = load i32, i32* %733
  %735 = add i32 %734, 1
  %736 = inttoptr i64 %854 to i32*
  store i32 %735, i32* %736
  %737 = add i64 %2360, -13
  br label %block_405f34

block_405b3c:                                     ; preds = %block_405b2f
  %738 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 8) to double*)
  %739 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 16) to double*)
  %740 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 24) to double*)
  %741 = sext i32 %830 to i64
  %742 = bitcast double %739 to <2 x i32>
  %743 = extractelement <2 x i32> %742, i32 0
  store i32 %743, i32* %2465, align 1, !tbaa !1266
  %744 = extractelement <2 x i32> %742, i32 1
  store i32 %744, i32* %2467, align 1, !tbaa !1266
  %745 = shl nsw i64 %741, 3
  %746 = add i64 %2446, %745
  %747 = load double, double* %2472, align 1
  %748 = inttoptr i64 %746 to double*
  %749 = load double, double* %748
  %750 = fmul double %747, %749
  %751 = fadd double %740, %750
  %752 = add i64 %2473, %745
  %753 = inttoptr i64 %752 to double*
  store double %751, double* %753
  %754 = inttoptr i64 %2459 to i32*
  %755 = load i32, i32* %754
  %756 = sext i32 %755 to i64
  store i32 %743, i32* %2474, align 1, !tbaa !1266
  store i32 %744, i32* %2476, align 1, !tbaa !1266
  store i32 0, i32* %2477, align 1, !tbaa !1266
  store i32 0, i32* %2479, align 1, !tbaa !1266
  %757 = shl nsw i64 %756, 3
  %758 = add i64 %2481, %757
  %759 = load double, double* %2424, align 1
  %760 = inttoptr i64 %758 to double*
  %761 = load double, double* %760
  %762 = fmul double %759, %761
  store double %762, double* %2424, align 1, !tbaa !1246
  %763 = bitcast double %738 to <2 x i32>
  %764 = extractelement <2 x i32> %763, i32 0
  store i32 %764, i32* %2465, align 1, !tbaa !1266
  %765 = extractelement <2 x i32> %763, i32 1
  store i32 %765, i32* %2467, align 1, !tbaa !1266
  store i32 0, i32* %2469, align 1, !tbaa !1266
  store i32 0, i32* %2471, align 1, !tbaa !1266
  %766 = load double, double* %2472, align 1
  %767 = fadd double %766, %762
  store double %767, double* %2472, align 1, !tbaa !1246
  %768 = inttoptr i64 %2482 to i32*
  %769 = load i32, i32* %768
  %770 = sext i32 %769 to i64
  %771 = shl nsw i64 %770, 3
  %772 = add i64 %2483, %771
  %773 = inttoptr i64 %772 to double*
  store double %767, double* %773
  %774 = inttoptr i64 %2482 to i32*
  %775 = load i32, i32* %774
  %776 = sext i32 %775 to i64
  %777 = shl nsw i64 %776, 3
  %778 = add i64 %2481, %777
  %779 = inttoptr i64 %778 to double*
  %780 = load double, double* %779
  %781 = fmul double %739, %780
  store double %781, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %782 = fadd double %738, %781
  store double %782, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %783 = add i64 %2484, %777
  %784 = inttoptr i64 %783 to double*
  store double %782, double* %784
  %785 = inttoptr i64 %2482 to i32*
  %786 = load i32, i32* %785
  %787 = add i32 %786, 1
  %788 = inttoptr i64 %2482 to i32*
  store i32 %787, i32* %788
  %789 = add i64 %841, -13
  br label %block_405b2f

block_405d3a:                                     ; preds = %block_405cae
  %790 = add i64 %424, -6404
  %791 = add i64 %1948, 10
  %792 = inttoptr i64 %790 to i32*
  store i32 0, i32* %792
  %793 = add i64 %424, -6400
  br label %block_405d44

block_407135:                                     ; preds = %block_407128
  %794 = inttoptr i64 %3087 to double*
  %795 = load double, double* %794
  %796 = sext i32 %1952 to i64
  %797 = mul nsw i64 %796, 40
  %798 = add i64 %797, ptrtoint (%dxm1_type* @dxm1 to i64)
  %799 = inttoptr i64 %3094 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  %802 = shl nsw i64 %801, 3
  %803 = add i64 %802, %798
  %804 = inttoptr i64 %803 to double*
  %805 = load double, double* %804
  %806 = inttoptr i64 %3095 to i32*
  %807 = load i32, i32* %806
  %808 = sext i32 %807 to i64
  %809 = mul nsw i64 %808, 200
  %810 = add i64 %809, %3093
  %811 = add i64 %797, %810
  %812 = inttoptr i64 %3075 to i32*
  %813 = load i32, i32* %812
  %814 = sext i32 %813 to i64
  %815 = shl nsw i64 %814, 3
  %816 = add i64 %815, %811
  %817 = inttoptr i64 %816 to double*
  %818 = load double, double* %817
  %819 = fmul double %805, %818
  store double %819, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %820 = fadd double %795, %819
  store double %820, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %821 = inttoptr i64 %3087 to double*
  store double %820, double* %821
  %822 = inttoptr i64 %3090 to i32*
  %823 = load i32, i32* %822
  %824 = add i32 %823, 1
  %825 = inttoptr i64 %3090 to i32*
  store i32 %824, i32* %825
  %826 = add i64 %1962, -13
  br label %block_407128

block_405b2f:                                     ; preds = %block_405a76, %block_405b3c
  %827 = phi i64 [ %2460, %block_405a76 ], [ %789, %block_405b3c ]
  %828 = phi %struct.Memory* [ %2406, %block_405a76 ], [ %828, %block_405b3c ]
  %829 = inttoptr i64 %2459 to i32*
  %830 = load i32, i32* %829
  %831 = add i32 %830, -3
  %832 = lshr i32 %831, 31
  %833 = trunc i32 %832 to i8
  %834 = lshr i32 %830, 31
  %835 = xor i32 %832, %834
  %836 = add nuw nsw i32 %835, %834
  %837 = icmp eq i32 %836, 2
  %838 = icmp ne i8 %833, 0
  %839 = xor i1 %838, %837
  %840 = select i1 %839, i64 13, i64 174
  %841 = add i64 %827, %840
  br i1 %839, label %block_405b3c, label %block_405bdd

block_406386:                                     ; preds = %block_405df1
  %842 = add i64 %1372, -6404
  %843 = inttoptr i64 %842 to i32*
  %844 = load i32, i32* %843
  %845 = add i32 %844, 1
  %846 = inttoptr i64 %842 to i32*
  store i32 %845, i32* %846
  %847 = add i64 %1387, -1452
  br label %block_405dda

block_405f1f:                                     ; preds = %block_405f14, %block_405ece
  %848 = phi i64 [ %2516, %block_405f14 ], [ %1604, %block_405ece ]
  %849 = phi i64 [ %2518, %block_405f14 ], [ %1635, %block_405ece ]
  %850 = phi %struct.Memory* [ %3216, %block_405f14 ], [ %3216, %block_405ece ]
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %851 = add i64 %848, -6264
  %852 = load double, double* %32, align 1
  %853 = inttoptr i64 %851 to double*
  store double %852, double* %853
  %854 = add i64 %848, -6432
  %855 = add i64 %849, 21
  %856 = inttoptr i64 %854 to i32*
  store i32 0, i32* %856
  %857 = add i64 %848, -6412
  %858 = add i64 %848, -6408
  %859 = add i64 %848, -6404
  %860 = add i64 %848, -6416
  br label %block_405f34

block_4063cd:                                     ; preds = %block_4063c0
  %861 = add i64 %71, -6412
  %862 = add i64 %86, 10
  %863 = inttoptr i64 %861 to i32*
  store i32 0, i32* %863
  br label %block_4063d7

block_406d1d:                                     ; preds = %block_406c92
  %864 = add i64 %2997, -6112
  store i64 %864, i64* %6, align 8, !tbaa !1240
  %865 = add i64 %2997, -4096
  store i64 %865, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %8, align 8, !tbaa !1240
  %866 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %867 = inttoptr i64 %3010 to double*
  %868 = load double, double* %867
  %869 = fmul double %866, %868
  store double %869, double* %32, align 1, !tbaa !1246
  %870 = add i64 %2997, -6424
  %871 = inttoptr i64 %870 to i32*
  %872 = load i32, i32* %871
  %873 = sext i32 %872 to i64
  %874 = mul nsw i64 %873, 1000
  %875 = add i64 %874, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %876 = load i64, i64* %12, align 8
  %877 = add i64 %876, -6404
  %878 = inttoptr i64 %877 to i32*
  %879 = load i32, i32* %878
  %880 = sext i32 %879 to i64
  %881 = mul nsw i64 %880, 200
  %882 = add i64 %881, %875
  %883 = add i64 %876, -6416
  %884 = inttoptr i64 %883 to i32*
  %885 = load i32, i32* %884
  %886 = sext i32 %885 to i64
  %887 = mul nsw i64 %886, 40
  %888 = add i64 %887, %882
  %889 = load i64, i64* %12, align 8
  %890 = add i64 %889, -6412
  %891 = inttoptr i64 %890 to i32*
  %892 = load i32, i32* %891
  %893 = sext i32 %892 to i64
  %894 = shl nsw i64 %893, 3
  %895 = add i64 %894, %888
  %896 = load double, double* %32, align 1
  %897 = inttoptr i64 %895 to double*
  %898 = load double, double* %897
  %899 = fmul double %896, %898
  %900 = add i64 %889, -1064
  %901 = inttoptr i64 %900 to double*
  store double %899, double* %901
  %902 = add i64 %889, -1048
  %903 = inttoptr i64 %902 to double*
  %904 = load double, double* %903
  %905 = add i64 %889, -1056
  %906 = inttoptr i64 %905 to double*
  %907 = load double, double* %906
  %908 = fadd double %904, %907
  %909 = inttoptr i64 %900 to double*
  %910 = load double, double* %909
  %911 = fadd double %908, %910
  %912 = add i64 %889, -1072
  %913 = inttoptr i64 %912 to double*
  %914 = load double, double* %913
  %915 = fadd double %911, %914
  store double %915, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %916 = add i64 %889, -6404
  %917 = inttoptr i64 %916 to i32*
  %918 = load i32, i32* %917
  %919 = sext i32 %918 to i64
  %920 = mul nsw i64 %919, 200
  %921 = load i64, i64* %7, align 8
  %922 = add i64 %920, %921
  %923 = load i64, i64* %12, align 8
  %924 = add i64 %923, -6416
  %925 = inttoptr i64 %924 to i32*
  %926 = load i32, i32* %925
  %927 = sext i32 %926 to i64
  %928 = mul nsw i64 %927, 40
  %929 = add i64 %928, %922
  store i64 %929, i64* %10, align 8, !tbaa !1240
  %930 = add i64 %923, -6412
  %931 = inttoptr i64 %930 to i32*
  %932 = load i32, i32* %931
  %933 = sext i32 %932 to i64
  %934 = shl nsw i64 %933, 3
  %935 = add i64 %934, %929
  %936 = load double, double* %32, align 1
  %937 = inttoptr i64 %935 to double*
  store double %936, double* %937
  %938 = add i64 %923, -6408
  %939 = inttoptr i64 %938 to i32*
  %940 = load i32, i32* %939
  %941 = sext i32 %940 to i64
  %942 = mul nsw i64 %941, 1000
  %943 = load i64, i64* %8, align 8
  %944 = add i64 %942, %943
  %945 = load i64, i64* %12, align 8
  %946 = add i64 %945, -6404
  %947 = inttoptr i64 %946 to i32*
  %948 = load i32, i32* %947
  %949 = sext i32 %948 to i64
  %950 = mul nsw i64 %949, 200
  %951 = add i64 %950, %944
  %952 = add i64 %945, -6416
  %953 = inttoptr i64 %952 to i32*
  %954 = load i32, i32* %953
  %955 = sext i32 %954 to i64
  %956 = mul nsw i64 %955, 40
  %957 = add i64 %956, %951
  %958 = load i64, i64* %12, align 8
  %959 = add i64 %958, -6412
  %960 = inttoptr i64 %959 to i32*
  %961 = load i32, i32* %960
  %962 = sext i32 %961 to i64
  store i64 %962, i64* %9, align 8, !tbaa !1240
  %963 = shl nsw i64 %962, 3
  %964 = add i64 %963, %957
  %965 = inttoptr i64 %964 to double*
  %966 = load double, double* %965
  store double %966, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %967 = load double, double* bitcast (%dtime_type* @dtime to double*)
  store double %967, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %968 = add i64 %958, -6404
  %969 = inttoptr i64 %968 to i32*
  %970 = load i32, i32* %969
  %971 = sext i32 %970 to i64
  %972 = mul nsw i64 %971, 200
  %973 = load i64, i64* %7, align 8
  %974 = add i64 %972, %973
  %975 = add i64 %958, -6416
  %976 = inttoptr i64 %975 to i32*
  %977 = load i32, i32* %976
  %978 = sext i32 %977 to i64
  %979 = mul nsw i64 %978, 40
  %980 = add i64 %979, %974
  %981 = load i64, i64* %12, align 8
  %982 = add i64 %981, -6412
  %983 = inttoptr i64 %982 to i32*
  %984 = load i32, i32* %983
  %985 = sext i32 %984 to i64
  store i64 %985, i64* %8, align 8, !tbaa !1240
  %986 = shl nsw i64 %985, 3
  %987 = add i64 %986, %980
  %988 = load double, double* %2419, align 1
  %989 = inttoptr i64 %987 to double*
  %990 = load double, double* %989
  %991 = fmul double %988, %990
  store double %991, double* %2419, align 1, !tbaa !1246
  %992 = load double, double* %32, align 1
  %993 = fadd double %992, %991
  store double %993, double* %32, align 1, !tbaa !1246
  %994 = add i64 %981, -6404
  %995 = inttoptr i64 %994 to i32*
  %996 = load i32, i32* %995
  %997 = sext i32 %996 to i64
  %998 = mul nsw i64 %997, 200
  %999 = load i64, i64* %6, align 8
  %1000 = add i64 %998, %999
  %1001 = add i64 %981, -6416
  %1002 = inttoptr i64 %1001 to i32*
  %1003 = load i32, i32* %1002
  %1004 = sext i32 %1003 to i64
  %1005 = mul nsw i64 %1004, 40
  %1006 = add i64 %1005, %1000
  %1007 = load i64, i64* %12, align 8
  %1008 = add i64 %1007, -6412
  %1009 = inttoptr i64 %1008 to i32*
  %1010 = load i32, i32* %1009
  %1011 = sext i32 %1010 to i64
  store i64 %1011, i64* %7, align 8, !tbaa !1240
  %1012 = shl nsw i64 %1011, 3
  %1013 = add i64 %1012, %1006
  %1014 = load double, double* %32, align 1
  %1015 = inttoptr i64 %1013 to double*
  store double %1014, double* %1015
  %1016 = inttoptr i64 %1008 to i32*
  %1017 = load i32, i32* %1016
  %1018 = add i32 %1017, 1
  %1019 = inttoptr i64 %1008 to i32*
  store i32 %1018, i32* %1019
  %1020 = add i64 %2258, -947
  br label %block_40696a

block_405fd3:                                     ; preds = %block_405f34
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %1021 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %1022 = inttoptr i64 %851 to double*
  %1023 = load double, double* %1022
  %1024 = fmul double %1021, %1023
  store double %1024, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %1025 = add i64 %848, -6424
  %1026 = inttoptr i64 %1025 to i32*
  %1027 = load i32, i32* %1026
  %1028 = sext i32 %1027 to i64
  %1029 = mul nsw i64 %1028, 1000
  %1030 = add i64 %1029, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %1031 = load i64, i64* %12, align 8
  %1032 = add i64 %1031, -6404
  %1033 = inttoptr i64 %1032 to i32*
  %1034 = load i32, i32* %1033
  %1035 = sext i32 %1034 to i64
  %1036 = mul nsw i64 %1035, 200
  %1037 = add i64 %1036, %1030
  %1038 = add i64 %1031, -6416
  %1039 = inttoptr i64 %1038 to i32*
  %1040 = load i32, i32* %1039
  %1041 = sext i32 %1040 to i64
  %1042 = mul nsw i64 %1041, 40
  %1043 = add i64 %1042, %1037
  %1044 = load i64, i64* %12, align 8
  %1045 = add i64 %1044, -6412
  %1046 = inttoptr i64 %1045 to i32*
  %1047 = load i32, i32* %1046
  %1048 = sext i32 %1047 to i64
  %1049 = shl nsw i64 %1048, 3
  %1050 = add i64 %1049, %1043
  %1051 = load double, double* %2419, align 1
  %1052 = inttoptr i64 %1050 to double*
  %1053 = load double, double* %1052
  %1054 = fmul double %1051, %1053
  store double %1054, double* %2419, align 1, !tbaa !1246
  %1055 = add i64 %1044, -1048
  %1056 = inttoptr i64 %1055 to double*
  store double %1054, double* %1056
  %1057 = add i64 %1044, -6264
  %1058 = load double, double* %32, align 1
  %1059 = inttoptr i64 %1057 to double*
  store double %1058, double* %1059
  %1060 = add i64 %1044, -6432
  %1061 = add i64 %2360, 115
  %1062 = inttoptr i64 %1060 to i32*
  store i32 0, i32* %1062
  %1063 = add i64 %1044, -6416
  %1064 = add i64 %1044, -6408
  %1065 = add i64 %1044, -6404
  br label %block_406046

block_406510:                                     ; preds = %block_406503
  %1066 = inttoptr i64 %2584 to double*
  %1067 = load double, double* %1066
  %1068 = sext i32 %1360 to i64
  %1069 = mul nsw i64 %1068, 40
  %1070 = add i64 %1069, ptrtoint (%dxm1_type* @dxm1 to i64)
  %1071 = inttoptr i64 %2591 to i32*
  %1072 = load i32, i32* %1071
  %1073 = sext i32 %1072 to i64
  %1074 = shl nsw i64 %1073, 3
  %1075 = add i64 %1074, %1070
  %1076 = inttoptr i64 %1075 to double*
  %1077 = load double, double* %1076
  %1078 = inttoptr i64 %2592 to i32*
  %1079 = load i32, i32* %1078
  %1080 = sext i32 %1079 to i64
  %1081 = mul nsw i64 %1080, 200
  %1082 = add i64 %1081, %2590
  %1083 = inttoptr i64 %2593 to i32*
  %1084 = load i32, i32* %1083
  %1085 = sext i32 %1084 to i64
  %1086 = mul nsw i64 %1085, 40
  %1087 = add i64 %1086, %1082
  %1088 = shl nsw i64 %1068, 3
  %1089 = add i64 %1088, %1087
  %1090 = inttoptr i64 %1089 to double*
  %1091 = load double, double* %1090
  %1092 = fmul double %1077, %1091
  store double %1092, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %1093 = fadd double %1067, %1092
  store double %1093, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1094 = inttoptr i64 %2584 to double*
  store double %1093, double* %1094
  %1095 = inttoptr i64 %2587 to i32*
  %1096 = load i32, i32* %1095
  %1097 = add i32 %1096, 1
  %1098 = inttoptr i64 %2587 to i32*
  store i32 %1097, i32* %1098
  %1099 = add i64 %1370, -13
  br label %block_406503

block_4077ed:                                     ; preds = %block_4077df
  store i64 4, i64* %10, align 8, !tbaa !1240
  %1100 = add i64 %62, -7709
  %1101 = add i64 %62, 10
  %1102 = load i64, i64* %11, align 8, !tbaa !1240
  %1103 = add i64 %1102, -8
  %1104 = inttoptr i64 %1103 to i64*
  store i64 %1101, i64* %1104
  store i64 %1103, i64* %11, align 8, !tbaa !1240
  %1105 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %1100, %struct.Memory* %58)
  %1106 = load i64, i64* %3, align 8
  br label %block_4077f7

block_406960:                                     ; preds = %block_406953
  %1107 = add i64 %1395, -6412
  %1108 = add i64 %1410, 10
  %1109 = inttoptr i64 %1107 to i32*
  store i32 0, i32* %1109
  br label %block_40696a

block_40670c:                                     ; preds = %block_4066ff
  %1110 = inttoptr i64 %2338 to double*
  %1111 = load double, double* %1110
  %1112 = sext i32 %1414 to i64
  %1113 = mul nsw i64 %1112, 40
  %1114 = add i64 %1113, ptrtoint (%dxm1_type* @dxm1 to i64)
  %1115 = inttoptr i64 %2345 to i32*
  %1116 = load i32, i32* %1115
  %1117 = sext i32 %1116 to i64
  %1118 = shl nsw i64 %1117, 3
  %1119 = add i64 %1118, %1114
  %1120 = inttoptr i64 %1119 to double*
  %1121 = load double, double* %1120
  %1122 = mul nsw i64 %1112, 200
  %1123 = add i64 %1122, %2344
  %1124 = inttoptr i64 %2346 to i32*
  %1125 = load i32, i32* %1124
  %1126 = sext i32 %1125 to i64
  %1127 = mul nsw i64 %1126, 40
  %1128 = add i64 %1127, %1123
  %1129 = inttoptr i64 %2326 to i32*
  %1130 = load i32, i32* %1129
  %1131 = sext i32 %1130 to i64
  %1132 = shl nsw i64 %1131, 3
  %1133 = add i64 %1132, %1128
  %1134 = inttoptr i64 %1133 to double*
  %1135 = load double, double* %1134
  %1136 = fmul double %1121, %1135
  store double %1136, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %1137 = fadd double %1111, %1136
  store double %1137, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1138 = inttoptr i64 %2338 to double*
  store double %1137, double* %1138
  %1139 = inttoptr i64 %2341 to i32*
  %1140 = load i32, i32* %1139
  %1141 = add i32 %1140, 1
  %1142 = inttoptr i64 %2341 to i32*
  store i32 %1141, i32* %1142
  %1143 = add i64 %1424, -13
  br label %block_4066ff

block_407572:                                     ; preds = %block_407565
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %6, align 8, !tbaa !1240
  store i64 %1690, i64* %7, align 8, !tbaa !1240
  %1144 = inttoptr i64 %1691 to i32*
  %1145 = load i32, i32* %1144
  %1146 = sext i32 %1145 to i64
  %1147 = mul nsw i64 %1146, 1000
  %1148 = add i64 %1147, ptrtoint (%bm1_s_type* @bm1_s to i64)
  %1149 = inttoptr i64 %1685 to i32*
  %1150 = load i32, i32* %1149
  %1151 = sext i32 %1150 to i64
  %1152 = mul nsw i64 %1151, 200
  %1153 = add i64 %1152, %1148
  %1154 = inttoptr i64 %1688 to i32*
  %1155 = load i32, i32* %1154
  %1156 = sext i32 %1155 to i64
  %1157 = mul nsw i64 %1156, 40
  %1158 = add i64 %1157, %1153
  %1159 = sext i32 %1428 to i64
  %1160 = shl nsw i64 %1159, 3
  %1161 = add i64 %1160, %1158
  %1162 = inttoptr i64 %1161 to double*
  %1163 = load double, double* %1162
  %1164 = inttoptr i64 %1692 to i32*
  %1165 = load i32, i32* %1164
  %1166 = sext i32 %1165 to i64
  %1167 = mul nsw i64 %1166, 1000
  %1168 = add i64 %1167, ptrtoint (%ta1_type* @ta1 to i64)
  %1169 = add i64 %1152, %1168
  %1170 = add i64 %1157, %1169
  %1171 = add i64 %1160, %1170
  %1172 = inttoptr i64 %1171 to double*
  %1173 = load double, double* %1172
  %1174 = inttoptr i64 %1693 to double*
  %1175 = load double, double* %1174
  %1176 = fmul double %1173, %1175
  %1177 = add i64 %1152, %1690
  %1178 = add i64 %1157, %1177
  store i64 %1178, i64* %10, align 8, !tbaa !1240
  %1179 = add i64 %1160, %1178
  %1180 = inttoptr i64 %1179 to double*
  %1181 = load double, double* %1180
  %1182 = fadd double %1176, %1181
  %1183 = fmul double %1163, %1182
  %1184 = add i64 %1167, ptrtoint (%trhs_type* @trhs to i64)
  %1185 = add i64 %1152, %1184
  %1186 = add i64 %1157, %1185
  %1187 = add i64 %1160, %1186
  %1188 = inttoptr i64 %1187 to double*
  store double %1183, double* %1188
  %1189 = inttoptr i64 %1692 to i32*
  %1190 = load i32, i32* %1189
  %1191 = sext i32 %1190 to i64
  %1192 = mul nsw i64 %1191, 1000
  %1193 = add i64 %1192, ptrtoint (%ta1_type* @ta1 to i64)
  %1194 = inttoptr i64 %1685 to i32*
  %1195 = load i32, i32* %1194
  %1196 = sext i32 %1195 to i64
  %1197 = mul nsw i64 %1196, 200
  %1198 = add i64 %1197, %1193
  %1199 = inttoptr i64 %1688 to i32*
  %1200 = load i32, i32* %1199
  %1201 = sext i32 %1200 to i64
  %1202 = mul nsw i64 %1201, 40
  %1203 = add i64 %1202, %1198
  store i64 %1203, i64* %9, align 8, !tbaa !1240
  %1204 = inttoptr i64 %1689 to i32*
  %1205 = load i32, i32* %1204
  %1206 = sext i32 %1205 to i64
  %1207 = shl nsw i64 %1206, 3
  %1208 = add i64 %1207, %1203
  %1209 = inttoptr i64 %1208 to double*
  %1210 = load double, double* %1209
  %1211 = load i64, i64* %7, align 8
  %1212 = add i64 %1197, %1211
  %1213 = add i64 %1202, %1212
  store i64 %1206, i64* %8, align 8, !tbaa !1240
  %1214 = add i64 %1207, %1213
  %1215 = inttoptr i64 %1214 to double*
  %1216 = load double, double* %1215
  %1217 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %1218 = fmul double %1216, %1217
  store double %1218, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %1219 = fadd double %1218, %1210
  store double %1219, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1220 = load i64, i64* %6, align 8
  %1221 = add i64 %1192, %1220
  %1222 = add i64 %1197, %1221
  %1223 = add i64 %1202, %1222
  store i64 %1206, i64* %7, align 8, !tbaa !1240
  %1224 = add i64 %1207, %1223
  %1225 = inttoptr i64 %1224 to double*
  store double %1219, double* %1225
  %1226 = inttoptr i64 %1689 to i32*
  %1227 = load i32, i32* %1226
  %1228 = add i32 %1227, 1
  %1229 = inttoptr i64 %1689 to i32*
  store i32 %1228, i32* %1229
  %1230 = add i64 %1438, -13
  br label %block_407565

block_406f0b:                                     ; preds = %block_406efe
  %1231 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %1231, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %1232 = sext i32 %1444 to i64
  %1233 = shl nsw i64 %1232, 3
  %1234 = add i64 %1440, -6304
  %1235 = add i64 %1234, %1233
  %1236 = inttoptr i64 %1235 to double*
  %1237 = load double, double* %1236
  %1238 = add i64 %1440, -6160
  %1239 = inttoptr i64 %1238 to double*
  %1240 = load double, double* %1239
  %1241 = fsub double %1237, %1240
  store double %1241, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1242 = add i64 %1469, 37
  %1243 = load i64, i64* %11, align 8, !tbaa !1240
  %1244 = add i64 %1243, -8
  %1245 = inttoptr i64 %1244 to i64*
  store i64 %1242, i64* %1245
  %1246 = load i64, i64* %2412, align 8, !alias.scope !1619, !noalias !1622
  %1247 = load i64, i64* %9, align 8, !alias.scope !1619, !noalias !1622
  %1248 = inttoptr i64 %1244 to i64*
  %1249 = load i64, i64* %1248
  store i64 %1249, i64* %3, align 8, !alias.scope !1619, !noalias !1622
  store i64 %1243, i64* %11, align 8, !alias.scope !1619, !noalias !1622
  %1250 = tail call i64 @pow(i64 %1246, i64 %1247), !noalias !1619
  %1251 = load i64, i64* %3, align 8
  %1252 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %1252, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %1253 = load i64, i64* %12, align 8
  %1254 = add i64 %1253, -6416
  %1255 = inttoptr i64 %1254 to i32*
  %1256 = load i32, i32* %1255
  %1257 = sext i32 %1256 to i64
  %1258 = shl nsw i64 %1257, 3
  %1259 = add i64 %1253, -6352
  %1260 = add i64 %1259, %1258
  %1261 = inttoptr i64 %1260 to double*
  %1262 = load double, double* %1261
  %1263 = add i64 %1253, -6192
  %1264 = inttoptr i64 %1263 to double*
  %1265 = load double, double* %1264
  %1266 = fsub double %1262, %1265
  store double %1266, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %1267 = add i64 %1253, -6520
  %1268 = load double, double* %32, align 1
  %1269 = inttoptr i64 %1267 to double*
  store double %1268, double* %1269
  %1270 = bitcast double %1266 to <2 x i32>
  %1271 = extractelement <2 x i32> %1270, i32 0
  store i32 %1271, i32* %185, align 1, !tbaa !1266
  %1272 = extractelement <2 x i32> %1270, i32 1
  store i32 %1272, i32* %187, align 1, !tbaa !1266
  store i32 0, i32* %188, align 1, !tbaa !1266
  store i32 0, i32* %190, align 1, !tbaa !1266
  %1273 = add i64 %1251, 48
  %1274 = load i64, i64* %11, align 8, !tbaa !1240
  %1275 = add i64 %1274, -8
  %1276 = inttoptr i64 %1275 to i64*
  store i64 %1273, i64* %1276
  %1277 = load i64, i64* %2412, align 8, !alias.scope !1624, !noalias !1627
  %1278 = load i64, i64* %9, align 8, !alias.scope !1624, !noalias !1627
  %1279 = inttoptr i64 %1275 to i64*
  %1280 = load i64, i64* %1279
  store i64 %1280, i64* %3, align 8, !alias.scope !1624, !noalias !1627
  store i64 %1274, i64* %11, align 8, !alias.scope !1624, !noalias !1627
  %1281 = tail call i64 @pow(i64 %1277, i64 %1278), !noalias !1624
  %1282 = load i64, i64* %3, align 8
  %1283 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %1283, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %1284 = load i64, i64* %12, align 8
  %1285 = add i64 %1284, -6520
  %1286 = inttoptr i64 %1285 to double*
  %1287 = load double, double* %1286
  %1288 = load double, double* %32, align 1
  %1289 = fadd double %1287, %1288
  store double %1289, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %1290 = add i64 %1284, -6404
  %1291 = inttoptr i64 %1290 to i32*
  %1292 = load i32, i32* %1291
  %1293 = sext i32 %1292 to i64
  %1294 = shl nsw i64 %1293, 3
  %1295 = add i64 %1284, -6400
  %1296 = add i64 %1295, %1294
  %1297 = inttoptr i64 %1296 to double*
  %1298 = load double, double* %1297
  %1299 = add i64 %1284, -6224
  %1300 = inttoptr i64 %1299 to double*
  %1301 = load double, double* %1300
  %1302 = fsub double %1298, %1301
  store double %1302, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1303 = add i64 %1284, -6528
  %1304 = inttoptr i64 %1303 to double*
  store double %1289, double* %1304
  %1305 = add i64 %1282, 57
  %1306 = load i64, i64* %11, align 8, !tbaa !1240
  %1307 = add i64 %1306, -8
  %1308 = inttoptr i64 %1307 to i64*
  store i64 %1305, i64* %1308
  %1309 = load i64, i64* %2412, align 8, !alias.scope !1629, !noalias !1632
  %1310 = load i64, i64* %9, align 8, !alias.scope !1629, !noalias !1632
  %1311 = inttoptr i64 %1307 to i64*
  %1312 = load i64, i64* %1311
  store i64 %1312, i64* %3, align 8, !alias.scope !1629, !noalias !1632
  store i64 %1306, i64* %11, align 8, !alias.scope !1629, !noalias !1632
  %1313 = tail call i64 @pow(i64 %1309, i64 %1310), !noalias !1629
  store i64 %1313, i64* %2411, align 8, !alias.scope !1629, !noalias !1632
  %1314 = load i64, i64* %12, align 8
  %1315 = add i64 %1314, -6528
  %1316 = load i64, i64* %3, align 8
  %1317 = inttoptr i64 %1315 to double*
  %1318 = load double, double* %1317
  %1319 = load double, double* %32, align 1
  %1320 = fadd double %1318, %1319
  %1321 = add i64 %1314, -6256
  %1322 = inttoptr i64 %1321 to double*
  store double %1320, double* %1322
  %1323 = inttoptr i64 %1321 to double*
  %1324 = load double, double* %1323
  store double %1324, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %1325 = add i64 %1314, -16
  %1326 = inttoptr i64 %1325 to double*
  %1327 = load double, double* %1326
  store double %1327, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %1328 = add i64 %1316, 37
  store i64 %1328, i64* %3, align 8
  %1329 = fcmp uno double %1327, %1324
  br i1 %1329, label %1330, label %1341

; <label>:1330:                                   ; preds = %block_406f0b
  %1331 = fadd double %1327, %1324
  %1332 = bitcast double %1331 to i64
  %1333 = and i64 %1332, 9221120237041090560
  %1334 = icmp eq i64 %1333, 9218868437227405312
  %1335 = and i64 %1332, 2251799813685247
  %1336 = icmp ne i64 %1335, 0
  %1337 = and i1 %1334, %1336
  br i1 %1337, label %1338, label %1347

; <label>:1338:                                   ; preds = %1330
  %1339 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1328, %struct.Memory* %1441) #14
  %1340 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit46

; <label>:1341:                                   ; preds = %block_406f0b
  %1342 = fcmp ogt double %1327, %1324
  br i1 %1342, label %1347, label %1343

; <label>:1343:                                   ; preds = %1341
  %1344 = fcmp olt double %1327, %1324
  br i1 %1344, label %1347, label %1345

; <label>:1345:                                   ; preds = %1343
  %1346 = fcmp oeq double %1327, %1324
  br i1 %1346, label %1347, label %1349

; <label>:1347:                                   ; preds = %1345, %1343, %1341, %1330
  %1348 = phi i8 [ 0, %1341 ], [ 1, %1343 ], [ 0, %1345 ], [ 1, %1330 ]
  store i8 %1348, i8* %24, align 1, !tbaa !1463
  br label %1349

; <label>:1349:                                   ; preds = %1347, %1345
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit46

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit46: ; preds = %1349, %1338
  %1350 = phi i64 [ %1340, %1338 ], [ %1328, %1349 ]
  %1351 = phi %struct.Memory* [ %1339, %1338 ], [ %1441, %1349 ]
  %1352 = load i8, i8* %24, align 1, !tbaa !1248
  %1353 = icmp ne i8 %1352, 0
  %1354 = select i1 %1353, i64 76, i64 6
  %1355 = add i64 %1350, %1354
  %1356 = icmp eq i8 %1352, 1
  br i1 %1356, label %block_40700a, label %block_406fc4

block_406503:                                     ; preds = %block_4064ee, %block_406510
  %1357 = phi i64 [ %2588, %block_4064ee ], [ %1099, %block_406510 ]
  %1358 = phi %struct.Memory* [ %2583, %block_4064ee ], [ %1358, %block_406510 ]
  %1359 = inttoptr i64 %2587 to i32*
  %1360 = load i32, i32* %1359
  %1361 = add i32 %1360, -5
  %1362 = lshr i32 %1361, 31
  %1363 = lshr i32 %1360, 31
  %1364 = xor i32 %1362, %1363
  %1365 = add nuw nsw i32 %1364, %1363
  %1366 = icmp eq i32 %1365, 2
  %1367 = icmp ne i32 %1362, 0
  %1368 = xor i1 %1367, %1366
  %1369 = select i1 %1368, i64 13, i64 139
  %1370 = add i64 %1357, %1369
  br i1 %1368, label %block_406510, label %block_40658e

block_405df1:                                     ; preds = %block_405de7, %block_40636d
  %1371 = phi i64 [ %2535, %block_405de7 ], [ %2264, %block_40636d ]
  %1372 = phi i64 [ %2266, %block_405de7 ], [ %3314, %block_40636d ]
  %1373 = phi %struct.Memory* [ %2267, %block_405de7 ], [ %3315, %block_40636d ]
  %1374 = add i64 %1372, -6416
  %1375 = inttoptr i64 %1374 to i32*
  %1376 = load i32, i32* %1375
  %1377 = add i32 %1376, -5
  %1378 = lshr i32 %1377, 31
  %1379 = trunc i32 %1378 to i8
  %1380 = lshr i32 %1376, 31
  %1381 = xor i32 %1378, %1380
  %1382 = add nuw nsw i32 %1381, %1380
  %1383 = icmp eq i32 %1382, 2
  %1384 = icmp ne i8 %1379, 0
  %1385 = xor i1 %1384, %1383
  %1386 = select i1 %1385, i64 13, i64 1429
  %1387 = add i64 %1371, %1386
  br i1 %1385, label %block_405dfe, label %block_406386

block_406900:                                     ; preds = %block_4063d7
  %1388 = add i64 %2215, -6416
  %1389 = inttoptr i64 %1388 to i32*
  %1390 = load i32, i32* %1389
  %1391 = add i32 %1390, 1
  %1392 = inttoptr i64 %1388 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %2244, -1344
  br label %block_4063c0

block_406953:                                     ; preds = %block_406e94, %block_406949
  %1394 = phi i64 [ %682, %block_406949 ], [ %2390, %block_406e94 ]
  %1395 = phi i64 [ %481, %block_406949 ], [ %450, %block_406e94 ]
  %1396 = phi %struct.Memory* [ %482, %block_406949 ], [ %451, %block_406e94 ]
  %1397 = add i64 %1395, -6416
  %1398 = inttoptr i64 %1397 to i32*
  %1399 = load i32, i32* %1398
  %1400 = add i32 %1399, -5
  %1401 = lshr i32 %1400, 31
  %1402 = trunc i32 %1401 to i8
  %1403 = lshr i32 %1399, 31
  %1404 = xor i32 %1401, %1403
  %1405 = add nuw nsw i32 %1404, %1403
  %1406 = icmp eq i32 %1405, 2
  %1407 = icmp ne i8 %1402, 0
  %1408 = xor i1 %1407, %1406
  %1409 = select i1 %1408, i64 13, i64 1370
  %1410 = add i64 %1394, %1409
  br i1 %1408, label %block_406960, label %block_406ead

block_4066ff:                                     ; preds = %block_40668c, %block_40670c
  %1411 = phi i64 [ %2342, %block_40668c ], [ %1143, %block_40670c ]
  %1412 = phi %struct.Memory* [ %3384, %block_40668c ], [ %1412, %block_40670c ]
  %1413 = inttoptr i64 %2341 to i32*
  %1414 = load i32, i32* %1413
  %1415 = add i32 %1414, -5
  %1416 = lshr i32 %1415, 31
  %1417 = lshr i32 %1414, 31
  %1418 = xor i32 %1416, %1417
  %1419 = add nuw nsw i32 %1418, %1417
  %1420 = icmp eq i32 %1419, 2
  %1421 = icmp ne i32 %1416, 0
  %1422 = xor i1 %1421, %1420
  %1423 = select i1 %1422, i64 13, i64 139
  %1424 = add i64 %1411, %1423
  br i1 %1422, label %block_40670c, label %block_40678a

block_407565:                                     ; preds = %block_40755b, %block_407572
  %1425 = phi i64 [ %1470, %block_40755b ], [ %1230, %block_407572 ]
  %1426 = phi %struct.Memory* [ %1476, %block_40755b ], [ %1426, %block_407572 ]
  %1427 = inttoptr i64 %1689 to i32*
  %1428 = load i32, i32* %1427
  %1429 = add i32 %1428, -5
  %1430 = lshr i32 %1429, 31
  %1431 = lshr i32 %1428, 31
  %1432 = xor i32 %1430, %1431
  %1433 = add nuw nsw i32 %1432, %1431
  %1434 = icmp eq i32 %1433, 2
  %1435 = icmp ne i32 %1430, 0
  %1436 = xor i1 %1435, %1434
  %1437 = select i1 %1436, i64 13, i64 490
  %1438 = add i64 %1425, %1437
  br i1 %1436, label %block_407572, label %block_40774f

block_406efe:                                     ; preds = %block_4072b1, %block_406ef4
  %1439 = phi i64 [ %1473, %block_406ef4 ], [ %1933, %block_4072b1 ]
  %1440 = phi i64 [ %1490, %block_406ef4 ], [ %1920, %block_4072b1 ]
  %1441 = phi %struct.Memory* [ %1491, %block_406ef4 ], [ %2769, %block_4072b1 ]
  %1442 = add i64 %1440, -6412
  %1443 = inttoptr i64 %1442 to i32*
  %1444 = load i32, i32* %1443
  %1445 = add i32 %1444, -5
  %1446 = icmp ult i32 %1444, 5
  %1447 = zext i1 %1446 to i8
  store i8 %1447, i8* %24, align 1, !tbaa !1248
  %1448 = and i32 %1445, 255
  %1449 = tail call i32 @llvm.ctpop.i32(i32 %1448) #11
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = xor i8 %1451, 1
  store i8 %1452, i8* %25, align 1, !tbaa !1261
  %1453 = xor i32 %1445, %1444
  %1454 = lshr i32 %1453, 4
  %1455 = trunc i32 %1454 to i8
  %1456 = and i8 %1455, 1
  store i8 %1456, i8* %26, align 1, !tbaa !1262
  %1457 = icmp eq i32 %1445, 0
  %1458 = zext i1 %1457 to i8
  store i8 %1458, i8* %27, align 1, !tbaa !1263
  %1459 = lshr i32 %1445, 31
  %1460 = trunc i32 %1459 to i8
  store i8 %1460, i8* %28, align 1, !tbaa !1264
  %1461 = lshr i32 %1444, 31
  %1462 = xor i32 %1459, %1461
  %1463 = add nuw nsw i32 %1462, %1461
  %1464 = icmp eq i32 %1463, 2
  %1465 = zext i1 %1464 to i8
  store i8 %1465, i8* %29, align 1, !tbaa !1265
  %1466 = icmp ne i8 %1460, 0
  %1467 = xor i1 %1466, %1464
  %1468 = select i1 %1467, i64 13, i64 1423
  %1469 = add i64 %1439, %1468
  br i1 %1467, label %block_406f0b, label %block_40748d

block_40755b:                                     ; preds = %block_40754e
  %1470 = add i64 %1488, 10
  %1471 = inttoptr i64 %1689 to i32*
  store i32 0, i32* %1471
  br label %block_407565

block_406ef4:                                     ; preds = %block_406ee7
  %1472 = add i64 %1490, -6412
  %1473 = add i64 %1505, 10
  %1474 = inttoptr i64 %1472 to i32*
  store i32 0, i32* %1474
  br label %block_406efe

block_40754e:                                     ; preds = %block_40774f, %block_407544
  %1475 = phi i64 [ %1506, %block_407544 ], [ %2384, %block_40774f ]
  %1476 = phi %struct.Memory* [ %1573, %block_407544 ], [ %1426, %block_40774f ]
  %1477 = inttoptr i64 %1688 to i32*
  %1478 = load i32, i32* %1477
  %1479 = add i32 %1478, -5
  %1480 = lshr i32 %1479, 31
  %1481 = lshr i32 %1478, 31
  %1482 = xor i32 %1480, %1481
  %1483 = add nuw nsw i32 %1482, %1481
  %1484 = icmp eq i32 %1483, 2
  %1485 = icmp ne i32 %1480, 0
  %1486 = xor i1 %1485, %1484
  %1487 = select i1 %1486, i64 13, i64 538
  %1488 = add i64 %1475, %1487
  br i1 %1486, label %block_40755b, label %block_407768

block_406ee7:                                     ; preds = %block_40748d, %block_406edd
  %1489 = phi i64 [ %1554, %block_406edd ], [ %2301, %block_40748d ]
  %1490 = phi i64 [ %1587, %block_406edd ], [ %1440, %block_40748d ]
  %1491 = phi %struct.Memory* [ %1588, %block_406edd ], [ %1441, %block_40748d ]
  %1492 = add i64 %1490, -6416
  %1493 = inttoptr i64 %1492 to i32*
  %1494 = load i32, i32* %1493
  %1495 = add i32 %1494, -5
  %1496 = lshr i32 %1495, 31
  %1497 = trunc i32 %1496 to i8
  %1498 = lshr i32 %1494, 31
  %1499 = xor i32 %1496, %1498
  %1500 = add nuw nsw i32 %1499, %1498
  %1501 = icmp eq i32 %1500, 2
  %1502 = icmp ne i8 %1497, 0
  %1503 = xor i1 %1502, %1501
  %1504 = select i1 %1503, i64 13, i64 1471
  %1505 = add i64 %1489, %1504
  br i1 %1503, label %block_406ef4, label %block_4074a6

block_407544:                                     ; preds = %block_407537
  %1506 = add i64 %1585, 10
  %1507 = inttoptr i64 %1688 to i32*
  store i32 0, i32* %1507
  br label %block_40754e

block_4060e5:                                     ; preds = %block_406046
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %1508 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %1509 = inttoptr i64 %1057 to double*
  %1510 = load double, double* %1509
  %1511 = fmul double %1508, %1510
  store double %1511, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %1512 = add i64 %1044, -6424
  %1513 = inttoptr i64 %1512 to i32*
  %1514 = load i32, i32* %1513
  %1515 = sext i32 %1514 to i64
  %1516 = mul nsw i64 %1515, 1000
  %1517 = add i64 %1516, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %1518 = load i64, i64* %12, align 8
  %1519 = add i64 %1518, -6404
  %1520 = inttoptr i64 %1519 to i32*
  %1521 = load i32, i32* %1520
  %1522 = sext i32 %1521 to i64
  %1523 = mul nsw i64 %1522, 200
  %1524 = add i64 %1523, %1517
  %1525 = add i64 %1518, -6416
  %1526 = inttoptr i64 %1525 to i32*
  %1527 = load i32, i32* %1526
  %1528 = sext i32 %1527 to i64
  %1529 = mul nsw i64 %1528, 40
  %1530 = add i64 %1529, %1524
  %1531 = load i64, i64* %12, align 8
  %1532 = add i64 %1531, -6412
  %1533 = inttoptr i64 %1532 to i32*
  %1534 = load i32, i32* %1533
  %1535 = sext i32 %1534 to i64
  %1536 = shl nsw i64 %1535, 3
  %1537 = add i64 %1536, %1530
  %1538 = load double, double* %2419, align 1
  %1539 = inttoptr i64 %1537 to double*
  %1540 = load double, double* %1539
  %1541 = fmul double %1538, %1540
  store double %1541, double* %2419, align 1, !tbaa !1246
  %1542 = add i64 %1531, -1056
  %1543 = inttoptr i64 %1542 to double*
  store double %1541, double* %1543
  %1544 = add i64 %1531, -6264
  %1545 = load double, double* %32, align 1
  %1546 = inttoptr i64 %1544 to double*
  store double %1545, double* %1546
  %1547 = add i64 %1531, -6432
  %1548 = add i64 %2607, 115
  %1549 = inttoptr i64 %1547 to i32*
  store i32 0, i32* %1549
  %1550 = add i64 %1531, -6404
  %1551 = add i64 %1531, -6408
  %1552 = add i64 %1531, -6416
  br label %block_406158

block_406edd:                                     ; preds = %block_406ed0
  %1553 = add i64 %1587, -6416
  %1554 = add i64 %1602, 10
  %1555 = inttoptr i64 %1553 to i32*
  store i32 0, i32* %1555
  br label %block_406ee7

block_406932:                                     ; preds = %block_4063a9
  %1556 = add i64 %3035, 10
  %1557 = inttoptr i64 %3022 to i32*
  store i32 0, i32* %1557
  br label %block_40693c

block_4074d6:                                     ; preds = %block_4074c9
  %1558 = add i64 %1646, -6408
  %1559 = inttoptr i64 %1558 to i32*
  %1560 = load i32, i32* %1559
  %1561 = sext i32 %1560 to i64
  %1562 = mul nsw i64 %1561, 24
  %1563 = add i64 %1562, ptrtoint (%cbc_type* @cbc to i64)
  %1564 = sext i32 %1650 to i64
  store i64 %1564, i64* %7, align 8, !tbaa !1240
  %1565 = shl nsw i64 %1564, 2
  %1566 = add i64 %1565, %1563
  %1567 = inttoptr i64 %1566 to i32*
  %1568 = load i32, i32* %1567
  %1569 = icmp eq i32 %1568, 0
  %1570 = select i1 %1569, i64 41, i64 62
  %1571 = add i64 %1661, %1570
  br i1 %1569, label %block_4074ff, label %block_407514

block_407537:                                     ; preds = %block_407768, %block_40752d
  %1572 = phi i64 [ %1686, %block_40752d ], [ %3367, %block_407768 ]
  %1573 = phi %struct.Memory* [ %1647, %block_40752d ], [ %1476, %block_407768 ]
  %1574 = inttoptr i64 %1685 to i32*
  %1575 = load i32, i32* %1574
  %1576 = add i32 %1575, -5
  %1577 = lshr i32 %1576, 31
  %1578 = lshr i32 %1575, 31
  %1579 = xor i32 %1577, %1578
  %1580 = add nuw nsw i32 %1579, %1578
  %1581 = icmp eq i32 %1580, 2
  %1582 = icmp ne i32 %1577, 0
  %1583 = xor i1 %1582, %1581
  %1584 = select i1 %1583, i64 13, i64 586
  %1585 = add i64 %1572, %1584
  br i1 %1583, label %block_407544, label %block_407781

block_406ed0:                                     ; preds = %block_4074a6, %block_406ec6
  %1586 = phi i64 [ %1694, %block_406ec6 ], [ %1968, %block_4074a6 ]
  %1587 = phi i64 [ %481, %block_406ec6 ], [ %1490, %block_4074a6 ]
  %1588 = phi %struct.Memory* [ %482, %block_406ec6 ], [ %1491, %block_4074a6 ]
  %1589 = add i64 %1587, -6404
  %1590 = inttoptr i64 %1589 to i32*
  %1591 = load i32, i32* %1590
  %1592 = add i32 %1591, -5
  %1593 = lshr i32 %1592, 31
  %1594 = trunc i32 %1593 to i8
  %1595 = lshr i32 %1591, 31
  %1596 = xor i32 %1593, %1595
  %1597 = add nuw nsw i32 %1596, %1595
  %1598 = icmp eq i32 %1597, 2
  %1599 = icmp ne i8 %1594, 0
  %1600 = xor i1 %1599, %1598
  %1601 = select i1 %1600, i64 13, i64 1519
  %1602 = add i64 %1586, %1601
  br i1 %1600, label %block_406edd, label %block_4074bf

block_405ece:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15
  %1603 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %1604 = load i64, i64* %12, align 8
  %1605 = add i64 %1604, -6256
  %1606 = inttoptr i64 %1605 to double*
  %1607 = load double, double* %1606
  %1608 = add i64 %1604, -6464
  %1609 = inttoptr i64 %1608 to double*
  store double %1603, double* %1609
  %1610 = bitcast double %1607 to <2 x i32>
  %1611 = extractelement <2 x i32> %1610, i32 0
  store i32 %1611, i32* %185, align 1, !tbaa !1266
  %1612 = extractelement <2 x i32> %1610, i32 1
  store i32 %1612, i32* %187, align 1, !tbaa !1266
  %1613 = add i64 %3220, 32
  %1614 = load i64, i64* %11, align 8, !tbaa !1240
  %1615 = add i64 %1614, -8
  %1616 = inttoptr i64 %1615 to i64*
  store i64 %1613, i64* %1616
  %1617 = load double, double* %192, align 8, !alias.scope !1634, !noalias !1637
  %1618 = inttoptr i64 %1615 to i64*
  %1619 = load i64, i64* %1618
  %1620 = tail call double @sqrt(double %1617) #11
  %1621 = add i64 %1604, -1040
  %1622 = inttoptr i64 %1621 to double*
  %1623 = load double, double* %1622
  %1624 = fmul double %1620, %1623
  %1625 = add i64 %1619, 13
  %1626 = inttoptr i64 %1615 to i64*
  store i64 %1625, i64* %1626
  %1627 = inttoptr i64 %1615 to i64*
  %1628 = load i64, i64* %1627
  store i64 %1614, i64* %11, align 8, !alias.scope !1639, !noalias !1642
  %1629 = tail call double @cos(double %1624) #11
  %1630 = inttoptr i64 %1608 to double*
  %1631 = load double, double* %1630
  store double %1631, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %1632 = fadd double %1631, %1629
  store double %1632, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1633 = add i64 %1604, -1072
  %1634 = inttoptr i64 %1633 to double*
  store double %1632, double* %1634
  %1635 = add i64 %1628, 36
  br label %block_405f1f

block_4077b2:                                     ; preds = %block_4077a8, %block_40779a
  %1636 = phi i64 [ %181, %block_40779a ], [ %1674, %block_4077a8 ]
  %1637 = phi i64 [ %424, %block_40779a ], [ %1673, %block_4077a8 ]
  %1638 = phi %struct.Memory* [ %425, %block_40779a ], [ %1672, %block_4077a8 ]
  %1639 = add i64 %1637, -4
  %1640 = inttoptr i64 %1639 to i32*
  %1641 = load i32, i32* %1640
  %1642 = icmp eq i32 %1641, 0
  %1643 = select i1 %1642, i64 30, i64 10
  %1644 = add i64 %1636, %1643
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %10, align 8, !tbaa !1240
  br i1 %1642, label %block_4077d0, label %block_4077bc

block_4074c9:                                     ; preds = %block_407514, %block_4074bf
  %1645 = phi i64 [ %1676, %block_4074bf ], [ %3382, %block_407514 ]
  %1646 = phi i64 [ %1587, %block_4074bf ], [ %3376, %block_407514 ]
  %1647 = phi %struct.Memory* [ %1588, %block_4074bf ], [ %3375, %block_407514 ]
  %1648 = add i64 %1646, -6420
  %1649 = inttoptr i64 %1648 to i32*
  %1650 = load i32, i32* %1649
  %1651 = add i32 %1650, -6
  %1652 = lshr i32 %1651, 31
  %1653 = trunc i32 %1652 to i8
  %1654 = lshr i32 %1650, 31
  %1655 = xor i32 %1652, %1654
  %1656 = add nuw nsw i32 %1655, %1654
  %1657 = icmp eq i32 %1656, 2
  %1658 = icmp ne i8 %1653, 0
  %1659 = xor i1 %1658, %1657
  %1660 = select i1 %1659, i64 13, i64 100
  %1661 = add i64 %1645, %1660
  br i1 %1659, label %block_4074d6, label %block_40752d

block_406a76:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %1662 = load i64, i64* %12, align 8
  %1663 = add i64 %1662, -1072
  %1664 = add i64 %421, 11
  %1665 = load double, double* %32, align 1
  %1666 = inttoptr i64 %1663 to double*
  store double %1665, double* %1666
  br label %block_406a81

block_4077a8:                                     ; preds = %block_40779a
  store i64 4, i64* %10, align 8, !tbaa !1240
  %1667 = add i64 %181, -7720
  %1668 = add i64 %181, 10
  %1669 = load i64, i64* %11, align 8, !tbaa !1240
  %1670 = add i64 %1669, -8
  %1671 = inttoptr i64 %1670 to i64*
  store i64 %1668, i64* %1671
  store i64 %1670, i64* %11, align 8, !tbaa !1240
  %1672 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %1667, %struct.Memory* %425)
  %1673 = load i64, i64* %12, align 8
  %1674 = load i64, i64* %3, align 8
  br label %block_4077b2

block_4074bf:                                     ; preds = %block_406ed0
  %1675 = add i64 %1587, -6420
  %1676 = add i64 %1602, 10
  %1677 = inttoptr i64 %1675 to i32*
  store i32 0, i32* %1677
  br label %block_4074c9

block_407781:                                     ; preds = %block_407537
  %1678 = load i64, i64* %12, align 8
  %1679 = add i64 %1678, -6408
  %1680 = inttoptr i64 %1679 to i32*
  %1681 = load i32, i32* %1680
  %1682 = add i32 %1681, 1
  %1683 = inttoptr i64 %1679 to i32*
  store i32 %1682, i32* %1683
  %1684 = add i64 %1585, -7066
  br label %block_405be7

block_40752d:                                     ; preds = %block_4074c9
  %1685 = add i64 %1646, -6404
  %1686 = add i64 %1661, 10
  %1687 = inttoptr i64 %1685 to i32*
  store i32 0, i32* %1687
  %1688 = add i64 %1646, -6416
  %1689 = add i64 %1646, -6412
  %1690 = add i64 %1646, -1024
  %1691 = add i64 %1646, -6424
  %1692 = add i64 %1646, -6408
  %1693 = add i64 %1646, -1032
  br label %block_407537

block_406ec6:                                     ; preds = %block_40693c
  %1694 = add i64 %496, 10
  %1695 = inttoptr i64 %483 to i32*
  store i32 0, i32* %1695
  br label %block_406ed0

block_405cbb:                                     ; preds = %block_405cae
  %1696 = sext i32 %1937 to i64
  %1697 = shl nsw i64 %1696, 3
  %1698 = add i64 %1697, ptrtoint (%xfrac_type* @xfrac to i64)
  %1699 = inttoptr i64 %1698 to double*
  %1700 = load double, double* %1699
  %1701 = inttoptr i64 %426 to i32*
  %1702 = load i32, i32* %1701
  %1703 = sext i32 %1702 to i64
  %1704 = shl nsw i64 %1703, 6
  %1705 = add i64 %1704, ptrtoint (%yc_type* @yc to i64)
  %1706 = add i64 %1704, add (i64 ptrtoint (%yc_type* @yc to i64), i64 24)
  %1707 = inttoptr i64 %1706 to double*
  %1708 = load double, double* %1707
  store i64 %1705, i64* %8, align 8, !tbaa !1240
  %1709 = inttoptr i64 %1705 to double*
  %1710 = load double, double* %1709
  %1711 = fsub double %1708, %1710
  store double %1711, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %1712 = fmul double %1700, %1711
  store i64 %1704, i64* %7, align 8, !tbaa !1240
  %1713 = fadd double %1712, %1710
  store double %1713, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %1714 = add i64 %1972, %1697
  %1715 = inttoptr i64 %1714 to double*
  store double %1713, double* %1715
  %1716 = inttoptr i64 %1969 to i32*
  %1717 = load i32, i32* %1716
  %1718 = add i32 %1717, 1
  %1719 = inttoptr i64 %1969 to i32*
  store i32 %1718, i32* %1719
  %1720 = add i64 %1948, -13
  br label %block_405cae

block_4072b1:                                     ; preds = %block_407226
  %1721 = add i64 %118, -1024
  store i64 %1721, i64* %6, align 8, !tbaa !1240
  %1722 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 896) to double*)
  store double %1722, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %1723 = add i64 %118, -5104
  store i64 %1723, i64* %7, align 8, !tbaa !1240
  %1724 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %1724, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %1725 = add i64 %118, -4096
  store i64 %1725, i64* %8, align 8, !tbaa !1240
  %1726 = add i64 %118, -3088
  store i64 %1726, i64* %9, align 8, !tbaa !1240
  %1727 = add i64 %118, -2080
  store i64 %1727, i64* %10, align 8, !tbaa !1240
  %1728 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %1729 = inttoptr i64 %131 to double*
  %1730 = load double, double* %1729
  %1731 = fmul double %1728, %1730
  store double %1731, double* %2424, align 1, !tbaa !1246
  %1732 = add i64 %118, -6424
  %1733 = inttoptr i64 %1732 to i32*
  %1734 = load i32, i32* %1733
  %1735 = sext i32 %1734 to i64
  %1736 = mul nsw i64 %1735, 1000
  %1737 = add i64 %1736, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %1738 = load i64, i64* %12, align 8
  %1739 = add i64 %1738, -6404
  %1740 = inttoptr i64 %1739 to i32*
  %1741 = load i32, i32* %1740
  %1742 = sext i32 %1741 to i64
  %1743 = mul nsw i64 %1742, 200
  %1744 = add i64 %1743, %1737
  %1745 = add i64 %1738, -6416
  %1746 = inttoptr i64 %1745 to i32*
  %1747 = load i32, i32* %1746
  %1748 = sext i32 %1747 to i64
  %1749 = mul nsw i64 %1748, 40
  %1750 = add i64 %1749, %1744
  %1751 = load i64, i64* %12, align 8
  %1752 = add i64 %1751, -6412
  %1753 = inttoptr i64 %1752 to i32*
  %1754 = load i32, i32* %1753
  %1755 = sext i32 %1754 to i64
  %1756 = shl nsw i64 %1755, 3
  %1757 = add i64 %1756, %1750
  %1758 = load double, double* %2424, align 1
  %1759 = inttoptr i64 %1757 to double*
  %1760 = load double, double* %1759
  %1761 = fmul double %1758, %1760
  %1762 = add i64 %1751, -1064
  %1763 = inttoptr i64 %1762 to double*
  store double %1761, double* %1763
  %1764 = add i64 %1751, -1048
  %1765 = inttoptr i64 %1764 to double*
  %1766 = load double, double* %1765
  %1767 = add i64 %1751, -1056
  %1768 = inttoptr i64 %1767 to double*
  %1769 = load double, double* %1768
  %1770 = fadd double %1766, %1769
  %1771 = inttoptr i64 %1762 to double*
  %1772 = load double, double* %1771
  %1773 = fadd double %1770, %1772
  %1774 = add i64 %1751, -1072
  %1775 = inttoptr i64 %1774 to double*
  %1776 = load double, double* %1775
  %1777 = fadd double %1773, %1776
  store double %1777, double* %2424, align 1, !tbaa !1246
  %1778 = add i64 %1751, -6404
  %1779 = inttoptr i64 %1778 to i32*
  %1780 = load i32, i32* %1779
  %1781 = sext i32 %1780 to i64
  %1782 = mul nsw i64 %1781, 200
  %1783 = load i64, i64* %7, align 8
  %1784 = add i64 %1782, %1783
  %1785 = load i64, i64* %12, align 8
  %1786 = add i64 %1785, -6416
  %1787 = inttoptr i64 %1786 to i32*
  %1788 = load i32, i32* %1787
  %1789 = sext i32 %1788 to i64
  %1790 = mul nsw i64 %1789, 40
  %1791 = add i64 %1790, %1784
  store i64 %1791, i64* %14, align 8, !tbaa !1240
  %1792 = add i64 %1785, -6412
  %1793 = inttoptr i64 %1792 to i32*
  %1794 = load i32, i32* %1793
  %1795 = sext i32 %1794 to i64
  %1796 = shl nsw i64 %1795, 3
  %1797 = add i64 %1796, %1791
  %1798 = load double, double* %2424, align 1
  %1799 = inttoptr i64 %1797 to double*
  store double %1798, double* %1799
  %1800 = add i64 %1785, -6404
  %1801 = inttoptr i64 %1800 to i32*
  %1802 = load i32, i32* %1801
  %1803 = sext i32 %1802 to i64
  %1804 = mul nsw i64 %1803, 200
  %1805 = load i64, i64* %10, align 8
  %1806 = add i64 %1804, %1805
  %1807 = load i64, i64* %12, align 8
  %1808 = add i64 %1807, -6416
  %1809 = inttoptr i64 %1808 to i32*
  %1810 = load i32, i32* %1809
  %1811 = sext i32 %1810 to i64
  %1812 = mul nsw i64 %1811, 40
  %1813 = add i64 %1812, %1806
  %1814 = add i64 %1807, -6412
  %1815 = inttoptr i64 %1814 to i32*
  %1816 = load i32, i32* %1815
  %1817 = sext i32 %1816 to i64
  store i64 %1817, i64* %13, align 8, !tbaa !1240
  %1818 = shl nsw i64 %1817, 3
  %1819 = add i64 %1818, %1813
  %1820 = inttoptr i64 %1819 to double*
  %1821 = load double, double* %1820
  store double %1821, double* %2424, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2426, align 1, !tbaa !1246
  %1822 = add i64 %1807, -6404
  %1823 = inttoptr i64 %1822 to i32*
  %1824 = load i32, i32* %1823
  %1825 = sext i32 %1824 to i64
  %1826 = mul nsw i64 %1825, 200
  %1827 = load i64, i64* %9, align 8
  %1828 = add i64 %1826, %1827
  %1829 = load i64, i64* %12, align 8
  %1830 = add i64 %1829, -6416
  %1831 = inttoptr i64 %1830 to i32*
  %1832 = load i32, i32* %1831
  %1833 = sext i32 %1832 to i64
  %1834 = mul nsw i64 %1833, 40
  %1835 = add i64 %1834, %1828
  %1836 = add i64 %1829, -6412
  %1837 = inttoptr i64 %1836 to i32*
  %1838 = load i32, i32* %1837
  %1839 = sext i32 %1838 to i64
  store i64 %1839, i64* %10, align 8, !tbaa !1240
  %1840 = load <2 x i32>, <2 x i32>* %2463, align 1
  %1841 = load <2 x i32>, <2 x i32>* %2464, align 1
  %1842 = extractelement <2 x i32> %1840, i32 0
  store i32 %1842, i32* %2465, align 1, !tbaa !1266
  %1843 = extractelement <2 x i32> %1840, i32 1
  store i32 %1843, i32* %2467, align 1, !tbaa !1266
  %1844 = extractelement <2 x i32> %1841, i32 0
  store i32 %1844, i32* %2469, align 1, !tbaa !1266
  %1845 = extractelement <2 x i32> %1841, i32 1
  store i32 %1845, i32* %2471, align 1, !tbaa !1266
  %1846 = shl nsw i64 %1839, 3
  %1847 = add i64 %1846, %1835
  %1848 = load double, double* %2472, align 1
  %1849 = inttoptr i64 %1847 to double*
  %1850 = load double, double* %1849
  %1851 = fmul double %1848, %1850
  store double %1851, double* %2472, align 1, !tbaa !1246
  %1852 = load double, double* %2424, align 1
  %1853 = fadd double %1852, %1851
  store double %1853, double* %2424, align 1, !tbaa !1246
  %1854 = load i64, i64* %12, align 8
  %1855 = add i64 %1854, -6404
  %1856 = inttoptr i64 %1855 to i32*
  %1857 = load i32, i32* %1856
  %1858 = sext i32 %1857 to i64
  %1859 = mul nsw i64 %1858, 200
  %1860 = load i64, i64* %8, align 8
  %1861 = add i64 %1859, %1860
  %1862 = add i64 %1854, -6416
  %1863 = inttoptr i64 %1862 to i32*
  %1864 = load i32, i32* %1863
  %1865 = sext i32 %1864 to i64
  %1866 = mul nsw i64 %1865, 40
  %1867 = add i64 %1866, %1861
  %1868 = load i64, i64* %12, align 8
  %1869 = add i64 %1868, -6412
  %1870 = inttoptr i64 %1869 to i32*
  %1871 = load i32, i32* %1870
  %1872 = sext i32 %1871 to i64
  store i64 %1872, i64* %9, align 8, !tbaa !1240
  %1873 = shl nsw i64 %1872, 3
  %1874 = add i64 %1873, %1867
  %1875 = load double, double* %2419, align 1
  %1876 = inttoptr i64 %1874 to double*
  %1877 = load double, double* %1876
  %1878 = fmul double %1875, %1877
  store double %1878, double* %2419, align 1, !tbaa !1246
  %1879 = load double, double* %2424, align 1
  %1880 = fadd double %1879, %1878
  store double %1880, double* %2424, align 1, !tbaa !1246
  %1881 = add i64 %1868, -6404
  %1882 = inttoptr i64 %1881 to i32*
  %1883 = load i32, i32* %1882
  %1884 = sext i32 %1883 to i64
  %1885 = mul nsw i64 %1884, 200
  %1886 = load i64, i64* %7, align 8
  %1887 = add i64 %1885, %1886
  %1888 = add i64 %1868, -6416
  %1889 = inttoptr i64 %1888 to i32*
  %1890 = load i32, i32* %1889
  %1891 = sext i32 %1890 to i64
  %1892 = mul nsw i64 %1891, 40
  %1893 = add i64 %1892, %1887
  %1894 = load i64, i64* %12, align 8
  %1895 = add i64 %1894, -6412
  %1896 = inttoptr i64 %1895 to i32*
  %1897 = load i32, i32* %1896
  %1898 = sext i32 %1897 to i64
  store i64 %1898, i64* %8, align 8, !tbaa !1240
  %1899 = shl nsw i64 %1898, 3
  %1900 = add i64 %1899, %1893
  %1901 = load double, double* %2424, align 1
  %1902 = inttoptr i64 %1900 to double*
  %1903 = load double, double* %1902
  %1904 = fadd double %1901, %1903
  store double %1904, double* %2424, align 1, !tbaa !1246
  %1905 = load double, double* %32, align 1
  %1906 = fmul double %1905, %1904
  store double %1906, double* %32, align 1, !tbaa !1246
  %1907 = add i64 %1894, -6404
  %1908 = inttoptr i64 %1907 to i32*
  %1909 = load i32, i32* %1908
  %1910 = sext i32 %1909 to i64
  %1911 = mul nsw i64 %1910, 200
  %1912 = load i64, i64* %6, align 8
  %1913 = add i64 %1911, %1912
  %1914 = add i64 %1894, -6416
  %1915 = inttoptr i64 %1914 to i32*
  %1916 = load i32, i32* %1915
  %1917 = sext i32 %1916 to i64
  %1918 = mul nsw i64 %1917, 40
  %1919 = add i64 %1918, %1913
  %1920 = load i64, i64* %12, align 8
  %1921 = add i64 %1920, -6412
  %1922 = inttoptr i64 %1921 to i32*
  %1923 = load i32, i32* %1922
  %1924 = sext i32 %1923 to i64
  store i64 %1924, i64* %7, align 8, !tbaa !1240
  %1925 = shl nsw i64 %1924, 3
  %1926 = add i64 %1925, %1919
  %1927 = load double, double* %32, align 1
  %1928 = inttoptr i64 %1926 to double*
  store double %1927, double* %1928
  %1929 = inttoptr i64 %1921 to i32*
  %1930 = load i32, i32* %1929
  %1931 = add i32 %1930, 1
  %1932 = inttoptr i64 %1921 to i32*
  store i32 %1931, i32* %1932
  %1933 = add i64 %2781, -947
  br label %block_406efe

block_405cae:                                     ; preds = %block_405ca4, %block_405cbb
  %1934 = phi i64 [ %1970, %block_405ca4 ], [ %1720, %block_405cbb ]
  %1935 = phi %struct.Memory* [ %3037, %block_405ca4 ], [ %1935, %block_405cbb ]
  %1936 = inttoptr i64 %1969 to i32*
  %1937 = load i32, i32* %1936
  %1938 = add i32 %1937, -5
  %1939 = lshr i32 %1938, 31
  %1940 = trunc i32 %1939 to i8
  %1941 = lshr i32 %1937, 31
  %1942 = xor i32 %1939, %1941
  %1943 = add nuw nsw i32 %1942, %1941
  %1944 = icmp eq i32 %1943, 2
  %1945 = icmp ne i8 %1940, 0
  %1946 = xor i1 %1945, %1944
  %1947 = select i1 %1946, i64 13, i64 140
  %1948 = add i64 %1934, %1947
  br i1 %1946, label %block_405cbb, label %block_405d3a

block_407128:                                     ; preds = %block_4070b5, %block_407135
  %1949 = phi i64 [ %3091, %block_4070b5 ], [ %826, %block_407135 ]
  %1950 = phi %struct.Memory* [ %2755, %block_4070b5 ], [ %1950, %block_407135 ]
  %1951 = inttoptr i64 %3090 to i32*
  %1952 = load i32, i32* %1951
  %1953 = add i32 %1952, -5
  %1954 = lshr i32 %1953, 31
  %1955 = lshr i32 %1952, 31
  %1956 = xor i32 %1954, %1955
  %1957 = add nuw nsw i32 %1956, %1955
  %1958 = icmp eq i32 %1957, 2
  %1959 = icmp ne i32 %1954, 0
  %1960 = xor i1 %1959, %1958
  %1961 = select i1 %1960, i64 13, i64 139
  %1962 = add i64 %1949, %1961
  br i1 %1960, label %block_407135, label %block_4071b3

block_4074a6:                                     ; preds = %block_406ee7
  %1963 = add i64 %1490, -6404
  %1964 = inttoptr i64 %1963 to i32*
  %1965 = load i32, i32* %1964
  %1966 = add i32 %1965, 1
  %1967 = inttoptr i64 %1963 to i32*
  store i32 %1966, i32* %1967
  %1968 = add i64 %1505, -1494
  br label %block_406ed0

block_405ca4:                                     ; preds = %block_405c18
  %1969 = add i64 %424, -6416
  %1970 = add i64 %3050, 10
  %1971 = inttoptr i64 %1969 to i32*
  store i32 0, i32* %1971
  %1972 = add i64 %424, -6352
  br label %block_405cae

block_406aa3:                                     ; preds = %block_406a96
  %1973 = inttoptr i64 %2394 to double*
  %1974 = load double, double* %1973
  %1975 = sext i32 %2203 to i64
  %1976 = mul nsw i64 %1975, 40
  %1977 = add i64 %1976, ptrtoint (%dxm1_type* @dxm1 to i64)
  %1978 = inttoptr i64 %2401 to i32*
  %1979 = load i32, i32* %1978
  %1980 = sext i32 %1979 to i64
  %1981 = shl nsw i64 %1980, 3
  %1982 = add i64 %1981, %1977
  %1983 = inttoptr i64 %1982 to double*
  %1984 = load double, double* %1983
  %1985 = inttoptr i64 %2402 to i32*
  %1986 = load i32, i32* %1985
  %1987 = sext i32 %1986 to i64
  %1988 = mul nsw i64 %1987, 200
  %1989 = add i64 %1988, %2400
  %1990 = inttoptr i64 %2403 to i32*
  %1991 = load i32, i32* %1990
  %1992 = sext i32 %1991 to i64
  %1993 = mul nsw i64 %1992, 40
  %1994 = add i64 %1993, %1989
  %1995 = shl nsw i64 %1975, 3
  %1996 = add i64 %1995, %1994
  %1997 = inttoptr i64 %1996 to double*
  %1998 = load double, double* %1997
  %1999 = fmul double %1984, %1998
  store double %1999, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2000 = fadd double %1974, %1999
  store double %2000, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2001 = inttoptr i64 %2394 to double*
  store double %2000, double* %2001
  %2002 = inttoptr i64 %2397 to i32*
  %2003 = load i32, i32* %2002
  %2004 = add i32 %2003, 1
  %2005 = inttoptr i64 %2397 to i32*
  store i32 %2004, i32* %2005
  %2006 = add i64 %2213, -13
  br label %block_406a96

block_4063e4:                                     ; preds = %block_4063d7
  %2007 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %2007, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2008 = sext i32 %2219 to i64
  %2009 = shl nsw i64 %2008, 3
  %2010 = add i64 %2215, -6304
  %2011 = add i64 %2010, %2009
  %2012 = inttoptr i64 %2011 to double*
  %2013 = load double, double* %2012
  %2014 = add i64 %2215, -6168
  %2015 = inttoptr i64 %2014 to double*
  %2016 = load double, double* %2015
  %2017 = fsub double %2013, %2016
  store double %2017, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2018 = add i64 %2244, 37
  %2019 = load i64, i64* %11, align 8, !tbaa !1240
  %2020 = add i64 %2019, -8
  %2021 = inttoptr i64 %2020 to i64*
  store i64 %2018, i64* %2021
  %2022 = load i64, i64* %2412, align 8, !alias.scope !1644, !noalias !1647
  %2023 = load i64, i64* %9, align 8, !alias.scope !1644, !noalias !1647
  %2024 = inttoptr i64 %2020 to i64*
  %2025 = load i64, i64* %2024
  store i64 %2025, i64* %3, align 8, !alias.scope !1644, !noalias !1647
  store i64 %2019, i64* %11, align 8, !alias.scope !1644, !noalias !1647
  %2026 = tail call i64 @pow(i64 %2022, i64 %2023), !noalias !1644
  %2027 = load i64, i64* %3, align 8
  %2028 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %2028, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2029 = load i64, i64* %12, align 8
  %2030 = add i64 %2029, -6416
  %2031 = inttoptr i64 %2030 to i32*
  %2032 = load i32, i32* %2031
  %2033 = sext i32 %2032 to i64
  %2034 = shl nsw i64 %2033, 3
  %2035 = add i64 %2029, -6352
  %2036 = add i64 %2035, %2034
  %2037 = inttoptr i64 %2036 to double*
  %2038 = load double, double* %2037
  %2039 = add i64 %2029, -6200
  %2040 = inttoptr i64 %2039 to double*
  %2041 = load double, double* %2040
  %2042 = fsub double %2038, %2041
  store double %2042, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %2043 = add i64 %2029, -6472
  %2044 = load double, double* %32, align 1
  %2045 = inttoptr i64 %2043 to double*
  store double %2044, double* %2045
  %2046 = bitcast double %2042 to <2 x i32>
  %2047 = extractelement <2 x i32> %2046, i32 0
  store i32 %2047, i32* %185, align 1, !tbaa !1266
  %2048 = extractelement <2 x i32> %2046, i32 1
  store i32 %2048, i32* %187, align 1, !tbaa !1266
  store i32 0, i32* %188, align 1, !tbaa !1266
  store i32 0, i32* %190, align 1, !tbaa !1266
  %2049 = add i64 %2027, 48
  %2050 = load i64, i64* %11, align 8, !tbaa !1240
  %2051 = add i64 %2050, -8
  %2052 = inttoptr i64 %2051 to i64*
  store i64 %2049, i64* %2052
  %2053 = load i64, i64* %2412, align 8, !alias.scope !1649, !noalias !1652
  %2054 = load i64, i64* %9, align 8, !alias.scope !1649, !noalias !1652
  %2055 = inttoptr i64 %2051 to i64*
  %2056 = load i64, i64* %2055
  store i64 %2056, i64* %3, align 8, !alias.scope !1649, !noalias !1652
  store i64 %2050, i64* %11, align 8, !alias.scope !1649, !noalias !1652
  %2057 = tail call i64 @pow(i64 %2053, i64 %2054), !noalias !1649
  %2058 = load i64, i64* %3, align 8
  %2059 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %2059, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2060 = load i64, i64* %12, align 8
  %2061 = add i64 %2060, -6472
  %2062 = inttoptr i64 %2061 to double*
  %2063 = load double, double* %2062
  %2064 = load double, double* %32, align 1
  %2065 = fadd double %2063, %2064
  store double %2065, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %2066 = add i64 %2060, -6404
  %2067 = inttoptr i64 %2066 to i32*
  %2068 = load i32, i32* %2067
  %2069 = sext i32 %2068 to i64
  %2070 = shl nsw i64 %2069, 3
  %2071 = add i64 %2060, -6400
  %2072 = add i64 %2071, %2070
  %2073 = inttoptr i64 %2072 to double*
  %2074 = load double, double* %2073
  %2075 = add i64 %2060, -6232
  %2076 = inttoptr i64 %2075 to double*
  %2077 = load double, double* %2076
  %2078 = fsub double %2074, %2077
  store double %2078, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2079 = add i64 %2060, -6480
  %2080 = inttoptr i64 %2079 to double*
  store double %2065, double* %2080
  %2081 = add i64 %2058, 57
  %2082 = load i64, i64* %11, align 8, !tbaa !1240
  %2083 = add i64 %2082, -8
  %2084 = inttoptr i64 %2083 to i64*
  store i64 %2081, i64* %2084
  %2085 = load i64, i64* %2412, align 8, !alias.scope !1654, !noalias !1657
  %2086 = load i64, i64* %9, align 8, !alias.scope !1654, !noalias !1657
  %2087 = inttoptr i64 %2083 to i64*
  %2088 = load i64, i64* %2087
  store i64 %2088, i64* %3, align 8, !alias.scope !1654, !noalias !1657
  store i64 %2082, i64* %11, align 8, !alias.scope !1654, !noalias !1657
  %2089 = tail call i64 @pow(i64 %2085, i64 %2086), !noalias !1654
  store i64 %2089, i64* %2411, align 8, !alias.scope !1654, !noalias !1657
  %2090 = load i64, i64* %12, align 8
  %2091 = add i64 %2090, -6480
  %2092 = load i64, i64* %3, align 8
  %2093 = inttoptr i64 %2091 to double*
  %2094 = load double, double* %2093
  %2095 = load double, double* %32, align 1
  %2096 = fadd double %2094, %2095
  %2097 = add i64 %2090, -6256
  %2098 = inttoptr i64 %2097 to double*
  store double %2096, double* %2098
  %2099 = inttoptr i64 %2097 to double*
  %2100 = load double, double* %2099
  store double %2100, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %2101 = add i64 %2090, -16
  %2102 = inttoptr i64 %2101 to double*
  %2103 = load double, double* %2102
  store double %2103, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2104 = add i64 %2092, 37
  store i64 %2104, i64* %3, align 8
  %2105 = fcmp uno double %2103, %2100
  br i1 %2105, label %2106, label %2117

; <label>:2106:                                   ; preds = %block_4063e4
  %2107 = fadd double %2103, %2100
  %2108 = bitcast double %2107 to i64
  %2109 = and i64 %2108, 9221120237041090560
  %2110 = icmp eq i64 %2109, 9218868437227405312
  %2111 = and i64 %2108, 2251799813685247
  %2112 = icmp ne i64 %2111, 0
  %2113 = and i1 %2110, %2112
  br i1 %2113, label %2114, label %2123

; <label>:2114:                                   ; preds = %2106
  %2115 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2104, %struct.Memory* %2216) #14
  %2116 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit70

; <label>:2117:                                   ; preds = %block_4063e4
  %2118 = fcmp ogt double %2103, %2100
  br i1 %2118, label %2123, label %2119

; <label>:2119:                                   ; preds = %2117
  %2120 = fcmp olt double %2103, %2100
  br i1 %2120, label %2123, label %2121

; <label>:2121:                                   ; preds = %2119
  %2122 = fcmp oeq double %2103, %2100
  br i1 %2122, label %2123, label %2125

; <label>:2123:                                   ; preds = %2121, %2119, %2117, %2106
  %2124 = phi i8 [ 0, %2117 ], [ 1, %2119 ], [ 0, %2121 ], [ 1, %2106 ]
  store i8 %2124, i8* %24, align 1, !tbaa !1463
  br label %2125

; <label>:2125:                                   ; preds = %2123, %2121
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit70

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit70: ; preds = %2125, %2114
  %2126 = phi i64 [ %2116, %2114 ], [ %2104, %2125 ]
  %2127 = phi %struct.Memory* [ %2115, %2114 ], [ %2216, %2125 ]
  %2128 = load i8, i8* %24, align 1, !tbaa !1248
  %2129 = icmp ne i8 %2128, 0
  %2130 = select i1 %2129, i64 76, i64 6
  %2131 = add i64 %2126, %2130
  %2132 = icmp eq i8 %2128, 1
  br i1 %2132, label %block_4064e3, label %block_40649d

block_406c9f:                                     ; preds = %block_406c92
  %2133 = inttoptr i64 %3010 to double*
  %2134 = load double, double* %2133
  %2135 = sext i32 %2248 to i64
  %2136 = mul nsw i64 %2135, 40
  %2137 = add i64 %2136, ptrtoint (%dxm1_type* @dxm1 to i64)
  %2138 = inttoptr i64 %3017 to i32*
  %2139 = load i32, i32* %2138
  %2140 = sext i32 %2139 to i64
  %2141 = shl nsw i64 %2140, 3
  %2142 = add i64 %2141, %2137
  %2143 = inttoptr i64 %2142 to double*
  %2144 = load double, double* %2143
  %2145 = mul nsw i64 %2135, 200
  %2146 = add i64 %2145, %3016
  %2147 = inttoptr i64 %3018 to i32*
  %2148 = load i32, i32* %2147
  %2149 = sext i32 %2148 to i64
  %2150 = mul nsw i64 %2149, 40
  %2151 = add i64 %2150, %2146
  %2152 = inttoptr i64 %2998 to i32*
  %2153 = load i32, i32* %2152
  %2154 = sext i32 %2153 to i64
  %2155 = shl nsw i64 %2154, 3
  %2156 = add i64 %2155, %2151
  %2157 = inttoptr i64 %2156 to double*
  %2158 = load double, double* %2157
  %2159 = fmul double %2144, %2158
  store double %2159, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2160 = fadd double %2134, %2159
  store double %2160, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2161 = inttoptr i64 %3010 to double*
  store double %2160, double* %2161
  %2162 = inttoptr i64 %3013 to i32*
  %2163 = load i32, i32* %2162
  %2164 = add i32 %2163, 1
  %2165 = inttoptr i64 %3013 to i32*
  store i32 %2164, i32* %2165
  %2166 = add i64 %2258, -13
  br label %block_406c92

block_40649d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit70
  %2167 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %2168 = load i64, i64* %12, align 8
  %2169 = add i64 %2168, -6256
  %2170 = inttoptr i64 %2169 to double*
  %2171 = load double, double* %2170
  %2172 = add i64 %2168, -6488
  %2173 = inttoptr i64 %2172 to double*
  store double %2167, double* %2173
  %2174 = bitcast double %2171 to <2 x i32>
  %2175 = extractelement <2 x i32> %2174, i32 0
  store i32 %2175, i32* %185, align 1, !tbaa !1266
  %2176 = extractelement <2 x i32> %2174, i32 1
  store i32 %2176, i32* %187, align 1, !tbaa !1266
  %2177 = add i64 %2131, 32
  %2178 = load i64, i64* %11, align 8, !tbaa !1240
  %2179 = add i64 %2178, -8
  %2180 = inttoptr i64 %2179 to i64*
  store i64 %2177, i64* %2180
  %2181 = load double, double* %192, align 8, !alias.scope !1659, !noalias !1662
  %2182 = inttoptr i64 %2179 to i64*
  %2183 = load i64, i64* %2182
  %2184 = tail call double @sqrt(double %2181) #11
  %2185 = add i64 %2168, -1040
  %2186 = inttoptr i64 %2185 to double*
  %2187 = load double, double* %2186
  %2188 = fmul double %2184, %2187
  %2189 = add i64 %2183, 13
  %2190 = inttoptr i64 %2179 to i64*
  store i64 %2189, i64* %2190
  %2191 = inttoptr i64 %2179 to i64*
  %2192 = load i64, i64* %2191
  store i64 %2178, i64* %11, align 8, !alias.scope !1664, !noalias !1667
  %2193 = tail call double @cos(double %2188) #11
  %2194 = inttoptr i64 %2172 to double*
  %2195 = load double, double* %2194
  store double %2195, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2196 = fadd double %2195, %2193
  store double %2196, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2197 = add i64 %2168, -1072
  %2198 = inttoptr i64 %2197 to double*
  store double %2196, double* %2198
  %2199 = add i64 %2192, 36
  br label %block_4064ee

block_406a96:                                     ; preds = %block_406a81, %block_406aa3
  %2200 = phi i64 [ %2398, %block_406a81 ], [ %2006, %block_406aa3 ]
  %2201 = phi %struct.Memory* [ %2393, %block_406a81 ], [ %2201, %block_406aa3 ]
  %2202 = inttoptr i64 %2397 to i32*
  %2203 = load i32, i32* %2202
  %2204 = add i32 %2203, -5
  %2205 = lshr i32 %2204, 31
  %2206 = lshr i32 %2203, 31
  %2207 = xor i32 %2205, %2206
  %2208 = add nuw nsw i32 %2207, %2206
  %2209 = icmp eq i32 %2208, 2
  %2210 = icmp ne i32 %2205, 0
  %2211 = xor i1 %2210, %2209
  %2212 = select i1 %2211, i64 13, i64 139
  %2213 = add i64 %2200, %2212
  br i1 %2211, label %block_406aa3, label %block_406b21

block_4063d7:                                     ; preds = %block_4063cd, %block_40678a
  %2214 = phi i64 [ %862, %block_4063cd ], [ %680, %block_40678a ]
  %2215 = phi i64 [ %71, %block_4063cd ], [ %667, %block_40678a ]
  %2216 = phi %struct.Memory* [ %72, %block_4063cd ], [ %1412, %block_40678a ]
  %2217 = add i64 %2215, -6412
  %2218 = inttoptr i64 %2217 to i32*
  %2219 = load i32, i32* %2218
  %2220 = add i32 %2219, -5
  %2221 = icmp ult i32 %2219, 5
  %2222 = zext i1 %2221 to i8
  store i8 %2222, i8* %24, align 1, !tbaa !1248
  %2223 = and i32 %2220, 255
  %2224 = tail call i32 @llvm.ctpop.i32(i32 %2223) #11
  %2225 = trunc i32 %2224 to i8
  %2226 = and i8 %2225, 1
  %2227 = xor i8 %2226, 1
  store i8 %2227, i8* %25, align 1, !tbaa !1261
  %2228 = xor i32 %2220, %2219
  %2229 = lshr i32 %2228, 4
  %2230 = trunc i32 %2229 to i8
  %2231 = and i8 %2230, 1
  store i8 %2231, i8* %26, align 1, !tbaa !1262
  %2232 = icmp eq i32 %2220, 0
  %2233 = zext i1 %2232 to i8
  store i8 %2233, i8* %27, align 1, !tbaa !1263
  %2234 = lshr i32 %2220, 31
  %2235 = trunc i32 %2234 to i8
  store i8 %2235, i8* %28, align 1, !tbaa !1264
  %2236 = lshr i32 %2219, 31
  %2237 = xor i32 %2234, %2236
  %2238 = add nuw nsw i32 %2237, %2236
  %2239 = icmp eq i32 %2238, 2
  %2240 = zext i1 %2239 to i8
  store i8 %2240, i8* %29, align 1, !tbaa !1265
  %2241 = icmp ne i8 %2235, 0
  %2242 = xor i1 %2241, %2239
  %2243 = select i1 %2242, i64 13, i64 1321
  %2244 = add i64 %2214, %2243
  br i1 %2242, label %block_4063e4, label %block_406900

block_406c92:                                     ; preds = %block_406c1f, %block_406c9f
  %2245 = phi i64 [ %3014, %block_406c1f ], [ %2166, %block_406c9f ]
  %2246 = phi %struct.Memory* [ %194, %block_406c1f ], [ %2246, %block_406c9f ]
  %2247 = inttoptr i64 %3013 to i32*
  %2248 = load i32, i32* %2247
  %2249 = add i32 %2248, -5
  %2250 = lshr i32 %2249, 31
  %2251 = lshr i32 %2248, 31
  %2252 = xor i32 %2250, %2251
  %2253 = add nuw nsw i32 %2252, %2251
  %2254 = icmp eq i32 %2253, 2
  %2255 = icmp ne i32 %2250, 0
  %2256 = xor i1 %2255, %2254
  %2257 = select i1 %2256, i64 13, i64 139
  %2258 = add i64 %2245, %2257
  br i1 %2256, label %block_406c9f, label %block_406d1d

block_40636d:                                     ; preds = %block_405e08
  %2259 = add i64 %3314, -6416
  %2260 = inttoptr i64 %2259 to i32*
  %2261 = load i32, i32* %2260
  %2262 = add i32 %2261, 1
  %2263 = inttoptr i64 %2259 to i32*
  store i32 %2262, i32* %2263
  %2264 = add i64 %3343, -1404
  br label %block_405df1

block_405dda:                                     ; preds = %block_405dd0, %block_406386
  %2265 = phi i64 [ %3344, %block_405dd0 ], [ %847, %block_406386 ]
  %2266 = phi i64 [ %424, %block_405dd0 ], [ %1372, %block_406386 ]
  %2267 = phi %struct.Memory* [ %685, %block_405dd0 ], [ %1373, %block_406386 ]
  %2268 = add i64 %2266, -6404
  %2269 = inttoptr i64 %2268 to i32*
  %2270 = load i32, i32* %2269
  %2271 = add i32 %2270, -5
  %2272 = lshr i32 %2271, 31
  %2273 = trunc i32 %2272 to i8
  %2274 = lshr i32 %2270, 31
  %2275 = xor i32 %2272, %2274
  %2276 = add nuw nsw i32 %2275, %2274
  %2277 = icmp eq i32 %2276, 2
  %2278 = icmp ne i8 %2273, 0
  %2279 = xor i1 %2278, %2277
  %2280 = select i1 %2279, i64 13, i64 1477
  %2281 = add i64 %2265, %2280
  br i1 %2279, label %block_405de7, label %block_40639f

block_406158:                                     ; preds = %block_406165, %block_4060e5
  %2282 = phi i64 [ %1548, %block_4060e5 ], [ %2580, %block_406165 ]
  %2283 = phi %struct.Memory* [ %2595, %block_4060e5 ], [ %2283, %block_406165 ]
  %2284 = inttoptr i64 %1547 to i32*
  %2285 = load i32, i32* %2284
  %2286 = add i32 %2285, -5
  %2287 = lshr i32 %2286, 31
  %2288 = lshr i32 %2285, 31
  %2289 = xor i32 %2287, %2288
  %2290 = add nuw nsw i32 %2289, %2288
  %2291 = icmp eq i32 %2290, 2
  %2292 = icmp ne i32 %2287, 0
  %2293 = xor i1 %2292, %2291
  %2294 = select i1 %2293, i64 13, i64 159
  %2295 = add i64 %2282, %2294
  br i1 %2293, label %block_406165, label %block_4061f7

block_40748d:                                     ; preds = %block_406efe
  %2296 = add i64 %1440, -6416
  %2297 = inttoptr i64 %2296 to i32*
  %2298 = load i32, i32* %2297
  %2299 = add i32 %2298, 1
  %2300 = inttoptr i64 %2296 to i32*
  store i32 %2299, i32* %2300
  %2301 = add i64 %1469, -1446
  br label %block_406ee7

block_40668c:                                     ; preds = %block_406601
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2302 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %2303 = inttoptr i64 %243 to double*
  %2304 = load double, double* %2303
  %2305 = fmul double %2302, %2304
  store double %2305, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2306 = add i64 %230, -6424
  %2307 = inttoptr i64 %2306 to i32*
  %2308 = load i32, i32* %2307
  %2309 = sext i32 %2308 to i64
  %2310 = mul nsw i64 %2309, 1000
  %2311 = add i64 %2310, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %2312 = load i64, i64* %12, align 8
  %2313 = add i64 %2312, -6404
  %2314 = inttoptr i64 %2313 to i32*
  %2315 = load i32, i32* %2314
  %2316 = sext i32 %2315 to i64
  %2317 = mul nsw i64 %2316, 200
  %2318 = add i64 %2317, %2311
  %2319 = add i64 %2312, -6416
  %2320 = inttoptr i64 %2319 to i32*
  %2321 = load i32, i32* %2320
  %2322 = sext i32 %2321 to i64
  %2323 = mul nsw i64 %2322, 40
  %2324 = add i64 %2323, %2318
  %2325 = load i64, i64* %12, align 8
  %2326 = add i64 %2325, -6412
  %2327 = inttoptr i64 %2326 to i32*
  %2328 = load i32, i32* %2327
  %2329 = sext i32 %2328 to i64
  %2330 = shl nsw i64 %2329, 3
  %2331 = add i64 %2330, %2324
  %2332 = load double, double* %2419, align 1
  %2333 = inttoptr i64 %2331 to double*
  %2334 = load double, double* %2333
  %2335 = fmul double %2332, %2334
  store double %2335, double* %2419, align 1, !tbaa !1246
  %2336 = add i64 %2325, -1056
  %2337 = inttoptr i64 %2336 to double*
  store double %2335, double* %2337
  %2338 = add i64 %2325, -6264
  %2339 = load double, double* %32, align 1
  %2340 = inttoptr i64 %2338 to double*
  store double %2339, double* %2340
  %2341 = add i64 %2325, -6432
  %2342 = add i64 %3396, 115
  %2343 = inttoptr i64 %2341 to i32*
  store i32 0, i32* %2343
  %2344 = add i64 %2325, -6112
  %2345 = add i64 %2325, -6404
  %2346 = add i64 %2325, -6416
  br label %block_4066ff

block_405f34:                                     ; preds = %block_405f1f, %block_405f41
  %2347 = phi i64 [ %855, %block_405f1f ], [ %737, %block_405f41 ]
  %2348 = phi %struct.Memory* [ %850, %block_405f1f ], [ %2348, %block_405f41 ]
  %2349 = inttoptr i64 %854 to i32*
  %2350 = load i32, i32* %2349
  %2351 = add i32 %2350, -5
  %2352 = lshr i32 %2351, 31
  %2353 = lshr i32 %2350, 31
  %2354 = xor i32 %2352, %2353
  %2355 = add nuw nsw i32 %2354, %2353
  %2356 = icmp eq i32 %2355, 2
  %2357 = icmp ne i32 %2352, 0
  %2358 = xor i1 %2357, %2356
  %2359 = select i1 %2358, i64 13, i64 159
  %2360 = add i64 %2347, %2359
  br i1 %2358, label %block_405f41, label %block_405fd3

block_406919:                                     ; preds = %block_4063c0
  %2361 = add i64 %71, -6404
  %2362 = inttoptr i64 %2361 to i32*
  %2363 = load i32, i32* %2362
  %2364 = add i32 %2363, 1
  %2365 = inttoptr i64 %2361 to i32*
  store i32 %2364, i32* %2365
  %2366 = add i64 %86, -1392
  br label %block_4063a9

block_407015:                                     ; preds = %block_40700a, %block_406fc4
  %2367 = phi i64 [ %3308, %block_40700a ], [ %265, %block_406fc4 ]
  %2368 = phi i64 [ %3310, %block_40700a ], [ %296, %block_406fc4 ]
  %2369 = phi %struct.Memory* [ %1351, %block_40700a ], [ %1351, %block_406fc4 ]
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2370 = add i64 %2367, -6264
  %2371 = load double, double* %32, align 1
  %2372 = inttoptr i64 %2370 to double*
  store double %2371, double* %2372
  %2373 = add i64 %2367, -6432
  %2374 = add i64 %2368, 21
  %2375 = inttoptr i64 %2373 to i32*
  store i32 0, i32* %2375
  %2376 = add i64 %2367, -6112
  %2377 = add i64 %2367, -6412
  %2378 = add i64 %2367, -6404
  %2379 = add i64 %2367, -6416
  br label %block_40702a

block_40774f:                                     ; preds = %block_407565
  %2380 = inttoptr i64 %1688 to i32*
  %2381 = load i32, i32* %2380
  %2382 = add i32 %2381, 1
  %2383 = inttoptr i64 %1688 to i32*
  store i32 %2382, i32* %2383
  %2384 = add i64 %1438, -513
  br label %block_40754e

block_406e94:                                     ; preds = %block_40696a
  %2385 = add i64 %450, -6416
  %2386 = inttoptr i64 %2385 to i32*
  %2387 = load i32, i32* %2386
  %2388 = add i32 %2387, 1
  %2389 = inttoptr i64 %2385 to i32*
  store i32 %2388, i32* %2389
  %2390 = add i64 %479, -1345
  br label %block_406953

block_406a81:                                     ; preds = %block_406a30, %block_406a76
  %2391 = phi i64 [ %1662, %block_406a76 ], [ %2722, %block_406a30 ]
  %2392 = phi i64 [ %1664, %block_406a76 ], [ %2753, %block_406a30 ]
  %2393 = phi %struct.Memory* [ %417, %block_406a76 ], [ %417, %block_406a30 ]
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2394 = add i64 %2391, -6264
  %2395 = load double, double* %32, align 1
  %2396 = inttoptr i64 %2394 to double*
  store double %2395, double* %2396
  %2397 = add i64 %2391, -6432
  %2398 = add i64 %2392, 21
  %2399 = inttoptr i64 %2397 to i32*
  store i32 0, i32* %2399
  %2400 = add i64 %2391, -1024
  %2401 = add i64 %2391, -6412
  %2402 = add i64 %2391, -6404
  %2403 = add i64 %2391, -6416
  br label %block_406a96

block_405a76:                                     ; preds = %block_405a6c, %block_405a40
  %2404 = phi i64 [ %23, %block_405a40 ], [ %2527, %block_405a6c ]
  %2405 = phi i64 [ %43, %block_405a40 ], [ %2526, %block_405a6c ]
  %2406 = phi %struct.Memory* [ %2, %block_405a40 ], [ %2525, %block_405a6c ]
  %2407 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 912) to double*)
  store double %2407, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %2408 = add i64 %2405, 13
  %2409 = add i64 %2404, -8
  %2410 = inttoptr i64 %2409 to i64*
  store i64 %2408, i64* %2410
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %2413 = load i64, i64* %2412, align 8, !alias.scope !1669, !noalias !1672
  %2414 = inttoptr i64 %2409 to i64*
  %2415 = load i64, i64* %2414
  store i64 %2415, i64* %3, align 8, !alias.scope !1669, !noalias !1672
  store i64 %2404, i64* %11, align 8, !alias.scope !1669, !noalias !1672
  %2416 = tail call i64 @acos(i64 %2413), !noalias !1669
  %2417 = load i64, i64* %3, align 8
  %2418 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %2419 = bitcast %union.VectorReg* %16 to double*
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %2421 = bitcast i64* %2420 to double*
  %2422 = bitcast %union.VectorReg* %17 to i8*
  %2423 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %2424 = bitcast %union.VectorReg* %17 to double*
  store double %2423, double* %2424, align 1, !tbaa !1246
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2426 = bitcast i64* %2425 to double*
  store double 0.000000e+00, double* %2426, align 1, !tbaa !1246
  %2427 = load double, double* %32, align 1
  %2428 = load double, double* bitcast (%alpha_type* @alpha to double*)
  %2429 = fdiv double %2427, %2428
  %2430 = load i64, i64* %12, align 8
  %2431 = add i64 %2430, -1040
  %2432 = inttoptr i64 %2431 to double*
  store double %2429, double* %2432
  %2433 = load double, double* bitcast (%alpha_type* @alpha to double*)
  %2434 = fmul double %2433, %2433
  %2435 = add i64 %2430, -16
  %2436 = inttoptr i64 %2435 to double*
  store double %2434, double* %2436
  %2437 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %2438 = fdiv double %2437, %2423
  %2439 = add i64 %2430, -6248
  %2440 = inttoptr i64 %2439 to double*
  store double %2438, double* %2440
  %2441 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %2442 = fdiv double %2418, %2441
  store double %2442, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2443 = add i64 %2430, -1032
  %2444 = inttoptr i64 %2443 to double*
  store double %2442, double* %2444
  %2445 = load double, double* bitcast (%time_type* @time to double*)
  %2446 = add i64 %2430, -6144
  %2447 = inttoptr i64 %2446 to double*
  store double %2445, double* %2447
  %2448 = load double, double* bitcast (%time_type* @time to double*)
  %2449 = inttoptr i64 %2439 to double*
  %2450 = load double, double* %2449
  %2451 = fadd double %2448, %2450
  %2452 = add i64 %2430, -6136
  %2453 = inttoptr i64 %2452 to double*
  store double %2451, double* %2453
  %2454 = load double, double* bitcast (%time_type* @time to double*)
  %2455 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %2456 = fadd double %2454, %2455
  store double %2456, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2457 = add i64 %2430, -6128
  %2458 = inttoptr i64 %2457 to double*
  store double %2456, double* %2458
  %2459 = add i64 %2430, -6428
  %2460 = add i64 %2417, 172
  %2461 = inttoptr i64 %2459 to i32*
  store i32 0, i32* %2461
  %2462 = bitcast %union.VectorReg* %18 to i8*
  %2463 = bitcast %union.VectorReg* %16 to <2 x i32>*
  %2464 = bitcast i64* %2420 to <2 x i32>*
  %2465 = bitcast %union.VectorReg* %18 to i32*
  %2466 = getelementptr inbounds i8, i8* %2462, i64 4
  %2467 = bitcast i8* %2466 to i32*
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %2469 = bitcast i64* %2468 to i32*
  %2470 = getelementptr inbounds i8, i8* %2462, i64 12
  %2471 = bitcast i8* %2470 to i32*
  %2472 = bitcast %union.VectorReg* %18 to double*
  %2473 = add i64 %2430, -6176
  %2474 = bitcast %union.VectorReg* %17 to i32*
  %2475 = getelementptr inbounds i8, i8* %2422, i64 4
  %2476 = bitcast i8* %2475 to i32*
  %2477 = bitcast i64* %2425 to i32*
  %2478 = getelementptr inbounds i8, i8* %2422, i64 12
  %2479 = bitcast i8* %2478 to i32*
  %2480 = load i64, i64* %12, align 8
  %2481 = add i64 %2480, -6144
  %2482 = add i64 %2480, -6428
  %2483 = add i64 %2480, -6208
  %2484 = add i64 %2480, -6240
  br label %block_405b2f

block_407870:                                     ; preds = %block_407858, %block_407866
  %2485 = phi %struct.Memory* [ %3347, %block_407858 ], [ %2533, %block_407866 ]
  %2486 = load i64, i64* %11, align 8
  %2487 = add i64 %2486, 6544
  %2488 = icmp ugt i64 %2486, -6545
  %2489 = zext i1 %2488 to i8
  store i8 %2489, i8* %24, align 1, !tbaa !1248
  %2490 = trunc i64 %2487 to i32
  %2491 = and i32 %2490, 255
  %2492 = tail call i32 @llvm.ctpop.i32(i32 %2491) #11
  %2493 = trunc i32 %2492 to i8
  %2494 = and i8 %2493, 1
  %2495 = xor i8 %2494, 1
  store i8 %2495, i8* %25, align 1, !tbaa !1261
  %2496 = xor i64 %2486, 16
  %2497 = xor i64 %2496, %2487
  %2498 = lshr i64 %2497, 4
  %2499 = trunc i64 %2498 to i8
  %2500 = and i8 %2499, 1
  store i8 %2500, i8* %26, align 1, !tbaa !1262
  %2501 = icmp eq i64 %2487, 0
  %2502 = zext i1 %2501 to i8
  store i8 %2502, i8* %27, align 1, !tbaa !1263
  %2503 = lshr i64 %2487, 63
  %2504 = trunc i64 %2503 to i8
  store i8 %2504, i8* %28, align 1, !tbaa !1264
  %2505 = lshr i64 %2486, 63
  %2506 = xor i64 %2503, %2505
  %2507 = add nuw nsw i64 %2506, %2503
  %2508 = icmp eq i64 %2507, 2
  %2509 = zext i1 %2508 to i8
  store i8 %2509, i8* %29, align 1, !tbaa !1265
  %2510 = add i64 %2486, 6552
  %2511 = inttoptr i64 %2487 to i64*
  %2512 = load i64, i64* %2511
  store i64 %2512, i64* %12, align 8, !tbaa !1240
  %2513 = inttoptr i64 %2510 to i64*
  %2514 = load i64, i64* %2513
  store i64 %2514, i64* %3, align 8, !tbaa !1240
  %2515 = add i64 %2486, 6560
  store i64 %2515, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %2485

block_405f14:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2516 = load i64, i64* %12, align 8
  %2517 = add i64 %2516, -1072
  %2518 = add i64 %3220, 11
  %2519 = load double, double* %32, align 1
  %2520 = inttoptr i64 %2517 to double*
  store double %2519, double* %2520
  br label %block_405f1f

block_405a6c:                                     ; preds = %block_405a40
  store i64 3, i64* %10, align 8, !tbaa !1240
  %2521 = add i64 %43, -236
  %2522 = add i64 %43, 10
  %2523 = add i64 %20, -6560
  %2524 = inttoptr i64 %2523 to i64*
  store i64 %2522, i64* %2524
  store i64 %2523, i64* %11, align 8, !tbaa !1240
  %2525 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %2521, %struct.Memory* %2)
  %2526 = load i64, i64* %3, align 8
  %2527 = load i64, i64* %11, align 8, !tbaa !1240
  br label %block_405a76

block_407866:                                     ; preds = %block_407858
  store i64 3, i64* %10, align 8, !tbaa !1240
  %2528 = add i64 %2973, -7830
  %2529 = add i64 %2973, 10
  %2530 = load i64, i64* %11, align 8, !tbaa !1240
  %2531 = add i64 %2530, -8
  %2532 = inttoptr i64 %2531 to i64*
  store i64 %2529, i64* %2532
  store i64 %2531, i64* %11, align 8, !tbaa !1240
  %2533 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %2528, %struct.Memory* %3347)
  br label %block_407870

block_405de7:                                     ; preds = %block_405dda
  %2534 = add i64 %2266, -6416
  %2535 = add i64 %2281, 10
  %2536 = inttoptr i64 %2534 to i32*
  store i32 0, i32* %2536
  br label %block_405df1

block_4064e3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit70
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2537 = load i64, i64* %12, align 8
  %2538 = add i64 %2537, -1072
  %2539 = add i64 %2131, 11
  %2540 = load double, double* %32, align 1
  %2541 = inttoptr i64 %2538 to double*
  store double %2540, double* %2541
  br label %block_4064ee

block_406165:                                     ; preds = %block_406158
  %2542 = inttoptr i64 %1544 to double*
  %2543 = load double, double* %2542
  %2544 = sext i32 %2285 to i64
  %2545 = mul nsw i64 %2544, 40
  %2546 = add i64 %2545, ptrtoint (%dxm1_type* @dxm1 to i64)
  %2547 = inttoptr i64 %1550 to i32*
  %2548 = load i32, i32* %2547
  %2549 = sext i32 %2548 to i64
  %2550 = shl nsw i64 %2549, 3
  %2551 = add i64 %2550, %2546
  %2552 = inttoptr i64 %2551 to double*
  %2553 = load double, double* %2552
  %2554 = inttoptr i64 %1551 to i32*
  %2555 = load i32, i32* %2554
  %2556 = sext i32 %2555 to i64
  %2557 = mul nsw i64 %2556, 1000
  %2558 = add i64 %2557, ptrtoint (%ta1_type* @ta1 to i64)
  %2559 = mul nsw i64 %2544, 200
  %2560 = add i64 %2559, %2558
  %2561 = inttoptr i64 %1552 to i32*
  %2562 = load i32, i32* %2561
  %2563 = sext i32 %2562 to i64
  %2564 = mul nsw i64 %2563, 40
  %2565 = add i64 %2564, %2560
  %2566 = inttoptr i64 %1532 to i32*
  %2567 = load i32, i32* %2566
  %2568 = sext i32 %2567 to i64
  %2569 = shl nsw i64 %2568, 3
  %2570 = add i64 %2569, %2565
  %2571 = inttoptr i64 %2570 to double*
  %2572 = load double, double* %2571
  %2573 = fmul double %2553, %2572
  store double %2573, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2574 = fadd double %2543, %2573
  store double %2574, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2575 = inttoptr i64 %1544 to double*
  store double %2574, double* %2575
  %2576 = inttoptr i64 %1547 to i32*
  %2577 = load i32, i32* %2576
  %2578 = add i32 %2577, 1
  %2579 = inttoptr i64 %1547 to i32*
  store i32 %2578, i32* %2579
  %2580 = add i64 %2295, -13
  br label %block_406158

block_4064ee:                                     ; preds = %block_4064e3, %block_40649d
  %2581 = phi i64 [ %2537, %block_4064e3 ], [ %2168, %block_40649d ]
  %2582 = phi i64 [ %2539, %block_4064e3 ], [ %2199, %block_40649d ]
  %2583 = phi %struct.Memory* [ %2127, %block_4064e3 ], [ %2127, %block_40649d ]
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2584 = add i64 %2581, -6264
  %2585 = load double, double* %32, align 1
  %2586 = inttoptr i64 %2584 to double*
  store double %2585, double* %2586
  %2587 = add i64 %2581, -6432
  %2588 = add i64 %2582, 21
  %2589 = inttoptr i64 %2587 to i32*
  store i32 0, i32* %2589
  %2590 = add i64 %2581, -6112
  %2591 = add i64 %2581, -6412
  %2592 = add i64 %2581, -6404
  %2593 = add i64 %2581, -6416
  br label %block_406503

block_406046:                                     ; preds = %block_406053, %block_405fd3
  %2594 = phi i64 [ %1061, %block_405fd3 ], [ %3307, %block_406053 ]
  %2595 = phi %struct.Memory* [ %2348, %block_405fd3 ], [ %2595, %block_406053 ]
  %2596 = inttoptr i64 %1060 to i32*
  %2597 = load i32, i32* %2596
  %2598 = add i32 %2597, -5
  %2599 = lshr i32 %2598, 31
  %2600 = lshr i32 %2597, 31
  %2601 = xor i32 %2599, %2600
  %2602 = add nuw nsw i32 %2601, %2600
  %2603 = icmp eq i32 %2602, 2
  %2604 = icmp ne i32 %2599, 0
  %2605 = xor i1 %2604, %2603
  %2606 = select i1 %2605, i64 13, i64 159
  %2607 = add i64 %2594, %2606
  br i1 %2605, label %block_406053, label %block_4060e5

block_406b21:                                     ; preds = %block_406a96
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2608 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %2609 = inttoptr i64 %2394 to double*
  %2610 = load double, double* %2609
  %2611 = fmul double %2608, %2610
  store double %2611, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2612 = add i64 %2391, -6424
  %2613 = inttoptr i64 %2612 to i32*
  %2614 = load i32, i32* %2613
  %2615 = sext i32 %2614 to i64
  %2616 = mul nsw i64 %2615, 1000
  %2617 = add i64 %2616, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %2618 = load i64, i64* %12, align 8
  %2619 = add i64 %2618, -6404
  %2620 = inttoptr i64 %2619 to i32*
  %2621 = load i32, i32* %2620
  %2622 = sext i32 %2621 to i64
  %2623 = mul nsw i64 %2622, 200
  %2624 = add i64 %2623, %2617
  %2625 = add i64 %2618, -6416
  %2626 = inttoptr i64 %2625 to i32*
  %2627 = load i32, i32* %2626
  %2628 = sext i32 %2627 to i64
  %2629 = mul nsw i64 %2628, 40
  %2630 = add i64 %2629, %2624
  %2631 = load i64, i64* %12, align 8
  %2632 = add i64 %2631, -6412
  %2633 = inttoptr i64 %2632 to i32*
  %2634 = load i32, i32* %2633
  %2635 = sext i32 %2634 to i64
  %2636 = shl nsw i64 %2635, 3
  %2637 = add i64 %2636, %2630
  %2638 = load double, double* %2419, align 1
  %2639 = inttoptr i64 %2637 to double*
  %2640 = load double, double* %2639
  %2641 = fmul double %2638, %2640
  store double %2641, double* %2419, align 1, !tbaa !1246
  %2642 = add i64 %2631, -1048
  %2643 = inttoptr i64 %2642 to double*
  store double %2641, double* %2643
  %2644 = add i64 %2631, -6264
  %2645 = load double, double* %32, align 1
  %2646 = inttoptr i64 %2644 to double*
  store double %2645, double* %2646
  %2647 = add i64 %2631, -6432
  %2648 = add i64 %2213, 115
  %2649 = inttoptr i64 %2647 to i32*
  store i32 0, i32* %2649
  %2650 = add i64 %2631, -1024
  %2651 = add i64 %2631, -6416
  %2652 = add i64 %2631, -6404
  br label %block_406b94

block_407037:                                     ; preds = %block_40702a
  %2653 = inttoptr i64 %2370 to double*
  %2654 = load double, double* %2653
  %2655 = sext i32 %2757 to i64
  %2656 = mul nsw i64 %2655, 40
  %2657 = add i64 %2656, ptrtoint (%dxm1_type* @dxm1 to i64)
  %2658 = inttoptr i64 %2377 to i32*
  %2659 = load i32, i32* %2658
  %2660 = sext i32 %2659 to i64
  %2661 = shl nsw i64 %2660, 3
  %2662 = add i64 %2661, %2657
  %2663 = inttoptr i64 %2662 to double*
  %2664 = load double, double* %2663
  %2665 = inttoptr i64 %2378 to i32*
  %2666 = load i32, i32* %2665
  %2667 = sext i32 %2666 to i64
  %2668 = mul nsw i64 %2667, 200
  %2669 = add i64 %2668, %2376
  %2670 = inttoptr i64 %2379 to i32*
  %2671 = load i32, i32* %2670
  %2672 = sext i32 %2671 to i64
  %2673 = mul nsw i64 %2672, 40
  %2674 = add i64 %2673, %2669
  %2675 = shl nsw i64 %2655, 3
  %2676 = add i64 %2675, %2674
  %2677 = inttoptr i64 %2676 to double*
  %2678 = load double, double* %2677
  %2679 = fmul double %2664, %2678
  store double %2679, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2680 = fadd double %2654, %2679
  store double %2680, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2681 = inttoptr i64 %2370 to double*
  store double %2680, double* %2681
  %2682 = inttoptr i64 %2373 to i32*
  %2683 = load i32, i32* %2682
  %2684 = add i32 %2683, 1
  %2685 = inttoptr i64 %2373 to i32*
  store i32 %2684, i32* %2685
  %2686 = add i64 %2767, -13
  br label %block_40702a

block_407233:                                     ; preds = %block_407226
  %2687 = inttoptr i64 %131 to double*
  %2688 = load double, double* %2687
  %2689 = sext i32 %2771 to i64
  %2690 = mul nsw i64 %2689, 40
  %2691 = add i64 %2690, ptrtoint (%dxm1_type* @dxm1 to i64)
  %2692 = inttoptr i64 %138 to i32*
  %2693 = load i32, i32* %2692
  %2694 = sext i32 %2693 to i64
  %2695 = shl nsw i64 %2694, 3
  %2696 = add i64 %2695, %2691
  %2697 = inttoptr i64 %2696 to double*
  %2698 = load double, double* %2697
  %2699 = mul nsw i64 %2689, 200
  %2700 = add i64 %2699, %137
  %2701 = inttoptr i64 %139 to i32*
  %2702 = load i32, i32* %2701
  %2703 = sext i32 %2702 to i64
  %2704 = mul nsw i64 %2703, 40
  %2705 = add i64 %2704, %2700
  %2706 = inttoptr i64 %119 to i32*
  %2707 = load i32, i32* %2706
  %2708 = sext i32 %2707 to i64
  %2709 = shl nsw i64 %2708, 3
  %2710 = add i64 %2709, %2705
  %2711 = inttoptr i64 %2710 to double*
  %2712 = load double, double* %2711
  %2713 = fmul double %2698, %2712
  store double %2713, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2714 = fadd double %2688, %2713
  store double %2714, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2715 = inttoptr i64 %131 to double*
  store double %2714, double* %2715
  %2716 = inttoptr i64 %134 to i32*
  %2717 = load i32, i32* %2716
  %2718 = add i32 %2717, 1
  %2719 = inttoptr i64 %134 to i32*
  store i32 %2718, i32* %2719
  %2720 = add i64 %2781, -13
  br label %block_407226

block_406a30:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2721 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %2722 = load i64, i64* %12, align 8
  %2723 = add i64 %2722, -6256
  %2724 = inttoptr i64 %2723 to double*
  %2725 = load double, double* %2724
  %2726 = add i64 %2722, -6512
  %2727 = inttoptr i64 %2726 to double*
  store double %2721, double* %2727
  %2728 = bitcast double %2725 to <2 x i32>
  %2729 = extractelement <2 x i32> %2728, i32 0
  store i32 %2729, i32* %185, align 1, !tbaa !1266
  %2730 = extractelement <2 x i32> %2728, i32 1
  store i32 %2730, i32* %187, align 1, !tbaa !1266
  %2731 = add i64 %421, 32
  %2732 = load i64, i64* %11, align 8, !tbaa !1240
  %2733 = add i64 %2732, -8
  %2734 = inttoptr i64 %2733 to i64*
  store i64 %2731, i64* %2734
  %2735 = load double, double* %192, align 8, !alias.scope !1674, !noalias !1677
  %2736 = inttoptr i64 %2733 to i64*
  %2737 = load i64, i64* %2736
  %2738 = tail call double @sqrt(double %2735) #11
  %2739 = add i64 %2722, -1040
  %2740 = inttoptr i64 %2739 to double*
  %2741 = load double, double* %2740
  %2742 = fmul double %2738, %2741
  %2743 = add i64 %2737, 13
  %2744 = inttoptr i64 %2733 to i64*
  store i64 %2743, i64* %2744
  %2745 = inttoptr i64 %2733 to i64*
  %2746 = load i64, i64* %2745
  store i64 %2732, i64* %11, align 8, !alias.scope !1679, !noalias !1682
  %2747 = tail call double @cos(double %2742) #11
  %2748 = inttoptr i64 %2726 to double*
  %2749 = load double, double* %2748
  store double %2749, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2750 = fadd double %2749, %2747
  store double %2750, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2751 = add i64 %2722, -1072
  %2752 = inttoptr i64 %2751 to double*
  store double %2750, double* %2752
  %2753 = add i64 %2746, 36
  br label %block_406a81

block_40702a:                                     ; preds = %block_407037, %block_407015
  %2754 = phi i64 [ %2374, %block_407015 ], [ %2686, %block_407037 ]
  %2755 = phi %struct.Memory* [ %2369, %block_407015 ], [ %2755, %block_407037 ]
  %2756 = inttoptr i64 %2373 to i32*
  %2757 = load i32, i32* %2756
  %2758 = add i32 %2757, -5
  %2759 = lshr i32 %2758, 31
  %2760 = lshr i32 %2757, 31
  %2761 = xor i32 %2759, %2760
  %2762 = add nuw nsw i32 %2761, %2760
  %2763 = icmp eq i32 %2762, 2
  %2764 = icmp ne i32 %2759, 0
  %2765 = xor i1 %2764, %2763
  %2766 = select i1 %2765, i64 13, i64 139
  %2767 = add i64 %2754, %2766
  br i1 %2765, label %block_407037, label %block_4070b5

block_407226:                                     ; preds = %block_407233, %block_4071b3
  %2768 = phi i64 [ %135, %block_4071b3 ], [ %2720, %block_407233 ]
  %2769 = phi %struct.Memory* [ %1950, %block_4071b3 ], [ %2769, %block_407233 ]
  %2770 = inttoptr i64 %134 to i32*
  %2771 = load i32, i32* %2770
  %2772 = add i32 %2771, -5
  %2773 = lshr i32 %2772, 31
  %2774 = lshr i32 %2771, 31
  %2775 = xor i32 %2773, %2774
  %2776 = add nuw nsw i32 %2775, %2774
  %2777 = icmp eq i32 %2776, 2
  %2778 = icmp ne i32 %2773, 0
  %2779 = xor i1 %2778, %2777
  %2780 = select i1 %2779, i64 13, i64 139
  %2781 = add i64 %2768, %2780
  br i1 %2779, label %block_407233, label %block_4072b1

block_4061f7:                                     ; preds = %block_406158
  %2782 = add i64 %1531, -6112
  store i64 %2782, i64* %6, align 8, !tbaa !1240
  %2783 = add i64 %1531, -2080
  store i64 %2783, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %8, align 8, !tbaa !1240
  %2784 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %2785 = inttoptr i64 %1544 to double*
  %2786 = load double, double* %2785
  %2787 = fmul double %2784, %2786
  store double %2787, double* %32, align 1, !tbaa !1246
  %2788 = add i64 %1531, -6424
  %2789 = inttoptr i64 %2788 to i32*
  %2790 = load i32, i32* %2789
  %2791 = sext i32 %2790 to i64
  %2792 = mul nsw i64 %2791, 1000
  %2793 = add i64 %2792, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %2794 = load i64, i64* %12, align 8
  %2795 = add i64 %2794, -6404
  %2796 = inttoptr i64 %2795 to i32*
  %2797 = load i32, i32* %2796
  %2798 = sext i32 %2797 to i64
  %2799 = mul nsw i64 %2798, 200
  %2800 = add i64 %2799, %2793
  %2801 = add i64 %2794, -6416
  %2802 = inttoptr i64 %2801 to i32*
  %2803 = load i32, i32* %2802
  %2804 = sext i32 %2803 to i64
  %2805 = mul nsw i64 %2804, 40
  %2806 = add i64 %2805, %2800
  %2807 = load i64, i64* %12, align 8
  %2808 = add i64 %2807, -6412
  %2809 = inttoptr i64 %2808 to i32*
  %2810 = load i32, i32* %2809
  %2811 = sext i32 %2810 to i64
  %2812 = shl nsw i64 %2811, 3
  %2813 = add i64 %2812, %2806
  %2814 = load double, double* %32, align 1
  %2815 = inttoptr i64 %2813 to double*
  %2816 = load double, double* %2815
  %2817 = fmul double %2814, %2816
  %2818 = add i64 %2807, -1064
  %2819 = inttoptr i64 %2818 to double*
  store double %2817, double* %2819
  %2820 = add i64 %2807, -1048
  %2821 = inttoptr i64 %2820 to double*
  %2822 = load double, double* %2821
  %2823 = add i64 %2807, -1056
  %2824 = inttoptr i64 %2823 to double*
  %2825 = load double, double* %2824
  %2826 = fadd double %2822, %2825
  %2827 = inttoptr i64 %2818 to double*
  %2828 = load double, double* %2827
  %2829 = fadd double %2826, %2828
  %2830 = add i64 %2807, -1072
  %2831 = inttoptr i64 %2830 to double*
  %2832 = load double, double* %2831
  %2833 = fadd double %2829, %2832
  store double %2833, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2834 = add i64 %2807, -6404
  %2835 = inttoptr i64 %2834 to i32*
  %2836 = load i32, i32* %2835
  %2837 = sext i32 %2836 to i64
  %2838 = mul nsw i64 %2837, 200
  %2839 = load i64, i64* %7, align 8
  %2840 = add i64 %2838, %2839
  %2841 = load i64, i64* %12, align 8
  %2842 = add i64 %2841, -6416
  %2843 = inttoptr i64 %2842 to i32*
  %2844 = load i32, i32* %2843
  %2845 = sext i32 %2844 to i64
  %2846 = mul nsw i64 %2845, 40
  %2847 = add i64 %2846, %2840
  store i64 %2847, i64* %10, align 8, !tbaa !1240
  %2848 = add i64 %2841, -6412
  %2849 = inttoptr i64 %2848 to i32*
  %2850 = load i32, i32* %2849
  %2851 = sext i32 %2850 to i64
  %2852 = shl nsw i64 %2851, 3
  %2853 = add i64 %2852, %2847
  %2854 = load double, double* %32, align 1
  %2855 = inttoptr i64 %2853 to double*
  store double %2854, double* %2855
  %2856 = add i64 %2841, -6408
  %2857 = inttoptr i64 %2856 to i32*
  %2858 = load i32, i32* %2857
  %2859 = sext i32 %2858 to i64
  %2860 = mul nsw i64 %2859, 1000
  %2861 = load i64, i64* %8, align 8
  %2862 = add i64 %2860, %2861
  %2863 = load i64, i64* %12, align 8
  %2864 = add i64 %2863, -6404
  %2865 = inttoptr i64 %2864 to i32*
  %2866 = load i32, i32* %2865
  %2867 = sext i32 %2866 to i64
  %2868 = mul nsw i64 %2867, 200
  %2869 = add i64 %2868, %2862
  %2870 = add i64 %2863, -6416
  %2871 = inttoptr i64 %2870 to i32*
  %2872 = load i32, i32* %2871
  %2873 = sext i32 %2872 to i64
  %2874 = mul nsw i64 %2873, 40
  %2875 = add i64 %2874, %2869
  %2876 = load i64, i64* %12, align 8
  %2877 = add i64 %2876, -6412
  %2878 = inttoptr i64 %2877 to i32*
  %2879 = load i32, i32* %2878
  %2880 = sext i32 %2879 to i64
  store i64 %2880, i64* %9, align 8, !tbaa !1240
  %2881 = shl nsw i64 %2880, 3
  %2882 = add i64 %2881, %2875
  %2883 = inttoptr i64 %2882 to double*
  %2884 = load double, double* %2883
  store double %2884, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %2885 = add i64 %2876, -6248
  %2886 = inttoptr i64 %2885 to double*
  %2887 = load double, double* %2886
  store double %2887, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %2888 = add i64 %2876, -6404
  %2889 = inttoptr i64 %2888 to i32*
  %2890 = load i32, i32* %2889
  %2891 = sext i32 %2890 to i64
  %2892 = mul nsw i64 %2891, 200
  %2893 = load i64, i64* %7, align 8
  %2894 = add i64 %2892, %2893
  %2895 = add i64 %2876, -6416
  %2896 = inttoptr i64 %2895 to i32*
  %2897 = load i32, i32* %2896
  %2898 = sext i32 %2897 to i64
  %2899 = mul nsw i64 %2898, 40
  %2900 = add i64 %2899, %2894
  %2901 = load i64, i64* %12, align 8
  %2902 = add i64 %2901, -6412
  %2903 = inttoptr i64 %2902 to i32*
  %2904 = load i32, i32* %2903
  %2905 = sext i32 %2904 to i64
  store i64 %2905, i64* %8, align 8, !tbaa !1240
  %2906 = shl nsw i64 %2905, 3
  %2907 = add i64 %2906, %2900
  %2908 = load double, double* %2419, align 1
  %2909 = inttoptr i64 %2907 to double*
  %2910 = load double, double* %2909
  %2911 = fmul double %2908, %2910
  store double %2911, double* %2419, align 1, !tbaa !1246
  %2912 = load double, double* %32, align 1
  %2913 = fadd double %2912, %2911
  store double %2913, double* %32, align 1, !tbaa !1246
  %2914 = add i64 %2901, -6404
  %2915 = inttoptr i64 %2914 to i32*
  %2916 = load i32, i32* %2915
  %2917 = sext i32 %2916 to i64
  %2918 = mul nsw i64 %2917, 200
  %2919 = load i64, i64* %6, align 8
  %2920 = add i64 %2918, %2919
  %2921 = add i64 %2901, -6416
  %2922 = inttoptr i64 %2921 to i32*
  %2923 = load i32, i32* %2922
  %2924 = sext i32 %2923 to i64
  %2925 = mul nsw i64 %2924, 40
  %2926 = add i64 %2925, %2920
  %2927 = load i64, i64* %12, align 8
  %2928 = add i64 %2927, -6412
  %2929 = inttoptr i64 %2928 to i32*
  %2930 = load i32, i32* %2929
  %2931 = sext i32 %2930 to i64
  store i64 %2931, i64* %7, align 8, !tbaa !1240
  %2932 = shl nsw i64 %2931, 3
  %2933 = add i64 %2932, %2926
  %2934 = load double, double* %32, align 1
  %2935 = inttoptr i64 %2933 to double*
  store double %2934, double* %2935
  %2936 = inttoptr i64 %2928 to i32*
  %2937 = load i32, i32* %2936
  %2938 = add i32 %2937, 1
  %2939 = inttoptr i64 %2928 to i32*
  store i32 %2938, i32* %2939
  %2940 = add i64 %2295, -1007
  br label %block_405e08

block_4063b6:                                     ; preds = %block_4063a9
  %2941 = add i64 %3020, -6416
  %2942 = add i64 %3035, 10
  %2943 = inttoptr i64 %2941 to i32*
  store i32 0, i32* %2943
  br label %block_4063c0

block_405c25:                                     ; preds = %block_405c18
  %2944 = sext i32 %3039 to i64
  %2945 = shl nsw i64 %2944, 3
  %2946 = add i64 %2945, ptrtoint (%xfrac_type* @xfrac to i64)
  %2947 = inttoptr i64 %2946 to double*
  %2948 = load double, double* %2947
  %2949 = inttoptr i64 %426 to i32*
  %2950 = load i32, i32* %2949
  %2951 = sext i32 %2950 to i64
  %2952 = shl nsw i64 %2951, 6
  %2953 = add i64 %2952, ptrtoint (%xc_type* @xc to i64)
  %2954 = add i64 %2952, add (i64 ptrtoint (%xc_type* @xc to i64), i64 8)
  %2955 = inttoptr i64 %2954 to double*
  %2956 = load double, double* %2955
  store i64 %2953, i64* %8, align 8, !tbaa !1240
  %2957 = inttoptr i64 %2953 to double*
  %2958 = load double, double* %2957
  %2959 = fsub double %2956, %2958
  store double %2959, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2960 = fmul double %2948, %2959
  store i64 %2952, i64* %7, align 8, !tbaa !1240
  %2961 = fadd double %2960, %2958
  store double %2961, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %2962 = add i64 %263, %2945
  %2963 = inttoptr i64 %2962 to double*
  store double %2961, double* %2963
  %2964 = inttoptr i64 %260 to i32*
  %2965 = load i32, i32* %2964
  %2966 = add i32 %2965, 1
  %2967 = inttoptr i64 %260 to i32*
  store i32 %2966, i32* %2967
  %2968 = add i64 %3050, -13
  br label %block_405c18

block_407858:                                     ; preds = %block_407801
  %2969 = zext i32 %3349 to i64
  store i64 %2969, i64* %6, align 8, !tbaa !1240
  %2970 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %2971 = icmp eq i32 %2970, 0
  %2972 = select i1 %2971, i64 24, i64 14
  %2973 = add i64 %3362, %2972
  br i1 %2971, label %block_407870, label %block_407866

block_406c1f:                                     ; preds = %block_406b94
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %2974 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %2975 = inttoptr i64 %2644 to double*
  %2976 = load double, double* %2975
  %2977 = fmul double %2974, %2976
  store double %2977, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %2978 = add i64 %2631, -6424
  %2979 = inttoptr i64 %2978 to i32*
  %2980 = load i32, i32* %2979
  %2981 = sext i32 %2980 to i64
  %2982 = mul nsw i64 %2981, 1000
  %2983 = add i64 %2982, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %2984 = load i64, i64* %12, align 8
  %2985 = add i64 %2984, -6404
  %2986 = inttoptr i64 %2985 to i32*
  %2987 = load i32, i32* %2986
  %2988 = sext i32 %2987 to i64
  %2989 = mul nsw i64 %2988, 200
  %2990 = add i64 %2989, %2983
  %2991 = add i64 %2984, -6416
  %2992 = inttoptr i64 %2991 to i32*
  %2993 = load i32, i32* %2992
  %2994 = sext i32 %2993 to i64
  %2995 = mul nsw i64 %2994, 40
  %2996 = add i64 %2995, %2990
  %2997 = load i64, i64* %12, align 8
  %2998 = add i64 %2997, -6412
  %2999 = inttoptr i64 %2998 to i32*
  %3000 = load i32, i32* %2999
  %3001 = sext i32 %3000 to i64
  %3002 = shl nsw i64 %3001, 3
  %3003 = add i64 %3002, %2996
  %3004 = load double, double* %2419, align 1
  %3005 = inttoptr i64 %3003 to double*
  %3006 = load double, double* %3005
  %3007 = fmul double %3004, %3006
  store double %3007, double* %2419, align 1, !tbaa !1246
  %3008 = add i64 %2997, -1056
  %3009 = inttoptr i64 %3008 to double*
  store double %3007, double* %3009
  %3010 = add i64 %2997, -6264
  %3011 = load double, double* %32, align 1
  %3012 = inttoptr i64 %3010 to double*
  store double %3011, double* %3012
  %3013 = add i64 %2997, -6432
  %3014 = add i64 %206, 115
  %3015 = inttoptr i64 %3013 to i32*
  store i32 0, i32* %3015
  %3016 = add i64 %2997, -1024
  %3017 = add i64 %2997, -6404
  %3018 = add i64 %2997, -6416
  br label %block_406c92

block_4063a9:                                     ; preds = %block_406919, %block_40639f
  %3019 = phi i64 [ %173, %block_40639f ], [ %2366, %block_406919 ]
  %3020 = phi i64 [ %2266, %block_40639f ], [ %71, %block_406919 ]
  %3021 = phi %struct.Memory* [ %2267, %block_40639f ], [ %72, %block_406919 ]
  %3022 = add i64 %3020, -6404
  %3023 = inttoptr i64 %3022 to i32*
  %3024 = load i32, i32* %3023
  %3025 = add i32 %3024, -5
  %3026 = lshr i32 %3025, 31
  %3027 = trunc i32 %3026 to i8
  %3028 = lshr i32 %3024, 31
  %3029 = xor i32 %3026, %3028
  %3030 = add nuw nsw i32 %3029, %3028
  %3031 = icmp eq i32 %3030, 2
  %3032 = icmp ne i8 %3027, 0
  %3033 = xor i1 %3032, %3031
  %3034 = select i1 %3033, i64 13, i64 1417
  %3035 = add i64 %3019, %3034
  br i1 %3033, label %block_4063b6, label %block_406932

block_405c18:                                     ; preds = %block_405c25, %block_405bfa
  %3036 = phi i64 [ %261, %block_405bfa ], [ %2968, %block_405c25 ]
  %3037 = phi %struct.Memory* [ %425, %block_405bfa ], [ %3037, %block_405c25 ]
  %3038 = inttoptr i64 %260 to i32*
  %3039 = load i32, i32* %3038
  %3040 = add i32 %3039, -5
  %3041 = lshr i32 %3040, 31
  %3042 = trunc i32 %3041 to i8
  %3043 = lshr i32 %3039, 31
  %3044 = xor i32 %3041, %3043
  %3045 = add nuw nsw i32 %3044, %3043
  %3046 = icmp eq i32 %3045, 2
  %3047 = icmp ne i8 %3042, 0
  %3048 = xor i1 %3047, %3046
  %3049 = select i1 %3048, i64 13, i64 140
  %3050 = add i64 %3036, %3049
  br i1 %3048, label %block_405c25, label %block_405ca4

block_4070b5:                                     ; preds = %block_40702a
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %3051 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 920) to double*)
  %3052 = inttoptr i64 %2370 to double*
  %3053 = load double, double* %3052
  %3054 = fmul double %3051, %3053
  store double %3054, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %3055 = add i64 %2367, -6424
  %3056 = inttoptr i64 %3055 to i32*
  %3057 = load i32, i32* %3056
  %3058 = sext i32 %3057 to i64
  %3059 = mul nsw i64 %3058, 1000
  %3060 = add i64 %3059, ptrtoint (%xrm1_s_type* @xrm1_s to i64)
  %3061 = load i64, i64* %12, align 8
  %3062 = add i64 %3061, -6404
  %3063 = inttoptr i64 %3062 to i32*
  %3064 = load i32, i32* %3063
  %3065 = sext i32 %3064 to i64
  %3066 = mul nsw i64 %3065, 200
  %3067 = add i64 %3066, %3060
  %3068 = add i64 %3061, -6416
  %3069 = inttoptr i64 %3068 to i32*
  %3070 = load i32, i32* %3069
  %3071 = sext i32 %3070 to i64
  %3072 = mul nsw i64 %3071, 40
  %3073 = add i64 %3072, %3067
  %3074 = load i64, i64* %12, align 8
  %3075 = add i64 %3074, -6412
  %3076 = inttoptr i64 %3075 to i32*
  %3077 = load i32, i32* %3076
  %3078 = sext i32 %3077 to i64
  %3079 = shl nsw i64 %3078, 3
  %3080 = add i64 %3079, %3073
  %3081 = load double, double* %2419, align 1
  %3082 = inttoptr i64 %3080 to double*
  %3083 = load double, double* %3082
  %3084 = fmul double %3081, %3083
  store double %3084, double* %2419, align 1, !tbaa !1246
  %3085 = add i64 %3074, -1048
  %3086 = inttoptr i64 %3085 to double*
  store double %3084, double* %3086
  %3087 = add i64 %3074, -6264
  %3088 = load double, double* %32, align 1
  %3089 = inttoptr i64 %3087 to double*
  store double %3088, double* %3089
  %3090 = add i64 %3074, -6432
  %3091 = add i64 %2767, 115
  %3092 = inttoptr i64 %3090 to i32*
  store i32 0, i32* %3092
  %3093 = add i64 %3074, -6112
  %3094 = add i64 %3074, -6416
  %3095 = add i64 %3074, -6404
  br label %block_407128

block_405e15:                                     ; preds = %block_405e08
  %3096 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %3096, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %3097 = sext i32 %3318 to i64
  %3098 = shl nsw i64 %3097, 3
  %3099 = add i64 %3314, -6304
  %3100 = add i64 %3099, %3098
  %3101 = inttoptr i64 %3100 to double*
  %3102 = load double, double* %3101
  %3103 = add i64 %3314, -6176
  %3104 = inttoptr i64 %3103 to double*
  %3105 = load double, double* %3104
  %3106 = fsub double %3102, %3105
  store double %3106, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %3107 = add i64 %3343, 37
  %3108 = load i64, i64* %11, align 8, !tbaa !1240
  %3109 = add i64 %3108, -8
  %3110 = inttoptr i64 %3109 to i64*
  store i64 %3107, i64* %3110
  %3111 = load i64, i64* %2412, align 8, !alias.scope !1684, !noalias !1687
  %3112 = load i64, i64* %9, align 8, !alias.scope !1684, !noalias !1687
  %3113 = inttoptr i64 %3109 to i64*
  %3114 = load i64, i64* %3113
  store i64 %3114, i64* %3, align 8, !alias.scope !1684, !noalias !1687
  store i64 %3108, i64* %11, align 8, !alias.scope !1684, !noalias !1687
  %3115 = tail call i64 @pow(i64 %3111, i64 %3112), !noalias !1684
  %3116 = load i64, i64* %3, align 8
  %3117 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %3117, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %3118 = load i64, i64* %12, align 8
  %3119 = add i64 %3118, -6416
  %3120 = inttoptr i64 %3119 to i32*
  %3121 = load i32, i32* %3120
  %3122 = sext i32 %3121 to i64
  %3123 = shl nsw i64 %3122, 3
  %3124 = add i64 %3118, -6352
  %3125 = add i64 %3124, %3123
  %3126 = inttoptr i64 %3125 to double*
  %3127 = load double, double* %3126
  %3128 = add i64 %3118, -6208
  %3129 = inttoptr i64 %3128 to double*
  %3130 = load double, double* %3129
  %3131 = fsub double %3127, %3130
  store double %3131, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %3132 = add i64 %3118, -6448
  %3133 = load double, double* %32, align 1
  %3134 = inttoptr i64 %3132 to double*
  store double %3133, double* %3134
  %3135 = bitcast double %3131 to <2 x i32>
  %3136 = extractelement <2 x i32> %3135, i32 0
  store i32 %3136, i32* %185, align 1, !tbaa !1266
  %3137 = extractelement <2 x i32> %3135, i32 1
  store i32 %3137, i32* %187, align 1, !tbaa !1266
  store i32 0, i32* %188, align 1, !tbaa !1266
  store i32 0, i32* %190, align 1, !tbaa !1266
  %3138 = add i64 %3116, 48
  %3139 = load i64, i64* %11, align 8, !tbaa !1240
  %3140 = add i64 %3139, -8
  %3141 = inttoptr i64 %3140 to i64*
  store i64 %3138, i64* %3141
  %3142 = load i64, i64* %2412, align 8, !alias.scope !1689, !noalias !1692
  %3143 = load i64, i64* %9, align 8, !alias.scope !1689, !noalias !1692
  %3144 = inttoptr i64 %3140 to i64*
  %3145 = load i64, i64* %3144
  store i64 %3145, i64* %3, align 8, !alias.scope !1689, !noalias !1692
  store i64 %3139, i64* %11, align 8, !alias.scope !1689, !noalias !1692
  %3146 = tail call i64 @pow(i64 %3142, i64 %3143), !noalias !1689
  %3147 = load i64, i64* %3, align 8
  %3148 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %3148, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %3149 = load i64, i64* %12, align 8
  %3150 = add i64 %3149, -6448
  %3151 = inttoptr i64 %3150 to double*
  %3152 = load double, double* %3151
  %3153 = load double, double* %32, align 1
  %3154 = fadd double %3152, %3153
  store double %3154, double* %2424, align 1, !tbaa !1246
  store i64 0, i64* %2425, align 1, !tbaa !1246
  %3155 = add i64 %3149, -6404
  %3156 = inttoptr i64 %3155 to i32*
  %3157 = load i32, i32* %3156
  %3158 = sext i32 %3157 to i64
  %3159 = shl nsw i64 %3158, 3
  %3160 = add i64 %3149, -6400
  %3161 = add i64 %3160, %3159
  %3162 = inttoptr i64 %3161 to double*
  %3163 = load double, double* %3162
  %3164 = add i64 %3149, -6240
  %3165 = inttoptr i64 %3164 to double*
  %3166 = load double, double* %3165
  %3167 = fsub double %3163, %3166
  store double %3167, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %3168 = add i64 %3149, -6456
  %3169 = inttoptr i64 %3168 to double*
  store double %3154, double* %3169
  %3170 = add i64 %3147, 57
  %3171 = load i64, i64* %11, align 8, !tbaa !1240
  %3172 = add i64 %3171, -8
  %3173 = inttoptr i64 %3172 to i64*
  store i64 %3170, i64* %3173
  %3174 = load i64, i64* %2412, align 8, !alias.scope !1694, !noalias !1697
  %3175 = load i64, i64* %9, align 8, !alias.scope !1694, !noalias !1697
  %3176 = inttoptr i64 %3172 to i64*
  %3177 = load i64, i64* %3176
  store i64 %3177, i64* %3, align 8, !alias.scope !1694, !noalias !1697
  store i64 %3171, i64* %11, align 8, !alias.scope !1694, !noalias !1697
  %3178 = tail call i64 @pow(i64 %3174, i64 %3175), !noalias !1694
  store i64 %3178, i64* %2411, align 8, !alias.scope !1694, !noalias !1697
  %3179 = load i64, i64* %12, align 8
  %3180 = add i64 %3179, -6456
  %3181 = load i64, i64* %3, align 8
  %3182 = inttoptr i64 %3180 to double*
  %3183 = load double, double* %3182
  %3184 = load double, double* %32, align 1
  %3185 = fadd double %3183, %3184
  %3186 = add i64 %3179, -6256
  %3187 = inttoptr i64 %3186 to double*
  store double %3185, double* %3187
  %3188 = inttoptr i64 %3186 to double*
  %3189 = load double, double* %3188
  store double %3189, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %3190 = add i64 %3179, -16
  %3191 = inttoptr i64 %3190 to double*
  %3192 = load double, double* %3191
  store double %3192, double* %2419, align 1, !tbaa !1246
  store double 0.000000e+00, double* %2421, align 1, !tbaa !1246
  %3193 = add i64 %3181, 37
  store i64 %3193, i64* %3, align 8
  %3194 = fcmp uno double %3192, %3189
  br i1 %3194, label %3195, label %3206

; <label>:3195:                                   ; preds = %block_405e15
  %3196 = fadd double %3192, %3189
  %3197 = bitcast double %3196 to i64
  %3198 = and i64 %3197, 9221120237041090560
  %3199 = icmp eq i64 %3198, 9218868437227405312
  %3200 = and i64 %3197, 2251799813685247
  %3201 = icmp ne i64 %3200, 0
  %3202 = and i1 %3199, %3201
  br i1 %3202, label %3203, label %3212

; <label>:3203:                                   ; preds = %3195
  %3204 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3193, %struct.Memory* %3315) #14
  %3205 = load i64, i64* %3, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15

; <label>:3206:                                   ; preds = %block_405e15
  %3207 = fcmp ogt double %3192, %3189
  br i1 %3207, label %3212, label %3208

; <label>:3208:                                   ; preds = %3206
  %3209 = fcmp olt double %3192, %3189
  br i1 %3209, label %3212, label %3210

; <label>:3210:                                   ; preds = %3208
  %3211 = fcmp oeq double %3192, %3189
  br i1 %3211, label %3212, label %3214

; <label>:3212:                                   ; preds = %3210, %3208, %3206, %3195
  %3213 = phi i8 [ 0, %3206 ], [ 1, %3208 ], [ 0, %3210 ], [ 1, %3195 ]
  store i8 %3213, i8* %24, align 1, !tbaa !1463
  br label %3214

; <label>:3214:                                   ; preds = %3212, %3210
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15: ; preds = %3214, %3203
  %3215 = phi i64 [ %3205, %3203 ], [ %3193, %3214 ]
  %3216 = phi %struct.Memory* [ %3204, %3203 ], [ %3315, %3214 ]
  %3217 = load i8, i8* %24, align 1, !tbaa !1248
  %3218 = icmp ne i8 %3217, 0
  %3219 = select i1 %3218, i64 76, i64 6
  %3220 = add i64 %3215, %3219
  %3221 = icmp eq i8 %3217, 1
  br i1 %3221, label %block_405f14, label %block_405ece

block_407814:                                     ; preds = %block_407801
  %3222 = sext i32 %3349 to i64
  %3223 = shl nsw i64 %3222, 3
  %3224 = add i64 %3223, ptrtoint (%tmort_type* @tmort to i64)
  %3225 = inttoptr i64 %3224 to double*
  %3226 = load double, double* %3225
  %3227 = add i64 %3223, ptrtoint (%mormult_type* @mormult to i64)
  %3228 = inttoptr i64 %3227 to double*
  %3229 = load double, double* %3228
  %3230 = fdiv double %3226, %3229
  store double %3230, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %3231 = inttoptr i64 %3224 to double*
  store double %3230, double* %3231
  %3232 = inttoptr i64 %446 to i32*
  %3233 = load i32, i32* %3232
  %3234 = add i32 %3233, 1
  %3235 = inttoptr i64 %446 to i32*
  store i32 %3234, i32* %3235
  %3236 = add i64 %3362, -19
  br label %block_407801

block_40660e:                                     ; preds = %block_406601
  %3237 = inttoptr i64 %243 to double*
  %3238 = load double, double* %3237
  %3239 = sext i32 %3386 to i64
  %3240 = mul nsw i64 %3239, 40
  %3241 = add i64 %3240, ptrtoint (%dxm1_type* @dxm1 to i64)
  %3242 = inttoptr i64 %250 to i32*
  %3243 = load i32, i32* %3242
  %3244 = sext i32 %3243 to i64
  %3245 = shl nsw i64 %3244, 3
  %3246 = add i64 %3245, %3241
  %3247 = inttoptr i64 %3246 to double*
  %3248 = load double, double* %3247
  %3249 = inttoptr i64 %251 to i32*
  %3250 = load i32, i32* %3249
  %3251 = sext i32 %3250 to i64
  %3252 = mul nsw i64 %3251, 200
  %3253 = add i64 %3252, %249
  %3254 = add i64 %3240, %3253
  %3255 = inttoptr i64 %231 to i32*
  %3256 = load i32, i32* %3255
  %3257 = sext i32 %3256 to i64
  %3258 = shl nsw i64 %3257, 3
  %3259 = add i64 %3258, %3254
  %3260 = inttoptr i64 %3259 to double*
  %3261 = load double, double* %3260
  %3262 = fmul double %3248, %3261
  store double %3262, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %3263 = fadd double %3238, %3262
  store double %3263, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %3264 = inttoptr i64 %243 to double*
  store double %3263, double* %3264
  %3265 = inttoptr i64 %246 to i32*
  %3266 = load i32, i32* %3265
  %3267 = add i32 %3266, 1
  %3268 = inttoptr i64 %246 to i32*
  store i32 %3267, i32* %3268
  %3269 = add i64 %3396, -13
  br label %block_406601

block_406053:                                     ; preds = %block_406046
  %3270 = inttoptr i64 %1057 to double*
  %3271 = load double, double* %3270
  %3272 = sext i32 %2597 to i64
  %3273 = mul nsw i64 %3272, 40
  %3274 = add i64 %3273, ptrtoint (%dxm1_type* @dxm1 to i64)
  %3275 = inttoptr i64 %1063 to i32*
  %3276 = load i32, i32* %3275
  %3277 = sext i32 %3276 to i64
  %3278 = shl nsw i64 %3277, 3
  %3279 = add i64 %3278, %3274
  %3280 = inttoptr i64 %3279 to double*
  %3281 = load double, double* %3280
  %3282 = inttoptr i64 %1064 to i32*
  %3283 = load i32, i32* %3282
  %3284 = sext i32 %3283 to i64
  %3285 = mul nsw i64 %3284, 1000
  %3286 = add i64 %3285, ptrtoint (%ta1_type* @ta1 to i64)
  %3287 = inttoptr i64 %1065 to i32*
  %3288 = load i32, i32* %3287
  %3289 = sext i32 %3288 to i64
  %3290 = mul nsw i64 %3289, 200
  %3291 = add i64 %3290, %3286
  %3292 = add i64 %3273, %3291
  %3293 = inttoptr i64 %1045 to i32*
  %3294 = load i32, i32* %3293
  %3295 = sext i32 %3294 to i64
  %3296 = shl nsw i64 %3295, 3
  %3297 = add i64 %3296, %3292
  %3298 = inttoptr i64 %3297 to double*
  %3299 = load double, double* %3298
  %3300 = fmul double %3281, %3299
  store double %3300, double* %2419, align 1, !tbaa !1246
  store i64 0, i64* %2420, align 1, !tbaa !1246
  %3301 = fadd double %3271, %3300
  store double %3301, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %3302 = inttoptr i64 %1057 to double*
  store double %3301, double* %3302
  %3303 = inttoptr i64 %1060 to i32*
  %3304 = load i32, i32* %3303
  %3305 = add i32 %3304, 1
  %3306 = inttoptr i64 %1060 to i32*
  store i32 %3305, i32* %3306
  %3307 = add i64 %2607, -13
  br label %block_406046

block_40700a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit46
  store i32 0, i32* %185, align 1, !tbaa !1244
  store i32 0, i32* %187, align 1, !tbaa !1244
  store i32 0, i32* %188, align 1, !tbaa !1244
  store i32 0, i32* %190, align 1, !tbaa !1244
  %3308 = load i64, i64* %12, align 8
  %3309 = add i64 %3308, -1072
  %3310 = add i64 %1355, 11
  %3311 = load double, double* %32, align 1
  %3312 = inttoptr i64 %3309 to double*
  store double %3311, double* %3312
  br label %block_407015

block_405e08:                                     ; preds = %block_4061f7, %block_405dfe
  %3313 = phi i64 [ %176, %block_405dfe ], [ %2940, %block_4061f7 ]
  %3314 = phi i64 [ %1372, %block_405dfe ], [ %2927, %block_4061f7 ]
  %3315 = phi %struct.Memory* [ %1373, %block_405dfe ], [ %2283, %block_4061f7 ]
  %3316 = add i64 %3314, -6412
  %3317 = inttoptr i64 %3316 to i32*
  %3318 = load i32, i32* %3317
  %3319 = add i32 %3318, -5
  %3320 = icmp ult i32 %3318, 5
  %3321 = zext i1 %3320 to i8
  store i8 %3321, i8* %24, align 1, !tbaa !1248
  %3322 = and i32 %3319, 255
  %3323 = tail call i32 @llvm.ctpop.i32(i32 %3322) #11
  %3324 = trunc i32 %3323 to i8
  %3325 = and i8 %3324, 1
  %3326 = xor i8 %3325, 1
  store i8 %3326, i8* %25, align 1, !tbaa !1261
  %3327 = xor i32 %3319, %3318
  %3328 = lshr i32 %3327, 4
  %3329 = trunc i32 %3328 to i8
  %3330 = and i8 %3329, 1
  store i8 %3330, i8* %26, align 1, !tbaa !1262
  %3331 = icmp eq i32 %3319, 0
  %3332 = zext i1 %3331 to i8
  store i8 %3332, i8* %27, align 1, !tbaa !1263
  %3333 = lshr i32 %3319, 31
  %3334 = trunc i32 %3333 to i8
  store i8 %3334, i8* %28, align 1, !tbaa !1264
  %3335 = lshr i32 %3318, 31
  %3336 = xor i32 %3333, %3335
  %3337 = add nuw nsw i32 %3336, %3335
  %3338 = icmp eq i32 %3337, 2
  %3339 = zext i1 %3338 to i8
  store i8 %3339, i8* %29, align 1, !tbaa !1265
  %3340 = icmp ne i8 %3334, 0
  %3341 = xor i1 %3340, %3338
  %3342 = select i1 %3341, i64 13, i64 1381
  %3343 = add i64 %3313, %3342
  br i1 %3341, label %block_405e15, label %block_40636d

block_405dd0:                                     ; preds = %block_405d44
  %3344 = add i64 %698, 10
  %3345 = inttoptr i64 %790 to i32*
  store i32 0, i32* %3345
  br label %block_405dda

block_407801:                                     ; preds = %block_407814, %block_4077f7
  %3346 = phi i64 [ %447, %block_4077f7 ], [ %3236, %block_407814 ]
  %3347 = phi %struct.Memory* [ %444, %block_4077f7 ], [ %3347, %block_407814 ]
  %3348 = inttoptr i64 %446 to i32*
  %3349 = load i32, i32* %3348
  %3350 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %3351 = sub i32 %3349, %3350
  %3352 = lshr i32 %3351, 31
  %3353 = lshr i32 %3349, 31
  %3354 = lshr i32 %3350, 31
  %3355 = xor i32 %3354, %3353
  %3356 = xor i32 %3352, %3353
  %3357 = add nuw nsw i32 %3356, %3355
  %3358 = icmp eq i32 %3357, 2
  %3359 = icmp ne i32 %3352, 0
  %3360 = xor i1 %3359, %3358
  %3361 = select i1 %3360, i64 19, i64 87
  %3362 = add i64 %3346, %3361
  br i1 %3360, label %block_407814, label %block_407858

block_407768:                                     ; preds = %block_40754e
  %3363 = inttoptr i64 %1685 to i32*
  %3364 = load i32, i32* %3363
  %3365 = add i32 %3364, 1
  %3366 = inttoptr i64 %1685 to i32*
  store i32 %3365, i32* %3366
  %3367 = add i64 %1488, -561
  br label %block_407537

block_406ead:                                     ; preds = %block_406953
  %3368 = add i64 %1395, -6404
  %3369 = inttoptr i64 %3368 to i32*
  %3370 = load i32, i32* %3369
  %3371 = add i32 %3370, 1
  %3372 = inttoptr i64 %3368 to i32*
  store i32 %3371, i32* %3372
  %3373 = add i64 %1410, -1393
  br label %block_40693c

block_407514:                                     ; preds = %block_4074d6, %block_4074ff
  %3374 = phi i64 [ %1571, %block_4074d6 ], [ %56, %block_4074ff ]
  %3375 = phi %struct.Memory* [ %1647, %block_4074d6 ], [ %55, %block_4074ff ]
  %3376 = load i64, i64* %12, align 8
  %3377 = add i64 %3376, -6420
  %3378 = inttoptr i64 %3377 to i32*
  %3379 = load i32, i32* %3378
  %3380 = add i32 %3379, 1
  %3381 = inttoptr i64 %3377 to i32*
  store i32 %3380, i32* %3381
  %3382 = add i64 %3374, -75
  br label %block_4074c9

block_406601:                                     ; preds = %block_40660e, %block_40658e
  %3383 = phi i64 [ %247, %block_40658e ], [ %3269, %block_40660e ]
  %3384 = phi %struct.Memory* [ %1358, %block_40658e ], [ %3384, %block_40660e ]
  %3385 = inttoptr i64 %246 to i32*
  %3386 = load i32, i32* %3385
  %3387 = add i32 %3386, -5
  %3388 = lshr i32 %3387, 31
  %3389 = lshr i32 %3386, 31
  %3390 = xor i32 %3388, %3389
  %3391 = add nuw nsw i32 %3390, %3389
  %3392 = icmp eq i32 %3391, 2
  %3393 = icmp ne i32 %3388, 0
  %3394 = xor i1 %3393, %3392
  %3395 = select i1 %3394, i64 13, i64 139
  %3396 = add i64 %3383, %3395
  br i1 %3394, label %block_40660e, label %block_40668c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403dd0_remapx(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403dd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %8, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %7, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -32
  %24 = load i64, i64* %6, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %14, -40
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = add i64 %14, -36
  %32 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast [32 x %union.VectorReg]* %11 to i32*
  %35 = getelementptr inbounds i8, i8* %32, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = bitcast i64* %33 to i32*
  %38 = getelementptr inbounds i8, i8* %32, i64 12
  %39 = bitcast i8* %38 to i32*
  %40 = add i64 %14, -16
  %41 = bitcast %union.VectorReg* %12 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast i64* %42 to double*
  %44 = add i64 %14, -32
  %45 = bitcast [32 x %union.VectorReg]* %11 to double*
  %46 = add i64 %14, -44
  %47 = bitcast i64* %33 to double*
  %48 = add i64 %14, -24
  br label %block_403de7

block_404058:                                     ; preds = %block_403df8
  %49 = inttoptr i64 %26 to i32*
  %50 = load i32, i32* %49
  %51 = add i32 %50, 1
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %4, align 8, !tbaa !1240
  %53 = inttoptr i64 %26 to i32*
  store i32 %51, i32* %53
  br label %block_403de7

block_403f73:                                     ; preds = %block_403f03, %block_403f7d
  %54 = phi %struct.Memory* [ %65, %block_403f03 ], [ %54, %block_403f7d ]
  %55 = inttoptr i64 %46 to i32*
  %56 = load i32, i32* %55
  %57 = add i32 %56, -5
  %58 = lshr i32 %57, 31
  %59 = lshr i32 %56, 31
  %60 = xor i32 %58, %59
  %61 = add nuw nsw i32 %60, %59
  %62 = icmp eq i32 %61, 2
  %63 = icmp ne i32 %58, 0
  %64 = xor i1 %63, %62
  br i1 %64, label %block_403f7d, label %block_404006

block_403e70:                                     ; preds = %block_403e7a, %block_403e02
  %65 = phi %struct.Memory* [ %169, %block_403e02 ], [ %65, %block_403e7a ]
  %66 = inttoptr i64 %46 to i32*
  %67 = load i32, i32* %66
  %68 = add i32 %67, -5
  %69 = lshr i32 %68, 31
  %70 = lshr i32 %67, 31
  %71 = xor i32 %69, %70
  %72 = add nuw nsw i32 %71, %70
  %73 = icmp eq i32 %72, 2
  %74 = icmp ne i32 %69, 0
  %75 = xor i1 %74, %73
  br i1 %75, label %block_403e7a, label %block_403f03

block_403f7d:                                     ; preds = %block_403f73
  %76 = inttoptr i64 %44 to i64*
  %77 = load i64, i64* %76
  %78 = inttoptr i64 %26 to i32*
  %79 = load i32, i32* %78
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, 200
  %82 = add i64 %81, %77
  %83 = inttoptr i64 %31 to i32*
  %84 = load i32, i32* %83
  %85 = sext i32 %84 to i64
  %86 = mul nsw i64 %85, 40
  %87 = add i64 %86, %82
  %88 = add i64 %87, 24
  %89 = inttoptr i64 %88 to double*
  %90 = load double, double* %89
  %91 = sext i32 %56 to i64
  %92 = shl nsw i64 %91, 3
  %93 = add i64 %92, ptrtoint (%map4_type* @map4 to i64)
  %94 = inttoptr i64 %93 to double*
  %95 = load double, double* %94
  %96 = inttoptr i64 %48 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %81, %97
  %99 = add i64 %86, %98
  %100 = add i64 %92, %99
  %101 = inttoptr i64 %100 to double*
  %102 = load double, double* %101
  %103 = fmul double %95, %102
  store double %103, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %104 = fadd double %90, %103
  store double %104, double* %45, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %105 = inttoptr i64 %88 to double*
  store double %104, double* %105
  %106 = inttoptr i64 %46 to i32*
  %107 = load i32, i32* %106
  %108 = add i32 %107, 1
  %109 = inttoptr i64 %46 to i32*
  store i32 %108, i32* %109
  br label %block_403f73

block_40406b:                                     ; preds = %block_403de7
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %113 = icmp ult i32 %159, 5
  %114 = zext i1 %113 to i8
  %115 = and i32 %160, 255
  %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #11
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = xor i32 %160, %159
  %121 = lshr i32 %120, 4
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = icmp eq i32 %160, 0
  %125 = zext i1 %124 to i8
  %126 = zext i1 %166 to i8
  store i8 %114, i8* %28, align 1, !tbaa !1248
  store i8 %119, i8* %110, align 1, !tbaa !1261
  store i8 %123, i8* %29, align 1, !tbaa !1262
  store i8 %125, i8* %111, align 1, !tbaa !1263
  store i8 %162, i8* %30, align 1, !tbaa !1264
  store i8 %126, i8* %112, align 1, !tbaa !1265
  %127 = inttoptr i64 %15 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %10, align 8, !tbaa !1240
  %129 = inttoptr i64 %14 to i64*
  %130 = load i64, i64* %129
  store i64 %130, i64* %3, align 8, !tbaa !1240
  %131 = add i64 %14, 8
  store i64 %131, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %157

block_404006:                                     ; preds = %block_403f73
  %132 = inttoptr i64 %48 to i64*
  %133 = load i64, i64* %132
  %134 = inttoptr i64 %26 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 200
  %138 = add i64 %137, %133
  %139 = inttoptr i64 %31 to i32*
  %140 = load i32, i32* %139
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %141, 40
  %143 = add i64 %142, %138
  %144 = add i64 %143, 32
  %145 = inttoptr i64 %144 to double*
  %146 = load double, double* %145
  store double %146, double* %45, align 1, !tbaa !1246
  store double 0.000000e+00, double* %47, align 1, !tbaa !1246
  %147 = inttoptr i64 %44 to i64*
  %148 = load i64, i64* %147
  %149 = add i64 %137, %148
  store i64 %142, i64* %5, align 8, !tbaa !1240
  %150 = add i64 %142, %149
  %151 = add i64 %150, 32
  %152 = inttoptr i64 %151 to double*
  store double %146, double* %152
  %153 = inttoptr i64 %31 to i32*
  %154 = load i32, i32* %153
  %155 = add i32 %154, 1
  %156 = inttoptr i64 %31 to i32*
  store i32 %155, i32* %156
  br label %block_403df8

block_403de7:                                     ; preds = %block_404058, %block_403dd0
  %157 = phi %struct.Memory* [ %2, %block_403dd0 ], [ %169, %block_404058 ]
  %158 = inttoptr i64 %26 to i32*
  %159 = load i32, i32* %158
  %160 = add i32 %159, -5
  %161 = lshr i32 %160, 31
  %162 = trunc i32 %161 to i8
  %163 = lshr i32 %159, 31
  %164 = xor i32 %161, %163
  %165 = add nuw nsw i32 %164, %163
  %166 = icmp eq i32 %165, 2
  %167 = icmp ne i8 %162, 0
  %168 = xor i1 %167, %166
  br i1 %168, label %block_403df1, label %block_40406b

block_403df8:                                     ; preds = %block_403df1, %block_404006
  %169 = phi %struct.Memory* [ %157, %block_403df1 ], [ %54, %block_404006 ]
  %170 = inttoptr i64 %31 to i32*
  %171 = load i32, i32* %170
  %172 = add i32 %171, -5
  %173 = lshr i32 %172, 31
  %174 = lshr i32 %171, 31
  %175 = xor i32 %173, %174
  %176 = add nuw nsw i32 %175, %174
  %177 = icmp eq i32 %176, 2
  %178 = icmp ne i32 %173, 0
  %179 = xor i1 %178, %177
  br i1 %179, label %block_403e02, label %block_404058

block_403f03:                                     ; preds = %block_403e70
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  %180 = inttoptr i64 %40 to i64*
  %181 = load i64, i64* %180
  %182 = inttoptr i64 %26 to i32*
  %183 = load i32, i32* %182
  %184 = sext i32 %183 to i64
  %185 = mul nsw i64 %184, 200
  %186 = add i64 %185, %181
  %187 = inttoptr i64 %31 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, 40
  %191 = add i64 %190, %186
  %192 = add i64 %191, 32
  %193 = inttoptr i64 %192 to double*
  %194 = load double, double* %193
  store double %194, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %195 = inttoptr i64 %44 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %185, %196
  %198 = add i64 %190, %197
  %199 = add i64 %198, 16
  %200 = inttoptr i64 %199 to double*
  store double %194, double* %200
  %201 = inttoptr i64 %44 to i64*
  %202 = load i64, i64* %201
  %203 = inttoptr i64 %26 to i32*
  %204 = load i32, i32* %203
  %205 = sext i32 %204 to i64
  %206 = mul nsw i64 %205, 200
  %207 = add i64 %206, %202
  %208 = inttoptr i64 %31 to i32*
  %209 = load i32, i32* %208
  %210 = sext i32 %209 to i64
  %211 = mul nsw i64 %210, 40
  %212 = add i64 %211, %207
  %213 = add i64 %212, 24
  %214 = load double, double* %45, align 1
  %215 = inttoptr i64 %213 to double*
  store double %214, double* %215
  %216 = inttoptr i64 %46 to i32*
  store i32 0, i32* %216
  br label %block_403f73

block_403df1:                                     ; preds = %block_403de7
  %217 = inttoptr i64 %31 to i32*
  store i32 0, i32* %217
  br label %block_403df8

block_403e02:                                     ; preds = %block_403df8
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  %218 = inttoptr i64 %40 to i64*
  %219 = load i64, i64* %218
  %220 = inttoptr i64 %26 to i32*
  %221 = load i32, i32* %220
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, 200
  %224 = add i64 %223, %219
  %225 = sext i32 %171 to i64
  %226 = mul nsw i64 %225, 40
  %227 = add i64 %226, %224
  %228 = inttoptr i64 %227 to double*
  %229 = load double, double* %228
  store double %229, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %230 = inttoptr i64 %44 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %223, %231
  %233 = add i64 %226, %232
  %234 = inttoptr i64 %233 to double*
  store double %229, double* %234
  %235 = inttoptr i64 %44 to i64*
  %236 = load i64, i64* %235
  %237 = inttoptr i64 %26 to i32*
  %238 = load i32, i32* %237
  %239 = sext i32 %238 to i64
  %240 = mul nsw i64 %239, 200
  %241 = add i64 %240, %236
  %242 = inttoptr i64 %31 to i32*
  %243 = load i32, i32* %242
  %244 = sext i32 %243 to i64
  %245 = mul nsw i64 %244, 40
  %246 = add i64 %245, %241
  %247 = add i64 %246, 8
  %248 = load double, double* %45, align 1
  %249 = inttoptr i64 %247 to double*
  store double %248, double* %249
  %250 = inttoptr i64 %46 to i32*
  store i32 0, i32* %250
  br label %block_403e70

block_403e7a:                                     ; preds = %block_403e70
  %251 = inttoptr i64 %44 to i64*
  %252 = load i64, i64* %251
  %253 = inttoptr i64 %26 to i32*
  %254 = load i32, i32* %253
  %255 = sext i32 %254 to i64
  %256 = mul nsw i64 %255, 200
  %257 = add i64 %256, %252
  %258 = inttoptr i64 %31 to i32*
  %259 = load i32, i32* %258
  %260 = sext i32 %259 to i64
  %261 = mul nsw i64 %260, 40
  %262 = add i64 %261, %257
  %263 = add i64 %262, 8
  %264 = inttoptr i64 %263 to double*
  %265 = load double, double* %264
  %266 = sext i32 %67 to i64
  %267 = shl nsw i64 %266, 3
  %268 = add i64 %267, ptrtoint (%map2_type* @map2 to i64)
  %269 = inttoptr i64 %268 to double*
  %270 = load double, double* %269
  %271 = inttoptr i64 %40 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %256, %272
  %274 = add i64 %261, %273
  %275 = add i64 %267, %274
  %276 = inttoptr i64 %275 to double*
  %277 = load double, double* %276
  %278 = fmul double %270, %277
  store double %278, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %279 = fadd double %265, %278
  store double %279, double* %45, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %280 = inttoptr i64 %263 to double*
  store double %279, double* %280
  %281 = inttoptr i64 %46 to i32*
  %282 = load i32, i32* %281
  %283 = add i32 %282, 1
  %284 = inttoptr i64 %46 to i32*
  store i32 %283, i32* %284
  br label %block_403e70
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405960_timer_clear(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_405960:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = bitcast %union.VectorReg* %9 to i8*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %16 = bitcast %union.VectorReg* %9 to i32*
  store i32 0, i32* %16, align 1, !tbaa !1244
  %17 = getelementptr inbounds i8, i8* %14, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !1244
  %19 = bitcast i64* %15 to i32*
  store i32 0, i32* %19, align 1, !tbaa !1244
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 1, !tbaa !1244
  %22 = add i64 %11, -12
  %23 = load i32, i32* %5, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = inttoptr i64 %22 to i32*
  %26 = load i32, i32* %25
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %6, align 8, !tbaa !1240
  %28 = shl nsw i64 %27, 3
  %29 = add i64 %28, add (i64 ptrtoint (%seg_6220a0__bss_type* @seg_6220a0__bss to i64), i64 16)
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %12 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = inttoptr i64 %11 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %3, align 8, !tbaa !1240
  %37 = add i64 %11, 8
  store i64 %37, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_408900_mortar(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408900:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %10, align 8, !tbaa !1240
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %8, align 8, !tbaa !1240
  store i64 4294967295, i64* %6, align 8, !tbaa !1240
  %22 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %23, 600
  %25 = add i64 %13, -128
  %26 = trunc i64 %24 to i32
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = inttoptr i64 %25 to i32*
  %29 = load i32, i32* %28
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %7, align 8, !tbaa !1240
  %31 = add i64 %1, 94112
  %32 = add i64 %1, 48
  %33 = add i64 %13, -176
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %9, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  %36 = load i64, i64* %3, align 8
  store i64 ptrtoint (%nemo_type* @nemo to i64), i64* %8, align 8, !tbaa !1240
  store i64 4294967295, i64* %6, align 8, !tbaa !1240
  %37 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %38 = shl i32 %37, 3
  %39 = load i64, i64* %10, align 8
  %40 = add i64 %39, -124
  %41 = inttoptr i64 %40 to i32*
  store i32 %38, i32* %41
  %42 = inttoptr i64 %40 to i32*
  %43 = load i32, i32* %42
  %44 = zext i32 %43 to i64
  store i64 %44, i64* %7, align 8, !tbaa !1240
  %45 = add i64 %36, 94064
  %46 = add i64 %36, 36
  %47 = load i64, i64* %9, align 8, !tbaa !1240
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %46, i64* %49
  store i64 %48, i64* %9, align 8, !tbaa !1240
  %50 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %45, %struct.Memory* %35)
  %51 = load i64, i64* %3, align 8
  store i64 ptrtoint (%vassign_type* @vassign to i64), i64* %8, align 8, !tbaa !1240
  store i64 4294967295, i64* %6, align 8, !tbaa !1240
  %52 = load i64, i64* %10, align 8
  %53 = add i64 %52, -124
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %7, align 8, !tbaa !1240
  %57 = add i64 %51, 94028
  %58 = add i64 %51, 23
  %59 = load i64, i64* %9, align 8, !tbaa !1240
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61
  store i64 %60, i64* %9, align 8, !tbaa !1240
  %62 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %57, %struct.Memory* %50)
  %63 = load i64, i64* %3, align 8
  store i64 ptrtoint (%emo_type* @emo to i64), i64* %8, align 8, !tbaa !1240
  store i64 4294967295, i64* %6, align 8, !tbaa !1240
  %64 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %65 = shl i32 %64, 7
  %66 = load i64, i64* %10, align 8
  %67 = add i64 %66, -128
  %68 = inttoptr i64 %67 to i32*
  store i32 %65, i32* %68
  %69 = inttoptr i64 %67 to i32*
  %70 = load i32, i32* %69
  %71 = zext i32 %70 to i64
  store i64 %71, i64* %7, align 8, !tbaa !1240
  %72 = add i64 %63, 94005
  %73 = add i64 %63, 36
  %74 = load i64, i64* %9, align 8, !tbaa !1240
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76
  store i64 %75, i64* %9, align 8, !tbaa !1240
  %77 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %3, align 8
  store i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64* %8, align 8, !tbaa !1240
  store i64 0, i64* %6, align 8, !tbaa !1240
  %79 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, 12
  %82 = load i64, i64* %10, align 8
  %83 = add i64 %82, -132
  %84 = trunc i64 %81 to i32
  %85 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %85
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %7, align 8, !tbaa !1240
  %89 = add i64 %78, 94033
  %90 = add i64 %78, 37
  %91 = load i64, i64* %9, align 8, !tbaa !1240
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93
  store i64 %92, i64* %9, align 8, !tbaa !1240
  %94 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %89, %struct.Memory* %77)
  %95 = load i64, i64* %3, align 8
  store i64 ptrtoint (%diagn_type* @diagn to i64), i64* %8, align 8, !tbaa !1240
  store i64 4294967295, i64* %6, align 8, !tbaa !1240
  %96 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %97, 24
  %99 = load i64, i64* %10, align 8
  %100 = add i64 %99, -136
  %101 = trunc i64 %98 to i32
  %102 = inttoptr i64 %100 to i32*
  store i32 %101, i32* %102
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %7, align 8, !tbaa !1240
  %106 = add i64 %95, 93932
  %107 = add i64 %95, 40
  %108 = load i64, i64* %9, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110
  store i64 %109, i64* %9, align 8, !tbaa !1240
  %111 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %106, %struct.Memory* %94)
  %112 = load i64, i64* %10, align 8
  %113 = add i64 %112, -4
  %114 = load i64, i64* %3, align 8
  %115 = inttoptr i64 %113 to i32*
  store i32 -1, i32* %115
  %116 = add i64 %112, -8
  %117 = add i64 %114, 14
  %118 = inttoptr i64 %116 to i32*
  store i32 0, i32* %118
  %119 = add i64 %112, -76
  %120 = add i64 %112, -80
  %121 = add i64 %112, -84
  %122 = add i64 %112, -108
  %123 = add i64 %112, -16
  %124 = add i64 %112, -32
  %125 = add i64 %112, -112
  %126 = add i64 %112, -116
  br label %block_4089ea

block_40c7f8:                                     ; preds = %block_40c7d7
  %127 = sext i32 %8505 to i64
  %128 = mul nsw i64 %127, 48
  %129 = add i64 %128, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130
  %132 = sext i32 %131 to i64
  %133 = shl nsw i64 %132, 3
  %134 = add i64 %8500, add (i64 ptrtoint (%sje_type* @sje to i64), i64 84)
  %135 = add i64 %134, %133
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136
  %138 = mul nsw i64 %127, 96
  %139 = add i64 %138, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 64)
  %140 = add i64 %8519, 74
  %141 = inttoptr i64 %139 to i32*
  store i32 %137, i32* %141
  br label %block_40c842

block_40efe9:                                     ; preds = %block_40efe4, %block_40edcb
  %142 = phi i64 [ %5047, %block_40edcb ], [ %1780, %block_40efe4 ]
  %143 = phi i64 [ %1217, %block_40edcb ], [ %1784, %block_40efe4 ]
  %144 = phi %struct.Memory* [ %5048, %block_40edcb ], [ %1783, %block_40efe4 ]
  %145 = add i64 %142, -20
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146
  %148 = add i32 %147, 1
  %149 = inttoptr i64 %145 to i32*
  store i32 %148, i32* %149
  %150 = add i64 %143, -1582
  br label %block_40e9bb

block_40efda:                                     ; preds = %block_40eeb7, %block_40efd5
  %151 = phi i64 [ %5290, %block_40efd5 ], [ %3771, %block_40eeb7 ]
  %152 = phi i64 [ %916, %block_40efd5 ], [ %3770, %block_40eeb7 ]
  %153 = phi %struct.Memory* [ %5213, %block_40efd5 ], [ %5048, %block_40eeb7 ]
  %154 = add i64 %152, 5
  br label %block_40efe4

block_40bfd3:                                     ; preds = %block_40bf80
  %155 = mul nsw i64 %7631, 96
  %156 = add i64 %155, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %157 = inttoptr i64 %156 to i32*
  %158 = load i32, i32* %157
  %159 = inttoptr i64 %4855 to i32*
  %160 = load i32, i32* %159
  %161 = sext i32 %160 to i64
  %162 = mul nsw i64 %161, 96
  %163 = add i64 %162, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %163, i64* %6292, align 8, !tbaa !1240
  %164 = inttoptr i64 %163 to i32*
  store i32 %158, i32* %164
  %165 = inttoptr i64 %4855 to i32*
  %166 = load i32, i32* %165
  %167 = sext i32 %166 to i64
  %168 = mul nsw i64 %167, 48
  store i64 %168, i64* %11, align 8, !tbaa !1240
  %169 = add i64 %168, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 40)
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %4866, align 8, !tbaa !1240
  %173 = mul nsw i64 %167, 96
  %174 = add i64 %173, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 4)
  %175 = inttoptr i64 %174 to i32*
  store i32 %171, i32* %175
  %176 = inttoptr i64 %4865 to i32*
  %177 = load i32, i32* %176
  %178 = sext i32 %177 to i64
  %179 = mul nsw i64 %178, 96
  %180 = add i64 %179, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181
  %183 = sext i32 %182 to i64
  %184 = mul nsw i64 %183, 48
  %185 = add i64 %184, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 24)
  %186 = inttoptr i64 %185 to i32*
  store i32 1, i32* %186
  %187 = inttoptr i64 %4855 to i32*
  %188 = load i32, i32* %187
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, 48
  %191 = add i64 %190, ptrtoint (%if_1_edge_type* @if_1_edge to i64)
  %192 = add i64 %7638, 161
  %193 = inttoptr i64 %191 to i32*
  store i32 1, i32* %193
  br label %block_40c074

block_40a7c8:                                     ; preds = %block_40a7a7
  %194 = sext i32 %2083 to i64
  %195 = mul nsw i64 %194, 96
  %196 = add i64 %195, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = inttoptr i64 %124 to i32*
  store i32 %198, i32* %199
  %200 = inttoptr i64 %124 to i32*
  %201 = load i32, i32* %200
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %202, 24
  %204 = add i64 %203, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %205 = inttoptr i64 %204 to i32*
  %206 = load i32, i32* %205
  %207 = icmp ne i32 %206, 3
  %208 = select i1 %207, i64 138, i64 58
  %209 = add i64 %2095, %208
  br i1 %207, label %block_40a7c8.block_40a852_crit_edge, label %block_40a802

block_40a7c8.block_40a852_crit_edge:              ; preds = %block_40a7c8
  %210 = inttoptr i64 %116 to i32*
  %211 = load i32, i32* %210
  br label %block_40a852

block_40d7cb:                                     ; preds = %block_40d772
  %212 = mul nsw i64 %2646, 96
  %213 = add i64 %212, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = inttoptr i64 %4865 to i32*
  store i32 %215, i32* %216
  %217 = inttoptr i64 %4865 to i32*
  %218 = load i32, i32* %217
  %219 = sext i32 %218 to i64
  %220 = mul nsw i64 %219, 24
  %221 = add i64 %220, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %222 = inttoptr i64 %221 to i32*
  %223 = load i32, i32* %222
  %224 = icmp ne i32 %223, 3
  %225 = select i1 %224, i64 91, i64 58
  %226 = add i64 %2653, %225
  br i1 %224, label %block_40d7cb.block_40d826_crit_edge, label %block_40d805

block_40d7cb.block_40d826_crit_edge:              ; preds = %block_40d7cb
  %227 = inttoptr i64 %4855 to i32*
  %228 = load i32, i32* %227
  br label %block_40d826

block_40c7b8:                                     ; preds = %block_40c6c1, %block_40c715
  %229 = phi i64 [ %9210, %block_40c6c1 ], [ %8056, %block_40c715 ]
  %230 = phi %struct.Memory* [ %6821, %block_40c6c1 ], [ %6821, %block_40c715 ]
  %231 = inttoptr i64 %4865 to i32*
  %232 = load i32, i32* %231
  %233 = sext i32 %232 to i64
  %234 = mul nsw i64 %233, 24
  %235 = add i64 %234, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %236 = inttoptr i64 %235 to i32*
  %237 = load i32, i32* %236
  %238 = icmp ne i32 %237, 3
  %239 = select i1 %238, i64 138, i64 31
  %240 = add i64 %229, %239
  br i1 %238, label %block_40c842, label %block_40c7d7

block_40bd49:                                     ; preds = %block_40bd28, %block_40bcee.block_40bd49_crit_edge
  %241 = phi i32 [ %1414, %block_40bcee.block_40bd49_crit_edge ], [ %1643, %block_40bd28 ]
  %242 = phi i64 [ %1412, %block_40bcee.block_40bd49_crit_edge ], [ %1657, %block_40bd28 ]
  %243 = sext i32 %241 to i64
  %244 = shl nsw i64 %243, 2
  %245 = add i64 %244, ptrtoint (%newe_type* @newe to i64)
  %246 = inttoptr i64 %245 to i32*
  %247 = load i32, i32* %246
  %248 = add i32 %247, 1
  %249 = inttoptr i64 %245 to i32*
  store i32 %248, i32* %249
  %250 = inttoptr i64 %4855 to i32*
  %251 = load i32, i32* %250
  %252 = sext i32 %251 to i64
  %253 = mul nsw i64 %252, 48
  %254 = add i64 %253, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 40)
  %255 = inttoptr i64 %254 to i32*
  store i32 1, i32* %255
  %256 = inttoptr i64 %4865 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 24
  %260 = add i64 %259, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %261 = inttoptr i64 %260 to i32*
  %262 = load i32, i32* %261
  %263 = icmp ne i32 %262, 2
  %264 = select i1 %263, i64 247, i64 84
  %265 = add i64 %242, %264
  br i1 %263, label %block_40be40, label %block_40bd9d

block_408fb3:                                     ; preds = %block_408f7a
  %266 = mul nsw i64 %6209, 96
  %267 = add i64 %266, ptrtoint (%sje_type* @sje to i64)
  %268 = inttoptr i64 %267 to i32*
  %269 = load i32, i32* %268
  %270 = inttoptr i64 %116 to i32*
  %271 = load i32, i32* %270
  %272 = sub i32 %269, %271
  %273 = lshr i32 %272, 31
  %274 = lshr i32 %269, 31
  %275 = lshr i32 %271, 31
  %276 = xor i32 %275, %274
  %277 = xor i32 %273, %274
  %278 = add nuw nsw i32 %277, %276
  %279 = icmp eq i32 %278, 2
  %280 = icmp ne i32 %273, 0
  %281 = xor i1 %280, %279
  %282 = select i1 %281, i64 32, i64 79
  %283 = add i64 %6216, %282
  br i1 %281, label %block_408fd3, label %block_409002

block_40b7ad:                                     ; preds = %block_40b631, %block_40b612
  %284 = phi i64 [ %9400, %block_40b631 ], [ %1048, %block_40b612 ]
  %285 = inttoptr i64 %124 to i32*
  %286 = load i32, i32* %285
  %287 = sext i32 %286 to i64
  %288 = mul nsw i64 %287, 24
  %289 = add i64 %288, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %290 = inttoptr i64 %289 to i32*
  %291 = load i32, i32* %290
  %292 = icmp ne i32 %291, 3
  %293 = select i1 %292, i64 216, i64 31
  %294 = add i64 %284, %293
  br i1 %292, label %block_40b7ad.block_40b885_crit_edge, label %block_40b7cc

block_40b7ad.block_40b885_crit_edge:              ; preds = %block_40b7ad
  %295 = inttoptr i64 %116 to i32*
  %296 = load i32, i32* %295
  br label %block_40b885

block_40d791:                                     ; preds = %block_40d772
  %297 = shl nsw i64 %2646, 2
  %298 = add i64 %297, ptrtoint (%newe_type* @newe to i64)
  %299 = inttoptr i64 %298 to i32*
  %300 = load i32, i32* %299
  %301 = add i32 %300, 1
  %302 = inttoptr i64 %298 to i32*
  store i32 %301, i32* %302
  %303 = inttoptr i64 %4855 to i32*
  %304 = load i32, i32* %303
  %305 = sext i32 %304 to i64
  %306 = mul nsw i64 %305, 48
  %307 = add i64 %306, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 24)
  %308 = add i64 %2653, 53
  %309 = inttoptr i64 %307 to i32*
  store i32 1, i32* %309
  br label %block_40db31

block_40cf83:                                     ; preds = %block_40cf2f
  %310 = mul nsw i64 %500, 96
  %311 = add i64 %310, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %312 = inttoptr i64 %311 to i32*
  %313 = load i32, i32* %312
  %314 = inttoptr i64 %4855 to i32*
  %315 = load i32, i32* %314
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %316, 96
  %318 = add i64 %317, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %318, i64* %6292, align 8, !tbaa !1240
  %319 = add i64 %317, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 88)
  %320 = inttoptr i64 %319 to i32*
  store i32 %313, i32* %320
  %321 = inttoptr i64 %4855 to i32*
  %322 = load i32, i32* %321
  %323 = sext i32 %322 to i64
  %324 = mul nsw i64 %323, 48
  store i64 %324, i64* %11, align 8, !tbaa !1240
  %325 = add i64 %324, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %326 = inttoptr i64 %325 to i32*
  %327 = load i32, i32* %326
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %4866, align 8, !tbaa !1240
  %329 = mul nsw i64 %323, 96
  %330 = add i64 %329, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 92)
  %331 = inttoptr i64 %330 to i32*
  store i32 %327, i32* %331
  %332 = inttoptr i64 %4865 to i32*
  %333 = load i32, i32* %332
  %334 = sext i32 %333 to i64
  %335 = mul nsw i64 %334, 96
  %336 = add i64 %335, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = sext i32 %338 to i64
  %340 = mul nsw i64 %339, 48
  %341 = add i64 %340, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 32)
  %342 = inttoptr i64 %341 to i32*
  store i32 1, i32* %342
  %343 = inttoptr i64 %4855 to i32*
  %344 = load i32, i32* %343
  %345 = sext i32 %344 to i64
  %346 = mul nsw i64 %345, 48
  %347 = add i64 %346, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 44)
  %348 = add i64 %507, 163
  %349 = inttoptr i64 %347 to i32*
  store i32 1, i32* %349
  br label %block_40d026

block_40e763:                                     ; preds = %block_40e759, %block_40e74f
  %350 = phi i64 [ %4790, %block_40e759 ], [ %4490, %block_40e74f ]
  %351 = inttoptr i64 %4855 to i32*
  %352 = load i32, i32* %351
  %353 = sext i32 %352 to i64
  %354 = shl nsw i64 %353, 2
  %355 = add i64 %354, ptrtoint (%newi_type* @newi to i64)
  %356 = inttoptr i64 %355 to i32*
  %357 = load i32, i32* %356
  %358 = add i32 %357, 9
  %359 = inttoptr i64 %355 to i32*
  store i32 %358, i32* %359
  %360 = inttoptr i64 %4855 to i32*
  %361 = load i32, i32* %360
  %362 = sext i32 %361 to i64
  %363 = mul nsw i64 %362, 24
  %364 = add i64 %363, add (i64 ptrtoint (%fassign_type* @fassign to i64), i64 20)
  %365 = add i64 %350, 53
  %366 = inttoptr i64 %364 to i32*
  store i32 1, i32* %366
  br label %block_40e798

block_40ce90:                                     ; preds = %block_40ce86
  %367 = inttoptr i64 %4855 to i32*
  %368 = load i32, i32* %367
  %369 = sext i32 %368 to i64
  %370 = shl nsw i64 %369, 2
  %371 = add i64 %370, ptrtoint (%newe_type* @newe to i64)
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = add i32 %373, 1
  %375 = inttoptr i64 %371 to i32*
  store i32 %374, i32* %375
  %376 = inttoptr i64 %4855 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  %379 = mul nsw i64 %378, 48
  %380 = add i64 %379, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 44)
  %381 = add i64 %772, 53
  %382 = inttoptr i64 %380 to i32*
  store i32 1, i32* %382
  br label %block_40d0c4

block_40d754:                                     ; preds = %block_40d70a, %block_40d6ca, %block_40d6e9
  %383 = phi i64 [ %2832, %block_40d6ca ], [ %654, %block_40d6e9 ], [ %8942, %block_40d70a ]
  %384 = phi %struct.Memory* [ %2822, %block_40d6ca ], [ %2822, %block_40d6e9 ], [ %2822, %block_40d70a ]
  %385 = add i64 %383, 5
  br label %block_40d759

block_40df51:                                     ; preds = %block_40df33
  %386 = mul nsw i64 %475, 96
  %387 = add i64 %386, ptrtoint (%sje_type* @sje to i64)
  %388 = inttoptr i64 %387 to i32*
  %389 = load i32, i32* %388
  %390 = mul nsw i64 %682, 96
  %391 = add i64 %390, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 16)
  %392 = add i64 %482, 47
  %393 = inttoptr i64 %391 to i32*
  store i32 %389, i32* %393
  br label %block_40df80

block_40dfe1:                                     ; preds = %block_40dfa8
  %394 = inttoptr i64 %4855 to i32*
  %395 = load i32, i32* %394
  %396 = sext i32 %395 to i64
  %397 = shl nsw i64 %396, 2
  %398 = add i64 %397, ptrtoint (%newe_type* @newe to i64)
  %399 = inttoptr i64 %398 to i32*
  %400 = load i32, i32* %399
  %401 = add i32 %400, 1
  %402 = inttoptr i64 %398 to i32*
  store i32 %401, i32* %402
  %403 = inttoptr i64 %4855 to i32*
  %404 = load i32, i32* %403
  %405 = sext i32 %404 to i64
  %406 = mul nsw i64 %405, 48
  %407 = add i64 %406, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 4)
  %408 = inttoptr i64 %407 to i32*
  store i32 1, i32* %408
  %409 = inttoptr i64 %4865 to i32*
  %410 = load i32, i32* %409
  %411 = sext i32 %410 to i64
  %412 = mul nsw i64 %411, 24
  %413 = add i64 %412, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %414 = inttoptr i64 %413 to i32*
  %415 = load i32, i32* %414
  %416 = icmp ne i32 %415, 2
  %417 = select i1 %416, i64 132, i64 84
  %418 = add i64 %2562, %417
  br i1 %416, label %block_40e065, label %block_40e035

block_40ef3c:                                     ; preds = %block_40ef32
  %419 = inttoptr i64 %5308 to i32*
  %420 = load i32, i32* %419
  %421 = inttoptr i64 %5309 to i32*
  %422 = load i32, i32* %421
  %423 = sext i32 %422 to i64
  %424 = mul nsw i64 %423, 2400
  %425 = add i64 %424, ptrtoint (%idmo_type* @idmo to i64)
  %426 = inttoptr i64 %5293 to i32*
  %427 = load i32, i32* %426
  %428 = sext i32 %427 to i64
  %429 = mul nsw i64 %428, 400
  %430 = add i64 %429, %425
  %431 = inttoptr i64 %5304 to i32*
  %432 = load i32, i32* %431
  %433 = sext i32 %432 to i64
  %434 = mul nsw i64 %433, 20
  %435 = add i64 %434, %430
  store i64 %435, i64* %7, align 8, !tbaa !1240
  %436 = sext i32 %5113 to i64
  %437 = shl nsw i64 %436, 2
  %438 = add i64 %437, %435
  %439 = inttoptr i64 %438 to i32*
  store i32 %420, i32* %439
  %440 = inttoptr i64 %5308 to i32*
  %441 = load i32, i32* %440
  %442 = inttoptr i64 %5291 to i32*
  %443 = load i32, i32* %442
  %444 = sext i32 %443 to i64
  %445 = mul nsw i64 %444, 2400
  %446 = add i64 %445, ptrtoint (%idmo_type* @idmo to i64)
  %447 = inttoptr i64 %5302 to i32*
  %448 = load i32, i32* %447
  %449 = sext i32 %448 to i64
  %450 = mul nsw i64 %449, 400
  %451 = add i64 %450, %446
  %452 = inttoptr i64 %5304 to i32*
  %453 = load i32, i32* %452
  %454 = sext i32 %453 to i64
  %455 = mul nsw i64 %454, 20
  %456 = add i64 %455, %451
  %457 = inttoptr i64 %5307 to i32*
  %458 = load i32, i32* %457
  %459 = sext i32 %458 to i64
  store i64 %459, i64* %6, align 8, !tbaa !1240
  %460 = shl nsw i64 %459, 2
  %461 = add i64 %460, %456
  %462 = inttoptr i64 %461 to i32*
  store i32 %441, i32* %462
  %463 = inttoptr i64 %5308 to i32*
  %464 = load i32, i32* %463
  %465 = add i32 %464, 1
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %5, align 8, !tbaa !1240
  %467 = inttoptr i64 %5308 to i32*
  store i32 %465, i32* %467
  %468 = inttoptr i64 %5307 to i32*
  %469 = load i32, i32* %468
  %470 = add i32 %469, 1
  %471 = inttoptr i64 %5307 to i32*
  store i32 %470, i32* %471
  %472 = add i64 %5123, -10
  br label %block_40ef32

block_40df33:                                     ; preds = %block_40defa
  %473 = inttoptr i64 %4865 to i32*
  %474 = load i32, i32* %473
  %475 = sext i32 %474 to i64
  %476 = mul nsw i64 %475, 24
  %477 = add i64 %476, ptrtoint (%cbc_type* @cbc to i64)
  %478 = inttoptr i64 %477 to i32*
  %479 = load i32, i32* %478
  %480 = icmp ne i32 %479, 2
  %481 = select i1 %480, i64 77, i64 30
  %482 = add i64 %689, %481
  br i1 %480, label %block_40df80, label %block_40df51

block_40cf2f:                                     ; preds = %block_40ced4.block_40cf2f_crit_edge, %block_40cf0e
  %483 = phi i32 [ %7431, %block_40ced4.block_40cf2f_crit_edge ], [ %597, %block_40cf0e ]
  %484 = phi i64 [ %7429, %block_40ced4.block_40cf2f_crit_edge ], [ %611, %block_40cf0e ]
  %485 = sext i32 %483 to i64
  %486 = shl nsw i64 %485, 2
  %487 = add i64 %486, ptrtoint (%newe_type* @newe to i64)
  %488 = inttoptr i64 %487 to i32*
  %489 = load i32, i32* %488
  %490 = add i32 %489, 1
  %491 = inttoptr i64 %487 to i32*
  store i32 %490, i32* %491
  %492 = inttoptr i64 %4855 to i32*
  %493 = load i32, i32* %492
  %494 = sext i32 %493 to i64
  %495 = mul nsw i64 %494, 48
  %496 = add i64 %495, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 44)
  %497 = inttoptr i64 %496 to i32*
  store i32 1, i32* %497
  %498 = inttoptr i64 %4865 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  %501 = mul nsw i64 %500, 24
  %502 = add i64 %501, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %503 = inttoptr i64 %502 to i32*
  %504 = load i32, i32* %503
  %505 = icmp ne i32 %504, 2
  %506 = select i1 %505, i64 247, i64 84
  %507 = add i64 %484, %506
  br i1 %505, label %block_40d026, label %block_40cf83

block_40bf1c:                                     ; preds = %block_40bed9
  %508 = icmp ne i32 %663, 1
  %509 = select i1 %508, i64 491, i64 10
  %510 = add i64 %666, %509
  br i1 %508, label %block_40c107, label %block_40bf26

block_40bf26:                                     ; preds = %block_40bf1c
  %511 = inttoptr i64 %4855 to i32*
  %512 = load i32, i32* %511
  %513 = sext i32 %512 to i64
  %514 = mul nsw i64 %513, 96
  %515 = add i64 %514, ptrtoint (%sje_type* @sje to i64)
  %516 = inttoptr i64 %515 to i32*
  %517 = load i32, i32* %516
  %518 = inttoptr i64 %4865 to i32*
  store i32 %517, i32* %518
  %519 = inttoptr i64 %4865 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = mul nsw i64 %521, 24
  %523 = add i64 %522, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %524 = inttoptr i64 %523 to i32*
  %525 = load i32, i32* %524
  %526 = icmp ne i32 %525, 3
  %527 = select i1 %526, i64 90, i64 57
  %528 = add i64 %510, %527
  br i1 %526, label %block_40bf26.block_40bf80_crit_edge, label %block_40bf5f

block_40bf26.block_40bf80_crit_edge:              ; preds = %block_40bf26
  %529 = inttoptr i64 %4855 to i32*
  %530 = load i32, i32* %529
  br label %block_40bf80

block_40af13:                                     ; preds = %block_40aef2
  %531 = sext i32 %5914 to i64
  %532 = shl nsw i64 %531, 2
  %533 = add i64 %532, ptrtoint (%newc_type* @newc to i64)
  %534 = inttoptr i64 %533 to i32*
  store i32 6, i32* %534
  %535 = inttoptr i64 %116 to i32*
  %536 = load i32, i32* %535
  %537 = sext i32 %536 to i64
  %538 = shl nsw i64 %537, 5
  %539 = add i64 %538, ptrtoint (%vassign_type* @vassign to i64)
  %540 = inttoptr i64 %539 to i32*
  store i32 1, i32* %540
  %541 = inttoptr i64 %116 to i32*
  %542 = load i32, i32* %541
  %543 = sext i32 %542 to i64
  %544 = shl nsw i64 %543, 5
  %545 = add i64 %544, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %546 = inttoptr i64 %545 to i32*
  store i32 2, i32* %546
  %547 = inttoptr i64 %116 to i32*
  %548 = load i32, i32* %547
  %549 = sext i32 %548 to i64
  %550 = shl nsw i64 %549, 5
  %551 = add i64 %550, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %552 = inttoptr i64 %551 to i32*
  store i32 3, i32* %552
  %553 = inttoptr i64 %116 to i32*
  %554 = load i32, i32* %553
  %555 = sext i32 %554 to i64
  %556 = shl nsw i64 %555, 5
  %557 = add i64 %556, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %558 = inttoptr i64 %557 to i32*
  store i32 5, i32* %558
  %559 = inttoptr i64 %116 to i32*
  %560 = load i32, i32* %559
  %561 = sext i32 %560 to i64
  %562 = shl nsw i64 %561, 5
  %563 = add i64 %562, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %564 = inttoptr i64 %563 to i32*
  store i32 6, i32* %564
  %565 = inttoptr i64 %116 to i32*
  %566 = load i32, i32* %565
  %567 = sext i32 %566 to i64
  %568 = shl nsw i64 %567, 5
  store i64 %568, i64* %5, align 8, !tbaa !1240
  %569 = add i64 %568, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %570 = inttoptr i64 %569 to i32*
  store i32 7, i32* %570
  %571 = add i64 %5926, 320
  br label %block_40b941.sink.split

block_40c1a2:                                     ; preds = %block_40c130
  %572 = mul nsw i64 %7030, 96
  %573 = add i64 %572, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %574 = inttoptr i64 %573 to i32*
  %575 = load i32, i32* %574
  %576 = inttoptr i64 %4855 to i32*
  %577 = load i32, i32* %576
  %578 = sub i32 %575, %577
  %579 = icmp eq i32 %578, 0
  %580 = lshr i32 %578, 31
  %581 = lshr i32 %575, 31
  %582 = lshr i32 %577, 31
  %583 = xor i32 %582, %581
  %584 = xor i32 %580, %581
  %585 = add nuw nsw i32 %584, %583
  %586 = icmp eq i32 %585, 2
  %587 = icmp ne i32 %580, 0
  %588 = xor i1 %587, %586
  %589 = or i1 %579, %588
  %590 = select i1 %589, i64 132, i64 33
  %591 = add i64 %7037, %590
  br i1 %589, label %block_40c22b, label %block_40c1c3

block_40cf0e:                                     ; preds = %block_40ced4
  %592 = mul nsw i64 %7422, 96
  %593 = add i64 %592, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %594 = inttoptr i64 %593 to i32*
  %595 = load i32, i32* %594
  %596 = inttoptr i64 %4855 to i32*
  %597 = load i32, i32* %596
  %598 = sub i32 %595, %597
  %599 = icmp eq i32 %598, 0
  %600 = lshr i32 %598, 31
  %601 = lshr i32 %595, 31
  %602 = lshr i32 %597, 31
  %603 = xor i32 %602, %601
  %604 = xor i32 %600, %601
  %605 = add nuw nsw i32 %604, %603
  %606 = icmp eq i32 %605, 2
  %607 = icmp ne i32 %600, 0
  %608 = xor i1 %607, %606
  %609 = or i1 %599, %608
  %610 = select i1 %609, i64 423, i64 33
  %611 = add i64 %7429, %610
  br i1 %609, label %block_40d0b5, label %block_40cf2f

block_40e70b:                                     ; preds = %block_40e701
  %612 = inttoptr i64 %4855 to i32*
  %613 = load i32, i32* %612
  %614 = sext i32 %613 to i64
  %615 = shl nsw i64 %614, 2
  %616 = add i64 %615, ptrtoint (%newe_type* @newe to i64)
  %617 = inttoptr i64 %616 to i32*
  %618 = load i32, i32* %617
  %619 = add i32 %618, 1
  %620 = inttoptr i64 %616 to i32*
  store i32 %619, i32* %620
  %621 = inttoptr i64 %4855 to i32*
  %622 = load i32, i32* %621
  %623 = sext i32 %622 to i64
  %624 = mul nsw i64 %623, 48
  %625 = add i64 %624, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 36)
  %626 = add i64 %5045, 53
  %627 = inttoptr i64 %625 to i32*
  store i32 1, i32* %627
  br label %block_40e740

block_40e6f7:                                     ; preds = %block_40e54a
  %628 = icmp ne i32 %3709, 0
  %629 = select i1 %628, i64 78, i64 10
  %630 = add i64 %8800, %629
  br i1 %628, label %block_40e74f.sink.split, label %block_40e701

block_40deeb:                                     ; preds = %block_40ddd5, %block_40de9c, %block_40de7d
  %631 = phi i64 [ %7959, %block_40ddd5 ], [ %4000, %block_40de9c ], [ %2116, %block_40de7d ]
  %632 = phi i64 [ 115, %block_40ddd5 ], [ 5, %block_40de9c ], [ 5, %block_40de7d ]
  %633 = phi %struct.Memory* [ %1503, %block_40ddd5 ], [ %1503, %block_40de9c ], [ %1503, %block_40de7d ]
  %634 = add i64 %631, %632
  br label %block_40e372

block_40d6e9:                                     ; preds = %block_40d6ca
  %635 = mul nsw i64 %2825, 96
  %636 = add i64 %635, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %637 = inttoptr i64 %636 to i32*
  %638 = load i32, i32* %637
  %639 = inttoptr i64 %4855 to i32*
  %640 = load i32, i32* %639
  %641 = sub i32 %638, %640
  %642 = icmp eq i32 %641, 0
  %643 = lshr i32 %641, 31
  %644 = lshr i32 %638, 31
  %645 = lshr i32 %640, 31
  %646 = xor i32 %645, %644
  %647 = xor i32 %643, %644
  %648 = add nuw nsw i32 %647, %646
  %649 = icmp eq i32 %648, 2
  %650 = icmp ne i32 %643, 0
  %651 = xor i1 %650, %649
  %652 = or i1 %642, %651
  %653 = select i1 %652, i64 107, i64 33
  %654 = add i64 %2832, %653
  br i1 %652, label %block_40d754, label %block_40d70a

block_40e6e3:                                     ; preds = %block_40e679, %block_40e6b3
  %655 = phi i64 [ %6077, %block_40e679 ], [ %3489, %block_40e6b3 ]
  %656 = phi %struct.Memory* [ %3704, %block_40e679 ], [ %3704, %block_40e6b3 ]
  %657 = add i64 %655, 5
  br label %block_40e6e8

block_40bed9:                                     ; preds = %block_40bcaa, %block_40bce4, %block_40becf
  %658 = phi i64 [ %2152, %block_40bcaa ], [ %1576, %block_40bce4 ], [ %692, %block_40becf ]
  %659 = phi i64 [ 506, %block_40bcaa ], [ 5, %block_40bce4 ], [ 5, %block_40becf ]
  %660 = phi %struct.Memory* [ %8611, %block_40bcaa ], [ %8611, %block_40bce4 ], [ %691, %block_40becf ]
  %661 = add i64 %658, %659
  %662 = inttoptr i64 %4859 to i32*
  %663 = load i32, i32* %662
  %664 = icmp ne i32 %663, 0
  %665 = select i1 %664, i64 67, i64 10
  %666 = add i64 %661, %665
  br i1 %664, label %block_40bf1c, label %block_40bee3

block_408ed5:                                     ; preds = %block_408c49
  %667 = inttoptr i64 %120 to i32*
  %668 = load i32, i32* %667
  %669 = icmp ne i32 %668, 1
  %670 = select i1 %669, i64 652, i64 10
  %671 = add i64 %6786, %670
  br i1 %669, label %block_409161, label %block_408edf

block_40defa:                                     ; preds = %block_40def0
  %672 = inttoptr i64 %4855 to i32*
  %673 = load i32, i32* %672
  %674 = sext i32 %673 to i64
  %675 = mul nsw i64 %674, 96
  %676 = add i64 %675, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %677 = inttoptr i64 %676 to i32*
  %678 = load i32, i32* %677
  %679 = inttoptr i64 %4865 to i32*
  store i32 %678, i32* %679
  %680 = inttoptr i64 %4855 to i32*
  %681 = load i32, i32* %680
  %682 = sext i32 %681 to i64
  %683 = mul nsw i64 %682, 48
  %684 = add i64 %683, ptrtoint (%ijel_type* @ijel to i64)
  %685 = inttoptr i64 %684 to i32*
  %686 = load i32, i32* %685
  %687 = icmp ne i32 %686, 1
  %688 = select i1 %687, i64 139, i64 57
  %689 = add i64 %5949, %688
  br i1 %687, label %block_40df85, label %block_40df33

block_40becf:                                     ; preds = %block_40beca, %block_40bd28
  %690 = phi i64 [ %5986, %block_40beca ], [ %1657, %block_40bd28 ]
  %691 = phi %struct.Memory* [ %5985, %block_40beca ], [ %8611, %block_40bd28 ]
  %692 = add i64 %690, 5
  br label %block_40bed9

block_40aeb8:                                     ; preds = %block_40aeae
  %693 = inttoptr i64 %116 to i32*
  %694 = load i32, i32* %693
  %695 = sext i32 %694 to i64
  %696 = mul nsw i64 %695, 96
  %697 = add i64 %696, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %698 = inttoptr i64 %697 to i32*
  %699 = load i32, i32* %698
  %700 = inttoptr i64 %123 to i32*
  store i32 %699, i32* %700
  %701 = inttoptr i64 %123 to i32*
  %702 = load i32, i32* %701
  %703 = sext i32 %702 to i64
  %704 = mul nsw i64 %703, 24
  %705 = add i64 %704, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 12)
  %706 = inttoptr i64 %705 to i32*
  %707 = load i32, i32* %706
  %708 = icmp ne i32 %707, 3
  %709 = select i1 %708, i64 243, i64 58
  %710 = add i64 %7411, %709
  br i1 %708, label %block_40aeb8.block_40afab_crit_edge, label %block_40aef2

block_40aeb8.block_40afab_crit_edge:              ; preds = %block_40aeb8
  %711 = inttoptr i64 %116 to i32*
  %712 = load i32, i32* %711
  br label %block_40afab

block_408e9c:                                     ; preds = %block_408dba.thread, %block_408dba, %block_408dc4
  %713 = phi i64 [ %1253, %block_408dba ], [ %1222, %block_408dc4 ], [ %3367, %block_408dba.thread ]
  %714 = inttoptr i64 %116 to i32*
  %715 = load i32, i32* %714
  %716 = sext i32 %715 to i64
  %717 = shl nsw i64 %716, 2
  %718 = add i64 %717, ptrtoint (%newc_type* @newc to i64)
  %719 = inttoptr i64 %718 to i32*
  store i32 1, i32* %719
  %720 = inttoptr i64 %116 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  %723 = shl nsw i64 %722, 5
  store i64 %723, i64* %5, align 8, !tbaa !1240
  %724 = add i64 %723, ptrtoint (%vassign_type* @vassign to i64)
  %725 = add i64 %713, 42
  %726 = inttoptr i64 %724 to i32*
  store i32 7, i32* %726
  br label %block_408ecb

block_408e97:                                     ; preds = %block_408e29, %block_408e58
  %727 = phi i64 [ %867, %block_408e58 ], [ %4043, %block_408e29 ]
  %728 = phi %struct.Memory* [ %3633, %block_408e58 ], [ %3633, %block_408e29 ]
  %729 = add i64 %727, 47
  br label %block_408ecb

block_40ee95:                                     ; preds = %block_40ee39
  %730 = inttoptr i64 %1035 to i32*
  %731 = load i32, i32* %730
  %732 = add i32 %731, 1
  %733 = inttoptr i64 %1035 to i32*
  store i32 %732, i32* %733
  %734 = add i64 %5840, -109
  br label %block_40ee28

block_40b692:                                     ; preds = %block_40b671
  %735 = sext i32 %9388 to i64
  %736 = shl nsw i64 %735, 2
  %737 = add i64 %736, ptrtoint (%newc_type* @newc to i64)
  %738 = inttoptr i64 %737 to i32*
  store i32 5, i32* %738
  %739 = inttoptr i64 %116 to i32*
  %740 = load i32, i32* %739
  %741 = sext i32 %740 to i64
  %742 = shl nsw i64 %741, 5
  %743 = add i64 %742, ptrtoint (%vassign_type* @vassign to i64)
  %744 = inttoptr i64 %743 to i32*
  store i32 1, i32* %744
  %745 = inttoptr i64 %116 to i32*
  %746 = load i32, i32* %745
  %747 = sext i32 %746 to i64
  %748 = shl nsw i64 %747, 5
  %749 = add i64 %748, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %750 = inttoptr i64 %749 to i32*
  store i32 3, i32* %750
  %751 = inttoptr i64 %116 to i32*
  %752 = load i32, i32* %751
  %753 = sext i32 %752 to i64
  %754 = shl nsw i64 %753, 5
  %755 = add i64 %754, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %756 = inttoptr i64 %755 to i32*
  store i32 5, i32* %756
  %757 = inttoptr i64 %116 to i32*
  %758 = load i32, i32* %757
  %759 = sext i32 %758 to i64
  %760 = shl nsw i64 %759, 5
  %761 = add i64 %760, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %762 = inttoptr i64 %761 to i32*
  store i32 6, i32* %762
  %763 = inttoptr i64 %116 to i32*
  %764 = load i32, i32* %763
  %765 = sext i32 %764 to i64
  %766 = shl nsw i64 %765, 5
  store i64 %766, i64* %5, align 8, !tbaa !1240
  %767 = add i64 %766, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %768 = inttoptr i64 %767 to i32*
  store i32 7, i32* %768
  %769 = add i64 %823, 278
  br label %block_40b937

block_40ce86:                                     ; preds = %block_40ccfa
  %770 = icmp ne i32 %1973, 0
  %771 = select i1 %770, i64 68, i64 10
  %772 = add i64 %1976, %771
  br i1 %770, label %block_40ceca, label %block_40ce90

block_40a685:                                     ; preds = %block_40a64b
  %773 = mul nsw i64 %953, 96
  %774 = add i64 %773, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %775 = inttoptr i64 %774 to i32*
  %776 = load i32, i32* %775
  %777 = inttoptr i64 %116 to i32*
  %778 = load i32, i32* %777
  %779 = sub i32 %776, %778
  %780 = lshr i32 %779, 31
  %781 = lshr i32 %776, 31
  %782 = lshr i32 %778, 31
  %783 = xor i32 %782, %781
  %784 = xor i32 %780, %781
  %785 = add nuw nsw i32 %784, %783
  %786 = icmp eq i32 %785, 2
  %787 = icmp ne i32 %780, 0
  %788 = xor i1 %787, %786
  %789 = select i1 %788, i64 33, i64 122
  %790 = add i64 %884, %789
  br i1 %788, label %block_40a6a6, label %block_40a6ff

block_40be80:                                     ; preds = %block_40be5f
  %791 = sext i32 %9283 to i64
  %792 = mul nsw i64 %791, 48
  %793 = add i64 %792, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %794 = inttoptr i64 %793 to i32*
  %795 = load i32, i32* %794
  %796 = sext i32 %795 to i64
  %797 = shl nsw i64 %796, 3
  %798 = add i64 %9278, add (i64 ptrtoint (%sje_type* @sje to i64), i64 84)
  %799 = add i64 %798, %797
  %800 = inttoptr i64 %799 to i32*
  %801 = load i32, i32* %800
  %802 = mul nsw i64 %791, 96
  %803 = add i64 %802, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 80)
  %804 = add i64 %9297, 74
  %805 = inttoptr i64 %803 to i32*
  store i32 %801, i32* %805
  br label %block_40beca

block_40ce77:                                     ; preds = %block_40ce0c, %block_40cdb8, %block_40ce2d
  %806 = phi i64 [ %4938, %block_40cdb8 ], [ %7022, %block_40ce0c ], [ %933, %block_40ce2d ]
  %807 = phi %struct.Memory* [ %1968, %block_40cdb8 ], [ %1968, %block_40ce0c ], [ %1968, %block_40ce2d ]
  %808 = add i64 %806, 5
  br label %block_40d0c4

block_40b671:                                     ; preds = %block_40b652
  %809 = mul nsw i64 %871, 96
  %810 = add i64 %809, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %811 = inttoptr i64 %810 to i32*
  %812 = load i32, i32* %811
  %813 = sub i32 %812, %9388
  %814 = lshr i32 %813, 31
  %815 = lshr i32 %812, 31
  %816 = xor i32 %9392, %815
  %817 = xor i32 %814, %815
  %818 = add nuw nsw i32 %817, %816
  %819 = icmp eq i32 %818, 2
  %820 = icmp ne i32 %814, 0
  %821 = xor i1 %820, %819
  %822 = select i1 %821, i64 33, i64 164
  %823 = add i64 %878, %822
  br i1 %821, label %block_40b692, label %block_40b715

block_40966f:                                     ; preds = %block_409635
  %824 = mul nsw i64 %906, 96
  %825 = add i64 %824, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %826 = inttoptr i64 %825 to i32*
  %827 = load i32, i32* %826
  %828 = inttoptr i64 %116 to i32*
  %829 = load i32, i32* %828
  %830 = sub i32 %827, %829
  %831 = lshr i32 %830, 31
  %832 = lshr i32 %827, 31
  %833 = lshr i32 %829, 31
  %834 = xor i32 %833, %832
  %835 = xor i32 %831, %832
  %836 = add nuw nsw i32 %835, %834
  %837 = icmp eq i32 %836, 2
  %838 = icmp ne i32 %831, 0
  %839 = xor i1 %838, %837
  %840 = select i1 %839, i64 33, i64 101
  %841 = add i64 %913, %840
  br i1 %839, label %block_409690, label %block_4096d4

block_40c65c:                                     ; preds = %block_40c618
  %842 = icmp ne i32 %6824, 1
  %843 = select i1 %842, i64 496, i64 10
  %844 = add i64 %6827, %843
  br i1 %842, label %block_40c851, label %block_40c666

block_40b10f:                                     ; preds = %block_40b058
  %845 = inttoptr i64 %121 to i32*
  %846 = load i32, i32* %845
  %847 = icmp ne i32 %846, 0
  %848 = select i1 %847, i64 426, i64 10
  %849 = add i64 %8875, %848
  br i1 %847, label %block_40b2be, label %block_40b119

block_408e58:                                     ; preds = %block_408e08, %block_408dce.block_408e58_crit_edge
  %850 = phi i32 [ %1200, %block_408dce.block_408e58_crit_edge ], [ %2679, %block_408e08 ]
  %851 = phi i64 [ %1198, %block_408dce.block_408e58_crit_edge ], [ %2691, %block_408e08 ]
  %852 = sext i32 %850 to i64
  %853 = shl nsw i64 %852, 2
  %854 = add i64 %853, ptrtoint (%newc_type* @newc to i64)
  %855 = inttoptr i64 %854 to i32*
  store i32 2, i32* %855
  %856 = inttoptr i64 %116 to i32*
  %857 = load i32, i32* %856
  %858 = sext i32 %857 to i64
  %859 = shl nsw i64 %858, 5
  %860 = add i64 %859, ptrtoint (%vassign_type* @vassign to i64)
  %861 = inttoptr i64 %860 to i32*
  store i32 3, i32* %861
  %862 = inttoptr i64 %116 to i32*
  %863 = load i32, i32* %862
  %864 = sext i32 %863 to i64
  %865 = shl nsw i64 %864, 5
  store i64 %865, i64* %5, align 8, !tbaa !1240
  %866 = add i64 %865, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %867 = add i64 %851, 63
  %868 = inttoptr i64 %866 to i32*
  store i32 7, i32* %868
  br label %block_408e97

block_40b652:                                     ; preds = %block_40b631
  %869 = inttoptr i64 %124 to i32*
  %870 = load i32, i32* %869
  %871 = sext i32 %870 to i64
  %872 = mul nsw i64 %871, 24
  %873 = add i64 %872, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %874 = inttoptr i64 %873 to i32*
  %875 = load i32, i32* %874
  %876 = icmp ne i32 %875, 3
  %877 = select i1 %876, i64 195, i64 31
  %878 = add i64 %9400, %877
  br i1 %876, label %block_40b715, label %block_40b671

block_40a64b:                                     ; preds = %block_40a62c
  %879 = add i64 %954, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %880 = inttoptr i64 %879 to i32*
  %881 = load i32, i32* %880
  %882 = icmp ne i32 %881, 3
  %883 = select i1 %882, i64 180, i64 58
  %884 = add i64 %945, %883
  br i1 %882, label %block_40a64b.block_40a6ff_crit_edge, label %block_40a685

block_40a64b.block_40a6ff_crit_edge:              ; preds = %block_40a64b
  %885 = inttoptr i64 %116 to i32*
  %886 = load i32, i32* %885
  br label %block_40a6ff

block_40be40:                                     ; preds = %block_40bd9d, %block_40bd49
  %887 = phi i64 [ %265, %block_40bd49 ], [ %1342, %block_40bd9d ]
  %888 = phi %struct.Memory* [ %8611, %block_40bd49 ], [ %8611, %block_40bd9d ]
  %889 = inttoptr i64 %4865 to i32*
  %890 = load i32, i32* %889
  %891 = sext i32 %890 to i64
  %892 = mul nsw i64 %891, 24
  %893 = add i64 %892, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %894 = inttoptr i64 %893 to i32*
  %895 = load i32, i32* %894
  %896 = icmp ne i32 %895, 3
  %897 = select i1 %896, i64 138, i64 31
  %898 = add i64 %887, %897
  br i1 %896, label %block_40beca, label %block_40be5f

block_409635:                                     ; preds = %block_4095a2
  %899 = mul nsw i64 %5673, 96
  %900 = add i64 %899, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %901 = inttoptr i64 %900 to i32*
  %902 = load i32, i32* %901
  %903 = inttoptr i64 %123 to i32*
  store i32 %902, i32* %903
  %904 = inttoptr i64 %123 to i32*
  %905 = load i32, i32* %904
  %906 = sext i32 %905 to i64
  %907 = mul nsw i64 %906, 24
  %908 = add i64 %907, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %909 = inttoptr i64 %908 to i32*
  %910 = load i32, i32* %909
  %911 = icmp ne i32 %910, 3
  %912 = select i1 %911, i64 159, i64 58
  %913 = add i64 %5670, %912
  br i1 %911, label %block_409635.block_4096d4_crit_edge, label %block_40966f

block_409635.block_4096d4_crit_edge:              ; preds = %block_409635
  %914 = inttoptr i64 %116 to i32*
  %915 = load i32, i32* %914
  br label %block_4096d4

block_40efd5:                                     ; preds = %block_40ef21
  %916 = add i64 %5226, 5
  br label %block_40efda

block_40e630:                                     ; preds = %block_40e626
  %917 = icmp ne i32 %9252, 1
  %918 = select i1 %917, i64 189, i64 10
  %919 = add i64 %4402, %918
  br i1 %917, label %block_40e6f2, label %block_40e63a

block_40ce2d:                                     ; preds = %block_40ce0c
  %920 = sext i32 %7008 to i64
  %921 = mul nsw i64 %920, 48
  %922 = add i64 %921, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %923 = inttoptr i64 %922 to i32*
  %924 = load i32, i32* %923
  %925 = sext i32 %924 to i64
  %926 = shl nsw i64 %925, 3
  %927 = add i64 %7003, add (i64 ptrtoint (%sje_type* @sje to i64), i64 68)
  %928 = add i64 %927, %926
  %929 = inttoptr i64 %928 to i32*
  %930 = load i32, i32* %929
  %931 = mul nsw i64 %920, 96
  %932 = add i64 %931, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 88)
  %933 = add i64 %7022, 74
  %934 = inttoptr i64 %932 to i32*
  store i32 %930, i32* %934
  br label %block_40ce77

block_40a62c:                                     ; preds = %block_40a618, %block_40a622
  %935 = phi i64 [ %2884, %block_40a618 ], [ %2077, %block_40a622 ]
  %936 = inttoptr i64 %116 to i32*
  %937 = load i32, i32* %936
  %938 = sext i32 %937 to i64
  %939 = mul nsw i64 %938, 48
  %940 = add i64 %939, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 12)
  %941 = inttoptr i64 %940 to i32*
  %942 = load i32, i32* %941
  %943 = icmp ne i32 %942, 0
  %944 = select i1 %943, i64 321, i64 31
  %945 = add i64 %935, %944
  %946 = mul nsw i64 %938, 96
  %947 = add i64 %946, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %948 = inttoptr i64 %947 to i32*
  %949 = load i32, i32* %948
  %950 = inttoptr i64 %123 to i32*
  store i32 %949, i32* %950
  %951 = inttoptr i64 %123 to i32*
  %952 = load i32, i32* %951
  %953 = sext i32 %952 to i64
  %954 = mul nsw i64 %953, 24
  br i1 %943, label %block_40a76d, label %block_40a64b

block_40ee28:                                     ; preds = %block_40ee21, %block_40ee95
  %955 = phi i64 [ %1036, %block_40ee21 ], [ %734, %block_40ee95 ]
  %956 = phi %struct.Memory* [ %5048, %block_40ee21 ], [ %5828, %block_40ee95 ]
  %957 = inttoptr i64 %1035 to i32*
  %958 = load i32, i32* %957
  %959 = add i32 %958, -4
  %960 = lshr i32 %959, 31
  %961 = trunc i32 %960 to i8
  %962 = lshr i32 %958, 31
  %963 = xor i32 %960, %962
  %964 = add nuw nsw i32 %963, %962
  %965 = icmp eq i32 %964, 2
  %966 = icmp ne i8 %961, 0
  %967 = xor i1 %966, %965
  %968 = select i1 %967, i64 10, i64 128
  %969 = add i64 %955, %968
  br i1 %967, label %block_40ee32, label %block_40efe4.loopexit

block_40e63a:                                     ; preds = %block_40e626, %block_40e630
  %970 = phi i64 [ %4402, %block_40e626 ], [ %919, %block_40e630 ]
  %971 = inttoptr i64 %4855 to i32*
  %972 = load i32, i32* %971
  %973 = sext i32 %972 to i64
  %974 = shl nsw i64 %973, 2
  %975 = add i64 %974, ptrtoint (%newe_type* @newe to i64)
  %976 = inttoptr i64 %975 to i32*
  %977 = load i32, i32* %976
  %978 = add i32 %977, 1
  %979 = inttoptr i64 %975 to i32*
  store i32 %978, i32* %979
  %980 = inttoptr i64 %4855 to i32*
  %981 = load i32, i32* %980
  %982 = sext i32 %981 to i64
  %983 = mul nsw i64 %982, 48
  %984 = add i64 %983, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 36)
  %985 = inttoptr i64 %984 to i32*
  store i32 1, i32* %985
  %986 = inttoptr i64 %4863 to i32*
  %987 = load i32, i32* %986
  %988 = icmp ne i32 %987, 1
  %989 = select i1 %988, i64 174, i64 63
  %990 = add i64 %970, %989
  br i1 %988, label %block_40e6e8, label %block_40e679

block_40d627:                                     ; preds = %block_40d5d3
  %991 = mul nsw i64 %7449, 96
  %992 = add i64 %991, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %993 = inttoptr i64 %992 to i32*
  %994 = load i32, i32* %993
  %995 = inttoptr i64 %4855 to i32*
  %996 = load i32, i32* %995
  %997 = sext i32 %996 to i64
  %998 = mul nsw i64 %997, 96
  %999 = add i64 %998, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %999, i64* %6292, align 8, !tbaa !1240
  %1000 = add i64 %998, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 40)
  %1001 = inttoptr i64 %1000 to i32*
  store i32 %994, i32* %1001
  %1002 = inttoptr i64 %4855 to i32*
  %1003 = load i32, i32* %1002
  %1004 = sext i32 %1003 to i64
  %1005 = mul nsw i64 %1004, 48
  store i64 %1005, i64* %11, align 8, !tbaa !1240
  %1006 = add i64 %1005, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 8)
  %1007 = inttoptr i64 %1006 to i32*
  %1008 = load i32, i32* %1007
  %1009 = zext i32 %1008 to i64
  store i64 %1009, i64* %4866, align 8, !tbaa !1240
  %1010 = mul nsw i64 %1004, 96
  %1011 = add i64 %1010, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 44)
  %1012 = inttoptr i64 %1011 to i32*
  store i32 %1008, i32* %1012
  %1013 = inttoptr i64 %4865 to i32*
  %1014 = load i32, i32* %1013
  %1015 = sext i32 %1014 to i64
  %1016 = mul nsw i64 %1015, 96
  %1017 = add i64 %1016, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %1018 = inttoptr i64 %1017 to i32*
  %1019 = load i32, i32* %1018
  %1020 = sext i32 %1019 to i64
  %1021 = mul nsw i64 %1020, 48
  %1022 = add i64 %1021, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 12)
  %1023 = inttoptr i64 %1022 to i32*
  store i32 1, i32* %1023
  %1024 = inttoptr i64 %4855 to i32*
  %1025 = load i32, i32* %1024
  %1026 = sext i32 %1025 to i64
  %1027 = mul nsw i64 %1026, 48
  %1028 = add i64 %1027, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 20)
  %1029 = add i64 %7456, 163
  %1030 = inttoptr i64 %1028 to i32*
  store i32 1, i32* %1030
  br label %block_40d6ca

block_40cb07:                                     ; preds = %block_40cac3
  %1031 = icmp ne i32 %6829, 1
  %1032 = select i1 %1031, i64 489, i64 10
  %1033 = add i64 %6903, %1032
  br i1 %1031, label %block_40ccfa, label %block_40cb11

block_40ee21:                                     ; preds = %block_40edee, %block_40ee17
  %1034 = phi i64 [ %3064, %block_40edee ], [ %1041, %block_40ee17 ]
  %1035 = add i64 %5047, -28
  %1036 = add i64 %1034, 7
  %1037 = inttoptr i64 %1035 to i32*
  store i32 1, i32* %1037
  %1038 = add i64 %5047, -24
  %1039 = add i64 %5047, -4
  br label %block_40ee28

block_40ee17:                                     ; preds = %block_40edee
  %1040 = select i1 %3061, i64 10, i64 150
  %1041 = add i64 %3064, %1040
  br i1 %3061, label %block_40ee21, label %block_40eead

block_40b612:                                     ; preds = %block_40b2d2, %block_40b320
  %1042 = phi i64 [ %3825, %block_40b320 ], [ %4171, %block_40b2d2 ]
  %1043 = add i64 %4165, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %1044 = inttoptr i64 %1043 to i32*
  %1045 = load i32, i32* %1044
  %1046 = icmp ne i32 %1045, 3
  %1047 = select i1 %1046, i64 411, i64 31
  %1048 = add i64 %1042, %1047
  br i1 %1046, label %block_40b7ad, label %block_40b631

block_40ee43:                                     ; preds = %block_40ee39
  %1049 = inttoptr i64 %1039 to i32*
  %1050 = load i32, i32* %1049
  %1051 = inttoptr i64 %1201 to i32*
  %1052 = load i32, i32* %1051
  %1053 = sext i32 %1052 to i64
  %1054 = mul nsw i64 %1053, 2400
  %1055 = add i64 %1054, ptrtoint (%idmo_type* @idmo to i64)
  %1056 = inttoptr i64 %1207 to i32*
  %1057 = load i32, i32* %1056
  %1058 = sext i32 %1057 to i64
  %1059 = mul nsw i64 %1058, 400
  %1060 = add i64 %1059, %1055
  %1061 = inttoptr i64 %1035 to i32*
  %1062 = load i32, i32* %1061
  %1063 = sext i32 %1062 to i64
  %1064 = mul nsw i64 %1063, 20
  %1065 = add i64 %1064, %1060
  %1066 = sext i32 %5830 to i64
  store i64 %1066, i64* %6, align 8, !tbaa !1240
  %1067 = shl nsw i64 %1066, 2
  %1068 = add i64 %1067, %1065
  %1069 = inttoptr i64 %1068 to i32*
  store i32 %1050, i32* %1069
  %1070 = inttoptr i64 %1039 to i32*
  %1071 = load i32, i32* %1070
  %1072 = add i32 %1071, 1
  %1073 = zext i32 %1072 to i64
  store i64 %1073, i64* %5, align 8, !tbaa !1240
  %1074 = inttoptr i64 %1039 to i32*
  store i32 %1072, i32* %1074
  %1075 = inttoptr i64 %1038 to i32*
  %1076 = load i32, i32* %1075
  %1077 = add i32 %1076, 1
  %1078 = inttoptr i64 %1038 to i32*
  store i32 %1077, i32* %1078
  %1079 = add i64 %5840, -10
  br label %block_40ee39

block_40adf7:                                     ; preds = %block_40aded
  %1080 = inttoptr i64 %116 to i32*
  %1081 = load i32, i32* %1080
  %1082 = sext i32 %1081 to i64
  %1083 = shl nsw i64 %1082, 2
  %1084 = add i64 %1083, ptrtoint (%newc_type* @newc to i64)
  %1085 = inttoptr i64 %1084 to i32*
  store i32 7, i32* %1085
  %1086 = inttoptr i64 %116 to i32*
  %1087 = load i32, i32* %1086
  %1088 = sext i32 %1087 to i64
  %1089 = shl nsw i64 %1088, 5
  %1090 = add i64 %1089, ptrtoint (%vassign_type* @vassign to i64)
  %1091 = inttoptr i64 %1090 to i32*
  store i32 1, i32* %1091
  %1092 = inttoptr i64 %116 to i32*
  %1093 = load i32, i32* %1092
  %1094 = sext i32 %1093 to i64
  %1095 = shl nsw i64 %1094, 5
  %1096 = add i64 %1095, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1097 = inttoptr i64 %1096 to i32*
  store i32 2, i32* %1097
  %1098 = inttoptr i64 %116 to i32*
  %1099 = load i32, i32* %1098
  %1100 = sext i32 %1099 to i64
  %1101 = shl nsw i64 %1100, 5
  %1102 = add i64 %1101, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %1103 = inttoptr i64 %1102 to i32*
  store i32 3, i32* %1103
  %1104 = inttoptr i64 %116 to i32*
  %1105 = load i32, i32* %1104
  %1106 = sext i32 %1105 to i64
  %1107 = shl nsw i64 %1106, 5
  %1108 = add i64 %1107, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %1109 = inttoptr i64 %1108 to i32*
  store i32 4, i32* %1109
  %1110 = inttoptr i64 %116 to i32*
  %1111 = load i32, i32* %1110
  %1112 = sext i32 %1111 to i64
  %1113 = shl nsw i64 %1112, 5
  %1114 = add i64 %1113, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %1115 = inttoptr i64 %1114 to i32*
  store i32 5, i32* %1115
  %1116 = inttoptr i64 %116 to i32*
  %1117 = load i32, i32* %1116
  %1118 = sext i32 %1117 to i64
  %1119 = shl nsw i64 %1118, 5
  %1120 = add i64 %1119, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %1121 = inttoptr i64 %1120 to i32*
  store i32 6, i32* %1121
  %1122 = inttoptr i64 %116 to i32*
  %1123 = load i32, i32* %1122
  %1124 = sext i32 %1123 to i64
  %1125 = shl nsw i64 %1124, 5
  store i64 %1125, i64* %5, align 8, !tbaa !1240
  %1126 = add i64 %1125, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 24)
  %1127 = add i64 %5843, 168
  %1128 = inttoptr i64 %1126 to i32*
  store i32 7, i32* %1128
  br label %block_40b946

block_40e61c:                                     ; preds = %block_40e598, %block_40e5ec
  %1129 = phi i64 [ %8584, %block_40e598 ], [ %7989, %block_40e5ec ]
  %1130 = phi %struct.Memory* [ %3704, %block_40e598 ], [ %3704, %block_40e5ec ]
  %1131 = add i64 %1129, 5
  br label %block_40e6f2

block_40e2e5:                                     ; preds = %block_40e2db
  %1132 = inttoptr i64 %4861 to i32*
  %1133 = load i32, i32* %1132
  %1134 = icmp eq i32 %1133, 3
  %1135 = select i1 %1134, i64 63, i64 10
  %1136 = add i64 %4123, %1135
  br i1 %1134, label %block_40e324, label %block_40e2ef

block_40e7e1:                                     ; preds = %block_40e7a2, %block_40e7ac
  %1137 = phi i64 [ %1238, %block_40e7ac ], [ %1288, %block_40e7a2 ]
  %1138 = phi %struct.Memory* [ %1298, %block_40e7ac ], [ %1298, %block_40e7a2 ]
  %1139 = inttoptr i64 %4860 to i32*
  %1140 = load i32, i32* %1139
  %1141 = icmp eq i32 %1140, 1
  %1142 = select i1 %1141, i64 20, i64 10
  %1143 = add i64 %1137, %1142
  br i1 %1141, label %block_40e7f5, label %block_40e7eb

block_40c5d4:                                     ; preds = %block_40c4b1
  %1144 = shl nsw i64 %2130, 2
  %1145 = add i64 %1144, ptrtoint (%newe_type* @newe to i64)
  %1146 = inttoptr i64 %1145 to i32*
  %1147 = load i32, i32* %1146
  %1148 = add i32 %1147, 1
  %1149 = inttoptr i64 %1145 to i32*
  store i32 %1148, i32* %1149
  %1150 = inttoptr i64 %4855 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sext i32 %1151 to i64
  %1153 = mul nsw i64 %1152, 48
  %1154 = add i64 %1153, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 32)
  %1155 = add i64 %2137, 53
  %1156 = inttoptr i64 %1154 to i32*
  store i32 1, i32* %1156
  br label %block_40c609

block_409ba3:                                     ; preds = %block_409b99
  %1157 = inttoptr i64 %116 to i32*
  %1158 = load i32, i32* %1157
  %1159 = sext i32 %1158 to i64
  %1160 = mul nsw i64 %1159, 96
  %1161 = add i64 %1160, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %1162 = inttoptr i64 %1161 to i32*
  %1163 = load i32, i32* %1162
  %1164 = inttoptr i64 %123 to i32*
  store i32 %1163, i32* %1164
  %1165 = inttoptr i64 %123 to i32*
  %1166 = load i32, i32* %1165
  %1167 = sext i32 %1166 to i64
  %1168 = mul nsw i64 %1167, 24
  %1169 = add i64 %1168, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %1170 = inttoptr i64 %1169 to i32*
  %1171 = load i32, i32* %1170
  %1172 = icmp ne i32 %1171, 3
  %1173 = select i1 %1172, i64 159, i64 58
  %1174 = add i64 %3377, %1173
  br i1 %1172, label %block_409ba3.block_409c42_crit_edge, label %block_409bdd

block_409ba3.block_409c42_crit_edge:              ; preds = %block_409ba3
  %1175 = inttoptr i64 %116 to i32*
  %1176 = load i32, i32* %1175
  br label %block_409c42

block_40c5cf:                                     ; preds = %block_40c565, %block_40c50a, %block_40c544
  %1177 = phi i64 [ %3970, %block_40c50a ], [ %8796, %block_40c565 ], [ %1621, %block_40c544 ]
  %1178 = phi i64 [ 202, %block_40c50a ], [ 63, %block_40c565 ], [ 63, %block_40c544 ]
  %1179 = phi %struct.Memory* [ %7538, %block_40c50a ], [ %7538, %block_40c565 ], [ %7538, %block_40c544 ]
  %1180 = add i64 %1178, %1177
  br label %block_40c609

block_408dce:                                     ; preds = %block_408dc4
  %1181 = inttoptr i64 %116 to i32*
  %1182 = load i32, i32* %1181
  %1183 = sext i32 %1182 to i64
  %1184 = mul nsw i64 %1183, 96
  %1185 = add i64 %1184, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %1186 = inttoptr i64 %1185 to i32*
  %1187 = load i32, i32* %1186
  %1188 = inttoptr i64 %123 to i32*
  store i32 %1187, i32* %1188
  %1189 = inttoptr i64 %123 to i32*
  %1190 = load i32, i32* %1189
  %1191 = sext i32 %1190 to i64
  %1192 = mul nsw i64 %1191, 24
  %1193 = add i64 %1192, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %1194 = inttoptr i64 %1193 to i32*
  %1195 = load i32, i32* %1194
  %1196 = icmp ne i32 %1195, 3
  %1197 = select i1 %1196, i64 138, i64 58
  %1198 = add i64 %1222, %1197
  br i1 %1196, label %block_408dce.block_408e58_crit_edge, label %block_408e08

block_408dce.block_408e58_crit_edge:              ; preds = %block_408dce
  %1199 = inttoptr i64 %116 to i32*
  %1200 = load i32, i32* %1199
  br label %block_408e58

block_40edcb:                                     ; preds = %block_40ea38
  %1201 = add i64 %5047, -8
  %1202 = inttoptr i64 %1201 to i32*
  %1203 = load i32, i32* %1202
  %1204 = sext i32 %1203 to i64
  %1205 = mul nsw i64 %1204, 24
  %1206 = add i64 %1205, ptrtoint (%fassign_type* @fassign to i64)
  %1207 = add i64 %5047, -20
  %1208 = inttoptr i64 %1207 to i32*
  %1209 = load i32, i32* %1208
  %1210 = sext i32 %1209 to i64
  store i64 %1210, i64* %5, align 8, !tbaa !1240
  %1211 = shl nsw i64 %1210, 2
  %1212 = add i64 %1211, %1206
  %1213 = inttoptr i64 %1212 to i32*
  %1214 = load i32, i32* %1213
  %1215 = icmp eq i32 %1214, 0
  %1216 = select i1 %1215, i64 542, i64 35
  %1217 = add i64 %5067, %1216
  br i1 %1215, label %block_40efe9, label %block_40edee

block_408dc4:                                     ; preds = %block_408dba
  %1218 = inttoptr i64 %126 to i32*
  %1219 = load i32, i32* %1218
  %1220 = icmp ne i32 %1219, 0
  %1221 = select i1 %1220, i64 216, i64 10
  %1222 = add i64 %1253, %1221
  br i1 %1220, label %block_408e9c, label %block_408dce

block_40e7ac:                                     ; preds = %block_40e798, %block_40e7a2
  %1223 = phi i64 [ %1303, %block_40e798 ], [ %1288, %block_40e7a2 ]
  %1224 = inttoptr i64 %4855 to i32*
  %1225 = load i32, i32* %1224
  %1226 = sext i32 %1225 to i64
  %1227 = shl nsw i64 %1226, 2
  %1228 = add i64 %1227, ptrtoint (%newi_type* @newi to i64)
  %1229 = inttoptr i64 %1228 to i32*
  %1230 = load i32, i32* %1229
  %1231 = add i32 %1230, 9
  %1232 = inttoptr i64 %1228 to i32*
  store i32 %1231, i32* %1232
  %1233 = inttoptr i64 %4855 to i32*
  %1234 = load i32, i32* %1233
  %1235 = sext i32 %1234 to i64
  %1236 = mul nsw i64 %1235, 24
  %1237 = add i64 %1236, add (i64 ptrtoint (%fassign_type* @fassign to i64), i64 12)
  %1238 = add i64 %1223, 53
  %1239 = inttoptr i64 %1237 to i32*
  store i32 1, i32* %1239
  br label %block_40e7e1

block_409dbb:                                     ; preds = %block_4098ec
  %1240 = inttoptr i64 %116 to i32*
  %1241 = load i32, i32* %1240
  %1242 = sext i32 %1241 to i64
  %1243 = mul nsw i64 %1242, 48
  %1244 = add i64 %1243, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %1245 = inttoptr i64 %1244 to i32*
  %1246 = load i32, i32* %1245
  %1247 = icmp ne i32 %1246, 0
  %1248 = select i1 %1247, i64 141, i64 31
  %1249 = add i64 %7647, %1248
  br i1 %1247, label %block_409e48, label %block_409dda

block_408dba:                                     ; preds = %block_408c53
  %1250 = add i64 %7061, 224
  %1251 = icmp ne i32 %7058, 1
  %1252 = select i1 %1251, i64 226, i64 10
  %1253 = add i64 %1250, %1252
  br i1 %1251, label %block_408e9c, label %block_408dc4

block_40edb8:                                     ; preds = %block_40edb3, %block_40ea44
  %1254 = phi i64 [ %1383, %block_40ea44 ], [ %2266, %block_40edb3 ]
  %1255 = phi i64 [ %1394, %block_40ea44 ], [ %2265, %block_40edb3 ]
  %1256 = phi %struct.Memory* [ %5048, %block_40ea44 ], [ %2263, %block_40edb3 ]
  %1257 = add i64 %1254, -104
  %1258 = inttoptr i64 %1257 to i32*
  %1259 = load i32, i32* %1258
  %1260 = add i64 %1254, -52
  %1261 = inttoptr i64 %1260 to i32*
  %1262 = load i32, i32* %1261
  %1263 = add i32 %1262, %1259
  %1264 = inttoptr i64 %1260 to i32*
  store i32 %1263, i32* %1264
  %1265 = add i64 %1255, -896
  br label %block_40ea38

block_40d5b2:                                     ; preds = %block_40d578
  %1266 = mul nsw i64 %8761, 96
  %1267 = add i64 %1266, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %1268 = inttoptr i64 %1267 to i32*
  %1269 = load i32, i32* %1268
  %1270 = inttoptr i64 %4855 to i32*
  %1271 = load i32, i32* %1270
  %1272 = sub i32 %1269, %1271
  %1273 = icmp eq i32 %1272, 0
  %1274 = lshr i32 %1272, 31
  %1275 = lshr i32 %1269, 31
  %1276 = lshr i32 %1271, 31
  %1277 = xor i32 %1276, %1275
  %1278 = xor i32 %1274, %1275
  %1279 = add nuw nsw i32 %1278, %1277
  %1280 = icmp eq i32 %1279, 2
  %1281 = icmp ne i32 %1274, 0
  %1282 = xor i1 %1281, %1280
  %1283 = or i1 %1273, %1282
  %1284 = select i1 %1283, i64 423, i64 33
  %1285 = add i64 %8768, %1284
  br i1 %1283, label %block_40d759, label %block_40d5d3

block_40e7a2:                                     ; preds = %block_40e798
  %1286 = icmp ne i32 %1300, 0
  %1287 = select i1 %1286, i64 63, i64 10
  %1288 = add i64 %1303, %1287
  br i1 %1286, label %block_40e7e1, label %block_40e7ac

block_409db1:                                     ; preds = %block_409ac8, %block_409b21, %block_409dac
  %1289 = phi i64 [ %1296, %block_409dac ], [ %7150, %block_409ac8 ], [ %3801, %block_409b21 ]
  %1290 = phi i64 [ 5, %block_409dac ], [ 551, %block_409ac8 ], [ 551, %block_409b21 ]
  %1291 = phi %struct.Memory* [ %1295, %block_409dac ], [ %3633, %block_409ac8 ], [ %3633, %block_409b21 ]
  %1292 = add i64 %1289, %1290
  br label %block_409f43

block_409dac:                                     ; preds = %block_409da2, %block_409c42, %block_409c9b.thread, %block_409bfe, %block_409ca5
  %1293 = phi i64 [ %4262, %block_409c42 ], [ %2920, %block_409bfe ], [ %7205, %block_409da2 ], [ %2162, %block_409ca5 ], [ %3400, %block_409c9b.thread ]
  %1294 = phi i64 [ 278, %block_409c42 ], [ 278, %block_409bfe ], [ 5, %block_409da2 ], [ 5, %block_409ca5 ], [ 5, %block_409c9b.thread ]
  %1295 = phi %struct.Memory* [ %3633, %block_409c42 ], [ %3633, %block_409bfe ], [ %7204, %block_409da2 ], [ %3633, %block_409ca5 ], [ %3633, %block_409c9b.thread ]
  %1296 = add i64 %1293, %1294
  br label %block_409db1

block_40e798:                                     ; preds = %block_40e759, %block_40e763
  %1297 = phi i64 [ %365, %block_40e763 ], [ %4790, %block_40e759 ]
  %1298 = phi %struct.Memory* [ %4484, %block_40e763 ], [ %4484, %block_40e759 ]
  %1299 = inttoptr i64 %4862 to i32*
  %1300 = load i32, i32* %1299
  %1301 = icmp eq i32 %1300, 1
  %1302 = select i1 %1301, i64 20, i64 10
  %1303 = add i64 %1297, %1302
  br i1 %1301, label %block_40e7ac, label %block_40e7a2

block_40bd9d:                                     ; preds = %block_40bd49
  %1304 = mul nsw i64 %258, 96
  %1305 = add i64 %1304, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %1306 = inttoptr i64 %1305 to i32*
  %1307 = load i32, i32* %1306
  %1308 = inttoptr i64 %4855 to i32*
  %1309 = load i32, i32* %1308
  %1310 = sext i32 %1309 to i64
  %1311 = mul nsw i64 %1310, 96
  %1312 = add i64 %1311, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %1312, i64* %6292, align 8, !tbaa !1240
  %1313 = add i64 %1311, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 80)
  %1314 = inttoptr i64 %1313 to i32*
  store i32 %1307, i32* %1314
  %1315 = inttoptr i64 %4855 to i32*
  %1316 = load i32, i32* %1315
  %1317 = sext i32 %1316 to i64
  %1318 = mul nsw i64 %1317, 48
  store i64 %1318, i64* %11, align 8, !tbaa !1240
  %1319 = add i64 %1318, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %1320 = inttoptr i64 %1319 to i32*
  %1321 = load i32, i32* %1320
  %1322 = zext i32 %1321 to i64
  store i64 %1322, i64* %4866, align 8, !tbaa !1240
  %1323 = mul nsw i64 %1317, 96
  %1324 = add i64 %1323, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 84)
  %1325 = inttoptr i64 %1324 to i32*
  store i32 %1321, i32* %1325
  %1326 = inttoptr i64 %4865 to i32*
  %1327 = load i32, i32* %1326
  %1328 = sext i32 %1327 to i64
  %1329 = mul nsw i64 %1328, 96
  %1330 = add i64 %1329, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %1331 = inttoptr i64 %1330 to i32*
  %1332 = load i32, i32* %1331
  %1333 = sext i32 %1332 to i64
  %1334 = mul nsw i64 %1333, 48
  %1335 = add i64 %1334, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 36)
  %1336 = inttoptr i64 %1335 to i32*
  store i32 1, i32* %1336
  %1337 = inttoptr i64 %4855 to i32*
  %1338 = load i32, i32* %1337
  %1339 = sext i32 %1338 to i64
  %1340 = mul nsw i64 %1339, 48
  %1341 = add i64 %1340, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 40)
  %1342 = add i64 %265, 163
  %1343 = inttoptr i64 %1341 to i32*
  store i32 1, i32* %1343
  br label %block_40be40

block_40dd9c:                                     ; preds = %block_40dd76
  %1344 = inttoptr i64 %4855 to i32*
  %1345 = load i32, i32* %1344
  %1346 = sext i32 %1345 to i64
  %1347 = mul nsw i64 %1346, 96
  %1348 = add i64 %1347, ptrtoint (%sje_type* @sje to i64)
  %1349 = inttoptr i64 %1348 to i32*
  %1350 = load i32, i32* %1349
  %1351 = inttoptr i64 %4865 to i32*
  store i32 %1350, i32* %1351
  %1352 = inttoptr i64 %4865 to i32*
  %1353 = load i32, i32* %1352
  %1354 = sext i32 %1353 to i64
  %1355 = mul nsw i64 %1354, 24
  %1356 = add i64 %1355, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %1357 = inttoptr i64 %1356 to i32*
  %1358 = load i32, i32* %1357
  %1359 = icmp ne i32 %1358, 2
  %1360 = select i1 %1359, i64 225, i64 57
  %1361 = add i64 %1515, %1360
  br i1 %1359, label %block_40de7d, label %block_40ddd5

block_40ea44:                                     ; preds = %block_40ea38
  store i64 ptrtoint (%eassign_type* @eassign to i64), i64* %4, align 8, !tbaa !1240
  %1362 = add i64 %5047, -20
  %1363 = inttoptr i64 %1362 to i32*
  %1364 = load i32, i32* %1363
  %1365 = sext i32 %1364 to i64
  %1366 = shl nsw i64 %1365, 4
  %1367 = add i64 %1366, ptrtoint (%edgenumber_type* @edgenumber to i64)
  %1368 = sext i32 %5051 to i64
  store i64 %1368, i64* %6, align 8, !tbaa !1240
  %1369 = shl nsw i64 %1368, 2
  %1370 = add i64 %1369, %1367
  %1371 = inttoptr i64 %1370 to i32*
  %1372 = load i32, i32* %1371
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %7, align 8, !tbaa !1240
  %1374 = add i64 %5047, -56
  %1375 = inttoptr i64 %1374 to i32*
  store i32 %1372, i32* %1375
  %1376 = add i64 %5047, -8
  %1377 = inttoptr i64 %1376 to i32*
  %1378 = load i32, i32* %1377
  %1379 = sext i32 %1378 to i64
  %1380 = mul nsw i64 %1379, 48
  %1381 = load i64, i64* %4, align 8
  %1382 = add i64 %1380, %1381
  store i64 %1382, i64* %4, align 8, !tbaa !1240
  %1383 = load i64, i64* %10, align 8
  %1384 = add i64 %1383, -56
  %1385 = inttoptr i64 %1384 to i32*
  %1386 = load i32, i32* %1385
  %1387 = sext i32 %1386 to i64
  store i64 %1387, i64* %5, align 8, !tbaa !1240
  %1388 = shl nsw i64 %1387, 2
  %1389 = add i64 %1388, %1382
  %1390 = inttoptr i64 %1389 to i32*
  %1391 = load i32, i32* %1390
  %1392 = icmp eq i32 %1391, 0
  %1393 = select i1 %1392, i64 884, i64 66
  %1394 = add i64 %5067, %1393
  br i1 %1392, label %block_40edb8, label %block_40ea86

block_40bcee:                                     ; preds = %block_40bce4
  %1395 = inttoptr i64 %4855 to i32*
  %1396 = load i32, i32* %1395
  %1397 = sext i32 %1396 to i64
  %1398 = mul nsw i64 %1397, 96
  %1399 = add i64 %1398, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %1400 = inttoptr i64 %1399 to i32*
  %1401 = load i32, i32* %1400
  %1402 = inttoptr i64 %4865 to i32*
  store i32 %1401, i32* %1402
  %1403 = inttoptr i64 %4865 to i32*
  %1404 = load i32, i32* %1403
  %1405 = sext i32 %1404 to i64
  %1406 = mul nsw i64 %1405, 24
  %1407 = add i64 %1406, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %1408 = inttoptr i64 %1407 to i32*
  %1409 = load i32, i32* %1408
  %1410 = icmp ne i32 %1409, 3
  %1411 = select i1 %1410, i64 91, i64 58
  %1412 = add i64 %1576, %1411
  br i1 %1410, label %block_40bcee.block_40bd49_crit_edge, label %block_40bd28

block_40bcee.block_40bd49_crit_edge:              ; preds = %block_40bcee
  %1413 = inttoptr i64 %4855 to i32*
  %1414 = load i32, i32* %1413
  br label %block_40bd49

block_40958e:                                     ; preds = %block_409584
  %1415 = icmp eq i32 %1492, 2
  %1416 = select i1 %1415, i64 20, i64 10
  %1417 = add i64 %1490, %1416
  br i1 %1415, label %block_4095a2, label %block_409598

block_40eb96:                                     ; preds = %block_40eb73
  %1418 = load i64, i64* %10, align 8
  %1419 = add i64 %1418, -72
  store i64 %1419, i64* %5, align 8, !tbaa !1240
  %1420 = add i64 %1418, -8
  %1421 = inttoptr i64 %1420 to i32*
  %1422 = load i32, i32* %1421
  %1423 = sext i32 %1422 to i64
  %1424 = mul nsw i64 %1423, 96
  %1425 = add i64 %1424, ptrtoint (%sje_type* @sje to i64)
  %1426 = add i64 %1418, -44
  %1427 = inttoptr i64 %1426 to i32*
  %1428 = load i32, i32* %1427
  %1429 = sext i32 %1428 to i64
  %1430 = shl nsw i64 %1429, 4
  %1431 = add i64 %1430, %1425
  %1432 = inttoptr i64 %1431 to i32*
  %1433 = load i32, i32* %1432
  %1434 = load i64, i64* %10, align 8
  %1435 = add i64 %1434, -16
  %1436 = inttoptr i64 %1435 to i32*
  store i32 %1433, i32* %1436
  %1437 = add i64 %1434, -60
  %1438 = inttoptr i64 %1437 to i32*
  %1439 = load i32, i32* %1438
  %1440 = zext i32 %1439 to i64
  store i64 %1440, i64* %8, align 8, !tbaa !1240
  %1441 = add i64 %1434, -44
  %1442 = inttoptr i64 %1441 to i32*
  %1443 = load i32, i32* %1442
  %1444 = sext i32 %1443 to i64
  store i64 %1444, i64* %4, align 8, !tbaa !1240
  %1445 = shl nsw i64 %1444, 2
  %1446 = add i64 %1445, ptrtoint (%jjface_type* @jjface to i64)
  %1447 = inttoptr i64 %1446 to i32*
  %1448 = load i32, i32* %1447
  %1449 = zext i32 %1448 to i64
  store i64 %1449, i64* %7, align 8, !tbaa !1240
  %1450 = inttoptr i64 %1435 to i32*
  %1451 = load i32, i32* %1450
  %1452 = zext i32 %1451 to i64
  store i64 %1452, i64* %6, align 8, !tbaa !1240
  %1453 = add i64 %3550, 7514
  %1454 = add i64 %3550, 63
  %1455 = load i64, i64* %9, align 8, !tbaa !1240
  %1456 = add i64 %1455, -8
  %1457 = inttoptr i64 %1456 to i64*
  store i64 %1454, i64* %1457
  store i64 %1456, i64* %9, align 8, !tbaa !1240
  %1458 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %1453, %struct.Memory* %3531)
  %1459 = load i64, i64* %10, align 8
  %1460 = add i64 %1459, -72
  %1461 = load i64, i64* %3, align 8
  store i64 %1460, i64* %5, align 8, !tbaa !1240
  %1462 = add i64 %1459, -52
  %1463 = inttoptr i64 %1462 to i32*
  %1464 = load i32, i32* %1463
  %1465 = sext i32 %1464 to i64
  store i64 %1465, i64* %4, align 8, !tbaa !1240
  %1466 = shl nsw i64 %1465, 2
  %1467 = add i64 %1466, ptrtoint (%op_type* @op to i64)
  %1468 = inttoptr i64 %1467 to i32*
  %1469 = load i32, i32* %1468
  %1470 = zext i32 %1469 to i64
  store i64 %1470, i64* %8, align 8, !tbaa !1240
  %1471 = add i64 %1459, -20
  %1472 = inttoptr i64 %1471 to i32*
  %1473 = load i32, i32* %1472
  %1474 = zext i32 %1473 to i64
  store i64 %1474, i64* %7, align 8, !tbaa !1240
  %1475 = add i64 %1459, -16
  %1476 = inttoptr i64 %1475 to i32*
  %1477 = load i32, i32* %1476
  %1478 = zext i32 %1477 to i64
  store i64 %1478, i64* %6, align 8, !tbaa !1240
  %1479 = add i64 %1461, 7451
  %1480 = add i64 %1461, 26
  %1481 = load i64, i64* %9, align 8, !tbaa !1240
  %1482 = add i64 %1481, -8
  %1483 = inttoptr i64 %1482 to i64*
  store i64 %1480, i64* %1483
  store i64 %1482, i64* %9, align 8, !tbaa !1240
  %1484 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %1479, %struct.Memory* %1458)
  %1485 = load i64, i64* %3, align 8
  br label %block_40ebef

block_409584:                                     ; preds = %block_40957a
  %1486 = inttoptr i64 %119 to i32*
  %1487 = load i32, i32* %1486
  %1488 = icmp ne i32 %1487, 1
  %1489 = select i1 %1488, i64 852, i64 10
  %1490 = add i64 %1495, %1489
  %1491 = inttoptr i64 %120 to i32*
  %1492 = load i32, i32* %1491
  br i1 %1488, label %block_4098d8, label %block_40958e

block_40957a:                                     ; preds = %block_4093fe
  %1493 = icmp ne i32 %3636, 8
  %1494 = select i1 %1493, i64 3348, i64 10
  %1495 = add i64 %2433, %1494
  br i1 %1493, label %block_40a28e, label %block_409584

block_40dd76.sink.split:                          ; preds = %block_40dc64, %block_40dc83, %block_40dce0, %block_40dbbd, %block_40dd67
  %1496 = phi i64 [ %1864, %block_40dbbd ], [ %2544, %block_40dc64 ], [ %2345, %block_40dc83 ], [ %2049, %block_40dce0 ], [ %1551, %block_40dd67 ]
  %1497 = phi i64 [ 114, %block_40dbbd ], [ 5, %block_40dc64 ], [ 5, %block_40dc83 ], [ 5, %block_40dce0 ], [ 5, %block_40dd67 ]
  %1498 = phi %struct.Memory* [ %3689, %block_40dbbd ], [ %3689, %block_40dc64 ], [ %3689, %block_40dc83 ], [ %3689, %block_40dce0 ], [ %1550, %block_40dd67 ]
  %1499 = phi i64 [ 165, %block_40dbbd ], [ 165, %block_40dc64 ], [ 165, %block_40dc83 ], [ 5, %block_40dce0 ], [ 5, %block_40dd67 ]
  %1500 = add i64 %1496, %1497
  br label %block_40dd76

block_40dd76:                                     ; preds = %block_40dcd6, %block_40dd76.sink.split
  %1501 = phi i64 [ %2055, %block_40dcd6 ], [ %1500, %block_40dd76.sink.split ]
  %1502 = phi i64 [ 5, %block_40dcd6 ], [ %1499, %block_40dd76.sink.split ]
  %1503 = phi %struct.Memory* [ %3689, %block_40dcd6 ], [ %1498, %block_40dd76.sink.split ]
  %1504 = add i64 %1501, %1502
  %1505 = inttoptr i64 %4855 to i32*
  %1506 = load i32, i32* %1505
  %1507 = sext i32 %1506 to i64
  %1508 = mul nsw i64 %1507, 48
  %1509 = add i64 %1508, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 8)
  %1510 = inttoptr i64 %1509 to i32*
  store i32 1, i32* %1510
  %1511 = inttoptr i64 %4863 to i32*
  %1512 = load i32, i32* %1511
  %1513 = icmp ne i32 %1512, 1
  %1514 = select i1 %1513, i64 378, i64 38
  %1515 = add i64 %1504, %1514
  br i1 %1513, label %block_40def0, label %block_40dd9c

block_409570.sink.split:                          ; preds = %block_409494, %block_40948a, %block_4094fd, %block_409507
  %1516 = phi i64 [ %2328, %block_40948a ], [ %9300, %block_409494 ], [ %1934, %block_4094fd ], [ %1909, %block_409507 ]
  %1517 = phi i32 [ 2, %block_40948a ], [ 2, %block_409494 ], [ 1, %block_4094fd ], [ 1, %block_409507 ]
  %1518 = phi i32 [ 6, %block_40948a ], [ 6, %block_409494 ], [ 5, %block_4094fd ], [ 5, %block_409507 ]
  %1519 = phi i64 [ 120, %block_40948a ], [ 120, %block_409494 ], [ 5, %block_4094fd ], [ 5, %block_409507 ]
  %1520 = inttoptr i64 %116 to i32*
  %1521 = load i32, i32* %1520
  %1522 = sext i32 %1521 to i64
  %1523 = shl nsw i64 %1522, 5
  %1524 = add i64 %1523, ptrtoint (%vassign_type* @vassign to i64)
  %1525 = inttoptr i64 %1524 to i32*
  store i32 %1517, i32* %1525
  %1526 = inttoptr i64 %116 to i32*
  %1527 = load i32, i32* %1526
  %1528 = sext i32 %1527 to i64
  %1529 = shl nsw i64 %1528, 5
  %1530 = add i64 %1529, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1531 = inttoptr i64 %1530 to i32*
  store i32 3, i32* %1531
  %1532 = inttoptr i64 %116 to i32*
  %1533 = load i32, i32* %1532
  %1534 = sext i32 %1533 to i64
  %1535 = shl nsw i64 %1534, 5
  %1536 = add i64 %1535, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %1537 = inttoptr i64 %1536 to i32*
  store i32 %1518, i32* %1537
  %1538 = inttoptr i64 %116 to i32*
  %1539 = load i32, i32* %1538
  %1540 = sext i32 %1539 to i64
  %1541 = shl nsw i64 %1540, 5
  store i64 %1541, i64* %5, align 8, !tbaa !1240
  %1542 = add i64 %1541, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %1543 = add i64 %1516, 90
  %1544 = inttoptr i64 %1542 to i32*
  store i32 7, i32* %1544
  br label %block_409570

block_409570:                                     ; preds = %block_409507, %block_409570.sink.split
  %1545 = phi i64 [ %1909, %block_409507 ], [ %1543, %block_409570.sink.split ]
  %1546 = phi i64 [ 5, %block_409507 ], [ %1519, %block_409570.sink.split ]
  %1547 = phi %struct.Memory* [ %3633, %block_409507 ], [ %3633, %block_409570.sink.split ]
  %1548 = add i64 %1545, %1546
  br label %block_40b95f

block_40dd67:                                     ; preds = %block_40dd38, %block_40dd1a
  %1549 = phi i64 [ %1825, %block_40dd1a ], [ %2839, %block_40dd38 ]
  %1550 = phi %struct.Memory* [ %3689, %block_40dd1a ], [ %3689, %block_40dd38 ]
  %1551 = add i64 %1549, 5
  br label %block_40dd76.sink.split

block_40e8e6:                                     ; preds = %block_40e8a7, %block_40e8b1
  %1552 = phi i64 [ %8162, %block_40e8a7 ], [ %2448, %block_40e8b1 ]
  %1553 = phi %struct.Memory* [ %8157, %block_40e8a7 ], [ %8157, %block_40e8b1 ]
  %1554 = inttoptr i64 %4855 to i32*
  %1555 = load i32, i32* %1554
  %1556 = sext i32 %1555 to i64
  %1557 = shl nsw i64 %1556, 2
  %1558 = add i64 %1557, ptrtoint (%newe_type* @newe to i64)
  %1559 = inttoptr i64 %1558 to i32*
  %1560 = load i32, i32* %1559
  %1561 = mul i32 %1560, 3
  %1562 = add i64 %1557, ptrtoint (%newi_type* @newi to i64)
  %1563 = inttoptr i64 %1562 to i32*
  %1564 = load i32, i32* %1563
  %1565 = add i32 %1564, %1561
  %1566 = zext i32 %1565 to i64
  store i64 %1566, i64* %5, align 8, !tbaa !1240
  %1567 = add i64 %1557, ptrtoint (%newc_type* @newc to i64)
  %1568 = inttoptr i64 %1567 to i32*
  store i32 %1565, i32* %1568
  %1569 = inttoptr i64 %4855 to i32*
  %1570 = load i32, i32* %1569
  %1571 = add i32 %1570, 1
  %1572 = inttoptr i64 %4855 to i32*
  store i32 %1571, i32* %1572
  %1573 = add i64 %1552, -11817
  br label %block_40babd

block_40bce4:                                     ; preds = %block_40bca0
  %1574 = icmp ne i32 %6433, 1
  %1575 = select i1 %1574, i64 496, i64 10
  %1576 = add i64 %6436, %1575
  br i1 %1574, label %block_40bed9, label %block_40bcee

block_409d4e:                                     ; preds = %block_409caf.block_409d4e_crit_edge, %block_409ce9
  %1577 = phi i32 [ %2775, %block_409caf.block_409d4e_crit_edge ], [ %2017, %block_409ce9 ]
  %1578 = phi i64 [ %2773, %block_409caf.block_409d4e_crit_edge ], [ %2029, %block_409ce9 ]
  %1579 = sext i32 %1577 to i64
  %1580 = shl nsw i64 %1579, 2
  %1581 = add i64 %1580, ptrtoint (%newc_type* @newc to i64)
  %1582 = inttoptr i64 %1581 to i32*
  store i32 3, i32* %1582
  %1583 = inttoptr i64 %116 to i32*
  %1584 = load i32, i32* %1583
  %1585 = sext i32 %1584 to i64
  %1586 = shl nsw i64 %1585, 5
  %1587 = add i64 %1586, ptrtoint (%vassign_type* @vassign to i64)
  %1588 = inttoptr i64 %1587 to i32*
  store i32 4, i32* %1588
  %1589 = inttoptr i64 %116 to i32*
  %1590 = load i32, i32* %1589
  %1591 = sext i32 %1590 to i64
  %1592 = shl nsw i64 %1591, 5
  %1593 = add i64 %1592, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1594 = inttoptr i64 %1593 to i32*
  store i32 6, i32* %1594
  %1595 = inttoptr i64 %116 to i32*
  %1596 = load i32, i32* %1595
  %1597 = sext i32 %1596 to i64
  %1598 = shl nsw i64 %1597, 5
  store i64 %1598, i64* %5, align 8, !tbaa !1240
  %1599 = add i64 %1598, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %1600 = add i64 %1578, 84
  %1601 = inttoptr i64 %1599 to i32*
  store i32 7, i32* %1601
  br label %block_409da2

block_40c544:                                     ; preds = %block_40c4d0
  %1602 = mul nsw i64 %4069, 96
  %1603 = add i64 %1602, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %1604 = inttoptr i64 %1603 to i32*
  %1605 = load i32, i32* %1604
  %1606 = inttoptr i64 %4855 to i32*
  %1607 = load i32, i32* %1606
  %1608 = sub i32 %1605, %1607
  %1609 = icmp eq i32 %1608, 0
  %1610 = lshr i32 %1608, 31
  %1611 = lshr i32 %1605, 31
  %1612 = lshr i32 %1607, 31
  %1613 = xor i32 %1612, %1611
  %1614 = xor i32 %1610, %1611
  %1615 = add nuw nsw i32 %1614, %1613
  %1616 = icmp eq i32 %1615, 2
  %1617 = icmp ne i32 %1610, 0
  %1618 = xor i1 %1617, %1616
  %1619 = or i1 %1609, %1618
  %1620 = select i1 %1619, i64 134, i64 33
  %1621 = add i64 %4076, %1620
  br i1 %1619, label %block_40c5cf, label %block_40c565

block_40d534:                                     ; preds = %block_40d52a
  %1622 = inttoptr i64 %4855 to i32*
  %1623 = load i32, i32* %1622
  %1624 = sext i32 %1623 to i64
  %1625 = shl nsw i64 %1624, 2
  %1626 = add i64 %1625, ptrtoint (%newe_type* @newe to i64)
  %1627 = inttoptr i64 %1626 to i32*
  %1628 = load i32, i32* %1627
  %1629 = add i32 %1628, 1
  %1630 = inttoptr i64 %1626 to i32*
  store i32 %1629, i32* %1630
  %1631 = inttoptr i64 %4855 to i32*
  %1632 = load i32, i32* %1631
  %1633 = sext i32 %1632 to i64
  %1634 = mul nsw i64 %1633, 48
  %1635 = add i64 %1634, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 20)
  %1636 = add i64 %2730, 53
  %1637 = inttoptr i64 %1635 to i32*
  store i32 1, i32* %1637
  br label %block_40d768

block_40bd28:                                     ; preds = %block_40bcee
  %1638 = mul nsw i64 %1405, 96
  %1639 = add i64 %1638, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %1640 = inttoptr i64 %1639 to i32*
  %1641 = load i32, i32* %1640
  %1642 = inttoptr i64 %4855 to i32*
  %1643 = load i32, i32* %1642
  %1644 = sub i32 %1641, %1643
  %1645 = icmp eq i32 %1644, 0
  %1646 = lshr i32 %1644, 31
  %1647 = lshr i32 %1641, 31
  %1648 = lshr i32 %1643, 31
  %1649 = xor i32 %1648, %1647
  %1650 = xor i32 %1646, %1647
  %1651 = add nuw nsw i32 %1650, %1649
  %1652 = icmp eq i32 %1651, 2
  %1653 = icmp ne i32 %1646, 0
  %1654 = xor i1 %1653, %1652
  %1655 = or i1 %1645, %1654
  %1656 = select i1 %1655, i64 423, i64 33
  %1657 = add i64 %1412, %1656
  br i1 %1655, label %block_40becf, label %block_40bd49

block_408d27:                                     ; preds = %block_408cee
  %1658 = mul nsw i64 %3273, 96
  %1659 = add i64 %1658, ptrtoint (%sje_type* @sje to i64)
  %1660 = inttoptr i64 %1659 to i32*
  %1661 = load i32, i32* %1660
  %1662 = inttoptr i64 %116 to i32*
  %1663 = load i32, i32* %1662
  %1664 = sub i32 %1661, %1663
  %1665 = lshr i32 %1664, 31
  %1666 = lshr i32 %1661, 31
  %1667 = lshr i32 %1663, 31
  %1668 = xor i32 %1667, %1666
  %1669 = xor i32 %1665, %1666
  %1670 = add nuw nsw i32 %1669, %1668
  %1671 = icmp eq i32 %1670, 2
  %1672 = icmp ne i32 %1665, 0
  %1673 = xor i1 %1672, %1671
  %1674 = select i1 %1673, i64 32, i64 79
  %1675 = add i64 %3280, %1674
  br i1 %1673, label %block_408d47, label %block_408d76

block_40ed24:                                     ; preds = %block_40ece8
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%diagn_type* @diagn to i64), i64* %5, align 8, !tbaa !1240
  %1676 = load i64, i64* %10, align 8
  %1677 = add i64 %1676, -72
  store i64 %1677, i64* %8, align 8, !tbaa !1240
  %1678 = add i64 %1676, -8
  %1679 = inttoptr i64 %1678 to i32*
  %1680 = load i32, i32* %1679
  %1681 = sext i32 %1680 to i64
  %1682 = mul nsw i64 %1681, 96
  %1683 = add i64 %1682, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %1683, i64* %7, align 8, !tbaa !1240
  %1684 = add i64 %1676, -20
  %1685 = inttoptr i64 %1684 to i32*
  %1686 = load i32, i32* %1685
  %1687 = sext i32 %1686 to i64
  %1688 = shl nsw i64 %1687, 4
  %1689 = load i64, i64* %4, align 8
  %1690 = add i64 %1688, %1689
  %1691 = load i64, i64* %10, align 8
  %1692 = add i64 %1691, -52
  %1693 = inttoptr i64 %1692 to i32*
  %1694 = load i32, i32* %1693
  %1695 = sext i32 %1694 to i64
  %1696 = shl nsw i64 %1695, 2
  %1697 = add i64 %1696, %1690
  %1698 = inttoptr i64 %1697 to i32*
  %1699 = load i32, i32* %1698
  %1700 = sext i32 %1699 to i64
  %1701 = load i64, i64* %7, align 8
  %1702 = shl nsw i64 %1700, 3
  %1703 = add i64 %1702, %1701
  %1704 = inttoptr i64 %1703 to i32*
  %1705 = load i32, i32* %1704
  %1706 = add i64 %1691, -16
  %1707 = inttoptr i64 %1706 to i32*
  store i32 %1705, i32* %1707
  %1708 = add i64 %1691, -8
  %1709 = inttoptr i64 %1708 to i32*
  %1710 = load i32, i32* %1709
  %1711 = sext i32 %1710 to i64
  %1712 = mul nsw i64 %1711, 96
  %1713 = load i64, i64* %5, align 8
  %1714 = add i64 %1712, %1713
  store i64 %1714, i64* %5, align 8, !tbaa !1240
  %1715 = add i64 %1691, -20
  %1716 = inttoptr i64 %1715 to i32*
  %1717 = load i32, i32* %1716
  %1718 = sext i32 %1717 to i64
  %1719 = shl nsw i64 %1718, 4
  %1720 = load i64, i64* %4, align 8
  %1721 = add i64 %1719, %1720
  %1722 = load i64, i64* %10, align 8
  %1723 = add i64 %1722, -52
  %1724 = inttoptr i64 %1723 to i32*
  %1725 = load i32, i32* %1724
  %1726 = sext i32 %1725 to i64
  %1727 = shl nsw i64 %1726, 2
  %1728 = add i64 %1727, %1721
  %1729 = inttoptr i64 %1728 to i32*
  %1730 = load i32, i32* %1729
  %1731 = sext i32 %1730 to i64
  %1732 = load i64, i64* %5, align 8
  %1733 = shl nsw i64 %1731, 3
  %1734 = add i64 %1732, 4
  %1735 = add i64 %1734, %1733
  %1736 = inttoptr i64 %1735 to i32*
  %1737 = load i32, i32* %1736
  %1738 = zext i32 %1737 to i64
  store i64 %1738, i64* %7, align 8, !tbaa !1240
  %1739 = zext i32 %1725 to i64
  store i64 %1739, i64* %6, align 8, !tbaa !1240
  %1740 = add i64 %1722, -20
  %1741 = inttoptr i64 %1740 to i32*
  %1742 = load i32, i32* %1741
  %1743 = zext i32 %1742 to i64
  store i64 %1743, i64* %5, align 8, !tbaa !1240
  %1744 = add i64 %1722, -60
  %1745 = inttoptr i64 %1744 to i32*
  %1746 = load i32, i32* %1745
  %1747 = zext i32 %1746 to i64
  store i64 %1747, i64* %11, align 8, !tbaa !1240
  %1748 = add i64 %1722, -44
  %1749 = inttoptr i64 %1748 to i32*
  %1750 = load i32, i32* %1749
  %1751 = zext i32 %1750 to i64
  store i64 %1751, i64* %6292, align 8, !tbaa !1240
  %1752 = add i64 %1722, -8
  %1753 = inttoptr i64 %1752 to i32*
  %1754 = load i32, i32* %1753
  %1755 = add i64 %1722, -16
  %1756 = inttoptr i64 %1755 to i32*
  %1757 = load i32, i32* %1756
  %1758 = load i64, i64* %9, align 8
  %1759 = inttoptr i64 %1758 to i32*
  store i32 %1754, i32* %1759
  %1760 = add i64 %1758, 8
  %1761 = inttoptr i64 %1760 to i32*
  store i32 %1757, i32* %1761
  %1762 = add i64 %2031, 7660
  %1763 = add i64 %2031, 138
  %1764 = add i64 %1758, -8
  %1765 = inttoptr i64 %1764 to i64*
  store i64 %1763, i64* %1765
  store i64 %1764, i64* %9, align 8, !tbaa !1240
  %1766 = tail call %struct.Memory* @sub_410b10_mor_ne(%struct.State* nonnull %0, i64 %1762, %struct.Memory* %2988)
  br label %block_40edb3

block_40cd23:                                     ; preds = %block_40cd04
  %1767 = shl nsw i64 %6152, 2
  %1768 = add i64 %1767, ptrtoint (%newe_type* @newe to i64)
  %1769 = inttoptr i64 %1768 to i32*
  %1770 = load i32, i32* %1769
  %1771 = add i32 %1770, 1
  %1772 = inttoptr i64 %1768 to i32*
  store i32 %1771, i32* %1772
  %1773 = inttoptr i64 %4855 to i32*
  %1774 = load i32, i32* %1773
  %1775 = sext i32 %1774 to i64
  %1776 = mul nsw i64 %1775, 48
  %1777 = add i64 %1776, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 44)
  %1778 = add i64 %6159, 53
  %1779 = inttoptr i64 %1777 to i32*
  store i32 1, i32* %1779
  br label %block_40d0c4

block_40efe4.loopexit:                            ; preds = %block_40ee28
  br label %block_40efe4

block_40efe4:                                     ; preds = %block_40eead, %block_40efe4.loopexit, %block_40efda
  %1780 = phi i64 [ %5047, %block_40eead ], [ %151, %block_40efda ], [ %5047, %block_40efe4.loopexit ]
  %1781 = phi i64 [ %5620, %block_40eead ], [ %154, %block_40efda ], [ %969, %block_40efe4.loopexit ]
  %1782 = phi i64 [ 10, %block_40eead ], [ 10, %block_40efda ], [ 321, %block_40efe4.loopexit ]
  %1783 = phi %struct.Memory* [ %5048, %block_40eead ], [ %153, %block_40efda ], [ %956, %block_40efe4.loopexit ]
  %1784 = add i64 %1782, %1781
  br label %block_40efe9

block_409f85:                                     ; preds = %block_409f66
  %1785 = shl nsw i64 %6962, 2
  %1786 = add i64 %1785, ptrtoint (%newc_type* @newc to i64)
  %1787 = inttoptr i64 %1786 to i32*
  store i32 4, i32* %1787
  %1788 = inttoptr i64 %116 to i32*
  %1789 = load i32, i32* %1788
  %1790 = sext i32 %1789 to i64
  %1791 = shl nsw i64 %1790, 5
  %1792 = add i64 %1791, ptrtoint (%vassign_type* @vassign to i64)
  %1793 = inttoptr i64 %1792 to i32*
  store i32 4, i32* %1793
  %1794 = inttoptr i64 %116 to i32*
  %1795 = load i32, i32* %1794
  %1796 = sext i32 %1795 to i64
  %1797 = shl nsw i64 %1796, 5
  %1798 = add i64 %1797, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1799 = inttoptr i64 %1798 to i32*
  store i32 5, i32* %1799
  %1800 = inttoptr i64 %116 to i32*
  %1801 = load i32, i32* %1800
  %1802 = sext i32 %1801 to i64
  %1803 = shl nsw i64 %1802, 5
  %1804 = add i64 %1803, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %1805 = inttoptr i64 %1804 to i32*
  store i32 6, i32* %1805
  %1806 = inttoptr i64 %116 to i32*
  %1807 = load i32, i32* %1806
  %1808 = sext i32 %1807 to i64
  %1809 = shl nsw i64 %1808, 5
  store i64 %1809, i64* %5, align 8, !tbaa !1240
  %1810 = add i64 %1809, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %1811 = add i64 %6969, 105
  %1812 = inttoptr i64 %1810 to i32*
  store i32 7, i32* %1812
  br label %block_40a27a

block_40d51b:                                     ; preds = %block_40d4b0, %block_40d4d1, %block_40d45c
  %1813 = phi i64 [ %2602, %block_40d45c ], [ %6543, %block_40d4b0 ], [ %6325, %block_40d4d1 ]
  %1814 = phi %struct.Memory* [ %3977, %block_40d45c ], [ %3977, %block_40d4b0 ], [ %3977, %block_40d4d1 ]
  %1815 = add i64 %1813, 5
  br label %block_40d768

block_40dd1a:                                     ; preds = %block_40dce0
  %1816 = inttoptr i64 %4865 to i32*
  %1817 = load i32, i32* %1816
  %1818 = sext i32 %1817 to i64
  %1819 = mul nsw i64 %1818, 24
  %1820 = add i64 %1819, ptrtoint (%cbc_type* @cbc to i64)
  %1821 = inttoptr i64 %1820 to i32*
  %1822 = load i32, i32* %1821
  %1823 = icmp ne i32 %1822, 2
  %1824 = select i1 %1823, i64 77, i64 30
  %1825 = add i64 %2049, %1824
  br i1 %1823, label %block_40dd67, label %block_40dd38

block_40dbbd:                                     ; preds = %block_40db84
  %1826 = mul nsw i64 %3422, 96
  %1827 = add i64 %1826, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %1828 = inttoptr i64 %1827 to i32*
  %1829 = load i32, i32* %1828
  %1830 = inttoptr i64 %4855 to i32*
  %1831 = load i32, i32* %1830
  %1832 = sext i32 %1831 to i64
  %1833 = mul nsw i64 %1832, 96
  %1834 = add i64 %1833, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %1834, i64* %6292, align 8, !tbaa !1240
  %1835 = add i64 %1833, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 8)
  %1836 = inttoptr i64 %1835 to i32*
  store i32 %1829, i32* %1836
  %1837 = inttoptr i64 %4855 to i32*
  %1838 = load i32, i32* %1837
  %1839 = sext i32 %1838 to i64
  %1840 = mul nsw i64 %1839, 48
  store i64 %1840, i64* %11, align 8, !tbaa !1240
  %1841 = add i64 %1840, ptrtoint (%ijel_type* @ijel to i64)
  %1842 = inttoptr i64 %1841 to i32*
  %1843 = load i32, i32* %1842
  %1844 = zext i32 %1843 to i64
  store i64 %1844, i64* %4866, align 8, !tbaa !1240
  %1845 = mul nsw i64 %1839, 96
  %1846 = add i64 %1845, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 12)
  %1847 = inttoptr i64 %1846 to i32*
  store i32 %1843, i32* %1847
  %1848 = inttoptr i64 %4865 to i32*
  %1849 = load i32, i32* %1848
  %1850 = sext i32 %1849 to i64
  %1851 = mul nsw i64 %1850, 96
  %1852 = add i64 %1851, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %1853 = inttoptr i64 %1852 to i32*
  %1854 = load i32, i32* %1853
  %1855 = sext i32 %1854 to i64
  %1856 = mul nsw i64 %1855, 48
  %1857 = add i64 %1856, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 28)
  %1858 = inttoptr i64 %1857 to i32*
  store i32 1, i32* %1858
  %1859 = inttoptr i64 %4855 to i32*
  %1860 = load i32, i32* %1859
  %1861 = sext i32 %1860 to i64
  %1862 = mul nsw i64 %1861, 48
  %1863 = add i64 %1862, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 4)
  %1864 = add i64 %3429, 162
  %1865 = inttoptr i64 %1863 to i32*
  store i32 1, i32* %1865
  br label %block_40dd76.sink.split

block_40a516:                                     ; preds = %block_40a427, %block_40a3ed.block_40a516_crit_edge
  %1866 = phi i32 [ %4913, %block_40a3ed.block_40a516_crit_edge ], [ %7584, %block_40a427 ]
  %1867 = phi i64 [ %4911, %block_40a3ed.block_40a516_crit_edge ], [ %7596, %block_40a427 ]
  %1868 = sext i32 %1866 to i64
  %1869 = mul nsw i64 %1868, 96
  %1870 = add i64 %1869, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %1871 = inttoptr i64 %1870 to i32*
  %1872 = load i32, i32* %1871
  %1873 = inttoptr i64 %124 to i32*
  store i32 %1872, i32* %1873
  %1874 = inttoptr i64 %124 to i32*
  %1875 = load i32, i32* %1874
  %1876 = sext i32 %1875 to i64
  %1877 = mul nsw i64 %1876, 24
  %1878 = add i64 %1877, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %1879 = inttoptr i64 %1878 to i32*
  %1880 = load i32, i32* %1879
  %1881 = icmp ne i32 %1880, 3
  %1882 = select i1 %1881, i64 159, i64 58
  %1883 = add i64 %1867, %1882
  br i1 %1881, label %block_40a516.block_40a5b5_crit_edge, label %block_40a550

block_40a516.block_40a5b5_crit_edge:              ; preds = %block_40a516
  %1884 = inttoptr i64 %116 to i32*
  %1885 = load i32, i32* %1884
  br label %block_40a5b5

block_40ad0d:                                     ; preds = %block_40aa26, %block_40ad08, %block_40aa7f
  %1886 = phi i64 [ %5407, %block_40ad08 ], [ %8080, %block_40aa26 ], [ %2429, %block_40aa7f ]
  %1887 = phi i64 [ 5, %block_40ad08 ], [ 549, %block_40aa26 ], [ 549, %block_40aa7f ]
  %1888 = phi %struct.Memory* [ %5406, %block_40ad08 ], [ %3633, %block_40aa26 ], [ %3633, %block_40aa7f ]
  %1889 = add i64 %1886, %1887
  br label %block_40ad17.sink.split

block_409d0a:                                     ; preds = %block_409ce9
  %1890 = sext i32 %2017 to i64
  %1891 = shl nsw i64 %1890, 2
  %1892 = add i64 %1891, ptrtoint (%newc_type* @newc to i64)
  %1893 = inttoptr i64 %1892 to i32*
  store i32 2, i32* %1893
  %1894 = inttoptr i64 %116 to i32*
  %1895 = load i32, i32* %1894
  %1896 = sext i32 %1895 to i64
  %1897 = shl nsw i64 %1896, 5
  %1898 = add i64 %1897, ptrtoint (%vassign_type* @vassign to i64)
  %1899 = inttoptr i64 %1898 to i32*
  store i32 6, i32* %1899
  %1900 = inttoptr i64 %116 to i32*
  %1901 = load i32, i32* %1900
  %1902 = sext i32 %1901 to i64
  %1903 = shl nsw i64 %1902, 5
  store i64 %1903, i64* %5, align 8, !tbaa !1240
  %1904 = add i64 %1903, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1905 = inttoptr i64 %1904 to i32*
  store i32 7, i32* %1905
  %1906 = add i64 %2029, 152
  br label %block_409da2

block_409507:                                     ; preds = %block_4094fd
  %1907 = icmp ne i32 %1931, 3
  %1908 = select i1 %1907, i64 100, i64 10
  %1909 = add i64 %1934, %1908
  br i1 %1907, label %block_409570, label %block_409570.sink.split

block_40db45:                                     ; preds = %block_40db3b
  %1910 = inttoptr i64 %4855 to i32*
  %1911 = load i32, i32* %1910
  %1912 = sext i32 %1911 to i64
  %1913 = shl nsw i64 %1912, 2
  %1914 = add i64 %1913, ptrtoint (%newe_type* @newe to i64)
  %1915 = inttoptr i64 %1914 to i32*
  %1916 = load i32, i32* %1915
  %1917 = add i32 %1916, 2
  %1918 = inttoptr i64 %1914 to i32*
  store i32 %1917, i32* %1918
  %1919 = inttoptr i64 %4855 to i32*
  %1920 = load i32, i32* %1919
  %1921 = sext i32 %1920 to i64
  %1922 = mul nsw i64 %1921, 48
  %1923 = add i64 %1922, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 4)
  %1924 = inttoptr i64 %1923 to i32*
  store i32 1, i32* %1924
  %1925 = inttoptr i64 %4861 to i32*
  %1926 = load i32, i32* %1925
  %1927 = icmp ne i32 %1926, 1
  %1928 = select i1 %1927, i64 401, i64 63
  %1929 = add i64 %3695, %1928
  br i1 %1927, label %block_40dcd6, label %block_40db84

block_4094fd:                                     ; preds = %block_409494
  %1930 = inttoptr i64 %121 to i32*
  %1931 = load i32, i32* %1930
  %1932 = icmp eq i32 %1931, 2
  %1933 = select i1 %1932, i64 20, i64 10
  %1934 = add i64 %9300, %1933
  br i1 %1932, label %block_409570.sink.split, label %block_409507

block_40a37f:                                     ; preds = %block_40a305, %block_40a2cb.block_40a37f_crit_edge
  %1935 = phi i32 [ %4238, %block_40a2cb.block_40a37f_crit_edge ], [ %7237, %block_40a305 ]
  %1936 = phi i64 [ %4236, %block_40a2cb.block_40a37f_crit_edge ], [ %7249, %block_40a305 ]
  %1937 = sext i32 %1935 to i64
  %1938 = shl nsw i64 %1937, 2
  %1939 = add i64 %1938, ptrtoint (%newc_type* @newc to i64)
  %1940 = inttoptr i64 %1939 to i32*
  store i32 4, i32* %1940
  %1941 = inttoptr i64 %116 to i32*
  %1942 = load i32, i32* %1941
  %1943 = sext i32 %1942 to i64
  %1944 = shl nsw i64 %1943, 5
  %1945 = add i64 %1944, ptrtoint (%vassign_type* @vassign to i64)
  %1946 = inttoptr i64 %1945 to i32*
  store i32 4, i32* %1946
  %1947 = inttoptr i64 %116 to i32*
  %1948 = load i32, i32* %1947
  %1949 = sext i32 %1948 to i64
  %1950 = shl nsw i64 %1949, 5
  %1951 = add i64 %1950, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1952 = inttoptr i64 %1951 to i32*
  store i32 5, i32* %1952
  %1953 = inttoptr i64 %116 to i32*
  %1954 = load i32, i32* %1953
  %1955 = sext i32 %1954 to i64
  %1956 = shl nsw i64 %1955, 5
  %1957 = add i64 %1956, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %1958 = inttoptr i64 %1957 to i32*
  store i32 6, i32* %1958
  %1959 = inttoptr i64 %116 to i32*
  %1960 = load i32, i32* %1959
  %1961 = sext i32 %1960 to i64
  %1962 = shl nsw i64 %1961, 5
  store i64 %1962, i64* %5, align 8, !tbaa !1240
  %1963 = add i64 %1962, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %1964 = add i64 %1936, 105
  %1965 = inttoptr i64 %1963 to i32*
  store i32 7, i32* %1965
  br label %block_40ad1c

block_40ccfa:                                     ; preds = %block_40cceb, %block_40cab4, %block_40c9d7, %block_40c964, %block_40cacd, %block_40cb07
  %1966 = phi i64 [ %4218, %block_40cacd ], [ %9154, %block_40cceb ], [ %1033, %block_40cb07 ], [ %8866, %block_40c964 ], [ %9134, %block_40cab4 ], [ %9077, %block_40c9d7 ]
  %1967 = phi i64 [ 499, %block_40cacd ], [ 5, %block_40cceb ], [ 5, %block_40cb07 ], [ 293, %block_40c964 ], [ 5, %block_40cab4 ], [ 5, %block_40c9d7 ]
  %1968 = phi %struct.Memory* [ %8803, %block_40cacd ], [ %9153, %block_40cceb ], [ %8803, %block_40cb07 ], [ %8803, %block_40c964 ], [ %9133, %block_40cab4 ], [ %8803, %block_40c9d7 ]
  %1969 = phi i64 [ 5, %block_40cacd ], [ 5, %block_40cceb ], [ 5, %block_40cb07 ], [ 572, %block_40c964 ], [ 572, %block_40cab4 ], [ 572, %block_40c9d7 ]
  %1970 = add nuw nsw i64 %1969, %1967
  %1971 = add i64 %1970, %1966
  %1972 = inttoptr i64 %4863 to i32*
  %1973 = load i32, i32* %1972
  %1974 = icmp ne i32 %1973, 2
  %1975 = select i1 %1974, i64 396, i64 10
  %1976 = add i64 %1971, %1975
  br i1 %1974, label %block_40ce86, label %block_40cd04

block_40b4f2:                                     ; preds = %block_40b4d1
  %1977 = sext i32 %3813 to i64
  %1978 = shl nsw i64 %1977, 2
  %1979 = add i64 %1978, ptrtoint (%newc_type* @newc to i64)
  %1980 = inttoptr i64 %1979 to i32*
  store i32 5, i32* %1980
  %1981 = inttoptr i64 %116 to i32*
  %1982 = load i32, i32* %1981
  %1983 = sext i32 %1982 to i64
  %1984 = shl nsw i64 %1983, 5
  %1985 = add i64 %1984, ptrtoint (%vassign_type* @vassign to i64)
  %1986 = inttoptr i64 %1985 to i32*
  store i32 3, i32* %1986
  %1987 = inttoptr i64 %116 to i32*
  %1988 = load i32, i32* %1987
  %1989 = sext i32 %1988 to i64
  %1990 = shl nsw i64 %1989, 5
  %1991 = add i64 %1990, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %1992 = inttoptr i64 %1991 to i32*
  store i32 4, i32* %1992
  %1993 = inttoptr i64 %116 to i32*
  %1994 = load i32, i32* %1993
  %1995 = sext i32 %1994 to i64
  %1996 = shl nsw i64 %1995, 5
  %1997 = add i64 %1996, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %1998 = inttoptr i64 %1997 to i32*
  store i32 5, i32* %1998
  %1999 = inttoptr i64 %116 to i32*
  %2000 = load i32, i32* %1999
  %2001 = sext i32 %2000 to i64
  %2002 = shl nsw i64 %2001, 5
  %2003 = add i64 %2002, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %2004 = inttoptr i64 %2003 to i32*
  store i32 6, i32* %2004
  %2005 = inttoptr i64 %116 to i32*
  %2006 = load i32, i32* %2005
  %2007 = sext i32 %2006 to i64
  %2008 = shl nsw i64 %2007, 5
  store i64 %2008, i64* %5, align 8, !tbaa !1240
  %2009 = add i64 %2008, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %2010 = inttoptr i64 %2009 to i32*
  store i32 7, i32* %2010
  %2011 = add i64 %4016, 278
  br label %block_40b937

block_409ce9:                                     ; preds = %block_409caf
  %2012 = mul nsw i64 %2766, 96
  %2013 = add i64 %2012, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %2014 = inttoptr i64 %2013 to i32*
  %2015 = load i32, i32* %2014
  %2016 = inttoptr i64 %116 to i32*
  %2017 = load i32, i32* %2016
  %2018 = sub i32 %2015, %2017
  %2019 = lshr i32 %2018, 31
  %2020 = lshr i32 %2015, 31
  %2021 = lshr i32 %2017, 31
  %2022 = xor i32 %2021, %2020
  %2023 = xor i32 %2019, %2020
  %2024 = add nuw nsw i32 %2023, %2022
  %2025 = icmp eq i32 %2024, 2
  %2026 = icmp ne i32 %2019, 0
  %2027 = xor i1 %2026, %2025
  %2028 = select i1 %2027, i64 33, i64 101
  %2029 = add i64 %2773, %2028
  br i1 %2027, label %block_409d0a, label %block_409d4e

block_40ece8:                                     ; preds = %block_40ebef
  %2030 = select i1 %3050, i64 198, i64 60
  %2031 = add i64 %3020, %2030
  store i64 %2031, i64* %3, align 8, !tbaa !1240
  br i1 %3050, label %block_40edb3, label %block_40ed24

block_40dce0:                                     ; preds = %block_40dcd6
  %2032 = inttoptr i64 %4855 to i32*
  %2033 = load i32, i32* %2032
  %2034 = sext i32 %2033 to i64
  %2035 = mul nsw i64 %2034, 96
  %2036 = add i64 %2035, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %2037 = inttoptr i64 %2036 to i32*
  %2038 = load i32, i32* %2037
  %2039 = inttoptr i64 %4865 to i32*
  store i32 %2038, i32* %2039
  %2040 = inttoptr i64 %4855 to i32*
  %2041 = load i32, i32* %2040
  %2042 = sext i32 %2041 to i64
  %2043 = mul nsw i64 %2042, 48
  %2044 = add i64 %2043, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %2045 = inttoptr i64 %2044 to i32*
  %2046 = load i32, i32* %2045
  %2047 = icmp ne i32 %2046, 1
  %2048 = select i1 %2047, i64 140, i64 58
  %2049 = add i64 %2055, %2048
  br i1 %2047, label %block_40dd76.sink.split, label %block_40dd1a

block_40db22:                                     ; preds = %block_40d97c, %block_40db1d
  %2050 = phi i64 [ %3853, %block_40db1d ], [ %7708, %block_40d97c ]
  %2051 = phi %struct.Memory* [ %3852, %block_40db1d ], [ %3071, %block_40d97c ]
  %2052 = add i64 %2050, 5
  br label %block_40db31

block_40dcd6:                                     ; preds = %block_40db45
  %2053 = icmp ne i32 %1926, 2
  %2054 = select i1 %2053, i64 155, i64 10
  %2055 = add i64 %1929, %2054
  br i1 %2053, label %block_40dd76, label %block_40dce0

block_40a4d2:                                     ; preds = %block_40a448.block_40a4d2_crit_edge, %block_40a482
  %2056 = phi i32 [ %5889, %block_40a448.block_40a4d2_crit_edge ], [ %2370, %block_40a482 ]
  %2057 = phi i64 [ %5887, %block_40a448.block_40a4d2_crit_edge ], [ %2382, %block_40a482 ]
  %2058 = sext i32 %2056 to i64
  %2059 = shl nsw i64 %2058, 2
  %2060 = add i64 %2059, ptrtoint (%newc_type* @newc to i64)
  %2061 = inttoptr i64 %2060 to i32*
  store i32 2, i32* %2061
  %2062 = inttoptr i64 %116 to i32*
  %2063 = load i32, i32* %2062
  %2064 = sext i32 %2063 to i64
  %2065 = shl nsw i64 %2064, 5
  %2066 = add i64 %2065, ptrtoint (%vassign_type* @vassign to i64)
  %2067 = inttoptr i64 %2066 to i32*
  store i32 5, i32* %2067
  %2068 = inttoptr i64 %116 to i32*
  %2069 = load i32, i32* %2068
  %2070 = sext i32 %2069 to i64
  %2071 = shl nsw i64 %2070, 5
  store i64 %2071, i64* %5, align 8, !tbaa !1240
  %2072 = add i64 %2071, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2073 = add i64 %2057, 63
  %2074 = inttoptr i64 %2072 to i32*
  store i32 7, i32* %2074
  br label %block_40a60e

block_40a622:                                     ; preds = %block_40a618
  %2075 = icmp ne i32 %2881, 3
  %2076 = select i1 %2075, i64 886, i64 10
  %2077 = add i64 %2884, %2076
  br i1 %2075, label %block_40a998, label %block_40a62c

block_40a7a7:                                     ; preds = %block_40a76d
  %2078 = mul nsw i64 %953, 96
  %2079 = add i64 %2078, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %2080 = inttoptr i64 %2079 to i32*
  %2081 = load i32, i32* %2080
  %2082 = inttoptr i64 %116 to i32*
  %2083 = load i32, i32* %2082
  %2084 = sub i32 %2081, %2083
  %2085 = lshr i32 %2084, 31
  %2086 = lshr i32 %2081, 31
  %2087 = lshr i32 %2083, 31
  %2088 = xor i32 %2087, %2086
  %2089 = xor i32 %2085, %2086
  %2090 = add nuw nsw i32 %2089, %2088
  %2091 = icmp eq i32 %2090, 2
  %2092 = icmp ne i32 %2085, 0
  %2093 = xor i1 %2092, %2091
  %2094 = select i1 %2093, i64 33, i64 239
  %2095 = add i64 %4662, %2094
  br i1 %2093, label %block_40a7c8, label %block_40a896

block_40e4bc:                                     ; preds = %block_40e49d
  %2096 = mul nsw i64 %2219, 96
  %2097 = add i64 %2096, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %2098 = inttoptr i64 %2097 to i32*
  %2099 = load i32, i32* %2098
  %2100 = inttoptr i64 %4865 to i32*
  store i32 %2099, i32* %2100
  %2101 = inttoptr i64 %4865 to i32*
  %2102 = load i32, i32* %2101
  %2103 = sext i32 %2102 to i64
  %2104 = mul nsw i64 %2103, 24
  %2105 = add i64 %2104, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %2106 = inttoptr i64 %2105 to i32*
  %2107 = load i32, i32* %2106
  %2108 = icmp ne i32 %2107, 3
  %2109 = select i1 %2108, i64 132, i64 58
  %2110 = add i64 %2226, %2109
  br i1 %2108, label %block_40e74f.sink.split, label %block_40e4f6

block_40de7d:                                     ; preds = %block_40dd9c
  %2111 = add i64 %1355, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %2112 = inttoptr i64 %2111 to i32*
  %2113 = load i32, i32* %2112
  %2114 = icmp ne i32 %2113, 3
  %2115 = select i1 %2114, i64 105, i64 31
  %2116 = add i64 %1361, %2115
  br i1 %2114, label %block_40deeb, label %block_40de9c

block_40b4b2:                                     ; preds = %block_40b341, %block_40b360
  %2117 = phi i64 [ %3564, %block_40b360 ], [ %3686, %block_40b341 ]
  %2118 = inttoptr i64 %124 to i32*
  %2119 = load i32, i32* %2118
  %2120 = sext i32 %2119 to i64
  %2121 = mul nsw i64 %2120, 24
  %2122 = add i64 %2121, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %2123 = inttoptr i64 %2122 to i32*
  %2124 = load i32, i32* %2123
  %2125 = icmp ne i32 %2124, 3
  %2126 = select i1 %2125, i64 195, i64 31
  %2127 = add i64 %2117, %2126
  br i1 %2125, label %block_40b575, label %block_40b4d1

block_40c4b1:                                     ; preds = %block_40c4a7
  %2128 = inttoptr i64 %4855 to i32*
  %2129 = load i32, i32* %2128
  %2130 = sext i32 %2129 to i64
  %2131 = mul nsw i64 %2130, 48
  %2132 = add i64 %2131, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 40)
  %2133 = inttoptr i64 %2132 to i32*
  %2134 = load i32, i32* %2133
  %2135 = icmp ne i32 %2134, 1
  %2136 = select i1 %2135, i64 291, i64 31
  %2137 = add i64 %2156, %2136
  br i1 %2135, label %block_40c5d4, label %block_40c4d0

block_40bcaa:                                     ; preds = %block_40bca0
  %2138 = inttoptr i64 %4855 to i32*
  %2139 = load i32, i32* %2138
  %2140 = sext i32 %2139 to i64
  %2141 = shl nsw i64 %2140, 2
  %2142 = add i64 %2141, ptrtoint (%newe_type* @newe to i64)
  %2143 = inttoptr i64 %2142 to i32*
  %2144 = load i32, i32* %2143
  %2145 = add i32 %2144, 1
  %2146 = inttoptr i64 %2142 to i32*
  store i32 %2145, i32* %2146
  %2147 = inttoptr i64 %4855 to i32*
  %2148 = load i32, i32* %2147
  %2149 = sext i32 %2148 to i64
  %2150 = mul nsw i64 %2149, 48
  %2151 = add i64 %2150, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 40)
  %2152 = add i64 %6436, 53
  %2153 = inttoptr i64 %2151 to i32*
  store i32 1, i32* %2153
  br label %block_40bed9

block_40c4a7:                                     ; preds = %block_40c2b7
  %2154 = icmp ne i32 %7541, 2
  %2155 = select i1 %2154, i64 359, i64 10
  %2156 = add i64 %7641, %2155
  br i1 %2154, label %block_40c613, label %block_40c4b1

block_409ca5:                                     ; preds = %block_409b99
  %2157 = add i64 %3377, %3397
  %2158 = inttoptr i64 %126 to i32*
  %2159 = load i32, i32* %2158
  %2160 = icmp ne i32 %2159, 1
  %2161 = select i1 %2160, i64 258, i64 10
  %2162 = add i64 %2157, %2161
  br i1 %2160, label %block_409dac, label %block_409caf

block_40b7ed:                                     ; preds = %block_40b7cc
  %2163 = sext i32 %2352 to i64
  %2164 = shl nsw i64 %2163, 2
  %2165 = add i64 %2164, ptrtoint (%newc_type* @newc to i64)
  %2166 = inttoptr i64 %2165 to i32*
  store i32 6, i32* %2166
  %2167 = inttoptr i64 %116 to i32*
  %2168 = load i32, i32* %2167
  %2169 = sext i32 %2168 to i64
  %2170 = shl nsw i64 %2169, 5
  %2171 = add i64 %2170, ptrtoint (%vassign_type* @vassign to i64)
  %2172 = inttoptr i64 %2171 to i32*
  store i32 1, i32* %2172
  %2173 = inttoptr i64 %116 to i32*
  %2174 = load i32, i32* %2173
  %2175 = sext i32 %2174 to i64
  %2176 = shl nsw i64 %2175, 5
  %2177 = add i64 %2176, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2178 = inttoptr i64 %2177 to i32*
  store i32 3, i32* %2178
  %2179 = inttoptr i64 %116 to i32*
  %2180 = load i32, i32* %2179
  %2181 = sext i32 %2180 to i64
  %2182 = shl nsw i64 %2181, 5
  %2183 = add i64 %2182, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %2184 = inttoptr i64 %2183 to i32*
  store i32 4, i32* %2184
  %2185 = inttoptr i64 %116 to i32*
  %2186 = load i32, i32* %2185
  %2187 = sext i32 %2186 to i64
  %2188 = shl nsw i64 %2187, 5
  %2189 = add i64 %2188, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %2190 = inttoptr i64 %2189 to i32*
  store i32 5, i32* %2190
  %2191 = inttoptr i64 %116 to i32*
  %2192 = load i32, i32* %2191
  %2193 = sext i32 %2192 to i64
  %2194 = shl nsw i64 %2193, 5
  %2195 = add i64 %2194, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %2196 = inttoptr i64 %2195 to i32*
  store i32 6, i32* %2196
  %2197 = inttoptr i64 %116 to i32*
  %2198 = load i32, i32* %2197
  %2199 = sext i32 %2198 to i64
  %2200 = shl nsw i64 %2199, 5
  store i64 %2200, i64* %5, align 8, !tbaa !1240
  %2201 = add i64 %2200, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %2202 = inttoptr i64 %2201 to i32*
  store i32 7, i32* %2202
  %2203 = add i64 %2364, 320
  br label %block_40b937

block_40a4a3:                                     ; preds = %block_40a482
  %2204 = sext i32 %2370 to i64
  %2205 = shl nsw i64 %2204, 2
  %2206 = add i64 %2205, ptrtoint (%newc_type* @newc to i64)
  %2207 = inttoptr i64 %2206 to i32*
  store i32 1, i32* %2207
  %2208 = inttoptr i64 %116 to i32*
  %2209 = load i32, i32* %2208
  %2210 = sext i32 %2209 to i64
  %2211 = shl nsw i64 %2210, 5
  store i64 %2211, i64* %5, align 8, !tbaa !1240
  %2212 = add i64 %2211, ptrtoint (%vassign_type* @vassign to i64)
  %2213 = inttoptr i64 %2212 to i32*
  store i32 7, i32* %2213
  %2214 = add i64 %2382, 110
  br label %block_40a60e

block_40e49d:                                     ; preds = %block_40e498, %block_40e37c
  %2215 = phi i64 [ %3510, %block_40e37c ], [ %7847, %block_40e498 ]
  %2216 = phi %struct.Memory* [ %3704, %block_40e37c ], [ %7846, %block_40e498 ]
  %2217 = inttoptr i64 %4855 to i32*
  %2218 = load i32, i32* %2217
  %2219 = sext i32 %2218 to i64
  %2220 = mul nsw i64 %2219, 48
  %2221 = add i64 %2220, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 16)
  %2222 = inttoptr i64 %2221 to i32*
  %2223 = load i32, i32* %2222
  %2224 = icmp ne i32 %2223, 1
  %2225 = select i1 %2224, i64 168, i64 31
  %2226 = add i64 %2215, %2225
  br i1 %2224, label %block_40e74f, label %block_40e4bc

block_40cc9c:                                     ; preds = %block_40cc7c
  %2227 = sext i32 %6934 to i64
  %2228 = mul nsw i64 %2227, 48
  %2229 = add i64 %2228, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %2230 = inttoptr i64 %2229 to i32*
  %2231 = load i32, i32* %2230
  %2232 = sext i32 %2231 to i64
  %2233 = shl nsw i64 %2232, 2
  %2234 = add i64 %6929, add (i64 ptrtoint (%sje_type* @sje to i64), i64 8)
  %2235 = add i64 %2234, %2233
  %2236 = inttoptr i64 %2235 to i32*
  %2237 = load i32, i32* %2236
  %2238 = mul nsw i64 %2227, 96
  %2239 = add i64 %2238, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 24)
  %2240 = add i64 %6948, 74
  %2241 = inttoptr i64 %2239 to i32*
  store i32 %2237, i32* %2241
  br label %block_40cce6

block_40c666:                                     ; preds = %block_40c65c
  %2242 = inttoptr i64 %4855 to i32*
  %2243 = load i32, i32* %2242
  %2244 = sext i32 %2243 to i64
  %2245 = mul nsw i64 %2244, 96
  %2246 = add i64 %2245, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %2247 = inttoptr i64 %2246 to i32*
  %2248 = load i32, i32* %2247
  %2249 = inttoptr i64 %4865 to i32*
  store i32 %2248, i32* %2249
  %2250 = inttoptr i64 %4865 to i32*
  %2251 = load i32, i32* %2250
  %2252 = sext i32 %2251 to i64
  %2253 = mul nsw i64 %2252, 24
  %2254 = add i64 %2253, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %2255 = inttoptr i64 %2254 to i32*
  %2256 = load i32, i32* %2255
  %2257 = icmp ne i32 %2256, 3
  %2258 = select i1 %2257, i64 91, i64 58
  %2259 = add i64 %844, %2258
  br i1 %2257, label %block_40c666.block_40c6c1_crit_edge, label %block_40c6a0

block_40c666.block_40c6c1_crit_edge:              ; preds = %block_40c666
  %2260 = inttoptr i64 %4855 to i32*
  %2261 = load i32, i32* %2260
  br label %block_40c6c1

block_40edb3:                                     ; preds = %block_40ec2b, %block_40ec67, %block_40ece8, %block_40ed24
  %2262 = phi i64 [ 10, %block_40ece8 ], [ 10, %block_40ed24 ], [ 213, %block_40ec2b ], [ 213, %block_40ec67 ]
  %2263 = phi %struct.Memory* [ %2988, %block_40ece8 ], [ %1766, %block_40ed24 ], [ %2988, %block_40ec2b ], [ %2538, %block_40ec67 ]
  %2264 = load i64, i64* %3, align 8
  %2265 = add i64 %2262, %2264
  %2266 = load i64, i64* %10, align 8
  br label %block_40edb8

block_40d0c4:                                     ; preds = %block_40d0b5, %block_40ceca, %block_40cd97, %block_40cd23, %block_40ce77, %block_40ce90
  %2267 = phi i64 [ %381, %block_40ce90 ], [ %8083, %block_40d0b5 ], [ %8017, %block_40ceca ], [ %1778, %block_40cd23 ], [ %4510, %block_40cd97 ], [ %808, %block_40ce77 ]
  %2268 = phi i64 [ 506, %block_40ce90 ], [ 5, %block_40d0b5 ], [ 5, %block_40ceca ], [ 297, %block_40cd23 ], [ 5, %block_40cd97 ], [ 5, %block_40ce77 ]
  %2269 = phi %struct.Memory* [ %1968, %block_40ce90 ], [ %8082, %block_40d0b5 ], [ %1968, %block_40ceca ], [ %1968, %block_40cd23 ], [ %1968, %block_40cd97 ], [ %807, %block_40ce77 ]
  %2270 = phi i64 [ 5, %block_40ce90 ], [ 5, %block_40d0b5 ], [ 5, %block_40ceca ], [ 579, %block_40cd23 ], [ 579, %block_40cd97 ], [ 579, %block_40ce77 ]
  %2271 = add nuw nsw i64 %2270, %2268
  %2272 = add i64 %2271, %2267
  %2273 = inttoptr i64 %4860 to i32*
  %2274 = load i32, i32* %2273
  %2275 = icmp ne i32 %2274, 0
  %2276 = select i1 %2275, i64 68, i64 10
  %2277 = add i64 %2272, %2276
  br i1 %2275, label %block_40d108, label %block_40d0ce

block_40f36d:                                     ; preds = %block_40f016
  %2278 = load i64, i64* %9, align 8
  %2279 = add i64 %2278, 160
  %2280 = icmp ugt i64 %2278, -161
  %2281 = zext i1 %2280 to i8
  store i8 %2281, i8* %16, align 1, !tbaa !1248
  %2282 = trunc i64 %2279 to i32
  %2283 = and i32 %2282, 255
  %2284 = tail call i32 @llvm.ctpop.i32(i32 %2283) #11
  %2285 = trunc i32 %2284 to i8
  %2286 = and i8 %2285, 1
  %2287 = xor i8 %2286, 1
  store i8 %2287, i8* %17, align 1, !tbaa !1261
  %2288 = xor i64 %2279, %2278
  %2289 = lshr i64 %2288, 4
  %2290 = trunc i64 %2289 to i8
  %2291 = and i8 %2290, 1
  store i8 %2291, i8* %18, align 1, !tbaa !1262
  %2292 = icmp eq i64 %2279, 0
  %2293 = zext i1 %2292 to i8
  store i8 %2293, i8* %19, align 1, !tbaa !1263
  %2294 = lshr i64 %2279, 63
  %2295 = trunc i64 %2294 to i8
  store i8 %2295, i8* %20, align 1, !tbaa !1264
  %2296 = lshr i64 %2278, 63
  %2297 = xor i64 %2294, %2296
  %2298 = add nuw nsw i64 %2297, %2294
  %2299 = icmp eq i64 %2298, 2
  %2300 = zext i1 %2299 to i8
  store i8 %2300, i8* %21, align 1, !tbaa !1265
  %2301 = add i64 %2278, 168
  %2302 = inttoptr i64 %2279 to i64*
  %2303 = load i64, i64* %2302
  store i64 %2303, i64* %10, align 8, !tbaa !1240
  %2304 = inttoptr i64 %2301 to i64*
  %2305 = load i64, i64* %2304
  store i64 %2305, i64* %3, align 8, !tbaa !1240
  %2306 = add i64 %2278, 176
  store i64 %2306, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %9364

block_4097d3:                                     ; preds = %block_409746
  %2307 = mul nsw i64 %7651, 96
  %2308 = add i64 %2307, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %2309 = inttoptr i64 %2308 to i32*
  %2310 = load i32, i32* %2309
  %2311 = inttoptr i64 %123 to i32*
  store i32 %2310, i32* %2311
  %2312 = inttoptr i64 %123 to i32*
  %2313 = load i32, i32* %2312
  %2314 = sext i32 %2313 to i64
  %2315 = mul nsw i64 %2314, 24
  %2316 = add i64 %2315, ptrtoint (%cbc_type* @cbc to i64)
  %2317 = inttoptr i64 %2316 to i32*
  %2318 = load i32, i32* %2317
  %2319 = icmp ne i32 %2318, 3
  %2320 = select i1 %2319, i64 157, i64 57
  %2321 = add i64 %7658, %2320
  br i1 %2319, label %block_4097d3.block_409870_crit_edge, label %block_40980c

block_4097d3.block_409870_crit_edge:              ; preds = %block_4097d3
  %2322 = inttoptr i64 %116 to i32*
  %2323 = load i32, i32* %2322
  br label %block_409870

block_40948a:                                     ; preds = %block_409421
  %2324 = inttoptr i64 %120 to i32*
  %2325 = load i32, i32* %2324
  %2326 = icmp eq i32 %2325, 2
  %2327 = select i1 %2326, i64 20, i64 10
  %2328 = add i64 %2733, %2327
  br i1 %2326, label %block_409570.sink.split, label %block_409494

block_40dc83:                                     ; preds = %block_40dc64
  %2329 = mul nsw i64 %3422, 96
  %2330 = inttoptr i64 %4855 to i32*
  %2331 = load i32, i32* %2330
  %2332 = sext i32 %2331 to i64
  %2333 = mul nsw i64 %2332, 48
  %2334 = add i64 %2333, ptrtoint (%ijel_type* @ijel to i64)
  %2335 = inttoptr i64 %2334 to i32*
  %2336 = load i32, i32* %2335
  %2337 = sext i32 %2336 to i64
  %2338 = shl nsw i64 %2337, 2
  %2339 = add i64 %2329, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %2340 = add i64 %2339, %2338
  %2341 = inttoptr i64 %2340 to i32*
  %2342 = load i32, i32* %2341
  %2343 = mul nsw i64 %2332, 96
  %2344 = add i64 %2343, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 8)
  %2345 = add i64 %2544, 73
  %2346 = inttoptr i64 %2344 to i32*
  store i32 %2342, i32* %2346
  br label %block_40dd76.sink.split

block_40b7cc:                                     ; preds = %block_40b7ad
  %2347 = mul nsw i64 %287, 96
  %2348 = add i64 %2347, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %2349 = inttoptr i64 %2348 to i32*
  %2350 = load i32, i32* %2349
  %2351 = inttoptr i64 %116 to i32*
  %2352 = load i32, i32* %2351
  %2353 = sub i32 %2350, %2352
  %2354 = lshr i32 %2353, 31
  %2355 = lshr i32 %2350, 31
  %2356 = lshr i32 %2352, 31
  %2357 = xor i32 %2356, %2355
  %2358 = xor i32 %2354, %2355
  %2359 = add nuw nsw i32 %2358, %2357
  %2360 = icmp eq i32 %2359, 2
  %2361 = icmp ne i32 %2354, 0
  %2362 = xor i1 %2361, %2360
  %2363 = select i1 %2362, i64 33, i64 185
  %2364 = add i64 %294, %2363
  br i1 %2362, label %block_40b7ed, label %block_40b885

block_40a482:                                     ; preds = %block_40a448
  %2365 = mul nsw i64 %5880, 96
  %2366 = add i64 %2365, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %2367 = inttoptr i64 %2366 to i32*
  %2368 = load i32, i32* %2367
  %2369 = inttoptr i64 %116 to i32*
  %2370 = load i32, i32* %2369
  %2371 = sub i32 %2368, %2370
  %2372 = lshr i32 %2371, 31
  %2373 = lshr i32 %2368, 31
  %2374 = lshr i32 %2370, 31
  %2375 = xor i32 %2374, %2373
  %2376 = xor i32 %2372, %2373
  %2377 = add nuw nsw i32 %2376, %2375
  %2378 = icmp eq i32 %2377, 2
  %2379 = icmp ne i32 %2372, 0
  %2380 = xor i1 %2379, %2378
  %2381 = select i1 %2380, i64 33, i64 80
  %2382 = add i64 %5887, %2381
  br i1 %2380, label %block_40a4a3, label %block_40a4d2

block_40ac6b:                                     ; preds = %block_40ac4b
  %2383 = sext i32 %8881 to i64
  %2384 = shl nsw i64 %2383, 2
  %2385 = add i64 %2384, ptrtoint (%newc_type* @newc to i64)
  %2386 = inttoptr i64 %2385 to i32*
  store i32 2, i32* %2386
  %2387 = inttoptr i64 %116 to i32*
  %2388 = load i32, i32* %2387
  %2389 = sext i32 %2388 to i64
  %2390 = shl nsw i64 %2389, 5
  %2391 = add i64 %2390, ptrtoint (%vassign_type* @vassign to i64)
  %2392 = inttoptr i64 %2391 to i32*
  store i32 5, i32* %2392
  %2393 = inttoptr i64 %116 to i32*
  %2394 = load i32, i32* %2393
  %2395 = sext i32 %2394 to i64
  %2396 = shl nsw i64 %2395, 5
  store i64 %2396, i64* %5, align 8, !tbaa !1240
  %2397 = add i64 %2396, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2398 = inttoptr i64 %2397 to i32*
  store i32 7, i32* %2398
  %2399 = add i64 %8893, 152
  br label %block_40ad08

block_40aa7f:                                     ; preds = %block_40a9cb.block_40aa7f_crit_edge, %block_40aa05
  %2400 = phi i32 [ %5681, %block_40a9cb.block_40aa7f_crit_edge ], [ %5356, %block_40aa05 ]
  %2401 = phi i64 [ %5679, %block_40a9cb.block_40aa7f_crit_edge ], [ %5368, %block_40aa05 ]
  %2402 = sext i32 %2400 to i64
  %2403 = shl nsw i64 %2402, 2
  %2404 = add i64 %2403, ptrtoint (%newc_type* @newc to i64)
  %2405 = inttoptr i64 %2404 to i32*
  store i32 4, i32* %2405
  %2406 = inttoptr i64 %116 to i32*
  %2407 = load i32, i32* %2406
  %2408 = sext i32 %2407 to i64
  %2409 = shl nsw i64 %2408, 5
  %2410 = add i64 %2409, ptrtoint (%vassign_type* @vassign to i64)
  %2411 = inttoptr i64 %2410 to i32*
  store i32 1, i32* %2411
  %2412 = inttoptr i64 %116 to i32*
  %2413 = load i32, i32* %2412
  %2414 = sext i32 %2413 to i64
  %2415 = shl nsw i64 %2414, 5
  %2416 = add i64 %2415, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2417 = inttoptr i64 %2416 to i32*
  store i32 3, i32* %2417
  %2418 = inttoptr i64 %116 to i32*
  %2419 = load i32, i32* %2418
  %2420 = sext i32 %2419 to i64
  %2421 = shl nsw i64 %2420, 5
  %2422 = add i64 %2421, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %2423 = inttoptr i64 %2422 to i32*
  store i32 5, i32* %2423
  %2424 = inttoptr i64 %116 to i32*
  %2425 = load i32, i32* %2424
  %2426 = sext i32 %2425 to i64
  %2427 = shl nsw i64 %2426, 5
  store i64 %2427, i64* %5, align 8, !tbaa !1240
  %2428 = add i64 %2427, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %2429 = add i64 %2401, 105
  %2430 = inttoptr i64 %2428 to i32*
  store i32 7, i32* %2430
  br label %block_40ad0d

block_4093fe:                                     ; preds = %block_408c3f
  %2431 = icmp ne i32 %3636, 5
  %2432 = select i1 %2431, i64 380, i64 10
  %2433 = add i64 %6809, %2432
  br i1 %2431, label %block_40957a, label %block_409408

block_40e8b1:                                     ; preds = %block_40e8a7
  %2434 = inttoptr i64 %4855 to i32*
  %2435 = load i32, i32* %2434
  %2436 = sext i32 %2435 to i64
  %2437 = shl nsw i64 %2436, 2
  %2438 = add i64 %2437, ptrtoint (%newi_type* @newi to i64)
  %2439 = inttoptr i64 %2438 to i32*
  %2440 = load i32, i32* %2439
  %2441 = add i32 %2440, 9
  %2442 = inttoptr i64 %2438 to i32*
  store i32 %2441, i32* %2442
  %2443 = inttoptr i64 %4855 to i32*
  %2444 = load i32, i32* %2443
  %2445 = sext i32 %2444 to i64
  %2446 = mul nsw i64 %2445, 24
  %2447 = add i64 %2446, add (i64 ptrtoint (%fassign_type* @fassign to i64), i64 16)
  %2448 = add i64 %8162, 53
  %2449 = inttoptr i64 %2447 to i32*
  store i32 1, i32* %2449
  br label %block_40e8e6

block_40ec67:                                     ; preds = %block_40ec2b
  %2450 = load i64, i64* %10, align 8
  %2451 = add i64 %2450, -72
  store i64 %2451, i64* %5, align 8, !tbaa !1240
  %2452 = add i64 %2450, -8
  %2453 = inttoptr i64 %2452 to i32*
  %2454 = load i32, i32* %2453
  %2455 = sext i32 %2454 to i64
  %2456 = mul nsw i64 %2455, 96
  %2457 = add i64 %2456, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %2457, i64* %6, align 8, !tbaa !1240
  %2458 = add i64 %2450, -20
  %2459 = inttoptr i64 %2458 to i32*
  %2460 = load i32, i32* %2459
  %2461 = sext i32 %2460 to i64
  %2462 = shl nsw i64 %2461, 4
  %2463 = add i64 %2462, ptrtoint (%edgenumber_type* @edgenumber to i64)
  %2464 = load i64, i64* %10, align 8
  %2465 = add i64 %2464, -52
  %2466 = inttoptr i64 %2465 to i32*
  %2467 = load i32, i32* %2466
  %2468 = sext i32 %2467 to i64
  %2469 = shl nsw i64 %2468, 2
  %2470 = add i64 %2469, %2463
  %2471 = inttoptr i64 %2470 to i32*
  %2472 = load i32, i32* %2471
  %2473 = sext i32 %2472 to i64
  %2474 = load i64, i64* %6, align 8
  %2475 = shl nsw i64 %2473, 3
  %2476 = add i64 %2475, %2474
  %2477 = inttoptr i64 %2476 to i32*
  %2478 = load i32, i32* %2477
  %2479 = add i64 %2464, -16
  %2480 = inttoptr i64 %2479 to i32*
  store i32 %2478, i32* %2480
  %2481 = add i64 %2464, -60
  %2482 = inttoptr i64 %2481 to i32*
  %2483 = load i32, i32* %2482
  %2484 = sext i32 %2483 to i64
  %2485 = shl nsw i64 %2484, 2
  %2486 = add i64 %2485, ptrtoint (%op_type* @op to i64)
  %2487 = inttoptr i64 %2486 to i32*
  %2488 = load i32, i32* %2487
  %2489 = zext i32 %2488 to i64
  store i64 %2489, i64* %8, align 8, !tbaa !1240
  %2490 = add i64 %2464, -44
  %2491 = inttoptr i64 %2490 to i32*
  %2492 = load i32, i32* %2491
  %2493 = sext i32 %2492 to i64
  store i64 %2493, i64* %4, align 8, !tbaa !1240
  %2494 = shl nsw i64 %2493, 2
  %2495 = add i64 %2494, ptrtoint (%jjface_type* @jjface to i64)
  %2496 = inttoptr i64 %2495 to i32*
  %2497 = load i32, i32* %2496
  %2498 = zext i32 %2497 to i64
  store i64 %2498, i64* %7, align 8, !tbaa !1240
  %2499 = inttoptr i64 %2479 to i32*
  %2500 = load i32, i32* %2499
  %2501 = zext i32 %2500 to i64
  store i64 %2501, i64* %6, align 8, !tbaa !1240
  %2502 = add i64 %4868, 7305
  %2503 = add i64 %4868, 90
  %2504 = load i64, i64* %9, align 8, !tbaa !1240
  %2505 = add i64 %2504, -8
  %2506 = inttoptr i64 %2505 to i64*
  store i64 %2503, i64* %2506
  store i64 %2505, i64* %9, align 8, !tbaa !1240
  %2507 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %2502, %struct.Memory* %2988)
  %2508 = load i64, i64* %10, align 8
  %2509 = add i64 %2508, -72
  %2510 = load i64, i64* %3, align 8
  store i64 %2509, i64* %5, align 8, !tbaa !1240
  %2511 = add i64 %2508, -52
  %2512 = inttoptr i64 %2511 to i32*
  %2513 = load i32, i32* %2512
  %2514 = sext i32 %2513 to i64
  %2515 = shl nsw i64 %2514, 2
  %2516 = add i64 %2515, ptrtoint (%op_type* @op to i64)
  %2517 = inttoptr i64 %2516 to i32*
  %2518 = load i32, i32* %2517
  %2519 = zext i32 %2518 to i64
  store i64 %2519, i64* %8, align 8, !tbaa !1240
  %2520 = add i64 %2508, -20
  %2521 = inttoptr i64 %2520 to i32*
  %2522 = load i32, i32* %2521
  %2523 = sext i32 %2522 to i64
  store i64 %2523, i64* %4, align 8, !tbaa !1240
  %2524 = shl nsw i64 %2523, 2
  %2525 = add i64 %2524, ptrtoint (%jjface_type* @jjface to i64)
  %2526 = inttoptr i64 %2525 to i32*
  %2527 = load i32, i32* %2526
  %2528 = zext i32 %2527 to i64
  store i64 %2528, i64* %7, align 8, !tbaa !1240
  %2529 = add i64 %2508, -16
  %2530 = inttoptr i64 %2529 to i32*
  %2531 = load i32, i32* %2530
  %2532 = zext i32 %2531 to i64
  store i64 %2532, i64* %6, align 8, !tbaa !1240
  %2533 = add i64 %2510, 7215
  %2534 = add i64 %2510, 34
  %2535 = load i64, i64* %9, align 8, !tbaa !1240
  %2536 = add i64 %2535, -8
  %2537 = inttoptr i64 %2536 to i64*
  store i64 %2534, i64* %2537
  store i64 %2536, i64* %9, align 8, !tbaa !1240
  %2538 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %2533, %struct.Memory* %2507)
  br label %block_40edb3

block_40dc64:                                     ; preds = %block_40db84
  %2539 = add i64 %3423, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %2540 = inttoptr i64 %2539 to i32*
  %2541 = load i32, i32* %2540
  %2542 = icmp ne i32 %2541, 3
  %2543 = select i1 %2542, i64 104, i64 31
  %2544 = add i64 %3429, %2543
  br i1 %2542, label %block_40dd76.sink.split, label %block_40dc83

block_40dfa8:                                     ; preds = %block_40df9e
  %2545 = inttoptr i64 %4855 to i32*
  %2546 = load i32, i32* %2545
  %2547 = sext i32 %2546 to i64
  %2548 = mul nsw i64 %2547, 96
  %2549 = add i64 %2548, ptrtoint (%sje_type* @sje to i64)
  %2550 = inttoptr i64 %2549 to i32*
  %2551 = load i32, i32* %2550
  %2552 = inttoptr i64 %4865 to i32*
  store i32 %2551, i32* %2552
  %2553 = inttoptr i64 %4865 to i32*
  %2554 = load i32, i32* %2553
  %2555 = sext i32 %2554 to i64
  %2556 = mul nsw i64 %2555, 24
  %2557 = add i64 %2556, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %2558 = inttoptr i64 %2557 to i32*
  %2559 = load i32, i32* %2558
  %2560 = icmp eq i32 %2559, 3
  %2561 = select i1 %2560, i64 194, i64 57
  %2562 = add i64 %4473, %2561
  br i1 %2560, label %block_40e13a, label %block_40dfe1

block_409f5c:                                     ; preds = %block_409f52
  %2563 = icmp ne i32 %1487, 3
  %2564 = select i1 %2563, i64 404, i64 10
  %2565 = add i64 %4476, %2564
  br i1 %2563, label %block_40a0f0, label %block_409f66

block_40cc5e:                                     ; preds = %block_40cb6a, %block_40cbbd
  %2566 = phi i64 [ %3850, %block_40cb6a ], [ %3203, %block_40cbbd ]
  %2567 = phi %struct.Memory* [ %8803, %block_40cb6a ], [ %8803, %block_40cbbd ]
  %2568 = inttoptr i64 %4865 to i32*
  %2569 = load i32, i32* %2568
  %2570 = sext i32 %2569 to i64
  %2571 = mul nsw i64 %2570, 24
  %2572 = add i64 %2571, ptrtoint (%cbc_type* @cbc to i64)
  %2573 = inttoptr i64 %2572 to i32*
  %2574 = load i32, i32* %2573
  %2575 = icmp ne i32 %2574, 3
  %2576 = select i1 %2575, i64 136, i64 30
  %2577 = add i64 %2566, %2576
  br i1 %2575, label %block_40cce6, label %block_40cc7c

block_40d45c:                                     ; preds = %block_40d401.block_40d45c_crit_edge, %block_40d43b
  %2578 = phi i32 [ %5017, %block_40d401.block_40d45c_crit_edge ], [ %2659, %block_40d43b ]
  %2579 = phi i64 [ %5015, %block_40d401.block_40d45c_crit_edge ], [ %2673, %block_40d43b ]
  %2580 = sext i32 %2578 to i64
  %2581 = shl nsw i64 %2580, 2
  %2582 = add i64 %2581, ptrtoint (%newe_type* @newe to i64)
  %2583 = inttoptr i64 %2582 to i32*
  %2584 = load i32, i32* %2583
  %2585 = add i32 %2584, 1
  %2586 = inttoptr i64 %2582 to i32*
  store i32 %2585, i32* %2586
  %2587 = inttoptr i64 %4855 to i32*
  %2588 = load i32, i32* %2587
  %2589 = sext i32 %2588 to i64
  %2590 = mul nsw i64 %2589, 48
  %2591 = add i64 %2590, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 20)
  %2592 = inttoptr i64 %2591 to i32*
  store i32 1, i32* %2592
  %2593 = inttoptr i64 %4865 to i32*
  %2594 = load i32, i32* %2593
  %2595 = sext i32 %2594 to i64
  %2596 = mul nsw i64 %2595, 24
  %2597 = add i64 %2596, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %2598 = inttoptr i64 %2597 to i32*
  %2599 = load i32, i32* %2598
  %2600 = icmp ne i32 %2599, 3
  %2601 = select i1 %2600, i64 191, i64 84
  %2602 = add i64 %2579, %2601
  br i1 %2600, label %block_40d51b, label %block_40d4b0

block_40a60e:                                     ; preds = %block_40a5b5, %block_40a571, %block_40a4a3, %block_40a4d2
  %2603 = phi i64 [ %2214, %block_40a4a3 ], [ %2073, %block_40a4d2 ], [ %5655, %block_40a5b5 ], [ %4885, %block_40a571 ]
  %2604 = phi i64 [ 253, %block_40a4a3 ], [ 253, %block_40a4d2 ], [ 5, %block_40a5b5 ], [ 5, %block_40a571 ]
  %2605 = phi %struct.Memory* [ %3633, %block_40a4a3 ], [ %3633, %block_40a4d2 ], [ %3633, %block_40a5b5 ], [ %3633, %block_40a571 ]
  %2606 = add i64 %2603, %2604
  br label %block_40ad1c

block_40c453:                                     ; preds = %block_40c432
  %2607 = sext i32 %2929 to i64
  %2608 = mul nsw i64 %2607, 48
  %2609 = add i64 %2608, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %2610 = inttoptr i64 %2609 to i32*
  %2611 = load i32, i32* %2610
  %2612 = sext i32 %2611 to i64
  %2613 = shl nsw i64 %2612, 3
  %2614 = add i64 %2924, add (i64 ptrtoint (%sje_type* @sje to i64), i64 84)
  %2615 = add i64 %2614, %2613
  %2616 = inttoptr i64 %2615 to i32*
  %2617 = load i32, i32* %2616
  %2618 = mul nsw i64 %2607, 96
  %2619 = add i64 %2618, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 64)
  %2620 = add i64 %2943, 74
  %2621 = inttoptr i64 %2619 to i32*
  store i32 %2617, i32* %2621
  br label %block_40c49d

block_40bc48:                                     ; preds = %block_40bc13, %block_40bc09
  %2622 = phi i64 [ %2850, %block_40bc09 ], [ %8554, %block_40bc13 ]
  %2623 = phi %struct.Memory* [ %2845, %block_40bc09 ], [ %2845, %block_40bc13 ]
  %2624 = inttoptr i64 %4860 to i32*
  %2625 = load i32, i32* %2624
  %2626 = icmp eq i32 %2625, 0
  %2627 = select i1 %2626, i64 20, i64 10
  %2628 = add i64 %2622, %2627
  br i1 %2626, label %block_40bc5c, label %block_40bc52

block_40ea0b:                                     ; preds = %block_40ea01
  %2629 = inttoptr i64 %2879 to i32*
  store i32 3, i32* %2629
  %2630 = add i64 %5706, -104
  %2631 = inttoptr i64 %2630 to i32*
  store i32 2, i32* %2631
  %2632 = add i64 %2878, 33
  br label %block_40ea31

block_4090b5:                                     ; preds = %block_409094
  %2633 = sext i32 %8312 to i64
  %2634 = shl nsw i64 %2633, 2
  %2635 = add i64 %2634, ptrtoint (%newc_type* @newc to i64)
  %2636 = inttoptr i64 %2635 to i32*
  store i32 1, i32* %2636
  %2637 = inttoptr i64 %116 to i32*
  %2638 = load i32, i32* %2637
  %2639 = sext i32 %2638 to i64
  %2640 = shl nsw i64 %2639, 5
  store i64 %2640, i64* %5, align 8, !tbaa !1240
  %2641 = add i64 %2640, ptrtoint (%vassign_type* @vassign to i64)
  %2642 = inttoptr i64 %2641 to i32*
  store i32 7, i32* %2642
  %2643 = add i64 %8324, 110
  br label %block_409123

block_40d772:                                     ; preds = %block_40d768
  %2644 = inttoptr i64 %4855 to i32*
  %2645 = load i32, i32* %2644
  %2646 = sext i32 %2645 to i64
  %2647 = mul nsw i64 %2646, 48
  %2648 = add i64 %2647, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 8)
  %2649 = inttoptr i64 %2648 to i32*
  %2650 = load i32, i32* %2649
  %2651 = icmp ne i32 %2650, 0
  %2652 = select i1 %2651, i64 89, i64 31
  %2653 = add i64 %3079, %2652
  br i1 %2651, label %block_40d7cb, label %block_40d791

block_40d43b:                                     ; preds = %block_40d401
  %2654 = mul nsw i64 %5008, 96
  %2655 = add i64 %2654, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %2656 = inttoptr i64 %2655 to i32*
  %2657 = load i32, i32* %2656
  %2658 = inttoptr i64 %4855 to i32*
  %2659 = load i32, i32* %2658
  %2660 = sub i32 %2657, %2659
  %2661 = icmp eq i32 %2660, 0
  %2662 = lshr i32 %2660, 31
  %2663 = lshr i32 %2657, 31
  %2664 = lshr i32 %2659, 31
  %2665 = xor i32 %2664, %2663
  %2666 = xor i32 %2662, %2663
  %2667 = add nuw nsw i32 %2666, %2665
  %2668 = icmp eq i32 %2667, 2
  %2669 = icmp ne i32 %2662, 0
  %2670 = xor i1 %2669, %2668
  %2671 = or i1 %2661, %2670
  %2672 = select i1 %2671, i64 229, i64 33
  %2673 = add i64 %5015, %2672
  br i1 %2671, label %block_40d768, label %block_40d45c

block_408e08:                                     ; preds = %block_408dce
  %2674 = mul nsw i64 %1191, 96
  %2675 = add i64 %2674, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %2676 = inttoptr i64 %2675 to i32*
  %2677 = load i32, i32* %2676
  %2678 = inttoptr i64 %116 to i32*
  %2679 = load i32, i32* %2678
  %2680 = sub i32 %2677, %2679
  %2681 = lshr i32 %2680, 31
  %2682 = lshr i32 %2677, 31
  %2683 = lshr i32 %2679, 31
  %2684 = xor i32 %2683, %2682
  %2685 = xor i32 %2681, %2682
  %2686 = add nuw nsw i32 %2685, %2684
  %2687 = icmp eq i32 %2686, 2
  %2688 = icmp ne i32 %2681, 0
  %2689 = xor i1 %2688, %2687
  %2690 = select i1 %2689, i64 33, i64 80
  %2691 = add i64 %1198, %2690
  br i1 %2689, label %block_408e29, label %block_408e58

block_40b42f:                                     ; preds = %block_40b381, %block_40b3a0
  %2692 = phi i64 [ %3346, %block_40b3a0 ], [ %8437, %block_40b381 ]
  %2693 = sext i32 %3813 to i64
  %2694 = shl nsw i64 %2693, 2
  %2695 = add i64 %2694, ptrtoint (%newc_type* @newc to i64)
  %2696 = inttoptr i64 %2695 to i32*
  store i32 5, i32* %2696
  %2697 = inttoptr i64 %116 to i32*
  %2698 = load i32, i32* %2697
  %2699 = sext i32 %2698 to i64
  %2700 = shl nsw i64 %2699, 5
  %2701 = add i64 %2700, ptrtoint (%vassign_type* @vassign to i64)
  %2702 = inttoptr i64 %2701 to i32*
  store i32 2, i32* %2702
  %2703 = inttoptr i64 %116 to i32*
  %2704 = load i32, i32* %2703
  %2705 = sext i32 %2704 to i64
  %2706 = shl nsw i64 %2705, 5
  %2707 = add i64 %2706, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2708 = inttoptr i64 %2707 to i32*
  store i32 3, i32* %2708
  %2709 = inttoptr i64 %116 to i32*
  %2710 = load i32, i32* %2709
  %2711 = sext i32 %2710 to i64
  %2712 = shl nsw i64 %2711, 5
  %2713 = add i64 %2712, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %2714 = inttoptr i64 %2713 to i32*
  store i32 5, i32* %2714
  %2715 = inttoptr i64 %116 to i32*
  %2716 = load i32, i32* %2715
  %2717 = sext i32 %2716 to i64
  %2718 = shl nsw i64 %2717, 5
  %2719 = add i64 %2718, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %2720 = inttoptr i64 %2719 to i32*
  store i32 6, i32* %2720
  %2721 = inttoptr i64 %116 to i32*
  %2722 = load i32, i32* %2721
  %2723 = sext i32 %2722 to i64
  %2724 = shl nsw i64 %2723, 5
  store i64 %2724, i64* %5, align 8, !tbaa !1240
  %2725 = add i64 %2724, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %2726 = add i64 %2692, 126
  %2727 = inttoptr i64 %2725 to i32*
  store i32 7, i32* %2727
  br label %block_40b937

block_40d52a:                                     ; preds = %block_40d39e
  %2728 = icmp ne i32 %3369, 0
  %2729 = select i1 %2728, i64 68, i64 10
  %2730 = add i64 %3372, %2729
  br i1 %2728, label %block_40d56e, label %block_40d534

block_409421:                                     ; preds = %block_409408
  %2731 = icmp ne i32 %2861, 3
  %2732 = select i1 %2731, i64 105, i64 10
  %2733 = add i64 %2864, %2732
  br i1 %2731, label %block_40948a, label %block_40942b

block_408c1e:                                     ; preds = %block_408ba5, %block_408c19
  %2734 = phi i64 [ %3316, %block_408ba5 ], [ %2797, %block_408c19 ]
  %2735 = phi i64 [ 94, %block_408ba5 ], [ 5, %block_408c19 ]
  %2736 = phi %struct.Memory* [ %3633, %block_408ba5 ], [ %2796, %block_408c19 ]
  %2737 = add i64 %2734, %2735
  %2738 = inttoptr i64 %116 to i32*
  %2739 = load i32, i32* %2738
  %2740 = sext i32 %2739 to i64
  %2741 = shl nsw i64 %2740, 5
  store i64 %2741, i64* %5, align 8, !tbaa !1240
  %2742 = add i64 %2741, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2743 = add i64 %2737, 28
  %2744 = inttoptr i64 %2742 to i32*
  store i32 7, i32* %2744
  br label %block_40b964

block_408fd3:                                     ; preds = %block_408fb3
  %2745 = sext i32 %271 to i64
  %2746 = shl nsw i64 %2745, 2
  %2747 = add i64 %2746, ptrtoint (%newc_type* @newc to i64)
  %2748 = inttoptr i64 %2747 to i32*
  store i32 1, i32* %2748
  %2749 = inttoptr i64 %116 to i32*
  %2750 = load i32, i32* %2749
  %2751 = sext i32 %2750 to i64
  %2752 = shl nsw i64 %2751, 5
  store i64 %2752, i64* %5, align 8, !tbaa !1240
  %2753 = add i64 %2752, ptrtoint (%vassign_type* @vassign to i64)
  %2754 = inttoptr i64 %2753 to i32*
  store i32 7, i32* %2754
  %2755 = add i64 %283, 110
  br label %block_409041

block_409caf:                                     ; preds = %block_409ca5
  %2756 = inttoptr i64 %116 to i32*
  %2757 = load i32, i32* %2756
  %2758 = sext i32 %2757 to i64
  %2759 = mul nsw i64 %2758, 96
  %2760 = add i64 %2759, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %2761 = inttoptr i64 %2760 to i32*
  %2762 = load i32, i32* %2761
  %2763 = inttoptr i64 %123 to i32*
  store i32 %2762, i32* %2763
  %2764 = inttoptr i64 %123 to i32*
  %2765 = load i32, i32* %2764
  %2766 = sext i32 %2765 to i64
  %2767 = mul nsw i64 %2766, 24
  %2768 = add i64 %2767, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %2769 = inttoptr i64 %2768 to i32*
  %2770 = load i32, i32* %2769
  %2771 = icmp ne i32 %2770, 3
  %2772 = select i1 %2771, i64 159, i64 58
  %2773 = add i64 %2162, %2772
  br i1 %2771, label %block_409caf.block_409d4e_crit_edge, label %block_409ce9

block_409caf.block_409d4e_crit_edge:              ; preds = %block_409caf
  %2774 = inttoptr i64 %116 to i32*
  %2775 = load i32, i32* %2774
  br label %block_409d4e

block_40efc2:                                     ; preds = %block_40ef32
  %2776 = inttoptr i64 %5304 to i32*
  %2777 = load i32, i32* %2776
  %2778 = add i32 %2777, 1
  %2779 = inttoptr i64 %5304 to i32*
  store i32 %2778, i32* %2779
  %2780 = add i64 %5123, -161
  br label %block_40ef21

block_40bc52:                                     ; preds = %block_40bc48
  %2781 = icmp ne i32 %2625, 1
  %2782 = select i1 %2781, i64 63, i64 10
  %2783 = add i64 %2628, %2782
  br i1 %2781, label %block_40c85b, label %block_40bc5c

block_408c19.sink.split:                          ; preds = %block_408bef, %block_408bc5
  %2784 = phi i64 [ %4707, %block_408bef ], [ %3164, %block_408bc5 ]
  %2785 = phi i32 [ 6, %block_408bef ], [ 5, %block_408bc5 ]
  %2786 = phi i64 [ 5, %block_408bef ], [ 47, %block_408bc5 ]
  %2787 = inttoptr i64 %116 to i32*
  %2788 = load i32, i32* %2787
  %2789 = sext i32 %2788 to i64
  %2790 = shl nsw i64 %2789, 5
  %2791 = add i64 %2790, ptrtoint (%vassign_type* @vassign to i64)
  %2792 = add i64 %2784, 27
  %2793 = inttoptr i64 %2791 to i32*
  store i32 %2785, i32* %2793
  br label %block_408c19

block_408c19:                                     ; preds = %block_408bef, %block_408c19.sink.split
  %2794 = phi i64 [ %4707, %block_408bef ], [ %2792, %block_408c19.sink.split ]
  %2795 = phi i64 [ 5, %block_408bef ], [ %2786, %block_408c19.sink.split ]
  %2796 = phi %struct.Memory* [ %3633, %block_408bef ], [ %3633, %block_408c19.sink.split ]
  %2797 = add i64 %2794, %2795
  br label %block_408c1e

block_40d759:                                     ; preds = %block_40d5b2, %block_40d754
  %2798 = phi i64 [ %385, %block_40d754 ], [ %1285, %block_40d5b2 ]
  %2799 = phi %struct.Memory* [ %384, %block_40d754 ], [ %3977, %block_40d5b2 ]
  %2800 = add i64 %2798, 5
  br label %block_40d768

block_40ac12:                                     ; preds = %block_40aaed.block_40ac12_crit_edge, %block_40ab26
  %2801 = phi i32 [ %6190, %block_40aaed.block_40ac12_crit_edge ], [ %4103, %block_40ab26 ]
  %2802 = phi i64 [ %6188, %block_40aaed.block_40ac12_crit_edge ], [ %4115, %block_40ab26 ]
  %2803 = sext i32 %2801 to i64
  %2804 = mul nsw i64 %2803, 96
  %2805 = add i64 %2804, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %2806 = inttoptr i64 %2805 to i32*
  %2807 = load i32, i32* %2806
  %2808 = inttoptr i64 %124 to i32*
  store i32 %2807, i32* %2808
  %2809 = inttoptr i64 %124 to i32*
  %2810 = load i32, i32* %2809
  %2811 = sext i32 %2810 to i64
  %2812 = mul nsw i64 %2811, 24
  %2813 = add i64 %2812, ptrtoint (%cbc_type* @cbc to i64)
  %2814 = inttoptr i64 %2813 to i32*
  %2815 = load i32, i32* %2814
  %2816 = icmp ne i32 %2815, 3
  %2817 = select i1 %2816, i64 157, i64 57
  %2818 = add i64 %2802, %2817
  br i1 %2816, label %block_40ac12.block_40acaf_crit_edge, label %block_40ac4b

block_40ac12.block_40acaf_crit_edge:              ; preds = %block_40ac12
  %2819 = inttoptr i64 %116 to i32*
  %2820 = load i32, i32* %2819
  br label %block_40acaf

block_40d6ca:                                     ; preds = %block_40d5d3, %block_40d627
  %2821 = phi i64 [ %7456, %block_40d5d3 ], [ %1029, %block_40d627 ]
  %2822 = phi %struct.Memory* [ %3977, %block_40d5d3 ], [ %3977, %block_40d627 ]
  %2823 = inttoptr i64 %4865 to i32*
  %2824 = load i32, i32* %2823
  %2825 = sext i32 %2824 to i64
  %2826 = mul nsw i64 %2825, 24
  %2827 = add i64 %2826, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %2828 = inttoptr i64 %2827 to i32*
  %2829 = load i32, i32* %2828
  %2830 = icmp ne i32 %2829, 3
  %2831 = select i1 %2830, i64 138, i64 31
  %2832 = add i64 %2821, %2831
  br i1 %2830, label %block_40d754, label %block_40d6e9

block_40dd38:                                     ; preds = %block_40dd1a
  %2833 = mul nsw i64 %1818, 96
  %2834 = add i64 %2833, ptrtoint (%sje_type* @sje to i64)
  %2835 = inttoptr i64 %2834 to i32*
  %2836 = load i32, i32* %2835
  %2837 = mul nsw i64 %2042, 96
  %2838 = add i64 %2837, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 8)
  %2839 = add i64 %1825, 47
  %2840 = inttoptr i64 %2838 to i32*
  store i32 %2836, i32* %2840
  br label %block_40dd67

block_40e06f:                                     ; preds = %block_40df9e
  %2841 = icmp eq i32 %4470, 0
  %2842 = select i1 %2841, i64 20, i64 10
  %2843 = add i64 %4473, %2842
  br i1 %2841, label %block_40e083, label %block_40e079

block_40bc09:                                     ; preds = %block_40bbcb, %block_40bbd5
  %2844 = phi i64 [ %3146, %block_40bbcb ], [ %3098, %block_40bbd5 ]
  %2845 = phi %struct.Memory* [ %3141, %block_40bbcb ], [ %3141, %block_40bbd5 ]
  %2846 = inttoptr i64 %4861 to i32*
  %2847 = load i32, i32* %2846
  %2848 = icmp eq i32 %2847, 3
  %2849 = select i1 %2848, i64 63, i64 10
  %2850 = add i64 %2844, %2849
  br i1 %2848, label %block_40bc48, label %block_40bc13

block_40e130:                                     ; preds = %block_40e083, %block_40e12b
  %2851 = phi i64 [ %8458, %block_40e083 ], [ %7096, %block_40e12b ]
  %2852 = phi %struct.Memory* [ %3689, %block_40e083 ], [ %7095, %block_40e12b ]
  %2853 = add i64 %2851, 5
  br label %block_40e13a

block_409408:                                     ; preds = %block_4093fe
  %2854 = inttoptr i64 %116 to i32*
  %2855 = load i32, i32* %2854
  %2856 = sext i32 %2855 to i64
  %2857 = shl nsw i64 %2856, 2
  %2858 = add i64 %2857, ptrtoint (%newc_type* @newc to i64)
  %2859 = inttoptr i64 %2858 to i32*
  store i32 4, i32* %2859
  %2860 = inttoptr i64 %119 to i32*
  %2861 = load i32, i32* %2860
  %2862 = icmp eq i32 %2861, 2
  %2863 = select i1 %2862, i64 35, i64 25
  %2864 = add i64 %2433, %2863
  br i1 %2862, label %block_40942b, label %block_409421

block_40ea01:                                     ; preds = %block_40e9c5
  %2865 = add i64 %5706, -20
  %2866 = inttoptr i64 %2865 to i32*
  %2867 = load i32, i32* %2866
  %2868 = add i32 %2867, -4
  %2869 = lshr i32 %2868, 31
  %2870 = trunc i32 %2869 to i8
  %2871 = lshr i32 %2867, 31
  %2872 = xor i32 %2869, %2871
  %2873 = add nuw nsw i32 %2872, %2871
  %2874 = icmp eq i32 %2873, 2
  %2875 = icmp ne i8 %2870, 0
  %2876 = xor i1 %2875, %2874
  %2877 = select i1 %2876, i64 10, i64 29
  %2878 = add i64 %5705, %2877
  %2879 = add i64 %5706, -48
  br i1 %2876, label %block_40ea0b, label %block_40ea1e

block_40a618:                                     ; preds = %block_40a2a2
  %2880 = inttoptr i64 %120 to i32*
  %2881 = load i32, i32* %2880
  %2882 = icmp eq i32 %2881, 2
  %2883 = select i1 %2882, i64 20, i64 10
  %2884 = add i64 %4337, %2883
  br i1 %2882, label %block_40a62c, label %block_40a622

block_408f22:                                     ; preds = %block_408f18
  %2885 = inttoptr i64 %116 to i32*
  %2886 = load i32, i32* %2885
  %2887 = sext i32 %2886 to i64
  %2888 = shl nsw i64 %2887, 2
  %2889 = add i64 %2888, ptrtoint (%newc_type* @newc to i64)
  %2890 = inttoptr i64 %2889 to i32*
  store i32 2, i32* %2890
  %2891 = inttoptr i64 %116 to i32*
  %2892 = load i32, i32* %2891
  %2893 = sext i32 %2892 to i64
  %2894 = shl nsw i64 %2893, 5
  %2895 = add i64 %2894, ptrtoint (%vassign_type* @vassign to i64)
  %2896 = inttoptr i64 %2895 to i32*
  store i32 5, i32* %2896
  %2897 = inttoptr i64 %116 to i32*
  %2898 = load i32, i32* %2897
  %2899 = sext i32 %2898 to i64
  %2900 = shl nsw i64 %2899, 5
  store i64 %2900, i64* %5, align 8, !tbaa !1240
  %2901 = add i64 %2900, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2902 = add i64 %7826, 63
  %2903 = inttoptr i64 %2901 to i32*
  store i32 7, i32* %2903
  br label %block_40915c

block_409bfe:                                     ; preds = %block_409bdd
  %2904 = sext i32 %4352 to i64
  %2905 = shl nsw i64 %2904, 2
  %2906 = add i64 %2905, ptrtoint (%newc_type* @newc to i64)
  %2907 = inttoptr i64 %2906 to i32*
  store i32 2, i32* %2907
  %2908 = inttoptr i64 %116 to i32*
  %2909 = load i32, i32* %2908
  %2910 = sext i32 %2909 to i64
  %2911 = shl nsw i64 %2910, 5
  %2912 = add i64 %2911, ptrtoint (%vassign_type* @vassign to i64)
  %2913 = inttoptr i64 %2912 to i32*
  store i32 6, i32* %2913
  %2914 = inttoptr i64 %116 to i32*
  %2915 = load i32, i32* %2914
  %2916 = sext i32 %2915 to i64
  %2917 = shl nsw i64 %2916, 5
  store i64 %2917, i64* %5, align 8, !tbaa !1240
  %2918 = add i64 %2917, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %2919 = inttoptr i64 %2918 to i32*
  store i32 7, i32* %2919
  %2920 = add i64 %4364, 152
  br label %block_409dac

block_40f026:                                     ; preds = %block_40f016
  %2921 = add i64 %9363, -20
  %2922 = add i64 %9382, 7
  %2923 = inttoptr i64 %2921 to i32*
  store i32 0, i32* %2923
  br label %block_40f02d

block_40c432:                                     ; preds = %block_40c413
  %2924 = mul nsw i64 %4890, 96
  %2925 = add i64 %2924, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %2926 = inttoptr i64 %2925 to i32*
  %2927 = load i32, i32* %2926
  %2928 = inttoptr i64 %4855 to i32*
  %2929 = load i32, i32* %2928
  %2930 = sub i32 %2927, %2929
  %2931 = icmp eq i32 %2930, 0
  %2932 = lshr i32 %2930, 31
  %2933 = lshr i32 %2927, 31
  %2934 = lshr i32 %2929, 31
  %2935 = xor i32 %2934, %2933
  %2936 = xor i32 %2932, %2933
  %2937 = add nuw nsw i32 %2936, %2935
  %2938 = icmp eq i32 %2937, 2
  %2939 = icmp ne i32 %2932, 0
  %2940 = xor i1 %2939, %2938
  %2941 = or i1 %2931, %2940
  %2942 = select i1 %2941, i64 107, i64 33
  %2943 = add i64 %4897, %2942
  br i1 %2941, label %block_40c49d, label %block_40c453

block_40e3f5:                                     ; preds = %block_40e3bb
  %2944 = mul nsw i64 %3293, 96
  %2945 = add i64 %2944, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %2946 = inttoptr i64 %2945 to i32*
  %2947 = load i32, i32* %2946
  %2948 = inttoptr i64 %4855 to i32*
  %2949 = load i32, i32* %2948
  %2950 = sext i32 %2949 to i64
  %2951 = mul nsw i64 %2950, 96
  %2952 = add i64 %2951, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %2952, i64* %6292, align 8, !tbaa !1240
  %2953 = add i64 %2951, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 72)
  %2954 = inttoptr i64 %2953 to i32*
  store i32 %2947, i32* %2954
  %2955 = inttoptr i64 %4855 to i32*
  %2956 = load i32, i32* %2955
  %2957 = sext i32 %2956 to i64
  %2958 = mul nsw i64 %2957, 48
  store i64 %2958, i64* %11, align 8, !tbaa !1240
  %2959 = add i64 %2958, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 20)
  %2960 = inttoptr i64 %2959 to i32*
  %2961 = load i32, i32* %2960
  %2962 = zext i32 %2961 to i64
  store i64 %2962, i64* %4866, align 8, !tbaa !1240
  %2963 = mul nsw i64 %2957, 96
  %2964 = add i64 %2963, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 76)
  %2965 = inttoptr i64 %2964 to i32*
  store i32 %2961, i32* %2965
  %2966 = inttoptr i64 %4865 to i32*
  %2967 = load i32, i32* %2966
  %2968 = sext i32 %2967 to i64
  %2969 = mul nsw i64 %2968, 96
  %2970 = add i64 %2969, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %2971 = inttoptr i64 %2970 to i32*
  %2972 = load i32, i32* %2971
  %2973 = sext i32 %2972 to i64
  %2974 = mul nsw i64 %2973, 48
  %2975 = add i64 %2974, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 40)
  %2976 = inttoptr i64 %2975 to i32*
  store i32 1, i32* %2976
  %2977 = inttoptr i64 %4855 to i32*
  %2978 = load i32, i32* %2977
  %2979 = sext i32 %2978 to i64
  %2980 = mul nsw i64 %2979, 48
  %2981 = add i64 %2980, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 36)
  %2982 = add i64 %3300, 163
  %2983 = inttoptr i64 %2981 to i32*
  store i32 1, i32* %2983
  br label %block_40e498

block_40d56e:                                     ; preds = %block_40d52a
  %2984 = icmp ne i32 %3369, 1
  %2985 = select i1 %2984, i64 496, i64 10
  %2986 = add i64 %2730, %2985
  br i1 %2984, label %block_40d768, label %block_40d578

block_40ebef:                                     ; preds = %block_40eb73, %block_40eb96
  %2987 = phi i64 [ %3550, %block_40eb73 ], [ %1485, %block_40eb96 ]
  %2988 = phi %struct.Memory* [ %3531, %block_40eb73 ], [ %1484, %block_40eb96 ]
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %4, align 8, !tbaa !1240
  %2989 = load i64, i64* %10, align 8
  %2990 = add i64 %2989, -8
  %2991 = inttoptr i64 %2990 to i32*
  %2992 = load i32, i32* %2991
  %2993 = sext i32 %2992 to i64
  %2994 = mul nsw i64 %2993, 48
  %2995 = add i64 %2994, ptrtoint (%if_1_edge_type* @if_1_edge to i64)
  store i64 %2995, i64* %5, align 8, !tbaa !1240
  %2996 = add i64 %2989, -20
  %2997 = inttoptr i64 %2996 to i32*
  %2998 = load i32, i32* %2997
  %2999 = sext i32 %2998 to i64
  %3000 = shl nsw i64 %2999, 4
  %3001 = load i64, i64* %4, align 8
  %3002 = add i64 %3000, %3001
  %3003 = load i64, i64* %10, align 8
  %3004 = add i64 %3003, -52
  %3005 = inttoptr i64 %3004 to i32*
  %3006 = load i32, i32* %3005
  %3007 = sext i32 %3006 to i64
  %3008 = shl nsw i64 %3007, 2
  %3009 = add i64 %3008, %3002
  %3010 = inttoptr i64 %3009 to i32*
  %3011 = load i32, i32* %3010
  %3012 = sext i32 %3011 to i64
  %3013 = load i64, i64* %5, align 8
  %3014 = shl nsw i64 %3012, 2
  %3015 = add i64 %3014, %3013
  %3016 = inttoptr i64 %3015 to i32*
  %3017 = load i32, i32* %3016
  %3018 = icmp eq i32 %3017, 0
  %3019 = select i1 %3018, i64 60, i64 249
  %3020 = add i64 %2987, %3019
  store i64 ptrtoint (%edgenumber_type* @edgenumber to i64), i64* %4, align 8, !tbaa !1240
  %3021 = add i64 %3003, -8
  %3022 = inttoptr i64 %3021 to i32*
  %3023 = load i32, i32* %3022
  %3024 = sext i32 %3023 to i64
  %3025 = mul nsw i64 %3024, 96
  %3026 = add i64 %3025, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %3026, i64* %5, align 8, !tbaa !1240
  %3027 = load i64, i64* %10, align 8
  %3028 = add i64 %3027, -20
  %3029 = inttoptr i64 %3028 to i32*
  %3030 = load i32, i32* %3029
  %3031 = sext i32 %3030 to i64
  %3032 = shl nsw i64 %3031, 4
  %3033 = load i64, i64* %4, align 8
  %3034 = add i64 %3032, %3033
  %3035 = add i64 %3027, -52
  %3036 = inttoptr i64 %3035 to i32*
  %3037 = load i32, i32* %3036
  %3038 = sext i32 %3037 to i64
  store i64 %3038, i64* %6, align 8, !tbaa !1240
  %3039 = shl nsw i64 %3038, 2
  %3040 = add i64 %3039, %3034
  %3041 = inttoptr i64 %3040 to i32*
  %3042 = load i32, i32* %3041
  %3043 = sext i32 %3042 to i64
  %3044 = load i64, i64* %5, align 8
  %3045 = shl nsw i64 %3043, 3
  %3046 = add i64 %3045, %3044
  %3047 = inttoptr i64 %3046 to i32*
  %3048 = load i32, i32* %3047
  %3049 = add i32 %3048, 1
  %3050 = icmp eq i32 %3049, 0
  br i1 %3018, label %block_40ec2b, label %block_40ece8

block_40edee:                                     ; preds = %block_40edcb
  %3051 = add i64 %1205, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %1210, i64* %5, align 8, !tbaa !1240
  %3052 = add i64 %1211, %3051
  %3053 = inttoptr i64 %3052 to i32*
  %3054 = load i32, i32* %3053
  %3055 = zext i32 %3054 to i64
  store i64 %3055, i64* %6, align 8, !tbaa !1240
  %3056 = add i64 %5047, -76
  %3057 = inttoptr i64 %3056 to i32*
  store i32 %3054, i32* %3057
  %3058 = inttoptr i64 %3056 to i32*
  %3059 = load i32, i32* %3058
  %3060 = add i32 %3059, -1
  %3061 = icmp eq i32 %3059, 0
  %3062 = icmp eq i32 %3060, 0
  %3063 = select i1 %3062, i64 51, i64 41
  %3064 = add i64 %1217, %3063
  br i1 %3062, label %block_40ee21, label %block_40ee17

block_4093ea:                                     ; preds = %block_4091ae, %block_4093e5
  %3065 = phi i64 [ %5907, %block_4091ae ], [ %3083, %block_4093e5 ]
  %3066 = phi i64 [ 514, %block_4091ae ], [ 10, %block_4093e5 ]
  %3067 = phi %struct.Memory* [ %3633, %block_4091ae ], [ %3082, %block_4093e5 ]
  %3068 = add i64 %3066, %3065
  br label %block_40b95f

block_40d768:                                     ; preds = %block_40d3c7, %block_40d56e, %block_40d759, %block_40d43b, %block_40d51b, %block_40d534
  %3069 = phi i64 [ %3158, %block_40d3c7 ], [ %2673, %block_40d43b ], [ %1815, %block_40d51b ], [ %1636, %block_40d534 ], [ %2986, %block_40d56e ], [ %2800, %block_40d759 ]
  %3070 = phi i64 [ 297, %block_40d3c7 ], [ 5, %block_40d43b ], [ 5, %block_40d51b ], [ 506, %block_40d534 ], [ 5, %block_40d56e ], [ 5, %block_40d759 ]
  %3071 = phi %struct.Memory* [ %3977, %block_40d3c7 ], [ %3977, %block_40d43b ], [ %1814, %block_40d51b ], [ %3977, %block_40d534 ], [ %3977, %block_40d56e ], [ %2799, %block_40d759 ]
  %3072 = phi i64 [ 579, %block_40d3c7 ], [ 579, %block_40d43b ], [ 579, %block_40d51b ], [ 5, %block_40d534 ], [ 5, %block_40d56e ], [ 5, %block_40d759 ]
  %3073 = add nuw nsw i64 %3072, %3070
  %3074 = add i64 %3073, %3069
  %3075 = inttoptr i64 %4863 to i32*
  %3076 = load i32, i32* %3075
  %3077 = icmp ne i32 %3076, 2
  %3078 = select i1 %3077, i64 396, i64 10
  %3079 = add i64 %3074, %3078
  br i1 %3077, label %block_40d8f4, label %block_40d772

block_4093e5:                                     ; preds = %block_4093b6, %block_409261, %block_409290, %block_4093b1
  %3080 = phi i64 [ %4769, %block_409261 ], [ %4464, %block_409290 ], [ %8337, %block_4093b6 ], [ %3235, %block_4093b1 ]
  %3081 = phi i64 [ 278, %block_409261 ], [ 278, %block_409290 ], [ 5, %block_4093b6 ], [ 5, %block_4093b1 ]
  %3082 = phi %struct.Memory* [ %3633, %block_409261 ], [ %3633, %block_409290 ], [ %3633, %block_4093b6 ], [ %3234, %block_4093b1 ]
  %3083 = add i64 %3080, %3081
  br label %block_4093ea

block_40bbd5:                                     ; preds = %block_40bbcb
  %3084 = inttoptr i64 %4855 to i32*
  %3085 = load i32, i32* %3084
  %3086 = sext i32 %3085 to i64
  %3087 = shl nsw i64 %3086, 2
  %3088 = add i64 %3087, ptrtoint (%newe_type* @newe to i64)
  %3089 = inttoptr i64 %3088 to i32*
  %3090 = load i32, i32* %3089
  %3091 = add i32 %3090, 1
  %3092 = inttoptr i64 %3088 to i32*
  store i32 %3091, i32* %3092
  %3093 = inttoptr i64 %4855 to i32*
  %3094 = load i32, i32* %3093
  %3095 = sext i32 %3094 to i64
  %3096 = mul nsw i64 %3095, 48
  %3097 = add i64 %3096, ptrtoint (%eassign_type* @eassign to i64)
  %3098 = add i64 %3146, 52
  %3099 = inttoptr i64 %3097 to i32*
  store i32 1, i32* %3099
  br label %block_40bc09

block_408edf:                                     ; preds = %block_408ed5
  %3100 = inttoptr i64 %116 to i32*
  %3101 = load i32, i32* %3100
  %3102 = sext i32 %3101 to i64
  %3103 = mul nsw i64 %3102, 48
  %3104 = add i64 %3103, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %3105 = inttoptr i64 %3104 to i32*
  %3106 = load i32, i32* %3105
  %3107 = inttoptr i64 %125 to i32*
  store i32 %3106, i32* %3107
  %3108 = inttoptr i64 %116 to i32*
  %3109 = load i32, i32* %3108
  %3110 = sext i32 %3109 to i64
  %3111 = mul nsw i64 %3110, 48
  %3112 = add i64 %3111, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %3113 = inttoptr i64 %3112 to i32*
  %3114 = load i32, i32* %3113
  %3115 = inttoptr i64 %126 to i32*
  store i32 %3114, i32* %3115
  %3116 = inttoptr i64 %125 to i32*
  %3117 = load i32, i32* %3116
  %3118 = icmp ne i32 %3117, 0
  %3119 = select i1 %3118, i64 135, i64 57
  %3120 = add i64 %671, %3119
  br i1 %3118, label %block_409046, label %block_408f18

block_40abce:                                     ; preds = %block_40ab46.block_40abce_crit_edge, %block_40ab7f
  %3121 = phi i32 [ %3657, %block_40ab46.block_40abce_crit_edge ], [ %3440, %block_40ab7f ]
  %3122 = phi i64 [ %3655, %block_40ab46.block_40abce_crit_edge ], [ %3452, %block_40ab7f ]
  %3123 = sext i32 %3121 to i64
  %3124 = shl nsw i64 %3123, 2
  %3125 = add i64 %3124, ptrtoint (%newc_type* @newc to i64)
  %3126 = inttoptr i64 %3125 to i32*
  store i32 2, i32* %3126
  %3127 = inttoptr i64 %116 to i32*
  %3128 = load i32, i32* %3127
  %3129 = sext i32 %3128 to i64
  %3130 = shl nsw i64 %3129, 5
  %3131 = add i64 %3130, ptrtoint (%vassign_type* @vassign to i64)
  %3132 = inttoptr i64 %3131 to i32*
  store i32 3, i32* %3132
  %3133 = inttoptr i64 %116 to i32*
  %3134 = load i32, i32* %3133
  %3135 = sext i32 %3134 to i64
  %3136 = shl nsw i64 %3135, 5
  store i64 %3136, i64* %5, align 8, !tbaa !1240
  %3137 = add i64 %3136, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %3138 = add i64 %3122, 63
  %3139 = inttoptr i64 %3137 to i32*
  store i32 7, i32* %3139
  br label %block_40ad08

block_40bbcb:                                     ; preds = %block_40bb8c, %block_40bb96
  %3140 = phi i64 [ %3393, %block_40bb96 ], [ %3583, %block_40bb8c ]
  %3141 = phi %struct.Memory* [ %8611, %block_40bb96 ], [ %8611, %block_40bb8c ]
  %3142 = inttoptr i64 %4859 to i32*
  %3143 = load i32, i32* %3142
  %3144 = icmp eq i32 %3143, 3
  %3145 = select i1 %3144, i64 62, i64 10
  %3146 = add i64 %3140, %3145
  br i1 %3144, label %block_40bc09, label %block_40bbd5

block_40d3c7:                                     ; preds = %block_40d3a8
  %3147 = shl nsw i64 %3303, 2
  %3148 = add i64 %3147, ptrtoint (%newe_type* @newe to i64)
  %3149 = inttoptr i64 %3148 to i32*
  %3150 = load i32, i32* %3149
  %3151 = add i32 %3150, 1
  %3152 = inttoptr i64 %3148 to i32*
  store i32 %3151, i32* %3152
  %3153 = inttoptr i64 %4855 to i32*
  %3154 = load i32, i32* %3153
  %3155 = sext i32 %3154 to i64
  %3156 = mul nsw i64 %3155, 48
  %3157 = add i64 %3156, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 20)
  %3158 = add i64 %3310, 53
  %3159 = inttoptr i64 %3157 to i32*
  store i32 1, i32* %3159
  br label %block_40d768

block_408bc5:                                     ; preds = %block_408b8c
  %3160 = inttoptr i64 %120 to i32*
  %3161 = load i32, i32* %3160
  %3162 = icmp ne i32 %3161, 0
  %3163 = select i1 %3162, i64 42, i64 10
  %3164 = add i64 %3411, %3163
  br i1 %3162, label %block_408bef, label %block_408c19.sink.split

block_40cbbd:                                     ; preds = %block_40cb6a
  %3165 = mul nsw i64 %3843, 96
  %3166 = add i64 %3165, ptrtoint (%sje_type* @sje to i64)
  %3167 = inttoptr i64 %3166 to i32*
  %3168 = load i32, i32* %3167
  %3169 = inttoptr i64 %4855 to i32*
  %3170 = load i32, i32* %3169
  %3171 = sext i32 %3170 to i64
  %3172 = mul nsw i64 %3171, 96
  %3173 = add i64 %3172, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %3173, i64* %6292, align 8, !tbaa !1240
  %3174 = add i64 %3172, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 24)
  %3175 = inttoptr i64 %3174 to i32*
  store i32 %3168, i32* %3175
  %3176 = inttoptr i64 %4855 to i32*
  %3177 = load i32, i32* %3176
  %3178 = sext i32 %3177 to i64
  %3179 = mul nsw i64 %3178, 48
  store i64 %3179, i64* %11, align 8, !tbaa !1240
  %3180 = add i64 %3179, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %3181 = inttoptr i64 %3180 to i32*
  %3182 = load i32, i32* %3181
  %3183 = zext i32 %3182 to i64
  store i64 %3183, i64* %4866, align 8, !tbaa !1240
  %3184 = mul nsw i64 %3178, 96
  %3185 = add i64 %3184, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 28)
  %3186 = inttoptr i64 %3185 to i32*
  store i32 %3182, i32* %3186
  %3187 = inttoptr i64 %4865 to i32*
  %3188 = load i32, i32* %3187
  %3189 = sext i32 %3188 to i64
  %3190 = mul nsw i64 %3189, 96
  %3191 = add i64 %3190, ptrtoint (%sje_type* @sje to i64)
  %3192 = inttoptr i64 %3191 to i32*
  %3193 = load i32, i32* %3192
  %3194 = sext i32 %3193 to i64
  %3195 = mul nsw i64 %3194, 48
  %3196 = add i64 %3195, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 20)
  %3197 = inttoptr i64 %3196 to i32*
  store i32 1, i32* %3197
  %3198 = inttoptr i64 %4855 to i32*
  %3199 = load i32, i32* %3198
  %3200 = sext i32 %3199 to i64
  %3201 = mul nsw i64 %3200, 48
  %3202 = add i64 %3201, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 12)
  %3203 = add i64 %3850, 161
  %3204 = inttoptr i64 %3202 to i32*
  store i32 1, i32* %3204
  br label %block_40cc5e

block_40e7eb:                                     ; preds = %block_40e7e1
  %3205 = icmp ne i32 %1140, 0
  %3206 = select i1 %3205, i64 63, i64 10
  %3207 = add i64 %1143, %3206
  br i1 %3205, label %block_40e82a, label %block_40e7f5

block_40e17d:                                     ; preds = %block_40e144
  %3208 = inttoptr i64 %4855 to i32*
  %3209 = load i32, i32* %3208
  %3210 = sext i32 %3209 to i64
  %3211 = shl nsw i64 %3210, 2
  %3212 = add i64 %3211, ptrtoint (%newe_type* @newe to i64)
  %3213 = inttoptr i64 %3212 to i32*
  %3214 = load i32, i32* %3213
  %3215 = add i32 %3214, 1
  %3216 = inttoptr i64 %3212 to i32*
  store i32 %3215, i32* %3216
  %3217 = inttoptr i64 %4855 to i32*
  %3218 = load i32, i32* %3217
  %3219 = sext i32 %3218 to i64
  %3220 = mul nsw i64 %3219, 48
  %3221 = add i64 %3220, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 8)
  %3222 = inttoptr i64 %3221 to i32*
  store i32 1, i32* %3222
  %3223 = inttoptr i64 %4865 to i32*
  %3224 = load i32, i32* %3223
  %3225 = sext i32 %3224 to i64
  %3226 = mul nsw i64 %3225, 24
  %3227 = add i64 %3226, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %3228 = inttoptr i64 %3227 to i32*
  %3229 = load i32, i32* %3228
  %3230 = icmp ne i32 %3229, 2
  %3231 = select i1 %3230, i64 132, i64 84
  %3232 = add i64 %6900, %3231
  br i1 %3230, label %block_40e201, label %block_40e1d1

block_4093b1:                                     ; preds = %block_409372, %block_409343
  %3233 = phi i64 [ %8966, %block_409372 ], [ %3680, %block_409343 ]
  %3234 = phi %struct.Memory* [ %3633, %block_409372 ], [ %3633, %block_409343 ]
  %3235 = add i64 %3233, 47
  br label %block_4093e5

block_40e6f2:                                     ; preds = %block_40e55e, %block_40e6e8, %block_40e61c, %block_40e630
  %3236 = phi i64 [ %5967, %block_40e55e ], [ %1131, %block_40e61c ], [ %3360, %block_40e6e8 ], [ %919, %block_40e630 ]
  %3237 = phi i64 [ 209, %block_40e55e ], [ 209, %block_40e61c ], [ 5, %block_40e6e8 ], [ 5, %block_40e630 ]
  %3238 = phi %struct.Memory* [ %3704, %block_40e55e ], [ %1130, %block_40e61c ], [ %3359, %block_40e6e8 ], [ %3704, %block_40e630 ]
  %3239 = add i64 %3236, %3237
  br label %block_40e74f.sink.split

block_40a6a6:                                     ; preds = %block_40a685
  %3240 = sext i32 %778 to i64
  %3241 = shl nsw i64 %3240, 2
  %3242 = add i64 %3241, ptrtoint (%newc_type* @newc to i64)
  %3243 = inttoptr i64 %3242 to i32*
  store i32 3, i32* %3243
  %3244 = inttoptr i64 %116 to i32*
  %3245 = load i32, i32* %3244
  %3246 = sext i32 %3245 to i64
  %3247 = shl nsw i64 %3246, 5
  %3248 = add i64 %3247, ptrtoint (%vassign_type* @vassign to i64)
  %3249 = inttoptr i64 %3248 to i32*
  store i32 3, i32* %3249
  %3250 = inttoptr i64 %116 to i32*
  %3251 = load i32, i32* %3250
  %3252 = sext i32 %3251 to i64
  %3253 = shl nsw i64 %3252, 5
  %3254 = add i64 %3253, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %3255 = inttoptr i64 %3254 to i32*
  store i32 6, i32* %3255
  %3256 = inttoptr i64 %116 to i32*
  %3257 = load i32, i32* %3256
  %3258 = sext i32 %3257 to i64
  %3259 = shl nsw i64 %3258, 5
  store i64 %3259, i64* %5, align 8, !tbaa !1240
  %3260 = add i64 %3259, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %3261 = inttoptr i64 %3260 to i32*
  store i32 7, i32* %3261
  %3262 = add i64 %790, 194
  br label %block_40ad17.sink.split

block_408cee:                                     ; preds = %block_408ce4
  %3263 = inttoptr i64 %116 to i32*
  %3264 = load i32, i32* %3263
  %3265 = sext i32 %3264 to i64
  %3266 = mul nsw i64 %3265, 96
  %3267 = add i64 %3266, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %3268 = inttoptr i64 %3267 to i32*
  %3269 = load i32, i32* %3268
  %3270 = inttoptr i64 %123 to i32*
  store i32 %3269, i32* %3270
  %3271 = inttoptr i64 %123 to i32*
  %3272 = load i32, i32* %3271
  %3273 = sext i32 %3272 to i64
  %3274 = mul nsw i64 %3273, 24
  %3275 = add i64 %3274, ptrtoint (%cbc_type* @cbc to i64)
  %3276 = inttoptr i64 %3275 to i32*
  %3277 = load i32, i32* %3276
  %3278 = icmp ne i32 %3277, 3
  %3279 = select i1 %3278, i64 136, i64 57
  %3280 = add i64 %3366, %3279
  br i1 %3278, label %block_408cee.block_408d76_crit_edge, label %block_408d27

block_408cee.block_408d76_crit_edge:              ; preds = %block_408cee
  %3281 = inttoptr i64 %116 to i32*
  %3282 = load i32, i32* %3281
  br label %block_408d76

block_40e3bb:                                     ; preds = %block_40e37c
  %3283 = inttoptr i64 %4855 to i32*
  %3284 = load i32, i32* %3283
  %3285 = sext i32 %3284 to i64
  %3286 = mul nsw i64 %3285, 96
  %3287 = add i64 %3286, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %3288 = inttoptr i64 %3287 to i32*
  %3289 = load i32, i32* %3288
  %3290 = inttoptr i64 %4865 to i32*
  store i32 %3289, i32* %3290
  %3291 = inttoptr i64 %4865 to i32*
  %3292 = load i32, i32* %3291
  %3293 = sext i32 %3292 to i64
  %3294 = mul nsw i64 %3293, 24
  %3295 = add i64 %3294, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %3296 = inttoptr i64 %3295 to i32*
  %3297 = load i32, i32* %3296
  %3298 = icmp ne i32 %3297, 2
  %3299 = select i1 %3298, i64 221, i64 58
  %3300 = add i64 %3510, %3299
  br i1 %3298, label %block_40e498, label %block_40e3f5

block_40d3a8:                                     ; preds = %block_40d39e
  %3301 = inttoptr i64 %4855 to i32*
  %3302 = load i32, i32* %3301
  %3303 = sext i32 %3302 to i64
  %3304 = mul nsw i64 %3303, 48
  %3305 = add i64 %3304, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 12)
  %3306 = inttoptr i64 %3305 to i32*
  %3307 = load i32, i32* %3306
  %3308 = icmp ne i32 %3307, 0
  %3309 = select i1 %3308, i64 89, i64 31
  %3310 = add i64 %3372, %3309
  br i1 %3308, label %block_40d401, label %block_40d3c7

block_408ba5:                                     ; preds = %block_408b8c
  %3311 = inttoptr i64 %116 to i32*
  %3312 = load i32, i32* %3311
  %3313 = sext i32 %3312 to i64
  %3314 = shl nsw i64 %3313, 5
  %3315 = add i64 %3314, ptrtoint (%vassign_type* @vassign to i64)
  %3316 = add i64 %3411, 27
  %3317 = inttoptr i64 %3315 to i32*
  store i32 3, i32* %3317
  br label %block_408c1e

block_40f09b:                                     ; preds = %block_40f19f, %block_40f094
  %3318 = phi i64 [ %3528, %block_40f094 ], [ %6691, %block_40f19f ]
  %3319 = phi %struct.Memory* [ %8365, %block_40f094 ], [ %7801, %block_40f19f ]
  %3320 = inttoptr i64 %3931 to i32*
  %3321 = load i32, i32* %3320
  %3322 = add i32 %3321, -2
  %3323 = lshr i32 %3322, 31
  %3324 = lshr i32 %3321, 31
  %3325 = xor i32 %3323, %3324
  %3326 = add nuw nsw i32 %3325, %3324
  %3327 = icmp eq i32 %3326, 2
  %3328 = icmp ne i32 %3323, 0
  %3329 = xor i1 %3328, %3327
  %3330 = select i1 %3329, i64 10, i64 660
  %3331 = add i64 %3318, %3330
  br i1 %3329, label %block_40f0a5, label %block_40f32f

block_40b3a0:                                     ; preds = %block_40b381
  %3332 = mul nsw i64 %8430, 96
  %3333 = add i64 %3332, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %3334 = inttoptr i64 %3333 to i32*
  %3335 = load i32, i32* %3334
  %3336 = sub i32 %3335, %3813
  %3337 = lshr i32 %3336, 31
  %3338 = lshr i32 %3335, 31
  %3339 = xor i32 %3817, %3338
  %3340 = xor i32 %3337, %3338
  %3341 = add nuw nsw i32 %3340, %3339
  %3342 = icmp eq i32 %3341, 2
  %3343 = icmp ne i32 %3337, 0
  %3344 = xor i1 %3343, %3342
  %3345 = select i1 %3344, i64 33, i64 143
  %3346 = add i64 %8437, %3345
  br i1 %3344, label %block_40b3c1, label %block_40b42f

block_40ab9f:                                     ; preds = %block_40ab7f
  %3347 = sext i32 %3440 to i64
  %3348 = shl nsw i64 %3347, 2
  %3349 = add i64 %3348, ptrtoint (%newc_type* @newc to i64)
  %3350 = inttoptr i64 %3349 to i32*
  store i32 1, i32* %3350
  %3351 = inttoptr i64 %116 to i32*
  %3352 = load i32, i32* %3351
  %3353 = sext i32 %3352 to i64
  %3354 = shl nsw i64 %3353, 5
  store i64 %3354, i64* %5, align 8, !tbaa !1240
  %3355 = add i64 %3354, ptrtoint (%vassign_type* @vassign to i64)
  %3356 = inttoptr i64 %3355 to i32*
  store i32 7, i32* %3356
  %3357 = add i64 %3452, 110
  br label %block_40ad08

block_40e6e8:                                     ; preds = %block_40e63a, %block_40e6e3
  %3358 = phi i64 [ %990, %block_40e63a ], [ %657, %block_40e6e3 ]
  %3359 = phi %struct.Memory* [ %3704, %block_40e63a ], [ %656, %block_40e6e3 ]
  %3360 = add i64 %3358, 5
  br label %block_40e6f2

block_408ce4:                                     ; preds = %block_408c8c
  %3361 = add i64 %3807, 10
  %3362 = inttoptr i64 %126 to i32*
  %3363 = load i32, i32* %3362
  %3364 = icmp ne i32 %3363, 1
  %3365 = select i1 %3364, i64 214, i64 10
  %3366 = add i64 %3361, %3365
  br i1 %3364, label %block_408dba.thread, label %block_408cee

block_408dba.thread:                              ; preds = %block_408ce4
  %3367 = add i64 %3366, 226
  br label %block_408e9c

block_40d39e:                                     ; preds = %block_40d394
  %3368 = inttoptr i64 %4861 to i32*
  %3369 = load i32, i32* %3368
  %3370 = icmp ne i32 %3369, 2
  %3371 = select i1 %3370, i64 396, i64 10
  %3372 = add i64 %3927, %3371
  br i1 %3370, label %block_40d52a, label %block_40d3a8

block_409b99:                                     ; preds = %block_409b8f
  %3373 = inttoptr i64 %126 to i32*
  %3374 = load i32, i32* %3373
  %3375 = icmp ne i32 %3374, 0
  %3376 = select i1 %3375, i64 258, i64 10
  %3377 = add i64 %3398, %3376
  br i1 %3375, label %block_409ca5, label %block_409ba3

block_40bb96:                                     ; preds = %block_40bb82, %block_40bb8c
  %3378 = phi i64 [ %3630, %block_40bb82 ], [ %3583, %block_40bb8c ]
  %3379 = inttoptr i64 %4855 to i32*
  %3380 = load i32, i32* %3379
  %3381 = sext i32 %3380 to i64
  %3382 = shl nsw i64 %3381, 2
  %3383 = add i64 %3382, ptrtoint (%newe_type* @newe to i64)
  %3384 = inttoptr i64 %3383 to i32*
  %3385 = load i32, i32* %3384
  %3386 = add i32 %3385, 1
  %3387 = inttoptr i64 %3383 to i32*
  store i32 %3386, i32* %3387
  %3388 = inttoptr i64 %4855 to i32*
  %3389 = load i32, i32* %3388
  %3390 = sext i32 %3389 to i64
  %3391 = mul nsw i64 %3390, 48
  %3392 = add i64 %3391, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 40)
  %3393 = add i64 %3378, 53
  %3394 = inttoptr i64 %3392 to i32*
  store i32 1, i32* %3394
  br label %block_40bbcb

block_409b8f:                                     ; preds = %block_4098f6
  %3395 = add i64 %7535, 308
  %3396 = icmp ne i32 %7532, 1
  %3397 = select i1 %3396, i64 268, i64 10
  %3398 = add i64 %3395, %3397
  br i1 %3396, label %block_409c9b.thread, label %block_409b99

block_409c9b.thread:                              ; preds = %block_409b8f.thread, %block_409b8f
  %3399 = phi i64 [ %4749, %block_409b8f.thread ], [ %3398, %block_409b8f ]
  %3400 = add i64 %3399, 268
  br label %block_409dac

block_408b8c:                                     ; preds = %block_408b82
  %3401 = inttoptr i64 %116 to i32*
  %3402 = load i32, i32* %3401
  %3403 = sext i32 %3402 to i64
  %3404 = shl nsw i64 %3403, 2
  %3405 = add i64 %3404, ptrtoint (%newc_type* @newc to i64)
  %3406 = inttoptr i64 %3405 to i32*
  store i32 2, i32* %3406
  %3407 = inttoptr i64 %119 to i32*
  %3408 = load i32, i32* %3407
  %3409 = icmp ne i32 %3408, 0
  %3410 = select i1 %3409, i64 57, i64 25
  %3411 = add i64 %3434, %3410
  br i1 %3409, label %block_408bc5, label %block_408ba5

block_40db84:                                     ; preds = %block_40db45
  %3412 = inttoptr i64 %4855 to i32*
  %3413 = load i32, i32* %3412
  %3414 = sext i32 %3413 to i64
  %3415 = mul nsw i64 %3414, 96
  %3416 = add i64 %3415, ptrtoint (%sje_type* @sje to i64)
  %3417 = inttoptr i64 %3416 to i32*
  %3418 = load i32, i32* %3417
  %3419 = inttoptr i64 %4865 to i32*
  store i32 %3418, i32* %3419
  %3420 = inttoptr i64 %4865 to i32*
  %3421 = load i32, i32* %3420
  %3422 = sext i32 %3421 to i64
  %3423 = mul nsw i64 %3422, 24
  %3424 = add i64 %3423, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %3425 = inttoptr i64 %3424 to i32*
  %3426 = load i32, i32* %3425
  %3427 = icmp ne i32 %3426, 2
  %3428 = select i1 %3427, i64 224, i64 57
  %3429 = add i64 %1929, %3428
  br i1 %3427, label %block_40dc64, label %block_40dbbd

block_40ef2b:                                     ; preds = %block_40ef21
  %3430 = add i64 %5226, 7
  %3431 = inttoptr i64 %5307 to i32*
  store i32 1, i32* %3431
  br label %block_40ef32

block_408b82:                                     ; preds = %block_408b49
  %3432 = icmp ne i32 %3636, 4
  %3433 = select i1 %3432, i64 189, i64 10
  %3434 = add i64 %3639, %3433
  br i1 %3432, label %block_408c3f, label %block_408b8c

block_40ab7f:                                     ; preds = %block_40ab46
  %3435 = mul nsw i64 %3648, 96
  %3436 = add i64 %3435, ptrtoint (%sje_type* @sje to i64)
  %3437 = inttoptr i64 %3436 to i32*
  %3438 = load i32, i32* %3437
  %3439 = inttoptr i64 %116 to i32*
  %3440 = load i32, i32* %3439
  %3441 = sub i32 %3438, %3440
  %3442 = lshr i32 %3441, 31
  %3443 = lshr i32 %3438, 31
  %3444 = lshr i32 %3440, 31
  %3445 = xor i32 %3444, %3443
  %3446 = xor i32 %3442, %3443
  %3447 = add nuw nsw i32 %3446, %3445
  %3448 = icmp eq i32 %3447, 2
  %3449 = icmp ne i32 %3442, 0
  %3450 = xor i1 %3449, %3448
  %3451 = select i1 %3450, i64 32, i64 79
  %3452 = add i64 %3655, %3451
  br i1 %3450, label %block_40ab9f, label %block_40abce

block_40b9ea:                                     ; preds = %block_40b9fe, %block_40b9c2
  %3453 = phi i64 [ %5745, %block_40b9c2 ], [ %8205, %block_40b9fe ]
  %3454 = phi i64 [ %5808, %block_40b9c2 ], [ %8198, %block_40b9fe ]
  %3455 = phi %struct.Memory* [ %5809, %block_40b9c2 ], [ %8197, %block_40b9fe ]
  %3456 = add i64 %3454, -20
  %3457 = inttoptr i64 %3456 to i32*
  %3458 = load i32, i32* %3457
  %3459 = add i64 %3454, -8
  %3460 = inttoptr i64 %3459 to i32*
  %3461 = load i32, i32* %3460
  %3462 = sext i32 %3461 to i64
  store i64 %3462, i64* %5, align 8, !tbaa !1240
  %3463 = shl nsw i64 %3462, 2
  %3464 = add i64 %3463, ptrtoint (%newc_type* @newc to i64)
  %3465 = inttoptr i64 %3464 to i32*
  %3466 = load i32, i32* %3465
  %3467 = sub i32 %3458, %3466
  %3468 = lshr i32 %3467, 31
  %3469 = trunc i32 %3468 to i8
  %3470 = lshr i32 %3458, 31
  %3471 = lshr i32 %3466, 31
  %3472 = xor i32 %3471, %3470
  %3473 = xor i32 %3468, %3470
  %3474 = add nuw nsw i32 %3473, %3472
  %3475 = icmp eq i32 %3474, 2
  %3476 = icmp ne i8 %3469, 0
  %3477 = xor i1 %3476, %3475
  %3478 = select i1 %3477, i64 20, i64 90
  %3479 = add i64 %3453, %3478
  br i1 %3477, label %block_40b9fe, label %block_40ba44

block_40e6b3:                                     ; preds = %block_40e679
  %3480 = mul nsw i64 %6070, 96
  %3481 = add i64 %3480, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %3482 = inttoptr i64 %3481 to i32*
  %3483 = load i32, i32* %3482
  %3484 = inttoptr i64 %4855 to i32*
  %3485 = load i32, i32* %3484
  %3486 = sext i32 %3485 to i64
  %3487 = mul nsw i64 %3486, 96
  %3488 = add i64 %3487, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 72)
  %3489 = add i64 %6077, 48
  %3490 = inttoptr i64 %3488 to i32*
  store i32 %3483, i32* %3490
  br label %block_40e6e3

block_40e37c:                                     ; preds = %block_40e372
  %3491 = inttoptr i64 %4855 to i32*
  %3492 = load i32, i32* %3491
  %3493 = sext i32 %3492 to i64
  %3494 = shl nsw i64 %3493, 2
  %3495 = add i64 %3494, ptrtoint (%newe_type* @newe to i64)
  %3496 = inttoptr i64 %3495 to i32*
  %3497 = load i32, i32* %3496
  %3498 = add i32 %3497, 1
  %3499 = inttoptr i64 %3495 to i32*
  store i32 %3498, i32* %3499
  %3500 = inttoptr i64 %4855 to i32*
  %3501 = load i32, i32* %3500
  %3502 = sext i32 %3501 to i64
  %3503 = mul nsw i64 %3502, 48
  %3504 = add i64 %3503, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 36)
  %3505 = inttoptr i64 %3504 to i32*
  store i32 1, i32* %3505
  %3506 = inttoptr i64 %4863 to i32*
  %3507 = load i32, i32* %3506
  %3508 = icmp ne i32 %3507, 1
  %3509 = select i1 %3508, i64 289, i64 63
  %3510 = add i64 %3712, %3509
  br i1 %3508, label %block_40e49d, label %block_40e3bb

block_409690:                                     ; preds = %block_40966f
  %3511 = sext i32 %829 to i64
  %3512 = shl nsw i64 %3511, 2
  %3513 = add i64 %3512, ptrtoint (%newc_type* @newc to i64)
  %3514 = inttoptr i64 %3513 to i32*
  store i32 2, i32* %3514
  %3515 = inttoptr i64 %116 to i32*
  %3516 = load i32, i32* %3515
  %3517 = sext i32 %3516 to i64
  %3518 = shl nsw i64 %3517, 5
  %3519 = add i64 %3518, ptrtoint (%vassign_type* @vassign to i64)
  %3520 = inttoptr i64 %3519 to i32*
  store i32 6, i32* %3520
  %3521 = inttoptr i64 %116 to i32*
  %3522 = load i32, i32* %3521
  %3523 = sext i32 %3522 to i64
  %3524 = shl nsw i64 %3523, 5
  store i64 %3524, i64* %5, align 8, !tbaa !1240
  %3525 = add i64 %3524, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %3526 = inttoptr i64 %3525 to i32*
  store i32 7, i32* %3526
  %3527 = add i64 %841, 152
  br label %block_4098d3.sink.split

block_40f094:                                     ; preds = %block_40f08a
  %3528 = add i64 %8378, 7
  %3529 = inttoptr i64 %3931 to i32*
  store i32 0, i32* %3529
  br label %block_40f09b

block_40eb73:                                     ; preds = %block_40ea86, %block_40eb1a
  %3530 = phi i64 [ %4628, %block_40ea86 ], [ %3921, %block_40eb1a ]
  %3531 = phi %struct.Memory* [ %4608, %block_40ea86 ], [ %3920, %block_40eb1a ]
  %3532 = load i64, i64* %10, align 8
  %3533 = add i64 %3532, -8
  %3534 = inttoptr i64 %3533 to i32*
  %3535 = load i32, i32* %3534
  %3536 = sext i32 %3535 to i64
  %3537 = mul nsw i64 %3536, 24
  %3538 = add i64 %3537, ptrtoint (%cbc_type* @cbc to i64)
  %3539 = add i64 %3532, -44
  %3540 = inttoptr i64 %3539 to i32*
  %3541 = load i32, i32* %3540
  %3542 = sext i32 %3541 to i64
  %3543 = shl nsw i64 %3542, 2
  %3544 = add i64 %3543, %3538
  %3545 = inttoptr i64 %3544 to i32*
  %3546 = load i32, i32* %3545
  %3547 = add i32 %3546, -2
  %3548 = icmp eq i32 %3547, 0
  %3549 = select i1 %3548, i64 35, i64 124
  %3550 = add i64 %3530, %3549
  br i1 %3548, label %block_40eb96, label %block_40ebef

block_40b360:                                     ; preds = %block_40b341
  %3551 = add i64 %3808, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %3552 = inttoptr i64 %3551 to i32*
  %3553 = load i32, i32* %3552
  %3554 = sub i32 %3553, %3813
  %3555 = lshr i32 %3554, 31
  %3556 = lshr i32 %3553, 31
  %3557 = xor i32 %3817, %3556
  %3558 = xor i32 %3555, %3556
  %3559 = add nuw nsw i32 %3558, %3557
  %3560 = icmp eq i32 %3559, 2
  %3561 = icmp ne i32 %3555, 0
  %3562 = xor i1 %3561, %3560
  %3563 = select i1 %3562, i64 33, i64 338
  %3564 = add i64 %3686, %3563
  br i1 %3562, label %block_40b381, label %block_40b4b2

block_40d35a:                                     ; preds = %block_40d350
  %3565 = inttoptr i64 %4855 to i32*
  %3566 = load i32, i32* %3565
  %3567 = sext i32 %3566 to i64
  %3568 = shl nsw i64 %3567, 2
  %3569 = add i64 %3568, ptrtoint (%newe_type* @newe to i64)
  %3570 = inttoptr i64 %3569 to i32*
  %3571 = load i32, i32* %3570
  %3572 = add i32 %3571, 1
  %3573 = inttoptr i64 %3569 to i32*
  store i32 %3572, i32* %3573
  %3574 = inttoptr i64 %4855 to i32*
  %3575 = load i32, i32* %3574
  %3576 = sext i32 %3575 to i64
  %3577 = mul nsw i64 %3576, 48
  %3578 = add i64 %3577, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 24)
  %3579 = add i64 %3625, 53
  %3580 = inttoptr i64 %3578 to i32*
  store i32 1, i32* %3580
  br label %block_40db3b

block_40bb8c:                                     ; preds = %block_40bb82
  %3581 = icmp ne i32 %3627, 1
  %3582 = select i1 %3581, i64 63, i64 10
  %3583 = add i64 %3630, %3582
  br i1 %3581, label %block_40bbcb, label %block_40bb96

block_408b53:                                     ; preds = %block_408b49
  %3584 = inttoptr i64 %116 to i32*
  %3585 = load i32, i32* %3584
  %3586 = sext i32 %3585 to i64
  %3587 = shl nsw i64 %3586, 2
  %3588 = add i64 %3587, ptrtoint (%newc_type* @newc to i64)
  %3589 = inttoptr i64 %3588 to i32*
  store i32 1, i32* %3589
  %3590 = inttoptr i64 %116 to i32*
  %3591 = load i32, i32* %3590
  %3592 = sext i32 %3591 to i64
  %3593 = shl nsw i64 %3592, 5
  store i64 %3593, i64* %5, align 8, !tbaa !1240
  %3594 = add i64 %3593, ptrtoint (%vassign_type* @vassign to i64)
  %3595 = add i64 %3639, 42
  %3596 = inttoptr i64 %3594 to i32*
  store i32 7, i32* %3596
  br label %block_40b969

block_408c96:                                     ; preds = %block_408c8c
  %3597 = inttoptr i64 %116 to i32*
  %3598 = load i32, i32* %3597
  %3599 = sext i32 %3598 to i64
  %3600 = shl nsw i64 %3599, 2
  %3601 = add i64 %3600, ptrtoint (%newc_type* @newc to i64)
  %3602 = inttoptr i64 %3601 to i32*
  store i32 2, i32* %3602
  %3603 = inttoptr i64 %116 to i32*
  %3604 = load i32, i32* %3603
  %3605 = sext i32 %3604 to i64
  %3606 = shl nsw i64 %3605, 5
  %3607 = add i64 %3606, ptrtoint (%vassign_type* @vassign to i64)
  %3608 = inttoptr i64 %3607 to i32*
  store i32 3, i32* %3608
  %3609 = inttoptr i64 %116 to i32*
  %3610 = load i32, i32* %3609
  %3611 = sext i32 %3610 to i64
  %3612 = shl nsw i64 %3611, 5
  store i64 %3612, i64* %5, align 8, !tbaa !1240
  %3613 = add i64 %3612, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %3614 = add i64 %3807, 63
  %3615 = inttoptr i64 %3613 to i32*
  store i32 7, i32* %3615
  br label %block_40b95f

block_40e363:                                     ; preds = %block_40e324, %block_40e32e
  %3616 = phi i64 [ %4734, %block_40e324 ], [ %4186, %block_40e32e ]
  %3617 = phi %struct.Memory* [ %4729, %block_40e324 ], [ %4729, %block_40e32e ]
  %3618 = add i64 %3616, 5
  br label %block_40e372

block_40d350:                                     ; preds = %block_40d311, %block_40d31b
  %3619 = phi i64 [ %4739, %block_40d311 ], [ %4202, %block_40d31b ]
  %3620 = phi %struct.Memory* [ %3977, %block_40d311 ], [ %3977, %block_40d31b ]
  %3621 = inttoptr i64 %4863 to i32*
  %3622 = load i32, i32* %3621
  %3623 = icmp eq i32 %3622, 3
  %3624 = select i1 %3623, i64 63, i64 10
  %3625 = add i64 %3619, %3624
  br i1 %3623, label %block_40db3b, label %block_40d35a

block_40bb82:                                     ; preds = %block_40bacd
  %3626 = inttoptr i64 %4862 to i32*
  %3627 = load i32, i32* %3626
  %3628 = icmp eq i32 %3627, 0
  %3629 = select i1 %3628, i64 20, i64 10
  %3630 = add i64 %7916, %3629
  br i1 %3628, label %block_40bb96, label %block_40bb8c

block_408b49:                                     ; preds = %block_408b06, %block_408b44
  %3631 = phi i64 [ %4021, %block_408b06 ], [ %3669, %block_408b44 ]
  %3632 = phi i64 [ 58, %block_408b06 ], [ 5, %block_408b44 ]
  %3633 = phi %struct.Memory* [ %4079, %block_408b06 ], [ %3668, %block_408b44 ]
  %3634 = add i64 %3631, %3632
  %3635 = inttoptr i64 %122 to i32*
  %3636 = load i32, i32* %3635
  %3637 = icmp ne i32 %3636, 3
  %3638 = select i1 %3637, i64 57, i64 10
  %3639 = add i64 %3634, %3638
  br i1 %3637, label %block_408b82, label %block_408b53

block_40ab46:                                     ; preds = %block_40ab26
  %3640 = sext i32 %4103 to i64
  %3641 = mul nsw i64 %3640, 96
  %3642 = add i64 %3641, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %3643 = inttoptr i64 %3642 to i32*
  %3644 = load i32, i32* %3643
  %3645 = inttoptr i64 %124 to i32*
  store i32 %3644, i32* %3645
  %3646 = inttoptr i64 %124 to i32*
  %3647 = load i32, i32* %3646
  %3648 = sext i32 %3647 to i64
  %3649 = mul nsw i64 %3648, 24
  %3650 = add i64 %3649, ptrtoint (%cbc_type* @cbc to i64)
  %3651 = inttoptr i64 %3650 to i32*
  %3652 = load i32, i32* %3651
  %3653 = icmp ne i32 %3652, 3
  %3654 = select i1 %3653, i64 136, i64 57
  %3655 = add i64 %4115, %3654
  br i1 %3653, label %block_40ab46.block_40abce_crit_edge, label %block_40ab7f

block_40ab46.block_40abce_crit_edge:              ; preds = %block_40ab46
  %3656 = inttoptr i64 %116 to i32*
  %3657 = load i32, i32* %3656
  br label %block_40abce

block_408b44.sink.split:                          ; preds = %block_408b2c, %block_408b14
  %3658 = phi i64 [ %3924, %block_408b14 ], [ %3974, %block_408b2c ]
  %3659 = phi i32 [ 2, %block_408b14 ], [ 5, %block_408b2c ]
  %3660 = phi i64 [ 29, %block_408b14 ], [ 5, %block_408b2c ]
  %3661 = inttoptr i64 %122 to i32*
  %3662 = load i32, i32* %3661
  %3663 = add i32 %3662, %3659
  %3664 = add i64 %3658, 9
  %3665 = inttoptr i64 %122 to i32*
  store i32 %3663, i32* %3665
  br label %block_408b44

block_408b44:                                     ; preds = %block_408b2c, %block_408b44.sink.split
  %3666 = phi i64 [ %3974, %block_408b2c ], [ %3664, %block_408b44.sink.split ]
  %3667 = phi i64 [ 5, %block_408b2c ], [ %3660, %block_408b44.sink.split ]
  %3668 = phi %struct.Memory* [ %4079, %block_408b2c ], [ %4079, %block_408b44.sink.split ]
  %3669 = add i64 %3666, %3667
  br label %block_408b49

block_409343:                                     ; preds = %block_409322
  %3670 = sext i32 %3741 to i64
  %3671 = shl nsw i64 %3670, 2
  %3672 = add i64 %3671, ptrtoint (%newc_type* @newc to i64)
  %3673 = inttoptr i64 %3672 to i32*
  store i32 1, i32* %3673
  %3674 = inttoptr i64 %116 to i32*
  %3675 = load i32, i32* %3674
  %3676 = sext i32 %3675 to i64
  %3677 = shl nsw i64 %3676, 5
  store i64 %3677, i64* %5, align 8, !tbaa !1240
  %3678 = add i64 %3677, ptrtoint (%vassign_type* @vassign to i64)
  %3679 = inttoptr i64 %3678 to i32*
  store i32 7, i32* %3679
  %3680 = add i64 %3753, 110
  br label %block_4093b1

block_40b341:                                     ; preds = %block_40b320
  %3681 = add i64 %4165, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %3682 = inttoptr i64 %3681 to i32*
  %3683 = load i32, i32* %3682
  %3684 = icmp ne i32 %3683, 3
  %3685 = select i1 %3684, i64 369, i64 31
  %3686 = add i64 %3825, %3685
  br i1 %3684, label %block_40b4b2, label %block_40b360

block_40db3b:                                     ; preds = %block_40d394, %block_40db31, %block_40d350, %block_40d35a
  %3687 = phi i64 [ %3927, %block_40d394 ], [ %3701, %block_40db31 ], [ %3625, %block_40d350 ], [ %3579, %block_40d35a ]
  %3688 = phi i64 [ 5, %block_40d394 ], [ 5, %block_40db31 ], [ 1964, %block_40d350 ], [ 1964, %block_40d35a ]
  %3689 = phi %struct.Memory* [ %3977, %block_40d394 ], [ %3698, %block_40db31 ], [ %3620, %block_40d350 ], [ %3620, %block_40d35a ]
  %3690 = add i64 %3687, %3688
  %3691 = inttoptr i64 %4859 to i32*
  %3692 = load i32, i32* %3691
  %3693 = icmp ne i32 %3692, 1
  %3694 = select i1 %3693, i64 1113, i64 10
  %3695 = add i64 %3690, %3694
  br i1 %3693, label %block_40df94, label %block_40db45

block_40db31:                                     ; preds = %block_40d805, %block_40d938, %block_40d8fe, %block_40d8e5, %block_40db22, %block_40d791
  %3696 = phi i64 [ %7338, %block_40d8fe ], [ %7644, %block_40d938 ], [ %2052, %block_40db22 ], [ %308, %block_40d791 ], [ %9487, %block_40d805 ], [ %4752, %block_40d8e5 ]
  %3697 = phi i64 [ 510, %block_40d8fe ], [ 10, %block_40d938 ], [ 10, %block_40db22 ], [ 302, %block_40d791 ], [ 10, %block_40d805 ], [ 10, %block_40d8e5 ]
  %3698 = phi %struct.Memory* [ %3071, %block_40d8fe ], [ %3071, %block_40d938 ], [ %2051, %block_40db22 ], [ %3071, %block_40d791 ], [ %3071, %block_40d805 ], [ %4751, %block_40d8e5 ]
  %3699 = phi i64 [ 5, %block_40d8fe ], [ 5, %block_40d938 ], [ 5, %block_40db22 ], [ 578, %block_40d791 ], [ 578, %block_40d805 ], [ 578, %block_40d8e5 ]
  %3700 = add nuw nsw i64 %3697, %3699
  %3701 = add i64 %3700, %3696
  br label %block_40db3b

block_40e372:                                     ; preds = %block_40def0, %block_40df85, %block_40e2d6, %block_40e2db, %block_40e363, %block_40deeb
  %3702 = phi i64 [ %634, %block_40deeb ], [ %5949, %block_40def0 ], [ %4682, %block_40df85 ], [ %4127, %block_40e2d6 ], [ %4123, %block_40e2db ], [ %3618, %block_40e363 ]
  %3703 = phi i64 [ 164, %block_40deeb ], [ 5, %block_40def0 ], [ 5, %block_40df85 ], [ 151, %block_40e2d6 ], [ 5, %block_40e2db ], [ 5, %block_40e363 ]
  %3704 = phi %struct.Memory* [ %633, %block_40deeb ], [ %1503, %block_40def0 ], [ %4681, %block_40df85 ], [ %4126, %block_40e2d6 ], [ %3689, %block_40e2db ], [ %3617, %block_40e363 ]
  %3705 = phi i64 [ 995, %block_40deeb ], [ 995, %block_40def0 ], [ 995, %block_40df85 ], [ 5, %block_40e2d6 ], [ 5, %block_40e2db ], [ 5, %block_40e363 ]
  %3706 = add nuw nsw i64 %3705, %3703
  %3707 = add i64 %3706, %3702
  %3708 = inttoptr i64 %4861 to i32*
  %3709 = load i32, i32* %3708
  %3710 = icmp ne i32 %3709, 1
  %3711 = select i1 %3710, i64 472, i64 10
  %3712 = add i64 %3707, %3711
  br i1 %3710, label %block_40e54a, label %block_40e37c

block_40a326:                                     ; preds = %block_40a305
  %3713 = sext i32 %7237 to i64
  %3714 = shl nsw i64 %3713, 2
  %3715 = add i64 %3714, ptrtoint (%newc_type* @newc to i64)
  %3716 = inttoptr i64 %3715 to i32*
  store i32 3, i32* %3716
  %3717 = inttoptr i64 %116 to i32*
  %3718 = load i32, i32* %3717
  %3719 = sext i32 %3718 to i64
  %3720 = shl nsw i64 %3719, 5
  %3721 = add i64 %3720, ptrtoint (%vassign_type* @vassign to i64)
  %3722 = inttoptr i64 %3721 to i32*
  store i32 5, i32* %3722
  %3723 = inttoptr i64 %116 to i32*
  %3724 = load i32, i32* %3723
  %3725 = sext i32 %3724 to i64
  %3726 = shl nsw i64 %3725, 5
  %3727 = add i64 %3726, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %3728 = inttoptr i64 %3727 to i32*
  store i32 6, i32* %3728
  %3729 = inttoptr i64 %116 to i32*
  %3730 = load i32, i32* %3729
  %3731 = sext i32 %3730 to i64
  %3732 = shl nsw i64 %3731, 5
  store i64 %3732, i64* %5, align 8, !tbaa !1240
  %3733 = add i64 %3732, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %3734 = inttoptr i64 %3733 to i32*
  store i32 7, i32* %3734
  %3735 = add i64 %7249, 194
  br label %block_40ad1c

block_409322:                                     ; preds = %block_4092e8
  %3736 = mul nsw i64 %6282, 96
  %3737 = add i64 %3736, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %3738 = inttoptr i64 %3737 to i32*
  %3739 = load i32, i32* %3738
  %3740 = inttoptr i64 %116 to i32*
  %3741 = load i32, i32* %3740
  %3742 = sub i32 %3739, %3741
  %3743 = lshr i32 %3742, 31
  %3744 = lshr i32 %3739, 31
  %3745 = lshr i32 %3741, 31
  %3746 = xor i32 %3745, %3744
  %3747 = xor i32 %3743, %3744
  %3748 = add nuw nsw i32 %3747, %3746
  %3749 = icmp eq i32 %3748, 2
  %3750 = icmp ne i32 %3743, 0
  %3751 = xor i1 %3750, %3749
  %3752 = select i1 %3751, i64 33, i64 80
  %3753 = add i64 %6289, %3752
  br i1 %3751, label %block_409343, label %block_409372

block_40eeb7:                                     ; preds = %block_40eead
  %3754 = inttoptr i64 %1201 to i32*
  %3755 = load i32, i32* %3754
  %3756 = sext i32 %3755 to i64
  %3757 = mul nsw i64 %3756, 2400
  %3758 = add i64 %3757, ptrtoint (%idmo_type* @idmo to i64)
  %3759 = inttoptr i64 %1207 to i32*
  %3760 = load i32, i32* %3759
  %3761 = sext i32 %3760 to i64
  %3762 = mul nsw i64 %3761, 400
  store i64 %3762, i64* %5, align 8, !tbaa !1240
  %3763 = add i64 %3762, %3758
  %3764 = add i64 %3763, 24
  %3765 = inttoptr i64 %3764 to i32*
  %3766 = load i32, i32* %3765
  %3767 = add i32 %3766, 1
  %3768 = icmp eq i32 %3767, 0
  %3769 = select i1 %3768, i64 48, i64 291
  %3770 = add i64 %5620, %3769
  %3771 = load i64, i64* %10, align 8
  br i1 %3768, label %block_40eee7, label %block_40efda

block_409b21:                                     ; preds = %block_409a6f.block_409b21_crit_edge, %block_409aa8
  %3772 = phi i32 [ %4727, %block_409a6f.block_409b21_crit_edge ], [ %4301, %block_409aa8 ]
  %3773 = phi i64 [ %4725, %block_409a6f.block_409b21_crit_edge ], [ %4313, %block_409aa8 ]
  %3774 = sext i32 %3772 to i64
  %3775 = shl nsw i64 %3774, 2
  %3776 = add i64 %3775, ptrtoint (%newc_type* @newc to i64)
  %3777 = inttoptr i64 %3776 to i32*
  store i32 4, i32* %3777
  %3778 = inttoptr i64 %116 to i32*
  %3779 = load i32, i32* %3778
  %3780 = sext i32 %3779 to i64
  %3781 = shl nsw i64 %3780, 5
  %3782 = add i64 %3781, ptrtoint (%vassign_type* @vassign to i64)
  %3783 = inttoptr i64 %3782 to i32*
  store i32 4, i32* %3783
  %3784 = inttoptr i64 %116 to i32*
  %3785 = load i32, i32* %3784
  %3786 = sext i32 %3785 to i64
  %3787 = shl nsw i64 %3786, 5
  %3788 = add i64 %3787, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %3789 = inttoptr i64 %3788 to i32*
  store i32 5, i32* %3789
  %3790 = inttoptr i64 %116 to i32*
  %3791 = load i32, i32* %3790
  %3792 = sext i32 %3791 to i64
  %3793 = shl nsw i64 %3792, 5
  %3794 = add i64 %3793, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %3795 = inttoptr i64 %3794 to i32*
  store i32 6, i32* %3795
  %3796 = inttoptr i64 %116 to i32*
  %3797 = load i32, i32* %3796
  %3798 = sext i32 %3797 to i64
  %3799 = shl nsw i64 %3798, 5
  store i64 %3799, i64* %5, align 8, !tbaa !1240
  %3800 = add i64 %3799, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %3801 = add i64 %3773, 105
  %3802 = inttoptr i64 %3800 to i32*
  store i32 7, i32* %3802
  br label %block_409db1

block_408c8c:                                     ; preds = %block_408c53
  %3803 = inttoptr i64 %126 to i32*
  %3804 = load i32, i32* %3803
  %3805 = icmp ne i32 %3804, 0
  %3806 = select i1 %3805, i64 78, i64 10
  %3807 = add i64 %7061, %3806
  br i1 %3805, label %block_408ce4, label %block_408c96

block_40b320:                                     ; preds = %block_40b2d2
  %3808 = mul nsw i64 %4164, 96
  %3809 = add i64 %3808, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %3810 = inttoptr i64 %3809 to i32*
  %3811 = load i32, i32* %3810
  %3812 = inttoptr i64 %116 to i32*
  %3813 = load i32, i32* %3812
  %3814 = sub i32 %3811, %3813
  %3815 = lshr i32 %3814, 31
  %3816 = lshr i32 %3811, 31
  %3817 = lshr i32 %3813, 31
  %3818 = xor i32 %3817, %3816
  %3819 = xor i32 %3815, %3816
  %3820 = add nuw nsw i32 %3819, %3818
  %3821 = icmp eq i32 %3820, 2
  %3822 = icmp ne i32 %3815, 0
  %3823 = xor i1 %3822, %3821
  %3824 = select i1 %3823, i64 33, i64 754
  %3825 = add i64 %4171, %3824
  br i1 %3823, label %block_40b341, label %block_40b612

block_40cb6a:                                     ; preds = %block_40cb4a, %block_40cb11.block_40cb6a_crit_edge
  %3826 = phi i32 [ %3955, %block_40cb11.block_40cb6a_crit_edge ], [ %7731, %block_40cb4a ]
  %3827 = phi i64 [ %3953, %block_40cb11.block_40cb6a_crit_edge ], [ %7745, %block_40cb4a ]
  %3828 = sext i32 %3826 to i64
  %3829 = shl nsw i64 %3828, 2
  %3830 = add i64 %3829, ptrtoint (%newe_type* @newe to i64)
  %3831 = inttoptr i64 %3830 to i32*
  %3832 = load i32, i32* %3831
  %3833 = add i32 %3832, 1
  %3834 = inttoptr i64 %3830 to i32*
  store i32 %3833, i32* %3834
  %3835 = inttoptr i64 %4855 to i32*
  %3836 = load i32, i32* %3835
  %3837 = sext i32 %3836 to i64
  %3838 = mul nsw i64 %3837, 48
  %3839 = add i64 %3838, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 12)
  %3840 = inttoptr i64 %3839 to i32*
  store i32 1, i32* %3840
  %3841 = inttoptr i64 %4865 to i32*
  %3842 = load i32, i32* %3841
  %3843 = sext i32 %3842 to i64
  %3844 = mul nsw i64 %3843, 24
  %3845 = add i64 %3844, ptrtoint (%cbc_type* @cbc to i64)
  %3846 = inttoptr i64 %3845 to i32*
  %3847 = load i32, i32* %3846
  %3848 = icmp ne i32 %3847, 2
  %3849 = select i1 %3848, i64 244, i64 83
  %3850 = add i64 %3827, %3849
  br i1 %3848, label %block_40cc5e, label %block_40cbbd

block_40db1d:                                     ; preds = %block_40da93, %block_40dab2, %block_40dad3
  %3851 = phi i64 [ %4399, %block_40da93 ], [ %4289, %block_40dab2 ], [ %4144, %block_40dad3 ]
  %3852 = phi %struct.Memory* [ %4389, %block_40da93 ], [ %4389, %block_40dab2 ], [ %4389, %block_40dad3 ]
  %3853 = add i64 %3851, 5
  br label %block_40db22

block_40eb1a:                                     ; preds = %block_40ea86
  %3854 = load i64, i64* %10, align 8
  %3855 = add i64 %3854, -72
  store i64 %3855, i64* %5, align 8, !tbaa !1240
  %3856 = add i64 %3854, -8
  %3857 = inttoptr i64 %3856 to i32*
  %3858 = load i32, i32* %3857
  %3859 = sext i32 %3858 to i64
  %3860 = mul nsw i64 %3859, 96
  %3861 = add i64 %3860, ptrtoint (%sje_type* @sje to i64)
  %3862 = add i64 %3854, -20
  %3863 = inttoptr i64 %3862 to i32*
  %3864 = load i32, i32* %3863
  %3865 = sext i32 %3864 to i64
  %3866 = shl nsw i64 %3865, 4
  %3867 = add i64 %3866, %3861
  %3868 = inttoptr i64 %3867 to i32*
  %3869 = load i32, i32* %3868
  %3870 = load i64, i64* %10, align 8
  %3871 = add i64 %3870, -16
  %3872 = inttoptr i64 %3871 to i32*
  store i32 %3869, i32* %3872
  %3873 = add i64 %3870, -52
  %3874 = inttoptr i64 %3873 to i32*
  %3875 = load i32, i32* %3874
  %3876 = zext i32 %3875 to i64
  store i64 %3876, i64* %8, align 8, !tbaa !1240
  %3877 = add i64 %3870, -20
  %3878 = inttoptr i64 %3877 to i32*
  %3879 = load i32, i32* %3878
  %3880 = sext i32 %3879 to i64
  store i64 %3880, i64* %4, align 8, !tbaa !1240
  %3881 = shl nsw i64 %3880, 2
  %3882 = add i64 %3881, ptrtoint (%jjface_type* @jjface to i64)
  %3883 = inttoptr i64 %3882 to i32*
  %3884 = load i32, i32* %3883
  %3885 = zext i32 %3884 to i64
  store i64 %3885, i64* %7, align 8, !tbaa !1240
  %3886 = inttoptr i64 %3871 to i32*
  %3887 = load i32, i32* %3886
  %3888 = zext i32 %3887 to i64
  store i64 %3888, i64* %6, align 8, !tbaa !1240
  %3889 = add i64 %4628, 7638
  %3890 = add i64 %4628, 63
  %3891 = load i64, i64* %9, align 8, !tbaa !1240
  %3892 = add i64 %3891, -8
  %3893 = inttoptr i64 %3892 to i64*
  store i64 %3890, i64* %3893
  store i64 %3892, i64* %9, align 8, !tbaa !1240
  %3894 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %3889, %struct.Memory* %4608)
  %3895 = load i64, i64* %10, align 8
  %3896 = add i64 %3895, -72
  %3897 = load i64, i64* %3, align 8
  store i64 %3896, i64* %5, align 8, !tbaa !1240
  %3898 = add i64 %3895, -60
  %3899 = inttoptr i64 %3898 to i32*
  %3900 = load i32, i32* %3899
  %3901 = sext i32 %3900 to i64
  store i64 %3901, i64* %4, align 8, !tbaa !1240
  %3902 = shl nsw i64 %3901, 2
  %3903 = add i64 %3902, ptrtoint (%op_type* @op to i64)
  %3904 = inttoptr i64 %3903 to i32*
  %3905 = load i32, i32* %3904
  %3906 = zext i32 %3905 to i64
  store i64 %3906, i64* %8, align 8, !tbaa !1240
  %3907 = add i64 %3895, -44
  %3908 = inttoptr i64 %3907 to i32*
  %3909 = load i32, i32* %3908
  %3910 = zext i32 %3909 to i64
  store i64 %3910, i64* %7, align 8, !tbaa !1240
  %3911 = add i64 %3895, -16
  %3912 = inttoptr i64 %3911 to i32*
  %3913 = load i32, i32* %3912
  %3914 = zext i32 %3913 to i64
  store i64 %3914, i64* %6, align 8, !tbaa !1240
  %3915 = add i64 %3897, 7575
  %3916 = add i64 %3897, 26
  %3917 = load i64, i64* %9, align 8, !tbaa !1240
  %3918 = add i64 %3917, -8
  %3919 = inttoptr i64 %3918 to i64*
  store i64 %3916, i64* %3919
  store i64 %3918, i64* %9, align 8, !tbaa !1240
  %3920 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %3915, %struct.Memory* %3894)
  %3921 = load i64, i64* %3, align 8
  br label %block_40eb73

block_408b14:                                     ; preds = %block_408afc
  %3922 = icmp ne i32 %4082, 0
  %3923 = select i1 %3922, i64 24, i64 10
  %3924 = add i64 %6251, %3923
  br i1 %3922, label %block_408b2c, label %block_408b44.sink.split

block_40d394:                                     ; preds = %block_40d307
  %3925 = icmp ne i32 %3980, 1
  %3926 = select i1 %3925, i64 1954, i64 10
  %3927 = add i64 %3983, %3926
  br i1 %3925, label %block_40db3b, label %block_40d39e

block_40f083:                                     ; preds = %block_40f06b
  %3928 = add i64 %9080, -36
  %3929 = add i64 %9098, 7
  %3930 = inttoptr i64 %3928 to i32*
  store i32 0, i32* %3930
  %3931 = add i64 %9080, -40
  %3932 = add i64 %9080, -8
  %3933 = add i64 %9080, -16
  %3934 = add i64 %9080, -28
  %3935 = add i64 %9080, -24
  br label %block_40f08a

block_40cb11:                                     ; preds = %block_40cb07
  %3936 = inttoptr i64 %4855 to i32*
  %3937 = load i32, i32* %3936
  %3938 = sext i32 %3937 to i64
  %3939 = mul nsw i64 %3938, 96
  %3940 = add i64 %3939, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %3941 = inttoptr i64 %3940 to i32*
  %3942 = load i32, i32* %3941
  %3943 = inttoptr i64 %4865 to i32*
  store i32 %3942, i32* %3943
  %3944 = inttoptr i64 %4865 to i32*
  %3945 = load i32, i32* %3944
  %3946 = sext i32 %3945 to i64
  %3947 = mul nsw i64 %3946, 24
  %3948 = add i64 %3947, ptrtoint (%cbc_type* @cbc to i64)
  %3949 = inttoptr i64 %3948 to i32*
  %3950 = load i32, i32* %3949
  %3951 = icmp ne i32 %3950, 3
  %3952 = select i1 %3951, i64 89, i64 57
  %3953 = add i64 %1033, %3952
  br i1 %3951, label %block_40cb11.block_40cb6a_crit_edge, label %block_40cb4a

block_40cb11.block_40cb6a_crit_edge:              ; preds = %block_40cb11
  %3954 = inttoptr i64 %4855 to i32*
  %3955 = load i32, i32* %3954
  br label %block_40cb6a

block_40c50a:                                     ; preds = %block_40c4d0
  %3956 = inttoptr i64 %4855 to i32*
  %3957 = load i32, i32* %3956
  %3958 = sext i32 %3957 to i64
  %3959 = shl nsw i64 %3958, 2
  %3960 = add i64 %3959, ptrtoint (%newe_type* @newe to i64)
  %3961 = inttoptr i64 %3960 to i32*
  %3962 = load i32, i32* %3961
  %3963 = add i32 %3962, 1
  %3964 = inttoptr i64 %3960 to i32*
  store i32 %3963, i32* %3964
  %3965 = inttoptr i64 %4855 to i32*
  %3966 = load i32, i32* %3965
  %3967 = sext i32 %3966 to i64
  %3968 = mul nsw i64 %3967, 48
  %3969 = add i64 %3968, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 32)
  %3970 = add i64 %4076, 53
  %3971 = inttoptr i64 %3969 to i32*
  store i32 1, i32* %3971
  br label %block_40c5cf

block_408b2c:                                     ; preds = %block_408b14
  %3972 = icmp ne i32 %4082, 1
  %3973 = select i1 %3972, i64 19, i64 10
  %3974 = add i64 %3924, %3973
  br i1 %3972, label %block_408b44, label %block_408b44.sink.split

block_40d307:                                     ; preds = %block_40c8ed, %block_40c8f7, %block_40c931, %block_40d2fd
  %3975 = phi i64 [ %7613, %block_40c8ed ], [ %7472, %block_40c8f7 ], [ %6972, %block_40c931 ], [ %6222, %block_40d2fd ]
  %3976 = phi i64 [ 2523, %block_40c8ed ], [ 2523, %block_40c8f7 ], [ 5, %block_40c931 ], [ 5, %block_40d2fd ]
  %3977 = phi %struct.Memory* [ %7791, %block_40c8ed ], [ %7791, %block_40c8f7 ], [ %8803, %block_40c931 ], [ %6221, %block_40d2fd ]
  %3978 = add i64 %3975, %3976
  %3979 = inttoptr i64 %4860 to i32*
  %3980 = load i32, i32* %3979
  %3981 = icmp ne i32 %3980, 0
  %3982 = select i1 %3981, i64 141, i64 10
  %3983 = add i64 %3978, %3982
  br i1 %3981, label %block_40d394, label %block_40d311

block_40de9c:                                     ; preds = %block_40de7d
  %3984 = mul nsw i64 %1354, 96
  %3985 = inttoptr i64 %4855 to i32*
  %3986 = load i32, i32* %3985
  %3987 = sext i32 %3986 to i64
  %3988 = mul nsw i64 %3987, 48
  %3989 = add i64 %3988, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %3990 = inttoptr i64 %3989 to i32*
  %3991 = load i32, i32* %3990
  %3992 = sext i32 %3991 to i64
  %3993 = shl nsw i64 %3992, 2
  %3994 = add i64 %3984, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %3995 = add i64 %3994, %3993
  %3996 = inttoptr i64 %3995 to i32*
  %3997 = load i32, i32* %3996
  %3998 = mul nsw i64 %3987, 96
  %3999 = add i64 %3998, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 16)
  %4000 = add i64 %2116, 74
  %4001 = inttoptr i64 %3999 to i32*
  store i32 %3997, i32* %4001
  br label %block_40deeb

block_40b4d1:                                     ; preds = %block_40b4b2
  %4002 = mul nsw i64 %2120, 96
  %4003 = add i64 %4002, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %4004 = inttoptr i64 %4003 to i32*
  %4005 = load i32, i32* %4004
  %4006 = sub i32 %4005, %3813
  %4007 = lshr i32 %4006, 31
  %4008 = lshr i32 %4005, 31
  %4009 = xor i32 %3817, %4008
  %4010 = xor i32 %4007, %4008
  %4011 = add nuw nsw i32 %4010, %4009
  %4012 = icmp eq i32 %4011, 2
  %4013 = icmp ne i32 %4007, 0
  %4014 = xor i1 %4013, %4012
  %4015 = select i1 %4014, i64 33, i64 164
  %4016 = add i64 %2127, %4015
  br i1 %4014, label %block_40b4f2, label %block_40b575

block_408b06:                                     ; preds = %block_408afc, %block_408af2
  %4017 = phi i64 [ %6251, %block_408afc ], [ %4085, %block_408af2 ]
  %4018 = inttoptr i64 %122 to i32*
  %4019 = load i32, i32* %4018
  %4020 = add i32 %4019, 1
  %4021 = add i64 %4017, 9
  %4022 = inttoptr i64 %122 to i32*
  store i32 %4020, i32* %4022
  br label %block_408b49

block_408f70:                                     ; preds = %block_408f18
  %4023 = add i64 %7826, 10
  %4024 = inttoptr i64 %126 to i32*
  %4025 = load i32, i32* %4024
  %4026 = icmp ne i32 %4025, 1
  %4027 = select i1 %4026, i64 214, i64 10
  %4028 = add i64 %4023, %4027
  br i1 %4026, label %block_409046.thread, label %block_408f7a

block_409046.thread:                              ; preds = %block_408f70
  %4029 = add i64 %4028, 226
  br label %block_409128

block_40d2f3:                                     ; preds = %block_40d2ee, %block_40d14c
  %4030 = phi i64 [ %8101, %block_40d2ee ], [ %6781, %block_40d14c ]
  %4031 = phi %struct.Memory* [ %8100, %block_40d2ee ], [ %2269, %block_40d14c ]
  %4032 = add i64 %4030, 5
  br label %block_40d2fd

block_408e29:                                     ; preds = %block_408e08
  %4033 = sext i32 %2679 to i64
  %4034 = shl nsw i64 %4033, 2
  %4035 = add i64 %4034, ptrtoint (%newc_type* @newc to i64)
  %4036 = inttoptr i64 %4035 to i32*
  store i32 1, i32* %4036
  %4037 = inttoptr i64 %116 to i32*
  %4038 = load i32, i32* %4037
  %4039 = sext i32 %4038 to i64
  %4040 = shl nsw i64 %4039, 5
  store i64 %4040, i64* %5, align 8, !tbaa !1240
  %4041 = add i64 %4040, ptrtoint (%vassign_type* @vassign to i64)
  %4042 = inttoptr i64 %4041 to i32*
  store i32 7, i32* %4042
  %4043 = add i64 %2691, 110
  br label %block_408e97

block_40e4f6:                                     ; preds = %block_40e4bc
  %4044 = mul nsw i64 %2103, 96
  %4045 = inttoptr i64 %4855 to i32*
  %4046 = load i32, i32* %4045
  %4047 = sext i32 %4046 to i64
  %4048 = mul nsw i64 %4047, 48
  %4049 = add i64 %4048, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 20)
  %4050 = inttoptr i64 %4049 to i32*
  %4051 = load i32, i32* %4050
  %4052 = sext i32 %4051 to i64
  %4053 = shl nsw i64 %4052, 3
  %4054 = add i64 %4044, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %4055 = add i64 %4054, %4053
  %4056 = inttoptr i64 %4055 to i32*
  %4057 = load i32, i32* %4056
  %4058 = mul nsw i64 %4047, 96
  %4059 = add i64 %4058, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 72)
  %4060 = add i64 %2110, 74
  %4061 = inttoptr i64 %4059 to i32*
  store i32 %4057, i32* %4061
  br label %block_40e74f.sink.split

block_40c4d0:                                     ; preds = %block_40c4b1
  %4062 = mul nsw i64 %2130, 96
  %4063 = add i64 %4062, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %4064 = inttoptr i64 %4063 to i32*
  %4065 = load i32, i32* %4064
  %4066 = inttoptr i64 %4865 to i32*
  store i32 %4065, i32* %4066
  %4067 = inttoptr i64 %4865 to i32*
  %4068 = load i32, i32* %4067
  %4069 = sext i32 %4068 to i64
  %4070 = mul nsw i64 %4069, 24
  %4071 = add i64 %4070, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %4072 = inttoptr i64 %4071 to i32*
  %4073 = load i32, i32* %4072
  %4074 = icmp ne i32 %4073, 1
  %4075 = select i1 %4074, i64 116, i64 58
  %4076 = add i64 %2137, %4075
  br i1 %4074, label %block_40c544, label %block_40c50a

block_408af2:                                     ; preds = %block_408aaf, %block_408aed
  %4077 = phi i64 [ %4294, %block_408aaf ], [ %4097, %block_408aed ]
  %4078 = phi i64 [ 58, %block_408aaf ], [ 5, %block_408aed ]
  %4079 = phi %struct.Memory* [ %4340, %block_408aaf ], [ %4096, %block_408aed ]
  %4080 = add i64 %4077, %4078
  %4081 = inttoptr i64 %121 to i32*
  %4082 = load i32, i32* %4081
  %4083 = icmp eq i32 %4082, 2
  %4084 = select i1 %4083, i64 20, i64 10
  %4085 = add i64 %4080, %4084
  br i1 %4083, label %block_408b06, label %block_408afc

block_408aed.sink.split:                          ; preds = %block_408abd, %block_408ad5
  %4086 = phi i64 [ %4266, %block_408abd ], [ %4130, %block_408ad5 ]
  %4087 = phi i32 [ 2, %block_408abd ], [ 5, %block_408ad5 ]
  %4088 = phi i64 [ 29, %block_408abd ], [ 5, %block_408ad5 ]
  %4089 = inttoptr i64 %122 to i32*
  %4090 = load i32, i32* %4089
  %4091 = add i32 %4090, %4087
  %4092 = add i64 %4086, 9
  %4093 = inttoptr i64 %122 to i32*
  store i32 %4091, i32* %4093
  br label %block_408aed

block_408aed:                                     ; preds = %block_408ad5, %block_408aed.sink.split
  %4094 = phi i64 [ %4130, %block_408ad5 ], [ %4092, %block_408aed.sink.split ]
  %4095 = phi i64 [ 5, %block_408ad5 ], [ %4088, %block_408aed.sink.split ]
  %4096 = phi %struct.Memory* [ %4340, %block_408ad5 ], [ %4340, %block_408aed.sink.split ]
  %4097 = add i64 %4094, %4095
  br label %block_408af2

block_40ab26:                                     ; preds = %block_40aaed
  %4098 = mul nsw i64 %5945, 96
  %4099 = add i64 %4098, ptrtoint (%sje_type* @sje to i64)
  %4100 = inttoptr i64 %4099 to i32*
  %4101 = load i32, i32* %4100
  %4102 = inttoptr i64 %116 to i32*
  %4103 = load i32, i32* %4102
  %4104 = sub i32 %4101, %4103
  %4105 = lshr i32 %4104, 31
  %4106 = lshr i32 %4101, 31
  %4107 = lshr i32 %4103, 31
  %4108 = xor i32 %4107, %4106
  %4109 = xor i32 %4105, %4106
  %4110 = add nuw nsw i32 %4109, %4108
  %4111 = icmp eq i32 %4110, 2
  %4112 = icmp ne i32 %4105, 0
  %4113 = xor i1 %4112, %4111
  %4114 = select i1 %4113, i64 32, i64 236
  %4115 = add i64 %6188, %4114
  br i1 %4113, label %block_40ab46, label %block_40ac12

block_4092de:                                     ; preds = %block_4092d4
  %4116 = inttoptr i64 %126 to i32*
  %4117 = load i32, i32* %4116
  %4118 = icmp ne i32 %4117, 0
  %4119 = select i1 %4118, i64 216, i64 10
  %4120 = add i64 %9404, %4119
  br i1 %4118, label %block_4093b6, label %block_4092e8

block_40e2db:                                     ; preds = %block_40df94
  %4121 = icmp ne i32 %3692, 0
  %4122 = select i1 %4121, i64 141, i64 10
  %4123 = add i64 %4651, %4122
  br i1 %4121, label %block_40e372, label %block_40e2e5

block_40e2d6:                                     ; preds = %block_40e201, %block_40e144, %block_40e215, %block_40e2cc
  %4124 = phi i64 [ %5211, %block_40e215 ], [ %4222, %block_40e2cc ], [ %9322, %block_40e201 ], [ %6900, %block_40e144 ]
  %4125 = phi i64 [ 5, %block_40e215 ], [ 5, %block_40e2cc ], [ 208, %block_40e201 ], [ 208, %block_40e144 ]
  %4126 = phi %struct.Memory* [ %6835, %block_40e215 ], [ %4221, %block_40e2cc ], [ %9321, %block_40e201 ], [ %6835, %block_40e144 ]
  %4127 = add i64 %4124, %4125
  br label %block_40e372

block_408ad5:                                     ; preds = %block_408abd
  %4128 = icmp ne i32 %4343, 1
  %4129 = select i1 %4128, i64 19, i64 10
  %4130 = add i64 %4266, %4129
  br i1 %4128, label %block_408aed, label %block_408aed.sink.split

block_40dad3:                                     ; preds = %block_40dab2
  %4131 = sext i32 %4275 to i64
  %4132 = mul nsw i64 %4131, 48
  %4133 = add i64 %4132, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %4134 = inttoptr i64 %4133 to i32*
  %4135 = load i32, i32* %4134
  %4136 = sext i32 %4135 to i64
  %4137 = shl nsw i64 %4136, 3
  %4138 = add i64 %4270, add (i64 ptrtoint (%sje_type* @sje to i64), i64 68)
  %4139 = add i64 %4138, %4137
  %4140 = inttoptr i64 %4139 to i32*
  %4141 = load i32, i32* %4140
  %4142 = mul nsw i64 %4131, 96
  %4143 = add i64 %4142, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 48)
  %4144 = add i64 %4289, 74
  %4145 = inttoptr i64 %4143 to i32*
  store i32 %4141, i32* %4145
  br label %block_40db1d

block_40b2d2:                                     ; preds = %block_40b2c8
  %4146 = inttoptr i64 %116 to i32*
  %4147 = load i32, i32* %4146
  %4148 = sext i32 %4147 to i64
  %4149 = mul nsw i64 %4148, 96
  %4150 = add i64 %4149, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %4151 = inttoptr i64 %4150 to i32*
  %4152 = load i32, i32* %4151
  %4153 = inttoptr i64 %123 to i32*
  store i32 %4152, i32* %4153
  %4154 = inttoptr i64 %116 to i32*
  %4155 = load i32, i32* %4154
  %4156 = sext i32 %4155 to i64
  %4157 = mul nsw i64 %4156, 96
  %4158 = add i64 %4157, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %4159 = inttoptr i64 %4158 to i32*
  %4160 = load i32, i32* %4159
  %4161 = inttoptr i64 %124 to i32*
  store i32 %4160, i32* %4161
  %4162 = inttoptr i64 %123 to i32*
  %4163 = load i32, i32* %4162
  %4164 = sext i32 %4163 to i64
  %4165 = mul nsw i64 %4164, 24
  %4166 = add i64 %4165, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %4167 = inttoptr i64 %4166 to i32*
  %4168 = load i32, i32* %4167
  %4169 = icmp ne i32 %4168, 3
  %4170 = select i1 %4169, i64 832, i64 78
  %4171 = add i64 %8104, %4170
  br i1 %4169, label %block_40b612, label %block_40b320

block_40e32e:                                     ; preds = %block_40e324
  %4172 = inttoptr i64 %4855 to i32*
  %4173 = load i32, i32* %4172
  %4174 = sext i32 %4173 to i64
  %4175 = shl nsw i64 %4174, 2
  %4176 = add i64 %4175, ptrtoint (%newe_type* @newe to i64)
  %4177 = inttoptr i64 %4176 to i32*
  %4178 = load i32, i32* %4177
  %4179 = add i32 %4178, 1
  %4180 = inttoptr i64 %4176 to i32*
  store i32 %4179, i32* %4180
  %4181 = inttoptr i64 %4855 to i32*
  %4182 = load i32, i32* %4181
  %4183 = sext i32 %4182 to i64
  %4184 = mul nsw i64 %4183, 48
  %4185 = add i64 %4184, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 8)
  %4186 = add i64 %4734, 53
  %4187 = inttoptr i64 %4185 to i32*
  store i32 1, i32* %4187
  br label %block_40e363

block_40d31b:                                     ; preds = %block_40d311
  %4188 = inttoptr i64 %4855 to i32*
  %4189 = load i32, i32* %4188
  %4190 = sext i32 %4189 to i64
  %4191 = shl nsw i64 %4190, 2
  %4192 = add i64 %4191, ptrtoint (%newe_type* @newe to i64)
  %4193 = inttoptr i64 %4192 to i32*
  %4194 = load i32, i32* %4193
  %4195 = add i32 %4194, 1
  %4196 = inttoptr i64 %4192 to i32*
  store i32 %4195, i32* %4196
  %4197 = inttoptr i64 %4855 to i32*
  %4198 = load i32, i32* %4197
  %4199 = sext i32 %4198 to i64
  %4200 = mul nsw i64 %4199, 48
  %4201 = add i64 %4200, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 20)
  %4202 = add i64 %4739, 53
  %4203 = inttoptr i64 %4201 to i32*
  store i32 1, i32* %4203
  br label %block_40d350

block_40cacd:                                     ; preds = %block_40cac3
  %4204 = inttoptr i64 %4855 to i32*
  %4205 = load i32, i32* %4204
  %4206 = sext i32 %4205 to i64
  %4207 = shl nsw i64 %4206, 2
  %4208 = add i64 %4207, ptrtoint (%newe_type* @newe to i64)
  %4209 = inttoptr i64 %4208 to i32*
  %4210 = load i32, i32* %4209
  %4211 = add i32 %4210, 1
  %4212 = inttoptr i64 %4208 to i32*
  store i32 %4211, i32* %4212
  %4213 = inttoptr i64 %4855 to i32*
  %4214 = load i32, i32* %4213
  %4215 = sext i32 %4214 to i64
  %4216 = mul nsw i64 %4215, 48
  %4217 = add i64 %4216, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 12)
  %4218 = add i64 %6903, 53
  %4219 = inttoptr i64 %4217 to i32*
  store i32 1, i32* %4219
  br label %block_40ccfa

block_40e2cc:                                     ; preds = %block_40e21f, %block_40e2c7
  %4220 = phi i64 [ %8479, %block_40e21f ], [ %8155, %block_40e2c7 ]
  %4221 = phi %struct.Memory* [ %6835, %block_40e21f ], [ %8154, %block_40e2c7 ]
  %4222 = add i64 %4220, 5
  br label %block_40e2d6

block_40a2cb:                                     ; preds = %block_40a2ac
  %4223 = add i64 %7088, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %4224 = inttoptr i64 %4223 to i32*
  %4225 = load i32, i32* %4224
  %4226 = inttoptr i64 %123 to i32*
  store i32 %4225, i32* %4226
  %4227 = inttoptr i64 %123 to i32*
  %4228 = load i32, i32* %4227
  %4229 = sext i32 %4228 to i64
  %4230 = mul nsw i64 %4229, 24
  %4231 = add i64 %4230, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %4232 = inttoptr i64 %4231 to i32*
  %4233 = load i32, i32* %4232
  %4234 = icmp ne i32 %4233, 3
  %4235 = select i1 %4234, i64 180, i64 58
  %4236 = add i64 %7087, %4235
  br i1 %4234, label %block_40a2cb.block_40a37f_crit_edge, label %block_40a305

block_40a2cb.block_40a37f_crit_edge:              ; preds = %block_40a2cb
  %4237 = inttoptr i64 %116 to i32*
  %4238 = load i32, i32* %4237
  br label %block_40a37f

block_409c42:                                     ; preds = %block_409bdd, %block_409ba3.block_409c42_crit_edge
  %4239 = phi i32 [ %1176, %block_409ba3.block_409c42_crit_edge ], [ %4352, %block_409bdd ]
  %4240 = phi i64 [ %1174, %block_409ba3.block_409c42_crit_edge ], [ %4364, %block_409bdd ]
  %4241 = sext i32 %4239 to i64
  %4242 = shl nsw i64 %4241, 2
  %4243 = add i64 %4242, ptrtoint (%newc_type* @newc to i64)
  %4244 = inttoptr i64 %4243 to i32*
  store i32 3, i32* %4244
  %4245 = inttoptr i64 %116 to i32*
  %4246 = load i32, i32* %4245
  %4247 = sext i32 %4246 to i64
  %4248 = shl nsw i64 %4247, 5
  %4249 = add i64 %4248, ptrtoint (%vassign_type* @vassign to i64)
  %4250 = inttoptr i64 %4249 to i32*
  store i32 5, i32* %4250
  %4251 = inttoptr i64 %116 to i32*
  %4252 = load i32, i32* %4251
  %4253 = sext i32 %4252 to i64
  %4254 = shl nsw i64 %4253, 5
  %4255 = add i64 %4254, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %4256 = inttoptr i64 %4255 to i32*
  store i32 6, i32* %4256
  %4257 = inttoptr i64 %116 to i32*
  %4258 = load i32, i32* %4257
  %4259 = sext i32 %4258 to i64
  %4260 = shl nsw i64 %4259, 5
  store i64 %4260, i64* %5, align 8, !tbaa !1240
  %4261 = add i64 %4260, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %4262 = add i64 %4240, 84
  %4263 = inttoptr i64 %4261 to i32*
  store i32 7, i32* %4263
  br label %block_409dac

block_408abd:                                     ; preds = %block_408aa5
  %4264 = icmp ne i32 %4343, 0
  %4265 = select i1 %4264, i64 24, i64 10
  %4266 = add i64 %4316, %4265
  br i1 %4264, label %block_408ad5, label %block_408aed.sink.split

block_40b2b4:                                     ; preds = %block_40b174, %block_40b20c
  %4267 = phi i64 [ %5274, %block_40b20c ], [ %6367, %block_40b174 ]
  %4268 = phi %struct.Memory* [ %3633, %block_40b20c ], [ %3633, %block_40b174 ]
  %4269 = add i64 %4267, 5
  br label %block_40b2be

block_40dab2:                                     ; preds = %block_40da93
  %4270 = mul nsw i64 %4392, 96
  %4271 = add i64 %4270, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %4272 = inttoptr i64 %4271 to i32*
  %4273 = load i32, i32* %4272
  %4274 = inttoptr i64 %4855 to i32*
  %4275 = load i32, i32* %4274
  %4276 = sub i32 %4273, %4275
  %4277 = icmp eq i32 %4276, 0
  %4278 = lshr i32 %4276, 31
  %4279 = lshr i32 %4273, 31
  %4280 = lshr i32 %4275, 31
  %4281 = xor i32 %4280, %4279
  %4282 = xor i32 %4278, %4279
  %4283 = add nuw nsw i32 %4282, %4281
  %4284 = icmp eq i32 %4283, 2
  %4285 = icmp ne i32 %4278, 0
  %4286 = xor i1 %4285, %4284
  %4287 = or i1 %4277, %4286
  %4288 = select i1 %4287, i64 107, i64 33
  %4289 = add i64 %4399, %4288
  br i1 %4287, label %block_40db1d, label %block_40dad3

block_408aaf:                                     ; preds = %block_408a9b, %block_408aa5
  %4290 = phi i64 [ %4346, %block_408a9b ], [ %4316, %block_408aa5 ]
  %4291 = inttoptr i64 %122 to i32*
  %4292 = load i32, i32* %4291
  %4293 = add i32 %4292, 1
  %4294 = add i64 %4290, 9
  %4295 = inttoptr i64 %122 to i32*
  store i32 %4293, i32* %4295
  br label %block_408af2

block_409aa8:                                     ; preds = %block_409a6f
  %4296 = mul nsw i64 %4718, 96
  %4297 = add i64 %4296, ptrtoint (%sje_type* @sje to i64)
  %4298 = inttoptr i64 %4297 to i32*
  %4299 = load i32, i32* %4298
  %4300 = inttoptr i64 %116 to i32*
  %4301 = load i32, i32* %4300
  %4302 = sub i32 %4299, %4301
  %4303 = lshr i32 %4302, 31
  %4304 = lshr i32 %4299, 31
  %4305 = lshr i32 %4301, 31
  %4306 = xor i32 %4305, %4304
  %4307 = xor i32 %4303, %4304
  %4308 = add nuw nsw i32 %4307, %4306
  %4309 = icmp eq i32 %4308, 2
  %4310 = icmp ne i32 %4303, 0
  %4311 = xor i1 %4310, %4309
  %4312 = select i1 %4311, i64 32, i64 121
  %4313 = add i64 %4725, %4312
  br i1 %4311, label %block_409ac8, label %block_409b21

block_408aa5:                                     ; preds = %block_408a9b
  %4314 = icmp ne i32 %4343, 3
  %4315 = select i1 %4314, i64 24, i64 10
  %4316 = add i64 %4346, %4315
  br i1 %4314, label %block_408abd, label %block_408aaf

block_40df80:                                     ; preds = %block_40df33, %block_40df51
  %4317 = phi i64 [ %482, %block_40df33 ], [ %392, %block_40df51 ]
  %4318 = phi %struct.Memory* [ %1503, %block_40df33 ], [ %1503, %block_40df51 ]
  %4319 = add i64 %4317, 5
  br label %block_40df85

block_40d2a4:                                     ; preds = %block_40d283
  %4320 = sext i32 %4634 to i64
  %4321 = mul nsw i64 %4320, 48
  %4322 = add i64 %4321, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %4323 = inttoptr i64 %4322 to i32*
  %4324 = load i32, i32* %4323
  %4325 = sext i32 %4324 to i64
  %4326 = shl nsw i64 %4325, 2
  %4327 = add i64 %4629, add (i64 ptrtoint (%sje_type* @sje to i64), i64 40)
  %4328 = add i64 %4327, %4326
  %4329 = inttoptr i64 %4328 to i32*
  %4330 = load i32, i32* %4329
  %4331 = mul nsw i64 %4320, 96
  %4332 = add i64 %4331, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 56)
  %4333 = add i64 %4648, 74
  %4334 = inttoptr i64 %4332 to i32*
  store i32 %4330, i32* %4334
  br label %block_40d2ee

block_40a2a2:                                     ; preds = %block_40a298
  %4335 = icmp ne i32 %7090, 3
  %4336 = select i1 %4335, i64 886, i64 10
  %4337 = add i64 %7093, %4336
  br i1 %4335, label %block_40a618, label %block_40a2ac

block_408a9b:                                     ; preds = %block_408a58, %block_408a96
  %4338 = phi i64 [ %7210, %block_408a58 ], [ %4387, %block_408a96 ]
  %4339 = phi i64 [ 58, %block_408a58 ], [ 5, %block_408a96 ]
  %4340 = phi %struct.Memory* [ %5566, %block_408a58 ], [ %4386, %block_408a96 ]
  %4341 = add i64 %4338, %4339
  %4342 = inttoptr i64 %120 to i32*
  %4343 = load i32, i32* %4342
  %4344 = icmp eq i32 %4343, 2
  %4345 = select i1 %4344, i64 20, i64 10
  %4346 = add i64 %4341, %4345
  br i1 %4344, label %block_408aaf, label %block_408aa5

block_409bdd:                                     ; preds = %block_409ba3
  %4347 = mul nsw i64 %1167, 96
  %4348 = add i64 %4347, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %4349 = inttoptr i64 %4348 to i32*
  %4350 = load i32, i32* %4349
  %4351 = inttoptr i64 %116 to i32*
  %4352 = load i32, i32* %4351
  %4353 = sub i32 %4350, %4352
  %4354 = lshr i32 %4353, 31
  %4355 = lshr i32 %4350, 31
  %4356 = lshr i32 %4352, 31
  %4357 = xor i32 %4356, %4355
  %4358 = xor i32 %4354, %4355
  %4359 = add nuw nsw i32 %4358, %4357
  %4360 = icmp eq i32 %4359, 2
  %4361 = icmp ne i32 %4354, 0
  %4362 = xor i1 %4361, %4360
  %4363 = select i1 %4362, i64 33, i64 101
  %4364 = add i64 %1174, %4363
  br i1 %4362, label %block_409bfe, label %block_409c42

block_40e297:                                     ; preds = %block_40e25e
  %4365 = mul nsw i64 %4780, 96
  %4366 = add i64 %4365, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %4367 = inttoptr i64 %4366 to i32*
  %4368 = load i32, i32* %4367
  %4369 = inttoptr i64 %4855 to i32*
  %4370 = load i32, i32* %4369
  %4371 = sext i32 %4370 to i64
  %4372 = mul nsw i64 %4371, 96
  %4373 = add i64 %4372, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 16)
  %4374 = add i64 %4787, 48
  %4375 = inttoptr i64 %4373 to i32*
  store i32 %4368, i32* %4375
  br label %block_40e2c7

block_408a96.sink.split:                          ; preds = %block_408a66, %block_408a7e
  %4376 = phi i64 [ %4742, %block_408a66 ], [ %4667, %block_408a7e ]
  %4377 = phi i32 [ 2, %block_408a66 ], [ 5, %block_408a7e ]
  %4378 = phi i64 [ 29, %block_408a66 ], [ 5, %block_408a7e ]
  %4379 = inttoptr i64 %122 to i32*
  %4380 = load i32, i32* %4379
  %4381 = add i32 %4380, %4377
  %4382 = add i64 %4376, 9
  %4383 = inttoptr i64 %122 to i32*
  store i32 %4381, i32* %4383
  br label %block_408a96

block_408a96:                                     ; preds = %block_408a7e, %block_408a96.sink.split
  %4384 = phi i64 [ %4667, %block_408a7e ], [ %4382, %block_408a96.sink.split ]
  %4385 = phi i64 [ 5, %block_408a7e ], [ %4378, %block_408a96.sink.split ]
  %4386 = phi %struct.Memory* [ %5566, %block_408a7e ], [ %5566, %block_408a96.sink.split ]
  %4387 = add i64 %4384, %4385
  br label %block_408a9b

block_40da93:                                     ; preds = %block_40d99d, %block_40d9f1
  %4388 = phi i64 [ %6127, %block_40d99d ], [ %5515, %block_40d9f1 ]
  %4389 = phi %struct.Memory* [ %3071, %block_40d99d ], [ %3071, %block_40d9f1 ]
  %4390 = inttoptr i64 %4865 to i32*
  %4391 = load i32, i32* %4390
  %4392 = sext i32 %4391 to i64
  %4393 = mul nsw i64 %4392, 24
  %4394 = add i64 %4393, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %4395 = inttoptr i64 %4394 to i32*
  %4396 = load i32, i32* %4395
  %4397 = icmp ne i32 %4396, 3
  %4398 = select i1 %4397, i64 138, i64 31
  %4399 = add i64 %4388, %4398
  br i1 %4397, label %block_40db1d, label %block_40dab2

block_40e626:                                     ; preds = %block_40e554
  %4400 = icmp eq i32 %9252, 0
  %4401 = select i1 %4400, i64 20, i64 10
  %4402 = add i64 %9255, %4401
  br i1 %4400, label %block_40e63a, label %block_40e630

block_4095c7:                                     ; preds = %block_4095a2
  %4403 = shl nsw i64 %5673, 2
  %4404 = add i64 %4403, ptrtoint (%newc_type* @newc to i64)
  %4405 = inttoptr i64 %4404 to i32*
  store i32 4, i32* %4405
  %4406 = inttoptr i64 %116 to i32*
  %4407 = load i32, i32* %4406
  %4408 = sext i32 %4407 to i64
  %4409 = shl nsw i64 %4408, 5
  %4410 = add i64 %4409, ptrtoint (%vassign_type* @vassign to i64)
  %4411 = inttoptr i64 %4410 to i32*
  store i32 2, i32* %4411
  %4412 = inttoptr i64 %116 to i32*
  %4413 = load i32, i32* %4412
  %4414 = sext i32 %4413 to i64
  %4415 = shl nsw i64 %4414, 5
  %4416 = add i64 %4415, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %4417 = inttoptr i64 %4416 to i32*
  store i32 3, i32* %4417
  %4418 = inttoptr i64 %116 to i32*
  %4419 = load i32, i32* %4418
  %4420 = sext i32 %4419 to i64
  %4421 = shl nsw i64 %4420, 5
  %4422 = add i64 %4421, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %4423 = inttoptr i64 %4422 to i32*
  store i32 6, i32* %4423
  %4424 = inttoptr i64 %116 to i32*
  %4425 = load i32, i32* %4424
  %4426 = sext i32 %4425 to i64
  %4427 = shl nsw i64 %4426, 5
  store i64 %4427, i64* %5, align 8, !tbaa !1240
  %4428 = add i64 %4427, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %4429 = add i64 %5670, 105
  %4430 = inttoptr i64 %4428 to i32*
  store i32 7, i32* %4430
  br label %block_4098d3.sink.split

block_40e2ef:                                     ; preds = %block_40e2e5
  %4431 = inttoptr i64 %4855 to i32*
  %4432 = load i32, i32* %4431
  %4433 = sext i32 %4432 to i64
  %4434 = shl nsw i64 %4433, 2
  %4435 = add i64 %4434, ptrtoint (%newe_type* @newe to i64)
  %4436 = inttoptr i64 %4435 to i32*
  %4437 = load i32, i32* %4436
  %4438 = add i32 %4437, 1
  %4439 = inttoptr i64 %4435 to i32*
  store i32 %4438, i32* %4439
  %4440 = inttoptr i64 %4855 to i32*
  %4441 = load i32, i32* %4440
  %4442 = sext i32 %4441 to i64
  %4443 = mul nsw i64 %4442, 48
  %4444 = add i64 %4443, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 4)
  %4445 = add i64 %1136, 53
  %4446 = inttoptr i64 %4444 to i32*
  store i32 1, i32* %4446
  br label %block_40e324

block_409290:                                     ; preds = %block_409206.block_409290_crit_edge, %block_409240
  %4447 = phi i32 [ %5350, %block_409206.block_409290_crit_edge ], [ %5028, %block_409240 ]
  %4448 = phi i64 [ %5348, %block_409206.block_409290_crit_edge ], [ %5040, %block_409240 ]
  %4449 = sext i32 %4447 to i64
  %4450 = shl nsw i64 %4449, 2
  %4451 = add i64 %4450, ptrtoint (%newc_type* @newc to i64)
  %4452 = inttoptr i64 %4451 to i32*
  store i32 2, i32* %4452
  %4453 = inttoptr i64 %116 to i32*
  %4454 = load i32, i32* %4453
  %4455 = sext i32 %4454 to i64
  %4456 = shl nsw i64 %4455, 5
  %4457 = add i64 %4456, ptrtoint (%vassign_type* @vassign to i64)
  %4458 = inttoptr i64 %4457 to i32*
  store i32 6, i32* %4458
  %4459 = inttoptr i64 %116 to i32*
  %4460 = load i32, i32* %4459
  %4461 = sext i32 %4460 to i64
  %4462 = shl nsw i64 %4461, 5
  store i64 %4462, i64* %5, align 8, !tbaa !1240
  %4463 = add i64 %4462, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %4464 = add i64 %4448, 63
  %4465 = inttoptr i64 %4463 to i32*
  store i32 7, i32* %4465
  br label %block_4093e5

block_40a28e:                                     ; preds = %block_40957a
  %4466 = icmp ne i32 %3636, 11
  %4467 = select i1 %4466, i64 2707, i64 10
  %4468 = add i64 %1495, %4467
  br i1 %4466, label %block_40ad21, label %block_40a298

block_40df9e:                                     ; preds = %block_40df94
  %4469 = inttoptr i64 %4861 to i32*
  %4470 = load i32, i32* %4469
  %4471 = icmp ne i32 %4470, 2
  %4472 = select i1 %4471, i64 209, i64 10
  %4473 = add i64 %4651, %4472
  br i1 %4471, label %block_40e06f, label %block_40dfa8

block_409f52:                                     ; preds = %block_409f48
  %4474 = icmp eq i32 %1487, 2
  %4475 = select i1 %4474, i64 20, i64 10
  %4476 = add i64 %4656, %4475
  br i1 %4474, label %block_409f66, label %block_409f5c

block_40e74f.sink.split:                          ; preds = %block_40e740, %block_40e4f6, %block_40e6f2, %block_40e4bc, %block_40e6f7
  %4477 = phi i64 [ %3239, %block_40e6f2 ], [ %8011, %block_40e740 ], [ %630, %block_40e6f7 ], [ %4060, %block_40e4f6 ], [ %2110, %block_40e4bc ]
  %4478 = phi i64 [ 88, %block_40e6f2 ], [ 5, %block_40e740 ], [ 5, %block_40e6f7 ], [ 5, %block_40e4f6 ], [ 5, %block_40e4bc ]
  %4479 = phi %struct.Memory* [ %3238, %block_40e6f2 ], [ %8010, %block_40e740 ], [ %3704, %block_40e6f7 ], [ %2216, %block_40e4f6 ], [ %2216, %block_40e4bc ]
  %4480 = phi i64 [ 5, %block_40e6f2 ], [ 5, %block_40e740 ], [ 5, %block_40e6f7 ], [ 522, %block_40e4f6 ], [ 522, %block_40e4bc ]
  %4481 = add i64 %4477, %4478
  br label %block_40e74f

block_40e74f:                                     ; preds = %block_40e74f.sink.split, %block_40e49d
  %4482 = phi i64 [ %2226, %block_40e49d ], [ %4481, %block_40e74f.sink.split ]
  %4483 = phi i64 [ 522, %block_40e49d ], [ %4480, %block_40e74f.sink.split ]
  %4484 = phi %struct.Memory* [ %2216, %block_40e49d ], [ %4479, %block_40e74f.sink.split ]
  %4485 = add i64 %4482, %4483
  %4486 = inttoptr i64 %4864 to i32*
  %4487 = load i32, i32* %4486
  %4488 = icmp eq i32 %4487, 1
  %4489 = select i1 %4488, i64 20, i64 10
  %4490 = add i64 %4485, %4489
  br i1 %4488, label %block_40e763, label %block_40e759

block_40cd97:                                     ; preds = %block_40cd5d
  %4491 = mul nsw i64 %5524, 96
  %4492 = add i64 %4491, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %4493 = inttoptr i64 %4492 to i32*
  %4494 = load i32, i32* %4493
  %4495 = inttoptr i64 %4855 to i32*
  %4496 = load i32, i32* %4495
  %4497 = sub i32 %4494, %4496
  %4498 = icmp eq i32 %4497, 0
  %4499 = lshr i32 %4497, 31
  %4500 = lshr i32 %4494, 31
  %4501 = lshr i32 %4496, 31
  %4502 = xor i32 %4501, %4500
  %4503 = xor i32 %4499, %4500
  %4504 = add nuw nsw i32 %4503, %4502
  %4505 = icmp eq i32 %4504, 2
  %4506 = icmp ne i32 %4499, 0
  %4507 = xor i1 %4506, %4505
  %4508 = or i1 %4498, %4507
  %4509 = select i1 %4508, i64 229, i64 33
  %4510 = add i64 %5531, %4509
  br i1 %4508, label %block_40d0c4, label %block_40cdb8

block_40d0ce:                                     ; preds = %block_40d0c4
  %4511 = inttoptr i64 %4855 to i32*
  %4512 = load i32, i32* %4511
  %4513 = sext i32 %4512 to i64
  %4514 = shl nsw i64 %4513, 2
  %4515 = add i64 %4514, ptrtoint (%newe_type* @newe to i64)
  %4516 = inttoptr i64 %4515 to i32*
  %4517 = load i32, i32* %4516
  %4518 = add i32 %4517, 1
  %4519 = inttoptr i64 %4515 to i32*
  store i32 %4518, i32* %4519
  %4520 = inttoptr i64 %4855 to i32*
  %4521 = load i32, i32* %4520
  %4522 = sext i32 %4521 to i64
  %4523 = mul nsw i64 %4522, 48
  %4524 = add i64 %4523, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 28)
  %4525 = add i64 %2277, 53
  %4526 = inttoptr i64 %4524 to i32*
  store i32 1, i32* %4526
  br label %block_40d2fd

block_40ea86:                                     ; preds = %block_40ea44
  %4527 = add i64 %1383, -4
  store i64 %4527, i64* %7, align 8, !tbaa !1240
  %4528 = add i64 %1383, -72
  store i64 %4528, i64* %8, align 8, !tbaa !1240
  %4529 = add i64 %1394, 7706
  %4530 = add i64 %1394, 13
  %4531 = load i64, i64* %9, align 8, !tbaa !1240
  %4532 = add i64 %4531, -8
  %4533 = inttoptr i64 %4532 to i64*
  store i64 %4530, i64* %4533
  store i64 %4532, i64* %9, align 8, !tbaa !1240
  %4534 = tail call %struct.Memory* @sub_4108a0_mor_assign(%struct.State* nonnull %0, i64 %4529, %struct.Memory* %5048)
  %4535 = load i64, i64* %10, align 8
  %4536 = add i64 %4535, -72
  %4537 = load i64, i64* %3, align 8
  store i64 %4536, i64* %5, align 8, !tbaa !1240
  %4538 = add i64 %4535, -52
  %4539 = inttoptr i64 %4538 to i32*
  %4540 = load i32, i32* %4539
  %4541 = zext i32 %4540 to i64
  store i64 %4541, i64* %8, align 8, !tbaa !1240
  %4542 = add i64 %4535, -20
  %4543 = inttoptr i64 %4542 to i32*
  %4544 = load i32, i32* %4543
  %4545 = zext i32 %4544 to i64
  store i64 %4545, i64* %7, align 8, !tbaa !1240
  %4546 = add i64 %4535, -8
  %4547 = inttoptr i64 %4546 to i32*
  %4548 = load i32, i32* %4547
  %4549 = zext i32 %4548 to i64
  store i64 %4549, i64* %6, align 8, !tbaa !1240
  %4550 = add i64 %4537, 7773
  %4551 = add i64 %4537, 18
  %4552 = load i64, i64* %9, align 8, !tbaa !1240
  %4553 = add i64 %4552, -8
  %4554 = inttoptr i64 %4553 to i64*
  store i64 %4551, i64* %4554
  store i64 %4553, i64* %9, align 8, !tbaa !1240
  %4555 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %4550, %struct.Memory* %4534)
  %4556 = load i64, i64* %10, align 8
  %4557 = add i64 %4556, -72
  %4558 = load i64, i64* %3, align 8
  store i64 %4557, i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%localedgenumber_type* @localedgenumber to i64), i64* %4, align 8, !tbaa !1240
  %4559 = add i64 %4556, -20
  %4560 = inttoptr i64 %4559 to i32*
  %4561 = load i32, i32* %4560
  %4562 = sext i32 %4561 to i64
  %4563 = shl nsw i64 %4562, 4
  %4564 = add i64 %4563, ptrtoint (%f_e_ef_type* @f_e_ef to i64)
  %4565 = add i64 %4556, -52
  %4566 = inttoptr i64 %4565 to i32*
  %4567 = load i32, i32* %4566
  %4568 = sext i32 %4567 to i64
  store i64 %4568, i64* %6292, align 8, !tbaa !1240
  %4569 = shl nsw i64 %4568, 2
  %4570 = add i64 %4569, %4564
  %4571 = inttoptr i64 %4570 to i32*
  %4572 = load i32, i32* %4571
  %4573 = add i64 %4556, -44
  %4574 = inttoptr i64 %4573 to i32*
  store i32 %4572, i32* %4574
  %4575 = add i64 %4556, -56
  %4576 = inttoptr i64 %4575 to i32*
  %4577 = load i32, i32* %4576
  %4578 = sext i32 %4577 to i64
  %4579 = mul nsw i64 %4578, 24
  %4580 = load i64, i64* %4, align 8
  %4581 = add i64 %4579, %4580
  store i64 %4581, i64* %4, align 8, !tbaa !1240
  %4582 = load i64, i64* %10, align 8
  %4583 = add i64 %4582, -44
  %4584 = inttoptr i64 %4583 to i32*
  %4585 = load i32, i32* %4584
  %4586 = sext i32 %4585 to i64
  store i64 %4586, i64* %11, align 8, !tbaa !1240
  %4587 = shl nsw i64 %4586, 2
  %4588 = add i64 %4587, %4581
  %4589 = inttoptr i64 %4588 to i32*
  %4590 = load i32, i32* %4589
  %4591 = add i64 %4582, -60
  %4592 = inttoptr i64 %4591 to i32*
  store i32 %4590, i32* %4592
  %4593 = inttoptr i64 %4591 to i32*
  %4594 = load i32, i32* %4593
  %4595 = zext i32 %4594 to i64
  store i64 %4595, i64* %8, align 8, !tbaa !1240
  %4596 = inttoptr i64 %4583 to i32*
  %4597 = load i32, i32* %4596
  %4598 = zext i32 %4597 to i64
  store i64 %4598, i64* %7, align 8, !tbaa !1240
  %4599 = add i64 %4582, -8
  %4600 = inttoptr i64 %4599 to i32*
  %4601 = load i32, i32* %4600
  %4602 = zext i32 %4601 to i64
  store i64 %4602, i64* %6, align 8, !tbaa !1240
  %4603 = add i64 %4558, 7755
  %4604 = add i64 %4558, 82
  %4605 = load i64, i64* %9, align 8, !tbaa !1240
  %4606 = add i64 %4605, -8
  %4607 = inttoptr i64 %4606 to i64*
  store i64 %4604, i64* %4607
  store i64 %4606, i64* %9, align 8, !tbaa !1240
  %4608 = tail call %struct.Memory* @sub_4108f0_mor_edge(%struct.State* nonnull %0, i64 %4603, %struct.Memory* %4555)
  %4609 = load i64, i64* %3, align 8
  %4610 = load i64, i64* %10, align 8
  %4611 = add i64 %4610, -8
  %4612 = inttoptr i64 %4611 to i32*
  %4613 = load i32, i32* %4612
  %4614 = sext i32 %4613 to i64
  %4615 = mul nsw i64 %4614, 24
  %4616 = add i64 %4615, ptrtoint (%cbc_type* @cbc to i64)
  %4617 = add i64 %4610, -20
  %4618 = inttoptr i64 %4617 to i32*
  %4619 = load i32, i32* %4618
  %4620 = sext i32 %4619 to i64
  %4621 = shl nsw i64 %4620, 2
  %4622 = add i64 %4621, %4616
  %4623 = inttoptr i64 %4622 to i32*
  %4624 = load i32, i32* %4623
  %4625 = add i32 %4624, -2
  %4626 = icmp eq i32 %4625, 0
  %4627 = select i1 %4626, i64 35, i64 124
  %4628 = add i64 %4609, %4627
  br i1 %4626, label %block_40eb1a, label %block_40eb73

block_40d283:                                     ; preds = %block_40d264
  %4629 = mul nsw i64 %6459, 96
  %4630 = add i64 %4629, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %4631 = inttoptr i64 %4630 to i32*
  %4632 = load i32, i32* %4631
  %4633 = inttoptr i64 %4855 to i32*
  %4634 = load i32, i32* %4633
  %4635 = sub i32 %4632, %4634
  %4636 = icmp eq i32 %4635, 0
  %4637 = lshr i32 %4635, 31
  %4638 = lshr i32 %4632, 31
  %4639 = lshr i32 %4634, 31
  %4640 = xor i32 %4639, %4638
  %4641 = xor i32 %4637, %4638
  %4642 = add nuw nsw i32 %4641, %4640
  %4643 = icmp eq i32 %4642, 2
  %4644 = icmp ne i32 %4637, 0
  %4645 = xor i1 %4644, %4643
  %4646 = or i1 %4636, %4645
  %4647 = select i1 %4646, i64 107, i64 33
  %4648 = add i64 %6466, %4647
  br i1 %4646, label %block_40d2ee, label %block_40d2a4

block_40df94:                                     ; preds = %block_40db3b
  %4649 = icmp ne i32 %3692, 2
  %4650 = select i1 %4649, i64 839, i64 10
  %4651 = add i64 %3695, %4650
  br i1 %4649, label %block_40e2db, label %block_40df9e

block_409f48:                                     ; preds = %block_4098d8
  %4652 = inttoptr i64 %121 to i32*
  %4653 = load i32, i32* %4652
  %4654 = icmp ne i32 %4653, 1
  %4655 = select i1 %4654, i64 823, i64 10
  %4656 = add i64 %7816, %4655
  br i1 %4654, label %block_40b955, label %block_409f52

block_40a76d:                                     ; preds = %block_40a62c
  %4657 = add i64 %954, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %4658 = inttoptr i64 %4657 to i32*
  %4659 = load i32, i32* %4658
  %4660 = icmp ne i32 %4659, 3
  %4661 = select i1 %4660, i64 297, i64 58
  %4662 = add i64 %945, %4661
  br i1 %4660, label %block_40a76d.block_40a896_crit_edge, label %block_40a7a7

block_40a76d.block_40a896_crit_edge:              ; preds = %block_40a76d
  %4663 = inttoptr i64 %116 to i32*
  %4664 = load i32, i32* %4663
  br label %block_40a896

block_408a7e:                                     ; preds = %block_408a66
  %4665 = icmp ne i32 %5400, 1
  %4666 = select i1 %4665, i64 19, i64 10
  %4667 = add i64 %4742, %4666
  br i1 %4665, label %block_408a96, label %block_408a96.sink.split

block_409f43:                                     ; preds = %block_409994, %block_409dda, %block_409ea1, %block_4099ed, %block_409ee5, %block_409db1
  %4668 = phi i64 [ %5870, %block_409dda ], [ %1292, %block_409db1 ], [ %6182, %block_409994 ], [ %5563, %block_4099ed ], [ %5599, %block_409ea1 ], [ %5182, %block_409ee5 ]
  %4669 = phi i64 [ 251, %block_409dda ], [ 5, %block_409db1 ], [ 864, %block_409994 ], [ 864, %block_4099ed ], [ 5, %block_409ea1 ], [ 5, %block_409ee5 ]
  %4670 = phi %struct.Memory* [ %3633, %block_409dda ], [ %1291, %block_409db1 ], [ %3633, %block_409994 ], [ %3633, %block_4099ed ], [ %3633, %block_409ea1 ], [ %3633, %block_409ee5 ]
  %4671 = phi i64 [ 5, %block_409dda ], [ 397, %block_409db1 ], [ 397, %block_409994 ], [ 397, %block_4099ed ], [ 5, %block_409ea1 ], [ 5, %block_409ee5 ]
  %4672 = add nuw nsw i64 %4671, %4669
  %4673 = add i64 %4672, %4668
  br label %block_40b955

block_40a27a:                                     ; preds = %block_40a10f, %block_40a04e, %block_40a092, %block_40a1d8, %block_40a21c, %block_409f85
  %4674 = phi i64 [ %9360, %block_40a10f ], [ %5616, %block_40a1d8 ], [ %5207, %block_40a21c ], [ %1811, %block_409f85 ], [ %8996, %block_40a04e ], [ %8362, %block_40a092 ]
  %4675 = phi i64 [ 258, %block_40a10f ], [ 10, %block_40a1d8 ], [ 10, %block_40a21c ], [ 258, %block_409f85 ], [ 10, %block_40a04e ], [ 10, %block_40a092 ]
  %4676 = phi %struct.Memory* [ %3633, %block_40a10f ], [ %3633, %block_40a1d8 ], [ %3633, %block_40a21c ], [ %3633, %block_409f85 ], [ %3633, %block_40a04e ], [ %3633, %block_40a092 ]
  %4677 = phi i64 [ 5, %block_40a10f ], [ 5, %block_40a1d8 ], [ 5, %block_40a21c ], [ 399, %block_409f85 ], [ 399, %block_40a04e ], [ 399, %block_40a092 ]
  %4678 = add nuw nsw i64 %4675, %4677
  %4679 = add i64 %4678, %4674
  br label %block_40b955

block_40df85:                                     ; preds = %block_40df80, %block_40defa
  %4680 = phi i64 [ %689, %block_40defa ], [ %4319, %block_40df80 ]
  %4681 = phi %struct.Memory* [ %1503, %block_40defa ], [ %4318, %block_40df80 ]
  %4682 = add i64 %4680, 5
  br label %block_40e372

block_40bf5f:                                     ; preds = %block_40bf26
  %4683 = mul nsw i64 %521, 96
  %4684 = add i64 %4683, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %4685 = inttoptr i64 %4684 to i32*
  %4686 = load i32, i32* %4685
  %4687 = inttoptr i64 %4855 to i32*
  %4688 = load i32, i32* %4687
  %4689 = sub i32 %4686, %4688
  %4690 = icmp eq i32 %4689, 0
  %4691 = lshr i32 %4689, 31
  %4692 = lshr i32 %4686, 31
  %4693 = lshr i32 %4688, 31
  %4694 = xor i32 %4693, %4692
  %4695 = xor i32 %4691, %4692
  %4696 = add nuw nsw i32 %4695, %4694
  %4697 = icmp eq i32 %4696, 2
  %4698 = icmp ne i32 %4691, 0
  %4699 = xor i1 %4698, %4697
  %4700 = or i1 %4690, %4699
  %4701 = select i1 %4700, i64 419, i64 33
  %4702 = add i64 %528, %4701
  br i1 %4700, label %block_40c26e, label %block_40bf80

block_408bef:                                     ; preds = %block_408bc5
  %4703 = inttoptr i64 %121 to i32*
  %4704 = load i32, i32* %4703
  %4705 = icmp ne i32 %4704, 0
  %4706 = select i1 %4705, i64 37, i64 10
  %4707 = add i64 %3164, %4706
  br i1 %4705, label %block_408c19, label %block_408c19.sink.split

block_409a6f:                                     ; preds = %block_409a65
  %4708 = inttoptr i64 %116 to i32*
  %4709 = load i32, i32* %4708
  %4710 = sext i32 %4709 to i64
  %4711 = mul nsw i64 %4710, 96
  %4712 = add i64 %4711, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %4713 = inttoptr i64 %4712 to i32*
  %4714 = load i32, i32* %4713
  %4715 = inttoptr i64 %123 to i32*
  store i32 %4714, i32* %4715
  %4716 = inttoptr i64 %123 to i32*
  %4717 = load i32, i32* %4716
  %4718 = sext i32 %4717 to i64
  %4719 = mul nsw i64 %4718, 24
  %4720 = add i64 %4719, ptrtoint (%cbc_type* @cbc to i64)
  %4721 = inttoptr i64 %4720 to i32*
  %4722 = load i32, i32* %4721
  %4723 = icmp ne i32 %4722, 3
  %4724 = select i1 %4723, i64 178, i64 57
  %4725 = add i64 %4748, %4724
  br i1 %4723, label %block_409a6f.block_409b21_crit_edge, label %block_409aa8

block_409a6f.block_409b21_crit_edge:              ; preds = %block_409a6f
  %4726 = inttoptr i64 %116 to i32*
  %4727 = load i32, i32* %4726
  br label %block_409b21

block_40e324:                                     ; preds = %block_40e2ef, %block_40e2e5
  %4728 = phi i64 [ %1136, %block_40e2e5 ], [ %4445, %block_40e2ef ]
  %4729 = phi %struct.Memory* [ %3689, %block_40e2e5 ], [ %3689, %block_40e2ef ]
  %4730 = inttoptr i64 %4863 to i32*
  %4731 = load i32, i32* %4730
  %4732 = icmp eq i32 %4731, 3
  %4733 = select i1 %4732, i64 63, i64 10
  %4734 = add i64 %4728, %4733
  br i1 %4732, label %block_40e363, label %block_40e32e

block_40d311:                                     ; preds = %block_40d307
  %4735 = inttoptr i64 %4861 to i32*
  %4736 = load i32, i32* %4735
  %4737 = icmp eq i32 %4736, 3
  %4738 = select i1 %4737, i64 63, i64 10
  %4739 = add i64 %3983, %4738
  br i1 %4737, label %block_40d350, label %block_40d31b

block_408a66:                                     ; preds = %block_408a4e
  %4740 = icmp ne i32 %5400, 0
  %4741 = select i1 %4740, i64 24, i64 10
  %4742 = add i64 %7272, %4741
  br i1 %4740, label %block_408a7e, label %block_408a96.sink.split

block_409a65:                                     ; preds = %block_40992f
  %4743 = add i64 %7073, 10
  %4744 = inttoptr i64 %126 to i32*
  %4745 = load i32, i32* %4744
  %4746 = icmp ne i32 %4745, 1
  %4747 = select i1 %4746, i64 298, i64 10
  %4748 = add i64 %4743, %4747
  br i1 %4746, label %block_409b8f.thread, label %block_409a6f

block_409b8f.thread:                              ; preds = %block_409a65
  %4749 = add i64 %4748, 268
  br label %block_409c9b.thread

block_40d8e5:                                     ; preds = %block_40d87a, %block_40d89b, %block_40d826
  %4750 = phi i64 [ %7770, %block_40d826 ], [ %8499, %block_40d87a ], [ %8265, %block_40d89b ]
  %4751 = phi %struct.Memory* [ %3071, %block_40d826 ], [ %3071, %block_40d87a ], [ %3071, %block_40d89b ]
  %4752 = add i64 %4750, 5
  br label %block_40db31

block_40c264:                                     ; preds = %block_40c22b, %block_40c230
  %4753 = phi i64 [ %5135, %block_40c230 ], [ %5436, %block_40c22b ]
  %4754 = phi %struct.Memory* [ %660, %block_40c230 ], [ %5435, %block_40c22b ]
  %4755 = add i64 %4753, 5
  br label %block_40c26e

block_409598:                                     ; preds = %block_40958e
  %4756 = icmp ne i32 %1492, 3
  %4757 = select i1 %4756, i64 410, i64 10
  %4758 = add i64 %1417, %4757
  br i1 %4756, label %block_409732, label %block_4095a2

block_409261:                                     ; preds = %block_409240
  %4759 = sext i32 %5028 to i64
  %4760 = shl nsw i64 %4759, 2
  %4761 = add i64 %4760, ptrtoint (%newc_type* @newc to i64)
  %4762 = inttoptr i64 %4761 to i32*
  store i32 1, i32* %4762
  %4763 = inttoptr i64 %116 to i32*
  %4764 = load i32, i32* %4763
  %4765 = sext i32 %4764 to i64
  %4766 = shl nsw i64 %4765, 5
  store i64 %4766, i64* %5, align 8, !tbaa !1240
  %4767 = add i64 %4766, ptrtoint (%vassign_type* @vassign to i64)
  %4768 = inttoptr i64 %4767 to i32*
  store i32 7, i32* %4768
  %4769 = add i64 %5040, 110
  br label %block_4093e5

block_40e25e:                                     ; preds = %block_40e21f
  %4770 = inttoptr i64 %4855 to i32*
  %4771 = load i32, i32* %4770
  %4772 = sext i32 %4771 to i64
  %4773 = mul nsw i64 %4772, 96
  %4774 = add i64 %4773, ptrtoint (%sje_type* @sje to i64)
  %4775 = inttoptr i64 %4774 to i32*
  %4776 = load i32, i32* %4775
  %4777 = inttoptr i64 %4865 to i32*
  store i32 %4776, i32* %4777
  %4778 = inttoptr i64 %4865 to i32*
  %4779 = load i32, i32* %4778
  %4780 = sext i32 %4779 to i64
  %4781 = mul nsw i64 %4780, 24
  %4782 = add i64 %4781, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %4783 = inttoptr i64 %4782 to i32*
  %4784 = load i32, i32* %4783
  %4785 = icmp ne i32 %4784, 2
  %4786 = select i1 %4785, i64 105, i64 57
  %4787 = add i64 %8479, %4786
  br i1 %4785, label %block_40e2c7, label %block_40e297

block_40e759:                                     ; preds = %block_40e74f
  %4788 = icmp ne i32 %4487, 0
  %4789 = select i1 %4788, i64 63, i64 10
  %4790 = add i64 %4490, %4789
  br i1 %4788, label %block_40e798, label %block_40e763

block_40ca6a:                                     ; preds = %block_40ca4a
  %4791 = sext i32 %4944 to i64
  %4792 = mul nsw i64 %4791, 48
  %4793 = add i64 %4792, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %4794 = inttoptr i64 %4793 to i32*
  %4795 = load i32, i32* %4794
  %4796 = sext i32 %4795 to i64
  %4797 = shl nsw i64 %4796, 2
  %4798 = add i64 %4939, add (i64 ptrtoint (%sje_type* @sje to i64), i64 8)
  %4799 = add i64 %4798, %4797
  %4800 = inttoptr i64 %4799 to i32*
  %4801 = load i32, i32* %4800
  %4802 = mul nsw i64 %4791, 96
  %4803 = add i64 %4802, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 24)
  %4804 = add i64 %4958, 74
  %4805 = inttoptr i64 %4803 to i32*
  store i32 %4801, i32* %4805
  br label %block_40cab4

block_40ba57:                                     ; preds = %block_40b9b2
  store i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64* %8, align 8, !tbaa !1240
  store i64 0, i64* %6, align 8, !tbaa !1240
  %4806 = add i64 %5808, -4
  %4807 = inttoptr i64 %4806 to i32*
  %4808 = load i32, i32* %4807
  %4809 = add i32 %4808, 1
  store i32 %4809, i32* bitcast (%nvertex_type* @nvertex to i32*)
  %4810 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %4811 = sext i32 %4810 to i64
  %4812 = mul nsw i64 %4811, 12
  %4813 = add i64 %5808, -120
  %4814 = trunc i64 %4812 to i32
  %4815 = inttoptr i64 %4813 to i32*
  store i32 %4814, i32* %4815
  %4816 = inttoptr i64 %4813 to i32*
  %4817 = load i32, i32* %4816
  %4818 = zext i32 %4817 to i64
  store i64 %4818, i64* %7, align 8, !tbaa !1240
  %4819 = add i64 %5826, 81545
  %4820 = add i64 %5826, 44
  %4821 = load i64, i64* %9, align 8, !tbaa !1240
  %4822 = add i64 %4821, -8
  %4823 = inttoptr i64 %4822 to i64*
  store i64 %4820, i64* %4823
  store i64 %4822, i64* %9, align 8, !tbaa !1240
  %4824 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %4819, %struct.Memory* %5809)
  %4825 = load i64, i64* %3, align 8
  store i64 ptrtoint (%eassign_type* @eassign to i64), i64* %8, align 8, !tbaa !1240
  store i64 0, i64* %6, align 8, !tbaa !1240
  %4826 = load i64, i64* %10, align 8
  %4827 = add i64 %4826, -120
  %4828 = inttoptr i64 %4827 to i32*
  %4829 = load i32, i32* %4828
  %4830 = zext i32 %4829 to i64
  store i64 %4830, i64* %7, align 8, !tbaa !1240
  %4831 = add i64 %4825, 81501
  %4832 = add i64 %4825, 20
  %4833 = load i64, i64* %9, align 8, !tbaa !1240
  %4834 = add i64 %4833, -8
  %4835 = inttoptr i64 %4834 to i64*
  store i64 %4832, i64* %4835
  store i64 %4834, i64* %9, align 8, !tbaa !1240
  %4836 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %4831, %struct.Memory* %4824)
  %4837 = load i64, i64* %3, align 8
  store i64 ptrtoint (%fassign_type* @fassign to i64), i64* %8, align 8, !tbaa !1240
  store i64 0, i64* %6, align 8, !tbaa !1240
  %4838 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %4839 = sext i32 %4838 to i64
  %4840 = mul nsw i64 %4839, 6
  %4841 = load i64, i64* %10, align 8
  %4842 = add i64 %4841, -124
  %4843 = trunc i64 %4840 to i32
  %4844 = inttoptr i64 %4842 to i32*
  store i32 %4843, i32* %4844
  %4845 = inttoptr i64 %4842 to i32*
  %4846 = load i32, i32* %4845
  %4847 = zext i32 %4846 to i64
  store i64 %4847, i64* %7, align 8, !tbaa !1240
  %4848 = add i64 %4837, 81481
  %4849 = add i64 %4837, 31
  %4850 = load i64, i64* %9, align 8, !tbaa !1240
  %4851 = add i64 %4850, -8
  %4852 = inttoptr i64 %4851 to i64*
  store i64 %4849, i64* %4852
  store i64 %4851, i64* %9, align 8, !tbaa !1240
  %4853 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %4848, %struct.Memory* %4836)
  %4854 = load i64, i64* %10, align 8
  %4855 = add i64 %4854, -8
  %4856 = load i64, i64* %3, align 8
  %4857 = add i64 %4856, 7
  %4858 = inttoptr i64 %4855 to i32*
  store i32 0, i32* %4858
  %4859 = add i64 %4854, -80
  %4860 = add i64 %4854, -84
  %4861 = add i64 %4854, -88
  %4862 = add i64 %4854, -92
  %4863 = add i64 %4854, -96
  %4864 = add i64 %4854, -100
  %4865 = add i64 %4854, -16
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  br label %block_40babd

block_40ec2b:                                     ; preds = %block_40ebef
  %4867 = select i1 %3050, i64 184, i64 60
  %4868 = add i64 %3020, %4867
  store i64 %4868, i64* %3, align 8, !tbaa !1240
  br i1 %3050, label %block_40edb3, label %block_40ec67

block_40a571:                                     ; preds = %block_40a550
  %4869 = sext i32 %5318 to i64
  %4870 = shl nsw i64 %4869, 2
  %4871 = add i64 %4870, ptrtoint (%newc_type* @newc to i64)
  %4872 = inttoptr i64 %4871 to i32*
  store i32 2, i32* %4872
  %4873 = inttoptr i64 %116 to i32*
  %4874 = load i32, i32* %4873
  %4875 = sext i32 %4874 to i64
  %4876 = shl nsw i64 %4875, 5
  %4877 = add i64 %4876, ptrtoint (%vassign_type* @vassign to i64)
  %4878 = inttoptr i64 %4877 to i32*
  store i32 6, i32* %4878
  %4879 = inttoptr i64 %116 to i32*
  %4880 = load i32, i32* %4879
  %4881 = sext i32 %4880 to i64
  %4882 = shl nsw i64 %4881, 5
  store i64 %4882, i64* %5, align 8, !tbaa !1240
  %4883 = add i64 %4882, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %4884 = inttoptr i64 %4883 to i32*
  store i32 7, i32* %4884
  %4885 = add i64 %5330, 152
  br label %block_40a60e

block_40c413:                                     ; preds = %block_40c31c, %block_40c370
  %4886 = phi i64 [ %6102, %block_40c31c ], [ %5475, %block_40c370 ]
  %4887 = phi %struct.Memory* [ %7538, %block_40c31c ], [ %7538, %block_40c370 ]
  %4888 = inttoptr i64 %4865 to i32*
  %4889 = load i32, i32* %4888
  %4890 = sext i32 %4889 to i64
  %4891 = mul nsw i64 %4890, 24
  %4892 = add i64 %4891, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %4893 = inttoptr i64 %4892 to i32*
  %4894 = load i32, i32* %4893
  %4895 = icmp ne i32 %4894, 3
  %4896 = select i1 %4895, i64 138, i64 31
  %4897 = add i64 %4886, %4896
  br i1 %4895, label %block_40c49d, label %block_40c432

block_40a3ed:                                     ; preds = %block_40a2ac
  %4898 = add i64 %7088, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %4899 = inttoptr i64 %4898 to i32*
  %4900 = load i32, i32* %4899
  %4901 = inttoptr i64 %123 to i32*
  store i32 %4900, i32* %4901
  %4902 = inttoptr i64 %123 to i32*
  %4903 = load i32, i32* %4902
  %4904 = sext i32 %4903 to i64
  %4905 = mul nsw i64 %4904, 24
  %4906 = add i64 %4905, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %4907 = inttoptr i64 %4906 to i32*
  %4908 = load i32, i32* %4907
  %4909 = icmp ne i32 %4908, 3
  %4910 = select i1 %4909, i64 297, i64 58
  %4911 = add i64 %7087, %4910
  br i1 %4909, label %block_40a3ed.block_40a516_crit_edge, label %block_40a427

block_40a3ed.block_40a516_crit_edge:              ; preds = %block_40a3ed
  %4912 = inttoptr i64 %116 to i32*
  %4913 = load i32, i32* %4912
  br label %block_40a516

block_40cdb8:                                     ; preds = %block_40cd5d.block_40cdb8_crit_edge, %block_40cd97
  %4914 = phi i32 [ %5533, %block_40cd5d.block_40cdb8_crit_edge ], [ %4496, %block_40cd97 ]
  %4915 = phi i64 [ %5531, %block_40cd5d.block_40cdb8_crit_edge ], [ %4510, %block_40cd97 ]
  %4916 = sext i32 %4914 to i64
  %4917 = shl nsw i64 %4916, 2
  %4918 = add i64 %4917, ptrtoint (%newe_type* @newe to i64)
  %4919 = inttoptr i64 %4918 to i32*
  %4920 = load i32, i32* %4919
  %4921 = add i32 %4920, 1
  %4922 = inttoptr i64 %4918 to i32*
  store i32 %4921, i32* %4922
  %4923 = inttoptr i64 %4855 to i32*
  %4924 = load i32, i32* %4923
  %4925 = sext i32 %4924 to i64
  %4926 = mul nsw i64 %4925, 48
  %4927 = add i64 %4926, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 44)
  %4928 = inttoptr i64 %4927 to i32*
  store i32 1, i32* %4928
  %4929 = inttoptr i64 %4865 to i32*
  %4930 = load i32, i32* %4929
  %4931 = sext i32 %4930 to i64
  %4932 = mul nsw i64 %4931, 24
  %4933 = add i64 %4932, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %4934 = inttoptr i64 %4933 to i32*
  %4935 = load i32, i32* %4934
  %4936 = icmp ne i32 %4935, 3
  %4937 = select i1 %4936, i64 191, i64 84
  %4938 = add i64 %4915, %4937
  br i1 %4936, label %block_40ce77, label %block_40ce0c

block_40ca4a:                                     ; preds = %block_40c9f7
  %4939 = mul nsw i64 %5425, 96
  %4940 = add i64 %4939, ptrtoint (%sje_type* @sje to i64)
  %4941 = inttoptr i64 %4940 to i32*
  %4942 = load i32, i32* %4941
  %4943 = inttoptr i64 %4855 to i32*
  %4944 = load i32, i32* %4943
  %4945 = sub i32 %4942, %4944
  %4946 = icmp eq i32 %4945, 0
  %4947 = lshr i32 %4945, 31
  %4948 = lshr i32 %4942, 31
  %4949 = lshr i32 %4944, 31
  %4950 = xor i32 %4949, %4948
  %4951 = xor i32 %4947, %4948
  %4952 = add nuw nsw i32 %4951, %4950
  %4953 = icmp eq i32 %4952, 2
  %4954 = icmp ne i32 %4947, 0
  %4955 = xor i1 %4954, %4953
  %4956 = or i1 %4946, %4955
  %4957 = select i1 %4956, i64 106, i64 32
  %4958 = add i64 %5432, %4957
  br i1 %4956, label %block_40cab4, label %block_40ca6a

block_40a6ff:                                     ; preds = %block_40a64b.block_40a6ff_crit_edge, %block_40a685
  %4959 = phi i32 [ %886, %block_40a64b.block_40a6ff_crit_edge ], [ %778, %block_40a685 ]
  %4960 = phi i64 [ %884, %block_40a64b.block_40a6ff_crit_edge ], [ %790, %block_40a685 ]
  %4961 = sext i32 %4959 to i64
  %4962 = shl nsw i64 %4961, 2
  %4963 = add i64 %4962, ptrtoint (%newc_type* @newc to i64)
  %4964 = inttoptr i64 %4963 to i32*
  store i32 4, i32* %4964
  %4965 = inttoptr i64 %116 to i32*
  %4966 = load i32, i32* %4965
  %4967 = sext i32 %4966 to i64
  %4968 = shl nsw i64 %4967, 5
  %4969 = add i64 %4968, ptrtoint (%vassign_type* @vassign to i64)
  %4970 = inttoptr i64 %4969 to i32*
  store i32 2, i32* %4970
  %4971 = inttoptr i64 %116 to i32*
  %4972 = load i32, i32* %4971
  %4973 = sext i32 %4972 to i64
  %4974 = shl nsw i64 %4973, 5
  %4975 = add i64 %4974, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %4976 = inttoptr i64 %4975 to i32*
  store i32 3, i32* %4976
  %4977 = inttoptr i64 %116 to i32*
  %4978 = load i32, i32* %4977
  %4979 = sext i32 %4978 to i64
  %4980 = shl nsw i64 %4979, 5
  %4981 = add i64 %4980, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %4982 = inttoptr i64 %4981 to i32*
  store i32 6, i32* %4982
  %4983 = inttoptr i64 %116 to i32*
  %4984 = load i32, i32* %4983
  %4985 = sext i32 %4984 to i64
  %4986 = shl nsw i64 %4985, 5
  store i64 %4986, i64* %5, align 8, !tbaa !1240
  %4987 = add i64 %4986, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %4988 = add i64 %4960, 105
  %4989 = inttoptr i64 %4987 to i32*
  store i32 7, i32* %4989
  br label %block_40ad17.sink.split

block_408d47:                                     ; preds = %block_408d27
  %4990 = sext i32 %1663 to i64
  %4991 = shl nsw i64 %4990, 2
  %4992 = add i64 %4991, ptrtoint (%newc_type* @newc to i64)
  %4993 = inttoptr i64 %4992 to i32*
  store i32 1, i32* %4993
  %4994 = inttoptr i64 %116 to i32*
  %4995 = load i32, i32* %4994
  %4996 = sext i32 %4995 to i64
  %4997 = shl nsw i64 %4996, 5
  store i64 %4997, i64* %5, align 8, !tbaa !1240
  %4998 = add i64 %4997, ptrtoint (%vassign_type* @vassign to i64)
  %4999 = inttoptr i64 %4998 to i32*
  store i32 7, i32* %4999
  %5000 = add i64 %1675, 110
  br label %block_408ecb

block_40d401:                                     ; preds = %block_40d3a8
  %5001 = mul nsw i64 %3303, 96
  %5002 = add i64 %5001, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %5003 = inttoptr i64 %5002 to i32*
  %5004 = load i32, i32* %5003
  %5005 = inttoptr i64 %4865 to i32*
  store i32 %5004, i32* %5005
  %5006 = inttoptr i64 %4865 to i32*
  %5007 = load i32, i32* %5006
  %5008 = sext i32 %5007 to i64
  %5009 = mul nsw i64 %5008, 24
  %5010 = add i64 %5009, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %5011 = inttoptr i64 %5010 to i32*
  %5012 = load i32, i32* %5011
  %5013 = icmp ne i32 %5012, 3
  %5014 = select i1 %5013, i64 91, i64 58
  %5015 = add i64 %3310, %5014
  br i1 %5013, label %block_40d401.block_40d45c_crit_edge, label %block_40d43b

block_40d401.block_40d45c_crit_edge:              ; preds = %block_40d401
  %5016 = inttoptr i64 %4855 to i32*
  %5017 = load i32, i32* %5016
  br label %block_40d45c

block_40f0eb:                                     ; preds = %block_40f0e1
  %5018 = add i64 %7813, 7
  %5019 = inttoptr i64 %3935 to i32*
  store i32 0, i32* %5019
  br label %block_40f0f2

block_40ba44:                                     ; preds = %block_40b9ea
  %5020 = add i32 %3461, 1
  %5021 = inttoptr i64 %3459 to i32*
  store i32 %5020, i32* %5021
  %5022 = add i64 %3479, -146
  br label %block_40b9b2

block_409240:                                     ; preds = %block_409206
  %5023 = mul nsw i64 %5341, 96
  %5024 = add i64 %5023, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %5025 = inttoptr i64 %5024 to i32*
  %5026 = load i32, i32* %5025
  %5027 = inttoptr i64 %116 to i32*
  %5028 = load i32, i32* %5027
  %5029 = sub i32 %5026, %5028
  %5030 = lshr i32 %5029, 31
  %5031 = lshr i32 %5026, 31
  %5032 = lshr i32 %5028, 31
  %5033 = xor i32 %5032, %5031
  %5034 = xor i32 %5030, %5031
  %5035 = add nuw nsw i32 %5034, %5033
  %5036 = icmp eq i32 %5035, 2
  %5037 = icmp ne i32 %5030, 0
  %5038 = xor i1 %5037, %5036
  %5039 = select i1 %5038, i64 33, i64 80
  %5040 = add i64 %5348, %5039
  br i1 %5038, label %block_409261, label %block_409290

block_40e701:                                     ; preds = %block_40e6f7
  %5041 = inttoptr i64 %4863 to i32*
  %5042 = load i32, i32* %5041
  %5043 = icmp eq i32 %5042, 3
  %5044 = select i1 %5043, i64 63, i64 10
  %5045 = add i64 %630, %5044
  br i1 %5043, label %block_40e740, label %block_40e70b

block_40ea38:                                     ; preds = %block_40ea31, %block_40edb8
  %5046 = phi i64 [ %8904, %block_40ea31 ], [ %1265, %block_40edb8 ]
  %5047 = phi i64 [ %5706, %block_40ea31 ], [ %1254, %block_40edb8 ]
  %5048 = phi %struct.Memory* [ %8901, %block_40ea31 ], [ %1256, %block_40edb8 ]
  %5049 = add i64 %5047, -52
  %5050 = inttoptr i64 %5049 to i32*
  %5051 = load i32, i32* %5050
  %5052 = add i64 %5047, -48
  %5053 = inttoptr i64 %5052 to i32*
  %5054 = load i32, i32* %5053
  %5055 = sub i32 %5051, %5054
  %5056 = lshr i32 %5055, 31
  %5057 = trunc i32 %5056 to i8
  %5058 = lshr i32 %5051, 31
  %5059 = lshr i32 %5054, 31
  %5060 = xor i32 %5059, %5058
  %5061 = xor i32 %5056, %5058
  %5062 = add nuw nsw i32 %5061, %5060
  %5063 = icmp eq i32 %5062, 2
  %5064 = icmp ne i8 %5057, 0
  %5065 = xor i1 %5064, %5063
  %5066 = select i1 %5065, i64 12, i64 915
  %5067 = add i64 %5046, %5066
  br i1 %5065, label %block_40ea44, label %block_40edcb

block_40b715:                                     ; preds = %block_40b652, %block_40b671
  %5068 = phi i64 [ %823, %block_40b671 ], [ %878, %block_40b652 ]
  %5069 = sext i32 %9388 to i64
  %5070 = shl nsw i64 %5069, 2
  %5071 = add i64 %5070, ptrtoint (%newc_type* @newc to i64)
  %5072 = inttoptr i64 %5071 to i32*
  store i32 6, i32* %5072
  %5073 = inttoptr i64 %116 to i32*
  %5074 = load i32, i32* %5073
  %5075 = sext i32 %5074 to i64
  %5076 = shl nsw i64 %5075, 5
  %5077 = add i64 %5076, ptrtoint (%vassign_type* @vassign to i64)
  %5078 = inttoptr i64 %5077 to i32*
  store i32 1, i32* %5078
  %5079 = inttoptr i64 %116 to i32*
  %5080 = load i32, i32* %5079
  %5081 = sext i32 %5080 to i64
  %5082 = shl nsw i64 %5081, 5
  %5083 = add i64 %5082, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5084 = inttoptr i64 %5083 to i32*
  store i32 2, i32* %5084
  %5085 = inttoptr i64 %116 to i32*
  %5086 = load i32, i32* %5085
  %5087 = sext i32 %5086 to i64
  %5088 = shl nsw i64 %5087, 5
  %5089 = add i64 %5088, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5090 = inttoptr i64 %5089 to i32*
  store i32 3, i32* %5090
  %5091 = inttoptr i64 %116 to i32*
  %5092 = load i32, i32* %5091
  %5093 = sext i32 %5092 to i64
  %5094 = shl nsw i64 %5093, 5
  %5095 = add i64 %5094, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %5096 = inttoptr i64 %5095 to i32*
  store i32 5, i32* %5096
  %5097 = inttoptr i64 %116 to i32*
  %5098 = load i32, i32* %5097
  %5099 = sext i32 %5098 to i64
  %5100 = shl nsw i64 %5099, 5
  %5101 = add i64 %5100, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %5102 = inttoptr i64 %5101 to i32*
  store i32 6, i32* %5102
  %5103 = inttoptr i64 %116 to i32*
  %5104 = load i32, i32* %5103
  %5105 = sext i32 %5104 to i64
  %5106 = shl nsw i64 %5105, 5
  store i64 %5106, i64* %5, align 8, !tbaa !1240
  %5107 = add i64 %5106, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %5108 = add i64 %5068, 147
  %5109 = inttoptr i64 %5107 to i32*
  store i32 7, i32* %5109
  br label %block_40b937

block_40ef32:                                     ; preds = %block_40ef2b, %block_40ef3c
  %5110 = phi i64 [ %3430, %block_40ef2b ], [ %472, %block_40ef3c ]
  %5111 = phi %struct.Memory* [ %5213, %block_40ef2b ], [ %5111, %block_40ef3c ]
  %5112 = inttoptr i64 %5307 to i32*
  %5113 = load i32, i32* %5112
  %5114 = add i32 %5113, -4
  %5115 = lshr i32 %5114, 31
  %5116 = lshr i32 %5113, 31
  %5117 = xor i32 %5115, %5116
  %5118 = add nuw nsw i32 %5117, %5116
  %5119 = icmp eq i32 %5118, 2
  %5120 = icmp ne i32 %5115, 0
  %5121 = xor i1 %5120, %5119
  %5122 = select i1 %5121, i64 10, i64 144
  %5123 = add i64 %5110, %5122
  br i1 %5121, label %block_40ef3c, label %block_40efc2

block_40c230:                                     ; preds = %block_40c111
  %5124 = shl nsw i64 %7661, 2
  %5125 = add i64 %5124, ptrtoint (%newe_type* @newe to i64)
  %5126 = inttoptr i64 %5125 to i32*
  %5127 = load i32, i32* %5126
  %5128 = add i32 %5127, 1
  %5129 = inttoptr i64 %5125 to i32*
  store i32 %5128, i32* %5129
  %5130 = inttoptr i64 %4855 to i32*
  %5131 = load i32, i32* %5130
  %5132 = sext i32 %5131 to i64
  %5133 = mul nsw i64 %5132, 48
  %5134 = add i64 %5133, ptrtoint (%eassign_type* @eassign to i64)
  %5135 = add i64 %7668, 52
  %5136 = inttoptr i64 %5134 to i32*
  store i32 1, i32* %5136
  br label %block_40c264

block_40ad17.sink.split:                          ; preds = %block_40a98e, %block_40a6ff, %block_40a6a6, %block_40ad0d
  %5137 = phi i64 [ %1889, %block_40ad0d ], [ %9158, %block_40a98e ], [ %4988, %block_40a6ff ], [ %3262, %block_40a6a6 ]
  %5138 = phi i64 [ 5, %block_40ad0d ], [ 5, %block_40a98e ], [ 555, %block_40a6ff ], [ 555, %block_40a6a6 ]
  %5139 = phi %struct.Memory* [ %1888, %block_40ad0d ], [ %9157, %block_40a98e ], [ %3633, %block_40a6ff ], [ %3633, %block_40a6a6 ]
  %5140 = phi i64 [ 5, %block_40ad0d ], [ 900, %block_40a98e ], [ 900, %block_40a6ff ], [ 900, %block_40a6a6 ]
  %5141 = add i64 %5137, %5138
  br label %block_40ad1c

block_40bc5c:                                     ; preds = %block_40bc52, %block_40bc48
  %5142 = phi i64 [ %2783, %block_40bc52 ], [ %2628, %block_40bc48 ]
  %5143 = inttoptr i64 %4855 to i32*
  %5144 = load i32, i32* %5143
  %5145 = sext i32 %5144 to i64
  %5146 = shl nsw i64 %5145, 2
  %5147 = add i64 %5146, ptrtoint (%newe_type* @newe to i64)
  %5148 = inttoptr i64 %5147 to i32*
  %5149 = load i32, i32* %5148
  %5150 = add i32 %5149, 1
  %5151 = inttoptr i64 %5147 to i32*
  store i32 %5150, i32* %5151
  %5152 = inttoptr i64 %4855 to i32*
  %5153 = load i32, i32* %5152
  %5154 = sext i32 %5153 to i64
  %5155 = mul nsw i64 %5154, 48
  %5156 = add i64 %5155, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 16)
  %5157 = add i64 %5142, 53
  %5158 = inttoptr i64 %5156 to i32*
  store i32 1, i32* %5158
  br label %block_40c85b

block_409ee5:                                     ; preds = %block_409e81, %block_409e48.block_409ee5_crit_edge
  %5159 = phi i32 [ %7725, %block_409e48.block_409ee5_crit_edge ], [ %9002, %block_409e81 ]
  %5160 = phi i64 [ %7723, %block_409e48.block_409ee5_crit_edge ], [ %9014, %block_409e81 ]
  %5161 = sext i32 %5159 to i64
  %5162 = shl nsw i64 %5161, 2
  %5163 = add i64 %5162, ptrtoint (%newc_type* @newc to i64)
  %5164 = inttoptr i64 %5163 to i32*
  store i32 3, i32* %5164
  %5165 = inttoptr i64 %116 to i32*
  %5166 = load i32, i32* %5165
  %5167 = sext i32 %5166 to i64
  %5168 = shl nsw i64 %5167, 5
  %5169 = add i64 %5168, ptrtoint (%vassign_type* @vassign to i64)
  %5170 = inttoptr i64 %5169 to i32*
  store i32 3, i32* %5170
  %5171 = inttoptr i64 %116 to i32*
  %5172 = load i32, i32* %5171
  %5173 = sext i32 %5172 to i64
  %5174 = shl nsw i64 %5173, 5
  %5175 = add i64 %5174, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5176 = inttoptr i64 %5175 to i32*
  store i32 5, i32* %5176
  %5177 = inttoptr i64 %116 to i32*
  %5178 = load i32, i32* %5177
  %5179 = sext i32 %5178 to i64
  %5180 = shl nsw i64 %5179, 5
  store i64 %5180, i64* %5, align 8, !tbaa !1240
  %5181 = add i64 %5180, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5182 = add i64 %5160, 84
  %5183 = inttoptr i64 %5181 to i32*
  store i32 7, i32* %5183
  br label %block_409f43

block_40a21c:                                     ; preds = %block_40a17d.block_40a21c_crit_edge, %block_40a1b7
  %5184 = phi i32 [ %6268, %block_40a17d.block_40a21c_crit_edge ], [ %5992, %block_40a1b7 ]
  %5185 = phi i64 [ %6266, %block_40a17d.block_40a21c_crit_edge ], [ %6004, %block_40a1b7 ]
  %5186 = sext i32 %5184 to i64
  %5187 = shl nsw i64 %5186, 2
  %5188 = add i64 %5187, ptrtoint (%newc_type* @newc to i64)
  %5189 = inttoptr i64 %5188 to i32*
  store i32 3, i32* %5189
  %5190 = inttoptr i64 %116 to i32*
  %5191 = load i32, i32* %5190
  %5192 = sext i32 %5191 to i64
  %5193 = shl nsw i64 %5192, 5
  %5194 = add i64 %5193, ptrtoint (%vassign_type* @vassign to i64)
  %5195 = inttoptr i64 %5194 to i32*
  store i32 3, i32* %5195
  %5196 = inttoptr i64 %116 to i32*
  %5197 = load i32, i32* %5196
  %5198 = sext i32 %5197 to i64
  %5199 = shl nsw i64 %5198, 5
  %5200 = add i64 %5199, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5201 = inttoptr i64 %5200 to i32*
  store i32 6, i32* %5201
  %5202 = inttoptr i64 %116 to i32*
  %5203 = load i32, i32* %5202
  %5204 = sext i32 %5203 to i64
  %5205 = shl nsw i64 %5204, 5
  store i64 %5205, i64* %5, align 8, !tbaa !1240
  %5206 = add i64 %5205, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5207 = add i64 %5185, 84
  %5208 = inttoptr i64 %5206 to i32*
  store i32 7, i32* %5208
  br label %block_40a27a

block_40e215:                                     ; preds = %block_40e20b
  %5209 = icmp ne i32 %6838, 1
  %5210 = select i1 %5209, i64 188, i64 10
  %5211 = add i64 %5312, %5210
  br i1 %5209, label %block_40e2d6, label %block_40e21f

block_40ef21:                                     ; preds = %block_40eee7, %block_40efc2
  %5212 = phi i64 [ %5305, %block_40eee7 ], [ %2780, %block_40efc2 ]
  %5213 = phi %struct.Memory* [ %5048, %block_40eee7 ], [ %5111, %block_40efc2 ]
  %5214 = inttoptr i64 %5304 to i32*
  %5215 = load i32, i32* %5214
  %5216 = add i32 %5215, -4
  %5217 = lshr i32 %5216, 31
  %5218 = trunc i32 %5217 to i8
  %5219 = lshr i32 %5215, 31
  %5220 = xor i32 %5217, %5219
  %5221 = add nuw nsw i32 %5220, %5219
  %5222 = icmp eq i32 %5221, 2
  %5223 = icmp ne i8 %5218, 0
  %5224 = xor i1 %5223, %5222
  %5225 = select i1 %5224, i64 10, i64 180
  %5226 = add i64 %5212, %5225
  br i1 %5224, label %block_40ef2b, label %block_40efd5

block_40b20c:                                     ; preds = %block_40b119.block_40b20c_crit_edge, %block_40b153
  %5227 = phi i32 [ %7173, %block_40b119.block_40b20c_crit_edge ], [ %6697, %block_40b153 ]
  %5228 = phi i64 [ %7171, %block_40b119.block_40b20c_crit_edge ], [ %6709, %block_40b153 ]
  %5229 = sext i32 %5227 to i64
  %5230 = shl nsw i64 %5229, 2
  %5231 = add i64 %5230, ptrtoint (%newc_type* @newc to i64)
  %5232 = inttoptr i64 %5231 to i32*
  store i32 7, i32* %5232
  %5233 = inttoptr i64 %116 to i32*
  %5234 = load i32, i32* %5233
  %5235 = sext i32 %5234 to i64
  %5236 = shl nsw i64 %5235, 5
  %5237 = add i64 %5236, ptrtoint (%vassign_type* @vassign to i64)
  %5238 = inttoptr i64 %5237 to i32*
  store i32 1, i32* %5238
  %5239 = inttoptr i64 %116 to i32*
  %5240 = load i32, i32* %5239
  %5241 = sext i32 %5240 to i64
  %5242 = shl nsw i64 %5241, 5
  %5243 = add i64 %5242, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5244 = inttoptr i64 %5243 to i32*
  store i32 2, i32* %5244
  %5245 = inttoptr i64 %116 to i32*
  %5246 = load i32, i32* %5245
  %5247 = sext i32 %5246 to i64
  %5248 = shl nsw i64 %5247, 5
  %5249 = add i64 %5248, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5250 = inttoptr i64 %5249 to i32*
  store i32 3, i32* %5250
  %5251 = inttoptr i64 %116 to i32*
  %5252 = load i32, i32* %5251
  %5253 = sext i32 %5252 to i64
  %5254 = shl nsw i64 %5253, 5
  %5255 = add i64 %5254, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %5256 = inttoptr i64 %5255 to i32*
  store i32 4, i32* %5256
  %5257 = inttoptr i64 %116 to i32*
  %5258 = load i32, i32* %5257
  %5259 = sext i32 %5258 to i64
  %5260 = shl nsw i64 %5259, 5
  %5261 = add i64 %5260, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %5262 = inttoptr i64 %5261 to i32*
  store i32 5, i32* %5262
  %5263 = inttoptr i64 %116 to i32*
  %5264 = load i32, i32* %5263
  %5265 = sext i32 %5264 to i64
  %5266 = shl nsw i64 %5265, 5
  %5267 = add i64 %5266, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %5268 = inttoptr i64 %5267 to i32*
  store i32 6, i32* %5268
  %5269 = inttoptr i64 %116 to i32*
  %5270 = load i32, i32* %5269
  %5271 = sext i32 %5270 to i64
  %5272 = shl nsw i64 %5271, 5
  store i64 %5272, i64* %5, align 8, !tbaa !1240
  %5273 = add i64 %5272, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 24)
  %5274 = add i64 %5228, 168
  %5275 = inttoptr i64 %5273 to i32*
  store i32 7, i32* %5275
  br label %block_40b2b4

block_40eee7:                                     ; preds = %block_40eeb7
  %5276 = add i64 %3771, -8
  %5277 = inttoptr i64 %5276 to i32*
  %5278 = load i32, i32* %5277
  %5279 = sext i32 %5278 to i64
  %5280 = mul nsw i64 %5279, 96
  %5281 = add i64 %5280, ptrtoint (%sje_type* @sje to i64)
  %5282 = add i64 %3771, -20
  %5283 = inttoptr i64 %5282 to i32*
  %5284 = load i32, i32* %5283
  %5285 = sext i32 %5284 to i64
  %5286 = shl nsw i64 %5285, 4
  store i64 %5286, i64* %5, align 8, !tbaa !1240
  %5287 = add i64 %5286, %5281
  %5288 = inttoptr i64 %5287 to i32*
  %5289 = load i32, i32* %5288
  %5290 = load i64, i64* %10, align 8
  %5291 = add i64 %5290, -16
  %5292 = inttoptr i64 %5291 to i32*
  store i32 %5289, i32* %5292
  %5293 = add i64 %5290, -20
  %5294 = inttoptr i64 %5293 to i32*
  %5295 = load i32, i32* %5294
  %5296 = sext i32 %5295 to i64
  %5297 = shl nsw i64 %5296, 2
  %5298 = add i64 %5297, ptrtoint (%jjface_type* @jjface to i64)
  %5299 = inttoptr i64 %5298 to i32*
  %5300 = load i32, i32* %5299
  %5301 = zext i32 %5300 to i64
  store i64 %5301, i64* %6, align 8, !tbaa !1240
  %5302 = add i64 %5290, -12
  %5303 = inttoptr i64 %5302 to i32*
  store i32 %5300, i32* %5303
  %5304 = add i64 %5290, -28
  %5305 = add i64 %3770, 58
  %5306 = inttoptr i64 %5304 to i32*
  store i32 1, i32* %5306
  %5307 = add i64 %5290, -24
  %5308 = add i64 %5290, -4
  %5309 = add i64 %5290, -8
  br label %block_40ef21

block_40e20b:                                     ; preds = %block_40e13a
  %5310 = icmp eq i32 %6838, 0
  %5311 = select i1 %5310, i64 20, i64 10
  %5312 = add i64 %6841, %5311
  br i1 %5310, label %block_40e21f, label %block_40e215

block_40a550:                                     ; preds = %block_40a516
  %5313 = mul nsw i64 %1876, 96
  %5314 = add i64 %5313, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %5315 = inttoptr i64 %5314 to i32*
  %5316 = load i32, i32* %5315
  %5317 = inttoptr i64 %116 to i32*
  %5318 = load i32, i32* %5317
  %5319 = sub i32 %5316, %5318
  %5320 = lshr i32 %5319, 31
  %5321 = lshr i32 %5316, 31
  %5322 = lshr i32 %5318, 31
  %5323 = xor i32 %5322, %5321
  %5324 = xor i32 %5320, %5321
  %5325 = add nuw nsw i32 %5324, %5323
  %5326 = icmp eq i32 %5325, 2
  %5327 = icmp ne i32 %5320, 0
  %5328 = xor i1 %5327, %5326
  %5329 = select i1 %5328, i64 33, i64 101
  %5330 = add i64 %1883, %5329
  br i1 %5328, label %block_40a571, label %block_40a5b5

block_409206:                                     ; preds = %block_4091fc
  %5331 = inttoptr i64 %116 to i32*
  %5332 = load i32, i32* %5331
  %5333 = sext i32 %5332 to i64
  %5334 = mul nsw i64 %5333, 96
  %5335 = add i64 %5334, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %5336 = inttoptr i64 %5335 to i32*
  %5337 = load i32, i32* %5336
  %5338 = inttoptr i64 %123 to i32*
  store i32 %5337, i32* %5338
  %5339 = inttoptr i64 %123 to i32*
  %5340 = load i32, i32* %5339
  %5341 = sext i32 %5340 to i64
  %5342 = mul nsw i64 %5341, 24
  %5343 = add i64 %5342, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %5344 = inttoptr i64 %5343 to i32*
  %5345 = load i32, i32* %5344
  %5346 = icmp ne i32 %5345, 3
  %5347 = select i1 %5346, i64 138, i64 58
  %5348 = add i64 %5374, %5347
  br i1 %5346, label %block_409206.block_409290_crit_edge, label %block_409240

block_409206.block_409290_crit_edge:              ; preds = %block_409206
  %5349 = inttoptr i64 %116 to i32*
  %5350 = load i32, i32* %5349
  br label %block_409290

block_40aa05:                                     ; preds = %block_40a9cb
  %5351 = mul nsw i64 %5945, 96
  %5352 = add i64 %5351, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %5353 = inttoptr i64 %5352 to i32*
  %5354 = load i32, i32* %5353
  %5355 = inttoptr i64 %116 to i32*
  %5356 = load i32, i32* %5355
  %5357 = sub i32 %5354, %5356
  %5358 = lshr i32 %5357, 31
  %5359 = lshr i32 %5354, 31
  %5360 = lshr i32 %5356, 31
  %5361 = xor i32 %5360, %5359
  %5362 = xor i32 %5358, %5359
  %5363 = add nuw nsw i32 %5362, %5361
  %5364 = icmp eq i32 %5363, 2
  %5365 = icmp ne i32 %5358, 0
  %5366 = xor i1 %5365, %5364
  %5367 = select i1 %5366, i64 33, i64 122
  %5368 = add i64 %5679, %5367
  br i1 %5366, label %block_40aa26, label %block_40aa7f

block_4091fc:                                     ; preds = %block_4091a4
  %5369 = add i64 %6009, 10
  %5370 = inttoptr i64 %126 to i32*
  %5371 = load i32, i32* %5370
  %5372 = icmp ne i32 %5371, 1
  %5373 = select i1 %5372, i64 216, i64 10
  %5374 = add i64 %5369, %5373
  br i1 %5372, label %block_4092d4.thread, label %block_409206

block_4092d4.thread:                              ; preds = %block_4091fc
  %5375 = add i64 %5374, 226
  br label %block_4093b6

block_4089fa:                                     ; preds = %block_4089ea
  %5376 = sext i32 %5568 to i64
  %5377 = mul nsw i64 %5376, 24
  %5378 = add i64 %5377, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %5379 = inttoptr i64 %5378 to i32*
  %5380 = load i32, i32* %5379
  %5381 = inttoptr i64 %119 to i32*
  store i32 %5380, i32* %5381
  %5382 = inttoptr i64 %116 to i32*
  %5383 = load i32, i32* %5382
  %5384 = sext i32 %5383 to i64
  %5385 = mul nsw i64 %5384, 24
  %5386 = add i64 %5385, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 12)
  %5387 = inttoptr i64 %5386 to i32*
  %5388 = load i32, i32* %5387
  %5389 = inttoptr i64 %120 to i32*
  store i32 %5388, i32* %5389
  %5390 = inttoptr i64 %116 to i32*
  %5391 = load i32, i32* %5390
  %5392 = sext i32 %5391 to i64
  %5393 = mul nsw i64 %5392, 24
  store i64 %5393, i64* %5, align 8, !tbaa !1240
  %5394 = add i64 %5393, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %5395 = inttoptr i64 %5394 to i32*
  %5396 = load i32, i32* %5395
  %5397 = inttoptr i64 %121 to i32*
  store i32 %5396, i32* %5397
  %5398 = inttoptr i64 %122 to i32*
  store i32 0, i32* %5398
  %5399 = inttoptr i64 %119 to i32*
  %5400 = load i32, i32* %5399
  %5401 = icmp eq i32 %5400, 2
  %5402 = select i1 %5401, i64 94, i64 84
  %5403 = add i64 %5582, %5402
  br i1 %5401, label %block_408a58, label %block_408a4e

block_40ad08:                                     ; preds = %block_40acaf, %block_40ab9f, %block_40abce, %block_40ac6b
  %5404 = phi i64 [ %3357, %block_40ab9f ], [ %3138, %block_40abce ], [ %6041, %block_40acaf ], [ %2399, %block_40ac6b ]
  %5405 = phi i64 [ 251, %block_40ab9f ], [ 251, %block_40abce ], [ 5, %block_40acaf ], [ 5, %block_40ac6b ]
  %5406 = phi %struct.Memory* [ %3633, %block_40ab9f ], [ %3633, %block_40abce ], [ %3633, %block_40acaf ], [ %3633, %block_40ac6b ]
  %5407 = add i64 %5404, %5405
  br label %block_40ad0d

block_40c9f7:                                     ; preds = %block_40c9d7, %block_40c99e.block_40c9f7_crit_edge
  %5408 = phi i32 [ %6059, %block_40c99e.block_40c9f7_crit_edge ], [ %9063, %block_40c9d7 ]
  %5409 = phi i64 [ %6057, %block_40c99e.block_40c9f7_crit_edge ], [ %9077, %block_40c9d7 ]
  %5410 = sext i32 %5408 to i64
  %5411 = shl nsw i64 %5410, 2
  %5412 = add i64 %5411, ptrtoint (%newe_type* @newe to i64)
  %5413 = inttoptr i64 %5412 to i32*
  %5414 = load i32, i32* %5413
  %5415 = add i32 %5414, 1
  %5416 = inttoptr i64 %5412 to i32*
  store i32 %5415, i32* %5416
  %5417 = inttoptr i64 %4855 to i32*
  %5418 = load i32, i32* %5417
  %5419 = sext i32 %5418 to i64
  %5420 = mul nsw i64 %5419, 48
  %5421 = add i64 %5420, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 12)
  %5422 = inttoptr i64 %5421 to i32*
  store i32 1, i32* %5422
  %5423 = inttoptr i64 %4865 to i32*
  %5424 = load i32, i32* %5423
  %5425 = sext i32 %5424 to i64
  %5426 = mul nsw i64 %5425, 24
  %5427 = add i64 %5426, ptrtoint (%cbc_type* @cbc to i64)
  %5428 = inttoptr i64 %5427 to i32*
  %5429 = load i32, i32* %5428
  %5430 = icmp ne i32 %5429, 3
  %5431 = select i1 %5430, i64 189, i64 83
  %5432 = add i64 %5409, %5431
  br i1 %5430, label %block_40cab4, label %block_40ca4a

block_40c22b:                                     ; preds = %block_40c169, %block_40c1c3, %block_40c1a2
  %5433 = phi i64 [ %8534, %block_40c169 ], [ %5732, %block_40c1c3 ], [ %591, %block_40c1a2 ]
  %5434 = phi i64 [ 199, %block_40c169 ], [ 62, %block_40c1c3 ], [ 62, %block_40c1a2 ]
  %5435 = phi %struct.Memory* [ %660, %block_40c169 ], [ %660, %block_40c1c3 ], [ %660, %block_40c1a2 ]
  %5436 = add i64 %5434, %5433
  br label %block_40c264

block_40c370:                                     ; preds = %block_40c31c
  %5437 = mul nsw i64 %6095, 96
  %5438 = add i64 %5437, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %5439 = inttoptr i64 %5438 to i32*
  %5440 = load i32, i32* %5439
  %5441 = inttoptr i64 %4855 to i32*
  %5442 = load i32, i32* %5441
  %5443 = sext i32 %5442 to i64
  %5444 = mul nsw i64 %5443, 96
  %5445 = add i64 %5444, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %5445, i64* %6292, align 8, !tbaa !1240
  %5446 = add i64 %5444, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 64)
  %5447 = inttoptr i64 %5446 to i32*
  store i32 %5440, i32* %5447
  %5448 = inttoptr i64 %4855 to i32*
  %5449 = load i32, i32* %5448
  %5450 = sext i32 %5449 to i64
  %5451 = mul nsw i64 %5450, 48
  store i64 %5451, i64* %11, align 8, !tbaa !1240
  %5452 = add i64 %5451, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %5453 = inttoptr i64 %5452 to i32*
  %5454 = load i32, i32* %5453
  %5455 = zext i32 %5454 to i64
  store i64 %5455, i64* %4866, align 8, !tbaa !1240
  %5456 = mul nsw i64 %5450, 96
  %5457 = add i64 %5456, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 68)
  %5458 = inttoptr i64 %5457 to i32*
  store i32 %5454, i32* %5458
  %5459 = inttoptr i64 %4865 to i32*
  %5460 = load i32, i32* %5459
  %5461 = sext i32 %5460 to i64
  %5462 = mul nsw i64 %5461, 96
  %5463 = add i64 %5462, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %5464 = inttoptr i64 %5463 to i32*
  %5465 = load i32, i32* %5464
  %5466 = sext i32 %5465 to i64
  %5467 = mul nsw i64 %5466, 48
  %5468 = add i64 %5467, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 44)
  %5469 = inttoptr i64 %5468 to i32*
  store i32 1, i32* %5469
  %5470 = inttoptr i64 %4855 to i32*
  %5471 = load i32, i32* %5470
  %5472 = sext i32 %5471 to i64
  %5473 = mul nsw i64 %5472, 48
  %5474 = add i64 %5473, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 32)
  %5475 = add i64 %6102, 163
  %5476 = inttoptr i64 %5474 to i32*
  store i32 1, i32* %5476
  br label %block_40c413

block_40d9f1:                                     ; preds = %block_40d99d
  %5477 = mul nsw i64 %6120, 96
  %5478 = add i64 %5477, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %5479 = inttoptr i64 %5478 to i32*
  %5480 = load i32, i32* %5479
  %5481 = inttoptr i64 %4855 to i32*
  %5482 = load i32, i32* %5481
  %5483 = sext i32 %5482 to i64
  %5484 = mul nsw i64 %5483, 96
  %5485 = add i64 %5484, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %5485, i64* %6292, align 8, !tbaa !1240
  %5486 = add i64 %5484, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 48)
  %5487 = inttoptr i64 %5486 to i32*
  store i32 %5480, i32* %5487
  %5488 = inttoptr i64 %4855 to i32*
  %5489 = load i32, i32* %5488
  %5490 = sext i32 %5489 to i64
  %5491 = mul nsw i64 %5490, 48
  store i64 %5491, i64* %11, align 8, !tbaa !1240
  %5492 = add i64 %5491, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 12)
  %5493 = inttoptr i64 %5492 to i32*
  %5494 = load i32, i32* %5493
  %5495 = zext i32 %5494 to i64
  store i64 %5495, i64* %4866, align 8, !tbaa !1240
  %5496 = mul nsw i64 %5490, 96
  %5497 = add i64 %5496, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 52)
  %5498 = inttoptr i64 %5497 to i32*
  store i32 %5494, i32* %5498
  %5499 = inttoptr i64 %4865 to i32*
  %5500 = load i32, i32* %5499
  %5501 = sext i32 %5500 to i64
  %5502 = mul nsw i64 %5501, 96
  %5503 = add i64 %5502, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %5504 = inttoptr i64 %5503 to i32*
  %5505 = load i32, i32* %5504
  %5506 = sext i32 %5505 to i64
  %5507 = mul nsw i64 %5506, 48
  %5508 = add i64 %5507, ptrtoint (%ncon_edge_type* @ncon_edge to i64)
  %5509 = inttoptr i64 %5508 to i32*
  store i32 1, i32* %5509
  %5510 = inttoptr i64 %4855 to i32*
  %5511 = load i32, i32* %5510
  %5512 = sext i32 %5511 to i64
  %5513 = mul nsw i64 %5512, 48
  %5514 = add i64 %5513, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 24)
  %5515 = add i64 %6127, 162
  %5516 = inttoptr i64 %5514 to i32*
  store i32 1, i32* %5516
  br label %block_40da93

block_40cd5d:                                     ; preds = %block_40cd04
  %5517 = mul nsw i64 %6152, 96
  %5518 = add i64 %5517, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %5519 = inttoptr i64 %5518 to i32*
  %5520 = load i32, i32* %5519
  %5521 = inttoptr i64 %4865 to i32*
  store i32 %5520, i32* %5521
  %5522 = inttoptr i64 %4865 to i32*
  %5523 = load i32, i32* %5522
  %5524 = sext i32 %5523 to i64
  %5525 = mul nsw i64 %5524, 24
  %5526 = add i64 %5525, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %5527 = inttoptr i64 %5526 to i32*
  %5528 = load i32, i32* %5527
  %5529 = icmp ne i32 %5528, 3
  %5530 = select i1 %5529, i64 91, i64 58
  %5531 = add i64 %6159, %5530
  br i1 %5529, label %block_40cd5d.block_40cdb8_crit_edge, label %block_40cd97

block_40cd5d.block_40cdb8_crit_edge:              ; preds = %block_40cd5d
  %5532 = inttoptr i64 %4855 to i32*
  %5533 = load i32, i32* %5532
  br label %block_40cdb8

block_4099ed:                                     ; preds = %block_409939.block_4099ed_crit_edge, %block_409973
  %5534 = phi i32 [ %6872, %block_409939.block_4099ed_crit_edge ], [ %6373, %block_409973 ]
  %5535 = phi i64 [ %6870, %block_409939.block_4099ed_crit_edge ], [ %6385, %block_409973 ]
  %5536 = sext i32 %5534 to i64
  %5537 = shl nsw i64 %5536, 2
  %5538 = add i64 %5537, ptrtoint (%newc_type* @newc to i64)
  %5539 = inttoptr i64 %5538 to i32*
  store i32 4, i32* %5539
  %5540 = inttoptr i64 %116 to i32*
  %5541 = load i32, i32* %5540
  %5542 = sext i32 %5541 to i64
  %5543 = shl nsw i64 %5542, 5
  %5544 = add i64 %5543, ptrtoint (%vassign_type* @vassign to i64)
  %5545 = inttoptr i64 %5544 to i32*
  store i32 4, i32* %5545
  %5546 = inttoptr i64 %116 to i32*
  %5547 = load i32, i32* %5546
  %5548 = sext i32 %5547 to i64
  %5549 = shl nsw i64 %5548, 5
  %5550 = add i64 %5549, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5551 = inttoptr i64 %5550 to i32*
  store i32 5, i32* %5551
  %5552 = inttoptr i64 %116 to i32*
  %5553 = load i32, i32* %5552
  %5554 = sext i32 %5553 to i64
  %5555 = shl nsw i64 %5554, 5
  %5556 = add i64 %5555, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5557 = inttoptr i64 %5556 to i32*
  store i32 6, i32* %5557
  %5558 = inttoptr i64 %116 to i32*
  %5559 = load i32, i32* %5558
  %5560 = sext i32 %5559 to i64
  %5561 = shl nsw i64 %5560, 5
  store i64 %5561, i64* %5, align 8, !tbaa !1240
  %5562 = add i64 %5561, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %5563 = add i64 %5535, 105
  %5564 = inttoptr i64 %5562 to i32*
  store i32 7, i32* %5564
  br label %block_409f43

block_4089ea:                                     ; preds = %block_40b969, %block_408900
  %5565 = phi i64 [ %117, %block_408900 ], [ %6454, %block_40b969 ]
  %5566 = phi %struct.Memory* [ %111, %block_408900 ], [ %6448, %block_40b969 ]
  %5567 = inttoptr i64 %116 to i32*
  %5568 = load i32, i32* %5567
  %5569 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %5570 = sub i32 %5568, %5569
  %5571 = lshr i32 %5570, 31
  %5572 = trunc i32 %5571 to i8
  %5573 = lshr i32 %5568, 31
  %5574 = lshr i32 %5569, 31
  %5575 = xor i32 %5574, %5573
  %5576 = xor i32 %5571, %5573
  %5577 = add nuw nsw i32 %5576, %5575
  %5578 = icmp eq i32 %5577, 2
  %5579 = icmp ne i8 %5572, 0
  %5580 = xor i1 %5579, %5578
  %5581 = select i1 %5580, i64 16, i64 12178
  %5582 = add i64 %5565, %5581
  br i1 %5580, label %block_4089fa, label %block_40b97c

block_409ea1:                                     ; preds = %block_409e81
  %5583 = sext i32 %9002 to i64
  %5584 = shl nsw i64 %5583, 2
  %5585 = add i64 %5584, ptrtoint (%newc_type* @newc to i64)
  %5586 = inttoptr i64 %5585 to i32*
  store i32 2, i32* %5586
  %5587 = inttoptr i64 %116 to i32*
  %5588 = load i32, i32* %5587
  %5589 = sext i32 %5588 to i64
  %5590 = shl nsw i64 %5589, 5
  %5591 = add i64 %5590, ptrtoint (%vassign_type* @vassign to i64)
  %5592 = inttoptr i64 %5591 to i32*
  store i32 3, i32* %5592
  %5593 = inttoptr i64 %116 to i32*
  %5594 = load i32, i32* %5593
  %5595 = sext i32 %5594 to i64
  %5596 = shl nsw i64 %5595, 5
  store i64 %5596, i64* %5, align 8, !tbaa !1240
  %5597 = add i64 %5596, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5598 = inttoptr i64 %5597 to i32*
  store i32 7, i32* %5598
  %5599 = add i64 %9014, 152
  br label %block_409f43

block_40a1d8:                                     ; preds = %block_40a1b7
  %5600 = sext i32 %5992 to i64
  %5601 = shl nsw i64 %5600, 2
  %5602 = add i64 %5601, ptrtoint (%newc_type* @newc to i64)
  %5603 = inttoptr i64 %5602 to i32*
  store i32 2, i32* %5603
  %5604 = inttoptr i64 %116 to i32*
  %5605 = load i32, i32* %5604
  %5606 = sext i32 %5605 to i64
  %5607 = shl nsw i64 %5606, 5
  %5608 = add i64 %5607, ptrtoint (%vassign_type* @vassign to i64)
  %5609 = inttoptr i64 %5608 to i32*
  store i32 3, i32* %5609
  %5610 = inttoptr i64 %116 to i32*
  %5611 = load i32, i32* %5610
  %5612 = sext i32 %5611 to i64
  %5613 = shl nsw i64 %5612, 5
  store i64 %5613, i64* %5, align 8, !tbaa !1240
  %5614 = add i64 %5613, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5615 = inttoptr i64 %5614 to i32*
  store i32 7, i32* %5615
  %5616 = add i64 %6004, 152
  br label %block_40a27a

block_40eead:                                     ; preds = %block_40ee17
  %5617 = add i32 %3059, -2
  %5618 = icmp eq i32 %5617, 0
  %5619 = select i1 %5618, i64 10, i64 306
  %5620 = add i64 %1041, %5619
  br i1 %5618, label %block_40eeb7, label %block_40efe4

block_40e1d1:                                     ; preds = %block_40e17d
  %5621 = mul nsw i64 %3225, 96
  %5622 = add i64 %5621, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %5623 = inttoptr i64 %5622 to i32*
  %5624 = load i32, i32* %5623
  %5625 = inttoptr i64 %4855 to i32*
  %5626 = load i32, i32* %5625
  %5627 = sext i32 %5626 to i64
  %5628 = mul nsw i64 %5627, 96
  %5629 = add i64 %5628, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 16)
  %5630 = add i64 %3232, 48
  %5631 = inttoptr i64 %5629 to i32*
  store i32 %5624, i32* %5631
  br label %block_40e201

block_40a5b5:                                     ; preds = %block_40a550, %block_40a516.block_40a5b5_crit_edge
  %5632 = phi i32 [ %1885, %block_40a516.block_40a5b5_crit_edge ], [ %5318, %block_40a550 ]
  %5633 = phi i64 [ %1883, %block_40a516.block_40a5b5_crit_edge ], [ %5330, %block_40a550 ]
  %5634 = sext i32 %5632 to i64
  %5635 = shl nsw i64 %5634, 2
  %5636 = add i64 %5635, ptrtoint (%newc_type* @newc to i64)
  %5637 = inttoptr i64 %5636 to i32*
  store i32 3, i32* %5637
  %5638 = inttoptr i64 %116 to i32*
  %5639 = load i32, i32* %5638
  %5640 = sext i32 %5639 to i64
  %5641 = shl nsw i64 %5640, 5
  %5642 = add i64 %5641, ptrtoint (%vassign_type* @vassign to i64)
  %5643 = inttoptr i64 %5642 to i32*
  store i32 5, i32* %5643
  %5644 = inttoptr i64 %116 to i32*
  %5645 = load i32, i32* %5644
  %5646 = sext i32 %5645 to i64
  %5647 = shl nsw i64 %5646, 5
  %5648 = add i64 %5647, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5649 = inttoptr i64 %5648 to i32*
  store i32 6, i32* %5649
  %5650 = inttoptr i64 %116 to i32*
  %5651 = load i32, i32* %5650
  %5652 = sext i32 %5651 to i64
  %5653 = shl nsw i64 %5652, 5
  store i64 %5653, i64* %5, align 8, !tbaa !1240
  %5654 = add i64 %5653, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5655 = add i64 %5633, 84
  %5656 = inttoptr i64 %5654 to i32*
  store i32 7, i32* %5656
  br label %block_40a60e

block_4095a2:                                     ; preds = %block_409598, %block_40958e
  %5657 = phi i64 [ %4758, %block_409598 ], [ %1417, %block_40958e ]
  %5658 = inttoptr i64 %116 to i32*
  %5659 = load i32, i32* %5658
  %5660 = sext i32 %5659 to i64
  %5661 = mul nsw i64 %5660, 48
  %5662 = add i64 %5661, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 40)
  %5663 = inttoptr i64 %5662 to i32*
  %5664 = load i32, i32* %5663
  %5665 = inttoptr i64 %125 to i32*
  store i32 %5664, i32* %5665
  %5666 = inttoptr i64 %125 to i32*
  %5667 = load i32, i32* %5666
  %5668 = icmp ne i32 %5667, 0
  %5669 = select i1 %5668, i64 147, i64 37
  %5670 = add i64 %5657, %5669
  %5671 = inttoptr i64 %116 to i32*
  %5672 = load i32, i32* %5671
  %5673 = sext i32 %5672 to i64
  br i1 %5668, label %block_409635, label %block_4095c7

block_40a9cb:                                     ; preds = %block_40a9ac
  %5674 = add i64 %5946, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %5675 = inttoptr i64 %5674 to i32*
  %5676 = load i32, i32* %5675
  %5677 = icmp ne i32 %5676, 3
  %5678 = select i1 %5677, i64 180, i64 58
  %5679 = add i64 %5937, %5678
  br i1 %5677, label %block_40a9cb.block_40aa7f_crit_edge, label %block_40aa05

block_40a9cb.block_40aa7f_crit_edge:              ; preds = %block_40a9cb
  %5680 = inttoptr i64 %116 to i32*
  %5681 = load i32, i32* %5680
  br label %block_40aa7f

block_40e9c5:                                     ; preds = %block_40e9bb
  %5682 = sext i32 %5806 to i64
  %5683 = mul nsw i64 %5682, 24
  %5684 = add i64 %5683, ptrtoint (%cbc_type* @cbc to i64)
  %5685 = sext i32 %5792 to i64
  %5686 = shl nsw i64 %5685, 2
  %5687 = add i64 %5686, %5684
  %5688 = inttoptr i64 %5687 to i32*
  %5689 = load i32, i32* %5688
  %5690 = zext i32 %5689 to i64
  store i64 %5690, i64* %6, align 8, !tbaa !1240
  %5691 = add i64 %5788, -80
  %5692 = inttoptr i64 %5691 to i32*
  store i32 %5689, i32* %5692
  %5693 = inttoptr i64 %5790 to i32*
  %5694 = load i32, i32* %5693
  %5695 = add i32 %5694, -2
  %5696 = lshr i32 %5695, 31
  %5697 = trunc i32 %5696 to i8
  %5698 = lshr i32 %5694, 31
  %5699 = xor i32 %5696, %5698
  %5700 = add nuw nsw i32 %5699, %5698
  %5701 = icmp eq i32 %5700, 2
  %5702 = icmp ne i8 %5697, 0
  %5703 = xor i1 %5702, %5701
  %5704 = select i1 %5703, i64 41, i64 60
  %5705 = add i64 %5803, %5704
  %5706 = load i64, i64* %10, align 8
  br i1 %5703, label %block_40e9ee, label %block_40ea01

block_40c1c3:                                     ; preds = %block_40c1a2
  %5707 = sext i32 %577 to i64
  %5708 = shl nsw i64 %5707, 2
  %5709 = add i64 %5708, ptrtoint (%newe_type* @newe to i64)
  %5710 = inttoptr i64 %5709 to i32*
  %5711 = load i32, i32* %5710
  %5712 = add i32 %5711, 1
  %5713 = inttoptr i64 %5709 to i32*
  store i32 %5712, i32* %5713
  %5714 = inttoptr i64 %4855 to i32*
  %5715 = load i32, i32* %5714
  %5716 = sext i32 %5715 to i64
  %5717 = mul nsw i64 %5716, 48
  %5718 = add i64 %5717, ptrtoint (%eassign_type* @eassign to i64)
  %5719 = inttoptr i64 %5718 to i32*
  store i32 1, i32* %5719
  %5720 = inttoptr i64 %4865 to i32*
  %5721 = load i32, i32* %5720
  %5722 = sext i32 %5721 to i64
  %5723 = mul nsw i64 %5722, 96
  %5724 = add i64 %5723, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %5725 = inttoptr i64 %5724 to i32*
  %5726 = load i32, i32* %5725
  %5727 = inttoptr i64 %4855 to i32*
  %5728 = load i32, i32* %5727
  %5729 = sext i32 %5728 to i64
  %5730 = mul nsw i64 %5729, 96
  %5731 = add i64 %5730, ptrtoint (%diagn_type* @diagn to i64)
  %5732 = add i64 %591, 99
  %5733 = inttoptr i64 %5731 to i32*
  store i32 %5726, i32* %5733
  br label %block_40c22b

block_40b9c2:                                     ; preds = %block_40b9b2
  %5734 = sext i32 %5812 to i64
  %5735 = shl nsw i64 %5734, 2
  %5736 = add i64 %5735, ptrtoint (%front_type* @front to i64)
  %5737 = inttoptr i64 %5736 to i32*
  %5738 = load i32, i32* %5737
  %5739 = add i64 %5735, ptrtoint (%newc_type* @newc to i64)
  %5740 = inttoptr i64 %5739 to i32*
  %5741 = load i32, i32* %5740
  %5742 = sub i32 %5738, %5741
  %5743 = inttoptr i64 %5736 to i32*
  store i32 %5742, i32* %5743
  %5744 = add i64 %5808, -20
  %5745 = add i64 %5826, 40
  %5746 = inttoptr i64 %5744 to i32*
  store i32 0, i32* %5746
  br label %block_40b9ea

block_40d1c1:                                     ; preds = %block_40d16d
  %5747 = mul nsw i64 %6403, 96
  %5748 = add i64 %5747, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %5749 = inttoptr i64 %5748 to i32*
  %5750 = load i32, i32* %5749
  %5751 = inttoptr i64 %4855 to i32*
  %5752 = load i32, i32* %5751
  %5753 = sext i32 %5752 to i64
  %5754 = mul nsw i64 %5753, 96
  %5755 = add i64 %5754, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %5755, i64* %6292, align 8, !tbaa !1240
  %5756 = add i64 %5754, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 56)
  %5757 = inttoptr i64 %5756 to i32*
  store i32 %5750, i32* %5757
  %5758 = inttoptr i64 %4855 to i32*
  %5759 = load i32, i32* %5758
  %5760 = sext i32 %5759 to i64
  %5761 = mul nsw i64 %5760, 48
  store i64 %5761, i64* %11, align 8, !tbaa !1240
  %5762 = add i64 %5761, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %5763 = inttoptr i64 %5762 to i32*
  %5764 = load i32, i32* %5763
  %5765 = zext i32 %5764 to i64
  store i64 %5765, i64* %4866, align 8, !tbaa !1240
  %5766 = mul nsw i64 %5760, 96
  %5767 = add i64 %5766, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 60)
  %5768 = inttoptr i64 %5767 to i32*
  store i32 %5764, i32* %5768
  %5769 = inttoptr i64 %4865 to i32*
  %5770 = load i32, i32* %5769
  %5771 = sext i32 %5770 to i64
  %5772 = mul nsw i64 %5771, 96
  %5773 = add i64 %5772, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %5774 = inttoptr i64 %5773 to i32*
  %5775 = load i32, i32* %5774
  %5776 = sext i32 %5775 to i64
  %5777 = mul nsw i64 %5776, 48
  %5778 = add i64 %5777, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 4)
  %5779 = inttoptr i64 %5778 to i32*
  store i32 1, i32* %5779
  %5780 = inttoptr i64 %4855 to i32*
  %5781 = load i32, i32* %5780
  %5782 = sext i32 %5781 to i64
  %5783 = mul nsw i64 %5782, 48
  %5784 = add i64 %5783, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 28)
  %5785 = add i64 %6410, 163
  %5786 = inttoptr i64 %5784 to i32*
  store i32 1, i32* %5786
  br label %block_40d264

block_40e9bb:                                     ; preds = %block_40e97e, %block_40efe9
  %5787 = phi i64 [ %6247, %block_40e97e ], [ %150, %block_40efe9 ]
  %5788 = phi i64 [ %6243, %block_40e97e ], [ %142, %block_40efe9 ]
  %5789 = phi %struct.Memory* [ %8289, %block_40e97e ], [ %144, %block_40efe9 ]
  %5790 = add i64 %5788, -20
  %5791 = inttoptr i64 %5790 to i32*
  %5792 = load i32, i32* %5791
  %5793 = add i32 %5792, -6
  %5794 = lshr i32 %5793, 31
  %5795 = trunc i32 %5794 to i8
  %5796 = lshr i32 %5792, 31
  %5797 = xor i32 %5794, %5796
  %5798 = add nuw nsw i32 %5797, %5796
  %5799 = icmp eq i32 %5798, 2
  %5800 = icmp ne i8 %5795, 0
  %5801 = xor i1 %5800, %5799
  %5802 = select i1 %5801, i64 10, i64 1601
  %5803 = add i64 %5787, %5802
  %5804 = add i64 %5788, -8
  %5805 = inttoptr i64 %5804 to i32*
  %5806 = load i32, i32* %5805
  br i1 %5801, label %block_40e9c5, label %block_40effc

block_40b9b2:                                     ; preds = %block_40b97c, %block_40ba44
  %5807 = phi i64 [ %6310, %block_40b97c ], [ %5022, %block_40ba44 ]
  %5808 = phi i64 [ %6307, %block_40b97c ], [ %3454, %block_40ba44 ]
  %5809 = phi %struct.Memory* [ %6306, %block_40b97c ], [ %3455, %block_40ba44 ]
  %5810 = add i64 %5808, -8
  %5811 = inttoptr i64 %5810 to i32*
  %5812 = load i32, i32* %5811
  %5813 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %5814 = sub i32 %5812, %5813
  %5815 = lshr i32 %5814, 31
  %5816 = trunc i32 %5815 to i8
  %5817 = lshr i32 %5812, 31
  %5818 = lshr i32 %5813, 31
  %5819 = xor i32 %5818, %5817
  %5820 = xor i32 %5815, %5817
  %5821 = add nuw nsw i32 %5820, %5819
  %5822 = icmp eq i32 %5821, 2
  %5823 = icmp ne i8 %5816, 0
  %5824 = xor i1 %5823, %5822
  %5825 = select i1 %5824, i64 16, i64 165
  %5826 = add i64 %5807, %5825
  br i1 %5824, label %block_40b9c2, label %block_40ba57

block_40ee39:                                     ; preds = %block_40ee32, %block_40ee43
  %5827 = phi i64 [ %7001, %block_40ee32 ], [ %1079, %block_40ee43 ]
  %5828 = phi %struct.Memory* [ %956, %block_40ee32 ], [ %5828, %block_40ee43 ]
  %5829 = inttoptr i64 %1038 to i32*
  %5830 = load i32, i32* %5829
  %5831 = add i32 %5830, -4
  %5832 = lshr i32 %5831, 31
  %5833 = lshr i32 %5830, 31
  %5834 = xor i32 %5832, %5833
  %5835 = add nuw nsw i32 %5834, %5833
  %5836 = icmp eq i32 %5835, 2
  %5837 = icmp ne i32 %5832, 0
  %5838 = xor i1 %5837, %5836
  %5839 = select i1 %5838, i64 10, i64 92
  %5840 = add i64 %5827, %5839
  br i1 %5838, label %block_40ee43, label %block_40ee95

block_40aded:                                     ; preds = %block_40ad21
  %5841 = icmp ne i32 %3636, 9
  %5842 = select i1 %5841, i64 183, i64 10
  %5843 = add i64 %8870, %5842
  br i1 %5841, label %block_40aea4, label %block_40adf7

block_409dda:                                     ; preds = %block_409dbb
  %5844 = shl nsw i64 %1242, 2
  %5845 = add i64 %5844, ptrtoint (%newc_type* @newc to i64)
  %5846 = inttoptr i64 %5845 to i32*
  store i32 4, i32* %5846
  %5847 = inttoptr i64 %116 to i32*
  %5848 = load i32, i32* %5847
  %5849 = sext i32 %5848 to i64
  %5850 = shl nsw i64 %5849, 5
  %5851 = add i64 %5850, ptrtoint (%vassign_type* @vassign to i64)
  %5852 = inttoptr i64 %5851 to i32*
  store i32 1, i32* %5852
  %5853 = inttoptr i64 %116 to i32*
  %5854 = load i32, i32* %5853
  %5855 = sext i32 %5854 to i64
  %5856 = shl nsw i64 %5855, 5
  %5857 = add i64 %5856, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5858 = inttoptr i64 %5857 to i32*
  store i32 3, i32* %5858
  %5859 = inttoptr i64 %116 to i32*
  %5860 = load i32, i32* %5859
  %5861 = sext i32 %5860 to i64
  %5862 = shl nsw i64 %5861, 5
  %5863 = add i64 %5862, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %5864 = inttoptr i64 %5863 to i32*
  store i32 5, i32* %5864
  %5865 = inttoptr i64 %116 to i32*
  %5866 = load i32, i32* %5865
  %5867 = sext i32 %5866 to i64
  %5868 = shl nsw i64 %5867, 5
  store i64 %5868, i64* %5, align 8, !tbaa !1240
  %5869 = add i64 %5868, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %5870 = add i64 %1249, 105
  %5871 = inttoptr i64 %5869 to i32*
  store i32 7, i32* %5871
  br label %block_409f43

block_40a448:                                     ; preds = %block_40a427
  %5872 = sext i32 %7584 to i64
  %5873 = mul nsw i64 %5872, 96
  %5874 = add i64 %5873, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %5875 = inttoptr i64 %5874 to i32*
  %5876 = load i32, i32* %5875
  %5877 = inttoptr i64 %124 to i32*
  store i32 %5876, i32* %5877
  %5878 = inttoptr i64 %124 to i32*
  %5879 = load i32, i32* %5878
  %5880 = sext i32 %5879 to i64
  %5881 = mul nsw i64 %5880, 24
  %5882 = add i64 %5881, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %5883 = inttoptr i64 %5882 to i32*
  %5884 = load i32, i32* %5883
  %5885 = icmp ne i32 %5884, 3
  %5886 = select i1 %5885, i64 138, i64 58
  %5887 = add i64 %7596, %5886
  br i1 %5885, label %block_40a448.block_40a4d2_crit_edge, label %block_40a482

block_40a448.block_40a4d2_crit_edge:              ; preds = %block_40a448
  %5888 = inttoptr i64 %116 to i32*
  %5889 = load i32, i32* %5888
  br label %block_40a4d2

block_4091ae:                                     ; preds = %block_4091a4
  %5890 = inttoptr i64 %116 to i32*
  %5891 = load i32, i32* %5890
  %5892 = sext i32 %5891 to i64
  %5893 = shl nsw i64 %5892, 2
  %5894 = add i64 %5893, ptrtoint (%newc_type* @newc to i64)
  %5895 = inttoptr i64 %5894 to i32*
  store i32 2, i32* %5895
  %5896 = inttoptr i64 %116 to i32*
  %5897 = load i32, i32* %5896
  %5898 = sext i32 %5897 to i64
  %5899 = shl nsw i64 %5898, 5
  %5900 = add i64 %5899, ptrtoint (%vassign_type* @vassign to i64)
  %5901 = inttoptr i64 %5900 to i32*
  store i32 6, i32* %5901
  %5902 = inttoptr i64 %116 to i32*
  %5903 = load i32, i32* %5902
  %5904 = sext i32 %5903 to i64
  %5905 = shl nsw i64 %5904, 5
  store i64 %5905, i64* %5, align 8, !tbaa !1240
  %5906 = add i64 %5905, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %5907 = add i64 %6009, 63
  %5908 = inttoptr i64 %5906 to i32*
  store i32 7, i32* %5908
  br label %block_4093ea

block_40aef2:                                     ; preds = %block_40aeb8
  %5909 = mul nsw i64 %703, 96
  %5910 = add i64 %5909, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %5911 = inttoptr i64 %5910 to i32*
  %5912 = load i32, i32* %5911
  %5913 = inttoptr i64 %116 to i32*
  %5914 = load i32, i32* %5913
  %5915 = sub i32 %5912, %5914
  %5916 = lshr i32 %5915, 31
  %5917 = lshr i32 %5912, 31
  %5918 = lshr i32 %5914, 31
  %5919 = xor i32 %5918, %5917
  %5920 = xor i32 %5916, %5917
  %5921 = add nuw nsw i32 %5920, %5919
  %5922 = icmp eq i32 %5921, 2
  %5923 = icmp ne i32 %5916, 0
  %5924 = xor i1 %5923, %5922
  %5925 = select i1 %5924, i64 33, i64 185
  %5926 = add i64 %710, %5925
  br i1 %5924, label %block_40af13, label %block_40afab

block_40a9ac:                                     ; preds = %block_40a998, %block_40a9a2
  %5927 = phi i64 [ %6149, %block_40a998 ], [ %6017, %block_40a9a2 ]
  %5928 = inttoptr i64 %116 to i32*
  %5929 = load i32, i32* %5928
  %5930 = sext i32 %5929 to i64
  %5931 = mul nsw i64 %5930, 48
  %5932 = add i64 %5931, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %5933 = inttoptr i64 %5932 to i32*
  %5934 = load i32, i32* %5933
  %5935 = icmp ne i32 %5934, 0
  %5936 = select i1 %5935, i64 321, i64 31
  %5937 = add i64 %5927, %5936
  %5938 = mul nsw i64 %5930, 96
  %5939 = add i64 %5938, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %5940 = inttoptr i64 %5939 to i32*
  %5941 = load i32, i32* %5940
  %5942 = inttoptr i64 %123 to i32*
  store i32 %5941, i32* %5942
  %5943 = inttoptr i64 %123 to i32*
  %5944 = load i32, i32* %5943
  %5945 = sext i32 %5944 to i64
  %5946 = mul nsw i64 %5945, 24
  br i1 %5935, label %block_40aaed, label %block_40a9cb

block_40def0:                                     ; preds = %block_40dd76
  %5947 = icmp ne i32 %1512, 2
  %5948 = select i1 %5947, i64 154, i64 10
  %5949 = add i64 %1515, %5948
  br i1 %5947, label %block_40e372, label %block_40defa

block_40e55e:                                     ; preds = %block_40e554
  %5950 = inttoptr i64 %4855 to i32*
  %5951 = load i32, i32* %5950
  %5952 = sext i32 %5951 to i64
  %5953 = mul nsw i64 %5952, 96
  %5954 = add i64 %5953, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %5955 = inttoptr i64 %5954 to i32*
  %5956 = load i32, i32* %5955
  %5957 = inttoptr i64 %4865 to i32*
  store i32 %5956, i32* %5957
  %5958 = inttoptr i64 %4865 to i32*
  %5959 = load i32, i32* %5958
  %5960 = sext i32 %5959 to i64
  %5961 = mul nsw i64 %5960, 24
  %5962 = add i64 %5961, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %5963 = inttoptr i64 %5962 to i32*
  %5964 = load i32, i32* %5963
  %5965 = icmp eq i32 %5964, 3
  %5966 = select i1 %5965, i64 195, i64 58
  %5967 = add i64 %9255, %5966
  br i1 %5965, label %block_40e6f2, label %block_40e598

block_40c86f:                                     ; preds = %block_40c865
  %5968 = inttoptr i64 %4855 to i32*
  %5969 = load i32, i32* %5968
  %5970 = sext i32 %5969 to i64
  %5971 = shl nsw i64 %5970, 2
  %5972 = add i64 %5971, ptrtoint (%newe_type* @newe to i64)
  %5973 = inttoptr i64 %5972 to i32*
  %5974 = load i32, i32* %5973
  %5975 = add i32 %5974, 1
  %5976 = inttoptr i64 %5972 to i32*
  store i32 %5975, i32* %5976
  %5977 = inttoptr i64 %4855 to i32*
  %5978 = load i32, i32* %5977
  %5979 = sext i32 %5978 to i64
  %5980 = mul nsw i64 %5979, 48
  %5981 = add i64 %5980, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 12)
  %5982 = add i64 %9260, 53
  %5983 = inttoptr i64 %5981 to i32*
  store i32 1, i32* %5983
  br label %block_40c8a4

block_40beca:                                     ; preds = %block_40be5f, %block_40be40, %block_40be80
  %5984 = phi i64 [ %898, %block_40be40 ], [ %9297, %block_40be5f ], [ %804, %block_40be80 ]
  %5985 = phi %struct.Memory* [ %888, %block_40be40 ], [ %888, %block_40be5f ], [ %888, %block_40be80 ]
  %5986 = add i64 %5984, 5
  br label %block_40becf

block_40a1b7:                                     ; preds = %block_40a17d
  %5987 = mul nsw i64 %6259, 96
  %5988 = add i64 %5987, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %5989 = inttoptr i64 %5988 to i32*
  %5990 = load i32, i32* %5989
  %5991 = inttoptr i64 %116 to i32*
  %5992 = load i32, i32* %5991
  %5993 = sub i32 %5990, %5992
  %5994 = lshr i32 %5993, 31
  %5995 = lshr i32 %5990, 31
  %5996 = lshr i32 %5992, 31
  %5997 = xor i32 %5996, %5995
  %5998 = xor i32 %5994, %5995
  %5999 = add nuw nsw i32 %5998, %5997
  %6000 = icmp eq i32 %5999, 2
  %6001 = icmp ne i32 %5994, 0
  %6002 = xor i1 %6001, %6000
  %6003 = select i1 %6002, i64 33, i64 101
  %6004 = add i64 %6266, %6003
  br i1 %6002, label %block_40a1d8, label %block_40a21c

block_4091a4:                                     ; preds = %block_40916b
  %6005 = inttoptr i64 %126 to i32*
  %6006 = load i32, i32* %6005
  %6007 = icmp ne i32 %6006, 0
  %6008 = select i1 %6007, i64 78, i64 10
  %6009 = add i64 %6431, %6008
  br i1 %6007, label %block_4091fc, label %block_4091ae

block_40e9ee:                                     ; preds = %block_40e9c5
  %6010 = add i64 %5706, -48
  %6011 = inttoptr i64 %6010 to i32*
  store i32 4, i32* %6011
  %6012 = add i64 %5706, -104
  %6013 = add i64 %5705, 14
  %6014 = inttoptr i64 %6012 to i32*
  store i32 1, i32* %6014
  br label %block_40ea31

block_40a9a2:                                     ; preds = %block_40a998
  %6015 = icmp ne i32 %6146, 3
  %6016 = select i1 %6015, i64 880, i64 10
  %6017 = add i64 %6149, %6016
  br i1 %6015, label %block_40ad1c, label %block_40a9ac

block_40acaf:                                     ; preds = %block_40ac4b, %block_40ac12.block_40acaf_crit_edge
  %6018 = phi i32 [ %2820, %block_40ac12.block_40acaf_crit_edge ], [ %8881, %block_40ac4b ]
  %6019 = phi i64 [ %2818, %block_40ac12.block_40acaf_crit_edge ], [ %8893, %block_40ac4b ]
  %6020 = sext i32 %6018 to i64
  %6021 = shl nsw i64 %6020, 2
  %6022 = add i64 %6021, ptrtoint (%newc_type* @newc to i64)
  %6023 = inttoptr i64 %6022 to i32*
  store i32 3, i32* %6023
  %6024 = inttoptr i64 %116 to i32*
  %6025 = load i32, i32* %6024
  %6026 = sext i32 %6025 to i64
  %6027 = shl nsw i64 %6026, 5
  %6028 = add i64 %6027, ptrtoint (%vassign_type* @vassign to i64)
  %6029 = inttoptr i64 %6028 to i32*
  store i32 3, i32* %6029
  %6030 = inttoptr i64 %116 to i32*
  %6031 = load i32, i32* %6030
  %6032 = sext i32 %6031 to i64
  %6033 = shl nsw i64 %6032, 5
  %6034 = add i64 %6033, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6035 = inttoptr i64 %6034 to i32*
  store i32 5, i32* %6035
  %6036 = inttoptr i64 %116 to i32*
  %6037 = load i32, i32* %6036
  %6038 = sext i32 %6037 to i64
  %6039 = shl nsw i64 %6038, 5
  store i64 %6039, i64* %5, align 8, !tbaa !1240
  %6040 = add i64 %6039, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6041 = add i64 %6019, 84
  %6042 = inttoptr i64 %6040 to i32*
  store i32 7, i32* %6042
  br label %block_40ad08

block_40c99e:                                     ; preds = %block_40c945
  %6043 = mul nsw i64 %6951, 96
  %6044 = add i64 %6043, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %6045 = inttoptr i64 %6044 to i32*
  %6046 = load i32, i32* %6045
  %6047 = inttoptr i64 %4865 to i32*
  store i32 %6046, i32* %6047
  %6048 = inttoptr i64 %4865 to i32*
  %6049 = load i32, i32* %6048
  %6050 = sext i32 %6049 to i64
  %6051 = mul nsw i64 %6050, 24
  %6052 = add i64 %6051, ptrtoint (%cbc_type* @cbc to i64)
  %6053 = inttoptr i64 %6052 to i32*
  %6054 = load i32, i32* %6053
  %6055 = icmp ne i32 %6054, 3
  %6056 = select i1 %6055, i64 89, i64 57
  %6057 = add i64 %6958, %6056
  br i1 %6055, label %block_40c99e.block_40c9f7_crit_edge, label %block_40c9d7

block_40c99e.block_40c9f7_crit_edge:              ; preds = %block_40c99e
  %6058 = inttoptr i64 %4855 to i32*
  %6059 = load i32, i32* %6058
  br label %block_40c9f7

block_40e679:                                     ; preds = %block_40e63a
  %6060 = inttoptr i64 %4855 to i32*
  %6061 = load i32, i32* %6060
  %6062 = sext i32 %6061 to i64
  %6063 = mul nsw i64 %6062, 96
  %6064 = add i64 %6063, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %6065 = inttoptr i64 %6064 to i32*
  %6066 = load i32, i32* %6065
  %6067 = inttoptr i64 %4865 to i32*
  store i32 %6066, i32* %6067
  %6068 = inttoptr i64 %4865 to i32*
  %6069 = load i32, i32* %6068
  %6070 = sext i32 %6069 to i64
  %6071 = mul nsw i64 %6070, 24
  %6072 = add i64 %6071, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %6073 = inttoptr i64 %6072 to i32*
  %6074 = load i32, i32* %6073
  %6075 = icmp ne i32 %6074, 2
  %6076 = select i1 %6075, i64 106, i64 58
  %6077 = add i64 %990, %6076
  br i1 %6075, label %block_40e6e3, label %block_40e6b3

block_40c31c:                                     ; preds = %block_40c2fb, %block_40c2c1.block_40c31c_crit_edge
  %6078 = phi i32 [ %7493, %block_40c2c1.block_40c31c_crit_edge ], [ %7674, %block_40c2fb ]
  %6079 = phi i64 [ %7491, %block_40c2c1.block_40c31c_crit_edge ], [ %7688, %block_40c2fb ]
  %6080 = sext i32 %6078 to i64
  %6081 = shl nsw i64 %6080, 2
  %6082 = add i64 %6081, ptrtoint (%newe_type* @newe to i64)
  %6083 = inttoptr i64 %6082 to i32*
  %6084 = load i32, i32* %6083
  %6085 = add i32 %6084, 1
  %6086 = inttoptr i64 %6082 to i32*
  store i32 %6085, i32* %6086
  %6087 = inttoptr i64 %4855 to i32*
  %6088 = load i32, i32* %6087
  %6089 = sext i32 %6088 to i64
  %6090 = mul nsw i64 %6089, 48
  %6091 = add i64 %6090, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 32)
  %6092 = inttoptr i64 %6091 to i32*
  store i32 1, i32* %6092
  %6093 = inttoptr i64 %4865 to i32*
  %6094 = load i32, i32* %6093
  %6095 = sext i32 %6094 to i64
  %6096 = mul nsw i64 %6095, 24
  %6097 = add i64 %6096, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %6098 = inttoptr i64 %6097 to i32*
  %6099 = load i32, i32* %6098
  %6100 = icmp ne i32 %6099, 2
  %6101 = select i1 %6100, i64 247, i64 84
  %6102 = add i64 %6079, %6101
  br i1 %6100, label %block_40c413, label %block_40c370

block_40d99d:                                     ; preds = %block_40d97c, %block_40d942.block_40d99d_crit_edge
  %6103 = phi i32 [ %7513, %block_40d942.block_40d99d_crit_edge ], [ %7694, %block_40d97c ]
  %6104 = phi i64 [ %7511, %block_40d942.block_40d99d_crit_edge ], [ %7708, %block_40d97c ]
  %6105 = sext i32 %6103 to i64
  %6106 = shl nsw i64 %6105, 2
  %6107 = add i64 %6106, ptrtoint (%newe_type* @newe to i64)
  %6108 = inttoptr i64 %6107 to i32*
  %6109 = load i32, i32* %6108
  %6110 = add i32 %6109, 1
  %6111 = inttoptr i64 %6107 to i32*
  store i32 %6110, i32* %6111
  %6112 = inttoptr i64 %4855 to i32*
  %6113 = load i32, i32* %6112
  %6114 = sext i32 %6113 to i64
  %6115 = mul nsw i64 %6114, 48
  %6116 = add i64 %6115, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 24)
  %6117 = inttoptr i64 %6116 to i32*
  store i32 1, i32* %6117
  %6118 = inttoptr i64 %4865 to i32*
  %6119 = load i32, i32* %6118
  %6120 = sext i32 %6119 to i64
  %6121 = mul nsw i64 %6120, 24
  %6122 = add i64 %6121, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %6123 = inttoptr i64 %6122 to i32*
  %6124 = load i32, i32* %6123
  %6125 = icmp ne i32 %6124, 2
  %6126 = select i1 %6125, i64 246, i64 84
  %6127 = add i64 %6104, %6126
  br i1 %6125, label %block_40da93, label %block_40d9f1

block_409ff3:                                     ; preds = %block_409f66
  %6128 = mul nsw i64 %6962, 96
  %6129 = add i64 %6128, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %6130 = inttoptr i64 %6129 to i32*
  %6131 = load i32, i32* %6130
  %6132 = inttoptr i64 %123 to i32*
  store i32 %6131, i32* %6132
  %6133 = inttoptr i64 %123 to i32*
  %6134 = load i32, i32* %6133
  %6135 = sext i32 %6134 to i64
  %6136 = mul nsw i64 %6135, 24
  %6137 = add i64 %6136, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %6138 = inttoptr i64 %6137 to i32*
  %6139 = load i32, i32* %6138
  %6140 = icmp ne i32 %6139, 3
  %6141 = select i1 %6140, i64 159, i64 58
  %6142 = add i64 %6969, %6141
  br i1 %6140, label %block_409ff3.block_40a092_crit_edge, label %block_40a02d

block_409ff3.block_40a092_crit_edge:              ; preds = %block_409ff3
  %6143 = inttoptr i64 %116 to i32*
  %6144 = load i32, i32* %6143
  br label %block_40a092

block_40a998:                                     ; preds = %block_40a622
  %6145 = inttoptr i64 %121 to i32*
  %6146 = load i32, i32* %6145
  %6147 = icmp eq i32 %6146, 2
  %6148 = select i1 %6147, i64 20, i64 10
  %6149 = add i64 %2077, %6148
  br i1 %6147, label %block_40a9ac, label %block_40a9a2

block_40cd04:                                     ; preds = %block_40ccfa
  %6150 = inttoptr i64 %4855 to i32*
  %6151 = load i32, i32* %6150
  %6152 = sext i32 %6151 to i64
  %6153 = mul nsw i64 %6152, 48
  %6154 = add i64 %6153, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %6155 = inttoptr i64 %6154 to i32*
  %6156 = load i32, i32* %6155
  %6157 = icmp ne i32 %6156, 0
  %6158 = select i1 %6157, i64 89, i64 31
  %6159 = add i64 %1976, %6158
  br i1 %6157, label %block_40cd5d, label %block_40cd23

block_409994:                                     ; preds = %block_409973
  %6160 = sext i32 %6373 to i64
  %6161 = shl nsw i64 %6160, 2
  %6162 = add i64 %6161, ptrtoint (%newc_type* @newc to i64)
  %6163 = inttoptr i64 %6162 to i32*
  store i32 3, i32* %6163
  %6164 = inttoptr i64 %116 to i32*
  %6165 = load i32, i32* %6164
  %6166 = sext i32 %6165 to i64
  %6167 = shl nsw i64 %6166, 5
  %6168 = add i64 %6167, ptrtoint (%vassign_type* @vassign to i64)
  %6169 = inttoptr i64 %6168 to i32*
  store i32 5, i32* %6169
  %6170 = inttoptr i64 %116 to i32*
  %6171 = load i32, i32* %6170
  %6172 = sext i32 %6171 to i64
  %6173 = shl nsw i64 %6172, 5
  %6174 = add i64 %6173, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6175 = inttoptr i64 %6174 to i32*
  store i32 6, i32* %6175
  %6176 = inttoptr i64 %116 to i32*
  %6177 = load i32, i32* %6176
  %6178 = sext i32 %6177 to i64
  %6179 = shl nsw i64 %6178, 5
  store i64 %6179, i64* %5, align 8, !tbaa !1240
  %6180 = add i64 %6179, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6181 = inttoptr i64 %6180 to i32*
  store i32 7, i32* %6181
  %6182 = add i64 %6385, 194
  br label %block_409f43

block_40aaed:                                     ; preds = %block_40a9ac
  %6183 = add i64 %5946, ptrtoint (%cbc_type* @cbc to i64)
  %6184 = inttoptr i64 %6183 to i32*
  %6185 = load i32, i32* %6184
  %6186 = icmp ne i32 %6185, 3
  %6187 = select i1 %6186, i64 293, i64 57
  %6188 = add i64 %5937, %6187
  br i1 %6186, label %block_40aaed.block_40ac12_crit_edge, label %block_40ab26

block_40aaed.block_40ac12_crit_edge:              ; preds = %block_40aaed
  %6189 = inttoptr i64 %116 to i32*
  %6190 = load i32, i32* %6189
  br label %block_40ac12

block_40f18c:                                     ; preds = %block_40f0f2
  %6191 = inttoptr i64 %3934 to i32*
  %6192 = load i32, i32* %6191
  %6193 = add i32 %6192, 1
  %6194 = inttoptr i64 %3934 to i32*
  store i32 %6193, i32* %6194
  %6195 = add i64 %7561, -171
  br label %block_40f0e1

block_40cce6:                                     ; preds = %block_40cc7c, %block_40cc5e, %block_40cc9c
  %6196 = phi i64 [ %2577, %block_40cc5e ], [ %6948, %block_40cc7c ], [ %2240, %block_40cc9c ]
  %6197 = phi %struct.Memory* [ %2567, %block_40cc5e ], [ %2567, %block_40cc7c ], [ %2567, %block_40cc9c ]
  %6198 = add i64 %6196, 5
  br label %block_40cceb

block_408f7a:                                     ; preds = %block_408f70
  %6199 = inttoptr i64 %116 to i32*
  %6200 = load i32, i32* %6199
  %6201 = sext i32 %6200 to i64
  %6202 = mul nsw i64 %6201, 96
  %6203 = add i64 %6202, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %6204 = inttoptr i64 %6203 to i32*
  %6205 = load i32, i32* %6204
  %6206 = inttoptr i64 %123 to i32*
  store i32 %6205, i32* %6206
  %6207 = inttoptr i64 %123 to i32*
  %6208 = load i32, i32* %6207
  %6209 = sext i32 %6208 to i64
  %6210 = mul nsw i64 %6209, 24
  %6211 = add i64 %6210, ptrtoint (%cbc_type* @cbc to i64)
  %6212 = inttoptr i64 %6211 to i32*
  %6213 = load i32, i32* %6212
  %6214 = icmp ne i32 %6213, 3
  %6215 = select i1 %6214, i64 136, i64 57
  %6216 = add i64 %4028, %6215
  br i1 %6214, label %block_408f7a.block_409002_crit_edge, label %block_408fb3

block_408f7a.block_409002_crit_edge:              ; preds = %block_408f7a
  %6217 = inttoptr i64 %116 to i32*
  %6218 = load i32, i32* %6217
  br label %block_409002

block_40d2fd:                                     ; preds = %block_40d108, %block_40d0ce, %block_40d2f3
  %6219 = phi i64 [ %4525, %block_40d0ce ], [ %7275, %block_40d108 ], [ %4032, %block_40d2f3 ]
  %6220 = phi i64 [ 511, %block_40d0ce ], [ 10, %block_40d108 ], [ 10, %block_40d2f3 ]
  %6221 = phi %struct.Memory* [ %2269, %block_40d0ce ], [ %2269, %block_40d108 ], [ %4031, %block_40d2f3 ]
  %6222 = add i64 %6220, %6219
  br label %block_40d307

block_40e97e:                                     ; preds = %block_40e96e
  %6223 = sext i32 %8292 to i64
  %6224 = shl nsw i64 %6223, 2
  %6225 = add i64 %6224, ptrtoint (%front_type* @front to i64)
  %6226 = inttoptr i64 %6225 to i32*
  %6227 = load i32, i32* %6226
  %6228 = add i64 %6224, ptrtoint (%newc_type* @newc to i64)
  %6229 = inttoptr i64 %6228 to i32*
  %6230 = load i32, i32* %6229
  %6231 = sub i32 %6227, %6230
  %6232 = inttoptr i64 %6225 to i32*
  store i32 %6231, i32* %6232
  %6233 = load i32, i32* bitcast (%nvertex_type* @nvertex to i32*)
  %6234 = inttoptr i64 %8290 to i32*
  %6235 = load i32, i32* %6234
  %6236 = sext i32 %6235 to i64
  %6237 = shl nsw i64 %6236, 2
  %6238 = add i64 %6237, ptrtoint (%front_type* @front to i64)
  %6239 = inttoptr i64 %6238 to i32*
  %6240 = load i32, i32* %6239
  %6241 = add i32 %6240, %6233
  %6242 = zext i32 %6241 to i64
  store i64 %6242, i64* %5, align 8, !tbaa !1240
  %6243 = load i64, i64* %10, align 8
  %6244 = add i64 %6243, -4
  %6245 = inttoptr i64 %6244 to i32*
  store i32 %6241, i32* %6245
  %6246 = add i64 %6243, -20
  %6247 = add i64 %8306, 61
  %6248 = inttoptr i64 %6246 to i32*
  store i32 0, i32* %6248
  br label %block_40e9bb

block_408afc:                                     ; preds = %block_408af2
  %6249 = icmp ne i32 %4082, 3
  %6250 = select i1 %6249, i64 24, i64 10
  %6251 = add i64 %4085, %6250
  br i1 %6249, label %block_408b14, label %block_408b06

block_40a17d:                                     ; preds = %block_40a0f0
  %6252 = mul nsw i64 %7599, 96
  %6253 = add i64 %6252, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %6254 = inttoptr i64 %6253 to i32*
  %6255 = load i32, i32* %6254
  %6256 = inttoptr i64 %123 to i32*
  store i32 %6255, i32* %6256
  %6257 = inttoptr i64 %123 to i32*
  %6258 = load i32, i32* %6257
  %6259 = sext i32 %6258 to i64
  %6260 = mul nsw i64 %6259, 24
  %6261 = add i64 %6260, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %6262 = inttoptr i64 %6261 to i32*
  %6263 = load i32, i32* %6262
  %6264 = icmp ne i32 %6263, 3
  %6265 = select i1 %6264, i64 159, i64 58
  %6266 = add i64 %7606, %6265
  br i1 %6264, label %block_40a17d.block_40a21c_crit_edge, label %block_40a1b7

block_40a17d.block_40a21c_crit_edge:              ; preds = %block_40a17d
  %6267 = inttoptr i64 %116 to i32*
  %6268 = load i32, i32* %6267
  br label %block_40a21c

block_40f35a:                                     ; preds = %block_40f02d
  %6269 = add i32 %7269, 1
  %6270 = inttoptr i64 %7267 to i32*
  store i32 %6269, i32* %6270
  %6271 = add i64 %7266, -836
  br label %block_40f016

block_4092e8:                                     ; preds = %block_4092de
  %6272 = inttoptr i64 %116 to i32*
  %6273 = load i32, i32* %6272
  %6274 = sext i32 %6273 to i64
  %6275 = mul nsw i64 %6274, 96
  %6276 = add i64 %6275, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %6277 = inttoptr i64 %6276 to i32*
  %6278 = load i32, i32* %6277
  %6279 = inttoptr i64 %123 to i32*
  store i32 %6278, i32* %6279
  %6280 = inttoptr i64 %123 to i32*
  %6281 = load i32, i32* %6280
  %6282 = sext i32 %6281 to i64
  %6283 = mul nsw i64 %6282, 24
  %6284 = add i64 %6283, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %6285 = inttoptr i64 %6284 to i32*
  %6286 = load i32, i32* %6285
  %6287 = icmp ne i32 %6286, 3
  %6288 = select i1 %6287, i64 138, i64 58
  %6289 = add i64 %4120, %6288
  br i1 %6287, label %block_4092e8.block_409372_crit_edge, label %block_409322

block_4092e8.block_409372_crit_edge:              ; preds = %block_4092e8
  %6290 = inttoptr i64 %116 to i32*
  %6291 = load i32, i32* %6290
  br label %block_409372

block_40b97c:                                     ; preds = %block_4089ea
  %6292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 ptrtoint (%front_type* @front to i64), i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%newc_type* @newc to i64), i64* %7, align 8, !tbaa !1240
  %6293 = zext i32 %5569 to i64
  store i64 %6293, i64* %6, align 8, !tbaa !1240
  %6294 = add i64 %5582, 81828
  %6295 = add i64 %5582, 32
  %6296 = load i64, i64* %9, align 8, !tbaa !1240
  %6297 = add i64 %6296, -8
  %6298 = inttoptr i64 %6297 to i64*
  store i64 %6295, i64* %6298
  store i64 %6297, i64* %9, align 8, !tbaa !1240
  %6299 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %6294, %struct.Memory* %5566)
  %6300 = load i64, i64* %3, align 8
  store i64 ptrtoint (%front_type* @front to i64), i64* %8, align 8, !tbaa !1240
  %6301 = add i64 %6300, 82820
  %6302 = add i64 %6300, 15
  %6303 = load i64, i64* %9, align 8, !tbaa !1240
  %6304 = add i64 %6303, -8
  %6305 = inttoptr i64 %6304 to i64*
  store i64 %6302, i64* %6305
  store i64 %6304, i64* %9, align 8, !tbaa !1240
  %6306 = tail call %struct.Memory* @sub_41fd20_parallel_add(%struct.State* nonnull %0, i64 %6301, %struct.Memory* %6299)
  %6307 = load i64, i64* %10, align 8
  %6308 = add i64 %6307, -8
  %6309 = load i64, i64* %3, align 8
  %6310 = add i64 %6309, 7
  %6311 = inttoptr i64 %6308 to i32*
  store i32 0, i32* %6311
  br label %block_40b9b2

block_40d4d1:                                     ; preds = %block_40d4b0
  %6312 = sext i32 %6529 to i64
  %6313 = mul nsw i64 %6312, 48
  %6314 = add i64 %6313, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 8)
  %6315 = inttoptr i64 %6314 to i32*
  %6316 = load i32, i32* %6315
  %6317 = sext i32 %6316 to i64
  %6318 = shl nsw i64 %6317, 2
  %6319 = add i64 %6524, add (i64 ptrtoint (%sje_type* @sje to i64), i64 40)
  %6320 = add i64 %6319, %6318
  %6321 = inttoptr i64 %6320 to i32*
  %6322 = load i32, i32* %6321
  %6323 = mul nsw i64 %6312, 96
  %6324 = add i64 %6323, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 40)
  %6325 = add i64 %6543, 74
  %6326 = inttoptr i64 %6324 to i32*
  store i32 %6322, i32* %6326
  br label %block_40d51b

block_40b174:                                     ; preds = %block_40b153
  %6327 = sext i32 %6697 to i64
  %6328 = shl nsw i64 %6327, 2
  %6329 = add i64 %6328, ptrtoint (%newc_type* @newc to i64)
  %6330 = inttoptr i64 %6329 to i32*
  store i32 6, i32* %6330
  %6331 = inttoptr i64 %116 to i32*
  %6332 = load i32, i32* %6331
  %6333 = sext i32 %6332 to i64
  %6334 = shl nsw i64 %6333, 5
  %6335 = add i64 %6334, ptrtoint (%vassign_type* @vassign to i64)
  %6336 = inttoptr i64 %6335 to i32*
  store i32 2, i32* %6336
  %6337 = inttoptr i64 %116 to i32*
  %6338 = load i32, i32* %6337
  %6339 = sext i32 %6338 to i64
  %6340 = shl nsw i64 %6339, 5
  %6341 = add i64 %6340, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6342 = inttoptr i64 %6341 to i32*
  store i32 3, i32* %6342
  %6343 = inttoptr i64 %116 to i32*
  %6344 = load i32, i32* %6343
  %6345 = sext i32 %6344 to i64
  %6346 = shl nsw i64 %6345, 5
  %6347 = add i64 %6346, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6348 = inttoptr i64 %6347 to i32*
  store i32 4, i32* %6348
  %6349 = inttoptr i64 %116 to i32*
  %6350 = load i32, i32* %6349
  %6351 = sext i32 %6350 to i64
  %6352 = shl nsw i64 %6351, 5
  %6353 = add i64 %6352, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %6354 = inttoptr i64 %6353 to i32*
  store i32 5, i32* %6354
  %6355 = inttoptr i64 %116 to i32*
  %6356 = load i32, i32* %6355
  %6357 = sext i32 %6356 to i64
  %6358 = shl nsw i64 %6357, 5
  %6359 = add i64 %6358, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %6360 = inttoptr i64 %6359 to i32*
  store i32 6, i32* %6360
  %6361 = inttoptr i64 %116 to i32*
  %6362 = load i32, i32* %6361
  %6363 = sext i32 %6362 to i64
  %6364 = shl nsw i64 %6363, 5
  store i64 %6364, i64* %5, align 8, !tbaa !1240
  %6365 = add i64 %6364, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %6366 = inttoptr i64 %6365 to i32*
  store i32 7, i32* %6366
  %6367 = add i64 %6709, 320
  br label %block_40b2b4

block_409973:                                     ; preds = %block_409939
  %6368 = mul nsw i64 %6863, 96
  %6369 = add i64 %6368, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %6370 = inttoptr i64 %6369 to i32*
  %6371 = load i32, i32* %6370
  %6372 = inttoptr i64 %116 to i32*
  %6373 = load i32, i32* %6372
  %6374 = sub i32 %6371, %6373
  %6375 = lshr i32 %6374, 31
  %6376 = lshr i32 %6371, 31
  %6377 = lshr i32 %6373, 31
  %6378 = xor i32 %6377, %6376
  %6379 = xor i32 %6375, %6376
  %6380 = add nuw nsw i32 %6379, %6378
  %6381 = icmp eq i32 %6380, 2
  %6382 = icmp ne i32 %6375, 0
  %6383 = xor i1 %6382, %6381
  %6384 = select i1 %6383, i64 33, i64 122
  %6385 = add i64 %6870, %6384
  br i1 %6383, label %block_409994, label %block_4099ed

block_40d16d:                                     ; preds = %block_40d112.block_40d16d_crit_edge, %block_40d14c
  %6386 = phi i32 [ %7231, %block_40d112.block_40d16d_crit_edge ], [ %6767, %block_40d14c ]
  %6387 = phi i64 [ %7229, %block_40d112.block_40d16d_crit_edge ], [ %6781, %block_40d14c ]
  %6388 = sext i32 %6386 to i64
  %6389 = shl nsw i64 %6388, 2
  %6390 = add i64 %6389, ptrtoint (%newe_type* @newe to i64)
  %6391 = inttoptr i64 %6390 to i32*
  %6392 = load i32, i32* %6391
  %6393 = add i32 %6392, 1
  %6394 = inttoptr i64 %6390 to i32*
  store i32 %6393, i32* %6394
  %6395 = inttoptr i64 %4855 to i32*
  %6396 = load i32, i32* %6395
  %6397 = sext i32 %6396 to i64
  %6398 = mul nsw i64 %6397, 48
  %6399 = add i64 %6398, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 28)
  %6400 = inttoptr i64 %6399 to i32*
  store i32 1, i32* %6400
  %6401 = inttoptr i64 %4865 to i32*
  %6402 = load i32, i32* %6401
  %6403 = sext i32 %6402 to i64
  %6404 = mul nsw i64 %6403, 24
  %6405 = add i64 %6404, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %6406 = inttoptr i64 %6405 to i32*
  %6407 = load i32, i32* %6406
  %6408 = icmp ne i32 %6407, 2
  %6409 = select i1 %6408, i64 247, i64 84
  %6410 = add i64 %6387, %6409
  br i1 %6408, label %block_40d264, label %block_40d1c1

block_40916b:                                     ; preds = %block_409161
  %6411 = inttoptr i64 %116 to i32*
  %6412 = load i32, i32* %6411
  %6413 = sext i32 %6412 to i64
  %6414 = mul nsw i64 %6413, 48
  %6415 = add i64 %6414, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 8)
  %6416 = inttoptr i64 %6415 to i32*
  %6417 = load i32, i32* %6416
  %6418 = inttoptr i64 %125 to i32*
  store i32 %6417, i32* %6418
  %6419 = inttoptr i64 %116 to i32*
  %6420 = load i32, i32* %6419
  %6421 = sext i32 %6420 to i64
  %6422 = mul nsw i64 %6421, 48
  %6423 = add i64 %6422, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 12)
  %6424 = inttoptr i64 %6423 to i32*
  %6425 = load i32, i32* %6424
  %6426 = inttoptr i64 %126 to i32*
  store i32 %6425, i32* %6426
  %6427 = inttoptr i64 %125 to i32*
  %6428 = load i32, i32* %6427
  %6429 = icmp ne i32 %6428, 0
  %6430 = select i1 %6429, i64 135, i64 57
  %6431 = add i64 %6519, %6430
  br i1 %6429, label %block_4092d4, label %block_4091a4

block_40bca0:                                     ; preds = %block_40bc96
  %6432 = inttoptr i64 %4862 to i32*
  %6433 = load i32, i32* %6432
  %6434 = icmp ne i32 %6433, 0
  %6435 = select i1 %6434, i64 68, i64 10
  %6436 = add i64 %6844, %6435
  br i1 %6434, label %block_40bce4, label %block_40bcaa

block_40f347:                                     ; preds = %block_40f06b, %block_40f342
  %6437 = phi i64 [ %9080, %block_40f06b ], [ %6510, %block_40f342 ]
  %6438 = phi i64 [ %9098, %block_40f06b ], [ %6509, %block_40f342 ]
  %6439 = phi %struct.Memory* [ %9079, %block_40f06b ], [ %8365, %block_40f342 ]
  %6440 = add i64 %6437, -20
  %6441 = inttoptr i64 %6440 to i32*
  %6442 = load i32, i32* %6441
  %6443 = add i32 %6442, 1
  %6444 = inttoptr i64 %6440 to i32*
  store i32 %6443, i32* %6444
  %6445 = add i64 %6438, -794
  br label %block_40f02d

block_40b969:                                     ; preds = %block_40b964, %block_408b53
  %6446 = phi i64 [ %6514, %block_40b964 ], [ %3595, %block_408b53 ]
  %6447 = phi i64 [ 5, %block_40b964 ], [ 11756, %block_408b53 ]
  %6448 = phi %struct.Memory* [ %6513, %block_40b964 ], [ %3633, %block_408b53 ]
  %6449 = add i64 %6446, %6447
  %6450 = inttoptr i64 %116 to i32*
  %6451 = load i32, i32* %6450
  %6452 = add i32 %6451, 1
  %6453 = inttoptr i64 %116 to i32*
  store i32 %6452, i32* %6453
  %6454 = add i64 %6449, -12159
  br label %block_4089ea

block_40d264:                                     ; preds = %block_40d16d, %block_40d1c1
  %6455 = phi i64 [ %6410, %block_40d16d ], [ %5785, %block_40d1c1 ]
  %6456 = phi %struct.Memory* [ %2269, %block_40d16d ], [ %2269, %block_40d1c1 ]
  %6457 = inttoptr i64 %4865 to i32*
  %6458 = load i32, i32* %6457
  %6459 = sext i32 %6458 to i64
  %6460 = mul nsw i64 %6459, 24
  %6461 = add i64 %6460, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %6462 = inttoptr i64 %6461 to i32*
  %6463 = load i32, i32* %6462
  %6464 = icmp ne i32 %6463, 3
  %6465 = select i1 %6464, i64 138, i64 31
  %6466 = add i64 %6455, %6465
  br i1 %6464, label %block_40d2ee, label %block_40d283

block_40b575:                                     ; preds = %block_40b4d1, %block_40b4b2
  %6467 = phi i64 [ %4016, %block_40b4d1 ], [ %2127, %block_40b4b2 ]
  %6468 = sext i32 %3813 to i64
  %6469 = shl nsw i64 %6468, 2
  %6470 = add i64 %6469, ptrtoint (%newc_type* @newc to i64)
  %6471 = inttoptr i64 %6470 to i32*
  store i32 6, i32* %6471
  %6472 = inttoptr i64 %116 to i32*
  %6473 = load i32, i32* %6472
  %6474 = sext i32 %6473 to i64
  %6475 = shl nsw i64 %6474, 5
  %6476 = add i64 %6475, ptrtoint (%vassign_type* @vassign to i64)
  %6477 = inttoptr i64 %6476 to i32*
  store i32 2, i32* %6477
  %6478 = inttoptr i64 %116 to i32*
  %6479 = load i32, i32* %6478
  %6480 = sext i32 %6479 to i64
  %6481 = shl nsw i64 %6480, 5
  %6482 = add i64 %6481, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6483 = inttoptr i64 %6482 to i32*
  store i32 3, i32* %6483
  %6484 = inttoptr i64 %116 to i32*
  %6485 = load i32, i32* %6484
  %6486 = sext i32 %6485 to i64
  %6487 = shl nsw i64 %6486, 5
  %6488 = add i64 %6487, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6489 = inttoptr i64 %6488 to i32*
  store i32 4, i32* %6489
  %6490 = inttoptr i64 %116 to i32*
  %6491 = load i32, i32* %6490
  %6492 = sext i32 %6491 to i64
  %6493 = shl nsw i64 %6492, 5
  %6494 = add i64 %6493, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %6495 = inttoptr i64 %6494 to i32*
  store i32 5, i32* %6495
  %6496 = inttoptr i64 %116 to i32*
  %6497 = load i32, i32* %6496
  %6498 = sext i32 %6497 to i64
  %6499 = shl nsw i64 %6498, 5
  %6500 = add i64 %6499, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %6501 = inttoptr i64 %6500 to i32*
  store i32 6, i32* %6501
  %6502 = inttoptr i64 %116 to i32*
  %6503 = load i32, i32* %6502
  %6504 = sext i32 %6503 to i64
  %6505 = shl nsw i64 %6504, 5
  store i64 %6505, i64* %5, align 8, !tbaa !1240
  %6506 = add i64 %6505, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %6507 = add i64 %6467, 147
  %6508 = inttoptr i64 %6506 to i32*
  store i32 7, i32* %6508
  br label %block_40b937

block_40f342:                                     ; preds = %block_40f08a
  %6509 = add i64 %8378, 5
  %6510 = load i64, i64* %10, align 8
  br label %block_40f347

block_40b964:                                     ; preds = %block_40b95f, %block_408c1e
  %6511 = phi i64 [ %6852, %block_40b95f ], [ %2743, %block_408c1e ]
  %6512 = phi i64 [ 5, %block_40b95f ], [ 11562, %block_408c1e ]
  %6513 = phi %struct.Memory* [ %6847, %block_40b95f ], [ %2736, %block_408c1e ]
  %6514 = add i64 %6511, %6512
  br label %block_40b969

block_409161:                                     ; preds = %block_408ed5
  %6515 = inttoptr i64 %121 to i32*
  %6516 = load i32, i32* %6515
  %6517 = icmp ne i32 %6516, 1
  %6518 = select i1 %6517, i64 654, i64 10
  %6519 = add i64 %671, %6518
  br i1 %6517, label %block_40b95f, label %block_40916b

block_40915c:                                     ; preds = %block_409041, %block_409152, %block_408f22
  %6520 = phi i64 [ %2902, %block_408f22 ], [ %9131, %block_409041 ], [ %6712, %block_409152 ]
  %6521 = phi i64 [ 507, %block_408f22 ], [ 5, %block_409041 ], [ 5, %block_409152 ]
  %6522 = phi %struct.Memory* [ %3633, %block_408f22 ], [ %9130, %block_409041 ], [ %6711, %block_409152 ]
  %6523 = add i64 %6520, %6521
  br label %block_40b95f

block_40d4b0:                                     ; preds = %block_40d45c
  %6524 = mul nsw i64 %2595, 96
  %6525 = add i64 %6524, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %6526 = inttoptr i64 %6525 to i32*
  %6527 = load i32, i32* %6526
  %6528 = inttoptr i64 %4855 to i32*
  %6529 = load i32, i32* %6528
  %6530 = sub i32 %6527, %6529
  %6531 = icmp eq i32 %6530, 0
  %6532 = lshr i32 %6530, 31
  %6533 = lshr i32 %6527, 31
  %6534 = lshr i32 %6529, 31
  %6535 = xor i32 %6534, %6533
  %6536 = xor i32 %6532, %6533
  %6537 = add nuw nsw i32 %6536, %6535
  %6538 = icmp eq i32 %6537, 2
  %6539 = icmp ne i32 %6532, 0
  %6540 = xor i1 %6539, %6538
  %6541 = or i1 %6531, %6540
  %6542 = select i1 %6541, i64 107, i64 33
  %6543 = add i64 %2602, %6542
  br i1 %6541, label %block_40d51b, label %block_40d4d1

block_40c49d:                                     ; preds = %block_40c413, %block_40c432, %block_40c453
  %6544 = phi i64 [ %4897, %block_40c413 ], [ %2943, %block_40c432 ], [ %2620, %block_40c453 ]
  %6545 = phi %struct.Memory* [ %4887, %block_40c413 ], [ %4887, %block_40c432 ], [ %4887, %block_40c453 ]
  %6546 = add i64 %6544, 5
  br label %block_40c613

block_40f19f:                                     ; preds = %block_40f0e1
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %4, align 8, !tbaa !1240
  %6547 = inttoptr i64 %3933 to i32*
  %6548 = load i32, i32* %6547
  %6549 = sext i32 %6548 to i64
  %6550 = mul nsw i64 %6549, 2400
  %6551 = add i64 %6550, ptrtoint (%idmo_type* @idmo to i64)
  %6552 = inttoptr i64 %9090 to i32*
  %6553 = load i32, i32* %6552
  %6554 = sext i32 %6553 to i64
  %6555 = mul nsw i64 %6554, 400
  %6556 = add i64 %6555, %6551
  %6557 = inttoptr i64 %6556 to i32*
  %6558 = load i32, i32* %6557
  %6559 = inttoptr i64 %3932 to i32*
  %6560 = load i32, i32* %6559
  %6561 = sext i32 %6560 to i64
  %6562 = mul nsw i64 %6561, 2400
  %6563 = add i64 %6562, ptrtoint (%idmo_type* @idmo to i64)
  %6564 = inttoptr i64 %9081 to i32*
  %6565 = load i32, i32* %6564
  %6566 = sext i32 %6565 to i64
  %6567 = mul nsw i64 %6566, 400
  %6568 = add i64 %6567, %6563
  %6569 = inttoptr i64 %3931 to i32*
  %6570 = load i32, i32* %6569
  %6571 = sext i32 %6570 to i64
  %6572 = mul nsw i64 %6571, 200
  %6573 = add i64 %6572, %6568
  %6574 = inttoptr i64 %3928 to i32*
  %6575 = load i32, i32* %6574
  %6576 = sext i32 %6575 to i64
  %6577 = mul nsw i64 %6576, 100
  %6578 = add i64 %6577, %6573
  %6579 = inttoptr i64 %6578 to i32*
  store i32 %6558, i32* %6579
  %6580 = inttoptr i64 %3933 to i32*
  %6581 = load i32, i32* %6580
  %6582 = sext i32 %6581 to i64
  %6583 = mul nsw i64 %6582, 2400
  %6584 = add i64 %6583, ptrtoint (%idmo_type* @idmo to i64)
  %6585 = inttoptr i64 %9090 to i32*
  %6586 = load i32, i32* %6585
  %6587 = sext i32 %6586 to i64
  %6588 = mul nsw i64 %6587, 400
  %6589 = add i64 %6588, %6584
  %6590 = add i64 %6589, 216
  %6591 = inttoptr i64 %6590 to i32*
  %6592 = load i32, i32* %6591
  %6593 = inttoptr i64 %3932 to i32*
  %6594 = load i32, i32* %6593
  %6595 = sext i32 %6594 to i64
  %6596 = mul nsw i64 %6595, 2400
  %6597 = add i64 %6596, ptrtoint (%idmo_type* @idmo to i64)
  %6598 = inttoptr i64 %9081 to i32*
  %6599 = load i32, i32* %6598
  %6600 = sext i32 %6599 to i64
  %6601 = mul nsw i64 %6600, 400
  %6602 = add i64 %6601, %6597
  %6603 = inttoptr i64 %3931 to i32*
  %6604 = load i32, i32* %6603
  %6605 = sext i32 %6604 to i64
  %6606 = mul nsw i64 %6605, 200
  %6607 = add i64 %6606, %6602
  %6608 = inttoptr i64 %3928 to i32*
  %6609 = load i32, i32* %6608
  %6610 = sext i32 %6609 to i64
  %6611 = mul nsw i64 %6610, 100
  %6612 = add i64 %6611, %6607
  %6613 = add i64 %6612, 16
  %6614 = inttoptr i64 %6613 to i32*
  store i32 %6592, i32* %6614
  %6615 = inttoptr i64 %3933 to i32*
  %6616 = load i32, i32* %6615
  %6617 = sext i32 %6616 to i64
  %6618 = mul nsw i64 %6617, 2400
  %6619 = add i64 %6618, ptrtoint (%idmo_type* @idmo to i64)
  %6620 = inttoptr i64 %9090 to i32*
  %6621 = load i32, i32* %6620
  %6622 = sext i32 %6621 to i64
  %6623 = mul nsw i64 %6622, 400
  %6624 = add i64 %6623, %6619
  %6625 = add i64 %6624, 180
  %6626 = inttoptr i64 %6625 to i32*
  %6627 = load i32, i32* %6626
  %6628 = inttoptr i64 %3932 to i32*
  %6629 = load i32, i32* %6628
  %6630 = sext i32 %6629 to i64
  %6631 = mul nsw i64 %6630, 2400
  %6632 = load i64, i64* %4, align 8
  %6633 = add i64 %6631, %6632
  %6634 = inttoptr i64 %9081 to i32*
  %6635 = load i32, i32* %6634
  %6636 = sext i32 %6635 to i64
  %6637 = mul nsw i64 %6636, 400
  %6638 = add i64 %6637, %6633
  %6639 = inttoptr i64 %3931 to i32*
  %6640 = load i32, i32* %6639
  %6641 = sext i32 %6640 to i64
  %6642 = mul nsw i64 %6641, 200
  %6643 = add i64 %6642, %6638
  %6644 = inttoptr i64 %3928 to i32*
  %6645 = load i32, i32* %6644
  %6646 = sext i32 %6645 to i64
  %6647 = mul nsw i64 %6646, 100
  %6648 = add i64 %6647, %6643
  %6649 = add i64 %6648, 80
  %6650 = inttoptr i64 %6649 to i32*
  store i32 %6627, i32* %6650
  %6651 = inttoptr i64 %3933 to i32*
  %6652 = load i32, i32* %6651
  %6653 = sext i32 %6652 to i64
  %6654 = mul nsw i64 %6653, 2400
  %6655 = add i64 %6654, %6632
  %6656 = inttoptr i64 %9090 to i32*
  %6657 = load i32, i32* %6656
  %6658 = sext i32 %6657 to i64
  %6659 = mul nsw i64 %6658, 400
  %6660 = add i64 %6659, %6655
  store i64 %6660, i64* %6, align 8, !tbaa !1240
  %6661 = add i64 %6660, 396
  %6662 = inttoptr i64 %6661 to i32*
  %6663 = load i32, i32* %6662
  %6664 = zext i32 %6663 to i64
  store i64 %6664, i64* %7, align 8, !tbaa !1240
  %6665 = inttoptr i64 %3932 to i32*
  %6666 = load i32, i32* %6665
  %6667 = sext i32 %6666 to i64
  %6668 = mul nsw i64 %6667, 2400
  %6669 = add i64 %6668, %6632
  %6670 = inttoptr i64 %9081 to i32*
  %6671 = load i32, i32* %6670
  %6672 = sext i32 %6671 to i64
  %6673 = mul nsw i64 %6672, 400
  %6674 = add i64 %6673, %6669
  %6675 = inttoptr i64 %3931 to i32*
  %6676 = load i32, i32* %6675
  %6677 = sext i32 %6676 to i64
  %6678 = mul nsw i64 %6677, 200
  %6679 = add i64 %6678, %6674
  %6680 = inttoptr i64 %3928 to i32*
  %6681 = load i32, i32* %6680
  %6682 = sext i32 %6681 to i64
  %6683 = mul nsw i64 %6682, 100
  store i64 %6683, i64* %5, align 8, !tbaa !1240
  %6684 = add i64 %6683, %6679
  %6685 = add i64 %6684, 96
  %6686 = inttoptr i64 %6685 to i32*
  store i32 %6663, i32* %6686
  %6687 = inttoptr i64 %3931 to i32*
  %6688 = load i32, i32* %6687
  %6689 = add i32 %6688, 1
  %6690 = inttoptr i64 %3931 to i32*
  store i32 %6689, i32* %6690
  %6691 = add i64 %7813, -260
  br label %block_40f09b

block_40b153:                                     ; preds = %block_40b119
  %6692 = mul nsw i64 %7164, 96
  %6693 = add i64 %6692, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %6694 = inttoptr i64 %6693 to i32*
  %6695 = load i32, i32* %6694
  %6696 = inttoptr i64 %116 to i32*
  %6697 = load i32, i32* %6696
  %6698 = sub i32 %6695, %6697
  %6699 = lshr i32 %6698, 31
  %6700 = lshr i32 %6695, 31
  %6701 = lshr i32 %6697, 31
  %6702 = xor i32 %6701, %6700
  %6703 = xor i32 %6699, %6700
  %6704 = add nuw nsw i32 %6703, %6702
  %6705 = icmp eq i32 %6704, 2
  %6706 = icmp ne i32 %6699, 0
  %6707 = xor i1 %6706, %6705
  %6708 = select i1 %6707, i64 33, i64 185
  %6709 = add i64 %7171, %6708
  br i1 %6707, label %block_40b174, label %block_40b20c

block_409152:                                     ; preds = %block_409123, %block_409128
  %6710 = phi i64 [ %7126, %block_409128 ], [ %7153, %block_409123 ]
  %6711 = phi %struct.Memory* [ %3633, %block_409128 ], [ %7152, %block_409123 ]
  %6712 = add i64 %6710, 5
  br label %block_40915c

block_40afab:                                     ; preds = %block_40aef2, %block_40aeb8.block_40afab_crit_edge
  %6713 = phi i32 [ %712, %block_40aeb8.block_40afab_crit_edge ], [ %5914, %block_40aef2 ]
  %6714 = phi i64 [ %710, %block_40aeb8.block_40afab_crit_edge ], [ %5926, %block_40aef2 ]
  %6715 = sext i32 %6713 to i64
  %6716 = shl nsw i64 %6715, 2
  %6717 = add i64 %6716, ptrtoint (%newc_type* @newc to i64)
  %6718 = inttoptr i64 %6717 to i32*
  store i32 7, i32* %6718
  %6719 = inttoptr i64 %116 to i32*
  %6720 = load i32, i32* %6719
  %6721 = sext i32 %6720 to i64
  %6722 = shl nsw i64 %6721, 5
  %6723 = add i64 %6722, ptrtoint (%vassign_type* @vassign to i64)
  %6724 = inttoptr i64 %6723 to i32*
  store i32 1, i32* %6724
  %6725 = inttoptr i64 %116 to i32*
  %6726 = load i32, i32* %6725
  %6727 = sext i32 %6726 to i64
  %6728 = shl nsw i64 %6727, 5
  %6729 = add i64 %6728, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6730 = inttoptr i64 %6729 to i32*
  store i32 2, i32* %6730
  %6731 = inttoptr i64 %116 to i32*
  %6732 = load i32, i32* %6731
  %6733 = sext i32 %6732 to i64
  %6734 = shl nsw i64 %6733, 5
  %6735 = add i64 %6734, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6736 = inttoptr i64 %6735 to i32*
  store i32 3, i32* %6736
  %6737 = inttoptr i64 %116 to i32*
  %6738 = load i32, i32* %6737
  %6739 = sext i32 %6738 to i64
  %6740 = shl nsw i64 %6739, 5
  %6741 = add i64 %6740, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %6742 = inttoptr i64 %6741 to i32*
  store i32 4, i32* %6742
  %6743 = inttoptr i64 %116 to i32*
  %6744 = load i32, i32* %6743
  %6745 = sext i32 %6744 to i64
  %6746 = shl nsw i64 %6745, 5
  %6747 = add i64 %6746, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %6748 = inttoptr i64 %6747 to i32*
  store i32 5, i32* %6748
  %6749 = inttoptr i64 %116 to i32*
  %6750 = load i32, i32* %6749
  %6751 = sext i32 %6750 to i64
  %6752 = shl nsw i64 %6751, 5
  %6753 = add i64 %6752, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %6754 = inttoptr i64 %6753 to i32*
  store i32 6, i32* %6754
  %6755 = inttoptr i64 %116 to i32*
  %6756 = load i32, i32* %6755
  %6757 = sext i32 %6756 to i64
  %6758 = shl nsw i64 %6757, 5
  store i64 %6758, i64* %5, align 8, !tbaa !1240
  %6759 = add i64 %6758, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 24)
  %6760 = add i64 %6714, 168
  %6761 = inttoptr i64 %6759 to i32*
  store i32 7, i32* %6761
  br label %block_40b941.sink.split

block_40d14c:                                     ; preds = %block_40d112
  %6762 = mul nsw i64 %7222, 96
  %6763 = add i64 %6762, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %6764 = inttoptr i64 %6763 to i32*
  %6765 = load i32, i32* %6764
  %6766 = inttoptr i64 %4855 to i32*
  %6767 = load i32, i32* %6766
  %6768 = sub i32 %6765, %6767
  %6769 = icmp eq i32 %6768, 0
  %6770 = lshr i32 %6768, 31
  %6771 = lshr i32 %6765, 31
  %6772 = lshr i32 %6767, 31
  %6773 = xor i32 %6772, %6771
  %6774 = xor i32 %6770, %6771
  %6775 = add nuw nsw i32 %6774, %6773
  %6776 = icmp eq i32 %6775, 2
  %6777 = icmp ne i32 %6770, 0
  %6778 = xor i1 %6777, %6776
  %6779 = or i1 %6769, %6778
  %6780 = select i1 %6779, i64 423, i64 33
  %6781 = add i64 %7229, %6780
  br i1 %6779, label %block_40d2f3, label %block_40d16d

block_408c49:                                     ; preds = %block_408c3f
  %6782 = inttoptr i64 %119 to i32*
  %6783 = load i32, i32* %6782
  %6784 = icmp ne i32 %6783, 1
  %6785 = select i1 %6784, i64 652, i64 10
  %6786 = add i64 %6809, %6785
  br i1 %6784, label %block_408ed5, label %block_408c53

block_40c622:                                     ; preds = %block_40c618
  %6787 = inttoptr i64 %4855 to i32*
  %6788 = load i32, i32* %6787
  %6789 = sext i32 %6788 to i64
  %6790 = shl nsw i64 %6789, 2
  %6791 = add i64 %6790, ptrtoint (%newe_type* @newe to i64)
  %6792 = inttoptr i64 %6791 to i32*
  %6793 = load i32, i32* %6792
  %6794 = add i32 %6793, 1
  %6795 = inttoptr i64 %6791 to i32*
  store i32 %6794, i32* %6795
  %6796 = inttoptr i64 %4855 to i32*
  %6797 = load i32, i32* %6796
  %6798 = sext i32 %6797 to i64
  %6799 = mul nsw i64 %6798, 48
  %6800 = add i64 %6799, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 16)
  %6801 = add i64 %6827, 53
  %6802 = inttoptr i64 %6800 to i32*
  store i32 1, i32* %6802
  br label %block_40c851

block_40b946:                                     ; preds = %block_40b941, %block_40adf7
  %6803 = phi i64 [ %6818, %block_40b941 ], [ %1127, %block_40adf7 ]
  %6804 = phi i64 [ 5, %block_40b941 ], [ 2727, %block_40adf7 ]
  %6805 = phi %struct.Memory* [ %6817, %block_40b941 ], [ %3633, %block_40adf7 ]
  %6806 = add i64 %6803, %6804
  br label %block_40b955

block_408c3f:                                     ; preds = %block_408b82
  %6807 = icmp ne i32 %3636, 7
  %6808 = select i1 %6807, i64 1983, i64 10
  %6809 = add i64 %3434, %6808
  br i1 %6807, label %block_4093fe, label %block_408c49

block_40b941.sink.split:                          ; preds = %block_40b2be, %block_40b937, %block_40afab, %block_40af13
  %6810 = phi i64 [ %6882, %block_40b937 ], [ %8539, %block_40b2be ], [ %6760, %block_40afab ], [ %571, %block_40af13 ]
  %6811 = phi i64 [ 5, %block_40b937 ], [ 5, %block_40b2be ], [ 624, %block_40afab ], [ 624, %block_40af13 ]
  %6812 = phi %struct.Memory* [ %6879, %block_40b937 ], [ %8538, %block_40b2be ], [ %3633, %block_40afab ], [ %3633, %block_40af13 ]
  %6813 = phi i64 [ 5, %block_40b937 ], [ 1662, %block_40b2be ], [ 1662, %block_40afab ], [ 1662, %block_40af13 ]
  %6814 = add i64 %6810, %6811
  br label %block_40b941

block_40b941:                                     ; preds = %block_40b2c8, %block_40b941.sink.split
  %6815 = phi i64 [ %8104, %block_40b2c8 ], [ %6814, %block_40b941.sink.split ]
  %6816 = phi i64 [ 5, %block_40b2c8 ], [ %6813, %block_40b941.sink.split ]
  %6817 = phi %struct.Memory* [ %3633, %block_40b2c8 ], [ %6812, %block_40b941.sink.split ]
  %6818 = add i64 %6815, %6816
  br label %block_40b946

block_40c618:                                     ; preds = %block_40c27d, %block_40c613
  %6819 = phi i64 [ %7322, %block_40c27d ], [ %6876, %block_40c613 ]
  %6820 = phi i64 [ 870, %block_40c27d ], [ 5, %block_40c613 ]
  %6821 = phi %struct.Memory* [ %7538, %block_40c27d ], [ %6875, %block_40c613 ]
  %6822 = add i64 %6819, %6820
  %6823 = inttoptr i64 %4860 to i32*
  %6824 = load i32, i32* %6823
  %6825 = icmp ne i32 %6824, 0
  %6826 = select i1 %6825, i64 68, i64 10
  %6827 = add i64 %6822, %6826
  br i1 %6825, label %block_40c65c, label %block_40c622

block_40c93b:                                     ; preds = %block_40c931
  %6828 = inttoptr i64 %4859 to i32*
  %6829 = load i32, i32* %6828
  %6830 = icmp ne i32 %6829, 2
  %6831 = select i1 %6830, i64 392, i64 10
  %6832 = add i64 %6972, %6831
  br i1 %6830, label %block_40cac3, label %block_40c945

block_40e13a:                                     ; preds = %block_40e079, %block_40e065, %block_40e130, %block_40dfa8
  %6833 = phi i64 [ %9217, %block_40e079 ], [ %2853, %block_40e130 ], [ %8630, %block_40e065 ], [ %2562, %block_40dfa8 ]
  %6834 = phi i64 [ 5, %block_40e079 ], [ 5, %block_40e130 ], [ 208, %block_40e065 ], [ 208, %block_40dfa8 ]
  %6835 = phi %struct.Memory* [ %3689, %block_40e079 ], [ %2852, %block_40e130 ], [ %8629, %block_40e065 ], [ %3689, %block_40dfa8 ]
  %6836 = add i64 %6833, %6834
  %6837 = inttoptr i64 %4863 to i32*
  %6838 = load i32, i32* %6837
  %6839 = icmp ne i32 %6838, 2
  %6840 = select i1 %6839, i64 209, i64 10
  %6841 = add i64 %6836, %6840
  br i1 %6839, label %block_40e20b, label %block_40e144

block_40bc96:                                     ; preds = %block_40bacd
  %6842 = icmp ne i32 %7913, 1
  %6843 = select i1 %6842, i64 3008, i64 10
  %6844 = add i64 %7916, %6843
  br i1 %6842, label %block_40c85b, label %block_40bca0

block_40b95f:                                     ; preds = %block_408ecb, %block_40942b, %block_40b955, %block_40915c, %block_409161, %block_408c96, %block_4093ea, %block_409570
  %6845 = phi i64 [ %6523, %block_40915c ], [ %6519, %block_409161 ], [ %3068, %block_4093ea ], [ %8559, %block_408ecb ], [ %3614, %block_408c96 ], [ %7068, %block_40b955 ], [ %7306, %block_40942b ], [ %1548, %block_409570 ]
  %6846 = phi i64 [ 664, %block_40915c ], [ 5, %block_409161 ], [ 5, %block_4093ea ], [ 5, %block_408ecb ], [ 507, %block_408c96 ], [ %7066, %block_40b955 ], [ 240, %block_40942b ], [ 5, %block_409570 ]
  %6847 = phi %struct.Memory* [ %6522, %block_40915c ], [ %3633, %block_409161 ], [ %3067, %block_4093ea ], [ %8558, %block_408ecb ], [ %3633, %block_408c96 ], [ %7064, %block_40b955 ], [ %3633, %block_40942b ], [ %1547, %block_409570 ]
  %6848 = phi i64 [ 5, %block_40915c ], [ 5, %block_409161 ], [ 5, %block_4093ea ], [ 1321, %block_408ecb ], [ 1321, %block_408c96 ], [ 5, %block_40b955 ], [ 9189, %block_40942b ], [ 9189, %block_409570 ]
  %6849 = phi i64 [ 9574, %block_40915c ], [ 9574, %block_409161 ], [ 9574, %block_4093ea ], [ 9574, %block_408ecb ], [ 9574, %block_408c96 ], [ 5, %block_40b955 ], [ 5, %block_40942b ], [ 5, %block_409570 ]
  %6850 = add i64 %6848, %6846
  %6851 = add i64 %6850, %6849
  %6852 = add i64 %6851, %6845
  br label %block_40b964

block_409939:                                     ; preds = %block_40992f
  %6853 = inttoptr i64 %116 to i32*
  %6854 = load i32, i32* %6853
  %6855 = sext i32 %6854 to i64
  %6856 = mul nsw i64 %6855, 96
  %6857 = add i64 %6856, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %6858 = inttoptr i64 %6857 to i32*
  %6859 = load i32, i32* %6858
  %6860 = inttoptr i64 %123 to i32*
  store i32 %6859, i32* %6860
  %6861 = inttoptr i64 %123 to i32*
  %6862 = load i32, i32* %6861
  %6863 = sext i32 %6862 to i64
  %6864 = mul nsw i64 %6863, 24
  %6865 = add i64 %6864, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %6866 = inttoptr i64 %6865 to i32*
  %6867 = load i32, i32* %6866
  %6868 = icmp ne i32 %6867, 3
  %6869 = select i1 %6868, i64 180, i64 58
  %6870 = add i64 %7073, %6869
  br i1 %6868, label %block_409939.block_4099ed_crit_edge, label %block_409973

block_409939.block_4099ed_crit_edge:              ; preds = %block_409939
  %6871 = inttoptr i64 %116 to i32*
  %6872 = load i32, i32* %6871
  br label %block_4099ed

block_40c613:                                     ; preds = %block_40c2fb, %block_40c609, %block_40c49d, %block_40c4a7
  %6873 = phi i64 [ %7076, %block_40c609 ], [ %2156, %block_40c4a7 ], [ %7688, %block_40c2fb ], [ %6546, %block_40c49d ]
  %6874 = phi i64 [ 5, %block_40c609 ], [ 5, %block_40c4a7 ], [ 369, %block_40c2fb ], [ 369, %block_40c49d ]
  %6875 = phi %struct.Memory* [ %7075, %block_40c609 ], [ %7538, %block_40c4a7 ], [ %7538, %block_40c2fb ], [ %6545, %block_40c49d ]
  %6876 = add i64 %6873, %6874
  br label %block_40c618

block_40b937:                                     ; preds = %block_40b885, %block_40b3c1, %block_40b575, %block_40b715, %block_40b42f, %block_40b7ed, %block_40b4f2, %block_40b692
  %6877 = phi i64 [ %8133, %block_40b3c1 ], [ %2726, %block_40b42f ], [ %6507, %block_40b575 ], [ %2011, %block_40b4f2 ], [ %8426, %block_40b885 ], [ %2203, %block_40b7ed ], [ %5108, %block_40b715 ], [ %769, %block_40b692 ]
  %6878 = phi i64 [ 352, %block_40b3c1 ], [ 352, %block_40b42f ], [ 5, %block_40b575 ], [ 5, %block_40b4f2 ], [ 5, %block_40b885 ], [ 5, %block_40b7ed ], [ 394, %block_40b715 ], [ 394, %block_40b692 ]
  %6879 = phi %struct.Memory* [ %3633, %block_40b3c1 ], [ %3633, %block_40b42f ], [ %3633, %block_40b575 ], [ %3633, %block_40b4f2 ], [ %3633, %block_40b885 ], [ %3633, %block_40b7ed ], [ %3633, %block_40b715 ], [ %3633, %block_40b692 ]
  %6880 = phi i64 [ 810, %block_40b3c1 ], [ 810, %block_40b42f ], [ 810, %block_40b575 ], [ 810, %block_40b4f2 ], [ 5, %block_40b885 ], [ 5, %block_40b7ed ], [ 5, %block_40b715 ], [ 5, %block_40b692 ]
  %6881 = add nuw nsw i64 %6880, %6878
  %6882 = add i64 %6881, %6877
  br label %block_40b941.sink.split

block_40e144:                                     ; preds = %block_40e13a
  %6883 = inttoptr i64 %4855 to i32*
  %6884 = load i32, i32* %6883
  %6885 = sext i32 %6884 to i64
  %6886 = mul nsw i64 %6885, 96
  %6887 = add i64 %6886, ptrtoint (%sje_type* @sje to i64)
  %6888 = inttoptr i64 %6887 to i32*
  %6889 = load i32, i32* %6888
  %6890 = inttoptr i64 %4865 to i32*
  store i32 %6889, i32* %6890
  %6891 = inttoptr i64 %4865 to i32*
  %6892 = load i32, i32* %6891
  %6893 = sext i32 %6892 to i64
  %6894 = mul nsw i64 %6893, 24
  %6895 = add i64 %6894, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %6896 = inttoptr i64 %6895 to i32*
  %6897 = load i32, i32* %6896
  %6898 = icmp eq i32 %6897, 3
  %6899 = select i1 %6898, i64 194, i64 57
  %6900 = add i64 %6841, %6899
  br i1 %6898, label %block_40e2d6, label %block_40e17d

block_40cac3:                                     ; preds = %block_40c93b
  %6901 = icmp ne i32 %6829, 0
  %6902 = select i1 %6901, i64 68, i64 10
  %6903 = add i64 %6832, %6902
  br i1 %6901, label %block_40cb07, label %block_40cacd

block_40a935:                                     ; preds = %block_40a896.block_40a935_crit_edge, %block_40a8d0
  %6904 = phi i32 [ %8286, %block_40a896.block_40a935_crit_edge ], [ %7832, %block_40a8d0 ]
  %6905 = phi i64 [ %8284, %block_40a896.block_40a935_crit_edge ], [ %7844, %block_40a8d0 ]
  %6906 = sext i32 %6904 to i64
  %6907 = shl nsw i64 %6906, 2
  %6908 = add i64 %6907, ptrtoint (%newc_type* @newc to i64)
  %6909 = inttoptr i64 %6908 to i32*
  store i32 3, i32* %6909
  %6910 = inttoptr i64 %116 to i32*
  %6911 = load i32, i32* %6910
  %6912 = sext i32 %6911 to i64
  %6913 = shl nsw i64 %6912, 5
  %6914 = add i64 %6913, ptrtoint (%vassign_type* @vassign to i64)
  %6915 = inttoptr i64 %6914 to i32*
  store i32 3, i32* %6915
  %6916 = inttoptr i64 %116 to i32*
  %6917 = load i32, i32* %6916
  %6918 = sext i32 %6917 to i64
  %6919 = shl nsw i64 %6918, 5
  %6920 = add i64 %6919, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6921 = inttoptr i64 %6920 to i32*
  store i32 6, i32* %6921
  %6922 = inttoptr i64 %116 to i32*
  %6923 = load i32, i32* %6922
  %6924 = sext i32 %6923 to i64
  %6925 = shl nsw i64 %6924, 5
  store i64 %6925, i64* %5, align 8, !tbaa !1240
  %6926 = add i64 %6925, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6927 = add i64 %6905, 84
  %6928 = inttoptr i64 %6926 to i32*
  store i32 7, i32* %6928
  br label %block_40a98e

block_40cc7c:                                     ; preds = %block_40cc5e
  %6929 = mul nsw i64 %2570, 96
  %6930 = add i64 %6929, ptrtoint (%sje_type* @sje to i64)
  %6931 = inttoptr i64 %6930 to i32*
  %6932 = load i32, i32* %6931
  %6933 = inttoptr i64 %4855 to i32*
  %6934 = load i32, i32* %6933
  %6935 = sub i32 %6932, %6934
  %6936 = icmp eq i32 %6935, 0
  %6937 = lshr i32 %6935, 31
  %6938 = lshr i32 %6932, 31
  %6939 = lshr i32 %6934, 31
  %6940 = xor i32 %6939, %6938
  %6941 = xor i32 %6937, %6938
  %6942 = add nuw nsw i32 %6941, %6940
  %6943 = icmp eq i32 %6942, 2
  %6944 = icmp ne i32 %6937, 0
  %6945 = xor i1 %6944, %6943
  %6946 = or i1 %6936, %6945
  %6947 = select i1 %6946, i64 106, i64 32
  %6948 = add i64 %2577, %6947
  br i1 %6946, label %block_40cce6, label %block_40cc9c

block_40c945:                                     ; preds = %block_40c93b
  %6949 = inttoptr i64 %4855 to i32*
  %6950 = load i32, i32* %6949
  %6951 = sext i32 %6950 to i64
  %6952 = mul nsw i64 %6951, 48
  %6953 = add i64 %6952, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %6954 = inttoptr i64 %6953 to i32*
  %6955 = load i32, i32* %6954
  %6956 = icmp ne i32 %6955, 0
  %6957 = select i1 %6956, i64 89, i64 31
  %6958 = add i64 %6832, %6957
  br i1 %6956, label %block_40c99e, label %block_40c964

block_409f66:                                     ; preds = %block_409f52, %block_409f5c
  %6959 = phi i64 [ %4476, %block_409f52 ], [ %2565, %block_409f5c ]
  %6960 = inttoptr i64 %116 to i32*
  %6961 = load i32, i32* %6960
  %6962 = sext i32 %6961 to i64
  %6963 = mul nsw i64 %6962, 48
  %6964 = add i64 %6963, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 8)
  %6965 = inttoptr i64 %6964 to i32*
  %6966 = load i32, i32* %6965
  %6967 = icmp ne i32 %6966, 0
  %6968 = select i1 %6967, i64 141, i64 31
  %6969 = add i64 %6959, %6968
  br i1 %6967, label %block_409ff3, label %block_409f85

block_40c931:                                     ; preds = %block_40c85b
  %6970 = icmp ne i32 %8806, 1
  %6971 = select i1 %6970, i64 2513, i64 10
  %6972 = add i64 %8809, %6971
  br i1 %6970, label %block_40d307, label %block_40c93b

block_409765:                                     ; preds = %block_409746
  %6973 = shl nsw i64 %7651, 2
  %6974 = add i64 %6973, ptrtoint (%newc_type* @newc to i64)
  %6975 = inttoptr i64 %6974 to i32*
  store i32 4, i32* %6975
  %6976 = inttoptr i64 %116 to i32*
  %6977 = load i32, i32* %6976
  %6978 = sext i32 %6977 to i64
  %6979 = shl nsw i64 %6978, 5
  %6980 = add i64 %6979, ptrtoint (%vassign_type* @vassign to i64)
  %6981 = inttoptr i64 %6980 to i32*
  store i32 1, i32* %6981
  %6982 = inttoptr i64 %116 to i32*
  %6983 = load i32, i32* %6982
  %6984 = sext i32 %6983 to i64
  %6985 = shl nsw i64 %6984, 5
  %6986 = add i64 %6985, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %6987 = inttoptr i64 %6986 to i32*
  store i32 3, i32* %6987
  %6988 = inttoptr i64 %116 to i32*
  %6989 = load i32, i32* %6988
  %6990 = sext i32 %6989 to i64
  %6991 = shl nsw i64 %6990, 5
  %6992 = add i64 %6991, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %6993 = inttoptr i64 %6992 to i32*
  store i32 5, i32* %6993
  %6994 = inttoptr i64 %116 to i32*
  %6995 = load i32, i32* %6994
  %6996 = sext i32 %6995 to i64
  %6997 = shl nsw i64 %6996, 5
  store i64 %6997, i64* %5, align 8, !tbaa !1240
  %6998 = add i64 %6997, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %6999 = add i64 %7658, 105
  %7000 = inttoptr i64 %6998 to i32*
  store i32 7, i32* %7000
  br label %block_4098c9

block_40ee32:                                     ; preds = %block_40ee28
  %7001 = add i64 %969, 7
  %7002 = inttoptr i64 %1038 to i32*
  store i32 1, i32* %7002
  br label %block_40ee39

block_40ce0c:                                     ; preds = %block_40cdb8
  %7003 = mul nsw i64 %4931, 96
  %7004 = add i64 %7003, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %7005 = inttoptr i64 %7004 to i32*
  %7006 = load i32, i32* %7005
  %7007 = inttoptr i64 %4855 to i32*
  %7008 = load i32, i32* %7007
  %7009 = sub i32 %7006, %7008
  %7010 = icmp eq i32 %7009, 0
  %7011 = lshr i32 %7009, 31
  %7012 = lshr i32 %7006, 31
  %7013 = lshr i32 %7008, 31
  %7014 = xor i32 %7013, %7012
  %7015 = xor i32 %7011, %7012
  %7016 = add nuw nsw i32 %7015, %7014
  %7017 = icmp eq i32 %7016, 2
  %7018 = icmp ne i32 %7011, 0
  %7019 = xor i1 %7018, %7017
  %7020 = or i1 %7010, %7019
  %7021 = select i1 %7020, i64 107, i64 33
  %7022 = add i64 %4938, %7021
  br i1 %7020, label %block_40ce77, label %block_40ce2d

block_40c130:                                     ; preds = %block_40c111
  %7023 = mul nsw i64 %7661, 96
  %7024 = add i64 %7023, ptrtoint (%sje_type* @sje to i64)
  %7025 = inttoptr i64 %7024 to i32*
  %7026 = load i32, i32* %7025
  %7027 = inttoptr i64 %4865 to i32*
  store i32 %7026, i32* %7027
  %7028 = inttoptr i64 %4865 to i32*
  %7029 = load i32, i32* %7028
  %7030 = sext i32 %7029 to i64
  %7031 = mul nsw i64 %7030, 24
  %7032 = add i64 %7031, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %7033 = inttoptr i64 %7032 to i32*
  %7034 = load i32, i32* %7033
  %7035 = icmp ne i32 %7034, 1
  %7036 = select i1 %7035, i64 114, i64 57
  %7037 = add i64 %7668, %7036
  br i1 %7035, label %block_40c1a2, label %block_40c169

block_40effc:                                     ; preds = %block_40e9bb
  %7038 = add i32 %5806, 1
  %7039 = inttoptr i64 %5804 to i32*
  store i32 %7038, i32* %7039
  %7040 = add i64 %5803, -1678
  br label %block_40e96e

block_408c53:                                     ; preds = %block_408c49
  %7041 = inttoptr i64 %116 to i32*
  %7042 = load i32, i32* %7041
  %7043 = sext i32 %7042 to i64
  %7044 = mul nsw i64 %7043, 48
  %7045 = add i64 %7044, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 40)
  %7046 = inttoptr i64 %7045 to i32*
  %7047 = load i32, i32* %7046
  %7048 = inttoptr i64 %125 to i32*
  store i32 %7047, i32* %7048
  %7049 = inttoptr i64 %116 to i32*
  %7050 = load i32, i32* %7049
  %7051 = sext i32 %7050 to i64
  %7052 = mul nsw i64 %7051, 48
  %7053 = add i64 %7052, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %7054 = inttoptr i64 %7053 to i32*
  %7055 = load i32, i32* %7054
  %7056 = inttoptr i64 %126 to i32*
  store i32 %7055, i32* %7056
  %7057 = inttoptr i64 %125 to i32*
  %7058 = load i32, i32* %7057
  %7059 = icmp ne i32 %7058, 0
  %7060 = select i1 %7059, i64 135, i64 57
  %7061 = add i64 %6786, %7060
  br i1 %7059, label %block_408dba, label %block_408c8c

block_40b955:                                     ; preds = %block_40ad1c, %block_40ad2b, %block_4098d3.sink.split, %block_40973c, %block_40b946, %block_40a27a, %block_409f43, %block_409f48
  %7062 = phi i64 [ %8898, %block_40ad1c ], [ %4673, %block_409f43 ], [ %4679, %block_40a27a ], [ %4656, %block_409f48 ], [ %8684, %block_40ad2b ], [ %6806, %block_40b946 ], [ %7278, %block_40973c ], [ %7821, %block_4098d3.sink.split ]
  %7063 = phi i64 [ %8897, %block_40ad1c ], [ 833, %block_409f43 ], [ 5, %block_40a27a ], [ 5, %block_409f48 ], [ 2915, %block_40ad2b ], [ 5, %block_40b946 ], [ 5, %block_40973c ], [ %7820, %block_4098d3.sink.split ]
  %7064 = phi %struct.Memory* [ %8896, %block_40ad1c ], [ %4670, %block_409f43 ], [ %4676, %block_40a27a ], [ %3633, %block_409f48 ], [ %3633, %block_40ad2b ], [ %6805, %block_40b946 ], [ %3633, %block_40973c ], [ %7819, %block_4098d3.sink.split ]
  %7065 = phi i64 [ 3124, %block_40ad1c ], [ 5, %block_409f43 ], [ 5, %block_40a27a ], [ 5, %block_409f48 ], [ 5, %block_40ad2b ], [ 5, %block_40b946 ], [ 2486, %block_40973c ], [ 2486, %block_4098d3.sink.split ]
  %7066 = phi i64 [ 5, %block_40ad1c ], [ 5836, %block_409f43 ], [ 5836, %block_40a27a ], [ 5836, %block_409f48 ], [ 5, %block_40ad2b ], [ 5, %block_40b946 ], [ 5836, %block_40973c ], [ 5836, %block_4098d3.sink.split ]
  %7067 = add i64 %7065, %7063
  %7068 = add i64 %7067, %7062
  br label %block_40b95f

block_40992f:                                     ; preds = %block_4098f6
  %7069 = inttoptr i64 %126 to i32*
  %7070 = load i32, i32* %7069
  %7071 = icmp ne i32 %7070, 0
  %7072 = select i1 %7071, i64 300, i64 10
  %7073 = add i64 %7535, %7072
  br i1 %7071, label %block_409a65, label %block_409939

block_40c609:                                     ; preds = %block_40c5cf, %block_40c5d4
  %7074 = phi i64 [ %1155, %block_40c5d4 ], [ %1180, %block_40c5cf ]
  %7075 = phi %struct.Memory* [ %7538, %block_40c5d4 ], [ %1179, %block_40c5cf ]
  %7076 = add i64 %7074, 5
  br label %block_40c613

block_40a2ac:                                     ; preds = %block_40a298, %block_40a2a2
  %7077 = phi i64 [ %7093, %block_40a298 ], [ %4337, %block_40a2a2 ]
  %7078 = inttoptr i64 %116 to i32*
  %7079 = load i32, i32* %7078
  %7080 = sext i32 %7079 to i64
  %7081 = mul nsw i64 %7080, 48
  %7082 = add i64 %7081, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %7083 = inttoptr i64 %7082 to i32*
  %7084 = load i32, i32* %7083
  %7085 = icmp ne i32 %7084, 0
  %7086 = select i1 %7085, i64 321, i64 31
  %7087 = add i64 %7077, %7086
  %7088 = mul nsw i64 %7080, 96
  br i1 %7085, label %block_40a3ed, label %block_40a2cb

block_40a298:                                     ; preds = %block_40a28e
  %7089 = inttoptr i64 %119 to i32*
  %7090 = load i32, i32* %7089
  %7091 = icmp eq i32 %7090, 2
  %7092 = select i1 %7091, i64 20, i64 10
  %7093 = add i64 %4468, %7092
  br i1 %7091, label %block_40a2ac, label %block_40a2a2

block_40e12b:                                     ; preds = %block_40e0c2, %block_40e0fb
  %7094 = phi i64 [ %8008, %block_40e0c2 ], [ %7405, %block_40e0fb ]
  %7095 = phi %struct.Memory* [ %3689, %block_40e0c2 ], [ %3689, %block_40e0fb ]
  %7096 = add i64 %7094, 5
  br label %block_40e130

block_40e7f5:                                     ; preds = %block_40e7eb, %block_40e7e1
  %7097 = phi i64 [ %3207, %block_40e7eb ], [ %1143, %block_40e7e1 ]
  %7098 = inttoptr i64 %4855 to i32*
  %7099 = load i32, i32* %7098
  %7100 = sext i32 %7099 to i64
  %7101 = shl nsw i64 %7100, 2
  %7102 = add i64 %7101, ptrtoint (%newi_type* @newi to i64)
  %7103 = inttoptr i64 %7102 to i32*
  %7104 = load i32, i32* %7103
  %7105 = add i32 %7104, 9
  %7106 = inttoptr i64 %7102 to i32*
  store i32 %7105, i32* %7106
  %7107 = inttoptr i64 %4855 to i32*
  %7108 = load i32, i32* %7107
  %7109 = sext i32 %7108 to i64
  %7110 = mul nsw i64 %7109, 24
  %7111 = add i64 %7110, add (i64 ptrtoint (%fassign_type* @fassign to i64), i64 4)
  %7112 = add i64 %7097, 53
  %7113 = inttoptr i64 %7111 to i32*
  store i32 1, i32* %7113
  br label %block_40e82a

block_409128:                                     ; preds = %block_409046, %block_409050, %block_409046.thread
  %7114 = phi i64 [ %9037, %block_409046 ], [ %8948, %block_409050 ], [ %4029, %block_409046.thread ]
  %7115 = inttoptr i64 %116 to i32*
  %7116 = load i32, i32* %7115
  %7117 = sext i32 %7116 to i64
  %7118 = shl nsw i64 %7117, 2
  %7119 = add i64 %7118, ptrtoint (%newc_type* @newc to i64)
  %7120 = inttoptr i64 %7119 to i32*
  store i32 1, i32* %7120
  %7121 = inttoptr i64 %116 to i32*
  %7122 = load i32, i32* %7121
  %7123 = sext i32 %7122 to i64
  %7124 = shl nsw i64 %7123, 5
  store i64 %7124, i64* %5, align 8, !tbaa !1240
  %7125 = add i64 %7124, ptrtoint (%vassign_type* @vassign to i64)
  %7126 = add i64 %7114, 42
  %7127 = inttoptr i64 %7125 to i32*
  store i32 7, i32* %7127
  br label %block_409152

block_409ac8:                                     ; preds = %block_409aa8
  %7128 = sext i32 %4301 to i64
  %7129 = shl nsw i64 %7128, 2
  %7130 = add i64 %7129, ptrtoint (%newc_type* @newc to i64)
  %7131 = inttoptr i64 %7130 to i32*
  store i32 3, i32* %7131
  %7132 = inttoptr i64 %116 to i32*
  %7133 = load i32, i32* %7132
  %7134 = sext i32 %7133 to i64
  %7135 = shl nsw i64 %7134, 5
  %7136 = add i64 %7135, ptrtoint (%vassign_type* @vassign to i64)
  %7137 = inttoptr i64 %7136 to i32*
  store i32 4, i32* %7137
  %7138 = inttoptr i64 %116 to i32*
  %7139 = load i32, i32* %7138
  %7140 = sext i32 %7139 to i64
  %7141 = shl nsw i64 %7140, 5
  %7142 = add i64 %7141, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %7143 = inttoptr i64 %7142 to i32*
  store i32 6, i32* %7143
  %7144 = inttoptr i64 %116 to i32*
  %7145 = load i32, i32* %7144
  %7146 = sext i32 %7145 to i64
  %7147 = shl nsw i64 %7146, 5
  store i64 %7147, i64* %5, align 8, !tbaa !1240
  %7148 = add i64 %7147, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %7149 = inttoptr i64 %7148 to i32*
  store i32 7, i32* %7149
  %7150 = add i64 %4313, 194
  br label %block_409db1

block_409123:                                     ; preds = %block_4090e4, %block_4090b5
  %7151 = phi i64 [ %7788, %block_4090e4 ], [ %2643, %block_4090b5 ]
  %7152 = phi %struct.Memory* [ %3633, %block_4090e4 ], [ %3633, %block_4090b5 ]
  %7153 = add i64 %7151, 47
  br label %block_409152

block_40b119:                                     ; preds = %block_40b10f
  %7154 = inttoptr i64 %116 to i32*
  %7155 = load i32, i32* %7154
  %7156 = sext i32 %7155 to i64
  %7157 = mul nsw i64 %7156, 96
  %7158 = add i64 %7157, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %7159 = inttoptr i64 %7158 to i32*
  %7160 = load i32, i32* %7159
  %7161 = inttoptr i64 %123 to i32*
  store i32 %7160, i32* %7161
  %7162 = inttoptr i64 %123 to i32*
  %7163 = load i32, i32* %7162
  %7164 = sext i32 %7163 to i64
  %7165 = mul nsw i64 %7164, 24
  %7166 = add i64 %7165, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %7167 = inttoptr i64 %7166 to i32*
  %7168 = load i32, i32* %7167
  %7169 = icmp ne i32 %7168, 3
  %7170 = select i1 %7169, i64 243, i64 58
  %7171 = add i64 %849, %7170
  br i1 %7169, label %block_40b119.block_40b20c_crit_edge, label %block_40b153

block_40b119.block_40b20c_crit_edge:              ; preds = %block_40b119
  %7172 = inttoptr i64 %116 to i32*
  %7173 = load i32, i32* %7172
  br label %block_40b20c

block_40e916:                                     ; preds = %block_40babd
  store i64 ptrtoint (%front_type* @front to i64), i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%newc_type* @newc to i64), i64* %7, align 8, !tbaa !1240
  %7174 = zext i32 %8614 to i64
  store i64 %7174, i64* %6, align 8, !tbaa !1240
  %7175 = add i64 %8627, 69642
  %7176 = add i64 %8627, 32
  %7177 = load i64, i64* %9, align 8, !tbaa !1240
  %7178 = add i64 %7177, -8
  %7179 = inttoptr i64 %7178 to i64*
  store i64 %7176, i64* %7179
  store i64 %7178, i64* %9, align 8, !tbaa !1240
  %7180 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %7175, %struct.Memory* %8611)
  %7181 = load i64, i64* %3, align 8
  store i64 ptrtoint (%front_type* @front to i64), i64* %8, align 8, !tbaa !1240
  %7182 = add i64 %7181, 70634
  %7183 = add i64 %7181, 15
  %7184 = load i64, i64* %9, align 8, !tbaa !1240
  %7185 = add i64 %7184, -8
  %7186 = inttoptr i64 %7185 to i64*
  store i64 %7183, i64* %7186
  store i64 %7185, i64* %9, align 8, !tbaa !1240
  %7187 = tail call %struct.Memory* @sub_41fd20_parallel_add(%struct.State* nonnull %0, i64 %7182, %struct.Memory* %7180)
  %7188 = load i64, i64* %3, align 8
  %7189 = load i32, i32* bitcast (%nvertex_type* @nvertex to i32*)
  %7190 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %7191 = add i32 %7190, -1
  %7192 = sext i32 %7191 to i64
  store i64 %7192, i64* %7, align 8, !tbaa !1240
  %7193 = shl nsw i64 %7192, 2
  %7194 = add i64 %7193, ptrtoint (%front_type* @front to i64)
  %7195 = inttoptr i64 %7194 to i32*
  %7196 = load i32, i32* %7195
  %7197 = add i32 %7196, %7189
  %7198 = zext i32 %7197 to i64
  store i64 %7198, i64* %6, align 8, !tbaa !1240
  store i32 %7197, i32* bitcast (%nmor_type* @nmor to i32*)
  %7199 = load i64, i64* %10, align 8
  %7200 = add i64 %7199, -8
  %7201 = add i64 %7188, 41
  %7202 = inttoptr i64 %7200 to i32*
  store i32 0, i32* %7202
  br label %block_40e96e

block_409da2:                                     ; preds = %block_409d0a, %block_409d4e
  %7203 = phi i64 [ %1600, %block_409d4e ], [ %1906, %block_409d0a ]
  %7204 = phi %struct.Memory* [ %3633, %block_409d4e ], [ %3633, %block_409d0a ]
  %7205 = add i64 %7203, 5
  br label %block_409dac

block_408a58:                                     ; preds = %block_408a4e, %block_4089fa
  %7206 = phi i64 [ %7272, %block_408a4e ], [ %5403, %block_4089fa ]
  %7207 = inttoptr i64 %122 to i32*
  %7208 = load i32, i32* %7207
  %7209 = add i32 %7208, 1
  %7210 = add i64 %7206, 9
  %7211 = inttoptr i64 %122 to i32*
  store i32 %7209, i32* %7211
  br label %block_408a9b

block_40d112:                                     ; preds = %block_40d108
  %7212 = inttoptr i64 %4855 to i32*
  %7213 = load i32, i32* %7212
  %7214 = sext i32 %7213 to i64
  %7215 = mul nsw i64 %7214, 96
  %7216 = add i64 %7215, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %7217 = inttoptr i64 %7216 to i32*
  %7218 = load i32, i32* %7217
  %7219 = inttoptr i64 %4865 to i32*
  store i32 %7218, i32* %7219
  %7220 = inttoptr i64 %4865 to i32*
  %7221 = load i32, i32* %7220
  %7222 = sext i32 %7221 to i64
  %7223 = mul nsw i64 %7222, 24
  %7224 = add i64 %7223, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %7225 = inttoptr i64 %7224 to i32*
  %7226 = load i32, i32* %7225
  %7227 = icmp ne i32 %7226, 3
  %7228 = select i1 %7227, i64 91, i64 58
  %7229 = add i64 %7275, %7228
  br i1 %7227, label %block_40d112.block_40d16d_crit_edge, label %block_40d14c

block_40d112.block_40d16d_crit_edge:              ; preds = %block_40d112
  %7230 = inttoptr i64 %4855 to i32*
  %7231 = load i32, i32* %7230
  br label %block_40d16d

block_40a305:                                     ; preds = %block_40a2cb
  %7232 = mul nsw i64 %4229, 96
  %7233 = add i64 %7232, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %7234 = inttoptr i64 %7233 to i32*
  %7235 = load i32, i32* %7234
  %7236 = inttoptr i64 %116 to i32*
  %7237 = load i32, i32* %7236
  %7238 = sub i32 %7235, %7237
  %7239 = lshr i32 %7238, 31
  %7240 = lshr i32 %7235, 31
  %7241 = lshr i32 %7237, 31
  %7242 = xor i32 %7241, %7240
  %7243 = xor i32 %7239, %7240
  %7244 = add nuw nsw i32 %7243, %7242
  %7245 = icmp eq i32 %7244, 2
  %7246 = icmp ne i32 %7239, 0
  %7247 = xor i1 %7246, %7245
  %7248 = select i1 %7247, i64 33, i64 122
  %7249 = add i64 %4236, %7248
  br i1 %7247, label %block_40a326, label %block_40a37f

block_40f02d:                                     ; preds = %block_40f347, %block_40f026
  %7250 = phi i64 [ %2922, %block_40f026 ], [ %6445, %block_40f347 ]
  %7251 = phi i64 [ %9363, %block_40f026 ], [ %6437, %block_40f347 ]
  %7252 = phi %struct.Memory* [ %9364, %block_40f026 ], [ %6439, %block_40f347 ]
  %7253 = add i64 %7251, -20
  %7254 = inttoptr i64 %7253 to i32*
  %7255 = load i32, i32* %7254
  %7256 = add i32 %7255, -6
  %7257 = lshr i32 %7256, 31
  %7258 = trunc i32 %7257 to i8
  %7259 = lshr i32 %7255, 31
  %7260 = xor i32 %7257, %7259
  %7261 = add nuw nsw i32 %7260, %7259
  %7262 = icmp eq i32 %7261, 2
  %7263 = icmp ne i8 %7258, 0
  %7264 = xor i1 %7263, %7262
  %7265 = select i1 %7264, i64 10, i64 813
  %7266 = add i64 %7250, %7265
  %7267 = add i64 %7251, -8
  %7268 = inttoptr i64 %7267 to i32*
  %7269 = load i32, i32* %7268
  br i1 %7264, label %block_40f037, label %block_40f35a

block_408a4e:                                     ; preds = %block_4089fa
  %7270 = icmp ne i32 %5400, 3
  %7271 = select i1 %7270, i64 24, i64 10
  %7272 = add i64 %5403, %7271
  br i1 %7270, label %block_408a66, label %block_408a58

block_40d108:                                     ; preds = %block_40d0c4
  %7273 = icmp ne i32 %2274, 1
  %7274 = select i1 %7273, i64 496, i64 10
  %7275 = add i64 %2277, %7274
  br i1 %7273, label %block_40d2fd, label %block_40d112

block_40973c:                                     ; preds = %block_409732
  %7276 = icmp ne i32 %7341, 3
  %7277 = select i1 %7276, i64 402, i64 10
  %7278 = add i64 %7344, %7277
  br i1 %7276, label %block_40b955, label %block_409746

block_40c107:                                     ; preds = %block_40bf1c
  %7279 = icmp ne i32 %663, 2
  %7280 = select i1 %7279, i64 354, i64 10
  %7281 = add i64 %510, %7280
  br i1 %7279, label %block_40c26e, label %block_40c111

block_40942b:                                     ; preds = %block_409408, %block_409421
  %7282 = phi i64 [ %2864, %block_409408 ], [ %2733, %block_409421 ]
  %7283 = inttoptr i64 %116 to i32*
  %7284 = load i32, i32* %7283
  %7285 = sext i32 %7284 to i64
  %7286 = shl nsw i64 %7285, 5
  %7287 = add i64 %7286, ptrtoint (%vassign_type* @vassign to i64)
  %7288 = inttoptr i64 %7287 to i32*
  store i32 4, i32* %7288
  %7289 = inttoptr i64 %116 to i32*
  %7290 = load i32, i32* %7289
  %7291 = sext i32 %7290 to i64
  %7292 = shl nsw i64 %7291, 5
  %7293 = add i64 %7292, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %7294 = inttoptr i64 %7293 to i32*
  store i32 5, i32* %7294
  %7295 = inttoptr i64 %116 to i32*
  %7296 = load i32, i32* %7295
  %7297 = sext i32 %7296 to i64
  %7298 = shl nsw i64 %7297, 5
  %7299 = add i64 %7298, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %7300 = inttoptr i64 %7299 to i32*
  store i32 6, i32* %7300
  %7301 = inttoptr i64 %116 to i32*
  %7302 = load i32, i32* %7301
  %7303 = sext i32 %7302 to i64
  %7304 = shl nsw i64 %7303, 5
  store i64 %7304, i64* %5, align 8, !tbaa !1240
  %7305 = add i64 %7304, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %7306 = add i64 %7282, 90
  %7307 = inttoptr i64 %7305 to i32*
  store i32 7, i32* %7307
  br label %block_40b95f

block_40c27d:                                     ; preds = %block_40c273
  %7308 = inttoptr i64 %4855 to i32*
  %7309 = load i32, i32* %7308
  %7310 = sext i32 %7309 to i64
  %7311 = shl nsw i64 %7310, 2
  %7312 = add i64 %7311, ptrtoint (%newe_type* @newe to i64)
  %7313 = inttoptr i64 %7312 to i32*
  %7314 = load i32, i32* %7313
  %7315 = add i32 %7314, 1
  %7316 = inttoptr i64 %7312 to i32*
  store i32 %7315, i32* %7316
  %7317 = inttoptr i64 %4855 to i32*
  %7318 = load i32, i32* %7317
  %7319 = sext i32 %7318 to i64
  %7320 = mul nsw i64 %7319, 48
  %7321 = add i64 %7320, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 32)
  %7322 = add i64 %7544, 53
  %7323 = inttoptr i64 %7321 to i32*
  store i32 1, i32* %7323
  br label %block_40c618

block_40d8fe:                                     ; preds = %block_40d8f4
  %7324 = inttoptr i64 %4855 to i32*
  %7325 = load i32, i32* %7324
  %7326 = sext i32 %7325 to i64
  %7327 = shl nsw i64 %7326, 2
  %7328 = add i64 %7327, ptrtoint (%newe_type* @newe to i64)
  %7329 = inttoptr i64 %7328 to i32*
  %7330 = load i32, i32* %7329
  %7331 = add i32 %7330, 1
  %7332 = inttoptr i64 %7328 to i32*
  store i32 %7331, i32* %7332
  %7333 = inttoptr i64 %4855 to i32*
  %7334 = load i32, i32* %7333
  %7335 = sext i32 %7334 to i64
  %7336 = mul nsw i64 %7335, 48
  %7337 = add i64 %7336, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 24)
  %7338 = add i64 %7547, 53
  %7339 = inttoptr i64 %7337 to i32*
  store i32 1, i32* %7339
  br label %block_40db31

block_409732:                                     ; preds = %block_409598
  %7340 = inttoptr i64 %121 to i32*
  %7341 = load i32, i32* %7340
  %7342 = icmp eq i32 %7341, 2
  %7343 = select i1 %7342, i64 20, i64 10
  %7344 = add i64 %4758, %7343
  br i1 %7342, label %block_409746, label %block_40973c

block_40c0fd:                                     ; preds = %block_40c074, %block_40c093, %block_40c0b4
  %7345 = phi i64 [ %8979, %block_40c074 ], [ %8829, %block_40c093 ], [ %8097, %block_40c0b4 ]
  %7346 = phi %struct.Memory* [ %8969, %block_40c074 ], [ %8969, %block_40c093 ], [ %8969, %block_40c0b4 ]
  %7347 = add i64 %7345, 5
  br label %block_40c26e

block_40f0fc:                                     ; preds = %block_40f0f2
  %7348 = inttoptr i64 %3933 to i32*
  %7349 = load i32, i32* %7348
  %7350 = sext i32 %7349 to i64
  %7351 = mul nsw i64 %7350, 2400
  %7352 = add i64 %7351, ptrtoint (%idmo_type* @idmo to i64)
  %7353 = inttoptr i64 %9090 to i32*
  %7354 = load i32, i32* %7353
  %7355 = sext i32 %7354 to i64
  %7356 = mul nsw i64 %7355, 400
  %7357 = add i64 %7356, %7352
  %7358 = inttoptr i64 %3934 to i32*
  %7359 = load i32, i32* %7358
  %7360 = sext i32 %7359 to i64
  %7361 = mul nsw i64 %7360, 20
  %7362 = add i64 %7361, %7357
  %7363 = sext i32 %7551 to i64
  %7364 = shl nsw i64 %7363, 2
  %7365 = add i64 %7364, %7362
  %7366 = inttoptr i64 %7365 to i32*
  %7367 = load i32, i32* %7366
  %7368 = inttoptr i64 %3932 to i32*
  %7369 = load i32, i32* %7368
  %7370 = sext i32 %7369 to i64
  %7371 = mul nsw i64 %7370, 2400
  %7372 = add i64 %7371, ptrtoint (%idmo_type* @idmo to i64)
  %7373 = inttoptr i64 %9081 to i32*
  %7374 = load i32, i32* %7373
  %7375 = sext i32 %7374 to i64
  %7376 = mul nsw i64 %7375, 400
  %7377 = add i64 %7376, %7372
  %7378 = inttoptr i64 %3931 to i32*
  %7379 = load i32, i32* %7378
  %7380 = sext i32 %7379 to i64
  %7381 = mul nsw i64 %7380, 200
  %7382 = add i64 %7381, %7377
  %7383 = inttoptr i64 %3928 to i32*
  %7384 = load i32, i32* %7383
  %7385 = sext i32 %7384 to i64
  %7386 = mul nsw i64 %7385, 100
  %7387 = add i64 %7386, %7382
  %7388 = add i64 %7361, %7387
  %7389 = add i64 %7364, %7388
  %7390 = inttoptr i64 %7389 to i32*
  store i32 %7367, i32* %7390
  %7391 = inttoptr i64 %3935 to i32*
  %7392 = load i32, i32* %7391
  %7393 = add i32 %7392, 1
  %7394 = inttoptr i64 %3935 to i32*
  store i32 %7393, i32* %7394
  %7395 = add i64 %7561, -10
  br label %block_40f0f2

block_40e0fb:                                     ; preds = %block_40e0c2
  %7396 = mul nsw i64 %8001, 96
  %7397 = add i64 %7396, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %7398 = inttoptr i64 %7397 to i32*
  %7399 = load i32, i32* %7398
  %7400 = inttoptr i64 %4855 to i32*
  %7401 = load i32, i32* %7400
  %7402 = sext i32 %7401 to i64
  %7403 = mul nsw i64 %7402, 96
  %7404 = add i64 %7403, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 8)
  %7405 = add i64 %8008, 48
  %7406 = inttoptr i64 %7404 to i32*
  store i32 %7399, i32* %7406
  br label %block_40e12b

block_40aeae:                                     ; preds = %block_40aea4
  %7407 = inttoptr i64 %119 to i32*
  %7408 = load i32, i32* %7407
  %7409 = icmp ne i32 %7408, 0
  %7410 = select i1 %7409, i64 426, i64 10
  %7411 = add i64 %8014, %7410
  br i1 %7409, label %block_40b058, label %block_40aeb8

block_40ced4:                                     ; preds = %block_40ceca
  %7412 = inttoptr i64 %4855 to i32*
  %7413 = load i32, i32* %7412
  %7414 = sext i32 %7413 to i64
  %7415 = mul nsw i64 %7414, 96
  %7416 = add i64 %7415, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %7417 = inttoptr i64 %7416 to i32*
  %7418 = load i32, i32* %7417
  %7419 = inttoptr i64 %4865 to i32*
  store i32 %7418, i32* %7419
  %7420 = inttoptr i64 %4865 to i32*
  %7421 = load i32, i32* %7420
  %7422 = sext i32 %7421 to i64
  %7423 = mul nsw i64 %7422, 24
  %7424 = add i64 %7423, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %7425 = inttoptr i64 %7424 to i32*
  %7426 = load i32, i32* %7425
  %7427 = icmp ne i32 %7426, 3
  %7428 = select i1 %7427, i64 91, i64 58
  %7429 = add i64 %8017, %7428
  br i1 %7427, label %block_40ced4.block_40cf2f_crit_edge, label %block_40cf0e

block_40ced4.block_40cf2f_crit_edge:              ; preds = %block_40ced4
  %7430 = inttoptr i64 %4855 to i32*
  %7431 = load i32, i32* %7430
  br label %block_40cf2f

block_40d5d3:                                     ; preds = %block_40d578.block_40d5d3_crit_edge, %block_40d5b2
  %7432 = phi i32 [ %8770, %block_40d578.block_40d5d3_crit_edge ], [ %1271, %block_40d5b2 ]
  %7433 = phi i64 [ %8768, %block_40d578.block_40d5d3_crit_edge ], [ %1285, %block_40d5b2 ]
  %7434 = sext i32 %7432 to i64
  %7435 = shl nsw i64 %7434, 2
  %7436 = add i64 %7435, ptrtoint (%newe_type* @newe to i64)
  %7437 = inttoptr i64 %7436 to i32*
  %7438 = load i32, i32* %7437
  %7439 = add i32 %7438, 1
  %7440 = inttoptr i64 %7436 to i32*
  store i32 %7439, i32* %7440
  %7441 = inttoptr i64 %4855 to i32*
  %7442 = load i32, i32* %7441
  %7443 = sext i32 %7442 to i64
  %7444 = mul nsw i64 %7443, 48
  %7445 = add i64 %7444, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 20)
  %7446 = inttoptr i64 %7445 to i32*
  store i32 1, i32* %7446
  %7447 = inttoptr i64 %4865 to i32*
  %7448 = load i32, i32* %7447
  %7449 = sext i32 %7448 to i64
  %7450 = mul nsw i64 %7449, 24
  %7451 = add i64 %7450, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %7452 = inttoptr i64 %7451 to i32*
  %7453 = load i32, i32* %7452
  %7454 = icmp ne i32 %7453, 2
  %7455 = select i1 %7454, i64 247, i64 84
  %7456 = add i64 %7433, %7455
  br i1 %7454, label %block_40d6ca, label %block_40d627

block_40c8f7:                                     ; preds = %block_40c8e3, %block_40c8ed
  %7457 = phi i64 [ %7796, %block_40c8e3 ], [ %7613, %block_40c8ed ]
  %7458 = inttoptr i64 %4855 to i32*
  %7459 = load i32, i32* %7458
  %7460 = sext i32 %7459 to i64
  %7461 = shl nsw i64 %7460, 2
  %7462 = add i64 %7461, ptrtoint (%newe_type* @newe to i64)
  %7463 = inttoptr i64 %7462 to i32*
  %7464 = load i32, i32* %7463
  %7465 = add i32 %7464, 1
  %7466 = inttoptr i64 %7462 to i32*
  store i32 %7465, i32* %7466
  %7467 = inttoptr i64 %4855 to i32*
  %7468 = load i32, i32* %7467
  %7469 = sext i32 %7468 to i64
  %7470 = mul nsw i64 %7469, 48
  %7471 = add i64 %7470, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 28)
  %7472 = add i64 %7457, 53
  %7473 = inttoptr i64 %7471 to i32*
  store i32 1, i32* %7473
  br label %block_40d307

block_40c2c1:                                     ; preds = %block_40c2b7
  %7474 = inttoptr i64 %4855 to i32*
  %7475 = load i32, i32* %7474
  %7476 = sext i32 %7475 to i64
  %7477 = mul nsw i64 %7476, 96
  %7478 = add i64 %7477, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %7479 = inttoptr i64 %7478 to i32*
  %7480 = load i32, i32* %7479
  %7481 = inttoptr i64 %4865 to i32*
  store i32 %7480, i32* %7481
  %7482 = inttoptr i64 %4865 to i32*
  %7483 = load i32, i32* %7482
  %7484 = sext i32 %7483 to i64
  %7485 = mul nsw i64 %7484, 24
  %7486 = add i64 %7485, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %7487 = inttoptr i64 %7486 to i32*
  %7488 = load i32, i32* %7487
  %7489 = icmp ne i32 %7488, 3
  %7490 = select i1 %7489, i64 91, i64 58
  %7491 = add i64 %7641, %7490
  br i1 %7489, label %block_40c2c1.block_40c31c_crit_edge, label %block_40c2fb

block_40c2c1.block_40c31c_crit_edge:              ; preds = %block_40c2c1
  %7492 = inttoptr i64 %4855 to i32*
  %7493 = load i32, i32* %7492
  br label %block_40c31c

block_40d942:                                     ; preds = %block_40d938
  %7494 = inttoptr i64 %4855 to i32*
  %7495 = load i32, i32* %7494
  %7496 = sext i32 %7495 to i64
  %7497 = mul nsw i64 %7496, 96
  %7498 = add i64 %7497, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %7499 = inttoptr i64 %7498 to i32*
  %7500 = load i32, i32* %7499
  %7501 = inttoptr i64 %4865 to i32*
  store i32 %7500, i32* %7501
  %7502 = inttoptr i64 %4865 to i32*
  %7503 = load i32, i32* %7502
  %7504 = sext i32 %7503 to i64
  %7505 = mul nsw i64 %7504, 24
  %7506 = add i64 %7505, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %7507 = inttoptr i64 %7506 to i32*
  %7508 = load i32, i32* %7507
  %7509 = icmp ne i32 %7508, 3
  %7510 = select i1 %7509, i64 91, i64 58
  %7511 = add i64 %7644, %7510
  br i1 %7509, label %block_40d942.block_40d99d_crit_edge, label %block_40d97c

block_40d942.block_40d99d_crit_edge:              ; preds = %block_40d942
  %7512 = inttoptr i64 %4855 to i32*
  %7513 = load i32, i32* %7512
  br label %block_40d99d

block_4098f6:                                     ; preds = %block_4098e2, %block_4098ec
  %7514 = phi i64 [ %7799, %block_4098e2 ], [ %7647, %block_4098ec ]
  %7515 = inttoptr i64 %116 to i32*
  %7516 = load i32, i32* %7515
  %7517 = sext i32 %7516 to i64
  %7518 = mul nsw i64 %7517, 48
  %7519 = add i64 %7518, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %7520 = inttoptr i64 %7519 to i32*
  %7521 = load i32, i32* %7520
  %7522 = inttoptr i64 %125 to i32*
  store i32 %7521, i32* %7522
  %7523 = inttoptr i64 %116 to i32*
  %7524 = load i32, i32* %7523
  %7525 = sext i32 %7524 to i64
  %7526 = mul nsw i64 %7525, 48
  store i64 %7526, i64* %5, align 8, !tbaa !1240
  %7527 = add i64 %7526, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %7528 = inttoptr i64 %7527 to i32*
  %7529 = load i32, i32* %7528
  %7530 = inttoptr i64 %126 to i32*
  store i32 %7529, i32* %7530
  %7531 = inttoptr i64 %125 to i32*
  %7532 = load i32, i32* %7531
  %7533 = icmp ne i32 %7532, 0
  %7534 = select i1 %7533, i64 357, i64 57
  %7535 = add i64 %7514, %7534
  br i1 %7533, label %block_409b8f, label %block_40992f

block_40c273:                                     ; preds = %block_40bee3, %block_40c26e
  %7536 = phi i64 [ %8250, %block_40bee3 ], [ %7610, %block_40c26e ]
  %7537 = phi i64 [ 860, %block_40bee3 ], [ 5, %block_40c26e ]
  %7538 = phi %struct.Memory* [ %660, %block_40bee3 ], [ %7609, %block_40c26e ]
  %7539 = add i64 %7536, %7537
  %7540 = inttoptr i64 %4861 to i32*
  %7541 = load i32, i32* %7540
  %7542 = icmp ne i32 %7541, 0
  %7543 = select i1 %7542, i64 68, i64 10
  %7544 = add i64 %7539, %7543
  br i1 %7542, label %block_40c2b7, label %block_40c27d

block_40d8f4:                                     ; preds = %block_40d768
  %7545 = icmp ne i32 %3076, 0
  %7546 = select i1 %7545, i64 68, i64 10
  %7547 = add i64 %3079, %7546
  br i1 %7545, label %block_40d938, label %block_40d8fe

block_40f0f2:                                     ; preds = %block_40f0fc, %block_40f0eb
  %7548 = phi i64 [ %5018, %block_40f0eb ], [ %7395, %block_40f0fc ]
  %7549 = phi %struct.Memory* [ %7801, %block_40f0eb ], [ %7549, %block_40f0fc ]
  %7550 = inttoptr i64 %3935 to i32*
  %7551 = load i32, i32* %7550
  %7552 = add i32 %7551, -5
  %7553 = lshr i32 %7552, 31
  %7554 = lshr i32 %7551, 31
  %7555 = xor i32 %7553, %7554
  %7556 = add nuw nsw i32 %7555, %7554
  %7557 = icmp eq i32 %7556, 2
  %7558 = icmp ne i32 %7553, 0
  %7559 = xor i1 %7558, %7557
  %7560 = select i1 %7559, i64 10, i64 154
  %7561 = add i64 %7548, %7560
  br i1 %7559, label %block_40f0fc, label %block_40f18c

block_40a8f1:                                     ; preds = %block_40a8d0
  %7562 = sext i32 %7832 to i64
  %7563 = shl nsw i64 %7562, 2
  %7564 = add i64 %7563, ptrtoint (%newc_type* @newc to i64)
  %7565 = inttoptr i64 %7564 to i32*
  store i32 2, i32* %7565
  %7566 = inttoptr i64 %116 to i32*
  %7567 = load i32, i32* %7566
  %7568 = sext i32 %7567 to i64
  %7569 = shl nsw i64 %7568, 5
  %7570 = add i64 %7569, ptrtoint (%vassign_type* @vassign to i64)
  %7571 = inttoptr i64 %7570 to i32*
  store i32 6, i32* %7571
  %7572 = inttoptr i64 %116 to i32*
  %7573 = load i32, i32* %7572
  %7574 = sext i32 %7573 to i64
  %7575 = shl nsw i64 %7574, 5
  store i64 %7575, i64* %5, align 8, !tbaa !1240
  %7576 = add i64 %7575, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %7577 = inttoptr i64 %7576 to i32*
  store i32 7, i32* %7577
  %7578 = add i64 %7844, 152
  br label %block_40a98e

block_40a427:                                     ; preds = %block_40a3ed
  %7579 = mul nsw i64 %4904, 96
  %7580 = add i64 %7579, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %7581 = inttoptr i64 %7580 to i32*
  %7582 = load i32, i32* %7581
  %7583 = inttoptr i64 %116 to i32*
  %7584 = load i32, i32* %7583
  %7585 = sub i32 %7582, %7584
  %7586 = lshr i32 %7585, 31
  %7587 = lshr i32 %7582, 31
  %7588 = lshr i32 %7584, 31
  %7589 = xor i32 %7588, %7587
  %7590 = xor i32 %7586, %7587
  %7591 = add nuw nsw i32 %7590, %7589
  %7592 = icmp eq i32 %7591, 2
  %7593 = icmp ne i32 %7586, 0
  %7594 = xor i1 %7593, %7592
  %7595 = select i1 %7594, i64 33, i64 239
  %7596 = add i64 %4911, %7595
  br i1 %7594, label %block_40a448, label %block_40a516

block_40a0f0:                                     ; preds = %block_409f5c
  %7597 = inttoptr i64 %116 to i32*
  %7598 = load i32, i32* %7597
  %7599 = sext i32 %7598 to i64
  %7600 = mul nsw i64 %7599, 48
  %7601 = add i64 %7600, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 12)
  %7602 = inttoptr i64 %7601 to i32*
  %7603 = load i32, i32* %7602
  %7604 = icmp ne i32 %7603, 0
  %7605 = select i1 %7604, i64 141, i64 31
  %7606 = add i64 %2565, %7605
  br i1 %7604, label %block_40a17d, label %block_40a10f

block_40c26e:                                     ; preds = %block_40c0fd, %block_40c107, %block_40c264, %block_40bf5f
  %7607 = phi i64 [ %7281, %block_40c107 ], [ %4755, %block_40c264 ], [ %7347, %block_40c0fd ], [ %4702, %block_40bf5f ]
  %7608 = phi i64 [ 5, %block_40c107 ], [ 5, %block_40c264 ], [ 364, %block_40c0fd ], [ 364, %block_40bf5f ]
  %7609 = phi %struct.Memory* [ %660, %block_40c107 ], [ %4754, %block_40c264 ], [ %7346, %block_40c0fd ], [ %660, %block_40bf5f ]
  %7610 = add i64 %7607, %7608
  br label %block_40c273

block_40c8ed:                                     ; preds = %block_40c8e3
  %7611 = icmp ne i32 %7793, 1
  %7612 = select i1 %7611, i64 63, i64 10
  %7613 = add i64 %7796, %7612
  br i1 %7611, label %block_40d307, label %block_40c8f7

block_40bf80:                                     ; preds = %block_40bf5f, %block_40bf26.block_40bf80_crit_edge
  %7614 = phi i32 [ %530, %block_40bf26.block_40bf80_crit_edge ], [ %4688, %block_40bf5f ]
  %7615 = phi i64 [ %528, %block_40bf26.block_40bf80_crit_edge ], [ %4702, %block_40bf5f ]
  %7616 = sext i32 %7614 to i64
  %7617 = shl nsw i64 %7616, 2
  %7618 = add i64 %7617, ptrtoint (%newe_type* @newe to i64)
  %7619 = inttoptr i64 %7618 to i32*
  %7620 = load i32, i32* %7619
  %7621 = add i32 %7620, 1
  %7622 = inttoptr i64 %7618 to i32*
  store i32 %7621, i32* %7622
  %7623 = inttoptr i64 %4855 to i32*
  %7624 = load i32, i32* %7623
  %7625 = sext i32 %7624 to i64
  %7626 = mul nsw i64 %7625, 48
  %7627 = add i64 %7626, ptrtoint (%eassign_type* @eassign to i64)
  %7628 = inttoptr i64 %7627 to i32*
  store i32 1, i32* %7628
  %7629 = inttoptr i64 %4865 to i32*
  %7630 = load i32, i32* %7629
  %7631 = sext i32 %7630 to i64
  %7632 = mul nsw i64 %7631, 24
  %7633 = add i64 %7632, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %7634 = inttoptr i64 %7633 to i32*
  %7635 = load i32, i32* %7634
  %7636 = icmp ne i32 %7635, 2
  %7637 = select i1 %7636, i64 244, i64 83
  %7638 = add i64 %7615, %7637
  br i1 %7636, label %block_40c074, label %block_40bfd3

block_40c2b7:                                     ; preds = %block_40c273
  %7639 = icmp ne i32 %7541, 1
  %7640 = select i1 %7639, i64 496, i64 10
  %7641 = add i64 %7544, %7640
  br i1 %7639, label %block_40c4a7, label %block_40c2c1

block_40d938:                                     ; preds = %block_40d8f4
  %7642 = icmp ne i32 %3076, 1
  %7643 = select i1 %7642, i64 495, i64 10
  %7644 = add i64 %7547, %7643
  br i1 %7642, label %block_40db31, label %block_40d942

block_4098ec:                                     ; preds = %block_4098e2
  %7645 = icmp ne i32 %1487, 3
  %7646 = select i1 %7645, i64 1231, i64 10
  %7647 = add i64 %7799, %7646
  br i1 %7645, label %block_409dbb, label %block_4098f6

block_409746:                                     ; preds = %block_409732, %block_40973c
  %7648 = phi i64 [ %7344, %block_409732 ], [ %7278, %block_40973c ]
  %7649 = inttoptr i64 %116 to i32*
  %7650 = load i32, i32* %7649
  %7651 = sext i32 %7650 to i64
  %7652 = mul nsw i64 %7651, 48
  %7653 = add i64 %7652, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %7654 = inttoptr i64 %7653 to i32*
  %7655 = load i32, i32* %7654
  %7656 = icmp ne i32 %7655, 0
  %7657 = select i1 %7656, i64 141, i64 31
  %7658 = add i64 %7648, %7657
  br i1 %7656, label %block_4097d3, label %block_409765

block_40c111:                                     ; preds = %block_40c107
  %7659 = inttoptr i64 %4855 to i32*
  %7660 = load i32, i32* %7659
  %7661 = sext i32 %7660 to i64
  %7662 = mul nsw i64 %7661, 48
  %7663 = add i64 %7662, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 44)
  %7664 = inttoptr i64 %7663 to i32*
  %7665 = load i32, i32* %7664
  %7666 = icmp ne i32 %7665, 1
  %7667 = select i1 %7666, i64 287, i64 31
  %7668 = add i64 %7281, %7667
  br i1 %7666, label %block_40c230, label %block_40c130

block_40c2fb:                                     ; preds = %block_40c2c1
  %7669 = mul nsw i64 %7484, 96
  %7670 = add i64 %7669, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %7671 = inttoptr i64 %7670 to i32*
  %7672 = load i32, i32* %7671
  %7673 = inttoptr i64 %4855 to i32*
  %7674 = load i32, i32* %7673
  %7675 = sub i32 %7672, %7674
  %7676 = icmp eq i32 %7675, 0
  %7677 = lshr i32 %7675, 31
  %7678 = lshr i32 %7672, 31
  %7679 = lshr i32 %7674, 31
  %7680 = xor i32 %7679, %7678
  %7681 = xor i32 %7677, %7678
  %7682 = add nuw nsw i32 %7681, %7680
  %7683 = icmp eq i32 %7682, 2
  %7684 = icmp ne i32 %7677, 0
  %7685 = xor i1 %7684, %7683
  %7686 = or i1 %7676, %7685
  %7687 = select i1 %7686, i64 423, i64 33
  %7688 = add i64 %7491, %7687
  br i1 %7686, label %block_40c613, label %block_40c31c

block_40d97c:                                     ; preds = %block_40d942
  %7689 = mul nsw i64 %7504, 96
  %7690 = add i64 %7689, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %7691 = inttoptr i64 %7690 to i32*
  %7692 = load i32, i32* %7691
  %7693 = inttoptr i64 %4855 to i32*
  %7694 = load i32, i32* %7693
  %7695 = sub i32 %7692, %7694
  %7696 = icmp eq i32 %7695, 0
  %7697 = lshr i32 %7695, 31
  %7698 = lshr i32 %7692, 31
  %7699 = lshr i32 %7694, 31
  %7700 = xor i32 %7699, %7698
  %7701 = xor i32 %7697, %7698
  %7702 = add nuw nsw i32 %7701, %7700
  %7703 = icmp eq i32 %7702, 2
  %7704 = icmp ne i32 %7697, 0
  %7705 = xor i1 %7704, %7703
  %7706 = or i1 %7696, %7705
  %7707 = select i1 %7706, i64 422, i64 33
  %7708 = add i64 %7511, %7707
  br i1 %7706, label %block_40db22, label %block_40d99d

block_409e48:                                     ; preds = %block_409dbb
  %7709 = mul nsw i64 %1242, 96
  %7710 = add i64 %7709, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %7711 = inttoptr i64 %7710 to i32*
  %7712 = load i32, i32* %7711
  %7713 = inttoptr i64 %123 to i32*
  store i32 %7712, i32* %7713
  %7714 = inttoptr i64 %123 to i32*
  %7715 = load i32, i32* %7714
  %7716 = sext i32 %7715 to i64
  %7717 = mul nsw i64 %7716, 24
  %7718 = add i64 %7717, ptrtoint (%cbc_type* @cbc to i64)
  %7719 = inttoptr i64 %7718 to i32*
  %7720 = load i32, i32* %7719
  %7721 = icmp ne i32 %7720, 3
  %7722 = select i1 %7721, i64 157, i64 57
  %7723 = add i64 %1249, %7722
  br i1 %7721, label %block_409e48.block_409ee5_crit_edge, label %block_409e81

block_409e48.block_409ee5_crit_edge:              ; preds = %block_409e48
  %7724 = inttoptr i64 %116 to i32*
  %7725 = load i32, i32* %7724
  br label %block_409ee5

block_40cb4a:                                     ; preds = %block_40cb11
  %7726 = mul nsw i64 %3946, 96
  %7727 = add i64 %7726, ptrtoint (%sje_type* @sje to i64)
  %7728 = inttoptr i64 %7727 to i32*
  %7729 = load i32, i32* %7728
  %7730 = inttoptr i64 %4855 to i32*
  %7731 = load i32, i32* %7730
  %7732 = sub i32 %7729, %7731
  %7733 = icmp eq i32 %7732, 0
  %7734 = lshr i32 %7732, 31
  %7735 = lshr i32 %7729, 31
  %7736 = lshr i32 %7731, 31
  %7737 = xor i32 %7736, %7735
  %7738 = xor i32 %7734, %7735
  %7739 = add nuw nsw i32 %7738, %7737
  %7740 = icmp eq i32 %7739, 2
  %7741 = icmp ne i32 %7734, 0
  %7742 = xor i1 %7741, %7740
  %7743 = or i1 %7733, %7742
  %7744 = select i1 %7743, i64 417, i64 32
  %7745 = add i64 %3953, %7744
  br i1 %7743, label %block_40cceb, label %block_40cb6a

block_40d826:                                     ; preds = %block_40d805, %block_40d7cb.block_40d826_crit_edge
  %7746 = phi i32 [ %228, %block_40d7cb.block_40d826_crit_edge ], [ %9473, %block_40d805 ]
  %7747 = phi i64 [ %226, %block_40d7cb.block_40d826_crit_edge ], [ %9487, %block_40d805 ]
  %7748 = sext i32 %7746 to i64
  %7749 = shl nsw i64 %7748, 2
  %7750 = add i64 %7749, ptrtoint (%newe_type* @newe to i64)
  %7751 = inttoptr i64 %7750 to i32*
  %7752 = load i32, i32* %7751
  %7753 = add i32 %7752, 1
  %7754 = inttoptr i64 %7750 to i32*
  store i32 %7753, i32* %7754
  %7755 = inttoptr i64 %4855 to i32*
  %7756 = load i32, i32* %7755
  %7757 = sext i32 %7756 to i64
  %7758 = mul nsw i64 %7757, 48
  %7759 = add i64 %7758, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 24)
  %7760 = inttoptr i64 %7759 to i32*
  store i32 1, i32* %7760
  %7761 = inttoptr i64 %4865 to i32*
  %7762 = load i32, i32* %7761
  %7763 = sext i32 %7762 to i64
  %7764 = mul nsw i64 %7763, 24
  %7765 = add i64 %7764, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %7766 = inttoptr i64 %7765 to i32*
  %7767 = load i32, i32* %7766
  %7768 = icmp ne i32 %7767, 3
  %7769 = select i1 %7768, i64 191, i64 84
  %7770 = add i64 %7747, %7769
  br i1 %7768, label %block_40d8e5, label %block_40d87a

block_4090e4:                                     ; preds = %block_40905a.block_4090e4_crit_edge, %block_409094
  %7771 = phi i32 [ %8849, %block_40905a.block_4090e4_crit_edge ], [ %8312, %block_409094 ]
  %7772 = phi i64 [ %8847, %block_40905a.block_4090e4_crit_edge ], [ %8324, %block_409094 ]
  %7773 = sext i32 %7771 to i64
  %7774 = shl nsw i64 %7773, 2
  %7775 = add i64 %7774, ptrtoint (%newc_type* @newc to i64)
  %7776 = inttoptr i64 %7775 to i32*
  store i32 2, i32* %7776
  %7777 = inttoptr i64 %116 to i32*
  %7778 = load i32, i32* %7777
  %7779 = sext i32 %7778 to i64
  %7780 = shl nsw i64 %7779, 5
  %7781 = add i64 %7780, ptrtoint (%vassign_type* @vassign to i64)
  %7782 = inttoptr i64 %7781 to i32*
  store i32 5, i32* %7782
  %7783 = inttoptr i64 %116 to i32*
  %7784 = load i32, i32* %7783
  %7785 = sext i32 %7784 to i64
  %7786 = shl nsw i64 %7785, 5
  store i64 %7786, i64* %5, align 8, !tbaa !1240
  %7787 = add i64 %7786, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %7788 = add i64 %7772, 63
  %7789 = inttoptr i64 %7787 to i32*
  store i32 7, i32* %7789
  br label %block_409123

block_40c8e3:                                     ; preds = %block_40c8a4, %block_40c8ae
  %7790 = phi i64 [ %8235, %block_40c8a4 ], [ %8151, %block_40c8ae ]
  %7791 = phi %struct.Memory* [ %8230, %block_40c8a4 ], [ %8230, %block_40c8ae ]
  %7792 = inttoptr i64 %4860 to i32*
  %7793 = load i32, i32* %7792
  %7794 = icmp eq i32 %7793, 0
  %7795 = select i1 %7794, i64 20, i64 10
  %7796 = add i64 %7790, %7795
  br i1 %7794, label %block_40c8f7, label %block_40c8ed

block_4098e2:                                     ; preds = %block_4098d8
  %7797 = icmp eq i32 %1487, 2
  %7798 = select i1 %7797, i64 20, i64 10
  %7799 = add i64 %7816, %7798
  br i1 %7797, label %block_4098f6, label %block_4098ec

block_40f0e1:                                     ; preds = %block_40f0a5, %block_40f18c
  %7800 = phi i64 [ %8227, %block_40f0a5 ], [ %6195, %block_40f18c ]
  %7801 = phi %struct.Memory* [ %3319, %block_40f0a5 ], [ %7549, %block_40f18c ]
  %7802 = inttoptr i64 %3934 to i32*
  %7803 = load i32, i32* %7802
  %7804 = add i32 %7803, -5
  %7805 = lshr i32 %7804, 31
  %7806 = lshr i32 %7803, 31
  %7807 = xor i32 %7805, %7806
  %7808 = add nuw nsw i32 %7807, %7806
  %7809 = icmp eq i32 %7808, 2
  %7810 = icmp ne i32 %7805, 0
  %7811 = xor i1 %7810, %7809
  %7812 = select i1 %7811, i64 10, i64 190
  %7813 = add i64 %7800, %7812
  br i1 %7811, label %block_40f0eb, label %block_40f19f

block_4098d8:                                     ; preds = %block_409584
  %7814 = icmp ne i32 %1492, 1
  %7815 = select i1 %7814, i64 1648, i64 10
  %7816 = add i64 %1490, %7815
  br i1 %7814, label %block_409f48, label %block_4098e2

block_4098d3.sink.split:                          ; preds = %block_4096d4, %block_4098c9, %block_4095c7, %block_409690
  %7817 = phi i64 [ %7920, %block_4098c9 ], [ %4429, %block_4095c7 ], [ %9466, %block_4096d4 ], [ %3527, %block_409690 ]
  %7818 = phi i64 [ 5, %block_4098c9 ], [ 253, %block_4095c7 ], [ 5, %block_4096d4 ], [ 5, %block_409690 ]
  %7819 = phi %struct.Memory* [ %7919, %block_4098c9 ], [ %3633, %block_4095c7 ], [ %3633, %block_4096d4 ], [ %3633, %block_409690 ]
  %7820 = phi i64 [ 5, %block_4098c9 ], [ 422, %block_4095c7 ], [ 422, %block_4096d4 ], [ 422, %block_409690 ]
  %7821 = add i64 %7817, %7818
  br label %block_40b955

block_408f18:                                     ; preds = %block_408edf
  %7822 = inttoptr i64 %126 to i32*
  %7823 = load i32, i32* %7822
  %7824 = icmp ne i32 %7823, 0
  %7825 = select i1 %7824, i64 78, i64 10
  %7826 = add i64 %3120, %7825
  br i1 %7824, label %block_408f70, label %block_408f22

block_40a8d0:                                     ; preds = %block_40a896
  %7827 = mul nsw i64 %8277, 96
  %7828 = add i64 %7827, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %7829 = inttoptr i64 %7828 to i32*
  %7830 = load i32, i32* %7829
  %7831 = inttoptr i64 %116 to i32*
  %7832 = load i32, i32* %7831
  %7833 = sub i32 %7830, %7832
  %7834 = lshr i32 %7833, 31
  %7835 = lshr i32 %7830, 31
  %7836 = lshr i32 %7832, 31
  %7837 = xor i32 %7836, %7835
  %7838 = xor i32 %7834, %7835
  %7839 = add nuw nsw i32 %7838, %7837
  %7840 = icmp eq i32 %7839, 2
  %7841 = icmp ne i32 %7834, 0
  %7842 = xor i1 %7841, %7840
  %7843 = select i1 %7842, i64 33, i64 101
  %7844 = add i64 %8284, %7843
  br i1 %7842, label %block_40a8f1, label %block_40a935

block_40e498:                                     ; preds = %block_40e3bb, %block_40e3f5
  %7845 = phi i64 [ %3300, %block_40e3bb ], [ %2982, %block_40e3f5 ]
  %7846 = phi %struct.Memory* [ %3704, %block_40e3bb ], [ %3704, %block_40e3f5 ]
  %7847 = add i64 %7845, 5
  br label %block_40e49d

block_40bacd:                                     ; preds = %block_40babd
  %7848 = sext i32 %8613 to i64
  %7849 = shl nsw i64 %7848, 2
  %7850 = add i64 %7849, ptrtoint (%newc_type* @newc to i64)
  %7851 = inttoptr i64 %7850 to i32*
  store i32 0, i32* %7851
  %7852 = inttoptr i64 %4855 to i32*
  %7853 = load i32, i32* %7852
  %7854 = sext i32 %7853 to i64
  %7855 = shl nsw i64 %7854, 2
  %7856 = add i64 %7855, ptrtoint (%newe_type* @newe to i64)
  %7857 = inttoptr i64 %7856 to i32*
  store i32 0, i32* %7857
  %7858 = inttoptr i64 %4855 to i32*
  %7859 = load i32, i32* %7858
  %7860 = sext i32 %7859 to i64
  %7861 = shl nsw i64 %7860, 2
  %7862 = add i64 %7861, ptrtoint (%newi_type* @newi to i64)
  %7863 = inttoptr i64 %7862 to i32*
  store i32 0, i32* %7863
  %7864 = inttoptr i64 %4855 to i32*
  %7865 = load i32, i32* %7864
  %7866 = sext i32 %7865 to i64
  %7867 = mul nsw i64 %7866, 24
  %7868 = add i64 %7867, ptrtoint (%cbc_type* @cbc to i64)
  %7869 = inttoptr i64 %7868 to i32*
  %7870 = load i32, i32* %7869
  %7871 = inttoptr i64 %4859 to i32*
  store i32 %7870, i32* %7871
  %7872 = inttoptr i64 %4855 to i32*
  %7873 = load i32, i32* %7872
  %7874 = sext i32 %7873 to i64
  %7875 = mul nsw i64 %7874, 24
  %7876 = add i64 %7875, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 4)
  %7877 = inttoptr i64 %7876 to i32*
  %7878 = load i32, i32* %7877
  %7879 = inttoptr i64 %4860 to i32*
  store i32 %7878, i32* %7879
  %7880 = inttoptr i64 %4855 to i32*
  %7881 = load i32, i32* %7880
  %7882 = sext i32 %7881 to i64
  %7883 = mul nsw i64 %7882, 24
  %7884 = add i64 %7883, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %7885 = inttoptr i64 %7884 to i32*
  %7886 = load i32, i32* %7885
  %7887 = inttoptr i64 %4861 to i32*
  store i32 %7886, i32* %7887
  %7888 = inttoptr i64 %4855 to i32*
  %7889 = load i32, i32* %7888
  %7890 = sext i32 %7889 to i64
  %7891 = mul nsw i64 %7890, 24
  %7892 = add i64 %7891, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 12)
  %7893 = inttoptr i64 %7892 to i32*
  %7894 = load i32, i32* %7893
  %7895 = inttoptr i64 %4862 to i32*
  store i32 %7894, i32* %7895
  %7896 = inttoptr i64 %4855 to i32*
  %7897 = load i32, i32* %7896
  %7898 = sext i32 %7897 to i64
  %7899 = mul nsw i64 %7898, 24
  %7900 = add i64 %7899, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %7901 = inttoptr i64 %7900 to i32*
  %7902 = load i32, i32* %7901
  %7903 = inttoptr i64 %4863 to i32*
  store i32 %7902, i32* %7903
  %7904 = inttoptr i64 %4855 to i32*
  %7905 = load i32, i32* %7904
  %7906 = sext i32 %7905 to i64
  %7907 = mul nsw i64 %7906, 24
  %7908 = add i64 %7907, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %7909 = inttoptr i64 %7908 to i32*
  %7910 = load i32, i32* %7909
  %7911 = inttoptr i64 %4864 to i32*
  store i32 %7910, i32* %7911
  %7912 = inttoptr i64 %4864 to i32*
  %7913 = load i32, i32* %7912
  %7914 = icmp ne i32 %7913, 0
  %7915 = select i1 %7914, i64 457, i64 181
  %7916 = add i64 %8627, %7915
  br i1 %7914, label %block_40bc96, label %block_40bb82

block_4098c9:                                     ; preds = %block_40982c, %block_409870, %block_409765
  %7917 = phi i64 [ %6999, %block_409765 ], [ %9277, %block_40982c ], [ %8608, %block_409870 ]
  %7918 = phi i64 [ 251, %block_409765 ], [ 5, %block_40982c ], [ 5, %block_409870 ]
  %7919 = phi %struct.Memory* [ %3633, %block_409765 ], [ %3633, %block_40982c ], [ %3633, %block_409870 ]
  %7920 = add i64 %7917, %7918
  br label %block_4098d3.sink.split

block_40ddd5:                                     ; preds = %block_40dd9c
  %7921 = mul nsw i64 %1354, 96
  %7922 = add i64 %7921, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %7923 = inttoptr i64 %7922 to i32*
  %7924 = load i32, i32* %7923
  %7925 = inttoptr i64 %4855 to i32*
  %7926 = load i32, i32* %7925
  %7927 = sext i32 %7926 to i64
  %7928 = mul nsw i64 %7927, 96
  %7929 = add i64 %7928, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %7929, i64* %6292, align 8, !tbaa !1240
  %7930 = add i64 %7928, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 16)
  %7931 = inttoptr i64 %7930 to i32*
  store i32 %7924, i32* %7931
  %7932 = inttoptr i64 %4855 to i32*
  %7933 = load i32, i32* %7932
  %7934 = sext i32 %7933 to i64
  %7935 = mul nsw i64 %7934, 48
  store i64 %7935, i64* %11, align 8, !tbaa !1240
  %7936 = add i64 %7935, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %7937 = inttoptr i64 %7936 to i32*
  %7938 = load i32, i32* %7937
  %7939 = zext i32 %7938 to i64
  store i64 %7939, i64* %4866, align 8, !tbaa !1240
  %7940 = mul nsw i64 %7934, 96
  %7941 = add i64 %7940, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 20)
  %7942 = inttoptr i64 %7941 to i32*
  store i32 %7938, i32* %7942
  %7943 = inttoptr i64 %4865 to i32*
  %7944 = load i32, i32* %7943
  %7945 = sext i32 %7944 to i64
  %7946 = mul nsw i64 %7945, 96
  %7947 = add i64 %7946, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %7948 = inttoptr i64 %7947 to i32*
  %7949 = load i32, i32* %7948
  %7950 = sext i32 %7949 to i64
  %7951 = mul nsw i64 %7950, 48
  %7952 = add i64 %7951, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 16)
  %7953 = inttoptr i64 %7952 to i32*
  store i32 1, i32* %7953
  %7954 = inttoptr i64 %4855 to i32*
  %7955 = load i32, i32* %7954
  %7956 = sext i32 %7955 to i64
  %7957 = mul nsw i64 %7956, 48
  %7958 = add i64 %7957, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 8)
  %7959 = add i64 %1361, 163
  %7960 = inttoptr i64 %7958 to i32*
  store i32 1, i32* %7960
  br label %block_40deeb

block_408d76:                                     ; preds = %block_408cee.block_408d76_crit_edge, %block_408d27
  %7961 = phi i32 [ %3282, %block_408cee.block_408d76_crit_edge ], [ %1663, %block_408d27 ]
  %7962 = phi i64 [ %3280, %block_408cee.block_408d76_crit_edge ], [ %1675, %block_408d27 ]
  %7963 = sext i32 %7961 to i64
  %7964 = shl nsw i64 %7963, 2
  %7965 = add i64 %7964, ptrtoint (%newc_type* @newc to i64)
  %7966 = inttoptr i64 %7965 to i32*
  store i32 2, i32* %7966
  %7967 = inttoptr i64 %116 to i32*
  %7968 = load i32, i32* %7967
  %7969 = sext i32 %7968 to i64
  %7970 = shl nsw i64 %7969, 5
  %7971 = add i64 %7970, ptrtoint (%vassign_type* @vassign to i64)
  %7972 = inttoptr i64 %7971 to i32*
  store i32 3, i32* %7972
  %7973 = inttoptr i64 %116 to i32*
  %7974 = load i32, i32* %7973
  %7975 = sext i32 %7974 to i64
  %7976 = shl nsw i64 %7975, 5
  store i64 %7976, i64* %5, align 8, !tbaa !1240
  %7977 = add i64 %7976, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %7978 = add i64 %7962, 63
  %7979 = inttoptr i64 %7977 to i32*
  store i32 7, i32* %7979
  br label %block_408ecb

block_40e5ec:                                     ; preds = %block_40e598
  %7980 = mul nsw i64 %8577, 96
  %7981 = add i64 %7980, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %7982 = inttoptr i64 %7981 to i32*
  %7983 = load i32, i32* %7982
  %7984 = inttoptr i64 %4855 to i32*
  %7985 = load i32, i32* %7984
  %7986 = sext i32 %7985 to i64
  %7987 = mul nsw i64 %7986, 96
  %7988 = add i64 %7987, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 72)
  %7989 = add i64 %8584, 48
  %7990 = inttoptr i64 %7988 to i32*
  store i32 %7983, i32* %7990
  br label %block_40e61c

block_40e0c2:                                     ; preds = %block_40e083
  %7991 = inttoptr i64 %4855 to i32*
  %7992 = load i32, i32* %7991
  %7993 = sext i32 %7992 to i64
  %7994 = mul nsw i64 %7993, 96
  %7995 = add i64 %7994, ptrtoint (%sje_type* @sje to i64)
  %7996 = inttoptr i64 %7995 to i32*
  %7997 = load i32, i32* %7996
  %7998 = inttoptr i64 %4865 to i32*
  store i32 %7997, i32* %7998
  %7999 = inttoptr i64 %4865 to i32*
  %8000 = load i32, i32* %7999
  %8001 = sext i32 %8000 to i64
  %8002 = mul nsw i64 %8001, 24
  %8003 = add i64 %8002, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %8004 = inttoptr i64 %8003 to i32*
  %8005 = load i32, i32* %8004
  %8006 = icmp ne i32 %8005, 2
  %8007 = select i1 %8006, i64 105, i64 57
  %8008 = add i64 %8458, %8007
  br i1 %8006, label %block_40e12b, label %block_40e0fb

block_40e740:                                     ; preds = %block_40e701, %block_40e70b
  %8009 = phi i64 [ %5045, %block_40e701 ], [ %626, %block_40e70b ]
  %8010 = phi %struct.Memory* [ %3704, %block_40e701 ], [ %3704, %block_40e70b ]
  %8011 = add i64 %8009, 5
  br label %block_40e74f.sink.split

block_40aea4:                                     ; preds = %block_40aded
  %8012 = icmp ne i32 %3636, 12
  %8013 = select i1 %8012, i64 1060, i64 10
  %8014 = add i64 %5843, %8013
  br i1 %8012, label %block_40b2c8, label %block_40aeae

block_40ceca:                                     ; preds = %block_40ce86
  %8015 = icmp ne i32 %1973, 1
  %8016 = select i1 %8015, i64 496, i64 10
  %8017 = add i64 %772, %8016
  br i1 %8015, label %block_40d0c4, label %block_40ced4

block_40c715:                                     ; preds = %block_40c6c1
  %8018 = mul nsw i64 %9203, 96
  %8019 = add i64 %8018, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8020 = inttoptr i64 %8019 to i32*
  %8021 = load i32, i32* %8020
  %8022 = inttoptr i64 %4855 to i32*
  %8023 = load i32, i32* %8022
  %8024 = sext i32 %8023 to i64
  %8025 = mul nsw i64 %8024, 96
  %8026 = add i64 %8025, ptrtoint (%diagn_type* @diagn to i64)
  store i64 %8026, i64* %6292, align 8, !tbaa !1240
  %8027 = add i64 %8025, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 32)
  %8028 = inttoptr i64 %8027 to i32*
  store i32 %8021, i32* %8028
  %8029 = inttoptr i64 %4855 to i32*
  %8030 = load i32, i32* %8029
  %8031 = sext i32 %8030 to i64
  %8032 = mul nsw i64 %8031, 48
  store i64 %8032, i64* %11, align 8, !tbaa !1240
  %8033 = add i64 %8032, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 40)
  %8034 = inttoptr i64 %8033 to i32*
  %8035 = load i32, i32* %8034
  %8036 = zext i32 %8035 to i64
  store i64 %8036, i64* %4866, align 8, !tbaa !1240
  %8037 = mul nsw i64 %8031, 96
  %8038 = add i64 %8037, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 36)
  %8039 = inttoptr i64 %8038 to i32*
  store i32 %8035, i32* %8039
  %8040 = inttoptr i64 %4865 to i32*
  %8041 = load i32, i32* %8040
  %8042 = sext i32 %8041 to i64
  %8043 = mul nsw i64 %8042, 96
  %8044 = add i64 %8043, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8045 = inttoptr i64 %8044 to i32*
  %8046 = load i32, i32* %8045
  %8047 = sext i32 %8046 to i64
  %8048 = mul nsw i64 %8047, 48
  %8049 = add i64 %8048, add (i64 ptrtoint (%ncon_edge_type* @ncon_edge to i64), i64 8)
  %8050 = inttoptr i64 %8049 to i32*
  store i32 1, i32* %8050
  %8051 = inttoptr i64 %4855 to i32*
  %8052 = load i32, i32* %8051
  %8053 = sext i32 %8052 to i64
  %8054 = mul nsw i64 %8053, 48
  %8055 = add i64 %8054, add (i64 ptrtoint (%if_1_edge_type* @if_1_edge to i64), i64 16)
  %8056 = add i64 %9210, 163
  %8057 = inttoptr i64 %8055 to i32*
  store i32 1, i32* %8057
  br label %block_40c7b8

block_40aa26:                                     ; preds = %block_40aa05
  %8058 = sext i32 %5356 to i64
  %8059 = shl nsw i64 %8058, 2
  %8060 = add i64 %8059, ptrtoint (%newc_type* @newc to i64)
  %8061 = inttoptr i64 %8060 to i32*
  store i32 3, i32* %8061
  %8062 = inttoptr i64 %116 to i32*
  %8063 = load i32, i32* %8062
  %8064 = sext i32 %8063 to i64
  %8065 = shl nsw i64 %8064, 5
  %8066 = add i64 %8065, ptrtoint (%vassign_type* @vassign to i64)
  %8067 = inttoptr i64 %8066 to i32*
  store i32 3, i32* %8067
  %8068 = inttoptr i64 %116 to i32*
  %8069 = load i32, i32* %8068
  %8070 = sext i32 %8069 to i64
  %8071 = shl nsw i64 %8070, 5
  %8072 = add i64 %8071, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8073 = inttoptr i64 %8072 to i32*
  store i32 5, i32* %8073
  %8074 = inttoptr i64 %116 to i32*
  %8075 = load i32, i32* %8074
  %8076 = sext i32 %8075 to i64
  %8077 = shl nsw i64 %8076, 5
  store i64 %8077, i64* %5, align 8, !tbaa !1240
  %8078 = add i64 %8077, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8079 = inttoptr i64 %8078 to i32*
  store i32 7, i32* %8079
  %8080 = add i64 %5368, 194
  br label %block_40ad0d

block_40d0b5:                                     ; preds = %block_40d0b0, %block_40cf0e
  %8081 = phi i64 [ %8136, %block_40d0b0 ], [ %611, %block_40cf0e ]
  %8082 = phi %struct.Memory* [ %8135, %block_40d0b0 ], [ %1968, %block_40cf0e ]
  %8083 = add i64 %8081, 5
  br label %block_40d0c4

block_40c0b4:                                     ; preds = %block_40c093
  %8084 = sext i32 %8815 to i64
  %8085 = mul nsw i64 %8084, 48
  %8086 = add i64 %8085, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 40)
  %8087 = inttoptr i64 %8086 to i32*
  %8088 = load i32, i32* %8087
  %8089 = sext i32 %8088 to i64
  %8090 = shl nsw i64 %8089, 2
  %8091 = add i64 %8810, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8092 = add i64 %8091, %8090
  %8093 = inttoptr i64 %8092 to i32*
  %8094 = load i32, i32* %8093
  %8095 = mul nsw i64 %8084, 96
  %8096 = add i64 %8095, ptrtoint (%diagn_type* @diagn to i64)
  %8097 = add i64 %8829, 73
  %8098 = inttoptr i64 %8096 to i32*
  store i32 %8094, i32* %8098
  br label %block_40c0fd

block_40d2ee:                                     ; preds = %block_40d264, %block_40d283, %block_40d2a4
  %8099 = phi i64 [ %6466, %block_40d264 ], [ %4648, %block_40d283 ], [ %4333, %block_40d2a4 ]
  %8100 = phi %struct.Memory* [ %6456, %block_40d264 ], [ %6456, %block_40d283 ], [ %6456, %block_40d2a4 ]
  %8101 = add i64 %8099, 5
  br label %block_40d2f3

block_40b2c8:                                     ; preds = %block_40aea4
  %8102 = icmp ne i32 %3636, 15
  %8103 = select i1 %8102, i64 1652, i64 10
  %8104 = add i64 %8014, %8103
  br i1 %8102, label %block_40b941, label %block_40b2d2

block_40b3c1:                                     ; preds = %block_40b3a0
  %8105 = sext i32 %3813 to i64
  %8106 = shl nsw i64 %8105, 2
  %8107 = add i64 %8106, ptrtoint (%newc_type* @newc to i64)
  %8108 = inttoptr i64 %8107 to i32*
  store i32 4, i32* %8108
  %8109 = inttoptr i64 %116 to i32*
  %8110 = load i32, i32* %8109
  %8111 = sext i32 %8110 to i64
  %8112 = shl nsw i64 %8111, 5
  %8113 = add i64 %8112, ptrtoint (%vassign_type* @vassign to i64)
  %8114 = inttoptr i64 %8113 to i32*
  store i32 3, i32* %8114
  %8115 = inttoptr i64 %116 to i32*
  %8116 = load i32, i32* %8115
  %8117 = sext i32 %8116 to i64
  %8118 = shl nsw i64 %8117, 5
  %8119 = add i64 %8118, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8120 = inttoptr i64 %8119 to i32*
  store i32 5, i32* %8120
  %8121 = inttoptr i64 %116 to i32*
  %8122 = load i32, i32* %8121
  %8123 = sext i32 %8122 to i64
  %8124 = shl nsw i64 %8123, 5
  %8125 = add i64 %8124, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8126 = inttoptr i64 %8125 to i32*
  store i32 6, i32* %8126
  %8127 = inttoptr i64 %116 to i32*
  %8128 = load i32, i32* %8127
  %8129 = sext i32 %8128 to i64
  %8130 = shl nsw i64 %8129, 5
  store i64 %8130, i64* %5, align 8, !tbaa !1240
  %8131 = add i64 %8130, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %8132 = inttoptr i64 %8131 to i32*
  store i32 7, i32* %8132
  %8133 = add i64 %3346, 236
  br label %block_40b937

block_40d0b0:                                     ; preds = %block_40d026, %block_40d066, %block_40d045
  %8134 = phi i64 [ %9319, %block_40d026 ], [ %9118, %block_40d045 ], [ %9231, %block_40d066 ]
  %8135 = phi %struct.Memory* [ %9309, %block_40d026 ], [ %9309, %block_40d045 ], [ %9309, %block_40d066 ]
  %8136 = add i64 %8134, 5
  br label %block_40d0b5

block_40c8ae:                                     ; preds = %block_40c8a4
  %8137 = inttoptr i64 %4855 to i32*
  %8138 = load i32, i32* %8137
  %8139 = sext i32 %8138 to i64
  %8140 = shl nsw i64 %8139, 2
  %8141 = add i64 %8140, ptrtoint (%newe_type* @newe to i64)
  %8142 = inttoptr i64 %8141 to i32*
  %8143 = load i32, i32* %8142
  %8144 = add i32 %8143, 1
  %8145 = inttoptr i64 %8141 to i32*
  store i32 %8144, i32* %8145
  %8146 = inttoptr i64 %4855 to i32*
  %8147 = load i32, i32* %8146
  %8148 = sext i32 %8147 to i64
  %8149 = mul nsw i64 %8148, 48
  %8150 = add i64 %8149, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 44)
  %8151 = add i64 %8235, 53
  %8152 = inttoptr i64 %8150 to i32*
  store i32 1, i32* %8152
  br label %block_40c8e3

block_40e2c7:                                     ; preds = %block_40e25e, %block_40e297
  %8153 = phi i64 [ %4787, %block_40e25e ], [ %4374, %block_40e297 ]
  %8154 = phi %struct.Memory* [ %6835, %block_40e25e ], [ %6835, %block_40e297 ]
  %8155 = add i64 %8153, 5
  br label %block_40e2cc

block_40e8a7:                                     ; preds = %block_40e868, %block_40e872
  %8156 = phi i64 [ %9125, %block_40e868 ], [ %9029, %block_40e872 ]
  %8157 = phi %struct.Memory* [ %9120, %block_40e868 ], [ %9120, %block_40e872 ]
  %8158 = inttoptr i64 %4863 to i32*
  %8159 = load i32, i32* %8158
  %8160 = icmp eq i32 %8159, 3
  %8161 = select i1 %8160, i64 63, i64 10
  %8162 = add i64 %8156, %8161
  br i1 %8160, label %block_40e8e6, label %block_40e8b1

block_40b9fe:                                     ; preds = %block_40b9ea
  %8163 = add i64 %3463, ptrtoint (%front_type* @front to i64)
  %8164 = inttoptr i64 %8163 to i32*
  %8165 = load i32, i32* %8164
  %8166 = add i32 %3458, %8165
  %8167 = add i64 %3454, -4
  %8168 = inttoptr i64 %8167 to i32*
  store i32 %8166, i32* %8168
  %8169 = inttoptr i64 %3459 to i32*
  %8170 = load i32, i32* %8169
  %8171 = sext i32 %8170 to i64
  %8172 = shl nsw i64 %8171, 5
  %8173 = add i64 %8172, ptrtoint (%vassign_type* @vassign to i64)
  %8174 = load i64, i64* %10, align 8
  %8175 = add i64 %8174, -20
  %8176 = inttoptr i64 %8175 to i32*
  %8177 = load i32, i32* %8176
  %8178 = sext i32 %8177 to i64
  %8179 = shl nsw i64 %8178, 2
  %8180 = add i64 %8179, %8173
  %8181 = inttoptr i64 %8180 to i32*
  %8182 = load i32, i32* %8181
  %8183 = zext i32 %8182 to i64
  store i64 %8183, i64* %8, align 8, !tbaa !1240
  %8184 = add i64 %8174, -8
  %8185 = inttoptr i64 %8184 to i32*
  %8186 = load i32, i32* %8185
  %8187 = zext i32 %8186 to i64
  store i64 %8187, i64* %7, align 8, !tbaa !1240
  %8188 = add i64 %8174, -4
  %8189 = inttoptr i64 %8188 to i32*
  %8190 = load i32, i32* %8189
  %8191 = zext i32 %8190 to i64
  store i64 %8191, i64* %6, align 8, !tbaa !1240
  %8192 = add i64 %3479, 14722
  %8193 = add i64 %3479, 56
  %8194 = load i64, i64* %9, align 8, !tbaa !1240
  %8195 = add i64 %8194, -8
  %8196 = inttoptr i64 %8195 to i64*
  store i64 %8193, i64* %8196
  store i64 %8195, i64* %9, align 8, !tbaa !1240
  %8197 = tail call %struct.Memory* @sub_40f380_mortar_vertex(%struct.State* nonnull %0, i64 %8192, %struct.Memory* %3455)
  %8198 = load i64, i64* %10, align 8
  %8199 = add i64 %8198, -20
  %8200 = load i64, i64* %3, align 8
  %8201 = inttoptr i64 %8199 to i32*
  %8202 = load i32, i32* %8201
  %8203 = add i32 %8202, 1
  %8204 = inttoptr i64 %8199 to i32*
  store i32 %8203, i32* %8204
  %8205 = add i64 %8200, -76
  br label %block_40b9ea

block_40f0a5:                                     ; preds = %block_40f09b
  %8206 = inttoptr i64 %3932 to i32*
  %8207 = load i32, i32* %8206
  %8208 = sext i32 %8207 to i64
  %8209 = mul nsw i64 %8208, 96
  %8210 = add i64 %8209, ptrtoint (%sje_type* @sje to i64)
  %8211 = inttoptr i64 %9081 to i32*
  %8212 = load i32, i32* %8211
  %8213 = sext i32 %8212 to i64
  %8214 = shl nsw i64 %8213, 4
  %8215 = add i64 %8214, %8210
  %8216 = sext i32 %3321 to i64
  %8217 = shl nsw i64 %8216, 3
  %8218 = add i64 %8217, %8215
  %8219 = inttoptr i64 %3928 to i32*
  %8220 = load i32, i32* %8219
  %8221 = sext i32 %8220 to i64
  %8222 = shl nsw i64 %8221, 2
  %8223 = add i64 %8222, %8218
  %8224 = inttoptr i64 %8223 to i32*
  %8225 = load i32, i32* %8224
  %8226 = inttoptr i64 %3933 to i32*
  store i32 %8225, i32* %8226
  %8227 = add i64 %3331, 60
  %8228 = inttoptr i64 %3934 to i32*
  store i32 0, i32* %8228
  br label %block_40f0e1

block_40c8a4:                                     ; preds = %block_40c865, %block_40c86f
  %8229 = phi i64 [ %9260, %block_40c865 ], [ %5982, %block_40c86f ]
  %8230 = phi %struct.Memory* [ %8803, %block_40c865 ], [ %8803, %block_40c86f ]
  %8231 = inttoptr i64 %4863 to i32*
  %8232 = load i32, i32* %8231
  %8233 = icmp eq i32 %8232, 3
  %8234 = select i1 %8233, i64 63, i64 10
  %8235 = add i64 %8229, %8234
  br i1 %8233, label %block_40c8e3, label %block_40c8ae

block_40bee3:                                     ; preds = %block_40bed9
  %8236 = inttoptr i64 %4855 to i32*
  %8237 = load i32, i32* %8236
  %8238 = sext i32 %8237 to i64
  %8239 = shl nsw i64 %8238, 2
  %8240 = add i64 %8239, ptrtoint (%newe_type* @newe to i64)
  %8241 = inttoptr i64 %8240 to i32*
  %8242 = load i32, i32* %8241
  %8243 = add i32 %8242, 1
  %8244 = inttoptr i64 %8240 to i32*
  store i32 %8243, i32* %8244
  %8245 = inttoptr i64 %4855 to i32*
  %8246 = load i32, i32* %8245
  %8247 = sext i32 %8246 to i64
  %8248 = mul nsw i64 %8247, 48
  %8249 = add i64 %8248, ptrtoint (%eassign_type* @eassign to i64)
  %8250 = add i64 %666, 52
  %8251 = inttoptr i64 %8249 to i32*
  store i32 1, i32* %8251
  br label %block_40c273

block_40d89b:                                     ; preds = %block_40d87a
  %8252 = sext i32 %8485 to i64
  %8253 = mul nsw i64 %8252, 48
  %8254 = add i64 %8253, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 12)
  %8255 = inttoptr i64 %8254 to i32*
  %8256 = load i32, i32* %8255
  %8257 = sext i32 %8256 to i64
  %8258 = shl nsw i64 %8257, 2
  %8259 = add i64 %8480, add (i64 ptrtoint (%sje_type* @sje to i64), i64 72)
  %8260 = add i64 %8259, %8258
  %8261 = inttoptr i64 %8260 to i32*
  %8262 = load i32, i32* %8261
  %8263 = mul nsw i64 %8252, 96
  %8264 = add i64 %8263, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 48)
  %8265 = add i64 %8499, 74
  %8266 = inttoptr i64 %8264 to i32*
  store i32 %8262, i32* %8266
  br label %block_40d8e5

block_40a896:                                     ; preds = %block_40a76d.block_40a896_crit_edge, %block_40a7a7
  %8267 = phi i32 [ %4664, %block_40a76d.block_40a896_crit_edge ], [ %2083, %block_40a7a7 ]
  %8268 = phi i64 [ %4662, %block_40a76d.block_40a896_crit_edge ], [ %2095, %block_40a7a7 ]
  %8269 = sext i32 %8267 to i64
  %8270 = mul nsw i64 %8269, 96
  %8271 = add i64 %8270, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8272 = inttoptr i64 %8271 to i32*
  %8273 = load i32, i32* %8272
  %8274 = inttoptr i64 %124 to i32*
  store i32 %8273, i32* %8274
  %8275 = inttoptr i64 %124 to i32*
  %8276 = load i32, i32* %8275
  %8277 = sext i32 %8276 to i64
  %8278 = mul nsw i64 %8277, 24
  %8279 = add i64 %8278, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %8280 = inttoptr i64 %8279 to i32*
  %8281 = load i32, i32* %8280
  %8282 = icmp ne i32 %8281, 3
  %8283 = select i1 %8282, i64 159, i64 58
  %8284 = add i64 %8268, %8283
  br i1 %8282, label %block_40a896.block_40a935_crit_edge, label %block_40a8d0

block_40a896.block_40a935_crit_edge:              ; preds = %block_40a896
  %8285 = inttoptr i64 %116 to i32*
  %8286 = load i32, i32* %8285
  br label %block_40a935

block_40e96e:                                     ; preds = %block_40e916, %block_40effc
  %8287 = phi i64 [ %7201, %block_40e916 ], [ %7040, %block_40effc ]
  %8288 = phi i64 [ %7199, %block_40e916 ], [ %5788, %block_40effc ]
  %8289 = phi %struct.Memory* [ %7187, %block_40e916 ], [ %5789, %block_40effc ]
  %8290 = add i64 %8288, -8
  %8291 = inttoptr i64 %8290 to i32*
  %8292 = load i32, i32* %8291
  %8293 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %8294 = sub i32 %8292, %8293
  %8295 = lshr i32 %8294, 31
  %8296 = trunc i32 %8295 to i8
  %8297 = lshr i32 %8292, 31
  %8298 = lshr i32 %8293, 31
  %8299 = xor i32 %8298, %8297
  %8300 = xor i32 %8295, %8297
  %8301 = add nuw nsw i32 %8300, %8299
  %8302 = icmp eq i32 %8301, 2
  %8303 = icmp ne i8 %8296, 0
  %8304 = xor i1 %8303, %8302
  %8305 = select i1 %8304, i64 16, i64 1697
  %8306 = add i64 %8287, %8305
  br i1 %8304, label %block_40e97e, label %block_40f00f

block_409094:                                     ; preds = %block_40905a
  %8307 = mul nsw i64 %8840, 96
  %8308 = add i64 %8307, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %8309 = inttoptr i64 %8308 to i32*
  %8310 = load i32, i32* %8309
  %8311 = inttoptr i64 %116 to i32*
  %8312 = load i32, i32* %8311
  %8313 = sub i32 %8310, %8312
  %8314 = lshr i32 %8313, 31
  %8315 = lshr i32 %8310, 31
  %8316 = lshr i32 %8312, 31
  %8317 = xor i32 %8316, %8315
  %8318 = xor i32 %8314, %8315
  %8319 = add nuw nsw i32 %8318, %8317
  %8320 = icmp eq i32 %8319, 2
  %8321 = icmp ne i32 %8314, 0
  %8322 = xor i1 %8321, %8320
  %8323 = select i1 %8322, i64 33, i64 80
  %8324 = add i64 %8847, %8323
  br i1 %8322, label %block_4090b5, label %block_4090e4

block_4093b6:                                     ; preds = %block_4092d4, %block_4092d4.thread, %block_4092de
  %8325 = phi i64 [ %9404, %block_4092d4 ], [ %4120, %block_4092de ], [ %5375, %block_4092d4.thread ]
  %8326 = inttoptr i64 %116 to i32*
  %8327 = load i32, i32* %8326
  %8328 = sext i32 %8327 to i64
  %8329 = shl nsw i64 %8328, 2
  %8330 = add i64 %8329, ptrtoint (%newc_type* @newc to i64)
  %8331 = inttoptr i64 %8330 to i32*
  store i32 1, i32* %8331
  %8332 = inttoptr i64 %116 to i32*
  %8333 = load i32, i32* %8332
  %8334 = sext i32 %8333 to i64
  %8335 = shl nsw i64 %8334, 5
  store i64 %8335, i64* %5, align 8, !tbaa !1240
  %8336 = add i64 %8335, ptrtoint (%vassign_type* @vassign to i64)
  %8337 = add i64 %8325, 42
  %8338 = inttoptr i64 %8336 to i32*
  store i32 7, i32* %8338
  br label %block_4093e5

block_40a092:                                     ; preds = %block_40a02d, %block_409ff3.block_40a092_crit_edge
  %8339 = phi i32 [ %6144, %block_409ff3.block_40a092_crit_edge ], [ %9238, %block_40a02d ]
  %8340 = phi i64 [ %6142, %block_409ff3.block_40a092_crit_edge ], [ %9250, %block_40a02d ]
  %8341 = sext i32 %8339 to i64
  %8342 = shl nsw i64 %8341, 2
  %8343 = add i64 %8342, ptrtoint (%newc_type* @newc to i64)
  %8344 = inttoptr i64 %8343 to i32*
  store i32 3, i32* %8344
  %8345 = inttoptr i64 %116 to i32*
  %8346 = load i32, i32* %8345
  %8347 = sext i32 %8346 to i64
  %8348 = shl nsw i64 %8347, 5
  %8349 = add i64 %8348, ptrtoint (%vassign_type* @vassign to i64)
  %8350 = inttoptr i64 %8349 to i32*
  store i32 5, i32* %8350
  %8351 = inttoptr i64 %116 to i32*
  %8352 = load i32, i32* %8351
  %8353 = sext i32 %8352 to i64
  %8354 = shl nsw i64 %8353, 5
  %8355 = add i64 %8354, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8356 = inttoptr i64 %8355 to i32*
  store i32 6, i32* %8356
  %8357 = inttoptr i64 %116 to i32*
  %8358 = load i32, i32* %8357
  %8359 = sext i32 %8358 to i64
  %8360 = shl nsw i64 %8359, 5
  store i64 %8360, i64* %5, align 8, !tbaa !1240
  %8361 = add i64 %8360, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8362 = add i64 %8340, 84
  %8363 = inttoptr i64 %8361 to i32*
  store i32 7, i32* %8363
  br label %block_40a27a

block_40f08a:                                     ; preds = %block_40f32f, %block_40f083
  %8364 = phi i64 [ %3929, %block_40f083 ], [ %8854, %block_40f32f ]
  %8365 = phi %struct.Memory* [ %9079, %block_40f083 ], [ %3319, %block_40f32f ]
  %8366 = inttoptr i64 %3928 to i32*
  %8367 = load i32, i32* %8366
  %8368 = add i32 %8367, -2
  %8369 = lshr i32 %8368, 31
  %8370 = trunc i32 %8369 to i8
  %8371 = lshr i32 %8367, 31
  %8372 = xor i32 %8369, %8371
  %8373 = add nuw nsw i32 %8372, %8371
  %8374 = icmp eq i32 %8373, 2
  %8375 = icmp ne i8 %8370, 0
  %8376 = xor i1 %8375, %8374
  %8377 = select i1 %8376, i64 10, i64 696
  %8378 = add i64 %8364, %8377
  br i1 %8376, label %block_40f094, label %block_40f342

block_40b885:                                     ; preds = %block_40b7cc, %block_40b7ad.block_40b885_crit_edge
  %8379 = phi i32 [ %296, %block_40b7ad.block_40b885_crit_edge ], [ %2352, %block_40b7cc ]
  %8380 = phi i64 [ %294, %block_40b7ad.block_40b885_crit_edge ], [ %2364, %block_40b7cc ]
  %8381 = sext i32 %8379 to i64
  %8382 = shl nsw i64 %8381, 2
  %8383 = add i64 %8382, ptrtoint (%newc_type* @newc to i64)
  %8384 = inttoptr i64 %8383 to i32*
  store i32 7, i32* %8384
  %8385 = inttoptr i64 %116 to i32*
  %8386 = load i32, i32* %8385
  %8387 = sext i32 %8386 to i64
  %8388 = shl nsw i64 %8387, 5
  %8389 = add i64 %8388, ptrtoint (%vassign_type* @vassign to i64)
  %8390 = inttoptr i64 %8389 to i32*
  store i32 1, i32* %8390
  %8391 = inttoptr i64 %116 to i32*
  %8392 = load i32, i32* %8391
  %8393 = sext i32 %8392 to i64
  %8394 = shl nsw i64 %8393, 5
  %8395 = add i64 %8394, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8396 = inttoptr i64 %8395 to i32*
  store i32 2, i32* %8396
  %8397 = inttoptr i64 %116 to i32*
  %8398 = load i32, i32* %8397
  %8399 = sext i32 %8398 to i64
  %8400 = shl nsw i64 %8399, 5
  %8401 = add i64 %8400, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8402 = inttoptr i64 %8401 to i32*
  store i32 3, i32* %8402
  %8403 = inttoptr i64 %116 to i32*
  %8404 = load i32, i32* %8403
  %8405 = sext i32 %8404 to i64
  %8406 = shl nsw i64 %8405, 5
  %8407 = add i64 %8406, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %8408 = inttoptr i64 %8407 to i32*
  store i32 4, i32* %8408
  %8409 = inttoptr i64 %116 to i32*
  %8410 = load i32, i32* %8409
  %8411 = sext i32 %8410 to i64
  %8412 = shl nsw i64 %8411, 5
  %8413 = add i64 %8412, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %8414 = inttoptr i64 %8413 to i32*
  store i32 5, i32* %8414
  %8415 = inttoptr i64 %116 to i32*
  %8416 = load i32, i32* %8415
  %8417 = sext i32 %8416 to i64
  %8418 = shl nsw i64 %8417, 5
  %8419 = add i64 %8418, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %8420 = inttoptr i64 %8419 to i32*
  store i32 6, i32* %8420
  %8421 = inttoptr i64 %116 to i32*
  %8422 = load i32, i32* %8421
  %8423 = sext i32 %8422 to i64
  %8424 = shl nsw i64 %8423, 5
  store i64 %8424, i64* %5, align 8, !tbaa !1240
  %8425 = add i64 %8424, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 24)
  %8426 = add i64 %8380, 168
  %8427 = inttoptr i64 %8425 to i32*
  store i32 7, i32* %8427
  br label %block_40b937

block_40b381:                                     ; preds = %block_40b360
  %8428 = inttoptr i64 %124 to i32*
  %8429 = load i32, i32* %8428
  %8430 = sext i32 %8429 to i64
  %8431 = mul nsw i64 %8430, 24
  %8432 = add i64 %8431, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %8433 = inttoptr i64 %8432 to i32*
  %8434 = load i32, i32* %8433
  %8435 = icmp ne i32 %8434, 3
  %8436 = select i1 %8435, i64 174, i64 31
  %8437 = add i64 %3564, %8436
  br i1 %8435, label %block_40b42f, label %block_40b3a0

block_40e083:                                     ; preds = %block_40e079, %block_40e06f
  %8438 = phi i64 [ %9217, %block_40e079 ], [ %2843, %block_40e06f ]
  %8439 = inttoptr i64 %4855 to i32*
  %8440 = load i32, i32* %8439
  %8441 = sext i32 %8440 to i64
  %8442 = shl nsw i64 %8441, 2
  %8443 = add i64 %8442, ptrtoint (%newe_type* @newe to i64)
  %8444 = inttoptr i64 %8443 to i32*
  %8445 = load i32, i32* %8444
  %8446 = add i32 %8445, 1
  %8447 = inttoptr i64 %8443 to i32*
  store i32 %8446, i32* %8447
  %8448 = inttoptr i64 %4855 to i32*
  %8449 = load i32, i32* %8448
  %8450 = sext i32 %8449 to i64
  %8451 = mul nsw i64 %8450, 48
  %8452 = add i64 %8451, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 4)
  %8453 = inttoptr i64 %8452 to i32*
  store i32 1, i32* %8453
  %8454 = inttoptr i64 %4861 to i32*
  %8455 = load i32, i32* %8454
  %8456 = icmp ne i32 %8455, 1
  %8457 = select i1 %8456, i64 173, i64 63
  %8458 = add i64 %8438, %8457
  br i1 %8456, label %block_40e130, label %block_40e0c2

block_40e21f:                                     ; preds = %block_40e20b, %block_40e215
  %8459 = phi i64 [ %5312, %block_40e20b ], [ %5211, %block_40e215 ]
  %8460 = inttoptr i64 %4855 to i32*
  %8461 = load i32, i32* %8460
  %8462 = sext i32 %8461 to i64
  %8463 = shl nsw i64 %8462, 2
  %8464 = add i64 %8463, ptrtoint (%newe_type* @newe to i64)
  %8465 = inttoptr i64 %8464 to i32*
  %8466 = load i32, i32* %8465
  %8467 = add i32 %8466, 1
  %8468 = inttoptr i64 %8464 to i32*
  store i32 %8467, i32* %8468
  %8469 = inttoptr i64 %4855 to i32*
  %8470 = load i32, i32* %8469
  %8471 = sext i32 %8470 to i64
  %8472 = mul nsw i64 %8471, 48
  %8473 = add i64 %8472, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 8)
  %8474 = inttoptr i64 %8473 to i32*
  store i32 1, i32* %8474
  %8475 = inttoptr i64 %4863 to i32*
  %8476 = load i32, i32* %8475
  %8477 = icmp ne i32 %8476, 1
  %8478 = select i1 %8477, i64 173, i64 63
  %8479 = add i64 %8459, %8478
  br i1 %8477, label %block_40e2cc, label %block_40e25e

block_40d87a:                                     ; preds = %block_40d826
  %8480 = mul nsw i64 %7763, 96
  %8481 = add i64 %8480, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %8482 = inttoptr i64 %8481 to i32*
  %8483 = load i32, i32* %8482
  %8484 = inttoptr i64 %4855 to i32*
  %8485 = load i32, i32* %8484
  %8486 = sub i32 %8483, %8485
  %8487 = icmp eq i32 %8486, 0
  %8488 = lshr i32 %8486, 31
  %8489 = lshr i32 %8483, 31
  %8490 = lshr i32 %8485, 31
  %8491 = xor i32 %8490, %8489
  %8492 = xor i32 %8488, %8489
  %8493 = add nuw nsw i32 %8492, %8491
  %8494 = icmp eq i32 %8493, 2
  %8495 = icmp ne i32 %8488, 0
  %8496 = xor i1 %8495, %8494
  %8497 = or i1 %8487, %8496
  %8498 = select i1 %8497, i64 107, i64 33
  %8499 = add i64 %7770, %8498
  br i1 %8497, label %block_40d8e5, label %block_40d89b

block_40c7d7:                                     ; preds = %block_40c7b8
  %8500 = mul nsw i64 %233, 96
  %8501 = add i64 %8500, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8502 = inttoptr i64 %8501 to i32*
  %8503 = load i32, i32* %8502
  %8504 = inttoptr i64 %4855 to i32*
  %8505 = load i32, i32* %8504
  %8506 = sub i32 %8503, %8505
  %8507 = icmp eq i32 %8506, 0
  %8508 = lshr i32 %8506, 31
  %8509 = lshr i32 %8503, 31
  %8510 = lshr i32 %8505, 31
  %8511 = xor i32 %8510, %8509
  %8512 = xor i32 %8508, %8509
  %8513 = add nuw nsw i32 %8512, %8511
  %8514 = icmp eq i32 %8513, 2
  %8515 = icmp ne i32 %8508, 0
  %8516 = xor i1 %8515, %8514
  %8517 = or i1 %8507, %8516
  %8518 = select i1 %8517, i64 107, i64 33
  %8519 = add i64 %240, %8518
  br i1 %8517, label %block_40c842, label %block_40c7f8

block_40c169:                                     ; preds = %block_40c130
  %8520 = inttoptr i64 %4855 to i32*
  %8521 = load i32, i32* %8520
  %8522 = sext i32 %8521 to i64
  %8523 = shl nsw i64 %8522, 2
  %8524 = add i64 %8523, ptrtoint (%newe_type* @newe to i64)
  %8525 = inttoptr i64 %8524 to i32*
  %8526 = load i32, i32* %8525
  %8527 = add i32 %8526, 1
  %8528 = inttoptr i64 %8524 to i32*
  store i32 %8527, i32* %8528
  %8529 = inttoptr i64 %4855 to i32*
  %8530 = load i32, i32* %8529
  %8531 = sext i32 %8530 to i64
  %8532 = mul nsw i64 %8531, 48
  %8533 = add i64 %8532, ptrtoint (%eassign_type* @eassign to i64)
  %8534 = add i64 %7037, 52
  %8535 = inttoptr i64 %8533 to i32*
  store i32 1, i32* %8535
  br label %block_40c22b

block_40b2be:                                     ; preds = %block_40b062, %block_40b2b4, %block_40b10f
  %8536 = phi i64 [ %8733, %block_40b062 ], [ %4269, %block_40b2b4 ], [ %849, %block_40b10f ]
  %8537 = phi i64 [ 436, %block_40b062 ], [ 5, %block_40b2b4 ], [ 5, %block_40b10f ]
  %8538 = phi %struct.Memory* [ %3633, %block_40b062 ], [ %4268, %block_40b2b4 ], [ %3633, %block_40b10f ]
  %8539 = add i64 %8536, %8537
  br label %block_40b941.sink.split

block_40bc13:                                     ; preds = %block_40bc09
  %8540 = inttoptr i64 %4855 to i32*
  %8541 = load i32, i32* %8540
  %8542 = sext i32 %8541 to i64
  %8543 = shl nsw i64 %8542, 2
  %8544 = add i64 %8543, ptrtoint (%newe_type* @newe to i64)
  %8545 = inttoptr i64 %8544 to i32*
  %8546 = load i32, i32* %8545
  %8547 = add i32 %8546, 1
  %8548 = inttoptr i64 %8544 to i32*
  store i32 %8547, i32* %8548
  %8549 = inttoptr i64 %4855 to i32*
  %8550 = load i32, i32* %8549
  %8551 = sext i32 %8550 to i64
  %8552 = mul nsw i64 %8551, 48
  %8553 = add i64 %8552, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 32)
  %8554 = add i64 %2850, 53
  %8555 = inttoptr i64 %8553 to i32*
  store i32 1, i32* %8555
  br label %block_40bc48

block_408ecb:                                     ; preds = %block_408d76, %block_408d47, %block_408e97, %block_408e9c
  %8556 = phi i64 [ %729, %block_408e97 ], [ %725, %block_408e9c ], [ %7978, %block_408d76 ], [ %5000, %block_408d47 ]
  %8557 = phi i64 [ 5, %block_408e97 ], [ 5, %block_408e9c ], [ 278, %block_408d76 ], [ 278, %block_408d47 ]
  %8558 = phi %struct.Memory* [ %728, %block_408e97 ], [ %3633, %block_408e9c ], [ %3633, %block_408d76 ], [ %3633, %block_408d47 ]
  %8559 = add i64 %8556, %8557
  br label %block_40b95f

block_40e598:                                     ; preds = %block_40e55e
  %8560 = inttoptr i64 %4855 to i32*
  %8561 = load i32, i32* %8560
  %8562 = sext i32 %8561 to i64
  %8563 = shl nsw i64 %8562, 2
  %8564 = add i64 %8563, ptrtoint (%newe_type* @newe to i64)
  %8565 = inttoptr i64 %8564 to i32*
  %8566 = load i32, i32* %8565
  %8567 = add i32 %8566, 1
  %8568 = inttoptr i64 %8564 to i32*
  store i32 %8567, i32* %8568
  %8569 = inttoptr i64 %4855 to i32*
  %8570 = load i32, i32* %8569
  %8571 = sext i32 %8570 to i64
  %8572 = mul nsw i64 %8571, 48
  %8573 = add i64 %8572, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 36)
  %8574 = inttoptr i64 %8573 to i32*
  store i32 1, i32* %8574
  %8575 = inttoptr i64 %4865 to i32*
  %8576 = load i32, i32* %8575
  %8577 = sext i32 %8576 to i64
  %8578 = mul nsw i64 %8577, 24
  %8579 = add i64 %8578, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %8580 = inttoptr i64 %8579 to i32*
  %8581 = load i32, i32* %8580
  %8582 = icmp ne i32 %8581, 2
  %8583 = select i1 %8582, i64 132, i64 84
  %8584 = add i64 %5967, %8583
  br i1 %8582, label %block_40e61c, label %block_40e5ec

block_409870:                                     ; preds = %block_40980c, %block_4097d3.block_409870_crit_edge
  %8585 = phi i32 [ %2323, %block_4097d3.block_409870_crit_edge ], [ %9430, %block_40980c ]
  %8586 = phi i64 [ %2321, %block_4097d3.block_409870_crit_edge ], [ %9442, %block_40980c ]
  %8587 = sext i32 %8585 to i64
  %8588 = shl nsw i64 %8587, 2
  %8589 = add i64 %8588, ptrtoint (%newc_type* @newc to i64)
  %8590 = inttoptr i64 %8589 to i32*
  store i32 3, i32* %8590
  %8591 = inttoptr i64 %116 to i32*
  %8592 = load i32, i32* %8591
  %8593 = sext i32 %8592 to i64
  %8594 = shl nsw i64 %8593, 5
  %8595 = add i64 %8594, ptrtoint (%vassign_type* @vassign to i64)
  %8596 = inttoptr i64 %8595 to i32*
  store i32 3, i32* %8596
  %8597 = inttoptr i64 %116 to i32*
  %8598 = load i32, i32* %8597
  %8599 = sext i32 %8598 to i64
  %8600 = shl nsw i64 %8599, 5
  %8601 = add i64 %8600, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8602 = inttoptr i64 %8601 to i32*
  store i32 5, i32* %8602
  %8603 = inttoptr i64 %116 to i32*
  %8604 = load i32, i32* %8603
  %8605 = sext i32 %8604 to i64
  %8606 = shl nsw i64 %8605, 5
  store i64 %8606, i64* %5, align 8, !tbaa !1240
  %8607 = add i64 %8606, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8608 = add i64 %8586, 84
  %8609 = inttoptr i64 %8607 to i32*
  store i32 7, i32* %8609
  br label %block_4098c9

block_40babd:                                     ; preds = %block_40ba57, %block_40e8e6
  %8610 = phi i64 [ %4857, %block_40ba57 ], [ %1573, %block_40e8e6 ]
  %8611 = phi %struct.Memory* [ %4853, %block_40ba57 ], [ %1553, %block_40e8e6 ]
  %8612 = inttoptr i64 %4855 to i32*
  %8613 = load i32, i32* %8612
  %8614 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %8615 = sub i32 %8613, %8614
  %8616 = lshr i32 %8615, 31
  %8617 = trunc i32 %8616 to i8
  %8618 = lshr i32 %8613, 31
  %8619 = lshr i32 %8614, 31
  %8620 = xor i32 %8619, %8618
  %8621 = xor i32 %8616, %8618
  %8622 = add nuw nsw i32 %8621, %8620
  %8623 = icmp eq i32 %8622, 2
  %8624 = icmp ne i8 %8617, 0
  %8625 = xor i1 %8624, %8623
  %8626 = select i1 %8625, i64 16, i64 11865
  %8627 = add i64 %8610, %8626
  br i1 %8625, label %block_40bacd, label %block_40e916

block_40e065:                                     ; preds = %block_40e035, %block_40dfe1
  %8628 = phi i64 [ %418, %block_40dfe1 ], [ %9168, %block_40e035 ]
  %8629 = phi %struct.Memory* [ %3689, %block_40dfe1 ], [ %3689, %block_40e035 ]
  %8630 = add i64 %8628, 5
  br label %block_40e13a

block_40ad2b:                                     ; preds = %block_40ad21
  %8631 = inttoptr i64 %116 to i32*
  %8632 = load i32, i32* %8631
  %8633 = sext i32 %8632 to i64
  %8634 = shl nsw i64 %8633, 2
  %8635 = add i64 %8634, ptrtoint (%newc_type* @newc to i64)
  %8636 = inttoptr i64 %8635 to i32*
  store i32 8, i32* %8636
  %8637 = inttoptr i64 %116 to i32*
  %8638 = load i32, i32* %8637
  %8639 = sext i32 %8638 to i64
  %8640 = shl nsw i64 %8639, 5
  %8641 = add i64 %8640, ptrtoint (%vassign_type* @vassign to i64)
  %8642 = inttoptr i64 %8641 to i32*
  store i32 0, i32* %8642
  %8643 = inttoptr i64 %116 to i32*
  %8644 = load i32, i32* %8643
  %8645 = sext i32 %8644 to i64
  %8646 = shl nsw i64 %8645, 5
  %8647 = add i64 %8646, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8648 = inttoptr i64 %8647 to i32*
  store i32 1, i32* %8648
  %8649 = inttoptr i64 %116 to i32*
  %8650 = load i32, i32* %8649
  %8651 = sext i32 %8650 to i64
  %8652 = shl nsw i64 %8651, 5
  %8653 = add i64 %8652, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8654 = inttoptr i64 %8653 to i32*
  store i32 2, i32* %8654
  %8655 = inttoptr i64 %116 to i32*
  %8656 = load i32, i32* %8655
  %8657 = sext i32 %8656 to i64
  %8658 = shl nsw i64 %8657, 5
  %8659 = add i64 %8658, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %8660 = inttoptr i64 %8659 to i32*
  store i32 3, i32* %8660
  %8661 = inttoptr i64 %116 to i32*
  %8662 = load i32, i32* %8661
  %8663 = sext i32 %8662 to i64
  %8664 = shl nsw i64 %8663, 5
  %8665 = add i64 %8664, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %8666 = inttoptr i64 %8665 to i32*
  store i32 4, i32* %8666
  %8667 = inttoptr i64 %116 to i32*
  %8668 = load i32, i32* %8667
  %8669 = sext i32 %8668 to i64
  %8670 = shl nsw i64 %8669, 5
  %8671 = add i64 %8670, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %8672 = inttoptr i64 %8671 to i32*
  store i32 5, i32* %8672
  %8673 = inttoptr i64 %116 to i32*
  %8674 = load i32, i32* %8673
  %8675 = sext i32 %8674 to i64
  %8676 = shl nsw i64 %8675, 5
  %8677 = add i64 %8676, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 24)
  %8678 = inttoptr i64 %8677 to i32*
  store i32 6, i32* %8678
  %8679 = inttoptr i64 %116 to i32*
  %8680 = load i32, i32* %8679
  %8681 = sext i32 %8680 to i64
  %8682 = shl nsw i64 %8681, 5
  store i64 %8682, i64* %5, align 8, !tbaa !1240
  %8683 = add i64 %8682, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 28)
  %8684 = add i64 %8870, 189
  %8685 = inttoptr i64 %8683 to i32*
  store i32 7, i32* %8685
  br label %block_40b955

block_40b062:                                     ; preds = %block_40b058
  %8686 = inttoptr i64 %116 to i32*
  %8687 = load i32, i32* %8686
  %8688 = sext i32 %8687 to i64
  %8689 = shl nsw i64 %8688, 2
  %8690 = add i64 %8689, ptrtoint (%newc_type* @newc to i64)
  %8691 = inttoptr i64 %8690 to i32*
  store i32 7, i32* %8691
  %8692 = inttoptr i64 %116 to i32*
  %8693 = load i32, i32* %8692
  %8694 = sext i32 %8693 to i64
  %8695 = shl nsw i64 %8694, 5
  %8696 = add i64 %8695, ptrtoint (%vassign_type* @vassign to i64)
  %8697 = inttoptr i64 %8696 to i32*
  store i32 1, i32* %8697
  %8698 = inttoptr i64 %116 to i32*
  %8699 = load i32, i32* %8698
  %8700 = sext i32 %8699 to i64
  %8701 = shl nsw i64 %8700, 5
  %8702 = add i64 %8701, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8703 = inttoptr i64 %8702 to i32*
  store i32 2, i32* %8703
  %8704 = inttoptr i64 %116 to i32*
  %8705 = load i32, i32* %8704
  %8706 = sext i32 %8705 to i64
  %8707 = shl nsw i64 %8706, 5
  %8708 = add i64 %8707, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %8709 = inttoptr i64 %8708 to i32*
  store i32 3, i32* %8709
  %8710 = inttoptr i64 %116 to i32*
  %8711 = load i32, i32* %8710
  %8712 = sext i32 %8711 to i64
  %8713 = shl nsw i64 %8712, 5
  %8714 = add i64 %8713, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %8715 = inttoptr i64 %8714 to i32*
  store i32 4, i32* %8715
  %8716 = inttoptr i64 %116 to i32*
  %8717 = load i32, i32* %8716
  %8718 = sext i32 %8717 to i64
  %8719 = shl nsw i64 %8718, 5
  %8720 = add i64 %8719, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 16)
  %8721 = inttoptr i64 %8720 to i32*
  store i32 5, i32* %8721
  %8722 = inttoptr i64 %116 to i32*
  %8723 = load i32, i32* %8722
  %8724 = sext i32 %8723 to i64
  %8725 = shl nsw i64 %8724, 5
  %8726 = add i64 %8725, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 20)
  %8727 = inttoptr i64 %8726 to i32*
  store i32 6, i32* %8727
  %8728 = inttoptr i64 %116 to i32*
  %8729 = load i32, i32* %8728
  %8730 = sext i32 %8729 to i64
  %8731 = shl nsw i64 %8730, 5
  store i64 %8731, i64* %5, align 8, !tbaa !1240
  %8732 = add i64 %8731, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 24)
  %8733 = add i64 %8875, 168
  %8734 = inttoptr i64 %8732 to i32*
  store i32 7, i32* %8734
  br label %block_40b2be

block_40f060:                                     ; preds = %block_40f037
  %8735 = load i64, i64* %10, align 8
  %8736 = add i64 %8735, -20
  %8737 = inttoptr i64 %8736 to i32*
  %8738 = load i32, i32* %8737
  %8739 = zext i32 %8738 to i64
  store i64 %8739, i64* %8, align 8, !tbaa !1240
  %8740 = add i64 %8735, -8
  %8741 = inttoptr i64 %8740 to i32*
  %8742 = load i32, i32* %8741
  %8743 = zext i32 %8742 to i64
  store i64 %8743, i64* %7, align 8, !tbaa !1240
  %8744 = add i64 %9151, 7984
  %8745 = add i64 %9151, 11
  %8746 = load i64, i64* %9, align 8, !tbaa !1240
  %8747 = add i64 %8746, -8
  %8748 = inttoptr i64 %8747 to i64*
  store i64 %8745, i64* %8748
  store i64 %8747, i64* %9, align 8, !tbaa !1240
  %8749 = tail call %struct.Memory* @sub_410f90_edgecopy_s(%struct.State* nonnull %0, i64 %8744, %struct.Memory* %7252)
  %8750 = load i64, i64* %3, align 8
  br label %block_40f06b

block_40d578:                                     ; preds = %block_40d56e
  %8751 = inttoptr i64 %4855 to i32*
  %8752 = load i32, i32* %8751
  %8753 = sext i32 %8752 to i64
  %8754 = mul nsw i64 %8753, 96
  %8755 = add i64 %8754, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %8756 = inttoptr i64 %8755 to i32*
  %8757 = load i32, i32* %8756
  %8758 = inttoptr i64 %4865 to i32*
  store i32 %8757, i32* %8758
  %8759 = inttoptr i64 %4865 to i32*
  %8760 = load i32, i32* %8759
  %8761 = sext i32 %8760 to i64
  %8762 = mul nsw i64 %8761, 24
  %8763 = add i64 %8762, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 8)
  %8764 = inttoptr i64 %8763 to i32*
  %8765 = load i32, i32* %8764
  %8766 = icmp ne i32 %8765, 3
  %8767 = select i1 %8766, i64 91, i64 58
  %8768 = add i64 %2986, %8767
  br i1 %8766, label %block_40d578.block_40d5d3_crit_edge, label %block_40d5b2

block_40d578.block_40d5d3_crit_edge:              ; preds = %block_40d578
  %8769 = inttoptr i64 %4855 to i32*
  %8770 = load i32, i32* %8769
  br label %block_40d5d3

block_40c565:                                     ; preds = %block_40c544
  %8771 = sext i32 %1607 to i64
  %8772 = shl nsw i64 %8771, 2
  %8773 = add i64 %8772, ptrtoint (%newe_type* @newe to i64)
  %8774 = inttoptr i64 %8773 to i32*
  %8775 = load i32, i32* %8774
  %8776 = add i32 %8775, 1
  %8777 = inttoptr i64 %8773 to i32*
  store i32 %8776, i32* %8777
  %8778 = inttoptr i64 %4855 to i32*
  %8779 = load i32, i32* %8778
  %8780 = sext i32 %8779 to i64
  %8781 = mul nsw i64 %8780, 48
  %8782 = add i64 %8781, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 32)
  %8783 = inttoptr i64 %8782 to i32*
  store i32 1, i32* %8783
  %8784 = inttoptr i64 %4865 to i32*
  %8785 = load i32, i32* %8784
  %8786 = sext i32 %8785 to i64
  %8787 = mul nsw i64 %8786, 96
  %8788 = add i64 %8787, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8789 = inttoptr i64 %8788 to i32*
  %8790 = load i32, i32* %8789
  %8791 = inttoptr i64 %4855 to i32*
  %8792 = load i32, i32* %8791
  %8793 = sext i32 %8792 to i64
  %8794 = mul nsw i64 %8793, 96
  %8795 = add i64 %8794, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 64)
  %8796 = add i64 %1621, 101
  %8797 = inttoptr i64 %8795 to i32*
  store i32 %8790, i32* %8797
  br label %block_40c5cf

block_40e54a:                                     ; preds = %block_40e372
  %8798 = icmp ne i32 %3709, 2
  %8799 = select i1 %8798, i64 429, i64 10
  %8800 = add i64 %3712, %8799
  br i1 %8798, label %block_40e6f7, label %block_40e554

block_40c85b:                                     ; preds = %block_40c851, %block_40bc96, %block_40bc5c, %block_40bc52
  %8801 = phi i64 [ %5157, %block_40bc5c ], [ %2783, %block_40bc52 ], [ %8928, %block_40c851 ], [ %6844, %block_40bc96 ]
  %8802 = phi i64 [ 3018, %block_40bc5c ], [ 3018, %block_40bc52 ], [ 5, %block_40c851 ], [ 5, %block_40bc96 ]
  %8803 = phi %struct.Memory* [ %2623, %block_40bc5c ], [ %2623, %block_40bc52 ], [ %8927, %block_40c851 ], [ %8611, %block_40bc96 ]
  %8804 = add i64 %8801, %8802
  %8805 = inttoptr i64 %4862 to i32*
  %8806 = load i32, i32* %8805
  %8807 = icmp ne i32 %8806, 0
  %8808 = select i1 %8807, i64 214, i64 10
  %8809 = add i64 %8804, %8808
  br i1 %8807, label %block_40c931, label %block_40c865

block_40c093:                                     ; preds = %block_40c074
  %8810 = mul nsw i64 %8972, 96
  %8811 = add i64 %8810, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %8812 = inttoptr i64 %8811 to i32*
  %8813 = load i32, i32* %8812
  %8814 = inttoptr i64 %4855 to i32*
  %8815 = load i32, i32* %8814
  %8816 = sub i32 %8813, %8815
  %8817 = icmp eq i32 %8816, 0
  %8818 = lshr i32 %8816, 31
  %8819 = lshr i32 %8813, 31
  %8820 = lshr i32 %8815, 31
  %8821 = xor i32 %8820, %8819
  %8822 = xor i32 %8818, %8819
  %8823 = add nuw nsw i32 %8822, %8821
  %8824 = icmp eq i32 %8823, 2
  %8825 = icmp ne i32 %8818, 0
  %8826 = xor i1 %8825, %8824
  %8827 = or i1 %8817, %8826
  %8828 = select i1 %8827, i64 106, i64 33
  %8829 = add i64 %8979, %8828
  br i1 %8827, label %block_40c0fd, label %block_40c0b4

block_40905a:                                     ; preds = %block_409050
  %8830 = inttoptr i64 %116 to i32*
  %8831 = load i32, i32* %8830
  %8832 = sext i32 %8831 to i64
  %8833 = mul nsw i64 %8832, 96
  %8834 = add i64 %8833, add (i64 ptrtoint (%sje_type* @sje to i64), i64 48)
  %8835 = inttoptr i64 %8834 to i32*
  %8836 = load i32, i32* %8835
  %8837 = inttoptr i64 %123 to i32*
  store i32 %8836, i32* %8837
  %8838 = inttoptr i64 %123 to i32*
  %8839 = load i32, i32* %8838
  %8840 = sext i32 %8839 to i64
  %8841 = mul nsw i64 %8840, 24
  %8842 = add i64 %8841, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %8843 = inttoptr i64 %8842 to i32*
  %8844 = load i32, i32* %8843
  %8845 = icmp ne i32 %8844, 3
  %8846 = select i1 %8845, i64 138, i64 58
  %8847 = add i64 %8948, %8846
  br i1 %8845, label %block_40905a.block_4090e4_crit_edge, label %block_409094

block_40905a.block_4090e4_crit_edge:              ; preds = %block_40905a
  %8848 = inttoptr i64 %116 to i32*
  %8849 = load i32, i32* %8848
  br label %block_4090e4

block_40f32f:                                     ; preds = %block_40f09b
  %8850 = inttoptr i64 %3928 to i32*
  %8851 = load i32, i32* %8850
  %8852 = add i32 %8851, 1
  %8853 = inttoptr i64 %3928 to i32*
  store i32 %8852, i32* %8853
  %8854 = add i64 %3331, -677
  br label %block_40f08a

block_40c964:                                     ; preds = %block_40c945
  %8855 = shl nsw i64 %6951, 2
  %8856 = add i64 %8855, ptrtoint (%newe_type* @newe to i64)
  %8857 = inttoptr i64 %8856 to i32*
  %8858 = load i32, i32* %8857
  %8859 = add i32 %8858, 1
  %8860 = inttoptr i64 %8856 to i32*
  store i32 %8859, i32* %8860
  %8861 = inttoptr i64 %4855 to i32*
  %8862 = load i32, i32* %8861
  %8863 = sext i32 %8862 to i64
  %8864 = mul nsw i64 %8863, 48
  %8865 = add i64 %8864, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 12)
  %8866 = add i64 %6958, 53
  %8867 = inttoptr i64 %8865 to i32*
  store i32 1, i32* %8867
  br label %block_40ccfa

block_40ad21:                                     ; preds = %block_40a28e
  %8868 = icmp ne i32 %3636, 6
  %8869 = select i1 %8868, i64 204, i64 10
  %8870 = add i64 %4468, %8869
  br i1 %8868, label %block_40aded, label %block_40ad2b

block_40b058:                                     ; preds = %block_40aeae
  %8871 = inttoptr i64 %120 to i32*
  %8872 = load i32, i32* %8871
  %8873 = icmp ne i32 %8872, 0
  %8874 = select i1 %8873, i64 183, i64 10
  %8875 = add i64 %7411, %8874
  br i1 %8873, label %block_40b10f, label %block_40b062

block_40ac4b:                                     ; preds = %block_40ac12
  %8876 = mul nsw i64 %2811, 96
  %8877 = add i64 %8876, ptrtoint (%sje_type* @sje to i64)
  %8878 = inttoptr i64 %8877 to i32*
  %8879 = load i32, i32* %8878
  %8880 = inttoptr i64 %116 to i32*
  %8881 = load i32, i32* %8880
  %8882 = sub i32 %8879, %8881
  %8883 = lshr i32 %8882, 31
  %8884 = lshr i32 %8879, 31
  %8885 = lshr i32 %8881, 31
  %8886 = xor i32 %8885, %8884
  %8887 = xor i32 %8883, %8884
  %8888 = add nuw nsw i32 %8887, %8886
  %8889 = icmp eq i32 %8888, 2
  %8890 = icmp ne i32 %8883, 0
  %8891 = xor i1 %8890, %8889
  %8892 = select i1 %8891, i64 32, i64 100
  %8893 = add i64 %2818, %8892
  br i1 %8891, label %block_40ac6b, label %block_40acaf

block_40ad1c:                                     ; preds = %block_40a9a2, %block_40ad17.sink.split, %block_40a326, %block_40a60e, %block_40a37f
  %8894 = phi i64 [ %2606, %block_40a60e ], [ %3735, %block_40a326 ], [ %1964, %block_40a37f ], [ %6017, %block_40a9a2 ], [ %5141, %block_40ad17.sink.split ]
  %8895 = phi i64 [ 5, %block_40a60e ], [ 555, %block_40a326 ], [ 555, %block_40a37f ], [ 5, %block_40a9a2 ], [ %5140, %block_40ad17.sink.split ]
  %8896 = phi %struct.Memory* [ %2605, %block_40a60e ], [ %3633, %block_40a326 ], [ %3633, %block_40a37f ], [ %3633, %block_40a9a2 ], [ %5139, %block_40ad17.sink.split ]
  %8897 = phi i64 [ 1801, %block_40a60e ], [ 1801, %block_40a326 ], [ 1801, %block_40a37f ], [ 5, %block_40a9a2 ], [ 5, %block_40ad17.sink.split ]
  %8898 = add i64 %8894, %8895
  br label %block_40b955

block_40ea31:                                     ; preds = %block_40ea1e, %block_40e9ee, %block_40ea0b
  %8899 = phi i64 [ %6013, %block_40e9ee ], [ %9213, %block_40ea1e ], [ %2632, %block_40ea0b ]
  %8900 = phi i64 [ 53, %block_40e9ee ], [ 5, %block_40ea1e ], [ 5, %block_40ea0b ]
  %8901 = phi %struct.Memory* [ %5789, %block_40e9ee ], [ %5789, %block_40ea1e ], [ %5789, %block_40ea0b ]
  %8902 = add i64 %8899, %8900
  %8903 = add i64 %5706, -52
  %8904 = add i64 %8902, 7
  %8905 = inttoptr i64 %8903 to i32*
  store i32 0, i32* %8905
  br label %block_40ea38

block_40a852:                                     ; preds = %block_40a802, %block_40a7c8.block_40a852_crit_edge
  %8906 = phi i32 [ %211, %block_40a7c8.block_40a852_crit_edge ], [ %9412, %block_40a802 ]
  %8907 = phi i64 [ %209, %block_40a7c8.block_40a852_crit_edge ], [ %9424, %block_40a802 ]
  %8908 = sext i32 %8906 to i64
  %8909 = shl nsw i64 %8908, 2
  %8910 = add i64 %8909, ptrtoint (%newc_type* @newc to i64)
  %8911 = inttoptr i64 %8910 to i32*
  store i32 2, i32* %8911
  %8912 = inttoptr i64 %116 to i32*
  %8913 = load i32, i32* %8912
  %8914 = sext i32 %8913 to i64
  %8915 = shl nsw i64 %8914, 5
  %8916 = add i64 %8915, ptrtoint (%vassign_type* @vassign to i64)
  %8917 = inttoptr i64 %8916 to i32*
  store i32 3, i32* %8917
  %8918 = inttoptr i64 %116 to i32*
  %8919 = load i32, i32* %8918
  %8920 = sext i32 %8919 to i64
  %8921 = shl nsw i64 %8920, 5
  store i64 %8921, i64* %5, align 8, !tbaa !1240
  %8922 = add i64 %8921, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8923 = add i64 %8907, 63
  %8924 = inttoptr i64 %8922 to i32*
  store i32 7, i32* %8924
  br label %block_40a98e

block_40c851:                                     ; preds = %block_40c847, %block_40c622, %block_40c65c
  %8925 = phi i64 [ %6801, %block_40c622 ], [ %9033, %block_40c847 ], [ %844, %block_40c65c ]
  %8926 = phi i64 [ 511, %block_40c622 ], [ 10, %block_40c847 ], [ 10, %block_40c65c ]
  %8927 = phi %struct.Memory* [ %6821, %block_40c622 ], [ %9032, %block_40c847 ], [ %6821, %block_40c65c ]
  %8928 = add i64 %8926, %8925
  br label %block_40c85b

block_40d70a:                                     ; preds = %block_40d6e9
  %8929 = sext i32 %640 to i64
  %8930 = mul nsw i64 %8929, 48
  %8931 = add i64 %8930, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 24)
  %8932 = inttoptr i64 %8931 to i32*
  %8933 = load i32, i32* %8932
  %8934 = sext i32 %8933 to i64
  %8935 = shl nsw i64 %8934, 2
  %8936 = add i64 %635, add (i64 ptrtoint (%sje_type* @sje to i64), i64 40)
  %8937 = add i64 %8936, %8935
  %8938 = inttoptr i64 %8937 to i32*
  %8939 = load i32, i32* %8938
  %8940 = mul nsw i64 %8929, 96
  %8941 = add i64 %8940, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 40)
  %8942 = add i64 %654, 74
  %8943 = inttoptr i64 %8941 to i32*
  store i32 %8939, i32* %8943
  br label %block_40d754

block_409050:                                     ; preds = %block_409046
  %8944 = inttoptr i64 %126 to i32*
  %8945 = load i32, i32* %8944
  %8946 = icmp ne i32 %8945, 0
  %8947 = select i1 %8946, i64 216, i64 10
  %8948 = add i64 %9037, %8947
  br i1 %8946, label %block_409128, label %block_40905a

block_409372:                                     ; preds = %block_4092e8.block_409372_crit_edge, %block_409322
  %8949 = phi i32 [ %6291, %block_4092e8.block_409372_crit_edge ], [ %3741, %block_409322 ]
  %8950 = phi i64 [ %6289, %block_4092e8.block_409372_crit_edge ], [ %3753, %block_409322 ]
  %8951 = sext i32 %8949 to i64
  %8952 = shl nsw i64 %8951, 2
  %8953 = add i64 %8952, ptrtoint (%newc_type* @newc to i64)
  %8954 = inttoptr i64 %8953 to i32*
  store i32 2, i32* %8954
  %8955 = inttoptr i64 %116 to i32*
  %8956 = load i32, i32* %8955
  %8957 = sext i32 %8956 to i64
  %8958 = shl nsw i64 %8957, 5
  %8959 = add i64 %8958, ptrtoint (%vassign_type* @vassign to i64)
  %8960 = inttoptr i64 %8959 to i32*
  store i32 6, i32* %8960
  %8961 = inttoptr i64 %116 to i32*
  %8962 = load i32, i32* %8961
  %8963 = sext i32 %8962 to i64
  %8964 = shl nsw i64 %8963, 5
  store i64 %8964, i64* %5, align 8, !tbaa !1240
  %8965 = add i64 %8964, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8966 = add i64 %8950, 63
  %8967 = inttoptr i64 %8965 to i32*
  store i32 7, i32* %8967
  br label %block_4093b1

block_40c074:                                     ; preds = %block_40bf80, %block_40bfd3
  %8968 = phi i64 [ %7638, %block_40bf80 ], [ %192, %block_40bfd3 ]
  %8969 = phi %struct.Memory* [ %660, %block_40bf80 ], [ %660, %block_40bfd3 ]
  %8970 = inttoptr i64 %4865 to i32*
  %8971 = load i32, i32* %8970
  %8972 = sext i32 %8971 to i64
  %8973 = mul nsw i64 %8972, 24
  %8974 = add i64 %8973, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %8975 = inttoptr i64 %8974 to i32*
  %8976 = load i32, i32* %8975
  %8977 = icmp ne i32 %8976, 3
  %8978 = select i1 %8977, i64 137, i64 31
  %8979 = add i64 %8968, %8978
  br i1 %8977, label %block_40c0fd, label %block_40c093

block_40a04e:                                     ; preds = %block_40a02d
  %8980 = sext i32 %9238 to i64
  %8981 = shl nsw i64 %8980, 2
  %8982 = add i64 %8981, ptrtoint (%newc_type* @newc to i64)
  %8983 = inttoptr i64 %8982 to i32*
  store i32 2, i32* %8983
  %8984 = inttoptr i64 %116 to i32*
  %8985 = load i32, i32* %8984
  %8986 = sext i32 %8985 to i64
  %8987 = shl nsw i64 %8986, 5
  %8988 = add i64 %8987, ptrtoint (%vassign_type* @vassign to i64)
  %8989 = inttoptr i64 %8988 to i32*
  store i32 5, i32* %8989
  %8990 = inttoptr i64 %116 to i32*
  %8991 = load i32, i32* %8990
  %8992 = sext i32 %8991 to i64
  %8993 = shl nsw i64 %8992, 5
  store i64 %8993, i64* %5, align 8, !tbaa !1240
  %8994 = add i64 %8993, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %8995 = inttoptr i64 %8994 to i32*
  store i32 7, i32* %8995
  %8996 = add i64 %9250, 152
  br label %block_40a27a

block_409e81:                                     ; preds = %block_409e48
  %8997 = mul nsw i64 %7716, 96
  %8998 = add i64 %8997, ptrtoint (%sje_type* @sje to i64)
  %8999 = inttoptr i64 %8998 to i32*
  %9000 = load i32, i32* %8999
  %9001 = inttoptr i64 %116 to i32*
  %9002 = load i32, i32* %9001
  %9003 = sub i32 %9000, %9002
  %9004 = lshr i32 %9003, 31
  %9005 = lshr i32 %9000, 31
  %9006 = lshr i32 %9002, 31
  %9007 = xor i32 %9006, %9005
  %9008 = xor i32 %9004, %9005
  %9009 = add nuw nsw i32 %9008, %9007
  %9010 = icmp eq i32 %9009, 2
  %9011 = icmp ne i32 %9004, 0
  %9012 = xor i1 %9011, %9010
  %9013 = select i1 %9012, i64 32, i64 100
  %9014 = add i64 %7723, %9013
  br i1 %9012, label %block_409ea1, label %block_409ee5

block_40e872:                                     ; preds = %block_40e868
  %9015 = inttoptr i64 %4855 to i32*
  %9016 = load i32, i32* %9015
  %9017 = sext i32 %9016 to i64
  %9018 = shl nsw i64 %9017, 2
  %9019 = add i64 %9018, ptrtoint (%newi_type* @newi to i64)
  %9020 = inttoptr i64 %9019 to i32*
  %9021 = load i32, i32* %9020
  %9022 = add i32 %9021, 9
  %9023 = inttoptr i64 %9019 to i32*
  store i32 %9022, i32* %9023
  %9024 = inttoptr i64 %4855 to i32*
  %9025 = load i32, i32* %9024
  %9026 = sext i32 %9025 to i64
  %9027 = mul nsw i64 %9026, 24
  %9028 = add i64 %9027, add (i64 ptrtoint (%fassign_type* @fassign to i64), i64 8)
  %9029 = add i64 %9125, 53
  %9030 = inttoptr i64 %9028 to i32*
  store i32 1, i32* %9030
  br label %block_40e8a7

block_40c847:                                     ; preds = %block_40c842, %block_40c6a0
  %9031 = phi i64 [ %9128, %block_40c842 ], [ %9057, %block_40c6a0 ]
  %9032 = phi %struct.Memory* [ %9127, %block_40c842 ], [ %6821, %block_40c6a0 ]
  %9033 = add i64 %9031, 5
  br label %block_40c851

block_409046:                                     ; preds = %block_408edf
  %9034 = add i64 %3120, 224
  %9035 = icmp ne i32 %3117, 1
  %9036 = select i1 %9035, i64 226, i64 10
  %9037 = add i64 %9034, %9036
  br i1 %9035, label %block_409128, label %block_409050

block_40c6a0:                                     ; preds = %block_40c666
  %9038 = mul nsw i64 %2252, 96
  %9039 = add i64 %9038, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %9040 = inttoptr i64 %9039 to i32*
  %9041 = load i32, i32* %9040
  %9042 = inttoptr i64 %4855 to i32*
  %9043 = load i32, i32* %9042
  %9044 = sub i32 %9041, %9043
  %9045 = icmp eq i32 %9044, 0
  %9046 = lshr i32 %9044, 31
  %9047 = lshr i32 %9041, 31
  %9048 = lshr i32 %9043, 31
  %9049 = xor i32 %9048, %9047
  %9050 = xor i32 %9046, %9047
  %9051 = add nuw nsw i32 %9050, %9049
  %9052 = icmp eq i32 %9051, 2
  %9053 = icmp ne i32 %9046, 0
  %9054 = xor i1 %9053, %9052
  %9055 = or i1 %9045, %9054
  %9056 = select i1 %9055, i64 423, i64 33
  %9057 = add i64 %2259, %9056
  br i1 %9055, label %block_40c847, label %block_40c6c1

block_40c9d7:                                     ; preds = %block_40c99e
  %9058 = mul nsw i64 %6050, 96
  %9059 = add i64 %9058, ptrtoint (%sje_type* @sje to i64)
  %9060 = inttoptr i64 %9059 to i32*
  %9061 = load i32, i32* %9060
  %9062 = inttoptr i64 %4855 to i32*
  %9063 = load i32, i32* %9062
  %9064 = sub i32 %9061, %9063
  %9065 = icmp eq i32 %9064, 0
  %9066 = lshr i32 %9064, 31
  %9067 = lshr i32 %9061, 31
  %9068 = lshr i32 %9063, 31
  %9069 = xor i32 %9068, %9067
  %9070 = xor i32 %9066, %9067
  %9071 = add nuw nsw i32 %9070, %9069
  %9072 = icmp eq i32 %9071, 2
  %9073 = icmp ne i32 %9066, 0
  %9074 = xor i1 %9073, %9072
  %9075 = or i1 %9065, %9074
  %9076 = select i1 %9075, i64 226, i64 32
  %9077 = add i64 %6057, %9076
  br i1 %9075, label %block_40ccfa, label %block_40c9f7

block_40f06b:                                     ; preds = %block_40f037, %block_40f060
  %9078 = phi i64 [ %9151, %block_40f037 ], [ %8750, %block_40f060 ]
  %9079 = phi %struct.Memory* [ %7252, %block_40f037 ], [ %8749, %block_40f060 ]
  %9080 = load i64, i64* %10, align 8
  %9081 = add i64 %9080, -20
  %9082 = inttoptr i64 %9081 to i32*
  %9083 = load i32, i32* %9082
  %9084 = sext i32 %9083 to i64
  %9085 = shl nsw i64 %9084, 2
  %9086 = add i64 %9085, ptrtoint (%jjface_type* @jjface to i64)
  %9087 = inttoptr i64 %9086 to i32*
  %9088 = load i32, i32* %9087
  %9089 = zext i32 %9088 to i64
  store i64 %9089, i64* %5, align 8, !tbaa !1240
  %9090 = add i64 %9080, -12
  %9091 = inttoptr i64 %9090 to i32*
  store i32 %9088, i32* %9091
  %9092 = add i64 %9080, -76
  %9093 = inttoptr i64 %9092 to i32*
  %9094 = load i32, i32* %9093
  %9095 = add i32 %9094, -3
  %9096 = icmp eq i32 %9095, 0
  %9097 = select i1 %9096, i64 24, i64 732
  %9098 = add i64 %9078, %9097
  br i1 %9096, label %block_40f083, label %block_40f347

block_40d045:                                     ; preds = %block_40d026
  %9099 = mul nsw i64 %9312, 96
  %9100 = add i64 %9099, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %9101 = inttoptr i64 %9100 to i32*
  %9102 = load i32, i32* %9101
  %9103 = inttoptr i64 %4855 to i32*
  %9104 = load i32, i32* %9103
  %9105 = sub i32 %9102, %9104
  %9106 = icmp eq i32 %9105, 0
  %9107 = lshr i32 %9105, 31
  %9108 = lshr i32 %9102, 31
  %9109 = lshr i32 %9104, 31
  %9110 = xor i32 %9109, %9108
  %9111 = xor i32 %9107, %9108
  %9112 = add nuw nsw i32 %9111, %9110
  %9113 = icmp eq i32 %9112, 2
  %9114 = icmp ne i32 %9107, 0
  %9115 = xor i1 %9114, %9113
  %9116 = or i1 %9106, %9115
  %9117 = select i1 %9116, i64 107, i64 33
  %9118 = add i64 %9319, %9117
  br i1 %9116, label %block_40d0b0, label %block_40d066

block_40e868:                                     ; preds = %block_40e82a, %block_40e834
  %9119 = phi i64 [ %9307, %block_40e82a ], [ %9184, %block_40e834 ]
  %9120 = phi %struct.Memory* [ %9302, %block_40e82a ], [ %9302, %block_40e834 ]
  %9121 = inttoptr i64 %4861 to i32*
  %9122 = load i32, i32* %9121
  %9123 = icmp eq i32 %9122, 3
  %9124 = select i1 %9123, i64 63, i64 10
  %9125 = add i64 %9119, %9124
  br i1 %9123, label %block_40e8a7, label %block_40e872

block_40c842:                                     ; preds = %block_40c7d7, %block_40c7b8, %block_40c7f8
  %9126 = phi i64 [ %240, %block_40c7b8 ], [ %8519, %block_40c7d7 ], [ %140, %block_40c7f8 ]
  %9127 = phi %struct.Memory* [ %230, %block_40c7b8 ], [ %230, %block_40c7d7 ], [ %230, %block_40c7f8 ]
  %9128 = add i64 %9126, 5
  br label %block_40c847

block_409041:                                     ; preds = %block_409002, %block_408fd3
  %9129 = phi i64 [ %9505, %block_409002 ], [ %2755, %block_408fd3 ]
  %9130 = phi %struct.Memory* [ %3633, %block_409002 ], [ %3633, %block_408fd3 ]
  %9131 = add i64 %9129, 278
  br label %block_40915c

block_40cab4:                                     ; preds = %block_40c9f7, %block_40ca4a, %block_40ca6a
  %9132 = phi i64 [ %5432, %block_40c9f7 ], [ %4958, %block_40ca4a ], [ %4804, %block_40ca6a ]
  %9133 = phi %struct.Memory* [ %8803, %block_40c9f7 ], [ %8803, %block_40ca4a ], [ %8803, %block_40ca6a ]
  %9134 = add i64 %9132, 5
  br label %block_40ccfa

block_40f037:                                     ; preds = %block_40f02d
  %9135 = sext i32 %7269 to i64
  %9136 = mul nsw i64 %9135, 24
  %9137 = add i64 %9136, ptrtoint (%cbc_type* @cbc to i64)
  %9138 = sext i32 %7255 to i64
  %9139 = shl nsw i64 %9138, 2
  %9140 = add i64 %9139, %9137
  %9141 = inttoptr i64 %9140 to i32*
  %9142 = load i32, i32* %9141
  %9143 = zext i32 %9142 to i64
  store i64 %9143, i64* %6, align 8, !tbaa !1240
  %9144 = add i64 %7251, -76
  %9145 = inttoptr i64 %9144 to i32*
  store i32 %9142, i32* %9145
  %9146 = inttoptr i64 %9144 to i32*
  %9147 = load i32, i32* %9146
  %9148 = add i32 %9147, -3
  %9149 = icmp eq i32 %9148, 0
  %9150 = select i1 %9149, i64 41, i64 52
  %9151 = add i64 %7266, %9150
  br i1 %9149, label %block_40f060, label %block_40f06b

block_40cceb:                                     ; preds = %block_40cb4a, %block_40cce6
  %9152 = phi i64 [ %6198, %block_40cce6 ], [ %7745, %block_40cb4a ]
  %9153 = phi %struct.Memory* [ %6197, %block_40cce6 ], [ %8803, %block_40cb4a ]
  %9154 = add i64 %9152, 5
  br label %block_40ccfa

block_40a98e:                                     ; preds = %block_40a823, %block_40a852, %block_40a8f1, %block_40a935
  %9155 = phi i64 [ %9333, %block_40a823 ], [ %8923, %block_40a852 ], [ %7578, %block_40a8f1 ], [ %6927, %block_40a935 ]
  %9156 = phi i64 [ 253, %block_40a823 ], [ 253, %block_40a852 ], [ 5, %block_40a8f1 ], [ 5, %block_40a935 ]
  %9157 = phi %struct.Memory* [ %3633, %block_40a823 ], [ %3633, %block_40a852 ], [ %3633, %block_40a8f1 ], [ %3633, %block_40a935 ]
  %9158 = add i64 %9155, %9156
  br label %block_40ad17.sink.split

block_40e035:                                     ; preds = %block_40dfe1
  %9159 = mul nsw i64 %411, 96
  %9160 = add i64 %9159, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %9161 = inttoptr i64 %9160 to i32*
  %9162 = load i32, i32* %9161
  %9163 = inttoptr i64 %4855 to i32*
  %9164 = load i32, i32* %9163
  %9165 = sext i32 %9164 to i64
  %9166 = mul nsw i64 %9165, 96
  %9167 = add i64 %9166, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 8)
  %9168 = add i64 %418, 48
  %9169 = inttoptr i64 %9167 to i32*
  store i32 %9162, i32* %9169
  br label %block_40e065

block_40e834:                                     ; preds = %block_40e82a
  %9170 = inttoptr i64 %4855 to i32*
  %9171 = load i32, i32* %9170
  %9172 = sext i32 %9171 to i64
  %9173 = shl nsw i64 %9172, 2
  %9174 = add i64 %9173, ptrtoint (%newi_type* @newi to i64)
  %9175 = inttoptr i64 %9174 to i32*
  %9176 = load i32, i32* %9175
  %9177 = add i32 %9176, 9
  %9178 = inttoptr i64 %9174 to i32*
  store i32 %9177, i32* %9178
  %9179 = inttoptr i64 %4855 to i32*
  %9180 = load i32, i32* %9179
  %9181 = sext i32 %9180 to i64
  %9182 = mul nsw i64 %9181, 24
  %9183 = add i64 %9182, ptrtoint (%fassign_type* @fassign to i64)
  %9184 = add i64 %9307, 52
  %9185 = inttoptr i64 %9183 to i32*
  store i32 1, i32* %9185
  br label %block_40e868

block_40c6c1:                                     ; preds = %block_40c6a0, %block_40c666.block_40c6c1_crit_edge
  %9186 = phi i32 [ %2261, %block_40c666.block_40c6c1_crit_edge ], [ %9043, %block_40c6a0 ]
  %9187 = phi i64 [ %2259, %block_40c666.block_40c6c1_crit_edge ], [ %9057, %block_40c6a0 ]
  %9188 = sext i32 %9186 to i64
  %9189 = shl nsw i64 %9188, 2
  %9190 = add i64 %9189, ptrtoint (%newe_type* @newe to i64)
  %9191 = inttoptr i64 %9190 to i32*
  %9192 = load i32, i32* %9191
  %9193 = add i32 %9192, 1
  %9194 = inttoptr i64 %9190 to i32*
  store i32 %9193, i32* %9194
  %9195 = inttoptr i64 %4855 to i32*
  %9196 = load i32, i32* %9195
  %9197 = sext i32 %9196 to i64
  %9198 = mul nsw i64 %9197, 48
  %9199 = add i64 %9198, add (i64 ptrtoint (%eassign_type* @eassign to i64), i64 16)
  %9200 = inttoptr i64 %9199 to i32*
  store i32 1, i32* %9200
  %9201 = inttoptr i64 %4865 to i32*
  %9202 = load i32, i32* %9201
  %9203 = sext i32 %9202 to i64
  %9204 = mul nsw i64 %9203, 24
  %9205 = add i64 %9204, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 20)
  %9206 = inttoptr i64 %9205 to i32*
  %9207 = load i32, i32* %9206
  %9208 = icmp ne i32 %9207, 2
  %9209 = select i1 %9208, i64 247, i64 84
  %9210 = add i64 %9187, %9209
  br i1 %9208, label %block_40c7b8, label %block_40c715

block_40ea1e:                                     ; preds = %block_40ea01
  %9211 = inttoptr i64 %2879 to i32*
  store i32 0, i32* %9211
  %9212 = add i64 %5706, -104
  %9213 = add i64 %2878, 14
  %9214 = inttoptr i64 %9212 to i32*
  store i32 1, i32* %9214
  br label %block_40ea31

block_40e079:                                     ; preds = %block_40e06f
  %9215 = icmp ne i32 %4470, 1
  %9216 = select i1 %9215, i64 188, i64 10
  %9217 = add i64 %2843, %9216
  br i1 %9215, label %block_40e13a, label %block_40e083

block_40d066:                                     ; preds = %block_40d045
  %9218 = sext i32 %9104 to i64
  %9219 = mul nsw i64 %9218, 48
  %9220 = add i64 %9219, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 28)
  %9221 = inttoptr i64 %9220 to i32*
  %9222 = load i32, i32* %9221
  %9223 = sext i32 %9222 to i64
  %9224 = shl nsw i64 %9223, 3
  %9225 = add i64 %9099, add (i64 ptrtoint (%sje_type* @sje to i64), i64 68)
  %9226 = add i64 %9225, %9224
  %9227 = inttoptr i64 %9226 to i32*
  %9228 = load i32, i32* %9227
  %9229 = mul nsw i64 %9218, 96
  %9230 = add i64 %9229, add (i64 ptrtoint (%diagn_type* @diagn to i64), i64 88)
  %9231 = add i64 %9118, 74
  %9232 = inttoptr i64 %9230 to i32*
  store i32 %9228, i32* %9232
  br label %block_40d0b0

block_40a02d:                                     ; preds = %block_409ff3
  %9233 = mul nsw i64 %6135, 96
  %9234 = add i64 %9233, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %9235 = inttoptr i64 %9234 to i32*
  %9236 = load i32, i32* %9235
  %9237 = inttoptr i64 %116 to i32*
  %9238 = load i32, i32* %9237
  %9239 = sub i32 %9236, %9238
  %9240 = lshr i32 %9239, 31
  %9241 = lshr i32 %9236, 31
  %9242 = lshr i32 %9238, 31
  %9243 = xor i32 %9242, %9241
  %9244 = xor i32 %9240, %9241
  %9245 = add nuw nsw i32 %9244, %9243
  %9246 = icmp eq i32 %9245, 2
  %9247 = icmp ne i32 %9240, 0
  %9248 = xor i1 %9247, %9246
  %9249 = select i1 %9248, i64 33, i64 101
  %9250 = add i64 %6142, %9249
  br i1 %9248, label %block_40a04e, label %block_40a092

block_40e554:                                     ; preds = %block_40e54a
  %9251 = inttoptr i64 %4863 to i32*
  %9252 = load i32, i32* %9251
  %9253 = icmp ne i32 %9252, 2
  %9254 = select i1 %9253, i64 210, i64 10
  %9255 = add i64 %8800, %9254
  br i1 %9253, label %block_40e626, label %block_40e55e

block_40c865:                                     ; preds = %block_40c85b
  %9256 = inttoptr i64 %4859 to i32*
  %9257 = load i32, i32* %9256
  %9258 = icmp eq i32 %9257, 3
  %9259 = select i1 %9258, i64 63, i64 10
  %9260 = add i64 %8809, %9259
  br i1 %9258, label %block_40c8a4, label %block_40c86f

block_40982c:                                     ; preds = %block_40980c
  %9261 = sext i32 %9430 to i64
  %9262 = shl nsw i64 %9261, 2
  %9263 = add i64 %9262, ptrtoint (%newc_type* @newc to i64)
  %9264 = inttoptr i64 %9263 to i32*
  store i32 2, i32* %9264
  %9265 = inttoptr i64 %116 to i32*
  %9266 = load i32, i32* %9265
  %9267 = sext i32 %9266 to i64
  %9268 = shl nsw i64 %9267, 5
  %9269 = add i64 %9268, ptrtoint (%vassign_type* @vassign to i64)
  %9270 = inttoptr i64 %9269 to i32*
  store i32 5, i32* %9270
  %9271 = inttoptr i64 %116 to i32*
  %9272 = load i32, i32* %9271
  %9273 = sext i32 %9272 to i64
  %9274 = shl nsw i64 %9273, 5
  store i64 %9274, i64* %5, align 8, !tbaa !1240
  %9275 = add i64 %9274, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %9276 = inttoptr i64 %9275 to i32*
  store i32 7, i32* %9276
  %9277 = add i64 %9442, 152
  br label %block_4098c9

block_40be5f:                                     ; preds = %block_40be40
  %9278 = mul nsw i64 %891, 96
  %9279 = add i64 %9278, add (i64 ptrtoint (%sje_type* @sje to i64), i64 80)
  %9280 = inttoptr i64 %9279 to i32*
  %9281 = load i32, i32* %9280
  %9282 = inttoptr i64 %4855 to i32*
  %9283 = load i32, i32* %9282
  %9284 = sub i32 %9281, %9283
  %9285 = icmp eq i32 %9284, 0
  %9286 = lshr i32 %9284, 31
  %9287 = lshr i32 %9281, 31
  %9288 = lshr i32 %9283, 31
  %9289 = xor i32 %9288, %9287
  %9290 = xor i32 %9286, %9287
  %9291 = add nuw nsw i32 %9290, %9289
  %9292 = icmp eq i32 %9291, 2
  %9293 = icmp ne i32 %9286, 0
  %9294 = xor i1 %9293, %9292
  %9295 = or i1 %9285, %9294
  %9296 = select i1 %9295, i64 107, i64 33
  %9297 = add i64 %898, %9296
  br i1 %9295, label %block_40beca, label %block_40be80

block_409494:                                     ; preds = %block_40948a
  %9298 = icmp ne i32 %2325, 3
  %9299 = select i1 %9298, i64 105, i64 10
  %9300 = add i64 %2328, %9299
  br i1 %9298, label %block_4094fd, label %block_409570.sink.split

block_40e82a:                                     ; preds = %block_40e7f5, %block_40e7eb
  %9301 = phi i64 [ %7112, %block_40e7f5 ], [ %3207, %block_40e7eb ]
  %9302 = phi %struct.Memory* [ %1138, %block_40e7f5 ], [ %1138, %block_40e7eb ]
  %9303 = inttoptr i64 %4859 to i32*
  %9304 = load i32, i32* %9303
  %9305 = icmp eq i32 %9304, 3
  %9306 = select i1 %9305, i64 62, i64 10
  %9307 = add i64 %9301, %9306
  br i1 %9305, label %block_40e868, label %block_40e834

block_40d026:                                     ; preds = %block_40cf2f, %block_40cf83
  %9308 = phi i64 [ %507, %block_40cf2f ], [ %348, %block_40cf83 ]
  %9309 = phi %struct.Memory* [ %1968, %block_40cf2f ], [ %1968, %block_40cf83 ]
  %9310 = inttoptr i64 %4865 to i32*
  %9311 = load i32, i32* %9310
  %9312 = sext i32 %9311 to i64
  %9313 = mul nsw i64 %9312, 24
  %9314 = add i64 %9313, add (i64 ptrtoint (%cbc_type* @cbc to i64), i64 16)
  %9315 = inttoptr i64 %9314 to i32*
  %9316 = load i32, i32* %9315
  %9317 = icmp ne i32 %9316, 3
  %9318 = select i1 %9317, i64 138, i64 31
  %9319 = add i64 %9308, %9318
  br i1 %9317, label %block_40d0b0, label %block_40d045

block_40e201:                                     ; preds = %block_40e1d1, %block_40e17d
  %9320 = phi i64 [ %3232, %block_40e17d ], [ %5630, %block_40e1d1 ]
  %9321 = phi %struct.Memory* [ %6835, %block_40e17d ], [ %6835, %block_40e1d1 ]
  %9322 = add i64 %9320, 5
  br label %block_40e2d6

block_40a823:                                     ; preds = %block_40a802
  %9323 = sext i32 %9412 to i64
  %9324 = shl nsw i64 %9323, 2
  %9325 = add i64 %9324, ptrtoint (%newc_type* @newc to i64)
  %9326 = inttoptr i64 %9325 to i32*
  store i32 1, i32* %9326
  %9327 = inttoptr i64 %116 to i32*
  %9328 = load i32, i32* %9327
  %9329 = sext i32 %9328 to i64
  %9330 = shl nsw i64 %9329, 5
  store i64 %9330, i64* %5, align 8, !tbaa !1240
  %9331 = add i64 %9330, ptrtoint (%vassign_type* @vassign to i64)
  %9332 = inttoptr i64 %9331 to i32*
  store i32 7, i32* %9332
  %9333 = add i64 %9424, 110
  br label %block_40a98e

block_40a10f:                                     ; preds = %block_40a0f0
  %9334 = shl nsw i64 %7599, 2
  %9335 = add i64 %9334, ptrtoint (%newc_type* @newc to i64)
  %9336 = inttoptr i64 %9335 to i32*
  store i32 4, i32* %9336
  %9337 = inttoptr i64 %116 to i32*
  %9338 = load i32, i32* %9337
  %9339 = sext i32 %9338 to i64
  %9340 = shl nsw i64 %9339, 5
  %9341 = add i64 %9340, ptrtoint (%vassign_type* @vassign to i64)
  %9342 = inttoptr i64 %9341 to i32*
  store i32 2, i32* %9342
  %9343 = inttoptr i64 %116 to i32*
  %9344 = load i32, i32* %9343
  %9345 = sext i32 %9344 to i64
  %9346 = shl nsw i64 %9345, 5
  %9347 = add i64 %9346, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %9348 = inttoptr i64 %9347 to i32*
  store i32 3, i32* %9348
  %9349 = inttoptr i64 %116 to i32*
  %9350 = load i32, i32* %9349
  %9351 = sext i32 %9350 to i64
  %9352 = shl nsw i64 %9351, 5
  %9353 = add i64 %9352, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %9354 = inttoptr i64 %9353 to i32*
  store i32 6, i32* %9354
  %9355 = inttoptr i64 %116 to i32*
  %9356 = load i32, i32* %9355
  %9357 = sext i32 %9356 to i64
  %9358 = shl nsw i64 %9357, 5
  store i64 %9358, i64* %5, align 8, !tbaa !1240
  %9359 = add i64 %9358, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 12)
  %9360 = add i64 %7606, 105
  %9361 = inttoptr i64 %9359 to i32*
  store i32 7, i32* %9361
  br label %block_40a27a

block_40f016:                                     ; preds = %block_40f00f, %block_40f35a
  %9362 = phi i64 [ %9405, %block_40f00f ], [ %6271, %block_40f35a ]
  %9363 = phi i64 [ %8288, %block_40f00f ], [ %7251, %block_40f35a ]
  %9364 = phi %struct.Memory* [ %8289, %block_40f00f ], [ %7252, %block_40f35a ]
  %9365 = add i64 %9363, -8
  %9366 = inttoptr i64 %9365 to i32*
  %9367 = load i32, i32* %9366
  %9368 = zext i32 %9367 to i64
  store i64 %9368, i64* %4, align 8, !tbaa !1240
  %9369 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %9370 = sub i32 %9367, %9369
  %9371 = lshr i32 %9370, 31
  %9372 = trunc i32 %9371 to i8
  %9373 = lshr i32 %9367, 31
  %9374 = lshr i32 %9369, 31
  %9375 = xor i32 %9374, %9373
  %9376 = xor i32 %9371, %9373
  %9377 = add nuw nsw i32 %9376, %9375
  %9378 = icmp eq i32 %9377, 2
  %9379 = icmp ne i8 %9372, 0
  %9380 = xor i1 %9379, %9378
  %9381 = select i1 %9380, i64 16, i64 855
  %9382 = add i64 %9362, %9381
  br i1 %9380, label %block_40f026, label %block_40f36d

block_40b631:                                     ; preds = %block_40b612
  %9383 = mul nsw i64 %4164, 96
  %9384 = add i64 %9383, add (i64 ptrtoint (%sje_type* @sje to i64), i64 16)
  %9385 = inttoptr i64 %9384 to i32*
  %9386 = load i32, i32* %9385
  %9387 = inttoptr i64 %116 to i32*
  %9388 = load i32, i32* %9387
  %9389 = sub i32 %9386, %9388
  %9390 = lshr i32 %9389, 31
  %9391 = lshr i32 %9386, 31
  %9392 = lshr i32 %9388, 31
  %9393 = xor i32 %9392, %9391
  %9394 = xor i32 %9390, %9391
  %9395 = add nuw nsw i32 %9394, %9393
  %9396 = icmp eq i32 %9395, 2
  %9397 = icmp ne i32 %9390, 0
  %9398 = xor i1 %9397, %9396
  %9399 = select i1 %9398, i64 33, i64 380
  %9400 = add i64 %1048, %9399
  br i1 %9398, label %block_40b652, label %block_40b7ad

block_4092d4:                                     ; preds = %block_40916b
  %9401 = add i64 %6431, 226
  %9402 = icmp ne i32 %6428, 1
  %9403 = select i1 %9402, i64 226, i64 10
  %9404 = add i64 %9401, %9403
  br i1 %9402, label %block_4093b6, label %block_4092de

block_40f00f:                                     ; preds = %block_40e96e
  %9405 = add i64 %8306, 7
  %9406 = inttoptr i64 %8290 to i32*
  store i32 0, i32* %9406
  br label %block_40f016

block_40a802:                                     ; preds = %block_40a7c8
  %9407 = mul nsw i64 %202, 96
  %9408 = add i64 %9407, add (i64 ptrtoint (%sje_type* @sje to i64), i64 32)
  %9409 = inttoptr i64 %9408 to i32*
  %9410 = load i32, i32* %9409
  %9411 = inttoptr i64 %116 to i32*
  %9412 = load i32, i32* %9411
  %9413 = sub i32 %9410, %9412
  %9414 = lshr i32 %9413, 31
  %9415 = lshr i32 %9410, 31
  %9416 = lshr i32 %9412, 31
  %9417 = xor i32 %9416, %9415
  %9418 = xor i32 %9414, %9415
  %9419 = add nuw nsw i32 %9418, %9417
  %9420 = icmp eq i32 %9419, 2
  %9421 = icmp ne i32 %9414, 0
  %9422 = xor i1 %9421, %9420
  %9423 = select i1 %9422, i64 33, i64 80
  %9424 = add i64 %209, %9423
  br i1 %9422, label %block_40a823, label %block_40a852

block_40980c:                                     ; preds = %block_4097d3
  %9425 = mul nsw i64 %2314, 96
  %9426 = add i64 %9425, ptrtoint (%sje_type* @sje to i64)
  %9427 = inttoptr i64 %9426 to i32*
  %9428 = load i32, i32* %9427
  %9429 = inttoptr i64 %116 to i32*
  %9430 = load i32, i32* %9429
  %9431 = sub i32 %9428, %9430
  %9432 = lshr i32 %9431, 31
  %9433 = lshr i32 %9428, 31
  %9434 = lshr i32 %9430, 31
  %9435 = xor i32 %9434, %9433
  %9436 = xor i32 %9432, %9433
  %9437 = add nuw nsw i32 %9436, %9435
  %9438 = icmp eq i32 %9437, 2
  %9439 = icmp ne i32 %9432, 0
  %9440 = xor i1 %9439, %9438
  %9441 = select i1 %9440, i64 32, i64 100
  %9442 = add i64 %2321, %9441
  br i1 %9440, label %block_40982c, label %block_409870

block_4096d4:                                     ; preds = %block_409635.block_4096d4_crit_edge, %block_40966f
  %9443 = phi i32 [ %915, %block_409635.block_4096d4_crit_edge ], [ %829, %block_40966f ]
  %9444 = phi i64 [ %913, %block_409635.block_4096d4_crit_edge ], [ %841, %block_40966f ]
  %9445 = sext i32 %9443 to i64
  %9446 = shl nsw i64 %9445, 2
  %9447 = add i64 %9446, ptrtoint (%newc_type* @newc to i64)
  %9448 = inttoptr i64 %9447 to i32*
  store i32 3, i32* %9448
  %9449 = inttoptr i64 %116 to i32*
  %9450 = load i32, i32* %9449
  %9451 = sext i32 %9450 to i64
  %9452 = shl nsw i64 %9451, 5
  %9453 = add i64 %9452, ptrtoint (%vassign_type* @vassign to i64)
  %9454 = inttoptr i64 %9453 to i32*
  store i32 3, i32* %9454
  %9455 = inttoptr i64 %116 to i32*
  %9456 = load i32, i32* %9455
  %9457 = sext i32 %9456 to i64
  %9458 = shl nsw i64 %9457, 5
  %9459 = add i64 %9458, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %9460 = inttoptr i64 %9459 to i32*
  store i32 6, i32* %9460
  %9461 = inttoptr i64 %116 to i32*
  %9462 = load i32, i32* %9461
  %9463 = sext i32 %9462 to i64
  %9464 = shl nsw i64 %9463, 5
  store i64 %9464, i64* %5, align 8, !tbaa !1240
  %9465 = add i64 %9464, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 8)
  %9466 = add i64 %9444, 84
  %9467 = inttoptr i64 %9465 to i32*
  store i32 7, i32* %9467
  br label %block_4098d3.sink.split

block_40d805:                                     ; preds = %block_40d7cb
  %9468 = mul nsw i64 %219, 96
  %9469 = add i64 %9468, add (i64 ptrtoint (%sje_type* @sje to i64), i64 64)
  %9470 = inttoptr i64 %9469 to i32*
  %9471 = load i32, i32* %9470
  %9472 = inttoptr i64 %4855 to i32*
  %9473 = load i32, i32* %9472
  %9474 = sub i32 %9471, %9473
  %9475 = icmp eq i32 %9474, 0
  %9476 = lshr i32 %9474, 31
  %9477 = lshr i32 %9471, 31
  %9478 = lshr i32 %9473, 31
  %9479 = xor i32 %9478, %9477
  %9480 = xor i32 %9476, %9477
  %9481 = add nuw nsw i32 %9480, %9479
  %9482 = icmp eq i32 %9481, 2
  %9483 = icmp ne i32 %9476, 0
  %9484 = xor i1 %9483, %9482
  %9485 = or i1 %9475, %9484
  %9486 = select i1 %9485, i64 229, i64 33
  %9487 = add i64 %226, %9486
  br i1 %9485, label %block_40db31, label %block_40d826

block_409002:                                     ; preds = %block_408f7a.block_409002_crit_edge, %block_408fb3
  %9488 = phi i32 [ %6218, %block_408f7a.block_409002_crit_edge ], [ %271, %block_408fb3 ]
  %9489 = phi i64 [ %6216, %block_408f7a.block_409002_crit_edge ], [ %283, %block_408fb3 ]
  %9490 = sext i32 %9488 to i64
  %9491 = shl nsw i64 %9490, 2
  %9492 = add i64 %9491, ptrtoint (%newc_type* @newc to i64)
  %9493 = inttoptr i64 %9492 to i32*
  store i32 2, i32* %9493
  %9494 = inttoptr i64 %116 to i32*
  %9495 = load i32, i32* %9494
  %9496 = sext i32 %9495 to i64
  %9497 = shl nsw i64 %9496, 5
  %9498 = add i64 %9497, ptrtoint (%vassign_type* @vassign to i64)
  %9499 = inttoptr i64 %9498 to i32*
  store i32 5, i32* %9499
  %9500 = inttoptr i64 %116 to i32*
  %9501 = load i32, i32* %9500
  %9502 = sext i32 %9501 to i64
  %9503 = shl nsw i64 %9502, 5
  store i64 %9503, i64* %5, align 8, !tbaa !1240
  %9504 = add i64 %9503, add (i64 ptrtoint (%vassign_type* @vassign to i64), i64 4)
  %9505 = add i64 %9489, 63
  %9506 = inttoptr i64 %9504 to i32*
  store i32 7, i32* %9506
  br label %block_409041
}

; Function Attrs: noinline
define %struct.Memory* @sub_41eb90_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_41eb90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = bitcast %union.anon* %4 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %28 = load i64, i64* %16, align 8
  %29 = load i64, i64* %15, align 8, !tbaa !1240
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %28, i64* %31
  store i64 %30, i64* %16, align 8, !tbaa !1240
  %32 = load i64, i64* %24, align 8
  %33 = add i64 %29, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %23, align 8
  %36 = add i64 %29, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i64, i64* %22, align 8
  %39 = add i64 %29, -32
  %40 = inttoptr i64 %39 to i64*
  store i64 %38, i64* %40
  %41 = load i64, i64* %21, align 8
  %42 = add i64 %29, -40
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43
  %44 = load i64, i64* %10, align 8
  %45 = add i64 %29, -48
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  %47 = add i64 %29, -568
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1987), i64* %11, align 8, !tbaa !1240
  %54 = bitcast [32 x %union.VectorReg]* %25 to i8*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast [32 x %union.VectorReg]* %25 to i32*
  store i32 0, i32* %56, align 1, !tbaa !1244
  %57 = getelementptr inbounds i8, i8* %54, i64 4
  %58 = bitcast i8* %57 to i32*
  store i32 0, i32* %58, align 1, !tbaa !1244
  %59 = bitcast i64* %55 to i32*
  store i32 0, i32* %59, align 1, !tbaa !1244
  %60 = getelementptr inbounds i8, i8* %54, i64 12
  %61 = bitcast i8* %60 to i32*
  store i32 0, i32* %61, align 1, !tbaa !1244
  %62 = add i64 %29, -52
  %63 = inttoptr i64 %62 to i32*
  store i32 0, i32* %63
  %64 = add i64 %29, -56
  %65 = load i32, i32* %8, align 4
  %66 = inttoptr i64 %64 to i32*
  store i32 %65, i32* %66
  %67 = add i64 %29, -64
  %68 = load i64, i64* %13, align 8
  %69 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %69
  %70 = add i64 %29, -112
  %71 = bitcast [32 x %union.VectorReg]* %25 to double*
  %72 = load double, double* %71, align 1
  %73 = inttoptr i64 %70 to double*
  store double %72, double* %73
  %74 = load i64, i64* %16, align 8
  %75 = add i64 %74, -112
  %76 = inttoptr i64 %75 to i32*
  store i32 0, i32* %76
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1987), i64* %13, align 8, !tbaa !1240
  %77 = add i64 %1, 80
  %78 = add i64 %29, -576
  %79 = inttoptr i64 %78 to i64*
  store i64 %77, i64* %79
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %83 = inttoptr i64 %78 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %3, align 8, !alias.scope !1699, !noalias !1702
  store i64 %47, i64* %15, align 8, !alias.scope !1699, !noalias !1702
  %85 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1976), i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1987))
  %86 = load i64, i64* %16, align 8
  %87 = add i64 %86, -328
  %88 = load i64, i64* %3, align 8
  %89 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %89
  %90 = icmp eq i64 %85, 0
  %91 = select i1 %90, i64 221, i64 17
  %92 = add i64 %88, %91
  br i1 %90, label %block_41ecbd, label %block_41ebf1

block_41ede6:                                     ; preds = %block_41edcc
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2174), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%alpha_type* @alpha to i64), i64* %12, align 8, !tbaa !1240
  %93 = load i64, i64* %16, align 8
  %94 = add i64 %93, -328
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %267, 34
  %98 = load i64, i64* %15, align 8, !tbaa !1240
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %11, align 8, !alias.scope !1704, !noalias !1707
  %102 = load i64, i64* %17, align 8, !alias.scope !1704, !noalias !1707
  %103 = load i64, i64* %18, align 8, !alias.scope !1704, !noalias !1707
  %104 = inttoptr i64 %98 to i64*
  %105 = load i64, i64* %104
  %106 = add i64 %98, 8
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107
  %109 = add i64 %98, 16
  %110 = inttoptr i64 %109 to i64*
  %111 = load i64, i64* %110
  %112 = add i64 %98, 24
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %98, 32
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %98, 40
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119
  %121 = add i64 %98, 48
  %122 = inttoptr i64 %121 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %98, 56
  %125 = inttoptr i64 %124 to i64*
  %126 = load i64, i64* %125
  %127 = add i64 %98, 64
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  %130 = add i64 %98, 72
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131
  %133 = inttoptr i64 %99 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %3, align 8, !alias.scope !1704, !noalias !1707
  store i64 %98, i64* %15, align 8, !alias.scope !1704, !noalias !1707
  %135 = tail call i64 @__isoc99_fscanf(i64 %96, i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2174), i64 ptrtoint (%alpha_type* @alpha to i64), i64 %101, i64 %102, i64 %103, i64 %105, i64 %108, i64 %111, i64 %114, i64 %117, i64 %120, i64 %123, i64 %126, i64 %129, i64 %132), !noalias !1704
  %136 = load i64, i64* %16, align 8
  %137 = add i64 %136, -332
  %138 = trunc i64 %135 to i32
  %139 = load i64, i64* %3, align 8
  %140 = inttoptr i64 %137 to i32*
  store i32 %138, i32* %140
  %141 = add i64 %136, -105
  %142 = inttoptr i64 %141 to i8*
  store i8 85, i8* %142
  %143 = add i64 %136, -328
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %14, align 8, !tbaa !1240
  %146 = add i64 %139, 22
  %147 = load i64, i64* %15, align 8, !tbaa !1240
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %3, align 8, !alias.scope !1709, !noalias !1712
  store i64 %147, i64* %15, align 8, !alias.scope !1709, !noalias !1712
  %152 = tail call i64 @fclose(i64 %145), !noalias !1709
  %153 = load i64, i64* %16, align 8
  %154 = add i64 %153, -348
  %155 = trunc i64 %152 to i32
  %156 = load i64, i64* %3, align 8
  %157 = inttoptr i64 %154 to i32*
  store i32 %155, i32* %157
  %158 = add i64 %156, 88
  %159 = bitcast i64* %55 to double*
  br label %block_41ee76

block_41f3e5:                                     ; preds = %block_41f3db, %block_41f3ad
  %160 = phi i64 [ %429, %block_41f3ad ], [ %463, %block_41f3db ]
  %161 = phi %struct.Memory* [ %424, %block_41f3ad ], [ %462, %block_41f3db ]
  %162 = load double, double* bitcast (%time_type* @time to double*)
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %163 = load double, double* bitcast (%dtime_type* @dtime to double*)
  %164 = fadd double %162, %163
  store double %164, double* %71, align 1, !tbaa !1246
  store i64 0, i64* %55, align 1, !tbaa !1246
  store double %164, double* bitcast (%time_type* @time to double*)
  %165 = load i64, i64* %16, align 8
  %166 = add i64 %165, -60
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  store i8 0, i8* %48, align 1, !tbaa !1248
  %169 = and i32 %168, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #11
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %49, align 1, !tbaa !1261
  store i8 0, i8* %50, align 1, !tbaa !1262
  %174 = icmp eq i32 %168, 0
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %51, align 1, !tbaa !1263
  %176 = lshr i32 %168, 31
  %177 = trunc i32 %176 to i8
  store i8 %177, i8* %52, align 1, !tbaa !1264
  store i8 0, i8* %53, align 1, !tbaa !1265
  %178 = select i1 %174, i64 98, i64 37
  %179 = add i64 %160, %178
  br i1 %174, label %block_41f447, label %block_41f40a

block_41f7e2:                                     ; preds = %block_41f475.block_41f7e2_crit_edge, %block_41f7dd
  %180 = phi i32 [ %1529, %block_41f475.block_41f7e2_crit_edge ], [ %1100, %block_41f7dd ]
  %181 = phi i64 [ %1528, %block_41f475.block_41f7e2_crit_edge ], [ %1101, %block_41f7dd ]
  %182 = phi %struct.Memory* [ %1522, %block_41f475.block_41f7e2_crit_edge ], [ %1104, %block_41f7dd ]
  %183 = zext i32 %180 to i64
  %184 = and i64 %181, 4294967295
  %185 = xor i64 %183, %184
  store i64 %185, i64* %9, align 8, !tbaa !1240
  %186 = load i64, i64* %15, align 8
  %187 = add i64 %186, 520
  %188 = icmp ugt i64 %186, -521
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %48, align 1, !tbaa !1248
  %190 = trunc i64 %187 to i32
  %191 = and i32 %190, 255
  %192 = tail call i32 @llvm.ctpop.i32(i32 %191) #11
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  store i8 %195, i8* %49, align 1, !tbaa !1261
  %196 = xor i64 %187, %186
  %197 = lshr i64 %196, 4
  %198 = trunc i64 %197 to i8
  %199 = and i8 %198, 1
  store i8 %199, i8* %50, align 1, !tbaa !1262
  %200 = icmp eq i64 %187, 0
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %51, align 1, !tbaa !1263
  %202 = lshr i64 %187, 63
  %203 = trunc i64 %202 to i8
  store i8 %203, i8* %52, align 1, !tbaa !1264
  %204 = lshr i64 %186, 63
  %205 = xor i64 %202, %204
  %206 = add nuw nsw i64 %205, %202
  %207 = icmp eq i64 %206, 2
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %53, align 1, !tbaa !1265
  %209 = add i64 %186, 528
  %210 = inttoptr i64 %187 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %10, align 8, !tbaa !1240
  %212 = add i64 %186, 536
  %213 = inttoptr i64 %209 to i64*
  %214 = load i64, i64* %213
  store i64 %214, i64* %21, align 8, !tbaa !1240
  %215 = add i64 %186, 544
  %216 = inttoptr i64 %212 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %22, align 8, !tbaa !1240
  %218 = add i64 %186, 552
  %219 = inttoptr i64 %215 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %23, align 8, !tbaa !1240
  %221 = add i64 %186, 560
  %222 = inttoptr i64 %218 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %24, align 8, !tbaa !1240
  %224 = add i64 %186, 568
  %225 = inttoptr i64 %221 to i64*
  %226 = load i64, i64* %225
  store i64 %226, i64* %16, align 8, !tbaa !1240
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %3, align 8, !tbaa !1240
  %229 = add i64 %186, 576
  store i64 %229, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %182

block_41f7dd:                                     ; preds = %block_41f67d
  br label %block_41f7e2

block_41edcc:                                     ; preds = %block_41eda4, %block_41ede1
  %230 = phi i64 [ %923, %block_41eda4 ], [ %585, %block_41ede1 ]
  %231 = phi i64 [ %919, %block_41eda4 ], [ %586, %block_41ede1 ]
  %232 = phi %struct.Memory* [ %769, %block_41eda4 ], [ %232, %block_41ede1 ]
  %233 = add i64 %231, -328
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %230, 12
  %237 = load i64, i64* %15, align 8, !tbaa !1240
  %238 = add i64 %237, -8
  %239 = inttoptr i64 %238 to i64*
  store i64 %236, i64* %239
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %3, align 8, !alias.scope !1714, !noalias !1717
  store i64 %237, i64* %15, align 8, !alias.scope !1714, !noalias !1717
  %242 = tail call i64 @fgetc(i64 %235), !noalias !1714
  %243 = trunc i64 %242 to i32
  %244 = load i64, i64* %3, align 8
  %245 = add i32 %243, -10
  %246 = icmp ult i32 %243, 10
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %48, align 1, !tbaa !1248
  %248 = and i32 %245, 255
  %249 = tail call i32 @llvm.ctpop.i32(i32 %248) #11
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  store i8 %252, i8* %49, align 1, !tbaa !1261
  %253 = xor i32 %245, %243
  %254 = lshr i32 %253, 4
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  store i8 %256, i8* %50, align 1, !tbaa !1262
  %257 = icmp eq i32 %245, 0
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %51, align 1, !tbaa !1263
  %259 = lshr i32 %245, 31
  %260 = trunc i32 %259 to i8
  store i8 %260, i8* %52, align 1, !tbaa !1264
  %261 = lshr i32 %243, 31
  %262 = xor i32 %259, %261
  %263 = add nuw nsw i32 %262, %261
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %53, align 1, !tbaa !1265
  %266 = select i1 %257, i64 14, i64 9
  %267 = add i64 %244, %266
  br i1 %257, label %block_41ede6, label %block_41ede1

block_41f1b7:                                     ; preds = %block_41f1ad
  %268 = inttoptr i64 %1812 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  %271 = mul nsw i64 %270, 1000
  %272 = add i64 %271, ptrtoint (%trhs_type* @trhs to i64)
  %273 = inttoptr i64 %1390 to i32*
  %274 = load i32, i32* %273
  %275 = sext i32 %274 to i64
  %276 = mul nsw i64 %275, 200
  %277 = add i64 %276, %272
  %278 = inttoptr i64 %1391 to i32*
  %279 = load i32, i32* %278
  %280 = sext i32 %279 to i64
  %281 = mul nsw i64 %280, 40
  %282 = add i64 %281, %277
  %283 = sext i32 %2020 to i64
  %284 = shl nsw i64 %283, 3
  %285 = add i64 %284, %282
  %286 = inttoptr i64 %285 to double*
  %287 = load double, double* %286
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %288 = add i64 %271, ptrtoint (%ta2_type* @ta2 to i64)
  %289 = add i64 %276, %288
  %290 = add i64 %281, %289
  store i64 %283, i64* %12, align 8, !tbaa !1240
  %291 = add i64 %284, %290
  %292 = inttoptr i64 %291 to double*
  %293 = load double, double* %292
  %294 = fsub double %287, %293
  store double %294, double* %71, align 1, !tbaa !1246
  store i64 0, i64* %55, align 1, !tbaa !1246
  store i64 %283, i64* %11, align 8, !tbaa !1240
  %295 = inttoptr i64 %285 to double*
  store double %294, double* %295
  %296 = inttoptr i64 %1392 to i32*
  %297 = load i32, i32* %296
  %298 = add i32 %297, 1
  %299 = inttoptr i64 %1392 to i32*
  store i32 %298, i32* %299
  %300 = add i64 %2030, -10
  br label %block_41f1ad

block_41f1a6:                                     ; preds = %block_41f19c
  %301 = add i64 %323, 7
  %302 = inttoptr i64 %1392 to i32*
  store i32 0, i32* %302
  br label %block_41f1ad

block_41f3a3:                                     ; preds = %block_41f36d
  store i64 10, i64* %14, align 8, !tbaa !1240
  %303 = add i64 %403, -104995
  %304 = add i64 %403, 10
  %305 = load i64, i64* %15, align 8, !tbaa !1240
  %306 = add i64 %305, -8
  %307 = inttoptr i64 %306 to i64*
  store i64 %304, i64* %307
  store i64 %306, i64* %15, align 8, !tbaa !1240
  %308 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %303, %struct.Memory* %398)
  %309 = load i64, i64* %3, align 8
  br label %block_41f3ad

block_41f19c:                                     ; preds = %block_41f26c, %block_41f195
  %310 = phi i64 [ %464, %block_41f195 ], [ %1535, %block_41f26c ]
  %311 = phi %struct.Memory* [ %1962, %block_41f195 ], [ %2018, %block_41f26c ]
  %312 = inttoptr i64 %1391 to i32*
  %313 = load i32, i32* %312
  %314 = add i32 %313, -5
  %315 = lshr i32 %314, 31
  %316 = lshr i32 %313, 31
  %317 = xor i32 %315, %316
  %318 = add nuw nsw i32 %317, %316
  %319 = icmp eq i32 %318, 2
  %320 = icmp ne i32 %315, 0
  %321 = xor i1 %320, %319
  %322 = select i1 %321, i64 10, i64 227
  %323 = add i64 %310, %322
  br i1 %321, label %block_41f1a6, label %block_41f27f

block_41f184:                                     ; preds = %block_41f174
  %324 = add i64 %967, 7
  %325 = inttoptr i64 %1390 to i32*
  store i32 0, i32* %325
  br label %block_41f18b

block_41ef7b:                                     ; preds = %block_41ef5b
  %326 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %327 = icmp eq i32 %326, 0
  %328 = select i1 %327, i64 24, i64 14
  %329 = add i64 %646, %328
  br i1 %327, label %block_41ef93, label %block_41ef89

block_41ed62:                                     ; preds = %block_41ed48
  %330 = load i64, i64* %16, align 8
  %331 = add i64 %330, -328
  %332 = inttoptr i64 %331 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %875, 34
  %335 = load i64, i64* %15, align 8, !tbaa !1240
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %334, i64* %337
  %338 = load i64, i64* %11, align 8, !alias.scope !1719, !noalias !1722
  %339 = load i64, i64* %17, align 8, !alias.scope !1719, !noalias !1722
  %340 = load i64, i64* %18, align 8, !alias.scope !1719, !noalias !1722
  %341 = inttoptr i64 %335 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %335, 8
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %335, 16
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %335, 24
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %335, 32
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %335, 40
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %335, 48
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %335, 56
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %335, 64
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %335, 72
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = inttoptr i64 %336 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %3, align 8, !alias.scope !1719, !noalias !1722
  store i64 %335, i64* %15, align 8, !alias.scope !1719, !noalias !1722
  %372 = tail call i64 @__isoc99_fscanf(i64 %333, i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2171), i64 ptrtoint (%niter_type* @niter to i64), i64 %338, i64 %339, i64 %340, i64 %342, i64 %345, i64 %348, i64 %351, i64 %354, i64 %357, i64 %360, i64 %363, i64 %366, i64 %369), !noalias !1719
  %373 = load i64, i64* %16, align 8
  %374 = add i64 %373, -332
  %375 = trunc i64 %372 to i32
  %376 = load i64, i64* %3, align 8
  %377 = add i64 %376, 6
  %378 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %378
  br label %block_41ed8a

block_41f36d:                                     ; preds = %block_41f2dd
  store i64 ptrtoint (%rmor_type* @rmor to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%tmmor_type* @tmmor to i64), i64* %13, align 8, !tbaa !1240
  %379 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %12, align 8, !tbaa !1240
  %381 = add i64 %759, 1843
  %382 = add i64 %759, 32
  %383 = load i64, i64* %15, align 8, !tbaa !1240
  %384 = add i64 %383, -8
  %385 = inttoptr i64 %384 to i64*
  store i64 %382, i64* %385
  store i64 %384, i64* %15, align 8, !tbaa !1240
  %386 = tail call %struct.Memory* @sub_41faa0_col2(%struct.State* nonnull %0, i64 %381, %struct.Memory* %742)
  %387 = load i64, i64* %16, align 8
  %388 = add i64 %387, -112
  %389 = load i64, i64* %3, align 8
  %390 = inttoptr i64 %388 to i32*
  %391 = load i32, i32* %390
  %392 = zext i32 %391 to i64
  store i64 %392, i64* %14, align 8, !tbaa !1240
  %393 = add i64 %389, -97037
  %394 = add i64 %389, 8
  %395 = load i64, i64* %15, align 8, !tbaa !1240
  %396 = add i64 %395, -8
  %397 = inttoptr i64 %396 to i64*
  store i64 %394, i64* %397
  store i64 %396, i64* %15, align 8, !tbaa !1240
  %398 = tail call %struct.Memory* @sub_407880_diffusion(%struct.State* nonnull %0, i64 %393, %struct.Memory* %386)
  %399 = load i64, i64* %3, align 8
  %400 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %401 = icmp eq i32 %400, 0
  %402 = select i1 %401, i64 24, i64 14
  %403 = add i64 %399, %402
  br i1 %401, label %block_41f3ad, label %block_41f3a3

block_41ed5d:                                     ; preds = %block_41ed48
  %404 = add i64 %875, -21
  %405 = load i64, i64* %16, align 8
  br label %block_41ed48

block_41f35a:                                     ; preds = %block_41f2f4
  %406 = add i32 %579, 1
  %407 = inttoptr i64 %577 to i32*
  store i32 %406, i32* %407
  %408 = add i64 %576, -125
  br label %block_41f2dd

block_41f753:                                     ; preds = %block_41f687
  %409 = inttoptr i64 %1062 to i32*
  %410 = load i32, i32* %409
  %411 = add i32 %410, -7
  %412 = icmp eq i32 %411, 0
  %413 = select i1 %412, i64 10, i64 114
  %414 = add i64 %1072, %413
  br i1 %412, label %block_41f75d, label %block_41f7ca

block_41f3ad:                                     ; preds = %block_41f36d, %block_41f3a3
  %415 = phi i64 [ %403, %block_41f36d ], [ %309, %block_41f3a3 ]
  %416 = phi %struct.Memory* [ %398, %block_41f36d ], [ %308, %block_41f3a3 ]
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%t_type* @t to i64), i64* %13, align 8, !tbaa !1240
  %417 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %12, align 8, !tbaa !1240
  %419 = add i64 %415, 1939
  %420 = add i64 %415, 32
  %421 = load i64, i64* %15, align 8, !tbaa !1240
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423
  store i64 %422, i64* %15, align 8, !tbaa !1240
  %424 = tail call %struct.Memory* @sub_41fb40_add2(%struct.State* nonnull %0, i64 %419, %struct.Memory* %416)
  %425 = load i64, i64* %3, align 8
  %426 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %427 = icmp eq i32 %426, 0
  %428 = select i1 %427, i64 24, i64 14
  %429 = add i64 %425, %428
  br i1 %427, label %block_41f3e5, label %block_41f3db

block_41f347:                                     ; preds = %block_41f2fe, %block_41f321
  %430 = phi i64 [ %2147, %block_41f2fe ], [ %456, %block_41f321 ]
  %431 = phi %struct.Memory* [ %562, %block_41f2fe ], [ %455, %block_41f321 ]
  %432 = load i64, i64* %16, align 8
  %433 = add i64 %432, -68
  %434 = inttoptr i64 %433 to i32*
  %435 = load i32, i32* %434
  %436 = add i32 %435, 1
  %437 = inttoptr i64 %433 to i32*
  store i32 %436, i32* %437
  %438 = add i64 %430, -83
  br label %block_41f2f4

block_41f321:                                     ; preds = %block_41f2fe
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %439 = load i64, i64* %16, align 8
  %440 = add i64 %439, -64
  %441 = inttoptr i64 %440 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  %444 = mul nsw i64 %443, 1000
  store i64 %444, i64* %11, align 8, !tbaa !1240
  %445 = add i64 %444, ptrtoint (%trhs_type* @trhs to i64)
  %446 = add i64 %439, -68
  %447 = inttoptr i64 %446 to i32*
  %448 = load i32, i32* %447
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %13, align 8, !tbaa !1240
  store i64 %445, i64* %14, align 8, !tbaa !1240
  %450 = add i64 %2147, 3055
  %451 = add i64 %2147, 38
  %452 = load i64, i64* %15, align 8, !tbaa !1240
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %451, i64* %454
  store i64 %453, i64* %15, align 8, !tbaa !1240
  %455 = tail call %struct.Memory* @sub_41ff10_facev(%struct.State* nonnull %0, i64 %450, %struct.Memory* %562)
  %456 = load i64, i64* %3, align 8
  br label %block_41f347

block_41f3db:                                     ; preds = %block_41f3ad
  store i64 10, i64* %14, align 8, !tbaa !1240
  %457 = add i64 %429, -104971
  %458 = add i64 %429, 10
  %459 = load i64, i64* %15, align 8, !tbaa !1240
  %460 = add i64 %459, -8
  %461 = inttoptr i64 %460 to i64*
  store i64 %458, i64* %461
  store i64 %460, i64* %15, align 8, !tbaa !1240
  %462 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %457, %struct.Memory* %424)
  %463 = load i64, i64* %3, align 8
  br label %block_41f3e5

block_41f195:                                     ; preds = %block_41f18b
  %464 = add i64 %1974, 7
  %465 = inttoptr i64 %1391 to i32*
  store i32 0, i32* %465
  br label %block_41f19c

block_41ed09:                                     ; preds = %block_41ecc8
  %466 = add i64 %856, 17
  %467 = load i64, i64* %15, align 8, !tbaa !1240
  %468 = add i64 %467, -8
  %469 = inttoptr i64 %468 to i64*
  store i64 %466, i64* %469
  %470 = load i64, i64* %81, align 8, !alias.scope !1724, !noalias !1727
  %471 = load i64, i64* %12, align 8, !alias.scope !1724, !noalias !1727
  %472 = load i64, i64* %11, align 8, !alias.scope !1724, !noalias !1727
  %473 = load i64, i64* %17, align 8, !alias.scope !1724, !noalias !1727
  %474 = load i64, i64* %18, align 8, !alias.scope !1724, !noalias !1727
  %475 = inttoptr i64 %467 to i64*
  %476 = load i64, i64* %475
  %477 = add i64 %467, 8
  %478 = inttoptr i64 %477 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %467, 16
  %481 = inttoptr i64 %480 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %467, 24
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %467, 32
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %467, 40
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %467, 48
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %467, 56
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = add i64 %467, 64
  %499 = inttoptr i64 %498 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %467, 72
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = inttoptr i64 %468 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %3, align 8, !alias.scope !1724, !noalias !1727
  store i64 %467, i64* %15, align 8, !alias.scope !1724, !noalias !1727
  %506 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2132), i64 %470, i64 %471, i64 %472, i64 %473, i64 %474, i64 %476, i64 %479, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497, i64 %500, i64 %503), !noalias !1724
  %507 = load i64, i64* %3, align 8
  %508 = load i64, i64* %16, align 8
  %509 = add i64 %508, -328
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %508, -344
  %513 = trunc i64 %506 to i32
  %514 = inttoptr i64 %512 to i32*
  store i32 %513, i32* %514
  %515 = add i64 %507, 40
  %516 = load i64, i64* %15, align 8, !tbaa !1240
  %517 = add i64 %516, -8
  %518 = inttoptr i64 %517 to i64*
  store i64 %515, i64* %518
  %519 = load i64, i64* %11, align 8, !alias.scope !1729, !noalias !1732
  %520 = load i64, i64* %17, align 8, !alias.scope !1729, !noalias !1732
  %521 = load i64, i64* %18, align 8, !alias.scope !1729, !noalias !1732
  %522 = inttoptr i64 %516 to i64*
  %523 = load i64, i64* %522
  %524 = add i64 %516, 8
  %525 = inttoptr i64 %524 to i64*
  %526 = load i64, i64* %525
  %527 = add i64 %516, 16
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %516, 24
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  %533 = add i64 %516, 32
  %534 = inttoptr i64 %533 to i64*
  %535 = load i64, i64* %534
  %536 = add i64 %516, 40
  %537 = inttoptr i64 %536 to i64*
  %538 = load i64, i64* %537
  %539 = add i64 %516, 48
  %540 = inttoptr i64 %539 to i64*
  %541 = load i64, i64* %540
  %542 = add i64 %516, 56
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = add i64 %516, 64
  %546 = inttoptr i64 %545 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %516, 72
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = inttoptr i64 %517 to i64*
  %552 = load i64, i64* %551
  store i64 %552, i64* %3, align 8, !alias.scope !1729, !noalias !1732
  store i64 %516, i64* %15, align 8, !alias.scope !1729, !noalias !1732
  %553 = tail call i64 @__isoc99_fscanf(i64 %511, i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2171), i64 ptrtoint (%fre_type* @fre to i64), i64 %519, i64 %520, i64 %521, i64 %523, i64 %526, i64 %529, i64 %532, i64 %535, i64 %538, i64 %541, i64 %544, i64 %547, i64 %550), !noalias !1729
  %554 = load i64, i64* %16, align 8
  %555 = add i64 %554, -332
  %556 = trunc i64 %553 to i32
  %557 = load i64, i64* %3, align 8
  %558 = add i64 %557, 6
  %559 = inttoptr i64 %555 to i32*
  store i32 %556, i32* %559
  br label %block_41ed48

block_41f2f4:                                     ; preds = %block_41f2ed, %block_41f347
  %560 = phi i64 [ %583, %block_41f2ed ], [ %438, %block_41f347 ]
  %561 = phi i64 [ %741, %block_41f2ed ], [ %432, %block_41f347 ]
  %562 = phi %struct.Memory* [ %742, %block_41f2ed ], [ %431, %block_41f347 ]
  %563 = add i64 %561, -68
  %564 = inttoptr i64 %563 to i32*
  %565 = load i32, i32* %564
  %566 = add i32 %565, -6
  %567 = lshr i32 %566, 31
  %568 = trunc i32 %567 to i8
  %569 = lshr i32 %565, 31
  %570 = xor i32 %567, %569
  %571 = add nuw nsw i32 %570, %569
  %572 = icmp eq i32 %571, 2
  %573 = icmp ne i8 %568, 0
  %574 = xor i1 %573, %572
  %575 = select i1 %574, i64 10, i64 102
  %576 = add i64 %560, %575
  %577 = add i64 %561, -64
  %578 = inttoptr i64 %577 to i32*
  %579 = load i32, i32* %578
  br i1 %574, label %block_41f2fe, label %block_41f35a

block_41ed9f:                                     ; preds = %block_41ed8a
  %580 = add i64 %785, -21
  %581 = load i64, i64* %16, align 8
  br label %block_41ed8a

block_41f2ed:                                     ; preds = %block_41f2dd
  %582 = add i64 %741, -68
  %583 = add i64 %759, 7
  %584 = inttoptr i64 %582 to i32*
  store i32 0, i32* %584
  br label %block_41f2f4

block_41ede1:                                     ; preds = %block_41edcc
  %585 = add i64 %267, -21
  %586 = load i64, i64* %16, align 8
  br label %block_41edcc

block_41ef65:                                     ; preds = %block_41ef5b
  %587 = zext i32 %620 to i64
  store i64 %587, i64* %14, align 8, !tbaa !1240
  %588 = add i64 %646, -103941
  %589 = add i64 %646, 8
  %590 = load i64, i64* %15, align 8, !tbaa !1240
  %591 = add i64 %590, -8
  %592 = inttoptr i64 %591 to i64*
  store i64 %589, i64* %592
  store i64 %591, i64* %15, align 8, !tbaa !1240
  %593 = tail call %struct.Memory* @sub_405960_timer_clear(%struct.State* nonnull %0, i64 %588, %struct.Memory* %617)
  %594 = load i64, i64* %16, align 8
  %595 = add i64 %594, -72
  %596 = load i64, i64* %3, align 8
  %597 = inttoptr i64 %595 to i32*
  %598 = load i32, i32* %597
  %599 = add i32 %598, 1
  %600 = inttoptr i64 %595 to i32*
  store i32 %599, i32* %600
  %601 = add i64 %596, -18
  br label %block_41ef5b

block_41f0e9:                                     ; preds = %block_41f0c9, %block_41f0df
  %602 = phi i64 [ %1992, %block_41f0c9 ], [ %653, %block_41f0df ]
  %603 = phi %struct.Memory* [ %1987, %block_41f0c9 ], [ %652, %block_41f0df ]
  store i64 ptrtoint (%tmort_type* @tmort to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %13, align 8, !tbaa !1240
  %604 = add i64 %602, -22137
  %605 = add i64 %602, 25
  %606 = load i64, i64* %15, align 8, !tbaa !1240
  %607 = add i64 %606, -8
  %608 = inttoptr i64 %607 to i64*
  store i64 %605, i64* %608
  store i64 %607, i64* %15, align 8, !tbaa !1240
  %609 = tail call %struct.Memory* @sub_419a70_transf(%struct.State* nonnull %0, i64 %604, %struct.Memory* %603)
  %610 = load i64, i64* %16, align 8
  %611 = add i64 %610, -64
  %612 = load i64, i64* %3, align 8
  %613 = add i64 %612, 7
  %614 = inttoptr i64 %611 to i32*
  store i32 0, i32* %614
  br label %block_41f109

block_41ef5b:                                     ; preds = %block_41ee76, %block_41ef65
  %615 = phi i64 [ %1386, %block_41ee76 ], [ %601, %block_41ef65 ]
  %616 = phi i64 [ %1383, %block_41ee76 ], [ %594, %block_41ef65 ]
  %617 = phi %struct.Memory* [ %1382, %block_41ee76 ], [ %593, %block_41ef65 ]
  %618 = add i64 %616, -72
  %619 = inttoptr i64 %618 to i32*
  %620 = load i32, i32* %619
  %621 = add i32 %620, -10
  %622 = icmp ult i32 %620, 10
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %48, align 1, !tbaa !1248
  %624 = and i32 %621, 255
  %625 = tail call i32 @llvm.ctpop.i32(i32 %624) #11
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = xor i8 %627, 1
  store i8 %628, i8* %49, align 1, !tbaa !1261
  %629 = xor i32 %621, %620
  %630 = lshr i32 %629, 4
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  store i8 %632, i8* %50, align 1, !tbaa !1262
  %633 = icmp eq i32 %621, 0
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %51, align 1, !tbaa !1263
  %635 = lshr i32 %621, 31
  %636 = trunc i32 %635 to i8
  store i8 %636, i8* %52, align 1, !tbaa !1264
  %637 = lshr i32 %620, 31
  %638 = xor i32 %635, %637
  %639 = add nuw nsw i32 %638, %637
  %640 = icmp eq i32 %639, 2
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %53, align 1, !tbaa !1265
  %642 = icmp ne i8 %636, 0
  %643 = xor i1 %642, %640
  %644 = or i1 %633, %643
  %645 = select i1 %644, i64 10, i64 32
  %646 = add i64 %615, %645
  br i1 %644, label %block_41ef65, label %block_41ef7b

block_41f0df:                                     ; preds = %block_41f0c9
  store i64 9, i64* %14, align 8, !tbaa !1240
  %647 = add i64 %1992, -104287
  %648 = add i64 %1992, 10
  %649 = load i64, i64* %15, align 8, !tbaa !1240
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %648, i64* %651
  store i64 %650, i64* %15, align 8, !tbaa !1240
  %652 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %647, %struct.Memory* %1987)
  %653 = load i64, i64* %3, align 8
  br label %block_41f0e9

block_41f7ca.sink.split:                          ; preds = %block_41f75d, %block_41f6ee
  %654 = phi i64 [ add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2593), %block_41f75d ], [ add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2581), %block_41f6ee ]
  %655 = phi double [ %1873, %block_41f75d ], [ %1721, %block_41f6ee ]
  %656 = phi double [ %1881, %block_41f75d ], [ %1725, %block_41f6ee ]
  %657 = phi i64 [ %1878, %block_41f75d ], [ %1723, %block_41f6ee ]
  %658 = phi i64 [ 168, %block_41f75d ], [ 192, %block_41f6ee ]
  %659 = phi i64 [ 464, %block_41f75d ], [ 448, %block_41f6ee ]
  %660 = phi i64 [ 468, %block_41f75d ], [ 452, %block_41f6ee ]
  %661 = phi i64 [ 5, %block_41f75d ], [ 124, %block_41f6ee ]
  %662 = sub i64 %1061, %658
  %663 = inttoptr i64 %662 to double*
  %664 = load double, double* %663
  %665 = fsub double %656, %664
  %666 = add i64 %1061, -128
  %667 = inttoptr i64 %666 to double*
  store double %665, double* %667
  %668 = inttoptr i64 %666 to double*
  %669 = load double, double* %668
  %670 = fmul double %655, %669
  %671 = add i64 %1061, -96
  %672 = inttoptr i64 %671 to double*
  %673 = load double, double* %672
  %674 = fdiv double %670, %673
  %675 = sub i64 %1061, %659
  %676 = inttoptr i64 %675 to double*
  store double %674, double* %676
  %677 = bitcast double %669 to <2 x i32>
  %678 = extractelement <2 x i32> %677, i32 0
  store i32 %678, i32* %56, align 1, !tbaa !1266
  %679 = extractelement <2 x i32> %677, i32 1
  store i32 %679, i32* %58, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  store i32 0, i32* %61, align 1, !tbaa !1266
  %680 = inttoptr i64 %675 to double*
  %681 = load double, double* %680
  store double %681, double* %1126, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1128, align 1, !tbaa !1246
  %682 = add i64 %657, 54
  %683 = load i64, i64* %15, align 8, !tbaa !1240
  %684 = add i64 %683, -8
  %685 = inttoptr i64 %684 to i64*
  store i64 %682, i64* %685
  %686 = load i64, i64* %12, align 8, !alias.scope !1734, !noalias !1737
  %687 = load i64, i64* %11, align 8, !alias.scope !1734, !noalias !1737
  %688 = load i64, i64* %17, align 8, !alias.scope !1734, !noalias !1737
  %689 = load i64, i64* %18, align 8, !alias.scope !1734, !noalias !1737
  %690 = inttoptr i64 %683 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %683, 8
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %683, 16
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %683, 24
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %683, 32
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %683, 40
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %683, 48
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %683, 56
  %711 = inttoptr i64 %710 to i64*
  %712 = load i64, i64* %711
  %713 = add i64 %683, 64
  %714 = inttoptr i64 %713 to i64*
  %715 = load i64, i64* %714
  %716 = add i64 %683, 72
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = inttoptr i64 %684 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %3, align 8, !alias.scope !1734, !noalias !1737
  store i64 %683, i64* %15, align 8, !alias.scope !1734, !noalias !1737
  %721 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2550), i64 %654, i64 %686, i64 %687, i64 %688, i64 %689, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709, i64 %712, i64 %715, i64 %718), !noalias !1734
  %722 = load i64, i64* %16, align 8
  %723 = sub i64 %722, %660
  %724 = trunc i64 %721 to i32
  %725 = load i64, i64* %3, align 8
  %726 = add i64 %725, 6
  %727 = inttoptr i64 %723 to i32*
  store i32 %724, i32* %727
  br label %block_41f7ca

block_41f7ca:                                     ; preds = %block_41f7ca.sink.split, %block_41f753
  %728 = phi i64 [ %1061, %block_41f753 ], [ %722, %block_41f7ca.sink.split ]
  %729 = phi i64 [ %414, %block_41f753 ], [ %726, %block_41f7ca.sink.split ]
  %730 = phi i64 [ 5, %block_41f753 ], [ %661, %block_41f7ca.sink.split ]
  %731 = phi %struct.Memory* [ %1104, %block_41f753 ], [ %1104, %block_41f7ca.sink.split ]
  %732 = add i64 %729, %730
  %733 = add i64 %728, -72
  %734 = inttoptr i64 %733 to i32*
  %735 = load i32, i32* %734
  %736 = add i32 %735, 1
  %737 = zext i32 %736 to i64
  %738 = inttoptr i64 %733 to i32*
  store i32 %736, i32* %738
  %739 = add i64 %732, -333
  br label %block_41f67d

block_41f2dd:                                     ; preds = %block_41f2d6, %block_41f35a
  %740 = phi i64 [ %977, %block_41f2d6 ], [ %408, %block_41f35a ]
  %741 = phi i64 [ %975, %block_41f2d6 ], [ %561, %block_41f35a ]
  %742 = phi %struct.Memory* [ %974, %block_41f2d6 ], [ %562, %block_41f35a ]
  %743 = add i64 %741, -64
  %744 = inttoptr i64 %743 to i32*
  %745 = load i32, i32* %744
  %746 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %747 = sub i32 %745, %746
  %748 = lshr i32 %747, 31
  %749 = trunc i32 %748 to i8
  %750 = lshr i32 %745, 31
  %751 = lshr i32 %746, 31
  %752 = xor i32 %751, %750
  %753 = xor i32 %748, %750
  %754 = add nuw nsw i32 %753, %752
  %755 = icmp eq i32 %754, 2
  %756 = icmp ne i8 %749, 0
  %757 = xor i1 %756, %755
  %758 = select i1 %757, i64 16, i64 144
  %759 = add i64 %740, %758
  br i1 %757, label %block_41f2ed, label %block_41f36d

block_41f2cc:                                     ; preds = %block_41f2a5
  store i64 9, i64* %14, align 8, !tbaa !1240
  %760 = add i64 %1546, -104700
  %761 = add i64 %1546, 10
  %762 = load i64, i64* %15, align 8, !tbaa !1240
  %763 = add i64 %762, -8
  %764 = inttoptr i64 %763 to i64*
  store i64 %761, i64* %764
  store i64 %763, i64* %15, align 8, !tbaa !1240
  %765 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %760, %struct.Memory* %1541)
  %766 = load i64, i64* %3, align 8
  br label %block_41f2d6

block_41ed8a:                                     ; preds = %block_41ed9f, %block_41ed62
  %767 = phi i64 [ %377, %block_41ed62 ], [ %580, %block_41ed9f ]
  %768 = phi i64 [ %373, %block_41ed62 ], [ %581, %block_41ed9f ]
  %769 = phi %struct.Memory* [ %859, %block_41ed62 ], [ %769, %block_41ed9f ]
  %770 = add i64 %768, -328
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = add i64 %767, 12
  %774 = load i64, i64* %15, align 8, !tbaa !1240
  %775 = add i64 %774, -8
  %776 = inttoptr i64 %775 to i64*
  store i64 %773, i64* %776
  %777 = inttoptr i64 %775 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %3, align 8, !alias.scope !1739, !noalias !1742
  store i64 %774, i64* %15, align 8, !alias.scope !1739, !noalias !1742
  %779 = tail call i64 @fgetc(i64 %772), !noalias !1739
  %780 = trunc i64 %779 to i32
  %781 = load i64, i64* %3, align 8
  %782 = add i32 %780, -10
  %783 = icmp eq i32 %782, 0
  %784 = select i1 %783, i64 14, i64 9
  %785 = add i64 %781, %784
  br i1 %783, label %block_41eda4, label %block_41ed9f

block_41ecc8:                                     ; preds = %block_41ebf1, %block_41ecbd
  %786 = phi i64 [ %1530, %block_41ecbd ], [ %1720, %block_41ebf1 ]
  %787 = phi %struct.Memory* [ %2, %block_41ecbd ], [ %2, %block_41ebf1 ]
  %788 = add i64 %786, 17
  %789 = load i64, i64* %15, align 8, !tbaa !1240
  %790 = add i64 %789, -8
  %791 = inttoptr i64 %790 to i64*
  store i64 %788, i64* %791
  %792 = load i64, i64* %81, align 8, !alias.scope !1744, !noalias !1747
  %793 = load i64, i64* %12, align 8, !alias.scope !1744, !noalias !1747
  %794 = load i64, i64* %11, align 8, !alias.scope !1744, !noalias !1747
  %795 = load i64, i64* %17, align 8, !alias.scope !1744, !noalias !1747
  %796 = load i64, i64* %18, align 8, !alias.scope !1744, !noalias !1747
  %797 = inttoptr i64 %789 to i64*
  %798 = load i64, i64* %797
  %799 = add i64 %789, 8
  %800 = inttoptr i64 %799 to i64*
  %801 = load i64, i64* %800
  %802 = add i64 %789, 16
  %803 = inttoptr i64 %802 to i64*
  %804 = load i64, i64* %803
  %805 = add i64 %789, 24
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = add i64 %789, 32
  %809 = inttoptr i64 %808 to i64*
  %810 = load i64, i64* %809
  %811 = add i64 %789, 40
  %812 = inttoptr i64 %811 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %789, 48
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %789, 56
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %789, 64
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %789, 72
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = inttoptr i64 %790 to i64*
  %827 = load i64, i64* %826
  store i64 %827, i64* %3, align 8, !alias.scope !1744, !noalias !1747
  store i64 %789, i64* %15, align 8, !alias.scope !1744, !noalias !1747
  %828 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2060), i64 %792, i64 %793, i64 %794, i64 %795, i64 %796, i64 %798, i64 %801, i64 %804, i64 %807, i64 %810, i64 %813, i64 %816, i64 %819, i64 %822, i64 %825), !noalias !1744
  %829 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1987), i64* %13, align 8, !tbaa !1240
  %830 = load i64, i64* %16, align 8
  %831 = add i64 %830, -340
  %832 = trunc i64 %828 to i32
  %833 = inttoptr i64 %831 to i32*
  store i32 %832, i32* %833
  %834 = add i64 %829, 31
  %835 = load i64, i64* %15, align 8, !tbaa !1240
  %836 = add i64 %835, -8
  %837 = inttoptr i64 %836 to i64*
  store i64 %834, i64* %837
  %838 = inttoptr i64 %836 to i64*
  %839 = load i64, i64* %838
  store i64 %839, i64* %3, align 8, !alias.scope !1749, !noalias !1752
  store i64 %835, i64* %15, align 8, !alias.scope !1749, !noalias !1752
  %840 = tail call i64 @fopen(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2119), i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1987))
  %841 = load i64, i64* %16, align 8
  %842 = add i64 %841, -328
  %843 = load i64, i64* %3, align 8
  %844 = inttoptr i64 %842 to i64*
  store i64 %840, i64* %844
  store i8 0, i8* %48, align 1, !tbaa !1248
  %845 = trunc i64 %840 to i32
  %846 = and i32 %845, 255
  %847 = tail call i32 @llvm.ctpop.i32(i32 %846) #11
  %848 = trunc i32 %847 to i8
  %849 = and i8 %848, 1
  %850 = xor i8 %849, 1
  store i8 %850, i8* %49, align 1, !tbaa !1261
  store i8 0, i8* %50, align 1, !tbaa !1262
  %851 = icmp eq i64 %840, 0
  %852 = zext i1 %851 to i8
  store i8 %852, i8* %51, align 1, !tbaa !1263
  %853 = lshr i64 %840, 63
  %854 = trunc i64 %853 to i8
  store i8 %854, i8* %52, align 1, !tbaa !1264
  store i8 0, i8* %53, align 1, !tbaa !1265
  %855 = select i1 %851, i64 305, i64 17
  %856 = add i64 %843, %855
  br i1 %851, label %block_41ee29, label %block_41ed09

block_41ed48:                                     ; preds = %block_41ed09, %block_41ed5d
  %857 = phi i64 [ %558, %block_41ed09 ], [ %404, %block_41ed5d ]
  %858 = phi i64 [ %554, %block_41ed09 ], [ %405, %block_41ed5d ]
  %859 = phi %struct.Memory* [ %787, %block_41ed09 ], [ %859, %block_41ed5d ]
  %860 = add i64 %858, -328
  %861 = inttoptr i64 %860 to i64*
  %862 = load i64, i64* %861
  %863 = add i64 %857, 12
  %864 = load i64, i64* %15, align 8, !tbaa !1240
  %865 = add i64 %864, -8
  %866 = inttoptr i64 %865 to i64*
  store i64 %863, i64* %866
  %867 = inttoptr i64 %865 to i64*
  %868 = load i64, i64* %867
  store i64 %868, i64* %3, align 8, !alias.scope !1754, !noalias !1757
  store i64 %864, i64* %15, align 8, !alias.scope !1754, !noalias !1757
  %869 = tail call i64 @fgetc(i64 %862), !noalias !1754
  %870 = trunc i64 %869 to i32
  %871 = load i64, i64* %3, align 8
  %872 = add i32 %870, -10
  %873 = icmp eq i32 %872, 0
  %874 = select i1 %873, i64 14, i64 9
  %875 = add i64 %871, %874
  br i1 %873, label %block_41ed62, label %block_41ed5d

block_41eda4:                                     ; preds = %block_41ed8a
  %876 = load i64, i64* %16, align 8
  %877 = add i64 %876, -328
  %878 = inttoptr i64 %877 to i64*
  %879 = load i64, i64* %878
  %880 = add i64 %785, 34
  %881 = load i64, i64* %15, align 8, !tbaa !1240
  %882 = add i64 %881, -8
  %883 = inttoptr i64 %882 to i64*
  store i64 %880, i64* %883
  %884 = load i64, i64* %11, align 8, !alias.scope !1759, !noalias !1762
  %885 = load i64, i64* %17, align 8, !alias.scope !1759, !noalias !1762
  %886 = load i64, i64* %18, align 8, !alias.scope !1759, !noalias !1762
  %887 = inttoptr i64 %881 to i64*
  %888 = load i64, i64* %887
  %889 = add i64 %881, 8
  %890 = inttoptr i64 %889 to i64*
  %891 = load i64, i64* %890
  %892 = add i64 %881, 16
  %893 = inttoptr i64 %892 to i64*
  %894 = load i64, i64* %893
  %895 = add i64 %881, 24
  %896 = inttoptr i64 %895 to i64*
  %897 = load i64, i64* %896
  %898 = add i64 %881, 32
  %899 = inttoptr i64 %898 to i64*
  %900 = load i64, i64* %899
  %901 = add i64 %881, 40
  %902 = inttoptr i64 %901 to i64*
  %903 = load i64, i64* %902
  %904 = add i64 %881, 48
  %905 = inttoptr i64 %904 to i64*
  %906 = load i64, i64* %905
  %907 = add i64 %881, 56
  %908 = inttoptr i64 %907 to i64*
  %909 = load i64, i64* %908
  %910 = add i64 %881, 64
  %911 = inttoptr i64 %910 to i64*
  %912 = load i64, i64* %911
  %913 = add i64 %881, 72
  %914 = inttoptr i64 %913 to i64*
  %915 = load i64, i64* %914
  %916 = inttoptr i64 %882 to i64*
  %917 = load i64, i64* %916
  store i64 %917, i64* %3, align 8, !alias.scope !1759, !noalias !1762
  store i64 %881, i64* %15, align 8, !alias.scope !1759, !noalias !1762
  %918 = tail call i64 @__isoc99_fscanf(i64 %879, i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2171), i64 ptrtoint (%nmxh_type* @nmxh to i64), i64 %884, i64 %885, i64 %886, i64 %888, i64 %891, i64 %894, i64 %897, i64 %900, i64 %903, i64 %906, i64 %909, i64 %912, i64 %915), !noalias !1759
  %919 = load i64, i64* %16, align 8
  %920 = add i64 %919, -332
  %921 = trunc i64 %918 to i32
  %922 = load i64, i64* %3, align 8
  %923 = add i64 %922, 6
  %924 = inttoptr i64 %920 to i32*
  store i32 %921, i32* %924
  br label %block_41edcc

block_41ef89:                                     ; preds = %block_41ef7b
  store i64 2, i64* %14, align 8, !tbaa !1240
  %925 = add i64 %329, -103945
  %926 = add i64 %329, 10
  %927 = load i64, i64* %15, align 8, !tbaa !1240
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  store i64 %926, i64* %929
  store i64 %928, i64* %15, align 8, !tbaa !1240
  %930 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %925, %struct.Memory* %617)
  %931 = load i64, i64* %3, align 8
  br label %block_41ef93

block_41f0ac:                                     ; preds = %block_41f09a, %block_41f0a4
  %932 = phi i64 [ %980, %block_41f09a ], [ %949, %block_41f0a4 ]
  %933 = phi i64 [ %1094, %block_41f09a ], [ %948, %block_41f0a4 ]
  %934 = phi %struct.Memory* [ %981, %block_41f09a ], [ %947, %block_41f0a4 ]
  %935 = add i64 %932, -72
  %936 = inttoptr i64 %935 to i32*
  %937 = load i32, i32* %936
  %938 = add i32 %937, 1
  %939 = inttoptr i64 %935 to i32*
  store i32 %938, i32* %939
  %940 = add i64 %933, -28
  br label %block_41f090

block_41f0a4:                                     ; preds = %block_41f09a
  %941 = zext i32 %984 to i64
  store i64 %941, i64* %14, align 8, !tbaa !1240
  %942 = add i64 %1094, -104260
  %943 = add i64 %1094, 8
  %944 = load i64, i64* %15, align 8, !tbaa !1240
  %945 = add i64 %944, -8
  %946 = inttoptr i64 %945 to i64*
  store i64 %943, i64* %946
  store i64 %945, i64* %15, align 8, !tbaa !1240
  %947 = tail call %struct.Memory* @sub_405960_timer_clear(%struct.State* nonnull %0, i64 %942, %struct.Memory* %981)
  %948 = load i64, i64* %3, align 8
  %949 = load i64, i64* %16, align 8
  br label %block_41f0ac

block_41f174:                                     ; preds = %block_41f16d, %block_41f292
  %950 = phi i64 [ %1388, %block_41f16d ], [ %972, %block_41f292 ]
  %951 = phi %struct.Memory* [ %1811, %block_41f16d ], [ %1962, %block_41f292 ]
  %952 = inttoptr i64 %1812 to i32*
  %953 = load i32, i32* %952
  %954 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %955 = sub i32 %953, %954
  %956 = lshr i32 %955, 31
  %957 = trunc i32 %956 to i8
  %958 = lshr i32 %953, 31
  %959 = lshr i32 %954, 31
  %960 = xor i32 %959, %958
  %961 = xor i32 %956, %958
  %962 = add nuw nsw i32 %961, %960
  %963 = icmp eq i32 %962, 2
  %964 = icmp ne i8 %957, 0
  %965 = xor i1 %964, %963
  %966 = select i1 %965, i64 16, i64 305
  %967 = add i64 %950, %966
  br i1 %965, label %block_41f184, label %block_41f2a5

block_41f292:                                     ; preds = %block_41f18b
  %968 = inttoptr i64 %1812 to i32*
  %969 = load i32, i32* %968
  %970 = add i32 %969, 1
  %971 = inttoptr i64 %1812 to i32*
  store i32 %970, i32* %971
  %972 = add i64 %1974, -286
  br label %block_41f174

block_41f2d6:                                     ; preds = %block_41f2a5, %block_41f2cc
  %973 = phi i64 [ %1546, %block_41f2a5 ], [ %766, %block_41f2cc ]
  %974 = phi %struct.Memory* [ %1541, %block_41f2a5 ], [ %765, %block_41f2cc ]
  %975 = load i64, i64* %16, align 8
  %976 = add i64 %975, -64
  %977 = add i64 %973, 7
  %978 = inttoptr i64 %976 to i32*
  store i32 0, i32* %978
  br label %block_41f2dd

block_41f090:                                     ; preds = %block_41f05f, %block_41f0ac
  %979 = phi i64 [ %1561, %block_41f05f ], [ %940, %block_41f0ac ]
  %980 = phi i64 [ %1557, %block_41f05f ], [ %932, %block_41f0ac ]
  %981 = phi %struct.Memory* [ %1554, %block_41f05f ], [ %934, %block_41f0ac ]
  %982 = add i64 %980, -72
  %983 = inttoptr i64 %982 to i32*
  %984 = load i32, i32* %983
  %985 = add i32 %984, -10
  %986 = icmp eq i32 %985, 0
  %987 = lshr i32 %985, 31
  %988 = trunc i32 %987 to i8
  %989 = lshr i32 %984, 31
  %990 = xor i32 %987, %989
  %991 = add nuw nsw i32 %990, %989
  %992 = icmp eq i32 %991, 2
  %993 = icmp ne i8 %988, 0
  %994 = xor i1 %993, %992
  %995 = or i1 %986, %994
  %996 = select i1 %995, i64 10, i64 47
  %997 = add i64 %979, %996
  br i1 %995, label %block_41f09a, label %block_41f0bf

block_41f687:                                     ; preds = %block_41f67d
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2524), i64* %14, align 8, !tbaa !1240
  %998 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1968) to double*)
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %999 = sext i32 %1107 to i64
  %1000 = shl nsw i64 %999, 3
  %1001 = add i64 %1103, -320
  %1002 = add i64 %1001, %1000
  %1003 = inttoptr i64 %1002 to i64*
  %1004 = load i64, i64* %1003
  store i64 %1004, i64* %13, align 8, !tbaa !1240
  %1005 = add i64 %1103, -224
  %1006 = add i64 %1005, %1000
  %1007 = inttoptr i64 %1006 to double*
  %1008 = load double, double* %1007
  %1009 = fmul double %998, %1008
  %1010 = add i64 %1103, -96
  %1011 = inttoptr i64 %1010 to double*
  %1012 = load double, double* %1011
  %1013 = fdiv double %1009, %1012
  %1014 = add i64 %1103, -432
  %1015 = inttoptr i64 %1014 to double*
  store double %1013, double* %1015
  %1016 = bitcast double %1008 to <2 x i32>
  %1017 = extractelement <2 x i32> %1016, i32 0
  store i32 %1017, i32* %56, align 1, !tbaa !1266
  %1018 = extractelement <2 x i32> %1016, i32 1
  store i32 %1018, i32* %58, align 1, !tbaa !1266
  store i32 0, i32* %59, align 1, !tbaa !1266
  store i32 0, i32* %61, align 1, !tbaa !1266
  %1019 = inttoptr i64 %1014 to double*
  %1020 = load double, double* %1019
  store double %1020, double* %1126, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1128, align 1, !tbaa !1246
  %1021 = add i64 %1120, 87
  %1022 = load i64, i64* %15, align 8, !tbaa !1240
  %1023 = add i64 %1022, -8
  %1024 = inttoptr i64 %1023 to i64*
  store i64 %1021, i64* %1024
  %1025 = load i64, i64* %12, align 8, !alias.scope !1764, !noalias !1767
  %1026 = load i64, i64* %11, align 8, !alias.scope !1764, !noalias !1767
  %1027 = load i64, i64* %17, align 8, !alias.scope !1764, !noalias !1767
  %1028 = load i64, i64* %18, align 8, !alias.scope !1764, !noalias !1767
  %1029 = inttoptr i64 %1022 to i64*
  %1030 = load i64, i64* %1029
  %1031 = add i64 %1022, 8
  %1032 = inttoptr i64 %1031 to i64*
  %1033 = load i64, i64* %1032
  %1034 = add i64 %1022, 16
  %1035 = inttoptr i64 %1034 to i64*
  %1036 = load i64, i64* %1035
  %1037 = add i64 %1022, 24
  %1038 = inttoptr i64 %1037 to i64*
  %1039 = load i64, i64* %1038
  %1040 = add i64 %1022, 32
  %1041 = inttoptr i64 %1040 to i64*
  %1042 = load i64, i64* %1041
  %1043 = add i64 %1022, 40
  %1044 = inttoptr i64 %1043 to i64*
  %1045 = load i64, i64* %1044
  %1046 = add i64 %1022, 48
  %1047 = inttoptr i64 %1046 to i64*
  %1048 = load i64, i64* %1047
  %1049 = add i64 %1022, 56
  %1050 = inttoptr i64 %1049 to i64*
  %1051 = load i64, i64* %1050
  %1052 = add i64 %1022, 64
  %1053 = inttoptr i64 %1052 to i64*
  %1054 = load i64, i64* %1053
  %1055 = add i64 %1022, 72
  %1056 = inttoptr i64 %1055 to i64*
  %1057 = load i64, i64* %1056
  %1058 = inttoptr i64 %1023 to i64*
  %1059 = load i64, i64* %1058
  store i64 %1059, i64* %3, align 8, !alias.scope !1764, !noalias !1767
  store i64 %1022, i64* %15, align 8, !alias.scope !1764, !noalias !1767
  %1060 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2524), i64 %1004, i64 %1025, i64 %1026, i64 %1027, i64 %1028, i64 %1030, i64 %1033, i64 %1036, i64 %1039, i64 %1042, i64 %1045, i64 %1048, i64 %1051, i64 %1054, i64 %1057), !noalias !1764
  %1061 = load i64, i64* %16, align 8
  %1062 = add i64 %1061, -72
  %1063 = load i64, i64* %3, align 8
  %1064 = inttoptr i64 %1062 to i32*
  %1065 = load i32, i32* %1064
  %1066 = add i32 %1065, -4
  %1067 = icmp eq i32 %1066, 0
  %1068 = add i64 %1061, -436
  %1069 = trunc i64 %1060 to i32
  %1070 = inttoptr i64 %1068 to i32*
  store i32 %1069, i32* %1070
  %1071 = select i1 %1067, i64 16, i64 117
  %1072 = add i64 %1063, %1071
  br i1 %1067, label %block_41f6ee, label %block_41f753

block_41f09a:                                     ; preds = %block_41f090
  %1073 = add i32 %984, -2
  %1074 = icmp ult i32 %984, 2
  %1075 = zext i1 %1074 to i8
  store i8 %1075, i8* %48, align 1, !tbaa !1248
  %1076 = and i32 %1073, 255
  %1077 = tail call i32 @llvm.ctpop.i32(i32 %1076) #11
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  %1080 = xor i8 %1079, 1
  store i8 %1080, i8* %49, align 1, !tbaa !1261
  %1081 = xor i32 %1073, %984
  %1082 = lshr i32 %1081, 4
  %1083 = trunc i32 %1082 to i8
  %1084 = and i8 %1083, 1
  store i8 %1084, i8* %50, align 1, !tbaa !1262
  %1085 = icmp eq i32 %1073, 0
  %1086 = zext i1 %1085 to i8
  store i8 %1086, i8* %51, align 1, !tbaa !1263
  %1087 = lshr i32 %1073, 31
  %1088 = trunc i32 %1087 to i8
  store i8 %1088, i8* %52, align 1, !tbaa !1264
  %1089 = xor i32 %1087, %989
  %1090 = add nuw nsw i32 %1089, %989
  %1091 = icmp eq i32 %1090, 2
  %1092 = zext i1 %1091 to i8
  store i8 %1092, i8* %53, align 1, !tbaa !1265
  %1093 = select i1 %1085, i64 18, i64 10
  %1094 = add i64 %997, %1093
  br i1 %1085, label %block_41f0ac, label %block_41f0a4

block_41f27f:                                     ; preds = %block_41f19c
  %1095 = inttoptr i64 %1390 to i32*
  %1096 = load i32, i32* %1095
  %1097 = add i32 %1096, 1
  %1098 = inttoptr i64 %1390 to i32*
  store i32 %1097, i32* %1098
  %1099 = add i64 %323, -244
  br label %block_41f18b

block_41f67d:                                     ; preds = %block_41f65f, %block_41f7ca
  %1100 = phi i32 [ %1806, %block_41f65f ], [ %736, %block_41f7ca ]
  %1101 = phi i64 [ %1800, %block_41f65f ], [ %737, %block_41f7ca ]
  %1102 = phi i64 [ %1807, %block_41f65f ], [ %739, %block_41f7ca ]
  %1103 = phi i64 [ %1801, %block_41f65f ], [ %728, %block_41f7ca ]
  %1104 = phi %struct.Memory* [ %1759, %block_41f65f ], [ %731, %block_41f7ca ]
  %1105 = add i64 %1103, -72
  %1106 = inttoptr i64 %1105 to i32*
  %1107 = load i32, i32* %1106
  %1108 = add i32 %1107, -10
  %1109 = icmp eq i32 %1108, 0
  %1110 = lshr i32 %1108, 31
  %1111 = trunc i32 %1110 to i8
  %1112 = lshr i32 %1107, 31
  %1113 = xor i32 %1110, %1112
  %1114 = add nuw nsw i32 %1113, %1112
  %1115 = icmp eq i32 %1114, 2
  %1116 = icmp ne i8 %1111, 0
  %1117 = xor i1 %1116, %1115
  %1118 = or i1 %1109, %1117
  %1119 = select i1 %1118, i64 10, i64 352
  %1120 = add i64 %1102, %1119
  br i1 %1118, label %block_41f687, label %block_41f7dd

block_41ee76:                                     ; preds = %block_41ee29, %block_41ede6
  %1121 = phi double* [ %1925, %block_41ee29 ], [ %159, %block_41ede6 ]
  %1122 = phi i64 [ %1931, %block_41ee29 ], [ %158, %block_41ede6 ]
  %1123 = phi %struct.Memory* [ %787, %block_41ee29 ], [ %232, %block_41ede6 ]
  %1124 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %1124, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1125 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 936) to double*)
  %1126 = bitcast %union.VectorReg* %26 to double*
  store double %1125, double* %1126, align 1, !tbaa !1246
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %1128 = bitcast i64* %1127 to double*
  store double 0.000000e+00, double* %1128, align 1, !tbaa !1246
  %1129 = add i64 %1122, 21
  %1130 = load i64, i64* %15, align 8, !tbaa !1240
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1129, i64* %1132
  %1133 = load i64, i64* %82, align 8, !alias.scope !1769, !noalias !1772
  %1134 = load i64, i64* %81, align 8, !alias.scope !1769, !noalias !1772
  %1135 = inttoptr i64 %1131 to i64*
  %1136 = load i64, i64* %1135
  store i64 %1136, i64* %3, align 8, !alias.scope !1769, !noalias !1772
  store i64 %1130, i64* %15, align 8, !alias.scope !1769, !noalias !1772
  %1137 = tail call i64 @pow(i64 %1133, i64 %1134), !noalias !1769
  %1138 = load i64, i64* %3, align 8
  %1139 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1952) to double*)
  %1140 = load double, double* %71, align 1
  store double %1140, double* bitcast (%dlmin_type* @dlmin to double*)
  %1141 = load double, double* bitcast (%dlmin_type* @dlmin to double*)
  %1142 = fmul double %1139, %1141
  store double %1142, double* %1126, align 1, !tbaa !1246
  store i64 0, i64* %1127, align 1, !tbaa !1246
  store double %1142, double* bitcast (%dtime_type* @dtime to double*)
  %1143 = add i64 %1138, 57
  %1144 = load i64, i64* %15, align 8, !tbaa !1240
  %1145 = add i64 %1144, -8
  %1146 = inttoptr i64 %1145 to i64*
  store i64 %1143, i64* %1146
  %1147 = load i64, i64* %12, align 8, !alias.scope !1774, !noalias !1777
  %1148 = load i64, i64* %11, align 8, !alias.scope !1774, !noalias !1777
  %1149 = load i64, i64* %17, align 8, !alias.scope !1774, !noalias !1777
  %1150 = load i64, i64* %18, align 8, !alias.scope !1774, !noalias !1777
  %1151 = inttoptr i64 %1144 to i64*
  %1152 = load i64, i64* %1151
  %1153 = add i64 %1144, 8
  %1154 = inttoptr i64 %1153 to i64*
  %1155 = load i64, i64* %1154
  %1156 = add i64 %1144, 16
  %1157 = inttoptr i64 %1156 to i64*
  %1158 = load i64, i64* %1157
  %1159 = add i64 %1144, 24
  %1160 = inttoptr i64 %1159 to i64*
  %1161 = load i64, i64* %1160
  %1162 = add i64 %1144, 32
  %1163 = inttoptr i64 %1162 to i64*
  %1164 = load i64, i64* %1163
  %1165 = add i64 %1144, 40
  %1166 = inttoptr i64 %1165 to i64*
  %1167 = load i64, i64* %1166
  %1168 = add i64 %1144, 48
  %1169 = inttoptr i64 %1168 to i64*
  %1170 = load i64, i64* %1169
  %1171 = add i64 %1144, 56
  %1172 = inttoptr i64 %1171 to i64*
  %1173 = load i64, i64* %1172
  %1174 = add i64 %1144, 64
  %1175 = inttoptr i64 %1174 to i64*
  %1176 = load i64, i64* %1175
  %1177 = add i64 %1144, 72
  %1178 = inttoptr i64 %1177 to i64*
  %1179 = load i64, i64* %1178
  %1180 = inttoptr i64 %1145 to i64*
  %1181 = load i64, i64* %1180
  store i64 %1181, i64* %3, align 8, !alias.scope !1774, !noalias !1777
  store i64 %1144, i64* %15, align 8, !alias.scope !1774, !noalias !1777
  %1182 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2232), i64 4, i64 %1147, i64 %1148, i64 %1149, i64 %1150, i64 %1152, i64 %1155, i64 %1158, i64 %1161, i64 %1164, i64 %1167, i64 %1170, i64 %1173, i64 %1176, i64 %1179), !noalias !1774
  %1183 = load i64, i64* %3, align 8
  %1184 = load i32, i32* bitcast (%fre_type* @fre to i32*)
  %1185 = zext i32 %1184 to i64
  %1186 = load i64, i64* %16, align 8
  %1187 = add i64 %1186, -356
  %1188 = trunc i64 %1182 to i32
  %1189 = inttoptr i64 %1187 to i32*
  store i32 %1188, i32* %1189
  %1190 = add i64 %1183, 30
  %1191 = load i64, i64* %15, align 8, !tbaa !1240
  %1192 = add i64 %1191, -8
  %1193 = inttoptr i64 %1192 to i64*
  store i64 %1190, i64* %1193
  %1194 = load i64, i64* %12, align 8, !alias.scope !1779, !noalias !1782
  %1195 = load i64, i64* %11, align 8, !alias.scope !1779, !noalias !1782
  %1196 = load i64, i64* %17, align 8, !alias.scope !1779, !noalias !1782
  %1197 = load i64, i64* %18, align 8, !alias.scope !1779, !noalias !1782
  %1198 = inttoptr i64 %1191 to i64*
  %1199 = load i64, i64* %1198
  %1200 = add i64 %1191, 8
  %1201 = inttoptr i64 %1200 to i64*
  %1202 = load i64, i64* %1201
  %1203 = add i64 %1191, 16
  %1204 = inttoptr i64 %1203 to i64*
  %1205 = load i64, i64* %1204
  %1206 = add i64 %1191, 24
  %1207 = inttoptr i64 %1206 to i64*
  %1208 = load i64, i64* %1207
  %1209 = add i64 %1191, 32
  %1210 = inttoptr i64 %1209 to i64*
  %1211 = load i64, i64* %1210
  %1212 = add i64 %1191, 40
  %1213 = inttoptr i64 %1212 to i64*
  %1214 = load i64, i64* %1213
  %1215 = add i64 %1191, 48
  %1216 = inttoptr i64 %1215 to i64*
  %1217 = load i64, i64* %1216
  %1218 = add i64 %1191, 56
  %1219 = inttoptr i64 %1218 to i64*
  %1220 = load i64, i64* %1219
  %1221 = add i64 %1191, 64
  %1222 = inttoptr i64 %1221 to i64*
  %1223 = load i64, i64* %1222
  %1224 = add i64 %1191, 72
  %1225 = inttoptr i64 %1224 to i64*
  %1226 = load i64, i64* %1225
  %1227 = inttoptr i64 %1192 to i64*
  %1228 = load i64, i64* %1227
  store i64 %1228, i64* %3, align 8, !alias.scope !1779, !noalias !1782
  store i64 %1191, i64* %15, align 8, !alias.scope !1779, !noalias !1782
  %1229 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2260), i64 %1185, i64 %1194, i64 %1195, i64 %1196, i64 %1197, i64 %1199, i64 %1202, i64 %1205, i64 %1208, i64 %1211, i64 %1214, i64 %1217, i64 %1220, i64 %1223, i64 %1226), !noalias !1779
  %1230 = load i64, i64* %3, align 8
  %1231 = load i32, i32* bitcast (%niter_type* @niter to i32*)
  %1232 = zext i32 %1231 to i64
  %1233 = load double, double* bitcast (%dtime_type* @dtime to double*)
  store double %1233, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1234 = load i64, i64* %16, align 8
  %1235 = add i64 %1234, -360
  %1236 = trunc i64 %1229 to i32
  %1237 = inttoptr i64 %1235 to i32*
  store i32 %1236, i32* %1237
  %1238 = add i64 %1230, 39
  %1239 = load i64, i64* %15, align 8, !tbaa !1240
  %1240 = add i64 %1239, -8
  %1241 = inttoptr i64 %1240 to i64*
  store i64 %1238, i64* %1241
  %1242 = load i64, i64* %12, align 8, !alias.scope !1784, !noalias !1787
  %1243 = load i64, i64* %11, align 8, !alias.scope !1784, !noalias !1787
  %1244 = load i64, i64* %17, align 8, !alias.scope !1784, !noalias !1787
  %1245 = load i64, i64* %18, align 8, !alias.scope !1784, !noalias !1787
  %1246 = inttoptr i64 %1239 to i64*
  %1247 = load i64, i64* %1246
  %1248 = add i64 %1239, 8
  %1249 = inttoptr i64 %1248 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1239, 16
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1239, 24
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1239, 32
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1239, 40
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1239, 48
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1239, 56
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1239, 64
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1239, 72
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = inttoptr i64 %1240 to i64*
  %1276 = load i64, i64* %1275
  store i64 %1276, i64* %3, align 8, !alias.scope !1784, !noalias !1787
  store i64 %1239, i64* %15, align 8, !alias.scope !1784, !noalias !1787
  %1277 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2288), i64 %1232, i64 %1242, i64 %1243, i64 %1244, i64 %1245, i64 %1247, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265, i64 %1268, i64 %1271, i64 %1274), !noalias !1784
  %1278 = load i64, i64* %3, align 8
  %1279 = load i32, i32* bitcast (%nmxh_type* @nmxh to i32*)
  %1280 = zext i32 %1279 to i64
  store i64 %1280, i64* %13, align 8, !tbaa !1240
  %1281 = load i64, i64* %16, align 8
  %1282 = add i64 %1281, -364
  %1283 = trunc i64 %1277 to i32
  %1284 = inttoptr i64 %1282 to i32*
  store i32 %1283, i32* %1284
  %1285 = add i64 %1278, 30
  %1286 = load i64, i64* %15, align 8, !tbaa !1240
  %1287 = add i64 %1286, -8
  %1288 = inttoptr i64 %1287 to i64*
  store i64 %1285, i64* %1288
  %1289 = load i64, i64* %12, align 8, !alias.scope !1789, !noalias !1792
  %1290 = load i64, i64* %11, align 8, !alias.scope !1789, !noalias !1792
  %1291 = load i64, i64* %17, align 8, !alias.scope !1789, !noalias !1792
  %1292 = load i64, i64* %18, align 8, !alias.scope !1789, !noalias !1792
  %1293 = inttoptr i64 %1286 to i64*
  %1294 = load i64, i64* %1293
  %1295 = add i64 %1286, 8
  %1296 = inttoptr i64 %1295 to i64*
  %1297 = load i64, i64* %1296
  %1298 = add i64 %1286, 16
  %1299 = inttoptr i64 %1298 to i64*
  %1300 = load i64, i64* %1299
  %1301 = add i64 %1286, 24
  %1302 = inttoptr i64 %1301 to i64*
  %1303 = load i64, i64* %1302
  %1304 = add i64 %1286, 32
  %1305 = inttoptr i64 %1304 to i64*
  %1306 = load i64, i64* %1305
  %1307 = add i64 %1286, 40
  %1308 = inttoptr i64 %1307 to i64*
  %1309 = load i64, i64* %1308
  %1310 = add i64 %1286, 48
  %1311 = inttoptr i64 %1310 to i64*
  %1312 = load i64, i64* %1311
  %1313 = add i64 %1286, 56
  %1314 = inttoptr i64 %1313 to i64*
  %1315 = load i64, i64* %1314
  %1316 = add i64 %1286, 64
  %1317 = inttoptr i64 %1316 to i64*
  %1318 = load i64, i64* %1317
  %1319 = add i64 %1286, 72
  %1320 = inttoptr i64 %1319 to i64*
  %1321 = load i64, i64* %1320
  %1322 = inttoptr i64 %1287 to i64*
  %1323 = load i64, i64* %1322
  store i64 %1323, i64* %3, align 8, !alias.scope !1789, !noalias !1792
  store i64 %1286, i64* %15, align 8, !alias.scope !1789, !noalias !1792
  %1324 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2330), i64 %1280, i64 %1289, i64 %1290, i64 %1291, i64 %1292, i64 %1294, i64 %1297, i64 %1300, i64 %1303, i64 %1306, i64 %1309, i64 %1312, i64 %1315, i64 %1318, i64 %1321), !noalias !1789
  %1325 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2358), i64* %14, align 8, !tbaa !1240
  %1326 = load double, double* bitcast (%alpha_type* @alpha to double*)
  store double %1326, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1327 = load i64, i64* %16, align 8
  %1328 = add i64 %1327, -368
  %1329 = trunc i64 %1324 to i32
  %1330 = inttoptr i64 %1328 to i32*
  store i32 %1329, i32* %1330
  %1331 = add i64 %1325, 32
  %1332 = load i64, i64* %15, align 8, !tbaa !1240
  %1333 = add i64 %1332, -8
  %1334 = inttoptr i64 %1333 to i64*
  store i64 %1331, i64* %1334
  %1335 = load i64, i64* %81, align 8, !alias.scope !1794, !noalias !1797
  %1336 = load i64, i64* %12, align 8, !alias.scope !1794, !noalias !1797
  %1337 = load i64, i64* %11, align 8, !alias.scope !1794, !noalias !1797
  %1338 = load i64, i64* %17, align 8, !alias.scope !1794, !noalias !1797
  %1339 = load i64, i64* %18, align 8, !alias.scope !1794, !noalias !1797
  %1340 = inttoptr i64 %1332 to i64*
  %1341 = load i64, i64* %1340
  %1342 = add i64 %1332, 8
  %1343 = inttoptr i64 %1342 to i64*
  %1344 = load i64, i64* %1343
  %1345 = add i64 %1332, 16
  %1346 = inttoptr i64 %1345 to i64*
  %1347 = load i64, i64* %1346
  %1348 = add i64 %1332, 24
  %1349 = inttoptr i64 %1348 to i64*
  %1350 = load i64, i64* %1349
  %1351 = add i64 %1332, 32
  %1352 = inttoptr i64 %1351 to i64*
  %1353 = load i64, i64* %1352
  %1354 = add i64 %1332, 40
  %1355 = inttoptr i64 %1354 to i64*
  %1356 = load i64, i64* %1355
  %1357 = add i64 %1332, 48
  %1358 = inttoptr i64 %1357 to i64*
  %1359 = load i64, i64* %1358
  %1360 = add i64 %1332, 56
  %1361 = inttoptr i64 %1360 to i64*
  %1362 = load i64, i64* %1361
  %1363 = add i64 %1332, 64
  %1364 = inttoptr i64 %1363 to i64*
  %1365 = load i64, i64* %1364
  %1366 = add i64 %1332, 72
  %1367 = inttoptr i64 %1366 to i64*
  %1368 = load i64, i64* %1367
  %1369 = inttoptr i64 %1333 to i64*
  %1370 = load i64, i64* %1369
  store i64 %1370, i64* %3, align 8, !alias.scope !1794, !noalias !1797
  store i64 %1332, i64* %15, align 8, !alias.scope !1794, !noalias !1797
  %1371 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2358), i64 %1335, i64 %1336, i64 %1337, i64 %1338, i64 %1339, i64 %1341, i64 %1344, i64 %1347, i64 %1350, i64 %1353, i64 %1356, i64 %1359, i64 %1362, i64 %1365, i64 %1368), !noalias !1794
  store i64 %1371, i64* %80, align 8, !alias.scope !1794, !noalias !1797
  %1372 = load i64, i64* %16, align 8
  %1373 = add i64 %1372, -372
  %1374 = trunc i64 %1371 to i32
  %1375 = load i64, i64* %3, align 8
  %1376 = inttoptr i64 %1373 to i32*
  store i32 %1374, i32* %1376
  store i8 0, i8* %5, align 1, !tbaa !1463
  %1377 = add i64 %1375, -27735
  %1378 = add i64 %1375, 13
  %1379 = load i64, i64* %15, align 8, !tbaa !1240
  %1380 = add i64 %1379, -8
  %1381 = inttoptr i64 %1380 to i64*
  store i64 %1378, i64* %1381
  store i64 %1380, i64* %15, align 8, !tbaa !1240
  %1382 = tail call %struct.Memory* @sub_4182f0_top_constants(%struct.State* nonnull %0, i64 %1377, %struct.Memory* %1123)
  %1383 = load i64, i64* %16, align 8
  %1384 = add i64 %1383, -72
  %1385 = load i64, i64* %3, align 8
  %1386 = add i64 %1385, 7
  %1387 = inttoptr i64 %1384 to i32*
  store i32 1, i32* %1387
  br label %block_41ef5b

block_41f16d:                                     ; preds = %block_41f109
  %1388 = add i64 %1828, 7
  %1389 = inttoptr i64 %1812 to i32*
  store i32 0, i32* %1389
  %1390 = add i64 %1810, -80
  %1391 = add i64 %1810, -76
  %1392 = add i64 %1810, -72
  br label %block_41f174

block_41f475:                                     ; preds = %block_41f045
  store i64 1, i64* %14, align 8, !tbaa !1240
  %1393 = add i64 %1753, -105125
  %1394 = add i64 %1753, 10
  %1395 = load i64, i64* %15, align 8, !tbaa !1240
  %1396 = add i64 %1395, -8
  %1397 = inttoptr i64 %1396 to i64*
  store i64 %1394, i64* %1397
  store i64 %1396, i64* %15, align 8, !tbaa !1240
  %1398 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %1393, %struct.Memory* %1734)
  %1399 = load i64, i64* %3, align 8
  store i64 1, i64* %14, align 8, !tbaa !1240
  %1400 = add i64 %1399, -105055
  %1401 = add i64 %1399, 10
  %1402 = load i64, i64* %15, align 8, !tbaa !1240
  %1403 = add i64 %1402, -8
  %1404 = inttoptr i64 %1403 to i64*
  store i64 %1401, i64* %1404
  store i64 %1403, i64* %15, align 8, !tbaa !1240
  %1405 = tail call %struct.Memory* @sub_405a20_timer_read(%struct.State* nonnull %0, i64 %1400, %struct.Memory* %1398)
  %1406 = load i64, i64* %16, align 8
  %1407 = add i64 %1406, -105
  %1408 = load i64, i64* %3, align 8
  store i64 %1407, i64* %14, align 8, !tbaa !1240
  %1409 = add i64 %1406, -116
  store i64 %1409, i64* %13, align 8, !tbaa !1240
  %1410 = add i64 %1406, -96
  %1411 = load double, double* %71, align 1
  %1412 = inttoptr i64 %1410 to double*
  store double %1411, double* %1412
  %1413 = add i64 %1408, 3015
  %1414 = add i64 %1408, 18
  %1415 = load i64, i64* %15, align 8, !tbaa !1240
  %1416 = add i64 %1415, -8
  %1417 = inttoptr i64 %1416 to i64*
  store i64 %1414, i64* %1417
  store i64 %1416, i64* %15, align 8, !tbaa !1240
  %1418 = tail call %struct.Memory* @sub_420050_verify(%struct.State* nonnull %0, i64 %1413, %struct.Memory* %1405)
  %1419 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2389), i64* %14, align 8, !tbaa !1240
  store i64 4, i64* %12, align 8, !tbaa !1240
  store i64 0, i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2392), i64* %13, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2417), i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2423), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2435), i64* %18, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2439), i64* %19, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2445), i64* %20, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2449), i64* %10, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2461), i64* %23, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2470), i64* %24, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2490), i64* %21, align 8, !tbaa !1240
  %1420 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1960) to double*)
  %1421 = load i64, i64* %16, align 8
  %1422 = add i64 %1421, -104
  %1423 = inttoptr i64 %1422 to double*
  %1424 = load double, double* %1423
  %1425 = load i32, i32* bitcast (%nmxh_type* @nmxh to i32*)
  %1426 = add i32 %1425, 1
  %1427 = sext i32 %1426 to i64
  %1428 = mul nsw i64 %1427, 125
  %1429 = trunc i64 %1428 to i32
  %1430 = sitofp i32 %1429 to double
  %1431 = bitcast %union.VectorReg* %27 to double*
  store double %1430, double* %1431, align 1, !tbaa !1246
  %1432 = fmul double %1430, %1424
  %1433 = add i64 %1421, -96
  %1434 = inttoptr i64 %1433 to double*
  %1435 = load double, double* %1434
  %1436 = fmul double %1420, %1435
  store i64 0, i64* %55, align 1, !tbaa !1246
  %1437 = fdiv double %1432, %1436
  %1438 = add i64 %1421, -88
  %1439 = inttoptr i64 %1438 to double*
  store double %1437, double* %1439
  %1440 = add i64 %1421, -105
  %1441 = inttoptr i64 %1440 to i8*
  %1442 = load i8, i8* %1441
  %1443 = load i64, i64* %16, align 8
  %1444 = add i64 %1443, -376
  %1445 = load i32, i32* %6, align 4
  %1446 = inttoptr i64 %1444 to i32*
  store i32 %1445, i32* %1446
  %1447 = load i32, i32* bitcast (%niter_type* @niter to i32*)
  %1448 = add i64 %1443, -96
  %1449 = inttoptr i64 %1448 to double*
  %1450 = load double, double* %1449
  store double %1450, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1451 = add i64 %1443, -88
  %1452 = inttoptr i64 %1451 to double*
  %1453 = load double, double* %1452
  store double %1453, double* %1126, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1128, align 1, !tbaa !1246
  %1454 = add i64 %1443, -380
  %1455 = inttoptr i64 %1454 to i32*
  store i32 %1447, i32* %1455
  %1456 = add i64 %1443, -116
  %1457 = inttoptr i64 %1456 to i32*
  %1458 = load i32, i32* %1457
  %1459 = add i64 %1443, -392
  %1460 = load i64, i64* %13, align 8
  %1461 = inttoptr i64 %1459 to i64*
  store i64 %1460, i64* %1461
  %1462 = sext i8 %1442 to i64
  %1463 = and i64 %1462, 4294967295
  store i64 %1463, i64* %13, align 8, !tbaa !1240
  %1464 = inttoptr i64 %1444 to i32*
  %1465 = load i32, i32* %1464
  %1466 = zext i32 %1465 to i64
  %1467 = add i64 %1443, -400
  %1468 = load i64, i64* %11, align 8
  %1469 = inttoptr i64 %1467 to i64*
  store i64 %1468, i64* %1469
  store i64 %1466, i64* %11, align 8, !tbaa !1240
  %1470 = add i64 %1443, -408
  %1471 = load i64, i64* %17, align 8
  %1472 = inttoptr i64 %1470 to i64*
  store i64 %1471, i64* %1472
  store i64 %1466, i64* %17, align 8, !tbaa !1240
  %1473 = inttoptr i64 %1454 to i32*
  %1474 = load i32, i32* %1473
  %1475 = zext i32 %1474 to i64
  %1476 = add i64 %1443, -416
  %1477 = load i64, i64* %18, align 8
  %1478 = inttoptr i64 %1476 to i64*
  store i64 %1477, i64* %1478
  store i64 %1475, i64* %18, align 8, !tbaa !1240
  %1479 = inttoptr i64 %1459 to i64*
  %1480 = load i64, i64* %1479
  %1481 = load i64, i64* %15, align 8
  %1482 = inttoptr i64 %1481 to i64*
  store i64 %1480, i64* %1482
  %1483 = add i64 %1481, 8
  %1484 = inttoptr i64 %1483 to i32*
  store i32 %1458, i32* %1484
  %1485 = inttoptr i64 %1467 to i64*
  %1486 = load i64, i64* %1485
  %1487 = add i64 %1481, 16
  %1488 = inttoptr i64 %1487 to i64*
  store i64 %1486, i64* %1488
  %1489 = load i64, i64* %16, align 8
  %1490 = add i64 %1489, -408
  %1491 = inttoptr i64 %1490 to i64*
  %1492 = load i64, i64* %1491
  %1493 = add i64 %1481, 24
  %1494 = inttoptr i64 %1493 to i64*
  store i64 %1492, i64* %1494
  %1495 = add i64 %1489, -416
  %1496 = inttoptr i64 %1495 to i64*
  %1497 = load i64, i64* %1496
  store i64 %1497, i64* %22, align 8, !tbaa !1240
  %1498 = add i64 %1481, 32
  %1499 = inttoptr i64 %1498 to i64*
  store i64 %1497, i64* %1499
  %1500 = add i64 %1481, 40
  %1501 = load i64, i64* %19, align 8
  %1502 = inttoptr i64 %1500 to i64*
  store i64 %1501, i64* %1502
  %1503 = add i64 %1481, 48
  %1504 = load i64, i64* %20, align 8
  %1505 = inttoptr i64 %1503 to i64*
  store i64 %1504, i64* %1505
  %1506 = add i64 %1481, 56
  %1507 = load i64, i64* %10, align 8
  %1508 = inttoptr i64 %1506 to i64*
  store i64 %1507, i64* %1508
  %1509 = add i64 %1481, 64
  %1510 = load i64, i64* %23, align 8
  %1511 = inttoptr i64 %1509 to i64*
  store i64 %1510, i64* %1511
  %1512 = add i64 %1481, 72
  %1513 = load i64, i64* %24, align 8
  %1514 = inttoptr i64 %1512 to i64*
  store i64 %1513, i64* %1514
  %1515 = add i64 %1481, 80
  %1516 = load i64, i64* %21, align 8
  %1517 = inttoptr i64 %1515 to i64*
  store i64 %1516, i64* %1517
  %1518 = add i64 %1419, -37563
  %1519 = add i64 %1419, 349
  %1520 = add i64 %1481, -8
  %1521 = inttoptr i64 %1520 to i64*
  store i64 %1519, i64* %1521
  store i64 %1520, i64* %15, align 8, !tbaa !1240
  %1522 = tail call %struct.Memory* @sub_4161e0_print_results(%struct.State* nonnull %0, i64 %1518, %struct.Memory* %1418)
  %1523 = load i64, i64* %3, align 8
  %1524 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1525 = icmp eq i32 %1524, 0
  %1526 = select i1 %1525, i64 490, i64 14
  %1527 = add i64 %1523, %1526
  br i1 %1525, label %block_41f475.block_41f7e2_crit_edge, label %block_41f606

block_41f475.block_41f7e2_crit_edge:              ; preds = %block_41f475
  %1528 = load i64, i64* %9, align 8
  %1529 = trunc i64 %1528 to i32
  br label %block_41f7e2

block_41ecbd:                                     ; preds = %block_41eb90
  %1530 = add i64 %92, 11
  store i32 0, i32* bitcast (%timeron_type* @timeron to i32*)
  br label %block_41ecc8

block_41f26c:                                     ; preds = %block_41f1ad
  %1531 = inttoptr i64 %1391 to i32*
  %1532 = load i32, i32* %1531
  %1533 = add i32 %1532, 1
  %1534 = inttoptr i64 %1391 to i32*
  store i32 %1533, i32* %1534
  %1535 = add i64 %2030, -208
  br label %block_41f19c

block_41f2a5:                                     ; preds = %block_41f174
  store i64 ptrtoint (%rmor_type* @rmor to i64), i64* %14, align 8, !tbaa !1240
  store i64 ptrtoint (%trhs_type* @trhs to i64), i64* %13, align 8, !tbaa !1240
  %1536 = add i64 %967, -16837
  %1537 = add i64 %967, 25
  %1538 = load i64, i64* %15, align 8, !tbaa !1240
  %1539 = add i64 %1538, -8
  %1540 = inttoptr i64 %1539 to i64*
  store i64 %1537, i64* %1540
  store i64 %1539, i64* %15, align 8, !tbaa !1240
  %1541 = tail call %struct.Memory* @sub_41b0e0_transfb(%struct.State* nonnull %0, i64 %1536, %struct.Memory* %951)
  %1542 = load i64, i64* %3, align 8
  %1543 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1544 = icmp eq i32 %1543, 0
  %1545 = select i1 %1544, i64 24, i64 14
  %1546 = add i64 %1542, %1545
  br i1 %1544, label %block_41f2d6, label %block_41f2cc

block_41f05f:                                     ; preds = %block_41f055
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %14, align 8, !tbaa !1240
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %1547 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %1548 = zext i32 %1547 to i64
  store i64 %1548, i64* %13, align 8, !tbaa !1240
  %1549 = add i64 %1659, 2033
  %1550 = add i64 %1659, 25
  %1551 = load i64, i64* %15, align 8, !tbaa !1240
  %1552 = add i64 %1551, -8
  %1553 = inttoptr i64 %1552 to i64*
  store i64 %1550, i64* %1553
  store i64 %1552, i64* %15, align 8, !tbaa !1240
  %1554 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1549, %struct.Memory* %1734)
  %1555 = load i64, i64* %3, align 8
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %1556 = load double, double* %71, align 1
  store double %1556, double* bitcast (%time_type* @time to double*)
  %1557 = load i64, i64* %16, align 8
  %1558 = add i64 %1557, -104
  %1559 = inttoptr i64 %1558 to double*
  store double %1556, double* %1559
  %1560 = add i64 %1557, -72
  %1561 = add i64 %1555, 24
  %1562 = inttoptr i64 %1560 to i32*
  store i32 1, i32* %1562
  br label %block_41f090

block_41ef93:                                     ; preds = %block_41ef89, %block_41ef7b
  %1563 = phi i64 [ %329, %block_41ef7b ], [ %931, %block_41ef89 ]
  %1564 = phi %struct.Memory* [ %617, %block_41ef7b ], [ %930, %block_41ef89 ]
  %1565 = add i64 %1563, -34499
  %1566 = add i64 %1563, 7
  %1567 = load i64, i64* %15, align 8, !tbaa !1240
  %1568 = add i64 %1567, -8
  %1569 = inttoptr i64 %1568 to i64*
  store i64 %1566, i64* %1569
  store i64 %1568, i64* %15, align 8, !tbaa !1240
  %1570 = tail call %struct.Memory* @sub_4168d0_create_initial_grid(%struct.State* nonnull %0, i64 %1565, %struct.Memory* %1564)
  %1571 = load i64, i64* %3, align 8
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %14, align 8, !tbaa !1240
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %1572 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %1573 = zext i32 %1572 to i64
  store i64 %1573, i64* %13, align 8, !tbaa !1240
  %1574 = add i64 %1571, 2230
  %1575 = add i64 %1571, 25
  %1576 = load i64, i64* %15, align 8, !tbaa !1240
  %1577 = add i64 %1576, -8
  %1578 = inttoptr i64 %1577 to i64*
  store i64 %1575, i64* %1578
  store i64 %1577, i64* %15, align 8, !tbaa !1240
  %1579 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1574, %struct.Memory* %1570)
  %1580 = load i64, i64* %3, align 8
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %14, align 8, !tbaa !1240
  store i64 4294967295, i64* %12, align 8, !tbaa !1240
  %1581 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1582 = sext i32 %1581 to i64
  %1583 = mul nsw i64 %1582, 24
  %1584 = and i64 %1583, 4294967288
  store i64 %1584, i64* %13, align 8, !tbaa !1240
  %1585 = add i64 %1580, 2285
  %1586 = add i64 %1580, 28
  %1587 = load i64, i64* %15, align 8, !tbaa !1240
  %1588 = add i64 %1587, -8
  %1589 = inttoptr i64 %1588 to i64*
  store i64 %1586, i64* %1589
  store i64 %1588, i64* %15, align 8, !tbaa !1240
  %1590 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %1585, %struct.Memory* %1579)
  %1591 = load i64, i64* %3, align 8
  %1592 = add i64 %1591, -34191
  %1593 = add i64 %1591, 7
  %1594 = load i64, i64* %15, align 8, !tbaa !1240
  %1595 = add i64 %1594, -8
  %1596 = inttoptr i64 %1595 to i64*
  store i64 %1593, i64* %1596
  store i64 %1595, i64* %15, align 8, !tbaa !1240
  %1597 = tail call %struct.Memory* @sub_416a40_coef(%struct.State* nonnull %0, i64 %1592, %struct.Memory* %1590)
  %1598 = load i64, i64* %3, align 8
  store i8 0, i8* %5, align 1, !tbaa !1463
  %1599 = add i64 %1598, -31958
  %1600 = add i64 %1598, 7
  %1601 = load i64, i64* %15, align 8, !tbaa !1240
  %1602 = add i64 %1601, -8
  %1603 = inttoptr i64 %1602 to i64*
  store i64 %1600, i64* %1603
  store i64 %1602, i64* %15, align 8, !tbaa !1240
  %1604 = tail call %struct.Memory* @sub_417300_geom1(%struct.State* nonnull %0, i64 %1599, %struct.Memory* %1597)
  %1605 = load i64, i64* %3, align 8
  %1606 = add i64 %1605, -30397
  %1607 = add i64 %1605, 7
  %1608 = load i64, i64* %15, align 8, !tbaa !1240
  %1609 = add i64 %1608, -8
  %1610 = inttoptr i64 %1609 to i64*
  store i64 %1607, i64* %1610
  store i64 %1609, i64* %15, align 8, !tbaa !1240
  %1611 = tail call %struct.Memory* @sub_417920_setdef(%struct.State* nonnull %0, i64 %1606, %struct.Memory* %1604)
  %1612 = load i64, i64* %3, align 8
  %1613 = add i64 %1612, -50180
  %1614 = add i64 %1612, 7
  %1615 = load i64, i64* %15, align 8, !tbaa !1240
  %1616 = add i64 %1615, -8
  %1617 = inttoptr i64 %1616 to i64*
  store i64 %1614, i64* %1617
  store i64 %1616, i64* %15, align 8, !tbaa !1240
  %1618 = tail call %struct.Memory* @sub_412be0_setpcmo_pre(%struct.State* nonnull %0, i64 %1613, %struct.Memory* %1611)
  %1619 = load i64, i64* %3, align 8
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %1620 = load double, double* %71, align 1
  store double %1620, double* bitcast (%time_type* @time to double*)
  %1621 = add i64 %1619, -91883
  %1622 = add i64 %1619, 19
  %1623 = load i64, i64* %15, align 8, !tbaa !1240
  %1624 = add i64 %1623, -8
  %1625 = inttoptr i64 %1624 to i64*
  store i64 %1622, i64* %1625
  store i64 %1624, i64* %15, align 8, !tbaa !1240
  %1626 = tail call %struct.Memory* @sub_408900_mortar(%struct.State* nonnull %0, i64 %1621, %struct.Memory* %1618)
  %1627 = load i64, i64* %3, align 8
  %1628 = add i64 %1627, -30158
  %1629 = add i64 %1627, 7
  %1630 = load i64, i64* %15, align 8, !tbaa !1240
  %1631 = add i64 %1630, -8
  %1632 = inttoptr i64 %1631 to i64*
  store i64 %1629, i64* %1632
  store i64 %1631, i64* %15, align 8, !tbaa !1240
  %1633 = tail call %struct.Memory* @sub_417a30_prepwork(%struct.State* nonnull %0, i64 %1628, %struct.Memory* %1626)
  %1634 = load i64, i64* %16, align 8
  %1635 = add i64 %1634, -112
  %1636 = load i64, i64* %3, align 8
  store i64 %1635, i64* %14, align 8, !tbaa !1240
  store i64 0, i64* %13, align 8, !tbaa !1240
  %1637 = add i64 %1636, -124805
  %1638 = add i64 %1636, 11
  %1639 = load i64, i64* %15, align 8, !tbaa !1240
  %1640 = add i64 %1639, -8
  %1641 = inttoptr i64 %1640 to i64*
  store i64 %1638, i64* %1641
  store i64 %1640, i64* %15, align 8, !tbaa !1240
  %1642 = tail call %struct.Memory* @sub_400880_adaptation(%struct.State* nonnull %0, i64 %1637, %struct.Memory* %1633)
  %1643 = load i64, i64* %3, align 8
  %1644 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  store i8 0, i8* %48, align 1, !tbaa !1248
  %1645 = and i32 %1644, 255
  %1646 = tail call i32 @llvm.ctpop.i32(i32 %1645) #11
  %1647 = trunc i32 %1646 to i8
  %1648 = and i8 %1647, 1
  %1649 = xor i8 %1648, 1
  store i8 %1649, i8* %49, align 1, !tbaa !1261
  store i8 0, i8* %50, align 1, !tbaa !1262
  %1650 = icmp eq i32 %1644, 0
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %51, align 1, !tbaa !1263
  %1652 = lshr i32 %1644, 31
  %1653 = trunc i32 %1652 to i8
  store i8 %1653, i8* %52, align 1, !tbaa !1264
  store i8 0, i8* %53, align 1, !tbaa !1265
  %1654 = select i1 %1650, i64 24, i64 14
  %1655 = add i64 %1643, %1654
  br i1 %1650, label %block_41f028, label %block_41f01e

block_41f055:                                     ; preds = %block_41f045
  %1656 = add i32 %1737, -1
  %1657 = icmp eq i32 %1656, 0
  %1658 = select i1 %1657, i64 10, i64 116
  %1659 = add i64 %1753, %1658
  br i1 %1657, label %block_41f05f, label %block_41f0c9

block_41f652:                                     ; preds = %block_41f64c
  %1660 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %1660, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1661 = load i64, i64* %16, align 8
  %1662 = add i64 %1661, -96
  %1663 = add i64 %1684, 13
  %1664 = inttoptr i64 %1662 to double*
  store double %1660, double* %1664
  br label %block_41f65f

block_41f44e:                                     ; preds = %block_41f442, %block_41f447
  %1665 = phi i64 [ %1730, %block_41f447 ], [ %1757, %block_41f442 ]
  %1666 = phi i64 [ %1727, %block_41f447 ], [ %1754, %block_41f442 ]
  %1667 = phi %struct.Memory* [ %1728, %block_41f447 ], [ %1756, %block_41f442 ]
  %1668 = add i64 %1666, -104
  %1669 = inttoptr i64 %1668 to double*
  %1670 = load double, double* %1669
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1671 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1672 = sitofp i32 %1671 to double
  store double %1672, double* %1126, align 1, !tbaa !1246
  %1673 = fadd double %1672, %1670
  store double %1673, double* %71, align 1, !tbaa !1246
  store i64 0, i64* %55, align 1, !tbaa !1246
  %1674 = inttoptr i64 %1668 to double*
  store double %1673, double* %1674
  %1675 = add i64 %1666, -60
  %1676 = inttoptr i64 %1675 to i32*
  %1677 = load i32, i32* %1676
  %1678 = add i32 %1677, 1
  %1679 = inttoptr i64 %1675 to i32*
  store i32 %1678, i32* %1679
  %1680 = add i64 %1665, -1033
  br label %block_41f045

block_41f64c:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1681 = load i8, i8* %49, align 1, !tbaa !1261
  %1682 = icmp ne i8 %1681, 0
  %1683 = select i1 %1682, i64 19, i64 6
  %1684 = add i64 %1872, %1683
  %1685 = icmp eq i8 %1681, 1
  br i1 %1685, label %block_41f65f, label %block_41f652

block_41ebf1:                                     ; preds = %block_41eb90
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2046), i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2035), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2027), i64* %13, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2010), i64* %17, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2000), i64* %18, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2585), i64* %19, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1995), i64* %20, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1989), i64* %10, align 8, !tbaa !1240
  store i32 1, i32* bitcast (%timeron_type* @timeron to i32*)
  %1686 = add i64 %86, -312
  %1687 = inttoptr i64 %1686 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1989), i64* %1687
  %1688 = add i64 %86, -304
  %1689 = inttoptr i64 %1688 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1995), i64* %1689
  %1690 = add i64 %86, -296
  %1691 = inttoptr i64 %1690 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2585), i64* %1691
  %1692 = add i64 %86, -288
  %1693 = inttoptr i64 %1692 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2000), i64* %1693
  %1694 = add i64 %86, -280
  %1695 = inttoptr i64 %1694 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2010), i64* %1695
  %1696 = add i64 %86, -272
  %1697 = inttoptr i64 %1696 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2020), i64* %1697
  %1698 = add i64 %86, -264
  %1699 = inttoptr i64 %1698 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2027), i64* %1699
  %1700 = add i64 %86, -256
  %1701 = inttoptr i64 %1700 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2035), i64* %1701
  %1702 = add i64 %86, -248
  %1703 = inttoptr i64 %1702 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2046), i64* %1703
  %1704 = add i64 %86, -240
  %1705 = inttoptr i64 %1704 to i64*
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2055), i64* %1705
  %1706 = inttoptr i64 %87 to i64*
  %1707 = load i64, i64* %1706
  %1708 = add i64 %92, 193
  %1709 = load i64, i64* %15, align 8, !tbaa !1240
  %1710 = add i64 %1709, -8
  %1711 = inttoptr i64 %1710 to i64*
  store i64 %1708, i64* %1711
  %1712 = inttoptr i64 %1710 to i64*
  %1713 = load i64, i64* %1712
  store i64 %1713, i64* %3, align 8, !alias.scope !1799, !noalias !1802
  store i64 %1709, i64* %15, align 8, !alias.scope !1799, !noalias !1802
  %1714 = tail call i64 @fclose(i64 %1707), !noalias !1799
  %1715 = load i64, i64* %16, align 8
  %1716 = add i64 %1715, -336
  %1717 = trunc i64 %1714 to i32
  %1718 = load i64, i64* %3, align 8
  %1719 = inttoptr i64 %1716 to i32*
  store i32 %1717, i32* %1719
  %1720 = add i64 %1718, 22
  br label %block_41ecc8

block_41f6ee:                                     ; preds = %block_41f687
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2550), i64* %14, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2581), i64* %13, align 8, !tbaa !1240
  %1721 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1968) to double*)
  store double %1721, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1722 = add i64 %1061, -200
  %1723 = add i64 %1072, 36
  %1724 = inttoptr i64 %1722 to double*
  %1725 = load double, double* %1724
  store double %1725, double* %1126, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1128, align 1, !tbaa !1246
  br label %block_41f7ca.sink.split

block_41f447:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, %block_41f3e5
  %1726 = phi i64 [ %179, %block_41f3e5 ], [ %2108, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %1727 = phi i64 [ %165, %block_41f3e5 ], [ %2092, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %1728 = phi %struct.Memory* [ %161, %block_41f3e5 ], [ %2095, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %1729 = add i64 %1727, -112
  %1730 = add i64 %1726, 7
  %1731 = inttoptr i64 %1729 to i32*
  store i32 0, i32* %1731
  br label %block_41f44e

block_41f045:                                     ; preds = %block_41f028, %block_41f44e
  %1732 = phi i64 [ %1945, %block_41f028 ], [ %1680, %block_41f44e ]
  %1733 = phi i64 [ %1943, %block_41f028 ], [ %1666, %block_41f44e ]
  %1734 = phi %struct.Memory* [ %1940, %block_41f028 ], [ %1667, %block_41f44e ]
  %1735 = add i64 %1733, -60
  %1736 = inttoptr i64 %1735 to i32*
  %1737 = load i32, i32* %1736
  %1738 = load i32, i32* bitcast (%niter_type* @niter to i32*)
  %1739 = sub i32 %1737, %1738
  %1740 = icmp eq i32 %1739, 0
  %1741 = lshr i32 %1739, 31
  %1742 = trunc i32 %1741 to i8
  %1743 = lshr i32 %1737, 31
  %1744 = lshr i32 %1738, 31
  %1745 = xor i32 %1744, %1743
  %1746 = xor i32 %1741, %1743
  %1747 = add nuw nsw i32 %1746, %1745
  %1748 = icmp eq i32 %1747, 2
  %1749 = icmp ne i8 %1742, 0
  %1750 = xor i1 %1749, %1748
  %1751 = or i1 %1740, %1750
  %1752 = select i1 %1751, i64 16, i64 1072
  %1753 = add i64 %1732, %1752
  br i1 %1751, label %block_41f055, label %block_41f475

block_41f442:                                     ; preds = %block_41f426, %block_41f436
  %1754 = phi i64 [ %2092, %block_41f426 ], [ %1837, %block_41f436 ]
  %1755 = phi i64 [ %1953, %block_41f426 ], [ %1836, %block_41f436 ]
  %1756 = phi %struct.Memory* [ %2095, %block_41f426 ], [ %1835, %block_41f436 ]
  %1757 = add i64 %1755, 12
  br label %block_41f44e

block_41f65f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_41f64c, %block_41f652
  %1758 = phi i64 [ %1872, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1684, %block_41f64c ], [ %1663, %block_41f652 ]
  %1759 = phi %struct.Memory* [ %1869, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1869, %block_41f64c ], [ %1869, %block_41f652 ]
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2497), i64* %14, align 8, !tbaa !1240
  %1760 = add i64 %1758, 17
  %1761 = load i64, i64* %15, align 8, !tbaa !1240
  %1762 = add i64 %1761, -8
  %1763 = inttoptr i64 %1762 to i64*
  store i64 %1760, i64* %1763
  %1764 = load i64, i64* %81, align 8, !alias.scope !1804, !noalias !1807
  %1765 = load i64, i64* %12, align 8, !alias.scope !1804, !noalias !1807
  %1766 = load i64, i64* %11, align 8, !alias.scope !1804, !noalias !1807
  %1767 = load i64, i64* %17, align 8, !alias.scope !1804, !noalias !1807
  %1768 = load i64, i64* %18, align 8, !alias.scope !1804, !noalias !1807
  %1769 = inttoptr i64 %1761 to i64*
  %1770 = load i64, i64* %1769
  %1771 = add i64 %1761, 8
  %1772 = inttoptr i64 %1771 to i64*
  %1773 = load i64, i64* %1772
  %1774 = add i64 %1761, 16
  %1775 = inttoptr i64 %1774 to i64*
  %1776 = load i64, i64* %1775
  %1777 = add i64 %1761, 24
  %1778 = inttoptr i64 %1777 to i64*
  %1779 = load i64, i64* %1778
  %1780 = add i64 %1761, 32
  %1781 = inttoptr i64 %1780 to i64*
  %1782 = load i64, i64* %1781
  %1783 = add i64 %1761, 40
  %1784 = inttoptr i64 %1783 to i64*
  %1785 = load i64, i64* %1784
  %1786 = add i64 %1761, 48
  %1787 = inttoptr i64 %1786 to i64*
  %1788 = load i64, i64* %1787
  %1789 = add i64 %1761, 56
  %1790 = inttoptr i64 %1789 to i64*
  %1791 = load i64, i64* %1790
  %1792 = add i64 %1761, 64
  %1793 = inttoptr i64 %1792 to i64*
  %1794 = load i64, i64* %1793
  %1795 = add i64 %1761, 72
  %1796 = inttoptr i64 %1795 to i64*
  %1797 = load i64, i64* %1796
  %1798 = inttoptr i64 %1762 to i64*
  %1799 = load i64, i64* %1798
  store i64 %1799, i64* %3, align 8, !alias.scope !1804, !noalias !1807
  store i64 %1761, i64* %15, align 8, !alias.scope !1804, !noalias !1807
  %1800 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2497), i64 %1764, i64 %1765, i64 %1766, i64 %1767, i64 %1768, i64 %1770, i64 %1773, i64 %1776, i64 %1779, i64 %1782, i64 %1785, i64 %1788, i64 %1791, i64 %1794, i64 %1797), !noalias !1804
  %1801 = load i64, i64* %16, align 8
  %1802 = add i64 %1801, -72
  %1803 = load i64, i64* %3, align 8
  %1804 = inttoptr i64 %1802 to i32*
  store i32 1, i32* %1804
  %1805 = add i64 %1801, -420
  %1806 = trunc i64 %1800 to i32
  %1807 = add i64 %1803, 13
  %1808 = inttoptr i64 %1805 to i32*
  store i32 %1806, i32* %1808
  br label %block_41f67d

block_41f109:                                     ; preds = %block_41f119, %block_41f0e9
  %1809 = phi i64 [ %613, %block_41f0e9 ], [ %2136, %block_41f119 ]
  %1810 = phi i64 [ %610, %block_41f0e9 ], [ %2129, %block_41f119 ]
  %1811 = phi %struct.Memory* [ %609, %block_41f0e9 ], [ %2128, %block_41f119 ]
  %1812 = add i64 %1810, -64
  %1813 = inttoptr i64 %1812 to i32*
  %1814 = load i32, i32* %1813
  %1815 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1816 = sub i32 %1814, %1815
  %1817 = lshr i32 %1816, 31
  %1818 = trunc i32 %1817 to i8
  %1819 = lshr i32 %1814, 31
  %1820 = lshr i32 %1815, 31
  %1821 = xor i32 %1820, %1819
  %1822 = xor i32 %1817, %1819
  %1823 = add nuw nsw i32 %1822, %1821
  %1824 = icmp eq i32 %1823, 2
  %1825 = icmp ne i8 %1818, 0
  %1826 = xor i1 %1825, %1824
  %1827 = select i1 %1826, i64 16, i64 100
  %1828 = add i64 %1809, %1827
  br i1 %1826, label %block_41f119, label %block_41f16d

block_41f436:                                     ; preds = %block_41f426
  %1829 = add i64 %2092, -112
  store i64 %1829, i64* %14, align 8, !tbaa !1240
  store i64 %1948, i64* %13, align 8, !tbaa !1240
  %1830 = add i64 %1953, -125878
  %1831 = add i64 %1953, 12
  %1832 = load i64, i64* %15, align 8, !tbaa !1240
  %1833 = add i64 %1832, -8
  %1834 = inttoptr i64 %1833 to i64*
  store i64 %1831, i64* %1834
  store i64 %1833, i64* %15, align 8, !tbaa !1240
  %1835 = tail call %struct.Memory* @sub_400880_adaptation(%struct.State* nonnull %0, i64 %1830, %struct.Memory* %2095)
  %1836 = load i64, i64* %3, align 8
  %1837 = load i64, i64* %16, align 8
  br label %block_41f442

block_41f63a:                                     ; preds = %block_41f60d
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %1838 = add i64 %2040, -96
  %1839 = inttoptr i64 %1838 to double*
  %1840 = load double, double* %1839
  store double %1840, double* %1126, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1128, align 1, !tbaa !1246
  %1841 = add i64 %2070, 12
  store i64 %1841, i64* %3, align 8
  %1842 = load double, double* %71, align 1
  %1843 = fcmp uno double %1840, %1842
  br i1 %1843, label %1844, label %1856

; <label>:1844:                                   ; preds = %block_41f63a
  %1845 = fadd double %1840, %1842
  %1846 = bitcast double %1845 to i64
  %1847 = and i64 %1846, 9221120237041090560
  %1848 = icmp eq i64 %1847, 9218868437227405312
  %1849 = and i64 %1846, 2251799813685247
  %1850 = icmp ne i64 %1849, 0
  %1851 = and i1 %1848, %1850
  br i1 %1851, label %1852, label %1862

; <label>:1852:                                   ; preds = %1844
  %1853 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1841, %struct.Memory* %2041) #14
  %1854 = load i64, i64* %3, align 8
  %1855 = load i8, i8* %51, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1856:                                   ; preds = %block_41f63a
  %1857 = fcmp ogt double %1840, %1842
  br i1 %1857, label %1862, label %1858

; <label>:1858:                                   ; preds = %1856
  %1859 = fcmp olt double %1840, %1842
  br i1 %1859, label %1862, label %1860

; <label>:1860:                                   ; preds = %1858
  %1861 = fcmp oeq double %1840, %1842
  br i1 %1861, label %1862, label %1865

; <label>:1862:                                   ; preds = %1860, %1858, %1856, %1844
  %1863 = phi i8 [ 0, %1856 ], [ 0, %1858 ], [ 1, %1860 ], [ 1, %1844 ]
  %1864 = phi i8 [ 0, %1856 ], [ 0, %1858 ], [ 0, %1860 ], [ 1, %1844 ]
  store i8 %1864, i8* %49, align 1, !tbaa !1463
  br label %1865

; <label>:1865:                                   ; preds = %1862, %1860
  %1866 = phi i8 [ %1863, %1862 ], [ 0, %1860 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1865, %1852
  %1867 = phi i8 [ %1855, %1852 ], [ %1866, %1865 ]
  %1868 = phi i64 [ %1854, %1852 ], [ %1841, %1865 ]
  %1869 = phi %struct.Memory* [ %1853, %1852 ], [ %2041, %1865 ]
  %1870 = icmp eq i8 %1867, 0
  %1871 = select i1 %1870, i64 25, i64 6
  %1872 = add i64 %1868, %1871
  br i1 %1870, label %block_41f65f, label %block_41f64c

block_41f75d:                                     ; preds = %block_41f753
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2550), i64* %14, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2593), i64* %13, align 8, !tbaa !1240
  %1873 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1968) to double*)
  store double %1873, double* %71, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1121, align 1, !tbaa !1246
  %1874 = add i64 %1061, -184
  %1875 = inttoptr i64 %1874 to double*
  %1876 = load double, double* %1875
  %1877 = add i64 %1061, -176
  %1878 = add i64 %414, 44
  %1879 = inttoptr i64 %1877 to double*
  %1880 = load double, double* %1879
  %1881 = fsub double %1876, %1880
  store double %1881, double* %1126, align 1, !tbaa !1246
  store i64 0, i64* %1127, align 1, !tbaa !1246
  br label %block_41f7ca.sink.split

block_41ee29:                                     ; preds = %block_41ecc8
  store i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2178), i64* %14, align 8, !tbaa !1240
  %1882 = add i64 %856, 17
  %1883 = load i64, i64* %15, align 8, !tbaa !1240
  %1884 = add i64 %1883, -8
  %1885 = inttoptr i64 %1884 to i64*
  store i64 %1882, i64* %1885
  %1886 = load i64, i64* %81, align 8, !alias.scope !1809, !noalias !1812
  %1887 = load i64, i64* %12, align 8, !alias.scope !1809, !noalias !1812
  %1888 = load i64, i64* %11, align 8, !alias.scope !1809, !noalias !1812
  %1889 = load i64, i64* %17, align 8, !alias.scope !1809, !noalias !1812
  %1890 = load i64, i64* %18, align 8, !alias.scope !1809, !noalias !1812
  %1891 = inttoptr i64 %1883 to i64*
  %1892 = load i64, i64* %1891
  %1893 = add i64 %1883, 8
  %1894 = inttoptr i64 %1893 to i64*
  %1895 = load i64, i64* %1894
  %1896 = add i64 %1883, 16
  %1897 = inttoptr i64 %1896 to i64*
  %1898 = load i64, i64* %1897
  %1899 = add i64 %1883, 24
  %1900 = inttoptr i64 %1899 to i64*
  %1901 = load i64, i64* %1900
  %1902 = add i64 %1883, 32
  %1903 = inttoptr i64 %1902 to i64*
  %1904 = load i64, i64* %1903
  %1905 = add i64 %1883, 40
  %1906 = inttoptr i64 %1905 to i64*
  %1907 = load i64, i64* %1906
  %1908 = add i64 %1883, 48
  %1909 = inttoptr i64 %1908 to i64*
  %1910 = load i64, i64* %1909
  %1911 = add i64 %1883, 56
  %1912 = inttoptr i64 %1911 to i64*
  %1913 = load i64, i64* %1912
  %1914 = add i64 %1883, 64
  %1915 = inttoptr i64 %1914 to i64*
  %1916 = load i64, i64* %1915
  %1917 = add i64 %1883, 72
  %1918 = inttoptr i64 %1917 to i64*
  %1919 = load i64, i64* %1918
  %1920 = inttoptr i64 %1884 to i64*
  %1921 = load i64, i64* %1920
  store i64 %1921, i64* %3, align 8, !alias.scope !1809, !noalias !1812
  store i64 %1883, i64* %15, align 8, !alias.scope !1809, !noalias !1812
  %1922 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 2178), i64 %1886, i64 %1887, i64 %1888, i64 %1889, i64 %1890, i64 %1892, i64 %1895, i64 %1898, i64 %1901, i64 %1904, i64 %1907, i64 %1910, i64 %1913, i64 %1916, i64 %1919), !noalias !1809
  %1923 = load i64, i64* %3, align 8
  %1924 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1952) to double*)
  store double %1924, double* %71, align 1, !tbaa !1246
  %1925 = bitcast i64* %55 to double*
  store double 0.000000e+00, double* %1925, align 1, !tbaa !1246
  store i32 5, i32* bitcast (%fre_type* @fre to i32*)
  store i32 50, i32* bitcast (%niter_type* @niter to i32*)
  store i32 10, i32* bitcast (%nmxh_type* @nmxh to i32*)
  store double %1924, double* bitcast (%alpha_type* @alpha to double*)
  %1926 = load i64, i64* %16, align 8
  %1927 = add i64 %1926, -105
  %1928 = inttoptr i64 %1927 to i8*
  store i8 83, i8* %1928
  %1929 = add i64 %1926, -352
  %1930 = trunc i64 %1922 to i32
  %1931 = add i64 %1923, 60
  %1932 = inttoptr i64 %1929 to i32*
  store i32 %1930, i32* %1932
  br label %block_41ee76

block_41f028:                                     ; preds = %block_41f01e, %block_41ef93
  %1933 = phi i64 [ %1655, %block_41ef93 ], [ %1960, %block_41f01e ]
  %1934 = phi %struct.Memory* [ %1642, %block_41ef93 ], [ %1959, %block_41f01e ]
  store i64 1, i64* %14, align 8, !tbaa !1240
  %1935 = add i64 %1933, -104136
  %1936 = add i64 %1933, 10
  %1937 = load i64, i64* %15, align 8, !tbaa !1240
  %1938 = add i64 %1937, -8
  %1939 = inttoptr i64 %1938 to i64*
  store i64 %1936, i64* %1939
  store i64 %1938, i64* %15, align 8, !tbaa !1240
  %1940 = tail call %struct.Memory* @sub_405960_timer_clear(%struct.State* nonnull %0, i64 %1935, %struct.Memory* %1934)
  %1941 = load i64, i64* %3, align 8
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  store i32 0, i32* %59, align 1, !tbaa !1244
  store i32 0, i32* %61, align 1, !tbaa !1244
  %1942 = load double, double* %71, align 1
  store double %1942, double* bitcast (%time_type* @time to double*)
  %1943 = load i64, i64* %16, align 8
  %1944 = add i64 %1943, -60
  %1945 = add i64 %1941, 19
  %1946 = inttoptr i64 %1944 to i32*
  store i32 0, i32* %1946
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_41f045

block_41f426:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %1948 = zext i32 %2104 to i64
  %1949 = load i32, i32* bitcast (%niter_type* @niter to i32*)
  %1950 = sub i32 %2104, %1949
  %1951 = icmp eq i32 %1950, 0
  %1952 = select i1 %1951, i64 28, i64 16
  %1953 = add i64 %2108, %1952
  br i1 %1951, label %block_41f442, label %block_41f436

block_41f01e:                                     ; preds = %block_41ef93
  store i64 2, i64* %14, align 8, !tbaa !1240
  %1954 = add i64 %1655, -104014
  %1955 = add i64 %1655, 10
  %1956 = load i64, i64* %15, align 8, !tbaa !1240
  %1957 = add i64 %1956, -8
  %1958 = inttoptr i64 %1957 to i64*
  store i64 %1955, i64* %1958
  store i64 %1957, i64* %15, align 8, !tbaa !1240
  %1959 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %1954, %struct.Memory* %1642)
  %1960 = load i64, i64* %3, align 8
  br label %block_41f028

block_41f18b:                                     ; preds = %block_41f27f, %block_41f184
  %1961 = phi i64 [ %324, %block_41f184 ], [ %1099, %block_41f27f ]
  %1962 = phi %struct.Memory* [ %951, %block_41f184 ], [ %311, %block_41f27f ]
  %1963 = inttoptr i64 %1390 to i32*
  %1964 = load i32, i32* %1963
  %1965 = add i32 %1964, -5
  %1966 = lshr i32 %1965, 31
  %1967 = lshr i32 %1964, 31
  %1968 = xor i32 %1966, %1967
  %1969 = add nuw nsw i32 %1968, %1967
  %1970 = icmp eq i32 %1969, 2
  %1971 = icmp ne i32 %1966, 0
  %1972 = xor i1 %1971, %1970
  %1973 = select i1 %1972, i64 10, i64 263
  %1974 = add i64 %1961, %1973
  br i1 %1972, label %block_41f195, label %block_41f292

block_41f0c9:                                     ; preds = %block_41f0bf, %block_41f055
  %1975 = phi i64 [ %1659, %block_41f055 ], [ %2038, %block_41f0bf ]
  %1976 = phi i64 [ %1733, %block_41f055 ], [ %2037, %block_41f0bf ]
  %1977 = phi %struct.Memory* [ %1734, %block_41f055 ], [ %2036, %block_41f0bf ]
  %1978 = add i64 %1976, -112
  %1979 = inttoptr i64 %1978 to i32*
  %1980 = load i32, i32* %1979
  %1981 = zext i32 %1980 to i64
  store i64 %1981, i64* %14, align 8, !tbaa !1240
  %1982 = add i64 %1975, -104073
  %1983 = add i64 %1975, 8
  %1984 = load i64, i64* %15, align 8, !tbaa !1240
  %1985 = add i64 %1984, -8
  %1986 = inttoptr i64 %1985 to i64*
  store i64 %1983, i64* %1986
  store i64 %1985, i64* %15, align 8, !tbaa !1240
  %1987 = tail call %struct.Memory* @sub_405a40_convect(%struct.State* nonnull %0, i64 %1982, %struct.Memory* %1977)
  %1988 = load i64, i64* %3, align 8
  %1989 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %1990 = icmp eq i32 %1989, 0
  %1991 = select i1 %1990, i64 24, i64 14
  %1992 = add i64 %1988, %1991
  br i1 %1990, label %block_41f0e9, label %block_41f0df

block_41f617:                                     ; preds = %block_41f60d
  %1993 = zext i32 %2044 to i64
  store i64 %1993, i64* %14, align 8, !tbaa !1240
  %1994 = add i64 %2070, -105463
  %1995 = add i64 %2070, 8
  %1996 = load i64, i64* %15, align 8, !tbaa !1240
  %1997 = add i64 %1996, -8
  %1998 = inttoptr i64 %1997 to i64*
  store i64 %1995, i64* %1998
  store i64 %1997, i64* %15, align 8, !tbaa !1240
  %1999 = tail call %struct.Memory* @sub_405a20_timer_read(%struct.State* nonnull %0, i64 %1994, %struct.Memory* %2041)
  %2000 = load i64, i64* %16, align 8
  %2001 = add i64 %2000, -72
  %2002 = load i64, i64* %3, align 8
  %2003 = inttoptr i64 %2001 to i32*
  %2004 = load i32, i32* %2003
  %2005 = sext i32 %2004 to i64
  %2006 = shl nsw i64 %2005, 3
  %2007 = add i64 %2000, -224
  %2008 = add i64 %2007, %2006
  %2009 = load double, double* %71, align 1
  %2010 = inttoptr i64 %2008 to double*
  store double %2009, double* %2010
  %2011 = inttoptr i64 %2001 to i32*
  %2012 = load i32, i32* %2011
  %2013 = add i32 %2012, 1
  %2014 = zext i32 %2013 to i64
  store i64 %2014, i64* %9, align 8, !tbaa !1240
  %2015 = inttoptr i64 %2001 to i32*
  store i32 %2013, i32* %2015
  %2016 = add i64 %2002, -18
  br label %block_41f60d

block_41f1ad:                                     ; preds = %block_41f1a6, %block_41f1b7
  %2017 = phi i64 [ %301, %block_41f1a6 ], [ %300, %block_41f1b7 ]
  %2018 = phi %struct.Memory* [ %311, %block_41f1a6 ], [ %2018, %block_41f1b7 ]
  %2019 = inttoptr i64 %1392 to i32*
  %2020 = load i32, i32* %2019
  %2021 = add i32 %2020, -5
  %2022 = lshr i32 %2021, 31
  %2023 = lshr i32 %2020, 31
  %2024 = xor i32 %2022, %2023
  %2025 = add nuw nsw i32 %2024, %2023
  %2026 = icmp eq i32 %2025, 2
  %2027 = icmp ne i32 %2022, 0
  %2028 = xor i1 %2027, %2026
  %2029 = select i1 %2028, i64 10, i64 191
  %2030 = add i64 %2017, %2029
  br i1 %2028, label %block_41f1b7, label %block_41f26c

block_41f0bf:                                     ; preds = %block_41f090
  store i64 1, i64* %14, align 8, !tbaa !1240
  %2031 = add i64 %997, -104255
  %2032 = add i64 %997, 10
  %2033 = load i64, i64* %15, align 8, !tbaa !1240
  %2034 = add i64 %2033, -8
  %2035 = inttoptr i64 %2034 to i64*
  store i64 %2032, i64* %2035
  store i64 %2034, i64* %15, align 8, !tbaa !1240
  %2036 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %2031, %struct.Memory* %981)
  %2037 = load i64, i64* %16, align 8
  %2038 = load i64, i64* %3, align 8
  br label %block_41f0c9

block_41f60d:                                     ; preds = %block_41f606, %block_41f617
  %2039 = phi i64 [ %2150, %block_41f606 ], [ %2016, %block_41f617 ]
  %2040 = phi i64 [ %2148, %block_41f606 ], [ %2000, %block_41f617 ]
  %2041 = phi %struct.Memory* [ %1522, %block_41f606 ], [ %1999, %block_41f617 ]
  %2042 = add i64 %2040, -72
  %2043 = inttoptr i64 %2042 to i32*
  %2044 = load i32, i32* %2043
  %2045 = add i32 %2044, -10
  %2046 = icmp ult i32 %2044, 10
  %2047 = zext i1 %2046 to i8
  store i8 %2047, i8* %48, align 1, !tbaa !1248
  %2048 = and i32 %2045, 255
  %2049 = tail call i32 @llvm.ctpop.i32(i32 %2048) #11
  %2050 = trunc i32 %2049 to i8
  %2051 = and i8 %2050, 1
  %2052 = xor i8 %2051, 1
  store i8 %2052, i8* %49, align 1, !tbaa !1261
  %2053 = xor i32 %2045, %2044
  %2054 = lshr i32 %2053, 4
  %2055 = trunc i32 %2054 to i8
  %2056 = and i8 %2055, 1
  store i8 %2056, i8* %50, align 1, !tbaa !1262
  %2057 = icmp eq i32 %2045, 0
  %2058 = zext i1 %2057 to i8
  store i8 %2058, i8* %51, align 1, !tbaa !1263
  %2059 = lshr i32 %2045, 31
  %2060 = trunc i32 %2059 to i8
  store i8 %2060, i8* %52, align 1, !tbaa !1264
  %2061 = lshr i32 %2044, 31
  %2062 = xor i32 %2059, %2061
  %2063 = add nuw nsw i32 %2062, %2061
  %2064 = icmp eq i32 %2063, 2
  %2065 = zext i1 %2064 to i8
  store i8 %2065, i8* %53, align 1, !tbaa !1265
  %2066 = icmp ne i8 %2060, 0
  %2067 = xor i1 %2066, %2064
  %2068 = or i1 %2057, %2067
  %2069 = select i1 %2068, i64 10, i64 45
  %2070 = add i64 %2039, %2069
  br i1 %2068, label %block_41f617, label %block_41f63a

block_41f40a:                                     ; preds = %block_41f3e5
  %2071 = zext i32 %168 to i64
  store i64 %2071, i64* %9, align 8, !tbaa !1240
  %2072 = sext i32 %168 to i64
  %2073 = lshr i64 %2072, 32
  store i64 %2073, i64* %12, align 8, !tbaa !1240
  %2074 = add i64 %179, 11
  store i64 %2074, i64* %3, align 8
  %2075 = load i32, i32* bitcast (%fre_type* @fre to i32*)
  %2076 = sext i32 %2075 to i64
  %2077 = shl nuw i64 %2073, 32
  %2078 = or i64 %2077, %2071
  %2079 = sdiv i64 %2078, %2076
  %2080 = shl i64 %2079, 32
  %2081 = ashr exact i64 %2080, 32
  %2082 = icmp eq i64 %2079, %2081
  br i1 %2082, label %2088, label %2083

; <label>:2083:                                   ; preds = %block_41f40a
  %2084 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2074, %struct.Memory* %161) #14
  %2085 = load i64, i64* %9, align 8
  %2086 = load i64, i64* %3, align 8
  %2087 = load i64, i64* %16, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:2088:                                   ; preds = %block_41f40a
  %2089 = srem i64 %2078, %2076
  %2090 = and i64 %2079, 4294967295
  %2091 = and i64 %2089, 4294967295
  store i64 %2091, i64* %1947, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %2088, %2083
  %2092 = phi i64 [ %2087, %2083 ], [ %165, %2088 ]
  %2093 = phi i64 [ %2086, %2083 ], [ %2074, %2088 ]
  %2094 = phi i64 [ %2085, %2083 ], [ %2090, %2088 ]
  %2095 = phi %struct.Memory* [ %2084, %2083 ], [ %161, %2088 ]
  %2096 = load i32, i32* bitcast (%fre_type* @fre to i32*)
  %2097 = shl i64 %2094, 32
  %2098 = ashr exact i64 %2097, 32
  %2099 = sext i32 %2096 to i64
  %2100 = mul nsw i64 %2099, %2098
  %2101 = trunc i64 %2100 to i32
  %2102 = add i64 %2092, -60
  %2103 = inttoptr i64 %2102 to i32*
  %2104 = load i32, i32* %2103
  %2105 = sub i32 %2101, %2104
  %2106 = icmp eq i32 %2105, 0
  %2107 = select i1 %2106, i64 17, i64 50
  %2108 = add i64 %2093, %2107
  br i1 %2106, label %block_41f426, label %block_41f447

block_41f119:                                     ; preds = %block_41f109
  %2109 = sext i32 %1814 to i64
  %2110 = mul nsw i64 %2109, 1000
  %2111 = add i64 %2110, ptrtoint (%ta2_type* @ta2 to i64)
  %2112 = add i64 %2110, ptrtoint (%ta1_type* @ta1 to i64)
  %2113 = load i64, i64* %16, align 8
  %2114 = add i64 %2113, -64
  %2115 = inttoptr i64 %2114 to i32*
  %2116 = load i32, i32* %2115
  %2117 = sext i32 %2116 to i64
  %2118 = shl nsw i64 %2117, 2
  %2119 = add i64 %2118, ptrtoint (%size_e_type* @size_e to i64)
  %2120 = inttoptr i64 %2119 to i32*
  %2121 = load i32, i32* %2120
  %2122 = zext i32 %2121 to i64
  store i64 %2122, i64* %12, align 8, !tbaa !1240
  store i64 %2111, i64* %14, align 8, !tbaa !1240
  store i64 %2112, i64* %13, align 8, !tbaa !1240
  %2123 = add i64 %1828, -93737
  %2124 = add i64 %1828, 70
  %2125 = load i64, i64* %15, align 8, !tbaa !1240
  %2126 = add i64 %2125, -8
  %2127 = inttoptr i64 %2126 to i64*
  store i64 %2124, i64* %2127
  store i64 %2126, i64* %15, align 8, !tbaa !1240
  %2128 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %2123, %struct.Memory* %1811)
  %2129 = load i64, i64* %16, align 8
  %2130 = add i64 %2129, -64
  %2131 = load i64, i64* %3, align 8
  %2132 = inttoptr i64 %2130 to i32*
  %2133 = load i32, i32* %2132
  %2134 = add i32 %2133, 1
  %2135 = inttoptr i64 %2130 to i32*
  store i32 %2134, i32* %2135
  %2136 = add i64 %2131, -86
  br label %block_41f109

block_41f2fe:                                     ; preds = %block_41f2f4
  %2137 = sext i32 %579 to i64
  %2138 = mul nsw i64 %2137, 24
  %2139 = add i64 %2138, ptrtoint (%cbc_type* @cbc to i64)
  %2140 = sext i32 %565 to i64
  store i64 %2140, i64* %11, align 8, !tbaa !1240
  %2141 = shl nsw i64 %2140, 2
  %2142 = add i64 %2141, %2139
  %2143 = inttoptr i64 %2142 to i32*
  %2144 = load i32, i32* %2143
  %2145 = icmp eq i32 %2144, 0
  %2146 = select i1 %2145, i64 35, i64 73
  %2147 = add i64 %576, %2146
  br i1 %2145, label %block_41f321, label %block_41f347

block_41f606:                                     ; preds = %block_41f475
  %2148 = load i64, i64* %16, align 8
  %2149 = add i64 %2148, -72
  %2150 = add i64 %1527, 7
  %2151 = inttoptr i64 %2149 to i32*
  store i32 1, i32* %2151
  br label %block_41f60d
}

; Function Attrs: noinline
define %struct.Memory* @sub_4059b0_elapsed_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4059b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %5, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %6, align 8, !tbaa !1240
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %9, -16
  store i64 %18, i64* %4, align 8, !tbaa !1240
  %19 = add i64 %1, 109008
  %20 = add i64 %1, 17
  %21 = add i64 %9, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %23 = tail call %struct.Memory* @sub_420380_wtime_(%struct.State* nonnull %0, i64 %19, %struct.Memory* %2)
  %24 = load i64, i64* %6, align 8
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to double*
  %27 = load double, double* %26
  %28 = bitcast %union.VectorReg* %7 to double*
  store double %27, double* %28, align 1, !tbaa !1246
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !1246
  %31 = load i64, i64* %5, align 8
  %32 = add i64 %31, 16
  %33 = icmp ugt i64 %31, -17
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %12, align 1, !tbaa !1248
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #11
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %13, align 1, !tbaa !1261
  %41 = xor i64 %31, 16
  %42 = xor i64 %41, %32
  %43 = lshr i64 %42, 4
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* %14, align 1, !tbaa !1262
  %46 = icmp eq i64 %32, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %15, align 1, !tbaa !1263
  %48 = lshr i64 %32, 63
  %49 = trunc i64 %48 to i8
  store i8 %49, i8* %16, align 1, !tbaa !1264
  %50 = lshr i64 %31, 63
  %51 = xor i64 %48, %50
  %52 = add nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1265
  %55 = add i64 %31, 24
  %56 = inttoptr i64 %32 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %6, align 8, !tbaa !1240
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %3, align 8, !tbaa !1240
  %60 = add i64 %31, 32
  store i64 %60, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %23
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4042d0_remapz(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4042d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %8, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %7, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -32
  %24 = load i64, i64* %6, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %14, -40
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = add i64 %14, -36
  %32 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast [32 x %union.VectorReg]* %11 to i32*
  %35 = getelementptr inbounds i8, i8* %32, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = bitcast i64* %33 to i32*
  %38 = getelementptr inbounds i8, i8* %32, i64 12
  %39 = bitcast i8* %38 to i32*
  %40 = add i64 %14, -16
  %41 = bitcast %union.VectorReg* %12 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast i64* %42 to double*
  %44 = add i64 %14, -32
  %45 = bitcast [32 x %union.VectorReg]* %11 to double*
  %46 = add i64 %14, -44
  %47 = bitcast i64* %33 to double*
  %48 = add i64 %14, -24
  br label %block_4042e7

block_40435a:                                     ; preds = %block_404302, %block_404364
  %49 = phi %struct.Memory* [ %128, %block_404302 ], [ %49, %block_404364 ]
  %50 = inttoptr i64 %46 to i32*
  %51 = load i32, i32* %50
  %52 = add i32 %51, -5
  %53 = lshr i32 %52, 31
  %54 = lshr i32 %51, 31
  %55 = xor i32 %53, %54
  %56 = add nuw nsw i32 %55, %54
  %57 = icmp eq i32 %56, 2
  %58 = icmp ne i32 %53, 0
  %59 = xor i1 %58, %57
  br i1 %59, label %block_404364, label %block_4043e5

block_404453:                                     ; preds = %block_404449
  %60 = inttoptr i64 %44 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %61, 600
  %63 = inttoptr i64 %26 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  %66 = mul nsw i64 %65, 40
  %67 = add i64 %66, %62
  %68 = inttoptr i64 %31 to i32*
  %69 = load i32, i32* %68
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 3
  %72 = add i64 %71, %67
  %73 = inttoptr i64 %72 to double*
  %74 = load double, double* %73
  %75 = sext i32 %119 to i64
  %76 = shl nsw i64 %75, 3
  %77 = add i64 %76, ptrtoint (%map4_type* @map4 to i64)
  %78 = inttoptr i64 %77 to double*
  %79 = load double, double* %78
  %80 = inttoptr i64 %48 to i64*
  %81 = load i64, i64* %80
  %82 = mul nsw i64 %75, 200
  %83 = add i64 %82, %81
  %84 = add i64 %66, %83
  %85 = add i64 %71, %84
  %86 = inttoptr i64 %85 to double*
  %87 = load double, double* %86
  %88 = fmul double %79, %87
  store double %88, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %89 = fadd double %74, %88
  store double %89, double* %45, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %90 = inttoptr i64 %72 to double*
  store double %89, double* %90
  %91 = inttoptr i64 %46 to i32*
  %92 = load i32, i32* %91
  %93 = add i32 %92, 1
  %94 = inttoptr i64 %46 to i32*
  store i32 %93, i32* %94
  br label %block_404449

block_404531:                                     ; preds = %block_4042e7
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %98 = icmp ult i32 %166, 5
  %99 = zext i1 %98 to i8
  %100 = and i32 %167, 255
  %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #11
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = xor i32 %167, %166
  %106 = lshr i32 %105, 4
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = icmp eq i32 %167, 0
  %110 = zext i1 %109 to i8
  %111 = zext i1 %173 to i8
  store i8 %99, i8* %28, align 1, !tbaa !1248
  store i8 %104, i8* %95, align 1, !tbaa !1261
  store i8 %108, i8* %29, align 1, !tbaa !1262
  store i8 %110, i8* %96, align 1, !tbaa !1263
  store i8 %169, i8* %30, align 1, !tbaa !1264
  store i8 %111, i8* %97, align 1, !tbaa !1265
  %112 = inttoptr i64 %15 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %10, align 8, !tbaa !1240
  %114 = inttoptr i64 %14 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %3, align 8, !tbaa !1240
  %116 = add i64 %14, 8
  store i64 %116, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %164

block_404449:                                     ; preds = %block_4043e5, %block_404453
  %117 = phi %struct.Memory* [ %49, %block_4043e5 ], [ %117, %block_404453 ]
  %118 = inttoptr i64 %46 to i32*
  %119 = load i32, i32* %118
  %120 = add i32 %119, -5
  %121 = lshr i32 %120, 31
  %122 = lshr i32 %119, 31
  %123 = xor i32 %121, %122
  %124 = add nuw nsw i32 %123, %122
  %125 = icmp eq i32 %124, 2
  %126 = icmp ne i32 %121, 0
  %127 = xor i1 %126, %125
  br i1 %127, label %block_404453, label %block_4044d4

block_4042f8:                                     ; preds = %block_4042f1, %block_4044d4
  %128 = phi %struct.Memory* [ %164, %block_4042f1 ], [ %117, %block_4044d4 ]
  %129 = inttoptr i64 %31 to i32*
  %130 = load i32, i32* %129
  %131 = add i32 %130, -5
  %132 = lshr i32 %131, 31
  %133 = lshr i32 %130, 31
  %134 = xor i32 %132, %133
  %135 = add nuw nsw i32 %134, %133
  %136 = icmp eq i32 %135, 2
  %137 = icmp ne i32 %132, 0
  %138 = xor i1 %137, %136
  br i1 %138, label %block_404302, label %block_40451e

block_4044d4:                                     ; preds = %block_404449
  %139 = inttoptr i64 %48 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %140, 800
  %142 = inttoptr i64 %26 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  %145 = mul nsw i64 %144, 40
  %146 = add i64 %145, %141
  %147 = inttoptr i64 %31 to i32*
  %148 = load i32, i32* %147
  %149 = sext i32 %148 to i64
  %150 = shl nsw i64 %149, 3
  %151 = add i64 %150, %146
  %152 = inttoptr i64 %151 to double*
  %153 = load double, double* %152
  store double %153, double* %45, align 1, !tbaa !1246
  store double 0.000000e+00, double* %47, align 1, !tbaa !1246
  %154 = inttoptr i64 %44 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %155, 800
  %157 = add i64 %145, %156
  store i64 %149, i64* %5, align 8, !tbaa !1240
  %158 = add i64 %150, %157
  %159 = inttoptr i64 %158 to double*
  store double %153, double* %159
  %160 = inttoptr i64 %31 to i32*
  %161 = load i32, i32* %160
  %162 = add i32 %161, 1
  %163 = inttoptr i64 %31 to i32*
  store i32 %162, i32* %163
  br label %block_4042f8

block_4042e7:                                     ; preds = %block_40451e, %block_4042d0
  %164 = phi %struct.Memory* [ %2, %block_4042d0 ], [ %128, %block_40451e ]
  %165 = inttoptr i64 %26 to i32*
  %166 = load i32, i32* %165
  %167 = add i32 %166, -5
  %168 = lshr i32 %167, 31
  %169 = trunc i32 %168 to i8
  %170 = lshr i32 %166, 31
  %171 = xor i32 %168, %170
  %172 = add nuw nsw i32 %171, %170
  %173 = icmp eq i32 %172, 2
  %174 = icmp ne i8 %169, 0
  %175 = xor i1 %174, %173
  br i1 %175, label %block_4042f1, label %block_404531

block_4043e5:                                     ; preds = %block_40435a
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  %176 = inttoptr i64 %40 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %177, 800
  %179 = inttoptr i64 %26 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %181, 40
  %183 = add i64 %182, %178
  %184 = inttoptr i64 %31 to i32*
  %185 = load i32, i32* %184
  %186 = sext i32 %185 to i64
  %187 = shl nsw i64 %186, 3
  %188 = add i64 %187, %183
  %189 = inttoptr i64 %188 to double*
  %190 = load double, double* %189
  store double %190, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %191 = inttoptr i64 %44 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %192, 400
  %194 = add i64 %182, %193
  %195 = add i64 %187, %194
  %196 = inttoptr i64 %195 to double*
  store double %190, double* %196
  %197 = inttoptr i64 %44 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %198, 600
  %200 = inttoptr i64 %26 to i32*
  %201 = load i32, i32* %200
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %202, 40
  %204 = add i64 %203, %199
  %205 = inttoptr i64 %31 to i32*
  %206 = load i32, i32* %205
  %207 = sext i32 %206 to i64
  %208 = shl nsw i64 %207, 3
  %209 = add i64 %208, %204
  %210 = load double, double* %45, align 1
  %211 = inttoptr i64 %209 to double*
  store double %210, double* %211
  %212 = inttoptr i64 %46 to i32*
  store i32 0, i32* %212
  br label %block_404449

block_40451e:                                     ; preds = %block_4042f8
  %213 = inttoptr i64 %26 to i32*
  %214 = load i32, i32* %213
  %215 = add i32 %214, 1
  %216 = zext i32 %215 to i64
  store i64 %216, i64* %4, align 8, !tbaa !1240
  %217 = inttoptr i64 %26 to i32*
  store i32 %215, i32* %217
  br label %block_4042e7

block_404364:                                     ; preds = %block_40435a
  %218 = inttoptr i64 %44 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %219, 200
  %221 = inttoptr i64 %26 to i32*
  %222 = load i32, i32* %221
  %223 = sext i32 %222 to i64
  %224 = mul nsw i64 %223, 40
  %225 = add i64 %224, %220
  %226 = inttoptr i64 %31 to i32*
  %227 = load i32, i32* %226
  %228 = sext i32 %227 to i64
  %229 = shl nsw i64 %228, 3
  %230 = add i64 %229, %225
  %231 = inttoptr i64 %230 to double*
  %232 = load double, double* %231
  %233 = sext i32 %51 to i64
  %234 = shl nsw i64 %233, 3
  %235 = add i64 %234, ptrtoint (%map2_type* @map2 to i64)
  %236 = inttoptr i64 %235 to double*
  %237 = load double, double* %236
  %238 = inttoptr i64 %40 to i64*
  %239 = load i64, i64* %238
  %240 = mul nsw i64 %233, 200
  %241 = add i64 %240, %239
  %242 = add i64 %224, %241
  %243 = add i64 %229, %242
  %244 = inttoptr i64 %243 to double*
  %245 = load double, double* %244
  %246 = fmul double %237, %245
  store double %246, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %247 = fadd double %232, %246
  store double %247, double* %45, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %248 = inttoptr i64 %230 to double*
  store double %247, double* %248
  %249 = inttoptr i64 %46 to i32*
  %250 = load i32, i32* %249
  %251 = add i32 %250, 1
  %252 = inttoptr i64 %46 to i32*
  store i32 %251, i32* %252
  br label %block_40435a

block_4042f1:                                     ; preds = %block_4042e7
  %253 = inttoptr i64 %31 to i32*
  store i32 0, i32* %253
  br label %block_4042f8

block_404302:                                     ; preds = %block_4042f8
  store i32 0, i32* %34, align 1, !tbaa !1244
  store i32 0, i32* %36, align 1, !tbaa !1244
  store i32 0, i32* %37, align 1, !tbaa !1244
  store i32 0, i32* %39, align 1, !tbaa !1244
  %254 = inttoptr i64 %40 to i64*
  %255 = load i64, i64* %254
  %256 = inttoptr i64 %26 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 40
  %260 = add i64 %259, %255
  %261 = sext i32 %130 to i64
  %262 = shl nsw i64 %261, 3
  %263 = add i64 %262, %260
  %264 = inttoptr i64 %263 to double*
  %265 = load double, double* %264
  store double %265, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %266 = inttoptr i64 %44 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %259, %267
  %269 = add i64 %262, %268
  %270 = inttoptr i64 %269 to double*
  store double %265, double* %270
  %271 = inttoptr i64 %44 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %272, 200
  %274 = inttoptr i64 %26 to i32*
  %275 = load i32, i32* %274
  %276 = sext i32 %275 to i64
  %277 = mul nsw i64 %276, 40
  %278 = add i64 %277, %273
  %279 = inttoptr i64 %31 to i32*
  %280 = load i32, i32* %279
  %281 = sext i32 %280 to i64
  %282 = shl nsw i64 %281, 3
  %283 = add i64 %282, %278
  %284 = load double, double* %45, align 1
  %285 = inttoptr i64 %283 to double*
  store double %284, double* %285
  %286 = inttoptr i64 %46 to i32*
  store i32 0, i32* %286
  br label %block_40435a
}

; Function Attrs: noinline
define %struct.Memory* @sub_417a30_prepwork(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_417a30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  %25 = bitcast [32 x %union.VectorReg]* %11 to double*
  store double %24, double* %25, align 1, !tbaa !1246
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %27 = bitcast i64* %26 to double*
  store double 0.000000e+00, double* %27, align 1, !tbaa !1246
  %28 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %29 = sext i32 %28 to i64
  %30 = mul nsw i64 %29, 125
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* bitcast (%ntot_type* @ntot to i32*)
  %32 = add i64 %1, 36
  %33 = add i64 %14, -48
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %8, align 8, !alias.scope !1814, !noalias !1817
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %3, align 8, !alias.scope !1814, !noalias !1817
  store i64 %17, i64* %9, align 8, !alias.scope !1814, !noalias !1817
  %38 = tail call i64 @log(i64 %35), !noalias !1814
  %39 = load i64, i64* %3, align 8
  %40 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %41 = bitcast %union.VectorReg* %12 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast i64* %42 to double*
  %44 = load double, double* %25, align 1
  %45 = fdiv double %40, %44
  store double %45, double* %41, align 1, !tbaa !1246
  store i64 0, i64* %42, align 1, !tbaa !1246
  %46 = load i64, i64* %10, align 8
  %47 = add i64 %46, -32
  %48 = inttoptr i64 %47 to double*
  store double %45, double* %48
  %49 = add i64 %46, -12
  %50 = add i64 %39, 24
  %51 = inttoptr i64 %49 to i32*
  store i32 0, i32* %51
  %52 = load i64, i64* %8, align 8
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  br label %block_417a6c

block_417b7e:                                     ; preds = %block_417b40
  %54 = add i64 %844, -12
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = add i32 %56, 1
  %58 = inttoptr i64 %54 to i32*
  store i32 %57, i32* %58
  %59 = add i64 %859, -130
  br label %block_417afc

block_41817d:                                     ; preds = %block_418187, %block_41816f
  %60 = phi %struct.Memory* [ %105, %block_41816f ], [ %60, %block_418187 ]
  %61 = inttoptr i64 %701 to i32*
  %62 = load i32, i32* %61
  %63 = add i32 %62, -4
  %64 = lshr i32 %63, 31
  %65 = lshr i32 %62, 31
  %66 = xor i32 %64, %65
  %67 = add nuw nsw i32 %66, %65
  %68 = icmp eq i32 %67, 2
  %69 = icmp ne i32 %64, 0
  %70 = xor i1 %69, %68
  br i1 %70, label %block_418187, label %block_4181da

block_417c75:                                     ; preds = %block_417c18
  %71 = inttoptr i64 %701 to i32*
  %72 = load i32, i32* %71
  %73 = add i32 %72, 1
  %74 = inttoptr i64 %701 to i32*
  store i32 %73, i32* %74
  br label %block_417c07

block_417ef3:                                     ; preds = %block_417ee9
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %75 = inttoptr i64 %697 to i32*
  %76 = load i32, i32* %75
  %77 = sext i32 %76 to i64
  %78 = mul nsw i64 %77, 2400
  %79 = add i64 %78, ptrtoint (%idmo_type* @idmo to i64)
  %80 = inttoptr i64 %699 to i32*
  %81 = load i32, i32* %80
  %82 = sext i32 %81 to i64
  %83 = mul nsw i64 %82, 400
  %84 = add i64 %83, %79
  %85 = add i64 %84, 200
  %86 = sext i32 %259 to i64
  %87 = mul nsw i64 %86, 20
  %88 = add i64 %87, %85
  %89 = inttoptr i64 %702 to i32*
  %90 = load i32, i32* %89
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 2
  %93 = add i64 %92, %88
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = sext i32 %95 to i64
  %97 = shl nsw i64 %96, 3
  %98 = add i64 %97, ptrtoint (%tmmor_type* @tmmor to i64)
  %99 = load double, double* %25, align 1
  %100 = inttoptr i64 %98 to double*
  store double %99, double* %100
  %101 = inttoptr i64 %701 to i32*
  %102 = load i32, i32* %101
  %103 = add i32 %102, 1
  %104 = inttoptr i64 %701 to i32*
  store i32 %103, i32* %104
  br label %block_417ee9

block_41816f.loopexit:                            ; preds = %block_418032
  br label %block_41816f

block_41816f.loopexit251:                         ; preds = %block_418103
  br label %block_41816f

block_41816f:                                     ; preds = %block_41816f.loopexit251, %block_41816f.loopexit
  %105 = phi %struct.Memory* [ %371, %block_41816f.loopexit ], [ %676, %block_41816f.loopexit251 ]
  %106 = inttoptr i64 %702 to i32*
  store i32 0, i32* %106
  %107 = inttoptr i64 %701 to i32*
  store i32 1, i32* %107
  br label %block_41817d

block_417a6c:                                     ; preds = %block_417a7c, %block_417a30
  %108 = phi i64 [ %50, %block_417a30 ], [ %316, %block_417a7c ]
  %109 = phi i64 [ %46, %block_417a30 ], [ %313, %block_417a7c ]
  %110 = phi %struct.Memory* [ %2, %block_417a30 ], [ %110, %block_417a7c ]
  %111 = add i64 %109, -12
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112
  %114 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %115 = sub i32 %113, %114
  %116 = lshr i32 %115, 31
  %117 = trunc i32 %116 to i8
  %118 = lshr i32 %113, 31
  %119 = lshr i32 %114, 31
  %120 = xor i32 %119, %118
  %121 = xor i32 %116, %118
  %122 = add nuw nsw i32 %121, %120
  %123 = icmp eq i32 %122, 2
  %124 = icmp ne i8 %117, 0
  %125 = xor i1 %124, %123
  %126 = select i1 %125, i64 16, i64 137
  %127 = add i64 %108, %126
  br i1 %125, label %block_417a7c, label %block_417af5

block_41803c:                                     ; preds = %block_418032
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %128 = inttoptr i64 %697 to i32*
  %129 = load i32, i32* %128
  %130 = sext i32 %129 to i64
  %131 = mul nsw i64 %130, 2400
  %132 = add i64 %131, ptrtoint (%idmo_type* @idmo to i64)
  %133 = inttoptr i64 %699 to i32*
  %134 = load i32, i32* %133
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, 400
  %137 = add i64 %136, %132
  %138 = inttoptr i64 %701 to i32*
  %139 = load i32, i32* %138
  %140 = sext i32 %139 to i64
  %141 = mul nsw i64 %140, 20
  %142 = add i64 %141, %137
  %143 = sext i32 %373 to i64
  %144 = shl nsw i64 %143, 2
  %145 = add i64 %144, %142
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146
  %148 = sext i32 %147 to i64
  %149 = shl nsw i64 %148, 3
  %150 = add i64 %149, ptrtoint (%tmmor_type* @tmmor to i64)
  %151 = load double, double* %25, align 1
  %152 = inttoptr i64 %150 to double*
  store double %151, double* %152
  %153 = inttoptr i64 %702 to i32*
  %154 = load i32, i32* %153
  %155 = add i32 %154, 1
  %156 = inttoptr i64 %702 to i32*
  store i32 %155, i32* %156
  br label %block_418032

block_418187:                                     ; preds = %block_41817d
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %157 = inttoptr i64 %697 to i32*
  %158 = load i32, i32* %157
  %159 = sext i32 %158 to i64
  %160 = mul nsw i64 %159, 2400
  %161 = add i64 %160, ptrtoint (%idmo_type* @idmo to i64)
  %162 = inttoptr i64 %699 to i32*
  %163 = load i32, i32* %162
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %164, 400
  %166 = add i64 %165, %161
  %167 = sext i32 %62 to i64
  %168 = mul nsw i64 %167, 20
  %169 = add i64 %168, %166
  %170 = inttoptr i64 %702 to i32*
  %171 = load i32, i32* %170
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 2
  %174 = add i64 %173, %169
  %175 = inttoptr i64 %174 to i32*
  %176 = load i32, i32* %175
  %177 = sext i32 %176 to i64
  %178 = shl nsw i64 %177, 3
  %179 = add i64 %178, ptrtoint (%tmmor_type* @tmmor to i64)
  %180 = load double, double* %25, align 1
  %181 = inttoptr i64 %179 to double*
  store double %180, double* %181
  %182 = inttoptr i64 %701 to i32*
  %183 = load i32, i32* %182
  %184 = add i32 %183, 1
  %185 = inttoptr i64 %701 to i32*
  store i32 %184, i32* %185
  br label %block_41817d

block_418256:                                     ; preds = %block_41824c
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %186 = inttoptr i64 %697 to i32*
  %187 = load i32, i32* %186
  %188 = sext i32 %187 to i64
  %189 = mul nsw i64 %188, 2400
  %190 = add i64 %189, ptrtoint (%idmo_type* @idmo to i64)
  %191 = inttoptr i64 %699 to i32*
  %192 = load i32, i32* %191
  %193 = sext i32 %192 to i64
  %194 = mul nsw i64 %193, 400
  %195 = add i64 %194, %190
  %196 = add i64 %195, 100
  %197 = sext i32 %248 to i64
  %198 = mul nsw i64 %197, 20
  %199 = add i64 %198, %196
  %200 = inttoptr i64 %702 to i32*
  %201 = load i32, i32* %200
  %202 = sext i32 %201 to i64
  store i64 %202, i64* %5, align 8, !tbaa !1240
  %203 = shl nsw i64 %202, 2
  %204 = add i64 %203, %199
  %205 = inttoptr i64 %204 to i32*
  %206 = load i32, i32* %205
  %207 = sext i32 %206 to i64
  %208 = shl nsw i64 %207, 3
  %209 = add i64 %208, ptrtoint (%tmmor_type* @tmmor to i64)
  %210 = load double, double* %25, align 1
  %211 = inttoptr i64 %209 to double*
  store double %210, double* %211
  %212 = inttoptr i64 %701 to i32*
  %213 = load i32, i32* %212
  %214 = add i32 %213, 1
  %215 = inttoptr i64 %701 to i32*
  store i32 %214, i32* %215
  br label %block_41824c

block_417f53:                                     ; preds = %block_417f5d, %block_417f4c
  %216 = phi %struct.Memory* [ %257, %block_417f4c ], [ %216, %block_417f5d ]
  %217 = inttoptr i64 %701 to i32*
  %218 = load i32, i32* %217
  %219 = add i32 %218, -5
  %220 = lshr i32 %219, 31
  %221 = lshr i32 %218, 31
  %222 = xor i32 %220, %221
  %223 = add nuw nsw i32 %222, %221
  %224 = icmp eq i32 %223, 2
  %225 = icmp ne i32 %220, 0
  %226 = xor i1 %225, %224
  br i1 %226, label %block_417f5d, label %block_417fbf.loopexit

block_417e51:                                     ; preds = %block_417e47
  %227 = sext i32 %726 to i64
  %228 = mul nsw i64 %227, 20
  %229 = add i64 %228, %744
  %230 = inttoptr i64 %702 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  %233 = shl nsw i64 %232, 2
  %234 = add i64 %233, %229
  %235 = inttoptr i64 %234 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  %238 = shl nsw i64 %237, 3
  %239 = add i64 %238, ptrtoint (%tmmor_type* @tmmor to i64)
  %240 = load double, double* %25, align 1
  %241 = inttoptr i64 %239 to double*
  store double %240, double* %241
  %242 = inttoptr i64 %701 to i32*
  %243 = load i32, i32* %242
  %244 = add i32 %243, 1
  %245 = inttoptr i64 %701 to i32*
  store i32 %244, i32* %245
  br label %block_417e47

block_41824c:                                     ; preds = %block_41820a, %block_418256
  %246 = phi %struct.Memory* [ %60, %block_41820a ], [ %246, %block_418256 ]
  %247 = inttoptr i64 %701 to i32*
  %248 = load i32, i32* %247
  %249 = add i32 %248, -4
  %250 = lshr i32 %249, 31
  %251 = lshr i32 %248, 31
  %252 = xor i32 %250, %251
  %253 = add nuw nsw i32 %252, %251
  %254 = icmp eq i32 %253, 2
  %255 = icmp ne i32 %250, 0
  %256 = xor i1 %255, %254
  br i1 %256, label %block_418256, label %block_4182b7.loopexit

block_417ee9:                                     ; preds = %block_417ee9.preheader, %block_417ef3
  %257 = phi %struct.Memory* [ %257, %block_417ef3 ], [ %860, %block_417ee9.preheader ]
  %258 = inttoptr i64 %701 to i32*
  %259 = load i32, i32* %258
  %260 = add i32 %259, -5
  %261 = lshr i32 %260, 31
  %262 = lshr i32 %259, 31
  %263 = xor i32 %261, %262
  %264 = add nuw nsw i32 %263, %262
  %265 = icmp eq i32 %264, 2
  %266 = icmp ne i32 %261, 0
  %267 = xor i1 %266, %265
  br i1 %267, label %block_417ef3, label %block_417f4c

block_417f4c:                                     ; preds = %block_417ee9
  %268 = inttoptr i64 %701 to i32*
  store i32 0, i32* %268
  br label %block_417f53

block_417bc6:                                     ; preds = %block_417bb6
  %269 = inttoptr i64 %699 to i32*
  store i32 0, i32* %269
  br label %block_417bcd

block_417a7c:                                     ; preds = %block_417a6c
  %270 = sext i32 %113 to i64
  %271 = shl nsw i64 %270, 6
  %272 = add i64 %271, ptrtoint (%xc_type* @xc to i64)
  store i64 %272, i64* %6, align 8, !tbaa !1240
  %273 = add i64 %271, add (i64 ptrtoint (%xc_type* @xc to i64), i64 8)
  %274 = inttoptr i64 %273 to double*
  %275 = load double, double* %274
  %276 = inttoptr i64 %272 to double*
  %277 = load double, double* %276
  %278 = fsub double %275, %277
  store double %278, double* %25, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %279 = add i64 %127, 49
  %280 = load i64, i64* %9, align 8, !tbaa !1240
  %281 = add i64 %280, -8
  %282 = inttoptr i64 %281 to i64*
  store i64 %279, i64* %282
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %3, align 8, !alias.scope !1819, !noalias !1822
  store i64 %280, i64* %9, align 8, !alias.scope !1819, !noalias !1822
  %285 = tail call i64 @log(i64 %52), !noalias !1819
  %286 = load i64, i64* %3, align 8
  %287 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1936) to double*)
  store double %287, double* %41, align 1, !tbaa !1246
  store double 0.000000e+00, double* %43, align 1, !tbaa !1246
  %288 = load i64, i64* %53, align 1
  %289 = xor i64 %288, -9223372036854775808
  store i64 %289, i64* %5, align 8, !tbaa !1240
  %290 = load i64, i64* %10, align 8
  %291 = add i64 %290, -32
  %292 = bitcast i64 %289 to double
  %293 = inttoptr i64 %291 to double*
  %294 = load double, double* %293
  %295 = fmul double %292, %294
  %296 = fadd double %295, %287
  store double %296, double* %25, align 1, !tbaa !1246
  store i64 0, i64* %26, align 1, !tbaa !1246
  %297 = tail call double @llvm.trunc.f64(double %296) #11
  %298 = tail call double @llvm.fabs.f64(double %297) #11
  %299 = fcmp ogt double %298, 0x41DFFFFFFFC00000
  %300 = fptosi double %297 to i32
  %301 = add i32 %300, -1
  %302 = select i1 %299, i32 2147483647, i32 %301
  %303 = add i64 %290, -12
  %304 = inttoptr i64 %303 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 2
  %308 = add i64 %307, ptrtoint (%size_e_type* @size_e to i64)
  %309 = inttoptr i64 %308 to i32*
  store i32 %302, i32* %309
  %310 = inttoptr i64 %303 to i32*
  %311 = load i32, i32* %310
  %312 = add i32 %311, 1
  %313 = load i64, i64* %10, align 8
  %314 = add i64 %313, -12
  %315 = inttoptr i64 %314 to i32*
  store i32 %312, i32* %315
  %316 = add i64 %286, -65
  br label %block_417a6c

block_417bcd:                                     ; preds = %block_4182b7, %block_417bc6
  %317 = phi %struct.Memory* [ %330, %block_417bc6 ], [ %745, %block_4182b7 ]
  %318 = inttoptr i64 %699 to i32*
  %319 = load i32, i32* %318
  %320 = add i32 %319, -6
  %321 = lshr i32 %320, 31
  %322 = lshr i32 %319, 31
  %323 = xor i32 %321, %322
  %324 = add nuw nsw i32 %323, %322
  %325 = icmp eq i32 %324, 2
  %326 = icmp ne i32 %321, 0
  %327 = xor i1 %326, %325
  %328 = inttoptr i64 %697 to i32*
  %329 = load i32, i32* %328
  br i1 %327, label %block_417bd7, label %block_4182ca

block_417bb6:                                     ; preds = %block_417b91, %block_4182ca
  %330 = phi %struct.Memory* [ %695, %block_417b91 ], [ %317, %block_4182ca ]
  %331 = inttoptr i64 %697 to i32*
  %332 = load i32, i32* %331
  %333 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %334 = sub i32 %332, %333
  %335 = lshr i32 %334, 31
  %336 = lshr i32 %332, 31
  %337 = lshr i32 %333, 31
  %338 = xor i32 %337, %336
  %339 = xor i32 %335, %336
  %340 = add nuw nsw i32 %339, %338
  %341 = icmp eq i32 %340, 2
  %342 = icmp ne i32 %335, 0
  %343 = xor i1 %342, %341
  br i1 %343, label %block_417bc6, label %block_4182dd

block_417bd7:                                     ; preds = %block_417bcd
  %344 = sext i32 %329 to i64
  %345 = mul nsw i64 %344, 24
  %346 = add i64 %345, ptrtoint (%cbc_type* @cbc to i64)
  %347 = sext i32 %319 to i64
  store i64 %347, i64* %5, align 8, !tbaa !1240
  %348 = shl nsw i64 %347, 2
  %349 = add i64 %348, %346
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %6, align 8, !tbaa !1240
  %353 = inttoptr i64 %700 to i32*
  store i32 %351, i32* %353
  %354 = inttoptr i64 %700 to i32*
  %355 = load i32, i32* %354
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %block_417c00, label %block_4182b7

block_417cf3:                                     ; preds = %block_417c96
  %357 = inttoptr i64 %697 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  %360 = mul nsw i64 %359, 2400
  %361 = add i64 %360, ptrtoint (%idmo_type* @idmo to i64)
  %362 = inttoptr i64 %699 to i32*
  %363 = load i32, i32* %362
  %364 = sext i32 %363 to i64
  %365 = mul nsw i64 %364, 400
  %366 = add i64 %365, %361
  %367 = add i64 %366, 16
  %368 = inttoptr i64 %367 to i32*
  %369 = load i32, i32* %368
  %370 = icmp eq i32 %369, -1
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  br i1 %370, label %block_417d23, label %block_417d61

block_418032:                                     ; preds = %block_418032.preheader, %block_41803c
  %371 = phi %struct.Memory* [ %371, %block_41803c ], [ %641, %block_418032.preheader ]
  %372 = inttoptr i64 %702 to i32*
  %373 = load i32, i32* %372
  %374 = add i32 %373, -4
  %375 = lshr i32 %374, 31
  %376 = lshr i32 %373, 31
  %377 = xor i32 %375, %376
  %378 = add nuw nsw i32 %377, %376
  %379 = icmp eq i32 %378, 2
  %380 = icmp ne i32 %375, 0
  %381 = xor i1 %380, %379
  br i1 %381, label %block_41803c, label %block_41816f.loopexit

block_417f5d:                                     ; preds = %block_417f53
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %382 = inttoptr i64 %697 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = mul nsw i64 %384, 2400
  %386 = add i64 %385, ptrtoint (%idmo_type* @idmo to i64)
  %387 = inttoptr i64 %699 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  %390 = mul nsw i64 %389, 400
  %391 = add i64 %390, %386
  %392 = add i64 %391, 300
  %393 = sext i32 %218 to i64
  %394 = mul nsw i64 %393, 20
  %395 = add i64 %394, %392
  %396 = inttoptr i64 %702 to i32*
  %397 = load i32, i32* %396
  %398 = sext i32 %397 to i64
  %399 = shl nsw i64 %398, 2
  %400 = add i64 %399, %395
  %401 = inttoptr i64 %400 to i32*
  %402 = load i32, i32* %401
  %403 = sext i32 %402 to i64
  %404 = shl nsw i64 %403, 3
  %405 = add i64 %404, ptrtoint (%tmmor_type* @tmmor to i64)
  %406 = load double, double* %25, align 1
  %407 = inttoptr i64 %405 to double*
  store double %406, double* %407
  %408 = inttoptr i64 %701 to i32*
  %409 = load i32, i32* %408
  %410 = add i32 %409, 1
  %411 = inttoptr i64 %701 to i32*
  store i32 %410, i32* %411
  br label %block_417f53

block_4180fc:                                     ; preds = %block_41809b
  %412 = inttoptr i64 %702 to i32*
  store i32 0, i32* %412
  br label %block_418103

block_417d61:                                     ; preds = %block_417cf3
  %413 = sext i32 %369 to i64
  %414 = shl nsw i64 %413, 3
  %415 = add i64 %414, ptrtoint (%tmmor_type* @tmmor to i64)
  %416 = load double, double* %25, align 1
  %417 = inttoptr i64 %415 to double*
  store double %416, double* %417
  %418 = inttoptr i64 %702 to i32*
  store i32 0, i32* %418
  br label %block_417d9e

block_417da8:                                     ; preds = %block_417d9e
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %419 = inttoptr i64 %697 to i32*
  %420 = load i32, i32* %419
  %421 = sext i32 %420 to i64
  %422 = mul nsw i64 %421, 2400
  %423 = add i64 %422, ptrtoint (%idmo_type* @idmo to i64)
  %424 = inttoptr i64 %699 to i32*
  %425 = load i32, i32* %424
  %426 = sext i32 %425 to i64
  %427 = mul nsw i64 %426, 400
  %428 = add i64 %427, %423
  %429 = add i64 %428, 200
  %430 = inttoptr i64 %701 to i32*
  %431 = load i32, i32* %430
  %432 = sext i32 %431 to i64
  %433 = mul nsw i64 %432, 20
  %434 = add i64 %433, %429
  %435 = sext i32 %579 to i64
  %436 = shl nsw i64 %435, 2
  %437 = add i64 %436, %434
  %438 = inttoptr i64 %437 to i32*
  %439 = load i32, i32* %438
  %440 = sext i32 %439 to i64
  %441 = shl nsw i64 %440, 3
  %442 = add i64 %441, ptrtoint (%tmmor_type* @tmmor to i64)
  %443 = load double, double* %25, align 1
  %444 = inttoptr i64 %442 to double*
  store double %443, double* %444
  %445 = inttoptr i64 %702 to i32*
  %446 = load i32, i32* %445
  %447 = add i32 %446, 1
  %448 = inttoptr i64 %702 to i32*
  store i32 %447, i32* %448
  br label %block_417d9e

block_4182dd:                                     ; preds = %block_417bb6
  %449 = zext i32 %332 to i64
  store i64 %449, i64* %4, align 8, !tbaa !1240
  %450 = load i64, i64* %9, align 8
  %451 = add i64 %450, 32
  %452 = icmp ugt i64 %450, -33
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %18, align 1, !tbaa !1248
  %454 = trunc i64 %451 to i32
  %455 = and i32 %454, 255
  %456 = tail call i32 @llvm.ctpop.i32(i32 %455) #11
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  store i8 %459, i8* %19, align 1, !tbaa !1261
  %460 = xor i64 %451, %450
  %461 = lshr i64 %460, 4
  %462 = trunc i64 %461 to i8
  %463 = and i8 %462, 1
  store i8 %463, i8* %20, align 1, !tbaa !1262
  %464 = icmp eq i64 %451, 0
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %21, align 1, !tbaa !1263
  %466 = lshr i64 %451, 63
  %467 = trunc i64 %466 to i8
  store i8 %467, i8* %22, align 1, !tbaa !1264
  %468 = lshr i64 %450, 63
  %469 = xor i64 %466, %468
  %470 = add nuw nsw i64 %469, %466
  %471 = icmp eq i64 %470, 2
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %23, align 1, !tbaa !1265
  %473 = add i64 %450, 40
  %474 = inttoptr i64 %451 to i64*
  %475 = load i64, i64* %474
  store i64 %475, i64* %10, align 8, !tbaa !1240
  %476 = inttoptr i64 %473 to i64*
  %477 = load i64, i64* %476
  store i64 %477, i64* %3, align 8, !tbaa !1240
  %478 = add i64 %450, 48
  store i64 %478, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %330

block_4180a5:                                     ; preds = %block_41809b
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %479 = inttoptr i64 %697 to i32*
  %480 = load i32, i32* %479
  %481 = sext i32 %480 to i64
  %482 = mul nsw i64 %481, 2400
  %483 = add i64 %482, ptrtoint (%idmo_type* @idmo to i64)
  %484 = inttoptr i64 %699 to i32*
  %485 = load i32, i32* %484
  %486 = sext i32 %485 to i64
  %487 = mul nsw i64 %486, 400
  %488 = add i64 %487, %483
  %489 = add i64 %488, 100
  %490 = inttoptr i64 %701 to i32*
  %491 = load i32, i32* %490
  %492 = sext i32 %491 to i64
  %493 = mul nsw i64 %492, 20
  %494 = add i64 %493, %489
  %495 = sext i32 %590 to i64
  %496 = shl nsw i64 %495, 2
  %497 = add i64 %496, %494
  %498 = inttoptr i64 %497 to i32*
  %499 = load i32, i32* %498
  %500 = sext i32 %499 to i64
  %501 = shl nsw i64 %500, 3
  %502 = add i64 %501, ptrtoint (%tmmor_type* @tmmor to i64)
  %503 = load double, double* %25, align 1
  %504 = inttoptr i64 %502 to double*
  store double %503, double* %504
  %505 = inttoptr i64 %702 to i32*
  %506 = load i32, i32* %505
  %507 = add i32 %506, 1
  %508 = inttoptr i64 %702 to i32*
  store i32 %507, i32* %508
  br label %block_41809b

block_417ea4:                                     ; preds = %block_417e47
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %509 = add i64 %744, 396
  %510 = inttoptr i64 %509 to i32*
  %511 = load i32, i32* %510
  %512 = sext i32 %511 to i64
  %513 = shl nsw i64 %512, 3
  %514 = add i64 %513, ptrtoint (%tmmor_type* @tmmor to i64)
  %515 = load double, double* %25, align 1
  %516 = inttoptr i64 %514 to double*
  store double %515, double* %516
  br label %block_417fbf

block_4182ca:                                     ; preds = %block_417bcd
  %517 = add i32 %329, 1
  %518 = inttoptr i64 %697 to i32*
  store i32 %517, i32* %518
  br label %block_417bb6

block_417c22:                                     ; preds = %block_417c18
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %519 = inttoptr i64 %697 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = mul nsw i64 %521, 2400
  %523 = add i64 %522, ptrtoint (%idmo_type* @idmo to i64)
  %524 = inttoptr i64 %699 to i32*
  %525 = load i32, i32* %524
  %526 = sext i32 %525 to i64
  %527 = mul nsw i64 %526, 400
  %528 = add i64 %527, %523
  %529 = inttoptr i64 %701 to i32*
  %530 = load i32, i32* %529
  %531 = sext i32 %530 to i64
  %532 = mul nsw i64 %531, 20
  %533 = add i64 %532, %528
  %534 = sext i32 %621 to i64
  %535 = shl nsw i64 %534, 2
  %536 = add i64 %535, %533
  %537 = inttoptr i64 %536 to i32*
  %538 = load i32, i32* %537
  %539 = sext i32 %538 to i64
  %540 = shl nsw i64 %539, 3
  %541 = add i64 %540, ptrtoint (%tmmor_type* @tmmor to i64)
  %542 = load double, double* %25, align 1
  %543 = inttoptr i64 %541 to double*
  store double %542, double* %543
  %544 = inttoptr i64 %702 to i32*
  %545 = load i32, i32* %544
  %546 = add i32 %545, 1
  %547 = inttoptr i64 %702 to i32*
  store i32 %546, i32* %547
  br label %block_417c18

block_417ca0:                                     ; preds = %block_417c96
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %548 = inttoptr i64 %697 to i32*
  %549 = load i32, i32* %548
  %550 = sext i32 %549 to i64
  %551 = mul nsw i64 %550, 2400
  %552 = add i64 %551, ptrtoint (%idmo_type* @idmo to i64)
  %553 = inttoptr i64 %699 to i32*
  %554 = load i32, i32* %553
  %555 = sext i32 %554 to i64
  %556 = mul nsw i64 %555, 400
  %557 = add i64 %556, %552
  %558 = inttoptr i64 %701 to i32*
  %559 = load i32, i32* %558
  %560 = sext i32 %559 to i64
  %561 = mul nsw i64 %560, 20
  %562 = add i64 %561, %557
  %563 = sext i32 %632 to i64
  %564 = shl nsw i64 %563, 2
  %565 = add i64 %564, %562
  %566 = inttoptr i64 %565 to i32*
  %567 = load i32, i32* %566
  %568 = sext i32 %567 to i64
  %569 = shl nsw i64 %568, 3
  %570 = add i64 %569, ptrtoint (%tmmor_type* @tmmor to i64)
  %571 = load double, double* %25, align 1
  %572 = inttoptr i64 %570 to double*
  store double %571, double* %572
  %573 = inttoptr i64 %702 to i32*
  %574 = load i32, i32* %573
  %575 = add i32 %574, 1
  %576 = inttoptr i64 %702 to i32*
  store i32 %575, i32* %576
  br label %block_417c96

block_417d9e:                                     ; preds = %block_417da8, %block_417d61
  %577 = phi %struct.Memory* [ %630, %block_417d61 ], [ %577, %block_417da8 ]
  %578 = inttoptr i64 %702 to i32*
  %579 = load i32, i32* %578
  %580 = add i32 %579, -5
  %581 = lshr i32 %580, 31
  %582 = lshr i32 %579, 31
  %583 = xor i32 %581, %582
  %584 = add nuw nsw i32 %583, %582
  %585 = icmp eq i32 %584, 2
  %586 = icmp ne i32 %581, 0
  %587 = xor i1 %586, %585
  br i1 %587, label %block_417da8, label %block_417e06.loopexit

block_41809b:                                     ; preds = %block_41809b.preheader, %block_4180a5
  %588 = phi %struct.Memory* [ %588, %block_4180a5 ], [ %641, %block_41809b.preheader ]
  %589 = inttoptr i64 %702 to i32*
  %590 = load i32, i32* %589
  %591 = add i32 %590, -5
  %592 = lshr i32 %591, 31
  %593 = lshr i32 %590, 31
  %594 = xor i32 %592, %593
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = icmp ne i32 %592, 0
  %598 = xor i1 %597, %596
  br i1 %598, label %block_4180a5, label %block_4180fc

block_417afc:                                     ; preds = %block_417af5, %block_417b7e
  %599 = phi i64 [ %878, %block_417af5 ], [ %59, %block_417b7e ]
  %600 = phi i64 [ %109, %block_417af5 ], [ %844, %block_417b7e ]
  %601 = phi %struct.Memory* [ %110, %block_417af5 ], [ %845, %block_417b7e ]
  %602 = add i64 %600, -12
  %603 = inttoptr i64 %602 to i32*
  %604 = load i32, i32* %603
  %605 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %606 = sub i32 %604, %605
  %607 = lshr i32 %606, 31
  %608 = trunc i32 %607 to i8
  %609 = lshr i32 %604, 31
  %610 = lshr i32 %605, 31
  %611 = xor i32 %610, %609
  %612 = xor i32 %607, %609
  %613 = add nuw nsw i32 %612, %611
  %614 = icmp eq i32 %613, 2
  %615 = icmp ne i8 %608, 0
  %616 = xor i1 %615, %614
  %617 = select i1 %616, i64 16, i64 149
  %618 = add i64 %599, %617
  br i1 %616, label %block_417b0c, label %block_417b91

block_417c18:                                     ; preds = %block_417c11, %block_417c22
  %619 = phi %struct.Memory* [ %832, %block_417c11 ], [ %619, %block_417c22 ]
  %620 = inttoptr i64 %702 to i32*
  %621 = load i32, i32* %620
  %622 = add i32 %621, -4
  %623 = lshr i32 %622, 31
  %624 = lshr i32 %621, 31
  %625 = xor i32 %623, %624
  %626 = add nuw nsw i32 %625, %624
  %627 = icmp eq i32 %626, 2
  %628 = icmp ne i32 %623, 0
  %629 = xor i1 %628, %627
  br i1 %629, label %block_417c22, label %block_417c75

block_417c96:                                     ; preds = %block_417c88, %block_417ca0
  %630 = phi %struct.Memory* [ %832, %block_417c88 ], [ %630, %block_417ca0 ]
  %631 = inttoptr i64 %702 to i32*
  %632 = load i32, i32* %631
  %633 = add i32 %632, -4
  %634 = lshr i32 %633, 31
  %635 = lshr i32 %632, 31
  %636 = xor i32 %634, %635
  %637 = add nuw nsw i32 %636, %635
  %638 = icmp eq i32 %637, 2
  %639 = icmp ne i32 %634, 0
  %640 = xor i1 %639, %638
  br i1 %640, label %block_417ca0, label %block_417cf3

block_417fbf.loopexit:                            ; preds = %block_417f53
  br label %block_417fbf

block_417fbf:                                     ; preds = %block_417fbf.loopexit, %block_417ea4
  %641 = phi %struct.Memory* [ %724, %block_417ea4 ], [ %216, %block_417fbf.loopexit ]
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %642 = inttoptr i64 %701 to i32*
  store i32 4, i32* %642
  %643 = inttoptr i64 %697 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  %646 = mul nsw i64 %645, 2400
  %647 = add i64 %646, ptrtoint (%idmo_type* @idmo to i64)
  %648 = inttoptr i64 %699 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  %651 = mul nsw i64 %650, 400
  %652 = add i64 %651, %647
  store i64 %652, i64* %6, align 8, !tbaa !1240
  %653 = add i64 %652, 180
  %654 = inttoptr i64 %653 to i32*
  %655 = load i32, i32* %654
  %656 = sext i32 %655 to i64
  %657 = shl nsw i64 %656, 3
  %658 = add i64 %657, ptrtoint (%tmmor_type* @tmmor to i64)
  %659 = load double, double* %25, align 1
  %660 = inttoptr i64 %658 to double*
  store double %659, double* %660
  %661 = inttoptr i64 %697 to i32*
  %662 = load i32, i32* %661
  %663 = sext i32 %662 to i64
  %664 = mul nsw i64 %663, 2400
  %665 = add i64 %664, ptrtoint (%idmo_type* @idmo to i64)
  %666 = inttoptr i64 %699 to i32*
  %667 = load i32, i32* %666
  %668 = sext i32 %667 to i64
  %669 = mul nsw i64 %668, 400
  %670 = add i64 %669, %665
  %671 = add i64 %670, 184
  %672 = inttoptr i64 %671 to i32*
  %673 = load i32, i32* %672
  %674 = icmp eq i32 %673, -1
  %675 = inttoptr i64 %702 to i32*
  store i32 1, i32* %675
  br i1 %674, label %block_418032.preheader, label %block_41809b.preheader

block_41809b.preheader:                           ; preds = %block_417fbf
  br label %block_41809b

block_418032.preheader:                           ; preds = %block_417fbf
  br label %block_418032

block_418103:                                     ; preds = %block_41810d, %block_4180fc
  %676 = phi %struct.Memory* [ %588, %block_4180fc ], [ %676, %block_41810d ]
  %677 = inttoptr i64 %702 to i32*
  %678 = load i32, i32* %677
  %679 = add i32 %678, -4
  %680 = lshr i32 %679, 31
  %681 = lshr i32 %678, 31
  %682 = xor i32 %680, %681
  %683 = add nuw nsw i32 %682, %681
  %684 = icmp eq i32 %683, 2
  %685 = icmp ne i32 %680, 0
  %686 = xor i1 %685, %684
  br i1 %686, label %block_41810d, label %block_41816f.loopexit251

block_417b91:                                     ; preds = %block_417afc
  store i64 ptrtoint (%tmmor_type* @tmmor to i64), i64* %8, align 8, !tbaa !1240
  %687 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %687, double* %25, align 1, !tbaa !1246
  store double 0.000000e+00, double* %27, align 1, !tbaa !1246
  %688 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %7, align 8, !tbaa !1240
  %690 = add i64 %618, 31935
  %691 = add i64 %618, 30
  %692 = load i64, i64* %9, align 8, !tbaa !1240
  %693 = add i64 %692, -8
  %694 = inttoptr i64 %693 to i64*
  store i64 %691, i64* %694
  store i64 %693, i64* %9, align 8, !tbaa !1240
  %695 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %690, %struct.Memory* %601)
  %696 = load i64, i64* %10, align 8
  %697 = add i64 %696, -12
  %698 = inttoptr i64 %697 to i32*
  store i32 0, i32* %698
  %699 = add i64 %696, -16
  %700 = add i64 %696, -20
  %701 = add i64 %696, -8
  %702 = add i64 %696, -4
  br label %block_417bb6

block_417b4a:                                     ; preds = %block_417b40
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %703 = add i64 %844, -12
  %704 = inttoptr i64 %703 to i32*
  %705 = load i32, i32* %704
  %706 = sext i32 %705 to i64
  %707 = mul nsw i64 %706, 1000
  store i64 %707, i64* %5, align 8, !tbaa !1240
  %708 = add i64 %707, ptrtoint (%tmult_type* @tmult to i64)
  %709 = zext i32 %848 to i64
  store i64 %709, i64* %7, align 8, !tbaa !1240
  store i64 %708, i64* %8, align 8, !tbaa !1240
  %710 = add i64 %859, 33734
  %711 = add i64 %859, 38
  %712 = load i64, i64* %9, align 8, !tbaa !1240
  %713 = add i64 %712, -8
  %714 = inttoptr i64 %713 to i64*
  store i64 %711, i64* %714
  store i64 %713, i64* %9, align 8, !tbaa !1240
  %715 = tail call %struct.Memory* @sub_41ff10_facev(%struct.State* nonnull %0, i64 %710, %struct.Memory* %845)
  %716 = load i64, i64* %10, align 8
  %717 = add i64 %716, -16
  %718 = load i64, i64* %3, align 8
  %719 = inttoptr i64 %717 to i32*
  %720 = load i32, i32* %719
  %721 = add i32 %720, 1
  %722 = inttoptr i64 %717 to i32*
  store i32 %721, i32* %722
  %723 = add i64 %718, -48
  br label %block_417b40

block_417e47:                                     ; preds = %block_417e47.preheader, %block_417e51
  %724 = phi %struct.Memory* [ %724, %block_417e51 ], [ %860, %block_417e47.preheader ]
  %725 = inttoptr i64 %701 to i32*
  %726 = load i32, i32* %725
  %727 = add i32 %726, -4
  %728 = lshr i32 %727, 31
  %729 = lshr i32 %726, 31
  %730 = xor i32 %728, %729
  %731 = add nuw nsw i32 %730, %729
  %732 = icmp eq i32 %731, 2
  %733 = icmp ne i32 %728, 0
  %734 = xor i1 %733, %732
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  %735 = inttoptr i64 %697 to i32*
  %736 = load i32, i32* %735
  %737 = sext i32 %736 to i64
  %738 = mul nsw i64 %737, 2400
  %739 = add i64 %738, ptrtoint (%idmo_type* @idmo to i64)
  %740 = inttoptr i64 %699 to i32*
  %741 = load i32, i32* %740
  %742 = sext i32 %741 to i64
  %743 = mul nsw i64 %742, 400
  %744 = add i64 %743, %739
  br i1 %734, label %block_417e51, label %block_417ea4

block_4182b7.loopexit:                            ; preds = %block_41824c
  br label %block_4182b7

block_4182b7:                                     ; preds = %block_4181da, %block_4182b7.loopexit, %block_417bd7
  %745 = phi %struct.Memory* [ %317, %block_417bd7 ], [ %60, %block_4181da ], [ %246, %block_4182b7.loopexit ]
  %746 = inttoptr i64 %699 to i32*
  %747 = load i32, i32* %746
  %748 = add i32 %747, 1
  %749 = inttoptr i64 %699 to i32*
  store i32 %748, i32* %749
  br label %block_417bcd

block_41810d:                                     ; preds = %block_418103
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %750 = inttoptr i64 %697 to i32*
  %751 = load i32, i32* %750
  %752 = sext i32 %751 to i64
  %753 = mul nsw i64 %752, 2400
  %754 = add i64 %753, ptrtoint (%idmo_type* @idmo to i64)
  %755 = inttoptr i64 %699 to i32*
  %756 = load i32, i32* %755
  %757 = sext i32 %756 to i64
  %758 = mul nsw i64 %757, 400
  %759 = add i64 %758, %754
  %760 = add i64 %759, 300
  %761 = inttoptr i64 %701 to i32*
  %762 = load i32, i32* %761
  %763 = sext i32 %762 to i64
  %764 = mul nsw i64 %763, 20
  %765 = add i64 %764, %760
  %766 = sext i32 %678 to i64
  %767 = shl nsw i64 %766, 2
  %768 = add i64 %767, %765
  %769 = inttoptr i64 %768 to i32*
  %770 = load i32, i32* %769
  %771 = sext i32 %770 to i64
  %772 = shl nsw i64 %771, 3
  %773 = add i64 %772, ptrtoint (%tmmor_type* @tmmor to i64)
  %774 = load double, double* %25, align 1
  %775 = inttoptr i64 %773 to double*
  store double %774, double* %775
  %776 = inttoptr i64 %702 to i32*
  %777 = load i32, i32* %776
  %778 = add i32 %777, 1
  %779 = inttoptr i64 %702 to i32*
  store i32 %778, i32* %779
  br label %block_418103

block_417b0c:                                     ; preds = %block_417afc
  store i64 125, i64* %7, align 8, !tbaa !1240
  %780 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %780, double* %25, align 1, !tbaa !1246
  store double 0.000000e+00, double* %27, align 1, !tbaa !1246
  %781 = sext i32 %604 to i64
  %782 = mul nsw i64 %781, 1000
  store i64 %782, i64* %5, align 8, !tbaa !1240
  %783 = add i64 %782, ptrtoint (%tmult_type* @tmult to i64)
  store i64 %783, i64* %8, align 8, !tbaa !1240
  %784 = add i64 %618, 32068
  %785 = add i64 %618, 45
  %786 = load i64, i64* %9, align 8, !tbaa !1240
  %787 = add i64 %786, -8
  %788 = inttoptr i64 %787 to i64*
  store i64 %785, i64* %788
  store i64 %787, i64* %9, align 8, !tbaa !1240
  %789 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %784, %struct.Memory* %601)
  %790 = load i64, i64* %10, align 8
  %791 = add i64 %790, -16
  %792 = load i64, i64* %3, align 8
  %793 = add i64 %792, 7
  %794 = inttoptr i64 %791 to i32*
  store i32 0, i32* %794
  br label %block_417b40

block_41820a:                                     ; preds = %block_4181da
  store i32 0, i32* %880, align 1, !tbaa !1244
  store i32 0, i32* %882, align 1, !tbaa !1244
  store i32 0, i32* %883, align 1, !tbaa !1244
  store i32 0, i32* %885, align 1, !tbaa !1244
  %795 = inttoptr i64 %702 to i32*
  %796 = load i32, i32* %795
  %797 = sext i32 %796 to i64
  store i64 %797, i64* %5, align 8, !tbaa !1240
  %798 = shl nsw i64 %797, 2
  %799 = add i64 %820, %798
  %800 = inttoptr i64 %799 to i32*
  %801 = load i32, i32* %800
  %802 = sext i32 %801 to i64
  %803 = shl nsw i64 %802, 3
  %804 = add i64 %803, ptrtoint (%tmmor_type* @tmmor to i64)
  %805 = load double, double* %25, align 1
  %806 = inttoptr i64 %804 to double*
  store double %805, double* %806
  %807 = inttoptr i64 %701 to i32*
  store i32 0, i32* %807
  br label %block_41824c

block_417c88:                                     ; preds = %block_417c07
  %808 = inttoptr i64 %701 to i32*
  store i32 0, i32* %808
  %809 = inttoptr i64 %702 to i32*
  store i32 0, i32* %809
  br label %block_417c96

block_4181da:                                     ; preds = %block_41817d
  %810 = inttoptr i64 %697 to i32*
  %811 = load i32, i32* %810
  %812 = sext i32 %811 to i64
  %813 = mul nsw i64 %812, 2400
  %814 = add i64 %813, ptrtoint (%idmo_type* @idmo to i64)
  %815 = inttoptr i64 %699 to i32*
  %816 = load i32, i32* %815
  %817 = sext i32 %816 to i64
  %818 = mul nsw i64 %817, 400
  store i64 %818, i64* %5, align 8, !tbaa !1240
  %819 = add i64 %818, %814
  %820 = add i64 %819, 80
  %821 = inttoptr i64 %820 to i32*
  %822 = load i32, i32* %821
  %823 = icmp eq i32 %822, -1
  br i1 %823, label %block_4182b7, label %block_41820a

block_417d23:                                     ; preds = %block_417cf3
  %824 = add i64 %366, 216
  %825 = inttoptr i64 %824 to i32*
  %826 = load i32, i32* %825
  %827 = sext i32 %826 to i64
  %828 = shl nsw i64 %827, 3
  %829 = add i64 %828, ptrtoint (%tmmor_type* @tmmor to i64)
  %830 = load double, double* %25, align 1
  %831 = inttoptr i64 %829 to double*
  store double %830, double* %831
  br label %block_417e06

block_417c07:                                     ; preds = %block_417c00, %block_417c75
  %832 = phi %struct.Memory* [ %317, %block_417c00 ], [ %619, %block_417c75 ]
  %833 = inttoptr i64 %701 to i32*
  %834 = load i32, i32* %833
  %835 = add i32 %834, -4
  %836 = lshr i32 %835, 31
  %837 = lshr i32 %834, 31
  %838 = xor i32 %836, %837
  %839 = add nuw nsw i32 %838, %837
  %840 = icmp eq i32 %839, 2
  %841 = icmp ne i32 %836, 0
  %842 = xor i1 %841, %840
  br i1 %842, label %block_417c11, label %block_417c88

block_417b40:                                     ; preds = %block_417b0c, %block_417b4a
  %843 = phi i64 [ %793, %block_417b0c ], [ %723, %block_417b4a ]
  %844 = phi i64 [ %790, %block_417b0c ], [ %716, %block_417b4a ]
  %845 = phi %struct.Memory* [ %789, %block_417b0c ], [ %715, %block_417b4a ]
  %846 = add i64 %844, -16
  %847 = inttoptr i64 %846 to i32*
  %848 = load i32, i32* %847
  %849 = add i32 %848, -6
  %850 = lshr i32 %849, 31
  %851 = trunc i32 %850 to i8
  %852 = lshr i32 %848, 31
  %853 = xor i32 %850, %852
  %854 = add nuw nsw i32 %853, %852
  %855 = icmp eq i32 %854, 2
  %856 = icmp ne i8 %851, 0
  %857 = xor i1 %856, %855
  %858 = select i1 %857, i64 10, i64 62
  %859 = add i64 %843, %858
  br i1 %857, label %block_417b4a, label %block_417b7e

block_417e06.loopexit:                            ; preds = %block_417d9e
  br label %block_417e06

block_417e06:                                     ; preds = %block_417e06.loopexit, %block_417d23
  %860 = phi %struct.Memory* [ %630, %block_417d23 ], [ %577, %block_417e06.loopexit ]
  %861 = inttoptr i64 %702 to i32*
  store i32 4, i32* %861
  %862 = inttoptr i64 %697 to i32*
  %863 = load i32, i32* %862
  %864 = sext i32 %863 to i64
  %865 = mul nsw i64 %864, 2400
  %866 = add i64 %865, ptrtoint (%idmo_type* @idmo to i64)
  %867 = inttoptr i64 %699 to i32*
  %868 = load i32, i32* %867
  %869 = sext i32 %868 to i64
  %870 = mul nsw i64 %869, 400
  %871 = add i64 %870, %866
  %872 = add i64 %871, 236
  %873 = inttoptr i64 %872 to i32*
  %874 = load i32, i32* %873
  %875 = icmp eq i32 %874, -1
  %876 = inttoptr i64 %701 to i32*
  store i32 1, i32* %876
  br i1 %875, label %block_417e47.preheader, label %block_417ee9.preheader

block_417ee9.preheader:                           ; preds = %block_417e06
  br label %block_417ee9

block_417e47.preheader:                           ; preds = %block_417e06
  br label %block_417e47

block_417af5:                                     ; preds = %block_417a6c
  %877 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %878 = add i64 %127, 7
  %879 = inttoptr i64 %111 to i32*
  store i32 0, i32* %879
  %880 = bitcast [32 x %union.VectorReg]* %11 to i32*
  %881 = getelementptr inbounds i8, i8* %877, i64 4
  %882 = bitcast i8* %881 to i32*
  %883 = bitcast i64* %26 to i32*
  %884 = getelementptr inbounds i8, i8* %877, i64 12
  %885 = bitcast i8* %884 to i32*
  br label %block_417afc

block_417c11:                                     ; preds = %block_417c07
  %886 = inttoptr i64 %702 to i32*
  store i32 1, i32* %886
  br label %block_417c18

block_417c00:                                     ; preds = %block_417bd7
  %887 = inttoptr i64 %701 to i32*
  store i32 1, i32* %887
  br label %block_417c07
}

; Function Attrs: noinline
define %struct.Memory* @sub_410b10_mor_ne(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_410b10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %18 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %24 = load i64, i64* %21, align 8
  %25 = load i64, i64* %20, align 8, !tbaa !1240
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27
  store i64 %26, i64* %21, align 8, !tbaa !1240
  %28 = load i64, i64* %23, align 8
  %29 = add i64 %25, -16
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  %31 = load i64, i64* %22, align 8
  %32 = add i64 %25, -24
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %15, align 8
  %35 = add i64 %25, -32
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = add i64 %25, -104
  store i64 %37, i64* %20, align 8, !tbaa !1240
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %44 = add i64 %25, 16
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %48 = add i64 %25, 8
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49
  %51 = zext i32 %50 to i64
  store i64 %51, i64* %47, align 8, !tbaa !1240
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  store i64 0, i64* %52, align 8, !tbaa !1240
  store i64 16, i64* %15, align 8, !tbaa !1240
  store i64 16, i64* %22, align 8, !tbaa !1240
  %53 = add i64 %25, -88
  store i64 %53, i64* %23, align 8, !tbaa !1240
  %54 = add i64 %25, -40
  %55 = load i64, i64* %19, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %56
  %57 = add i64 %25, -44
  %58 = load i32, i32* %9, align 4
  %59 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %59
  %60 = add i64 %25, -48
  %61 = load i32, i32* %7, align 4
  %62 = inttoptr i64 %60 to i32*
  store i32 %61, i32* %62
  %63 = load i64, i64* %21, align 8
  %64 = add i64 %63, -44
  %65 = load i32, i32* %5, align 4
  %66 = inttoptr i64 %64 to i32*
  store i32 %65, i32* %66
  %67 = add i64 %63, -48
  %68 = load i32, i32* %11, align 4
  %69 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %69
  %70 = add i64 %63, -52
  %71 = load i32, i32* %13, align 4
  %72 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %72
  %73 = add i64 %63, -84
  %74 = inttoptr i64 %73 to i32*
  store i32 %50, i32* %74
  %75 = add i64 %63, -88
  %76 = inttoptr i64 %75 to i32*
  store i32 %46, i32* %76
  %77 = add i64 %1, 77
  %78 = load i64, i64* %20, align 8, !tbaa !1240
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80
  %81 = inttoptr i64 %79 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %3, align 8, !alias.scope !1824, !noalias !1827
  store i64 %78, i64* %20, align 8, !alias.scope !1824, !noalias !1827
  %83 = tail call i64 @memset(i64 %53, i64 0, i64 16), !noalias !1824
  %84 = load i64, i64* %21, align 8
  %85 = add i64 %84, -40
  %86 = load i64, i64* %3, align 8
  %87 = inttoptr i64 %85 to i32*
  %88 = load i32, i32* %87
  %89 = add i32 %88, -2
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, i64 10, i64 244
  %92 = add i64 %86, %91
  br i1 %90, label %block_410b67, label %block_410c51

block_410c76:                                     ; preds = %block_410c6c
  %93 = inttoptr i64 %132 to i64*
  %94 = load i64, i64* %93
  %95 = add i32 %228, -1
  %96 = sext i32 %95 to i64
  %97 = shl nsw i64 %96, 2
  %98 = add i64 %94, %97
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = add nsw i64 %97, -80
  %102 = add i64 %101, %84
  %103 = inttoptr i64 %102 to i32*
  store i32 %100, i32* %103
  %104 = inttoptr i64 %129 to i32*
  %105 = load i32, i32* %104
  %106 = add i32 %105, 1
  %107 = inttoptr i64 %129 to i32*
  store i32 %106, i32* %107
  %108 = add i64 %238, -10
  br label %block_410c6c

block_410b71:                                     ; preds = %block_410b67
  %109 = add i64 %84, -56
  %110 = add i64 %615, 7
  %111 = inttoptr i64 %109 to i32*
  store i32 1, i32* %111
  %112 = add i64 %84, -32
  br label %block_410b78

block_410d66:                                     ; preds = %block_410d5c
  %113 = inttoptr i64 %430 to i64*
  %114 = load i64, i64* %113
  %115 = add i32 %177, -1
  %116 = sext i32 %115 to i64
  %117 = shl nsw i64 %116, 2
  %118 = add i64 %114, %117
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119
  %121 = add nsw i64 %117, -80
  %122 = add i64 %121, %84
  %123 = inttoptr i64 %122 to i32*
  store i32 %120, i32* %123
  %124 = inttoptr i64 %427 to i32*
  %125 = load i32, i32* %124
  %126 = add i32 %125, 1
  %127 = inttoptr i64 %427 to i32*
  store i32 %126, i32* %127
  %128 = add i64 %187, -10
  br label %block_410d5c

block_410c65:                                     ; preds = %block_410c5b
  %129 = add i64 %84, -56
  %130 = add i64 %193, 7
  %131 = inttoptr i64 %129 to i32*
  store i32 1, i32* %131
  %132 = add i64 %84, -32
  br label %block_410c6c

block_410be1:                                     ; preds = %block_410b67
  %133 = add i64 %84, 16
  %134 = inttoptr i64 %133 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 2400
  %138 = add i64 %137, ptrtoint (%idmo_type* @idmo to i64)
  %139 = add i64 %84, -44
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140
  %142 = sext i32 %141 to i64
  %143 = mul nsw i64 %142, 400
  %144 = add i64 %143, %138
  %145 = add i64 %144, 180
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146
  %148 = load i64, i64* %21, align 8
  %149 = add i64 %148, -80
  %150 = inttoptr i64 %149 to i32*
  store i32 %147, i32* %150
  %151 = add i64 %148, -56
  %152 = add i64 %615, 54
  %153 = inttoptr i64 %151 to i32*
  store i32 1, i32* %153
  %154 = add i64 %148, -32
  br label %block_410c17

block_410d91:                                     ; preds = %block_410d5c
  %155 = add i64 %84, 16
  %156 = inttoptr i64 %155 to i32*
  %157 = load i32, i32* %156
  %158 = sext i32 %157 to i64
  %159 = mul nsw i64 %158, 2400
  %160 = add i64 %159, ptrtoint (%idmo_type* @idmo to i64)
  %161 = add i64 %84, -44
  %162 = inttoptr i64 %161 to i32*
  %163 = load i32, i32* %162
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %164, 400
  %166 = add i64 %165, %160
  %167 = add i64 %166, 216
  %168 = inttoptr i64 %167 to i32*
  %169 = load i32, i32* %168
  %170 = load i64, i64* %21, align 8
  %171 = add i64 %170, -68
  %172 = add i64 %187, 47
  %173 = inttoptr i64 %171 to i32*
  store i32 %169, i32* %173
  br label %block_410f2a.sink.split

block_410d5c:                                     ; preds = %block_410d55, %block_410d66
  %174 = phi i64 [ %428, %block_410d55 ], [ %128, %block_410d66 ]
  %175 = phi %struct.Memory* [ %2, %block_410d55 ], [ %175, %block_410d66 ]
  %176 = inttoptr i64 %427 to i32*
  %177 = load i32, i32* %176
  %178 = add i32 %177, -4
  %179 = lshr i32 %178, 31
  %180 = lshr i32 %177, 31
  %181 = xor i32 %179, %180
  %182 = add nuw nsw i32 %181, %180
  %183 = icmp eq i32 %182, 2
  %184 = icmp ne i32 %179, 0
  %185 = xor i1 %184, %183
  %186 = select i1 %185, i64 10, i64 53
  %187 = add i64 %174, %186
  br i1 %185, label %block_410d66, label %block_410d91

block_410c5b:                                     ; preds = %block_410c51
  %188 = add i64 %84, -36
  %189 = inttoptr i64 %188 to i32*
  %190 = load i32, i32* %189
  %191 = icmp eq i32 %190, 0
  %192 = select i1 %191, i64 10, i64 122
  %193 = add i64 %218, %192
  br i1 %191, label %block_410c65, label %block_410cd5

block_410cd5:                                     ; preds = %block_410c5b
  %194 = add i64 %84, 16
  %195 = inttoptr i64 %194 to i32*
  %196 = load i32, i32* %195
  %197 = sext i32 %196 to i64
  %198 = mul nsw i64 %197, 2400
  %199 = add i64 %198, ptrtoint (%idmo_type* @idmo to i64)
  %200 = add i64 %84, -44
  %201 = inttoptr i64 %200 to i32*
  %202 = load i32, i32* %201
  %203 = sext i32 %202 to i64
  %204 = mul nsw i64 %203, 400
  %205 = add i64 %204, %199
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206
  %208 = load i64, i64* %21, align 8
  %209 = add i64 %208, -80
  %210 = inttoptr i64 %209 to i32*
  store i32 %207, i32* %210
  %211 = add i64 %208, -56
  %212 = add i64 %193, 50
  %213 = inttoptr i64 %211 to i32*
  store i32 1, i32* %213
  %214 = add i64 %208, -32
  br label %block_410d07

block_410c51:                                     ; preds = %block_410b10
  %215 = add i32 %88, -3
  %216 = icmp eq i32 %215, 0
  %217 = select i1 %216, i64 10, i64 240
  %218 = add i64 %92, %217
  br i1 %216, label %block_410c5b, label %block_410d41

block_410d4b:                                     ; preds = %block_410d41
  %219 = add i64 %84, -36
  %220 = inttoptr i64 %219 to i32*
  %221 = load i32, i32* %220
  %222 = icmp eq i32 %221, 0
  %223 = select i1 %222, i64 10, i64 122
  %224 = add i64 %260, %223
  br i1 %222, label %block_410d55, label %block_410dc5

block_410c6c:                                     ; preds = %block_410c65, %block_410c76
  %225 = phi i64 [ %130, %block_410c65 ], [ %108, %block_410c76 ]
  %226 = phi %struct.Memory* [ %2, %block_410c65 ], [ %226, %block_410c76 ]
  %227 = inttoptr i64 %129 to i32*
  %228 = load i32, i32* %227
  %229 = add i32 %228, -4
  %230 = lshr i32 %229, 31
  %231 = lshr i32 %228, 31
  %232 = xor i32 %230, %231
  %233 = add nuw nsw i32 %232, %231
  %234 = icmp eq i32 %233, 2
  %235 = icmp ne i32 %230, 0
  %236 = xor i1 %235, %234
  %237 = select i1 %236, i64 10, i64 53
  %238 = add i64 %225, %237
  br i1 %236, label %block_410c76, label %block_410ca1

block_410ca1:                                     ; preds = %block_410c6c
  %239 = add i64 %84, 16
  %240 = inttoptr i64 %239 to i32*
  %241 = load i32, i32* %240
  %242 = sext i32 %241 to i64
  %243 = mul nsw i64 %242, 2400
  %244 = add i64 %243, ptrtoint (%idmo_type* @idmo to i64)
  %245 = add i64 %84, -44
  %246 = inttoptr i64 %245 to i32*
  %247 = load i32, i32* %246
  %248 = sext i32 %247 to i64
  %249 = mul nsw i64 %248, 400
  %250 = add i64 %249, %244
  %251 = add i64 %250, 180
  %252 = inttoptr i64 %251 to i32*
  %253 = load i32, i32* %252
  %254 = load i64, i64* %21, align 8
  %255 = add i64 %254, -68
  %256 = add i64 %238, 47
  %257 = inttoptr i64 %255 to i32*
  store i32 %253, i32* %257
  br label %block_410f2f

block_410d41:                                     ; preds = %block_410c51
  %258 = icmp eq i32 %88, 0
  %259 = select i1 %258, i64 10, i64 240
  %260 = add i64 %218, %259
  br i1 %258, label %block_410d4b, label %block_410e31

block_410e3b:                                     ; preds = %block_410e31
  %261 = add i64 %84, -36
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i64 10, i64 122
  %266 = add i64 %292, %265
  br i1 %264, label %block_410e45, label %block_410eb5

block_410eb5:                                     ; preds = %block_410e3b
  %267 = add i64 %84, 16
  %268 = inttoptr i64 %267 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  %271 = mul nsw i64 %270, 2400
  %272 = add i64 %271, ptrtoint (%idmo_type* @idmo to i64)
  %273 = add i64 %84, -44
  %274 = inttoptr i64 %273 to i32*
  %275 = load i32, i32* %274
  %276 = sext i32 %275 to i64
  %277 = mul nsw i64 %276, 400
  %278 = add i64 %277, %272
  %279 = add i64 %278, 216
  %280 = inttoptr i64 %279 to i32*
  %281 = load i32, i32* %280
  %282 = load i64, i64* %21, align 8
  %283 = add i64 %282, -80
  %284 = inttoptr i64 %283 to i32*
  store i32 %281, i32* %284
  %285 = add i64 %282, -56
  %286 = add i64 %266, 54
  %287 = inttoptr i64 %285 to i32*
  store i32 1, i32* %287
  %288 = add i64 %282, -32
  br label %block_410eeb

block_410e31:                                     ; preds = %block_410d41
  %289 = add i32 %88, -1
  %290 = icmp eq i32 %289, 0
  %291 = select i1 %290, i64 10, i64 244
  %292 = add i64 %260, %291
  br i1 %290, label %block_410e3b, label %block_410f2f

block_410f2f.loopexit:                            ; preds = %block_410d07
  br label %block_410f2f

block_410f2f:                                     ; preds = %block_410f2a.sink.split, %block_410f2f.loopexit, %block_410e31, %block_410ca1
  %293 = phi i64 [ %254, %block_410ca1 ], [ %84, %block_410e31 ], [ %347, %block_410f2a.sink.split ], [ %208, %block_410f2f.loopexit ]
  %294 = phi i64 [ %256, %block_410ca1 ], [ %292, %block_410e31 ], [ %352, %block_410f2a.sink.split ], [ %634, %block_410f2f.loopexit ]
  %295 = phi i64 [ 108, %block_410ca1 ], [ 5, %block_410e31 ], [ %351, %block_410f2a.sink.split ], [ 5, %block_410f2f.loopexit ]
  %296 = phi %struct.Memory* [ %226, %block_410ca1 ], [ %2, %block_410e31 ], [ %350, %block_410f2a.sink.split ], [ %621, %block_410f2f.loopexit ]
  %297 = phi i64 [ 499, %block_410ca1 ], [ 5, %block_410e31 ], [ 5, %block_410f2a.sink.split ], [ 499, %block_410f2f.loopexit ]
  %298 = add i64 %294, %295
  br label %block_410f34

block_410df7:                                     ; preds = %block_410e01, %block_410dc5
  %299 = phi i64 [ %371, %block_410dc5 ], [ %684, %block_410e01 ]
  %300 = phi %struct.Memory* [ %2, %block_410dc5 ], [ %300, %block_410e01 ]
  %301 = inttoptr i64 %370 to i32*
  %302 = load i32, i32* %301
  %303 = add i32 %302, -4
  %304 = lshr i32 %303, 31
  %305 = trunc i32 %304 to i8
  %306 = lshr i32 %302, 31
  %307 = xor i32 %304, %306
  %308 = add nuw nsw i32 %307, %306
  %309 = icmp eq i32 %308, 2
  %310 = icmp ne i8 %305, 0
  %311 = xor i1 %310, %309
  %312 = select i1 %311, i64 10, i64 48
  %313 = add i64 %299, %312
  br i1 %311, label %block_410e01, label %block_410f2a.sink.split.loopexit

block_410ef5:                                     ; preds = %block_410eeb
  %314 = inttoptr i64 %288 to i64*
  %315 = load i64, i64* %314
  %316 = add i32 %377, -1
  %317 = sext i32 %316 to i64
  %318 = shl nsw i64 %317, 2
  %319 = add i64 %315, %318
  %320 = inttoptr i64 %319 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %377 to i64
  %323 = shl nsw i64 %322, 2
  %324 = add i64 %283, %323
  %325 = inttoptr i64 %324 to i32*
  store i32 %321, i32* %325
  %326 = inttoptr i64 %285 to i32*
  %327 = load i32, i32* %326
  %328 = add i32 %327, 1
  %329 = inttoptr i64 %285 to i32*
  store i32 %328, i32* %329
  %330 = add i64 %388, -10
  br label %block_410eeb

block_410e56:                                     ; preds = %block_410e4c
  %331 = inttoptr i64 %619 to i64*
  %332 = load i64, i64* %331
  %333 = add i32 %392, -1
  %334 = sext i32 %333 to i64
  %335 = shl nsw i64 %334, 2
  %336 = add i64 %332, %335
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = add nsw i64 %335, -80
  %340 = add i64 %339, %84
  %341 = inttoptr i64 %340 to i32*
  store i32 %338, i32* %341
  %342 = inttoptr i64 %616 to i32*
  %343 = load i32, i32* %342
  %344 = add i32 %343, 1
  %345 = inttoptr i64 %616 to i32*
  store i32 %344, i32* %345
  %346 = add i64 %402, -10
  br label %block_410e4c

block_410f2a.sink.split.loopexit:                 ; preds = %block_410df7
  br label %block_410f2a.sink.split

block_410f2a.sink.split:                          ; preds = %block_410f20, %block_410f2a.sink.split.loopexit, %block_410d91
  %347 = phi i64 [ %403, %block_410f20 ], [ %170, %block_410d91 ], [ %367, %block_410f2a.sink.split.loopexit ]
  %348 = phi i64 [ %407, %block_410f20 ], [ %172, %block_410d91 ], [ %313, %block_410f2a.sink.split.loopexit ]
  %349 = phi i64 [ 5, %block_410f20 ], [ 108, %block_410d91 ], [ 5, %block_410f2a.sink.split.loopexit ]
  %350 = phi %struct.Memory* [ %406, %block_410f20 ], [ %175, %block_410d91 ], [ %300, %block_410f2a.sink.split.loopexit ]
  %351 = phi i64 [ 5, %block_410f20 ], [ 254, %block_410d91 ], [ 254, %block_410f2a.sink.split.loopexit ]
  %352 = add i64 %348, %349
  br label %block_410f2f

block_410dc5:                                     ; preds = %block_410d4b
  %353 = add i64 %84, 16
  %354 = inttoptr i64 %353 to i32*
  %355 = load i32, i32* %354
  %356 = sext i32 %355 to i64
  %357 = mul nsw i64 %356, 2400
  %358 = add i64 %357, ptrtoint (%idmo_type* @idmo to i64)
  %359 = add i64 %84, -44
  %360 = inttoptr i64 %359 to i32*
  %361 = load i32, i32* %360
  %362 = sext i32 %361 to i64
  %363 = mul nsw i64 %362, 400
  %364 = add i64 %363, %358
  %365 = inttoptr i64 %364 to i32*
  %366 = load i32, i32* %365
  %367 = load i64, i64* %21, align 8
  %368 = add i64 %367, -80
  %369 = inttoptr i64 %368 to i32*
  store i32 %366, i32* %369
  %370 = add i64 %367, -56
  %371 = add i64 %224, 50
  %372 = inttoptr i64 %370 to i32*
  store i32 1, i32* %372
  %373 = add i64 %367, -32
  br label %block_410df7

block_410eeb:                                     ; preds = %block_410ef5, %block_410eb5
  %374 = phi i64 [ %286, %block_410eb5 ], [ %330, %block_410ef5 ]
  %375 = phi %struct.Memory* [ %2, %block_410eb5 ], [ %375, %block_410ef5 ]
  %376 = inttoptr i64 %285 to i32*
  %377 = load i32, i32* %376
  %378 = add i32 %377, -4
  %379 = lshr i32 %378, 31
  %380 = trunc i32 %379 to i8
  %381 = lshr i32 %377, 31
  %382 = xor i32 %379, %381
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = icmp ne i8 %380, 0
  %386 = xor i1 %385, %384
  %387 = select i1 %386, i64 10, i64 48
  %388 = add i64 %374, %387
  br i1 %386, label %block_410ef5, label %block_410f20.loopexit

block_410e4c:                                     ; preds = %block_410e45, %block_410e56
  %389 = phi i64 [ %617, %block_410e45 ], [ %346, %block_410e56 ]
  %390 = phi %struct.Memory* [ %2, %block_410e45 ], [ %390, %block_410e56 ]
  %391 = inttoptr i64 %616 to i32*
  %392 = load i32, i32* %391
  %393 = add i32 %392, -4
  %394 = lshr i32 %393, 31
  %395 = lshr i32 %392, 31
  %396 = xor i32 %394, %395
  %397 = add nuw nsw i32 %396, %395
  %398 = icmp eq i32 %397, 2
  %399 = icmp ne i32 %394, 0
  %400 = xor i1 %399, %398
  %401 = select i1 %400, i64 10, i64 53
  %402 = add i64 %389, %401
  br i1 %400, label %block_410e56, label %block_410e81

block_410f20.loopexit:                            ; preds = %block_410eeb
  br label %block_410f20

block_410f20:                                     ; preds = %block_410e81, %block_410f20.loopexit
  %403 = phi i64 [ %423, %block_410e81 ], [ %282, %block_410f20.loopexit ]
  %404 = phi i64 [ %425, %block_410e81 ], [ %388, %block_410f20.loopexit ]
  %405 = phi i64 [ 112, %block_410e81 ], [ 5, %block_410f20.loopexit ]
  %406 = phi %struct.Memory* [ %390, %block_410e81 ], [ %375, %block_410f20.loopexit ]
  %407 = add i64 %404, %405
  br label %block_410f2a.sink.split

block_410e81:                                     ; preds = %block_410e4c
  %408 = add i64 %84, 16
  %409 = inttoptr i64 %408 to i32*
  %410 = load i32, i32* %409
  %411 = sext i32 %410 to i64
  %412 = mul nsw i64 %411, 2400
  %413 = add i64 %412, ptrtoint (%idmo_type* @idmo to i64)
  %414 = add i64 %84, -44
  %415 = inttoptr i64 %414 to i32*
  %416 = load i32, i32* %415
  %417 = sext i32 %416 to i64
  %418 = mul nsw i64 %417, 400
  %419 = add i64 %418, %413
  %420 = add i64 %419, 396
  %421 = inttoptr i64 %420 to i32*
  %422 = load i32, i32* %421
  %423 = load i64, i64* %21, align 8
  %424 = add i64 %423, -68
  %425 = add i64 %402, 47
  %426 = inttoptr i64 %424 to i32*
  store i32 %422, i32* %426
  br label %block_410f20

block_410d55:                                     ; preds = %block_410d4b
  %427 = add i64 %84, -56
  %428 = add i64 %224, 7
  %429 = inttoptr i64 %427 to i32*
  store i32 1, i32* %429
  %430 = add i64 %84, -32
  br label %block_410d5c

block_410b78:                                     ; preds = %block_410b82, %block_410b71
  %431 = phi i64 [ %110, %block_410b71 ], [ %667, %block_410b82 ]
  %432 = phi %struct.Memory* [ %2, %block_410b71 ], [ %432, %block_410b82 ]
  %433 = inttoptr i64 %109 to i32*
  %434 = load i32, i32* %433
  %435 = add i32 %434, -4
  %436 = lshr i32 %435, 31
  %437 = lshr i32 %434, 31
  %438 = xor i32 %436, %437
  %439 = add nuw nsw i32 %438, %437
  %440 = icmp eq i32 %439, 2
  %441 = icmp ne i32 %436, 0
  %442 = xor i1 %441, %440
  %443 = select i1 %442, i64 10, i64 53
  %444 = add i64 %431, %443
  br i1 %442, label %block_410b82, label %block_410bad

block_410bad:                                     ; preds = %block_410b78
  %445 = add i64 %84, 16
  %446 = inttoptr i64 %445 to i32*
  %447 = load i32, i32* %446
  %448 = sext i32 %447 to i64
  %449 = mul nsw i64 %448, 2400
  %450 = add i64 %449, ptrtoint (%idmo_type* @idmo to i64)
  %451 = add i64 %84, -44
  %452 = inttoptr i64 %451 to i32*
  %453 = load i32, i32* %452
  %454 = sext i32 %453 to i64
  %455 = mul nsw i64 %454, 400
  %456 = add i64 %455, %450
  %457 = add i64 %456, 396
  %458 = inttoptr i64 %457 to i32*
  %459 = load i32, i32* %458
  %460 = load i64, i64* %21, align 8
  %461 = add i64 %460, -68
  %462 = add i64 %444, 47
  %463 = inttoptr i64 %461 to i32*
  store i32 %459, i32* %463
  br label %block_410f34

block_410c17:                                     ; preds = %block_410c21, %block_410be1
  %464 = phi i64 [ %152, %block_410be1 ], [ %651, %block_410c21 ]
  %465 = phi %struct.Memory* [ %2, %block_410be1 ], [ %465, %block_410c21 ]
  %466 = inttoptr i64 %151 to i32*
  %467 = load i32, i32* %466
  %468 = add i32 %467, -4
  %469 = lshr i32 %468, 31
  %470 = trunc i32 %469 to i8
  %471 = lshr i32 %467, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %471
  %474 = icmp eq i32 %473, 2
  %475 = icmp ne i8 %470, 0
  %476 = xor i1 %475, %474
  %477 = select i1 %476, i64 10, i64 48
  %478 = add i64 %464, %477
  br i1 %476, label %block_410c21, label %block_410f34.loopexit

block_410d11:                                     ; preds = %block_410d07
  %479 = inttoptr i64 %214 to i64*
  %480 = load i64, i64* %479
  %481 = add i32 %623, -1
  %482 = sext i32 %481 to i64
  %483 = shl nsw i64 %482, 2
  %484 = add i64 %480, %483
  %485 = inttoptr i64 %484 to i32*
  %486 = load i32, i32* %485
  %487 = sext i32 %623 to i64
  %488 = shl nsw i64 %487, 2
  %489 = add i64 %209, %488
  %490 = inttoptr i64 %489 to i32*
  store i32 %486, i32* %490
  %491 = inttoptr i64 %211 to i32*
  %492 = load i32, i32* %491
  %493 = add i32 %492, 1
  %494 = inttoptr i64 %211 to i32*
  store i32 %493, i32* %494
  %495 = add i64 %634, -10
  br label %block_410d07

block_410f34.loopexit:                            ; preds = %block_410c17
  br label %block_410f34

block_410f34:                                     ; preds = %block_410f34.loopexit, %block_410bad, %block_410f2f
  %496 = phi i64 [ %293, %block_410f2f ], [ %460, %block_410bad ], [ %148, %block_410f34.loopexit ]
  %497 = phi i64 [ %298, %block_410f2f ], [ %462, %block_410bad ], [ %478, %block_410f34.loopexit ]
  %498 = phi i64 [ %297, %block_410f2f ], [ 112, %block_410bad ], [ 5, %block_410f34.loopexit ]
  %499 = phi %struct.Memory* [ %296, %block_410f2f ], [ %432, %block_410bad ], [ %465, %block_410f34.loopexit ]
  %500 = phi i64 [ 5, %block_410f2f ], [ 744, %block_410bad ], [ 744, %block_410f34.loopexit ]
  %501 = add nsw i64 %500, %498
  %502 = add i64 %501, %497
  %503 = add i64 %496, -80
  store i64 %503, i64* %16, align 8, !tbaa !1240
  %504 = add i64 %496, -40
  %505 = inttoptr i64 %504 to i32*
  %506 = load i32, i32* %505
  %507 = sext i32 %506 to i64
  %508 = shl nsw i64 %507, 2
  %509 = add i64 %508, ptrtoint (%op_type* @op to i64)
  %510 = inttoptr i64 %509 to i32*
  %511 = load i32, i32* %510
  %512 = zext i32 %511 to i64
  store i64 %512, i64* %19, align 8, !tbaa !1240
  %513 = add i64 %496, -44
  %514 = inttoptr i64 %513 to i32*
  %515 = load i32, i32* %514
  %516 = sext i32 %515 to i64
  store i64 %516, i64* %14, align 8, !tbaa !1240
  %517 = shl nsw i64 %516, 2
  %518 = add i64 %517, ptrtoint (%jjface_type* @jjface to i64)
  %519 = inttoptr i64 %518 to i32*
  %520 = load i32, i32* %519
  %521 = zext i32 %520 to i64
  store i64 %521, i64* %18, align 8, !tbaa !1240
  %522 = add i64 %496, 24
  %523 = inttoptr i64 %522 to i32*
  %524 = load i32, i32* %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %17, align 8, !tbaa !1240
  %526 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %527 = add i64 %496, -36
  %528 = inttoptr i64 %527 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %526, align 8, !tbaa !1240
  %531 = add i64 %502, 3260
  %532 = add i64 %502, 38
  %533 = load i64, i64* %20, align 8, !tbaa !1240
  %534 = add i64 %533, -8
  %535 = inttoptr i64 %534 to i64*
  store i64 %532, i64* %535
  store i64 %534, i64* %20, align 8, !tbaa !1240
  %536 = tail call %struct.Memory* @sub_411bf0_mor_s_e_nn(%struct.State* nonnull %0, i64 %531, %struct.Memory* %499)
  %537 = load i64, i64* %21, align 8
  %538 = add i64 %537, -80
  %539 = load i64, i64* %3, align 8
  store i64 %538, i64* %16, align 8, !tbaa !1240
  %540 = add i64 %537, -48
  %541 = inttoptr i64 %540 to i32*
  %542 = load i32, i32* %541
  %543 = sext i32 %542 to i64
  %544 = shl nsw i64 %543, 2
  %545 = add i64 %544, ptrtoint (%op_type* @op to i64)
  %546 = inttoptr i64 %545 to i32*
  %547 = load i32, i32* %546
  %548 = zext i32 %547 to i64
  store i64 %548, i64* %19, align 8, !tbaa !1240
  %549 = add i64 %537, -52
  %550 = inttoptr i64 %549 to i32*
  %551 = load i32, i32* %550
  %552 = sext i32 %551 to i64
  store i64 %552, i64* %14, align 8, !tbaa !1240
  %553 = shl nsw i64 %552, 2
  %554 = add i64 %553, ptrtoint (%jjface_type* @jjface to i64)
  %555 = inttoptr i64 %554 to i32*
  %556 = load i32, i32* %555
  %557 = zext i32 %556 to i64
  store i64 %557, i64* %18, align 8, !tbaa !1240
  %558 = add i64 %537, 24
  %559 = inttoptr i64 %558 to i32*
  %560 = load i32, i32* %559
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %17, align 8, !tbaa !1240
  %562 = add i64 %537, -36
  %563 = inttoptr i64 %562 to i32*
  %564 = load i32, i32* %563
  %565 = zext i32 %564 to i64
  store i64 %565, i64* %526, align 8, !tbaa !1240
  %566 = add i64 %539, 3222
  %567 = add i64 %539, 38
  %568 = load i64, i64* %20, align 8, !tbaa !1240
  %569 = add i64 %568, -8
  %570 = inttoptr i64 %569 to i64*
  store i64 %567, i64* %570
  store i64 %569, i64* %20, align 8, !tbaa !1240
  %571 = tail call %struct.Memory* @sub_411bf0_mor_s_e_nn(%struct.State* nonnull %0, i64 %566, %struct.Memory* %536)
  %572 = load i64, i64* %20, align 8
  %573 = add i64 %572, 72
  %574 = icmp ugt i64 %572, -73
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %38, align 1, !tbaa !1248
  %576 = trunc i64 %573 to i32
  %577 = and i32 %576, 255
  %578 = tail call i32 @llvm.ctpop.i32(i32 %577) #11
  %579 = trunc i32 %578 to i8
  %580 = and i8 %579, 1
  %581 = xor i8 %580, 1
  store i8 %581, i8* %39, align 1, !tbaa !1261
  %582 = xor i64 %573, %572
  %583 = lshr i64 %582, 4
  %584 = trunc i64 %583 to i8
  %585 = and i8 %584, 1
  store i8 %585, i8* %40, align 1, !tbaa !1262
  %586 = icmp eq i64 %573, 0
  %587 = zext i1 %586 to i8
  store i8 %587, i8* %41, align 1, !tbaa !1263
  %588 = lshr i64 %573, 63
  %589 = trunc i64 %588 to i8
  store i8 %589, i8* %42, align 1, !tbaa !1264
  %590 = lshr i64 %572, 63
  %591 = xor i64 %588, %590
  %592 = add nuw nsw i64 %591, %588
  %593 = icmp eq i64 %592, 2
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %43, align 1, !tbaa !1265
  %595 = add i64 %572, 80
  %596 = inttoptr i64 %573 to i64*
  %597 = load i64, i64* %596
  store i64 %597, i64* %15, align 8, !tbaa !1240
  %598 = add i64 %572, 88
  %599 = inttoptr i64 %595 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %22, align 8, !tbaa !1240
  %601 = add i64 %572, 96
  %602 = inttoptr i64 %598 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %23, align 8, !tbaa !1240
  %604 = add i64 %572, 104
  %605 = inttoptr i64 %601 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %21, align 8, !tbaa !1240
  %607 = inttoptr i64 %604 to i64*
  %608 = load i64, i64* %607
  store i64 %608, i64* %3, align 8, !tbaa !1240
  %609 = add i64 %572, 112
  store i64 %609, i64* %20, align 8, !tbaa !1240
  ret %struct.Memory* %571

block_410b67:                                     ; preds = %block_410b10
  %610 = add i64 %84, -36
  %611 = inttoptr i64 %610 to i32*
  %612 = load i32, i32* %611
  %613 = icmp eq i32 %612, 0
  %614 = select i1 %613, i64 10, i64 122
  %615 = add i64 %92, %614
  br i1 %613, label %block_410b71, label %block_410be1

block_410e45:                                     ; preds = %block_410e3b
  %616 = add i64 %84, -56
  %617 = add i64 %266, 7
  %618 = inttoptr i64 %616 to i32*
  store i32 1, i32* %618
  %619 = add i64 %84, -32
  br label %block_410e4c

block_410d07:                                     ; preds = %block_410d11, %block_410cd5
  %620 = phi i64 [ %212, %block_410cd5 ], [ %495, %block_410d11 ]
  %621 = phi %struct.Memory* [ %2, %block_410cd5 ], [ %621, %block_410d11 ]
  %622 = inttoptr i64 %211 to i32*
  %623 = load i32, i32* %622
  %624 = add i32 %623, -4
  %625 = lshr i32 %624, 31
  %626 = trunc i32 %625 to i8
  %627 = lshr i32 %623, 31
  %628 = xor i32 %625, %627
  %629 = add nuw nsw i32 %628, %627
  %630 = icmp eq i32 %629, 2
  %631 = icmp ne i8 %626, 0
  %632 = xor i1 %631, %630
  %633 = select i1 %632, i64 10, i64 48
  %634 = add i64 %620, %633
  br i1 %632, label %block_410d11, label %block_410f2f.loopexit

block_410c21:                                     ; preds = %block_410c17
  %635 = inttoptr i64 %154 to i64*
  %636 = load i64, i64* %635
  %637 = add i32 %467, -1
  %638 = sext i32 %637 to i64
  %639 = shl nsw i64 %638, 2
  %640 = add i64 %636, %639
  %641 = inttoptr i64 %640 to i32*
  %642 = load i32, i32* %641
  %643 = sext i32 %467 to i64
  %644 = shl nsw i64 %643, 2
  %645 = add i64 %149, %644
  %646 = inttoptr i64 %645 to i32*
  store i32 %642, i32* %646
  %647 = inttoptr i64 %151 to i32*
  %648 = load i32, i32* %647
  %649 = add i32 %648, 1
  %650 = inttoptr i64 %151 to i32*
  store i32 %649, i32* %650
  %651 = add i64 %478, -10
  br label %block_410c17

block_410b82:                                     ; preds = %block_410b78
  %652 = inttoptr i64 %112 to i64*
  %653 = load i64, i64* %652
  %654 = add i32 %434, -1
  %655 = sext i32 %654 to i64
  %656 = shl nsw i64 %655, 2
  %657 = add i64 %653, %656
  %658 = inttoptr i64 %657 to i32*
  %659 = load i32, i32* %658
  %660 = add nsw i64 %656, -80
  %661 = add i64 %660, %84
  %662 = inttoptr i64 %661 to i32*
  store i32 %659, i32* %662
  %663 = inttoptr i64 %109 to i32*
  %664 = load i32, i32* %663
  %665 = add i32 %664, 1
  %666 = inttoptr i64 %109 to i32*
  store i32 %665, i32* %666
  %667 = add i64 %444, -10
  br label %block_410b78

block_410e01:                                     ; preds = %block_410df7
  %668 = inttoptr i64 %373 to i64*
  %669 = load i64, i64* %668
  %670 = add i32 %302, -1
  %671 = sext i32 %670 to i64
  %672 = shl nsw i64 %671, 2
  %673 = add i64 %669, %672
  %674 = inttoptr i64 %673 to i32*
  %675 = load i32, i32* %674
  %676 = sext i32 %302 to i64
  %677 = shl nsw i64 %676, 2
  %678 = add i64 %368, %677
  %679 = inttoptr i64 %678 to i32*
  store i32 %675, i32* %679
  %680 = inttoptr i64 %370 to i32*
  %681 = load i32, i32* %680
  %682 = add i32 %681, 1
  %683 = inttoptr i64 %370 to i32*
  store i32 %682, i32* %683
  %684 = add i64 %313, -10
  br label %block_410df7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4030d0_icheck(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4030d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = load i64, i64* %13, align 8
  %16 = load i64, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %12, align 8, !tbaa !1240
  store i64 %17, i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%f_c_type* @f_c to i64), i64* %9, align 8, !tbaa !1240
  %19 = add i64 %16, -12
  %20 = load i32, i32* %7, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %16, -16
  %23 = load i32, i32* %5, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %16, -68
  %26 = inttoptr i64 %25 to i32*
  store i32 1, i32* %26
  %27 = add i64 %16, -44
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %16, -48
  %30 = inttoptr i64 %29 to i32*
  store i32 0, i32* %30
  %31 = add i64 %16, -52
  %32 = inttoptr i64 %31 to i32*
  store i32 0, i32* %32
  %33 = add i64 %16, -56
  %34 = inttoptr i64 %33 to i32*
  store i32 0, i32* %34
  %35 = add i64 %16, -60
  %36 = inttoptr i64 %35 to i32*
  store i32 0, i32* %36
  %37 = add i64 %16, -64
  %38 = inttoptr i64 %37 to i32*
  store i32 0, i32* %38
  %39 = inttoptr i64 %22 to i32*
  %40 = load i32, i32* %39
  %41 = sext i32 %40 to i64
  %42 = mul nsw i64 %41, 12
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = add i64 %42, ptrtoint (%f_c_type* @f_c to i64)
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50
  %52 = load i64, i64* %13, align 8
  %53 = add i64 %52, -24
  %54 = inttoptr i64 %53 to i32*
  store i32 %51, i32* %54
  %55 = add i64 %52, -8
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = sext i32 %57 to i64
  %59 = mul nsw i64 %58, 12
  %60 = load i64, i64* %9, align 8
  %61 = add i64 %59, %60
  store i64 %61, i64* %14, align 8, !tbaa !1240
  %62 = add i64 %61, 4
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = add i64 %52, -28
  %66 = inttoptr i64 %65 to i32*
  store i32 %64, i32* %66
  %67 = inttoptr i64 %55 to i32*
  %68 = load i32, i32* %67
  %69 = sext i32 %68 to i64
  %70 = mul nsw i64 %69, 12
  store i64 %70, i64* %10, align 8, !tbaa !1240
  %71 = add i64 %70, %60
  %72 = add i64 %71, 8
  %73 = inttoptr i64 %72 to i32*
  %74 = load i32, i32* %73
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %11, align 8, !tbaa !1240
  %76 = load i64, i64* %13, align 8
  %77 = add i64 %76, -32
  %78 = inttoptr i64 %77 to i32*
  store i32 %74, i32* %78
  %79 = add i64 %76, -4
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80
  %82 = sext i32 %81 to i64
  %83 = mul nsw i64 %82, 24
  %84 = load i64, i64* %8, align 8
  %85 = add i64 %83, %84
  %86 = add i64 %76, -24
  %87 = inttoptr i64 %86 to i32*
  %88 = load i32, i32* %87
  %89 = sext i32 %88 to i64
  store i64 %89, i64* %9, align 8, !tbaa !1240
  %90 = shl nsw i64 %89, 2
  %91 = add i64 %90, %85
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92
  %94 = add i32 %93, -3
  %95 = icmp ult i32 %93, 3
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %43, align 1, !tbaa !1248
  %97 = and i32 %94, 255
  %98 = tail call i32 @llvm.ctpop.i32(i32 %97) #11
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  store i8 %101, i8* %44, align 1, !tbaa !1261
  %102 = xor i32 %94, %93
  %103 = lshr i32 %102, 4
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  store i8 %105, i8* %45, align 1, !tbaa !1262
  %106 = icmp eq i32 %94, 0
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %46, align 1, !tbaa !1263
  %108 = lshr i32 %94, 31
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %47, align 1, !tbaa !1264
  %110 = lshr i32 %93, 31
  %111 = xor i32 %108, %110
  %112 = add nuw nsw i32 %111, %110
  %113 = icmp eq i32 %112, 2
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %48, align 1, !tbaa !1265
  br i1 %106, label %block_4031b8, label %block_403172

block_403315:                                     ; preds = %block_40330b
  %115 = add i64 %212, -40
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116
  %118 = add i32 %117, -3
  %119 = icmp ult i32 %117, 3
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %43, align 1, !tbaa !1248
  %121 = and i32 %118, 255
  %122 = tail call i32 @llvm.ctpop.i32(i32 %121) #11
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  store i8 %125, i8* %44, align 1, !tbaa !1261
  %126 = xor i32 %118, %117
  %127 = lshr i32 %126, 4
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  store i8 %129, i8* %45, align 1, !tbaa !1262
  %130 = icmp eq i32 %118, 0
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %46, align 1, !tbaa !1263
  %132 = lshr i32 %118, 31
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %47, align 1, !tbaa !1264
  %134 = lshr i32 %117, 31
  %135 = xor i32 %132, %134
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %48, align 1, !tbaa !1265
  br i1 %130, label %block_40338d, label %block_40331f

block_403270:                                     ; preds = %block_403266
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %8, align 8, !tbaa !1240
  %139 = sext i32 %277 to i64
  %140 = mul nsw i64 %139, 24
  %141 = add i64 %140, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %141, i64* %10, align 8, !tbaa !1240
  %142 = add i64 %273, -32
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = sext i32 %144 to i64
  %146 = shl nsw i64 %145, 2
  %147 = add i64 %146, %141
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = add i64 %273, -48
  %151 = inttoptr i64 %150 to i32*
  store i32 %149, i32* %151
  %152 = inttoptr i64 %275 to i32*
  %153 = load i32, i32* %152
  %154 = sext i32 %153 to i64
  %155 = mul nsw i64 %154, 24
  %156 = load i64, i64* %8, align 8
  %157 = add i64 %155, %156
  %158 = load i64, i64* %13, align 8
  %159 = add i64 %158, -24
  %160 = inttoptr i64 %159 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  %163 = shl nsw i64 %162, 2
  %164 = add i64 %163, %157
  %165 = inttoptr i64 %164 to i32*
  %166 = load i32, i32* %165
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %11, align 8, !tbaa !1240
  %168 = add i64 %158, -44
  %169 = inttoptr i64 %168 to i32*
  store i32 %166, i32* %169
  br label %block_4032a7

block_403379:                                     ; preds = %block_403356
  %170 = add i64 %248, -52
  %171 = inttoptr i64 %170 to i32*
  %172 = load i32, i32* %171
  %173 = add i32 %172, -3
  %174 = icmp ult i32 %172, 3
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %43, align 1, !tbaa !1248
  %176 = and i32 %173, 255
  %177 = tail call i32 @llvm.ctpop.i32(i32 %176) #11
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  store i8 %180, i8* %44, align 1, !tbaa !1261
  %181 = xor i32 %173, %172
  %182 = lshr i32 %181, 4
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  store i8 %184, i8* %45, align 1, !tbaa !1262
  %185 = icmp eq i32 %173, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %46, align 1, !tbaa !1263
  %187 = lshr i32 %173, 31
  %188 = trunc i32 %187 to i8
  store i8 %188, i8* %47, align 1, !tbaa !1264
  %189 = lshr i32 %172, 31
  %190 = xor i32 %187, %189
  %191 = add nuw nsw i32 %190, %189
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %48, align 1, !tbaa !1265
  br i1 %185, label %block_40338d, label %block_403383

block_4032e8:                                     ; preds = %block_4032b1, %block_4032a7
  %194 = phi i64 [ %313, %block_4032a7 ], [ %415, %block_4032b1 ]
  %195 = phi %struct.Memory* [ %314, %block_4032a7 ], [ %314, %block_4032b1 ]
  %196 = add i64 %194, -4
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = sext i32 %198 to i64
  %200 = mul nsw i64 %199, 24
  %201 = add i64 %200, ptrtoint (%cbc_type* @cbc to i64)
  %202 = add i64 %194, -24
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203
  %205 = sext i32 %204 to i64
  store i64 %205, i64* %9, align 8, !tbaa !1240
  %206 = shl nsw i64 %205, 2
  %207 = add i64 %206, %201
  %208 = inttoptr i64 %207 to i32*
  %209 = load i32, i32* %208
  %210 = add i32 %209, -2
  %211 = icmp eq i32 %210, 0
  %212 = load i64, i64* %13, align 8
  br i1 %211, label %block_40330b, label %block_40331f

block_403356:                                     ; preds = %block_40331f, %block_40334c
  %213 = add i64 %335, -4
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = sext i32 %215 to i64
  %217 = mul nsw i64 %216, 24
  %218 = add i64 %217, ptrtoint (%cbc_type* @cbc to i64)
  %219 = add i64 %335, -32
  %220 = inttoptr i64 %219 to i32*
  %221 = load i32, i32* %220
  %222 = sext i32 %221 to i64
  store i64 %222, i64* %9, align 8, !tbaa !1240
  %223 = shl nsw i64 %222, 2
  %224 = add i64 %223, %218
  %225 = inttoptr i64 %224 to i32*
  %226 = load i32, i32* %225
  %227 = add i32 %226, -2
  %228 = icmp ult i32 %226, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %43, align 1, !tbaa !1248
  %230 = and i32 %227, 255
  %231 = tail call i32 @llvm.ctpop.i32(i32 %230) #11
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  store i8 %234, i8* %44, align 1, !tbaa !1261
  %235 = xor i32 %227, %226
  %236 = lshr i32 %235, 4
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  store i8 %238, i8* %45, align 1, !tbaa !1262
  %239 = icmp eq i32 %227, 0
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %46, align 1, !tbaa !1263
  %241 = lshr i32 %227, 31
  %242 = trunc i32 %241 to i8
  store i8 %242, i8* %47, align 1, !tbaa !1264
  %243 = lshr i32 %226, 31
  %244 = xor i32 %241, %243
  %245 = add nuw nsw i32 %244, %243
  %246 = icmp eq i32 %245, 2
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %48, align 1, !tbaa !1265
  %248 = load i64, i64* %13, align 8
  br i1 %239, label %block_403379, label %block_403399

block_40334c:                                     ; preds = %block_403342
  %249 = add i64 %335, -44
  %250 = inttoptr i64 %249 to i32*
  %251 = load i32, i32* %250
  %252 = add i32 %251, -3
  %253 = icmp ult i32 %251, 3
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %43, align 1, !tbaa !1248
  %255 = and i32 %252, 255
  %256 = tail call i32 @llvm.ctpop.i32(i32 %255) #11
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = xor i8 %258, 1
  store i8 %259, i8* %44, align 1, !tbaa !1261
  %260 = xor i32 %252, %251
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  store i8 %263, i8* %45, align 1, !tbaa !1262
  %264 = icmp eq i32 %252, 0
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %46, align 1, !tbaa !1263
  %266 = lshr i32 %252, 31
  %267 = trunc i32 %266 to i8
  store i8 %267, i8* %47, align 1, !tbaa !1264
  %268 = lshr i32 %251, 31
  %269 = xor i32 %266, %268
  %270 = add nuw nsw i32 %269, %268
  %271 = icmp eq i32 %270, 2
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %48, align 1, !tbaa !1265
  br i1 %264, label %block_40338d, label %block_403356

block_403266:                                     ; preds = %block_4031c4, %block_40322f
  %273 = phi i64 [ %528, %block_4031c4 ], [ %301, %block_40322f ]
  %274 = phi %struct.Memory* [ %2, %block_4031c4 ], [ %2, %block_40322f ]
  %275 = add i64 %273, -16
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %block_4032a7, label %block_403270

block_4031b8:                                     ; preds = %block_403195, %block_403172, %block_4030d0
  %279 = load i64, i64* %13, align 8
  %280 = add i64 %279, -60
  %281 = inttoptr i64 %280 to i32*
  store i32 0, i32* %281
  br label %block_403399

block_40322f:                                     ; preds = %block_4031c4
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %8, align 8, !tbaa !1240
  %282 = sext i32 %533 to i64
  %283 = mul nsw i64 %282, 24
  %284 = add i64 %283, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %284, i64* %10, align 8, !tbaa !1240
  %285 = add i64 %528, -28
  %286 = inttoptr i64 %285 to i32*
  %287 = load i32, i32* %286
  %288 = sext i32 %287 to i64
  %289 = shl nsw i64 %288, 2
  %290 = add i64 %289, %284
  %291 = inttoptr i64 %290 to i32*
  %292 = load i32, i32* %291
  %293 = add i64 %528, -36
  %294 = inttoptr i64 %293 to i32*
  store i32 %292, i32* %294
  %295 = inttoptr i64 %531 to i32*
  %296 = load i32, i32* %295
  %297 = sext i32 %296 to i64
  %298 = mul nsw i64 %297, 24
  %299 = load i64, i64* %8, align 8
  %300 = add i64 %298, %299
  %301 = load i64, i64* %13, align 8
  %302 = add i64 %301, -32
  %303 = inttoptr i64 %302 to i32*
  %304 = load i32, i32* %303
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 2
  %307 = add i64 %306, %300
  %308 = inttoptr i64 %307 to i32*
  %309 = load i32, i32* %308
  %310 = zext i32 %309 to i64
  store i64 %310, i64* %11, align 8, !tbaa !1240
  %311 = add i64 %301, -40
  %312 = inttoptr i64 %311 to i32*
  store i32 %309, i32* %312
  br label %block_403266

block_4032a7:                                     ; preds = %block_403266, %block_403270
  %313 = phi i64 [ %273, %block_403266 ], [ %158, %block_403270 ]
  %314 = phi %struct.Memory* [ %274, %block_403266 ], [ %274, %block_403270 ]
  %315 = add i64 %313, -20
  %316 = inttoptr i64 %315 to i32*
  %317 = load i32, i32* %316
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %block_4032e8, label %block_4032b1

block_40331f:                                     ; preds = %block_4032e8, %block_403315
  %319 = add i64 %212, -4
  %320 = inttoptr i64 %319 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %322, 24
  %324 = add i64 %323, ptrtoint (%cbc_type* @cbc to i64)
  %325 = add i64 %212, -28
  %326 = inttoptr i64 %325 to i32*
  %327 = load i32, i32* %326
  %328 = sext i32 %327 to i64
  store i64 %328, i64* %9, align 8, !tbaa !1240
  %329 = shl nsw i64 %328, 2
  %330 = add i64 %329, %324
  %331 = inttoptr i64 %330 to i32*
  %332 = load i32, i32* %331
  %333 = add i32 %332, -2
  %334 = icmp eq i32 %333, 0
  %335 = load i64, i64* %13, align 8
  br i1 %334, label %block_403342, label %block_403356

block_403172:                                     ; preds = %block_4030d0
  %336 = load i64, i64* %13, align 8
  %337 = add i64 %336, -4
  %338 = inttoptr i64 %337 to i32*
  %339 = load i32, i32* %338
  %340 = sext i32 %339 to i64
  %341 = mul nsw i64 %340, 24
  %342 = add i64 %341, ptrtoint (%cbc_type* @cbc to i64)
  %343 = add i64 %336, -28
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = sext i32 %345 to i64
  store i64 %346, i64* %9, align 8, !tbaa !1240
  %347 = shl nsw i64 %346, 2
  %348 = add i64 %347, %342
  %349 = inttoptr i64 %348 to i32*
  %350 = load i32, i32* %349
  %351 = add i32 %350, -3
  %352 = icmp ult i32 %350, 3
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %43, align 1, !tbaa !1248
  %354 = and i32 %351, 255
  %355 = tail call i32 @llvm.ctpop.i32(i32 %354) #11
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  store i8 %358, i8* %44, align 1, !tbaa !1261
  %359 = xor i32 %351, %350
  %360 = lshr i32 %359, 4
  %361 = trunc i32 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %45, align 1, !tbaa !1262
  %363 = icmp eq i32 %351, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %46, align 1, !tbaa !1263
  %365 = lshr i32 %351, 31
  %366 = trunc i32 %365 to i8
  store i8 %366, i8* %47, align 1, !tbaa !1264
  %367 = lshr i32 %350, 31
  %368 = xor i32 %365, %367
  %369 = add nuw nsw i32 %368, %367
  %370 = icmp eq i32 %369, 2
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %48, align 1, !tbaa !1265
  br i1 %363, label %block_4031b8, label %block_403195

block_403342:                                     ; preds = %block_40331f
  %372 = add i64 %335, -48
  %373 = inttoptr i64 %372 to i32*
  %374 = load i32, i32* %373
  %375 = add i32 %374, -3
  %376 = icmp ult i32 %374, 3
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %43, align 1, !tbaa !1248
  %378 = and i32 %375, 255
  %379 = tail call i32 @llvm.ctpop.i32(i32 %378) #11
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  store i8 %382, i8* %44, align 1, !tbaa !1261
  %383 = xor i32 %375, %374
  %384 = lshr i32 %383, 4
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  store i8 %386, i8* %45, align 1, !tbaa !1262
  %387 = icmp eq i32 %375, 0
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %46, align 1, !tbaa !1263
  %389 = lshr i32 %375, 31
  %390 = trunc i32 %389 to i8
  store i8 %390, i8* %47, align 1, !tbaa !1264
  %391 = lshr i32 %374, 31
  %392 = xor i32 %389, %391
  %393 = add nuw nsw i32 %392, %391
  %394 = icmp eq i32 %393, 2
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %48, align 1, !tbaa !1265
  br i1 %387, label %block_40338d, label %block_40334c

block_4032b1:                                     ; preds = %block_4032a7
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %8, align 8, !tbaa !1240
  %396 = sext i32 %317 to i64
  %397 = mul nsw i64 %396, 24
  %398 = add i64 %397, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %398, i64* %10, align 8, !tbaa !1240
  %399 = add i64 %313, -24
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 2
  %404 = add i64 %403, %398
  %405 = inttoptr i64 %404 to i32*
  %406 = load i32, i32* %405
  %407 = add i64 %313, -52
  %408 = inttoptr i64 %407 to i32*
  store i32 %406, i32* %408
  %409 = inttoptr i64 %315 to i32*
  %410 = load i32, i32* %409
  %411 = sext i32 %410 to i64
  %412 = mul nsw i64 %411, 24
  %413 = load i64, i64* %8, align 8
  %414 = add i64 %412, %413
  %415 = load i64, i64* %13, align 8
  %416 = add i64 %415, -28
  %417 = inttoptr i64 %416 to i32*
  %418 = load i32, i32* %417
  %419 = sext i32 %418 to i64
  %420 = shl nsw i64 %419, 2
  %421 = add i64 %420, %414
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422
  %424 = zext i32 %423 to i64
  store i64 %424, i64* %11, align 8, !tbaa !1240
  %425 = add i64 %415, -56
  %426 = inttoptr i64 %425 to i32*
  store i32 %423, i32* %426
  br label %block_4032e8

block_403399:                                     ; preds = %block_403383, %block_40338d, %block_4031b8, %block_403356
  %427 = phi i64 [ %279, %block_4031b8 ], [ %248, %block_403383 ], [ %535, %block_40338d ], [ %248, %block_403356 ]
  %428 = phi %struct.Memory* [ %2, %block_4031b8 ], [ %195, %block_403383 ], [ %195, %block_40338d ], [ %195, %block_403356 ]
  %429 = add i64 %427, -60
  %430 = inttoptr i64 %429 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %8, align 8, !tbaa !1240
  %433 = load i64, i64* %12, align 8, !tbaa !1240
  %434 = add i64 %433, 8
  %435 = inttoptr i64 %433 to i64*
  %436 = load i64, i64* %435
  store i64 %436, i64* %13, align 8, !tbaa !1240
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %3, align 8, !tbaa !1240
  %439 = add i64 %433, 16
  store i64 %439, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %428

block_403195:                                     ; preds = %block_403172
  %440 = load i64, i64* %13, align 8
  %441 = add i64 %440, -4
  %442 = inttoptr i64 %441 to i32*
  %443 = load i32, i32* %442
  %444 = sext i32 %443 to i64
  %445 = mul nsw i64 %444, 24
  %446 = add i64 %445, ptrtoint (%cbc_type* @cbc to i64)
  %447 = add i64 %440, -32
  %448 = inttoptr i64 %447 to i32*
  %449 = load i32, i32* %448
  %450 = sext i32 %449 to i64
  store i64 %450, i64* %9, align 8, !tbaa !1240
  %451 = shl nsw i64 %450, 2
  %452 = add i64 %451, %446
  %453 = inttoptr i64 %452 to i32*
  %454 = load i32, i32* %453
  %455 = add i32 %454, -3
  %456 = icmp ult i32 %454, 3
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %43, align 1, !tbaa !1248
  %458 = and i32 %455, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #11
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %44, align 1, !tbaa !1261
  %463 = xor i32 %455, %454
  %464 = lshr i32 %463, 4
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  store i8 %466, i8* %45, align 1, !tbaa !1262
  %467 = icmp eq i32 %455, 0
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %46, align 1, !tbaa !1263
  %469 = lshr i32 %455, 31
  %470 = trunc i32 %469 to i8
  store i8 %470, i8* %47, align 1, !tbaa !1264
  %471 = lshr i32 %454, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %471
  %474 = icmp eq i32 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %48, align 1, !tbaa !1265
  br i1 %467, label %block_4031b8, label %block_4031c4

block_4031c4:                                     ; preds = %block_403195
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %8, align 8, !tbaa !1240
  %476 = load i64, i64* %13, align 8
  %477 = add i64 %476, -4
  %478 = inttoptr i64 %477 to i32*
  %479 = load i32, i32* %478
  %480 = sext i32 %479 to i64
  %481 = mul nsw i64 %480, 96
  %482 = add i64 %481, ptrtoint (%sje_type* @sje to i64)
  %483 = add i64 %476, -24
  %484 = inttoptr i64 %483 to i32*
  %485 = load i32, i32* %484
  %486 = sext i32 %485 to i64
  %487 = shl nsw i64 %486, 4
  %488 = add i64 %487, %482
  %489 = inttoptr i64 %488 to i32*
  %490 = load i32, i32* %489
  %491 = load i64, i64* %13, align 8
  %492 = add i64 %491, -12
  %493 = inttoptr i64 %492 to i32*
  store i32 %490, i32* %493
  %494 = add i64 %491, -4
  %495 = inttoptr i64 %494 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  %498 = mul nsw i64 %497, 96
  %499 = load i64, i64* %8, align 8
  %500 = add i64 %498, %499
  %501 = add i64 %491, -28
  %502 = inttoptr i64 %501 to i32*
  %503 = load i32, i32* %502
  %504 = sext i32 %503 to i64
  %505 = shl nsw i64 %504, 4
  %506 = add i64 %505, %500
  store i64 %506, i64* %10, align 8, !tbaa !1240
  %507 = inttoptr i64 %506 to i32*
  %508 = load i32, i32* %507
  %509 = load i64, i64* %13, align 8
  %510 = add i64 %509, -16
  %511 = inttoptr i64 %510 to i32*
  store i32 %508, i32* %511
  %512 = add i64 %509, -4
  %513 = inttoptr i64 %512 to i32*
  %514 = load i32, i32* %513
  %515 = sext i32 %514 to i64
  %516 = mul nsw i64 %515, 96
  %517 = load i64, i64* %8, align 8
  %518 = add i64 %516, %517
  %519 = add i64 %509, -32
  %520 = inttoptr i64 %519 to i32*
  %521 = load i32, i32* %520
  %522 = sext i32 %521 to i64
  %523 = shl nsw i64 %522, 4
  %524 = add i64 %523, %518
  %525 = inttoptr i64 %524 to i32*
  %526 = load i32, i32* %525
  %527 = zext i32 %526 to i64
  store i64 %527, i64* %11, align 8, !tbaa !1240
  %528 = load i64, i64* %13, align 8
  %529 = add i64 %528, -20
  %530 = inttoptr i64 %529 to i32*
  store i32 %526, i32* %530
  %531 = add i64 %528, -12
  %532 = inttoptr i64 %531 to i32*
  %533 = load i32, i32* %532
  %534 = icmp eq i32 %533, 0
  br i1 %534, label %block_403266, label %block_40322f

block_40338d:                                     ; preds = %block_403383, %block_40330b, %block_403342, %block_40334c, %block_403379, %block_403315
  %535 = phi i64 [ %248, %block_403383 ], [ %212, %block_40330b ], [ %335, %block_403342 ], [ %335, %block_40334c ], [ %248, %block_403379 ], [ %212, %block_403315 ]
  %536 = add i64 %535, -60
  %537 = inttoptr i64 %536 to i32*
  store i32 0, i32* %537
  br label %block_403399

block_40330b:                                     ; preds = %block_4032e8
  %538 = add i64 %212, -36
  %539 = inttoptr i64 %538 to i32*
  %540 = load i32, i32* %539
  %541 = add i32 %540, -3
  %542 = icmp ult i32 %540, 3
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %43, align 1, !tbaa !1248
  %544 = and i32 %541, 255
  %545 = tail call i32 @llvm.ctpop.i32(i32 %544) #11
  %546 = trunc i32 %545 to i8
  %547 = and i8 %546, 1
  %548 = xor i8 %547, 1
  store i8 %548, i8* %44, align 1, !tbaa !1261
  %549 = xor i32 %541, %540
  %550 = lshr i32 %549, 4
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  store i8 %552, i8* %45, align 1, !tbaa !1262
  %553 = icmp eq i32 %541, 0
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %46, align 1, !tbaa !1263
  %555 = lshr i32 %541, 31
  %556 = trunc i32 %555 to i8
  store i8 %556, i8* %47, align 1, !tbaa !1264
  %557 = lshr i32 %540, 31
  %558 = xor i32 %555, %557
  %559 = add nuw nsw i32 %558, %557
  %560 = icmp eq i32 %559, 2
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %48, align 1, !tbaa !1265
  br i1 %553, label %block_40338d, label %block_403315

block_403383:                                     ; preds = %block_403379
  %562 = add i64 %248, -56
  %563 = inttoptr i64 %562 to i32*
  %564 = load i32, i32* %563
  %565 = add i32 %564, -3
  %566 = icmp ult i32 %564, 3
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %43, align 1, !tbaa !1248
  %568 = and i32 %565, 255
  %569 = tail call i32 @llvm.ctpop.i32(i32 %568) #11
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  store i8 %572, i8* %44, align 1, !tbaa !1261
  %573 = xor i32 %565, %564
  %574 = lshr i32 %573, 4
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  store i8 %576, i8* %45, align 1, !tbaa !1262
  %577 = icmp eq i32 %565, 0
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %46, align 1, !tbaa !1263
  %579 = lshr i32 %565, 31
  %580 = trunc i32 %579 to i8
  store i8 %580, i8* %47, align 1, !tbaa !1264
  %581 = lshr i32 %564, 31
  %582 = xor i32 %579, %581
  %583 = add nuw nsw i32 %582, %581
  %584 = icmp eq i32 %583, 2
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %48, align 1, !tbaa !1265
  br i1 %577, label %block_40338d, label %block_403399
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f8e0_l_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f8e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  %18 = add i64 %15, -16
  %19 = load i64, i64* %11, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %15, -20
  %22 = load i32, i32* %7, align 4
  %23 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %23
  %24 = add i64 %15, -24
  %25 = load i32, i32* %5, align 4
  %26 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %26
  %27 = add i64 %15, -28
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %15, -20
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = add i64 %15, -16
  br label %block_41f8f5

block_41f91d:                                     ; preds = %block_41f8f5
  %34 = zext i32 %72 to i64
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %38 = icmp ult i32 %72, %74
  %39 = zext i1 %38 to i8
  %40 = and i32 %75, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #11
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i32 %74, %72
  %46 = xor i32 %45, %75
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = icmp eq i32 %75, 0
  %51 = zext i1 %50 to i8
  %52 = zext i1 %83 to i8
  store i8 %39, i8* %30, align 1, !tbaa !1248
  store i8 %44, i8* %35, align 1, !tbaa !1261
  store i8 %49, i8* %31, align 1, !tbaa !1262
  store i8 %51, i8* %36, align 1, !tbaa !1263
  store i8 %77, i8* %32, align 1, !tbaa !1264
  store i8 %52, i8* %37, align 1, !tbaa !1265
  %53 = inttoptr i64 %16 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %13, align 8, !tbaa !1240
  %55 = inttoptr i64 %15 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %3, align 8, !tbaa !1240
  %57 = add i64 %15, 8
  store i64 %57, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %70

block_41f901:                                     ; preds = %block_41f8f5
  %58 = inttoptr i64 %24 to i32*
  %59 = load i32, i32* %58
  %60 = inttoptr i64 %33 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %9, align 8, !tbaa !1240
  %62 = sext i32 %72 to i64
  store i64 %62, i64* %10, align 8, !tbaa !1240
  %63 = shl nsw i64 %62, 2
  %64 = add i64 %63, %61
  %65 = inttoptr i64 %64 to i32*
  store i32 %59, i32* %65
  %66 = inttoptr i64 %27 to i32*
  %67 = load i32, i32* %66
  %68 = add i32 %67, 1
  %69 = inttoptr i64 %27 to i32*
  store i32 %68, i32* %69
  br label %block_41f8f5

block_41f8f5:                                     ; preds = %block_41f901, %block_41f8e0
  %70 = phi %struct.Memory* [ %2, %block_41f8e0 ], [ %70, %block_41f901 ]
  %71 = inttoptr i64 %27 to i32*
  %72 = load i32, i32* %71
  %73 = inttoptr i64 %29 to i32*
  %74 = load i32, i32* %73
  %75 = sub i32 %72, %74
  %76 = lshr i32 %75, 31
  %77 = trunc i32 %76 to i8
  %78 = lshr i32 %72, 31
  %79 = lshr i32 %74, 31
  %80 = xor i32 %79, %78
  %81 = xor i32 %76, %78
  %82 = add nuw nsw i32 %81, %80
  %83 = icmp eq i32 %82, 2
  %84 = icmp ne i8 %77, 0
  %85 = xor i1 %84, %83
  br i1 %85, label %block_41f901, label %block_41f91d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400800_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400838:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i64 0, i64* %5, align 8, !tbaa !1240
  store i8 0, i8* %12, align 1, !tbaa !1463
  store i8 1, i8* %13, align 1, !tbaa !1463
  store i8 0, i8* %14, align 1, !tbaa !1463
  store i8 1, i8* %15, align 1, !tbaa !1463
  store i8 0, i8* %16, align 1, !tbaa !1463
  store i8 0, i8* %17, align 1, !tbaa !1463
  %18 = inttoptr i64 %10 to i64*
  %19 = load i64, i64* %18
  store i64 %19, i64* %7, align 8, !tbaa !1240
  %20 = inttoptr i64 %9 to i64*
  %21 = load i64, i64* %20
  store i64 %21, i64* %3, align 8, !tbaa !1240
  %22 = add i64 %9, 8
  store i64 %22, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_420400___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_420400:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %12, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  %22 = load i64, i64* %16, align 8
  %23 = add i64 %19, -16
  %24 = inttoptr i64 %23 to i64*
  store i64 %22, i64* %24
  %25 = load i64, i64* %9, align 8
  store i64 %25, i64* %17, align 8, !tbaa !1240
  %26 = load i64, i64* %15, align 8
  %27 = add i64 %19, -24
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = load i64, i64* %14, align 8
  %30 = add i64 %19, -32
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  store i64 ptrtoint (%seg_621e00__init_array_type* @seg_621e00__init_array to i64), i64* %14, align 8, !tbaa !1240
  %32 = load i64, i64* %13, align 8
  %33 = add i64 %19, -40
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %8, align 8
  %36 = add i64 %19, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %15, align 8, !tbaa !1240
  %40 = load i64, i64* %10, align 8
  store i64 %40, i64* %16, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ashr (i64 sub (i64 add (i64 ptrtoint (%seg_621e00__init_array_type* @seg_621e00__init_array to i64), i64 8), i64 ptrtoint (%seg_621e00__init_array_type* @seg_621e00__init_array to i64)), i64 3), i64* %13, align 8, !tbaa !1240
  %47 = add i64 %1, -130416
  %48 = add i64 %1, 49
  %49 = add i64 %19, -64
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50
  store i64 %49, i64* %12, align 8, !tbaa !1240
  %51 = tail call %struct.Memory* @sub_400690__init_proc(%struct.State* nonnull %0, i64 %47, %struct.Memory* %2)
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %3, align 8
  %54 = icmp eq i64 %52, 0
  %55 = select i1 %54, i64 37, i64 5
  %56 = add i64 %53, %55
  br i1 %54, label %block_420456, label %block_420436

block_420456.loopexit:                            ; preds = %block_420440
  br label %block_420456

block_420456:                                     ; preds = %block_420456.loopexit, %block_420400
  %57 = phi %struct.Memory* [ %51, %block_420400 ], [ %119, %block_420456.loopexit ]
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %58, 8
  %60 = icmp ugt i64 %58, -9
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %41, align 1, !tbaa !1248
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #11
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %42, align 1, !tbaa !1261
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %43, align 1, !tbaa !1262
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %44, align 1, !tbaa !1263
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %45, align 1, !tbaa !1264
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %46, align 1, !tbaa !1265
  %81 = add i64 %58, 16
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = add i64 %58, 24
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %13, align 8, !tbaa !1240
  %87 = add i64 %58, 32
  %88 = inttoptr i64 %84 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %14, align 8, !tbaa !1240
  %90 = add i64 %58, 40
  %91 = inttoptr i64 %87 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %15, align 8, !tbaa !1240
  %93 = add i64 %58, 48
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %16, align 8, !tbaa !1240
  %96 = add i64 %58, 56
  %97 = inttoptr i64 %93 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %17, align 8, !tbaa !1240
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %3, align 8, !tbaa !1240
  %101 = add i64 %58, 64
  store i64 %101, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %57

block_420436:                                     ; preds = %block_420400
  store i64 0, i64* %8, align 8, !tbaa !1240
  store i8 0, i8* %41, align 1, !tbaa !1248
  store i8 1, i8* %42, align 1, !tbaa !1261
  store i8 1, i8* %44, align 1, !tbaa !1263
  store i8 0, i8* %45, align 1, !tbaa !1264
  store i8 0, i8* %46, align 1, !tbaa !1265
  store i8 0, i8* %43, align 1, !tbaa !1262
  %102 = add i64 %56, 10
  br label %block_420440

block_420440:                                     ; preds = %block_420440, %block_420436
  %103 = phi i64 [ 0, %block_420436 ], [ %122, %block_420440 ]
  %104 = phi i64 [ %102, %block_420436 ], [ %150, %block_420440 ]
  %105 = phi %struct.Memory* [ %51, %block_420436 ], [ %119, %block_420440 ]
  %106 = load i64, i64* %17, align 8
  store i64 %106, i64* %9, align 8, !tbaa !1240
  %107 = load i64, i64* %16, align 8
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %108 = load i32, i32* %7, align 4
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %110 = load i64, i64* %14, align 8
  %111 = shl i64 %103, 3
  %112 = add i64 %111, %110
  %113 = add i64 %104, 13
  %114 = load i64, i64* %12, align 8, !tbaa !1240
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %117 = inttoptr i64 %112 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %118, %struct.Memory* %105)
  %120 = load i64, i64* %8, align 8
  %121 = load i64, i64* %3, align 8
  %122 = add i64 %120, 1
  store i64 %122, i64* %8, align 8, !tbaa !1240
  %123 = lshr i64 %122, 63
  %124 = load i64, i64* %13, align 8
  %125 = sub i64 %124, %122
  %126 = icmp ult i64 %124, %122
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %41, align 1, !tbaa !1248
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #11
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %42, align 1, !tbaa !1261
  %134 = xor i64 %122, %124
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %43, align 1, !tbaa !1262
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %44, align 1, !tbaa !1263
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %45, align 1, !tbaa !1264
  %143 = lshr i64 %124, 63
  %144 = xor i64 %123, %143
  %145 = xor i64 %141, %143
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %46, align 1, !tbaa !1265
  %149 = select i1 %139, i64 9, i64 -13
  %150 = add i64 %121, %149
  br i1 %139, label %block_420456.loopexit, label %block_420440
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f9c0_adds2m1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f9c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = load i64, i64* %11, align 8
  %15 = load i64, i64* %10, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  %18 = add i64 %15, -16
  %19 = load i64, i64* %9, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %15, -24
  %22 = load i64, i64* %8, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = add i64 %15, -32
  %25 = bitcast [32 x %union.VectorReg]* %12 to double*
  %26 = load double, double* %25, align 1
  %27 = inttoptr i64 %24 to double*
  store double %26, double* %27
  %28 = add i64 %15, -36
  %29 = load i32, i32* %5, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = add i64 %15, -40
  %32 = inttoptr i64 %31 to i32*
  store i32 0, i32* %32
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %36 = add i64 %15, -16
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %38 = add i64 %15, -32
  %39 = bitcast %union.VectorReg* %13 to double*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %41 = add i64 %15, -24
  br label %block_41f9db

block_41f9e7:                                     ; preds = %block_41f9db
  %42 = inttoptr i64 %36 to i64*
  %43 = load i64, i64* %42
  %44 = sext i32 %89 to i64
  %45 = shl nsw i64 %44, 3
  %46 = add i64 %45, %43
  %47 = inttoptr i64 %46 to double*
  %48 = load double, double* %47
  %49 = inttoptr i64 %38 to double*
  %50 = load double, double* %49
  %51 = inttoptr i64 %41 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %45, %52
  %54 = inttoptr i64 %53 to double*
  %55 = load double, double* %54
  %56 = fmul double %50, %55
  store double %56, double* %39, align 1, !tbaa !1246
  store i64 0, i64* %40, align 1, !tbaa !1246
  %57 = fadd double %48, %56
  store double %57, double* %25, align 1, !tbaa !1246
  store i64 0, i64* %37, align 1, !tbaa !1246
  store i64 %44, i64* %7, align 8, !tbaa !1240
  %58 = inttoptr i64 %46 to double*
  store double %57, double* %58
  %59 = inttoptr i64 %31 to i32*
  %60 = load i32, i32* %59
  %61 = add i32 %60, 1
  %62 = inttoptr i64 %31 to i32*
  store i32 %61, i32* %62
  br label %block_41f9db

block_41fa25:                                     ; preds = %block_41f9db
  %63 = zext i32 %89 to i64
  store i64 %63, i64* %6, align 8, !tbaa !1240
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %67 = icmp ult i32 %89, %91
  %68 = zext i1 %67 to i8
  %69 = and i32 %92, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #11
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  %74 = xor i32 %91, %89
  %75 = xor i32 %74, %92
  %76 = lshr i32 %75, 4
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = icmp eq i32 %92, 0
  %80 = zext i1 %79 to i8
  %81 = zext i1 %100 to i8
  store i8 %68, i8* %33, align 1, !tbaa !1248
  store i8 %73, i8* %64, align 1, !tbaa !1261
  store i8 %78, i8* %34, align 1, !tbaa !1262
  store i8 %80, i8* %65, align 1, !tbaa !1263
  store i8 %94, i8* %35, align 1, !tbaa !1264
  store i8 %81, i8* %66, align 1, !tbaa !1265
  %82 = inttoptr i64 %16 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %11, align 8, !tbaa !1240
  %84 = inttoptr i64 %15 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %15, 8
  store i64 %86, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %87

block_41f9db:                                     ; preds = %block_41f9e7, %block_41f9c0
  %87 = phi %struct.Memory* [ %2, %block_41f9c0 ], [ %87, %block_41f9e7 ]
  %88 = inttoptr i64 %31 to i32*
  %89 = load i32, i32* %88
  %90 = inttoptr i64 %28 to i32*
  %91 = load i32, i32* %90
  %92 = sub i32 %89, %91
  %93 = lshr i32 %92, 31
  %94 = trunc i32 %93 to i8
  %95 = lshr i32 %89, 31
  %96 = lshr i32 %91, 31
  %97 = xor i32 %96, %95
  %98 = xor i32 %93, %95
  %99 = add nuw nsw i32 %98, %97
  %100 = icmp eq i32 %99, 2
  %101 = icmp ne i8 %94, 0
  %102 = xor i1 %101, %100
  br i1 %102, label %block_41f9e7, label %block_41fa25
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007d0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4007f8:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %5, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %7, i64* %10
  store i64 6430872, i64* %4, align 8, !tbaa !1240
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1, !tbaa !1248
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1, !tbaa !1261
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1262
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %14, align 1, !tbaa !1263
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !1264
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1, !tbaa !1265
  %17 = inttoptr i64 %9 to i64*
  %18 = load i64, i64* %17
  store i64 %18, i64* %6, align 8, !tbaa !1240
  %19 = inttoptr i64 %8 to i64*
  %20 = load i64, i64* %19
  store i64 %20, i64* %3, align 8, !tbaa !1240
  %21 = add i64 %8, 8
  store i64 %21, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006b0(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4006b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_622000__got_plt_type* @seg_622000__got_plt to i64), i64 8) to i64*)
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8
  store i64 %7, i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_622000__got_plt_type* @seg_622000__got_plt to i64), i64 16) to i64*)
  store i64 %9, i64* %3, align 8, !tbaa !1240
  %10 = icmp eq i64 %9, 4196028
  br i1 %10, label %block_4006bc, label %56

block_4006bc:                                     ; preds = %block_4006b0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %18 = load i64, i64* %15, align 8, !alias.scope !1829, !noalias !1832
  %19 = load i64, i64* %14, align 8, !alias.scope !1829, !noalias !1832
  %20 = load i64, i64* %13, align 8, !alias.scope !1829, !noalias !1832
  %21 = load i64, i64* %12, align 8, !alias.scope !1829, !noalias !1832
  %22 = load i64, i64* %16, align 8, !alias.scope !1829, !noalias !1832
  %23 = load i64, i64* %17, align 8, !alias.scope !1829, !noalias !1832
  %24 = inttoptr i64 %6 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %6, 8
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %6, 16
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %6, 24
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %6, 32
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %6, 40
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %6, 48
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %6, 56
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %6, 64
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %6, 72
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = inttoptr i64 %7 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %3, align 8, !alias.scope !1829, !noalias !1832
  store i64 %6, i64* %5, align 8, !alias.scope !1829, !noalias !1832
  %55 = tail call i64 @__isoc99_fscanf(i64 %18, i64 %19, i64 %20, i64 %21, i64 %22, i64 %23, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49, i64 %52), !noalias !1829
  store i64 %55, i64* %11, align 8, !alias.scope !1829, !noalias !1832
  ret %struct.Memory* %2

; <label>:56:                                     ; preds = %block_4006b0
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %9, %struct.Memory* %2)
  ret %struct.Memory* %57
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405230_iftouch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_405230:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = load i64, i64* %9, align 8
  %13 = load i64, i64* %8, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %8, align 8, !tbaa !1240
  store i64 %14, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %13, -16
  %17 = load i32, i32* %5, align 4
  %18 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %18
  %19 = bitcast [32 x %union.VectorReg]* %10 to i8*
  %20 = load double, double* bitcast (%alpha_type* @alpha to double*)
  %21 = bitcast [32 x %union.VectorReg]* %10 to double*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %23 = bitcast i64* %22 to double*
  %24 = fmul double %20, %20
  %25 = add i64 %13, -56
  %26 = inttoptr i64 %25 to double*
  store double %24, double* %26
  %27 = load double, double* bitcast (%x0_type* @x0 to double*)
  store double %27, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %28 = add i64 %13, -16
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29
  %31 = sext i32 %30 to i64
  %32 = shl nsw i64 %31, 6
  store i64 %32, i64* %7, align 8, !tbaa !1240
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %39 = add i64 %32, ptrtoint (%xc_type* @xc to i64)
  store i64 %39, i64* %6, align 8, !tbaa !1240
  %40 = icmp ult i64 %39, ptrtoint (%xc_type* @xc to i64)
  %41 = icmp ult i64 %39, %32
  %42 = or i1 %40, %41
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %33, align 1, !tbaa !1248
  %44 = trunc i64 %39 to i32
  %45 = and i32 %44, 240
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #11
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %34, align 1, !tbaa !1261
  %50 = xor i64 %39, ptrtoint (%xc_type* @xc to i64)
  %51 = lshr exact i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  store i8 %53, i8* %35, align 1, !tbaa !1262
  %54 = icmp eq i64 %39, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %36, align 1, !tbaa !1263
  %56 = lshr i64 %39, 63
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %37, align 1, !tbaa !1264
  %58 = lshr i64 %31, 57
  %59 = and i64 %58, 1
  %60 = xor i64 %56, lshr (i64 ptrtoint (%xc_type* @xc to i64), i64 63)
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %60, %61
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %38, align 1, !tbaa !1265
  %65 = inttoptr i64 %39 to double*
  %66 = load double, double* %65
  %67 = bitcast %union.VectorReg* %11 to double*
  store double %66, double* %67, align 1, !tbaa !1246
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %69 = bitcast i64* %68 to double*
  store double 0.000000e+00, double* %69, align 1, !tbaa !1246
  %70 = add i64 %1, 68
  store i64 %70, i64* %3, align 8
  %71 = fcmp uno double %66, %27
  br i1 %71, label %72, label %85

; <label>:72:                                     ; preds = %block_405230
  %73 = fadd double %66, %27
  %74 = bitcast double %73 to i64
  %75 = and i64 %74, 9221120237041090560
  %76 = icmp eq i64 %75, 9218868437227405312
  %77 = and i64 %74, 2251799813685247
  %78 = icmp ne i64 %77, 0
  %79 = and i1 %76, %78
  br i1 %79, label %80, label %91

; <label>:80:                                     ; preds = %72
  %81 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %70, %struct.Memory* %2) #14
  %82 = load i64, i64* %3, align 8
  %83 = load i8, i8* %33, align 1, !tbaa !1248
  %84 = load i8, i8* %36, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15

; <label>:85:                                     ; preds = %block_405230
  %86 = fcmp ogt double %66, %27
  br i1 %86, label %91, label %87

; <label>:87:                                     ; preds = %85
  %88 = fcmp olt double %66, %27
  br i1 %88, label %91, label %89

; <label>:89:                                     ; preds = %87
  %90 = fcmp oeq double %66, %27
  br i1 %90, label %91, label %94

; <label>:91:                                     ; preds = %89, %87, %85, %72
  %92 = phi i8 [ 0, %85 ], [ 0, %87 ], [ 1, %89 ], [ 1, %72 ]
  %93 = phi i8 [ 0, %85 ], [ 1, %87 ], [ 0, %89 ], [ 1, %72 ]
  br label %94

; <label>:94:                                     ; preds = %91, %89
  %95 = phi i8 [ %92, %91 ], [ %55, %89 ]
  %96 = phi i8 [ %93, %91 ], [ %43, %89 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15: ; preds = %94, %80
  %97 = phi i8 [ %84, %80 ], [ %95, %94 ]
  %98 = phi i8 [ %83, %80 ], [ %96, %94 ]
  %99 = phi i64 [ %82, %80 ], [ %70, %94 ]
  %100 = phi %struct.Memory* [ %81, %80 ], [ %2, %94 ]
  %101 = or i8 %97, %98
  %102 = icmp ne i8 %101, 0
  %103 = select i1 %102, i64 50, i64 6
  %104 = add i64 %99, %103
  br i1 %102, label %block_4052a6, label %block_40527a

block_4052fc:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit18
  %105 = bitcast [32 x %union.VectorReg]* %10 to i32*
  store i32 0, i32* %105, align 1, !tbaa !1244
  %106 = getelementptr inbounds i8, i8* %19, i64 4
  %107 = bitcast i8* %106 to i32*
  store i32 0, i32* %107, align 1, !tbaa !1244
  %108 = bitcast i64* %22 to i32*
  store i32 0, i32* %108, align 1, !tbaa !1244
  %109 = getelementptr inbounds i8, i8* %19, i64 12
  %110 = bitcast i8* %109 to i32*
  store i32 0, i32* %110, align 1, !tbaa !1244
  %111 = load i64, i64* %9, align 8
  %112 = add i64 %111, -24
  %113 = add i64 %439, 8
  %114 = load double, double* %21, align 1
  %115 = inttoptr i64 %112 to double*
  store double %114, double* %115
  br label %block_405309

block_4053f0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit17
  %116 = load i64, i64* %9, align 8
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 6
  store i64 %121, i64* %7, align 8, !tbaa !1240
  %122 = add i64 %121, ptrtoint (%zc_type* @zc to i64)
  store i64 %122, i64* %6, align 8, !tbaa !1240
  %123 = icmp ult i64 %122, ptrtoint (%zc_type* @zc to i64)
  %124 = icmp ult i64 %122, %121
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %33, align 1, !tbaa !1248
  %127 = trunc i64 %122 to i32
  %128 = and i32 %127, 240
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #11
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %34, align 1, !tbaa !1261
  %133 = xor i64 %122, ptrtoint (%zc_type* @zc to i64)
  %134 = lshr exact i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  store i8 %136, i8* %35, align 1, !tbaa !1262
  %137 = icmp eq i64 %122, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %36, align 1, !tbaa !1263
  %139 = lshr i64 %122, 63
  %140 = trunc i64 %139 to i8
  store i8 %140, i8* %37, align 1, !tbaa !1264
  %141 = lshr i64 %120, 57
  %142 = and i64 %141, 1
  %143 = xor i64 %139, lshr (i64 ptrtoint (%zc_type* @zc to i64), i64 63)
  %144 = xor i64 %139, %142
  %145 = add nuw nsw i64 %143, %144
  %146 = icmp eq i64 %145, 2
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %38, align 1, !tbaa !1265
  %148 = inttoptr i64 %122 to double*
  %149 = load double, double* %148
  %150 = load double, double* bitcast (%z0_type* @z0 to double*)
  %151 = fsub double %149, %150
  store double %151, double* %21, align 1, !tbaa !1246
  store i64 0, i64* %22, align 1, !tbaa !1246
  %152 = add i64 %116, -40
  %153 = add i64 %597, 39
  %154 = inttoptr i64 %152 to double*
  store double %151, double* %154
  br label %block_40547f

block_405361:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %155 = load double, double* bitcast (%_y0_type* @_y0 to double*)
  store double %155, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %156 = load i64, i64* %9, align 8
  %157 = add i64 %156, -8
  %158 = inttoptr i64 %157 to i32*
  %159 = load i32, i32* %158
  %160 = sext i32 %159 to i64
  %161 = shl nsw i64 %160, 6
  store i64 %161, i64* %7, align 8, !tbaa !1240
  %162 = add i64 %161, ptrtoint (%yc_type* @yc to i64)
  store i64 %162, i64* %6, align 8, !tbaa !1240
  %163 = icmp ult i64 %162, ptrtoint (%yc_type* @yc to i64)
  %164 = icmp ult i64 %162, %161
  %165 = or i1 %163, %164
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %33, align 1, !tbaa !1248
  %167 = trunc i64 %162 to i32
  %168 = and i32 %167, 240
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #11
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  store i8 %172, i8* %34, align 1, !tbaa !1261
  %173 = xor i64 %162, ptrtoint (%yc_type* @yc to i64)
  %174 = lshr exact i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  store i8 %176, i8* %35, align 1, !tbaa !1262
  %177 = icmp eq i64 %162, 0
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %36, align 1, !tbaa !1263
  %179 = lshr i64 %162, 63
  %180 = trunc i64 %179 to i8
  store i8 %180, i8* %37, align 1, !tbaa !1264
  %181 = lshr i64 %160, 57
  %182 = and i64 %181, 1
  %183 = xor i64 %179, lshr (i64 ptrtoint (%yc_type* @yc to i64), i64 63)
  %184 = xor i64 %179, %182
  %185 = add nuw nsw i64 %183, %184
  %186 = icmp eq i64 %185, 2
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %38, align 1, !tbaa !1265
  %188 = add i64 %161, add (i64 ptrtoint (%yc_type* @yc to i64), i64 16)
  %189 = add i64 %710, 35
  store i64 %189, i64* %3, align 8
  %190 = inttoptr i64 %188 to double*
  %191 = load double, double* %190
  %192 = fcmp uno double %155, %191
  br i1 %192, label %193, label %206

; <label>:193:                                    ; preds = %block_405361
  %194 = fadd double %155, %191
  %195 = bitcast double %194 to i64
  %196 = and i64 %195, 9221120237041090560
  %197 = icmp eq i64 %196, 9218868437227405312
  %198 = and i64 %195, 2251799813685247
  %199 = icmp ne i64 %198, 0
  %200 = and i1 %197, %199
  br i1 %200, label %201, label %212

; <label>:201:                                    ; preds = %193
  %202 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %189, %struct.Memory* %706) #14
  %203 = load i64, i64* %3, align 8
  %204 = load i8, i8* %33, align 1, !tbaa !1248
  %205 = load i8, i8* %36, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:206:                                    ; preds = %block_405361
  %207 = fcmp ogt double %155, %191
  br i1 %207, label %212, label %208

; <label>:208:                                    ; preds = %206
  %209 = fcmp olt double %155, %191
  br i1 %209, label %212, label %210

; <label>:210:                                    ; preds = %208
  %211 = fcmp oeq double %155, %191
  br i1 %211, label %212, label %215

; <label>:212:                                    ; preds = %210, %208, %206, %193
  %213 = phi i8 [ 0, %206 ], [ 0, %208 ], [ 1, %210 ], [ 1, %193 ]
  %214 = phi i8 [ 0, %206 ], [ 1, %208 ], [ 0, %210 ], [ 1, %193 ]
  br label %215

; <label>:215:                                    ; preds = %212, %210
  %216 = phi i8 [ %213, %212 ], [ %178, %210 ]
  %217 = phi i8 [ %214, %212 ], [ %166, %210 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %215, %201
  %218 = phi i8 [ %205, %201 ], [ %216, %215 ]
  %219 = phi i8 [ %204, %201 ], [ %217, %215 ]
  %220 = phi i64 [ %203, %201 ], [ %189, %215 ]
  %221 = phi %struct.Memory* [ %202, %201 ], [ %706, %215 ]
  %222 = or i8 %218, %219
  %223 = icmp ne i8 %222, 0
  %224 = select i1 %223, i64 51, i64 6
  %225 = add i64 %220, %224
  br i1 %223, label %block_4053b7, label %block_40538a

block_4054d1:                                     ; preds = %block_4054ca, %block_4054be
  %226 = phi %struct.Memory* [ %296, %block_4054ca ], [ %296, %block_4054be ]
  %227 = inttoptr i64 %299 to i32*
  %228 = load i32, i32* %227
  %229 = zext i32 %228 to i64
  store i64 %229, i64* %6, align 8, !tbaa !1240
  %230 = load i64, i64* %8, align 8, !tbaa !1240
  %231 = add i64 %230, 8
  %232 = inttoptr i64 %230 to i64*
  %233 = load i64, i64* %232
  store i64 %233, i64* %9, align 8, !tbaa !1240
  %234 = inttoptr i64 %231 to i64*
  %235 = load i64, i64* %234
  store i64 %235, i64* %3, align 8, !tbaa !1240
  %236 = add i64 %230, 16
  store i64 %236, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %226

block_40547f:                                     ; preds = %block_405472, %block_405445, %block_4053f0
  %237 = phi i8 [ %138, %block_4053f0 ], [ %505, %block_405472 ], [ %323, %block_405445 ]
  %238 = phi i8 [ %126, %block_4053f0 ], [ %506, %block_405472 ], [ %311, %block_405445 ]
  %239 = phi i64 [ %116, %block_4053f0 ], [ %519, %block_405472 ], [ %301, %block_405445 ]
  %240 = phi i64 [ %153, %block_4053f0 ], [ %521, %block_405472 ], [ %339, %block_405445 ]
  %241 = phi i64 [ 104, %block_4053f0 ], [ 5, %block_405472 ], [ 5, %block_405445 ]
  %242 = phi %struct.Memory* [ %593, %block_4053f0 ], [ %508, %block_405472 ], [ %508, %block_405445 ]
  %243 = add i64 %240, %241
  %244 = add i64 %239, -24
  %245 = inttoptr i64 %244 to double*
  %246 = load double, double* %245
  %247 = fmul double %246, %246
  %248 = add i64 %239, -32
  %249 = inttoptr i64 %248 to double*
  %250 = load double, double* %249
  %251 = fmul double %250, %250
  %252 = fadd double %251, %247
  %253 = add i64 %239, -40
  %254 = inttoptr i64 %253 to double*
  %255 = load double, double* %254
  %256 = fmul double %255, %255
  %257 = fadd double %256, %252
  %258 = add i64 %239, -16
  %259 = inttoptr i64 %258 to double*
  store double %257, double* %259
  %260 = inttoptr i64 %258 to double*
  %261 = load double, double* %260
  store double %261, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %262 = add i64 %239, -48
  %263 = inttoptr i64 %262 to double*
  %264 = load double, double* %263
  store double %264, double* %67, align 1, !tbaa !1246
  store double 0.000000e+00, double* %69, align 1, !tbaa !1246
  %265 = add i64 %243, 57
  store i64 %265, i64* %3, align 8
  %266 = fcmp uno double %264, %261
  br i1 %266, label %267, label %280

; <label>:267:                                    ; preds = %block_40547f
  %268 = fadd double %264, %261
  %269 = bitcast double %268 to i64
  %270 = and i64 %269, 9221120237041090560
  %271 = icmp eq i64 %270, 9218868437227405312
  %272 = and i64 %269, 2251799813685247
  %273 = icmp ne i64 %272, 0
  %274 = and i1 %271, %273
  br i1 %274, label %275, label %286

; <label>:275:                                    ; preds = %267
  %276 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %265, %struct.Memory* %242) #14
  %277 = load i8, i8* %33, align 1, !tbaa !1248
  %278 = load i8, i8* %36, align 1, !tbaa !1263
  %279 = load i64, i64* %9, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit16

; <label>:280:                                    ; preds = %block_40547f
  %281 = fcmp ogt double %264, %261
  br i1 %281, label %286, label %282

; <label>:282:                                    ; preds = %280
  %283 = fcmp olt double %264, %261
  br i1 %283, label %286, label %284

; <label>:284:                                    ; preds = %282
  %285 = fcmp oeq double %264, %261
  br i1 %285, label %286, label %290

; <label>:286:                                    ; preds = %284, %282, %280, %267
  %287 = phi i8 [ 0, %280 ], [ 0, %282 ], [ 1, %284 ], [ 1, %267 ]
  %288 = phi i8 [ 0, %280 ], [ 0, %282 ], [ 0, %284 ], [ 1, %267 ]
  %289 = phi i8 [ 0, %280 ], [ 1, %282 ], [ 0, %284 ], [ 1, %267 ]
  store i8 %287, i8* %36, align 1, !tbaa !1463
  store i8 %288, i8* %34, align 1, !tbaa !1463
  store i8 %289, i8* %33, align 1, !tbaa !1463
  br label %290

; <label>:290:                                    ; preds = %286, %284
  %291 = phi i8 [ %287, %286 ], [ %237, %284 ]
  %292 = phi i8 [ %289, %286 ], [ %238, %284 ]
  store i8 0, i8* %38, align 1, !tbaa !1463
  store i8 0, i8* %37, align 1, !tbaa !1463
  store i8 0, i8* %35, align 1, !tbaa !1463
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit16

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit16: ; preds = %290, %275
  %293 = phi i64 [ %279, %275 ], [ %239, %290 ]
  %294 = phi i8 [ %278, %275 ], [ %291, %290 ]
  %295 = phi i8 [ %277, %275 ], [ %292, %290 ]
  %296 = phi %struct.Memory* [ %276, %275 ], [ %242, %290 ]
  %297 = or i8 %294, %295
  %298 = icmp ne i8 %297, 0
  %299 = add i64 %293, -4
  br i1 %298, label %block_4054ca, label %block_4054be

block_405445:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit19
  %300 = load double, double* bitcast (%z0_type* @z0 to double*)
  %301 = load i64, i64* %9, align 8
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i32*
  %304 = load i32, i32* %303
  %305 = sext i32 %304 to i64
  %306 = shl nsw i64 %305, 6
  store i64 %306, i64* %7, align 8, !tbaa !1240
  %307 = add i64 %306, ptrtoint (%zc_type* @zc to i64)
  store i64 %307, i64* %6, align 8, !tbaa !1240
  %308 = icmp ult i64 %307, ptrtoint (%zc_type* @zc to i64)
  %309 = icmp ult i64 %307, %306
  %310 = or i1 %308, %309
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %33, align 1, !tbaa !1248
  %312 = trunc i64 %307 to i32
  %313 = and i32 %312, 240
  %314 = tail call i32 @llvm.ctpop.i32(i32 %313) #11
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  %317 = xor i8 %316, 1
  store i8 %317, i8* %34, align 1, !tbaa !1261
  %318 = xor i64 %307, ptrtoint (%zc_type* @zc to i64)
  %319 = lshr exact i64 %318, 4
  %320 = trunc i64 %319 to i8
  %321 = and i8 %320, 1
  store i8 %321, i8* %35, align 1, !tbaa !1262
  %322 = icmp eq i64 %307, 0
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %36, align 1, !tbaa !1263
  %324 = lshr i64 %307, 63
  %325 = trunc i64 %324 to i8
  store i8 %325, i8* %37, align 1, !tbaa !1264
  %326 = lshr i64 %305, 57
  %327 = and i64 %326, 1
  %328 = xor i64 %324, lshr (i64 ptrtoint (%zc_type* @zc to i64), i64 63)
  %329 = xor i64 %324, %327
  %330 = add nuw nsw i64 %328, %329
  %331 = icmp eq i64 %330, 2
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %38, align 1, !tbaa !1265
  %333 = add i64 %306, add (i64 ptrtoint (%zc_type* @zc to i64), i64 32)
  %334 = inttoptr i64 %333 to double*
  %335 = load double, double* %334
  %336 = fsub double %300, %335
  store double %336, double* %21, align 1, !tbaa !1246
  store i64 0, i64* %22, align 1, !tbaa !1246
  %337 = add i64 %301, -40
  %338 = inttoptr i64 %337 to double*
  store double %336, double* %338
  %339 = add i64 %512, 53
  br label %block_40547f

block_40527a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15
  %340 = load i64, i64* %9, align 8
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i32*
  %343 = load i32, i32* %342
  %344 = sext i32 %343 to i64
  %345 = shl nsw i64 %344, 6
  %346 = add i64 %345, ptrtoint (%xc_type* @xc to i64)
  %347 = inttoptr i64 %346 to double*
  %348 = load double, double* %347
  %349 = load double, double* bitcast (%x0_type* @x0 to double*)
  %350 = fsub double %348, %349
  store double %350, double* %21, align 1, !tbaa !1246
  store i64 0, i64* %22, align 1, !tbaa !1246
  %351 = add i64 %340, -24
  %352 = add i64 %104, 39
  %353 = inttoptr i64 %351 to double*
  store double %350, double* %353
  br label %block_405309

block_4054be:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit16
  %354 = inttoptr i64 %299 to i32*
  store i32 1, i32* %354
  br label %block_4054d1

block_405335:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %355 = load i64, i64* %9, align 8
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  %360 = shl nsw i64 %359, 6
  %361 = add i64 %360, ptrtoint (%yc_type* @yc to i64)
  %362 = inttoptr i64 %361 to double*
  %363 = load double, double* %362
  %364 = load double, double* bitcast (%_y0_type* @_y0 to double*)
  %365 = fsub double %363, %364
  store double %365, double* %21, align 1, !tbaa !1246
  store i64 0, i64* %22, align 1, !tbaa !1246
  %366 = add i64 %355, -32
  %367 = add i64 %710, 39
  %368 = inttoptr i64 %366 to double*
  store double %365, double* %368
  br label %block_4053c4

block_4052a6:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit15
  %369 = load double, double* bitcast (%x0_type* @x0 to double*)
  store double %369, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %370 = load i64, i64* %9, align 8
  %371 = add i64 %370, -8
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = sext i32 %373 to i64
  %375 = shl nsw i64 %374, 6
  store i64 %375, i64* %7, align 8, !tbaa !1240
  %376 = add i64 %375, ptrtoint (%xc_type* @xc to i64)
  store i64 %376, i64* %6, align 8, !tbaa !1240
  %377 = icmp ult i64 %376, ptrtoint (%xc_type* @xc to i64)
  %378 = icmp ult i64 %376, %375
  %379 = or i1 %377, %378
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %33, align 1, !tbaa !1248
  %381 = trunc i64 %376 to i32
  %382 = and i32 %381, 240
  %383 = tail call i32 @llvm.ctpop.i32(i32 %382) #11
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  %386 = xor i8 %385, 1
  store i8 %386, i8* %34, align 1, !tbaa !1261
  %387 = xor i64 %376, ptrtoint (%xc_type* @xc to i64)
  %388 = lshr exact i64 %387, 4
  %389 = trunc i64 %388 to i8
  %390 = and i8 %389, 1
  store i8 %390, i8* %35, align 1, !tbaa !1262
  %391 = icmp eq i64 %376, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %36, align 1, !tbaa !1263
  %393 = lshr i64 %376, 63
  %394 = trunc i64 %393 to i8
  store i8 %394, i8* %37, align 1, !tbaa !1264
  %395 = lshr i64 %374, 57
  %396 = and i64 %395, 1
  %397 = xor i64 %393, lshr (i64 ptrtoint (%xc_type* @xc to i64), i64 63)
  %398 = xor i64 %393, %396
  %399 = add nuw nsw i64 %397, %398
  %400 = icmp eq i64 %399, 2
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %38, align 1, !tbaa !1265
  %402 = add i64 %375, add (i64 ptrtoint (%xc_type* @xc to i64), i64 8)
  %403 = add i64 %104, 35
  store i64 %403, i64* %3, align 8
  %404 = inttoptr i64 %402 to double*
  %405 = load double, double* %404
  %406 = fcmp uno double %369, %405
  br i1 %406, label %407, label %420

; <label>:407:                                    ; preds = %block_4052a6
  %408 = fadd double %369, %405
  %409 = bitcast double %408 to i64
  %410 = and i64 %409, 9221120237041090560
  %411 = icmp eq i64 %410, 9218868437227405312
  %412 = and i64 %409, 2251799813685247
  %413 = icmp ne i64 %412, 0
  %414 = and i1 %411, %413
  br i1 %414, label %415, label %426

; <label>:415:                                    ; preds = %407
  %416 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %403, %struct.Memory* %100) #14
  %417 = load i64, i64* %3, align 8
  %418 = load i8, i8* %33, align 1, !tbaa !1248
  %419 = load i8, i8* %36, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit18

; <label>:420:                                    ; preds = %block_4052a6
  %421 = fcmp ogt double %369, %405
  br i1 %421, label %426, label %422

; <label>:422:                                    ; preds = %420
  %423 = fcmp olt double %369, %405
  br i1 %423, label %426, label %424

; <label>:424:                                    ; preds = %422
  %425 = fcmp oeq double %369, %405
  br i1 %425, label %426, label %429

; <label>:426:                                    ; preds = %424, %422, %420, %407
  %427 = phi i8 [ 0, %420 ], [ 0, %422 ], [ 1, %424 ], [ 1, %407 ]
  %428 = phi i8 [ 0, %420 ], [ 1, %422 ], [ 0, %424 ], [ 1, %407 ]
  br label %429

; <label>:429:                                    ; preds = %426, %424
  %430 = phi i8 [ %427, %426 ], [ %392, %424 ]
  %431 = phi i8 [ %428, %426 ], [ %380, %424 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit18

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit18: ; preds = %429, %415
  %432 = phi i8 [ %419, %415 ], [ %430, %429 ]
  %433 = phi i8 [ %418, %415 ], [ %431, %429 ]
  %434 = phi i64 [ %417, %415 ], [ %403, %429 ]
  %435 = phi %struct.Memory* [ %416, %415 ], [ %100, %429 ]
  %436 = or i8 %432, %433
  %437 = icmp ne i8 %436, 0
  %438 = select i1 %437, i64 51, i64 6
  %439 = add i64 %434, %438
  br i1 %437, label %block_4052fc, label %block_4052cf

block_4054ca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit16
  %440 = inttoptr i64 %299 to i32*
  store i32 0, i32* %440
  br label %block_4054d1

block_40541c:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit17
  %441 = load double, double* bitcast (%z0_type* @z0 to double*)
  store double %441, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %442 = load i64, i64* %9, align 8
  %443 = add i64 %442, -8
  %444 = inttoptr i64 %443 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  %447 = shl nsw i64 %446, 6
  store i64 %447, i64* %7, align 8, !tbaa !1240
  %448 = add i64 %447, ptrtoint (%zc_type* @zc to i64)
  store i64 %448, i64* %6, align 8, !tbaa !1240
  %449 = icmp ult i64 %448, ptrtoint (%zc_type* @zc to i64)
  %450 = icmp ult i64 %448, %447
  %451 = or i1 %449, %450
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %33, align 1, !tbaa !1248
  %453 = trunc i64 %448 to i32
  %454 = and i32 %453, 240
  %455 = tail call i32 @llvm.ctpop.i32(i32 %454) #11
  %456 = trunc i32 %455 to i8
  %457 = and i8 %456, 1
  %458 = xor i8 %457, 1
  store i8 %458, i8* %34, align 1, !tbaa !1261
  %459 = xor i64 %448, ptrtoint (%zc_type* @zc to i64)
  %460 = lshr exact i64 %459, 4
  %461 = trunc i64 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %35, align 1, !tbaa !1262
  %463 = icmp eq i64 %448, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %36, align 1, !tbaa !1263
  %465 = lshr i64 %448, 63
  %466 = trunc i64 %465 to i8
  store i8 %466, i8* %37, align 1, !tbaa !1264
  %467 = lshr i64 %446, 57
  %468 = and i64 %467, 1
  %469 = xor i64 %465, lshr (i64 ptrtoint (%zc_type* @zc to i64), i64 63)
  %470 = xor i64 %465, %468
  %471 = add nuw nsw i64 %469, %470
  %472 = icmp eq i64 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %38, align 1, !tbaa !1265
  %474 = add i64 %447, add (i64 ptrtoint (%zc_type* @zc to i64), i64 32)
  %475 = add i64 %597, 35
  store i64 %475, i64* %3, align 8
  %476 = inttoptr i64 %474 to double*
  %477 = load double, double* %476
  %478 = fcmp uno double %441, %477
  br i1 %478, label %479, label %492

; <label>:479:                                    ; preds = %block_40541c
  %480 = fadd double %441, %477
  %481 = bitcast double %480 to i64
  %482 = and i64 %481, 9221120237041090560
  %483 = icmp eq i64 %482, 9218868437227405312
  %484 = and i64 %481, 2251799813685247
  %485 = icmp ne i64 %484, 0
  %486 = and i1 %483, %485
  br i1 %486, label %487, label %498

; <label>:487:                                    ; preds = %479
  %488 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %475, %struct.Memory* %593) #14
  %489 = load i64, i64* %3, align 8
  %490 = load i8, i8* %33, align 1, !tbaa !1248
  %491 = load i8, i8* %36, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit19

; <label>:492:                                    ; preds = %block_40541c
  %493 = fcmp ogt double %441, %477
  br i1 %493, label %498, label %494

; <label>:494:                                    ; preds = %492
  %495 = fcmp olt double %441, %477
  br i1 %495, label %498, label %496

; <label>:496:                                    ; preds = %494
  %497 = fcmp oeq double %441, %477
  br i1 %497, label %498, label %502

; <label>:498:                                    ; preds = %496, %494, %492, %479
  %499 = phi i8 [ 0, %492 ], [ 0, %494 ], [ 1, %496 ], [ 1, %479 ]
  %500 = phi i8 [ 0, %492 ], [ 0, %494 ], [ 0, %496 ], [ 1, %479 ]
  %501 = phi i8 [ 0, %492 ], [ 1, %494 ], [ 0, %496 ], [ 1, %479 ]
  store i8 %499, i8* %36, align 1, !tbaa !1463
  store i8 %500, i8* %34, align 1, !tbaa !1463
  store i8 %501, i8* %33, align 1, !tbaa !1463
  br label %502

; <label>:502:                                    ; preds = %498, %496
  %503 = phi i8 [ %499, %498 ], [ %464, %496 ]
  %504 = phi i8 [ %501, %498 ], [ %452, %496 ]
  store i8 0, i8* %38, align 1, !tbaa !1463
  store i8 0, i8* %37, align 1, !tbaa !1463
  store i8 0, i8* %35, align 1, !tbaa !1463
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit19

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit19: ; preds = %502, %487
  %505 = phi i8 [ %491, %487 ], [ %503, %502 ]
  %506 = phi i8 [ %490, %487 ], [ %504, %502 ]
  %507 = phi i64 [ %489, %487 ], [ %475, %502 ]
  %508 = phi %struct.Memory* [ %488, %487 ], [ %593, %502 ]
  %509 = or i8 %505, %506
  %510 = icmp ne i8 %509, 0
  %511 = select i1 %510, i64 51, i64 6
  %512 = add i64 %507, %511
  br i1 %510, label %block_405472, label %block_405445

block_405472:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit19
  %513 = bitcast [32 x %union.VectorReg]* %10 to i32*
  store i32 0, i32* %513, align 1, !tbaa !1244
  %514 = getelementptr inbounds i8, i8* %19, i64 4
  %515 = bitcast i8* %514 to i32*
  store i32 0, i32* %515, align 1, !tbaa !1244
  %516 = bitcast i64* %22 to i32*
  store i32 0, i32* %516, align 1, !tbaa !1244
  %517 = getelementptr inbounds i8, i8* %19, i64 12
  %518 = bitcast i8* %517 to i32*
  store i32 0, i32* %518, align 1, !tbaa !1244
  %519 = load i64, i64* %9, align 8
  %520 = add i64 %519, -40
  %521 = add i64 %512, 8
  %522 = load double, double* %21, align 1
  %523 = inttoptr i64 %520 to double*
  store double %522, double* %523
  br label %block_40547f

block_4053c4:                                     ; preds = %block_4053b7, %block_40538a, %block_405335
  %524 = phi i64 [ %355, %block_405335 ], [ %632, %block_4053b7 ], [ %599, %block_40538a ]
  %525 = phi i64 [ %367, %block_405335 ], [ %634, %block_4053b7 ], [ %611, %block_40538a ]
  %526 = phi i64 [ 104, %block_405335 ], [ 5, %block_4053b7 ], [ 5, %block_40538a ]
  %527 = phi %struct.Memory* [ %706, %block_405335 ], [ %221, %block_4053b7 ], [ %221, %block_40538a ]
  %528 = add i64 %525, %526
  %529 = load double, double* bitcast (%z0_type* @z0 to double*)
  store double %529, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %530 = add i64 %524, -8
  %531 = inttoptr i64 %530 to i32*
  %532 = load i32, i32* %531
  %533 = sext i32 %532 to i64
  %534 = shl nsw i64 %533, 6
  store i64 %534, i64* %7, align 8, !tbaa !1240
  %535 = add i64 %534, ptrtoint (%zc_type* @zc to i64)
  store i64 %535, i64* %6, align 8, !tbaa !1240
  %536 = icmp ult i64 %535, ptrtoint (%zc_type* @zc to i64)
  %537 = icmp ult i64 %535, %534
  %538 = or i1 %536, %537
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %33, align 1, !tbaa !1248
  %540 = trunc i64 %535 to i32
  %541 = and i32 %540, 240
  %542 = tail call i32 @llvm.ctpop.i32(i32 %541) #11
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  %545 = xor i8 %544, 1
  store i8 %545, i8* %34, align 1, !tbaa !1261
  %546 = xor i64 %535, ptrtoint (%zc_type* @zc to i64)
  %547 = lshr exact i64 %546, 4
  %548 = trunc i64 %547 to i8
  %549 = and i8 %548, 1
  store i8 %549, i8* %35, align 1, !tbaa !1262
  %550 = icmp eq i64 %535, 0
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %36, align 1, !tbaa !1263
  %552 = lshr i64 %535, 63
  %553 = trunc i64 %552 to i8
  store i8 %553, i8* %37, align 1, !tbaa !1264
  %554 = lshr i64 %533, 57
  %555 = and i64 %554, 1
  %556 = xor i64 %552, lshr (i64 ptrtoint (%zc_type* @zc to i64), i64 63)
  %557 = xor i64 %552, %555
  %558 = add nuw nsw i64 %556, %557
  %559 = icmp eq i64 %558, 2
  %560 = zext i1 %559 to i8
  store i8 %560, i8* %38, align 1, !tbaa !1265
  %561 = inttoptr i64 %535 to double*
  %562 = load double, double* %561
  store double %562, double* %67, align 1, !tbaa !1246
  store double 0.000000e+00, double* %69, align 1, !tbaa !1246
  %563 = add i64 %528, 38
  store i64 %563, i64* %3, align 8
  %564 = fcmp uno double %562, %529
  br i1 %564, label %565, label %578

; <label>:565:                                    ; preds = %block_4053c4
  %566 = fadd double %562, %529
  %567 = bitcast double %566 to i64
  %568 = and i64 %567, 9221120237041090560
  %569 = icmp eq i64 %568, 9218868437227405312
  %570 = and i64 %567, 2251799813685247
  %571 = icmp ne i64 %570, 0
  %572 = and i1 %569, %571
  br i1 %572, label %573, label %584

; <label>:573:                                    ; preds = %565
  %574 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %563, %struct.Memory* %527) #14
  %575 = load i64, i64* %3, align 8
  %576 = load i8, i8* %33, align 1, !tbaa !1248
  %577 = load i8, i8* %36, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit17

; <label>:578:                                    ; preds = %block_4053c4
  %579 = fcmp ogt double %562, %529
  br i1 %579, label %584, label %580

; <label>:580:                                    ; preds = %578
  %581 = fcmp olt double %562, %529
  br i1 %581, label %584, label %582

; <label>:582:                                    ; preds = %580
  %583 = fcmp oeq double %562, %529
  br i1 %583, label %584, label %587

; <label>:584:                                    ; preds = %582, %580, %578, %565
  %585 = phi i8 [ 0, %578 ], [ 0, %580 ], [ 1, %582 ], [ 1, %565 ]
  %586 = phi i8 [ 0, %578 ], [ 1, %580 ], [ 0, %582 ], [ 1, %565 ]
  br label %587

; <label>:587:                                    ; preds = %584, %582
  %588 = phi i8 [ %585, %584 ], [ %551, %582 ]
  %589 = phi i8 [ %586, %584 ], [ %539, %582 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit17

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit17: ; preds = %587, %573
  %590 = phi i8 [ %577, %573 ], [ %588, %587 ]
  %591 = phi i8 [ %576, %573 ], [ %589, %587 ]
  %592 = phi i64 [ %575, %573 ], [ %563, %587 ]
  %593 = phi %struct.Memory* [ %574, %573 ], [ %527, %587 ]
  %594 = or i8 %590, %591
  %595 = icmp ne i8 %594, 0
  %596 = select i1 %595, i64 50, i64 6
  %597 = add i64 %592, %596
  br i1 %595, label %block_40541c, label %block_4053f0

block_40538a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %598 = load double, double* bitcast (%_y0_type* @_y0 to double*)
  %599 = load i64, i64* %9, align 8
  %600 = add i64 %599, -8
  %601 = inttoptr i64 %600 to i32*
  %602 = load i32, i32* %601
  %603 = sext i32 %602 to i64
  %604 = shl nsw i64 %603, 6
  %605 = add i64 %604, add (i64 ptrtoint (%yc_type* @yc to i64), i64 16)
  %606 = inttoptr i64 %605 to double*
  %607 = load double, double* %606
  %608 = fsub double %598, %607
  store double %608, double* %21, align 1, !tbaa !1246
  store i64 0, i64* %22, align 1, !tbaa !1246
  %609 = add i64 %599, -32
  %610 = inttoptr i64 %609 to double*
  store double %608, double* %610
  %611 = add i64 %225, 53
  br label %block_4053c4

block_4052cf:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit18
  %612 = load double, double* bitcast (%x0_type* @x0 to double*)
  %613 = load i64, i64* %9, align 8
  %614 = add i64 %613, -8
  %615 = inttoptr i64 %614 to i32*
  %616 = load i32, i32* %615
  %617 = sext i32 %616 to i64
  %618 = shl nsw i64 %617, 6
  %619 = add i64 %618, add (i64 ptrtoint (%xc_type* @xc to i64), i64 8)
  %620 = inttoptr i64 %619 to double*
  %621 = load double, double* %620
  %622 = fsub double %612, %621
  store double %622, double* %21, align 1, !tbaa !1246
  store i64 0, i64* %22, align 1, !tbaa !1246
  %623 = add i64 %613, -24
  %624 = inttoptr i64 %623 to double*
  store double %622, double* %624
  %625 = add i64 %439, 53
  br label %block_405309

block_4053b7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %626 = bitcast [32 x %union.VectorReg]* %10 to i32*
  store i32 0, i32* %626, align 1, !tbaa !1244
  %627 = getelementptr inbounds i8, i8* %19, i64 4
  %628 = bitcast i8* %627 to i32*
  store i32 0, i32* %628, align 1, !tbaa !1244
  %629 = bitcast i64* %22 to i32*
  store i32 0, i32* %629, align 1, !tbaa !1244
  %630 = getelementptr inbounds i8, i8* %19, i64 12
  %631 = bitcast i8* %630 to i32*
  store i32 0, i32* %631, align 1, !tbaa !1244
  %632 = load i64, i64* %9, align 8
  %633 = add i64 %632, -32
  %634 = add i64 %225, 8
  %635 = load double, double* %21, align 1
  %636 = inttoptr i64 %633 to double*
  store double %635, double* %636
  br label %block_4053c4

block_405309:                                     ; preds = %block_4052cf, %block_40527a, %block_4052fc
  %637 = phi i64 [ %340, %block_40527a ], [ %613, %block_4052cf ], [ %111, %block_4052fc ]
  %638 = phi i64 [ %352, %block_40527a ], [ %625, %block_4052cf ], [ %113, %block_4052fc ]
  %639 = phi i64 [ 104, %block_40527a ], [ 5, %block_4052cf ], [ 5, %block_4052fc ]
  %640 = phi %struct.Memory* [ %100, %block_40527a ], [ %435, %block_4052cf ], [ %435, %block_4052fc ]
  %641 = add i64 %638, %639
  %642 = load double, double* bitcast (%_y0_type* @_y0 to double*)
  store double %642, double* %21, align 1, !tbaa !1246
  store double 0.000000e+00, double* %23, align 1, !tbaa !1246
  %643 = add i64 %637, -8
  %644 = inttoptr i64 %643 to i32*
  %645 = load i32, i32* %644
  %646 = sext i32 %645 to i64
  %647 = shl nsw i64 %646, 6
  store i64 %647, i64* %7, align 8, !tbaa !1240
  %648 = add i64 %647, ptrtoint (%yc_type* @yc to i64)
  store i64 %648, i64* %6, align 8, !tbaa !1240
  %649 = icmp ult i64 %648, ptrtoint (%yc_type* @yc to i64)
  %650 = icmp ult i64 %648, %647
  %651 = or i1 %649, %650
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %33, align 1, !tbaa !1248
  %653 = trunc i64 %648 to i32
  %654 = and i32 %653, 240
  %655 = tail call i32 @llvm.ctpop.i32(i32 %654) #11
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  store i8 %658, i8* %34, align 1, !tbaa !1261
  %659 = xor i64 %648, ptrtoint (%yc_type* @yc to i64)
  %660 = lshr exact i64 %659, 4
  %661 = trunc i64 %660 to i8
  %662 = and i8 %661, 1
  store i8 %662, i8* %35, align 1, !tbaa !1262
  %663 = icmp eq i64 %648, 0
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %36, align 1, !tbaa !1263
  %665 = lshr i64 %648, 63
  %666 = trunc i64 %665 to i8
  store i8 %666, i8* %37, align 1, !tbaa !1264
  %667 = lshr i64 %646, 57
  %668 = and i64 %667, 1
  %669 = xor i64 %665, lshr (i64 ptrtoint (%yc_type* @yc to i64), i64 63)
  %670 = xor i64 %665, %668
  %671 = add nuw nsw i64 %669, %670
  %672 = icmp eq i64 %671, 2
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %38, align 1, !tbaa !1265
  %674 = inttoptr i64 %648 to double*
  %675 = load double, double* %674
  store double %675, double* %67, align 1, !tbaa !1246
  store double 0.000000e+00, double* %69, align 1, !tbaa !1246
  %676 = add i64 %641, 38
  store i64 %676, i64* %3, align 8
  %677 = fcmp uno double %675, %642
  br i1 %677, label %678, label %691

; <label>:678:                                    ; preds = %block_405309
  %679 = fadd double %675, %642
  %680 = bitcast double %679 to i64
  %681 = and i64 %680, 9221120237041090560
  %682 = icmp eq i64 %681, 9218868437227405312
  %683 = and i64 %680, 2251799813685247
  %684 = icmp ne i64 %683, 0
  %685 = and i1 %682, %684
  br i1 %685, label %686, label %697

; <label>:686:                                    ; preds = %678
  %687 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %676, %struct.Memory* %640) #14
  %688 = load i64, i64* %3, align 8
  %689 = load i8, i8* %33, align 1, !tbaa !1248
  %690 = load i8, i8* %36, align 1, !tbaa !1263
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:691:                                    ; preds = %block_405309
  %692 = fcmp ogt double %675, %642
  br i1 %692, label %697, label %693

; <label>:693:                                    ; preds = %691
  %694 = fcmp olt double %675, %642
  br i1 %694, label %697, label %695

; <label>:695:                                    ; preds = %693
  %696 = fcmp oeq double %675, %642
  br i1 %696, label %697, label %700

; <label>:697:                                    ; preds = %695, %693, %691, %678
  %698 = phi i8 [ 0, %691 ], [ 0, %693 ], [ 1, %695 ], [ 1, %678 ]
  %699 = phi i8 [ 0, %691 ], [ 1, %693 ], [ 0, %695 ], [ 1, %678 ]
  br label %700

; <label>:700:                                    ; preds = %697, %695
  %701 = phi i8 [ %698, %697 ], [ %664, %695 ]
  %702 = phi i8 [ %699, %697 ], [ %652, %695 ]
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %700, %686
  %703 = phi i8 [ %690, %686 ], [ %701, %700 ]
  %704 = phi i8 [ %689, %686 ], [ %702, %700 ]
  %705 = phi i64 [ %688, %686 ], [ %676, %700 ]
  %706 = phi %struct.Memory* [ %687, %686 ], [ %640, %700 ]
  %707 = or i8 %703, %704
  %708 = icmp ne i8 %707, 0
  %709 = select i1 %708, i64 50, i64 6
  %710 = add i64 %705, %709
  br i1 %708, label %block_405361, label %block_405335
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41fed0_dssum(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41fed0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%dpcmor_type* @dpcmor to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%dpcelm_type* @dpcelm to i64), i64* %4, align 8, !tbaa !1240
  %12 = add i64 %1, -19952
  %13 = add i64 %1, 29
  %14 = add i64 %9, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %13, i64* %15
  store i64 %14, i64* %6, align 8, !tbaa !1240
  %16 = tail call %struct.Memory* @sub_41b0e0_transfb(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  %17 = load i64, i64* %3, align 8
  store i64 ptrtoint (%dpcmor_type* @dpcmor to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%dpcelm_type* @dpcelm to i64), i64* %4, align 8, !tbaa !1240
  %18 = add i64 %17, -25725
  %19 = add i64 %17, 25
  %20 = load i64, i64* %6, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %6, align 8, !tbaa !1240
  %23 = tail call %struct.Memory* @sub_419a70_transf(%struct.State* nonnull %0, i64 %18, %struct.Memory* %16)
  %24 = load i64, i64* %6, align 8, !tbaa !1240
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26
  store i64 %27, i64* %7, align 8, !tbaa !1240
  %28 = inttoptr i64 %25 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %3, align 8, !tbaa !1240
  %30 = add i64 %24, 16
  store i64 %30, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %23
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405a20_timer_read(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_405a20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -12
  %15 = load i32, i32* %5, align 4
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %6, align 8, !tbaa !1240
  %20 = shl nsw i64 %19, 3
  %21 = add i64 %20, add (i64 ptrtoint (%seg_6220a0__bss_type* @seg_6220a0__bss to i64), i64 16)
  %22 = inttoptr i64 %21 to double*
  %23 = load double, double* %22
  %24 = bitcast %union.VectorReg* %9 to double*
  store double %23, double* %24, align 1, !tbaa !1246
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast i64* %25 to double*
  store double 0.000000e+00, double* %26, align 1, !tbaa !1246
  %27 = inttoptr i64 %12 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %8, align 8, !tbaa !1240
  %29 = inttoptr i64 %11 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %3, align 8, !tbaa !1240
  %31 = add i64 %11, 8
  store i64 %31, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_415670_pc_corner(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_415670:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  %16 = bitcast %union.VectorReg* %11 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast %union.VectorReg* %11 to i32*
  store i32 0, i32* %18, align 1, !tbaa !1244
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !1244
  %21 = bitcast i64* %17 to i32*
  store i32 0, i32* %21, align 1, !tbaa !1244
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 1, !tbaa !1244
  %24 = add i64 %13, -12
  %25 = load i32, i32* %5, align 4
  %26 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %26
  %27 = add i64 %13, -68
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %13, -24
  %30 = bitcast %union.VectorReg* %11 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = add i64 %13, -28
  %34 = inttoptr i64 %33 to i32*
  store i32 0, i32* %34
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %38 = add i64 %13, -32
  %39 = add i64 %13, -36
  %40 = add i64 %13, -40
  %41 = add i64 %13, -44
  %42 = add i64 %13, -48
  %43 = add i64 %13, -52
  %44 = add i64 %13, -56
  %45 = add i64 %13, -60
  %46 = add i64 %13, -64
  br label %block_41568d

block_415775:                                     ; preds = %block_41576b
  %47 = inttoptr i64 %40 to i32*
  %48 = load i32, i32* %47
  %49 = sext i32 %48 to i64
  %50 = mul nsw i64 %49, 12
  %51 = add i64 %50, ptrtoint (%e_c_type* @e_c to i64)
  %52 = sext i32 %250 to i64
  store i64 %52, i64* %7, align 8, !tbaa !1240
  %53 = shl nsw i64 %52, 2
  %54 = add i64 %53, %51
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = zext i32 %56 to i64
  store i64 %57, i64* %8, align 8, !tbaa !1240
  %58 = inttoptr i64 %46 to i32*
  store i32 %56, i32* %58
  %59 = inttoptr i64 %38 to i32*
  %60 = load i32, i32* %59
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %61, 48
  %63 = add i64 %62, ptrtoint (%ncon_edge_type* @ncon_edge to i64)
  %64 = inttoptr i64 %46 to i32*
  %65 = load i32, i32* %64
  %66 = sext i32 %65 to i64
  %67 = shl nsw i64 %66, 2
  %68 = add i64 %67, %63
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %block_4157c0, label %block_4157b7

block_4157e7:                                     ; preds = %block_4157dd
  %72 = inttoptr i64 %27 to i32*
  store i32 7, i32* %72
  br label %block_4158a6

block_415864:                                     ; preds = %block_41584e
  %73 = inttoptr i64 %27 to i32*
  store i32 3, i32* %73
  br label %block_4158a6

block_415858:                                     ; preds = %block_41584e
  %74 = inttoptr i64 %27 to i32*
  store i32 4, i32* %74
  br label %block_4158a6

block_4157fd:                                     ; preds = %block_4157dd
  %75 = inttoptr i64 %27 to i32*
  store i32 0, i32* %75
  br label %block_4158a6

block_415751:                                     ; preds = %block_415748, %block_415706
  %76 = phi %struct.Memory* [ %88, %block_415706 ], [ %88, %block_415748 ]
  %77 = inttoptr i64 %43 to i32*
  %78 = load i32, i32* %77
  %79 = add i32 %78, 1
  %80 = inttoptr i64 %43 to i32*
  store i32 %79, i32* %80
  br label %block_4156fc

block_41584e:                                     ; preds = %block_4157d3
  %81 = inttoptr i64 %42 to i32*
  %82 = load i32, i32* %81
  %83 = icmp eq i32 %82, 1
  br i1 %83, label %block_415858, label %block_415864

block_4157b7:                                     ; preds = %block_415775
  %84 = inttoptr i64 %42 to i32*
  %85 = load i32, i32* %84
  %86 = add i32 %85, 1
  %87 = inttoptr i64 %42 to i32*
  store i32 %86, i32* %87
  br label %block_4157c0

block_4156fc:                                     ; preds = %block_4156a1, %block_415751
  %88 = phi %struct.Memory* [ %196, %block_4156a1 ], [ %76, %block_415751 ]
  %89 = inttoptr i64 %43 to i32*
  %90 = load i32, i32* %89
  %91 = add i32 %90, -3
  %92 = lshr i32 %91, 31
  %93 = lshr i32 %90, 31
  %94 = xor i32 %92, %93
  %95 = add nuw nsw i32 %94, %93
  %96 = icmp eq i32 %95, 2
  %97 = icmp ne i32 %92, 0
  %98 = xor i1 %97, %96
  br i1 %98, label %block_415706, label %block_415764

block_4157d3:                                     ; preds = %block_41576b
  %99 = inttoptr i64 %41 to i32*
  %100 = load i32, i32* %99
  switch i32 %100, label %block_4158a6 [
    i32 0, label %block_4157dd
    i32 1, label %block_41584e
    i32 2, label %block_41589c.sink.split
    i32 3, label %block_41589c.sink.split.fold.split
  ]

block_415829:                                     ; preds = %block_4157dd
  %101 = inttoptr i64 %27 to i32*
  store i32 2, i32* %101
  br label %block_4158a6

block_4158a6:                                     ; preds = %block_415813, %block_41589c.sink.split, %block_4157dd, %block_415829, %block_4157d3, %block_4157fd, %block_415858, %block_415864, %block_4157e7
  %102 = phi %struct.Memory* [ %248, %block_4157e7 ], [ %248, %block_415858 ], [ %248, %block_415864 ], [ %248, %block_41589c.sink.split ], [ %248, %block_4157fd ], [ %248, %block_415813 ], [ %248, %block_415829 ], [ %248, %block_4157dd ], [ %248, %block_4157d3 ]
  %103 = inttoptr i64 %29 to double*
  %104 = load double, double* %103
  %105 = inttoptr i64 %39 to i32*
  %106 = load i32, i32* %105
  %107 = sext i32 %106 to i64
  %108 = shl nsw i64 %107, 6
  %109 = add i64 %108, ptrtoint (%pcmor_cor_type* @pcmor_cor to i64)
  %110 = inttoptr i64 %27 to i32*
  %111 = load i32, i32* %110
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 3
  %114 = add i64 %113, %109
  %115 = inttoptr i64 %114 to double*
  %116 = load double, double* %115
  %117 = fadd double %104, %116
  store double %117, double* %30, align 1, !tbaa !1246
  store i64 0, i64* %17, align 1, !tbaa !1246
  %118 = inttoptr i64 %29 to double*
  store double %117, double* %118
  %119 = inttoptr i64 %33 to i32*
  %120 = load i32, i32* %119
  %121 = add i32 %120, 1
  %122 = inttoptr i64 %33 to i32*
  store i32 %121, i32* %122
  br label %block_41568d

block_4157dd:                                     ; preds = %block_4157d3
  %123 = inttoptr i64 %42 to i32*
  %124 = load i32, i32* %123
  switch i32 %124, label %block_4158a6 [
    i32 0, label %block_4157e7
    i32 1, label %block_4157fd
    i32 2, label %block_415813
    i32 3, label %block_415829
  ]

block_415706:                                     ; preds = %block_4156fc
  %125 = inttoptr i64 %40 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = mul nsw i64 %127, 12
  %129 = add i64 %128, ptrtoint (%f_c_type* @f_c to i64)
  %130 = sext i32 %90 to i64
  store i64 %130, i64* %7, align 8, !tbaa !1240
  %131 = shl nsw i64 %130, 2
  %132 = add i64 %131, %129
  %133 = inttoptr i64 %132 to i32*
  %134 = load i32, i32* %133
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %8, align 8, !tbaa !1240
  %136 = inttoptr i64 %44 to i32*
  store i32 %134, i32* %136
  %137 = inttoptr i64 %38 to i32*
  %138 = load i32, i32* %137
  %139 = sext i32 %138 to i64
  %140 = mul nsw i64 %139, 24
  %141 = add i64 %140, ptrtoint (%cbc_type* @cbc to i64)
  %142 = inttoptr i64 %44 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 2
  %146 = add i64 %145, %141
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = icmp eq i32 %148, 3
  br i1 %149, label %block_415748, label %block_415751

block_4156a1:                                     ; preds = %block_41568d
  %150 = shl nsw i64 %201, 6
  %151 = add i64 %150, ptrtoint (%emo_type* @emo to i64)
  store i64 %151, i64* %7, align 8, !tbaa !1240
  %152 = sext i32 %198 to i64
  %153 = shl nsw i64 %152, 3
  %154 = add i64 %153, %151
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = inttoptr i64 %38 to i32*
  store i32 %156, i32* %157
  %158 = inttoptr i64 %38 to i32*
  %159 = load i32, i32* %158
  %160 = sext i32 %159 to i64
  %161 = shl nsw i64 %160, 2
  %162 = add i64 %161, ptrtoint (%size_e_type* @size_e to i64)
  %163 = inttoptr i64 %162 to i32*
  %164 = load i32, i32* %163
  %165 = inttoptr i64 %39 to i32*
  store i32 %164, i32* %165
  %166 = inttoptr i64 %24 to i32*
  %167 = load i32, i32* %166
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 6
  %170 = inttoptr i64 %33 to i32*
  %171 = load i32, i32* %170
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 3
  %174 = add i64 %169, add (i64 ptrtoint (%emo_type* @emo to i64), i64 4)
  %175 = add i64 %174, %173
  %176 = inttoptr i64 %175 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %8, align 8, !tbaa !1240
  %179 = inttoptr i64 %40 to i32*
  store i32 %177, i32* %179
  %180 = inttoptr i64 %41 to i32*
  store i32 0, i32* %180
  %181 = inttoptr i64 %42 to i32*
  store i32 0, i32* %181
  %182 = inttoptr i64 %43 to i32*
  store i32 0, i32* %182
  br label %block_4156fc

block_415748:                                     ; preds = %block_415706
  %183 = inttoptr i64 %41 to i32*
  %184 = load i32, i32* %183
  %185 = add i32 %184, 1
  %186 = inttoptr i64 %41 to i32*
  store i32 %185, i32* %186
  br label %block_415751

block_41589c.sink.split.fold.split:               ; preds = %block_4157d3
  br label %block_41589c.sink.split

block_41589c.sink.split:                          ; preds = %block_41589c.sink.split.fold.split, %block_4157d3
  %187 = phi i32 [ 5, %block_4157d3 ], [ 6, %block_41589c.sink.split.fold.split ]
  %188 = inttoptr i64 %27 to i32*
  store i32 %187, i32* %188
  br label %block_4158a6

block_4157c0:                                     ; preds = %block_4157b7, %block_415775
  %189 = phi %struct.Memory* [ %248, %block_415775 ], [ %248, %block_4157b7 ]
  %190 = inttoptr i64 %45 to i32*
  %191 = load i32, i32* %190
  %192 = add i32 %191, 1
  %193 = inttoptr i64 %45 to i32*
  store i32 %192, i32* %193
  br label %block_41576b

block_415813:                                     ; preds = %block_4157dd
  %194 = inttoptr i64 %27 to i32*
  store i32 1, i32* %194
  br label %block_4158a6

block_415764:                                     ; preds = %block_4156fc
  %195 = inttoptr i64 %45 to i32*
  store i32 0, i32* %195
  br label %block_41576b

block_41568d:                                     ; preds = %block_4158a6, %block_415670
  %196 = phi %struct.Memory* [ %2, %block_415670 ], [ %102, %block_4158a6 ]
  %197 = inttoptr i64 %33 to i32*
  %198 = load i32, i32* %197
  %199 = inttoptr i64 %24 to i32*
  %200 = load i32, i32* %199
  %201 = sext i32 %200 to i64
  %202 = shl nsw i64 %201, 2
  %203 = add i64 %202, ptrtoint (%nemo_type* @nemo to i64)
  %204 = inttoptr i64 %203 to i32*
  %205 = load i32, i32* %204
  %206 = sub i32 %198, %205
  %207 = icmp eq i32 %206, 0
  %208 = lshr i32 %206, 31
  %209 = trunc i32 %208 to i8
  %210 = lshr i32 %198, 31
  %211 = lshr i32 %205, 31
  %212 = xor i32 %211, %210
  %213 = xor i32 %208, %210
  %214 = add nuw nsw i32 %213, %212
  %215 = icmp eq i32 %214, 2
  %216 = icmp ne i8 %209, 0
  %217 = xor i1 %216, %215
  %218 = or i1 %207, %217
  br i1 %218, label %block_4156a1, label %block_4158dc

block_4158dc:                                     ; preds = %block_41568d
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %223 = icmp ult i32 %198, %205
  %224 = zext i1 %223 to i8
  %225 = and i32 %206, 255
  %226 = tail call i32 @llvm.ctpop.i32(i32 %225) #11
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = xor i32 %205, %198
  %231 = xor i32 %230, %206
  %232 = lshr i32 %231, 4
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = zext i1 %215 to i8
  store i8 %224, i8* %35, align 1, !tbaa !1463
  store i8 %229, i8* %220, align 1, !tbaa !1463
  store i8 %234, i8* %36, align 1, !tbaa !1463
  store i8 0, i8* %221, align 1, !tbaa !1463
  store i8 %209, i8* %37, align 1, !tbaa !1463
  store i8 %235, i8* %222, align 1, !tbaa !1463
  store i64 %201, i64* %219, align 8
  %236 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %237 = inttoptr i64 %29 to double*
  %238 = load double, double* %237
  %239 = fdiv double %236, %238
  store double %239, double* %30, align 1, !tbaa !1246
  store i64 0, i64* %17, align 1, !tbaa !1246
  store i64 %201, i64* %6, align 8, !tbaa !1240
  %240 = shl nsw i64 %201, 3
  %241 = add i64 %240, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %242 = inttoptr i64 %241 to double*
  store double %239, double* %242
  %243 = inttoptr i64 %14 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %10, align 8, !tbaa !1240
  %245 = inttoptr i64 %13 to i64*
  %246 = load i64, i64* %245
  store i64 %246, i64* %3, align 8, !tbaa !1240
  %247 = add i64 %13, 8
  store i64 %247, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %196

block_41576b:                                     ; preds = %block_415764, %block_4157c0
  %248 = phi %struct.Memory* [ %88, %block_415764 ], [ %189, %block_4157c0 ]
  %249 = inttoptr i64 %45 to i32*
  %250 = load i32, i32* %249
  %251 = add i32 %250, -3
  %252 = lshr i32 %251, 31
  %253 = lshr i32 %250, 31
  %254 = xor i32 %252, %253
  %255 = add nuw nsw i32 %254, %253
  %256 = icmp eq i32 %255, 2
  %257 = icmp ne i32 %252, 0
  %258 = xor i1 %257, %256
  br i1 %258, label %block_415775, label %block_4157d3
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41fd20_parallel_add(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41fd20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %19 = add i32 %18, -1
  %20 = icmp eq i32 %18, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1, !tbaa !1248
  %23 = and i32 %19, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #11
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !1261
  %29 = xor i32 %19, %18
  %30 = lshr i32 %29, 4
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !1262
  %34 = icmp eq i32 %19, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !1263
  %37 = lshr i32 %19, 31
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !1264
  %40 = lshr i32 %18, 31
  %41 = xor i32 %37, %40
  %42 = add nuw nsw i32 %41, %40
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !1265
  %46 = icmp ne i8 %38, 0
  %47 = xor i1 %46, %43
  %48 = or i1 %34, %47
  %49 = select i1 %48, i64 22, i64 27
  %50 = add i64 %49, %1
  br i1 %48, label %block_41fd36, label %block_41fd3b

block_41fe7b:                                     ; preds = %block_41fe6f
  %51 = inttoptr i64 %111 to i64*
  %52 = load i64, i64* %51
  %53 = inttoptr i64 %110 to i32*
  %54 = load i32, i32* %53
  %55 = sub i32 %54, %181
  %56 = add i32 %55, -1
  %57 = zext i32 %56 to i64
  %58 = sext i32 %56 to i64
  %59 = shl nsw i64 %58, 2
  %60 = add i64 %52, %59
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61
  %63 = inttoptr i64 %112 to i32*
  %64 = load i32, i32* %63
  %65 = add i32 %64, %62
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %5, align 8, !tbaa !1240
  store i64 %57, i64* %7, align 8, !tbaa !1240
  store i64 %58, i64* %6, align 8, !tbaa !1240
  %67 = inttoptr i64 %60 to i32*
  store i32 %65, i32* %67
  %68 = inttoptr i64 %113 to i32*
  %69 = load i32, i32* %68
  %70 = add i32 %69, -1
  %71 = inttoptr i64 %113 to i32*
  store i32 %70, i32* %71
  %72 = add i64 %195, -12
  br label %block_41fe6f

block_41fd79:                                     ; preds = %block_41fd6b, %block_41feb7
  %73 = phi i64 [ %107, %block_41fd6b ], [ %101, %block_41feb7 ]
  %74 = phi %struct.Memory* [ %115, %block_41fd6b ], [ %93, %block_41feb7 ]
  %75 = inttoptr i64 %106 to i32*
  %76 = load i32, i32* %75
  %77 = inttoptr i64 %309 to i32*
  %78 = load i32, i32* %77
  %79 = sub i32 %76, %78
  %80 = lshr i32 %79, 31
  %81 = trunc i32 %80 to i8
  %82 = lshr i32 %76, 31
  %83 = lshr i32 %78, 31
  %84 = xor i32 %83, %82
  %85 = xor i32 %80, %82
  %86 = add nuw nsw i32 %85, %84
  %87 = icmp eq i32 %86, 2
  %88 = icmp ne i8 %81, 0
  %89 = xor i1 %88, %87
  %90 = select i1 %89, i64 12, i64 338
  %91 = add i64 %73, %90
  br i1 %89, label %block_41fd85, label %block_41fecb.loopexit

block_41feb7:                                     ; preds = %block_41feb2, %block_41fe37
  %92 = phi i64 [ %248, %block_41fe37 ], [ %249, %block_41feb2 ]
  %93 = phi %struct.Memory* [ %227, %block_41fe37 ], [ %179, %block_41feb2 ]
  %94 = inttoptr i64 %109 to i32*
  %95 = load i32, i32* %94
  %96 = inttoptr i64 %104 to i32*
  store i32 %95, i32* %96
  %97 = inttoptr i64 %106 to i32*
  %98 = load i32, i32* %97
  %99 = add i32 %98, 1
  %100 = inttoptr i64 %106 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %92, -318
  br label %block_41fd79

block_41fd6b:                                     ; preds = %block_41fd49
  %102 = add i64 %50, 48
  %103 = select i1 %137, i64 %312, i64 %102
  %104 = add i64 %12, -36
  %105 = inttoptr i64 %104 to i32*
  store i32 1, i32* %105
  %106 = add i64 %12, -24
  %107 = add i64 %103, 14
  %108 = inttoptr i64 %106 to i32*
  store i32 0, i32* %108
  %109 = add i64 %12, -40
  %110 = add i64 %12, -48
  %111 = add i64 %12, -16
  %112 = add i64 %12, -28
  %113 = add i64 %12, -32
  %114 = add i64 %12, -44
  br label %block_41fd79

block_41fd49:                                     ; preds = %block_41fd3b, %block_41fd49
  %115 = phi %struct.Memory* [ %2, %block_41fd3b ], [ %115, %block_41fd49 ]
  %116 = inttoptr i64 %311 to i32*
  %117 = load i32, i32* %116
  %118 = shl i32 %117, 1
  %119 = inttoptr i64 %311 to i32*
  store i32 %118, i32* %119
  %120 = inttoptr i64 %309 to i32*
  %121 = load i32, i32* %120
  %122 = add i32 %121, 1
  %123 = inttoptr i64 %309 to i32*
  store i32 %122, i32* %123
  %124 = inttoptr i64 %311 to i32*
  %125 = load i32, i32* %124
  %126 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %127 = sub i32 %125, %126
  %128 = lshr i32 %127, 31
  %129 = trunc i32 %128 to i8
  %130 = lshr i32 %125, 31
  %131 = lshr i32 %126, 31
  %132 = xor i32 %131, %130
  %133 = xor i32 %128, %130
  %134 = add nuw nsw i32 %133, %132
  %135 = icmp eq i32 %134, 2
  %136 = icmp ne i8 %129, 0
  %137 = xor i1 %136, %135
  br i1 %137, label %block_41fd49, label %block_41fd6b

block_41fdd3:                                     ; preds = %block_41fdc9
  %138 = inttoptr i64 %111 to i64*
  %139 = load i64, i64* %138
  %140 = inttoptr i64 %311 to i32*
  %141 = load i32, i32* %140
  %142 = sub i32 %141, %222
  %143 = add i32 %142, -1
  %144 = zext i32 %143 to i64
  %145 = sext i32 %143 to i64
  %146 = shl nsw i64 %145, 2
  %147 = add i64 %139, %146
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = inttoptr i64 %112 to i32*
  %151 = load i32, i32* %150
  %152 = add i32 %151, %149
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %5, align 8, !tbaa !1240
  store i64 %144, i64* %7, align 8, !tbaa !1240
  store i64 %145, i64* %6, align 8, !tbaa !1240
  %154 = inttoptr i64 %147 to i32*
  store i32 %152, i32* %154
  %155 = inttoptr i64 %113 to i32*
  %156 = load i32, i32* %155
  %157 = add i32 %156, -1
  %158 = inttoptr i64 %113 to i32*
  store i32 %157, i32* %158
  %159 = add i64 %225, -10
  br label %block_41fdc9

block_41fe50:                                     ; preds = %block_41fe37
  %160 = inttoptr i64 %111 to i64*
  %161 = load i64, i64* %160
  %162 = inttoptr i64 %110 to i32*
  %163 = load i32, i32* %162
  %164 = sub i32 %163, %236
  %165 = add i32 %164, -1
  %166 = sext i32 %165 to i64
  store i64 %166, i64* %6, align 8, !tbaa !1240
  %167 = shl nsw i64 %166, 2
  %168 = add i64 %161, %167
  %169 = inttoptr i64 %168 to i32*
  %170 = load i32, i32* %169
  %171 = inttoptr i64 %112 to i32*
  store i32 %170, i32* %171
  %172 = inttoptr i64 %104 to i32*
  %173 = load i32, i32* %172
  %174 = add i32 %173, -1
  %175 = zext i32 %174 to i64
  store i64 %175, i64* %5, align 8, !tbaa !1240
  %176 = add i64 %248, 31
  %177 = inttoptr i64 %113 to i32*
  store i32 %174, i32* %177
  br label %block_41fe6f

block_41fe6f:                                     ; preds = %block_41fe50, %block_41fe7b
  %178 = phi i64 [ %176, %block_41fe50 ], [ %72, %block_41fe7b ]
  %179 = phi %struct.Memory* [ %227, %block_41fe50 ], [ %179, %block_41fe7b ]
  %180 = inttoptr i64 %113 to i32*
  %181 = load i32, i32* %180
  %182 = inttoptr i64 %114 to i32*
  %183 = load i32, i32* %182
  %184 = sub i32 %181, %183
  %185 = lshr i32 %184, 31
  %186 = lshr i32 %181, 31
  %187 = lshr i32 %183, 31
  %188 = xor i32 %187, %186
  %189 = xor i32 %185, %186
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = icmp ne i32 %185, 0
  %193 = xor i1 %192, %191
  %194 = select i1 %193, i64 67, i64 12
  %195 = add i64 %178, %194
  br i1 %193, label %block_41feb2, label %block_41fe7b

block_41fecb.loopexit:                            ; preds = %block_41fd79
  %196 = zext i32 %76 to i64
  store i64 %196, i64* %4, align 8, !tbaa !1240
  %197 = icmp ult i32 %76, %78
  %198 = zext i1 %197 to i8
  %199 = and i32 %79, 255
  %200 = tail call i32 @llvm.ctpop.i32(i32 %199) #11
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  %204 = xor i32 %78, %76
  %205 = xor i32 %204, %79
  %206 = lshr i32 %205, 4
  %207 = trunc i32 %206 to i8
  %208 = and i8 %207, 1
  %209 = icmp eq i32 %79, 0
  %210 = zext i1 %209 to i8
  %211 = zext i1 %87 to i8
  store i8 %198, i8* %22, align 1, !tbaa !1463
  store i8 %203, i8* %28, align 1, !tbaa !1463
  store i8 %208, i8* %33, align 1, !tbaa !1463
  store i8 %210, i8* %36, align 1, !tbaa !1463
  store i8 %81, i8* %39, align 1, !tbaa !1463
  store i8 %211, i8* %45, align 1, !tbaa !1463
  br label %block_41fecb

block_41fecb:                                     ; preds = %block_41fd36, %block_41fecb.loopexit
  %212 = phi %struct.Memory* [ %2, %block_41fd36 ], [ %74, %block_41fecb.loopexit ]
  %213 = inttoptr i64 %13 to i64*
  %214 = load i64, i64* %213
  store i64 %214, i64* %10, align 8, !tbaa !1240
  %215 = inttoptr i64 %12 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %3, align 8, !tbaa !1240
  %217 = add i64 %12, 8
  store i64 %217, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %212

block_41fdc9:                                     ; preds = %block_41fdaa, %block_41fdd3
  %218 = phi i64 [ %271, %block_41fdaa ], [ %159, %block_41fdd3 ]
  %219 = phi %struct.Memory* [ %290, %block_41fdaa ], [ %219, %block_41fdd3 ]
  %220 = add i64 %218, 4
  %221 = inttoptr i64 %113 to i32*
  %222 = load i32, i32* %221
  %223 = icmp slt i32 %222, 0
  %224 = select i1 %223, i64 61, i64 6
  %225 = add i64 %220, %224
  br i1 %223, label %block_41fe0a, label %block_41fdd3

block_41fe37:                                     ; preds = %block_41fe1e, %block_41fe2e
  %226 = phi i64 [ %288, %block_41fe1e ], [ %253, %block_41fe2e ]
  %227 = phi %struct.Memory* [ %290, %block_41fe1e ], [ %290, %block_41fe2e ]
  %228 = inttoptr i64 %110 to i32*
  %229 = load i32, i32* %228
  %230 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %231 = sub i32 %229, %230
  %232 = inttoptr i64 %114 to i32*
  store i32 %231, i32* %232
  %233 = inttoptr i64 %114 to i32*
  %234 = load i32, i32* %233
  %235 = inttoptr i64 %104 to i32*
  %236 = load i32, i32* %235
  %237 = sub i32 %234, %236
  %238 = lshr i32 %237, 31
  %239 = lshr i32 %234, 31
  %240 = lshr i32 %236, 31
  %241 = xor i32 %240, %239
  %242 = xor i32 %238, %239
  %243 = add nuw nsw i32 %242, %241
  %244 = icmp eq i32 %243, 2
  %245 = icmp ne i32 %238, 0
  %246 = xor i1 %245, %244
  %247 = select i1 %246, i64 25, i64 128
  %248 = add i64 %226, %247
  br i1 %246, label %block_41fe50, label %block_41feb7

block_41fd36:                                     ; preds = %block_41fd20
  br label %block_41fecb

block_41feb2:                                     ; preds = %block_41fe6f
  %249 = add i64 %195, 5
  br label %block_41feb7

block_41fe2e:                                     ; preds = %block_41fe1e
  %250 = inttoptr i64 %109 to i32*
  %251 = load i32, i32* %250
  %252 = add i32 %251, %274
  %253 = add i64 %288, 9
  %254 = inttoptr i64 %110 to i32*
  store i32 %252, i32* %254
  br label %block_41fe37

block_41fdaa:                                     ; preds = %block_41fd9a
  %255 = inttoptr i64 %111 to i64*
  %256 = load i64, i64* %255
  %257 = inttoptr i64 %104 to i32*
  %258 = load i32, i32* %257
  %259 = sub i32 %292, %258
  %260 = add i32 %259, -1
  %261 = sext i32 %260 to i64
  store i64 %261, i64* %6, align 8, !tbaa !1240
  %262 = shl nsw i64 %261, 2
  %263 = add i64 %256, %262
  %264 = inttoptr i64 %263 to i32*
  %265 = load i32, i32* %264
  %266 = inttoptr i64 %112 to i32*
  store i32 %265, i32* %266
  %267 = inttoptr i64 %104 to i32*
  %268 = load i32, i32* %267
  %269 = add i32 %268, -1
  %270 = zext i32 %269 to i64
  store i64 %270, i64* %5, align 8, !tbaa !1240
  %271 = add i64 %308, 31
  %272 = inttoptr i64 %113 to i32*
  store i32 %269, i32* %272
  br label %block_41fdc9

block_41fe1e:                                     ; preds = %block_41fd9a
  %273 = inttoptr i64 %110 to i32*
  %274 = load i32, i32* %273
  %275 = sub i32 %274, %293
  %276 = lshr i32 %275, 31
  %277 = lshr i32 %274, 31
  %278 = xor i32 %277, %297
  %279 = xor i32 %276, %277
  %280 = add nuw nsw i32 %279, %278
  %281 = icmp eq i32 %280, 2
  %282 = icmp ne i32 %275, 0
  %283 = icmp ne i32 %276, 0
  %284 = xor i1 %283, %281
  %285 = xor i1 %284, true
  %286 = and i1 %282, %285
  %287 = select i1 %286, i64 25, i64 16
  %288 = add i64 %308, %287
  br i1 %286, label %block_41fe37, label %block_41fe2e

block_41fd9a:                                     ; preds = %block_41fd85, %block_41fe0a
  %289 = phi i64 [ %333, %block_41fd85 ], [ %323, %block_41fe0a ]
  %290 = phi %struct.Memory* [ %74, %block_41fd85 ], [ %219, %block_41fe0a ]
  %291 = inttoptr i64 %311 to i32*
  %292 = load i32, i32* %291
  %293 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %294 = sub i32 %292, %293
  %295 = lshr i32 %294, 31
  %296 = lshr i32 %292, 31
  %297 = lshr i32 %293, 31
  %298 = xor i32 %297, %296
  %299 = xor i32 %295, %296
  %300 = add nuw nsw i32 %299, %298
  %301 = icmp eq i32 %300, 2
  %302 = icmp ne i32 %294, 0
  %303 = icmp ne i32 %295, 0
  %304 = xor i1 %303, %301
  %305 = xor i1 %304, true
  %306 = and i1 %302, %305
  %307 = select i1 %306, i64 132, i64 16
  %308 = add i64 %289, %307
  br i1 %306, label %block_41fe1e, label %block_41fdaa

block_41fd3b:                                     ; preds = %block_41fd20
  %309 = add i64 %12, -20
  %310 = inttoptr i64 %309 to i32*
  store i32 0, i32* %310
  %311 = add i64 %12, -52
  %312 = add i64 %50, 14
  %313 = inttoptr i64 %311 to i32*
  store i32 1, i32* %313
  br label %block_41fd49

block_41fe0a:                                     ; preds = %block_41fdc9
  %314 = inttoptr i64 %311 to i32*
  %315 = load i32, i32* %314
  %316 = inttoptr i64 %110 to i32*
  store i32 %315, i32* %316
  %317 = inttoptr i64 %109 to i32*
  %318 = load i32, i32* %317
  %319 = inttoptr i64 %311 to i32*
  %320 = load i32, i32* %319
  %321 = add i32 %320, %318
  %322 = inttoptr i64 %311 to i32*
  store i32 %321, i32* %322
  %323 = add i64 %225, -112
  br label %block_41fd9a

block_41fd85:                                     ; preds = %block_41fd79
  %324 = inttoptr i64 %104 to i32*
  %325 = load i32, i32* %324
  %326 = shl i32 %325, 1
  %327 = inttoptr i64 %109 to i32*
  store i32 %326, i32* %327
  %328 = inttoptr i64 %109 to i32*
  %329 = load i32, i32* %328
  %330 = inttoptr i64 %110 to i32*
  store i32 %329, i32* %330
  %331 = inttoptr i64 %109 to i32*
  %332 = load i32, i32* %331
  %333 = add i64 %91, 21
  %334 = inttoptr i64 %311 to i32*
  store i32 %332, i32* %334
  br label %block_41fd9a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_411bf0_mor_s_e_nn(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_411bf0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %16, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  %22 = add i64 %19, -12
  %23 = load i32, i32* %9, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %19, -16
  %26 = load i32, i32* %7, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = add i64 %19, -20
  %29 = load i32, i32* %5, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = add i64 %19, -32
  %32 = load i64, i64* %13, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %19, -36
  %35 = load i32, i32* %11, align 4
  %36 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %36
  %37 = add i64 %19, -12
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %43 = icmp eq i32 %39, 0
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = lshr i32 %39, 31
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %48 = select i1 %43, i64 31, i64 239
  %49 = add i64 %48, %1
  br i1 %43, label %block_411c0f, label %block_411cdf

block_411c7a:                                     ; preds = %block_411c0f
  %50 = inttoptr i64 %466 to i32*
  store i32 0, i32* %50
  %51 = add i64 %19, -16
  br label %block_411c81

block_411d72:                                     ; preds = %block_411d68
  %52 = inttoptr i64 %31 to i64*
  %53 = load i64, i64* %52
  %54 = sext i32 %381 to i64
  store i64 %54, i64* %14, align 8, !tbaa !1240
  %55 = shl nsw i64 %54, 2
  %56 = add i64 %55, %53
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %15, align 8, !tbaa !1240
  %60 = inttoptr i64 %28 to i32*
  %61 = load i32, i32* %60
  %62 = sext i32 %61 to i64
  %63 = mul nsw i64 %62, 2400
  %64 = add i64 %63, ptrtoint (%idmo_type* @idmo to i64)
  %65 = inttoptr i64 %423 to i32*
  %66 = load i32, i32* %65
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, 400
  %69 = add i64 %68, %64
  %70 = add i64 %69, 300
  %71 = mul nsw i64 %54, 20
  store i64 %71, i64* %13, align 8, !tbaa !1240
  %72 = add i64 %71, %70
  %73 = add i64 %72, 16
  %74 = inttoptr i64 %73 to i32*
  store i32 %58, i32* %74
  %75 = inttoptr i64 %86 to i32*
  %76 = load i32, i32* %75
  %77 = add i32 %76, 1
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %12, align 8, !tbaa !1240
  %79 = inttoptr i64 %86 to i32*
  store i32 %77, i32* %79
  %80 = add i64 %392, -10
  br label %block_411d68

block_411ce9:                                     ; preds = %block_411cdf
  %81 = inttoptr i64 %34 to i32*
  %82 = load i32, i32* %81
  %83 = icmp eq i32 %82, 0
  %84 = select i1 %83, i64 10, i64 120
  %85 = add i64 %150, %84
  %86 = add i64 %19, -40
  %87 = add i64 %85, 7
  br i1 %83, label %block_411cf3, label %block_411d61

block_411df8:                                     ; preds = %block_411dee
  %88 = inttoptr i64 %31 to i64*
  %89 = load i64, i64* %88
  %90 = add i32 %532, -1
  %91 = sext i32 %90 to i64
  store i64 %91, i64* %15, align 8, !tbaa !1240
  %92 = shl nsw i64 %91, 2
  %93 = add i64 %89, %92
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = zext i32 %95 to i64
  store i64 %96, i64* %14, align 8, !tbaa !1240
  %97 = inttoptr i64 %28 to i32*
  %98 = load i32, i32* %97
  %99 = sext i32 %98 to i64
  %100 = mul nsw i64 %99, 2400
  %101 = add i64 %100, ptrtoint (%idmo_type* @idmo to i64)
  %102 = inttoptr i64 %272 to i32*
  %103 = load i32, i32* %102
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, 400
  %106 = add i64 %105, %101
  %107 = sext i32 %532 to i64
  store i64 %107, i64* %13, align 8, !tbaa !1240
  %108 = shl nsw i64 %107, 2
  %109 = add i64 %106, 180
  %110 = add i64 %109, %108
  %111 = inttoptr i64 %110 to i32*
  store i32 %95, i32* %111
  %112 = inttoptr i64 %315 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, 1
  %115 = zext i32 %114 to i64
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %116 = inttoptr i64 %315 to i32*
  store i32 %114, i32* %116
  %117 = add i64 %543, -10
  br label %block_411dee

block_411ecc:                                     ; preds = %block_411ec5, %block_411ed6
  %118 = phi i64 [ %279, %block_411ec5 ], [ %193, %block_411ed6 ]
  %119 = phi %struct.Memory* [ %2, %block_411ec5 ], [ %119, %block_411ed6 ]
  %120 = inttoptr i64 %278 to i32*
  %121 = load i32, i32* %120
  %122 = add i32 %121, -5
  %123 = lshr i32 %122, 31
  %124 = trunc i32 %123 to i8
  %125 = lshr i32 %121, 31
  %126 = xor i32 %123, %125
  %127 = add nuw nsw i32 %126, %125
  %128 = icmp eq i32 %127, 2
  %129 = icmp ne i8 %124, 0
  %130 = xor i1 %129, %128
  %131 = select i1 %130, i64 10, i64 91
  %132 = add i64 %118, %131
  br i1 %130, label %block_411ed6, label %block_411f27

block_411c75:                                     ; preds = %block_411c20
  %133 = icmp ult i32 %446, 5
  %134 = zext i1 %133 to i8
  %135 = and i32 %447, 255
  %136 = tail call i32 @llvm.ctpop.i32(i32 %135) #11
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = xor i32 %447, %446
  %141 = lshr i32 %140, 4
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  %144 = icmp eq i32 %447, 0
  %145 = zext i1 %144 to i8
  %146 = zext i1 %453 to i8
  store i8 %134, i8* %40, align 1, !tbaa !1248
  store i8 %139, i8* %41, align 1, !tbaa !1261
  store i8 %143, i8* %42, align 1, !tbaa !1262
  store i8 %145, i8* %44, align 1, !tbaa !1263
  store i8 %449, i8* %46, align 1, !tbaa !1264
  store i8 %146, i8* %47, align 1, !tbaa !1265
  br label %block_411fa6

block_411cdf:                                     ; preds = %block_411bf0
  %147 = add i32 %39, -1
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i64 10, i64 244
  %150 = add i64 %49, %149
  br i1 %148, label %block_411ce9, label %block_411dd3

block_411d5c:                                     ; preds = %block_411cfa
  %151 = icmp ult i32 %283, 5
  %152 = zext i1 %151 to i8
  %153 = and i32 %284, 255
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #11
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = xor i32 %284, %283
  %159 = lshr i32 %158, 4
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = icmp eq i32 %284, 0
  %163 = zext i1 %162 to i8
  %164 = zext i1 %290 to i8
  store i8 %152, i8* %40, align 1, !tbaa !1248
  store i8 %157, i8* %41, align 1, !tbaa !1261
  store i8 %161, i8* %42, align 1, !tbaa !1262
  store i8 %163, i8* %44, align 1, !tbaa !1263
  store i8 %286, i8* %46, align 1, !tbaa !1264
  store i8 %164, i8* %47, align 1, !tbaa !1265
  br label %block_411fa1

block_411ed6:                                     ; preds = %block_411ecc
  %165 = inttoptr i64 %31 to i64*
  %166 = load i64, i64* %165
  %167 = add i32 %121, -1
  %168 = sext i32 %167 to i64
  store i64 %168, i64* %15, align 8, !tbaa !1240
  %169 = shl nsw i64 %168, 2
  %170 = add i64 %166, %169
  %171 = inttoptr i64 %170 to i32*
  %172 = load i32, i32* %171
  %173 = zext i32 %172 to i64
  store i64 %173, i64* %14, align 8, !tbaa !1240
  %174 = inttoptr i64 %28 to i32*
  %175 = load i32, i32* %174
  %176 = sext i32 %175 to i64
  %177 = mul nsw i64 %176, 2400
  %178 = add i64 %177, ptrtoint (%idmo_type* @idmo to i64)
  %179 = inttoptr i64 %242 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %181, 400
  %183 = add i64 %182, %178
  %184 = sext i32 %121 to i64
  %185 = mul nsw i64 %184, 20
  store i64 %185, i64* %13, align 8, !tbaa !1240
  %186 = add i64 %185, %183
  %187 = inttoptr i64 %186 to i32*
  store i32 %172, i32* %187
  %188 = inttoptr i64 %278 to i32*
  %189 = load i32, i32* %188
  %190 = add i32 %189, 1
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %12, align 8, !tbaa !1240
  %192 = inttoptr i64 %278 to i32*
  store i32 %190, i32* %192
  %193 = add i64 %132, -10
  br label %block_411ecc

block_411cd5:                                     ; preds = %block_411c81
  %194 = icmp ult i32 %582, 4
  %195 = zext i1 %194 to i8
  %196 = and i32 %583, 255
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #11
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  %201 = xor i32 %583, %582
  %202 = lshr i32 %201, 4
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = icmp eq i32 %583, 0
  %206 = zext i1 %205 to i8
  %207 = zext i1 %589 to i8
  store i8 %195, i8* %40, align 1, !tbaa !1248
  store i8 %200, i8* %41, align 1, !tbaa !1261
  store i8 %204, i8* %42, align 1, !tbaa !1262
  store i8 %206, i8* %44, align 1, !tbaa !1263
  store i8 %585, i8* %46, align 1, !tbaa !1264
  store i8 %207, i8* %47, align 1, !tbaa !1265
  br label %block_411fa6

block_411f27:                                     ; preds = %block_411ecc
  %208 = icmp ult i32 %121, 5
  %209 = zext i1 %208 to i8
  %210 = and i32 %122, 255
  %211 = tail call i32 @llvm.ctpop.i32(i32 %210) #11
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = xor i8 %213, 1
  %215 = xor i32 %122, %121
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = icmp eq i32 %122, 0
  %220 = zext i1 %219 to i8
  %221 = zext i1 %128 to i8
  store i8 %209, i8* %40, align 1, !tbaa !1248
  store i8 %214, i8* %41, align 1, !tbaa !1261
  store i8 %218, i8* %42, align 1, !tbaa !1262
  store i8 %220, i8* %44, align 1, !tbaa !1263
  store i8 %124, i8* %46, align 1, !tbaa !1264
  store i8 %221, i8* %47, align 1, !tbaa !1265
  br label %block_411f92

block_411e53:                                     ; preds = %block_411e5d, %block_411e4c
  %222 = phi i64 [ %316, %block_411e4c ], [ %377, %block_411e5d ]
  %223 = phi %struct.Memory* [ %2, %block_411e4c ], [ %223, %block_411e5d ]
  %224 = inttoptr i64 %315 to i32*
  %225 = load i32, i32* %224
  %226 = add i32 %225, -4
  %227 = lshr i32 %226, 31
  %228 = trunc i32 %227 to i8
  %229 = lshr i32 %225, 31
  %230 = xor i32 %227, %229
  %231 = add nuw nsw i32 %230, %229
  %232 = icmp eq i32 %231, 2
  %233 = icmp ne i8 %228, 0
  %234 = xor i1 %233, %232
  %235 = select i1 %234, i64 10, i64 84
  %236 = add i64 %222, %235
  br i1 %234, label %block_411e5d, label %block_411ea7

block_411e4c:                                     ; preds = %block_411ddd
  %237 = inttoptr i64 %315 to i32*
  store i32 0, i32* %237
  %238 = add i64 %19, -16
  br label %block_411e53

block_411cf3:                                     ; preds = %block_411ce9
  %239 = inttoptr i64 %86 to i32*
  store i32 1, i32* %239
  %240 = add i64 %19, -16
  br label %block_411cfa

block_411ec5:                                     ; preds = %block_411ebb
  %241 = inttoptr i64 %278 to i32*
  store i32 1, i32* %241
  %242 = add i64 %19, -16
  br label %block_411ecc

block_411f3d:                                     ; preds = %block_411f33
  %243 = inttoptr i64 %31 to i64*
  %244 = load i64, i64* %243
  %245 = sext i32 %298 to i64
  store i64 %245, i64* %14, align 8, !tbaa !1240
  %246 = shl nsw i64 %245, 2
  %247 = add i64 %246, %244
  %248 = inttoptr i64 %247 to i32*
  %249 = load i32, i32* %248
  %250 = zext i32 %249 to i64
  store i64 %250, i64* %15, align 8, !tbaa !1240
  %251 = inttoptr i64 %28 to i32*
  %252 = load i32, i32* %251
  %253 = sext i32 %252 to i64
  %254 = mul nsw i64 %253, 2400
  %255 = add i64 %254, ptrtoint (%idmo_type* @idmo to i64)
  %256 = inttoptr i64 %545 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 400
  %260 = add i64 %259, %255
  %261 = add i64 %260, 100
  %262 = mul nsw i64 %245, 20
  store i64 %262, i64* %13, align 8, !tbaa !1240
  %263 = add i64 %262, %261
  %264 = inttoptr i64 %263 to i32*
  store i32 %249, i32* %264
  %265 = inttoptr i64 %278 to i32*
  %266 = load i32, i32* %265
  %267 = add i32 %266, 1
  %268 = zext i32 %267 to i64
  store i64 %268, i64* %12, align 8, !tbaa !1240
  %269 = inttoptr i64 %278 to i32*
  store i32 %267, i32* %269
  %270 = add i64 %309, -10
  br label %block_411f33

block_411de7:                                     ; preds = %block_411ddd
  %271 = inttoptr i64 %315 to i32*
  store i32 1, i32* %271
  %272 = add i64 %19, -16
  br label %block_411dee

block_411ebb:                                     ; preds = %block_411eb1
  %273 = inttoptr i64 %34 to i32*
  %274 = load i32, i32* %273
  %275 = icmp eq i32 %274, 0
  %276 = select i1 %275, i64 10, i64 113
  %277 = add i64 %350, %276
  %278 = add i64 %19, -40
  %279 = add i64 %277, 7
  br i1 %275, label %block_411ec5, label %block_411f2c

block_411cfa:                                     ; preds = %block_411d04, %block_411cf3
  %280 = phi i64 [ %87, %block_411cf3 ], [ %576, %block_411d04 ]
  %281 = phi %struct.Memory* [ %2, %block_411cf3 ], [ %281, %block_411d04 ]
  %282 = inttoptr i64 %86 to i32*
  %283 = load i32, i32* %282
  %284 = add i32 %283, -5
  %285 = lshr i32 %284, 31
  %286 = trunc i32 %285 to i8
  %287 = lshr i32 %283, 31
  %288 = xor i32 %285, %287
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = icmp ne i8 %286, 0
  %292 = xor i1 %291, %290
  %293 = select i1 %292, i64 10, i64 98
  %294 = add i64 %280, %293
  br i1 %292, label %block_411d04, label %block_411d5c

block_411f33:                                     ; preds = %block_411f2c, %block_411f3d
  %295 = phi i64 [ %279, %block_411f2c ], [ %270, %block_411f3d ]
  %296 = phi %struct.Memory* [ %2, %block_411f2c ], [ %296, %block_411f3d ]
  %297 = inttoptr i64 %278 to i32*
  %298 = load i32, i32* %297
  %299 = add i32 %298, -4
  %300 = lshr i32 %299, 31
  %301 = trunc i32 %300 to i8
  %302 = lshr i32 %298, 31
  %303 = xor i32 %300, %302
  %304 = add nuw nsw i32 %303, %302
  %305 = icmp eq i32 %304, 2
  %306 = icmp ne i8 %301, 0
  %307 = xor i1 %306, %305
  %308 = select i1 %307, i64 10, i64 90
  %309 = add i64 %295, %308
  br i1 %307, label %block_411f3d, label %block_411f8d

block_411ddd:                                     ; preds = %block_411dd3
  %310 = inttoptr i64 %34 to i32*
  %311 = load i32, i32* %310
  %312 = icmp eq i32 %311, 0
  %313 = select i1 %312, i64 10, i64 111
  %314 = add i64 %427, %313
  %315 = add i64 %19, -40
  %316 = add i64 %314, 7
  br i1 %312, label %block_411de7, label %block_411e4c

block_411e47:                                     ; preds = %block_411dee
  %317 = icmp ult i32 %532, 5
  %318 = zext i1 %317 to i8
  %319 = and i32 %533, 255
  %320 = tail call i32 @llvm.ctpop.i32(i32 %319) #11
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  %324 = xor i32 %533, %532
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = icmp eq i32 %533, 0
  %329 = zext i1 %328 to i8
  %330 = zext i1 %539 to i8
  store i8 %318, i8* %40, align 1, !tbaa !1248
  store i8 %323, i8* %41, align 1, !tbaa !1261
  store i8 %327, i8* %42, align 1, !tbaa !1262
  store i8 %329, i8* %44, align 1, !tbaa !1263
  store i8 %535, i8* %46, align 1, !tbaa !1264
  store i8 %330, i8* %47, align 1, !tbaa !1265
  br label %block_411f9c.sink.split

block_411eb1:                                     ; preds = %block_411dd3
  %331 = add i32 %39, -3
  store i8 0, i8* %40, align 1, !tbaa !1248
  %332 = and i32 %331, 255
  %333 = tail call i32 @llvm.ctpop.i32(i32 %332) #11
  %334 = trunc i32 %333 to i8
  %335 = and i8 %334, 1
  %336 = xor i8 %335, 1
  store i8 %336, i8* %41, align 1, !tbaa !1261
  %337 = xor i32 %331, %39
  %338 = lshr i32 %337, 4
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  store i8 %340, i8* %42, align 1, !tbaa !1262
  %341 = icmp eq i32 %331, 0
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %44, align 1, !tbaa !1263
  %343 = lshr i32 %331, 31
  %344 = trunc i32 %343 to i8
  store i8 %344, i8* %46, align 1, !tbaa !1264
  %345 = xor i32 %343, %45
  %346 = add nuw nsw i32 %345, %45
  %347 = icmp eq i32 %346, 2
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %47, align 1, !tbaa !1265
  %349 = select i1 %341, i64 10, i64 230
  %350 = add i64 %427, %349
  br i1 %341, label %block_411ebb, label %block_411f9c

block_411e5d:                                     ; preds = %block_411e53
  %351 = inttoptr i64 %31 to i64*
  %352 = load i64, i64* %351
  %353 = sext i32 %225 to i64
  store i64 %353, i64* %14, align 8, !tbaa !1240
  %354 = shl nsw i64 %353, 2
  %355 = add i64 %354, %352
  %356 = inttoptr i64 %355 to i32*
  %357 = load i32, i32* %356
  %358 = zext i32 %357 to i64
  store i64 %358, i64* %15, align 8, !tbaa !1240
  %359 = inttoptr i64 %28 to i32*
  %360 = load i32, i32* %359
  %361 = sext i32 %360 to i64
  %362 = mul nsw i64 %361, 2400
  %363 = add i64 %362, ptrtoint (%idmo_type* @idmo to i64)
  %364 = inttoptr i64 %238 to i32*
  %365 = load i32, i32* %364
  %366 = sext i32 %365 to i64
  %367 = mul nsw i64 %366, 400
  %368 = add i64 %367, %363
  store i64 %353, i64* %13, align 8, !tbaa !1240
  %369 = add i64 %368, 380
  %370 = add i64 %369, %354
  %371 = inttoptr i64 %370 to i32*
  store i32 %357, i32* %371
  %372 = inttoptr i64 %315 to i32*
  %373 = load i32, i32* %372
  %374 = add i32 %373, 1
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %12, align 8, !tbaa !1240
  %376 = inttoptr i64 %315 to i32*
  store i32 %374, i32* %376
  %377 = add i64 %236, -10
  br label %block_411e53

block_411d68:                                     ; preds = %block_411d61, %block_411d72
  %378 = phi i64 [ %87, %block_411d61 ], [ %80, %block_411d72 ]
  %379 = phi %struct.Memory* [ %2, %block_411d61 ], [ %379, %block_411d72 ]
  %380 = inttoptr i64 %86 to i32*
  %381 = load i32, i32* %380
  %382 = add i32 %381, -4
  %383 = lshr i32 %382, 31
  %384 = trunc i32 %383 to i8
  %385 = lshr i32 %381, 31
  %386 = xor i32 %383, %385
  %387 = add nuw nsw i32 %386, %385
  %388 = icmp eq i32 %387, 2
  %389 = icmp ne i8 %384, 0
  %390 = xor i1 %389, %388
  %391 = select i1 %390, i64 10, i64 97
  %392 = add i64 %378, %391
  br i1 %390, label %block_411d72, label %block_411dc9

block_411c2a:                                     ; preds = %block_411c20
  %393 = inttoptr i64 %31 to i64*
  %394 = load i64, i64* %393
  %395 = add i32 %446, -1
  %396 = sext i32 %395 to i64
  store i64 %396, i64* %15, align 8, !tbaa !1240
  %397 = shl nsw i64 %396, 2
  %398 = add i64 %394, %397
  %399 = inttoptr i64 %398 to i32*
  %400 = load i32, i32* %399
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %14, align 8, !tbaa !1240
  %402 = inttoptr i64 %28 to i32*
  %403 = load i32, i32* %402
  %404 = sext i32 %403 to i64
  %405 = mul nsw i64 %404, 2400
  %406 = add i64 %405, ptrtoint (%idmo_type* @idmo to i64)
  %407 = inttoptr i64 %459 to i32*
  %408 = load i32, i32* %407
  %409 = sext i32 %408 to i64
  %410 = mul nsw i64 %409, 400
  %411 = add i64 %410, %406
  %412 = sext i32 %446 to i64
  store i64 %412, i64* %13, align 8, !tbaa !1240
  %413 = shl nsw i64 %412, 2
  %414 = add i64 %413, %411
  %415 = inttoptr i64 %414 to i32*
  store i32 %400, i32* %415
  %416 = inttoptr i64 %466 to i32*
  %417 = load i32, i32* %416
  %418 = add i32 %417, 1
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %12, align 8, !tbaa !1240
  %420 = inttoptr i64 %466 to i32*
  store i32 %418, i32* %420
  %421 = add i64 %457, -10
  br label %block_411c20

block_411d61:                                     ; preds = %block_411ce9
  %422 = inttoptr i64 %86 to i32*
  store i32 0, i32* %422
  %423 = add i64 %19, -16
  br label %block_411d68

block_411dd3:                                     ; preds = %block_411cdf
  %424 = add i32 %39, -2
  %425 = icmp eq i32 %424, 0
  %426 = select i1 %425, i64 10, i64 222
  %427 = add i64 %150, %426
  br i1 %425, label %block_411ddd, label %block_411eb1

block_411ea7:                                     ; preds = %block_411e53
  %428 = icmp ult i32 %225, 4
  %429 = zext i1 %428 to i8
  %430 = and i32 %226, 255
  %431 = tail call i32 @llvm.ctpop.i32(i32 %430) #11
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = xor i8 %433, 1
  %435 = xor i32 %226, %225
  %436 = lshr i32 %435, 4
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = icmp eq i32 %226, 0
  %440 = zext i1 %439 to i8
  %441 = zext i1 %232 to i8
  store i8 %429, i8* %40, align 1, !tbaa !1248
  store i8 %434, i8* %41, align 1, !tbaa !1261
  store i8 %438, i8* %42, align 1, !tbaa !1262
  store i8 %440, i8* %44, align 1, !tbaa !1263
  store i8 %228, i8* %46, align 1, !tbaa !1264
  store i8 %441, i8* %47, align 1, !tbaa !1265
  br label %block_411f9c.sink.split

block_411fa1:                                     ; preds = %block_411f9c, %block_411dc9, %block_411d5c
  %442 = phi %struct.Memory* [ %578, %block_411f9c ], [ %379, %block_411dc9 ], [ %281, %block_411d5c ]
  br label %block_411fa6

block_411c20:                                     ; preds = %block_411c19, %block_411c2a
  %443 = phi i64 [ %467, %block_411c19 ], [ %421, %block_411c2a ]
  %444 = phi %struct.Memory* [ %2, %block_411c19 ], [ %444, %block_411c2a ]
  %445 = inttoptr i64 %466 to i32*
  %446 = load i32, i32* %445
  %447 = add i32 %446, -5
  %448 = lshr i32 %447, 31
  %449 = trunc i32 %448 to i8
  %450 = lshr i32 %446, 31
  %451 = xor i32 %448, %450
  %452 = add nuw nsw i32 %451, %450
  %453 = icmp eq i32 %452, 2
  %454 = icmp ne i8 %449, 0
  %455 = xor i1 %454, %453
  %456 = select i1 %455, i64 10, i64 85
  %457 = add i64 %443, %456
  br i1 %455, label %block_411c2a, label %block_411c75

block_411c19:                                     ; preds = %block_411c0f
  %458 = inttoptr i64 %466 to i32*
  store i32 1, i32* %458
  %459 = add i64 %19, -16
  br label %block_411c20

block_411f92:                                     ; preds = %block_411f8d, %block_411f27
  %460 = phi %struct.Memory* [ %296, %block_411f8d ], [ %119, %block_411f27 ]
  br label %block_411f9c.sink.split

block_411c0f:                                     ; preds = %block_411bf0
  %461 = inttoptr i64 %34 to i32*
  %462 = load i32, i32* %461
  %463 = icmp eq i32 %462, 0
  %464 = select i1 %463, i64 10, i64 107
  %465 = add i64 %49, %464
  %466 = add i64 %19, -40
  %467 = add i64 %465, 7
  br i1 %463, label %block_411c19, label %block_411c7a

block_411f8d:                                     ; preds = %block_411f33
  %468 = icmp ult i32 %298, 4
  %469 = zext i1 %468 to i8
  %470 = and i32 %299, 255
  %471 = tail call i32 @llvm.ctpop.i32(i32 %470) #11
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  %475 = xor i32 %299, %298
  %476 = lshr i32 %475, 4
  %477 = trunc i32 %476 to i8
  %478 = and i8 %477, 1
  %479 = icmp eq i32 %299, 0
  %480 = zext i1 %479 to i8
  %481 = zext i1 %305 to i8
  store i8 %469, i8* %40, align 1, !tbaa !1248
  store i8 %474, i8* %41, align 1, !tbaa !1261
  store i8 %478, i8* %42, align 1, !tbaa !1262
  store i8 %480, i8* %44, align 1, !tbaa !1263
  store i8 %301, i8* %46, align 1, !tbaa !1264
  store i8 %481, i8* %47, align 1, !tbaa !1265
  br label %block_411f92

block_411dc9:                                     ; preds = %block_411d68
  %482 = icmp ult i32 %381, 4
  %483 = zext i1 %482 to i8
  %484 = and i32 %382, 255
  %485 = tail call i32 @llvm.ctpop.i32(i32 %484) #11
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = xor i8 %487, 1
  %489 = xor i32 %382, %381
  %490 = lshr i32 %489, 4
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = icmp eq i32 %382, 0
  %494 = zext i1 %493 to i8
  %495 = zext i1 %388 to i8
  store i8 %483, i8* %40, align 1, !tbaa !1248
  store i8 %488, i8* %41, align 1, !tbaa !1261
  store i8 %492, i8* %42, align 1, !tbaa !1262
  store i8 %494, i8* %44, align 1, !tbaa !1263
  store i8 %384, i8* %46, align 1, !tbaa !1264
  store i8 %495, i8* %47, align 1, !tbaa !1265
  br label %block_411fa1

block_411fa6:                                     ; preds = %block_411fa1, %block_411cd5, %block_411c75
  %496 = phi %struct.Memory* [ %442, %block_411fa1 ], [ %580, %block_411cd5 ], [ %444, %block_411c75 ]
  %497 = inttoptr i64 %20 to i64*
  %498 = load i64, i64* %497
  store i64 %498, i64* %17, align 8, !tbaa !1240
  %499 = inttoptr i64 %19 to i64*
  %500 = load i64, i64* %499
  store i64 %500, i64* %3, align 8, !tbaa !1240
  %501 = add i64 %19, 8
  store i64 %501, i64* %16, align 8, !tbaa !1240
  ret %struct.Memory* %496

block_411c8b:                                     ; preds = %block_411c81
  %502 = inttoptr i64 %31 to i64*
  %503 = load i64, i64* %502
  %504 = sext i32 %582 to i64
  store i64 %504, i64* %14, align 8, !tbaa !1240
  %505 = shl nsw i64 %504, 2
  %506 = add i64 %505, %503
  %507 = inttoptr i64 %506 to i32*
  %508 = load i32, i32* %507
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %15, align 8, !tbaa !1240
  %510 = inttoptr i64 %28 to i32*
  %511 = load i32, i32* %510
  %512 = sext i32 %511 to i64
  %513 = mul nsw i64 %512, 2400
  %514 = add i64 %513, ptrtoint (%idmo_type* @idmo to i64)
  %515 = inttoptr i64 %51 to i32*
  %516 = load i32, i32* %515
  %517 = sext i32 %516 to i64
  %518 = mul nsw i64 %517, 400
  %519 = add i64 %518, %514
  store i64 %504, i64* %13, align 8, !tbaa !1240
  %520 = add i64 %519, 200
  %521 = add i64 %520, %505
  %522 = inttoptr i64 %521 to i32*
  store i32 %508, i32* %522
  %523 = inttoptr i64 %466 to i32*
  %524 = load i32, i32* %523
  %525 = add i32 %524, 1
  %526 = zext i32 %525 to i64
  store i64 %526, i64* %12, align 8, !tbaa !1240
  %527 = inttoptr i64 %466 to i32*
  store i32 %525, i32* %527
  %528 = add i64 %593, -10
  br label %block_411c81

block_411dee:                                     ; preds = %block_411de7, %block_411df8
  %529 = phi i64 [ %316, %block_411de7 ], [ %117, %block_411df8 ]
  %530 = phi %struct.Memory* [ %2, %block_411de7 ], [ %530, %block_411df8 ]
  %531 = inttoptr i64 %315 to i32*
  %532 = load i32, i32* %531
  %533 = add i32 %532, -5
  %534 = lshr i32 %533, 31
  %535 = trunc i32 %534 to i8
  %536 = lshr i32 %532, 31
  %537 = xor i32 %534, %536
  %538 = add nuw nsw i32 %537, %536
  %539 = icmp eq i32 %538, 2
  %540 = icmp ne i8 %535, 0
  %541 = xor i1 %540, %539
  %542 = select i1 %541, i64 10, i64 89
  %543 = add i64 %529, %542
  br i1 %541, label %block_411df8, label %block_411e47

block_411f2c:                                     ; preds = %block_411ebb
  %544 = inttoptr i64 %278 to i32*
  store i32 0, i32* %544
  %545 = add i64 %19, -16
  br label %block_411f33

block_411d04:                                     ; preds = %block_411cfa
  %546 = inttoptr i64 %31 to i64*
  %547 = load i64, i64* %546
  %548 = add i32 %283, -1
  %549 = sext i32 %548 to i64
  store i64 %549, i64* %15, align 8, !tbaa !1240
  %550 = shl nsw i64 %549, 2
  %551 = add i64 %547, %550
  %552 = inttoptr i64 %551 to i32*
  %553 = load i32, i32* %552
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %14, align 8, !tbaa !1240
  %555 = inttoptr i64 %28 to i32*
  %556 = load i32, i32* %555
  %557 = sext i32 %556 to i64
  %558 = mul nsw i64 %557, 2400
  %559 = add i64 %558, ptrtoint (%idmo_type* @idmo to i64)
  %560 = inttoptr i64 %240 to i32*
  %561 = load i32, i32* %560
  %562 = sext i32 %561 to i64
  %563 = mul nsw i64 %562, 400
  %564 = add i64 %563, %559
  %565 = add i64 %564, 200
  %566 = sext i32 %283 to i64
  %567 = mul nsw i64 %566, 20
  store i64 %567, i64* %13, align 8, !tbaa !1240
  %568 = add i64 %567, %565
  %569 = add i64 %568, 16
  %570 = inttoptr i64 %569 to i32*
  store i32 %553, i32* %570
  %571 = inttoptr i64 %86 to i32*
  %572 = load i32, i32* %571
  %573 = add i32 %572, 1
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %12, align 8, !tbaa !1240
  %575 = inttoptr i64 %86 to i32*
  store i32 %573, i32* %575
  %576 = add i64 %294, -10
  br label %block_411cfa

block_411f9c.sink.split:                          ; preds = %block_411f92, %block_411ea7, %block_411e47
  %577 = phi %struct.Memory* [ %460, %block_411f92 ], [ %223, %block_411ea7 ], [ %530, %block_411e47 ]
  br label %block_411f9c

block_411f9c:                                     ; preds = %block_411f9c.sink.split, %block_411eb1
  %578 = phi %struct.Memory* [ %2, %block_411eb1 ], [ %577, %block_411f9c.sink.split ]
  br label %block_411fa1

block_411c81:                                     ; preds = %block_411c8b, %block_411c7a
  %579 = phi i64 [ %467, %block_411c7a ], [ %528, %block_411c8b ]
  %580 = phi %struct.Memory* [ %2, %block_411c7a ], [ %580, %block_411c8b ]
  %581 = inttoptr i64 %466 to i32*
  %582 = load i32, i32* %581
  %583 = add i32 %582, -4
  %584 = lshr i32 %583, 31
  %585 = trunc i32 %584 to i8
  %586 = lshr i32 %582, 31
  %587 = xor i32 %584, %586
  %588 = add nuw nsw i32 %587, %586
  %589 = icmp eq i32 %588, 2
  %590 = icmp ne i8 %585, 0
  %591 = xor i1 %590, %589
  %592 = select i1 %591, i64 10, i64 84
  %593 = add i64 %579, %592
  br i1 %591, label %block_411c8b, label %block_411cd5
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41fa30_adds1m1(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41fa30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %13 = load i64, i64* %11, align 8
  %14 = load i64, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %9, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %8, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -32
  %24 = bitcast %union.VectorReg* %12 to double*
  %25 = load double, double* %24, align 1
  %26 = inttoptr i64 %23 to double*
  store double %25, double* %26
  %27 = add i64 %14, -36
  %28 = load i32, i32* %5, align 4
  %29 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %29
  %30 = add i64 %14, -40
  %31 = inttoptr i64 %30 to i32*
  store i32 0, i32* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %35 = add i64 %14, -32
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %37 = add i64 %14, -16
  %38 = add i64 %14, -24
  br label %block_41fa4b

block_41fa57:                                     ; preds = %block_41fa4b
  %39 = inttoptr i64 %35 to double*
  %40 = load double, double* %39
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41
  %43 = sext i32 %62 to i64
  %44 = shl nsw i64 %43, 3
  %45 = add i64 %44, %42
  %46 = inttoptr i64 %45 to double*
  %47 = load double, double* %46
  %48 = fmul double %40, %47
  %49 = inttoptr i64 %38 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %44, %50
  %52 = inttoptr i64 %51 to double*
  %53 = load double, double* %52
  %54 = fadd double %48, %53
  store double %54, double* %24, align 1, !tbaa !1246
  store i64 0, i64* %36, align 1, !tbaa !1246
  store i64 %43, i64* %7, align 8, !tbaa !1240
  %55 = inttoptr i64 %45 to double*
  store double %54, double* %55
  %56 = inttoptr i64 %30 to i32*
  %57 = load i32, i32* %56
  %58 = add i32 %57, 1
  %59 = inttoptr i64 %30 to i32*
  store i32 %58, i32* %59
  br label %block_41fa4b

block_41fa4b:                                     ; preds = %block_41fa57, %block_41fa30
  %60 = phi %struct.Memory* [ %2, %block_41fa30 ], [ %60, %block_41fa57 ]
  %61 = inttoptr i64 %30 to i32*
  %62 = load i32, i32* %61
  %63 = inttoptr i64 %27 to i32*
  %64 = load i32, i32* %63
  %65 = sub i32 %62, %64
  %66 = lshr i32 %65, 31
  %67 = trunc i32 %66 to i8
  %68 = lshr i32 %62, 31
  %69 = lshr i32 %64, 31
  %70 = xor i32 %69, %68
  %71 = xor i32 %66, %68
  %72 = add nuw nsw i32 %71, %70
  %73 = icmp eq i32 %72, 2
  %74 = icmp ne i8 %67, 0
  %75 = xor i1 %74, %73
  br i1 %75, label %block_41fa57, label %block_41fa91

block_41fa91:                                     ; preds = %block_41fa4b
  %76 = zext i32 %62 to i64
  store i64 %76, i64* %6, align 8, !tbaa !1240
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %80 = icmp ult i32 %62, %64
  %81 = zext i1 %80 to i8
  %82 = and i32 %65, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #11
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  %87 = xor i32 %64, %62
  %88 = xor i32 %87, %65
  %89 = lshr i32 %88, 4
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = icmp eq i32 %65, 0
  %93 = zext i1 %92 to i8
  %94 = zext i1 %73 to i8
  store i8 %81, i8* %32, align 1, !tbaa !1248
  store i8 %86, i8* %77, align 1, !tbaa !1261
  store i8 %91, i8* %33, align 1, !tbaa !1262
  store i8 %93, i8* %78, align 1, !tbaa !1263
  store i8 %67, i8* %34, align 1, !tbaa !1264
  store i8 %94, i8* %79, align 1, !tbaa !1265
  %95 = inttoptr i64 %15 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %11, align 8, !tbaa !1240
  %97 = inttoptr i64 %14 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %3, align 8, !tbaa !1240
  %99 = add i64 %14, 8
  store i64 %99, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %60
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400e10_do_refine(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400e10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = load i64, i64* %12, align 8
  %16 = load i64, i64* %11, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %12, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%mt_to_id_type* @mt_to_id to i64), i64* %7, align 8, !tbaa !1240
  %25 = add i64 %16, -16
  %26 = load i64, i64* %10, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %16, -24
  %29 = load i64, i64* %9, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64), i64* %10, align 8, !tbaa !1240
  store i64 ptrtoint (%mt_to_id_type* @mt_to_id to i64), i64* %9, align 8, !tbaa !1240
  %33 = add i64 %1, 125712
  %34 = add i64 %1, 57
  %35 = add i64 %16, -1616
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  store i64 %35, i64* %11, align 8, !tbaa !1240
  %37 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %33, %struct.Memory* %2)
  %38 = load i64, i64* %3, align 8
  store i64 ptrtoint (%mt_to_id_type* @mt_to_id to i64), i64* %10, align 8, !tbaa !1240
  store i64 4294967295, i64* %8, align 8, !tbaa !1240
  %39 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %9, align 8, !tbaa !1240
  %41 = add i64 %38, 125527
  %42 = add i64 %38, 27
  %43 = load i64, i64* %11, align 8, !tbaa !1240
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45
  store i64 %44, i64* %11, align 8, !tbaa !1240
  %46 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %41, %struct.Memory* %37)
  %47 = load i64, i64* %3, align 8
  store i64 ptrtoint (%action_type* @action to i64), i64* %10, align 8, !tbaa !1240
  store i64 4294967295, i64* %8, align 8, !tbaa !1240
  %48 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %49 = zext i32 %48 to i64
  store i64 %49, i64* %9, align 8, !tbaa !1240
  %50 = add i64 %47, 125500
  %51 = add i64 %47, 27
  %52 = load i64, i64* %11, align 8, !tbaa !1240
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %51, i64* %54
  store i64 %53, i64* %11, align 8, !tbaa !1240
  %55 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %50, %struct.Memory* %46)
  %56 = load i64, i64* %12, align 8
  %57 = add i64 %56, -1368
  %58 = load i64, i64* %3, align 8
  %59 = add i64 %58, 10
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60
  br label %block_400e89

block_4015f3:                                     ; preds = %block_401600, %block_4015e9
  %61 = phi i64 [ %75, %block_4015e9 ], [ %2684, %block_401600 ]
  %62 = phi %struct.Memory* [ %629, %block_4015e9 ], [ %62, %block_401600 ]
  %63 = inttoptr i64 %809 to i32*
  %64 = load i32, i32* %63
  %65 = add i32 %64, -7
  %66 = lshr i32 %65, 31
  %67 = lshr i32 %64, 31
  %68 = xor i32 %66, %67
  %69 = add nuw nsw i32 %68, %67
  %70 = icmp eq i32 %69, 2
  %71 = icmp ne i32 %66, 0
  %72 = xor i1 %71, %70
  %73 = select i1 %72, i64 13, i64 137
  %74 = add i64 %61, %73
  br i1 %72, label %block_401600, label %block_40167c

block_4015e9:                                     ; preds = %block_4015dc
  %75 = add i64 %642, 10
  %76 = inttoptr i64 %809 to i32*
  store i32 0, i32* %76
  br label %block_4015f3

block_400fea:                                     ; preds = %block_400fc1
  %77 = add i32 %932, -7
  %78 = inttoptr i64 %265 to i32*
  store i32 %77, i32* %78
  %79 = inttoptr i64 %870 to i32*
  %80 = load i32, i32* %79
  %81 = inttoptr i64 %265 to i32*
  %82 = load i32, i32* %81
  %83 = add i32 %82, %80
  %84 = inttoptr i64 %266 to i32*
  store i32 %83, i32* %84
  %85 = add i64 %924, 88
  br label %block_401042

block_4017e3:                                     ; preds = %block_4017d9, %block_4017f0
  %86 = phi i64 [ %1577, %block_4017d9 ], [ %1450, %block_4017f0 ]
  %87 = phi %struct.Memory* [ %612, %block_4017d9 ], [ %87, %block_4017f0 ]
  %88 = inttoptr i64 %809 to i32*
  %89 = load i32, i32* %88
  %90 = add i32 %89, -2
  %91 = lshr i32 %90, 31
  %92 = trunc i32 %91 to i8
  %93 = lshr i32 %89, 31
  %94 = xor i32 %91, %93
  %95 = add nuw nsw i32 %94, %93
  %96 = icmp eq i32 %95, 2
  %97 = icmp ne i8 %92, 0
  %98 = xor i1 %97, %96
  %99 = select i1 %98, i64 13, i64 313
  %100 = add i64 %86, %99
  br i1 %98, label %block_4017f0, label %block_40191c

block_4029c7:                                     ; preds = %block_401f96
  %101 = add i64 %2220, -1264
  store i64 %101, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%ta1_type* @ta1 to i64), i64* %6, align 8, !tbaa !1240
  %102 = load i64, i64* %12, align 8
  %103 = add i64 %102, -1292
  %104 = inttoptr i64 %103 to i32*
  %105 = load i32, i32* %104
  %106 = sext i32 %105 to i64
  %107 = mul nsw i64 %106, 1000
  %108 = add i64 %107, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %108, i64* %9, align 8, !tbaa !1240
  %109 = shl nsw i64 %106, 2
  %110 = add i64 %109, ptrtoint (%ref_front_id_type* @ref_front_id to i64)
  %111 = inttoptr i64 %110 to i32*
  %112 = load i32, i32* %111
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %113, 1000
  store i64 %114, i64* %7, align 8, !tbaa !1240
  %115 = load i64, i64* %6, align 8
  %116 = add i64 %114, %115
  %117 = load i64, i64* %9, align 8
  store i64 %117, i64* %10, align 8, !tbaa !1240
  store i64 %116, i64* %9, align 8, !tbaa !1240
  %118 = add i64 %280, 7033
  %119 = add i64 %280, 73
  %120 = load i64, i64* %11, align 8, !tbaa !1240
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122
  store i64 %121, i64* %11, align 8, !tbaa !1240
  %123 = tail call %struct.Memory* @sub_404540_remap(%struct.State* nonnull %0, i64 %118, %struct.Memory* %268)
  %124 = load i64, i64* %12, align 8
  %125 = add i64 %124, -1376
  %126 = load i64, i64* %3, align 8
  %127 = inttoptr i64 %125 to i32*
  %128 = load i32, i32* %127
  %129 = add i32 %128, 1
  %130 = inttoptr i64 %125 to i32*
  store i32 %129, i32* %130
  %131 = add i64 %126, -6493
  br label %block_4010b3

block_4021c3:                                     ; preds = %block_4020e0
  %132 = inttoptr i64 %2088 to i32*
  %133 = load i32, i32* %132
  %134 = icmp ne i32 %133, 2
  %135 = select i1 %134, i64 1283, i64 13
  %136 = add i64 %1016, %135
  br i1 %134, label %block_4026c6, label %block_4021d0

block_401fba:                                     ; preds = %block_401fad
  %137 = shl i32 %243, 1
  %138 = add i32 %228, %137
  %139 = inttoptr i64 %2224 to i32*
  store i32 %138, i32* %139
  %140 = inttoptr i64 %2224 to i32*
  %141 = load i32, i32* %140
  %142 = sext i32 %141 to i64
  %143 = shl nsw i64 %142, 2
  %144 = add i64 %143, ptrtoint (%jjface_type* @jjface to i64)
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145
  %147 = inttoptr i64 %2086 to i32*
  store i32 %146, i32* %147
  %148 = inttoptr i64 %2224 to i32*
  %149 = load i32, i32* %148
  %150 = sext i32 %149 to i64
  %151 = shl nsw i64 %150, 2
  %152 = add i64 %2087, %151
  %153 = inttoptr i64 %152 to i32*
  %154 = load i32, i32* %153
  %155 = inttoptr i64 %2088 to i32*
  store i32 %154, i32* %155
  %156 = add i64 %241, 71
  %157 = inttoptr i64 %2089 to i32*
  store i32 0, i32* %157
  br label %block_402001

block_4025b7:                                     ; preds = %block_4025aa
  %158 = sext i32 %247 to i64
  %159 = shl nsw i64 %158, 2
  %160 = add i64 %2091, %159
  %161 = inttoptr i64 %160 to i32*
  %162 = load i32, i32* %161
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %163, 24
  %165 = add i64 %164, ptrtoint (%cbc_type* @cbc to i64)
  %166 = inttoptr i64 %2224 to i32*
  %167 = load i32, i32* %166
  %168 = sext i32 %167 to i64
  %169 = shl nsw i64 %168, 2
  %170 = add i64 %169, %165
  %171 = inttoptr i64 %170 to i32*
  store i32 2, i32* %171
  %172 = inttoptr i64 %2094 to i32*
  %173 = load i32, i32* %172
  %174 = inttoptr i64 %2082 to i32*
  %175 = load i32, i32* %174
  %176 = sext i32 %175 to i64
  %177 = shl nsw i64 %176, 5
  %178 = add i64 %177, ptrtoint (%le_arr_type* @le_arr to i64)
  %179 = inttoptr i64 %2085 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  %182 = shl nsw i64 %181, 4
  %183 = add i64 %182, %178
  %184 = inttoptr i64 %2089 to i32*
  %185 = load i32, i32* %184
  %186 = sext i32 %185 to i64
  %187 = shl nsw i64 %186, 2
  %188 = add i64 %183, %187
  %189 = inttoptr i64 %188 to i32*
  %190 = load i32, i32* %189
  %191 = add i32 %190, %173
  %192 = inttoptr i64 %2095 to i32*
  store i32 %191, i32* %192
  %193 = inttoptr i64 %2095 to i32*
  %194 = load i32, i32* %193
  %195 = inttoptr i64 %2094 to i32*
  %196 = load i32, i32* %195
  %197 = add i32 %196, 7
  %198 = icmp ne i32 %194, %197
  %199 = select i1 %198, i64 141, i64 129
  %200 = add i64 %257, %199
  br i1 %198, label %block_402644, label %block_402638

block_4027dc:                                     ; preds = %block_402754, %block_4027d7
  %201 = phi i64 [ %609, %block_402754 ], [ %221, %block_4027d7 ]
  %202 = phi i64 [ 106, %block_402754 ], [ 5, %block_4027d7 ]
  %203 = phi %struct.Memory* [ %1018, %block_402754 ], [ %220, %block_4027d7 ]
  %204 = add i64 %201, %202
  br label %block_4027e1

block_4027d7.sink.split:                          ; preds = %block_402777, %block_4027a7
  %205 = phi i64 [ %322, %block_402777 ], [ %260, %block_4027a7 ]
  %206 = phi i64 [ 4, %block_402777 ], [ 12, %block_4027a7 ]
  %207 = phi i64 [ 53, %block_402777 ], [ 5, %block_4027a7 ]
  %208 = inttoptr i64 %2224 to i32*
  %209 = load i32, i32* %208
  %210 = sext i32 %209 to i64
  %211 = shl nsw i64 %210, 4
  %212 = add i64 %211, %2093
  %213 = add i64 %212, %206
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = add i64 %205, 30
  %217 = inttoptr i64 %2092 to i32*
  store i32 %215, i32* %217
  br label %block_4027d7

block_4027d7:                                     ; preds = %block_4027a7, %block_4027d7.sink.split
  %218 = phi i64 [ %260, %block_4027a7 ], [ %216, %block_4027d7.sink.split ]
  %219 = phi i64 [ 5, %block_4027a7 ], [ %207, %block_4027d7.sink.split ]
  %220 = phi %struct.Memory* [ %1018, %block_4027a7 ], [ %1018, %block_4027d7.sink.split ]
  %221 = add i64 %218, %219
  br label %block_4027dc

block_4029ae:                                     ; preds = %block_401fad
  %222 = add i32 %243, 1
  %223 = inttoptr i64 %2082 to i32*
  store i32 %222, i32* %223
  %224 = add i64 %241, -2584
  br label %block_401f96

block_401fad:                                     ; preds = %block_401fa3, %block_402995
  %225 = phi i64 [ %2003, %block_401fa3 ], [ %305, %block_402995 ]
  %226 = phi %struct.Memory* [ %268, %block_401fa3 ], [ %299, %block_402995 ]
  %227 = inttoptr i64 %2085 to i32*
  %228 = load i32, i32* %227
  %229 = add i32 %228, -1
  %230 = lshr i32 %229, 31
  %231 = lshr i32 %228, 31
  %232 = xor i32 %230, %231
  %233 = add nuw nsw i32 %232, %231
  %234 = icmp eq i32 %233, 2
  %235 = icmp ne i32 %229, 0
  %236 = icmp ne i32 %230, 0
  %237 = xor i1 %236, %234
  %238 = xor i1 %237, true
  %239 = and i1 %235, %238
  %240 = select i1 %239, i64 2561, i64 13
  %241 = add i64 %225, %240
  %242 = inttoptr i64 %2082 to i32*
  %243 = load i32, i32* %242
  br i1 %239, label %block_4029ae, label %block_401fba

block_4025aa:                                     ; preds = %block_402644, %block_40258c
  %244 = phi i64 [ %1079, %block_40258c ], [ %2190, %block_402644 ]
  %245 = phi %struct.Memory* [ %1004, %block_40258c ], [ %2151, %block_402644 ]
  %246 = inttoptr i64 %2089 to i32*
  %247 = load i32, i32* %246
  %248 = add i32 %247, -4
  %249 = lshr i32 %248, 31
  %250 = lshr i32 %247, 31
  %251 = xor i32 %249, %250
  %252 = add nuw nsw i32 %251, %250
  %253 = icmp eq i32 %252, 2
  %254 = icmp ne i32 %249, 0
  %255 = xor i1 %254, %253
  %256 = select i1 %255, i64 13, i64 274
  %257 = add i64 %244, %256
  br i1 %255, label %block_4025b7, label %block_4026bc

block_4027a7:                                     ; preds = %block_402777
  %258 = icmp ne i32 %2585, 3
  %259 = select i1 %258, i64 43, i64 13
  %260 = add i64 %322, %259
  br i1 %258, label %block_4027d7, label %block_4027d7.sink.split

block_401d9c:                                     ; preds = %block_401d8f
  %261 = add i64 %295, 10
  %262 = inttoptr i64 %2224 to i32*
  store i32 0, i32* %262
  br label %block_401da6

block_400fa4:                                     ; preds = %block_400f2e
  %263 = add i64 %600, 10
  %264 = inttoptr i64 %870 to i32*
  store i32 0, i32* %264
  %265 = add i64 %867, -1308
  %266 = add i64 %867, -1364
  br label %block_400fae

block_401f96:                                     ; preds = %block_401f8c, %block_4029ae
  %267 = phi i64 [ %2083, %block_401f8c ], [ %224, %block_4029ae ]
  %268 = phi %struct.Memory* [ %1736, %block_401f8c ], [ %226, %block_4029ae ]
  %269 = inttoptr i64 %2082 to i32*
  %270 = load i32, i32* %269
  %271 = add i32 %270, -3
  %272 = lshr i32 %271, 31
  %273 = lshr i32 %270, 31
  %274 = xor i32 %272, %273
  %275 = add nuw nsw i32 %274, %273
  %276 = icmp eq i32 %275, 2
  %277 = icmp ne i32 %272, 0
  %278 = xor i1 %277, %276
  %279 = select i1 %278, i64 13, i64 2609
  %280 = add i64 %267, %279
  br i1 %278, label %block_401fa3, label %block_4029c7

block_401d8f:                                     ; preds = %block_401e2f, %block_401d85
  %281 = phi i64 [ %346, %block_401d85 ], [ %2348, %block_401e2f ]
  %282 = phi %struct.Memory* [ %2115, %block_401d85 ], [ %1085, %block_401e2f ]
  %283 = inttoptr i64 %2221 to i32*
  %284 = load i32, i32* %283
  %285 = add i32 %284, -3
  %286 = lshr i32 %285, 31
  %287 = trunc i32 %286 to i8
  %288 = lshr i32 %284, 31
  %289 = xor i32 %286, %288
  %290 = add nuw nsw i32 %289, %288
  %291 = icmp eq i32 %290, 2
  %292 = icmp ne i8 %287, 0
  %293 = xor i1 %292, %291
  %294 = select i1 %293, i64 13, i64 185
  %295 = add i64 %281, %294
  br i1 %293, label %block_401d9c, label %block_401e48

block_402986:                                     ; preds = %block_402935
  %296 = add i64 %2437, 5
  br label %block_40298b

block_402995:                                     ; preds = %block_402587, %block_4026bc, %block_402919, %block_40298b
  %297 = phi i64 [ %705, %block_402919 ], [ %325, %block_40298b ], [ %2438, %block_402587 ], [ %1959, %block_4026bc ]
  %298 = phi i64 [ 5, %block_402919 ], [ 5, %block_40298b ], [ 724, %block_402587 ], [ 724, %block_4026bc ]
  %299 = phi %struct.Memory* [ %1018, %block_402919 ], [ %324, %block_40298b ], [ %1966, %block_402587 ], [ %245, %block_4026bc ]
  %300 = add i64 %298, %297
  %301 = inttoptr i64 %2085 to i32*
  %302 = load i32, i32* %301
  %303 = add i32 %302, 1
  %304 = inttoptr i64 %2085 to i32*
  store i32 %303, i32* %304
  %305 = add i64 %300, -2536
  br label %block_401fad

block_401b7a:                                     ; preds = %block_401b87, %block_401b70
  %306 = phi i64 [ %326, %block_401b70 ], [ %1664, %block_401b87 ]
  %307 = phi %struct.Memory* [ %1946, %block_401b70 ], [ %307, %block_401b87 ]
  %308 = inttoptr i64 %2224 to i32*
  %309 = load i32, i32* %308
  %310 = add i32 %309, -4
  %311 = lshr i32 %310, 31
  %312 = lshr i32 %309, 31
  %313 = xor i32 %311, %312
  %314 = add nuw nsw i32 %313, %312
  %315 = icmp eq i32 %314, 2
  %316 = icmp ne i32 %311, 0
  %317 = xor i1 %316, %315
  %318 = select i1 %317, i64 13, i64 240
  %319 = add i64 %306, %318
  br i1 %317, label %block_401b87, label %block_401c6a

block_402777:                                     ; preds = %block_402747
  %320 = icmp ne i32 %2585, 2
  %321 = select i1 %320, i64 48, i64 13
  %322 = add i64 %654, %321
  br i1 %320, label %block_4027a7, label %block_4027d7.sink.split

block_40298b:                                     ; preds = %block_40291e, %block_402986
  %323 = phi i64 [ %657, %block_40291e ], [ %296, %block_402986 ]
  %324 = phi %struct.Memory* [ %1004, %block_40291e ], [ %2425, %block_402986 ]
  %325 = add i64 %323, 5
  br label %block_402995

block_401b70:                                     ; preds = %block_401a80
  %326 = add i64 %1958, 10
  %327 = inttoptr i64 %2224 to i32*
  store i32 2, i32* %327
  br label %block_401b7a

block_4021d0:                                     ; preds = %block_4021c3
  %328 = inttoptr i64 %2224 to i32*
  %329 = load i32, i32* %328
  %330 = sext i32 %329 to i64
  %331 = shl nsw i64 %330, 4
  %332 = add i64 %331, %2093
  %333 = inttoptr i64 %332 to i32*
  %334 = load i32, i32* %333
  %335 = inttoptr i64 %2092 to i32*
  store i32 %334, i32* %335
  %336 = inttoptr i64 %2092 to i32*
  %337 = load i32, i32* %336
  %338 = sext i32 %337 to i64
  %339 = shl nsw i64 %338, 2
  %340 = add i64 %339, ptrtoint (%ich_type* @ich to i64)
  %341 = inttoptr i64 %340 to i32*
  %342 = load i32, i32* %341
  %343 = icmp eq i32 %342, 4
  %344 = select i1 %343, i64 956, i64 50
  %345 = add i64 %136, %344
  br i1 %343, label %block_40258c, label %block_402202

block_401d85:                                     ; preds = %block_401d0e
  %346 = add i64 %2128, 10
  %347 = inttoptr i64 %2221 to i32*
  store i32 0, i32* %347
  %348 = add i64 %2220, -248
  %349 = add i64 %2220, -1288
  br label %block_401d8f

block_400f6a:                                     ; preds = %block_400f41
  %350 = inttoptr i64 %870 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 2
  %354 = add i64 %353, ptrtoint (%front_type* @front to i64)
  %355 = inttoptr i64 %354 to i32*
  %356 = load i32, i32* %355
  %357 = add i32 %356, -1
  %358 = sext i32 %357 to i64
  %359 = shl nsw i64 %358, 2
  %360 = add i64 %359, ptrtoint (%action_type* @action to i64)
  %361 = add i64 %2650, 33
  %362 = inttoptr i64 %360 to i32*
  store i32 %351, i32* %362
  br label %block_400f8b

block_4024c5:                                     ; preds = %block_402426
  %363 = icmp ne i32 %739, 3
  %364 = select i1 %363, i64 154, i64 13
  %365 = add i64 %2356, %364
  br i1 %363, label %block_402564, label %block_402564.sink.split

block_40135a:                                     ; preds = %block_40134d
  store i64 6, i64* %9, align 8, !tbaa !1240
  store i64 0, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %6, align 8, !tbaa !1240
  %366 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %367 = add i32 %483, %366
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %7, align 8, !tbaa !1240
  %369 = add i64 %479, -1364
  %370 = inttoptr i64 %369 to i32*
  %371 = load i32, i32* %370
  %372 = add i32 %483, %371
  %373 = add i32 %372, 1
  %374 = sext i32 %373 to i64
  %375 = shl nsw i64 %374, 2
  %376 = add i64 %375, ptrtoint (%mt_to_id_type* @mt_to_id to i64)
  %377 = load i32, i32* %849, align 4
  %378 = inttoptr i64 %376 to i32*
  store i32 %377, i32* %378
  %379 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %380 = load i64, i64* %12, align 8
  %381 = add i64 %380, -1300
  %382 = inttoptr i64 %381 to i32*
  %383 = load i32, i32* %382
  %384 = add i32 %383, %379
  %385 = sext i32 %384 to i64
  %386 = shl nsw i64 %385, 2
  %387 = add i64 %386, ptrtoint (%tree_type* @tree to i64)
  %388 = inttoptr i64 %387 to i32*
  store i32 0, i32* %388
  %389 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %390 = inttoptr i64 %381 to i32*
  %391 = load i32, i32* %390
  %392 = add i32 %391, %389
  %393 = zext i32 %392 to i64
  store i64 %393, i64* %7, align 8, !tbaa !1240
  %394 = sext i32 %392 to i64
  %395 = mul nsw i64 %394, 24
  store i64 %395, i64* %13, align 8, !tbaa !1240
  %396 = load i64, i64* %6, align 8
  %397 = add i64 %395, %396
  store i64 %397, i64* %10, align 8, !tbaa !1240
  %398 = add i64 %494, 124230
  %399 = add i64 %494, 115
  %400 = load i64, i64* %11, align 8, !tbaa !1240
  %401 = add i64 %400, -8
  %402 = inttoptr i64 %401 to i64*
  store i64 %399, i64* %402
  store i64 %401, i64* %11, align 8, !tbaa !1240
  %403 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %398, %struct.Memory* %480)
  %404 = load i64, i64* %3, align 8
  store i64 24, i64* %9, align 8, !tbaa !1240
  store i64 4294967295, i64* %8, align 8, !tbaa !1240
  %405 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %406 = load i64, i64* %12, align 8
  %407 = add i64 %406, -1300
  %408 = inttoptr i64 %407 to i32*
  %409 = load i32, i32* %408
  %410 = add i32 %409, %405
  %411 = zext i32 %410 to i64
  store i64 %411, i64* %7, align 8, !tbaa !1240
  %412 = sext i32 %410 to i64
  %413 = mul nsw i64 %412, 96
  %414 = add i64 %413, ptrtoint (%sje_type* @sje to i64)
  store i64 %414, i64* %10, align 8, !tbaa !1240
  %415 = add i64 %404, 124115
  %416 = add i64 %404, 51
  %417 = load i64, i64* %11, align 8, !tbaa !1240
  %418 = add i64 %417, -8
  %419 = inttoptr i64 %418 to i64*
  store i64 %416, i64* %419
  store i64 %418, i64* %11, align 8, !tbaa !1240
  %420 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %415, %struct.Memory* %403)
  %421 = load i64, i64* %3, align 8
  store i64 12, i64* %9, align 8, !tbaa !1240
  store i64 4294967295, i64* %8, align 8, !tbaa !1240
  %422 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %423 = load i64, i64* %12, align 8
  %424 = add i64 %423, -1300
  %425 = inttoptr i64 %424 to i32*
  %426 = load i32, i32* %425
  %427 = add i32 %426, %422
  %428 = zext i32 %427 to i64
  store i64 %428, i64* %7, align 8, !tbaa !1240
  %429 = sext i32 %427 to i64
  %430 = mul nsw i64 %429, 48
  %431 = add i64 %430, ptrtoint (%ijel_type* @ijel to i64)
  store i64 %431, i64* %10, align 8, !tbaa !1240
  %432 = add i64 %421, 124064
  %433 = add i64 %421, 51
  %434 = load i64, i64* %11, align 8, !tbaa !1240
  %435 = add i64 %434, -8
  %436 = inttoptr i64 %435 to i64*
  store i64 %433, i64* %436
  store i64 %435, i64* %11, align 8, !tbaa !1240
  %437 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %432, %struct.Memory* %420)
  %438 = load i64, i64* %3, align 8
  store i64 125, i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %1722, align 1, !tbaa !1244
  store i32 0, i32* %1724, align 1, !tbaa !1244
  store i32 0, i32* %1725, align 1, !tbaa !1244
  store i32 0, i32* %1727, align 1, !tbaa !1244
  %439 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %440 = load i64, i64* %12, align 8
  %441 = add i64 %440, -1300
  %442 = inttoptr i64 %441 to i32*
  %443 = load i32, i32* %442
  %444 = add i32 %443, %439
  %445 = zext i32 %444 to i64
  store i64 %445, i64* %7, align 8, !tbaa !1240
  %446 = sext i32 %444 to i64
  %447 = mul nsw i64 %446, 1000
  %448 = add i64 %447, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %448, i64* %10, align 8, !tbaa !1240
  %449 = add i64 %438, 123933
  %450 = add i64 %438, 52
  %451 = load i64, i64* %11, align 8, !tbaa !1240
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %450, i64* %453
  store i64 %452, i64* %11, align 8, !tbaa !1240
  %454 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %449, %struct.Memory* %437)
  %455 = load i64, i64* %12, align 8
  %456 = add i64 %455, -1300
  %457 = load i64, i64* %3, align 8
  %458 = inttoptr i64 %456 to i32*
  %459 = load i32, i32* %458
  %460 = add i32 %459, 1
  %461 = inttoptr i64 %456 to i32*
  store i32 %460, i32* %461
  %462 = add i64 %457, -282
  br label %block_40134d

block_401c8d:                                     ; preds = %block_401c8d.preheader, %block_401c9a
  %463 = phi i64 [ %1801, %block_401c9a ], [ %1994, %block_401c8d.preheader ]
  %464 = phi %struct.Memory* [ %464, %block_401c9a ], [ %1980, %block_401c8d.preheader ]
  %465 = inttoptr i64 %2224 to i32*
  %466 = load i32, i32* %465
  %467 = add i32 %466, -2
  %468 = lshr i32 %467, 31
  %469 = trunc i32 %468 to i8
  %470 = lshr i32 %466, 31
  %471 = xor i32 %468, %470
  %472 = add nuw nsw i32 %471, %470
  %473 = icmp eq i32 %472, 2
  %474 = icmp ne i8 %469, 0
  %475 = xor i1 %474, %473
  %476 = select i1 %475, i64 13, i64 119
  %477 = add i64 %463, %476
  br i1 %475, label %block_401c9a, label %block_401d04

block_40134d:                                     ; preds = %block_4010c5, %block_40135a
  %478 = phi i64 [ %1330, %block_4010c5 ], [ %462, %block_40135a ]
  %479 = phi i64 [ %1327, %block_4010c5 ], [ %455, %block_40135a ]
  %480 = phi %struct.Memory* [ %1326, %block_4010c5 ], [ %454, %block_40135a ]
  %481 = add i64 %479, -1300
  %482 = inttoptr i64 %481 to i32*
  %483 = load i32, i32* %482
  %484 = add i32 %483, -7
  %485 = lshr i32 %484, 31
  %486 = trunc i32 %485 to i8
  %487 = lshr i32 %483, 31
  %488 = xor i32 %485, %487
  %489 = add nuw nsw i32 %488, %487
  %490 = icmp eq i32 %489, 2
  %491 = icmp ne i8 %486, 0
  %492 = xor i1 %491, %490
  %493 = select i1 %492, i64 13, i64 302
  %494 = add i64 %478, %493
  br i1 %492, label %block_40135a, label %block_40147b

block_40173f:                                     ; preds = %block_4016b6
  %495 = inttoptr i64 %806 to i32*
  %496 = load i32, i32* %495
  %497 = add i32 %496, 2
  %498 = inttoptr i64 %806 to i32*
  store i32 %497, i32* %498
  %499 = add i64 %1473, -160
  br label %block_40169f

block_401933:                                     ; preds = %block_401926
  store i64 ptrtoint (%yc_type* @yc to i64), i64* %6, align 8, !tbaa !1240
  %500 = inttoptr i64 %2353 to double*
  %501 = load double, double* %500
  %502 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %503 = sext i32 %502 to i64
  %504 = shl nsw i64 %503, 6
  %505 = add i64 %504, ptrtoint (%yc_type* @yc to i64)
  %506 = sext i32 %2022 to i64
  %507 = shl nsw i64 %506, 3
  %508 = add i64 %507, %505
  %509 = inttoptr i64 %508 to double*
  store double %501, double* %509
  %510 = inttoptr i64 %2353 to double*
  %511 = load double, double* %510
  %512 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %513 = add i32 %512, 3
  %514 = sext i32 %513 to i64
  %515 = shl nsw i64 %514, 6
  %516 = add i64 %515, ptrtoint (%yc_type* @yc to i64)
  %517 = inttoptr i64 %2350 to i32*
  %518 = load i32, i32* %517
  %519 = sext i32 %518 to i64
  %520 = shl nsw i64 %519, 3
  %521 = add i64 %520, %516
  %522 = inttoptr i64 %521 to double*
  store double %511, double* %522
  %523 = inttoptr i64 %2353 to double*
  %524 = load double, double* %523
  %525 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %526 = add i32 %525, 4
  %527 = sext i32 %526 to i64
  %528 = shl nsw i64 %527, 6
  %529 = add i64 %528, ptrtoint (%yc_type* @yc to i64)
  %530 = inttoptr i64 %2350 to i32*
  %531 = load i32, i32* %530
  %532 = sext i32 %531 to i64
  %533 = shl nsw i64 %532, 3
  %534 = add i64 %533, %529
  %535 = inttoptr i64 %534 to double*
  store double %524, double* %535
  %536 = inttoptr i64 %2353 to double*
  %537 = load double, double* %536
  %538 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %539 = sext i32 %538 to i64
  %540 = shl nsw i64 %539, 6
  %541 = add i64 %540, ptrtoint (%yc_type* @yc to i64)
  %542 = inttoptr i64 %2350 to i32*
  %543 = load i32, i32* %542
  %544 = add i32 %543, 4
  %545 = sext i32 %544 to i64
  %546 = shl nsw i64 %545, 3
  %547 = add i64 %541, %546
  %548 = inttoptr i64 %547 to double*
  store double %537, double* %548
  %549 = inttoptr i64 %2353 to double*
  %550 = load double, double* %549
  %551 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %552 = add i32 %551, 3
  %553 = sext i32 %552 to i64
  %554 = shl nsw i64 %553, 6
  %555 = add i64 %554, ptrtoint (%yc_type* @yc to i64)
  %556 = inttoptr i64 %2350 to i32*
  %557 = load i32, i32* %556
  %558 = add i32 %557, 4
  %559 = sext i32 %558 to i64
  %560 = shl nsw i64 %559, 3
  %561 = add i64 %555, %560
  %562 = inttoptr i64 %561 to double*
  store double %550, double* %562
  %563 = inttoptr i64 %2353 to double*
  %564 = load double, double* %563
  store double %564, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %565 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %566 = add i32 %565, 4
  %567 = sext i32 %566 to i64
  %568 = shl nsw i64 %567, 6
  %569 = load i64, i64* %6, align 8
  %570 = add i64 %568, %569
  %571 = inttoptr i64 %2350 to i32*
  %572 = load i32, i32* %571
  %573 = add i32 %572, 4
  %574 = sext i32 %573 to i64
  %575 = shl nsw i64 %574, 3
  %576 = add i64 %570, %575
  %577 = inttoptr i64 %576 to double*
  store double %564, double* %577
  %578 = inttoptr i64 %2350 to i32*
  %579 = load i32, i32* %578
  %580 = add i32 %579, 1
  %581 = inttoptr i64 %2350 to i32*
  store i32 %580, i32* %581
  %582 = add i64 %2033, -13
  br label %block_401926

block_400f2e:                                     ; preds = %block_400f8b, %block_400efb
  %583 = phi i64 [ %871, %block_400efb ], [ %1104, %block_400f8b ]
  %584 = phi %struct.Memory* [ %858, %block_400efb ], [ %1099, %block_400f8b ]
  %585 = inttoptr i64 %870 to i32*
  %586 = load i32, i32* %585
  %587 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %588 = sub i32 %586, %587
  %589 = lshr i32 %588, 31
  %590 = trunc i32 %589 to i8
  %591 = lshr i32 %586, 31
  %592 = lshr i32 %587, 31
  %593 = xor i32 %592, %591
  %594 = xor i32 %589, %591
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = icmp ne i8 %590, 0
  %598 = xor i1 %597, %596
  %599 = select i1 %598, i64 19, i64 118
  %600 = add i64 %583, %599
  br i1 %598, label %block_400f41, label %block_400fa4

block_402754:                                     ; preds = %block_402747
  %601 = inttoptr i64 %2224 to i32*
  %602 = load i32, i32* %601
  %603 = sext i32 %602 to i64
  %604 = shl nsw i64 %603, 4
  %605 = add i64 %604, %2093
  %606 = add i64 %605, 8
  %607 = inttoptr i64 %606 to i32*
  %608 = load i32, i32* %607
  %609 = add i64 %654, 30
  %610 = inttoptr i64 %2092 to i32*
  store i32 %608, i32* %610
  br label %block_4027dc

block_401762:                                     ; preds = %block_40176f, %block_401762.preheader
  %611 = phi i64 [ %1944, %block_40176f ], [ %1595, %block_401762.preheader ]
  %612 = phi %struct.Memory* [ %612, %block_40176f ], [ %1581, %block_401762.preheader ]
  %613 = inttoptr i64 %809 to i32*
  %614 = load i32, i32* %613
  %615 = add i32 %614, -7
  %616 = lshr i32 %615, 31
  %617 = trunc i32 %616 to i8
  %618 = lshr i32 %614, 31
  %619 = xor i32 %616, %618
  %620 = add nuw nsw i32 %619, %618
  %621 = icmp eq i32 %620, 2
  %622 = icmp ne i8 %617, 0
  %623 = xor i1 %622, %621
  %624 = select i1 %623, i64 13, i64 119
  %625 = add i64 %611, %624
  br i1 %623, label %block_40176f, label %block_4017d9

block_40292b:                                     ; preds = %block_40291e
  %626 = add i64 %657, 10
  %627 = inttoptr i64 %2089 to i32*
  store i32 0, i32* %627
  br label %block_402935

block_4015dc:                                     ; preds = %block_40167c, %block_401507
  %628 = phi i64 [ %807, %block_401507 ], [ %1964, %block_40167c ]
  %629 = phi %struct.Memory* [ %1752, %block_401507 ], [ %62, %block_40167c ]
  %630 = inttoptr i64 %806 to i32*
  %631 = load i32, i32* %630
  %632 = add i32 %631, -7
  %633 = lshr i32 %632, 31
  %634 = trunc i32 %633 to i8
  %635 = lshr i32 %631, 31
  %636 = xor i32 %633, %635
  %637 = add nuw nsw i32 %636, %635
  %638 = icmp eq i32 %637, 2
  %639 = icmp ne i8 %634, 0
  %640 = xor i1 %639, %638
  %641 = select i1 %640, i64 13, i64 185
  %642 = add i64 %628, %641
  br i1 %640, label %block_4015e9, label %block_401695

block_402725:                                     ; preds = %block_4026ea
  %643 = inttoptr i64 %2224 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  %646 = shl nsw i64 %645, 4
  %647 = add i64 %646, %2093
  %648 = inttoptr i64 %647 to i32*
  %649 = load i32, i32* %648
  %650 = add i64 %2588, 29
  %651 = inttoptr i64 %2092 to i32*
  store i32 %649, i32* %651
  br label %block_4027e1

block_402747:                                     ; preds = %block_4026ea
  %652 = icmp ne i32 %2585, 1
  %653 = select i1 %652, i64 48, i64 13
  %654 = add i64 %2588, %653
  br i1 %652, label %block_402777, label %block_402754

block_40291e:                                     ; preds = %block_4026c6
  %655 = icmp ne i32 %133, 0
  %656 = select i1 %655, i64 109, i64 13
  %657 = add i64 %1083, %656
  br i1 %655, label %block_40298b, label %block_40292b

block_402394:                                     ; preds = %block_402387
  %658 = inttoptr i64 %2096 to i32*
  %659 = load i32, i32* %658
  %660 = sext i32 %659 to i64
  %661 = mul nsw i64 %660, 48
  %662 = add i64 %661, ptrtoint (%ijel_type* @ijel to i64)
  %663 = inttoptr i64 %2224 to i32*
  %664 = load i32, i32* %663
  %665 = sext i32 %664 to i64
  %666 = shl nsw i64 %665, 3
  %667 = add i64 %666, %662
  %668 = inttoptr i64 %667 to i32*
  store i32 0, i32* %668
  %669 = inttoptr i64 %2089 to i32*
  %670 = load i32, i32* %669
  %671 = sext i32 %670 to i64
  %672 = shl nsw i64 %671, 2
  %673 = add i64 %2091, %672
  %674 = inttoptr i64 %673 to i32*
  %675 = load i32, i32* %674
  %676 = sext i32 %675 to i64
  %677 = mul nsw i64 %676, 48
  %678 = inttoptr i64 %2224 to i32*
  %679 = load i32, i32* %678
  %680 = sext i32 %679 to i64
  %681 = shl nsw i64 %680, 3
  %682 = add i64 %677, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %683 = add i64 %682, %681
  %684 = inttoptr i64 %683 to i32*
  store i32 1, i32* %684
  %685 = inttoptr i64 %2089 to i32*
  %686 = load i32, i32* %685
  %687 = sext i32 %686 to i64
  %688 = shl nsw i64 %687, 2
  %689 = add i64 %2091, %688
  %690 = inttoptr i64 %689 to i32*
  %691 = load i32, i32* %690
  %692 = inttoptr i64 %2092 to i32*
  %693 = load i32, i32* %692
  %694 = sext i32 %693 to i64
  %695 = mul nsw i64 %694, 96
  %696 = add i64 %695, ptrtoint (%sje_type* @sje to i64)
  %697 = inttoptr i64 %2086 to i32*
  %698 = load i32, i32* %697
  %699 = sext i32 %698 to i64
  %700 = shl nsw i64 %699, 4
  %701 = add i64 %700, %696
  %702 = or i64 %701, 8
  %703 = add i64 %2458, 141
  %704 = inttoptr i64 %702 to i32*
  store i32 %691, i32* %704
  br label %block_402569

block_402919:                                     ; preds = %block_4026dd
  %705 = add i64 %1030, 119
  br label %block_402995

block_402285:                                     ; preds = %block_402278
  %706 = sext i32 %1968 to i64
  %707 = shl nsw i64 %706, 2
  %708 = add i64 %2091, %707
  %709 = inttoptr i64 %708 to i32*
  %710 = load i32, i32* %709
  %711 = sext i32 %710 to i64
  %712 = mul nsw i64 %711, 24
  %713 = add i64 %712, ptrtoint (%cbc_type* @cbc to i64)
  %714 = inttoptr i64 %2224 to i32*
  %715 = load i32, i32* %714
  %716 = sext i32 %715 to i64
  %717 = shl nsw i64 %716, 2
  %718 = add i64 %717, %713
  %719 = inttoptr i64 %718 to i32*
  store i32 1, i32* %719
  %720 = inttoptr i64 %2092 to i32*
  %721 = load i32, i32* %720
  %722 = inttoptr i64 %2089 to i32*
  %723 = load i32, i32* %722
  %724 = sext i32 %723 to i64
  %725 = shl nsw i64 %724, 2
  %726 = add i64 %2091, %725
  %727 = inttoptr i64 %726 to i32*
  %728 = load i32, i32* %727
  %729 = sext i32 %728 to i64
  %730 = mul nsw i64 %729, 96
  %731 = add i64 %730, ptrtoint (%sje_type* @sje to i64)
  %732 = inttoptr i64 %2224 to i32*
  %733 = load i32, i32* %732
  %734 = sext i32 %733 to i64
  %735 = shl nsw i64 %734, 4
  %736 = add i64 %735, %731
  %737 = inttoptr i64 %736 to i32*
  store i32 %721, i32* %737
  %738 = inttoptr i64 %2089 to i32*
  %739 = load i32, i32* %738
  %740 = icmp ne i32 %739, 0
  %741 = select i1 %740, i64 258, i64 113
  %742 = add i64 %1978, %741
  br i1 %740, label %block_402387, label %block_4022f6

block_401507:                                     ; preds = %block_4014a8
  %743 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %743, double* %1729, align 1, !tbaa !1246
  %744 = add i64 %1751, -80
  %745 = inttoptr i64 %744 to double*
  %746 = load double, double* %745
  %747 = add i64 %1751, -72
  %748 = inttoptr i64 %747 to double*
  %749 = load double, double* %748
  %750 = fsub double %749, %746
  %751 = fdiv double %750, %743
  %752 = fadd double %751, %746
  %753 = add i64 %1751, -1272
  %754 = inttoptr i64 %753 to double*
  store double %752, double* %754
  %755 = inttoptr i64 %744 to double*
  %756 = load double, double* %755
  %757 = add i64 %1751, -216
  %758 = inttoptr i64 %757 to double*
  store double %756, double* %758
  %759 = inttoptr i64 %747 to double*
  %760 = load double, double* %759
  %761 = add i64 %1751, -224
  %762 = inttoptr i64 %761 to double*
  store double %760, double* %762
  %763 = add i64 %1751, -144
  %764 = inttoptr i64 %763 to double*
  %765 = load double, double* %764
  %766 = add i64 %1751, -128
  %767 = inttoptr i64 %766 to double*
  %768 = load double, double* %767
  %769 = fsub double %768, %765
  %770 = fdiv double %769, %743
  %771 = fadd double %770, %765
  %772 = add i64 %1751, -1280
  %773 = inttoptr i64 %772 to double*
  store double %771, double* %773
  %774 = inttoptr i64 %763 to double*
  %775 = load double, double* %774
  %776 = add i64 %1751, -232
  %777 = inttoptr i64 %776 to double*
  store double %775, double* %777
  %778 = inttoptr i64 %766 to double*
  %779 = load double, double* %778
  %780 = add i64 %1751, -240
  %781 = inttoptr i64 %780 to double*
  store double %779, double* %781
  %782 = add i64 %1751, -208
  %783 = inttoptr i64 %782 to double*
  %784 = load double, double* %783
  %785 = load i64, i64* %12, align 8
  %786 = add i64 %785, -176
  %787 = inttoptr i64 %786 to double*
  %788 = load double, double* %787
  %789 = add i64 %785, -208
  %790 = inttoptr i64 %789 to double*
  %791 = load double, double* %790
  %792 = fsub double %788, %791
  %793 = load double, double* %1729, align 1
  %794 = fdiv double %792, %793
  store double %794, double* %1733, align 1, !tbaa !1246
  store i64 0, i64* %1734, align 1, !tbaa !1246
  %795 = fadd double %794, %784
  store double %795, double* %1731, align 1, !tbaa !1246
  store i64 0, i64* %1732, align 1, !tbaa !1246
  %796 = add i64 %785, -1288
  %797 = inttoptr i64 %796 to double*
  store double %795, double* %797
  %798 = inttoptr i64 %789 to double*
  %799 = load double, double* %798
  %800 = add i64 %785, -248
  %801 = inttoptr i64 %800 to double*
  store double %799, double* %801
  %802 = inttoptr i64 %786 to double*
  %803 = load double, double* %802
  store double %803, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %804 = add i64 %785, -256
  %805 = inttoptr i64 %804 to double*
  store double %803, double* %805
  %806 = add i64 %785, -1300
  %807 = add i64 %1766, 213
  %808 = inttoptr i64 %806 to i32*
  store i32 0, i32* %808
  %809 = add i64 %785, -1296
  %810 = add i64 %785, -1272
  %811 = add i64 %785, -224
  br label %block_4015dc

block_401d04:                                     ; preds = %block_401c8d
  %812 = add i64 %477, 10
  %813 = inttoptr i64 %2224 to i32*
  store i32 2, i32* %813
  br label %block_401d0e

block_401db3:                                     ; preds = %block_401da6
  %814 = inttoptr i64 %348 to double*
  %815 = load double, double* %814
  %816 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %817 = inttoptr i64 %2221 to i32*
  %818 = load i32, i32* %817
  %819 = add i32 %818, %816
  %820 = sext i32 %819 to i64
  %821 = shl nsw i64 %820, 6
  %822 = add i64 %821, ptrtoint (%zc_type* @zc to i64)
  %823 = sext i32 %1087 to i64
  %824 = shl nsw i64 %823, 3
  %825 = add i64 %824, %822
  %826 = inttoptr i64 %825 to double*
  store double %815, double* %826
  %827 = inttoptr i64 %349 to double*
  %828 = load double, double* %827
  store double %828, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %829 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %830 = inttoptr i64 %2221 to i32*
  %831 = load i32, i32* %830
  %832 = add i32 %831, %829
  %833 = sext i32 %832 to i64
  %834 = shl nsw i64 %833, 6
  %835 = add i64 %834, ptrtoint (%zc_type* @zc to i64)
  %836 = inttoptr i64 %2224 to i32*
  %837 = load i32, i32* %836
  %838 = add i32 %837, 4
  %839 = sext i32 %838 to i64
  %840 = shl nsw i64 %839, 3
  %841 = add i64 %835, %840
  %842 = inttoptr i64 %841 to double*
  store double %828, double* %842
  %843 = inttoptr i64 %2224 to i32*
  %844 = load i32, i32* %843
  %845 = add i32 %844, 1
  %846 = inttoptr i64 %2224 to i32*
  store i32 %845, i32* %846
  %847 = add i64 %1097, -13
  br label %block_401da6

block_400efb:                                     ; preds = %block_400e89
  %848 = zext i32 %1889 to i64
  store i64 %848, i64* %6, align 8, !tbaa !1240
  %849 = bitcast %union.anon* %4 to i32*
  %850 = bitcast %union.anon* %5 to i32*
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  store i64 ptrtoint (%front_type* @front to i64), i64* %10, align 8, !tbaa !1240
  %853 = add i64 %1903, 126501
  %854 = add i64 %1903, 15
  %855 = load i64, i64* %11, align 8, !tbaa !1240
  %856 = add i64 %855, -8
  %857 = inttoptr i64 %856 to i64*
  store i64 %854, i64* %857
  store i64 %856, i64* %11, align 8, !tbaa !1240
  %858 = tail call %struct.Memory* @sub_41fd20_parallel_add(%struct.State* nonnull %0, i64 %853, %struct.Memory* %1887)
  %859 = load i64, i64* %3, align 8
  %860 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %861 = add i32 %860, -1
  %862 = sext i32 %861 to i64
  store i64 %862, i64* %10, align 8, !tbaa !1240
  %863 = shl nsw i64 %862, 2
  %864 = add i64 %863, ptrtoint (%front_type* @front to i64)
  %865 = inttoptr i64 %864 to i32*
  %866 = load i32, i32* %865
  %867 = load i64, i64* %12, align 8
  %868 = add i64 %867, -1372
  %869 = inttoptr i64 %868 to i32*
  store i32 %866, i32* %869
  %870 = add i64 %867, -1368
  %871 = add i64 %859, 36
  %872 = inttoptr i64 %870 to i32*
  store i32 0, i32* %872
  %873 = add i64 %867, -1292
  br label %block_400f2e

block_401d1b:                                     ; preds = %block_401d0e
  %874 = inttoptr i64 %2225 to double*
  %875 = load double, double* %874
  %876 = inttoptr i64 %1997 to i32*
  %877 = load i32, i32* %876
  %878 = sext i32 %877 to i64
  %879 = shl nsw i64 %878, 6
  %880 = add i64 %879, ptrtoint (%yc_type* @yc to i64)
  %881 = sext i32 %2117 to i64
  %882 = shl nsw i64 %881, 3
  %883 = add i64 %882, %880
  %884 = inttoptr i64 %883 to double*
  store double %875, double* %884
  %885 = inttoptr i64 %2225 to double*
  %886 = load double, double* %885
  store double %886, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %887 = inttoptr i64 %1997 to i32*
  %888 = load i32, i32* %887
  %889 = sext i32 %888 to i64
  %890 = shl nsw i64 %889, 6
  %891 = add i64 %890, ptrtoint (%yc_type* @yc to i64)
  %892 = inttoptr i64 %2224 to i32*
  %893 = load i32, i32* %892
  %894 = add i32 %893, 4
  %895 = sext i32 %894 to i64
  %896 = shl nsw i64 %895, 3
  %897 = add i64 %891, %896
  %898 = inttoptr i64 %897 to double*
  store double %886, double* %898
  %899 = inttoptr i64 %2224 to i32*
  %900 = load i32, i32* %899
  %901 = add i32 %900, 1
  %902 = inttoptr i64 %2224 to i32*
  store i32 %901, i32* %902
  %903 = add i64 %2128, -13
  br label %block_401d0e

block_401ef2:                                     ; preds = %block_401e69
  %904 = inttoptr i64 %2221 to i32*
  %905 = load i32, i32* %904
  %906 = add i32 %905, 1
  %907 = inttoptr i64 %2221 to i32*
  store i32 %906, i32* %907
  %908 = add i64 %2018, -160
  br label %block_401e52

block_400fc1:                                     ; preds = %block_400fae
  %909 = sext i32 %2442 to i64
  %910 = shl nsw i64 %909, 2
  %911 = add i64 %910, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %912 = inttoptr i64 %911 to i32*
  %913 = load i32, i32* %912
  %914 = inttoptr i64 %873 to i32*
  store i32 %913, i32* %914
  %915 = inttoptr i64 %873 to i32*
  %916 = load i32, i32* %915
  %917 = sext i32 %916 to i64
  %918 = shl nsw i64 %917, 2
  %919 = add i64 %918, ptrtoint (%ich_type* @ich to i64)
  %920 = inttoptr i64 %919 to i32*
  %921 = load i32, i32* %920
  %922 = icmp ne i32 %921, 4
  %923 = select i1 %922, i64 90, i64 41
  %924 = add i64 %2455, %923
  %925 = inttoptr i64 %870 to i32*
  %926 = load i32, i32* %925
  %927 = sext i32 %926 to i64
  %928 = shl nsw i64 %927, 2
  %929 = add i64 %928, ptrtoint (%front_type* @front to i64)
  %930 = inttoptr i64 %929 to i32*
  %931 = load i32, i32* %930
  %932 = mul i32 %931, 7
  br i1 %922, label %block_40101b, label %block_400fea

block_4020ed:                                     ; preds = %block_4020e0
  %933 = sext i32 %1006 to i64
  %934 = shl nsw i64 %933, 2
  %935 = add i64 %2090, %934
  %936 = inttoptr i64 %935 to i32*
  %937 = load i32, i32* %936
  %938 = sext i32 %937 to i64
  %939 = mul nsw i64 %938, 24
  %940 = add i64 %939, ptrtoint (%cbc_type* @cbc to i64)
  %941 = inttoptr i64 %2224 to i32*
  %942 = load i32, i32* %941
  %943 = sext i32 %942 to i64
  %944 = shl nsw i64 %943, 2
  %945 = add i64 %944, %940
  %946 = inttoptr i64 %945 to i32*
  store i32 2, i32* %946
  %947 = inttoptr i64 %2089 to i32*
  %948 = load i32, i32* %947
  %949 = sext i32 %948 to i64
  %950 = shl nsw i64 %949, 2
  %951 = add i64 %2091, %950
  %952 = inttoptr i64 %951 to i32*
  %953 = load i32, i32* %952
  %954 = add i64 %2090, %950
  %955 = inttoptr i64 %954 to i32*
  %956 = load i32, i32* %955
  %957 = sext i32 %956 to i64
  %958 = mul nsw i64 %957, 96
  %959 = add i64 %958, ptrtoint (%sje_type* @sje to i64)
  %960 = inttoptr i64 %2224 to i32*
  %961 = load i32, i32* %960
  %962 = sext i32 %961 to i64
  %963 = shl nsw i64 %962, 4
  %964 = add i64 %963, %959
  %965 = inttoptr i64 %964 to i32*
  store i32 %953, i32* %965
  %966 = inttoptr i64 %2089 to i32*
  %967 = load i32, i32* %966
  %968 = sext i32 %967 to i64
  %969 = shl nsw i64 %968, 2
  %970 = add i64 %2090, %969
  %971 = inttoptr i64 %970 to i32*
  %972 = load i32, i32* %971
  %973 = sext i32 %972 to i64
  %974 = mul nsw i64 %973, 48
  %975 = add i64 %974, ptrtoint (%ijel_type* @ijel to i64)
  %976 = inttoptr i64 %2224 to i32*
  %977 = load i32, i32* %976
  %978 = sext i32 %977 to i64
  %979 = shl nsw i64 %978, 3
  %980 = add i64 %979, %975
  %981 = inttoptr i64 %980 to i32*
  store i32 0, i32* %981
  %982 = inttoptr i64 %2089 to i32*
  %983 = load i32, i32* %982
  %984 = sext i32 %983 to i64
  %985 = shl nsw i64 %984, 2
  %986 = add i64 %2090, %985
  %987 = inttoptr i64 %986 to i32*
  %988 = load i32, i32* %987
  %989 = sext i32 %988 to i64
  %990 = mul nsw i64 %989, 48
  %991 = inttoptr i64 %2224 to i32*
  %992 = load i32, i32* %991
  %993 = sext i32 %992 to i64
  %994 = shl nsw i64 %993, 3
  %995 = add i64 %990, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %996 = add i64 %995, %994
  %997 = inttoptr i64 %996 to i32*
  store i32 0, i32* %997
  %998 = inttoptr i64 %2089 to i32*
  %999 = load i32, i32* %998
  %1000 = add i32 %999, 1
  %1001 = inttoptr i64 %2089 to i32*
  store i32 %1000, i32* %1001
  %1002 = add i64 %1016, -13
  br label %block_4020e0

block_4020e0:                                     ; preds = %block_4020d6, %block_4020ed
  %1003 = phi i64 [ %1033, %block_4020d6 ], [ %1002, %block_4020ed ]
  %1004 = phi %struct.Memory* [ %1032, %block_4020d6 ], [ %1004, %block_4020ed ]
  %1005 = inttoptr i64 %2089 to i32*
  %1006 = load i32, i32* %1005
  %1007 = add i32 %1006, -4
  %1008 = lshr i32 %1007, 31
  %1009 = lshr i32 %1006, 31
  %1010 = xor i32 %1008, %1009
  %1011 = add nuw nsw i32 %1010, %1009
  %1012 = icmp eq i32 %1011, 2
  %1013 = icmp ne i32 %1008, 0
  %1014 = xor i1 %1013, %1012
  %1015 = select i1 %1014, i64 13, i64 227
  %1016 = add i64 %1003, %1015
  br i1 %1014, label %block_4020ed, label %block_4021c3

block_4026dd:                                     ; preds = %block_4027e1, %block_4026d3
  %1017 = phi i64 [ %1035, %block_4026d3 ], [ %2343, %block_4027e1 ]
  %1018 = phi %struct.Memory* [ %1004, %block_4026d3 ], [ %2233, %block_4027e1 ]
  %1019 = inttoptr i64 %2089 to i32*
  %1020 = load i32, i32* %1019
  %1021 = add i32 %1020, -4
  %1022 = lshr i32 %1021, 31
  %1023 = lshr i32 %1020, 31
  %1024 = xor i32 %1022, %1023
  %1025 = add nuw nsw i32 %1024, %1023
  %1026 = icmp eq i32 %1025, 2
  %1027 = icmp ne i32 %1022, 0
  %1028 = xor i1 %1027, %1026
  %1029 = select i1 %1028, i64 13, i64 572
  %1030 = add i64 %1017, %1029
  br i1 %1028, label %block_4026ea, label %block_402919

block_4020d6:                                     ; preds = %block_4020b9, %block_4020ca
  %1031 = phi i64 [ %1073, %block_4020ca ], [ %1367, %block_4020b9 ]
  %1032 = phi %struct.Memory* [ %2622, %block_4020ca ], [ %2622, %block_4020b9 ]
  %1033 = add i64 %1031, 10
  %1034 = inttoptr i64 %2089 to i32*
  store i32 0, i32* %1034
  br label %block_4020e0

block_4026d3:                                     ; preds = %block_4026c6
  %1035 = add i64 %1083, 10
  %1036 = inttoptr i64 %2089 to i32*
  store i32 0, i32* %1036
  br label %block_4026dd

block_400ed0:                                     ; preds = %block_400e9c
  %1037 = add i64 %1814, 18
  %1038 = inttoptr i64 %1815 to i32*
  store i32 1, i32* %1038
  br label %block_400ee2

block_401e76:                                     ; preds = %block_401e69
  %1039 = inttoptr i64 %349 to double*
  %1040 = load double, double* %1039
  %1041 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1042 = inttoptr i64 %2221 to i32*
  %1043 = load i32, i32* %1042
  %1044 = add i32 %1043, %1041
  %1045 = sext i32 %1044 to i64
  %1046 = shl nsw i64 %1045, 6
  %1047 = add i64 %1046, ptrtoint (%zc_type* @zc to i64)
  %1048 = sext i32 %2008 to i64
  %1049 = shl nsw i64 %1048, 3
  %1050 = add i64 %1049, %1047
  %1051 = inttoptr i64 %1050 to double*
  store double %1040, double* %1051
  %1052 = inttoptr i64 %2131 to double*
  %1053 = load double, double* %1052
  store double %1053, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1054 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1055 = inttoptr i64 %2221 to i32*
  %1056 = load i32, i32* %1055
  %1057 = add i32 %1056, %1054
  %1058 = sext i32 %1057 to i64
  %1059 = shl nsw i64 %1058, 6
  %1060 = add i64 %1059, ptrtoint (%zc_type* @zc to i64)
  %1061 = inttoptr i64 %2224 to i32*
  %1062 = load i32, i32* %1061
  %1063 = add i32 %1062, 4
  %1064 = sext i32 %1063 to i64
  %1065 = shl nsw i64 %1064, 3
  %1066 = add i64 %1060, %1065
  %1067 = inttoptr i64 %1066 to double*
  store double %1053, double* %1067
  %1068 = inttoptr i64 %2224 to i32*
  %1069 = load i32, i32* %1068
  %1070 = add i32 %1069, 1
  %1071 = inttoptr i64 %2224 to i32*
  store i32 %1070, i32* %1071
  %1072 = add i64 %2018, -13
  br label %block_401e69

block_4020ca:                                     ; preds = %block_4020ac
  %1073 = add i64 %1712, 12
  %1074 = inttoptr i64 %2091 to i32*
  store i32 %1714, i32* %1074
  br label %block_4020d6

block_40258c:                                     ; preds = %block_4021d0
  %1075 = add i64 %339, ptrtoint (%ref_front_id_type* @ref_front_id to i64)
  %1076 = inttoptr i64 %1075 to i32*
  %1077 = load i32, i32* %1076
  %1078 = inttoptr i64 %2094 to i32*
  store i32 %1077, i32* %1078
  %1079 = add i64 %345, 30
  %1080 = inttoptr i64 %2089 to i32*
  store i32 0, i32* %1080
  br label %block_4025aa

block_4026c6:                                     ; preds = %block_4021c3
  %1081 = icmp ne i32 %133, 3
  %1082 = select i1 %1081, i64 600, i64 13
  %1083 = add i64 %136, %1082
  br i1 %1081, label %block_40291e, label %block_4026d3

block_401da6:                                     ; preds = %block_401db3, %block_401d9c
  %1084 = phi i64 [ %261, %block_401d9c ], [ %847, %block_401db3 ]
  %1085 = phi %struct.Memory* [ %282, %block_401d9c ], [ %1085, %block_401db3 ]
  %1086 = inttoptr i64 %2224 to i32*
  %1087 = load i32, i32* %1086
  %1088 = add i32 %1087, -4
  %1089 = lshr i32 %1088, 31
  %1090 = lshr i32 %1087, 31
  %1091 = xor i32 %1089, %1090
  %1092 = add nuw nsw i32 %1091, %1090
  %1093 = icmp eq i32 %1092, 2
  %1094 = icmp ne i32 %1089, 0
  %1095 = xor i1 %1094, %1093
  %1096 = select i1 %1095, i64 13, i64 137
  %1097 = add i64 %1084, %1096
  br i1 %1095, label %block_401db3, label %block_401e2f

block_400f8b:                                     ; preds = %block_400f41, %block_400f6a
  %1098 = phi i64 [ %2650, %block_400f41 ], [ %361, %block_400f6a ]
  %1099 = phi %struct.Memory* [ %584, %block_400f41 ], [ %584, %block_400f6a ]
  %1100 = inttoptr i64 %870 to i32*
  %1101 = load i32, i32* %1100
  %1102 = add i32 %1101, 1
  %1103 = inttoptr i64 %870 to i32*
  store i32 %1102, i32* %1103
  %1104 = add i64 %1098, -93
  br label %block_400f2e

block_4010c5:                                     ; preds = %block_4010b3
  store i64 8, i64* %8, align 8, !tbaa !1240
  store i64 ptrtoint (%xc_type* @xc to i64), i64* %6, align 8, !tbaa !1240
  %1105 = add i64 %1666, -80
  store i64 %1105, i64* %10, align 8, !tbaa !1240
  %1106 = sext i32 %1670 to i64
  %1107 = shl nsw i64 %1106, 2
  %1108 = add i64 %1107, ptrtoint (%action_type* @action to i64)
  %1109 = inttoptr i64 %1108 to i32*
  %1110 = load i32, i32* %1109
  %1111 = add i64 %1666, -1368
  %1112 = inttoptr i64 %1111 to i32*
  store i32 %1110, i32* %1112
  %1113 = inttoptr i64 %1111 to i32*
  %1114 = load i32, i32* %1113
  %1115 = sext i32 %1114 to i64
  %1116 = shl nsw i64 %1115, 2
  %1117 = add i64 %1116, ptrtoint (%front_type* @front to i64)
  %1118 = inttoptr i64 %1117 to i32*
  %1119 = load i32, i32* %1118
  %1120 = mul i32 %1119, 7
  %1121 = add i32 %1120, -7
  %1122 = add i32 %1121, %1114
  %1123 = load i64, i64* %12, align 8
  %1124 = add i64 %1123, -1364
  %1125 = inttoptr i64 %1124 to i32*
  store i32 %1122, i32* %1125
  %1126 = add i64 %1123, -1368
  %1127 = inttoptr i64 %1126 to i32*
  %1128 = load i32, i32* %1127
  %1129 = sext i32 %1128 to i64
  %1130 = shl nsw i64 %1129, 2
  %1131 = add i64 %1130, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %1132 = inttoptr i64 %1131 to i32*
  %1133 = load i32, i32* %1132
  %1134 = add i64 %1123, -1292
  %1135 = inttoptr i64 %1134 to i32*
  store i32 %1133, i32* %1135
  %1136 = add i64 %1123, -1548
  %1137 = inttoptr i64 %1136 to i32*
  %1138 = load i32, i32* %1137
  %1139 = inttoptr i64 %1126 to i32*
  %1140 = load i32, i32* %1139
  %1141 = sext i32 %1140 to i64
  %1142 = shl nsw i64 %1141, 2
  %1143 = add i64 %1142, ptrtoint (%front_type* @front to i64)
  %1144 = inttoptr i64 %1143 to i32*
  %1145 = load i32, i32* %1144
  %1146 = add i32 %1145, -1
  %1147 = sext i32 %1146 to i64
  %1148 = mul nsw i64 %1147, 7
  %1149 = and i64 %1148, 4294967295
  store i64 %1149, i64* %13, align 8, !tbaa !1240
  %1150 = trunc i64 %1148 to i32
  %1151 = add i32 %1150, %1138
  store i32 %1151, i32* bitcast (%nelt_type* @nelt to i32*)
  %1152 = load i64, i64* %12, align 8
  %1153 = add i64 %1152, -1292
  %1154 = inttoptr i64 %1153 to i32*
  %1155 = load i32, i32* %1154
  %1156 = sext i32 %1155 to i64
  %1157 = shl nsw i64 %1156, 2
  %1158 = add i64 %1157, ptrtoint (%tree_type* @tree to i64)
  %1159 = inttoptr i64 %1158 to i32*
  %1160 = load i32, i32* %1159
  %1161 = add i64 %1152, -1380
  %1162 = inttoptr i64 %1161 to i32*
  store i32 %1160, i32* %1162
  %1163 = inttoptr i64 %1153 to i32*
  %1164 = load i32, i32* %1163
  %1165 = sext i32 %1164 to i64
  %1166 = shl nsw i64 %1165, 6
  store i64 %1166, i64* %7, align 8, !tbaa !1240
  %1167 = load i64, i64* %6, align 8
  %1168 = add i64 %1166, %1167
  store i64 %1168, i64* %9, align 8, !tbaa !1240
  %1169 = add i64 %1686, 125099
  %1170 = add i64 %1686, 178
  %1171 = load i64, i64* %11, align 8, !tbaa !1240
  %1172 = add i64 %1171, -8
  %1173 = inttoptr i64 %1172 to i64*
  store i64 %1170, i64* %1173
  store i64 %1172, i64* %11, align 8, !tbaa !1240
  %1174 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %1169, %struct.Memory* %1667)
  %1175 = load i64, i64* %3, align 8
  store i64 8, i64* %8, align 8, !tbaa !1240
  %1176 = load i64, i64* %12, align 8
  %1177 = add i64 %1176, -144
  store i64 %1177, i64* %10, align 8, !tbaa !1240
  %1178 = add i64 %1176, -1292
  %1179 = inttoptr i64 %1178 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  %1182 = shl nsw i64 %1181, 6
  store i64 %1182, i64* %7, align 8, !tbaa !1240
  %1183 = add i64 %1182, ptrtoint (%yc_type* @yc to i64)
  store i64 %1183, i64* %9, align 8, !tbaa !1240
  %1184 = add i64 %1175, 124921
  %1185 = add i64 %1175, 44
  %1186 = load i64, i64* %11, align 8, !tbaa !1240
  %1187 = add i64 %1186, -8
  %1188 = inttoptr i64 %1187 to i64*
  store i64 %1185, i64* %1188
  store i64 %1187, i64* %11, align 8, !tbaa !1240
  %1189 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %1184, %struct.Memory* %1174)
  %1190 = load i64, i64* %3, align 8
  store i64 8, i64* %8, align 8, !tbaa !1240
  %1191 = load i64, i64* %12, align 8
  %1192 = add i64 %1191, -208
  store i64 %1192, i64* %10, align 8, !tbaa !1240
  %1193 = add i64 %1191, -1292
  %1194 = inttoptr i64 %1193 to i32*
  %1195 = load i32, i32* %1194
  %1196 = sext i32 %1195 to i64
  %1197 = shl nsw i64 %1196, 6
  store i64 %1197, i64* %7, align 8, !tbaa !1240
  %1198 = add i64 %1197, ptrtoint (%zc_type* @zc to i64)
  store i64 %1198, i64* %9, align 8, !tbaa !1240
  %1199 = add i64 %1190, 124877
  %1200 = add i64 %1190, 44
  %1201 = load i64, i64* %11, align 8, !tbaa !1240
  %1202 = add i64 %1201, -8
  %1203 = inttoptr i64 %1202 to i64*
  store i64 %1200, i64* %1203
  store i64 %1202, i64* %11, align 8, !tbaa !1240
  %1204 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %1199, %struct.Memory* %1189)
  %1205 = load i64, i64* %3, align 8
  store i64 6, i64* %8, align 8, !tbaa !1240
  %1206 = load i64, i64* %12, align 8
  %1207 = add i64 %1206, -1584
  store i64 %1207, i64* %10, align 8, !tbaa !1240
  %1208 = add i64 %1206, -1292
  %1209 = inttoptr i64 %1208 to i32*
  %1210 = load i32, i32* %1209
  %1211 = sext i32 %1210 to i64
  %1212 = mul nsw i64 %1211, 24
  store i64 %1212, i64* %7, align 8, !tbaa !1240
  %1213 = add i64 %1212, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %1213, i64* %9, align 8, !tbaa !1240
  %1214 = add i64 %1205, 124753
  %1215 = add i64 %1205, 44
  %1216 = load i64, i64* %11, align 8, !tbaa !1240
  %1217 = add i64 %1216, -8
  %1218 = inttoptr i64 %1217 to i64*
  store i64 %1215, i64* %1218
  store i64 %1217, i64* %11, align 8, !tbaa !1240
  %1219 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %1214, %struct.Memory* %1204)
  %1220 = load i64, i64* %3, align 8
  store i64 12, i64* %8, align 8, !tbaa !1240
  %1221 = load i64, i64* %12, align 8
  %1222 = add i64 %1221, -1440
  store i64 %1222, i64* %7, align 8, !tbaa !1240
  %1223 = add i64 %1221, -1292
  %1224 = inttoptr i64 %1223 to i32*
  %1225 = load i32, i32* %1224
  %1226 = sext i32 %1225 to i64
  %1227 = mul nsw i64 %1226, 48
  %1228 = add i64 %1227, ptrtoint (%ijel_type* @ijel to i64)
  store i64 %1222, i64* %10, align 8, !tbaa !1240
  store i64 %1228, i64* %9, align 8, !tbaa !1240
  %1229 = add i64 %1220, 124709
  %1230 = add i64 %1220, 47
  %1231 = load i64, i64* %11, align 8, !tbaa !1240
  %1232 = add i64 %1231, -8
  %1233 = inttoptr i64 %1232 to i64*
  store i64 %1230, i64* %1233
  store i64 %1232, i64* %11, align 8, !tbaa !1240
  %1234 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %1229, %struct.Memory* %1219)
  %1235 = load i64, i64* %3, align 8
  store i64 24, i64* %8, align 8, !tbaa !1240
  %1236 = load i64, i64* %12, align 8
  %1237 = add i64 %1236, -1536
  store i64 %1237, i64* %7, align 8, !tbaa !1240
  %1238 = add i64 %1236, -1292
  %1239 = inttoptr i64 %1238 to i32*
  %1240 = load i32, i32* %1239
  %1241 = sext i32 %1240 to i64
  %1242 = mul nsw i64 %1241, 96
  %1243 = add i64 %1242, ptrtoint (%sje_type* @sje to i64)
  store i64 %1237, i64* %10, align 8, !tbaa !1240
  store i64 %1243, i64* %9, align 8, !tbaa !1240
  %1244 = add i64 %1235, 124662
  %1245 = add i64 %1235, 47
  %1246 = load i64, i64* %11, align 8, !tbaa !1240
  %1247 = add i64 %1246, -8
  %1248 = inttoptr i64 %1247 to i64*
  store i64 %1245, i64* %1248
  store i64 %1247, i64* %11, align 8, !tbaa !1240
  %1249 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull %0, i64 %1244, %struct.Memory* %1234)
  %1250 = load i64, i64* %3, align 8
  store i64 125, i64* %8, align 8, !tbaa !1240
  %1251 = load i64, i64* %12, align 8
  %1252 = add i64 %1251, -1264
  store i64 %1252, i64* %7, align 8, !tbaa !1240
  %1253 = add i64 %1251, -1292
  %1254 = inttoptr i64 %1253 to i32*
  %1255 = load i32, i32* %1254
  %1256 = sext i32 %1255 to i64
  %1257 = mul nsw i64 %1256, 1000
  %1258 = add i64 %1257, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %1252, i64* %10, align 8, !tbaa !1240
  store i64 %1258, i64* %9, align 8, !tbaa !1240
  %1259 = add i64 %1250, 124695
  %1260 = add i64 %1250, 50
  %1261 = load i64, i64* %11, align 8, !tbaa !1240
  %1262 = add i64 %1261, -8
  %1263 = inttoptr i64 %1262 to i64*
  store i64 %1260, i64* %1263
  store i64 %1262, i64* %11, align 8, !tbaa !1240
  %1264 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull %0, i64 %1259, %struct.Memory* %1249)
  %1265 = load i64, i64* %3, align 8
  store i64 6, i64* %9, align 8, !tbaa !1240
  store i64 0, i64* %8, align 8, !tbaa !1240
  %1266 = load i64, i64* %12, align 8
  %1267 = add i64 %1266, -1292
  %1268 = inttoptr i64 %1267 to i32*
  %1269 = load i32, i32* %1268
  %1270 = sext i32 %1269 to i64
  %1271 = shl nsw i64 %1270, 2
  %1272 = add i64 %1271, ptrtoint (%tree_type* @tree to i64)
  %1273 = inttoptr i64 %1272 to i32*
  store i32 0, i32* %1273
  %1274 = inttoptr i64 %1267 to i32*
  %1275 = load i32, i32* %1274
  %1276 = sext i32 %1275 to i64
  %1277 = mul nsw i64 %1276, 24
  store i64 %1277, i64* %7, align 8, !tbaa !1240
  %1278 = add i64 %1277, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %1278, i64* %10, align 8, !tbaa !1240
  %1279 = add i64 %1265, 124437
  %1280 = add i64 %1265, 57
  %1281 = load i64, i64* %11, align 8, !tbaa !1240
  %1282 = add i64 %1281, -8
  %1283 = inttoptr i64 %1282 to i64*
  store i64 %1280, i64* %1283
  store i64 %1282, i64* %11, align 8, !tbaa !1240
  %1284 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %1279, %struct.Memory* %1264)
  %1285 = load i64, i64* %3, align 8
  store i64 24, i64* %9, align 8, !tbaa !1240
  store i64 4294967295, i64* %8, align 8, !tbaa !1240
  %1286 = load i64, i64* %12, align 8
  %1287 = add i64 %1286, -1292
  %1288 = inttoptr i64 %1287 to i32*
  %1289 = load i32, i32* %1288
  %1290 = sext i32 %1289 to i64
  %1291 = mul nsw i64 %1290, 96
  store i64 %1291, i64* %7, align 8, !tbaa !1240
  %1292 = add i64 %1291, ptrtoint (%sje_type* @sje to i64)
  store i64 %1292, i64* %10, align 8, !tbaa !1240
  %1293 = add i64 %1285, 124380
  %1294 = add i64 %1285, 42
  %1295 = load i64, i64* %11, align 8, !tbaa !1240
  %1296 = add i64 %1295, -8
  %1297 = inttoptr i64 %1296 to i64*
  store i64 %1294, i64* %1297
  store i64 %1296, i64* %11, align 8, !tbaa !1240
  %1298 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %1293, %struct.Memory* %1284)
  %1299 = load i64, i64* %3, align 8
  store i64 12, i64* %9, align 8, !tbaa !1240
  store i64 4294967295, i64* %8, align 8, !tbaa !1240
  %1300 = load i64, i64* %12, align 8
  %1301 = add i64 %1300, -1292
  %1302 = inttoptr i64 %1301 to i32*
  %1303 = load i32, i32* %1302
  %1304 = sext i32 %1303 to i64
  %1305 = mul nsw i64 %1304, 48
  store i64 %1305, i64* %7, align 8, !tbaa !1240
  %1306 = add i64 %1305, ptrtoint (%ijel_type* @ijel to i64)
  store i64 %1306, i64* %10, align 8, !tbaa !1240
  %1307 = add i64 %1299, 124338
  %1308 = add i64 %1299, 42
  %1309 = load i64, i64* %11, align 8, !tbaa !1240
  %1310 = add i64 %1309, -8
  %1311 = inttoptr i64 %1310 to i64*
  store i64 %1308, i64* %1311
  store i64 %1310, i64* %11, align 8, !tbaa !1240
  %1312 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull %0, i64 %1307, %struct.Memory* %1298)
  %1313 = load i64, i64* %3, align 8
  store i64 125, i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %1722, align 1, !tbaa !1244
  store i32 0, i32* %1724, align 1, !tbaa !1244
  store i32 0, i32* %1725, align 1, !tbaa !1244
  store i32 0, i32* %1727, align 1, !tbaa !1244
  %1314 = load i64, i64* %12, align 8
  %1315 = add i64 %1314, -1292
  %1316 = inttoptr i64 %1315 to i32*
  %1317 = load i32, i32* %1316
  %1318 = sext i32 %1317 to i64
  %1319 = mul nsw i64 %1318, 1000
  store i64 %1319, i64* %7, align 8, !tbaa !1240
  %1320 = add i64 %1319, ptrtoint (%ta1_type* @ta1 to i64)
  store i64 %1320, i64* %10, align 8, !tbaa !1240
  %1321 = add i64 %1313, 124216
  %1322 = add i64 %1313, 43
  %1323 = load i64, i64* %11, align 8, !tbaa !1240
  %1324 = add i64 %1323, -8
  %1325 = inttoptr i64 %1324 to i64*
  store i64 %1322, i64* %1325
  store i64 %1324, i64* %11, align 8, !tbaa !1240
  %1326 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1321, %struct.Memory* %1312)
  %1327 = load i64, i64* %12, align 8
  %1328 = add i64 %1327, -1300
  %1329 = load i64, i64* %3, align 8
  %1330 = add i64 %1329, 10
  %1331 = inttoptr i64 %1328 to i32*
  store i32 0, i32* %1331
  br label %block_40134d

block_4016c3:                                     ; preds = %block_4016b6
  %1332 = inttoptr i64 %1818 to double*
  %1333 = load double, double* %1332
  %1334 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1335 = inttoptr i64 %806 to i32*
  %1336 = load i32, i32* %1335
  %1337 = add i32 %1336, %1334
  %1338 = sext i32 %1337 to i64
  %1339 = shl nsw i64 %1338, 6
  %1340 = add i64 %1339, ptrtoint (%xc_type* @xc to i64)
  %1341 = sext i32 %1463 to i64
  %1342 = shl nsw i64 %1341, 3
  %1343 = add i64 %1342, %1340
  %1344 = inttoptr i64 %1343 to double*
  store double %1333, double* %1344
  %1345 = inttoptr i64 %810 to double*
  %1346 = load double, double* %1345
  store double %1346, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1347 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1348 = inttoptr i64 %806 to i32*
  %1349 = load i32, i32* %1348
  %1350 = add i32 %1349, %1347
  %1351 = sext i32 %1350 to i64
  %1352 = shl nsw i64 %1351, 6
  %1353 = add i64 %1352, ptrtoint (%xc_type* @xc to i64)
  %1354 = inttoptr i64 %809 to i32*
  %1355 = load i32, i32* %1354
  %1356 = add i32 %1355, 1
  %1357 = sext i32 %1356 to i64
  %1358 = shl nsw i64 %1357, 3
  %1359 = add i64 %1353, %1358
  %1360 = inttoptr i64 %1359 to double*
  store double %1346, double* %1360
  %1361 = inttoptr i64 %809 to i32*
  %1362 = load i32, i32* %1361
  %1363 = add i32 %1362, 2
  %1364 = inttoptr i64 %809 to i32*
  store i32 %1363, i32* %1364
  %1365 = add i64 %1473, -13
  br label %block_4016b6

block_4020b9:                                     ; preds = %block_4020ac
  %1366 = inttoptr i64 %2090 to i32*
  store i32 %1714, i32* %1366
  %1367 = add i64 %1712, 29
  br label %block_4020d6

block_4017f0:                                     ; preds = %block_4017e3
  store i64 ptrtoint (%yc_type* @yc to i64), i64* %6, align 8, !tbaa !1240
  %1368 = inttoptr i64 %1579 to double*
  %1369 = load double, double* %1368
  %1370 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1371 = sext i32 %1370 to i64
  %1372 = shl nsw i64 %1371, 6
  %1373 = add i64 %1372, ptrtoint (%yc_type* @yc to i64)
  %1374 = sext i32 %89 to i64
  %1375 = shl nsw i64 %1374, 3
  %1376 = add i64 %1375, %1373
  %1377 = inttoptr i64 %1376 to double*
  store double %1369, double* %1377
  %1378 = inttoptr i64 %1579 to double*
  %1379 = load double, double* %1378
  %1380 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1381 = add i32 %1380, 3
  %1382 = sext i32 %1381 to i64
  %1383 = shl nsw i64 %1382, 6
  %1384 = add i64 %1383, ptrtoint (%yc_type* @yc to i64)
  %1385 = inttoptr i64 %809 to i32*
  %1386 = load i32, i32* %1385
  %1387 = sext i32 %1386 to i64
  %1388 = shl nsw i64 %1387, 3
  %1389 = add i64 %1388, %1384
  %1390 = inttoptr i64 %1389 to double*
  store double %1379, double* %1390
  %1391 = inttoptr i64 %1579 to double*
  %1392 = load double, double* %1391
  %1393 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1394 = add i32 %1393, 4
  %1395 = sext i32 %1394 to i64
  %1396 = shl nsw i64 %1395, 6
  %1397 = add i64 %1396, ptrtoint (%yc_type* @yc to i64)
  %1398 = inttoptr i64 %809 to i32*
  %1399 = load i32, i32* %1398
  %1400 = sext i32 %1399 to i64
  %1401 = shl nsw i64 %1400, 3
  %1402 = add i64 %1401, %1397
  %1403 = inttoptr i64 %1402 to double*
  store double %1392, double* %1403
  %1404 = inttoptr i64 %1579 to double*
  %1405 = load double, double* %1404
  %1406 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1407 = sext i32 %1406 to i64
  %1408 = shl nsw i64 %1407, 6
  %1409 = add i64 %1408, ptrtoint (%yc_type* @yc to i64)
  %1410 = inttoptr i64 %809 to i32*
  %1411 = load i32, i32* %1410
  %1412 = add i32 %1411, 4
  %1413 = sext i32 %1412 to i64
  %1414 = shl nsw i64 %1413, 3
  %1415 = add i64 %1409, %1414
  %1416 = inttoptr i64 %1415 to double*
  store double %1405, double* %1416
  %1417 = inttoptr i64 %1579 to double*
  %1418 = load double, double* %1417
  %1419 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1420 = add i32 %1419, 3
  %1421 = sext i32 %1420 to i64
  %1422 = shl nsw i64 %1421, 6
  %1423 = add i64 %1422, ptrtoint (%yc_type* @yc to i64)
  %1424 = inttoptr i64 %809 to i32*
  %1425 = load i32, i32* %1424
  %1426 = add i32 %1425, 4
  %1427 = sext i32 %1426 to i64
  %1428 = shl nsw i64 %1427, 3
  %1429 = add i64 %1423, %1428
  %1430 = inttoptr i64 %1429 to double*
  store double %1418, double* %1430
  %1431 = inttoptr i64 %1579 to double*
  %1432 = load double, double* %1431
  store double %1432, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1433 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1434 = add i32 %1433, 4
  %1435 = sext i32 %1434 to i64
  %1436 = shl nsw i64 %1435, 6
  %1437 = load i64, i64* %6, align 8
  %1438 = add i64 %1436, %1437
  %1439 = inttoptr i64 %809 to i32*
  %1440 = load i32, i32* %1439
  %1441 = add i32 %1440, 4
  %1442 = sext i32 %1441 to i64
  %1443 = shl nsw i64 %1442, 3
  %1444 = add i64 %1438, %1443
  %1445 = inttoptr i64 %1444 to double*
  store double %1432, double* %1445
  %1446 = inttoptr i64 %809 to i32*
  %1447 = load i32, i32* %1446
  %1448 = add i32 %1447, 1
  %1449 = inttoptr i64 %809 to i32*
  store i32 %1448, i32* %1449
  %1450 = add i64 %100, -13
  br label %block_4017e3

block_40256e:                                     ; preds = %block_402569, %block_4022f6
  %1451 = phi i64 [ %2219, %block_402569 ], [ %2078, %block_4022f6 ]
  %1452 = phi i64 [ 5, %block_402569 ], [ 492, %block_4022f6 ]
  %1453 = phi %struct.Memory* [ %2218, %block_402569 ], [ %1966, %block_4022f6 ]
  %1454 = add i64 %1451, %1452
  %1455 = inttoptr i64 %2089 to i32*
  %1456 = load i32, i32* %1455
  %1457 = add i32 %1456, 1
  %1458 = inttoptr i64 %2089 to i32*
  store i32 %1457, i32* %1458
  %1459 = add i64 %1454, -758
  br label %block_402278

block_4016b6:                                     ; preds = %block_4016b6.preheader, %block_4016c3
  %1460 = phi i64 [ %1365, %block_4016c3 ], [ %1595, %block_4016b6.preheader ]
  %1461 = phi %struct.Memory* [ %1461, %block_4016c3 ], [ %1581, %block_4016b6.preheader ]
  %1462 = inttoptr i64 %809 to i32*
  %1463 = load i32, i32* %1462
  %1464 = add i32 %1463, -7
  %1465 = lshr i32 %1464, 31
  %1466 = lshr i32 %1463, 31
  %1467 = xor i32 %1465, %1466
  %1468 = add nuw nsw i32 %1467, %1466
  %1469 = icmp eq i32 %1468, 2
  %1470 = icmp ne i32 %1465, 0
  %1471 = xor i1 %1470, %1469
  %1472 = select i1 %1471, i64 13, i64 137
  %1473 = add i64 %1460, %1472
  br i1 %1471, label %block_4016c3, label %block_40173f

block_401f22:                                     ; preds = %block_401f15
  %1474 = inttoptr i64 %348 to double*
  %1475 = load double, double* %1474
  %1476 = inttoptr i64 %1997 to i32*
  %1477 = load i32, i32* %1476
  %1478 = sext i32 %1477 to i64
  %1479 = shl nsw i64 %1478, 6
  %1480 = add i64 %1479, ptrtoint (%zc_type* @zc to i64)
  %1481 = sext i32 %1738 to i64
  %1482 = shl nsw i64 %1481, 3
  %1483 = add i64 %1482, %1480
  %1484 = inttoptr i64 %1483 to double*
  store double %1475, double* %1484
  %1485 = inttoptr i64 %349 to double*
  %1486 = load double, double* %1485
  store double %1486, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1487 = inttoptr i64 %1997 to i32*
  %1488 = load i32, i32* %1487
  %1489 = sext i32 %1488 to i64
  %1490 = shl nsw i64 %1489, 6
  %1491 = add i64 %1490, ptrtoint (%zc_type* @zc to i64)
  %1492 = inttoptr i64 %2224 to i32*
  %1493 = load i32, i32* %1492
  %1494 = add i32 %1493, 4
  %1495 = sext i32 %1494 to i64
  %1496 = shl nsw i64 %1495, 3
  %1497 = add i64 %1491, %1496
  %1498 = inttoptr i64 %1497 to double*
  store double %1486, double* %1498
  %1499 = inttoptr i64 %2224 to i32*
  %1500 = load i32, i32* %1499
  %1501 = add i32 %1500, 1
  %1502 = inttoptr i64 %2224 to i32*
  store i32 %1501, i32* %1502
  %1503 = add i64 %1749, -13
  br label %block_401f15

block_4014b5:                                     ; preds = %block_4014a8
  %1504 = add i64 %1751, -1308
  %1505 = inttoptr i64 %1504 to i32*
  %1506 = load i32, i32* %1505
  %1507 = zext i32 %1506 to i64
  store i64 %1507, i64* %7, align 8, !tbaa !1240
  %1508 = add i32 %1755, 1
  %1509 = zext i32 %1508 to i64
  %1510 = icmp eq i32 %1755, -1
  %1511 = icmp eq i32 %1508, 0
  %1512 = or i1 %1510, %1511
  %1513 = zext i1 %1512 to i8
  store i8 %1513, i8* %19, align 1, !tbaa !1248
  %1514 = and i32 %1508, 255
  %1515 = tail call i32 @llvm.ctpop.i32(i32 %1514) #11
  %1516 = trunc i32 %1515 to i8
  %1517 = and i8 %1516, 1
  %1518 = xor i8 %1517, 1
  store i8 %1518, i8* %20, align 1, !tbaa !1261
  %1519 = xor i32 %1508, %1755
  %1520 = lshr i32 %1519, 4
  %1521 = trunc i32 %1520 to i8
  %1522 = and i8 %1521, 1
  store i8 %1522, i8* %21, align 1, !tbaa !1262
  %1523 = zext i1 %1511 to i8
  store i8 %1523, i8* %22, align 1, !tbaa !1263
  %1524 = lshr i32 %1508, 31
  %1525 = trunc i32 %1524 to i8
  store i8 %1525, i8* %23, align 1, !tbaa !1264
  %1526 = xor i32 %1524, %1759
  %1527 = add nuw nsw i32 %1526, %1524
  %1528 = icmp eq i32 %1527, 2
  %1529 = zext i1 %1528 to i8
  store i8 %1529, i8* %24, align 1, !tbaa !1265
  %1530 = add i64 %1751, -1588
  %1531 = inttoptr i64 %1530 to i32*
  store i32 8, i32* %1531
  store i64 %1509, i64* %6, align 8, !tbaa !1240
  %1532 = sext i32 %1508 to i64
  %1533 = lshr i64 %1532, 32
  store i64 %1533, i64* %1728, align 8, !tbaa !1240
  %1534 = inttoptr i64 %1530 to i32*
  %1535 = load i32, i32* %1534
  %1536 = zext i32 %1535 to i64
  store i64 %1536, i64* %9, align 8, !tbaa !1240
  %1537 = add i64 %1766, 37
  store i64 %1537, i64* %3, align 8
  %1538 = sext i32 %1535 to i64
  %1539 = shl nuw i64 %1533, 32
  %1540 = or i64 %1539, %1509
  %1541 = sdiv i64 %1540, %1538
  %1542 = shl i64 %1541, 32
  %1543 = ashr exact i64 %1542, 32
  %1544 = icmp eq i64 %1541, %1543
  br i1 %1544, label %1551, label %1545

; <label>:1545:                                   ; preds = %block_4014b5
  %1546 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1537, %struct.Memory* %1752) #14
  %1547 = load i64, i64* %7, align 8
  %1548 = load i32, i32* %850, align 4
  %1549 = load i64, i64* %3, align 8
  %1550 = load i64, i64* %12, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:1551:                                   ; preds = %block_4014b5
  %1552 = srem i64 %1540, %1538
  %1553 = trunc i64 %1552 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %1551, %1545
  %1554 = phi i64 [ %1550, %1545 ], [ %1751, %1551 ]
  %1555 = phi i64 [ %1549, %1545 ], [ %1537, %1551 ]
  %1556 = phi i32 [ %1548, %1545 ], [ %1553, %1551 ]
  %1557 = phi i64 [ %1547, %1545 ], [ %1507, %1551 ]
  %1558 = phi %struct.Memory* [ %1546, %1545 ], [ %1752, %1551 ]
  %1559 = trunc i64 %1557 to i32
  %1560 = add i32 %1556, %1559
  %1561 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1562 = add i64 %1554, -1296
  %1563 = inttoptr i64 %1562 to i32*
  %1564 = load i32, i32* %1563
  %1565 = add i32 %1564, %1561
  %1566 = sext i32 %1565 to i64
  store i64 %1566, i64* %10, align 8, !tbaa !1240
  %1567 = shl nsw i64 %1566, 2
  %1568 = add i64 %1567, ptrtoint (%tree_type* @tree to i64)
  %1569 = inttoptr i64 %1568 to i32*
  store i32 %1560, i32* %1569
  %1570 = inttoptr i64 %1562 to i32*
  %1571 = load i32, i32* %1570
  %1572 = add i32 %1571, 1
  %1573 = load i64, i64* %12, align 8
  %1574 = add i64 %1573, -1296
  %1575 = inttoptr i64 %1574 to i32*
  store i32 %1572, i32* %1575
  %1576 = add i64 %1555, -50
  br label %block_4014a8

block_4017d9:                                     ; preds = %block_401762
  %1577 = add i64 %625, 10
  %1578 = inttoptr i64 %809 to i32*
  store i32 0, i32* %1578
  %1579 = add i64 %785, -232
  br label %block_4017e3

block_40169f:                                     ; preds = %block_401695, %block_40173f
  %1580 = phi i64 [ %1816, %block_401695 ], [ %499, %block_40173f ]
  %1581 = phi %struct.Memory* [ %629, %block_401695 ], [ %1461, %block_40173f ]
  %1582 = inttoptr i64 %806 to i32*
  %1583 = load i32, i32* %1582
  %1584 = add i32 %1583, -6
  %1585 = lshr i32 %1584, 31
  %1586 = trunc i32 %1585 to i8
  %1587 = lshr i32 %1583, 31
  %1588 = xor i32 %1585, %1587
  %1589 = add nuw nsw i32 %1588, %1587
  %1590 = icmp eq i32 %1589, 2
  %1591 = icmp ne i8 %1586, 0
  %1592 = xor i1 %1591, %1590
  %1593 = select i1 %1592, i64 13, i64 185
  %1594 = add i64 %1580, %1593
  %1595 = add i64 %1594, 10
  %1596 = inttoptr i64 %809 to i32*
  store i32 0, i32* %1596
  br i1 %1592, label %block_4016b6.preheader, label %block_401762.preheader

block_4016b6.preheader:                           ; preds = %block_40169f
  br label %block_4016b6

block_401762.preheader:                           ; preds = %block_40169f
  %1597 = add i64 %785, -1292
  br label %block_401762

block_401b87:                                     ; preds = %block_401b7a
  %1598 = inttoptr i64 %2226 to double*
  %1599 = load double, double* %1598
  %1600 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1601 = inttoptr i64 %2221 to i32*
  %1602 = load i32, i32* %1601
  %1603 = add i32 %1602, %1600
  %1604 = sext i32 %1603 to i64
  %1605 = shl nsw i64 %1604, 6
  %1606 = add i64 %1605, ptrtoint (%yc_type* @yc to i64)
  %1607 = sext i32 %309 to i64
  %1608 = shl nsw i64 %1607, 3
  %1609 = add i64 %1608, %1606
  %1610 = inttoptr i64 %1609 to double*
  store double %1599, double* %1610
  %1611 = inttoptr i64 %2226 to double*
  %1612 = load double, double* %1611
  %1613 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1614 = inttoptr i64 %2221 to i32*
  %1615 = load i32, i32* %1614
  %1616 = add i32 %1615, %1613
  %1617 = add i32 %1616, 4
  %1618 = sext i32 %1617 to i64
  %1619 = shl nsw i64 %1618, 6
  %1620 = add i64 %1619, ptrtoint (%yc_type* @yc to i64)
  %1621 = inttoptr i64 %2224 to i32*
  %1622 = load i32, i32* %1621
  %1623 = sext i32 %1622 to i64
  %1624 = shl nsw i64 %1623, 3
  %1625 = add i64 %1624, %1620
  %1626 = inttoptr i64 %1625 to double*
  store double %1612, double* %1626
  %1627 = inttoptr i64 %2226 to double*
  %1628 = load double, double* %1627
  %1629 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1630 = inttoptr i64 %2221 to i32*
  %1631 = load i32, i32* %1630
  %1632 = add i32 %1631, %1629
  %1633 = sext i32 %1632 to i64
  %1634 = shl nsw i64 %1633, 6
  %1635 = add i64 %1634, ptrtoint (%yc_type* @yc to i64)
  %1636 = inttoptr i64 %2224 to i32*
  %1637 = load i32, i32* %1636
  %1638 = add i32 %1637, 4
  %1639 = sext i32 %1638 to i64
  %1640 = shl nsw i64 %1639, 3
  %1641 = add i64 %1635, %1640
  %1642 = inttoptr i64 %1641 to double*
  store double %1628, double* %1642
  %1643 = inttoptr i64 %2226 to double*
  %1644 = load double, double* %1643
  store double %1644, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1645 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1646 = inttoptr i64 %2221 to i32*
  %1647 = load i32, i32* %1646
  %1648 = add i32 %1647, %1645
  %1649 = add i32 %1648, 4
  %1650 = sext i32 %1649 to i64
  %1651 = shl nsw i64 %1650, 6
  %1652 = add i64 %1651, ptrtoint (%yc_type* @yc to i64)
  %1653 = inttoptr i64 %2224 to i32*
  %1654 = load i32, i32* %1653
  %1655 = add i32 %1654, 4
  %1656 = sext i32 %1655 to i64
  %1657 = shl nsw i64 %1656, 3
  %1658 = add i64 %1652, %1657
  %1659 = inttoptr i64 %1658 to double*
  store double %1644, double* %1659
  %1660 = inttoptr i64 %2224 to i32*
  %1661 = load i32, i32* %1660
  %1662 = add i32 %1661, 1
  %1663 = inttoptr i64 %2224 to i32*
  store i32 %1662, i32* %1663
  %1664 = add i64 %319, -13
  br label %block_401b7a

block_4010b3:                                     ; preds = %block_4010a9, %block_4029c7
  %1665 = phi i64 [ %1718, %block_4010a9 ], [ %131, %block_4029c7 ]
  %1666 = phi i64 [ %867, %block_4010a9 ], [ %124, %block_4029c7 ]
  %1667 = phi %struct.Memory* [ %1716, %block_4010a9 ], [ %123, %block_4029c7 ]
  %1668 = add i64 %1666, -1376
  %1669 = inttoptr i64 %1668 to i32*
  %1670 = load i32, i32* %1669
  %1671 = add i64 %1666, -1372
  %1672 = inttoptr i64 %1671 to i32*
  %1673 = load i32, i32* %1672
  %1674 = sub i32 %1670, %1673
  %1675 = lshr i32 %1674, 31
  %1676 = trunc i32 %1675 to i8
  %1677 = lshr i32 %1670, 31
  %1678 = lshr i32 %1673, 31
  %1679 = xor i32 %1678, %1677
  %1680 = xor i32 %1675, %1677
  %1681 = add nuw nsw i32 %1680, %1679
  %1682 = icmp eq i32 %1681, 2
  %1683 = icmp ne i8 %1676, 0
  %1684 = xor i1 %1683, %1682
  %1685 = select i1 %1684, i64 18, i64 6513
  %1686 = add i64 %1665, %1685
  br i1 %1684, label %block_4010c5, label %block_402a24

block_402942:                                     ; preds = %block_402935
  %1687 = inttoptr i64 %2088 to i32*
  %1688 = load i32, i32* %1687
  %1689 = sext i32 %2427 to i64
  %1690 = shl nsw i64 %1689, 2
  %1691 = add i64 %2091, %1690
  %1692 = inttoptr i64 %1691 to i32*
  %1693 = load i32, i32* %1692
  %1694 = sext i32 %1693 to i64
  %1695 = mul nsw i64 %1694, 24
  %1696 = add i64 %1695, ptrtoint (%cbc_type* @cbc to i64)
  %1697 = inttoptr i64 %2224 to i32*
  %1698 = load i32, i32* %1697
  %1699 = sext i32 %1698 to i64
  %1700 = shl nsw i64 %1699, 2
  %1701 = add i64 %1700, %1696
  %1702 = inttoptr i64 %1701 to i32*
  store i32 %1688, i32* %1702
  %1703 = inttoptr i64 %2089 to i32*
  %1704 = load i32, i32* %1703
  %1705 = add i32 %1704, 1
  %1706 = inttoptr i64 %2089 to i32*
  store i32 %1705, i32* %1706
  %1707 = add i64 %2437, -13
  br label %block_402935

block_4020ac:                                     ; preds = %block_402001
  %1708 = inttoptr i64 %2085 to i32*
  %1709 = load i32, i32* %1708
  %1710 = icmp ne i32 %1709, 0
  %1711 = select i1 %1710, i64 30, i64 13
  %1712 = add i64 %2634, %1711
  %1713 = inttoptr i64 %1997 to i32*
  %1714 = load i32, i32* %1713
  br i1 %1710, label %block_4020ca, label %block_4020b9

block_4010a9:                                     ; preds = %block_401085, %block_40109f
  %1715 = phi i64 [ %1914, %block_401085 ], [ %1770, %block_40109f ]
  %1716 = phi %struct.Memory* [ %2440, %block_401085 ], [ %2440, %block_40109f ]
  %1717 = add i64 %867, -1376
  %1718 = add i64 %1715, 10
  %1719 = inttoptr i64 %1717 to i32*
  store i32 0, i32* %1719
  %1720 = bitcast [32 x %union.VectorReg]* %851 to i8*
  %1721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1722 = bitcast [32 x %union.VectorReg]* %851 to i32*
  %1723 = getelementptr inbounds i8, i8* %1720, i64 4
  %1724 = bitcast i8* %1723 to i32*
  %1725 = bitcast i64* %1721 to i32*
  %1726 = getelementptr inbounds i8, i8* %1720, i64 12
  %1727 = bitcast i8* %1726 to i32*
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1729 = bitcast [32 x %union.VectorReg]* %851 to double*
  %1730 = bitcast i64* %1721 to double*
  %1731 = bitcast %union.VectorReg* %14 to double*
  %1732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %1733 = bitcast %union.VectorReg* %852 to double*
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  br label %block_4010b3

block_401f15:                                     ; preds = %block_401f15.preheader, %block_401f22
  %1735 = phi i64 [ %1503, %block_401f22 ], [ %2112, %block_401f15.preheader ]
  %1736 = phi %struct.Memory* [ %1736, %block_401f22 ], [ %2098, %block_401f15.preheader ]
  %1737 = inttoptr i64 %2224 to i32*
  %1738 = load i32, i32* %1737
  %1739 = add i32 %1738, -4
  %1740 = lshr i32 %1739, 31
  %1741 = trunc i32 %1740 to i8
  %1742 = lshr i32 %1738, 31
  %1743 = xor i32 %1740, %1742
  %1744 = add nuw nsw i32 %1743, %1742
  %1745 = icmp eq i32 %1744, 2
  %1746 = icmp ne i8 %1741, 0
  %1747 = xor i1 %1746, %1745
  %1748 = select i1 %1747, i64 13, i64 119
  %1749 = add i64 %1735, %1748
  br i1 %1747, label %block_401f22, label %block_401f8c

block_4014a8:                                     ; preds = %block_40147b, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1750 = phi i64 [ %2148, %block_40147b ], [ %1576, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %1751 = phi i64 [ %479, %block_40147b ], [ %1573, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %1752 = phi %struct.Memory* [ %480, %block_40147b ], [ %1558, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %1753 = add i64 %1751, -1296
  %1754 = inttoptr i64 %1753 to i32*
  %1755 = load i32, i32* %1754
  %1756 = add i32 %1755, -7
  %1757 = lshr i32 %1756, 31
  %1758 = trunc i32 %1757 to i8
  %1759 = lshr i32 %1755, 31
  %1760 = xor i32 %1757, %1759
  %1761 = add nuw nsw i32 %1760, %1759
  %1762 = icmp eq i32 %1761, 2
  %1763 = icmp ne i8 %1758, 0
  %1764 = xor i1 %1763, %1762
  %1765 = select i1 %1764, i64 13, i64 95
  %1766 = add i64 %1750, %1765
  br i1 %1764, label %block_4014b5, label %block_401507

block_40109f:                                     ; preds = %block_401085
  %1767 = add i64 %867, -8
  %1768 = inttoptr i64 %1767 to i64*
  %1769 = load i64, i64* %1768
  %1770 = add i64 %1914, 10
  %1771 = inttoptr i64 %1769 to i32*
  store i32 1, i32* %1771
  br label %block_4010a9

block_401c9a:                                     ; preds = %block_401c8d
  %1772 = inttoptr i64 %1996 to double*
  %1773 = load double, double* %1772
  %1774 = inttoptr i64 %1997 to i32*
  %1775 = load i32, i32* %1774
  %1776 = sext i32 %1775 to i64
  %1777 = shl nsw i64 %1776, 6
  %1778 = add i64 %1777, ptrtoint (%yc_type* @yc to i64)
  %1779 = sext i32 %466 to i64
  %1780 = shl nsw i64 %1779, 3
  %1781 = add i64 %1780, %1778
  %1782 = inttoptr i64 %1781 to double*
  store double %1773, double* %1782
  %1783 = inttoptr i64 %1996 to double*
  %1784 = load double, double* %1783
  store double %1784, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1785 = inttoptr i64 %1997 to i32*
  %1786 = load i32, i32* %1785
  %1787 = sext i32 %1786 to i64
  %1788 = shl nsw i64 %1787, 6
  %1789 = add i64 %1788, ptrtoint (%yc_type* @yc to i64)
  %1790 = inttoptr i64 %2224 to i32*
  %1791 = load i32, i32* %1790
  %1792 = add i32 %1791, 4
  %1793 = sext i32 %1792 to i64
  %1794 = shl nsw i64 %1793, 3
  %1795 = add i64 %1789, %1794
  %1796 = inttoptr i64 %1795 to double*
  store double %1784, double* %1796
  %1797 = inttoptr i64 %2224 to i32*
  %1798 = load i32, i32* %1797
  %1799 = add i32 %1798, 1
  %1800 = inttoptr i64 %2224 to i32*
  store i32 %1799, i32* %1800
  %1801 = add i64 %477, -13
  br label %block_401c8d

block_400e9c:                                     ; preds = %block_400e89
  %1802 = sext i32 %1889 to i64
  %1803 = shl nsw i64 %1802, 2
  %1804 = add i64 %1803, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %1805 = inttoptr i64 %1804 to i32*
  %1806 = load i32, i32* %1805
  %1807 = sext i32 %1806 to i64
  %1808 = shl nsw i64 %1807, 2
  %1809 = add i64 %1808, ptrtoint (%ich_type* @ich to i64)
  %1810 = inttoptr i64 %1809 to i32*
  %1811 = load i32, i32* %1810
  %1812 = icmp eq i32 %1811, 4
  %1813 = select i1 %1812, i64 52, i64 29
  %1814 = add i64 %1903, %1813
  %1815 = add i64 %1803, ptrtoint (%front_type* @front to i64)
  br i1 %1812, label %block_400ed0, label %block_400eb9

block_401695:                                     ; preds = %block_4015dc
  %1816 = add i64 %642, 10
  %1817 = inttoptr i64 %806 to i32*
  store i32 1, i32* %1817
  %1818 = add i64 %785, -216
  br label %block_40169f

block_401a8d:                                     ; preds = %block_401a80
  %1819 = inttoptr i64 %2225 to double*
  %1820 = load double, double* %1819
  %1821 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1822 = inttoptr i64 %2221 to i32*
  %1823 = load i32, i32* %1822
  %1824 = add i32 %1823, %1821
  %1825 = sext i32 %1824 to i64
  %1826 = shl nsw i64 %1825, 6
  %1827 = add i64 %1826, ptrtoint (%yc_type* @yc to i64)
  %1828 = sext i32 %1948 to i64
  %1829 = shl nsw i64 %1828, 3
  %1830 = add i64 %1829, %1827
  %1831 = inttoptr i64 %1830 to double*
  store double %1820, double* %1831
  %1832 = inttoptr i64 %2225 to double*
  %1833 = load double, double* %1832
  %1834 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1835 = inttoptr i64 %2221 to i32*
  %1836 = load i32, i32* %1835
  %1837 = add i32 %1836, %1834
  %1838 = add i32 %1837, 4
  %1839 = sext i32 %1838 to i64
  %1840 = shl nsw i64 %1839, 6
  %1841 = add i64 %1840, ptrtoint (%yc_type* @yc to i64)
  %1842 = inttoptr i64 %2224 to i32*
  %1843 = load i32, i32* %1842
  %1844 = sext i32 %1843 to i64
  %1845 = shl nsw i64 %1844, 3
  %1846 = add i64 %1845, %1841
  %1847 = inttoptr i64 %1846 to double*
  store double %1833, double* %1847
  %1848 = inttoptr i64 %2225 to double*
  %1849 = load double, double* %1848
  %1850 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1851 = inttoptr i64 %2221 to i32*
  %1852 = load i32, i32* %1851
  %1853 = add i32 %1852, %1850
  %1854 = sext i32 %1853 to i64
  %1855 = shl nsw i64 %1854, 6
  %1856 = add i64 %1855, ptrtoint (%yc_type* @yc to i64)
  %1857 = inttoptr i64 %2224 to i32*
  %1858 = load i32, i32* %1857
  %1859 = add i32 %1858, 4
  %1860 = sext i32 %1859 to i64
  %1861 = shl nsw i64 %1860, 3
  %1862 = add i64 %1856, %1861
  %1863 = inttoptr i64 %1862 to double*
  store double %1849, double* %1863
  %1864 = inttoptr i64 %2225 to double*
  %1865 = load double, double* %1864
  store double %1865, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1866 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1867 = inttoptr i64 %2221 to i32*
  %1868 = load i32, i32* %1867
  %1869 = add i32 %1868, %1866
  %1870 = add i32 %1869, 4
  %1871 = sext i32 %1870 to i64
  %1872 = shl nsw i64 %1871, 6
  %1873 = add i64 %1872, ptrtoint (%yc_type* @yc to i64)
  %1874 = inttoptr i64 %2224 to i32*
  %1875 = load i32, i32* %1874
  %1876 = add i32 %1875, 4
  %1877 = sext i32 %1876 to i64
  %1878 = shl nsw i64 %1877, 3
  %1879 = add i64 %1873, %1878
  %1880 = inttoptr i64 %1879 to double*
  store double %1865, double* %1880
  %1881 = inttoptr i64 %2224 to i32*
  %1882 = load i32, i32* %1881
  %1883 = add i32 %1882, 1
  %1884 = inttoptr i64 %2224 to i32*
  store i32 %1883, i32* %1884
  %1885 = add i64 %1958, -13
  br label %block_401a80

block_400e89:                                     ; preds = %block_400ee2, %block_400e10
  %1886 = phi i64 [ %59, %block_400e10 ], [ %2465, %block_400ee2 ]
  %1887 = phi %struct.Memory* [ %55, %block_400e10 ], [ %2460, %block_400ee2 ]
  %1888 = inttoptr i64 %57 to i32*
  %1889 = load i32, i32* %1888
  %1890 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1891 = sub i32 %1889, %1890
  %1892 = lshr i32 %1891, 31
  %1893 = trunc i32 %1892 to i8
  %1894 = lshr i32 %1889, 31
  %1895 = lshr i32 %1890, 31
  %1896 = xor i32 %1895, %1894
  %1897 = xor i32 %1892, %1894
  %1898 = add nuw nsw i32 %1897, %1896
  %1899 = icmp eq i32 %1898, 2
  %1900 = icmp ne i8 %1893, 0
  %1901 = xor i1 %1900, %1899
  %1902 = select i1 %1901, i64 19, i64 114
  %1903 = add i64 %1886, %1902
  br i1 %1901, label %block_400e9c, label %block_400efb

block_401085:                                     ; preds = %block_400fae
  %1904 = add i64 %867, -1548
  %1905 = inttoptr i64 %1904 to i32*
  store i32 %2443, i32* %1905
  %1906 = inttoptr i64 %868 to i32*
  %1907 = load i32, i32* %1906
  %1908 = icmp eq i32 %1907, 0
  %1909 = lshr i32 %1907, 31
  %1910 = trunc i32 %1909 to i8
  %1911 = icmp ne i8 %1910, 0
  %1912 = or i1 %1908, %1911
  %1913 = select i1 %1912, i64 36, i64 26
  %1914 = add i64 %2455, %1913
  br i1 %1912, label %block_4010a9, label %block_40109f

block_40176f:                                     ; preds = %block_401762
  %1915 = inttoptr i64 %1818 to double*
  %1916 = load double, double* %1915
  %1917 = inttoptr i64 %1597 to i32*
  %1918 = load i32, i32* %1917
  %1919 = sext i32 %1918 to i64
  %1920 = shl nsw i64 %1919, 6
  %1921 = add i64 %1920, ptrtoint (%xc_type* @xc to i64)
  %1922 = sext i32 %614 to i64
  %1923 = shl nsw i64 %1922, 3
  %1924 = add i64 %1923, %1921
  %1925 = inttoptr i64 %1924 to double*
  store double %1916, double* %1925
  %1926 = inttoptr i64 %810 to double*
  %1927 = load double, double* %1926
  store double %1927, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %1928 = inttoptr i64 %1597 to i32*
  %1929 = load i32, i32* %1928
  %1930 = sext i32 %1929 to i64
  %1931 = shl nsw i64 %1930, 6
  %1932 = add i64 %1931, ptrtoint (%xc_type* @xc to i64)
  %1933 = inttoptr i64 %809 to i32*
  %1934 = load i32, i32* %1933
  %1935 = add i32 %1934, 1
  %1936 = sext i32 %1935 to i64
  %1937 = shl nsw i64 %1936, 3
  %1938 = add i64 %1932, %1937
  %1939 = inttoptr i64 %1938 to double*
  store double %1927, double* %1939
  %1940 = inttoptr i64 %809 to i32*
  %1941 = load i32, i32* %1940
  %1942 = add i32 %1941, 2
  %1943 = inttoptr i64 %809 to i32*
  store i32 %1942, i32* %1943
  %1944 = add i64 %625, -13
  br label %block_401762

block_401a80:                                     ; preds = %block_401a80.preheader, %block_401a8d
  %1945 = phi i64 [ %1885, %block_401a8d ], [ %1994, %block_401a80.preheader ]
  %1946 = phi %struct.Memory* [ %1946, %block_401a8d ], [ %1980, %block_401a80.preheader ]
  %1947 = inttoptr i64 %2224 to i32*
  %1948 = load i32, i32* %1947
  %1949 = add i32 %1948, -2
  %1950 = lshr i32 %1949, 31
  %1951 = lshr i32 %1948, 31
  %1952 = xor i32 %1950, %1951
  %1953 = add nuw nsw i32 %1952, %1951
  %1954 = icmp eq i32 %1953, 2
  %1955 = icmp ne i32 %1950, 0
  %1956 = xor i1 %1955, %1954
  %1957 = select i1 %1956, i64 13, i64 240
  %1958 = add i64 %1945, %1957
  br i1 %1956, label %block_401a8d, label %block_401b70

block_4026bc:                                     ; preds = %block_4025aa
  %1959 = add i64 %257, 5
  br label %block_402995

block_40167c:                                     ; preds = %block_4015f3
  %1960 = inttoptr i64 %806 to i32*
  %1961 = load i32, i32* %1960
  %1962 = add i32 %1961, 2
  %1963 = inttoptr i64 %806 to i32*
  store i32 %1962, i32* %1963
  %1964 = add i64 %74, -160
  br label %block_4015dc

block_402278:                                     ; preds = %block_402202, %block_40256e
  %1965 = phi i64 [ %2619, %block_402202 ], [ %1459, %block_40256e ]
  %1966 = phi %struct.Memory* [ %1004, %block_402202 ], [ %1453, %block_40256e ]
  %1967 = inttoptr i64 %2089 to i32*
  %1968 = load i32, i32* %1967
  %1969 = add i32 %1968, -4
  %1970 = lshr i32 %1969, 31
  %1971 = lshr i32 %1968, 31
  %1972 = xor i32 %1970, %1971
  %1973 = add nuw nsw i32 %1972, %1971
  %1974 = icmp eq i32 %1973, 2
  %1975 = icmp ne i32 %1970, 0
  %1976 = xor i1 %1975, %1974
  %1977 = select i1 %1976, i64 13, i64 783
  %1978 = add i64 %1965, %1977
  br i1 %1976, label %block_402285, label %block_402587

block_401a69:                                     ; preds = %block_401a5f, %block_401c6a
  %1979 = phi i64 [ %2222, %block_401a5f ], [ %2002, %block_401c6a ]
  %1980 = phi %struct.Memory* [ %2020, %block_401a5f ], [ %307, %block_401c6a ]
  %1981 = inttoptr i64 %2221 to i32*
  %1982 = load i32, i32* %1981
  %1983 = add i32 %1982, -3
  %1984 = lshr i32 %1983, 31
  %1985 = trunc i32 %1984 to i8
  %1986 = lshr i32 %1982, 31
  %1987 = xor i32 %1984, %1986
  %1988 = add nuw nsw i32 %1987, %1986
  %1989 = icmp eq i32 %1988, 2
  %1990 = icmp ne i8 %1985, 0
  %1991 = xor i1 %1990, %1989
  %1992 = select i1 %1991, i64 13, i64 538
  %1993 = add i64 %1979, %1992
  %1994 = add i64 %1993, 10
  %1995 = inttoptr i64 %2224 to i32*
  store i32 0, i32* %1995
  br i1 %1991, label %block_401a80.preheader, label %block_401c8d.preheader

block_401a80.preheader:                           ; preds = %block_401a69
  br label %block_401a80

block_401c8d.preheader:                           ; preds = %block_401a69
  %1996 = add i64 %2220, -232
  %1997 = add i64 %2220, -1292
  br label %block_401c8d

block_401c6a:                                     ; preds = %block_401b7a
  %1998 = inttoptr i64 %2221 to i32*
  %1999 = load i32, i32* %1998
  %2000 = add i32 %1999, 1
  %2001 = inttoptr i64 %2221 to i32*
  store i32 %2000, i32* %2001
  %2002 = add i64 %319, -513
  br label %block_401a69

block_401fa3:                                     ; preds = %block_401f96
  %2003 = add i64 %280, 10
  %2004 = inttoptr i64 %2085 to i32*
  store i32 0, i32* %2004
  br label %block_401fad

block_401e69:                                     ; preds = %block_401e69.preheader, %block_401e76
  %2005 = phi i64 [ %1072, %block_401e76 ], [ %2112, %block_401e69.preheader ]
  %2006 = phi %struct.Memory* [ %2006, %block_401e76 ], [ %2098, %block_401e69.preheader ]
  %2007 = inttoptr i64 %2224 to i32*
  %2008 = load i32, i32* %2007
  %2009 = add i32 %2008, -4
  %2010 = lshr i32 %2009, 31
  %2011 = lshr i32 %2008, 31
  %2012 = xor i32 %2010, %2011
  %2013 = add nuw nsw i32 %2012, %2011
  %2014 = icmp eq i32 %2013, 2
  %2015 = icmp ne i32 %2010, 0
  %2016 = xor i1 %2015, %2014
  %2017 = select i1 %2016, i64 13, i64 137
  %2018 = add i64 %2005, %2017
  br i1 %2016, label %block_401e76, label %block_401ef2

block_401926:                                     ; preds = %block_40191c, %block_401933
  %2019 = phi i64 [ %2351, %block_40191c ], [ %582, %block_401933 ]
  %2020 = phi %struct.Memory* [ %87, %block_40191c ], [ %2020, %block_401933 ]
  %2021 = inttoptr i64 %2350 to i32*
  %2022 = load i32, i32* %2021
  %2023 = add i32 %2022, -4
  %2024 = lshr i32 %2023, 31
  %2025 = trunc i32 %2024 to i8
  %2026 = lshr i32 %2022, 31
  %2027 = xor i32 %2024, %2026
  %2028 = add nuw nsw i32 %2027, %2026
  %2029 = icmp eq i32 %2028, 2
  %2030 = icmp ne i8 %2025, 0
  %2031 = xor i1 %2030, %2029
  %2032 = select i1 %2031, i64 13, i64 313
  %2033 = add i64 %2019, %2032
  br i1 %2031, label %block_401933, label %block_401a5f

block_4022f6:                                     ; preds = %block_402285
  %2034 = inttoptr i64 %2091 to i32*
  %2035 = load i32, i32* %2034
  %2036 = sext i32 %2035 to i64
  %2037 = mul nsw i64 %2036, 48
  %2038 = add i64 %2037, ptrtoint (%ijel_type* @ijel to i64)
  %2039 = inttoptr i64 %2224 to i32*
  %2040 = load i32, i32* %2039
  %2041 = sext i32 %2040 to i64
  %2042 = shl nsw i64 %2041, 3
  %2043 = add i64 %2042, %2038
  %2044 = inttoptr i64 %2043 to i32*
  store i32 0, i32* %2044
  %2045 = inttoptr i64 %2089 to i32*
  %2046 = load i32, i32* %2045
  %2047 = sext i32 %2046 to i64
  %2048 = shl nsw i64 %2047, 2
  %2049 = add i64 %2091, %2048
  %2050 = inttoptr i64 %2049 to i32*
  %2051 = load i32, i32* %2050
  %2052 = sext i32 %2051 to i64
  %2053 = mul nsw i64 %2052, 48
  %2054 = inttoptr i64 %2224 to i32*
  %2055 = load i32, i32* %2054
  %2056 = sext i32 %2055 to i64
  %2057 = shl nsw i64 %2056, 3
  %2058 = add i64 %2053, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %2059 = add i64 %2058, %2057
  %2060 = inttoptr i64 %2059 to i32*
  store i32 0, i32* %2060
  %2061 = inttoptr i64 %2089 to i32*
  %2062 = load i32, i32* %2061
  %2063 = sext i32 %2062 to i64
  %2064 = shl nsw i64 %2063, 2
  %2065 = add i64 %2091, %2064
  %2066 = inttoptr i64 %2065 to i32*
  %2067 = load i32, i32* %2066
  %2068 = inttoptr i64 %2092 to i32*
  %2069 = load i32, i32* %2068
  %2070 = sext i32 %2069 to i64
  %2071 = mul nsw i64 %2070, 96
  %2072 = add i64 %2071, ptrtoint (%sje_type* @sje to i64)
  %2073 = inttoptr i64 %2086 to i32*
  %2074 = load i32, i32* %2073
  %2075 = sext i32 %2074 to i64
  %2076 = shl nsw i64 %2075, 4
  %2077 = add i64 %2076, %2072
  %2078 = add i64 %742, 140
  %2079 = inttoptr i64 %2077 to i32*
  store i32 %2067, i32* %2079
  br label %block_40256e

block_400eb9:                                     ; preds = %block_400e9c
  %2080 = inttoptr i64 %1815 to i32*
  store i32 0, i32* %2080
  %2081 = add i64 %1814, 41
  br label %block_400ee2

block_401f8c:                                     ; preds = %block_401f15
  %2082 = add i64 %2220, -1312
  %2083 = add i64 %1749, 10
  %2084 = inttoptr i64 %2082 to i32*
  store i32 0, i32* %2084
  %2085 = add i64 %2220, -1316
  %2086 = add i64 %2220, -1304
  %2087 = add i64 %2220, -1584
  %2088 = add i64 %2220, -1552
  %2089 = add i64 %2220, -1320
  %2090 = add i64 %2220, -1344
  %2091 = add i64 %2220, -1360
  %2092 = add i64 %2220, -1308
  %2093 = add i64 %2220, -1536
  %2094 = add i64 %2220, -1540
  %2095 = add i64 %2220, -1544
  %2096 = add i64 %2220, -1356
  br label %block_401f96

block_401e52:                                     ; preds = %block_401e48, %block_401ef2
  %2097 = phi i64 [ %2129, %block_401e48 ], [ %908, %block_401ef2 ]
  %2098 = phi %struct.Memory* [ %282, %block_401e48 ], [ %2006, %block_401ef2 ]
  %2099 = inttoptr i64 %2221 to i32*
  %2100 = load i32, i32* %2099
  %2101 = add i32 %2100, -7
  %2102 = lshr i32 %2101, 31
  %2103 = trunc i32 %2102 to i8
  %2104 = lshr i32 %2100, 31
  %2105 = xor i32 %2102, %2104
  %2106 = add nuw nsw i32 %2105, %2104
  %2107 = icmp eq i32 %2106, 2
  %2108 = icmp ne i8 %2103, 0
  %2109 = xor i1 %2108, %2107
  %2110 = select i1 %2109, i64 13, i64 185
  %2111 = add i64 %2097, %2110
  %2112 = add i64 %2111, 10
  %2113 = inttoptr i64 %2224 to i32*
  store i32 0, i32* %2113
  br i1 %2109, label %block_401e69.preheader, label %block_401f15.preheader

block_401e69.preheader:                           ; preds = %block_401e52
  br label %block_401e69

block_401f15.preheader:                           ; preds = %block_401e52
  br label %block_401f15

block_401d0e:                                     ; preds = %block_401d1b, %block_401d04
  %2114 = phi i64 [ %812, %block_401d04 ], [ %903, %block_401d1b ]
  %2115 = phi %struct.Memory* [ %464, %block_401d04 ], [ %2115, %block_401d1b ]
  %2116 = inttoptr i64 %2224 to i32*
  %2117 = load i32, i32* %2116
  %2118 = add i32 %2117, -4
  %2119 = lshr i32 %2118, 31
  %2120 = trunc i32 %2119 to i8
  %2121 = lshr i32 %2117, 31
  %2122 = xor i32 %2119, %2121
  %2123 = add nuw nsw i32 %2122, %2121
  %2124 = icmp eq i32 %2123, 2
  %2125 = icmp ne i8 %2120, 0
  %2126 = xor i1 %2125, %2124
  %2127 = select i1 %2126, i64 13, i64 119
  %2128 = add i64 %2114, %2127
  br i1 %2126, label %block_401d1b, label %block_401d85

block_401e48:                                     ; preds = %block_401d8f
  %2129 = add i64 %295, 10
  %2130 = inttoptr i64 %2221 to i32*
  store i32 3, i32* %2130
  %2131 = add i64 %2220, -256
  br label %block_401e52

block_40147b:                                     ; preds = %block_40134d
  %2132 = add i64 %479, -1380
  %2133 = inttoptr i64 %2132 to i32*
  %2134 = load i32, i32* %2133
  %2135 = shl i32 %2134, 3
  %2136 = add i64 %479, -1308
  %2137 = inttoptr i64 %2136 to i32*
  store i32 %2135, i32* %2137
  %2138 = inttoptr i64 %2136 to i32*
  %2139 = load i32, i32* %2138
  %2140 = add i64 %479, -1292
  %2141 = inttoptr i64 %2140 to i32*
  %2142 = load i32, i32* %2141
  %2143 = sext i32 %2142 to i64
  %2144 = shl nsw i64 %2143, 2
  %2145 = add i64 %2144, ptrtoint (%tree_type* @tree to i64)
  %2146 = inttoptr i64 %2145 to i32*
  store i32 %2139, i32* %2146
  %2147 = add i64 %479, -1296
  %2148 = add i64 %494, 45
  %2149 = inttoptr i64 %2147 to i32*
  store i32 0, i32* %2149
  br label %block_4014a8

block_402644:                                     ; preds = %block_402638, %block_4025b7
  %2150 = phi i64 [ %200, %block_4025b7 ], [ %2229, %block_402638 ]
  %2151 = phi %struct.Memory* [ %245, %block_4025b7 ], [ %245, %block_402638 ]
  %2152 = inttoptr i64 %2095 to i32*
  %2153 = load i32, i32* %2152
  %2154 = inttoptr i64 %2089 to i32*
  %2155 = load i32, i32* %2154
  %2156 = sext i32 %2155 to i64
  %2157 = shl nsw i64 %2156, 2
  %2158 = add i64 %2091, %2157
  %2159 = inttoptr i64 %2158 to i32*
  %2160 = load i32, i32* %2159
  %2161 = sext i32 %2160 to i64
  %2162 = mul nsw i64 %2161, 96
  %2163 = add i64 %2162, ptrtoint (%sje_type* @sje to i64)
  %2164 = inttoptr i64 %2224 to i32*
  %2165 = load i32, i32* %2164
  %2166 = sext i32 %2165 to i64
  %2167 = shl nsw i64 %2166, 4
  %2168 = add i64 %2167, %2163
  %2169 = inttoptr i64 %2168 to i32*
  store i32 %2153, i32* %2169
  %2170 = inttoptr i64 %2089 to i32*
  %2171 = load i32, i32* %2170
  %2172 = sext i32 %2171 to i64
  %2173 = shl nsw i64 %2172, 2
  %2174 = add i64 %2091, %2173
  %2175 = inttoptr i64 %2174 to i32*
  %2176 = load i32, i32* %2175
  %2177 = sext i32 %2176 to i64
  %2178 = mul nsw i64 %2177, 48
  %2179 = add i64 %2178, ptrtoint (%ijel_type* @ijel to i64)
  %2180 = inttoptr i64 %2224 to i32*
  %2181 = load i32, i32* %2180
  %2182 = sext i32 %2181 to i64
  %2183 = shl nsw i64 %2182, 3
  %2184 = add i64 %2183, %2179
  %2185 = inttoptr i64 %2184 to i32*
  store i32 0, i32* %2185
  %2186 = inttoptr i64 %2089 to i32*
  %2187 = load i32, i32* %2186
  %2188 = add i32 %2187, 1
  %2189 = inttoptr i64 %2089 to i32*
  store i32 %2188, i32* %2189
  %2190 = add i64 %2150, -154
  br label %block_4025aa

block_401042:                                     ; preds = %block_40101b, %block_400fea
  %2191 = phi i64 [ %2422, %block_40101b ], [ %85, %block_400fea ]
  %2192 = phi %struct.Memory* [ %2440, %block_40101b ], [ %2440, %block_400fea ]
  %2193 = inttoptr i64 %873 to i32*
  %2194 = load i32, i32* %2193
  %2195 = inttoptr i64 %266 to i32*
  %2196 = load i32, i32* %2195
  %2197 = sext i32 %2196 to i64
  %2198 = shl nsw i64 %2197, 2
  %2199 = add i64 %2198, ptrtoint (%mt_to_id_type* @mt_to_id to i64)
  %2200 = inttoptr i64 %2199 to i32*
  store i32 %2194, i32* %2200
  %2201 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2202 = inttoptr i64 %265 to i32*
  %2203 = load i32, i32* %2202
  %2204 = add i32 %2203, %2201
  %2205 = inttoptr i64 %873 to i32*
  %2206 = load i32, i32* %2205
  %2207 = sext i32 %2206 to i64
  %2208 = shl nsw i64 %2207, 2
  %2209 = add i64 %2208, ptrtoint (%ref_front_id_type* @ref_front_id to i64)
  %2210 = inttoptr i64 %2209 to i32*
  store i32 %2204, i32* %2210
  %2211 = inttoptr i64 %870 to i32*
  %2212 = load i32, i32* %2211
  %2213 = add i32 %2212, 1
  %2214 = inttoptr i64 %870 to i32*
  store i32 %2213, i32* %2214
  %2215 = add i64 %2191, -148
  br label %block_400fae

block_402569:                                     ; preds = %block_402564, %block_402394
  %2216 = phi i64 [ %2569, %block_402564 ], [ %703, %block_402394 ]
  %2217 = phi i64 [ 5, %block_402564 ], [ 328, %block_402394 ]
  %2218 = phi %struct.Memory* [ %2568, %block_402564 ], [ %1966, %block_402394 ]
  %2219 = add i64 %2216, %2217
  br label %block_40256e

block_401a5f:                                     ; preds = %block_401926
  %2220 = load i64, i64* %12, align 8
  %2221 = add i64 %2220, -1300
  %2222 = add i64 %2033, 10
  %2223 = inttoptr i64 %2221 to i32*
  store i32 1, i32* %2223
  %2224 = add i64 %2220, -1296
  %2225 = add i64 %2220, -1280
  %2226 = add i64 %2220, -240
  br label %block_401a69

block_402638:                                     ; preds = %block_4025b7
  %2227 = inttoptr i64 %2092 to i32*
  %2228 = load i32, i32* %2227
  %2229 = add i64 %200, 12
  %2230 = inttoptr i64 %2095 to i32*
  store i32 %2228, i32* %2230
  br label %block_402644

block_4027e1:                                     ; preds = %block_402725, %block_4027dc
  %2231 = phi i64 [ %650, %block_402725 ], [ %204, %block_4027dc ]
  %2232 = phi i64 [ 159, %block_402725 ], [ 5, %block_4027dc ]
  %2233 = phi %struct.Memory* [ %1018, %block_402725 ], [ %203, %block_4027dc ]
  %2234 = add i64 %2231, %2232
  store i64 ptrtoint (%ijel_type* @ijel to i64), i64* %6, align 8, !tbaa !1240
  %2235 = inttoptr i64 %2089 to i32*
  %2236 = load i32, i32* %2235
  %2237 = sext i32 %2236 to i64
  %2238 = shl nsw i64 %2237, 2
  %2239 = add i64 %2091, %2238
  %2240 = inttoptr i64 %2239 to i32*
  %2241 = load i32, i32* %2240
  %2242 = sext i32 %2241 to i64
  %2243 = mul nsw i64 %2242, 48
  %2244 = add i64 %2243, ptrtoint (%ijel_type* @ijel to i64)
  %2245 = inttoptr i64 %2224 to i32*
  %2246 = load i32, i32* %2245
  %2247 = sext i32 %2246 to i64
  %2248 = shl nsw i64 %2247, 3
  %2249 = add i64 %2248, %2244
  %2250 = inttoptr i64 %2249 to i32*
  store i32 0, i32* %2250
  %2251 = inttoptr i64 %2089 to i32*
  %2252 = load i32, i32* %2251
  %2253 = sext i32 %2252 to i64
  %2254 = shl nsw i64 %2253, 2
  %2255 = add i64 %2091, %2254
  %2256 = inttoptr i64 %2255 to i32*
  %2257 = load i32, i32* %2256
  %2258 = sext i32 %2257 to i64
  %2259 = mul nsw i64 %2258, 48
  %2260 = inttoptr i64 %2224 to i32*
  %2261 = load i32, i32* %2260
  %2262 = sext i32 %2261 to i64
  %2263 = shl nsw i64 %2262, 3
  %2264 = add i64 %2259, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %2265 = add i64 %2264, %2263
  %2266 = inttoptr i64 %2265 to i32*
  store i32 0, i32* %2266
  %2267 = inttoptr i64 %2092 to i32*
  %2268 = load i32, i32* %2267
  %2269 = inttoptr i64 %2089 to i32*
  %2270 = load i32, i32* %2269
  %2271 = sext i32 %2270 to i64
  %2272 = shl nsw i64 %2271, 2
  %2273 = add i64 %2091, %2272
  %2274 = inttoptr i64 %2273 to i32*
  %2275 = load i32, i32* %2274
  %2276 = sext i32 %2275 to i64
  %2277 = mul nsw i64 %2276, 96
  %2278 = add i64 %2277, ptrtoint (%sje_type* @sje to i64)
  %2279 = inttoptr i64 %2224 to i32*
  %2280 = load i32, i32* %2279
  %2281 = sext i32 %2280 to i64
  %2282 = shl nsw i64 %2281, 4
  %2283 = add i64 %2282, %2278
  %2284 = inttoptr i64 %2283 to i32*
  store i32 %2268, i32* %2284
  %2285 = inttoptr i64 %2092 to i32*
  %2286 = load i32, i32* %2285
  %2287 = sext i32 %2286 to i64
  %2288 = mul nsw i64 %2287, 24
  %2289 = add i64 %2288, ptrtoint (%cbc_type* @cbc to i64)
  %2290 = inttoptr i64 %2086 to i32*
  %2291 = load i32, i32* %2290
  %2292 = sext i32 %2291 to i64
  %2293 = shl nsw i64 %2292, 2
  %2294 = add i64 %2293, %2289
  %2295 = inttoptr i64 %2294 to i32*
  store i32 2, i32* %2295
  %2296 = inttoptr i64 %2089 to i32*
  %2297 = load i32, i32* %2296
  %2298 = sext i32 %2297 to i64
  %2299 = shl nsw i64 %2298, 2
  %2300 = add i64 %2091, %2299
  %2301 = inttoptr i64 %2300 to i32*
  %2302 = load i32, i32* %2301
  %2303 = zext i32 %2302 to i64
  store i64 %2303, i64* %13, align 8, !tbaa !1240
  %2304 = inttoptr i64 %2092 to i32*
  %2305 = load i32, i32* %2304
  %2306 = sext i32 %2305 to i64
  %2307 = mul nsw i64 %2306, 96
  %2308 = add i64 %2307, ptrtoint (%sje_type* @sje to i64)
  %2309 = inttoptr i64 %2086 to i32*
  %2310 = load i32, i32* %2309
  %2311 = sext i32 %2310 to i64
  %2312 = shl nsw i64 %2311, 4
  %2313 = add i64 %2312, %2308
  %2314 = inttoptr i64 %2313 to i32*
  store i32 %2302, i32* %2314
  %2315 = inttoptr i64 %2092 to i32*
  %2316 = load i32, i32* %2315
  %2317 = sext i32 %2316 to i64
  %2318 = mul nsw i64 %2317, 48
  %2319 = add i64 %2318, ptrtoint (%ijel_type* @ijel to i64)
  %2320 = inttoptr i64 %2086 to i32*
  %2321 = load i32, i32* %2320
  %2322 = sext i32 %2321 to i64
  %2323 = shl nsw i64 %2322, 3
  %2324 = add i64 %2323, %2319
  %2325 = inttoptr i64 %2324 to i32*
  store i32 0, i32* %2325
  %2326 = inttoptr i64 %2092 to i32*
  %2327 = load i32, i32* %2326
  %2328 = sext i32 %2327 to i64
  %2329 = mul nsw i64 %2328, 48
  %2330 = load i64, i64* %6, align 8
  %2331 = add i64 %2329, %2330
  %2332 = inttoptr i64 %2086 to i32*
  %2333 = load i32, i32* %2332
  %2334 = sext i32 %2333 to i64
  %2335 = shl nsw i64 %2334, 3
  %2336 = add i64 %2331, 4
  %2337 = add i64 %2336, %2335
  %2338 = inttoptr i64 %2337 to i32*
  store i32 0, i32* %2338
  %2339 = inttoptr i64 %2089 to i32*
  %2340 = load i32, i32* %2339
  %2341 = add i32 %2340, 1
  %2342 = inttoptr i64 %2089 to i32*
  store i32 %2341, i32* %2342
  %2343 = add i64 %2234, -260
  br label %block_4026dd

block_401e2f:                                     ; preds = %block_401da6
  %2344 = inttoptr i64 %2221 to i32*
  %2345 = load i32, i32* %2344
  %2346 = add i32 %2345, 1
  %2347 = inttoptr i64 %2221 to i32*
  store i32 %2346, i32* %2347
  %2348 = add i64 %1097, -160
  br label %block_401d8f

block_40191c:                                     ; preds = %block_4017e3
  %2349 = load i64, i64* %12, align 8
  %2350 = add i64 %2349, -1296
  %2351 = add i64 %100, 10
  %2352 = inttoptr i64 %2350 to i32*
  store i32 2, i32* %2352
  %2353 = add i64 %2349, -1280
  br label %block_401926

block_402426:                                     ; preds = %block_402387
  %2354 = icmp ne i32 %739, 2
  %2355 = select i1 %2354, i64 159, i64 13
  %2356 = add i64 %2458, %2355
  br i1 %2354, label %block_4024c5, label %block_402564.sink.split

block_402a24:                                     ; preds = %block_4010b3
  %2357 = add i64 %1666, -1548
  %2358 = inttoptr i64 %2357 to i32*
  %2359 = load i32, i32* %2358
  %2360 = sext i32 %1673 to i64
  %2361 = mul nsw i64 %2360, 7
  %2362 = and i64 %2361, 4294967295
  store i64 %2362, i64* %7, align 8, !tbaa !1240
  %2363 = trunc i64 %2361 to i32
  %2364 = add i32 %2363, %2359
  store i32 %2364, i32* bitcast (%nelt_type* @nelt to i32*)
  %2365 = add i64 %1666, -16
  %2366 = inttoptr i64 %2365 to i64*
  %2367 = load i64, i64* %2366
  %2368 = inttoptr i64 %2367 to i32*
  %2369 = load i32, i32* %2368
  %2370 = inttoptr i64 %1671 to i32*
  %2371 = load i32, i32* %2370
  %2372 = add i32 %2371, %2369
  %2373 = load i64, i64* %12, align 8
  %2374 = add i64 %2373, -16
  %2375 = inttoptr i64 %2374 to i64*
  %2376 = load i64, i64* %2375
  store i64 %2376, i64* %8, align 8, !tbaa !1240
  %2377 = inttoptr i64 %2376 to i32*
  store i32 %2372, i32* %2377
  %2378 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2379 = sext i32 %2378 to i64
  %2380 = mul i64 %2379, 21474836480
  %2381 = ashr exact i64 %2380, 32
  %2382 = mul i64 %2381, 21474836480
  %2383 = ashr exact i64 %2382, 32
  %2384 = mul nsw i64 %2383, 5
  %2385 = and i64 %2384, 4294967295
  store i64 %2385, i64* %6, align 8, !tbaa !1240
  %2386 = trunc i64 %2384 to i32
  store i32 %2386, i32* bitcast (%ntot_type* @ntot to i32*)
  %2387 = load i64, i64* %11, align 8
  %2388 = add i64 %2387, 1600
  %2389 = icmp ugt i64 %2387, -1601
  %2390 = zext i1 %2389 to i8
  store i8 %2390, i8* %19, align 1, !tbaa !1248
  %2391 = trunc i64 %2388 to i32
  %2392 = and i32 %2391, 255
  %2393 = tail call i32 @llvm.ctpop.i32(i32 %2392) #11
  %2394 = trunc i32 %2393 to i8
  %2395 = and i8 %2394, 1
  %2396 = xor i8 %2395, 1
  store i8 %2396, i8* %20, align 1, !tbaa !1261
  %2397 = xor i64 %2388, %2387
  %2398 = lshr i64 %2397, 4
  %2399 = trunc i64 %2398 to i8
  %2400 = and i8 %2399, 1
  store i8 %2400, i8* %21, align 1, !tbaa !1262
  %2401 = icmp eq i64 %2388, 0
  %2402 = zext i1 %2401 to i8
  store i8 %2402, i8* %22, align 1, !tbaa !1263
  %2403 = lshr i64 %2388, 63
  %2404 = trunc i64 %2403 to i8
  store i8 %2404, i8* %23, align 1, !tbaa !1264
  %2405 = lshr i64 %2387, 63
  %2406 = xor i64 %2403, %2405
  %2407 = add nuw nsw i64 %2406, %2403
  %2408 = icmp eq i64 %2407, 2
  %2409 = zext i1 %2408 to i8
  store i8 %2409, i8* %24, align 1, !tbaa !1265
  %2410 = add i64 %2387, 1608
  %2411 = inttoptr i64 %2388 to i64*
  %2412 = load i64, i64* %2411
  store i64 %2412, i64* %12, align 8, !tbaa !1240
  %2413 = inttoptr i64 %2410 to i64*
  %2414 = load i64, i64* %2413
  store i64 %2414, i64* %3, align 8, !tbaa !1240
  %2415 = add i64 %2387, 1616
  store i64 %2415, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %1667

block_40101b:                                     ; preds = %block_400fc1
  %2416 = inttoptr i64 %265 to i32*
  store i32 %932, i32* %2416
  %2417 = inttoptr i64 %870 to i32*
  %2418 = load i32, i32* %2417
  %2419 = inttoptr i64 %265 to i32*
  %2420 = load i32, i32* %2419
  %2421 = add i32 %2420, %2418
  %2422 = add i64 %924, 39
  %2423 = inttoptr i64 %266 to i32*
  store i32 %2421, i32* %2423
  br label %block_401042

block_402935:                                     ; preds = %block_402942, %block_40292b
  %2424 = phi i64 [ %626, %block_40292b ], [ %1707, %block_402942 ]
  %2425 = phi %struct.Memory* [ %1004, %block_40292b ], [ %2425, %block_402942 ]
  %2426 = inttoptr i64 %2089 to i32*
  %2427 = load i32, i32* %2426
  %2428 = add i32 %2427, -4
  %2429 = lshr i32 %2428, 31
  %2430 = lshr i32 %2427, 31
  %2431 = xor i32 %2429, %2430
  %2432 = add nuw nsw i32 %2431, %2430
  %2433 = icmp eq i32 %2432, 2
  %2434 = icmp ne i32 %2429, 0
  %2435 = xor i1 %2434, %2433
  %2436 = select i1 %2435, i64 13, i64 81
  %2437 = add i64 %2424, %2436
  br i1 %2435, label %block_402942, label %block_402986

block_402587:                                     ; preds = %block_402278
  %2438 = add i64 %1978, 314
  br label %block_402995

block_400fae:                                     ; preds = %block_401042, %block_400fa4
  %2439 = phi i64 [ %263, %block_400fa4 ], [ %2215, %block_401042 ]
  %2440 = phi %struct.Memory* [ %584, %block_400fa4 ], [ %2192, %block_401042 ]
  %2441 = inttoptr i64 %870 to i32*
  %2442 = load i32, i32* %2441
  %2443 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2444 = sub i32 %2442, %2443
  %2445 = lshr i32 %2444, 31
  %2446 = lshr i32 %2442, 31
  %2447 = lshr i32 %2443, 31
  %2448 = xor i32 %2447, %2446
  %2449 = xor i32 %2445, %2446
  %2450 = add nuw nsw i32 %2449, %2448
  %2451 = icmp eq i32 %2450, 2
  %2452 = icmp ne i32 %2445, 0
  %2453 = xor i1 %2452, %2451
  %2454 = select i1 %2453, i64 19, i64 215
  %2455 = add i64 %2439, %2454
  br i1 %2453, label %block_400fc1, label %block_401085

block_402387:                                     ; preds = %block_402285
  %2456 = icmp ne i32 %739, 1
  %2457 = select i1 %2456, i64 159, i64 13
  %2458 = add i64 %742, %2457
  br i1 %2456, label %block_402426, label %block_402394

block_400ee2:                                     ; preds = %block_400eb9, %block_400ed0
  %2459 = phi i64 [ %1037, %block_400ed0 ], [ %2081, %block_400eb9 ]
  %2460 = phi %struct.Memory* [ %1887, %block_400ed0 ], [ %1887, %block_400eb9 ]
  %2461 = inttoptr i64 %57 to i32*
  %2462 = load i32, i32* %2461
  %2463 = add i32 %2462, 1
  %2464 = inttoptr i64 %57 to i32*
  store i32 %2463, i32* %2464
  %2465 = add i64 %2459, -89
  br label %block_400e89

block_40200e:                                     ; preds = %block_402001
  %2466 = inttoptr i64 %2082 to i32*
  %2467 = load i32, i32* %2466
  %2468 = sext i32 %2467 to i64
  %2469 = shl nsw i64 %2468, 5
  %2470 = add i64 %2469, ptrtoint (%le_arr_type* @le_arr to i64)
  %2471 = inttoptr i64 %2085 to i32*
  %2472 = load i32, i32* %2471
  %2473 = sext i32 %2472 to i64
  %2474 = shl nsw i64 %2473, 4
  %2475 = add i64 %2474, %2470
  %2476 = sext i32 %2624 to i64
  %2477 = shl nsw i64 %2476, 2
  %2478 = add i64 %2477, %2475
  %2479 = inttoptr i64 %2478 to i32*
  %2480 = load i32, i32* %2479
  %2481 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2482 = add i32 %2481, %2480
  %2483 = add i64 %2090, %2477
  %2484 = inttoptr i64 %2483 to i32*
  store i32 %2482, i32* %2484
  %2485 = inttoptr i64 %2082 to i32*
  %2486 = load i32, i32* %2485
  %2487 = sext i32 %2486 to i64
  %2488 = shl nsw i64 %2487, 5
  %2489 = add i64 %2488, ptrtoint (%le_arr_type* @le_arr to i64)
  %2490 = inttoptr i64 %2085 to i32*
  %2491 = load i32, i32* %2490
  %2492 = sub i32 1, %2491
  %2493 = sext i32 %2492 to i64
  %2494 = shl nsw i64 %2493, 4
  %2495 = add i64 %2494, %2489
  %2496 = inttoptr i64 %2089 to i32*
  %2497 = load i32, i32* %2496
  %2498 = sext i32 %2497 to i64
  %2499 = shl nsw i64 %2498, 2
  %2500 = add i64 %2499, %2495
  %2501 = inttoptr i64 %2500 to i32*
  %2502 = load i32, i32* %2501
  %2503 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2504 = add i32 %2503, %2502
  %2505 = add i64 %2091, %2499
  %2506 = inttoptr i64 %2505 to i32*
  store i32 %2504, i32* %2506
  %2507 = inttoptr i64 %2089 to i32*
  %2508 = load i32, i32* %2507
  %2509 = add i32 %2508, 1
  %2510 = inttoptr i64 %2089 to i32*
  store i32 %2509, i32* %2510
  %2511 = add i64 %2634, -13
  br label %block_402001

block_402564.sink.split:                          ; preds = %block_402426, %block_4024c5
  %2512 = phi i64 [ %365, %block_4024c5 ], [ %2356, %block_402426 ]
  %2513 = phi i32 [ 1, %block_4024c5 ], [ 0, %block_402426 ]
  %2514 = phi i64 [ 12, %block_4024c5 ], [ 4, %block_402426 ]
  %2515 = phi i64 [ 5, %block_4024c5 ], [ 164, %block_402426 ]
  %2516 = sext i32 %739 to i64
  %2517 = shl nsw i64 %2516, 2
  %2518 = add i64 %2091, %2517
  %2519 = inttoptr i64 %2518 to i32*
  %2520 = load i32, i32* %2519
  %2521 = sext i32 %2520 to i64
  %2522 = mul nsw i64 %2521, 48
  %2523 = add i64 %2522, ptrtoint (%ijel_type* @ijel to i64)
  %2524 = inttoptr i64 %2224 to i32*
  %2525 = load i32, i32* %2524
  %2526 = sext i32 %2525 to i64
  %2527 = shl nsw i64 %2526, 3
  %2528 = add i64 %2527, %2523
  %2529 = inttoptr i64 %2528 to i32*
  store i32 1, i32* %2529
  %2530 = inttoptr i64 %2089 to i32*
  %2531 = load i32, i32* %2530
  %2532 = sext i32 %2531 to i64
  %2533 = shl nsw i64 %2532, 2
  %2534 = add i64 %2091, %2533
  %2535 = inttoptr i64 %2534 to i32*
  %2536 = load i32, i32* %2535
  %2537 = sext i32 %2536 to i64
  %2538 = mul nsw i64 %2537, 48
  %2539 = inttoptr i64 %2224 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sext i32 %2540 to i64
  %2542 = shl nsw i64 %2541, 3
  %2543 = add i64 %2538, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %2544 = add i64 %2543, %2542
  %2545 = inttoptr i64 %2544 to i32*
  store i32 %2513, i32* %2545
  %2546 = inttoptr i64 %2089 to i32*
  %2547 = load i32, i32* %2546
  %2548 = sext i32 %2547 to i64
  %2549 = shl nsw i64 %2548, 2
  %2550 = add i64 %2091, %2549
  %2551 = inttoptr i64 %2550 to i32*
  %2552 = load i32, i32* %2551
  %2553 = inttoptr i64 %2092 to i32*
  %2554 = load i32, i32* %2553
  %2555 = sext i32 %2554 to i64
  %2556 = mul nsw i64 %2555, 96
  %2557 = add i64 %2556, ptrtoint (%sje_type* @sje to i64)
  %2558 = inttoptr i64 %2086 to i32*
  %2559 = load i32, i32* %2558
  %2560 = sext i32 %2559 to i64
  %2561 = shl nsw i64 %2560, 4
  %2562 = add i64 %2561, %2557
  %2563 = or i64 %2562, %2514
  %2564 = add i64 %2512, 141
  %2565 = inttoptr i64 %2563 to i32*
  store i32 %2552, i32* %2565
  br label %block_402564

block_402564:                                     ; preds = %block_402564.sink.split, %block_4024c5
  %2566 = phi i64 [ %365, %block_4024c5 ], [ %2564, %block_402564.sink.split ]
  %2567 = phi i64 [ 5, %block_4024c5 ], [ %2515, %block_402564.sink.split ]
  %2568 = phi %struct.Memory* [ %1966, %block_4024c5 ], [ %1966, %block_402564.sink.split ]
  %2569 = add i64 %2566, %2567
  br label %block_402569

block_4026ea:                                     ; preds = %block_4026dd
  %2570 = sext i32 %1020 to i64
  %2571 = shl nsw i64 %2570, 2
  %2572 = add i64 %2091, %2571
  %2573 = inttoptr i64 %2572 to i32*
  %2574 = load i32, i32* %2573
  %2575 = sext i32 %2574 to i64
  %2576 = mul nsw i64 %2575, 24
  %2577 = add i64 %2576, ptrtoint (%cbc_type* @cbc to i64)
  %2578 = inttoptr i64 %2224 to i32*
  %2579 = load i32, i32* %2578
  %2580 = sext i32 %2579 to i64
  %2581 = shl nsw i64 %2580, 2
  %2582 = add i64 %2581, %2577
  %2583 = inttoptr i64 %2582 to i32*
  store i32 2, i32* %2583
  %2584 = inttoptr i64 %2089 to i32*
  %2585 = load i32, i32* %2584
  %2586 = icmp ne i32 %2585, 0
  %2587 = select i1 %2586, i64 93, i64 59
  %2588 = add i64 %1030, %2587
  br i1 %2586, label %block_402747, label %block_402725

block_402202:                                     ; preds = %block_4021d0
  %2589 = mul nsw i64 %338, 24
  %2590 = add i64 %2589, ptrtoint (%cbc_type* @cbc to i64)
  %2591 = inttoptr i64 %2086 to i32*
  %2592 = load i32, i32* %2591
  %2593 = sext i32 %2592 to i64
  %2594 = shl nsw i64 %2593, 2
  %2595 = add i64 %2594, %2590
  %2596 = inttoptr i64 %2595 to i32*
  store i32 3, i32* %2596
  %2597 = inttoptr i64 %2092 to i32*
  %2598 = load i32, i32* %2597
  %2599 = sext i32 %2598 to i64
  %2600 = mul nsw i64 %2599, 48
  %2601 = add i64 %2600, ptrtoint (%ijel_type* @ijel to i64)
  %2602 = inttoptr i64 %2086 to i32*
  %2603 = load i32, i32* %2602
  %2604 = sext i32 %2603 to i64
  %2605 = shl nsw i64 %2604, 3
  %2606 = add i64 %2605, %2601
  %2607 = inttoptr i64 %2606 to i32*
  store i32 0, i32* %2607
  %2608 = inttoptr i64 %2092 to i32*
  %2609 = load i32, i32* %2608
  %2610 = sext i32 %2609 to i64
  %2611 = mul nsw i64 %2610, 48
  %2612 = inttoptr i64 %2086 to i32*
  %2613 = load i32, i32* %2612
  %2614 = sext i32 %2613 to i64
  %2615 = shl nsw i64 %2614, 3
  %2616 = add i64 %2611, add (i64 ptrtoint (%ijel_type* @ijel to i64), i64 4)
  %2617 = add i64 %2616, %2615
  %2618 = inttoptr i64 %2617 to i32*
  store i32 0, i32* %2618
  %2619 = add i64 %345, 118
  %2620 = inttoptr i64 %2089 to i32*
  store i32 0, i32* %2620
  br label %block_402278

block_402001:                                     ; preds = %block_40200e, %block_401fba
  %2621 = phi i64 [ %156, %block_401fba ], [ %2511, %block_40200e ]
  %2622 = phi %struct.Memory* [ %226, %block_401fba ], [ %2622, %block_40200e ]
  %2623 = inttoptr i64 %2089 to i32*
  %2624 = load i32, i32* %2623
  %2625 = add i32 %2624, -4
  %2626 = lshr i32 %2625, 31
  %2627 = lshr i32 %2624, 31
  %2628 = xor i32 %2626, %2627
  %2629 = add nuw nsw i32 %2628, %2627
  %2630 = icmp eq i32 %2629, 2
  %2631 = icmp ne i32 %2626, 0
  %2632 = xor i1 %2631, %2630
  %2633 = select i1 %2632, i64 13, i64 171
  %2634 = add i64 %2621, %2633
  br i1 %2632, label %block_40200e, label %block_4020ac

block_400f41:                                     ; preds = %block_400f2e
  %2635 = sext i32 %586 to i64
  %2636 = shl nsw i64 %2635, 2
  %2637 = add i64 %2636, ptrtoint (%mt_to_id_old_type* @mt_to_id_old to i64)
  %2638 = inttoptr i64 %2637 to i32*
  %2639 = load i32, i32* %2638
  %2640 = inttoptr i64 %873 to i32*
  store i32 %2639, i32* %2640
  %2641 = inttoptr i64 %873 to i32*
  %2642 = load i32, i32* %2641
  %2643 = sext i32 %2642 to i64
  %2644 = shl nsw i64 %2643, 2
  %2645 = add i64 %2644, ptrtoint (%ich_type* @ich to i64)
  %2646 = inttoptr i64 %2645 to i32*
  %2647 = load i32, i32* %2646
  %2648 = icmp ne i32 %2647, 4
  %2649 = select i1 %2648, i64 74, i64 41
  %2650 = add i64 %600, %2649
  br i1 %2648, label %block_400f8b, label %block_400f6a

block_401600:                                     ; preds = %block_4015f3
  %2651 = inttoptr i64 %810 to double*
  %2652 = load double, double* %2651
  %2653 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2654 = inttoptr i64 %806 to i32*
  %2655 = load i32, i32* %2654
  %2656 = add i32 %2655, %2653
  %2657 = sext i32 %2656 to i64
  %2658 = shl nsw i64 %2657, 6
  %2659 = add i64 %2658, ptrtoint (%xc_type* @xc to i64)
  %2660 = sext i32 %64 to i64
  %2661 = shl nsw i64 %2660, 3
  %2662 = add i64 %2661, %2659
  %2663 = inttoptr i64 %2662 to double*
  store double %2652, double* %2663
  %2664 = inttoptr i64 %811 to double*
  %2665 = load double, double* %2664
  store double %2665, double* %1729, align 1, !tbaa !1246
  store double 0.000000e+00, double* %1730, align 1, !tbaa !1246
  %2666 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %2667 = inttoptr i64 %806 to i32*
  %2668 = load i32, i32* %2667
  %2669 = add i32 %2668, %2666
  %2670 = sext i32 %2669 to i64
  %2671 = shl nsw i64 %2670, 6
  %2672 = add i64 %2671, ptrtoint (%xc_type* @xc to i64)
  %2673 = inttoptr i64 %809 to i32*
  %2674 = load i32, i32* %2673
  %2675 = add i32 %2674, 1
  %2676 = sext i32 %2675 to i64
  %2677 = shl nsw i64 %2676, 3
  %2678 = add i64 %2672, %2677
  %2679 = inttoptr i64 %2678 to double*
  store double %2665, double* %2679
  %2680 = inttoptr i64 %809 to i32*
  %2681 = load i32, i32* %2680
  %2682 = add i32 %2681, 2
  %2683 = inttoptr i64 %809 to i32*
  store i32 %2682, i32* %2683
  %2684 = add i64 %74, -13
  br label %block_4015f3
}

; Function Attrs: noinline
define %struct.Memory* @sub_420380_wtime_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_420380:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -32
  store i64 0, i64* %6, align 8, !tbaa !1240
  %25 = add i64 %14, -16
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %28 = add i64 %1, 28
  %29 = add i64 %14, -48
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  store i64 %17, i64* %8, align 8, !alias.scope !1834, !noalias !1837
  %31 = tail call i64 @gettimeofday(i64 %24, i64 0), !noalias !1834
  %32 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_622080__data_type* @seg_622080__data to i64), i64 16) to i32*)
  %33 = lshr i32 %32, 31
  %34 = trunc i32 %33 to i8
  %35 = load i64, i64* %9, align 8
  %36 = add i64 %35, -28
  %37 = trunc i64 %31 to i32
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = icmp ne i8 %34, 0
  %40 = add i64 %35, -24
  br i1 %39, label %block_4203ad, label %block_4203ba

block_4203ba:                                     ; preds = %block_4203ad, %block_420380
  %41 = phi %struct.Memory* [ %2, %block_4203ad ], [ %2, %block_420380 ]
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 3032) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %10 to double*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = inttoptr i64 %40 to i64*
  %46 = load i64, i64* %45
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_622080__data_type* @seg_622080__data to i64), i64 16) to i32*)
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %5, align 8, !tbaa !1240
  %49 = sub i64 %46, %48
  %50 = sitofp i64 %49 to double
  %51 = bitcast %union.VectorReg* %11 to double*
  %52 = add i64 %35, -16
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = sitofp i64 %54 to double
  %56 = bitcast %union.VectorReg* %12 to double*
  store double %55, double* %56, align 1, !tbaa !1246
  %57 = fmul double %55, %42
  store double %57, double* %43, align 1, !tbaa !1246
  store i64 0, i64* %44, align 1, !tbaa !1246
  %58 = fadd double %50, %57
  store double %58, double* %51, align 1, !tbaa !1246
  %59 = add i64 %35, -8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %4, align 8, !tbaa !1240
  %62 = inttoptr i64 %61 to double*
  store double %58, double* %62
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 32
  %65 = icmp ugt i64 %63, -33
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %18, align 1, !tbaa !1248
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #11
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %19, align 1, !tbaa !1261
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %20, align 1, !tbaa !1262
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %21, align 1, !tbaa !1263
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %22, align 1, !tbaa !1264
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %23, align 1, !tbaa !1265
  %86 = add i64 %63, 40
  %87 = inttoptr i64 %64 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %9, align 8, !tbaa !1240
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %3, align 8, !tbaa !1240
  %91 = add i64 %63, 48
  store i64 %91, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %41

block_4203ad:                                     ; preds = %block_420380
  %92 = inttoptr i64 %40 to i64*
  %93 = load i64, i64* %92
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* inttoptr (i64 add (i64 ptrtoint (%seg_622080__data_type* @seg_622080__data to i64), i64 16) to i32*)
  br label %block_4203ba
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_419a70_transf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_419a70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %15, -16
  %25 = load i64, i64* %8, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %15, -24
  %28 = load i64, i64* %7, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30
  store i64 %31, i64* %8, align 8, !tbaa !1240
  %32 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %6, align 8, !tbaa !1240
  store i64 ptrtoint (%tmult_type* @tmult to i64), i64* %7, align 8, !tbaa !1240
  %34 = add i64 %1, 24624
  %35 = add i64 %1, 48
  %36 = add i64 %15, -512
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  store i64 %36, i64* %9, align 8, !tbaa !1240
  %38 = tail call %struct.Memory* @sub_41faa0_col2(%struct.State* nonnull %0, i64 %34, %struct.Memory* %2)
  %39 = load i64, i64* %10, align 8
  %40 = add i64 %39, -436
  %41 = load i64, i64* %3, align 8
  %42 = add i64 %41, 10
  %43 = inttoptr i64 %40 to i32*
  store i32 0, i32* %43
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %45 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %46 = bitcast [32 x %union.VectorReg]* %11 to double*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %48 = bitcast i64* %47 to double*
  %49 = bitcast %union.VectorReg* %12 to double*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %51 = bitcast %union.VectorReg* %13 to double*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %53 = bitcast [32 x %union.VectorReg]* %11 to i32*
  %54 = getelementptr inbounds i8, i8* %45, i64 4
  %55 = bitcast i8* %54 to i32*
  %56 = bitcast i64* %47 to i32*
  %57 = getelementptr inbounds i8, i8* %45, i64 12
  %58 = bitcast i8* %57 to i32*
  br label %block_419aaa

block_41a7f8:                                     ; preds = %block_41a67a
  %59 = add i64 %1521, 202
  br label %block_41a8c2

block_41afe2:                                     ; preds = %block_41afd5
  %60 = inttoptr i64 %1933 to i32*
  %61 = load i32, i32* %60
  %62 = sext i32 %61 to i64
  %63 = mul nsw i64 %62, 600
  %64 = add i64 %63, ptrtoint (%idel_type* @idel to i64)
  %65 = inttoptr i64 %1934 to i32*
  %66 = load i32, i32* %65
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, 100
  %69 = add i64 %68, %64
  %70 = sext i32 %134 to i64
  %71 = mul nsw i64 %70, 20
  store i64 %71, i64* %6, align 8, !tbaa !1240
  %72 = add i64 %71, %69
  %73 = inttoptr i64 %72 to i32*
  %74 = load i32, i32* %73
  %75 = inttoptr i64 %1935 to i32*
  store i32 %74, i32* %75
  %76 = inttoptr i64 %1933 to i32*
  %77 = load i32, i32* %76
  %78 = sext i32 %77 to i64
  %79 = mul nsw i64 %78, 2400
  %80 = add i64 %79, ptrtoint (%idmo_type* @idmo to i64)
  %81 = inttoptr i64 %1934 to i32*
  %82 = load i32, i32* %81
  %83 = sext i32 %82 to i64
  %84 = mul nsw i64 %83, 400
  %85 = add i64 %84, %80
  %86 = inttoptr i64 %1930 to i32*
  %87 = load i32, i32* %86
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, 20
  %90 = add i64 %89, %85
  %91 = inttoptr i64 %90 to i32*
  %92 = load i32, i32* %91
  %93 = zext i32 %92 to i64
  store i64 %93, i64* %7, align 8, !tbaa !1240
  %94 = inttoptr i64 %1941 to i32*
  store i32 %92, i32* %94
  %95 = inttoptr i64 %1942 to i64*
  %96 = load i64, i64* %95
  %97 = inttoptr i64 %1941 to i32*
  %98 = load i32, i32* %97
  %99 = sext i32 %98 to i64
  %100 = shl nsw i64 %99, 3
  %101 = add i64 %100, %96
  %102 = inttoptr i64 %101 to double*
  %103 = load double, double* %102
  store double %103, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %104 = inttoptr i64 %1943 to i64*
  %105 = load i64, i64* %104
  %106 = inttoptr i64 %1935 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %5, align 8, !tbaa !1240
  %109 = shl nsw i64 %108, 3
  %110 = add i64 %109, %105
  %111 = inttoptr i64 %110 to double*
  store double %103, double* %111
  %112 = inttoptr i64 %1930 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, 1
  %115 = inttoptr i64 %1930 to i32*
  store i32 %114, i32* %115
  %116 = add i64 %145, -13
  br label %block_41afd5

block_41a3df:                                     ; preds = %block_41a4f7, %block_41a3cb
  %117 = phi i64 [ %147, %block_41a3cb ], [ %2089, %block_41a4f7 ]
  %118 = phi %struct.Memory* [ %1493, %block_41a3cb ], [ %1836, %block_41a4f7 ]
  %119 = inttoptr i64 %1692 to i32*
  %120 = load i32, i32* %119
  %121 = add i32 %120, -4
  %122 = lshr i32 %121, 31
  %123 = lshr i32 %120, 31
  %124 = xor i32 %122, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = icmp ne i32 %122, 0
  %128 = xor i1 %127, %126
  %129 = select i1 %128, i64 13, i64 305
  %130 = add i64 %117, %129
  br i1 %128, label %block_41a3ec, label %block_41a510

block_41afd5:                                     ; preds = %block_41afd5.preheader, %block_41afe2
  %131 = phi i64 [ %116, %block_41afe2 ], [ %1931, %block_41afd5.preheader ]
  %132 = phi %struct.Memory* [ %132, %block_41afe2 ], [ %1911, %block_41afd5.preheader ]
  %133 = inttoptr i64 %1930 to i32*
  %134 = load i32, i32* %133
  %135 = add i32 %134, -4
  %136 = lshr i32 %135, 31
  %137 = trunc i32 %136 to i8
  %138 = lshr i32 %134, 31
  %139 = xor i32 %136, %138
  %140 = add nuw nsw i32 %139, %138
  %141 = icmp eq i32 %140, 2
  %142 = icmp ne i8 %137, 0
  %143 = xor i1 %142, %141
  %144 = select i1 %143, i64 13, i64 194
  %145 = add i64 %131, %144
  br i1 %143, label %block_41afe2, label %block_41b097

block_41a3cb:                                     ; preds = %block_41a1bd
  %146 = inttoptr i64 %1691 to i32*
  store i32 4, i32* %146
  %147 = add i64 %1505, 20
  %148 = inttoptr i64 %1692 to i32*
  store i32 1, i32* %148
  br label %block_41a3df

block_41a1ca:                                     ; preds = %block_41a1bd
  %149 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %150 = inttoptr i64 %1689 to i32*
  %151 = load i32, i32* %150
  %152 = sext i32 %151 to i64
  %153 = shl nsw i64 %152, 2
  %154 = add i64 %153, ptrtoint (%v_end_type* @v_end to i64)
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = inttoptr i64 %1692 to i32*
  store i32 %156, i32* %157
  %158 = inttoptr i64 %1693 to i32*
  %159 = load i32, i32* %158
  %160 = sext i32 %159 to i64
  %161 = mul nsw i64 %160, 600
  %162 = add i64 %161, ptrtoint (%idel_type* @idel to i64)
  %163 = inttoptr i64 %1694 to i32*
  %164 = load i32, i32* %163
  %165 = sext i32 %164 to i64
  %166 = mul nsw i64 %165, 100
  %167 = add i64 %166, %162
  %168 = inttoptr i64 %1692 to i32*
  %169 = load i32, i32* %168
  %170 = sext i32 %169 to i64
  %171 = mul nsw i64 %170, 20
  %172 = add i64 %171, %167
  %173 = inttoptr i64 %1691 to i32*
  %174 = load i32, i32* %173
  %175 = sext i32 %174 to i64
  %176 = shl nsw i64 %175, 2
  %177 = add i64 %176, %172
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %7, align 8, !tbaa !1240
  %181 = inttoptr i64 %1695 to i32*
  store i32 %179, i32* %181
  %182 = inttoptr i64 %1698 to i64*
  %183 = load i64, i64* %182
  %184 = inttoptr i64 %1695 to i32*
  %185 = load i32, i32* %184
  %186 = sext i32 %185 to i64
  store i64 %186, i64* %6, align 8, !tbaa !1240
  %187 = shl nsw i64 %186, 3
  %188 = add i64 %187, %183
  %189 = inttoptr i64 %188 to double*
  %190 = load double, double* %189
  %191 = inttoptr i64 %1689 to i32*
  %192 = load i32, i32* %191
  %193 = sext i32 %192 to i64
  %194 = mul nsw i64 %193, 200
  %195 = add i64 %194, %1697
  %196 = inttoptr i64 %1692 to i32*
  %197 = load i32, i32* %196
  %198 = sext i32 %197 to i64
  %199 = mul nsw i64 %198, 40
  %200 = add i64 %199, %195
  %201 = inttoptr i64 %1691 to i32*
  %202 = load i32, i32* %201
  %203 = sext i32 %202 to i64
  %204 = shl nsw i64 %203, 3
  %205 = add i64 %204, %200
  %206 = inttoptr i64 %205 to double*
  %207 = load double, double* %206
  %208 = fmul double %149, %207
  store double %208, double* %46, align 1, !tbaa !1246
  store i64 0, i64* %47, align 1, !tbaa !1246
  %209 = fadd double %190, %208
  store double %209, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  store i64 %186, i64* %5, align 8, !tbaa !1240
  %210 = inttoptr i64 %188 to double*
  store double %209, double* %210
  %211 = add i64 %1505, 195
  %212 = inttoptr i64 %1692 to i32*
  store i32 1, i32* %212
  br label %block_41a28d

block_41b0a1.loopexit:                            ; preds = %block_41a05c
  br label %block_41b0a1

block_41b0a1:                                     ; preds = %block_41b09c, %block_41b0a1.loopexit
  %213 = phi i64 [ %1929, %block_41b09c ], [ %1688, %block_41b0a1.loopexit ]
  %214 = phi i64 [ %1404, %block_41b09c ], [ %1639, %block_41b0a1.loopexit ]
  %215 = phi i64 [ 5, %block_41b09c ], [ 2936, %block_41b0a1.loopexit ]
  %216 = phi %struct.Memory* [ %1405, %block_41b09c ], [ %1622, %block_41b0a1.loopexit ]
  %217 = add i64 %214, %215
  %218 = add i64 %213, -440
  %219 = inttoptr i64 %218 to i32*
  %220 = load i32, i32* %219
  %221 = add i32 %220, 1
  %222 = inttoptr i64 %218 to i32*
  store i32 %221, i32* %222
  %223 = add i64 %217, -5594
  br label %block_419ac7

block_41a1b3:                                     ; preds = %block_41a082
  %224 = add i64 %1491, 10
  %225 = inttoptr i64 %1691 to i32*
  store i32 1, i32* %225
  br label %block_41a1bd

block_41afad:                                     ; preds = %block_41ae95
  %226 = inttoptr i64 %1930 to i32*
  %227 = load i32, i32* %226
  %228 = add i32 %227, 1
  %229 = inttoptr i64 %1930 to i32*
  store i32 %228, i32* %229
  %230 = add i64 %1274, -366
  br label %block_41ae3f

block_41af94:                                     ; preds = %block_41aeac
  %231 = inttoptr i64 %1936 to i32*
  %232 = load i32, i32* %231
  %233 = add i32 %232, 1
  %234 = inttoptr i64 %1936 to i32*
  store i32 %233, i32* %234
  %235 = add i64 %1996, -255
  br label %block_41ae95

block_419d92:                                     ; preds = %block_419d85
  %236 = sext i32 %1582 to i64
  %237 = shl nsw i64 %236, 2
  %238 = add i64 %237, ptrtoint (%v_end_type* @v_end to i64)
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239
  %241 = inttoptr i64 %1395 to i32*
  store i32 %240, i32* %241
  %242 = inttoptr i64 %1396 to i32*
  %243 = load i32, i32* %242
  %244 = sext i32 %243 to i64
  %245 = mul nsw i64 %244, 2400
  %246 = add i64 %245, ptrtoint (%idmo_type* @idmo to i64)
  %247 = inttoptr i64 %1397 to i32*
  %248 = load i32, i32* %247
  %249 = sext i32 %248 to i64
  %250 = mul nsw i64 %249, 400
  %251 = add i64 %250, %246
  %252 = inttoptr i64 %1392 to i32*
  %253 = load i32, i32* %252
  %254 = sext i32 %253 to i64
  %255 = mul nsw i64 %254, 200
  %256 = add i64 %255, %251
  %257 = inttoptr i64 %1387 to i32*
  %258 = load i32, i32* %257
  %259 = sext i32 %258 to i64
  %260 = mul nsw i64 %259, 100
  %261 = add i64 %260, %256
  %262 = inttoptr i64 %1393 to i32*
  %263 = load i32, i32* %262
  %264 = sext i32 %263 to i64
  %265 = mul nsw i64 %264, 20
  %266 = add i64 %265, %261
  %267 = inttoptr i64 %1395 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  %270 = shl nsw i64 %269, 2
  %271 = add i64 %270, %266
  %272 = inttoptr i64 %271 to i32*
  %273 = load i32, i32* %272
  %274 = zext i32 %273 to i64
  store i64 %274, i64* %7, align 8, !tbaa !1240
  %275 = inttoptr i64 %1398 to i32*
  store i32 %273, i32* %275
  %276 = inttoptr i64 %1399 to i64*
  %277 = load i64, i64* %276
  %278 = inttoptr i64 %1398 to i32*
  %279 = load i32, i32* %278
  %280 = sext i32 %279 to i64
  store i64 %280, i64* %6, align 8, !tbaa !1240
  %281 = shl nsw i64 %280, 3
  %282 = add i64 %281, %277
  %283 = inttoptr i64 %282 to double*
  %284 = load double, double* %283
  store double %284, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %285 = inttoptr i64 %1387 to i32*
  %286 = load i32, i32* %285
  %287 = sext i32 %286 to i64
  %288 = mul nsw i64 %287, 200
  %289 = add i64 %288, %1394
  %290 = inttoptr i64 %1393 to i32*
  %291 = load i32, i32* %290
  %292 = sext i32 %291 to i64
  %293 = mul nsw i64 %292, 40
  %294 = add i64 %293, %289
  %295 = inttoptr i64 %1395 to i32*
  %296 = load i32, i32* %295
  %297 = sext i32 %296 to i64
  store i64 %297, i64* %5, align 8, !tbaa !1240
  %298 = shl nsw i64 %297, 3
  %299 = add i64 %298, %294
  %300 = inttoptr i64 %299 to double*
  store double %284, double* %300
  %301 = add i64 %1580, 201
  %302 = inttoptr i64 %1395 to i32*
  store i32 1, i32* %302
  br label %block_419e5b

block_41a980:                                     ; preds = %block_41a973
  %303 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %303, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %304 = inttoptr i64 %1967 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 2400
  %308 = add i64 %307, ptrtoint (%idmo_type* @idmo to i64)
  %309 = inttoptr i64 %1968 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  %312 = mul nsw i64 %311, 400
  %313 = add i64 %312, %308
  %314 = add i64 %313, 200
  %315 = inttoptr i64 %1970 to i32*
  %316 = load i32, i32* %315
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %317, 100
  %319 = add i64 %318, %314
  %320 = sext i32 %378 to i64
  %321 = mul nsw i64 %320, 20
  %322 = add i64 %321, %319
  %323 = add i64 %322, 16
  %324 = inttoptr i64 %323 to i32*
  %325 = load i32, i32* %324
  %326 = inttoptr i64 %1972 to i32*
  store i32 %325, i32* %326
  %327 = inttoptr i64 %1973 to i64*
  %328 = load i64, i64* %327
  %329 = inttoptr i64 %1969 to i32*
  %330 = load i32, i32* %329
  %331 = sext i32 %330 to i64
  store i64 %331, i64* %6, align 8, !tbaa !1240
  %332 = shl nsw i64 %331, 3
  %333 = add i64 %332, %328
  %334 = inttoptr i64 %333 to double*
  %335 = load double, double* %334
  %336 = inttoptr i64 %1970 to i32*
  %337 = load i32, i32* %336
  %338 = sext i32 %337 to i64
  %339 = mul nsw i64 %338, 120
  %340 = add i64 %339, ptrtoint (%qbnew_type* @qbnew to i64)
  %341 = inttoptr i64 %1971 to i32*
  %342 = load i32, i32* %341
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, 24
  %345 = add i64 %344, %340
  %346 = inttoptr i64 %1964 to i32*
  %347 = load i32, i32* %346
  %348 = add i32 %347, -1
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %7, align 8, !tbaa !1240
  %350 = sext i32 %348 to i64
  %351 = shl nsw i64 %350, 3
  %352 = add i64 %345, %351
  %353 = inttoptr i64 %352 to double*
  %354 = load double, double* %353
  %355 = inttoptr i64 %1974 to i64*
  %356 = load i64, i64* %355
  %357 = inttoptr i64 %1972 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  %360 = shl nsw i64 %359, 3
  %361 = add i64 %360, %356
  %362 = inttoptr i64 %361 to double*
  %363 = load double, double* %362
  %364 = fmul double %354, %363
  %365 = fmul double %364, %303
  store double %365, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %52, align 1, !tbaa !1246
  %366 = fadd double %365, %335
  store double %366, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  %367 = inttoptr i64 %333 to double*
  store double %366, double* %367
  %368 = inttoptr i64 %1971 to i32*
  %369 = load i32, i32* %368
  %370 = add i32 %369, 1
  %371 = inttoptr i64 %1971 to i32*
  store i32 %370, i32* %371
  %372 = add i64 %388, -13
  br label %block_41a973

block_419d7b:                                     ; preds = %block_419d69
  %373 = add i64 %1685, 10
  %374 = inttoptr i64 %1393 to i32*
  store i32 0, i32* %374
  br label %block_419d85

block_41a973:                                     ; preds = %block_41a969, %block_41a980
  %375 = phi i64 [ %443, %block_41a969 ], [ %372, %block_41a980 ]
  %376 = phi %struct.Memory* [ %2226, %block_41a969 ], [ %376, %block_41a980 ]
  %377 = inttoptr i64 %1971 to i32*
  %378 = load i32, i32* %377
  %379 = add i32 %378, -5
  %380 = lshr i32 %379, 31
  %381 = lshr i32 %378, 31
  %382 = xor i32 %380, %381
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = icmp ne i32 %380, 0
  %386 = xor i1 %385, %384
  %387 = select i1 %386, i64 13, i64 240
  %388 = add i64 %375, %387
  br i1 %386, label %block_41a980, label %block_41aa63

block_41ab6d:                                     ; preds = %block_41aa95, %block_41ab68
  %389 = phi i64 [ %1450, %block_41aa95 ], [ %445, %block_41ab68 ]
  %390 = phi %struct.Memory* [ %522, %block_41aa95 ], [ %1821, %block_41ab68 ]
  %391 = inttoptr i64 %1967 to i32*
  %392 = load i32, i32* %391
  %393 = sext i32 %392 to i64
  %394 = mul nsw i64 %393, 2400
  %395 = add i64 %394, ptrtoint (%idmo_type* @idmo to i64)
  %396 = inttoptr i64 %1968 to i32*
  %397 = load i32, i32* %396
  %398 = sext i32 %397 to i64
  %399 = mul nsw i64 %398, 400
  %400 = add i64 %399, %395
  %401 = add i64 %400, 184
  %402 = inttoptr i64 %401 to i32*
  %403 = load i32, i32* %402
  %404 = add i32 %403, 1
  %405 = icmp eq i32 %404, 0
  %406 = select i1 %405, i64 459, i64 57
  %407 = add i64 %389, %406
  %408 = load i64, i64* %10, align 8
  %409 = add i64 %408, -476
  %410 = add i64 %407, 10
  %411 = inttoptr i64 %409 to i32*
  store i32 1, i32* %411
  %412 = add i64 %408, -436
  %413 = add i64 %408, -440
  %414 = add i64 %408, -488
  br i1 %405, label %block_41ad42.preheader, label %block_41abb0.preheader

block_41abb0.preheader:                           ; preds = %block_41ab6d
  %415 = add i64 %408, -464
  %416 = add i64 %408, -480
  %417 = add i64 %408, -484
  %418 = add i64 %408, -16
  %419 = add i64 %408, -8
  br label %block_41abb0

block_41ad42.preheader:                           ; preds = %block_41ab6d
  %420 = add i64 %408, -484
  %421 = add i64 %408, -8
  %422 = add i64 %408, -16
  br label %block_41ad42

block_41abbd:                                     ; preds = %block_41abb0
  %423 = inttoptr i64 %412 to i32*
  %424 = load i32, i32* %423
  %425 = sext i32 %424 to i64
  %426 = mul nsw i64 %425, 600
  %427 = add i64 %426, ptrtoint (%idel_type* @idel to i64)
  %428 = inttoptr i64 %413 to i32*
  %429 = load i32, i32* %428
  %430 = sext i32 %429 to i64
  %431 = mul nsw i64 %430, 100
  %432 = add i64 %431, %427
  %433 = sext i32 %2213 to i64
  %434 = shl nsw i64 %433, 2
  %435 = add i64 %432, 80
  %436 = add i64 %435, %434
  %437 = inttoptr i64 %436 to i32*
  %438 = load i32, i32* %437
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %6, align 8, !tbaa !1240
  %440 = inttoptr i64 %414 to i32*
  store i32 %438, i32* %440
  %441 = add i64 %2224, 68
  %442 = inttoptr i64 %415 to i32*
  store i32 0, i32* %442
  br label %block_41ac01

block_41a969:                                     ; preds = %block_41a95c
  %443 = add i64 %2238, 10
  %444 = inttoptr i64 %1971 to i32*
  store i32 0, i32* %444
  br label %block_41a973

block_41ab68:                                     ; preds = %block_41aaa4
  %445 = add i64 %1834, 5
  br label %block_41ab6d

block_419d5f:                                     ; preds = %block_419d4d
  %446 = add i64 %480, 10
  %447 = inttoptr i64 %1392 to i32*
  store i32 0, i32* %447
  br label %block_419d69

block_41a54f:                                     ; preds = %block_41a55c, %block_41a545
  %448 = phi i64 [ %1275, %block_41a545 ], [ %2063, %block_41a55c ]
  %449 = phi %struct.Memory* [ %777, %block_41a545 ], [ %449, %block_41a55c ]
  %450 = inttoptr i64 %490 to i32*
  %451 = load i32, i32* %450
  %452 = add i32 %451, -4
  %453 = lshr i32 %452, 31
  %454 = lshr i32 %451, 31
  %455 = xor i32 %453, %454
  %456 = add nuw nsw i32 %455, %454
  %457 = icmp eq i32 %456, 2
  %458 = icmp ne i32 %453, 0
  %459 = xor i1 %458, %457
  %460 = select i1 %459, i64 13, i64 210
  %461 = add i64 %448, %460
  br i1 %459, label %block_41a55c, label %block_41a621

block_419d4d:                                     ; preds = %block_41a039, %block_419d2c
  %462 = phi i64 [ %1389, %block_419d2c ], [ %1904, %block_41a039 ]
  %463 = phi %struct.Memory* [ %1385, %block_419d2c ], [ %1669, %block_41a039 ]
  %464 = inttoptr i64 %1387 to i32*
  %465 = load i32, i32* %464
  %466 = inttoptr i64 %1391 to i32*
  %467 = load i32, i32* %466
  %468 = sub i32 %465, %467
  %469 = lshr i32 %468, 31
  %470 = trunc i32 %469 to i8
  %471 = lshr i32 %465, 31
  %472 = lshr i32 %467, 31
  %473 = xor i32 %472, %471
  %474 = xor i32 %469, %471
  %475 = add nuw nsw i32 %474, %473
  %476 = icmp eq i32 %475, 2
  %477 = icmp ne i8 %470, 0
  %478 = xor i1 %477, %476
  %479 = select i1 %478, i64 18, i64 773
  %480 = add i64 %462, %479
  br i1 %478, label %block_419d5f, label %block_41a052

block_41a7df:                                     ; preds = %block_41a6ca
  %481 = inttoptr i64 %1872 to i32*
  %482 = load i32, i32* %481
  %483 = add i32 %482, 1
  %484 = inttoptr i64 %1872 to i32*
  store i32 %483, i32* %484
  %485 = add i64 %1158, -357
  br label %block_41a67a

block_41ad33:                                     ; preds = %block_41abb0
  %486 = add i64 %2224, 204
  br label %block_41adff

block_41a52e:                                     ; preds = %block_419d1f
  %487 = add i64 %1032, -472
  %488 = add i64 %1284, 10
  %489 = inttoptr i64 %487 to i32*
  store i32 1, i32* %489
  %490 = add i64 %1032, -476
  %491 = add i64 %1032, -436
  %492 = add i64 %1032, -488
  %493 = add i64 %1032, -484
  %494 = add i64 %1032, -8
  %495 = add i64 %1032, -16
  br label %block_41a538

block_41ad1a:                                     ; preds = %block_41ac01
  %496 = inttoptr i64 %409 to i32*
  %497 = load i32, i32* %496
  %498 = add i32 %497, 1
  %499 = inttoptr i64 %409 to i32*
  store i32 %498, i32* %499
  %500 = add i64 %2267, -362
  br label %block_41abb0

block_41a912:                                     ; preds = %block_41a905
  %501 = inttoptr i64 %1967 to i32*
  %502 = load i32, i32* %501
  %503 = sext i32 %502 to i64
  %504 = mul nsw i64 %503, 600
  %505 = add i64 %504, ptrtoint (%idel_type* @idel to i64)
  %506 = inttoptr i64 %1968 to i32*
  %507 = load i32, i32* %506
  %508 = sext i32 %507 to i64
  %509 = mul nsw i64 %508, 100
  %510 = add i64 %509, %505
  %511 = sext i32 %524 to i64
  %512 = mul nsw i64 %511, 20
  %513 = add i64 %512, %510
  %514 = add i64 %513, 16
  %515 = inttoptr i64 %514 to i32*
  %516 = load i32, i32* %515
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %6, align 8, !tbaa !1240
  %518 = inttoptr i64 %1969 to i32*
  store i32 %516, i32* %518
  %519 = add i64 %535, 74
  %520 = inttoptr i64 %1970 to i32*
  store i32 0, i32* %520
  br label %block_41a95c

block_41a905:                                     ; preds = %block_41a905.preheader, %block_41aa7c
  %521 = phi i64 [ %1541, %block_41aa7c ], [ %1965, %block_41a905.preheader ]
  %522 = phi %struct.Memory* [ %2226, %block_41aa7c ], [ %1945, %block_41a905.preheader ]
  %523 = inttoptr i64 %1964 to i32*
  %524 = load i32, i32* %523
  %525 = add i32 %524, -4
  %526 = lshr i32 %525, 31
  %527 = trunc i32 %526 to i8
  %528 = lshr i32 %524, 31
  %529 = xor i32 %526, %528
  %530 = add nuw nsw i32 %529, %528
  %531 = icmp eq i32 %530, 2
  %532 = icmp ne i8 %527, 0
  %533 = xor i1 %532, %531
  %534 = select i1 %533, i64 13, i64 400
  %535 = add i64 %521, %534
  br i1 %533, label %block_41a912, label %block_41aa95

block_41ad01:                                     ; preds = %block_41ac18
  %536 = inttoptr i64 %415 to i32*
  %537 = load i32, i32* %536
  %538 = add i32 %537, 1
  %539 = inttoptr i64 %415 to i32*
  store i32 %538, i32* %539
  %540 = add i64 %2145, -256
  br label %block_41ac01

block_41afc6:                                     ; preds = %block_41ae3f
  %541 = add i64 %1819, 214
  br label %block_41b09c

block_41a2f8:                                     ; preds = %block_41a2eb
  %542 = inttoptr i64 %1698 to i64*
  %543 = load i64, i64* %542
  %544 = inttoptr i64 %1695 to i32*
  %545 = load i32, i32* %544
  %546 = sext i32 %545 to i64
  store i64 %546, i64* %7, align 8, !tbaa !1240
  %547 = shl nsw i64 %546, 3
  %548 = add i64 %547, %543
  %549 = inttoptr i64 %548 to double*
  %550 = load double, double* %549
  %551 = inttoptr i64 %1689 to i32*
  %552 = load i32, i32* %551
  %553 = sext i32 %552 to i64
  %554 = mul nsw i64 %553, 120
  %555 = add i64 %554, ptrtoint (%qbnew_type* @qbnew to i64)
  %556 = sext i32 %1526 to i64
  %557 = mul nsw i64 %556, 24
  %558 = add i64 %557, %555
  %559 = inttoptr i64 %1692 to i32*
  %560 = load i32, i32* %559
  %561 = add i32 %560, -1
  %562 = zext i32 %561 to i64
  store i64 %562, i64* %8, align 8, !tbaa !1240
  %563 = sext i32 %561 to i64
  store i64 %563, i64* %6, align 8, !tbaa !1240
  %564 = shl nsw i64 %563, 3
  %565 = add i64 %558, %564
  %566 = inttoptr i64 %565 to double*
  %567 = load double, double* %566
  %568 = mul nsw i64 %553, 200
  %569 = add i64 %568, %1697
  %570 = mul nsw i64 %556, 40
  %571 = add i64 %570, %569
  %572 = inttoptr i64 %1691 to i32*
  %573 = load i32, i32* %572
  %574 = sext i32 %573 to i64
  %575 = shl nsw i64 %574, 3
  %576 = add i64 %575, %571
  %577 = inttoptr i64 %576 to double*
  %578 = load double, double* %577
  %579 = fmul double %567, %578
  store double %579, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  %580 = fadd double %550, %579
  store double %580, double* %46, align 1, !tbaa !1246
  store i64 0, i64* %47, align 1, !tbaa !1246
  store i64 %546, i64* %5, align 8, !tbaa !1240
  %581 = inttoptr i64 %548 to double*
  store double %580, double* %581
  %582 = inttoptr i64 %1696 to i32*
  %583 = load i32, i32* %582
  %584 = add i32 %583, 1
  %585 = inttoptr i64 %1696 to i32*
  store i32 %584, i32* %585
  %586 = add i64 %1536, -13
  br label %block_41a2eb

block_41a0ed:                                     ; preds = %block_41a0e0
  %587 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %587, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %588 = inttoptr i64 %1698 to i64*
  %589 = load i64, i64* %588
  %590 = inttoptr i64 %1695 to i32*
  %591 = load i32, i32* %590
  %592 = sext i32 %591 to i64
  store i64 %592, i64* %7, align 8, !tbaa !1240
  %593 = shl nsw i64 %592, 3
  %594 = add i64 %593, %589
  %595 = inttoptr i64 %594 to double*
  %596 = load double, double* %595
  %597 = inttoptr i64 %1689 to i32*
  %598 = load i32, i32* %597
  %599 = sext i32 %598 to i64
  %600 = mul nsw i64 %599, 120
  %601 = add i64 %600, ptrtoint (%qbnew_type* @qbnew to i64)
  %602 = sext i32 %1433 to i64
  %603 = mul nsw i64 %602, 24
  %604 = add i64 %603, %601
  %605 = inttoptr i64 %1692 to i32*
  %606 = load i32, i32* %605
  %607 = add i32 %606, -1
  %608 = zext i32 %607 to i64
  store i64 %608, i64* %8, align 8, !tbaa !1240
  %609 = sext i32 %607 to i64
  store i64 %609, i64* %6, align 8, !tbaa !1240
  %610 = shl nsw i64 %609, 3
  %611 = add i64 %604, %610
  %612 = inttoptr i64 %611 to double*
  %613 = load double, double* %612
  %614 = mul nsw i64 %599, 200
  %615 = add i64 %614, %1697
  %616 = mul nsw i64 %602, 40
  %617 = add i64 %616, %615
  %618 = inttoptr i64 %1691 to i32*
  %619 = load i32, i32* %618
  %620 = sext i32 %619 to i64
  %621 = shl nsw i64 %620, 3
  %622 = add i64 %621, %617
  %623 = inttoptr i64 %622 to double*
  %624 = load double, double* %623
  %625 = fmul double %613, %624
  %626 = fmul double %625, %587
  store double %626, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %52, align 1, !tbaa !1246
  %627 = fadd double %626, %596
  store double %627, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  store i64 %592, i64* %5, align 8, !tbaa !1240
  %628 = inttoptr i64 %594 to double*
  store double %627, double* %628
  %629 = inttoptr i64 %1696 to i32*
  %630 = load i32, i32* %629
  %631 = add i32 %630, 1
  %632 = inttoptr i64 %1696 to i32*
  store i32 %631, i32* %632
  %633 = add i64 %1443, -13
  br label %block_41a0e0

block_41a6e1:                                     ; preds = %block_41a6ee, %block_41a6d7
  %634 = phi i64 [ %795, %block_41a6d7 ], [ %1114, %block_41a6ee ]
  %635 = phi %struct.Memory* [ %1146, %block_41a6d7 ], [ %635, %block_41a6ee ]
  %636 = inttoptr i64 %1879 to i32*
  %637 = load i32, i32* %636
  %638 = add i32 %637, -5
  %639 = lshr i32 %638, 31
  %640 = lshr i32 %637, 31
  %641 = xor i32 %639, %640
  %642 = add nuw nsw i32 %641, %640
  %643 = icmp eq i32 %642, 2
  %644 = icmp ne i32 %639, 0
  %645 = xor i1 %644, %643
  %646 = select i1 %645, i64 13, i64 229
  %647 = add i64 %634, %646
  br i1 %645, label %block_41a6ee, label %block_41a7c6

block_41ad4f:                                     ; preds = %block_41ad42
  %648 = inttoptr i64 %412 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  %651 = mul nsw i64 %650, 600
  %652 = add i64 %651, ptrtoint (%idel_type* @idel to i64)
  %653 = inttoptr i64 %413 to i32*
  %654 = load i32, i32* %653
  %655 = sext i32 %654 to i64
  %656 = mul nsw i64 %655, 100
  %657 = add i64 %656, %652
  %658 = sext i32 %2120 to i64
  store i64 %658, i64* %6, align 8, !tbaa !1240
  %659 = shl nsw i64 %658, 2
  %660 = add i64 %657, 80
  %661 = add i64 %660, %659
  %662 = inttoptr i64 %661 to i32*
  %663 = load i32, i32* %662
  %664 = inttoptr i64 %414 to i32*
  store i32 %663, i32* %664
  %665 = inttoptr i64 %412 to i32*
  %666 = load i32, i32* %665
  %667 = sext i32 %666 to i64
  %668 = mul nsw i64 %667, 2400
  %669 = add i64 %668, ptrtoint (%idmo_type* @idmo to i64)
  %670 = inttoptr i64 %413 to i32*
  %671 = load i32, i32* %670
  %672 = sext i32 %671 to i64
  %673 = mul nsw i64 %672, 400
  %674 = add i64 %673, %669
  %675 = inttoptr i64 %409 to i32*
  %676 = load i32, i32* %675
  %677 = sext i32 %676 to i64
  %678 = shl nsw i64 %677, 2
  %679 = add i64 %674, 80
  %680 = add i64 %679, %678
  %681 = inttoptr i64 %680 to i32*
  %682 = load i32, i32* %681
  %683 = zext i32 %682 to i64
  store i64 %683, i64* %7, align 8, !tbaa !1240
  %684 = inttoptr i64 %420 to i32*
  store i32 %682, i32* %684
  %685 = inttoptr i64 %421 to i64*
  %686 = load i64, i64* %685
  %687 = inttoptr i64 %420 to i32*
  %688 = load i32, i32* %687
  %689 = sext i32 %688 to i64
  %690 = shl nsw i64 %689, 3
  %691 = add i64 %690, %686
  %692 = inttoptr i64 %691 to double*
  %693 = load double, double* %692
  store double %693, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %694 = inttoptr i64 %422 to i64*
  %695 = load i64, i64* %694
  %696 = inttoptr i64 %414 to i32*
  %697 = load i32, i32* %696
  %698 = sext i32 %697 to i64
  %699 = shl nsw i64 %698, 3
  %700 = add i64 %699, %695
  %701 = inttoptr i64 %700 to double*
  store double %693, double* %701
  %702 = inttoptr i64 %409 to i32*
  %703 = load i32, i32* %702
  %704 = add i32 %703, 1
  %705 = inttoptr i64 %409 to i32*
  store i32 %704, i32* %705
  %706 = add i64 %2131, -13
  br label %block_41ad42

block_41ac25:                                     ; preds = %block_41ac18
  %707 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %707, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %708 = inttoptr i64 %412 to i32*
  %709 = load i32, i32* %708
  %710 = sext i32 %709 to i64
  %711 = mul nsw i64 %710, 2400
  %712 = add i64 %711, ptrtoint (%idmo_type* @idmo to i64)
  %713 = inttoptr i64 %413 to i32*
  %714 = load i32, i32* %713
  %715 = sext i32 %714 to i64
  %716 = mul nsw i64 %715, 400
  %717 = add i64 %716, %712
  %718 = inttoptr i64 %415 to i32*
  %719 = load i32, i32* %718
  %720 = sext i32 %719 to i64
  %721 = mul nsw i64 %720, 200
  %722 = add i64 %721, %717
  %723 = sext i32 %2135 to i64
  %724 = shl nsw i64 %723, 2
  %725 = add i64 %722, 180
  %726 = add i64 %725, %724
  %727 = inttoptr i64 %726 to i32*
  %728 = load i32, i32* %727
  %729 = inttoptr i64 %417 to i32*
  store i32 %728, i32* %729
  %730 = inttoptr i64 %418 to i64*
  %731 = load i64, i64* %730
  %732 = inttoptr i64 %414 to i32*
  %733 = load i32, i32* %732
  %734 = sext i32 %733 to i64
  store i64 %734, i64* %6, align 8, !tbaa !1240
  %735 = shl nsw i64 %734, 3
  %736 = add i64 %735, %731
  %737 = inttoptr i64 %736 to double*
  %738 = load double, double* %737
  %739 = inttoptr i64 %415 to i32*
  %740 = load i32, i32* %739
  %741 = sext i32 %740 to i64
  %742 = mul nsw i64 %741, 120
  %743 = add i64 %742, ptrtoint (%qbnew_type* @qbnew to i64)
  %744 = inttoptr i64 %416 to i32*
  %745 = load i32, i32* %744
  %746 = sext i32 %745 to i64
  %747 = mul nsw i64 %746, 24
  %748 = add i64 %747, %743
  %749 = inttoptr i64 %409 to i32*
  %750 = load i32, i32* %749
  %751 = add i32 %750, -1
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %7, align 8, !tbaa !1240
  %753 = sext i32 %751 to i64
  %754 = shl nsw i64 %753, 3
  %755 = add i64 %748, %754
  %756 = inttoptr i64 %755 to double*
  %757 = load double, double* %756
  %758 = inttoptr i64 %419 to i64*
  %759 = load i64, i64* %758
  %760 = inttoptr i64 %417 to i32*
  %761 = load i32, i32* %760
  %762 = sext i32 %761 to i64
  %763 = shl nsw i64 %762, 3
  %764 = add i64 %763, %759
  %765 = inttoptr i64 %764 to double*
  %766 = load double, double* %765
  %767 = fmul double %757, %766
  %768 = fmul double %767, %707
  store double %768, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %52, align 1, !tbaa !1246
  %769 = fadd double %768, %738
  store double %769, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  %770 = inttoptr i64 %736 to double*
  store double %769, double* %770
  %771 = inttoptr i64 %416 to i32*
  %772 = load i32, i32* %771
  %773 = add i32 %772, 1
  %774 = inttoptr i64 %416 to i32*
  store i32 %773, i32* %774
  %775 = add i64 %2145, -13
  br label %block_41ac18

block_41a538:                                     ; preds = %block_41a621, %block_41a52e
  %776 = phi i64 [ %488, %block_41a52e ], [ %2094, %block_41a621 ]
  %777 = phi %struct.Memory* [ %1278, %block_41a52e ], [ %449, %block_41a621 ]
  %778 = inttoptr i64 %487 to i32*
  %779 = load i32, i32* %778
  %780 = add i32 %779, -4
  %781 = lshr i32 %780, 31
  %782 = lshr i32 %779, 31
  %783 = xor i32 %781, %782
  %784 = add nuw nsw i32 %783, %782
  %785 = icmp eq i32 %784, 2
  %786 = icmp ne i32 %781, 0
  %787 = xor i1 %786, %785
  %788 = select i1 %787, i64 13, i64 258
  %789 = add i64 %776, %788
  br i1 %787, label %block_41a545, label %block_41a63a

block_41a19a:                                     ; preds = %block_41a0e0
  %790 = inttoptr i64 %1692 to i32*
  %791 = load i32, i32* %790
  %792 = add i32 %791, 1
  %793 = inttoptr i64 %1692 to i32*
  store i32 %792, i32* %793
  %794 = add i64 %1443, -280
  br label %block_41a082

block_41a6d7:                                     ; preds = %block_41a6ca
  %795 = add i64 %1158, 10
  %796 = inttoptr i64 %1879 to i32*
  store i32 0, i32* %796
  br label %block_41a6e1

block_419ad4:                                     ; preds = %block_419ac7
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%idel_type* @idel to i64), i64* %6, align 8, !tbaa !1240
  %797 = add i64 %1160, -436
  %798 = inttoptr i64 %797 to i32*
  %799 = load i32, i32* %798
  %800 = sext i32 %799 to i64
  %801 = mul nsw i64 %800, 600
  %802 = add i64 %801, ptrtoint (%idel_type* @idel to i64)
  %803 = sext i32 %1164 to i64
  %804 = mul nsw i64 %803, 100
  %805 = add i64 %804, %802
  %806 = inttoptr i64 %805 to i32*
  %807 = load i32, i32* %806
  %808 = load i64, i64* %10, align 8
  %809 = add i64 %808, -444
  %810 = inttoptr i64 %809 to i32*
  store i32 %807, i32* %810
  %811 = add i64 %808, -436
  %812 = inttoptr i64 %811 to i32*
  %813 = load i32, i32* %812
  %814 = sext i32 %813 to i64
  %815 = mul nsw i64 %814, 600
  %816 = load i64, i64* %6, align 8
  %817 = add i64 %815, %816
  %818 = add i64 %808, -440
  %819 = inttoptr i64 %818 to i32*
  %820 = load i32, i32* %819
  %821 = sext i32 %820 to i64
  %822 = mul nsw i64 %821, 100
  %823 = add i64 %822, %817
  %824 = add i64 %823, 16
  %825 = inttoptr i64 %824 to i32*
  %826 = load i32, i32* %825
  %827 = load i64, i64* %10, align 8
  %828 = add i64 %827, -448
  %829 = inttoptr i64 %828 to i32*
  store i32 %826, i32* %829
  %830 = add i64 %827, -436
  %831 = inttoptr i64 %830 to i32*
  %832 = load i32, i32* %831
  %833 = sext i32 %832 to i64
  %834 = mul nsw i64 %833, 600
  %835 = load i64, i64* %6, align 8
  %836 = add i64 %834, %835
  %837 = add i64 %827, -440
  %838 = inttoptr i64 %837 to i32*
  %839 = load i32, i32* %838
  %840 = sext i32 %839 to i64
  %841 = mul nsw i64 %840, 100
  %842 = add i64 %841, %836
  store i64 %842, i64* %8, align 8, !tbaa !1240
  %843 = add i64 %842, 80
  %844 = inttoptr i64 %843 to i32*
  %845 = load i32, i32* %844
  %846 = load i64, i64* %10, align 8
  %847 = add i64 %846, -452
  %848 = inttoptr i64 %847 to i32*
  store i32 %845, i32* %848
  %849 = add i64 %846, -436
  %850 = inttoptr i64 %849 to i32*
  %851 = load i32, i32* %850
  %852 = sext i32 %851 to i64
  %853 = mul nsw i64 %852, 600
  %854 = load i64, i64* %6, align 8
  %855 = add i64 %853, %854
  %856 = add i64 %846, -440
  %857 = inttoptr i64 %856 to i32*
  %858 = load i32, i32* %857
  %859 = sext i32 %858 to i64
  %860 = mul nsw i64 %859, 100
  %861 = add i64 %860, %855
  %862 = add i64 %861, 96
  %863 = inttoptr i64 %862 to i32*
  %864 = load i32, i32* %863
  %865 = load i64, i64* %10, align 8
  %866 = add i64 %865, -456
  %867 = inttoptr i64 %866 to i32*
  store i32 %864, i32* %867
  %868 = add i64 %865, -436
  %869 = inttoptr i64 %868 to i32*
  %870 = load i32, i32* %869
  %871 = sext i32 %870 to i64
  %872 = mul nsw i64 %871, 2400
  %873 = load i64, i64* %5, align 8
  %874 = add i64 %872, %873
  %875 = add i64 %865, -440
  %876 = inttoptr i64 %875 to i32*
  %877 = load i32, i32* %876
  %878 = sext i32 %877 to i64
  %879 = mul nsw i64 %878, 400
  %880 = add i64 %879, %874
  %881 = inttoptr i64 %880 to i32*
  %882 = load i32, i32* %881
  %883 = load i64, i64* %10, align 8
  %884 = add i64 %883, -420
  %885 = inttoptr i64 %884 to i32*
  store i32 %882, i32* %885
  %886 = add i64 %883, -436
  %887 = inttoptr i64 %886 to i32*
  %888 = load i32, i32* %887
  %889 = sext i32 %888 to i64
  %890 = mul nsw i64 %889, 2400
  %891 = load i64, i64* %5, align 8
  %892 = add i64 %890, %891
  %893 = add i64 %883, -440
  %894 = inttoptr i64 %893 to i32*
  %895 = load i32, i32* %894
  %896 = sext i32 %895 to i64
  %897 = mul nsw i64 %896, 400
  %898 = add i64 %897, %892
  %899 = add i64 %898, 216
  %900 = inttoptr i64 %899 to i32*
  %901 = load i32, i32* %900
  %902 = load i64, i64* %10, align 8
  %903 = add i64 %902, -424
  %904 = inttoptr i64 %903 to i32*
  store i32 %901, i32* %904
  %905 = add i64 %902, -436
  %906 = inttoptr i64 %905 to i32*
  %907 = load i32, i32* %906
  %908 = sext i32 %907 to i64
  %909 = mul nsw i64 %908, 2400
  %910 = load i64, i64* %5, align 8
  %911 = add i64 %909, %910
  %912 = add i64 %902, -440
  %913 = inttoptr i64 %912 to i32*
  %914 = load i32, i32* %913
  %915 = sext i32 %914 to i64
  %916 = mul nsw i64 %915, 400
  %917 = add i64 %916, %911
  store i64 %917, i64* %7, align 8, !tbaa !1240
  %918 = add i64 %917, 180
  %919 = inttoptr i64 %918 to i32*
  %920 = load i32, i32* %919
  %921 = load i64, i64* %10, align 8
  %922 = add i64 %921, -428
  %923 = inttoptr i64 %922 to i32*
  store i32 %920, i32* %923
  %924 = add i64 %921, -436
  %925 = inttoptr i64 %924 to i32*
  %926 = load i32, i32* %925
  %927 = sext i32 %926 to i64
  %928 = mul nsw i64 %927, 2400
  %929 = load i64, i64* %5, align 8
  %930 = add i64 %928, %929
  %931 = add i64 %921, -440
  %932 = inttoptr i64 %931 to i32*
  %933 = load i32, i32* %932
  %934 = sext i32 %933 to i64
  %935 = mul nsw i64 %934, 400
  %936 = add i64 %935, %930
  %937 = add i64 %936, 396
  %938 = inttoptr i64 %937 to i32*
  %939 = load i32, i32* %938
  %940 = zext i32 %939 to i64
  store i64 %940, i64* %44, align 8, !tbaa !1240
  %941 = load i64, i64* %10, align 8
  %942 = add i64 %941, -432
  %943 = inttoptr i64 %942 to i32*
  store i32 %939, i32* %943
  %944 = add i64 %941, -8
  %945 = inttoptr i64 %944 to i64*
  %946 = load i64, i64* %945
  %947 = add i64 %941, -420
  %948 = inttoptr i64 %947 to i32*
  %949 = load i32, i32* %948
  %950 = sext i32 %949 to i64
  %951 = shl nsw i64 %950, 3
  %952 = add i64 %951, %946
  %953 = inttoptr i64 %952 to double*
  %954 = load double, double* %953
  %955 = add i64 %941, -16
  %956 = inttoptr i64 %955 to i64*
  %957 = load i64, i64* %956
  %958 = add i64 %941, -444
  %959 = inttoptr i64 %958 to i32*
  %960 = load i32, i32* %959
  %961 = sext i32 %960 to i64
  %962 = shl nsw i64 %961, 3
  %963 = add i64 %962, %957
  %964 = inttoptr i64 %963 to double*
  store double %954, double* %964
  %965 = inttoptr i64 %944 to i64*
  %966 = load i64, i64* %965
  %967 = add i64 %941, -424
  %968 = inttoptr i64 %967 to i32*
  %969 = load i32, i32* %968
  %970 = sext i32 %969 to i64
  %971 = shl nsw i64 %970, 3
  %972 = add i64 %971, %966
  %973 = inttoptr i64 %972 to double*
  %974 = load double, double* %973
  %975 = inttoptr i64 %955 to i64*
  %976 = load i64, i64* %975
  %977 = add i64 %941, -448
  %978 = inttoptr i64 %977 to i32*
  %979 = load i32, i32* %978
  %980 = sext i32 %979 to i64
  %981 = shl nsw i64 %980, 3
  %982 = add i64 %981, %976
  %983 = inttoptr i64 %982 to double*
  store double %974, double* %983
  %984 = inttoptr i64 %944 to i64*
  %985 = load i64, i64* %984
  %986 = add i64 %941, -428
  %987 = inttoptr i64 %986 to i32*
  %988 = load i32, i32* %987
  %989 = sext i32 %988 to i64
  %990 = shl nsw i64 %989, 3
  %991 = add i64 %990, %985
  %992 = inttoptr i64 %991 to double*
  %993 = load double, double* %992
  %994 = inttoptr i64 %955 to i64*
  %995 = load i64, i64* %994
  %996 = add i64 %941, -452
  %997 = inttoptr i64 %996 to i32*
  %998 = load i32, i32* %997
  %999 = sext i32 %998 to i64
  %1000 = shl nsw i64 %999, 3
  %1001 = add i64 %1000, %995
  %1002 = inttoptr i64 %1001 to double*
  store double %993, double* %1002
  %1003 = load i64, i64* %10, align 8
  %1004 = add i64 %1003, -8
  %1005 = inttoptr i64 %1004 to i64*
  %1006 = load i64, i64* %1005
  %1007 = add i64 %1003, -432
  %1008 = inttoptr i64 %1007 to i32*
  %1009 = load i32, i32* %1008
  %1010 = sext i32 %1009 to i64
  %1011 = shl nsw i64 %1010, 3
  %1012 = add i64 %1011, %1006
  %1013 = inttoptr i64 %1012 to double*
  %1014 = load double, double* %1013
  store double %1014, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %1015 = add i64 %1003, -16
  %1016 = inttoptr i64 %1015 to i64*
  %1017 = load i64, i64* %1016
  %1018 = add i64 %1003, -456
  %1019 = inttoptr i64 %1018 to i32*
  %1020 = load i32, i32* %1019
  %1021 = sext i32 %1020 to i64
  store i64 %1021, i64* %6, align 8, !tbaa !1240
  %1022 = shl nsw i64 %1021, 3
  %1023 = add i64 %1022, %1017
  %1024 = inttoptr i64 %1023 to double*
  store double %1014, double* %1024
  %1025 = add i64 %1003, -436
  %1026 = inttoptr i64 %1025 to i32*
  %1027 = load i32, i32* %1026
  %1028 = sext i32 %1027 to i64
  %1029 = mul nsw i64 %1028, 24
  %1030 = load i64, i64* %4, align 8
  %1031 = add i64 %1029, %1030
  %1032 = load i64, i64* %10, align 8
  %1033 = add i64 %1032, -440
  %1034 = inttoptr i64 %1033 to i32*
  %1035 = load i32, i32* %1034
  %1036 = sext i32 %1035 to i64
  store i64 %1036, i64* %5, align 8, !tbaa !1240
  %1037 = shl nsw i64 %1036, 2
  %1038 = add i64 %1037, %1031
  %1039 = inttoptr i64 %1038 to i32*
  %1040 = load i32, i32* %1039
  %1041 = add i32 %1040, -3
  %1042 = icmp eq i32 %1041, 0
  %1043 = select i1 %1042, i64 562, i64 577
  %1044 = add i64 %1175, %1043
  %1045 = add i64 %1032, -460
  %1046 = add i64 %1044, 10
  br i1 %1042, label %block_419d06, label %block_419d15

block_41a6ee:                                     ; preds = %block_41a6e1
  %1047 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %1047, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %1048 = inttoptr i64 %1875 to i32*
  %1049 = load i32, i32* %1048
  %1050 = sext i32 %1049 to i64
  %1051 = mul nsw i64 %1050, 2400
  %1052 = add i64 %1051, ptrtoint (%idmo_type* @idmo to i64)
  %1053 = inttoptr i64 %1876 to i32*
  %1054 = load i32, i32* %1053
  %1055 = sext i32 %1054 to i64
  %1056 = mul nsw i64 %1055, 400
  %1057 = add i64 %1056, %1052
  %1058 = inttoptr i64 %1878 to i32*
  %1059 = load i32, i32* %1058
  %1060 = sext i32 %1059 to i64
  %1061 = mul nsw i64 %1060, 200
  %1062 = add i64 %1061, %1057
  %1063 = sext i32 %637 to i64
  %1064 = shl nsw i64 %1063, 2
  %1065 = add i64 %1064, %1062
  %1066 = inttoptr i64 %1065 to i32*
  %1067 = load i32, i32* %1066
  %1068 = inttoptr i64 %1880 to i32*
  store i32 %1067, i32* %1068
  %1069 = inttoptr i64 %1881 to i64*
  %1070 = load i64, i64* %1069
  %1071 = inttoptr i64 %1877 to i32*
  %1072 = load i32, i32* %1071
  %1073 = sext i32 %1072 to i64
  store i64 %1073, i64* %6, align 8, !tbaa !1240
  %1074 = shl nsw i64 %1073, 3
  %1075 = add i64 %1074, %1070
  %1076 = inttoptr i64 %1075 to double*
  %1077 = load double, double* %1076
  %1078 = inttoptr i64 %1878 to i32*
  %1079 = load i32, i32* %1078
  %1080 = sext i32 %1079 to i64
  %1081 = mul nsw i64 %1080, 120
  %1082 = add i64 %1081, ptrtoint (%qbnew_type* @qbnew to i64)
  %1083 = inttoptr i64 %1879 to i32*
  %1084 = load i32, i32* %1083
  %1085 = sext i32 %1084 to i64
  %1086 = mul nsw i64 %1085, 24
  %1087 = add i64 %1086, %1082
  %1088 = inttoptr i64 %1872 to i32*
  %1089 = load i32, i32* %1088
  %1090 = add i32 %1089, -1
  %1091 = zext i32 %1090 to i64
  store i64 %1091, i64* %7, align 8, !tbaa !1240
  %1092 = sext i32 %1090 to i64
  %1093 = shl nsw i64 %1092, 3
  %1094 = add i64 %1087, %1093
  %1095 = inttoptr i64 %1094 to double*
  %1096 = load double, double* %1095
  %1097 = inttoptr i64 %1882 to i64*
  %1098 = load i64, i64* %1097
  %1099 = inttoptr i64 %1880 to i32*
  %1100 = load i32, i32* %1099
  %1101 = sext i32 %1100 to i64
  %1102 = shl nsw i64 %1101, 3
  %1103 = add i64 %1102, %1098
  %1104 = inttoptr i64 %1103 to double*
  %1105 = load double, double* %1104
  %1106 = fmul double %1096, %1105
  %1107 = fmul double %1106, %1047
  store double %1107, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %52, align 1, !tbaa !1246
  %1108 = fadd double %1107, %1077
  store double %1108, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  %1109 = inttoptr i64 %1075 to double*
  store double %1108, double* %1109
  %1110 = inttoptr i64 %1879 to i32*
  %1111 = load i32, i32* %1110
  %1112 = add i32 %1111, 1
  %1113 = inttoptr i64 %1879 to i32*
  store i32 %1112, i32* %1113
  %1114 = add i64 %647, -13
  br label %block_41a6e1

block_41b0d3:                                     ; preds = %block_419aaa
  %1115 = load i64, i64* %9, align 8
  %1116 = add i64 %1115, 496
  %1117 = icmp ugt i64 %1115, -497
  %1118 = zext i1 %1117 to i8
  store i8 %1118, i8* %18, align 1, !tbaa !1248
  %1119 = trunc i64 %1116 to i32
  %1120 = and i32 %1119, 255
  %1121 = tail call i32 @llvm.ctpop.i32(i32 %1120) #11
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  %1124 = xor i8 %1123, 1
  store i8 %1124, i8* %19, align 1, !tbaa !1261
  %1125 = xor i64 %1115, 16
  %1126 = xor i64 %1125, %1116
  %1127 = lshr i64 %1126, 4
  %1128 = trunc i64 %1127 to i8
  %1129 = and i8 %1128, 1
  store i8 %1129, i8* %20, align 1, !tbaa !1262
  %1130 = icmp eq i64 %1116, 0
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %21, align 1, !tbaa !1263
  %1132 = lshr i64 %1116, 63
  %1133 = trunc i64 %1132 to i8
  store i8 %1133, i8* %22, align 1, !tbaa !1264
  %1134 = lshr i64 %1115, 63
  %1135 = xor i64 %1132, %1134
  %1136 = add nuw nsw i64 %1135, %1132
  %1137 = icmp eq i64 %1136, 2
  %1138 = zext i1 %1137 to i8
  store i8 %1138, i8* %23, align 1, !tbaa !1265
  %1139 = add i64 %1115, 504
  %1140 = inttoptr i64 %1116 to i64*
  %1141 = load i64, i64* %1140
  store i64 %1141, i64* %10, align 8, !tbaa !1240
  %1142 = inttoptr i64 %1139 to i64*
  %1143 = load i64, i64* %1142
  store i64 %1143, i64* %3, align 8, !tbaa !1240
  %1144 = add i64 %1115, 512
  store i64 %1144, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %1355

block_41a6ca:                                     ; preds = %block_41a687, %block_41a7c6
  %1145 = phi i64 [ %2112, %block_41a687 ], [ %1378, %block_41a7c6 ]
  %1146 = phi %struct.Memory* [ %1508, %block_41a687 ], [ %635, %block_41a7c6 ]
  %1147 = inttoptr i64 %1878 to i32*
  %1148 = load i32, i32* %1147
  %1149 = add i32 %1148, -2
  %1150 = lshr i32 %1149, 31
  %1151 = lshr i32 %1148, 31
  %1152 = xor i32 %1150, %1151
  %1153 = add nuw nsw i32 %1152, %1151
  %1154 = icmp eq i32 %1153, 2
  %1155 = icmp ne i32 %1150, 0
  %1156 = xor i1 %1155, %1154
  %1157 = select i1 %1156, i64 13, i64 277
  %1158 = add i64 %1145, %1157
  br i1 %1156, label %block_41a6d7, label %block_41a7df

block_419ac7:                                     ; preds = %block_419abd, %block_41b0a1
  %1159 = phi i64 [ %1452, %block_419abd ], [ %223, %block_41b0a1 ]
  %1160 = phi i64 [ %1354, %block_419abd ], [ %213, %block_41b0a1 ]
  %1161 = phi %struct.Memory* [ %1355, %block_419abd ], [ %216, %block_41b0a1 ]
  %1162 = add i64 %1160, -440
  %1163 = inttoptr i64 %1162 to i32*
  %1164 = load i32, i32* %1163
  %1165 = add i32 %1164, -6
  %1166 = lshr i32 %1165, 31
  %1167 = trunc i32 %1166 to i8
  %1168 = lshr i32 %1164, 31
  %1169 = xor i32 %1166, %1168
  %1170 = add nuw nsw i32 %1169, %1168
  %1171 = icmp eq i32 %1170, 2
  %1172 = icmp ne i8 %1167, 0
  %1173 = xor i1 %1172, %1171
  %1174 = select i1 %1173, i64 13, i64 5619
  %1175 = add i64 %1159, %1174
  br i1 %1173, label %block_419ad4, label %block_41b0ba

block_419ec6:                                     ; preds = %block_419eb9
  %1176 = inttoptr i64 %1396 to i32*
  %1177 = load i32, i32* %1176
  %1178 = sext i32 %1177 to i64
  %1179 = mul nsw i64 %1178, 2400
  %1180 = add i64 %1179, ptrtoint (%idmo_type* @idmo to i64)
  %1181 = inttoptr i64 %1397 to i32*
  %1182 = load i32, i32* %1181
  %1183 = sext i32 %1182 to i64
  %1184 = mul nsw i64 %1183, 400
  %1185 = add i64 %1184, %1180
  %1186 = inttoptr i64 %1392 to i32*
  %1187 = load i32, i32* %1186
  %1188 = sext i32 %1187 to i64
  %1189 = mul nsw i64 %1188, 200
  %1190 = add i64 %1189, %1185
  %1191 = inttoptr i64 %1387 to i32*
  %1192 = load i32, i32* %1191
  %1193 = sext i32 %1192 to i64
  %1194 = mul nsw i64 %1193, 100
  %1195 = add i64 %1194, %1190
  %1196 = inttoptr i64 %1393 to i32*
  %1197 = load i32, i32* %1196
  %1198 = sext i32 %1197 to i64
  %1199 = mul nsw i64 %1198, 20
  %1200 = add i64 %1199, %1195
  %1201 = sext i32 %1657 to i64
  %1202 = shl nsw i64 %1201, 2
  %1203 = add i64 %1202, %1200
  %1204 = inttoptr i64 %1203 to i32*
  %1205 = load i32, i32* %1204
  %1206 = inttoptr i64 %1398 to i32*
  store i32 %1205, i32* %1206
  %1207 = inttoptr i64 %1387 to i32*
  %1208 = load i32, i32* %1207
  %1209 = sext i32 %1208 to i64
  %1210 = mul nsw i64 %1209, 200
  %1211 = add i64 %1210, %1394
  %1212 = inttoptr i64 %1393 to i32*
  %1213 = load i32, i32* %1212
  %1214 = sext i32 %1213 to i64
  %1215 = mul nsw i64 %1214, 40
  %1216 = add i64 %1215, %1211
  store i64 %1216, i64* %7, align 8, !tbaa !1240
  %1217 = inttoptr i64 %1395 to i32*
  %1218 = load i32, i32* %1217
  %1219 = sext i32 %1218 to i64
  %1220 = shl nsw i64 %1219, 3
  %1221 = add i64 %1220, %1216
  %1222 = inttoptr i64 %1221 to double*
  %1223 = load double, double* %1222
  %1224 = inttoptr i64 %1392 to i32*
  %1225 = load i32, i32* %1224
  %1226 = sext i32 %1225 to i64
  %1227 = mul nsw i64 %1226, 120
  %1228 = add i64 %1227, ptrtoint (%qbnew_type* @qbnew to i64)
  %1229 = inttoptr i64 %1401 to i32*
  %1230 = load i32, i32* %1229
  %1231 = sext i32 %1230 to i64
  %1232 = mul nsw i64 %1231, 24
  %1233 = add i64 %1232, %1228
  %1234 = add i32 %1218, -1
  %1235 = zext i32 %1234 to i64
  store i64 %1235, i64* %8, align 8, !tbaa !1240
  %1236 = sext i32 %1234 to i64
  %1237 = shl nsw i64 %1236, 3
  %1238 = add i64 %1233, %1237
  %1239 = inttoptr i64 %1238 to double*
  %1240 = load double, double* %1239
  %1241 = inttoptr i64 %1399 to i64*
  %1242 = load i64, i64* %1241
  %1243 = inttoptr i64 %1398 to i32*
  %1244 = load i32, i32* %1243
  %1245 = sext i32 %1244 to i64
  store i64 %1245, i64* %6, align 8, !tbaa !1240
  %1246 = shl nsw i64 %1245, 3
  %1247 = add i64 %1246, %1242
  %1248 = inttoptr i64 %1247 to double*
  %1249 = load double, double* %1248
  %1250 = fmul double %1240, %1249
  store double %1250, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  %1251 = fadd double %1223, %1250
  store double %1251, double* %46, align 1, !tbaa !1246
  store i64 0, i64* %47, align 1, !tbaa !1246
  %1252 = add i64 %1210, %1394
  %1253 = add i64 %1215, %1252
  store i64 %1219, i64* %5, align 8, !tbaa !1240
  %1254 = add i64 %1220, %1253
  %1255 = inttoptr i64 %1254 to double*
  store double %1251, double* %1255
  %1256 = inttoptr i64 %1401 to i32*
  %1257 = load i32, i32* %1256
  %1258 = add i32 %1257, 1
  %1259 = inttoptr i64 %1401 to i32*
  store i32 %1258, i32* %1259
  %1260 = add i64 %1667, -13
  br label %block_419eb9

block_41ae95:                                     ; preds = %block_41ae4c, %block_41af94
  %1261 = phi i64 [ %2081, %block_41ae4c ], [ %235, %block_41af94 ]
  %1262 = phi %struct.Memory* [ %1806, %block_41ae4c ], [ %1984, %block_41af94 ]
  %1263 = inttoptr i64 %1936 to i32*
  %1264 = load i32, i32* %1263
  %1265 = add i32 %1264, -2
  %1266 = lshr i32 %1265, 31
  %1267 = lshr i32 %1264, 31
  %1268 = xor i32 %1266, %1267
  %1269 = add nuw nsw i32 %1268, %1267
  %1270 = icmp eq i32 %1269, 2
  %1271 = icmp ne i32 %1266, 0
  %1272 = xor i1 %1271, %1270
  %1273 = select i1 %1272, i64 13, i64 280
  %1274 = add i64 %1261, %1273
  br i1 %1272, label %block_41aea2, label %block_41afad

block_41a545:                                     ; preds = %block_41a538
  %1275 = add i64 %789, 10
  %1276 = inttoptr i64 %490 to i32*
  store i32 1, i32* %1276
  br label %block_41a54f

block_419d1f:                                     ; preds = %block_419d06, %block_419d15
  %1277 = phi i64 [ %1046, %block_419d15 ], [ %2084, %block_419d06 ]
  %1278 = phi %struct.Memory* [ %1161, %block_419d15 ], [ %1161, %block_419d06 ]
  %1279 = inttoptr i64 %1045 to i32*
  %1280 = load i32, i32* %1279
  %1281 = add i32 %1280, -2
  %1282 = icmp eq i32 %1281, 0
  %1283 = select i1 %1282, i64 13, i64 2063
  %1284 = add i64 %1277, %1283
  br i1 %1282, label %block_419d2c, label %block_41a52e

block_41aeb9:                                     ; preds = %block_41aeac
  %1285 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %1285, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %1286 = inttoptr i64 %1933 to i32*
  %1287 = load i32, i32* %1286
  %1288 = sext i32 %1287 to i64
  %1289 = mul nsw i64 %1288, 2400
  %1290 = add i64 %1289, ptrtoint (%idmo_type* @idmo to i64)
  %1291 = inttoptr i64 %1934 to i32*
  %1292 = load i32, i32* %1291
  %1293 = sext i32 %1292 to i64
  %1294 = mul nsw i64 %1293, 400
  %1295 = add i64 %1294, %1290
  %1296 = inttoptr i64 %1936 to i32*
  %1297 = load i32, i32* %1296
  %1298 = sext i32 %1297 to i64
  %1299 = mul nsw i64 %1298, 100
  %1300 = add i64 %1299, %1295
  %1301 = sext i32 %1986 to i64
  %1302 = mul nsw i64 %1301, 20
  %1303 = add i64 %1302, %1300
  %1304 = inttoptr i64 %1303 to i32*
  %1305 = load i32, i32* %1304
  %1306 = inttoptr i64 %1938 to i32*
  store i32 %1305, i32* %1306
  %1307 = inttoptr i64 %1939 to i64*
  %1308 = load i64, i64* %1307
  %1309 = inttoptr i64 %1935 to i32*
  %1310 = load i32, i32* %1309
  %1311 = sext i32 %1310 to i64
  store i64 %1311, i64* %6, align 8, !tbaa !1240
  %1312 = shl nsw i64 %1311, 3
  %1313 = add i64 %1312, %1308
  %1314 = inttoptr i64 %1313 to double*
  %1315 = load double, double* %1314
  %1316 = inttoptr i64 %1936 to i32*
  %1317 = load i32, i32* %1316
  %1318 = sext i32 %1317 to i64
  %1319 = mul nsw i64 %1318, 120
  %1320 = add i64 %1319, ptrtoint (%qbnew_type* @qbnew to i64)
  %1321 = inttoptr i64 %1937 to i32*
  %1322 = load i32, i32* %1321
  %1323 = sext i32 %1322 to i64
  %1324 = mul nsw i64 %1323, 24
  %1325 = add i64 %1324, %1320
  %1326 = inttoptr i64 %1930 to i32*
  %1327 = load i32, i32* %1326
  %1328 = add i32 %1327, -1
  %1329 = zext i32 %1328 to i64
  store i64 %1329, i64* %7, align 8, !tbaa !1240
  %1330 = sext i32 %1328 to i64
  %1331 = shl nsw i64 %1330, 3
  %1332 = add i64 %1325, %1331
  %1333 = inttoptr i64 %1332 to double*
  %1334 = load double, double* %1333
  %1335 = inttoptr i64 %1940 to i64*
  %1336 = load i64, i64* %1335
  %1337 = inttoptr i64 %1938 to i32*
  %1338 = load i32, i32* %1337
  %1339 = sext i32 %1338 to i64
  %1340 = shl nsw i64 %1339, 3
  %1341 = add i64 %1340, %1336
  %1342 = inttoptr i64 %1341 to double*
  %1343 = load double, double* %1342
  %1344 = fmul double %1334, %1343
  %1345 = fmul double %1344, %1285
  store double %1345, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %52, align 1, !tbaa !1246
  %1346 = fadd double %1345, %1315
  store double %1346, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  store i64 %1311, i64* %5, align 8, !tbaa !1240
  %1347 = inttoptr i64 %1313 to double*
  store double %1346, double* %1347
  %1348 = inttoptr i64 %1937 to i32*
  %1349 = load i32, i32* %1348
  %1350 = add i32 %1349, 1
  %1351 = inttoptr i64 %1937 to i32*
  store i32 %1350, i32* %1351
  %1352 = add i64 %1996, -13
  br label %block_41aeac

block_419aaa:                                     ; preds = %block_41b0ba, %block_419a70
  %1353 = phi i64 [ %42, %block_419a70 ], [ %1588, %block_41b0ba ]
  %1354 = phi i64 [ %39, %block_419a70 ], [ %1160, %block_41b0ba ]
  %1355 = phi %struct.Memory* [ %38, %block_419a70 ], [ %1161, %block_41b0ba ]
  %1356 = add i64 %1354, -436
  %1357 = inttoptr i64 %1356 to i32*
  %1358 = load i32, i32* %1357
  %1359 = zext i32 %1358 to i64
  store i64 %1359, i64* %4, align 8, !tbaa !1240
  %1360 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1361 = sub i32 %1358, %1360
  %1362 = lshr i32 %1361, 31
  %1363 = trunc i32 %1362 to i8
  %1364 = lshr i32 %1358, 31
  %1365 = lshr i32 %1360, 31
  %1366 = xor i32 %1365, %1364
  %1367 = xor i32 %1362, %1364
  %1368 = add nuw nsw i32 %1367, %1366
  %1369 = icmp eq i32 %1368, 2
  %1370 = icmp ne i8 %1363, 0
  %1371 = xor i1 %1370, %1369
  %1372 = select i1 %1371, i64 19, i64 5673
  %1373 = add i64 %1353, %1372
  br i1 %1371, label %block_419abd, label %block_41b0d3

block_41a7c6:                                     ; preds = %block_41a6e1
  %1374 = inttoptr i64 %1878 to i32*
  %1375 = load i32, i32* %1374
  %1376 = add i32 %1375, 1
  %1377 = inttoptr i64 %1878 to i32*
  store i32 %1376, i32* %1377
  %1378 = add i64 %647, -252
  br label %block_41a6ca

block_419d2c:                                     ; preds = %block_419d1f
  store i64 50, i64* %7, align 8, !tbaa !1240
  store i32 0, i32* %53, align 1, !tbaa !1244
  store i32 0, i32* %55, align 1, !tbaa !1244
  store i32 0, i32* %56, align 1, !tbaa !1244
  store i32 0, i32* %58, align 1, !tbaa !1244
  %1379 = add i64 %1032, -416
  store i64 %1379, i64* %8, align 8, !tbaa !1240
  %1380 = add i64 %1284, 23332
  %1381 = add i64 %1284, 23
  %1382 = load i64, i64* %9, align 8, !tbaa !1240
  %1383 = add i64 %1382, -8
  %1384 = inttoptr i64 %1383 to i64*
  store i64 %1381, i64* %1384
  store i64 %1383, i64* %9, align 8, !tbaa !1240
  %1385 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %1380, %struct.Memory* %1278)
  %1386 = load i64, i64* %10, align 8
  %1387 = add i64 %1386, -464
  %1388 = load i64, i64* %3, align 8
  %1389 = add i64 %1388, 10
  %1390 = inttoptr i64 %1387 to i32*
  store i32 0, i32* %1390
  %1391 = add i64 %1386, -460
  %1392 = add i64 %1386, -468
  %1393 = add i64 %1386, -472
  %1394 = add i64 %1386, -416
  %1395 = add i64 %1386, -476
  %1396 = add i64 %1386, -436
  %1397 = add i64 %1386, -440
  %1398 = add i64 %1386, -484
  %1399 = add i64 %1386, -8
  %1400 = add i64 %1386, -488
  %1401 = add i64 %1386, -480
  br label %block_419d4d

block_41aea2:                                     ; preds = %block_41ae95
  %1402 = add i64 %1274, 10
  %1403 = inttoptr i64 %1937 to i32*
  store i32 0, i32* %1403
  br label %block_41aeac

block_41b09c:                                     ; preds = %block_41b097, %block_41afc6
  %1404 = phi i64 [ %1444, %block_41b097 ], [ %541, %block_41afc6 ]
  %1405 = phi %struct.Memory* [ %132, %block_41b097 ], [ %1806, %block_41afc6 ]
  br label %block_41b0a1

block_41a29a:                                     ; preds = %block_41a28d
  %1406 = inttoptr i64 %1693 to i32*
  %1407 = load i32, i32* %1406
  %1408 = sext i32 %1407 to i64
  %1409 = mul nsw i64 %1408, 600
  %1410 = add i64 %1409, ptrtoint (%idel_type* @idel to i64)
  %1411 = inttoptr i64 %1694 to i32*
  %1412 = load i32, i32* %1411
  %1413 = sext i32 %1412 to i64
  %1414 = mul nsw i64 %1413, 100
  %1415 = add i64 %1414, %1410
  %1416 = sext i32 %1889 to i64
  %1417 = mul nsw i64 %1416, 20
  %1418 = add i64 %1417, %1415
  %1419 = inttoptr i64 %1691 to i32*
  %1420 = load i32, i32* %1419
  %1421 = sext i32 %1420 to i64
  store i64 %1421, i64* %5, align 8, !tbaa !1240
  %1422 = shl nsw i64 %1421, 2
  %1423 = add i64 %1422, %1418
  %1424 = inttoptr i64 %1423 to i32*
  %1425 = load i32, i32* %1424
  %1426 = zext i32 %1425 to i64
  store i64 %1426, i64* %6, align 8, !tbaa !1240
  %1427 = inttoptr i64 %1695 to i32*
  store i32 %1425, i32* %1427
  %1428 = add i64 %1899, 81
  %1429 = inttoptr i64 %1696 to i32*
  store i32 0, i32* %1429
  br label %block_41a2eb

block_41a0e0:                                     ; preds = %block_41a08f, %block_41a0ed
  %1430 = phi i64 [ %1476, %block_41a08f ], [ %633, %block_41a0ed ]
  %1431 = phi %struct.Memory* [ %1479, %block_41a08f ], [ %1431, %block_41a0ed ]
  %1432 = inttoptr i64 %1696 to i32*
  %1433 = load i32, i32* %1432
  %1434 = add i32 %1433, -5
  %1435 = lshr i32 %1434, 31
  %1436 = lshr i32 %1433, 31
  %1437 = xor i32 %1435, %1436
  %1438 = add nuw nsw i32 %1437, %1436
  %1439 = icmp eq i32 %1438, 2
  %1440 = icmp ne i32 %1435, 0
  %1441 = xor i1 %1440, %1439
  %1442 = select i1 %1441, i64 13, i64 186
  %1443 = add i64 %1430, %1442
  br i1 %1441, label %block_41a0ed, label %block_41a19a

block_41b097:                                     ; preds = %block_41afd5
  %1444 = add i64 %145, 5
  br label %block_41b09c

block_41a399:                                     ; preds = %block_41a2eb
  %1445 = inttoptr i64 %1692 to i32*
  %1446 = load i32, i32* %1445
  %1447 = add i32 %1446, 1
  %1448 = inttoptr i64 %1692 to i32*
  store i32 %1447, i32* %1448
  %1449 = add i64 %1536, -268
  br label %block_41a28d

block_41aa95:                                     ; preds = %block_41a905
  %1450 = add i64 %535, 216
  br label %block_41ab6d

block_419abd:                                     ; preds = %block_419aaa
  %1451 = add i64 %1354, -440
  %1452 = add i64 %1373, 10
  %1453 = inttoptr i64 %1451 to i32*
  store i32 0, i32* %1453
  br label %block_419ac7

block_41a08f:                                     ; preds = %block_41a082
  %1454 = inttoptr i64 %1693 to i32*
  %1455 = load i32, i32* %1454
  %1456 = sext i32 %1455 to i64
  %1457 = mul nsw i64 %1456, 600
  %1458 = add i64 %1457, ptrtoint (%idel_type* @idel to i64)
  %1459 = inttoptr i64 %1694 to i32*
  %1460 = load i32, i32* %1459
  %1461 = sext i32 %1460 to i64
  %1462 = mul nsw i64 %1461, 100
  %1463 = add i64 %1462, %1458
  %1464 = sext i32 %1481 to i64
  %1465 = mul nsw i64 %1464, 20
  %1466 = add i64 %1465, %1463
  %1467 = inttoptr i64 %1691 to i32*
  %1468 = load i32, i32* %1467
  %1469 = sext i32 %1468 to i64
  store i64 %1469, i64* %5, align 8, !tbaa !1240
  %1470 = shl nsw i64 %1469, 2
  %1471 = add i64 %1470, %1466
  %1472 = inttoptr i64 %1471 to i32*
  %1473 = load i32, i32* %1472
  %1474 = zext i32 %1473 to i64
  store i64 %1474, i64* %6, align 8, !tbaa !1240
  %1475 = inttoptr i64 %1695 to i32*
  store i32 %1473, i32* %1475
  %1476 = add i64 %1491, 81
  %1477 = inttoptr i64 %1696 to i32*
  store i32 0, i32* %1477
  br label %block_41a0e0

block_41a082:                                     ; preds = %block_41a06e, %block_41a19a
  %1478 = phi i64 [ %1590, %block_41a06e ], [ %794, %block_41a19a ]
  %1479 = phi %struct.Memory* [ %1622, %block_41a06e ], [ %1431, %block_41a19a ]
  %1480 = inttoptr i64 %1692 to i32*
  %1481 = load i32, i32* %1480
  %1482 = add i32 %1481, -4
  %1483 = lshr i32 %1482, 31
  %1484 = lshr i32 %1481, 31
  %1485 = xor i32 %1483, %1484
  %1486 = add nuw nsw i32 %1485, %1484
  %1487 = icmp eq i32 %1486, 2
  %1488 = icmp ne i32 %1483, 0
  %1489 = xor i1 %1488, %1487
  %1490 = select i1 %1489, i64 13, i64 305
  %1491 = add i64 %1478, %1490
  br i1 %1489, label %block_41a08f, label %block_41a1b3

block_41a1bd:                                     ; preds = %block_41a3b2, %block_41a1b3
  %1492 = phi i64 [ %224, %block_41a1b3 ], [ %1909, %block_41a3b2 ]
  %1493 = phi %struct.Memory* [ %1479, %block_41a1b3 ], [ %1887, %block_41a3b2 ]
  %1494 = inttoptr i64 %1691 to i32*
  %1495 = load i32, i32* %1494
  %1496 = add i32 %1495, -4
  %1497 = lshr i32 %1496, 31
  %1498 = lshr i32 %1495, 31
  %1499 = xor i32 %1497, %1498
  %1500 = add nuw nsw i32 %1499, %1498
  %1501 = icmp eq i32 %1500, 2
  %1502 = icmp ne i32 %1497, 0
  %1503 = xor i1 %1502, %1501
  %1504 = select i1 %1503, i64 13, i64 526
  %1505 = add i64 %1492, %1504
  br i1 %1503, label %block_41a1ca, label %block_41a3cb

block_419d15:                                     ; preds = %block_419ad4
  %1506 = inttoptr i64 %1045 to i32*
  store i32 1, i32* %1506
  br label %block_419d1f

block_41a67a:                                     ; preds = %block_41a67a.preheader, %block_41a7df
  %1507 = phi i64 [ %485, %block_41a7df ], [ %1873, %block_41a67a.preheader ]
  %1508 = phi %struct.Memory* [ %1146, %block_41a7df ], [ %777, %block_41a67a.preheader ]
  %1509 = inttoptr i64 %1872 to i32*
  %1510 = load i32, i32* %1509
  %1511 = add i32 %1510, -4
  %1512 = lshr i32 %1511, 31
  %1513 = trunc i32 %1512 to i8
  %1514 = lshr i32 %1510, 31
  %1515 = xor i32 %1512, %1514
  %1516 = add nuw nsw i32 %1515, %1514
  %1517 = icmp eq i32 %1516, 2
  %1518 = icmp ne i8 %1513, 0
  %1519 = xor i1 %1518, %1517
  %1520 = select i1 %1519, i64 13, i64 382
  %1521 = add i64 %1507, %1520
  br i1 %1519, label %block_41a687, label %block_41a7f8

block_41adfa:                                     ; preds = %block_41ad42
  %1522 = add i64 %2131, 5
  br label %block_41adff

block_41a2eb:                                     ; preds = %block_41a29a, %block_41a2f8
  %1523 = phi i64 [ %1428, %block_41a29a ], [ %586, %block_41a2f8 ]
  %1524 = phi %struct.Memory* [ %1887, %block_41a29a ], [ %1524, %block_41a2f8 ]
  %1525 = inttoptr i64 %1696 to i32*
  %1526 = load i32, i32* %1525
  %1527 = add i32 %1526, -5
  %1528 = lshr i32 %1527, 31
  %1529 = lshr i32 %1526, 31
  %1530 = xor i32 %1528, %1529
  %1531 = add nuw nsw i32 %1530, %1529
  %1532 = icmp eq i32 %1531, 2
  %1533 = icmp ne i32 %1528, 0
  %1534 = xor i1 %1533, %1532
  %1535 = select i1 %1534, i64 13, i64 174
  %1536 = add i64 %1523, %1535
  br i1 %1534, label %block_41a2f8, label %block_41a399

block_41aa7c:                                     ; preds = %block_41a95c
  %1537 = inttoptr i64 %1964 to i32*
  %1538 = load i32, i32* %1537
  %1539 = add i32 %1538, 1
  %1540 = inttoptr i64 %1964 to i32*
  store i32 %1539, i32* %1540
  %1541 = add i64 %2238, -375
  br label %block_41a905

block_41a8bd:                                     ; preds = %block_41a807
  %1542 = add i64 %2253, 5
  br label %block_41a8c2

block_41a3ec:                                     ; preds = %block_41a3df
  %1543 = inttoptr i64 %1693 to i32*
  %1544 = load i32, i32* %1543
  %1545 = sext i32 %1544 to i64
  %1546 = mul nsw i64 %1545, 600
  %1547 = add i64 %1546, ptrtoint (%idel_type* @idel to i64)
  %1548 = inttoptr i64 %1694 to i32*
  %1549 = load i32, i32* %1548
  %1550 = sext i32 %1549 to i64
  %1551 = mul nsw i64 %1550, 100
  %1552 = add i64 %1551, %1547
  %1553 = sext i32 %120 to i64
  %1554 = mul nsw i64 %1553, 20
  %1555 = add i64 %1554, %1552
  %1556 = inttoptr i64 %1691 to i32*
  %1557 = load i32, i32* %1556
  %1558 = sext i32 %1557 to i64
  store i64 %1558, i64* %5, align 8, !tbaa !1240
  %1559 = shl nsw i64 %1558, 2
  %1560 = add i64 %1559, %1555
  %1561 = inttoptr i64 %1560 to i32*
  %1562 = load i32, i32* %1561
  %1563 = zext i32 %1562 to i64
  store i64 %1563, i64* %6, align 8, !tbaa !1240
  %1564 = inttoptr i64 %1695 to i32*
  store i32 %1562, i32* %1564
  %1565 = add i64 %130, 81
  %1566 = inttoptr i64 %1696 to i32*
  store i32 0, i32* %1566
  br label %block_41a43d

block_419d85:                                     ; preds = %block_41a007, %block_419d7b
  %1567 = phi i64 [ %373, %block_419d7b ], [ %1982, %block_41a007 ]
  %1568 = phi %struct.Memory* [ %1669, %block_419d7b ], [ %1641, %block_41a007 ]
  %1569 = inttoptr i64 %1393 to i32*
  %1570 = load i32, i32* %1569
  %1571 = add i32 %1570, -5
  %1572 = lshr i32 %1571, 31
  %1573 = lshr i32 %1570, 31
  %1574 = xor i32 %1572, %1573
  %1575 = add nuw nsw i32 %1574, %1573
  %1576 = icmp eq i32 %1575, 2
  %1577 = icmp ne i32 %1572, 0
  %1578 = xor i1 %1577, %1576
  %1579 = select i1 %1578, i64 13, i64 667
  %1580 = add i64 %1567, %1579
  %1581 = inttoptr i64 %1392 to i32*
  %1582 = load i32, i32* %1581
  br i1 %1578, label %block_419d92, label %block_41a020

block_41b0ba:                                     ; preds = %block_419ac7
  %1583 = add i64 %1160, -436
  %1584 = inttoptr i64 %1583 to i32*
  %1585 = load i32, i32* %1584
  %1586 = add i32 %1585, 1
  %1587 = inttoptr i64 %1583 to i32*
  store i32 %1586, i32* %1587
  %1588 = add i64 %1175, -5648
  br label %block_419aaa

block_41a06e:                                     ; preds = %block_41a05c
  %1589 = inttoptr i64 %1691 to i32*
  store i32 0, i32* %1589
  %1590 = add i64 %1639, 20
  %1591 = inttoptr i64 %1692 to i32*
  store i32 1, i32* %1591
  br label %block_41a082

block_419e68:                                     ; preds = %block_419e5b
  %1592 = inttoptr i64 %1396 to i32*
  %1593 = load i32, i32* %1592
  %1594 = sext i32 %1593 to i64
  %1595 = mul nsw i64 %1594, 600
  %1596 = add i64 %1595, ptrtoint (%idel_type* @idel to i64)
  %1597 = inttoptr i64 %1397 to i32*
  %1598 = load i32, i32* %1597
  %1599 = sext i32 %1598 to i64
  %1600 = mul nsw i64 %1599, 100
  %1601 = add i64 %1600, %1596
  %1602 = inttoptr i64 %1393 to i32*
  %1603 = load i32, i32* %1602
  %1604 = sext i32 %1603 to i64
  %1605 = mul nsw i64 %1604, 20
  %1606 = add i64 %1605, %1601
  %1607 = sext i32 %1643 to i64
  store i64 %1607, i64* %5, align 8, !tbaa !1240
  %1608 = shl nsw i64 %1607, 2
  %1609 = add i64 %1608, %1606
  %1610 = inttoptr i64 %1609 to i32*
  %1611 = load i32, i32* %1610
  %1612 = zext i32 %1611 to i64
  store i64 %1612, i64* %6, align 8, !tbaa !1240
  %1613 = inttoptr i64 %1400 to i32*
  store i32 %1611, i32* %1613
  %1614 = add i64 %1653, 81
  %1615 = inttoptr i64 %1401 to i32*
  store i32 0, i32* %1615
  br label %block_419eb9

block_41aa63:                                     ; preds = %block_41a973
  %1616 = inttoptr i64 %1970 to i32*
  %1617 = load i32, i32* %1616
  %1618 = add i32 %1617, 1
  %1619 = inttoptr i64 %1970 to i32*
  store i32 %1618, i32* %1619
  %1620 = add i64 %388, -263
  br label %block_41a95c

block_41a05c:                                     ; preds = %block_41a510, %block_41a052
  %1621 = phi i64 [ %1686, %block_41a052 ], [ %1853, %block_41a510 ]
  %1622 = phi %struct.Memory* [ %463, %block_41a052 ], [ %118, %block_41a510 ]
  %1623 = inttoptr i64 %1689 to i32*
  %1624 = load i32, i32* %1623
  %1625 = inttoptr i64 %1690 to i32*
  %1626 = load i32, i32* %1625
  %1627 = sub i32 %1624, %1626
  %1628 = lshr i32 %1627, 31
  %1629 = trunc i32 %1628 to i8
  %1630 = lshr i32 %1624, 31
  %1631 = lshr i32 %1626, 31
  %1632 = xor i32 %1631, %1630
  %1633 = xor i32 %1628, %1630
  %1634 = add nuw nsw i32 %1633, %1632
  %1635 = icmp eq i32 %1634, 2
  %1636 = icmp ne i8 %1629, 0
  %1637 = xor i1 %1636, %1635
  %1638 = select i1 %1637, i64 18, i64 1229
  %1639 = add i64 %1621, %1638
  br i1 %1637, label %block_41a06e, label %block_41b0a1.loopexit

block_419e5b:                                     ; preds = %block_419fee, %block_419d92
  %1640 = phi i64 [ %301, %block_419d92 ], [ %2150, %block_419fee ]
  %1641 = phi %struct.Memory* [ %1568, %block_419d92 ], [ %1655, %block_419fee ]
  %1642 = inttoptr i64 %1395 to i32*
  %1643 = load i32, i32* %1642
  %1644 = add i32 %1643, -4
  %1645 = lshr i32 %1644, 31
  %1646 = lshr i32 %1643, 31
  %1647 = xor i32 %1645, %1646
  %1648 = add nuw nsw i32 %1647, %1646
  %1649 = icmp eq i32 %1648, 2
  %1650 = icmp ne i32 %1645, 0
  %1651 = xor i1 %1650, %1649
  %1652 = select i1 %1651, i64 13, i64 428
  %1653 = add i64 %1640, %1652
  br i1 %1651, label %block_419e68, label %block_41a007

block_419eb9:                                     ; preds = %block_419e68, %block_419ec6
  %1654 = phi i64 [ %1614, %block_419e68 ], [ %1260, %block_419ec6 ]
  %1655 = phi %struct.Memory* [ %1641, %block_419e68 ], [ %1655, %block_419ec6 ]
  %1656 = inttoptr i64 %1401 to i32*
  %1657 = load i32, i32* %1656
  %1658 = add i32 %1657, -5
  %1659 = lshr i32 %1658, 31
  %1660 = lshr i32 %1657, 31
  %1661 = xor i32 %1659, %1660
  %1662 = add nuw nsw i32 %1661, %1660
  %1663 = icmp eq i32 %1662, 2
  %1664 = icmp ne i32 %1659, 0
  %1665 = xor i1 %1664, %1663
  %1666 = select i1 %1665, i64 13, i64 309
  %1667 = add i64 %1654, %1666
  br i1 %1665, label %block_419ec6, label %block_419fee

block_419d69:                                     ; preds = %block_41a020, %block_419d5f
  %1668 = phi i64 [ %446, %block_419d5f ], [ %2116, %block_41a020 ]
  %1669 = phi %struct.Memory* [ %463, %block_419d5f ], [ %1568, %block_41a020 ]
  %1670 = inttoptr i64 %1392 to i32*
  %1671 = load i32, i32* %1670
  %1672 = inttoptr i64 %1391 to i32*
  %1673 = load i32, i32* %1672
  %1674 = sub i32 %1671, %1673
  %1675 = lshr i32 %1674, 31
  %1676 = lshr i32 %1671, 31
  %1677 = lshr i32 %1673, 31
  %1678 = xor i32 %1677, %1676
  %1679 = xor i32 %1675, %1676
  %1680 = add nuw nsw i32 %1679, %1678
  %1681 = icmp eq i32 %1680, 2
  %1682 = icmp ne i32 %1675, 0
  %1683 = xor i1 %1682, %1681
  %1684 = select i1 %1683, i64 18, i64 720
  %1685 = add i64 %1668, %1684
  br i1 %1683, label %block_419d7b, label %block_41a039

block_41a052:                                     ; preds = %block_419d4d
  %1686 = add i64 %480, 10
  %1687 = inttoptr i64 %1387 to i32*
  store i32 0, i32* %1687
  %1688 = load i64, i64* %10, align 8
  %1689 = add i64 %1688, -464
  %1690 = add i64 %1688, -460
  %1691 = add i64 %1688, -472
  %1692 = add i64 %1688, -476
  %1693 = add i64 %1688, -436
  %1694 = add i64 %1688, -440
  %1695 = add i64 %1688, -488
  %1696 = add i64 %1688, -480
  %1697 = add i64 %1688, -416
  %1698 = add i64 %1688, -16
  br label %block_41a05c

block_41aab1:                                     ; preds = %block_41aaa4
  %1699 = inttoptr i64 %1967 to i32*
  %1700 = load i32, i32* %1699
  %1701 = sext i32 %1700 to i64
  %1702 = mul nsw i64 %1701, 600
  %1703 = add i64 %1702, ptrtoint (%idel_type* @idel to i64)
  %1704 = inttoptr i64 %1968 to i32*
  %1705 = load i32, i32* %1704
  %1706 = sext i32 %1705 to i64
  %1707 = mul nsw i64 %1706, 100
  %1708 = add i64 %1707, %1703
  %1709 = sext i32 %1823 to i64
  %1710 = mul nsw i64 %1709, 20
  store i64 %1710, i64* %6, align 8, !tbaa !1240
  %1711 = add i64 %1710, %1708
  %1712 = add i64 %1711, 16
  %1713 = inttoptr i64 %1712 to i32*
  %1714 = load i32, i32* %1713
  %1715 = inttoptr i64 %1969 to i32*
  store i32 %1714, i32* %1715
  %1716 = inttoptr i64 %1967 to i32*
  %1717 = load i32, i32* %1716
  %1718 = sext i32 %1717 to i64
  %1719 = mul nsw i64 %1718, 2400
  %1720 = add i64 %1719, ptrtoint (%idmo_type* @idmo to i64)
  %1721 = inttoptr i64 %1968 to i32*
  %1722 = load i32, i32* %1721
  %1723 = sext i32 %1722 to i64
  %1724 = mul nsw i64 %1723, 400
  %1725 = add i64 %1724, %1720
  %1726 = inttoptr i64 %1964 to i32*
  %1727 = load i32, i32* %1726
  %1728 = sext i32 %1727 to i64
  %1729 = mul nsw i64 %1728, 20
  %1730 = add i64 %1729, %1725
  %1731 = add i64 %1730, 16
  %1732 = inttoptr i64 %1731 to i32*
  %1733 = load i32, i32* %1732
  %1734 = zext i32 %1733 to i64
  store i64 %1734, i64* %7, align 8, !tbaa !1240
  %1735 = inttoptr i64 %1975 to i32*
  store i32 %1733, i32* %1735
  %1736 = inttoptr i64 %1976 to i64*
  %1737 = load i64, i64* %1736
  %1738 = inttoptr i64 %1975 to i32*
  %1739 = load i32, i32* %1738
  %1740 = sext i32 %1739 to i64
  %1741 = shl nsw i64 %1740, 3
  %1742 = add i64 %1741, %1737
  %1743 = inttoptr i64 %1742 to double*
  %1744 = load double, double* %1743
  store double %1744, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %1745 = inttoptr i64 %1977 to i64*
  %1746 = load i64, i64* %1745
  %1747 = inttoptr i64 %1969 to i32*
  %1748 = load i32, i32* %1747
  %1749 = sext i32 %1748 to i64
  %1750 = shl nsw i64 %1749, 3
  %1751 = add i64 %1750, %1746
  %1752 = inttoptr i64 %1751 to double*
  store double %1744, double* %1752
  %1753 = inttoptr i64 %1964 to i32*
  %1754 = load i32, i32* %1753
  %1755 = add i32 %1754, 1
  %1756 = inttoptr i64 %1964 to i32*
  store i32 %1755, i32* %1756
  %1757 = add i64 %1834, -13
  br label %block_41aaa4

block_41a44a:                                     ; preds = %block_41a43d
  %1758 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  store double %1758, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %1759 = inttoptr i64 %1698 to i64*
  %1760 = load i64, i64* %1759
  %1761 = inttoptr i64 %1695 to i32*
  %1762 = load i32, i32* %1761
  %1763 = sext i32 %1762 to i64
  store i64 %1763, i64* %7, align 8, !tbaa !1240
  %1764 = shl nsw i64 %1763, 3
  %1765 = add i64 %1764, %1760
  %1766 = inttoptr i64 %1765 to double*
  %1767 = load double, double* %1766
  %1768 = inttoptr i64 %1689 to i32*
  %1769 = load i32, i32* %1768
  %1770 = sext i32 %1769 to i64
  %1771 = mul nsw i64 %1770, 120
  %1772 = add i64 %1771, ptrtoint (%qbnew_type* @qbnew to i64)
  %1773 = sext i32 %1838 to i64
  %1774 = mul nsw i64 %1773, 24
  %1775 = add i64 %1774, %1772
  %1776 = inttoptr i64 %1692 to i32*
  %1777 = load i32, i32* %1776
  %1778 = add i32 %1777, -1
  %1779 = zext i32 %1778 to i64
  store i64 %1779, i64* %8, align 8, !tbaa !1240
  %1780 = sext i32 %1778 to i64
  store i64 %1780, i64* %6, align 8, !tbaa !1240
  %1781 = shl nsw i64 %1780, 3
  %1782 = add i64 %1775, %1781
  %1783 = inttoptr i64 %1782 to double*
  %1784 = load double, double* %1783
  %1785 = mul nsw i64 %1770, 200
  %1786 = add i64 %1785, %1697
  %1787 = mul nsw i64 %1773, 40
  %1788 = add i64 %1787, %1786
  %1789 = inttoptr i64 %1691 to i32*
  %1790 = load i32, i32* %1789
  %1791 = sext i32 %1790 to i64
  %1792 = shl nsw i64 %1791, 3
  %1793 = add i64 %1792, %1788
  %1794 = inttoptr i64 %1793 to double*
  %1795 = load double, double* %1794
  %1796 = fmul double %1784, %1795
  %1797 = fmul double %1796, %1758
  store double %1797, double* %51, align 1, !tbaa !1246
  store i64 0, i64* %52, align 1, !tbaa !1246
  %1798 = fadd double %1797, %1767
  store double %1798, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %50, align 1, !tbaa !1246
  store i64 %1763, i64* %5, align 8, !tbaa !1240
  %1799 = inttoptr i64 %1765 to double*
  store double %1798, double* %1799
  %1800 = inttoptr i64 %1696 to i32*
  %1801 = load i32, i32* %1800
  %1802 = add i32 %1801, 1
  %1803 = inttoptr i64 %1696 to i32*
  store i32 %1802, i32* %1803
  %1804 = add i64 %1848, -13
  br label %block_41a43d

block_41ae3f:                                     ; preds = %block_41ae3f.preheader, %block_41afad
  %1805 = phi i64 [ %230, %block_41afad ], [ %1931, %block_41ae3f.preheader ]
  %1806 = phi %struct.Memory* [ %1262, %block_41afad ], [ %1911, %block_41ae3f.preheader ]
  %1807 = inttoptr i64 %1930 to i32*
  %1808 = load i32, i32* %1807
  %1809 = add i32 %1808, -4
  %1810 = lshr i32 %1809, 31
  %1811 = trunc i32 %1810 to i8
  %1812 = lshr i32 %1808, 31
  %1813 = xor i32 %1810, %1812
  %1814 = add nuw nsw i32 %1813, %1812
  %1815 = icmp eq i32 %1814, 2
  %1816 = icmp ne i8 %1811, 0
  %1817 = xor i1 %1816, %1815
  %1818 = select i1 %1817, i64 13, i64 391
  %1819 = add i64 %1805, %1818
  br i1 %1817, label %block_41ae4c, label %block_41afc6

block_41aaa4:                                     ; preds = %block_41aaa4.preheader, %block_41aab1
  %1820 = phi i64 [ %1757, %block_41aab1 ], [ %1965, %block_41aaa4.preheader ]
  %1821 = phi %struct.Memory* [ %1821, %block_41aab1 ], [ %1945, %block_41aaa4.preheader ]
  %1822 = inttoptr i64 %1964 to i32*
  %1823 = load i32, i32* %1822
  %1824 = add i32 %1823, -4
  %1825 = lshr i32 %1824, 31
  %1826 = trunc i32 %1825 to i8
  %1827 = lshr i32 %1823, 31
  %1828 = xor i32 %1825, %1827
  %1829 = add nuw nsw i32 %1828, %1827
  %1830 = icmp eq i32 %1829, 2
  %1831 = icmp ne i8 %1826, 0
  %1832 = xor i1 %1831, %1830
  %1833 = select i1 %1832, i64 13, i64 196
  %1834 = add i64 %1820, %1833
  br i1 %1832, label %block_41aab1, label %block_41ab68

block_41a43d:                                     ; preds = %block_41a44a, %block_41a3ec
  %1835 = phi i64 [ %1565, %block_41a3ec ], [ %1804, %block_41a44a ]
  %1836 = phi %struct.Memory* [ %118, %block_41a3ec ], [ %1836, %block_41a44a ]
  %1837 = inttoptr i64 %1696 to i32*
  %1838 = load i32, i32* %1837
  %1839 = add i32 %1838, -5
  %1840 = lshr i32 %1839, 31
  %1841 = lshr i32 %1838, 31
  %1842 = xor i32 %1840, %1841
  %1843 = add nuw nsw i32 %1842, %1841
  %1844 = icmp eq i32 %1843, 2
  %1845 = icmp ne i32 %1840, 0
  %1846 = xor i1 %1845, %1844
  %1847 = select i1 %1846, i64 13, i64 186
  %1848 = add i64 %1835, %1847
  br i1 %1846, label %block_41a44a, label %block_41a4f7

block_41a510:                                     ; preds = %block_41a3df
  %1849 = inttoptr i64 %1689 to i32*
  %1850 = load i32, i32* %1849
  %1851 = add i32 %1850, 1
  %1852 = inttoptr i64 %1689 to i32*
  store i32 %1851, i32* %1852
  %1853 = add i64 %130, -1204
  br label %block_41a05c

block_41a63a:                                     ; preds = %block_41a538
  %1854 = inttoptr i64 %491 to i32*
  %1855 = load i32, i32* %1854
  %1856 = sext i32 %1855 to i64
  %1857 = mul nsw i64 %1856, 2400
  %1858 = add i64 %1857, ptrtoint (%idmo_type* @idmo to i64)
  %1859 = inttoptr i64 %1033 to i32*
  %1860 = load i32, i32* %1859
  %1861 = sext i32 %1860 to i64
  %1862 = mul nsw i64 %1861, 400
  %1863 = add i64 %1862, %1858
  %1864 = add i64 %1863, 16
  %1865 = inttoptr i64 %1864 to i32*
  %1866 = load i32, i32* %1865
  %1867 = add i32 %1866, 1
  %1868 = icmp eq i32 %1867, 0
  %1869 = select i1 %1868, i64 451, i64 54
  %1870 = add i64 %789, %1869
  %1871 = load i64, i64* %10, align 8
  %1872 = add i64 %1871, -476
  %1873 = add i64 %1870, 10
  %1874 = inttoptr i64 %1872 to i32*
  store i32 1, i32* %1874
  %1875 = add i64 %1871, -436
  %1876 = add i64 %1871, -440
  %1877 = add i64 %1871, -488
  br i1 %1868, label %block_41a807.preheader, label %block_41a67a.preheader

block_41a67a.preheader:                           ; preds = %block_41a63a
  %1878 = add i64 %1871, -464
  %1879 = add i64 %1871, -480
  %1880 = add i64 %1871, -484
  %1881 = add i64 %1871, -16
  %1882 = add i64 %1871, -8
  br label %block_41a67a

block_41a807.preheader:                           ; preds = %block_41a63a
  %1883 = add i64 %1871, -484
  %1884 = add i64 %1871, -8
  %1885 = add i64 %1871, -16
  br label %block_41a807

block_41a28d:                                     ; preds = %block_41a399, %block_41a1ca
  %1886 = phi i64 [ %211, %block_41a1ca ], [ %1449, %block_41a399 ]
  %1887 = phi %struct.Memory* [ %1493, %block_41a1ca ], [ %1524, %block_41a399 ]
  %1888 = inttoptr i64 %1692 to i32*
  %1889 = load i32, i32* %1888
  %1890 = add i32 %1889, -4
  %1891 = lshr i32 %1890, 31
  %1892 = lshr i32 %1889, 31
  %1893 = xor i32 %1891, %1892
  %1894 = add nuw nsw i32 %1893, %1892
  %1895 = icmp eq i32 %1894, 2
  %1896 = icmp ne i32 %1891, 0
  %1897 = xor i1 %1896, %1895
  %1898 = select i1 %1897, i64 13, i64 293
  %1899 = add i64 %1886, %1898
  br i1 %1897, label %block_41a29a, label %block_41a3b2

block_41a039:                                     ; preds = %block_419d69
  %1900 = inttoptr i64 %1387 to i32*
  %1901 = load i32, i32* %1900
  %1902 = add i32 %1901, 1
  %1903 = inttoptr i64 %1387 to i32*
  store i32 %1902, i32* %1903
  %1904 = add i64 %1685, -748
  br label %block_419d4d

block_41a3b2:                                     ; preds = %block_41a28d
  %1905 = inttoptr i64 %1691 to i32*
  %1906 = load i32, i32* %1905
  %1907 = add i32 %1906, 1
  %1908 = inttoptr i64 %1691 to i32*
  store i32 %1907, i32* %1908
  %1909 = add i64 %1899, -501
  br label %block_41a1bd

block_41adff:                                     ; preds = %block_41adfa, %block_41ad33
  %1910 = phi i64 [ %1522, %block_41adfa ], [ %486, %block_41ad33 ]
  %1911 = phi %struct.Memory* [ %2118, %block_41adfa ], [ %2211, %block_41ad33 ]
  %1912 = inttoptr i64 %412 to i32*
  %1913 = load i32, i32* %1912
  %1914 = sext i32 %1913 to i64
  %1915 = mul nsw i64 %1914, 2400
  %1916 = add i64 %1915, ptrtoint (%idmo_type* @idmo to i64)
  %1917 = inttoptr i64 %413 to i32*
  %1918 = load i32, i32* %1917
  %1919 = sext i32 %1918 to i64
  %1920 = mul nsw i64 %1919, 400
  store i64 %1920, i64* %5, align 8, !tbaa !1240
  %1921 = add i64 %1920, %1916
  %1922 = add i64 %1921, 80
  %1923 = inttoptr i64 %1922 to i32*
  %1924 = load i32, i32* %1923
  %1925 = add i32 %1924, 1
  %1926 = icmp eq i32 %1925, 0
  %1927 = select i1 %1926, i64 460, i64 54
  %1928 = add i64 %1910, %1927
  %1929 = load i64, i64* %10, align 8
  %1930 = add i64 %1929, -476
  %1931 = add i64 %1928, 10
  %1932 = inttoptr i64 %1930 to i32*
  store i32 1, i32* %1932
  %1933 = add i64 %1929, -436
  %1934 = add i64 %1929, -440
  %1935 = add i64 %1929, -488
  br i1 %1926, label %block_41afd5.preheader, label %block_41ae3f.preheader

block_41ae3f.preheader:                           ; preds = %block_41adff
  %1936 = add i64 %1929, -464
  %1937 = add i64 %1929, -480
  %1938 = add i64 %1929, -484
  %1939 = add i64 %1929, -16
  %1940 = add i64 %1929, -8
  br label %block_41ae3f

block_41afd5.preheader:                           ; preds = %block_41adff
  %1941 = add i64 %1929, -484
  %1942 = add i64 %1929, -8
  %1943 = add i64 %1929, -16
  br label %block_41afd5

block_41a8c2:                                     ; preds = %block_41a8bd, %block_41a7f8
  %1944 = phi i64 [ %1542, %block_41a8bd ], [ %59, %block_41a7f8 ]
  %1945 = phi %struct.Memory* [ %2240, %block_41a8bd ], [ %1508, %block_41a7f8 ]
  %1946 = inttoptr i64 %1875 to i32*
  %1947 = load i32, i32* %1946
  %1948 = sext i32 %1947 to i64
  %1949 = mul nsw i64 %1948, 2400
  %1950 = add i64 %1949, ptrtoint (%idmo_type* @idmo to i64)
  %1951 = inttoptr i64 %1876 to i32*
  %1952 = load i32, i32* %1951
  %1953 = sext i32 %1952 to i64
  %1954 = mul nsw i64 %1953, 400
  %1955 = add i64 %1954, %1950
  %1956 = add i64 %1955, 236
  %1957 = inttoptr i64 %1956 to i32*
  %1958 = load i32, i32* %1957
  %1959 = add i32 %1958, 1
  %1960 = icmp eq i32 %1959, 0
  %1961 = select i1 %1960, i64 472, i64 57
  %1962 = add i64 %1944, %1961
  %1963 = load i64, i64* %10, align 8
  %1964 = add i64 %1963, -476
  %1965 = add i64 %1962, 10
  %1966 = inttoptr i64 %1964 to i32*
  store i32 1, i32* %1966
  %1967 = add i64 %1963, -436
  %1968 = add i64 %1963, -440
  %1969 = add i64 %1963, -488
  br i1 %1960, label %block_41aaa4.preheader, label %block_41a905.preheader

block_41a905.preheader:                           ; preds = %block_41a8c2
  %1970 = add i64 %1963, -464
  %1971 = add i64 %1963, -480
  %1972 = add i64 %1963, -484
  %1973 = add i64 %1963, -16
  %1974 = add i64 %1963, -8
  br label %block_41a905

block_41aaa4.preheader:                           ; preds = %block_41a8c2
  %1975 = add i64 %1963, -484
  %1976 = add i64 %1963, -8
  %1977 = add i64 %1963, -16
  br label %block_41aaa4

block_41a007:                                     ; preds = %block_419e5b
  %1978 = inttoptr i64 %1393 to i32*
  %1979 = load i32, i32* %1978
  %1980 = add i32 %1979, 1
  %1981 = inttoptr i64 %1393 to i32*
  store i32 %1980, i32* %1981
  %1982 = add i64 %1653, -642
  br label %block_419d85

block_41aeac:                                     ; preds = %block_41aea2, %block_41aeb9
  %1983 = phi i64 [ %1402, %block_41aea2 ], [ %1352, %block_41aeb9 ]
  %1984 = phi %struct.Memory* [ %1262, %block_41aea2 ], [ %1984, %block_41aeb9 ]
  %1985 = inttoptr i64 %1937 to i32*
  %1986 = load i32, i32* %1985
  %1987 = add i32 %1986, -5
  %1988 = lshr i32 %1987, 31
  %1989 = lshr i32 %1986, 31
  %1990 = xor i32 %1988, %1989
  %1991 = add nuw nsw i32 %1990, %1989
  %1992 = icmp eq i32 %1991, 2
  %1993 = icmp ne i32 %1988, 0
  %1994 = xor i1 %1993, %1992
  %1995 = select i1 %1994, i64 13, i64 232
  %1996 = add i64 %1983, %1995
  br i1 %1994, label %block_41aeb9, label %block_41af94

block_41a55c:                                     ; preds = %block_41a54f
  %1997 = inttoptr i64 %491 to i32*
  %1998 = load i32, i32* %1997
  %1999 = sext i32 %1998 to i64
  %2000 = mul nsw i64 %1999, 600
  %2001 = add i64 %2000, ptrtoint (%idel_type* @idel to i64)
  %2002 = inttoptr i64 %1033 to i32*
  %2003 = load i32, i32* %2002
  %2004 = sext i32 %2003 to i64
  %2005 = mul nsw i64 %2004, 100
  %2006 = add i64 %2005, %2001
  %2007 = inttoptr i64 %487 to i32*
  %2008 = load i32, i32* %2007
  %2009 = sext i32 %2008 to i64
  %2010 = mul nsw i64 %2009, 20
  %2011 = add i64 %2010, %2006
  %2012 = sext i32 %451 to i64
  store i64 %2012, i64* %6, align 8, !tbaa !1240
  %2013 = shl nsw i64 %2012, 2
  %2014 = add i64 %2013, %2011
  %2015 = inttoptr i64 %2014 to i32*
  %2016 = load i32, i32* %2015
  %2017 = inttoptr i64 %492 to i32*
  store i32 %2016, i32* %2017
  %2018 = inttoptr i64 %491 to i32*
  %2019 = load i32, i32* %2018
  %2020 = sext i32 %2019 to i64
  %2021 = mul nsw i64 %2020, 2400
  %2022 = add i64 %2021, ptrtoint (%idmo_type* @idmo to i64)
  %2023 = inttoptr i64 %1033 to i32*
  %2024 = load i32, i32* %2023
  %2025 = sext i32 %2024 to i64
  %2026 = mul nsw i64 %2025, 400
  %2027 = add i64 %2026, %2022
  %2028 = inttoptr i64 %487 to i32*
  %2029 = load i32, i32* %2028
  %2030 = sext i32 %2029 to i64
  %2031 = mul nsw i64 %2030, 20
  %2032 = add i64 %2031, %2027
  %2033 = inttoptr i64 %490 to i32*
  %2034 = load i32, i32* %2033
  %2035 = sext i32 %2034 to i64
  %2036 = shl nsw i64 %2035, 2
  %2037 = add i64 %2036, %2032
  %2038 = inttoptr i64 %2037 to i32*
  %2039 = load i32, i32* %2038
  %2040 = zext i32 %2039 to i64
  store i64 %2040, i64* %7, align 8, !tbaa !1240
  %2041 = inttoptr i64 %493 to i32*
  store i32 %2039, i32* %2041
  %2042 = inttoptr i64 %494 to i64*
  %2043 = load i64, i64* %2042
  %2044 = inttoptr i64 %493 to i32*
  %2045 = load i32, i32* %2044
  %2046 = sext i32 %2045 to i64
  %2047 = shl nsw i64 %2046, 3
  %2048 = add i64 %2047, %2043
  %2049 = inttoptr i64 %2048 to double*
  %2050 = load double, double* %2049
  store double %2050, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %2051 = inttoptr i64 %495 to i64*
  %2052 = load i64, i64* %2051
  %2053 = inttoptr i64 %492 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  %2056 = shl nsw i64 %2055, 3
  %2057 = add i64 %2056, %2052
  %2058 = inttoptr i64 %2057 to double*
  store double %2050, double* %2058
  %2059 = inttoptr i64 %490 to i32*
  %2060 = load i32, i32* %2059
  %2061 = add i32 %2060, 1
  %2062 = inttoptr i64 %490 to i32*
  store i32 %2061, i32* %2062
  %2063 = add i64 %461, -13
  br label %block_41a54f

block_41ae4c:                                     ; preds = %block_41ae3f
  %2064 = inttoptr i64 %1933 to i32*
  %2065 = load i32, i32* %2064
  %2066 = sext i32 %2065 to i64
  %2067 = mul nsw i64 %2066, 600
  %2068 = add i64 %2067, ptrtoint (%idel_type* @idel to i64)
  %2069 = inttoptr i64 %1934 to i32*
  %2070 = load i32, i32* %2069
  %2071 = sext i32 %2070 to i64
  %2072 = mul nsw i64 %2071, 100
  %2073 = add i64 %2072, %2068
  %2074 = sext i32 %1808 to i64
  %2075 = mul nsw i64 %2074, 20
  store i64 %2075, i64* %5, align 8, !tbaa !1240
  %2076 = add i64 %2075, %2073
  %2077 = inttoptr i64 %2076 to i32*
  %2078 = load i32, i32* %2077
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %6, align 8, !tbaa !1240
  %2080 = inttoptr i64 %1935 to i32*
  store i32 %2078, i32* %2080
  %2081 = add i64 %1819, 73
  %2082 = inttoptr i64 %1936 to i32*
  store i32 0, i32* %2082
  br label %block_41ae95

block_419d06:                                     ; preds = %block_419ad4
  %2083 = inttoptr i64 %1045 to i32*
  store i32 2, i32* %2083
  %2084 = add i64 %1044, 25
  br label %block_419d1f

block_41a4f7:                                     ; preds = %block_41a43d
  %2085 = inttoptr i64 %1692 to i32*
  %2086 = load i32, i32* %2085
  %2087 = add i32 %2086, 1
  %2088 = inttoptr i64 %1692 to i32*
  store i32 %2087, i32* %2088
  %2089 = add i64 %1848, -280
  br label %block_41a3df

block_41a621:                                     ; preds = %block_41a54f
  %2090 = inttoptr i64 %487 to i32*
  %2091 = load i32, i32* %2090
  %2092 = add i32 %2091, 1
  %2093 = inttoptr i64 %487 to i32*
  store i32 %2092, i32* %2093
  %2094 = add i64 %461, -233
  br label %block_41a538

block_41a687:                                     ; preds = %block_41a67a
  %2095 = inttoptr i64 %1875 to i32*
  %2096 = load i32, i32* %2095
  %2097 = sext i32 %2096 to i64
  %2098 = mul nsw i64 %2097, 600
  %2099 = add i64 %2098, ptrtoint (%idel_type* @idel to i64)
  %2100 = inttoptr i64 %1876 to i32*
  %2101 = load i32, i32* %2100
  %2102 = sext i32 %2101 to i64
  %2103 = mul nsw i64 %2102, 100
  %2104 = add i64 %2103, %2099
  %2105 = sext i32 %1510 to i64
  %2106 = shl nsw i64 %2105, 2
  %2107 = add i64 %2106, %2104
  %2108 = inttoptr i64 %2107 to i32*
  %2109 = load i32, i32* %2108
  %2110 = zext i32 %2109 to i64
  store i64 %2110, i64* %6, align 8, !tbaa !1240
  %2111 = inttoptr i64 %1877 to i32*
  store i32 %2109, i32* %2111
  %2112 = add i64 %1521, 67
  %2113 = inttoptr i64 %1878 to i32*
  store i32 0, i32* %2113
  br label %block_41a6ca

block_41a020:                                     ; preds = %block_419d85
  %2114 = add i32 %1582, 1
  %2115 = inttoptr i64 %1392 to i32*
  store i32 %2114, i32* %2115
  %2116 = add i64 %1580, -695
  br label %block_419d69

block_41ad42:                                     ; preds = %block_41ad4f, %block_41ad42.preheader
  %2117 = phi i64 [ %706, %block_41ad4f ], [ %410, %block_41ad42.preheader ]
  %2118 = phi %struct.Memory* [ %2118, %block_41ad4f ], [ %390, %block_41ad42.preheader ]
  %2119 = inttoptr i64 %409 to i32*
  %2120 = load i32, i32* %2119
  %2121 = add i32 %2120, -4
  %2122 = lshr i32 %2121, 31
  %2123 = trunc i32 %2122 to i8
  %2124 = lshr i32 %2120, 31
  %2125 = xor i32 %2122, %2124
  %2126 = add nuw nsw i32 %2125, %2124
  %2127 = icmp eq i32 %2126, 2
  %2128 = icmp ne i8 %2123, 0
  %2129 = xor i1 %2128, %2127
  %2130 = select i1 %2129, i64 13, i64 184
  %2131 = add i64 %2117, %2130
  br i1 %2129, label %block_41ad4f, label %block_41adfa

block_41ac18:                                     ; preds = %block_41ac0e, %block_41ac25
  %2132 = phi i64 [ %2208, %block_41ac0e ], [ %775, %block_41ac25 ]
  %2133 = phi %struct.Memory* [ %2255, %block_41ac0e ], [ %2133, %block_41ac25 ]
  %2134 = inttoptr i64 %416 to i32*
  %2135 = load i32, i32* %2134
  %2136 = add i32 %2135, -5
  %2137 = lshr i32 %2136, 31
  %2138 = lshr i32 %2135, 31
  %2139 = xor i32 %2137, %2138
  %2140 = add nuw nsw i32 %2139, %2138
  %2141 = icmp eq i32 %2140, 2
  %2142 = icmp ne i32 %2137, 0
  %2143 = xor i1 %2142, %2141
  %2144 = select i1 %2143, i64 13, i64 233
  %2145 = add i64 %2132, %2144
  br i1 %2143, label %block_41ac25, label %block_41ad01

block_419fee:                                     ; preds = %block_419eb9
  %2146 = inttoptr i64 %1395 to i32*
  %2147 = load i32, i32* %2146
  %2148 = add i32 %2147, 1
  %2149 = inttoptr i64 %1395 to i32*
  store i32 %2148, i32* %2149
  %2150 = add i64 %1667, -403
  br label %block_419e5b

block_41a814:                                     ; preds = %block_41a807
  %2151 = inttoptr i64 %1875 to i32*
  %2152 = load i32, i32* %2151
  %2153 = sext i32 %2152 to i64
  %2154 = mul nsw i64 %2153, 600
  %2155 = add i64 %2154, ptrtoint (%idel_type* @idel to i64)
  %2156 = inttoptr i64 %1876 to i32*
  %2157 = load i32, i32* %2156
  %2158 = sext i32 %2157 to i64
  %2159 = mul nsw i64 %2158, 100
  %2160 = add i64 %2159, %2155
  %2161 = sext i32 %2242 to i64
  store i64 %2161, i64* %6, align 8, !tbaa !1240
  %2162 = shl nsw i64 %2161, 2
  %2163 = add i64 %2162, %2160
  %2164 = inttoptr i64 %2163 to i32*
  %2165 = load i32, i32* %2164
  %2166 = inttoptr i64 %1877 to i32*
  store i32 %2165, i32* %2166
  %2167 = inttoptr i64 %1875 to i32*
  %2168 = load i32, i32* %2167
  %2169 = sext i32 %2168 to i64
  %2170 = mul nsw i64 %2169, 2400
  %2171 = add i64 %2170, ptrtoint (%idmo_type* @idmo to i64)
  %2172 = inttoptr i64 %1876 to i32*
  %2173 = load i32, i32* %2172
  %2174 = sext i32 %2173 to i64
  %2175 = mul nsw i64 %2174, 400
  %2176 = add i64 %2175, %2171
  %2177 = inttoptr i64 %1872 to i32*
  %2178 = load i32, i32* %2177
  %2179 = sext i32 %2178 to i64
  %2180 = shl nsw i64 %2179, 2
  %2181 = add i64 %2180, %2176
  %2182 = inttoptr i64 %2181 to i32*
  %2183 = load i32, i32* %2182
  %2184 = zext i32 %2183 to i64
  store i64 %2184, i64* %7, align 8, !tbaa !1240
  %2185 = inttoptr i64 %1883 to i32*
  store i32 %2183, i32* %2185
  %2186 = inttoptr i64 %1884 to i64*
  %2187 = load i64, i64* %2186
  %2188 = inttoptr i64 %1883 to i32*
  %2189 = load i32, i32* %2188
  %2190 = sext i32 %2189 to i64
  %2191 = shl nsw i64 %2190, 3
  %2192 = add i64 %2191, %2187
  %2193 = inttoptr i64 %2192 to double*
  %2194 = load double, double* %2193
  store double %2194, double* %46, align 1, !tbaa !1246
  store double 0.000000e+00, double* %48, align 1, !tbaa !1246
  %2195 = inttoptr i64 %1885 to i64*
  %2196 = load i64, i64* %2195
  %2197 = inttoptr i64 %1877 to i32*
  %2198 = load i32, i32* %2197
  %2199 = sext i32 %2198 to i64
  %2200 = shl nsw i64 %2199, 3
  %2201 = add i64 %2200, %2196
  %2202 = inttoptr i64 %2201 to double*
  store double %2194, double* %2202
  %2203 = inttoptr i64 %1872 to i32*
  %2204 = load i32, i32* %2203
  %2205 = add i32 %2204, 1
  %2206 = inttoptr i64 %1872 to i32*
  store i32 %2205, i32* %2206
  %2207 = add i64 %2253, -13
  br label %block_41a807

block_41ac0e:                                     ; preds = %block_41ac01
  %2208 = add i64 %2267, 10
  %2209 = inttoptr i64 %416 to i32*
  store i32 0, i32* %2209
  br label %block_41ac18

block_41abb0:                                     ; preds = %block_41ad1a, %block_41abb0.preheader
  %2210 = phi i64 [ %500, %block_41ad1a ], [ %410, %block_41abb0.preheader ]
  %2211 = phi %struct.Memory* [ %2255, %block_41ad1a ], [ %390, %block_41abb0.preheader ]
  %2212 = inttoptr i64 %409 to i32*
  %2213 = load i32, i32* %2212
  %2214 = add i32 %2213, -4
  %2215 = lshr i32 %2214, 31
  %2216 = trunc i32 %2215 to i8
  %2217 = lshr i32 %2213, 31
  %2218 = xor i32 %2215, %2217
  %2219 = add nuw nsw i32 %2218, %2217
  %2220 = icmp eq i32 %2219, 2
  %2221 = icmp ne i8 %2216, 0
  %2222 = xor i1 %2221, %2220
  %2223 = select i1 %2222, i64 13, i64 387
  %2224 = add i64 %2210, %2223
  br i1 %2222, label %block_41abbd, label %block_41ad33

block_41a95c:                                     ; preds = %block_41aa63, %block_41a912
  %2225 = phi i64 [ %519, %block_41a912 ], [ %1620, %block_41aa63 ]
  %2226 = phi %struct.Memory* [ %522, %block_41a912 ], [ %376, %block_41aa63 ]
  %2227 = inttoptr i64 %1970 to i32*
  %2228 = load i32, i32* %2227
  %2229 = add i32 %2228, -2
  %2230 = lshr i32 %2229, 31
  %2231 = lshr i32 %2228, 31
  %2232 = xor i32 %2230, %2231
  %2233 = add nuw nsw i32 %2232, %2231
  %2234 = icmp eq i32 %2233, 2
  %2235 = icmp ne i32 %2230, 0
  %2236 = xor i1 %2235, %2234
  %2237 = select i1 %2236, i64 13, i64 288
  %2238 = add i64 %2225, %2237
  br i1 %2236, label %block_41a969, label %block_41aa7c

block_41a807:                                     ; preds = %block_41a814, %block_41a807.preheader
  %2239 = phi i64 [ %2207, %block_41a814 ], [ %1873, %block_41a807.preheader ]
  %2240 = phi %struct.Memory* [ %2240, %block_41a814 ], [ %777, %block_41a807.preheader ]
  %2241 = inttoptr i64 %1872 to i32*
  %2242 = load i32, i32* %2241
  %2243 = add i32 %2242, -4
  %2244 = lshr i32 %2243, 31
  %2245 = trunc i32 %2244 to i8
  %2246 = lshr i32 %2242, 31
  %2247 = xor i32 %2244, %2246
  %2248 = add nuw nsw i32 %2247, %2246
  %2249 = icmp eq i32 %2248, 2
  %2250 = icmp ne i8 %2245, 0
  %2251 = xor i1 %2250, %2249
  %2252 = select i1 %2251, i64 13, i64 182
  %2253 = add i64 %2239, %2252
  br i1 %2251, label %block_41a814, label %block_41a8bd

block_41ac01:                                     ; preds = %block_41ad01, %block_41abbd
  %2254 = phi i64 [ %441, %block_41abbd ], [ %540, %block_41ad01 ]
  %2255 = phi %struct.Memory* [ %2211, %block_41abbd ], [ %2133, %block_41ad01 ]
  %2256 = inttoptr i64 %415 to i32*
  %2257 = load i32, i32* %2256
  %2258 = add i32 %2257, -2
  %2259 = lshr i32 %2258, 31
  %2260 = lshr i32 %2257, 31
  %2261 = xor i32 %2259, %2260
  %2262 = add nuw nsw i32 %2261, %2260
  %2263 = icmp eq i32 %2262, 2
  %2264 = icmp ne i32 %2259, 0
  %2265 = xor i1 %2264, %2263
  %2266 = select i1 %2265, i64 13, i64 281
  %2267 = add i64 %2254, %2266
  br i1 %2265, label %block_41ac0e, label %block_41ad1a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41f970_copy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41f970:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %13 = load i64, i64* %11, align 8
  %14 = load i64, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %9, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %8, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -28
  %24 = load i32, i32* %5, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %14, -32
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = add i64 %14, -28
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = add i64 %14, -24
  %33 = bitcast %union.VectorReg* %12 to double*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  %36 = add i64 %14, -16
  br label %block_41f986

block_41f986:                                     ; preds = %block_41f992, %block_41f970
  %37 = phi %struct.Memory* [ %2, %block_41f970 ], [ %37, %block_41f992 ]
  %38 = inttoptr i64 %26 to i32*
  %39 = load i32, i32* %38
  %40 = inttoptr i64 %28 to i32*
  %41 = load i32, i32* %40
  %42 = sub i32 %39, %41
  %43 = lshr i32 %42, 31
  %44 = trunc i32 %43 to i8
  %45 = lshr i32 %39, 31
  %46 = lshr i32 %41, 31
  %47 = xor i32 %46, %45
  %48 = xor i32 %43, %45
  %49 = add nuw nsw i32 %48, %47
  %50 = icmp eq i32 %49, 2
  %51 = icmp ne i8 %44, 0
  %52 = xor i1 %51, %50
  br i1 %52, label %block_41f992, label %block_41f9ba

block_41f9ba:                                     ; preds = %block_41f986
  %53 = zext i32 %39 to i64
  store i64 %53, i64* %6, align 8, !tbaa !1240
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %57 = icmp ult i32 %39, %41
  %58 = zext i1 %57 to i8
  %59 = and i32 %42, 255
  %60 = tail call i32 @llvm.ctpop.i32(i32 %59) #11
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  %64 = xor i32 %41, %39
  %65 = xor i32 %64, %42
  %66 = lshr i32 %65, 4
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = icmp eq i32 %42, 0
  %70 = zext i1 %69 to i8
  %71 = zext i1 %50 to i8
  store i8 %58, i8* %29, align 1, !tbaa !1248
  store i8 %63, i8* %54, align 1, !tbaa !1261
  store i8 %68, i8* %30, align 1, !tbaa !1262
  store i8 %70, i8* %55, align 1, !tbaa !1263
  store i8 %44, i8* %31, align 1, !tbaa !1264
  store i8 %71, i8* %56, align 1, !tbaa !1265
  %72 = inttoptr i64 %15 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %11, align 8, !tbaa !1240
  %74 = inttoptr i64 %14 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %3, align 8, !tbaa !1240
  %76 = add i64 %14, 8
  store i64 %76, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %37

block_41f992:                                     ; preds = %block_41f986
  %77 = inttoptr i64 %32 to i64*
  %78 = load i64, i64* %77
  %79 = sext i32 %39 to i64
  %80 = shl nsw i64 %79, 3
  %81 = add i64 %80, %78
  %82 = inttoptr i64 %81 to double*
  %83 = load double, double* %82
  store double %83, double* %33, align 1, !tbaa !1246
  store double 0.000000e+00, double* %35, align 1, !tbaa !1246
  %84 = inttoptr i64 %36 to i64*
  %85 = load i64, i64* %84
  store i64 %79, i64* %7, align 8, !tbaa !1240
  %86 = add i64 %80, %85
  %87 = inttoptr i64 %86 to double*
  store double %83, double* %87
  %88 = inttoptr i64 %26 to i32*
  %89 = load i32, i32* %88
  %90 = add i32 %89, 1
  %91 = inttoptr i64 %26 to i32*
  store i32 %90, i32* %91
  br label %block_41f986
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_414ad0_setpcmo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_414ad0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %18 = load i64, i64* %10, align 8
  %19 = load i64, i64* %9, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  store i64 %20, i64* %10, align 8, !tbaa !1240
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%ifpcmor_type* @ifpcmor to i64), i64* %8, align 8, !tbaa !1240
  store i64 0, i64* %6, align 8, !tbaa !1240
  %28 = load i32, i32* bitcast (%nvertex_type* @nvertex to i32*)
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %7, align 8, !tbaa !1240
  %30 = add i64 %1, 44560
  %31 = add i64 %1, 32
  %32 = add i64 %19, -64
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  store i64 %32, i64* %9, align 8, !tbaa !1240
  %34 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %30, %struct.Memory* %2)
  %35 = load i64, i64* %3, align 8
  store i64 ptrtoint (%edgevis_type* @edgevis to i64), i64* %8, align 8, !tbaa !1240
  store i64 0, i64* %6, align 8, !tbaa !1240
  %36 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %37 = sext i32 %36 to i64
  %38 = mul nsw i64 %37, 24
  %39 = and i64 %38, 4294967288
  store i64 %39, i64* %7, align 8, !tbaa !1240
  %40 = add i64 %35, 44528
  %41 = add i64 %35, 25
  %42 = load i64, i64* %9, align 8, !tbaa !1240
  %43 = add i64 %42, -8
  %44 = inttoptr i64 %43 to i64*
  store i64 %41, i64* %44
  store i64 %43, i64* %9, align 8, !tbaa !1240
  %45 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull %0, i64 %40, %struct.Memory* %34)
  %46 = load i64, i64* %10, align 8
  %47 = add i64 %46, -36
  %48 = load i64, i64* %3, align 8
  %49 = add i64 %48, 7
  %50 = inttoptr i64 %47 to i32*
  store i32 0, i32* %50
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %52 = bitcast [32 x %union.VectorReg]* %14 to double*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = bitcast i64* %53 to double*
  %55 = bitcast %union.VectorReg* %15 to double*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  %58 = bitcast %union.VectorReg* %16 to double*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %60 = bitcast i64* %59 to double*
  %61 = bitcast %union.VectorReg* %17 to i8*
  %62 = bitcast %union.VectorReg* %17 to i32*
  %63 = getelementptr inbounds i8, i8* %61, i64 4
  %64 = bitcast i8* %63 to i32*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to i32*
  %67 = getelementptr inbounds i8, i8* %61, i64 12
  %68 = bitcast i8* %67 to i32*
  %69 = bitcast %union.VectorReg* %17 to double*
  br label %block_414b10

block_414ca7:                                     ; preds = %block_414c66
  %70 = zext i32 %754 to i64
  store i64 %70, i64* %8, align 8, !tbaa !1240
  %71 = add i64 %762, 2505
  %72 = add i64 %762, 8
  %73 = load i64, i64* %9, align 8, !tbaa !1240
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75
  store i64 %74, i64* %9, align 8, !tbaa !1240
  %76 = tail call %struct.Memory* @sub_415670_pc_corner(%struct.State* nonnull %0, i64 %71, %struct.Memory* %733)
  %77 = load i64, i64* %10, align 8
  %78 = add i64 %77, -20
  %79 = load i64, i64* %3, align 8
  %80 = inttoptr i64 %78 to i32*
  %81 = load i32, i32* %80
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 2
  %84 = add i64 %83, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %85 = add i64 %79, 15
  %86 = inttoptr i64 %84 to i32*
  store i32 1, i32* %86
  br label %block_414cbe

block_414bf7:                                     ; preds = %block_414bb6
  %87 = zext i32 %802 to i64
  store i64 %87, i64* %8, align 8, !tbaa !1240
  %88 = add i64 %810, 2681
  %89 = add i64 %810, 8
  %90 = load i64, i64* %9, align 8, !tbaa !1240
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92
  store i64 %91, i64* %9, align 8, !tbaa !1240
  %93 = tail call %struct.Memory* @sub_415670_pc_corner(%struct.State* nonnull %0, i64 %88, %struct.Memory* %781)
  %94 = load i64, i64* %10, align 8
  %95 = add i64 %94, -20
  %96 = load i64, i64* %3, align 8
  %97 = inttoptr i64 %95 to i32*
  %98 = load i32, i32* %97
  %99 = sext i32 %98 to i64
  %100 = shl nsw i64 %99, 2
  %101 = add i64 %100, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %102 = add i64 %96, 15
  %103 = inttoptr i64 %101 to i32*
  store i32 1, i32* %103
  br label %block_414c0e

block_41507e:                                     ; preds = %block_414f73, %block_41503f, %block_415062
  %104 = phi i64 [ %1490, %block_414f73 ], [ %1212, %block_41503f ], [ %368, %block_415062 ]
  %105 = phi i64 [ 68, %block_414f73 ], [ 5, %block_41503f ], [ 5, %block_415062 ]
  %106 = phi %struct.Memory* [ %1397, %block_414f73 ], [ %716, %block_41503f ], [ %367, %block_415062 ]
  %107 = add i64 %104, %105
  br label %block_4150c4

block_4150f4:                                     ; preds = %block_415227, %block_4150ed
  %108 = phi i64 [ %186, %block_4150ed ], [ %243, %block_415227 ]
  %109 = phi %struct.Memory* [ %516, %block_4150ed ], [ %1510, %block_415227 ]
  %110 = inttoptr i64 %508 to i32*
  %111 = load i32, i32* %110
  %112 = add i32 %111, -2
  %113 = lshr i32 %112, 31
  %114 = lshr i32 %111, 31
  %115 = xor i32 %113, %114
  %116 = add nuw nsw i32 %115, %114
  %117 = icmp eq i32 %116, 2
  %118 = icmp ne i32 %113, 0
  %119 = xor i1 %118, %117
  %120 = select i1 %119, i64 10, i64 326
  %121 = add i64 %108, %120
  br i1 %119, label %block_4150fe, label %block_41523a

block_414cfd:                                     ; preds = %block_414ccf
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%f_e_ef_type* @f_e_ef to i64), i64* %5, align 8, !tbaa !1240
  %122 = add i64 %922, -36
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123
  %125 = sext i32 %124 to i64
  %126 = mul nsw i64 %125, 96
  %127 = add i64 %126, ptrtoint (%edgevis_type* @edgevis to i64)
  %128 = add i64 %922, -40
  %129 = inttoptr i64 %128 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  %132 = shl nsw i64 %131, 4
  %133 = add i64 %132, %127
  %134 = load i64, i64* %10, align 8
  %135 = add i64 %134, -24
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136
  %138 = sext i32 %137 to i64
  %139 = shl nsw i64 %138, 2
  %140 = add i64 %139, %133
  %141 = inttoptr i64 %140 to i32*
  store i32 1, i32* %141
  %142 = add i64 %134, -40
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = sext i32 %144 to i64
  %146 = shl nsw i64 %145, 4
  %147 = load i64, i64* %5, align 8
  %148 = add i64 %146, %147
  %149 = inttoptr i64 %135 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %150 to i64
  %152 = shl nsw i64 %151, 2
  %153 = add i64 %152, %148
  %154 = inttoptr i64 %153 to i32*
  %155 = load i32, i32* %154
  %156 = add i64 %134, -4
  %157 = inttoptr i64 %156 to i32*
  store i32 %155, i32* %157
  %158 = add i64 %134, -36
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159
  %161 = sext i32 %160 to i64
  %162 = mul nsw i64 %161, 24
  %163 = load i64, i64* %4, align 8
  %164 = add i64 %162, %163
  %165 = load i64, i64* %10, align 8
  %166 = add i64 %165, -4
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  %169 = sext i32 %168 to i64
  %170 = shl nsw i64 %169, 2
  %171 = add i64 %170, %164
  %172 = inttoptr i64 %171 to i32*
  %173 = load i32, i32* %172
  %174 = add i32 %173, -2
  %175 = icmp eq i32 %174, 0
  %176 = select i1 %175, i64 109, i64 452
  %177 = add i64 %933, %176
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %4, align 8, !tbaa !1240
  %178 = add i64 %165, -36
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  %182 = sext i32 %180 to i128
  %183 = and i128 %182, -18446744073709551616
  %184 = zext i64 %181 to i128
  %185 = or i128 %183, %184
  br i1 %175, label %block_414d6a, label %block_414ec1

block_4150ed:                                     ; preds = %block_4150e3
  %186 = add i64 %529, 7
  %187 = inttoptr i64 %508 to i32*
  store i32 0, i32* %187
  br label %block_4150f4

block_414e6c:                                     ; preds = %block_414e49
  store i64 2, i64* %5, align 8, !tbaa !1240
  %188 = load i64, i64* %10, align 8
  %189 = add i64 %188, -40
  %190 = inttoptr i64 %189 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %8, align 8, !tbaa !1240
  %193 = add i64 %188, -36
  %194 = inttoptr i64 %193 to i32*
  %195 = load i32, i32* %194
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %7, align 8, !tbaa !1240
  %197 = add i64 %188, -24
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %6, align 8, !tbaa !1240
  %201 = add i64 %188, -16
  %202 = inttoptr i64 %201 to i32*
  %203 = load i32, i32* %202
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %51, align 8, !tbaa !1240
  %205 = add i64 %1378, 2708
  %206 = add i64 %1378, 23
  %207 = load i64, i64* %9, align 8, !tbaa !1240
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209
  store i64 %208, i64* %9, align 8, !tbaa !1240
  %210 = tail call %struct.Memory* @sub_415900_com_dpc(%struct.State* nonnull %0, i64 %205, %struct.Memory* %716)
  %211 = load i64, i64* %3, align 8
  %212 = load i64, i64* %10, align 8
  %213 = add i64 %212, -8
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = sext i32 %215 to i64
  %217 = mul nsw i64 %216, 96
  %218 = add i64 %217, ptrtoint (%edgevis_type* @edgevis to i64)
  %219 = add i64 %212, -40
  %220 = inttoptr i64 %219 to i32*
  %221 = load i32, i32* %220
  %222 = sext i32 %221 to i64
  %223 = shl nsw i64 %222, 4
  %224 = add i64 %223, %218
  %225 = load i64, i64* %10, align 8
  %226 = add i64 %225, -24
  %227 = inttoptr i64 %226 to i32*
  %228 = load i32, i32* %227
  %229 = sext i32 %228 to i64
  %230 = shl nsw i64 %229, 2
  %231 = add i64 %230, ptrtoint (%op_type* @op to i64)
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232
  %234 = sext i32 %233 to i64
  store i64 %234, i64* %11, align 8, !tbaa !1240
  %235 = shl nsw i64 %234, 2
  %236 = add i64 %235, %224
  %237 = add i64 %211, 52
  %238 = inttoptr i64 %236 to i32*
  store i32 1, i32* %238
  br label %block_4150c4

block_415227:                                     ; preds = %block_415105
  %239 = inttoptr i64 %508 to i32*
  %240 = load i32, i32* %239
  %241 = add i32 %240, 1
  %242 = inttoptr i64 %508 to i32*
  store i32 %241, i32* %242
  %243 = add i64 %1522, -307
  br label %block_4150f4

block_414d6a:                                     ; preds = %block_414cfd
  %244 = mul nsw i128 %185, 96
  %245 = trunc i128 %244 to i64
  %246 = add i64 %245, ptrtoint (%sje_type* @sje to i64)
  %247 = shl nsw i64 %169, 4
  %248 = add i64 %247, %246
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249
  %251 = load i64, i64* %10, align 8
  %252 = add i64 %251, -8
  %253 = inttoptr i64 %252 to i32*
  store i32 %250, i32* %253
  %254 = inttoptr i64 %252 to i32*
  %255 = load i32, i32* %254
  %256 = sext i32 %255 to i64
  %257 = mul nsw i64 %256, 24
  %258 = load i64, i64* %4, align 8
  %259 = add i64 %257, %258
  store i64 %259, i64* %4, align 8, !tbaa !1240
  %260 = add i64 %251, -40
  %261 = inttoptr i64 %260 to i32*
  %262 = load i32, i32* %261
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 2
  %265 = add i64 %264, %259
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266
  %268 = add i32 %267, -2
  %269 = icmp eq i32 %268, 0
  %270 = select i1 %269, i64 72, i64 223
  %271 = add i64 %177, %270
  br i1 %269, label %block_414db2, label %block_414e49

block_414ee4:                                     ; preds = %block_414ec1
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64* %6, align 8, !tbaa !1240
  %272 = load i64, i64* %10, align 8
  %273 = add i64 %272, -36
  %274 = inttoptr i64 %273 to i32*
  %275 = load i32, i32* %274
  %276 = sext i32 %275 to i64
  %277 = mul nsw i64 %276, 96
  %278 = add i64 %277, ptrtoint (%edgevis_type* @edgevis to i64)
  %279 = add i64 %272, -4
  %280 = inttoptr i64 %279 to i32*
  %281 = load i32, i32* %280
  %282 = sext i32 %281 to i64
  %283 = shl nsw i64 %282, 4
  %284 = add i64 %283, %278
  store i64 %284, i64* %7, align 8, !tbaa !1240
  %285 = load i64, i64* %10, align 8
  %286 = add i64 %285, -40
  %287 = inttoptr i64 %286 to i32*
  %288 = load i32, i32* %287
  %289 = sext i32 %288 to i64
  %290 = shl nsw i64 %289, 4
  %291 = load i64, i64* %6, align 8
  %292 = add i64 %290, %291
  %293 = add i64 %285, -24
  %294 = inttoptr i64 %293 to i32*
  %295 = load i32, i32* %294
  %296 = sext i32 %295 to i64
  %297 = shl nsw i64 %296, 2
  %298 = add i64 %297, %292
  %299 = inttoptr i64 %298 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  %302 = load i64, i64* %7, align 8
  %303 = shl nsw i64 %301, 2
  %304 = add i64 %303, %302
  %305 = inttoptr i64 %304 to i32*
  store i32 1, i32* %305
  %306 = add i64 %285, -36
  %307 = inttoptr i64 %306 to i32*
  %308 = load i32, i32* %307
  %309 = sext i32 %308 to i64
  %310 = mul nsw i64 %309, 96
  %311 = load i64, i64* %5, align 8
  %312 = add i64 %310, %311
  %313 = load i64, i64* %10, align 8
  %314 = add i64 %313, -4
  %315 = inttoptr i64 %314 to i32*
  %316 = load i32, i32* %315
  %317 = sext i32 %316 to i64
  %318 = shl nsw i64 %317, 4
  %319 = add i64 %318, %312
  %320 = add i64 %319, 8
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %51, align 8, !tbaa !1240
  %324 = add i64 %313, -8
  %325 = inttoptr i64 %324 to i32*
  store i32 %322, i32* %325
  %326 = inttoptr i64 %324 to i32*
  %327 = load i32, i32* %326
  %328 = sext i32 %327 to i64
  %329 = mul nsw i64 %328, 24
  %330 = load i64, i64* %4, align 8
  %331 = add i64 %329, %330
  store i64 %331, i64* %4, align 8, !tbaa !1240
  %332 = load i64, i64* %10, align 8
  %333 = add i64 %332, -40
  %334 = inttoptr i64 %333 to i32*
  %335 = load i32, i32* %334
  %336 = sext i32 %335 to i64
  %337 = shl nsw i64 %336, 2
  %338 = add i64 %337, %331
  %339 = inttoptr i64 %338 to i32*
  %340 = load i32, i32* %339
  %341 = add i32 %340, -1
  %342 = icmp eq i32 %341, 0
  %343 = select i1 %342, i64 143, i64 347
  %344 = add i64 %772, %343
  br i1 %342, label %block_414f73, label %block_41503f

block_415062:                                     ; preds = %block_41503f
  store i64 4, i64* %5, align 8, !tbaa !1240
  %345 = load i64, i64* %10, align 8
  %346 = add i64 %345, -40
  %347 = inttoptr i64 %346 to i32*
  %348 = load i32, i32* %347
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %8, align 8, !tbaa !1240
  %350 = add i64 %345, -36
  %351 = inttoptr i64 %350 to i32*
  %352 = load i32, i32* %351
  %353 = zext i32 %352 to i64
  store i64 %353, i64* %7, align 8, !tbaa !1240
  %354 = add i64 %345, -24
  %355 = inttoptr i64 %354 to i32*
  %356 = load i32, i32* %355
  %357 = zext i32 %356 to i64
  store i64 %357, i64* %6, align 8, !tbaa !1240
  %358 = add i64 %345, -16
  %359 = inttoptr i64 %358 to i32*
  %360 = load i32, i32* %359
  %361 = zext i32 %360 to i64
  store i64 %361, i64* %51, align 8, !tbaa !1240
  %362 = add i64 %1212, 2206
  %363 = add i64 %1212, 23
  %364 = load i64, i64* %9, align 8, !tbaa !1240
  %365 = add i64 %364, -8
  %366 = inttoptr i64 %365 to i64*
  store i64 %363, i64* %366
  store i64 %365, i64* %9, align 8, !tbaa !1240
  %367 = tail call %struct.Memory* @sub_415900_com_dpc(%struct.State* nonnull %0, i64 %362, %struct.Memory* %716)
  %368 = load i64, i64* %3, align 8
  br label %block_41507e

block_4153e1:                                     ; preds = %block_41525b
  store double %703, double* %52, align 1
  store double 0.000000e+00, double* %54, align 1, !tbaa !1246
  %369 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 936) to double*)
  store double %369, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %57, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %5, align 8, !tbaa !1240
  %370 = load i64, i64* %10, align 8
  %371 = add i64 %370, -32
  %372 = inttoptr i64 %371 to i32*
  store i32 4, i32* %372
  %373 = add i64 %370, -36
  %374 = inttoptr i64 %373 to i32*
  %375 = load i32, i32* %374
  %376 = sext i32 %375 to i64
  %377 = mul nsw i64 %376, 2400
  %378 = add i64 %377, ptrtoint (%idmo_type* @idmo to i64)
  %379 = add i64 %370, -40
  %380 = inttoptr i64 %379 to i32*
  %381 = load i32, i32* %380
  %382 = sext i32 %381 to i64
  %383 = mul nsw i64 %382, 400
  %384 = add i64 %383, %378
  %385 = load i64, i64* %10, align 8
  %386 = add i64 %385, -32
  %387 = inttoptr i64 %386 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  %390 = mul nsw i64 %389, 20
  %391 = add i64 %390, %384
  %392 = add i64 %385, -28
  %393 = inttoptr i64 %392 to i32*
  %394 = load i32, i32* %393
  %395 = sext i32 %394 to i64
  store i64 %395, i64* %7, align 8, !tbaa !1240
  %396 = shl nsw i64 %395, 2
  %397 = add i64 %396, %391
  %398 = inttoptr i64 %397 to i32*
  %399 = load i32, i32* %398
  %400 = add i64 %385, -20
  %401 = inttoptr i64 %400 to i32*
  store i32 %399, i32* %401
  %402 = add i64 %385, -16
  %403 = inttoptr i64 %402 to i32*
  %404 = load i32, i32* %403
  %405 = sext i32 %404 to i64
  %406 = mul nsw i64 %405, 800
  %407 = load i64, i64* %5, align 8
  %408 = add i64 %406, %407
  %409 = load i64, i64* %10, align 8
  %410 = add i64 %409, -32
  %411 = inttoptr i64 %410 to i32*
  %412 = load i32, i32* %411
  %413 = sext i32 %412 to i64
  %414 = mul nsw i64 %413, 40
  %415 = add i64 %414, %408
  %416 = add i64 %409, -28
  %417 = inttoptr i64 %416 to i32*
  %418 = load i32, i32* %417
  %419 = sext i32 %418 to i64
  store i64 %419, i64* %6, align 8, !tbaa !1240
  %420 = shl nsw i64 %419, 3
  %421 = add i64 %420, %415
  %422 = inttoptr i64 %421 to double*
  %423 = load double, double* %422
  store double %423, double* %58, align 1, !tbaa !1246
  store double 0.000000e+00, double* %60, align 1, !tbaa !1246
  %424 = add i64 %409, -16
  %425 = inttoptr i64 %424 to i32*
  %426 = load i32, i32* %425
  %427 = add i32 %426, 1
  %428 = zext i32 %427 to i64
  store i64 %428, i64* %8, align 8, !tbaa !1240
  %429 = sext i32 %427 to i64
  %430 = mul nsw i64 %429, 200
  %431 = load i64, i64* %4, align 8
  %432 = add i64 %430, %431
  %433 = load i64, i64* %10, align 8
  %434 = add i64 %433, -32
  %435 = inttoptr i64 %434 to i32*
  %436 = load i32, i32* %435
  %437 = sext i32 %436 to i64
  %438 = mul nsw i64 %437, 40
  %439 = add i64 %438, %432
  %440 = add i64 %433, -28
  %441 = inttoptr i64 %440 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  store i64 %443, i64* %5, align 8, !tbaa !1240
  %444 = shl nsw i64 %443, 3
  %445 = add i64 %444, %439
  %446 = load double, double* %55, align 1
  %447 = inttoptr i64 %445 to double*
  %448 = load double, double* %447
  %449 = fmul double %446, %448
  store double %449, double* %55, align 1, !tbaa !1246
  %450 = load double, double* %58, align 1
  %451 = fadd double %450, %449
  store double %451, double* %58, align 1, !tbaa !1246
  %452 = load double, double* %52, align 1
  %453 = fdiv double %452, %451
  store double %453, double* %52, align 1, !tbaa !1246
  %454 = add i64 %433, -20
  %455 = inttoptr i64 %454 to i32*
  %456 = load i32, i32* %455
  %457 = sext i32 %456 to i64
  %458 = shl nsw i64 %457, 3
  %459 = add i64 %458, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %460 = inttoptr i64 %459 to double*
  store double %453, double* %460
  %461 = load i64, i64* %10, align 8
  %462 = add i64 %461, -28
  %463 = add i64 %702, 203
  %464 = inttoptr i64 %462 to i32*
  store i32 1, i32* %464
  %465 = add i64 %461, -36
  %466 = add i64 %461, -40
  %467 = add i64 %461, -32
  %468 = add i64 %461, -20
  %469 = add i64 %461, -16
  br label %block_4154ac

block_415660:                                     ; preds = %block_414b10
  %470 = load i64, i64* %9, align 8
  %471 = add i64 %470, 48
  %472 = icmp ugt i64 %470, -49
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %22, align 1, !tbaa !1248
  %474 = trunc i64 %471 to i32
  %475 = and i32 %474, 255
  %476 = tail call i32 @llvm.ctpop.i32(i32 %475) #11
  %477 = trunc i32 %476 to i8
  %478 = and i8 %477, 1
  %479 = xor i8 %478, 1
  store i8 %479, i8* %23, align 1, !tbaa !1261
  %480 = xor i64 %470, 16
  %481 = xor i64 %480, %471
  %482 = lshr i64 %481, 4
  %483 = trunc i64 %482 to i8
  %484 = and i8 %483, 1
  store i8 %484, i8* %24, align 1, !tbaa !1262
  %485 = icmp eq i64 %471, 0
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %25, align 1, !tbaa !1263
  %487 = lshr i64 %471, 63
  %488 = trunc i64 %487 to i8
  store i8 %488, i8* %26, align 1, !tbaa !1264
  %489 = lshr i64 %470, 63
  %490 = xor i64 %487, %489
  %491 = add nuw nsw i64 %490, %487
  %492 = icmp eq i64 %491, 2
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %27, align 1, !tbaa !1265
  %494 = add i64 %470, 56
  %495 = inttoptr i64 %471 to i64*
  %496 = load i64, i64* %495
  store i64 %496, i64* %10, align 8, !tbaa !1240
  %497 = inttoptr i64 %494 to i64*
  %498 = load i64, i64* %497
  store i64 %498, i64* %3, align 8, !tbaa !1240
  %499 = add i64 %470, 64
  store i64 %499, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %1220

block_41523a:                                     ; preds = %block_4150f4
  %500 = inttoptr i64 %505 to i32*
  %501 = load i32, i32* %500
  %502 = add i32 %501, 1
  %503 = inttoptr i64 %505 to i32*
  store i32 %502, i32* %503
  %504 = add i64 %121, -343
  br label %block_4150e3

block_4150dc:                                     ; preds = %block_414cc5
  %505 = add i64 %715, -44
  %506 = add i64 %730, 7
  %507 = inttoptr i64 %505 to i32*
  store i32 0, i32* %507
  %508 = add i64 %715, -48
  %509 = add i64 %715, -32
  %510 = add i64 %715, -28
  %511 = add i64 %715, -36
  %512 = add i64 %715, -40
  %513 = add i64 %715, -20
  %514 = add i64 %715, -16
  br label %block_4150e3

block_4150e3:                                     ; preds = %block_4150dc, %block_41523a
  %515 = phi i64 [ %506, %block_4150dc ], [ %504, %block_41523a ]
  %516 = phi %struct.Memory* [ %716, %block_4150dc ], [ %109, %block_41523a ]
  %517 = inttoptr i64 %505 to i32*
  %518 = load i32, i32* %517
  %519 = add i32 %518, -2
  %520 = lshr i32 %519, 31
  %521 = trunc i32 %520 to i8
  %522 = lshr i32 %518, 31
  %523 = xor i32 %520, %522
  %524 = add nuw nsw i32 %523, %522
  %525 = icmp eq i32 %524, 2
  %526 = icmp ne i8 %521, 0
  %527 = xor i1 %526, %525
  %528 = select i1 %527, i64 10, i64 362
  %529 = add i64 %515, %528
  br i1 %527, label %block_4150ed, label %block_41524d

block_4150fe:                                     ; preds = %block_4150f4
  %530 = add i64 %121, 7
  %531 = inttoptr i64 %509 to i32*
  store i32 1, i32* %531
  br label %block_415105

block_41563a:                                     ; preds = %block_414b31, %block_415635
  %532 = phi i64 [ %909, %block_414b31 ], [ %811, %block_415635 ]
  %533 = phi %struct.Memory* [ %951, %block_414b31 ], [ %935, %block_415635 ]
  %534 = load i64, i64* %10, align 8
  %535 = add i64 %534, -40
  %536 = inttoptr i64 %535 to i32*
  %537 = load i32, i32* %536
  %538 = add i32 %537, 1
  %539 = inttoptr i64 %535 to i32*
  store i32 %538, i32* %539
  %540 = add i64 %532, -2835
  br label %block_414b27

block_41524d:                                     ; preds = %block_4150e3
  %541 = inttoptr i64 %510 to i32*
  store i32 4, i32* %541
  %542 = load i64, i64* %10, align 8
  %543 = add i64 %542, -32
  %544 = add i64 %529, 14
  %545 = inttoptr i64 %543 to i32*
  store i32 1, i32* %545
  %546 = add i64 %542, -36
  %547 = add i64 %542, -40
  %548 = add i64 %542, -28
  %549 = add i64 %542, -20
  %550 = add i64 %542, -16
  br label %block_41525b

block_41564d:                                     ; preds = %block_414b27
  %551 = add i32 %968, 1
  %552 = inttoptr i64 %966 to i32*
  store i32 %551, i32* %552
  %553 = add i64 %965, -2877
  br label %block_414b10

block_4154b6:                                     ; preds = %block_4154ac
  %554 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  store double %554, double* %52, align 1, !tbaa !1246
  store double 0.000000e+00, double* %54, align 1, !tbaa !1246
  %555 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %555, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %57, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %6, align 8, !tbaa !1240
  %556 = inttoptr i64 %465 to i32*
  %557 = load i32, i32* %556
  %558 = sext i32 %557 to i64
  %559 = mul nsw i64 %558, 2400
  %560 = add i64 %559, ptrtoint (%idmo_type* @idmo to i64)
  %561 = inttoptr i64 %466 to i32*
  %562 = load i32, i32* %561
  %563 = sext i32 %562 to i64
  %564 = mul nsw i64 %563, 400
  %565 = add i64 %564, %560
  %566 = inttoptr i64 %467 to i32*
  %567 = load i32, i32* %566
  %568 = sext i32 %567 to i64
  %569 = mul nsw i64 %568, 20
  %570 = add i64 %569, %565
  %571 = sext i32 %937 to i64
  %572 = shl nsw i64 %571, 2
  %573 = add i64 %572, %570
  %574 = inttoptr i64 %573 to i32*
  %575 = load i32, i32* %574
  %576 = inttoptr i64 %468 to i32*
  store i32 %575, i32* %576
  %577 = inttoptr i64 %469 to i32*
  %578 = load i32, i32* %577
  %579 = sext i32 %578 to i64
  %580 = mul nsw i64 %579, 800
  %581 = add i64 %580, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %582 = inttoptr i64 %467 to i32*
  %583 = load i32, i32* %582
  %584 = sext i32 %583 to i64
  %585 = mul nsw i64 %584, 40
  %586 = add i64 %585, %581
  %587 = inttoptr i64 %462 to i32*
  %588 = load i32, i32* %587
  %589 = sext i32 %588 to i64
  %590 = shl nsw i64 %589, 3
  %591 = add i64 %590, %586
  %592 = inttoptr i64 %591 to double*
  %593 = load double, double* %592
  %594 = add i32 %578, 1
  %595 = sext i32 %594 to i64
  %596 = mul nsw i64 %595, 200
  %597 = add i64 %596, ptrtoint (%pcmor_c_type* @pcmor_c to i64)
  %598 = add i64 %585, %597
  store i64 %598, i64* %8, align 8, !tbaa !1240
  %599 = bitcast double %555 to <2 x i32>
  %600 = extractelement <2 x i32> %599, i32 0
  store i32 %600, i32* %62, align 1, !tbaa !1266
  %601 = extractelement <2 x i32> %599, i32 1
  store i32 %601, i32* %64, align 1, !tbaa !1266
  %602 = add i64 %590, %598
  %603 = load double, double* %69, align 1
  %604 = inttoptr i64 %602 to double*
  %605 = load double, double* %604
  %606 = fmul double %603, %605
  %607 = fadd double %593, %606
  %608 = bitcast double %554 to <2 x i32>
  %609 = extractelement <2 x i32> %608, i32 0
  store i32 %609, i32* %62, align 1, !tbaa !1266
  %610 = extractelement <2 x i32> %608, i32 1
  store i32 %610, i32* %64, align 1, !tbaa !1266
  store i32 0, i32* %66, align 1, !tbaa !1266
  store i32 0, i32* %68, align 1, !tbaa !1266
  %611 = load double, double* %69, align 1
  %612 = fdiv double %611, %607
  store double %612, double* %69, align 1, !tbaa !1246
  %613 = inttoptr i64 %468 to i32*
  %614 = load i32, i32* %613
  %615 = sext i32 %614 to i64
  %616 = shl nsw i64 %615, 3
  %617 = add i64 %616, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %618 = inttoptr i64 %617 to double*
  store double %612, double* %618
  %619 = inttoptr i64 %465 to i32*
  %620 = load i32, i32* %619
  %621 = sext i32 %620 to i64
  %622 = mul nsw i64 %621, 2400
  %623 = load i64, i64* %6, align 8
  %624 = add i64 %622, %623
  %625 = inttoptr i64 %466 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  %628 = mul nsw i64 %627, 400
  %629 = add i64 %628, %624
  %630 = add i64 %629, 200
  %631 = inttoptr i64 %467 to i32*
  %632 = load i32, i32* %631
  %633 = sext i32 %632 to i64
  %634 = mul nsw i64 %633, 20
  %635 = add i64 %634, %630
  %636 = inttoptr i64 %462 to i32*
  %637 = load i32, i32* %636
  %638 = sext i32 %637 to i64
  store i64 %638, i64* %7, align 8, !tbaa !1240
  %639 = shl nsw i64 %638, 2
  %640 = add i64 %639, %635
  %641 = inttoptr i64 %640 to i32*
  %642 = load i32, i32* %641
  %643 = inttoptr i64 %468 to i32*
  store i32 %642, i32* %643
  %644 = inttoptr i64 %469 to i32*
  %645 = load i32, i32* %644
  %646 = sext i32 %645 to i64
  %647 = mul nsw i64 %646, 800
  %648 = load i64, i64* %5, align 8
  %649 = add i64 %647, %648
  %650 = add i64 %649, 400
  %651 = inttoptr i64 %467 to i32*
  %652 = load i32, i32* %651
  %653 = sext i32 %652 to i64
  %654 = mul nsw i64 %653, 40
  %655 = add i64 %654, %650
  %656 = inttoptr i64 %462 to i32*
  %657 = load i32, i32* %656
  %658 = sext i32 %657 to i64
  store i64 %658, i64* %6, align 8, !tbaa !1240
  %659 = shl nsw i64 %658, 3
  %660 = add i64 %659, %655
  %661 = inttoptr i64 %660 to double*
  %662 = load double, double* %661
  %663 = add i32 %645, 1
  %664 = zext i32 %663 to i64
  store i64 %664, i64* %51, align 8, !tbaa !1240
  %665 = sext i32 %663 to i64
  %666 = mul nsw i64 %665, 200
  %667 = load i64, i64* %4, align 8
  %668 = add i64 %666, %667
  %669 = add i64 %654, %668
  store i64 %658, i64* %5, align 8, !tbaa !1240
  %670 = add i64 %659, %669
  %671 = load double, double* %55, align 1
  %672 = inttoptr i64 %670 to double*
  %673 = load double, double* %672
  %674 = fmul double %671, %673
  store double %674, double* %55, align 1, !tbaa !1246
  %675 = fadd double %662, %674
  store double %675, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %676 = load double, double* %52, align 1
  %677 = fdiv double %676, %675
  store double %677, double* %52, align 1, !tbaa !1246
  %678 = inttoptr i64 %468 to i32*
  %679 = load i32, i32* %678
  %680 = sext i32 %679 to i64
  %681 = shl nsw i64 %680, 3
  %682 = add i64 %681, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %683 = inttoptr i64 %682 to double*
  store double %677, double* %683
  %684 = inttoptr i64 %462 to i32*
  %685 = load i32, i32* %684
  %686 = add i32 %685, 1
  %687 = inttoptr i64 %462 to i32*
  store i32 %686, i32* %687
  %688 = add i64 %948, -10
  br label %block_4154ac

block_41525b:                                     ; preds = %block_415265, %block_41524d
  %689 = phi i64 [ %544, %block_41524d ], [ %1147, %block_415265 ]
  %690 = phi %struct.Memory* [ %516, %block_41524d ], [ %690, %block_415265 ]
  %691 = inttoptr i64 %543 to i32*
  %692 = load i32, i32* %691
  %693 = add i32 %692, -4
  %694 = lshr i32 %693, 31
  %695 = lshr i32 %692, 31
  %696 = xor i32 %694, %695
  %697 = add nuw nsw i32 %696, %695
  %698 = icmp eq i32 %697, 2
  %699 = icmp ne i32 %694, 0
  %700 = xor i1 %699, %698
  %701 = select i1 %700, i64 10, i64 390
  %702 = add i64 %689, %701
  %703 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %704 = bitcast double %703 to <2 x i32>
  br i1 %700, label %block_415265, label %block_4153e1

block_4150c9:                                     ; preds = %block_4150c4, %block_414ccf
  %705 = phi i64 [ %922, %block_414ccf ], [ %1247, %block_4150c4 ]
  %706 = phi i64 [ %933, %block_414ccf ], [ %1246, %block_4150c4 ]
  %707 = phi %struct.Memory* [ %716, %block_414ccf ], [ %1243, %block_4150c4 ]
  %708 = add i64 %705, -24
  %709 = inttoptr i64 %708 to i32*
  %710 = load i32, i32* %709
  %711 = add i32 %710, 1
  %712 = inttoptr i64 %708 to i32*
  store i32 %711, i32* %712
  %713 = add i64 %706, -1028
  br label %block_414cc5

block_414cc5:                                     ; preds = %block_414cbe, %block_4150c9
  %714 = phi i64 [ %777, %block_414cbe ], [ %713, %block_4150c9 ]
  %715 = phi i64 [ %774, %block_414cbe ], [ %705, %block_4150c9 ]
  %716 = phi %struct.Memory* [ %775, %block_414cbe ], [ %707, %block_4150c9 ]
  %717 = add i64 %715, -24
  %718 = inttoptr i64 %717 to i32*
  %719 = load i32, i32* %718
  %720 = add i32 %719, -4
  %721 = lshr i32 %720, 31
  %722 = trunc i32 %721 to i8
  %723 = lshr i32 %719, 31
  %724 = xor i32 %721, %723
  %725 = add nuw nsw i32 %724, %723
  %726 = icmp eq i32 %725, 2
  %727 = icmp ne i8 %722, 0
  %728 = xor i1 %727, %726
  %729 = select i1 %728, i64 10, i64 1047
  %730 = add i64 %714, %729
  br i1 %728, label %block_414ccf, label %block_4150dc

block_414c66:                                     ; preds = %block_414c4f, %block_414c0e
  %731 = phi i64 [ %1267, %block_414c0e ], [ %1499, %block_414c4f ]
  %732 = phi i64 [ %1279, %block_414c0e ], [ %1507, %block_414c4f ]
  %733 = phi %struct.Memory* [ %1250, %block_414c0e ], [ %1498, %block_414c4f ]
  %734 = add i64 %731, -36
  %735 = inttoptr i64 %734 to i32*
  %736 = load i32, i32* %735
  %737 = sext i32 %736 to i64
  %738 = mul nsw i64 %737, 2400
  %739 = add i64 %738, ptrtoint (%idmo_type* @idmo to i64)
  %740 = add i64 %731, -40
  %741 = inttoptr i64 %740 to i32*
  %742 = load i32, i32* %741
  %743 = sext i32 %742 to i64
  %744 = mul nsw i64 %743, 400
  %745 = add i64 %744, %739
  %746 = add i64 %745, 396
  %747 = inttoptr i64 %746 to i32*
  %748 = load i32, i32* %747
  %749 = zext i32 %748 to i64
  store i64 %749, i64* %6, align 8, !tbaa !1240
  %750 = load i64, i64* %10, align 8
  %751 = add i64 %750, -20
  %752 = inttoptr i64 %751 to i32*
  store i32 %748, i32* %752
  %753 = inttoptr i64 %751 to i32*
  %754 = load i32, i32* %753
  %755 = sext i32 %754 to i64
  %756 = shl nsw i64 %755, 2
  %757 = add i64 %756, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %758 = inttoptr i64 %757 to i32*
  %759 = load i32, i32* %758
  %760 = icmp eq i32 %759, 0
  %761 = select i1 %760, i64 65, i64 88
  %762 = add i64 %732, %761
  br i1 %760, label %block_414ca7, label %block_414cbe

block_414ec1:                                     ; preds = %block_414cfd
  %763 = mul nsw i128 %185, 24
  %764 = trunc i128 %763 to i64
  %765 = add i64 %764, ptrtoint (%cbc_type* @cbc to i64)
  %766 = add i64 %170, %765
  %767 = inttoptr i64 %766 to i32*
  %768 = load i32, i32* %767
  %769 = add i32 %768, -3
  %770 = icmp eq i32 %769, 0
  %771 = select i1 %770, i64 35, i64 450
  %772 = add i64 %177, %771
  store i64 ptrtoint (%cbc_type* @cbc to i64), i64* %4, align 8, !tbaa !1240
  br i1 %770, label %block_414ee4, label %block_415083

block_414cbe:                                     ; preds = %block_414c66, %block_414ca7
  %773 = phi i64 [ %762, %block_414c66 ], [ %85, %block_414ca7 ]
  %774 = phi i64 [ %750, %block_414c66 ], [ %77, %block_414ca7 ]
  %775 = phi %struct.Memory* [ %733, %block_414c66 ], [ %76, %block_414ca7 ]
  %776 = add i64 %774, -24
  %777 = add i64 %773, 7
  %778 = inttoptr i64 %776 to i32*
  store i32 0, i32* %778
  br label %block_414cc5

block_414bb6:                                     ; preds = %block_414b54, %block_414b9f
  %779 = phi i64 [ %1173, %block_414b54 ], [ %1006, %block_414b9f ]
  %780 = phi i64 [ %1185, %block_414b54 ], [ %1014, %block_414b9f ]
  %781 = phi %struct.Memory* [ %951, %block_414b54 ], [ %1005, %block_414b9f ]
  %782 = add i64 %779, -36
  %783 = inttoptr i64 %782 to i32*
  %784 = load i32, i32* %783
  %785 = sext i32 %784 to i64
  %786 = mul nsw i64 %785, 2400
  %787 = add i64 %786, ptrtoint (%idmo_type* @idmo to i64)
  %788 = add i64 %779, -40
  %789 = inttoptr i64 %788 to i32*
  %790 = load i32, i32* %789
  %791 = sext i32 %790 to i64
  %792 = mul nsw i64 %791, 400
  %793 = add i64 %792, %787
  %794 = add i64 %793, 216
  %795 = inttoptr i64 %794 to i32*
  %796 = load i32, i32* %795
  %797 = zext i32 %796 to i64
  store i64 %797, i64* %6, align 8, !tbaa !1240
  %798 = load i64, i64* %10, align 8
  %799 = add i64 %798, -20
  %800 = inttoptr i64 %799 to i32*
  store i32 %796, i32* %800
  %801 = inttoptr i64 %799 to i32*
  %802 = load i32, i32* %801
  %803 = sext i32 %802 to i64
  %804 = shl nsw i64 %803, 2
  %805 = add i64 %804, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %806 = inttoptr i64 %805 to i32*
  %807 = load i32, i32* %806
  %808 = icmp eq i32 %807, 0
  %809 = select i1 %808, i64 65, i64 88
  %810 = add i64 %780, %809
  br i1 %808, label %block_414bf7, label %block_414c0e

block_415635:                                     ; preds = %block_4154ac
  %811 = add i64 %948, 5
  br label %block_41563a

block_414db2:                                     ; preds = %block_414d6a
  store i64 1, i64* %5, align 8, !tbaa !1240
  %812 = load i64, i64* %10, align 8
  %813 = add i64 %812, -40
  %814 = inttoptr i64 %813 to i32*
  %815 = load i32, i32* %814
  %816 = zext i32 %815 to i64
  store i64 %816, i64* %8, align 8, !tbaa !1240
  %817 = add i64 %812, -36
  %818 = inttoptr i64 %817 to i32*
  %819 = load i32, i32* %818
  %820 = zext i32 %819 to i64
  store i64 %820, i64* %7, align 8, !tbaa !1240
  %821 = add i64 %812, -24
  %822 = inttoptr i64 %821 to i32*
  %823 = load i32, i32* %822
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %6, align 8, !tbaa !1240
  %825 = add i64 %812, -16
  %826 = inttoptr i64 %825 to i32*
  %827 = load i32, i32* %826
  %828 = zext i32 %827 to i64
  store i64 %828, i64* %51, align 8, !tbaa !1240
  %829 = add i64 %271, 2894
  %830 = add i64 %271, 23
  %831 = load i64, i64* %9, align 8, !tbaa !1240
  %832 = add i64 %831, -8
  %833 = inttoptr i64 %832 to i64*
  store i64 %830, i64* %833
  store i64 %832, i64* %9, align 8, !tbaa !1240
  %834 = tail call %struct.Memory* @sub_415900_com_dpc(%struct.State* nonnull %0, i64 %829, %struct.Memory* %716)
  %835 = load i64, i64* %3, align 8
  store i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%edgevis_type* @edgevis to i64), i64* %11, align 8, !tbaa !1240
  %836 = load i64, i64* %10, align 8
  %837 = add i64 %836, -8
  %838 = inttoptr i64 %837 to i32*
  %839 = load i32, i32* %838
  %840 = sext i32 %839 to i64
  %841 = mul nsw i64 %840, 96
  %842 = add i64 %841, ptrtoint (%sje_type* @sje to i64)
  %843 = add i64 %836, -40
  %844 = inttoptr i64 %843 to i32*
  %845 = load i32, i32* %844
  %846 = sext i32 %845 to i64
  %847 = shl nsw i64 %846, 4
  store i64 %847, i64* %13, align 8, !tbaa !1240
  %848 = add i64 %847, %842
  %849 = inttoptr i64 %848 to i32*
  %850 = load i32, i32* %849
  %851 = load i64, i64* %10, align 8
  %852 = add i64 %851, -12
  %853 = inttoptr i64 %852 to i32*
  store i32 %850, i32* %853
  %854 = inttoptr i64 %852 to i32*
  %855 = load i32, i32* %854
  %856 = sext i32 %855 to i64
  %857 = mul nsw i64 %856, 96
  %858 = load i64, i64* %11, align 8
  %859 = add i64 %857, %858
  %860 = add i64 %851, -4
  %861 = inttoptr i64 %860 to i32*
  %862 = load i32, i32* %861
  %863 = sext i32 %862 to i64
  %864 = shl nsw i64 %863, 2
  %865 = add i64 %864, ptrtoint (%jjface_type* @jjface to i64)
  %866 = inttoptr i64 %865 to i32*
  %867 = load i32, i32* %866
  %868 = sext i32 %867 to i64
  %869 = shl nsw i64 %868, 4
  %870 = add i64 %869, %859
  store i64 %870, i64* %11, align 8, !tbaa !1240
  %871 = load i64, i64* %10, align 8
  %872 = add i64 %871, -40
  %873 = inttoptr i64 %872 to i32*
  %874 = load i32, i32* %873
  %875 = sext i32 %874 to i64
  %876 = shl nsw i64 %875, 4
  %877 = load i64, i64* %4, align 8
  %878 = add i64 %876, %877
  %879 = add i64 %871, -24
  %880 = inttoptr i64 %879 to i32*
  %881 = load i32, i32* %880
  %882 = sext i32 %881 to i64
  store i64 %882, i64* %12, align 8, !tbaa !1240
  %883 = shl nsw i64 %882, 2
  %884 = add i64 %883, %878
  %885 = inttoptr i64 %884 to i32*
  %886 = load i32, i32* %885
  %887 = sext i32 %886 to i64
  %888 = shl nsw i64 %887, 2
  %889 = add i64 %888, ptrtoint (%op_type* @op to i64)
  %890 = inttoptr i64 %889 to i32*
  %891 = load i32, i32* %890
  %892 = sext i32 %891 to i64
  %893 = load i64, i64* %11, align 8
  %894 = shl nsw i64 %892, 2
  %895 = add i64 %894, %893
  %896 = add i64 %835, 123
  %897 = inttoptr i64 %895 to i32*
  store i32 1, i32* %897
  br label %block_4150c4

block_414b31:                                     ; preds = %block_414b27
  %898 = sext i32 %968 to i64
  %899 = mul nsw i64 %898, 24
  %900 = add i64 %899, ptrtoint (%cbc_type* @cbc to i64)
  %901 = sext i32 %954 to i64
  store i64 %901, i64* %5, align 8, !tbaa !1240
  %902 = shl nsw i64 %901, 2
  %903 = add i64 %902, %900
  %904 = inttoptr i64 %903 to i32*
  %905 = load i32, i32* %904
  %906 = add i32 %905, -3
  %907 = icmp eq i32 %906, 0
  %908 = select i1 %907, i64 35, i64 2825
  %909 = add i64 %965, %908
  br i1 %907, label %block_414b54, label %block_41563a

block_414ccf:                                     ; preds = %block_414cc5
  %910 = add i64 %715, -36
  %911 = inttoptr i64 %910 to i32*
  %912 = load i32, i32* %911
  %913 = sext i32 %912 to i64
  %914 = mul nsw i64 %913, 96
  %915 = add i64 %914, ptrtoint (%edgevis_type* @edgevis to i64)
  %916 = add i64 %715, -40
  %917 = inttoptr i64 %916 to i32*
  %918 = load i32, i32* %917
  %919 = sext i32 %918 to i64
  %920 = shl nsw i64 %919, 4
  %921 = add i64 %920, %915
  %922 = load i64, i64* %10, align 8
  %923 = add i64 %922, -24
  %924 = inttoptr i64 %923 to i32*
  %925 = load i32, i32* %924
  %926 = sext i32 %925 to i64
  %927 = shl nsw i64 %926, 2
  %928 = add i64 %927, %921
  %929 = inttoptr i64 %928 to i32*
  %930 = load i32, i32* %929
  %931 = icmp eq i32 %930, 0
  %932 = select i1 %931, i64 46, i64 1018
  %933 = add i64 %730, %932
  br i1 %931, label %block_414cfd, label %block_4150c9

block_4154ac:                                     ; preds = %block_4154b6, %block_4153e1
  %934 = phi i64 [ %463, %block_4153e1 ], [ %688, %block_4154b6 ]
  %935 = phi %struct.Memory* [ %690, %block_4153e1 ], [ %935, %block_4154b6 ]
  %936 = inttoptr i64 %462 to i32*
  %937 = load i32, i32* %936
  %938 = add i32 %937, -4
  %939 = lshr i32 %938, 31
  %940 = trunc i32 %939 to i8
  %941 = lshr i32 %937, 31
  %942 = xor i32 %939, %941
  %943 = add nuw nsw i32 %942, %941
  %944 = icmp eq i32 %943, 2
  %945 = icmp ne i8 %940, 0
  %946 = xor i1 %945, %944
  %947 = select i1 %946, i64 10, i64 393
  %948 = add i64 %934, %947
  br i1 %946, label %block_4154b6, label %block_415635

block_414b27:                                     ; preds = %block_414b20, %block_41563a
  %949 = phi i64 [ %997, %block_414b20 ], [ %540, %block_41563a ]
  %950 = phi i64 [ %1219, %block_414b20 ], [ %534, %block_41563a ]
  %951 = phi %struct.Memory* [ %1220, %block_414b20 ], [ %533, %block_41563a ]
  %952 = add i64 %950, -40
  %953 = inttoptr i64 %952 to i32*
  %954 = load i32, i32* %953
  %955 = add i32 %954, -6
  %956 = lshr i32 %955, 31
  %957 = trunc i32 %956 to i8
  %958 = lshr i32 %954, 31
  %959 = xor i32 %956, %958
  %960 = add nuw nsw i32 %959, %958
  %961 = icmp eq i32 %960, 2
  %962 = icmp ne i8 %957, 0
  %963 = xor i1 %962, %961
  %964 = select i1 %963, i64 10, i64 2854
  %965 = add i64 %949, %964
  %966 = add i64 %950, -36
  %967 = inttoptr i64 %966 to i32*
  %968 = load i32, i32* %967
  br i1 %963, label %block_414b31, label %block_41564d

block_4150a6:                                     ; preds = %block_415083
  %969 = zext i32 %1532 to i64
  %970 = xor i64 %969, %1533
  %971 = and i64 %970, 4294967295
  store i64 %971, i64* %5, align 8, !tbaa !1240
  %972 = load i64, i64* %10, align 8
  %973 = add i64 %972, -40
  %974 = inttoptr i64 %973 to i32*
  %975 = load i32, i32* %974
  %976 = zext i32 %975 to i64
  store i64 %976, i64* %8, align 8, !tbaa !1240
  %977 = add i64 %972, -36
  %978 = inttoptr i64 %977 to i32*
  %979 = load i32, i32* %978
  %980 = zext i32 %979 to i64
  store i64 %980, i64* %7, align 8, !tbaa !1240
  %981 = add i64 %972, -24
  %982 = inttoptr i64 %981 to i32*
  %983 = load i32, i32* %982
  %984 = zext i32 %983 to i64
  store i64 %984, i64* %6, align 8, !tbaa !1240
  %985 = add i64 %972, -16
  %986 = inttoptr i64 %985 to i32*
  %987 = load i32, i32* %986
  %988 = zext i32 %987 to i64
  store i64 %988, i64* %51, align 8, !tbaa !1240
  %989 = add i64 %1540, 2138
  %990 = add i64 %1540, 20
  %991 = load i64, i64* %9, align 8, !tbaa !1240
  %992 = add i64 %991, -8
  %993 = inttoptr i64 %992 to i64*
  store i64 %990, i64* %993
  store i64 %992, i64* %9, align 8, !tbaa !1240
  %994 = tail call %struct.Memory* @sub_415900_com_dpc(%struct.State* nonnull %0, i64 %989, %struct.Memory* %716)
  %995 = load i64, i64* %3, align 8
  br label %block_4150c4

block_414b20:                                     ; preds = %block_414b10
  %996 = add i64 %1219, -40
  %997 = add i64 %1238, 7
  %998 = inttoptr i64 %996 to i32*
  store i32 0, i32* %998
  br label %block_414b27

block_414b9f:                                     ; preds = %block_414b54
  %999 = zext i32 %1177 to i64
  store i64 %999, i64* %8, align 8, !tbaa !1240
  %1000 = add i64 %1185, 2769
  %1001 = add i64 %1185, 8
  %1002 = load i64, i64* %9, align 8, !tbaa !1240
  %1003 = add i64 %1002, -8
  %1004 = inttoptr i64 %1003 to i64*
  store i64 %1001, i64* %1004
  store i64 %1003, i64* %9, align 8, !tbaa !1240
  %1005 = tail call %struct.Memory* @sub_415670_pc_corner(%struct.State* nonnull %0, i64 %1000, %struct.Memory* %951)
  %1006 = load i64, i64* %10, align 8
  %1007 = add i64 %1006, -20
  %1008 = load i64, i64* %3, align 8
  %1009 = inttoptr i64 %1007 to i32*
  %1010 = load i32, i32* %1009
  %1011 = sext i32 %1010 to i64
  %1012 = shl nsw i64 %1011, 2
  %1013 = add i64 %1012, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %1014 = add i64 %1008, 15
  %1015 = inttoptr i64 %1013 to i32*
  store i32 1, i32* %1015
  br label %block_414bb6

block_415265:                                     ; preds = %block_41525b
  %1016 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 32) to double*)
  store double %1016, double* %55, align 1, !tbaa !1246
  store double 0.000000e+00, double* %57, align 1, !tbaa !1246
  store i64 ptrtoint (%pcmor_c_type* @pcmor_c to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %6, align 8, !tbaa !1240
  %1017 = inttoptr i64 %546 to i32*
  %1018 = load i32, i32* %1017
  %1019 = sext i32 %1018 to i64
  %1020 = mul nsw i64 %1019, 2400
  %1021 = add i64 %1020, ptrtoint (%idmo_type* @idmo to i64)
  %1022 = inttoptr i64 %547 to i32*
  %1023 = load i32, i32* %1022
  %1024 = sext i32 %1023 to i64
  %1025 = mul nsw i64 %1024, 400
  %1026 = add i64 %1025, %1021
  %1027 = sext i32 %692 to i64
  %1028 = mul nsw i64 %1027, 20
  %1029 = add i64 %1028, %1026
  %1030 = inttoptr i64 %548 to i32*
  %1031 = load i32, i32* %1030
  %1032 = sext i32 %1031 to i64
  %1033 = shl nsw i64 %1032, 2
  %1034 = add i64 %1033, %1029
  %1035 = inttoptr i64 %1034 to i32*
  %1036 = load i32, i32* %1035
  %1037 = inttoptr i64 %549 to i32*
  store i32 %1036, i32* %1037
  %1038 = inttoptr i64 %550 to i32*
  %1039 = load i32, i32* %1038
  %1040 = sext i32 %1039 to i64
  %1041 = mul nsw i64 %1040, 800
  %1042 = add i64 %1041, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %1043 = inttoptr i64 %543 to i32*
  %1044 = load i32, i32* %1043
  %1045 = sext i32 %1044 to i64
  %1046 = mul nsw i64 %1045, 40
  %1047 = add i64 %1046, %1042
  %1048 = inttoptr i64 %548 to i32*
  %1049 = load i32, i32* %1048
  %1050 = sext i32 %1049 to i64
  %1051 = shl nsw i64 %1050, 3
  %1052 = add i64 %1051, %1047
  %1053 = inttoptr i64 %1052 to double*
  %1054 = load double, double* %1053
  %1055 = add i32 %1039, 1
  %1056 = sext i32 %1055 to i64
  %1057 = mul nsw i64 %1056, 200
  %1058 = add i64 %1057, ptrtoint (%pcmor_c_type* @pcmor_c to i64)
  %1059 = add i64 %1046, %1058
  %1060 = bitcast double %1016 to <2 x i32>
  %1061 = extractelement <2 x i32> %1060, i32 0
  store i32 %1061, i32* %62, align 1, !tbaa !1266
  %1062 = extractelement <2 x i32> %1060, i32 1
  store i32 %1062, i32* %64, align 1, !tbaa !1266
  %1063 = add i64 %1051, %1059
  %1064 = load double, double* %69, align 1
  %1065 = inttoptr i64 %1063 to double*
  %1066 = load double, double* %1065
  %1067 = fmul double %1064, %1066
  %1068 = fadd double %1054, %1067
  %1069 = extractelement <2 x i32> %704, i32 0
  store i32 %1069, i32* %62, align 1, !tbaa !1266
  %1070 = extractelement <2 x i32> %704, i32 1
  store i32 %1070, i32* %64, align 1, !tbaa !1266
  store i32 0, i32* %66, align 1, !tbaa !1266
  store i32 0, i32* %68, align 1, !tbaa !1266
  %1071 = load double, double* %69, align 1
  %1072 = fdiv double %1071, %1068
  store double %1072, double* %69, align 1, !tbaa !1246
  %1073 = inttoptr i64 %549 to i32*
  %1074 = load i32, i32* %1073
  %1075 = sext i32 %1074 to i64
  %1076 = shl nsw i64 %1075, 3
  %1077 = add i64 %1076, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %1078 = inttoptr i64 %1077 to double*
  store double %1072, double* %1078
  %1079 = inttoptr i64 %546 to i32*
  %1080 = load i32, i32* %1079
  %1081 = sext i32 %1080 to i64
  %1082 = mul nsw i64 %1081, 2400
  %1083 = load i64, i64* %6, align 8
  %1084 = add i64 %1082, %1083
  %1085 = inttoptr i64 %547 to i32*
  %1086 = load i32, i32* %1085
  %1087 = sext i32 %1086 to i64
  %1088 = mul nsw i64 %1087, 400
  %1089 = add i64 %1088, %1084
  %1090 = add i64 %1089, 100
  %1091 = inttoptr i64 %543 to i32*
  %1092 = load i32, i32* %1091
  %1093 = sext i32 %1092 to i64
  %1094 = mul nsw i64 %1093, 20
  %1095 = add i64 %1094, %1090
  %1096 = inttoptr i64 %548 to i32*
  %1097 = load i32, i32* %1096
  %1098 = sext i32 %1097 to i64
  %1099 = shl nsw i64 %1098, 2
  %1100 = add i64 %1099, %1095
  %1101 = inttoptr i64 %1100 to i32*
  %1102 = load i32, i32* %1101
  %1103 = inttoptr i64 %549 to i32*
  store i32 %1102, i32* %1103
  %1104 = inttoptr i64 %550 to i32*
  %1105 = load i32, i32* %1104
  %1106 = sext i32 %1105 to i64
  %1107 = mul nsw i64 %1106, 800
  %1108 = load i64, i64* %5, align 8
  %1109 = add i64 %1107, %1108
  %1110 = add i64 %1109, 200
  %1111 = inttoptr i64 %543 to i32*
  %1112 = load i32, i32* %1111
  %1113 = sext i32 %1112 to i64
  %1114 = mul nsw i64 %1113, 40
  %1115 = add i64 %1114, %1110
  %1116 = inttoptr i64 %548 to i32*
  %1117 = load i32, i32* %1116
  %1118 = sext i32 %1117 to i64
  %1119 = shl nsw i64 %1118, 3
  %1120 = add i64 %1119, %1115
  %1121 = inttoptr i64 %1120 to double*
  %1122 = load double, double* %1121
  %1123 = add i32 %1105, 1
  %1124 = zext i32 %1123 to i64
  store i64 %1124, i64* %51, align 8, !tbaa !1240
  %1125 = sext i32 %1123 to i64
  %1126 = mul nsw i64 %1125, 200
  %1127 = load i64, i64* %4, align 8
  %1128 = add i64 %1126, %1127
  %1129 = add i64 %1114, %1128
  %1130 = add i64 %1119, %1129
  %1131 = load double, double* %55, align 1
  %1132 = inttoptr i64 %1130 to double*
  %1133 = load double, double* %1132
  %1134 = fmul double %1131, %1133
  store double %1134, double* %55, align 1, !tbaa !1246
  %1135 = fadd double %1122, %1134
  store double %1135, double* %58, align 1, !tbaa !1246
  store i64 0, i64* %59, align 1, !tbaa !1246
  %1136 = fdiv double %703, %1135
  %1137 = inttoptr i64 %549 to i32*
  %1138 = load i32, i32* %1137
  %1139 = sext i32 %1138 to i64
  %1140 = shl nsw i64 %1139, 3
  %1141 = add i64 %1140, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %1142 = inttoptr i64 %1141 to double*
  store double %1136, double* %1142
  %1143 = inttoptr i64 %543 to i32*
  %1144 = load i32, i32* %1143
  %1145 = add i32 %1144, 1
  %1146 = inttoptr i64 %543 to i32*
  store i32 %1145, i32* %1146
  %1147 = add i64 %702, -10
  br label %block_41525b

block_414b54:                                     ; preds = %block_414b31
  %1148 = load i64, i64* %10, align 8
  %1149 = add i64 %1148, -36
  %1150 = inttoptr i64 %1149 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sext i32 %1151 to i64
  %1153 = shl nsw i64 %1152, 2
  %1154 = add i64 %1153, ptrtoint (%size_e_type* @size_e to i64)
  %1155 = inttoptr i64 %1154 to i32*
  %1156 = load i32, i32* %1155
  %1157 = add i64 %1148, -16
  %1158 = inttoptr i64 %1157 to i32*
  store i32 %1156, i32* %1158
  %1159 = inttoptr i64 %1149 to i32*
  %1160 = load i32, i32* %1159
  %1161 = sext i32 %1160 to i64
  %1162 = mul nsw i64 %1161, 2400
  %1163 = add i64 %1162, ptrtoint (%idmo_type* @idmo to i64)
  %1164 = add i64 %1148, -40
  %1165 = inttoptr i64 %1164 to i32*
  %1166 = load i32, i32* %1165
  %1167 = sext i32 %1166 to i64
  %1168 = mul nsw i64 %1167, 400
  %1169 = add i64 %1168, %1163
  %1170 = inttoptr i64 %1169 to i32*
  %1171 = load i32, i32* %1170
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %6, align 8, !tbaa !1240
  %1173 = load i64, i64* %10, align 8
  %1174 = add i64 %1173, -20
  %1175 = inttoptr i64 %1174 to i32*
  store i32 %1171, i32* %1175
  %1176 = inttoptr i64 %1174 to i32*
  %1177 = load i32, i32* %1176
  %1178 = sext i32 %1177 to i64
  %1179 = shl nsw i64 %1178, 2
  %1180 = add i64 %1179, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %1181 = inttoptr i64 %1180 to i32*
  %1182 = load i32, i32* %1181
  %1183 = icmp eq i32 %1182, 0
  %1184 = select i1 %1183, i64 75, i64 98
  %1185 = add i64 %909, %1184
  br i1 %1183, label %block_414b9f, label %block_414bb6

block_415116:                                     ; preds = %block_415120, %block_41510f
  %1186 = phi i64 [ %1239, %block_41510f ], [ %1359, %block_415120 ]
  %1187 = phi %struct.Memory* [ %1510, %block_41510f ], [ %1187, %block_415120 ]
  %1188 = inttoptr i64 %510 to i32*
  %1189 = load i32, i32* %1188
  %1190 = add i32 %1189, -4
  %1191 = lshr i32 %1190, 31
  %1192 = lshr i32 %1189, 31
  %1193 = xor i32 %1191, %1192
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = icmp eq i32 %1194, 2
  %1196 = icmp ne i32 %1191, 0
  %1197 = xor i1 %1196, %1195
  %1198 = select i1 %1197, i64 10, i64 254
  %1199 = add i64 %1186, %1198
  br i1 %1197, label %block_415120, label %block_415214

block_41503f:                                     ; preds = %block_414ee4
  %1200 = add i64 %332, -8
  %1201 = inttoptr i64 %1200 to i32*
  %1202 = load i32, i32* %1201
  %1203 = sext i32 %1202 to i64
  %1204 = mul nsw i64 %1203, 24
  %1205 = add i64 %1204, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %1205, i64* %4, align 8, !tbaa !1240
  %1206 = add i64 %337, %1205
  %1207 = inttoptr i64 %1206 to i32*
  %1208 = load i32, i32* %1207
  %1209 = add i32 %1208, -2
  %1210 = icmp eq i32 %1209, 0
  %1211 = select i1 %1210, i64 35, i64 58
  %1212 = add i64 %344, %1211
  br i1 %1210, label %block_415062, label %block_41507e

block_415214:                                     ; preds = %block_415116
  %1213 = inttoptr i64 %509 to i32*
  %1214 = load i32, i32* %1213
  %1215 = add i32 %1214, 1
  %1216 = inttoptr i64 %509 to i32*
  store i32 %1215, i32* %1216
  %1217 = add i64 %1199, -271
  br label %block_415105

block_414b10:                                     ; preds = %block_41564d, %block_414ad0
  %1218 = phi i64 [ %49, %block_414ad0 ], [ %553, %block_41564d ]
  %1219 = phi i64 [ %46, %block_414ad0 ], [ %950, %block_41564d ]
  %1220 = phi %struct.Memory* [ %45, %block_414ad0 ], [ %951, %block_41564d ]
  %1221 = add i64 %1219, -36
  %1222 = inttoptr i64 %1221 to i32*
  %1223 = load i32, i32* %1222
  %1224 = zext i32 %1223 to i64
  store i64 %1224, i64* %4, align 8, !tbaa !1240
  %1225 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %1226 = sub i32 %1223, %1225
  %1227 = lshr i32 %1226, 31
  %1228 = trunc i32 %1227 to i8
  %1229 = lshr i32 %1223, 31
  %1230 = lshr i32 %1225, 31
  %1231 = xor i32 %1230, %1229
  %1232 = xor i32 %1227, %1229
  %1233 = add nuw nsw i32 %1232, %1231
  %1234 = icmp eq i32 %1233, 2
  %1235 = icmp ne i8 %1228, 0
  %1236 = xor i1 %1235, %1234
  %1237 = select i1 %1236, i64 16, i64 2896
  %1238 = add i64 %1218, %1237
  br i1 %1236, label %block_414b20, label %block_415660

block_41510f:                                     ; preds = %block_415105
  %1239 = add i64 %1522, 7
  %1240 = inttoptr i64 %510 to i32*
  store i32 1, i32* %1240
  br label %block_415116

block_4150c4:                                     ; preds = %block_415083, %block_414e49, %block_4150a6, %block_414db2, %block_414e6c, %block_41507e
  %1241 = phi i64 [ %896, %block_414db2 ], [ %1378, %block_414e49 ], [ %237, %block_414e6c ], [ %107, %block_41507e ], [ %1540, %block_415083 ], [ %995, %block_4150a6 ]
  %1242 = phi i64 [ 125, %block_414db2 ], [ 10, %block_414e49 ], [ 10, %block_414e6c ], [ 70, %block_41507e ], [ 10, %block_415083 ], [ 10, %block_4150a6 ]
  %1243 = phi %struct.Memory* [ %834, %block_414db2 ], [ %716, %block_414e49 ], [ %210, %block_414e6c ], [ %106, %block_41507e ], [ %716, %block_415083 ], [ %994, %block_4150a6 ]
  %1244 = phi i64 [ 520, %block_414db2 ], [ 520, %block_414e49 ], [ 520, %block_414e6c ], [ 5, %block_41507e ], [ 5, %block_415083 ], [ 5, %block_4150a6 ]
  %1245 = add nuw nsw i64 %1242, %1244
  %1246 = add i64 %1245, %1241
  %1247 = load i64, i64* %10, align 8
  br label %block_4150c9

block_414c0e:                                     ; preds = %block_414bb6, %block_414bf7
  %1248 = phi i64 [ %798, %block_414bb6 ], [ %94, %block_414bf7 ]
  %1249 = phi i64 [ %810, %block_414bb6 ], [ %102, %block_414bf7 ]
  %1250 = phi %struct.Memory* [ %781, %block_414bb6 ], [ %93, %block_414bf7 ]
  %1251 = add i64 %1248, -36
  %1252 = inttoptr i64 %1251 to i32*
  %1253 = load i32, i32* %1252
  %1254 = sext i32 %1253 to i64
  %1255 = mul nsw i64 %1254, 2400
  %1256 = add i64 %1255, ptrtoint (%idmo_type* @idmo to i64)
  %1257 = add i64 %1248, -40
  %1258 = inttoptr i64 %1257 to i32*
  %1259 = load i32, i32* %1258
  %1260 = sext i32 %1259 to i64
  %1261 = mul nsw i64 %1260, 400
  %1262 = add i64 %1261, %1256
  %1263 = add i64 %1262, 180
  %1264 = inttoptr i64 %1263 to i32*
  %1265 = load i32, i32* %1264
  %1266 = zext i32 %1265 to i64
  store i64 %1266, i64* %6, align 8, !tbaa !1240
  %1267 = load i64, i64* %10, align 8
  %1268 = add i64 %1267, -20
  %1269 = inttoptr i64 %1268 to i32*
  store i32 %1265, i32* %1269
  %1270 = inttoptr i64 %1268 to i32*
  %1271 = load i32, i32* %1270
  %1272 = sext i32 %1271 to i64
  %1273 = shl nsw i64 %1272, 2
  %1274 = add i64 %1273, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %1275 = inttoptr i64 %1274 to i32*
  %1276 = load i32, i32* %1275
  %1277 = icmp eq i32 %1276, 0
  %1278 = select i1 %1277, i64 65, i64 88
  %1279 = add i64 %1249, %1278
  br i1 %1277, label %block_414c4f, label %block_414c66

block_415120:                                     ; preds = %block_415116
  %1280 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %1281 = inttoptr i64 %511 to i32*
  %1282 = load i32, i32* %1281
  %1283 = sext i32 %1282 to i64
  %1284 = mul nsw i64 %1283, 2400
  %1285 = add i64 %1284, ptrtoint (%idmo_type* @idmo to i64)
  %1286 = inttoptr i64 %512 to i32*
  %1287 = load i32, i32* %1286
  %1288 = sext i32 %1287 to i64
  %1289 = mul nsw i64 %1288, 400
  %1290 = add i64 %1289, %1285
  %1291 = inttoptr i64 %508 to i32*
  %1292 = load i32, i32* %1291
  %1293 = sext i32 %1292 to i64
  %1294 = mul nsw i64 %1293, 200
  %1295 = add i64 %1294, %1290
  %1296 = inttoptr i64 %505 to i32*
  %1297 = load i32, i32* %1296
  %1298 = sext i32 %1297 to i64
  %1299 = mul nsw i64 %1298, 100
  %1300 = add i64 %1299, %1295
  %1301 = inttoptr i64 %509 to i32*
  %1302 = load i32, i32* %1301
  %1303 = sext i32 %1302 to i64
  %1304 = mul nsw i64 %1303, 20
  %1305 = add i64 %1304, %1300
  %1306 = sext i32 %1189 to i64
  %1307 = shl nsw i64 %1306, 2
  %1308 = add i64 %1307, %1305
  %1309 = inttoptr i64 %1308 to i32*
  %1310 = load i32, i32* %1309
  %1311 = inttoptr i64 %513 to i32*
  store i32 %1310, i32* %1311
  %1312 = inttoptr i64 %514 to i32*
  %1313 = load i32, i32* %1312
  %1314 = sext i32 %1313 to i64
  %1315 = mul nsw i64 %1314, 800
  %1316 = add i64 %1315, ptrtoint (%pcmor_nc1_type* @pcmor_nc1 to i64)
  %1317 = inttoptr i64 %508 to i32*
  %1318 = load i32, i32* %1317
  %1319 = sext i32 %1318 to i64
  %1320 = mul nsw i64 %1319, 400
  %1321 = add i64 %1320, %1316
  %1322 = inttoptr i64 %505 to i32*
  %1323 = load i32, i32* %1322
  %1324 = sext i32 %1323 to i64
  %1325 = mul nsw i64 %1324, 200
  %1326 = add i64 %1325, %1321
  %1327 = inttoptr i64 %509 to i32*
  %1328 = load i32, i32* %1327
  %1329 = sext i32 %1328 to i64
  %1330 = mul nsw i64 %1329, 40
  %1331 = add i64 %1330, %1326
  %1332 = inttoptr i64 %510 to i32*
  %1333 = load i32, i32* %1332
  %1334 = sext i32 %1333 to i64
  %1335 = shl nsw i64 %1334, 3
  %1336 = add i64 %1335, %1331
  %1337 = inttoptr i64 %1336 to double*
  %1338 = load double, double* %1337
  %1339 = add i32 %1313, 1
  %1340 = sext i32 %1339 to i64
  %1341 = mul nsw i64 %1340, 200
  %1342 = add i64 %1341, ptrtoint (%pcmor_c_type* @pcmor_c to i64)
  %1343 = add i64 %1330, %1342
  %1344 = add i64 %1335, %1343
  %1345 = inttoptr i64 %1344 to double*
  %1346 = load double, double* %1345
  %1347 = fadd double %1338, %1346
  store double %1347, double* %55, align 1, !tbaa !1246
  store i64 0, i64* %56, align 1, !tbaa !1246
  %1348 = fdiv double %1280, %1347
  store double %1348, double* %52, align 1, !tbaa !1246
  store i64 0, i64* %53, align 1, !tbaa !1246
  %1349 = inttoptr i64 %513 to i32*
  %1350 = load i32, i32* %1349
  %1351 = sext i32 %1350 to i64
  %1352 = shl nsw i64 %1351, 3
  %1353 = add i64 %1352, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %1354 = inttoptr i64 %1353 to double*
  store double %1348, double* %1354
  %1355 = inttoptr i64 %510 to i32*
  %1356 = load i32, i32* %1355
  %1357 = add i32 %1356, 1
  %1358 = inttoptr i64 %510 to i32*
  store i32 %1357, i32* %1358
  %1359 = add i64 %1199, -10
  br label %block_415116

block_414e49:                                     ; preds = %block_414d6a
  %1360 = load i64, i64* %10, align 8
  %1361 = add i64 %1360, -8
  %1362 = inttoptr i64 %1361 to i32*
  %1363 = load i32, i32* %1362
  %1364 = sext i32 %1363 to i64
  %1365 = mul nsw i64 %1364, 24
  %1366 = add i64 %1365, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %1366, i64* %4, align 8, !tbaa !1240
  %1367 = add i64 %1360, -40
  %1368 = inttoptr i64 %1367 to i32*
  %1369 = load i32, i32* %1368
  %1370 = sext i32 %1369 to i64
  %1371 = shl nsw i64 %1370, 2
  %1372 = add i64 %1371, %1366
  %1373 = inttoptr i64 %1372 to i32*
  %1374 = load i32, i32* %1373
  %1375 = add i32 %1374, -3
  %1376 = icmp eq i32 %1375, 0
  %1377 = select i1 %1376, i64 35, i64 110
  %1378 = add i64 %271, %1377
  br i1 %1376, label %block_414e6c, label %block_4150c4

block_414f73:                                     ; preds = %block_414ee4
  store i64 3, i64* %5, align 8, !tbaa !1240
  %1379 = zext i32 %335 to i64
  store i64 %1379, i64* %8, align 8, !tbaa !1240
  %1380 = add i64 %332, -36
  %1381 = inttoptr i64 %1380 to i32*
  %1382 = load i32, i32* %1381
  %1383 = zext i32 %1382 to i64
  store i64 %1383, i64* %7, align 8, !tbaa !1240
  %1384 = add i64 %332, -24
  %1385 = inttoptr i64 %1384 to i32*
  %1386 = load i32, i32* %1385
  %1387 = zext i32 %1386 to i64
  store i64 %1387, i64* %6, align 8, !tbaa !1240
  %1388 = add i64 %332, -16
  %1389 = inttoptr i64 %1388 to i32*
  %1390 = load i32, i32* %1389
  %1391 = zext i32 %1390 to i64
  store i64 %1391, i64* %51, align 8, !tbaa !1240
  %1392 = add i64 %344, 2445
  %1393 = add i64 %344, 23
  %1394 = load i64, i64* %9, align 8, !tbaa !1240
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1393, i64* %1396
  store i64 %1395, i64* %9, align 8, !tbaa !1240
  %1397 = tail call %struct.Memory* @sub_415900_com_dpc(%struct.State* nonnull %0, i64 %1392, %struct.Memory* %716)
  %1398 = load i64, i64* %3, align 8
  store i64 ptrtoint (%e_face2_type* @e_face2 to i64), i64* %4, align 8, !tbaa !1240
  store i64 ptrtoint (%edgevis_type* @edgevis to i64), i64* %11, align 8, !tbaa !1240
  %1399 = load i64, i64* %10, align 8
  %1400 = add i64 %1399, -8
  %1401 = inttoptr i64 %1400 to i32*
  %1402 = load i32, i32* %1401
  %1403 = sext i32 %1402 to i64
  %1404 = mul nsw i64 %1403, 96
  %1405 = add i64 %1404, ptrtoint (%sje_type* @sje to i64)
  %1406 = add i64 %1399, -40
  %1407 = inttoptr i64 %1406 to i32*
  %1408 = load i32, i32* %1407
  %1409 = sext i32 %1408 to i64
  %1410 = shl nsw i64 %1409, 4
  %1411 = add i64 %1410, %1405
  %1412 = inttoptr i64 %1411 to i32*
  %1413 = load i32, i32* %1412
  %1414 = load i64, i64* %10, align 8
  %1415 = add i64 %1414, -12
  %1416 = inttoptr i64 %1415 to i32*
  store i32 %1413, i32* %1416
  %1417 = inttoptr i64 %1415 to i32*
  %1418 = load i32, i32* %1417
  %1419 = sext i32 %1418 to i64
  %1420 = mul nsw i64 %1419, 96
  %1421 = load i64, i64* %11, align 8
  %1422 = add i64 %1420, %1421
  %1423 = add i64 %1414, -40
  %1424 = inttoptr i64 %1423 to i32*
  %1425 = load i32, i32* %1424
  %1426 = sext i32 %1425 to i64
  %1427 = shl nsw i64 %1426, 2
  %1428 = add i64 %1427, ptrtoint (%jjface_type* @jjface to i64)
  %1429 = inttoptr i64 %1428 to i32*
  %1430 = load i32, i32* %1429
  %1431 = sext i32 %1430 to i64
  %1432 = shl nsw i64 %1431, 4
  %1433 = add i64 %1432, %1422
  store i64 %1433, i64* %13, align 8, !tbaa !1240
  %1434 = load i64, i64* %10, align 8
  %1435 = add i64 %1434, -24
  %1436 = inttoptr i64 %1435 to i32*
  %1437 = load i32, i32* %1436
  %1438 = sext i32 %1437 to i64
  %1439 = shl nsw i64 %1438, 2
  %1440 = add i64 %1439, ptrtoint (%op_type* @op to i64)
  %1441 = inttoptr i64 %1440 to i32*
  %1442 = load i32, i32* %1441
  %1443 = sext i32 %1442 to i64
  %1444 = shl nsw i64 %1443, 2
  %1445 = add i64 %1444, %1433
  %1446 = inttoptr i64 %1445 to i32*
  store i32 1, i32* %1446
  %1447 = add i64 %1434, -12
  %1448 = inttoptr i64 %1447 to i32*
  %1449 = load i32, i32* %1448
  %1450 = sext i32 %1449 to i64
  %1451 = mul nsw i64 %1450, 96
  %1452 = load i64, i64* %11, align 8
  %1453 = add i64 %1451, %1452
  %1454 = add i64 %1434, -4
  %1455 = inttoptr i64 %1454 to i32*
  %1456 = load i32, i32* %1455
  %1457 = sext i32 %1456 to i64
  %1458 = shl nsw i64 %1457, 2
  %1459 = add i64 %1458, ptrtoint (%jjface_type* @jjface to i64)
  %1460 = inttoptr i64 %1459 to i32*
  %1461 = load i32, i32* %1460
  %1462 = sext i32 %1461 to i64
  %1463 = shl nsw i64 %1462, 4
  %1464 = add i64 %1463, %1453
  store i64 %1464, i64* %11, align 8, !tbaa !1240
  %1465 = load i64, i64* %10, align 8
  %1466 = add i64 %1465, -40
  %1467 = inttoptr i64 %1466 to i32*
  %1468 = load i32, i32* %1467
  %1469 = sext i32 %1468 to i64
  %1470 = shl nsw i64 %1469, 4
  %1471 = load i64, i64* %4, align 8
  %1472 = add i64 %1470, %1471
  %1473 = add i64 %1465, -24
  %1474 = inttoptr i64 %1473 to i32*
  %1475 = load i32, i32* %1474
  %1476 = sext i32 %1475 to i64
  store i64 %1476, i64* %12, align 8, !tbaa !1240
  %1477 = shl nsw i64 %1476, 2
  %1478 = add i64 %1477, %1472
  %1479 = inttoptr i64 %1478 to i32*
  %1480 = load i32, i32* %1479
  %1481 = sext i32 %1480 to i64
  %1482 = shl nsw i64 %1481, 2
  %1483 = add i64 %1482, ptrtoint (%op_type* @op to i64)
  %1484 = inttoptr i64 %1483 to i32*
  %1485 = load i32, i32* %1484
  %1486 = sext i32 %1485 to i64
  %1487 = load i64, i64* %11, align 8
  %1488 = shl nsw i64 %1486, 2
  %1489 = add i64 %1488, %1487
  %1490 = add i64 %1398, 176
  %1491 = inttoptr i64 %1489 to i32*
  store i32 1, i32* %1491
  br label %block_41507e

block_414c4f:                                     ; preds = %block_414c0e
  %1492 = zext i32 %1271 to i64
  store i64 %1492, i64* %8, align 8, !tbaa !1240
  %1493 = add i64 %1279, 2593
  %1494 = add i64 %1279, 8
  %1495 = load i64, i64* %9, align 8, !tbaa !1240
  %1496 = add i64 %1495, -8
  %1497 = inttoptr i64 %1496 to i64*
  store i64 %1494, i64* %1497
  store i64 %1496, i64* %9, align 8, !tbaa !1240
  %1498 = tail call %struct.Memory* @sub_415670_pc_corner(%struct.State* nonnull %0, i64 %1493, %struct.Memory* %1250)
  %1499 = load i64, i64* %10, align 8
  %1500 = add i64 %1499, -20
  %1501 = load i64, i64* %3, align 8
  %1502 = inttoptr i64 %1500 to i32*
  %1503 = load i32, i32* %1502
  %1504 = sext i32 %1503 to i64
  %1505 = shl nsw i64 %1504, 2
  %1506 = add i64 %1505, ptrtoint (%ifpcmor_type* @ifpcmor to i64)
  %1507 = add i64 %1501, 15
  %1508 = inttoptr i64 %1506 to i32*
  store i32 1, i32* %1508
  br label %block_414c66

block_415105:                                     ; preds = %block_415214, %block_4150fe
  %1509 = phi i64 [ %530, %block_4150fe ], [ %1217, %block_415214 ]
  %1510 = phi %struct.Memory* [ %109, %block_4150fe ], [ %1187, %block_415214 ]
  %1511 = inttoptr i64 %509 to i32*
  %1512 = load i32, i32* %1511
  %1513 = add i32 %1512, -4
  %1514 = lshr i32 %1513, 31
  %1515 = lshr i32 %1512, 31
  %1516 = xor i32 %1514, %1515
  %1517 = add nuw nsw i32 %1516, %1515
  %1518 = icmp eq i32 %1517, 2
  %1519 = icmp ne i32 %1514, 0
  %1520 = xor i1 %1519, %1518
  %1521 = select i1 %1520, i64 10, i64 290
  %1522 = add i64 %1509, %1521
  br i1 %1520, label %block_41510f, label %block_415227

block_415083:                                     ; preds = %block_414ec1
  %1523 = load i64, i64* %10, align 8
  %1524 = add i64 %1523, -36
  %1525 = inttoptr i64 %1524 to i32*
  %1526 = load i32, i32* %1525
  %1527 = sext i32 %1526 to i64
  %1528 = mul nsw i64 %1527, 24
  %1529 = add i64 %1528, ptrtoint (%cbc_type* @cbc to i64)
  store i64 %1529, i64* %4, align 8, !tbaa !1240
  %1530 = add i64 %1523, -4
  %1531 = inttoptr i64 %1530 to i32*
  %1532 = load i32, i32* %1531
  %1533 = sext i32 %1532 to i64
  %1534 = shl nsw i64 %1533, 2
  %1535 = add i64 %1534, %1529
  %1536 = inttoptr i64 %1535 to i32*
  %1537 = load i32, i32* %1536
  %1538 = icmp eq i32 %1537, 0
  %1539 = select i1 %1538, i64 35, i64 55
  %1540 = add i64 %772, %1539
  br i1 %1538, label %block_4150a6, label %block_4150c4
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40f380_mortar_vertex(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40f380:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %4 to i32*
  %8 = bitcast %union.anon* %6 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %16, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  store i64 %20, i64* %17, align 8, !tbaa !1240
  %22 = add i64 %19, -200
  store i64 %22, i64* %16, align 8, !tbaa !1240
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %27 = getelementptr %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %28 = getelementptr %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = add i64 %19, -12
  %30 = load i32, i32* %12, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = add i64 %19, -16
  %33 = load i32, i32* %10, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = add i64 %19, -20
  %36 = load i32, i32* %8, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %19, -168
  %39 = add i64 %1, 30
  %40 = inttoptr i64 %38 to i32*
  store i32 0, i32* %40
  %41 = add i64 %19, -56
  %42 = add i64 %19, -88
  br label %block_40f39e

block_40f7ff:                                     ; preds = %block_40f7a3, %block_40f7f3
  %43 = phi i64 [ %498, %block_40f7a3 ], [ %57, %block_40f7f3 ]
  %44 = phi i64 [ %504, %block_40f7a3 ], [ %58, %block_40f7f3 ]
  %45 = phi %struct.Memory* [ %313, %block_40f7a3 ], [ %54, %block_40f7f3 ]
  %46 = inttoptr i64 %43 to i8*
  %47 = load i8, i8* %46
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = icmp eq i8 %49, 0
  %51 = select i1 %50, i64 19, i64 14
  %52 = add i64 %44, %51
  br i1 %50, label %block_40f812, label %block_40f80d

block_40f7f3:                                     ; preds = %block_40f7c2, %block_40f7d9
  %53 = phi i64 [ %833, %block_40f7c2 ], [ %143, %block_40f7d9 ]
  %54 = phi %struct.Memory* [ %822, %block_40f7c2 ], [ %822, %block_40f7d9 ]
  %55 = inttoptr i64 %830 to i8*
  %56 = load i8, i8* %55
  %57 = add i64 %312, -177
  %58 = add i64 %53, 12
  %59 = inttoptr i64 %57 to i8*
  store i8 %56, i8* %59
  br label %block_40f7ff

block_40f3dd:                                     ; preds = %block_40f39e
  %60 = bitcast %union.anon* %4 to i8*
  %61 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %62 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %63 = add i64 %1658, 10
  %64 = inttoptr i64 %38 to i32*
  store i32 0, i32* %64
  %65 = add i64 %19, -124
  %66 = add i64 %19, -100
  br label %block_40f3e7

block_40fde9:                                     ; preds = %block_40fce4
  %67 = add i64 %1177, -164
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68
  %70 = sext i32 %69 to i64
  %71 = mul nsw i64 %70, 96
  %72 = add i64 %71, ptrtoint (%sje_type* @sje to i64)
  %73 = add i64 %1177, -120
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74
  %76 = sext i32 %75 to i64
  %77 = shl nsw i64 %76, 2
  %78 = add i64 %1177, -116
  %79 = add i64 %78, %77
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 4
  %84 = add i64 %83, %72
  %85 = inttoptr i64 %84 to i32*
  %86 = load i32, i32* %85
  %87 = load i64, i64* %17, align 8
  %88 = add i64 %87, -124
  %89 = inttoptr i64 %88 to i32*
  store i32 %86, i32* %89
  %90 = inttoptr i64 %88 to i32*
  %91 = load i32, i32* %90
  %92 = add i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = select i1 %93, i64 191, i64 55
  %95 = add i64 %1194, %94
  br i1 %93, label %block_40ff44, label %block_40fe20

block_40f3e7:                                     ; preds = %block_40f3f4, %block_40f3dd
  %96 = phi i64 [ %63, %block_40f3dd ], [ %1899, %block_40f3f4 ]
  %97 = phi %struct.Memory* [ %1645, %block_40f3dd ], [ %97, %block_40f3f4 ]
  %98 = inttoptr i64 %38 to i32*
  %99 = load i32, i32* %98
  %100 = add i32 %99, -3
  %101 = lshr i32 %100, 31
  %102 = lshr i32 %99, 31
  %103 = xor i32 %101, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = icmp ne i32 %101, 0
  %107 = xor i1 %106, %105
  %108 = select i1 %107, i64 13, i64 122
  %109 = add i64 %96, %108
  br i1 %107, label %block_40f3f4, label %block_40f461

block_410750:                                     ; preds = %block_4106eb, %block_4106e1
  %110 = phi i64 [ %562, %block_4106e1 ], [ %2675, %block_4106eb ]
  %111 = phi i64 [ %554, %block_4106e1 ], [ %2674, %block_4106eb ]
  %112 = phi %struct.Memory* [ %555, %block_4106e1 ], [ %2673, %block_4106eb ]
  %113 = add i64 %111, -60
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = add i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, i64 111, i64 10
  %119 = add i64 %110, %118
  br i1 %117, label %block_4107bf, label %block_41075a

block_40f7d9:                                     ; preds = %block_40f7c2
  %120 = add i64 %312, -120
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121
  %123 = inttoptr i64 %314 to i32*
  %124 = load i32, i32* %123
  %125 = sext i32 %124 to i64
  %126 = shl nsw i64 %125, 2
  %127 = add i64 %126, ptrtoint (%face_l2_type* @face_l2 to i64)
  %128 = inttoptr i64 %127 to i32*
  %129 = load i32, i32* %128
  %130 = sub i32 %122, %129
  %131 = lshr i32 %130, 31
  %132 = trunc i32 %131 to i8
  %133 = lshr i32 %122, 31
  %134 = lshr i32 %129, 31
  %135 = xor i32 %134, %133
  %136 = xor i32 %131, %133
  %137 = add nuw nsw i32 %136, %135
  %138 = icmp eq i32 %137, 2
  %139 = icmp ne i8 %132, 0
  %140 = xor i1 %138, %139
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i8
  %143 = add i64 %833, 26
  %144 = inttoptr i64 %830 to i8*
  store i8 %142, i8* %144
  br label %block_40f7f3

block_4107bf:                                     ; preds = %block_41075a, %block_410750
  %145 = phi i64 [ %119, %block_410750 ], [ %552, %block_41075a ]
  %146 = phi i64 [ %111, %block_410750 ], [ %551, %block_41075a ]
  %147 = phi %struct.Memory* [ %112, %block_410750 ], [ %550, %block_41075a ]
  %148 = add i64 %146, -56
  %149 = inttoptr i64 %148 to i32*
  %150 = load i32, i32* %149
  %151 = add i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = select i1 %152, i64 107, i64 10
  %154 = add i64 %145, %153
  br i1 %152, label %block_41082a, label %block_4107c9

block_40f5bb:                                     ; preds = %block_40f574
  %155 = zext i32 %396 to i64
  store i64 %155, i64* %62, align 8, !tbaa !1240
  %156 = inttoptr i64 %381 to i32*
  %157 = load i32, i32* %156
  %158 = sext i32 %157 to i64
  %159 = shl nsw i64 %158, 2
  %160 = add i64 %376, -144
  %161 = add i64 %160, %159
  %162 = inttoptr i64 %161 to i32*
  %163 = load i32, i32* %162
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %15, align 8, !tbaa !1240
  %165 = add i64 %376, -8
  %166 = inttoptr i64 %165 to i32*
  %167 = load i32, i32* %166
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %61, align 8, !tbaa !1240
  %169 = add i64 %376, -4
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %14, align 8, !tbaa !1240
  %173 = add i64 %400, 8405
  %174 = add i64 %400, 25
  %175 = load i64, i64* %16, align 8, !tbaa !1240
  %176 = add i64 %175, -8
  %177 = inttoptr i64 %176 to i64*
  store i64 %174, i64* %177
  store i64 %176, i64* %16, align 8, !tbaa !1240
  %178 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %173, %struct.Memory* %1902)
  %179 = load i32, i32* %7, align 4
  %180 = load i64, i64* %3, align 8
  %181 = icmp eq i32 %179, 0
  %182 = select i1 %181, i64 28, i64 9
  %183 = add i64 %180, %182
  br i1 %181, label %block_40f656.sink.split, label %block_40f5dd

block_40fc89:                                     ; preds = %block_40fc30
  %184 = load i64, i64* %17, align 8
  %185 = add i64 %184, -124
  %186 = inttoptr i64 %185 to i32*
  %187 = load i32, i32* %186
  %188 = add i64 %184, -172
  %189 = inttoptr i64 %188 to i32*
  %190 = load i32, i32* %189
  %191 = sext i32 %190 to i64
  %192 = shl nsw i64 %191, 2
  %193 = add i64 %184, -48
  %194 = add i64 %193, %192
  %195 = inttoptr i64 %194 to i32*
  store i32 %187, i32* %195
  %196 = inttoptr i64 %185 to i32*
  %197 = load i32, i32* %196
  %198 = inttoptr i64 %188 to i32*
  %199 = load i32, i32* %198
  %200 = sext i32 %199 to i64
  %201 = shl nsw i64 %200, 2
  %202 = add i64 %184, -80
  %203 = add i64 %202, %201
  %204 = inttoptr i64 %203 to i32*
  store i32 %197, i32* %204
  %205 = inttoptr i64 %185 to i32*
  %206 = load i32, i32* %205
  %207 = add i64 %184, -160
  %208 = inttoptr i64 %207 to i32*
  %209 = load i32, i32* %208
  %210 = sext i32 %209 to i64
  %211 = shl nsw i64 %210, 2
  %212 = add i64 %184, -104
  %213 = add i64 %212, %211
  %214 = add i64 %2518, 42
  %215 = inttoptr i64 %213 to i32*
  store i32 %206, i32* %215
  br label %block_40fcb3

block_40f9a0:                                     ; preds = %block_40f996
  %216 = zext i32 %475 to i64
  store i64 %216, i64* %62, align 8, !tbaa !1240
  %217 = add i64 %3027, -120
  %218 = inttoptr i64 %217 to i32*
  %219 = load i32, i32* %218
  %220 = sext i32 %219 to i64
  %221 = shl nsw i64 %220, 2
  %222 = add i64 %3027, -116
  %223 = add i64 %222, %221
  %224 = inttoptr i64 %223 to i32*
  %225 = load i32, i32* %224
  %226 = sext i32 %225 to i64
  %227 = shl nsw i64 %226, 2
  %228 = add i64 %227, ptrtoint (%jjface_type* @jjface to i64)
  %229 = inttoptr i64 %228 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  %232 = shl nsw i64 %231, 4
  %233 = add i64 %232, ptrtoint (%c_f_type* @c_f to i64)
  %234 = add i64 %3027, -168
  %235 = inttoptr i64 %234 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  %238 = shl nsw i64 %237, 2
  %239 = add i64 %238, %233
  %240 = inttoptr i64 %239 to i32*
  %241 = load i32, i32* %240
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %15, align 8, !tbaa !1240
  %243 = add i64 %3027, -164
  %244 = inttoptr i64 %243 to i32*
  %245 = load i32, i32* %244
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %61, align 8, !tbaa !1240
  %247 = load i64, i64* %17, align 8
  %248 = add i64 %247, -160
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249
  %251 = sext i32 %250 to i64
  %252 = shl nsw i64 %251, 2
  %253 = add i64 %247, -144
  %254 = add i64 %253, %252
  %255 = inttoptr i64 %254 to i32*
  %256 = load i32, i32* %255
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %14, align 8, !tbaa !1240
  %258 = add i64 %479, 7408
  %259 = add i64 %479, 72
  %260 = load i64, i64* %16, align 8, !tbaa !1240
  %261 = add i64 %260, -8
  %262 = inttoptr i64 %261 to i64*
  store i64 %259, i64* %262
  store i64 %261, i64* %16, align 8, !tbaa !1240
  %263 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %258, %struct.Memory* %45)
  %264 = load i32, i32* %7, align 4
  %265 = load i64, i64* %3, align 8
  %266 = icmp eq i32 %264, 0
  %267 = select i1 %266, i64 48, i64 9
  %268 = add i64 %265, %267
  br i1 %266, label %block_40fa18, label %block_40f9f1

block_4100b8:                                     ; preds = %block_410089
  %269 = zext i32 %2548 to i64
  store i64 %269, i64* %62, align 8, !tbaa !1240
  %270 = add i64 %2544, -108
  %271 = inttoptr i64 %270 to i32*
  %272 = load i32, i32* %271
  %273 = sext i32 %272 to i64
  %274 = shl nsw i64 %273, 2
  %275 = add i64 %274, ptrtoint (%jjface_type* @jjface to i64)
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276
  %278 = sext i32 %277 to i64
  %279 = shl nsw i64 %278, 4
  %280 = add i64 %279, ptrtoint (%c_f_type* @c_f to i64)
  %281 = add i64 %2544, -168
  %282 = inttoptr i64 %281 to i32*
  %283 = load i32, i32* %282
  %284 = sext i32 %283 to i64
  %285 = shl nsw i64 %284, 2
  %286 = add i64 %285, %280
  %287 = inttoptr i64 %286 to i32*
  %288 = load i32, i32* %287
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %15, align 8, !tbaa !1240
  %290 = add i64 %2544, -8
  %291 = inttoptr i64 %290 to i32*
  %292 = load i32, i32* %291
  %293 = zext i32 %292 to i64
  store i64 %293, i64* %61, align 8, !tbaa !1240
  %294 = add i64 %2544, -4
  %295 = inttoptr i64 %294 to i32*
  %296 = load i32, i32* %295
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %14, align 8, !tbaa !1240
  %298 = add i64 %2552, 5592
  %299 = add i64 %2552, 53
  %300 = load i64, i64* %16, align 8, !tbaa !1240
  %301 = add i64 %300, -8
  %302 = inttoptr i64 %301 to i64*
  store i64 %299, i64* %302
  store i64 %301, i64* %16, align 8, !tbaa !1240
  %303 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %298, %struct.Memory* %2173)
  %304 = load i32, i32* %7, align 4
  %305 = load i64, i64* %3, align 8
  %306 = icmp eq i32 %304, 0
  %307 = select i1 %306, i64 37, i64 9
  %308 = add i64 %305, %307
  br i1 %306, label %block_410112, label %block_4100f6

block_40f796:                                     ; preds = %block_40fa22, %block_40f76c
  %309 = phi i32 [ %464, %block_40f76c ], [ %2560, %block_40fa22 ]
  %310 = phi i64 [ %465, %block_40f76c ], [ %2561, %block_40fa22 ]
  %311 = phi i64 [ %471, %block_40f76c ], [ %2571, %block_40fa22 ]
  %312 = phi i64 [ %2172, %block_40f76c ], [ %2557, %block_40fa22 ]
  %313 = phi %struct.Memory* [ %565, %block_40f76c ], [ %2555, %block_40fa22 ]
  %314 = add i64 %312, -160
  %315 = inttoptr i64 %314 to i32*
  %316 = load i32, i32* %315
  %317 = add i32 %316, -1
  %318 = icmp eq i32 %317, 0
  %319 = select i1 %318, i64 44, i64 13
  %320 = add i64 %311, %319
  br i1 %318, label %block_40f7c2, label %block_40f7a3

block_40f5dd:                                     ; preds = %block_40f5bb
  %321 = load i64, i64* %17, align 8
  %322 = add i64 %321, -124
  %323 = inttoptr i64 %322 to i32*
  %324 = load i32, i32* %323
  %325 = add i64 %321, -120
  %326 = inttoptr i64 %325 to i32*
  %327 = load i32, i32* %326
  %328 = sext i32 %327 to i64
  %329 = shl nsw i64 %328, 2
  %330 = add i64 %321, -156
  %331 = add i64 %330, %329
  %332 = inttoptr i64 %331 to i32*
  %333 = load i32, i32* %332
  %334 = sext i32 %333 to i64
  %335 = shl nsw i64 %334, 2
  %336 = add i64 %321, -80
  %337 = add i64 %336, %335
  %338 = add i64 %183, 19
  %339 = inttoptr i64 %337 to i32*
  store i32 %324, i32* %339
  br label %block_40f656.sink.split

block_410594:                                     ; preds = %block_410525, %block_41052f
  %340 = phi i64 [ %851, %block_410525 ], [ %756, %block_41052f ]
  %341 = phi i64 [ %844, %block_410525 ], [ %755, %block_41052f ]
  %342 = phi %struct.Memory* [ %840, %block_410525 ], [ %754, %block_41052f ]
  %343 = add i64 %341, -76
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = add i32 %345, 1
  %347 = icmp eq i32 %346, 0
  %348 = select i1 %347, i64 111, i64 10
  %349 = add i64 %340, %348
  br i1 %347, label %block_410603, label %block_41059e

block_40f98c:                                     ; preds = %block_40f965, %block_40f914
  %350 = phi i64 [ %818, %block_40f914 ], [ %1001, %block_40f965 ]
  %351 = phi %struct.Memory* [ %813, %block_40f914 ], [ %813, %block_40f965 ]
  %352 = add i64 %350, 5
  br label %block_40fa22

block_410180:                                     ; preds = %block_410164, %block_410126
  %353 = phi i64 [ %694, %block_410126 ], [ %876, %block_410164 ]
  %354 = phi %struct.Memory* [ %689, %block_410126 ], [ %689, %block_410164 ]
  %355 = add i64 %353, 5
  br label %block_410525

block_40f574:                                     ; preds = %block_40f493
  %356 = add i64 %1846, -8
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  %360 = mul nsw i64 %359, 96
  %361 = add i64 %360, ptrtoint (%sje_type* @sje to i64)
  %362 = add i64 %1846, -120
  %363 = inttoptr i64 %362 to i32*
  %364 = load i32, i32* %363
  %365 = sext i32 %364 to i64
  %366 = shl nsw i64 %365, 2
  %367 = add i64 %1846, -116
  %368 = add i64 %367, %366
  %369 = inttoptr i64 %368 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  %372 = shl nsw i64 %371, 4
  %373 = add i64 %372, %361
  %374 = inttoptr i64 %373 to i32*
  %375 = load i32, i32* %374
  %376 = load i64, i64* %17, align 8
  %377 = add i64 %376, -124
  %378 = inttoptr i64 %377 to i32*
  store i32 %375, i32* %378
  %379 = inttoptr i64 %377 to i32*
  %380 = load i32, i32* %379
  %381 = add i64 %376, -120
  %382 = inttoptr i64 %381 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  %385 = shl nsw i64 %384, 2
  %386 = add i64 %376, -156
  %387 = add i64 %386, %385
  %388 = inttoptr i64 %387 to i32*
  %389 = load i32, i32* %388
  %390 = sext i32 %389 to i64
  %391 = shl nsw i64 %390, 2
  %392 = add i64 %376, -48
  %393 = add i64 %392, %391
  %394 = inttoptr i64 %393 to i32*
  store i32 %380, i32* %394
  %395 = inttoptr i64 %377 to i32*
  %396 = load i32, i32* %395
  %397 = add i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = select i1 %398, i64 129, i64 71
  %400 = add i64 %1863, %399
  br i1 %398, label %block_40f656, label %block_40f5bb

block_40ff71:                                     ; preds = %block_40f673
  store i64 ptrtoint (%cal_nnb_type* @cal_nnb to i64), i64* %13, align 8, !tbaa !1240
  %401 = add i64 %2172, -4
  %402 = inttoptr i64 %401 to i32*
  %403 = load i32, i32* %402
  %404 = sext i32 %403 to i64
  %405 = mul nsw i64 %404, 12
  %406 = add i64 %405, ptrtoint (%cal_nnb_type* @cal_nnb to i64)
  %407 = inttoptr i64 %406 to i32*
  %408 = load i32, i32* %407
  %409 = sext i32 %408 to i64
  %410 = shl nsw i64 %409, 2
  %411 = add i64 %2172, -80
  %412 = add i64 %411, %410
  %413 = inttoptr i64 %412 to i32*
  %414 = load i32, i32* %413
  %415 = add i64 %2172, -104
  %416 = inttoptr i64 %415 to i32*
  store i32 %414, i32* %416
  %417 = inttoptr i64 %401 to i32*
  %418 = load i32, i32* %417
  %419 = sext i32 %418 to i64
  %420 = mul nsw i64 %419, 12
  %421 = load i64, i64* %13, align 8
  %422 = add i64 %420, %421
  store i64 %422, i64* %61, align 8, !tbaa !1240
  %423 = add i64 %422, 4
  %424 = inttoptr i64 %423 to i32*
  %425 = load i32, i32* %424
  %426 = sext i32 %425 to i64
  %427 = load i64, i64* %17, align 8
  %428 = shl nsw i64 %426, 2
  %429 = add i64 %427, -80
  %430 = add i64 %429, %428
  %431 = inttoptr i64 %430 to i32*
  %432 = load i32, i32* %431
  %433 = add i64 %427, -100
  %434 = inttoptr i64 %433 to i32*
  store i32 %432, i32* %434
  %435 = add i64 %427, -4
  %436 = inttoptr i64 %435 to i32*
  %437 = load i32, i32* %436
  %438 = sext i32 %437 to i64
  %439 = mul nsw i64 %438, 12
  store i64 %439, i64* %14, align 8, !tbaa !1240
  %440 = add i64 %439, %421
  %441 = add i64 %440, 8
  %442 = inttoptr i64 %441 to i32*
  %443 = load i32, i32* %442
  %444 = sext i32 %443 to i64
  store i64 %444, i64* %13, align 8, !tbaa !1240
  %445 = shl nsw i64 %444, 2
  %446 = add i64 %429, %445
  %447 = inttoptr i64 %446 to i32*
  %448 = load i32, i32* %447
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %15, align 8, !tbaa !1240
  %450 = add i64 %427, -96
  %451 = inttoptr i64 %450 to i32*
  store i32 %448, i32* %451
  %452 = add i64 %427, -124
  %453 = inttoptr i64 %452 to i32*
  store i32 -1, i32* %453
  %454 = add i64 %427, -104
  %455 = inttoptr i64 %454 to i32*
  %456 = load i32, i32* %455
  %457 = add i32 %456, 1
  %458 = icmp eq i32 %457, 0
  %459 = select i1 %458, i64 542, i64 98
  %460 = add i64 %2187, %459
  br i1 %458, label %block_41018f, label %block_40ffd3

block_40f76c:                                     ; preds = %block_40f752
  %461 = add i64 %2172, -164
  %462 = inttoptr i64 %461 to i32*
  store i32 %2409, i32* %462
  %463 = inttoptr i64 %2174 to i32*
  %464 = load i32, i32* %463
  %465 = sext i32 %464 to i64
  store i64 %465, i64* %13, align 8, !tbaa !1240
  %466 = shl nsw i64 %465, 2
  %467 = add i64 %466, ptrtoint (%face_l1_type* @face_l1 to i64)
  %468 = inttoptr i64 %467 to i32*
  %469 = load i32, i32* %468
  %470 = add i64 %2172, -120
  %471 = add i64 %2413, 42
  %472 = inttoptr i64 %470 to i32*
  store i32 %469, i32* %472
  br label %block_40f796

block_40f996:                                     ; preds = %block_40f812
  %473 = add i64 %3027, -124
  %474 = inttoptr i64 %473 to i32*
  %475 = load i32, i32* %474
  %476 = add i32 %475, 1
  %477 = icmp eq i32 %476, 0
  %478 = select i1 %477, i64 135, i64 10
  %479 = add i64 %3026, %478
  br i1 %477, label %block_40fa22, label %block_40f9a0

block_40f7a3:                                     ; preds = %block_40f796
  store i8 1, i8* %60, align 1, !tbaa !1463
  %480 = add i64 %312, -120
  %481 = inttoptr i64 %480 to i32*
  %482 = load i32, i32* %481
  %483 = sext i32 %316 to i64
  %484 = shl nsw i64 %483, 2
  %485 = add i64 %484, ptrtoint (%face_l2_type* @face_l2 to i64)
  %486 = inttoptr i64 %485 to i32*
  %487 = load i32, i32* %486
  %488 = sub i32 %482, %487
  %489 = icmp eq i32 %488, 0
  %490 = lshr i32 %488, 31
  %491 = trunc i32 %490 to i8
  %492 = lshr i32 %482, 31
  %493 = lshr i32 %487, 31
  %494 = xor i32 %493, %492
  %495 = xor i32 %490, %492
  %496 = add nuw nsw i32 %495, %494
  %497 = icmp eq i32 %496, 2
  %498 = add i64 %312, -177
  %499 = inttoptr i64 %498 to i8*
  store i8 1, i8* %499
  %500 = icmp ne i8 %491, 0
  %501 = xor i1 %500, %497
  %502 = or i1 %489, %501
  %503 = select i1 %502, i64 92, i64 31
  %504 = add i64 %320, %503
  br i1 %502, label %block_40f7ff, label %block_40f7a3.block_40f7c2_crit_edge

block_40f7a3.block_40f7c2_crit_edge:              ; preds = %block_40f7a3
  %505 = load i64, i64* %13, align 8
  %506 = trunc i64 %505 to i32
  br label %block_40f7c2

block_41075a:                                     ; preds = %block_410750
  store i64 2, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %507 = add i64 %111, -12
  %508 = inttoptr i64 %507 to i32*
  %509 = load i32, i32* %508
  %510 = add i64 %111, -28
  %511 = inttoptr i64 %510 to i32*
  %512 = load i32, i32* %511
  %513 = sext i32 %512 to i64
  %514 = mul nsw i64 %513, 2400
  %515 = add i64 %514, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 616)
  %516 = inttoptr i64 %515 to i32*
  store i32 %509, i32* %516
  %517 = inttoptr i64 %507 to i32*
  %518 = load i32, i32* %517
  %519 = inttoptr i64 %510 to i32*
  %520 = load i32, i32* %519
  %521 = sext i32 %520 to i64
  %522 = mul nsw i64 %521, 2400
  %523 = load i64, i64* %13, align 8
  %524 = add i64 %522, %523
  %525 = add i64 %524, 800
  %526 = inttoptr i64 %525 to i32*
  store i32 %518, i32* %526
  %527 = load i64, i64* %17, align 8
  %528 = add i64 %527, -12
  %529 = inttoptr i64 %528 to i32*
  %530 = load i32, i32* %529
  %531 = add i64 %527, -28
  %532 = inttoptr i64 %531 to i32*
  %533 = load i32, i32* %532
  %534 = sext i32 %533 to i64
  %535 = mul nsw i64 %534, 2400
  %536 = add i64 %535, %523
  %537 = add i64 %536, 2180
  %538 = inttoptr i64 %537 to i32*
  store i32 %530, i32* %538
  %539 = inttoptr i64 %531 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %62, align 8, !tbaa !1240
  %542 = inttoptr i64 %528 to i32*
  %543 = load i32, i32* %542
  %544 = zext i32 %543 to i64
  store i64 %544, i64* %15, align 8, !tbaa !1240
  %545 = add i64 %119, 5046
  %546 = add i64 %119, 101
  %547 = load i64, i64* %16, align 8, !tbaa !1240
  %548 = add i64 %547, -8
  %549 = inttoptr i64 %548 to i64*
  store i64 %546, i64* %549
  store i64 %548, i64* %16, align 8, !tbaa !1240
  %550 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %545, %struct.Memory* %112)
  %551 = load i64, i64* %17, align 8
  %552 = load i64, i64* %3, align 8
  br label %block_4107bf

block_4106e1:                                     ; preds = %block_410672, %block_41067c
  %553 = phi i64 [ %2230, %block_410672 ], [ %2138, %block_41067c ]
  %554 = phi i64 [ %2222, %block_410672 ], [ %2137, %block_41067c ]
  %555 = phi %struct.Memory* [ %2223, %block_410672 ], [ %2136, %block_41067c ]
  %556 = add i64 %554, -64
  %557 = inttoptr i64 %556 to i32*
  %558 = load i32, i32* %557
  %559 = add i32 %558, 1
  %560 = icmp eq i32 %559, 0
  %561 = select i1 %560, i64 111, i64 10
  %562 = add i64 %553, %561
  br i1 %560, label %block_410750, label %block_4106eb

block_40f745:                                     ; preds = %block_40f740, %block_40f697
  %563 = phi i64 [ %2371, %block_40f740 ], [ %1695, %block_40f697 ]
  %564 = phi i64 [ 5, %block_40f740 ], [ 164, %block_40f697 ]
  %565 = phi %struct.Memory* [ %2370, %block_40f740 ], [ %2173, %block_40f697 ]
  %566 = add i64 %563, %564
  %567 = inttoptr i64 %2046 to i32*
  %568 = load i32, i32* %567
  %569 = icmp eq i32 %568, 0
  %570 = select i1 %569, i64 2067, i64 13
  %571 = add i64 %566, %570
  br i1 %569, label %block_40ff58, label %block_40f752

block_40f736:                                     ; preds = %block_40f72c, %block_40f6ee, %block_40f70d
  %572 = phi i64 [ %1064, %block_40f6ee ], [ %924, %block_40f70d ], [ %1693, %block_40f72c ]
  %573 = phi %struct.Memory* [ %2173, %block_40f6ee ], [ %2173, %block_40f70d ], [ %2173, %block_40f72c ]
  %574 = add i64 %572, 5
  br label %block_40f740

block_40fb99:                                     ; preds = %block_40fb62
  %575 = zext i32 %1599 to i64
  store i64 %575, i64* %62, align 8, !tbaa !1240
  %576 = add i64 %1595, -120
  %577 = inttoptr i64 %576 to i32*
  %578 = load i32, i32* %577
  %579 = sext i32 %578 to i64
  %580 = shl nsw i64 %579, 2
  %581 = add i64 %1595, -116
  %582 = add i64 %581, %580
  %583 = inttoptr i64 %582 to i32*
  %584 = load i32, i32* %583
  %585 = sext i32 %584 to i64
  %586 = shl nsw i64 %585, 2
  %587 = add i64 %586, ptrtoint (%jjface_type* @jjface to i64)
  %588 = inttoptr i64 %587 to i32*
  %589 = load i32, i32* %588
  %590 = sext i32 %589 to i64
  %591 = shl nsw i64 %590, 4
  %592 = add i64 %591, ptrtoint (%c_f_type* @c_f to i64)
  %593 = add i64 %1595, -168
  %594 = inttoptr i64 %593 to i32*
  %595 = load i32, i32* %594
  %596 = sext i32 %595 to i64
  %597 = shl nsw i64 %596, 2
  %598 = add i64 %597, %592
  %599 = inttoptr i64 %598 to i32*
  %600 = load i32, i32* %599
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %15, align 8, !tbaa !1240
  %602 = add i64 %1595, -164
  %603 = inttoptr i64 %602 to i32*
  %604 = load i32, i32* %603
  %605 = zext i32 %604 to i64
  store i64 %605, i64* %61, align 8, !tbaa !1240
  %606 = load i64, i64* %17, align 8
  %607 = add i64 %606, -160
  %608 = inttoptr i64 %607 to i32*
  %609 = load i32, i32* %608
  %610 = sext i32 %609 to i64
  %611 = shl nsw i64 %610, 2
  %612 = add i64 %611, ptrtoint (%face_l1_type* @face_l1 to i64)
  %613 = inttoptr i64 %612 to i32*
  %614 = load i32, i32* %613
  %615 = sext i32 %614 to i64
  %616 = shl nsw i64 %615, 2
  %617 = add i64 %606, -144
  %618 = add i64 %617, %616
  %619 = inttoptr i64 %618 to i32*
  %620 = load i32, i32* %619
  %621 = zext i32 %620 to i64
  store i64 %621, i64* %14, align 8, !tbaa !1240
  %622 = add i64 %1603, 6903
  %623 = add i64 %1603, 80
  %624 = load i64, i64* %16, align 8, !tbaa !1240
  %625 = add i64 %624, -8
  %626 = inttoptr i64 %625 to i64*
  store i64 %623, i64* %626
  store i64 %625, i64* %16, align 8, !tbaa !1240
  %627 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %622, %struct.Memory* %45)
  %628 = load i32, i32* %7, align 4
  %629 = load i64, i64* %3, align 8
  %630 = icmp eq i32 %628, 0
  %631 = select i1 %630, i64 51, i64 9
  %632 = add i64 %629, %631
  br i1 %630, label %block_40fc1c, label %block_40fbf2

block_41032a:                                     ; preds = %block_4102ec
  %633 = load i64, i64* %17, align 8
  %634 = add i64 %633, -124
  %635 = inttoptr i64 %634 to i32*
  %636 = load i32, i32* %635
  %637 = add i64 %633, -172
  %638 = inttoptr i64 %637 to i32*
  %639 = load i32, i32* %638
  %640 = sext i32 %639 to i64
  %641 = shl nsw i64 %640, 2
  %642 = add i64 %633, -48
  %643 = add i64 %642, %641
  %644 = inttoptr i64 %643 to i32*
  store i32 %636, i32* %644
  %645 = inttoptr i64 %634 to i32*
  %646 = load i32, i32* %645
  %647 = zext i32 %646 to i64
  store i64 %647, i64* %13, align 8, !tbaa !1240
  %648 = inttoptr i64 %637 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  store i64 %650, i64* %14, align 8, !tbaa !1240
  %651 = shl nsw i64 %650, 2
  %652 = add i64 %633, -80
  %653 = add i64 %652, %651
  %654 = add i64 %1558, 28
  %655 = inttoptr i64 %653 to i32*
  store i32 %646, i32* %655
  br label %block_410350.sink.split

block_410126:                                     ; preds = %block_40ffd3
  %656 = zext i32 %1335 to i64
  store i64 %656, i64* %62, align 8, !tbaa !1240
  %657 = add i64 %1321, -108
  %658 = inttoptr i64 %657 to i32*
  %659 = load i32, i32* %658
  %660 = sext i32 %659 to i64
  %661 = shl nsw i64 %660, 2
  %662 = add i64 %661, ptrtoint (%jjface_type* @jjface to i64)
  %663 = inttoptr i64 %662 to i32*
  %664 = load i32, i32* %663
  %665 = sext i32 %664 to i64
  %666 = shl nsw i64 %665, 4
  %667 = add i64 %666, ptrtoint (%c_f_type* @c_f to i64)
  %668 = inttoptr i64 %1322 to i32*
  %669 = load i32, i32* %668
  %670 = sext i32 %669 to i64
  %671 = shl nsw i64 %670, 2
  %672 = add i64 %671, %667
  %673 = inttoptr i64 %672 to i32*
  %674 = load i32, i32* %673
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %15, align 8, !tbaa !1240
  %676 = add i64 %1321, -8
  %677 = inttoptr i64 %676 to i32*
  %678 = load i32, i32* %677
  %679 = zext i32 %678 to i64
  store i64 %679, i64* %61, align 8, !tbaa !1240
  %680 = add i64 %1321, -4
  %681 = inttoptr i64 %680 to i32*
  %682 = load i32, i32* %681
  %683 = zext i32 %682 to i64
  store i64 %683, i64* %14, align 8, !tbaa !1240
  %684 = add i64 %1339, 5492
  %685 = add i64 %1339, 63
  %686 = load i64, i64* %16, align 8, !tbaa !1240
  %687 = add i64 %686, -8
  %688 = inttoptr i64 %687 to i64*
  store i64 %685, i64* %688
  store i64 %687, i64* %16, align 8, !tbaa !1240
  %689 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %684, %struct.Memory* %2173)
  %690 = load i32, i32* %7, align 4
  %691 = load i64, i64* %3, align 8
  %692 = icmp eq i32 %690, 0
  %693 = select i1 %692, i64 37, i64 9
  %694 = add i64 %691, %693
  br i1 %692, label %block_410180, label %block_410164

block_40ff4e.sink.split.sink.split:               ; preds = %block_40fcb3, %block_40fc1c, %block_40ff44
  %695 = phi i64 [ %2808, %block_40fc1c ], [ %3127, %block_40fcb3 ], [ %1202, %block_40ff44 ]
  %696 = phi i64 [ 156, %block_40fc1c ], [ 5, %block_40fcb3 ], [ 5, %block_40ff44 ]
  %697 = phi %struct.Memory* [ %2807, %block_40fc1c ], [ %3126, %block_40fcb3 ], [ %1201, %block_40ff44 ]
  %698 = phi i64 [ 657, %block_40fc1c ], [ 657, %block_40fcb3 ], [ 5, %block_40ff44 ]
  br label %block_40ff4e.sink.split

block_40ff4e.sink.split:                          ; preds = %block_40fb62, %block_40ff4e.sink.split.sink.split
  %699 = phi i64 [ %1603, %block_40fb62 ], [ %695, %block_40ff4e.sink.split.sink.split ]
  %700 = phi i64 [ 156, %block_40fb62 ], [ %696, %block_40ff4e.sink.split.sink.split ]
  %701 = phi %struct.Memory* [ %45, %block_40fb62 ], [ %697, %block_40ff4e.sink.split.sink.split ]
  %702 = phi i64 [ 657, %block_40fb62 ], [ %698, %block_40ff4e.sink.split.sink.split ]
  %703 = add i64 %699, %700
  %704 = load i64, i64* %17, align 8
  br label %block_40ff4e

block_40ff4e:                                     ; preds = %block_40fcc2, %block_40ff4e.sink.split
  %705 = phi i64 [ %312, %block_40fcc2 ], [ %704, %block_40ff4e.sink.split ]
  %706 = phi i64 [ %2306, %block_40fcc2 ], [ %703, %block_40ff4e.sink.split ]
  %707 = phi i64 [ 5, %block_40fcc2 ], [ %702, %block_40ff4e.sink.split ]
  %708 = phi %struct.Memory* [ %45, %block_40fcc2 ], [ %701, %block_40ff4e.sink.split ]
  %709 = add nsw i64 %707, 5
  %710 = add i64 %709, %706
  br label %block_40ff53

block_41052f:                                     ; preds = %block_410525
  store i64 7, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %711 = add i64 %844, -12
  %712 = inttoptr i64 %711 to i32*
  %713 = load i32, i32* %712
  %714 = add i64 %844, -48
  %715 = inttoptr i64 %714 to i32*
  %716 = load i32, i32* %715
  %717 = sext i32 %716 to i64
  %718 = mul nsw i64 %717, 2400
  %719 = add i64 %718, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 396)
  %720 = inttoptr i64 %719 to i32*
  store i32 %713, i32* %720
  %721 = inttoptr i64 %711 to i32*
  %722 = load i32, i32* %721
  %723 = inttoptr i64 %714 to i32*
  %724 = load i32, i32* %723
  %725 = sext i32 %724 to i64
  %726 = mul nsw i64 %725, 2400
  %727 = load i64, i64* %13, align 8
  %728 = add i64 %726, %727
  %729 = add i64 %728, 1196
  %730 = inttoptr i64 %729 to i32*
  store i32 %722, i32* %730
  %731 = load i64, i64* %17, align 8
  %732 = add i64 %731, -12
  %733 = inttoptr i64 %732 to i32*
  %734 = load i32, i32* %733
  %735 = add i64 %731, -48
  %736 = inttoptr i64 %735 to i32*
  %737 = load i32, i32* %736
  %738 = sext i32 %737 to i64
  %739 = mul nsw i64 %738, 2400
  %740 = add i64 %739, %727
  %741 = add i64 %740, 1996
  %742 = inttoptr i64 %741 to i32*
  store i32 %734, i32* %742
  %743 = inttoptr i64 %735 to i32*
  %744 = load i32, i32* %743
  %745 = zext i32 %744 to i64
  store i64 %745, i64* %62, align 8, !tbaa !1240
  %746 = inttoptr i64 %732 to i32*
  %747 = load i32, i32* %746
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %15, align 8, !tbaa !1240
  %749 = add i64 %851, 5601
  %750 = add i64 %851, 101
  %751 = load i64, i64* %16, align 8, !tbaa !1240
  %752 = add i64 %751, -8
  %753 = inttoptr i64 %752 to i64*
  store i64 %750, i64* %753
  store i64 %752, i64* %16, align 8, !tbaa !1240
  %754 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %749, %struct.Memory* %840)
  %755 = load i64, i64* %17, align 8
  %756 = load i64, i64* %3, align 8
  br label %block_410594

block_40ff58:                                     ; preds = %block_40ff53, %block_40f745
  %757 = phi i64 [ %2172, %block_40f745 ], [ %834, %block_40ff53 ]
  %758 = phi i64 [ %571, %block_40f745 ], [ %837, %block_40ff53 ]
  %759 = phi %struct.Memory* [ %565, %block_40f745 ], [ %836, %block_40ff53 ]
  %760 = add i64 %757, -160
  %761 = inttoptr i64 %760 to i32*
  %762 = load i32, i32* %761
  %763 = add i32 %762, 1
  %764 = inttoptr i64 %760 to i32*
  store i32 %763, i32* %764
  %765 = add i64 %758, -2277
  br label %block_40f673

block_40f914:                                     ; preds = %block_40f8dd
  %766 = zext i32 %1235 to i64
  store i64 %766, i64* %62, align 8, !tbaa !1240
  %767 = add i64 %1231, -120
  %768 = inttoptr i64 %767 to i32*
  %769 = load i32, i32* %768
  %770 = sext i32 %769 to i64
  %771 = shl nsw i64 %770, 2
  %772 = add i64 %1231, -116
  %773 = add i64 %772, %771
  %774 = inttoptr i64 %773 to i32*
  %775 = load i32, i32* %774
  %776 = sext i32 %775 to i64
  %777 = shl nsw i64 %776, 2
  %778 = add i64 %777, ptrtoint (%jjface_type* @jjface to i64)
  %779 = inttoptr i64 %778 to i32*
  %780 = load i32, i32* %779
  %781 = sext i32 %780 to i64
  %782 = shl nsw i64 %781, 4
  %783 = add i64 %782, ptrtoint (%c_f_type* @c_f to i64)
  %784 = add i64 %1231, -168
  %785 = inttoptr i64 %784 to i32*
  %786 = load i32, i32* %785
  %787 = sext i32 %786 to i64
  %788 = shl nsw i64 %787, 2
  %789 = add i64 %788, %783
  %790 = inttoptr i64 %789 to i32*
  %791 = load i32, i32* %790
  %792 = zext i32 %791 to i64
  store i64 %792, i64* %15, align 8, !tbaa !1240
  %793 = add i64 %1231, -164
  %794 = inttoptr i64 %793 to i32*
  %795 = load i32, i32* %794
  %796 = zext i32 %795 to i64
  store i64 %796, i64* %61, align 8, !tbaa !1240
  %797 = load i64, i64* %17, align 8
  %798 = add i64 %797, -160
  %799 = inttoptr i64 %798 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  %802 = shl nsw i64 %801, 2
  %803 = add i64 %797, -144
  %804 = add i64 %803, %802
  %805 = inttoptr i64 %804 to i32*
  %806 = load i32, i32* %805
  %807 = zext i32 %806 to i64
  store i64 %807, i64* %14, align 8, !tbaa !1240
  %808 = add i64 %1239, 7548
  %809 = add i64 %1239, 72
  %810 = load i64, i64* %16, align 8, !tbaa !1240
  %811 = add i64 %810, -8
  %812 = inttoptr i64 %811 to i64*
  store i64 %809, i64* %812
  store i64 %811, i64* %16, align 8, !tbaa !1240
  %813 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %808, %struct.Memory* %45)
  %814 = load i32, i32* %7, align 4
  %815 = load i64, i64* %3, align 8
  %816 = icmp eq i32 %814, 0
  %817 = select i1 %816, i64 48, i64 9
  %818 = add i64 %815, %817
  br i1 %816, label %block_40f98c, label %block_40f965

block_40f7c2:                                     ; preds = %block_40f7a3.block_40f7c2_crit_edge, %block_40f796
  %819 = phi i64 [ %320, %block_40f796 ], [ %504, %block_40f7a3.block_40f7c2_crit_edge ]
  %820 = phi i32 [ %309, %block_40f796 ], [ %506, %block_40f7a3.block_40f7c2_crit_edge ]
  %821 = phi i64 [ %310, %block_40f796 ], [ %505, %block_40f7a3.block_40f7c2_crit_edge ]
  %822 = phi %struct.Memory* [ %313, %block_40f796 ], [ %313, %block_40f7a3.block_40f7c2_crit_edge ]
  %823 = zext i32 %820 to i64
  %824 = xor i64 %823, %821
  %825 = trunc i64 %824 to i8
  %826 = inttoptr i64 %314 to i32*
  %827 = load i32, i32* %826
  %828 = add i32 %827, -1
  %829 = icmp eq i32 %828, 0
  %830 = add i64 %312, -178
  %831 = inttoptr i64 %830 to i8*
  store i8 %825, i8* %831
  %832 = select i1 %829, i64 23, i64 49
  %833 = add i64 %819, %832
  br i1 %829, label %block_40f7d9, label %block_40f7f3

block_40ff53:                                     ; preds = %block_40f752, %block_40ff4e
  %834 = phi i64 [ %2172, %block_40f752 ], [ %705, %block_40ff4e ]
  %835 = phi i64 [ %2413, %block_40f752 ], [ %710, %block_40ff4e ]
  %836 = phi %struct.Memory* [ %565, %block_40f752 ], [ %708, %block_40ff4e ]
  %837 = add i64 %835, 5
  br label %block_40ff58

block_410525:                                     ; preds = %block_410089, %block_410350, %block_410355, %block_410516, %block_410112, %block_410180
  %838 = phi i64 [ %1673, %block_410350 ], [ %2552, %block_410089 ], [ %854, %block_410112 ], [ %355, %block_410180 ], [ %1665, %block_410355 ], [ %1210, %block_410516 ]
  %839 = phi i64 [ 464, %block_410350 ], [ 115, %block_410089 ], [ 115, %block_410112 ], [ 5, %block_410180 ], [ 5, %block_410355 ], [ 5, %block_410516 ]
  %840 = phi %struct.Memory* [ %1672, %block_410350 ], [ %2173, %block_410089 ], [ %853, %block_410112 ], [ %354, %block_410180 ], [ %2173, %block_410355 ], [ %1209, %block_410516 ]
  %841 = phi i64 [ 5, %block_410350 ], [ 923, %block_410089 ], [ 923, %block_410112 ], [ 923, %block_410180 ], [ 5, %block_410355 ], [ 5, %block_410516 ]
  %842 = add nuw nsw i64 %841, %839
  %843 = add i64 %842, %838
  %844 = load i64, i64* %17, align 8
  %845 = add i64 %844, -80
  %846 = inttoptr i64 %845 to i32*
  %847 = load i32, i32* %846
  %848 = add i32 %847, 1
  %849 = icmp eq i32 %848, 0
  %850 = select i1 %849, i64 111, i64 10
  %851 = add i64 %843, %850
  br i1 %849, label %block_410594, label %block_41052f

block_410112:                                     ; preds = %block_4100f6, %block_4100b8
  %852 = phi i64 [ %308, %block_4100b8 ], [ %1024, %block_4100f6 ]
  %853 = phi %struct.Memory* [ %303, %block_4100b8 ], [ %303, %block_4100f6 ]
  %854 = add i64 %852, 5
  br label %block_410525

block_410164:                                     ; preds = %block_410126
  %855 = load i64, i64* %17, align 8
  %856 = add i64 %855, -124
  %857 = inttoptr i64 %856 to i32*
  %858 = load i32, i32* %857
  %859 = add i64 %855, -172
  %860 = inttoptr i64 %859 to i32*
  %861 = load i32, i32* %860
  %862 = sext i32 %861 to i64
  %863 = shl nsw i64 %862, 2
  %864 = add i64 %855, -48
  %865 = add i64 %864, %863
  %866 = inttoptr i64 %865 to i32*
  store i32 %858, i32* %866
  %867 = inttoptr i64 %856 to i32*
  %868 = load i32, i32* %867
  %869 = zext i32 %868 to i64
  store i64 %869, i64* %13, align 8, !tbaa !1240
  %870 = inttoptr i64 %859 to i32*
  %871 = load i32, i32* %870
  %872 = sext i32 %871 to i64
  store i64 %872, i64* %14, align 8, !tbaa !1240
  %873 = shl nsw i64 %872, 2
  %874 = add i64 %855, -80
  %875 = add i64 %874, %873
  %876 = add i64 %694, 28
  %877 = inttoptr i64 %875 to i32*
  store i32 %868, i32* %877
  br label %block_410180

block_40ff10:                                     ; preds = %block_40feb7
  %878 = load i64, i64* %17, align 8
  %879 = add i64 %878, -124
  %880 = inttoptr i64 %879 to i32*
  %881 = load i32, i32* %880
  %882 = add i64 %878, -172
  %883 = inttoptr i64 %882 to i32*
  %884 = load i32, i32* %883
  %885 = sext i32 %884 to i64
  %886 = shl nsw i64 %885, 2
  %887 = add i64 %878, -48
  %888 = add i64 %887, %886
  %889 = inttoptr i64 %888 to i32*
  store i32 %881, i32* %889
  %890 = inttoptr i64 %879 to i32*
  %891 = load i32, i32* %890
  %892 = inttoptr i64 %882 to i32*
  %893 = load i32, i32* %892
  %894 = sext i32 %893 to i64
  %895 = shl nsw i64 %894, 2
  %896 = add i64 %878, -80
  %897 = add i64 %896, %895
  %898 = inttoptr i64 %897 to i32*
  store i32 %891, i32* %898
  %899 = inttoptr i64 %879 to i32*
  %900 = load i32, i32* %899
  %901 = add i64 %878, -160
  %902 = inttoptr i64 %901 to i32*
  %903 = load i32, i32* %902
  %904 = sext i32 %903 to i64
  %905 = shl nsw i64 %904, 2
  %906 = add i64 %878, -104
  %907 = add i64 %906, %905
  %908 = add i64 %1518, 42
  %909 = inttoptr i64 %907 to i32*
  store i32 %900, i32* %909
  br label %block_40ff44.sink.split

block_40f70d:                                     ; preds = %block_40f6ee
  %910 = sext i32 %3081 to i64
  %911 = shl nsw i64 %910, 2
  %912 = add nsw i64 %911, -156
  %913 = add i64 %912, %2172
  %914 = inttoptr i64 %913 to i32*
  %915 = load i32, i32* %914
  %916 = sext i32 %915 to i64
  %917 = shl nsw i64 %916, 2
  %918 = add i64 %1057, %917
  %919 = inttoptr i64 %918 to i32*
  %920 = load i32, i32* %919
  %921 = add i32 %920, 1
  %922 = icmp eq i32 %921, 0
  %923 = select i1 %922, i64 31, i64 41
  %924 = add i64 %1064, %923
  br i1 %922, label %block_40f72c, label %block_40f736

block_41059e:                                     ; preds = %block_410594
  store i64 6, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %925 = add i64 %341, -12
  %926 = inttoptr i64 %925 to i32*
  %927 = load i32, i32* %926
  %928 = add i64 %341, -44
  %929 = inttoptr i64 %928 to i32*
  %930 = load i32, i32* %929
  %931 = sext i32 %930 to i64
  %932 = mul nsw i64 %931, 2400
  %933 = add i64 %932, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 796)
  %934 = inttoptr i64 %933 to i32*
  store i32 %927, i32* %934
  %935 = inttoptr i64 %925 to i32*
  %936 = load i32, i32* %935
  %937 = inttoptr i64 %928 to i32*
  %938 = load i32, i32* %937
  %939 = sext i32 %938 to i64
  %940 = mul nsw i64 %939, 2400
  %941 = load i64, i64* %13, align 8
  %942 = add i64 %940, %941
  %943 = add i64 %942, 980
  %944 = inttoptr i64 %943 to i32*
  store i32 %936, i32* %944
  %945 = load i64, i64* %17, align 8
  %946 = add i64 %945, -12
  %947 = inttoptr i64 %946 to i32*
  %948 = load i32, i32* %947
  %949 = add i64 %945, -44
  %950 = inttoptr i64 %949 to i32*
  %951 = load i32, i32* %950
  %952 = sext i32 %951 to i64
  %953 = mul nsw i64 %952, 2400
  %954 = add i64 %953, %941
  %955 = add i64 %954, 1780
  %956 = inttoptr i64 %955 to i32*
  store i32 %948, i32* %956
  %957 = inttoptr i64 %949 to i32*
  %958 = load i32, i32* %957
  %959 = zext i32 %958 to i64
  store i64 %959, i64* %62, align 8, !tbaa !1240
  %960 = inttoptr i64 %946 to i32*
  %961 = load i32, i32* %960
  %962 = zext i32 %961 to i64
  store i64 %962, i64* %15, align 8, !tbaa !1240
  %963 = add i64 %349, 5490
  %964 = add i64 %349, 101
  %965 = load i64, i64* %16, align 8, !tbaa !1240
  %966 = add i64 %965, -8
  %967 = inttoptr i64 %966 to i64*
  store i64 %964, i64* %967
  store i64 %966, i64* %16, align 8, !tbaa !1240
  %968 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %963, %struct.Memory* %342)
  %969 = load i64, i64* %17, align 8
  %970 = load i64, i64* %3, align 8
  br label %block_410603

block_40f965:                                     ; preds = %block_40f914
  %971 = load i64, i64* %17, align 8
  %972 = add i64 %971, -124
  %973 = inttoptr i64 %972 to i32*
  %974 = load i32, i32* %973
  %975 = add i64 %971, -172
  %976 = inttoptr i64 %975 to i32*
  %977 = load i32, i32* %976
  %978 = sext i32 %977 to i64
  %979 = shl nsw i64 %978, 2
  %980 = add i64 %971, -48
  %981 = add i64 %980, %979
  %982 = inttoptr i64 %981 to i32*
  store i32 %974, i32* %982
  %983 = inttoptr i64 %972 to i32*
  %984 = load i32, i32* %983
  %985 = inttoptr i64 %975 to i32*
  %986 = load i32, i32* %985
  %987 = sext i32 %986 to i64
  %988 = shl nsw i64 %987, 2
  %989 = add i64 %971, -80
  %990 = add i64 %989, %988
  %991 = inttoptr i64 %990 to i32*
  store i32 %984, i32* %991
  %992 = inttoptr i64 %972 to i32*
  %993 = load i32, i32* %992
  %994 = add i64 %971, -120
  %995 = inttoptr i64 %994 to i32*
  %996 = load i32, i32* %995
  %997 = sext i32 %996 to i64
  %998 = shl nsw i64 %997, 2
  %999 = add i64 %971, -104
  %1000 = add i64 %999, %998
  %1001 = add i64 %818, 39
  %1002 = inttoptr i64 %1000 to i32*
  store i32 %993, i32* %1002
  br label %block_40f98c

block_4100f6:                                     ; preds = %block_4100b8
  %1003 = load i64, i64* %17, align 8
  %1004 = add i64 %1003, -124
  %1005 = inttoptr i64 %1004 to i32*
  %1006 = load i32, i32* %1005
  %1007 = add i64 %1003, -172
  %1008 = inttoptr i64 %1007 to i32*
  %1009 = load i32, i32* %1008
  %1010 = sext i32 %1009 to i64
  %1011 = shl nsw i64 %1010, 2
  %1012 = add i64 %1003, -48
  %1013 = add i64 %1012, %1011
  %1014 = inttoptr i64 %1013 to i32*
  store i32 %1006, i32* %1014
  %1015 = inttoptr i64 %1004 to i32*
  %1016 = load i32, i32* %1015
  %1017 = zext i32 %1016 to i64
  store i64 %1017, i64* %13, align 8, !tbaa !1240
  %1018 = inttoptr i64 %1007 to i32*
  %1019 = load i32, i32* %1018
  %1020 = sext i32 %1019 to i64
  store i64 %1020, i64* %14, align 8, !tbaa !1240
  %1021 = shl nsw i64 %1020, 2
  %1022 = add i64 %1003, -80
  %1023 = add i64 %1022, %1021
  %1024 = add i64 %308, 28
  %1025 = inttoptr i64 %1023 to i32*
  store i32 %1016, i32* %1025
  br label %block_410112

block_4104f0:                                     ; preds = %block_4104b2
  %1026 = load i64, i64* %17, align 8
  %1027 = add i64 %1026, -124
  %1028 = inttoptr i64 %1027 to i32*
  %1029 = load i32, i32* %1028
  %1030 = add i64 %1026, -172
  %1031 = inttoptr i64 %1030 to i32*
  %1032 = load i32, i32* %1031
  %1033 = sext i32 %1032 to i64
  %1034 = shl nsw i64 %1033, 2
  %1035 = add i64 %1026, -80
  %1036 = add i64 %1035, %1034
  %1037 = inttoptr i64 %1036 to i32*
  store i32 %1029, i32* %1037
  %1038 = inttoptr i64 %1027 to i32*
  %1039 = load i32, i32* %1038
  %1040 = zext i32 %1039 to i64
  store i64 %1040, i64* %13, align 8, !tbaa !1240
  %1041 = inttoptr i64 %1030 to i32*
  %1042 = load i32, i32* %1041
  %1043 = sext i32 %1042 to i64
  store i64 %1043, i64* %14, align 8, !tbaa !1240
  %1044 = shl nsw i64 %1043, 2
  %1045 = add i64 %1026, -48
  %1046 = add i64 %1045, %1044
  %1047 = add i64 %1643, 28
  %1048 = inttoptr i64 %1046 to i32*
  store i32 %1039, i32* %1048
  br label %block_410516.sink.split

block_40f6ee:                                     ; preds = %block_40f6e1
  %1049 = sext i32 %1689 to i64
  %1050 = shl nsw i64 %1049, 2
  %1051 = add nsw i64 %1050, -156
  %1052 = add i64 %1051, %2172
  %1053 = inttoptr i64 %1052 to i32*
  %1054 = load i32, i32* %1053
  %1055 = sext i32 %1054 to i64
  %1056 = shl nsw i64 %1055, 2
  %1057 = add i64 %2172, -80
  %1058 = add i64 %1057, %1056
  %1059 = inttoptr i64 %1058 to i32*
  %1060 = load i32, i32* %1059
  %1061 = add i32 %1060, 1
  %1062 = icmp eq i32 %1061, 0
  %1063 = select i1 %1062, i64 31, i64 72
  %1064 = add i64 %3084, %1063
  br i1 %1062, label %block_40f70d, label %block_40f736

block_40fce4:                                     ; preds = %block_40fcc2
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %14, align 8, !tbaa !1240
  %1065 = add i64 %312, -164
  %1066 = inttoptr i64 %1065 to i32*
  store i32 %2302, i32* %1066
  %1067 = inttoptr i64 %314 to i32*
  %1068 = load i32, i32* %1067
  %1069 = sext i32 %1068 to i64
  %1070 = shl nsw i64 %1069, 2
  %1071 = add i64 %1070, ptrtoint (%face_l1_type* @face_l1 to i64)
  %1072 = inttoptr i64 %1071 to i32*
  %1073 = load i32, i32* %1072
  %1074 = add i64 %312, -120
  %1075 = inttoptr i64 %1074 to i32*
  store i32 %1073, i32* %1075
  %1076 = inttoptr i64 %1074 to i32*
  %1077 = load i32, i32* %1076
  %1078 = sext i32 %1077 to i64
  %1079 = shl nsw i64 %1078, 2
  %1080 = add i64 %312, -116
  %1081 = add i64 %1080, %1079
  %1082 = inttoptr i64 %1081 to i32*
  %1083 = load i32, i32* %1082
  %1084 = sext i32 %1083 to i64
  %1085 = shl nsw i64 %1084, 5
  %1086 = add i64 %1085, ptrtoint (%local_corner_type* @local_corner to i64)
  %1087 = load i64, i64* %17, align 8
  %1088 = add i64 %1087, -160
  %1089 = inttoptr i64 %1088 to i32*
  %1090 = load i32, i32* %1089
  %1091 = sext i32 %1090 to i64
  %1092 = shl nsw i64 %1091, 2
  %1093 = add i64 %1092, ptrtoint (%face_l2_type* @face_l2 to i64)
  %1094 = inttoptr i64 %1093 to i32*
  %1095 = load i32, i32* %1094
  %1096 = sext i32 %1095 to i64
  %1097 = shl nsw i64 %1096, 2
  %1098 = add i64 %1087, -144
  %1099 = add i64 %1098, %1097
  %1100 = inttoptr i64 %1099 to i32*
  %1101 = load i32, i32* %1100
  %1102 = sext i32 %1101 to i64
  %1103 = shl nsw i64 %1102, 2
  %1104 = add i64 %1103, %1086
  %1105 = inttoptr i64 %1104 to i32*
  %1106 = load i32, i32* %1105
  %1107 = add i64 %1087, -168
  %1108 = inttoptr i64 %1107 to i32*
  store i32 %1106, i32* %1108
  %1109 = add i64 %1087, -120
  %1110 = inttoptr i64 %1109 to i32*
  %1111 = load i32, i32* %1110
  %1112 = sext i32 %1111 to i64
  %1113 = shl nsw i64 %1112, 2
  %1114 = add i64 %1087, -116
  %1115 = add i64 %1114, %1113
  %1116 = inttoptr i64 %1115 to i32*
  %1117 = load i32, i32* %1116
  %1118 = sext i32 %1117 to i64
  %1119 = shl nsw i64 %1118, 4
  %1120 = load i64, i64* %14, align 8
  %1121 = add i64 %1119, %1120
  %1122 = load i64, i64* %17, align 8
  %1123 = add i64 %1122, -168
  %1124 = inttoptr i64 %1123 to i32*
  %1125 = load i32, i32* %1124
  %1126 = sext i32 %1125 to i64
  %1127 = shl nsw i64 %1126, 2
  %1128 = add i64 %1127, %1121
  %1129 = inttoptr i64 %1128 to i32*
  %1130 = load i32, i32* %1129
  %1131 = add i64 %1122, -172
  %1132 = inttoptr i64 %1131 to i32*
  store i32 %1130, i32* %1132
  %1133 = inttoptr i64 %1123 to i32*
  %1134 = load i32, i32* %1133
  %1135 = sext i32 %1134 to i64
  %1136 = shl nsw i64 %1135, 3
  %1137 = add i64 %1136, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %1138 = inttoptr i64 %1137 to i32*
  %1139 = load i32, i32* %1138
  %1140 = add i64 %1122, -128
  %1141 = inttoptr i64 %1140 to i32*
  store i32 %1139, i32* %1141
  %1142 = inttoptr i64 %1123 to i32*
  %1143 = load i32, i32* %1142
  %1144 = sext i32 %1143 to i64
  %1145 = shl nsw i64 %1144, 3
  %1146 = add i64 %1145, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %1147 = inttoptr i64 %1146 to i32*
  %1148 = load i32, i32* %1147
  %1149 = add i64 %1122, -132
  %1150 = inttoptr i64 %1149 to i32*
  store i32 %1148, i32* %1150
  %1151 = add i64 %1122, -164
  %1152 = inttoptr i64 %1151 to i32*
  %1153 = load i32, i32* %1152
  %1154 = sext i32 %1153 to i64
  %1155 = mul nsw i64 %1154, 96
  %1156 = load i64, i64* %13, align 8
  %1157 = add i64 %1155, %1156
  %1158 = load i64, i64* %17, align 8
  %1159 = add i64 %1158, -120
  %1160 = inttoptr i64 %1159 to i32*
  %1161 = load i32, i32* %1160
  %1162 = sext i32 %1161 to i64
  %1163 = shl nsw i64 %1162, 2
  %1164 = add i64 %1158, -116
  %1165 = add i64 %1164, %1163
  %1166 = inttoptr i64 %1165 to i32*
  %1167 = load i32, i32* %1166
  %1168 = sext i32 %1167 to i64
  %1169 = shl nsw i64 %1168, 4
  %1170 = add i64 %1169, %1157
  %1171 = add i64 %1158, -132
  %1172 = inttoptr i64 %1171 to i32*
  %1173 = load i32, i32* %1172
  %1174 = sext i32 %1173 to i64
  %1175 = shl nsw i64 %1174, 3
  %1176 = add i64 %1175, %1170
  %1177 = load i64, i64* %17, align 8
  %1178 = add i64 %1177, -128
  %1179 = inttoptr i64 %1178 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  %1182 = shl nsw i64 %1181, 2
  %1183 = add i64 %1182, %1176
  %1184 = inttoptr i64 %1183 to i32*
  %1185 = load i32, i32* %1184
  %1186 = zext i32 %1185 to i64
  store i64 %1186, i64* %62, align 8, !tbaa !1240
  %1187 = add i64 %1177, -124
  %1188 = inttoptr i64 %1187 to i32*
  store i32 %1185, i32* %1188
  %1189 = inttoptr i64 %1187 to i32*
  %1190 = load i32, i32* %1189
  %1191 = add i32 %1190, 1
  %1192 = icmp eq i32 %1191, 0
  %1193 = select i1 %1192, i64 261, i64 457
  %1194 = add i64 %2306, %1193
  br i1 %1192, label %block_40fde9, label %block_40feb7

block_40ff44.sink.split:                          ; preds = %block_40fe79, %block_40fe20, %block_40feb7, %block_40ff10
  %1195 = phi i64 [ %2629, %block_40fe20 ], [ %2912, %block_40fe79 ], [ %1518, %block_40feb7 ], [ %908, %block_40ff10 ]
  %1196 = phi i64 [ 156, %block_40fe20 ], [ 156, %block_40fe79 ], [ 5, %block_40feb7 ], [ 5, %block_40ff10 ]
  %1197 = phi %struct.Memory* [ %2624, %block_40fe20 ], [ %2624, %block_40fe79 ], [ %1513, %block_40feb7 ], [ %1513, %block_40ff10 ]
  %1198 = add i64 %1195, 5
  br label %block_40ff44

block_40ff44:                                     ; preds = %block_40ff44.sink.split, %block_40fde9
  %1199 = phi i64 [ %95, %block_40fde9 ], [ %1198, %block_40ff44.sink.split ]
  %1200 = phi i64 [ 156, %block_40fde9 ], [ %1196, %block_40ff44.sink.split ]
  %1201 = phi %struct.Memory* [ %45, %block_40fde9 ], [ %1197, %block_40ff44.sink.split ]
  %1202 = add i64 %1199, %1200
  br label %block_40ff4e.sink.split.sink.split

block_410516.sink.split:                          ; preds = %block_410444, %block_410482, %block_4104b2, %block_4104f0
  %1203 = phi i64 [ %1643, %block_4104b2 ], [ %1047, %block_4104f0 ], [ %3124, %block_410444 ], [ %2036, %block_410482 ]
  %1204 = phi i64 [ 10, %block_4104b2 ], [ 10, %block_4104f0 ], [ 120, %block_410444 ], [ 120, %block_410482 ]
  %1205 = phi %struct.Memory* [ %1638, %block_4104b2 ], [ %1638, %block_4104f0 ], [ %3119, %block_410444 ], [ %3119, %block_410482 ]
  %1206 = add i64 %1203, 5
  br label %block_410516

block_410516:                                     ; preds = %block_410415, %block_410516.sink.split
  %1207 = phi i64 [ %2835, %block_410415 ], [ %1206, %block_410516.sink.split ]
  %1208 = phi i64 [ 120, %block_410415 ], [ %1204, %block_410516.sink.split ]
  %1209 = phi %struct.Memory* [ %2173, %block_410415 ], [ %1205, %block_410516.sink.split ]
  %1210 = add i64 %1208, %1207
  br label %block_410525

block_40f8dd:                                     ; preds = %block_40f812
  %1211 = add i64 %3027, -164
  %1212 = inttoptr i64 %1211 to i32*
  %1213 = load i32, i32* %1212
  %1214 = sext i32 %1213 to i64
  %1215 = mul nsw i64 %1214, 96
  %1216 = add i64 %1215, ptrtoint (%sje_type* @sje to i64)
  %1217 = add i64 %3027, -120
  %1218 = inttoptr i64 %1217 to i32*
  %1219 = load i32, i32* %1218
  %1220 = sext i32 %1219 to i64
  %1221 = shl nsw i64 %1220, 2
  %1222 = add i64 %3027, -116
  %1223 = add i64 %1222, %1221
  %1224 = inttoptr i64 %1223 to i32*
  %1225 = load i32, i32* %1224
  %1226 = sext i32 %1225 to i64
  %1227 = shl nsw i64 %1226, 4
  %1228 = add i64 %1227, %1216
  %1229 = inttoptr i64 %1228 to i32*
  %1230 = load i32, i32* %1229
  %1231 = load i64, i64* %17, align 8
  %1232 = add i64 %1231, -124
  %1233 = inttoptr i64 %1232 to i32*
  store i32 %1230, i32* %1233
  %1234 = inttoptr i64 %1232 to i32*
  %1235 = load i32, i32* %1234
  %1236 = add i32 %1235, 1
  %1237 = icmp eq i32 %1236, 0
  %1238 = select i1 %1237, i64 180, i64 55
  %1239 = add i64 %3026, %1238
  br i1 %1237, label %block_40fa22, label %block_40f914

block_40f6d2:                                     ; preds = %block_40f6b3
  %1240 = add i64 %1574, 10
  %1241 = inttoptr i64 %2046 to i32*
  store i32 1, i32* %1241
  br label %block_40f740

block_40ffd3:                                     ; preds = %block_40ff71
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %14, align 8, !tbaa !1240
  %1242 = load i64, i64* %17, align 8
  %1243 = add i64 %1242, -108
  %1244 = inttoptr i64 %1243 to i32*
  %1245 = load i32, i32* %1244
  %1246 = sext i32 %1245 to i64
  %1247 = shl nsw i64 %1246, 5
  %1248 = add i64 %1247, ptrtoint (%local_corner_type* @local_corner to i64)
  %1249 = add i64 %1242, -4
  %1250 = inttoptr i64 %1249 to i32*
  %1251 = load i32, i32* %1250
  %1252 = sext i32 %1251 to i64
  store i64 %1252, i64* %15, align 8, !tbaa !1240
  %1253 = shl nsw i64 %1252, 2
  %1254 = add i64 %1253, %1248
  %1255 = inttoptr i64 %1254 to i32*
  %1256 = load i32, i32* %1255
  %1257 = sext i32 %1256 to i64
  %1258 = shl nsw i64 %1257, 2
  %1259 = add i64 %1258, ptrtoint (%oplc_type* @oplc to i64)
  %1260 = inttoptr i64 %1259 to i32*
  %1261 = load i32, i32* %1260
  %1262 = add i64 %1242, -168
  %1263 = inttoptr i64 %1262 to i32*
  store i32 %1261, i32* %1263
  %1264 = inttoptr i64 %1262 to i32*
  %1265 = load i32, i32* %1264
  %1266 = sext i32 %1265 to i64
  %1267 = shl nsw i64 %1266, 3
  %1268 = add i64 %1267, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %1269 = inttoptr i64 %1268 to i32*
  %1270 = load i32, i32* %1269
  %1271 = load i64, i64* %17, align 8
  %1272 = add i64 %1271, -128
  %1273 = inttoptr i64 %1272 to i32*
  store i32 %1270, i32* %1273
  %1274 = add i64 %1271, -168
  %1275 = inttoptr i64 %1274 to i32*
  %1276 = load i32, i32* %1275
  %1277 = sext i32 %1276 to i64
  %1278 = shl nsw i64 %1277, 3
  %1279 = add i64 %1278, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %1280 = inttoptr i64 %1279 to i32*
  %1281 = load i32, i32* %1280
  %1282 = add i64 %1271, -132
  %1283 = inttoptr i64 %1282 to i32*
  store i32 %1281, i32* %1283
  %1284 = add i64 %1271, -104
  %1285 = inttoptr i64 %1284 to i32*
  %1286 = load i32, i32* %1285
  %1287 = sext i32 %1286 to i64
  %1288 = mul nsw i64 %1287, 96
  %1289 = load i64, i64* %14, align 8
  %1290 = add i64 %1288, %1289
  %1291 = add i64 %1271, -108
  %1292 = inttoptr i64 %1291 to i32*
  %1293 = load i32, i32* %1292
  %1294 = sext i32 %1293 to i64
  %1295 = shl nsw i64 %1294, 4
  %1296 = add i64 %1295, %1290
  %1297 = load i64, i64* %17, align 8
  %1298 = add i64 %1297, -132
  %1299 = inttoptr i64 %1298 to i32*
  %1300 = load i32, i32* %1299
  %1301 = sext i32 %1300 to i64
  %1302 = shl nsw i64 %1301, 3
  %1303 = add i64 %1302, %1296
  %1304 = add i64 %1297, -128
  %1305 = inttoptr i64 %1304 to i32*
  %1306 = load i32, i32* %1305
  %1307 = sext i32 %1306 to i64
  %1308 = shl nsw i64 %1307, 2
  %1309 = add i64 %1308, %1303
  %1310 = inttoptr i64 %1309 to i32*
  %1311 = load i32, i32* %1310
  %1312 = add i64 %1297, -124
  %1313 = inttoptr i64 %1312 to i32*
  store i32 %1311, i32* %1313
  %1314 = add i64 %1297, -108
  %1315 = inttoptr i64 %1314 to i32*
  %1316 = load i32, i32* %1315
  %1317 = sext i32 %1316 to i64
  %1318 = shl nsw i64 %1317, 4
  %1319 = load i64, i64* %13, align 8
  %1320 = add i64 %1318, %1319
  %1321 = load i64, i64* %17, align 8
  %1322 = add i64 %1321, -168
  %1323 = inttoptr i64 %1322 to i32*
  %1324 = load i32, i32* %1323
  %1325 = sext i32 %1324 to i64
  %1326 = shl nsw i64 %1325, 2
  %1327 = add i64 %1326, %1320
  %1328 = inttoptr i64 %1327 to i32*
  %1329 = load i32, i32* %1328
  %1330 = zext i32 %1329 to i64
  store i64 %1330, i64* %62, align 8, !tbaa !1240
  %1331 = add i64 %1321, -172
  %1332 = inttoptr i64 %1331 to i32*
  store i32 %1329, i32* %1332
  %1333 = add i64 %1321, -124
  %1334 = inttoptr i64 %1333 to i32*
  %1335 = load i32, i32* %1334
  %1336 = add i32 %1335, 1
  %1337 = icmp eq i32 %1336, 0
  %1338 = select i1 %1337, i64 182, i64 329
  %1339 = add i64 %460, %1338
  br i1 %1337, label %block_410089, label %block_410126

block_4102bc:                                     ; preds = %block_41027e
  %1340 = load i64, i64* %17, align 8
  %1341 = add i64 %1340, -124
  %1342 = inttoptr i64 %1341 to i32*
  %1343 = load i32, i32* %1342
  %1344 = add i64 %1340, -172
  %1345 = inttoptr i64 %1344 to i32*
  %1346 = load i32, i32* %1345
  %1347 = sext i32 %1346 to i64
  %1348 = shl nsw i64 %1347, 2
  %1349 = add i64 %1340, -48
  %1350 = add i64 %1349, %1348
  %1351 = inttoptr i64 %1350 to i32*
  store i32 %1343, i32* %1351
  %1352 = inttoptr i64 %1341 to i32*
  %1353 = load i32, i32* %1352
  %1354 = zext i32 %1353 to i64
  store i64 %1354, i64* %13, align 8, !tbaa !1240
  %1355 = inttoptr i64 %1344 to i32*
  %1356 = load i32, i32* %1355
  %1357 = sext i32 %1356 to i64
  store i64 %1357, i64* %14, align 8, !tbaa !1240
  %1358 = shl nsw i64 %1357, 2
  %1359 = add i64 %1340, -80
  %1360 = add i64 %1359, %1358
  %1361 = add i64 %2092, 28
  %1362 = inttoptr i64 %1360 to i32*
  store i32 %1353, i32* %1362
  br label %block_410350.sink.split

block_41035f:                                     ; preds = %block_410355
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %14, align 8, !tbaa !1240
  %1363 = add i64 %2038, -112
  %1364 = inttoptr i64 %1363 to i32*
  %1365 = load i32, i32* %1364
  %1366 = sext i32 %1365 to i64
  %1367 = shl nsw i64 %1366, 5
  %1368 = add i64 %1367, ptrtoint (%local_corner_type* @local_corner to i64)
  %1369 = add i64 %2038, -4
  %1370 = inttoptr i64 %1369 to i32*
  %1371 = load i32, i32* %1370
  %1372 = sext i32 %1371 to i64
  store i64 %1372, i64* %15, align 8, !tbaa !1240
  %1373 = shl nsw i64 %1372, 2
  %1374 = add i64 %1373, %1368
  %1375 = inttoptr i64 %1374 to i32*
  %1376 = load i32, i32* %1375
  %1377 = sext i32 %1376 to i64
  %1378 = shl nsw i64 %1377, 2
  %1379 = add i64 %1378, ptrtoint (%oplc_type* @oplc to i64)
  %1380 = inttoptr i64 %1379 to i32*
  %1381 = load i32, i32* %1380
  %1382 = add i64 %2038, -168
  %1383 = inttoptr i64 %1382 to i32*
  store i32 %1381, i32* %1383
  %1384 = load i64, i64* %17, align 8
  %1385 = add i64 %1384, -168
  %1386 = inttoptr i64 %1385 to i32*
  %1387 = load i32, i32* %1386
  %1388 = sext i32 %1387 to i64
  %1389 = shl nsw i64 %1388, 3
  %1390 = add i64 %1389, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %1391 = inttoptr i64 %1390 to i32*
  %1392 = load i32, i32* %1391
  %1393 = add i64 %1384, -128
  %1394 = inttoptr i64 %1393 to i32*
  store i32 %1392, i32* %1394
  %1395 = inttoptr i64 %1385 to i32*
  %1396 = load i32, i32* %1395
  %1397 = sext i32 %1396 to i64
  %1398 = shl nsw i64 %1397, 3
  %1399 = add i64 %1398, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %1400 = inttoptr i64 %1399 to i32*
  %1401 = load i32, i32* %1400
  %1402 = add i64 %1384, -132
  %1403 = inttoptr i64 %1402 to i32*
  store i32 %1401, i32* %1403
  %1404 = add i64 %1384, -96
  %1405 = inttoptr i64 %1404 to i32*
  %1406 = load i32, i32* %1405
  %1407 = sext i32 %1406 to i64
  %1408 = mul nsw i64 %1407, 96
  %1409 = load i64, i64* %14, align 8
  %1410 = add i64 %1408, %1409
  %1411 = load i64, i64* %17, align 8
  %1412 = add i64 %1411, -112
  %1413 = inttoptr i64 %1412 to i32*
  %1414 = load i32, i32* %1413
  %1415 = sext i32 %1414 to i64
  %1416 = shl nsw i64 %1415, 4
  %1417 = add i64 %1416, %1410
  %1418 = add i64 %1411, -132
  %1419 = inttoptr i64 %1418 to i32*
  %1420 = load i32, i32* %1419
  %1421 = sext i32 %1420 to i64
  %1422 = shl nsw i64 %1421, 3
  %1423 = add i64 %1422, %1417
  %1424 = load i64, i64* %17, align 8
  %1425 = add i64 %1424, -128
  %1426 = inttoptr i64 %1425 to i32*
  %1427 = load i32, i32* %1426
  %1428 = sext i32 %1427 to i64
  %1429 = shl nsw i64 %1428, 2
  %1430 = add i64 %1429, %1423
  %1431 = inttoptr i64 %1430 to i32*
  %1432 = load i32, i32* %1431
  %1433 = add i64 %1424, -124
  %1434 = inttoptr i64 %1433 to i32*
  store i32 %1432, i32* %1434
  %1435 = add i64 %1424, -112
  %1436 = inttoptr i64 %1435 to i32*
  %1437 = load i32, i32* %1436
  %1438 = sext i32 %1437 to i64
  %1439 = shl nsw i64 %1438, 4
  %1440 = load i64, i64* %13, align 8
  %1441 = add i64 %1439, %1440
  %1442 = add i64 %1424, -168
  %1443 = inttoptr i64 %1442 to i32*
  %1444 = load i32, i32* %1443
  %1445 = sext i32 %1444 to i64
  %1446 = shl nsw i64 %1445, 2
  %1447 = add i64 %1446, %1441
  %1448 = inttoptr i64 %1447 to i32*
  %1449 = load i32, i32* %1448
  %1450 = zext i32 %1449 to i64
  store i64 %1450, i64* %62, align 8, !tbaa !1240
  %1451 = add i64 %1424, -172
  %1452 = inttoptr i64 %1451 to i32*
  store i32 %1449, i32* %1452
  %1453 = load i64, i64* %17, align 8
  %1454 = add i64 %1453, -124
  %1455 = inttoptr i64 %1454 to i32*
  %1456 = load i32, i32* %1455
  %1457 = add i32 %1456, 1
  %1458 = icmp eq i32 %1457, 0
  %1459 = select i1 %1458, i64 182, i64 329
  %1460 = add i64 %1665, %1459
  br i1 %1458, label %block_410415, label %block_4104b2

block_40feb7:                                     ; preds = %block_40fce4
  %1461 = zext i32 %1190 to i64
  store i64 %1461, i64* %62, align 8, !tbaa !1240
  %1462 = add i64 %1177, -120
  %1463 = inttoptr i64 %1462 to i32*
  %1464 = load i32, i32* %1463
  %1465 = sext i32 %1464 to i64
  %1466 = shl nsw i64 %1465, 2
  %1467 = add i64 %1177, -116
  %1468 = add i64 %1467, %1466
  %1469 = inttoptr i64 %1468 to i32*
  %1470 = load i32, i32* %1469
  %1471 = sext i32 %1470 to i64
  %1472 = shl nsw i64 %1471, 2
  %1473 = add i64 %1472, ptrtoint (%jjface_type* @jjface to i64)
  %1474 = inttoptr i64 %1473 to i32*
  %1475 = load i32, i32* %1474
  %1476 = sext i32 %1475 to i64
  %1477 = shl nsw i64 %1476, 4
  %1478 = add i64 %1477, ptrtoint (%c_f_type* @c_f to i64)
  %1479 = add i64 %1177, -168
  %1480 = inttoptr i64 %1479 to i32*
  %1481 = load i32, i32* %1480
  %1482 = sext i32 %1481 to i64
  %1483 = shl nsw i64 %1482, 2
  %1484 = add i64 %1483, %1478
  %1485 = inttoptr i64 %1484 to i32*
  %1486 = load i32, i32* %1485
  %1487 = zext i32 %1486 to i64
  store i64 %1487, i64* %15, align 8, !tbaa !1240
  %1488 = add i64 %1177, -164
  %1489 = inttoptr i64 %1488 to i32*
  %1490 = load i32, i32* %1489
  %1491 = zext i32 %1490 to i64
  store i64 %1491, i64* %61, align 8, !tbaa !1240
  %1492 = load i64, i64* %17, align 8
  %1493 = add i64 %1492, -160
  %1494 = inttoptr i64 %1493 to i32*
  %1495 = load i32, i32* %1494
  %1496 = sext i32 %1495 to i64
  %1497 = shl nsw i64 %1496, 2
  %1498 = add i64 %1497, ptrtoint (%face_l2_type* @face_l2 to i64)
  %1499 = inttoptr i64 %1498 to i32*
  %1500 = load i32, i32* %1499
  %1501 = sext i32 %1500 to i64
  %1502 = shl nsw i64 %1501, 2
  %1503 = add i64 %1492, -144
  %1504 = add i64 %1503, %1502
  %1505 = inttoptr i64 %1504 to i32*
  %1506 = load i32, i32* %1505
  %1507 = zext i32 %1506 to i64
  store i64 %1507, i64* %14, align 8, !tbaa !1240
  %1508 = add i64 %1194, 6115
  %1509 = add i64 %1194, 90
  %1510 = load i64, i64* %16, align 8, !tbaa !1240
  %1511 = add i64 %1510, -8
  %1512 = inttoptr i64 %1511 to i64*
  store i64 %1509, i64* %1512
  store i64 %1511, i64* %16, align 8, !tbaa !1240
  %1513 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %1508, %struct.Memory* %45)
  %1514 = load i32, i32* %7, align 4
  %1515 = load i64, i64* %3, align 8
  %1516 = icmp eq i32 %1514, 0
  %1517 = select i1 %1516, i64 51, i64 9
  %1518 = add i64 %1515, %1517
  br i1 %1516, label %block_40ff44.sink.split, label %block_40ff10

block_4102ec:                                     ; preds = %block_410199
  %1519 = zext i32 %2010 to i64
  store i64 %1519, i64* %62, align 8, !tbaa !1240
  %1520 = add i64 %2007, -116
  %1521 = inttoptr i64 %1520 to i32*
  %1522 = load i32, i32* %1521
  %1523 = sext i32 %1522 to i64
  %1524 = shl nsw i64 %1523, 2
  %1525 = add i64 %1524, ptrtoint (%jjface_type* @jjface to i64)
  %1526 = inttoptr i64 %1525 to i32*
  %1527 = load i32, i32* %1526
  %1528 = sext i32 %1527 to i64
  %1529 = shl nsw i64 %1528, 4
  %1530 = add i64 %1529, ptrtoint (%c_f_type* @c_f to i64)
  %1531 = add i64 %2007, -168
  %1532 = inttoptr i64 %1531 to i32*
  %1533 = load i32, i32* %1532
  %1534 = sext i32 %1533 to i64
  %1535 = shl nsw i64 %1534, 2
  %1536 = add i64 %1535, %1530
  %1537 = inttoptr i64 %1536 to i32*
  %1538 = load i32, i32* %1537
  %1539 = zext i32 %1538 to i64
  store i64 %1539, i64* %15, align 8, !tbaa !1240
  %1540 = add i64 %2007, -8
  %1541 = inttoptr i64 %1540 to i32*
  %1542 = load i32, i32* %1541
  %1543 = zext i32 %1542 to i64
  store i64 %1543, i64* %61, align 8, !tbaa !1240
  %1544 = add i64 %2007, -4
  %1545 = inttoptr i64 %1544 to i32*
  %1546 = load i32, i32* %1545
  %1547 = zext i32 %1546 to i64
  store i64 %1547, i64* %14, align 8, !tbaa !1240
  %1548 = add i64 %2014, 5038
  %1549 = add i64 %2014, 63
  %1550 = load i64, i64* %16, align 8, !tbaa !1240
  %1551 = add i64 %1550, -8
  %1552 = inttoptr i64 %1551 to i64*
  store i64 %1549, i64* %1552
  store i64 %1551, i64* %16, align 8, !tbaa !1240
  %1553 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %1548, %struct.Memory* %2173)
  %1554 = load i32, i32* %7, align 4
  %1555 = load i64, i64* %3, align 8
  %1556 = icmp eq i32 %1554, 0
  %1557 = select i1 %1556, i64 37, i64 9
  %1558 = add i64 %1555, %1557
  br i1 %1556, label %block_410350.sink.split, label %block_41032a

block_40f6b3:                                     ; preds = %block_40f6a6
  %1559 = sext i32 %1689 to i64
  %1560 = shl nsw i64 %1559, 2
  %1561 = add nsw i64 %1560, -156
  %1562 = add i64 %1561, %2172
  %1563 = inttoptr i64 %1562 to i32*
  %1564 = load i32, i32* %1563
  %1565 = sext i32 %1564 to i64
  %1566 = shl nsw i64 %1565, 2
  %1567 = add i64 %2172, -80
  %1568 = add i64 %1567, %1566
  %1569 = inttoptr i64 %1568 to i32*
  %1570 = load i32, i32* %1569
  %1571 = add i32 %1570, 1
  %1572 = icmp eq i32 %1571, 0
  %1573 = select i1 %1572, i64 31, i64 41
  %1574 = add i64 %1692, %1573
  br i1 %1572, label %block_40f6d2, label %block_40f740

block_40fb62:                                     ; preds = %block_40fa5d
  %1575 = add i64 %2788, -164
  %1576 = inttoptr i64 %1575 to i32*
  %1577 = load i32, i32* %1576
  %1578 = sext i32 %1577 to i64
  %1579 = mul nsw i64 %1578, 96
  %1580 = add i64 %1579, ptrtoint (%sje_type* @sje to i64)
  %1581 = add i64 %2788, -120
  %1582 = inttoptr i64 %1581 to i32*
  %1583 = load i32, i32* %1582
  %1584 = sext i32 %1583 to i64
  %1585 = shl nsw i64 %1584, 2
  %1586 = add i64 %2788, -116
  %1587 = add i64 %1586, %1585
  %1588 = inttoptr i64 %1587 to i32*
  %1589 = load i32, i32* %1588
  %1590 = sext i32 %1589 to i64
  %1591 = shl nsw i64 %1590, 4
  %1592 = add i64 %1591, %1580
  %1593 = inttoptr i64 %1592 to i32*
  %1594 = load i32, i32* %1593
  %1595 = load i64, i64* %17, align 8
  %1596 = add i64 %1595, -124
  %1597 = inttoptr i64 %1596 to i32*
  store i32 %1594, i32* %1597
  %1598 = inttoptr i64 %1596 to i32*
  %1599 = load i32, i32* %1598
  %1600 = add i32 %1599, 1
  %1601 = icmp eq i32 %1600, 0
  %1602 = select i1 %1601, i64 191, i64 55
  %1603 = add i64 %2805, %1602
  br i1 %1601, label %block_40ff4e.sink.split, label %block_40fb99

block_4104b2:                                     ; preds = %block_41035f
  %1604 = zext i32 %1456 to i64
  store i64 %1604, i64* %62, align 8, !tbaa !1240
  %1605 = add i64 %1453, -112
  %1606 = inttoptr i64 %1605 to i32*
  %1607 = load i32, i32* %1606
  %1608 = sext i32 %1607 to i64
  %1609 = shl nsw i64 %1608, 2
  %1610 = add i64 %1609, ptrtoint (%jjface_type* @jjface to i64)
  %1611 = inttoptr i64 %1610 to i32*
  %1612 = load i32, i32* %1611
  %1613 = sext i32 %1612 to i64
  %1614 = shl nsw i64 %1613, 4
  %1615 = add i64 %1614, ptrtoint (%c_f_type* @c_f to i64)
  %1616 = add i64 %1453, -168
  %1617 = inttoptr i64 %1616 to i32*
  %1618 = load i32, i32* %1617
  %1619 = sext i32 %1618 to i64
  %1620 = shl nsw i64 %1619, 2
  %1621 = add i64 %1620, %1615
  %1622 = inttoptr i64 %1621 to i32*
  %1623 = load i32, i32* %1622
  %1624 = zext i32 %1623 to i64
  store i64 %1624, i64* %15, align 8, !tbaa !1240
  %1625 = add i64 %1453, -8
  %1626 = inttoptr i64 %1625 to i32*
  %1627 = load i32, i32* %1626
  %1628 = zext i32 %1627 to i64
  store i64 %1628, i64* %61, align 8, !tbaa !1240
  %1629 = add i64 %1453, -4
  %1630 = inttoptr i64 %1629 to i32*
  %1631 = load i32, i32* %1630
  %1632 = zext i32 %1631 to i64
  store i64 %1632, i64* %14, align 8, !tbaa !1240
  %1633 = add i64 %1460, 4584
  %1634 = add i64 %1460, 63
  %1635 = load i64, i64* %16, align 8, !tbaa !1240
  %1636 = add i64 %1635, -8
  %1637 = inttoptr i64 %1636 to i64*
  store i64 %1634, i64* %1637
  store i64 %1636, i64* %16, align 8, !tbaa !1240
  %1638 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %1633, %struct.Memory* %2173)
  %1639 = load i32, i32* %7, align 4
  %1640 = load i64, i64* %3, align 8
  %1641 = icmp eq i32 %1639, 0
  %1642 = select i1 %1641, i64 37, i64 9
  %1643 = add i64 %1640, %1642
  br i1 %1641, label %block_410516.sink.split, label %block_4104f0

block_40f39e:                                     ; preds = %block_40f3ab, %block_40f380
  %1644 = phi i64 [ %39, %block_40f380 ], [ %1688, %block_40f3ab ]
  %1645 = phi %struct.Memory* [ %2, %block_40f380 ], [ %1645, %block_40f3ab ]
  %1646 = inttoptr i64 %38 to i32*
  %1647 = load i32, i32* %1646
  %1648 = add i32 %1647, -8
  %1649 = lshr i32 %1648, 31
  %1650 = trunc i32 %1649 to i8
  %1651 = lshr i32 %1647, 31
  %1652 = xor i32 %1649, %1651
  %1653 = add nuw nsw i32 %1652, %1651
  %1654 = icmp eq i32 %1653, 2
  %1655 = icmp ne i8 %1650, 0
  %1656 = xor i1 %1655, %1654
  %1657 = select i1 %1656, i64 13, i64 63
  %1658 = add i64 %1644, %1657
  br i1 %1656, label %block_40f3ab, label %block_40f3dd

block_410355:                                     ; preds = %block_41018f
  %1659 = add i64 %2038, -96
  %1660 = inttoptr i64 %1659 to i32*
  %1661 = load i32, i32* %1660
  %1662 = add i32 %1661, 1
  %1663 = icmp eq i32 %1662, 0
  %1664 = select i1 %1663, i64 454, i64 10
  %1665 = add i64 %2045, %1664
  br i1 %1663, label %block_410525, label %block_41035f

block_410350.sink.split:                          ; preds = %block_41027e, %block_4102ec, %block_4102bc, %block_41032a
  %1666 = phi i64 [ %1558, %block_4102ec ], [ %654, %block_41032a ], [ %2092, %block_41027e ], [ %1361, %block_4102bc ]
  %1667 = phi i64 [ 5, %block_4102ec ], [ 5, %block_41032a ], [ 115, %block_41027e ], [ 115, %block_4102bc ]
  %1668 = phi %struct.Memory* [ %1553, %block_4102ec ], [ %1553, %block_41032a ], [ %2087, %block_41027e ], [ %2087, %block_4102bc ]
  %1669 = add i64 %1666, 5
  br label %block_410350

block_410350:                                     ; preds = %block_41024f, %block_410350.sink.split
  %1670 = phi i64 [ %2395, %block_41024f ], [ %1669, %block_410350.sink.split ]
  %1671 = phi i64 [ 115, %block_41024f ], [ %1667, %block_410350.sink.split ]
  %1672 = phi %struct.Memory* [ %2173, %block_41024f ], [ %1668, %block_410350.sink.split ]
  %1673 = add i64 %1670, %1671
  br label %block_410525

block_40f3ab:                                     ; preds = %block_40f39e
  %1674 = sext i32 %1647 to i64
  %1675 = shl nsw i64 %1674, 2
  %1676 = add i64 %41, %1675
  %1677 = inttoptr i64 %1676 to i32*
  store i32 -1, i32* %1677
  %1678 = inttoptr i64 %38 to i32*
  %1679 = load i32, i32* %1678
  %1680 = sext i32 %1679 to i64
  %1681 = shl nsw i64 %1680, 2
  %1682 = add i64 %42, %1681
  %1683 = inttoptr i64 %1682 to i32*
  store i32 -1, i32* %1683
  %1684 = inttoptr i64 %38 to i32*
  %1685 = load i32, i32* %1684
  %1686 = add i32 %1685, 1
  %1687 = inttoptr i64 %38 to i32*
  store i32 %1686, i32* %1687
  %1688 = add i64 %1658, -13
  br label %block_40f39e

block_40f6a6:                                     ; preds = %block_40f680
  %1689 = add i32 %2049, -1
  %1690 = icmp eq i32 %1689, 0
  %1691 = select i1 %1690, i64 13, i64 59
  %1692 = add i64 %2052, %1691
  br i1 %1690, label %block_40f6b3, label %block_40f6e1

block_40f72c:                                     ; preds = %block_40f70d
  %1693 = add i64 %924, 10
  %1694 = inttoptr i64 %2046 to i32*
  store i32 1, i32* %1694
  br label %block_40f736

block_40f697:                                     ; preds = %block_40f680
  %1695 = add i64 %2052, 10
  %1696 = inttoptr i64 %2046 to i32*
  store i32 1, i32* %1696
  br label %block_40f745

block_410896:                                     ; preds = %block_41082a, %block_410834
  %1697 = phi %struct.Memory* [ %2521, %block_41082a ], [ %2460, %block_410834 ]
  %1698 = load i64, i64* %16, align 8
  %1699 = add i64 %1698, 192
  %1700 = icmp ugt i64 %1698, -193
  %1701 = zext i1 %1700 to i8
  store i8 %1701, i8* %23, align 1, !tbaa !1248
  %1702 = trunc i64 %1699 to i32
  %1703 = and i32 %1702, 255
  %1704 = tail call i32 @llvm.ctpop.i32(i32 %1703) #11
  %1705 = trunc i32 %1704 to i8
  %1706 = and i8 %1705, 1
  %1707 = xor i8 %1706, 1
  store i8 %1707, i8* %24, align 1, !tbaa !1261
  %1708 = xor i64 %1699, %1698
  %1709 = lshr i64 %1708, 4
  %1710 = trunc i64 %1709 to i8
  %1711 = and i8 %1710, 1
  store i8 %1711, i8* %25, align 1, !tbaa !1262
  %1712 = icmp eq i64 %1699, 0
  %1713 = zext i1 %1712 to i8
  store i8 %1713, i8* %26, align 1, !tbaa !1263
  %1714 = lshr i64 %1699, 63
  %1715 = trunc i64 %1714 to i8
  store i8 %1715, i8* %27, align 1, !tbaa !1264
  %1716 = lshr i64 %1698, 63
  %1717 = xor i64 %1714, %1716
  %1718 = add nuw nsw i64 %1717, %1714
  %1719 = icmp eq i64 %1718, 2
  %1720 = zext i1 %1719 to i8
  store i8 %1720, i8* %28, align 1, !tbaa !1265
  %1721 = add i64 %1698, 200
  %1722 = inttoptr i64 %1699 to i64*
  %1723 = load i64, i64* %1722
  store i64 %1723, i64* %17, align 8, !tbaa !1240
  %1724 = inttoptr i64 %1721 to i64*
  %1725 = load i64, i64* %1724
  store i64 %1725, i64* %3, align 8, !tbaa !1240
  %1726 = add i64 %1698, 208
  store i64 %1726, i64* %16, align 8, !tbaa !1240
  ret %struct.Memory* %1697

block_40f493:                                     ; preds = %block_40f489
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %14, align 8, !tbaa !1240
  %1727 = sext i32 %1905 to i64
  %1728 = shl nsw i64 %1727, 2
  %1729 = add i64 %1901, -116
  %1730 = add i64 %1729, %1728
  %1731 = inttoptr i64 %1730 to i32*
  %1732 = load i32, i32* %1731
  %1733 = sext i32 %1732 to i64
  %1734 = shl nsw i64 %1733, 2
  %1735 = add i64 %1734, ptrtoint (%jjface_type* @jjface to i64)
  %1736 = inttoptr i64 %1735 to i32*
  %1737 = load i32, i32* %1736
  %1738 = sext i32 %1737 to i64
  %1739 = shl nsw i64 %1738, 4
  %1740 = add i64 %1739, ptrtoint (%c_f_type* @c_f to i64)
  %1741 = add i64 %1901, -92
  %1742 = add i64 %1741, %1728
  %1743 = inttoptr i64 %1742 to i32*
  %1744 = load i32, i32* %1743
  %1745 = sext i32 %1744 to i64
  %1746 = shl nsw i64 %1745, 2
  %1747 = add i64 %1746, %1740
  %1748 = inttoptr i64 %1747 to i32*
  %1749 = load i32, i32* %1748
  %1750 = load i64, i64* %17, align 8
  %1751 = add i64 %1750, -120
  %1752 = inttoptr i64 %1751 to i32*
  %1753 = load i32, i32* %1752
  %1754 = sext i32 %1753 to i64
  %1755 = shl nsw i64 %1754, 2
  %1756 = add i64 %1750, -144
  %1757 = add i64 %1756, %1755
  %1758 = inttoptr i64 %1757 to i32*
  store i32 %1749, i32* %1758
  %1759 = inttoptr i64 %1751 to i32*
  %1760 = load i32, i32* %1759
  %1761 = sext i32 %1760 to i64
  %1762 = shl nsw i64 %1761, 2
  %1763 = add i64 %1750, -116
  %1764 = add i64 %1763, %1762
  %1765 = inttoptr i64 %1764 to i32*
  %1766 = load i32, i32* %1765
  %1767 = sext i32 %1766 to i64
  %1768 = shl nsw i64 %1767, 4
  %1769 = load i64, i64* %14, align 8
  %1770 = add i64 %1768, %1769
  %1771 = add i64 %1750, -92
  %1772 = add i64 %1771, %1762
  %1773 = inttoptr i64 %1772 to i32*
  %1774 = load i32, i32* %1773
  %1775 = sext i32 %1774 to i64
  %1776 = shl nsw i64 %1775, 2
  %1777 = add i64 %1776, %1770
  %1778 = inttoptr i64 %1777 to i32*
  %1779 = load i32, i32* %1778
  %1780 = load i64, i64* %17, align 8
  %1781 = add i64 %1780, -120
  %1782 = inttoptr i64 %1781 to i32*
  %1783 = load i32, i32* %1782
  %1784 = sext i32 %1783 to i64
  %1785 = shl nsw i64 %1784, 2
  %1786 = add i64 %1780, -156
  %1787 = add i64 %1786, %1785
  %1788 = inttoptr i64 %1787 to i32*
  store i32 %1779, i32* %1788
  %1789 = add i64 %1780, -124
  %1790 = inttoptr i64 %1789 to i32*
  store i32 -1, i32* %1790
  %1791 = inttoptr i64 %1781 to i32*
  %1792 = load i32, i32* %1791
  %1793 = sext i32 %1792 to i64
  %1794 = shl nsw i64 %1793, 2
  %1795 = add i64 %1780, -92
  %1796 = add i64 %1795, %1794
  %1797 = inttoptr i64 %1796 to i32*
  %1798 = load i32, i32* %1797
  %1799 = sext i32 %1798 to i64
  %1800 = shl nsw i64 %1799, 3
  %1801 = add i64 %1800, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %1802 = inttoptr i64 %1801 to i32*
  %1803 = load i32, i32* %1802
  %1804 = add i64 %1780, -128
  %1805 = inttoptr i64 %1804 to i32*
  store i32 %1803, i32* %1805
  %1806 = inttoptr i64 %1781 to i32*
  %1807 = load i32, i32* %1806
  %1808 = sext i32 %1807 to i64
  %1809 = shl nsw i64 %1808, 2
  %1810 = add i64 %1795, %1809
  %1811 = inttoptr i64 %1810 to i32*
  %1812 = load i32, i32* %1811
  %1813 = sext i32 %1812 to i64
  %1814 = shl nsw i64 %1813, 3
  %1815 = add i64 %1814, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %1816 = inttoptr i64 %1815 to i32*
  %1817 = load i32, i32* %1816
  %1818 = add i64 %1780, -132
  %1819 = inttoptr i64 %1818 to i32*
  store i32 %1817, i32* %1819
  %1820 = add i64 %1780, -8
  %1821 = inttoptr i64 %1820 to i32*
  %1822 = load i32, i32* %1821
  %1823 = sext i32 %1822 to i64
  %1824 = mul nsw i64 %1823, 96
  %1825 = load i64, i64* %13, align 8
  %1826 = add i64 %1824, %1825
  %1827 = load i64, i64* %17, align 8
  %1828 = add i64 %1827, -120
  %1829 = inttoptr i64 %1828 to i32*
  %1830 = load i32, i32* %1829
  %1831 = sext i32 %1830 to i64
  %1832 = shl nsw i64 %1831, 2
  %1833 = add i64 %1827, -116
  %1834 = add i64 %1833, %1832
  %1835 = inttoptr i64 %1834 to i32*
  %1836 = load i32, i32* %1835
  %1837 = sext i32 %1836 to i64
  %1838 = shl nsw i64 %1837, 4
  %1839 = add i64 %1838, %1826
  %1840 = add i64 %1827, -132
  %1841 = inttoptr i64 %1840 to i32*
  %1842 = load i32, i32* %1841
  %1843 = sext i32 %1842 to i64
  %1844 = shl nsw i64 %1843, 3
  %1845 = add i64 %1844, %1839
  %1846 = load i64, i64* %17, align 8
  %1847 = add i64 %1846, -128
  %1848 = inttoptr i64 %1847 to i32*
  %1849 = load i32, i32* %1848
  %1850 = sext i32 %1849 to i64
  %1851 = shl nsw i64 %1850, 2
  %1852 = add i64 %1851, %1845
  %1853 = inttoptr i64 %1852 to i32*
  %1854 = load i32, i32* %1853
  %1855 = zext i32 %1854 to i64
  store i64 %1855, i64* %62, align 8, !tbaa !1240
  %1856 = add i64 %1846, -124
  %1857 = inttoptr i64 %1856 to i32*
  store i32 %1854, i32* %1857
  %1858 = inttoptr i64 %1856 to i32*
  %1859 = load i32, i32* %1858
  %1860 = add i32 %1859, 1
  %1861 = icmp eq i32 %1860, 0
  %1862 = select i1 %1861, i64 225, i64 359
  %1863 = add i64 %1916, %1862
  br i1 %1861, label %block_40f574, label %block_40f604

block_40f3f4:                                     ; preds = %block_40f3e7
  %1864 = inttoptr i64 %29 to i32*
  %1865 = load i32, i32* %1864
  %1866 = sext i32 %1865 to i64
  %1867 = mul nsw i64 %1866, 12
  %1868 = add i64 %1867, ptrtoint (%f_c_type* @f_c to i64)
  %1869 = sext i32 %99 to i64
  %1870 = shl nsw i64 %1869, 2
  %1871 = add i64 %1870, %1868
  %1872 = inttoptr i64 %1871 to i32*
  %1873 = load i32, i32* %1872
  %1874 = add i64 %65, %1870
  %1875 = inttoptr i64 %1874 to i32*
  store i32 %1873, i32* %1875
  %1876 = inttoptr i64 %38 to i32*
  %1877 = load i32, i32* %1876
  %1878 = sext i32 %1877 to i64
  %1879 = shl nsw i64 %1878, 2
  %1880 = add i64 %65, %1879
  %1881 = inttoptr i64 %1880 to i32*
  %1882 = load i32, i32* %1881
  %1883 = sext i32 %1882 to i64
  %1884 = shl nsw i64 %1883, 5
  %1885 = add i64 %1884, ptrtoint (%local_corner_type* @local_corner to i64)
  %1886 = inttoptr i64 %29 to i32*
  %1887 = load i32, i32* %1886
  %1888 = sext i32 %1887 to i64
  %1889 = shl nsw i64 %1888, 2
  %1890 = add i64 %1889, %1885
  %1891 = inttoptr i64 %1890 to i32*
  %1892 = load i32, i32* %1891
  %1893 = add i64 %66, %1879
  %1894 = inttoptr i64 %1893 to i32*
  store i32 %1892, i32* %1894
  %1895 = inttoptr i64 %38 to i32*
  %1896 = load i32, i32* %1895
  %1897 = add i32 %1896, 1
  %1898 = inttoptr i64 %38 to i32*
  store i32 %1897, i32* %1898
  %1899 = add i64 %109, -13
  br label %block_40f3e7

block_40f489:                                     ; preds = %block_40f656, %block_40f461
  %1900 = phi i64 [ %2288, %block_40f461 ], [ %2367, %block_40f656 ]
  %1901 = phi i64 [ %2282, %block_40f461 ], [ %2361, %block_40f656 ]
  %1902 = phi %struct.Memory* [ %97, %block_40f461 ], [ %2359, %block_40f656 ]
  %1903 = add i64 %1901, -120
  %1904 = inttoptr i64 %1903 to i32*
  %1905 = load i32, i32* %1904
  %1906 = add i32 %1905, -3
  %1907 = lshr i32 %1906, 31
  %1908 = trunc i32 %1907 to i8
  %1909 = lshr i32 %1905, 31
  %1910 = xor i32 %1907, %1909
  %1911 = add nuw nsw i32 %1910, %1909
  %1912 = icmp eq i32 %1911, 2
  %1913 = icmp ne i8 %1908, 0
  %1914 = xor i1 %1913, %1912
  %1915 = select i1 %1914, i64 10, i64 480
  %1916 = add i64 %1900, %1915
  br i1 %1914, label %block_40f493, label %block_40f669

block_410199:                                     ; preds = %block_41018f
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %14, align 8, !tbaa !1240
  %1917 = add i64 %2038, -116
  %1918 = inttoptr i64 %1917 to i32*
  %1919 = load i32, i32* %1918
  %1920 = sext i32 %1919 to i64
  %1921 = shl nsw i64 %1920, 5
  %1922 = add i64 %1921, ptrtoint (%local_corner_type* @local_corner to i64)
  %1923 = add i64 %2038, -4
  %1924 = inttoptr i64 %1923 to i32*
  %1925 = load i32, i32* %1924
  %1926 = sext i32 %1925 to i64
  store i64 %1926, i64* %15, align 8, !tbaa !1240
  %1927 = shl nsw i64 %1926, 2
  %1928 = add i64 %1927, %1922
  %1929 = inttoptr i64 %1928 to i32*
  %1930 = load i32, i32* %1929
  %1931 = sext i32 %1930 to i64
  %1932 = shl nsw i64 %1931, 2
  %1933 = add i64 %1932, ptrtoint (%oplc_type* @oplc to i64)
  %1934 = inttoptr i64 %1933 to i32*
  %1935 = load i32, i32* %1934
  %1936 = add i64 %2038, -168
  %1937 = inttoptr i64 %1936 to i32*
  store i32 %1935, i32* %1937
  %1938 = load i64, i64* %17, align 8
  %1939 = add i64 %1938, -168
  %1940 = inttoptr i64 %1939 to i32*
  %1941 = load i32, i32* %1940
  %1942 = sext i32 %1941 to i64
  %1943 = shl nsw i64 %1942, 3
  %1944 = add i64 %1943, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %1945 = inttoptr i64 %1944 to i32*
  %1946 = load i32, i32* %1945
  %1947 = add i64 %1938, -128
  %1948 = inttoptr i64 %1947 to i32*
  store i32 %1946, i32* %1948
  %1949 = inttoptr i64 %1939 to i32*
  %1950 = load i32, i32* %1949
  %1951 = sext i32 %1950 to i64
  %1952 = shl nsw i64 %1951, 3
  %1953 = add i64 %1952, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %1954 = inttoptr i64 %1953 to i32*
  %1955 = load i32, i32* %1954
  %1956 = add i64 %1938, -132
  %1957 = inttoptr i64 %1956 to i32*
  store i32 %1955, i32* %1957
  %1958 = add i64 %1938, -100
  %1959 = inttoptr i64 %1958 to i32*
  %1960 = load i32, i32* %1959
  %1961 = sext i32 %1960 to i64
  %1962 = mul nsw i64 %1961, 96
  %1963 = load i64, i64* %14, align 8
  %1964 = add i64 %1962, %1963
  %1965 = load i64, i64* %17, align 8
  %1966 = add i64 %1965, -116
  %1967 = inttoptr i64 %1966 to i32*
  %1968 = load i32, i32* %1967
  %1969 = sext i32 %1968 to i64
  %1970 = shl nsw i64 %1969, 4
  %1971 = add i64 %1970, %1964
  %1972 = add i64 %1965, -132
  %1973 = inttoptr i64 %1972 to i32*
  %1974 = load i32, i32* %1973
  %1975 = sext i32 %1974 to i64
  %1976 = shl nsw i64 %1975, 3
  %1977 = add i64 %1976, %1971
  %1978 = load i64, i64* %17, align 8
  %1979 = add i64 %1978, -128
  %1980 = inttoptr i64 %1979 to i32*
  %1981 = load i32, i32* %1980
  %1982 = sext i32 %1981 to i64
  %1983 = shl nsw i64 %1982, 2
  %1984 = add i64 %1983, %1977
  %1985 = inttoptr i64 %1984 to i32*
  %1986 = load i32, i32* %1985
  %1987 = add i64 %1978, -124
  %1988 = inttoptr i64 %1987 to i32*
  store i32 %1986, i32* %1988
  %1989 = add i64 %1978, -116
  %1990 = inttoptr i64 %1989 to i32*
  %1991 = load i32, i32* %1990
  %1992 = sext i32 %1991 to i64
  %1993 = shl nsw i64 %1992, 4
  %1994 = load i64, i64* %13, align 8
  %1995 = add i64 %1993, %1994
  %1996 = add i64 %1978, -168
  %1997 = inttoptr i64 %1996 to i32*
  %1998 = load i32, i32* %1997
  %1999 = sext i32 %1998 to i64
  %2000 = shl nsw i64 %1999, 2
  %2001 = add i64 %2000, %1995
  %2002 = inttoptr i64 %2001 to i32*
  %2003 = load i32, i32* %2002
  %2004 = zext i32 %2003 to i64
  store i64 %2004, i64* %62, align 8, !tbaa !1240
  %2005 = add i64 %1978, -172
  %2006 = inttoptr i64 %2005 to i32*
  store i32 %2003, i32* %2006
  %2007 = load i64, i64* %17, align 8
  %2008 = add i64 %2007, -124
  %2009 = inttoptr i64 %2008 to i32*
  %2010 = load i32, i32* %2009
  %2011 = add i32 %2010, 1
  %2012 = icmp eq i32 %2011, 0
  %2013 = select i1 %2012, i64 182, i64 329
  %2014 = add i64 %2045, %2013
  br i1 %2012, label %block_41024f, label %block_4102ec

block_410482:                                     ; preds = %block_410444
  %2015 = load i64, i64* %17, align 8
  %2016 = add i64 %2015, -124
  %2017 = inttoptr i64 %2016 to i32*
  %2018 = load i32, i32* %2017
  %2019 = add i64 %2015, -172
  %2020 = inttoptr i64 %2019 to i32*
  %2021 = load i32, i32* %2020
  %2022 = sext i32 %2021 to i64
  %2023 = shl nsw i64 %2022, 2
  %2024 = add i64 %2015, -80
  %2025 = add i64 %2024, %2023
  %2026 = inttoptr i64 %2025 to i32*
  store i32 %2018, i32* %2026
  %2027 = inttoptr i64 %2016 to i32*
  %2028 = load i32, i32* %2027
  %2029 = zext i32 %2028 to i64
  store i64 %2029, i64* %13, align 8, !tbaa !1240
  %2030 = inttoptr i64 %2019 to i32*
  %2031 = load i32, i32* %2030
  %2032 = sext i32 %2031 to i64
  store i64 %2032, i64* %14, align 8, !tbaa !1240
  %2033 = shl nsw i64 %2032, 2
  %2034 = add i64 %2015, -48
  %2035 = add i64 %2034, %2033
  %2036 = add i64 %3124, 28
  %2037 = inttoptr i64 %2035 to i32*
  store i32 %2028, i32* %2037
  br label %block_410516.sink.split

block_41018f:                                     ; preds = %block_40ff71
  %2038 = load i64, i64* %17, align 8
  %2039 = add i64 %2038, -100
  %2040 = inttoptr i64 %2039 to i32*
  %2041 = load i32, i32* %2040
  %2042 = add i32 %2041, 1
  %2043 = icmp eq i32 %2042, 0
  %2044 = select i1 %2043, i64 454, i64 10
  %2045 = add i64 %460, %2044
  br i1 %2043, label %block_410355, label %block_410199

block_40f680:                                     ; preds = %block_40f673
  %2046 = add i64 %2172, -176
  %2047 = inttoptr i64 %2046 to i32*
  store i32 0, i32* %2047
  %2048 = inttoptr i64 %2174 to i32*
  %2049 = load i32, i32* %2048
  %2050 = icmp eq i32 %2049, 0
  %2051 = select i1 %2050, i64 23, i64 38
  %2052 = add i64 %2187, %2051
  br i1 %2050, label %block_40f697, label %block_40f6a6

block_41027e:                                     ; preds = %block_41024f
  %2053 = zext i32 %2391 to i64
  store i64 %2053, i64* %62, align 8, !tbaa !1240
  %2054 = add i64 %2387, -116
  %2055 = inttoptr i64 %2054 to i32*
  %2056 = load i32, i32* %2055
  %2057 = sext i32 %2056 to i64
  %2058 = shl nsw i64 %2057, 2
  %2059 = add i64 %2058, ptrtoint (%jjface_type* @jjface to i64)
  %2060 = inttoptr i64 %2059 to i32*
  %2061 = load i32, i32* %2060
  %2062 = sext i32 %2061 to i64
  %2063 = shl nsw i64 %2062, 4
  %2064 = add i64 %2063, ptrtoint (%c_f_type* @c_f to i64)
  %2065 = add i64 %2387, -168
  %2066 = inttoptr i64 %2065 to i32*
  %2067 = load i32, i32* %2066
  %2068 = sext i32 %2067 to i64
  %2069 = shl nsw i64 %2068, 2
  %2070 = add i64 %2069, %2064
  %2071 = inttoptr i64 %2070 to i32*
  %2072 = load i32, i32* %2071
  %2073 = zext i32 %2072 to i64
  store i64 %2073, i64* %15, align 8, !tbaa !1240
  %2074 = add i64 %2387, -8
  %2075 = inttoptr i64 %2074 to i32*
  %2076 = load i32, i32* %2075
  %2077 = zext i32 %2076 to i64
  store i64 %2077, i64* %61, align 8, !tbaa !1240
  %2078 = add i64 %2387, -4
  %2079 = inttoptr i64 %2078 to i32*
  %2080 = load i32, i32* %2079
  %2081 = zext i32 %2080 to i64
  store i64 %2081, i64* %14, align 8, !tbaa !1240
  %2082 = add i64 %2395, 5138
  %2083 = add i64 %2395, 53
  %2084 = load i64, i64* %16, align 8, !tbaa !1240
  %2085 = add i64 %2084, -8
  %2086 = inttoptr i64 %2085 to i64*
  store i64 %2083, i64* %2086
  store i64 %2085, i64* %16, align 8, !tbaa !1240
  %2087 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %2082, %struct.Memory* %2173)
  %2088 = load i32, i32* %7, align 4
  %2089 = load i64, i64* %3, align 8
  %2090 = icmp eq i32 %2088, 0
  %2091 = select i1 %2090, i64 37, i64 9
  %2092 = add i64 %2089, %2091
  br i1 %2090, label %block_410350.sink.split, label %block_4102bc

block_41067c:                                     ; preds = %block_410672
  store i64 4, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %2093 = add i64 %2222, -12
  %2094 = inttoptr i64 %2093 to i32*
  %2095 = load i32, i32* %2094
  %2096 = add i64 %2222, -36
  %2097 = inttoptr i64 %2096 to i32*
  %2098 = load i32, i32* %2097
  %2099 = sext i32 %2098 to i64
  %2100 = mul nsw i64 %2099, 2400
  %2101 = add i64 %2100, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 580)
  %2102 = inttoptr i64 %2101 to i32*
  store i32 %2095, i32* %2102
  %2103 = inttoptr i64 %2093 to i32*
  %2104 = load i32, i32* %2103
  %2105 = inttoptr i64 %2096 to i32*
  %2106 = load i32, i32* %2105
  %2107 = sext i32 %2106 to i64
  %2108 = mul nsw i64 %2107, 2400
  %2109 = load i64, i64* %13, align 8
  %2110 = add i64 %2108, %2109
  %2111 = add i64 %2110, 1380
  %2112 = inttoptr i64 %2111 to i32*
  store i32 %2104, i32* %2112
  %2113 = load i64, i64* %17, align 8
  %2114 = add i64 %2113, -12
  %2115 = inttoptr i64 %2114 to i32*
  %2116 = load i32, i32* %2115
  %2117 = add i64 %2113, -36
  %2118 = inttoptr i64 %2117 to i32*
  %2119 = load i32, i32* %2118
  %2120 = sext i32 %2119 to i64
  %2121 = mul nsw i64 %2120, 2400
  %2122 = add i64 %2121, %2109
  %2123 = add i64 %2122, 1600
  %2124 = inttoptr i64 %2123 to i32*
  store i32 %2116, i32* %2124
  %2125 = inttoptr i64 %2117 to i32*
  %2126 = load i32, i32* %2125
  %2127 = zext i32 %2126 to i64
  store i64 %2127, i64* %62, align 8, !tbaa !1240
  %2128 = inttoptr i64 %2114 to i32*
  %2129 = load i32, i32* %2128
  %2130 = zext i32 %2129 to i64
  store i64 %2130, i64* %15, align 8, !tbaa !1240
  %2131 = add i64 %2230, 5268
  %2132 = add i64 %2230, 101
  %2133 = load i64, i64* %16, align 8, !tbaa !1240
  %2134 = add i64 %2133, -8
  %2135 = inttoptr i64 %2134 to i64*
  store i64 %2132, i64* %2135
  store i64 %2134, i64* %16, align 8, !tbaa !1240
  %2136 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %2131, %struct.Memory* %2223)
  %2137 = load i64, i64* %17, align 8
  %2138 = load i64, i64* %3, align 8
  br label %block_4106e1

block_40f9f1:                                     ; preds = %block_40f9a0
  %2139 = load i64, i64* %17, align 8
  %2140 = add i64 %2139, -124
  %2141 = inttoptr i64 %2140 to i32*
  %2142 = load i32, i32* %2141
  %2143 = add i64 %2139, -172
  %2144 = inttoptr i64 %2143 to i32*
  %2145 = load i32, i32* %2144
  %2146 = sext i32 %2145 to i64
  %2147 = shl nsw i64 %2146, 2
  %2148 = add i64 %2139, -48
  %2149 = add i64 %2148, %2147
  %2150 = inttoptr i64 %2149 to i32*
  store i32 %2142, i32* %2150
  %2151 = inttoptr i64 %2140 to i32*
  %2152 = load i32, i32* %2151
  %2153 = inttoptr i64 %2143 to i32*
  %2154 = load i32, i32* %2153
  %2155 = sext i32 %2154 to i64
  %2156 = shl nsw i64 %2155, 2
  %2157 = add i64 %2139, -80
  %2158 = add i64 %2157, %2156
  %2159 = inttoptr i64 %2158 to i32*
  store i32 %2152, i32* %2159
  %2160 = inttoptr i64 %2140 to i32*
  %2161 = load i32, i32* %2160
  %2162 = add i64 %2139, -120
  %2163 = inttoptr i64 %2162 to i32*
  %2164 = load i32, i32* %2163
  %2165 = sext i32 %2164 to i64
  %2166 = shl nsw i64 %2165, 2
  %2167 = add i64 %2139, -104
  %2168 = add i64 %2167, %2166
  %2169 = add i64 %268, 39
  %2170 = inttoptr i64 %2168 to i32*
  store i32 %2161, i32* %2170
  br label %block_40fa18

block_40f673:                                     ; preds = %block_40f669, %block_40ff58
  %2171 = phi i64 [ %2232, %block_40f669 ], [ %765, %block_40ff58 ]
  %2172 = phi i64 [ %1901, %block_40f669 ], [ %757, %block_40ff58 ]
  %2173 = phi %struct.Memory* [ %1902, %block_40f669 ], [ %759, %block_40ff58 ]
  %2174 = add i64 %2172, -160
  %2175 = inttoptr i64 %2174 to i32*
  %2176 = load i32, i32* %2175
  %2177 = add i32 %2176, -3
  %2178 = lshr i32 %2177, 31
  %2179 = trunc i32 %2178 to i8
  %2180 = lshr i32 %2176, 31
  %2181 = xor i32 %2178, %2180
  %2182 = add nuw nsw i32 %2181, %2180
  %2183 = icmp eq i32 %2182, 2
  %2184 = icmp ne i8 %2179, 0
  %2185 = xor i1 %2184, %2183
  %2186 = select i1 %2185, i64 13, i64 2302
  %2187 = add i64 %2171, %2186
  br i1 %2185, label %block_40f680, label %block_40ff71

block_40f626:                                     ; preds = %block_40f604
  %2188 = load i64, i64* %17, align 8
  %2189 = add i64 %2188, -124
  %2190 = inttoptr i64 %2189 to i32*
  %2191 = load i32, i32* %2190
  %2192 = add i64 %2188, -120
  %2193 = inttoptr i64 %2192 to i32*
  %2194 = load i32, i32* %2193
  %2195 = sext i32 %2194 to i64
  %2196 = shl nsw i64 %2195, 2
  %2197 = add i64 %2188, -156
  %2198 = add i64 %2197, %2196
  %2199 = inttoptr i64 %2198 to i32*
  %2200 = load i32, i32* %2199
  %2201 = sext i32 %2200 to i64
  %2202 = shl nsw i64 %2201, 2
  %2203 = add i64 %2188, -80
  %2204 = add i64 %2203, %2202
  %2205 = inttoptr i64 %2204 to i32*
  store i32 %2191, i32* %2205
  %2206 = inttoptr i64 %2189 to i32*
  %2207 = load i32, i32* %2206
  %2208 = inttoptr i64 %2192 to i32*
  %2209 = load i32, i32* %2208
  %2210 = sext i32 %2209 to i64
  %2211 = shl nsw i64 %2210, 2
  %2212 = add i64 %2197, %2211
  %2213 = inttoptr i64 %2212 to i32*
  %2214 = load i32, i32* %2213
  %2215 = sext i32 %2214 to i64
  %2216 = shl nsw i64 %2215, 2
  %2217 = add i64 %2188, -48
  %2218 = add i64 %2217, %2216
  %2219 = add i64 %3080, 38
  %2220 = inttoptr i64 %2218 to i32*
  store i32 %2207, i32* %2220
  br label %block_40f656.sink.split

block_410672:                                     ; preds = %block_410603, %block_41060d
  %2221 = phi i64 [ %3137, %block_410603 ], [ %2352, %block_41060d ]
  %2222 = phi i64 [ %3129, %block_410603 ], [ %2351, %block_41060d ]
  %2223 = phi %struct.Memory* [ %3130, %block_410603 ], [ %2350, %block_41060d ]
  %2224 = add i64 %2222, -68
  %2225 = inttoptr i64 %2224 to i32*
  %2226 = load i32, i32* %2225
  %2227 = add i32 %2226, 1
  %2228 = icmp eq i32 %2227, 0
  %2229 = select i1 %2228, i64 111, i64 10
  %2230 = add i64 %2221, %2229
  br i1 %2228, label %block_4106e1, label %block_41067c

block_40f669:                                     ; preds = %block_40f489
  %2231 = add i64 %1901, -160
  %2232 = add i64 %1916, 10
  %2233 = inttoptr i64 %2231 to i32*
  store i32 0, i32* %2233
  br label %block_40f673

block_40fbf2:                                     ; preds = %block_40fb99
  %2234 = load i64, i64* %17, align 8
  %2235 = add i64 %2234, -124
  %2236 = inttoptr i64 %2235 to i32*
  %2237 = load i32, i32* %2236
  %2238 = add i64 %2234, -172
  %2239 = inttoptr i64 %2238 to i32*
  %2240 = load i32, i32* %2239
  %2241 = sext i32 %2240 to i64
  %2242 = shl nsw i64 %2241, 2
  %2243 = add i64 %2234, -48
  %2244 = add i64 %2243, %2242
  %2245 = inttoptr i64 %2244 to i32*
  store i32 %2237, i32* %2245
  %2246 = inttoptr i64 %2235 to i32*
  %2247 = load i32, i32* %2246
  %2248 = inttoptr i64 %2238 to i32*
  %2249 = load i32, i32* %2248
  %2250 = sext i32 %2249 to i64
  %2251 = shl nsw i64 %2250, 2
  %2252 = add i64 %2234, -80
  %2253 = add i64 %2252, %2251
  %2254 = inttoptr i64 %2253 to i32*
  store i32 %2247, i32* %2254
  %2255 = inttoptr i64 %2235 to i32*
  %2256 = load i32, i32* %2255
  %2257 = add i64 %2234, -160
  %2258 = inttoptr i64 %2257 to i32*
  %2259 = load i32, i32* %2258
  %2260 = sext i32 %2259 to i64
  %2261 = shl nsw i64 %2260, 2
  %2262 = add i64 %2234, -104
  %2263 = add i64 %2262, %2261
  %2264 = add i64 %632, 42
  %2265 = inttoptr i64 %2263 to i32*
  store i32 %2256, i32* %2265
  br label %block_40fc1c

block_40f461:                                     ; preds = %block_40f3e7
  %2266 = inttoptr i64 %32 to i32*
  %2267 = load i32, i32* %2266
  %2268 = inttoptr i64 %29 to i32*
  %2269 = load i32, i32* %2268
  %2270 = sub i32 7, %2269
  %2271 = sext i32 %2270 to i64
  %2272 = shl nsw i64 %2271, 2
  %2273 = add nsw i64 %2272, -48
  %2274 = add i64 %2273, %20
  %2275 = inttoptr i64 %2274 to i32*
  store i32 %2267, i32* %2275
  %2276 = inttoptr i64 %32 to i32*
  %2277 = load i32, i32* %2276
  %2278 = inttoptr i64 %29 to i32*
  %2279 = load i32, i32* %2278
  %2280 = sub i32 7, %2279
  %2281 = sext i32 %2280 to i64
  %2282 = load i64, i64* %17, align 8
  %2283 = shl nsw i64 %2281, 2
  %2284 = add nsw i64 %2283, -80
  %2285 = add i64 %2284, %2282
  %2286 = inttoptr i64 %2285 to i32*
  store i32 %2277, i32* %2286
  %2287 = add i64 %2282, -120
  %2288 = add i64 %109, 40
  %2289 = inttoptr i64 %2287 to i32*
  store i32 0, i32* %2289
  br label %block_40f489

block_40fcc2:                                     ; preds = %block_40f80d
  %2290 = add i64 %3031, ptrtoint (%face_l2_type* @face_l2 to i64)
  %2291 = inttoptr i64 %2290 to i32*
  %2292 = load i32, i32* %2291
  %2293 = sext i32 %2292 to i64
  %2294 = shl nsw i64 %2293, 2
  %2295 = add i64 %3037, %2294
  %2296 = inttoptr i64 %2295 to i32*
  %2297 = load i32, i32* %2296
  %2298 = sext i32 %2297 to i64
  %2299 = shl nsw i64 %2298, 2
  %2300 = add i64 %3043, %2299
  %2301 = inttoptr i64 %2300 to i32*
  %2302 = load i32, i32* %2301
  %2303 = add i32 %2302, 1
  %2304 = icmp eq i32 %2303, 0
  %2305 = select i1 %2304, i64 647, i64 34
  %2306 = add i64 %3050, %2305
  br i1 %2304, label %block_40ff4e, label %block_40fce4

block_41060d:                                     ; preds = %block_410603
  store i64 5, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %2307 = add i64 %3129, -12
  %2308 = inttoptr i64 %2307 to i32*
  %2309 = load i32, i32* %2308
  %2310 = add i64 %3129, -40
  %2311 = inttoptr i64 %2310 to i32*
  %2312 = load i32, i32* %2311
  %2313 = sext i32 %2312 to i64
  %2314 = mul nsw i64 %2313, 2400
  %2315 = add i64 %2314, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 180)
  %2316 = inttoptr i64 %2315 to i32*
  store i32 %2309, i32* %2316
  %2317 = inttoptr i64 %2307 to i32*
  %2318 = load i32, i32* %2317
  %2319 = inttoptr i64 %2310 to i32*
  %2320 = load i32, i32* %2319
  %2321 = sext i32 %2320 to i64
  %2322 = mul nsw i64 %2321, 2400
  %2323 = load i64, i64* %13, align 8
  %2324 = add i64 %2322, %2323
  %2325 = add i64 %2324, 1596
  %2326 = inttoptr i64 %2325 to i32*
  store i32 %2318, i32* %2326
  %2327 = load i64, i64* %17, align 8
  %2328 = add i64 %2327, -12
  %2329 = inttoptr i64 %2328 to i32*
  %2330 = load i32, i32* %2329
  %2331 = add i64 %2327, -40
  %2332 = inttoptr i64 %2331 to i32*
  %2333 = load i32, i32* %2332
  %2334 = sext i32 %2333 to i64
  %2335 = mul nsw i64 %2334, 2400
  %2336 = add i64 %2335, %2323
  %2337 = add i64 %2336, 1816
  %2338 = inttoptr i64 %2337 to i32*
  store i32 %2330, i32* %2338
  %2339 = inttoptr i64 %2331 to i32*
  %2340 = load i32, i32* %2339
  %2341 = zext i32 %2340 to i64
  store i64 %2341, i64* %62, align 8, !tbaa !1240
  %2342 = inttoptr i64 %2328 to i32*
  %2343 = load i32, i32* %2342
  %2344 = zext i32 %2343 to i64
  store i64 %2344, i64* %15, align 8, !tbaa !1240
  %2345 = add i64 %3137, 5379
  %2346 = add i64 %3137, 101
  %2347 = load i64, i64* %16, align 8, !tbaa !1240
  %2348 = add i64 %2347, -8
  %2349 = inttoptr i64 %2348 to i64*
  store i64 %2346, i64* %2349
  store i64 %2348, i64* %16, align 8, !tbaa !1240
  %2350 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %2345, %struct.Memory* %3130)
  %2351 = load i64, i64* %17, align 8
  %2352 = load i64, i64* %3, align 8
  br label %block_410672

block_40f656.sink.split:                          ; preds = %block_40f604, %block_40f626, %block_40f5dd, %block_40f5bb
  %2353 = phi i64 [ %183, %block_40f5bb ], [ %338, %block_40f5dd ], [ %3080, %block_40f604 ], [ %2219, %block_40f626 ]
  %2354 = phi i64 [ 97, %block_40f5bb ], [ 97, %block_40f5dd ], [ 5, %block_40f604 ], [ 5, %block_40f626 ]
  %2355 = phi %struct.Memory* [ %178, %block_40f5bb ], [ %178, %block_40f5dd ], [ %3075, %block_40f604 ], [ %3075, %block_40f626 ]
  %2356 = add i64 %2353, 5
  br label %block_40f656

block_40f656:                                     ; preds = %block_40f656.sink.split, %block_40f574
  %2357 = phi i64 [ %400, %block_40f574 ], [ %2356, %block_40f656.sink.split ]
  %2358 = phi i64 [ 97, %block_40f574 ], [ %2354, %block_40f656.sink.split ]
  %2359 = phi %struct.Memory* [ %1902, %block_40f574 ], [ %2355, %block_40f656.sink.split ]
  %2360 = add i64 %2357, %2358
  %2361 = load i64, i64* %17, align 8
  %2362 = add i64 %2361, -120
  %2363 = inttoptr i64 %2362 to i32*
  %2364 = load i32, i32* %2363
  %2365 = add i32 %2364, 1
  %2366 = inttoptr i64 %2362 to i32*
  store i32 %2365, i32* %2366
  %2367 = add i64 %2360, -461
  br label %block_40f489

block_40f740:                                     ; preds = %block_40f6e1, %block_40f6b3, %block_40f6d2, %block_40f736
  %2368 = phi i64 [ %3084, %block_40f6e1 ], [ %574, %block_40f736 ], [ %1574, %block_40f6b3 ], [ %1240, %block_40f6d2 ]
  %2369 = phi i64 [ 5, %block_40f6e1 ], [ 5, %block_40f736 ], [ 100, %block_40f6b3 ], [ 100, %block_40f6d2 ]
  %2370 = phi %struct.Memory* [ %2173, %block_40f6e1 ], [ %573, %block_40f736 ], [ %2173, %block_40f6b3 ], [ %2173, %block_40f6d2 ]
  %2371 = add i64 %2368, %2369
  br label %block_40f745

block_41024f:                                     ; preds = %block_410199
  %2372 = add i64 %2007, -100
  %2373 = inttoptr i64 %2372 to i32*
  %2374 = load i32, i32* %2373
  %2375 = sext i32 %2374 to i64
  %2376 = mul nsw i64 %2375, 96
  %2377 = add i64 %2376, ptrtoint (%sje_type* @sje to i64)
  %2378 = add i64 %2007, -116
  %2379 = inttoptr i64 %2378 to i32*
  %2380 = load i32, i32* %2379
  %2381 = sext i32 %2380 to i64
  %2382 = shl nsw i64 %2381, 4
  store i64 %2382, i64* %14, align 8, !tbaa !1240
  %2383 = add i64 %2382, %2377
  store i64 %2383, i64* %13, align 8, !tbaa !1240
  %2384 = inttoptr i64 %2383 to i32*
  %2385 = load i32, i32* %2384
  %2386 = zext i32 %2385 to i64
  store i64 %2386, i64* %61, align 8, !tbaa !1240
  %2387 = load i64, i64* %17, align 8
  %2388 = add i64 %2387, -124
  %2389 = inttoptr i64 %2388 to i32*
  store i32 %2385, i32* %2389
  %2390 = inttoptr i64 %2388 to i32*
  %2391 = load i32, i32* %2390
  %2392 = add i32 %2391, 1
  %2393 = icmp eq i32 %2392, 0
  %2394 = select i1 %2393, i64 142, i64 47
  %2395 = add i64 %2014, %2394
  br i1 %2393, label %block_410350, label %block_41027e

block_40f752:                                     ; preds = %block_40f745
  %2396 = inttoptr i64 %2174 to i32*
  %2397 = load i32, i32* %2396
  %2398 = sext i32 %2397 to i64
  %2399 = shl nsw i64 %2398, 2
  %2400 = add i64 %2172, -156
  %2401 = add i64 %2400, %2399
  %2402 = inttoptr i64 %2401 to i32*
  %2403 = load i32, i32* %2402
  %2404 = sext i32 %2403 to i64
  %2405 = shl nsw i64 %2404, 2
  %2406 = add i64 %2172, -80
  %2407 = add i64 %2406, %2405
  %2408 = inttoptr i64 %2407 to i32*
  %2409 = load i32, i32* %2408
  %2410 = add i32 %2409, 1
  %2411 = icmp eq i32 %2410, 0
  %2412 = select i1 %2411, i64 2049, i64 26
  %2413 = add i64 %571, %2412
  br i1 %2411, label %block_40ff53, label %block_40f76c

block_410834:                                     ; preds = %block_41082a
  store i64 0, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %2414 = add i64 %2520, -12
  %2415 = inttoptr i64 %2414 to i32*
  %2416 = load i32, i32* %2415
  %2417 = add i64 %2520, -20
  %2418 = inttoptr i64 %2417 to i32*
  %2419 = load i32, i32* %2418
  %2420 = sext i32 %2419 to i64
  %2421 = mul nsw i64 %2420, 2400
  %2422 = add i64 %2421, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 400)
  %2423 = inttoptr i64 %2422 to i32*
  store i32 %2416, i32* %2423
  %2424 = load i64, i64* %17, align 8
  %2425 = add i64 %2424, -12
  %2426 = inttoptr i64 %2425 to i32*
  %2427 = load i32, i32* %2426
  %2428 = add i64 %2424, -20
  %2429 = inttoptr i64 %2428 to i32*
  %2430 = load i32, i32* %2429
  %2431 = sext i32 %2430 to i64
  %2432 = mul nsw i64 %2431, 2400
  %2433 = load i64, i64* %13, align 8
  %2434 = add i64 %2432, %2433
  %2435 = add i64 %2434, 1200
  %2436 = inttoptr i64 %2435 to i32*
  store i32 %2427, i32* %2436
  %2437 = inttoptr i64 %2425 to i32*
  %2438 = load i32, i32* %2437
  %2439 = inttoptr i64 %2428 to i32*
  %2440 = load i32, i32* %2439
  %2441 = sext i32 %2440 to i64
  %2442 = mul nsw i64 %2441, 2400
  %2443 = add i64 %2442, %2433
  %2444 = add i64 %2443, 2000
  %2445 = inttoptr i64 %2444 to i32*
  store i32 %2438, i32* %2445
  %2446 = load i64, i64* %17, align 8
  %2447 = add i64 %2446, -20
  %2448 = inttoptr i64 %2447 to i32*
  %2449 = load i32, i32* %2448
  %2450 = zext i32 %2449 to i64
  store i64 %2450, i64* %62, align 8, !tbaa !1240
  %2451 = add i64 %2446, -12
  %2452 = inttoptr i64 %2451 to i32*
  %2453 = load i32, i32* %2452
  %2454 = zext i32 %2453 to i64
  store i64 %2454, i64* %15, align 8, !tbaa !1240
  %2455 = add i64 %2528, 4828
  %2456 = add i64 %2528, 98
  %2457 = load i64, i64* %16, align 8, !tbaa !1240
  %2458 = add i64 %2457, -8
  %2459 = inttoptr i64 %2458 to i64*
  store i64 %2456, i64* %2459
  store i64 %2458, i64* %16, align 8, !tbaa !1240
  %2460 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %2455, %struct.Memory* %2521)
  br label %block_410896

block_40fc30:                                     ; preds = %block_40fa5d
  %2461 = zext i32 %2801 to i64
  store i64 %2461, i64* %62, align 8, !tbaa !1240
  %2462 = add i64 %2788, -120
  %2463 = inttoptr i64 %2462 to i32*
  %2464 = load i32, i32* %2463
  %2465 = sext i32 %2464 to i64
  %2466 = shl nsw i64 %2465, 2
  %2467 = add i64 %2788, -116
  %2468 = add i64 %2467, %2466
  %2469 = inttoptr i64 %2468 to i32*
  %2470 = load i32, i32* %2469
  %2471 = sext i32 %2470 to i64
  %2472 = shl nsw i64 %2471, 2
  %2473 = add i64 %2472, ptrtoint (%jjface_type* @jjface to i64)
  %2474 = inttoptr i64 %2473 to i32*
  %2475 = load i32, i32* %2474
  %2476 = sext i32 %2475 to i64
  %2477 = shl nsw i64 %2476, 4
  %2478 = add i64 %2477, ptrtoint (%c_f_type* @c_f to i64)
  %2479 = add i64 %2788, -168
  %2480 = inttoptr i64 %2479 to i32*
  %2481 = load i32, i32* %2480
  %2482 = sext i32 %2481 to i64
  %2483 = shl nsw i64 %2482, 2
  %2484 = add i64 %2483, %2478
  %2485 = inttoptr i64 %2484 to i32*
  %2486 = load i32, i32* %2485
  %2487 = zext i32 %2486 to i64
  store i64 %2487, i64* %15, align 8, !tbaa !1240
  %2488 = add i64 %2788, -164
  %2489 = inttoptr i64 %2488 to i32*
  %2490 = load i32, i32* %2489
  %2491 = zext i32 %2490 to i64
  store i64 %2491, i64* %61, align 8, !tbaa !1240
  %2492 = load i64, i64* %17, align 8
  %2493 = add i64 %2492, -160
  %2494 = inttoptr i64 %2493 to i32*
  %2495 = load i32, i32* %2494
  %2496 = sext i32 %2495 to i64
  %2497 = shl nsw i64 %2496, 2
  %2498 = add i64 %2497, ptrtoint (%face_l1_type* @face_l1 to i64)
  %2499 = inttoptr i64 %2498 to i32*
  %2500 = load i32, i32* %2499
  %2501 = sext i32 %2500 to i64
  %2502 = shl nsw i64 %2501, 2
  %2503 = add i64 %2492, -144
  %2504 = add i64 %2503, %2502
  %2505 = inttoptr i64 %2504 to i32*
  %2506 = load i32, i32* %2505
  %2507 = zext i32 %2506 to i64
  store i64 %2507, i64* %14, align 8, !tbaa !1240
  %2508 = add i64 %2805, 6762
  %2509 = add i64 %2805, 90
  %2510 = load i64, i64* %16, align 8, !tbaa !1240
  %2511 = add i64 %2510, -8
  %2512 = inttoptr i64 %2511 to i64*
  store i64 %2509, i64* %2512
  store i64 %2511, i64* %16, align 8, !tbaa !1240
  %2513 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %2508, %struct.Memory* %45)
  %2514 = load i32, i32* %7, align 4
  %2515 = load i64, i64* %3, align 8
  %2516 = icmp eq i32 %2514, 0
  %2517 = select i1 %2516, i64 51, i64 9
  %2518 = add i64 %2515, %2517
  br i1 %2516, label %block_40fcb3, label %block_40fc89

block_41082a:                                     ; preds = %block_4107c9, %block_4107bf
  %2519 = phi i64 [ %154, %block_4107bf ], [ %2881, %block_4107c9 ]
  %2520 = phi i64 [ %146, %block_4107bf ], [ %2880, %block_4107c9 ]
  %2521 = phi %struct.Memory* [ %147, %block_4107bf ], [ %2879, %block_4107c9 ]
  %2522 = add i64 %2520, -52
  %2523 = inttoptr i64 %2522 to i32*
  %2524 = load i32, i32* %2523
  %2525 = add i32 %2524, 1
  %2526 = icmp eq i32 %2525, 0
  %2527 = select i1 %2526, i64 108, i64 10
  %2528 = add i64 %2519, %2527
  br i1 %2526, label %block_410896, label %block_410834

block_410089:                                     ; preds = %block_40ffd3
  %2529 = add i64 %1321, -104
  %2530 = inttoptr i64 %2529 to i32*
  %2531 = load i32, i32* %2530
  %2532 = sext i32 %2531 to i64
  %2533 = mul nsw i64 %2532, 96
  %2534 = add i64 %2533, ptrtoint (%sje_type* @sje to i64)
  %2535 = add i64 %1321, -108
  %2536 = inttoptr i64 %2535 to i32*
  %2537 = load i32, i32* %2536
  %2538 = sext i32 %2537 to i64
  %2539 = shl nsw i64 %2538, 4
  store i64 %2539, i64* %14, align 8, !tbaa !1240
  %2540 = add i64 %2539, %2534
  store i64 %2540, i64* %13, align 8, !tbaa !1240
  %2541 = inttoptr i64 %2540 to i32*
  %2542 = load i32, i32* %2541
  %2543 = zext i32 %2542 to i64
  store i64 %2543, i64* %61, align 8, !tbaa !1240
  %2544 = load i64, i64* %17, align 8
  %2545 = add i64 %2544, -124
  %2546 = inttoptr i64 %2545 to i32*
  store i32 %2542, i32* %2546
  %2547 = inttoptr i64 %2545 to i32*
  %2548 = load i32, i32* %2547
  %2549 = add i32 %2548, 1
  %2550 = icmp eq i32 %2549, 0
  %2551 = select i1 %2550, i64 142, i64 47
  %2552 = add i64 %1339, %2551
  br i1 %2550, label %block_410525, label %block_4100b8

block_40fa22:                                     ; preds = %block_40fa18, %block_40f8dd, %block_40f996, %block_40f98c
  %2553 = phi i64 [ %2811, %block_40fa18 ], [ %479, %block_40f996 ], [ %1239, %block_40f8dd ], [ %352, %block_40f98c ]
  %2554 = phi i64 [ 5, %block_40fa18 ], [ 5, %block_40f996 ], [ 145, %block_40f8dd ], [ 145, %block_40f98c ]
  %2555 = phi %struct.Memory* [ %2810, %block_40fa18 ], [ %45, %block_40f996 ], [ %45, %block_40f8dd ], [ %351, %block_40f98c ]
  %2556 = add i64 %2553, %2554
  %2557 = load i64, i64* %17, align 8
  %2558 = add i64 %2557, -160
  %2559 = inttoptr i64 %2558 to i32*
  %2560 = load i32, i32* %2559
  %2561 = sext i32 %2560 to i64
  store i64 %2561, i64* %13, align 8, !tbaa !1240
  %2562 = shl nsw i64 %2561, 2
  %2563 = add i64 %2562, ptrtoint (%face_ld_type* @face_ld to i64)
  %2564 = inttoptr i64 %2563 to i32*
  %2565 = load i32, i32* %2564
  %2566 = add i64 %2557, -120
  %2567 = inttoptr i64 %2566 to i32*
  %2568 = load i32, i32* %2567
  %2569 = add i32 %2568, %2565
  %2570 = inttoptr i64 %2566 to i32*
  store i32 %2569, i32* %2570
  %2571 = add i64 %2556, -652
  br label %block_40f796

block_40fe20:                                     ; preds = %block_40fde9
  %2572 = zext i32 %91 to i64
  store i64 %2572, i64* %62, align 8, !tbaa !1240
  %2573 = add i64 %87, -120
  %2574 = inttoptr i64 %2573 to i32*
  %2575 = load i32, i32* %2574
  %2576 = sext i32 %2575 to i64
  %2577 = shl nsw i64 %2576, 2
  %2578 = add i64 %87, -116
  %2579 = add i64 %2578, %2577
  %2580 = inttoptr i64 %2579 to i32*
  %2581 = load i32, i32* %2580
  %2582 = sext i32 %2581 to i64
  %2583 = shl nsw i64 %2582, 2
  %2584 = add i64 %2583, ptrtoint (%jjface_type* @jjface to i64)
  %2585 = inttoptr i64 %2584 to i32*
  %2586 = load i32, i32* %2585
  %2587 = sext i32 %2586 to i64
  %2588 = shl nsw i64 %2587, 4
  %2589 = add i64 %2588, ptrtoint (%c_f_type* @c_f to i64)
  %2590 = add i64 %87, -168
  %2591 = inttoptr i64 %2590 to i32*
  %2592 = load i32, i32* %2591
  %2593 = sext i32 %2592 to i64
  %2594 = shl nsw i64 %2593, 2
  %2595 = add i64 %2594, %2589
  %2596 = inttoptr i64 %2595 to i32*
  %2597 = load i32, i32* %2596
  %2598 = zext i32 %2597 to i64
  store i64 %2598, i64* %15, align 8, !tbaa !1240
  %2599 = add i64 %87, -164
  %2600 = inttoptr i64 %2599 to i32*
  %2601 = load i32, i32* %2600
  %2602 = zext i32 %2601 to i64
  store i64 %2602, i64* %61, align 8, !tbaa !1240
  %2603 = load i64, i64* %17, align 8
  %2604 = add i64 %2603, -160
  %2605 = inttoptr i64 %2604 to i32*
  %2606 = load i32, i32* %2605
  %2607 = sext i32 %2606 to i64
  %2608 = shl nsw i64 %2607, 2
  %2609 = add i64 %2608, ptrtoint (%face_l2_type* @face_l2 to i64)
  %2610 = inttoptr i64 %2609 to i32*
  %2611 = load i32, i32* %2610
  %2612 = sext i32 %2611 to i64
  %2613 = shl nsw i64 %2612, 2
  %2614 = add i64 %2603, -144
  %2615 = add i64 %2614, %2613
  %2616 = inttoptr i64 %2615 to i32*
  %2617 = load i32, i32* %2616
  %2618 = zext i32 %2617 to i64
  store i64 %2618, i64* %14, align 8, !tbaa !1240
  %2619 = add i64 %95, 6256
  %2620 = add i64 %95, 80
  %2621 = load i64, i64* %16, align 8, !tbaa !1240
  %2622 = add i64 %2621, -8
  %2623 = inttoptr i64 %2622 to i64*
  store i64 %2620, i64* %2623
  store i64 %2622, i64* %16, align 8, !tbaa !1240
  %2624 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %2619, %struct.Memory* %45)
  %2625 = load i32, i32* %7, align 4
  %2626 = load i64, i64* %3, align 8
  %2627 = icmp eq i32 %2625, 0
  %2628 = select i1 %2627, i64 51, i64 9
  %2629 = add i64 %2626, %2628
  br i1 %2627, label %block_40ff44.sink.split, label %block_40fe79

block_4106eb:                                     ; preds = %block_4106e1
  store i64 3, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %2630 = add i64 %554, -12
  %2631 = inttoptr i64 %2630 to i32*
  %2632 = load i32, i32* %2631
  %2633 = add i64 %554, -32
  %2634 = inttoptr i64 %2633 to i32*
  %2635 = load i32, i32* %2634
  %2636 = sext i32 %2635 to i64
  %2637 = mul nsw i64 %2636, 2400
  %2638 = add i64 %2637, add (i64 ptrtoint (%idmo_type* @idmo to i64), i64 216)
  %2639 = inttoptr i64 %2638 to i32*
  store i32 %2632, i32* %2639
  %2640 = inttoptr i64 %2630 to i32*
  %2641 = load i32, i32* %2640
  %2642 = inttoptr i64 %2633 to i32*
  %2643 = load i32, i32* %2642
  %2644 = sext i32 %2643 to i64
  %2645 = mul nsw i64 %2644, 2400
  %2646 = load i64, i64* %13, align 8
  %2647 = add i64 %2645, %2646
  %2648 = add i64 %2647, 1016
  %2649 = inttoptr i64 %2648 to i32*
  store i32 %2641, i32* %2649
  %2650 = load i64, i64* %17, align 8
  %2651 = add i64 %2650, -12
  %2652 = inttoptr i64 %2651 to i32*
  %2653 = load i32, i32* %2652
  %2654 = add i64 %2650, -32
  %2655 = inttoptr i64 %2654 to i32*
  %2656 = load i32, i32* %2655
  %2657 = sext i32 %2656 to i64
  %2658 = mul nsw i64 %2657, 2400
  %2659 = add i64 %2658, %2646
  %2660 = add i64 %2659, 2396
  %2661 = inttoptr i64 %2660 to i32*
  store i32 %2653, i32* %2661
  %2662 = inttoptr i64 %2654 to i32*
  %2663 = load i32, i32* %2662
  %2664 = zext i32 %2663 to i64
  store i64 %2664, i64* %62, align 8, !tbaa !1240
  %2665 = inttoptr i64 %2651 to i32*
  %2666 = load i32, i32* %2665
  %2667 = zext i32 %2666 to i64
  store i64 %2667, i64* %15, align 8, !tbaa !1240
  %2668 = add i64 %562, 5157
  %2669 = add i64 %562, 101
  %2670 = load i64, i64* %16, align 8, !tbaa !1240
  %2671 = add i64 %2670, -8
  %2672 = inttoptr i64 %2671 to i64*
  store i64 %2669, i64* %2672
  store i64 %2671, i64* %16, align 8, !tbaa !1240
  %2673 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %2668, %struct.Memory* %555)
  %2674 = load i64, i64* %17, align 8
  %2675 = load i64, i64* %3, align 8
  br label %block_410750

block_40fa5d:                                     ; preds = %block_40f80d
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %14, align 8, !tbaa !1240
  %2676 = add i64 %312, -164
  %2677 = inttoptr i64 %2676 to i32*
  store i32 %3046, i32* %2677
  %2678 = inttoptr i64 %314 to i32*
  %2679 = load i32, i32* %2678
  %2680 = sext i32 %2679 to i64
  %2681 = shl nsw i64 %2680, 2
  %2682 = add i64 %2681, ptrtoint (%face_l2_type* @face_l2 to i64)
  %2683 = inttoptr i64 %2682 to i32*
  %2684 = load i32, i32* %2683
  %2685 = add i64 %312, -120
  %2686 = inttoptr i64 %2685 to i32*
  store i32 %2684, i32* %2686
  %2687 = inttoptr i64 %2685 to i32*
  %2688 = load i32, i32* %2687
  %2689 = sext i32 %2688 to i64
  %2690 = shl nsw i64 %2689, 2
  %2691 = add i64 %312, -116
  %2692 = add i64 %2691, %2690
  %2693 = inttoptr i64 %2692 to i32*
  %2694 = load i32, i32* %2693
  %2695 = sext i32 %2694 to i64
  %2696 = shl nsw i64 %2695, 5
  %2697 = add i64 %2696, ptrtoint (%local_corner_type* @local_corner to i64)
  %2698 = load i64, i64* %17, align 8
  %2699 = add i64 %2698, -160
  %2700 = inttoptr i64 %2699 to i32*
  %2701 = load i32, i32* %2700
  %2702 = sext i32 %2701 to i64
  %2703 = shl nsw i64 %2702, 2
  %2704 = add i64 %2703, ptrtoint (%face_l1_type* @face_l1 to i64)
  %2705 = inttoptr i64 %2704 to i32*
  %2706 = load i32, i32* %2705
  %2707 = sext i32 %2706 to i64
  %2708 = shl nsw i64 %2707, 2
  %2709 = add i64 %2698, -144
  %2710 = add i64 %2709, %2708
  %2711 = inttoptr i64 %2710 to i32*
  %2712 = load i32, i32* %2711
  %2713 = sext i32 %2712 to i64
  %2714 = shl nsw i64 %2713, 2
  %2715 = add i64 %2714, %2697
  %2716 = inttoptr i64 %2715 to i32*
  %2717 = load i32, i32* %2716
  %2718 = add i64 %2698, -168
  %2719 = inttoptr i64 %2718 to i32*
  store i32 %2717, i32* %2719
  %2720 = add i64 %2698, -120
  %2721 = inttoptr i64 %2720 to i32*
  %2722 = load i32, i32* %2721
  %2723 = sext i32 %2722 to i64
  %2724 = shl nsw i64 %2723, 2
  %2725 = add i64 %2698, -116
  %2726 = add i64 %2725, %2724
  %2727 = inttoptr i64 %2726 to i32*
  %2728 = load i32, i32* %2727
  %2729 = sext i32 %2728 to i64
  %2730 = shl nsw i64 %2729, 4
  %2731 = load i64, i64* %14, align 8
  %2732 = add i64 %2730, %2731
  %2733 = load i64, i64* %17, align 8
  %2734 = add i64 %2733, -168
  %2735 = inttoptr i64 %2734 to i32*
  %2736 = load i32, i32* %2735
  %2737 = sext i32 %2736 to i64
  %2738 = shl nsw i64 %2737, 2
  %2739 = add i64 %2738, %2732
  %2740 = inttoptr i64 %2739 to i32*
  %2741 = load i32, i32* %2740
  %2742 = add i64 %2733, -172
  %2743 = inttoptr i64 %2742 to i32*
  store i32 %2741, i32* %2743
  %2744 = inttoptr i64 %2734 to i32*
  %2745 = load i32, i32* %2744
  %2746 = sext i32 %2745 to i64
  %2747 = shl nsw i64 %2746, 3
  %2748 = add i64 %2747, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %2749 = inttoptr i64 %2748 to i32*
  %2750 = load i32, i32* %2749
  %2751 = add i64 %2733, -128
  %2752 = inttoptr i64 %2751 to i32*
  store i32 %2750, i32* %2752
  %2753 = inttoptr i64 %2734 to i32*
  %2754 = load i32, i32* %2753
  %2755 = sext i32 %2754 to i64
  %2756 = shl nsw i64 %2755, 3
  %2757 = add i64 %2756, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %2758 = inttoptr i64 %2757 to i32*
  %2759 = load i32, i32* %2758
  %2760 = add i64 %2733, -132
  %2761 = inttoptr i64 %2760 to i32*
  store i32 %2759, i32* %2761
  %2762 = add i64 %2733, -164
  %2763 = inttoptr i64 %2762 to i32*
  %2764 = load i32, i32* %2763
  %2765 = sext i32 %2764 to i64
  %2766 = mul nsw i64 %2765, 96
  %2767 = load i64, i64* %13, align 8
  %2768 = add i64 %2766, %2767
  %2769 = load i64, i64* %17, align 8
  %2770 = add i64 %2769, -120
  %2771 = inttoptr i64 %2770 to i32*
  %2772 = load i32, i32* %2771
  %2773 = sext i32 %2772 to i64
  %2774 = shl nsw i64 %2773, 2
  %2775 = add i64 %2769, -116
  %2776 = add i64 %2775, %2774
  %2777 = inttoptr i64 %2776 to i32*
  %2778 = load i32, i32* %2777
  %2779 = sext i32 %2778 to i64
  %2780 = shl nsw i64 %2779, 4
  %2781 = add i64 %2780, %2768
  %2782 = add i64 %2769, -132
  %2783 = inttoptr i64 %2782 to i32*
  %2784 = load i32, i32* %2783
  %2785 = sext i32 %2784 to i64
  %2786 = shl nsw i64 %2785, 3
  %2787 = add i64 %2786, %2781
  %2788 = load i64, i64* %17, align 8
  %2789 = add i64 %2788, -128
  %2790 = inttoptr i64 %2789 to i32*
  %2791 = load i32, i32* %2790
  %2792 = sext i32 %2791 to i64
  %2793 = shl nsw i64 %2792, 2
  %2794 = add i64 %2793, %2787
  %2795 = inttoptr i64 %2794 to i32*
  %2796 = load i32, i32* %2795
  %2797 = zext i32 %2796 to i64
  store i64 %2797, i64* %62, align 8, !tbaa !1240
  %2798 = add i64 %2788, -124
  %2799 = inttoptr i64 %2798 to i32*
  store i32 %2796, i32* %2799
  %2800 = inttoptr i64 %2798 to i32*
  %2801 = load i32, i32* %2800
  %2802 = add i32 %2801, 1
  %2803 = icmp eq i32 %2802, 0
  %2804 = select i1 %2803, i64 261, i64 457
  %2805 = add i64 %3050, %2804
  br i1 %2803, label %block_40fb62, label %block_40fc30

block_40fc1c:                                     ; preds = %block_40fbf2, %block_40fb99
  %2806 = phi i64 [ %632, %block_40fb99 ], [ %2264, %block_40fbf2 ]
  %2807 = phi %struct.Memory* [ %627, %block_40fb99 ], [ %627, %block_40fbf2 ]
  %2808 = add i64 %2806, 5
  br label %block_40ff4e.sink.split.sink.split

block_40fa18:                                     ; preds = %block_40f9f1, %block_40f9a0
  %2809 = phi i64 [ %268, %block_40f9a0 ], [ %2169, %block_40f9f1 ]
  %2810 = phi %struct.Memory* [ %263, %block_40f9a0 ], [ %263, %block_40f9f1 ]
  %2811 = add i64 %2809, 5
  br label %block_40fa22

block_410415:                                     ; preds = %block_41035f
  %2812 = add i64 %1453, -96
  %2813 = inttoptr i64 %2812 to i32*
  %2814 = load i32, i32* %2813
  %2815 = sext i32 %2814 to i64
  %2816 = mul nsw i64 %2815, 96
  %2817 = add i64 %2816, ptrtoint (%sje_type* @sje to i64)
  %2818 = add i64 %1453, -112
  %2819 = inttoptr i64 %2818 to i32*
  %2820 = load i32, i32* %2819
  %2821 = sext i32 %2820 to i64
  %2822 = shl nsw i64 %2821, 4
  store i64 %2822, i64* %14, align 8, !tbaa !1240
  %2823 = add i64 %2822, %2817
  store i64 %2823, i64* %13, align 8, !tbaa !1240
  %2824 = inttoptr i64 %2823 to i32*
  %2825 = load i32, i32* %2824
  %2826 = zext i32 %2825 to i64
  store i64 %2826, i64* %61, align 8, !tbaa !1240
  %2827 = load i64, i64* %17, align 8
  %2828 = add i64 %2827, -124
  %2829 = inttoptr i64 %2828 to i32*
  store i32 %2825, i32* %2829
  %2830 = inttoptr i64 %2828 to i32*
  %2831 = load i32, i32* %2830
  %2832 = add i32 %2831, 1
  %2833 = icmp eq i32 %2832, 0
  %2834 = select i1 %2833, i64 142, i64 47
  %2835 = add i64 %1460, %2834
  br i1 %2833, label %block_410516, label %block_410444

block_4107c9:                                     ; preds = %block_4107bf
  store i64 1, i64* %61, align 8, !tbaa !1240
  store i64 ptrtoint (%idmo_type* @idmo to i64), i64* %13, align 8, !tbaa !1240
  %2836 = add i64 %146, -12
  %2837 = inttoptr i64 %2836 to i32*
  %2838 = load i32, i32* %2837
  %2839 = add i64 %146, -24
  %2840 = inttoptr i64 %2839 to i32*
  %2841 = load i32, i32* %2840
  %2842 = sext i32 %2841 to i64
  %2843 = mul nsw i64 %2842, 2400
  %2844 = add i64 %2843, ptrtoint (%idmo_type* @idmo to i64)
  %2845 = inttoptr i64 %2844 to i32*
  store i32 %2838, i32* %2845
  %2846 = inttoptr i64 %2836 to i32*
  %2847 = load i32, i32* %2846
  %2848 = inttoptr i64 %2839 to i32*
  %2849 = load i32, i32* %2848
  %2850 = sext i32 %2849 to i64
  %2851 = mul nsw i64 %2850, 2400
  %2852 = load i64, i64* %13, align 8
  %2853 = add i64 %2851, %2852
  %2854 = add i64 %2853, 1416
  %2855 = inttoptr i64 %2854 to i32*
  store i32 %2847, i32* %2855
  %2856 = load i64, i64* %17, align 8
  %2857 = add i64 %2856, -12
  %2858 = inttoptr i64 %2857 to i32*
  %2859 = load i32, i32* %2858
  %2860 = add i64 %2856, -24
  %2861 = inttoptr i64 %2860 to i32*
  %2862 = load i32, i32* %2861
  %2863 = sext i32 %2862 to i64
  %2864 = mul nsw i64 %2863, 2400
  %2865 = add i64 %2864, %2852
  %2866 = add i64 %2865, 2216
  %2867 = inttoptr i64 %2866 to i32*
  store i32 %2859, i32* %2867
  %2868 = inttoptr i64 %2860 to i32*
  %2869 = load i32, i32* %2868
  %2870 = zext i32 %2869 to i64
  store i64 %2870, i64* %62, align 8, !tbaa !1240
  %2871 = inttoptr i64 %2857 to i32*
  %2872 = load i32, i32* %2871
  %2873 = zext i32 %2872 to i64
  store i64 %2873, i64* %15, align 8, !tbaa !1240
  %2874 = add i64 %154, 4935
  %2875 = add i64 %154, 97
  %2876 = load i64, i64* %16, align 8, !tbaa !1240
  %2877 = add i64 %2876, -8
  %2878 = inttoptr i64 %2877 to i64*
  store i64 %2875, i64* %2878
  store i64 %2877, i64* %16, align 8, !tbaa !1240
  %2879 = tail call %struct.Memory* @sub_411b10_get_emo(%struct.State* nonnull %0, i64 %2874, %struct.Memory* %147)
  %2880 = load i64, i64* %17, align 8
  %2881 = load i64, i64* %3, align 8
  br label %block_41082a

block_40fe79:                                     ; preds = %block_40fe20
  %2882 = load i64, i64* %17, align 8
  %2883 = add i64 %2882, -124
  %2884 = inttoptr i64 %2883 to i32*
  %2885 = load i32, i32* %2884
  %2886 = add i64 %2882, -172
  %2887 = inttoptr i64 %2886 to i32*
  %2888 = load i32, i32* %2887
  %2889 = sext i32 %2888 to i64
  %2890 = shl nsw i64 %2889, 2
  %2891 = add i64 %2882, -48
  %2892 = add i64 %2891, %2890
  %2893 = inttoptr i64 %2892 to i32*
  store i32 %2885, i32* %2893
  %2894 = inttoptr i64 %2883 to i32*
  %2895 = load i32, i32* %2894
  %2896 = inttoptr i64 %2886 to i32*
  %2897 = load i32, i32* %2896
  %2898 = sext i32 %2897 to i64
  %2899 = shl nsw i64 %2898, 2
  %2900 = add i64 %2882, -80
  %2901 = add i64 %2900, %2899
  %2902 = inttoptr i64 %2901 to i32*
  store i32 %2895, i32* %2902
  %2903 = inttoptr i64 %2883 to i32*
  %2904 = load i32, i32* %2903
  %2905 = add i64 %2882, -160
  %2906 = inttoptr i64 %2905 to i32*
  %2907 = load i32, i32* %2906
  %2908 = sext i32 %2907 to i64
  %2909 = shl nsw i64 %2908, 2
  %2910 = add i64 %2882, -104
  %2911 = add i64 %2910, %2909
  %2912 = add i64 %2629, 42
  %2913 = inttoptr i64 %2911 to i32*
  store i32 %2904, i32* %2913
  br label %block_40ff44.sink.split

block_40f812:                                     ; preds = %block_40f7ff
  store i64 ptrtoint (%sje_type* @sje to i64), i64* %13, align 8, !tbaa !1240
  store i64 ptrtoint (%cal_intempx_type* @cal_intempx to i64), i64* %14, align 8, !tbaa !1240
  %2914 = add i64 %312, -120
  %2915 = inttoptr i64 %2914 to i32*
  %2916 = load i32, i32* %2915
  %2917 = sext i32 %2916 to i64
  %2918 = shl nsw i64 %2917, 2
  %2919 = add i64 %312, -116
  %2920 = add i64 %2919, %2918
  %2921 = inttoptr i64 %2920 to i32*
  %2922 = load i32, i32* %2921
  %2923 = sext i32 %2922 to i64
  %2924 = shl nsw i64 %2923, 5
  %2925 = add i64 %2924, ptrtoint (%local_corner_type* @local_corner to i64)
  %2926 = inttoptr i64 %314 to i32*
  %2927 = load i32, i32* %2926
  %2928 = sext i32 %2927 to i64
  %2929 = shl nsw i64 %2928, 2
  %2930 = add i64 %312, -144
  %2931 = add i64 %2930, %2929
  %2932 = inttoptr i64 %2931 to i32*
  %2933 = load i32, i32* %2932
  %2934 = sext i32 %2933 to i64
  %2935 = shl nsw i64 %2934, 2
  %2936 = add i64 %2935, %2925
  %2937 = inttoptr i64 %2936 to i32*
  %2938 = load i32, i32* %2937
  %2939 = load i64, i64* %17, align 8
  %2940 = add i64 %2939, -168
  %2941 = inttoptr i64 %2940 to i32*
  store i32 %2938, i32* %2941
  %2942 = add i64 %2939, -120
  %2943 = inttoptr i64 %2942 to i32*
  %2944 = load i32, i32* %2943
  %2945 = sext i32 %2944 to i64
  %2946 = shl nsw i64 %2945, 2
  %2947 = add i64 %2939, -116
  %2948 = add i64 %2947, %2946
  %2949 = inttoptr i64 %2948 to i32*
  %2950 = load i32, i32* %2949
  %2951 = sext i32 %2950 to i64
  %2952 = shl nsw i64 %2951, 4
  %2953 = load i64, i64* %14, align 8
  %2954 = add i64 %2952, %2953
  %2955 = inttoptr i64 %2940 to i32*
  %2956 = load i32, i32* %2955
  %2957 = sext i32 %2956 to i64
  %2958 = shl nsw i64 %2957, 2
  %2959 = add i64 %2958, %2954
  %2960 = inttoptr i64 %2959 to i32*
  %2961 = load i32, i32* %2960
  %2962 = add i64 %2939, -172
  %2963 = inttoptr i64 %2962 to i32*
  store i32 %2961, i32* %2963
  %2964 = inttoptr i64 %2940 to i32*
  %2965 = load i32, i32* %2964
  %2966 = sext i32 %2965 to i64
  %2967 = shl nsw i64 %2966, 3
  %2968 = add i64 %2967, ptrtoint (%cal_iijj_type* @cal_iijj to i64)
  %2969 = inttoptr i64 %2968 to i32*
  %2970 = load i32, i32* %2969
  %2971 = load i64, i64* %17, align 8
  %2972 = add i64 %2971, -128
  %2973 = inttoptr i64 %2972 to i32*
  store i32 %2970, i32* %2973
  %2974 = add i64 %2971, -168
  %2975 = inttoptr i64 %2974 to i32*
  %2976 = load i32, i32* %2975
  %2977 = sext i32 %2976 to i64
  %2978 = shl nsw i64 %2977, 3
  %2979 = add i64 %2978, add (i64 ptrtoint (%cal_iijj_type* @cal_iijj to i64), i64 4)
  %2980 = inttoptr i64 %2979 to i32*
  %2981 = load i32, i32* %2980
  %2982 = add i64 %2971, -132
  %2983 = inttoptr i64 %2982 to i32*
  store i32 %2981, i32* %2983
  %2984 = add i64 %2971, -164
  %2985 = inttoptr i64 %2984 to i32*
  %2986 = load i32, i32* %2985
  %2987 = sext i32 %2986 to i64
  %2988 = mul nsw i64 %2987, 96
  %2989 = load i64, i64* %13, align 8
  %2990 = add i64 %2988, %2989
  %2991 = add i64 %2971, -120
  %2992 = inttoptr i64 %2991 to i32*
  %2993 = load i32, i32* %2992
  %2994 = sext i32 %2993 to i64
  %2995 = shl nsw i64 %2994, 2
  %2996 = add i64 %2971, -116
  %2997 = add i64 %2996, %2995
  %2998 = inttoptr i64 %2997 to i32*
  %2999 = load i32, i32* %2998
  %3000 = sext i32 %2999 to i64
  %3001 = shl nsw i64 %3000, 4
  %3002 = add i64 %3001, %2990
  %3003 = load i64, i64* %17, align 8
  %3004 = add i64 %3003, -132
  %3005 = inttoptr i64 %3004 to i32*
  %3006 = load i32, i32* %3005
  %3007 = sext i32 %3006 to i64
  %3008 = shl nsw i64 %3007, 3
  %3009 = add i64 %3008, %3002
  %3010 = add i64 %3003, -128
  %3011 = inttoptr i64 %3010 to i32*
  %3012 = load i32, i32* %3011
  %3013 = sext i32 %3012 to i64
  %3014 = shl nsw i64 %3013, 2
  %3015 = add i64 %3014, %3009
  %3016 = inttoptr i64 %3015 to i32*
  %3017 = load i32, i32* %3016
  %3018 = zext i32 %3017 to i64
  store i64 %3018, i64* %62, align 8, !tbaa !1240
  %3019 = add i64 %3003, -124
  %3020 = inttoptr i64 %3019 to i32*
  store i32 %3017, i32* %3020
  %3021 = inttoptr i64 %3019 to i32*
  %3022 = load i32, i32* %3021
  %3023 = add i32 %3022, 1
  %3024 = icmp eq i32 %3023, 0
  %3025 = select i1 %3024, i64 203, i64 388
  %3026 = add i64 %52, %3025
  %3027 = load i64, i64* %17, align 8
  br i1 %3024, label %block_40f8dd, label %block_40f996

block_40f80d:                                     ; preds = %block_40f7ff
  %3028 = inttoptr i64 %314 to i32*
  %3029 = load i32, i32* %3028
  %3030 = sext i32 %3029 to i64
  %3031 = shl nsw i64 %3030, 2
  %3032 = add i64 %3031, ptrtoint (%face_l1_type* @face_l1 to i64)
  %3033 = inttoptr i64 %3032 to i32*
  %3034 = load i32, i32* %3033
  %3035 = sext i32 %3034 to i64
  %3036 = shl nsw i64 %3035, 2
  %3037 = add i64 %312, -156
  %3038 = add i64 %3037, %3036
  %3039 = inttoptr i64 %3038 to i32*
  %3040 = load i32, i32* %3039
  %3041 = sext i32 %3040 to i64
  %3042 = shl nsw i64 %3041, 2
  %3043 = add i64 %312, -80
  %3044 = add i64 %3043, %3042
  %3045 = inttoptr i64 %3044 to i32*
  %3046 = load i32, i32* %3045
  %3047 = add i32 %3046, 1
  %3048 = icmp eq i32 %3047, 0
  %3049 = select i1 %3048, i64 1205, i64 592
  %3050 = add i64 %52, %3049
  br i1 %3048, label %block_40fcc2, label %block_40fa5d

block_40f604:                                     ; preds = %block_40f493
  %3051 = zext i32 %1859 to i64
  store i64 %3051, i64* %62, align 8, !tbaa !1240
  %3052 = add i64 %1846, -120
  %3053 = inttoptr i64 %3052 to i32*
  %3054 = load i32, i32* %3053
  %3055 = sext i32 %3054 to i64
  %3056 = shl nsw i64 %3055, 2
  %3057 = add i64 %1846, -144
  %3058 = add i64 %3057, %3056
  %3059 = inttoptr i64 %3058 to i32*
  %3060 = load i32, i32* %3059
  %3061 = zext i32 %3060 to i64
  store i64 %3061, i64* %15, align 8, !tbaa !1240
  %3062 = add i64 %1846, -8
  %3063 = inttoptr i64 %3062 to i32*
  %3064 = load i32, i32* %3063
  %3065 = zext i32 %3064 to i64
  store i64 %3065, i64* %61, align 8, !tbaa !1240
  %3066 = add i64 %1846, -4
  %3067 = inttoptr i64 %3066 to i32*
  %3068 = load i32, i32* %3067
  %3069 = zext i32 %3068 to i64
  store i64 %3069, i64* %14, align 8, !tbaa !1240
  %3070 = add i64 %1863, 8342
  %3071 = add i64 %1863, 35
  %3072 = load i64, i64* %16, align 8, !tbaa !1240
  %3073 = add i64 %3072, -8
  %3074 = inttoptr i64 %3073 to i64*
  store i64 %3071, i64* %3074
  store i64 %3073, i64* %16, align 8, !tbaa !1240
  %3075 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %3070, %struct.Memory* %1902)
  %3076 = load i32, i32* %7, align 4
  %3077 = load i64, i64* %3, align 8
  %3078 = icmp eq i32 %3076, 0
  %3079 = select i1 %3078, i64 47, i64 9
  %3080 = add i64 %3077, %3079
  br i1 %3078, label %block_40f656.sink.split, label %block_40f626

block_40f6e1:                                     ; preds = %block_40f6a6
  %3081 = add i32 %2049, -2
  %3082 = icmp eq i32 %3081, 0
  %3083 = select i1 %3082, i64 13, i64 90
  %3084 = add i64 %1692, %3083
  br i1 %3082, label %block_40f6ee, label %block_40f740

block_410444:                                     ; preds = %block_410415
  %3085 = zext i32 %2831 to i64
  store i64 %3085, i64* %62, align 8, !tbaa !1240
  %3086 = add i64 %2827, -112
  %3087 = inttoptr i64 %3086 to i32*
  %3088 = load i32, i32* %3087
  %3089 = sext i32 %3088 to i64
  %3090 = shl nsw i64 %3089, 2
  %3091 = add i64 %3090, ptrtoint (%jjface_type* @jjface to i64)
  %3092 = inttoptr i64 %3091 to i32*
  %3093 = load i32, i32* %3092
  %3094 = sext i32 %3093 to i64
  %3095 = shl nsw i64 %3094, 4
  %3096 = add i64 %3095, ptrtoint (%c_f_type* @c_f to i64)
  %3097 = add i64 %2827, -168
  %3098 = inttoptr i64 %3097 to i32*
  %3099 = load i32, i32* %3098
  %3100 = sext i32 %3099 to i64
  %3101 = shl nsw i64 %3100, 2
  %3102 = add i64 %3101, %3096
  %3103 = inttoptr i64 %3102 to i32*
  %3104 = load i32, i32* %3103
  %3105 = zext i32 %3104 to i64
  store i64 %3105, i64* %15, align 8, !tbaa !1240
  %3106 = add i64 %2827, -8
  %3107 = inttoptr i64 %3106 to i32*
  %3108 = load i32, i32* %3107
  %3109 = zext i32 %3108 to i64
  store i64 %3109, i64* %61, align 8, !tbaa !1240
  %3110 = add i64 %2827, -4
  %3111 = inttoptr i64 %3110 to i32*
  %3112 = load i32, i32* %3111
  %3113 = zext i32 %3112 to i64
  store i64 %3113, i64* %14, align 8, !tbaa !1240
  %3114 = add i64 %2835, 4684
  %3115 = add i64 %2835, 53
  %3116 = load i64, i64* %16, align 8, !tbaa !1240
  %3117 = add i64 %3116, -8
  %3118 = inttoptr i64 %3117 to i64*
  store i64 %3115, i64* %3118
  store i64 %3117, i64* %16, align 8, !tbaa !1240
  %3119 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %3114, %struct.Memory* %2173)
  %3120 = load i32, i32* %7, align 4
  %3121 = load i64, i64* %3, align 8
  %3122 = icmp eq i32 %3120, 0
  %3123 = select i1 %3122, i64 37, i64 9
  %3124 = add i64 %3121, %3123
  br i1 %3122, label %block_410516.sink.split, label %block_410482

block_40fcb3:                                     ; preds = %block_40fc30, %block_40fc89
  %3125 = phi i64 [ %2518, %block_40fc30 ], [ %214, %block_40fc89 ]
  %3126 = phi %struct.Memory* [ %2513, %block_40fc30 ], [ %2513, %block_40fc89 ]
  %3127 = add i64 %3125, 5
  br label %block_40ff4e.sink.split.sink.split

block_410603:                                     ; preds = %block_41059e, %block_410594
  %3128 = phi i64 [ %349, %block_410594 ], [ %970, %block_41059e ]
  %3129 = phi i64 [ %341, %block_410594 ], [ %969, %block_41059e ]
  %3130 = phi %struct.Memory* [ %342, %block_410594 ], [ %968, %block_41059e ]
  %3131 = add i64 %3129, -72
  %3132 = inttoptr i64 %3131 to i32*
  %3133 = load i32, i32* %3132
  %3134 = add i32 %3133, 1
  %3135 = icmp eq i32 %3134, 0
  %3136 = select i1 %3135, i64 111, i64 10
  %3137 = add i64 %3128, %3136
  br i1 %3135, label %block_410672, label %block_41060d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41fb40_add2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41fb40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %13 = load i64, i64* %11, align 8
  %14 = load i64, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %9, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %8, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -28
  %24 = load i32, i32* %5, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %14, -32
  %27 = inttoptr i64 %26 to i32*
  store i32 0, i32* %27
  %28 = add i64 %14, -28
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = add i64 %14, -16
  %33 = bitcast %union.VectorReg* %12 to double*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = add i64 %14, -24
  br label %block_41fb56

block_41fb97:                                     ; preds = %block_41fb56
  %36 = zext i32 %62 to i64
  store i64 %36, i64* %6, align 8, !tbaa !1240
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %40 = icmp ult i32 %62, %64
  %41 = zext i1 %40 to i8
  %42 = and i32 %65, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #11
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = xor i32 %64, %62
  %48 = xor i32 %47, %65
  %49 = lshr i32 %48, 4
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = icmp eq i32 %65, 0
  %53 = zext i1 %52 to i8
  %54 = zext i1 %73 to i8
  store i8 %41, i8* %29, align 1, !tbaa !1248
  store i8 %46, i8* %37, align 1, !tbaa !1261
  store i8 %51, i8* %30, align 1, !tbaa !1262
  store i8 %53, i8* %38, align 1, !tbaa !1263
  store i8 %67, i8* %31, align 1, !tbaa !1264
  store i8 %54, i8* %39, align 1, !tbaa !1265
  %55 = inttoptr i64 %15 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %11, align 8, !tbaa !1240
  %57 = inttoptr i64 %14 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %3, align 8, !tbaa !1240
  %59 = add i64 %14, 8
  store i64 %59, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %60

block_41fb56:                                     ; preds = %block_41fb62, %block_41fb40
  %60 = phi %struct.Memory* [ %2, %block_41fb40 ], [ %60, %block_41fb62 ]
  %61 = inttoptr i64 %26 to i32*
  %62 = load i32, i32* %61
  %63 = inttoptr i64 %28 to i32*
  %64 = load i32, i32* %63
  %65 = sub i32 %62, %64
  %66 = lshr i32 %65, 31
  %67 = trunc i32 %66 to i8
  %68 = lshr i32 %62, 31
  %69 = lshr i32 %64, 31
  %70 = xor i32 %69, %68
  %71 = xor i32 %66, %68
  %72 = add nuw nsw i32 %71, %70
  %73 = icmp eq i32 %72, 2
  %74 = icmp ne i8 %67, 0
  %75 = xor i1 %74, %73
  br i1 %75, label %block_41fb62, label %block_41fb97

block_41fb62:                                     ; preds = %block_41fb56
  %76 = inttoptr i64 %32 to i64*
  %77 = load i64, i64* %76
  %78 = sext i32 %62 to i64
  %79 = shl nsw i64 %78, 3
  %80 = add i64 %79, %77
  %81 = inttoptr i64 %80 to double*
  %82 = load double, double* %81
  %83 = inttoptr i64 %35 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %79, %84
  %86 = inttoptr i64 %85 to double*
  %87 = load double, double* %86
  %88 = fadd double %82, %87
  store double %88, double* %33, align 1, !tbaa !1246
  store i64 0, i64* %34, align 1, !tbaa !1246
  store i64 %78, i64* %7, align 8, !tbaa !1240
  %89 = inttoptr i64 %80 to double*
  store double %88, double* %89
  %90 = inttoptr i64 %26 to i32*
  %91 = load i32, i32* %90
  %92 = add i32 %91, 1
  %93 = inttoptr i64 %26 to i32*
  store i32 %92, i32* %93
  br label %block_41fb56
}

; Function Attrs: noinline
define %struct.Memory* @sub_407880_diffusion(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_407880:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = load i64, i64* %11, align 8
  %15 = load i64, i64* %10, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %11, align 8, !tbaa !1240
  %18 = add i64 %15, -88
  store i64 %18, i64* %10, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -12
  %26 = load i32, i32* %5, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i64 35, i64 25
  %31 = add i64 %30, %1
  br i1 %29, label %block_4078a3, label %block_407899

block_407fe1:                                     ; preds = %block_407f51
  store i32 0, i32* %614, align 1, !tbaa !1244
  store i32 0, i32* %616, align 1, !tbaa !1244
  store i32 0, i32* %617, align 1, !tbaa !1244
  store i32 0, i32* %619, align 1, !tbaa !1244
  %32 = add i64 %417, -48
  %33 = load double, double* %640, align 1
  %34 = inttoptr i64 %32 to double*
  store double %33, double* %34
  %35 = add i64 %435, 15
  %36 = inttoptr i64 %419 to i32*
  store i32 0, i32* %36
  %37 = add i64 %417, -76
  %38 = add i64 %417, -72
  %39 = add i64 %417, -68
  br label %block_407ff0

block_407bc9:                                     ; preds = %block_407bbf
  %40 = inttoptr i64 %284 to i32*
  %41 = load i32, i32* %40
  %42 = sext i32 %41 to i64
  %43 = mul nsw i64 %42, 1000
  %44 = add i64 %43, ptrtoint (%dpcelm_type* @dpcelm to i64)
  %45 = inttoptr i64 %287 to i32*
  %46 = load i32, i32* %45
  %47 = sext i32 %46 to i64
  %48 = mul nsw i64 %47, 200
  %49 = add i64 %48, %44
  %50 = inttoptr i64 %288 to i32*
  %51 = load i32, i32* %50
  %52 = sext i32 %51 to i64
  %53 = mul nsw i64 %52, 40
  %54 = add i64 %53, %49
  %55 = sext i32 %120 to i64
  %56 = shl nsw i64 %55, 3
  %57 = add i64 %56, %54
  %58 = inttoptr i64 %57 to double*
  %59 = load double, double* %58
  %60 = add i64 %43, ptrtoint (%trhs_type* @trhs to i64)
  %61 = add i64 %48, %60
  %62 = add i64 %53, %61
  %63 = add i64 %56, %62
  %64 = inttoptr i64 %63 to double*
  %65 = load double, double* %64
  %66 = fmul double %59, %65
  %67 = add i64 %43, ptrtoint (%pdiffp_type* @pdiffp to i64)
  %68 = add i64 %48, %67
  %69 = add i64 %53, %68
  %70 = add i64 %56, %69
  %71 = inttoptr i64 %70 to double*
  store double %66, double* %71
  %72 = inttoptr i64 %281 to double*
  %73 = load double, double* %72
  %74 = inttoptr i64 %284 to i32*
  %75 = load i32, i32* %74
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %76, 1000
  %78 = add i64 %77, ptrtoint (%trhs_type* @trhs to i64)
  %79 = inttoptr i64 %287 to i32*
  %80 = load i32, i32* %79
  %81 = sext i32 %80 to i64
  %82 = mul nsw i64 %81, 200
  %83 = add i64 %82, %78
  %84 = inttoptr i64 %288 to i32*
  %85 = load i32, i32* %84
  %86 = sext i32 %85 to i64
  %87 = mul nsw i64 %86, 40
  %88 = add i64 %87, %83
  %89 = inttoptr i64 %289 to i32*
  %90 = load i32, i32* %89
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 3
  %93 = add i64 %92, %88
  %94 = inttoptr i64 %93 to double*
  %95 = load double, double* %94
  %96 = add i64 %77, ptrtoint (%pdiffp_type* @pdiffp to i64)
  %97 = add i64 %82, %96
  %98 = add i64 %87, %97
  %99 = add i64 %92, %98
  %100 = inttoptr i64 %99 to double*
  %101 = load double, double* %100
  %102 = fmul double %95, %101
  %103 = add i64 %77, ptrtoint (%tmult_type* @tmult to i64)
  %104 = add i64 %82, %103
  %105 = add i64 %87, %104
  store i64 %91, i64* %6, align 8, !tbaa !1240
  %106 = add i64 %92, %105
  %107 = inttoptr i64 %106 to double*
  %108 = load double, double* %107
  %109 = fmul double %102, %108
  store double %109, double* %650, align 1, !tbaa !1246
  store i64 0, i64* %651, align 1, !tbaa !1246
  %110 = fadd double %73, %109
  store double %110, double* %640, align 1, !tbaa !1246
  store i64 0, i64* %613, align 1, !tbaa !1246
  %111 = inttoptr i64 %281 to double*
  store double %110, double* %111
  %112 = inttoptr i64 %289 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, 1
  %115 = inttoptr i64 %289 to i32*
  store i32 %114, i32* %115
  %116 = add i64 %130, -10
  br label %block_407bbf

block_407bbf:                                     ; preds = %block_407bb8, %block_407bc9
  %117 = phi i64 [ %140, %block_407bb8 ], [ %116, %block_407bc9 ]
  %118 = phi %struct.Memory* [ %143, %block_407bb8 ], [ %118, %block_407bc9 ]
  %119 = inttoptr i64 %289 to i32*
  %120 = load i32, i32* %119
  %121 = add i32 %120, -5
  %122 = lshr i32 %121, 31
  %123 = lshr i32 %120, 31
  %124 = xor i32 %122, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = icmp ne i32 %122, 0
  %128 = xor i1 %127, %126
  %129 = select i1 %128, i64 10, i64 372
  %130 = add i64 %117, %129
  br i1 %128, label %block_407bc9, label %block_407d33

block_407fbb:                                     ; preds = %block_407f95, %block_407f72
  %131 = phi i64 [ %300, %block_407f72 ], [ %459, %block_407f95 ]
  %132 = phi %struct.Memory* [ %349, %block_407f72 ], [ %458, %block_407f95 ]
  %133 = load i64, i64* %11, align 8
  %134 = add i64 %133, -64
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135
  %137 = add i32 %136, 1
  %138 = inttoptr i64 %134 to i32*
  store i32 %137, i32* %138
  %139 = add i64 %131, -83
  br label %block_407f68

block_407bb8:                                     ; preds = %block_407bae
  %140 = add i64 %155, 7
  %141 = inttoptr i64 %289 to i32*
  store i32 0, i32* %141
  br label %block_407bbf

block_407bae:                                     ; preds = %block_407ba7, %block_407d33
  %142 = phi i64 [ %926, %block_407ba7 ], [ %523, %block_407d33 ]
  %143 = phi %struct.Memory* [ %972, %block_407ba7 ], [ %118, %block_407d33 ]
  %144 = inttoptr i64 %288 to i32*
  %145 = load i32, i32* %144
  %146 = add i32 %145, -5
  %147 = lshr i32 %146, 31
  %148 = lshr i32 %145, 31
  %149 = xor i32 %147, %148
  %150 = add nuw nsw i32 %149, %148
  %151 = icmp eq i32 %150, 2
  %152 = icmp ne i32 %147, 0
  %153 = xor i1 %152, %151
  %154 = select i1 %153, i64 10, i64 408
  %155 = add i64 %142, %154
  br i1 %153, label %block_407bb8, label %block_407d46

block_407de0:                                     ; preds = %block_407d73
  store i64 ptrtoint (%pdiff_type* @pdiff to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pdiffp_type* @pdiffp to i64), i64* %8, align 8, !tbaa !1240
  %156 = add i64 %413, -24
  %157 = inttoptr i64 %156 to double*
  %158 = load double, double* %157
  %159 = add i64 %413, -32
  %160 = inttoptr i64 %159 to double*
  store double %158, double* %160
  %161 = inttoptr i64 %415 to double*
  %162 = load double, double* %161
  %163 = inttoptr i64 %156 to double*
  store double %162, double* %163
  %164 = inttoptr i64 %156 to double*
  %165 = load double, double* %164
  %166 = inttoptr i64 %159 to double*
  %167 = load double, double* %166
  %168 = fdiv double %165, %167
  %169 = add i64 %413, -40
  %170 = inttoptr i64 %169 to double*
  store double %168, double* %170
  %171 = inttoptr i64 %169 to double*
  %172 = load double, double* %171
  store double %172, double* %640, align 1, !tbaa !1246
  store double 0.000000e+00, double* %649, align 1, !tbaa !1246
  %173 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %7, align 8, !tbaa !1240
  %175 = add i64 %801, 97360
  %176 = add i64 %801, 72
  %177 = load i64, i64* %10, align 8, !tbaa !1240
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179
  store i64 %178, i64* %10, align 8, !tbaa !1240
  %180 = tail call %struct.Memory* @sub_41fa30_adds1m1(%struct.State* nonnull %0, i64 %175, %struct.Memory* %785)
  %181 = load i64, i64* %3, align 8
  store i64 ptrtoint (%pmorx_type* @pmorx to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%ppmor_type* @ppmor to i64), i64* %8, align 8, !tbaa !1240
  %182 = load i64, i64* %11, align 8
  %183 = add i64 %182, -40
  %184 = inttoptr i64 %183 to double*
  %185 = load double, double* %184
  store double %185, double* %640, align 1, !tbaa !1246
  store double 0.000000e+00, double* %649, align 1, !tbaa !1246
  %186 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %187 = zext i32 %186 to i64
  store i64 %187, i64* %7, align 8, !tbaa !1240
  %188 = add i64 %181, 97288
  %189 = add i64 %181, 37
  %190 = load i64, i64* %10, align 8, !tbaa !1240
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  store i64 %189, i64* %192
  store i64 %191, i64* %10, align 8, !tbaa !1240
  %193 = tail call %struct.Memory* @sub_41fa30_adds1m1(%struct.State* nonnull %0, i64 %188, %struct.Memory* %180)
  %194 = load i64, i64* %3, align 8
  br label %block_407e4d

block_4081aa:                                     ; preds = %block_40813d
  store i64 ptrtoint (%t_type* @t to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pdiff_type* @pdiff to i64), i64* %8, align 8, !tbaa !1240
  %195 = add i64 %439, -24
  %196 = inttoptr i64 %195 to double*
  %197 = load double, double* %196
  %198 = inttoptr i64 %441 to double*
  %199 = load double, double* %198
  %200 = fdiv double %197, %199
  %201 = inttoptr i64 %441 to double*
  store double %200, double* %201
  %202 = inttoptr i64 %441 to double*
  %203 = load double, double* %202
  store double %203, double* %640, align 1, !tbaa !1246
  store double 0.000000e+00, double* %649, align 1, !tbaa !1246
  %204 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %7, align 8, !tbaa !1240
  %206 = add i64 %819, 96278
  %207 = add i64 %819, 52
  %208 = load i64, i64* %10, align 8, !tbaa !1240
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 %207, i64* %210
  store i64 %209, i64* %10, align 8, !tbaa !1240
  %211 = tail call %struct.Memory* @sub_41f9c0_adds2m1(%struct.State* nonnull %0, i64 %206, %struct.Memory* %803)
  %212 = load i64, i64* %3, align 8
  store i64 ptrtoint (%umor_type* @umor to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pmorx_type* @pmorx to i64), i64* %8, align 8, !tbaa !1240
  %213 = load i64, i64* %11, align 8
  %214 = add i64 %213, -48
  %215 = inttoptr i64 %214 to double*
  %216 = load double, double* %215
  store double %216, double* %640, align 1, !tbaa !1246
  store double 0.000000e+00, double* %649, align 1, !tbaa !1246
  %217 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %218 = zext i32 %217 to i64
  store i64 %218, i64* %7, align 8, !tbaa !1240
  %219 = add i64 %212, 96226
  %220 = add i64 %212, 37
  %221 = load i64, i64* %10, align 8, !tbaa !1240
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %220, i64* %223
  store i64 %222, i64* %10, align 8, !tbaa !1240
  %224 = tail call %struct.Memory* @sub_41f9c0_adds2m1(%struct.State* nonnull %0, i64 %219, %struct.Memory* %211)
  %225 = load i64, i64* %3, align 8
  store i64 ptrtoint (%trhs_type* @trhs to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pdiffp_type* @pdiffp to i64), i64* %8, align 8, !tbaa !1240
  %226 = load i64, i64* %11, align 8
  %227 = add i64 %226, -48
  %228 = inttoptr i64 %227 to double*
  %229 = load double, double* %228
  %230 = bitcast double %229 to i64
  %231 = xor i64 %230, -9223372036854775808
  store i64 %231, i64* %6, align 8, !tbaa !1240
  store i64 %231, i64* %581, align 1, !tbaa !1240
  store i64 0, i64* %613, align 1, !tbaa !1240
  %232 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %7, align 8, !tbaa !1240
  %234 = add i64 %225, 96189
  %235 = add i64 %225, 60
  %236 = load i64, i64* %10, align 8, !tbaa !1240
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %235, i64* %238
  store i64 %237, i64* %10, align 8, !tbaa !1240
  %239 = tail call %struct.Memory* @sub_41f9c0_adds2m1(%struct.State* nonnull %0, i64 %234, %struct.Memory* %224)
  %240 = load i64, i64* %3, align 8
  store i64 ptrtoint (%rmor_type* @rmor to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%ppmor_type* @ppmor to i64), i64* %8, align 8, !tbaa !1240
  %241 = load i64, i64* %11, align 8
  %242 = add i64 %241, -48
  %243 = inttoptr i64 %242 to double*
  %244 = load double, double* %243
  %245 = bitcast double %244 to i64
  %246 = xor i64 %245, -9223372036854775808
  store i64 %246, i64* %6, align 8, !tbaa !1240
  store i64 %246, i64* %581, align 1, !tbaa !1240
  store i64 0, i64* %613, align 1, !tbaa !1240
  %247 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %248 = zext i32 %247 to i64
  store i64 %248, i64* %7, align 8, !tbaa !1240
  %249 = add i64 %240, 96129
  %250 = add i64 %240, 60
  %251 = load i64, i64* %10, align 8, !tbaa !1240
  %252 = add i64 %251, -8
  %253 = inttoptr i64 %252 to i64*
  store i64 %250, i64* %253
  store i64 %252, i64* %10, align 8, !tbaa !1240
  %254 = tail call %struct.Memory* @sub_41f9c0_adds2m1(%struct.State* nonnull %0, i64 %249, %struct.Memory* %239)
  %255 = load i64, i64* %11, align 8
  %256 = add i64 %255, -52
  %257 = load i64, i64* %3, align 8
  %258 = inttoptr i64 %256 to i32*
  %259 = load i32, i32* %258
  %260 = add i32 %259, 1
  %261 = inttoptr i64 %256 to i32*
  store i32 %260, i32* %261
  %262 = add i64 %257, -1822
  br label %block_407b5d

block_407b86:                                     ; preds = %block_407d59, %block_407b77
  %263 = phi i64 [ %285, %block_407b77 ], [ %1142, %block_407d59 ]
  %264 = phi %struct.Memory* [ %873, %block_407b77 ], [ %972, %block_407d59 ]
  %265 = inttoptr i64 %284 to i32*
  %266 = load i32, i32* %265
  %267 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %268 = sub i32 %266, %267
  %269 = lshr i32 %268, 31
  %270 = trunc i32 %269 to i8
  %271 = lshr i32 %266, 31
  %272 = lshr i32 %267, 31
  %273 = xor i32 %272, %271
  %274 = xor i32 %269, %271
  %275 = add nuw nsw i32 %274, %273
  %276 = icmp eq i32 %275, 2
  %277 = icmp ne i8 %270, 0
  %278 = xor i1 %277, %276
  %279 = select i1 %278, i64 16, i64 486
  %280 = add i64 %263, %279
  br i1 %278, label %block_407b96, label %block_407d6c

block_407b77:                                     ; preds = %block_407b6d
  store i32 0, i32* %614, align 1, !tbaa !1244
  store i32 0, i32* %616, align 1, !tbaa !1244
  store i32 0, i32* %617, align 1, !tbaa !1244
  store i32 0, i32* %619, align 1, !tbaa !1244
  %281 = add i64 %872, -16
  %282 = load double, double* %640, align 1
  %283 = inttoptr i64 %281 to double*
  store double %282, double* %283
  %284 = add i64 %872, -56
  %285 = add i64 %312, 15
  %286 = inttoptr i64 %284 to i32*
  store i32 0, i32* %286
  %287 = add i64 %872, -76
  %288 = add i64 %872, -72
  %289 = add i64 %872, -68
  br label %block_407b86

block_407f72:                                     ; preds = %block_407f68
  %290 = sext i32 %366 to i64
  %291 = mul nsw i64 %290, 24
  %292 = add i64 %291, ptrtoint (%cbc_type* @cbc to i64)
  %293 = sext i32 %352 to i64
  store i64 %293, i64* %6, align 8, !tbaa !1240
  %294 = shl nsw i64 %293, 2
  %295 = add i64 %294, %292
  %296 = inttoptr i64 %295 to i32*
  %297 = load i32, i32* %296
  %298 = icmp eq i32 %297, 0
  %299 = select i1 %298, i64 35, i64 73
  %300 = add i64 %363, %299
  br i1 %298, label %block_407f95, label %block_407fbb

block_407b6d:                                     ; preds = %block_407b5d
  %301 = add i32 %876, -1
  %302 = icmp eq i32 %301, 0
  %303 = lshr i32 %301, 31
  %304 = trunc i32 %303 to i8
  %305 = xor i32 %303, %882
  %306 = add nuw nsw i32 %305, %882
  %307 = icmp eq i32 %306, 2
  %308 = icmp ne i8 %304, 0
  %309 = xor i1 %308, %307
  %310 = or i1 %302, %309
  %311 = select i1 %310, i64 736, i64 10
  %312 = add i64 %892, %311
  br i1 %310, label %block_407e4d, label %block_407b77

block_407f61:                                     ; preds = %block_407f51
  %313 = add i64 %417, -64
  %314 = add i64 %435, 7
  %315 = inttoptr i64 %313 to i32*
  store i32 0, i32* %315
  br label %block_407f68

block_407d83:                                     ; preds = %block_407d73
  %316 = sext i32 %787 to i64
  %317 = shl nsw i64 %316, 3
  %318 = add i64 %317, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %319 = inttoptr i64 %318 to double*
  %320 = load double, double* %319
  %321 = add i64 %317, ptrtoint (%rmor_type* @rmor to i64)
  %322 = inttoptr i64 %321 to double*
  %323 = load double, double* %322
  %324 = fmul double %320, %323
  %325 = add i64 %317, ptrtoint (%ppmor_type* @ppmor to i64)
  %326 = inttoptr i64 %325 to double*
  store double %324, double* %326
  %327 = inttoptr i64 %415 to double*
  %328 = load double, double* %327
  %329 = inttoptr i64 %414 to i32*
  %330 = load i32, i32* %329
  %331 = sext i32 %330 to i64
  %332 = shl nsw i64 %331, 3
  %333 = add i64 %332, ptrtoint (%rmor_type* @rmor to i64)
  %334 = inttoptr i64 %333 to double*
  %335 = load double, double* %334
  %336 = add i64 %332, ptrtoint (%ppmor_type* @ppmor to i64)
  %337 = inttoptr i64 %336 to double*
  %338 = load double, double* %337
  %339 = fmul double %335, %338
  store double %339, double* %650, align 1, !tbaa !1246
  store i64 0, i64* %651, align 1, !tbaa !1246
  %340 = fadd double %328, %339
  store double %340, double* %640, align 1, !tbaa !1246
  store i64 0, i64* %613, align 1, !tbaa !1246
  %341 = inttoptr i64 %415 to double*
  store double %340, double* %341
  %342 = inttoptr i64 %414 to i32*
  %343 = load i32, i32* %342
  %344 = add i32 %343, 1
  %345 = inttoptr i64 %414 to i32*
  store i32 %344, i32* %345
  %346 = add i64 %801, -16
  br label %block_407d73

block_407f68:                                     ; preds = %block_407f61, %block_407fbb
  %347 = phi i64 [ %314, %block_407f61 ], [ %139, %block_407fbb ]
  %348 = phi i64 [ %417, %block_407f61 ], [ %133, %block_407fbb ]
  %349 = phi %struct.Memory* [ %418, %block_407f61 ], [ %132, %block_407fbb ]
  %350 = add i64 %348, -64
  %351 = inttoptr i64 %350 to i32*
  %352 = load i32, i32* %351
  %353 = add i32 %352, -6
  %354 = lshr i32 %353, 31
  %355 = trunc i32 %354 to i8
  %356 = lshr i32 %352, 31
  %357 = xor i32 %354, %356
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = icmp ne i8 %355, 0
  %361 = xor i1 %360, %359
  %362 = select i1 %361, i64 10, i64 102
  %363 = add i64 %347, %362
  %364 = add i64 %348, -56
  %365 = inttoptr i64 %364 to i32*
  %366 = load i32, i32* %365
  br i1 %361, label %block_407f72, label %block_407fce

block_40814d:                                     ; preds = %block_40813d
  %367 = sext i32 %805 to i64
  %368 = shl nsw i64 %367, 3
  %369 = add i64 %368, ptrtoint (%ppmor_type* @ppmor to i64)
  %370 = inttoptr i64 %369 to double*
  %371 = load double, double* %370
  %372 = add i64 %368, ptrtoint (%tmmor_type* @tmmor to i64)
  %373 = inttoptr i64 %372 to double*
  %374 = load double, double* %373
  %375 = fmul double %371, %374
  %376 = inttoptr i64 %369 to double*
  store double %375, double* %376
  %377 = inttoptr i64 %441 to double*
  %378 = load double, double* %377
  %379 = inttoptr i64 %440 to i32*
  %380 = load i32, i32* %379
  %381 = sext i32 %380 to i64
  %382 = shl nsw i64 %381, 3
  %383 = add i64 %382, ptrtoint (%pmorx_type* @pmorx to i64)
  %384 = inttoptr i64 %383 to double*
  %385 = load double, double* %384
  %386 = add i64 %382, ptrtoint (%ppmor_type* @ppmor to i64)
  %387 = inttoptr i64 %386 to double*
  %388 = load double, double* %387
  %389 = fmul double %385, %388
  store double %389, double* %650, align 1, !tbaa !1246
  store i64 0, i64* %651, align 1, !tbaa !1246
  %390 = fadd double %378, %389
  store double %390, double* %640, align 1, !tbaa !1246
  store i64 0, i64* %613, align 1, !tbaa !1246
  %391 = inttoptr i64 %441 to double*
  store double %390, double* %391
  %392 = inttoptr i64 %440 to i32*
  %393 = load i32, i32* %392
  %394 = add i32 %393, 1
  %395 = inttoptr i64 %440 to i32*
  store i32 %394, i32* %395
  %396 = add i64 %819, -16
  br label %block_40813d

block_407f4a:                                     ; preds = %block_407f19, %block_407f40
  %397 = phi i64 [ %488, %block_407f19 ], [ %409, %block_407f40 ]
  %398 = phi %struct.Memory* [ %483, %block_407f19 ], [ %408, %block_407f40 ]
  %399 = load i64, i64* %11, align 8
  %400 = add i64 %399, -56
  %401 = add i64 %397, 7
  %402 = inttoptr i64 %400 to i32*
  store i32 0, i32* %402
  br label %block_407f51

block_407f40:                                     ; preds = %block_407f19
  store i64 7, i64* %9, align 8, !tbaa !1240
  %403 = add i64 %488, -9584
  %404 = add i64 %488, 10
  %405 = load i64, i64* %10, align 8, !tbaa !1240
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  store i64 %404, i64* %407
  store i64 %406, i64* %10, align 8, !tbaa !1240
  %408 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %403, %struct.Memory* %483)
  %409 = load i64, i64* %3, align 8
  br label %block_407f4a

block_407d6c:                                     ; preds = %block_407b86
  %410 = add i64 %872, -60
  %411 = add i64 %280, 7
  %412 = inttoptr i64 %410 to i32*
  store i32 0, i32* %412
  %413 = load i64, i64* %11, align 8
  %414 = add i64 %413, -60
  %415 = add i64 %413, -16
  br label %block_407d73

block_407f51:                                     ; preds = %block_407fce, %block_407f4a
  %416 = phi i64 [ %401, %block_407f4a ], [ %531, %block_407fce ]
  %417 = phi i64 [ %399, %block_407f4a ], [ %348, %block_407fce ]
  %418 = phi %struct.Memory* [ %398, %block_407f4a ], [ %349, %block_407fce ]
  %419 = add i64 %417, -56
  %420 = inttoptr i64 %419 to i32*
  %421 = load i32, i32* %420
  %422 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %423 = sub i32 %421, %422
  %424 = lshr i32 %423, 31
  %425 = trunc i32 %424 to i8
  %426 = lshr i32 %421, 31
  %427 = lshr i32 %422, 31
  %428 = xor i32 %427, %426
  %429 = xor i32 %424, %426
  %430 = add nuw nsw i32 %429, %428
  %431 = icmp eq i32 %430, 2
  %432 = icmp ne i8 %425, 0
  %433 = xor i1 %432, %431
  %434 = select i1 %433, i64 16, i64 144
  %435 = add i64 %416, %434
  br i1 %433, label %block_407f61, label %block_407fe1

block_408136:                                     ; preds = %block_407ff0
  %436 = add i64 %417, -60
  %437 = add i64 %776, 7
  %438 = inttoptr i64 %436 to i32*
  store i32 0, i32* %438
  %439 = load i64, i64* %11, align 8
  %440 = add i64 %439, -60
  %441 = add i64 %439, -48
  br label %block_40813d

block_407f95:                                     ; preds = %block_407f72
  store i32 0, i32* %614, align 1, !tbaa !1244
  store i32 0, i32* %616, align 1, !tbaa !1244
  store i32 0, i32* %617, align 1, !tbaa !1244
  store i32 0, i32* %619, align 1, !tbaa !1244
  %442 = load i64, i64* %11, align 8
  %443 = add i64 %442, -56
  %444 = inttoptr i64 %443 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 1000
  store i64 %447, i64* %6, align 8, !tbaa !1240
  %448 = add i64 %447, ptrtoint (%pdiffp_type* @pdiffp to i64)
  %449 = add i64 %442, -64
  %450 = inttoptr i64 %449 to i32*
  %451 = load i32, i32* %450
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %8, align 8, !tbaa !1240
  store i64 %448, i64* %9, align 8, !tbaa !1240
  %453 = add i64 %300, 98171
  %454 = add i64 %300, 38
  %455 = load i64, i64* %10, align 8, !tbaa !1240
  %456 = add i64 %455, -8
  %457 = inttoptr i64 %456 to i64*
  store i64 %454, i64* %457
  store i64 %456, i64* %10, align 8, !tbaa !1240
  %458 = tail call %struct.Memory* @sub_41ff10_facev(%struct.State* nonnull %0, i64 %453, %struct.Memory* %349)
  %459 = load i64, i64* %3, align 8
  br label %block_407fbb

block_407924:                                     ; preds = %block_407aa9, %block_40791d
  %460 = phi i64 [ %474, %block_40791d ], [ %684, %block_407aa9 ]
  %461 = phi %struct.Memory* [ %490, %block_40791d ], [ %1111, %block_407aa9 ]
  %462 = inttoptr i64 %647 to i32*
  %463 = load i32, i32* %462
  %464 = add i32 %463, -5
  %465 = lshr i32 %464, 31
  %466 = lshr i32 %463, 31
  %467 = xor i32 %465, %466
  %468 = add nuw nsw i32 %467, %466
  %469 = icmp eq i32 %468, 2
  %470 = icmp ne i32 %465, 0
  %471 = xor i1 %470, %469
  %472 = select i1 %471, i64 10, i64 408
  %473 = add i64 %460, %472
  br i1 %471, label %block_40792e, label %block_407abc

block_40791d:                                     ; preds = %block_407913
  %474 = add i64 %502, 7
  %475 = inttoptr i64 %647 to i32*
  store i32 0, i32* %475
  br label %block_407924

block_407f19:                                     ; preds = %block_407f0f, %block_407f01
  %476 = phi i64 [ %518, %block_407f01 ], [ %919, %block_407f0f ]
  %477 = phi %struct.Memory* [ %734, %block_407f01 ], [ %918, %block_407f0f ]
  store i64 ptrtoint (%ppmor_type* @ppmor to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pdiffp_type* @pdiffp to i64), i64* %8, align 8, !tbaa !1240
  %478 = add i64 %476, 78279
  %479 = add i64 %476, 25
  %480 = load i64, i64* %10, align 8, !tbaa !1240
  %481 = add i64 %480, -8
  %482 = inttoptr i64 %481 to i64*
  store i64 %479, i64* %482
  store i64 %481, i64* %10, align 8, !tbaa !1240
  %483 = tail call %struct.Memory* @sub_41b0e0_transfb(%struct.State* nonnull %0, i64 %478, %struct.Memory* %477)
  %484 = load i64, i64* %3, align 8
  %485 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %486 = icmp eq i32 %485, 0
  %487 = select i1 %486, i64 24, i64 14
  %488 = add i64 %484, %487
  br i1 %486, label %block_407f4a, label %block_407f40

block_407913:                                     ; preds = %block_407abc, %block_40790c
  %489 = phi i64 [ %513, %block_40790c ], [ %609, %block_407abc ]
  %490 = phi %struct.Memory* [ %533, %block_40790c ], [ %461, %block_407abc ]
  %491 = inttoptr i64 %646 to i32*
  %492 = load i32, i32* %491
  %493 = add i32 %492, -5
  %494 = lshr i32 %493, 31
  %495 = lshr i32 %492, 31
  %496 = xor i32 %494, %495
  %497 = add nuw nsw i32 %496, %495
  %498 = icmp eq i32 %497, 2
  %499 = icmp ne i32 %494, 0
  %500 = xor i1 %499, %498
  %501 = select i1 %500, i64 10, i64 444
  %502 = add i64 %489, %501
  br i1 %500, label %block_40791d, label %block_407acf

block_407d46:                                     ; preds = %block_407bae
  %503 = inttoptr i64 %287 to i32*
  %504 = load i32, i32* %503
  %505 = add i32 %504, 1
  %506 = inttoptr i64 %287 to i32*
  store i32 %505, i32* %506
  %507 = add i64 %155, -425
  br label %block_407b9d

block_408110:                                     ; preds = %block_408018
  %508 = inttoptr i64 %37 to i32*
  %509 = load i32, i32* %508
  %510 = add i32 %509, 1
  %511 = inttoptr i64 %37 to i32*
  store i32 %510, i32* %511
  %512 = add i64 %1016, -265
  br label %block_408007

block_40790c:                                     ; preds = %block_4078fc
  %513 = add i64 %549, 7
  %514 = inttoptr i64 %646 to i32*
  store i32 0, i32* %514
  br label %block_407913

block_407f01:                                     ; preds = %block_407e9d
  %515 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %516 = icmp eq i32 %515, 0
  %517 = select i1 %516, i64 24, i64 14
  %518 = add i64 %751, %517
  br i1 %516, label %block_407f19, label %block_407f0f

block_407d33:                                     ; preds = %block_407bbf
  %519 = inttoptr i64 %288 to i32*
  %520 = load i32, i32* %519
  %521 = add i32 %520, 1
  %522 = inttoptr i64 %288 to i32*
  store i32 %521, i32* %522
  %523 = add i64 %130, -389
  br label %block_407bae

block_4080fd:                                     ; preds = %block_408029
  %524 = inttoptr i64 %38 to i32*
  %525 = load i32, i32* %524
  %526 = add i32 %525, 1
  %527 = inttoptr i64 %38 to i32*
  store i32 %526, i32* %527
  %528 = add i64 %998, -229
  br label %block_408018

block_407fce:                                     ; preds = %block_407f68
  %529 = add i32 %366, 1
  %530 = inttoptr i64 %364 to i32*
  store i32 %529, i32* %530
  %531 = add i64 %363, -125
  br label %block_407f51

block_4078fc:                                     ; preds = %block_4078bb, %block_407acf
  %532 = phi i64 [ %644, %block_4078bb ], [ %604, %block_407acf ]
  %533 = phi %struct.Memory* [ %636, %block_4078bb ], [ %490, %block_407acf ]
  %534 = inttoptr i64 %643 to i32*
  %535 = load i32, i32* %534
  %536 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %537 = sub i32 %535, %536
  %538 = lshr i32 %537, 31
  %539 = trunc i32 %538 to i8
  %540 = lshr i32 %535, 31
  %541 = lshr i32 %536, 31
  %542 = xor i32 %541, %540
  %543 = xor i32 %538, %540
  %544 = add nuw nsw i32 %543, %542
  %545 = icmp eq i32 %544, 2
  %546 = icmp ne i8 %539, 0
  %547 = xor i1 %546, %545
  %548 = select i1 %547, i64 16, i64 486
  %549 = add i64 %532, %548
  br i1 %547, label %block_40790c, label %block_407ae2

block_407af9:                                     ; preds = %block_407ae9
  %550 = sext i32 %688 to i64
  %551 = shl nsw i64 %550, 3
  %552 = add i64 %551, ptrtoint (%dpcmor_type* @dpcmor to i64)
  %553 = inttoptr i64 %552 to double*
  %554 = load double, double* %553
  %555 = add i64 %551, ptrtoint (%rmor_type* @rmor to i64)
  %556 = inttoptr i64 %555 to double*
  %557 = load double, double* %556
  %558 = fmul double %554, %557
  %559 = add i64 %551, ptrtoint (%pmorx_type* @pmorx to i64)
  %560 = inttoptr i64 %559 to double*
  store double %558, double* %560
  %561 = inttoptr i64 %587 to double*
  %562 = load double, double* %561
  %563 = inttoptr i64 %586 to i32*
  %564 = load i32, i32* %563
  %565 = sext i32 %564 to i64
  %566 = shl nsw i64 %565, 3
  %567 = add i64 %566, ptrtoint (%rmor_type* @rmor to i64)
  %568 = inttoptr i64 %567 to double*
  %569 = load double, double* %568
  %570 = add i64 %566, ptrtoint (%pmorx_type* @pmorx to i64)
  %571 = inttoptr i64 %570 to double*
  %572 = load double, double* %571
  %573 = fmul double %569, %572
  store double %573, double* %650, align 1, !tbaa !1246
  store i64 0, i64* %651, align 1, !tbaa !1246
  %574 = fadd double %562, %573
  store double %574, double* %640, align 1, !tbaa !1246
  store i64 0, i64* %613, align 1, !tbaa !1246
  %575 = inttoptr i64 %587 to double*
  store double %574, double* %575
  %576 = inttoptr i64 %586 to i32*
  %577 = load i32, i32* %576
  %578 = add i32 %577, 1
  %579 = inttoptr i64 %586 to i32*
  store i32 %578, i32* %579
  %580 = add i64 %702, -16
  br label %block_407ae9

block_407ae2:                                     ; preds = %block_4078fc
  %581 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %582 = add i64 %638, -60
  %583 = add i64 %549, 7
  %584 = inttoptr i64 %582 to i32*
  store i32 0, i32* %584
  %585 = load i64, i64* %11, align 8
  %586 = add i64 %585, -60
  %587 = add i64 %585, -24
  br label %block_407ae9

block_4082e0:                                     ; preds = %block_4082d2
  store i64 5, i64* %9, align 8, !tbaa !1240
  %588 = add i64 %599, -10512
  %589 = add i64 %599, 10
  %590 = load i64, i64* %10, align 8, !tbaa !1240
  %591 = add i64 %590, -8
  %592 = inttoptr i64 %591 to i64*
  store i64 %589, i64* %592
  store i64 %591, i64* %10, align 8, !tbaa !1240
  %593 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %588, %struct.Memory* %595)
  br label %block_4082ea

block_4082d2:                                     ; preds = %block_4082c8, %block_4082a1
  %594 = phi i64 [ %724, %block_4082a1 ], [ %731, %block_4082c8 ]
  %595 = phi %struct.Memory* [ %719, %block_4082a1 ], [ %730, %block_4082c8 ]
  %596 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %597 = icmp eq i32 %596, 0
  %598 = select i1 %597, i64 24, i64 14
  %599 = add i64 %594, %598
  br i1 %597, label %block_4082ea, label %block_4082e0

block_407acf:                                     ; preds = %block_407913
  %600 = inttoptr i64 %643 to i32*
  %601 = load i32, i32* %600
  %602 = add i32 %601, 1
  %603 = inttoptr i64 %643 to i32*
  store i32 %602, i32* %603
  %604 = add i64 %502, -467
  br label %block_4078fc

block_407abc:                                     ; preds = %block_407924
  %605 = inttoptr i64 %646 to i32*
  %606 = load i32, i32* %605
  %607 = add i32 %606, 1
  %608 = inttoptr i64 %646 to i32*
  store i32 %607, i32* %608
  %609 = add i64 %473, -425
  br label %block_407913

block_4078bb:                                     ; preds = %block_4078ad, %block_4078a3
  %610 = phi i64 [ %711, %block_4078a3 ], [ %1109, %block_4078ad ]
  %611 = phi %struct.Memory* [ %705, %block_4078a3 ], [ %1108, %block_4078ad ]
  store i64 ptrtoint (%t_type* @t to i64), i64* %9, align 8, !tbaa !1240
  %612 = bitcast [32 x %union.VectorReg]* %12 to i8*
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %614 = bitcast [32 x %union.VectorReg]* %12 to i32*
  store i32 0, i32* %614, align 1, !tbaa !1244
  %615 = getelementptr inbounds i8, i8* %612, i64 4
  %616 = bitcast i8* %615 to i32*
  store i32 0, i32* %616, align 1, !tbaa !1244
  %617 = bitcast i64* %613 to i32*
  store i32 0, i32* %617, align 1, !tbaa !1244
  %618 = getelementptr inbounds i8, i8* %612, i64 12
  %619 = bitcast i8* %618 to i32*
  store i32 0, i32* %619, align 1, !tbaa !1244
  %620 = load i32, i32* bitcast (%ntot_type* @ntot to i32*)
  %621 = zext i32 %620 to i64
  store i64 %621, i64* %8, align 8, !tbaa !1240
  %622 = add i64 %610, 98197
  %623 = add i64 %610, 25
  %624 = load i64, i64* %10, align 8, !tbaa !1240
  %625 = add i64 %624, -8
  %626 = inttoptr i64 %625 to i64*
  store i64 %623, i64* %626
  store i64 %625, i64* %10, align 8, !tbaa !1240
  %627 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %622, %struct.Memory* %611)
  %628 = load i64, i64* %3, align 8
  store i64 ptrtoint (%umor_type* @umor to i64), i64* %9, align 8, !tbaa !1240
  store i32 0, i32* %614, align 1, !tbaa !1244
  store i32 0, i32* %616, align 1, !tbaa !1244
  store i32 0, i32* %617, align 1, !tbaa !1244
  store i32 0, i32* %619, align 1, !tbaa !1244
  %629 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %630 = zext i32 %629 to i64
  store i64 %630, i64* %8, align 8, !tbaa !1240
  %631 = add i64 %628, 98172
  %632 = add i64 %628, 25
  %633 = load i64, i64* %10, align 8, !tbaa !1240
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 %632, i64* %635
  store i64 %634, i64* %10, align 8, !tbaa !1240
  %636 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %631, %struct.Memory* %627)
  %637 = load i64, i64* %3, align 8
  store i32 0, i32* %614, align 1, !tbaa !1244
  store i32 0, i32* %616, align 1, !tbaa !1244
  store i32 0, i32* %617, align 1, !tbaa !1244
  store i32 0, i32* %619, align 1, !tbaa !1244
  %638 = load i64, i64* %11, align 8
  %639 = add i64 %638, -24
  %640 = bitcast [32 x %union.VectorReg]* %12 to double*
  %641 = load double, double* %640, align 1
  %642 = inttoptr i64 %639 to double*
  store double %641, double* %642
  %643 = add i64 %638, -56
  %644 = add i64 %637, 15
  %645 = inttoptr i64 %643 to i32*
  store i32 0, i32* %645
  %646 = add i64 %638, -76
  %647 = add i64 %638, -72
  %648 = add i64 %638, -68
  %649 = bitcast i64* %613 to double*
  %650 = bitcast %union.VectorReg* %13 to double*
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_4078fc

block_407ead:                                     ; preds = %block_407e9d
  %652 = sext i32 %737 to i64
  %653 = mul nsw i64 %652, 1000
  %654 = add i64 %653, ptrtoint (%pdiffp_type* @pdiffp to i64)
  %655 = add i64 %653, ptrtoint (%pdiff_type* @pdiff to i64)
  %656 = load i64, i64* %11, align 8
  %657 = add i64 %656, -56
  %658 = inttoptr i64 %657 to i32*
  %659 = load i32, i32* %658
  %660 = sext i32 %659 to i64
  %661 = shl nsw i64 %660, 2
  %662 = add i64 %661, ptrtoint (%size_e_type* @size_e to i64)
  %663 = inttoptr i64 %662 to i32*
  %664 = load i32, i32* %663
  %665 = zext i32 %664 to i64
  store i64 %665, i64* %7, align 8, !tbaa !1240
  store i64 %654, i64* %9, align 8, !tbaa !1240
  store i64 %655, i64* %8, align 8, !tbaa !1240
  %666 = add i64 %751, 1091
  %667 = add i64 %751, 70
  %668 = load i64, i64* %10, align 8, !tbaa !1240
  %669 = add i64 %668, -8
  %670 = inttoptr i64 %669 to i64*
  store i64 %667, i64* %670
  store i64 %669, i64* %10, align 8, !tbaa !1240
  %671 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull %0, i64 %666, %struct.Memory* %734)
  %672 = load i64, i64* %11, align 8
  %673 = add i64 %672, -56
  %674 = load i64, i64* %3, align 8
  %675 = inttoptr i64 %673 to i32*
  %676 = load i32, i32* %675
  %677 = add i32 %676, 1
  %678 = inttoptr i64 %673 to i32*
  store i32 %677, i32* %678
  %679 = add i64 %674, -86
  br label %block_407e9d

block_407aa9:                                     ; preds = %block_407935
  %680 = inttoptr i64 %647 to i32*
  %681 = load i32, i32* %680
  %682 = add i32 %681, 1
  %683 = inttoptr i64 %647 to i32*
  store i32 %682, i32* %683
  %684 = add i64 %1123, -389
  br label %block_407924

block_407ae9:                                     ; preds = %block_407ae2, %block_407af9
  %685 = phi i64 [ %583, %block_407ae2 ], [ %580, %block_407af9 ]
  %686 = phi %struct.Memory* [ %533, %block_407ae2 ], [ %686, %block_407af9 ]
  %687 = inttoptr i64 %586 to i32*
  %688 = load i32, i32* %687
  %689 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %690 = sub i32 %688, %689
  %691 = lshr i32 %690, 31
  %692 = trunc i32 %691 to i8
  %693 = lshr i32 %688, 31
  %694 = lshr i32 %689, 31
  %695 = xor i32 %694, %693
  %696 = xor i32 %691, %693
  %697 = add nuw nsw i32 %696, %695
  %698 = icmp eq i32 %697, 2
  %699 = icmp ne i8 %692, 0
  %700 = xor i1 %699, %698
  %701 = select i1 %700, i64 16, i64 109
  %702 = add i64 %685, %701
  br i1 %700, label %block_407af9, label %block_407b56

block_4078a3:                                     ; preds = %block_407899, %block_407880
  %703 = phi i64 [ %31, %block_407880 ], [ %758, %block_407899 ]
  %704 = phi i64 [ %16, %block_407880 ], [ %757, %block_407899 ]
  %705 = phi %struct.Memory* [ %2, %block_407880 ], [ %756, %block_407899 ]
  %706 = add i64 %704, -4
  %707 = inttoptr i64 %706 to i32*
  %708 = load i32, i32* %707
  %709 = icmp eq i32 %708, 0
  %710 = select i1 %709, i64 24, i64 10
  %711 = add i64 %703, %710
  br i1 %709, label %block_4078bb, label %block_4078ad

block_4082a1:                                     ; preds = %block_408289, %block_408297
  %712 = phi i64 [ %870, %block_408289 ], [ %783, %block_408297 ]
  %713 = phi %struct.Memory* [ %873, %block_408289 ], [ %782, %block_408297 ]
  store i64 ptrtoint (%umor_type* @umor to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%t_type* @t to i64), i64* %8, align 8, !tbaa !1240
  %714 = add i64 %712, 71631
  %715 = add i64 %712, 25
  %716 = load i64, i64* %10, align 8, !tbaa !1240
  %717 = add i64 %716, -8
  %718 = inttoptr i64 %717 to i64*
  store i64 %715, i64* %718
  store i64 %717, i64* %10, align 8, !tbaa !1240
  %719 = tail call %struct.Memory* @sub_419a70_transf(%struct.State* nonnull %0, i64 %714, %struct.Memory* %713)
  %720 = load i64, i64* %3, align 8
  %721 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %722 = icmp eq i32 %721, 0
  %723 = select i1 %722, i64 24, i64 14
  %724 = add i64 %720, %723
  br i1 %722, label %block_4082d2, label %block_4082c8

block_4082c8:                                     ; preds = %block_4082a1
  store i64 6, i64* %9, align 8, !tbaa !1240
  %725 = add i64 %724, -10488
  %726 = add i64 %724, 10
  %727 = load i64, i64* %10, align 8, !tbaa !1240
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i64*
  store i64 %726, i64* %729
  store i64 %728, i64* %10, align 8, !tbaa !1240
  %730 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %725, %struct.Memory* %719)
  %731 = load i64, i64* %3, align 8
  br label %block_4082d2

block_407e9d:                                     ; preds = %block_407e96, %block_407ead
  %732 = phi i64 [ %824, %block_407e96 ], [ %679, %block_407ead ]
  %733 = phi i64 [ %822, %block_407e96 ], [ %672, %block_407ead ]
  %734 = phi %struct.Memory* [ %821, %block_407e96 ], [ %671, %block_407ead ]
  %735 = add i64 %733, -56
  %736 = inttoptr i64 %735 to i32*
  %737 = load i32, i32* %736
  %738 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %739 = sub i32 %737, %738
  %740 = lshr i32 %739, 31
  %741 = trunc i32 %740 to i8
  %742 = lshr i32 %737, 31
  %743 = lshr i32 %738, 31
  %744 = xor i32 %743, %742
  %745 = xor i32 %740, %742
  %746 = add nuw nsw i32 %745, %744
  %747 = icmp eq i32 %746, 2
  %748 = icmp ne i8 %741, 0
  %749 = xor i1 %748, %747
  %750 = select i1 %749, i64 16, i64 100
  %751 = add i64 %732, %750
  br i1 %749, label %block_407ead, label %block_407f01

block_407899:                                     ; preds = %block_407880
  store i64 5, i64* %9, align 8, !tbaa !1240
  %752 = add i64 %31, -7961
  %753 = add i64 %31, 10
  %754 = add i64 %15, -96
  %755 = inttoptr i64 %754 to i64*
  store i64 %753, i64* %755
  store i64 %754, i64* %10, align 8, !tbaa !1240
  %756 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %752, %struct.Memory* %2)
  %757 = load i64, i64* %11, align 8
  %758 = load i64, i64* %3, align 8
  br label %block_4078a3

block_407ff0:                                     ; preds = %block_408123, %block_407fe1
  %759 = phi i64 [ %35, %block_407fe1 ], [ %1149, %block_408123 ]
  %760 = phi %struct.Memory* [ %418, %block_407fe1 ], [ %1125, %block_408123 ]
  %761 = inttoptr i64 %419 to i32*
  %762 = load i32, i32* %761
  %763 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %764 = sub i32 %762, %763
  %765 = lshr i32 %764, 31
  %766 = trunc i32 %765 to i8
  %767 = lshr i32 %762, 31
  %768 = lshr i32 %763, 31
  %769 = xor i32 %768, %767
  %770 = xor i32 %765, %767
  %771 = add nuw nsw i32 %770, %769
  %772 = icmp eq i32 %771, 2
  %773 = icmp ne i8 %766, 0
  %774 = xor i1 %773, %772
  %775 = select i1 %774, i64 16, i64 326
  %776 = add i64 %759, %775
  br i1 %774, label %block_408000, label %block_408136

block_408297:                                     ; preds = %block_408289
  store i64 6, i64* %9, align 8, !tbaa !1240
  %777 = add i64 %870, -10519
  %778 = add i64 %870, 10
  %779 = load i64, i64* %10, align 8, !tbaa !1240
  %780 = add i64 %779, -8
  %781 = inttoptr i64 %780 to i64*
  store i64 %778, i64* %781
  store i64 %780, i64* %10, align 8, !tbaa !1240
  %782 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %777, %struct.Memory* %873)
  %783 = load i64, i64* %3, align 8
  br label %block_4082a1

block_407d73:                                     ; preds = %block_407d6c, %block_407d83
  %784 = phi i64 [ %411, %block_407d6c ], [ %346, %block_407d83 ]
  %785 = phi %struct.Memory* [ %264, %block_407d6c ], [ %785, %block_407d83 ]
  %786 = inttoptr i64 %414 to i32*
  %787 = load i32, i32* %786
  %788 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %789 = sub i32 %787, %788
  %790 = lshr i32 %789, 31
  %791 = trunc i32 %790 to i8
  %792 = lshr i32 %787, 31
  %793 = lshr i32 %788, 31
  %794 = xor i32 %793, %792
  %795 = xor i32 %790, %792
  %796 = add nuw nsw i32 %795, %794
  %797 = icmp eq i32 %796, 2
  %798 = icmp ne i8 %791, 0
  %799 = xor i1 %798, %797
  %800 = select i1 %799, i64 16, i64 109
  %801 = add i64 %784, %800
  br i1 %799, label %block_407d83, label %block_407de0

block_40813d:                                     ; preds = %block_408136, %block_40814d
  %802 = phi i64 [ %437, %block_408136 ], [ %396, %block_40814d ]
  %803 = phi %struct.Memory* [ %760, %block_408136 ], [ %803, %block_40814d ]
  %804 = inttoptr i64 %440 to i32*
  %805 = load i32, i32* %804
  %806 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %807 = sub i32 %805, %806
  %808 = lshr i32 %807, 31
  %809 = trunc i32 %808 to i8
  %810 = lshr i32 %805, 31
  %811 = lshr i32 %806, 31
  %812 = xor i32 %811, %810
  %813 = xor i32 %808, %810
  %814 = add nuw nsw i32 %813, %812
  %815 = icmp eq i32 %814, 2
  %816 = icmp ne i8 %809, 0
  %817 = xor i1 %816, %815
  %818 = select i1 %817, i64 16, i64 109
  %819 = add i64 %802, %818
  br i1 %817, label %block_40814d, label %block_4081aa

block_407e96:                                     ; preds = %block_407e65, %block_407e8c
  %820 = phi i64 [ %905, %block_407e65 ], [ %832, %block_407e8c ]
  %821 = phi %struct.Memory* [ %900, %block_407e65 ], [ %831, %block_407e8c ]
  %822 = load i64, i64* %11, align 8
  %823 = add i64 %822, -56
  %824 = add i64 %820, 7
  %825 = inttoptr i64 %823 to i32*
  store i32 0, i32* %825
  br label %block_407e9d

block_407e8c:                                     ; preds = %block_407e65
  store i64 6, i64* %9, align 8, !tbaa !1240
  %826 = add i64 %905, -9404
  %827 = add i64 %905, 10
  %828 = load i64, i64* %10, align 8, !tbaa !1240
  %829 = add i64 %828, -8
  %830 = inttoptr i64 %829 to i64*
  store i64 %827, i64* %830
  store i64 %829, i64* %10, align 8, !tbaa !1240
  %831 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull %0, i64 %826, %struct.Memory* %900)
  %832 = load i64, i64* %3, align 8
  br label %block_407e96

block_407b56:                                     ; preds = %block_407ae9
  %833 = add i64 %585, -52
  %834 = add i64 %702, 7
  %835 = inttoptr i64 %833 to i32*
  store i32 1, i32* %835
  br label %block_407b5d

block_4082ea:                                     ; preds = %block_4082d2, %block_4082e0
  %836 = phi %struct.Memory* [ %595, %block_4082d2 ], [ %593, %block_4082e0 ]
  %837 = load i64, i64* %10, align 8
  %838 = add i64 %837, 80
  %839 = icmp ugt i64 %837, -81
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %19, align 1, !tbaa !1248
  %841 = trunc i64 %838 to i32
  %842 = and i32 %841, 255
  %843 = tail call i32 @llvm.ctpop.i32(i32 %842) #11
  %844 = trunc i32 %843 to i8
  %845 = and i8 %844, 1
  %846 = xor i8 %845, 1
  store i8 %846, i8* %20, align 1, !tbaa !1261
  %847 = xor i64 %837, 16
  %848 = xor i64 %847, %838
  %849 = lshr i64 %848, 4
  %850 = trunc i64 %849 to i8
  %851 = and i8 %850, 1
  store i8 %851, i8* %21, align 1, !tbaa !1262
  %852 = icmp eq i64 %838, 0
  %853 = zext i1 %852 to i8
  store i8 %853, i8* %22, align 1, !tbaa !1263
  %854 = lshr i64 %838, 63
  %855 = trunc i64 %854 to i8
  store i8 %855, i8* %23, align 1, !tbaa !1264
  %856 = lshr i64 %837, 63
  %857 = xor i64 %854, %856
  %858 = add nuw nsw i64 %857, %854
  %859 = icmp eq i64 %858, 2
  %860 = zext i1 %859 to i8
  store i8 %860, i8* %24, align 1, !tbaa !1265
  %861 = add i64 %837, 88
  %862 = inttoptr i64 %838 to i64*
  %863 = load i64, i64* %862
  store i64 %863, i64* %11, align 8, !tbaa !1240
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %3, align 8, !tbaa !1240
  %866 = add i64 %837, 96
  store i64 %866, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %836

block_408289:                                     ; preds = %block_407b5d
  %867 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %868 = icmp eq i32 %867, 0
  %869 = select i1 %868, i64 24, i64 14
  %870 = add i64 %892, %869
  br i1 %868, label %block_4082a1, label %block_408297

block_407b5d:                                     ; preds = %block_407b56, %block_4081aa
  %871 = phi i64 [ %834, %block_407b56 ], [ %262, %block_4081aa ]
  %872 = phi i64 [ %585, %block_407b56 ], [ %255, %block_4081aa ]
  %873 = phi %struct.Memory* [ %686, %block_407b56 ], [ %254, %block_4081aa ]
  %874 = add i64 %872, -52
  %875 = inttoptr i64 %874 to i32*
  %876 = load i32, i32* %875
  %877 = load i32, i32* bitcast (%nmxh_type* @nmxh to i32*)
  %878 = sub i32 %876, %877
  %879 = icmp eq i32 %878, 0
  %880 = lshr i32 %878, 31
  %881 = trunc i32 %880 to i8
  %882 = lshr i32 %876, 31
  %883 = lshr i32 %877, 31
  %884 = xor i32 %883, %882
  %885 = xor i32 %880, %882
  %886 = add nuw nsw i32 %885, %884
  %887 = icmp eq i32 %886, 2
  %888 = icmp ne i8 %881, 0
  %889 = xor i1 %888, %887
  %890 = or i1 %879, %889
  %891 = select i1 %890, i64 16, i64 1836
  %892 = add i64 %871, %891
  br i1 %890, label %block_407b6d, label %block_408289

block_407e65:                                     ; preds = %block_407e4d, %block_407e5b
  %893 = phi i64 [ %925, %block_407e4d ], [ %912, %block_407e5b ]
  %894 = phi %struct.Memory* [ %921, %block_407e4d ], [ %911, %block_407e5b ]
  store i64 ptrtoint (%pmorx_type* @pmorx to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%pdiff_type* @pdiff to i64), i64* %8, align 8, !tbaa !1240
  %895 = add i64 %893, 72715
  %896 = add i64 %893, 25
  %897 = load i64, i64* %10, align 8, !tbaa !1240
  %898 = add i64 %897, -8
  %899 = inttoptr i64 %898 to i64*
  store i64 %896, i64* %899
  store i64 %898, i64* %10, align 8, !tbaa !1240
  %900 = tail call %struct.Memory* @sub_419a70_transf(%struct.State* nonnull %0, i64 %895, %struct.Memory* %894)
  %901 = load i64, i64* %3, align 8
  %902 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %903 = icmp eq i32 %902, 0
  %904 = select i1 %903, i64 24, i64 14
  %905 = add i64 %901, %904
  br i1 %903, label %block_407e96, label %block_407e8c

block_407e5b:                                     ; preds = %block_407e4d
  store i64 6, i64* %9, align 8, !tbaa !1240
  %906 = add i64 %925, -9435
  %907 = add i64 %925, 10
  %908 = load i64, i64* %10, align 8, !tbaa !1240
  %909 = add i64 %908, -8
  %910 = inttoptr i64 %909 to i64*
  store i64 %907, i64* %910
  store i64 %909, i64* %10, align 8, !tbaa !1240
  %911 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %906, %struct.Memory* %921)
  %912 = load i64, i64* %3, align 8
  br label %block_407e65

block_407f0f:                                     ; preds = %block_407f01
  store i64 7, i64* %9, align 8, !tbaa !1240
  %913 = add i64 %518, -9615
  %914 = add i64 %518, 10
  %915 = load i64, i64* %10, align 8, !tbaa !1240
  %916 = add i64 %915, -8
  %917 = inttoptr i64 %916 to i64*
  store i64 %914, i64* %917
  store i64 %916, i64* %10, align 8, !tbaa !1240
  %918 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull %0, i64 %913, %struct.Memory* %734)
  %919 = load i64, i64* %3, align 8
  br label %block_407f19

block_407e4d:                                     ; preds = %block_407b6d, %block_407de0
  %920 = phi i64 [ %312, %block_407b6d ], [ %194, %block_407de0 ]
  %921 = phi %struct.Memory* [ %873, %block_407b6d ], [ %193, %block_407de0 ]
  %922 = load i32, i32* bitcast (%timeron_type* @timeron to i32*)
  %923 = icmp eq i32 %922, 0
  %924 = select i1 %923, i64 24, i64 14
  %925 = add i64 %920, %924
  br i1 %923, label %block_407e65, label %block_407e5b

block_407ba7:                                     ; preds = %block_407b9d
  %926 = add i64 %984, 7
  %927 = inttoptr i64 %288 to i32*
  store i32 0, i32* %927
  br label %block_407bae

block_408033:                                     ; preds = %block_408029
  %928 = inttoptr i64 %32 to double*
  %929 = load double, double* %928
  %930 = inttoptr i64 %419 to i32*
  %931 = load i32, i32* %930
  %932 = sext i32 %931 to i64
  %933 = mul nsw i64 %932, 1000
  %934 = add i64 %933, ptrtoint (%pdiff_type* @pdiff to i64)
  %935 = inttoptr i64 %37 to i32*
  %936 = load i32, i32* %935
  %937 = sext i32 %936 to i64
  %938 = mul nsw i64 %937, 200
  %939 = add i64 %938, %934
  %940 = inttoptr i64 %38 to i32*
  %941 = load i32, i32* %940
  %942 = sext i32 %941 to i64
  %943 = mul nsw i64 %942, 40
  %944 = add i64 %943, %939
  %945 = sext i32 %988 to i64
  %946 = shl nsw i64 %945, 3
  %947 = add i64 %946, %944
  %948 = inttoptr i64 %947 to double*
  %949 = load double, double* %948
  %950 = add i64 %933, ptrtoint (%pdiffp_type* @pdiffp to i64)
  %951 = add i64 %938, %950
  %952 = add i64 %943, %951
  %953 = add i64 %946, %952
  %954 = inttoptr i64 %953 to double*
  %955 = load double, double* %954
  %956 = fmul double %949, %955
  %957 = add i64 %933, ptrtoint (%tmult_type* @tmult to i64)
  %958 = add i64 %938, %957
  %959 = add i64 %943, %958
  store i64 %945, i64* %6, align 8, !tbaa !1240
  %960 = add i64 %946, %959
  %961 = inttoptr i64 %960 to double*
  %962 = load double, double* %961
  %963 = fmul double %956, %962
  store double %963, double* %650, align 1, !tbaa !1246
  store i64 0, i64* %651, align 1, !tbaa !1246
  %964 = fadd double %929, %963
  store double %964, double* %640, align 1, !tbaa !1246
  store i64 0, i64* %613, align 1, !tbaa !1246
  %965 = inttoptr i64 %32 to double*
  store double %964, double* %965
  %966 = inttoptr i64 %39 to i32*
  %967 = load i32, i32* %966
  %968 = add i32 %967, 1
  %969 = inttoptr i64 %39 to i32*
  store i32 %968, i32* %969
  %970 = add i64 %998, -10
  br label %block_408029

block_407b9d:                                     ; preds = %block_407b96, %block_407d46
  %971 = phi i64 [ %999, %block_407b96 ], [ %507, %block_407d46 ]
  %972 = phi %struct.Memory* [ %264, %block_407b96 ], [ %143, %block_407d46 ]
  %973 = inttoptr i64 %287 to i32*
  %974 = load i32, i32* %973
  %975 = add i32 %974, -5
  %976 = lshr i32 %975, 31
  %977 = lshr i32 %974, 31
  %978 = xor i32 %976, %977
  %979 = add nuw nsw i32 %978, %977
  %980 = icmp eq i32 %979, 2
  %981 = icmp ne i32 %976, 0
  %982 = xor i1 %981, %980
  %983 = select i1 %982, i64 10, i64 444
  %984 = add i64 %971, %983
  br i1 %982, label %block_407ba7, label %block_407d59

block_408029:                                     ; preds = %block_408022, %block_408033
  %985 = phi i64 [ %1001, %block_408022 ], [ %970, %block_408033 ]
  %986 = phi %struct.Memory* [ %1004, %block_408022 ], [ %986, %block_408033 ]
  %987 = inttoptr i64 %39 to i32*
  %988 = load i32, i32* %987
  %989 = add i32 %988, -5
  %990 = lshr i32 %989, 31
  %991 = lshr i32 %988, 31
  %992 = xor i32 %990, %991
  %993 = add nuw nsw i32 %992, %991
  %994 = icmp eq i32 %993, 2
  %995 = icmp ne i32 %990, 0
  %996 = xor i1 %995, %994
  %997 = select i1 %996, i64 10, i64 212
  %998 = add i64 %985, %997
  br i1 %996, label %block_408033, label %block_4080fd

block_407b96:                                     ; preds = %block_407b86
  %999 = add i64 %280, 7
  %1000 = inttoptr i64 %287 to i32*
  store i32 0, i32* %1000
  br label %block_407b9d

block_408022:                                     ; preds = %block_408018
  %1001 = add i64 %1016, 7
  %1002 = inttoptr i64 %39 to i32*
  store i32 0, i32* %1002
  br label %block_408029

block_408018:                                     ; preds = %block_408011, %block_4080fd
  %1003 = phi i64 [ %1094, %block_408011 ], [ %528, %block_4080fd ]
  %1004 = phi %struct.Memory* [ %1125, %block_408011 ], [ %986, %block_4080fd ]
  %1005 = inttoptr i64 %38 to i32*
  %1006 = load i32, i32* %1005
  %1007 = add i32 %1006, -5
  %1008 = lshr i32 %1007, 31
  %1009 = lshr i32 %1006, 31
  %1010 = xor i32 %1008, %1009
  %1011 = add nuw nsw i32 %1010, %1009
  %1012 = icmp eq i32 %1011, 2
  %1013 = icmp ne i32 %1008, 0
  %1014 = xor i1 %1013, %1012
  %1015 = select i1 %1014, i64 10, i64 248
  %1016 = add i64 %1003, %1015
  br i1 %1014, label %block_408022, label %block_408110

block_40793f:                                     ; preds = %block_407935
  %1017 = inttoptr i64 %643 to i32*
  %1018 = load i32, i32* %1017
  %1019 = sext i32 %1018 to i64
  %1020 = mul nsw i64 %1019, 1000
  %1021 = add i64 %1020, ptrtoint (%dpcelm_type* @dpcelm to i64)
  %1022 = inttoptr i64 %646 to i32*
  %1023 = load i32, i32* %1022
  %1024 = sext i32 %1023 to i64
  %1025 = mul nsw i64 %1024, 200
  %1026 = add i64 %1025, %1021
  %1027 = inttoptr i64 %647 to i32*
  %1028 = load i32, i32* %1027
  %1029 = sext i32 %1028 to i64
  %1030 = mul nsw i64 %1029, 40
  %1031 = add i64 %1030, %1026
  %1032 = sext i32 %1113 to i64
  %1033 = shl nsw i64 %1032, 3
  %1034 = add i64 %1033, %1031
  %1035 = inttoptr i64 %1034 to double*
  %1036 = load double, double* %1035
  %1037 = add i64 %1020, ptrtoint (%trhs_type* @trhs to i64)
  %1038 = add i64 %1025, %1037
  %1039 = add i64 %1030, %1038
  %1040 = add i64 %1033, %1039
  %1041 = inttoptr i64 %1040 to double*
  %1042 = load double, double* %1041
  %1043 = fmul double %1036, %1042
  %1044 = add i64 %1020, ptrtoint (%pdiff_type* @pdiff to i64)
  %1045 = add i64 %1025, %1044
  %1046 = add i64 %1030, %1045
  %1047 = add i64 %1033, %1046
  %1048 = inttoptr i64 %1047 to double*
  store double %1043, double* %1048
  %1049 = inttoptr i64 %639 to double*
  %1050 = load double, double* %1049
  %1051 = inttoptr i64 %643 to i32*
  %1052 = load i32, i32* %1051
  %1053 = sext i32 %1052 to i64
  %1054 = mul nsw i64 %1053, 1000
  %1055 = add i64 %1054, ptrtoint (%trhs_type* @trhs to i64)
  %1056 = inttoptr i64 %646 to i32*
  %1057 = load i32, i32* %1056
  %1058 = sext i32 %1057 to i64
  %1059 = mul nsw i64 %1058, 200
  %1060 = add i64 %1059, %1055
  %1061 = inttoptr i64 %647 to i32*
  %1062 = load i32, i32* %1061
  %1063 = sext i32 %1062 to i64
  %1064 = mul nsw i64 %1063, 40
  %1065 = add i64 %1064, %1060
  %1066 = inttoptr i64 %648 to i32*
  %1067 = load i32, i32* %1066
  %1068 = sext i32 %1067 to i64
  %1069 = shl nsw i64 %1068, 3
  %1070 = add i64 %1069, %1065
  %1071 = inttoptr i64 %1070 to double*
  %1072 = load double, double* %1071
  %1073 = add i64 %1054, ptrtoint (%pdiff_type* @pdiff to i64)
  %1074 = add i64 %1059, %1073
  %1075 = add i64 %1064, %1074
  store i64 %1068, i64* %7, align 8, !tbaa !1240
  %1076 = add i64 %1069, %1075
  %1077 = inttoptr i64 %1076 to double*
  %1078 = load double, double* %1077
  %1079 = fmul double %1072, %1078
  %1080 = add i64 %1054, ptrtoint (%tmult_type* @tmult to i64)
  %1081 = add i64 %1059, %1080
  %1082 = add i64 %1064, %1081
  store i64 %1068, i64* %6, align 8, !tbaa !1240
  %1083 = add i64 %1069, %1082
  %1084 = inttoptr i64 %1083 to double*
  %1085 = load double, double* %1084
  %1086 = fmul double %1079, %1085
  store double %1086, double* %650, align 1, !tbaa !1246
  store i64 0, i64* %651, align 1, !tbaa !1246
  %1087 = fadd double %1050, %1086
  store double %1087, double* %640, align 1, !tbaa !1246
  store i64 0, i64* %613, align 1, !tbaa !1246
  %1088 = inttoptr i64 %639 to double*
  store double %1087, double* %1088
  %1089 = inttoptr i64 %648 to i32*
  %1090 = load i32, i32* %1089
  %1091 = add i32 %1090, 1
  %1092 = inttoptr i64 %648 to i32*
  store i32 %1091, i32* %1092
  %1093 = add i64 %1123, -10
  br label %block_407935

block_408011:                                     ; preds = %block_408007
  %1094 = add i64 %1137, 7
  %1095 = inttoptr i64 %38 to i32*
  store i32 0, i32* %1095
  br label %block_408018

block_4078ad:                                     ; preds = %block_4078a3
  %1096 = add i64 %711, 44563
  %1097 = add i64 %711, 7
  %1098 = load i64, i64* %10, align 8, !tbaa !1240
  %1099 = add i64 %1098, -8
  %1100 = inttoptr i64 %1099 to i64*
  store i64 %1097, i64* %1100
  store i64 %1099, i64* %10, align 8, !tbaa !1240
  %1101 = tail call %struct.Memory* @sub_4126c0_setuppc(%struct.State* nonnull %0, i64 %1096, %struct.Memory* %705)
  %1102 = load i64, i64* %3, align 8
  %1103 = add i64 %1102, 53788
  %1104 = add i64 %1102, 7
  %1105 = load i64, i64* %10, align 8, !tbaa !1240
  %1106 = add i64 %1105, -8
  %1107 = inttoptr i64 %1106 to i64*
  store i64 %1104, i64* %1107
  store i64 %1106, i64* %10, align 8, !tbaa !1240
  %1108 = tail call %struct.Memory* @sub_414ad0_setpcmo(%struct.State* nonnull %0, i64 %1103, %struct.Memory* %1101)
  %1109 = load i64, i64* %3, align 8
  br label %block_4078bb

block_407935:                                     ; preds = %block_40792e, %block_40793f
  %1110 = phi i64 [ %1143, %block_40792e ], [ %1093, %block_40793f ]
  %1111 = phi %struct.Memory* [ %461, %block_40792e ], [ %1111, %block_40793f ]
  %1112 = inttoptr i64 %648 to i32*
  %1113 = load i32, i32* %1112
  %1114 = add i32 %1113, -5
  %1115 = lshr i32 %1114, 31
  %1116 = lshr i32 %1113, 31
  %1117 = xor i32 %1115, %1116
  %1118 = add nuw nsw i32 %1117, %1116
  %1119 = icmp eq i32 %1118, 2
  %1120 = icmp ne i32 %1115, 0
  %1121 = xor i1 %1120, %1119
  %1122 = select i1 %1121, i64 10, i64 372
  %1123 = add i64 %1110, %1122
  br i1 %1121, label %block_40793f, label %block_407aa9

block_408007:                                     ; preds = %block_408000, %block_408110
  %1124 = phi i64 [ %1150, %block_408000 ], [ %512, %block_408110 ]
  %1125 = phi %struct.Memory* [ %760, %block_408000 ], [ %1004, %block_408110 ]
  %1126 = inttoptr i64 %37 to i32*
  %1127 = load i32, i32* %1126
  %1128 = add i32 %1127, -5
  %1129 = lshr i32 %1128, 31
  %1130 = lshr i32 %1127, 31
  %1131 = xor i32 %1129, %1130
  %1132 = add nuw nsw i32 %1131, %1130
  %1133 = icmp eq i32 %1132, 2
  %1134 = icmp ne i32 %1129, 0
  %1135 = xor i1 %1134, %1133
  %1136 = select i1 %1135, i64 10, i64 284
  %1137 = add i64 %1124, %1136
  br i1 %1135, label %block_408011, label %block_408123

block_407d59:                                     ; preds = %block_407b9d
  %1138 = inttoptr i64 %284 to i32*
  %1139 = load i32, i32* %1138
  %1140 = add i32 %1139, 1
  %1141 = inttoptr i64 %284 to i32*
  store i32 %1140, i32* %1141
  %1142 = add i64 %984, -467
  br label %block_407b86

block_40792e:                                     ; preds = %block_407924
  %1143 = add i64 %473, 7
  %1144 = inttoptr i64 %648 to i32*
  store i32 0, i32* %1144
  br label %block_407935

block_408123:                                     ; preds = %block_408007
  %1145 = inttoptr i64 %419 to i32*
  %1146 = load i32, i32* %1145
  %1147 = add i32 %1146, 1
  %1148 = inttoptr i64 %419 to i32*
  store i32 %1147, i32* %1148
  %1149 = add i64 %1137, -307
  br label %block_407ff0

block_408000:                                     ; preds = %block_407ff0
  %1150 = add i64 %776, 7
  %1151 = inttoptr i64 %37 to i32*
  store i32 0, i32* %1151
  br label %block_408007
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4054e0_ifcor(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4054e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %18 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %23 = load i64, i64* %20, align 8
  %24 = load i64, i64* %19, align 8, !tbaa !1240
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  store i64 %23, i64* %26
  store i64 %25, i64* %20, align 8, !tbaa !1240
  %27 = add i64 %24, -40
  store i64 %27, i64* %19, align 8, !tbaa !1240
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ptrtoint (%e2v1_type* @e2v1 to i64), i64* %14, align 8, !tbaa !1240
  %34 = add i64 %24, -12
  %35 = load i32, i32* %13, align 4
  %36 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %36
  %37 = add i64 %24, -16
  %38 = load i32, i32* %11, align 4
  %39 = inttoptr i64 %37 to i32*
  store i32 %38, i32* %39
  %40 = add i64 %24, -20
  %41 = load i32, i32* %9, align 4
  %42 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %42
  %43 = add i64 %24, -24
  %44 = load i32, i32* %7, align 4
  %45 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %45
  %46 = add i64 %24, -28
  %47 = inttoptr i64 %46 to i32*
  store i32 0, i32* %47
  %48 = inttoptr i64 %34 to i32*
  %49 = load i32, i32* %48
  %50 = zext i32 %49 to i64
  store i64 %50, i64* %18, align 8, !tbaa !1240
  %51 = inttoptr i64 %40 to i32*
  %52 = load i32, i32* %51
  %53 = sext i32 %52 to i64
  %54 = mul nsw i64 %53, 24
  %55 = add i64 %54, ptrtoint (%e1v1_type* @e1v1 to i64)
  %56 = load i64, i64* %20, align 8
  %57 = add i64 %56, -16
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58
  %60 = sext i32 %59 to i64
  store i64 %60, i64* %22, align 8, !tbaa !1240
  %61 = shl nsw i64 %60, 2
  %62 = add i64 %61, %55
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %17, align 8, !tbaa !1240
  %66 = add i64 %56, -8
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %16, align 8, !tbaa !1240
  %70 = add i64 %56, -12
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = sext i32 %72 to i64
  %74 = mul nsw i64 %73, 24
  %75 = load i64, i64* %14, align 8
  %76 = add i64 %74, %75
  store i64 %60, i64* %21, align 8, !tbaa !1240
  %77 = add i64 %61, %76
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %15, align 8, !tbaa !1240
  %81 = add i64 %1, 49584
  %82 = add i64 %1, 96
  %83 = load i64, i64* %19, align 8, !tbaa !1240
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85
  store i64 %84, i64* %19, align 8, !tbaa !1240
  %86 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %81, %struct.Memory* %2)
  %87 = load i32, i32* %5, align 4
  %88 = load i64, i64* %3, align 8
  %89 = icmp eq i32 %87, 0
  %90 = select i1 %89, i64 9, i64 85
  %91 = add i64 %88, %90
  br i1 %89, label %block_405549, label %block_405595

block_405595:                                     ; preds = %block_405549, %block_4054e0
  %92 = phi %struct.Memory* [ %86, %block_4054e0 ], [ %172, %block_405549 ]
  %93 = load i64, i64* %20, align 8
  %94 = add i64 %93, -20
  %95 = inttoptr i64 %94 to i32*
  store i32 1, i32* %95
  br label %block_40559c

block_40559c:                                     ; preds = %block_405549.block_40559c_crit_edge, %block_405595
  %96 = phi i64 [ %93, %block_405595 ], [ %175, %block_405549.block_40559c_crit_edge ]
  %97 = phi %struct.Memory* [ %92, %block_405595 ], [ %172, %block_405549.block_40559c_crit_edge ]
  %98 = add i64 %96, -20
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %14, align 8, !tbaa !1240
  %102 = load i64, i64* %19, align 8
  %103 = add i64 %102, 32
  %104 = icmp ugt i64 %102, -33
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %28, align 1, !tbaa !1248
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #11
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %29, align 1, !tbaa !1261
  %112 = xor i64 %103, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %30, align 1, !tbaa !1262
  %116 = icmp eq i64 %103, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %31, align 1, !tbaa !1263
  %118 = lshr i64 %103, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %32, align 1, !tbaa !1264
  %120 = lshr i64 %102, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %33, align 1, !tbaa !1265
  %125 = add i64 %102, 40
  %126 = inttoptr i64 %103 to i64*
  %127 = load i64, i64* %126
  store i64 %127, i64* %20, align 8, !tbaa !1240
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %3, align 8, !tbaa !1240
  %130 = add i64 %102, 48
  store i64 %130, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %97

block_405549:                                     ; preds = %block_4054e0
  store i64 ptrtoint (%e2v2_type* @e2v2 to i64), i64* %14, align 8, !tbaa !1240
  %131 = load i64, i64* %20, align 8
  %132 = add i64 %131, -4
  %133 = inttoptr i64 %132 to i32*
  %134 = load i32, i32* %133
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %18, align 8, !tbaa !1240
  %136 = add i64 %131, -12
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = sext i32 %138 to i64
  %140 = mul nsw i64 %139, 24
  %141 = add i64 %140, ptrtoint (%e1v2_type* @e1v2 to i64)
  %142 = add i64 %131, -16
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = sext i32 %144 to i64
  %146 = shl nsw i64 %145, 2
  %147 = add i64 %146, %141
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = zext i32 %149 to i64
  store i64 %150, i64* %17, align 8, !tbaa !1240
  %151 = add i64 %131, -8
  %152 = inttoptr i64 %151 to i32*
  %153 = load i32, i32* %152
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %16, align 8, !tbaa !1240
  %155 = load i64, i64* %14, align 8
  %156 = add i64 %140, %155
  %157 = load i64, i64* %20, align 8
  %158 = add i64 %157, -16
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159
  %161 = sext i32 %160 to i64
  %162 = shl nsw i64 %161, 2
  %163 = add i64 %162, %156
  %164 = inttoptr i64 %163 to i32*
  %165 = load i32, i32* %164
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %15, align 8, !tbaa !1240
  %167 = add i64 %91, 49479
  %168 = add i64 %91, 67
  %169 = load i64, i64* %19, align 8, !tbaa !1240
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %168, i64* %171
  store i64 %170, i64* %19, align 8, !tbaa !1240
  %172 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull %0, i64 %167, %struct.Memory* %86)
  %173 = load i32, i32* %5, align 4
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %block_405549.block_40559c_crit_edge, label %block_405595

block_405549.block_40559c_crit_edge:              ; preds = %block_405549
  %175 = load i64, i64* %20, align 8
  br label %block_40559c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41e330_transfb_c_2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41e330:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %14 = load i64, i64* %10, align 8
  %15 = load i64, i64* %9, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %26, align 1, !tbaa !1244
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = bitcast i64* %25 to i32*
  store i32 0, i32* %29, align 1, !tbaa !1244
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1, !tbaa !1244
  %32 = bitcast %union.VectorReg* %12 to i8*
  %33 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1944) to double*)
  %34 = bitcast %union.VectorReg* %12 to double*
  store double %33, double* %34, align 1, !tbaa !1246
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %36 = bitcast i64* %35 to double*
  store double 0.000000e+00, double* %36, align 1, !tbaa !1246
  %37 = add i64 %15, -16
  %38 = load i64, i64* %8, align 8
  %39 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %39
  %40 = add i64 %15, -24
  %41 = inttoptr i64 %40 to double*
  store double %33, double* %41
  %42 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %7, align 8, !tbaa !1240
  store i64 ptrtoint (%tmort_type* @tmort to i64), i64* %8, align 8, !tbaa !1240
  %44 = add i64 %1, 5408
  %45 = add i64 %1, 53
  %46 = add i64 %15, -96
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  store i64 %46, i64* %9, align 8, !tbaa !1240
  %48 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %44, %struct.Memory* %2)
  %49 = load i64, i64* %3, align 8
  store i64 ptrtoint (%mormult_type* @mormult to i64), i64* %8, align 8, !tbaa !1240
  store i32 0, i32* %26, align 1, !tbaa !1244
  store i32 0, i32* %28, align 1, !tbaa !1244
  store i32 0, i32* %29, align 1, !tbaa !1244
  store i32 0, i32* %31, align 1, !tbaa !1244
  %50 = load i32, i32* bitcast (%nmor_type* @nmor to i32*)
  %51 = zext i32 %50 to i64
  store i64 %51, i64* %7, align 8, !tbaa !1240
  %52 = add i64 %49, 5355
  %53 = add i64 %49, 25
  %54 = load i64, i64* %9, align 8, !tbaa !1240
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56
  store i64 %55, i64* %9, align 8, !tbaa !1240
  %57 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %52, %struct.Memory* %48)
  %58 = load i64, i64* %10, align 8
  %59 = add i64 %58, -52
  %60 = inttoptr i64 %59 to i32*
  store i32 0, i32* %60
  %61 = add i64 %58, -56
  %62 = bitcast [32 x %union.VectorReg]* %11 to double*
  %63 = bitcast i64* %25 to double*
  %64 = add i64 %58, -20
  %65 = add i64 %58, -24
  %66 = add i64 %58, -28
  %67 = add i64 %58, -32
  %68 = add i64 %58, -36
  %69 = add i64 %58, -40
  %70 = add i64 %58, -44
  %71 = add i64 %58, -48
  %72 = add i64 %58, -8
  %73 = bitcast %union.VectorReg* %13 to i8*
  %74 = bitcast [32 x %union.VectorReg]* %11 to <2 x i32>*
  %75 = bitcast i64* %25 to <2 x i32>*
  %76 = bitcast %union.VectorReg* %13 to i32*
  %77 = getelementptr inbounds i8, i8* %73, i64 4
  %78 = bitcast i8* %77 to i32*
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %80 = bitcast i64* %79 to i32*
  %81 = getelementptr inbounds i8, i8* %73, i64 12
  %82 = bitcast i8* %81 to i32*
  %83 = bitcast %union.VectorReg* %13 to double*
  %84 = bitcast %union.VectorReg* %12 to i32*
  %85 = getelementptr inbounds i8, i8* %32, i64 4
  %86 = bitcast i8* %85 to i32*
  %87 = bitcast i64* %35 to i32*
  %88 = getelementptr inbounds i8, i8* %32, i64 12
  %89 = bitcast i8* %88 to i32*
  %90 = add i64 %58, -60
  %91 = add i64 %58, -64
  %92 = add i64 %58, -72
  %93 = add i64 %58, -68
  %94 = bitcast i64* %25 to <2 x i32>*
  br label %block_41e385

block_41e76b:                                     ; preds = %block_41e761
  %95 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %96 = inttoptr i64 %59 to i32*
  %97 = load i32, i32* %96
  %98 = sext i32 %97 to i64
  %99 = mul nsw i64 %98, 600
  %100 = add i64 %99, ptrtoint (%idel_type* @idel to i64)
  %101 = inttoptr i64 %61 to i32*
  %102 = load i32, i32* %101
  %103 = sext i32 %102 to i64
  %104 = mul nsw i64 %103, 100
  %105 = add i64 %104, %100
  %106 = sext i32 %439 to i64
  store i64 %106, i64* %6, align 8, !tbaa !1240
  %107 = shl nsw i64 %106, 2
  %108 = add i64 %107, %105
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109
  %111 = inttoptr i64 %92 to i32*
  store i32 %110, i32* %111
  %112 = inttoptr i64 %59 to i32*
  %113 = load i32, i32* %112
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, 2400
  %116 = add i64 %115, ptrtoint (%idmo_type* @idmo to i64)
  %117 = inttoptr i64 %61 to i32*
  %118 = load i32, i32* %117
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %119, 400
  %121 = add i64 %120, %116
  %122 = inttoptr i64 %91 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  %125 = shl nsw i64 %124, 2
  %126 = add i64 %125, %121
  %127 = inttoptr i64 %126 to i32*
  %128 = load i32, i32* %127
  %129 = zext i32 %128 to i64
  store i64 %129, i64* %7, align 8, !tbaa !1240
  %130 = inttoptr i64 %93 to i32*
  store i32 %128, i32* %130
  %131 = inttoptr i64 %93 to i32*
  %132 = load i32, i32* %131
  %133 = sext i32 %132 to i64
  %134 = shl nsw i64 %133, 3
  %135 = add i64 %134, ptrtoint (%tmort_type* @tmort to i64)
  %136 = inttoptr i64 %135 to double*
  %137 = load double, double* %136
  %138 = inttoptr i64 %72 to i64*
  %139 = load i64, i64* %138
  %140 = inttoptr i64 %92 to i32*
  %141 = load i32, i32* %140
  %142 = sext i32 %141 to i64
  %143 = bitcast double %95 to <2 x i32>
  %144 = extractelement <2 x i32> %143, i32 0
  store i32 %144, i32* %76, align 1, !tbaa !1266
  %145 = extractelement <2 x i32> %143, i32 1
  store i32 %145, i32* %78, align 1, !tbaa !1266
  store i32 0, i32* %80, align 1, !tbaa !1266
  store i32 0, i32* %82, align 1, !tbaa !1266
  %146 = shl nsw i64 %142, 3
  %147 = add i64 %146, %139
  %148 = load double, double* %83, align 1
  %149 = inttoptr i64 %147 to double*
  %150 = load double, double* %149
  %151 = fmul double %148, %150
  store double %151, double* %83, align 1, !tbaa !1246
  %152 = fadd double %137, %151
  store double %152, double* %34, align 1, !tbaa !1246
  store i64 0, i64* %35, align 1, !tbaa !1246
  %153 = inttoptr i64 %135 to double*
  store double %152, double* %153
  %154 = inttoptr i64 %93 to i32*
  %155 = load i32, i32* %154
  %156 = sext i32 %155 to i64
  %157 = shl nsw i64 %156, 3
  %158 = add i64 %157, ptrtoint (%mormult_type* @mormult to i64)
  %159 = inttoptr i64 %158 to double*
  %160 = load double, double* %159
  %161 = fadd double %95, %160
  store double %161, double* %62, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %162 = inttoptr i64 %158 to double*
  store double %161, double* %162
  %163 = inttoptr i64 %91 to i32*
  %164 = load i32, i32* %163
  %165 = add i32 %164, 1
  %166 = inttoptr i64 %91 to i32*
  store i32 %165, i32* %166
  br label %block_41e761

block_41eb68:                                     ; preds = %block_41e39c
  %167 = add i32 %573, 1
  %168 = inttoptr i64 %59 to i32*
  store i32 %167, i32* %168
  br label %block_41e385

block_41ea7a:                                     ; preds = %block_41ea84, %block_41ea73
  %169 = phi %struct.Memory* [ %448, %block_41ea73 ], [ %169, %block_41ea84 ]
  %170 = inttoptr i64 %91 to i32*
  %171 = load i32, i32* %170
  %172 = add i32 %171, -4
  %173 = lshr i32 %172, 31
  %174 = lshr i32 %171, 31
  %175 = xor i32 %173, %174
  %176 = add nuw nsw i32 %175, %174
  %177 = icmp eq i32 %176, 2
  %178 = icmp ne i32 %173, 0
  %179 = xor i1 %178, %177
  br i1 %179, label %block_41ea84, label %block_41eb55.loopexit

block_41e865:                                     ; preds = %block_41e86f, %block_41e85e
  %180 = phi %struct.Memory* [ %522, %block_41e85e ], [ %180, %block_41e86f ]
  %181 = inttoptr i64 %91 to i32*
  %182 = load i32, i32* %181
  %183 = add i32 %182, -4
  %184 = lshr i32 %183, 31
  %185 = lshr i32 %182, 31
  %186 = xor i32 %184, %185
  %187 = add nuw nsw i32 %186, %185
  %188 = icmp eq i32 %187, 2
  %189 = icmp ne i32 %184, 0
  %190 = xor i1 %189, %188
  br i1 %190, label %block_41e86f, label %block_41e93d.loopexit

block_41ea73:                                     ; preds = %block_41ea43
  %191 = inttoptr i64 %91 to i32*
  store i32 1, i32* %191
  br label %block_41ea7a

block_41e85e:                                     ; preds = %block_41e82b
  %192 = inttoptr i64 %91 to i32*
  store i32 1, i32* %192
  br label %block_41e865

block_41eb55.loopexit:                            ; preds = %block_41ea7a
  br label %block_41eb55

block_41eb55:                                     ; preds = %block_41e3a6, %block_41ea43, %block_41eb55.loopexit
  %193 = phi %struct.Memory* [ %561, %block_41e3a6 ], [ %448, %block_41ea43 ], [ %169, %block_41eb55.loopexit ]
  %194 = inttoptr i64 %61 to i32*
  %195 = load i32, i32* %194
  %196 = add i32 %195, 1
  %197 = inttoptr i64 %61 to i32*
  store i32 %196, i32* %197
  br label %block_41e39c

block_41e3c9:                                     ; preds = %block_41e3a6
  %198 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1944) to double*)
  store double %198, double* %62, align 1, !tbaa !1246
  store double 0.000000e+00, double* %63, align 1, !tbaa !1246
  %199 = mul nsw i64 %551, 600
  %200 = add i64 %199, ptrtoint (%idel_type* @idel to i64)
  %201 = mul nsw i64 %554, 100
  %202 = add i64 %201, %200
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203
  %205 = inttoptr i64 %64 to i32*
  store i32 %204, i32* %205
  %206 = inttoptr i64 %59 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %207 to i64
  %209 = mul nsw i64 %208, 600
  %210 = add i64 %209, ptrtoint (%idel_type* @idel to i64)
  %211 = inttoptr i64 %61 to i32*
  %212 = load i32, i32* %211
  %213 = sext i32 %212 to i64
  %214 = mul nsw i64 %213, 100
  %215 = add i64 %214, %210
  %216 = add i64 %215, 16
  %217 = inttoptr i64 %216 to i32*
  %218 = load i32, i32* %217
  %219 = inttoptr i64 %65 to i32*
  store i32 %218, i32* %219
  %220 = inttoptr i64 %59 to i32*
  %221 = load i32, i32* %220
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, 600
  %224 = add i64 %223, ptrtoint (%idel_type* @idel to i64)
  %225 = inttoptr i64 %61 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  %228 = mul nsw i64 %227, 100
  %229 = add i64 %228, %224
  store i64 %229, i64* %7, align 8, !tbaa !1240
  %230 = add i64 %229, 80
  %231 = inttoptr i64 %230 to i32*
  %232 = load i32, i32* %231
  %233 = inttoptr i64 %66 to i32*
  store i32 %232, i32* %233
  %234 = inttoptr i64 %59 to i32*
  %235 = load i32, i32* %234
  %236 = sext i32 %235 to i64
  %237 = mul nsw i64 %236, 600
  %238 = add i64 %237, ptrtoint (%idel_type* @idel to i64)
  %239 = inttoptr i64 %61 to i32*
  %240 = load i32, i32* %239
  %241 = sext i32 %240 to i64
  %242 = mul nsw i64 %241, 100
  %243 = add i64 %242, %238
  %244 = add i64 %243, 96
  %245 = inttoptr i64 %244 to i32*
  %246 = load i32, i32* %245
  %247 = inttoptr i64 %67 to i32*
  store i32 %246, i32* %247
  %248 = inttoptr i64 %59 to i32*
  %249 = load i32, i32* %248
  %250 = sext i32 %249 to i64
  %251 = mul nsw i64 %250, 2400
  %252 = add i64 %251, ptrtoint (%idmo_type* @idmo to i64)
  %253 = inttoptr i64 %61 to i32*
  %254 = load i32, i32* %253
  %255 = sext i32 %254 to i64
  %256 = mul nsw i64 %255, 400
  %257 = add i64 %256, %252
  %258 = inttoptr i64 %257 to i32*
  %259 = load i32, i32* %258
  %260 = inttoptr i64 %68 to i32*
  store i32 %259, i32* %260
  %261 = inttoptr i64 %59 to i32*
  %262 = load i32, i32* %261
  %263 = sext i32 %262 to i64
  %264 = mul nsw i64 %263, 2400
  %265 = add i64 %264, ptrtoint (%idmo_type* @idmo to i64)
  %266 = inttoptr i64 %61 to i32*
  %267 = load i32, i32* %266
  %268 = sext i32 %267 to i64
  %269 = mul nsw i64 %268, 400
  %270 = add i64 %269, %265
  %271 = add i64 %270, 216
  %272 = inttoptr i64 %271 to i32*
  %273 = load i32, i32* %272
  %274 = inttoptr i64 %69 to i32*
  store i32 %273, i32* %274
  %275 = inttoptr i64 %59 to i32*
  %276 = load i32, i32* %275
  %277 = sext i32 %276 to i64
  %278 = mul nsw i64 %277, 2400
  %279 = add i64 %278, ptrtoint (%idmo_type* @idmo to i64)
  %280 = inttoptr i64 %61 to i32*
  %281 = load i32, i32* %280
  %282 = sext i32 %281 to i64
  %283 = mul nsw i64 %282, 400
  %284 = add i64 %283, %279
  store i64 %284, i64* %6, align 8, !tbaa !1240
  %285 = add i64 %284, 180
  %286 = inttoptr i64 %285 to i32*
  %287 = load i32, i32* %286
  %288 = inttoptr i64 %70 to i32*
  store i32 %287, i32* %288
  %289 = inttoptr i64 %59 to i32*
  %290 = load i32, i32* %289
  %291 = sext i32 %290 to i64
  %292 = mul nsw i64 %291, 2400
  %293 = add i64 %292, ptrtoint (%idmo_type* @idmo to i64)
  %294 = inttoptr i64 %61 to i32*
  %295 = load i32, i32* %294
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %296, 400
  %298 = add i64 %297, %293
  %299 = add i64 %298, 396
  %300 = inttoptr i64 %299 to i32*
  %301 = load i32, i32* %300
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %8, align 8, !tbaa !1240
  %303 = inttoptr i64 %71 to i32*
  store i32 %301, i32* %303
  %304 = inttoptr i64 %68 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 3
  %308 = add i64 %307, ptrtoint (%tmort_type* @tmort to i64)
  %309 = inttoptr i64 %308 to double*
  %310 = load double, double* %309
  %311 = inttoptr i64 %72 to i64*
  %312 = load i64, i64* %311
  %313 = inttoptr i64 %64 to i32*
  %314 = load i32, i32* %313
  %315 = sext i32 %314 to i64
  %316 = load <2 x i32>, <2 x i32>* %74, align 1
  %317 = load <2 x i32>, <2 x i32>* %75, align 1
  %318 = extractelement <2 x i32> %316, i32 0
  store i32 %318, i32* %76, align 1, !tbaa !1266
  %319 = extractelement <2 x i32> %316, i32 1
  store i32 %319, i32* %78, align 1, !tbaa !1266
  %320 = extractelement <2 x i32> %317, i32 0
  %321 = extractelement <2 x i32> %317, i32 1
  %322 = shl nsw i64 %315, 3
  %323 = add i64 %322, %312
  %324 = load double, double* %83, align 1
  %325 = inttoptr i64 %323 to double*
  %326 = load double, double* %325
  %327 = fmul double %324, %326
  %328 = fadd double %310, %327
  %329 = inttoptr i64 %308 to double*
  store double %328, double* %329
  %330 = inttoptr i64 %69 to i32*
  %331 = load i32, i32* %330
  %332 = sext i32 %331 to i64
  %333 = shl nsw i64 %332, 3
  %334 = add i64 %333, ptrtoint (%tmort_type* @tmort to i64)
  %335 = inttoptr i64 %334 to double*
  %336 = load double, double* %335
  %337 = inttoptr i64 %72 to i64*
  %338 = load i64, i64* %337
  %339 = inttoptr i64 %65 to i32*
  %340 = load i32, i32* %339
  %341 = sext i32 %340 to i64
  store i32 %318, i32* %76, align 1, !tbaa !1266
  store i32 %319, i32* %78, align 1, !tbaa !1266
  %342 = shl nsw i64 %341, 3
  %343 = add i64 %342, %338
  %344 = load double, double* %83, align 1
  %345 = inttoptr i64 %343 to double*
  %346 = load double, double* %345
  %347 = fmul double %344, %346
  %348 = fadd double %336, %347
  %349 = inttoptr i64 %334 to double*
  store double %348, double* %349
  %350 = inttoptr i64 %70 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = shl nsw i64 %352, 3
  %354 = add i64 %353, ptrtoint (%tmort_type* @tmort to i64)
  %355 = inttoptr i64 %354 to double*
  %356 = load double, double* %355
  %357 = inttoptr i64 %72 to i64*
  %358 = load i64, i64* %357
  %359 = inttoptr i64 %66 to i32*
  %360 = load i32, i32* %359
  %361 = sext i32 %360 to i64
  store i32 %318, i32* %76, align 1, !tbaa !1266
  store i32 %319, i32* %78, align 1, !tbaa !1266
  %362 = shl nsw i64 %361, 3
  %363 = add i64 %362, %358
  %364 = load double, double* %83, align 1
  %365 = inttoptr i64 %363 to double*
  %366 = load double, double* %365
  %367 = fmul double %364, %366
  %368 = fadd double %356, %367
  %369 = inttoptr i64 %354 to double*
  store double %368, double* %369
  %370 = inttoptr i64 %71 to i32*
  %371 = load i32, i32* %370
  %372 = sext i32 %371 to i64
  %373 = shl nsw i64 %372, 3
  %374 = add i64 %373, ptrtoint (%tmort_type* @tmort to i64)
  %375 = inttoptr i64 %374 to double*
  %376 = load double, double* %375
  %377 = inttoptr i64 %72 to i64*
  %378 = load i64, i64* %377
  %379 = inttoptr i64 %67 to i32*
  %380 = load i32, i32* %379
  %381 = sext i32 %380 to i64
  store i32 %318, i32* %76, align 1, !tbaa !1266
  store i32 %319, i32* %78, align 1, !tbaa !1266
  store i32 %320, i32* %80, align 1, !tbaa !1266
  store i32 %321, i32* %82, align 1, !tbaa !1266
  %382 = shl nsw i64 %381, 3
  %383 = add i64 %382, %378
  %384 = load double, double* %83, align 1
  %385 = inttoptr i64 %383 to double*
  %386 = load double, double* %385
  %387 = fmul double %384, %386
  store double %387, double* %83, align 1, !tbaa !1246
  %388 = fadd double %376, %387
  %389 = inttoptr i64 %374 to double*
  store double %388, double* %389
  %390 = inttoptr i64 %68 to i32*
  %391 = load i32, i32* %390
  %392 = sext i32 %391 to i64
  %393 = load <2 x i32>, <2 x i32>* %74, align 1
  %394 = load <2 x i32>, <2 x i32>* %75, align 1
  %395 = extractelement <2 x i32> %393, i32 0
  store i32 %395, i32* %84, align 1, !tbaa !1266
  %396 = extractelement <2 x i32> %393, i32 1
  store i32 %396, i32* %86, align 1, !tbaa !1266
  %397 = extractelement <2 x i32> %394, i32 0
  %398 = extractelement <2 x i32> %394, i32 1
  %399 = shl nsw i64 %392, 3
  %400 = add i64 %399, ptrtoint (%mormult_type* @mormult to i64)
  %401 = load double, double* %34, align 1
  %402 = inttoptr i64 %400 to double*
  %403 = load double, double* %402
  %404 = fadd double %401, %403
  %405 = inttoptr i64 %400 to double*
  store double %404, double* %405
  %406 = inttoptr i64 %69 to i32*
  %407 = load i32, i32* %406
  %408 = sext i32 %407 to i64
  store i32 %395, i32* %84, align 1, !tbaa !1266
  store i32 %396, i32* %86, align 1, !tbaa !1266
  %409 = shl nsw i64 %408, 3
  %410 = add i64 %409, ptrtoint (%mormult_type* @mormult to i64)
  %411 = load double, double* %34, align 1
  %412 = inttoptr i64 %410 to double*
  %413 = load double, double* %412
  %414 = fadd double %411, %413
  %415 = inttoptr i64 %410 to double*
  store double %414, double* %415
  %416 = inttoptr i64 %70 to i32*
  %417 = load i32, i32* %416
  %418 = sext i32 %417 to i64
  store i32 %395, i32* %84, align 1, !tbaa !1266
  store i32 %396, i32* %86, align 1, !tbaa !1266
  store i32 %397, i32* %87, align 1, !tbaa !1266
  store i32 %398, i32* %89, align 1, !tbaa !1266
  %419 = shl nsw i64 %418, 3
  %420 = add i64 %419, ptrtoint (%mormult_type* @mormult to i64)
  %421 = load double, double* %34, align 1
  %422 = inttoptr i64 %420 to double*
  %423 = load double, double* %422
  %424 = fadd double %421, %423
  store double %424, double* %34, align 1, !tbaa !1246
  %425 = inttoptr i64 %420 to double*
  store double %424, double* %425
  %426 = inttoptr i64 %71 to i32*
  %427 = load i32, i32* %426
  %428 = sext i32 %427 to i64
  %429 = shl nsw i64 %428, 3
  %430 = add i64 %429, ptrtoint (%mormult_type* @mormult to i64)
  %431 = bitcast <2 x i32> %393 to double
  %432 = inttoptr i64 %430 to double*
  %433 = load double, double* %432
  %434 = fadd double %431, %433
  store double %434, double* %62, align 1, !tbaa !1246
  store <2 x i32> %394, <2 x i32>* %94, align 1, !tbaa !1246
  %435 = inttoptr i64 %430 to double*
  store double %434, double* %435
  %436 = inttoptr i64 %90 to i32*
  store i32 1, i32* %436
  br label %block_41e632

block_41e761:                                     ; preds = %block_41e75a, %block_41e76b
  %437 = phi %struct.Memory* [ %511, %block_41e75a ], [ %437, %block_41e76b ]
  %438 = inttoptr i64 %91 to i32*
  %439 = load i32, i32* %438
  %440 = add i32 %439, -4
  %441 = lshr i32 %440, 31
  %442 = lshr i32 %439, 31
  %443 = xor i32 %441, %442
  %444 = add nuw nsw i32 %443, %442
  %445 = icmp eq i32 %444, 2
  %446 = icmp ne i32 %441, 0
  %447 = xor i1 %446, %445
  br i1 %447, label %block_41e76b, label %block_41e82b.loopexit

block_41ea43.loopexit:                            ; preds = %block_41e977
  br label %block_41ea43

block_41ea43:                                     ; preds = %block_41e93d, %block_41ea43.loopexit
  %448 = phi %struct.Memory* [ %496, %block_41e93d ], [ %579, %block_41ea43.loopexit ]
  %449 = inttoptr i64 %59 to i32*
  %450 = load i32, i32* %449
  %451 = sext i32 %450 to i64
  %452 = mul nsw i64 %451, 2400
  %453 = add i64 %452, ptrtoint (%idmo_type* @idmo to i64)
  %454 = inttoptr i64 %61 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  %457 = mul nsw i64 %456, 400
  store i64 %457, i64* %5, align 8, !tbaa !1240
  %458 = add i64 %457, %453
  %459 = add i64 %458, 80
  %460 = inttoptr i64 %459 to i32*
  %461 = load i32, i32* %460
  %462 = icmp eq i32 %461, -1
  br i1 %462, label %block_41ea73, label %block_41eb55

block_41e970:                                     ; preds = %block_41e93d
  %463 = inttoptr i64 %91 to i32*
  store i32 1, i32* %463
  br label %block_41e977

block_41e63c:                                     ; preds = %block_41e632
  %464 = inttoptr i64 %91 to i32*
  store i32 1, i32* %464
  br label %block_41e643

block_41eb7b:                                     ; preds = %block_41e385
  %465 = zext i32 %603 to i64
  store i64 %465, i64* %4, align 8
  %466 = load i64, i64* %9, align 8
  %467 = add i64 %466, 80
  %468 = icmp ugt i64 %466, -81
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %18, align 1, !tbaa !1248
  %470 = trunc i64 %467 to i32
  %471 = and i32 %470, 255
  %472 = tail call i32 @llvm.ctpop.i32(i32 %471) #11
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  store i8 %475, i8* %19, align 1, !tbaa !1261
  %476 = xor i64 %466, 16
  %477 = xor i64 %476, %467
  %478 = lshr i64 %477, 4
  %479 = trunc i64 %478 to i8
  %480 = and i8 %479, 1
  store i8 %480, i8* %20, align 1, !tbaa !1262
  %481 = icmp eq i64 %467, 0
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %21, align 1, !tbaa !1263
  %483 = lshr i64 %467, 63
  %484 = trunc i64 %483 to i8
  store i8 %484, i8* %22, align 1, !tbaa !1264
  %485 = lshr i64 %466, 63
  %486 = xor i64 %483, %485
  %487 = add nuw nsw i64 %486, %483
  %488 = icmp eq i64 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %23, align 1, !tbaa !1265
  %490 = add i64 %466, 88
  %491 = inttoptr i64 %467 to i64*
  %492 = load i64, i64* %491
  store i64 %492, i64* %10, align 8, !tbaa !1240
  %493 = inttoptr i64 %490 to i64*
  %494 = load i64, i64* %493
  store i64 %494, i64* %3, align 8, !tbaa !1240
  %495 = add i64 %466, 96
  store i64 %495, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %601

block_41e93d.loopexit:                            ; preds = %block_41e865
  br label %block_41e93d

block_41e93d:                                     ; preds = %block_41e82b, %block_41e93d.loopexit
  %496 = phi %struct.Memory* [ %522, %block_41e82b ], [ %180, %block_41e93d.loopexit ]
  %497 = inttoptr i64 %59 to i32*
  %498 = load i32, i32* %497
  %499 = sext i32 %498 to i64
  %500 = mul nsw i64 %499, 2400
  %501 = add i64 %500, ptrtoint (%idmo_type* @idmo to i64)
  %502 = inttoptr i64 %61 to i32*
  %503 = load i32, i32* %502
  %504 = sext i32 %503 to i64
  %505 = mul nsw i64 %504, 400
  %506 = add i64 %505, %501
  %507 = add i64 %506, 184
  %508 = inttoptr i64 %507 to i32*
  %509 = load i32, i32* %508
  %510 = icmp eq i32 %509, -1
  br i1 %510, label %block_41e970, label %block_41ea43

block_41e632:                                     ; preds = %block_41e717, %block_41e3c9
  %511 = phi %struct.Memory* [ %561, %block_41e3c9 ], [ %590, %block_41e717 ]
  %512 = inttoptr i64 %90 to i32*
  %513 = load i32, i32* %512
  %514 = add i32 %513, -4
  %515 = lshr i32 %514, 31
  %516 = lshr i32 %513, 31
  %517 = xor i32 %515, %516
  %518 = add nuw nsw i32 %517, %516
  %519 = icmp eq i32 %518, 2
  %520 = icmp ne i32 %515, 0
  %521 = xor i1 %520, %519
  br i1 %521, label %block_41e63c, label %block_41e72a

block_41e82b.loopexit:                            ; preds = %block_41e761
  br label %block_41e82b

block_41e82b:                                     ; preds = %block_41e72a, %block_41e82b.loopexit
  %522 = phi %struct.Memory* [ %511, %block_41e72a ], [ %437, %block_41e82b.loopexit ]
  %523 = inttoptr i64 %59 to i32*
  %524 = load i32, i32* %523
  %525 = sext i32 %524 to i64
  %526 = mul nsw i64 %525, 2400
  %527 = add i64 %526, ptrtoint (%idmo_type* @idmo to i64)
  %528 = inttoptr i64 %61 to i32*
  %529 = load i32, i32* %528
  %530 = sext i32 %529 to i64
  %531 = mul nsw i64 %530, 400
  %532 = add i64 %531, %527
  %533 = add i64 %532, 236
  %534 = inttoptr i64 %533 to i32*
  %535 = load i32, i32* %534
  %536 = icmp eq i32 %535, -1
  br i1 %536, label %block_41e85e, label %block_41e93d

block_41e72a:                                     ; preds = %block_41e632
  %537 = inttoptr i64 %59 to i32*
  %538 = load i32, i32* %537
  %539 = sext i32 %538 to i64
  %540 = mul nsw i64 %539, 2400
  %541 = add i64 %540, ptrtoint (%idmo_type* @idmo to i64)
  %542 = inttoptr i64 %61 to i32*
  %543 = load i32, i32* %542
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %544, 400
  %546 = add i64 %545, %541
  %547 = add i64 %546, 16
  %548 = inttoptr i64 %547 to i32*
  %549 = load i32, i32* %548
  %550 = icmp eq i32 %549, -1
  br i1 %550, label %block_41e75a, label %block_41e82b

block_41e3a6:                                     ; preds = %block_41e39c
  %551 = sext i32 %573 to i64
  %552 = mul nsw i64 %551, 24
  %553 = add i64 %552, ptrtoint (%cbc_type* @cbc to i64)
  %554 = sext i32 %563 to i64
  store i64 %554, i64* %5, align 8, !tbaa !1240
  %555 = shl nsw i64 %554, 2
  %556 = add i64 %555, %553
  %557 = inttoptr i64 %556 to i32*
  %558 = load i32, i32* %557
  %559 = icmp eq i32 %558, 3
  br i1 %559, label %block_41eb55, label %block_41e3c9

block_41e75a:                                     ; preds = %block_41e72a
  %560 = inttoptr i64 %91 to i32*
  store i32 1, i32* %560
  br label %block_41e761

block_41e39c:                                     ; preds = %block_41e395, %block_41eb55
  %561 = phi %struct.Memory* [ %601, %block_41e395 ], [ %193, %block_41eb55 ]
  %562 = inttoptr i64 %61 to i32*
  %563 = load i32, i32* %562
  %564 = add i32 %563, -6
  %565 = lshr i32 %564, 31
  %566 = lshr i32 %563, 31
  %567 = xor i32 %565, %566
  %568 = add nuw nsw i32 %567, %566
  %569 = icmp eq i32 %568, 2
  %570 = icmp ne i32 %565, 0
  %571 = xor i1 %570, %569
  %572 = inttoptr i64 %59 to i32*
  %573 = load i32, i32* %572
  br i1 %571, label %block_41e3a6, label %block_41eb68

block_41e717:                                     ; preds = %block_41e643
  %574 = inttoptr i64 %90 to i32*
  %575 = load i32, i32* %574
  %576 = add i32 %575, 1
  %577 = inttoptr i64 %90 to i32*
  store i32 %576, i32* %577
  br label %block_41e632

block_41e395:                                     ; preds = %block_41e385
  %578 = inttoptr i64 %61 to i32*
  store i32 0, i32* %578
  br label %block_41e39c

block_41e977:                                     ; preds = %block_41e981, %block_41e970
  %579 = phi %struct.Memory* [ %496, %block_41e970 ], [ %579, %block_41e981 ]
  %580 = inttoptr i64 %91 to i32*
  %581 = load i32, i32* %580
  %582 = add i32 %581, -4
  %583 = lshr i32 %582, 31
  %584 = lshr i32 %581, 31
  %585 = xor i32 %583, %584
  %586 = add nuw nsw i32 %585, %584
  %587 = icmp eq i32 %586, 2
  %588 = icmp ne i32 %583, 0
  %589 = xor i1 %588, %587
  br i1 %589, label %block_41e981, label %block_41ea43.loopexit

block_41e643:                                     ; preds = %block_41e64d, %block_41e63c
  %590 = phi %struct.Memory* [ %511, %block_41e63c ], [ %590, %block_41e64d ]
  %591 = inttoptr i64 %91 to i32*
  %592 = load i32, i32* %591
  %593 = add i32 %592, -4
  %594 = lshr i32 %593, 31
  %595 = lshr i32 %592, 31
  %596 = xor i32 %594, %595
  %597 = add nuw nsw i32 %596, %595
  %598 = icmp eq i32 %597, 2
  %599 = icmp ne i32 %594, 0
  %600 = xor i1 %599, %598
  br i1 %600, label %block_41e64d, label %block_41e717

block_41e385:                                     ; preds = %block_41eb68, %block_41e330
  %601 = phi %struct.Memory* [ %57, %block_41e330 ], [ %561, %block_41eb68 ]
  %602 = inttoptr i64 %59 to i32*
  %603 = load i32, i32* %602
  %604 = load i32, i32* bitcast (%nelt_type* @nelt to i32*)
  %605 = sub i32 %603, %604
  %606 = lshr i32 %605, 31
  %607 = lshr i32 %603, 31
  %608 = lshr i32 %604, 31
  %609 = xor i32 %608, %607
  %610 = xor i32 %606, %607
  %611 = add nuw nsw i32 %610, %609
  %612 = icmp eq i32 %611, 2
  %613 = icmp ne i32 %606, 0
  %614 = xor i1 %613, %612
  br i1 %614, label %block_41e395, label %block_41eb7b

block_41e86f:                                     ; preds = %block_41e865
  %615 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %616 = inttoptr i64 %59 to i32*
  %617 = load i32, i32* %616
  %618 = sext i32 %617 to i64
  %619 = mul nsw i64 %618, 600
  %620 = add i64 %619, ptrtoint (%idel_type* @idel to i64)
  %621 = inttoptr i64 %61 to i32*
  %622 = load i32, i32* %621
  %623 = sext i32 %622 to i64
  %624 = mul nsw i64 %623, 100
  %625 = add i64 %624, %620
  %626 = sext i32 %182 to i64
  %627 = mul nsw i64 %626, 20
  store i64 %627, i64* %6, align 8, !tbaa !1240
  %628 = add i64 %627, %625
  %629 = add i64 %628, 16
  %630 = inttoptr i64 %629 to i32*
  %631 = load i32, i32* %630
  %632 = inttoptr i64 %92 to i32*
  store i32 %631, i32* %632
  %633 = inttoptr i64 %59 to i32*
  %634 = load i32, i32* %633
  %635 = sext i32 %634 to i64
  %636 = mul nsw i64 %635, 2400
  %637 = add i64 %636, ptrtoint (%idmo_type* @idmo to i64)
  %638 = inttoptr i64 %61 to i32*
  %639 = load i32, i32* %638
  %640 = sext i32 %639 to i64
  %641 = mul nsw i64 %640, 400
  %642 = add i64 %641, %637
  %643 = inttoptr i64 %91 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  %646 = mul nsw i64 %645, 20
  %647 = add i64 %646, %642
  %648 = add i64 %647, 16
  %649 = inttoptr i64 %648 to i32*
  %650 = load i32, i32* %649
  %651 = zext i32 %650 to i64
  store i64 %651, i64* %7, align 8, !tbaa !1240
  %652 = inttoptr i64 %93 to i32*
  store i32 %650, i32* %652
  %653 = inttoptr i64 %93 to i32*
  %654 = load i32, i32* %653
  %655 = sext i32 %654 to i64
  %656 = shl nsw i64 %655, 3
  %657 = add i64 %656, ptrtoint (%tmort_type* @tmort to i64)
  %658 = inttoptr i64 %657 to double*
  %659 = load double, double* %658
  %660 = inttoptr i64 %72 to i64*
  %661 = load i64, i64* %660
  %662 = inttoptr i64 %92 to i32*
  %663 = load i32, i32* %662
  %664 = sext i32 %663 to i64
  %665 = bitcast double %615 to <2 x i32>
  %666 = extractelement <2 x i32> %665, i32 0
  store i32 %666, i32* %76, align 1, !tbaa !1266
  %667 = extractelement <2 x i32> %665, i32 1
  store i32 %667, i32* %78, align 1, !tbaa !1266
  store i32 0, i32* %80, align 1, !tbaa !1266
  store i32 0, i32* %82, align 1, !tbaa !1266
  %668 = shl nsw i64 %664, 3
  %669 = add i64 %668, %661
  %670 = load double, double* %83, align 1
  %671 = inttoptr i64 %669 to double*
  %672 = load double, double* %671
  %673 = fmul double %670, %672
  store double %673, double* %83, align 1, !tbaa !1246
  %674 = fadd double %659, %673
  store double %674, double* %34, align 1, !tbaa !1246
  store i64 0, i64* %35, align 1, !tbaa !1246
  %675 = inttoptr i64 %657 to double*
  store double %674, double* %675
  %676 = inttoptr i64 %93 to i32*
  %677 = load i32, i32* %676
  %678 = sext i32 %677 to i64
  %679 = shl nsw i64 %678, 3
  %680 = add i64 %679, ptrtoint (%mormult_type* @mormult to i64)
  %681 = inttoptr i64 %680 to double*
  %682 = load double, double* %681
  %683 = fadd double %615, %682
  store double %683, double* %62, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %684 = inttoptr i64 %680 to double*
  store double %683, double* %684
  %685 = inttoptr i64 %91 to i32*
  %686 = load i32, i32* %685
  %687 = add i32 %686, 1
  %688 = inttoptr i64 %91 to i32*
  store i32 %687, i32* %688
  br label %block_41e865

block_41ea84:                                     ; preds = %block_41ea7a
  %689 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %690 = inttoptr i64 %59 to i32*
  %691 = load i32, i32* %690
  %692 = sext i32 %691 to i64
  %693 = mul nsw i64 %692, 600
  %694 = add i64 %693, ptrtoint (%idel_type* @idel to i64)
  %695 = inttoptr i64 %61 to i32*
  %696 = load i32, i32* %695
  %697 = sext i32 %696 to i64
  %698 = mul nsw i64 %697, 100
  %699 = add i64 %698, %694
  %700 = sext i32 %171 to i64
  %701 = mul nsw i64 %700, 20
  store i64 %701, i64* %6, align 8, !tbaa !1240
  %702 = add i64 %701, %699
  %703 = inttoptr i64 %702 to i32*
  %704 = load i32, i32* %703
  %705 = inttoptr i64 %92 to i32*
  store i32 %704, i32* %705
  %706 = inttoptr i64 %59 to i32*
  %707 = load i32, i32* %706
  %708 = sext i32 %707 to i64
  %709 = mul nsw i64 %708, 2400
  %710 = add i64 %709, ptrtoint (%idmo_type* @idmo to i64)
  %711 = inttoptr i64 %61 to i32*
  %712 = load i32, i32* %711
  %713 = sext i32 %712 to i64
  %714 = mul nsw i64 %713, 400
  %715 = add i64 %714, %710
  %716 = inttoptr i64 %91 to i32*
  %717 = load i32, i32* %716
  %718 = sext i32 %717 to i64
  %719 = mul nsw i64 %718, 20
  %720 = add i64 %719, %715
  %721 = inttoptr i64 %720 to i32*
  %722 = load i32, i32* %721
  %723 = zext i32 %722 to i64
  store i64 %723, i64* %7, align 8, !tbaa !1240
  %724 = inttoptr i64 %93 to i32*
  store i32 %722, i32* %724
  %725 = inttoptr i64 %93 to i32*
  %726 = load i32, i32* %725
  %727 = sext i32 %726 to i64
  %728 = shl nsw i64 %727, 3
  %729 = add i64 %728, ptrtoint (%tmort_type* @tmort to i64)
  %730 = inttoptr i64 %729 to double*
  %731 = load double, double* %730
  %732 = inttoptr i64 %72 to i64*
  %733 = load i64, i64* %732
  %734 = inttoptr i64 %92 to i32*
  %735 = load i32, i32* %734
  %736 = sext i32 %735 to i64
  store i64 %736, i64* %5, align 8, !tbaa !1240
  %737 = bitcast double %689 to <2 x i32>
  %738 = extractelement <2 x i32> %737, i32 0
  store i32 %738, i32* %76, align 1, !tbaa !1266
  %739 = extractelement <2 x i32> %737, i32 1
  store i32 %739, i32* %78, align 1, !tbaa !1266
  store i32 0, i32* %80, align 1, !tbaa !1266
  store i32 0, i32* %82, align 1, !tbaa !1266
  %740 = shl nsw i64 %736, 3
  %741 = add i64 %740, %733
  %742 = load double, double* %83, align 1
  %743 = inttoptr i64 %741 to double*
  %744 = load double, double* %743
  %745 = fmul double %742, %744
  store double %745, double* %83, align 1, !tbaa !1246
  %746 = fadd double %731, %745
  store double %746, double* %34, align 1, !tbaa !1246
  store i64 0, i64* %35, align 1, !tbaa !1246
  %747 = inttoptr i64 %729 to double*
  store double %746, double* %747
  %748 = inttoptr i64 %93 to i32*
  %749 = load i32, i32* %748
  %750 = sext i32 %749 to i64
  %751 = shl nsw i64 %750, 3
  %752 = add i64 %751, ptrtoint (%mormult_type* @mormult to i64)
  %753 = inttoptr i64 %752 to double*
  %754 = load double, double* %753
  %755 = fadd double %689, %754
  store double %755, double* %62, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %756 = inttoptr i64 %752 to double*
  store double %755, double* %756
  %757 = inttoptr i64 %91 to i32*
  %758 = load i32, i32* %757
  %759 = add i32 %758, 1
  %760 = inttoptr i64 %91 to i32*
  store i32 %759, i32* %760
  br label %block_41ea7a

block_41e64d:                                     ; preds = %block_41e643
  %761 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 904) to double*)
  %762 = inttoptr i64 %59 to i32*
  %763 = load i32, i32* %762
  %764 = sext i32 %763 to i64
  %765 = mul nsw i64 %764, 600
  %766 = add i64 %765, ptrtoint (%idel_type* @idel to i64)
  %767 = inttoptr i64 %61 to i32*
  %768 = load i32, i32* %767
  %769 = sext i32 %768 to i64
  %770 = mul nsw i64 %769, 100
  %771 = add i64 %770, %766
  %772 = inttoptr i64 %90 to i32*
  %773 = load i32, i32* %772
  %774 = sext i32 %773 to i64
  %775 = mul nsw i64 %774, 20
  %776 = add i64 %775, %771
  %777 = sext i32 %592 to i64
  store i64 %777, i64* %6, align 8, !tbaa !1240
  %778 = shl nsw i64 %777, 2
  %779 = add i64 %778, %776
  %780 = inttoptr i64 %779 to i32*
  %781 = load i32, i32* %780
  %782 = inttoptr i64 %92 to i32*
  store i32 %781, i32* %782
  %783 = inttoptr i64 %59 to i32*
  %784 = load i32, i32* %783
  %785 = sext i32 %784 to i64
  %786 = mul nsw i64 %785, 2400
  %787 = add i64 %786, ptrtoint (%idmo_type* @idmo to i64)
  %788 = inttoptr i64 %61 to i32*
  %789 = load i32, i32* %788
  %790 = sext i32 %789 to i64
  %791 = mul nsw i64 %790, 400
  %792 = add i64 %791, %787
  %793 = inttoptr i64 %90 to i32*
  %794 = load i32, i32* %793
  %795 = sext i32 %794 to i64
  %796 = mul nsw i64 %795, 20
  %797 = add i64 %796, %792
  %798 = inttoptr i64 %91 to i32*
  %799 = load i32, i32* %798
  %800 = sext i32 %799 to i64
  %801 = shl nsw i64 %800, 2
  %802 = add i64 %801, %797
  %803 = inttoptr i64 %802 to i32*
  %804 = load i32, i32* %803
  %805 = zext i32 %804 to i64
  store i64 %805, i64* %7, align 8, !tbaa !1240
  %806 = inttoptr i64 %93 to i32*
  store i32 %804, i32* %806
  %807 = inttoptr i64 %93 to i32*
  %808 = load i32, i32* %807
  %809 = sext i32 %808 to i64
  %810 = shl nsw i64 %809, 3
  %811 = add i64 %810, ptrtoint (%tmort_type* @tmort to i64)
  %812 = inttoptr i64 %811 to double*
  %813 = load double, double* %812
  %814 = inttoptr i64 %72 to i64*
  %815 = load i64, i64* %814
  %816 = inttoptr i64 %92 to i32*
  %817 = load i32, i32* %816
  %818 = sext i32 %817 to i64
  %819 = shl nsw i64 %818, 3
  %820 = add i64 %819, %815
  %821 = inttoptr i64 %820 to double*
  %822 = load double, double* %821
  %823 = fadd double %813, %822
  store double %823, double* %34, align 1, !tbaa !1246
  store i64 0, i64* %35, align 1, !tbaa !1246
  %824 = inttoptr i64 %811 to double*
  store double %823, double* %824
  %825 = inttoptr i64 %93 to i32*
  %826 = load i32, i32* %825
  %827 = sext i32 %826 to i64
  %828 = shl nsw i64 %827, 3
  %829 = add i64 %828, ptrtoint (%mormult_type* @mormult to i64)
  %830 = inttoptr i64 %829 to double*
  %831 = load double, double* %830
  %832 = fadd double %761, %831
  store double %832, double* %62, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %833 = inttoptr i64 %829 to double*
  store double %832, double* %833
  %834 = inttoptr i64 %91 to i32*
  %835 = load i32, i32* %834
  %836 = add i32 %835, 1
  %837 = inttoptr i64 %91 to i32*
  store i32 %836, i32* %837
  br label %block_41e643

block_41e981:                                     ; preds = %block_41e977
  %838 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_420480__rodata_type* @seg_420480__rodata to i64), i64 1640) to double*)
  %839 = inttoptr i64 %59 to i32*
  %840 = load i32, i32* %839
  %841 = sext i32 %840 to i64
  %842 = mul nsw i64 %841, 600
  %843 = add i64 %842, ptrtoint (%idel_type* @idel to i64)
  %844 = inttoptr i64 %61 to i32*
  %845 = load i32, i32* %844
  %846 = sext i32 %845 to i64
  %847 = mul nsw i64 %846, 100
  %848 = add i64 %847, %843
  %849 = sext i32 %581 to i64
  store i64 %849, i64* %6, align 8, !tbaa !1240
  %850 = shl nsw i64 %849, 2
  %851 = add i64 %848, 80
  %852 = add i64 %851, %850
  %853 = inttoptr i64 %852 to i32*
  %854 = load i32, i32* %853
  %855 = inttoptr i64 %92 to i32*
  store i32 %854, i32* %855
  %856 = inttoptr i64 %59 to i32*
  %857 = load i32, i32* %856
  %858 = sext i32 %857 to i64
  %859 = mul nsw i64 %858, 2400
  %860 = add i64 %859, ptrtoint (%idmo_type* @idmo to i64)
  %861 = inttoptr i64 %61 to i32*
  %862 = load i32, i32* %861
  %863 = sext i32 %862 to i64
  %864 = mul nsw i64 %863, 400
  %865 = add i64 %864, %860
  %866 = inttoptr i64 %91 to i32*
  %867 = load i32, i32* %866
  %868 = sext i32 %867 to i64
  %869 = shl nsw i64 %868, 2
  %870 = add i64 %865, 80
  %871 = add i64 %870, %869
  %872 = inttoptr i64 %871 to i32*
  %873 = load i32, i32* %872
  %874 = zext i32 %873 to i64
  store i64 %874, i64* %7, align 8, !tbaa !1240
  %875 = inttoptr i64 %93 to i32*
  store i32 %873, i32* %875
  %876 = inttoptr i64 %93 to i32*
  %877 = load i32, i32* %876
  %878 = sext i32 %877 to i64
  %879 = shl nsw i64 %878, 3
  %880 = add i64 %879, ptrtoint (%tmort_type* @tmort to i64)
  %881 = inttoptr i64 %880 to double*
  %882 = load double, double* %881
  %883 = inttoptr i64 %72 to i64*
  %884 = load i64, i64* %883
  %885 = inttoptr i64 %92 to i32*
  %886 = load i32, i32* %885
  %887 = sext i32 %886 to i64
  %888 = bitcast double %838 to <2 x i32>
  %889 = extractelement <2 x i32> %888, i32 0
  store i32 %889, i32* %76, align 1, !tbaa !1266
  %890 = extractelement <2 x i32> %888, i32 1
  store i32 %890, i32* %78, align 1, !tbaa !1266
  store i32 0, i32* %80, align 1, !tbaa !1266
  store i32 0, i32* %82, align 1, !tbaa !1266
  %891 = shl nsw i64 %887, 3
  %892 = add i64 %891, %884
  %893 = load double, double* %83, align 1
  %894 = inttoptr i64 %892 to double*
  %895 = load double, double* %894
  %896 = fmul double %893, %895
  store double %896, double* %83, align 1, !tbaa !1246
  %897 = fadd double %882, %896
  store double %897, double* %34, align 1, !tbaa !1246
  store i64 0, i64* %35, align 1, !tbaa !1246
  %898 = inttoptr i64 %880 to double*
  store double %897, double* %898
  %899 = inttoptr i64 %93 to i32*
  %900 = load i32, i32* %899
  %901 = sext i32 %900 to i64
  %902 = shl nsw i64 %901, 3
  %903 = add i64 %902, ptrtoint (%mormult_type* @mormult to i64)
  %904 = inttoptr i64 %903 to double*
  %905 = load double, double* %904
  %906 = fadd double %838, %905
  store double %906, double* %62, align 1, !tbaa !1246
  store i64 0, i64* %25, align 1, !tbaa !1246
  %907 = inttoptr i64 %903 to double*
  store double %906, double* %907
  %908 = inttoptr i64 %91 to i32*
  %909 = load i32, i32* %908
  %910 = add i32 %909, 1
  %911 = inttoptr i64 %91 to i32*
  store i32 %910, i32* %911
  br label %block_41e977
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41fb00_nrzero(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41fb00:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = add i64 %12, -20
  %19 = load i32, i32* %5, align 4
  %20 = inttoptr i64 %18 to i32*
  store i32 %19, i32* %20
  %21 = add i64 %12, -24
  %22 = inttoptr i64 %21 to i32*
  store i32 0, i32* %22
  %23 = add i64 %12, -20
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %27 = add i64 %12, -16
  br label %block_41fb12

block_41fb1e:                                     ; preds = %block_41fb12
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  %30 = sext i32 %64 to i64
  store i64 %30, i64* %7, align 8, !tbaa !1240
  %31 = shl nsw i64 %30, 2
  %32 = add i64 %31, %29
  %33 = inttoptr i64 %32 to i32*
  store i32 0, i32* %33
  %34 = inttoptr i64 %21 to i32*
  %35 = load i32, i32* %34
  %36 = add i32 %35, 1
  %37 = inttoptr i64 %21 to i32*
  store i32 %36, i32* %37
  br label %block_41fb12

block_41fb3b:                                     ; preds = %block_41fb12
  %38 = zext i32 %64 to i64
  store i64 %38, i64* %6, align 8, !tbaa !1240
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %42 = icmp ult i32 %64, %66
  %43 = zext i1 %42 to i8
  %44 = and i32 %67, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #11
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = xor i32 %66, %64
  %50 = xor i32 %49, %67
  %51 = lshr i32 %50, 4
  %52 = trunc i32 %51 to i8
  %53 = and i8 %52, 1
  %54 = icmp eq i32 %67, 0
  %55 = zext i1 %54 to i8
  %56 = zext i1 %75 to i8
  store i8 %43, i8* %24, align 1, !tbaa !1248
  store i8 %48, i8* %39, align 1, !tbaa !1261
  store i8 %53, i8* %25, align 1, !tbaa !1262
  store i8 %55, i8* %40, align 1, !tbaa !1263
  store i8 %69, i8* %26, align 1, !tbaa !1264
  store i8 %56, i8* %41, align 1, !tbaa !1265
  %57 = inttoptr i64 %13 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %10, align 8, !tbaa !1240
  %59 = inttoptr i64 %12 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %12, 8
  store i64 %61, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %62

block_41fb12:                                     ; preds = %block_41fb1e, %block_41fb00
  %62 = phi %struct.Memory* [ %2, %block_41fb00 ], [ %62, %block_41fb1e ]
  %63 = inttoptr i64 %21 to i32*
  %64 = load i32, i32* %63
  %65 = inttoptr i64 %23 to i32*
  %66 = load i32, i32* %65
  %67 = sub i32 %64, %66
  %68 = lshr i32 %67, 31
  %69 = trunc i32 %68 to i8
  %70 = lshr i32 %64, 31
  %71 = lshr i32 %66, 31
  %72 = xor i32 %71, %70
  %73 = xor i32 %68, %70
  %74 = add nuw nsw i32 %73, %72
  %75 = icmp eq i32 %74, 2
  %76 = icmp ne i8 %69, 0
  %77 = xor i1 %76, %75
  br i1 %77, label %block_41fb1e, label %block_41fb3b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_411b10_get_emo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_411b10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %12, align 8, !tbaa !1240
  store i64 %16, i64* %13, align 8, !tbaa !1240
  %18 = add i64 %15, -12
  %19 = load i32, i32* %9, align 4
  %20 = inttoptr i64 %18 to i32*
  store i32 %19, i32* %20
  %21 = add i64 %15, -16
  %22 = load i32, i32* %7, align 4
  %23 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %23
  %24 = add i64 %15, -20
  %25 = load i32, i32* %5, align 4
  %26 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %26
  %27 = add i64 %15, -32
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %15, -28
  %30 = add i64 %1, 27
  %31 = inttoptr i64 %29 to i32*
  store i32 0, i32* %31
  %32 = add i64 %15, -16
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %36 = add i64 %15, -12
  br label %block_411b2b

block_411bdf:                                     ; preds = %block_411b7e, %block_411b88
  %37 = phi i64 [ %16, %block_411b7e ], [ %136, %block_411b88 ]
  %38 = phi %struct.Memory* [ %140, %block_411b7e ], [ %140, %block_411b88 ]
  %39 = add i64 %37, 8
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %13, align 8, !tbaa !1240
  %42 = inttoptr i64 %39 to i64*
  %43 = load i64, i64* %42
  store i64 %43, i64* %3, align 8, !tbaa !1240
  %44 = add i64 %37, 16
  store i64 %44, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %38

block_411b3f:                                     ; preds = %block_411b2b
  %45 = shl nsw i64 %145, 6
  %46 = add i64 %45, ptrtoint (%emo_type* @emo to i64)
  %47 = sext i32 %142 to i64
  %48 = shl nsw i64 %47, 3
  %49 = add i64 %48, %46
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %11, align 8, !tbaa !1240
  %53 = inttoptr i64 %36 to i32*
  %54 = load i32, i32* %53
  %55 = icmp ne i32 %51, %54
  %56 = select i1 %55, i64 44, i64 37
  %57 = add i64 %163, %56
  br i1 %55, label %block_411b6b, label %block_411b64

block_411b6b:                                     ; preds = %block_411b64, %block_411b3f
  %58 = phi i64 [ %57, %block_411b3f ], [ %137, %block_411b64 ]
  %59 = phi %struct.Memory* [ %140, %block_411b3f ], [ %140, %block_411b64 ]
  %60 = inttoptr i64 %29 to i32*
  %61 = load i32, i32* %60
  %62 = add i32 %61, 1
  %63 = inttoptr i64 %29 to i32*
  store i32 %62, i32* %63
  %64 = add i64 %58, -64
  br label %block_411b2b

block_411b88:                                     ; preds = %block_411b7e
  %65 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  store i64 ptrtoint (%emo_type* @emo to i64), i64* %10, align 8, !tbaa !1240
  %66 = add i32 %149, 1
  %67 = add i64 %15, -24
  %68 = inttoptr i64 %67 to i32*
  store i32 %66, i32* %68
  %69 = inttoptr i64 %67 to i32*
  %70 = load i32, i32* %69
  %71 = inttoptr i64 %32 to i32*
  %72 = load i32, i32* %71
  %73 = sext i32 %72 to i64
  %74 = shl nsw i64 %73, 2
  %75 = add i64 %74, ptrtoint (%nemo_type* @nemo to i64)
  %76 = inttoptr i64 %75 to i32*
  store i32 %70, i32* %76
  %77 = inttoptr i64 %36 to i32*
  %78 = load i32, i32* %77
  %79 = inttoptr i64 %32 to i32*
  %80 = load i32, i32* %79
  %81 = sext i32 %80 to i64
  %82 = shl nsw i64 %81, 6
  %83 = add i64 %82, ptrtoint (%emo_type* @emo to i64)
  store i64 %83, i64* %65, align 8, !tbaa !1240
  %84 = load i64, i64* %13, align 8
  %85 = add i64 %84, -16
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86
  %88 = sext i32 %87 to i64
  %89 = shl nsw i64 %88, 3
  %90 = add i64 %89, %83
  %91 = inttoptr i64 %90 to i32*
  store i32 %78, i32* %91
  %92 = add i64 %84, -12
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %11, align 8, !tbaa !1240
  %96 = add i64 %84, -8
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97
  %99 = sext i32 %98 to i64
  %100 = shl nsw i64 %99, 6
  %101 = load i64, i64* %10, align 8
  %102 = add i64 %100, %101
  store i64 %102, i64* %10, align 8, !tbaa !1240
  %103 = icmp ult i64 %102, %101
  %104 = icmp ult i64 %102, %100
  %105 = or i1 %103, %104
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %33, align 1, !tbaa !1248
  %107 = trunc i64 %102 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #11
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %166, align 1, !tbaa !1261
  %113 = xor i64 %101, %102
  %114 = lshr i64 %113, 4
  %115 = trunc i64 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %34, align 1, !tbaa !1262
  %117 = icmp eq i64 %102, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %167, align 1, !tbaa !1263
  %119 = lshr i64 %102, 63
  %120 = trunc i64 %119 to i8
  store i8 %120, i8* %35, align 1, !tbaa !1264
  %121 = lshr i64 %101, 63
  %122 = lshr i64 %99, 57
  %123 = and i64 %122, 1
  %124 = xor i64 %119, %121
  %125 = xor i64 %119, %123
  %126 = add nuw nsw i64 %124, %125
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %168, align 1, !tbaa !1265
  %129 = inttoptr i64 %85 to i32*
  %130 = load i32, i32* %129
  %131 = sext i32 %130 to i64
  store i64 %131, i64* %165, align 8, !tbaa !1240
  %132 = shl nsw i64 %131, 3
  %133 = add i64 %102, 4
  %134 = add i64 %133, %132
  %135 = inttoptr i64 %134 to i32*
  store i32 %94, i32* %135
  %136 = load i64, i64* %12, align 8, !tbaa !1240
  br label %block_411bdf

block_411b64:                                     ; preds = %block_411b3f
  %137 = add i64 %57, 7
  %138 = inttoptr i64 %27 to i32*
  store i32 1, i32* %138
  br label %block_411b6b

block_411b2b:                                     ; preds = %block_411b6b, %block_411b10
  %139 = phi i64 [ %30, %block_411b10 ], [ %64, %block_411b6b ]
  %140 = phi %struct.Memory* [ %2, %block_411b10 ], [ %59, %block_411b6b ]
  %141 = inttoptr i64 %29 to i32*
  %142 = load i32, i32* %141
  %143 = inttoptr i64 %32 to i32*
  %144 = load i32, i32* %143
  %145 = sext i32 %144 to i64
  %146 = shl nsw i64 %145, 2
  %147 = add i64 %146, ptrtoint (%nemo_type* @nemo to i64)
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = sub i32 %142, %149
  %151 = icmp eq i32 %150, 0
  %152 = lshr i32 %150, 31
  %153 = lshr i32 %142, 31
  %154 = lshr i32 %149, 31
  %155 = xor i32 %154, %153
  %156 = xor i32 %152, %153
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = icmp ne i32 %152, 0
  %160 = xor i1 %159, %158
  %161 = or i1 %151, %160
  %162 = select i1 %161, i64 20, i64 83
  %163 = add i64 %139, %162
  br i1 %161, label %block_411b3f, label %block_411b7e

block_411b7e:                                     ; preds = %block_411b2b
  %164 = zext i32 %142 to i64
  store i64 %164, i64* %10, align 8, !tbaa !1240
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %145, i64* %165, align 8
  %169 = inttoptr i64 %27 to i32*
  %170 = load i32, i32* %169
  store i8 0, i8* %33, align 1, !tbaa !1248
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #11
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %166, align 1, !tbaa !1261
  store i8 0, i8* %34, align 1, !tbaa !1262
  %176 = icmp eq i32 %170, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %167, align 1, !tbaa !1263
  %178 = lshr i32 %170, 31
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %35, align 1, !tbaa !1264
  store i8 0, i8* %168, align 1, !tbaa !1265
  br i1 %176, label %block_411b88, label %block_411bdf
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41c9b0_transfb_cor_e(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41c9b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %14 = load i64, i64* %11, align 8
  %15 = load i64, i64* %10, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %10, align 8, !tbaa !1240
  store i64 %16, i64* %11, align 8, !tbaa !1240
  %18 = add i64 %15, -12
  %19 = load i32, i32* %5, align 4
  %20 = inttoptr i64 %18 to i32*
  store i32 %19, i32* %20
  %21 = add i64 %15, -24
  %22 = load i64, i64* %9, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = add i64 %15, -32
  %25 = load i64, i64* %8, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %15, -32
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %8, align 8, !tbaa !1240
  %30 = inttoptr i64 %29 to double*
  %31 = load double, double* %30
  %32 = bitcast [32 x %union.VectorReg]* %12 to double*
  store double %31, double* %32, align 1, !tbaa !1246
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %35 = add i64 %15, -40
  %36 = inttoptr i64 %35 to double*
  store double %31, double* %36
  %37 = add i64 %15, -44
  %38 = add i64 %1, 35
  %39 = inttoptr i64 %37 to i32*
  store i32 1, i32* %39
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = bitcast %union.VectorReg* %13 to double*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_41c9d3

block_41ca74:                                     ; preds = %block_41ca29
  %45 = add i64 %160, 5
  br label %block_41ca79

block_41c9dd:                                     ; preds = %block_41c9d3
  %46 = inttoptr i64 %35 to double*
  %47 = load double, double* %46
  %48 = add i32 %72, -1
  %49 = sext i32 %48 to i64
  %50 = shl nsw i64 %49, 3
  %51 = add i64 %50, ptrtoint (%qbnew_type* @qbnew to i64)
  %52 = inttoptr i64 %51 to double*
  %53 = load double, double* %52
  %54 = inttoptr i64 %27 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %7, align 8, !tbaa !1240
  %56 = sext i32 %72 to i64
  store i64 %56, i64* %8, align 8, !tbaa !1240
  %57 = shl nsw i64 %56, 3
  %58 = add i64 %57, %55
  %59 = inttoptr i64 %58 to double*
  %60 = load double, double* %59
  %61 = fmul double %53, %60
  store double %61, double* %43, align 1, !tbaa !1246
  store i64 0, i64* %44, align 1, !tbaa !1246
  %62 = fadd double %47, %61
  store double %62, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %63 = inttoptr i64 %35 to double*
  store double %62, double* %63
  %64 = inttoptr i64 %37 to i32*
  %65 = load i32, i32* %64
  %66 = add i32 %65, 1
  %67 = inttoptr i64 %37 to i32*
  store i32 %66, i32* %67
  %68 = add i64 %82, -10
  br label %block_41c9d3

block_41c9d3:                                     ; preds = %block_41c9dd, %block_41c9b0
  %69 = phi i64 [ %38, %block_41c9b0 ], [ %68, %block_41c9dd ]
  %70 = phi %struct.Memory* [ %2, %block_41c9b0 ], [ %70, %block_41c9dd ]
  %71 = inttoptr i64 %37 to i32*
  %72 = load i32, i32* %71
  %73 = add i32 %72, -4
  %74 = lshr i32 %73, 31
  %75 = lshr i32 %72, 31
  %76 = xor i32 %74, %75
  %77 = add nuw nsw i32 %76, %75
  %78 = icmp eq i32 %77, 2
  %79 = icmp ne i32 %74, 0
  %80 = xor i1 %79, %78
  %81 = select i1 %80, i64 10, i64 69
  %82 = add i64 %69, %81
  br i1 %80, label %block_41c9dd, label %block_41ca18

block_41ca79:                                     ; preds = %block_41ca18, %block_41ca74
  %83 = phi i64 [ %145, %block_41ca18 ], [ %45, %block_41ca74 ]
  %84 = phi %struct.Memory* [ %70, %block_41ca18 ], [ %147, %block_41ca74 ]
  %85 = inttoptr i64 %130 to i32*
  %86 = load i32, i32* %85
  %87 = add i32 %86, -3
  %88 = icmp ult i32 %86, 3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %40, align 1, !tbaa !1248
  %90 = and i32 %87, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #11
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %127, align 1, !tbaa !1261
  %95 = xor i32 %87, %86
  %96 = lshr i32 %95, 4
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %41, align 1, !tbaa !1262
  %99 = icmp eq i32 %87, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %128, align 1, !tbaa !1263
  %101 = lshr i32 %87, 31
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %42, align 1, !tbaa !1264
  %103 = lshr i32 %86, 31
  %104 = xor i32 %101, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %129, align 1, !tbaa !1265
  %108 = select i1 %99, i64 10, i64 100
  %109 = add i64 %83, %108
  br i1 %99, label %block_41ca83, label %block_41cadd

block_41ca8a:                                     ; preds = %block_41ca83, %block_41ca94
  %110 = phi i64 [ %202, %block_41ca83 ], [ %201, %block_41ca94 ]
  %111 = phi i64 [ %16, %block_41ca83 ], [ %204, %block_41ca94 ]
  %112 = phi %struct.Memory* [ %84, %block_41ca83 ], [ %112, %block_41ca94 ]
  %113 = add i64 %111, -36
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = add i32 %115, -4
  %117 = lshr i32 %116, 31
  %118 = trunc i32 %117 to i8
  %119 = lshr i32 %115, 31
  %120 = xor i32 %117, %119
  %121 = add nuw nsw i32 %120, %119
  %122 = icmp eq i32 %121, 2
  %123 = icmp ne i8 %118, 0
  %124 = xor i1 %123, %122
  %125 = select i1 %124, i64 10, i64 78
  %126 = add i64 %110, %125
  br i1 %124, label %block_41ca94, label %block_41cad8

block_41ca18:                                     ; preds = %block_41c9d3
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %130 = add i64 %15, -12
  %131 = inttoptr i64 %130 to i32*
  %132 = load i32, i32* %131
  %133 = add i32 %132, -1
  %134 = icmp eq i32 %133, 0
  %135 = lshr i32 %133, 31
  %136 = trunc i32 %135 to i8
  %137 = lshr i32 %132, 31
  %138 = xor i32 %135, %137
  %139 = add nuw nsw i32 %138, %137
  %140 = icmp eq i32 %139, 2
  %141 = icmp ne i8 %136, 0
  %142 = xor i1 %141, %140
  %143 = or i1 %134, %142
  %144 = select i1 %143, i64 97, i64 10
  %145 = add i64 %82, %144
  br i1 %143, label %block_41ca79, label %block_41ca22

block_41ca29:                                     ; preds = %block_41ca22, %block_41ca33
  %146 = phi i64 [ %246, %block_41ca22 ], [ %245, %block_41ca33 ]
  %147 = phi %struct.Memory* [ %70, %block_41ca22 ], [ %147, %block_41ca33 ]
  %148 = inttoptr i64 %37 to i32*
  %149 = load i32, i32* %148
  %150 = add i32 %149, -4
  %151 = lshr i32 %150, 31
  %152 = trunc i32 %151 to i8
  %153 = lshr i32 %149, 31
  %154 = xor i32 %151, %153
  %155 = add nuw nsw i32 %154, %153
  %156 = icmp eq i32 %155, 2
  %157 = icmp ne i8 %152, 0
  %158 = xor i1 %157, %156
  %159 = select i1 %158, i64 10, i64 75
  %160 = add i64 %146, %159
  br i1 %158, label %block_41ca33, label %block_41ca74

block_41cad8:                                     ; preds = %block_41ca8a
  %161 = icmp ult i32 %115, 4
  %162 = zext i1 %161 to i8
  %163 = and i32 %116, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #11
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  %168 = xor i32 %116, %115
  %169 = lshr i32 %168, 4
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = icmp eq i32 %116, 0
  %173 = zext i1 %172 to i8
  %174 = zext i1 %122 to i8
  store i8 %162, i8* %40, align 1, !tbaa !1248
  store i8 %167, i8* %127, align 1, !tbaa !1261
  store i8 %171, i8* %41, align 1, !tbaa !1262
  store i8 %173, i8* %128, align 1, !tbaa !1263
  store i8 %118, i8* %42, align 1, !tbaa !1264
  store i8 %174, i8* %129, align 1, !tbaa !1265
  %175 = load i64, i64* %10, align 8, !tbaa !1240
  br label %block_41cadd

block_41ca94:                                     ; preds = %block_41ca8a
  %176 = add i64 %111, -32
  %177 = inttoptr i64 %176 to double*
  %178 = load double, double* %177
  store double %178, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %179 = add i32 %115, -1
  %180 = sext i32 %179 to i64
  %181 = shl nsw i64 %180, 3
  %182 = add i64 %181, ptrtoint (%qbnew_type* @qbnew to i64)
  %183 = inttoptr i64 %182 to double*
  %184 = load double, double* %183
  %185 = add i64 %111, -24
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = sext i32 %115 to i64
  %189 = mul nsw i64 %188, 200
  store i64 %189, i64* %8, align 8, !tbaa !1240
  %190 = add i64 %189, %187
  store i64 %190, i64* %7, align 8, !tbaa !1240
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = fmul double %184, %192
  store double %193, double* %43, align 1, !tbaa !1246
  store i64 0, i64* %44, align 1, !tbaa !1246
  %194 = load double, double* %32, align 1
  %195 = fadd double %194, %193
  store double %195, double* %32, align 1, !tbaa !1246
  %196 = inttoptr i64 %205 to double*
  store double %195, double* %196
  %197 = inttoptr i64 %206 to i32*
  %198 = load i32, i32* %197
  %199 = add i32 %198, 1
  %200 = inttoptr i64 %206 to i32*
  store i32 %199, i32* %200
  %201 = add i64 %126, -10
  br label %block_41ca8a

block_41ca83:                                     ; preds = %block_41ca79
  %202 = add i64 %109, 7
  %203 = inttoptr i64 %37 to i32*
  store i32 1, i32* %203
  %204 = load i64, i64* %11, align 8
  %205 = add i64 %204, -32
  %206 = add i64 %204, -36
  br label %block_41ca8a

block_41cadd:                                     ; preds = %block_41cad8, %block_41ca79
  %207 = phi i64 [ %16, %block_41ca79 ], [ %175, %block_41cad8 ]
  %208 = phi i64 [ %16, %block_41ca79 ], [ %111, %block_41cad8 ]
  %209 = phi %struct.Memory* [ %84, %block_41ca79 ], [ %112, %block_41cad8 ]
  %210 = add i64 %208, -32
  %211 = inttoptr i64 %210 to double*
  %212 = load double, double* %211
  store double %212, double* %32, align 1, !tbaa !1246
  store double 0.000000e+00, double* %34, align 1, !tbaa !1246
  %213 = add i64 %208, -16
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  store i64 %215, i64* %6, align 8, !tbaa !1240
  %216 = inttoptr i64 %215 to double*
  store double %212, double* %216
  %217 = add i64 %207, 8
  %218 = inttoptr i64 %207 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %11, align 8, !tbaa !1240
  %220 = inttoptr i64 %217 to i64*
  %221 = load i64, i64* %220
  store i64 %221, i64* %3, align 8, !tbaa !1240
  %222 = add i64 %207, 16
  store i64 %222, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %209

block_41ca33:                                     ; preds = %block_41ca29
  %223 = inttoptr i64 %35 to double*
  %224 = load double, double* %223
  %225 = add i32 %149, -1
  %226 = sext i32 %225 to i64
  %227 = shl nsw i64 %226, 3
  %228 = add i64 %227, ptrtoint (%qbnew_type* @qbnew to i64)
  %229 = inttoptr i64 %228 to double*
  %230 = load double, double* %229
  %231 = inttoptr i64 %27 to i64*
  %232 = load i64, i64* %231
  %233 = sext i32 %149 to i64
  %234 = mul nsw i64 %233, 40
  store i64 %234, i64* %8, align 8, !tbaa !1240
  %235 = add i64 %234, %232
  store i64 %235, i64* %7, align 8, !tbaa !1240
  %236 = inttoptr i64 %235 to double*
  %237 = load double, double* %236
  %238 = fmul double %230, %237
  store double %238, double* %43, align 1, !tbaa !1246
  store i64 0, i64* %44, align 1, !tbaa !1246
  %239 = fadd double %224, %238
  store double %239, double* %32, align 1, !tbaa !1246
  store i64 0, i64* %33, align 1, !tbaa !1246
  %240 = inttoptr i64 %35 to double*
  store double %239, double* %240
  %241 = inttoptr i64 %37 to i32*
  %242 = load i32, i32* %241
  %243 = add i32 %242, 1
  %244 = inttoptr i64 %37 to i32*
  store i32 %243, i32* %244
  %245 = add i64 %160, -10
  br label %block_41ca29

block_41ca22:                                     ; preds = %block_41ca18
  %246 = add i64 %145, 7
  %247 = inttoptr i64 %37 to i32*
  store i32 1, i32* %247
  br label %block_41ca29
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_41d190_transfb_nc0(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_41d190:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %13 = load i64, i64* %10, align 8
  %14 = load i64, i64* %9, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = bitcast [32 x %union.VectorReg]* %11 to i8*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast [32 x %union.VectorReg]* %11 to i32*
  store i32 0, i32* %25, align 1, !tbaa !1244
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 1, !tbaa !1244
  %28 = bitcast i64* %24 to i32*
  store i32 0, i32* %28, align 1, !tbaa !1244
  %29 = getelementptr inbounds i8, i8* %23, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 1, !tbaa !1244
  %31 = add i64 %14, -16
  %32 = load i64, i64* %8, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %14, -24
  %35 = load i64, i64* %7, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %35, i64* %36
  %37 = inttoptr i64 %31 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %8, align 8, !tbaa !1240
  store i64 25, i64* %7, align 8, !tbaa !1240
  %39 = add i64 %1, 9920
  %40 = add i64 %1, 38
  %41 = add i64 %14, -48
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  store i64 %41, i64* %9, align 8, !tbaa !1240
  %43 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull %0, i64 %39, %struct.Memory* %2)
  %44 = load i64, i64* %10, align 8
  %45 = add i64 %44, -24
  %46 = inttoptr i64 %45 to i32*
  store i32 0, i32* %46
  %47 = add i64 %44, -20
  %48 = add i64 %44, -8
  %49 = bitcast [32 x %union.VectorReg]* %11 to double*
  %50 = bitcast %union.VectorReg* %12 to double*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %52 = add i64 %44, -16
  br label %block_41d1bd

block_41d1bd:                                     ; preds = %block_41d234, %block_41d190
  %53 = phi %struct.Memory* [ %43, %block_41d190 ], [ %102, %block_41d234 ]
  %54 = inttoptr i64 %45 to i32*
  %55 = load i32, i32* %54
  %56 = add i32 %55, -5
  %57 = lshr i32 %56, 31
  %58 = lshr i32 %55, 31
  %59 = xor i32 %57, %58
  %60 = add nuw nsw i32 %59, %58
  %61 = icmp eq i32 %60, 2
  %62 = icmp ne i32 %57, 0
  %63 = xor i1 %62, %61
  br i1 %63, label %block_41d1c7, label %block_41d247

block_41d1d8:                                     ; preds = %block_41d1ce
  %64 = inttoptr i64 %48 to i64*
  %65 = load i64, i64* %64
  %66 = inttoptr i64 %45 to i32*
  %67 = load i32, i32* %66
  %68 = sext i32 %67 to i64
  store i64 %68, i64* %6, align 8, !tbaa !1240
  %69 = shl nsw i64 %68, 3
  %70 = add i64 %69, %65
  %71 = inttoptr i64 %70 to double*
  %72 = load double, double* %71
  %73 = mul nsw i64 %68, 24
  %74 = add i64 %73, ptrtoint (%qbnew_type* @qbnew to i64)
  %75 = add i32 %104, -1
  %76 = zext i32 %75 to i64
  store i64 %76, i64* %7, align 8, !tbaa !1240
  %77 = sext i32 %75 to i64
  %78 = shl nsw i64 %77, 3
  %79 = add i64 %74, %78
  %80 = inttoptr i64 %79 to double*
  %81 = load double, double* %80
  %82 = inttoptr i64 %52 to i64*
  %83 = load i64, i64* %82
  %84 = sext i32 %104 to i64
  %85 = shl nsw i64 %84, 3
  %86 = add i64 %85, %83
  %87 = inttoptr i64 %86 to double*
  %88 = load double, double* %87
  %89 = fmul double %81, %88
  store double %89, double* %50, align 1, !tbaa !1246
  store i64 0, i64* %51, align 1, !tbaa !1246
  %90 = fadd double %72, %89
  store double %90, double* %49, align 1, !tbaa !1246
  store i64 0, i64* %24, align 1, !tbaa !1246
  store i64 %68, i64* %5, align 8, !tbaa !1240
  %91 = inttoptr i64 %70 to double*
  store double %90, double* %91
  %92 = inttoptr i64 %47 to i32*
  %93 = load i32, i32* %92
  %94 = add i32 %93, 1
  %95 = inttoptr i64 %47 to i32*
  store i32 %94, i32* %95
  br label %block_41d1ce

block_41d234:                                     ; preds = %block_41d1ce
  %96 = inttoptr i64 %45 to i32*
  %97 = load i32, i32* %96
  %98 = add i32 %97, 1
  %99 = zext i32 %98 to i64
  store i64 %99, i64* %4, align 8, !tbaa !1240
  %100 = inttoptr i64 %45 to i32*
  store i32 %98, i32* %100
  br label %block_41d1bd

block_41d1c7:                                     ; preds = %block_41d1bd
  %101 = inttoptr i64 %47 to i32*
  store i32 1, i32* %101
  br label %block_41d1ce

block_41d1ce:                                     ; preds = %block_41d1c7, %block_41d1d8
  %102 = phi %struct.Memory* [ %53, %block_41d1c7 ], [ %102, %block_41d1d8 ]
  %103 = inttoptr i64 %47 to i32*
  %104 = load i32, i32* %103
  %105 = add i32 %104, -4
  %106 = lshr i32 %105, 31
  %107 = lshr i32 %104, 31
  %108 = xor i32 %106, %107
  %109 = add nuw nsw i32 %108, %107
  %110 = icmp eq i32 %109, 2
  %111 = icmp ne i32 %106, 0
  %112 = xor i1 %111, %110
  br i1 %112, label %block_41d1d8, label %block_41d234

block_41d247:                                     ; preds = %block_41d1bd
  %113 = load i64, i64* %9, align 8
  %114 = add i64 %113, 32
  %115 = icmp ugt i64 %113, -33
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %17, align 1, !tbaa !1248
  %117 = trunc i64 %114 to i32
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #11
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %18, align 1, !tbaa !1261
  %123 = xor i64 %114, %113
  %124 = lshr i64 %123, 4
  %125 = trunc i64 %124 to i8
  %126 = and i8 %125, 1
  store i8 %126, i8* %19, align 1, !tbaa !1262
  %127 = icmp eq i64 %114, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %20, align 1, !tbaa !1263
  %129 = lshr i64 %114, 63
  %130 = trunc i64 %129 to i8
  store i8 %130, i8* %21, align 1, !tbaa !1264
  %131 = lshr i64 %113, 63
  %132 = xor i64 %129, %131
  %133 = add nuw nsw i64 %132, %129
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %22, align 1, !tbaa !1265
  %136 = add i64 %113, 40
  %137 = inttoptr i64 %114 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %10, align 8, !tbaa !1240
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %3, align 8, !tbaa !1240
  %141 = add i64 %113, 48
  store i64 %141, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %53
}

; Function Attrs: nobuiltin noinline
define i64 @callback_sub_400790__start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196240, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400790__start(%struct.State* nonnull @__mcsema_reg_state, i64 4196240, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: norecurse nounwind
define void @__mcsema_verify_reg_state() local_unnamed_addr #7 {
entry:
  %0 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %is_null, label %end

is_null:                                          ; preds = %entry
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %end

end:                                              ; preds = %is_null, %entry
  ret void
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400870_frame_dummy(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196464, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400870_frame_dummy(%struct.State* nonnull @__mcsema_reg_state, i64 4196464, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400840___do_global_dtors_aux(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196416, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400840___do_global_dtors_aux(%struct.State* nonnull @__mcsema_reg_state, i64 4196416, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_9ede10_printf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @printf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_9ede28_pow(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @pow(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400770_sprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @sprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_420470___libc_csu_fini() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4326512, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_420470___libc_csu_fini(%struct.State* nonnull @__mcsema_reg_state, i64 4326512, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_420400___libc_csu_init() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4326400, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_420400___libc_csu_init(%struct.State* nonnull @__mcsema_reg_state, i64 4326400, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline
define i64 @main(i64, i64, i64) #6 {
  %4 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %3
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %3
  %6 = phi i64 [ %4, %3 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4320144, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %7 = load volatile i1, i1* @0, align 1
  br i1 %7, label %__mcsema_early_init.exit, label %8

; <label>:8:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %8, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  %9 = add i64 %6, -8
  store i64 %9, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = tail call %struct.Memory* @sub_41eb90_main(%struct.State* nonnull @__mcsema_reg_state, i64 4320144, %struct.Memory* null)
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %11 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %11
}

; Function Attrs: noinline nounwind
define %struct.Memory* @__mcsema_detach_call_value(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %1 to i64 (i64, i64, i64, i64, i64, i64, i64, i64)*
  %27 = tail call i64 %26(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25) #11
  store i64 %27, i64* %5, align 8
  %28 = inttoptr i64 %19 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_9ede50___libc_start_main(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %19 to i64*
  %27 = load i64, i64* %26
  store i64 %27, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %28 = tail call i64 @__libc_start_main(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25)
  store i64 %28, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint nounwind
define %struct.Memory* @ext_9ede68_sqrt(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = bitcast %union.VectorReg* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = load i64, i64* %5, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %5, align 8
  %13 = tail call double @sqrt(double %8)
  %14 = bitcast %union.VectorReg* %6 to i128*
  store i128 0, i128* %14, align 8
  store double %13, double* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint nounwind
define %struct.Memory* @ext_9ede40_cos(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = bitcast %union.VectorReg* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = load i64, i64* %5, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %5, align 8
  %13 = tail call double @cos(double %8)
  %14 = bitcast %union.VectorReg* %6 to i128*
  store i128 0, i128* %14, align 8
  store double %13, double* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400750_acos(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @acos(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_9ede00___isoc99_fscanf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @__isoc99_fscanf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4006d0_fclose(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fclose(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_9ede38_fgetc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fgetc(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400760_fopen(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @fopen(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400720_log(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @log(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400700_memset(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* %9, align 8
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %4, align 8
  %16 = add i64 %13, 8
  store i64 %16, i64* %9, align 8
  %17 = tail call i64 @memset(i64 %10, i64 %11, i64 %12)
  store i64 %17, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4006f0_gettimeofday(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @gettimeofday(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_nc2(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4313680, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41d250_transfb_nc2(%struct.State* nonnull @__mcsema_reg_state, i64 4313680, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @nrzero(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4324096, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41fb00_nrzero(%struct.State* nonnull @__mcsema_reg_state, i64 4324096, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @facev(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4325136, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41ff10_facev(%struct.State* nonnull @__mcsema_reg_state, i64 4325136, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transf(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4299376, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_419a70_transf(%struct.State* nonnull @__mcsema_reg_state, i64 4299376, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4217216, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_405980_timer_start(%struct.State* nonnull @__mcsema_reg_state, i64 4217216, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @randlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4285904, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4165d0_randlc(%struct.State* nonnull @__mcsema_reg_state, i64 4285904, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @nr_init(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323488, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f8a0_nr_init(%struct.State* nonnull @__mcsema_reg_state, i64 4323488, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @move(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4267952, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_411fb0_move(%struct.State* nonnull @__mcsema_reg_state, i64 4267952, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @parallel_add(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4324640, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41fd20_parallel_add(%struct.State* nonnull @__mcsema_reg_state, i64 4324640, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @ncopy(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323616, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f920_ncopy(%struct.State* nonnull @__mcsema_reg_state, i64 4323616, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @verify(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4325456, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_420050_verify(%struct.State* nonnull @__mcsema_reg_state, i64 4325456, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @prepwork(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4291120, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_417a30_prepwork(%struct.State* nonnull @__mcsema_reg_state, i64 4291120, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.init_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4195984, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400690__init_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4195984, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_stop(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4217296, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4059d0_timer_stop(%struct.State* nonnull @__mcsema_reg_state, i64 4217296, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @calc_norm(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4324256, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41fba0_calc_norm(%struct.State* nonnull @__mcsema_reg_state, i64 4324256, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @dssum(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4325072, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41fed0_dssum(%struct.State* nonnull @__mcsema_reg_state, i64 4325072, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @laplacian(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227824, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4082f0_laplacian(%struct.State* nonnull @__mcsema_reg_state, i64 4227824, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @adds1m1(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323888, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41fa30_adds1m1(%struct.State* nonnull @__mcsema_reg_state, i64 4323888, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @col2(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4324000, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41faa0_col2(%struct.State* nonnull @__mcsema_reg_state, i64 4324000, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.term_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4326516, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_420474__term_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4326516, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @geom1(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4289280, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_417300_geom1(%struct.State* nonnull @__mcsema_reg_state, i64 4289280, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @r_init(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323408, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f850_r_init(%struct.State* nonnull @__mcsema_reg_state, i64 4323408, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setdef(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4290848, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_417920_setdef(%struct.State* nonnull @__mcsema_reg_state, i64 4290848, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @adds2m1(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323776, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f9c0_adds2m1(%struct.State* nonnull @__mcsema_reg_state, i64 4323776, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_cor_f(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4311792, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41caf0_transfb_cor_f(%struct.State* nonnull @__mcsema_reg_state, i64 4311792, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @ifsame(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4265616, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_411690_ifsame(%struct.State* nonnull @__mcsema_reg_state, i64 4265616, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @convect(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4217408, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_405a40_convect(%struct.State* nonnull @__mcsema_reg_state, i64 4217408, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @reciprocal(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323328, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f800_reciprocal(%struct.State* nonnull @__mcsema_reg_state, i64 4323328, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @create_initial_grid(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4286672, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4168d0_create_initial_grid(%struct.State* nonnull @__mcsema_reg_state, i64 4286672, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4305120, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41b0e0_transfb(%struct.State* nonnull @__mcsema_reg_state, i64 4305120, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transf_nc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4312704, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41ce80_transf_nc(%struct.State* nonnull @__mcsema_reg_state, i64 4312704, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4284896, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4161e0_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4284896, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @mortar(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4229376, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408900_mortar(%struct.State* nonnull @__mcsema_reg_state, i64 4229376, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_clear(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4217184, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_405960_timer_clear(%struct.State* nonnull @__mcsema_reg_state, i64 4217184, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @c_print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4216240, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4055b0_c_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4216240, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setpcmo(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4278992, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_414ad0_setpcmo(%struct.State* nonnull @__mcsema_reg_state, i64 4278992, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_read(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4217376, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_405a20_timer_read(%struct.State* nonnull @__mcsema_reg_state, i64 4217376, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @l_init(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323552, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f8e0_l_init(%struct.State* nonnull @__mcsema_reg_state, i64 4323552, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @coef(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4287040, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_416a40_coef(%struct.State* nonnull @__mcsema_reg_state, i64 4287040, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @copy(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4323696, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41f970_copy(%struct.State* nonnull @__mcsema_reg_state, i64 4323696, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @top_constants(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4293360, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4182f0_top_constants(%struct.State* nonnull @__mcsema_reg_state, i64 4293360, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_nc0(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4313488, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41d190_transfb_nc0(%struct.State* nonnull @__mcsema_reg_state, i64 4313488, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setuppc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4269760, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4126c0_setuppc(%struct.State* nonnull @__mcsema_reg_state, i64 4269760, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_cor_e(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4311472, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41c9b0_transfb_cor_e(%struct.State* nonnull @__mcsema_reg_state, i64 4311472, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_c(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4316160, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41dc00_transfb_c(%struct.State* nonnull @__mcsema_reg_state, i64 4316160, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @diffusion(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225152, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407880_diffusion(%struct.State* nonnull @__mcsema_reg_state, i64 4225152, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_nc1(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4314896, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41d710_transfb_nc1(%struct.State* nonnull @__mcsema_reg_state, i64 4314896, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @wtime_(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4326272, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_420380_wtime_(%struct.State* nonnull @__mcsema_reg_state, i64 4326272, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @adaptation(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4196480, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400880_adaptation(%struct.State* nonnull @__mcsema_reg_state, i64 4196480, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @transfb_c_2(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4318000, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41e330_transfb_c_2(%struct.State* nonnull @__mcsema_reg_state, i64 4318000, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setpcmo_pre(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4271072, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_412be0_setpcmo_pre(%struct.State* nonnull @__mcsema_reg_state, i64 4271072, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @vranlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4286240, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_416720_vranlc(%struct.State* nonnull @__mcsema_reg_state, i64 4286240, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @add2(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4324160, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_41fb40_add2(%struct.State* nonnull @__mcsema_reg_state, i64 4324160, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #11 {
  %1 = tail call i64 @callback_sub_420470___libc_csu_fini()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #11 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  %3 = tail call i64 @callback_sub_420400___libc_csu_init()
  ret void
}

; Function Attrs: noinline optnone
define %struct.State* @__mcsema_debug_get_reg_state() #12 {
  ret %struct.State* @__mcsema_reg_state
}

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #13

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline }
attributes #4 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin noinline }
attributes #7 = { norecurse nounwind }
attributes #8 = { nobuiltin noinline nounwind }
attributes #9 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { alwaysinline inlinehint nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noinline optnone }
attributes #13 = { noreturn nounwind }
attributes #14 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1238, !1239}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/antonio/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !75, !81, !84, !91, !95, !100, !102, !110, !114, !118, !130, !134, !138, !142, !146, !151, !155, !159, !163, !167, !175, !179, !183, !185, !189, !193, !197, !203, !207, !211, !213, !221, !225, !233, !235, !239, !243, !247, !251, !256, !261, !266, !267, !268, !269, !272, !273, !274, !275, !276, !277, !278, !334, !338, !354, !357, !362, !370, !375, !379, !383, !387, !391, !393, !395, !399, !405, !409, !415, !421, !423, !427, !431, !435, !439, !450, !452, !456, !460, !464, !466, !470, !474, !478, !480, !482, !486, !494, !498, !502, !506, !508, !514, !516, !522, !526, !530, !534, !538, !542, !546, !548, !550, !554, !558, !562, !564, !568, !572, !574, !576, !580, !584, !588, !592, !593, !594, !522, !450, !456, !464, !592, !593, !594, !595, !598, !601, !603, !605, !607, !609, !611, !613, !615, !617, !619, !621, !623, !625, !626, !627, !628, !630, !632, !634, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !657, !661, !666, !669, !671, !673, !675, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !698, !704, !709, !713, !715, !717, !719, !721, !728, !732, !736, !740, !744, !748, !753, !757, !759, !763, !769, !773, !778, !780, !782, !786, !790, !794, !796, !798, !800, !802, !806, !808, !810, !814, !818, !822, !826, !830, !832, !834, !838, !842, !846, !850, !852, !854, !858, !862, !863, !864, !865, !866, !867, !872, !874, !876, !880, !882, !884, !886, !888, !890, !892, !894, !899, !903, !905, !907, !912, !914, !916, !918, !920, !922, !924, !927, !929, !931, !935, !939, !941, !943, !945, !947, !949, !951, !953, !955, !957, !959, !963, !967, !969, !971, !973, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !1001, !1005, !1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1031, !1035, !1039, !1041, !1043, !1045, !1049, !1053, !1057, !1059, !1061, !1063, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1085, !1089, !1093, !1095, !1097, !1099, !1101, !1105, !1109, !1111, !1113, !1115, !1117, !1119, !1121, !1125, !1129, !1131, !1133, !1135, !1137, !1141, !1145, !1149, !1151, !1153, !1155, !1157, !1159, !1161, !1165, !1169, !1173, !1175, !1179, !1183, !1185, !1187, !1189, !1191, !1193, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !73)
!72 = !DINamespace(name: "__gnu_debug", scope: null)
!73 = !DINamespace(name: "__debug", scope: !74)
!74 = !DINamespace(name: "std", scope: null)
!75 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !76)
!76 = !DISubprogram(name: "abs", scope: !77, file: !77, line: 837, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!77 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!78 = !DISubroutineType(types: !79)
!79 = !{!80, !80}
!80 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !82)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !77, line: 62, baseType: !83)
!83 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !85)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !77, line: 70, baseType: !86)
!86 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 66, size: 128, elements: !87, identifier: "_ZTS6ldiv_t")
!87 = !{!88, !90}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !86, file: !77, line: 68, baseType: !89, size: 64)
!89 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !86, file: !77, line: 69, baseType: !89, size: 64, offset: 64)
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !92)
!92 = !DISubprogram(name: "abort", scope: !77, file: !77, line: 588, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{null}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !96)
!96 = !DISubprogram(name: "atexit", scope: !77, file: !77, line: 592, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!80, !99}
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!100 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !101)
!101 = !DISubprogram(name: "at_quick_exit", scope: !77, file: !77, line: 597, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !103)
!103 = !DISubprogram(name: "atof", scope: !77, file: !77, line: 101, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DISubroutineType(types: !105)
!105 = !{!106, !107}
!106 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !109)
!109 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!110 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !111)
!111 = !DISubprogram(name: "atoi", scope: !77, file: !77, line: 104, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!112 = !DISubroutineType(types: !113)
!113 = !{!80, !107}
!114 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !115)
!115 = !DISubprogram(name: "atol", scope: !77, file: !77, line: 107, type: !116, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!116 = !DISubroutineType(types: !117)
!117 = !{!89, !107}
!118 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !119)
!119 = !DISubprogram(name: "bsearch", scope: !77, file: !77, line: 817, type: !120, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!120 = !DISubroutineType(types: !121)
!121 = !{!122, !68, !68, !123, !123, !126}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !124, line: 62, baseType: !125)
!124 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!125 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !77, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!80, !68, !68}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !131)
!131 = !DISubprogram(name: "calloc", scope: !77, file: !77, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!122, !123, !123}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !135)
!135 = !DISubprogram(name: "div", scope: !77, file: !77, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!82, !80, !80}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !139)
!139 = !DISubprogram(name: "exit", scope: !77, file: !77, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !80}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !143)
!143 = !DISubprogram(name: "free", scope: !77, file: !77, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !122}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !147)
!147 = !DISubprogram(name: "getenv", scope: !77, file: !77, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!150, !107}
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !152)
!152 = !DISubprogram(name: "labs", scope: !77, file: !77, line: 838, type: !153, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!153 = !DISubroutineType(types: !154)
!154 = !{!89, !89}
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !156)
!156 = !DISubprogram(name: "ldiv", scope: !77, file: !77, line: 851, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!85, !89, !89}
!159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !160)
!160 = !DISubprogram(name: "malloc", scope: !77, file: !77, line: 539, type: !161, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!161 = !DISubroutineType(types: !162)
!162 = !{!122, !123}
!163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !164)
!164 = !DISubprogram(name: "mblen", scope: !77, file: !77, line: 919, type: !165, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!165 = !DISubroutineType(types: !166)
!166 = !{!80, !107, !123}
!167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !168)
!168 = !DISubprogram(name: "mbstowcs", scope: !77, file: !77, line: 930, type: !169, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!169 = !DISubroutineType(types: !170)
!170 = !{!123, !171, !174, !123}
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !172)
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!173 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!174 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !107)
!175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !176)
!176 = !DISubprogram(name: "mbtowc", scope: !77, file: !77, line: 922, type: !177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!177 = !DISubroutineType(types: !178)
!178 = !{!80, !171, !174, !123}
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !180)
!180 = !DISubprogram(name: "qsort", scope: !77, file: !77, line: 827, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !122, !123, !123, !126}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !184)
!184 = !DISubprogram(name: "quick_exit", scope: !77, file: !77, line: 620, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !186)
!186 = !DISubprogram(name: "rand", scope: !77, file: !77, line: 453, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!187 = !DISubroutineType(types: !188)
!188 = !{!80}
!189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !190)
!190 = !DISubprogram(name: "realloc", scope: !77, file: !77, line: 549, type: !191, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!191 = !DISubroutineType(types: !192)
!192 = !{!122, !122, !123}
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !194)
!194 = !DISubprogram(name: "srand", scope: !77, file: !77, line: 455, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !10}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !198)
!198 = !DISubprogram(name: "strtod", scope: !77, file: !77, line: 117, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!106, !174, !201}
!201 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !202)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !204)
!204 = !DISubprogram(name: "strtol", scope: !77, file: !77, line: 176, type: !205, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!205 = !DISubroutineType(types: !206)
!206 = !{!89, !174, !201, !80}
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !208)
!208 = !DISubprogram(name: "strtoul", scope: !77, file: !77, line: 180, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!125, !174, !201, !80}
!211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !212)
!212 = !DISubprogram(name: "system", scope: !77, file: !77, line: 781, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !214)
!214 = !DISubprogram(name: "wcstombs", scope: !77, file: !77, line: 933, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!123, !217, !218, !123}
!217 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !150)
!218 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !219)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64)
!220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !173)
!221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !222)
!222 = !DISubprogram(name: "wctomb", scope: !77, file: !77, line: 926, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!223 = !DISubroutineType(types: !224)
!224 = !{!80, !150, !173}
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !227)
!226 = !DINamespace(name: "__gnu_cxx", scope: null)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !77, line: 80, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 76, size: 128, elements: !229, identifier: "_ZTS7lldiv_t")
!229 = !{!230, !232}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !228, file: !77, line: 78, baseType: !231, size: 64)
!231 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !228, file: !77, line: 79, baseType: !231, size: 64, offset: 64)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !234)
!234 = !DISubprogram(name: "_Exit", scope: !77, file: !77, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !236)
!236 = !DISubprogram(name: "llabs", scope: !77, file: !77, line: 841, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!231, !231}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !240)
!240 = !DISubprogram(name: "lldiv", scope: !77, file: !77, line: 855, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!227, !231, !231}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !244)
!244 = !DISubprogram(name: "atoll", scope: !77, file: !77, line: 112, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!231, !107}
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !248)
!248 = !DISubprogram(name: "strtoll", scope: !77, file: !77, line: 200, type: !249, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!249 = !DISubroutineType(types: !250)
!250 = !{!231, !174, !201, !80}
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !252)
!252 = !DISubprogram(name: "strtoull", scope: !77, file: !77, line: 205, type: !253, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!253 = !DISubroutineType(types: !254)
!254 = !{!255, !174, !201, !80}
!255 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !257)
!257 = !DISubprogram(name: "strtof", scope: !77, file: !77, line: 123, type: !258, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!258 = !DISubroutineType(types: !259)
!259 = !{!260, !174, !201}
!260 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !262)
!262 = !DISubprogram(name: "strtold", scope: !77, file: !77, line: 126, type: !263, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!263 = !DISubroutineType(types: !264)
!264 = !{!265, !174, !201}
!265 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !227)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !234)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !236)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !270)
!270 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !226, file: !271, line: 213, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!271 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/cstdlib", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !240)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !244)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !257)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !252)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !262)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !279)
!279 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !281, file: !280, line: 79, size: 64, elements: !282, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!280 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/bits/exception_ptr.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!281 = !DINamespace(name: "__exception_ptr", scope: !74)
!282 = !{!283, !284, !288, !291, !292, !297, !298, !302, !308, !312, !316, !319, !320, !323, !327}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !279, file: !280, line: 81, baseType: !122, size: 64)
!284 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 83, type: !285, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!285 = !DISubroutineType(types: !286)
!286 = !{null, !287, !122}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!288 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !279, file: !280, line: 85, type: !289, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!289 = !DISubroutineType(types: !290)
!290 = !{null, !287}
!291 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !279, file: !280, line: 86, type: !289, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!292 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !279, file: !280, line: 88, type: !293, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!293 = !DISubroutineType(types: !294)
!294 = !{!122, !295}
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!296 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !279)
!297 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 96, type: !289, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!298 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 98, type: !299, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!299 = !DISubroutineType(types: !300)
!300 = !{null, !287, !301}
!301 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !296, size: 64)
!302 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 101, type: !303, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!303 = !DISubroutineType(types: !304)
!304 = !{null, !287, !305}
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !74, file: !306, line: 235, baseType: !307)
!306 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/x86_64-linux-gnu/c++/7.3.0/bits/c++config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!307 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!308 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 105, type: !309, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!309 = !DISubroutineType(types: !310)
!310 = !{null, !287, !311}
!311 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !279, size: 64)
!312 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !279, file: !280, line: 118, type: !313, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!313 = !DISubroutineType(types: !314)
!314 = !{!315, !287, !301}
!315 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !279, size: 64)
!316 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !279, file: !280, line: 122, type: !317, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!317 = !DISubroutineType(types: !318)
!318 = !{!315, !287, !311}
!319 = !DISubprogram(name: "~exception_ptr", scope: !279, file: !280, line: 129, type: !289, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!320 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !279, file: !280, line: 132, type: !321, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !287, !315}
!323 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !279, file: !280, line: 144, type: !324, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!324 = !DISubroutineType(types: !325)
!325 = !{!326, !295}
!326 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!327 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !279, file: !280, line: 153, type: !328, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!328 = !DISubroutineType(types: !329)
!329 = !{!330, !295}
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !74, file: !333, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!333 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/typeinfo", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !281, entity: !335)
!335 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !74, file: !280, line: 69, type: !336, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!336 = !DISubroutineType(types: !337)
!337 = !{null, !279}
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !339)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !340, line: 6, baseType: !341)
!340 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !342, line: 21, baseType: !343)
!342 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!343 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !342, line: 13, size: 64, elements: !344, identifier: "_ZTS11__mbstate_t")
!344 = !{!345, !346}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !343, file: !342, line: 15, baseType: !80, size: 32)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !343, file: !342, line: 20, baseType: !347, size: 32, offset: 32)
!347 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !343, file: !342, line: 16, size: 32, elements: !348, identifier: "_ZTSN11__mbstate_tUt_E")
!348 = !{!349, !350}
!349 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !347, file: !342, line: 18, baseType: !10, size: 32)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !347, file: !342, line: 19, baseType: !351, size: 32)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !109, size: 32, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 4)
!354 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !355)
!355 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !356, line: 20, baseType: !10)
!356 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!357 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !358)
!358 = !DISubprogram(name: "btowc", scope: !359, file: !359, line: 284, type: !360, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!359 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!360 = !DISubroutineType(types: !361)
!361 = !{!355, !80}
!362 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !363)
!363 = !DISubprogram(name: "fgetwc", scope: !359, file: !359, line: 727, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!364 = !DISubroutineType(types: !365)
!365 = !{!355, !366}
!366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !367, size: 64)
!367 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !368, line: 5, baseType: !369)
!368 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !368, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!370 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !371)
!371 = !DISubprogram(name: "fgetws", scope: !359, file: !359, line: 756, type: !372, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!372 = !DISubroutineType(types: !373)
!373 = !{!172, !171, !80, !374}
!374 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !366)
!375 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !376)
!376 = !DISubprogram(name: "fputwc", scope: !359, file: !359, line: 741, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!377 = !DISubroutineType(types: !378)
!378 = !{!355, !173, !366}
!379 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !380)
!380 = !DISubprogram(name: "fputws", scope: !359, file: !359, line: 763, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!381 = !DISubroutineType(types: !382)
!382 = !{!80, !218, !374}
!383 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !384)
!384 = !DISubprogram(name: "fwide", scope: !359, file: !359, line: 573, type: !385, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!385 = !DISubroutineType(types: !386)
!386 = !{!80, !366, !80}
!387 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !388)
!388 = !DISubprogram(name: "fwprintf", scope: !359, file: !359, line: 580, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!389 = !DISubroutineType(types: !390)
!390 = !{!80, !374, !218, null}
!391 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !392)
!392 = !DISubprogram(name: "fwscanf", scope: !359, file: !359, line: 621, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!393 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !394)
!394 = !DISubprogram(name: "getwc", scope: !359, file: !359, line: 728, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!395 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !396)
!396 = !DISubprogram(name: "getwchar", scope: !359, file: !359, line: 734, type: !397, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!397 = !DISubroutineType(types: !398)
!398 = !{!355}
!399 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !400)
!400 = !DISubprogram(name: "mbrlen", scope: !359, file: !359, line: 307, type: !401, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!401 = !DISubroutineType(types: !402)
!402 = !{!123, !174, !123, !403}
!403 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !404)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!405 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !406)
!406 = !DISubprogram(name: "mbrtowc", scope: !359, file: !359, line: 296, type: !407, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!407 = !DISubroutineType(types: !408)
!408 = !{!123, !171, !174, !123, !403}
!409 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !410)
!410 = !DISubprogram(name: "mbsinit", scope: !359, file: !359, line: 292, type: !411, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!411 = !DISubroutineType(types: !412)
!412 = !{!80, !413}
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !339)
!415 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !416)
!416 = !DISubprogram(name: "mbsrtowcs", scope: !359, file: !359, line: 337, type: !417, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!417 = !DISubroutineType(types: !418)
!418 = !{!123, !171, !419, !123, !403}
!419 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !420)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!421 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !422)
!422 = !DISubprogram(name: "putwc", scope: !359, file: !359, line: 742, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!423 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !424)
!424 = !DISubprogram(name: "putwchar", scope: !359, file: !359, line: 748, type: !425, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!425 = !DISubroutineType(types: !426)
!426 = !{!355, !173}
!427 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !428)
!428 = !DISubprogram(name: "swprintf", scope: !359, file: !359, line: 590, type: !429, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!429 = !DISubroutineType(types: !430)
!430 = !{!80, !171, !123, !218, null}
!431 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !432)
!432 = !DISubprogram(name: "swscanf", scope: !359, file: !359, line: 631, type: !433, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!433 = !DISubroutineType(types: !434)
!434 = !{!80, !218, !218, null}
!435 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !436)
!436 = !DISubprogram(name: "ungetwc", scope: !359, file: !359, line: 771, type: !437, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!437 = !DISubroutineType(types: !438)
!438 = !{!355, !355, !366}
!439 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !440)
!440 = !DISubprogram(name: "vfwprintf", scope: !359, file: !359, line: 598, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!441 = !DISubroutineType(types: !442)
!442 = !{!80, !374, !218, !443}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !445, identifier: "_ZTS13__va_list_tag")
!445 = !{!446, !447, !448, !449}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !444, file: !2, baseType: !10, size: 32)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !444, file: !2, baseType: !10, size: 32, offset: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 64)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 128)
!450 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !451)
!451 = !DISubprogram(name: "vfwscanf", scope: !359, file: !359, line: 673, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!452 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !453)
!453 = !DISubprogram(name: "vswprintf", scope: !359, file: !359, line: 611, type: !454, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!454 = !DISubroutineType(types: !455)
!455 = !{!80, !171, !123, !218, !443}
!456 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !457)
!457 = !DISubprogram(name: "vswscanf", scope: !359, file: !359, line: 685, type: !458, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!458 = !DISubroutineType(types: !459)
!459 = !{!80, !218, !218, !443}
!460 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !461)
!461 = !DISubprogram(name: "vwprintf", scope: !359, file: !359, line: 606, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!462 = !DISubroutineType(types: !463)
!463 = !{!80, !218, !443}
!464 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !465)
!465 = !DISubprogram(name: "vwscanf", scope: !359, file: !359, line: 681, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!466 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !467)
!467 = !DISubprogram(name: "wcrtomb", scope: !359, file: !359, line: 301, type: !468, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!468 = !DISubroutineType(types: !469)
!469 = !{!123, !217, !173, !403}
!470 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !471)
!471 = !DISubprogram(name: "wcscat", scope: !359, file: !359, line: 97, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!472 = !DISubroutineType(types: !473)
!473 = !{!172, !171, !218}
!474 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !475)
!475 = !DISubprogram(name: "wcscmp", scope: !359, file: !359, line: 106, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!476 = !DISubroutineType(types: !477)
!477 = !{!80, !219, !219}
!478 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !479)
!479 = !DISubprogram(name: "wcscoll", scope: !359, file: !359, line: 131, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!480 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !481)
!481 = !DISubprogram(name: "wcscpy", scope: !359, file: !359, line: 87, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!482 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !483)
!483 = !DISubprogram(name: "wcscspn", scope: !359, file: !359, line: 187, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!484 = !DISubroutineType(types: !485)
!485 = !{!123, !219, !219}
!486 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !487)
!487 = !DISubprogram(name: "wcsftime", scope: !359, file: !359, line: 835, type: !488, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!488 = !DISubroutineType(types: !489)
!489 = !{!123, !171, !123, !218, !490}
!490 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !491)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !493)
!493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !359, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!494 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !495)
!495 = !DISubprogram(name: "wcslen", scope: !359, file: !359, line: 222, type: !496, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!496 = !DISubroutineType(types: !497)
!497 = !{!123, !219}
!498 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !499)
!499 = !DISubprogram(name: "wcsncat", scope: !359, file: !359, line: 101, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!500 = !DISubroutineType(types: !501)
!501 = !{!172, !171, !218, !123}
!502 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !503)
!503 = !DISubprogram(name: "wcsncmp", scope: !359, file: !359, line: 109, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!504 = !DISubroutineType(types: !505)
!505 = !{!80, !219, !219, !123}
!506 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !507)
!507 = !DISubprogram(name: "wcsncpy", scope: !359, file: !359, line: 92, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!508 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !509)
!509 = !DISubprogram(name: "wcsrtombs", scope: !359, file: !359, line: 343, type: !510, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!510 = !DISubroutineType(types: !511)
!511 = !{!123, !217, !512, !123, !403}
!512 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !513)
!513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!514 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !515)
!515 = !DISubprogram(name: "wcsspn", scope: !359, file: !359, line: 191, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!516 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !517)
!517 = !DISubprogram(name: "wcstod", scope: !359, file: !359, line: 377, type: !518, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!518 = !DISubroutineType(types: !519)
!519 = !{!106, !218, !520}
!520 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !521)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!522 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !523)
!523 = !DISubprogram(name: "wcstof", scope: !359, file: !359, line: 382, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!524 = !DISubroutineType(types: !525)
!525 = !{!260, !218, !520}
!526 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !527)
!527 = !DISubprogram(name: "wcstok", scope: !359, file: !359, line: 217, type: !528, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!528 = !DISubroutineType(types: !529)
!529 = !{!172, !171, !218, !520}
!530 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !531)
!531 = !DISubprogram(name: "wcstol", scope: !359, file: !359, line: 428, type: !532, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!532 = !DISubroutineType(types: !533)
!533 = !{!89, !218, !520, !80}
!534 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !535)
!535 = !DISubprogram(name: "wcstoul", scope: !359, file: !359, line: 433, type: !536, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!536 = !DISubroutineType(types: !537)
!537 = !{!125, !218, !520, !80}
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !539)
!539 = !DISubprogram(name: "wcsxfrm", scope: !359, file: !359, line: 135, type: !540, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!540 = !DISubroutineType(types: !541)
!541 = !{!123, !171, !218, !123}
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !543)
!543 = !DISubprogram(name: "wctob", scope: !359, file: !359, line: 288, type: !544, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!544 = !DISubroutineType(types: !545)
!545 = !{!80, !355}
!546 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !547)
!547 = !DISubprogram(name: "wmemcmp", scope: !359, file: !359, line: 258, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!548 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !549)
!549 = !DISubprogram(name: "wmemcpy", scope: !359, file: !359, line: 262, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !551)
!551 = !DISubprogram(name: "wmemmove", scope: !359, file: !359, line: 267, type: !552, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!552 = !DISubroutineType(types: !553)
!553 = !{!172, !172, !219, !123}
!554 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !555)
!555 = !DISubprogram(name: "wmemset", scope: !359, file: !359, line: 271, type: !556, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!556 = !DISubroutineType(types: !557)
!557 = !{!172, !172, !173, !123}
!558 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !559)
!559 = !DISubprogram(name: "wprintf", scope: !359, file: !359, line: 587, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!560 = !DISubroutineType(types: !561)
!561 = !{!80, !218, null}
!562 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !563)
!563 = !DISubprogram(name: "wscanf", scope: !359, file: !359, line: 628, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!564 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !565)
!565 = !DISubprogram(name: "wcschr", scope: !359, file: !359, line: 164, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!566 = !DISubroutineType(types: !567)
!567 = !{!172, !219, !173}
!568 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !569)
!569 = !DISubprogram(name: "wcspbrk", scope: !359, file: !359, line: 201, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!570 = !DISubroutineType(types: !571)
!571 = !{!172, !219, !219}
!572 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !573)
!573 = !DISubprogram(name: "wcsrchr", scope: !359, file: !359, line: 174, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!574 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !575)
!575 = !DISubprogram(name: "wcsstr", scope: !359, file: !359, line: 212, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!576 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !577)
!577 = !DISubprogram(name: "wmemchr", scope: !359, file: !359, line: 253, type: !578, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!578 = !DISubroutineType(types: !579)
!579 = !{!172, !219, !173, !123}
!580 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !581)
!581 = !DISubprogram(name: "wcstold", scope: !359, file: !359, line: 384, type: !582, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!582 = !DISubroutineType(types: !583)
!583 = !{!265, !218, !520}
!584 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !585)
!585 = !DISubprogram(name: "wcstoll", scope: !359, file: !359, line: 441, type: !586, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!586 = !DISubroutineType(types: !587)
!587 = !{!231, !218, !520, !80}
!588 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !589)
!589 = !DISubprogram(name: "wcstoull", scope: !359, file: !359, line: 448, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!590 = !DISubroutineType(types: !591)
!591 = !{!255, !218, !520, !80}
!592 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !581)
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !585)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !589)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !596)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !597)
!597 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !599)
!599 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !600)
!600 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !602)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !80)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !604)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !89)
!605 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !606)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !596)
!607 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !608)
!608 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !599)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !610)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !602)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !612)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !604)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !614)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !596)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !616)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !599)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !618)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !602)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !620)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !604)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !622)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !89)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !624)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !604)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !62)
!626 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !28)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !8)
!628 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !629)
!629 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !125)
!630 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !631)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!632 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !633)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !635)
!635 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !637)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !629)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !639)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !641)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !643)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !645)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !629)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !647)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !125)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !649)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !629)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !651)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !74, file: !306, line: 231, baseType: !125)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !653)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !74, file: !306, line: 232, baseType: !89)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !656, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!656 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!657 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !658)
!658 = !DISubprogram(name: "setlocale", scope: !656, file: !656, line: 122, type: !659, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!659 = !DISubroutineType(types: !660)
!660 = !{!150, !80, !107}
!661 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !662)
!662 = !DISubprogram(name: "localeconv", scope: !656, file: !656, line: 125, type: !663, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!663 = !DISubroutineType(types: !664)
!664 = !{!665}
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!666 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !667)
!667 = !DISubprogram(name: "isalnum", scope: !668, file: !668, line: 108, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!668 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !670)
!670 = !DISubprogram(name: "isalpha", scope: !668, file: !668, line: 109, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !672)
!672 = !DISubprogram(name: "iscntrl", scope: !668, file: !668, line: 110, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!673 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !674)
!674 = !DISubprogram(name: "isdigit", scope: !668, file: !668, line: 111, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!675 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !676)
!676 = !DISubprogram(name: "isgraph", scope: !668, file: !668, line: 113, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !678)
!678 = !DISubprogram(name: "islower", scope: !668, file: !668, line: 112, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !680)
!680 = !DISubprogram(name: "isprint", scope: !668, file: !668, line: 114, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !682)
!682 = !DISubprogram(name: "ispunct", scope: !668, file: !668, line: 115, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !684)
!684 = !DISubprogram(name: "isspace", scope: !668, file: !668, line: 116, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !686)
!686 = !DISubprogram(name: "isupper", scope: !668, file: !668, line: 117, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !688)
!688 = !DISubprogram(name: "isxdigit", scope: !668, file: !668, line: 118, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !690)
!690 = !DISubprogram(name: "tolower", scope: !668, file: !668, line: 122, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !692)
!692 = !DISubprogram(name: "toupper", scope: !668, file: !668, line: 125, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !694)
!694 = !DISubprogram(name: "isblank", scope: !668, file: !668, line: 130, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !696)
!696 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !697, line: 7, baseType: !369)
!697 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!698 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !699)
!699 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !700, line: 78, baseType: !701)
!700 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !702, line: 30, baseType: !703)
!702 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !702, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!704 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !705)
!705 = !DISubprogram(name: "clearerr", scope: !700, file: !700, line: 757, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!706 = !DISubroutineType(types: !707)
!707 = !{null, !708}
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!709 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !710)
!710 = !DISubprogram(name: "fclose", scope: !700, file: !700, line: 199, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!711 = !DISubroutineType(types: !712)
!712 = !{!80, !708}
!713 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !714)
!714 = !DISubprogram(name: "feof", scope: !700, file: !700, line: 759, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!715 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !716)
!716 = !DISubprogram(name: "ferror", scope: !700, file: !700, line: 761, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !718)
!718 = !DISubprogram(name: "fflush", scope: !700, file: !700, line: 204, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !720)
!720 = !DISubprogram(name: "fgetc", scope: !700, file: !700, line: 477, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !722)
!722 = !DISubprogram(name: "fgetpos", scope: !700, file: !700, line: 731, type: !723, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DISubroutineType(types: !724)
!724 = !{!80, !725, !726}
!725 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !708)
!726 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !727)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!728 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !729)
!729 = !DISubprogram(name: "fgets", scope: !700, file: !700, line: 564, type: !730, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!730 = !DISubroutineType(types: !731)
!731 = !{!150, !217, !80, !725}
!732 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !733)
!733 = !DISubprogram(name: "fopen", scope: !700, file: !700, line: 232, type: !734, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!734 = !DISubroutineType(types: !735)
!735 = !{!708, !174, !174}
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !737)
!737 = !DISubprogram(name: "fprintf", scope: !700, file: !700, line: 312, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!80, !725, !174, null}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !741)
!741 = !DISubprogram(name: "fputc", scope: !700, file: !700, line: 517, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!80, !80, !708}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !745)
!745 = !DISubprogram(name: "fputs", scope: !700, file: !700, line: 626, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!80, !174, !725}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !749)
!749 = !DISubprogram(name: "fread", scope: !700, file: !700, line: 646, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!123, !752, !123, !123, !725}
!752 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !122)
!753 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !754)
!754 = !DISubprogram(name: "freopen", scope: !700, file: !700, line: 238, type: !755, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!755 = !DISubroutineType(types: !756)
!756 = !{!708, !174, !174, !725}
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !758)
!758 = !DISubprogram(name: "fscanf", scope: !700, file: !700, line: 377, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!759 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !760)
!760 = !DISubprogram(name: "fseek", scope: !700, file: !700, line: 684, type: !761, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!761 = !DISubroutineType(types: !762)
!762 = !{!80, !708, !89, !80}
!763 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !764)
!764 = !DISubprogram(name: "fsetpos", scope: !700, file: !700, line: 736, type: !765, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!765 = !DISubroutineType(types: !766)
!766 = !{!80, !708, !767}
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !699)
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !770)
!770 = !DISubprogram(name: "ftell", scope: !700, file: !700, line: 689, type: !771, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!771 = !DISubroutineType(types: !772)
!772 = !{!89, !708}
!773 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !774)
!774 = !DISubprogram(name: "fwrite", scope: !700, file: !700, line: 652, type: !775, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!775 = !DISubroutineType(types: !776)
!776 = !{!123, !777, !123, !123, !725}
!777 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!778 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !779)
!779 = !DISubprogram(name: "getc", scope: !700, file: !700, line: 478, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!780 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !781)
!781 = !DISubprogram(name: "getchar", scope: !700, file: !700, line: 484, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!782 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !783)
!783 = !DISubprogram(name: "gets", scope: !700, file: !700, line: 577, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!784 = !DISubroutineType(types: !785)
!785 = !{!150, !150}
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !787)
!787 = !DISubprogram(name: "perror", scope: !700, file: !700, line: 775, type: !788, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DISubroutineType(types: !789)
!789 = !{null, !107}
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !791)
!791 = !DISubprogram(name: "printf", scope: !700, file: !700, line: 318, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!80, !174, null}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !795)
!795 = !DISubprogram(name: "putc", scope: !700, file: !700, line: 518, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !797)
!797 = !DISubprogram(name: "putchar", scope: !700, file: !700, line: 524, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !799)
!799 = !DISubprogram(name: "puts", scope: !700, file: !700, line: 632, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !801)
!801 = !DISubprogram(name: "remove", scope: !700, file: !700, line: 144, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !803)
!803 = !DISubprogram(name: "rename", scope: !700, file: !700, line: 146, type: !804, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DISubroutineType(types: !805)
!805 = !{!80, !107, !107}
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !807)
!807 = !DISubprogram(name: "rewind", scope: !700, file: !700, line: 694, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !809)
!809 = !DISubprogram(name: "scanf", scope: !700, file: !700, line: 383, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !811)
!811 = !DISubprogram(name: "setbuf", scope: !700, file: !700, line: 290, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{null, !725, !217}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !815)
!815 = !DISubprogram(name: "setvbuf", scope: !700, file: !700, line: 294, type: !816, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DISubroutineType(types: !817)
!817 = !{!80, !725, !217, !80, !123}
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !819)
!819 = !DISubprogram(name: "sprintf", scope: !700, file: !700, line: 320, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{!80, !217, !174, null}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !823)
!823 = !DISubprogram(name: "sscanf", scope: !700, file: !700, line: 385, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!80, !174, !174, null}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !827)
!827 = !DISubprogram(name: "tmpfile", scope: !700, file: !700, line: 159, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!708}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !831)
!831 = !DISubprogram(name: "tmpnam", scope: !700, file: !700, line: 173, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !833)
!833 = !DISubprogram(name: "ungetc", scope: !700, file: !700, line: 639, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !835)
!835 = !DISubprogram(name: "vfprintf", scope: !700, file: !700, line: 327, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!80, !725, !174, !443}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !839)
!839 = !DISubprogram(name: "vprintf", scope: !700, file: !700, line: 333, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DISubroutineType(types: !841)
!841 = !{!80, !174, !443}
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !843)
!843 = !DISubprogram(name: "vsprintf", scope: !700, file: !700, line: 335, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!80, !217, !174, !443}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !847)
!847 = !DISubprogram(name: "snprintf", scope: !700, file: !700, line: 340, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!80, !217, !123, !174, null}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !851)
!851 = !DISubprogram(name: "vfscanf", scope: !700, file: !700, line: 420, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !853)
!853 = !DISubprogram(name: "vscanf", scope: !700, file: !700, line: 428, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !855)
!855 = !DISubprogram(name: "vsnprintf", scope: !700, file: !700, line: 344, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!80, !217, !123, !174, !443}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !859)
!859 = !DISubprogram(name: "vsscanf", scope: !700, file: !700, line: 432, type: !860, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DISubroutineType(types: !861)
!861 = !{!80, !174, !174, !443}
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !847)
!863 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !851)
!864 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !853)
!865 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !855)
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !859)
!867 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !868)
!868 = !DISubprogram(name: "acos", scope: !869, file: !869, line: 53, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!869 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!870 = !DISubroutineType(types: !871)
!871 = !{!106, !106}
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !873)
!873 = !DISubprogram(name: "asin", scope: !869, file: !869, line: 55, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !875)
!875 = !DISubprogram(name: "atan", scope: !869, file: !869, line: 57, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!876 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !877)
!877 = !DISubprogram(name: "atan2", scope: !869, file: !869, line: 59, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!878 = !DISubroutineType(types: !879)
!879 = !{!106, !106, !106}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !881)
!881 = !DISubprogram(name: "ceil", scope: !869, file: !869, line: 159, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !883)
!883 = !DISubprogram(name: "cos", scope: !869, file: !869, line: 62, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !885)
!885 = !DISubprogram(name: "cosh", scope: !869, file: !869, line: 71, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !887)
!887 = !DISubprogram(name: "exp", scope: !869, file: !869, line: 95, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !889)
!889 = !DISubprogram(name: "fabs", scope: !869, file: !869, line: 162, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !891)
!891 = !DISubprogram(name: "floor", scope: !869, file: !869, line: 165, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !893)
!893 = !DISubprogram(name: "fmod", scope: !869, file: !869, line: 168, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !895)
!895 = !DISubprogram(name: "frexp", scope: !869, file: !869, line: 98, type: !896, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DISubroutineType(types: !897)
!897 = !{!106, !106, !898}
!898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!899 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !900)
!900 = !DISubprogram(name: "ldexp", scope: !869, file: !869, line: 101, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!901 = !DISubroutineType(types: !902)
!902 = !{!106, !106, !80}
!903 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !904)
!904 = !DISubprogram(name: "log", scope: !869, file: !869, line: 104, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!905 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !906)
!906 = !DISubprogram(name: "log10", scope: !869, file: !869, line: 107, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !908)
!908 = !DISubprogram(name: "modf", scope: !869, file: !869, line: 110, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!106, !106, !911}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!912 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !913)
!913 = !DISubprogram(name: "pow", scope: !869, file: !869, line: 140, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!914 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !915)
!915 = !DISubprogram(name: "sin", scope: !869, file: !869, line: 64, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!916 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !917)
!917 = !DISubprogram(name: "sinh", scope: !869, file: !869, line: 73, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!918 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !919)
!919 = !DISubprogram(name: "sqrt", scope: !869, file: !869, line: 143, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !921)
!921 = !DISubprogram(name: "tan", scope: !869, file: !869, line: 66, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !923)
!923 = !DISubprogram(name: "tanh", scope: !869, file: !869, line: 75, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !925)
!925 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !926, line: 150, baseType: !106)
!926 = !DIFile(filename: "/usr/include/math.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!927 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !928)
!928 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !926, line: 149, baseType: !260)
!929 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !930)
!930 = !DISubprogram(name: "acosh", scope: !869, file: !869, line: 85, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!931 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !932)
!932 = !DISubprogram(name: "acoshf", scope: !869, file: !869, line: 85, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!933 = !DISubroutineType(types: !934)
!934 = !{!260, !260}
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !936)
!936 = !DISubprogram(name: "acoshl", scope: !869, file: !869, line: 85, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!937 = !DISubroutineType(types: !938)
!938 = !{!265, !265}
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !940)
!940 = !DISubprogram(name: "asinh", scope: !869, file: !869, line: 87, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !942)
!942 = !DISubprogram(name: "asinhf", scope: !869, file: !869, line: 87, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !944)
!944 = !DISubprogram(name: "asinhl", scope: !869, file: !869, line: 87, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !946)
!946 = !DISubprogram(name: "atanh", scope: !869, file: !869, line: 89, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !948)
!948 = !DISubprogram(name: "atanhf", scope: !869, file: !869, line: 89, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !950)
!950 = !DISubprogram(name: "atanhl", scope: !869, file: !869, line: 89, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !952)
!952 = !DISubprogram(name: "cbrt", scope: !869, file: !869, line: 152, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !954)
!954 = !DISubprogram(name: "cbrtf", scope: !869, file: !869, line: 152, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !956)
!956 = !DISubprogram(name: "cbrtl", scope: !869, file: !869, line: 152, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !958)
!958 = !DISubprogram(name: "copysign", scope: !869, file: !869, line: 196, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !960)
!960 = !DISubprogram(name: "copysignf", scope: !869, file: !869, line: 196, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DISubroutineType(types: !962)
!962 = !{!260, !260, !260}
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !964)
!964 = !DISubprogram(name: "copysignl", scope: !869, file: !869, line: 196, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DISubroutineType(types: !966)
!966 = !{!265, !265, !265}
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !968)
!968 = !DISubprogram(name: "erf", scope: !869, file: !869, line: 228, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !970)
!970 = !DISubprogram(name: "erff", scope: !869, file: !869, line: 228, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !972)
!972 = !DISubprogram(name: "erfl", scope: !869, file: !869, line: 228, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !974)
!974 = !DISubprogram(name: "erfc", scope: !869, file: !869, line: 229, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !976)
!976 = !DISubprogram(name: "erfcf", scope: !869, file: !869, line: 229, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !978)
!978 = !DISubprogram(name: "erfcl", scope: !869, file: !869, line: 229, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !980)
!980 = !DISubprogram(name: "exp2", scope: !869, file: !869, line: 130, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !982)
!982 = !DISubprogram(name: "exp2f", scope: !869, file: !869, line: 130, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !984)
!984 = !DISubprogram(name: "exp2l", scope: !869, file: !869, line: 130, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !986)
!986 = !DISubprogram(name: "expm1", scope: !869, file: !869, line: 119, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !988)
!988 = !DISubprogram(name: "expm1f", scope: !869, file: !869, line: 119, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !990)
!990 = !DISubprogram(name: "expm1l", scope: !869, file: !869, line: 119, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !992)
!992 = !DISubprogram(name: "fdim", scope: !869, file: !869, line: 326, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !994)
!994 = !DISubprogram(name: "fdimf", scope: !869, file: !869, line: 326, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !996)
!996 = !DISubprogram(name: "fdiml", scope: !869, file: !869, line: 326, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !998)
!998 = !DISubprogram(name: "fma", scope: !869, file: !869, line: 335, type: !999, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!106, !106, !106, !106}
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1002)
!1002 = !DISubprogram(name: "fmaf", scope: !869, file: !869, line: 335, type: !1003, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!260, !260, !260, !260}
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1006)
!1006 = !DISubprogram(name: "fmal", scope: !869, file: !869, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!265, !265, !265, !265}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1010)
!1010 = !DISubprogram(name: "fmax", scope: !869, file: !869, line: 329, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1012)
!1012 = !DISubprogram(name: "fmaxf", scope: !869, file: !869, line: 329, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1014)
!1014 = !DISubprogram(name: "fmaxl", scope: !869, file: !869, line: 329, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1016)
!1016 = !DISubprogram(name: "fmin", scope: !869, file: !869, line: 332, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1018)
!1018 = !DISubprogram(name: "fminf", scope: !869, file: !869, line: 332, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1020)
!1020 = !DISubprogram(name: "fminl", scope: !869, file: !869, line: 332, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1022)
!1022 = !DISubprogram(name: "hypot", scope: !869, file: !869, line: 147, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1024)
!1024 = !DISubprogram(name: "hypotf", scope: !869, file: !869, line: 147, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1026)
!1026 = !DISubprogram(name: "hypotl", scope: !869, file: !869, line: 147, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1028)
!1028 = !DISubprogram(name: "ilogb", scope: !869, file: !869, line: 280, type: !1029, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DISubroutineType(types: !1030)
!1030 = !{!80, !106}
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1032)
!1032 = !DISubprogram(name: "ilogbf", scope: !869, file: !869, line: 280, type: !1033, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DISubroutineType(types: !1034)
!1034 = !{!80, !260}
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1036)
!1036 = !DISubprogram(name: "ilogbl", scope: !869, file: !869, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!80, !265}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1040)
!1040 = !DISubprogram(name: "lgamma", scope: !869, file: !869, line: 230, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1042)
!1042 = !DISubprogram(name: "lgammaf", scope: !869, file: !869, line: 230, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1044)
!1044 = !DISubprogram(name: "lgammal", scope: !869, file: !869, line: 230, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1046)
!1046 = !DISubprogram(name: "llrint", scope: !869, file: !869, line: 316, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1047 = !DISubroutineType(types: !1048)
!1048 = !{!231, !106}
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1050)
!1050 = !DISubprogram(name: "llrintf", scope: !869, file: !869, line: 316, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!231, !260}
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1054)
!1054 = !DISubprogram(name: "llrintl", scope: !869, file: !869, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!231, !265}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1058)
!1058 = !DISubprogram(name: "llround", scope: !869, file: !869, line: 322, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1060)
!1060 = !DISubprogram(name: "llroundf", scope: !869, file: !869, line: 322, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1062)
!1062 = !DISubprogram(name: "llroundl", scope: !869, file: !869, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1064)
!1064 = !DISubprogram(name: "log1p", scope: !869, file: !869, line: 122, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1066)
!1066 = !DISubprogram(name: "log1pf", scope: !869, file: !869, line: 122, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1068)
!1068 = !DISubprogram(name: "log1pl", scope: !869, file: !869, line: 122, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1070)
!1070 = !DISubprogram(name: "log2", scope: !869, file: !869, line: 133, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1072)
!1072 = !DISubprogram(name: "log2f", scope: !869, file: !869, line: 133, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1074)
!1074 = !DISubprogram(name: "log2l", scope: !869, file: !869, line: 133, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1076)
!1076 = !DISubprogram(name: "logb", scope: !869, file: !869, line: 125, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1078)
!1078 = !DISubprogram(name: "logbf", scope: !869, file: !869, line: 125, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1080)
!1080 = !DISubprogram(name: "logbl", scope: !869, file: !869, line: 125, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1082)
!1082 = !DISubprogram(name: "lrint", scope: !869, file: !869, line: 314, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!89, !106}
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1086)
!1086 = !DISubprogram(name: "lrintf", scope: !869, file: !869, line: 314, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DISubroutineType(types: !1088)
!1088 = !{!89, !260}
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1090)
!1090 = !DISubprogram(name: "lrintl", scope: !869, file: !869, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!89, !265}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1094)
!1094 = !DISubprogram(name: "lround", scope: !869, file: !869, line: 320, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1096)
!1096 = !DISubprogram(name: "lroundf", scope: !869, file: !869, line: 320, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1098)
!1098 = !DISubprogram(name: "lroundl", scope: !869, file: !869, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1100)
!1100 = !DISubprogram(name: "nan", scope: !869, file: !869, line: 201, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1102)
!1102 = !DISubprogram(name: "nanf", scope: !869, file: !869, line: 201, type: !1103, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!260, !107}
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1106)
!1106 = !DISubprogram(name: "nanl", scope: !869, file: !869, line: 201, type: !1107, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!265, !107}
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1110)
!1110 = !DISubprogram(name: "nearbyint", scope: !869, file: !869, line: 294, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1112)
!1112 = !DISubprogram(name: "nearbyintf", scope: !869, file: !869, line: 294, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1114)
!1114 = !DISubprogram(name: "nearbyintl", scope: !869, file: !869, line: 294, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1116)
!1116 = !DISubprogram(name: "nextafter", scope: !869, file: !869, line: 259, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1118)
!1118 = !DISubprogram(name: "nextafterf", scope: !869, file: !869, line: 259, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1120)
!1120 = !DISubprogram(name: "nextafterl", scope: !869, file: !869, line: 259, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1122)
!1122 = !DISubprogram(name: "nexttoward", scope: !869, file: !869, line: 261, type: !1123, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!106, !106, !265}
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1126)
!1126 = !DISubprogram(name: "nexttowardf", scope: !869, file: !869, line: 261, type: !1127, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DISubroutineType(types: !1128)
!1128 = !{!260, !260, !265}
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1130)
!1130 = !DISubprogram(name: "nexttowardl", scope: !869, file: !869, line: 261, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1132)
!1132 = !DISubprogram(name: "remainder", scope: !869, file: !869, line: 272, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1134)
!1134 = !DISubprogram(name: "remainderf", scope: !869, file: !869, line: 272, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1136)
!1136 = !DISubprogram(name: "remainderl", scope: !869, file: !869, line: 272, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1138)
!1138 = !DISubprogram(name: "remquo", scope: !869, file: !869, line: 307, type: !1139, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!106, !106, !106, !898}
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1142)
!1142 = !DISubprogram(name: "remquof", scope: !869, file: !869, line: 307, type: !1143, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!260, !260, !260, !898}
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1146)
!1146 = !DISubprogram(name: "remquol", scope: !869, file: !869, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!265, !265, !265, !898}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1150)
!1150 = !DISubprogram(name: "rint", scope: !869, file: !869, line: 256, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1152)
!1152 = !DISubprogram(name: "rintf", scope: !869, file: !869, line: 256, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1154)
!1154 = !DISubprogram(name: "rintl", scope: !869, file: !869, line: 256, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1156)
!1156 = !DISubprogram(name: "round", scope: !869, file: !869, line: 298, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1158)
!1158 = !DISubprogram(name: "roundf", scope: !869, file: !869, line: 298, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1160)
!1160 = !DISubprogram(name: "roundl", scope: !869, file: !869, line: 298, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1162)
!1162 = !DISubprogram(name: "scalbln", scope: !869, file: !869, line: 290, type: !1163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!106, !106, !89}
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1166)
!1166 = !DISubprogram(name: "scalblnf", scope: !869, file: !869, line: 290, type: !1167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DISubroutineType(types: !1168)
!1168 = !{!260, !260, !89}
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1170)
!1170 = !DISubprogram(name: "scalblnl", scope: !869, file: !869, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!265, !265, !89}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1174)
!1174 = !DISubprogram(name: "scalbn", scope: !869, file: !869, line: 276, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1176)
!1176 = !DISubprogram(name: "scalbnf", scope: !869, file: !869, line: 276, type: !1177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{!260, !260, !80}
!1179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1180)
!1180 = !DISubprogram(name: "scalbnl", scope: !869, file: !869, line: 276, type: !1181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!265, !265, !80}
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1184)
!1184 = !DISubprogram(name: "tgamma", scope: !869, file: !869, line: 235, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1186)
!1186 = !DISubprogram(name: "tgammaf", scope: !869, file: !869, line: 235, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1188)
!1188 = !DISubprogram(name: "tgammal", scope: !869, file: !869, line: 235, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1190)
!1190 = !DISubprogram(name: "trunc", scope: !869, file: !869, line: 302, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1192)
!1192 = !DISubprogram(name: "truncf", scope: !869, file: !869, line: 302, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1194)
!1194 = !DISubprogram(name: "truncl", scope: !869, file: !869, line: 302, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1197, line: 94, baseType: !1198)
!1197 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1197, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1197, line: 68, baseType: !29)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1202)
!1202 = !DISubprogram(name: "feclearexcept", scope: !1203, file: !1203, line: 71, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1205)
!1205 = !DISubprogram(name: "fegetexceptflag", scope: !1203, file: !1203, line: 75, type: !1206, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!80, !1208, !80}
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1200, size: 64)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1210)
!1210 = !DISubprogram(name: "feraiseexcept", scope: !1203, file: !1203, line: 78, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1212)
!1212 = !DISubprogram(name: "fesetexceptflag", scope: !1203, file: !1203, line: 88, type: !1213, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1213 = !DISubroutineType(types: !1214)
!1214 = !{!80, !1215, !80}
!1215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1216, size: 64)
!1216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1200)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1218)
!1218 = !DISubprogram(name: "fetestexcept", scope: !1203, file: !1203, line: 92, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1220)
!1220 = !DISubprogram(name: "fegetround", scope: !1203, file: !1203, line: 104, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1222)
!1222 = !DISubprogram(name: "fesetround", scope: !1203, file: !1203, line: 107, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1224)
!1224 = !DISubprogram(name: "fegetenv", scope: !1203, file: !1203, line: 114, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1225 = !DISubroutineType(types: !1226)
!1226 = !{!80, !1227}
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1228 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1229)
!1229 = !DISubprogram(name: "feholdexcept", scope: !1203, file: !1203, line: 119, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1231)
!1231 = !DISubprogram(name: "fesetenv", scope: !1203, file: !1203, line: 123, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1232 = !DISubroutineType(types: !1233)
!1233 = !{!80, !1234}
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1196)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1237)
!1237 = !DISubprogram(name: "feupdateenv", scope: !1203, file: !1203, line: 128, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !{i32 2, !"Dwarf Version", i32 4}
!1239 = !{i32 2, !"Debug Info Version", i32 3}
!1240 = !{!1241, !1241, i64 0}
!1241 = !{!"long", !1242, i64 0}
!1242 = !{!"omnipotent char", !1243, i64 0}
!1243 = !{!"Simple C++ TBAA"}
!1244 = !{!1245, !1245, i64 0}
!1245 = !{!"int", !1242, i64 0}
!1246 = !{!1247, !1247, i64 0}
!1247 = !{!"double", !1242, i64 0}
!1248 = !{!1249, !1242, i64 2065}
!1249 = !{!"_ZTS5State", !1242, i64 16, !1250, i64 2064, !1242, i64 2080, !1251, i64 2088, !1253, i64 2112, !1255, i64 2208, !1256, i64 2480, !1257, i64 2608, !1258, i64 2736, !1242, i64 2760, !1242, i64 2768, !1259, i64 3280}
!1250 = !{!"_ZTS10ArithFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15}
!1251 = !{!"_ZTS8Segments", !1252, i64 0, !1242, i64 2, !1252, i64 4, !1242, i64 6, !1252, i64 8, !1242, i64 10, !1252, i64 12, !1242, i64 14, !1252, i64 16, !1242, i64 18, !1252, i64 20, !1242, i64 22}
!1252 = !{!"short", !1242, i64 0}
!1253 = !{!"_ZTS12AddressSpace", !1241, i64 0, !1254, i64 8, !1241, i64 16, !1254, i64 24, !1241, i64 32, !1254, i64 40, !1241, i64 48, !1254, i64 56, !1241, i64 64, !1254, i64 72, !1241, i64 80, !1254, i64 88}
!1254 = !{!"_ZTS3Reg", !1242, i64 0}
!1255 = !{!"_ZTS3GPR", !1241, i64 0, !1254, i64 8, !1241, i64 16, !1254, i64 24, !1241, i64 32, !1254, i64 40, !1241, i64 48, !1254, i64 56, !1241, i64 64, !1254, i64 72, !1241, i64 80, !1254, i64 88, !1241, i64 96, !1254, i64 104, !1241, i64 112, !1254, i64 120, !1241, i64 128, !1254, i64 136, !1241, i64 144, !1254, i64 152, !1241, i64 160, !1254, i64 168, !1241, i64 176, !1254, i64 184, !1241, i64 192, !1254, i64 200, !1241, i64 208, !1254, i64 216, !1241, i64 224, !1254, i64 232, !1241, i64 240, !1254, i64 248, !1241, i64 256, !1254, i64 264}
!1256 = !{!"_ZTS8X87Stack", !1242, i64 0}
!1257 = !{!"_ZTS3MMX", !1242, i64 0}
!1258 = !{!"_ZTS14FPUStatusFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15, !1242, i64 16, !1242, i64 17, !1242, i64 18, !1242, i64 19, !1242, i64 20}
!1259 = !{!"_ZTS13SegmentCaches", !1260, i64 0, !1260, i64 16, !1260, i64 32, !1260, i64 48, !1260, i64 64, !1260, i64 80}
!1260 = !{!"_ZTS13SegmentShadow", !1242, i64 0, !1245, i64 8, !1245, i64 12}
!1261 = !{!1249, !1242, i64 2067}
!1262 = !{!1249, !1242, i64 2069}
!1263 = !{!1249, !1242, i64 2071}
!1264 = !{!1249, !1242, i64 2073}
!1265 = !{!1249, !1242, i64 2077}
!1266 = !{!1267, !1267, i64 0}
!1267 = !{!"float", !1242, i64 0}
!1268 = !{!1269}
!1269 = distinct !{!1269, !1270, !"ext_9ede10_printf: argument 0"}
!1270 = distinct !{!1270, !"ext_9ede10_printf"}
!1271 = !{!1272}
!1272 = distinct !{!1272, !1270, !"ext_9ede10_printf: argument 1"}
!1273 = !{!1274}
!1274 = distinct !{!1274, !1275, !"ext_9ede10_printf: argument 0"}
!1275 = distinct !{!1275, !"ext_9ede10_printf"}
!1276 = !{!1277}
!1277 = distinct !{!1277, !1275, !"ext_9ede10_printf: argument 1"}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1280, !"ext_9ede10_printf: argument 0"}
!1280 = distinct !{!1280, !"ext_9ede10_printf"}
!1281 = !{!1282}
!1282 = distinct !{!1282, !1280, !"ext_9ede10_printf: argument 1"}
!1283 = !{!1284}
!1284 = distinct !{!1284, !1285, !"ext_9ede10_printf: argument 0"}
!1285 = distinct !{!1285, !"ext_9ede10_printf"}
!1286 = !{!1287}
!1287 = distinct !{!1287, !1285, !"ext_9ede10_printf: argument 1"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1290, !"ext_9ede10_printf: argument 0"}
!1290 = distinct !{!1290, !"ext_9ede10_printf"}
!1291 = !{!1292}
!1292 = distinct !{!1292, !1290, !"ext_9ede10_printf: argument 1"}
!1293 = !{!1294}
!1294 = distinct !{!1294, !1295, !"ext_9ede10_printf: argument 0"}
!1295 = distinct !{!1295, !"ext_9ede10_printf"}
!1296 = !{!1297}
!1297 = distinct !{!1297, !1295, !"ext_9ede10_printf: argument 1"}
!1298 = !{!1299}
!1299 = distinct !{!1299, !1300, !"ext_9ede10_printf: argument 0"}
!1300 = distinct !{!1300, !"ext_9ede10_printf"}
!1301 = !{!1302}
!1302 = distinct !{!1302, !1300, !"ext_9ede10_printf: argument 1"}
!1303 = !{!1304}
!1304 = distinct !{!1304, !1305, !"ext_9ede10_printf: argument 0"}
!1305 = distinct !{!1305, !"ext_9ede10_printf"}
!1306 = !{!1307}
!1307 = distinct !{!1307, !1305, !"ext_9ede10_printf: argument 1"}
!1308 = !{!1309}
!1309 = distinct !{!1309, !1310, !"ext_9ede10_printf: argument 0"}
!1310 = distinct !{!1310, !"ext_9ede10_printf"}
!1311 = !{!1312}
!1312 = distinct !{!1312, !1310, !"ext_9ede10_printf: argument 1"}
!1313 = !{!1314}
!1314 = distinct !{!1314, !1315, !"ext_9ede10_printf: argument 0"}
!1315 = distinct !{!1315, !"ext_9ede10_printf"}
!1316 = !{!1317}
!1317 = distinct !{!1317, !1315, !"ext_9ede10_printf: argument 1"}
!1318 = !{!1319}
!1319 = distinct !{!1319, !1320, !"ext_9ede10_printf: argument 0"}
!1320 = distinct !{!1320, !"ext_9ede10_printf"}
!1321 = !{!1322}
!1322 = distinct !{!1322, !1320, !"ext_9ede10_printf: argument 1"}
!1323 = !{!1324}
!1324 = distinct !{!1324, !1325, !"ext_9ede10_printf: argument 0"}
!1325 = distinct !{!1325, !"ext_9ede10_printf"}
!1326 = !{!1327}
!1327 = distinct !{!1327, !1325, !"ext_9ede10_printf: argument 1"}
!1328 = !{!1329}
!1329 = distinct !{!1329, !1330, !"ext_9ede10_printf: argument 0"}
!1330 = distinct !{!1330, !"ext_9ede10_printf"}
!1331 = !{!1332}
!1332 = distinct !{!1332, !1330, !"ext_9ede10_printf: argument 1"}
!1333 = !{!1334}
!1334 = distinct !{!1334, !1335, !"ext_9ede28_pow: argument 0"}
!1335 = distinct !{!1335, !"ext_9ede28_pow"}
!1336 = !{!1337}
!1337 = distinct !{!1337, !1335, !"ext_9ede28_pow: argument 1"}
!1338 = !{!1339}
!1339 = distinct !{!1339, !1340, !"ext_9ede10_printf: argument 0"}
!1340 = distinct !{!1340, !"ext_9ede10_printf"}
!1341 = !{!1342}
!1342 = distinct !{!1342, !1340, !"ext_9ede10_printf: argument 1"}
!1343 = !{!1344}
!1344 = distinct !{!1344, !1345, !"ext_9ede10_printf: argument 0"}
!1345 = distinct !{!1345, !"ext_9ede10_printf"}
!1346 = !{!1347}
!1347 = distinct !{!1347, !1345, !"ext_9ede10_printf: argument 1"}
!1348 = !{!1349}
!1349 = distinct !{!1349, !1350, !"ext_9ede10_printf: argument 0"}
!1350 = distinct !{!1350, !"ext_9ede10_printf"}
!1351 = !{!1352}
!1352 = distinct !{!1352, !1350, !"ext_9ede10_printf: argument 1"}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355, !"ext_9ede10_printf: argument 0"}
!1355 = distinct !{!1355, !"ext_9ede10_printf"}
!1356 = !{!1357}
!1357 = distinct !{!1357, !1355, !"ext_9ede10_printf: argument 1"}
!1358 = !{!1359}
!1359 = distinct !{!1359, !1360, !"ext_9ede10_printf: argument 0"}
!1360 = distinct !{!1360, !"ext_9ede10_printf"}
!1361 = !{!1362}
!1362 = distinct !{!1362, !1360, !"ext_9ede10_printf: argument 1"}
!1363 = !{!1364}
!1364 = distinct !{!1364, !1365, !"ext_9ede10_printf: argument 0"}
!1365 = distinct !{!1365, !"ext_9ede10_printf"}
!1366 = !{!1367}
!1367 = distinct !{!1367, !1365, !"ext_9ede10_printf: argument 1"}
!1368 = !{!1369}
!1369 = distinct !{!1369, !1370, !"ext_9ede10_printf: argument 0"}
!1370 = distinct !{!1370, !"ext_9ede10_printf"}
!1371 = !{!1372}
!1372 = distinct !{!1372, !1370, !"ext_9ede10_printf: argument 1"}
!1373 = !{!1374}
!1374 = distinct !{!1374, !1375, !"ext_9ede10_printf: argument 0"}
!1375 = distinct !{!1375, !"ext_9ede10_printf"}
!1376 = !{!1377}
!1377 = distinct !{!1377, !1375, !"ext_9ede10_printf: argument 1"}
!1378 = !{!1379}
!1379 = distinct !{!1379, !1380, !"ext_9ede10_printf: argument 0"}
!1380 = distinct !{!1380, !"ext_9ede10_printf"}
!1381 = !{!1382}
!1382 = distinct !{!1382, !1380, !"ext_9ede10_printf: argument 1"}
!1383 = !{!1384}
!1384 = distinct !{!1384, !1385, !"ext_9ede10_printf: argument 0"}
!1385 = distinct !{!1385, !"ext_9ede10_printf"}
!1386 = !{!1387}
!1387 = distinct !{!1387, !1385, !"ext_9ede10_printf: argument 1"}
!1388 = !{!1389}
!1389 = distinct !{!1389, !1390, !"ext_9ede10_printf: argument 0"}
!1390 = distinct !{!1390, !"ext_9ede10_printf"}
!1391 = !{!1392}
!1392 = distinct !{!1392, !1390, !"ext_9ede10_printf: argument 1"}
!1393 = !{!1394}
!1394 = distinct !{!1394, !1395, !"ext_9ede10_printf: argument 0"}
!1395 = distinct !{!1395, !"ext_9ede10_printf"}
!1396 = !{!1397}
!1397 = distinct !{!1397, !1395, !"ext_9ede10_printf: argument 1"}
!1398 = !{!1399}
!1399 = distinct !{!1399, !1400, !"ext_9ede10_printf: argument 0"}
!1400 = distinct !{!1400, !"ext_9ede10_printf"}
!1401 = !{!1402}
!1402 = distinct !{!1402, !1400, !"ext_9ede10_printf: argument 1"}
!1403 = !{!1404}
!1404 = distinct !{!1404, !1405, !"ext_9ede10_printf: argument 0"}
!1405 = distinct !{!1405, !"ext_9ede10_printf"}
!1406 = !{!1407}
!1407 = distinct !{!1407, !1405, !"ext_9ede10_printf: argument 1"}
!1408 = !{!1409}
!1409 = distinct !{!1409, !1410, !"ext_9ede10_printf: argument 0"}
!1410 = distinct !{!1410, !"ext_9ede10_printf"}
!1411 = !{!1412}
!1412 = distinct !{!1412, !1410, !"ext_9ede10_printf: argument 1"}
!1413 = !{!1414}
!1414 = distinct !{!1414, !1415, !"ext_9ede28_pow: argument 0"}
!1415 = distinct !{!1415, !"ext_9ede28_pow"}
!1416 = !{!1417}
!1417 = distinct !{!1417, !1415, !"ext_9ede28_pow: argument 1"}
!1418 = !{!1419}
!1419 = distinct !{!1419, !1420, !"ext_400770_sprintf: argument 0"}
!1420 = distinct !{!1420, !"ext_400770_sprintf"}
!1421 = !{!1422}
!1422 = distinct !{!1422, !1420, !"ext_400770_sprintf: argument 1"}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"ext_9ede10_printf: argument 0"}
!1425 = distinct !{!1425, !"ext_9ede10_printf"}
!1426 = !{!1427}
!1427 = distinct !{!1427, !1425, !"ext_9ede10_printf: argument 1"}
!1428 = !{!1429}
!1429 = distinct !{!1429, !1430, !"ext_9ede10_printf: argument 0"}
!1430 = distinct !{!1430, !"ext_9ede10_printf"}
!1431 = !{!1432}
!1432 = distinct !{!1432, !1430, !"ext_9ede10_printf: argument 1"}
!1433 = !{!1434}
!1434 = distinct !{!1434, !1435, !"ext_9ede10_printf: argument 0"}
!1435 = distinct !{!1435, !"ext_9ede10_printf"}
!1436 = !{!1437}
!1437 = distinct !{!1437, !1435, !"ext_9ede10_printf: argument 1"}
!1438 = !{!1439}
!1439 = distinct !{!1439, !1440, !"ext_9ede10_printf: argument 0"}
!1440 = distinct !{!1440, !"ext_9ede10_printf"}
!1441 = !{!1442}
!1442 = distinct !{!1442, !1440, !"ext_9ede10_printf: argument 1"}
!1443 = !{!1444}
!1444 = distinct !{!1444, !1445, !"ext_9ede10_printf: argument 0"}
!1445 = distinct !{!1445, !"ext_9ede10_printf"}
!1446 = !{!1447}
!1447 = distinct !{!1447, !1445, !"ext_9ede10_printf: argument 1"}
!1448 = !{!1449}
!1449 = distinct !{!1449, !1450, !"ext_9ede10_printf: argument 0"}
!1450 = distinct !{!1450, !"ext_9ede10_printf"}
!1451 = !{!1452}
!1452 = distinct !{!1452, !1450, !"ext_9ede10_printf: argument 1"}
!1453 = !{!1454}
!1454 = distinct !{!1454, !1455, !"ext_9ede50___libc_start_main: argument 0"}
!1455 = distinct !{!1455, !"ext_9ede50___libc_start_main"}
!1456 = !{!1457}
!1457 = distinct !{!1457, !1455, !"ext_9ede50___libc_start_main: argument 1"}
!1458 = !{!1459}
!1459 = distinct !{!1459, !1460, !"ext_9ede10_printf: argument 0"}
!1460 = distinct !{!1460, !"ext_9ede10_printf"}
!1461 = !{!1462}
!1462 = distinct !{!1462, !1460, !"ext_9ede10_printf: argument 1"}
!1463 = !{!1242, !1242, i64 0}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1466, !"ext_9ede10_printf: argument 0"}
!1466 = distinct !{!1466, !"ext_9ede10_printf"}
!1467 = !{!1468}
!1468 = distinct !{!1468, !1466, !"ext_9ede10_printf: argument 1"}
!1469 = !{!1470}
!1470 = distinct !{!1470, !1471, !"ext_9ede10_printf: argument 0"}
!1471 = distinct !{!1471, !"ext_9ede10_printf"}
!1472 = !{!1473}
!1473 = distinct !{!1473, !1471, !"ext_9ede10_printf: argument 1"}
!1474 = !{!1475}
!1475 = distinct !{!1475, !1476, !"ext_9ede10_printf: argument 0"}
!1476 = distinct !{!1476, !"ext_9ede10_printf"}
!1477 = !{!1478}
!1478 = distinct !{!1478, !1476, !"ext_9ede10_printf: argument 1"}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1481, !"ext_9ede10_printf: argument 0"}
!1481 = distinct !{!1481, !"ext_9ede10_printf"}
!1482 = !{!1483}
!1483 = distinct !{!1483, !1481, !"ext_9ede10_printf: argument 1"}
!1484 = !{!1485}
!1485 = distinct !{!1485, !1486, !"ext_9ede10_printf: argument 0"}
!1486 = distinct !{!1486, !"ext_9ede10_printf"}
!1487 = !{!1488}
!1488 = distinct !{!1488, !1486, !"ext_9ede10_printf: argument 1"}
!1489 = !{!1490}
!1490 = distinct !{!1490, !1491, !"ext_9ede10_printf: argument 0"}
!1491 = distinct !{!1491, !"ext_9ede10_printf"}
!1492 = !{!1493}
!1493 = distinct !{!1493, !1491, !"ext_9ede10_printf: argument 1"}
!1494 = !{!1495}
!1495 = distinct !{!1495, !1496, !"ext_9ede10_printf: argument 0"}
!1496 = distinct !{!1496, !"ext_9ede10_printf"}
!1497 = !{!1498}
!1498 = distinct !{!1498, !1496, !"ext_9ede10_printf: argument 1"}
!1499 = !{!1500}
!1500 = distinct !{!1500, !1501, !"ext_9ede10_printf: argument 0"}
!1501 = distinct !{!1501, !"ext_9ede10_printf"}
!1502 = !{!1503}
!1503 = distinct !{!1503, !1501, !"ext_9ede10_printf: argument 1"}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1506, !"ext_9ede10_printf: argument 0"}
!1506 = distinct !{!1506, !"ext_9ede10_printf"}
!1507 = !{!1508}
!1508 = distinct !{!1508, !1506, !"ext_9ede10_printf: argument 1"}
!1509 = !{!1510}
!1510 = distinct !{!1510, !1511, !"ext_9ede10_printf: argument 0"}
!1511 = distinct !{!1511, !"ext_9ede10_printf"}
!1512 = !{!1513}
!1513 = distinct !{!1513, !1511, !"ext_9ede10_printf: argument 1"}
!1514 = !{!1515}
!1515 = distinct !{!1515, !1516, !"ext_9ede10_printf: argument 0"}
!1516 = distinct !{!1516, !"ext_9ede10_printf"}
!1517 = !{!1518}
!1518 = distinct !{!1518, !1516, !"ext_9ede10_printf: argument 1"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1521, !"ext_9ede10_printf: argument 0"}
!1521 = distinct !{!1521, !"ext_9ede10_printf"}
!1522 = !{!1523}
!1523 = distinct !{!1523, !1521, !"ext_9ede10_printf: argument 1"}
!1524 = !{!1525}
!1525 = distinct !{!1525, !1526, !"ext_9ede10_printf: argument 0"}
!1526 = distinct !{!1526, !"ext_9ede10_printf"}
!1527 = !{!1528}
!1528 = distinct !{!1528, !1526, !"ext_9ede10_printf: argument 1"}
!1529 = !{!1530}
!1530 = distinct !{!1530, !1531, !"ext_9ede10_printf: argument 0"}
!1531 = distinct !{!1531, !"ext_9ede10_printf"}
!1532 = !{!1533}
!1533 = distinct !{!1533, !1531, !"ext_9ede10_printf: argument 1"}
!1534 = !{!1535}
!1535 = distinct !{!1535, !1536, !"ext_9ede10_printf: argument 0"}
!1536 = distinct !{!1536, !"ext_9ede10_printf"}
!1537 = !{!1538}
!1538 = distinct !{!1538, !1536, !"ext_9ede10_printf: argument 1"}
!1539 = !{!1540}
!1540 = distinct !{!1540, !1541, !"ext_9ede10_printf: argument 0"}
!1541 = distinct !{!1541, !"ext_9ede10_printf"}
!1542 = !{!1543}
!1543 = distinct !{!1543, !1541, !"ext_9ede10_printf: argument 1"}
!1544 = !{!1545}
!1545 = distinct !{!1545, !1546, !"ext_9ede10_printf: argument 0"}
!1546 = distinct !{!1546, !"ext_9ede10_printf"}
!1547 = !{!1548}
!1548 = distinct !{!1548, !1546, !"ext_9ede10_printf: argument 1"}
!1549 = !{!1550}
!1550 = distinct !{!1550, !1551, !"ext_9ede10_printf: argument 0"}
!1551 = distinct !{!1551, !"ext_9ede10_printf"}
!1552 = !{!1553}
!1553 = distinct !{!1553, !1551, !"ext_9ede10_printf: argument 1"}
!1554 = !{!1555}
!1555 = distinct !{!1555, !1556, !"ext_9ede10_printf: argument 0"}
!1556 = distinct !{!1556, !"ext_9ede10_printf"}
!1557 = !{!1558}
!1558 = distinct !{!1558, !1556, !"ext_9ede10_printf: argument 1"}
!1559 = !{!1560}
!1560 = distinct !{!1560, !1561, !"ext_9ede10_printf: argument 0"}
!1561 = distinct !{!1561, !"ext_9ede10_printf"}
!1562 = !{!1563}
!1563 = distinct !{!1563, !1561, !"ext_9ede10_printf: argument 1"}
!1564 = !{!1565}
!1565 = distinct !{!1565, !1566, !"ext_9ede10_printf: argument 0"}
!1566 = distinct !{!1566, !"ext_9ede10_printf"}
!1567 = !{!1568}
!1568 = distinct !{!1568, !1566, !"ext_9ede10_printf: argument 1"}
!1569 = !{!1570}
!1570 = distinct !{!1570, !1571, !"ext_9ede10_printf: argument 0"}
!1571 = distinct !{!1571, !"ext_9ede10_printf"}
!1572 = !{!1573}
!1573 = distinct !{!1573, !1571, !"ext_9ede10_printf: argument 1"}
!1574 = !{!1575}
!1575 = distinct !{!1575, !1576, !"ext_9ede10_printf: argument 0"}
!1576 = distinct !{!1576, !"ext_9ede10_printf"}
!1577 = !{!1578}
!1578 = distinct !{!1578, !1576, !"ext_9ede10_printf: argument 1"}
!1579 = !{!1580}
!1580 = distinct !{!1580, !1581, !"ext_9ede10_printf: argument 0"}
!1581 = distinct !{!1581, !"ext_9ede10_printf"}
!1582 = !{!1583}
!1583 = distinct !{!1583, !1581, !"ext_9ede10_printf: argument 1"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1586, !"ext_9ede10_printf: argument 0"}
!1586 = distinct !{!1586, !"ext_9ede10_printf"}
!1587 = !{!1588}
!1588 = distinct !{!1588, !1586, !"ext_9ede10_printf: argument 1"}
!1589 = !{!1590}
!1590 = distinct !{!1590, !1591, !"ext_9ede10_printf: argument 0"}
!1591 = distinct !{!1591, !"ext_9ede10_printf"}
!1592 = !{!1593}
!1593 = distinct !{!1593, !1591, !"ext_9ede10_printf: argument 1"}
!1594 = !{!1595}
!1595 = distinct !{!1595, !1596, !"ext_9ede68_sqrt: argument 0"}
!1596 = distinct !{!1596, !"ext_9ede68_sqrt"}
!1597 = !{!1598}
!1598 = distinct !{!1598, !1596, !"ext_9ede68_sqrt: argument 1"}
!1599 = !{!1600}
!1600 = distinct !{!1600, !1601, !"ext_9ede40_cos: argument 0"}
!1601 = distinct !{!1601, !"ext_9ede40_cos"}
!1602 = !{!1603}
!1603 = distinct !{!1603, !1601, !"ext_9ede40_cos: argument 1"}
!1604 = !{!1605}
!1605 = distinct !{!1605, !1606, !"ext_9ede28_pow: argument 0"}
!1606 = distinct !{!1606, !"ext_9ede28_pow"}
!1607 = !{!1608}
!1608 = distinct !{!1608, !1606, !"ext_9ede28_pow: argument 1"}
!1609 = !{!1610}
!1610 = distinct !{!1610, !1611, !"ext_9ede28_pow: argument 0"}
!1611 = distinct !{!1611, !"ext_9ede28_pow"}
!1612 = !{!1613}
!1613 = distinct !{!1613, !1611, !"ext_9ede28_pow: argument 1"}
!1614 = !{!1615}
!1615 = distinct !{!1615, !1616, !"ext_9ede28_pow: argument 0"}
!1616 = distinct !{!1616, !"ext_9ede28_pow"}
!1617 = !{!1618}
!1618 = distinct !{!1618, !1616, !"ext_9ede28_pow: argument 1"}
!1619 = !{!1620}
!1620 = distinct !{!1620, !1621, !"ext_9ede28_pow: argument 0"}
!1621 = distinct !{!1621, !"ext_9ede28_pow"}
!1622 = !{!1623}
!1623 = distinct !{!1623, !1621, !"ext_9ede28_pow: argument 1"}
!1624 = !{!1625}
!1625 = distinct !{!1625, !1626, !"ext_9ede28_pow: argument 0"}
!1626 = distinct !{!1626, !"ext_9ede28_pow"}
!1627 = !{!1628}
!1628 = distinct !{!1628, !1626, !"ext_9ede28_pow: argument 1"}
!1629 = !{!1630}
!1630 = distinct !{!1630, !1631, !"ext_9ede28_pow: argument 0"}
!1631 = distinct !{!1631, !"ext_9ede28_pow"}
!1632 = !{!1633}
!1633 = distinct !{!1633, !1631, !"ext_9ede28_pow: argument 1"}
!1634 = !{!1635}
!1635 = distinct !{!1635, !1636, !"ext_9ede68_sqrt: argument 0"}
!1636 = distinct !{!1636, !"ext_9ede68_sqrt"}
!1637 = !{!1638}
!1638 = distinct !{!1638, !1636, !"ext_9ede68_sqrt: argument 1"}
!1639 = !{!1640}
!1640 = distinct !{!1640, !1641, !"ext_9ede40_cos: argument 0"}
!1641 = distinct !{!1641, !"ext_9ede40_cos"}
!1642 = !{!1643}
!1643 = distinct !{!1643, !1641, !"ext_9ede40_cos: argument 1"}
!1644 = !{!1645}
!1645 = distinct !{!1645, !1646, !"ext_9ede28_pow: argument 0"}
!1646 = distinct !{!1646, !"ext_9ede28_pow"}
!1647 = !{!1648}
!1648 = distinct !{!1648, !1646, !"ext_9ede28_pow: argument 1"}
!1649 = !{!1650}
!1650 = distinct !{!1650, !1651, !"ext_9ede28_pow: argument 0"}
!1651 = distinct !{!1651, !"ext_9ede28_pow"}
!1652 = !{!1653}
!1653 = distinct !{!1653, !1651, !"ext_9ede28_pow: argument 1"}
!1654 = !{!1655}
!1655 = distinct !{!1655, !1656, !"ext_9ede28_pow: argument 0"}
!1656 = distinct !{!1656, !"ext_9ede28_pow"}
!1657 = !{!1658}
!1658 = distinct !{!1658, !1656, !"ext_9ede28_pow: argument 1"}
!1659 = !{!1660}
!1660 = distinct !{!1660, !1661, !"ext_9ede68_sqrt: argument 0"}
!1661 = distinct !{!1661, !"ext_9ede68_sqrt"}
!1662 = !{!1663}
!1663 = distinct !{!1663, !1661, !"ext_9ede68_sqrt: argument 1"}
!1664 = !{!1665}
!1665 = distinct !{!1665, !1666, !"ext_9ede40_cos: argument 0"}
!1666 = distinct !{!1666, !"ext_9ede40_cos"}
!1667 = !{!1668}
!1668 = distinct !{!1668, !1666, !"ext_9ede40_cos: argument 1"}
!1669 = !{!1670}
!1670 = distinct !{!1670, !1671, !"ext_400750_acos: argument 0"}
!1671 = distinct !{!1671, !"ext_400750_acos"}
!1672 = !{!1673}
!1673 = distinct !{!1673, !1671, !"ext_400750_acos: argument 1"}
!1674 = !{!1675}
!1675 = distinct !{!1675, !1676, !"ext_9ede68_sqrt: argument 0"}
!1676 = distinct !{!1676, !"ext_9ede68_sqrt"}
!1677 = !{!1678}
!1678 = distinct !{!1678, !1676, !"ext_9ede68_sqrt: argument 1"}
!1679 = !{!1680}
!1680 = distinct !{!1680, !1681, !"ext_9ede40_cos: argument 0"}
!1681 = distinct !{!1681, !"ext_9ede40_cos"}
!1682 = !{!1683}
!1683 = distinct !{!1683, !1681, !"ext_9ede40_cos: argument 1"}
!1684 = !{!1685}
!1685 = distinct !{!1685, !1686, !"ext_9ede28_pow: argument 0"}
!1686 = distinct !{!1686, !"ext_9ede28_pow"}
!1687 = !{!1688}
!1688 = distinct !{!1688, !1686, !"ext_9ede28_pow: argument 1"}
!1689 = !{!1690}
!1690 = distinct !{!1690, !1691, !"ext_9ede28_pow: argument 0"}
!1691 = distinct !{!1691, !"ext_9ede28_pow"}
!1692 = !{!1693}
!1693 = distinct !{!1693, !1691, !"ext_9ede28_pow: argument 1"}
!1694 = !{!1695}
!1695 = distinct !{!1695, !1696, !"ext_9ede28_pow: argument 0"}
!1696 = distinct !{!1696, !"ext_9ede28_pow"}
!1697 = !{!1698}
!1698 = distinct !{!1698, !1696, !"ext_9ede28_pow: argument 1"}
!1699 = !{!1700}
!1700 = distinct !{!1700, !1701, !"ext_400760_fopen: argument 0"}
!1701 = distinct !{!1701, !"ext_400760_fopen"}
!1702 = !{!1703}
!1703 = distinct !{!1703, !1701, !"ext_400760_fopen: argument 1"}
!1704 = !{!1705}
!1705 = distinct !{!1705, !1706, !"ext_9ede00___isoc99_fscanf: argument 0"}
!1706 = distinct !{!1706, !"ext_9ede00___isoc99_fscanf"}
!1707 = !{!1708}
!1708 = distinct !{!1708, !1706, !"ext_9ede00___isoc99_fscanf: argument 1"}
!1709 = !{!1710}
!1710 = distinct !{!1710, !1711, !"ext_4006d0_fclose: argument 0"}
!1711 = distinct !{!1711, !"ext_4006d0_fclose"}
!1712 = !{!1713}
!1713 = distinct !{!1713, !1711, !"ext_4006d0_fclose: argument 1"}
!1714 = !{!1715}
!1715 = distinct !{!1715, !1716, !"ext_9ede38_fgetc: argument 0"}
!1716 = distinct !{!1716, !"ext_9ede38_fgetc"}
!1717 = !{!1718}
!1718 = distinct !{!1718, !1716, !"ext_9ede38_fgetc: argument 1"}
!1719 = !{!1720}
!1720 = distinct !{!1720, !1721, !"ext_9ede00___isoc99_fscanf: argument 0"}
!1721 = distinct !{!1721, !"ext_9ede00___isoc99_fscanf"}
!1722 = !{!1723}
!1723 = distinct !{!1723, !1721, !"ext_9ede00___isoc99_fscanf: argument 1"}
!1724 = !{!1725}
!1725 = distinct !{!1725, !1726, !"ext_9ede10_printf: argument 0"}
!1726 = distinct !{!1726, !"ext_9ede10_printf"}
!1727 = !{!1728}
!1728 = distinct !{!1728, !1726, !"ext_9ede10_printf: argument 1"}
!1729 = !{!1730}
!1730 = distinct !{!1730, !1731, !"ext_9ede00___isoc99_fscanf: argument 0"}
!1731 = distinct !{!1731, !"ext_9ede00___isoc99_fscanf"}
!1732 = !{!1733}
!1733 = distinct !{!1733, !1731, !"ext_9ede00___isoc99_fscanf: argument 1"}
!1734 = !{!1735}
!1735 = distinct !{!1735, !1736, !"ext_9ede10_printf: argument 0"}
!1736 = distinct !{!1736, !"ext_9ede10_printf"}
!1737 = !{!1738}
!1738 = distinct !{!1738, !1736, !"ext_9ede10_printf: argument 1"}
!1739 = !{!1740}
!1740 = distinct !{!1740, !1741, !"ext_9ede38_fgetc: argument 0"}
!1741 = distinct !{!1741, !"ext_9ede38_fgetc"}
!1742 = !{!1743}
!1743 = distinct !{!1743, !1741, !"ext_9ede38_fgetc: argument 1"}
!1744 = !{!1745}
!1745 = distinct !{!1745, !1746, !"ext_9ede10_printf: argument 0"}
!1746 = distinct !{!1746, !"ext_9ede10_printf"}
!1747 = !{!1748}
!1748 = distinct !{!1748, !1746, !"ext_9ede10_printf: argument 1"}
!1749 = !{!1750}
!1750 = distinct !{!1750, !1751, !"ext_400760_fopen: argument 0"}
!1751 = distinct !{!1751, !"ext_400760_fopen"}
!1752 = !{!1753}
!1753 = distinct !{!1753, !1751, !"ext_400760_fopen: argument 1"}
!1754 = !{!1755}
!1755 = distinct !{!1755, !1756, !"ext_9ede38_fgetc: argument 0"}
!1756 = distinct !{!1756, !"ext_9ede38_fgetc"}
!1757 = !{!1758}
!1758 = distinct !{!1758, !1756, !"ext_9ede38_fgetc: argument 1"}
!1759 = !{!1760}
!1760 = distinct !{!1760, !1761, !"ext_9ede00___isoc99_fscanf: argument 0"}
!1761 = distinct !{!1761, !"ext_9ede00___isoc99_fscanf"}
!1762 = !{!1763}
!1763 = distinct !{!1763, !1761, !"ext_9ede00___isoc99_fscanf: argument 1"}
!1764 = !{!1765}
!1765 = distinct !{!1765, !1766, !"ext_9ede10_printf: argument 0"}
!1766 = distinct !{!1766, !"ext_9ede10_printf"}
!1767 = !{!1768}
!1768 = distinct !{!1768, !1766, !"ext_9ede10_printf: argument 1"}
!1769 = !{!1770}
!1770 = distinct !{!1770, !1771, !"ext_9ede28_pow: argument 0"}
!1771 = distinct !{!1771, !"ext_9ede28_pow"}
!1772 = !{!1773}
!1773 = distinct !{!1773, !1771, !"ext_9ede28_pow: argument 1"}
!1774 = !{!1775}
!1775 = distinct !{!1775, !1776, !"ext_9ede10_printf: argument 0"}
!1776 = distinct !{!1776, !"ext_9ede10_printf"}
!1777 = !{!1778}
!1778 = distinct !{!1778, !1776, !"ext_9ede10_printf: argument 1"}
!1779 = !{!1780}
!1780 = distinct !{!1780, !1781, !"ext_9ede10_printf: argument 0"}
!1781 = distinct !{!1781, !"ext_9ede10_printf"}
!1782 = !{!1783}
!1783 = distinct !{!1783, !1781, !"ext_9ede10_printf: argument 1"}
!1784 = !{!1785}
!1785 = distinct !{!1785, !1786, !"ext_9ede10_printf: argument 0"}
!1786 = distinct !{!1786, !"ext_9ede10_printf"}
!1787 = !{!1788}
!1788 = distinct !{!1788, !1786, !"ext_9ede10_printf: argument 1"}
!1789 = !{!1790}
!1790 = distinct !{!1790, !1791, !"ext_9ede10_printf: argument 0"}
!1791 = distinct !{!1791, !"ext_9ede10_printf"}
!1792 = !{!1793}
!1793 = distinct !{!1793, !1791, !"ext_9ede10_printf: argument 1"}
!1794 = !{!1795}
!1795 = distinct !{!1795, !1796, !"ext_9ede10_printf: argument 0"}
!1796 = distinct !{!1796, !"ext_9ede10_printf"}
!1797 = !{!1798}
!1798 = distinct !{!1798, !1796, !"ext_9ede10_printf: argument 1"}
!1799 = !{!1800}
!1800 = distinct !{!1800, !1801, !"ext_4006d0_fclose: argument 0"}
!1801 = distinct !{!1801, !"ext_4006d0_fclose"}
!1802 = !{!1803}
!1803 = distinct !{!1803, !1801, !"ext_4006d0_fclose: argument 1"}
!1804 = !{!1805}
!1805 = distinct !{!1805, !1806, !"ext_9ede10_printf: argument 0"}
!1806 = distinct !{!1806, !"ext_9ede10_printf"}
!1807 = !{!1808}
!1808 = distinct !{!1808, !1806, !"ext_9ede10_printf: argument 1"}
!1809 = !{!1810}
!1810 = distinct !{!1810, !1811, !"ext_9ede10_printf: argument 0"}
!1811 = distinct !{!1811, !"ext_9ede10_printf"}
!1812 = !{!1813}
!1813 = distinct !{!1813, !1811, !"ext_9ede10_printf: argument 1"}
!1814 = !{!1815}
!1815 = distinct !{!1815, !1816, !"ext_400720_log: argument 0"}
!1816 = distinct !{!1816, !"ext_400720_log"}
!1817 = !{!1818}
!1818 = distinct !{!1818, !1816, !"ext_400720_log: argument 1"}
!1819 = !{!1820}
!1820 = distinct !{!1820, !1821, !"ext_400720_log: argument 0"}
!1821 = distinct !{!1821, !"ext_400720_log"}
!1822 = !{!1823}
!1823 = distinct !{!1823, !1821, !"ext_400720_log: argument 1"}
!1824 = !{!1825}
!1825 = distinct !{!1825, !1826, !"ext_400700_memset: argument 0"}
!1826 = distinct !{!1826, !"ext_400700_memset"}
!1827 = !{!1828}
!1828 = distinct !{!1828, !1826, !"ext_400700_memset: argument 1"}
!1829 = !{!1830}
!1830 = distinct !{!1830, !1831, !"ext_9ede00___isoc99_fscanf: argument 0"}
!1831 = distinct !{!1831, !"ext_9ede00___isoc99_fscanf"}
!1832 = !{!1833}
!1833 = distinct !{!1833, !1831, !"ext_9ede00___isoc99_fscanf: argument 1"}
!1834 = !{!1835}
!1835 = distinct !{!1835, !1836, !"ext_4006f0_gettimeofday: argument 0"}
!1836 = distinct !{!1836, !"ext_4006f0_gettimeofday"}
!1837 = !{!1838}
!1838 = distinct !{!1838, !1836, !"ext_4006f0_gettimeofday: argument 1"}
