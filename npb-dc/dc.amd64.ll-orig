; ModuleID = 'dc.amd64.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_40bac0__rodata_type = type <{ [8 x i8], [184 x i8], [184 x i8], [184 x i8], [56 x i8], [192 x i8], [9 x i8], [4 x i8], [4 x i8], [8 x i8], [9 x i8], [3 x i8], [41 x i8], [11 x i8], [6 x i8], [18 x i8], [47 x i8], [32 x i8], [2 x i8], [35 x i8], [2 x i8], [3 x i8], [33 x i8], [12 x i8], [16 x i8], [16 x i8], [10 x i8], [19 x i8], [13 x i8], [37 x i8], [9 x i8], [17 x i8], [17 x i8], [19 x i8], [12 x i8], [57 x i8], [46 x i8], [44 x i8], [24 x i8], [17 x i8], [10 x i8], [4 x i8], [34 x i8], [72 x i8], [20 x i8], [22 x i8], [8 x i8], [12 x i8], [10 x i8], [15 x i8], [9 x i8], [6 x i8], [27 x i8], [46 x i8], [38 x i8], [44 x i8], [37 x i8], [39 x i8], [39 x i8], [25 x i8], [45 x i8], [45 x i8], [45 x i8], [37 x i8], [37 x i8], [20 x i8], [23 x i8], [23 x i8], [23 x i8], [23 x i8], [64 x i8], [39 x i8], [34 x i8], [21 x i8], [64 x i8], [184 x i8], [57 x i8], [44 x i8], [42 x i8], [29 x i8], [38 x i8], [54 x i8], [17 x i8], [20 x i8], [25 x i8], [24 x i8], [30 x i8], [15 x i8], [34 x i8], [37 x i8], [37 x i8], [24 x i8], [31 x i8], [31 x i8], [28 x i8], [28 x i8], [34 x i8], [34 x i8], [34 x i8], [28 x i8], [28 x i8], [29 x i8], [22 x i8], [17 x i8], [4 x i8], [2 x i8], [12 x i8], [4 x i8], [6 x i8], [4 x i8], [12 x i8], [29 x i8], [50 x i8], [47 x i8], [47 x i8], [43 x i8], [44 x i8], [43 x i8], [45 x i8], [44 x i8], [34 x i8], [14 x i8], [31 x i8], [56 x i8], [57 x i8], [37 x i8], [59 x i8], [49 x i8], [5 x i8], [3 x i8], [9 x i8], [11 x i8], [12 x i8], [11 x i8], [48 x i8], [52 x i8], [53 x i8], [41 x i8], [56 x i8], [69 x i8], [68 x i8], [24 x i8], [25 x i8], [25 x i8], [24 x i8], [24 x i8], [19 x i8], [3 x i8], [2 x i8], [6 x i8], [43 x i8], [48 x i8], [20 x i8], [20 x i8], [28 x i8], [33 x i8], [5 x i8], [12 x i8], [8 x i8], [9 x i8], [3 x i8], [2 x i8], [5 x i8], [4 x i8], [46 x i8], [32 x i8], [32 x i8], [8 x i8], [28 x i8], [37 x i8], [8 x i8], [34 x i8], [37 x i8], [42 x i8], [40 x i8], [37 x i8], [37 x i8], [13 x i8], [19 x i8], [23 x i8], [23 x i8], [230 x i8] }>
%seg_60ee00__init_array_type = type <{ i64, i64 }>
%seg_60eff0__got_type = type <{ i64, i64 }>
%seg_60f000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%adcprime_type = type <{ [160 x i8] }>
%LARGE_NUM_type = type <{ [8 x i8] }>
%maxprmfctr_type = type <{ [8 x i8] }>
%adcexp_type = type <{ [160 x i8] }>
%adcexpS_type = type <{ [48 x i8] }>
%adcexpW_type = type <{ [80 x i8] }>
%adcexpA_type = type <{ [128 x i8] }>
%adcexpB_type = type <{ [160 x i8] }>
%UpPrimeLim_type = type <{ [16 x i8], i64, i64, i64, i64, i64, i64, [16 x i8] }>
%adcgen_type = type <{ [160 x i8], [8 x i8] }>
%input_tuples_type = type <{ [8 x i8] }>
%attrnum_type = type <{ [8 x i8] }>
%checksumS_type = type <{ [8 x i8] }>
%checksumWlo_type = type <{ [8 x i8] }>
%checksumWhi_type = type <{ [8 x i8] }>
%checksumAlo_type = type <{ [8 x i8] }>
%checksumAhi_type = type <{ [8 x i8] }>
%checksumBlo_type = type <{ [8 x i8] }>
%checksumBhi_type = type <{ [8 x i8], [4 x i8], [4 x i8], [4 x i8] }>
%__bss_start_type = type <{ [4 x i8] }>
%seg_60f560__bss_type = type <{ [32 x i8], [8 x i8], [8 x i8], [16 x i8], [160 x i8], [512 x i8], [512 x i8] }>
%it_type = type <{ [16 x i8] }>
%sel_type = type <{ [256 x i8] }>
%inps_type = type <{ [1024 x i8] }>
%sz_type = type <{ [4 x i8] }>
%iTx_type = type <{ [4 x i8] }>
%selection_viewSize_type = type <{ [8 x i8] }>
%viewCounts_type = type <{ [8 x i8] }>
%i_type = type <{ [4 x i8] }>
%k_type = type <{ [4 x i8] }>
%tx_type = type <{ [16 x i8] }>
%msg_type = type <{ [64 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 128
@stdout = external global i64, align 32
@seg_40bac0__rodata = internal constant %seg_40bac0__rodata_type <{ [8 x i8] c"\01\00\02\00\00\00\00\00", [184 x i8] c"v!@\00\00\00\00\00\85!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00\8F!@\00\00\00\00\00l!@\00\00\00\00\00\8F!@\00\00\00\00\00]!@\00\00\00\00\00\8F!@\00\00\00\00\00q!@\00\00\00\00\00", [184 x i8] c"\F5\1E@\00\00\00\00\00\18\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\006\1F@\00\00\00\00\00\AF\1E@\00\00\00\00\006\1F@\00\00\00\00\00\8C\1E@\00\00\00\00\006\1F@\00\00\00\00\00\D2\1E@\00\00\00\00\00", [184 x i8] c"x'@\00\00\00\00\00\9F'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00*'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00\C1'@\00\00\00\00\00Q'@\00\00\00\00\00", [56 x i8] c"k%@\00\00\00\00\00\99%@\00\00\00\00\00\C7%@\00\00\00\00\00\F5%@\00\00\00\00\00\FA%@\00\00\00\00\00(&@\00\00\00\00\00s&@\00\00\00\00\00", [192 x i8] c"\81+@\00\00\00\00\00\94+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00[+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00\A2+@\00\00\00\00\00n+@\00\00\00\00\00\14\00\00\00ADC\00", [9 x i8] c"prime.\00*\00", [4 x i8] c"%ld^", [4 x i8] c"%ld\00", [8 x i8] c"view.sz\00", [9 x i8] c"%s.%s.%d\00", [3 x i8] c"w+\00", [41 x i8] c"CalculateVeiwSizes: Can't open file: %s\0A\00", [11 x i8] c"Selection:\00", [6 x i8] c" %lld\00", [18 x i8] c"\0AView Size: %lld\0A\00", [47 x i8] c"\0ATotal in bytes: %lld  Number of tuples: %lld\0A\00", [32 x i8] c"View sizes are written into %s\0A\00", [2 x i8] c"r\00", [35 x i8] c"ParseParFile: Can't open file: %s\0A\00", [2 x i8] c"#\00", [3 x i8] c"%c\00", [33 x i8] c"WriteADCPar: can't open file %s\0A\00", [12 x i8] c"attrNum=%d\0A\00", [16 x i8] c"measuresNum=%d\0A\00", [16 x i8] c"tuplesNum=%lld\0A\00", [10 x i8] c"class=%c\0A\00", [19 x i8] c"INVERSE_ENDIAN=%d\0A\00", [13 x i8] c"fileName=%s\0A\00", [37 x i8] c"********************* ADC paramters\0A\00", [9 x i8] c" id\09\09%d\0A\00", [17 x i8] c" attributes \09%d\0A\00", [17 x i8] c" measures   \09%d\0A\00", [19 x i8] c" tuples     \09%lld\0A\00", [12 x i8] c" class\09\09%c\0A\00", [57 x i8] c" filename       %s\0A\00***********************************\0A\00", [46 x i8] c"GetNextTuple: number of dcdim is too large:%d\00", [44 x i8] c"GetNextTuple: number of mes is too large:%d\00", [24 x i8] c"Prime \09Generator \09Seed\0A\00", [17 x i8] c" %ld\09 %ld\09\09 %ld\0A\00", [10 x i8] c"%s.dat.%d\00", [4 x i8] c"wb+\00", [34 x i8] c"GenerateADC: Can't open file: %s\0A\00", [72 x i8] c"\0AGenerateADC: writing %d tuples of %d attributes and %d measures to %s\0A\00", [20 x i8] c"Binary ADC file %s \00", [22 x i8] c"have been generated.\0A\00", [8 x i8] c"attrNum\00", [12 x i8] c"measuresNum\00", [10 x i8] c"tuplesNum\00", [15 x i8] c"INVERSE_ENDIAN\00", [9 x i8] c"fileName\00", [6 x i8] c"class\00", [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", [46 x i8] c" Class           =                        %c\0A\00", [38 x i8] c" Size            =             %12ld\0A\00", [44 x i8] c" Size            =             %4dx%4dx%4d\0A\00", [37 x i8] c" Iterations      =             %12d\0A\00", [39 x i8] c" Time in seconds =             %12.2f\0A\00", [39 x i8] c" Mop/s total     =             %12.2f\0A\00", [25 x i8] c" Operation type  = %24s\0A\00", [45 x i8] c" Verification    =            NOT PERFORMED\0A\00", [45 x i8] c" Verification    =               SUCCESSFUL\0A\00", [45 x i8] c" Verification    =             UNSUCCESSFUL\0A\00", [37 x i8] c" Version         =             %12s\0A\00", [37 x i8] c" Compile date    =             %12s\0A\00", [20 x i8] c"\0A Compile options:\0A\00", [23 x i8] c"    CLINK        = %s\0A\00", [23 x i8] c"    C_LIB        = %s\0A\00", [23 x i8] c"    C_INC        = %s\0A\00", [23 x i8] c"    CFLAGS       = %s\0A\00", [64 x i8] c"    CLINKFLAGS   = %s\0A\00\0A--------------------------------------\0A\00", [39 x i8] c" Please send all errors/feedbacks to:\0A\00", [34 x i8] c" Center for Manycore Programming\0A\00", [21 x i8] c" cmp@aces.snu.ac.kr\0A\00", [64 x i8] c" http://aces.snu.ac.kr\0A\00\00\000C\00\000E\00\00\00\00\00\00\00\00\00\00\00\00\00\000C\00\00\00\00\00\000E\8D\ED\B5\A0\F7\C6\B0>", [184 x i8] c"\7FA@\00\00\00\00\00\B4A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00'A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00\E9A@\00\00\00\00\00JA@\00\00\00\00\00", [57 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-SER) - DC Benchmark\0A\0A\00", [44 x i8] c" No Paramter file. Using compiled defaults\0A\00", [42 x i8] c"Usage: <program name> <amount of memory>\0A\00", [29 x i8] c"       <file of parameters>\0A\00", [38 x i8] c"Example: bin/dc.S 1000000 DC/ADC.par\0A\00", [54 x i8] c"The last argument, (a parameter file) can be skipped\0A\00", [17 x i8] c" %s, errno = %d\0A\00", [20 x i8] c"main: malloc failed\00", [25 x i8] c"main.ParseParFile failed\00", [24 x i8] c"main.GenerateAdc failed\00", [30 x i8] c"Estimated rb-tree size = %d \0A\00", [15 x i8] c"main.DC failed\00", [34 x i8] c"main.ParRun failed: retcode = %d\0A\00", [37 x i8] c"ParRun.NewAdcViewCntl: returned NULL\00", [37 x i8] c"DC.NewAdcViewCntl: return code = %d\0A\00", [24 x i8] c"DC.PartitionCube failed\00", [31 x i8] c"DC.ComputeGivenGroupbys failed\00", [31 x i8] c"ParRun.CloseAdcView: is failed\00", [28 x i8] c"\0A*** DC Benchmark Results:\0A\00", [28 x i8] c" Benchmark Time   = %20.3f\0A\00", [34 x i8] c" Input Tuples     =         %12d\0A\00", [34 x i8] c" Number of Views  =         %12d\0A\00", [34 x i8] c" Number of Tasks  =         %12d\0A\00", [28 x i8] c" Tuples Generated = %20.0f\0A\00", [28 x i8] c" Tuples/s         = %20.2f\0A\00", [29 x i8] c" Checksum         = %20.12e\0A\00", [22 x i8] c" Verification failed\0A\00", [17 x i8] c"Tuples generated\00", [4 x i8] c"3.3.", [2 x i8] c"1\00", [12 x i8] c"03 Nov 2017\00", [4 x i8] c"gcc\00", [6 x i8] c"$(CC)\00", [4 x i8] c"-lm\00", [12 x i8] c"-I../common\00", [29 x i8] c"-g -Wall -O3 -mcmodel=medium\00", [50 x i8] c" ReadWholeInputData(): wrong input data reading.\0A\00", [47 x i8] c"ComputeMemoryFittedView(): Not enough memory.\0A\00", [47 x i8] c"SharedSortAggregate: memory allocation failed\0A\00", [43 x i8] c"SharedSortAggregate: Write error occured.\0A\00", [44 x i8] c"SharedSortAggregate.MultiWayMerge: failed.\0A\00", [43 x i8] c"SharedSortAggregate.MultiWayMerge failed.\0A\00", [45 x i8] c"PrefixedAggregate: wrong parent view order.\0A\00", [44 x i8] c"PrefixedAggregate: wrong KeyComp() result.\0A\00", [34 x i8] c"\0A Write error from WriteToFile()\0A\00", [14 x i8] c"RunFormation: ", [31 x i8] c"Too many chunks were created.\0A\00", [56 x i8] c"RunFormation.WriteChunkToDisk: Write error is occured.\0A\00", [57 x i8] c"RunFormation(.WriteChunkToDisk: Write error is occured.\0A\00", [37 x i8] c"SeekAndReadNextSubChunk.fseek() < 0 \00", [59 x i8] c"MultiWayMerge: Not enough memory to run the external sort\0A\00", [49 x i8] c"AdcFileOpen: Cannot open the file %s errno = %d\0A\00", [5 x i8] c"logf\00", [3 x i8] c"rb\00", [9 x i8] c"view.dat\00", [11 x i8] c"chunks.dat\00", [12 x i8] c"groupby.dat\00", [11 x i8] c"viewsz.dat\00", [48 x i8] c"NewAdcViewCntl: Cannot allocate 'chunksParsms'\0A\00", [52 x i8] c"NewAdcViewCntl: Cannot allocate 'main memory pool'\0A\00", [53 x i8] c"NewAdcViewCntl: Cannot allocate 'input data buffer'\0A\00", [41 x i8] c"\0ANewAdcViewCntl.CreateEmptyTree failed.\0A\00", [56 x i8] c"\0A Not enough space to allocate %ld byte for a job pool.\00", [69 x i8] c"\0A Not enough space to allocate %ld byte for a layer reference array.\00", [68 x i8] c"Row Number | Groupby | View Size | Measure Sums | Number of Chunks\0A\00", [24 x i8] c"    memoryLimit = %20d\0A\00", [25 x i8] c"    treeNodeSize = %20d\0A\00", [25 x i8] c" treeMemoryLimit = %20d\0A\00", [24 x i8] c"    nNodesLimit = %20d\0A\00", [24 x i8] c"freeNodeCounter = %20d\0A\00", [19 x i8] c"\09nViewRows = %20d\0A\00", [3 x i8] c"Vie", [2 x i8] c"w\00", [6 x i8] c"Size:\00", [43 x i8] c"A view size is wrong: genSz=%d calcSz=%d\0A\00\0A", [48 x i8] c"\0AMeaning of the log file colums is as follows:\0A\00", [20 x i8] c"Verification=passed\00", [20 x i8] c"Verification=failed\00", [28 x i8] c"ReadWholeInputData failed.\0A\00", [33 x i8] c"ComputeMemoryFittedView failed.\0A\00", [5 x i8] c"%7d \00", [12 x i8] c" |  %15d | \00", [8 x i8] c" %20lld\00", [9 x i8] c" | %5d\00\0A ", [3 x i8] c"%s\00", [2 x i8] c"0\00", [5 x i8] c"\0A%s \00", [4 x i8] c" %d\00", [46 x i8] c" PartitionCube(): memory allocation failure'\0A\00", [32 x i8] c"MultiFileProcJobs() is failed \0A\00", [32 x i8] c"MultiFileProcJobs() is failed.\0A\00", [8 x i8] c"\00\00\00\00\00\00\00@", [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", [37 x i8] c" Class           =             %12c\0A\00", [8 x i8] c"%15.0lf\00", [34 x i8] c" Size            =          %15s\0A\00", [37 x i8] c" Size            =             %12d\0A\00", [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", [40 x i8] c" Time in seconds =             %12.2lf\0A\00", [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", [37 x i8] c" Verification    =             %12s\0A\00", [13 x i8] c"UNSUCCESSFUL\00", [19 x i8] c"\0A Compile options:\0A", [23 x i8] c"    CC           = %s\0A\00", [23 x i8] c"    RAND         = %s\0A\00", [230 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00\00\00\00\00\00\00\00\00\00\10=\00\00\00\00\00\00\D0B\00\00\00\00\00\00`A\00\00\00\00\00\00\80>" }>
@seg_60ee00__init_array = internal global %seg_60ee00__init_array_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400e60_frame_dummy to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @callback_sub_400e30___do_global_dtors_aux to i64) }>
@seg_60eff0__got = internal global %seg_60eff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_60f000__got_plt = internal global %seg_60f000__got_plt_type <{ [24 x i8] c"\10\EE`\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 ()* @__errno_location to i64), i64 ptrtoint (i64 (i64)* @unlink to i64), i64 ptrtoint (i64 (i64, i64)* @strcpy to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), i64 ptrtoint (i64 (i64, i64, i64, i64)* @qsort to i64), i64 ptrtoint (i64 (i64, i64, i64, i64)* @fread to i64), i64 ptrtoint (i64 (i64)* @fclose to i64), i64 ptrtoint (i64 (i64)* @strlen to i64), i64 ptrtoint (i64 (i64, i64)* @strchr to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @pow to i64), i64 ptrtoint (i64 (i64, i64, i64)* @fgets to i64), i64 ptrtoint (i64 (i64, i64)* @calloc to i64), i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64)* @ftell to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), i64 ptrtoint (i64 (i64)* @malloc to i64), i64 ptrtoint (i64 (i64)* @fflush to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_sscanf to i64), i64 ptrtoint (i64 (i64, i64, i64)* @fseek to i64), i64 ptrtoint (i64 (i64, i64)* @fopen to i64), i64 ptrtoint (i64 (i64)* @atoi to i64), i64 ptrtoint (i64 (i64, i64)* @strcat to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @sprintf to i64), i64 ptrtoint (i64 (i64)* @exit to i64), i64 ptrtoint (i64 (i64, i64, i64, i64)* @fwrite to i64), i64 ptrtoint (i64 (i64, i64)* @strstr to i64), i64 ptrtoint (i64 ()* @__ctype_b_loc to i64) }>
@adcprime = global %adcprime_type <{ [160 x i8] c"\A5\01\00\00\00\00\00\00Y\02\00\00\00\00\00\00w\02\00\00\00\00\00\00\BD\02\00\00\00\00\00\00s\03\00\00\00\00\00\00\A3\01\00\00\00\00\00\00\BB\01\00\00\00\00\00\00\87\02\00\00\00\00\00\00\E9T\00\00\00\00\00\00\19|\00\00\00\00\00\00\93\05\00\00\00\00\00\00\B1G\00\00\00\00\00\00!Y\00\00\00\00\00\00!\86\00\00\00\00\00\00\9D\81\01\00\00\00\00\00\C7\0D\00\00\00\00\00\00\F5!\00\00\00\00\00\00\CD%\00\00\00\00\00\00U+\00\00\00\00\00\009G\00\00\00\00\00\00" }>
@LARGE_NUM = global %LARGE_NUM_type <{ [8 x i8] c"\FF\FF\FF\FF\FF\FF\FFO" }>
@maxprmfctr = global %maxprmfctr_type <{ [8 x i8] c";\00\00\00\00\00\00\00" }>
@adcexp = global %adcexp_type <{ [160 x i8] c"\0B\00\00\00\00\00\00\00\0D\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00\13\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\1D\00\00\00\00\00\00\00\1F\00\00\00\00\00\00\00%\00\00\00\00\00\00\00)\00\00\00\00\00\00\00)\00\00\00\00\00\00\00+\00\00\00\00\00\00\00/\00\00\00\00\00\00\005\00\00\00\00\00\00\00;\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\0B\00\00\00\00\00\00\00\0D\00\00\00\00\00\00\00" }>
@adcexpS = global %adcexpS_type <{ [48 x i8] c"\0B\00\00\00\00\00\00\00\0D\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00\13\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00" }>
@adcexpW = global %adcexpW_type <{ [80 x i8] c"\04\00\00\00\00\00\00\00(\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00*\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\1D\00\00\00\00\00\00\00\1F\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00L\00\00\00\00\00\00\00" }>
@adcexpA = global %adcexpA_type <{ [128 x i8] c"\04\00\00\00\00\00\00\00(\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00*\00\00\00\00\00\00\00&\00\00\00\00\00\00\00\1A\00\00\00\00\00\00\00&\00\00\00\00\00\00\00\B8\07\00\00\00\00\00\00H\0B\00\00\00\00\00\00.\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\E0\02\00\00\00\00\00\00 \00\00\00\00\00\00\00\5C\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00" }>
@adcexpB = global %adcexpB_type <{ [160 x i8] c"\1C\00\00\00\00\00\00\00(\00\00\00\00\00\00\00*\00\00\00\00\00\00\00\8C\00\00\00\00\00\00\00&\01\00\00\00\00\00\00&\00\00\00\00\00\00\00\1A\00\00\00\00\00\00\00&\00\00\00\00\00\00\00\B8\07\00\00\00\00\00\00H\0B\00\00\00\00\00\00>\00\00\00\00\00\00\00\F0\01\00\00\00\00\00\00\E0\03\00\00\00\00\00\00\A0\03\00\00\00\00\00\00t\00\00\00\00\00\00\00V\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\BC\00\00\00\00\00\00\00X\01\00\00\00\00\00\00" }>
@UpPrimeLim = global %UpPrimeLim_type <{ [16 x i8] c"\A0\86\01\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1622), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1630), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1642), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1652), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1667), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1676), [16 x i8] zeroinitializer }>
@adcgen = global %adcgen_type <{ [160 x i8] c"\02\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\1F\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00", [8 x i8] c"\B7z\00\00\00\00\00\00" }>
@input_tuples = global %input_tuples_type <{ [8 x i8] c"\E8\03\00\00\00\00\00\00" }>
@attrnum = global %attrnum_type <{ [8 x i8] c"\05\00\00\00\00\00\00\00" }>
@checksumS = global %checksumS_type <{ [8 x i8] c"\B5\8A\B1\1B\00\00\00\00" }>
@checksumWlo = global %checksumWlo_type <{ [8 x i8] c"\8E\A0\06\00\00\00\00\00" }>
@checksumWhi = global %checksumWhi_type <{ [8 x i8] c"\C4c\15\00\00\00\00\00" }>
@checksumAlo = global %checksumAlo_type <{ [8 x i8] c"z\B7\02\00\00\00\00\00" }>
@checksumAhi = global %checksumAhi_type <{ [8 x i8] c"8\F9l\00\00\00\00\00" }>
@checksumBlo = global %checksumBlo_type <{ [8 x i8] c"%\B0\0A\00\00\00\00\00" }>
@checksumBhi = global %checksumBhi_type <{ [8 x i8] c"\0D\A5\8E\00\00\00\00\00", [4 x i8] c"\B7z\00\00", [4 x i8] c"\B7z\00\00", [4 x i8] c"\FF\FF\FF\FF" }>
@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@seg_60f560__bss = internal global %seg_60f560__bss_type zeroinitializer
@it = local_unnamed_addr global %it_type zeroinitializer
@sel = global %sel_type zeroinitializer
@inps = global %inps_type zeroinitializer
@sz = global %sz_type zeroinitializer
@iTx = global %iTx_type zeroinitializer
@selection_viewSize = global %selection_viewSize_type zeroinitializer
@viewCounts = global %viewCounts_type zeroinitializer
@i = global %i_type zeroinitializer
@k = global %k_type zeroinitializer
@tx = global %tx_type zeroinitializer
@msg = global %msg_type zeroinitializer
@__mcsema_reg_state = internal thread_local global %struct.State zeroinitializer
@__mcsema_stack = internal thread_local global [131072 x i64] zeroinitializer
@__mcsema_tls = internal thread_local global [512 x i64] zeroinitializer
@0 = internal global i1 false
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
define %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1 {
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #0

; Function Attrs: noduplicate noinline nounwind optnone
define %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #2 {
  call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_fscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcpy(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @unlink(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fgets(i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @pow(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atoi(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fseek(i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strstr(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fread(i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strchr(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @qsort(i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strlen(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__ctype_b_loc() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fflush(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @sprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcat(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @ftell(i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fwrite(i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_sscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcmp(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__errno_location() #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #3

; Function Attrs: noinline
define %struct.Memory* @sub_401ed2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401ed2:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 ptrtoint (%adcexpW_type* @adcexpW to i64), i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -80
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %7, align 8, !tbaa !1240
  %13 = add i64 %9, -96
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %1, -3122
  %17 = add i64 %1, 23
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !1240
  %22 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 %16, %struct.Memory* %2)
  %23 = load i64, i64* %8, align 8
  %24 = add i64 %23, -176
  %25 = load i64, i64* %4, align 8
  %26 = load i64, i64* %3, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27
  %28 = add i64 %26, 77
  %29 = tail call %struct.Memory* @sub_401f36_def_401E8A(%struct.State* nonnull %0, i64 %28, %struct.Memory* %22)
  ret %struct.Memory* %29
}

; Function Attrs: noinline
define %struct.Memory* @sub_4025fa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %19, align 8, !alias.scope !1244, !noalias !1247
  %24 = add i64 %1, 35
  br label %block_4025fa

block_402673:                                     ; preds = %block_40255a
  %25 = inttoptr i64 %369 to i64*
  %26 = load i64, i64* %25
  %27 = add i64 %365, -24
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  %30 = add i64 %29, 40
  %31 = load i64, i64* %11, align 8, !tbaa !1240
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 4204182, i64* %33
  %34 = load i64, i64* %20, align 8, !alias.scope !1249, !noalias !1252
  %35 = load i64, i64* %21, align 8, !alias.scope !1249, !noalias !1252
  %36 = inttoptr i64 %31 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %31, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %31, 16
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %31, 24
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %31, 32
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %31, 40
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %31, 48
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %31, 56
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %31, 64
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %31, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = inttoptr i64 %32 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %4, align 8, !alias.scope !1249, !noalias !1252
  store i64 %31, i64* %11, align 8, !alias.scope !1249, !noalias !1252
  %67 = tail call i64 @__isoc99_sscanf(i64 %26, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %30, i64 4204147, i64 %34, i64 %35, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49, i64 %52, i64 %55, i64 %58, i64 %61, i64 %64), !noalias !1249
  %68 = load i64, i64* %12, align 8
  %69 = add i64 %68, -1144
  %70 = trunc i64 %67 to i32
  %71 = load i64, i64* %4, align 8
  %72 = add i64 %71, 6
  %73 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %73
  br label %block_40269c.backedge

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_40269c, %block_4026d0.loopexit
  %74 = phi i64 [ %497, %block_40269c ], [ %417, %block_4026d0.loopexit ]
  %75 = phi i64 [ %494, %block_40269c ], [ %410, %block_4026d0.loopexit ]
  %76 = phi %struct.Memory* [ %496, %block_40269c ], [ %411, %block_4026d0.loopexit ]
  %77 = add i64 %75, -1076
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78
  %80 = add i32 %79, 1
  %81 = inttoptr i64 %77 to i32*
  store i32 %80, i32* %81
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %82 = add i64 %75, -1056
  %83 = add i64 %75, -1064
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %8, align 8, !tbaa !1240
  %86 = add i64 %74, -558
  %87 = load i64, i64* %11, align 8, !tbaa !1240
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %4, align 8, !alias.scope !1254, !noalias !1257
  store i64 %87, i64* %11, align 8, !alias.scope !1254, !noalias !1257
  %92 = tail call i64 @fgets(i64 %82, i64 1024, i64 %85)
  %93 = load i64, i64* %4, align 8
  %94 = icmp eq i64 %92, 0
  %95 = select i1 %94, i64 578, i64 10
  %96 = add i64 %93, %95
  %97 = load i64, i64* %12, align 8
  br i1 %94, label %block_4026e4, label %block_4024ac

block_4025c7:                                     ; preds = %block_40255a
  %98 = inttoptr i64 %369 to i64*
  %99 = load i64, i64* %98
  %100 = add i64 %365, -24
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %102, 16
  %104 = load i64, i64* %11, align 8, !tbaa !1240
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 4204010, i64* %106
  %107 = load i64, i64* %20, align 8, !alias.scope !1259, !noalias !1262
  %108 = load i64, i64* %21, align 8, !alias.scope !1259, !noalias !1262
  %109 = inttoptr i64 %104 to i64*
  %110 = load i64, i64* %109
  %111 = add i64 %104, 8
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %104, 16
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  %117 = add i64 %104, 24
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %104, 32
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  %123 = add i64 %104, 40
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %104, 48
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %104, 56
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %104, 64
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %104, 72
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = inttoptr i64 %105 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %4, align 8, !alias.scope !1259, !noalias !1262
  store i64 %104, i64* %11, align 8, !alias.scope !1259, !noalias !1262
  %140 = tail call i64 @__isoc99_sscanf(i64 %99, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %103, i64 4203975, i64 %107, i64 %108, i64 %110, i64 %113, i64 %116, i64 %119, i64 %122, i64 %125, i64 %128, i64 %131, i64 %134, i64 %137), !noalias !1259
  %141 = load i64, i64* %12, align 8
  %142 = add i64 %141, -1132
  %143 = trunc i64 %140 to i32
  %144 = load i64, i64* %4, align 8
  %145 = inttoptr i64 %142 to i32*
  store i32 %143, i32* %145
  %146 = add i64 %144, 178
  br label %block_40269c.backedge

block_4027c1:                                     ; preds = %block_402719, %block_4026e4
  %147 = add i64 %325, -4
  %148 = inttoptr i64 %147 to i32*
  store i32 1, i32* %148
  %149 = inttoptr i64 %147 to i32*
  %150 = load i32, i32* %149
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %6, align 8, !tbaa !1240
  %152 = load i64, i64* %11, align 8
  %153 = add i64 %152, 1168
  %154 = icmp ugt i64 %152, -1169
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %13, align 1, !tbaa !1264
  %156 = trunc i64 %153 to i32
  %157 = and i32 %156, 255
  %158 = tail call i32 @llvm.ctpop.i32(i32 %157) #10
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = xor i8 %160, 1
  store i8 %161, i8* %14, align 1, !tbaa !1278
  %162 = xor i64 %152, 16
  %163 = xor i64 %162, %153
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  store i8 %166, i8* %15, align 1, !tbaa !1279
  %167 = icmp eq i64 %153, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %16, align 1, !tbaa !1280
  %169 = lshr i64 %153, 63
  %170 = trunc i64 %169 to i8
  store i8 %170, i8* %17, align 1, !tbaa !1281
  %171 = lshr i64 %152, 63
  %172 = xor i64 %169, %171
  %173 = add nuw nsw i64 %172, %169
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %18, align 1, !tbaa !1282
  %176 = add i64 %152, 1176
  %177 = inttoptr i64 %153 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %12, align 8, !tbaa !1240
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %4, align 8, !tbaa !1240
  %181 = add i64 %152, 1184
  store i64 %181, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %76

block_40255a:                                     ; preds = %block_40251c
  %182 = inttoptr i64 %392 to i64*
  %183 = load i64, i64* %182
  store i64 %183, i64* %6, align 8, !tbaa !1240
  %184 = shl i64 %183, 3
  %185 = add i64 %184, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %7, align 8, !tbaa !1240
  store i64 %187, i64* %4, align 8, !tbaa !1240
  switch i64 %187, label %501 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa.loopexit
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5
  ]

block_4024ac:                                     ; preds = %block_4026d0
  %188 = add i64 %97, -1080
  %189 = inttoptr i64 %188 to i32*
  store i32 0, i32* %189
  %190 = inttoptr i64 %188 to i32*
  %191 = load i32, i32* %190
  %192 = sext i32 %191 to i64
  %193 = shl nsw i64 %192, 3
  %194 = add i64 %193, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %97, -1088
  %198 = add i64 %96, 32
  %199 = inttoptr i64 %197 to i64*
  store i64 %196, i64* %199
  br label %block_4024cc

block_4025fa.loopexit:                            ; preds = %block_40255a
  br label %block_4025fa

block_4025fa:                                     ; preds = %block_4025fa.loopexit, %3
  %200 = phi i64 [ %23, %3 ], [ 4204026, %block_4025fa.loopexit ]
  %201 = phi i64 [ %22, %3 ], [ %365, %block_4025fa.loopexit ]
  %202 = phi i64 [ %24, %3 ], [ 4204061, %block_4025fa.loopexit ]
  %203 = phi %struct.Memory* [ %2, %3 ], [ %411, %block_4025fa.loopexit ]
  %204 = add i64 %201, -1096
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  %207 = add i64 %201, -24
  %208 = inttoptr i64 %207 to i64*
  %209 = load i64, i64* %208
  %210 = add i64 %209, 24
  %211 = load i64, i64* %11, align 8, !tbaa !1240
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %202, i64* %213
  %214 = load i64, i64* %20, align 8, !alias.scope !1244, !noalias !1247
  %215 = load i64, i64* %21, align 8, !alias.scope !1244, !noalias !1247
  %216 = inttoptr i64 %211 to i64*
  %217 = load i64, i64* %216
  %218 = add i64 %211, 8
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219
  %221 = add i64 %211, 16
  %222 = inttoptr i64 %221 to i64*
  %223 = load i64, i64* %222
  %224 = add i64 %211, 24
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = add i64 %211, 32
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %211, 40
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %211, 48
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %211, 56
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %211, 64
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %211, 72
  %243 = inttoptr i64 %242 to i64*
  %244 = load i64, i64* %243
  %245 = inttoptr i64 %212 to i64*
  %246 = load i64, i64* %245
  store i64 %246, i64* %4, align 8, !alias.scope !1244, !noalias !1247
  store i64 %211, i64* %11, align 8, !alias.scope !1244, !noalias !1247
  %247 = tail call i64 @__isoc99_sscanf(i64 %206, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %210, i64 %200, i64 %214, i64 %215, i64 %217, i64 %220, i64 %223, i64 %226, i64 %229, i64 %232, i64 %235, i64 %238, i64 %241, i64 %244), !noalias !1244
  %248 = load i64, i64* %12, align 8
  %249 = add i64 %248, -1136
  %250 = trunc i64 %247 to i32
  %251 = load i64, i64* %4, align 8
  %252 = inttoptr i64 %249 to i32*
  store i32 %250, i32* %252
  %253 = add i64 %251, 127
  br label %block_40269c

block_4026a6:                                     ; preds = %block_4024ff, %block_4024da
  %254 = phi i64 [ %353, %block_4024ff ], [ %337, %block_4024da ]
  %255 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %256 = phi %struct.Memory* [ %411, %block_4024ff ], [ %411, %block_4024da ]
  %257 = add i64 %254, %255
  %258 = load i64, i64* %12, align 8
  %259 = add i64 %258, -1080
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260
  %262 = add i32 %261, 1
  %263 = inttoptr i64 %259 to i32*
  store i32 %262, i32* %263
  %264 = inttoptr i64 %259 to i32*
  %265 = load i32, i32* %264
  %266 = sext i32 %265 to i64
  %267 = shl nsw i64 %266, 3
  %268 = add i64 %267, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = add i64 %258, -1088
  %272 = inttoptr i64 %271 to i64*
  store i64 %270, i64* %272
  %273 = add i64 %257, -474
  br label %block_4024cc

block_4026e4:                                     ; preds = %block_4026d0
  %274 = add i64 %97, -1064
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %96, 12
  %278 = load i64, i64* %11, align 8, !tbaa !1240
  %279 = add i64 %278, -8
  %280 = inttoptr i64 %279 to i64*
  store i64 %277, i64* %280
  %281 = inttoptr i64 %279 to i64*
  %282 = load i64, i64* %281
  store i64 %282, i64* %4, align 8, !alias.scope !1283, !noalias !1286
  store i64 %278, i64* %11, align 8, !alias.scope !1283, !noalias !1286
  %283 = tail call i64 @fclose(i64 %276), !noalias !1283
  %284 = load i64, i64* %12, align 8
  %285 = add i64 %284, -24
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %287, 40
  %289 = inttoptr i64 %288 to i8*
  %290 = load i8, i8* %289
  %291 = sext i8 %290 to i32
  %292 = add nsw i32 %291, -65
  %293 = zext i32 %292 to i64
  %294 = lshr i32 %292, 31
  store i64 %293, i64* %10, align 8, !tbaa !1240
  %295 = add nsw i32 %291, -87
  %296 = zext i32 %295 to i64
  store i64 %296, i64* %7, align 8, !tbaa !1240
  %297 = icmp ult i32 %292, 22
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %13, align 1, !tbaa !1264
  %299 = and i32 %295, 255
  %300 = tail call i32 @llvm.ctpop.i32(i32 %299) #10
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  %303 = xor i8 %302, 1
  store i8 %303, i8* %14, align 1, !tbaa !1278
  %304 = xor i32 %292, 16
  %305 = xor i32 %304, %295
  %306 = lshr i32 %305, 4
  %307 = trunc i32 %306 to i8
  %308 = and i8 %307, 1
  store i8 %308, i8* %15, align 1, !tbaa !1279
  %309 = icmp eq i32 %295, 0
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %16, align 1, !tbaa !1280
  %311 = lshr i32 %295, 31
  %312 = trunc i32 %311 to i8
  store i8 %312, i8* %17, align 1, !tbaa !1281
  %313 = xor i32 %311, %294
  %314 = add nuw nsw i32 %313, %294
  %315 = icmp eq i32 %314, 2
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %18, align 1, !tbaa !1282
  %317 = add i64 %284, -1148
  %318 = trunc i64 %283 to i32
  %319 = inttoptr i64 %317 to i32*
  store i32 %318, i32* %319
  %320 = add i64 %284, -1160
  %321 = inttoptr i64 %320 to i64*
  store i64 %293, i64* %321
  %322 = add i64 %284, -1164
  %323 = inttoptr i64 %322 to i32*
  store i32 %295, i32* %323
  %324 = or i1 %309, %297
  %325 = load i64, i64* %12, align 8
  br i1 %324, label %block_402719, label %block_4027c1

block_4024da:                                     ; preds = %block_4024cc
  %326 = add i64 %410, -1056
  %327 = add i64 %417, 22
  %328 = load i64, i64* %11, align 8, !tbaa !1240
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %327, i64* %330
  %331 = inttoptr i64 %329 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %4, align 8, !alias.scope !1288, !noalias !1291
  store i64 %328, i64* %11, align 8, !alias.scope !1288, !noalias !1291
  %333 = tail call i64 @strstr(i64 %326, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %334 = load i64, i64* %4, align 8
  %335 = icmp eq i64 %333, 0
  %336 = select i1 %335, i64 15, i64 10
  %337 = add i64 %334, %336
  br i1 %335, label %block_4024ff, label %block_4026a6

block_4024ff:                                     ; preds = %block_4024da
  %338 = load i64, i64* %12, align 8
  %339 = add i64 %338, -1056
  %340 = add i64 %338, -1088
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  store i64 %342, i64* %9, align 8, !tbaa !1240
  %343 = add i64 %337, 19
  %344 = load i64, i64* %11, align 8, !tbaa !1240
  %345 = add i64 %344, -8
  %346 = inttoptr i64 %345 to i64*
  store i64 %343, i64* %346
  %347 = inttoptr i64 %345 to i64*
  %348 = load i64, i64* %347
  store i64 %348, i64* %4, align 8, !alias.scope !1293, !noalias !1296
  store i64 %344, i64* %11, align 8, !alias.scope !1293, !noalias !1296
  %349 = tail call i64 @strstr(i64 %339, i64 %342)
  %350 = load i64, i64* %4, align 8
  %351 = icmp eq i64 %349, 0
  %352 = select i1 %351, i64 399, i64 10
  %353 = add i64 %350, %352
  br i1 %351, label %block_4026a6, label %block_40251c

block_40251c:                                     ; preds = %block_4024ff
  %354 = load i64, i64* %12, align 8
  %355 = add i64 %354, -1088
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %353, 12
  %359 = load i64, i64* %11, align 8, !tbaa !1240
  %360 = add i64 %359, -8
  %361 = inttoptr i64 %360 to i64*
  store i64 %358, i64* %361
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362
  store i64 %363, i64* %4, align 8, !alias.scope !1298, !noalias !1301
  store i64 %359, i64* %11, align 8, !alias.scope !1298, !noalias !1301
  %364 = tail call i64 @strlen(i64 %357)
  %365 = load i64, i64* %12, align 8
  %366 = add i64 %365, -1055
  %367 = add i64 %366, %364
  %368 = load i64, i64* %4, align 8
  %369 = add i64 %365, -1096
  %370 = inttoptr i64 %369 to i64*
  store i64 %367, i64* %370
  %371 = add i64 %365, -1080
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  %375 = add nsw i64 %374, -6
  store i64 %375, i64* %10, align 8, !tbaa !1240
  %376 = icmp ult i32 %373, 6
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %13, align 1, !tbaa !1264
  %378 = trunc i64 %375 to i32
  %379 = and i32 %378, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379) #10
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %14, align 1, !tbaa !1278
  %384 = xor i64 %375, %374
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %15, align 1, !tbaa !1279
  %388 = icmp eq i64 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %16, align 1, !tbaa !1280
  %390 = lshr i64 %375, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %17, align 1, !tbaa !1281
  store i8 0, i8* %18, align 1, !tbaa !1282
  %392 = add i64 %365, -1112
  %393 = inttoptr i64 %392 to i64*
  store i64 %374, i64* %393
  %394 = add i64 %365, -1120
  %395 = inttoptr i64 %394 to i64*
  store i64 %375, i64* %395
  %396 = or i1 %388, %376
  %397 = select i1 %396, i64 50, i64 372
  %398 = add i64 %368, %397
  br i1 %396, label %block_40255a, label %block_40269c.backedge

block_40269c.backedge:                            ; preds = %block_402628, %block_40251c, %block_4025c7, %block_402673
  %399 = phi i64 [ %365, %block_40251c ], [ %488, %block_402628 ], [ %68, %block_402673 ], [ %141, %block_4025c7 ]
  %400 = phi i64 [ %398, %block_40251c ], [ %493, %block_402628 ], [ %72, %block_402673 ], [ %146, %block_4025c7 ]
  %401 = phi %struct.Memory* [ %411, %block_40251c ], [ %411, %block_402628 ], [ %411, %block_402673 ], [ %411, %block_4025c7 ]
  br label %block_40269c

block_402719:                                     ; preds = %block_4026e4
  %402 = add i64 %325, -1160
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  store i64 %404, i64* %6, align 8, !tbaa !1240
  %405 = shl i64 %404, 3
  %406 = add i64 %405, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  store i64 %408, i64* %7, align 8, !tbaa !1240
  store i64 %408, i64* %4, align 8, !tbaa !1240
  switch i64 %408, label %507 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %409 = phi i64 [ %198, %block_4024ac ], [ %273, %block_4026a6 ]
  %410 = phi i64 [ %97, %block_4024ac ], [ %258, %block_4026a6 ]
  %411 = phi %struct.Memory* [ %76, %block_4024ac ], [ %256, %block_4026a6 ]
  %412 = add i64 %410, -1088
  %413 = inttoptr i64 %412 to i64*
  %414 = load i64, i64* %413
  %415 = icmp eq i64 %414, 0
  %416 = select i1 %415, i64 516, i64 14
  %417 = add i64 %409, %416
  br i1 %415, label %block_4026d0.loopexit, label %block_4024da

block_402628:                                     ; preds = %block_40255a
  %418 = inttoptr i64 %369 to i64*
  %419 = load i64, i64* %418
  %420 = load i64, i64* %11, align 8, !tbaa !1240
  %421 = add i64 %420, -8
  %422 = inttoptr i64 %421 to i64*
  store i64 4204084, i64* %422
  %423 = inttoptr i64 %421 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %4, align 8, !alias.scope !1303, !noalias !1306
  store i64 %420, i64* %11, align 8, !alias.scope !1303, !noalias !1306
  %425 = tail call i64 @strlen(i64 %419)
  %426 = load i64, i64* %4, align 8
  %427 = add i64 %426, 12
  %428 = load i64, i64* %11, align 8, !tbaa !1240
  %429 = add i64 %428, -8
  %430 = inttoptr i64 %429 to i64*
  store i64 %427, i64* %430
  %431 = inttoptr i64 %429 to i64*
  %432 = load i64, i64* %431
  store i64 %432, i64* %4, align 8, !alias.scope !1308, !noalias !1311
  store i64 %428, i64* %11, align 8, !alias.scope !1308, !noalias !1311
  %433 = tail call i64 @malloc(i64 %425)
  %434 = load i64, i64* %4, align 8
  %435 = load i64, i64* %12, align 8
  %436 = add i64 %435, -24
  %437 = inttoptr i64 %436 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %438, 32
  %440 = inttoptr i64 %439 to i64*
  store i64 %433, i64* %440
  %441 = add i64 %435, -1096
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = inttoptr i64 %436 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %445, 32
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %434, 40
  %450 = load i64, i64* %11, align 8, !tbaa !1240
  %451 = add i64 %450, -8
  %452 = inttoptr i64 %451 to i64*
  store i64 %449, i64* %452
  %453 = load i64, i64* %19, align 8, !alias.scope !1313, !noalias !1316
  %454 = load i64, i64* %20, align 8, !alias.scope !1313, !noalias !1316
  %455 = load i64, i64* %21, align 8, !alias.scope !1313, !noalias !1316
  %456 = inttoptr i64 %450 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %450, 8
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %450, 16
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = add i64 %450, 24
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %450, 32
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = add i64 %450, 40
  %471 = inttoptr i64 %470 to i64*
  %472 = load i64, i64* %471
  %473 = add i64 %450, 48
  %474 = inttoptr i64 %473 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %450, 56
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = add i64 %450, 64
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %450, 72
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483
  %485 = inttoptr i64 %451 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %4, align 8, !alias.scope !1313, !noalias !1316
  store i64 %450, i64* %11, align 8, !alias.scope !1313, !noalias !1316
  %487 = tail call i64 @__isoc99_sscanf(i64 %443, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %448, i64 %453, i64 %454, i64 %455, i64 %457, i64 %460, i64 %463, i64 %466, i64 %469, i64 %472, i64 %475, i64 %478, i64 %481, i64 %484), !noalias !1313
  %488 = load i64, i64* %12, align 8
  %489 = add i64 %488, -1140
  %490 = trunc i64 %487 to i32
  %491 = load i64, i64* %4, align 8
  %492 = inttoptr i64 %489 to i32*
  store i32 %490, i32* %492
  %493 = add i64 %491, 52
  br label %block_40269c.backedge

block_40269c:                                     ; preds = %block_40269c.backedge, %block_4025fa
  %494 = phi i64 [ %248, %block_4025fa ], [ %399, %block_40269c.backedge ]
  %495 = phi i64 [ %253, %block_4025fa ], [ %400, %block_40269c.backedge ]
  %496 = phi %struct.Memory* [ %203, %block_4025fa ], [ %401, %block_40269c.backedge ]
  %497 = add i64 %495, 52
  br label %block_4026d0

block_40256b:                                     ; preds = %block_40255a
  %498 = tail call %struct.Memory* @sub_40256b(%struct.State* nonnull %0, i64 4203883, %struct.Memory* %411)
  ret %struct.Memory* %498

block_4025f5:                                     ; preds = %block_40255a
  %499 = tail call %struct.Memory* @sub_4025f5(%struct.State* nonnull %0, i64 4204021, %struct.Memory* %411)
  ret %struct.Memory* %499

block_402599:                                     ; preds = %block_40255a
  %500 = tail call %struct.Memory* @sub_402599(%struct.State* nonnull %0, i64 4203929, %struct.Memory* %411)
  ret %struct.Memory* %500

; <label>:501:                                    ; preds = %block_40255a
  %502 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %187, %struct.Memory* %411)
  ret %struct.Memory* %502

block_40279f:                                     ; preds = %block_402719
  %503 = tail call %struct.Memory* @sub_40279f(%struct.State* nonnull %0, i64 4204447, %struct.Memory* %76)
  ret %struct.Memory* %503

block_40272a:                                     ; preds = %block_402719
  %504 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %76)
  ret %struct.Memory* %504

block_402778:                                     ; preds = %block_402719
  %505 = tail call %struct.Memory* @sub_402778(%struct.State* nonnull %0, i64 4204408, %struct.Memory* %76)
  ret %struct.Memory* %505

block_402751:                                     ; preds = %block_402719
  %506 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %76)
  ret %struct.Memory* %506

; <label>:507:                                    ; preds = %block_402719
  %508 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %408, %struct.Memory* %76)
  ret %struct.Memory* %508
}

; Function Attrs: noinline
define %struct.Memory* @sub_40218f_def_40215B(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40218f:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, -148
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15
  %17 = sext i32 %16 to i64
  %18 = add i64 %13, -80
  %19 = add i64 %1, 11
  %20 = inttoptr i64 %18 to i64*
  store i64 %17, i64* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_40219a

block_4022f3:                                     ; preds = %block_40219a
  %31 = add i64 %338, -144
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32
  %34 = add i64 %338, -24
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35
  %37 = add i64 %338, -40
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %359, 32
  %41 = load i64, i64* %11, align 8, !tbaa !1240
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %40, i64* %43
  %44 = load i64, i64* %29, align 8, !alias.scope !1318, !noalias !1321
  %45 = load i64, i64* %30, align 8, !alias.scope !1318, !noalias !1321
  %46 = inttoptr i64 %41 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %41, 8
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %41, 16
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %41, 24
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %41, 32
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %41, 40
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %41, 48
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %41, 56
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %41, 64
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %41, 72
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73
  %75 = inttoptr i64 %42 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %3, align 8, !alias.scope !1318, !noalias !1321
  store i64 %41, i64* %11, align 8, !alias.scope !1318, !noalias !1321
  %77 = tail call i64 @fprintf(i64 %33, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 921), i64 %36, i64 %39, i64 %44, i64 %45, i64 %47, i64 %50, i64 %53, i64 %56, i64 %59, i64 %62, i64 %65, i64 %68, i64 %71, i64 %74), !noalias !1318
  %78 = load i64, i64* %12, align 8
  %79 = add i64 %78, -144
  %80 = load i64, i64* %3, align 8
  %81 = inttoptr i64 %79 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %78, -236
  %84 = trunc i64 %77 to i32
  %85 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %85
  %86 = add i64 %80, 18
  %87 = load i64, i64* %11, align 8, !tbaa !1240
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %3, align 8, !alias.scope !1323, !noalias !1326
  store i64 %87, i64* %11, align 8, !alias.scope !1323, !noalias !1326
  %92 = tail call i64 @fclose(i64 %82), !noalias !1323
  %93 = load i64, i64* %12, align 8
  %94 = add i64 %93, -120
  %95 = load i64, i64* %3, align 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %7, align 8, !tbaa !1240
  %98 = add i64 %93, -240
  %99 = trunc i64 %92 to i32
  %100 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %95, 18
  %102 = load i64, i64* %11, align 8, !tbaa !1240
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %3, align 8, !alias.scope !1328, !noalias !1331
  store i64 %102, i64* %11, align 8, !alias.scope !1328, !noalias !1331
  %107 = tail call i64 @free(i64 %97), !noalias !1328
  %108 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 968), i64* %9, align 8, !tbaa !1240
  %109 = load i64, i64* @stdout
  %110 = load i64, i64* %12, align 8
  %111 = add i64 %110, -136
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %8, align 8, !tbaa !1240
  %114 = add i64 %108, 32
  %115 = load i64, i64* %11, align 8, !tbaa !1240
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %114, i64* %117
  %118 = load i64, i64* %28, align 8, !alias.scope !1333, !noalias !1336
  %119 = load i64, i64* %29, align 8, !alias.scope !1333, !noalias !1336
  %120 = load i64, i64* %30, align 8, !alias.scope !1333, !noalias !1336
  %121 = inttoptr i64 %115 to i64*
  %122 = load i64, i64* %121
  %123 = add i64 %115, 8
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %115, 16
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %115, 24
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %115, 32
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %115, 40
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %115, 48
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %115, 56
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %115, 64
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %115, 72
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = inttoptr i64 %116 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %3, align 8, !alias.scope !1333, !noalias !1336
  store i64 %115, i64* %11, align 8, !alias.scope !1333, !noalias !1336
  %152 = tail call i64 @fprintf(i64 %109, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 968), i64 %113, i64 %118, i64 %119, i64 %120, i64 %122, i64 %125, i64 %128, i64 %131, i64 %134, i64 %137, i64 %140, i64 %143, i64 %146, i64 %149), !noalias !1333
  %153 = load i64, i64* %12, align 8
  %154 = add i64 %153, -136
  %155 = load i64, i64* %3, align 8
  %156 = inttoptr i64 %154 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %10, align 8, !tbaa !1240
  %158 = add i64 %153, -244
  %159 = trunc i64 %152 to i32
  %160 = inttoptr i64 %158 to i32*
  store i32 %159, i32* %160
  %161 = add i64 %155, 18
  %162 = load i64, i64* %11, align 8, !tbaa !1240
  %163 = add i64 %162, -8
  %164 = inttoptr i64 %163 to i64*
  store i64 %161, i64* %164
  store i64 %162, i64* %11, align 8, !alias.scope !1338, !noalias !1341
  %165 = tail call i64 @free(i64 %157), !noalias !1338
  %166 = load i64, i64* %12, align 8
  %167 = add i64 %166, -4
  %168 = inttoptr i64 %167 to i32*
  store i32 1, i32* %168
  %169 = inttoptr i64 %167 to i32*
  %170 = load i32, i32* %169
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %6, align 8, !tbaa !1240
  %172 = load i64, i64* %11, align 8
  %173 = add i64 %172, 256
  %174 = icmp ugt i64 %172, -257
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %21, align 1, !tbaa !1264
  %176 = trunc i64 %173 to i32
  %177 = and i32 %176, 255
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #10
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  store i8 %181, i8* %22, align 1, !tbaa !1278
  %182 = xor i64 %173, %172
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  store i8 %185, i8* %23, align 1, !tbaa !1279
  %186 = icmp eq i64 %173, 0
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %24, align 1, !tbaa !1280
  %188 = lshr i64 %173, 63
  %189 = trunc i64 %188 to i8
  store i8 %189, i8* %25, align 1, !tbaa !1281
  %190 = lshr i64 %172, 63
  %191 = xor i64 %188, %190
  %192 = add nuw nsw i64 %191, %188
  %193 = icmp eq i64 %192, 2
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %26, align 1, !tbaa !1282
  %195 = add i64 %172, 264
  %196 = inttoptr i64 %173 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %12, align 8, !tbaa !1240
  %198 = inttoptr i64 %195 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %3, align 8, !tbaa !1240
  %200 = add i64 %172, 272
  store i64 %200, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %339

block_40226e:                                     ; preds = %block_4021f6
  %201 = add i64 %315, -144
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  %204 = add i64 %315, -120
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  %207 = add i64 %315, -80
  %208 = inttoptr i64 %207 to i64*
  %209 = load i64, i64* %208
  %210 = shl i64 %209, 4
  %211 = add i64 %210, %206
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %336, 42
  %215 = load i64, i64* %11, align 8, !tbaa !1240
  %216 = add i64 %215, -8
  %217 = inttoptr i64 %216 to i64*
  store i64 %214, i64* %217
  %218 = load i64, i64* %29, align 8, !alias.scope !1343, !noalias !1346
  %219 = load i64, i64* %30, align 8, !alias.scope !1343, !noalias !1346
  %220 = inttoptr i64 %215 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %215, 8
  %223 = inttoptr i64 %222 to i64*
  %224 = load i64, i64* %223
  %225 = add i64 %215, 16
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %215, 24
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %215, 32
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %215, 40
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %215, 48
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %215, 56
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %215, 64
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %215, 72
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = inttoptr i64 %216 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %3, align 8, !alias.scope !1343, !noalias !1346
  store i64 %215, i64* %11, align 8, !alias.scope !1343, !noalias !1346
  %251 = tail call i64 @fprintf(i64 %203, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 903), i64 %213, i64 %210, i64 %218, i64 %219, i64 %221, i64 %224, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248), !noalias !1343
  store i64 %251, i64* %27, align 8, !alias.scope !1343, !noalias !1346
  %252 = load i64, i64* %12, align 8
  %253 = add i64 %252, -32
  %254 = load i64, i64* %3, align 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  %257 = shl i64 %256, 2
  %258 = add i64 %257, 8
  %259 = add i64 %252, -120
  %260 = inttoptr i64 %259 to i64*
  %261 = load i64, i64* %260
  %262 = add i64 %252, -80
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263
  %265 = shl i64 %264, 4
  %266 = add i64 %265, %261
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  %269 = mul i64 %268, %258
  %270 = load i64, i64* %12, align 8
  %271 = add i64 %270, -24
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %273, %269
  %275 = inttoptr i64 %271 to i64*
  store i64 %274, i64* %275
  %276 = add i64 %270, -120
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  %279 = add i64 %270, -80
  %280 = inttoptr i64 %279 to i64*
  %281 = load i64, i64* %280
  %282 = shl i64 %281, 4
  store i64 %282, i64* %8, align 8, !tbaa !1240
  %283 = add i64 %282, %278
  %284 = inttoptr i64 %283 to i64*
  %285 = load i64, i64* %284
  %286 = load i64, i64* %12, align 8
  %287 = add i64 %286, -40
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %289, %285
  %291 = inttoptr i64 %287 to i64*
  store i64 %290, i64* %291
  %292 = add i64 %286, -232
  %293 = load i32, i32* %5, align 4
  %294 = inttoptr i64 %292 to i32*
  store i32 %293, i32* %294
  %295 = add i64 %286, -156
  %296 = inttoptr i64 %295 to i32*
  %297 = load i32, i32* %296
  %298 = sext i32 %297 to i64
  %299 = add i64 %286, -80
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %301, %298
  %303 = inttoptr i64 %299 to i64*
  store i64 %302, i64* %303
  %304 = add i64 %254, -254
  br label %block_40219a

block_402258:                                     ; preds = %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_402223
  %305 = phi i64 [ %315, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %400, %block_402223 ]
  %306 = phi i64 [ %426, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %409, %block_402223 ]
  %307 = phi %struct.Memory* [ %316, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %316, %block_402223 ]
  %308 = add i64 %305, -88
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309
  %311 = add i64 %310, 1
  %312 = inttoptr i64 %308 to i64*
  store i64 %311, i64* %312
  %313 = add i64 %306, -98
  br label %block_4021f6

block_4021f6:                                     ; preds = %block_4021ae, %block_402258
  %314 = phi i64 [ %490, %block_4021ae ], [ %313, %block_402258 ]
  %315 = phi i64 [ %471, %block_4021ae ], [ %305, %block_402258 ]
  %316 = phi %struct.Memory* [ %339, %block_4021ae ], [ %307, %block_402258 ]
  %317 = add i64 %315, -88
  %318 = inttoptr i64 %317 to i64*
  %319 = load i64, i64* %318
  %320 = add i64 %315, -60
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = sext i32 %322 to i64
  %324 = sub i64 %319, %323
  %325 = lshr i64 %324, 63
  %326 = trunc i64 %325 to i8
  %327 = lshr i64 %319, 63
  %328 = lshr i64 %323, 63
  %329 = xor i64 %327, %328
  %330 = xor i64 %325, %327
  %331 = add nuw nsw i64 %330, %329
  %332 = icmp eq i64 %331, 2
  %333 = icmp ne i8 %326, 0
  %334 = xor i1 %333, %332
  %335 = select i1 %334, i64 17, i64 120
  %336 = add i64 %314, %335
  br i1 %334, label %block_402207, label %block_40226e

block_40219a:                                     ; preds = %block_40226e, %block_40218f
  %337 = phi i64 [ %19, %block_40218f ], [ %304, %block_40226e ]
  %338 = phi i64 [ %13, %block_40218f ], [ %286, %block_40226e ]
  %339 = phi %struct.Memory* [ %2, %block_40218f ], [ %316, %block_40226e ]
  %340 = add i64 %338, -80
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %338, -152
  %344 = inttoptr i64 %343 to i32*
  %345 = load i32, i32* %344
  %346 = sext i32 %345 to i64
  %347 = sub i64 %342, %346
  %348 = lshr i64 %347, 63
  %349 = trunc i64 %348 to i8
  %350 = lshr i64 %342, 63
  %351 = lshr i64 %346, 63
  %352 = xor i64 %350, %351
  %353 = xor i64 %348, %350
  %354 = add nuw nsw i64 %353, %352
  %355 = icmp eq i64 %354, 2
  %356 = icmp ne i8 %349, 0
  %357 = xor i1 %356, %355
  %358 = select i1 %357, i64 20, i64 345
  %359 = add i64 %337, %358
  br i1 %357, label %block_4021ae, label %block_4022f3

block_402223:                                     ; preds = %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %360 = add i64 %315, -144
  %361 = inttoptr i64 %360 to i64*
  %362 = load i64, i64* %361
  %363 = add i64 %319, 1
  %364 = add i64 %426, 35
  %365 = load i64, i64* %11, align 8, !tbaa !1240
  %366 = add i64 %365, -8
  %367 = inttoptr i64 %366 to i64*
  store i64 %364, i64* %367
  %368 = inttoptr i64 %365 to i64*
  %369 = load i64, i64* %368
  %370 = add i64 %365, 8
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  %373 = add i64 %365, 16
  %374 = inttoptr i64 %373 to i64*
  %375 = load i64, i64* %374
  %376 = add i64 %365, 24
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %365, 32
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380
  %382 = add i64 %365, 40
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %365, 48
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %365, 56
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %365, 64
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %365, 72
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = inttoptr i64 %366 to i64*
  %398 = load i64, i64* %397
  store i64 %398, i64* %3, align 8, !alias.scope !1348, !noalias !1351
  store i64 %365, i64* %11, align 8, !alias.scope !1348, !noalias !1351
  %399 = tail call i64 @fprintf(i64 %362, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 897), i64 %363, i64 %319, i64 %492, i64 %493, i64 %369, i64 %372, i64 %375, i64 %378, i64 %381, i64 %384, i64 %387, i64 %390, i64 %393, i64 %396), !noalias !1348
  %400 = load i64, i64* %12, align 8
  %401 = add i64 %400, -32
  %402 = load i64, i64* %3, align 8
  %403 = inttoptr i64 %401 to i64*
  %404 = load i64, i64* %403
  %405 = add i64 %404, 1
  %406 = inttoptr i64 %401 to i64*
  store i64 %405, i64* %406
  %407 = add i64 %400, -228
  %408 = trunc i64 %399 to i32
  %409 = add i64 %402, 18
  %410 = inttoptr i64 %407 to i32*
  store i32 %408, i32* %410
  br label %block_402258

block_402207:                                     ; preds = %block_4021f6
  %411 = add i64 %315, -168
  %412 = inttoptr i64 %411 to i64*
  %413 = load i64, i64* %412
  %414 = trunc i64 %319 to i6
  switch i6 %414, label %415 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %419
  ]

; <label>:415:                                    ; preds = %block_402207
  %416 = and i64 %319, 63
  %417 = add nsw i64 %416, -1
  %418 = ashr i64 %413, %417
  br label %419

; <label>:419:                                    ; preds = %415, %block_402207
  %420 = phi i64 [ %418, %415 ], [ %413, %block_402207 ]
  %421 = ashr i64 %420, 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %419, %block_402207
  %422 = phi i64 [ %413, %block_402207 ], [ %421, %419 ]
  %423 = and i64 %422, 1
  %424 = icmp eq i64 %423, 0
  %425 = select i1 %424, i64 81, i64 28
  %426 = add i64 %336, %425
  br i1 %424, label %block_402258, label %block_402223

block_4021ae:                                     ; preds = %block_40219a
  %427 = add i64 %338, -32
  %428 = inttoptr i64 %427 to i64*
  store i64 0, i64* %428
  %429 = add i64 %338, -144
  %430 = inttoptr i64 %429 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %359, 32
  %433 = load i64, i64* %11, align 8, !tbaa !1240
  %434 = add i64 %433, -8
  %435 = inttoptr i64 %434 to i64*
  store i64 %432, i64* %435
  %436 = load i64, i64* %8, align 8, !alias.scope !1353, !noalias !1356
  %437 = load i64, i64* %29, align 8, !alias.scope !1353, !noalias !1356
  %438 = load i64, i64* %30, align 8, !alias.scope !1353, !noalias !1356
  %439 = inttoptr i64 %433 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %433, 8
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %433, 16
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %433, 24
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %433, 32
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %433, 40
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %433, 48
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %433, 56
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  %462 = add i64 %433, 64
  %463 = inttoptr i64 %462 to i64*
  %464 = load i64, i64* %463
  %465 = add i64 %433, 72
  %466 = inttoptr i64 %465 to i64*
  %467 = load i64, i64* %466
  %468 = inttoptr i64 %434 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %3, align 8, !alias.scope !1353, !noalias !1356
  store i64 %433, i64* %11, align 8, !alias.scope !1353, !noalias !1356
  %470 = tail call i64 @fprintf(i64 %431, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 886), i64 %436, i64 %346, i64 %437, i64 %438, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458, i64 %461, i64 %464, i64 %467), !noalias !1353
  %471 = load i64, i64* %12, align 8
  %472 = add i64 %471, -120
  %473 = load i64, i64* %3, align 8
  %474 = inttoptr i64 %472 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %471, -80
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = shl i64 %478, 4
  %480 = add i64 %479, %475
  %481 = add i64 %480, 8
  %482 = inttoptr i64 %481 to i64*
  %483 = load i64, i64* %482
  %484 = add i64 %471, -168
  %485 = inttoptr i64 %484 to i64*
  store i64 %483, i64* %485
  %486 = add i64 %471, -88
  %487 = inttoptr i64 %486 to i64*
  store i64 0, i64* %487
  %488 = add i64 %471, -224
  %489 = trunc i64 %470 to i32
  %490 = add i64 %473, 40
  %491 = inttoptr i64 %488 to i32*
  store i32 %489, i32* %491
  %492 = load i64, i64* %29, align 8
  %493 = load i64, i64* %30, align 8
  br label %block_4021f6
}

; Function Attrs: noinline
define %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40b580:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = add i64 %16, -56
  store i64 %19, i64* %13, align 8, !tbaa !1240
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %26 = add i64 %16, -16
  %27 = load i32, i32* %7, align 4
  %28 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %28
  %29 = add i64 %16, -24
  %30 = load i64, i64* %11, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %16, -32
  %33 = load i64, i64* %10, align 8
  %34 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %34
  %35 = add i64 %16, -40
  %36 = load i64, i64* %9, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = inttoptr i64 %32 to i64*
  %39 = load i64, i64* %38
  %40 = icmp eq i64 %39, 0
  %41 = select i1 %40, i64 34, i64 46
  %42 = add i64 %41, %1
  br i1 %40, label %block_40b5a2, label %block_40b5ae

block_40b655:                                     ; preds = %block_40b634
  %43 = inttoptr i64 %166 to i32*
  store i32 1, i32* %43
  br label %block_40b668

block_40b5da:                                     ; preds = %block_40b5ae
  store i64 1, i64* %10, align 8, !tbaa !1240
  %44 = load i64, i64* %14, align 8
  %45 = add i64 %44, -24
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %47, 24
  %49 = add i64 %44, -8
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50
  %52 = zext i32 %51 to i64
  %53 = add i64 %44, -16
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %44, -40
  %57 = inttoptr i64 %56 to i64*
  store i64 %55, i64* %57
  %58 = inttoptr i64 %56 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %9, align 8, !tbaa !1240
  %60 = add i64 %90, 40
  %61 = load i64, i64* %13, align 8, !tbaa !1240
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %3, align 8, !alias.scope !1358, !noalias !1361
  store i64 %61, i64* %13, align 8, !alias.scope !1358, !noalias !1361
  %66 = tail call i64 @fwrite(i64 %48, i64 %52, i64 1, i64 %59)
  %67 = load i64, i64* %3, align 8
  %68 = add i64 %66, -1
  %69 = icmp eq i64 %68, 0
  %70 = select i1 %69, i64 50, i64 10
  %71 = add i64 %67, %70
  br i1 %69, label %block_40b634, label %block_40b60c

block_40b5ae:                                     ; preds = %block_40b580
  %72 = inttoptr i64 %26 to i32*
  %73 = load i32, i32* %72
  %74 = zext i32 %73 to i64
  store i64 %74, i64* %12, align 8, !tbaa !1240
  %75 = inttoptr i64 %29 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %11, align 8, !tbaa !1240
  %77 = inttoptr i64 %39 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %10, align 8, !tbaa !1240
  %79 = inttoptr i64 %35 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %9, align 8, !tbaa !1240
  %81 = add i64 %42, -46
  %82 = add i64 %42, 23
  %83 = add i64 %16, -64
  %84 = inttoptr i64 %83 to i64*
  store i64 %82, i64* %84
  store i64 %83, i64* %13, align 8, !tbaa !1240
  %85 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %81, %struct.Memory* %2)
  %86 = load i32, i32* %5, align 4
  %87 = load i64, i64* %3, align 8
  %88 = icmp eq i32 %86, 0
  %89 = select i1 %88, i64 21, i64 9
  %90 = add i64 %87, %89
  br i1 %88, label %block_40b5da, label %block_40b5ce

block_40b60c:                                     ; preds = %block_40b5da
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %11, align 8, !tbaa !1240
  %91 = load i64, i64* @stderr
  store i64 %91, i64* %12, align 8, !tbaa !1240
  %92 = add i64 %71, 25
  %93 = load i64, i64* %13, align 8, !tbaa !1240
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %98 = load i64, i64* %10, align 8, !alias.scope !1363, !noalias !1366
  %99 = load i64, i64* %9, align 8, !alias.scope !1363, !noalias !1366
  %100 = load i64, i64* %96, align 8, !alias.scope !1363, !noalias !1366
  %101 = load i64, i64* %97, align 8, !alias.scope !1363, !noalias !1366
  %102 = inttoptr i64 %93 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %93, 8
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %93, 16
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %93, 24
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %93, 32
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %93, 40
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %93, 48
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %93, 56
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %93, 64
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %93, 72
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = inttoptr i64 %94 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %3, align 8, !alias.scope !1363, !noalias !1366
  store i64 %93, i64* %13, align 8, !alias.scope !1363, !noalias !1366
  %133 = tail call i64 @fprintf(i64 %91, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %98, i64 %99, i64 %100, i64 %101, i64 %103, i64 %106, i64 %109, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124, i64 %127, i64 %130), !noalias !1363
  %134 = load i64, i64* %14, align 8
  %135 = add i64 %134, -4
  %136 = inttoptr i64 %135 to i32*
  store i32 1, i32* %136
  %137 = add i64 %134, -44
  %138 = trunc i64 %133 to i32
  %139 = inttoptr i64 %137 to i32*
  store i32 %138, i32* %139
  br label %block_40b668

block_40b634:                                     ; preds = %block_40b5da
  %140 = load i64, i64* %14, align 8
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i32*
  %143 = load i32, i32* %142
  %144 = zext i32 %143 to i64
  store i64 %144, i64* %12, align 8, !tbaa !1240
  %145 = add i64 %140, -16
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %11, align 8, !tbaa !1240
  %148 = add i64 %140, -24
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %150, 8
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %10, align 8, !tbaa !1240
  %154 = add i64 %140, -32
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %9, align 8, !tbaa !1240
  %157 = add i64 %71, -180
  %158 = add i64 %71, 24
  %159 = load i64, i64* %13, align 8, !tbaa !1240
  %160 = add i64 %159, -8
  %161 = inttoptr i64 %160 to i64*
  store i64 %158, i64* %161
  store i64 %160, i64* %13, align 8, !tbaa !1240
  %162 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %157, %struct.Memory* %85)
  %163 = load i32, i32* %5, align 4
  %164 = icmp eq i32 %163, 0
  %165 = load i64, i64* %14, align 8
  %166 = add i64 %165, -4
  br i1 %164, label %block_40b661, label %block_40b655

block_40b668:                                     ; preds = %block_40b5ce, %block_40b661, %block_40b5a2, %block_40b60c, %block_40b655
  %167 = phi i64 [ %165, %block_40b661 ], [ %165, %block_40b655 ], [ %134, %block_40b60c ], [ %206, %block_40b5ce ], [ %17, %block_40b5a2 ]
  %168 = phi %struct.Memory* [ %162, %block_40b661 ], [ %162, %block_40b655 ], [ %85, %block_40b60c ], [ %85, %block_40b5ce ], [ %2, %block_40b5a2 ]
  %169 = add i64 %167, -4
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %8, align 8, !tbaa !1240
  %173 = load i64, i64* %13, align 8
  %174 = add i64 %173, 48
  %175 = icmp ugt i64 %173, -49
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %20, align 1, !tbaa !1264
  %177 = trunc i64 %174 to i32
  %178 = and i32 %177, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #10
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %21, align 1, !tbaa !1278
  %183 = xor i64 %173, 16
  %184 = xor i64 %183, %174
  %185 = lshr i64 %184, 4
  %186 = trunc i64 %185 to i8
  %187 = and i8 %186, 1
  store i8 %187, i8* %22, align 1, !tbaa !1279
  %188 = icmp eq i64 %174, 0
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %23, align 1, !tbaa !1280
  %190 = lshr i64 %174, 63
  %191 = trunc i64 %190 to i8
  store i8 %191, i8* %24, align 1, !tbaa !1281
  %192 = lshr i64 %173, 63
  %193 = xor i64 %190, %192
  %194 = add nuw nsw i64 %193, %190
  %195 = icmp eq i64 %194, 2
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %25, align 1, !tbaa !1282
  %197 = add i64 %173, 56
  %198 = inttoptr i64 %174 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %14, align 8, !tbaa !1240
  %200 = inttoptr i64 %197 to i64*
  %201 = load i64, i64* %200
  store i64 %201, i64* %3, align 8, !tbaa !1240
  %202 = add i64 %173, 64
  store i64 %202, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %168

block_40b5a2:                                     ; preds = %block_40b580
  %203 = add i64 %16, -12
  %204 = inttoptr i64 %203 to i32*
  store i32 0, i32* %204
  br label %block_40b668

block_40b661:                                     ; preds = %block_40b634
  %205 = inttoptr i64 %166 to i32*
  store i32 0, i32* %205
  br label %block_40b668

block_40b5ce:                                     ; preds = %block_40b5ae
  %206 = load i64, i64* %14, align 8
  %207 = add i64 %206, -4
  %208 = inttoptr i64 %207 to i32*
  store i32 1, i32* %208
  br label %block_40b668
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409030_JobPoolInit(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409030:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  %18 = add i64 %15, -16
  %19 = load i64, i64* %11, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %15, -20
  %22 = load i32, i32* %7, align 4
  %23 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %23
  %24 = add i64 %15, -24
  %25 = load i32, i32* %5, align 4
  %26 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %26
  %27 = add i64 %15, -28
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %15, -20
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = add i64 %15, -16
  br label %block_409045

block_4090bb:                                     ; preds = %block_409045
  store i64 %103, i64* %8, align 8, !tbaa !1240
  %34 = sub i32 %102, %105
  %35 = lshr i32 %34, 31
  %36 = lshr i32 %102, 31
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %40 = and i32 %34, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #10
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i32 %105, %102
  %46 = xor i32 %45, %34
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = icmp eq i32 %34, 0
  %51 = zext i1 %50 to i8
  %52 = trunc i32 %35 to i8
  %53 = xor i32 %35, %36
  %54 = lshr i32 %105, 31
  %55 = xor i32 %54, %36
  %56 = add nuw nsw i32 %53, %55
  %57 = icmp eq i32 %56, 2
  %58 = zext i1 %57 to i8
  store i8 0, i8* %30, align 1, !tbaa !1264
  store i8 %44, i8* %37, align 1, !tbaa !1278
  store i8 %49, i8* %31, align 1, !tbaa !1279
  store i8 %51, i8* %38, align 1, !tbaa !1280
  store i8 %52, i8* %32, align 1, !tbaa !1281
  store i8 %58, i8* %39, align 1, !tbaa !1282
  %59 = inttoptr i64 %16 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %13, align 8, !tbaa !1240
  %61 = inttoptr i64 %15 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %3, align 8, !tbaa !1240
  %63 = add i64 %15, 8
  store i64 %63, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %100

block_409051:                                     ; preds = %block_409045
  %64 = inttoptr i64 %33 to i64*
  %65 = load i64, i64* %64
  %66 = mul nuw nsw i64 %103, 24
  %67 = add i64 %66, %65
  %68 = inttoptr i64 %67 to i32*
  store i32 0, i32* %68
  %69 = inttoptr i64 %33 to i64*
  %70 = load i64, i64* %69
  %71 = inttoptr i64 %27 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  %74 = mul nuw nsw i64 %73, 24
  %75 = add i64 %74, %70
  %76 = add i64 %75, 4
  %77 = inttoptr i64 %76 to i32*
  store i32 0, i32* %77
  %78 = inttoptr i64 %33 to i64*
  %79 = load i64, i64* %78
  %80 = inttoptr i64 %27 to i32*
  %81 = load i32, i32* %80
  %82 = zext i32 %81 to i64
  %83 = mul nuw nsw i64 %82, 24
  %84 = add i64 %83, %79
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %85 to i32*
  store i32 0, i32* %86
  %87 = inttoptr i64 %33 to i64*
  %88 = load i64, i64* %87
  %89 = inttoptr i64 %27 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %9, align 8, !tbaa !1240
  %92 = mul nuw nsw i64 %91, 24
  store i64 %92, i64* %10, align 8, !tbaa !1240
  %93 = add i64 %92, %88
  %94 = add i64 %93, 16
  %95 = inttoptr i64 %94 to i64*
  store i64 0, i64* %95
  %96 = inttoptr i64 %27 to i32*
  %97 = load i32, i32* %96
  %98 = add i32 %97, 1
  %99 = inttoptr i64 %27 to i32*
  store i32 %98, i32* %99
  br label %block_409045

block_409045:                                     ; preds = %block_409051, %block_409030
  %100 = phi %struct.Memory* [ %2, %block_409030 ], [ %100, %block_409051 ]
  %101 = inttoptr i64 %27 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  %104 = inttoptr i64 %29 to i32*
  %105 = load i32, i32* %104
  %106 = icmp ult i32 %102, %105
  br i1 %106, label %block_409051, label %block_4090bb
}

; Function Attrs: noinline
define %struct.Memory* @sub_407750_AdcCntlLog(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %8, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %11, -40
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %11, -16
  %22 = load i64, i64* %7, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %25, 4224
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %25, 592
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = zext i32 %31 to i64
  %33 = add i64 %1, 50
  %34 = add i64 %11, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %39 = load i64, i64* %4, align 8, !alias.scope !1368, !noalias !1371
  %40 = load i64, i64* %37, align 8, !alias.scope !1368, !noalias !1371
  %41 = load i64, i64* %38, align 8, !alias.scope !1368, !noalias !1371
  %42 = inttoptr i64 %14 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %11, -32
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %11, -24
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %11, -16
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %11, -8
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = inttoptr i64 %11 to i64*
  %57 = load i64, i64* %56
  %58 = add i64 %11, 8
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %11, 16
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %11, 24
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %11, 32
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  %70 = inttoptr i64 %34 to i64*
  %71 = load i64, i64* %70
  store i64 %14, i64* %8, align 8, !alias.scope !1368, !noalias !1371
  %72 = tail call i64 @fprintf(i64 %28, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4786), i64 %32, i64 %39, i64 %40, i64 %41, i64 %43, i64 %46, i64 %49, i64 %52, i64 %55, i64 %57, i64 %60, i64 %63, i64 %66, i64 %69), !noalias !1368
  %73 = load i64, i64* %9, align 8
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75
  %77 = add i64 %76, 4224
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78
  %80 = add i64 %76, 616
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %82, 44
  %84 = inttoptr i64 %83 to i32*
  %85 = load i32, i32* %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %73, -12
  %88 = trunc i64 %72 to i32
  %89 = inttoptr i64 %87 to i32*
  store i32 %88, i32* %89
  %90 = add i64 %71, 45
  %91 = load i64, i64* %8, align 8, !tbaa !1240
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93
  %94 = load i64, i64* %37, align 8, !alias.scope !1373, !noalias !1376
  %95 = load i64, i64* %38, align 8, !alias.scope !1373, !noalias !1376
  %96 = inttoptr i64 %91 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %91, 8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %91, 16
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %91, 24
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %91, 32
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %91, 40
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %91, 48
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %91, 56
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %91, 64
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %91, 72
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = inttoptr i64 %92 to i64*
  %126 = load i64, i64* %125
  store i64 %91, i64* %8, align 8, !alias.scope !1373, !noalias !1376
  %127 = tail call i64 @fprintf(i64 %79, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4810), i64 %86, i64 %82, i64 %94, i64 %95, i64 %97, i64 %100, i64 %103, i64 %106, i64 %109, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124), !noalias !1373
  %128 = load i64, i64* %9, align 8
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %131, 4224
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %131, 616
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %137, 52
  %139 = inttoptr i64 %138 to i32*
  %140 = load i32, i32* %139
  %141 = zext i32 %140 to i64
  %142 = add i64 %128, -16
  %143 = trunc i64 %127 to i32
  %144 = inttoptr i64 %142 to i32*
  store i32 %143, i32* %144
  %145 = add i64 %126, 45
  %146 = load i64, i64* %8, align 8, !tbaa !1240
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148
  %149 = load i64, i64* %37, align 8, !alias.scope !1378, !noalias !1381
  %150 = load i64, i64* %38, align 8, !alias.scope !1378, !noalias !1381
  %151 = inttoptr i64 %146 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %146, 8
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %146, 16
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %146, 24
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %146, 32
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  %165 = add i64 %146, 40
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  %168 = add i64 %146, 48
  %169 = inttoptr i64 %168 to i64*
  %170 = load i64, i64* %169
  %171 = add i64 %146, 56
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  %174 = add i64 %146, 64
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = add i64 %146, 72
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = inttoptr i64 %147 to i64*
  %181 = load i64, i64* %180
  store i64 %146, i64* %8, align 8, !alias.scope !1378, !noalias !1381
  %182 = tail call i64 @fprintf(i64 %134, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4835), i64 %141, i64 %137, i64 %149, i64 %150, i64 %152, i64 %155, i64 %158, i64 %161, i64 %164, i64 %167, i64 %170, i64 %173, i64 %176, i64 %179), !noalias !1378
  %183 = load i64, i64* %9, align 8
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %186, 4224
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %186, 616
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %192, 68
  %194 = inttoptr i64 %193 to i32*
  %195 = load i32, i32* %194
  %196 = zext i32 %195 to i64
  %197 = add i64 %183, -20
  %198 = trunc i64 %182 to i32
  %199 = inttoptr i64 %197 to i32*
  store i32 %198, i32* %199
  %200 = add i64 %181, 45
  %201 = load i64, i64* %8, align 8, !tbaa !1240
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203
  %204 = load i64, i64* %37, align 8, !alias.scope !1383, !noalias !1386
  %205 = load i64, i64* %38, align 8, !alias.scope !1383, !noalias !1386
  %206 = inttoptr i64 %201 to i64*
  %207 = load i64, i64* %206
  %208 = add i64 %201, 8
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209
  %211 = add i64 %201, 16
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %201, 24
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %201, 32
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %201, 40
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %201, 48
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %201, 56
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %201, 64
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %201, 72
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = inttoptr i64 %202 to i64*
  %236 = load i64, i64* %235
  store i64 %201, i64* %8, align 8, !alias.scope !1383, !noalias !1386
  %237 = tail call i64 @fprintf(i64 %189, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4860), i64 %196, i64 %192, i64 %204, i64 %205, i64 %207, i64 %210, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234), !noalias !1383
  %238 = load i64, i64* %9, align 8
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %241, 4224
  %243 = inttoptr i64 %242 to i64*
  %244 = load i64, i64* %243
  %245 = add i64 %241, 616
  %246 = inttoptr i64 %245 to i64*
  %247 = load i64, i64* %246
  %248 = add i64 %247, 64
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249
  %251 = zext i32 %250 to i64
  %252 = add i64 %238, -24
  %253 = trunc i64 %237 to i32
  %254 = inttoptr i64 %252 to i32*
  store i32 %253, i32* %254
  %255 = add i64 %236, 45
  %256 = load i64, i64* %8, align 8, !tbaa !1240
  %257 = add i64 %256, -8
  %258 = inttoptr i64 %257 to i64*
  store i64 %255, i64* %258
  %259 = load i64, i64* %37, align 8, !alias.scope !1388, !noalias !1391
  %260 = load i64, i64* %38, align 8, !alias.scope !1388, !noalias !1391
  %261 = inttoptr i64 %256 to i64*
  %262 = load i64, i64* %261
  %263 = add i64 %256, 8
  %264 = inttoptr i64 %263 to i64*
  %265 = load i64, i64* %264
  %266 = add i64 %256, 16
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  %269 = add i64 %256, 24
  %270 = inttoptr i64 %269 to i64*
  %271 = load i64, i64* %270
  %272 = add i64 %256, 32
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273
  %275 = add i64 %256, 40
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %256, 48
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %256, 56
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = add i64 %256, 64
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %256, 72
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = inttoptr i64 %257 to i64*
  %291 = load i64, i64* %290
  store i64 %256, i64* %8, align 8, !alias.scope !1388, !noalias !1391
  %292 = tail call i64 @fprintf(i64 %244, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4884), i64 %251, i64 %247, i64 %259, i64 %260, i64 %262, i64 %265, i64 %268, i64 %271, i64 %274, i64 %277, i64 %280, i64 %283, i64 %286, i64 %289), !noalias !1388
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4908), i64* %6, align 8, !tbaa !1240
  %293 = load i64, i64* %9, align 8
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %296, 4224
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %7, align 8, !tbaa !1240
  store i64 %296, i64* %4, align 8, !tbaa !1240
  %300 = add i64 %296, 556
  %301 = inttoptr i64 %300 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %5, align 8, !tbaa !1240
  %304 = add i64 %293, -28
  %305 = trunc i64 %292 to i32
  %306 = inttoptr i64 %304 to i32*
  store i32 %305, i32* %306
  %307 = add i64 %291, 41
  %308 = load i64, i64* %8, align 8, !tbaa !1240
  %309 = add i64 %308, -8
  %310 = inttoptr i64 %309 to i64*
  store i64 %307, i64* %310
  %311 = load i64, i64* %37, align 8, !alias.scope !1393, !noalias !1396
  %312 = load i64, i64* %38, align 8, !alias.scope !1393, !noalias !1396
  %313 = inttoptr i64 %308 to i64*
  %314 = load i64, i64* %313
  %315 = add i64 %308, 8
  %316 = inttoptr i64 %315 to i64*
  %317 = load i64, i64* %316
  %318 = add i64 %308, 16
  %319 = inttoptr i64 %318 to i64*
  %320 = load i64, i64* %319
  %321 = add i64 %308, 24
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322
  %324 = add i64 %308, 32
  %325 = inttoptr i64 %324 to i64*
  %326 = load i64, i64* %325
  %327 = add i64 %308, 40
  %328 = inttoptr i64 %327 to i64*
  %329 = load i64, i64* %328
  %330 = add i64 %308, 48
  %331 = inttoptr i64 %330 to i64*
  %332 = load i64, i64* %331
  %333 = add i64 %308, 56
  %334 = inttoptr i64 %333 to i64*
  %335 = load i64, i64* %334
  %336 = add i64 %308, 64
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337
  %339 = add i64 %308, 72
  %340 = inttoptr i64 %339 to i64*
  %341 = load i64, i64* %340
  store i64 %308, i64* %8, align 8, !alias.scope !1393, !noalias !1396
  %342 = tail call i64 @fprintf(i64 %299, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4908), i64 %303, i64 %296, i64 %311, i64 %312, i64 %314, i64 %317, i64 %320, i64 %323, i64 %326, i64 %329, i64 %332, i64 %335, i64 %338, i64 %341), !noalias !1393
  store i64 %342, i64* %36, align 8, !alias.scope !1393, !noalias !1396
  %343 = load i64, i64* %9, align 8
  %344 = add i64 %343, -32
  %345 = trunc i64 %342 to i32
  %346 = inttoptr i64 %344 to i32*
  store i32 %345, i32* %346
  %347 = load i64, i64* %8, align 8
  %348 = add i64 %347, 32
  %349 = icmp ugt i64 %347, -33
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %15, align 1, !tbaa !1264
  %351 = trunc i64 %348 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #10
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %16, align 1, !tbaa !1278
  %357 = xor i64 %348, %347
  %358 = lshr i64 %357, 4
  %359 = trunc i64 %358 to i8
  %360 = and i8 %359, 1
  store i8 %360, i8* %17, align 1, !tbaa !1279
  %361 = icmp eq i64 %348, 0
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %18, align 1, !tbaa !1280
  %363 = lshr i64 %348, 63
  %364 = trunc i64 %363 to i8
  store i8 %364, i8* %19, align 1, !tbaa !1281
  %365 = lshr i64 %347, 63
  %366 = xor i64 %363, %365
  %367 = add nuw nsw i64 %366, %363
  %368 = icmp eq i64 %367, 2
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %20, align 1, !tbaa !1282
  %370 = add i64 %347, 40
  %371 = inttoptr i64 %348 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %9, align 8, !tbaa !1240
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %3, align 8, !tbaa !1240
  %375 = add i64 %347, 48
  store i64 %375, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404210_ReadWholeInputData(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_404210:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -72
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -32
  %28 = load i64, i64* %9, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = add i64 %14, -36
  %31 = inttoptr i64 %30 to i32*
  store i32 0, i32* %31
  %32 = load i64, i64* %12, align 8
  %33 = add i64 %32, -44
  %34 = inttoptr i64 %33 to i32*
  store i32 0, i32* %34
  %35 = add i64 %32, -24
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %1, 48
  %39 = load i64, i64* %11, align 8, !tbaa !1240
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44
  store i64 %39, i64* %11, align 8, !alias.scope !1398, !noalias !1401
  %46 = tail call i64 @fseek(i64 %37, i64 0, i64 0), !noalias !1398
  store i64 %46, i64* %42, align 8, !alias.scope !1398, !noalias !1401
  %47 = load i64, i64* %12, align 8
  %48 = add i64 %47, -16
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %50, 540
  %52 = inttoptr i64 %51 to i32*
  %53 = load i32, i32* %52
  %54 = shl i32 %53, 3
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %56 = add i64 %50, 536
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57
  %59 = shl i32 %58, 2
  %60 = zext i32 %59 to i64
  store i64 %60, i64* %55, align 8, !tbaa !1240
  %61 = add i32 %59, %54
  %62 = load i64, i64* %12, align 8
  %63 = add i64 %62, -40
  %64 = inttoptr i64 %63 to i32*
  store i32 %61, i32* %64
  %65 = inttoptr i64 %63 to i32*
  %66 = load i32, i32* %65
  %67 = add i64 %62, -32
  %68 = inttoptr i64 %67 to i32*
  store i32 %66, i32* %68
  %69 = inttoptr i64 %67 to i32*
  %70 = load i32, i32* %69
  %71 = and i32 %70, 7
  %72 = icmp eq i32 %71, 0
  %73 = add i64 %62, -48
  %74 = load i32, i32* %5, align 4
  %75 = inttoptr i64 %73 to i32*
  store i32 %74, i32* %75
  %76 = select i1 %72, i64 67, i64 58
  %77 = add i64 %45, %76
  br i1 %72, label %block_404283, label %block_40427a

block_40427a:                                     ; preds = %block_404210
  %78 = inttoptr i64 %67 to i32*
  %79 = load i32, i32* %78
  %80 = add i32 %79, 4
  %81 = add i64 %77, 9
  %82 = inttoptr i64 %67 to i32*
  store i32 %80, i32* %82
  br label %block_404283

block_404316:                                     ; preds = %block_4042e4
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3648), i64* %9, align 8, !tbaa !1240
  %83 = load i64, i64* @stderr
  store i64 %83, i64* %10, align 8, !tbaa !1240
  %84 = add i64 %248, 25
  %85 = load i64, i64* %11, align 8, !tbaa !1240
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %90 = load i64, i64* %88, align 8, !alias.scope !1403, !noalias !1406
  %91 = load i64, i64* %89, align 8, !alias.scope !1403, !noalias !1406
  %92 = inttoptr i64 %85 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %85, 8
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %85, 16
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98
  %100 = add i64 %85, 24
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %85, 32
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104
  %106 = add i64 %85, 40
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107
  %109 = add i64 %85, 48
  %110 = inttoptr i64 %109 to i64*
  %111 = load i64, i64* %110
  %112 = add i64 %85, 56
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %85, 64
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %85, 72
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119
  store i64 %85, i64* %11, align 8, !alias.scope !1403, !noalias !1406
  %121 = tail call i64 @fprintf(i64 %83, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3648), i64 %238, i64 %234, i64 %90, i64 %91, i64 %93, i64 %96, i64 %99, i64 %102, i64 %105, i64 %108, i64 %111, i64 %114, i64 %117, i64 %120), !noalias !1403
  %122 = load i64, i64* %12, align 8
  %123 = add i64 %122, -4
  %124 = inttoptr i64 %123 to i32*
  store i32 2, i32* %124
  %125 = add i64 %122, -64
  %126 = trunc i64 %121 to i32
  %127 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %127
  br label %block_404345

block_4042cd:                                     ; preds = %block_40428c
  %128 = inttoptr i64 %261 to i32*
  %129 = load i32, i32* %128
  %130 = add i32 %129, 1
  %131 = inttoptr i64 %261 to i32*
  store i32 %130, i32* %131
  %132 = inttoptr i64 %262 to i32*
  %133 = load i32, i32* %132
  %134 = inttoptr i64 %263 to i32*
  %135 = load i32, i32* %134
  %136 = add i32 %135, %133
  %137 = inttoptr i64 %263 to i32*
  store i32 %136, i32* %137
  %138 = add i64 %210, -65
  br label %block_40428c

block_404345:                                     ; preds = %block_40433e, %block_404316
  %139 = phi i64 [ %231, %block_40433e ], [ %122, %block_404316 ]
  %140 = phi %struct.Memory* [ %176, %block_40433e ], [ %176, %block_404316 ]
  %141 = add i64 %139, -4
  %142 = inttoptr i64 %141 to i32*
  %143 = load i32, i32* %142
  %144 = zext i32 %143 to i64
  store i64 %144, i64* %6, align 8, !tbaa !1240
  %145 = load i64, i64* %11, align 8
  %146 = add i64 %145, 64
  %147 = icmp ugt i64 %145, -65
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %18, align 1, !tbaa !1264
  %149 = trunc i64 %146 to i32
  %150 = and i32 %149, 255
  %151 = tail call i32 @llvm.ctpop.i32(i32 %150) #10
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %19, align 1, !tbaa !1278
  %155 = xor i64 %146, %145
  %156 = lshr i64 %155, 4
  %157 = trunc i64 %156 to i8
  %158 = and i8 %157, 1
  store i8 %158, i8* %20, align 1, !tbaa !1279
  %159 = icmp eq i64 %146, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %21, align 1, !tbaa !1280
  %161 = lshr i64 %146, 63
  %162 = trunc i64 %161 to i8
  store i8 %162, i8* %22, align 1, !tbaa !1281
  %163 = lshr i64 %145, 63
  %164 = xor i64 %161, %163
  %165 = add nuw nsw i64 %164, %161
  %166 = icmp eq i64 %165, 2
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %23, align 1, !tbaa !1282
  %168 = add i64 %145, 72
  %169 = inttoptr i64 %146 to i64*
  %170 = load i64, i64* %169
  store i64 %170, i64* %12, align 8, !tbaa !1240
  %171 = inttoptr i64 %168 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %3, align 8, !tbaa !1240
  %173 = add i64 %145, 80
  store i64 %173, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %140

block_40428c:                                     ; preds = %block_404283, %block_4042cd
  %174 = phi i64 [ %62, %block_404283 ], [ %259, %block_4042cd ]
  %175 = phi i64 [ %257, %block_404283 ], [ %138, %block_4042cd ]
  %176 = phi %struct.Memory* [ %252, %block_404283 ], [ %176, %block_4042cd ]
  store i64 1, i64* %8, align 8, !tbaa !1240
  %177 = add i64 %174, -16
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %179, 608
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  %183 = add i64 %174, -44
  %184 = inttoptr i64 %183 to i32*
  %185 = load i32, i32* %184
  %186 = zext i32 %185 to i64
  %187 = shl nuw nsw i64 %186, 2
  %188 = add i64 %187, %182
  %189 = add i64 %174, -40
  %190 = inttoptr i64 %189 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  %193 = add i64 %174, -24
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %174, -56
  %197 = inttoptr i64 %196 to i64*
  store i64 %195, i64* %197
  %198 = inttoptr i64 %260 to i64*
  %199 = load i64, i64* %198
  %200 = add i64 %175, 55
  %201 = load i64, i64* %11, align 8, !tbaa !1240
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %200, i64* %203
  %204 = load i64, i64* %43, align 8, !alias.scope !1408, !noalias !1411
  %205 = inttoptr i64 %202 to i64*
  %206 = load i64, i64* %205
  store i64 %201, i64* %11, align 8, !alias.scope !1408, !noalias !1411
  %207 = tail call i64 @fread(i64 %188, i64 %192, i64 %204, i64 %199)
  %208 = icmp eq i64 %207, 0
  %209 = select i1 %208, i64 33, i64 10
  %210 = add i64 %206, %209
  br i1 %208, label %block_4042e4, label %block_4042cd

block_4042e4:                                     ; preds = %block_40428c
  %211 = and i64 %207, 4294967295
  store i64 %211, i64* %9, align 8, !tbaa !1240
  %212 = load i64, i64* %12, align 8
  %213 = add i64 %212, -28
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = add i64 %212, -16
  %217 = inttoptr i64 %216 to i64*
  %218 = load i64, i64* %217
  %219 = add i64 %218, 4488
  %220 = inttoptr i64 %219 to i32*
  store i32 %215, i32* %220
  %221 = add i64 %212, -24
  %222 = inttoptr i64 %221 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %10, align 8, !tbaa !1240
  %224 = add i64 %210, 28
  %225 = load i64, i64* %11, align 8, !tbaa !1240
  %226 = add i64 %225, -8
  %227 = inttoptr i64 %226 to i64*
  store i64 %224, i64* %227
  %228 = inttoptr i64 %226 to i64*
  %229 = load i64, i64* %228
  store i64 %225, i64* %11, align 8, !alias.scope !1413, !noalias !1416
  %230 = tail call i64 @fseek(i64 %223, i64 %211, i64 0), !noalias !1413
  %231 = load i64, i64* %12, align 8
  %232 = add i64 %231, -16
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %7, align 8, !tbaa !1240
  %235 = add i64 %234, 552
  %236 = inttoptr i64 %235 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %8, align 8, !tbaa !1240
  %239 = add i64 %231, -28
  %240 = inttoptr i64 %239 to i32*
  %241 = load i32, i32* %240
  %242 = sub i32 %237, %241
  %243 = icmp eq i32 %242, 0
  %244 = add i64 %231, -60
  %245 = trunc i64 %230 to i32
  %246 = inttoptr i64 %244 to i32*
  store i32 %245, i32* %246
  %247 = select i1 %243, i64 62, i64 22
  %248 = add i64 %229, %247
  br i1 %243, label %block_40433e, label %block_404316

block_40433e:                                     ; preds = %block_4042e4
  %249 = add i64 %231, -4
  %250 = inttoptr i64 %249 to i32*
  store i32 0, i32* %250
  br label %block_404345

block_404283:                                     ; preds = %block_40427a, %block_404210
  %251 = phi i64 [ %77, %block_404210 ], [ %81, %block_40427a ]
  %252 = phi %struct.Memory* [ %2, %block_404210 ], [ %2, %block_40427a ]
  %253 = inttoptr i64 %67 to i32*
  %254 = load i32, i32* %253
  %255 = lshr i32 %254, 2
  %256 = add i64 %62, -36
  %257 = add i64 %251, 9
  %258 = inttoptr i64 %256 to i32*
  store i32 %255, i32* %258
  %259 = load i64, i64* %12, align 8
  %260 = add i64 %259, -56
  %261 = add i64 %259, -28
  %262 = add i64 %259, -36
  %263 = add i64 %259, -44
  br label %block_40428c
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ba2_def_402B59(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402ba2:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = icmp eq i32 %15, 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = select i1 %19, i64 14, i64 354
  %24 = add i64 %23, %1
  %25 = load i64, i64* %13, align 8
  br i1 %19, label %block_402bb0, label %block_402ba2.block_402d04_crit_edge

block_402ba2.block_402d04_crit_edge:              ; preds = %block_402ba2
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402d04

block_402cff:                                     ; preds = %block_402c77
  %27 = add i64 %51, 5
  br label %block_402d04

block_402df9:                                     ; preds = %block_402d23
  %28 = add i64 %427, 7
  %29 = inttoptr i64 %409 to i32*
  store i32 0, i32* %29
  br label %block_402e00

block_402c77:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11, %block_402c54
  %30 = phi i64 [ %216, %block_402c54 ], [ %709, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11 ]
  %31 = phi i64 [ %210, %block_402c54 ], [ %699, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11 ]
  %32 = phi %struct.Memory* [ %231, %block_402c54 ], [ %640, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11 ]
  %33 = add i64 %31, -40
  %34 = inttoptr i64 %33 to i32*
  %35 = load i32, i32* %34
  %36 = add i64 %31, -8
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sub i32 %35, %38
  %40 = lshr i32 %39, 31
  %41 = trunc i32 %40 to i8
  %42 = lshr i32 %35, 31
  %43 = lshr i32 %38, 31
  %44 = xor i32 %43, %42
  %45 = xor i32 %40, %42
  %46 = add nuw nsw i32 %45, %44
  %47 = icmp eq i32 %46, 2
  %48 = icmp ne i8 %41, 0
  %49 = xor i1 %48, %47
  %50 = select i1 %49, i64 12, i64 136
  %51 = add i64 %30, %50
  br i1 %49, label %block_402c83, label %block_402cff

block_402bf8:                                     ; preds = %block_402bdb
  %52 = add i64 %144, ptrtoint (%adcgen_type* @adcgen to i64)
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %131, -60
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = sext i32 %57 to i64
  %59 = sext i32 %57 to i128
  %60 = and i128 %59, -18446744073709551616
  %61 = sext i64 %54 to i128
  %62 = and i128 %61, -18446744073709551616
  %63 = zext i64 %58 to i128
  %64 = or i128 %60, %63
  %65 = zext i64 %54 to i128
  %66 = or i128 %62, %65
  %67 = mul nsw i128 %66, %64
  %68 = trunc i128 %67 to i64
  %69 = sext i64 %68 to i128
  %70 = icmp ne i128 %69, %67
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %16, align 1, !tbaa !1264
  %72 = trunc i128 %67 to i32
  %73 = and i32 %72, 255
  %74 = tail call i32 @llvm.ctpop.i32(i32 %73) #10
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  store i8 %77, i8* %17, align 1, !tbaa !1278
  store i8 0, i8* %18, align 1, !tbaa !1279
  store i8 0, i8* %20, align 1, !tbaa !1280
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %21, align 1, !tbaa !1281
  store i8 %71, i8* %22, align 1, !tbaa !1282
  %80 = trunc i128 %67 to i32
  %81 = inttoptr i64 %55 to i32*
  store i32 %80, i32* %81
  %82 = inttoptr i64 %55 to i32*
  %83 = load i32, i32* %82
  %84 = sext i32 %83 to i64
  store i64 %84, i64* %7, align 8, !tbaa !1240
  %85 = inttoptr i64 %140 to i32*
  %86 = load i32, i32* %85
  %87 = sext i32 %86 to i64
  store i64 %87, i64* %8, align 8, !tbaa !1240
  %88 = ashr i64 %84, 63
  store i64 %88, i64* %542, align 8, !tbaa !1240
  %89 = shl nsw i64 %87, 3
  %90 = add i64 %89, ptrtoint (%adcprime_type* @adcprime to i64)
  %91 = add i64 %161, 43
  store i64 %91, i64* %3, align 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92
  %94 = sext i64 %93 to i128
  %95 = and i128 %94, -18446744073709551616
  %96 = zext i64 %88 to i128
  %97 = shl nuw i128 %96, 64
  %98 = zext i64 %84 to i128
  %99 = or i128 %97, %98
  %100 = zext i64 %93 to i128
  %101 = or i128 %95, %100
  %102 = sdiv i128 %99, %101
  %103 = trunc i128 %102 to i64
  %104 = and i128 %102, 18446744073709551615
  %105 = sext i64 %103 to i128
  %106 = and i128 %105, -18446744073709551616
  %107 = or i128 %106, %104
  %108 = icmp eq i128 %102, %107
  br i1 %108, label %114, label %109

; <label>:109:                                    ; preds = %block_402bf8
  %110 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %91, %struct.Memory* %132) #14
  %111 = load i32, i32* %6, align 4
  %112 = load i64, i64* %3, align 8
  %113 = load i64, i64* %13, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:114:                                    ; preds = %block_402bf8
  %115 = srem i128 %99, %101
  %116 = trunc i128 %115 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %114, %109
  %117 = phi i64 [ %113, %109 ], [ %131, %114 ]
  %118 = phi i64 [ %112, %109 ], [ %91, %114 ]
  %119 = phi i32 [ %111, %109 ], [ %116, %114 ]
  %120 = phi %struct.Memory* [ %110, %109 ], [ %132, %114 ]
  %121 = zext i32 %119 to i64
  store i64 %121, i64* %10, align 8, !tbaa !1240
  %122 = add i64 %117, -60
  %123 = inttoptr i64 %122 to i32*
  store i32 %119, i32* %123
  %124 = add i64 %117, -44
  %125 = inttoptr i64 %124 to i32*
  %126 = load i32, i32* %125
  %127 = add i32 %126, 1
  %128 = inttoptr i64 %124 to i32*
  store i32 %127, i32* %128
  %129 = add i64 %118, -72
  br label %block_402bdb

block_402bdb:                                     ; preds = %block_402bc3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %130 = phi i64 [ %227, %block_402bc3 ], [ %129, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %131 = phi i64 [ %230, %block_402bc3 ], [ %117, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %132 = phi %struct.Memory* [ %231, %block_402bc3 ], [ %120, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %133 = add i64 %131, -44
  %134 = inttoptr i64 %133 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  %137 = add i64 %131, -56
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %131, -40
  %141 = inttoptr i64 %140 to i32*
  %142 = load i32, i32* %141
  %143 = sext i32 %142 to i64
  store i64 %143, i64* %9, align 8, !tbaa !1240
  %144 = shl nsw i64 %143, 3
  %145 = add i64 %144, %139
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  %148 = add i64 %147, -1
  %149 = lshr i64 %148, 63
  %150 = sub i64 %136, %148
  %151 = lshr i64 %150, 63
  %152 = trunc i64 %151 to i8
  %153 = lshr i64 %136, 63
  %154 = xor i64 %149, %153
  %155 = xor i64 %151, %153
  %156 = add nuw nsw i64 %155, %154
  %157 = icmp eq i64 %156, 2
  %158 = icmp ne i8 %152, 0
  %159 = xor i1 %158, %157
  %160 = select i1 %159, i64 29, i64 91
  %161 = add i64 %130, %160
  br i1 %159, label %block_402bf8, label %block_402c36

block_402dd5:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10
  %162 = trunc i64 %386 to i32
  %163 = and i64 %386, 4294967295
  store i64 %163, i64* %8, align 8, !tbaa !1240
  %164 = add i64 %405, 17
  %165 = inttoptr i64 %387 to i32*
  store i32 %162, i32* %165
  br label %block_402de6

block_402c54:                                     ; preds = %block_402bb7
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64* %10, align 8, !tbaa !1240
  %166 = load i64, i64* @stdout
  store i64 %166, i64* %11, align 8, !tbaa !1240
  %167 = add i64 %250, 25
  %168 = load i64, i64* %12, align 8, !tbaa !1240
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %174 = load i64, i64* %542, align 8, !alias.scope !1418, !noalias !1421
  %175 = load i64, i64* %171, align 8, !alias.scope !1418, !noalias !1421
  %176 = load i64, i64* %14, align 8, !alias.scope !1418, !noalias !1421
  %177 = load i64, i64* %173, align 8, !alias.scope !1418, !noalias !1421
  %178 = inttoptr i64 %168 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %168, 8
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  %183 = add i64 %168, 16
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = add i64 %168, 24
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = add i64 %168, 32
  %190 = inttoptr i64 %189 to i64*
  %191 = load i64, i64* %190
  %192 = add i64 %168, 40
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193
  %195 = add i64 %168, 48
  %196 = inttoptr i64 %195 to i64*
  %197 = load i64, i64* %196
  %198 = add i64 %168, 56
  %199 = inttoptr i64 %198 to i64*
  %200 = load i64, i64* %199
  %201 = add i64 %168, 64
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  %204 = add i64 %168, 72
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  %207 = inttoptr i64 %169 to i64*
  %208 = load i64, i64* %207
  store i64 %208, i64* %3, align 8, !alias.scope !1418, !noalias !1421
  store i64 %168, i64* %12, align 8, !alias.scope !1418, !noalias !1421
  %209 = tail call i64 @fprintf(i64 %166, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64 %174, i64 %175, i64 %176, i64 %177, i64 %179, i64 %182, i64 %185, i64 %188, i64 %191, i64 %194, i64 %197, i64 %200, i64 %203, i64 %206), !noalias !1418
  %210 = load i64, i64* %13, align 8
  %211 = add i64 %210, -40
  %212 = load i64, i64* %3, align 8
  %213 = inttoptr i64 %211 to i32*
  store i32 0, i32* %213
  %214 = add i64 %210, -88
  %215 = trunc i64 %209 to i32
  %216 = add i64 %212, 10
  %217 = inttoptr i64 %214 to i32*
  store i32 %215, i32* %217
  br label %block_402c77

block_402bc3:                                     ; preds = %block_402bb7
  %218 = sext i32 %234 to i64
  %219 = shl nsw i64 %218, 3
  %220 = add i64 %219, ptrtoint (%adcgen_type* @adcgen to i64)
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = trunc i64 %222 to i32
  %224 = add i64 %230, -60
  %225 = inttoptr i64 %224 to i32*
  store i32 %223, i32* %225
  %226 = add i64 %230, -44
  %227 = add i64 %250, 24
  %228 = inttoptr i64 %226 to i32*
  store i32 0, i32* %228
  br label %block_402bdb

block_402bb7:                                     ; preds = %block_402bb0, %block_402c36
  %229 = phi i64 [ %540, %block_402bb0 ], [ %261, %block_402c36 ]
  %230 = phi i64 [ %25, %block_402bb0 ], [ %131, %block_402c36 ]
  %231 = phi %struct.Memory* [ %2, %block_402bb0 ], [ %132, %block_402c36 ]
  %232 = add i64 %230, -40
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = add i64 %230, -8
  %236 = inttoptr i64 %235 to i32*
  %237 = load i32, i32* %236
  %238 = sub i32 %234, %237
  %239 = lshr i32 %238, 31
  %240 = trunc i32 %239 to i8
  %241 = lshr i32 %234, 31
  %242 = lshr i32 %237, 31
  %243 = xor i32 %242, %241
  %244 = xor i32 %239, %241
  %245 = add nuw nsw i32 %244, %243
  %246 = icmp eq i32 %245, 2
  %247 = icmp ne i8 %240, 0
  %248 = xor i1 %247, %246
  %249 = select i1 %248, i64 12, i64 157
  %250 = add i64 %229, %249
  br i1 %248, label %block_402bc3, label %block_402c54

block_402c36:                                     ; preds = %block_402bdb
  %251 = add i64 %131, -60
  %252 = inttoptr i64 %251 to i32*
  %253 = load i32, i32* %252
  %254 = sext i32 %253 to i64
  store i64 %143, i64* %8, align 8, !tbaa !1240
  %255 = add i64 %144, ptrtoint (%adcgen_type* @adcgen to i64)
  %256 = inttoptr i64 %255 to i64*
  store i64 %254, i64* %256
  %257 = inttoptr i64 %140 to i32*
  %258 = load i32, i32* %257
  %259 = add i32 %258, 1
  %260 = inttoptr i64 %140 to i32*
  store i32 %259, i32* %260
  %261 = add i64 %161, -127
  br label %block_402bb7

block_402d2f:                                     ; preds = %block_402d23
  %262 = sext i32 %411 to i64
  %263 = shl nsw i64 %262, 3
  %264 = add i64 %263, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  %267 = add i64 %263, ptrtoint (%adcgen_type* @adcgen to i64)
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = sext i64 %266 to i128
  %271 = and i128 %270, -18446744073709551616
  %272 = sext i64 %269 to i128
  %273 = and i128 %272, -18446744073709551616
  %274 = zext i64 %266 to i128
  %275 = or i128 %271, %274
  %276 = zext i64 %269 to i128
  %277 = or i128 %273, %276
  %278 = mul nsw i128 %277, %275
  %279 = trunc i128 %278 to i64
  %280 = sext i64 %279 to i128
  %281 = icmp ne i128 %280, %278
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %16, align 1, !tbaa !1264
  %283 = trunc i128 %278 to i32
  %284 = and i32 %283, 255
  %285 = tail call i32 @llvm.ctpop.i32(i32 %284) #10
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = xor i8 %287, 1
  store i8 %288, i8* %17, align 1, !tbaa !1278
  store i8 0, i8* %18, align 1, !tbaa !1279
  store i8 0, i8* %20, align 1, !tbaa !1280
  %289 = lshr i64 %279, 63
  %290 = trunc i64 %289 to i8
  store i8 %290, i8* %21, align 1, !tbaa !1281
  store i8 %282, i8* %22, align 1, !tbaa !1282
  %291 = add i64 %407, -24
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %263, %293
  %295 = inttoptr i64 %294 to i64*
  store i64 %279, i64* %295
  %296 = inttoptr i64 %409 to i32*
  %297 = load i32, i32* %296
  %298 = sext i32 %297 to i64
  %299 = shl nsw i64 %298, 3
  %300 = add i64 %299, ptrtoint (%adcprime_type* @adcprime to i64)
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = inttoptr i64 %291 to i64*
  %304 = load i64, i64* %303
  %305 = add i64 %299, %304
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  %308 = add i64 %407, -104
  %309 = inttoptr i64 %308 to i64*
  store i64 %302, i64* %309
  store i64 %307, i64* %7, align 8, !tbaa !1240
  %310 = add i64 %407, -112
  %311 = inttoptr i64 %310 to i64*
  store i64 %298, i64* %311
  %312 = ashr i64 %307, 63
  store i64 %312, i64* %577, align 8, !tbaa !1240
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %8, align 8, !tbaa !1240
  %315 = shl i64 %314, 3
  %316 = add i64 %315, ptrtoint (%adcprime_type* @adcprime to i64)
  %317 = add i64 %427, 90
  store i64 %317, i64* %3, align 8
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318
  %320 = sext i64 %319 to i128
  %321 = and i128 %320, -18446744073709551616
  %322 = zext i64 %312 to i128
  %323 = shl nuw i128 %322, 64
  %324 = zext i64 %307 to i128
  %325 = or i128 %323, %324
  %326 = zext i64 %319 to i128
  %327 = or i128 %321, %326
  %328 = sdiv i128 %325, %327
  %329 = trunc i128 %328 to i64
  %330 = and i128 %328, 18446744073709551615
  %331 = sext i64 %329 to i128
  %332 = and i128 %331, -18446744073709551616
  %333 = or i128 %332, %330
  %334 = icmp eq i128 %328, %333
  br i1 %334, label %339, label %335

; <label>:335:                                    ; preds = %block_402d2f
  %336 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %317, %struct.Memory* %408) #14
  %337 = load i64, i64* %3, align 8
  %338 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10

; <label>:339:                                    ; preds = %block_402d2f
  %340 = srem i128 %325, %327
  %341 = trunc i128 %340 to i64
  store i64 %341, i64* %577, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10: ; preds = %339, %335
  %342 = phi i64 [ %338, %335 ], [ %329, %339 ]
  %343 = phi i64 [ %337, %335 ], [ %317, %339 ]
  %344 = phi %struct.Memory* [ %336, %335 ], [ %408, %339 ]
  %345 = load i64, i64* %13, align 8
  %346 = add i64 %345, -104
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = mul i64 %342, %348
  %350 = add i64 %345, -24
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %345, -40
  %354 = inttoptr i64 %353 to i32*
  %355 = load i32, i32* %354
  %356 = sext i32 %355 to i64
  store i64 %356, i64* %11, align 8, !tbaa !1240
  %357 = shl nsw i64 %356, 3
  %358 = add i64 %357, %352
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = sub i64 %360, %349
  store i64 %361, i64* %14, align 8, !tbaa !1240
  %362 = inttoptr i64 %358 to i64*
  store i64 %361, i64* %362
  %363 = inttoptr i64 %350 to i64*
  %364 = load i64, i64* %363
  %365 = inttoptr i64 %353 to i32*
  %366 = load i32, i32* %365
  %367 = sext i32 %366 to i64
  %368 = shl nsw i64 %367, 3
  %369 = add i64 %368, %364
  %370 = inttoptr i64 %369 to i64*
  %371 = load i64, i64* %370
  %372 = load i64, i64* %13, align 8
  %373 = add i64 %372, -40
  %374 = inttoptr i64 %373 to i32*
  %375 = load i32, i32* %374
  %376 = sext i32 %375 to i64
  %377 = shl nsw i64 %376, 3
  %378 = add i64 %377, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %379 = inttoptr i64 %378 to i64*
  store i64 %371, i64* %379
  %380 = inttoptr i64 %373 to i32*
  %381 = load i32, i32* %380
  %382 = sext i32 %381 to i64
  %383 = shl nsw i64 %382, 3
  %384 = add i64 %383, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %372, -48
  %388 = inttoptr i64 %387 to i32*
  %389 = load i32, i32* %388
  %390 = sext i32 %389 to i64
  store i64 %390, i64* %10, align 8, !tbaa !1240
  %391 = sub i64 %386, %390
  %392 = icmp eq i64 %391, 0
  %393 = lshr i64 %391, 63
  %394 = trunc i64 %393 to i8
  %395 = lshr i64 %386, 63
  %396 = lshr i64 %390, 63
  %397 = xor i64 %395, %396
  %398 = xor i64 %393, %395
  %399 = add nuw nsw i64 %398, %397
  %400 = icmp eq i64 %399, 2
  %401 = icmp ne i8 %394, 0
  %402 = xor i1 %401, %400
  %403 = or i1 %392, %402
  %404 = select i1 %403, i64 93, i64 76
  %405 = add i64 %343, %404
  br i1 %403, label %block_402de6, label %block_402dd5

block_402d23:                                     ; preds = %block_402d04, %block_402de6
  %406 = phi i64 [ %586, %block_402d04 ], [ %434, %block_402de6 ]
  %407 = phi i64 [ %578, %block_402d04 ], [ %372, %block_402de6 ]
  %408 = phi %struct.Memory* [ %580, %block_402d04 ], [ %429, %block_402de6 ]
  %409 = add i64 %407, -40
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410
  %412 = add i64 %407, -8
  %413 = inttoptr i64 %412 to i32*
  %414 = load i32, i32* %413
  %415 = sub i32 %411, %414
  %416 = lshr i32 %415, 31
  %417 = trunc i32 %416 to i8
  %418 = lshr i32 %411, 31
  %419 = lshr i32 %414, 31
  %420 = xor i32 %419, %418
  %421 = xor i32 %416, %418
  %422 = add nuw nsw i32 %421, %420
  %423 = icmp eq i32 %422, 2
  %424 = icmp ne i8 %417, 0
  %425 = xor i1 %424, %423
  %426 = select i1 %425, i64 12, i64 214
  %427 = add i64 %406, %426
  br i1 %425, label %block_402d2f, label %block_402df9

block_402de6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10, %block_402dd5
  %428 = phi i64 [ %405, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10 ], [ %164, %block_402dd5 ]
  %429 = phi %struct.Memory* [ %344, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10 ], [ %344, %block_402dd5 ]
  %430 = inttoptr i64 %373 to i32*
  %431 = load i32, i32* %430
  %432 = add i32 %431, 1
  %433 = inttoptr i64 %373 to i32*
  store i32 %432, i32* %433
  %434 = add i64 %428, -195
  br label %block_402d23

block_402e0c:                                     ; preds = %block_402e00
  %435 = sext i32 %715 to i64
  %436 = shl nsw i64 %435, 3
  %437 = add i64 %436, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %711, -48
  %441 = inttoptr i64 %440 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  %444 = sext i64 %439 to i128
  %445 = and i128 %444, -18446744073709551616
  %446 = sext i32 %442 to i128
  %447 = and i128 %446, -18446744073709551616
  %448 = zext i64 %439 to i128
  %449 = or i128 %445, %448
  %450 = zext i64 %443 to i128
  %451 = or i128 %447, %450
  %452 = mul nsw i128 %449, %451
  %453 = trunc i128 %452 to i64
  %454 = sext i64 %453 to i128
  %455 = icmp ne i128 %454, %452
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %16, align 1, !tbaa !1264
  %457 = trunc i128 %452 to i32
  %458 = and i32 %457, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #10
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %17, align 1, !tbaa !1278
  store i8 0, i8* %18, align 1, !tbaa !1279
  store i8 0, i8* %20, align 1, !tbaa !1280
  %463 = lshr i64 %453, 63
  %464 = trunc i64 %463 to i8
  store i8 %464, i8* %21, align 1, !tbaa !1281
  store i8 %456, i8* %22, align 1, !tbaa !1282
  %465 = add i64 %711, -32
  %466 = inttoptr i64 %465 to i64*
  %467 = load i64, i64* %466
  %468 = add i64 %436, %467
  %469 = inttoptr i64 %468 to i64*
  store i64 %453, i64* %469
  %470 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%adcgen_type* @adcgen to i64), i64 160) to i32*)
  %471 = sext i32 %470 to i64
  %472 = inttoptr i64 %465 to i64*
  %473 = load i64, i64* %472
  %474 = inttoptr i64 %713 to i32*
  %475 = load i32, i32* %474
  %476 = sext i32 %475 to i64
  %477 = shl nsw i64 %476, 3
  %478 = add i64 %477, %473
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479
  %481 = add i64 %711, -120
  %482 = inttoptr i64 %481 to i64*
  store i64 %471, i64* %482
  store i64 %480, i64* %7, align 8, !tbaa !1240
  %483 = add i64 %711, -128
  %484 = inttoptr i64 %483 to i64*
  store i64 %471, i64* %484
  %485 = ashr i64 %480, 63
  store i64 %485, i64* %577, align 8, !tbaa !1240
  %486 = inttoptr i64 %483 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %8, align 8, !tbaa !1240
  %488 = add i64 %731, 80
  store i64 %488, i64* %3, align 8
  %489 = sext i64 %487 to i128
  %490 = and i128 %489, -18446744073709551616
  %491 = zext i64 %485 to i128
  %492 = shl nuw i128 %491, 64
  %493 = zext i64 %480 to i128
  %494 = or i128 %492, %493
  %495 = zext i64 %487 to i128
  %496 = or i128 %490, %495
  %497 = sdiv i128 %494, %496
  %498 = trunc i128 %497 to i64
  %499 = and i128 %497, 18446744073709551615
  %500 = sext i64 %498 to i128
  %501 = and i128 %500, -18446744073709551616
  %502 = or i128 %501, %499
  %503 = icmp eq i128 %497, %502
  br i1 %503, label %508, label %504

; <label>:504:                                    ; preds = %block_402e0c
  %505 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %488, %struct.Memory* %712) #14
  %506 = load i64, i64* %3, align 8
  %507 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:508:                                    ; preds = %block_402e0c
  %509 = srem i128 %494, %496
  %510 = trunc i128 %509 to i64
  store i64 %510, i64* %577, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %508, %504
  %511 = phi i64 [ %507, %504 ], [ %498, %508 ]
  %512 = phi i64 [ %506, %504 ], [ %488, %508 ]
  %513 = phi %struct.Memory* [ %505, %504 ], [ %712, %508 ]
  %514 = load i64, i64* %13, align 8
  %515 = add i64 %514, -120
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = mul i64 %511, %517
  store i64 %518, i64* %10, align 8, !tbaa !1240
  %519 = add i64 %514, -32
  %520 = inttoptr i64 %519 to i64*
  %521 = load i64, i64* %520
  %522 = add i64 %514, -40
  %523 = inttoptr i64 %522 to i32*
  %524 = load i32, i32* %523
  %525 = sext i32 %524 to i64
  store i64 %525, i64* %11, align 8, !tbaa !1240
  %526 = shl nsw i64 %525, 3
  %527 = add i64 %526, %521
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = sub i64 %529, %518
  store i64 %530, i64* %14, align 8, !tbaa !1240
  %531 = inttoptr i64 %527 to i64*
  store i64 %530, i64* %531
  %532 = inttoptr i64 %522 to i32*
  %533 = load i32, i32* %532
  %534 = add i32 %533, 1
  %535 = load i64, i64* %13, align 8
  %536 = add i64 %535, -40
  %537 = inttoptr i64 %536 to i32*
  store i32 %534, i32* %537
  %538 = add i64 %512, -92
  br label %block_402e00

block_402bb0:                                     ; preds = %block_402ba2
  %539 = add i64 %25, -40
  %540 = add i64 %24, 7
  %541 = inttoptr i64 %539 to i32*
  store i32 0, i32* %541
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402bb7

block_402e85:                                     ; preds = %block_402e00
  %543 = add i64 %711, -4
  %544 = inttoptr i64 %543 to i32*
  store i32 1, i32* %544
  %545 = inttoptr i64 %543 to i32*
  %546 = load i32, i32* %545
  %547 = zext i32 %546 to i64
  store i64 %547, i64* %7, align 8, !tbaa !1240
  %548 = load i64, i64* %12, align 8
  %549 = add i64 %548, 128
  %550 = icmp ugt i64 %548, -129
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %16, align 1, !tbaa !1264
  %552 = trunc i64 %549 to i32
  %553 = and i32 %552, 255
  %554 = tail call i32 @llvm.ctpop.i32(i32 %553) #10
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  store i8 %557, i8* %17, align 1, !tbaa !1278
  %558 = xor i64 %549, %548
  %559 = lshr i64 %558, 4
  %560 = trunc i64 %559 to i8
  %561 = and i8 %560, 1
  store i8 %561, i8* %18, align 1, !tbaa !1279
  %562 = icmp eq i64 %549, 0
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %20, align 1, !tbaa !1280
  %564 = lshr i64 %549, 63
  %565 = trunc i64 %564 to i8
  store i8 %565, i8* %21, align 1, !tbaa !1281
  %566 = lshr i64 %548, 63
  %567 = xor i64 %564, %566
  %568 = add nuw nsw i64 %567, %564
  %569 = icmp eq i64 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %22, align 1, !tbaa !1282
  %571 = add i64 %548, 136
  %572 = inttoptr i64 %549 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %13, align 8, !tbaa !1240
  %574 = inttoptr i64 %571 to i64*
  %575 = load i64, i64* %574
  store i64 %575, i64* %3, align 8, !tbaa !1240
  %576 = add i64 %548, 144
  store i64 %576, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %712

block_402d04:                                     ; preds = %block_402cff, %block_402ba2.block_402d04_crit_edge
  %577 = phi i64* [ %26, %block_402ba2.block_402d04_crit_edge ], [ %542, %block_402cff ]
  %578 = phi i64 [ %25, %block_402ba2.block_402d04_crit_edge ], [ %31, %block_402cff ]
  %579 = phi i64 [ %24, %block_402ba2.block_402d04_crit_edge ], [ %27, %block_402cff ]
  %580 = phi %struct.Memory* [ %2, %block_402ba2.block_402d04_crit_edge ], [ %32, %block_402cff ]
  %581 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %582 = add i32 %581, 1
  store i32 %582, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %583 = add i64 %578, -48
  %584 = inttoptr i64 %583 to i32*
  store i32 0, i32* %584
  %585 = add i64 %578, -40
  %586 = add i64 %579, 31
  %587 = inttoptr i64 %585 to i32*
  store i32 0, i32* %587
  br label %block_402d23

block_402c83:                                     ; preds = %block_402c77
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), i64* %10, align 8, !tbaa !1240
  store i64 2, i64* %8, align 8, !tbaa !1240
  %588 = sext i32 %35 to i64
  %589 = shl nsw i64 %588, 3
  %590 = add i64 %589, ptrtoint (%adcprime_type* @adcprime to i64)
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %592, 1
  %594 = icmp eq i64 %592, -1
  %595 = icmp eq i64 %593, 0
  %596 = or i1 %594, %595
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %16, align 1, !tbaa !1264
  %598 = trunc i64 %593 to i32
  %599 = and i32 %598, 255
  %600 = tail call i32 @llvm.ctpop.i32(i32 %599) #10
  %601 = trunc i32 %600 to i8
  %602 = and i8 %601, 1
  %603 = xor i8 %602, 1
  store i8 %603, i8* %17, align 1, !tbaa !1278
  %604 = xor i64 %593, %592
  %605 = lshr i64 %604, 4
  %606 = trunc i64 %605 to i8
  %607 = and i8 %606, 1
  store i8 %607, i8* %18, align 1, !tbaa !1279
  %608 = zext i1 %595 to i8
  store i8 %608, i8* %20, align 1, !tbaa !1280
  %609 = lshr i64 %593, 63
  %610 = trunc i64 %609 to i8
  store i8 %610, i8* %21, align 1, !tbaa !1281
  %611 = lshr i64 %592, 63
  %612 = xor i64 %609, %611
  %613 = add nuw nsw i64 %612, %609
  %614 = icmp eq i64 %613, 2
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %22, align 1, !tbaa !1282
  store i64 %593, i64* %7, align 8, !tbaa !1240
  %616 = ashr i64 %593, 63
  store i64 %616, i64* %542, align 8, !tbaa !1240
  %617 = add i64 %51, 41
  store i64 %617, i64* %3, align 8
  %618 = zext i64 %616 to i128
  %619 = shl nuw i128 %618, 64
  %620 = zext i64 %593 to i128
  %621 = or i128 %619, %620
  %622 = sdiv i128 %621, 2
  %623 = trunc i128 %622 to i64
  %624 = and i128 %622, 18446744073709551615
  %625 = sext i64 %623 to i128
  %626 = and i128 %625, -18446744073709551616
  %627 = or i128 %626, %624
  %628 = icmp eq i128 %622, %627
  br i1 %628, label %635, label %629

; <label>:629:                                    ; preds = %block_402c83
  %630 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %617, %struct.Memory* %32) #14
  %631 = load i64, i64* %13, align 8
  %632 = load i64, i64* %3, align 8
  %633 = load i64, i64* %7, align 8
  %634 = load i64, i64* %172, align 8, !alias.scope !1423, !noalias !1426
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11

; <label>:635:                                    ; preds = %block_402c83
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11: ; preds = %635, %629
  %636 = phi i64 [ %634, %629 ], [ add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), %635 ]
  %637 = phi i64 [ %633, %629 ], [ %623, %635 ]
  %638 = phi i64 [ %632, %629 ], [ %617, %635 ]
  %639 = phi i64 [ %631, %629 ], [ %31, %635 ]
  %640 = phi %struct.Memory* [ %630, %629 ], [ %32, %635 ]
  %641 = add i64 %639, -40
  %642 = inttoptr i64 %641 to i32*
  %643 = load i32, i32* %642
  %644 = sext i32 %643 to i64
  %645 = shl nsw i64 %644, 3
  %646 = add i64 %645, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %647 = inttoptr i64 %646 to i64*
  store i64 %637, i64* %647
  %648 = load i64, i64* @stdout
  store i64 %648, i64* %11, align 8, !tbaa !1240
  %649 = inttoptr i64 %641 to i32*
  %650 = load i32, i32* %649
  %651 = sext i32 %650 to i64
  %652 = shl nsw i64 %651, 3
  %653 = add i64 %652, ptrtoint (%adcprime_type* @adcprime to i64)
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %652, ptrtoint (%adcgen_type* @adcgen to i64)
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %8, align 8, !tbaa !1240
  %659 = add i64 %652, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  store i64 %661, i64* %14, align 8, !tbaa !1240
  store i64 %655, i64* %9, align 8, !tbaa !1240
  %662 = add i64 %638, 66
  %663 = load i64, i64* %12, align 8, !tbaa !1240
  %664 = add i64 %663, -8
  %665 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %665
  %666 = load i64, i64* %173, align 8, !alias.scope !1423, !noalias !1426
  %667 = inttoptr i64 %663 to i64*
  %668 = load i64, i64* %667
  %669 = add i64 %663, 8
  %670 = inttoptr i64 %669 to i64*
  %671 = load i64, i64* %670
  %672 = add i64 %663, 16
  %673 = inttoptr i64 %672 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %663, 24
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %663, 32
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %663, 40
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %663, 48
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %663, 56
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %663, 64
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %663, 72
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = inttoptr i64 %664 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %3, align 8, !alias.scope !1423, !noalias !1426
  store i64 %663, i64* %12, align 8, !alias.scope !1423, !noalias !1426
  %698 = tail call i64 @fprintf(i64 %648, i64 %636, i64 %655, i64 %658, i64 %661, i64 %666, i64 %668, i64 %671, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695), !noalias !1423
  %699 = load i64, i64* %13, align 8
  %700 = add i64 %699, -92
  %701 = trunc i64 %698 to i32
  %702 = load i64, i64* %3, align 8
  %703 = inttoptr i64 %700 to i32*
  store i32 %701, i32* %703
  %704 = add i64 %699, -40
  %705 = inttoptr i64 %704 to i32*
  %706 = load i32, i32* %705
  %707 = add i32 %706, 1
  %708 = inttoptr i64 %704 to i32*
  store i32 %707, i32* %708
  %709 = add i64 %702, -119
  br label %block_402c77

block_402e00:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402df9
  %710 = phi i64 [ %28, %block_402df9 ], [ %538, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %711 = phi i64 [ %407, %block_402df9 ], [ %535, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %712 = phi %struct.Memory* [ %408, %block_402df9 ], [ %513, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %713 = add i64 %711, -40
  %714 = inttoptr i64 %713 to i32*
  %715 = load i32, i32* %714
  %716 = add i64 %711, -12
  %717 = inttoptr i64 %716 to i32*
  %718 = load i32, i32* %717
  %719 = sub i32 %715, %718
  %720 = lshr i32 %719, 31
  %721 = trunc i32 %720 to i8
  %722 = lshr i32 %715, 31
  %723 = lshr i32 %718, 31
  %724 = xor i32 %723, %722
  %725 = xor i32 %720, %722
  %726 = add nuw nsw i32 %725, %724
  %727 = icmp eq i32 %726, 2
  %728 = icmp ne i8 %721, 0
  %729 = xor i1 %728, %727
  %730 = select i1 %729, i64 12, i64 133
  %731 = add i64 %710, %730
  br i1 %729, label %block_402e0c, label %block_402e85
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409940_onessort(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409940:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -40
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -16
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -20
  %27 = load i32, i32* %5, align 4
  %28 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %28
  %29 = inttoptr i64 %26 to i32*
  %30 = load i32, i32* %29
  %31 = lshr i32 %30, 1
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %8, align 8, !tbaa !1240
  %33 = add i64 %13, -24
  %34 = add i64 %1, 24
  %35 = inttoptr i64 %33 to i32*
  store i32 %31, i32* %35
  br label %block_409958

block_40997f:                                     ; preds = %block_409958
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %37 = add i64 %44, -12
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %6, align 8, !tbaa !1240
  %41 = add i64 %59, 6
  %42 = inttoptr i64 %46 to i32*
  store i32 %39, i32* %42
  br label %block_409985

block_409958:                                     ; preds = %block_409962, %block_409940
  %43 = phi i64 [ %34, %block_409940 ], [ %222, %block_409962 ]
  %44 = phi i64 [ %14, %block_409940 ], [ %215, %block_409962 ]
  %45 = phi %struct.Memory* [ %2, %block_409940 ], [ %214, %block_409962 ]
  %46 = add i64 %44, -16
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47
  %49 = add i32 %48, -1
  %50 = lshr i32 %49, 31
  %51 = trunc i32 %50 to i8
  %52 = lshr i32 %48, 31
  %53 = xor i32 %50, %52
  %54 = add nuw nsw i32 %53, %52
  %55 = icmp eq i32 %54, 2
  %56 = icmp ne i8 %51, 0
  %57 = xor i1 %56, %55
  %58 = select i1 %57, i64 39, i64 10
  %59 = add i64 %43, %58
  br i1 %57, label %block_40997f, label %block_409962

block_40998f:                                     ; preds = %block_409985
  store i64 1, i64* %8, align 8, !tbaa !1240
  %60 = add i32 %189, -1
  %61 = add i64 %185, -20
  %62 = inttoptr i64 %61 to i32*
  store i32 %60, i32* %62
  %63 = add i64 %185, -8
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = inttoptr i64 %65 to i32*
  %67 = load i32, i32* %66
  %68 = add i64 %185, -24
  %69 = inttoptr i64 %68 to i32*
  store i32 %67, i32* %69
  %70 = inttoptr i64 %63 to i64*
  %71 = load i64, i64* %70
  %72 = inttoptr i64 %61 to i32*
  %73 = load i32, i32* %72
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 4
  %76 = add i64 %75, %71
  %77 = inttoptr i64 %76 to i32*
  %78 = load i32, i32* %77
  %79 = load i64, i64* %11, align 8
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = inttoptr i64 %82 to i32*
  store i32 %78, i32* %83
  %84 = add i64 %79, -24
  %85 = inttoptr i64 %84 to i32*
  %86 = load i32, i32* %85
  %87 = inttoptr i64 %80 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %79, -20
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = add i64 %93, %88
  %95 = inttoptr i64 %94 to i32*
  store i32 %86, i32* %95
  %96 = inttoptr i64 %80 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %79, -32
  %102 = inttoptr i64 %101 to i64*
  store i64 %100, i64* %102
  %103 = inttoptr i64 %80 to i64*
  %104 = load i64, i64* %103
  %105 = load i64, i64* %11, align 8
  %106 = add i64 %105, -20
  %107 = inttoptr i64 %106 to i32*
  %108 = load i32, i32* %107
  %109 = sext i32 %108 to i64
  %110 = shl nsw i64 %109, 4
  %111 = add i64 %110, %104
  %112 = add i64 %111, 8
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %105, -8
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %117, 8
  %119 = inttoptr i64 %118 to i64*
  store i64 %114, i64* %119
  %120 = add i64 %105, -32
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %36, align 8, !tbaa !1240
  %123 = inttoptr i64 %115 to i64*
  %124 = load i64, i64* %123
  %125 = inttoptr i64 %106 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = shl nsw i64 %127, 4
  %129 = add i64 %128, %124
  %130 = add i64 %129, 8
  %131 = inttoptr i64 %130 to i64*
  store i64 %122, i64* %131
  %132 = load i64, i64* %11, align 8
  %133 = add i64 %132, -8
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %9, align 8, !tbaa !1240
  %136 = add i64 %132, -20
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %7, align 8, !tbaa !1240
  %140 = add i64 %200, -463
  %141 = add i64 %200, 140
  %142 = load i64, i64* %10, align 8, !tbaa !1240
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 %141, i64* %144
  store i64 %143, i64* %10, align 8, !tbaa !1240
  %145 = tail call %struct.Memory* @sub_4097c0_restoreo(%struct.State* nonnull %0, i64 %140, %struct.Memory* %186)
  %146 = load i64, i64* %11, align 8
  %147 = add i64 %146, -16
  %148 = load i64, i64* %3, align 8
  %149 = inttoptr i64 %147 to i32*
  %150 = load i32, i32* %149
  %151 = add i32 %150, -1
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %6, align 8, !tbaa !1240
  %153 = inttoptr i64 %147 to i32*
  store i32 %151, i32* %153
  %154 = add i64 %148, -150
  br label %block_409985

block_409a29:                                     ; preds = %block_409985
  %155 = load i64, i64* %10, align 8
  %156 = add i64 %155, 32
  %157 = icmp ugt i64 %155, -33
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %17, align 1, !tbaa !1264
  %159 = trunc i64 %156 to i32
  %160 = and i32 %159, 255
  %161 = tail call i32 @llvm.ctpop.i32(i32 %160) #10
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  %164 = xor i8 %163, 1
  store i8 %164, i8* %18, align 1, !tbaa !1278
  %165 = xor i64 %156, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %19, align 1, !tbaa !1279
  %169 = icmp eq i64 %156, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %20, align 1, !tbaa !1280
  %171 = lshr i64 %156, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %21, align 1, !tbaa !1281
  %173 = lshr i64 %155, 63
  %174 = xor i64 %171, %173
  %175 = add nuw nsw i64 %174, %171
  %176 = icmp eq i64 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %22, align 1, !tbaa !1282
  %178 = add i64 %155, 40
  %179 = inttoptr i64 %156 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %11, align 8, !tbaa !1240
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %3, align 8, !tbaa !1240
  %183 = add i64 %155, 48
  store i64 %183, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %186

block_409985:                                     ; preds = %block_40998f, %block_40997f
  %184 = phi i64 [ %41, %block_40997f ], [ %154, %block_40998f ]
  %185 = phi i64 [ %44, %block_40997f ], [ %146, %block_40998f ]
  %186 = phi %struct.Memory* [ %45, %block_40997f ], [ %145, %block_40998f ]
  %187 = add i64 %185, -16
  %188 = inttoptr i64 %187 to i32*
  %189 = load i32, i32* %188
  %190 = add i32 %189, -2
  %191 = lshr i32 %190, 31
  %192 = trunc i32 %191 to i8
  %193 = lshr i32 %189, 31
  %194 = xor i32 %191, %193
  %195 = add nuw nsw i32 %194, %193
  %196 = icmp eq i32 %195, 2
  %197 = icmp ne i8 %192, 0
  %198 = xor i1 %197, %196
  %199 = select i1 %198, i64 164, i64 10
  %200 = add i64 %184, %199
  br i1 %198, label %block_409a29, label %block_40998f

block_409962:                                     ; preds = %block_409958
  %201 = add i64 %44, -8
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %9, align 8, !tbaa !1240
  %204 = zext i32 %48 to i64
  store i64 %204, i64* %8, align 8, !tbaa !1240
  %205 = add i64 %44, -12
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %7, align 8, !tbaa !1240
  %209 = add i64 %59, -418
  %210 = add i64 %59, 15
  %211 = load i64, i64* %10, align 8, !tbaa !1240
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213
  store i64 %212, i64* %10, align 8, !tbaa !1240
  %214 = tail call %struct.Memory* @sub_4097c0_restoreo(%struct.State* nonnull %0, i64 %209, %struct.Memory* %45)
  %215 = load i64, i64* %11, align 8
  %216 = add i64 %215, -16
  %217 = load i64, i64* %3, align 8
  %218 = inttoptr i64 %216 to i32*
  %219 = load i32, i32* %218
  %220 = add i32 %219, -1
  %221 = inttoptr i64 %216 to i32*
  store i32 %220, i32* %221
  %222 = add i64 %217, -25
  br label %block_409958
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408300_setLeadingOnes32(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408300:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  %13 = add i64 %10, -12
  %14 = load i32, i32* %5, align 4
  %15 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %15
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i32*
  store i32 -2147483648, i32* %17
  %18 = add i64 %10, -20
  %19 = inttoptr i64 %18 to i32*
  store i32 0, i32* %19
  %20 = add i64 %10, -24
  %21 = inttoptr i64 %20 to i32*
  store i32 0, i32* %21
  %22 = add i64 %10, -12
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = add i64 %10, -16
  %27 = add i64 %10, -20
  br label %block_40831c

block_408348:                                     ; preds = %block_40831c
  %28 = sub i32 %80, %82
  %29 = lshr i32 %28, 31
  %30 = lshr i32 %80, 31
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %34 = and i32 %28, 255
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #10
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  %39 = xor i32 %82, %80
  %40 = xor i32 %39, %28
  %41 = lshr i32 %40, 4
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = icmp eq i32 %28, 0
  %45 = zext i1 %44 to i8
  %46 = trunc i32 %29 to i8
  %47 = xor i32 %29, %30
  %48 = lshr i32 %82, 31
  %49 = xor i32 %48, %30
  %50 = add nuw nsw i32 %47, %49
  %51 = icmp eq i32 %50, 2
  %52 = zext i1 %51 to i8
  store i8 0, i8* %23, align 1, !tbaa !1428
  store i8 %38, i8* %31, align 1, !tbaa !1428
  store i8 %43, i8* %24, align 1, !tbaa !1428
  store i8 %45, i8* %32, align 1, !tbaa !1428
  store i8 %46, i8* %25, align 1, !tbaa !1428
  store i8 %52, i8* %33, align 1, !tbaa !1428
  %53 = inttoptr i64 %27 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %6, align 8, !tbaa !1240
  %56 = inttoptr i64 %11 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %8, align 8, !tbaa !1240
  %58 = inttoptr i64 %10 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %3, align 8, !tbaa !1240
  %60 = add i64 %10, 8
  store i64 %60, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %78

block_408328:                                     ; preds = %block_40831c
  %61 = inttoptr i64 %26 to i32*
  %62 = load i32, i32* %61
  %63 = inttoptr i64 %27 to i32*
  %64 = load i32, i32* %63
  %65 = or i32 %64, %62
  %66 = inttoptr i64 %27 to i32*
  store i32 %65, i32* %66
  %67 = inttoptr i64 %26 to i32*
  %68 = load i32, i32* %67
  %69 = zext i32 %68 to i64
  %70 = shl nuw i64 %69, 32
  %71 = ashr i64 %70, 33
  %72 = trunc i64 %71 to i32
  %73 = inttoptr i64 %26 to i32*
  store i32 %72, i32* %73
  %74 = inttoptr i64 %20 to i32*
  %75 = load i32, i32* %74
  %76 = add i32 %75, 1
  %77 = inttoptr i64 %20 to i32*
  store i32 %76, i32* %77
  br label %block_40831c

block_40831c:                                     ; preds = %block_408328, %block_408300
  %78 = phi %struct.Memory* [ %2, %block_408300 ], [ %78, %block_408328 ]
  %79 = inttoptr i64 %20 to i32*
  %80 = load i32, i32* %79
  %81 = inttoptr i64 %22 to i32*
  %82 = load i32, i32* %81
  %83 = icmp ult i32 %80, %82
  br i1 %83, label %block_408328, label %block_408348
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4041b4(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4041b4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -16
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  %12 = load i64, i64* bitcast (%checksumBlo_type* @checksumBlo to i64*)
  %13 = load i64, i64* bitcast (%checksumBhi_type* @checksumBhi to i64*)
  %14 = mul i64 %13, 1000000
  store i64 %14, i64* %6, align 8, !tbaa !1240
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %14, %12
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %22 = lshr i64 %21, 63
  %23 = sub i64 %11, %21
  %24 = icmp ult i64 %11, %21
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %15, align 1, !tbaa !1264
  %26 = trunc i64 %23 to i32
  %27 = and i32 %26, 255
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #10
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %16, align 1, !tbaa !1278
  %32 = xor i64 %21, %11
  %33 = xor i64 %32, %23
  %34 = lshr i64 %33, 4
  %35 = trunc i64 %34 to i8
  %36 = and i8 %35, 1
  store i8 %36, i8* %17, align 1, !tbaa !1279
  %37 = icmp eq i64 %23, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %18, align 1, !tbaa !1280
  %39 = lshr i64 %23, 63
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %19, align 1, !tbaa !1281
  %41 = lshr i64 %11, 63
  %42 = xor i64 %22, %41
  %43 = xor i64 %39, %41
  %44 = add nuw nsw i64 %43, %42
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %20, align 1, !tbaa !1282
  %47 = load i64, i64* %7, align 8
  %48 = add i64 %47, -4
  br i1 %37, label %block_4041d8, label %block_4041e4

block_4041fc:                                     ; preds = %block_4041e4, %block_4041d8
  %49 = phi %struct.Memory* [ %2, %block_4041e4 ], [ %2, %block_4041d8 ]
  %50 = add i64 %47, -4
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %4, align 8, !tbaa !1240
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !1240
  %56 = add i64 %55, 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %7, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %55, 16
  store i64 %61, i64* %54, align 8, !tbaa !1240
  ret %struct.Memory* %49

block_4041d8:                                     ; preds = %block_4041b4
  %62 = inttoptr i64 %48 to i32*
  store i32 0, i32* %62
  br label %block_4041fc

block_4041e4:                                     ; preds = %block_4041b4
  %63 = inttoptr i64 %48 to i32*
  store i32 1, i32* %63
  br label %block_4041fc
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4082a0_mro32(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4082a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  %13 = add i64 %10, -12
  %14 = load i32, i32* %5, align 4
  %15 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %15
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i32*
  store i32 1, i32* %17
  %18 = add i64 %10, -24
  %19 = inttoptr i64 %18 to i32*
  store i32 32, i32* %19
  %20 = add i64 %10, -20
  %21 = add i64 %1, 28
  %22 = inttoptr i64 %20 to i32*
  store i32 0, i32* %22
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = add i64 %10, -16
  %30 = add i64 %10, -12
  %31 = add i64 %10, -24
  br label %block_4082bc

block_4082fa.loopexit:                            ; preds = %block_4082bc
  %32 = add i32 %62, -32
  %33 = lshr i32 %32, 31
  %34 = lshr i32 %62, 31
  %35 = and i32 %32, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #10
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  %40 = xor i32 %32, %62
  %41 = lshr i32 %40, 4
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = icmp eq i32 %32, 0
  %45 = zext i1 %44 to i8
  %46 = trunc i32 %33 to i8
  %47 = xor i32 %33, %34
  %48 = add nuw nsw i32 %47, %34
  %49 = icmp eq i32 %48, 2
  %50 = zext i1 %49 to i8
  store i8 0, i8* %23, align 1, !tbaa !1428
  store i8 %39, i8* %24, align 1, !tbaa !1428
  store i8 %43, i8* %25, align 1, !tbaa !1428
  store i8 %45, i8* %26, align 1, !tbaa !1428
  store i8 %46, i8* %27, align 1, !tbaa !1428
  store i8 %50, i8* %28, align 1, !tbaa !1428
  br label %block_4082fa

block_4082fa:                                     ; preds = %block_4082d5, %block_4082fa.loopexit
  %51 = inttoptr i64 %31 to i32*
  %52 = load i32, i32* %51
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %6, align 8, !tbaa !1240
  %54 = inttoptr i64 %11 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %8, align 8, !tbaa !1240
  %56 = inttoptr i64 %10 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %3, align 8, !tbaa !1240
  %58 = add i64 %10, 8
  store i64 %58, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %60

block_4082bc:                                     ; preds = %block_4082da, %block_4082a0
  %59 = phi i64 [ %21, %block_4082a0 ], [ %76, %block_4082da ]
  %60 = phi %struct.Memory* [ %2, %block_4082a0 ], [ %60, %block_4082da ]
  %61 = inttoptr i64 %20 to i32*
  %62 = load i32, i32* %61
  %63 = icmp ult i32 %62, 32
  %64 = select i1 %63, i64 10, i64 62
  %65 = add i64 %59, %64
  br i1 %63, label %block_4082c6, label %block_4082fa.loopexit

block_4082da:                                     ; preds = %block_4082c6
  %66 = shl i32 %85, 1
  %67 = inttoptr i64 %29 to i32*
  store i32 %66, i32* %67
  %68 = inttoptr i64 %31 to i32*
  %69 = load i32, i32* %68
  %70 = add i32 %69, -1
  %71 = inttoptr i64 %31 to i32*
  store i32 %70, i32* %71
  %72 = inttoptr i64 %20 to i32*
  %73 = load i32, i32* %72
  %74 = add i32 %73, 1
  %75 = inttoptr i64 %20 to i32*
  store i32 %74, i32* %75
  %76 = add i64 %91, -30
  br label %block_4082bc

block_4082d5:                                     ; preds = %block_4082c6
  %77 = and i32 %88, 255
  %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #10
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = lshr i32 %88, 31
  %83 = trunc i32 %82 to i8
  store i8 0, i8* %23, align 1, !tbaa !1428
  store i8 %81, i8* %24, align 1, !tbaa !1428
  store i8 0, i8* %25, align 1, !tbaa !1428
  store i8 0, i8* %26, align 1, !tbaa !1428
  store i8 %83, i8* %27, align 1, !tbaa !1428
  store i8 0, i8* %28, align 1, !tbaa !1428
  br label %block_4082fa

block_4082c6:                                     ; preds = %block_4082bc
  %84 = inttoptr i64 %29 to i32*
  %85 = load i32, i32* %84
  %86 = inttoptr i64 %30 to i32*
  %87 = load i32, i32* %86
  %88 = and i32 %87, %85
  %89 = icmp eq i32 %88, 0
  %90 = select i1 %89, i64 20, i64 15
  %91 = add i64 %65, %90
  br i1 %89, label %block_4082da, label %block_4082d5
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400db0__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
block_400db0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409380_CreateBinTuple(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409380:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -40
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -16
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -24
  %27 = load i64, i64* %8, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %13, -28
  %30 = load i32, i32* %5, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = inttoptr i64 %23 to i64*
  %33 = load i64, i64* %32
  store i64 %33, i64* %8, align 8, !tbaa !1240
  %34 = inttoptr i64 %33 to i64*
  store i64 0, i64* %34
  %35 = add i64 %13, -32
  %36 = add i64 %1, 37
  %37 = inttoptr i64 %35 to i32*
  store i32 0, i32* %37
  br label %block_4093a5

block_4093d9:                                     ; preds = %block_4093a5
  %38 = load i64, i64* %10, align 8
  %39 = add i64 %38, 32
  %40 = icmp ugt i64 %38, -33
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %17, align 1, !tbaa !1264
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #10
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %18, align 1, !tbaa !1278
  %48 = xor i64 %39, %38
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  store i8 %51, i8* %19, align 1, !tbaa !1279
  %52 = icmp eq i64 %39, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %20, align 1, !tbaa !1280
  %54 = lshr i64 %39, 63
  %55 = trunc i64 %54 to i8
  store i8 %55, i8* %21, align 1, !tbaa !1281
  %56 = lshr i64 %38, 63
  %57 = xor i64 %54, %56
  %58 = add nuw nsw i64 %57, %54
  %59 = icmp eq i64 %58, 2
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %22, align 1, !tbaa !1282
  %61 = add i64 %38, 40
  %62 = inttoptr i64 %39 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %11, align 8, !tbaa !1240
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %3, align 8, !tbaa !1240
  %66 = add i64 %38, 48
  store i64 %66, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %69

block_4093a5:                                     ; preds = %block_4093b1, %block_409380
  %67 = phi i64 [ %36, %block_409380 ], [ %105, %block_4093b1 ]
  %68 = phi i64 [ %14, %block_409380 ], [ %98, %block_4093b1 ]
  %69 = phi %struct.Memory* [ %2, %block_409380 ], [ %97, %block_4093b1 ]
  %70 = add i64 %68, -24
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %6, align 8, !tbaa !1240
  %74 = add i64 %68, -20
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = icmp ult i32 %72, %76
  %78 = select i1 %77, i64 12, i64 52
  %79 = add i64 %67, %78
  br i1 %77, label %block_4093b1, label %block_4093d9

block_4093b1:                                     ; preds = %block_4093a5
  %80 = add i64 %68, -8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %9, align 8, !tbaa !1240
  %83 = add i64 %68, -16
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  store i64 %73, i64* %7, align 8, !tbaa !1240
  %86 = shl nuw nsw i64 %73, 2
  %87 = add i64 %85, %86
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  %90 = add i32 %89, -1
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %8, align 8, !tbaa !1240
  %92 = add i64 %79, -4577
  %93 = add i64 %79, 26
  %94 = load i64, i64* %10, align 8, !tbaa !1240
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %93, i64* %96
  store i64 %95, i64* %10, align 8, !tbaa !1240
  %97 = tail call %struct.Memory* @sub_4081d0_SetOneBit(%struct.State* nonnull %0, i64 %92, %struct.Memory* %69)
  %98 = load i64, i64* %11, align 8
  %99 = add i64 %98, -24
  %100 = load i64, i64* %3, align 8
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101
  %103 = add i32 %102, 1
  %104 = inttoptr i64 %99 to i32*
  store i32 %103, i32* %104
  %105 = add i64 %100, -38
  br label %block_4093a5
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400df0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400df0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64* %4, align 8, !tbaa !1240
  store i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3)), i64 1), i64* %5, align 8, !tbaa !1240
  store i8 and (i8 trunc (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3)) to i8), i8 1), i8* %12, align 1, !tbaa !1428
  %18 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3)), i64 1) to i32), i32 255)) #10
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %13, align 1, !tbaa !1428
  store i8 0, i8* %14, align 1, !tbaa !1428
  store i8 zext (i1 icmp eq (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3)), i64 1), i64 0) to i8), i8* %15, align 1, !tbaa !1428
  store i8 trunc (i64 lshr (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3)), i64 1), i64 63) to i8), i8* %16, align 1, !tbaa !1428
  store i8 0, i8* %17, align 1, !tbaa !1428
  br i1 icmp eq (i64 ashr (i64 add (i64 lshr (i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3), i64 63), i64 ashr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 3)), i64 1), i64 0), label %block_400e28, label %block_400e13

block_400e13:                                     ; preds = %block_400df0
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %12, align 1, !tbaa !1264
  store i8 1, i8* %13, align 1, !tbaa !1278
  store i8 1, i8* %15, align 1, !tbaa !1280
  store i8 0, i8* %16, align 1, !tbaa !1281
  store i8 0, i8* %17, align 1, !tbaa !1282
  store i8 0, i8* %14, align 1, !tbaa !1279
  br label %block_400e28

block_400e28:                                     ; preds = %block_400e13, %block_400df0
  %22 = inttoptr i64 %10 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  %24 = inttoptr i64 %9 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %9, 8
  store i64 %26, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40a9c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -104
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -32
  %28 = load i64, i64* %9, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = add i64 %14, -36
  %31 = inttoptr i64 %30 to i32*
  store i32 1, i32* %31
  %32 = inttoptr i64 %24 to i64*
  %33 = load i64, i64* %32
  %34 = add i64 %14, -80
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %14, -64
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = inttoptr i64 %40 to i64*
  %43 = load i64, i64* %42
  %44 = icmp eq i64 %43, 0
  %45 = select i1 %44, i64 53, i64 246
  %46 = add i64 %45, %1
  %47 = inttoptr i64 %24 to i64*
  %48 = load i64, i64* %47
  br i1 %44, label %block_40a9f5, label %block_40aab6

block_40ac7d:                                     ; preds = %block_40ac35
  %49 = add i64 %981, 60
  %50 = add i64 %987, 11
  %51 = inttoptr i64 %49 to i32*
  store i32 1, i32* %51
  br label %block_40ac88

block_40af44:                                     ; preds = %block_40aedd
  %52 = add i64 %714, 8
  %53 = inttoptr i64 %52 to i64*
  store i64 %701, i64* %53
  br label %block_40b165

block_40a9f5:                                     ; preds = %block_40a9c0
  %54 = add i64 %48, 40
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = add i32 %56, 1
  %58 = inttoptr i64 %54 to i32*
  store i32 %57, i32* %58
  %59 = inttoptr i64 %24 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %60, 96
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %60, 56
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %63, %67
  %69 = add i64 %60, 32
  %70 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %70
  %71 = load i64, i64* %12, align 8
  %72 = add i64 %71, -16
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73
  %75 = add i64 %74, 44
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76
  %78 = add i64 %74, 56
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = add i32 %80, %77
  %82 = inttoptr i64 %78 to i32*
  store i32 %81, i32* %82
  %83 = inttoptr i64 %72 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %84, 64
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86
  %88 = add i32 %87, -1
  %89 = inttoptr i64 %85 to i32*
  store i32 %88, i32* %89
  %90 = load i64, i64* %12, align 8
  %91 = add i64 %90, -16
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %93, 64
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = icmp eq i32 %96, 0
  %98 = select i1 %97, i64 85, i64 96
  %99 = add i64 %46, %98
  br i1 %97, label %block_40aa4a, label %block_40aa55

block_40abeb:                                     ; preds = %block_40abe1
  %100 = add i64 %934, -56
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %934, -16
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104
  %106 = add i64 %105, 88
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107
  %109 = add i64 %934, -28
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110
  %112 = zext i32 %111 to i64
  %113 = shl nuw nsw i64 %112, 3
  %114 = add i64 %108, %113
  %115 = inttoptr i64 %114 to i64*
  store i64 %102, i64* %115
  %116 = inttoptr i64 %103 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %117, 80
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119
  %121 = inttoptr i64 %109 to i32*
  %122 = load i32, i32* %121
  %123 = zext i32 %122 to i64
  %124 = add i32 %122, 1
  %125 = inttoptr i64 %109 to i32*
  store i32 %124, i32* %125
  %126 = shl nuw nsw i64 %123, 2
  %127 = add i64 %120, %126
  %128 = inttoptr i64 %127 to i32*
  store i32 1, i32* %128
  %129 = load i64, i64* %12, align 8
  %130 = add i64 %129, -56
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %132, 8
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %129, -64
  %137 = inttoptr i64 %136 to i64*
  store i64 %135, i64* %137
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138
  %140 = icmp eq i64 %139, 0
  %141 = select i1 %140, i64 74, i64 182
  %142 = add i64 %282, %141
  br i1 %140, label %block_40ac35, label %block_40aca1

block_40ade4:                                     ; preds = %block_40adbb
  %143 = add i64 %354, 16
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144
  %146 = icmp eq i32 %145, 1
  %147 = select i1 %146, i64 14, i64 97
  %148 = add i64 %357, %147
  br i1 %146, label %block_40b160, label %block_40ae45

block_40ae61:                                     ; preds = %block_40ae45
  %149 = add i64 %297, -56
  %150 = inttoptr i64 %149 to i64*
  store i64 %312, i64* %150
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %152, 8
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %297, -64
  %157 = inttoptr i64 %156 to i64*
  store i64 %155, i64* %157
  %158 = inttoptr i64 %156 to i64*
  %159 = load i64, i64* %158
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = inttoptr i64 %149 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %163, 8
  %165 = inttoptr i64 %164 to i64*
  store i64 %161, i64* %165
  %166 = inttoptr i64 %149 to i64*
  %167 = load i64, i64* %166
  %168 = inttoptr i64 %156 to i64*
  %169 = load i64, i64* %168
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170
  %171 = inttoptr i64 %156 to i64*
  %172 = load i64, i64* %171
  %173 = inttoptr i64 %298 to i64*
  %174 = load i64, i64* %173
  %175 = add i64 %174, 88
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176
  %178 = inttoptr i64 %304 to i32*
  %179 = load i32, i32* %178
  %180 = add i32 %179, -2
  %181 = zext i32 %180 to i64
  %182 = shl nuw nsw i64 %181, 3
  %183 = add i64 %177, %182
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = inttoptr i64 %185 to i64*
  store i64 %172, i64* %186
  %187 = load i64, i64* %12, align 8
  br label %block_40aedd

block_40b160:                                     ; preds = %block_40afb6, %block_40ade4
  %188 = phi i64 [ %236, %block_40afb6 ], [ %148, %block_40ade4 ]
  %189 = phi %struct.Memory* [ %328, %block_40afb6 ], [ %328, %block_40ade4 ]
  %190 = phi i64 [ -671, %block_40afb6 ], [ -205, %block_40ade4 ]
  %191 = inttoptr i64 %601 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %192, 88
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = inttoptr i64 %602 to i32*
  %197 = load i32, i32* %196
  %198 = add i32 %197, -1
  %199 = zext i32 %198 to i64
  %200 = shl nuw nsw i64 %199, 3
  %201 = add i64 %195, %200
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  %204 = add i64 %203, 16
  %205 = inttoptr i64 %204 to i32*
  store i32 0, i32* %205
  %206 = inttoptr i64 %603 to i64*
  %207 = load i64, i64* %206
  %208 = add i64 %207, 16
  %209 = inttoptr i64 %208 to i32*
  store i32 0, i32* %209
  %210 = inttoptr i64 %601 to i64*
  %211 = load i64, i64* %210
  %212 = add i64 %211, 88
  %213 = inttoptr i64 %212 to i64*
  %214 = load i64, i64* %213
  %215 = inttoptr i64 %602 to i32*
  %216 = load i32, i32* %215
  %217 = add i32 %216, -2
  %218 = zext i32 %217 to i64
  %219 = shl nuw nsw i64 %218, 3
  %220 = add i64 %214, %219
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %222, 16
  %224 = inttoptr i64 %223 to i32*
  store i32 1, i32* %224
  %225 = inttoptr i64 %602 to i32*
  %226 = load i32, i32* %225
  %227 = add i64 %188, 75
  %228 = add i32 %226, -2
  %229 = inttoptr i64 %602 to i32*
  store i32 %228, i32* %229
  %230 = add i64 %190, %227
  br label %block_40ad70

block_40afb6:                                     ; preds = %block_40af8e
  %231 = add i64 %719, 16
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232
  %234 = icmp eq i32 %233, 1
  %235 = select i1 %234, i64 14, i64 97
  %236 = add i64 %722, %235
  br i1 %234, label %block_40b160, label %block_40b017

block_40b139:                                     ; preds = %block_40b0b0
  %237 = inttoptr i64 %808 to i64*
  store i64 %795, i64* %237
  br label %block_40b165

block_40ab71:                                     ; preds = %block_40ab28
  %238 = add i64 %838, -16
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = add i64 %240, 96
  %242 = inttoptr i64 %241 to i64*
  %243 = load i64, i64* %242
  %244 = add i64 %240, 56
  %245 = inttoptr i64 %244 to i32*
  %246 = load i32, i32* %245
  %247 = zext i32 %246 to i64
  %248 = add i64 %243, %247
  %249 = add i64 %240, 32
  %250 = inttoptr i64 %249 to i64*
  store i64 %248, i64* %250
  %251 = inttoptr i64 %238 to i64*
  %252 = load i64, i64* %251
  %253 = add i64 %252, 44
  %254 = inttoptr i64 %253 to i32*
  %255 = load i32, i32* %254
  %256 = add i64 %252, 56
  %257 = inttoptr i64 %256 to i32*
  %258 = load i32, i32* %257
  %259 = add i32 %258, %255
  %260 = inttoptr i64 %256 to i32*
  store i32 %259, i32* %260
  %261 = load i64, i64* %12, align 8
  %262 = add i64 %261, -16
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263
  %265 = add i64 %264, 64
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266
  %268 = add i32 %267, -1
  %269 = inttoptr i64 %265 to i32*
  store i32 %268, i32* %269
  %270 = inttoptr i64 %262 to i64*
  %271 = load i64, i64* %270
  %272 = add i64 %271, 64
  %273 = inttoptr i64 %272 to i32*
  %274 = load i32, i32* %273
  %275 = icmp eq i32 %274, 0
  %276 = select i1 %275, i64 72, i64 83
  %277 = add i64 %850, %276
  br i1 %275, label %block_40abb9, label %block_40abc4

block_40aa4a:                                     ; preds = %block_40a9f5
  %278 = add i64 %93, 60
  %279 = add i64 %99, 11
  %280 = inttoptr i64 %278 to i32*
  store i32 1, i32* %280
  br label %block_40aa55

block_40abe1:                                     ; preds = %block_40aad3
  %281 = select i1 %942, i64 197, i64 10
  %282 = add i64 %947, %281
  br i1 %942, label %block_40aca6, label %block_40abeb

block_40ae45:                                     ; preds = %block_40adbb, %block_40ade4
  %283 = inttoptr i64 %601 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %284, 80
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  %288 = inttoptr i64 %602 to i32*
  %289 = load i32, i32* %288
  %290 = add i32 %289, -1
  %291 = zext i32 %290 to i64
  %292 = shl nuw nsw i64 %291, 2
  %293 = add i64 %287, %292
  %294 = inttoptr i64 %293 to i32*
  %295 = load i32, i32* %294
  %296 = icmp eq i32 %295, 1
  %297 = load i64, i64* %12, align 8
  %298 = add i64 %297, -16
  %299 = inttoptr i64 %298 to i64*
  %300 = load i64, i64* %299
  %301 = add i64 %300, 88
  %302 = inttoptr i64 %301 to i64*
  %303 = load i64, i64* %302
  %304 = add i64 %297, -28
  %305 = inttoptr i64 %304 to i32*
  %306 = load i32, i32* %305
  %307 = add i32 %306, -1
  %308 = zext i32 %307 to i64
  %309 = shl nuw nsw i64 %308, 3
  %310 = add i64 %303, %309
  %311 = inttoptr i64 %310 to i64*
  %312 = load i64, i64* %311
  br i1 %296, label %block_40ae61, label %block_40aec3

block_40abc4:                                     ; preds = %block_40abb9, %block_40ab71
  %313 = phi i64 [ %277, %block_40ab71 ], [ %359, %block_40abb9 ]
  %314 = phi %struct.Memory* [ %933, %block_40ab71 ], [ %933, %block_40abb9 ]
  %315 = inttoptr i64 %262 to i64*
  %316 = load i64, i64* %315
  %317 = add i64 %316, 32
  %318 = inttoptr i64 %317 to i64*
  %319 = load i64, i64* %318
  %320 = add i64 %261, -56
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %313, 15
  %324 = inttoptr i64 %322 to i64*
  store i64 %319, i64* %324
  br label %block_40ad19

block_40aec3:                                     ; preds = %block_40ae45
  %325 = add i64 %297, -64
  %326 = inttoptr i64 %325 to i64*
  store i64 %312, i64* %326
  br label %block_40aedd

block_40ad70:                                     ; preds = %block_40ad19, %block_40b160
  %327 = phi i64 [ %599, %block_40ad19 ], [ %230, %block_40b160 ]
  %328 = phi %struct.Memory* [ %549, %block_40ad19 ], [ %189, %block_40b160 ]
  %329 = inttoptr i64 %601 to i64*
  %330 = load i64, i64* %329
  %331 = add i64 %330, 88
  %332 = inttoptr i64 %331 to i64*
  %333 = load i64, i64* %332
  %334 = inttoptr i64 %602 to i32*
  %335 = load i32, i32* %334
  %336 = add i32 %335, -1
  %337 = zext i32 %336 to i64
  %338 = shl nuw nsw i64 %337, 3
  %339 = add i64 %333, %338
  %340 = inttoptr i64 %339 to i64*
  %341 = load i64, i64* %340
  %342 = add i64 %341, 16
  %343 = inttoptr i64 %342 to i32*
  %344 = load i32, i32* %343
  %345 = add i32 %344, -1
  %346 = icmp eq i32 %345, 0
  %347 = select i1 %346, i64 32, i64 42
  %348 = add i64 %327, %347
  br i1 %346, label %block_40ad90, label %block_40b165.loopexit

block_40adbb:                                     ; preds = %block_40ad9f
  %349 = add i64 %462, 8
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = inttoptr i64 %603 to i64*
  store i64 %351, i64* %352
  %353 = inttoptr i64 %603 to i64*
  %354 = load i64, i64* %353
  %355 = icmp eq i64 %354, 0
  %356 = select i1 %355, i64 138, i64 41
  %357 = add i64 %458, %356
  br i1 %355, label %block_40ae45, label %block_40ade4

block_40abb9:                                     ; preds = %block_40ab71
  %358 = add i64 %271, 60
  %359 = add i64 %277, 11
  %360 = inttoptr i64 %358 to i32*
  store i32 1, i32* %360
  br label %block_40abc4

block_40acb6:                                     ; preds = %block_40accc, %block_40aca6
  %361 = phi i64 [ %442, %block_40aca6 ], [ %884, %block_40accc ]
  %362 = phi %struct.Memory* [ %933, %block_40aca6 ], [ %362, %block_40accc ]
  %363 = inttoptr i64 %441 to i64*
  %364 = load i64, i64* %363
  %365 = inttoptr i64 %444 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %366, 76
  %368 = inttoptr i64 %367 to i32*
  %369 = load i32, i32* %368
  %370 = zext i32 %369 to i64
  %371 = icmp ult i64 %364, %370
  %372 = select i1 %371, i64 22, i64 69
  %373 = add i64 %361, %372
  br i1 %371, label %block_40accc, label %block_40acfb

block_40b033:                                     ; preds = %block_40b017
  %374 = add i64 %618, -56
  %375 = inttoptr i64 %374 to i64*
  store i64 %633, i64* %375
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376
  %378 = inttoptr i64 %377 to i64*
  %379 = load i64, i64* %378
  %380 = add i64 %618, -64
  %381 = inttoptr i64 %380 to i64*
  store i64 %379, i64* %381
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %383, 8
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = inttoptr i64 %374 to i64*
  %388 = load i64, i64* %387
  %389 = inttoptr i64 %388 to i64*
  store i64 %386, i64* %389
  %390 = inttoptr i64 %374 to i64*
  %391 = load i64, i64* %390
  %392 = inttoptr i64 %380 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %393, 8
  %395 = inttoptr i64 %394 to i64*
  store i64 %391, i64* %395
  %396 = inttoptr i64 %380 to i64*
  %397 = load i64, i64* %396
  %398 = inttoptr i64 %619 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %399, 88
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = inttoptr i64 %625 to i32*
  %404 = load i32, i32* %403
  %405 = add i32 %404, -2
  %406 = zext i32 %405 to i64
  %407 = shl nuw nsw i64 %406, 3
  %408 = add i64 %402, %407
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = add i64 %410, 8
  %412 = inttoptr i64 %411 to i64*
  store i64 %397, i64* %412
  %413 = load i64, i64* %12, align 8
  br label %block_40b0b0

block_40b165.loopexit:                            ; preds = %block_40ad90, %block_40ad70
  store i64 %337, i64* %7, align 8, !tbaa !1240
  store i64 %337, i64* %8, align 8, !tbaa !1240
  br label %block_40b165

block_40b165:                                     ; preds = %block_40b116, %block_40af67, %block_40b165.loopexit, %block_40b139, %block_40af44
  %414 = phi i64 [ %705, %block_40af67 ], [ %705, %block_40af44 ], [ %799, %block_40b116 ], [ %799, %block_40b139 ], [ %586, %block_40b165.loopexit ]
  %415 = phi %struct.Memory* [ %640, %block_40af67 ], [ %640, %block_40af44 ], [ %735, %block_40b116 ], [ %735, %block_40b139 ], [ %328, %block_40b165.loopexit ]
  %416 = add i64 %414, -16
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = inttoptr i64 %418 to i64*
  %420 = load i64, i64* %419
  %421 = add i64 %420, 16
  %422 = inttoptr i64 %421 to i32*
  store i32 0, i32* %422
  %423 = add i64 %414, -4
  %424 = inttoptr i64 %423 to i32*
  store i32 0, i32* %424
  br label %block_40b17a

block_40aab6:                                     ; preds = %block_40a9c0
  %425 = add i64 %48, 80
  %426 = inttoptr i64 %425 to i64*
  %427 = load i64, i64* %426
  %428 = inttoptr i64 %427 to i32*
  store i32 0, i32* %428
  %429 = inttoptr i64 %24 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %430, 88
  %432 = inttoptr i64 %431 to i64*
  %433 = load i64, i64* %432
  %434 = add i64 %46, 29
  %435 = inttoptr i64 %433 to i64*
  store i64 %430, i64* %435
  br label %block_40aad3

block_40aca6:                                     ; preds = %block_40abe1
  %436 = add i64 %934, -24
  %437 = inttoptr i64 %436 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %934, -88
  %440 = inttoptr i64 %439 to i64*
  store i64 %438, i64* %440
  %441 = add i64 %934, -80
  %442 = add i64 %282, 16
  %443 = inttoptr i64 %441 to i64*
  store i64 0, i64* %443
  %444 = add i64 %934, -16
  %445 = add i64 %934, -56
  br label %block_40acb6

block_40aca1:                                     ; preds = %block_40abeb
  %446 = add i64 %142, 102
  br label %block_40ad0c

block_40ad9f:                                     ; preds = %block_40ad90
  %447 = add i64 %330, 80
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i32 %335, -2
  %451 = zext i32 %450 to i64
  %452 = shl nuw nsw i64 %451, 2
  %453 = add i64 %449, %452
  %454 = inttoptr i64 %453 to i32*
  %455 = load i32, i32* %454
  %456 = icmp ne i32 %455, 0
  %457 = select i1 %456, i64 495, i64 28
  %458 = add i64 %638, %457
  %459 = shl nuw nsw i64 %451, 3
  %460 = add i64 %333, %459
  %461 = inttoptr i64 %460 to i64*
  %462 = load i64, i64* %461
  br i1 %456, label %block_40af8e, label %block_40adbb

block_40b17a:                                     ; preds = %block_40acfb, %block_40aa55, %block_40b165
  %463 = phi i64 [ %934, %block_40acfb ], [ %414, %block_40b165 ], [ %531, %block_40aa55 ]
  %464 = phi %struct.Memory* [ %362, %block_40acfb ], [ %415, %block_40b165 ], [ %500, %block_40aa55 ]
  %465 = add i64 %463, -4
  %466 = inttoptr i64 %465 to i32*
  %467 = load i32, i32* %466
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %6, align 8, !tbaa !1240
  %469 = load i64, i64* %11, align 8
  %470 = add i64 %469, 96
  %471 = icmp ugt i64 %469, -97
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %18, align 1, !tbaa !1264
  %473 = trunc i64 %470 to i32
  %474 = and i32 %473, 255
  %475 = tail call i32 @llvm.ctpop.i32(i32 %474) #10
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  store i8 %478, i8* %19, align 1, !tbaa !1278
  %479 = xor i64 %470, %469
  %480 = lshr i64 %479, 4
  %481 = trunc i64 %480 to i8
  %482 = and i8 %481, 1
  store i8 %482, i8* %20, align 1, !tbaa !1279
  %483 = icmp eq i64 %470, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %21, align 1, !tbaa !1280
  %485 = lshr i64 %470, 63
  %486 = trunc i64 %485 to i8
  store i8 %486, i8* %22, align 1, !tbaa !1281
  %487 = lshr i64 %469, 63
  %488 = xor i64 %485, %487
  %489 = add nuw nsw i64 %488, %485
  %490 = icmp eq i64 %489, 2
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %23, align 1, !tbaa !1282
  %492 = add i64 %469, 104
  %493 = inttoptr i64 %470 to i64*
  %494 = load i64, i64* %493
  store i64 %494, i64* %12, align 8, !tbaa !1240
  %495 = inttoptr i64 %492 to i64*
  %496 = load i64, i64* %495
  store i64 %496, i64* %3, align 8, !tbaa !1240
  %497 = add i64 %469, 112
  store i64 %497, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %464

block_40af67:                                     ; preds = %block_40aedd
  %498 = inttoptr i64 %714 to i64*
  store i64 %701, i64* %498
  br label %block_40b165

block_40aa55:                                     ; preds = %block_40aa4a, %block_40a9f5
  %499 = phi i64 [ %99, %block_40a9f5 ], [ %279, %block_40aa4a ]
  %500 = phi %struct.Memory* [ %2, %block_40a9f5 ], [ %2, %block_40aa4a ]
  %501 = inttoptr i64 %91 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %502, 32
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %90, -72
  %507 = inttoptr i64 %506 to i64*
  %508 = load i64, i64* %507
  %509 = inttoptr i64 %508 to i64*
  store i64 %505, i64* %509
  %510 = add i64 %90, -56
  %511 = inttoptr i64 %510 to i64*
  store i64 %505, i64* %511
  %512 = inttoptr i64 %510 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %513, 24
  %515 = add i64 %90, -24
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  store i64 %517, i64* %7, align 8, !tbaa !1240
  %518 = inttoptr i64 %91 to i64*
  %519 = load i64, i64* %518
  %520 = add i64 %519, 48
  %521 = inttoptr i64 %520 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %8, align 8, !tbaa !1240
  store i64 %514, i64* %10, align 8, !tbaa !1240
  store i64 %517, i64* %9, align 8, !tbaa !1240
  %524 = add i64 %499, 51
  %525 = load i64, i64* %11, align 8, !tbaa !1240
  %526 = add i64 %525, -8
  %527 = inttoptr i64 %526 to i64*
  store i64 %524, i64* %527
  %528 = inttoptr i64 %526 to i64*
  %529 = load i64, i64* %528
  store i64 %529, i64* %3, align 8, !alias.scope !1429, !noalias !1432
  store i64 %525, i64* %11, align 8, !alias.scope !1429, !noalias !1432
  %530 = tail call i64 @memcpy(i64 %514, i64 %517, i64 %523), !noalias !1429
  %531 = load i64, i64* %12, align 8
  %532 = add i64 %531, -56
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  %535 = add i64 %534, 8
  %536 = inttoptr i64 %535 to i64*
  store i64 0, i64* %536
  %537 = inttoptr i64 %532 to i64*
  %538 = load i64, i64* %537
  %539 = inttoptr i64 %538 to i64*
  store i64 0, i64* %539
  %540 = inttoptr i64 %532 to i64*
  %541 = load i64, i64* %540
  %542 = add i64 %541, 16
  %543 = inttoptr i64 %542 to i32*
  store i32 0, i32* %543
  %544 = add i64 %531, -4
  %545 = inttoptr i64 %544 to i32*
  store i32 0, i32* %545
  br label %block_40b17a

block_40ad19:                                     ; preds = %block_40ac88, %block_40abc4
  %546 = phi i64 [ %862, %block_40ac88 ], [ %323, %block_40abc4 ]
  %547 = phi i64 [ %857, %block_40ac88 ], [ %319, %block_40abc4 ]
  %548 = phi i64 [ %971, %block_40ac88 ], [ %261, %block_40abc4 ]
  %549 = phi %struct.Memory* [ %852, %block_40ac88 ], [ %314, %block_40abc4 ]
  %550 = phi i64 [ 129, %block_40ac88 ], [ 326, %block_40abc4 ]
  %551 = add i64 %548, -56
  %552 = inttoptr i64 %551 to i64*
  store i64 %547, i64* %552
  %553 = add i64 %550, %546
  %554 = add i64 %548, -16
  %555 = inttoptr i64 %554 to i64*
  %556 = load i64, i64* %555
  %557 = add i64 %556, 40
  %558 = inttoptr i64 %557 to i32*
  %559 = load i32, i32* %558
  %560 = add i32 %559, 1
  %561 = inttoptr i64 %557 to i32*
  store i32 %560, i32* %561
  %562 = inttoptr i64 %551 to i64*
  %563 = load i64, i64* %562
  %564 = add i64 %563, 24
  %565 = add i64 %548, -24
  %566 = inttoptr i64 %565 to i64*
  %567 = load i64, i64* %566
  %568 = inttoptr i64 %554 to i64*
  %569 = load i64, i64* %568
  %570 = add i64 %569, 48
  %571 = inttoptr i64 %570 to i32*
  %572 = load i32, i32* %571
  %573 = zext i32 %572 to i64
  store i64 %564, i64* %10, align 8, !tbaa !1240
  %574 = load i64, i64* %12, align 8
  %575 = add i64 %574, -96
  %576 = inttoptr i64 %575 to i64*
  store i64 %573, i64* %576
  store i64 %567, i64* %9, align 8, !tbaa !1240
  %577 = inttoptr i64 %575 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %553, 53
  %580 = load i64, i64* %11, align 8, !tbaa !1240
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %579, i64* %582
  %583 = inttoptr i64 %581 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %3, align 8, !alias.scope !1434, !noalias !1437
  store i64 %580, i64* %11, align 8, !alias.scope !1434, !noalias !1437
  %585 = tail call i64 @memcpy(i64 %564, i64 %567, i64 %578), !noalias !1434
  %586 = load i64, i64* %12, align 8
  %587 = add i64 %586, -56
  %588 = load i64, i64* %3, align 8
  %589 = inttoptr i64 %587 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %590, 8
  %592 = inttoptr i64 %591 to i64*
  store i64 0, i64* %592
  %593 = inttoptr i64 %587 to i64*
  %594 = load i64, i64* %593
  %595 = inttoptr i64 %594 to i64*
  store i64 0, i64* %595
  %596 = inttoptr i64 %587 to i64*
  %597 = load i64, i64* %596
  %598 = add i64 %597, 16
  %599 = add i64 %588, 34
  %600 = inttoptr i64 %598 to i32*
  store i32 1, i32* %600
  %601 = add i64 %586, -16
  %602 = add i64 %586, -28
  %603 = add i64 %586, -64
  br label %block_40ad70

block_40b017:                                     ; preds = %block_40af8e, %block_40afb6
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  %606 = add i64 %605, 80
  %607 = inttoptr i64 %606 to i64*
  %608 = load i64, i64* %607
  %609 = inttoptr i64 %602 to i32*
  %610 = load i32, i32* %609
  %611 = add i32 %610, -1
  %612 = zext i32 %611 to i64
  %613 = shl nuw nsw i64 %612, 2
  %614 = add i64 %608, %613
  %615 = inttoptr i64 %614 to i32*
  %616 = load i32, i32* %615
  %617 = icmp eq i32 %616, 0
  %618 = load i64, i64* %12, align 8
  %619 = add i64 %618, -16
  %620 = inttoptr i64 %619 to i64*
  %621 = load i64, i64* %620
  %622 = add i64 %621, 88
  %623 = inttoptr i64 %622 to i64*
  %624 = load i64, i64* %623
  %625 = add i64 %618, -28
  %626 = inttoptr i64 %625 to i32*
  %627 = load i32, i32* %626
  %628 = add i32 %627, -1
  %629 = zext i32 %628 to i64
  %630 = shl nuw nsw i64 %629, 3
  %631 = add i64 %624, %630
  %632 = inttoptr i64 %631 to i64*
  %633 = load i64, i64* %632
  br i1 %617, label %block_40b033, label %block_40b096

block_40b116:                                     ; preds = %block_40b0b0
  %634 = add i64 %808, 8
  %635 = inttoptr i64 %634 to i64*
  store i64 %795, i64* %635
  br label %block_40b165

block_40ad90:                                     ; preds = %block_40ad70
  %636 = icmp ult i32 %335, 3
  %637 = select i1 %636, i64 10, i64 15
  %638 = add i64 %348, %637
  br i1 %636, label %block_40b165.loopexit, label %block_40ad9f

block_40aedd:                                     ; preds = %block_40aec3, %block_40ae61
  %639 = phi i64 [ %297, %block_40aec3 ], [ %187, %block_40ae61 ]
  %640 = phi %struct.Memory* [ %328, %block_40aec3 ], [ %328, %block_40ae61 ]
  %641 = add i64 %639, -16
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %643, 88
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %639, -28
  %648 = inttoptr i64 %647 to i32*
  %649 = load i32, i32* %648
  %650 = add i32 %649, -2
  %651 = zext i32 %650 to i64
  %652 = shl nuw nsw i64 %651, 3
  %653 = add i64 %646, %652
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %639, -56
  %657 = inttoptr i64 %656 to i64*
  store i64 %655, i64* %657
  %658 = inttoptr i64 %656 to i64*
  %659 = load i64, i64* %658
  %660 = add i64 %659, 16
  %661 = inttoptr i64 %660 to i32*
  store i32 1, i32* %661
  %662 = add i64 %639, -64
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = add i64 %664, 16
  %666 = inttoptr i64 %665 to i32*
  store i32 0, i32* %666
  %667 = inttoptr i64 %662 to i64*
  %668 = load i64, i64* %667
  %669 = add i64 %668, 8
  %670 = inttoptr i64 %669 to i64*
  %671 = load i64, i64* %670
  %672 = inttoptr i64 %656 to i64*
  %673 = load i64, i64* %672
  %674 = inttoptr i64 %673 to i64*
  store i64 %671, i64* %674
  %675 = load i64, i64* %12, align 8
  %676 = add i64 %675, -56
  %677 = inttoptr i64 %676 to i64*
  %678 = load i64, i64* %677
  %679 = add i64 %675, -64
  %680 = inttoptr i64 %679 to i64*
  %681 = load i64, i64* %680
  %682 = add i64 %681, 8
  %683 = inttoptr i64 %682 to i64*
  store i64 %678, i64* %683
  %684 = add i64 %675, -16
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %686, 80
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %675, -28
  %691 = inttoptr i64 %690 to i32*
  %692 = load i32, i32* %691
  %693 = add i32 %692, -3
  %694 = zext i32 %693 to i64
  %695 = shl nuw nsw i64 %694, 2
  %696 = add i64 %689, %695
  %697 = inttoptr i64 %696 to i32*
  %698 = load i32, i32* %697
  %699 = icmp eq i32 %698, 0
  %700 = inttoptr i64 %679 to i64*
  %701 = load i64, i64* %700
  %702 = add i64 %686, 88
  %703 = inttoptr i64 %702 to i64*
  %704 = load i64, i64* %703
  %705 = load i64, i64* %12, align 8
  %706 = add i64 %705, -28
  %707 = inttoptr i64 %706 to i32*
  %708 = load i32, i32* %707
  %709 = add i32 %708, -3
  %710 = zext i32 %709 to i64
  store i64 %710, i64* %8, align 8, !tbaa !1240
  store i64 %710, i64* %9, align 8, !tbaa !1240
  %711 = shl nuw nsw i64 %710, 3
  %712 = add i64 %704, %711
  %713 = inttoptr i64 %712 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %7, align 8, !tbaa !1240
  br i1 %699, label %block_40af67, label %block_40af44

block_40af8e:                                     ; preds = %block_40ad9f
  %715 = inttoptr i64 %462 to i64*
  %716 = load i64, i64* %715
  %717 = inttoptr i64 %603 to i64*
  store i64 %716, i64* %717
  %718 = inttoptr i64 %603 to i64*
  %719 = load i64, i64* %718
  %720 = icmp eq i64 %719, 0
  %721 = select i1 %720, i64 137, i64 40
  %722 = add i64 %458, %721
  br i1 %720, label %block_40b017, label %block_40afb6

block_40ad0c:                                     ; preds = %block_40ab28, %block_40aca1
  %723 = phi i64 [ %129, %block_40aca1 ], [ %838, %block_40ab28 ]
  %724 = phi i64 [ %446, %block_40aca1 ], [ %850, %block_40ab28 ]
  %725 = phi i64 [ 5, %block_40aca1 ], [ 304, %block_40ab28 ]
  %726 = phi %struct.Memory* [ %933, %block_40aca1 ], [ %933, %block_40ab28 ]
  %727 = add i64 %724, %725
  %728 = add i64 %723, -64
  %729 = inttoptr i64 %728 to i64*
  %730 = load i64, i64* %729
  %731 = add i64 %723, -56
  %732 = inttoptr i64 %731 to i64*
  store i64 %730, i64* %732
  %733 = add i64 %727, -569
  br label %block_40aad3

block_40b0b0:                                     ; preds = %block_40b096, %block_40b033
  %734 = phi i64 [ %618, %block_40b096 ], [ %413, %block_40b033 ]
  %735 = phi %struct.Memory* [ %328, %block_40b096 ], [ %328, %block_40b033 ]
  %736 = add i64 %734, -16
  %737 = inttoptr i64 %736 to i64*
  %738 = load i64, i64* %737
  %739 = add i64 %738, 88
  %740 = inttoptr i64 %739 to i64*
  %741 = load i64, i64* %740
  %742 = add i64 %734, -28
  %743 = inttoptr i64 %742 to i32*
  %744 = load i32, i32* %743
  %745 = add i32 %744, -2
  %746 = zext i32 %745 to i64
  %747 = shl nuw nsw i64 %746, 3
  %748 = add i64 %741, %747
  %749 = inttoptr i64 %748 to i64*
  %750 = load i64, i64* %749
  %751 = add i64 %734, -56
  %752 = inttoptr i64 %751 to i64*
  store i64 %750, i64* %752
  %753 = inttoptr i64 %751 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %754, 16
  %756 = inttoptr i64 %755 to i32*
  store i32 1, i32* %756
  %757 = add i64 %734, -64
  %758 = inttoptr i64 %757 to i64*
  %759 = load i64, i64* %758
  %760 = add i64 %759, 16
  %761 = inttoptr i64 %760 to i32*
  store i32 0, i32* %761
  %762 = inttoptr i64 %757 to i64*
  %763 = load i64, i64* %762
  %764 = inttoptr i64 %763 to i64*
  %765 = load i64, i64* %764
  %766 = inttoptr i64 %751 to i64*
  %767 = load i64, i64* %766
  %768 = add i64 %767, 8
  %769 = inttoptr i64 %768 to i64*
  store i64 %765, i64* %769
  %770 = load i64, i64* %12, align 8
  %771 = add i64 %770, -56
  %772 = inttoptr i64 %771 to i64*
  %773 = load i64, i64* %772
  %774 = add i64 %770, -64
  %775 = inttoptr i64 %774 to i64*
  %776 = load i64, i64* %775
  %777 = inttoptr i64 %776 to i64*
  store i64 %773, i64* %777
  %778 = add i64 %770, -16
  %779 = inttoptr i64 %778 to i64*
  %780 = load i64, i64* %779
  %781 = add i64 %780, 80
  %782 = inttoptr i64 %781 to i64*
  %783 = load i64, i64* %782
  %784 = add i64 %770, -28
  %785 = inttoptr i64 %784 to i32*
  %786 = load i32, i32* %785
  %787 = add i32 %786, -3
  %788 = zext i32 %787 to i64
  %789 = shl nuw nsw i64 %788, 2
  %790 = add i64 %783, %789
  %791 = inttoptr i64 %790 to i32*
  %792 = load i32, i32* %791
  %793 = icmp eq i32 %792, 0
  %794 = inttoptr i64 %774 to i64*
  %795 = load i64, i64* %794
  %796 = add i64 %780, 88
  %797 = inttoptr i64 %796 to i64*
  %798 = load i64, i64* %797
  %799 = load i64, i64* %12, align 8
  %800 = add i64 %799, -28
  %801 = inttoptr i64 %800 to i32*
  %802 = load i32, i32* %801
  %803 = add i32 %802, -3
  %804 = zext i32 %803 to i64
  store i64 %804, i64* %8, align 8, !tbaa !1240
  store i64 %804, i64* %9, align 8, !tbaa !1240
  %805 = shl nuw nsw i64 %804, 3
  %806 = add i64 %798, %805
  %807 = inttoptr i64 %806 to i64*
  %808 = load i64, i64* %807
  store i64 %808, i64* %7, align 8, !tbaa !1240
  br i1 %793, label %block_40b139, label %block_40b116

block_40ab28:                                     ; preds = %block_40aad3
  %809 = add i64 %934, -56
  %810 = inttoptr i64 %809 to i64*
  %811 = load i64, i64* %810
  %812 = add i64 %934, -16
  %813 = inttoptr i64 %812 to i64*
  %814 = load i64, i64* %813
  %815 = add i64 %814, 88
  %816 = inttoptr i64 %815 to i64*
  %817 = load i64, i64* %816
  %818 = add i64 %934, -28
  %819 = inttoptr i64 %818 to i32*
  %820 = load i32, i32* %819
  %821 = zext i32 %820 to i64
  %822 = shl nuw nsw i64 %821, 3
  %823 = add i64 %817, %822
  %824 = inttoptr i64 %823 to i64*
  store i64 %811, i64* %824
  %825 = inttoptr i64 %812 to i64*
  %826 = load i64, i64* %825
  %827 = add i64 %826, 80
  %828 = inttoptr i64 %827 to i64*
  %829 = load i64, i64* %828
  %830 = inttoptr i64 %818 to i32*
  %831 = load i32, i32* %830
  %832 = zext i32 %831 to i64
  %833 = add i32 %831, 1
  %834 = inttoptr i64 %818 to i32*
  store i32 %833, i32* %834
  %835 = shl nuw nsw i64 %832, 2
  %836 = add i64 %829, %835
  %837 = inttoptr i64 %836 to i32*
  store i32 0, i32* %837
  %838 = load i64, i64* %12, align 8
  %839 = add i64 %838, -56
  %840 = inttoptr i64 %839 to i64*
  %841 = load i64, i64* %840
  %842 = inttoptr i64 %841 to i64*
  %843 = load i64, i64* %842
  %844 = add i64 %838, -64
  %845 = inttoptr i64 %844 to i64*
  store i64 %843, i64* %845
  %846 = inttoptr i64 %844 to i64*
  %847 = load i64, i64* %846
  %848 = icmp eq i64 %847, 0
  %849 = select i1 %848, i64 73, i64 180
  %850 = add i64 %947, %849
  br i1 %848, label %block_40ab71, label %block_40ad0c

block_40ac88:                                     ; preds = %block_40ac35, %block_40ac7d
  %851 = phi i64 [ %987, %block_40ac35 ], [ %50, %block_40ac7d ]
  %852 = phi %struct.Memory* [ %933, %block_40ac35 ], [ %933, %block_40ac7d ]
  %853 = inttoptr i64 %972 to i64*
  %854 = load i64, i64* %853
  %855 = add i64 %854, 32
  %856 = inttoptr i64 %855 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %971, -56
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %860, 8
  %862 = add i64 %851, 16
  %863 = inttoptr i64 %861 to i64*
  store i64 %857, i64* %863
  br label %block_40ad19

block_40accc:                                     ; preds = %block_40acb6
  %864 = inttoptr i64 %439 to i64*
  %865 = load i64, i64* %864
  %866 = shl i64 %364, 3
  %867 = add i64 %865, %866
  %868 = inttoptr i64 %867 to i64*
  %869 = load i64, i64* %868
  %870 = inttoptr i64 %445 to i64*
  %871 = load i64, i64* %870
  %872 = add i64 %866, 24
  %873 = add i64 %872, %871
  %874 = inttoptr i64 %873 to i64*
  %875 = load i64, i64* %874
  %876 = add i64 %875, %869
  %877 = add i64 %871, 24
  %878 = add i64 %877, %866
  %879 = inttoptr i64 %878 to i64*
  store i64 %876, i64* %879
  %880 = inttoptr i64 %441 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %881, 1
  %883 = inttoptr i64 %441 to i64*
  store i64 %882, i64* %883
  %884 = add i64 %373, -22
  br label %block_40acb6

block_40aad3:                                     ; preds = %block_40ad0c, %block_40aab6
  %885 = phi i64 [ %434, %block_40aab6 ], [ %733, %block_40ad0c ]
  %886 = phi i64 [ %15, %block_40aab6 ], [ %723, %block_40ad0c ]
  %887 = phi %struct.Memory* [ %2, %block_40aab6 ], [ %726, %block_40ad0c ]
  %888 = add i64 %886, -56
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %890, 24
  %892 = add i64 %886, -16
  %893 = inttoptr i64 %892 to i64*
  %894 = load i64, i64* %893
  %895 = add i64 %894, 76
  %896 = inttoptr i64 %895 to i32*
  %897 = load i32, i32* %896
  %898 = zext i32 %897 to i64
  %899 = shl nuw nsw i64 %898, 3
  %900 = add i64 %899, %891
  %901 = load i64, i64* %12, align 8
  %902 = add i64 %901, -40
  %903 = inttoptr i64 %902 to i64*
  store i64 %900, i64* %903
  %904 = add i64 %901, -24
  %905 = inttoptr i64 %904 to i64*
  %906 = load i64, i64* %905
  %907 = add i64 %901, -16
  %908 = inttoptr i64 %907 to i64*
  %909 = load i64, i64* %908
  %910 = add i64 %909, 76
  %911 = inttoptr i64 %910 to i32*
  %912 = load i32, i32* %911
  %913 = shl i32 %912, 1
  %914 = zext i32 %913 to i64
  %915 = shl nuw nsw i64 %914, 2
  %916 = add i64 %915, %906
  %917 = load i64, i64* %12, align 8
  %918 = add i64 %917, -40
  %919 = inttoptr i64 %918 to i64*
  %920 = load i64, i64* %919
  store i64 %920, i64* %9, align 8, !tbaa !1240
  %921 = add i64 %917, -16
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  store i64 %923, i64* %7, align 8, !tbaa !1240
  %924 = add i64 %923, 72
  %925 = inttoptr i64 %924 to i32*
  %926 = load i32, i32* %925
  %927 = zext i32 %926 to i64
  store i64 %927, i64* %8, align 8, !tbaa !1240
  store i64 %916, i64* %10, align 8, !tbaa !1240
  %928 = add i64 %885, -435
  %929 = add i64 %885, 72
  %930 = load i64, i64* %11, align 8, !tbaa !1240
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %929, i64* %932
  store i64 %931, i64* %11, align 8, !tbaa !1240
  %933 = tail call %struct.Memory* @sub_40a920_KeyComp(%struct.State* nonnull %0, i64 %928, %struct.Memory* %887)
  %934 = load i64, i64* %12, align 8
  %935 = add i64 %934, -44
  %936 = load i32, i32* %5, align 4
  %937 = load i64, i64* %3, align 8
  %938 = inttoptr i64 %935 to i32*
  store i32 %936, i32* %938
  %939 = add i64 %937, 7
  %940 = inttoptr i64 %935 to i32*
  %941 = load i32, i32* %940
  %942 = icmp eq i32 %941, 0
  %943 = lshr i32 %941, 31
  %944 = trunc i32 %943 to i8
  %945 = icmp ne i8 %944, 0
  %946 = select i1 %945, i64 6, i64 191
  %947 = add i64 %939, %946
  br i1 %945, label %block_40ab28, label %block_40abe1

block_40ac35:                                     ; preds = %block_40abeb
  %948 = add i64 %129, -16
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  %951 = add i64 %950, 96
  %952 = inttoptr i64 %951 to i64*
  %953 = load i64, i64* %952
  %954 = add i64 %950, 56
  %955 = inttoptr i64 %954 to i32*
  %956 = load i32, i32* %955
  %957 = zext i32 %956 to i64
  %958 = add i64 %953, %957
  %959 = add i64 %950, 32
  %960 = inttoptr i64 %959 to i64*
  store i64 %958, i64* %960
  %961 = inttoptr i64 %948 to i64*
  %962 = load i64, i64* %961
  %963 = add i64 %962, 44
  %964 = inttoptr i64 %963 to i32*
  %965 = load i32, i32* %964
  %966 = add i64 %962, 56
  %967 = inttoptr i64 %966 to i32*
  %968 = load i32, i32* %967
  %969 = add i32 %968, %965
  %970 = inttoptr i64 %966 to i32*
  store i32 %969, i32* %970
  %971 = load i64, i64* %12, align 8
  %972 = add i64 %971, -16
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  %975 = add i64 %974, 64
  %976 = inttoptr i64 %975 to i32*
  %977 = load i32, i32* %976
  %978 = add i32 %977, -1
  %979 = inttoptr i64 %975 to i32*
  store i32 %978, i32* %979
  %980 = inttoptr i64 %972 to i64*
  %981 = load i64, i64* %980
  %982 = add i64 %981, 64
  %983 = inttoptr i64 %982 to i32*
  %984 = load i32, i32* %983
  %985 = icmp eq i32 %984, 0
  %986 = select i1 %985, i64 72, i64 83
  %987 = add i64 %142, %986
  br i1 %985, label %block_40ac7d, label %block_40ac88

block_40b096:                                     ; preds = %block_40b017
  %988 = add i64 %618, -64
  %989 = inttoptr i64 %988 to i64*
  store i64 %633, i64* %989
  br label %block_40b0b0

block_40acfb:                                     ; preds = %block_40acb6
  store i64 %370, i64* %8, align 8, !tbaa !1240
  store i64 %370, i64* %7, align 8
  %990 = add i64 %934, -4
  %991 = inttoptr i64 %990 to i32*
  store i32 0, i32* %991
  br label %block_40b17a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408210_SetOneBit32(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408210:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = add i64 %12, -20
  %19 = load i32, i32* %5, align 4
  %20 = inttoptr i64 %18 to i32*
  store i32 %19, i32* %20
  %21 = add i64 %12, -24
  %22 = inttoptr i64 %21 to i32*
  store i32 -2147483648, i32* %22
  %23 = add i64 %12, -20
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24
  %26 = zext i32 %25 to i64
  store i64 %26, i64* %6, align 8, !tbaa !1240
  %27 = inttoptr i64 %21 to i32*
  %28 = load i32, i32* %27
  %29 = zext i32 %28 to i64
  %30 = trunc i32 %25 to i5
  switch i5 %30, label %38 [
    i5 0, label %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge
    i5 1, label %37
  ]

block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge: ; preds = %block_408210
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

; <label>:37:                                     ; preds = %block_408210
  br label %44

; <label>:38:                                     ; preds = %block_408210
  %39 = and i32 %25, 31
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %40, 4294967295
  %42 = and i64 %41, 4294967295
  %43 = lshr i64 %29, %42
  br label %44

; <label>:44:                                     ; preds = %38, %37
  %45 = phi i64 [ %43, %38 ], [ %29, %37 ]
  %46 = lshr i64 %45, 1
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 2147483647
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %44, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge
  %55 = phi i8* [ %36, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %51, %44 ]
  %56 = phi i8* [ %35, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %54, %44 ]
  %57 = phi i8* [ %34, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %53, %44 ]
  %58 = phi i8* [ %33, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %52, %44 ]
  %59 = phi i8* [ %32, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %50, %44 ]
  %60 = phi i8* [ %31, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %49, %44 ]
  %61 = phi i32 [ %28, %block_408210._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %48, %44 ]
  %62 = inttoptr i64 %21 to i32*
  store i32 %61, i32* %62
  %63 = inttoptr i64 %21 to i32*
  %64 = load i32, i32* %63
  %65 = add i64 %12, -16
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  store i64 %67, i64* %8, align 8, !tbaa !1240
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68
  %70 = or i32 %69, %64
  %71 = zext i32 %70 to i64
  store i64 %71, i64* %7, align 8, !tbaa !1240
  store i8 0, i8* %60, align 1, !tbaa !1264
  %72 = and i32 %70, 255
  %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #10
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  %76 = xor i8 %75, 1
  store i8 %76, i8* %59, align 1, !tbaa !1278
  %77 = icmp eq i32 %70, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %58, align 1, !tbaa !1280
  %79 = lshr i32 %70, 31
  %80 = trunc i32 %79 to i8
  store i8 %80, i8* %57, align 1, !tbaa !1281
  store i8 0, i8* %56, align 1, !tbaa !1282
  store i8 0, i8* %55, align 1, !tbaa !1279
  %81 = inttoptr i64 %67 to i32*
  store i32 %70, i32* %81
  %82 = inttoptr i64 %13 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %10, align 8, !tbaa !1240
  %84 = inttoptr i64 %12 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %12, 8
  store i64 %86, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40279f(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40279f:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -24
  %9 = inttoptr i64 %8 to i64*
  %10 = load i64, i64* %9
  %11 = add i64 %10, 4
  %12 = inttoptr i64 %11 to i32*
  store i32 20, i32* %12
  %13 = inttoptr i64 %8 to i64*
  %14 = load i64, i64* %13
  %15 = add i64 %14, 8
  %16 = inttoptr i64 %15 to i32*
  store i32 1, i32* %16
  %17 = inttoptr i64 %8 to i64*
  %18 = load i64, i64* %17
  %19 = add i64 %18, 16
  %20 = inttoptr i64 %19 to i64*
  store i64 10000000, i64* %20
  %21 = add i64 %7, -4
  %22 = inttoptr i64 %21 to i32*
  store i32 1, i32* %22
  %23 = inttoptr i64 %21 to i32*
  %24 = load i32, i32* %23
  %25 = zext i32 %24 to i64
  store i64 %25, i64* %4, align 8, !tbaa !1240
  %26 = load i64, i64* %5, align 8
  %27 = add i64 %26, 1168
  %28 = icmp ugt i64 %26, -1169
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %29, i8* %30, align 1, !tbaa !1264
  %31 = trunc i64 %27 to i32
  %32 = and i32 %31, 255
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #10
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %36, i8* %37, align 1, !tbaa !1278
  %38 = xor i64 %26, 16
  %39 = xor i64 %38, %27
  %40 = lshr i64 %39, 4
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %42, i8* %43, align 1, !tbaa !1279
  %44 = icmp eq i64 %27, 0
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %45, i8* %46, align 1, !tbaa !1280
  %47 = lshr i64 %27, 63
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %48, i8* %49, align 1, !tbaa !1281
  %50 = lshr i64 %26, 63
  %51 = xor i64 %47, %50
  %52 = add nuw nsw i64 %51, %47
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %54, i8* %55, align 1, !tbaa !1282
  %56 = add i64 %26, 1176
  %57 = inttoptr i64 %27 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %6, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %26, 1184
  store i64 %61, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035b0_elapsed_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4035b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %5, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %6, align 8, !tbaa !1240
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %9, -16
  store i64 %18, i64* %4, align 8, !tbaa !1240
  %19 = add i64 %1, 33808
  %20 = add i64 %1, 17
  %21 = add i64 %9, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %23 = tail call %struct.Memory* @sub_40b9c0_wtime_(%struct.State* nonnull %0, i64 %19, %struct.Memory* %2)
  %24 = load i64, i64* %6, align 8
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to double*
  %27 = load double, double* %26
  %28 = bitcast %union.VectorReg* %7 to double*
  store double %27, double* %28, align 1, !tbaa !1439
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !1439
  %31 = load i64, i64* %5, align 8
  %32 = add i64 %31, 16
  %33 = icmp ugt i64 %31, -17
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %12, align 1, !tbaa !1264
  %35 = trunc i64 %32 to i32
  %36 = and i32 %35, 255
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #10
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %13, align 1, !tbaa !1278
  %41 = xor i64 %31, 16
  %42 = xor i64 %41, %32
  %43 = lshr i64 %42, 4
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* %14, align 1, !tbaa !1279
  %46 = icmp eq i64 %32, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %15, align 1, !tbaa !1280
  %48 = lshr i64 %32, 63
  %49 = trunc i64 %48 to i8
  store i8 %49, i8* %16, align 1, !tbaa !1281
  %50 = lshr i64 %31, 63
  %51 = xor i64 %48, %50
  %52 = add nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1282
  %55 = add i64 %31, 24
  %56 = inttoptr i64 %32 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %6, align 8, !tbaa !1240
  %58 = inttoptr i64 %55 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %3, align 8, !tbaa !1240
  %60 = add i64 %31, 32
  store i64 %60, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %23
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409180_GetRegTupleFromBin64(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409180:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -16
  %18 = load i64, i64* %10, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -24
  %21 = load i64, i64* %9, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -28
  %24 = load i32, i32* %5, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %14, -40
  %27 = load i64, i64* %7, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %14, -48
  %30 = inttoptr i64 %29 to i64*
  store i64 -9223372036854775808, i64* %30
  %31 = inttoptr i64 %26 to i64*
  %32 = load i64, i64* %31
  %33 = inttoptr i64 %32 to i32*
  store i32 0, i32* %33
  %34 = add i64 %14, -56
  %35 = inttoptr i64 %34 to i32*
  store i32 0, i32* %35
  %36 = add i64 %14, -52
  %37 = inttoptr i64 %36 to i32*
  store i32 0, i32* %37
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = add i64 %14, -16
  br label %block_4091b9

block_4091fe:                                     ; preds = %block_4091c5, %block_4091d7
  %42 = phi %struct.Memory* [ %51, %block_4091c5 ], [ %51, %block_4091d7 ]
  %43 = inttoptr i64 %29 to i64*
  %44 = load i64, i64* %43
  %45 = lshr i64 %44, 1
  %46 = inttoptr i64 %29 to i64*
  store i64 %45, i64* %46
  %47 = inttoptr i64 %36 to i32*
  %48 = load i32, i32* %47
  %49 = add i32 %48, 1
  %50 = inttoptr i64 %36 to i32*
  store i32 %49, i32* %50
  br label %block_4091b9

block_4091b9:                                     ; preds = %block_4091fe, %block_409180
  %51 = phi %struct.Memory* [ %2, %block_409180 ], [ %42, %block_4091fe ]
  %52 = inttoptr i64 %36 to i32*
  %53 = load i32, i32* %52
  %54 = inttoptr i64 %23 to i32*
  %55 = load i32, i32* %54
  %56 = icmp ult i32 %53, %55
  br i1 %56, label %block_4091c5, label %block_409218

block_409218:                                     ; preds = %block_4091b9
  %57 = zext i32 %53 to i64
  store i64 %57, i64* %6, align 8, !tbaa !1240
  %58 = sub i32 %53, %55
  %59 = lshr i32 %58, 31
  %60 = lshr i32 %53, 31
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %64 = and i32 %58, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #10
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  %69 = xor i32 %55, %53
  %70 = xor i32 %69, %58
  %71 = lshr i32 %70, 4
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = icmp eq i32 %58, 0
  %75 = zext i1 %74 to i8
  %76 = trunc i32 %59 to i8
  %77 = xor i32 %59, %60
  %78 = lshr i32 %55, 31
  %79 = xor i32 %78, %60
  %80 = add nuw nsw i32 %77, %79
  %81 = icmp eq i32 %80, 2
  %82 = zext i1 %81 to i8
  store i8 0, i8* %38, align 1, !tbaa !1428
  store i8 %68, i8* %61, align 1, !tbaa !1428
  store i8 %73, i8* %39, align 1, !tbaa !1428
  store i8 %75, i8* %62, align 1, !tbaa !1428
  store i8 %76, i8* %40, align 1, !tbaa !1428
  store i8 %82, i8* %63, align 1, !tbaa !1428
  %83 = inttoptr i64 %15 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %12, align 8, !tbaa !1240
  %85 = inttoptr i64 %14 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %3, align 8, !tbaa !1240
  %87 = add i64 %14, 8
  store i64 %87, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %51

block_4091d7:                                     ; preds = %block_4091c5
  %88 = add i32 %53, 1
  %89 = inttoptr i64 %20 to i64*
  %90 = load i64, i64* %89
  %91 = inttoptr i64 %34 to i32*
  %92 = load i32, i32* %91
  %93 = zext i32 %92 to i64
  %94 = add i32 %92, 1
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %9, align 8, !tbaa !1240
  %96 = inttoptr i64 %34 to i32*
  store i32 %94, i32* %96
  store i64 %93, i64* %8, align 8, !tbaa !1240
  store i64 %93, i64* %10, align 8, !tbaa !1240
  %97 = shl nuw nsw i64 %93, 2
  %98 = add i64 %90, %97
  %99 = inttoptr i64 %98 to i32*
  store i32 %88, i32* %99
  %100 = inttoptr i64 %26 to i64*
  %101 = load i64, i64* %100
  store i64 %101, i64* %7, align 8, !tbaa !1240
  %102 = inttoptr i64 %101 to i32*
  %103 = load i32, i32* %102
  %104 = add i32 %103, 1
  %105 = inttoptr i64 %101 to i32*
  store i32 %104, i32* %105
  br label %block_4091fe

block_4091c5:                                     ; preds = %block_4091b9
  %106 = inttoptr i64 %41 to i64*
  %107 = load i64, i64* %106
  %108 = inttoptr i64 %29 to i64*
  %109 = load i64, i64* %108
  %110 = and i64 %109, %107
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %block_4091fe, label %block_4091d7
}

; Function Attrs: noinline
define %struct.Memory* @sub_4025f5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %22 = load i64, i64* %12, align 8
  %23 = add i64 %1, 167
  br label %block_4025f5

block_4025f5.loopexit:                            ; preds = %block_40255a
  br label %block_4025f5

block_4025f5:                                     ; preds = %block_4025f5.loopexit, %3
  %24 = phi i64 [ %22, %3 ], [ %362, %block_4025f5.loopexit ]
  %25 = phi i64 [ %23, %3 ], [ 4204188, %block_4025f5.loopexit ]
  %26 = phi %struct.Memory* [ %2, %3 ], [ %408, %block_4025f5.loopexit ]
  br label %block_40269c

block_402673:                                     ; preds = %block_40255a
  %27 = inttoptr i64 %366 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %362, -24
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %31, 40
  %33 = load i64, i64* %11, align 8, !tbaa !1240
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 4204182, i64* %35
  %36 = load i64, i64* %20, align 8, !alias.scope !1441, !noalias !1444
  %37 = load i64, i64* %21, align 8, !alias.scope !1441, !noalias !1444
  %38 = inttoptr i64 %33 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %33, 8
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %33, 16
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %33, 24
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  %49 = add i64 %33, 32
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  %52 = add i64 %33, 40
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %33, 48
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56
  %58 = add i64 %33, 56
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %33, 64
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %33, 72
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = inttoptr i64 %34 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %4, align 8, !alias.scope !1441, !noalias !1444
  store i64 %33, i64* %11, align 8, !alias.scope !1441, !noalias !1444
  %69 = tail call i64 @__isoc99_sscanf(i64 %28, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %32, i64 4204147, i64 %36, i64 %37, i64 %39, i64 %42, i64 %45, i64 %48, i64 %51, i64 %54, i64 %57, i64 %60, i64 %63, i64 %66), !noalias !1441
  %70 = load i64, i64* %12, align 8
  %71 = add i64 %70, -1144
  %72 = trunc i64 %69 to i32
  %73 = load i64, i64* %4, align 8
  %74 = add i64 %73, 6
  %75 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %75
  br label %block_40269c.backedge

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_40269c, %block_4026d0.loopexit
  %76 = phi i64 [ %494, %block_40269c ], [ %414, %block_4026d0.loopexit ]
  %77 = phi i64 [ %491, %block_40269c ], [ %407, %block_4026d0.loopexit ]
  %78 = phi %struct.Memory* [ %493, %block_40269c ], [ %408, %block_4026d0.loopexit ]
  %79 = add i64 %77, -1076
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80
  %82 = add i32 %81, 1
  %83 = inttoptr i64 %79 to i32*
  store i32 %82, i32* %83
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %84 = add i64 %77, -1056
  %85 = add i64 %77, -1064
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %8, align 8, !tbaa !1240
  %88 = add i64 %76, -558
  %89 = load i64, i64* %11, align 8, !tbaa !1240
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %4, align 8, !alias.scope !1446, !noalias !1449
  store i64 %89, i64* %11, align 8, !alias.scope !1446, !noalias !1449
  %94 = tail call i64 @fgets(i64 %84, i64 1024, i64 %87)
  %95 = load i64, i64* %4, align 8
  %96 = icmp eq i64 %94, 0
  %97 = select i1 %96, i64 578, i64 10
  %98 = add i64 %95, %97
  %99 = load i64, i64* %12, align 8
  br i1 %96, label %block_4026e4, label %block_4024ac

block_4025c7:                                     ; preds = %block_40255a
  %100 = inttoptr i64 %366 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %362, -24
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %104, 16
  %106 = load i64, i64* %11, align 8, !tbaa !1240
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 4204010, i64* %108
  %109 = load i64, i64* %20, align 8, !alias.scope !1451, !noalias !1454
  %110 = load i64, i64* %21, align 8, !alias.scope !1451, !noalias !1454
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %106, 8
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %106, 16
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %106, 24
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %106, 32
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %106, 40
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %106, 48
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %106, 56
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %106, 64
  %135 = inttoptr i64 %134 to i64*
  %136 = load i64, i64* %135
  %137 = add i64 %106, 72
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = inttoptr i64 %107 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %4, align 8, !alias.scope !1451, !noalias !1454
  store i64 %106, i64* %11, align 8, !alias.scope !1451, !noalias !1454
  %142 = tail call i64 @__isoc99_sscanf(i64 %101, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %105, i64 4203975, i64 %109, i64 %110, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124, i64 %127, i64 %130, i64 %133, i64 %136, i64 %139), !noalias !1451
  %143 = load i64, i64* %12, align 8
  %144 = add i64 %143, -1132
  %145 = trunc i64 %142 to i32
  %146 = load i64, i64* %4, align 8
  %147 = inttoptr i64 %144 to i32*
  store i32 %145, i32* %147
  %148 = add i64 %146, 178
  br label %block_40269c.backedge

block_4027c1:                                     ; preds = %block_402719, %block_4026e4
  %149 = add i64 %322, -4
  %150 = inttoptr i64 %149 to i32*
  store i32 1, i32* %150
  %151 = inttoptr i64 %149 to i32*
  %152 = load i32, i32* %151
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %6, align 8, !tbaa !1240
  %154 = load i64, i64* %11, align 8
  %155 = add i64 %154, 1168
  %156 = icmp ugt i64 %154, -1169
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %13, align 1, !tbaa !1264
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #10
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %14, align 1, !tbaa !1278
  %164 = xor i64 %154, 16
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %15, align 1, !tbaa !1279
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %16, align 1, !tbaa !1280
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %17, align 1, !tbaa !1281
  %173 = lshr i64 %154, 63
  %174 = xor i64 %171, %173
  %175 = add nuw nsw i64 %174, %171
  %176 = icmp eq i64 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %18, align 1, !tbaa !1282
  %178 = add i64 %154, 1176
  %179 = inttoptr i64 %155 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %12, align 8, !tbaa !1240
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %4, align 8, !tbaa !1240
  %183 = add i64 %154, 1184
  store i64 %183, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %78

block_40255a:                                     ; preds = %block_40251c
  %184 = inttoptr i64 %389 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %6, align 8, !tbaa !1240
  %186 = shl i64 %185, 3
  %187 = add i64 %186, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  store i64 %189, i64* %7, align 8, !tbaa !1240
  store i64 %189, i64* %4, align 8, !tbaa !1240
  switch i64 %189, label %497 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5.loopexit
  ]

block_4024ac:                                     ; preds = %block_4026d0
  %190 = add i64 %99, -1080
  %191 = inttoptr i64 %190 to i32*
  store i32 0, i32* %191
  %192 = inttoptr i64 %190 to i32*
  %193 = load i32, i32* %192
  %194 = sext i32 %193 to i64
  %195 = shl nsw i64 %194, 3
  %196 = add i64 %195, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %99, -1088
  %200 = add i64 %98, 32
  %201 = inttoptr i64 %199 to i64*
  store i64 %198, i64* %201
  br label %block_4024cc

block_4025fa:                                     ; preds = %block_40255a
  %202 = inttoptr i64 %366 to i64*
  %203 = load i64, i64* %202
  %204 = add i64 %362, -24
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  %207 = add i64 %206, 24
  %208 = load i64, i64* %11, align 8, !tbaa !1240
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 4204061, i64* %210
  %211 = load i64, i64* %20, align 8, !alias.scope !1456, !noalias !1459
  %212 = load i64, i64* %21, align 8, !alias.scope !1456, !noalias !1459
  %213 = inttoptr i64 %208 to i64*
  %214 = load i64, i64* %213
  %215 = add i64 %208, 8
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  %218 = add i64 %208, 16
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219
  %221 = add i64 %208, 24
  %222 = inttoptr i64 %221 to i64*
  %223 = load i64, i64* %222
  %224 = add i64 %208, 32
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = add i64 %208, 40
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %208, 48
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %208, 56
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %208, 64
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %208, 72
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = inttoptr i64 %209 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %4, align 8, !alias.scope !1456, !noalias !1459
  store i64 %208, i64* %11, align 8, !alias.scope !1456, !noalias !1459
  %244 = tail call i64 @__isoc99_sscanf(i64 %203, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %207, i64 4204026, i64 %211, i64 %212, i64 %214, i64 %217, i64 %220, i64 %223, i64 %226, i64 %229, i64 %232, i64 %235, i64 %238, i64 %241), !noalias !1456
  %245 = load i64, i64* %12, align 8
  %246 = add i64 %245, -1136
  %247 = trunc i64 %244 to i32
  %248 = load i64, i64* %4, align 8
  %249 = inttoptr i64 %246 to i32*
  store i32 %247, i32* %249
  %250 = add i64 %248, 127
  br label %block_40269c.backedge

block_4026a6:                                     ; preds = %block_4024ff, %block_4024da
  %251 = phi i64 [ %350, %block_4024ff ], [ %334, %block_4024da ]
  %252 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %253 = phi %struct.Memory* [ %408, %block_4024ff ], [ %408, %block_4024da ]
  %254 = add i64 %251, %252
  %255 = load i64, i64* %12, align 8
  %256 = add i64 %255, -1080
  %257 = inttoptr i64 %256 to i32*
  %258 = load i32, i32* %257
  %259 = add i32 %258, 1
  %260 = inttoptr i64 %256 to i32*
  store i32 %259, i32* %260
  %261 = inttoptr i64 %256 to i32*
  %262 = load i32, i32* %261
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 3
  %265 = add i64 %264, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %255, -1088
  %269 = inttoptr i64 %268 to i64*
  store i64 %267, i64* %269
  %270 = add i64 %254, -474
  br label %block_4024cc

block_4026e4:                                     ; preds = %block_4026d0
  %271 = add i64 %99, -1064
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %98, 12
  %275 = load i64, i64* %11, align 8, !tbaa !1240
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %277
  %278 = inttoptr i64 %276 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %4, align 8, !alias.scope !1461, !noalias !1464
  store i64 %275, i64* %11, align 8, !alias.scope !1461, !noalias !1464
  %280 = tail call i64 @fclose(i64 %273), !noalias !1461
  %281 = load i64, i64* %12, align 8
  %282 = add i64 %281, -24
  %283 = inttoptr i64 %282 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %284, 40
  %286 = inttoptr i64 %285 to i8*
  %287 = load i8, i8* %286
  %288 = sext i8 %287 to i32
  %289 = add nsw i32 %288, -65
  %290 = zext i32 %289 to i64
  %291 = lshr i32 %289, 31
  store i64 %290, i64* %10, align 8, !tbaa !1240
  %292 = add nsw i32 %288, -87
  %293 = zext i32 %292 to i64
  store i64 %293, i64* %7, align 8, !tbaa !1240
  %294 = icmp ult i32 %289, 22
  %295 = zext i1 %294 to i8
  store i8 %295, i8* %13, align 1, !tbaa !1264
  %296 = and i32 %292, 255
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296) #10
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  store i8 %300, i8* %14, align 1, !tbaa !1278
  %301 = xor i32 %289, 16
  %302 = xor i32 %301, %292
  %303 = lshr i32 %302, 4
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  store i8 %305, i8* %15, align 1, !tbaa !1279
  %306 = icmp eq i32 %292, 0
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %16, align 1, !tbaa !1280
  %308 = lshr i32 %292, 31
  %309 = trunc i32 %308 to i8
  store i8 %309, i8* %17, align 1, !tbaa !1281
  %310 = xor i32 %308, %291
  %311 = add nuw nsw i32 %310, %291
  %312 = icmp eq i32 %311, 2
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %18, align 1, !tbaa !1282
  %314 = add i64 %281, -1148
  %315 = trunc i64 %280 to i32
  %316 = inttoptr i64 %314 to i32*
  store i32 %315, i32* %316
  %317 = add i64 %281, -1160
  %318 = inttoptr i64 %317 to i64*
  store i64 %290, i64* %318
  %319 = add i64 %281, -1164
  %320 = inttoptr i64 %319 to i32*
  store i32 %292, i32* %320
  %321 = or i1 %306, %294
  %322 = load i64, i64* %12, align 8
  br i1 %321, label %block_402719, label %block_4027c1

block_4024da:                                     ; preds = %block_4024cc
  %323 = add i64 %407, -1056
  %324 = add i64 %414, 22
  %325 = load i64, i64* %11, align 8, !tbaa !1240
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %324, i64* %327
  %328 = inttoptr i64 %326 to i64*
  %329 = load i64, i64* %328
  store i64 %329, i64* %4, align 8, !alias.scope !1466, !noalias !1469
  store i64 %325, i64* %11, align 8, !alias.scope !1466, !noalias !1469
  %330 = tail call i64 @strstr(i64 %323, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %331 = load i64, i64* %4, align 8
  %332 = icmp eq i64 %330, 0
  %333 = select i1 %332, i64 15, i64 10
  %334 = add i64 %331, %333
  br i1 %332, label %block_4024ff, label %block_4026a6

block_4024ff:                                     ; preds = %block_4024da
  %335 = load i64, i64* %12, align 8
  %336 = add i64 %335, -1056
  %337 = add i64 %335, -1088
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338
  store i64 %339, i64* %9, align 8, !tbaa !1240
  %340 = add i64 %334, 19
  %341 = load i64, i64* %11, align 8, !tbaa !1240
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344
  store i64 %345, i64* %4, align 8, !alias.scope !1471, !noalias !1474
  store i64 %341, i64* %11, align 8, !alias.scope !1471, !noalias !1474
  %346 = tail call i64 @strstr(i64 %336, i64 %339)
  %347 = load i64, i64* %4, align 8
  %348 = icmp eq i64 %346, 0
  %349 = select i1 %348, i64 399, i64 10
  %350 = add i64 %347, %349
  br i1 %348, label %block_4026a6, label %block_40251c

block_40251c:                                     ; preds = %block_4024ff
  %351 = load i64, i64* %12, align 8
  %352 = add i64 %351, -1088
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %350, 12
  %356 = load i64, i64* %11, align 8, !tbaa !1240
  %357 = add i64 %356, -8
  %358 = inttoptr i64 %357 to i64*
  store i64 %355, i64* %358
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %4, align 8, !alias.scope !1476, !noalias !1479
  store i64 %356, i64* %11, align 8, !alias.scope !1476, !noalias !1479
  %361 = tail call i64 @strlen(i64 %354)
  %362 = load i64, i64* %12, align 8
  %363 = add i64 %362, -1055
  %364 = add i64 %363, %361
  %365 = load i64, i64* %4, align 8
  %366 = add i64 %362, -1096
  %367 = inttoptr i64 %366 to i64*
  store i64 %364, i64* %367
  %368 = add i64 %362, -1080
  %369 = inttoptr i64 %368 to i32*
  %370 = load i32, i32* %369
  %371 = zext i32 %370 to i64
  %372 = add nsw i64 %371, -6
  store i64 %372, i64* %10, align 8, !tbaa !1240
  %373 = icmp ult i32 %370, 6
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %13, align 1, !tbaa !1264
  %375 = trunc i64 %372 to i32
  %376 = and i32 %375, 255
  %377 = tail call i32 @llvm.ctpop.i32(i32 %376) #10
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  store i8 %380, i8* %14, align 1, !tbaa !1278
  %381 = xor i64 %372, %371
  %382 = lshr i64 %381, 4
  %383 = trunc i64 %382 to i8
  %384 = and i8 %383, 1
  store i8 %384, i8* %15, align 1, !tbaa !1279
  %385 = icmp eq i64 %372, 0
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %16, align 1, !tbaa !1280
  %387 = lshr i64 %372, 63
  %388 = trunc i64 %387 to i8
  store i8 %388, i8* %17, align 1, !tbaa !1281
  store i8 0, i8* %18, align 1, !tbaa !1282
  %389 = add i64 %362, -1112
  %390 = inttoptr i64 %389 to i64*
  store i64 %371, i64* %390
  %391 = add i64 %362, -1120
  %392 = inttoptr i64 %391 to i64*
  store i64 %372, i64* %392
  %393 = or i1 %385, %373
  %394 = select i1 %393, i64 50, i64 372
  %395 = add i64 %365, %394
  br i1 %393, label %block_40255a, label %block_40269c.backedge

block_40269c.backedge:                            ; preds = %block_402628, %block_40251c, %block_4025fa, %block_4025c7, %block_402673
  %396 = phi i64 [ %362, %block_40251c ], [ %485, %block_402628 ], [ %70, %block_402673 ], [ %143, %block_4025c7 ], [ %245, %block_4025fa ]
  %397 = phi i64 [ %395, %block_40251c ], [ %490, %block_402628 ], [ %74, %block_402673 ], [ %148, %block_4025c7 ], [ %250, %block_4025fa ]
  %398 = phi %struct.Memory* [ %408, %block_40251c ], [ %408, %block_402628 ], [ %408, %block_402673 ], [ %408, %block_4025c7 ], [ %408, %block_4025fa ]
  br label %block_40269c

block_402719:                                     ; preds = %block_4026e4
  %399 = add i64 %322, -1160
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %6, align 8, !tbaa !1240
  %402 = shl i64 %401, 3
  %403 = add i64 %402, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %7, align 8, !tbaa !1240
  store i64 %405, i64* %4, align 8, !tbaa !1240
  switch i64 %405, label %503 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %406 = phi i64 [ %200, %block_4024ac ], [ %270, %block_4026a6 ]
  %407 = phi i64 [ %99, %block_4024ac ], [ %255, %block_4026a6 ]
  %408 = phi %struct.Memory* [ %78, %block_4024ac ], [ %253, %block_4026a6 ]
  %409 = add i64 %407, -1088
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = icmp eq i64 %411, 0
  %413 = select i1 %412, i64 516, i64 14
  %414 = add i64 %406, %413
  br i1 %412, label %block_4026d0.loopexit, label %block_4024da

block_402628:                                     ; preds = %block_40255a
  %415 = inttoptr i64 %366 to i64*
  %416 = load i64, i64* %415
  %417 = load i64, i64* %11, align 8, !tbaa !1240
  %418 = add i64 %417, -8
  %419 = inttoptr i64 %418 to i64*
  store i64 4204084, i64* %419
  %420 = inttoptr i64 %418 to i64*
  %421 = load i64, i64* %420
  store i64 %421, i64* %4, align 8, !alias.scope !1481, !noalias !1484
  store i64 %417, i64* %11, align 8, !alias.scope !1481, !noalias !1484
  %422 = tail call i64 @strlen(i64 %416)
  %423 = load i64, i64* %4, align 8
  %424 = add i64 %423, 12
  %425 = load i64, i64* %11, align 8, !tbaa !1240
  %426 = add i64 %425, -8
  %427 = inttoptr i64 %426 to i64*
  store i64 %424, i64* %427
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428
  store i64 %429, i64* %4, align 8, !alias.scope !1486, !noalias !1489
  store i64 %425, i64* %11, align 8, !alias.scope !1486, !noalias !1489
  %430 = tail call i64 @malloc(i64 %422)
  %431 = load i64, i64* %4, align 8
  %432 = load i64, i64* %12, align 8
  %433 = add i64 %432, -24
  %434 = inttoptr i64 %433 to i64*
  %435 = load i64, i64* %434
  %436 = add i64 %435, 32
  %437 = inttoptr i64 %436 to i64*
  store i64 %430, i64* %437
  %438 = add i64 %432, -1096
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = inttoptr i64 %433 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %442, 32
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %431, 40
  %447 = load i64, i64* %11, align 8, !tbaa !1240
  %448 = add i64 %447, -8
  %449 = inttoptr i64 %448 to i64*
  store i64 %446, i64* %449
  %450 = load i64, i64* %19, align 8, !alias.scope !1491, !noalias !1494
  %451 = load i64, i64* %20, align 8, !alias.scope !1491, !noalias !1494
  %452 = load i64, i64* %21, align 8, !alias.scope !1491, !noalias !1494
  %453 = inttoptr i64 %447 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %447, 8
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %447, 16
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %447, 24
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = add i64 %447, 32
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %447, 40
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = add i64 %447, 48
  %471 = inttoptr i64 %470 to i64*
  %472 = load i64, i64* %471
  %473 = add i64 %447, 56
  %474 = inttoptr i64 %473 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %447, 64
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = add i64 %447, 72
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = inttoptr i64 %448 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %4, align 8, !alias.scope !1491, !noalias !1494
  store i64 %447, i64* %11, align 8, !alias.scope !1491, !noalias !1494
  %484 = tail call i64 @__isoc99_sscanf(i64 %440, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %445, i64 %450, i64 %451, i64 %452, i64 %454, i64 %457, i64 %460, i64 %463, i64 %466, i64 %469, i64 %472, i64 %475, i64 %478, i64 %481), !noalias !1491
  %485 = load i64, i64* %12, align 8
  %486 = add i64 %485, -1140
  %487 = trunc i64 %484 to i32
  %488 = load i64, i64* %4, align 8
  %489 = inttoptr i64 %486 to i32*
  store i32 %487, i32* %489
  %490 = add i64 %488, 52
  br label %block_40269c.backedge

block_40269c:                                     ; preds = %block_40269c.backedge, %block_4025f5
  %491 = phi i64 [ %24, %block_4025f5 ], [ %396, %block_40269c.backedge ]
  %492 = phi i64 [ %25, %block_4025f5 ], [ %397, %block_40269c.backedge ]
  %493 = phi %struct.Memory* [ %26, %block_4025f5 ], [ %398, %block_40269c.backedge ]
  %494 = add i64 %492, 52
  br label %block_4026d0

block_40256b:                                     ; preds = %block_40255a
  %495 = tail call %struct.Memory* @sub_40256b(%struct.State* nonnull %0, i64 4203883, %struct.Memory* %408)
  ret %struct.Memory* %495

block_402599:                                     ; preds = %block_40255a
  %496 = tail call %struct.Memory* @sub_402599(%struct.State* nonnull %0, i64 4203929, %struct.Memory* %408)
  ret %struct.Memory* %496

; <label>:497:                                    ; preds = %block_40255a
  %498 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %189, %struct.Memory* %408)
  ret %struct.Memory* %498

block_40279f:                                     ; preds = %block_402719
  %499 = tail call %struct.Memory* @sub_40279f(%struct.State* nonnull %0, i64 4204447, %struct.Memory* %78)
  ret %struct.Memory* %499

block_40272a:                                     ; preds = %block_402719
  %500 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %78)
  ret %struct.Memory* %500

block_402778:                                     ; preds = %block_402719
  %501 = tail call %struct.Memory* @sub_402778(%struct.State* nonnull %0, i64 4204408, %struct.Memory* %78)
  ret %struct.Memory* %501

block_402751:                                     ; preds = %block_402719
  %502 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %78)
  ret %struct.Memory* %502

; <label>:503:                                    ; preds = %block_402719
  %504 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %405, %struct.Memory* %78)
  ret %struct.Memory* %504
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408430_NumOfCombsFromNbyK(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %12, align 8, !tbaa !1240
  store i64 %16, i64* %13, align 8, !tbaa !1240
  %18 = add i64 %15, -16
  %19 = load i32, i32* %7, align 4
  %20 = inttoptr i64 %18 to i32*
  store i32 %19, i32* %20
  %21 = add i64 %15, -20
  %22 = load i32, i32* %5, align 4
  %23 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %23
  %24 = add i64 %15, -20
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %11, align 8, !tbaa !1240
  %28 = add i64 %15, -16
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29
  %31 = sub i32 %26, %30
  %32 = icmp ult i32 %26, %30
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !1264
  %35 = and i32 %31, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #10
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %39, i8* %40, align 1, !tbaa !1278
  %41 = xor i32 %30, %26
  %42 = xor i32 %41, %31
  %43 = lshr i32 %42, 4
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %45, i8* %46, align 1, !tbaa !1279
  %47 = icmp eq i32 %31, 0
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %48, i8* %49, align 1, !tbaa !1280
  %50 = lshr i32 %31, 31
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %51, i8* %52, align 1, !tbaa !1281
  %53 = lshr i32 %26, 31
  %54 = lshr i32 %30, 31
  %55 = xor i32 %54, %53
  %56 = xor i32 %50, %53
  %57 = add nuw nsw i32 %56, %55
  %58 = icmp eq i32 %57, 2
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %59, i8* %60, align 1, !tbaa !1282
  %61 = or i1 %47, %32
  %62 = select i1 %61, i64 34, i64 22
  %63 = add i64 %62, %1
  br i1 %61, label %block_408452, label %block_408446

block_408452:                                     ; preds = %block_408430
  %64 = add i64 %15, -28
  %65 = inttoptr i64 %64 to i32*
  store i32 1, i32* %65
  %66 = add i64 %15, -24
  %67 = add i64 %63, 14
  %68 = inttoptr i64 %66 to i32*
  store i32 1, i32* %68
  %69 = load i64, i64* %13, align 8
  %70 = add i64 %69, -16
  %71 = add i64 %69, -20
  %72 = add i64 %69, -16
  br label %block_408460

block_408491:                                     ; preds = %block_408460
  %73 = lshr i32 %143, 31
  %74 = lshr i32 %139, 31
  %75 = zext i1 %144 to i8
  %76 = and i32 %143, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #10
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  %81 = xor i32 %142, %139
  %82 = xor i32 %81, %143
  %83 = lshr i32 %82, 4
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = zext i1 %145 to i8
  %87 = trunc i32 %73 to i8
  %88 = xor i32 %73, %74
  %89 = lshr i32 %142, 31
  %90 = xor i32 %89, %74
  %91 = add nuw nsw i32 %88, %90
  %92 = icmp eq i32 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %75, i8* %34, align 1, !tbaa !1264
  store i8 %80, i8* %40, align 1, !tbaa !1278
  store i8 %85, i8* %46, align 1, !tbaa !1279
  store i8 %86, i8* %49, align 1, !tbaa !1280
  store i8 %87, i8* %52, align 1, !tbaa !1281
  store i8 %93, i8* %60, align 1, !tbaa !1282
  %94 = add i64 %135, -4
  %95 = inttoptr i64 %94 to i32*
  store i32 %151, i32* %95
  %96 = load i64, i64* %12, align 8, !tbaa !1240
  br label %block_408497

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %block_408460
  %97 = add i64 %135, -8
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98
  %100 = sub i32 %99, %139
  %101 = add i32 %100, 1
  %102 = zext i32 %101 to i64
  store i64 %102, i64* %9, align 8, !tbaa !1240
  %103 = sext i32 %151 to i64
  %104 = sext i32 %101 to i64
  %105 = mul nsw i64 %104, %103
  %106 = and i64 %105, 4294967295
  %107 = inttoptr i64 %70 to i32*
  %108 = load i32, i32* %107
  %109 = zext i32 %108 to i64
  %110 = udiv i64 %106, %109
  %111 = urem i64 %106, %109
  store i64 %111, i64* %10, align 8, !tbaa !1240
  %112 = trunc i64 %110 to i32
  %113 = inttoptr i64 %71 to i32*
  store i32 %112, i32* %113
  %114 = inttoptr i64 %72 to i32*
  %115 = load i32, i32* %114
  %116 = add i32 %115, 1
  %117 = inttoptr i64 %72 to i32*
  store i32 %116, i32* %117
  %118 = add i64 %148, -12
  br label %block_408460

block_408446:                                     ; preds = %block_408430
  %119 = add i64 %15, -12
  %120 = inttoptr i64 %119 to i32*
  store i32 0, i32* %120
  br label %block_408497

block_408497:                                     ; preds = %block_408446, %block_408491
  %121 = phi i64 [ %96, %block_408491 ], [ %16, %block_408446 ]
  %122 = phi i64 [ %135, %block_408491 ], [ %16, %block_408446 ]
  %123 = phi %struct.Memory* [ %136, %block_408491 ], [ %2, %block_408446 ]
  %124 = add i64 %122, -4
  %125 = inttoptr i64 %124 to i32*
  %126 = load i32, i32* %125
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %8, align 8, !tbaa !1240
  %128 = add i64 %121, 8
  %129 = inttoptr i64 %121 to i64*
  %130 = load i64, i64* %129
  store i64 %130, i64* %13, align 8, !tbaa !1240
  %131 = inttoptr i64 %128 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %3, align 8, !tbaa !1240
  %133 = add i64 %121, 16
  store i64 %133, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %123

block_408460:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, %block_408452
  %134 = phi i64 [ %67, %block_408452 ], [ %118, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %135 = phi i64 [ %16, %block_408452 ], [ %69, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %136 = phi %struct.Memory* [ %2, %block_408452 ], [ %136, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %137 = add i64 %135, -16
  %138 = inttoptr i64 %137 to i32*
  %139 = load i32, i32* %138
  %140 = add i64 %135, -12
  %141 = inttoptr i64 %140 to i32*
  %142 = load i32, i32* %141
  %143 = sub i32 %139, %142
  %144 = icmp ult i32 %139, %142
  %145 = icmp eq i32 %143, 0
  %146 = or i1 %145, %144
  %147 = select i1 %146, i64 12, i64 49
  %148 = add i64 %134, %147
  %149 = add i64 %135, -20
  %150 = inttoptr i64 %149 to i32*
  %151 = load i32, i32* %150
  br i1 %146, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, label %block_408491
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40414a(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40414a:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -16
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  %12 = load i64, i64* bitcast (%checksumWlo_type* @checksumWlo to i64*)
  %13 = load i64, i64* bitcast (%checksumWhi_type* @checksumWhi to i64*)
  %14 = mul i64 %13, 1000000
  store i64 %14, i64* %6, align 8, !tbaa !1240
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %14, %12
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %22 = lshr i64 %21, 63
  %23 = sub i64 %11, %21
  %24 = icmp ult i64 %11, %21
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %15, align 1, !tbaa !1264
  %26 = trunc i64 %23 to i32
  %27 = and i32 %26, 255
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #10
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %16, align 1, !tbaa !1278
  %32 = xor i64 %21, %11
  %33 = xor i64 %32, %23
  %34 = lshr i64 %33, 4
  %35 = trunc i64 %34 to i8
  %36 = and i8 %35, 1
  store i8 %36, i8* %17, align 1, !tbaa !1279
  %37 = icmp eq i64 %23, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %18, align 1, !tbaa !1280
  %39 = lshr i64 %23, 63
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %19, align 1, !tbaa !1281
  %41 = lshr i64 %11, 63
  %42 = xor i64 %22, %41
  %43 = xor i64 %39, %41
  %44 = add nuw nsw i64 %43, %42
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %20, align 1, !tbaa !1282
  %47 = load i64, i64* %7, align 8
  %48 = add i64 %47, -4
  br i1 %37, label %block_40416e, label %block_40417a

block_4041fc:                                     ; preds = %block_40416e, %block_40417a
  %49 = phi %struct.Memory* [ %2, %block_40417a ], [ %2, %block_40416e ]
  %50 = add i64 %47, -4
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %4, align 8, !tbaa !1240
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !1240
  %56 = add i64 %55, 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %7, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %55, 16
  store i64 %61, i64* %54, align 8, !tbaa !1240
  ret %struct.Memory* %49

block_40417a:                                     ; preds = %block_40414a
  %62 = inttoptr i64 %48 to i32*
  store i32 1, i32* %62
  br label %block_4041fc

block_40416e:                                     ; preds = %block_40414a
  %63 = inttoptr i64 %48 to i32*
  store i32 0, i32* %63
  br label %block_4041fc
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b80(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400b80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_60f000__got_plt_type* @seg_60f000__got_plt to i64), i64 8) to i64*)
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8
  store i64 %7, i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_60f000__got_plt_type* @seg_60f000__got_plt to i64), i64 16) to i64*)
  store i64 %9, i64* %3, align 8, !tbaa !1240
  %10 = icmp eq i64 %9, 4197260
  br i1 %10, label %block_400b8c, label %17

block_400b8c:                                     ; preds = %block_400b80
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !alias.scope !1496, !noalias !1499
  %14 = inttoptr i64 %7 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %3, align 8, !alias.scope !1496, !noalias !1499
  store i64 %6, i64* %5, align 8, !alias.scope !1496, !noalias !1499
  %16 = tail call i64 @free(i64 %13), !noalias !1496
  store i64 %16, i64* %11, align 8, !alias.scope !1496, !noalias !1499
  ret %struct.Memory* %2

; <label>:17:                                     ; preds = %block_400b80
  %18 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %9, %struct.Memory* %2)
  ret %struct.Memory* %18
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b6e(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402b6e:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = load i64, i64* %13, align 8
  %16 = add i64 %15, -56
  %17 = inttoptr i64 %16 to i64*
  store i64 ptrtoint (%adcexpW_type* @adcexpW to i64), i64* %17
  %18 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = icmp eq i32 %18, 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %26 = select i1 %22, i64 66, i64 406
  %27 = add i64 %26, %1
  br i1 %22, label %block_402bb0, label %block_402b6e.block_402d04_crit_edge

block_402b6e.block_402d04_crit_edge:              ; preds = %block_402b6e
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402d04

block_402df9:                                     ; preds = %block_402d23
  %29 = add i64 %433, 7
  %30 = inttoptr i64 %415 to i32*
  store i32 0, i32* %30
  br label %block_402e00

block_402c77:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2, %block_402c54
  %31 = phi i64 [ %107, %block_402c54 ], [ %567, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %32 = phi i64 [ %101, %block_402c54 ], [ %557, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %33 = phi %struct.Memory* [ %122, %block_402c54 ], [ %498, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %34 = add i64 %32, -40
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35
  %37 = add i64 %32, -8
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = sub i32 %36, %39
  %41 = lshr i32 %40, 31
  %42 = trunc i32 %41 to i8
  %43 = lshr i32 %36, 31
  %44 = lshr i32 %39, 31
  %45 = xor i32 %44, %43
  %46 = xor i32 %41, %43
  %47 = add nuw nsw i32 %46, %45
  %48 = icmp eq i32 %47, 2
  %49 = icmp ne i8 %42, 0
  %50 = xor i1 %49, %48
  %51 = select i1 %50, i64 12, i64 136
  %52 = add i64 %31, %51
  br i1 %50, label %block_402c83, label %block_402cff

block_402dd5:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1
  %53 = trunc i64 %692 to i32
  %54 = and i64 %692, 4294967295
  store i64 %54, i64* %8, align 8, !tbaa !1240
  %55 = add i64 %711, 17
  %56 = inttoptr i64 %693 to i32*
  store i32 %53, i32* %56
  br label %block_402de6

block_402c54:                                     ; preds = %block_402bb7
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64* %10, align 8, !tbaa !1240
  %57 = load i64, i64* @stdout
  store i64 %57, i64* %11, align 8, !tbaa !1240
  %58 = add i64 %141, 25
  %59 = load i64, i64* %12, align 8, !tbaa !1240
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %65 = load i64, i64* %234, align 8, !alias.scope !1501, !noalias !1504
  %66 = load i64, i64* %62, align 8, !alias.scope !1501, !noalias !1504
  %67 = load i64, i64* %14, align 8, !alias.scope !1501, !noalias !1504
  %68 = load i64, i64* %64, align 8, !alias.scope !1501, !noalias !1504
  %69 = inttoptr i64 %59 to i64*
  %70 = load i64, i64* %69
  %71 = add i64 %59, 8
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  %74 = add i64 %59, 16
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75
  %77 = add i64 %59, 24
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78
  %80 = add i64 %59, 32
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %59, 40
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %59, 48
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %59, 56
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %59, 64
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  %95 = add i64 %59, 72
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  %98 = inttoptr i64 %60 to i64*
  %99 = load i64, i64* %98
  store i64 %99, i64* %3, align 8, !alias.scope !1501, !noalias !1504
  store i64 %59, i64* %12, align 8, !alias.scope !1501, !noalias !1504
  %100 = tail call i64 @fprintf(i64 %57, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64 %65, i64 %66, i64 %67, i64 %68, i64 %70, i64 %73, i64 %76, i64 %79, i64 %82, i64 %85, i64 %88, i64 %91, i64 %94, i64 %97), !noalias !1501
  %101 = load i64, i64* %13, align 8
  %102 = add i64 %101, -40
  %103 = load i64, i64* %3, align 8
  %104 = inttoptr i64 %102 to i32*
  store i32 0, i32* %104
  %105 = add i64 %101, -88
  %106 = trunc i64 %100 to i32
  %107 = add i64 %103, 10
  %108 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %108
  br label %block_402c77

block_402bc3:                                     ; preds = %block_402bb7
  %109 = sext i32 %125 to i64
  %110 = shl nsw i64 %109, 3
  %111 = add i64 %110, ptrtoint (%adcgen_type* @adcgen to i64)
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = trunc i64 %113 to i32
  %115 = add i64 %121, -60
  %116 = inttoptr i64 %115 to i32*
  store i32 %114, i32* %116
  %117 = add i64 %121, -44
  %118 = add i64 %141, 24
  %119 = inttoptr i64 %117 to i32*
  store i32 0, i32* %119
  br label %block_402bdb

block_402bb7:                                     ; preds = %block_402bb0, %block_402c36
  %120 = phi i64 [ %232, %block_402bb0 ], [ %230, %block_402c36 ]
  %121 = phi i64 [ %15, %block_402bb0 ], [ %347, %block_402c36 ]
  %122 = phi %struct.Memory* [ %2, %block_402bb0 ], [ %348, %block_402c36 ]
  %123 = add i64 %121, -40
  %124 = inttoptr i64 %123 to i32*
  %125 = load i32, i32* %124
  %126 = add i64 %121, -8
  %127 = inttoptr i64 %126 to i32*
  %128 = load i32, i32* %127
  %129 = sub i32 %125, %128
  %130 = lshr i32 %129, 31
  %131 = trunc i32 %130 to i8
  %132 = lshr i32 %125, 31
  %133 = lshr i32 %128, 31
  %134 = xor i32 %133, %132
  %135 = xor i32 %130, %132
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = icmp ne i8 %131, 0
  %139 = xor i1 %138, %137
  %140 = select i1 %139, i64 12, i64 157
  %141 = add i64 %120, %140
  br i1 %139, label %block_402bc3, label %block_402c54

block_402bf8:                                     ; preds = %block_402bdb
  %142 = add i64 %360, ptrtoint (%adcgen_type* @adcgen to i64)
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  %145 = add i64 %347, -60
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146
  %148 = sext i32 %147 to i64
  %149 = sext i32 %147 to i128
  %150 = and i128 %149, -18446744073709551616
  %151 = sext i64 %144 to i128
  %152 = and i128 %151, -18446744073709551616
  %153 = zext i64 %148 to i128
  %154 = or i128 %150, %153
  %155 = zext i64 %144 to i128
  %156 = or i128 %152, %155
  %157 = mul nsw i128 %156, %154
  %158 = trunc i128 %157 to i64
  %159 = sext i64 %158 to i128
  %160 = icmp ne i128 %159, %157
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %19, align 1, !tbaa !1264
  %162 = trunc i128 %157 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #10
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %168 = lshr i64 %158, 63
  %169 = trunc i64 %168 to i8
  store i8 %169, i8* %24, align 1, !tbaa !1281
  store i8 %161, i8* %25, align 1, !tbaa !1282
  %170 = trunc i128 %157 to i32
  %171 = inttoptr i64 %145 to i32*
  store i32 %170, i32* %171
  %172 = inttoptr i64 %145 to i32*
  %173 = load i32, i32* %172
  %174 = sext i32 %173 to i64
  store i64 %174, i64* %7, align 8, !tbaa !1240
  %175 = inttoptr i64 %356 to i32*
  %176 = load i32, i32* %175
  %177 = sext i32 %176 to i64
  store i64 %177, i64* %8, align 8, !tbaa !1240
  %178 = ashr i64 %174, 63
  store i64 %178, i64* %234, align 8, !tbaa !1240
  %179 = shl nsw i64 %177, 3
  %180 = add i64 %179, ptrtoint (%adcprime_type* @adcprime to i64)
  %181 = add i64 %377, 43
  store i64 %181, i64* %3, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182
  %184 = sext i64 %183 to i128
  %185 = and i128 %184, -18446744073709551616
  %186 = zext i64 %178 to i128
  %187 = shl nuw i128 %186, 64
  %188 = zext i64 %174 to i128
  %189 = or i128 %187, %188
  %190 = zext i64 %183 to i128
  %191 = or i128 %185, %190
  %192 = sdiv i128 %189, %191
  %193 = trunc i128 %192 to i64
  %194 = and i128 %192, 18446744073709551615
  %195 = sext i64 %193 to i128
  %196 = and i128 %195, -18446744073709551616
  %197 = or i128 %196, %194
  %198 = icmp eq i128 %192, %197
  br i1 %198, label %204, label %199

; <label>:199:                                    ; preds = %block_402bf8
  %200 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %181, %struct.Memory* %348) #14
  %201 = load i32, i32* %6, align 4
  %202 = load i64, i64* %3, align 8
  %203 = load i64, i64* %13, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:204:                                    ; preds = %block_402bf8
  %205 = srem i128 %189, %191
  %206 = trunc i128 %205 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %204, %199
  %207 = phi i64 [ %203, %199 ], [ %347, %204 ]
  %208 = phi i64 [ %202, %199 ], [ %181, %204 ]
  %209 = phi i32 [ %201, %199 ], [ %206, %204 ]
  %210 = phi %struct.Memory* [ %200, %199 ], [ %348, %204 ]
  %211 = zext i32 %209 to i64
  store i64 %211, i64* %10, align 8, !tbaa !1240
  %212 = add i64 %207, -60
  %213 = inttoptr i64 %212 to i32*
  store i32 %209, i32* %213
  %214 = add i64 %207, -44
  %215 = inttoptr i64 %214 to i32*
  %216 = load i32, i32* %215
  %217 = add i32 %216, 1
  %218 = inttoptr i64 %214 to i32*
  store i32 %217, i32* %218
  %219 = add i64 %208, -72
  br label %block_402bdb

block_402c36:                                     ; preds = %block_402bdb
  %220 = add i64 %347, -60
  %221 = inttoptr i64 %220 to i32*
  %222 = load i32, i32* %221
  %223 = sext i32 %222 to i64
  store i64 %359, i64* %8, align 8, !tbaa !1240
  %224 = add i64 %360, ptrtoint (%adcgen_type* @adcgen to i64)
  %225 = inttoptr i64 %224 to i64*
  store i64 %223, i64* %225
  %226 = inttoptr i64 %356 to i32*
  %227 = load i32, i32* %226
  %228 = add i32 %227, 1
  %229 = inttoptr i64 %356 to i32*
  store i32 %228, i32* %229
  %230 = add i64 %377, -127
  br label %block_402bb7

block_402bb0:                                     ; preds = %block_402b6e
  %231 = add i64 %15, -40
  %232 = add i64 %27, 7
  %233 = inttoptr i64 %231 to i32*
  store i32 0, i32* %233
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402bb7

block_402e0c:                                     ; preds = %block_402e00
  %235 = sext i32 %717 to i64
  %236 = shl nsw i64 %235, 3
  %237 = add i64 %236, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %713, -48
  %241 = inttoptr i64 %240 to i32*
  %242 = load i32, i32* %241
  %243 = sext i32 %242 to i64
  %244 = sext i64 %239 to i128
  %245 = and i128 %244, -18446744073709551616
  %246 = sext i32 %242 to i128
  %247 = and i128 %246, -18446744073709551616
  %248 = zext i64 %239 to i128
  %249 = or i128 %245, %248
  %250 = zext i64 %243 to i128
  %251 = or i128 %247, %250
  %252 = mul nsw i128 %249, %251
  %253 = trunc i128 %252 to i64
  %254 = sext i64 %253 to i128
  %255 = icmp ne i128 %254, %252
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %19, align 1, !tbaa !1264
  %257 = trunc i128 %252 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #10
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %263 = lshr i64 %253, 63
  %264 = trunc i64 %263 to i8
  store i8 %264, i8* %24, align 1, !tbaa !1281
  store i8 %256, i8* %25, align 1, !tbaa !1282
  %265 = add i64 %713, -32
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %236, %267
  %269 = inttoptr i64 %268 to i64*
  store i64 %253, i64* %269
  %270 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%adcgen_type* @adcgen to i64), i64 160) to i32*)
  %271 = sext i32 %270 to i64
  %272 = inttoptr i64 %265 to i64*
  %273 = load i64, i64* %272
  %274 = inttoptr i64 %715 to i32*
  %275 = load i32, i32* %274
  %276 = sext i32 %275 to i64
  %277 = shl nsw i64 %276, 3
  %278 = add i64 %277, %273
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %713, -120
  %282 = inttoptr i64 %281 to i64*
  store i64 %271, i64* %282
  store i64 %280, i64* %7, align 8, !tbaa !1240
  %283 = add i64 %713, -128
  %284 = inttoptr i64 %283 to i64*
  store i64 %271, i64* %284
  %285 = ashr i64 %280, 63
  store i64 %285, i64* %434, align 8, !tbaa !1240
  %286 = inttoptr i64 %283 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %8, align 8, !tbaa !1240
  %288 = add i64 %733, 80
  store i64 %288, i64* %3, align 8
  %289 = sext i64 %287 to i128
  %290 = and i128 %289, -18446744073709551616
  %291 = zext i64 %285 to i128
  %292 = shl nuw i128 %291, 64
  %293 = zext i64 %280 to i128
  %294 = or i128 %292, %293
  %295 = zext i64 %287 to i128
  %296 = or i128 %290, %295
  %297 = sdiv i128 %294, %296
  %298 = trunc i128 %297 to i64
  %299 = and i128 %297, 18446744073709551615
  %300 = sext i64 %298 to i128
  %301 = and i128 %300, -18446744073709551616
  %302 = or i128 %301, %299
  %303 = icmp eq i128 %297, %302
  br i1 %303, label %308, label %304

; <label>:304:                                    ; preds = %block_402e0c
  %305 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %288, %struct.Memory* %714) #14
  %306 = load i64, i64* %3, align 8
  %307 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:308:                                    ; preds = %block_402e0c
  %309 = srem i128 %294, %296
  %310 = trunc i128 %309 to i64
  store i64 %310, i64* %434, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %308, %304
  %311 = phi i64 [ %307, %304 ], [ %298, %308 ]
  %312 = phi i64 [ %306, %304 ], [ %288, %308 ]
  %313 = phi %struct.Memory* [ %305, %304 ], [ %714, %308 ]
  %314 = load i64, i64* %13, align 8
  %315 = add i64 %314, -120
  %316 = inttoptr i64 %315 to i64*
  %317 = load i64, i64* %316
  %318 = mul i64 %311, %317
  store i64 %318, i64* %10, align 8, !tbaa !1240
  %319 = add i64 %314, -32
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320
  %322 = add i64 %314, -40
  %323 = inttoptr i64 %322 to i32*
  %324 = load i32, i32* %323
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %11, align 8, !tbaa !1240
  %326 = shl nsw i64 %325, 3
  %327 = add i64 %326, %321
  %328 = inttoptr i64 %327 to i64*
  %329 = load i64, i64* %328
  %330 = sub i64 %329, %318
  store i64 %330, i64* %14, align 8, !tbaa !1240
  %331 = inttoptr i64 %327 to i64*
  store i64 %330, i64* %331
  %332 = inttoptr i64 %322 to i32*
  %333 = load i32, i32* %332
  %334 = add i32 %333, 1
  %335 = load i64, i64* %13, align 8
  %336 = add i64 %335, -40
  %337 = inttoptr i64 %336 to i32*
  store i32 %334, i32* %337
  %338 = add i64 %312, -92
  br label %block_402e00

block_402de6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1, %block_402dd5
  %339 = phi i64 [ %711, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %55, %block_402dd5 ]
  %340 = phi %struct.Memory* [ %650, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %650, %block_402dd5 ]
  %341 = inttoptr i64 %679 to i32*
  %342 = load i32, i32* %341
  %343 = add i32 %342, 1
  %344 = inttoptr i64 %679 to i32*
  store i32 %343, i32* %344
  %345 = add i64 %339, -195
  br label %block_402d23

block_402bdb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit, %block_402bc3
  %346 = phi i64 [ %118, %block_402bc3 ], [ %219, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %347 = phi i64 [ %121, %block_402bc3 ], [ %207, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %348 = phi %struct.Memory* [ %122, %block_402bc3 ], [ %210, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %349 = add i64 %347, -44
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = add i64 %347, -56
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %347, -40
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  store i64 %359, i64* %9, align 8, !tbaa !1240
  %360 = shl nsw i64 %359, 3
  %361 = add i64 %360, %355
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %363, -1
  %365 = lshr i64 %364, 63
  %366 = sub i64 %352, %364
  %367 = lshr i64 %366, 63
  %368 = trunc i64 %367 to i8
  %369 = lshr i64 %352, 63
  %370 = xor i64 %365, %369
  %371 = xor i64 %367, %369
  %372 = add nuw nsw i64 %371, %370
  %373 = icmp eq i64 %372, 2
  %374 = icmp ne i8 %368, 0
  %375 = xor i1 %374, %373
  %376 = select i1 %375, i64 29, i64 91
  %377 = add i64 %346, %376
  br i1 %375, label %block_402bf8, label %block_402c36

block_402e85:                                     ; preds = %block_402e00
  %378 = add i64 %713, -4
  %379 = inttoptr i64 %378 to i32*
  store i32 1, i32* %379
  %380 = inttoptr i64 %378 to i32*
  %381 = load i32, i32* %380
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %7, align 8, !tbaa !1240
  %383 = load i64, i64* %12, align 8
  %384 = add i64 %383, 128
  %385 = icmp ugt i64 %383, -129
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %19, align 1, !tbaa !1264
  %387 = trunc i64 %384 to i32
  %388 = and i32 %387, 255
  %389 = tail call i32 @llvm.ctpop.i32(i32 %388) #10
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  store i8 %392, i8* %20, align 1, !tbaa !1278
  %393 = xor i64 %384, %383
  %394 = lshr i64 %393, 4
  %395 = trunc i64 %394 to i8
  %396 = and i8 %395, 1
  store i8 %396, i8* %21, align 1, !tbaa !1279
  %397 = icmp eq i64 %384, 0
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %23, align 1, !tbaa !1280
  %399 = lshr i64 %384, 63
  %400 = trunc i64 %399 to i8
  store i8 %400, i8* %24, align 1, !tbaa !1281
  %401 = lshr i64 %383, 63
  %402 = xor i64 %399, %401
  %403 = add nuw nsw i64 %402, %399
  %404 = icmp eq i64 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %25, align 1, !tbaa !1282
  %406 = add i64 %383, 136
  %407 = inttoptr i64 %384 to i64*
  %408 = load i64, i64* %407
  store i64 %408, i64* %13, align 8, !tbaa !1240
  %409 = inttoptr i64 %406 to i64*
  %410 = load i64, i64* %409
  store i64 %410, i64* %3, align 8, !tbaa !1240
  %411 = add i64 %383, 144
  store i64 %411, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %714

block_402d23:                                     ; preds = %block_402d04, %block_402de6
  %412 = phi i64 [ %443, %block_402d04 ], [ %345, %block_402de6 ]
  %413 = phi i64 [ %435, %block_402d04 ], [ %678, %block_402de6 ]
  %414 = phi %struct.Memory* [ %437, %block_402d04 ], [ %340, %block_402de6 ]
  %415 = add i64 %413, -40
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = add i64 %413, -8
  %419 = inttoptr i64 %418 to i32*
  %420 = load i32, i32* %419
  %421 = sub i32 %417, %420
  %422 = lshr i32 %421, 31
  %423 = trunc i32 %422 to i8
  %424 = lshr i32 %417, 31
  %425 = lshr i32 %420, 31
  %426 = xor i32 %425, %424
  %427 = xor i32 %422, %424
  %428 = add nuw nsw i32 %427, %426
  %429 = icmp eq i32 %428, 2
  %430 = icmp ne i8 %423, 0
  %431 = xor i1 %430, %429
  %432 = select i1 %431, i64 12, i64 214
  %433 = add i64 %412, %432
  br i1 %431, label %block_402d2f, label %block_402df9

block_402d04:                                     ; preds = %block_402cff, %block_402b6e.block_402d04_crit_edge
  %434 = phi i64* [ %28, %block_402b6e.block_402d04_crit_edge ], [ %234, %block_402cff ]
  %435 = phi i64 [ %15, %block_402b6e.block_402d04_crit_edge ], [ %32, %block_402cff ]
  %436 = phi i64 [ %27, %block_402b6e.block_402d04_crit_edge ], [ %445, %block_402cff ]
  %437 = phi %struct.Memory* [ %2, %block_402b6e.block_402d04_crit_edge ], [ %33, %block_402cff ]
  %438 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %439 = add i32 %438, 1
  store i32 %439, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %440 = add i64 %435, -48
  %441 = inttoptr i64 %440 to i32*
  store i32 0, i32* %441
  %442 = add i64 %435, -40
  %443 = add i64 %436, 31
  %444 = inttoptr i64 %442 to i32*
  store i32 0, i32* %444
  br label %block_402d23

block_402cff:                                     ; preds = %block_402c77
  %445 = add i64 %52, 5
  br label %block_402d04

block_402c83:                                     ; preds = %block_402c77
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), i64* %10, align 8, !tbaa !1240
  store i64 2, i64* %8, align 8, !tbaa !1240
  %446 = sext i32 %36 to i64
  %447 = shl nsw i64 %446, 3
  %448 = add i64 %447, ptrtoint (%adcprime_type* @adcprime to i64)
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %450, 1
  %452 = icmp eq i64 %450, -1
  %453 = icmp eq i64 %451, 0
  %454 = or i1 %452, %453
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %19, align 1, !tbaa !1264
  %456 = trunc i64 %451 to i32
  %457 = and i32 %456, 255
  %458 = tail call i32 @llvm.ctpop.i32(i32 %457) #10
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  store i8 %461, i8* %20, align 1, !tbaa !1278
  %462 = xor i64 %451, %450
  %463 = lshr i64 %462, 4
  %464 = trunc i64 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %21, align 1, !tbaa !1279
  %466 = zext i1 %453 to i8
  store i8 %466, i8* %23, align 1, !tbaa !1280
  %467 = lshr i64 %451, 63
  %468 = trunc i64 %467 to i8
  store i8 %468, i8* %24, align 1, !tbaa !1281
  %469 = lshr i64 %450, 63
  %470 = xor i64 %467, %469
  %471 = add nuw nsw i64 %470, %467
  %472 = icmp eq i64 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %25, align 1, !tbaa !1282
  store i64 %451, i64* %7, align 8, !tbaa !1240
  %474 = ashr i64 %451, 63
  store i64 %474, i64* %234, align 8, !tbaa !1240
  %475 = add i64 %52, 41
  store i64 %475, i64* %3, align 8
  %476 = zext i64 %474 to i128
  %477 = shl nuw i128 %476, 64
  %478 = zext i64 %451 to i128
  %479 = or i128 %477, %478
  %480 = sdiv i128 %479, 2
  %481 = trunc i128 %480 to i64
  %482 = and i128 %480, 18446744073709551615
  %483 = sext i64 %481 to i128
  %484 = and i128 %483, -18446744073709551616
  %485 = or i128 %484, %482
  %486 = icmp eq i128 %480, %485
  br i1 %486, label %493, label %487

; <label>:487:                                    ; preds = %block_402c83
  %488 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %475, %struct.Memory* %33) #14
  %489 = load i64, i64* %13, align 8
  %490 = load i64, i64* %3, align 8
  %491 = load i64, i64* %7, align 8
  %492 = load i64, i64* %63, align 8, !alias.scope !1506, !noalias !1509
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:493:                                    ; preds = %block_402c83
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %493, %487
  %494 = phi i64 [ %492, %487 ], [ add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), %493 ]
  %495 = phi i64 [ %491, %487 ], [ %481, %493 ]
  %496 = phi i64 [ %490, %487 ], [ %475, %493 ]
  %497 = phi i64 [ %489, %487 ], [ %32, %493 ]
  %498 = phi %struct.Memory* [ %488, %487 ], [ %33, %493 ]
  %499 = add i64 %497, -40
  %500 = inttoptr i64 %499 to i32*
  %501 = load i32, i32* %500
  %502 = sext i32 %501 to i64
  %503 = shl nsw i64 %502, 3
  %504 = add i64 %503, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %505 = inttoptr i64 %504 to i64*
  store i64 %495, i64* %505
  %506 = load i64, i64* @stdout
  store i64 %506, i64* %11, align 8, !tbaa !1240
  %507 = inttoptr i64 %499 to i32*
  %508 = load i32, i32* %507
  %509 = sext i32 %508 to i64
  %510 = shl nsw i64 %509, 3
  %511 = add i64 %510, ptrtoint (%adcprime_type* @adcprime to i64)
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %510, ptrtoint (%adcgen_type* @adcgen to i64)
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  store i64 %516, i64* %8, align 8, !tbaa !1240
  %517 = add i64 %510, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %518 = inttoptr i64 %517 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %14, align 8, !tbaa !1240
  store i64 %513, i64* %9, align 8, !tbaa !1240
  %520 = add i64 %496, 66
  %521 = load i64, i64* %12, align 8, !tbaa !1240
  %522 = add i64 %521, -8
  %523 = inttoptr i64 %522 to i64*
  store i64 %520, i64* %523
  %524 = load i64, i64* %64, align 8, !alias.scope !1506, !noalias !1509
  %525 = inttoptr i64 %521 to i64*
  %526 = load i64, i64* %525
  %527 = add i64 %521, 8
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %521, 16
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  %533 = add i64 %521, 24
  %534 = inttoptr i64 %533 to i64*
  %535 = load i64, i64* %534
  %536 = add i64 %521, 32
  %537 = inttoptr i64 %536 to i64*
  %538 = load i64, i64* %537
  %539 = add i64 %521, 40
  %540 = inttoptr i64 %539 to i64*
  %541 = load i64, i64* %540
  %542 = add i64 %521, 48
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = add i64 %521, 56
  %546 = inttoptr i64 %545 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %521, 64
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %521, 72
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = inttoptr i64 %522 to i64*
  %555 = load i64, i64* %554
  store i64 %555, i64* %3, align 8, !alias.scope !1506, !noalias !1509
  store i64 %521, i64* %12, align 8, !alias.scope !1506, !noalias !1509
  %556 = tail call i64 @fprintf(i64 %506, i64 %494, i64 %513, i64 %516, i64 %519, i64 %524, i64 %526, i64 %529, i64 %532, i64 %535, i64 %538, i64 %541, i64 %544, i64 %547, i64 %550, i64 %553), !noalias !1506
  %557 = load i64, i64* %13, align 8
  %558 = add i64 %557, -92
  %559 = trunc i64 %556 to i32
  %560 = load i64, i64* %3, align 8
  %561 = inttoptr i64 %558 to i32*
  store i32 %559, i32* %561
  %562 = add i64 %557, -40
  %563 = inttoptr i64 %562 to i32*
  %564 = load i32, i32* %563
  %565 = add i32 %564, 1
  %566 = inttoptr i64 %562 to i32*
  store i32 %565, i32* %566
  %567 = add i64 %560, -119
  br label %block_402c77

block_402d2f:                                     ; preds = %block_402d23
  %568 = sext i32 %417 to i64
  %569 = shl nsw i64 %568, 3
  %570 = add i64 %569, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %571 = inttoptr i64 %570 to i64*
  %572 = load i64, i64* %571
  %573 = add i64 %569, ptrtoint (%adcgen_type* @adcgen to i64)
  %574 = inttoptr i64 %573 to i64*
  %575 = load i64, i64* %574
  %576 = sext i64 %572 to i128
  %577 = and i128 %576, -18446744073709551616
  %578 = sext i64 %575 to i128
  %579 = and i128 %578, -18446744073709551616
  %580 = zext i64 %572 to i128
  %581 = or i128 %577, %580
  %582 = zext i64 %575 to i128
  %583 = or i128 %579, %582
  %584 = mul nsw i128 %583, %581
  %585 = trunc i128 %584 to i64
  %586 = sext i64 %585 to i128
  %587 = icmp ne i128 %586, %584
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %19, align 1, !tbaa !1264
  %589 = trunc i128 %584 to i32
  %590 = and i32 %589, 255
  %591 = tail call i32 @llvm.ctpop.i32(i32 %590) #10
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  %594 = xor i8 %593, 1
  store i8 %594, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %595 = lshr i64 %585, 63
  %596 = trunc i64 %595 to i8
  store i8 %596, i8* %24, align 1, !tbaa !1281
  store i8 %588, i8* %25, align 1, !tbaa !1282
  %597 = add i64 %413, -24
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %569, %599
  %601 = inttoptr i64 %600 to i64*
  store i64 %585, i64* %601
  %602 = inttoptr i64 %415 to i32*
  %603 = load i32, i32* %602
  %604 = sext i32 %603 to i64
  %605 = shl nsw i64 %604, 3
  %606 = add i64 %605, ptrtoint (%adcprime_type* @adcprime to i64)
  %607 = inttoptr i64 %606 to i64*
  %608 = load i64, i64* %607
  %609 = inttoptr i64 %597 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %605, %610
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %413, -104
  %615 = inttoptr i64 %614 to i64*
  store i64 %608, i64* %615
  store i64 %613, i64* %7, align 8, !tbaa !1240
  %616 = add i64 %413, -112
  %617 = inttoptr i64 %616 to i64*
  store i64 %604, i64* %617
  %618 = ashr i64 %613, 63
  store i64 %618, i64* %434, align 8, !tbaa !1240
  %619 = inttoptr i64 %616 to i64*
  %620 = load i64, i64* %619
  store i64 %620, i64* %8, align 8, !tbaa !1240
  %621 = shl i64 %620, 3
  %622 = add i64 %621, ptrtoint (%adcprime_type* @adcprime to i64)
  %623 = add i64 %433, 90
  store i64 %623, i64* %3, align 8
  %624 = inttoptr i64 %622 to i64*
  %625 = load i64, i64* %624
  %626 = sext i64 %625 to i128
  %627 = and i128 %626, -18446744073709551616
  %628 = zext i64 %618 to i128
  %629 = shl nuw i128 %628, 64
  %630 = zext i64 %613 to i128
  %631 = or i128 %629, %630
  %632 = zext i64 %625 to i128
  %633 = or i128 %627, %632
  %634 = sdiv i128 %631, %633
  %635 = trunc i128 %634 to i64
  %636 = and i128 %634, 18446744073709551615
  %637 = sext i64 %635 to i128
  %638 = and i128 %637, -18446744073709551616
  %639 = or i128 %638, %636
  %640 = icmp eq i128 %634, %639
  br i1 %640, label %645, label %641

; <label>:641:                                    ; preds = %block_402d2f
  %642 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %623, %struct.Memory* %414) #14
  %643 = load i64, i64* %3, align 8
  %644 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:645:                                    ; preds = %block_402d2f
  %646 = srem i128 %631, %633
  %647 = trunc i128 %646 to i64
  store i64 %647, i64* %434, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %645, %641
  %648 = phi i64 [ %644, %641 ], [ %635, %645 ]
  %649 = phi i64 [ %643, %641 ], [ %623, %645 ]
  %650 = phi %struct.Memory* [ %642, %641 ], [ %414, %645 ]
  %651 = load i64, i64* %13, align 8
  %652 = add i64 %651, -104
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = mul i64 %648, %654
  %656 = add i64 %651, -24
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %651, -40
  %660 = inttoptr i64 %659 to i32*
  %661 = load i32, i32* %660
  %662 = sext i32 %661 to i64
  store i64 %662, i64* %11, align 8, !tbaa !1240
  %663 = shl nsw i64 %662, 3
  %664 = add i64 %663, %658
  %665 = inttoptr i64 %664 to i64*
  %666 = load i64, i64* %665
  %667 = sub i64 %666, %655
  store i64 %667, i64* %14, align 8, !tbaa !1240
  %668 = inttoptr i64 %664 to i64*
  store i64 %667, i64* %668
  %669 = inttoptr i64 %656 to i64*
  %670 = load i64, i64* %669
  %671 = inttoptr i64 %659 to i32*
  %672 = load i32, i32* %671
  %673 = sext i32 %672 to i64
  %674 = shl nsw i64 %673, 3
  %675 = add i64 %674, %670
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = load i64, i64* %13, align 8
  %679 = add i64 %678, -40
  %680 = inttoptr i64 %679 to i32*
  %681 = load i32, i32* %680
  %682 = sext i32 %681 to i64
  %683 = shl nsw i64 %682, 3
  %684 = add i64 %683, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %685 = inttoptr i64 %684 to i64*
  store i64 %677, i64* %685
  %686 = inttoptr i64 %679 to i32*
  %687 = load i32, i32* %686
  %688 = sext i32 %687 to i64
  %689 = shl nsw i64 %688, 3
  %690 = add i64 %689, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %678, -48
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %10, align 8, !tbaa !1240
  %697 = sub i64 %692, %696
  %698 = icmp eq i64 %697, 0
  %699 = lshr i64 %697, 63
  %700 = trunc i64 %699 to i8
  %701 = lshr i64 %692, 63
  %702 = lshr i64 %696, 63
  %703 = xor i64 %701, %702
  %704 = xor i64 %699, %701
  %705 = add nuw nsw i64 %704, %703
  %706 = icmp eq i64 %705, 2
  %707 = icmp ne i8 %700, 0
  %708 = xor i1 %707, %706
  %709 = or i1 %698, %708
  %710 = select i1 %709, i64 93, i64 76
  %711 = add i64 %649, %710
  br i1 %709, label %block_402de6, label %block_402dd5

block_402e00:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402df9
  %712 = phi i64 [ %29, %block_402df9 ], [ %338, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %713 = phi i64 [ %413, %block_402df9 ], [ %335, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %714 = phi %struct.Memory* [ %414, %block_402df9 ], [ %313, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %715 = add i64 %713, -40
  %716 = inttoptr i64 %715 to i32*
  %717 = load i32, i32* %716
  %718 = add i64 %713, -12
  %719 = inttoptr i64 %718 to i32*
  %720 = load i32, i32* %719
  %721 = sub i32 %717, %720
  %722 = lshr i32 %721, 31
  %723 = trunc i32 %722 to i8
  %724 = lshr i32 %717, 31
  %725 = lshr i32 %720, 31
  %726 = xor i32 %725, %724
  %727 = xor i32 %722, %724
  %728 = add nuw nsw i32 %727, %726
  %729 = icmp eq i32 %728, 2
  %730 = icmp ne i8 %723, 0
  %731 = xor i1 %730, %729
  %732 = select i1 %731, i64 12, i64 133
  %733 = add i64 %712, %732
  br i1 %731, label %block_402e0c, label %block_402e85
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4041e9_def_404125(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4041e9:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -4
  %8 = inttoptr i64 %7 to i32*
  store i32 -1, i32* %8
  %9 = inttoptr i64 %7 to i32*
  %10 = load i32, i32* %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %4, align 8, !tbaa !1240
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !1240
  %14 = add i64 %13, 8
  %15 = inttoptr i64 %13 to i64*
  %16 = load i64, i64* %15
  store i64 %16, i64* %5, align 8, !tbaa !1240
  %17 = inttoptr i64 %14 to i64*
  %18 = load i64, i64* %17
  store i64 %18, i64* %3, align 8, !tbaa !1240
  %19 = add i64 %13, 16
  store i64 %19, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403640_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403640:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %4 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = load i64, i64* %14, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %15, align 8, !tbaa !1240
  %20 = add i64 %17, -152
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = add i64 %17, -12
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %17, -16
  %30 = load i32, i32* %8, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = add i64 %17, -24
  %33 = load i64, i64* %12, align 8
  %34 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %34
  %35 = load i64, i64* @stdout
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2704), i64* %12, align 8, !tbaa !1240
  %36 = add i64 %1, 53
  %37 = add i64 %17, -160
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %44 = load i64, i64* %41, align 8, !alias.scope !1511, !noalias !1514
  %45 = load i64, i64* %40, align 8, !alias.scope !1511, !noalias !1514
  %46 = load i64, i64* %42, align 8, !alias.scope !1511, !noalias !1514
  %47 = load i64, i64* %43, align 8, !alias.scope !1511, !noalias !1514
  %48 = inttoptr i64 %20 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %17, -144
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %17, -136
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %17, -128
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %17, -120
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %17, -112
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = add i64 %17, -104
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  %68 = add i64 %17, -96
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  %71 = add i64 %17, -88
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  %74 = add i64 %17, -80
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75
  %77 = inttoptr i64 %37 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %3, align 8, !alias.scope !1511, !noalias !1514
  store i64 %20, i64* %14, align 8, !alias.scope !1511, !noalias !1514
  %79 = tail call i64 @fprintf(i64 %35, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2704), i64 %44, i64 %45, i64 %46, i64 %47, i64 %49, i64 %52, i64 %55, i64 %58, i64 %61, i64 %64, i64 %67, i64 %70, i64 %73, i64 %76), !noalias !1511
  %80 = load i64, i64* %15, align 8
  %81 = add i64 %80, -8
  %82 = load i64, i64* %3, align 8
  %83 = inttoptr i64 %81 to i32*
  %84 = load i32, i32* %83
  %85 = add i32 %84, -3
  %86 = icmp eq i32 %85, 0
  %87 = add i64 %80, -40
  %88 = trunc i64 %79 to i32
  %89 = inttoptr i64 %87 to i32*
  store i32 %88, i32* %89
  %90 = select i1 %86, i64 41, i64 13
  %91 = add i64 %82, %90
  br i1 %86, label %block_40369e, label %block_403682

block_403871:                                     ; preds = %block_403813.block_403871_crit_edge, %block_4037e3
  %92 = phi i64 [ %200, %block_4037e3 ], [ %823, %block_403813.block_403871_crit_edge ]
  %93 = phi i64 [ %164, %block_4037e3 ], [ %822, %block_403813.block_403871_crit_edge ]
  %94 = phi i64 [ 109, %block_4037e3 ], [ 5, %block_403813.block_403871_crit_edge ]
  %95 = phi %struct.Memory* [ %199, %block_4037e3 ], [ %809, %block_403813.block_403871_crit_edge ]
  %96 = add i64 %93, %94
  %97 = add i64 %92, -24
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98
  store i64 %99, i64* %13, align 8, !tbaa !1240
  %100 = add i64 %96, -3857
  %101 = add i64 %96, 9
  %102 = load i64, i64* %14, align 8, !tbaa !1240
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104
  store i64 %103, i64* %14, align 8, !tbaa !1240
  %105 = tail call %struct.Memory* @sub_402960_ShowADCPar(%struct.State* nonnull %0, i64 %100, %struct.Memory* %95)
  %106 = load i64, i64* %15, align 8
  %107 = add i64 %106, -24
  %108 = load i64, i64* %3, align 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %13, align 8, !tbaa !1240
  %111 = add i64 %108, -2522
  %112 = add i64 %108, 9
  %113 = load i64, i64* %14, align 8, !tbaa !1240
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115
  store i64 %114, i64* %14, align 8, !tbaa !1240
  %116 = tail call %struct.Memory* @sub_402ea0_GenerateADC(%struct.State* nonnull %0, i64 %111, %struct.Memory* %105)
  %117 = load i32, i32* %6, align 4
  %118 = load i64, i64* %3, align 8
  store i8 0, i8* %21, align 1, !tbaa !1264
  %119 = and i32 %117, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #10
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %124 = icmp eq i32 %117, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %24, align 1, !tbaa !1280
  %126 = lshr i32 %117, 31
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %128 = select i1 %124, i64 9, i64 72
  %129 = add i64 %118, %128
  br i1 %124, label %block_40388c, label %block_4038cb

block_40376f:                                     ; preds = %block_403755
  %130 = add i64 %190, 12
  %131 = load i64, i64* %14, align 8, !tbaa !1240
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %3, align 8, !alias.scope !1516, !noalias !1519
  store i64 %131, i64* %14, align 8, !alias.scope !1516, !noalias !1519
  %136 = tail call i64 @malloc(i64 1052)
  %137 = load i64, i64* %15, align 8
  %138 = add i64 %137, -32
  %139 = load i64, i64* %3, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %136, i64* %140
  store i8 0, i8* %21, align 1, !tbaa !1264
  %141 = trunc i64 %136 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #10
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %147 = icmp eq i64 %136, 0
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %24, align 1, !tbaa !1280
  %149 = lshr i64 %136, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %151 = select i1 %147, i64 14, i64 77
  %152 = add i64 %139, %151
  br i1 %147, label %block_403789, label %block_4037c8

block_4037e3:                                     ; preds = %block_4037c8
  %153 = load i64, i64* bitcast (%attrnum_type* @attrnum to i64*)
  %154 = trunc i64 %153 to i32
  %155 = and i64 %153, 4294967295
  store i64 %155, i64* %10, align 8, !tbaa !1240
  %156 = inttoptr i64 %201 to i64*
  %157 = load i64, i64* %156
  %158 = add i64 %157, 4
  %159 = inttoptr i64 %158 to i32*
  store i32 %154, i32* %159
  %160 = load i64, i64* bitcast (%input_tuples_type* @input_tuples to i64*)
  %161 = inttoptr i64 %201 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %11, align 8, !tbaa !1240
  %163 = add i64 %162, 16
  %164 = add i64 %213, 33
  %165 = inttoptr i64 %163 to i64*
  store i64 %160, i64* %165
  br label %block_403871

block_403755:                                     ; preds = %block_4036b2, %block_4036a8
  %166 = phi i64 [ %581, %block_4036a8 ], [ %681, %block_4036b2 ]
  %167 = phi %struct.Memory* [ %467, %block_4036a8 ], [ %467, %block_4036b2 ]
  %168 = add i64 %166, 12
  %169 = load i64, i64* %14, align 8, !tbaa !1240
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %168, i64* %171
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %3, align 8, !alias.scope !1521, !noalias !1524
  store i64 %169, i64* %14, align 8, !alias.scope !1521, !noalias !1524
  %174 = tail call i64 @malloc(i64 48)
  %175 = load i64, i64* %15, align 8
  %176 = add i64 %175, -24
  %177 = load i64, i64* %3, align 8
  %178 = inttoptr i64 %176 to i64*
  store i64 %174, i64* %178
  store i8 0, i8* %21, align 1, !tbaa !1264
  %179 = trunc i64 %174 to i32
  %180 = and i32 %179, 255
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #10
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %185 = icmp eq i64 %174, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %24, align 1, !tbaa !1280
  %187 = lshr i64 %174, 63
  %188 = trunc i64 %187 to i8
  store i8 %188, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %189 = select i1 %185, i64 40, i64 14
  %190 = add i64 %177, %189
  br i1 %185, label %block_403789, label %block_40376f

block_4037c8:                                     ; preds = %block_40376f
  %191 = add i64 %137, -24
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  store i64 %193, i64* %13, align 8, !tbaa !1240
  %194 = add i64 %152, -10328
  %195 = add i64 %152, 9
  %196 = load i64, i64* %14, align 8, !tbaa !1240
  %197 = add i64 %196, -8
  %198 = inttoptr i64 %197 to i64*
  store i64 %195, i64* %198
  store i64 %197, i64* %14, align 8, !tbaa !1240
  %199 = tail call %struct.Memory* @sub_400f70_initADCpar(%struct.State* nonnull %0, i64 %194, %struct.Memory* %167)
  %200 = load i64, i64* %15, align 8
  %201 = add i64 %200, -24
  %202 = load i64, i64* %3, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %204, 40
  %206 = inttoptr i64 %205 to i8*
  store i8 83, i8* %206
  %207 = add i64 %200, -8
  %208 = inttoptr i64 %207 to i32*
  %209 = load i32, i32* %208
  %210 = add i32 %209, -3
  %211 = icmp eq i32 %210, 0
  %212 = select i1 %211, i64 56, i64 18
  %213 = add i64 %202, %212
  br i1 %211, label %block_403813, label %block_4037e3

block_4036db:                                     ; preds = %block_4036b2, %block_40369e.block_4036db_crit_edge
  %214 = phi i64 [ %498, %block_40369e.block_4036db_crit_edge ], [ %669, %block_4036b2 ]
  %215 = phi i64 [ %497, %block_40369e.block_4036db_crit_edge ], [ %675, %block_4036b2 ]
  %216 = phi i64 [ %496, %block_40369e.block_4036db_crit_edge ], [ %681, %block_4036b2 ]
  %217 = phi %struct.Memory* [ %467, %block_40369e.block_4036db_crit_edge ], [ %467, %block_4036b2 ]
  %218 = load i64, i64* @stderr
  %219 = add i64 %216, 25
  %220 = load i64, i64* %14, align 8, !tbaa !1240
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %42, align 8, !alias.scope !1526, !noalias !1529
  %224 = load i64, i64* %43, align 8, !alias.scope !1526, !noalias !1529
  %225 = inttoptr i64 %220 to i64*
  %226 = load i64, i64* %225
  %227 = add i64 %220, 8
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %220, 16
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %220, 24
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %220, 32
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %220, 40
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %220, 48
  %243 = inttoptr i64 %242 to i64*
  %244 = load i64, i64* %243
  %245 = add i64 %220, 56
  %246 = inttoptr i64 %245 to i64*
  %247 = load i64, i64* %246
  %248 = add i64 %220, 64
  %249 = inttoptr i64 %248 to i64*
  %250 = load i64, i64* %249
  %251 = add i64 %220, 72
  %252 = inttoptr i64 %251 to i64*
  %253 = load i64, i64* %252
  %254 = inttoptr i64 %221 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %3, align 8, !alias.scope !1526, !noalias !1529
  store i64 %220, i64* %14, align 8, !alias.scope !1526, !noalias !1529
  %256 = tail call i64 @fprintf(i64 %218, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2805), i64 %215, i64 %214, i64 %223, i64 %224, i64 %226, i64 %229, i64 %232, i64 %235, i64 %238, i64 %241, i64 %244, i64 %247, i64 %250, i64 %253), !noalias !1526
  %257 = load i64, i64* %3, align 8
  %258 = load i64, i64* @stderr
  %259 = load i64, i64* %15, align 8
  %260 = add i64 %259, -48
  %261 = trunc i64 %256 to i32
  %262 = inttoptr i64 %260 to i32*
  store i32 %261, i32* %262
  %263 = add i64 %257, 28
  %264 = load i64, i64* %14, align 8, !tbaa !1240
  %265 = add i64 %264, -8
  %266 = inttoptr i64 %265 to i64*
  store i64 %263, i64* %266
  %267 = load i64, i64* %41, align 8, !alias.scope !1531, !noalias !1534
  %268 = load i64, i64* %40, align 8, !alias.scope !1531, !noalias !1534
  %269 = load i64, i64* %42, align 8, !alias.scope !1531, !noalias !1534
  %270 = load i64, i64* %43, align 8, !alias.scope !1531, !noalias !1534
  %271 = inttoptr i64 %264 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %264, 8
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %264, 16
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  %279 = add i64 %264, 24
  %280 = inttoptr i64 %279 to i64*
  %281 = load i64, i64* %280
  %282 = add i64 %264, 32
  %283 = inttoptr i64 %282 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %264, 40
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %264, 48
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %264, 56
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %264, 64
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %264, 72
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = inttoptr i64 %265 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %3, align 8, !alias.scope !1531, !noalias !1534
  store i64 %264, i64* %14, align 8, !alias.scope !1531, !noalias !1534
  %302 = tail call i64 @fprintf(i64 %258, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2847), i64 %267, i64 %268, i64 %269, i64 %270, i64 %272, i64 %275, i64 %278, i64 %281, i64 %284, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299), !noalias !1531
  %303 = load i64, i64* %3, align 8
  %304 = load i64, i64* @stderr
  %305 = load i64, i64* %15, align 8
  %306 = add i64 %305, -52
  %307 = trunc i64 %302 to i32
  %308 = inttoptr i64 %306 to i32*
  store i32 %307, i32* %308
  %309 = add i64 %303, 28
  %310 = load i64, i64* %14, align 8, !tbaa !1240
  %311 = add i64 %310, -8
  %312 = inttoptr i64 %311 to i64*
  store i64 %309, i64* %312
  %313 = load i64, i64* %41, align 8, !alias.scope !1536, !noalias !1539
  %314 = load i64, i64* %40, align 8, !alias.scope !1536, !noalias !1539
  %315 = load i64, i64* %42, align 8, !alias.scope !1536, !noalias !1539
  %316 = load i64, i64* %43, align 8, !alias.scope !1536, !noalias !1539
  %317 = inttoptr i64 %310 to i64*
  %318 = load i64, i64* %317
  %319 = add i64 %310, 8
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320
  %322 = add i64 %310, 16
  %323 = inttoptr i64 %322 to i64*
  %324 = load i64, i64* %323
  %325 = add i64 %310, 24
  %326 = inttoptr i64 %325 to i64*
  %327 = load i64, i64* %326
  %328 = add i64 %310, 32
  %329 = inttoptr i64 %328 to i64*
  %330 = load i64, i64* %329
  %331 = add i64 %310, 40
  %332 = inttoptr i64 %331 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %310, 48
  %335 = inttoptr i64 %334 to i64*
  %336 = load i64, i64* %335
  %337 = add i64 %310, 56
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338
  %340 = add i64 %310, 64
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %310, 72
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = inttoptr i64 %311 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %3, align 8, !alias.scope !1536, !noalias !1539
  store i64 %310, i64* %14, align 8, !alias.scope !1536, !noalias !1539
  %348 = tail call i64 @fprintf(i64 %304, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2876), i64 %313, i64 %314, i64 %315, i64 %316, i64 %318, i64 %321, i64 %324, i64 %327, i64 %330, i64 %333, i64 %336, i64 %339, i64 %342, i64 %345), !noalias !1536
  %349 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2914), i64* %12, align 8, !tbaa !1240
  %350 = load i64, i64* @stderr
  %351 = load i64, i64* %15, align 8
  %352 = add i64 %351, -56
  %353 = trunc i64 %348 to i32
  %354 = inttoptr i64 %352 to i32*
  store i32 %353, i32* %354
  %355 = add i64 %349, 28
  %356 = load i64, i64* %14, align 8, !tbaa !1240
  %357 = add i64 %356, -8
  %358 = inttoptr i64 %357 to i64*
  store i64 %355, i64* %358
  %359 = load i64, i64* %41, align 8, !alias.scope !1541, !noalias !1544
  %360 = load i64, i64* %40, align 8, !alias.scope !1541, !noalias !1544
  %361 = load i64, i64* %42, align 8, !alias.scope !1541, !noalias !1544
  %362 = load i64, i64* %43, align 8, !alias.scope !1541, !noalias !1544
  %363 = inttoptr i64 %356 to i64*
  %364 = load i64, i64* %363
  %365 = add i64 %356, 8
  %366 = inttoptr i64 %365 to i64*
  %367 = load i64, i64* %366
  %368 = add i64 %356, 16
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %356, 24
  %372 = inttoptr i64 %371 to i64*
  %373 = load i64, i64* %372
  %374 = add i64 %356, 32
  %375 = inttoptr i64 %374 to i64*
  %376 = load i64, i64* %375
  %377 = add i64 %356, 40
  %378 = inttoptr i64 %377 to i64*
  %379 = load i64, i64* %378
  %380 = add i64 %356, 48
  %381 = inttoptr i64 %380 to i64*
  %382 = load i64, i64* %381
  %383 = add i64 %356, 56
  %384 = inttoptr i64 %383 to i64*
  %385 = load i64, i64* %384
  %386 = add i64 %356, 64
  %387 = inttoptr i64 %386 to i64*
  %388 = load i64, i64* %387
  %389 = add i64 %356, 72
  %390 = inttoptr i64 %389 to i64*
  %391 = load i64, i64* %390
  %392 = inttoptr i64 %357 to i64*
  %393 = load i64, i64* %392
  store i64 %393, i64* %3, align 8, !alias.scope !1541, !noalias !1544
  store i64 %356, i64* %14, align 8, !alias.scope !1541, !noalias !1544
  %394 = tail call i64 @fprintf(i64 %350, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2914), i64 %359, i64 %360, i64 %361, i64 %362, i64 %364, i64 %367, i64 %370, i64 %373, i64 %376, i64 %379, i64 %382, i64 %385, i64 %388, i64 %391), !noalias !1541
  %395 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %396 = load i64, i64* %15, align 8
  %397 = add i64 %396, -60
  %398 = trunc i64 %394 to i32
  %399 = inttoptr i64 %397 to i32*
  store i32 %398, i32* %399
  %400 = add i64 %395, 13
  %401 = load i64, i64* %14, align 8, !tbaa !1240
  %402 = add i64 %401, -8
  %403 = inttoptr i64 %402 to i64*
  store i64 %400, i64* %403
  %404 = inttoptr i64 %402 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %3, align 8, !alias.scope !1546, !noalias !1549
  store i64 %401, i64* %14, align 8, !alias.scope !1546, !noalias !1549
  %406 = tail call i64 @exit(i64 1), !noalias !1546
  store i64 %406, i64* %39, align 8, !alias.scope !1546, !noalias !1549
  %407 = load i64, i64* %3, align 8
  %408 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %407, %struct.Memory* %217)
  ret %struct.Memory* %408

block_4038cb:                                     ; preds = %block_403871
  %409 = load i64, i64* %15, align 8
  %410 = add i64 %409, -24
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = inttoptr i64 %412 to i32*
  %414 = load i32, i32* %413
  %415 = add i64 %409, -32
  %416 = inttoptr i64 %415 to i64*
  %417 = load i64, i64* %416
  %418 = inttoptr i64 %417 to i32*
  store i32 %414, i32* %418
  %419 = inttoptr i64 %410 to i64*
  %420 = load i64, i64* %419
  %421 = add i64 %420, 40
  %422 = inttoptr i64 %421 to i8*
  %423 = load i8, i8* %422
  %424 = inttoptr i64 %415 to i64*
  %425 = load i64, i64* %424
  %426 = add i64 %425, 4
  %427 = inttoptr i64 %426 to i8*
  store i8 %423, i8* %427
  %428 = inttoptr i64 %410 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %429, 4
  %431 = inttoptr i64 %430 to i32*
  %432 = load i32, i32* %431
  %433 = inttoptr i64 %415 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %434, 1032
  %436 = inttoptr i64 %435 to i32*
  store i32 %432, i32* %436
  %437 = inttoptr i64 %410 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %438, 8
  %440 = inttoptr i64 %439 to i32*
  %441 = load i32, i32* %440
  %442 = inttoptr i64 %415 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %443, 1036
  %445 = inttoptr i64 %444 to i32*
  store i32 %441, i32* %445
  %446 = inttoptr i64 %415 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %447, 1048
  %449 = inttoptr i64 %448 to i32*
  store i32 1, i32* %449
  %450 = add i64 %409, -8
  %451 = inttoptr i64 %450 to i32*
  %452 = load i32, i32* %451
  %453 = add i32 %452, -2
  %454 = lshr i32 %453, 31
  %455 = trunc i32 %454 to i8
  %456 = lshr i32 %452, 31
  %457 = xor i32 %454, %456
  %458 = add nuw nsw i32 %457, %456
  %459 = icmp eq i32 %458, 2
  %460 = icmp ne i8 %455, 0
  %461 = xor i1 %460, %459
  %462 = select i1 %461, i64 112, i64 84
  %463 = add i64 %129, %462
  %464 = load i64, i64* %15, align 8
  br i1 %461, label %block_40393b, label %block_40391f

block_40369e:                                     ; preds = %block_403682, %block_403640
  %465 = phi i64 [ %91, %block_403640 ], [ %1218, %block_403682 ]
  %466 = phi i64 [ %80, %block_403640 ], [ %1214, %block_403682 ]
  %467 = phi %struct.Memory* [ %2, %block_403640 ], [ %2, %block_403682 ]
  %468 = add i64 %466, -8
  %469 = inttoptr i64 %468 to i32*
  %470 = load i32, i32* %469
  %471 = add i32 %470, -3
  %472 = icmp ult i32 %470, 3
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %21, align 1, !tbaa !1264
  %474 = and i32 %471, 255
  %475 = tail call i32 @llvm.ctpop.i32(i32 %474) #10
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  store i8 %478, i8* %22, align 1, !tbaa !1278
  %479 = xor i32 %471, %470
  %480 = lshr i32 %479, 4
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  store i8 %482, i8* %23, align 1, !tbaa !1279
  %483 = icmp eq i32 %471, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %24, align 1, !tbaa !1280
  %485 = lshr i32 %471, 31
  %486 = trunc i32 %485 to i8
  store i8 %486, i8* %25, align 1, !tbaa !1281
  %487 = lshr i32 %470, 31
  %488 = xor i32 %485, %487
  %489 = add nuw nsw i32 %488, %487
  %490 = icmp eq i32 %489, 2
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %26, align 1, !tbaa !1282
  %492 = icmp ne i8 %486, 0
  %493 = xor i1 %492, %490
  %494 = or i1 %483, %493
  %495 = select i1 %494, i64 10, i64 61
  %496 = add i64 %465, %495
  br i1 %494, label %block_4036a8, label %block_40369e.block_4036db_crit_edge

block_40369e.block_4036db_crit_edge:              ; preds = %block_40369e
  %497 = load i64, i64* %41, align 8, !alias.scope !1526, !noalias !1529
  %498 = load i64, i64* %40, align 8, !alias.scope !1526, !noalias !1529
  br label %block_4036db

block_40382d:                                     ; preds = %block_403813
  %499 = load i64, i64* @stderr
  %500 = load i64, i64* %15, align 8
  %501 = add i64 %500, -88
  %502 = inttoptr i64 %501 to i64*
  store i64 %499, i64* %502
  %503 = add i64 %822, 17
  %504 = load i64, i64* %14, align 8, !tbaa !1240
  %505 = add i64 %504, -8
  %506 = inttoptr i64 %505 to i64*
  store i64 %503, i64* %506
  %507 = inttoptr i64 %505 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %3, align 8, !alias.scope !1551, !noalias !1554
  store i64 %504, i64* %14, align 8, !alias.scope !1551, !noalias !1554
  %509 = tail call i64 @__errno_location()
  %510 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3005), i64* %11, align 8, !tbaa !1240
  %511 = inttoptr i64 %509 to i32*
  %512 = load i32, i32* %511
  %513 = zext i32 %512 to i64
  store i64 %513, i64* %10, align 8, !tbaa !1240
  %514 = load i64, i64* %15, align 8
  %515 = add i64 %514, -88
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = add i64 %510, 33
  %519 = load i64, i64* %14, align 8, !tbaa !1240
  %520 = add i64 %519, -8
  %521 = inttoptr i64 %520 to i64*
  store i64 %518, i64* %521
  %522 = load i64, i64* %42, align 8, !alias.scope !1556, !noalias !1559
  %523 = load i64, i64* %43, align 8, !alias.scope !1556, !noalias !1559
  %524 = inttoptr i64 %519 to i64*
  %525 = load i64, i64* %524
  %526 = add i64 %519, 8
  %527 = inttoptr i64 %526 to i64*
  %528 = load i64, i64* %527
  %529 = add i64 %519, 16
  %530 = inttoptr i64 %529 to i64*
  %531 = load i64, i64* %530
  %532 = add i64 %519, 24
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  %535 = add i64 %519, 32
  %536 = inttoptr i64 %535 to i64*
  %537 = load i64, i64* %536
  %538 = add i64 %519, 40
  %539 = inttoptr i64 %538 to i64*
  %540 = load i64, i64* %539
  %541 = add i64 %519, 48
  %542 = inttoptr i64 %541 to i64*
  %543 = load i64, i64* %542
  %544 = add i64 %519, 56
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  %547 = add i64 %519, 64
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  %550 = add i64 %519, 72
  %551 = inttoptr i64 %550 to i64*
  %552 = load i64, i64* %551
  %553 = inttoptr i64 %520 to i64*
  %554 = load i64, i64* %553
  store i64 %554, i64* %3, align 8, !alias.scope !1556, !noalias !1559
  store i64 %519, i64* %14, align 8, !alias.scope !1556, !noalias !1559
  %555 = tail call i64 @fprintf(i64 %517, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3005), i64 %513, i64 %522, i64 %523, i64 %525, i64 %528, i64 %531, i64 %534, i64 %537, i64 %540, i64 %543, i64 %546, i64 %549, i64 %552), !noalias !1556
  %556 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %557 = load i64, i64* %15, align 8
  %558 = add i64 %557, -92
  %559 = trunc i64 %555 to i32
  %560 = inttoptr i64 %558 to i32*
  store i32 %559, i32* %560
  %561 = add i64 %556, 13
  %562 = load i64, i64* %14, align 8, !tbaa !1240
  %563 = add i64 %562, -8
  %564 = inttoptr i64 %563 to i64*
  store i64 %561, i64* %564
  %565 = inttoptr i64 %563 to i64*
  %566 = load i64, i64* %565
  store i64 %566, i64* %3, align 8, !alias.scope !1561, !noalias !1564
  store i64 %562, i64* %14, align 8, !alias.scope !1561, !noalias !1564
  %567 = tail call i64 @exit(i64 1), !noalias !1561
  store i64 %567, i64* %39, align 8, !alias.scope !1561, !noalias !1564
  %568 = load i64, i64* %3, align 8
  %569 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %568, %struct.Memory* %809)
  ret %struct.Memory* %569

block_4036a8:                                     ; preds = %block_40369e
  %570 = add i32 %470, -1
  %571 = icmp eq i32 %570, 0
  %572 = lshr i32 %570, 31
  %573 = trunc i32 %572 to i8
  %574 = xor i32 %572, %487
  %575 = add nuw nsw i32 %574, %487
  %576 = icmp eq i32 %575, 2
  %577 = icmp ne i8 %573, 0
  %578 = xor i1 %577, %576
  %579 = or i1 %571, %578
  %580 = select i1 %579, i64 173, i64 10
  %581 = add i64 %496, %580
  br i1 %579, label %block_403755, label %block_4036b2

block_403a74:                                     ; preds = %block_4039a6
  %582 = add i64 %770, -24
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = icmp eq i64 %584, 0
  %586 = select i1 %585, i64 31, i64 11
  %587 = add i64 %785, %586
  br i1 %585, label %block_403a93, label %block_403a7f

block_403a93:                                     ; preds = %block_403a7f, %block_403a74
  %588 = phi i64 [ %587, %block_403a74 ], [ %692, %block_403a7f ]
  %589 = phi i64 [ %770, %block_403a74 ], [ %689, %block_403a7f ]
  %590 = phi %struct.Memory* [ %769, %block_403a74 ], [ %769, %block_403a7f ]
  %591 = add i64 %589, -32
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = icmp eq i64 %593, 0
  %595 = select i1 %594, i64 31, i64 11
  %596 = add i64 %588, %595
  br i1 %594, label %block_403ab2, label %block_403a9e

block_403ab2:                                     ; preds = %block_403a9e, %block_403a93
  %597 = phi %struct.Memory* [ %590, %block_403a9e ], [ %590, %block_403a93 ]
  store i64 0, i64* %9, align 8, !tbaa !1240
  %598 = load i64, i64* %14, align 8
  %599 = add i64 %598, 144
  %600 = icmp ugt i64 %598, -145
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %21, align 1, !tbaa !1264
  %602 = trunc i64 %599 to i32
  %603 = and i32 %602, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #10
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %22, align 1, !tbaa !1278
  %608 = xor i64 %598, 16
  %609 = xor i64 %608, %599
  %610 = lshr i64 %609, 4
  %611 = trunc i64 %610 to i8
  %612 = and i8 %611, 1
  store i8 %612, i8* %23, align 1, !tbaa !1279
  %613 = icmp eq i64 %599, 0
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %24, align 1, !tbaa !1280
  %615 = lshr i64 %599, 63
  %616 = trunc i64 %615 to i8
  store i8 %616, i8* %25, align 1, !tbaa !1281
  %617 = lshr i64 %598, 63
  %618 = xor i64 %615, %617
  %619 = add nuw nsw i64 %618, %615
  %620 = icmp eq i64 %619, 2
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %26, align 1, !tbaa !1282
  %622 = add i64 %598, 152
  %623 = inttoptr i64 %599 to i64*
  %624 = load i64, i64* %623
  store i64 %624, i64* %15, align 8, !tbaa !1240
  %625 = inttoptr i64 %622 to i64*
  %626 = load i64, i64* %625
  store i64 %626, i64* %3, align 8, !tbaa !1240
  %627 = add i64 %598, 160
  store i64 %627, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %597

block_40391f:                                     ; preds = %block_4038cb
  %628 = add i64 %464, -16
  %629 = inttoptr i64 %628 to i64*
  %630 = load i64, i64* %629
  %631 = add i64 %630, 8
  %632 = inttoptr i64 %631 to i64*
  %633 = load i64, i64* %632
  %634 = add i64 %463, 13
  %635 = load i64, i64* %14, align 8, !tbaa !1240
  %636 = add i64 %635, -8
  %637 = inttoptr i64 %636 to i64*
  store i64 %634, i64* %637
  %638 = inttoptr i64 %636 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %3, align 8, !alias.scope !1566, !noalias !1569
  store i64 %635, i64* %14, align 8, !alias.scope !1566, !noalias !1569
  %640 = tail call i64 @atoi(i64 %633), !noalias !1566
  %641 = load i64, i64* %15, align 8
  %642 = add i64 %641, -32
  %643 = load i64, i64* %3, align 8
  %644 = inttoptr i64 %642 to i64*
  %645 = load i64, i64* %644
  %646 = add i64 %645, 1044
  %647 = trunc i64 %640 to i32
  %648 = inttoptr i64 %646 to i32*
  store i32 %647, i32* %648
  %649 = add i64 %643, 29
  br label %block_403949

block_4036b2:                                     ; preds = %block_4036a8
  %650 = add i64 %581, 5
  %651 = load i64, i64* %14, align 8, !tbaa !1240
  %652 = add i64 %651, -8
  %653 = inttoptr i64 %652 to i64*
  store i64 %650, i64* %653
  %654 = inttoptr i64 %652 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %3, align 8, !alias.scope !1571, !noalias !1574
  store i64 %651, i64* %14, align 8, !alias.scope !1571, !noalias !1574
  %656 = tail call i64 @__ctype_b_loc()
  %657 = load i64, i64* %3, align 8
  %658 = inttoptr i64 %656 to i64*
  %659 = load i64, i64* %658
  %660 = load i64, i64* %15, align 8
  %661 = add i64 %660, -16
  %662 = inttoptr i64 %661 to i64*
  %663 = load i64, i64* %662
  %664 = add i64 %663, 8
  %665 = inttoptr i64 %664 to i64*
  %666 = load i64, i64* %665
  %667 = inttoptr i64 %666 to i8*
  %668 = load i8, i8* %667
  %669 = sext i8 %668 to i64
  store i64 %669, i64* %10, align 8, !tbaa !1240
  %670 = shl nsw i64 %669, 1
  %671 = add i64 %659, %670
  %672 = inttoptr i64 %671 to i16*
  %673 = load i16, i16* %672
  %674 = and i16 %673, 2048
  %675 = zext i16 %674 to i64
  store i64 %675, i64* %11, align 8, !tbaa !1240
  store i8 0, i8* %21, align 1, !tbaa !1264
  store i8 1, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %676 = lshr exact i16 %674, 11
  %677 = trunc i16 %676 to i8
  %678 = xor i8 %677, 1
  store i8 %678, i8* %24, align 1, !tbaa !1280
  store i8 0, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %679 = icmp eq i8 %678, 0
  %680 = select i1 %679, i64 158, i64 36
  %681 = add i64 %657, %680
  br i1 %679, label %block_403755, label %block_4036db

block_403a7f:                                     ; preds = %block_403a74
  store i64 %584, i64* %13, align 8, !tbaa !1240
  %682 = add i64 %587, 12
  %683 = load i64, i64* %14, align 8, !tbaa !1240
  %684 = add i64 %683, -8
  %685 = inttoptr i64 %684 to i64*
  store i64 %682, i64* %685
  %686 = inttoptr i64 %684 to i64*
  %687 = load i64, i64* %686
  store i64 %687, i64* %3, align 8, !alias.scope !1576, !noalias !1579
  store i64 %683, i64* %14, align 8, !alias.scope !1576, !noalias !1579
  %688 = tail call i64 @free(i64 %584), !noalias !1576
  %689 = load i64, i64* %15, align 8
  %690 = add i64 %689, -24
  %691 = load i64, i64* %3, align 8
  %692 = add i64 %691, 8
  %693 = inttoptr i64 %690 to i64*
  store i64 0, i64* %693
  br label %block_403a93

block_403949:                                     ; preds = %block_40393b, %block_40391f
  %694 = phi i64 [ %1098, %block_40393b ], [ %649, %block_40391f ]
  %695 = phi i64 [ %464, %block_40393b ], [ %641, %block_40391f ]
  %696 = phi %struct.Memory* [ %116, %block_40393b ], [ %116, %block_40391f ]
  %697 = add i64 %695, -32
  %698 = inttoptr i64 %697 to i64*
  %699 = load i64, i64* %698
  %700 = add i64 %699, 1044
  %701 = inttoptr i64 %700 to i32*
  %702 = load i32, i32* %701
  %703 = icmp eq i32 %702, 0
  %704 = select i1 %703, i64 17, i64 93
  %705 = add i64 %694, %704
  br i1 %703, label %block_40395a, label %block_4039a6

block_4039a6:                                     ; preds = %block_40395a, %block_403949
  %706 = phi i64 [ %705, %block_403949 ], [ %1092, %block_40395a ]
  %707 = phi i64 [ %695, %block_403949 ], [ %1088, %block_40395a ]
  %708 = phi %struct.Memory* [ %696, %block_403949 ], [ %696, %block_40395a ]
  %709 = add i64 %707, -24
  %710 = inttoptr i64 %709 to i64*
  %711 = load i64, i64* %710
  %712 = add i64 %711, 16
  %713 = inttoptr i64 %712 to i64*
  %714 = load i64, i64* %713
  %715 = trunc i64 %714 to i32
  %716 = add i64 %707, -32
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = add i64 %718, 1040
  %720 = inttoptr i64 %719 to i32*
  store i32 %715, i32* %720
  %721 = inttoptr i64 %716 to i64*
  %722 = load i64, i64* %721
  %723 = add i64 %722, 5
  %724 = inttoptr i64 %709 to i64*
  %725 = load i64, i64* %724
  %726 = add i64 %725, 32
  %727 = inttoptr i64 %726 to i64*
  %728 = load i64, i64* %727
  %729 = add i64 %706, 44
  %730 = load i64, i64* %14, align 8, !tbaa !1240
  %731 = add i64 %730, -8
  %732 = inttoptr i64 %731 to i64*
  store i64 %729, i64* %732
  %733 = inttoptr i64 %731 to i64*
  %734 = load i64, i64* %733
  store i64 %734, i64* %3, align 8, !alias.scope !1581, !noalias !1584
  store i64 %730, i64* %14, align 8, !alias.scope !1581, !noalias !1584
  %735 = tail call i64 @strcpy(i64 %723, i64 %728)
  %736 = load i64, i64* %15, align 8
  %737 = add i64 %736, -32
  %738 = load i64, i64* %3, align 8
  %739 = inttoptr i64 %737 to i64*
  %740 = load i64, i64* %739
  %741 = add i64 %740, 517
  store i64 %741, i64* %11, align 8, !tbaa !1240
  %742 = add i64 %736, -24
  %743 = inttoptr i64 %742 to i64*
  %744 = load i64, i64* %743
  %745 = add i64 %744, 32
  %746 = inttoptr i64 %745 to i64*
  %747 = load i64, i64* %746
  %748 = add i64 %736, -120
  %749 = inttoptr i64 %748 to i64*
  store i64 %735, i64* %749
  %750 = add i64 %738, 31
  %751 = load i64, i64* %14, align 8, !tbaa !1240
  %752 = add i64 %751, -8
  %753 = inttoptr i64 %752 to i64*
  store i64 %750, i64* %753
  %754 = inttoptr i64 %752 to i64*
  %755 = load i64, i64* %754
  store i64 %755, i64* %3, align 8, !alias.scope !1586, !noalias !1589
  store i64 %751, i64* %14, align 8, !alias.scope !1586, !noalias !1589
  %756 = tail call i64 @strcpy(i64 %741, i64 %747)
  %757 = load i64, i64* %15, align 8
  %758 = add i64 %757, -32
  %759 = load i64, i64* %3, align 8
  %760 = inttoptr i64 %758 to i64*
  %761 = load i64, i64* %760
  store i64 %761, i64* %13, align 8, !tbaa !1240
  %762 = add i64 %757, -128
  %763 = inttoptr i64 %762 to i64*
  store i64 %756, i64* %763
  %764 = add i64 %759, 207
  %765 = add i64 %759, 13
  %766 = load i64, i64* %14, align 8, !tbaa !1240
  %767 = add i64 %766, -8
  %768 = inttoptr i64 %767 to i64*
  store i64 %765, i64* %768
  store i64 %767, i64* %14, align 8, !tbaa !1240
  %769 = tail call %struct.Memory* @sub_403ac0_DC(%struct.State* nonnull %0, i64 %764, %struct.Memory* %708)
  %770 = load i64, i64* %15, align 8
  %771 = add i64 %770, -36
  %772 = load i32, i32* %6, align 4
  %773 = load i64, i64* %3, align 8
  %774 = inttoptr i64 %771 to i32*
  store i32 %772, i32* %774
  store i8 0, i8* %21, align 1, !tbaa !1264
  %775 = and i32 %772, 255
  %776 = tail call i32 @llvm.ctpop.i32(i32 %775) #10
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  store i8 %779, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %780 = icmp eq i32 %772, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %24, align 1, !tbaa !1280
  %782 = lshr i32 %772, 31
  %783 = trunc i32 %782 to i8
  store i8 %783, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %784 = select i1 %780, i64 118, i64 12
  %785 = add i64 %773, %784
  br i1 %780, label %block_403a74, label %block_403a0a

block_403a9e:                                     ; preds = %block_403a93
  store i64 %593, i64* %13, align 8, !tbaa !1240
  %786 = add i64 %596, 12
  %787 = load i64, i64* %14, align 8, !tbaa !1240
  %788 = add i64 %787, -8
  %789 = inttoptr i64 %788 to i64*
  store i64 %786, i64* %789
  %790 = inttoptr i64 %788 to i64*
  %791 = load i64, i64* %790
  store i64 %791, i64* %3, align 8, !alias.scope !1591, !noalias !1594
  store i64 %787, i64* %14, align 8, !alias.scope !1591, !noalias !1594
  %792 = tail call i64 @free(i64 %593), !noalias !1591
  %793 = load i64, i64* %15, align 8
  %794 = add i64 %793, -32
  %795 = inttoptr i64 %794 to i64*
  store i64 0, i64* %795
  br label %block_403ab2

block_403813:                                     ; preds = %block_4037c8
  %796 = add i64 %200, -16
  %797 = inttoptr i64 %796 to i64*
  %798 = load i64, i64* %797
  %799 = add i64 %798, 16
  %800 = inttoptr i64 %799 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %13, align 8, !tbaa !1240
  %802 = inttoptr i64 %201 to i64*
  %803 = load i64, i64* %802
  store i64 %803, i64* %12, align 8, !tbaa !1240
  %804 = add i64 %213, -5257
  %805 = add i64 %213, 27
  %806 = load i64, i64* %14, align 8, !tbaa !1240
  %807 = add i64 %806, -8
  %808 = inttoptr i64 %807 to i64*
  store i64 %805, i64* %808
  store i64 %807, i64* %14, align 8, !tbaa !1240
  %809 = tail call %struct.Memory* @sub_402380_ParseParFile(%struct.State* nonnull %0, i64 %804, %struct.Memory* %199)
  %810 = load i32, i32* %6, align 4
  %811 = load i64, i64* %3, align 8
  store i8 0, i8* %21, align 1, !tbaa !1264
  %812 = and i32 %810, 255
  %813 = tail call i32 @llvm.ctpop.i32(i32 %812) #10
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  %816 = xor i8 %815, 1
  store i8 %816, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %817 = icmp eq i32 %810, 0
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %24, align 1, !tbaa !1280
  %819 = lshr i32 %810, 31
  %820 = trunc i32 %819 to i8
  store i8 %820, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %821 = select i1 %817, i64 9, i64 72
  %822 = add i64 %811, %821
  br i1 %817, label %block_40382d, label %block_403813.block_403871_crit_edge

block_403813.block_403871_crit_edge:              ; preds = %block_403813
  %823 = load i64, i64* %15, align 8
  br label %block_403871

block_40388c:                                     ; preds = %block_403871
  %824 = load i64, i64* @stderr
  %825 = load i64, i64* %15, align 8
  %826 = add i64 %825, -104
  %827 = inttoptr i64 %826 to i64*
  store i64 %824, i64* %827
  %828 = add i64 %129, 17
  %829 = load i64, i64* %14, align 8, !tbaa !1240
  %830 = add i64 %829, -8
  %831 = inttoptr i64 %830 to i64*
  store i64 %828, i64* %831
  %832 = inttoptr i64 %830 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %3, align 8, !alias.scope !1596, !noalias !1599
  store i64 %829, i64* %14, align 8, !alias.scope !1596, !noalias !1599
  %834 = tail call i64 @__errno_location()
  %835 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3030), i64* %11, align 8, !tbaa !1240
  %836 = inttoptr i64 %834 to i32*
  %837 = load i32, i32* %836
  %838 = zext i32 %837 to i64
  store i64 %838, i64* %10, align 8, !tbaa !1240
  %839 = load i64, i64* %15, align 8
  %840 = add i64 %839, -104
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  %843 = add i64 %835, 33
  %844 = load i64, i64* %14, align 8, !tbaa !1240
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %843, i64* %846
  %847 = load i64, i64* %42, align 8, !alias.scope !1601, !noalias !1604
  %848 = load i64, i64* %43, align 8, !alias.scope !1601, !noalias !1604
  %849 = inttoptr i64 %844 to i64*
  %850 = load i64, i64* %849
  %851 = add i64 %844, 8
  %852 = inttoptr i64 %851 to i64*
  %853 = load i64, i64* %852
  %854 = add i64 %844, 16
  %855 = inttoptr i64 %854 to i64*
  %856 = load i64, i64* %855
  %857 = add i64 %844, 24
  %858 = inttoptr i64 %857 to i64*
  %859 = load i64, i64* %858
  %860 = add i64 %844, 32
  %861 = inttoptr i64 %860 to i64*
  %862 = load i64, i64* %861
  %863 = add i64 %844, 40
  %864 = inttoptr i64 %863 to i64*
  %865 = load i64, i64* %864
  %866 = add i64 %844, 48
  %867 = inttoptr i64 %866 to i64*
  %868 = load i64, i64* %867
  %869 = add i64 %844, 56
  %870 = inttoptr i64 %869 to i64*
  %871 = load i64, i64* %870
  %872 = add i64 %844, 64
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %844, 72
  %876 = inttoptr i64 %875 to i64*
  %877 = load i64, i64* %876
  %878 = inttoptr i64 %845 to i64*
  %879 = load i64, i64* %878
  store i64 %879, i64* %3, align 8, !alias.scope !1601, !noalias !1604
  store i64 %844, i64* %14, align 8, !alias.scope !1601, !noalias !1604
  %880 = tail call i64 @fprintf(i64 %842, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3030), i64 %838, i64 %847, i64 %848, i64 %850, i64 %853, i64 %856, i64 %859, i64 %862, i64 %865, i64 %868, i64 %871, i64 %874, i64 %877), !noalias !1601
  %881 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %882 = load i64, i64* %15, align 8
  %883 = add i64 %882, -108
  %884 = trunc i64 %880 to i32
  %885 = inttoptr i64 %883 to i32*
  store i32 %884, i32* %885
  %886 = add i64 %881, 13
  %887 = load i64, i64* %14, align 8, !tbaa !1240
  %888 = add i64 %887, -8
  %889 = inttoptr i64 %888 to i64*
  store i64 %886, i64* %889
  %890 = inttoptr i64 %888 to i64*
  %891 = load i64, i64* %890
  store i64 %891, i64* %3, align 8, !alias.scope !1606, !noalias !1609
  store i64 %887, i64* %14, align 8, !alias.scope !1606, !noalias !1609
  %892 = tail call i64 @exit(i64 1), !noalias !1606
  store i64 %892, i64* %39, align 8, !alias.scope !1606, !noalias !1609
  %893 = load i64, i64* %3, align 8
  %894 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %893, %struct.Memory* %116)
  ret %struct.Memory* %894

block_403a0a:                                     ; preds = %block_4039a6
  %895 = load i64, i64* @stderr
  %896 = add i64 %770, -136
  %897 = inttoptr i64 %896 to i64*
  store i64 %895, i64* %897
  %898 = add i64 %785, 20
  %899 = load i64, i64* %14, align 8, !tbaa !1240
  %900 = add i64 %899, -8
  %901 = inttoptr i64 %900 to i64*
  store i64 %898, i64* %901
  %902 = inttoptr i64 %900 to i64*
  %903 = load i64, i64* %902
  store i64 %903, i64* %3, align 8, !alias.scope !1611, !noalias !1614
  store i64 %899, i64* %14, align 8, !alias.scope !1611, !noalias !1614
  %904 = tail call i64 @__errno_location()
  %905 = load i64, i64* %3, align 8
  %906 = inttoptr i64 %904 to i32*
  %907 = load i32, i32* %906
  %908 = zext i32 %907 to i64
  store i64 %908, i64* %10, align 8, !tbaa !1240
  %909 = load i64, i64* %15, align 8
  %910 = add i64 %909, -136
  %911 = inttoptr i64 %910 to i64*
  %912 = load i64, i64* %911
  %913 = add i64 %905, 36
  %914 = load i64, i64* %14, align 8, !tbaa !1240
  %915 = add i64 %914, -8
  %916 = inttoptr i64 %915 to i64*
  store i64 %913, i64* %916
  %917 = load i64, i64* %42, align 8, !alias.scope !1616, !noalias !1619
  %918 = load i64, i64* %43, align 8, !alias.scope !1616, !noalias !1619
  %919 = inttoptr i64 %914 to i64*
  %920 = load i64, i64* %919
  %921 = add i64 %914, 8
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  %924 = add i64 %914, 16
  %925 = inttoptr i64 %924 to i64*
  %926 = load i64, i64* %925
  %927 = add i64 %914, 24
  %928 = inttoptr i64 %927 to i64*
  %929 = load i64, i64* %928
  %930 = add i64 %914, 32
  %931 = inttoptr i64 %930 to i64*
  %932 = load i64, i64* %931
  %933 = add i64 %914, 40
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %914, 48
  %937 = inttoptr i64 %936 to i64*
  %938 = load i64, i64* %937
  %939 = add i64 %914, 56
  %940 = inttoptr i64 %939 to i64*
  %941 = load i64, i64* %940
  %942 = add i64 %914, 64
  %943 = inttoptr i64 %942 to i64*
  %944 = load i64, i64* %943
  %945 = add i64 %914, 72
  %946 = inttoptr i64 %945 to i64*
  %947 = load i64, i64* %946
  %948 = inttoptr i64 %915 to i64*
  %949 = load i64, i64* %948
  store i64 %949, i64* %3, align 8, !alias.scope !1616, !noalias !1619
  store i64 %914, i64* %14, align 8, !alias.scope !1616, !noalias !1619
  %950 = tail call i64 @fprintf(i64 %912, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3084), i64 %908, i64 %917, i64 %918, i64 %920, i64 %923, i64 %926, i64 %929, i64 %932, i64 %935, i64 %938, i64 %941, i64 %944, i64 %947), !noalias !1616
  %951 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3099), i64* %12, align 8, !tbaa !1240
  %952 = load i64, i64* @stderr
  %953 = load i64, i64* %15, align 8
  %954 = add i64 %953, -36
  %955 = inttoptr i64 %954 to i32*
  %956 = load i32, i32* %955
  %957 = zext i32 %956 to i64
  store i64 %957, i64* %11, align 8, !tbaa !1240
  %958 = add i64 %953, -140
  %959 = trunc i64 %950 to i32
  %960 = inttoptr i64 %958 to i32*
  store i32 %959, i32* %960
  %961 = add i64 %951, 34
  %962 = load i64, i64* %14, align 8, !tbaa !1240
  %963 = add i64 %962, -8
  %964 = inttoptr i64 %963 to i64*
  store i64 %961, i64* %964
  %965 = load i64, i64* %40, align 8, !alias.scope !1621, !noalias !1624
  %966 = load i64, i64* %42, align 8, !alias.scope !1621, !noalias !1624
  %967 = load i64, i64* %43, align 8, !alias.scope !1621, !noalias !1624
  %968 = inttoptr i64 %962 to i64*
  %969 = load i64, i64* %968
  %970 = add i64 %962, 8
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %962, 16
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = add i64 %962, 24
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %962, 32
  %980 = inttoptr i64 %979 to i64*
  %981 = load i64, i64* %980
  %982 = add i64 %962, 40
  %983 = inttoptr i64 %982 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %962, 48
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  %988 = add i64 %962, 56
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %962, 64
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = add i64 %962, 72
  %995 = inttoptr i64 %994 to i64*
  %996 = load i64, i64* %995
  %997 = inttoptr i64 %963 to i64*
  %998 = load i64, i64* %997
  store i64 %998, i64* %3, align 8, !alias.scope !1621, !noalias !1624
  store i64 %962, i64* %14, align 8, !alias.scope !1621, !noalias !1624
  %999 = tail call i64 @fprintf(i64 %952, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3099), i64 %957, i64 %965, i64 %966, i64 %967, i64 %969, i64 %972, i64 %975, i64 %978, i64 %981, i64 %984, i64 %987, i64 %990, i64 %993, i64 %996), !noalias !1621
  %1000 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %1001 = load i64, i64* %15, align 8
  %1002 = add i64 %1001, -144
  %1003 = trunc i64 %999 to i32
  %1004 = inttoptr i64 %1002 to i32*
  store i32 %1003, i32* %1004
  %1005 = add i64 %1000, 16
  %1006 = load i64, i64* %14, align 8, !tbaa !1240
  %1007 = add i64 %1006, -8
  %1008 = inttoptr i64 %1007 to i64*
  store i64 %1005, i64* %1008
  %1009 = inttoptr i64 %1007 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %3, align 8, !alias.scope !1626, !noalias !1629
  store i64 %1006, i64* %14, align 8, !alias.scope !1626, !noalias !1629
  %1011 = tail call i64 @exit(i64 1), !noalias !1626
  store i64 %1011, i64* %39, align 8, !alias.scope !1626, !noalias !1629
  %1012 = load i64, i64* %3, align 8
  %1013 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %1012, %struct.Memory* %769)
  ret %struct.Memory* %1013

block_40395a:                                     ; preds = %block_403949
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3054), i64* %12, align 8, !tbaa !1240
  %1014 = add i64 %695, -24
  %1015 = inttoptr i64 %1014 to i64*
  %1016 = load i64, i64* %1015
  %1017 = add i64 %1016, 16
  %1018 = inttoptr i64 %1017 to i64*
  %1019 = load i64, i64* %1018
  %1020 = add i64 %1016, 4
  %1021 = inttoptr i64 %1020 to i32*
  %1022 = load i32, i32* %1021
  %1023 = mul i32 %1022, 5
  %1024 = add i32 %1023, 50
  %1025 = sext i32 %1024 to i64
  %1026 = sext i64 %1019 to i128
  %1027 = and i128 %1026, -18446744073709551616
  %1028 = sext i32 %1024 to i128
  %1029 = and i128 %1028, -18446744073709551616
  %1030 = zext i64 %1019 to i128
  %1031 = or i128 %1027, %1030
  %1032 = zext i64 %1025 to i128
  %1033 = or i128 %1029, %1032
  %1034 = mul nsw i128 %1031, %1033
  %1035 = trunc i128 %1034 to i32
  %1036 = load i64, i64* %15, align 8
  %1037 = add i64 %1036, -32
  %1038 = inttoptr i64 %1037 to i64*
  %1039 = load i64, i64* %1038
  %1040 = add i64 %1039, 1044
  %1041 = inttoptr i64 %1040 to i32*
  store i32 %1035, i32* %1041
  %1042 = load i64, i64* @stdout
  %1043 = inttoptr i64 %1037 to i64*
  %1044 = load i64, i64* %1043
  %1045 = add i64 %1044, 1044
  %1046 = inttoptr i64 %1045 to i32*
  %1047 = load i32, i32* %1046
  %1048 = zext i32 %1047 to i64
  %1049 = add i64 %705, 73
  %1050 = load i64, i64* %14, align 8, !tbaa !1240
  %1051 = add i64 %1050, -8
  %1052 = inttoptr i64 %1051 to i64*
  store i64 %1049, i64* %1052
  %1053 = load i64, i64* %12, align 8, !alias.scope !1631, !noalias !1634
  %1054 = load i64, i64* %42, align 8, !alias.scope !1631, !noalias !1634
  %1055 = load i64, i64* %43, align 8, !alias.scope !1631, !noalias !1634
  %1056 = inttoptr i64 %1050 to i64*
  %1057 = load i64, i64* %1056
  %1058 = add i64 %1050, 8
  %1059 = inttoptr i64 %1058 to i64*
  %1060 = load i64, i64* %1059
  %1061 = add i64 %1050, 16
  %1062 = inttoptr i64 %1061 to i64*
  %1063 = load i64, i64* %1062
  %1064 = add i64 %1050, 24
  %1065 = inttoptr i64 %1064 to i64*
  %1066 = load i64, i64* %1065
  %1067 = add i64 %1050, 32
  %1068 = inttoptr i64 %1067 to i64*
  %1069 = load i64, i64* %1068
  %1070 = add i64 %1050, 40
  %1071 = inttoptr i64 %1070 to i64*
  %1072 = load i64, i64* %1071
  %1073 = add i64 %1050, 48
  %1074 = inttoptr i64 %1073 to i64*
  %1075 = load i64, i64* %1074
  %1076 = add i64 %1050, 56
  %1077 = inttoptr i64 %1076 to i64*
  %1078 = load i64, i64* %1077
  %1079 = add i64 %1050, 64
  %1080 = inttoptr i64 %1079 to i64*
  %1081 = load i64, i64* %1080
  %1082 = add i64 %1050, 72
  %1083 = inttoptr i64 %1082 to i64*
  %1084 = load i64, i64* %1083
  %1085 = inttoptr i64 %1051 to i64*
  %1086 = load i64, i64* %1085
  store i64 %1086, i64* %3, align 8, !alias.scope !1631, !noalias !1634
  store i64 %1050, i64* %14, align 8, !alias.scope !1631, !noalias !1634
  %1087 = tail call i64 @fprintf(i64 %1042, i64 %1053, i64 %1048, i64 %1025, i64 %1054, i64 %1055, i64 %1057, i64 %1060, i64 %1063, i64 %1066, i64 %1069, i64 %1072, i64 %1075, i64 %1078, i64 %1081, i64 %1084), !noalias !1631
  %1088 = load i64, i64* %15, align 8
  %1089 = add i64 %1088, -112
  %1090 = trunc i64 %1087 to i32
  %1091 = load i64, i64* %3, align 8
  %1092 = add i64 %1091, 3
  %1093 = inttoptr i64 %1089 to i32*
  store i32 %1090, i32* %1093
  br label %block_4039a6

block_40393b:                                     ; preds = %block_4038cb
  %1094 = add i64 %464, -32
  %1095 = inttoptr i64 %1094 to i64*
  %1096 = load i64, i64* %1095
  %1097 = add i64 %1096, 1044
  %1098 = add i64 %463, 14
  %1099 = inttoptr i64 %1097 to i32*
  store i32 0, i32* %1099
  br label %block_403949

block_403789:                                     ; preds = %block_403755, %block_40376f
  %1100 = phi i64 [ %175, %block_403755 ], [ %137, %block_40376f ]
  %1101 = phi i64 [ %190, %block_403755 ], [ %152, %block_40376f ]
  %1102 = phi %struct.Memory* [ %167, %block_403755 ], [ %167, %block_40376f ]
  %1103 = load i64, i64* @stderr
  %1104 = add i64 %1100, -72
  %1105 = inttoptr i64 %1104 to i64*
  store i64 %1103, i64* %1105
  %1106 = add i64 %1101, 17
  %1107 = load i64, i64* %14, align 8, !tbaa !1240
  %1108 = add i64 %1107, -8
  %1109 = inttoptr i64 %1108 to i64*
  store i64 %1106, i64* %1109
  %1110 = inttoptr i64 %1108 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %3, align 8, !alias.scope !1636, !noalias !1639
  store i64 %1107, i64* %14, align 8, !alias.scope !1636, !noalias !1639
  %1112 = tail call i64 @__errno_location()
  %1113 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2985), i64* %11, align 8, !tbaa !1240
  %1114 = inttoptr i64 %1112 to i32*
  %1115 = load i32, i32* %1114
  %1116 = zext i32 %1115 to i64
  store i64 %1116, i64* %10, align 8, !tbaa !1240
  %1117 = load i64, i64* %15, align 8
  %1118 = add i64 %1117, -72
  %1119 = inttoptr i64 %1118 to i64*
  %1120 = load i64, i64* %1119
  %1121 = add i64 %1113, 33
  %1122 = load i64, i64* %14, align 8, !tbaa !1240
  %1123 = add i64 %1122, -8
  %1124 = inttoptr i64 %1123 to i64*
  store i64 %1121, i64* %1124
  %1125 = load i64, i64* %42, align 8, !alias.scope !1641, !noalias !1644
  %1126 = load i64, i64* %43, align 8, !alias.scope !1641, !noalias !1644
  %1127 = inttoptr i64 %1122 to i64*
  %1128 = load i64, i64* %1127
  %1129 = add i64 %1122, 8
  %1130 = inttoptr i64 %1129 to i64*
  %1131 = load i64, i64* %1130
  %1132 = add i64 %1122, 16
  %1133 = inttoptr i64 %1132 to i64*
  %1134 = load i64, i64* %1133
  %1135 = add i64 %1122, 24
  %1136 = inttoptr i64 %1135 to i64*
  %1137 = load i64, i64* %1136
  %1138 = add i64 %1122, 32
  %1139 = inttoptr i64 %1138 to i64*
  %1140 = load i64, i64* %1139
  %1141 = add i64 %1122, 40
  %1142 = inttoptr i64 %1141 to i64*
  %1143 = load i64, i64* %1142
  %1144 = add i64 %1122, 48
  %1145 = inttoptr i64 %1144 to i64*
  %1146 = load i64, i64* %1145
  %1147 = add i64 %1122, 56
  %1148 = inttoptr i64 %1147 to i64*
  %1149 = load i64, i64* %1148
  %1150 = add i64 %1122, 64
  %1151 = inttoptr i64 %1150 to i64*
  %1152 = load i64, i64* %1151
  %1153 = add i64 %1122, 72
  %1154 = inttoptr i64 %1153 to i64*
  %1155 = load i64, i64* %1154
  %1156 = inttoptr i64 %1123 to i64*
  %1157 = load i64, i64* %1156
  store i64 %1157, i64* %3, align 8, !alias.scope !1641, !noalias !1644
  store i64 %1122, i64* %14, align 8, !alias.scope !1641, !noalias !1644
  %1158 = tail call i64 @fprintf(i64 %1120, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2985), i64 %1116, i64 %1125, i64 %1126, i64 %1128, i64 %1131, i64 %1134, i64 %1137, i64 %1140, i64 %1143, i64 %1146, i64 %1149, i64 %1152, i64 %1155), !noalias !1641
  %1159 = load i64, i64* %3, align 8
  store i64 1, i64* %13, align 8, !tbaa !1240
  %1160 = load i64, i64* %15, align 8
  %1161 = add i64 %1160, -76
  %1162 = trunc i64 %1158 to i32
  %1163 = inttoptr i64 %1161 to i32*
  store i32 %1162, i32* %1163
  %1164 = add i64 %1159, 13
  %1165 = load i64, i64* %14, align 8, !tbaa !1240
  %1166 = add i64 %1165, -8
  %1167 = inttoptr i64 %1166 to i64*
  store i64 %1164, i64* %1167
  %1168 = inttoptr i64 %1166 to i64*
  %1169 = load i64, i64* %1168
  store i64 %1169, i64* %3, align 8, !alias.scope !1646, !noalias !1649
  store i64 %1165, i64* %14, align 8, !alias.scope !1646, !noalias !1649
  %1170 = tail call i64 @exit(i64 1), !noalias !1646
  store i64 %1170, i64* %39, align 8, !alias.scope !1646, !noalias !1649
  %1171 = load i64, i64* %3, align 8
  %1172 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %1171, %struct.Memory* %1102)
  ret %struct.Memory* %1172

block_403682:                                     ; preds = %block_403640
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2761), i64* %12, align 8, !tbaa !1240
  %1173 = load i64, i64* @stdout
  %1174 = add i64 %91, 25
  %1175 = load i64, i64* %14, align 8, !tbaa !1240
  %1176 = add i64 %1175, -8
  %1177 = inttoptr i64 %1176 to i64*
  store i64 %1174, i64* %1177
  %1178 = load i64, i64* %41, align 8, !alias.scope !1651, !noalias !1654
  %1179 = load i64, i64* %40, align 8, !alias.scope !1651, !noalias !1654
  %1180 = load i64, i64* %42, align 8, !alias.scope !1651, !noalias !1654
  %1181 = load i64, i64* %43, align 8, !alias.scope !1651, !noalias !1654
  %1182 = inttoptr i64 %1175 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1175, 8
  %1185 = inttoptr i64 %1184 to i64*
  %1186 = load i64, i64* %1185
  %1187 = add i64 %1175, 16
  %1188 = inttoptr i64 %1187 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1175, 24
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = add i64 %1175, 32
  %1194 = inttoptr i64 %1193 to i64*
  %1195 = load i64, i64* %1194
  %1196 = add i64 %1175, 40
  %1197 = inttoptr i64 %1196 to i64*
  %1198 = load i64, i64* %1197
  %1199 = add i64 %1175, 48
  %1200 = inttoptr i64 %1199 to i64*
  %1201 = load i64, i64* %1200
  %1202 = add i64 %1175, 56
  %1203 = inttoptr i64 %1202 to i64*
  %1204 = load i64, i64* %1203
  %1205 = add i64 %1175, 64
  %1206 = inttoptr i64 %1205 to i64*
  %1207 = load i64, i64* %1206
  %1208 = add i64 %1175, 72
  %1209 = inttoptr i64 %1208 to i64*
  %1210 = load i64, i64* %1209
  %1211 = inttoptr i64 %1176 to i64*
  %1212 = load i64, i64* %1211
  store i64 %1212, i64* %3, align 8, !alias.scope !1651, !noalias !1654
  store i64 %1175, i64* %14, align 8, !alias.scope !1651, !noalias !1654
  %1213 = tail call i64 @fprintf(i64 %1173, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2761), i64 %1178, i64 %1179, i64 %1180, i64 %1181, i64 %1183, i64 %1186, i64 %1189, i64 %1192, i64 %1195, i64 %1198, i64 %1201, i64 %1204, i64 %1207, i64 %1210), !noalias !1651
  %1214 = load i64, i64* %15, align 8
  %1215 = add i64 %1214, -44
  %1216 = trunc i64 %1213 to i32
  %1217 = load i64, i64* %3, align 8
  %1218 = add i64 %1217, 3
  %1219 = inttoptr i64 %1215 to i32*
  store i32 %1216, i32* %1219
  br label %block_40369e
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40b830_InitializeTree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40b830:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %13, align 8, !tbaa !1240
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = add i64 %16, -16
  %20 = load i64, i64* %12, align 8
  %21 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %21
  %22 = add i64 %16, -20
  %23 = load i32, i32* %7, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %16, -24
  %26 = load i32, i32* %5, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = add i64 %16, -16
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29
  %31 = inttoptr i64 %30 to i64*
  store i64 0, i64* %31
  %32 = inttoptr i64 %28 to i64*
  %33 = load i64, i64* %32
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  store i64 0, i64* %35
  %36 = inttoptr i64 %28 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %37, 40
  %39 = inttoptr i64 %38 to i32*
  store i32 0, i32* %39
  %40 = inttoptr i64 %28 to i64*
  %41 = load i64, i64* %40
  %42 = add i64 %41, 56
  %43 = inttoptr i64 %42 to i32*
  store i32 0, i32* %43
  %44 = add i64 %16, -20
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = shl i32 %46, 2
  %54 = add i32 %53, -4
  %55 = zext i32 %54 to i64
  %56 = add nuw nsw i64 %55, 32
  %57 = load i64, i64* %14, align 8
  %58 = add i64 %57, -16
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59
  %61 = shl i32 %60, 3
  %62 = zext i32 %61 to i64
  %63 = add nuw nsw i64 %56, %62
  store i64 %63, i64* %12, align 8, !tbaa !1240
  %64 = trunc i64 %63 to i32
  %65 = add i64 %57, -8
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  %68 = add i64 %67, 44
  %69 = inttoptr i64 %68 to i32*
  store i32 %64, i32* %69
  %70 = inttoptr i64 %65 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %71, 44
  %73 = inttoptr i64 %72 to i32*
  %74 = load i32, i32* %73
  %75 = and i32 %74, 7
  %76 = icmp eq i32 %75, 0
  %77 = load i64, i64* %14, align 8
  br i1 %76, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, label %block_40b8a5

block_40b8a5:                                     ; preds = %block_40b830
  %78 = add i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = add i64 %80, 44
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i32 %83, 4
  %85 = inttoptr i64 %81 to i32*
  store i32 %84, i32* %85
  br label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %block_40b8a5, %block_40b830
  %86 = phi %struct.Memory* [ %2, %block_40b8a5 ], [ %2, %block_40b830 ]
  %87 = add i64 %77, -8
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88
  %90 = add i64 %89, 60
  %91 = inttoptr i64 %90 to i32*
  store i32 0, i32* %91
  %92 = add i64 %77, -12
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = shl i32 %94, 2
  %96 = add i64 %77, -16
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97
  %99 = shl i32 %98, 3
  %100 = add i32 %99, %95
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %9, align 8, !tbaa !1240
  %102 = load i64, i64* %14, align 8
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104
  %106 = add i64 %105, 48
  %107 = inttoptr i64 %106 to i32*
  store i32 %100, i32* %107
  %108 = inttoptr i64 %103 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %109, 32
  %111 = inttoptr i64 %110 to i64*
  store i64 0, i64* %111
  %112 = inttoptr i64 %103 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %113, 52
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115
  %117 = add i64 %113, 44
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118
  %120 = udiv i32 %116, %119
  %121 = urem i32 %116, %119
  %122 = zext i32 %121 to i64
  store i64 %122, i64* %10, align 8, !tbaa !1240
  store i8 0, i8* %47, align 1, !tbaa !1264
  store i8 0, i8* %48, align 1, !tbaa !1278
  store i8 0, i8* %49, align 1, !tbaa !1279
  store i8 0, i8* %50, align 1, !tbaa !1280
  store i8 0, i8* %51, align 1, !tbaa !1281
  store i8 0, i8* %52, align 1, !tbaa !1282
  %123 = add i64 %102, -8
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %125, 68
  %127 = inttoptr i64 %126 to i32*
  store i32 %120, i32* %127
  %128 = inttoptr i64 %123 to i64*
  %129 = load i64, i64* %128
  %130 = add i64 %129, 68
  %131 = inttoptr i64 %130 to i32*
  %132 = load i32, i32* %131
  %133 = add i64 %129, 64
  %134 = inttoptr i64 %133 to i32*
  store i32 %132, i32* %134
  %135 = add i64 %102, -12
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136
  %138 = inttoptr i64 %123 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %139, 72
  %141 = inttoptr i64 %140 to i32*
  store i32 %137, i32* %141
  %142 = add i64 %102, -16
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %8, align 8, !tbaa !1240
  %146 = inttoptr i64 %123 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %11, align 8, !tbaa !1240
  %148 = add i64 %147, 76
  %149 = inttoptr i64 %148 to i32*
  store i32 %144, i32* %149
  %150 = load i64, i64* %13, align 8, !tbaa !1240
  %151 = add i64 %150, 8
  %152 = inttoptr i64 %150 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %14, align 8, !tbaa !1240
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %3, align 8, !tbaa !1240
  %156 = add i64 %150, 16
  store i64 %156, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %86
}

; Function Attrs: noinline
define %struct.Memory* @sub_409ed0_PartitionCube(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_409ed0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -632
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -36
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = inttoptr i64 %24 to i64*
  %30 = load i64, i64* %29
  %31 = add i64 %30, 4472
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 4
  %36 = add i64 %1, 43
  %37 = add i64 %14, -640
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39
  store i64 %40, i64* %3, align 8, !alias.scope !1656, !noalias !1659
  store i64 %17, i64* %11, align 8, !alias.scope !1656, !noalias !1659
  %41 = tail call i64 @malloc(i64 %35)
  %42 = load i64, i64* %12, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %3, align 8
  %45 = inttoptr i64 %43 to i64*
  store i64 %41, i64* %45
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46
  %48 = icmp eq i64 %47, 0
  %49 = select i1 %48, i64 15, i64 58
  %50 = add i64 %44, %49
  br i1 %48, label %block_409f0a, label %block_409f35

block_40a0ef:                                     ; preds = %block_409f3f
  %51 = add i64 %482, -24
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %10, align 8, !tbaa !1240
  %54 = add i64 %482, -28
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = zext i32 %56 to i64
  store i64 %57, i64* %9, align 8, !tbaa !1240
  %58 = add i64 %481, -2719
  %59 = add i64 %481, 12
  %60 = load i64, i64* %11, align 8, !tbaa !1240
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62
  store i64 %61, i64* %11, align 8, !tbaa !1240
  %63 = tail call %struct.Memory* @sub_409650_vszsort(%struct.State* nonnull %0, i64 %58, %struct.Memory* %429)
  %64 = load i64, i64* %12, align 8
  %65 = add i64 %64, -324
  %66 = load i64, i64* %3, align 8
  %67 = add i64 %66, 10
  %68 = inttoptr i64 %65 to i32*
  store i32 0, i32* %68
  %69 = add i64 %64, -28
  %70 = add i64 %64, -16
  %71 = add i64 %64, -24
  %72 = add i64 %64, -608
  br label %block_40a105

block_409f6b:                                     ; preds = %block_409f3f
  %73 = add i64 %482, -592
  %74 = add i64 %481, 19
  %75 = load i64, i64* %11, align 8, !tbaa !1240
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %3, align 8, !alias.scope !1661, !noalias !1664
  store i64 %75, i64* %11, align 8, !alias.scope !1661, !noalias !1664
  %80 = tail call i64 @strcmp(i64 %73, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 886), i64 4294967295) to i32) to i64)), !noalias !1661
  %81 = trunc i64 %80 to i32
  %82 = load i64, i64* %3, align 8
  %83 = icmp eq i32 %81, 0
  %84 = select i1 %83, i64 9, i64 141
  %85 = add i64 %82, %84
  br i1 %83, label %block_409f87, label %block_40a00b

block_40a0ea:                                     ; preds = %block_40a00b.block_40a0ea_crit_edge, %block_40a0a5
  %86 = phi i64 [ %251, %block_40a00b.block_40a0ea_crit_edge ], [ %188, %block_40a0a5 ]
  %87 = phi i64 [ %250, %block_40a00b.block_40a0ea_crit_edge ], [ %195, %block_40a0a5 ]
  %88 = phi %struct.Memory* [ %236, %block_40a00b.block_40a0ea_crit_edge ], [ %163, %block_40a0a5 ]
  %89 = add i64 %87, -427
  br label %block_409f3f

block_40a1e6:                                     ; preds = %block_40a16a
  store i64 0, i64* %9, align 8, !tbaa !1240
  store i64 0, i64* %8, align 8, !tbaa !1240
  %90 = load i64, i64* %12, align 8
  %91 = add i64 %90, -16
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %93, 4264
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %160, 22
  %98 = load i64, i64* %11, align 8, !tbaa !1240
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101
  store i64 %102, i64* %3, align 8, !alias.scope !1666, !noalias !1669
  store i64 %98, i64* %11, align 8, !alias.scope !1666, !noalias !1669
  %103 = tail call i64 @fseek(i64 %96, i64 0, i64 0), !noalias !1666
  %104 = load i64, i64* %12, align 8
  %105 = add i64 %104, -24
  %106 = load i64, i64* %3, align 8
  %107 = inttoptr i64 %105 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %7, align 8, !tbaa !1240
  store i64 %108, i64* %10, align 8, !tbaa !1240
  %109 = add i64 %104, -624
  %110 = trunc i64 %103 to i32
  %111 = inttoptr i64 %109 to i32*
  store i32 %110, i32* %111
  %112 = add i64 %106, 18
  %113 = load i64, i64* %11, align 8, !tbaa !1240
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115
  %116 = inttoptr i64 %114 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %3, align 8, !alias.scope !1671, !noalias !1674
  store i64 %113, i64* %11, align 8, !alias.scope !1671, !noalias !1674
  %118 = tail call i64 @free(i64 %108), !noalias !1671
  %119 = load i64, i64* %12, align 8
  %120 = add i64 %119, -4
  %121 = inttoptr i64 %120 to i32*
  store i32 0, i32* %121
  br label %block_40a215

block_409fd9:                                     ; preds = %block_409fb8
  %122 = load i64, i64* %12, align 8
  %123 = add i64 %122, -592
  %124 = add i64 %265, 12
  %125 = load i64, i64* %11, align 8, !tbaa !1240
  %126 = add i64 %125, -8
  %127 = inttoptr i64 %126 to i64*
  store i64 %124, i64* %127
  %128 = inttoptr i64 %126 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %3, align 8, !alias.scope !1676, !noalias !1679
  store i64 %125, i64* %11, align 8, !alias.scope !1676, !noalias !1679
  %130 = tail call i64 @atoi(i64 %123), !noalias !1676
  %131 = load i64, i64* %12, align 8
  %132 = add i64 %131, -308
  %133 = load i64, i64* %3, align 8
  %134 = inttoptr i64 %132 to i32*
  %135 = load i32, i32* %134
  %136 = zext i32 %135 to i64
  %137 = add i32 %135, 1
  %138 = inttoptr i64 %132 to i32*
  store i32 %137, i32* %138
  store i64 %136, i64* %7, align 8, !tbaa !1240
  %139 = shl nuw nsw i64 %136, 2
  %140 = add nsw i64 %139, -304
  %141 = add i64 %140, %131
  %142 = trunc i64 %130 to i32
  %143 = inttoptr i64 %141 to i32*
  store i32 %142, i32* %143
  %144 = add i64 %133, -89
  br label %block_409f8c

block_40a16a:                                     ; preds = %block_40a105
  %145 = inttoptr i64 %71 to i64*
  %146 = load i64, i64* %145
  store i64 %146, i64* %10, align 8, !tbaa !1240
  %147 = zext i32 %423 to i64
  store i64 %147, i64* %9, align 8, !tbaa !1240
  %148 = inttoptr i64 %70 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %8, align 8, !tbaa !1240
  %150 = add i64 %426, -1850
  %151 = add i64 %426, 16
  %152 = load i64, i64* %11, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  store i64 %153, i64* %11, align 8, !tbaa !1240
  %155 = tail call %struct.Memory* @sub_409a30_MultiFileProcJobs(%struct.State* nonnull %0, i64 %150, %struct.Memory* %418)
  %156 = load i32, i32* %5, align 4
  %157 = load i64, i64* %3, align 8
  %158 = icmp eq i32 %156, 0
  %159 = select i1 %158, i64 108, i64 9
  %160 = add i64 %157, %159
  br i1 %158, label %block_40a1e6, label %block_40a183

block_409fd4:                                     ; preds = %block_409fb8
  %161 = add i64 %265, 50
  br label %block_40a006

block_40a0a5:                                     ; preds = %block_40a027, %block_40a095
  %162 = phi i64 [ %578, %block_40a027 ], [ %197, %block_40a095 ]
  %163 = phi %struct.Memory* [ %560, %block_40a027 ], [ %560, %block_40a095 ]
  %164 = inttoptr i64 %562 to i64*
  %165 = load i64, i64* %164
  %166 = add i64 %561, -24
  %167 = inttoptr i64 %166 to i64*
  %168 = load i64, i64* %167
  %169 = add i64 %561, -28
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = zext i32 %171 to i64
  %173 = shl nuw nsw i64 %172, 4
  %174 = add i64 %173, %168
  %175 = inttoptr i64 %174 to i64*
  store i64 %165, i64* %175
  %176 = add i64 %561, -320
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = inttoptr i64 %166 to i64*
  %180 = load i64, i64* %179
  %181 = inttoptr i64 %169 to i32*
  %182 = load i32, i32* %181
  %183 = zext i32 %182 to i64
  %184 = shl nuw nsw i64 %183, 4
  %185 = add i64 %184, %180
  store i64 %185, i64* %7, align 8, !tbaa !1240
  %186 = add i64 %185, 8
  %187 = inttoptr i64 %186 to i64*
  store i64 %178, i64* %187
  %188 = load i64, i64* %12, align 8
  %189 = add i64 %188, -28
  %190 = inttoptr i64 %189 to i32*
  %191 = load i32, i32* %190
  %192 = add i32 %191, 1
  %193 = inttoptr i64 %189 to i32*
  store i32 %192, i32* %193
  %194 = add i64 %188, -308
  %195 = add i64 %162, 69
  %196 = inttoptr i64 %194 to i32*
  store i32 0, i32* %196
  br label %block_40a0ea

block_40a095:                                     ; preds = %block_40a027
  %197 = add i64 %578, 16
  %198 = inttoptr i64 %562 to i64*
  store i64 %572, i64* %198
  br label %block_40a0a5

block_40a215:                                     ; preds = %block_40a183, %block_409f0a, %block_40a1e6
  %199 = phi i64 [ %119, %block_40a1e6 ], [ %689, %block_40a183 ], [ %344, %block_409f0a ]
  %200 = phi %struct.Memory* [ %155, %block_40a1e6 ], [ %155, %block_40a183 ], [ %2, %block_409f0a ]
  %201 = add i64 %199, -4
  %202 = inttoptr i64 %201 to i32*
  %203 = load i32, i32* %202
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %6, align 8, !tbaa !1240
  %205 = load i64, i64* %11, align 8
  %206 = add i64 %205, 624
  %207 = icmp ugt i64 %205, -625
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %18, align 1, !tbaa !1264
  %209 = trunc i64 %206 to i32
  %210 = and i32 %209, 255
  %211 = tail call i32 @llvm.ctpop.i32(i32 %210) #10
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = xor i8 %213, 1
  store i8 %214, i8* %19, align 1, !tbaa !1278
  %215 = xor i64 %205, 16
  %216 = xor i64 %215, %206
  %217 = lshr i64 %216, 4
  %218 = trunc i64 %217 to i8
  %219 = and i8 %218, 1
  store i8 %219, i8* %20, align 1, !tbaa !1279
  %220 = icmp eq i64 %206, 0
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %21, align 1, !tbaa !1280
  %222 = lshr i64 %206, 63
  %223 = trunc i64 %222 to i8
  store i8 %223, i8* %22, align 1, !tbaa !1281
  %224 = lshr i64 %205, 63
  %225 = xor i64 %222, %224
  %226 = add nuw nsw i64 %225, %222
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %23, align 1, !tbaa !1282
  %229 = add i64 %205, 632
  %230 = inttoptr i64 %206 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %12, align 8, !tbaa !1240
  %232 = inttoptr i64 %229 to i64*
  %233 = load i64, i64* %232
  store i64 %233, i64* %3, align 8, !tbaa !1240
  %234 = add i64 %205, 640
  store i64 %234, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %200

block_40a00b:                                     ; preds = %block_40a006, %block_409f6b
  %235 = phi i64 [ %85, %block_409f6b ], [ %355, %block_40a006 ]
  %236 = phi %struct.Memory* [ %429, %block_409f6b ], [ %354, %block_40a006 ]
  %237 = load i64, i64* %12, align 8
  %238 = add i64 %237, -592
  %239 = add i64 %235, 19
  %240 = load i64, i64* %11, align 8, !tbaa !1240
  %241 = add i64 %240, -8
  %242 = inttoptr i64 %241 to i64*
  store i64 %239, i64* %242
  %243 = inttoptr i64 %241 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !alias.scope !1681, !noalias !1684
  store i64 %240, i64* %11, align 8, !alias.scope !1681, !noalias !1684
  %245 = tail call i64 @strcmp(i64 %238, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4932), i64 4294967295) to i32) to i64)), !noalias !1681
  %246 = trunc i64 %245 to i32
  %247 = load i64, i64* %3, align 8
  %248 = icmp eq i32 %246, 0
  %249 = select i1 %248, i64 9, i64 204
  %250 = add i64 %247, %249
  br i1 %248, label %block_40a027, label %block_40a00b.block_40a0ea_crit_edge

block_40a00b.block_40a0ea_crit_edge:              ; preds = %block_40a00b
  %251 = load i64, i64* %12, align 8
  br label %block_40a0ea

block_409fb8:                                     ; preds = %block_409f8c
  %252 = load i64, i64* %12, align 8
  %253 = add i64 %252, -592
  %254 = add i64 %416, 19
  %255 = load i64, i64* %11, align 8, !tbaa !1240
  %256 = add i64 %255, -8
  %257 = inttoptr i64 %256 to i64*
  store i64 %254, i64* %257
  %258 = inttoptr i64 %256 to i64*
  %259 = load i64, i64* %258
  store i64 %259, i64* %3, align 8, !alias.scope !1686, !noalias !1689
  store i64 %255, i64* %11, align 8, !alias.scope !1686, !noalias !1689
  %260 = tail call i64 @strcmp(i64 %253, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4927), i64 4294967295) to i32) to i64)), !noalias !1686
  %261 = trunc i64 %260 to i32
  %262 = load i64, i64* %3, align 8
  %263 = icmp eq i32 %261, 0
  %264 = select i1 %263, i64 9, i64 14
  %265 = add i64 %262, %264
  br i1 %263, label %block_409fd4, label %block_409fd9

block_40a114:                                     ; preds = %block_40a105
  %266 = inttoptr i64 %70 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %267, 536
  %269 = inttoptr i64 %268 to i32*
  %270 = load i32, i32* %269
  %271 = sub i32 64, %270
  %272 = inttoptr i64 %71 to i64*
  %273 = load i64, i64* %272
  %274 = shl nuw nsw i64 %421, 4
  %275 = add i64 %274, %273
  %276 = add i64 %275, 8
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  %279 = inttoptr i64 %72 to i64*
  store i64 %275, i64* %279
  %280 = trunc i32 %271 to i6
  switch i6 %280, label %281 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %286
  ]

; <label>:281:                                    ; preds = %block_40a114
  %282 = and i32 %271, 63
  %283 = zext i32 %282 to i64
  %284 = add nsw i64 %283, -1
  %285 = lshr i64 %278, %284
  br label %286

; <label>:286:                                    ; preds = %281, %block_40a114
  %287 = phi i64 [ %285, %281 ], [ %278, %block_40a114 ]
  %288 = lshr i64 %287, 1
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %286, %block_40a114
  %289 = phi i64 [ %278, %block_40a114 ], [ %288, %286 ]
  %290 = inttoptr i64 %72 to i64*
  %291 = load i64, i64* %290
  %292 = add i64 %291, 8
  %293 = inttoptr i64 %292 to i64*
  store i64 %289, i64* %293
  %294 = inttoptr i64 %65 to i32*
  %295 = load i32, i32* %294
  %296 = add i32 %295, 1
  %297 = inttoptr i64 %65 to i32*
  store i32 %296, i32* %297
  %298 = add i64 %426, -15
  br label %block_40a105

block_409f0a:                                     ; preds = %block_409ed0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5178), i64* %9, align 8, !tbaa !1240
  %299 = load i64, i64* @stderr
  store i64 %299, i64* %10, align 8, !tbaa !1240
  %300 = add i64 %50, 25
  %301 = load i64, i64* %11, align 8, !tbaa !1240
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %308 = load i64, i64* %305, align 8, !alias.scope !1691, !noalias !1694
  %309 = load i64, i64* %304, align 8, !alias.scope !1691, !noalias !1694
  %310 = load i64, i64* %306, align 8, !alias.scope !1691, !noalias !1694
  %311 = load i64, i64* %307, align 8, !alias.scope !1691, !noalias !1694
  %312 = inttoptr i64 %301 to i64*
  %313 = load i64, i64* %312
  %314 = add i64 %301, 8
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  %317 = add i64 %301, 16
  %318 = inttoptr i64 %317 to i64*
  %319 = load i64, i64* %318
  %320 = add i64 %301, 24
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %301, 32
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %301, 40
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  %329 = add i64 %301, 48
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330
  %332 = add i64 %301, 56
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %301, 64
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %301, 72
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = inttoptr i64 %302 to i64*
  %342 = load i64, i64* %341
  store i64 %342, i64* %3, align 8, !alias.scope !1691, !noalias !1694
  store i64 %301, i64* %11, align 8, !alias.scope !1691, !noalias !1694
  %343 = tail call i64 @fprintf(i64 %299, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5178), i64 %308, i64 %309, i64 %310, i64 %311, i64 %313, i64 %316, i64 %319, i64 %322, i64 %325, i64 %328, i64 %331, i64 %334, i64 %337, i64 %340), !noalias !1691
  %344 = load i64, i64* %12, align 8
  %345 = add i64 %344, -4
  %346 = inttoptr i64 %345 to i32*
  store i32 5, i32* %346
  %347 = add i64 %344, -596
  %348 = trunc i64 %343 to i32
  %349 = inttoptr i64 %347 to i32*
  store i32 %348, i32* %349
  br label %block_40a215

block_409f87:                                     ; preds = %block_409f6b
  %350 = add i64 %85, 5
  %351 = load i64, i64* %12, align 8
  %352 = load i64, i64* %359, align 8, !alias.scope !1696, !noalias !1699
  br label %block_409f8c

block_40a006.loopexit:                            ; preds = %block_409f8c
  br label %block_40a006

block_40a006:                                     ; preds = %block_40a006.loopexit, %block_409fd4
  %353 = phi i64 [ %161, %block_409fd4 ], [ %416, %block_40a006.loopexit ]
  %354 = phi %struct.Memory* [ %366, %block_409fd4 ], [ %366, %block_40a006.loopexit ]
  %355 = add i64 %353, 5
  br label %block_40a00b

block_409f35:                                     ; preds = %block_409ed0
  %356 = add i64 %42, -308
  %357 = add i64 %50, 10
  %358 = inttoptr i64 %356 to i32*
  store i32 0, i32* %358
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_409f3f

block_409f8c:                                     ; preds = %block_409f87, %block_409fd9
  %363 = phi i64 [ %352, %block_409f87 ], [ %136, %block_409fd9 ]
  %364 = phi i64 [ %351, %block_409f87 ], [ %131, %block_409fd9 ]
  %365 = phi i64 [ %350, %block_409f87 ], [ %144, %block_409fd9 ]
  %366 = phi %struct.Memory* [ %429, %block_409f87 ], [ %366, %block_409fd9 ]
  %367 = add i64 %364, -592
  %368 = add i64 %364, -16
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %370, 4264
  %372 = inttoptr i64 %371 to i64*
  %373 = load i64, i64* %372
  %374 = add i64 %365, 35
  %375 = load i64, i64* %11, align 8, !tbaa !1240
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377
  %378 = load i64, i64* %361, align 8, !alias.scope !1696, !noalias !1699
  %379 = load i64, i64* %362, align 8, !alias.scope !1696, !noalias !1699
  %380 = inttoptr i64 %375 to i64*
  %381 = load i64, i64* %380
  %382 = add i64 %375, 8
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %375, 16
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %375, 24
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %375, 32
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %375, 40
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %375, 48
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %375, 56
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %375, 64
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %375, 72
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = inttoptr i64 %376 to i64*
  %410 = load i64, i64* %409
  store i64 %410, i64* %3, align 8, !alias.scope !1696, !noalias !1699
  store i64 %375, i64* %11, align 8, !alias.scope !1696, !noalias !1699
  %411 = tail call i64 @__isoc99_fscanf(i64 %373, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %367, i64 %363, i64 %378, i64 %379, i64 %381, i64 %384, i64 %387, i64 %390, i64 %393, i64 %396, i64 %399, i64 %402, i64 %405, i64 %408), !noalias !1696
  %412 = trunc i64 %411 to i32
  %413 = load i64, i64* %3, align 8
  %414 = icmp eq i32 %412, 0
  %415 = select i1 %414, i64 87, i64 9
  %416 = add i64 %413, %415
  br i1 %414, label %block_40a006.loopexit, label %block_409fb8

block_40a105:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_40a0ef
  %417 = phi i64 [ %67, %block_40a0ef ], [ %298, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  %418 = phi %struct.Memory* [ %63, %block_40a0ef ], [ %418, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  %419 = inttoptr i64 %65 to i32*
  %420 = load i32, i32* %419
  %421 = zext i32 %420 to i64
  %422 = inttoptr i64 %69 to i32*
  %423 = load i32, i32* %422
  %424 = icmp ult i32 %420, %423
  %425 = select i1 %424, i64 15, i64 101
  %426 = add i64 %417, %425
  br i1 %424, label %block_40a114, label %block_40a16a

block_409f3f:                                     ; preds = %block_409f35, %block_40a0ea
  %427 = phi i64 [ %42, %block_409f35 ], [ %86, %block_40a0ea ]
  %428 = phi i64 [ %357, %block_409f35 ], [ %89, %block_40a0ea ]
  %429 = phi %struct.Memory* [ %2, %block_409f35 ], [ %88, %block_40a0ea ]
  %430 = add i64 %427, -592
  store i64 %430, i64* %8, align 8, !tbaa !1240
  %431 = add i64 %427, -16
  %432 = inttoptr i64 %431 to i64*
  %433 = load i64, i64* %432
  %434 = add i64 %433, 4264
  %435 = inttoptr i64 %434 to i64*
  %436 = load i64, i64* %435
  %437 = add i64 %428, 35
  %438 = load i64, i64* %11, align 8, !tbaa !1240
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %437, i64* %440
  %441 = load i64, i64* %359, align 8, !alias.scope !1701, !noalias !1704
  %442 = load i64, i64* %361, align 8, !alias.scope !1701, !noalias !1704
  %443 = load i64, i64* %362, align 8, !alias.scope !1701, !noalias !1704
  %444 = inttoptr i64 %438 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %438, 8
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %438, 16
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %438, 24
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %438, 32
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %438, 40
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %438, 48
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = add i64 %438, 56
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %438, 64
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = add i64 %438, 72
  %471 = inttoptr i64 %470 to i64*
  %472 = load i64, i64* %471
  %473 = inttoptr i64 %439 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %3, align 8, !alias.scope !1701, !noalias !1704
  store i64 %438, i64* %11, align 8, !alias.scope !1701, !noalias !1704
  %475 = tail call i64 @__isoc99_fscanf(i64 %436, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %430, i64 %441, i64 %442, i64 %443, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457, i64 %460, i64 %463, i64 %466, i64 %469, i64 %472), !noalias !1701
  %476 = trunc i64 %475 to i32
  %477 = load i64, i64* %3, align 8
  %478 = add i32 %476, 1
  %479 = icmp eq i32 %478, 0
  %480 = select i1 %479, i64 397, i64 9
  %481 = add i64 %477, %480
  %482 = load i64, i64* %12, align 8
  br i1 %479, label %block_40a0ef, label %block_409f6b

block_40a027:                                     ; preds = %block_40a00b
  %483 = load i64, i64* %12, align 8
  %484 = add i64 %483, -592
  %485 = add i64 %483, -16
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %487, 4264
  %489 = inttoptr i64 %488 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %250, 35
  %492 = load i64, i64* %11, align 8, !tbaa !1240
  %493 = add i64 %492, -8
  %494 = inttoptr i64 %493 to i64*
  store i64 %491, i64* %494
  %495 = load i64, i64* %359, align 8, !alias.scope !1706, !noalias !1709
  %496 = load i64, i64* %361, align 8, !alias.scope !1706, !noalias !1709
  %497 = load i64, i64* %362, align 8, !alias.scope !1706, !noalias !1709
  %498 = inttoptr i64 %492 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %492, 8
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %492, 16
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %492, 24
  %507 = inttoptr i64 %506 to i64*
  %508 = load i64, i64* %507
  %509 = add i64 %492, 32
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %492, 40
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %492, 48
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = add i64 %492, 56
  %519 = inttoptr i64 %518 to i64*
  %520 = load i64, i64* %519
  %521 = add i64 %492, 64
  %522 = inttoptr i64 %521 to i64*
  %523 = load i64, i64* %522
  %524 = add i64 %492, 72
  %525 = inttoptr i64 %524 to i64*
  %526 = load i64, i64* %525
  %527 = inttoptr i64 %493 to i64*
  %528 = load i64, i64* %527
  store i64 %528, i64* %3, align 8, !alias.scope !1706, !noalias !1709
  store i64 %492, i64* %11, align 8, !alias.scope !1706, !noalias !1709
  %529 = tail call i64 @__isoc99_fscanf(i64 %490, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %484, i64 %495, i64 %496, i64 %497, i64 %499, i64 %502, i64 %505, i64 %508, i64 %511, i64 %514, i64 %517, i64 %520, i64 %523, i64 %526), !noalias !1706
  %530 = load i64, i64* %12, align 8
  %531 = add i64 %530, -592
  %532 = load i64, i64* %3, align 8
  %533 = add i64 %530, -600
  %534 = trunc i64 %529 to i32
  %535 = inttoptr i64 %533 to i32*
  store i32 %534, i32* %535
  %536 = add i64 %532, 18
  %537 = load i64, i64* %11, align 8, !tbaa !1240
  %538 = add i64 %537, -8
  %539 = inttoptr i64 %538 to i64*
  store i64 %536, i64* %539
  %540 = inttoptr i64 %538 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %3, align 8, !alias.scope !1711, !noalias !1714
  store i64 %537, i64* %11, align 8, !alias.scope !1711, !noalias !1714
  %542 = tail call i64 @atoi(i64 %531), !noalias !1711
  %543 = load i64, i64* %12, align 8
  %544 = add i64 %543, -320
  %545 = load i64, i64* %3, align 8
  store i64 %544, i64* %10, align 8, !tbaa !1240
  %546 = add i64 %543, -304
  store i64 %546, i64* %9, align 8, !tbaa !1240
  %547 = shl i64 %542, 32
  %548 = ashr exact i64 %547, 32
  %549 = add i64 %543, -40
  %550 = inttoptr i64 %549 to i64*
  store i64 %548, i64* %550
  %551 = add i64 %543, -308
  %552 = inttoptr i64 %551 to i32*
  %553 = load i32, i32* %552
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %8, align 8, !tbaa !1240
  %555 = add i64 %545, -3292
  %556 = add i64 %545, 32
  %557 = load i64, i64* %11, align 8, !tbaa !1240
  %558 = add i64 %557, -8
  %559 = inttoptr i64 %558 to i64*
  store i64 %556, i64* %559
  store i64 %558, i64* %11, align 8, !tbaa !1240
  %560 = tail call %struct.Memory* @sub_409380_CreateBinTuple(%struct.State* nonnull %0, i64 %555, %struct.Memory* %236)
  %561 = load i64, i64* %12, align 8
  %562 = add i64 %561, -40
  %563 = load i64, i64* %3, align 8
  %564 = inttoptr i64 %562 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %561, -16
  %567 = inttoptr i64 %566 to i64*
  %568 = load i64, i64* %567
  %569 = add i64 %568, 552
  %570 = inttoptr i64 %569 to i32*
  %571 = load i32, i32* %570
  %572 = zext i32 %571 to i64
  %573 = sub i64 %565, %572
  %574 = icmp ult i64 %565, %572
  %575 = icmp eq i64 %573, 0
  %576 = or i1 %575, %574
  %577 = select i1 %576, i64 41, i64 25
  %578 = add i64 %563, %577
  br i1 %576, label %block_40a0a5, label %block_40a095

block_40a183:                                     ; preds = %block_40a16a
  %579 = load i64, i64* @stderr
  %580 = add i64 %160, 25
  %581 = load i64, i64* %11, align 8, !tbaa !1240
  %582 = add i64 %581, -8
  %583 = inttoptr i64 %582 to i64*
  store i64 %580, i64* %583
  %584 = load i64, i64* %360, align 8, !alias.scope !1716, !noalias !1719
  %585 = load i64, i64* %359, align 8, !alias.scope !1716, !noalias !1719
  %586 = load i64, i64* %361, align 8, !alias.scope !1716, !noalias !1719
  %587 = load i64, i64* %362, align 8, !alias.scope !1716, !noalias !1719
  %588 = inttoptr i64 %581 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %581, 8
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %581, 16
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %581, 24
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %581, 32
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %581, 40
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = add i64 %581, 48
  %606 = inttoptr i64 %605 to i64*
  %607 = load i64, i64* %606
  %608 = add i64 %581, 56
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %581, 64
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %581, 72
  %615 = inttoptr i64 %614 to i64*
  %616 = load i64, i64* %615
  %617 = inttoptr i64 %582 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %3, align 8, !alias.scope !1716, !noalias !1719
  store i64 %581, i64* %11, align 8, !alias.scope !1716, !noalias !1719
  %619 = tail call i64 @fprintf(i64 %579, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5224), i64 %584, i64 %585, i64 %586, i64 %587, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601, i64 %604, i64 %607, i64 %610, i64 %613, i64 %616), !noalias !1716
  %620 = load i64, i64* %3, align 8
  %621 = load i64, i64* %12, align 8
  %622 = add i64 %621, -16
  %623 = inttoptr i64 %622 to i64*
  %624 = load i64, i64* %623
  %625 = add i64 %624, 4224
  %626 = inttoptr i64 %625 to i64*
  %627 = load i64, i64* %626
  %628 = add i64 %621, -612
  %629 = trunc i64 %619 to i32
  %630 = inttoptr i64 %628 to i32*
  store i32 %629, i32* %630
  %631 = add i64 %620, 34
  %632 = load i64, i64* %11, align 8, !tbaa !1240
  %633 = add i64 %632, -8
  %634 = inttoptr i64 %633 to i64*
  store i64 %631, i64* %634
  %635 = load i64, i64* %360, align 8, !alias.scope !1721, !noalias !1724
  %636 = load i64, i64* %359, align 8, !alias.scope !1721, !noalias !1724
  %637 = load i64, i64* %361, align 8, !alias.scope !1721, !noalias !1724
  %638 = load i64, i64* %362, align 8, !alias.scope !1721, !noalias !1724
  %639 = inttoptr i64 %632 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %632, 8
  %642 = inttoptr i64 %641 to i64*
  %643 = load i64, i64* %642
  %644 = add i64 %632, 16
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %632, 24
  %648 = inttoptr i64 %647 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %632, 32
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = add i64 %632, 40
  %654 = inttoptr i64 %653 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %632, 48
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %632, 56
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %632, 64
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = add i64 %632, 72
  %666 = inttoptr i64 %665 to i64*
  %667 = load i64, i64* %666
  %668 = inttoptr i64 %633 to i64*
  %669 = load i64, i64* %668
  store i64 %669, i64* %3, align 8, !alias.scope !1721, !noalias !1724
  store i64 %632, i64* %11, align 8, !alias.scope !1721, !noalias !1724
  %670 = tail call i64 @fprintf(i64 %627, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5256), i64 %635, i64 %636, i64 %637, i64 %638, i64 %640, i64 %643, i64 %646, i64 %649, i64 %652, i64 %655, i64 %658, i64 %661, i64 %664, i64 %667), !noalias !1721
  %671 = load i64, i64* %12, align 8
  %672 = add i64 %671, -16
  %673 = load i64, i64* %3, align 8
  %674 = inttoptr i64 %672 to i64*
  %675 = load i64, i64* %674
  store i64 %675, i64* %9, align 8, !tbaa !1240
  %676 = add i64 %675, 4224
  %677 = inttoptr i64 %676 to i64*
  %678 = load i64, i64* %677
  store i64 %678, i64* %10, align 8, !tbaa !1240
  %679 = add i64 %671, -616
  %680 = trunc i64 %670 to i32
  %681 = inttoptr i64 %679 to i32*
  store i32 %680, i32* %681
  %682 = add i64 %673, 22
  %683 = load i64, i64* %11, align 8, !tbaa !1240
  %684 = add i64 %683, -8
  %685 = inttoptr i64 %684 to i64*
  store i64 %682, i64* %685
  %686 = inttoptr i64 %684 to i64*
  %687 = load i64, i64* %686
  store i64 %687, i64* %3, align 8, !alias.scope !1726, !noalias !1729
  store i64 %683, i64* %11, align 8, !alias.scope !1726, !noalias !1729
  %688 = tail call i64 @fflush(i64 %678), !noalias !1726
  %689 = load i64, i64* %12, align 8
  %690 = add i64 %689, -4
  %691 = inttoptr i64 %690 to i32*
  store i32 1, i32* %691
  %692 = add i64 %689, -620
  %693 = trunc i64 %688 to i32
  %694 = inttoptr i64 %692 to i32*
  store i32 %693, i32* %694
  br label %block_40a215
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012a0_GetLCM(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4012a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -120
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %22 = add i64 %12, -24
  %23 = load i64, i64* %8, align 8
  %24 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %12, -32
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %12, -40
  %29 = load i64, i64* %6, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %12, -44
  %32 = inttoptr i64 %31 to i32*
  store i32 0, i32* %32
  %33 = add i64 %12, -48
  %34 = inttoptr i64 %33 to i32*
  store i32 0, i32* %34
  %35 = add i64 %12, -52
  %36 = inttoptr i64 %35 to i32*
  store i32 0, i32* %36
  %37 = load i64, i64* bitcast (%maxprmfctr_type* @maxprmfctr to i64*)
  %38 = add i64 %37, 1
  store i64 %38, i64* %6, align 8, !tbaa !1240
  store i64 %38, i64* %8, align 8, !tbaa !1240
  store i64 4, i64* %7, align 8, !tbaa !1240
  %39 = add i64 %1, 71
  %40 = load i64, i64* %9, align 8, !tbaa !1240
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %39, i64* %42
  %43 = inttoptr i64 %41 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %3, align 8, !alias.scope !1731, !noalias !1734
  store i64 %40, i64* %9, align 8, !alias.scope !1731, !noalias !1734
  %45 = tail call i64 @calloc(i64 %38, i64 4)
  %46 = load i64, i64* %10, align 8
  %47 = add i64 %46, -56
  %48 = load i64, i64* %3, align 8
  %49 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %49
  %50 = add i64 %46, -64
  %51 = inttoptr i64 %50 to i64*
  store i64 1, i64* %51
  %52 = add i64 %46, -72
  %53 = inttoptr i64 %52 to i64*
  store i64 2, i64* %53
  %54 = add i64 %46, -76
  %55 = inttoptr i64 %54 to i32*
  store i32 1, i32* %55
  %56 = add i64 %46, -80
  %57 = inttoptr i64 %56 to i32*
  store i32 1, i32* %57
  %58 = add i64 %46, -84
  %59 = inttoptr i64 %58 to i32*
  store i32 2, i32* %59
  %60 = add i64 %46, -36
  %61 = add i64 %48, 48
  %62 = inttoptr i64 %60 to i32*
  store i32 0, i32* %62
  br label %block_401317

block_40146d:                                     ; preds = %block_40144a
  %63 = inttoptr i64 %426 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  %66 = icmp eq i64 %65, %165
  %67 = select i1 %66, i64 38, i64 33
  %68 = add i64 %168, %67
  br i1 %66, label %block_401493, label %block_40148e

block_40135f:                                     ; preds = %block_401354
  store i64 2, i64* %5, align 8, !tbaa !1240
  store i64 %140, i64* %4, align 8, !tbaa !1240
  %69 = add i64 %136, -96
  %70 = inttoptr i64 %69 to i64*
  store i64 %140, i64* %70
  %71 = ashr i64 %140, 63
  store i64 %71, i64* %157, align 8, !tbaa !1240
  %72 = add i64 %154, 24
  store i64 %72, i64* %3, align 8
  %73 = zext i64 %71 to i128
  %74 = shl nuw i128 %73, 64
  %75 = zext i64 %140 to i128
  %76 = or i128 %74, %75
  %77 = sdiv i128 %76, 2
  %78 = trunc i128 %77 to i64
  %79 = and i128 %77, 18446744073709551615
  %80 = sext i64 %78 to i128
  %81 = and i128 %80, -18446744073709551616
  %82 = or i128 %81, %79
  %83 = icmp eq i128 %77, %82
  br i1 %83, label %89, label %84

; <label>:84:                                     ; preds = %block_40135f
  %85 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %72, %struct.Memory* %137) #14
  %86 = load i64, i64* %4, align 8
  %87 = load i64, i64* %3, align 8
  %88 = load i64, i64* %10, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:89:                                     ; preds = %block_40135f
  %90 = srem i128 %76, 2
  %91 = trunc i128 %90 to i64
  store i64 %91, i64* %157, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %89, %84
  %92 = phi i64 [ %88, %84 ], [ %136, %89 ]
  %93 = phi i64 [ %87, %84 ], [ %72, %89 ]
  %94 = phi i64 [ %86, %84 ], [ %78, %89 ]
  %95 = phi %struct.Memory* [ %85, %84 ], [ %137, %89 ]
  %96 = shl i64 %94, 1
  %97 = add i64 %92, -96
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98
  %100 = sub i64 %99, %96
  %101 = icmp eq i64 %100, 0
  %102 = select i1 %101, i64 17, i64 43
  %103 = add i64 %93, %102
  br i1 %101, label %block_401388, label %block_4013a2

block_4013e8:                                     ; preds = %block_4013ca
  %104 = inttoptr i64 %300 to i64*
  %105 = load i64, i64* %104
  %106 = shl nsw i64 %291, 3
  %107 = add i64 %106, %105
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = trunc i64 %109 to i32
  %111 = inttoptr i64 %426 to i32*
  store i32 %110, i32* %111
  %112 = inttoptr i64 %425 to i64*
  %113 = load i64, i64* %112
  %114 = inttoptr i64 %407 to i64*
  %115 = load i64, i64* %114
  %116 = shl i64 %115, 3
  %117 = add i64 %116, -8
  %118 = add i64 %117, %113
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119
  %121 = add i64 %120, 8
  %122 = inttoptr i64 %121 to i64*
  %123 = load i64, i64* %122
  %124 = inttoptr i64 %422 to i32*
  %125 = load i32, i32* %124
  %126 = sext i32 %125 to i64
  %127 = shl nsw i64 %126, 3
  %128 = add i64 %127, %123
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = trunc i64 %130 to i32
  %132 = inttoptr i64 %427 to i32*
  store i32 %131, i32* %132
  %133 = add i64 %315, 72
  %134 = inttoptr i64 %428 to i32*
  store i32 0, i32* %134
  br label %block_401430

block_401354:                                     ; preds = %block_401354.backedge, %block_40134d
  %135 = phi i64 [ %155, %block_40134d ], [ %185, %block_401354.backedge ]
  %136 = phi i64 [ %46, %block_40134d ], [ %92, %block_401354.backedge ]
  %137 = phi %struct.Memory* [ %434, %block_40134d ], [ %182, %block_401354.backedge ]
  %138 = add i64 %136, -16
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  store i8 0, i8* %16, align 1, !tbaa !1264
  %141 = trunc i64 %140 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #10
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %17, align 1, !tbaa !1278
  store i8 0, i8* %18, align 1, !tbaa !1279
  %147 = icmp eq i64 %140, 0
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %19, align 1, !tbaa !1280
  %149 = lshr i64 %140, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* %20, align 1, !tbaa !1281
  store i8 0, i8* %21, align 1, !tbaa !1282
  %151 = icmp ne i8 %150, 0
  %152 = or i1 %147, %151
  %153 = select i1 %152, i64 453, i64 11
  %154 = add i64 %135, %153
  br i1 %152, label %block_401519, label %block_40135f

block_40134d:                                     ; preds = %block_401317
  store i64 %439, i64* %5, align 8
  %155 = add i64 %452, 7
  %156 = inttoptr i64 %60 to i32*
  store i32 0, i32* %156
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_401354

block_4014de:                                     ; preds = %block_4014ca
  %158 = add i64 %398, 14
  %159 = inttoptr i64 %382 to i32*
  store i32 %386, i32* %159
  br label %block_4014ec

block_40144a:                                     ; preds = %block_401430
  %160 = inttoptr i64 %351 to i64*
  %161 = load i64, i64* %160
  %162 = shl nsw i64 %342, 3
  %163 = add i64 %162, %161
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164
  %166 = icmp ne i64 %165, 1
  %167 = select i1 %166, i64 35, i64 30
  %168 = add i64 %366, %167
  br i1 %166, label %block_40146d, label %block_4014ca.sink.split.loopexit

block_4014ff:                                     ; preds = %block_4013ca
  store i64 %296, i64* %6, align 8, !tbaa !1240
  %169 = add i64 %92, -16
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  %172 = ashr i64 %171, 1
  %173 = inttoptr i64 %169 to i64*
  store i64 %172, i64* %173
  %174 = inttoptr i64 %399 to i32*
  %175 = load i32, i32* %174
  %176 = add i64 %315, 18
  %177 = add i32 %175, 1
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %5, align 8, !tbaa !1240
  br label %block_401354.backedge

block_401354.backedge:                            ; preds = %block_401388, %block_4014ff
  %179 = phi i64 [ %399, %block_4014ff ], [ %505, %block_401388 ]
  %180 = phi i64 [ %176, %block_4014ff ], [ %508, %block_401388 ]
  %181 = phi i32 [ %177, %block_4014ff ], [ %509, %block_401388 ]
  %182 = phi %struct.Memory* [ %288, %block_4014ff ], [ %95, %block_401388 ]
  %183 = phi i64 [ -445, %block_4014ff ], [ -70, %block_401388 ]
  %184 = inttoptr i64 %179 to i32*
  store i32 %181, i32* %184
  %185 = add i64 %180, %183
  br label %block_401354

block_401549:                                     ; preds = %block_401537
  %186 = add i64 %316, -64
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = sext i32 %324 to i128
  %190 = and i128 %189, -18446744073709551616
  %191 = sext i64 %188 to i128
  %192 = and i128 %191, -18446744073709551616
  %193 = zext i64 %325 to i128
  %194 = or i128 %190, %193
  %195 = zext i64 %188 to i128
  %196 = or i128 %192, %195
  %197 = mul nsw i128 %196, %194
  %198 = trunc i128 %197 to i64
  %199 = sext i64 %198 to i128
  %200 = icmp ne i128 %199, %197
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %16, align 1, !tbaa !1264
  %202 = trunc i128 %197 to i32
  %203 = and i32 %202, 255
  %204 = tail call i32 @llvm.ctpop.i32(i32 %203) #10
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = xor i8 %206, 1
  store i8 %207, i8* %17, align 1, !tbaa !1278
  store i8 0, i8* %18, align 1, !tbaa !1279
  store i8 0, i8* %19, align 1, !tbaa !1280
  %208 = lshr i64 %198, 63
  %209 = trunc i64 %208 to i8
  store i8 %209, i8* %20, align 1, !tbaa !1281
  store i8 %201, i8* %21, align 1, !tbaa !1282
  %210 = inttoptr i64 %186 to i64*
  store i64 %198, i64* %210
  %211 = inttoptr i64 %186 to i64*
  %212 = load i64, i64* %211
  %213 = load i64, i64* bitcast (%LARGE_NUM_type* @LARGE_NUM to i64*)
  store i64 %213, i64* %5, align 8, !tbaa !1240
  %214 = add i64 %316, -104
  %215 = inttoptr i64 %214 to i64*
  store i64 %212, i64* %215
  store i64 %213, i64* %4, align 8, !tbaa !1240
  %216 = ashr i64 %213, 63
  store i64 %216, i64* %157, align 8, !tbaa !1240
  %217 = add i64 %336, 42
  store i64 %217, i64* %3, align 8
  %218 = load i64, i64* bitcast (%maxprmfctr_type* @maxprmfctr to i64*)
  %219 = sext i64 %218 to i128
  %220 = and i128 %219, -18446744073709551616
  %221 = zext i64 %216 to i128
  %222 = shl nuw i128 %221, 64
  %223 = zext i64 %213 to i128
  %224 = or i128 %222, %223
  %225 = zext i64 %218 to i128
  %226 = or i128 %220, %225
  %227 = sdiv i128 %224, %226
  %228 = trunc i128 %227 to i64
  %229 = and i128 %227, 18446744073709551615
  %230 = sext i64 %228 to i128
  %231 = and i128 %230, -18446744073709551616
  %232 = or i128 %231, %229
  %233 = icmp eq i128 %227, %232
  br i1 %233, label %239, label %234

; <label>:234:                                    ; preds = %block_401549
  %235 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %217, %struct.Memory* %318) #14
  %236 = load i64, i64* %10, align 8
  %237 = load i64, i64* %3, align 8
  %238 = load i64, i64* %4, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:239:                                    ; preds = %block_401549
  %240 = srem i128 %224, %226
  %241 = trunc i128 %240 to i64
  store i64 %241, i64* %157, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %239, %234
  %242 = phi i64 [ %238, %234 ], [ %228, %239 ]
  %243 = phi i64 [ %237, %234 ], [ %217, %239 ]
  %244 = phi i64 [ %236, %234 ], [ %316, %239 ]
  %245 = phi %struct.Memory* [ %235, %234 ], [ %318, %239 ]
  %246 = add i64 %244, -104
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  store i64 %248, i64* %5, align 8, !tbaa !1240
  %249 = sub i64 %248, %242
  %250 = icmp eq i64 %249, 0
  %251 = lshr i64 %249, 63
  %252 = trunc i64 %251 to i8
  %253 = lshr i64 %248, 63
  %254 = lshr i64 %242, 63
  %255 = xor i64 %254, %253
  %256 = xor i64 %251, %253
  %257 = add nuw nsw i64 %256, %255
  %258 = icmp eq i64 %257, 2
  %259 = icmp ne i8 %252, 0
  %260 = xor i1 %259, %258
  %261 = or i1 %250, %260
  %262 = select i1 %261, i64 26, i64 13
  %263 = add i64 %243, %262
  br i1 %261, label %block_40158d, label %block_401580

block_401520:                                     ; preds = %block_401519, %block_4015a3
  %264 = phi i64 [ %431, %block_401519 ], [ %369, %block_4015a3 ]
  %265 = phi i64 [ %136, %block_401519 ], [ %316, %block_4015a3 ]
  %266 = phi %struct.Memory* [ %137, %block_401519 ], [ %318, %block_4015a3 ]
  %267 = add i64 %265, -36
  %268 = inttoptr i64 %267 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  %271 = load i64, i64* bitcast (%maxprmfctr_type* @maxprmfctr to i64*)
  %272 = sub i64 %270, %271
  %273 = icmp eq i64 %272, 0
  %274 = lshr i64 %272, 63
  %275 = trunc i64 %274 to i8
  %276 = lshr i64 %270, 63
  %277 = lshr i64 %271, 63
  %278 = xor i64 %277, %276
  %279 = xor i64 %274, %276
  %280 = add nuw nsw i64 %279, %278
  %281 = icmp eq i64 %280, 2
  %282 = icmp ne i8 %275, 0
  %283 = xor i1 %282, %281
  %284 = or i1 %273, %283
  %285 = select i1 %284, i64 18, i64 150
  %286 = add i64 %264, %285
  br i1 %284, label %block_401532, label %block_4015b6

block_4013ca:                                     ; preds = %block_4014ec, %block_4013a2
  %287 = phi i64 [ %423, %block_4013a2 ], [ %517, %block_4014ec ]
  %288 = phi %struct.Memory* [ %95, %block_4013a2 ], [ %512, %block_4014ec ]
  %289 = inttoptr i64 %422 to i32*
  %290 = load i32, i32* %289
  %291 = sext i32 %290 to i64
  %292 = inttoptr i64 %425 to i64*
  %293 = load i64, i64* %292
  %294 = inttoptr i64 %407 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %295, -1
  %297 = shl i64 %296, 3
  %298 = add i64 %297, %293
  %299 = inttoptr i64 %298 to i64*
  %300 = load i64, i64* %299
  %301 = add i64 %300, 16
  %302 = inttoptr i64 %301 to i64*
  %303 = load i64, i64* %302
  %304 = sub i64 %291, %303
  %305 = lshr i64 %304, 63
  %306 = lshr i64 %291, 63
  %307 = lshr i64 %303, 63
  %308 = xor i64 %307, %306
  %309 = xor i64 %305, %306
  %310 = add nuw nsw i64 %309, %308
  %311 = icmp eq i64 %310, 2
  %312 = icmp ne i64 %305, 0
  %313 = xor i1 %312, %311
  %314 = select i1 %313, i64 30, i64 309
  %315 = add i64 %287, %314
  br i1 %313, label %block_4013e8, label %block_4014ff

block_401537:                                     ; preds = %block_40158d, %block_401532
  %316 = phi i64 [ %244, %block_40158d ], [ %265, %block_401532 ]
  %317 = phi i64 [ %499, %block_40158d ], [ %337, %block_401532 ]
  %318 = phi %struct.Memory* [ %245, %block_40158d ], [ %266, %block_401532 ]
  %319 = add i64 %316, -56
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320
  %322 = add i64 %316, -36
  %323 = inttoptr i64 %322 to i32*
  %324 = load i32, i32* %323
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %5, align 8, !tbaa !1240
  %326 = shl nsw i64 %325, 2
  %327 = add i64 %326, %321
  %328 = inttoptr i64 %327 to i32*
  %329 = load i32, i32* %328
  %330 = icmp eq i32 %329, 0
  %331 = lshr i32 %329, 31
  %332 = trunc i32 %331 to i8
  %333 = icmp ne i8 %332, 0
  %334 = or i1 %330, %333
  %335 = select i1 %334, i64 108, i64 18
  %336 = add i64 %317, %335
  br i1 %334, label %block_4015a3, label %block_401549

block_401532:                                     ; preds = %block_401520
  %337 = add i64 %286, 5
  br label %block_401537

block_401430:                                     ; preds = %block_40148e, %block_4013e8
  %338 = phi i64 [ %133, %block_4013e8 ], [ %484, %block_40148e ]
  %339 = phi %struct.Memory* [ %288, %block_4013e8 ], [ %339, %block_40148e ]
  %340 = inttoptr i64 %428 to i32*
  %341 = load i32, i32* %340
  %342 = sext i32 %341 to i64
  %343 = inttoptr i64 %425 to i64*
  %344 = load i64, i64* %343
  %345 = inttoptr i64 %420 to i32*
  %346 = load i32, i32* %345
  %347 = sext i32 %346 to i64
  %348 = shl nsw i64 %347, 3
  %349 = add i64 %348, %344
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %351, 16
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = sub i64 %342, %354
  %356 = lshr i64 %355, 63
  %357 = lshr i64 %342, 63
  %358 = lshr i64 %354, 63
  %359 = xor i64 %358, %357
  %360 = xor i64 %356, %357
  %361 = add nuw nsw i64 %360, %359
  %362 = icmp eq i64 %361, 2
  %363 = icmp ne i64 %356, 0
  %364 = xor i1 %363, %362
  %365 = select i1 %364, i64 26, i64 154
  %366 = add i64 %338, %365
  br i1 %364, label %block_40144a, label %block_4014ca.loopexit

block_4015a3:                                     ; preds = %block_401537
  %367 = add i32 %324, 1
  %368 = inttoptr i64 %322 to i32*
  store i32 %367, i32* %368
  %369 = add i64 %336, -131
  br label %block_401520

block_4014ca.sink.split.loopexit:                 ; preds = %block_40144a
  br label %block_4014ca.sink.split

block_4014ca.sink.split:                          ; preds = %block_401493, %block_4014ca.sink.split.loopexit
  %370 = phi i64 [ %464, %block_401493 ], [ %168, %block_4014ca.sink.split.loopexit ]
  %371 = phi i64 [ 19, %block_401493 ], [ 98, %block_4014ca.sink.split.loopexit ]
  %372 = phi %struct.Memory* [ %339, %block_401493 ], [ %339, %block_4014ca.sink.split.loopexit ]
  %373 = add i64 %370, %371
  br label %block_4014ca

block_4014ca.loopexit:                            ; preds = %block_401430
  br label %block_4014ca

block_4014ca:                                     ; preds = %block_4014ca.loopexit, %block_4014ca.sink.split
  %374 = phi i64 [ %373, %block_4014ca.sink.split ], [ %366, %block_4014ca.loopexit ]
  %375 = phi %struct.Memory* [ %372, %block_4014ca.sink.split ], [ %339, %block_4014ca.loopexit ]
  %376 = inttoptr i64 %429 to i64*
  %377 = load i64, i64* %376
  %378 = inttoptr i64 %426 to i32*
  %379 = load i32, i32* %378
  %380 = sext i32 %379 to i64
  %381 = shl nsw i64 %380, 2
  %382 = add i64 %381, %377
  %383 = inttoptr i64 %382 to i32*
  %384 = load i32, i32* %383
  %385 = inttoptr i64 %427 to i32*
  %386 = load i32, i32* %385
  %387 = sub i32 %384, %386
  %388 = lshr i32 %387, 31
  %389 = lshr i32 %384, 31
  %390 = lshr i32 %386, 31
  %391 = xor i32 %390, %389
  %392 = xor i32 %388, %389
  %393 = add nuw nsw i32 %392, %391
  %394 = icmp eq i32 %393, 2
  %395 = icmp ne i32 %388, 0
  %396 = xor i1 %395, %394
  %397 = select i1 %396, i64 20, i64 34
  %398 = add i64 %374, %397
  br i1 %396, label %block_4014de, label %block_4014ec

block_4013a2:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %399 = add i64 %92, -36
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 3
  %404 = add i64 %403, ptrtoint (%adcprime_type* @adcprime to i64)
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %92, -72
  %408 = inttoptr i64 %407 to i64*
  store i64 %406, i64* %408
  %409 = add i64 %92, -32
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = inttoptr i64 %399 to i32*
  %413 = load i32, i32* %412
  %414 = sext i32 %413 to i64
  %415 = shl nsw i64 %414, 3
  %416 = add i64 %415, %411
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = trunc i64 %418 to i32
  %420 = add i64 %92, -76
  %421 = inttoptr i64 %420 to i32*
  store i32 %419, i32* %421
  %422 = add i64 %92, -40
  %423 = add i64 %103, 40
  %424 = inttoptr i64 %422 to i32*
  store i32 0, i32* %424
  %425 = add i64 %92, -24
  %426 = add i64 %92, -84
  %427 = add i64 %92, -80
  %428 = add i64 %92, -44
  %429 = add i64 %92, -56
  br label %block_4013ca

block_401519:                                     ; preds = %block_401354
  %430 = add i64 %136, -36
  %431 = add i64 %154, 7
  %432 = inttoptr i64 %430 to i32*
  store i32 0, i32* %432
  br label %block_401520

block_401317:                                     ; preds = %block_401330, %block_4012a0
  %433 = phi i64 [ %61, %block_4012a0 ], [ %562, %block_401330 ]
  %434 = phi %struct.Memory* [ %2, %block_4012a0 ], [ %434, %block_401330 ]
  %435 = inttoptr i64 %60 to i32*
  %436 = load i32, i32* %435
  %437 = sext i32 %436 to i64
  %438 = load i64, i64* bitcast (%maxprmfctr_type* @maxprmfctr to i64*)
  %439 = add i64 %438, 1
  %440 = sub i64 %437, %439
  %441 = lshr i64 %440, 63
  %442 = trunc i64 %441 to i8
  %443 = lshr i64 %437, 63
  %444 = lshr i64 %439, 63
  %445 = xor i64 %444, %443
  %446 = xor i64 %441, %443
  %447 = add nuw nsw i64 %446, %445
  %448 = icmp eq i64 %447, 2
  %449 = icmp ne i8 %442, 0
  %450 = xor i1 %449, %448
  %451 = select i1 %450, i64 25, i64 54
  %452 = add i64 %433, %451
  br i1 %450, label %block_401330, label %block_40134d

block_401493:                                     ; preds = %block_40146d
  %453 = add i64 %351, 8
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %162, %455
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %427 to i32*
  %460 = load i32, i32* %459
  %461 = zext i32 %460 to i64
  %462 = sub i64 %461, %458
  %463 = trunc i64 %462 to i32
  %464 = add i64 %68, 36
  %465 = inttoptr i64 %427 to i32*
  store i32 %463, i32* %465
  br label %block_4014ca.sink.split

block_4015b6:                                     ; preds = %block_401520
  %466 = add i64 %265, -56
  %467 = inttoptr i64 %466 to i64*
  %468 = load i64, i64* %467
  store i64 %468, i64* %8, align 8, !tbaa !1240
  %469 = add i64 %286, 12
  %470 = load i64, i64* %9, align 8, !tbaa !1240
  %471 = add i64 %470, -8
  %472 = inttoptr i64 %471 to i64*
  store i64 %469, i64* %472
  %473 = inttoptr i64 %471 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %3, align 8, !alias.scope !1736, !noalias !1739
  store i64 %470, i64* %9, align 8, !alias.scope !1736, !noalias !1739
  %475 = tail call i64 @free(i64 %468), !noalias !1736
  %476 = load i64, i64* %10, align 8
  %477 = add i64 %476, -64
  %478 = inttoptr i64 %477 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %476, -8
  %481 = inttoptr i64 %480 to i64*
  store i64 %479, i64* %481
  br label %block_4015ca

block_40148e:                                     ; preds = %block_40146d
  %482 = add i32 %341, 1
  %483 = inttoptr i64 %428 to i32*
  store i32 %482, i32* %483
  %484 = add i64 %68, -94
  br label %block_401430

block_40158d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %485 = add i64 %244, -56
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %244, -36
  %489 = inttoptr i64 %488 to i32*
  %490 = load i32, i32* %489
  %491 = sext i32 %490 to i64
  %492 = shl nsw i64 %491, 2
  %493 = add i64 %492, %487
  %494 = inttoptr i64 %493 to i32*
  %495 = load i32, i32* %494
  %496 = add i32 %495, -1
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %6, align 8, !tbaa !1240
  %498 = inttoptr i64 %493 to i32*
  store i32 %496, i32* %498
  %499 = add i64 %263, -86
  br label %block_401537

block_401388:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %500 = add i64 %92, -16
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = ashr i64 %502, 1
  %504 = inttoptr i64 %500 to i64*
  store i64 %503, i64* %504
  %505 = add i64 %92, -36
  %506 = inttoptr i64 %505 to i32*
  %507 = load i32, i32* %506
  %508 = add i64 %103, 18
  %509 = add i32 %507, 1
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %5, align 8, !tbaa !1240
  br label %block_401354.backedge

block_4014ec:                                     ; preds = %block_4014ca, %block_4014de
  %511 = phi i64 [ %398, %block_4014ca ], [ %158, %block_4014de ]
  %512 = phi %struct.Memory* [ %375, %block_4014ca ], [ %375, %block_4014de ]
  %513 = inttoptr i64 %422 to i32*
  %514 = load i32, i32* %513
  %515 = add i32 %514, 1
  %516 = inttoptr i64 %422 to i32*
  store i32 %515, i32* %516
  %517 = add i64 %511, -290
  br label %block_4013ca

block_4015ca:                                     ; preds = %block_401580, %block_4015b6
  %518 = phi i64 [ %476, %block_4015b6 ], [ %244, %block_401580 ]
  %519 = phi %struct.Memory* [ %266, %block_4015b6 ], [ %245, %block_401580 ]
  %520 = add i64 %518, -8
  %521 = inttoptr i64 %520 to i64*
  %522 = load i64, i64* %521
  store i64 %522, i64* %4, align 8, !tbaa !1240
  %523 = load i64, i64* %9, align 8
  %524 = add i64 %523, 112
  %525 = icmp ugt i64 %523, -113
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %16, align 1, !tbaa !1264
  %527 = trunc i64 %524 to i32
  %528 = and i32 %527, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528) #10
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %17, align 1, !tbaa !1278
  %533 = xor i64 %523, 16
  %534 = xor i64 %533, %524
  %535 = lshr i64 %534, 4
  %536 = trunc i64 %535 to i8
  %537 = and i8 %536, 1
  store i8 %537, i8* %18, align 1, !tbaa !1279
  %538 = icmp eq i64 %524, 0
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %19, align 1, !tbaa !1280
  %540 = lshr i64 %524, 63
  %541 = trunc i64 %540 to i8
  store i8 %541, i8* %20, align 1, !tbaa !1281
  %542 = lshr i64 %523, 63
  %543 = xor i64 %540, %542
  %544 = add nuw nsw i64 %543, %540
  %545 = icmp eq i64 %544, 2
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %21, align 1, !tbaa !1282
  %547 = add i64 %523, 120
  %548 = inttoptr i64 %524 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %10, align 8, !tbaa !1240
  %550 = inttoptr i64 %547 to i64*
  %551 = load i64, i64* %550
  store i64 %551, i64* %3, align 8, !tbaa !1240
  %552 = add i64 %523, 128
  store i64 %552, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %519

block_401330:                                     ; preds = %block_401317
  %553 = inttoptr i64 %47 to i64*
  %554 = load i64, i64* %553
  %555 = shl nsw i64 %437, 2
  %556 = add i64 %555, %554
  %557 = inttoptr i64 %556 to i32*
  store i32 0, i32* %557
  %558 = inttoptr i64 %60 to i32*
  %559 = load i32, i32* %558
  %560 = add i32 %559, 1
  %561 = inttoptr i64 %60 to i32*
  store i32 %560, i32* %561
  %562 = add i64 %452, -25
  br label %block_401317

block_401580:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %563 = add i64 %244, -64
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %244, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %565, i64* %567
  br label %block_4015ca
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404127(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_404127:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* bitcast (%checksumS_type* @checksumS to i64*)
  %11 = sub i64 %9, %10
  %12 = icmp ult i64 %9, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !1264
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !1278
  %22 = xor i64 %10, %9
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !1279
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !1280
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !1281
  %34 = lshr i64 %9, 63
  %35 = lshr i64 %10, 63
  %36 = xor i64 %35, %34
  %37 = xor i64 %31, %34
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !1282
  %42 = add i64 %6, -4
  br i1 %28, label %block_404139, label %block_404145

block_4041fc:                                     ; preds = %block_404145, %block_404139
  %43 = phi %struct.Memory* [ %2, %block_404145 ], [ %2, %block_404139 ]
  %44 = inttoptr i64 %42 to i32*
  %45 = load i32, i32* %44
  %46 = zext i32 %45 to i64
  store i64 %46, i64* %4, align 8, !tbaa !1240
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !1240
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %5, align 8, !tbaa !1240
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  store i64 %53, i64* %3, align 8, !tbaa !1240
  %54 = add i64 %48, 16
  store i64 %54, i64* %47, align 8, !tbaa !1240
  ret %struct.Memory* %43

block_404139:                                     ; preds = %block_404127
  %55 = inttoptr i64 %42 to i32*
  store i32 0, i32* %55
  br label %block_4041fc

block_404145:                                     ; preds = %block_404127
  %56 = inttoptr i64 %42 to i32*
  store i32 1, i32* %56
  br label %block_4041fc
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4094c0_restore(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4094c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %13, align 8, !tbaa !1240
  %19 = add i64 %16, -16
  %20 = load i64, i64* %12, align 8
  %21 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %21
  %22 = add i64 %16, -20
  %23 = load i32, i32* %7, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %16, -24
  %26 = load i32, i32* %5, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = add i64 %16, -20
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29
  %31 = add i64 %16, -28
  %32 = inttoptr i64 %31 to i32*
  store i32 %30, i32* %32
  %33 = inttoptr i64 %25 to i32*
  %34 = load i32, i32* %33
  %35 = lshr i32 %34, 1
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %10, align 8, !tbaa !1240
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = add i64 %16, -48
  %44 = inttoptr i64 %43 to i32*
  store i32 %35, i32* %44
  %45 = add i64 %16, -36
  %46 = add i64 %16, -32
  %47 = add i64 %16, -40
  %48 = add i64 %16, -44
  %49 = add i64 %16, -16
  %50 = add i64 %16, -56
  %51 = add i64 %16, -64
  br label %block_4094dd

block_4094dd:                                     ; preds = %block_4094dd.backedge, %block_4094c0
  %52 = phi %struct.Memory* [ %2, %block_4094c0 ], [ %210, %block_4094dd.backedge ]
  %53 = inttoptr i64 %31 to i32*
  %54 = load i32, i32* %53
  %55 = inttoptr i64 %43 to i32*
  %56 = load i32, i32* %55
  %57 = sub i32 %54, %56
  %58 = icmp ult i32 %54, %56
  %59 = icmp eq i32 %57, 0
  %60 = or i1 %59, %58
  br i1 %60, label %block_4094e9, label %block_409643

block_409543:                                     ; preds = %block_4094fe, %block_4094e9
  %61 = phi i32 [ %91, %block_4094e9 ], [ %113, %block_4094fe ]
  %62 = inttoptr i64 %46 to i32*
  store i32 %61, i32* %62
  %63 = inttoptr i64 %46 to i32*
  %64 = load i32, i32* %63
  %65 = add i32 %64, -1
  %66 = inttoptr i64 %47 to i32*
  store i32 %65, i32* %66
  %67 = inttoptr i64 %31 to i32*
  %68 = load i32, i32* %67
  %69 = add i32 %68, -1
  %70 = inttoptr i64 %48 to i32*
  store i32 %69, i32* %70
  %71 = inttoptr i64 %49 to i64*
  %72 = load i64, i64* %71
  %73 = inttoptr i64 %47 to i32*
  %74 = load i32, i32* %73
  %75 = zext i32 %74 to i64
  %76 = shl nuw nsw i64 %75, 4
  %77 = add i64 %76, %72
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %9, align 8, !tbaa !1240
  %80 = inttoptr i64 %48 to i32*
  %81 = load i32, i32* %80
  %82 = zext i32 %81 to i64
  %83 = shl nuw nsw i64 %82, 4
  store i64 %83, i64* %11, align 8, !tbaa !1240
  %84 = add i64 %83, %72
  store i64 %84, i64* %10, align 8, !tbaa !1240
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = icmp ugt i64 %79, %86
  br i1 %87, label %block_409581, label %block_409638

block_4094e9:                                     ; preds = %block_4094dd
  %88 = shl i32 %54, 1
  %89 = inttoptr i64 %45 to i32*
  store i32 %88, i32* %89
  %90 = inttoptr i64 %45 to i32*
  %91 = load i32, i32* %90
  %92 = zext i32 %91 to i64
  %93 = inttoptr i64 %25 to i32*
  %94 = load i32, i32* %93
  %95 = icmp ult i32 %91, %94
  br i1 %95, label %block_4094fe, label %block_409543

block_409638:                                     ; preds = %block_409543
  %96 = inttoptr i64 %25 to i32*
  %97 = load i32, i32* %96
  %98 = inttoptr i64 %31 to i32*
  store i32 %97, i32* %98
  br label %block_4094dd.backedge

block_4094fe:                                     ; preds = %block_4094e9
  %99 = inttoptr i64 %49 to i64*
  %100 = load i64, i64* %99
  %101 = add i32 %91, -1
  %102 = zext i32 %101 to i64
  %103 = shl nuw nsw i64 %102, 4
  %104 = add i64 %103, %100
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = shl nuw nsw i64 %92, 4
  %108 = add i64 %107, %100
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  %111 = icmp ult i64 %106, %110
  %112 = zext i1 %111 to i32
  %113 = add i32 %91, %112
  br label %block_409543

block_409643:                                     ; preds = %block_4094dd
  %114 = zext i32 %54 to i64
  store i64 %114, i64* %8, align 8, !tbaa !1240
  %115 = lshr i32 %57, 31
  %116 = lshr i32 %54, 31
  %117 = and i32 %57, 255
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #10
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  %122 = xor i32 %56, %54
  %123 = xor i32 %122, %57
  %124 = lshr i32 %123, 4
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = trunc i32 %115 to i8
  %128 = xor i32 %115, %116
  %129 = lshr i32 %56, 31
  %130 = xor i32 %129, %116
  %131 = add nuw nsw i32 %128, %130
  %132 = icmp eq i32 %131, 2
  %133 = zext i1 %132 to i8
  store i8 0, i8* %37, align 1, !tbaa !1428
  store i8 %121, i8* %38, align 1, !tbaa !1428
  store i8 %126, i8* %39, align 1, !tbaa !1428
  store i8 0, i8* %40, align 1, !tbaa !1428
  store i8 %127, i8* %41, align 1, !tbaa !1428
  store i8 %133, i8* %42, align 1, !tbaa !1428
  %134 = load i64, i64* %13, align 8, !tbaa !1240
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %14, align 8, !tbaa !1240
  %138 = inttoptr i64 %135 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %3, align 8, !tbaa !1240
  %140 = add i64 %134, 16
  store i64 %140, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %52

block_409581:                                     ; preds = %block_409543
  %141 = inttoptr i64 %50 to i64*
  store i64 %79, i64* %141
  %142 = inttoptr i64 %49 to i64*
  %143 = load i64, i64* %142
  %144 = inttoptr i64 %48 to i32*
  %145 = load i32, i32* %144
  %146 = zext i32 %145 to i64
  %147 = shl nuw nsw i64 %146, 4
  %148 = add i64 %147, %143
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = inttoptr i64 %47 to i32*
  %152 = load i32, i32* %151
  %153 = zext i32 %152 to i64
  %154 = shl nuw nsw i64 %153, 4
  %155 = add i64 %154, %143
  %156 = inttoptr i64 %155 to i64*
  store i64 %150, i64* %156
  %157 = inttoptr i64 %50 to i64*
  %158 = load i64, i64* %157
  %159 = inttoptr i64 %49 to i64*
  %160 = load i64, i64* %159
  %161 = inttoptr i64 %48 to i32*
  %162 = load i32, i32* %161
  %163 = zext i32 %162 to i64
  %164 = shl nuw nsw i64 %163, 4
  %165 = add i64 %164, %160
  %166 = inttoptr i64 %165 to i64*
  store i64 %158, i64* %166
  %167 = inttoptr i64 %49 to i64*
  %168 = load i64, i64* %167
  %169 = inttoptr i64 %47 to i32*
  %170 = load i32, i32* %169
  %171 = zext i32 %170 to i64
  %172 = shl nuw nsw i64 %171, 4
  %173 = add i64 %172, %168
  %174 = add i64 %173, 8
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = inttoptr i64 %51 to i64*
  store i64 %176, i64* %177
  %178 = inttoptr i64 %49 to i64*
  %179 = load i64, i64* %178
  %180 = inttoptr i64 %48 to i32*
  %181 = load i32, i32* %180
  %182 = zext i32 %181 to i64
  %183 = shl nuw nsw i64 %182, 4
  %184 = add i64 %183, %179
  %185 = add i64 %184, 8
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = inttoptr i64 %47 to i32*
  %189 = load i32, i32* %188
  %190 = zext i32 %189 to i64
  %191 = shl nuw nsw i64 %190, 4
  %192 = add i64 %191, %179
  %193 = add i64 %192, 8
  %194 = inttoptr i64 %193 to i64*
  store i64 %187, i64* %194
  %195 = inttoptr i64 %51 to i64*
  %196 = load i64, i64* %195
  %197 = inttoptr i64 %49 to i64*
  %198 = load i64, i64* %197
  %199 = inttoptr i64 %48 to i32*
  %200 = load i32, i32* %199
  %201 = zext i32 %200 to i64
  %202 = shl nuw nsw i64 %201, 4
  store i64 %202, i64* %11, align 8, !tbaa !1240
  %203 = add i64 %202, %198
  store i64 %203, i64* %10, align 8, !tbaa !1240
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %204 to i64*
  store i64 %196, i64* %205
  %206 = inttoptr i64 %46 to i32*
  %207 = load i32, i32* %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %9, align 8, !tbaa !1240
  %209 = inttoptr i64 %31 to i32*
  store i32 %207, i32* %209
  br label %block_4094dd.backedge

block_4094dd.backedge:                            ; preds = %block_409581, %block_409638
  %210 = phi %struct.Memory* [ %52, %block_409638 ], [ %52, %block_409581 ]
  br label %block_4094dd
}

; Function Attrs: noinline
define %struct.Memory* @sub_402628(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %22 = load i64, i64* %12, align 8
  %23 = add i64 %1, 12
  br label %block_402628

block_402673:                                     ; preds = %block_40255a
  %24 = inttoptr i64 %314 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %310, -24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %28, 40
  %30 = load i64, i64* %11, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 4204182, i64* %32
  %33 = load i64, i64* %14, align 8, !alias.scope !1741, !noalias !1744
  %34 = load i64, i64* %15, align 8, !alias.scope !1741, !noalias !1744
  %35 = inttoptr i64 %30 to i64*
  %36 = load i64, i64* %35
  %37 = add i64 %30, 8
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %30, 16
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %30, 24
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %30, 32
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  %49 = add i64 %30, 40
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  %52 = add i64 %30, 48
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %30, 56
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56
  %58 = add i64 %30, 64
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %30, 72
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = inttoptr i64 %31 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %4, align 8, !alias.scope !1741, !noalias !1744
  store i64 %30, i64* %11, align 8, !alias.scope !1741, !noalias !1744
  %66 = tail call i64 @__isoc99_sscanf(i64 %25, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %29, i64 4204147, i64 %33, i64 %34, i64 %36, i64 %39, i64 %42, i64 %45, i64 %48, i64 %51, i64 %54, i64 %57, i64 %60, i64 %63), !noalias !1741
  %67 = load i64, i64* %12, align 8
  %68 = add i64 %67, -1144
  %69 = trunc i64 %66 to i32
  %70 = load i64, i64* %4, align 8
  %71 = add i64 %70, 6
  %72 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %72
  br label %block_40269c.backedge

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_40269c, %block_4026d0.loopexit
  %73 = phi i64 [ %446, %block_40269c ], [ %362, %block_4026d0.loopexit ]
  %74 = phi i64 [ %443, %block_40269c ], [ %355, %block_4026d0.loopexit ]
  %75 = phi %struct.Memory* [ %445, %block_40269c ], [ %356, %block_4026d0.loopexit ]
  %76 = add i64 %74, -1076
  %77 = inttoptr i64 %76 to i32*
  %78 = load i32, i32* %77
  %79 = add i32 %78, 1
  %80 = inttoptr i64 %76 to i32*
  store i32 %79, i32* %80
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %81 = add i64 %74, -1056
  %82 = add i64 %74, -1064
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %8, align 8, !tbaa !1240
  %85 = add i64 %73, -558
  %86 = load i64, i64* %11, align 8, !tbaa !1240
  %87 = add i64 %86, -8
  %88 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %88
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %4, align 8, !alias.scope !1746, !noalias !1749
  store i64 %86, i64* %11, align 8, !alias.scope !1746, !noalias !1749
  %91 = tail call i64 @fgets(i64 %81, i64 1024, i64 %84)
  %92 = load i64, i64* %4, align 8
  %93 = icmp eq i64 %91, 0
  %94 = select i1 %93, i64 578, i64 10
  %95 = add i64 %92, %94
  %96 = load i64, i64* %12, align 8
  br i1 %93, label %block_4026e4, label %block_4024ac

block_4025c7:                                     ; preds = %block_40255a
  %97 = inttoptr i64 %314 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %310, -24
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %101, 16
  %103 = load i64, i64* %11, align 8, !tbaa !1240
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 4204010, i64* %105
  %106 = load i64, i64* %14, align 8, !alias.scope !1751, !noalias !1754
  %107 = load i64, i64* %15, align 8, !alias.scope !1751, !noalias !1754
  %108 = inttoptr i64 %103 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %103, 8
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %103, 16
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %103, 24
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %103, 32
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %103, 40
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %103, 48
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %103, 56
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %103, 64
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %103, 72
  %135 = inttoptr i64 %134 to i64*
  %136 = load i64, i64* %135
  %137 = inttoptr i64 %104 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %4, align 8, !alias.scope !1751, !noalias !1754
  store i64 %103, i64* %11, align 8, !alias.scope !1751, !noalias !1754
  %139 = tail call i64 @__isoc99_sscanf(i64 %98, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %102, i64 4203975, i64 %106, i64 %107, i64 %109, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124, i64 %127, i64 %130, i64 %133, i64 %136), !noalias !1751
  %140 = load i64, i64* %12, align 8
  %141 = add i64 %140, -1132
  %142 = trunc i64 %139 to i32
  %143 = load i64, i64* %4, align 8
  %144 = inttoptr i64 %141 to i32*
  store i32 %142, i32* %144
  %145 = add i64 %143, 178
  br label %block_40269c.backedge

block_4027c1:                                     ; preds = %block_402719, %block_4026e4
  %146 = add i64 %270, -4
  %147 = inttoptr i64 %146 to i32*
  store i32 1, i32* %147
  %148 = inttoptr i64 %146 to i32*
  %149 = load i32, i32* %148
  %150 = zext i32 %149 to i64
  store i64 %150, i64* %6, align 8, !tbaa !1240
  %151 = load i64, i64* %11, align 8
  %152 = add i64 %151, 1168
  %153 = icmp ugt i64 %151, -1169
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %16, align 1, !tbaa !1264
  %155 = trunc i64 %152 to i32
  %156 = and i32 %155, 255
  %157 = tail call i32 @llvm.ctpop.i32(i32 %156) #10
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  store i8 %160, i8* %17, align 1, !tbaa !1278
  %161 = xor i64 %151, 16
  %162 = xor i64 %161, %152
  %163 = lshr i64 %162, 4
  %164 = trunc i64 %163 to i8
  %165 = and i8 %164, 1
  store i8 %165, i8* %18, align 1, !tbaa !1279
  %166 = icmp eq i64 %152, 0
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %19, align 1, !tbaa !1280
  %168 = lshr i64 %152, 63
  %169 = trunc i64 %168 to i8
  store i8 %169, i8* %20, align 1, !tbaa !1281
  %170 = lshr i64 %151, 63
  %171 = xor i64 %168, %170
  %172 = add nuw nsw i64 %171, %168
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %21, align 1, !tbaa !1282
  %175 = add i64 %151, 1176
  %176 = inttoptr i64 %152 to i64*
  %177 = load i64, i64* %176
  store i64 %177, i64* %12, align 8, !tbaa !1240
  %178 = inttoptr i64 %175 to i64*
  %179 = load i64, i64* %178
  store i64 %179, i64* %4, align 8, !tbaa !1240
  %180 = add i64 %151, 1184
  store i64 %180, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %75

block_40255a:                                     ; preds = %block_40251c
  %181 = inttoptr i64 %337 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %6, align 8, !tbaa !1240
  %183 = shl i64 %182, 3
  %184 = add i64 %183, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %7, align 8, !tbaa !1240
  store i64 %186, i64* %4, align 8, !tbaa !1240
  switch i64 %186, label %451 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628.loopexit
    i64 4204021, label %block_4025f5
  ]

block_4024ac:                                     ; preds = %block_4026d0
  %187 = add i64 %96, -1080
  %188 = inttoptr i64 %187 to i32*
  store i32 0, i32* %188
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189
  %191 = sext i32 %190 to i64
  %192 = shl nsw i64 %191, 3
  %193 = add i64 %192, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %96, -1088
  %197 = add i64 %95, 32
  %198 = inttoptr i64 %196 to i64*
  store i64 %195, i64* %198
  br label %block_4024cc

block_4026a6:                                     ; preds = %block_4024ff, %block_4024da
  %199 = phi i64 [ %298, %block_4024ff ], [ %282, %block_4024da ]
  %200 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %201 = phi %struct.Memory* [ %356, %block_4024ff ], [ %356, %block_4024da ]
  %202 = add i64 %199, %200
  %203 = load i64, i64* %12, align 8
  %204 = add i64 %203, -1080
  %205 = inttoptr i64 %204 to i32*
  %206 = load i32, i32* %205
  %207 = add i32 %206, 1
  %208 = inttoptr i64 %204 to i32*
  store i32 %207, i32* %208
  %209 = inttoptr i64 %204 to i32*
  %210 = load i32, i32* %209
  %211 = sext i32 %210 to i64
  %212 = shl nsw i64 %211, 3
  %213 = add i64 %212, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = add i64 %203, -1088
  %217 = inttoptr i64 %216 to i64*
  store i64 %215, i64* %217
  %218 = add i64 %202, -474
  br label %block_4024cc

block_4026e4:                                     ; preds = %block_4026d0
  %219 = add i64 %96, -1064
  %220 = inttoptr i64 %219 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %95, 12
  %223 = load i64, i64* %11, align 8, !tbaa !1240
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225
  %226 = inttoptr i64 %224 to i64*
  %227 = load i64, i64* %226
  store i64 %227, i64* %4, align 8, !alias.scope !1756, !noalias !1759
  store i64 %223, i64* %11, align 8, !alias.scope !1756, !noalias !1759
  %228 = tail call i64 @fclose(i64 %221), !noalias !1756
  %229 = load i64, i64* %12, align 8
  %230 = add i64 %229, -24
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %232, 40
  %234 = inttoptr i64 %233 to i8*
  %235 = load i8, i8* %234
  %236 = sext i8 %235 to i32
  %237 = add nsw i32 %236, -65
  %238 = zext i32 %237 to i64
  %239 = lshr i32 %237, 31
  store i64 %238, i64* %10, align 8, !tbaa !1240
  %240 = add nsw i32 %236, -87
  %241 = zext i32 %240 to i64
  store i64 %241, i64* %7, align 8, !tbaa !1240
  %242 = icmp ult i32 %237, 22
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %16, align 1, !tbaa !1264
  %244 = and i32 %240, 255
  %245 = tail call i32 @llvm.ctpop.i32(i32 %244) #10
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %17, align 1, !tbaa !1278
  %249 = xor i32 %237, 16
  %250 = xor i32 %249, %240
  %251 = lshr i32 %250, 4
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  store i8 %253, i8* %18, align 1, !tbaa !1279
  %254 = icmp eq i32 %240, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %19, align 1, !tbaa !1280
  %256 = lshr i32 %240, 31
  %257 = trunc i32 %256 to i8
  store i8 %257, i8* %20, align 1, !tbaa !1281
  %258 = xor i32 %256, %239
  %259 = add nuw nsw i32 %258, %239
  %260 = icmp eq i32 %259, 2
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %21, align 1, !tbaa !1282
  %262 = add i64 %229, -1148
  %263 = trunc i64 %228 to i32
  %264 = inttoptr i64 %262 to i32*
  store i32 %263, i32* %264
  %265 = add i64 %229, -1160
  %266 = inttoptr i64 %265 to i64*
  store i64 %238, i64* %266
  %267 = add i64 %229, -1164
  %268 = inttoptr i64 %267 to i32*
  store i32 %240, i32* %268
  %269 = or i1 %254, %242
  %270 = load i64, i64* %12, align 8
  br i1 %269, label %block_402719, label %block_4027c1

block_4024da:                                     ; preds = %block_4024cc
  %271 = add i64 %355, -1056
  %272 = add i64 %362, 22
  %273 = load i64, i64* %11, align 8, !tbaa !1240
  %274 = add i64 %273, -8
  %275 = inttoptr i64 %274 to i64*
  store i64 %272, i64* %275
  %276 = inttoptr i64 %274 to i64*
  %277 = load i64, i64* %276
  store i64 %277, i64* %4, align 8, !alias.scope !1761, !noalias !1764
  store i64 %273, i64* %11, align 8, !alias.scope !1761, !noalias !1764
  %278 = tail call i64 @strstr(i64 %271, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %279 = load i64, i64* %4, align 8
  %280 = icmp eq i64 %278, 0
  %281 = select i1 %280, i64 15, i64 10
  %282 = add i64 %279, %281
  br i1 %280, label %block_4024ff, label %block_4026a6

block_4024ff:                                     ; preds = %block_4024da
  %283 = load i64, i64* %12, align 8
  %284 = add i64 %283, -1056
  %285 = add i64 %283, -1088
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %9, align 8, !tbaa !1240
  %288 = add i64 %282, 19
  %289 = load i64, i64* %11, align 8, !tbaa !1240
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %4, align 8, !alias.scope !1766, !noalias !1769
  store i64 %289, i64* %11, align 8, !alias.scope !1766, !noalias !1769
  %294 = tail call i64 @strstr(i64 %284, i64 %287)
  %295 = load i64, i64* %4, align 8
  %296 = icmp eq i64 %294, 0
  %297 = select i1 %296, i64 399, i64 10
  %298 = add i64 %295, %297
  br i1 %296, label %block_4026a6, label %block_40251c

block_40251c:                                     ; preds = %block_4024ff
  %299 = load i64, i64* %12, align 8
  %300 = add i64 %299, -1088
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %298, 12
  %304 = load i64, i64* %11, align 8, !tbaa !1240
  %305 = add i64 %304, -8
  %306 = inttoptr i64 %305 to i64*
  store i64 %303, i64* %306
  %307 = inttoptr i64 %305 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %4, align 8, !alias.scope !1771, !noalias !1774
  store i64 %304, i64* %11, align 8, !alias.scope !1771, !noalias !1774
  %309 = tail call i64 @strlen(i64 %302)
  %310 = load i64, i64* %12, align 8
  %311 = add i64 %310, -1055
  %312 = add i64 %311, %309
  %313 = load i64, i64* %4, align 8
  %314 = add i64 %310, -1096
  %315 = inttoptr i64 %314 to i64*
  store i64 %312, i64* %315
  %316 = add i64 %310, -1080
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  %320 = add nsw i64 %319, -6
  store i64 %320, i64* %10, align 8, !tbaa !1240
  %321 = icmp ult i32 %318, 6
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %16, align 1, !tbaa !1264
  %323 = trunc i64 %320 to i32
  %324 = and i32 %323, 255
  %325 = tail call i32 @llvm.ctpop.i32(i32 %324) #10
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = xor i8 %327, 1
  store i8 %328, i8* %17, align 1, !tbaa !1278
  %329 = xor i64 %320, %319
  %330 = lshr i64 %329, 4
  %331 = trunc i64 %330 to i8
  %332 = and i8 %331, 1
  store i8 %332, i8* %18, align 1, !tbaa !1279
  %333 = icmp eq i64 %320, 0
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %19, align 1, !tbaa !1280
  %335 = lshr i64 %320, 63
  %336 = trunc i64 %335 to i8
  store i8 %336, i8* %20, align 1, !tbaa !1281
  store i8 0, i8* %21, align 1, !tbaa !1282
  %337 = add i64 %310, -1112
  %338 = inttoptr i64 %337 to i64*
  store i64 %319, i64* %338
  %339 = add i64 %310, -1120
  %340 = inttoptr i64 %339 to i64*
  store i64 %320, i64* %340
  %341 = or i1 %333, %321
  %342 = select i1 %341, i64 50, i64 372
  %343 = add i64 %313, %342
  br i1 %341, label %block_40255a, label %block_40269c.backedge

block_40269c.backedge:                            ; preds = %block_40251c, %block_4025c7, %block_402673
  %344 = phi i64 [ %310, %block_40251c ], [ %67, %block_402673 ], [ %140, %block_4025c7 ]
  %345 = phi i64 [ %343, %block_40251c ], [ %71, %block_402673 ], [ %145, %block_4025c7 ]
  %346 = phi %struct.Memory* [ %356, %block_40251c ], [ %356, %block_402673 ], [ %356, %block_4025c7 ]
  br label %block_40269c

block_402719:                                     ; preds = %block_4026e4
  %347 = add i64 %270, -1160
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  store i64 %349, i64* %6, align 8, !tbaa !1240
  %350 = shl i64 %349, 3
  %351 = add i64 %350, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %352 = inttoptr i64 %351 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %7, align 8, !tbaa !1240
  store i64 %353, i64* %4, align 8, !tbaa !1240
  switch i64 %353, label %457 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %354 = phi i64 [ %197, %block_4024ac ], [ %218, %block_4026a6 ]
  %355 = phi i64 [ %96, %block_4024ac ], [ %203, %block_4026a6 ]
  %356 = phi %struct.Memory* [ %75, %block_4024ac ], [ %201, %block_4026a6 ]
  %357 = add i64 %355, -1088
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  %360 = icmp eq i64 %359, 0
  %361 = select i1 %360, i64 516, i64 14
  %362 = add i64 %354, %361
  br i1 %360, label %block_4026d0.loopexit, label %block_4024da

block_402628.loopexit:                            ; preds = %block_40255a
  br label %block_402628

block_402628:                                     ; preds = %block_402628.loopexit, %3
  %363 = phi i64 [ %23, %3 ], [ 4204084, %block_402628.loopexit ]
  %364 = phi i64 [ %22, %3 ], [ %310, %block_402628.loopexit ]
  %365 = phi %struct.Memory* [ %2, %3 ], [ %356, %block_402628.loopexit ]
  %366 = add i64 %364, -1096
  %367 = inttoptr i64 %366 to i64*
  %368 = load i64, i64* %367
  %369 = load i64, i64* %11, align 8, !tbaa !1240
  %370 = add i64 %369, -8
  %371 = inttoptr i64 %370 to i64*
  store i64 %363, i64* %371
  %372 = inttoptr i64 %370 to i64*
  %373 = load i64, i64* %372
  store i64 %373, i64* %4, align 8, !alias.scope !1776, !noalias !1779
  store i64 %369, i64* %11, align 8, !alias.scope !1776, !noalias !1779
  %374 = tail call i64 @strlen(i64 %368)
  %375 = load i64, i64* %4, align 8
  %376 = add i64 %375, 12
  %377 = load i64, i64* %11, align 8, !tbaa !1240
  %378 = add i64 %377, -8
  %379 = inttoptr i64 %378 to i64*
  store i64 %376, i64* %379
  %380 = inttoptr i64 %378 to i64*
  %381 = load i64, i64* %380
  store i64 %381, i64* %4, align 8, !alias.scope !1781, !noalias !1784
  store i64 %377, i64* %11, align 8, !alias.scope !1781, !noalias !1784
  %382 = tail call i64 @malloc(i64 %374)
  %383 = load i64, i64* %4, align 8
  %384 = load i64, i64* %12, align 8
  %385 = add i64 %384, -24
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %387, 32
  %389 = inttoptr i64 %388 to i64*
  store i64 %382, i64* %389
  %390 = add i64 %384, -1096
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = inttoptr i64 %385 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %394, 32
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %383, 40
  %399 = load i64, i64* %11, align 8, !tbaa !1240
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %398, i64* %401
  %402 = load i64, i64* %13, align 8, !alias.scope !1786, !noalias !1789
  %403 = load i64, i64* %14, align 8, !alias.scope !1786, !noalias !1789
  %404 = load i64, i64* %15, align 8, !alias.scope !1786, !noalias !1789
  %405 = inttoptr i64 %399 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %399, 8
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %399, 16
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %399, 24
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = add i64 %399, 32
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %399, 40
  %420 = inttoptr i64 %419 to i64*
  %421 = load i64, i64* %420
  %422 = add i64 %399, 48
  %423 = inttoptr i64 %422 to i64*
  %424 = load i64, i64* %423
  %425 = add i64 %399, 56
  %426 = inttoptr i64 %425 to i64*
  %427 = load i64, i64* %426
  %428 = add i64 %399, 64
  %429 = inttoptr i64 %428 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %399, 72
  %432 = inttoptr i64 %431 to i64*
  %433 = load i64, i64* %432
  %434 = inttoptr i64 %400 to i64*
  %435 = load i64, i64* %434
  store i64 %435, i64* %4, align 8, !alias.scope !1786, !noalias !1789
  store i64 %399, i64* %11, align 8, !alias.scope !1786, !noalias !1789
  %436 = tail call i64 @__isoc99_sscanf(i64 %392, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %397, i64 %402, i64 %403, i64 %404, i64 %406, i64 %409, i64 %412, i64 %415, i64 %418, i64 %421, i64 %424, i64 %427, i64 %430, i64 %433), !noalias !1786
  %437 = load i64, i64* %12, align 8
  %438 = add i64 %437, -1140
  %439 = trunc i64 %436 to i32
  %440 = load i64, i64* %4, align 8
  %441 = inttoptr i64 %438 to i32*
  store i32 %439, i32* %441
  %442 = add i64 %440, 52
  br label %block_40269c

block_40269c:                                     ; preds = %block_402628, %block_40269c.backedge
  %443 = phi i64 [ %437, %block_402628 ], [ %344, %block_40269c.backedge ]
  %444 = phi i64 [ %442, %block_402628 ], [ %345, %block_40269c.backedge ]
  %445 = phi %struct.Memory* [ %365, %block_402628 ], [ %346, %block_40269c.backedge ]
  %446 = add i64 %444, 52
  br label %block_4026d0

block_40256b:                                     ; preds = %block_40255a
  %447 = tail call %struct.Memory* @sub_40256b(%struct.State* nonnull %0, i64 4203883, %struct.Memory* %356)
  ret %struct.Memory* %447

block_4025fa:                                     ; preds = %block_40255a
  %448 = tail call %struct.Memory* @sub_4025fa(%struct.State* nonnull %0, i64 4204026, %struct.Memory* %356)
  ret %struct.Memory* %448

block_4025f5:                                     ; preds = %block_40255a
  %449 = tail call %struct.Memory* @sub_4025f5(%struct.State* nonnull %0, i64 4204021, %struct.Memory* %356)
  ret %struct.Memory* %449

block_402599:                                     ; preds = %block_40255a
  %450 = tail call %struct.Memory* @sub_402599(%struct.State* nonnull %0, i64 4203929, %struct.Memory* %356)
  ret %struct.Memory* %450

; <label>:451:                                    ; preds = %block_40255a
  %452 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %186, %struct.Memory* %356)
  ret %struct.Memory* %452

block_40279f:                                     ; preds = %block_402719
  %453 = tail call %struct.Memory* @sub_40279f(%struct.State* nonnull %0, i64 4204447, %struct.Memory* %75)
  ret %struct.Memory* %453

block_40272a:                                     ; preds = %block_402719
  %454 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %75)
  ret %struct.Memory* %454

block_402778:                                     ; preds = %block_402719
  %455 = tail call %struct.Memory* @sub_402778(%struct.State* nonnull %0, i64 4204408, %struct.Memory* %75)
  ret %struct.Memory* %455

block_402751:                                     ; preds = %block_402719
  %456 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %75)
  ret %struct.Memory* %456

; <label>:457:                                    ; preds = %block_402719
  %458 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %353, %struct.Memory* %75)
  ret %struct.Memory* %458
}

; Function Attrs: noinline
define %struct.Memory* @sub_408370_WriteOne32Tuple(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_408370:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %17 = load i64, i64* %15, align 8
  %18 = load i64, i64* %14, align 8, !tbaa !1240
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20
  store i64 %19, i64* %15, align 8, !tbaa !1240
  %21 = add i64 %18, -56
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  store i64 2147483648, i64* %28, align 8, !tbaa !1240
  store i64 2147483648, i64* %16, align 8, !tbaa !1240
  %29 = add i64 %18, -16
  %30 = load i64, i64* %13, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %18, -20
  %33 = load i32, i32* %8, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = add i64 %18, -24
  %36 = load i32, i32* %6, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %18, -32
  %39 = load i64, i64* %10, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %40
  %41 = add i64 %18, -40
  %42 = inttoptr i64 %41 to i64*
  store i64 2147483648, i64* %42
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %13, align 8, !tbaa !1240
  %45 = inttoptr i64 %29 to i64*
  %46 = load i64, i64* %45
  store i64 %46, i64* %11, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5162), i64* %12, align 8, !tbaa !1240
  %47 = add i64 %1, 63
  %48 = add i64 %18, -64
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %52 = inttoptr i64 %21 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %18, -48
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %18, -40
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %18, -32
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %18, -24
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %18, -16
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %18, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = inttoptr i64 %18 to i64*
  %73 = load i64, i64* %72
  %74 = add i64 %18, 8
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75
  %77 = add i64 %18, 16
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78
  %80 = inttoptr i64 %48 to i64*
  %81 = load i64, i64* %80
  store i64 %21, i64* %14, align 8, !alias.scope !1791, !noalias !1794
  %82 = tail call i64 @fprintf(i64 %44, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5162), i64 %46, i64 %39, i64 2147483648, i64 2147483648, i64 %53, i64 %56, i64 %59, i64 %62, i64 %65, i64 %68, i64 %71, i64 %73, i64 %76, i64 %79), !noalias !1791
  %83 = load i64, i64* %15, align 8
  %84 = add i64 %83, -36
  %85 = inttoptr i64 %84 to i32*
  store i32 0, i32* %85
  %86 = add i64 %83, -40
  %87 = trunc i64 %82 to i32
  %88 = add i64 %81, 10
  %89 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %89
  %90 = load i64, i64* %50, align 8
  %91 = load i64, i64* %51, align 8
  %92 = load i64, i64* %16, align 8
  %93 = load i64, i64* %15, align 8
  %94 = add i64 %93, -48
  %95 = add i64 %93, -44
  %96 = add i64 %93, -32
  %97 = add i64 %93, -36
  br label %block_4083b9

block_4083d8:                                     ; preds = %block_4083c5
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3579), i64* %12, align 8, !tbaa !1240
  %98 = add i64 %194, -24
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %13, align 8, !tbaa !1240
  %101 = add i64 %246, 21
  %102 = load i64, i64* %14, align 8, !tbaa !1240
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104
  %105 = inttoptr i64 %102 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %102, 8
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %102, 16
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %102, 24
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %102, 32
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %102, 40
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %102, 48
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %102, 56
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %102, 64
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %102, 72
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = inttoptr i64 %103 to i64*
  %135 = load i64, i64* %134
  store i64 %102, i64* %14, align 8, !alias.scope !1796, !noalias !1799
  %136 = tail call i64 @fprintf(i64 %100, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3579), i64 %90, i64 %243, i64 %91, i64 %92, i64 %106, i64 %109, i64 %112, i64 %115, i64 %118, i64 %121, i64 %124, i64 %127, i64 %130, i64 %133), !noalias !1796
  %137 = trunc i64 %136 to i32
  %138 = inttoptr i64 %95 to i32*
  store i32 %137, i32* %138
  %139 = add i64 %135, 32
  br label %block_40840d

block_4083f5:                                     ; preds = %block_4083c5
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5167), i64* %12, align 8, !tbaa !1240
  %140 = add i64 %194, -24
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %13, align 8, !tbaa !1240
  %143 = add i64 %246, 21
  %144 = load i64, i64* %14, align 8, !tbaa !1240
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147
  %149 = add i64 %144, 8
  %150 = inttoptr i64 %149 to i64*
  %151 = load i64, i64* %150
  %152 = add i64 %144, 16
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %144, 24
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  %158 = add i64 %144, 32
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159
  %161 = add i64 %144, 40
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %144, 48
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %144, 56
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %144, 64
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %144, 72
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = inttoptr i64 %145 to i64*
  %177 = load i64, i64* %176
  store i64 %144, i64* %14, align 8, !alias.scope !1801, !noalias !1804
  %178 = tail call i64 @fprintf(i64 %142, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5167), i64 %90, i64 0, i64 %91, i64 %92, i64 %148, i64 %151, i64 %154, i64 %157, i64 %160, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175), !noalias !1801
  %179 = trunc i64 %178 to i32
  %180 = add i64 %177, 3
  %181 = inttoptr i64 %94 to i32*
  store i32 %179, i32* %181
  br label %block_40840d

block_40840d:                                     ; preds = %block_4083f5, %block_4083d8
  %182 = phi i64 [ %180, %block_4083f5 ], [ %139, %block_4083d8 ]
  %183 = phi %struct.Memory* [ %195, %block_4083f5 ], [ %195, %block_4083d8 ]
  %184 = inttoptr i64 %96 to i64*
  %185 = load i64, i64* %184
  %186 = lshr i64 %185, 1
  %187 = inttoptr i64 %96 to i64*
  store i64 %186, i64* %187
  %188 = inttoptr i64 %97 to i32*
  %189 = load i32, i32* %188
  %190 = add i32 %189, 1
  %191 = inttoptr i64 %97 to i32*
  store i32 %190, i32* %191
  %192 = add i64 %182, -84
  br label %block_4083b9

block_4083b9:                                     ; preds = %block_40840d, %block_408370
  %193 = phi i64 [ %88, %block_408370 ], [ %192, %block_40840d ]
  %194 = phi i64 [ %83, %block_408370 ], [ %93, %block_40840d ]
  %195 = phi %struct.Memory* [ %2, %block_408370 ], [ %183, %block_40840d ]
  %196 = add i64 %194, -36
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %9, align 8, !tbaa !1240
  %200 = add i64 %194, -16
  %201 = inttoptr i64 %200 to i32*
  %202 = load i32, i32* %201
  %203 = icmp ult i32 %198, %202
  %204 = select i1 %203, i64 12, i64 110
  %205 = add i64 %193, %204
  br i1 %203, label %block_4083c5, label %block_408427

block_408427:                                     ; preds = %block_4083b9
  %206 = load i64, i64* %14, align 8
  %207 = add i64 %206, 48
  %208 = icmp ugt i64 %206, -49
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %22, align 1, !tbaa !1264
  %210 = trunc i64 %207 to i32
  %211 = and i32 %210, 255
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #10
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  store i8 %215, i8* %23, align 1, !tbaa !1278
  %216 = xor i64 %206, 16
  %217 = xor i64 %216, %207
  %218 = lshr i64 %217, 4
  %219 = trunc i64 %218 to i8
  %220 = and i8 %219, 1
  store i8 %220, i8* %24, align 1, !tbaa !1279
  %221 = icmp eq i64 %207, 0
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %25, align 1, !tbaa !1280
  %223 = lshr i64 %207, 63
  %224 = trunc i64 %223 to i8
  store i8 %224, i8* %26, align 1, !tbaa !1281
  %225 = lshr i64 %206, 63
  %226 = xor i64 %223, %225
  %227 = add nuw nsw i64 %226, %223
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %27, align 1, !tbaa !1282
  %230 = add i64 %206, 56
  %231 = inttoptr i64 %207 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %15, align 8, !tbaa !1240
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %3, align 8, !tbaa !1240
  %235 = add i64 %206, 64
  store i64 %235, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %195

block_4083c5:                                     ; preds = %block_4083b9
  %236 = add i64 %194, -12
  %237 = inttoptr i64 %236 to i32*
  %238 = load i32, i32* %237
  %239 = zext i32 %238 to i64
  %240 = add i64 %194, -32
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = and i64 %242, %239
  store i64 %243, i64* %10, align 8, !tbaa !1240
  %244 = icmp eq i64 %243, 0
  %245 = select i1 %244, i64 48, i64 19
  %246 = add i64 %205, %245
  br i1 %244, label %block_4083f5, label %block_4083d8
}

; Function Attrs: noinline
define %struct.Memory* @sub_405110_MultiWayMerge(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit12:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %16 = load i64, i64* %12, align 8
  %17 = load i64, i64* %11, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %12, align 8, !tbaa !1240
  %20 = add i64 %17, -520
  store i64 %20, i64* %11, align 8, !tbaa !1240
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = add i64 %17, -24
  %28 = load i64, i64* %10, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %31, 4248
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %1, 37
  %36 = load i64, i64* %11, align 8, !tbaa !1240
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %35, i64* %38
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %3, align 8, !alias.scope !1806, !noalias !1809
  store i64 %36, i64* %11, align 8, !alias.scope !1806, !noalias !1809
  %43 = tail call i64 @fseek(i64 %34, i64 0, i64 0), !noalias !1806
  store i64 %43, i64* %39, align 8, !alias.scope !1806, !noalias !1809
  %44 = load i64, i64* %12, align 8
  %45 = add i64 %44, -128
  %46 = load i64, i64* %3, align 8
  %47 = add i64 %44, -352
  %48 = add i64 %44, -16
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %50, 600
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %44, -400
  %55 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %55
  %56 = add i64 %44, -356
  %57 = inttoptr i64 %56 to i32*
  store i32 1, i32* %57
  %58 = inttoptr i64 %48 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %59, 556
  %61 = inttoptr i64 %60 to i32*
  store i32 0, i32* %61
  %62 = inttoptr i64 %48 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %63, 588
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65
  %67 = add i64 %44, -392
  %68 = inttoptr i64 %67 to i32*
  store i32 %66, i32* %68
  %69 = inttoptr i64 %67 to i32*
  %70 = load i32, i32* %69
  %71 = lshr i32 %70, 2
  %72 = add i64 %44, -388
  %73 = inttoptr i64 %72 to i32*
  store i32 %71, i32* %73
  %74 = add i64 %44, -416
  %75 = inttoptr i64 %74 to i64*
  store i64 %47, i64* %75
  %76 = add i64 %44, -424
  %77 = inttoptr i64 %76 to i64*
  store i64 %45, i64* %77
  %78 = inttoptr i64 %67 to i32*
  %79 = load i32, i32* %78
  %80 = lshr i32 %79, 2
  %81 = load i64, i64* %12, align 8
  %82 = add i64 %81, -388
  %83 = inttoptr i64 %82 to i32*
  store i32 %80, i32* %83
  %84 = add i64 %81, -16
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = add i64 %86, 592
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88
  store i64 %86, i64* %7, align 8, !tbaa !1240
  %90 = add i64 %81, -432
  %91 = load i32, i32* %5, align 4
  %92 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %92
  %93 = add i64 %86, 624
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = udiv i32 %89, %95
  store i64 0, i64* %13, align 8, !tbaa !1240
  %97 = add i64 %81, -392
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98
  %100 = udiv i32 %96, %99
  %101 = urem i32 %96, %99
  %102 = zext i32 %101 to i64
  store i64 %102, i64* %8, align 8, !tbaa !1240
  %103 = add i64 %81, -404
  %104 = inttoptr i64 %103 to i32*
  store i32 %100, i32* %104
  %105 = inttoptr i64 %103 to i32*
  %106 = load i32, i32* %105
  %107 = icmp eq i32 %106, 0
  %108 = select i1 %107, i64 174, i64 217
  %109 = add i64 %46, %108
  br i1 %107, label %block_4051e3, label %block_40520e

block_40557d:                                     ; preds = %block_405537, %block_405513
  %110 = phi i64 [ %155, %block_405513 ], [ %630, %block_405537 ]
  %111 = phi i64 [ %1026, %block_405513 ], [ %632, %block_405537 ]
  %112 = phi %struct.Memory* [ %1027, %block_405513 ], [ %1027, %block_405537 ]
  %113 = add i64 %111, -356
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = icmp eq i32 %115, 0
  %117 = select i1 %116, i64 62, i64 13
  %118 = add i64 %110, %117
  %119 = add i64 %111, -352
  store i64 %119, i64* %6, align 8, !tbaa !1240
  %120 = add i64 %111, -128
  %121 = add i64 %111, -16
  %122 = inttoptr i64 %121 to i64*
  %123 = load i64, i64* %122
  br i1 %116, label %block_4055bb, label %block_40558a

block_40587c:                                     ; preds = %block_40586d, %block_40584a
  %124 = phi i64 [ %404, %block_40584a ], [ %1109, %block_40586d ]
  %125 = phi %struct.Memory* [ %389, %block_40584a ], [ %389, %block_40586d ]
  %126 = inttoptr i64 %1224 to i32*
  %127 = load i32, i32* %126
  %128 = add i32 %127, 1
  %129 = inttoptr i64 %1224 to i32*
  store i32 %128, i32* %129
  %130 = add i64 %124, -123
  br label %block_405801

block_4054fa:                                     ; preds = %block_4053a8, %block_4054f5
  %131 = phi i64 [ %1026, %block_4053a8 ], [ %140, %block_4054f5 ]
  %132 = phi i64 [ %1091, %block_4053a8 ], [ %143, %block_4054f5 ]
  %133 = phi %struct.Memory* [ %1027, %block_4053a8 ], [ %142, %block_4054f5 ]
  %134 = add i64 %131, -364
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135
  %137 = add i32 %136, 1
  %138 = inttoptr i64 %134 to i32*
  store i32 %137, i32* %138
  %139 = add i64 %132, -360
  br label %block_405392

block_4054f5:                                     ; preds = %block_4054c2, %block_4053cc
  %140 = phi i64 [ %375, %block_4053cc ], [ %498, %block_4054c2 ]
  %141 = phi i64 [ %387, %block_4053cc ], [ %505, %block_4054c2 ]
  %142 = phi %struct.Memory* [ %374, %block_4053cc ], [ %374, %block_4054c2 ]
  %143 = add i64 %141, 5
  br label %block_4054fa

block_405513:                                     ; preds = %block_405392
  %144 = add i64 %1026, -368
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145
  %147 = zext i32 %146 to i64
  %148 = mul nuw nsw i64 %147, 24
  %149 = add i64 %148, %1042
  %150 = add i64 %149, 20
  %151 = inttoptr i64 %150 to i32*
  %152 = load i32, i32* %151
  %153 = icmp eq i32 %152, 0
  %154 = select i1 %153, i64 106, i64 36
  %155 = add i64 %1039, %154
  br i1 %153, label %block_40557d, label %block_405537

block_405970:                                     ; preds = %block_4058c1
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %9, align 8, !tbaa !1240
  %156 = load i64, i64* @stderr
  store i64 %156, i64* %10, align 8, !tbaa !1240
  %157 = add i64 %530, 25
  %158 = load i64, i64* %11, align 8, !tbaa !1240
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %162 = load i64, i64* %40, align 8, !alias.scope !1811, !noalias !1814
  %163 = load i64, i64* %1024, align 8, !alias.scope !1811, !noalias !1814
  %164 = load i64, i64* %161, align 8, !alias.scope !1811, !noalias !1814
  %165 = load i64, i64* %14, align 8, !alias.scope !1811, !noalias !1814
  %166 = inttoptr i64 %158 to i64*
  %167 = load i64, i64* %166
  %168 = add i64 %158, 8
  %169 = inttoptr i64 %168 to i64*
  %170 = load i64, i64* %169
  %171 = add i64 %158, 16
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  %174 = add i64 %158, 24
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = add i64 %158, 32
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %158, 40
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  %183 = add i64 %158, 48
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = add i64 %158, 56
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = add i64 %158, 64
  %190 = inttoptr i64 %189 to i64*
  %191 = load i64, i64* %190
  %192 = add i64 %158, 72
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193
  %195 = inttoptr i64 %159 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %3, align 8, !alias.scope !1811, !noalias !1814
  store i64 %158, i64* %11, align 8, !alias.scope !1811, !noalias !1814
  %197 = tail call i64 @fprintf(i64 %156, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %162, i64 %163, i64 %164, i64 %165, i64 %167, i64 %170, i64 %173, i64 %176, i64 %179, i64 %182, i64 %185, i64 %188, i64 %191, i64 %194), !noalias !1811
  %198 = load i64, i64* %12, align 8
  %199 = add i64 %198, -4
  %200 = inttoptr i64 %199 to i32*
  store i32 1, i32* %200
  %201 = add i64 %198, -492
  %202 = trunc i64 %197 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  br label %block_405a8a

block_4052dc:                                     ; preds = %block_4052b8
  %204 = add i64 %866, -352
  store i64 %204, i64* %6, align 8, !tbaa !1240
  %205 = add i64 %866, -404
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %705 to i64
  %209 = sext i32 %207 to i64
  %210 = mul nsw i64 %209, %208
  %211 = add i64 %866, -388
  %212 = inttoptr i64 %211 to i32*
  %213 = load i32, i32* %212
  %214 = shl i64 %210, 32
  %215 = ashr exact i64 %214, 32
  %216 = sext i32 %213 to i64
  %217 = mul nsw i64 %216, %215
  %218 = add i64 %866, -372
  %219 = trunc i64 %217 to i32
  %220 = inttoptr i64 %218 to i32*
  store i32 %219, i32* %220
  %221 = inttoptr i64 %218 to i32*
  %222 = load i32, i32* %221
  %223 = zext i32 %222 to i64
  store i64 %223, i64* %7, align 8, !tbaa !1240
  %224 = inttoptr i64 %211 to i32*
  %225 = load i32, i32* %224
  %226 = inttoptr i64 %872 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %227, 632
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = load i64, i64* %12, align 8
  %232 = add i64 %231, -364
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = zext i32 %234 to i64
  %236 = mul nuw nsw i64 %235, 24
  %237 = add i64 %236, %230
  %238 = add i64 %237, 16
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239
  %241 = mul i32 %240, %225
  %242 = load i64, i64* %7, align 8
  %243 = trunc i64 %242 to i32
  %244 = add i32 %241, %243
  %245 = load i64, i64* %12, align 8
  %246 = add i64 %245, -376
  %247 = inttoptr i64 %246 to i32*
  store i32 %244, i32* %247
  %248 = add i64 %245, -400
  %249 = inttoptr i64 %248 to i64*
  %250 = load i64, i64* %249
  %251 = inttoptr i64 %246 to i32*
  %252 = load i32, i32* %251
  %253 = zext i32 %252 to i64
  %254 = shl nuw nsw i64 %253, 2
  %255 = add i64 %254, %250
  %256 = add i64 %245, -16
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %13, align 8, !tbaa !1240
  %259 = add i64 %258, 588
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260
  %262 = zext i32 %261 to i64
  %263 = load i64, i64* %6, align 8
  %264 = add i64 %613, 128
  %265 = load i64, i64* %11, align 8, !tbaa !1240
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %264, i64* %267
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268
  store i64 %269, i64* %3, align 8, !alias.scope !1816, !noalias !1819
  store i64 %265, i64* %11, align 8, !alias.scope !1816, !noalias !1819
  %270 = tail call i64 @memcpy(i64 %263, i64 %255, i64 %262), !noalias !1816
  %271 = load i64, i64* %12, align 8
  %272 = add i64 %271, -364
  %273 = load i64, i64* %3, align 8
  %274 = inttoptr i64 %272 to i32*
  %275 = load i32, i32* %274
  %276 = add i64 %271, -368
  %277 = inttoptr i64 %276 to i32*
  store i32 %275, i32* %277
  %278 = add i64 %273, 42
  br label %block_405386

block_40567c:                                     ; preds = %block_405628
  %279 = add i64 %597, 354
  br label %block_4057e3

block_4053cc:                                     ; preds = %block_4053a8
  %280 = add i64 %1026, -352
  store i64 %280, i64* %6, align 8, !tbaa !1240
  %281 = add i64 %1026, -240
  store i64 %281, i64* %7, align 8, !tbaa !1240
  %282 = add i64 %1026, -388
  %283 = inttoptr i64 %282 to i32*
  %284 = load i32, i32* %283
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %8, align 8, !tbaa !1240
  %286 = add i64 %1026, -404
  %287 = inttoptr i64 %286 to i32*
  %288 = load i32, i32* %287
  %289 = mul i32 %288, %1030
  %290 = add i64 %1085, 16
  %291 = inttoptr i64 %290 to i32*
  %292 = load i32, i32* %291
  %293 = add i32 %292, %289
  %294 = load i64, i64* %8, align 8
  %295 = shl i64 %294, 32
  %296 = ashr exact i64 %295, 32
  %297 = sext i32 %293 to i64
  %298 = mul nsw i64 %297, %296
  %299 = load i64, i64* %12, align 8
  %300 = add i64 %299, -428
  %301 = trunc i64 %298 to i32
  %302 = inttoptr i64 %300 to i32*
  store i32 %301, i32* %302
  %303 = load i64, i64* %7, align 8
  %304 = add i64 %299, -400
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  %307 = inttoptr i64 %300 to i32*
  %308 = load i32, i32* %307
  %309 = zext i32 %308 to i64
  %310 = shl nuw nsw i64 %309, 2
  %311 = add i64 %310, %306
  store i64 %311, i64* %14, align 8, !tbaa !1240
  %312 = add i64 %299, -16
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %15, align 8, !tbaa !1240
  %315 = add i64 %314, 588
  %316 = inttoptr i64 %315 to i32*
  %317 = load i32, i32* %316
  %318 = zext i32 %317 to i64
  %319 = add i64 %299, -448
  %320 = load i64, i64* %6, align 8
  %321 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %321
  %322 = add i64 %299, -456
  %323 = inttoptr i64 %322 to i64*
  store i64 %303, i64* %323
  %324 = add i64 %1091, 132
  %325 = load i64, i64* %11, align 8, !tbaa !1240
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %324, i64* %327
  %328 = inttoptr i64 %326 to i64*
  %329 = load i64, i64* %328
  store i64 %329, i64* %3, align 8, !alias.scope !1821, !noalias !1824
  store i64 %325, i64* %11, align 8, !alias.scope !1821, !noalias !1824
  %330 = tail call i64 @memcpy(i64 %303, i64 %311, i64 %318), !noalias !1821
  %331 = load i64, i64* %12, align 8
  %332 = add i64 %331, -16
  %333 = load i64, i64* %3, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334
  %336 = add i64 %335, 540
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = shl i32 %338, 1
  %340 = zext i32 %339 to i64
  %341 = shl nuw nsw i64 %340, 2
  %342 = add i64 %331, -456
  %343 = inttoptr i64 %342 to i64*
  %344 = load i64, i64* %343
  %345 = add i64 %341, %344
  store i64 %345, i64* %7, align 8, !tbaa !1240
  %346 = load i64, i64* %12, align 8
  %347 = add i64 %346, -16
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %349, 540
  %351 = inttoptr i64 %350 to i32*
  %352 = load i32, i32* %351
  %353 = shl i32 %352, 1
  %354 = zext i32 %353 to i64
  %355 = shl nuw nsw i64 %354, 2
  %356 = add i64 %346, -448
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %355, %358
  %360 = load i64, i64* %12, align 8
  %361 = add i64 %360, -16
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %363, 548
  %365 = inttoptr i64 %364 to i32*
  %366 = load i32, i32* %365
  %367 = zext i32 %366 to i64
  store i64 %367, i64* %13, align 8, !tbaa !1240
  %368 = load i64, i64* %7, align 8
  store i64 %368, i64* %10, align 8, !tbaa !1240
  store i64 %359, i64* %9, align 8, !tbaa !1240
  store i64 %367, i64* %8, align 8, !tbaa !1240
  %369 = add i64 %333, 21712
  %370 = add i64 %333, 95
  %371 = load i64, i64* %11, align 8, !tbaa !1240
  %372 = add i64 %371, -8
  %373 = inttoptr i64 %372 to i64*
  store i64 %370, i64* %373
  store i64 %372, i64* %11, align 8, !tbaa !1240
  %374 = tail call %struct.Memory* @sub_40a920_KeyComp(%struct.State* nonnull %0, i64 %369, %struct.Memory* %1027)
  %375 = load i64, i64* %12, align 8
  %376 = add i64 %375, -408
  %377 = load i32, i32* %5, align 4
  %378 = load i64, i64* %3, align 8
  %379 = inttoptr i64 %376 to i32*
  store i32 %377, i32* %379
  %380 = add i64 %378, 13
  %381 = inttoptr i64 %376 to i32*
  %382 = load i32, i32* %381
  %383 = lshr i32 %382, 31
  %384 = trunc i32 %383 to i8
  %385 = icmp ne i8 %384, 0
  %386 = select i1 %385, i64 6, i64 57
  %387 = add i64 %380, %386
  br i1 %385, label %block_4054c2, label %block_4054f5

block_40584a:                                     ; preds = %block_405817, %block_40583b
  %388 = phi i64 [ %883, %block_405817 ], [ %601, %block_40583b ]
  %389 = phi %struct.Memory* [ %1194, %block_405817 ], [ %1194, %block_40583b ]
  %390 = inttoptr i64 %1227 to i64*
  %391 = load i64, i64* %390
  %392 = add i64 %391, 632
  %393 = inttoptr i64 %392 to i64*
  %394 = load i64, i64* %393
  %395 = inttoptr i64 %1224 to i32*
  %396 = load i32, i32* %395
  %397 = zext i32 %396 to i64
  %398 = mul nuw nsw i64 %397, 24
  %399 = add i64 %398, %394
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400
  %402 = icmp ne i32 %401, 0
  %403 = select i1 %402, i64 50, i64 35
  %404 = add i64 %388, %403
  br i1 %402, label %block_40587c, label %block_40586d

block_4056ee:                                     ; preds = %block_405681
  %405 = load i64, i64* %12, align 8
  %406 = add i64 %405, -16
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %408, 556
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410
  %412 = add i32 %411, 1
  %413 = inttoptr i64 %409 to i32*
  store i32 %412, i32* %413
  %414 = add i64 %405, -360
  %415 = add i64 %1254, 29
  %416 = inttoptr i64 %414 to i32*
  store i32 0, i32* %416
  br label %block_40570b

block_4058c6:                                     ; preds = %block_4058ab, %block_405895
  %417 = phi i64 [ %1048, %block_4058ab ], [ %995, %block_405895 ]
  %418 = add i64 %1199, 632
  %419 = inttoptr i64 %418 to i64*
  %420 = load i64, i64* %419
  %421 = add i64 %1215, -368
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422
  %424 = zext i32 %423 to i64
  %425 = zext i32 %423 to i64
  %426 = mul nuw nsw i64 %425, 24
  %427 = add i64 %426, %420
  %428 = add i64 %427, 20
  %429 = inttoptr i64 %428 to i32*
  %430 = load i32, i32* %429
  %431 = icmp eq i32 %430, 0
  %432 = select i1 %431, i64 36, i64 99
  %433 = add i64 %417, %432
  br i1 %431, label %block_4058ea, label %block_405929

block_4056c3:                                     ; preds = %block_405681
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %9, align 8, !tbaa !1240
  %434 = load i64, i64* @stderr
  store i64 %434, i64* %10, align 8, !tbaa !1240
  %435 = add i64 %1254, 25
  %436 = load i64, i64* %11, align 8, !tbaa !1240
  %437 = add i64 %436, -8
  %438 = inttoptr i64 %437 to i64*
  store i64 %435, i64* %438
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %440 = load i64, i64* %40, align 8, !alias.scope !1826, !noalias !1829
  %441 = load i64, i64* %1024, align 8, !alias.scope !1826, !noalias !1829
  %442 = load i64, i64* %439, align 8, !alias.scope !1826, !noalias !1829
  %443 = load i64, i64* %14, align 8, !alias.scope !1826, !noalias !1829
  %444 = inttoptr i64 %436 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %436, 8
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %436, 16
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %436, 24
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %436, 32
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %436, 40
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %436, 48
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = add i64 %436, 56
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %436, 64
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = add i64 %436, 72
  %471 = inttoptr i64 %470 to i64*
  %472 = load i64, i64* %471
  %473 = inttoptr i64 %437 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %3, align 8, !alias.scope !1826, !noalias !1829
  store i64 %436, i64* %11, align 8, !alias.scope !1826, !noalias !1829
  %475 = tail call i64 @fprintf(i64 %434, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %440, i64 %441, i64 %442, i64 %443, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457, i64 %460, i64 %463, i64 %466, i64 %469, i64 %472), !noalias !1826
  %476 = load i64, i64* %12, align 8
  %477 = add i64 %476, -4
  %478 = inttoptr i64 %477 to i32*
  store i32 1, i32* %478
  %479 = add i64 %476, -468
  %480 = trunc i64 %475 to i32
  %481 = inttoptr i64 %479 to i32*
  store i32 %480, i32* %481
  br label %block_405a8a

block_4054c2:                                     ; preds = %block_4053cc
  %482 = add i64 %375, -240
  %483 = add i64 %375, -352
  %484 = add i64 %375, -16
  %485 = inttoptr i64 %484 to i64*
  %486 = load i64, i64* %485
  %487 = add i64 %486, 588
  %488 = inttoptr i64 %487 to i32*
  %489 = load i32, i32* %488
  %490 = zext i32 %489 to i64
  %491 = add i64 %387, 37
  %492 = load i64, i64* %11, align 8, !tbaa !1240
  %493 = add i64 %492, -8
  %494 = inttoptr i64 %493 to i64*
  store i64 %491, i64* %494
  %495 = inttoptr i64 %493 to i64*
  %496 = load i64, i64* %495
  store i64 %496, i64* %3, align 8, !alias.scope !1831, !noalias !1834
  store i64 %492, i64* %11, align 8, !alias.scope !1831, !noalias !1834
  %497 = tail call i64 @memcpy(i64 %483, i64 %482, i64 %490), !noalias !1831
  %498 = load i64, i64* %12, align 8
  %499 = add i64 %498, -364
  %500 = load i64, i64* %3, align 8
  %501 = inttoptr i64 %499 to i32*
  %502 = load i32, i32* %501
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %13, align 8, !tbaa !1240
  %504 = add i64 %498, -368
  %505 = add i64 %500, 14
  %506 = inttoptr i64 %504 to i32*
  store i32 %502, i32* %506
  br label %block_4054f5

block_4058c1:                                     ; preds = %block_4058ab
  store i64 1, i64* %8, align 8, !tbaa !1240
  %507 = add i64 %1215, -128
  %508 = add i64 %1199, 588
  %509 = inttoptr i64 %508 to i32*
  %510 = load i32, i32* %509
  %511 = zext i32 %510 to i64
  store i64 %511, i64* %9, align 8, !tbaa !1240
  %512 = add i64 %1199, 4240
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %1215, -488
  %516 = inttoptr i64 %515 to i64*
  store i64 %514, i64* %516
  store i64 %507, i64* %10, align 8, !tbaa !1240
  %517 = inttoptr i64 %515 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %7, align 8, !tbaa !1240
  %519 = add i64 %1048, 165
  %520 = load i64, i64* %11, align 8, !tbaa !1240
  %521 = add i64 %520, -8
  %522 = inttoptr i64 %521 to i64*
  store i64 %519, i64* %522
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523
  store i64 %524, i64* %3, align 8, !alias.scope !1836, !noalias !1839
  store i64 %520, i64* %11, align 8, !alias.scope !1836, !noalias !1839
  %525 = tail call i64 @fwrite(i64 %507, i64 %511, i64 1, i64 %518)
  %526 = load i64, i64* %3, align 8
  %527 = add i64 %525, -1
  %528 = icmp eq i64 %527, 0
  %529 = select i1 %528, i64 53, i64 10
  %530 = add i64 %526, %529
  br i1 %528, label %block_40599b, label %block_405970

block_405240:                                     ; preds = %block_40522a
  %531 = add i64 %683, -392
  %532 = inttoptr i64 %531 to i32*
  %533 = load i32, i32* %532
  %534 = zext i32 %533 to i64
  store i64 %534, i64* %10, align 8, !tbaa !1240
  %535 = add i64 %683, -400
  %536 = inttoptr i64 %535 to i64*
  %537 = load i64, i64* %536
  store i64 %537, i64* %9, align 8, !tbaa !1240
  %538 = add i64 %683, -388
  %539 = inttoptr i64 %538 to i32*
  %540 = load i32, i32* %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %8, align 8, !tbaa !1240
  store i64 %688, i64* %7, align 8, !tbaa !1240
  %542 = add i64 %683, -404
  %543 = inttoptr i64 %542 to i32*
  %544 = load i32, i32* %543
  %545 = zext i32 %544 to i64
  store i64 %545, i64* %13, align 8, !tbaa !1240
  %546 = add i64 %691, 632
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  store i64 %548, i64* %14, align 8, !tbaa !1240
  %549 = add i64 %691, 4248
  %550 = inttoptr i64 %549 to i64*
  %551 = load i64, i64* %550
  %552 = load i64, i64* %11, align 8
  %553 = inttoptr i64 %552 to i64*
  store i64 %551, i64* %553
  %554 = add i64 %697, 5040
  %555 = add i64 %697, 63
  %556 = add i64 %552, -8
  %557 = inttoptr i64 %556 to i64*
  store i64 %555, i64* %557
  store i64 %556, i64* %11, align 8, !tbaa !1240
  %558 = tail call %struct.Memory* @sub_4065f0_ReadSubChunk(%struct.State* nonnull %0, i64 %554, %struct.Memory* %684)
  %559 = load i64, i64* %12, align 8
  %560 = add i64 %559, -360
  %561 = load i64, i64* %3, align 8
  %562 = inttoptr i64 %560 to i32*
  %563 = load i32, i32* %562
  %564 = add i32 %563, 1
  %565 = inttoptr i64 %560 to i32*
  store i32 %564, i32* %565
  %566 = add i64 %561, -85
  br label %block_40522a

block_40563e:                                     ; preds = %block_405628
  %567 = inttoptr i64 %825 to i64*
  %568 = load i64, i64* %567
  %569 = shl nuw nsw i64 %589, 3
  %570 = add i64 %568, %569
  %571 = inttoptr i64 %570 to i64*
  %572 = load i64, i64* %571
  %573 = inttoptr i64 %826 to i64*
  %574 = load i64, i64* %573
  %575 = add i64 %574, %569
  %576 = inttoptr i64 %575 to i64*
  %577 = load i64, i64* %576
  %578 = add i64 %577, %572
  %579 = inttoptr i64 %575 to i64*
  store i64 %578, i64* %579
  %580 = inttoptr i64 %821 to i32*
  %581 = load i32, i32* %580
  %582 = add i32 %581, 1
  %583 = inttoptr i64 %821 to i32*
  store i32 %582, i32* %583
  %584 = add i64 %597, -22
  br label %block_405628

block_405628:                                     ; preds = %block_40561e, %block_40563e
  %585 = phi i64 [ %822, %block_40561e ], [ %584, %block_40563e ]
  %586 = phi %struct.Memory* [ %1072, %block_40561e ], [ %586, %block_40563e ]
  %587 = inttoptr i64 %821 to i32*
  %588 = load i32, i32* %587
  %589 = zext i32 %588 to i64
  %590 = inttoptr i64 %824 to i64*
  %591 = load i64, i64* %590
  %592 = add i64 %591, 540
  %593 = inttoptr i64 %592 to i32*
  %594 = load i32, i32* %593
  %595 = icmp ult i32 %588, %594
  %596 = select i1 %595, i64 22, i64 84
  %597 = add i64 %585, %596
  br i1 %595, label %block_40563e, label %block_40567c

block_40583b:                                     ; preds = %block_405817
  %598 = inttoptr i64 %1220 to i32*
  %599 = load i32, i32* %598
  %600 = add i32 %599, 1
  %601 = add i64 %883, 15
  %602 = inttoptr i64 %1220 to i32*
  store i32 %600, i32* %602
  br label %block_40584a

block_4052b8:                                     ; preds = %block_4052a2
  %603 = add i64 %708, 632
  %604 = inttoptr i64 %603 to i64*
  %605 = load i64, i64* %604
  %606 = mul nuw nsw i64 %706, 24
  %607 = add i64 %606, %605
  %608 = add i64 %607, 20
  %609 = inttoptr i64 %608 to i32*
  %610 = load i32, i32* %609
  %611 = icmp eq i32 %610, 0
  %612 = select i1 %611, i64 181, i64 36
  %613 = add i64 %714, %612
  br i1 %611, label %block_40536d, label %block_4052dc

block_405537:                                     ; preds = %block_405513
  %614 = add i32 %152, -1
  %615 = inttoptr i64 %150 to i32*
  store i32 %614, i32* %615
  %616 = inttoptr i64 %1031 to i64*
  %617 = load i64, i64* %616
  %618 = add i64 %617, 632
  %619 = inttoptr i64 %618 to i64*
  %620 = load i64, i64* %619
  %621 = inttoptr i64 %144 to i32*
  %622 = load i32, i32* %621
  %623 = zext i32 %622 to i64
  %624 = mul nuw nsw i64 %623, 24
  %625 = add i64 %624, %620
  %626 = add i64 %625, 16
  %627 = inttoptr i64 %626 to i32*
  %628 = load i32, i32* %627
  %629 = add i32 %628, 1
  %630 = add i64 %155, 70
  %631 = inttoptr i64 %626 to i32*
  store i32 %629, i32* %631
  %632 = load i64, i64* %12, align 8
  br label %block_40557d

block_4051e3:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit12
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4240), i64* %9, align 8, !tbaa !1240
  %633 = load i64, i64* @stderr
  store i64 %633, i64* %10, align 8, !tbaa !1240
  %634 = add i64 %109, 25
  %635 = load i64, i64* %11, align 8, !tbaa !1240
  %636 = add i64 %635, -8
  %637 = inttoptr i64 %636 to i64*
  store i64 %634, i64* %637
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %640 = load i64, i64* %40, align 8, !alias.scope !1841, !noalias !1844
  %641 = load i64, i64* %638, align 8, !alias.scope !1841, !noalias !1844
  %642 = load i64, i64* %639, align 8, !alias.scope !1841, !noalias !1844
  %643 = load i64, i64* %14, align 8, !alias.scope !1841, !noalias !1844
  %644 = inttoptr i64 %635 to i64*
  %645 = load i64, i64* %644
  %646 = add i64 %635, 8
  %647 = inttoptr i64 %646 to i64*
  %648 = load i64, i64* %647
  %649 = add i64 %635, 16
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %635, 24
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = add i64 %635, 32
  %656 = inttoptr i64 %655 to i64*
  %657 = load i64, i64* %656
  %658 = add i64 %635, 40
  %659 = inttoptr i64 %658 to i64*
  %660 = load i64, i64* %659
  %661 = add i64 %635, 48
  %662 = inttoptr i64 %661 to i64*
  %663 = load i64, i64* %662
  %664 = add i64 %635, 56
  %665 = inttoptr i64 %664 to i64*
  %666 = load i64, i64* %665
  %667 = add i64 %635, 64
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668
  %670 = add i64 %635, 72
  %671 = inttoptr i64 %670 to i64*
  %672 = load i64, i64* %671
  %673 = inttoptr i64 %636 to i64*
  %674 = load i64, i64* %673
  store i64 %674, i64* %3, align 8, !alias.scope !1841, !noalias !1844
  store i64 %635, i64* %11, align 8, !alias.scope !1841, !noalias !1844
  %675 = tail call i64 @fprintf(i64 %633, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4240), i64 %640, i64 %641, i64 %642, i64 %643, i64 %645, i64 %648, i64 %651, i64 %654, i64 %657, i64 %660, i64 %663, i64 %666, i64 %669, i64 %672), !noalias !1841
  %676 = load i64, i64* %12, align 8
  %677 = add i64 %676, -4
  %678 = inttoptr i64 %677 to i32*
  store i32 2, i32* %678
  %679 = add i64 %676, -436
  %680 = trunc i64 %675 to i32
  %681 = inttoptr i64 %679 to i32*
  store i32 %680, i32* %681
  br label %block_405a8a

block_40522a:                                     ; preds = %block_40520e, %block_405240
  %682 = phi i64 [ %1104, %block_40520e ], [ %566, %block_405240 ]
  %683 = phi i64 [ %81, %block_40520e ], [ %559, %block_405240 ]
  %684 = phi %struct.Memory* [ %2, %block_40520e ], [ %558, %block_405240 ]
  %685 = add i64 %683, -360
  %686 = inttoptr i64 %685 to i32*
  %687 = load i32, i32* %686
  %688 = zext i32 %687 to i64
  %689 = add i64 %683, -16
  %690 = inttoptr i64 %689 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %691, 624
  %693 = inttoptr i64 %692 to i32*
  %694 = load i32, i32* %693
  %695 = icmp ult i32 %687, %694
  %696 = select i1 %695, i64 22, i64 105
  %697 = add i64 %682, %696
  br i1 %695, label %block_405240, label %block_405293

block_405929:                                     ; preds = %block_4058ea, %block_4058c6
  %698 = phi i64 [ %1215, %block_4058c6 ], [ %853, %block_4058ea ]
  %699 = phi i64 [ %433, %block_4058c6 ], [ %852, %block_4058ea ]
  %700 = phi %struct.Memory* [ %1194, %block_4058c6 ], [ %851, %block_4058ea ]
  %701 = add i64 %699, -1681
  br label %block_405298

block_4052a2:                                     ; preds = %block_40536d, %block_405298
  %702 = phi i64 [ %870, %block_405298 ], [ %1094, %block_40536d ]
  %703 = phi %struct.Memory* [ %868, %block_405298 ], [ %703, %block_40536d ]
  %704 = inttoptr i64 %869 to i32*
  %705 = load i32, i32* %704
  %706 = zext i32 %705 to i64
  %707 = inttoptr i64 %872 to i64*
  %708 = load i64, i64* %707
  %709 = add i64 %708, 624
  %710 = inttoptr i64 %709 to i32*
  %711 = load i32, i32* %710
  %712 = icmp ult i32 %705, %711
  %713 = select i1 %712, i64 22, i64 228
  %714 = add i64 %702, %713
  br i1 %712, label %block_4052b8, label %block_405386.loopexit

block_4059ce:                                     ; preds = %block_4059b8
  %715 = add i64 %1008, -424
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = shl nuw nsw i64 %1013, 3
  %719 = add i64 %717, %718
  %720 = inttoptr i64 %719 to i64*
  %721 = load i64, i64* %720
  %722 = add nuw nsw i64 %718, 4280
  %723 = add i64 %722, %1016
  %724 = inttoptr i64 %723 to i64*
  %725 = load i64, i64* %724
  %726 = add i64 %725, %721
  %727 = add i64 %1016, 4280
  %728 = add i64 %727, %718
  %729 = inttoptr i64 %728 to i64*
  store i64 %726, i64* %729
  %730 = inttoptr i64 %1014 to i64*
  %731 = load i64, i64* %730
  %732 = add i64 %731, 556
  %733 = inttoptr i64 %732 to i32*
  %734 = load i32, i32* %733
  %735 = inttoptr i64 %715 to i64*
  %736 = load i64, i64* %735
  %737 = inttoptr i64 %1010 to i32*
  %738 = load i32, i32* %737
  %739 = zext i32 %738 to i64
  store i64 %739, i64* %7, align 8, !tbaa !1240
  %740 = shl nuw nsw i64 %739, 3
  %741 = add i64 %736, %740
  %742 = inttoptr i64 %741 to i64*
  %743 = load i64, i64* %742
  %744 = sext i64 %743 to i128
  %745 = and i128 %744, -18446744073709551616
  %746 = zext i32 %734 to i128
  %747 = zext i64 %743 to i128
  %748 = or i128 %745, %747
  %749 = mul nsw i128 %748, %746
  %750 = trunc i128 %749 to i64
  store i64 %750, i64* %6, align 8, !tbaa !1240
  %751 = sext i64 %750 to i128
  %752 = icmp ne i128 %751, %749
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %21, align 1, !tbaa !1264
  %754 = trunc i128 %749 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #10
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  store i8 0, i8* %24, align 1, !tbaa !1280
  %760 = lshr i64 %750, 63
  %761 = trunc i64 %760 to i8
  store i8 %761, i8* %25, align 1, !tbaa !1281
  store i8 %753, i8* %26, align 1, !tbaa !1282
  %762 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 8) to i32*)
  %763 = sext i32 %762 to i64
  %764 = load i64, i64* %12, align 8
  %765 = add i64 %764, -504
  %766 = inttoptr i64 %765 to i64*
  store i64 %763, i64* %766
  %767 = ashr i64 %750, 63
  store i64 %767, i64* %40, align 8, !tbaa !1240
  %768 = inttoptr i64 %765 to i64*
  %769 = load i64, i64* %768
  store i64 %769, i64* %9, align 8, !tbaa !1240
  %770 = add i64 %1022, 106
  store i64 %770, i64* %3, align 8
  %771 = sext i64 %769 to i128
  %772 = and i128 %771, -18446744073709551616
  %773 = zext i64 %767 to i128
  %774 = shl nuw i128 %773, 64
  %775 = and i128 %749, 18446744073709551615
  %776 = or i128 %774, %775
  %777 = zext i64 %769 to i128
  %778 = or i128 %772, %777
  %779 = sdiv i128 %776, %778
  %780 = trunc i128 %779 to i64
  %781 = and i128 %779, 18446744073709551615
  %782 = sext i64 %780 to i128
  %783 = and i128 %782, -18446744073709551616
  %784 = or i128 %783, %781
  %785 = icmp eq i128 %779, %784
  br i1 %785, label %791, label %786

; <label>:786:                                    ; preds = %block_4059ce
  %787 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %770, %struct.Memory* %1009) #14
  %788 = load i64, i64* %12, align 8
  %789 = load i64, i64* %3, align 8
  %790 = load i64, i64* %8, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:791:                                    ; preds = %block_4059ce
  %792 = srem i128 %776, %778
  %793 = trunc i128 %792 to i64
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %791, %786
  %794 = phi i64 [ %790, %786 ], [ %793, %791 ]
  %795 = phi i64 [ %789, %786 ], [ %770, %791 ]
  %796 = phi i64 [ %788, %786 ], [ %764, %791 ]
  %797 = phi %struct.Memory* [ %787, %786 ], [ %1009, %791 ]
  %798 = add i64 %796, -16
  %799 = inttoptr i64 %798 to i64*
  %800 = load i64, i64* %799
  store i64 %800, i64* %10, align 8, !tbaa !1240
  %801 = add i64 %796, -360
  %802 = inttoptr i64 %801 to i32*
  %803 = load i32, i32* %802
  %804 = zext i32 %803 to i64
  store i64 %804, i64* %13, align 8, !tbaa !1240
  %805 = shl nuw nsw i64 %804, 3
  %806 = add nuw nsw i64 %805, 4392
  %807 = add i64 %806, %800
  %808 = inttoptr i64 %807 to i64*
  %809 = load i64, i64* %808
  %810 = add i64 %809, %794
  store i64 %810, i64* %8, align 8, !tbaa !1240
  %811 = add i64 %800, 4392
  %812 = add i64 %811, %805
  %813 = inttoptr i64 %812 to i64*
  store i64 %810, i64* %813
  %814 = inttoptr i64 %801 to i32*
  %815 = load i32, i32* %814
  %816 = add i32 %815, 1
  %817 = load i64, i64* %12, align 8
  %818 = add i64 %817, -360
  %819 = inttoptr i64 %818 to i32*
  store i32 %816, i32* %819
  %820 = add i64 %795, -128
  br label %block_4059b8

block_40561e:                                     ; preds = %block_4055bb
  %821 = add i64 %1073, -360
  %822 = add i64 %1082, 10
  %823 = inttoptr i64 %821 to i32*
  store i32 0, i32* %823
  %824 = add i64 %1073, -16
  %825 = add i64 %1073, -416
  %826 = add i64 %1073, -424
  br label %block_405628

block_4058ea:                                     ; preds = %block_4058c6
  %827 = add i64 %1215, -392
  %828 = inttoptr i64 %827 to i32*
  %829 = load i32, i32* %828
  %830 = zext i32 %829 to i64
  store i64 %830, i64* %10, align 8, !tbaa !1240
  %831 = add i64 %1215, -400
  %832 = inttoptr i64 %831 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %9, align 8, !tbaa !1240
  %834 = add i64 %1215, -388
  %835 = inttoptr i64 %834 to i32*
  %836 = load i32, i32* %835
  %837 = zext i32 %836 to i64
  store i64 %837, i64* %8, align 8, !tbaa !1240
  store i64 %424, i64* %7, align 8, !tbaa !1240
  %838 = add i64 %1215, -404
  %839 = inttoptr i64 %838 to i32*
  %840 = load i32, i32* %839
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %13, align 8, !tbaa !1240
  store i64 %420, i64* %14, align 8, !tbaa !1240
  %842 = add i64 %1199, 4248
  %843 = inttoptr i64 %842 to i64*
  %844 = load i64, i64* %843
  %845 = load i64, i64* %11, align 8
  %846 = inttoptr i64 %845 to i64*
  store i64 %844, i64* %846
  %847 = add i64 %433, 3334
  %848 = add i64 %433, 63
  %849 = add i64 %845, -8
  %850 = inttoptr i64 %849 to i64*
  store i64 %848, i64* %850
  store i64 %849, i64* %11, align 8, !tbaa !1240
  %851 = tail call %struct.Memory* @sub_4065f0_ReadSubChunk(%struct.State* nonnull %0, i64 %847, %struct.Memory* %1194)
  %852 = load i64, i64* %3, align 8
  %853 = load i64, i64* %12, align 8
  br label %block_405929

block_40599b:                                     ; preds = %block_4058c1
  %854 = load i64, i64* %12, align 8
  %855 = add i64 %854, -16
  %856 = inttoptr i64 %855 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %857, 556
  %859 = inttoptr i64 %858 to i32*
  %860 = load i32, i32* %859
  %861 = add i32 %860, 1
  %862 = inttoptr i64 %858 to i32*
  store i32 %861, i32* %862
  %863 = add i64 %854, -360
  %864 = add i64 %530, 29
  %865 = inttoptr i64 %863 to i32*
  store i32 0, i32* %865
  br label %block_4059b8

block_405298:                                     ; preds = %block_405293, %block_405929
  %866 = phi i64 [ %683, %block_405293 ], [ %698, %block_405929 ]
  %867 = phi i64 [ %1023, %block_405293 ], [ %701, %block_405929 ]
  %868 = phi %struct.Memory* [ %684, %block_405293 ], [ %700, %block_405929 ]
  %869 = add i64 %866, -364
  %870 = add i64 %867, 10
  %871 = inttoptr i64 %869 to i32*
  store i32 0, i32* %871
  %872 = add i64 %866, -16
  br label %block_4052a2

block_405817:                                     ; preds = %block_405801
  %873 = add i64 %1199, 632
  %874 = inttoptr i64 %873 to i64*
  %875 = load i64, i64* %874
  %876 = mul nuw nsw i64 %1197, 24
  %877 = add i64 %876, %875
  %878 = add i64 %877, 20
  %879 = inttoptr i64 %878 to i32*
  %880 = load i32, i32* %879
  %881 = icmp ne i32 %880, 0
  %882 = select i1 %881, i64 51, i64 36
  %883 = add i64 %1205, %882
  br i1 %881, label %block_40584a, label %block_40583b

block_405721:                                     ; preds = %block_40570b
  %884 = add i64 %1127, -424
  %885 = inttoptr i64 %884 to i64*
  %886 = load i64, i64* %885
  %887 = shl nuw nsw i64 %1132, 3
  %888 = add i64 %886, %887
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add nuw nsw i64 %887, 4280
  %892 = add i64 %891, %1135
  %893 = inttoptr i64 %892 to i64*
  %894 = load i64, i64* %893
  %895 = add i64 %894, %890
  %896 = add i64 %1135, 4280
  %897 = add i64 %896, %887
  %898 = inttoptr i64 %897 to i64*
  store i64 %895, i64* %898
  %899 = inttoptr i64 %1133 to i64*
  %900 = load i64, i64* %899
  %901 = add i64 %900, 556
  %902 = inttoptr i64 %901 to i32*
  %903 = load i32, i32* %902
  %904 = inttoptr i64 %884 to i64*
  %905 = load i64, i64* %904
  %906 = inttoptr i64 %1129 to i32*
  %907 = load i32, i32* %906
  %908 = zext i32 %907 to i64
  store i64 %908, i64* %7, align 8, !tbaa !1240
  %909 = shl nuw nsw i64 %908, 3
  %910 = add i64 %905, %909
  %911 = inttoptr i64 %910 to i64*
  %912 = load i64, i64* %911
  %913 = sext i64 %912 to i128
  %914 = and i128 %913, -18446744073709551616
  %915 = zext i32 %903 to i128
  %916 = zext i64 %912 to i128
  %917 = or i128 %914, %916
  %918 = mul nsw i128 %917, %915
  %919 = trunc i128 %918 to i64
  store i64 %919, i64* %6, align 8, !tbaa !1240
  %920 = sext i64 %919 to i128
  %921 = icmp ne i128 %920, %918
  %922 = zext i1 %921 to i8
  store i8 %922, i8* %21, align 1, !tbaa !1264
  %923 = trunc i128 %918 to i32
  %924 = and i32 %923, 255
  %925 = tail call i32 @llvm.ctpop.i32(i32 %924) #10
  %926 = trunc i32 %925 to i8
  %927 = and i8 %926, 1
  %928 = xor i8 %927, 1
  store i8 %928, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  store i8 0, i8* %24, align 1, !tbaa !1280
  %929 = lshr i64 %919, 63
  %930 = trunc i64 %929 to i8
  store i8 %930, i8* %25, align 1, !tbaa !1281
  store i8 %922, i8* %26, align 1, !tbaa !1282
  %931 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 8) to i32*)
  %932 = sext i32 %931 to i64
  %933 = load i64, i64* %12, align 8
  %934 = add i64 %933, -480
  %935 = inttoptr i64 %934 to i64*
  store i64 %932, i64* %935
  %936 = ashr i64 %919, 63
  store i64 %936, i64* %40, align 8, !tbaa !1240
  %937 = inttoptr i64 %934 to i64*
  %938 = load i64, i64* %937
  store i64 %938, i64* %9, align 8, !tbaa !1240
  %939 = add i64 %1141, 106
  store i64 %939, i64* %3, align 8
  %940 = sext i64 %938 to i128
  %941 = and i128 %940, -18446744073709551616
  %942 = zext i64 %936 to i128
  %943 = shl nuw i128 %942, 64
  %944 = and i128 %918, 18446744073709551615
  %945 = or i128 %943, %944
  %946 = zext i64 %938 to i128
  %947 = or i128 %941, %946
  %948 = sdiv i128 %945, %947
  %949 = trunc i128 %948 to i64
  %950 = and i128 %948, 18446744073709551615
  %951 = sext i64 %949 to i128
  %952 = and i128 %951, -18446744073709551616
  %953 = or i128 %952, %950
  %954 = icmp eq i128 %948, %953
  br i1 %954, label %960, label %955

; <label>:955:                                    ; preds = %block_405721
  %956 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %939, %struct.Memory* %1128) #14
  %957 = load i64, i64* %12, align 8
  %958 = load i64, i64* %3, align 8
  %959 = load i64, i64* %8, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75

; <label>:960:                                    ; preds = %block_405721
  %961 = srem i128 %945, %947
  %962 = trunc i128 %961 to i64
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75: ; preds = %960, %955
  %963 = phi i64 [ %959, %955 ], [ %962, %960 ]
  %964 = phi i64 [ %958, %955 ], [ %939, %960 ]
  %965 = phi i64 [ %957, %955 ], [ %933, %960 ]
  %966 = phi %struct.Memory* [ %956, %955 ], [ %1128, %960 ]
  %967 = add i64 %965, -16
  %968 = inttoptr i64 %967 to i64*
  %969 = load i64, i64* %968
  store i64 %969, i64* %10, align 8, !tbaa !1240
  %970 = add i64 %965, -360
  %971 = inttoptr i64 %970 to i32*
  %972 = load i32, i32* %971
  %973 = zext i32 %972 to i64
  store i64 %973, i64* %13, align 8, !tbaa !1240
  %974 = shl nuw nsw i64 %973, 3
  %975 = add nuw nsw i64 %974, 4392
  %976 = add i64 %975, %969
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %978, %963
  %980 = add i64 %969, 4392
  %981 = add i64 %980, %974
  %982 = inttoptr i64 %981 to i64*
  store i64 %979, i64* %982
  %983 = inttoptr i64 %970 to i32*
  %984 = load i32, i32* %983
  %985 = add i32 %984, 1
  %986 = load i64, i64* %12, align 8
  %987 = add i64 %986, -360
  %988 = inttoptr i64 %987 to i32*
  store i32 %985, i32* %988
  %989 = add i64 %964, -128
  br label %block_40570b

block_405895:                                     ; preds = %block_405801
  %990 = inttoptr i64 %1220 to i32*
  %991 = load i32, i32* %990
  %992 = sub i32 %991, %1202
  %993 = icmp eq i32 %992, 0
  %994 = select i1 %993, i64 22, i64 49
  %995 = add i64 %1205, %994
  br i1 %993, label %block_4058ab, label %block_4058c6

block_405a69:                                     ; preds = %block_4059b8
  %996 = add i64 %1016, 556
  %997 = inttoptr i64 %996 to i32*
  %998 = load i32, i32* %997
  %999 = add i64 %1016, 560
  %1000 = inttoptr i64 %999 to i32*
  %1001 = load i32, i32* %1000
  %1002 = add i32 %1001, %998
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %7, align 8, !tbaa !1240
  %1004 = inttoptr i64 %999 to i32*
  store i32 %1002, i32* %1004
  %1005 = add i64 %1008, -4
  %1006 = inttoptr i64 %1005 to i32*
  store i32 0, i32* %1006
  br label %block_405a8a

block_4059b8:                                     ; preds = %block_40599b, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %1007 = phi i64 [ %864, %block_40599b ], [ %820, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %1008 = phi i64 [ %854, %block_40599b ], [ %817, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %1009 = phi %struct.Memory* [ %1194, %block_40599b ], [ %797, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %1010 = add i64 %1008, -360
  %1011 = inttoptr i64 %1010 to i32*
  %1012 = load i32, i32* %1011
  %1013 = zext i32 %1012 to i64
  %1014 = add i64 %1008, -16
  %1015 = inttoptr i64 %1014 to i64*
  %1016 = load i64, i64* %1015
  %1017 = add i64 %1016, 540
  %1018 = inttoptr i64 %1017 to i32*
  %1019 = load i32, i32* %1018
  %1020 = icmp ult i32 %1012, %1019
  %1021 = select i1 %1020, i64 22, i64 177
  %1022 = add i64 %1007, %1021
  br i1 %1020, label %block_4059ce, label %block_405a69

block_405293:                                     ; preds = %block_40522a
  %1023 = add i64 %697, 5
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  br label %block_405298

block_405392:                                     ; preds = %block_405386, %block_4054fa
  %1025 = phi i64 [ %1213, %block_405386 ], [ %139, %block_4054fa ]
  %1026 = phi i64 [ %1207, %block_405386 ], [ %131, %block_4054fa ]
  %1027 = phi %struct.Memory* [ %1208, %block_405386 ], [ %133, %block_4054fa ]
  %1028 = add i64 %1026, -364
  %1029 = inttoptr i64 %1028 to i32*
  %1030 = load i32, i32* %1029
  %1031 = add i64 %1026, -16
  %1032 = inttoptr i64 %1031 to i64*
  %1033 = load i64, i64* %1032
  %1034 = add i64 %1033, 624
  %1035 = inttoptr i64 %1034 to i32*
  %1036 = load i32, i32* %1035
  %1037 = icmp ult i32 %1030, %1036
  %1038 = select i1 %1037, i64 22, i64 385
  %1039 = add i64 %1025, %1038
  %1040 = add i64 %1033, 632
  %1041 = inttoptr i64 %1040 to i64*
  %1042 = load i64, i64* %1041
  br i1 %1037, label %block_4053a8, label %block_405513

block_4058ab:                                     ; preds = %block_405895
  %1043 = inttoptr i64 %1222 to i32*
  %1044 = load i32, i32* %1043
  %1045 = sub i32 %1044, %1202
  %1046 = icmp eq i32 %1045, 0
  %1047 = select i1 %1046, i64 22, i64 27
  %1048 = add i64 %995, %1047
  br i1 %1046, label %block_4058c1, label %block_4058c6

block_4055bb:                                     ; preds = %block_40557d
  %1049 = add i64 %123, 540
  %1050 = inttoptr i64 %1049 to i32*
  %1051 = load i32, i32* %1050
  %1052 = shl i32 %1051, 1
  %1053 = zext i32 %1052 to i64
  %1054 = shl nuw nsw i64 %1053, 2
  %1055 = add i64 %1054, %120
  store i64 %1055, i64* %7, align 8, !tbaa !1240
  %1056 = load i64, i64* %6, align 8
  %1057 = add i64 %1054, %1056
  %1058 = load i64, i64* %12, align 8
  %1059 = add i64 %1058, -16
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  %1062 = add i64 %1061, 548
  %1063 = inttoptr i64 %1062 to i32*
  %1064 = load i32, i32* %1063
  %1065 = zext i32 %1064 to i64
  store i64 %1065, i64* %8, align 8, !tbaa !1240
  %1066 = load i64, i64* %7, align 8
  store i64 %1066, i64* %10, align 8, !tbaa !1240
  store i64 %1057, i64* %9, align 8, !tbaa !1240
  %1067 = add i64 %118, 21349
  %1068 = add i64 %118, 80
  %1069 = load i64, i64* %11, align 8, !tbaa !1240
  %1070 = add i64 %1069, -8
  %1071 = inttoptr i64 %1070 to i64*
  store i64 %1068, i64* %1071
  store i64 %1070, i64* %11, align 8, !tbaa !1240
  %1072 = tail call %struct.Memory* @sub_40a920_KeyComp(%struct.State* nonnull %0, i64 %1067, %struct.Memory* %112)
  %1073 = load i64, i64* %12, align 8
  %1074 = add i64 %1073, -408
  %1075 = load i32, i32* %5, align 4
  %1076 = load i64, i64* %3, align 8
  %1077 = inttoptr i64 %1074 to i32*
  store i32 %1075, i32* %1077
  %1078 = inttoptr i64 %1074 to i32*
  %1079 = load i32, i32* %1078
  %1080 = icmp eq i32 %1079, 0
  %1081 = select i1 %1080, i64 19, i64 118
  %1082 = add i64 %1076, %1081
  br i1 %1080, label %block_40561e, label %block_405681

block_4053a8:                                     ; preds = %block_405392
  %1083 = zext i32 %1030 to i64
  %1084 = mul nuw nsw i64 %1083, 24
  %1085 = add i64 %1084, %1042
  %1086 = add i64 %1085, 20
  %1087 = inttoptr i64 %1086 to i32*
  %1088 = load i32, i32* %1087
  %1089 = icmp eq i32 %1088, 0
  %1090 = select i1 %1089, i64 338, i64 36
  %1091 = add i64 %1039, %1090
  br i1 %1089, label %block_4054fa, label %block_4053cc

block_40536d:                                     ; preds = %block_4052b8
  %1092 = add i32 %705, 1
  %1093 = inttoptr i64 %869 to i32*
  store i32 %1092, i32* %1093
  %1094 = add i64 %613, -203
  br label %block_4052a2

block_40520e:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit12
  %1095 = add i64 %81, -16
  %1096 = inttoptr i64 %1095 to i64*
  %1097 = load i64, i64* %1096
  %1098 = add i64 %1097, 600
  %1099 = inttoptr i64 %1098 to i64*
  %1100 = load i64, i64* %1099
  %1101 = add i64 %81, -400
  %1102 = inttoptr i64 %1101 to i64*
  store i64 %1100, i64* %1102
  %1103 = add i64 %81, -360
  %1104 = add i64 %109, 28
  %1105 = inttoptr i64 %1103 to i32*
  store i32 0, i32* %1105
  br label %block_40522a

block_40586d:                                     ; preds = %block_40584a
  %1106 = inttoptr i64 %1222 to i32*
  %1107 = load i32, i32* %1106
  %1108 = add i32 %1107, 1
  %1109 = add i64 %404, 15
  %1110 = inttoptr i64 %1222 to i32*
  store i32 %1108, i32* %1110
  br label %block_40587c

block_4057bc:                                     ; preds = %block_40570b
  %1111 = add i64 %1127, -352
  %1112 = add i64 %1127, -128
  %1113 = add i64 %1135, 588
  %1114 = inttoptr i64 %1113 to i32*
  %1115 = load i32, i32* %1114
  %1116 = zext i32 %1115 to i64
  %1117 = add i64 %1141, 34
  %1118 = load i64, i64* %11, align 8, !tbaa !1240
  %1119 = add i64 %1118, -8
  %1120 = inttoptr i64 %1119 to i64*
  store i64 %1117, i64* %1120
  %1121 = inttoptr i64 %1119 to i64*
  %1122 = load i64, i64* %1121
  store i64 %1122, i64* %3, align 8, !alias.scope !1846, !noalias !1849
  store i64 %1118, i64* %11, align 8, !alias.scope !1846, !noalias !1849
  %1123 = tail call i64 @memcpy(i64 %1112, i64 %1111, i64 %1116), !noalias !1846
  %1124 = load i64, i64* %3, align 8
  %1125 = load i64, i64* %12, align 8
  br label %block_4057e3

block_40570b:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75, %block_4056ee
  %1126 = phi i64 [ %415, %block_4056ee ], [ %989, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75 ]
  %1127 = phi i64 [ %405, %block_4056ee ], [ %986, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75 ]
  %1128 = phi %struct.Memory* [ %1072, %block_4056ee ], [ %966, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit75 ]
  %1129 = add i64 %1127, -360
  %1130 = inttoptr i64 %1129 to i32*
  %1131 = load i32, i32* %1130
  %1132 = zext i32 %1131 to i64
  %1133 = add i64 %1127, -16
  %1134 = inttoptr i64 %1133 to i64*
  %1135 = load i64, i64* %1134
  %1136 = add i64 %1135, 540
  %1137 = inttoptr i64 %1136 to i32*
  %1138 = load i32, i32* %1137
  %1139 = icmp ult i32 %1131, %1138
  %1140 = select i1 %1139, i64 22, i64 177
  %1141 = add i64 %1126, %1140
  br i1 %1139, label %block_405721, label %block_4057bc

block_40558a:                                     ; preds = %block_40557d
  %1142 = add i64 %123, 588
  %1143 = inttoptr i64 %1142 to i32*
  %1144 = load i32, i32* %1143
  %1145 = zext i32 %1144 to i64
  %1146 = add i64 %118, 34
  %1147 = load i64, i64* %11, align 8, !tbaa !1240
  %1148 = add i64 %1147, -8
  %1149 = inttoptr i64 %1148 to i64*
  store i64 %1146, i64* %1149
  %1150 = inttoptr i64 %1148 to i64*
  %1151 = load i64, i64* %1150
  store i64 %1151, i64* %3, align 8, !alias.scope !1851, !noalias !1854
  store i64 %1147, i64* %11, align 8, !alias.scope !1851, !noalias !1854
  %1152 = tail call i64 @memcpy(i64 %120, i64 %119, i64 %1145), !noalias !1851
  %1153 = load i64, i64* %12, align 8
  %1154 = add i64 %1153, -356
  %1155 = load i64, i64* %3, align 8
  %1156 = add i64 %1155, 10
  %1157 = inttoptr i64 %1154 to i32*
  store i32 0, i32* %1157
  br label %block_4057e3

block_405a8a:                                     ; preds = %block_405a69, %block_4051e3, %block_4056c3, %block_405970
  %1158 = phi i64 [ %1008, %block_405a69 ], [ %198, %block_405970 ], [ %476, %block_4056c3 ], [ %676, %block_4051e3 ]
  %1159 = phi %struct.Memory* [ %1009, %block_405a69 ], [ %1194, %block_405970 ], [ %1072, %block_4056c3 ], [ %2, %block_4051e3 ]
  %1160 = add i64 %1158, -4
  %1161 = inttoptr i64 %1160 to i32*
  %1162 = load i32, i32* %1161
  %1163 = zext i32 %1162 to i64
  store i64 %1163, i64* %6, align 8, !tbaa !1240
  %1164 = load i64, i64* %11, align 8
  %1165 = add i64 %1164, 512
  %1166 = icmp ugt i64 %1164, -513
  %1167 = zext i1 %1166 to i8
  store i8 %1167, i8* %21, align 1, !tbaa !1264
  %1168 = trunc i64 %1165 to i32
  %1169 = and i32 %1168, 255
  %1170 = tail call i32 @llvm.ctpop.i32(i32 %1169) #10
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = xor i8 %1172, 1
  store i8 %1173, i8* %22, align 1, !tbaa !1278
  %1174 = xor i64 %1165, %1164
  %1175 = lshr i64 %1174, 4
  %1176 = trunc i64 %1175 to i8
  %1177 = and i8 %1176, 1
  store i8 %1177, i8* %23, align 1, !tbaa !1279
  %1178 = icmp eq i64 %1165, 0
  %1179 = zext i1 %1178 to i8
  store i8 %1179, i8* %24, align 1, !tbaa !1280
  %1180 = lshr i64 %1165, 63
  %1181 = trunc i64 %1180 to i8
  store i8 %1181, i8* %25, align 1, !tbaa !1281
  %1182 = lshr i64 %1164, 63
  %1183 = xor i64 %1180, %1182
  %1184 = add nuw nsw i64 %1183, %1180
  %1185 = icmp eq i64 %1184, 2
  %1186 = zext i1 %1185 to i8
  store i8 %1186, i8* %26, align 1, !tbaa !1282
  %1187 = add i64 %1164, 520
  %1188 = inttoptr i64 %1165 to i64*
  %1189 = load i64, i64* %1188
  store i64 %1189, i64* %12, align 8, !tbaa !1240
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %3, align 8, !tbaa !1240
  %1192 = add i64 %1164, 528
  store i64 %1192, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %1159

block_405801:                                     ; preds = %block_4057e3, %block_40587c
  %1193 = phi i64 [ %1225, %block_4057e3 ], [ %130, %block_40587c ]
  %1194 = phi %struct.Memory* [ %1218, %block_4057e3 ], [ %125, %block_40587c ]
  %1195 = inttoptr i64 %1224 to i32*
  %1196 = load i32, i32* %1195
  %1197 = zext i32 %1196 to i64
  %1198 = inttoptr i64 %1227 to i64*
  %1199 = load i64, i64* %1198
  %1200 = add i64 %1199, 624
  %1201 = inttoptr i64 %1200 to i32*
  %1202 = load i32, i32* %1201
  %1203 = icmp ult i32 %1196, %1202
  %1204 = select i1 %1203, i64 22, i64 148
  %1205 = add i64 %1193, %1204
  br i1 %1203, label %block_405817, label %block_405895

block_405386.loopexit:                            ; preds = %block_4052a2
  br label %block_405386

block_405386:                                     ; preds = %block_405386.loopexit, %block_4052dc
  %1206 = phi i64 [ %278, %block_4052dc ], [ %714, %block_405386.loopexit ]
  %1207 = phi i64 [ %271, %block_4052dc ], [ %866, %block_405386.loopexit ]
  %1208 = phi %struct.Memory* [ %703, %block_4052dc ], [ %703, %block_405386.loopexit ]
  %1209 = add i64 %1207, -368
  %1210 = inttoptr i64 %1209 to i32*
  %1211 = load i32, i32* %1210
  %1212 = add i64 %1207, -364
  %1213 = add i64 %1206, 12
  %1214 = inttoptr i64 %1212 to i32*
  store i32 %1211, i32* %1214
  br label %block_405392

block_4057e3:                                     ; preds = %block_40558a, %block_4057bc, %block_40567c
  %1215 = phi i64 [ %1153, %block_40558a ], [ %1125, %block_4057bc ], [ %1073, %block_40567c ]
  %1216 = phi i64 [ %1156, %block_40558a ], [ %1124, %block_4057bc ], [ %279, %block_40567c ]
  %1217 = phi i64 [ 557, %block_40558a ], [ 5, %block_4057bc ], [ 5, %block_40567c ]
  %1218 = phi %struct.Memory* [ %112, %block_40558a ], [ %1128, %block_4057bc ], [ %586, %block_40567c ]
  %1219 = add i64 %1216, %1217
  %1220 = add i64 %1215, -380
  %1221 = inttoptr i64 %1220 to i32*
  store i32 0, i32* %1221
  %1222 = add i64 %1215, -384
  %1223 = inttoptr i64 %1222 to i32*
  store i32 0, i32* %1223
  %1224 = add i64 %1215, -360
  %1225 = add i64 %1219, 30
  %1226 = inttoptr i64 %1224 to i32*
  store i32 0, i32* %1226
  %1227 = add i64 %1215, -16
  br label %block_405801

block_405681:                                     ; preds = %block_4055bb
  store i64 1, i64* %8, align 8, !tbaa !1240
  %1228 = add i64 %1073, -128
  %1229 = add i64 %1073, -16
  %1230 = inttoptr i64 %1229 to i64*
  %1231 = load i64, i64* %1230
  %1232 = add i64 %1231, 588
  %1233 = inttoptr i64 %1232 to i32*
  %1234 = load i32, i32* %1233
  %1235 = zext i32 %1234 to i64
  %1236 = add i64 %1231, 4240
  %1237 = inttoptr i64 %1236 to i64*
  %1238 = load i64, i64* %1237
  %1239 = add i64 %1073, -464
  %1240 = inttoptr i64 %1239 to i64*
  store i64 %1238, i64* %1240
  store i64 %1228, i64* %10, align 8, !tbaa !1240
  %1241 = inttoptr i64 %1239 to i64*
  %1242 = load i64, i64* %1241
  store i64 %1242, i64* %7, align 8, !tbaa !1240
  %1243 = add i64 %1082, 56
  %1244 = load i64, i64* %11, align 8, !tbaa !1240
  %1245 = add i64 %1244, -8
  %1246 = inttoptr i64 %1245 to i64*
  store i64 %1243, i64* %1246
  %1247 = inttoptr i64 %1245 to i64*
  %1248 = load i64, i64* %1247
  store i64 %1248, i64* %3, align 8, !alias.scope !1856, !noalias !1859
  store i64 %1244, i64* %11, align 8, !alias.scope !1856, !noalias !1859
  %1249 = tail call i64 @fwrite(i64 %1228, i64 %1235, i64 1, i64 %1242)
  %1250 = load i64, i64* %3, align 8
  %1251 = add i64 %1249, -1
  %1252 = icmp eq i64 %1251, 0
  %1253 = select i1 %1252, i64 53, i64 10
  %1254 = add i64 %1250, %1253
  br i1 %1252, label %block_4056ee, label %block_4056c3
}

; Function Attrs: noinline
define %struct.Memory* @sub_4090c0_WriteOne64Tuple(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4090c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = load i64, i64* %13, align 8
  %16 = load i64, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %13, align 8, !tbaa !1240
  %19 = add i64 %16, -72
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 -9223372036854775808, i64* %14, align 8, !tbaa !1240
  %26 = add i64 %16, -16
  %27 = load i64, i64* %11, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %16, -24
  %30 = load i64, i64* %10, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %16, -28
  %33 = load i32, i32* %6, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = add i64 %16, -40
  %36 = load i64, i64* %8, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %16, -48
  %39 = inttoptr i64 %38 to i64*
  store i64 -9223372036854775808, i64* %39
  %40 = inttoptr i64 %35 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %11, align 8, !tbaa !1240
  %42 = inttoptr i64 %26 to i64*
  %43 = load i64, i64* %42
  store i64 %43, i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5162), i64* %10, align 8, !tbaa !1240
  %44 = add i64 %1, 65
  %45 = add i64 %16, -80
  %46 = inttoptr i64 %45 to i64*
  store i64 %44, i64* %46
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !alias.scope !1861, !noalias !1864
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  %52 = add i64 %16, -64
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %16, -56
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56
  %58 = add i64 %16, -48
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %16, -40
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %16, -32
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %16, -24
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  %70 = add i64 %16, -16
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %16, -8
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = inttoptr i64 %16 to i64*
  %77 = load i64, i64* %76
  %78 = inttoptr i64 %45 to i64*
  %79 = load i64, i64* %78
  store i64 %19, i64* %12, align 8, !alias.scope !1861, !noalias !1864
  %80 = tail call i64 @fprintf(i64 %41, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5162), i64 %43, i64 %36, i64 -9223372036854775808, i64 %49, i64 %51, i64 %54, i64 %57, i64 %60, i64 %63, i64 %66, i64 %69, i64 %72, i64 %75, i64 %77), !noalias !1861
  %81 = load i64, i64* %13, align 8
  %82 = add i64 %81, -44
  %83 = inttoptr i64 %82 to i32*
  store i32 0, i32* %83
  %84 = add i64 %81, -48
  %85 = trunc i64 %80 to i32
  %86 = add i64 %79, 10
  %87 = inttoptr i64 %84 to i32*
  store i32 %85, i32* %87
  %88 = load i64, i64* %47, align 8
  %89 = load i64, i64* %8, align 8
  %90 = load i64, i64* %14, align 8
  %91 = load i64, i64* %48, align 8
  %92 = load i64, i64* %13, align 8
  %93 = add i64 %92, -56
  %94 = add i64 %92, -52
  %95 = add i64 %92, -40
  %96 = add i64 %92, -44
  br label %block_40910b

block_40915e:                                     ; preds = %block_409146, %block_409129
  %97 = phi i64 [ %242, %block_409146 ], [ %201, %block_409129 ]
  %98 = phi %struct.Memory* [ %149, %block_409146 ], [ %149, %block_409129 ]
  %99 = inttoptr i64 %95 to i64*
  %100 = load i64, i64* %99
  %101 = lshr i64 %100, 1
  %102 = inttoptr i64 %95 to i64*
  store i64 %101, i64* %102
  %103 = inttoptr i64 %96 to i32*
  %104 = load i32, i32* %103
  %105 = add i32 %104, 1
  %106 = inttoptr i64 %96 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %97, -83
  br label %block_40910b

block_409178:                                     ; preds = %block_40910b
  %108 = load i64, i64* %12, align 8
  %109 = add i64 %108, 64
  %110 = icmp ugt i64 %108, -65
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %20, align 1, !tbaa !1264
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #10
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !1278
  %118 = xor i64 %109, %108
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %22, align 1, !tbaa !1279
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %23, align 1, !tbaa !1280
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %24, align 1, !tbaa !1281
  %126 = lshr i64 %108, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %124
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %25, align 1, !tbaa !1282
  %131 = add i64 %108, 72
  %132 = inttoptr i64 %109 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %13, align 8, !tbaa !1240
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %3, align 8, !tbaa !1240
  %136 = add i64 %108, 80
  store i64 %136, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %149

block_409117:                                     ; preds = %block_40910b
  %137 = add i64 %148, -16
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %148, -40
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = and i64 %142, %139
  %144 = icmp eq i64 %143, 0
  %145 = select i1 %144, i64 47, i64 18
  %146 = add i64 %159, %145
  br i1 %144, label %block_409146, label %block_409129

block_40910b:                                     ; preds = %block_40915e, %block_4090c0
  %147 = phi i64 [ %86, %block_4090c0 ], [ %107, %block_40915e ]
  %148 = phi i64 [ %81, %block_4090c0 ], [ %92, %block_40915e ]
  %149 = phi %struct.Memory* [ %2, %block_4090c0 ], [ %98, %block_40915e ]
  %150 = add i64 %148, -44
  %151 = inttoptr i64 %150 to i32*
  %152 = load i32, i32* %151
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %7, align 8, !tbaa !1240
  %154 = add i64 %148, -20
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = icmp ult i32 %152, %156
  %158 = select i1 %157, i64 12, i64 109
  %159 = add i64 %147, %158
  br i1 %157, label %block_409117, label %block_409178

block_409129:                                     ; preds = %block_409117
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3579), i64* %10, align 8, !tbaa !1240
  %160 = add i64 %148, -32
  %161 = inttoptr i64 %160 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %11, align 8, !tbaa !1240
  %163 = add i64 %146, 21
  %164 = load i64, i64* %12, align 8, !tbaa !1240
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  store i64 %163, i64* %166
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  %169 = add i64 %164, 8
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  %172 = add i64 %164, 16
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  %175 = add i64 %164, 24
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %164, 32
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %164, 40
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %164, 48
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %164, 56
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %164, 64
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %164, 72
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = inttoptr i64 %165 to i64*
  %197 = load i64, i64* %196
  store i64 %164, i64* %12, align 8, !alias.scope !1866, !noalias !1869
  %198 = tail call i64 @fprintf(i64 %162, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3579), i64 %88, i64 %89, i64 %90, i64 %91, i64 %168, i64 %171, i64 %174, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195), !noalias !1866
  %199 = trunc i64 %198 to i32
  %200 = inttoptr i64 %94 to i32*
  store i32 %199, i32* %200
  %201 = add i64 %197, 32
  br label %block_40915e

block_409146:                                     ; preds = %block_409117
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5167), i64* %10, align 8, !tbaa !1240
  %202 = add i64 %148, -32
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %11, align 8, !tbaa !1240
  %205 = add i64 %146, 21
  %206 = load i64, i64* %12, align 8, !tbaa !1240
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %205, i64* %208
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  %211 = add i64 %206, 8
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %206, 16
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %206, 24
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %206, 32
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %206, 40
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %206, 48
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %206, 56
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %206, 64
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %206, 72
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = inttoptr i64 %207 to i64*
  %239 = load i64, i64* %238
  store i64 %206, i64* %12, align 8, !alias.scope !1871, !noalias !1874
  %240 = tail call i64 @fprintf(i64 %204, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5167), i64 %88, i64 %89, i64 %90, i64 %91, i64 %210, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237), !noalias !1871
  %241 = trunc i64 %240 to i32
  %242 = add i64 %239, 3
  %243 = inttoptr i64 %93 to i32*
  store i32 %241, i32* %243
  br label %block_40915e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4025c7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %22 = load i64, i64* %11, align 8
  %23 = load i64, i64* %19, align 8, !alias.scope !1876, !noalias !1879
  %24 = add i64 %1, 35
  br label %block_4025c7

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_40269c, %block_4026d0.loopexit
  %25 = phi i64 [ %288, %block_40269c ], [ %57, %block_4026d0.loopexit ]
  %26 = phi i64 [ %285, %block_40269c ], [ %50, %block_4026d0.loopexit ]
  %27 = phi %struct.Memory* [ %287, %block_40269c ], [ %51, %block_4026d0.loopexit ]
  %28 = add i64 %26, -1076
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29
  %31 = add i32 %30, 1
  %32 = inttoptr i64 %28 to i32*
  store i32 %31, i32* %32
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %33 = add i64 %26, -1056
  %34 = add i64 %26, -1064
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %8, align 8, !tbaa !1240
  %37 = add i64 %25, -558
  %38 = load i64, i64* %18, align 8, !tbaa !1240
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %37, i64* %40
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %4, align 8, !alias.scope !1881, !noalias !1884
  store i64 %38, i64* %18, align 8, !alias.scope !1881, !noalias !1884
  %43 = tail call i64 @fgets(i64 %33, i64 1024, i64 %36)
  %44 = load i64, i64* %4, align 8
  %45 = icmp eq i64 %43, 0
  %46 = select i1 %45, i64 578, i64 10
  %47 = add i64 %44, %46
  %48 = load i64, i64* %11, align 8
  br i1 %45, label %block_4026e4, label %block_4024ac

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %49 = phi i64 [ %237, %block_4024ac ], [ %258, %block_4026a6 ]
  %50 = phi i64 [ %48, %block_4024ac ], [ %243, %block_4026a6 ]
  %51 = phi %struct.Memory* [ %27, %block_4024ac ], [ %241, %block_4026a6 ]
  %52 = add i64 %50, -1088
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = icmp eq i64 %54, 0
  %56 = select i1 %55, i64 516, i64 14
  %57 = add i64 %49, %56
  br i1 %55, label %block_4026d0.loopexit, label %block_4024da

block_4026e4:                                     ; preds = %block_4026d0
  %58 = add i64 %48, -1064
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %47, 12
  %62 = load i64, i64* %18, align 8, !tbaa !1240
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64
  %65 = inttoptr i64 %63 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %4, align 8, !alias.scope !1886, !noalias !1889
  store i64 %62, i64* %18, align 8, !alias.scope !1886, !noalias !1889
  %67 = tail call i64 @fclose(i64 %60), !noalias !1886
  %68 = load i64, i64* %11, align 8
  %69 = add i64 %68, -24
  %70 = load i64, i64* %4, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %72, 40
  %74 = inttoptr i64 %73 to i8*
  %75 = load i8, i8* %74
  %76 = sext i8 %75 to i32
  %77 = add nsw i32 %76, -65
  %78 = zext i32 %77 to i64
  %79 = lshr i32 %77, 31
  store i64 %78, i64* %10, align 8, !tbaa !1240
  %80 = add nsw i32 %76, -87
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %7, align 8, !tbaa !1240
  %82 = icmp ult i32 %77, 22
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %12, align 1, !tbaa !1264
  %84 = and i32 %80, 255
  %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #10
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  store i8 %88, i8* %13, align 1, !tbaa !1278
  %89 = xor i32 %77, 16
  %90 = xor i32 %89, %80
  %91 = lshr i32 %90, 4
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %14, align 1, !tbaa !1279
  %94 = icmp eq i32 %80, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %15, align 1, !tbaa !1280
  %96 = lshr i32 %80, 31
  %97 = trunc i32 %96 to i8
  store i8 %97, i8* %16, align 1, !tbaa !1281
  %98 = xor i32 %96, %79
  %99 = add nuw nsw i32 %98, %79
  %100 = icmp eq i32 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %17, align 1, !tbaa !1282
  %102 = add i64 %68, -1148
  %103 = trunc i64 %67 to i32
  %104 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %104
  %105 = add i64 %68, -1160
  %106 = inttoptr i64 %105 to i64*
  store i64 %78, i64* %106
  %107 = add i64 %68, -1164
  %108 = inttoptr i64 %107 to i32*
  store i32 %80, i32* %108
  %109 = or i1 %94, %82
  %110 = select i1 %109, i64 41, i64 209
  %111 = add i64 %70, %110
  br i1 %109, label %block_402719, label %block_4027c1

block_4024ff:                                     ; preds = %block_4024da
  %112 = load i64, i64* %11, align 8
  %113 = add i64 %112, -1056
  %114 = add i64 %112, -1088
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %9, align 8, !tbaa !1240
  %117 = add i64 %270, 19
  %118 = load i64, i64* %18, align 8, !tbaa !1240
  %119 = add i64 %118, -8
  %120 = inttoptr i64 %119 to i64*
  store i64 %117, i64* %120
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %4, align 8, !alias.scope !1891, !noalias !1894
  store i64 %118, i64* %18, align 8, !alias.scope !1891, !noalias !1894
  %123 = tail call i64 @strstr(i64 %113, i64 %116)
  %124 = load i64, i64* %4, align 8
  %125 = icmp eq i64 %123, 0
  %126 = select i1 %125, i64 399, i64 10
  %127 = add i64 %124, %126
  br i1 %125, label %block_4026a6, label %block_40251c

block_4025c7:                                     ; preds = %block_40255a, %3
  %128 = phi i64 [ %23, %3 ], [ 4203975, %block_40255a ]
  %129 = phi i64 [ %22, %3 ], [ %193, %block_40255a ]
  %130 = phi i64 [ %24, %3 ], [ 4204010, %block_40255a ]
  %131 = phi %struct.Memory* [ %2, %3 ], [ %51, %block_40255a ]
  %132 = add i64 %129, -1096
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %129, -24
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %137, 16
  %139 = load i64, i64* %18, align 8, !tbaa !1240
  %140 = add i64 %139, -8
  %141 = inttoptr i64 %140 to i64*
  store i64 %130, i64* %141
  %142 = load i64, i64* %20, align 8, !alias.scope !1876, !noalias !1879
  %143 = load i64, i64* %21, align 8, !alias.scope !1876, !noalias !1879
  %144 = inttoptr i64 %139 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %139, 8
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  %149 = add i64 %139, 16
  %150 = inttoptr i64 %149 to i64*
  %151 = load i64, i64* %150
  %152 = add i64 %139, 24
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %139, 32
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  %158 = add i64 %139, 40
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159
  %161 = add i64 %139, 48
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %139, 56
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %139, 64
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %139, 72
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = inttoptr i64 %140 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %4, align 8, !alias.scope !1876, !noalias !1879
  store i64 %139, i64* %18, align 8, !alias.scope !1876, !noalias !1879
  %175 = tail call i64 @__isoc99_sscanf(i64 %134, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %138, i64 %128, i64 %142, i64 %143, i64 %145, i64 %148, i64 %151, i64 %154, i64 %157, i64 %160, i64 %163, i64 %166, i64 %169, i64 %172), !noalias !1876
  %176 = load i64, i64* %11, align 8
  %177 = add i64 %176, -1132
  %178 = trunc i64 %175 to i32
  %179 = load i64, i64* %4, align 8
  %180 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %180
  %181 = add i64 %179, 178
  br label %block_40269c

block_40251c:                                     ; preds = %block_4024ff
  %182 = load i64, i64* %11, align 8
  %183 = add i64 %182, -1088
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = add i64 %127, 12
  %187 = load i64, i64* %18, align 8, !tbaa !1240
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %186, i64* %189
  %190 = inttoptr i64 %188 to i64*
  %191 = load i64, i64* %190
  store i64 %191, i64* %4, align 8, !alias.scope !1896, !noalias !1899
  store i64 %187, i64* %18, align 8, !alias.scope !1896, !noalias !1899
  %192 = tail call i64 @strlen(i64 %185)
  %193 = load i64, i64* %11, align 8
  %194 = add i64 %193, -1055
  %195 = add i64 %194, %192
  %196 = load i64, i64* %4, align 8
  %197 = add i64 %193, -1096
  %198 = inttoptr i64 %197 to i64*
  store i64 %195, i64* %198
  %199 = add i64 %193, -1080
  %200 = inttoptr i64 %199 to i32*
  %201 = load i32, i32* %200
  %202 = zext i32 %201 to i64
  %203 = add nsw i64 %202, -6
  store i64 %203, i64* %10, align 8, !tbaa !1240
  %204 = icmp ult i32 %201, 6
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %12, align 1, !tbaa !1264
  %206 = trunc i64 %203 to i32
  %207 = and i32 %206, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #10
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %13, align 1, !tbaa !1278
  %212 = xor i64 %203, %202
  %213 = lshr i64 %212, 4
  %214 = trunc i64 %213 to i8
  %215 = and i8 %214, 1
  store i8 %215, i8* %14, align 1, !tbaa !1279
  %216 = icmp eq i64 %203, 0
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %15, align 1, !tbaa !1280
  %218 = lshr i64 %203, 63
  %219 = trunc i64 %218 to i8
  store i8 %219, i8* %16, align 1, !tbaa !1281
  store i8 0, i8* %17, align 1, !tbaa !1282
  %220 = add i64 %193, -1112
  %221 = inttoptr i64 %220 to i64*
  store i64 %202, i64* %221
  %222 = add i64 %193, -1120
  %223 = inttoptr i64 %222 to i64*
  store i64 %203, i64* %223
  %224 = or i1 %216, %204
  %225 = select i1 %224, i64 50, i64 372
  %226 = add i64 %196, %225
  br i1 %224, label %block_40255a, label %block_40269c

block_4024ac:                                     ; preds = %block_4026d0
  %227 = add i64 %48, -1080
  %228 = inttoptr i64 %227 to i32*
  store i32 0, i32* %228
  %229 = inttoptr i64 %227 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  %232 = shl nsw i64 %231, 3
  %233 = add i64 %232, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %48, -1088
  %237 = add i64 %47, 32
  %238 = inttoptr i64 %236 to i64*
  store i64 %235, i64* %238
  br label %block_4024cc

block_4026a6:                                     ; preds = %block_4024da, %block_4024ff
  %239 = phi i64 [ %127, %block_4024ff ], [ %270, %block_4024da ]
  %240 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %241 = phi %struct.Memory* [ %51, %block_4024ff ], [ %51, %block_4024da ]
  %242 = add i64 %239, %240
  %243 = load i64, i64* %11, align 8
  %244 = add i64 %243, -1080
  %245 = inttoptr i64 %244 to i32*
  %246 = load i32, i32* %245
  %247 = add i32 %246, 1
  %248 = inttoptr i64 %244 to i32*
  store i32 %247, i32* %248
  %249 = inttoptr i64 %244 to i32*
  %250 = load i32, i32* %249
  %251 = sext i32 %250 to i64
  %252 = shl nsw i64 %251, 3
  %253 = add i64 %252, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %254 = inttoptr i64 %253 to i64*
  %255 = load i64, i64* %254
  %256 = add i64 %243, -1088
  %257 = inttoptr i64 %256 to i64*
  store i64 %255, i64* %257
  %258 = add i64 %242, -474
  br label %block_4024cc

block_4024da:                                     ; preds = %block_4024cc
  %259 = add i64 %50, -1056
  %260 = add i64 %57, 22
  %261 = load i64, i64* %18, align 8, !tbaa !1240
  %262 = add i64 %261, -8
  %263 = inttoptr i64 %262 to i64*
  store i64 %260, i64* %263
  %264 = inttoptr i64 %262 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %4, align 8, !alias.scope !1901, !noalias !1904
  store i64 %261, i64* %18, align 8, !alias.scope !1901, !noalias !1904
  %266 = tail call i64 @strstr(i64 %259, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %267 = load i64, i64* %4, align 8
  %268 = icmp eq i64 %266, 0
  %269 = select i1 %268, i64 15, i64 10
  %270 = add i64 %267, %269
  br i1 %268, label %block_4024ff, label %block_4026a6

block_402719:                                     ; preds = %block_4026e4
  %271 = load i64, i64* %11, align 8
  %272 = add i64 %271, -1160
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273
  store i64 %274, i64* %6, align 8, !tbaa !1240
  %275 = shl i64 %274, 3
  %276 = add i64 %275, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %7, align 8, !tbaa !1240
  store i64 %278, i64* %4, align 8, !tbaa !1240
  switch i64 %278, label %295 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_40255a:                                     ; preds = %block_40251c
  %279 = inttoptr i64 %220 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %6, align 8, !tbaa !1240
  %281 = shl i64 %280, 3
  %282 = add i64 %281, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %283 = inttoptr i64 %282 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %7, align 8, !tbaa !1240
  store i64 %284, i64* %4, align 8, !tbaa !1240
  switch i64 %284, label %303 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5
  ]

block_40269c:                                     ; preds = %block_40251c, %block_4025c7
  %285 = phi i64 [ %176, %block_4025c7 ], [ %193, %block_40251c ]
  %286 = phi i64 [ %181, %block_4025c7 ], [ %226, %block_40251c ]
  %287 = phi %struct.Memory* [ %131, %block_4025c7 ], [ %51, %block_40251c ]
  %288 = add i64 %286, 52
  br label %block_4026d0

block_4027c1:                                     ; preds = %block_402719, %block_4026e4
  %289 = phi i64 [ 4204481, %block_402719 ], [ %111, %block_4026e4 ]
  %290 = tail call %struct.Memory* @sub_4027c1_def_402728(%struct.State* nonnull %0, i64 %289, %struct.Memory* %27)
  ret %struct.Memory* %290

block_40279f:                                     ; preds = %block_402719
  %291 = tail call %struct.Memory* @sub_40279f(%struct.State* nonnull %0, i64 4204447, %struct.Memory* %27)
  ret %struct.Memory* %291

block_40272a:                                     ; preds = %block_402719
  %292 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %27)
  ret %struct.Memory* %292

block_402778:                                     ; preds = %block_402719
  %293 = tail call %struct.Memory* @sub_402778(%struct.State* nonnull %0, i64 4204408, %struct.Memory* %27)
  ret %struct.Memory* %293

block_402751:                                     ; preds = %block_402719
  %294 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %27)
  ret %struct.Memory* %294

; <label>:295:                                    ; preds = %block_402719
  %296 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %278, %struct.Memory* %27)
  ret %struct.Memory* %296

block_40256b:                                     ; preds = %block_40255a
  %297 = tail call %struct.Memory* @sub_40256b(%struct.State* nonnull %0, i64 4203883, %struct.Memory* %51)
  ret %struct.Memory* %297

block_4025fa:                                     ; preds = %block_40255a
  %298 = tail call %struct.Memory* @sub_4025fa(%struct.State* nonnull %0, i64 4204026, %struct.Memory* %51)
  ret %struct.Memory* %298

block_402673:                                     ; preds = %block_40255a
  %299 = tail call %struct.Memory* @sub_402673(%struct.State* nonnull %0, i64 4204147, %struct.Memory* %51)
  ret %struct.Memory* %299

block_402628:                                     ; preds = %block_40255a
  %300 = tail call %struct.Memory* @sub_402628(%struct.State* nonnull %0, i64 4204072, %struct.Memory* %51)
  ret %struct.Memory* %300

block_4025f5:                                     ; preds = %block_40255a
  %301 = tail call %struct.Memory* @sub_4025f5(%struct.State* nonnull %0, i64 4204021, %struct.Memory* %51)
  ret %struct.Memory* %301

block_402599:                                     ; preds = %block_40255a
  %302 = tail call %struct.Memory* @sub_402599(%struct.State* nonnull %0, i64 4203929, %struct.Memory* %51)
  ret %struct.Memory* %302

; <label>:303:                                    ; preds = %block_40255a
  %304 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %284, %struct.Memory* %51)
  ret %struct.Memory* %304
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40ba40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40ba40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %12, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  %22 = load i64, i64* %16, align 8
  %23 = add i64 %19, -16
  %24 = inttoptr i64 %23 to i64*
  store i64 %22, i64* %24
  %25 = load i64, i64* %9, align 8
  store i64 %25, i64* %17, align 8, !tbaa !1240
  %26 = load i64, i64* %15, align 8
  %27 = add i64 %19, -24
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = load i64, i64* %14, align 8
  %30 = add i64 %19, -32
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  store i64 ptrtoint (%seg_60ee00__init_array_type* @seg_60ee00__init_array to i64), i64* %14, align 8, !tbaa !1240
  %32 = load i64, i64* %13, align 8
  %33 = add i64 %19, -40
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = load i64, i64* %8, align 8
  %36 = add i64 %19, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %15, align 8, !tbaa !1240
  %40 = load i64, i64* %10, align 8
  store i64 %40, i64* %16, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 ashr (i64 sub (i64 add (i64 ptrtoint (%seg_60ee00__init_array_type* @seg_60ee00__init_array to i64), i64 8), i64 ptrtoint (%seg_60ee00__init_array_type* @seg_60ee00__init_array to i64)), i64 3), i64* %13, align 8, !tbaa !1240
  %47 = add i64 %1, -44768
  %48 = add i64 %1, 49
  %49 = add i64 %19, -64
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50
  store i64 %49, i64* %12, align 8, !tbaa !1240
  %51 = tail call %struct.Memory* @sub_400b60__init_proc(%struct.State* nonnull %0, i64 %47, %struct.Memory* %2)
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %3, align 8
  %54 = icmp eq i64 %52, 0
  %55 = select i1 %54, i64 37, i64 5
  %56 = add i64 %53, %55
  br i1 %54, label %block_40ba96, label %block_40ba76

block_40ba96.loopexit:                            ; preds = %block_40ba80
  br label %block_40ba96

block_40ba96:                                     ; preds = %block_40ba96.loopexit, %block_40ba40
  %57 = phi %struct.Memory* [ %51, %block_40ba40 ], [ %119, %block_40ba96.loopexit ]
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %58, 8
  %60 = icmp ugt i64 %58, -9
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %41, align 1, !tbaa !1264
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #10
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %42, align 1, !tbaa !1278
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %43, align 1, !tbaa !1279
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %44, align 1, !tbaa !1280
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %45, align 1, !tbaa !1281
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %46, align 1, !tbaa !1282
  %81 = add i64 %58, 16
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = add i64 %58, 24
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %13, align 8, !tbaa !1240
  %87 = add i64 %58, 32
  %88 = inttoptr i64 %84 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %14, align 8, !tbaa !1240
  %90 = add i64 %58, 40
  %91 = inttoptr i64 %87 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %15, align 8, !tbaa !1240
  %93 = add i64 %58, 48
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %16, align 8, !tbaa !1240
  %96 = add i64 %58, 56
  %97 = inttoptr i64 %93 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %17, align 8, !tbaa !1240
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %3, align 8, !tbaa !1240
  %101 = add i64 %58, 64
  store i64 %101, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %57

block_40ba76:                                     ; preds = %block_40ba40
  store i64 0, i64* %8, align 8, !tbaa !1240
  store i8 0, i8* %41, align 1, !tbaa !1264
  store i8 1, i8* %42, align 1, !tbaa !1278
  store i8 1, i8* %44, align 1, !tbaa !1280
  store i8 0, i8* %45, align 1, !tbaa !1281
  store i8 0, i8* %46, align 1, !tbaa !1282
  store i8 0, i8* %43, align 1, !tbaa !1279
  %102 = add i64 %56, 10
  br label %block_40ba80

block_40ba80:                                     ; preds = %block_40ba80, %block_40ba76
  %103 = phi i64 [ 0, %block_40ba76 ], [ %122, %block_40ba80 ]
  %104 = phi i64 [ %102, %block_40ba76 ], [ %150, %block_40ba80 ]
  %105 = phi %struct.Memory* [ %51, %block_40ba76 ], [ %119, %block_40ba80 ]
  %106 = load i64, i64* %17, align 8
  store i64 %106, i64* %9, align 8, !tbaa !1240
  %107 = load i64, i64* %16, align 8
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %108 = load i32, i32* %7, align 4
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %110 = load i64, i64* %14, align 8
  %111 = shl i64 %103, 3
  %112 = add i64 %111, %110
  %113 = add i64 %104, 13
  %114 = load i64, i64* %12, align 8, !tbaa !1240
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %117 = inttoptr i64 %112 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !tbaa !1240
  %119 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %118, %struct.Memory* %105)
  %120 = load i64, i64* %8, align 8
  %121 = load i64, i64* %3, align 8
  %122 = add i64 %120, 1
  store i64 %122, i64* %8, align 8, !tbaa !1240
  %123 = lshr i64 %122, 63
  %124 = load i64, i64* %13, align 8
  %125 = sub i64 %124, %122
  %126 = icmp ult i64 %124, %122
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %41, align 1, !tbaa !1264
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #10
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %42, align 1, !tbaa !1278
  %134 = xor i64 %122, %124
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %43, align 1, !tbaa !1279
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %44, align 1, !tbaa !1280
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %45, align 1, !tbaa !1281
  %143 = lshr i64 %124, 63
  %144 = xor i64 %123, %143
  %145 = xor i64 %141, %143
  %146 = add nuw nsw i64 %145, %144
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %46, align 1, !tbaa !1282
  %149 = select i1 %139, i64 9, i64 -13
  %150 = add i64 %121, %149
  br i1 %139, label %block_40ba96.loopexit, label %block_40ba80
}

; Function Attrs: noinline
define %struct.Memory* @sub_401eaf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401eaf:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 ptrtoint (%adcexpS_type* @adcexpS to i64), i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -80
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %7, align 8, !tbaa !1240
  %13 = add i64 %9, -96
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %1, -3087
  %17 = add i64 %1, 23
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !1240
  %22 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 %16, %struct.Memory* %2)
  %23 = load i64, i64* %8, align 8
  %24 = add i64 %23, -176
  %25 = load i64, i64* %4, align 8
  %26 = load i64, i64* %3, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27
  %28 = add i64 %26, 112
  %29 = tail call %struct.Memory* @sub_401f36_def_401E8A(%struct.State* nonnull %0, i64 %28, %struct.Memory* %22)
  ret %struct.Memory* %29
}

; Function Attrs: noinline
define %struct.Memory* @sub_408350_DeleteOneFile(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_408350:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %5, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %7, i64* %10
  %11 = add i64 %8, -24
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = lshr i64 %11, 63
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -16
  %20 = load i64, i64* %4, align 8
  %21 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %21
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %4, align 8, !tbaa !1240
  %24 = add i64 %1, 21
  %25 = add i64 %8, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %28 = tail call i64 @unlink(i64 %23), !noalias !1906
  store i64 %28, i64* %27, align 8, !alias.scope !1906, !noalias !1909
  %29 = add i64 %8, -8
  %30 = icmp ugt i64 %11, -17
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %12, align 1, !tbaa !1264
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #10
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %13, align 1, !tbaa !1278
  %38 = xor i64 %11, 16
  %39 = xor i64 %38, %29
  %40 = lshr i64 %39, 4
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %14, align 1, !tbaa !1279
  %43 = icmp eq i64 %29, 0
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %15, align 1, !tbaa !1280
  %45 = lshr i64 %29, 63
  %46 = trunc i64 %45 to i8
  store i8 %46, i8* %17, align 1, !tbaa !1281
  %47 = xor i64 %45, %16
  %48 = add nuw nsw i64 %47, %45
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %18, align 1, !tbaa !1282
  %51 = inttoptr i64 %29 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %6, align 8, !tbaa !1240
  %53 = inttoptr i64 %8 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %3, align 8, !tbaa !1240
  %55 = add i64 %8, 8
  store i64 %55, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402380_ParseParFile(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402380:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -1176
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -24
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -32
  %27 = load i64, i64* %8, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %13, -1072
  %30 = inttoptr i64 %29 to i64*
  store i64 0, i64* %30
  %31 = inttoptr i64 %23 to i64*
  %32 = load i64, i64* %31
  %33 = add i64 %1, 46
  %34 = add i64 %13, -1184
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %3, align 8, !alias.scope !1911, !noalias !1914
  store i64 %16, i64* %10, align 8, !alias.scope !1911, !noalias !1914
  %38 = tail call i64 @strchr(i64 %32, i64 46)
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %11, align 8
  %41 = add i64 %40, -1072
  %42 = inttoptr i64 %41 to i64*
  store i64 %38, i64* %42
  %43 = add i64 %40, -1076
  %44 = inttoptr i64 %43 to i32*
  store i32 0, i32* %44
  %45 = add i64 %40, -1080
  %46 = inttoptr i64 %45 to i32*
  store i32 0, i32* %46
  %47 = add i64 %40, -16
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %39, 46
  %51 = load i64, i64* %10, align 8, !tbaa !1240
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %50, i64* %53
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %3, align 8, !alias.scope !1916, !noalias !1919
  store i64 %51, i64* %10, align 8, !alias.scope !1916, !noalias !1919
  %56 = tail call i64 @fopen(i64 %49, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1000))
  %57 = load i64, i64* %11, align 8
  %58 = add i64 %57, -1064
  %59 = load i64, i64* %3, align 8
  %60 = inttoptr i64 %58 to i64*
  store i64 %56, i64* %60
  %61 = icmp eq i64 %56, 0
  %62 = select i1 %61, i64 17, i64 64
  %63 = add i64 %59, %62
  br i1 %61, label %block_4023ed, label %block_40241c

block_40256b:                                     ; preds = %block_40255a
  %64 = inttoptr i64 %691 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %687, -24
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %68, 4
  %70 = load i64, i64* %10, align 8, !tbaa !1240
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 4203918, i64* %72
  %73 = load i64, i64* %823, align 8, !alias.scope !1921, !noalias !1924
  %74 = load i64, i64* %822, align 8, !alias.scope !1921, !noalias !1924
  %75 = inttoptr i64 %70 to i64*
  %76 = load i64, i64* %75
  %77 = add i64 %70, 8
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78
  %80 = add i64 %70, 16
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %70, 24
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %70, 32
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %70, 40
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %70, 48
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  %95 = add i64 %70, 56
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %70, 64
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %70, 72
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = inttoptr i64 %71 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %3, align 8, !alias.scope !1921, !noalias !1924
  store i64 %70, i64* %10, align 8, !alias.scope !1921, !noalias !1924
  %106 = tail call i64 @__isoc99_sscanf(i64 %65, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %69, i64 4203883, i64 %73, i64 %74, i64 %76, i64 %79, i64 %82, i64 %85, i64 %88, i64 %91, i64 %94, i64 %97, i64 %100, i64 %103), !noalias !1921
  %107 = load i64, i64* %11, align 8
  %108 = add i64 %107, -1124
  %109 = trunc i64 %106 to i32
  %110 = load i64, i64* %3, align 8
  %111 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %111
  %112 = add i64 %110, 270
  br label %block_40269c

block_402778:                                     ; preds = %block_402719
  %113 = add i64 %177, -24
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %115, 4
  %117 = inttoptr i64 %116 to i32*
  store i32 15, i32* %117
  %118 = inttoptr i64 %113 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %120 to i32*
  store i32 1, i32* %121
  %122 = inttoptr i64 %113 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %123, 16
  %125 = inttoptr i64 %124 to i64*
  store i64 1000000, i64* %125
  br label %block_4027c1

block_4026e4:                                     ; preds = %block_40248a
  %126 = add i64 %746, -1064
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %745, 12
  %130 = load i64, i64* %10, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %3, align 8, !alias.scope !1926, !noalias !1929
  store i64 %130, i64* %10, align 8, !alias.scope !1926, !noalias !1929
  %135 = tail call i64 @fclose(i64 %128), !noalias !1926
  %136 = load i64, i64* %11, align 8
  %137 = add i64 %136, -24
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %139, 40
  %141 = inttoptr i64 %140 to i8*
  %142 = load i8, i8* %141
  %143 = sext i8 %142 to i32
  %144 = add nsw i32 %143, -65
  %145 = zext i32 %144 to i64
  %146 = lshr i32 %144, 31
  store i64 %145, i64* %9, align 8, !tbaa !1240
  %147 = add nsw i32 %143, -87
  %148 = zext i32 %147 to i64
  store i64 %148, i64* %6, align 8, !tbaa !1240
  %149 = icmp ult i32 %144, 22
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %17, align 1, !tbaa !1264
  %151 = and i32 %147, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #10
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %18, align 1, !tbaa !1278
  %156 = xor i32 %144, 16
  %157 = xor i32 %156, %147
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* %19, align 1, !tbaa !1279
  %161 = icmp eq i32 %147, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %20, align 1, !tbaa !1280
  %163 = lshr i32 %147, 31
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %21, align 1, !tbaa !1281
  %165 = xor i32 %163, %146
  %166 = add nuw nsw i32 %165, %146
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %22, align 1, !tbaa !1282
  %169 = add i64 %136, -1148
  %170 = trunc i64 %135 to i32
  %171 = inttoptr i64 %169 to i32*
  store i32 %170, i32* %171
  %172 = add i64 %136, -1160
  %173 = inttoptr i64 %172 to i64*
  store i64 %145, i64* %173
  %174 = add i64 %136, -1164
  %175 = inttoptr i64 %174 to i32*
  store i32 %147, i32* %175
  %176 = or i1 %161, %149
  %177 = load i64, i64* %11, align 8
  br i1 %176, label %block_402719, label %block_4026e4.block_4027c1_crit_edge

block_4026e4.block_4027c1_crit_edge:              ; preds = %block_4026e4
  br label %block_4027c1

block_4024ff:                                     ; preds = %block_4024da
  %178 = load i64, i64* %11, align 8
  %179 = add i64 %178, -1056
  %180 = add i64 %178, -1088
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %8, align 8, !tbaa !1240
  %183 = add i64 %218, 19
  %184 = load i64, i64* %10, align 8, !tbaa !1240
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %186
  %187 = inttoptr i64 %185 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %3, align 8, !alias.scope !1931, !noalias !1934
  store i64 %184, i64* %10, align 8, !alias.scope !1931, !noalias !1934
  %189 = tail call i64 @strstr(i64 %179, i64 %182)
  %190 = load i64, i64* %3, align 8
  %191 = icmp eq i64 %189, 0
  %192 = select i1 %191, i64 399, i64 10
  %193 = add i64 %190, %192
  br i1 %191, label %block_4026a6, label %block_40251c

block_40272a:                                     ; preds = %block_402719
  %194 = add i64 %177, -24
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %196, 4
  %198 = inttoptr i64 %197 to i32*
  store i32 5, i32* %198
  %199 = inttoptr i64 %194 to i64*
  %200 = load i64, i64* %199
  %201 = add i64 %200, 8
  %202 = inttoptr i64 %201 to i32*
  store i32 1, i32* %202
  %203 = inttoptr i64 %194 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %204, 16
  %206 = inttoptr i64 %205 to i64*
  store i64 1000, i64* %206
  br label %block_4027c1

block_4024da:                                     ; preds = %block_4024cc
  %207 = add i64 %334, -1056
  %208 = add i64 %341, 22
  %209 = load i64, i64* %10, align 8, !tbaa !1240
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %3, align 8, !alias.scope !1936, !noalias !1939
  store i64 %209, i64* %10, align 8, !alias.scope !1936, !noalias !1939
  %214 = tail call i64 @strstr(i64 %207, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %215 = load i64, i64* %3, align 8
  %216 = icmp eq i64 %214, 0
  %217 = select i1 %216, i64 15, i64 10
  %218 = add i64 %215, %217
  br i1 %216, label %block_4024ff, label %block_4026a6

block_4023ed:                                     ; preds = %block_402380
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1002), i64* %8, align 8, !tbaa !1240
  %219 = load i64, i64* @stderr
  store i64 %219, i64* %9, align 8, !tbaa !1240
  %220 = add i64 %57, -16
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %7, align 8, !tbaa !1240
  %223 = add i64 %63, 29
  %224 = load i64, i64* %10, align 8, !tbaa !1240
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  store i64 %223, i64* %226
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %230 = load i64, i64* %227, align 8, !alias.scope !1941, !noalias !1944
  %231 = load i64, i64* %228, align 8, !alias.scope !1941, !noalias !1944
  %232 = load i64, i64* %229, align 8, !alias.scope !1941, !noalias !1944
  %233 = inttoptr i64 %224 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %224, 8
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %224, 16
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = add i64 %224, 24
  %242 = inttoptr i64 %241 to i64*
  %243 = load i64, i64* %242
  %244 = add i64 %224, 32
  %245 = inttoptr i64 %244 to i64*
  %246 = load i64, i64* %245
  %247 = add i64 %224, 40
  %248 = inttoptr i64 %247 to i64*
  %249 = load i64, i64* %248
  %250 = add i64 %224, 48
  %251 = inttoptr i64 %250 to i64*
  %252 = load i64, i64* %251
  %253 = add i64 %224, 56
  %254 = inttoptr i64 %253 to i64*
  %255 = load i64, i64* %254
  %256 = add i64 %224, 64
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  %259 = add i64 %224, 72
  %260 = inttoptr i64 %259 to i64*
  %261 = load i64, i64* %260
  %262 = inttoptr i64 %225 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %3, align 8, !alias.scope !1941, !noalias !1944
  store i64 %224, i64* %10, align 8, !alias.scope !1941, !noalias !1944
  %264 = tail call i64 @fprintf(i64 %219, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1002), i64 %222, i64 %230, i64 %231, i64 %232, i64 %234, i64 %237, i64 %240, i64 %243, i64 %246, i64 %249, i64 %252, i64 %255, i64 %258, i64 %261), !noalias !1941
  %265 = load i64, i64* %11, align 8
  %266 = add i64 %265, -4
  %267 = inttoptr i64 %266 to i32*
  store i32 0, i32* %267
  %268 = add i64 %265, -1100
  %269 = trunc i64 %264 to i32
  %270 = inttoptr i64 %268 to i32*
  store i32 %269, i32* %270
  br label %block_4027c8

block_402673:                                     ; preds = %block_40255a
  %271 = inttoptr i64 %691 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %687, -24
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %275, 40
  %277 = load i64, i64* %10, align 8, !tbaa !1240
  %278 = add i64 %277, -8
  %279 = inttoptr i64 %278 to i64*
  store i64 4204182, i64* %279
  %280 = load i64, i64* %823, align 8, !alias.scope !1946, !noalias !1949
  %281 = load i64, i64* %822, align 8, !alias.scope !1946, !noalias !1949
  %282 = inttoptr i64 %277 to i64*
  %283 = load i64, i64* %282
  %284 = add i64 %277, 8
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %277, 16
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %277, 24
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = add i64 %277, 32
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %277, 40
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %277, 48
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %277, 56
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = add i64 %277, 64
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  %308 = add i64 %277, 72
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309
  %311 = inttoptr i64 %278 to i64*
  %312 = load i64, i64* %311
  store i64 %312, i64* %3, align 8, !alias.scope !1946, !noalias !1949
  store i64 %277, i64* %10, align 8, !alias.scope !1946, !noalias !1949
  %313 = tail call i64 @__isoc99_sscanf(i64 %272, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %276, i64 4204147, i64 %280, i64 %281, i64 %283, i64 %286, i64 %289, i64 %292, i64 %295, i64 %298, i64 %301, i64 %304, i64 %307, i64 %310), !noalias !1946
  %314 = load i64, i64* %11, align 8
  %315 = add i64 %314, -1144
  %316 = trunc i64 %313 to i32
  %317 = load i64, i64* %3, align 8
  %318 = add i64 %317, 6
  %319 = inttoptr i64 %315 to i32*
  store i32 %316, i32* %319
  br label %block_40269c

block_402751:                                     ; preds = %block_402719
  %320 = add i64 %177, -24
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %322, 4
  %324 = inttoptr i64 %323 to i32*
  store i32 10, i32* %324
  %325 = inttoptr i64 %320 to i64*
  %326 = load i64, i64* %325
  %327 = add i64 %326, 8
  %328 = inttoptr i64 %327 to i32*
  store i32 1, i32* %328
  %329 = inttoptr i64 %320 to i64*
  %330 = load i64, i64* %329
  %331 = add i64 %330, 16
  %332 = inttoptr i64 %331 to i64*
  store i64 100000, i64* %332
  br label %block_4027c1

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %333 = phi i64 [ %452, %block_4024ac ], [ %568, %block_4026a6 ]
  %334 = phi i64 [ %746, %block_4024ac ], [ %553, %block_4026a6 ]
  %335 = phi %struct.Memory* [ %730, %block_4024ac ], [ %551, %block_4026a6 ]
  %336 = add i64 %334, -1088
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337
  %339 = icmp eq i64 %338, 0
  %340 = select i1 %339, i64 516, i64 14
  %341 = add i64 %333, %340
  br i1 %339, label %block_4026d0.loopexit, label %block_4024da

block_4027c8:                                     ; preds = %block_4027c1, %block_4023ed
  %342 = phi i64 [ %177, %block_4027c1 ], [ %265, %block_4023ed ]
  %343 = phi %struct.Memory* [ %439, %block_4027c1 ], [ %2, %block_4023ed ]
  %344 = add i64 %342, -4
  %345 = inttoptr i64 %344 to i32*
  %346 = load i32, i32* %345
  %347 = zext i32 %346 to i64
  store i64 %347, i64* %5, align 8, !tbaa !1240
  %348 = load i64, i64* %10, align 8
  %349 = add i64 %348, 1168
  %350 = icmp ugt i64 %348, -1169
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %17, align 1, !tbaa !1264
  %352 = trunc i64 %349 to i32
  %353 = and i32 %352, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #10
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %18, align 1, !tbaa !1278
  %358 = xor i64 %348, 16
  %359 = xor i64 %358, %349
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %19, align 1, !tbaa !1279
  %363 = icmp eq i64 %349, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %20, align 1, !tbaa !1280
  %365 = lshr i64 %349, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %21, align 1, !tbaa !1281
  %367 = lshr i64 %348, 63
  %368 = xor i64 %365, %367
  %369 = add nuw nsw i64 %368, %365
  %370 = icmp eq i64 %369, 2
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %22, align 1, !tbaa !1282
  %372 = add i64 %348, 1176
  %373 = inttoptr i64 %349 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %11, align 8, !tbaa !1240
  %375 = inttoptr i64 %372 to i64*
  %376 = load i64, i64* %375
  store i64 %376, i64* %3, align 8, !tbaa !1240
  %377 = add i64 %348, 1184
  store i64 %377, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %343

block_4025c7:                                     ; preds = %block_40255a
  %378 = inttoptr i64 %691 to i64*
  %379 = load i64, i64* %378
  %380 = add i64 %687, -24
  %381 = inttoptr i64 %380 to i64*
  %382 = load i64, i64* %381
  %383 = add i64 %382, 16
  %384 = load i64, i64* %10, align 8, !tbaa !1240
  %385 = add i64 %384, -8
  %386 = inttoptr i64 %385 to i64*
  store i64 4204010, i64* %386
  %387 = load i64, i64* %823, align 8, !alias.scope !1951, !noalias !1954
  %388 = load i64, i64* %822, align 8, !alias.scope !1951, !noalias !1954
  %389 = inttoptr i64 %384 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %384, 8
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %384, 16
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %384, 24
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %384, 32
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %384, 40
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %384, 48
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %384, 56
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = add i64 %384, 64
  %413 = inttoptr i64 %412 to i64*
  %414 = load i64, i64* %413
  %415 = add i64 %384, 72
  %416 = inttoptr i64 %415 to i64*
  %417 = load i64, i64* %416
  %418 = inttoptr i64 %385 to i64*
  %419 = load i64, i64* %418
  store i64 %419, i64* %3, align 8, !alias.scope !1951, !noalias !1954
  store i64 %384, i64* %10, align 8, !alias.scope !1951, !noalias !1954
  %420 = tail call i64 @__isoc99_sscanf(i64 %379, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %383, i64 4203975, i64 %387, i64 %388, i64 %390, i64 %393, i64 %396, i64 %399, i64 %402, i64 %405, i64 %408, i64 %411, i64 %414, i64 %417), !noalias !1951
  %421 = load i64, i64* %11, align 8
  %422 = add i64 %421, -1132
  %423 = trunc i64 %420 to i32
  %424 = load i64, i64* %3, align 8
  %425 = inttoptr i64 %422 to i32*
  store i32 %423, i32* %425
  %426 = add i64 %424, 178
  br label %block_40269c

block_402449:                                     ; preds = %block_40241c, %block_40242a
  %427 = phi i64 [ %472, %block_40241c ], [ %465, %block_40242a ]
  %428 = phi i64 [ %57, %block_40241c ], [ %462, %block_40242a ]
  %429 = phi %struct.Memory* [ %2, %block_40241c ], [ %2, %block_40242a ]
  %430 = add i64 %428, -1072
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431
  %433 = icmp eq i64 %432, 0
  %434 = select i1 %433, i64 55, i64 14
  %435 = add i64 %427, %434
  br i1 %433, label %block_402449.block_402480_crit_edge, label %block_402457

block_402449.block_402480_crit_edge:              ; preds = %block_402449
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_402480

block_4027c1:                                     ; preds = %block_40279f, %block_402719, %block_402751, %block_40272a, %block_4026e4.block_4027c1_crit_edge, %block_402778
  %439 = phi %struct.Memory* [ %730, %block_4026e4.block_4027c1_crit_edge ], [ %730, %block_40272a ], [ %730, %block_40279f ], [ %730, %block_402778 ], [ %730, %block_402719 ], [ %730, %block_402751 ]
  %440 = add i64 %177, -4
  %441 = inttoptr i64 %440 to i32*
  store i32 1, i32* %441
  br label %block_4027c8

block_4024ac:                                     ; preds = %block_40248a
  %442 = add i64 %746, -1080
  %443 = inttoptr i64 %442 to i32*
  store i32 0, i32* %443
  %444 = inttoptr i64 %442 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  %447 = shl nsw i64 %446, 3
  %448 = add i64 %447, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %746, -1088
  %452 = add i64 %745, 32
  %453 = inttoptr i64 %451 to i64*
  store i64 %450, i64* %453
  br label %block_4024cc

block_40242a:                                     ; preds = %block_40241c
  %454 = add i64 %469, 1
  %455 = add i64 %472, 24
  %456 = load i64, i64* %10, align 8, !tbaa !1240
  %457 = add i64 %456, -8
  %458 = inttoptr i64 %457 to i64*
  store i64 %455, i64* %458
  %459 = inttoptr i64 %457 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !1956, !noalias !1959
  store i64 %456, i64* %10, align 8, !alias.scope !1956, !noalias !1959
  %461 = tail call i64 @strchr(i64 %454, i64 46)
  %462 = load i64, i64* %11, align 8
  %463 = add i64 %462, -1072
  %464 = load i64, i64* %3, align 8
  %465 = add i64 %464, 7
  %466 = inttoptr i64 %463 to i64*
  store i64 %461, i64* %466
  br label %block_402449

block_40241c:                                     ; preds = %block_402380
  %467 = add i64 %57, -1072
  %468 = inttoptr i64 %467 to i64*
  %469 = load i64, i64* %468
  %470 = icmp eq i64 %469, 0
  %471 = select i1 %470, i64 45, i64 14
  %472 = add i64 %63, %471
  br i1 %470, label %block_402449, label %block_40242a

block_402628:                                     ; preds = %block_40255a
  %473 = inttoptr i64 %691 to i64*
  %474 = load i64, i64* %473
  %475 = load i64, i64* %10, align 8, !tbaa !1240
  %476 = add i64 %475, -8
  %477 = inttoptr i64 %476 to i64*
  store i64 4204084, i64* %477
  %478 = inttoptr i64 %476 to i64*
  %479 = load i64, i64* %478
  store i64 %479, i64* %3, align 8, !alias.scope !1961, !noalias !1964
  store i64 %475, i64* %10, align 8, !alias.scope !1961, !noalias !1964
  %480 = tail call i64 @strlen(i64 %474)
  %481 = load i64, i64* %3, align 8
  %482 = add i64 %481, 12
  %483 = load i64, i64* %10, align 8, !tbaa !1240
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485
  %486 = inttoptr i64 %484 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %3, align 8, !alias.scope !1966, !noalias !1969
  store i64 %483, i64* %10, align 8, !alias.scope !1966, !noalias !1969
  %488 = tail call i64 @malloc(i64 %480)
  %489 = load i64, i64* %3, align 8
  %490 = load i64, i64* %11, align 8
  %491 = add i64 %490, -24
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %493, 32
  %495 = inttoptr i64 %494 to i64*
  store i64 %488, i64* %495
  %496 = add i64 %490, -1096
  %497 = inttoptr i64 %496 to i64*
  %498 = load i64, i64* %497
  %499 = inttoptr i64 %491 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %500, 32
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %489, 40
  %505 = load i64, i64* %10, align 8, !tbaa !1240
  %506 = add i64 %505, -8
  %507 = inttoptr i64 %506 to i64*
  store i64 %504, i64* %507
  %508 = load i64, i64* %824, align 8, !alias.scope !1971, !noalias !1974
  %509 = load i64, i64* %823, align 8, !alias.scope !1971, !noalias !1974
  %510 = load i64, i64* %822, align 8, !alias.scope !1971, !noalias !1974
  %511 = inttoptr i64 %505 to i64*
  %512 = load i64, i64* %511
  %513 = add i64 %505, 8
  %514 = inttoptr i64 %513 to i64*
  %515 = load i64, i64* %514
  %516 = add i64 %505, 16
  %517 = inttoptr i64 %516 to i64*
  %518 = load i64, i64* %517
  %519 = add i64 %505, 24
  %520 = inttoptr i64 %519 to i64*
  %521 = load i64, i64* %520
  %522 = add i64 %505, 32
  %523 = inttoptr i64 %522 to i64*
  %524 = load i64, i64* %523
  %525 = add i64 %505, 40
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %505, 48
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %505, 56
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %505, 64
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %505, 72
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = inttoptr i64 %506 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %3, align 8, !alias.scope !1971, !noalias !1974
  store i64 %505, i64* %10, align 8, !alias.scope !1971, !noalias !1974
  %542 = tail call i64 @__isoc99_sscanf(i64 %498, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %503, i64 %508, i64 %509, i64 %510, i64 %512, i64 %515, i64 %518, i64 %521, i64 %524, i64 %527, i64 %530, i64 %533, i64 %536, i64 %539), !noalias !1971
  %543 = load i64, i64* %11, align 8
  %544 = add i64 %543, -1140
  %545 = trunc i64 %542 to i32
  %546 = load i64, i64* %3, align 8
  %547 = inttoptr i64 %544 to i32*
  store i32 %545, i32* %547
  %548 = add i64 %546, 52
  br label %block_40269c

block_4026a6:                                     ; preds = %block_4024da, %block_4024ff
  %549 = phi i64 [ %193, %block_4024ff ], [ %218, %block_4024da ]
  %550 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %551 = phi %struct.Memory* [ %335, %block_4024ff ], [ %335, %block_4024da ]
  %552 = add i64 %549, %550
  %553 = load i64, i64* %11, align 8
  %554 = add i64 %553, -1080
  %555 = inttoptr i64 %554 to i32*
  %556 = load i32, i32* %555
  %557 = add i32 %556, 1
  %558 = inttoptr i64 %554 to i32*
  store i32 %557, i32* %558
  %559 = inttoptr i64 %554 to i32*
  %560 = load i32, i32* %559
  %561 = sext i32 %560 to i64
  %562 = shl nsw i64 %561, 3
  %563 = add i64 %562, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %553, -1088
  %567 = inttoptr i64 %566 to i64*
  store i64 %565, i64* %567
  %568 = add i64 %552, -474
  br label %block_4024cc

block_402457:                                     ; preds = %block_402449
  %569 = add i64 %432, 1
  %570 = add i64 %428, -24
  %571 = inttoptr i64 %570 to i64*
  %572 = load i64, i64* %571
  %573 = add i64 %435, 35
  %574 = load i64, i64* %10, align 8, !tbaa !1240
  %575 = add i64 %574, -8
  %576 = inttoptr i64 %575 to i64*
  store i64 %573, i64* %576
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %580 = load i64, i64* %577, align 8, !alias.scope !1976, !noalias !1979
  %581 = load i64, i64* %578, align 8, !alias.scope !1976, !noalias !1979
  %582 = load i64, i64* %579, align 8, !alias.scope !1976, !noalias !1979
  %583 = inttoptr i64 %574 to i64*
  %584 = load i64, i64* %583
  %585 = add i64 %574, 8
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  %588 = add i64 %574, 16
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %574, 24
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = add i64 %574, 32
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  %597 = add i64 %574, 40
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %574, 48
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = add i64 %574, 56
  %604 = inttoptr i64 %603 to i64*
  %605 = load i64, i64* %604
  %606 = add i64 %574, 64
  %607 = inttoptr i64 %606 to i64*
  %608 = load i64, i64* %607
  %609 = add i64 %574, 72
  %610 = inttoptr i64 %609 to i64*
  %611 = load i64, i64* %610
  %612 = inttoptr i64 %575 to i64*
  %613 = load i64, i64* %612
  store i64 %613, i64* %3, align 8, !alias.scope !1976, !noalias !1979
  store i64 %574, i64* %10, align 8, !alias.scope !1976, !noalias !1979
  %614 = tail call i64 @__isoc99_sscanf(i64 %569, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %572, i64 %580, i64 %581, i64 %582, i64 %584, i64 %587, i64 %590, i64 %593, i64 %596, i64 %599, i64 %602, i64 %605, i64 %608, i64 %611), !noalias !1976
  %615 = load i64, i64* %11, align 8
  %616 = add i64 %615, -1104
  %617 = trunc i64 %614 to i32
  %618 = load i64, i64* %3, align 8
  %619 = add i64 %618, 6
  %620 = inttoptr i64 %616 to i32*
  store i32 %617, i32* %620
  br label %block_402480

block_40255a:                                     ; preds = %block_40251c
  %621 = inttoptr i64 %714 to i64*
  %622 = load i64, i64* %621
  store i64 %622, i64* %5, align 8, !tbaa !1240
  %623 = shl i64 %622, 3
  %624 = add i64 %623, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %625 = inttoptr i64 %624 to i64*
  %626 = load i64, i64* %625
  store i64 %626, i64* %6, align 8, !tbaa !1240
  store i64 %626, i64* %3, align 8, !tbaa !1240
  switch i64 %626, label %831 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5
  ]

block_4025fa:                                     ; preds = %block_40255a
  %627 = inttoptr i64 %691 to i64*
  %628 = load i64, i64* %627
  %629 = add i64 %687, -24
  %630 = inttoptr i64 %629 to i64*
  %631 = load i64, i64* %630
  %632 = add i64 %631, 24
  %633 = load i64, i64* %10, align 8, !tbaa !1240
  %634 = add i64 %633, -8
  %635 = inttoptr i64 %634 to i64*
  store i64 4204061, i64* %635
  %636 = load i64, i64* %823, align 8, !alias.scope !1981, !noalias !1984
  %637 = load i64, i64* %822, align 8, !alias.scope !1981, !noalias !1984
  %638 = inttoptr i64 %633 to i64*
  %639 = load i64, i64* %638
  %640 = add i64 %633, 8
  %641 = inttoptr i64 %640 to i64*
  %642 = load i64, i64* %641
  %643 = add i64 %633, 16
  %644 = inttoptr i64 %643 to i64*
  %645 = load i64, i64* %644
  %646 = add i64 %633, 24
  %647 = inttoptr i64 %646 to i64*
  %648 = load i64, i64* %647
  %649 = add i64 %633, 32
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %633, 40
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = add i64 %633, 48
  %656 = inttoptr i64 %655 to i64*
  %657 = load i64, i64* %656
  %658 = add i64 %633, 56
  %659 = inttoptr i64 %658 to i64*
  %660 = load i64, i64* %659
  %661 = add i64 %633, 64
  %662 = inttoptr i64 %661 to i64*
  %663 = load i64, i64* %662
  %664 = add i64 %633, 72
  %665 = inttoptr i64 %664 to i64*
  %666 = load i64, i64* %665
  %667 = inttoptr i64 %634 to i64*
  %668 = load i64, i64* %667
  store i64 %668, i64* %3, align 8, !alias.scope !1981, !noalias !1984
  store i64 %633, i64* %10, align 8, !alias.scope !1981, !noalias !1984
  %669 = tail call i64 @__isoc99_sscanf(i64 %628, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %632, i64 4204026, i64 %636, i64 %637, i64 %639, i64 %642, i64 %645, i64 %648, i64 %651, i64 %654, i64 %657, i64 %660, i64 %663, i64 %666), !noalias !1981
  %670 = load i64, i64* %11, align 8
  %671 = add i64 %670, -1136
  %672 = trunc i64 %669 to i32
  %673 = load i64, i64* %3, align 8
  %674 = inttoptr i64 %671 to i32*
  store i32 %672, i32* %674
  %675 = add i64 %673, 127
  br label %block_40269c

block_40251c:                                     ; preds = %block_4024ff
  %676 = load i64, i64* %11, align 8
  %677 = add i64 %676, -1088
  %678 = inttoptr i64 %677 to i64*
  %679 = load i64, i64* %678
  %680 = add i64 %193, 12
  %681 = load i64, i64* %10, align 8, !tbaa !1240
  %682 = add i64 %681, -8
  %683 = inttoptr i64 %682 to i64*
  store i64 %680, i64* %683
  %684 = inttoptr i64 %682 to i64*
  %685 = load i64, i64* %684
  store i64 %685, i64* %3, align 8, !alias.scope !1986, !noalias !1989
  store i64 %681, i64* %10, align 8, !alias.scope !1986, !noalias !1989
  %686 = tail call i64 @strlen(i64 %679)
  %687 = load i64, i64* %11, align 8
  %688 = add i64 %687, -1055
  %689 = add i64 %688, %686
  %690 = load i64, i64* %3, align 8
  %691 = add i64 %687, -1096
  %692 = inttoptr i64 %691 to i64*
  store i64 %689, i64* %692
  %693 = add i64 %687, -1080
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694
  %696 = zext i32 %695 to i64
  %697 = add nsw i64 %696, -6
  store i64 %697, i64* %9, align 8, !tbaa !1240
  %698 = icmp ult i32 %695, 6
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %17, align 1, !tbaa !1264
  %700 = trunc i64 %697 to i32
  %701 = and i32 %700, 255
  %702 = tail call i32 @llvm.ctpop.i32(i32 %701) #10
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  %705 = xor i8 %704, 1
  store i8 %705, i8* %18, align 1, !tbaa !1278
  %706 = xor i64 %697, %696
  %707 = lshr i64 %706, 4
  %708 = trunc i64 %707 to i8
  %709 = and i8 %708, 1
  store i8 %709, i8* %19, align 1, !tbaa !1279
  %710 = icmp eq i64 %697, 0
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %20, align 1, !tbaa !1280
  %712 = lshr i64 %697, 63
  %713 = trunc i64 %712 to i8
  store i8 %713, i8* %21, align 1, !tbaa !1281
  store i8 0, i8* %22, align 1, !tbaa !1282
  %714 = add i64 %687, -1112
  %715 = inttoptr i64 %714 to i64*
  store i64 %696, i64* %715
  %716 = add i64 %687, -1120
  %717 = inttoptr i64 %716 to i64*
  store i64 %697, i64* %717
  %718 = or i1 %710, %698
  %719 = select i1 %718, i64 50, i64 372
  %720 = add i64 %690, %719
  br i1 %718, label %block_40255a, label %block_40269c

block_402719:                                     ; preds = %block_4026e4
  %721 = add i64 %177, -1160
  %722 = inttoptr i64 %721 to i64*
  %723 = load i64, i64* %722
  store i64 %723, i64* %5, align 8, !tbaa !1240
  %724 = shl i64 %723, 3
  %725 = add i64 %724, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %726 = inttoptr i64 %725 to i64*
  %727 = load i64, i64* %726
  store i64 %727, i64* %6, align 8, !tbaa !1240
  store i64 %727, i64* %3, align 8, !tbaa !1240
  switch i64 %727, label %833 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_40248a:                                     ; preds = %block_402480, %block_4026d0
  %728 = phi i64 [ %826, %block_402480 ], [ %814, %block_4026d0 ]
  %729 = phi i64 [ %829, %block_402480 ], [ %821, %block_4026d0 ]
  %730 = phi %struct.Memory* [ %827, %block_402480 ], [ %815, %block_4026d0 ]
  store i64 1024, i64* %8, align 8, !tbaa !1240
  %731 = add i64 %728, -1056
  %732 = add i64 %728, -1064
  %733 = inttoptr i64 %732 to i64*
  %734 = load i64, i64* %733
  store i64 %734, i64* %7, align 8, !tbaa !1240
  %735 = add i64 %729, 24
  %736 = load i64, i64* %10, align 8, !tbaa !1240
  %737 = add i64 %736, -8
  %738 = inttoptr i64 %737 to i64*
  store i64 %735, i64* %738
  %739 = inttoptr i64 %737 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %3, align 8, !alias.scope !1991, !noalias !1994
  store i64 %736, i64* %10, align 8, !alias.scope !1991, !noalias !1994
  %741 = tail call i64 @fgets(i64 %731, i64 1024, i64 %734)
  %742 = load i64, i64* %3, align 8
  %743 = icmp eq i64 %741, 0
  %744 = select i1 %743, i64 578, i64 10
  %745 = add i64 %742, %744
  %746 = load i64, i64* %11, align 8
  br i1 %743, label %block_4026e4, label %block_4024ac

block_40279f:                                     ; preds = %block_402719
  %747 = add i64 %177, -24
  %748 = inttoptr i64 %747 to i64*
  %749 = load i64, i64* %748
  %750 = add i64 %749, 4
  %751 = inttoptr i64 %750 to i32*
  store i32 20, i32* %751
  %752 = inttoptr i64 %747 to i64*
  %753 = load i64, i64* %752
  %754 = add i64 %753, 8
  %755 = inttoptr i64 %754 to i32*
  store i32 1, i32* %755
  %756 = inttoptr i64 %747 to i64*
  %757 = load i64, i64* %756
  %758 = add i64 %757, 16
  %759 = inttoptr i64 %758 to i64*
  store i64 10000000, i64* %759
  br label %block_4027c1

block_402599:                                     ; preds = %block_40255a
  %760 = inttoptr i64 %691 to i64*
  %761 = load i64, i64* %760
  %762 = add i64 %687, -24
  %763 = inttoptr i64 %762 to i64*
  %764 = load i64, i64* %763
  %765 = add i64 %764, 8
  %766 = load i64, i64* %10, align 8, !tbaa !1240
  %767 = add i64 %766, -8
  %768 = inttoptr i64 %767 to i64*
  store i64 4203964, i64* %768
  %769 = load i64, i64* %823, align 8, !alias.scope !1996, !noalias !1999
  %770 = load i64, i64* %822, align 8, !alias.scope !1996, !noalias !1999
  %771 = inttoptr i64 %766 to i64*
  %772 = load i64, i64* %771
  %773 = add i64 %766, 8
  %774 = inttoptr i64 %773 to i64*
  %775 = load i64, i64* %774
  %776 = add i64 %766, 16
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %766, 24
  %780 = inttoptr i64 %779 to i64*
  %781 = load i64, i64* %780
  %782 = add i64 %766, 32
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = add i64 %766, 40
  %786 = inttoptr i64 %785 to i64*
  %787 = load i64, i64* %786
  %788 = add i64 %766, 48
  %789 = inttoptr i64 %788 to i64*
  %790 = load i64, i64* %789
  %791 = add i64 %766, 56
  %792 = inttoptr i64 %791 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %766, 64
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = add i64 %766, 72
  %798 = inttoptr i64 %797 to i64*
  %799 = load i64, i64* %798
  %800 = inttoptr i64 %767 to i64*
  %801 = load i64, i64* %800
  store i64 %801, i64* %3, align 8, !alias.scope !1996, !noalias !1999
  store i64 %766, i64* %10, align 8, !alias.scope !1996, !noalias !1999
  %802 = tail call i64 @__isoc99_sscanf(i64 %761, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %765, i64 4203929, i64 %769, i64 %770, i64 %772, i64 %775, i64 %778, i64 %781, i64 %784, i64 %787, i64 %790, i64 %793, i64 %796, i64 %799), !noalias !1996
  %803 = load i64, i64* %11, align 8
  %804 = add i64 %803, -1128
  %805 = trunc i64 %802 to i32
  %806 = load i64, i64* %3, align 8
  %807 = inttoptr i64 %804 to i32*
  store i32 %805, i32* %807
  %808 = add i64 %806, 224
  br label %block_40269c

block_40269c:                                     ; preds = %block_4025f5, %block_402599, %block_40251c, %block_4025fa, %block_402628, %block_4025c7, %block_402673, %block_40256b
  %809 = phi i64 [ %687, %block_40251c ], [ %687, %block_4025f5 ], [ %543, %block_402628 ], [ %314, %block_402673 ], [ %421, %block_4025c7 ], [ %670, %block_4025fa ], [ %107, %block_40256b ], [ %803, %block_402599 ]
  %810 = phi i64 [ %720, %block_40251c ], [ 4204188, %block_4025f5 ], [ %548, %block_402628 ], [ %318, %block_402673 ], [ %426, %block_4025c7 ], [ %675, %block_4025fa ], [ %112, %block_40256b ], [ %808, %block_402599 ]
  %811 = phi %struct.Memory* [ %335, %block_40251c ], [ %335, %block_4025f5 ], [ %335, %block_402628 ], [ %335, %block_402673 ], [ %335, %block_4025c7 ], [ %335, %block_4025fa ], [ %335, %block_40256b ], [ %335, %block_402599 ]
  %812 = add i64 %810, 52
  br label %block_4026d0

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_4026d0.loopexit, %block_40269c
  %813 = phi i64 [ %812, %block_40269c ], [ %341, %block_4026d0.loopexit ]
  %814 = phi i64 [ %809, %block_40269c ], [ %334, %block_4026d0.loopexit ]
  %815 = phi %struct.Memory* [ %811, %block_40269c ], [ %335, %block_4026d0.loopexit ]
  %816 = add i64 %814, -1076
  %817 = inttoptr i64 %816 to i32*
  %818 = load i32, i32* %817
  %819 = add i32 %818, 1
  %820 = inttoptr i64 %816 to i32*
  store i32 %819, i32* %820
  %821 = add i64 %813, -582
  br label %block_40248a

block_402480:                                     ; preds = %block_402457, %block_402449.block_402480_crit_edge
  %822 = phi i64* [ %438, %block_402449.block_402480_crit_edge ], [ %579, %block_402457 ]
  %823 = phi i64* [ %437, %block_402449.block_402480_crit_edge ], [ %578, %block_402457 ]
  %824 = phi i64* [ %436, %block_402449.block_402480_crit_edge ], [ %577, %block_402457 ]
  %825 = phi i64 [ %435, %block_402449.block_402480_crit_edge ], [ %619, %block_402457 ]
  %826 = phi i64 [ %428, %block_402449.block_402480_crit_edge ], [ %615, %block_402457 ]
  %827 = phi %struct.Memory* [ %429, %block_402449.block_402480_crit_edge ], [ %429, %block_402457 ]
  %828 = add i64 %826, -1076
  %829 = add i64 %825, 10
  %830 = inttoptr i64 %828 to i32*
  store i32 0, i32* %830
  br label %block_40248a

block_4025f5:                                     ; preds = %block_40255a
  br label %block_40269c

; <label>:831:                                    ; preds = %block_40255a
  %832 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %626, %struct.Memory* %335)
  ret %struct.Memory* %832

; <label>:833:                                    ; preds = %block_402719
  %834 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %727, %struct.Memory* %730)
  ret %struct.Memory* %834
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d00_CalculateVeiwSizes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401d00:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %6 = bitcast %union.anon* %5 to i8*
  %7 = bitcast %union.anon* %4 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = add i64 %16, -264
  store i64 %19, i64* %13, align 8, !tbaa !1240
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %26 = add i64 %16, -24
  %27 = load i64, i64* %12, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %16, -32
  %30 = inttoptr i64 %29 to i64*
  store i64 0, i64* %30
  %31 = add i64 %16, -48
  %32 = inttoptr i64 %31 to i64*
  store i64 0, i64* %32
  %33 = inttoptr i64 %26 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %34, 32
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %16, -56
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = inttoptr i64 %26 to i64*
  %41 = load i64, i64* %40
  %42 = inttoptr i64 %41 to i32*
  %43 = load i32, i32* %42
  %44 = add i64 %16, -60
  %45 = inttoptr i64 %44 to i32*
  store i32 %43, i32* %45
  %46 = inttoptr i64 %26 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %47, 40
  %49 = inttoptr i64 %48 to i8*
  %50 = load i8, i8* %49
  store i8 %50, i8* %6, align 1, !tbaa !1428
  %51 = add i64 %16, -61
  %52 = inttoptr i64 %51 to i8*
  store i8 %50, i8* %52
  %53 = inttoptr i64 %26 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %54, 4
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56
  %58 = add i64 %16, -68
  %59 = inttoptr i64 %58 to i32*
  store i32 %57, i32* %59
  %60 = load i64, i64* %14, align 8
  %61 = add i64 %60, -16
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %63, 16
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %60, -72
  %68 = inttoptr i64 %67 to i64*
  store i64 %66, i64* %68
  %69 = add i64 %60, -80
  %70 = inttoptr i64 %69 to i64*
  store i64 0, i64* %70
  %71 = add i64 %60, -88
  %72 = inttoptr i64 %71 to i64*
  store i64 0, i64* %72
  %73 = load i64, i64* bitcast (%UpPrimeLim_type* @UpPrimeLim to i64*)
  %74 = add i64 %1, 120
  %75 = load i64, i64* %13, align 8, !tbaa !1240
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %3, align 8, !alias.scope !2001, !noalias !2004
  store i64 %75, i64* %13, align 8, !alias.scope !2001, !noalias !2004
  %81 = tail call i64 @calloc(i64 %73, i64 8)
  %82 = load i64, i64* %3, align 8
  store i64 8, i64* %10, align 8, !tbaa !1240
  %83 = load i64, i64* %14, align 8
  %84 = add i64 %83, -96
  %85 = inttoptr i64 %84 to i64*
  store i64 %81, i64* %85
  %86 = load i64, i64* bitcast (%UpPrimeLim_type* @UpPrimeLim to i64*)
  %87 = add i64 %82, 24
  %88 = load i64, i64* %13, align 8, !tbaa !1240
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %3, align 8, !alias.scope !2006, !noalias !2009
  store i64 %88, i64* %13, align 8, !alias.scope !2006, !noalias !2009
  %93 = tail call i64 @calloc(i64 %86, i64 8)
  %94 = load i64, i64* %14, align 8
  %95 = add i64 %94, -104
  %96 = load i64, i64* %3, align 8
  %97 = inttoptr i64 %95 to i64*
  store i64 %93, i64* %97
  %98 = load i64, i64* bitcast (%UpPrimeLim_type* @UpPrimeLim to i64*)
  store i64 %98, i64* %12, align 8, !tbaa !1240
  %99 = inttoptr i64 %95 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %11, align 8, !tbaa !1240
  %101 = add i64 %96, -3184
  %102 = add i64 %96, 21
  %103 = load i64, i64* %13, align 8, !tbaa !1240
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105
  store i64 %104, i64* %13, align 8, !tbaa !1240
  %106 = tail call %struct.Memory* @sub_401120_ListFirstPrimes(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)
  %107 = load i64, i64* %3, align 8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %109 = load i32, i32* %7, align 4
  %110 = load i64, i64* %14, align 8
  %111 = add i64 %110, -108
  %112 = inttoptr i64 %111 to i32*
  store i32 %109, i32* %112
  %113 = add i64 %110, -60
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = trunc i32 %115 to i5
  switch i5 %116, label %117 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %125
  ]

; <label>:117:                                    ; preds = %block_401d00
  %118 = and i32 %115, 31
  %119 = zext i32 %118 to i64
  %120 = add nuw nsw i64 %119, 4294967295
  %121 = and i64 %120, 4294967295
  %122 = shl i64 1, %121
  %123 = trunc i64 %122 to i32
  %124 = shl i32 %123, 1
  br label %125

; <label>:125:                                    ; preds = %117, %block_401d00
  %126 = phi i32 [ %124, %117 ], [ 2, %block_401d00 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %125, %block_401d00
  %127 = phi i32 [ 1, %block_401d00 ], [ %126, %125 ]
  %128 = sext i32 %127 to i64
  %129 = add i64 %107, 32
  %130 = load i64, i64* %13, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %3, align 8, !alias.scope !2011, !noalias !2014
  store i64 %130, i64* %13, align 8, !alias.scope !2011, !noalias !2014
  %135 = tail call i64 @calloc(i64 %128, i64 16)
  %136 = load i64, i64* %3, align 8
  %137 = load i64, i64* %14, align 8
  %138 = add i64 %137, -120
  %139 = inttoptr i64 %138 to i64*
  store i64 %135, i64* %139
  %140 = add i64 %137, -136
  %141 = inttoptr i64 %140 to i64*
  store i64 0, i64* %141
  %142 = add i64 %137, -144
  %143 = inttoptr i64 %142 to i64*
  store i64 0, i64* %143
  %144 = add i64 %137, -148
  %145 = inttoptr i64 %144 to i32*
  store i32 1, i32* %145
  %146 = add i64 %137, -60
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = trunc i32 %148 to i5
  switch i5 %149, label %150 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15
    i5 1, label %158
  ]

; <label>:150:                                    ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %151 = and i32 %148, 31
  %152 = zext i32 %151 to i64
  %153 = add nuw nsw i64 %152, 4294967295
  %154 = and i64 %153, 4294967295
  %155 = shl i64 1, %154
  %156 = trunc i64 %155 to i32
  %157 = shl i32 %156, 1
  br label %158

; <label>:158:                                    ; preds = %150, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %159 = phi i32 [ %157, %150 ], [ 2, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15: ; preds = %158, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %160 = phi i32 [ 1, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %159, %158 ]
  %161 = add i64 %137, -152
  %162 = inttoptr i64 %161 to i32*
  store i32 %160, i32* %162
  %163 = add i64 %137, -156
  %164 = inttoptr i64 %163 to i32*
  store i32 1, i32* %164
  %165 = add i64 %137, -168
  %166 = inttoptr i64 %165 to i64*
  store i64 0, i64* %166
  %167 = add i64 %137, -108
  %168 = inttoptr i64 %167 to i32*
  %169 = load i32, i32* %168
  %170 = sext i32 %169 to i64
  store i64 %170, i64* %12, align 8, !tbaa !1240
  %171 = add i64 %137, -104
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %11, align 8, !tbaa !1240
  %174 = add i64 %137, -96
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %10, align 8, !tbaa !1240
  %177 = add i64 %136, -1525
  %178 = add i64 %136, 90
  %179 = load i64, i64* %13, align 8, !tbaa !1240
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181
  store i64 %180, i64* %13, align 8, !tbaa !1240
  %182 = tail call %struct.Memory* @sub_4017d0_GetFactorization(%struct.State* nonnull %0, i64 %177, %struct.Memory* %106)
  %183 = load i64, i64* %14, align 8
  %184 = add i64 %183, -80
  %185 = load i64, i64* %3, align 8
  %186 = add i64 %185, 8
  %187 = inttoptr i64 %184 to i64*
  store i64 1, i64* %187
  br label %block_401e27

block_401ef5:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpA_type* @adcexpA to i64), i64* %10, align 8, !tbaa !1240
  %188 = inttoptr i64 %564 to i64*
  %189 = load i64, i64* %188
  store i64 %189, i64* %12, align 8, !tbaa !1240
  %190 = add i64 %561, -96
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %11, align 8, !tbaa !1240
  %193 = load i64, i64* %13, align 8, !tbaa !1240
  %194 = add i64 %193, -8
  %195 = inttoptr i64 %194 to i64*
  store i64 4202252, i64* %195
  store i64 %194, i64* %13, align 8, !tbaa !1240
  %196 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %563)
  %197 = load i64, i64* %14, align 8
  %198 = add i64 %197, -176
  %199 = load i64, i64* %8, align 8
  %200 = load i64, i64* %3, align 8
  %201 = inttoptr i64 %198 to i64*
  store i64 %199, i64* %201
  %202 = add i64 %200, 42
  br label %block_401f36

block_402176:                                     ; preds = %block_40214c
  %203 = add i64 %628, -156
  %204 = inttoptr i64 %203 to i32*
  store i32 64, i32* %204
  br label %block_40218f

block_40215d:                                     ; preds = %block_40214c
  %205 = add i64 %628, -156
  %206 = inttoptr i64 %205 to i32*
  store i32 8, i32* %206
  br label %block_40218f

block_401fdb:                                     ; preds = %block_401fc5
  %207 = add i64 %321, 23
  %208 = load i64, i64* %13, align 8, !tbaa !1240
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 %207, i64* %210
  %211 = inttoptr i64 %209 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %3, align 8, !alias.scope !2016, !noalias !2019
  store i64 %208, i64* %13, align 8, !alias.scope !2016, !noalias !2019
  %213 = tail call i64 @free(i64 %318), !noalias !2016
  %214 = load i64, i64* %14, align 8
  %215 = load i64, i64* %3, align 8
  br label %block_401ff2

block_402258:                                     ; preds = %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_402223
  %216 = phi i64 [ %1032, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %705, %block_402223 ]
  %217 = phi i64 [ %1213, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %714, %block_402223 ]
  %218 = phi %struct.Memory* [ %1033, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %1033, %block_402223 ]
  %219 = add i64 %216, -88
  %220 = inttoptr i64 %219 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %221, 1
  %223 = inttoptr i64 %219 to i64*
  store i64 %222, i64* %223
  %224 = add i64 %217, -98
  br label %block_4021f6

block_401ed2:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpW_type* @adcexpW to i64), i64* %10, align 8, !tbaa !1240
  %225 = inttoptr i64 %564 to i64*
  %226 = load i64, i64* %225
  store i64 %226, i64* %12, align 8, !tbaa !1240
  %227 = add i64 %561, -96
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %11, align 8, !tbaa !1240
  %230 = load i64, i64* %13, align 8, !tbaa !1240
  %231 = add i64 %230, -8
  %232 = inttoptr i64 %231 to i64*
  store i64 4202217, i64* %232
  store i64 %231, i64* %13, align 8, !tbaa !1240
  %233 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %563)
  %234 = load i64, i64* %14, align 8
  %235 = add i64 %234, -176
  %236 = load i64, i64* %8, align 8
  %237 = load i64, i64* %3, align 8
  %238 = inttoptr i64 %235 to i64*
  store i64 %236, i64* %238
  %239 = add i64 %237, 77
  br label %block_401f36

block_4020d7:                                     ; preds = %block_402046
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 845), i64* %11, align 8, !tbaa !1240
  %240 = load i64, i64* @stderr
  store i64 %240, i64* %12, align 8, !tbaa !1240
  %241 = add i64 %1158, -136
  %242 = inttoptr i64 %241 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %10, align 8, !tbaa !1240
  %244 = add i64 %1164, 32
  %245 = load i64, i64* %13, align 8, !tbaa !1240
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %1106, align 8, !alias.scope !2021, !noalias !2024
  %249 = load i64, i64* %1108, align 8, !alias.scope !2021, !noalias !2024
  %250 = load i64, i64* %1109, align 8, !alias.scope !2021, !noalias !2024
  %251 = inttoptr i64 %245 to i64*
  %252 = load i64, i64* %251
  %253 = add i64 %245, 8
  %254 = inttoptr i64 %253 to i64*
  %255 = load i64, i64* %254
  %256 = add i64 %245, 16
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  %259 = add i64 %245, 24
  %260 = inttoptr i64 %259 to i64*
  %261 = load i64, i64* %260
  %262 = add i64 %245, 32
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263
  %265 = add i64 %245, 40
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %245, 48
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = add i64 %245, 56
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %245, 64
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %245, 72
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  %280 = inttoptr i64 %246 to i64*
  %281 = load i64, i64* %280
  store i64 %281, i64* %3, align 8, !alias.scope !2021, !noalias !2024
  store i64 %245, i64* %13, align 8, !alias.scope !2021, !noalias !2024
  %282 = tail call i64 @fprintf(i64 %240, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 845), i64 %243, i64 %248, i64 %249, i64 %250, i64 %252, i64 %255, i64 %258, i64 %261, i64 %264, i64 %267, i64 %270, i64 %273, i64 %276, i64 %279), !noalias !2021
  %283 = load i64, i64* %14, align 8
  %284 = add i64 %283, -4
  %285 = inttoptr i64 %284 to i32*
  store i32 0, i32* %285
  %286 = add i64 %283, -204
  %287 = trunc i64 %282 to i32
  %288 = inttoptr i64 %286 to i32*
  store i32 %287, i32* %288
  br label %block_402370

block_401f52:                                     ; preds = %block_401f47, %block_401f36
  %289 = phi i64 [ %758, %block_401f36 ], [ %1014, %block_401f47 ]
  %290 = phi %struct.Memory* [ %737, %block_401f36 ], [ %737, %block_401f47 ]
  %291 = inttoptr i64 %738 to i64*
  %292 = load i64, i64* %291
  %293 = add i64 %736, -120
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %736, -80
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = shl i64 %298, 4
  %300 = add i64 %299, %295
  %301 = inttoptr i64 %300 to i64*
  store i64 %292, i64* %301
  %302 = inttoptr i64 %296 to i64*
  %303 = load i64, i64* %302
  %304 = inttoptr i64 %293 to i64*
  %305 = load i64, i64* %304
  %306 = shl i64 %303, 4
  %307 = add i64 %306, %305
  %308 = add i64 %307, 8
  %309 = inttoptr i64 %308 to i64*
  store i64 %303, i64* %309
  %310 = load i64, i64* %14, align 8
  %311 = add i64 %310, -80
  %312 = inttoptr i64 %311 to i64*
  %313 = load i64, i64* %312
  %314 = add i64 %313, 1
  %315 = inttoptr i64 %311 to i64*
  store i64 %314, i64* %315
  %316 = add i64 %289, -299
  br label %block_401e27

block_40216c:                                     ; preds = %block_40214c
  br label %block_40218f

block_401fc5:                                     ; preds = %block_401fad
  %317 = inttoptr i64 %557 to i64*
  %318 = load i64, i64* %317
  %319 = icmp eq i64 %318, 0
  %320 = select i1 %319, i64 45, i64 22
  %321 = add i64 %560, %320
  br i1 %319, label %block_401ff2, label %block_401fdb

block_402035:                                     ; preds = %block_402021, %block_401fc0
  %322 = phi i64 [ %780, %block_402021 ], [ %601, %block_401fc0 ]
  %323 = phi i64 [ %779, %block_402021 ], [ %782, %block_401fc0 ]
  %324 = phi %struct.Memory* [ %761, %block_402021 ], [ %783, %block_401fc0 ]
  %325 = add i64 %323, -80
  %326 = inttoptr i64 %325 to i64*
  %327 = load i64, i64* %326
  %328 = add i64 %327, 1
  %329 = inttoptr i64 %325 to i64*
  store i64 %328, i64* %329
  %330 = add i64 %322, -154
  br label %block_401f9b

block_401e51:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57
  %331 = add i64 %561, -176
  %332 = inttoptr i64 %331 to i64*
  store i64 1, i64* %332
  %333 = add i64 %561, -53
  %334 = inttoptr i64 %333 to i8*
  %335 = load i8, i8* %334
  %336 = sext i8 %335 to i32
  %337 = add nsw i32 %336, -65
  %338 = zext i32 %337 to i64
  %339 = lshr i32 %337, 31
  %340 = add nsw i32 %336, -87
  %341 = icmp ult i32 %337, 22
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %20, align 1, !tbaa !1264
  %343 = and i32 %340, 255
  %344 = tail call i32 @llvm.ctpop.i32(i32 %343) #10
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = xor i8 %346, 1
  store i8 %347, i8* %21, align 1, !tbaa !1278
  %348 = xor i32 %337, 16
  %349 = xor i32 %348, %340
  %350 = lshr i32 %349, 4
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  store i8 %352, i8* %22, align 1, !tbaa !1279
  %353 = icmp eq i32 %340, 0
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %23, align 1, !tbaa !1280
  %355 = lshr i32 %340, 31
  %356 = trunc i32 %355 to i8
  store i8 %356, i8* %24, align 1, !tbaa !1281
  %357 = xor i32 %355, %339
  %358 = add nuw nsw i32 %357, %339
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %25, align 1, !tbaa !1282
  %361 = add i64 %561, -192
  %362 = inttoptr i64 %361 to i64*
  store i64 %338, i64* %362
  %363 = add i64 %561, -196
  %364 = inttoptr i64 %363 to i32*
  store i32 %340, i32* %364
  %365 = or i1 %353, %341
  %366 = select i1 %365, i64 42, i64 229
  %367 = add i64 %600, %366
  br i1 %365, label %block_401e7b, label %block_401f36

block_401eaf:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpS_type* @adcexpS to i64), i64* %10, align 8, !tbaa !1240
  %368 = inttoptr i64 %564 to i64*
  %369 = load i64, i64* %368
  store i64 %369, i64* %12, align 8, !tbaa !1240
  %370 = add i64 %561, -96
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %11, align 8, !tbaa !1240
  %373 = load i64, i64* %13, align 8, !tbaa !1240
  %374 = add i64 %373, -8
  %375 = inttoptr i64 %374 to i64*
  store i64 4202182, i64* %375
  store i64 %374, i64* %13, align 8, !tbaa !1240
  %376 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %563)
  %377 = load i64, i64* %14, align 8
  %378 = add i64 %377, -176
  %379 = load i64, i64* %8, align 8
  %380 = load i64, i64* %3, align 8
  %381 = inttoptr i64 %378 to i64*
  store i64 %379, i64* %381
  %382 = add i64 %380, 112
  br label %block_401f36

block_4021ae:                                     ; preds = %block_40219a
  %383 = add i64 %846, -32
  %384 = inttoptr i64 %383 to i64*
  store i64 0, i64* %384
  %385 = add i64 %846, -144
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %867, 32
  %389 = load i64, i64* %13, align 8, !tbaa !1240
  %390 = add i64 %389, -8
  %391 = inttoptr i64 %390 to i64*
  store i64 %388, i64* %391
  %392 = load i64, i64* %1107, align 8, !alias.scope !2026, !noalias !2029
  %393 = load i64, i64* %1108, align 8, !alias.scope !2026, !noalias !2029
  %394 = load i64, i64* %1109, align 8, !alias.scope !2026, !noalias !2029
  %395 = inttoptr i64 %389 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %389, 8
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %389, 16
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %389, 24
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %389, 32
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %389, 40
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410
  %412 = add i64 %389, 48
  %413 = inttoptr i64 %412 to i64*
  %414 = load i64, i64* %413
  %415 = add i64 %389, 56
  %416 = inttoptr i64 %415 to i64*
  %417 = load i64, i64* %416
  %418 = add i64 %389, 64
  %419 = inttoptr i64 %418 to i64*
  %420 = load i64, i64* %419
  %421 = add i64 %389, 72
  %422 = inttoptr i64 %421 to i64*
  %423 = load i64, i64* %422
  %424 = inttoptr i64 %390 to i64*
  %425 = load i64, i64* %424
  store i64 %425, i64* %3, align 8, !alias.scope !2026, !noalias !2029
  store i64 %389, i64* %13, align 8, !alias.scope !2026, !noalias !2029
  %426 = tail call i64 @fprintf(i64 %387, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 886), i64 %392, i64 %854, i64 %393, i64 %394, i64 %396, i64 %399, i64 %402, i64 %405, i64 %408, i64 %411, i64 %414, i64 %417, i64 %420, i64 %423), !noalias !2026
  %427 = load i64, i64* %14, align 8
  %428 = add i64 %427, -120
  %429 = load i64, i64* %3, align 8
  %430 = inttoptr i64 %428 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %427, -80
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = shl i64 %434, 4
  %436 = add i64 %435, %431
  %437 = add i64 %436, 8
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %427, -168
  %441 = inttoptr i64 %440 to i64*
  store i64 %439, i64* %441
  %442 = add i64 %427, -88
  %443 = inttoptr i64 %442 to i64*
  store i64 0, i64* %443
  %444 = add i64 %427, -224
  %445 = trunc i64 %426 to i32
  %446 = add i64 %429, 40
  %447 = inttoptr i64 %444 to i32*
  store i32 %445, i32* %447
  %448 = load i64, i64* %1108, align 8
  %449 = load i64, i64* %1109, align 8
  br label %block_4021f6

block_40226e:                                     ; preds = %block_4021f6
  %450 = add i64 %1032, -144
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %1032, -120
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %1032, -80
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = shl i64 %458, 4
  %460 = add i64 %459, %455
  %461 = inttoptr i64 %460 to i64*
  %462 = load i64, i64* %461
  %463 = add i64 %1053, 42
  %464 = load i64, i64* %13, align 8, !tbaa !1240
  %465 = add i64 %464, -8
  %466 = inttoptr i64 %465 to i64*
  store i64 %463, i64* %466
  %467 = load i64, i64* %1108, align 8, !alias.scope !2031, !noalias !2034
  %468 = load i64, i64* %1109, align 8, !alias.scope !2031, !noalias !2034
  %469 = inttoptr i64 %464 to i64*
  %470 = load i64, i64* %469
  %471 = add i64 %464, 8
  %472 = inttoptr i64 %471 to i64*
  %473 = load i64, i64* %472
  %474 = add i64 %464, 16
  %475 = inttoptr i64 %474 to i64*
  %476 = load i64, i64* %475
  %477 = add i64 %464, 24
  %478 = inttoptr i64 %477 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %464, 32
  %481 = inttoptr i64 %480 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %464, 40
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %464, 48
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %464, 56
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %464, 64
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %464, 72
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = inttoptr i64 %465 to i64*
  %499 = load i64, i64* %498
  store i64 %499, i64* %3, align 8, !alias.scope !2031, !noalias !2034
  store i64 %464, i64* %13, align 8, !alias.scope !2031, !noalias !2034
  %500 = tail call i64 @fprintf(i64 %452, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 903), i64 %462, i64 %459, i64 %467, i64 %468, i64 %470, i64 %473, i64 %476, i64 %479, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497), !noalias !2031
  store i64 %500, i64* %78, align 8, !alias.scope !2031, !noalias !2034
  %501 = load i64, i64* %14, align 8
  %502 = add i64 %501, -32
  %503 = load i64, i64* %3, align 8
  %504 = inttoptr i64 %502 to i64*
  %505 = load i64, i64* %504
  %506 = shl i64 %505, 2
  %507 = add i64 %506, 8
  %508 = add i64 %501, -120
  %509 = inttoptr i64 %508 to i64*
  %510 = load i64, i64* %509
  %511 = add i64 %501, -80
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = shl i64 %513, 4
  %515 = add i64 %514, %510
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = mul i64 %517, %507
  %519 = load i64, i64* %14, align 8
  %520 = add i64 %519, -24
  %521 = inttoptr i64 %520 to i64*
  %522 = load i64, i64* %521
  %523 = add i64 %522, %518
  %524 = inttoptr i64 %520 to i64*
  store i64 %523, i64* %524
  %525 = add i64 %519, -120
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %519, -80
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = shl i64 %530, 4
  store i64 %531, i64* %10, align 8, !tbaa !1240
  %532 = add i64 %531, %527
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  %535 = load i64, i64* %14, align 8
  %536 = add i64 %535, -40
  %537 = inttoptr i64 %536 to i64*
  %538 = load i64, i64* %537
  %539 = add i64 %538, %534
  %540 = inttoptr i64 %536 to i64*
  store i64 %539, i64* %540
  %541 = add i64 %535, -232
  %542 = load i32, i32* %7, align 4
  %543 = inttoptr i64 %541 to i32*
  store i32 %542, i32* %543
  %544 = add i64 %535, -156
  %545 = inttoptr i64 %544 to i32*
  %546 = load i32, i32* %545
  %547 = sext i32 %546 to i64
  %548 = add i64 %535, -80
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %550, %547
  %552 = inttoptr i64 %548 to i64*
  store i64 %551, i64* %552
  %553 = add i64 %503, -254
  br label %block_40219a

block_401fad:                                     ; preds = %block_401f9b
  %554 = shl i64 %786, 3
  %555 = add i64 %803, %554
  %556 = inttoptr i64 %555 to i64*
  %557 = load i64, i64* %556
  %558 = icmp eq i64 %557, 0
  %559 = select i1 %558, i64 19, i64 24
  %560 = add i64 %800, %559
  br i1 %558, label %block_401fc0, label %block_401fc5

block_401e27:                                     ; preds = %block_401f52, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15
  %561 = phi i64 [ %183, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15 ], [ %310, %block_401f52 ]
  %562 = phi i64 [ %186, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15 ], [ %316, %block_401f52 ]
  %563 = phi %struct.Memory* [ %182, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit15 ], [ %290, %block_401f52 ]
  %564 = add i64 %561, -80
  %565 = inttoptr i64 %564 to i64*
  %566 = load i64, i64* %565
  %567 = add i64 %561, -60
  %568 = inttoptr i64 %567 to i32*
  %569 = load i32, i32* %568
  %570 = zext i32 %569 to i64
  store i64 %570, i64* %10, align 8, !tbaa !1240
  %571 = add i64 %561, -184
  %572 = inttoptr i64 %571 to i64*
  store i64 %566, i64* %572
  %573 = trunc i32 %569 to i5
  switch i5 %573, label %574 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57
    i5 1, label %582
  ]

; <label>:574:                                    ; preds = %block_401e27
  %575 = and i32 %569, 31
  %576 = zext i32 %575 to i64
  %577 = add nuw nsw i64 %576, 4294967295
  %578 = and i64 %577, 4294967295
  %579 = shl i64 1, %578
  %580 = trunc i64 %579 to i32
  %581 = shl i32 %580, 1
  br label %582

; <label>:582:                                    ; preds = %574, %block_401e27
  %583 = phi i32 [ %581, %574 ], [ 2, %block_401e27 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57: ; preds = %582, %block_401e27
  %584 = phi i32 [ 1, %block_401e27 ], [ %583, %582 ]
  %585 = sext i32 %584 to i64
  store i64 %585, i64* %11, align 8, !tbaa !1240
  %586 = inttoptr i64 %571 to i64*
  %587 = load i64, i64* %586
  store i64 %587, i64* %12, align 8, !tbaa !1240
  %588 = sub i64 %587, %585
  %589 = lshr i64 %588, 63
  %590 = trunc i64 %589 to i8
  %591 = lshr i64 %587, 63
  %592 = lshr i64 %585, 63
  %593 = xor i64 %592, %591
  %594 = xor i64 %589, %591
  %595 = add nuw nsw i64 %594, %593
  %596 = icmp eq i64 %595, 2
  %597 = icmp ne i8 %590, 0
  %598 = xor i1 %597, %596
  %599 = select i1 %598, i64 42, i64 364
  %600 = add i64 %562, %599
  br i1 %598, label %block_401e51, label %block_401f93

block_401fc0:                                     ; preds = %block_401fad
  %601 = add i64 %560, 117
  br label %block_402035

block_402109:                                     ; preds = %block_402046
  %602 = add i64 %1158, -120
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %12, align 8, !tbaa !1240
  %605 = add i64 %1158, -60
  %606 = inttoptr i64 %605 to i8*
  %607 = load i8, i8* %606
  %608 = trunc i8 %607 to i5
  switch i5 %608, label %609 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58
    i5 1, label %617
  ]

; <label>:609:                                    ; preds = %block_402109
  %610 = and i8 %607, 31
  %611 = zext i8 %610 to i64
  %612 = add nuw nsw i64 %611, 4294967295
  %613 = and i64 %612, 4294967295
  %614 = shl i64 1, %613
  %615 = trunc i64 %614 to i32
  %616 = shl i32 %615, 1
  br label %617

; <label>:617:                                    ; preds = %609, %block_402109
  %618 = phi i32 [ %616, %609 ], [ 2, %block_402109 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58: ; preds = %617, %block_402109
  %619 = phi i32 [ 1, %block_402109 ], [ %618, %617 ]
  %620 = sext i32 %619 to i64
  store i64 %620, i64* %11, align 8, !tbaa !1240
  store i64 16, i64* %10, align 8, !tbaa !1240
  %621 = add i64 %1164, 36
  %622 = load i64, i64* %13, align 8, !tbaa !1240
  %623 = add i64 %622, -8
  %624 = inttoptr i64 %623 to i64*
  store i64 %621, i64* %624
  %625 = inttoptr i64 %623 to i64*
  %626 = load i64, i64* %625
  store i64 %626, i64* %3, align 8, !alias.scope !2036, !noalias !2039
  store i64 %622, i64* %13, align 8, !alias.scope !2036, !noalias !2039
  %627 = tail call i64 @qsort(i64 %604, i64 %620, i64 16, i64 zext (i32 trunc (i64 and (i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @CompareViewsBySize to i64), i64 4294967295) to i32) to i64)), !noalias !2036
  %628 = load i64, i64* %14, align 8
  %629 = add i64 %628, -53
  %630 = load i64, i64* %3, align 8
  %631 = inttoptr i64 %629 to i8*
  %632 = load i8, i8* %631
  %633 = sext i8 %632 to i32
  %634 = add nsw i32 %633, -65
  %635 = zext i32 %634 to i64
  %636 = lshr i32 %634, 31
  %637 = add nsw i32 %633, -87
  %638 = icmp ult i32 %634, 22
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %20, align 1, !tbaa !1264
  %640 = and i32 %637, 255
  %641 = tail call i32 @llvm.ctpop.i32(i32 %640) #10
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  store i8 %644, i8* %21, align 1, !tbaa !1278
  %645 = xor i32 %634, 16
  %646 = xor i32 %645, %637
  %647 = lshr i32 %646, 4
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  store i8 %649, i8* %22, align 1, !tbaa !1279
  %650 = icmp eq i32 %637, 0
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %23, align 1, !tbaa !1280
  %652 = lshr i32 %637, 31
  %653 = trunc i32 %652 to i8
  store i8 %653, i8* %24, align 1, !tbaa !1281
  %654 = xor i32 %652, %636
  %655 = add nuw nsw i32 %654, %636
  %656 = icmp eq i32 %655, 2
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %25, align 1, !tbaa !1282
  %658 = add i64 %628, -216
  %659 = inttoptr i64 %658 to i64*
  store i64 %635, i64* %659
  %660 = add i64 %628, -220
  %661 = inttoptr i64 %660 to i32*
  store i32 %637, i32* %661
  %662 = or i1 %650, %638
  %663 = select i1 %662, i64 31, i64 98
  %664 = add i64 %630, %663
  br i1 %662, label %block_40214c, label %block_40218f

block_402223:                                     ; preds = %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %665 = add i64 %1032, -144
  %666 = inttoptr i64 %665 to i64*
  %667 = load i64, i64* %666
  %668 = add i64 %1036, 1
  %669 = add i64 %1213, 35
  %670 = load i64, i64* %13, align 8, !tbaa !1240
  %671 = add i64 %670, -8
  %672 = inttoptr i64 %671 to i64*
  store i64 %669, i64* %672
  %673 = inttoptr i64 %670 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %670, 8
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %670, 16
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %670, 24
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %670, 32
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %670, 40
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %670, 48
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %670, 56
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = add i64 %670, 64
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = add i64 %670, 72
  %700 = inttoptr i64 %699 to i64*
  %701 = load i64, i64* %700
  %702 = inttoptr i64 %671 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %3, align 8, !alias.scope !2041, !noalias !2044
  store i64 %670, i64* %13, align 8, !alias.scope !2041, !noalias !2044
  %704 = tail call i64 @fprintf(i64 %667, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 897), i64 %668, i64 %1036, i64 %448, i64 %449, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695, i64 %698, i64 %701), !noalias !2041
  %705 = load i64, i64* %14, align 8
  %706 = add i64 %705, -32
  %707 = load i64, i64* %3, align 8
  %708 = inttoptr i64 %706 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %709, 1
  %711 = inttoptr i64 %706 to i64*
  store i64 %710, i64* %711
  %712 = add i64 %705, -228
  %713 = trunc i64 %704 to i32
  %714 = add i64 %707, 18
  %715 = inttoptr i64 %712 to i32*
  store i32 %713, i32* %715
  br label %block_402258

block_401ff2:                                     ; preds = %block_401fc5, %block_401fdb
  %716 = phi i64 [ %321, %block_401fc5 ], [ %215, %block_401fdb ]
  %717 = phi i64 [ %782, %block_401fc5 ], [ %214, %block_401fdb ]
  %718 = phi %struct.Memory* [ %783, %block_401fc5 ], [ %783, %block_401fdb ]
  %719 = add i64 %717, -96
  %720 = inttoptr i64 %719 to i64*
  %721 = load i64, i64* %720
  %722 = add i64 %717, -80
  %723 = inttoptr i64 %722 to i64*
  %724 = load i64, i64* %723
  %725 = shl i64 %724, 3
  %726 = add i64 %721, %725
  %727 = inttoptr i64 %726 to i64*
  %728 = load i64, i64* %727
  %729 = add i64 %728, 8
  %730 = inttoptr i64 %729 to i64*
  %731 = load i64, i64* %730
  %732 = icmp eq i64 %731, 0
  %733 = select i1 %732, i64 47, i64 23
  %734 = add i64 %716, %733
  br i1 %732, label %block_402021, label %block_402009

block_401f36:                                     ; preds = %block_401e8c, %block_401f18, %block_401e7b, %block_401eaf, %block_401e51, %block_401ed2, %block_401ef5
  %735 = phi i64 [ %367, %block_401e51 ], [ %1029, %block_401f18 ], [ %202, %block_401ef5 ], [ %239, %block_401ed2 ], [ %1188, %block_401e8c ], [ %382, %block_401eaf ], [ 4202294, %block_401e7b ]
  %736 = phi i64 [ %561, %block_401e51 ], [ %1025, %block_401f18 ], [ %197, %block_401ef5 ], [ %234, %block_401ed2 ], [ %1183, %block_401e8c ], [ %377, %block_401eaf ], [ %561, %block_401e7b ]
  %737 = phi %struct.Memory* [ %563, %block_401e51 ], [ %1024, %block_401f18 ], [ %196, %block_401ef5 ], [ %233, %block_401ed2 ], [ %1182, %block_401e8c ], [ %376, %block_401eaf ], [ %563, %block_401e7b ]
  %738 = add i64 %736, -176
  %739 = inttoptr i64 %738 to i64*
  %740 = load i64, i64* %739
  %741 = add i64 %736, -72
  %742 = inttoptr i64 %741 to i64*
  %743 = load i64, i64* %742
  %744 = sub i64 %740, %743
  %745 = icmp eq i64 %744, 0
  %746 = lshr i64 %744, 63
  %747 = trunc i64 %746 to i8
  %748 = lshr i64 %740, 63
  %749 = lshr i64 %743, 63
  %750 = xor i64 %749, %748
  %751 = xor i64 %746, %748
  %752 = add nuw nsw i64 %751, %750
  %753 = icmp eq i64 %752, 2
  %754 = icmp ne i8 %747, 0
  %755 = xor i1 %754, %753
  %756 = or i1 %745, %755
  %757 = select i1 %756, i64 28, i64 17
  %758 = add i64 %735, %757
  br i1 %756, label %block_401f52, label %block_401f47

block_402021:                                     ; preds = %block_402009, %block_401ff2
  %759 = phi i64 [ %734, %block_401ff2 ], [ %1197, %block_402009 ]
  %760 = phi i64 [ %717, %block_401ff2 ], [ %1196, %block_402009 ]
  %761 = phi %struct.Memory* [ %718, %block_401ff2 ], [ %718, %block_402009 ]
  %762 = add i64 %760, -96
  %763 = inttoptr i64 %762 to i64*
  %764 = load i64, i64* %763
  %765 = add i64 %760, -80
  %766 = inttoptr i64 %765 to i64*
  %767 = load i64, i64* %766
  %768 = shl i64 %767, 3
  %769 = add i64 %764, %768
  %770 = inttoptr i64 %769 to i64*
  %771 = load i64, i64* %770
  %772 = add i64 %759, 20
  %773 = load i64, i64* %13, align 8, !tbaa !1240
  %774 = add i64 %773, -8
  %775 = inttoptr i64 %774 to i64*
  store i64 %772, i64* %775
  %776 = inttoptr i64 %774 to i64*
  %777 = load i64, i64* %776
  store i64 %777, i64* %3, align 8, !alias.scope !2046, !noalias !2049
  store i64 %773, i64* %13, align 8, !alias.scope !2046, !noalias !2049
  %778 = tail call i64 @free(i64 %771), !noalias !2046
  %779 = load i64, i64* %14, align 8
  %780 = load i64, i64* %3, align 8
  br label %block_402035

block_402171:                                     ; preds = %block_40214c
  br label %block_40218f

block_401f9b:                                     ; preds = %block_401f93, %block_402035
  %781 = phi i64 [ %1054, %block_401f93 ], [ %330, %block_402035 ]
  %782 = phi i64 [ %561, %block_401f93 ], [ %323, %block_402035 ]
  %783 = phi %struct.Memory* [ %563, %block_401f93 ], [ %324, %block_402035 ]
  %784 = add i64 %782, -80
  %785 = inttoptr i64 %784 to i64*
  %786 = load i64, i64* %785
  %787 = load i64, i64* bitcast (%UpPrimeLim_type* @UpPrimeLim to i64*)
  %788 = sub i64 %786, %787
  %789 = lshr i64 %788, 63
  %790 = trunc i64 %789 to i8
  %791 = lshr i64 %786, 63
  %792 = lshr i64 %787, 63
  %793 = xor i64 %792, %791
  %794 = xor i64 %789, %791
  %795 = add nuw nsw i64 %794, %793
  %796 = icmp eq i64 %795, 2
  %797 = icmp ne i8 %790, 0
  %798 = xor i1 %797, %796
  %799 = select i1 %798, i64 18, i64 171
  %800 = add i64 %781, %799
  %801 = add i64 %782, -96
  %802 = inttoptr i64 %801 to i64*
  %803 = load i64, i64* %802
  br i1 %798, label %block_401fad, label %block_402046

block_401e7b:                                     ; preds = %block_401e51
  %804 = inttoptr i64 %361 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %8, align 8, !tbaa !1240
  %806 = shl i64 %805, 3
  %807 = add i64 %806, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 192)
  %808 = inttoptr i64 %807 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %9, align 8, !tbaa !1240
  store i64 %809, i64* %3, align 8, !tbaa !1240
  switch i64 %809, label %1216 [
    i64 4202294, label %block_401f36
    i64 4202159, label %block_401eaf
    i64 4202124, label %block_401e8c
    i64 4202194, label %block_401ed2
    i64 4202229, label %block_401ef5
    i64 4202264, label %block_401f18
  ]

block_402370:                                     ; preds = %block_4022f3, %block_4020d7
  %810 = phi i64 [ %1005, %block_4022f3 ], [ %283, %block_4020d7 ]
  %811 = phi %struct.Memory* [ %847, %block_4022f3 ], [ %783, %block_4020d7 ]
  %812 = add i64 %810, -4
  %813 = inttoptr i64 %812 to i32*
  %814 = load i32, i32* %813
  %815 = zext i32 %814 to i64
  store i64 %815, i64* %8, align 8, !tbaa !1240
  %816 = load i64, i64* %13, align 8
  %817 = add i64 %816, 256
  %818 = icmp ugt i64 %816, -257
  %819 = zext i1 %818 to i8
  store i8 %819, i8* %20, align 1, !tbaa !1264
  %820 = trunc i64 %817 to i32
  %821 = and i32 %820, 255
  %822 = tail call i32 @llvm.ctpop.i32(i32 %821) #10
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = xor i8 %824, 1
  store i8 %825, i8* %21, align 1, !tbaa !1278
  %826 = xor i64 %817, %816
  %827 = lshr i64 %826, 4
  %828 = trunc i64 %827 to i8
  %829 = and i8 %828, 1
  store i8 %829, i8* %22, align 1, !tbaa !1279
  %830 = icmp eq i64 %817, 0
  %831 = zext i1 %830 to i8
  store i8 %831, i8* %23, align 1, !tbaa !1280
  %832 = lshr i64 %817, 63
  %833 = trunc i64 %832 to i8
  store i8 %833, i8* %24, align 1, !tbaa !1281
  %834 = lshr i64 %816, 63
  %835 = xor i64 %832, %834
  %836 = add nuw nsw i64 %835, %832
  %837 = icmp eq i64 %836, 2
  %838 = zext i1 %837 to i8
  store i8 %838, i8* %25, align 1, !tbaa !1282
  %839 = add i64 %816, 264
  %840 = inttoptr i64 %817 to i64*
  %841 = load i64, i64* %840
  store i64 %841, i64* %14, align 8, !tbaa !1240
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %3, align 8, !tbaa !1240
  %844 = add i64 %816, 272
  store i64 %844, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %811

block_40219a:                                     ; preds = %block_40218f, %block_40226e
  %845 = phi i64 [ %1172, %block_40218f ], [ %553, %block_40226e ]
  %846 = phi i64 [ %628, %block_40218f ], [ %535, %block_40226e ]
  %847 = phi %struct.Memory* [ %1166, %block_40218f ], [ %1033, %block_40226e ]
  %848 = add i64 %846, -80
  %849 = inttoptr i64 %848 to i64*
  %850 = load i64, i64* %849
  %851 = add i64 %846, -152
  %852 = inttoptr i64 %851 to i32*
  %853 = load i32, i32* %852
  %854 = sext i32 %853 to i64
  %855 = sub i64 %850, %854
  %856 = lshr i64 %855, 63
  %857 = trunc i64 %856 to i8
  %858 = lshr i64 %850, 63
  %859 = lshr i64 %854, 63
  %860 = xor i64 %858, %859
  %861 = xor i64 %856, %858
  %862 = add nuw nsw i64 %861, %860
  %863 = icmp eq i64 %862, 2
  %864 = icmp ne i8 %857, 0
  %865 = xor i1 %864, %863
  %866 = select i1 %865, i64 20, i64 345
  %867 = add i64 %845, %866
  br i1 %865, label %block_4021ae, label %block_4022f3

block_4022f3:                                     ; preds = %block_40219a
  %868 = add i64 %846, -144
  %869 = inttoptr i64 %868 to i64*
  %870 = load i64, i64* %869
  %871 = add i64 %846, -24
  %872 = inttoptr i64 %871 to i64*
  %873 = load i64, i64* %872
  %874 = add i64 %846, -40
  %875 = inttoptr i64 %874 to i64*
  %876 = load i64, i64* %875
  %877 = add i64 %867, 32
  %878 = load i64, i64* %13, align 8, !tbaa !1240
  %879 = add i64 %878, -8
  %880 = inttoptr i64 %879 to i64*
  store i64 %877, i64* %880
  %881 = load i64, i64* %1108, align 8, !alias.scope !2051, !noalias !2054
  %882 = load i64, i64* %1109, align 8, !alias.scope !2051, !noalias !2054
  %883 = inttoptr i64 %878 to i64*
  %884 = load i64, i64* %883
  %885 = add i64 %878, 8
  %886 = inttoptr i64 %885 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %878, 16
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %878, 24
  %892 = inttoptr i64 %891 to i64*
  %893 = load i64, i64* %892
  %894 = add i64 %878, 32
  %895 = inttoptr i64 %894 to i64*
  %896 = load i64, i64* %895
  %897 = add i64 %878, 40
  %898 = inttoptr i64 %897 to i64*
  %899 = load i64, i64* %898
  %900 = add i64 %878, 48
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = add i64 %878, 56
  %904 = inttoptr i64 %903 to i64*
  %905 = load i64, i64* %904
  %906 = add i64 %878, 64
  %907 = inttoptr i64 %906 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %878, 72
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = inttoptr i64 %879 to i64*
  %913 = load i64, i64* %912
  store i64 %913, i64* %3, align 8, !alias.scope !2051, !noalias !2054
  store i64 %878, i64* %13, align 8, !alias.scope !2051, !noalias !2054
  %914 = tail call i64 @fprintf(i64 %870, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 921), i64 %873, i64 %876, i64 %881, i64 %882, i64 %884, i64 %887, i64 %890, i64 %893, i64 %896, i64 %899, i64 %902, i64 %905, i64 %908, i64 %911), !noalias !2051
  %915 = load i64, i64* %14, align 8
  %916 = add i64 %915, -144
  %917 = load i64, i64* %3, align 8
  %918 = inttoptr i64 %916 to i64*
  %919 = load i64, i64* %918
  %920 = add i64 %915, -236
  %921 = trunc i64 %914 to i32
  %922 = inttoptr i64 %920 to i32*
  store i32 %921, i32* %922
  %923 = add i64 %917, 18
  %924 = load i64, i64* %13, align 8, !tbaa !1240
  %925 = add i64 %924, -8
  %926 = inttoptr i64 %925 to i64*
  store i64 %923, i64* %926
  %927 = inttoptr i64 %925 to i64*
  %928 = load i64, i64* %927
  store i64 %928, i64* %3, align 8, !alias.scope !2056, !noalias !2059
  store i64 %924, i64* %13, align 8, !alias.scope !2056, !noalias !2059
  %929 = tail call i64 @fclose(i64 %919), !noalias !2056
  %930 = load i64, i64* %14, align 8
  %931 = add i64 %930, -120
  %932 = load i64, i64* %3, align 8
  %933 = inttoptr i64 %931 to i64*
  %934 = load i64, i64* %933
  store i64 %934, i64* %9, align 8, !tbaa !1240
  %935 = add i64 %930, -240
  %936 = trunc i64 %929 to i32
  %937 = inttoptr i64 %935 to i32*
  store i32 %936, i32* %937
  %938 = add i64 %932, 18
  %939 = load i64, i64* %13, align 8, !tbaa !1240
  %940 = add i64 %939, -8
  %941 = inttoptr i64 %940 to i64*
  store i64 %938, i64* %941
  %942 = inttoptr i64 %940 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %3, align 8, !alias.scope !2061, !noalias !2064
  store i64 %939, i64* %13, align 8, !alias.scope !2061, !noalias !2064
  %944 = tail call i64 @free(i64 %934), !noalias !2061
  %945 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 968), i64* %11, align 8, !tbaa !1240
  %946 = load i64, i64* @stdout
  %947 = load i64, i64* %14, align 8
  %948 = add i64 %947, -136
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  store i64 %950, i64* %10, align 8, !tbaa !1240
  %951 = add i64 %945, 32
  %952 = load i64, i64* %13, align 8, !tbaa !1240
  %953 = add i64 %952, -8
  %954 = inttoptr i64 %953 to i64*
  store i64 %951, i64* %954
  %955 = load i64, i64* %1106, align 8, !alias.scope !2066, !noalias !2069
  %956 = load i64, i64* %1108, align 8, !alias.scope !2066, !noalias !2069
  %957 = load i64, i64* %1109, align 8, !alias.scope !2066, !noalias !2069
  %958 = inttoptr i64 %952 to i64*
  %959 = load i64, i64* %958
  %960 = add i64 %952, 8
  %961 = inttoptr i64 %960 to i64*
  %962 = load i64, i64* %961
  %963 = add i64 %952, 16
  %964 = inttoptr i64 %963 to i64*
  %965 = load i64, i64* %964
  %966 = add i64 %952, 24
  %967 = inttoptr i64 %966 to i64*
  %968 = load i64, i64* %967
  %969 = add i64 %952, 32
  %970 = inttoptr i64 %969 to i64*
  %971 = load i64, i64* %970
  %972 = add i64 %952, 40
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  %975 = add i64 %952, 48
  %976 = inttoptr i64 %975 to i64*
  %977 = load i64, i64* %976
  %978 = add i64 %952, 56
  %979 = inttoptr i64 %978 to i64*
  %980 = load i64, i64* %979
  %981 = add i64 %952, 64
  %982 = inttoptr i64 %981 to i64*
  %983 = load i64, i64* %982
  %984 = add i64 %952, 72
  %985 = inttoptr i64 %984 to i64*
  %986 = load i64, i64* %985
  %987 = inttoptr i64 %953 to i64*
  %988 = load i64, i64* %987
  store i64 %988, i64* %3, align 8, !alias.scope !2066, !noalias !2069
  store i64 %952, i64* %13, align 8, !alias.scope !2066, !noalias !2069
  %989 = tail call i64 @fprintf(i64 %946, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 968), i64 %950, i64 %955, i64 %956, i64 %957, i64 %959, i64 %962, i64 %965, i64 %968, i64 %971, i64 %974, i64 %977, i64 %980, i64 %983, i64 %986), !noalias !2066
  %990 = load i64, i64* %14, align 8
  %991 = add i64 %990, -136
  %992 = load i64, i64* %3, align 8
  %993 = inttoptr i64 %991 to i64*
  %994 = load i64, i64* %993
  store i64 %994, i64* %12, align 8, !tbaa !1240
  %995 = add i64 %990, -244
  %996 = trunc i64 %989 to i32
  %997 = inttoptr i64 %995 to i32*
  store i32 %996, i32* %997
  %998 = add i64 %992, 18
  %999 = load i64, i64* %13, align 8, !tbaa !1240
  %1000 = add i64 %999, -8
  %1001 = inttoptr i64 %1000 to i64*
  store i64 %998, i64* %1001
  %1002 = inttoptr i64 %1000 to i64*
  %1003 = load i64, i64* %1002
  store i64 %1003, i64* %3, align 8, !alias.scope !2071, !noalias !2074
  store i64 %999, i64* %13, align 8, !alias.scope !2071, !noalias !2074
  %1004 = tail call i64 @free(i64 %994), !noalias !2071
  %1005 = load i64, i64* %14, align 8
  %1006 = add i64 %1005, -4
  %1007 = inttoptr i64 %1006 to i32*
  store i32 1, i32* %1007
  br label %block_402370

block_40214c:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58
  %1008 = inttoptr i64 %658 to i64*
  %1009 = load i64, i64* %1008
  store i64 %1009, i64* %8, align 8, !tbaa !1240
  %1010 = shl i64 %1009, 3
  %1011 = add i64 %1010, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 8)
  %1012 = inttoptr i64 %1011 to i64*
  %1013 = load i64, i64* %1012
  store i64 %1013, i64* %9, align 8, !tbaa !1240
  store i64 %1013, i64* %3, align 8, !tbaa !1240
  switch i64 %1013, label %1218 [
    i64 4202860, label %block_40216c
    i64 4202895, label %block_40218f
    i64 4202885, label %block_402185
    i64 4202865, label %block_402171
    i64 4202845, label %block_40215d
    i64 4202870, label %block_402176
  ]

block_401f47:                                     ; preds = %block_401f36
  %1014 = add i64 %758, 11
  %1015 = inttoptr i64 %738 to i64*
  store i64 %743, i64* %1015
  br label %block_401f52

block_401f18:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpB_type* @adcexpB to i64), i64* %10, align 8, !tbaa !1240
  %1016 = inttoptr i64 %564 to i64*
  %1017 = load i64, i64* %1016
  store i64 %1017, i64* %12, align 8, !tbaa !1240
  %1018 = add i64 %561, -96
  %1019 = inttoptr i64 %1018 to i64*
  %1020 = load i64, i64* %1019
  store i64 %1020, i64* %11, align 8, !tbaa !1240
  %1021 = load i64, i64* %13, align 8, !tbaa !1240
  %1022 = add i64 %1021, -8
  %1023 = inttoptr i64 %1022 to i64*
  store i64 4202287, i64* %1023
  store i64 %1022, i64* %13, align 8, !tbaa !1240
  %1024 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %563)
  %1025 = load i64, i64* %14, align 8
  %1026 = add i64 %1025, -176
  %1027 = load i64, i64* %8, align 8
  %1028 = load i64, i64* %3, align 8
  %1029 = add i64 %1028, 7
  %1030 = inttoptr i64 %1026 to i64*
  store i64 %1027, i64* %1030
  br label %block_401f36

block_4021f6:                                     ; preds = %block_4021ae, %block_402258
  %1031 = phi i64 [ %446, %block_4021ae ], [ %224, %block_402258 ]
  %1032 = phi i64 [ %427, %block_4021ae ], [ %216, %block_402258 ]
  %1033 = phi %struct.Memory* [ %847, %block_4021ae ], [ %218, %block_402258 ]
  %1034 = add i64 %1032, -88
  %1035 = inttoptr i64 %1034 to i64*
  %1036 = load i64, i64* %1035
  %1037 = add i64 %1032, -60
  %1038 = inttoptr i64 %1037 to i32*
  %1039 = load i32, i32* %1038
  %1040 = sext i32 %1039 to i64
  %1041 = sub i64 %1036, %1040
  %1042 = lshr i64 %1041, 63
  %1043 = trunc i64 %1042 to i8
  %1044 = lshr i64 %1036, 63
  %1045 = lshr i64 %1040, 63
  %1046 = xor i64 %1044, %1045
  %1047 = xor i64 %1042, %1044
  %1048 = add nuw nsw i64 %1047, %1046
  %1049 = icmp eq i64 %1048, 2
  %1050 = icmp ne i8 %1043, 0
  %1051 = xor i1 %1050, %1049
  %1052 = select i1 %1051, i64 17, i64 120
  %1053 = add i64 %1031, %1052
  br i1 %1051, label %block_402207, label %block_40226e

block_401f93:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57
  %1054 = add i64 %600, 8
  %1055 = inttoptr i64 %564 to i64*
  store i64 0, i64* %1055
  br label %block_401f9b

block_402046:                                     ; preds = %block_401f9b
  %1056 = add i64 %800, 12
  %1057 = load i64, i64* %13, align 8, !tbaa !1240
  %1058 = add i64 %1057, -8
  %1059 = inttoptr i64 %1058 to i64*
  store i64 %1056, i64* %1059
  %1060 = inttoptr i64 %1058 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %3, align 8, !alias.scope !2076, !noalias !2079
  store i64 %1057, i64* %13, align 8, !alias.scope !2076, !noalias !2079
  %1062 = tail call i64 @free(i64 %803), !noalias !2076
  %1063 = load i64, i64* %14, align 8
  %1064 = add i64 %1063, -104
  %1065 = load i64, i64* %3, align 8
  %1066 = inttoptr i64 %1064 to i64*
  %1067 = load i64, i64* %1066
  %1068 = add i64 %1065, 12
  %1069 = load i64, i64* %13, align 8, !tbaa !1240
  %1070 = add i64 %1069, -8
  %1071 = inttoptr i64 %1070 to i64*
  store i64 %1068, i64* %1071
  %1072 = inttoptr i64 %1070 to i64*
  %1073 = load i64, i64* %1072
  store i64 %1073, i64* %3, align 8, !alias.scope !2081, !noalias !2084
  store i64 %1069, i64* %13, align 8, !alias.scope !2081, !noalias !2084
  %1074 = tail call i64 @free(i64 %1067), !noalias !2081
  %1075 = load i64, i64* %3, align 8
  %1076 = load i64, i64* %14, align 8
  %1077 = add i64 %1076, -128
  %1078 = inttoptr i64 %1077 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 825), i64* %1078
  %1079 = add i64 %1075, 33
  %1080 = load i64, i64* %13, align 8, !tbaa !1240
  %1081 = add i64 %1080, -8
  %1082 = inttoptr i64 %1081 to i64*
  store i64 %1079, i64* %1082
  %1083 = inttoptr i64 %1081 to i64*
  %1084 = load i64, i64* %1083
  store i64 %1084, i64* %3, align 8, !alias.scope !2086, !noalias !2089
  store i64 %1080, i64* %13, align 8, !alias.scope !2086, !noalias !2089
  %1085 = tail call i64 @calloc(i64 1024, i64 1)
  %1086 = load i64, i64* %3, align 8
  %1087 = load i64, i64* %14, align 8
  %1088 = add i64 %1087, -136
  %1089 = inttoptr i64 %1088 to i64*
  store i64 %1085, i64* %1089
  %1090 = inttoptr i64 %1088 to i64*
  %1091 = load i64, i64* %1090
  %1092 = add i64 %1087, -48
  %1093 = inttoptr i64 %1092 to i64*
  %1094 = load i64, i64* %1093
  %1095 = add i64 %1087, -128
  %1096 = inttoptr i64 %1095 to i64*
  %1097 = load i64, i64* %1096
  store i64 %1097, i64* %9, align 8, !tbaa !1240
  %1098 = add i64 %1087, -52
  %1099 = inttoptr i64 %1098 to i32*
  %1100 = load i32, i32* %1099
  %1101 = zext i32 %1100 to i64
  store i64 %1101, i64* %108, align 8, !tbaa !1240
  %1102 = add i64 %1086, 43
  %1103 = load i64, i64* %13, align 8, !tbaa !1240
  %1104 = add i64 %1103, -8
  %1105 = inttoptr i64 %1104 to i64*
  store i64 %1102, i64* %1105
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1110 = load i64, i64* %1109, align 8, !alias.scope !2091, !noalias !2094
  %1111 = inttoptr i64 %1103 to i64*
  %1112 = load i64, i64* %1111
  %1113 = add i64 %1103, 8
  %1114 = inttoptr i64 %1113 to i64*
  %1115 = load i64, i64* %1114
  %1116 = add i64 %1103, 16
  %1117 = inttoptr i64 %1116 to i64*
  %1118 = load i64, i64* %1117
  %1119 = add i64 %1103, 24
  %1120 = inttoptr i64 %1119 to i64*
  %1121 = load i64, i64* %1120
  %1122 = add i64 %1103, 32
  %1123 = inttoptr i64 %1122 to i64*
  %1124 = load i64, i64* %1123
  %1125 = add i64 %1103, 40
  %1126 = inttoptr i64 %1125 to i64*
  %1127 = load i64, i64* %1126
  %1128 = add i64 %1103, 48
  %1129 = inttoptr i64 %1128 to i64*
  %1130 = load i64, i64* %1129
  %1131 = add i64 %1103, 56
  %1132 = inttoptr i64 %1131 to i64*
  %1133 = load i64, i64* %1132
  %1134 = add i64 %1103, 64
  %1135 = inttoptr i64 %1134 to i64*
  %1136 = load i64, i64* %1135
  %1137 = add i64 %1103, 72
  %1138 = inttoptr i64 %1137 to i64*
  %1139 = load i64, i64* %1138
  %1140 = inttoptr i64 %1104 to i64*
  %1141 = load i64, i64* %1140
  store i64 %1141, i64* %3, align 8, !alias.scope !2091, !noalias !2094
  store i64 %1103, i64* %13, align 8, !alias.scope !2091, !noalias !2094
  %1142 = tail call i64 @sprintf(i64 %1091, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 833), i64 %1094, i64 %1097, i64 %1101, i64 %1110, i64 %1112, i64 %1115, i64 %1118, i64 %1121, i64 %1124, i64 %1127, i64 %1130, i64 %1133, i64 %1136, i64 %1139), !noalias !2091
  %1143 = load i64, i64* %3, align 8
  %1144 = load i64, i64* %14, align 8
  %1145 = add i64 %1144, -136
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = add i64 %1144, -200
  %1149 = trunc i64 %1142 to i32
  %1150 = inttoptr i64 %1148 to i32*
  store i32 %1149, i32* %1150
  %1151 = add i64 %1143, 28
  %1152 = load i64, i64* %13, align 8, !tbaa !1240
  %1153 = add i64 %1152, -8
  %1154 = inttoptr i64 %1153 to i64*
  store i64 %1151, i64* %1154
  %1155 = inttoptr i64 %1153 to i64*
  %1156 = load i64, i64* %1155
  store i64 %1156, i64* %3, align 8, !alias.scope !2096, !noalias !2099
  store i64 %1152, i64* %13, align 8, !alias.scope !2096, !noalias !2099
  %1157 = tail call i64 @fopen(i64 %1147, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 842))
  %1158 = load i64, i64* %14, align 8
  %1159 = add i64 %1158, -144
  %1160 = load i64, i64* %3, align 8
  %1161 = inttoptr i64 %1159 to i64*
  store i64 %1157, i64* %1161
  %1162 = icmp eq i64 %1157, 0
  %1163 = select i1 %1162, i64 17, i64 67
  %1164 = add i64 %1160, %1163
  br i1 %1162, label %block_4020d7, label %block_402109

block_40218f:                                     ; preds = %block_402185, %block_40214c, %block_402171, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58, %block_40216c, %block_40215d, %block_402176
  %1165 = phi i64 [ %664, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58 ], [ 4202895, %block_402176 ], [ 4202895, %block_40215d ], [ 4202895, %block_402171 ], [ 4202895, %block_402185 ], [ 4202895, %block_40214c ], [ 4202895, %block_40216c ]
  %1166 = phi %struct.Memory* [ %783, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit58 ], [ %783, %block_402176 ], [ %783, %block_40215d ], [ %783, %block_402171 ], [ %783, %block_402185 ], [ %783, %block_40214c ], [ %783, %block_40216c ]
  %1167 = add i64 %628, -148
  %1168 = inttoptr i64 %1167 to i32*
  %1169 = load i32, i32* %1168
  %1170 = sext i32 %1169 to i64
  %1171 = add i64 %628, -80
  %1172 = add i64 %1165, 11
  %1173 = inttoptr i64 %1171 to i64*
  store i64 %1170, i64* %1173
  br label %block_40219a

block_401e8c:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexp_type* @adcexp to i64), i64* %10, align 8, !tbaa !1240
  %1174 = inttoptr i64 %564 to i64*
  %1175 = load i64, i64* %1174
  store i64 %1175, i64* %12, align 8, !tbaa !1240
  %1176 = add i64 %561, -96
  %1177 = inttoptr i64 %1176 to i64*
  %1178 = load i64, i64* %1177
  store i64 %1178, i64* %11, align 8, !tbaa !1240
  %1179 = load i64, i64* %13, align 8, !tbaa !1240
  %1180 = add i64 %1179, -8
  %1181 = inttoptr i64 %1180 to i64*
  store i64 4202147, i64* %1181
  store i64 %1180, i64* %13, align 8, !tbaa !1240
  %1182 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %563)
  %1183 = load i64, i64* %14, align 8
  %1184 = add i64 %1183, -176
  %1185 = load i64, i64* %8, align 8
  %1186 = load i64, i64* %3, align 8
  %1187 = inttoptr i64 %1184 to i64*
  store i64 %1185, i64* %1187
  %1188 = add i64 %1186, 147
  br label %block_401f36

block_402009:                                     ; preds = %block_401ff2
  %1189 = add i64 %734, 24
  %1190 = load i64, i64* %13, align 8, !tbaa !1240
  %1191 = add i64 %1190, -8
  %1192 = inttoptr i64 %1191 to i64*
  store i64 %1189, i64* %1192
  %1193 = inttoptr i64 %1191 to i64*
  %1194 = load i64, i64* %1193
  store i64 %1194, i64* %3, align 8, !alias.scope !2101, !noalias !2104
  store i64 %1190, i64* %13, align 8, !alias.scope !2101, !noalias !2104
  %1195 = tail call i64 @free(i64 %731), !noalias !2101
  %1196 = load i64, i64* %14, align 8
  %1197 = load i64, i64* %3, align 8
  br label %block_402021

block_402207:                                     ; preds = %block_4021f6
  %1198 = add i64 %1032, -168
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = trunc i64 %1036 to i6
  switch i6 %1201, label %1202 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %1206
  ]

; <label>:1202:                                   ; preds = %block_402207
  %1203 = and i64 %1036, 63
  %1204 = add nsw i64 %1203, -1
  %1205 = ashr i64 %1200, %1204
  br label %1206

; <label>:1206:                                   ; preds = %1202, %block_402207
  %1207 = phi i64 [ %1205, %1202 ], [ %1200, %block_402207 ]
  %1208 = ashr i64 %1207, 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %1206, %block_402207
  %1209 = phi i64 [ %1200, %block_402207 ], [ %1208, %1206 ]
  %1210 = and i64 %1209, 1
  %1211 = icmp eq i64 %1210, 0
  %1212 = select i1 %1211, i64 81, i64 28
  %1213 = add i64 %1053, %1212
  br i1 %1211, label %block_402258, label %block_402223

block_402185:                                     ; preds = %block_40214c
  %1214 = add i64 %628, -156
  %1215 = inttoptr i64 %1214 to i32*
  store i32 16384, i32* %1215
  br label %block_40218f

; <label>:1216:                                   ; preds = %block_401e7b
  %1217 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %809, %struct.Memory* %563)
  ret %struct.Memory* %1217

; <label>:1218:                                   ; preds = %block_40214c
  %1219 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %1013, %struct.Memory* %783)
  ret %struct.Memory* %1219
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40a620_randlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40a620:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %14 = load i64, i64* %7, align 8
  %15 = load i64, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %6, align 8, !tbaa !1240
  store i64 %16, i64* %7, align 8, !tbaa !1240
  %18 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5872) to double*)
  %19 = bitcast %union.VectorReg* %9 to double*
  store double %18, double* %19, align 1, !tbaa !1439
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %21 = bitcast i64* %20 to double*
  store double 0.000000e+00, double* %21, align 1, !tbaa !1439
  %22 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5880) to double*)
  %23 = bitcast %union.VectorReg* %10 to double*
  store double %22, double* %23, align 1, !tbaa !1439
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !1439
  %26 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5888) to double*)
  %27 = bitcast %union.VectorReg* %11 to double*
  store double %26, double* %27, align 1, !tbaa !1439
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %29 = bitcast i64* %28 to double*
  store double 0.000000e+00, double* %29, align 1, !tbaa !1439
  %30 = bitcast %union.VectorReg* %12 to i8*
  %31 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5896) to double*)
  %32 = bitcast %union.VectorReg* %12 to double*
  store double %31, double* %32, align 1, !tbaa !1439
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %34, align 1, !tbaa !1439
  %35 = add i64 %15, -16
  %36 = load i64, i64* %5, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %37
  %38 = add i64 %15, -24
  %39 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %40 = bitcast [32 x %union.VectorReg]* %8 to double*
  %41 = load double, double* %40, align 1
  %42 = inttoptr i64 %38 to double*
  store double %41, double* %42
  %43 = add i64 %15, -32
  %44 = inttoptr i64 %43 to double*
  store double %31, double* %44
  %45 = add i64 %15, -40
  %46 = inttoptr i64 %45 to double*
  store double %18, double* %46
  %47 = add i64 %15, -48
  %48 = inttoptr i64 %47 to double*
  store double %26, double* %48
  %49 = add i64 %15, -56
  %50 = inttoptr i64 %49 to double*
  store double %22, double* %50
  %51 = bitcast %union.VectorReg* %12 to <2 x i32>*
  %52 = bitcast double %31 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i32 0
  %54 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %53, i32* %54, align 1, !tbaa !2106
  %55 = extractelement <2 x i32> %52, i32 1
  %56 = getelementptr inbounds i8, i8* %39, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 1, !tbaa !2106
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = load double, double* %40, align 1
  %60 = inttoptr i64 %38 to double*
  %61 = load double, double* %60
  %62 = fmul double %59, %61
  %63 = add i64 %15, -64
  %64 = inttoptr i64 %63 to double*
  store double %62, double* %64
  %65 = inttoptr i64 %63 to double*
  %66 = load double, double* %65
  %67 = tail call double @llvm.trunc.f64(double %66) #10
  %68 = tail call double @llvm.fabs.f64(double %67) #10
  %69 = fcmp ogt double %68, 0x41DFFFFFFFC00000
  %70 = fptosi double %67 to i32
  %71 = sitofp i32 %70 to double
  %72 = select i1 %69, double 0xC1E0000000000000, double %71
  %73 = load i64, i64* %7, align 8
  %74 = add i64 %73, -88
  %75 = inttoptr i64 %74 to double*
  store double %72, double* %75
  %76 = add i64 %73, -16
  %77 = inttoptr i64 %76 to double*
  %78 = load double, double* %77
  %79 = bitcast i64* %58 to double*
  %80 = bitcast %union.VectorReg* %13 to i8*
  %81 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %82 = load <2 x i32>, <2 x i32>* %81, align 1
  %83 = bitcast i64* %28 to <2 x i32>*
  %84 = extractelement <2 x i32> %82, i32 0
  %85 = bitcast %union.VectorReg* %13 to i32*
  store i32 %84, i32* %85, align 1, !tbaa !2106
  %86 = extractelement <2 x i32> %82, i32 1
  %87 = getelementptr inbounds i8, i8* %80, i64 4
  %88 = bitcast i8* %87 to i32*
  store i32 %86, i32* %88, align 1, !tbaa !2106
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast %union.VectorReg* %13 to double*
  %91 = load double, double* %90, align 1
  %92 = inttoptr i64 %74 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  %95 = fsub double %78, %94
  %96 = add i64 %73, -96
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %73, -8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = load <2 x i32>, <2 x i32>* %51, align 1
  %102 = extractelement <2 x i32> %101, i32 0
  store i32 %102, i32* %54, align 1, !tbaa !2106
  %103 = extractelement <2 x i32> %101, i32 1
  store i32 %103, i32* %57, align 1, !tbaa !2106
  %104 = load double, double* %40, align 1
  %105 = inttoptr i64 %100 to double*
  %106 = load double, double* %105
  %107 = fmul double %104, %106
  %108 = add i64 %73, -56
  %109 = inttoptr i64 %108 to double*
  store double %107, double* %109
  %110 = inttoptr i64 %108 to double*
  %111 = load double, double* %110
  %112 = tail call double @llvm.trunc.f64(double %111) #10
  %113 = tail call double @llvm.fabs.f64(double %112) #10
  %114 = fcmp ogt double %113, 0x41DFFFFFFFC00000
  %115 = fptosi double %112 to i32
  %116 = sitofp i32 %115 to double
  %117 = select i1 %114, double 0xC1E0000000000000, double %116
  %118 = add i64 %73, -104
  %119 = inttoptr i64 %118 to double*
  store double %117, double* %119
  %120 = inttoptr i64 %98 to i64*
  %121 = load i64, i64* %120
  %122 = inttoptr i64 %121 to double*
  %123 = load double, double* %122
  store i32 %84, i32* %85, align 1, !tbaa !2106
  store i32 %86, i32* %88, align 1, !tbaa !2106
  %124 = load i64, i64* %7, align 8
  %125 = add i64 %124, -104
  %126 = load double, double* %90, align 1
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127
  %129 = fmul double %126, %128
  %130 = fsub double %123, %129
  %131 = add i64 %124, -112
  %132 = inttoptr i64 %131 to double*
  store double %130, double* %132
  %133 = add i64 %124, -88
  %134 = inttoptr i64 %133 to double*
  %135 = load double, double* %134
  %136 = inttoptr i64 %131 to double*
  %137 = load double, double* %136
  %138 = fmul double %135, %137
  %139 = add i64 %124, -96
  %140 = inttoptr i64 %139 to double*
  %141 = load double, double* %140
  %142 = inttoptr i64 %125 to double*
  %143 = load double, double* %142
  %144 = fmul double %141, %143
  store double %144, double* %90, align 1, !tbaa !1439
  store i64 0, i64* %89, align 1, !tbaa !1439
  %145 = fadd double %138, %144
  %146 = add i64 %124, -56
  %147 = inttoptr i64 %146 to double*
  store double %145, double* %147
  %148 = load double, double* %32, align 1
  %149 = inttoptr i64 %146 to double*
  %150 = load double, double* %149
  %151 = fmul double %148, %150
  %152 = tail call double @llvm.trunc.f64(double %151) #10
  %153 = tail call double @llvm.fabs.f64(double %152) #10
  %154 = fcmp ogt double %153, 0x41DFFFFFFFC00000
  %155 = fptosi double %152 to i32
  %156 = sitofp i32 %155 to double
  %157 = select i1 %154, double 0xC1E0000000000000, double %156
  %158 = add i64 %124, -64
  %159 = inttoptr i64 %158 to double*
  store double %157, double* %159
  %160 = inttoptr i64 %146 to double*
  %161 = load double, double* %160
  %162 = load <2 x i32>, <2 x i32>* %81, align 1
  %163 = load <2 x i32>, <2 x i32>* %83, align 1
  %164 = extractelement <2 x i32> %162, i32 0
  %165 = bitcast %union.VectorReg* %12 to i32*
  store i32 %164, i32* %165, align 1, !tbaa !2106
  %166 = extractelement <2 x i32> %162, i32 1
  %167 = getelementptr inbounds i8, i8* %30, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 1, !tbaa !2106
  %169 = extractelement <2 x i32> %163, i32 0
  %170 = bitcast i64* %33 to i32*
  store i32 %169, i32* %170, align 1, !tbaa !2106
  %171 = extractelement <2 x i32> %163, i32 1
  %172 = getelementptr inbounds i8, i8* %30, i64 12
  %173 = bitcast i8* %172 to i32*
  store i32 %171, i32* %173, align 1, !tbaa !2106
  %174 = load i64, i64* %7, align 8
  %175 = add i64 %174, -64
  %176 = load double, double* %32, align 1
  %177 = inttoptr i64 %175 to double*
  %178 = load double, double* %177
  %179 = fmul double %176, %178
  store double %179, double* %32, align 1, !tbaa !1439
  %180 = fsub double %161, %179
  %181 = add i64 %174, -120
  %182 = inttoptr i64 %181 to double*
  store double %180, double* %182
  %183 = bitcast <2 x i32> %162 to double
  %184 = inttoptr i64 %181 to double*
  %185 = load double, double* %184
  %186 = fmul double %183, %185
  %187 = add i64 %174, -96
  %188 = inttoptr i64 %187 to double*
  %189 = load double, double* %188
  %190 = add i64 %174, -112
  %191 = inttoptr i64 %190 to double*
  %192 = load double, double* %191
  %193 = fmul double %189, %192
  %194 = fadd double %193, %186
  store double %194, double* %27, align 1, !tbaa !1439
  %195 = bitcast i64* %28 to <2 x i32>*
  store <2 x i32> %163, <2 x i32>* %195, align 1, !tbaa !1439
  %196 = add i64 %174, -72
  %197 = inttoptr i64 %196 to double*
  store double %194, double* %197
  %198 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %199 = load <2 x i32>, <2 x i32>* %198, align 1
  %200 = load i64, i64* %20, align 1
  %201 = extractelement <2 x i32> %199, i32 0
  store i32 %201, i32* %54, align 1, !tbaa !2106
  %202 = extractelement <2 x i32> %199, i32 1
  store i32 %202, i32* %57, align 1, !tbaa !2106
  %203 = load double, double* %40, align 1
  %204 = inttoptr i64 %196 to double*
  %205 = load double, double* %204
  %206 = fmul double %203, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #10
  %208 = tail call double @llvm.fabs.f64(double %207) #10
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = zext i32 %210 to i64
  %212 = select i1 %209, i64 2147483648, i64 %211
  store i64 %212, i64* %4, align 8, !tbaa !1240
  %213 = trunc i64 %212 to i32
  %214 = sitofp i32 %213 to double
  %215 = add i64 %174, -80
  %216 = inttoptr i64 %215 to double*
  store double %214, double* %216
  %217 = inttoptr i64 %196 to double*
  %218 = load double, double* %217
  %219 = load double, double* %23, align 1
  %220 = inttoptr i64 %215 to double*
  %221 = load double, double* %220
  %222 = fmul double %219, %221
  store double %222, double* %23, align 1, !tbaa !1439
  %223 = fsub double %218, %222
  %224 = load i64, i64* %7, align 8
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = inttoptr i64 %227 to double*
  store double %223, double* %228
  %229 = inttoptr i64 %225 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %5, align 8, !tbaa !1240
  %231 = bitcast <2 x i32> %199 to double
  %232 = inttoptr i64 %230 to double*
  %233 = load double, double* %232
  %234 = fmul double %231, %233
  store double %234, double* %19, align 1, !tbaa !1439
  store i64 %200, i64* %20, align 1, !tbaa !1439
  %235 = add i64 %224, -128
  %236 = inttoptr i64 %235 to double*
  store double %234, double* %236
  %237 = inttoptr i64 %235 to double*
  %238 = load double, double* %237
  store double %238, double* %40, align 1, !tbaa !1439
  store double 0.000000e+00, double* %79, align 1, !tbaa !1439
  %239 = load i64, i64* %6, align 8, !tbaa !1240
  %240 = add i64 %239, 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %7, align 8, !tbaa !1240
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %3, align 8, !tbaa !1240
  %245 = add i64 %239, 16
  store i64 %245, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40417f(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40417f:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -16
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  %12 = load i64, i64* bitcast (%checksumAlo_type* @checksumAlo to i64*)
  %13 = load i64, i64* bitcast (%checksumAhi_type* @checksumAhi to i64*)
  %14 = mul i64 %13, 1000000
  store i64 %14, i64* %6, align 8, !tbaa !1240
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %14, %12
  store i64 %21, i64* %5, align 8, !tbaa !1240
  %22 = lshr i64 %21, 63
  %23 = sub i64 %11, %21
  %24 = icmp ult i64 %11, %21
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %15, align 1, !tbaa !1264
  %26 = trunc i64 %23 to i32
  %27 = and i32 %26, 255
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #10
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %16, align 1, !tbaa !1278
  %32 = xor i64 %21, %11
  %33 = xor i64 %32, %23
  %34 = lshr i64 %33, 4
  %35 = trunc i64 %34 to i8
  %36 = and i8 %35, 1
  store i8 %36, i8* %17, align 1, !tbaa !1279
  %37 = icmp eq i64 %23, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %18, align 1, !tbaa !1280
  %39 = lshr i64 %23, 63
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %19, align 1, !tbaa !1281
  %41 = lshr i64 %11, 63
  %42 = xor i64 %22, %41
  %43 = xor i64 %39, %41
  %44 = add nuw nsw i64 %43, %42
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %20, align 1, !tbaa !1282
  %47 = load i64, i64* %7, align 8
  %48 = add i64 %47, -4
  br i1 %37, label %block_4041a3, label %block_4041af

block_4041fc:                                     ; preds = %block_4041a3, %block_4041af
  %49 = phi %struct.Memory* [ %2, %block_4041af ], [ %2, %block_4041a3 ]
  %50 = add i64 %47, -4
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %4, align 8, !tbaa !1240
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !1240
  %56 = add i64 %55, 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %7, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %55, 16
  store i64 %61, i64* %54, align 8, !tbaa !1240
  ret %struct.Memory* %49

block_4041af:                                     ; preds = %block_40417f
  %62 = inttoptr i64 %48 to i32*
  store i32 1, i32* %62
  br label %block_4041fc

block_4041a3:                                     ; preds = %block_40417f
  %63 = inttoptr i64 %48 to i32*
  store i32 0, i32* %63
  br label %block_4041fc
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4092b0_GetRegTupleFromParent(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4092b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %20 = add i64 %16, -16
  %21 = load i64, i64* %12, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %16, -20
  %24 = load i32, i32* %7, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %16, -32
  %27 = load i64, i64* %10, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %16, -36
  %30 = load i32, i32* %5, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = add i64 %16, -40
  %33 = inttoptr i64 %32 to i32*
  store i32 -2147483648, i32* %33
  %34 = inttoptr i64 %20 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %10, align 8, !tbaa !1240
  %36 = inttoptr i64 %29 to i32*
  %37 = load i32, i32* %36
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %19, align 8, !tbaa !1240
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = trunc i32 %38 to i6
  %47 = trunc i64 %35 to i32
  switch i6 %46, label %49 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %48
  ]

; <label>:48:                                     ; preds = %block_4092b0
  br label %54

; <label>:49:                                     ; preds = %block_4092b0
  %50 = and i32 %38, 63
  %51 = zext i32 %50 to i64
  %52 = add nsw i64 %51, -1
  %53 = lshr i64 %35, %52
  br label %54

; <label>:54:                                     ; preds = %49, %48
  %55 = phi i64 [ %53, %49 ], [ %35, %48 ]
  %56 = lshr i64 %55, 1
  store i64 %56, i64* %10, align 8, !tbaa !1240
  %57 = trunc i64 %56 to i32
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %54, %block_4092b0
  %58 = phi i32 [ %47, %block_4092b0 ], [ %57, %54 ]
  %59 = add i64 %16, -56
  %60 = inttoptr i64 %59 to i32*
  store i32 %58, i32* %60
  %61 = inttoptr i64 %29 to i32*
  %62 = load i32, i32* %61
  %63 = sub i32 32, %62
  %64 = zext i32 %63 to i64
  %65 = inttoptr i64 %59 to i32*
  %66 = load i32, i32* %65
  %67 = zext i32 %66 to i64
  store i64 %67, i64* %11, align 8, !tbaa !1240
  store i64 %64, i64* %9, align 8, !tbaa !1240
  %68 = trunc i32 %63 to i5
  switch i5 %68, label %71 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %69
  ]

; <label>:69:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %70 = shl i32 %66, 1
  br label %79

; <label>:71:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %72 = and i32 %63, 31
  %73 = zext i32 %72 to i64
  %74 = add nuw nsw i64 %73, 4294967295
  %75 = and i64 %74, 4294967295
  %76 = shl i64 %67, %75
  %77 = trunc i64 %76 to i32
  %78 = shl i32 %77, 1
  br label %79

; <label>:79:                                     ; preds = %71, %69
  %80 = phi i32 [ %70, %69 ], [ %78, %71 ]
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %11, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %79, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %82 = phi i32 [ %66, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %80, %79 ]
  %83 = inttoptr i64 %59 to i32*
  store i32 %82, i32* %83
  %84 = add i64 %16, -48
  %85 = inttoptr i64 %84 to i32*
  store i32 0, i32* %85
  %86 = add i64 %16, -52
  %87 = inttoptr i64 %86 to i32*
  store i32 0, i32* %87
  %88 = add i64 %16, -44
  %89 = inttoptr i64 %88 to i32*
  store i32 0, i32* %89
  br label %block_409309

block_40933c:                                     ; preds = %block_40932d
  %90 = inttoptr i64 %59 to i32*
  %91 = load i32, i32* %90
  %92 = and i32 %141, %91
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %block_409364, label %block_40934b

block_40937b:                                     ; preds = %block_409309
  %94 = zext i32 %159 to i64
  store i64 %94, i64* %8, align 8, !tbaa !1240
  %95 = sub i32 %159, %161
  %96 = lshr i32 %95, 31
  %97 = lshr i32 %159, 31
  %98 = and i32 %95, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #10
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = xor i32 %161, %159
  %104 = xor i32 %103, %95
  %105 = lshr i32 %104, 4
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = icmp eq i32 %95, 0
  %109 = zext i1 %108 to i8
  %110 = trunc i32 %96 to i8
  %111 = xor i32 %96, %97
  %112 = lshr i32 %161, 31
  %113 = xor i32 %112, %97
  %114 = add nuw nsw i32 %111, %113
  %115 = icmp eq i32 %114, 2
  %116 = zext i1 %115 to i8
  store i8 0, i8* %40, align 1, !tbaa !1428
  store i8 %102, i8* %41, align 1, !tbaa !1428
  store i8 %107, i8* %42, align 1, !tbaa !1428
  store i8 %109, i8* %43, align 1, !tbaa !1428
  store i8 %110, i8* %44, align 1, !tbaa !1428
  store i8 %116, i8* %45, align 1, !tbaa !1428
  %117 = inttoptr i64 %17 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %14, align 8, !tbaa !1240
  %119 = inttoptr i64 %16 to i64*
  %120 = load i64, i64* %119
  store i64 %120, i64* %3, align 8, !tbaa !1240
  %121 = add i64 %16, 8
  store i64 %121, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %157

block_409315:                                     ; preds = %block_409309
  %122 = inttoptr i64 %23 to i32*
  %123 = load i32, i32* %122
  %124 = inttoptr i64 %32 to i32*
  %125 = load i32, i32* %124
  %126 = and i32 %125, %123
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %block_40932d, label %block_409324

block_409364:                                     ; preds = %block_40934b, %block_40932d, %block_40933c
  %128 = phi %struct.Memory* [ %137, %block_40932d ], [ %137, %block_40933c ], [ %137, %block_40934b ]
  %129 = inttoptr i64 %32 to i32*
  %130 = load i32, i32* %129
  %131 = lshr i32 %130, 1
  %132 = inttoptr i64 %32 to i32*
  store i32 %131, i32* %132
  %133 = inttoptr i64 %88 to i32*
  %134 = load i32, i32* %133
  %135 = add i32 %134, 1
  %136 = inttoptr i64 %88 to i32*
  store i32 %135, i32* %136
  br label %block_409309

block_40932d:                                     ; preds = %block_409324, %block_409315
  %137 = phi %struct.Memory* [ %157, %block_409315 ], [ %157, %block_409324 ]
  %138 = inttoptr i64 %23 to i32*
  %139 = load i32, i32* %138
  %140 = inttoptr i64 %32 to i32*
  %141 = load i32, i32* %140
  %142 = and i32 %141, %139
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %block_409364, label %block_40933c

block_40934b:                                     ; preds = %block_40933c
  %144 = inttoptr i64 %86 to i32*
  %145 = load i32, i32* %144
  %146 = inttoptr i64 %26 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %9, align 8, !tbaa !1240
  %148 = inttoptr i64 %84 to i32*
  %149 = load i32, i32* %148
  %150 = zext i32 %149 to i64
  %151 = add i32 %149, 1
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %11, align 8, !tbaa !1240
  %153 = inttoptr i64 %84 to i32*
  store i32 %151, i32* %153
  store i64 %150, i64* %10, align 8, !tbaa !1240
  store i64 %150, i64* %12, align 8, !tbaa !1240
  %154 = shl nuw nsw i64 %150, 2
  %155 = add i64 %147, %154
  %156 = inttoptr i64 %155 to i32*
  store i32 %145, i32* %156
  br label %block_409364

block_409309:                                     ; preds = %block_409364, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %157 = phi %struct.Memory* [ %2, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %128, %block_409364 ]
  %158 = inttoptr i64 %88 to i32*
  %159 = load i32, i32* %158
  %160 = inttoptr i64 %29 to i32*
  %161 = load i32, i32* %160
  %162 = icmp ult i32 %159, %161
  br i1 %162, label %block_409315, label %block_40937b

block_409324:                                     ; preds = %block_409315
  %163 = inttoptr i64 %86 to i32*
  %164 = load i32, i32* %163
  %165 = add i32 %164, 1
  %166 = inttoptr i64 %86 to i32*
  store i32 %165, i32* %166
  br label %block_40932d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403620_timer_read(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403620:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -12
  %15 = load i32, i32* %5, align 4
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = inttoptr i64 %14 to i32*
  %18 = load i32, i32* %17
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %6, align 8, !tbaa !1240
  %20 = shl nsw i64 %19, 3
  %21 = add i64 %20, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 224)
  %22 = inttoptr i64 %21 to double*
  %23 = load double, double* %22
  %24 = bitcast %union.VectorReg* %9 to double*
  store double %23, double* %24, align 1, !tbaa !1439
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %26 = bitcast i64* %25 to double*
  store double 0.000000e+00, double* %26, align 1, !tbaa !1439
  %27 = inttoptr i64 %12 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %8, align 8, !tbaa !1240
  %29 = inttoptr i64 %11 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %3, align 8, !tbaa !1240
  %31 = add i64 %11, 8
  store i64 %31, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4067e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -56
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %22 = add i64 %12, -16
  %23 = load i64, i64* %8, align 8
  %24 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %12, -24
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = inttoptr i64 %22 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %8, align 8, !tbaa !1240
  %30 = inttoptr i64 %25 to i64*
  %31 = load i64, i64* %30
  store i64 %31, i64* %7, align 8, !tbaa !1240
  %32 = add i64 %1, 29
  %33 = add i64 %12, -64
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  %35 = inttoptr i64 %33 to i64*
  %36 = load i64, i64* %35
  store i64 %15, i64* %9, align 8, !alias.scope !2108, !noalias !2111
  %37 = tail call i64 @fopen(i64 %29, i64 %31)
  %38 = load i64, i64* %10, align 8
  %39 = add i64 %38, -24
  %40 = inttoptr i64 %39 to i64*
  store i64 %37, i64* %40
  %41 = icmp eq i64 %37, 0
  %42 = select i1 %41, i64 14, i64 69
  %43 = add i64 %36, %42
  br i1 %41, label %block_40680b, label %block_406842

block_40680b:                                     ; preds = %block_4067e0
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %45 = load i64, i64* @stderr
  %46 = add i64 %38, -8
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  %49 = add i64 %38, -32
  %50 = inttoptr i64 %49 to i64*
  store i64 %45, i64* %50
  %51 = add i64 %38, -40
  %52 = inttoptr i64 %51 to i64*
  store i64 %48, i64* %52
  %53 = add i64 %43, 25
  %54 = load i64, i64* %9, align 8, !tbaa !1240
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57
  store i64 %54, i64* %9, align 8, !alias.scope !2113, !noalias !2116
  %59 = tail call i64 @__errno_location()
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4299), i64* %7, align 8, !tbaa !1240
  %60 = inttoptr i64 %59 to i32*
  %61 = load i32, i32* %60
  %62 = zext i32 %61 to i64
  store i64 %62, i64* %44, align 8, !tbaa !1240
  %63 = load i64, i64* %10, align 8
  %64 = add i64 %63, -32
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %8, align 8, !tbaa !1240
  %67 = add i64 %63, -40
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  store i64 %69, i64* %6, align 8, !tbaa !1240
  %70 = add i64 %58, 27
  %71 = load i64, i64* %9, align 8, !tbaa !1240
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %70, i64* %73
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %76 = load i64, i64* %74, align 8, !alias.scope !2118, !noalias !2121
  %77 = load i64, i64* %75, align 8, !alias.scope !2118, !noalias !2121
  %78 = inttoptr i64 %71 to i64*
  %79 = load i64, i64* %78
  %80 = add i64 %71, 8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %71, 16
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %71, 24
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %71, 32
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %71, 40
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  %95 = add i64 %71, 48
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %71, 56
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %71, 64
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %71, 72
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = inttoptr i64 %72 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %3, align 8, !alias.scope !2118, !noalias !2121
  store i64 %71, i64* %9, align 8, !alias.scope !2118, !noalias !2121
  %109 = tail call i64 @fprintf(i64 %66, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4299), i64 %69, i64 %62, i64 %76, i64 %77, i64 %79, i64 %82, i64 %85, i64 %88, i64 %91, i64 %94, i64 %97, i64 %100, i64 %103, i64 %106), !noalias !2118
  %110 = load i64, i64* %10, align 8
  %111 = add i64 %110, -44
  %112 = trunc i64 %109 to i32
  %113 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %113
  br label %block_406842

block_406842:                                     ; preds = %block_40680b, %block_4067e0
  %114 = phi i64 [ %38, %block_4067e0 ], [ %110, %block_40680b ]
  %115 = phi %struct.Memory* [ %2, %block_4067e0 ], [ %2, %block_40680b ]
  %116 = add i64 %114, -24
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %5, align 8, !tbaa !1240
  %119 = load i64, i64* %9, align 8
  %120 = add i64 %119, 48
  %121 = icmp ugt i64 %119, -49
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %16, align 1, !tbaa !1264
  %123 = trunc i64 %120 to i32
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #10
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %17, align 1, !tbaa !1278
  %129 = xor i64 %119, 16
  %130 = xor i64 %129, %120
  %131 = lshr i64 %130, 4
  %132 = trunc i64 %131 to i8
  %133 = and i8 %132, 1
  store i8 %133, i8* %18, align 1, !tbaa !1279
  %134 = icmp eq i64 %120, 0
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %19, align 1, !tbaa !1280
  %136 = lshr i64 %120, 63
  %137 = trunc i64 %136 to i8
  store i8 %137, i8* %20, align 1, !tbaa !1281
  %138 = lshr i64 %119, 63
  %139 = xor i64 %136, %138
  %140 = add nuw nsw i64 %139, %136
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %21, align 1, !tbaa !1282
  %143 = add i64 %119, 56
  %144 = inttoptr i64 %120 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %10, align 8, !tbaa !1240
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %3, align 8, !tbaa !1240
  %148 = add i64 %119, 64
  store i64 %148, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %115
}

; Function Attrs: noinline
define %struct.Memory* @sub_40b190_WriteViewToDisk(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40b190:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -56
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -32
  %28 = load i64, i64* %9, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = inttoptr i64 %27 to i64*
  %31 = load i64, i64* %30
  %32 = icmp eq i64 %31, 0
  %33 = select i1 %32, i64 27, i64 39
  %34 = add i64 %33, %1
  br i1 %32, label %block_40b1ab, label %block_40b1b7

block_40b1dc:                                     ; preds = %block_40b1b7
  %35 = add i64 %55, -28
  %36 = add i64 %54, 7
  %37 = inttoptr i64 %35 to i32*
  store i32 0, i32* %37
  %38 = add i64 %55, -16
  %39 = add i64 %55, -24
  br label %block_40b1e3

block_40b2b9:                                     ; preds = %block_40b293
  %40 = inttoptr i64 %75 to i32*
  store i32 0, i32* %40
  br label %block_40b2c0

block_40b1b7:                                     ; preds = %block_40b190
  %41 = inttoptr i64 %24 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %10, align 8, !tbaa !1240
  %43 = inttoptr i64 %31 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %9, align 8, !tbaa !1240
  %45 = add i64 %34, -39
  %46 = add i64 %34, 16
  %47 = add i64 %14, -64
  %48 = inttoptr i64 %47 to i64*
  store i64 %46, i64* %48
  store i64 %47, i64* %11, align 8, !tbaa !1240
  %49 = tail call %struct.Memory* @sub_40b190_WriteViewToDisk(%struct.State* nonnull %0, i64 %45, %struct.Memory* %2)
  %50 = load i32, i32* %5, align 4
  %51 = load i64, i64* %3, align 8
  %52 = icmp eq i32 %50, 0
  %53 = select i1 %52, i64 21, i64 9
  %54 = add i64 %51, %53
  %55 = load i64, i64* %12, align 8
  br i1 %52, label %block_40b1dc, label %block_40b1d0

block_40b293:                                     ; preds = %block_40b22b
  %56 = load i64, i64* %12, align 8
  %57 = add i64 %56, -16
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %10, align 8, !tbaa !1240
  %60 = add i64 %56, -24
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %62, 8
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %9, align 8, !tbaa !1240
  %66 = add i64 %101, -259
  %67 = add i64 %101, 17
  %68 = load i64, i64* %11, align 8, !tbaa !1240
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70
  store i64 %69, i64* %11, align 8, !tbaa !1240
  %71 = tail call %struct.Memory* @sub_40b190_WriteViewToDisk(%struct.State* nonnull %0, i64 %66, %struct.Memory* %178)
  %72 = load i32, i32* %5, align 4
  %73 = icmp eq i32 %72, 0
  %74 = load i64, i64* %12, align 8
  %75 = add i64 %74, -4
  br i1 %73, label %block_40b2b9, label %block_40b2ad

block_40b22b:                                     ; preds = %block_40b1e3
  store i64 1, i64* %8, align 8, !tbaa !1240
  %76 = inttoptr i64 %39 to i64*
  %77 = load i64, i64* %76
  %78 = add i64 %77, 24
  %79 = add i64 %183, 588
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %183, 4240
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %55, -40
  %87 = inttoptr i64 %86 to i64*
  store i64 %85, i64* %87
  %88 = inttoptr i64 %86 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %7, align 8, !tbaa !1240
  %90 = add i64 %189, 54
  %91 = load i64, i64* %11, align 8, !tbaa !1240
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93
  %94 = inttoptr i64 %92 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %3, align 8, !alias.scope !2123, !noalias !2126
  store i64 %91, i64* %11, align 8, !alias.scope !2123, !noalias !2126
  %96 = tail call i64 @fwrite(i64 %78, i64 %82, i64 1, i64 %89)
  %97 = load i64, i64* %3, align 8
  %98 = add i64 %96, -1
  %99 = icmp eq i64 %98, 0
  %100 = select i1 %99, i64 50, i64 10
  %101 = add i64 %97, %100
  br i1 %99, label %block_40b293, label %block_40b26b

block_40b1d0:                                     ; preds = %block_40b1b7
  %102 = add i64 %55, -4
  %103 = inttoptr i64 %102 to i32*
  store i32 1, i32* %103
  br label %block_40b2c0

block_40b2ad:                                     ; preds = %block_40b293
  %104 = inttoptr i64 %75 to i32*
  store i32 1, i32* %104
  br label %block_40b2c0

block_40b1ab:                                     ; preds = %block_40b190
  %105 = add i64 %14, -12
  %106 = inttoptr i64 %105 to i32*
  store i32 0, i32* %106
  br label %block_40b2c0

block_40b1f6:                                     ; preds = %block_40b1e3
  %107 = inttoptr i64 %39 to i64*
  %108 = load i64, i64* %107
  %109 = shl nuw nsw i64 %181, 3
  %110 = add nuw nsw i64 %109, 24
  %111 = add i64 %110, %108
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add nuw nsw i64 %109, 4280
  %115 = add i64 %114, %183
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %117, %113
  %119 = add i64 %183, 4280
  %120 = add i64 %119, %109
  %121 = inttoptr i64 %120 to i64*
  store i64 %118, i64* %121
  %122 = inttoptr i64 %35 to i32*
  %123 = load i32, i32* %122
  %124 = add i32 %123, 1
  %125 = inttoptr i64 %35 to i32*
  store i32 %124, i32* %125
  %126 = add i64 %189, -19
  br label %block_40b1e3

block_40b26b:                                     ; preds = %block_40b22b
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %9, align 8, !tbaa !1240
  %128 = load i64, i64* @stderr
  store i64 %128, i64* %10, align 8, !tbaa !1240
  %129 = add i64 %101, 25
  %130 = load i64, i64* %11, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %135 = load i64, i64* %8, align 8, !alias.scope !2128, !noalias !2131
  %136 = load i64, i64* %127, align 8, !alias.scope !2128, !noalias !2131
  %137 = load i64, i64* %133, align 8, !alias.scope !2128, !noalias !2131
  %138 = load i64, i64* %134, align 8, !alias.scope !2128, !noalias !2131
  %139 = inttoptr i64 %130 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %130, 8
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %130, 16
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %130, 24
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %130, 32
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %130, 40
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %130, 48
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %130, 56
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %130, 64
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  %165 = add i64 %130, 72
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  %168 = inttoptr i64 %131 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %3, align 8, !alias.scope !2128, !noalias !2131
  store i64 %130, i64* %11, align 8, !alias.scope !2128, !noalias !2131
  %170 = tail call i64 @fprintf(i64 %128, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %135, i64 %136, i64 %137, i64 %138, i64 %140, i64 %143, i64 %146, i64 %149, i64 %152, i64 %155, i64 %158, i64 %161, i64 %164, i64 %167), !noalias !2128
  %171 = load i64, i64* %12, align 8
  %172 = add i64 %171, -4
  %173 = inttoptr i64 %172 to i32*
  store i32 1, i32* %173
  %174 = add i64 %171, -44
  %175 = trunc i64 %170 to i32
  %176 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %176
  br label %block_40b2c0

block_40b1e3:                                     ; preds = %block_40b1f6, %block_40b1dc
  %177 = phi i64 [ %36, %block_40b1dc ], [ %126, %block_40b1f6 ]
  %178 = phi %struct.Memory* [ %49, %block_40b1dc ], [ %178, %block_40b1f6 ]
  %179 = inttoptr i64 %35 to i32*
  %180 = load i32, i32* %179
  %181 = zext i32 %180 to i64
  %182 = inttoptr i64 %38 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %183, 540
  %185 = inttoptr i64 %184 to i32*
  %186 = load i32, i32* %185
  %187 = icmp ult i32 %180, %186
  %188 = select i1 %187, i64 19, i64 72
  %189 = add i64 %177, %188
  br i1 %187, label %block_40b1f6, label %block_40b22b

block_40b2c0:                                     ; preds = %block_40b26b, %block_40b1ab, %block_40b2ad, %block_40b1d0, %block_40b2b9
  %190 = phi i64 [ %74, %block_40b2b9 ], [ %74, %block_40b2ad ], [ %171, %block_40b26b ], [ %55, %block_40b1d0 ], [ %15, %block_40b1ab ]
  %191 = phi %struct.Memory* [ %71, %block_40b2b9 ], [ %71, %block_40b2ad ], [ %178, %block_40b26b ], [ %49, %block_40b1d0 ], [ %2, %block_40b1ab ]
  %192 = add i64 %190, -4
  %193 = inttoptr i64 %192 to i32*
  %194 = load i32, i32* %193
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %6, align 8, !tbaa !1240
  %196 = load i64, i64* %11, align 8
  %197 = add i64 %196, 48
  %198 = icmp ugt i64 %196, -49
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %18, align 1, !tbaa !1264
  %200 = trunc i64 %197 to i32
  %201 = and i32 %200, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #10
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !1278
  %206 = xor i64 %196, 16
  %207 = xor i64 %206, %197
  %208 = lshr i64 %207, 4
  %209 = trunc i64 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %20, align 1, !tbaa !1279
  %211 = icmp eq i64 %197, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %21, align 1, !tbaa !1280
  %213 = lshr i64 %197, 63
  %214 = trunc i64 %213 to i8
  store i8 %214, i8* %22, align 1, !tbaa !1281
  %215 = lshr i64 %196, 63
  %216 = xor i64 %213, %215
  %217 = add nuw nsw i64 %216, %213
  %218 = icmp eq i64 %217, 2
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %23, align 1, !tbaa !1282
  %220 = add i64 %196, 56
  %221 = inttoptr i64 %197 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %12, align 8, !tbaa !1240
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %3, align 8, !tbaa !1240
  %225 = add i64 %196, 64
  store i64 %225, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %191
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40a920_KeyComp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40a920:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  %17 = add i64 %14, -24
  %18 = load i64, i64* %10, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = add i64 %14, -32
  %21 = load i64, i64* %9, align 8
  %22 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %22
  %23 = add i64 %14, -36
  %24 = load i32, i32* %5, align 4
  %25 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %25
  %26 = add i64 %14, -40
  %27 = add i64 %1, 22
  %28 = inttoptr i64 %26 to i32*
  store i32 0, i32* %28
  %29 = add i64 %14, -36
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %36 = add i64 %14, -24
  %37 = add i64 %14, -32
  br label %block_40a936

block_40a996:                                     ; preds = %block_40a96c
  %38 = add i32 %78, 1
  %39 = inttoptr i64 %26 to i32*
  store i32 %38, i32* %39
  %40 = add i64 %53, -96
  br label %block_40a936

block_40a9b5:                                     ; preds = %block_40a960, %block_40a9ae, %block_40a98a
  %41 = phi i64 [ %146, %block_40a960 ], [ %123, %block_40a9ae ], [ %73, %block_40a98a ]
  %42 = phi %struct.Memory* [ %76, %block_40a960 ], [ %76, %block_40a9ae ], [ %76, %block_40a98a ]
  %43 = inttoptr i64 %41 to i32*
  %44 = load i32, i32* %43
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %6, align 8, !tbaa !1240
  %46 = inttoptr i64 %15 to i64*
  %47 = load i64, i64* %46
  store i64 %47, i64* %12, align 8, !tbaa !1240
  %48 = inttoptr i64 %14 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %3, align 8, !tbaa !1240
  %50 = add i64 %14, 8
  store i64 %50, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %42

block_40a96c:                                     ; preds = %block_40a942
  store i64 %91, i64* %7, align 8, !tbaa !1240
  store i64 %79, i64* %9, align 8, !tbaa !1240
  store i64 %79, i64* %8, align 8, !tbaa !1240
  %51 = icmp eq i32 %97, 0
  %52 = select i1 %51, i64 42, i64 30
  %53 = add i64 %100, %52
  br i1 %51, label %block_40a996, label %block_40a98a

block_40a98a:                                     ; preds = %block_40a96c
  %54 = lshr i32 %97, 31
  %55 = lshr i32 %90, 31
  %56 = and i32 %97, 255
  %57 = tail call i32 @llvm.ctpop.i32(i32 %56) #10
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  %61 = xor i32 %96, %90
  %62 = xor i32 %61, %97
  %63 = lshr i32 %62, 4
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = trunc i32 %54 to i8
  %67 = xor i32 %54, %55
  %68 = lshr i32 %96, 31
  %69 = xor i32 %68, %55
  %70 = add nuw nsw i32 %67, %69
  %71 = icmp eq i32 %70, 2
  %72 = zext i1 %71 to i8
  store i8 0, i8* %30, align 1, !tbaa !1264
  store i8 %60, i8* %31, align 1, !tbaa !1278
  store i8 %65, i8* %32, align 1, !tbaa !1279
  store i8 0, i8* %33, align 1, !tbaa !1280
  store i8 %66, i8* %34, align 1, !tbaa !1281
  store i8 %72, i8* %35, align 1, !tbaa !1282
  %73 = add i64 %14, -12
  %74 = inttoptr i64 %73 to i32*
  store i32 1, i32* %74
  br label %block_40a9b5

block_40a936:                                     ; preds = %block_40a996, %block_40a920
  %75 = phi i64 [ %27, %block_40a920 ], [ %40, %block_40a996 ]
  %76 = phi %struct.Memory* [ %2, %block_40a920 ], [ %76, %block_40a996 ]
  %77 = inttoptr i64 %26 to i32*
  %78 = load i32, i32* %77
  %79 = zext i32 %78 to i64
  %80 = inttoptr i64 %29 to i32*
  %81 = load i32, i32* %80
  %82 = icmp ult i32 %78, %81
  %83 = select i1 %82, i64 12, i64 120
  %84 = add i64 %75, %83
  br i1 %82, label %block_40a942, label %block_40a9ae

block_40a942:                                     ; preds = %block_40a936
  %85 = inttoptr i64 %36 to i64*
  %86 = load i64, i64* %85
  %87 = shl nuw nsw i64 %79, 2
  %88 = add i64 %86, %87
  %89 = inttoptr i64 %88 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %7, align 8, !tbaa !1240
  %92 = inttoptr i64 %37 to i64*
  %93 = load i64, i64* %92
  store i64 %79, i64* %9, align 8, !tbaa !1240
  store i64 %79, i64* %8, align 8, !tbaa !1240
  %94 = add i64 %93, %87
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = sub i32 %90, %96
  %98 = icmp ult i32 %90, %96
  %99 = select i1 %98, i64 30, i64 42
  %100 = add i64 %84, %99
  br i1 %98, label %block_40a960, label %block_40a96c

block_40a9ae:                                     ; preds = %block_40a936
  %101 = sub i32 %78, %81
  %102 = lshr i32 %101, 31
  %103 = lshr i32 %78, 31
  %104 = and i32 %101, 255
  %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #10
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = xor i32 %81, %78
  %110 = xor i32 %109, %101
  %111 = lshr i32 %110, 4
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = icmp eq i32 %101, 0
  %115 = zext i1 %114 to i8
  %116 = trunc i32 %102 to i8
  %117 = xor i32 %102, %103
  %118 = lshr i32 %81, 31
  %119 = xor i32 %118, %103
  %120 = add nuw nsw i32 %117, %119
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  store i8 0, i8* %30, align 1, !tbaa !1264
  store i8 %108, i8* %31, align 1, !tbaa !1278
  store i8 %113, i8* %32, align 1, !tbaa !1279
  store i8 %115, i8* %33, align 1, !tbaa !1280
  store i8 %116, i8* %34, align 1, !tbaa !1281
  store i8 %122, i8* %35, align 1, !tbaa !1282
  %123 = add i64 %14, -12
  %124 = inttoptr i64 %123 to i32*
  store i32 0, i32* %124
  br label %block_40a9b5

block_40a960:                                     ; preds = %block_40a942
  %125 = lshr i32 %97, 31
  %126 = lshr i32 %90, 31
  %127 = and i32 %97, 255
  %128 = tail call i32 @llvm.ctpop.i32(i32 %127) #10
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  %131 = xor i8 %130, 1
  %132 = xor i32 %96, %90
  %133 = xor i32 %132, %97
  %134 = lshr i32 %133, 4
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = icmp eq i32 %97, 0
  %138 = zext i1 %137 to i8
  %139 = trunc i32 %125 to i8
  %140 = xor i32 %125, %126
  %141 = lshr i32 %96, 31
  %142 = xor i32 %141, %126
  %143 = add nuw nsw i32 %140, %142
  %144 = icmp eq i32 %143, 2
  %145 = zext i1 %144 to i8
  store i8 1, i8* %30, align 1, !tbaa !1264
  store i8 %131, i8* %31, align 1, !tbaa !1278
  store i8 %136, i8* %32, align 1, !tbaa !1279
  store i8 %138, i8* %33, align 1, !tbaa !1280
  store i8 %139, i8* %34, align 1, !tbaa !1281
  store i8 %145, i8* %35, align 1, !tbaa !1282
  %146 = add i64 %14, -12
  %147 = inttoptr i64 %146 to i32*
  store i32 -1, i32* %147
  br label %block_40a9b5
}

; Function Attrs: noinline
define %struct.Memory* @sub_4045a0_SelectToView(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4045a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = load i64, i64* %14, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  %20 = add i64 %17, -56
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = add i64 %17, -16
  %28 = load i64, i64* %13, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = add i64 %17, -24
  %31 = load i64, i64* %12, align 8
  %32 = inttoptr i64 %30 to i64*
  store i64 %31, i64* %32
  %33 = add i64 %17, -32
  %34 = load i64, i64* %11, align 8
  %35 = inttoptr i64 %33 to i64*
  store i64 %34, i64* %35
  %36 = add i64 %17, -36
  %37 = load i32, i32* %5, align 4
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = add i64 %17, -40
  %40 = load i32, i32* %7, align 4
  %41 = inttoptr i64 %39 to i32*
  store i32 %40, i32* %41
  %42 = add i64 %17, -44
  %43 = load i32, i32* %9, align 4
  %44 = inttoptr i64 %42 to i32*
  store i32 %43, i32* %44
  %45 = add i64 %17, -52
  %46 = inttoptr i64 %45 to i32*
  store i32 0, i32* %46
  %47 = add i64 %17, -48
  %48 = add i64 %1, 45
  %49 = inttoptr i64 %47 to i32*
  store i32 0, i32* %49
  %50 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %51 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  br label %block_4045cd

block_4045cd:                                     ; preds = %block_4045d9, %block_4045a0
  %52 = phi i64 [ %48, %block_4045a0 ], [ %138, %block_4045d9 ]
  %53 = phi %struct.Memory* [ %2, %block_4045a0 ], [ %53, %block_4045d9 ]
  %54 = inttoptr i64 %47 to i32*
  %55 = load i32, i32* %54
  %56 = zext i32 %55 to i64
  %57 = inttoptr i64 %42 to i32*
  %58 = load i32, i32* %57
  %59 = icmp ult i32 %55, %58
  %60 = select i1 %59, i64 12, i64 93
  %61 = add i64 %52, %60
  br i1 %59, label %block_4045d9, label %block_40462a

block_40462a:                                     ; preds = %block_4045cd
  %62 = inttoptr i64 %33 to i64*
  %63 = load i64, i64* %62
  %64 = inttoptr i64 %27 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %10, align 8, !tbaa !1240
  %66 = inttoptr i64 %39 to i32*
  %67 = load i32, i32* %66
  %68 = shl i32 %67, 3
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %11, align 8, !tbaa !1240
  store i64 %63, i64* %13, align 8, !tbaa !1240
  store i64 %65, i64* %12, align 8, !tbaa !1240
  %70 = add i64 %61, 27
  %71 = add i64 %17, -64
  %72 = inttoptr i64 %71 to i64*
  store i64 %70, i64* %72
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %74 = tail call i64 @memcpy(i64 %63, i64 %65, i64 %69), !noalias !2133
  store i64 %74, i64* %73, align 8, !alias.scope !2133, !noalias !2136
  %75 = add i64 %17, -8
  %76 = icmp ugt i64 %20, -49
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %21, align 1, !tbaa !1264
  %78 = trunc i64 %75 to i32
  %79 = and i32 %78, 255
  %80 = tail call i32 @llvm.ctpop.i32(i32 %79) #10
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  store i8 %83, i8* %22, align 1, !tbaa !1278
  %84 = xor i64 %20, 16
  %85 = xor i64 %84, %75
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %23, align 1, !tbaa !1279
  %89 = icmp eq i64 %75, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %24, align 1, !tbaa !1280
  %91 = lshr i64 %75, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %25, align 1, !tbaa !1281
  %93 = lshr i64 %20, 63
  %94 = xor i64 %91, %93
  %95 = add nuw nsw i64 %94, %91
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %26, align 1, !tbaa !1282
  %98 = inttoptr i64 %75 to i64*
  %99 = load i64, i64* %98
  store i64 %99, i64* %15, align 8, !tbaa !1240
  %100 = inttoptr i64 %17 to i64*
  %101 = load i64, i64* %100
  store i64 %101, i64* %3, align 8, !tbaa !1240
  %102 = add i64 %17, 8
  store i64 %102, i64* %14, align 8, !tbaa !1240
  ret %struct.Memory* %53

block_4045d9:                                     ; preds = %block_4045cd
  %103 = inttoptr i64 %27 to i64*
  %104 = load i64, i64* %103
  %105 = inttoptr i64 %39 to i32*
  %106 = load i32, i32* %105
  %107 = shl i32 %106, 1
  %108 = inttoptr i64 %30 to i64*
  %109 = load i64, i64* %108
  %110 = shl nuw nsw i64 %56, 2
  %111 = add i64 %109, %110
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112
  %114 = add i32 %113, %107
  %115 = add i32 %114, -1
  %116 = zext i32 %115 to i64
  %117 = shl nuw nsw i64 %116, 2
  %118 = add i64 %104, %117
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119
  %121 = inttoptr i64 %33 to i64*
  %122 = load i64, i64* %121
  %123 = inttoptr i64 %45 to i32*
  %124 = load i32, i32* %123
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %50, align 8, !tbaa !1240
  %126 = add i32 %124, 1
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %51, align 8, !tbaa !1240
  %128 = inttoptr i64 %45 to i32*
  store i32 %126, i32* %128
  %129 = add i32 %124, %107
  %130 = zext i32 %129 to i64
  %131 = shl nuw nsw i64 %130, 2
  %132 = add i64 %122, %131
  %133 = inttoptr i64 %132 to i32*
  store i32 %120, i32* %133
  %134 = inttoptr i64 %47 to i32*
  %135 = load i32, i32* %134
  %136 = add i32 %135, 1
  %137 = inttoptr i64 %47 to i32*
  store i32 %136, i32* %137
  %138 = add i64 %61, -12
  br label %block_4045cd
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4084a0_JobPoolUpdate(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4084a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %9, align 8, !tbaa !1240
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18
  %20 = add i64 %19, 548
  %21 = inttoptr i64 %20 to i32*
  %22 = load i32, i32* %21
  %23 = add i64 %12, -20
  %24 = inttoptr i64 %23 to i32*
  store i32 %22, i32* %24
  %25 = add i64 %12, -16
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %26
  %28 = add i64 %27, 4464
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29
  %31 = inttoptr i64 %23 to i32*
  %32 = load i32, i32* %31
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 12
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %41 = add i64 %34, %30
  %42 = inttoptr i64 %41 to i32*
  %43 = load i32, i32* %42
  %44 = load i64, i64* %10, align 8
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %47, 4464
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %44, -12
  %52 = inttoptr i64 %51 to i32*
  %53 = load i32, i32* %52
  %54 = zext i32 %53 to i64
  %55 = mul nuw nsw i64 %54, 12
  %56 = add i64 %55, %50
  %57 = add i64 %56, 8
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58
  %60 = add i32 %59, %43
  %61 = load i64, i64* %10, align 8
  %62 = add i64 %61, -16
  %63 = inttoptr i64 %62 to i32*
  store i32 %60, i32* %63
  %64 = add i64 %61, -8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %66, 4476
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68
  %70 = add i64 %66, 4456
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = inttoptr i64 %62 to i32*
  %74 = load i32, i32* %73
  %75 = zext i32 %74 to i64
  %76 = mul nuw nsw i64 %75, 24
  %77 = add i64 %76, %72
  %78 = inttoptr i64 %77 to i32*
  store i32 %69, i32* %78
  %79 = add i64 %61, -12
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80
  %82 = inttoptr i64 %64 to i64*
  %83 = load i64, i64* %82
  %84 = add i64 %83, 4456
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = load i64, i64* %10, align 8
  %88 = add i64 %87, -16
  %89 = inttoptr i64 %88 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  %92 = mul nuw nsw i64 %91, 24
  %93 = add i64 %92, %86
  %94 = add i64 %93, 4
  %95 = inttoptr i64 %94 to i32*
  store i32 %81, i32* %95
  %96 = add i64 %87, -8
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %98, 556
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100
  %102 = add i64 %98, 4456
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  %105 = inttoptr i64 %88 to i32*
  %106 = load i32, i32* %105
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %6, align 8, !tbaa !1240
  %108 = zext i32 %106 to i64
  %109 = mul nuw nsw i64 %108, 24
  %110 = add i64 %109, %104
  %111 = add i64 %110, 8
  %112 = inttoptr i64 %111 to i32*
  store i32 %101, i32* %112
  %113 = load i64, i64* %10, align 8
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  %117 = add i64 %116, 576
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %116, 4456
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  %123 = add i64 %113, -16
  %124 = inttoptr i64 %123 to i32*
  %125 = load i32, i32* %124
  %126 = zext i32 %125 to i64
  %127 = mul nuw nsw i64 %126, 24
  %128 = add i64 %127, %122
  store i64 %128, i64* %8, align 8, !tbaa !1240
  %129 = add i64 %128, 16
  %130 = inttoptr i64 %129 to i64*
  store i64 %119, i64* %130
  %131 = inttoptr i64 %114 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %132, 4464
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %113, -12
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = zext i32 %138 to i64
  %140 = mul nuw nsw i64 %139, 12
  store i64 %140, i64* %7, align 8, !tbaa !1240
  %141 = add i64 %140, %135
  store i64 %141, i64* %5, align 8, !tbaa !1240
  %142 = add i64 %141, 8
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = add i32 %144, 1
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %4, align 8, !tbaa !1240
  %147 = icmp eq i32 %144, -1
  %148 = icmp eq i32 %145, 0
  %149 = or i1 %147, %148
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %35, align 1, !tbaa !1264
  %151 = and i32 %145, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #10
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %36, align 1, !tbaa !1278
  %156 = xor i32 %145, %144
  %157 = lshr i32 %156, 4
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %37, align 1, !tbaa !1279
  %160 = zext i1 %148 to i8
  store i8 %160, i8* %38, align 1, !tbaa !1280
  %161 = lshr i32 %145, 31
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %39, align 1, !tbaa !1281
  %163 = lshr i32 %144, 31
  %164 = xor i32 %161, %163
  %165 = add nuw nsw i32 %164, %161
  %166 = icmp eq i32 %165, 2
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %40, align 1, !tbaa !1282
  %168 = inttoptr i64 %142 to i32*
  store i32 %145, i32* %168
  %169 = load i64, i64* %9, align 8, !tbaa !1240
  %170 = add i64 %169, 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %10, align 8, !tbaa !1240
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %3, align 8, !tbaa !1240
  %175 = add i64 %169, 16
  store i64 %175, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_406140_RunFormation(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_406140:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %14, -24
  %24 = load i64, i64* %10, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %14, -32
  %27 = load i64, i64* %9, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %14, -36
  %30 = inttoptr i64 %29 to i32*
  store i32 0, i32* %30
  %31 = add i64 %14, -272
  %32 = inttoptr i64 %31 to i64*
  store i64 0, i64* %32
  %33 = inttoptr i64 %23 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %34, 616
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %10, align 8, !tbaa !1240
  %38 = add i64 %34, 548
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39
  %41 = zext i32 %40 to i64
  store i64 %41, i64* %9, align 8, !tbaa !1240
  %42 = add i64 %34, 540
  %43 = inttoptr i64 %42 to i32*
  %44 = load i32, i32* %43
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %8, align 8, !tbaa !1240
  %46 = add i64 %1, 22256
  %47 = add i64 %1, 73
  %48 = add i64 %14, -320
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49
  store i64 %48, i64* %11, align 8, !tbaa !1240
  %50 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %46, %struct.Memory* %2)
  %51 = load i64, i64* %12, align 8
  %52 = add i64 %51, -28
  %53 = load i64, i64* %3, align 8
  %54 = add i64 %53, 7
  %55 = inttoptr i64 %52 to i32*
  store i32 1, i32* %55
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  br label %block_406190

block_4063de:                                     ; preds = %block_4063cd
  %60 = add i64 %418, 616
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %62, 40
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64
  %66 = icmp eq i32 %65, 0
  %67 = select i1 %66, i64 301, i64 21
  %68 = add i64 %357, %67
  br i1 %66, label %block_40650b, label %block_4063f3

block_4064db:                                     ; preds = %block_4063f3
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4146), i64* %9, align 8, !tbaa !1240
  %69 = load i64, i64* @stderr
  store i64 %69, i64* %10, align 8, !tbaa !1240
  %70 = add i64 %351, 25
  %71 = load i64, i64* %11, align 8, !tbaa !1240
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %70, i64* %73
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %76 = load i64, i64* %8, align 8, !alias.scope !2138, !noalias !2141
  %77 = load i64, i64* %56, align 8, !alias.scope !2138, !noalias !2141
  %78 = load i64, i64* %74, align 8, !alias.scope !2138, !noalias !2141
  %79 = load i64, i64* %75, align 8, !alias.scope !2138, !noalias !2141
  %80 = inttoptr i64 %71 to i64*
  %81 = load i64, i64* %80
  %82 = add i64 %71, 8
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %71, 16
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  %88 = add i64 %71, 24
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89
  %91 = add i64 %71, 32
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %71, 40
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %71, 48
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98
  %100 = add i64 %71, 56
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %71, 64
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104
  %106 = add i64 %71, 72
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107
  %109 = inttoptr i64 %72 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %3, align 8, !alias.scope !2138, !noalias !2141
  store i64 %71, i64* %11, align 8, !alias.scope !2138, !noalias !2141
  %111 = tail call i64 @fprintf(i64 %69, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4146), i64 %76, i64 %77, i64 %78, i64 %79, i64 %81, i64 %84, i64 %87, i64 %90, i64 %93, i64 %96, i64 %99, i64 %102, i64 %105, i64 %108), !noalias !2138
  %112 = load i64, i64* %12, align 8
  %113 = add i64 %112, -4
  %114 = inttoptr i64 %113 to i32*
  store i32 1, i32* %114
  %115 = add i64 %112, -296
  %116 = trunc i64 %111 to i32
  %117 = inttoptr i64 %115 to i32*
  store i32 %116, i32* %117
  br label %block_406531

block_4062d9:                                     ; preds = %block_40625b
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4045), i64* %9, align 8, !tbaa !1240
  %118 = load i64, i64* @stderr
  store i64 %118, i64* %10, align 8, !tbaa !1240
  %119 = add i64 %611, 25
  %120 = load i64, i64* %11, align 8, !tbaa !1240
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %125 = load i64, i64* %8, align 8, !alias.scope !2143, !noalias !2146
  %126 = load i64, i64* %123, align 8, !alias.scope !2143, !noalias !2146
  %127 = load i64, i64* %124, align 8, !alias.scope !2143, !noalias !2146
  %128 = inttoptr i64 %120 to i64*
  %129 = load i64, i64* %128
  %130 = add i64 %120, 8
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %120, 16
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %120, 24
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %120, 32
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  %142 = add i64 %120, 40
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  %145 = add i64 %120, 48
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  %148 = add i64 %120, 56
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %120, 64
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152
  %154 = add i64 %120, 72
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  %157 = inttoptr i64 %121 to i64*
  %158 = load i64, i64* %157
  store i64 %158, i64* %3, align 8, !alias.scope !2143, !noalias !2146
  store i64 %120, i64* %11, align 8, !alias.scope !2143, !noalias !2146
  %159 = tail call i64 @fprintf(i64 %118, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4045), i64 %125, i64 %600, i64 %126, i64 %127, i64 %129, i64 %132, i64 %135, i64 %138, i64 %141, i64 %144, i64 %147, i64 %150, i64 %153, i64 %156), !noalias !2143
  %160 = load i64, i64* %12, align 8
  %161 = add i64 %160, -4
  %162 = inttoptr i64 %161 to i32*
  store i32 2, i32* %162
  %163 = add i64 %160, -288
  %164 = trunc i64 %159 to i32
  %165 = inttoptr i64 %163 to i32*
  store i32 %164, i32* %165
  br label %block_406531

block_406396:                                     ; preds = %block_406304
  %166 = load i64, i64* %12, align 8
  %167 = add i64 %166, -16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %169, 616
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %10, align 8, !tbaa !1240
  %173 = add i64 %169, 548
  %174 = inttoptr i64 %173 to i32*
  %175 = load i32, i32* %174
  %176 = zext i32 %175 to i64
  store i64 %176, i64* %9, align 8, !tbaa !1240
  %177 = add i64 %169, 540
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %8, align 8, !tbaa !1240
  %181 = add i64 %409, 21658
  %182 = add i64 %409, 36
  %183 = load i64, i64* %11, align 8, !tbaa !1240
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  store i64 %182, i64* %185
  store i64 %184, i64* %11, align 8, !tbaa !1240
  %186 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %181, %struct.Memory* %404)
  %187 = load i64, i64* %3, align 8
  %188 = load i64, i64* %12, align 8
  br label %block_4063ba

block_40650b:                                     ; preds = %block_406506, %block_4063cd, %block_4063de
  %189 = phi i64 [ %411, %block_4063cd ], [ %411, %block_4063de ], [ %359, %block_406506 ]
  %190 = phi i64 [ %357, %block_4063cd ], [ %68, %block_4063de ], [ %358, %block_406506 ]
  %191 = phi %struct.Memory* [ %412, %block_4063cd ], [ %412, %block_4063de ], [ %346, %block_406506 ]
  store i64 0, i64* %9, align 8, !tbaa !1240
  store i64 2, i64* %8, align 8, !tbaa !1240
  %192 = add i64 %189, -16
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193
  store i64 %194, i64* %7, align 8, !tbaa !1240
  %195 = add i64 %194, 4240
  %196 = inttoptr i64 %195 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %10, align 8, !tbaa !1240
  %198 = add i64 %190, 25
  %199 = load i64, i64* %11, align 8, !tbaa !1240
  %200 = add i64 %199, -8
  %201 = inttoptr i64 %200 to i64*
  store i64 %198, i64* %201
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %3, align 8, !alias.scope !2148, !noalias !2151
  store i64 %199, i64* %11, align 8, !alias.scope !2148, !noalias !2151
  %204 = tail call i64 @fseek(i64 %197, i64 0, i64 2), !noalias !2148
  %205 = load i64, i64* %12, align 8
  %206 = add i64 %205, -4
  %207 = inttoptr i64 %206 to i32*
  store i32 0, i32* %207
  %208 = add i64 %205, -300
  %209 = trunc i64 %204 to i32
  %210 = inttoptr i64 %208 to i32*
  store i32 %209, i32* %210
  br label %block_406531

block_406531:                                     ; preds = %block_40636b, %block_40650b, %block_4062d9, %block_4064db
  %211 = phi i64 [ %205, %block_40650b ], [ %112, %block_4064db ], [ %471, %block_40636b ], [ %160, %block_4062d9 ]
  %212 = phi %struct.Memory* [ %191, %block_40650b ], [ %346, %block_4064db ], [ %404, %block_40636b ], [ %538, %block_4062d9 ]
  %213 = add i64 %211, -4
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = zext i32 %215 to i64
  store i64 %216, i64* %6, align 8, !tbaa !1240
  %217 = load i64, i64* %11, align 8
  %218 = add i64 %217, 304
  %219 = icmp ugt i64 %217, -305
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %17, align 1, !tbaa !1264
  %221 = trunc i64 %218 to i32
  %222 = and i32 %221, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #10
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %18, align 1, !tbaa !1278
  %227 = xor i64 %217, 16
  %228 = xor i64 %227, %218
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %19, align 1, !tbaa !1279
  %232 = icmp eq i64 %218, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %20, align 1, !tbaa !1280
  %234 = lshr i64 %218, 63
  %235 = trunc i64 %234 to i8
  store i8 %235, i8* %21, align 1, !tbaa !1281
  %236 = lshr i64 %217, 63
  %237 = xor i64 %234, %236
  %238 = add nuw nsw i64 %237, %234
  %239 = icmp eq i64 %238, 2
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %22, align 1, !tbaa !1282
  %241 = add i64 %217, 312
  %242 = inttoptr i64 %218 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %12, align 8, !tbaa !1240
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %3, align 8, !tbaa !1240
  %246 = add i64 %217, 320
  store i64 %246, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %212

block_4063ba:                                     ; preds = %block_4061a3, %block_406396
  %247 = phi i64 [ %539, %block_4061a3 ], [ %188, %block_406396 ]
  %248 = phi i64 [ %555, %block_4061a3 ], [ %187, %block_406396 ]
  %249 = phi %struct.Memory* [ %538, %block_4061a3 ], [ %186, %block_406396 ]
  %250 = add i64 %247, -28
  %251 = inttoptr i64 %250 to i32*
  %252 = load i32, i32* %251
  %253 = add i32 %252, 1
  %254 = inttoptr i64 %250 to i32*
  store i32 %253, i32* %254
  %255 = add i64 %248, -554
  br label %block_406190

block_4063f3:                                     ; preds = %block_4063de
  %256 = add i64 %418, 632
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  %259 = zext i32 %354 to i64
  %260 = mul nuw nsw i64 %259, 24
  %261 = add i64 %260, %258
  %262 = inttoptr i64 %261 to i32*
  store i32 %65, i32* %262
  %263 = add i64 %411, -264
  %264 = inttoptr i64 %263 to i64*
  %265 = load i64, i64* %264
  %266 = inttoptr i64 %416 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %267, 632
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = load i64, i64* %12, align 8
  %272 = add i64 %271, -16
  %273 = inttoptr i64 %272 to i64*
  %274 = load i64, i64* %273
  %275 = add i64 %274, 624
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276
  %278 = zext i32 %277 to i64
  %279 = mul nuw nsw i64 %278, 24
  %280 = add i64 %279, %270
  %281 = add i64 %280, 8
  %282 = inttoptr i64 %281 to i64*
  store i64 %265, i64* %282
  %283 = inttoptr i64 %272 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %284, 624
  %286 = inttoptr i64 %285 to i32*
  %287 = load i32, i32* %286
  %288 = add i32 %287, 1
  %289 = inttoptr i64 %285 to i32*
  store i32 %288, i32* %289
  %290 = load i64, i64* %12, align 8
  %291 = add i64 %290, -16
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %293, 616
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %296, 40
  %298 = inttoptr i64 %297 to i32*
  %299 = load i32, i32* %298
  %300 = zext i32 %299 to i64
  store i64 %300, i64* %7, align 8, !tbaa !1240
  %301 = add i64 %293, 548
  %302 = inttoptr i64 %301 to i32*
  %303 = load i32, i32* %302
  %304 = shl i32 %303, 2
  %305 = add i64 %293, 540
  %306 = inttoptr i64 %305 to i32*
  %307 = load i32, i32* %306
  %308 = shl i32 %307, 3
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %57, align 8, !tbaa !1240
  %310 = add i32 %308, %304
  %311 = load i64, i64* %7, align 8
  %312 = shl i64 %311, 32
  %313 = ashr exact i64 %312, 32
  %314 = sext i32 %310 to i64
  %315 = mul nsw i64 %314, %313
  %316 = and i64 %315, 4294967292
  %317 = load i64, i64* %12, align 8
  %318 = add i64 %317, -264
  %319 = inttoptr i64 %318 to i64*
  %320 = load i64, i64* %319
  %321 = add i64 %320, %316
  %322 = inttoptr i64 %318 to i64*
  store i64 %321, i64* %322
  %323 = add i64 %317, -16
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %325, 588
  %327 = inttoptr i64 %326 to i32*
  %328 = load i32, i32* %327
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %10, align 8, !tbaa !1240
  %330 = add i64 %325, 4248
  %331 = inttoptr i64 %330 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %9, align 8, !tbaa !1240
  %333 = add i64 %325, 616
  %334 = inttoptr i64 %333 to i64*
  %335 = load i64, i64* %334
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  store i64 %337, i64* %8, align 8, !tbaa !1240
  %338 = add i64 %325, 4224
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  store i64 %340, i64* %7, align 8, !tbaa !1240
  %341 = add i64 %68, 20877
  %342 = add i64 %68, 223
  %343 = load i64, i64* %11, align 8, !tbaa !1240
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %342, i64* %345
  store i64 %344, i64* %11, align 8, !tbaa !1240
  %346 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %341, %struct.Memory* %412)
  %347 = load i32, i32* %5, align 4
  %348 = load i64, i64* %3, align 8
  %349 = icmp eq i32 %347, 0
  %350 = select i1 %349, i64 52, i64 9
  %351 = add i64 %348, %350
  br i1 %349, label %block_406506, label %block_4064db

block_4063cd:                                     ; preds = %block_406190
  %352 = add i64 %418, 624
  %353 = inttoptr i64 %352 to i32*
  %354 = load i32, i32* %353
  %355 = icmp eq i32 %354, 0
  %356 = select i1 %355, i64 318, i64 17
  %357 = add i64 %427, %356
  br i1 %355, label %block_40650b, label %block_4063de

block_406506:                                     ; preds = %block_4063f3
  %358 = add i64 %351, 5
  %359 = load i64, i64* %12, align 8
  br label %block_40650b

block_406304:                                     ; preds = %block_40625b
  %360 = add i64 %605, 616
  %361 = inttoptr i64 %360 to i64*
  %362 = load i64, i64* %361
  %363 = add i64 %362, 40
  %364 = inttoptr i64 %363 to i32*
  %365 = load i32, i32* %364
  %366 = add i64 %605, 588
  %367 = inttoptr i64 %366 to i32*
  %368 = load i32, i32* %367
  %369 = sext i32 %365 to i64
  %370 = sext i32 %368 to i64
  %371 = mul nsw i64 %370, %369
  %372 = and i64 %371, 4294967295
  %373 = add i64 %602, -264
  %374 = inttoptr i64 %373 to i64*
  %375 = load i64, i64* %374
  %376 = add i64 %375, %372
  %377 = inttoptr i64 %373 to i64*
  store i64 %376, i64* %377
  %378 = inttoptr i64 %603 to i64*
  %379 = load i64, i64* %378
  %380 = add i64 %379, 588
  %381 = inttoptr i64 %380 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %10, align 8, !tbaa !1240
  %384 = load i64, i64* %12, align 8
  %385 = add i64 %384, -16
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %387, 4248
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  store i64 %390, i64* %9, align 8, !tbaa !1240
  %391 = add i64 %387, 616
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  store i64 %395, i64* %8, align 8, !tbaa !1240
  %396 = add i64 %387, 4224
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  store i64 %398, i64* %7, align 8, !tbaa !1240
  %399 = add i64 %611, 21116
  %400 = add i64 %611, 94
  %401 = load i64, i64* %11, align 8, !tbaa !1240
  %402 = add i64 %401, -8
  %403 = inttoptr i64 %402 to i64*
  store i64 %400, i64* %403
  store i64 %402, i64* %11, align 8, !tbaa !1240
  %404 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %399, %struct.Memory* %538)
  %405 = load i32, i32* %5, align 4
  %406 = load i64, i64* %3, align 8
  %407 = icmp eq i32 %405, 0
  %408 = select i1 %407, i64 52, i64 9
  %409 = add i64 %406, %408
  br i1 %407, label %block_406396, label %block_40636b

block_406190:                                     ; preds = %block_4063ba, %block_406140
  %410 = phi i64 [ %54, %block_406140 ], [ %255, %block_4063ba ]
  %411 = phi i64 [ %51, %block_406140 ], [ %247, %block_4063ba ]
  %412 = phi %struct.Memory* [ %50, %block_406140 ], [ %249, %block_4063ba ]
  %413 = add i64 %411, -28
  %414 = inttoptr i64 %413 to i32*
  %415 = load i32, i32* %414
  %416 = add i64 %411, -16
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %418, 4488
  %420 = inttoptr i64 %419 to i32*
  %421 = load i32, i32* %420
  %422 = sub i32 %415, %421
  %423 = icmp ult i32 %415, %421
  %424 = icmp eq i32 %422, 0
  %425 = or i1 %424, %423
  %426 = select i1 %425, i64 19, i64 573
  %427 = add i64 %410, %426
  br i1 %425, label %block_4061a3, label %block_4063cd

block_40636b:                                     ; preds = %block_406304
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4090), i64* %9, align 8, !tbaa !1240
  %428 = load i64, i64* @stderr
  store i64 %428, i64* %10, align 8, !tbaa !1240
  %429 = add i64 %409, 25
  %430 = load i64, i64* %11, align 8, !tbaa !1240
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %435 = load i64, i64* %8, align 8, !alias.scope !2153, !noalias !2156
  %436 = load i64, i64* %56, align 8, !alias.scope !2153, !noalias !2156
  %437 = load i64, i64* %433, align 8, !alias.scope !2153, !noalias !2156
  %438 = load i64, i64* %434, align 8, !alias.scope !2153, !noalias !2156
  %439 = inttoptr i64 %430 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %430, 8
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %430, 16
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %430, 24
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %430, 32
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %430, 40
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %430, 48
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %430, 56
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  %462 = add i64 %430, 64
  %463 = inttoptr i64 %462 to i64*
  %464 = load i64, i64* %463
  %465 = add i64 %430, 72
  %466 = inttoptr i64 %465 to i64*
  %467 = load i64, i64* %466
  %468 = inttoptr i64 %431 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %3, align 8, !alias.scope !2153, !noalias !2156
  store i64 %430, i64* %11, align 8, !alias.scope !2153, !noalias !2156
  %470 = tail call i64 @fprintf(i64 %428, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4090), i64 %435, i64 %436, i64 %437, i64 %438, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458, i64 %461, i64 %464, i64 %467), !noalias !2153
  %471 = load i64, i64* %12, align 8
  %472 = add i64 %471, -4
  %473 = inttoptr i64 %472 to i32*
  store i32 1, i32* %473
  %474 = add i64 %471, -292
  %475 = trunc i64 %470 to i32
  %476 = inttoptr i64 %474 to i32*
  store i32 %475, i32* %476
  br label %block_406531

block_4061a3:                                     ; preds = %block_406190
  %477 = add i64 %411, -256
  %478 = add i64 %418, 584
  %479 = inttoptr i64 %478 to i32*
  %480 = load i32, i32* %479
  %481 = zext i32 %480 to i64
  %482 = add i64 %411, -24
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483
  %485 = add i64 %411, -272
  %486 = inttoptr i64 %485 to i64*
  store i64 %484, i64* %486
  %487 = inttoptr i64 %485 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %427, 52
  %490 = load i64, i64* %11, align 8, !tbaa !1240
  %491 = add i64 %490, -8
  %492 = inttoptr i64 %491 to i64*
  store i64 %489, i64* %492
  %493 = inttoptr i64 %491 to i64*
  %494 = load i64, i64* %493
  store i64 %494, i64* %3, align 8, !alias.scope !2158, !noalias !2161
  store i64 %490, i64* %11, align 8, !alias.scope !2158, !noalias !2161
  %495 = tail call i64 @fread(i64 %477, i64 %481, i64 1, i64 %488)
  %496 = load i64, i64* %12, align 8
  %497 = add i64 %496, -144
  %498 = load i64, i64* %3, align 8
  store i64 %497, i64* %8, align 8, !tbaa !1240
  %499 = add i64 %496, -256
  store i64 %499, i64* %10, align 8, !tbaa !1240
  %500 = add i64 %496, -16
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %502, 4312
  %504 = add i64 %502, 544
  %505 = inttoptr i64 %504 to i32*
  %506 = load i32, i32* %505
  %507 = zext i32 %506 to i64
  %508 = add i64 %502, 540
  %509 = inttoptr i64 %508 to i32*
  %510 = load i32, i32* %509
  %511 = zext i32 %510 to i64
  %512 = add i64 %502, 548
  %513 = inttoptr i64 %512 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %59, align 8, !tbaa !1240
  store i64 %503, i64* %9, align 8, !tbaa !1240
  store i64 %507, i64* %7, align 8, !tbaa !1240
  store i64 %511, i64* %57, align 8, !tbaa !1240
  store i64 %515, i64* %58, align 8, !tbaa !1240
  %516 = add i64 %496, -280
  %517 = inttoptr i64 %516 to i64*
  store i64 %495, i64* %517
  %518 = add i64 %498, -7223
  %519 = add i64 %498, 82
  %520 = load i64, i64* %11, align 8, !tbaa !1240
  %521 = add i64 %520, -8
  %522 = inttoptr i64 %521 to i64*
  store i64 %519, i64* %522
  store i64 %521, i64* %11, align 8, !tbaa !1240
  %523 = tail call %struct.Memory* @sub_4045a0_SelectToView(%struct.State* nonnull %0, i64 %518, %struct.Memory* %412)
  %524 = load i64, i64* %12, align 8
  %525 = add i64 %524, -144
  %526 = load i64, i64* %3, align 8
  store i64 %525, i64* %9, align 8, !tbaa !1240
  %527 = add i64 %524, -16
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %529, 616
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %10, align 8, !tbaa !1240
  %533 = add i64 %526, 18327
  %534 = add i64 %526, 23
  %535 = load i64, i64* %11, align 8, !tbaa !1240
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %534, i64* %537
  store i64 %536, i64* %11, align 8, !tbaa !1240
  %538 = tail call %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* nonnull %0, i64 %533, %struct.Memory* %523)
  %539 = load i64, i64* %12, align 8
  %540 = add i64 %539, -16
  %541 = load i64, i64* %3, align 8
  %542 = inttoptr i64 %540 to i64*
  %543 = load i64, i64* %542
  %544 = add i64 %543, 616
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  %547 = add i64 %546, 60
  %548 = inttoptr i64 %547 to i32*
  %549 = load i32, i32* %548
  %550 = icmp eq i32 %549, 0
  %551 = add i64 %539, -284
  %552 = load i32, i32* %5, align 4
  %553 = inttoptr i64 %551 to i32*
  store i32 %552, i32* %553
  %554 = select i1 %550, i64 378, i64 27
  %555 = add i64 %541, %554
  br i1 %550, label %block_4063ba, label %block_40625b

block_40625b:                                     ; preds = %block_4061a3
  %556 = inttoptr i64 %540 to i64*
  %557 = load i64, i64* %556
  %558 = add i64 %557, 616
  %559 = inttoptr i64 %558 to i64*
  %560 = load i64, i64* %559
  %561 = add i64 %560, 40
  %562 = inttoptr i64 %561 to i32*
  %563 = load i32, i32* %562
  %564 = add i64 %557, 632
  %565 = inttoptr i64 %564 to i64*
  %566 = load i64, i64* %565
  %567 = add i64 %557, 624
  %568 = inttoptr i64 %567 to i32*
  %569 = load i32, i32* %568
  %570 = zext i32 %569 to i64
  %571 = mul nuw nsw i64 %570, 24
  %572 = add i64 %571, %566
  %573 = inttoptr i64 %572 to i32*
  store i32 %563, i32* %573
  %574 = add i64 %539, -264
  %575 = inttoptr i64 %574 to i64*
  %576 = load i64, i64* %575
  %577 = inttoptr i64 %540 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %578, 632
  %580 = inttoptr i64 %579 to i64*
  %581 = load i64, i64* %580
  %582 = load i64, i64* %12, align 8
  %583 = add i64 %582, -16
  %584 = inttoptr i64 %583 to i64*
  %585 = load i64, i64* %584
  %586 = add i64 %585, 624
  %587 = inttoptr i64 %586 to i32*
  %588 = load i32, i32* %587
  %589 = zext i32 %588 to i64
  %590 = mul nuw nsw i64 %589, 24
  %591 = add i64 %590, %581
  store i64 %591, i64* %8, align 8, !tbaa !1240
  %592 = add i64 %591, 8
  %593 = inttoptr i64 %592 to i64*
  store i64 %576, i64* %593
  %594 = inttoptr i64 %583 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %595, 624
  %597 = inttoptr i64 %596 to i32*
  %598 = load i32, i32* %597
  %599 = add i32 %598, 1
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %7, align 8, !tbaa !1240
  %601 = inttoptr i64 %596 to i32*
  store i32 %599, i32* %601
  %602 = load i64, i64* %12, align 8
  %603 = add i64 %602, -16
  %604 = inttoptr i64 %603 to i64*
  %605 = load i64, i64* %604
  %606 = add i64 %605, 624
  %607 = inttoptr i64 %606 to i32*
  %608 = load i32, i32* %607
  %609 = icmp ult i32 %608, 1024
  %610 = select i1 %609, i64 169, i64 126
  %611 = add i64 %555, %610
  br i1 %609, label %block_406304, label %block_4062d9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400dc0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400dc0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %5, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %7, i64* %10
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %4, align 8, !tbaa !1240
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)) to i8), i8* %11, align 1, !tbaa !1264
  %12 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)) to i32), i32 255)) #10
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !1278
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stdout to i64), i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64))), i64 4) to i8), i8 1), i8* %17, align 1, !tbaa !1279
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 0) to i8), i8* %18, align 1, !tbaa !1280
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 63) to i8), i8* %19, align 1, !tbaa !1281
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stdout to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %20, align 1, !tbaa !1282
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 0), label %block_400de8, label %block_400dd1

block_400dd1:                                     ; preds = %block_400dc0
  store i64 0, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %11, align 1, !tbaa !1264
  store i8 1, i8* %16, align 1, !tbaa !1278
  store i8 1, i8* %18, align 1, !tbaa !1280
  store i8 0, i8* %19, align 1, !tbaa !1281
  store i8 0, i8* %20, align 1, !tbaa !1282
  store i8 0, i8* %17, align 1, !tbaa !1279
  br label %block_400de8

block_400de8:                                     ; preds = %block_400dd1, %block_400dc0
  %21 = inttoptr i64 %9 to i64*
  %22 = load i64, i64* %21
  store i64 %22, i64* %6, align 8, !tbaa !1240
  %23 = inttoptr i64 %8 to i64*
  %24 = load i64, i64* %23
  store i64 %24, i64* %3, align 8, !tbaa !1240
  %25 = add i64 %8, 8
  store i64 %25, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f18(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %5 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = load i64, i64* %14, align 8
  br label %block_401f18

block_401ef5:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpA_type* @adcexpA to i64), i64* %10, align 8, !tbaa !1240
  %22 = inttoptr i64 %267 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %12, align 8, !tbaa !1240
  %24 = add i64 %266, -96
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25
  store i64 %26, i64* %11, align 8, !tbaa !1240
  %27 = load i64, i64* %13, align 8, !tbaa !1240
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 4202252, i64* %29
  store i64 %28, i64* %13, align 8, !tbaa !1240
  %30 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %246)
  %31 = load i64, i64* %14, align 8
  %32 = add i64 %31, -176
  %33 = load i64, i64* %8, align 8
  %34 = load i64, i64* %4, align 8
  %35 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %35
  %36 = add i64 %34, 42
  br label %block_401f36.backedge

block_4022f3:                                     ; preds = %block_40219a
  %37 = add i64 %812, -144
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %812, -24
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %812, -40
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %833, 32
  %47 = load i64, i64* %13, align 8, !tbaa !1240
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %46, i64* %49
  %50 = load i64, i64* %409, align 8, !alias.scope !2163, !noalias !2166
  %51 = load i64, i64* %420, align 8, !alias.scope !2163, !noalias !2166
  %52 = inttoptr i64 %47 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %47, 8
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %47, 16
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %47, 24
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %47, 32
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %47, 40
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %47, 48
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %47, 56
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73
  %75 = add i64 %47, 64
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  %78 = add i64 %47, 72
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = inttoptr i64 %48 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %4, align 8, !alias.scope !2163, !noalias !2166
  store i64 %47, i64* %13, align 8, !alias.scope !2163, !noalias !2166
  %83 = tail call i64 @fprintf(i64 %39, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 921), i64 %42, i64 %45, i64 %50, i64 %51, i64 %53, i64 %56, i64 %59, i64 %62, i64 %65, i64 %68, i64 %71, i64 %74, i64 %77, i64 %80), !noalias !2163
  %84 = load i64, i64* %14, align 8
  %85 = add i64 %84, -144
  %86 = load i64, i64* %4, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %84, -236
  %90 = trunc i64 %83 to i32
  %91 = inttoptr i64 %89 to i32*
  store i32 %90, i32* %91
  %92 = add i64 %86, 18
  %93 = load i64, i64* %13, align 8, !tbaa !1240
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %4, align 8, !alias.scope !2168, !noalias !2171
  store i64 %93, i64* %13, align 8, !alias.scope !2168, !noalias !2171
  %98 = tail call i64 @fclose(i64 %88), !noalias !2168
  %99 = load i64, i64* %14, align 8
  %100 = add i64 %99, -120
  %101 = load i64, i64* %4, align 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %9, align 8, !tbaa !1240
  %104 = add i64 %99, -240
  %105 = trunc i64 %98 to i32
  %106 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %101, 18
  %108 = load i64, i64* %13, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110
  %111 = inttoptr i64 %109 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %4, align 8, !alias.scope !2173, !noalias !2176
  store i64 %108, i64* %13, align 8, !alias.scope !2173, !noalias !2176
  %113 = tail call i64 @free(i64 %103), !noalias !2173
  %114 = load i64, i64* %4, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 968), i64* %11, align 8, !tbaa !1240
  %115 = load i64, i64* @stdout
  %116 = load i64, i64* %14, align 8
  %117 = add i64 %116, -136
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %10, align 8, !tbaa !1240
  %120 = add i64 %114, 32
  %121 = load i64, i64* %13, align 8, !tbaa !1240
  %122 = add i64 %121, -8
  %123 = inttoptr i64 %122 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %418, align 8, !alias.scope !2178, !noalias !2181
  %125 = load i64, i64* %409, align 8, !alias.scope !2178, !noalias !2181
  %126 = load i64, i64* %420, align 8, !alias.scope !2178, !noalias !2181
  %127 = inttoptr i64 %121 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %121, 8
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %121, 16
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %121, 24
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %121, 32
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %121, 40
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %121, 48
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %121, 56
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %121, 64
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %121, 72
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = inttoptr i64 %122 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %4, align 8, !alias.scope !2178, !noalias !2181
  store i64 %121, i64* %13, align 8, !alias.scope !2178, !noalias !2181
  %158 = tail call i64 @fprintf(i64 %115, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 968), i64 %119, i64 %124, i64 %125, i64 %126, i64 %128, i64 %131, i64 %134, i64 %137, i64 %140, i64 %143, i64 %146, i64 %149, i64 %152, i64 %155), !noalias !2178
  %159 = load i64, i64* %14, align 8
  %160 = add i64 %159, -136
  %161 = load i64, i64* %4, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162
  store i64 %163, i64* %12, align 8, !tbaa !1240
  %164 = add i64 %159, -244
  %165 = trunc i64 %158 to i32
  %166 = inttoptr i64 %164 to i32*
  store i32 %165, i32* %166
  %167 = add i64 %161, 18
  %168 = load i64, i64* %13, align 8, !tbaa !1240
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %4, align 8, !alias.scope !2183, !noalias !2186
  store i64 %168, i64* %13, align 8, !alias.scope !2183, !noalias !2186
  %173 = tail call i64 @free(i64 %163), !noalias !2183
  %174 = load i64, i64* %14, align 8
  %175 = add i64 %174, -4
  %176 = inttoptr i64 %175 to i32*
  store i32 1, i32* %176
  br label %block_402370

block_4021f6:                                     ; preds = %block_4021ae, %block_402258
  %177 = phi i64 [ %705, %block_4021ae ], [ %244, %block_402258 ]
  %178 = phi i64 [ %686, %block_4021ae ], [ %236, %block_402258 ]
  %179 = phi %struct.Memory* [ %813, %block_4021ae ], [ %238, %block_402258 ]
  %180 = add i64 %178, -88
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  %183 = add i64 %178, -60
  %184 = inttoptr i64 %183 to i32*
  %185 = load i32, i32* %184
  %186 = sext i32 %185 to i64
  %187 = sub i64 %182, %186
  %188 = lshr i64 %187, 63
  %189 = trunc i64 %188 to i8
  %190 = lshr i64 %182, 63
  %191 = lshr i64 %186, 63
  %192 = xor i64 %190, %191
  %193 = xor i64 %188, %190
  %194 = add nuw nsw i64 %193, %192
  %195 = icmp eq i64 %194, 2
  %196 = icmp ne i8 %189, 0
  %197 = xor i1 %196, %195
  %198 = select i1 %197, i64 17, i64 120
  %199 = add i64 %177, %198
  br i1 %197, label %block_402207, label %block_40226e

block_401ff2:                                     ; preds = %block_401fc5, %block_401fdb
  %200 = phi i64 [ %480, %block_401fc5 ], [ %229, %block_401fdb ]
  %201 = phi i64 [ %789, %block_401fc5 ], [ %228, %block_401fdb ]
  %202 = phi %struct.Memory* [ %790, %block_401fc5 ], [ %790, %block_401fdb ]
  %203 = add i64 %201, -96
  %204 = inttoptr i64 %203 to i64*
  %205 = load i64, i64* %204
  %206 = add i64 %201, -80
  %207 = inttoptr i64 %206 to i64*
  %208 = load i64, i64* %207
  %209 = shl i64 %208, 3
  %210 = add i64 %205, %209
  %211 = inttoptr i64 %210 to i64*
  %212 = load i64, i64* %211
  %213 = add i64 %212, 8
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = icmp eq i64 %215, 0
  %217 = select i1 %216, i64 47, i64 23
  %218 = add i64 %200, %217
  br i1 %216, label %block_402021, label %block_402009

block_402171:                                     ; preds = %block_40214c
  br label %block_40218f

block_40215d:                                     ; preds = %block_40214c
  %219 = add i64 %541, -156
  %220 = inttoptr i64 %219 to i32*
  store i32 8, i32* %220
  br label %block_40218f

block_401fdb:                                     ; preds = %block_401fc5
  %221 = add i64 %480, 23
  %222 = load i64, i64* %13, align 8, !tbaa !1240
  %223 = add i64 %222, -8
  %224 = inttoptr i64 %223 to i64*
  store i64 %221, i64* %224
  %225 = inttoptr i64 %223 to i64*
  %226 = load i64, i64* %225
  store i64 %226, i64* %4, align 8, !alias.scope !2188, !noalias !2191
  store i64 %222, i64* %13, align 8, !alias.scope !2188, !noalias !2191
  %227 = tail call i64 @free(i64 %477), !noalias !2188
  %228 = load i64, i64* %14, align 8
  %229 = load i64, i64* %4, align 8
  br label %block_401ff2

block_401e7b:                                     ; preds = %block_401e51
  %230 = inttoptr i64 %353 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %8, align 8, !tbaa !1240
  %232 = shl i64 %231, 3
  %233 = add i64 %232, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 192)
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  store i64 %235, i64* %9, align 8, !tbaa !1240
  store i64 %235, i64* %4, align 8, !tbaa !1240
  switch i64 %235, label %1055 [
    i64 4202294, label %block_401f36.backedge
    i64 4202159, label %block_401eaf
    i64 4202124, label %block_401e8c
    i64 4202194, label %block_401ed2
    i64 4202229, label %block_401ef5
    i64 4202264, label %block_401f18.loopexit
  ]

block_402258:                                     ; preds = %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_402223
  %236 = phi i64 [ %178, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %755, %block_402223 ]
  %237 = phi i64 [ %1052, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %764, %block_402223 ]
  %238 = phi %struct.Memory* [ %179, %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %179, %block_402223 ]
  %239 = add i64 %236, -88
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %241, 1
  %243 = inttoptr i64 %239 to i64*
  store i64 %242, i64* %243
  %244 = add i64 %237, -98
  br label %block_4021f6

block_401f52:                                     ; preds = %block_401f36, %block_401f47
  %245 = phi i64 [ %505, %block_401f36 ], [ %365, %block_401f47 ]
  %246 = phi %struct.Memory* [ %484, %block_401f36 ], [ %484, %block_401f47 ]
  %247 = inttoptr i64 %485 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %483, -120
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %483, -80
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = shl i64 %254, 4
  %256 = add i64 %255, %251
  %257 = inttoptr i64 %256 to i64*
  store i64 %248, i64* %257
  %258 = inttoptr i64 %252 to i64*
  %259 = load i64, i64* %258
  %260 = inttoptr i64 %249 to i64*
  %261 = load i64, i64* %260
  %262 = shl i64 %259, 4
  %263 = add i64 %262, %261
  %264 = add i64 %263, 8
  %265 = inttoptr i64 %264 to i64*
  store i64 %259, i64* %265
  %266 = load i64, i64* %14, align 8
  %267 = add i64 %266, -80
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %269, 1
  %271 = inttoptr i64 %267 to i64*
  store i64 %270, i64* %271
  %272 = inttoptr i64 %267 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %266, -60
  %275 = inttoptr i64 %274 to i32*
  %276 = load i32, i32* %275
  %277 = zext i32 %276 to i64
  store i64 %277, i64* %10, align 8, !tbaa !1240
  %278 = add i64 %266, -184
  %279 = inttoptr i64 %278 to i64*
  store i64 %273, i64* %279
  %280 = trunc i32 %276 to i5
  switch i5 %280, label %281 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %289
  ]

; <label>:281:                                    ; preds = %block_401f52
  %282 = and i32 %276, 31
  %283 = zext i32 %282 to i64
  %284 = add nuw nsw i64 %283, 4294967295
  %285 = and i64 %284, 4294967295
  %286 = shl i64 1, %285
  %287 = trunc i64 %286 to i32
  %288 = shl i32 %287, 1
  br label %289

; <label>:289:                                    ; preds = %281, %block_401f52
  %290 = phi i32 [ %288, %281 ], [ 2, %block_401f52 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %289, %block_401f52
  %291 = phi i32 [ 1, %block_401f52 ], [ %290, %289 ]
  %292 = sext i32 %291 to i64
  store i64 %292, i64* %11, align 8, !tbaa !1240
  %293 = inttoptr i64 %278 to i64*
  %294 = load i64, i64* %293
  store i64 %294, i64* %12, align 8, !tbaa !1240
  %295 = sub i64 %294, %292
  %296 = lshr i64 %295, 63
  %297 = trunc i64 %296 to i8
  %298 = lshr i64 %294, 63
  %299 = lshr i64 %292, 63
  %300 = xor i64 %299, %298
  %301 = xor i64 %296, %298
  %302 = add nuw nsw i64 %301, %300
  %303 = icmp eq i64 %302, 2
  %304 = icmp ne i8 %297, 0
  %305 = xor i1 %304, %303
  %306 = select i1 %305, i64 -257, i64 65
  %307 = add i64 %245, %306
  br i1 %305, label %block_401e51, label %block_401f93

block_401ed2:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpW_type* @adcexpW to i64), i64* %10, align 8, !tbaa !1240
  %308 = inttoptr i64 %267 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %12, align 8, !tbaa !1240
  %310 = add i64 %266, -96
  %311 = inttoptr i64 %310 to i64*
  %312 = load i64, i64* %311
  store i64 %312, i64* %11, align 8, !tbaa !1240
  %313 = load i64, i64* %13, align 8, !tbaa !1240
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 4202217, i64* %315
  store i64 %314, i64* %13, align 8, !tbaa !1240
  %316 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %246)
  %317 = load i64, i64* %14, align 8
  %318 = add i64 %317, -176
  %319 = load i64, i64* %8, align 8
  %320 = load i64, i64* %4, align 8
  %321 = inttoptr i64 %318 to i64*
  store i64 %319, i64* %321
  %322 = add i64 %320, 77
  br label %block_401f36.backedge

block_401e51:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %323 = add i64 %266, -176
  %324 = inttoptr i64 %323 to i64*
  store i64 1, i64* %324
  %325 = add i64 %266, -53
  %326 = inttoptr i64 %325 to i8*
  %327 = load i8, i8* %326
  %328 = sext i8 %327 to i32
  %329 = add nsw i32 %328, -65
  %330 = zext i32 %329 to i64
  %331 = lshr i32 %329, 31
  %332 = add nsw i32 %328, -87
  %333 = icmp ult i32 %329, 22
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %15, align 1, !tbaa !1264
  %335 = and i32 %332, 255
  %336 = tail call i32 @llvm.ctpop.i32(i32 %335) #10
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = xor i8 %338, 1
  store i8 %339, i8* %16, align 1, !tbaa !1278
  %340 = xor i32 %329, 16
  %341 = xor i32 %340, %332
  %342 = lshr i32 %341, 4
  %343 = trunc i32 %342 to i8
  %344 = and i8 %343, 1
  store i8 %344, i8* %17, align 1, !tbaa !1279
  %345 = icmp eq i32 %332, 0
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %18, align 1, !tbaa !1280
  %347 = lshr i32 %332, 31
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %19, align 1, !tbaa !1281
  %349 = xor i32 %347, %331
  %350 = add nuw nsw i32 %349, %331
  %351 = icmp eq i32 %350, 2
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %20, align 1, !tbaa !1282
  %353 = add i64 %266, -192
  %354 = inttoptr i64 %353 to i64*
  store i64 %330, i64* %354
  %355 = add i64 %266, -196
  %356 = inttoptr i64 %355 to i32*
  store i32 %332, i32* %356
  %357 = or i1 %345, %333
  %358 = select i1 %357, i64 42, i64 229
  %359 = add i64 %307, %358
  br i1 %357, label %block_401e7b, label %block_401f36.backedge

block_401f36.backedge:                            ; preds = %block_401e8c, %block_401eaf, %block_401e51, %block_401ed2, %block_401e7b, %block_401ef5
  %360 = phi i64 [ %359, %block_401e51 ], [ %36, %block_401ef5 ], [ %322, %block_401ed2 ], [ %1020, %block_401e8c ], [ %592, %block_401eaf ], [ 4202294, %block_401e7b ]
  %361 = phi i64 [ %266, %block_401e51 ], [ %31, %block_401ef5 ], [ %317, %block_401ed2 ], [ %1015, %block_401e8c ], [ %587, %block_401eaf ], [ %266, %block_401e7b ]
  %362 = phi %struct.Memory* [ %246, %block_401e51 ], [ %30, %block_401ef5 ], [ %316, %block_401ed2 ], [ %1014, %block_401e8c ], [ %586, %block_401eaf ], [ %246, %block_401e7b ]
  br label %block_401f36

block_402176:                                     ; preds = %block_40214c
  %363 = add i64 %541, -156
  %364 = inttoptr i64 %363 to i32*
  store i32 64, i32* %364
  br label %block_40218f

block_401f47:                                     ; preds = %block_401f36
  %365 = add i64 %505, 11
  %366 = inttoptr i64 %485 to i64*
  store i64 %490, i64* %366
  br label %block_401f52

block_402046:                                     ; preds = %block_401f9b
  %367 = add i64 %807, 12
  %368 = load i64, i64* %13, align 8, !tbaa !1240
  %369 = add i64 %368, -8
  %370 = inttoptr i64 %369 to i64*
  store i64 %367, i64* %370
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %4, align 8, !alias.scope !2193, !noalias !2196
  store i64 %368, i64* %13, align 8, !alias.scope !2193, !noalias !2196
  %373 = tail call i64 @free(i64 %810), !noalias !2193
  %374 = load i64, i64* %14, align 8
  %375 = add i64 %374, -104
  %376 = load i64, i64* %4, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %376, 12
  %380 = load i64, i64* %13, align 8, !tbaa !1240
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %382
  %383 = inttoptr i64 %381 to i64*
  %384 = load i64, i64* %383
  store i64 %384, i64* %4, align 8, !alias.scope !2198, !noalias !2201
  store i64 %380, i64* %13, align 8, !alias.scope !2198, !noalias !2201
  %385 = tail call i64 @free(i64 %378), !noalias !2198
  %386 = load i64, i64* %4, align 8
  %387 = load i64, i64* %14, align 8
  %388 = add i64 %387, -128
  %389 = inttoptr i64 %388 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 825), i64* %389
  %390 = add i64 %386, 33
  %391 = load i64, i64* %13, align 8, !tbaa !1240
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393
  %394 = inttoptr i64 %392 to i64*
  %395 = load i64, i64* %394
  store i64 %395, i64* %4, align 8, !alias.scope !2203, !noalias !2206
  store i64 %391, i64* %13, align 8, !alias.scope !2203, !noalias !2206
  %396 = tail call i64 @calloc(i64 1024, i64 1)
  %397 = load i64, i64* %4, align 8
  %398 = load i64, i64* %14, align 8
  %399 = add i64 %398, -136
  %400 = inttoptr i64 %399 to i64*
  store i64 %396, i64* %400
  %401 = inttoptr i64 %399 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %398, -48
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %398, -128
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  store i64 %408, i64* %9, align 8, !tbaa !1240
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %410 = add i64 %398, -52
  %411 = inttoptr i64 %410 to i32*
  %412 = load i32, i32* %411
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %409, align 8, !tbaa !1240
  %414 = add i64 %397, 43
  %415 = load i64, i64* %13, align 8, !tbaa !1240
  %416 = add i64 %415, -8
  %417 = inttoptr i64 %416 to i64*
  store i64 %414, i64* %417
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %421 = load i64, i64* %420, align 8, !alias.scope !2208, !noalias !2211
  %422 = inttoptr i64 %415 to i64*
  %423 = load i64, i64* %422
  %424 = add i64 %415, 8
  %425 = inttoptr i64 %424 to i64*
  %426 = load i64, i64* %425
  %427 = add i64 %415, 16
  %428 = inttoptr i64 %427 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %415, 24
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431
  %433 = add i64 %415, 32
  %434 = inttoptr i64 %433 to i64*
  %435 = load i64, i64* %434
  %436 = add i64 %415, 40
  %437 = inttoptr i64 %436 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %415, 48
  %440 = inttoptr i64 %439 to i64*
  %441 = load i64, i64* %440
  %442 = add i64 %415, 56
  %443 = inttoptr i64 %442 to i64*
  %444 = load i64, i64* %443
  %445 = add i64 %415, 64
  %446 = inttoptr i64 %445 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %415, 72
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = inttoptr i64 %416 to i64*
  %452 = load i64, i64* %451
  store i64 %452, i64* %4, align 8, !alias.scope !2208, !noalias !2211
  store i64 %415, i64* %13, align 8, !alias.scope !2208, !noalias !2211
  %453 = tail call i64 @sprintf(i64 %402, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 833), i64 %405, i64 %408, i64 %413, i64 %421, i64 %423, i64 %426, i64 %429, i64 %432, i64 %435, i64 %438, i64 %441, i64 %444, i64 %447, i64 %450), !noalias !2208
  %454 = load i64, i64* %4, align 8
  %455 = load i64, i64* %14, align 8
  %456 = add i64 %455, -136
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %455, -200
  %460 = trunc i64 %453 to i32
  %461 = inttoptr i64 %459 to i32*
  store i32 %460, i32* %461
  %462 = add i64 %454, 28
  %463 = load i64, i64* %13, align 8, !tbaa !1240
  %464 = add i64 %463, -8
  %465 = inttoptr i64 %464 to i64*
  store i64 %462, i64* %465
  %466 = inttoptr i64 %464 to i64*
  %467 = load i64, i64* %466
  store i64 %467, i64* %4, align 8, !alias.scope !2213, !noalias !2216
  store i64 %463, i64* %13, align 8, !alias.scope !2213, !noalias !2216
  %468 = tail call i64 @fopen(i64 %458, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 842))
  %469 = load i64, i64* %14, align 8
  %470 = add i64 %469, -144
  %471 = load i64, i64* %4, align 8
  %472 = inttoptr i64 %470 to i64*
  store i64 %468, i64* %472
  %473 = icmp eq i64 %468, 0
  %474 = select i1 %473, i64 17, i64 67
  %475 = add i64 %471, %474
  br i1 %473, label %block_4020d7, label %block_402109

block_401fc5:                                     ; preds = %block_401fad
  %476 = inttoptr i64 %1033 to i64*
  %477 = load i64, i64* %476
  %478 = icmp eq i64 %477, 0
  %479 = select i1 %478, i64 45, i64 22
  %480 = add i64 %1036, %479
  br i1 %478, label %block_401ff2, label %block_401fdb

block_401fc0:                                     ; preds = %block_401fad
  %481 = add i64 %1036, 117
  br label %block_402035

block_401f36:                                     ; preds = %block_401f18, %block_401f36.backedge
  %482 = phi i64 [ %853, %block_401f18 ], [ %360, %block_401f36.backedge ]
  %483 = phi i64 [ %849, %block_401f18 ], [ %361, %block_401f36.backedge ]
  %484 = phi %struct.Memory* [ %848, %block_401f18 ], [ %362, %block_401f36.backedge ]
  %485 = add i64 %483, -176
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %483, -72
  %489 = inttoptr i64 %488 to i64*
  %490 = load i64, i64* %489
  %491 = sub i64 %487, %490
  %492 = icmp eq i64 %491, 0
  %493 = lshr i64 %491, 63
  %494 = trunc i64 %493 to i8
  %495 = lshr i64 %487, 63
  %496 = lshr i64 %490, 63
  %497 = xor i64 %496, %495
  %498 = xor i64 %493, %495
  %499 = add nuw nsw i64 %498, %497
  %500 = icmp eq i64 %499, 2
  %501 = icmp ne i8 %494, 0
  %502 = xor i1 %501, %500
  %503 = or i1 %492, %502
  %504 = select i1 %503, i64 28, i64 17
  %505 = add i64 %482, %504
  br i1 %503, label %block_401f52, label %block_401f47

block_402035:                                     ; preds = %block_402021, %block_401fc0
  %506 = phi i64 [ %787, %block_402021 ], [ %481, %block_401fc0 ]
  %507 = phi i64 [ %786, %block_402021 ], [ %789, %block_401fc0 ]
  %508 = phi %struct.Memory* [ %768, %block_402021 ], [ %790, %block_401fc0 ]
  %509 = add i64 %507, -80
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %511, 1
  %513 = inttoptr i64 %509 to i64*
  store i64 %512, i64* %513
  %514 = add i64 %506, -154
  br label %block_401f9b

block_402109:                                     ; preds = %block_402046
  %515 = add i64 %469, -120
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  store i64 %517, i64* %12, align 8, !tbaa !1240
  %518 = add i64 %469, -60
  %519 = inttoptr i64 %518 to i8*
  %520 = load i8, i8* %519
  %521 = trunc i8 %520 to i5
  switch i5 %521, label %522 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57
    i5 1, label %530
  ]

; <label>:522:                                    ; preds = %block_402109
  %523 = and i8 %520, 31
  %524 = zext i8 %523 to i64
  %525 = add nuw nsw i64 %524, 4294967295
  %526 = and i64 %525, 4294967295
  %527 = shl i64 1, %526
  %528 = trunc i64 %527 to i32
  %529 = shl i32 %528, 1
  br label %530

; <label>:530:                                    ; preds = %522, %block_402109
  %531 = phi i32 [ %529, %522 ], [ 2, %block_402109 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57: ; preds = %530, %block_402109
  %532 = phi i32 [ 1, %block_402109 ], [ %531, %530 ]
  %533 = sext i32 %532 to i64
  store i64 %533, i64* %11, align 8, !tbaa !1240
  store i64 16, i64* %10, align 8, !tbaa !1240
  %534 = add i64 %475, 36
  %535 = load i64, i64* %13, align 8, !tbaa !1240
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %534, i64* %537
  %538 = inttoptr i64 %536 to i64*
  %539 = load i64, i64* %538
  store i64 %539, i64* %4, align 8, !alias.scope !2218, !noalias !2221
  store i64 %535, i64* %13, align 8, !alias.scope !2218, !noalias !2221
  %540 = tail call i64 @qsort(i64 %517, i64 %533, i64 16, i64 zext (i32 trunc (i64 and (i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @CompareViewsBySize to i64), i64 4294967295) to i32) to i64)), !noalias !2218
  %541 = load i64, i64* %14, align 8
  %542 = add i64 %541, -53
  %543 = load i64, i64* %4, align 8
  %544 = inttoptr i64 %542 to i8*
  %545 = load i8, i8* %544
  %546 = sext i8 %545 to i32
  %547 = add nsw i32 %546, -65
  %548 = zext i32 %547 to i64
  %549 = lshr i32 %547, 31
  %550 = add nsw i32 %546, -87
  %551 = icmp ult i32 %547, 22
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %15, align 1, !tbaa !1264
  %553 = and i32 %550, 255
  %554 = tail call i32 @llvm.ctpop.i32(i32 %553) #10
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  store i8 %557, i8* %16, align 1, !tbaa !1278
  %558 = xor i32 %547, 16
  %559 = xor i32 %558, %550
  %560 = lshr i32 %559, 4
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  store i8 %562, i8* %17, align 1, !tbaa !1279
  %563 = icmp eq i32 %550, 0
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %18, align 1, !tbaa !1280
  %565 = lshr i32 %550, 31
  %566 = trunc i32 %565 to i8
  store i8 %566, i8* %19, align 1, !tbaa !1281
  %567 = xor i32 %565, %549
  %568 = add nuw nsw i32 %567, %549
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %20, align 1, !tbaa !1282
  %571 = add i64 %541, -216
  %572 = inttoptr i64 %571 to i64*
  store i64 %548, i64* %572
  %573 = add i64 %541, -220
  %574 = inttoptr i64 %573 to i32*
  store i32 %550, i32* %574
  %575 = or i1 %563, %551
  %576 = select i1 %575, i64 31, i64 98
  %577 = add i64 %543, %576
  br i1 %575, label %block_40214c, label %block_40218f

block_401eaf:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpS_type* @adcexpS to i64), i64* %10, align 8, !tbaa !1240
  %578 = inttoptr i64 %267 to i64*
  %579 = load i64, i64* %578
  store i64 %579, i64* %12, align 8, !tbaa !1240
  %580 = add i64 %266, -96
  %581 = inttoptr i64 %580 to i64*
  %582 = load i64, i64* %581
  store i64 %582, i64* %11, align 8, !tbaa !1240
  %583 = load i64, i64* %13, align 8, !tbaa !1240
  %584 = add i64 %583, -8
  %585 = inttoptr i64 %584 to i64*
  store i64 4202182, i64* %585
  store i64 %584, i64* %13, align 8, !tbaa !1240
  %586 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %246)
  %587 = load i64, i64* %14, align 8
  %588 = add i64 %587, -176
  %589 = load i64, i64* %8, align 8
  %590 = load i64, i64* %4, align 8
  %591 = inttoptr i64 %588 to i64*
  store i64 %589, i64* %591
  %592 = add i64 %590, 112
  br label %block_401f36.backedge

block_4020d7:                                     ; preds = %block_402046
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 845), i64* %11, align 8, !tbaa !1240
  %593 = load i64, i64* @stderr
  store i64 %593, i64* %12, align 8, !tbaa !1240
  %594 = add i64 %469, -136
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  store i64 %596, i64* %10, align 8, !tbaa !1240
  %597 = add i64 %475, 32
  %598 = load i64, i64* %13, align 8, !tbaa !1240
  %599 = add i64 %598, -8
  %600 = inttoptr i64 %599 to i64*
  store i64 %597, i64* %600
  %601 = load i64, i64* %418, align 8, !alias.scope !2223, !noalias !2226
  %602 = load i64, i64* %409, align 8, !alias.scope !2223, !noalias !2226
  %603 = load i64, i64* %420, align 8, !alias.scope !2223, !noalias !2226
  %604 = inttoptr i64 %598 to i64*
  %605 = load i64, i64* %604
  %606 = add i64 %598, 8
  %607 = inttoptr i64 %606 to i64*
  %608 = load i64, i64* %607
  %609 = add i64 %598, 16
  %610 = inttoptr i64 %609 to i64*
  %611 = load i64, i64* %610
  %612 = add i64 %598, 24
  %613 = inttoptr i64 %612 to i64*
  %614 = load i64, i64* %613
  %615 = add i64 %598, 32
  %616 = inttoptr i64 %615 to i64*
  %617 = load i64, i64* %616
  %618 = add i64 %598, 40
  %619 = inttoptr i64 %618 to i64*
  %620 = load i64, i64* %619
  %621 = add i64 %598, 48
  %622 = inttoptr i64 %621 to i64*
  %623 = load i64, i64* %622
  %624 = add i64 %598, 56
  %625 = inttoptr i64 %624 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %598, 64
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %598, 72
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = inttoptr i64 %599 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %4, align 8, !alias.scope !2223, !noalias !2226
  store i64 %598, i64* %13, align 8, !alias.scope !2223, !noalias !2226
  %635 = tail call i64 @fprintf(i64 %593, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 845), i64 %596, i64 %601, i64 %602, i64 %603, i64 %605, i64 %608, i64 %611, i64 %614, i64 %617, i64 %620, i64 %623, i64 %626, i64 %629, i64 %632), !noalias !2223
  %636 = load i64, i64* %14, align 8
  %637 = add i64 %636, -4
  %638 = inttoptr i64 %637 to i32*
  store i32 0, i32* %638
  %639 = add i64 %636, -204
  %640 = trunc i64 %635 to i32
  %641 = inttoptr i64 %639 to i32*
  store i32 %640, i32* %641
  br label %block_402370

block_4021ae:                                     ; preds = %block_40219a
  %642 = add i64 %812, -32
  %643 = inttoptr i64 %642 to i64*
  store i64 0, i64* %643
  %644 = add i64 %812, -144
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = add i64 %833, 32
  %648 = load i64, i64* %13, align 8, !tbaa !1240
  %649 = add i64 %648, -8
  %650 = inttoptr i64 %649 to i64*
  store i64 %647, i64* %650
  %651 = load i64, i64* %419, align 8, !alias.scope !2228, !noalias !2231
  %652 = load i64, i64* %409, align 8, !alias.scope !2228, !noalias !2231
  %653 = load i64, i64* %420, align 8, !alias.scope !2228, !noalias !2231
  %654 = inttoptr i64 %648 to i64*
  %655 = load i64, i64* %654
  %656 = add i64 %648, 8
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %648, 16
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %648, 24
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = add i64 %648, 32
  %666 = inttoptr i64 %665 to i64*
  %667 = load i64, i64* %666
  %668 = add i64 %648, 40
  %669 = inttoptr i64 %668 to i64*
  %670 = load i64, i64* %669
  %671 = add i64 %648, 48
  %672 = inttoptr i64 %671 to i64*
  %673 = load i64, i64* %672
  %674 = add i64 %648, 56
  %675 = inttoptr i64 %674 to i64*
  %676 = load i64, i64* %675
  %677 = add i64 %648, 64
  %678 = inttoptr i64 %677 to i64*
  %679 = load i64, i64* %678
  %680 = add i64 %648, 72
  %681 = inttoptr i64 %680 to i64*
  %682 = load i64, i64* %681
  %683 = inttoptr i64 %649 to i64*
  %684 = load i64, i64* %683
  store i64 %684, i64* %4, align 8, !alias.scope !2228, !noalias !2231
  store i64 %648, i64* %13, align 8, !alias.scope !2228, !noalias !2231
  %685 = tail call i64 @fprintf(i64 %646, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 886), i64 %651, i64 %820, i64 %652, i64 %653, i64 %655, i64 %658, i64 %661, i64 %664, i64 %667, i64 %670, i64 %673, i64 %676, i64 %679, i64 %682), !noalias !2228
  %686 = load i64, i64* %14, align 8
  %687 = add i64 %686, -120
  %688 = load i64, i64* %4, align 8
  %689 = inttoptr i64 %687 to i64*
  %690 = load i64, i64* %689
  %691 = add i64 %686, -80
  %692 = inttoptr i64 %691 to i64*
  %693 = load i64, i64* %692
  %694 = shl i64 %693, 4
  %695 = add i64 %694, %690
  %696 = add i64 %695, 8
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = add i64 %686, -168
  %700 = inttoptr i64 %699 to i64*
  store i64 %698, i64* %700
  %701 = add i64 %686, -88
  %702 = inttoptr i64 %701 to i64*
  store i64 0, i64* %702
  %703 = add i64 %686, -224
  %704 = trunc i64 %685 to i32
  %705 = add i64 %688, 40
  %706 = inttoptr i64 %703 to i32*
  store i32 %704, i32* %706
  %707 = load i64, i64* %409, align 8
  %708 = load i64, i64* %420, align 8
  br label %block_4021f6

block_40214c:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57
  %709 = inttoptr i64 %571 to i64*
  %710 = load i64, i64* %709
  store i64 %710, i64* %8, align 8, !tbaa !1240
  %711 = shl i64 %710, 3
  %712 = add i64 %711, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 8)
  %713 = inttoptr i64 %712 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %9, align 8, !tbaa !1240
  store i64 %714, i64* %4, align 8, !tbaa !1240
  switch i64 %714, label %1057 [
    i64 4202860, label %block_40216c
    i64 4202895, label %block_40218f
    i64 4202885, label %block_402185
    i64 4202865, label %block_402171
    i64 4202845, label %block_40215d
    i64 4202870, label %block_402176
  ]

block_402223:                                     ; preds = %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %715 = add i64 %178, -144
  %716 = inttoptr i64 %715 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %182, 1
  %719 = add i64 %1052, 35
  %720 = load i64, i64* %13, align 8, !tbaa !1240
  %721 = add i64 %720, -8
  %722 = inttoptr i64 %721 to i64*
  store i64 %719, i64* %722
  %723 = inttoptr i64 %720 to i64*
  %724 = load i64, i64* %723
  %725 = add i64 %720, 8
  %726 = inttoptr i64 %725 to i64*
  %727 = load i64, i64* %726
  %728 = add i64 %720, 16
  %729 = inttoptr i64 %728 to i64*
  %730 = load i64, i64* %729
  %731 = add i64 %720, 24
  %732 = inttoptr i64 %731 to i64*
  %733 = load i64, i64* %732
  %734 = add i64 %720, 32
  %735 = inttoptr i64 %734 to i64*
  %736 = load i64, i64* %735
  %737 = add i64 %720, 40
  %738 = inttoptr i64 %737 to i64*
  %739 = load i64, i64* %738
  %740 = add i64 %720, 48
  %741 = inttoptr i64 %740 to i64*
  %742 = load i64, i64* %741
  %743 = add i64 %720, 56
  %744 = inttoptr i64 %743 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %720, 64
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %720, 72
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = inttoptr i64 %721 to i64*
  %753 = load i64, i64* %752
  store i64 %753, i64* %4, align 8, !alias.scope !2233, !noalias !2236
  store i64 %720, i64* %13, align 8, !alias.scope !2233, !noalias !2236
  %754 = tail call i64 @fprintf(i64 %717, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 897), i64 %718, i64 %182, i64 %707, i64 %708, i64 %724, i64 %727, i64 %730, i64 %733, i64 %736, i64 %739, i64 %742, i64 %745, i64 %748, i64 %751), !noalias !2233
  %755 = load i64, i64* %14, align 8
  %756 = add i64 %755, -32
  %757 = load i64, i64* %4, align 8
  %758 = inttoptr i64 %756 to i64*
  %759 = load i64, i64* %758
  %760 = add i64 %759, 1
  %761 = inttoptr i64 %756 to i64*
  store i64 %760, i64* %761
  %762 = add i64 %755, -228
  %763 = trunc i64 %754 to i32
  %764 = add i64 %757, 18
  %765 = inttoptr i64 %762 to i32*
  store i32 %763, i32* %765
  br label %block_402258

block_402021:                                     ; preds = %block_402009, %block_401ff2
  %766 = phi i64 [ %218, %block_401ff2 ], [ %1029, %block_402009 ]
  %767 = phi i64 [ %201, %block_401ff2 ], [ %1028, %block_402009 ]
  %768 = phi %struct.Memory* [ %202, %block_401ff2 ], [ %202, %block_402009 ]
  %769 = add i64 %767, -96
  %770 = inttoptr i64 %769 to i64*
  %771 = load i64, i64* %770
  %772 = add i64 %767, -80
  %773 = inttoptr i64 %772 to i64*
  %774 = load i64, i64* %773
  %775 = shl i64 %774, 3
  %776 = add i64 %771, %775
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %766, 20
  %780 = load i64, i64* %13, align 8, !tbaa !1240
  %781 = add i64 %780, -8
  %782 = inttoptr i64 %781 to i64*
  store i64 %779, i64* %782
  %783 = inttoptr i64 %781 to i64*
  %784 = load i64, i64* %783
  store i64 %784, i64* %4, align 8, !alias.scope !2238, !noalias !2241
  store i64 %780, i64* %13, align 8, !alias.scope !2238, !noalias !2241
  %785 = tail call i64 @free(i64 %778), !noalias !2238
  %786 = load i64, i64* %14, align 8
  %787 = load i64, i64* %4, align 8
  br label %block_402035

block_401f9b:                                     ; preds = %block_401f93, %block_402035
  %788 = phi i64 [ %994, %block_401f93 ], [ %514, %block_402035 ]
  %789 = phi i64 [ %266, %block_401f93 ], [ %507, %block_402035 ]
  %790 = phi %struct.Memory* [ %246, %block_401f93 ], [ %508, %block_402035 ]
  %791 = add i64 %789, -80
  %792 = inttoptr i64 %791 to i64*
  %793 = load i64, i64* %792
  %794 = load i64, i64* bitcast (%UpPrimeLim_type* @UpPrimeLim to i64*)
  %795 = sub i64 %793, %794
  %796 = lshr i64 %795, 63
  %797 = trunc i64 %796 to i8
  %798 = lshr i64 %793, 63
  %799 = lshr i64 %794, 63
  %800 = xor i64 %799, %798
  %801 = xor i64 %796, %798
  %802 = add nuw nsw i64 %801, %800
  %803 = icmp eq i64 %802, 2
  %804 = icmp ne i8 %797, 0
  %805 = xor i1 %804, %803
  %806 = select i1 %805, i64 18, i64 171
  %807 = add i64 %788, %806
  %808 = add i64 %789, -96
  %809 = inttoptr i64 %808 to i64*
  %810 = load i64, i64* %809
  br i1 %805, label %block_401fad, label %block_402046

block_40219a:                                     ; preds = %block_40218f, %block_40226e
  %811 = phi i64 [ %1004, %block_40218f ], [ %993, %block_40226e ]
  %812 = phi i64 [ %541, %block_40218f ], [ %975, %block_40226e ]
  %813 = phi %struct.Memory* [ %998, %block_40218f ], [ %179, %block_40226e ]
  %814 = add i64 %812, -80
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %812, -152
  %818 = inttoptr i64 %817 to i32*
  %819 = load i32, i32* %818
  %820 = sext i32 %819 to i64
  %821 = sub i64 %816, %820
  %822 = lshr i64 %821, 63
  %823 = trunc i64 %822 to i8
  %824 = lshr i64 %816, 63
  %825 = lshr i64 %820, 63
  %826 = xor i64 %824, %825
  %827 = xor i64 %822, %824
  %828 = add nuw nsw i64 %827, %826
  %829 = icmp eq i64 %828, 2
  %830 = icmp ne i8 %823, 0
  %831 = xor i1 %830, %829
  %832 = select i1 %831, i64 20, i64 345
  %833 = add i64 %811, %832
  br i1 %831, label %block_4021ae, label %block_4022f3

block_401f18.loopexit:                            ; preds = %block_401e7b
  br label %block_401f18

block_401f18:                                     ; preds = %block_401f18.loopexit, %3
  %834 = phi i64 [ %21, %3 ], [ %266, %block_401f18.loopexit ]
  %835 = phi i64 [ %1, %3 ], [ 4202264, %block_401f18.loopexit ]
  %836 = phi %struct.Memory* [ %2, %3 ], [ %246, %block_401f18.loopexit ]
  store i64 ptrtoint (%adcexpB_type* @adcexpB to i64), i64* %10, align 8, !tbaa !1240
  %837 = add i64 %834, -80
  %838 = inttoptr i64 %837 to i64*
  %839 = load i64, i64* %838
  store i64 %839, i64* %12, align 8, !tbaa !1240
  %840 = add i64 %834, -96
  %841 = inttoptr i64 %840 to i64*
  %842 = load i64, i64* %841
  store i64 %842, i64* %11, align 8, !tbaa !1240
  %843 = add i64 %835, -3192
  %844 = add i64 %835, 23
  %845 = load i64, i64* %13, align 8, !tbaa !1240
  %846 = add i64 %845, -8
  %847 = inttoptr i64 %846 to i64*
  store i64 %844, i64* %847
  store i64 %846, i64* %13, align 8, !tbaa !1240
  %848 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 %843, %struct.Memory* %836)
  %849 = load i64, i64* %14, align 8
  %850 = add i64 %849, -176
  %851 = load i64, i64* %8, align 8
  %852 = load i64, i64* %4, align 8
  %853 = add i64 %852, 7
  %854 = inttoptr i64 %850 to i64*
  store i64 %851, i64* %854
  br label %block_401f36

block_402370:                                     ; preds = %block_4020d7, %block_4022f3
  %855 = phi i64 [ %174, %block_4022f3 ], [ %636, %block_4020d7 ]
  %856 = phi %struct.Memory* [ %813, %block_4022f3 ], [ %790, %block_4020d7 ]
  %857 = add i64 %855, -4
  %858 = inttoptr i64 %857 to i32*
  %859 = load i32, i32* %858
  %860 = zext i32 %859 to i64
  store i64 %860, i64* %8, align 8, !tbaa !1240
  %861 = load i64, i64* %13, align 8
  %862 = add i64 %861, 256
  %863 = icmp ugt i64 %861, -257
  %864 = zext i1 %863 to i8
  store i8 %864, i8* %15, align 1, !tbaa !1264
  %865 = trunc i64 %862 to i32
  %866 = and i32 %865, 255
  %867 = tail call i32 @llvm.ctpop.i32(i32 %866) #10
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = xor i8 %869, 1
  store i8 %870, i8* %16, align 1, !tbaa !1278
  %871 = xor i64 %862, %861
  %872 = lshr i64 %871, 4
  %873 = trunc i64 %872 to i8
  %874 = and i8 %873, 1
  store i8 %874, i8* %17, align 1, !tbaa !1279
  %875 = icmp eq i64 %862, 0
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %18, align 1, !tbaa !1280
  %877 = lshr i64 %862, 63
  %878 = trunc i64 %877 to i8
  store i8 %878, i8* %19, align 1, !tbaa !1281
  %879 = lshr i64 %861, 63
  %880 = xor i64 %877, %879
  %881 = add nuw nsw i64 %880, %877
  %882 = icmp eq i64 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %20, align 1, !tbaa !1282
  %884 = add i64 %861, 264
  %885 = inttoptr i64 %862 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %14, align 8, !tbaa !1240
  %887 = inttoptr i64 %884 to i64*
  %888 = load i64, i64* %887
  store i64 %888, i64* %4, align 8, !tbaa !1240
  %889 = add i64 %861, 272
  store i64 %889, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %856

block_40226e:                                     ; preds = %block_4021f6
  %890 = add i64 %178, -144
  %891 = inttoptr i64 %890 to i64*
  %892 = load i64, i64* %891
  %893 = add i64 %178, -120
  %894 = inttoptr i64 %893 to i64*
  %895 = load i64, i64* %894
  %896 = add i64 %178, -80
  %897 = inttoptr i64 %896 to i64*
  %898 = load i64, i64* %897
  %899 = shl i64 %898, 4
  %900 = add i64 %899, %895
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = add i64 %199, 42
  %904 = load i64, i64* %13, align 8, !tbaa !1240
  %905 = add i64 %904, -8
  %906 = inttoptr i64 %905 to i64*
  store i64 %903, i64* %906
  %907 = load i64, i64* %409, align 8, !alias.scope !2243, !noalias !2246
  %908 = load i64, i64* %420, align 8, !alias.scope !2243, !noalias !2246
  %909 = inttoptr i64 %904 to i64*
  %910 = load i64, i64* %909
  %911 = add i64 %904, 8
  %912 = inttoptr i64 %911 to i64*
  %913 = load i64, i64* %912
  %914 = add i64 %904, 16
  %915 = inttoptr i64 %914 to i64*
  %916 = load i64, i64* %915
  %917 = add i64 %904, 24
  %918 = inttoptr i64 %917 to i64*
  %919 = load i64, i64* %918
  %920 = add i64 %904, 32
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %904, 40
  %924 = inttoptr i64 %923 to i64*
  %925 = load i64, i64* %924
  %926 = add i64 %904, 48
  %927 = inttoptr i64 %926 to i64*
  %928 = load i64, i64* %927
  %929 = add i64 %904, 56
  %930 = inttoptr i64 %929 to i64*
  %931 = load i64, i64* %930
  %932 = add i64 %904, 64
  %933 = inttoptr i64 %932 to i64*
  %934 = load i64, i64* %933
  %935 = add i64 %904, 72
  %936 = inttoptr i64 %935 to i64*
  %937 = load i64, i64* %936
  %938 = inttoptr i64 %905 to i64*
  %939 = load i64, i64* %938
  store i64 %939, i64* %4, align 8, !alias.scope !2243, !noalias !2246
  store i64 %904, i64* %13, align 8, !alias.scope !2243, !noalias !2246
  %940 = tail call i64 @fprintf(i64 %892, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 903), i64 %902, i64 %899, i64 %907, i64 %908, i64 %910, i64 %913, i64 %916, i64 %919, i64 %922, i64 %925, i64 %928, i64 %931, i64 %934, i64 %937), !noalias !2243
  store i64 %940, i64* %996, align 8, !alias.scope !2243, !noalias !2246
  %941 = load i64, i64* %14, align 8
  %942 = add i64 %941, -32
  %943 = load i64, i64* %4, align 8
  %944 = inttoptr i64 %942 to i64*
  %945 = load i64, i64* %944
  %946 = shl i64 %945, 2
  %947 = add i64 %946, 8
  %948 = add i64 %941, -120
  %949 = inttoptr i64 %948 to i64*
  %950 = load i64, i64* %949
  %951 = add i64 %941, -80
  %952 = inttoptr i64 %951 to i64*
  %953 = load i64, i64* %952
  %954 = shl i64 %953, 4
  %955 = add i64 %954, %950
  %956 = inttoptr i64 %955 to i64*
  %957 = load i64, i64* %956
  %958 = mul i64 %957, %947
  %959 = load i64, i64* %14, align 8
  %960 = add i64 %959, -24
  %961 = inttoptr i64 %960 to i64*
  %962 = load i64, i64* %961
  %963 = add i64 %962, %958
  %964 = inttoptr i64 %960 to i64*
  store i64 %963, i64* %964
  %965 = add i64 %959, -120
  %966 = inttoptr i64 %965 to i64*
  %967 = load i64, i64* %966
  %968 = add i64 %959, -80
  %969 = inttoptr i64 %968 to i64*
  %970 = load i64, i64* %969
  %971 = shl i64 %970, 4
  store i64 %971, i64* %10, align 8, !tbaa !1240
  %972 = add i64 %971, %967
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  %975 = load i64, i64* %14, align 8
  %976 = add i64 %975, -40
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %978, %974
  %980 = inttoptr i64 %976 to i64*
  store i64 %979, i64* %980
  %981 = add i64 %975, -232
  %982 = load i32, i32* %7, align 4
  %983 = inttoptr i64 %981 to i32*
  store i32 %982, i32* %983
  %984 = add i64 %975, -156
  %985 = inttoptr i64 %984 to i32*
  %986 = load i32, i32* %985
  %987 = sext i32 %986 to i64
  %988 = add i64 %975, -80
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %990, %987
  %992 = inttoptr i64 %988 to i64*
  store i64 %991, i64* %992
  %993 = add i64 %943, -254
  br label %block_40219a

block_40216c:                                     ; preds = %block_40214c
  br label %block_40218f

block_401f93:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %994 = add i64 %307, 8
  %995 = inttoptr i64 %267 to i64*
  store i64 0, i64* %995
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  br label %block_401f9b

block_40218f:                                     ; preds = %block_402185, %block_40216c, %block_40214c, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57, %block_402176, %block_40215d, %block_402171
  %997 = phi i64 [ %577, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57 ], [ 4202895, %block_402176 ], [ 4202895, %block_40215d ], [ 4202895, %block_402171 ], [ 4202895, %block_402185 ], [ 4202895, %block_40214c ], [ 4202895, %block_40216c ]
  %998 = phi %struct.Memory* [ %790, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit57 ], [ %790, %block_402176 ], [ %790, %block_40215d ], [ %790, %block_402171 ], [ %790, %block_402185 ], [ %790, %block_40214c ], [ %790, %block_40216c ]
  %999 = add i64 %541, -148
  %1000 = inttoptr i64 %999 to i32*
  %1001 = load i32, i32* %1000
  %1002 = sext i32 %1001 to i64
  %1003 = add i64 %541, -80
  %1004 = add i64 %997, 11
  %1005 = inttoptr i64 %1003 to i64*
  store i64 %1002, i64* %1005
  br label %block_40219a

block_401e8c:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexp_type* @adcexp to i64), i64* %10, align 8, !tbaa !1240
  %1006 = inttoptr i64 %267 to i64*
  %1007 = load i64, i64* %1006
  store i64 %1007, i64* %12, align 8, !tbaa !1240
  %1008 = add i64 %266, -96
  %1009 = inttoptr i64 %1008 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %11, align 8, !tbaa !1240
  %1011 = load i64, i64* %13, align 8, !tbaa !1240
  %1012 = add i64 %1011, -8
  %1013 = inttoptr i64 %1012 to i64*
  store i64 4202147, i64* %1013
  store i64 %1012, i64* %13, align 8, !tbaa !1240
  %1014 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %246)
  %1015 = load i64, i64* %14, align 8
  %1016 = add i64 %1015, -176
  %1017 = load i64, i64* %8, align 8
  %1018 = load i64, i64* %4, align 8
  %1019 = inttoptr i64 %1016 to i64*
  store i64 %1017, i64* %1019
  %1020 = add i64 %1018, 147
  br label %block_401f36.backedge

block_402009:                                     ; preds = %block_401ff2
  %1021 = add i64 %218, 24
  %1022 = load i64, i64* %13, align 8, !tbaa !1240
  %1023 = add i64 %1022, -8
  %1024 = inttoptr i64 %1023 to i64*
  store i64 %1021, i64* %1024
  %1025 = inttoptr i64 %1023 to i64*
  %1026 = load i64, i64* %1025
  store i64 %1026, i64* %4, align 8, !alias.scope !2248, !noalias !2251
  store i64 %1022, i64* %13, align 8, !alias.scope !2248, !noalias !2251
  %1027 = tail call i64 @free(i64 %215), !noalias !2248
  %1028 = load i64, i64* %14, align 8
  %1029 = load i64, i64* %4, align 8
  br label %block_402021

block_401fad:                                     ; preds = %block_401f9b
  %1030 = shl i64 %793, 3
  %1031 = add i64 %810, %1030
  %1032 = inttoptr i64 %1031 to i64*
  %1033 = load i64, i64* %1032
  %1034 = icmp eq i64 %1033, 0
  %1035 = select i1 %1034, i64 19, i64 24
  %1036 = add i64 %807, %1035
  br i1 %1034, label %block_401fc0, label %block_401fc5

block_402207:                                     ; preds = %block_4021f6
  %1037 = add i64 %178, -168
  %1038 = inttoptr i64 %1037 to i64*
  %1039 = load i64, i64* %1038
  %1040 = trunc i64 %182 to i6
  switch i6 %1040, label %1041 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %1045
  ]

; <label>:1041:                                   ; preds = %block_402207
  %1042 = and i64 %182, 63
  %1043 = add nsw i64 %1042, -1
  %1044 = ashr i64 %1039, %1043
  br label %1045

; <label>:1045:                                   ; preds = %1041, %block_402207
  %1046 = phi i64 [ %1044, %1041 ], [ %1039, %block_402207 ]
  %1047 = ashr i64 %1046, 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %1045, %block_402207
  %1048 = phi i64 [ %1039, %block_402207 ], [ %1047, %1045 ]
  %1049 = and i64 %1048, 1
  %1050 = icmp eq i64 %1049, 0
  %1051 = select i1 %1050, i64 81, i64 28
  %1052 = add i64 %199, %1051
  br i1 %1050, label %block_402258, label %block_402223

block_402185:                                     ; preds = %block_40214c
  %1053 = add i64 %541, -156
  %1054 = inttoptr i64 %1053 to i32*
  store i32 16384, i32* %1054
  br label %block_40218f

; <label>:1055:                                   ; preds = %block_401e7b
  %1056 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %235, %struct.Memory* %246)
  ret %struct.Memory* %1056

; <label>:1057:                                   ; preds = %block_40214c
  %1058 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %714, %struct.Memory* %790)
  ret %struct.Memory* %1058
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400ed0_swap8(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400ed0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  store i64 %11, i64* %7, align 8, !tbaa !1240
  store i64 %11, i64* %8, align 8, !tbaa !1240
  %13 = add i64 %10, -16
  %14 = load i64, i64* %6, align 8
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = inttoptr i64 %13 to i64*
  %17 = load i64, i64* %16
  %18 = add i64 %10, -32
  %19 = inttoptr i64 %18 to i64*
  store i64 %17, i64* %19
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %10, -17
  %25 = inttoptr i64 %24 to i8*
  store i8 %23, i8* %25
  %26 = inttoptr i64 %18 to i64*
  %27 = load i64, i64* %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = inttoptr i64 %27 to i8*
  store i8 %30, i8* %31
  %32 = inttoptr i64 %24 to i8*
  %33 = load i8, i8* %32
  %34 = inttoptr i64 %18 to i64*
  %35 = load i64, i64* %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i8*
  store i8 %33, i8* %37
  %38 = inttoptr i64 %18 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %39, 1
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8, i8* %41
  %43 = inttoptr i64 %24 to i8*
  store i8 %42, i8* %43
  %44 = inttoptr i64 %18 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %45, 6
  %47 = inttoptr i64 %46 to i8*
  %48 = load i8, i8* %47
  %49 = add i64 %45, 1
  %50 = inttoptr i64 %49 to i8*
  store i8 %48, i8* %50
  %51 = inttoptr i64 %24 to i8*
  %52 = load i8, i8* %51
  %53 = inttoptr i64 %18 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %54, 6
  %56 = inttoptr i64 %55 to i8*
  store i8 %52, i8* %56
  %57 = inttoptr i64 %18 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %58, 2
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = inttoptr i64 %24 to i8*
  store i8 %61, i8* %62
  %63 = inttoptr i64 %18 to i64*
  %64 = load i64, i64* %63
  %65 = add i64 %64, 5
  %66 = inttoptr i64 %65 to i8*
  %67 = load i8, i8* %66
  %68 = load i64, i64* %8, align 8
  %69 = add i64 %68, -24
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %71, 2
  %73 = inttoptr i64 %72 to i8*
  store i8 %67, i8* %73
  %74 = add i64 %68, -9
  %75 = inttoptr i64 %74 to i8*
  %76 = load i8, i8* %75
  %77 = inttoptr i64 %69 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %78, 5
  %80 = inttoptr i64 %79 to i8*
  store i8 %76, i8* %80
  %81 = inttoptr i64 %69 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %82, 3
  %84 = inttoptr i64 %83 to i8*
  %85 = load i8, i8* %84
  %86 = inttoptr i64 %74 to i8*
  store i8 %85, i8* %86
  %87 = inttoptr i64 %69 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %88, 4
  %90 = inttoptr i64 %89 to i8*
  %91 = load i8, i8* %90
  %92 = add i64 %88, 3
  %93 = inttoptr i64 %92 to i8*
  store i8 %91, i8* %93
  %94 = inttoptr i64 %74 to i8*
  %95 = load i8, i8* %94
  store i8 %95, i8* %5, align 1, !tbaa !1428
  %96 = inttoptr i64 %69 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %6, align 8, !tbaa !1240
  %98 = add i64 %97, 4
  %99 = inttoptr i64 %98 to i8*
  store i8 %95, i8* %99
  %100 = load i64, i64* %7, align 8, !tbaa !1240
  %101 = add i64 %100, 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %8, align 8, !tbaa !1240
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %3, align 8, !tbaa !1240
  %106 = add i64 %100, 16
  store i64 %106, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408b30_NumberOfOnes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408b30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = add i64 %9, -16
  %13 = load i64, i64* %5, align 8
  %14 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %14
  %15 = add i64 %9, -24
  %16 = inttoptr i64 %15 to i64*
  store i64 -9223372036854775808, i64* %16
  %17 = add i64 %9, -32
  %18 = inttoptr i64 %17 to i32*
  store i32 0, i32* %18
  %19 = add i64 %9, -28
  %20 = inttoptr i64 %19 to i32*
  store i32 0, i32* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = add i64 %9, -16
  br label %block_408b54

block_408b5e:                                     ; preds = %block_408b54
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25
  %27 = inttoptr i64 %15 to i64*
  %28 = load i64, i64* %27
  %29 = and i64 %28, %26
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %block_408b79, label %block_408b70

block_408b79:                                     ; preds = %block_408b70, %block_408b5e
  %31 = phi %struct.Memory* [ %40, %block_408b5e ], [ %40, %block_408b70 ]
  %32 = inttoptr i64 %15 to i64*
  %33 = load i64, i64* %32
  %34 = lshr i64 %33, 1
  %35 = inttoptr i64 %15 to i64*
  store i64 %34, i64* %35
  %36 = inttoptr i64 %19 to i32*
  %37 = load i32, i32* %36
  %38 = add i32 %37, 1
  %39 = inttoptr i64 %19 to i32*
  store i32 %38, i32* %39
  br label %block_408b54

block_408b54:                                     ; preds = %block_408b79, %block_408b30
  %40 = phi %struct.Memory* [ %2, %block_408b30 ], [ %31, %block_408b79 ]
  %41 = inttoptr i64 %19 to i32*
  %42 = load i32, i32* %41
  %43 = icmp ult i32 %42, 64
  br i1 %43, label %block_408b5e, label %block_408b93

block_408b70:                                     ; preds = %block_408b5e
  %44 = inttoptr i64 %17 to i32*
  %45 = load i32, i32* %44
  %46 = add i32 %45, 1
  %47 = inttoptr i64 %17 to i32*
  store i32 %46, i32* %47
  br label %block_408b79

block_408b93:                                     ; preds = %block_408b54
  %48 = add i32 %42, -64
  %49 = lshr i32 %48, 31
  %50 = lshr i32 %42, 31
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %54 = and i32 %48, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #10
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = xor i32 %48, %42
  %60 = lshr i32 %59, 4
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = icmp eq i32 %48, 0
  %64 = zext i1 %63 to i8
  %65 = trunc i32 %49 to i8
  %66 = xor i32 %49, %50
  %67 = add nuw nsw i32 %66, %50
  %68 = icmp eq i32 %67, 2
  %69 = zext i1 %68 to i8
  store i8 0, i8* %21, align 1, !tbaa !1428
  store i8 %58, i8* %51, align 1, !tbaa !1428
  store i8 %62, i8* %22, align 1, !tbaa !1428
  store i8 %64, i8* %52, align 1, !tbaa !1428
  store i8 %65, i8* %23, align 1, !tbaa !1428
  store i8 %69, i8* %53, align 1, !tbaa !1428
  %70 = inttoptr i64 %17 to i32*
  %71 = load i32, i32* %70
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %4, align 8, !tbaa !1240
  %73 = inttoptr i64 %10 to i64*
  %74 = load i64, i64* %73
  store i64 %74, i64* %7, align 8, !tbaa !1240
  %75 = inttoptr i64 %9 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %3, align 8, !tbaa !1240
  %77 = add i64 %9, 8
  store i64 %77, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %40
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408dd0_GetPrefixedParent(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408dd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %16, -16
  %26 = load i64, i64* %12, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %16, -20
  %29 = load i32, i32* %7, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = inttoptr i64 %28 to i32*
  %32 = load i32, i32* %31
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %11, align 8, !tbaa !1240
  store i64 %33, i64* %12, align 8, !tbaa !1240
  %34 = add i64 %1, -672
  %35 = add i64 %1, 25
  %36 = add i64 %16, -80
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  store i64 %36, i64* %13, align 8, !tbaa !1240
  %38 = tail call %struct.Memory* @sub_408b30_NumberOfOnes(%struct.State* nonnull %0, i64 %34, %struct.Memory* %2)
  %39 = load i64, i64* %14, align 8
  %40 = add i64 %39, -60
  %41 = load i32, i32* %5, align 4
  %42 = load i64, i64* %3, align 8
  %43 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %43
  %44 = add i64 %39, -8
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %46, 4476
  %48 = inttoptr i64 %47 to i32*
  %49 = load i32, i32* %48
  %50 = zext i32 %49 to i64
  store i64 %50, i64* %12, align 8, !tbaa !1240
  %51 = add i64 %42, -2889
  %52 = add i64 %42, 18
  %53 = load i64, i64* %13, align 8, !tbaa !1240
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55
  store i64 %54, i64* %13, align 8, !tbaa !1240
  %56 = tail call %struct.Memory* @sub_4082a0_mro32(%struct.State* nonnull %0, i64 %51, %struct.Memory* %38)
  %57 = load i32, i32* %5, align 4
  %58 = zext i32 %57 to i64
  %59 = load i64, i64* %3, align 8
  store i64 %58, i64* %12, align 8, !tbaa !1240
  %60 = add i64 %59, -2811
  %61 = add i64 %59, 7
  %62 = load i64, i64* %13, align 8, !tbaa !1240
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64
  store i64 %63, i64* %13, align 8, !tbaa !1240
  %65 = tail call %struct.Memory* @sub_408300_setLeadingOnes32(%struct.State* nonnull %0, i64 %60, %struct.Memory* %56)
  %66 = load i64, i64* %14, align 8
  %67 = add i64 %66, -56
  %68 = load i32, i32* %5, align 4
  %69 = load i64, i64* %3, align 8
  %70 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %70
  %71 = add i64 %66, -16
  %72 = inttoptr i64 %71 to i32*
  store i32 0, i32* %72
  %73 = add i64 %66, -60
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74
  %76 = add i64 %66, -20
  %77 = add i64 %69, 16
  %78 = inttoptr i64 %76 to i32*
  store i32 %75, i32* %78
  %79 = add i64 %66, -8
  %80 = add i64 %66, -24
  %81 = add i64 %66, -48
  %82 = add i64 %66, -32
  %83 = add i64 %66, -28
  %84 = add i64 %66, -44
  %85 = add i64 %66, -52
  %86 = add i64 %66, -12
  %87 = add i64 %66, -40
  %88 = add i64 %66, -36
  br label %block_408e12

block_408ee6:                                     ; preds = %block_408ed5
  %89 = inttoptr i64 %79 to i64*
  %90 = load i64, i64* %89
  %91 = add i64 %90, 4456
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = inttoptr i64 %82 to i32*
  %95 = load i32, i32* %94
  %96 = zext i32 %95 to i64
  %97 = mul nuw nsw i64 %96, 24
  store i64 %97, i64* %10, align 8, !tbaa !1240
  %98 = add i64 %97, %93
  %99 = add i64 %98, 8
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100
  %102 = inttoptr i64 %87 to i32*
  store i32 %101, i32* %102
  %103 = inttoptr i64 %82 to i32*
  %104 = load i32, i32* %103
  %105 = inttoptr i64 %88 to i32*
  store i32 %104, i32* %105
  %106 = add i64 %113, 42
  %107 = inttoptr i64 %81 to i32*
  store i32 0, i32* %107
  br label %block_408f60

block_408ed5:                                     ; preds = %block_408ec0
  %108 = inttoptr i64 %71 to i32*
  store i32 1, i32* %108
  %109 = inttoptr i64 %81 to i32*
  %110 = load i32, i32* %109
  %111 = icmp eq i32 %110, 0
  %112 = select i1 %111, i64 64, i64 17
  %113 = add i64 %137, %112
  br i1 %111, label %block_408f15, label %block_408ee6

block_408f60:                                     ; preds = %block_408f15, %block_408f38, %block_408ee6
  %114 = phi i64 [ %106, %block_408ee6 ], [ %230, %block_408f15 ], [ %141, %block_408f38 ]
  %115 = phi i64 [ 85, %block_408ee6 ], [ 10, %block_408f15 ], [ 10, %block_408f38 ]
  %116 = phi %struct.Memory* [ %119, %block_408ee6 ], [ %119, %block_408f15 ], [ %119, %block_408f38 ]
  %117 = add i64 %115, %114
  br label %block_408f65

block_408e7b:                                     ; preds = %block_408f6a, %block_408e25
  %118 = phi i64 [ %173, %block_408e25 ], [ %346, %block_408f6a ]
  %119 = phi %struct.Memory* [ %232, %block_408e25 ], [ %337, %block_408f6a ]
  %120 = inttoptr i64 %83 to i32*
  %121 = load i32, i32* %120
  %122 = inttoptr i64 %80 to i32*
  %123 = load i32, i32* %122
  %124 = icmp uge i32 %121, %123
  %125 = select i1 %124, i64 262, i64 12
  %126 = add i64 %118, %125
  br i1 %124, label %block_408f81, label %block_408e87

block_408ec0:                                     ; preds = %block_408e87
  %127 = inttoptr i64 %67 to i32*
  %128 = load i32, i32* %127
  %129 = and i32 %128, %331
  %130 = inttoptr i64 %85 to i32*
  store i32 %129, i32* %130
  %131 = inttoptr i64 %85 to i32*
  %132 = load i32, i32* %131
  %133 = inttoptr i64 %86 to i32*
  %134 = load i32, i32* %133
  %135 = icmp ne i32 %132, %134
  %136 = select i1 %135, i64 165, i64 21
  %137 = add i64 %335, %136
  br i1 %135, label %block_408f65, label %block_408ed5

block_408f38:                                     ; preds = %block_408f15
  store i64 %223, i64* %10, align 8, !tbaa !1240
  %138 = inttoptr i64 %87 to i32*
  store i32 %227, i32* %138
  %139 = inttoptr i64 %82 to i32*
  %140 = load i32, i32* %139
  %141 = add i64 %230, 35
  %142 = inttoptr i64 %88 to i32*
  store i32 %140, i32* %142
  br label %block_408f60

block_408e25:                                     ; preds = %block_408e12
  %143 = add i64 %237, 4464
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  %146 = mul nuw nsw i64 %235, 12
  %147 = add i64 %146, %145
  %148 = add i64 %147, 8
  %149 = inttoptr i64 %148 to i32*
  %150 = load i32, i32* %149
  %151 = inttoptr i64 %80 to i32*
  store i32 %150, i32* %151
  %152 = inttoptr i64 %80 to i32*
  %153 = load i32, i32* %152
  %154 = icmp eq i32 %153, 0
  %155 = select i1 %154, i64 44, i64 39
  %156 = add i64 %246, %155
  %157 = add i64 %156, 5
  %158 = select i1 %154, i64 %156, i64 %157
  %159 = inttoptr i64 %81 to i32*
  store i32 1, i32* %159
  %160 = inttoptr i64 %79 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %161, 4464
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  %165 = inttoptr i64 %76 to i32*
  %166 = load i32, i32* %165
  %167 = zext i32 %166 to i64
  %168 = mul nuw nsw i64 %167, 12
  store i64 %168, i64* %10, align 8, !tbaa !1240
  %169 = add i64 %168, %164
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = inttoptr i64 %82 to i32*
  store i32 %171, i32* %172
  %173 = add i64 %158, 42
  %174 = inttoptr i64 %83 to i32*
  store i32 0, i32* %174
  br label %block_408e7b

block_408f65:                                     ; preds = %block_408ec0, %block_408f60
  %175 = phi i64 [ %137, %block_408ec0 ], [ %117, %block_408f60 ]
  %176 = phi %struct.Memory* [ %119, %block_408ec0 ], [ %116, %block_408f60 ]
  %177 = add i64 %175, 5
  br label %block_408f6a

block_40901d.loopexit:                            ; preds = %block_408e12
  store i64 %237, i64* %9, align 8, !tbaa !1240
  br label %block_40901d

block_40901d:                                     ; preds = %block_408f8b, %block_40901d.loopexit
  %178 = phi i64 [ %293, %block_408f8b ], [ %66, %block_40901d.loopexit ]
  %179 = phi %struct.Memory* [ %119, %block_408f8b ], [ %232, %block_40901d.loopexit ]
  %180 = add i64 %178, -16
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %8, align 8, !tbaa !1240
  %184 = load i64, i64* %13, align 8
  %185 = add i64 %184, 64
  %186 = icmp ugt i64 %184, -65
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %19, align 1, !tbaa !1264
  %188 = trunc i64 %185 to i32
  %189 = and i32 %188, 255
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #10
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  store i8 %193, i8* %20, align 1, !tbaa !1278
  %194 = xor i64 %185, %184
  %195 = lshr i64 %194, 4
  %196 = trunc i64 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %21, align 1, !tbaa !1279
  %198 = icmp eq i64 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %22, align 1, !tbaa !1280
  %200 = lshr i64 %185, 63
  %201 = trunc i64 %200 to i8
  store i8 %201, i8* %23, align 1, !tbaa !1281
  %202 = lshr i64 %184, 63
  %203 = xor i64 %200, %202
  %204 = add nuw nsw i64 %203, %200
  %205 = icmp eq i64 %204, 2
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %24, align 1, !tbaa !1282
  %207 = add i64 %184, 72
  %208 = inttoptr i64 %185 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %14, align 8, !tbaa !1240
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %3, align 8, !tbaa !1240
  %212 = add i64 %184, 80
  store i64 %212, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %179

block_408f15:                                     ; preds = %block_408ed5
  %213 = inttoptr i64 %87 to i32*
  %214 = load i32, i32* %213
  %215 = inttoptr i64 %79 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %216, 4456
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = inttoptr i64 %82 to i32*
  %221 = load i32, i32* %220
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %10, align 8, !tbaa !1240
  %223 = mul nuw nsw i64 %222, 24
  store i64 %223, i64* %11, align 8, !tbaa !1240
  %224 = add i64 %223, %219
  %225 = add i64 %224, 8
  %226 = inttoptr i64 %225 to i32*
  %227 = load i32, i32* %226
  %228 = icmp ule i32 %214, %227
  %229 = select i1 %228, i64 70, i64 35
  %230 = add i64 %113, %229
  br i1 %228, label %block_408f60, label %block_408f38

block_408e12:                                     ; preds = %block_40900a, %block_408dd0
  %231 = phi i64 [ %77, %block_408dd0 ], [ %311, %block_40900a ]
  %232 = phi %struct.Memory* [ %65, %block_408dd0 ], [ %119, %block_40900a ]
  %233 = inttoptr i64 %76 to i32*
  %234 = load i32, i32* %233
  %235 = zext i32 %234 to i64
  %236 = inttoptr i64 %79 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %237, 536
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239
  %241 = sub i32 %234, %240
  %242 = icmp ult i32 %234, %240
  %243 = icmp eq i32 %241, 0
  %244 = or i1 %243, %242
  %245 = select i1 %244, i64 19, i64 523
  %246 = add i64 %231, %245
  br i1 %244, label %block_408e25, label %block_40901d.loopexit

block_408f8b:                                     ; preds = %block_408f81
  %247 = inttoptr i64 %76 to i32*
  %248 = load i32, i32* %247
  %249 = inttoptr i64 %79 to i64*
  %250 = load i64, i64* %249
  %251 = add i64 %250, 4480
  %252 = inttoptr i64 %251 to i32*
  store i32 %248, i32* %252
  %253 = inttoptr i64 %79 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %254, 4456
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  %258 = inttoptr i64 %88 to i32*
  %259 = load i32, i32* %258
  %260 = zext i32 %259 to i64
  %261 = mul nuw nsw i64 %260, 24
  %262 = add i64 %261, %257
  %263 = add i64 %262, 16
  %264 = inttoptr i64 %263 to i64*
  %265 = load i64, i64* %264
  %266 = load i64, i64* %14, align 8
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %269, 568
  %271 = inttoptr i64 %270 to i64*
  store i64 %265, i64* %271
  %272 = inttoptr i64 %267 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %273, 4456
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %266, -36
  %278 = inttoptr i64 %277 to i32*
  %279 = load i32, i32* %278
  %280 = zext i32 %279 to i64
  %281 = mul nuw nsw i64 %280, 24
  %282 = add i64 %281, %276
  %283 = add i64 %282, 8
  %284 = inttoptr i64 %283 to i32*
  %285 = load i32, i32* %284
  %286 = add i64 %273, 564
  %287 = inttoptr i64 %286 to i32*
  store i32 %285, i32* %287
  %288 = inttoptr i64 %267 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %289, 4456
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = load i64, i64* %14, align 8
  %294 = add i64 %293, -36
  %295 = inttoptr i64 %294 to i32*
  %296 = load i32, i32* %295
  %297 = zext i32 %296 to i64
  %298 = mul nuw nsw i64 %297, 24
  store i64 %298, i64* %10, align 8, !tbaa !1240
  %299 = add i64 %298, %292
  %300 = inttoptr i64 %299 to i32*
  %301 = load i32, i32* %300
  %302 = add i64 %293, -8
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  store i64 %304, i64* %9, align 8, !tbaa !1240
  %305 = add i64 %304, 4484
  %306 = inttoptr i64 %305 to i32*
  store i32 %301, i32* %306
  br label %block_40901d

block_40900a:                                     ; preds = %block_408f81
  %307 = inttoptr i64 %76 to i32*
  %308 = load i32, i32* %307
  %309 = add i32 %308, 1
  %310 = inttoptr i64 %76 to i32*
  store i32 %309, i32* %310
  %311 = add i64 %351, -504
  br label %block_408e12

block_408e87:                                     ; preds = %block_408e7b
  %312 = inttoptr i64 %79 to i64*
  %313 = load i64, i64* %312
  %314 = add i64 %313, 4456
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  %317 = inttoptr i64 %82 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  %320 = mul nuw nsw i64 %319, 24
  store i64 %320, i64* %10, align 8, !tbaa !1240
  %321 = add i64 %320, %316
  %322 = inttoptr i64 %321 to i32*
  %323 = load i32, i32* %322
  %324 = inttoptr i64 %84 to i32*
  store i32 %323, i32* %324
  %325 = inttoptr i64 %79 to i64*
  %326 = load i64, i64* %325
  %327 = add i64 %326, 4476
  %328 = inttoptr i64 %327 to i32*
  %329 = load i32, i32* %328
  %330 = inttoptr i64 %84 to i32*
  %331 = load i32, i32* %330
  %332 = and i32 %331, %329
  %333 = icmp ne i32 %332, %329
  %334 = select i1 %333, i64 227, i64 57
  %335 = add i64 %126, %334
  br i1 %333, label %block_408f6a, label %block_408ec0

block_408f6a:                                     ; preds = %block_408e87, %block_408f65
  %336 = phi i64 [ %335, %block_408e87 ], [ %177, %block_408f65 ]
  %337 = phi %struct.Memory* [ %119, %block_408e87 ], [ %176, %block_408f65 ]
  %338 = inttoptr i64 %82 to i32*
  %339 = load i32, i32* %338
  %340 = add i32 %339, 1
  %341 = inttoptr i64 %82 to i32*
  store i32 %340, i32* %341
  %342 = inttoptr i64 %83 to i32*
  %343 = load i32, i32* %342
  %344 = add i32 %343, 1
  %345 = inttoptr i64 %83 to i32*
  store i32 %344, i32* %345
  %346 = add i64 %336, -239
  br label %block_408e7b

block_408f81:                                     ; preds = %block_408e7b
  %347 = inttoptr i64 %71 to i32*
  %348 = load i32, i32* %347
  %349 = icmp eq i32 %348, 0
  %350 = select i1 %349, i64 137, i64 10
  %351 = add i64 %126, %350
  br i1 %349, label %block_40900a, label %block_408f8b
}

; Function Attrs: noinline
define %struct.Memory* @sub_402185(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402185:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -156
  %6 = add i64 %1, 10
  %7 = inttoptr i64 %5 to i32*
  store i32 16384, i32* %7
  %8 = tail call %struct.Memory* @sub_40218f_def_40215B(%struct.State* nonnull %0, i64 %6, %struct.Memory* %2)
  ret %struct.Memory* %8
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40b470_computeChecksum(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40b470:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = load i64, i64* %12, align 8
  %15 = load i64, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %12, align 8, !tbaa !1240
  %18 = add i64 %15, -56
  store i64 %18, i64* %11, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -24
  %26 = load i64, i64* %10, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %15, -32
  %29 = load i64, i64* %9, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %15, -40
  %32 = load i64, i64* %8, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = inttoptr i64 %28 to i64*
  %35 = load i64, i64* %34
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i64 31, i64 43
  %38 = add i64 %37, %1
  br i1 %36, label %block_40b48f, label %block_40b49b

block_40b53b:                                     ; preds = %block_40b4cb
  store i64 %107, i64* %7, align 8, !tbaa !1240
  store i64 %107, i64* %10, align 8, !tbaa !1240
  %39 = add i64 %100, -24
  %40 = inttoptr i64 %39 to i64*
  %41 = load i64, i64* %40
  %42 = add i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %9, align 8, !tbaa !1240
  %45 = add i64 %100, -32
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  store i64 %47, i64* %8, align 8, !tbaa !1240
  %48 = add i64 %113, -203
  %49 = add i64 %113, 21
  %50 = load i64, i64* %11, align 8, !tbaa !1240
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52
  store i64 %51, i64* %11, align 8, !tbaa !1240
  %53 = tail call %struct.Memory* @sub_40b470_computeChecksum(%struct.State* nonnull %0, i64 %48, %struct.Memory* %101)
  %54 = load i32, i32* %5, align 4
  %55 = icmp eq i32 %54, 0
  %56 = load i64, i64* %12, align 8
  %57 = add i64 %56, -4
  br i1 %55, label %block_40b565, label %block_40b559

block_40b559:                                     ; preds = %block_40b53b
  %58 = inttoptr i64 %57 to i32*
  store i32 1, i32* %58
  br label %block_40b56c

block_40b4b8:                                     ; preds = %block_40b49b
  %59 = add i64 %184, -4
  %60 = inttoptr i64 %59 to i32*
  store i32 1, i32* %60
  br label %block_40b56c

block_40b48f:                                     ; preds = %block_40b470
  %61 = add i64 %15, -12
  %62 = inttoptr i64 %61 to i32*
  store i32 0, i32* %62
  br label %block_40b56c

block_40b56c:                                     ; preds = %block_40b565, %block_40b48f, %block_40b4b8, %block_40b559
  %63 = phi i64 [ %56, %block_40b565 ], [ %56, %block_40b559 ], [ %184, %block_40b4b8 ], [ %16, %block_40b48f ]
  %64 = phi %struct.Memory* [ %53, %block_40b565 ], [ %53, %block_40b559 ], [ %178, %block_40b4b8 ], [ %2, %block_40b48f ]
  %65 = add i64 %63, -4
  %66 = inttoptr i64 %65 to i32*
  %67 = load i32, i32* %66
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %6, align 8, !tbaa !1240
  %69 = load i64, i64* %11, align 8
  %70 = add i64 %69, 48
  %71 = icmp ugt i64 %69, -49
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %19, align 1, !tbaa !1264
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !1278
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %21, align 1, !tbaa !1279
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %22, align 1, !tbaa !1280
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %23, align 1, !tbaa !1281
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %24, align 1, !tbaa !1282
  %93 = add i64 %69, 56
  %94 = inttoptr i64 %70 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %12, align 8, !tbaa !1240
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %3, align 8, !tbaa !1240
  %98 = add i64 %69, 64
  store i64 %98, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %64

block_40b4cb:                                     ; preds = %block_40b4c4, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %99 = phi i64 [ %161, %block_40b4c4 ], [ %159, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %100 = phi i64 [ %184, %block_40b4c4 ], [ %163, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %101 = phi %struct.Memory* [ %178, %block_40b4c4 ], [ %101, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %102 = add i64 %100, -36
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103
  %105 = add i64 %100, -16
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %107, 540
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109
  %111 = icmp ult i32 %104, %110
  %112 = select i1 %111, i64 19, i64 112
  %113 = add i64 %99, %112
  br i1 %111, label %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, label %block_40b53b

block_40b565:                                     ; preds = %block_40b53b
  %114 = inttoptr i64 %57 to i32*
  store i32 0, i32* %114
  br label %block_40b56c

_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %block_40b4cb
  %115 = add i64 %100, -32
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %119, 1
  %121 = inttoptr i64 %117 to i64*
  store i64 %120, i64* %121
  %122 = add i64 %100, -24
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = inttoptr i64 %102 to i32*
  %126 = load i32, i32* %125
  %127 = zext i32 %126 to i64
  %128 = shl nuw nsw i64 %127, 3
  %129 = add nuw nsw i64 %128, 24
  %130 = add i64 %129, %124
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131
  %133 = mul i64 %132, %120
  %134 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 12) to i32*)
  %135 = sext i32 %134 to i64
  %136 = add i64 %100, -48
  %137 = inttoptr i64 %136 to i64*
  store i64 %135, i64* %137
  %138 = inttoptr i64 %164 to i64*
  %139 = load i64, i64* %138
  %140 = urem i64 %133, %139
  %141 = inttoptr i64 %165 to i64*
  %142 = load i64, i64* %141
  %143 = inttoptr i64 %166 to i32*
  %144 = load i32, i32* %143
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %13, align 8, !tbaa !1240
  %146 = shl nuw nsw i64 %145, 3
  %147 = add nuw nsw i64 %146, 4392
  %148 = add i64 %147, %142
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %150, %140
  %152 = add i64 %142, 4392
  %153 = add i64 %152, %146
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  %155 = inttoptr i64 %166 to i32*
  %156 = load i32, i32* %155
  %157 = add i32 %156, 1
  %158 = inttoptr i64 %167 to i32*
  store i32 %157, i32* %158
  %159 = add i64 %113, -19
  br label %block_40b4cb

block_40b4c4:                                     ; preds = %block_40b49b
  %160 = add i64 %184, -36
  %161 = add i64 %183, 7
  %162 = inttoptr i64 %160 to i32*
  store i32 0, i32* %162
  %163 = load i64, i64* %12, align 8
  %164 = add i64 %163, -48
  %165 = add i64 %163, -16
  %166 = add i64 %163, -36
  %167 = add i64 %163, -36
  br label %block_40b4cb

block_40b49b:                                     ; preds = %block_40b470
  %168 = inttoptr i64 %25 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %10, align 8, !tbaa !1240
  %170 = inttoptr i64 %35 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %9, align 8, !tbaa !1240
  %172 = inttoptr i64 %31 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %8, align 8, !tbaa !1240
  %174 = add i64 %38, -43
  %175 = add i64 %38, 20
  %176 = add i64 %15, -64
  %177 = inttoptr i64 %176 to i64*
  store i64 %175, i64* %177
  store i64 %176, i64* %11, align 8, !tbaa !1240
  %178 = tail call %struct.Memory* @sub_40b470_computeChecksum(%struct.State* nonnull %0, i64 %174, %struct.Memory* %2)
  %179 = load i32, i32* %5, align 4
  %180 = load i64, i64* %3, align 8
  %181 = icmp eq i32 %179, 0
  %182 = select i1 %181, i64 21, i64 9
  %183 = add i64 %180, %182
  %184 = load i64, i64* %12, align 8
  br i1 %181, label %block_40b4c4, label %block_40b4b8
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409750_countTupleOnes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %8, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -16
  %15 = load i64, i64* %7, align 8
  %16 = inttoptr i64 %14 to i64*
  store i64 %15, i64* %16
  %17 = add i64 %11, -20
  %18 = load i32, i32* %5, align 4
  %19 = inttoptr i64 %17 to i32*
  store i32 %18, i32* %19
  %20 = add i64 %11, -28
  %21 = inttoptr i64 %20 to i32*
  store i32 0, i32* %21
  %22 = add i64 %11, -40
  %23 = inttoptr i64 %22 to i64*
  store i64 1, i64* %23
  %24 = add i64 %11, -24
  %25 = inttoptr i64 %24 to i32*
  store i32 0, i32* %25
  %26 = add i64 %11, -20
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %30 = add i64 %11, -16
  br label %block_409771

block_40977d:                                     ; preds = %block_409771
  %31 = inttoptr i64 %30 to i64*
  %32 = load i64, i64* %31
  %33 = inttoptr i64 %22 to i64*
  %34 = load i64, i64* %33
  %35 = and i64 %34, %32
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %block_409798, label %block_40978f

block_409798:                                     ; preds = %block_40978f, %block_40977d
  %37 = phi %struct.Memory* [ %79, %block_40977d ], [ %79, %block_40978f ]
  %38 = inttoptr i64 %22 to i64*
  %39 = load i64, i64* %38
  %40 = shl i64 %39, 1
  %41 = inttoptr i64 %22 to i64*
  store i64 %40, i64* %41
  %42 = inttoptr i64 %24 to i32*
  %43 = load i32, i32* %42
  %44 = add i32 %43, 1
  %45 = inttoptr i64 %24 to i32*
  store i32 %44, i32* %45
  br label %block_409771

block_4097b2:                                     ; preds = %block_409771
  %46 = sub i32 %81, %83
  %47 = lshr i32 %46, 31
  %48 = lshr i32 %81, 31
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %52 = and i32 %46, 255
  %53 = tail call i32 @llvm.ctpop.i32(i32 %52) #10
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = xor i32 %83, %81
  %58 = xor i32 %57, %46
  %59 = lshr i32 %58, 4
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = icmp eq i32 %46, 0
  %63 = zext i1 %62 to i8
  %64 = trunc i32 %47 to i8
  %65 = xor i32 %47, %48
  %66 = lshr i32 %83, 31
  %67 = xor i32 %66, %48
  %68 = add nuw nsw i32 %65, %67
  %69 = icmp eq i32 %68, 2
  %70 = zext i1 %69 to i8
  store i8 0, i8* %27, align 1, !tbaa !1428
  store i8 %56, i8* %49, align 1, !tbaa !1428
  store i8 %61, i8* %28, align 1, !tbaa !1428
  store i8 %63, i8* %50, align 1, !tbaa !1428
  store i8 %64, i8* %29, align 1, !tbaa !1428
  store i8 %70, i8* %51, align 1, !tbaa !1428
  %71 = inttoptr i64 %20 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %6, align 8, !tbaa !1240
  %74 = inttoptr i64 %12 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %9, align 8, !tbaa !1240
  %76 = inttoptr i64 %11 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %3, align 8, !tbaa !1240
  %78 = add i64 %11, 8
  store i64 %78, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %79

block_409771:                                     ; preds = %block_409798, %block_409750
  %79 = phi %struct.Memory* [ %2, %block_409750 ], [ %37, %block_409798 ]
  %80 = inttoptr i64 %24 to i32*
  %81 = load i32, i32* %80
  %82 = inttoptr i64 %26 to i32*
  %83 = load i32, i32* %82
  %84 = icmp ult i32 %81, %83
  br i1 %84, label %block_40977d, label %block_4097b2

block_40978f:                                     ; preds = %block_40977d
  %85 = inttoptr i64 %20 to i32*
  %86 = load i32, i32* %85
  %87 = add i32 %86, 1
  %88 = inttoptr i64 %20 to i32*
  store i32 %87, i32* %88
  br label %block_409798
}

; Function Attrs: noinline
define %struct.Memory* @sub_40b2d0_WriteViewToDiskCS(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40b2d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = load i64, i64* %12, align 8
  %15 = load i64, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %12, align 8, !tbaa !1240
  %18 = add i64 %15, -72
  store i64 %18, i64* %11, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -24
  %26 = load i64, i64* %10, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %15, -32
  %29 = load i64, i64* %9, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %15, -40
  %32 = load i64, i64* %8, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = inttoptr i64 %28 to i64*
  %35 = load i64, i64* %34
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i64 31, i64 43
  %38 = add i64 %37, %1
  br i1 %36, label %block_40b2ef, label %block_40b2fb

block_40b2fb:                                     ; preds = %block_40b2d0
  %39 = inttoptr i64 %25 to i64*
  %40 = load i64, i64* %39
  store i64 %40, i64* %10, align 8, !tbaa !1240
  %41 = inttoptr i64 %35 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %9, align 8, !tbaa !1240
  %43 = inttoptr i64 %31 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %8, align 8, !tbaa !1240
  %45 = add i64 %38, -43
  %46 = add i64 %38, 20
  %47 = add i64 %15, -80
  %48 = inttoptr i64 %47 to i64*
  store i64 %46, i64* %48
  store i64 %47, i64* %11, align 8, !tbaa !1240
  %49 = tail call %struct.Memory* @sub_40b2d0_WriteViewToDiskCS(%struct.State* nonnull %0, i64 %45, %struct.Memory* %2)
  %50 = load i32, i32* %5, align 4
  %51 = load i64, i64* %3, align 8
  %52 = icmp eq i32 %50, 0
  %53 = select i1 %52, i64 21, i64 9
  %54 = add i64 %51, %53
  %55 = load i64, i64* %12, align 8
  br i1 %52, label %block_40b324, label %block_40b318

block_40b404:                                     ; preds = %block_40b3c4
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %9, align 8, !tbaa !1240
  %57 = load i64, i64* @stderr
  store i64 %57, i64* %10, align 8, !tbaa !1240
  %58 = add i64 %254, 25
  %59 = load i64, i64* %11, align 8, !tbaa !1240
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %63 = load i64, i64* %8, align 8, !alias.scope !2253, !noalias !2256
  %64 = load i64, i64* %56, align 8, !alias.scope !2253, !noalias !2256
  %65 = load i64, i64* %13, align 8, !alias.scope !2253, !noalias !2256
  %66 = load i64, i64* %62, align 8, !alias.scope !2253, !noalias !2256
  %67 = inttoptr i64 %59 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %59, 8
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %59, 16
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73
  %75 = add i64 %59, 24
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  %78 = add i64 %59, 32
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = add i64 %59, 40
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82
  %84 = add i64 %59, 48
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = add i64 %59, 56
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88
  %90 = add i64 %59, 64
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91
  %93 = add i64 %59, 72
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  %96 = inttoptr i64 %60 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %3, align 8, !alias.scope !2253, !noalias !2256
  store i64 %59, i64* %11, align 8, !alias.scope !2253, !noalias !2256
  %98 = tail call i64 @fprintf(i64 %57, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %63, i64 %64, i64 %65, i64 %66, i64 %68, i64 %71, i64 %74, i64 %77, i64 %80, i64 %83, i64 %86, i64 %89, i64 %92, i64 %95), !noalias !2253
  %99 = load i64, i64* %12, align 8
  %100 = add i64 %99, -4
  %101 = inttoptr i64 %100 to i32*
  store i32 1, i32* %101
  %102 = add i64 %99, -60
  %103 = trunc i64 %98 to i32
  %104 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %104
  br label %block_40b45d

block_40b2ef:                                     ; preds = %block_40b2d0
  %105 = add i64 %15, -12
  %106 = inttoptr i64 %105 to i32*
  store i32 0, i32* %106
  br label %block_40b45d

_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %block_40b32b
  %107 = add i64 %256, -24
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = shl nuw nsw i64 %261, 3
  %111 = add nuw nsw i64 %110, 24
  %112 = add i64 %111, %109
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  %115 = add nuw nsw i64 %110, 4280
  %116 = add i64 %115, %264
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %118, %114
  %120 = add i64 %264, 4280
  %121 = add i64 %120, %110
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122
  %123 = add i64 %256, -32
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %127, 1
  %129 = inttoptr i64 %125 to i64*
  store i64 %128, i64* %129
  %130 = inttoptr i64 %279 to i64*
  %131 = load i64, i64* %130
  %132 = inttoptr i64 %280 to i32*
  %133 = load i32, i32* %132
  %134 = zext i32 %133 to i64
  %135 = shl nuw nsw i64 %134, 3
  %136 = add nuw nsw i64 %135, 24
  %137 = add i64 %136, %131
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = mul i64 %139, %128
  %141 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 12) to i32*)
  %142 = sext i32 %141 to i64
  %143 = inttoptr i64 %281 to i64*
  store i64 %142, i64* %143
  %144 = inttoptr i64 %281 to i64*
  %145 = load i64, i64* %144
  %146 = urem i64 %140, %145
  %147 = inttoptr i64 %282 to i64*
  %148 = load i64, i64* %147
  %149 = inttoptr i64 %283 to i32*
  %150 = load i32, i32* %149
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %13, align 8, !tbaa !1240
  %152 = shl nuw nsw i64 %151, 3
  %153 = add nuw nsw i64 %152, 4392
  %154 = add i64 %153, %148
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  %157 = add i64 %156, %146
  %158 = add i64 %148, 4392
  %159 = add i64 %158, %152
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160
  %161 = inttoptr i64 %283 to i32*
  %162 = load i32, i32* %161
  %163 = add i32 %162, 1
  %164 = inttoptr i64 %283 to i32*
  store i32 %163, i32* %164
  %165 = add i64 %270, -19
  br label %block_40b32b

block_40b42c:                                     ; preds = %block_40b3c4
  %166 = load i64, i64* %12, align 8
  %167 = add i64 %166, -16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %10, align 8, !tbaa !1240
  %170 = add i64 %166, -24
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %172, 8
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %9, align 8, !tbaa !1240
  %176 = add i64 %166, -32
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %8, align 8, !tbaa !1240
  %179 = add i64 %254, -348
  %180 = add i64 %254, 21
  %181 = load i64, i64* %11, align 8, !tbaa !1240
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183
  store i64 %182, i64* %11, align 8, !tbaa !1240
  %184 = tail call %struct.Memory* @sub_40b2d0_WriteViewToDiskCS(%struct.State* nonnull %0, i64 %179, %struct.Memory* %257)
  %185 = load i32, i32* %5, align 4
  %186 = icmp eq i32 %185, 0
  %187 = load i64, i64* %12, align 8
  %188 = add i64 %187, -4
  br i1 %186, label %block_40b456, label %block_40b44a

block_40b45d:                                     ; preds = %block_40b456, %block_40b44a, %block_40b318, %block_40b2ef, %block_40b404
  %189 = phi i64 [ %187, %block_40b456 ], [ %187, %block_40b44a ], [ %99, %block_40b404 ], [ %55, %block_40b318 ], [ %16, %block_40b2ef ]
  %190 = phi %struct.Memory* [ %184, %block_40b456 ], [ %184, %block_40b44a ], [ %257, %block_40b404 ], [ %49, %block_40b318 ], [ %2, %block_40b2ef ]
  %191 = add i64 %189, -4
  %192 = inttoptr i64 %191 to i32*
  %193 = load i32, i32* %192
  %194 = zext i32 %193 to i64
  store i64 %194, i64* %6, align 8, !tbaa !1240
  %195 = load i64, i64* %11, align 8
  %196 = add i64 %195, 64
  %197 = icmp ugt i64 %195, -65
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %19, align 1, !tbaa !1264
  %199 = trunc i64 %196 to i32
  %200 = and i32 %199, 255
  %201 = tail call i32 @llvm.ctpop.i32(i32 %200) #10
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = xor i8 %203, 1
  store i8 %204, i8* %20, align 1, !tbaa !1278
  %205 = xor i64 %196, %195
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  store i8 %208, i8* %21, align 1, !tbaa !1279
  %209 = icmp eq i64 %196, 0
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %22, align 1, !tbaa !1280
  %211 = lshr i64 %196, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* %23, align 1, !tbaa !1281
  %213 = lshr i64 %195, 63
  %214 = xor i64 %211, %213
  %215 = add nuw nsw i64 %214, %211
  %216 = icmp eq i64 %215, 2
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %24, align 1, !tbaa !1282
  %218 = add i64 %195, 72
  %219 = inttoptr i64 %196 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %12, align 8, !tbaa !1240
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %3, align 8, !tbaa !1240
  %223 = add i64 %195, 80
  store i64 %223, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %190

block_40b3c4:                                     ; preds = %block_40b32b
  store i64 1, i64* %8, align 8, !tbaa !1240
  %224 = load i64, i64* %12, align 8
  %225 = add i64 %224, -24
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %227, 24
  %229 = add i64 %224, -16
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %231, 588
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = zext i32 %234 to i64
  %236 = add i64 %231, 4240
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %224, -56
  %240 = inttoptr i64 %239 to i64*
  store i64 %238, i64* %240
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %7, align 8, !tbaa !1240
  %243 = add i64 %270, 54
  %244 = load i64, i64* %11, align 8, !tbaa !1240
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246
  %247 = inttoptr i64 %245 to i64*
  %248 = load i64, i64* %247
  store i64 %248, i64* %3, align 8, !alias.scope !2258, !noalias !2261
  store i64 %244, i64* %11, align 8, !alias.scope !2258, !noalias !2261
  %249 = tail call i64 @fwrite(i64 %228, i64 %235, i64 1, i64 %242)
  %250 = load i64, i64* %3, align 8
  %251 = add i64 %249, -1
  %252 = icmp eq i64 %251, 0
  %253 = select i1 %252, i64 50, i64 10
  %254 = add i64 %250, %253
  br i1 %252, label %block_40b42c, label %block_40b404

block_40b32b:                                     ; preds = %block_40b324, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %255 = phi i64 [ %276, %block_40b324 ], [ %165, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %256 = phi i64 [ %55, %block_40b324 ], [ %278, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %257 = phi %struct.Memory* [ %49, %block_40b324 ], [ %257, %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %258 = add i64 %256, -36
  %259 = inttoptr i64 %258 to i32*
  %260 = load i32, i32* %259
  %261 = zext i32 %260 to i64
  %262 = add i64 %256, -16
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263
  %265 = add i64 %264, 540
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266
  %268 = icmp ult i32 %260, %267
  %269 = select i1 %268, i64 19, i64 153
  %270 = add i64 %255, %269
  br i1 %268, label %_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, label %block_40b3c4

block_40b318:                                     ; preds = %block_40b2fb
  %271 = add i64 %55, -4
  %272 = inttoptr i64 %271 to i32*
  store i32 1, i32* %272
  br label %block_40b45d

block_40b44a:                                     ; preds = %block_40b42c
  %273 = inttoptr i64 %188 to i32*
  store i32 1, i32* %273
  br label %block_40b45d

block_40b456:                                     ; preds = %block_40b42c
  %274 = inttoptr i64 %188 to i32*
  store i32 0, i32* %274
  br label %block_40b45d

block_40b324:                                     ; preds = %block_40b2fb
  %275 = add i64 %55, -36
  %276 = add i64 %54, 7
  %277 = inttoptr i64 %275 to i32*
  store i32 0, i32* %277
  %278 = load i64, i64* %12, align 8
  %279 = add i64 %278, -24
  %280 = add i64 %278, -36
  %281 = add i64 %278, -48
  %282 = add i64 %278, -16
  %283 = add i64 %278, -36
  br label %block_40b32b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401120_ListFirstPrimes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_401120:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %9, align 8, !tbaa !1240
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = add i64 %12, -24
  %19 = load i64, i64* %7, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %12, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 0, i64* %22
  %23 = add i64 %12, -36
  %24 = inttoptr i64 %23 to i32*
  store i32 0, i32* %24
  %25 = add i64 %12, -48
  %26 = inttoptr i64 %25 to i64*
  store i64 0, i64* %26
  %27 = add i64 %12, -56
  %28 = inttoptr i64 %27 to i64*
  store i64 0, i64* %28
  %29 = add i64 %12, -24
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %12, -32
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %42 = inttoptr i64 %32 to i64*
  store i64 %35, i64* %42
  %43 = shl i64 %34, 3
  %44 = add i64 %43, %31
  %45 = inttoptr i64 %44 to i64*
  store i64 2, i64* %45
  %46 = inttoptr i64 %29 to i64*
  %47 = load i64, i64* %46
  %48 = inttoptr i64 %32 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %49, 1
  %51 = load i64, i64* %10, align 8
  %52 = add i64 %51, -24
  %53 = inttoptr i64 %52 to i64*
  store i64 %50, i64* %53
  %54 = shl i64 %49, 3
  %55 = add i64 %54, %47
  %56 = inttoptr i64 %55 to i64*
  store i64 3, i64* %56
  %57 = add i64 %51, -16
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = inttoptr i64 %52 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %61, 1
  %63 = inttoptr i64 %52 to i64*
  store i64 %62, i64* %63
  %64 = shl i64 %61, 3
  %65 = add i64 %64, %59
  %66 = inttoptr i64 %65 to i64*
  store i64 5, i64* %66
  %67 = inttoptr i64 %57 to i64*
  %68 = load i64, i64* %67
  %69 = inttoptr i64 %52 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %7, align 8, !tbaa !1240
  %71 = add i64 %70, 1
  store i64 %71, i64* %8, align 8, !tbaa !1240
  %72 = load i64, i64* %10, align 8
  %73 = add i64 %72, -24
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74
  %75 = shl i64 %70, 3
  %76 = add i64 %75, %68
  %77 = inttoptr i64 %76 to i64*
  store i64 7, i64* %77
  %78 = add i64 %72, -40
  %79 = add i64 %1, 159
  %80 = inttoptr i64 %78 to i64*
  store i64 8, i64* %80
  br label %block_4011bf

block_4011dc:                                     ; preds = %block_4011cd, %block_401249
  %81 = phi i64 [ %198, %block_4011cd ], [ %181, %block_401249 ]
  %82 = phi i64 [ %211, %block_4011cd ], [ %163, %block_401249 ]
  %83 = phi %struct.Memory* [ %212, %block_4011cd ], [ %167, %block_401249 ]
  %84 = add i64 %82, -16
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = add i64 %82, -48
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88
  %90 = shl i64 %89, 3
  %91 = add i64 %86, %90
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  store i64 %86, i64* %5, align 8, !tbaa !1240
  store i64 %89, i64* %6, align 8, !tbaa !1240
  %94 = sext i64 %93 to i128
  %95 = and i128 %94, -18446744073709551616
  %96 = zext i64 %93 to i128
  %97 = or i128 %95, %96
  %98 = mul nsw i128 %97, %97
  %99 = trunc i128 %98 to i64
  %100 = lshr i64 %99, 63
  %101 = add i64 %82, -40
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = sub i64 %99, %103
  %105 = icmp ult i64 %99, %103
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %36, align 1, !tbaa !1264
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #10
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %37, align 1, !tbaa !1278
  %113 = xor i64 %103, %99
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %38, align 1, !tbaa !1279
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %39, align 1, !tbaa !1280
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %40, align 1, !tbaa !1281
  %122 = lshr i64 %103, 63
  %123 = xor i64 %122, %100
  %124 = xor i64 %120, %100
  %125 = add nuw nsw i64 %124, %123
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %41, align 1, !tbaa !1282
  %128 = icmp ne i8 %121, 0
  %129 = xor i1 %128, %126
  %130 = or i1 %118, %129
  %131 = select i1 %130, i64 35, i64 131
  %132 = add i64 %81, %131
  br i1 %130, label %block_4011ff, label %block_40125f.loopexit

block_4011ff:                                     ; preds = %block_4011dc
  store i64 %93, i64* %5, align 8, !tbaa !1240
  store i64 %86, i64* %7, align 8, !tbaa !1240
  store i64 %89, i64* %8, align 8, !tbaa !1240
  %133 = add i64 %82, -56
  %134 = inttoptr i64 %133 to i64*
  store i64 %103, i64* %134
  store i64 %103, i64* %4, align 8, !tbaa !1240
  %135 = ashr i64 %103, 63
  store i64 %135, i64* %6, align 8, !tbaa !1240
  %136 = add i64 %132, 41
  store i64 %136, i64* %3, align 8
  %137 = inttoptr i64 %91 to i64*
  %138 = load i64, i64* %137
  %139 = sext i64 %138 to i128
  %140 = and i128 %139, -18446744073709551616
  %141 = zext i64 %135 to i128
  %142 = shl nuw i128 %141, 64
  %143 = zext i64 %103 to i128
  %144 = or i128 %142, %143
  %145 = zext i64 %138 to i128
  %146 = or i128 %140, %145
  %147 = sdiv i128 %144, %146
  %148 = trunc i128 %147 to i64
  %149 = and i128 %147, 18446744073709551615
  %150 = sext i64 %148 to i128
  %151 = and i128 %150, -18446744073709551616
  %152 = or i128 %151, %149
  %153 = icmp eq i128 %147, %152
  br i1 %153, label %160, label %154

; <label>:154:                                    ; preds = %block_4011ff
  %155 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %136, %struct.Memory* %83) #14
  %156 = load i64, i64* %5, align 8
  %157 = load i64, i64* %4, align 8
  %158 = load i64, i64* %3, align 8
  %159 = load i64, i64* %10, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:160:                                    ; preds = %block_4011ff
  %161 = srem i128 %144, %146
  %162 = trunc i128 %161 to i64
  store i64 %162, i64* %6, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %160, %154
  %163 = phi i64 [ %159, %154 ], [ %82, %160 ]
  %164 = phi i64 [ %158, %154 ], [ %136, %160 ]
  %165 = phi i64 [ %157, %154 ], [ %148, %160 ]
  %166 = phi i64 [ %156, %154 ], [ %93, %160 ]
  %167 = phi %struct.Memory* [ %155, %154 ], [ %83, %160 ]
  %168 = mul i64 %165, %166
  store i64 %168, i64* %5, align 8, !tbaa !1240
  %169 = add i64 %163, -56
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  %172 = sub i64 %171, %168
  %173 = icmp eq i64 %172, 0
  %174 = select i1 %173, i64 21, i64 33
  %175 = add i64 %164, %174
  br i1 %173, label %block_40123d, label %block_401249

block_401249:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %176 = add i64 %163, -48
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %178, 1
  %180 = inttoptr i64 %176 to i64*
  store i64 %179, i64* %180
  %181 = add i64 %175, -109
  br label %block_4011dc

block_40125f.loopexit:                            ; preds = %block_4011dc
  br label %block_40125f

block_40125f:                                     ; preds = %block_40123d, %block_40125f.loopexit
  %182 = phi i64 [ %194, %block_40123d ], [ %132, %block_40125f.loopexit ]
  %183 = phi i64 [ %163, %block_40123d ], [ %82, %block_40125f.loopexit ]
  %184 = phi %struct.Memory* [ %167, %block_40123d ], [ %83, %block_40125f.loopexit ]
  %185 = add i64 %183, -28
  %186 = inttoptr i64 %185 to i32*
  %187 = load i32, i32* %186
  %188 = icmp eq i32 %187, 0
  %189 = select i1 %188, i64 10, i64 37
  %190 = add i64 %182, %189
  %191 = add i64 %183, -40
  br i1 %188, label %block_401269, label %block_401284

block_40123d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %192 = add i64 %163, -28
  %193 = inttoptr i64 %192 to i32*
  store i32 1, i32* %193
  %194 = add i64 %175, 34
  br label %block_40125f

block_4011cd:                                     ; preds = %block_4011bf
  %195 = add i64 %211, -28
  %196 = inttoptr i64 %195 to i32*
  store i32 0, i32* %196
  %197 = add i64 %211, -48
  %198 = add i64 %247, 15
  %199 = inttoptr i64 %197 to i64*
  store i64 0, i64* %199
  br label %block_4011dc

block_40129a:                                     ; preds = %block_4011bf
  %200 = add i64 %211, -24
  %201 = inttoptr i64 %200 to i64*
  %202 = load i64, i64* %201
  store i64 %202, i64* %4, align 8, !tbaa !1240
  %203 = load i64, i64* %9, align 8, !tbaa !1240
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %10, align 8, !tbaa !1240
  %207 = inttoptr i64 %204 to i64*
  %208 = load i64, i64* %207
  store i64 %208, i64* %3, align 8, !tbaa !1240
  %209 = add i64 %203, 16
  store i64 %209, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %212

block_4011bf:                                     ; preds = %block_401284, %block_401120
  %210 = phi i64 [ %79, %block_401120 ], [ %268, %block_401284 ]
  %211 = phi i64 [ %72, %block_401120 ], [ %183, %block_401284 ]
  %212 = phi %struct.Memory* [ %2, %block_401120 ], [ %263, %block_401284 ]
  %213 = add i64 %211, -40
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = add i64 %211, -8
  %217 = inttoptr i64 %216 to i64*
  %218 = load i64, i64* %217
  %219 = sub i64 %215, %218
  %220 = icmp ult i64 %215, %218
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !1264
  %222 = trunc i64 %219 to i32
  %223 = and i32 %222, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #10
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %37, align 1, !tbaa !1278
  %228 = xor i64 %218, %215
  %229 = xor i64 %228, %219
  %230 = lshr i64 %229, 4
  %231 = trunc i64 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %38, align 1, !tbaa !1279
  %233 = icmp eq i64 %219, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %39, align 1, !tbaa !1280
  %235 = lshr i64 %219, 63
  %236 = trunc i64 %235 to i8
  store i8 %236, i8* %40, align 1, !tbaa !1281
  %237 = lshr i64 %215, 63
  %238 = lshr i64 %218, 63
  %239 = xor i64 %238, %237
  %240 = xor i64 %235, %237
  %241 = add nuw nsw i64 %240, %239
  %242 = icmp eq i64 %241, 2
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %41, align 1, !tbaa !1282
  %244 = icmp ne i8 %236, 0
  %245 = xor i1 %244, %242
  %246 = select i1 %245, i64 14, i64 219
  %247 = add i64 %210, %246
  br i1 %245, label %block_4011cd, label %block_40129a

block_401269:                                     ; preds = %block_40125f
  %248 = inttoptr i64 %191 to i64*
  %249 = load i64, i64* %248
  %250 = add i64 %183, -16
  %251 = inttoptr i64 %250 to i64*
  %252 = load i64, i64* %251
  store i64 %252, i64* %5, align 8, !tbaa !1240
  %253 = add i64 %183, -24
  %254 = inttoptr i64 %253 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %6, align 8, !tbaa !1240
  %256 = add i64 %255, 1
  store i64 %256, i64* %7, align 8, !tbaa !1240
  %257 = inttoptr i64 %253 to i64*
  store i64 %256, i64* %257
  %258 = shl i64 %255, 3
  %259 = add i64 %258, %252
  %260 = add i64 %190, 27
  %261 = inttoptr i64 %259 to i64*
  store i64 %249, i64* %261
  br label %block_401284

block_401284:                                     ; preds = %block_401269, %block_40125f
  %262 = phi i64 [ %260, %block_401269 ], [ %190, %block_40125f ]
  %263 = phi %struct.Memory* [ %184, %block_401269 ], [ %184, %block_40125f ]
  %264 = inttoptr i64 %191 to i64*
  %265 = load i64, i64* %264
  %266 = add i64 %265, 1
  %267 = inttoptr i64 %191 to i64*
  store i64 %266, i64* %267
  %268 = add i64 %262, -197
  br label %block_4011bf
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b5b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402b5b:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -56
  %6 = inttoptr i64 %5 to i64*
  store i64 ptrtoint (%adcexpS_type* @adcexpS to i64), i64* %6
  %7 = add i64 %1, 71
  %8 = tail call %struct.Memory* @sub_402ba2_def_402B59(%struct.State* nonnull %0, i64 %7, %struct.Memory* %2)
  ret %struct.Memory* %8
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402778(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402778:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -24
  %9 = inttoptr i64 %8 to i64*
  %10 = load i64, i64* %9
  %11 = add i64 %10, 4
  %12 = inttoptr i64 %11 to i32*
  store i32 15, i32* %12
  %13 = inttoptr i64 %8 to i64*
  %14 = load i64, i64* %13
  %15 = add i64 %14, 8
  %16 = inttoptr i64 %15 to i32*
  store i32 1, i32* %16
  %17 = inttoptr i64 %8 to i64*
  %18 = load i64, i64* %17
  %19 = add i64 %18, 16
  %20 = inttoptr i64 %19 to i64*
  store i64 1000000, i64* %20
  %21 = add i64 %7, -4
  %22 = inttoptr i64 %21 to i32*
  store i32 1, i32* %22
  %23 = inttoptr i64 %21 to i32*
  %24 = load i32, i32* %23
  %25 = zext i32 %24 to i64
  store i64 %25, i64* %4, align 8, !tbaa !1240
  %26 = load i64, i64* %5, align 8
  %27 = add i64 %26, 1168
  %28 = icmp ugt i64 %26, -1169
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %29, i8* %30, align 1, !tbaa !1264
  %31 = trunc i64 %27 to i32
  %32 = and i32 %31, 255
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #10
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %36, i8* %37, align 1, !tbaa !1278
  %38 = xor i64 %26, 16
  %39 = xor i64 %38, %27
  %40 = lshr i64 %39, 4
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %42, i8* %43, align 1, !tbaa !1279
  %44 = icmp eq i64 %27, 0
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %45, i8* %46, align 1, !tbaa !1280
  %47 = lshr i64 %27, 63
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %48, i8* %49, align 1, !tbaa !1281
  %50 = lshr i64 %26, 63
  %51 = xor i64 %47, %50
  %52 = add nuw nsw i64 %51, %47
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %54, i8* %55, align 1, !tbaa !1282
  %56 = add i64 %26, 1176
  %57 = inttoptr i64 %27 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %6, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %26, 1184
  store i64 %61, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_40b680_CreateEmptyTree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40b680:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %18 = load i64, i64* %16, align 8
  %19 = load i64, i64* %15, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21
  store i64 %20, i64* %16, align 8, !tbaa !1240
  %22 = add i64 %19, -56
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 104, i64* %17, align 8, !tbaa !1240
  %29 = add i64 %19, -20
  %30 = load i32, i32* %9, align 4
  %31 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %31
  %32 = add i64 %19, -24
  %33 = load i32, i32* %7, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = add i64 %19, -28
  %36 = load i32, i32* %5, align 4
  %37 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %37
  %38 = add i64 %19, -40
  %39 = load i64, i64* %11, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %40
  store i64 104, i64* %14, align 8, !tbaa !1240
  %41 = add i64 %1, 37
  %42 = add i64 %19, -64
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %45 = inttoptr i64 %42 to i64*
  %46 = load i64, i64* %45
  store i64 %22, i64* %15, align 8, !alias.scope !2263, !noalias !2266
  %47 = tail call i64 @malloc(i64 104)
  %48 = load i64, i64* %16, align 8
  %49 = add i64 %48, -40
  %50 = inttoptr i64 %49 to i64*
  store i64 %47, i64* %50
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51
  %53 = icmp eq i64 %52, 0
  %54 = select i1 %53, i64 15, i64 28
  %55 = add i64 %46, %54
  br i1 %53, label %block_40b6b4, label %block_40b6c1

block_40b818:                                     ; preds = %block_40b6b4, %block_40b803, %block_40b810, %block_40b7d3
  %56 = phi i64 [ %206, %block_40b810 ], [ %206, %block_40b803 ], [ %176, %block_40b7d3 ], [ %48, %block_40b6b4 ]
  %57 = phi %struct.Memory* [ %92, %block_40b810 ], [ %92, %block_40b803 ], [ %92, %block_40b7d3 ], [ %2, %block_40b6b4 ]
  %58 = add i64 %56, -8
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %10, align 8, !tbaa !1240
  %61 = load i64, i64* %15, align 8
  %62 = add i64 %61, 48
  %63 = icmp ugt i64 %61, -49
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %23, align 1, !tbaa !1264
  %65 = trunc i64 %62 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #10
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %24, align 1, !tbaa !1278
  %71 = xor i64 %61, 16
  %72 = xor i64 %71, %62
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !1279
  %76 = icmp eq i64 %62, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %26, align 1, !tbaa !1280
  %78 = lshr i64 %62, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %27, align 1, !tbaa !1281
  %80 = lshr i64 %61, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %28, align 1, !tbaa !1282
  %85 = add i64 %61, 56
  %86 = inttoptr i64 %62 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %16, align 8, !tbaa !1240
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %3, align 8, !tbaa !1240
  %90 = add i64 %61, 64
  store i64 %90, i64* %15, align 8, !tbaa !1240
  ret %struct.Memory* %57

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %block_40b6c1, %block_40b728
  %91 = phi i64 [ %197, %block_40b728 ], [ %261, %block_40b6c1 ]
  %92 = phi %struct.Memory* [ %2, %block_40b728 ], [ %2, %block_40b6c1 ]
  store i64 512, i64* %14, align 8, !tbaa !1240
  %93 = add i64 %262, -20
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = add i64 %262, -40
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %98, 52
  %100 = inttoptr i64 %99 to i32*
  store i32 %95, i32* %100
  %101 = inttoptr i64 %96 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %102, 60
  %104 = inttoptr i64 %103 to i32*
  store i32 0, i32* %104
  %105 = add i64 %262, -12
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106
  %108 = shl i32 %107, 2
  %109 = add i64 %262, -16
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110
  %112 = shl i32 %111, 3
  %113 = add i32 %112, %108
  %114 = load i64, i64* %16, align 8
  %115 = add i64 %114, -40
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %117, 48
  %119 = inttoptr i64 %118 to i32*
  store i32 %113, i32* %119
  %120 = inttoptr i64 %115 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %121, 32
  %123 = inttoptr i64 %122 to i64*
  store i64 0, i64* %123
  %124 = inttoptr i64 %115 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %125, 52
  %127 = inttoptr i64 %126 to i32*
  %128 = load i32, i32* %127
  %129 = add i64 %125, 44
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130
  %132 = udiv i32 %128, %131
  %133 = urem i32 %128, %131
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %12, align 8, !tbaa !1240
  %135 = add i64 %114, -40
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %137, 68
  %139 = inttoptr i64 %138 to i32*
  store i32 %132, i32* %139
  %140 = inttoptr i64 %135 to i64*
  %141 = load i64, i64* %140
  %142 = add i64 %141, 68
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = add i64 %141, 64
  %146 = inttoptr i64 %145 to i32*
  store i32 %144, i32* %146
  %147 = add i64 %114, -12
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148
  %150 = inttoptr i64 %135 to i64*
  %151 = load i64, i64* %150
  %152 = add i64 %151, 72
  %153 = inttoptr i64 %152 to i32*
  store i32 %149, i32* %153
  %154 = add i64 %114, -16
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = inttoptr i64 %135 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %158, 76
  %160 = inttoptr i64 %159 to i32*
  store i32 %156, i32* %160
  %161 = add i64 %114, -32
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162
  %164 = inttoptr i64 %135 to i64*
  %165 = load i64, i64* %164
  store i64 %165, i64* %13, align 8, !tbaa !1240
  %166 = add i64 %165, 96
  %167 = inttoptr i64 %166 to i64*
  store i64 %163, i64* %167
  %168 = add i64 %91, 135
  %169 = load i64, i64* %15, align 8, !tbaa !1240
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %168, i64* %171
  %172 = load i64, i64* %44, align 8, !alias.scope !2268, !noalias !2271
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %169, i64* %15, align 8, !alias.scope !2268, !noalias !2271
  %175 = tail call i64 @malloc(i64 %172)
  %176 = load i64, i64* %16, align 8
  %177 = add i64 %176, -40
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  store i64 %179, i64* %11, align 8, !tbaa !1240
  %180 = add i64 %179, 88
  %181 = inttoptr i64 %180 to i64*
  store i64 %175, i64* %181
  %182 = inttoptr i64 %177 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %183, 88
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = icmp eq i64 %186, 0
  %188 = select i1 %187, i64 23, i64 36
  %189 = add i64 %174, %188
  br i1 %187, label %block_40b7d3, label %block_40b7e0

block_40b728:                                     ; preds = %block_40b6c1
  %190 = add i64 %262, -40
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %192, 44
  %194 = inttoptr i64 %193 to i32*
  %195 = load i32, i32* %194
  %196 = add i32 %195, 4
  %197 = add i64 %261, 13
  %198 = inttoptr i64 %193 to i32*
  store i32 %196, i32* %198
  br label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

block_40b7d3:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %199 = add i64 %176, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 0, i64* %200
  br label %block_40b818

block_40b7e0:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %201 = add i64 %189, 12
  %202 = load i64, i64* %15, align 8, !tbaa !1240
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204
  store i64 %202, i64* %15, align 8, !alias.scope !2273, !noalias !2276
  %205 = tail call i64 @malloc(i64 256)
  %206 = load i64, i64* %16, align 8
  %207 = add i64 %206, -40
  %208 = inttoptr i64 %207 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %14, align 8, !tbaa !1240
  %210 = add i64 %209, 80
  %211 = inttoptr i64 %210 to i64*
  store i64 %205, i64* %211
  %212 = inttoptr i64 %207 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %213, 80
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %block_40b803, label %block_40b810

block_40b810:                                     ; preds = %block_40b7e0
  %218 = add i64 %206, -8
  %219 = inttoptr i64 %218 to i64*
  store i64 %213, i64* %219
  br label %block_40b818

block_40b803:                                     ; preds = %block_40b7e0
  %220 = add i64 %206, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 0, i64* %221
  br label %block_40b818

block_40b6b4:                                     ; preds = %block_40b680
  %222 = add i64 %48, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 0, i64* %223
  br label %block_40b818

block_40b6c1:                                     ; preds = %block_40b680
  %224 = inttoptr i64 %52 to i64*
  store i64 0, i64* %224
  %225 = inttoptr i64 %49 to i64*
  %226 = load i64, i64* %225
  %227 = add i64 %226, 8
  %228 = inttoptr i64 %227 to i64*
  store i64 0, i64* %228
  %229 = inttoptr i64 %49 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %230, 40
  %232 = inttoptr i64 %231 to i32*
  store i32 0, i32* %232
  %233 = inttoptr i64 %49 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %234, 56
  %236 = inttoptr i64 %235 to i32*
  store i32 0, i32* %236
  %237 = add i64 %48, -12
  %238 = inttoptr i64 %237 to i32*
  %239 = load i32, i32* %238
  %240 = shl i32 %239, 2
  %241 = add i32 %240, 28
  %242 = load i64, i64* %16, align 8
  %243 = add i64 %242, -16
  %244 = inttoptr i64 %243 to i32*
  %245 = load i32, i32* %244
  %246 = shl i32 %245, 3
  %247 = add i32 %241, %246
  %248 = add i64 %242, -40
  %249 = inttoptr i64 %248 to i64*
  %250 = load i64, i64* %249
  %251 = add i64 %250, 44
  %252 = inttoptr i64 %251 to i32*
  store i32 %247, i32* %252
  %253 = inttoptr i64 %248 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %254, 44
  %256 = inttoptr i64 %255 to i32*
  %257 = load i32, i32* %256
  %258 = and i32 %257, 7
  %259 = icmp eq i32 %258, 0
  %260 = select i1 %259, i64 116, i64 103
  %261 = add i64 %55, %260
  %262 = load i64, i64* %16, align 8
  br i1 %259, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, label %block_40b728
}

; Function Attrs: noinline
define %struct.Memory* @sub_4093e0_d32v(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4093e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %13, align 8, !tbaa !1240
  %18 = add i64 %15, -40
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -16
  %26 = load i64, i64* %11, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %15, -24
  %29 = load i64, i64* %10, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %15, -28
  %32 = load i32, i32* %6, align 4
  %33 = inttoptr i64 %31 to i32*
  store i32 %32, i32* %33
  %34 = load i64, i64* @stderr
  store i64 %34, i64* %11, align 8, !tbaa !1240
  %35 = inttoptr i64 %25 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %9, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5169), i64* %10, align 8, !tbaa !1240
  %37 = add i64 %1, 51
  %38 = add i64 %15, -48
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %43 = load i64, i64* %40, align 8, !alias.scope !2278, !noalias !2281
  %44 = load i64, i64* %41, align 8, !alias.scope !2278, !noalias !2281
  %45 = load i64, i64* %42, align 8, !alias.scope !2278, !noalias !2281
  %46 = inttoptr i64 %18 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %15, -32
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %15, -24
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %15, -16
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %15, -8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = inttoptr i64 %15 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %15, 8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = add i64 %15, 16
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  %68 = add i64 %15, 24
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  %71 = add i64 %15, 32
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  %74 = inttoptr i64 %38 to i64*
  %75 = load i64, i64* %74
  store i64 %18, i64* %12, align 8, !alias.scope !2278, !noalias !2281
  %76 = tail call i64 @fprintf(i64 %34, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5169), i64 %36, i64 %43, i64 %44, i64 %45, i64 %47, i64 %50, i64 %53, i64 %56, i64 %59, i64 %61, i64 %64, i64 %67, i64 %70, i64 %73), !noalias !2278
  %77 = load i64, i64* %13, align 8
  %78 = add i64 %77, -24
  %79 = inttoptr i64 %78 to i32*
  store i32 0, i32* %79
  %80 = add i64 %77, -28
  %81 = trunc i64 %76 to i32
  %82 = add i64 %75, 10
  %83 = inttoptr i64 %80 to i32*
  store i32 %81, i32* %83
  %84 = load i64, i64* %41, align 8
  %85 = load i64, i64* %42, align 8
  %86 = load i64, i64* %13, align 8
  %87 = add i64 %86, -32
  %88 = add i64 %86, -24
  br label %block_40941d

block_40945f:                                     ; preds = %block_40941d
  %89 = load i64, i64* %12, align 8
  %90 = add i64 %89, 32
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %19, align 1, !tbaa !1264
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !1278
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %21, align 1, !tbaa !1279
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %22, align 1, !tbaa !1280
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %23, align 1, !tbaa !1281
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %24, align 1, !tbaa !1282
  %112 = add i64 %89, 40
  %113 = inttoptr i64 %90 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %13, align 8, !tbaa !1240
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %3, align 8, !tbaa !1240
  %117 = add i64 %89, 48
  store i64 %117, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %120

block_40941d:                                     ; preds = %block_409429, %block_4093e0
  %118 = phi i64 [ %82, %block_4093e0 ], [ %182, %block_409429 ]
  %119 = phi i64 [ %77, %block_4093e0 ], [ %86, %block_409429 ]
  %120 = phi %struct.Memory* [ %2, %block_4093e0 ], [ %120, %block_409429 ]
  %121 = add i64 %119, -24
  %122 = inttoptr i64 %121 to i32*
  %123 = load i32, i32* %122
  %124 = zext i32 %123 to i64
  store i64 %124, i64* %7, align 8, !tbaa !1240
  %125 = add i64 %119, -20
  %126 = inttoptr i64 %125 to i32*
  %127 = load i32, i32* %126
  %128 = icmp ult i32 %123, %127
  %129 = select i1 %128, i64 12, i64 66
  %130 = add i64 %118, %129
  br i1 %128, label %block_409429, label %block_40945f

block_409429:                                     ; preds = %block_40941d
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5174), i64* %10, align 8, !tbaa !1240
  %131 = load i64, i64* @stderr
  store i64 %131, i64* %11, align 8, !tbaa !1240
  %132 = add i64 %119, -16
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133
  store i64 %124, i64* %8, align 8, !tbaa !1240
  %135 = shl nuw nsw i64 %124, 2
  %136 = add i64 %134, %135
  %137 = inttoptr i64 %136 to i32*
  %138 = load i32, i32* %137
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %9, align 8, !tbaa !1240
  %140 = add i64 %130, 37
  %141 = load i64, i64* %12, align 8, !tbaa !1240
  %142 = add i64 %141, -8
  %143 = inttoptr i64 %142 to i64*
  store i64 %140, i64* %143
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %141, 8
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  %149 = add i64 %141, 16
  %150 = inttoptr i64 %149 to i64*
  %151 = load i64, i64* %150
  %152 = add i64 %141, 24
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %141, 32
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  %158 = add i64 %141, 40
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159
  %161 = add i64 %141, 48
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %141, 56
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %141, 64
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %141, 72
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = inttoptr i64 %142 to i64*
  %174 = load i64, i64* %173
  store i64 %141, i64* %12, align 8, !alias.scope !2283, !noalias !2286
  %175 = tail call i64 @fprintf(i64 %131, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5174), i64 %139, i64 %124, i64 %84, i64 %85, i64 %145, i64 %148, i64 %151, i64 %154, i64 %157, i64 %160, i64 %163, i64 %166, i64 %169, i64 %172), !noalias !2283
  %176 = trunc i64 %175 to i32
  %177 = inttoptr i64 %87 to i32*
  store i32 %176, i32* %177
  %178 = inttoptr i64 %88 to i32*
  %179 = load i32, i32* %178
  %180 = add i32 %179, 1
  %181 = inttoptr i64 %88 to i32*
  store i32 %180, i32* %181
  %182 = add i64 %174, -49
  br label %block_40941d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401bd0_CompareSizesByValue(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_401bd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  %13 = add i64 %10, -16
  %14 = load i64, i64* %6, align 8
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = add i64 %10, -24
  %17 = load i64, i64* %5, align 8
  %18 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %18
  %19 = inttoptr i64 %13 to i64*
  %20 = load i64, i64* %19
  %21 = add i64 %10, -32
  %22 = inttoptr i64 %21 to i64*
  store i64 %20, i64* %22
  %23 = add i64 %10, -24
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %10, -40
  %27 = inttoptr i64 %26 to i64*
  store i64 %25, i64* %27
  %28 = add i64 %10, -44
  %29 = inttoptr i64 %28 to i32*
  store i32 0, i32* %29
  %30 = inttoptr i64 %21 to i64*
  %31 = load i64, i64* %30
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32
  %34 = inttoptr i64 %26 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %6, align 8, !tbaa !1240
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = sub i64 %33, %37
  store i64 %38, i64* %5, align 8, !tbaa !1240
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = trunc i64 %38 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) #10
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %48 = icmp eq i64 %38, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = lshr i64 %38, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %39, align 1, !tbaa !1264
  store i8 %45, i8* %46, align 1, !tbaa !1278
  store i8 0, i8* %47, align 1, !tbaa !1279
  store i8 %49, i8* %50, align 1, !tbaa !1280
  store i8 %52, i8* %53, align 1, !tbaa !1281
  store i8 0, i8* %54, align 1, !tbaa !1282
  %55 = icmp ne i8 %52, 0
  %56 = or i1 %48, %55
  br i1 %56, label %block_401c17, label %block_401c3b.sink.split

block_401c3b.sink.split:                          ; preds = %block_401c17, %block_401bd0
  %57 = phi i32 [ 1, %block_401bd0 ], [ -1, %block_401c17 ]
  %58 = inttoptr i64 %28 to i32*
  store i32 %57, i32* %58
  br label %block_401c3b

block_401c3b:                                     ; preds = %block_401c17, %block_401c3b.sink.split
  %59 = phi %struct.Memory* [ %2, %block_401c17 ], [ %2, %block_401c3b.sink.split ]
  %60 = inttoptr i64 %28 to i32*
  %61 = load i32, i32* %60
  %62 = zext i32 %61 to i64
  store i64 %62, i64* %4, align 8, !tbaa !1240
  %63 = inttoptr i64 %11 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %10 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %3, align 8, !tbaa !1240
  %67 = add i64 %10, 8
  store i64 %67, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %59

block_401c17:                                     ; preds = %block_401bd0
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 %35, i64* %68, align 8, !tbaa !1240
  store i8 0, i8* %39, align 1, !tbaa !1264
  store i8 %45, i8* %46, align 1, !tbaa !1278
  store i8 0, i8* %47, align 1, !tbaa !1279
  store i8 %49, i8* %50, align 1, !tbaa !1280
  store i8 %52, i8* %53, align 1, !tbaa !1281
  store i8 0, i8* %54, align 1, !tbaa !1282
  br i1 %55, label %block_401c3b.sink.split, label %block_401c3b
}

; Function Attrs: noinline
define %struct.Memory* @sub_4065f0_ReadSubChunk(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4065f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %18 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %24 = load i64, i64* %20, align 8
  %25 = load i64, i64* %19, align 8, !tbaa !1240
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27
  store i64 %26, i64* %20, align 8, !tbaa !1240
  %28 = add i64 %25, -56
  store i64 %28, i64* %19, align 8, !tbaa !1240
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %35 = add i64 %25, 8
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %14, align 8, !tbaa !1240
  %38 = add i64 %25, -12
  %39 = load i32, i32* %11, align 4
  %40 = inttoptr i64 %38 to i32*
  store i32 %39, i32* %40
  %41 = add i64 %25, -24
  %42 = load i64, i64* %17, align 8
  %43 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %43
  %44 = add i64 %25, -28
  %45 = load i32, i32* %9, align 4
  %46 = inttoptr i64 %44 to i32*
  store i32 %45, i32* %46
  %47 = add i64 %25, -32
  %48 = load i32, i32* %7, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %25, -36
  %51 = load i32, i32* %13, align 4
  %52 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %52
  %53 = add i64 %25, -48
  %54 = load i64, i64* %22, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %55
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  %58 = inttoptr i64 %47 to i32*
  %59 = load i32, i32* %58
  %60 = zext i32 %59 to i64
  store i64 %60, i64* %15, align 8, !tbaa !1240
  %61 = zext i32 %59 to i64
  %62 = mul nuw nsw i64 %61, 24
  store i64 %62, i64* %22, align 8, !tbaa !1240
  %63 = add i64 %62, %57
  store i64 %63, i64* %17, align 8, !tbaa !1240
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64
  %66 = icmp eq i32 %65, 0
  %67 = load i64, i64* %20, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %14, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %70
  %71 = select i1 %66, i64 478, i64 63
  %72 = add i64 %71, %1
  br i1 %66, label %block_4067ce, label %block_40662f

block_40662f:                                     ; preds = %block_4065f0
  %73 = add i64 %67, -40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %67, -24
  %77 = inttoptr i64 %76 to i32*
  %78 = load i32, i32* %77
  %79 = zext i32 %78 to i64
  %80 = mul nuw nsw i64 %79, 24
  %81 = add i64 %80, %75
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i64 %67, -28
  %85 = inttoptr i64 %84 to i32*
  %86 = load i32, i32* %85
  %87 = icmp ult i32 %83, %86
  %88 = select i1 %87, i64 27, i64 249
  %89 = add i64 %72, %88
  %90 = load i64, i64* %20, align 8
  %91 = add i64 %90, -16
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %18, align 8, !tbaa !1240
  %94 = add i64 %90, -24
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = add i64 %90, -28
  %98 = inttoptr i64 %97 to i32*
  %99 = load i32, i32* %98
  %100 = sext i32 %96 to i64
  %101 = sext i32 %99 to i64
  %102 = mul nsw i64 %101, %100
  %103 = and i64 %102, 4294967295
  store i64 %103, i64* %14, align 8, !tbaa !1240
  br i1 %87, label %block_40664a, label %block_406728

block_4067ce:                                     ; preds = %block_4067c9, %block_4065f0
  %104 = phi %struct.Memory* [ %2, %block_4065f0 ], [ %268, %block_4067c9 ]
  %105 = load i64, i64* %19, align 8
  %106 = add i64 %105, 48
  %107 = icmp ugt i64 %105, -49
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %29, align 1, !tbaa !1264
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #10
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %30, align 1, !tbaa !1278
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %31, align 1, !tbaa !1279
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %32, align 1, !tbaa !1280
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %33, align 1, !tbaa !1281
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = add nuw nsw i64 %125, %122
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %34, align 1, !tbaa !1282
  %129 = add i64 %105, 56
  %130 = inttoptr i64 %106 to i64*
  %131 = load i64, i64* %130
  store i64 %131, i64* %20, align 8, !tbaa !1240
  %132 = inttoptr i64 %129 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %3, align 8, !tbaa !1240
  %134 = add i64 %105, 64
  store i64 %134, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %104

block_40664a:                                     ; preds = %block_40662f
  %135 = add i64 %90, -40
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = zext i32 %96 to i64
  %139 = mul nuw nsw i64 %138, 24
  %140 = add i64 %139, %137
  %141 = inttoptr i64 %140 to i32*
  %142 = load i32, i32* %141
  %143 = sub i32 %99, %142
  %144 = load i64, i64* %14, align 8
  %145 = trunc i64 %144 to i32
  %146 = add i32 %143, %145
  %147 = load i64, i64* %20, align 8
  %148 = add i64 %147, -20
  %149 = inttoptr i64 %148 to i32*
  %150 = load i32, i32* %149
  %151 = sext i32 %146 to i64
  %152 = sext i32 %150 to i64
  %153 = mul nsw i64 %152, %151
  %154 = and i64 %153, 4294967295
  store i64 %154, i64* %14, align 8, !tbaa !1240
  %155 = add i64 %147, 16
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %16, align 8, !tbaa !1240
  %158 = add i64 %147, -4
  %159 = inttoptr i64 %158 to i32*
  %160 = load i32, i32* %159
  %161 = zext i32 %160 to i64
  store i64 %161, i64* %15, align 8, !tbaa !1240
  %162 = add i64 %147, -40
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  %165 = add i64 %147, -24
  %166 = inttoptr i64 %165 to i32*
  %167 = load i32, i32* %166
  %168 = zext i32 %167 to i64
  %169 = mul nuw nsw i64 %168, 24
  %170 = add i64 %169, %164
  %171 = add i64 %170, 8
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %21, align 8, !tbaa !1240
  %174 = load i64, i64* %20, align 8
  %175 = add i64 %174, -40
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %174, -24
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179
  %181 = zext i32 %180 to i64
  %182 = mul nuw nsw i64 %181, 24
  store i64 %182, i64* %23, align 8, !tbaa !1240
  %183 = add i64 %182, %177
  %184 = inttoptr i64 %183 to i32*
  %185 = load i32, i32* %184
  %186 = zext i32 %185 to i64
  store i64 %186, i64* %22, align 8, !tbaa !1240
  %187 = load i32, i32* %5, align 4
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %17, align 8, !tbaa !1240
  %189 = add i64 %89, -266
  %190 = add i64 %89, 94
  %191 = load i64, i64* %19, align 8, !tbaa !1240
  %192 = add i64 %191, -8
  %193 = inttoptr i64 %192 to i64*
  store i64 %190, i64* %193
  store i64 %192, i64* %19, align 8, !tbaa !1240
  %194 = tail call %struct.Memory* @sub_406540_SeekAndReadNextSubChunk(%struct.State* nonnull %0, i64 %189, %struct.Memory* %2)
  %195 = load i64, i64* %20, align 8
  %196 = add i64 %195, -28
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = add i64 %195, -40
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %195, -24
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203
  %205 = zext i32 %204 to i64
  %206 = mul nuw nsw i64 %205, 24
  %207 = add i64 %206, %201
  %208 = inttoptr i64 %207 to i32*
  %209 = load i32, i32* %208
  %210 = sub i32 %198, %209
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %14, align 8, !tbaa !1240
  %212 = load i64, i64* %20, align 8
  %213 = add i64 %212, -40
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = add i64 %212, -24
  %217 = inttoptr i64 %216 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  %220 = mul nuw nsw i64 %219, 24
  %221 = add i64 %220, %215
  %222 = add i64 %221, 16
  %223 = load i32, i32* %5, align 4
  %224 = inttoptr i64 %222 to i32*
  store i32 %223, i32* %224
  %225 = inttoptr i64 %213 to i64*
  %226 = load i64, i64* %225
  %227 = inttoptr i64 %216 to i32*
  %228 = load i32, i32* %227
  %229 = zext i32 %228 to i64
  %230 = mul nuw nsw i64 %229, 24
  %231 = add i64 %230, %226
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232
  %234 = load i64, i64* %20, align 8
  %235 = add i64 %234, -40
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %234, -24
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239
  %241 = zext i32 %240 to i64
  store i64 %241, i64* %15, align 8, !tbaa !1240
  %242 = zext i32 %240 to i64
  %243 = mul nuw nsw i64 %242, 24
  %244 = add i64 %243, %237
  %245 = add i64 %244, 20
  %246 = inttoptr i64 %245 to i32*
  store i32 %233, i32* %246
  %247 = inttoptr i64 %235 to i64*
  %248 = load i64, i64* %247
  %249 = inttoptr i64 %238 to i32*
  %250 = load i32, i32* %249
  %251 = zext i32 %250 to i64
  %252 = mul nuw nsw i64 %251, 24
  %253 = add i64 %252, %248
  %254 = inttoptr i64 %253 to i32*
  store i32 0, i32* %254
  %255 = load i64, i64* %20, align 8
  %256 = add i64 %255, -40
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  %259 = add i64 %255, -24
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %14, align 8, !tbaa !1240
  %263 = zext i32 %261 to i64
  %264 = mul nuw nsw i64 %263, 24
  store i64 %264, i64* %18, align 8, !tbaa !1240
  %265 = add i64 %264, %258
  store i64 %265, i64* %16, align 8, !tbaa !1240
  %266 = add i64 %265, 8
  %267 = inttoptr i64 %266 to i64*
  store i64 -1, i64* %267
  br label %block_4067c9

block_4067c9:                                     ; preds = %block_406728, %block_40664a
  %268 = phi %struct.Memory* [ %305, %block_406728 ], [ %194, %block_40664a ]
  br label %block_4067ce

block_406728:                                     ; preds = %block_40662f
  %269 = add i64 %90, -20
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  %272 = shl i64 %102, 32
  %273 = ashr exact i64 %272, 32
  %274 = sext i32 %271 to i64
  %275 = mul nsw i64 %274, %273
  %276 = and i64 %275, 4294967295
  store i64 %276, i64* %14, align 8, !tbaa !1240
  %277 = add i64 %90, 16
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %16, align 8, !tbaa !1240
  %280 = add i64 %90, -4
  %281 = inttoptr i64 %280 to i32*
  %282 = load i32, i32* %281
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %15, align 8, !tbaa !1240
  %284 = add i64 %90, -40
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = zext i32 %96 to i64
  %288 = mul nuw nsw i64 %287, 24
  %289 = add i64 %288, %286
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %21, align 8, !tbaa !1240
  %293 = load i64, i64* %20, align 8
  %294 = add i64 %293, -28
  %295 = inttoptr i64 %294 to i32*
  %296 = load i32, i32* %295
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %22, align 8, !tbaa !1240
  %298 = load i32, i32* %5, align 4
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %17, align 8, !tbaa !1240
  %300 = add i64 %89, -488
  %301 = add i64 %89, 55
  %302 = load i64, i64* %19, align 8, !tbaa !1240
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %301, i64* %304
  store i64 %303, i64* %19, align 8, !tbaa !1240
  %305 = tail call %struct.Memory* @sub_406540_SeekAndReadNextSubChunk(%struct.State* nonnull %0, i64 %300, %struct.Memory* %2)
  %306 = load i64, i64* %20, align 8
  %307 = add i64 %306, -40
  %308 = inttoptr i64 %307 to i64*
  %309 = load i64, i64* %308
  %310 = add i64 %306, -24
  %311 = inttoptr i64 %310 to i32*
  %312 = load i32, i32* %311
  %313 = zext i32 %312 to i64
  %314 = mul nuw nsw i64 %313, 24
  %315 = add i64 %314, %309
  %316 = add i64 %315, 16
  %317 = inttoptr i64 %316 to i32*
  store i32 0, i32* %317
  %318 = add i64 %306, -28
  %319 = inttoptr i64 %318 to i32*
  %320 = load i32, i32* %319
  %321 = inttoptr i64 %307 to i64*
  %322 = load i64, i64* %321
  %323 = inttoptr i64 %310 to i32*
  %324 = load i32, i32* %323
  %325 = zext i32 %324 to i64
  %326 = mul nuw nsw i64 %325, 24
  %327 = add i64 %326, %322
  %328 = add i64 %327, 20
  %329 = inttoptr i64 %328 to i32*
  store i32 %320, i32* %329
  %330 = load i64, i64* %20, align 8
  %331 = add i64 %330, -28
  %332 = inttoptr i64 %331 to i32*
  %333 = load i32, i32* %332
  %334 = add i64 %330, -40
  %335 = inttoptr i64 %334 to i64*
  %336 = load i64, i64* %335
  %337 = add i64 %330, -24
  %338 = inttoptr i64 %337 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  %341 = mul nuw nsw i64 %340, 24
  %342 = add i64 %341, %336
  %343 = inttoptr i64 %342 to i32*
  %344 = load i32, i32* %343
  %345 = sub i32 %344, %333
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %15, align 8, !tbaa !1240
  %347 = inttoptr i64 %342 to i32*
  store i32 %345, i32* %347
  %348 = load i64, i64* %20, align 8
  %349 = add i64 %348, -28
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = add i64 %348, -4
  %353 = inttoptr i64 %352 to i32*
  %354 = load i32, i32* %353
  %355 = sext i32 %351 to i64
  %356 = sext i32 %354 to i64
  %357 = mul nsw i64 %356, %355
  %358 = and i64 %357, 4294967295
  %359 = add i64 %348, -40
  %360 = inttoptr i64 %359 to i64*
  %361 = load i64, i64* %360
  %362 = add i64 %348, -24
  %363 = inttoptr i64 %362 to i32*
  %364 = load i32, i32* %363
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %14, align 8, !tbaa !1240
  %366 = zext i32 %364 to i64
  %367 = mul nuw nsw i64 %366, 24
  store i64 %367, i64* %21, align 8, !tbaa !1240
  %368 = add i64 %367, %361
  store i64 %368, i64* %18, align 8, !tbaa !1240
  %369 = add i64 %368, 8
  %370 = inttoptr i64 %369 to i64*
  %371 = load i64, i64* %370
  %372 = add i64 %371, %358
  store i64 %372, i64* %16, align 8, !tbaa !1240
  %373 = inttoptr i64 %369 to i64*
  store i64 %372, i64* %373
  br label %block_4067c9
}

; Function Attrs: noinline
define %struct.Memory* @sub_40256b(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %19, align 8, !alias.scope !2288, !noalias !2291
  %24 = add i64 %1, 35
  br label %block_40256b

block_4025f5:                                     ; preds = %block_40255a
  br label %block_40269c.backedge

block_402673:                                     ; preds = %block_40255a
  %25 = inttoptr i64 %493 to i64*
  %26 = load i64, i64* %25
  %27 = add i64 %489, -24
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  %30 = add i64 %29, 40
  %31 = load i64, i64* %11, align 8, !tbaa !1240
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 4204182, i64* %33
  %34 = load i64, i64* %20, align 8, !alias.scope !2293, !noalias !2296
  %35 = load i64, i64* %21, align 8, !alias.scope !2293, !noalias !2296
  %36 = inttoptr i64 %31 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %31, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %31, 16
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %31, 24
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %31, 32
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %31, 40
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %31, 48
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %31, 56
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %31, 64
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %31, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = inttoptr i64 %32 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %4, align 8, !alias.scope !2293, !noalias !2296
  store i64 %31, i64* %11, align 8, !alias.scope !2293, !noalias !2296
  %67 = tail call i64 @__isoc99_sscanf(i64 %26, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %30, i64 4204147, i64 %34, i64 %35, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49, i64 %52, i64 %55, i64 %58, i64 %61, i64 %64), !noalias !2293
  %68 = load i64, i64* %12, align 8
  %69 = add i64 %68, -1144
  %70 = trunc i64 %67 to i32
  %71 = load i64, i64* %4, align 8
  %72 = add i64 %71, 6
  %73 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %73
  br label %block_40269c.backedge

block_40256b.loopexit:                            ; preds = %block_40255a
  br label %block_40256b

block_40256b:                                     ; preds = %block_40256b.loopexit, %3
  %74 = phi i64 [ %23, %3 ], [ 4203883, %block_40256b.loopexit ]
  %75 = phi i64 [ %22, %3 ], [ %489, %block_40256b.loopexit ]
  %76 = phi i64 [ %24, %3 ], [ 4203918, %block_40256b.loopexit ]
  %77 = phi %struct.Memory* [ %2, %3 ], [ %223, %block_40256b.loopexit ]
  %78 = add i64 %75, -1096
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = add i64 %75, -24
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82
  %84 = add i64 %83, 4
  %85 = load i64, i64* %11, align 8, !tbaa !1240
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %76, i64* %87
  %88 = load i64, i64* %20, align 8, !alias.scope !2288, !noalias !2291
  %89 = load i64, i64* %21, align 8, !alias.scope !2288, !noalias !2291
  %90 = inttoptr i64 %85 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %85, 8
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  %95 = add i64 %85, 16
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  %98 = add i64 %85, 24
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %85, 32
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %85, 40
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %85, 48
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  %110 = add i64 %85, 56
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = add i64 %85, 64
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %85, 72
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = inttoptr i64 %86 to i64*
  %120 = load i64, i64* %119
  store i64 %120, i64* %4, align 8, !alias.scope !2288, !noalias !2291
  store i64 %85, i64* %11, align 8, !alias.scope !2288, !noalias !2291
  %121 = tail call i64 @__isoc99_sscanf(i64 %80, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %84, i64 %74, i64 %88, i64 %89, i64 %91, i64 %94, i64 %97, i64 %100, i64 %103, i64 %106, i64 %109, i64 %112, i64 %115, i64 %118), !noalias !2288
  %122 = load i64, i64* %12, align 8
  %123 = add i64 %122, -1124
  %124 = trunc i64 %121 to i32
  %125 = load i64, i64* %4, align 8
  %126 = inttoptr i64 %123 to i32*
  store i32 %124, i32* %126
  %127 = add i64 %125, 270
  br label %block_40269c

block_402778:                                     ; preds = %block_402719
  %128 = add i64 %192, -24
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %130, 4
  %132 = inttoptr i64 %131 to i32*
  store i32 15, i32* %132
  %133 = inttoptr i64 %128 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %135 to i32*
  store i32 1, i32* %136
  %137 = inttoptr i64 %128 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %138, 16
  %140 = inttoptr i64 %139 to i64*
  store i64 1000000, i64* %140
  br label %block_4027c1

block_4026e4:                                     ; preds = %block_4026d0
  %141 = add i64 %622, -1064
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %621, 12
  %145 = load i64, i64* %11, align 8, !tbaa !1240
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %144, i64* %147
  %148 = inttoptr i64 %146 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %4, align 8, !alias.scope !2298, !noalias !2301
  store i64 %145, i64* %11, align 8, !alias.scope !2298, !noalias !2301
  %150 = tail call i64 @fclose(i64 %143), !noalias !2298
  %151 = load i64, i64* %12, align 8
  %152 = add i64 %151, -24
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %154, 40
  %156 = inttoptr i64 %155 to i8*
  %157 = load i8, i8* %156
  %158 = sext i8 %157 to i32
  %159 = add nsw i32 %158, -65
  %160 = zext i32 %159 to i64
  %161 = lshr i32 %159, 31
  store i64 %160, i64* %10, align 8, !tbaa !1240
  %162 = add nsw i32 %158, -87
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %7, align 8, !tbaa !1240
  %164 = icmp ult i32 %159, 22
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %13, align 1, !tbaa !1264
  %166 = and i32 %162, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166) #10
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %14, align 1, !tbaa !1278
  %171 = xor i32 %159, 16
  %172 = xor i32 %171, %162
  %173 = lshr i32 %172, 4
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %15, align 1, !tbaa !1279
  %176 = icmp eq i32 %162, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %16, align 1, !tbaa !1280
  %178 = lshr i32 %162, 31
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %17, align 1, !tbaa !1281
  %180 = xor i32 %178, %161
  %181 = add nuw nsw i32 %180, %161
  %182 = icmp eq i32 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %18, align 1, !tbaa !1282
  %184 = add i64 %151, -1148
  %185 = trunc i64 %150 to i32
  %186 = inttoptr i64 %184 to i32*
  store i32 %185, i32* %186
  %187 = add i64 %151, -1160
  %188 = inttoptr i64 %187 to i64*
  store i64 %160, i64* %188
  %189 = add i64 %151, -1164
  %190 = inttoptr i64 %189 to i32*
  store i32 %162, i32* %190
  %191 = or i1 %176, %164
  %192 = load i64, i64* %12, align 8
  br i1 %191, label %block_402719, label %block_4027c1

block_4024ff:                                     ; preds = %block_4024da
  %193 = load i64, i64* %12, align 8
  %194 = add i64 %193, -1056
  %195 = add i64 %193, -1088
  %196 = inttoptr i64 %195 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %9, align 8, !tbaa !1240
  %198 = add i64 %220, 19
  %199 = load i64, i64* %11, align 8, !tbaa !1240
  %200 = add i64 %199, -8
  %201 = inttoptr i64 %200 to i64*
  store i64 %198, i64* %201
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %4, align 8, !alias.scope !2303, !noalias !2306
  store i64 %199, i64* %11, align 8, !alias.scope !2303, !noalias !2306
  %204 = tail call i64 @strstr(i64 %194, i64 %197)
  %205 = load i64, i64* %4, align 8
  %206 = icmp eq i64 %204, 0
  %207 = select i1 %206, i64 399, i64 10
  %208 = add i64 %205, %207
  br i1 %206, label %block_4026a6, label %block_40251c

block_4024da:                                     ; preds = %block_4024cc
  %209 = add i64 %222, -1056
  %210 = add i64 %229, 22
  %211 = load i64, i64* %11, align 8, !tbaa !1240
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213
  %214 = inttoptr i64 %212 to i64*
  %215 = load i64, i64* %214
  store i64 %215, i64* %4, align 8, !alias.scope !2308, !noalias !2311
  store i64 %211, i64* %11, align 8, !alias.scope !2308, !noalias !2311
  %216 = tail call i64 @strstr(i64 %209, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %217 = load i64, i64* %4, align 8
  %218 = icmp eq i64 %216, 0
  %219 = select i1 %218, i64 15, i64 10
  %220 = add i64 %217, %219
  br i1 %218, label %block_4024ff, label %block_4026a6

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %221 = phi i64 [ %325, %block_4024ac ], [ %422, %block_4026a6 ]
  %222 = phi i64 [ %622, %block_4024ac ], [ %407, %block_4026a6 ]
  %223 = phi %struct.Memory* [ %601, %block_4024ac ], [ %405, %block_4026a6 ]
  %224 = add i64 %222, -1088
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = icmp eq i64 %226, 0
  %228 = select i1 %227, i64 516, i64 14
  %229 = add i64 %221, %228
  br i1 %227, label %block_4026d0.loopexit, label %block_4024da

block_4025c7:                                     ; preds = %block_40255a
  %230 = inttoptr i64 %493 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %489, -24
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %234, 16
  %236 = load i64, i64* %11, align 8, !tbaa !1240
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 4204010, i64* %238
  %239 = load i64, i64* %20, align 8, !alias.scope !2313, !noalias !2316
  %240 = load i64, i64* %21, align 8, !alias.scope !2313, !noalias !2316
  %241 = inttoptr i64 %236 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %236, 8
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %236, 16
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %236, 24
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %236, 32
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %236, 40
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  %258 = add i64 %236, 48
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  %261 = add i64 %236, 56
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  %264 = add i64 %236, 64
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  %267 = add i64 %236, 72
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = inttoptr i64 %237 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %4, align 8, !alias.scope !2313, !noalias !2316
  store i64 %236, i64* %11, align 8, !alias.scope !2313, !noalias !2316
  %272 = tail call i64 @__isoc99_sscanf(i64 %231, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %235, i64 4203975, i64 %239, i64 %240, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254, i64 %257, i64 %260, i64 %263, i64 %266, i64 %269), !noalias !2313
  %273 = load i64, i64* %12, align 8
  %274 = add i64 %273, -1132
  %275 = trunc i64 %272 to i32
  %276 = load i64, i64* %4, align 8
  %277 = inttoptr i64 %274 to i32*
  store i32 %275, i32* %277
  %278 = add i64 %276, 178
  br label %block_40269c.backedge

block_4027c1:                                     ; preds = %block_40279f, %block_402719, %block_4026e4, %block_402778
  %279 = phi %struct.Memory* [ %601, %block_40279f ], [ %601, %block_402778 ], [ %601, %block_402719 ], [ %601, %block_4026e4 ]
  %280 = add i64 %192, -4
  %281 = inttoptr i64 %280 to i32*
  store i32 1, i32* %281
  %282 = inttoptr i64 %280 to i32*
  %283 = load i32, i32* %282
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %6, align 8, !tbaa !1240
  %285 = load i64, i64* %11, align 8
  %286 = add i64 %285, 1168
  %287 = icmp ugt i64 %285, -1169
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %13, align 1, !tbaa !1264
  %289 = trunc i64 %286 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #10
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %14, align 1, !tbaa !1278
  %295 = xor i64 %285, 16
  %296 = xor i64 %295, %286
  %297 = lshr i64 %296, 4
  %298 = trunc i64 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %15, align 1, !tbaa !1279
  %300 = icmp eq i64 %286, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %16, align 1, !tbaa !1280
  %302 = lshr i64 %286, 63
  %303 = trunc i64 %302 to i8
  store i8 %303, i8* %17, align 1, !tbaa !1281
  %304 = lshr i64 %285, 63
  %305 = xor i64 %302, %304
  %306 = add nuw nsw i64 %305, %302
  %307 = icmp eq i64 %306, 2
  %308 = zext i1 %307 to i8
  store i8 %308, i8* %18, align 1, !tbaa !1282
  %309 = add i64 %285, 1176
  %310 = inttoptr i64 %286 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %12, align 8, !tbaa !1240
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312
  store i64 %313, i64* %4, align 8, !tbaa !1240
  %314 = add i64 %285, 1184
  store i64 %314, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %279

block_4024ac:                                     ; preds = %block_4026d0
  %315 = add i64 %622, -1080
  %316 = inttoptr i64 %315 to i32*
  store i32 0, i32* %316
  %317 = inttoptr i64 %315 to i32*
  %318 = load i32, i32* %317
  %319 = sext i32 %318 to i64
  %320 = shl nsw i64 %319, 3
  %321 = add i64 %320, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322
  %324 = add i64 %622, -1088
  %325 = add i64 %621, 32
  %326 = inttoptr i64 %324 to i64*
  store i64 %323, i64* %326
  br label %block_4024cc

block_402628:                                     ; preds = %block_40255a
  %327 = inttoptr i64 %493 to i64*
  %328 = load i64, i64* %327
  %329 = load i64, i64* %11, align 8, !tbaa !1240
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 4204084, i64* %331
  %332 = inttoptr i64 %330 to i64*
  %333 = load i64, i64* %332
  store i64 %333, i64* %4, align 8, !alias.scope !2318, !noalias !2321
  store i64 %329, i64* %11, align 8, !alias.scope !2318, !noalias !2321
  %334 = tail call i64 @strlen(i64 %328)
  %335 = load i64, i64* %4, align 8
  %336 = add i64 %335, 12
  %337 = load i64, i64* %11, align 8, !tbaa !1240
  %338 = add i64 %337, -8
  %339 = inttoptr i64 %338 to i64*
  store i64 %336, i64* %339
  %340 = inttoptr i64 %338 to i64*
  %341 = load i64, i64* %340
  store i64 %341, i64* %4, align 8, !alias.scope !2323, !noalias !2326
  store i64 %337, i64* %11, align 8, !alias.scope !2323, !noalias !2326
  %342 = tail call i64 @malloc(i64 %334)
  %343 = load i64, i64* %4, align 8
  %344 = load i64, i64* %12, align 8
  %345 = add i64 %344, -24
  %346 = inttoptr i64 %345 to i64*
  %347 = load i64, i64* %346
  %348 = add i64 %347, 32
  %349 = inttoptr i64 %348 to i64*
  store i64 %342, i64* %349
  %350 = add i64 %344, -1096
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = inttoptr i64 %345 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %354, 32
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %343, 40
  %359 = load i64, i64* %11, align 8, !tbaa !1240
  %360 = add i64 %359, -8
  %361 = inttoptr i64 %360 to i64*
  store i64 %358, i64* %361
  %362 = load i64, i64* %19, align 8, !alias.scope !2328, !noalias !2331
  %363 = load i64, i64* %20, align 8, !alias.scope !2328, !noalias !2331
  %364 = load i64, i64* %21, align 8, !alias.scope !2328, !noalias !2331
  %365 = inttoptr i64 %359 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %359, 8
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = add i64 %359, 16
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  %373 = add i64 %359, 24
  %374 = inttoptr i64 %373 to i64*
  %375 = load i64, i64* %374
  %376 = add i64 %359, 32
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %359, 40
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380
  %382 = add i64 %359, 48
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %359, 56
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %359, 64
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %359, 72
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = inttoptr i64 %360 to i64*
  %395 = load i64, i64* %394
  store i64 %395, i64* %4, align 8, !alias.scope !2328, !noalias !2331
  store i64 %359, i64* %11, align 8, !alias.scope !2328, !noalias !2331
  %396 = tail call i64 @__isoc99_sscanf(i64 %352, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %357, i64 %362, i64 %363, i64 %364, i64 %366, i64 %369, i64 %372, i64 %375, i64 %378, i64 %381, i64 %384, i64 %387, i64 %390, i64 %393), !noalias !2328
  %397 = load i64, i64* %12, align 8
  %398 = add i64 %397, -1140
  %399 = trunc i64 %396 to i32
  %400 = load i64, i64* %4, align 8
  %401 = inttoptr i64 %398 to i32*
  store i32 %399, i32* %401
  %402 = add i64 %400, 52
  br label %block_40269c.backedge

block_4026a6:                                     ; preds = %block_4024da, %block_4024ff
  %403 = phi i64 [ %208, %block_4024ff ], [ %220, %block_4024da ]
  %404 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %405 = phi %struct.Memory* [ %223, %block_4024ff ], [ %223, %block_4024da ]
  %406 = add i64 %403, %404
  %407 = load i64, i64* %12, align 8
  %408 = add i64 %407, -1080
  %409 = inttoptr i64 %408 to i32*
  %410 = load i32, i32* %409
  %411 = add i32 %410, 1
  %412 = inttoptr i64 %408 to i32*
  store i32 %411, i32* %412
  %413 = inttoptr i64 %408 to i32*
  %414 = load i32, i32* %413
  %415 = sext i32 %414 to i64
  %416 = shl nsw i64 %415, 3
  %417 = add i64 %416, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %418 = inttoptr i64 %417 to i64*
  %419 = load i64, i64* %418
  %420 = add i64 %407, -1088
  %421 = inttoptr i64 %420 to i64*
  store i64 %419, i64* %421
  %422 = add i64 %406, -474
  br label %block_4024cc

block_40255a:                                     ; preds = %block_40251c
  %423 = inttoptr i64 %516 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %6, align 8, !tbaa !1240
  %425 = shl i64 %424, 3
  %426 = add i64 %425, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %427 = inttoptr i64 %426 to i64*
  %428 = load i64, i64* %427
  store i64 %428, i64* %7, align 8, !tbaa !1240
  store i64 %428, i64* %4, align 8, !tbaa !1240
  switch i64 %428, label %623 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b.loopexit
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5
  ]

block_4025fa:                                     ; preds = %block_40255a
  %429 = inttoptr i64 %493 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %489, -24
  %432 = inttoptr i64 %431 to i64*
  %433 = load i64, i64* %432
  %434 = add i64 %433, 24
  %435 = load i64, i64* %11, align 8, !tbaa !1240
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 4204061, i64* %437
  %438 = load i64, i64* %20, align 8, !alias.scope !2333, !noalias !2336
  %439 = load i64, i64* %21, align 8, !alias.scope !2333, !noalias !2336
  %440 = inttoptr i64 %435 to i64*
  %441 = load i64, i64* %440
  %442 = add i64 %435, 8
  %443 = inttoptr i64 %442 to i64*
  %444 = load i64, i64* %443
  %445 = add i64 %435, 16
  %446 = inttoptr i64 %445 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %435, 24
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %435, 32
  %452 = inttoptr i64 %451 to i64*
  %453 = load i64, i64* %452
  %454 = add i64 %435, 40
  %455 = inttoptr i64 %454 to i64*
  %456 = load i64, i64* %455
  %457 = add i64 %435, 48
  %458 = inttoptr i64 %457 to i64*
  %459 = load i64, i64* %458
  %460 = add i64 %435, 56
  %461 = inttoptr i64 %460 to i64*
  %462 = load i64, i64* %461
  %463 = add i64 %435, 64
  %464 = inttoptr i64 %463 to i64*
  %465 = load i64, i64* %464
  %466 = add i64 %435, 72
  %467 = inttoptr i64 %466 to i64*
  %468 = load i64, i64* %467
  %469 = inttoptr i64 %436 to i64*
  %470 = load i64, i64* %469
  store i64 %470, i64* %4, align 8, !alias.scope !2333, !noalias !2336
  store i64 %435, i64* %11, align 8, !alias.scope !2333, !noalias !2336
  %471 = tail call i64 @__isoc99_sscanf(i64 %430, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %434, i64 4204026, i64 %438, i64 %439, i64 %441, i64 %444, i64 %447, i64 %450, i64 %453, i64 %456, i64 %459, i64 %462, i64 %465, i64 %468), !noalias !2333
  %472 = load i64, i64* %12, align 8
  %473 = add i64 %472, -1136
  %474 = trunc i64 %471 to i32
  %475 = load i64, i64* %4, align 8
  %476 = inttoptr i64 %473 to i32*
  store i32 %474, i32* %476
  %477 = add i64 %475, 127
  br label %block_40269c.backedge

block_40251c:                                     ; preds = %block_4024ff
  %478 = load i64, i64* %12, align 8
  %479 = add i64 %478, -1088
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %208, 12
  %483 = load i64, i64* %11, align 8, !tbaa !1240
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485
  %486 = inttoptr i64 %484 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %4, align 8, !alias.scope !2338, !noalias !2341
  store i64 %483, i64* %11, align 8, !alias.scope !2338, !noalias !2341
  %488 = tail call i64 @strlen(i64 %481)
  %489 = load i64, i64* %12, align 8
  %490 = add i64 %489, -1055
  %491 = add i64 %490, %488
  %492 = load i64, i64* %4, align 8
  %493 = add i64 %489, -1096
  %494 = inttoptr i64 %493 to i64*
  store i64 %491, i64* %494
  %495 = add i64 %489, -1080
  %496 = inttoptr i64 %495 to i32*
  %497 = load i32, i32* %496
  %498 = zext i32 %497 to i64
  %499 = add nsw i64 %498, -6
  store i64 %499, i64* %10, align 8, !tbaa !1240
  %500 = icmp ult i32 %497, 6
  %501 = zext i1 %500 to i8
  store i8 %501, i8* %13, align 1, !tbaa !1264
  %502 = trunc i64 %499 to i32
  %503 = and i32 %502, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #10
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %14, align 1, !tbaa !1278
  %508 = xor i64 %499, %498
  %509 = lshr i64 %508, 4
  %510 = trunc i64 %509 to i8
  %511 = and i8 %510, 1
  store i8 %511, i8* %15, align 1, !tbaa !1279
  %512 = icmp eq i64 %499, 0
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %16, align 1, !tbaa !1280
  %514 = lshr i64 %499, 63
  %515 = trunc i64 %514 to i8
  store i8 %515, i8* %17, align 1, !tbaa !1281
  store i8 0, i8* %18, align 1, !tbaa !1282
  %516 = add i64 %489, -1112
  %517 = inttoptr i64 %516 to i64*
  store i64 %498, i64* %517
  %518 = add i64 %489, -1120
  %519 = inttoptr i64 %518 to i64*
  store i64 %499, i64* %519
  %520 = or i1 %512, %500
  %521 = select i1 %520, i64 50, i64 372
  %522 = add i64 %492, %521
  br i1 %520, label %block_40255a, label %block_40269c.backedge

block_40269c.backedge:                            ; preds = %block_402599, %block_40251c, %block_4025fa, %block_402628, %block_4025c7, %block_402673, %block_4025f5
  %523 = phi i64 [ %489, %block_40251c ], [ %489, %block_4025f5 ], [ %397, %block_402628 ], [ %68, %block_402673 ], [ %273, %block_4025c7 ], [ %472, %block_4025fa ], [ %589, %block_402599 ]
  %524 = phi i64 [ %522, %block_40251c ], [ 4204188, %block_4025f5 ], [ %402, %block_402628 ], [ %72, %block_402673 ], [ %278, %block_4025c7 ], [ %477, %block_4025fa ], [ %594, %block_402599 ]
  %525 = phi %struct.Memory* [ %223, %block_40251c ], [ %223, %block_4025f5 ], [ %223, %block_402628 ], [ %223, %block_402673 ], [ %223, %block_4025c7 ], [ %223, %block_4025fa ], [ %223, %block_402599 ]
  br label %block_40269c

block_402719:                                     ; preds = %block_4026e4
  %526 = add i64 %192, -1160
  %527 = inttoptr i64 %526 to i64*
  %528 = load i64, i64* %527
  store i64 %528, i64* %6, align 8, !tbaa !1240
  %529 = shl i64 %528, 3
  %530 = add i64 %529, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %7, align 8, !tbaa !1240
  store i64 %532, i64* %4, align 8, !tbaa !1240
  switch i64 %532, label %627 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_40279f:                                     ; preds = %block_402719
  %533 = add i64 %192, -24
  %534 = inttoptr i64 %533 to i64*
  %535 = load i64, i64* %534
  %536 = add i64 %535, 4
  %537 = inttoptr i64 %536 to i32*
  store i32 20, i32* %537
  %538 = inttoptr i64 %533 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %539, 8
  %541 = inttoptr i64 %540 to i32*
  store i32 1, i32* %541
  %542 = inttoptr i64 %533 to i64*
  %543 = load i64, i64* %542
  %544 = add i64 %543, 16
  %545 = inttoptr i64 %544 to i64*
  store i64 10000000, i64* %545
  br label %block_4027c1

block_402599:                                     ; preds = %block_40255a
  %546 = inttoptr i64 %493 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %489, -24
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %550, 8
  %552 = load i64, i64* %11, align 8, !tbaa !1240
  %553 = add i64 %552, -8
  %554 = inttoptr i64 %553 to i64*
  store i64 4203964, i64* %554
  %555 = load i64, i64* %20, align 8, !alias.scope !2343, !noalias !2346
  %556 = load i64, i64* %21, align 8, !alias.scope !2343, !noalias !2346
  %557 = inttoptr i64 %552 to i64*
  %558 = load i64, i64* %557
  %559 = add i64 %552, 8
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560
  %562 = add i64 %552, 16
  %563 = inttoptr i64 %562 to i64*
  %564 = load i64, i64* %563
  %565 = add i64 %552, 24
  %566 = inttoptr i64 %565 to i64*
  %567 = load i64, i64* %566
  %568 = add i64 %552, 32
  %569 = inttoptr i64 %568 to i64*
  %570 = load i64, i64* %569
  %571 = add i64 %552, 40
  %572 = inttoptr i64 %571 to i64*
  %573 = load i64, i64* %572
  %574 = add i64 %552, 48
  %575 = inttoptr i64 %574 to i64*
  %576 = load i64, i64* %575
  %577 = add i64 %552, 56
  %578 = inttoptr i64 %577 to i64*
  %579 = load i64, i64* %578
  %580 = add i64 %552, 64
  %581 = inttoptr i64 %580 to i64*
  %582 = load i64, i64* %581
  %583 = add i64 %552, 72
  %584 = inttoptr i64 %583 to i64*
  %585 = load i64, i64* %584
  %586 = inttoptr i64 %553 to i64*
  %587 = load i64, i64* %586
  store i64 %587, i64* %4, align 8, !alias.scope !2343, !noalias !2346
  store i64 %552, i64* %11, align 8, !alias.scope !2343, !noalias !2346
  %588 = tail call i64 @__isoc99_sscanf(i64 %547, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %551, i64 4203929, i64 %555, i64 %556, i64 %558, i64 %561, i64 %564, i64 %567, i64 %570, i64 %573, i64 %576, i64 %579, i64 %582, i64 %585), !noalias !2343
  %589 = load i64, i64* %12, align 8
  %590 = add i64 %589, -1128
  %591 = trunc i64 %588 to i32
  %592 = load i64, i64* %4, align 8
  %593 = inttoptr i64 %590 to i32*
  store i32 %591, i32* %593
  %594 = add i64 %592, 224
  br label %block_40269c.backedge

block_40269c:                                     ; preds = %block_40269c.backedge, %block_40256b
  %595 = phi i64 [ %122, %block_40256b ], [ %523, %block_40269c.backedge ]
  %596 = phi i64 [ %127, %block_40256b ], [ %524, %block_40269c.backedge ]
  %597 = phi %struct.Memory* [ %77, %block_40256b ], [ %525, %block_40269c.backedge ]
  %598 = add i64 %596, 52
  br label %block_4026d0

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_4026d0.loopexit, %block_40269c
  %599 = phi i64 [ %598, %block_40269c ], [ %229, %block_4026d0.loopexit ]
  %600 = phi i64 [ %595, %block_40269c ], [ %222, %block_4026d0.loopexit ]
  %601 = phi %struct.Memory* [ %597, %block_40269c ], [ %223, %block_4026d0.loopexit ]
  %602 = add i64 %600, -1076
  %603 = inttoptr i64 %602 to i32*
  %604 = load i32, i32* %603
  %605 = add i32 %604, 1
  %606 = inttoptr i64 %602 to i32*
  store i32 %605, i32* %606
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %607 = add i64 %600, -1056
  %608 = add i64 %600, -1064
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  store i64 %610, i64* %8, align 8, !tbaa !1240
  %611 = add i64 %599, -558
  %612 = load i64, i64* %11, align 8, !tbaa !1240
  %613 = add i64 %612, -8
  %614 = inttoptr i64 %613 to i64*
  store i64 %611, i64* %614
  %615 = inttoptr i64 %613 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %4, align 8, !alias.scope !2348, !noalias !2351
  store i64 %612, i64* %11, align 8, !alias.scope !2348, !noalias !2351
  %617 = tail call i64 @fgets(i64 %607, i64 1024, i64 %610)
  %618 = load i64, i64* %4, align 8
  %619 = icmp eq i64 %617, 0
  %620 = select i1 %619, i64 578, i64 10
  %621 = add i64 %618, %620
  %622 = load i64, i64* %12, align 8
  br i1 %619, label %block_4026e4, label %block_4024ac

; <label>:623:                                    ; preds = %block_40255a
  %624 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %428, %struct.Memory* %223)
  ret %struct.Memory* %624

block_40272a:                                     ; preds = %block_402719
  %625 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %601)
  ret %struct.Memory* %625

block_402751:                                     ; preds = %block_402719
  %626 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %601)
  ret %struct.Memory* %626

; <label>:627:                                    ; preds = %block_402719
  %628 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %532, %struct.Memory* %601)
  ret %struct.Memory* %628
}

; Function Attrs: noinline
define %struct.Memory* @sub_406850_AdcFileName(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_406850:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -40
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -16
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -24
  %27 = load i64, i64* %8, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %13, -32
  %30 = load i64, i64* %7, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %13, -36
  %33 = load i32, i32* %5, align 4
  %34 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %34
  %35 = inttoptr i64 %23 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %9, align 8, !tbaa !1240
  %37 = inttoptr i64 %26 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %7, align 8, !tbaa !1240
  %39 = inttoptr i64 %29 to i64*
  %40 = load i64, i64* %39
  store i64 %40, i64* %6, align 8, !tbaa !1240
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %42 = inttoptr i64 %32 to i32*
  %43 = load i32, i32* %42
  %44 = zext i32 %43 to i64
  store i64 %44, i64* %41, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 833), i64* %8, align 8, !tbaa !1240
  %45 = add i64 %1, 59
  %46 = add i64 %13, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %50 = load i64, i64* %49, align 8, !alias.scope !2353, !noalias !2356
  %51 = inttoptr i64 %16 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %13, -32
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %13, -24
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %13, -16
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %13, -8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = inttoptr i64 %13 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %13, 8
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  %70 = add i64 %13, 16
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %13, 24
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %13, 32
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  store i64 %16, i64* %10, align 8, !alias.scope !2353, !noalias !2356
  %79 = tail call i64 @sprintf(i64 %36, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 833), i64 %38, i64 %40, i64 %44, i64 %50, i64 %52, i64 %55, i64 %58, i64 %61, i64 %64, i64 %66, i64 %69, i64 %72, i64 %75, i64 %78), !noalias !2353
  store i64 %79, i64* %48, align 8, !alias.scope !2353, !noalias !2356
  %80 = load i64, i64* %11, align 8
  %81 = add i64 %80, -32
  %82 = trunc i64 %79 to i32
  %83 = inttoptr i64 %81 to i32*
  store i32 %82, i32* %83
  %84 = load i64, i64* %10, align 8
  %85 = add i64 %84, 32
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %17, align 1, !tbaa !1264
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #10
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %18, align 1, !tbaa !1278
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %19, align 1, !tbaa !1279
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %20, align 1, !tbaa !1280
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %21, align 1, !tbaa !1281
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %22, align 1, !tbaa !1282
  %107 = add i64 %84, 40
  %108 = inttoptr i64 %85 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %3, align 8, !tbaa !1240
  %112 = add i64 %84, 48
  store i64 %112, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035d0_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4035d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, -32
  %24 = add i64 %1, 16
  %25 = add i64 %11, -48
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_4035b0_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -24
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %29 to double*
  %34 = load double, double* %33
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = add i64 %28, -4
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 3
  %41 = add i64 %40, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 736)
  %42 = inttoptr i64 %41 to double*
  %43 = load double, double* %42
  %44 = fsub double %34, %43
  %45 = add i64 %28, -16
  %46 = inttoptr i64 %45 to double*
  store double %44, double* %46
  %47 = inttoptr i64 %45 to double*
  %48 = load double, double* %47
  %49 = inttoptr i64 %36 to i32*
  %50 = load i32, i32* %49
  %51 = sext i32 %50 to i64
  store i64 %51, i64* %6, align 8, !tbaa !1240
  %52 = shl nsw i64 %51, 3
  %53 = add i64 %52, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 224)
  %54 = inttoptr i64 %53 to double*
  %55 = load double, double* %54
  %56 = fadd double %48, %55
  store double %56, double* %30, align 1, !tbaa !1439
  store i64 0, i64* %35, align 1, !tbaa !1439
  %57 = inttoptr i64 %53 to double*
  store double %56, double* %57
  %58 = load i64, i64* %7, align 8
  %59 = add i64 %58, 32
  %60 = icmp ugt i64 %58, -33
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %14, align 1, !tbaa !1264
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #10
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %15, align 1, !tbaa !1278
  %68 = xor i64 %59, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %16, align 1, !tbaa !1279
  %72 = icmp eq i64 %59, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %17, align 1, !tbaa !1280
  %74 = lshr i64 %59, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %18, align 1, !tbaa !1281
  %76 = lshr i64 %58, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %19, align 1, !tbaa !1282
  %81 = add i64 %58, 40
  %82 = inttoptr i64 %59 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %8, align 8, !tbaa !1240
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !tbaa !1240
  %86 = add i64 %58, 48
  store i64 %86, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline
define %struct.Memory* @sub_402960_ShowADCPar(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402960:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %8, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %11, -56
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %11, -16
  %22 = load i64, i64* %7, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = load i64, i64* @stdout
  %25 = add i64 %1, 37
  %26 = add i64 %11, -64
  %27 = inttoptr i64 %26 to i64*
  store i64 %25, i64* %27
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %31 = load i64, i64* %5, align 8, !alias.scope !2358, !noalias !2361
  %32 = load i64, i64* %4, align 8, !alias.scope !2358, !noalias !2361
  %33 = load i64, i64* %29, align 8, !alias.scope !2358, !noalias !2361
  %34 = load i64, i64* %30, align 8, !alias.scope !2358, !noalias !2361
  %35 = inttoptr i64 %14 to i64*
  %36 = load i64, i64* %35
  %37 = add i64 %11, -48
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %11, -40
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %11, -32
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %11, -24
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  %49 = add i64 %11, -16
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  %52 = add i64 %11, -8
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = inttoptr i64 %11 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %11, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %11, 16
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = inttoptr i64 %26 to i64*
  %64 = load i64, i64* %63
  store i64 %14, i64* %8, align 8, !alias.scope !2358, !noalias !2361
  %65 = tail call i64 @fprintf(i64 %24, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1161), i64 %31, i64 %32, i64 %33, i64 %34, i64 %36, i64 %39, i64 %42, i64 %45, i64 %48, i64 %51, i64 %54, i64 %56, i64 %59, i64 %62), !noalias !2358
  %66 = load i64, i64* @stdout
  %67 = load i64, i64* %9, align 8
  %68 = add i64 %67, -8
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  %74 = add i64 %67, -12
  %75 = trunc i64 %65 to i32
  %76 = inttoptr i64 %74 to i32*
  store i32 %75, i32* %76
  %77 = add i64 %64, 34
  %78 = load i64, i64* %8, align 8, !tbaa !1240
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80
  %81 = load i64, i64* %29, align 8, !alias.scope !2363, !noalias !2366
  %82 = load i64, i64* %30, align 8, !alias.scope !2363, !noalias !2366
  %83 = inttoptr i64 %78 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %78, 8
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  %88 = add i64 %78, 16
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89
  %91 = add i64 %78, 24
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %78, 32
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %78, 40
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98
  %100 = add i64 %78, 48
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %78, 56
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104
  %106 = add i64 %78, 64
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107
  %109 = add i64 %78, 72
  %110 = inttoptr i64 %109 to i64*
  %111 = load i64, i64* %110
  %112 = inttoptr i64 %79 to i64*
  %113 = load i64, i64* %112
  store i64 %78, i64* %8, align 8, !alias.scope !2363, !noalias !2366
  %114 = tail call i64 @fprintf(i64 %66, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1198), i64 %73, i64 %70, i64 %81, i64 %82, i64 %84, i64 %87, i64 %90, i64 %93, i64 %96, i64 %99, i64 %102, i64 %105, i64 %108, i64 %111), !noalias !2363
  %115 = load i64, i64* @stdout
  %116 = load i64, i64* %9, align 8
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %119, 4
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121
  %123 = zext i32 %122 to i64
  %124 = add i64 %116, -16
  %125 = trunc i64 %114 to i32
  %126 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %126
  %127 = add i64 %113, 35
  %128 = load i64, i64* %8, align 8, !tbaa !1240
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %29, align 8, !alias.scope !2368, !noalias !2371
  %132 = load i64, i64* %30, align 8, !alias.scope !2368, !noalias !2371
  %133 = inttoptr i64 %128 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %128, 8
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %128, 16
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %128, 24
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %128, 32
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %128, 40
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %128, 48
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %128, 56
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %128, 64
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %128, 72
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = inttoptr i64 %129 to i64*
  %163 = load i64, i64* %162
  store i64 %128, i64* %8, align 8, !alias.scope !2368, !noalias !2371
  %164 = tail call i64 @fprintf(i64 %115, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1207), i64 %123, i64 %119, i64 %131, i64 %132, i64 %134, i64 %137, i64 %140, i64 %143, i64 %146, i64 %149, i64 %152, i64 %155, i64 %158, i64 %161), !noalias !2368
  %165 = load i64, i64* @stdout
  %166 = load i64, i64* %9, align 8
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %169, 8
  %171 = inttoptr i64 %170 to i32*
  %172 = load i32, i32* %171
  %173 = zext i32 %172 to i64
  %174 = add i64 %166, -20
  %175 = trunc i64 %164 to i32
  %176 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %176
  %177 = add i64 %163, 35
  %178 = load i64, i64* %8, align 8, !tbaa !1240
  %179 = add i64 %178, -8
  %180 = inttoptr i64 %179 to i64*
  store i64 %177, i64* %180
  %181 = load i64, i64* %29, align 8, !alias.scope !2373, !noalias !2376
  %182 = load i64, i64* %30, align 8, !alias.scope !2373, !noalias !2376
  %183 = inttoptr i64 %178 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %178, 8
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %178, 16
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = add i64 %178, 24
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = add i64 %178, 32
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %178, 40
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198
  %200 = add i64 %178, 48
  %201 = inttoptr i64 %200 to i64*
  %202 = load i64, i64* %201
  %203 = add i64 %178, 56
  %204 = inttoptr i64 %203 to i64*
  %205 = load i64, i64* %204
  %206 = add i64 %178, 64
  %207 = inttoptr i64 %206 to i64*
  %208 = load i64, i64* %207
  %209 = add i64 %178, 72
  %210 = inttoptr i64 %209 to i64*
  %211 = load i64, i64* %210
  %212 = inttoptr i64 %179 to i64*
  %213 = load i64, i64* %212
  store i64 %178, i64* %8, align 8, !alias.scope !2373, !noalias !2376
  %214 = tail call i64 @fprintf(i64 %165, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1224), i64 %173, i64 %169, i64 %181, i64 %182, i64 %184, i64 %187, i64 %190, i64 %193, i64 %196, i64 %199, i64 %202, i64 %205, i64 %208, i64 %211), !noalias !2373
  %215 = load i64, i64* @stdout
  %216 = load i64, i64* %9, align 8
  %217 = add i64 %216, -8
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %219, 16
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %216, -24
  %224 = trunc i64 %214 to i32
  %225 = inttoptr i64 %223 to i32*
  store i32 %224, i32* %225
  %226 = add i64 %213, 36
  %227 = load i64, i64* %8, align 8, !tbaa !1240
  %228 = add i64 %227, -8
  %229 = inttoptr i64 %228 to i64*
  store i64 %226, i64* %229
  %230 = load i64, i64* %29, align 8, !alias.scope !2378, !noalias !2381
  %231 = load i64, i64* %30, align 8, !alias.scope !2378, !noalias !2381
  %232 = inttoptr i64 %227 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %227, 8
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %227, 16
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %227, 24
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %227, 32
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %227, 40
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %227, 48
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %227, 56
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %227, 64
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  %258 = add i64 %227, 72
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  %261 = inttoptr i64 %228 to i64*
  %262 = load i64, i64* %261
  store i64 %227, i64* %8, align 8, !alias.scope !2378, !noalias !2381
  %263 = tail call i64 @fprintf(i64 %215, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1241), i64 %222, i64 %219, i64 %230, i64 %231, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254, i64 %257, i64 %260), !noalias !2378
  %264 = load i64, i64* @stdout
  %265 = load i64, i64* %9, align 8
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  %268 = load i64, i64* %267
  %269 = add i64 %268, 40
  %270 = inttoptr i64 %269 to i8*
  %271 = load i8, i8* %270
  %272 = sext i8 %271 to i64
  %273 = and i64 %272, 4294967295
  %274 = add i64 %265, -28
  %275 = trunc i64 %263 to i32
  %276 = inttoptr i64 %274 to i32*
  store i32 %275, i32* %276
  %277 = add i64 %262, 36
  %278 = load i64, i64* %8, align 8, !tbaa !1240
  %279 = add i64 %278, -8
  %280 = inttoptr i64 %279 to i64*
  store i64 %277, i64* %280
  %281 = load i64, i64* %29, align 8, !alias.scope !2383, !noalias !2386
  %282 = load i64, i64* %30, align 8, !alias.scope !2383, !noalias !2386
  %283 = inttoptr i64 %278 to i64*
  %284 = load i64, i64* %283
  %285 = add i64 %278, 8
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %278, 16
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %278, 24
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %278, 32
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %278, 40
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %278, 48
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %278, 56
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %278, 64
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %278, 72
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = inttoptr i64 %279 to i64*
  %313 = load i64, i64* %312
  store i64 %278, i64* %8, align 8, !alias.scope !2383, !noalias !2386
  %314 = tail call i64 @fprintf(i64 %264, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1260), i64 %273, i64 %268, i64 %281, i64 %282, i64 %284, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311), !noalias !2383
  %315 = load i64, i64* @stdout
  %316 = load i64, i64* %9, align 8
  %317 = add i64 %316, -8
  %318 = inttoptr i64 %317 to i64*
  %319 = load i64, i64* %318
  store i64 %319, i64* %4, align 8, !tbaa !1240
  %320 = add i64 %319, 32
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %5, align 8, !tbaa !1240
  %323 = add i64 %316, -32
  %324 = trunc i64 %314 to i32
  %325 = inttoptr i64 %323 to i32*
  store i32 %324, i32* %325
  %326 = add i64 %313, 36
  %327 = load i64, i64* %8, align 8, !tbaa !1240
  %328 = add i64 %327, -8
  %329 = inttoptr i64 %328 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %29, align 8, !alias.scope !2388, !noalias !2391
  %331 = load i64, i64* %30, align 8, !alias.scope !2388, !noalias !2391
  %332 = inttoptr i64 %327 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %327, 8
  %335 = inttoptr i64 %334 to i64*
  %336 = load i64, i64* %335
  %337 = add i64 %327, 16
  %338 = inttoptr i64 %337 to i64*
  %339 = load i64, i64* %338
  %340 = add i64 %327, 24
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  %343 = add i64 %327, 32
  %344 = inttoptr i64 %343 to i64*
  %345 = load i64, i64* %344
  %346 = add i64 %327, 40
  %347 = inttoptr i64 %346 to i64*
  %348 = load i64, i64* %347
  %349 = add i64 %327, 48
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %327, 56
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %327, 64
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %327, 72
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = inttoptr i64 %328 to i64*
  %362 = load i64, i64* %361
  store i64 %327, i64* %8, align 8, !alias.scope !2388, !noalias !2391
  %363 = tail call i64 @fprintf(i64 %315, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1272), i64 %322, i64 %319, i64 %330, i64 %331, i64 %333, i64 %336, i64 %339, i64 %342, i64 %345, i64 %348, i64 %351, i64 %354, i64 %357, i64 %360), !noalias !2388
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1292), i64* %6, align 8, !tbaa !1240
  %364 = load i64, i64* @stdout
  store i64 %364, i64* %7, align 8, !tbaa !1240
  %365 = load i64, i64* %9, align 8
  %366 = add i64 %365, -36
  %367 = trunc i64 %363 to i32
  %368 = inttoptr i64 %366 to i32*
  store i32 %367, i32* %368
  %369 = add i64 %362, 28
  %370 = load i64, i64* %8, align 8, !tbaa !1240
  %371 = add i64 %370, -8
  %372 = inttoptr i64 %371 to i64*
  store i64 %369, i64* %372
  %373 = load i64, i64* %5, align 8, !alias.scope !2393, !noalias !2396
  %374 = load i64, i64* %4, align 8, !alias.scope !2393, !noalias !2396
  %375 = load i64, i64* %29, align 8, !alias.scope !2393, !noalias !2396
  %376 = load i64, i64* %30, align 8, !alias.scope !2393, !noalias !2396
  %377 = inttoptr i64 %370 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %370, 8
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380
  %382 = add i64 %370, 16
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = add i64 %370, 24
  %386 = inttoptr i64 %385 to i64*
  %387 = load i64, i64* %386
  %388 = add i64 %370, 32
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389
  %391 = add i64 %370, 40
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %370, 48
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %370, 56
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %370, 64
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %370, 72
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  store i64 %370, i64* %8, align 8, !alias.scope !2393, !noalias !2396
  %406 = tail call i64 @fprintf(i64 %364, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1292), i64 %373, i64 %374, i64 %375, i64 %376, i64 %378, i64 %381, i64 %384, i64 %387, i64 %390, i64 %393, i64 %396, i64 %399, i64 %402, i64 %405), !noalias !2393
  store i64 %406, i64* %28, align 8, !alias.scope !2393, !noalias !2396
  %407 = load i64, i64* %9, align 8
  %408 = add i64 %407, -40
  %409 = trunc i64 %406 to i32
  %410 = inttoptr i64 %408 to i32*
  store i32 %409, i32* %410
  %411 = load i64, i64* %8, align 8
  %412 = add i64 %411, 48
  %413 = icmp ugt i64 %411, -49
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %15, align 1, !tbaa !1264
  %415 = trunc i64 %412 to i32
  %416 = and i32 %415, 255
  %417 = tail call i32 @llvm.ctpop.i32(i32 %416) #10
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = xor i8 %419, 1
  store i8 %420, i8* %16, align 1, !tbaa !1278
  %421 = xor i64 %411, 16
  %422 = xor i64 %421, %412
  %423 = lshr i64 %422, 4
  %424 = trunc i64 %423 to i8
  %425 = and i8 %424, 1
  store i8 %425, i8* %17, align 1, !tbaa !1279
  %426 = icmp eq i64 %412, 0
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %18, align 1, !tbaa !1280
  %428 = lshr i64 %412, 63
  %429 = trunc i64 %428 to i8
  store i8 %429, i8* %19, align 1, !tbaa !1281
  %430 = lshr i64 %411, 63
  %431 = xor i64 %428, %430
  %432 = add nuw nsw i64 %431, %428
  %433 = icmp eq i64 %432, 2
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %20, align 1, !tbaa !1282
  %435 = add i64 %411, 56
  %436 = inttoptr i64 %412 to i64*
  %437 = load i64, i64* %436
  store i64 %437, i64* %9, align 8, !tbaa !1240
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438
  store i64 %439, i64* %3, align 8, !tbaa !1240
  %440 = add i64 %411, 64
  store i64 %440, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a80_GetNextTuple(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402a80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %6 = bitcast %union.anon* %5 to i8*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %20 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %21 = load i64, i64* %19, align 8
  %22 = load i64, i64* %18, align 8, !tbaa !1240
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24
  store i64 %23, i64* %19, align 8, !tbaa !1240
  %25 = add i64 %22, -136
  store i64 %25, i64* %18, align 8, !tbaa !1240
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = load i8, i8* %6, align 1
  %33 = add i64 %22, -16
  %34 = load i32, i32* %12, align 4
  %35 = inttoptr i64 %33 to i32*
  store i32 %34, i32* %35
  %36 = add i64 %22, -20
  %37 = load i32, i32* %10, align 4
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = add i64 %22, -32
  %40 = load i64, i64* %15, align 8
  %41 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %41
  %42 = add i64 %22, -40
  %43 = load i64, i64* %14, align 8
  %44 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %44
  %45 = add i64 %22, -41
  %46 = inttoptr i64 %45 to i8*
  store i8 %32, i8* %46
  %47 = add i64 %22, -48
  %48 = inttoptr i64 %47 to i32*
  store i32 0, i32* %48
  %49 = add i64 %22, -52
  %50 = inttoptr i64 %49 to i32*
  store i32 0, i32* %50
  %51 = add i64 %22, -56
  %52 = inttoptr i64 %51 to i32*
  store i32 0, i32* %52
  %53 = add i64 %22, -64
  %54 = inttoptr i64 %53 to i64*
  store i64 0, i64* %54
  %55 = inttoptr i64 %33 to i32*
  %56 = load i32, i32* %55
  %57 = add i32 %56, -20
  %58 = icmp eq i32 %57, 0
  %59 = lshr i32 %57, 31
  %60 = trunc i32 %59 to i8
  %61 = lshr i32 %56, 31
  %62 = xor i32 %59, %61
  %63 = add nuw nsw i32 %62, %61
  %64 = icmp eq i32 %63, 2
  %65 = icmp ne i8 %60, 0
  %66 = xor i1 %65, %64
  %67 = or i1 %58, %66
  %68 = select i1 %67, i64 113, i64 70
  %69 = add i64 %68, %1
  br i1 %67, label %block_402af1, label %block_402ac6

block_402cff:                                     ; preds = %block_402c77
  %70 = add i64 %172, 5
  br label %block_402d04

block_402df9:                                     ; preds = %block_402d23
  %71 = add i64 %547, 7
  %72 = inttoptr i64 %529 to i32*
  store i32 0, i32* %72
  br label %block_402e00

block_402bf8:                                     ; preds = %block_402bdb
  %73 = add i64 %582, ptrtoint (%adcgen_type* @adcgen to i64)
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %569, -60
  %77 = inttoptr i64 %76 to i32*
  %78 = load i32, i32* %77
  %79 = sext i32 %78 to i64
  %80 = sext i32 %78 to i128
  %81 = and i128 %80, -18446744073709551616
  %82 = sext i64 %75 to i128
  %83 = and i128 %82, -18446744073709551616
  %84 = zext i64 %79 to i128
  %85 = or i128 %81, %84
  %86 = zext i64 %75 to i128
  %87 = or i128 %83, %86
  %88 = mul nsw i128 %87, %85
  %89 = trunc i128 %88 to i64
  %90 = sext i64 %89 to i128
  %91 = icmp ne i128 %90, %88
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %26, align 1, !tbaa !1264
  %93 = trunc i128 %88 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %27, align 1, !tbaa !1278
  store i8 0, i8* %28, align 1, !tbaa !1279
  store i8 0, i8* %29, align 1, !tbaa !1280
  %99 = lshr i64 %89, 63
  %100 = trunc i64 %99 to i8
  store i8 %100, i8* %30, align 1, !tbaa !1281
  store i8 %92, i8* %31, align 1, !tbaa !1282
  %101 = trunc i128 %88 to i32
  %102 = inttoptr i64 %76 to i32*
  store i32 %101, i32* %102
  %103 = inttoptr i64 %76 to i32*
  %104 = load i32, i32* %103
  %105 = sext i32 %104 to i64
  store i64 %105, i64* %13, align 8, !tbaa !1240
  %106 = inttoptr i64 %578 to i32*
  %107 = load i32, i32* %106
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %14, align 8, !tbaa !1240
  %109 = ashr i64 %105, 63
  store i64 %109, i64* %294, align 8, !tbaa !1240
  %110 = shl nsw i64 %108, 3
  %111 = add i64 %110, ptrtoint (%adcprime_type* @adcprime to i64)
  %112 = add i64 %599, 43
  store i64 %112, i64* %3, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113
  %115 = sext i64 %114 to i128
  %116 = and i128 %115, -18446744073709551616
  %117 = zext i64 %109 to i128
  %118 = shl nuw i128 %117, 64
  %119 = zext i64 %105 to i128
  %120 = or i128 %118, %119
  %121 = zext i64 %114 to i128
  %122 = or i128 %116, %121
  %123 = sdiv i128 %120, %122
  %124 = trunc i128 %123 to i64
  %125 = and i128 %123, 18446744073709551615
  %126 = sext i64 %124 to i128
  %127 = and i128 %126, -18446744073709551616
  %128 = or i128 %127, %125
  %129 = icmp eq i128 %123, %128
  br i1 %129, label %135, label %130

; <label>:130:                                    ; preds = %block_402bf8
  %131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %112, %struct.Memory* %570) #14
  %132 = load i32, i32* %8, align 4
  %133 = load i64, i64* %3, align 8
  %134 = load i64, i64* %19, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:135:                                    ; preds = %block_402bf8
  %136 = srem i128 %120, %122
  %137 = trunc i128 %136 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %135, %130
  %138 = phi i64 [ %134, %130 ], [ %569, %135 ]
  %139 = phi i64 [ %133, %130 ], [ %112, %135 ]
  %140 = phi i32 [ %132, %130 ], [ %137, %135 ]
  %141 = phi %struct.Memory* [ %131, %130 ], [ %570, %135 ]
  %142 = zext i32 %140 to i64
  store i64 %142, i64* %16, align 8, !tbaa !1240
  %143 = add i64 %138, -60
  %144 = inttoptr i64 %143 to i32*
  store i32 %140, i32* %144
  %145 = add i64 %138, -44
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146
  %148 = add i32 %147, 1
  %149 = inttoptr i64 %145 to i32*
  store i32 %148, i32* %149
  %150 = add i64 %139, -72
  br label %block_402bdb

block_402c77:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29, %block_402c54
  %151 = phi i64 [ %487, %block_402c54 ], [ %870, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29 ]
  %152 = phi i64 [ %481, %block_402c54 ], [ %860, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29 ]
  %153 = phi %struct.Memory* [ %717, %block_402c54 ], [ %801, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29 ]
  %154 = add i64 %152, -40
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = add i64 %152, -8
  %158 = inttoptr i64 %157 to i32*
  %159 = load i32, i32* %158
  %160 = sub i32 %156, %159
  %161 = lshr i32 %160, 31
  %162 = trunc i32 %161 to i8
  %163 = lshr i32 %156, 31
  %164 = lshr i32 %159, 31
  %165 = xor i32 %164, %163
  %166 = xor i32 %161, %163
  %167 = add nuw nsw i32 %166, %165
  %168 = icmp eq i32 %167, 2
  %169 = icmp ne i8 %162, 0
  %170 = xor i1 %169, %168
  %171 = select i1 %170, i64 12, i64 136
  %172 = add i64 %151, %171
  br i1 %170, label %block_402c83, label %block_402cff

block_402b6e:                                     ; preds = %block_402b4d
  %173 = inttoptr i64 %489 to i64*
  store i64 ptrtoint (%adcexpW_type* @adcexpW to i64), i64* %173
  br label %block_402ba2

block_402de6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10, %block_402dd5
  %174 = phi i64 [ %438, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10 ], [ %204, %block_402dd5 ]
  %175 = phi %struct.Memory* [ %377, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10 ], [ %377, %block_402dd5 ]
  %176 = inttoptr i64 %406 to i32*
  %177 = load i32, i32* %176
  %178 = add i32 %177, 1
  %179 = inttoptr i64 %406 to i32*
  store i32 %178, i32* %179
  %180 = add i64 %174, -195
  br label %block_402d23

block_402af1:                                     ; preds = %block_402a80
  %181 = load i64, i64* %19, align 8
  %182 = add i64 %181, -12
  %183 = inttoptr i64 %182 to i32*
  %184 = load i32, i32* %183
  %185 = zext i32 %184 to i64
  %186 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%adcgen_type* @adcgen to i64), i64 160) to i32*)
  %187 = sub i32 %184, %186
  %188 = icmp eq i32 %187, 0
  %189 = lshr i32 %187, 31
  %190 = trunc i32 %189 to i8
  %191 = lshr i32 %184, 31
  %192 = lshr i32 %186, 31
  %193 = xor i32 %192, %191
  %194 = xor i32 %189, %191
  %195 = add nuw nsw i32 %194, %193
  %196 = icmp eq i32 %195, 2
  %197 = icmp ne i8 %190, 0
  %198 = xor i1 %197, %196
  %199 = or i1 %188, %198
  %200 = select i1 %199, i64 59, i64 16
  %201 = add i64 %69, %200
  br i1 %199, label %block_402b2c, label %block_402b01

block_402dd5:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10
  %202 = trunc i64 %419 to i32
  %203 = and i64 %419, 4294967295
  store i64 %203, i64* %14, align 8, !tbaa !1240
  %204 = add i64 %438, 17
  %205 = inttoptr i64 %420 to i32*
  store i32 %202, i32* %205
  br label %block_402de6

block_402ac6:                                     ; preds = %block_402a80
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1329), i64* %16, align 8, !tbaa !1240
  %206 = load i64, i64* @stderr
  store i64 %206, i64* %17, align 8, !tbaa !1240
  %207 = load i64, i64* %19, align 8
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i32*
  %210 = load i32, i32* %209
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %15, align 8, !tbaa !1240
  %212 = add i64 %69, 28
  %213 = load i64, i64* %18, align 8, !tbaa !1240
  %214 = add i64 %213, -8
  %215 = inttoptr i64 %214 to i64*
  store i64 %212, i64* %215
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %218 = load i64, i64* %216, align 8, !alias.scope !2398, !noalias !2401
  %219 = load i64, i64* %217, align 8, !alias.scope !2398, !noalias !2401
  %220 = inttoptr i64 %213 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %213, 8
  %223 = inttoptr i64 %222 to i64*
  %224 = load i64, i64* %223
  %225 = add i64 %213, 16
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %213, 24
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %213, 32
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %213, 40
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %213, 48
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %213, 56
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %213, 64
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %213, 72
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = inttoptr i64 %214 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %3, align 8, !alias.scope !2398, !noalias !2401
  store i64 %213, i64* %18, align 8, !alias.scope !2398, !noalias !2401
  %251 = tail call i64 @fprintf(i64 %206, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1329), i64 %211, i64 %43, i64 %218, i64 %219, i64 %221, i64 %224, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248), !noalias !2398
  %252 = load i64, i64* %19, align 8
  %253 = add i64 %252, -4
  %254 = inttoptr i64 %253 to i32*
  store i32 0, i32* %254
  %255 = add i64 %252, -64
  %256 = trunc i64 %251 to i32
  %257 = inttoptr i64 %255 to i32*
  store i32 %256, i32* %257
  br label %block_402e8c

block_402bc3:                                     ; preds = %block_402bb7
  %258 = sext i32 %720 to i64
  %259 = shl nsw i64 %258, 3
  %260 = add i64 %259, ptrtoint (%adcgen_type* @adcgen to i64)
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  %263 = trunc i64 %262 to i32
  %264 = add i64 %716, -60
  %265 = inttoptr i64 %264 to i32*
  store i32 %263, i32* %265
  %266 = add i64 %716, -44
  %267 = add i64 %736, 24
  %268 = inttoptr i64 %266 to i32*
  store i32 0, i32* %268
  br label %block_402bdb

block_402e00:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402df9
  %269 = phi i64 [ %71, %block_402df9 ], [ %709, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %270 = phi i64 [ %527, %block_402df9 ], [ %706, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %271 = phi %struct.Memory* [ %528, %block_402df9 ], [ %684, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %272 = add i64 %270, -40
  %273 = inttoptr i64 %272 to i32*
  %274 = load i32, i32* %273
  %275 = add i64 %270, -12
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276
  %278 = sub i32 %274, %277
  %279 = lshr i32 %278, 31
  %280 = trunc i32 %279 to i8
  %281 = lshr i32 %274, 31
  %282 = lshr i32 %277, 31
  %283 = xor i32 %282, %281
  %284 = xor i32 %279, %281
  %285 = add nuw nsw i32 %284, %283
  %286 = icmp eq i32 %285, 2
  %287 = icmp ne i8 %280, 0
  %288 = xor i1 %287, %286
  %289 = select i1 %288, i64 12, i64 133
  %290 = add i64 %269, %289
  br i1 %288, label %block_402e0c, label %block_402e85

block_402bb0:                                     ; preds = %block_402ba2
  %291 = add i64 %181, -40
  %292 = add i64 %565, 7
  %293 = inttoptr i64 %291 to i32*
  store i32 0, i32* %293
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402bb7

block_402d2f:                                     ; preds = %block_402d23
  %295 = sext i32 %531 to i64
  %296 = shl nsw i64 %295, 3
  %297 = add i64 %296, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %296, ptrtoint (%adcgen_type* @adcgen to i64)
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = sext i64 %299 to i128
  %304 = and i128 %303, -18446744073709551616
  %305 = sext i64 %302 to i128
  %306 = and i128 %305, -18446744073709551616
  %307 = zext i64 %299 to i128
  %308 = or i128 %304, %307
  %309 = zext i64 %302 to i128
  %310 = or i128 %306, %309
  %311 = mul nsw i128 %310, %308
  %312 = trunc i128 %311 to i64
  %313 = sext i64 %312 to i128
  %314 = icmp ne i128 %313, %311
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %26, align 1, !tbaa !1264
  %316 = trunc i128 %311 to i32
  %317 = and i32 %316, 255
  %318 = tail call i32 @llvm.ctpop.i32(i32 %317) #10
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %27, align 1, !tbaa !1278
  store i8 0, i8* %28, align 1, !tbaa !1279
  store i8 0, i8* %29, align 1, !tbaa !1280
  %322 = lshr i64 %312, 63
  %323 = trunc i64 %322 to i8
  store i8 %323, i8* %30, align 1, !tbaa !1281
  store i8 %315, i8* %31, align 1, !tbaa !1282
  %324 = add i64 %527, -24
  %325 = inttoptr i64 %324 to i64*
  %326 = load i64, i64* %325
  %327 = add i64 %296, %326
  %328 = inttoptr i64 %327 to i64*
  store i64 %312, i64* %328
  %329 = inttoptr i64 %529 to i32*
  %330 = load i32, i32* %329
  %331 = sext i32 %330 to i64
  %332 = shl nsw i64 %331, 3
  %333 = add i64 %332, ptrtoint (%adcprime_type* @adcprime to i64)
  %334 = inttoptr i64 %333 to i64*
  %335 = load i64, i64* %334
  %336 = inttoptr i64 %324 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %332, %337
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %527, -104
  %342 = inttoptr i64 %341 to i64*
  store i64 %335, i64* %342
  store i64 %340, i64* %13, align 8, !tbaa !1240
  %343 = add i64 %527, -112
  %344 = inttoptr i64 %343 to i64*
  store i64 %331, i64* %344
  %345 = ashr i64 %340, 63
  store i64 %345, i64* %737, align 8, !tbaa !1240
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %14, align 8, !tbaa !1240
  %348 = shl i64 %347, 3
  %349 = add i64 %348, ptrtoint (%adcprime_type* @adcprime to i64)
  %350 = add i64 %547, 90
  store i64 %350, i64* %3, align 8
  %351 = inttoptr i64 %349 to i64*
  %352 = load i64, i64* %351
  %353 = sext i64 %352 to i128
  %354 = and i128 %353, -18446744073709551616
  %355 = zext i64 %345 to i128
  %356 = shl nuw i128 %355, 64
  %357 = zext i64 %340 to i128
  %358 = or i128 %356, %357
  %359 = zext i64 %352 to i128
  %360 = or i128 %354, %359
  %361 = sdiv i128 %358, %360
  %362 = trunc i128 %361 to i64
  %363 = and i128 %361, 18446744073709551615
  %364 = sext i64 %362 to i128
  %365 = and i128 %364, -18446744073709551616
  %366 = or i128 %365, %363
  %367 = icmp eq i128 %361, %366
  br i1 %367, label %372, label %368

; <label>:368:                                    ; preds = %block_402d2f
  %369 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %350, %struct.Memory* %528) #14
  %370 = load i64, i64* %3, align 8
  %371 = load i64, i64* %13, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10

; <label>:372:                                    ; preds = %block_402d2f
  %373 = srem i128 %358, %360
  %374 = trunc i128 %373 to i64
  store i64 %374, i64* %737, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit10: ; preds = %372, %368
  %375 = phi i64 [ %371, %368 ], [ %362, %372 ]
  %376 = phi i64 [ %370, %368 ], [ %350, %372 ]
  %377 = phi %struct.Memory* [ %369, %368 ], [ %528, %372 ]
  %378 = load i64, i64* %19, align 8
  %379 = add i64 %378, -104
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380
  %382 = mul i64 %375, %381
  %383 = add i64 %378, -24
  %384 = inttoptr i64 %383 to i64*
  %385 = load i64, i64* %384
  %386 = add i64 %378, -40
  %387 = inttoptr i64 %386 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  store i64 %389, i64* %17, align 8, !tbaa !1240
  %390 = shl nsw i64 %389, 3
  %391 = add i64 %390, %385
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = sub i64 %393, %382
  store i64 %394, i64* %20, align 8, !tbaa !1240
  %395 = inttoptr i64 %391 to i64*
  store i64 %394, i64* %395
  %396 = inttoptr i64 %383 to i64*
  %397 = load i64, i64* %396
  %398 = inttoptr i64 %386 to i32*
  %399 = load i32, i32* %398
  %400 = sext i32 %399 to i64
  %401 = shl nsw i64 %400, 3
  %402 = add i64 %401, %397
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = load i64, i64* %19, align 8
  %406 = add i64 %405, -40
  %407 = inttoptr i64 %406 to i32*
  %408 = load i32, i32* %407
  %409 = sext i32 %408 to i64
  %410 = shl nsw i64 %409, 3
  %411 = add i64 %410, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %412 = inttoptr i64 %411 to i64*
  store i64 %404, i64* %412
  %413 = inttoptr i64 %406 to i32*
  %414 = load i32, i32* %413
  %415 = sext i32 %414 to i64
  %416 = shl nsw i64 %415, 3
  %417 = add i64 %416, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %418 = inttoptr i64 %417 to i64*
  %419 = load i64, i64* %418
  %420 = add i64 %405, -48
  %421 = inttoptr i64 %420 to i32*
  %422 = load i32, i32* %421
  %423 = sext i32 %422 to i64
  store i64 %423, i64* %16, align 8, !tbaa !1240
  %424 = sub i64 %419, %423
  %425 = icmp eq i64 %424, 0
  %426 = lshr i64 %424, 63
  %427 = trunc i64 %426 to i8
  %428 = lshr i64 %419, 63
  %429 = lshr i64 %423, 63
  %430 = xor i64 %428, %429
  %431 = xor i64 %426, %428
  %432 = add nuw nsw i64 %431, %430
  %433 = icmp eq i64 %432, 2
  %434 = icmp ne i8 %427, 0
  %435 = xor i1 %434, %433
  %436 = or i1 %425, %435
  %437 = select i1 %436, i64 93, i64 76
  %438 = add i64 %376, %437
  br i1 %436, label %block_402de6, label %block_402dd5

block_402c54:                                     ; preds = %block_402bb7
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64* %16, align 8, !tbaa !1240
  %439 = load i64, i64* @stdout
  store i64 %439, i64* %17, align 8, !tbaa !1240
  %440 = add i64 %736, 25
  %441 = load i64, i64* %18, align 8, !tbaa !1240
  %442 = add i64 %441, -8
  %443 = inttoptr i64 %442 to i64*
  store i64 %440, i64* %443
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %447 = load i64, i64* %445, align 8, !alias.scope !2403, !noalias !2406
  %448 = load i64, i64* %446, align 8, !alias.scope !2403, !noalias !2406
  %449 = inttoptr i64 %441 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %441, 8
  %452 = inttoptr i64 %451 to i64*
  %453 = load i64, i64* %452
  %454 = add i64 %441, 16
  %455 = inttoptr i64 %454 to i64*
  %456 = load i64, i64* %455
  %457 = add i64 %441, 24
  %458 = inttoptr i64 %457 to i64*
  %459 = load i64, i64* %458
  %460 = add i64 %441, 32
  %461 = inttoptr i64 %460 to i64*
  %462 = load i64, i64* %461
  %463 = add i64 %441, 40
  %464 = inttoptr i64 %463 to i64*
  %465 = load i64, i64* %464
  %466 = add i64 %441, 48
  %467 = inttoptr i64 %466 to i64*
  %468 = load i64, i64* %467
  %469 = add i64 %441, 56
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  %472 = add i64 %441, 64
  %473 = inttoptr i64 %472 to i64*
  %474 = load i64, i64* %473
  %475 = add i64 %441, 72
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = inttoptr i64 %442 to i64*
  %479 = load i64, i64* %478
  store i64 %479, i64* %3, align 8, !alias.scope !2403, !noalias !2406
  store i64 %441, i64* %18, align 8, !alias.scope !2403, !noalias !2406
  %480 = tail call i64 @fprintf(i64 %439, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64 %714, i64 %713, i64 %447, i64 %448, i64 %450, i64 %453, i64 %456, i64 %459, i64 %462, i64 %465, i64 %468, i64 %471, i64 %474, i64 %477), !noalias !2403
  %481 = load i64, i64* %19, align 8
  %482 = add i64 %481, -40
  %483 = load i64, i64* %3, align 8
  %484 = inttoptr i64 %482 to i32*
  store i32 0, i32* %484
  %485 = add i64 %481, -88
  %486 = trunc i64 %480 to i32
  %487 = add i64 %483, 10
  %488 = inttoptr i64 %485 to i32*
  store i32 %486, i32* %488
  br label %block_402c77

block_402b2c:                                     ; preds = %block_402af1
  %489 = add i64 %181, -56
  %490 = inttoptr i64 %489 to i64*
  store i64 ptrtoint (%adcexp_type* @adcexp to i64), i64* %490
  %491 = add i64 %181, -33
  %492 = inttoptr i64 %491 to i8*
  %493 = load i8, i8* %492
  %494 = sext i8 %493 to i32
  %495 = add nsw i32 %494, -65
  %496 = zext i32 %495 to i64
  %497 = lshr i32 %495, 31
  store i64 %496, i64* %14, align 8, !tbaa !1240
  %498 = add nsw i32 %494, -87
  %499 = icmp ult i32 %495, 22
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %26, align 1, !tbaa !1264
  %501 = and i32 %498, 255
  %502 = tail call i32 @llvm.ctpop.i32(i32 %501) #10
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  store i8 %505, i8* %27, align 1, !tbaa !1278
  %506 = xor i32 %495, 16
  %507 = xor i32 %506, %498
  %508 = lshr i32 %507, 4
  %509 = trunc i32 %508 to i8
  %510 = and i8 %509, 1
  store i8 %510, i8* %28, align 1, !tbaa !1279
  %511 = icmp eq i32 %498, 0
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %29, align 1, !tbaa !1280
  %513 = lshr i32 %498, 31
  %514 = trunc i32 %513 to i8
  store i8 %514, i8* %30, align 1, !tbaa !1281
  %515 = xor i32 %513, %497
  %516 = add nuw nsw i32 %515, %497
  %517 = icmp eq i32 %516, 2
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %31, align 1, !tbaa !1282
  %519 = add i64 %181, -80
  %520 = inttoptr i64 %519 to i64*
  store i64 %496, i64* %520
  %521 = add i64 %181, -84
  %522 = inttoptr i64 %521 to i32*
  store i32 %498, i32* %522
  %523 = or i1 %511, %499
  %524 = select i1 %523, i64 33, i64 118
  %525 = add i64 %201, %524
  br i1 %523, label %block_402b4d, label %block_402ba2

block_402d23:                                     ; preds = %block_402d04, %block_402de6
  %526 = phi i64 [ %746, %block_402d04 ], [ %180, %block_402de6 ]
  %527 = phi i64 [ %738, %block_402d04 ], [ %405, %block_402de6 ]
  %528 = phi %struct.Memory* [ %740, %block_402d04 ], [ %175, %block_402de6 ]
  %529 = add i64 %527, -40
  %530 = inttoptr i64 %529 to i32*
  %531 = load i32, i32* %530
  %532 = add i64 %527, -8
  %533 = inttoptr i64 %532 to i32*
  %534 = load i32, i32* %533
  %535 = sub i32 %531, %534
  %536 = lshr i32 %535, 31
  %537 = trunc i32 %536 to i8
  %538 = lshr i32 %531, 31
  %539 = lshr i32 %534, 31
  %540 = xor i32 %539, %538
  %541 = xor i32 %536, %538
  %542 = add nuw nsw i32 %541, %540
  %543 = icmp eq i32 %542, 2
  %544 = icmp ne i8 %537, 0
  %545 = xor i1 %544, %543
  %546 = select i1 %545, i64 12, i64 214
  %547 = add i64 %526, %546
  br i1 %545, label %block_402d2f, label %block_402df9

block_402c36:                                     ; preds = %block_402bdb
  %548 = add i64 %569, -60
  %549 = inttoptr i64 %548 to i32*
  %550 = load i32, i32* %549
  %551 = sext i32 %550 to i64
  store i64 %581, i64* %14, align 8, !tbaa !1240
  %552 = add i64 %582, ptrtoint (%adcgen_type* @adcgen to i64)
  %553 = inttoptr i64 %552 to i64*
  store i64 %551, i64* %553
  %554 = inttoptr i64 %578 to i32*
  %555 = load i32, i32* %554
  %556 = add i32 %555, 1
  %557 = inttoptr i64 %578 to i32*
  store i32 %556, i32* %557
  %558 = add i64 %599, -127
  br label %block_402bb7

block_402ba2:                                     ; preds = %block_402b5b, %block_402b81, %block_402b4d, %block_402b94, %block_402b2c, %block_402b6e
  %559 = phi i64 [ %496, %block_402b2c ], [ 4205403, %block_402b5b ], [ 4205422, %block_402b6e ], [ 4205441, %block_402b81 ], [ 4205460, %block_402b94 ], [ 4205474, %block_402b4d ]
  %560 = phi i64 [ %525, %block_402b2c ], [ 4205474, %block_402b5b ], [ 4205474, %block_402b6e ], [ 4205474, %block_402b81 ], [ 4205474, %block_402b94 ], [ 4205474, %block_402b4d ]
  %561 = phi %struct.Memory* [ %2, %block_402b2c ], [ %2, %block_402b5b ], [ %2, %block_402b6e ], [ %2, %block_402b81 ], [ %2, %block_402b94 ], [ %2, %block_402b4d ]
  %562 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %563 = icmp eq i32 %562, 0
  %564 = select i1 %563, i64 14, i64 354
  %565 = add i64 %560, %564
  br i1 %563, label %block_402bb0, label %block_402ba2.block_402d04_crit_edge

block_402ba2.block_402d04_crit_edge:              ; preds = %block_402ba2
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402d04

block_402b94:                                     ; preds = %block_402b4d
  %567 = inttoptr i64 %489 to i64*
  store i64 ptrtoint (%adcexpB_type* @adcexpB to i64), i64* %567
  br label %block_402ba2

block_402bdb:                                     ; preds = %block_402bc3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %568 = phi i64 [ %267, %block_402bc3 ], [ %150, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %569 = phi i64 [ %716, %block_402bc3 ], [ %138, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %570 = phi %struct.Memory* [ %717, %block_402bc3 ], [ %141, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %571 = add i64 %569, -44
  %572 = inttoptr i64 %571 to i32*
  %573 = load i32, i32* %572
  %574 = sext i32 %573 to i64
  %575 = add i64 %569, -56
  %576 = inttoptr i64 %575 to i64*
  %577 = load i64, i64* %576
  %578 = add i64 %569, -40
  %579 = inttoptr i64 %578 to i32*
  %580 = load i32, i32* %579
  %581 = sext i32 %580 to i64
  store i64 %581, i64* %15, align 8, !tbaa !1240
  %582 = shl nsw i64 %581, 3
  %583 = add i64 %582, %577
  %584 = inttoptr i64 %583 to i64*
  %585 = load i64, i64* %584
  %586 = add i64 %585, -1
  %587 = lshr i64 %586, 63
  %588 = sub i64 %574, %586
  %589 = lshr i64 %588, 63
  %590 = trunc i64 %589 to i8
  %591 = lshr i64 %574, 63
  %592 = xor i64 %587, %591
  %593 = xor i64 %589, %591
  %594 = add nuw nsw i64 %593, %592
  %595 = icmp eq i64 %594, 2
  %596 = icmp ne i8 %590, 0
  %597 = xor i1 %596, %595
  %598 = select i1 %597, i64 29, i64 91
  %599 = add i64 %568, %598
  br i1 %597, label %block_402bf8, label %block_402c36

block_402b4d:                                     ; preds = %block_402b2c
  %600 = inttoptr i64 %519 to i64*
  %601 = load i64, i64* %600
  store i64 %601, i64* %13, align 8, !tbaa !1240
  %602 = shl i64 %601, 3
  %603 = add i64 %602, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 616)
  %604 = inttoptr i64 %603 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %14, align 8, !tbaa !1240
  store i64 %605, i64* %3, align 8, !tbaa !1240
  switch i64 %605, label %953 [
    i64 4205474, label %block_402ba2
    i64 4205460, label %block_402b94
    i64 4205441, label %block_402b81
    i64 4205422, label %block_402b6e
    i64 4205403, label %block_402b5b
  ]

block_402e0c:                                     ; preds = %block_402e00
  %606 = sext i32 %274 to i64
  %607 = shl nsw i64 %606, 3
  %608 = add i64 %607, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %270, -48
  %612 = inttoptr i64 %611 to i32*
  %613 = load i32, i32* %612
  %614 = sext i32 %613 to i64
  %615 = sext i64 %610 to i128
  %616 = and i128 %615, -18446744073709551616
  %617 = sext i32 %613 to i128
  %618 = and i128 %617, -18446744073709551616
  %619 = zext i64 %610 to i128
  %620 = or i128 %616, %619
  %621 = zext i64 %614 to i128
  %622 = or i128 %618, %621
  %623 = mul nsw i128 %620, %622
  %624 = trunc i128 %623 to i64
  %625 = sext i64 %624 to i128
  %626 = icmp ne i128 %625, %623
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %26, align 1, !tbaa !1264
  %628 = trunc i128 %623 to i32
  %629 = and i32 %628, 255
  %630 = tail call i32 @llvm.ctpop.i32(i32 %629) #10
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  %633 = xor i8 %632, 1
  store i8 %633, i8* %27, align 1, !tbaa !1278
  store i8 0, i8* %28, align 1, !tbaa !1279
  store i8 0, i8* %29, align 1, !tbaa !1280
  %634 = lshr i64 %624, 63
  %635 = trunc i64 %634 to i8
  store i8 %635, i8* %30, align 1, !tbaa !1281
  store i8 %627, i8* %31, align 1, !tbaa !1282
  %636 = add i64 %270, -32
  %637 = inttoptr i64 %636 to i64*
  %638 = load i64, i64* %637
  %639 = add i64 %607, %638
  %640 = inttoptr i64 %639 to i64*
  store i64 %624, i64* %640
  %641 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%adcgen_type* @adcgen to i64), i64 160) to i32*)
  %642 = sext i32 %641 to i64
  %643 = inttoptr i64 %636 to i64*
  %644 = load i64, i64* %643
  %645 = inttoptr i64 %272 to i32*
  %646 = load i32, i32* %645
  %647 = sext i32 %646 to i64
  %648 = shl nsw i64 %647, 3
  %649 = add i64 %648, %644
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %270, -120
  %653 = inttoptr i64 %652 to i64*
  store i64 %642, i64* %653
  store i64 %651, i64* %13, align 8, !tbaa !1240
  %654 = add i64 %270, -128
  %655 = inttoptr i64 %654 to i64*
  store i64 %642, i64* %655
  %656 = ashr i64 %651, 63
  store i64 %656, i64* %737, align 8, !tbaa !1240
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %14, align 8, !tbaa !1240
  %659 = add i64 %290, 80
  store i64 %659, i64* %3, align 8
  %660 = sext i64 %658 to i128
  %661 = and i128 %660, -18446744073709551616
  %662 = zext i64 %656 to i128
  %663 = shl nuw i128 %662, 64
  %664 = zext i64 %651 to i128
  %665 = or i128 %663, %664
  %666 = zext i64 %658 to i128
  %667 = or i128 %661, %666
  %668 = sdiv i128 %665, %667
  %669 = trunc i128 %668 to i64
  %670 = and i128 %668, 18446744073709551615
  %671 = sext i64 %669 to i128
  %672 = and i128 %671, -18446744073709551616
  %673 = or i128 %672, %670
  %674 = icmp eq i128 %668, %673
  br i1 %674, label %679, label %675

; <label>:675:                                    ; preds = %block_402e0c
  %676 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %659, %struct.Memory* %271) #14
  %677 = load i64, i64* %3, align 8
  %678 = load i64, i64* %13, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:679:                                    ; preds = %block_402e0c
  %680 = srem i128 %665, %667
  %681 = trunc i128 %680 to i64
  store i64 %681, i64* %737, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %679, %675
  %682 = phi i64 [ %678, %675 ], [ %669, %679 ]
  %683 = phi i64 [ %677, %675 ], [ %659, %679 ]
  %684 = phi %struct.Memory* [ %676, %675 ], [ %271, %679 ]
  %685 = load i64, i64* %19, align 8
  %686 = add i64 %685, -120
  %687 = inttoptr i64 %686 to i64*
  %688 = load i64, i64* %687
  %689 = mul i64 %682, %688
  store i64 %689, i64* %16, align 8, !tbaa !1240
  %690 = add i64 %685, -32
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %685, -40
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %17, align 8, !tbaa !1240
  %697 = shl nsw i64 %696, 3
  %698 = add i64 %697, %692
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = sub i64 %700, %689
  store i64 %701, i64* %20, align 8, !tbaa !1240
  %702 = inttoptr i64 %698 to i64*
  store i64 %701, i64* %702
  %703 = inttoptr i64 %693 to i32*
  %704 = load i32, i32* %703
  %705 = add i32 %704, 1
  %706 = load i64, i64* %19, align 8
  %707 = add i64 %706, -40
  %708 = inttoptr i64 %707 to i32*
  store i32 %705, i32* %708
  %709 = add i64 %683, -92
  br label %block_402e00

block_402b81:                                     ; preds = %block_402b4d
  %710 = inttoptr i64 %489 to i64*
  store i64 ptrtoint (%adcexpA_type* @adcexpA to i64), i64* %710
  br label %block_402ba2

block_402e85:                                     ; preds = %block_402e00
  %711 = add i64 %270, -4
  %712 = inttoptr i64 %711 to i32*
  store i32 1, i32* %712
  br label %block_402e8c

block_402bb7:                                     ; preds = %block_402c36, %block_402bb0
  %713 = phi i64 [ %559, %block_402bb0 ], [ %581, %block_402c36 ]
  %714 = phi i64 [ %40, %block_402bb0 ], [ %581, %block_402c36 ]
  %715 = phi i64 [ %292, %block_402bb0 ], [ %558, %block_402c36 ]
  %716 = phi i64 [ %181, %block_402bb0 ], [ %569, %block_402c36 ]
  %717 = phi %struct.Memory* [ %561, %block_402bb0 ], [ %570, %block_402c36 ]
  %718 = add i64 %716, -40
  %719 = inttoptr i64 %718 to i32*
  %720 = load i32, i32* %719
  %721 = add i64 %716, -8
  %722 = inttoptr i64 %721 to i32*
  %723 = load i32, i32* %722
  %724 = sub i32 %720, %723
  %725 = lshr i32 %724, 31
  %726 = trunc i32 %725 to i8
  %727 = lshr i32 %720, 31
  %728 = lshr i32 %723, 31
  %729 = xor i32 %728, %727
  %730 = xor i32 %725, %727
  %731 = add nuw nsw i32 %730, %729
  %732 = icmp eq i32 %731, 2
  %733 = icmp ne i8 %726, 0
  %734 = xor i1 %733, %732
  %735 = select i1 %734, i64 12, i64 157
  %736 = add i64 %715, %735
  br i1 %734, label %block_402bc3, label %block_402c54

block_402d04:                                     ; preds = %block_402ba2.block_402d04_crit_edge, %block_402cff
  %737 = phi i64* [ %566, %block_402ba2.block_402d04_crit_edge ], [ %294, %block_402cff ]
  %738 = phi i64 [ %181, %block_402ba2.block_402d04_crit_edge ], [ %152, %block_402cff ]
  %739 = phi i64 [ %565, %block_402ba2.block_402d04_crit_edge ], [ %70, %block_402cff ]
  %740 = phi %struct.Memory* [ %561, %block_402ba2.block_402d04_crit_edge ], [ %153, %block_402cff ]
  %741 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %742 = add i32 %741, 1
  store i32 %742, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %743 = add i64 %738, -48
  %744 = inttoptr i64 %743 to i32*
  store i32 0, i32* %744
  %745 = add i64 %738, -40
  %746 = add i64 %739, 31
  %747 = inttoptr i64 %745 to i32*
  store i32 0, i32* %747
  br label %block_402d23

block_402b5b:                                     ; preds = %block_402b4d
  %748 = inttoptr i64 %489 to i64*
  store i64 ptrtoint (%adcexpS_type* @adcexpS to i64), i64* %748
  br label %block_402ba2

block_402c83:                                     ; preds = %block_402c77
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), i64* %16, align 8, !tbaa !1240
  store i64 2, i64* %14, align 8, !tbaa !1240
  %749 = sext i32 %156 to i64
  %750 = shl nsw i64 %749, 3
  %751 = add i64 %750, ptrtoint (%adcprime_type* @adcprime to i64)
  %752 = inttoptr i64 %751 to i64*
  %753 = load i64, i64* %752
  %754 = add i64 %753, 1
  %755 = icmp eq i64 %753, -1
  %756 = icmp eq i64 %754, 0
  %757 = or i1 %755, %756
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %26, align 1, !tbaa !1264
  %759 = trunc i64 %754 to i32
  %760 = and i32 %759, 255
  %761 = tail call i32 @llvm.ctpop.i32(i32 %760) #10
  %762 = trunc i32 %761 to i8
  %763 = and i8 %762, 1
  %764 = xor i8 %763, 1
  store i8 %764, i8* %27, align 1, !tbaa !1278
  %765 = xor i64 %754, %753
  %766 = lshr i64 %765, 4
  %767 = trunc i64 %766 to i8
  %768 = and i8 %767, 1
  store i8 %768, i8* %28, align 1, !tbaa !1279
  %769 = zext i1 %756 to i8
  store i8 %769, i8* %29, align 1, !tbaa !1280
  %770 = lshr i64 %754, 63
  %771 = trunc i64 %770 to i8
  store i8 %771, i8* %30, align 1, !tbaa !1281
  %772 = lshr i64 %753, 63
  %773 = xor i64 %770, %772
  %774 = add nuw nsw i64 %773, %770
  %775 = icmp eq i64 %774, 2
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %31, align 1, !tbaa !1282
  store i64 %754, i64* %13, align 8, !tbaa !1240
  %777 = ashr i64 %754, 63
  store i64 %777, i64* %294, align 8, !tbaa !1240
  %778 = add i64 %172, 41
  store i64 %778, i64* %3, align 8
  %779 = zext i64 %777 to i128
  %780 = shl nuw i128 %779, 64
  %781 = zext i64 %754 to i128
  %782 = or i128 %780, %781
  %783 = sdiv i128 %782, 2
  %784 = trunc i128 %783 to i64
  %785 = and i128 %783, 18446744073709551615
  %786 = sext i64 %784 to i128
  %787 = and i128 %786, -18446744073709551616
  %788 = or i128 %787, %785
  %789 = icmp eq i128 %783, %788
  br i1 %789, label %796, label %790

; <label>:790:                                    ; preds = %block_402c83
  %791 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %778, %struct.Memory* %153) #14
  %792 = load i64, i64* %19, align 8
  %793 = load i64, i64* %3, align 8
  %794 = load i64, i64* %13, align 8
  %795 = load i64, i64* %444, align 8, !alias.scope !2408, !noalias !2411
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29

; <label>:796:                                    ; preds = %block_402c83
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit29: ; preds = %796, %790
  %797 = phi i64 [ %795, %790 ], [ add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), %796 ]
  %798 = phi i64 [ %794, %790 ], [ %784, %796 ]
  %799 = phi i64 [ %793, %790 ], [ %778, %796 ]
  %800 = phi i64 [ %792, %790 ], [ %152, %796 ]
  %801 = phi %struct.Memory* [ %791, %790 ], [ %153, %796 ]
  %802 = add i64 %800, -40
  %803 = inttoptr i64 %802 to i32*
  %804 = load i32, i32* %803
  %805 = sext i32 %804 to i64
  %806 = shl nsw i64 %805, 3
  %807 = add i64 %806, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %808 = inttoptr i64 %807 to i64*
  store i64 %798, i64* %808
  %809 = load i64, i64* @stdout
  store i64 %809, i64* %17, align 8, !tbaa !1240
  %810 = inttoptr i64 %802 to i32*
  %811 = load i32, i32* %810
  %812 = sext i32 %811 to i64
  %813 = shl nsw i64 %812, 3
  %814 = add i64 %813, ptrtoint (%adcprime_type* @adcprime to i64)
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %813, ptrtoint (%adcgen_type* @adcgen to i64)
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  store i64 %819, i64* %14, align 8, !tbaa !1240
  %820 = add i64 %813, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  store i64 %822, i64* %20, align 8, !tbaa !1240
  store i64 %816, i64* %15, align 8, !tbaa !1240
  %823 = add i64 %799, 66
  %824 = load i64, i64* %18, align 8, !tbaa !1240
  %825 = add i64 %824, -8
  %826 = inttoptr i64 %825 to i64*
  store i64 %823, i64* %826
  %827 = load i64, i64* %446, align 8, !alias.scope !2408, !noalias !2411
  %828 = inttoptr i64 %824 to i64*
  %829 = load i64, i64* %828
  %830 = add i64 %824, 8
  %831 = inttoptr i64 %830 to i64*
  %832 = load i64, i64* %831
  %833 = add i64 %824, 16
  %834 = inttoptr i64 %833 to i64*
  %835 = load i64, i64* %834
  %836 = add i64 %824, 24
  %837 = inttoptr i64 %836 to i64*
  %838 = load i64, i64* %837
  %839 = add i64 %824, 32
  %840 = inttoptr i64 %839 to i64*
  %841 = load i64, i64* %840
  %842 = add i64 %824, 40
  %843 = inttoptr i64 %842 to i64*
  %844 = load i64, i64* %843
  %845 = add i64 %824, 48
  %846 = inttoptr i64 %845 to i64*
  %847 = load i64, i64* %846
  %848 = add i64 %824, 56
  %849 = inttoptr i64 %848 to i64*
  %850 = load i64, i64* %849
  %851 = add i64 %824, 64
  %852 = inttoptr i64 %851 to i64*
  %853 = load i64, i64* %852
  %854 = add i64 %824, 72
  %855 = inttoptr i64 %854 to i64*
  %856 = load i64, i64* %855
  %857 = inttoptr i64 %825 to i64*
  %858 = load i64, i64* %857
  store i64 %858, i64* %3, align 8, !alias.scope !2408, !noalias !2411
  store i64 %824, i64* %18, align 8, !alias.scope !2408, !noalias !2411
  %859 = tail call i64 @fprintf(i64 %809, i64 %797, i64 %816, i64 %819, i64 %822, i64 %827, i64 %829, i64 %832, i64 %835, i64 %838, i64 %841, i64 %844, i64 %847, i64 %850, i64 %853, i64 %856), !noalias !2408
  %860 = load i64, i64* %19, align 8
  %861 = add i64 %860, -92
  %862 = trunc i64 %859 to i32
  %863 = load i64, i64* %3, align 8
  %864 = inttoptr i64 %861 to i32*
  store i32 %862, i32* %864
  %865 = add i64 %860, -40
  %866 = inttoptr i64 %865 to i32*
  %867 = load i32, i32* %866
  %868 = add i32 %867, 1
  %869 = inttoptr i64 %865 to i32*
  store i32 %868, i32* %869
  %870 = add i64 %863, -119
  br label %block_402c77

block_402b01:                                     ; preds = %block_402af1
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1375), i64* %16, align 8, !tbaa !1240
  %871 = load i64, i64* @stderr
  store i64 %871, i64* %17, align 8, !tbaa !1240
  store i64 %185, i64* %15, align 8, !tbaa !1240
  %872 = add i64 %201, 28
  %873 = load i64, i64* %18, align 8, !tbaa !1240
  %874 = add i64 %873, -8
  %875 = inttoptr i64 %874 to i64*
  store i64 %872, i64* %875
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %878 = load i64, i64* %876, align 8, !alias.scope !2413, !noalias !2416
  %879 = load i64, i64* %877, align 8, !alias.scope !2413, !noalias !2416
  %880 = inttoptr i64 %873 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %873, 8
  %883 = inttoptr i64 %882 to i64*
  %884 = load i64, i64* %883
  %885 = add i64 %873, 16
  %886 = inttoptr i64 %885 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %873, 24
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %873, 32
  %892 = inttoptr i64 %891 to i64*
  %893 = load i64, i64* %892
  %894 = add i64 %873, 40
  %895 = inttoptr i64 %894 to i64*
  %896 = load i64, i64* %895
  %897 = add i64 %873, 48
  %898 = inttoptr i64 %897 to i64*
  %899 = load i64, i64* %898
  %900 = add i64 %873, 56
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = add i64 %873, 64
  %904 = inttoptr i64 %903 to i64*
  %905 = load i64, i64* %904
  %906 = add i64 %873, 72
  %907 = inttoptr i64 %906 to i64*
  %908 = load i64, i64* %907
  %909 = inttoptr i64 %874 to i64*
  %910 = load i64, i64* %909
  store i64 %910, i64* %3, align 8, !alias.scope !2413, !noalias !2416
  store i64 %873, i64* %18, align 8, !alias.scope !2413, !noalias !2416
  %911 = tail call i64 @fprintf(i64 %871, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1375), i64 %185, i64 %43, i64 %878, i64 %879, i64 %881, i64 %884, i64 %887, i64 %890, i64 %893, i64 %896, i64 %899, i64 %902, i64 %905, i64 %908), !noalias !2413
  %912 = load i64, i64* %19, align 8
  %913 = add i64 %912, -4
  %914 = inttoptr i64 %913 to i32*
  store i32 0, i32* %914
  %915 = add i64 %912, -68
  %916 = trunc i64 %911 to i32
  %917 = inttoptr i64 %915 to i32*
  store i32 %916, i32* %917
  br label %block_402e8c

block_402e8c:                                     ; preds = %block_402b01, %block_402e85, %block_402ac6
  %918 = phi i64 [ %270, %block_402e85 ], [ %912, %block_402b01 ], [ %252, %block_402ac6 ]
  %919 = phi %struct.Memory* [ %271, %block_402e85 ], [ %2, %block_402b01 ], [ %2, %block_402ac6 ]
  %920 = add i64 %918, -4
  %921 = inttoptr i64 %920 to i32*
  %922 = load i32, i32* %921
  %923 = zext i32 %922 to i64
  store i64 %923, i64* %13, align 8, !tbaa !1240
  %924 = load i64, i64* %18, align 8
  %925 = add i64 %924, 128
  %926 = icmp ugt i64 %924, -129
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %26, align 1, !tbaa !1264
  %928 = trunc i64 %925 to i32
  %929 = and i32 %928, 255
  %930 = tail call i32 @llvm.ctpop.i32(i32 %929) #10
  %931 = trunc i32 %930 to i8
  %932 = and i8 %931, 1
  %933 = xor i8 %932, 1
  store i8 %933, i8* %27, align 1, !tbaa !1278
  %934 = xor i64 %925, %924
  %935 = lshr i64 %934, 4
  %936 = trunc i64 %935 to i8
  %937 = and i8 %936, 1
  store i8 %937, i8* %28, align 1, !tbaa !1279
  %938 = icmp eq i64 %925, 0
  %939 = zext i1 %938 to i8
  store i8 %939, i8* %29, align 1, !tbaa !1280
  %940 = lshr i64 %925, 63
  %941 = trunc i64 %940 to i8
  store i8 %941, i8* %30, align 1, !tbaa !1281
  %942 = lshr i64 %924, 63
  %943 = xor i64 %940, %942
  %944 = add nuw nsw i64 %943, %940
  %945 = icmp eq i64 %944, 2
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %31, align 1, !tbaa !1282
  %947 = add i64 %924, 136
  %948 = inttoptr i64 %925 to i64*
  %949 = load i64, i64* %948
  store i64 %949, i64* %19, align 8, !tbaa !1240
  %950 = inttoptr i64 %947 to i64*
  %951 = load i64, i64* %950
  store i64 %951, i64* %3, align 8, !tbaa !1240
  %952 = add i64 %924, 144
  store i64 %952, i64* %18, align 8, !tbaa !1240
  ret %struct.Memory* %919

; <label>:953:                                    ; preds = %block_402b4d
  %954 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %605, %struct.Memory* %2)
  ret %struct.Memory* %954
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4097c0_restoreo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4097c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %13, align 8, !tbaa !1240
  %19 = add i64 %16, -16
  %20 = load i64, i64* %12, align 8
  %21 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %21
  %22 = add i64 %16, -20
  %23 = load i32, i32* %7, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %16, -24
  %26 = load i32, i32* %5, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = add i64 %16, -20
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29
  %31 = add i64 %16, -28
  %32 = inttoptr i64 %31 to i32*
  store i32 %30, i32* %32
  %33 = inttoptr i64 %25 to i32*
  %34 = load i32, i32* %33
  %35 = lshr i32 %34, 1
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %10, align 8, !tbaa !1240
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = add i64 %16, -48
  %44 = inttoptr i64 %43 to i32*
  store i32 %35, i32* %44
  %45 = add i64 %16, -36
  %46 = add i64 %16, -32
  %47 = add i64 %16, -40
  %48 = add i64 %16, -44
  %49 = add i64 %16, -16
  %50 = add i64 %16, -52
  %51 = add i64 %16, -64
  br label %block_4097dd

block_4097fe:                                     ; preds = %block_4097e9
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52
  %54 = add i32 %152, -1
  %55 = zext i32 %54 to i64
  %56 = shl nuw nsw i64 %55, 4
  %57 = add i64 %56, %53
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58
  %60 = shl nuw nsw i64 %153, 4
  %61 = add i64 %60, %53
  %62 = inttoptr i64 %61 to i32*
  %63 = load i32, i32* %62
  %64 = icmp ult i32 %59, %63
  %65 = zext i1 %64 to i32
  %66 = add i32 %152, %65
  br label %block_409841

block_40987d:                                     ; preds = %block_409841
  %67 = inttoptr i64 %50 to i32*
  store i32 %175, i32* %67
  %68 = inttoptr i64 %49 to i64*
  %69 = load i64, i64* %68
  %70 = inttoptr i64 %48 to i32*
  %71 = load i32, i32* %70
  %72 = zext i32 %71 to i64
  %73 = shl nuw nsw i64 %72, 4
  %74 = add i64 %73, %69
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = inttoptr i64 %47 to i32*
  %78 = load i32, i32* %77
  %79 = zext i32 %78 to i64
  %80 = shl nuw nsw i64 %79, 4
  %81 = add i64 %80, %69
  %82 = inttoptr i64 %81 to i32*
  store i32 %76, i32* %82
  %83 = inttoptr i64 %50 to i32*
  %84 = load i32, i32* %83
  %85 = inttoptr i64 %49 to i64*
  %86 = load i64, i64* %85
  %87 = inttoptr i64 %48 to i32*
  %88 = load i32, i32* %87
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %11, align 8, !tbaa !1240
  %90 = shl nuw nsw i64 %89, 4
  %91 = add i64 %90, %86
  %92 = inttoptr i64 %91 to i32*
  store i32 %84, i32* %92
  %93 = inttoptr i64 %49 to i64*
  %94 = load i64, i64* %93
  %95 = inttoptr i64 %47 to i32*
  %96 = load i32, i32* %95
  %97 = zext i32 %96 to i64
  %98 = shl nuw nsw i64 %97, 4
  %99 = add i64 %98, %94
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = inttoptr i64 %51 to i64*
  store i64 %102, i64* %103
  %104 = inttoptr i64 %49 to i64*
  %105 = load i64, i64* %104
  %106 = inttoptr i64 %48 to i32*
  %107 = load i32, i32* %106
  %108 = zext i32 %107 to i64
  %109 = shl nuw nsw i64 %108, 4
  %110 = add i64 %109, %105
  %111 = add i64 %110, 8
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = inttoptr i64 %47 to i32*
  %115 = load i32, i32* %114
  %116 = zext i32 %115 to i64
  %117 = shl nuw nsw i64 %116, 4
  %118 = add i64 %117, %105
  %119 = add i64 %118, 8
  %120 = inttoptr i64 %119 to i64*
  store i64 %113, i64* %120
  %121 = inttoptr i64 %51 to i64*
  %122 = load i64, i64* %121
  %123 = inttoptr i64 %49 to i64*
  %124 = load i64, i64* %123
  %125 = inttoptr i64 %48 to i32*
  %126 = load i32, i32* %125
  %127 = zext i32 %126 to i64
  %128 = shl nuw nsw i64 %127, 4
  store i64 %128, i64* %12, align 8, !tbaa !1240
  %129 = add i64 %128, %124
  store i64 %129, i64* %10, align 8, !tbaa !1240
  %130 = add i64 %129, 8
  %131 = inttoptr i64 %130 to i64*
  store i64 %122, i64* %131
  %132 = inttoptr i64 %46 to i32*
  %133 = load i32, i32* %132
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %9, align 8, !tbaa !1240
  %135 = inttoptr i64 %31 to i32*
  store i32 %133, i32* %135
  br label %block_4097dd.backedge

block_4097dd:                                     ; preds = %block_4097dd.backedge, %block_4097c0
  %136 = phi %struct.Memory* [ %2, %block_4097c0 ], [ %148, %block_4097dd.backedge ]
  %137 = inttoptr i64 %31 to i32*
  %138 = load i32, i32* %137
  %139 = inttoptr i64 %43 to i32*
  %140 = load i32, i32* %139
  %141 = sub i32 %138, %140
  %142 = icmp ult i32 %138, %140
  %143 = icmp eq i32 %141, 0
  %144 = or i1 %143, %142
  br i1 %144, label %block_4097e9, label %block_409939

block_40992e:                                     ; preds = %block_409841
  %145 = inttoptr i64 %25 to i32*
  %146 = load i32, i32* %145
  %147 = inttoptr i64 %31 to i32*
  store i32 %146, i32* %147
  br label %block_4097dd.backedge

block_4097dd.backedge:                            ; preds = %block_40992e, %block_40987d
  %148 = phi %struct.Memory* [ %136, %block_40992e ], [ %136, %block_40987d ]
  br label %block_4097dd

block_4097e9:                                     ; preds = %block_4097dd
  %149 = shl i32 %138, 1
  %150 = inttoptr i64 %45 to i32*
  store i32 %149, i32* %150
  %151 = inttoptr i64 %45 to i32*
  %152 = load i32, i32* %151
  %153 = zext i32 %152 to i64
  %154 = inttoptr i64 %25 to i32*
  %155 = load i32, i32* %154
  %156 = icmp ult i32 %152, %155
  br i1 %156, label %block_4097fe, label %block_409841

block_409841:                                     ; preds = %block_4097e9, %block_4097fe
  %157 = phi i32 [ %152, %block_4097e9 ], [ %66, %block_4097fe ]
  %158 = inttoptr i64 %46 to i32*
  store i32 %157, i32* %158
  %159 = inttoptr i64 %46 to i32*
  %160 = load i32, i32* %159
  %161 = add i32 %160, -1
  %162 = inttoptr i64 %47 to i32*
  store i32 %161, i32* %162
  %163 = inttoptr i64 %31 to i32*
  %164 = load i32, i32* %163
  %165 = add i32 %164, -1
  %166 = inttoptr i64 %48 to i32*
  store i32 %165, i32* %166
  %167 = inttoptr i64 %49 to i64*
  %168 = load i64, i64* %167
  %169 = inttoptr i64 %47 to i32*
  %170 = load i32, i32* %169
  %171 = zext i32 %170 to i64
  %172 = shl nuw nsw i64 %171, 4
  %173 = add i64 %172, %168
  %174 = inttoptr i64 %173 to i32*
  %175 = load i32, i32* %174
  %176 = inttoptr i64 %48 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %11, align 8, !tbaa !1240
  %179 = shl nuw nsw i64 %178, 4
  store i64 %179, i64* %10, align 8, !tbaa !1240
  %180 = add i64 %179, %168
  store i64 %180, i64* %9, align 8, !tbaa !1240
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181
  %183 = icmp ugt i32 %175, %182
  br i1 %183, label %block_40987d, label %block_40992e

block_409939:                                     ; preds = %block_4097dd
  %184 = zext i32 %138 to i64
  store i64 %184, i64* %8, align 8, !tbaa !1240
  %185 = lshr i32 %141, 31
  %186 = lshr i32 %138, 31
  %187 = and i32 %141, 255
  %188 = tail call i32 @llvm.ctpop.i32(i32 %187) #10
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  %192 = xor i32 %140, %138
  %193 = xor i32 %192, %141
  %194 = lshr i32 %193, 4
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = trunc i32 %185 to i8
  %198 = xor i32 %185, %186
  %199 = lshr i32 %140, 31
  %200 = xor i32 %199, %186
  %201 = add nuw nsw i32 %198, %200
  %202 = icmp eq i32 %201, 2
  %203 = zext i1 %202 to i8
  store i8 0, i8* %37, align 1, !tbaa !1428
  store i8 %191, i8* %38, align 1, !tbaa !1428
  store i8 %196, i8* %39, align 1, !tbaa !1428
  store i8 0, i8* %40, align 1, !tbaa !1428
  store i8 %197, i8* %41, align 1, !tbaa !1428
  store i8 %203, i8* %42, align 1, !tbaa !1428
  %204 = load i64, i64* %13, align 8, !tbaa !1240
  %205 = add i64 %204, 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206
  store i64 %207, i64* %14, align 8, !tbaa !1240
  %208 = inttoptr i64 %205 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %3, align 8, !tbaa !1240
  %210 = add i64 %204, 16
  store i64 %210, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %136
}

; Function Attrs: noinline
define %struct.Memory* @sub_402176(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402176:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -156
  %6 = inttoptr i64 %5 to i32*
  store i32 64, i32* %6
  %7 = add i64 %1, 25
  %8 = tail call %struct.Memory* @sub_40218f_def_40215B(%struct.State* nonnull %0, i64 %7, %struct.Memory* %2)
  ret %struct.Memory* %8
}

; Function Attrs: noinline
define %struct.Memory* @sub_4074e0_CloseAdcView(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4074e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %8, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %11, -56
  store i64 %14, i64* %8, align 8, !tbaa !1240
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %11, -24
  %22 = load i64, i64* %7, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %25, 4232
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %29, i64 49, i64 30
  %31 = add i64 %30, %1
  br i1 %29, label %block_407511, label %block_4074fe

block_407673:                                     ; preds = %block_40763f, %block_407651
  %32 = phi i64 [ %134, %block_40763f ], [ %71, %block_407651 ]
  %33 = phi i64 [ %192, %block_40763f ], [ %65, %block_407651 ]
  %34 = phi %struct.Memory* [ %186, %block_40763f ], [ %186, %block_407651 ]
  %35 = add i64 %33, -16
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %37, 600
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, i64 49, i64 18
  %43 = add i64 %32, %42
  br i1 %41, label %block_4076a4, label %block_407685

block_4075e5:                                     ; preds = %block_4075ca
  %44 = add i64 %359, -4
  %45 = inttoptr i64 %44 to i32*
  store i32 6, i32* %45
  br label %block_407744

block_4076d8:                                     ; preds = %block_4076a4, %block_4076b6
  %46 = phi i64 [ %163, %block_4076a4 ], [ %148, %block_4076b6 ]
  %47 = phi i64 [ %153, %block_4076a4 ], [ %142, %block_4076b6 ]
  %48 = phi %struct.Memory* [ %154, %block_4076a4 ], [ %154, %block_4076b6 ]
  %49 = add i64 %47, -16
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  %52 = add i64 %51, 4464
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = icmp eq i64 %54, 0
  %56 = select i1 %55, i64 52, i64 18
  %57 = add i64 %46, %56
  br i1 %55, label %block_40770c, label %block_4076ea

block_407651:                                     ; preds = %block_40763f
  %58 = add i64 %134, 19
  %59 = load i64, i64* %8, align 8, !tbaa !1240
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %3, align 8, !alias.scope !2418, !noalias !2421
  store i64 %59, i64* %8, align 8, !alias.scope !2418, !noalias !2421
  %64 = tail call i64 @free(i64 %131), !noalias !2418
  %65 = load i64, i64* %9, align 8
  %66 = add i64 %65, -16
  %67 = load i64, i64* %3, align 8
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68
  %70 = add i64 %69, 632
  %71 = add i64 %67, 15
  %72 = inttoptr i64 %70 to i64*
  store i64 0, i64* %72
  br label %block_407673

block_4076ea:                                     ; preds = %block_4076d8
  %73 = add i64 %57, 19
  %74 = load i64, i64* %8, align 8, !tbaa !1240
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %3, align 8, !alias.scope !2423, !noalias !2426
  store i64 %74, i64* %8, align 8, !alias.scope !2423, !noalias !2426
  %79 = tail call i64 @free(i64 %54), !noalias !2423
  %80 = load i64, i64* %9, align 8
  %81 = add i64 %80, -16
  %82 = load i64, i64* %3, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %84, 4464
  %86 = add i64 %82, 15
  %87 = inttoptr i64 %85 to i64*
  store i64 0, i64* %87
  br label %block_40770c

block_40760c:                                     ; preds = %block_4075f1
  %88 = add i64 %313, -4
  %89 = inttoptr i64 %88 to i32*
  store i32 6, i32* %89
  br label %block_407744

block_407744:                                     ; preds = %block_407731, %block_407633, %block_40760c, %block_4075e5
  %90 = phi i64 [ %283, %block_407731 ], [ %192, %block_407633 ], [ %313, %block_40760c ], [ %359, %block_4075e5 ]
  %91 = phi %struct.Memory* [ %272, %block_407731 ], [ %186, %block_407633 ], [ %307, %block_40760c ], [ %353, %block_4075e5 ]
  %92 = add i64 %90, -4
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %6, align 8, !tbaa !1240
  %96 = load i64, i64* %8, align 8
  %97 = add i64 %96, 48
  %98 = icmp ugt i64 %96, -49
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %15, align 1, !tbaa !1264
  %100 = trunc i64 %97 to i32
  %101 = and i32 %100, 255
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* %16, align 1, !tbaa !1278
  %106 = xor i64 %96, 16
  %107 = xor i64 %106, %97
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %17, align 1, !tbaa !1279
  %111 = icmp eq i64 %97, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %18, align 1, !tbaa !1280
  %113 = lshr i64 %97, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %19, align 1, !tbaa !1281
  %115 = lshr i64 %96, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %113
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %20, align 1, !tbaa !1282
  %120 = add i64 %96, 56
  %121 = inttoptr i64 %97 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %9, align 8, !tbaa !1240
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %3, align 8, !tbaa !1240
  %125 = add i64 %96, 64
  store i64 %125, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %91

block_40763f:                                     ; preds = %block_407618
  %126 = add i64 %192, -16
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  %129 = add i64 %128, 632
  %130 = inttoptr i64 %129 to i64*
  %131 = load i64, i64* %130
  %132 = icmp eq i64 %131, 0
  %133 = select i1 %132, i64 52, i64 18
  %134 = add i64 %191, %133
  br i1 %132, label %block_407673, label %block_407651

block_4076b6:                                     ; preds = %block_4076a4
  %135 = add i64 %163, 19
  %136 = load i64, i64* %8, align 8, !tbaa !1240
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %135, i64* %138
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %3, align 8, !alias.scope !2428, !noalias !2431
  store i64 %136, i64* %8, align 8, !alias.scope !2428, !noalias !2431
  %141 = tail call i64 @free(i64 %160), !noalias !2428
  %142 = load i64, i64* %9, align 8
  %143 = add i64 %142, -16
  %144 = load i64, i64* %3, align 8
  %145 = inttoptr i64 %143 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %146, 4456
  %148 = add i64 %144, 15
  %149 = inttoptr i64 %147 to i64*
  store i64 0, i64* %149
  br label %block_4076d8

block_407633:                                     ; preds = %block_407618
  %150 = add i64 %192, -4
  %151 = inttoptr i64 %150 to i32*
  store i32 6, i32* %151
  br label %block_407744

block_4076a4:                                     ; preds = %block_407685, %block_407673
  %152 = phi i64 [ %43, %block_407673 ], [ %327, %block_407685 ]
  %153 = phi i64 [ %33, %block_407673 ], [ %321, %block_407685 ]
  %154 = phi %struct.Memory* [ %34, %block_407673 ], [ %34, %block_407685 ]
  %155 = add i64 %153, -16
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  %158 = add i64 %157, 4456
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159
  %161 = icmp eq i64 %160, 0
  %162 = select i1 %161, i64 52, i64 18
  %163 = add i64 %152, %162
  br i1 %161, label %block_4076d8, label %block_4076b6

block_40771e:                                     ; preds = %block_40770c
  %164 = add i64 %297, 16
  %165 = load i64, i64* %8, align 8, !tbaa !1240
  %166 = add i64 %165, -8
  %167 = inttoptr i64 %166 to i64*
  store i64 %164, i64* %167
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %3, align 8, !alias.scope !2433, !noalias !2436
  store i64 %165, i64* %8, align 8, !alias.scope !2433, !noalias !2436
  %170 = tail call i64 @fclose(i64 %294), !noalias !2433
  %171 = load i64, i64* %9, align 8
  %172 = add i64 %171, -44
  %173 = trunc i64 %170 to i32
  %174 = load i64, i64* %3, align 8
  %175 = add i64 %174, 3
  %176 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %176
  br label %block_407731

block_407618:                                     ; preds = %block_4075f1
  %177 = add i64 %313, -16
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %179, 2688
  store i64 %180, i64* %7, align 8, !tbaa !1240
  %181 = add i64 %312, 3384
  %182 = add i64 %312, 18
  %183 = load i64, i64* %8, align 8, !tbaa !1240
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  store i64 %182, i64* %185
  store i64 %184, i64* %8, align 8, !tbaa !1240
  %186 = tail call %struct.Memory* @sub_408350_DeleteOneFile(%struct.State* nonnull %0, i64 %181, %struct.Memory* %307)
  %187 = load i32, i32* %5, align 4
  %188 = load i64, i64* %3, align 8
  %189 = icmp eq i32 %187, 0
  %190 = select i1 %189, i64 21, i64 9
  %191 = add i64 %188, %190
  %192 = load i64, i64* %9, align 8
  br i1 %189, label %block_40763f, label %block_407633

block_4074fe:                                     ; preds = %block_4074e0
  %193 = add i64 %31, 16
  %194 = add i64 %11, -64
  %195 = inttoptr i64 %194 to i64*
  store i64 %193, i64* %195
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %3, align 8, !alias.scope !2438, !noalias !2441
  store i64 %14, i64* %8, align 8, !alias.scope !2438, !noalias !2441
  %198 = tail call i64 @fclose(i64 %28), !noalias !2438
  %199 = load i64, i64* %9, align 8
  %200 = add i64 %199, -20
  %201 = trunc i64 %198 to i32
  %202 = load i64, i64* %3, align 8
  %203 = add i64 %202, 3
  %204 = inttoptr i64 %200 to i32*
  store i32 %201, i32* %204
  br label %block_407511

block_40756d:                                     ; preds = %block_40755b
  %205 = add i64 %340, 16
  %206 = load i64, i64* %8, align 8, !tbaa !1240
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %205, i64* %208
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %3, align 8, !alias.scope !2443, !noalias !2446
  store i64 %206, i64* %8, align 8, !alias.scope !2443, !noalias !2446
  %211 = tail call i64 @fclose(i64 %337), !noalias !2443
  %212 = load i64, i64* %9, align 8
  %213 = add i64 %212, -32
  %214 = trunc i64 %211 to i32
  %215 = load i64, i64* %3, align 8
  %216 = add i64 %215, 3
  %217 = inttoptr i64 %213 to i32*
  store i32 %214, i32* %217
  br label %block_407580

block_407548:                                     ; preds = %block_407536
  %218 = add i64 %371, 16
  %219 = load i64, i64* %8, align 8, !tbaa !1240
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221
  %222 = inttoptr i64 %220 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %3, align 8, !alias.scope !2448, !noalias !2451
  store i64 %219, i64* %8, align 8, !alias.scope !2448, !noalias !2451
  %224 = tail call i64 @fclose(i64 %368), !noalias !2448
  %225 = load i64, i64* %9, align 8
  %226 = add i64 %225, -28
  %227 = trunc i64 %224 to i32
  %228 = load i64, i64* %3, align 8
  %229 = add i64 %228, 3
  %230 = inttoptr i64 %226 to i32*
  store i32 %227, i32* %230
  br label %block_40755b

block_4075b7:                                     ; preds = %block_4075a5
  %231 = add i64 %383, 16
  %232 = load i64, i64* %8, align 8, !tbaa !1240
  %233 = add i64 %232, -8
  %234 = inttoptr i64 %233 to i64*
  store i64 %231, i64* %234
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %3, align 8, !alias.scope !2453, !noalias !2456
  store i64 %232, i64* %8, align 8, !alias.scope !2453, !noalias !2456
  %237 = tail call i64 @fclose(i64 %380), !noalias !2453
  %238 = load i64, i64* %9, align 8
  %239 = add i64 %238, -40
  %240 = trunc i64 %237 to i32
  %241 = load i64, i64* %3, align 8
  %242 = add i64 %241, 3
  %243 = inttoptr i64 %239 to i32*
  store i32 %240, i32* %243
  br label %block_4075ca

block_407523:                                     ; preds = %block_407511
  %244 = add i64 %395, 16
  %245 = load i64, i64* %8, align 8, !tbaa !1240
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247
  %248 = inttoptr i64 %246 to i64*
  %249 = load i64, i64* %248
  store i64 %249, i64* %3, align 8, !alias.scope !2458, !noalias !2461
  store i64 %245, i64* %8, align 8, !alias.scope !2458, !noalias !2461
  %250 = tail call i64 @fclose(i64 %392), !noalias !2458
  %251 = load i64, i64* %9, align 8
  %252 = add i64 %251, -24
  %253 = trunc i64 %250 to i32
  %254 = load i64, i64* %3, align 8
  %255 = add i64 %254, 3
  %256 = inttoptr i64 %252 to i32*
  store i32 %253, i32* %256
  br label %block_407536

block_407592:                                     ; preds = %block_407580
  %257 = add i64 %407, 16
  %258 = load i64, i64* %8, align 8, !tbaa !1240
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260
  %261 = inttoptr i64 %259 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %3, align 8, !alias.scope !2463, !noalias !2466
  store i64 %258, i64* %8, align 8, !alias.scope !2463, !noalias !2466
  %263 = tail call i64 @fclose(i64 %404), !noalias !2463
  %264 = load i64, i64* %9, align 8
  %265 = add i64 %264, -36
  %266 = trunc i64 %263 to i32
  %267 = load i64, i64* %3, align 8
  %268 = add i64 %267, 3
  %269 = inttoptr i64 %265 to i32*
  store i32 %266, i32* %269
  br label %block_4075a5

block_407731:                                     ; preds = %block_40770c.block_407731_crit_edge, %block_40771e
  %270 = phi i64 [ %297, %block_40770c.block_407731_crit_edge ], [ %175, %block_40771e ]
  %271 = phi i64 [ %287, %block_40770c.block_407731_crit_edge ], [ %171, %block_40771e ]
  %272 = phi %struct.Memory* [ %288, %block_40770c.block_407731_crit_edge ], [ %288, %block_40771e ]
  %273 = add i64 %271, -16
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %7, align 8, !tbaa !1240
  %276 = add i64 %270, 12
  %277 = load i64, i64* %8, align 8, !tbaa !1240
  %278 = add i64 %277, -8
  %279 = inttoptr i64 %278 to i64*
  store i64 %276, i64* %279
  %280 = inttoptr i64 %278 to i64*
  %281 = load i64, i64* %280
  store i64 %281, i64* %3, align 8, !alias.scope !2468, !noalias !2471
  store i64 %277, i64* %8, align 8, !alias.scope !2468, !noalias !2471
  %282 = tail call i64 @free(i64 %275), !noalias !2468
  %283 = load i64, i64* %9, align 8
  %284 = add i64 %283, -4
  %285 = inttoptr i64 %284 to i32*
  store i32 0, i32* %285
  br label %block_407744

block_40770c:                                     ; preds = %block_4076ea, %block_4076d8
  %286 = phi i64 [ %57, %block_4076d8 ], [ %86, %block_4076ea ]
  %287 = phi i64 [ %47, %block_4076d8 ], [ %80, %block_4076ea ]
  %288 = phi %struct.Memory* [ %48, %block_4076d8 ], [ %48, %block_4076ea ]
  %289 = add i64 %287, -16
  %290 = inttoptr i64 %289 to i64*
  %291 = load i64, i64* %290
  %292 = add i64 %291, 4224
  %293 = inttoptr i64 %292 to i64*
  %294 = load i64, i64* %293
  %295 = icmp eq i64 %294, 0
  %296 = select i1 %295, i64 37, i64 18
  %297 = add i64 %286, %296
  br i1 %295, label %block_40770c.block_407731_crit_edge, label %block_40771e

block_40770c.block_407731_crit_edge:              ; preds = %block_40770c
  br label %block_407731

block_4075f1:                                     ; preds = %block_4075ca
  %298 = add i64 %359, -16
  %299 = inttoptr i64 %298 to i64*
  %300 = load i64, i64* %299
  %301 = add i64 %300, 3712
  store i64 %301, i64* %7, align 8, !tbaa !1240
  %302 = add i64 %358, 3423
  %303 = add i64 %358, 18
  %304 = load i64, i64* %8, align 8, !tbaa !1240
  %305 = add i64 %304, -8
  %306 = inttoptr i64 %305 to i64*
  store i64 %303, i64* %306
  store i64 %305, i64* %8, align 8, !tbaa !1240
  %307 = tail call %struct.Memory* @sub_408350_DeleteOneFile(%struct.State* nonnull %0, i64 %302, %struct.Memory* %353)
  %308 = load i32, i32* %5, align 4
  %309 = load i64, i64* %3, align 8
  %310 = icmp eq i32 %308, 0
  %311 = select i1 %310, i64 21, i64 9
  %312 = add i64 %309, %311
  %313 = load i64, i64* %9, align 8
  br i1 %310, label %block_407618, label %block_40760c

block_407685:                                     ; preds = %block_407673
  %314 = add i64 %43, 16
  %315 = load i64, i64* %8, align 8, !tbaa !1240
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %314, i64* %317
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318
  store i64 %319, i64* %3, align 8, !alias.scope !2473, !noalias !2476
  store i64 %315, i64* %8, align 8, !alias.scope !2473, !noalias !2476
  %320 = tail call i64 @free(i64 %40), !noalias !2473
  %321 = load i64, i64* %9, align 8
  %322 = add i64 %321, -16
  %323 = load i64, i64* %3, align 8
  %324 = inttoptr i64 %322 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %325, 600
  %327 = add i64 %323, 15
  %328 = inttoptr i64 %326 to i64*
  store i64 0, i64* %328
  br label %block_4076a4

block_40755b:                                     ; preds = %block_407536, %block_407548
  %329 = phi i64 [ %371, %block_407536 ], [ %229, %block_407548 ]
  %330 = phi i64 [ %361, %block_407536 ], [ %225, %block_407548 ]
  %331 = phi %struct.Memory* [ %362, %block_407536 ], [ %362, %block_407548 ]
  %332 = add i64 %330, -16
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %334, 4256
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = icmp eq i64 %337, 0
  %339 = select i1 %338, i64 37, i64 18
  %340 = add i64 %329, %339
  br i1 %338, label %block_407580, label %block_40756d

block_4075ca:                                     ; preds = %block_4075a5, %block_4075b7
  %341 = phi i64 [ %383, %block_4075a5 ], [ %242, %block_4075b7 ]
  %342 = phi i64 [ %373, %block_4075a5 ], [ %238, %block_4075b7 ]
  %343 = phi %struct.Memory* [ %374, %block_4075a5 ], [ %374, %block_4075b7 ]
  %344 = add i64 %342, -16
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %346, 2176
  store i64 %347, i64* %7, align 8, !tbaa !1240
  %348 = add i64 %341, 3462
  %349 = add i64 %341, 18
  %350 = load i64, i64* %8, align 8, !tbaa !1240
  %351 = add i64 %350, -8
  %352 = inttoptr i64 %351 to i64*
  store i64 %349, i64* %352
  store i64 %351, i64* %8, align 8, !tbaa !1240
  %353 = tail call %struct.Memory* @sub_408350_DeleteOneFile(%struct.State* nonnull %0, i64 %348, %struct.Memory* %343)
  %354 = load i32, i32* %5, align 4
  %355 = load i64, i64* %3, align 8
  %356 = icmp eq i32 %354, 0
  %357 = select i1 %356, i64 21, i64 9
  %358 = add i64 %355, %357
  %359 = load i64, i64* %9, align 8
  br i1 %356, label %block_4075f1, label %block_4075e5

block_407536:                                     ; preds = %block_407511, %block_407523
  %360 = phi i64 [ %395, %block_407511 ], [ %255, %block_407523 ]
  %361 = phi i64 [ %385, %block_407511 ], [ %251, %block_407523 ]
  %362 = phi %struct.Memory* [ %386, %block_407511 ], [ %386, %block_407523 ]
  %363 = add i64 %361, -16
  %364 = inttoptr i64 %363 to i64*
  %365 = load i64, i64* %364
  %366 = add i64 %365, 4248
  %367 = inttoptr i64 %366 to i64*
  %368 = load i64, i64* %367
  %369 = icmp eq i64 %368, 0
  %370 = select i1 %369, i64 37, i64 18
  %371 = add i64 %360, %370
  br i1 %369, label %block_40755b, label %block_407548

block_4075a5:                                     ; preds = %block_407580, %block_407592
  %372 = phi i64 [ %407, %block_407580 ], [ %268, %block_407592 ]
  %373 = phi i64 [ %397, %block_407580 ], [ %264, %block_407592 ]
  %374 = phi %struct.Memory* [ %398, %block_407580 ], [ %398, %block_407592 ]
  %375 = add i64 %373, -16
  %376 = inttoptr i64 %375 to i64*
  %377 = load i64, i64* %376
  %378 = add i64 %377, 4272
  %379 = inttoptr i64 %378 to i64*
  %380 = load i64, i64* %379
  %381 = icmp eq i64 %380, 0
  %382 = select i1 %381, i64 37, i64 18
  %383 = add i64 %372, %382
  br i1 %381, label %block_4075ca, label %block_4075b7

block_407511:                                     ; preds = %block_4074fe, %block_4074e0
  %384 = phi i64 [ %31, %block_4074e0 ], [ %203, %block_4074fe ]
  %385 = phi i64 [ %12, %block_4074e0 ], [ %199, %block_4074fe ]
  %386 = phi %struct.Memory* [ %2, %block_4074e0 ], [ %2, %block_4074fe ]
  %387 = add i64 %385, -16
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %389, 4240
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = icmp eq i64 %392, 0
  %394 = select i1 %393, i64 37, i64 18
  %395 = add i64 %384, %394
  br i1 %393, label %block_407536, label %block_407523

block_407580:                                     ; preds = %block_40755b, %block_40756d
  %396 = phi i64 [ %340, %block_40755b ], [ %216, %block_40756d ]
  %397 = phi i64 [ %330, %block_40755b ], [ %212, %block_40756d ]
  %398 = phi %struct.Memory* [ %331, %block_40755b ], [ %331, %block_40756d ]
  %399 = add i64 %397, -16
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  %402 = add i64 %401, 4264
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = icmp eq i64 %404, 0
  %406 = select i1 %405, i64 37, i64 18
  %407 = add i64 %396, %406
  br i1 %405, label %block_4075a5, label %block_407592
}

; Function Attrs: noinline
define %struct.Memory* @sub_409a30_MultiFileProcJobs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_409a30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -3208
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -28
  %28 = load i32, i32* %7, align 4
  %29 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %29
  %30 = add i64 %14, -40
  %31 = load i64, i64* %9, align 8
  %32 = inttoptr i64 %30 to i64*
  store i64 %31, i64* %32
  %33 = add i64 %14, -60
  %34 = inttoptr i64 %33 to i32*
  store i32 0, i32* %34
  %35 = add i64 %14, -64
  %36 = inttoptr i64 %35 to i32*
  store i32 0, i32* %36
  %37 = inttoptr i64 %30 to i64*
  %38 = load i64, i64* %37
  %39 = add i64 %38, 600
  %40 = inttoptr i64 %39 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %9, align 8, !tbaa !1240
  %42 = add i64 %14, -80
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43
  %44 = add i64 %14, -44
  %45 = add i64 %1, 58
  %46 = inttoptr i64 %44 to i32*
  store i32 0, i32* %46
  br label %block_409a6a

block_409e7d:                                     ; preds = %block_409c6f
  store i64 0, i64* %579, align 8, !tbaa !1240
  store i64 0, i64* %9, align 8, !tbaa !1240
  store i64 %651, i64* %578, align 8, !tbaa !1240
  %47 = add i64 %651, 4256
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %10, align 8, !tbaa !1240
  %50 = add i64 %657, 22
  %51 = load i64, i64* %11, align 8, !tbaa !1240
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %50, i64* %53
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %3, align 8, !alias.scope !2478, !noalias !2481
  store i64 %51, i64* %11, align 8, !alias.scope !2478, !noalias !2481
  %56 = tail call i64 @fseek(i64 %49, i64 0, i64 0), !noalias !2478
  %57 = load i64, i64* %12, align 8
  %58 = add i64 %57, -3160
  %59 = load i64, i64* %3, align 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60
  %62 = icmp eq i64 %61, 0
  %63 = add i64 %57, -3188
  %64 = trunc i64 %56 to i32
  %65 = inttoptr i64 %63 to i32*
  store i32 %64, i32* %65
  %66 = select i1 %62, i64 35, i64 20
  %67 = add i64 %59, %66
  br i1 %62, label %block_409eb6, label %block_409ea7

block_409bff:                                     ; preds = %block_409bec
  %68 = zext i32 %353 to i64
  %69 = shl nuw nsw i64 %68, 2
  %70 = add nsw i64 %69, -3152
  %71 = add i64 %70, %15
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72
  %74 = inttoptr i64 %183 to i32*
  %75 = load i32, i32* %74
  %76 = icmp ule i32 %73, %75
  %77 = select i1 %76, i64 36, i64 21
  %78 = add i64 %361, %77
  br i1 %76, label %block_409c23, label %block_409c14

block_409b77:                                     ; preds = %block_409b0a, %block_409b51, %block_409b69
  %79 = phi i64 [ %630, %block_409b0a ], [ %198, %block_409b51 ], [ %87, %block_409b69 ]
  %80 = phi %struct.Memory* [ %594, %block_409b0a ], [ %594, %block_409b51 ], [ %594, %block_409b69 ]
  %81 = inttoptr i64 %33 to i32*
  %82 = load i32, i32* %81
  %83 = icmp ne i32 %82, 1
  %84 = select i1 %83, i64 34, i64 10
  %85 = add i64 %79, %84
  br i1 %83, label %block_409b99, label %block_409b81

block_409b69:                                     ; preds = %block_409b51
  %86 = inttoptr i64 %33 to i32*
  store i32 1, i32* %86
  %87 = add i64 %198, 14
  %88 = inttoptr i64 %35 to i32*
  store i32 1, i32* %88
  br label %block_409b77

block_409c68:                                     ; preds = %block_409c36
  %89 = add i64 %287, -36
  %90 = add i64 %295, 7
  %91 = inttoptr i64 %89 to i32*
  store i32 0, i32* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  br label %block_409c6f

block_409e65:                                     ; preds = %block_409d6c
  br label %block_409e6a

block_409d14:                                     ; preds = %block_409c9c
  store i64 8, i64* %9, align 8, !tbaa !1240
  %94 = add i64 %317, -72
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = zext i32 %331 to i64
  %98 = add i64 %317, -3168
  %99 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %99
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %334, 57
  %103 = load i64, i64* %11, align 8, !tbaa !1240
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %3, align 8, !alias.scope !2483, !noalias !2486
  store i64 %103, i64* %11, align 8, !alias.scope !2483, !noalias !2486
  %108 = tail call i64 @qsort(i64 %96, i64 %101, i64 8, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @Comp8gbuf to i64)), !noalias !2483
  %109 = load i64, i64* %12, align 8
  %110 = add i64 %109, -3160
  %111 = load i64, i64* %3, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %10, align 8, !tbaa !1240
  %114 = add i64 %109, -36
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115
  %117 = zext i32 %116 to i64
  store i64 %117, i64* %578, align 8, !tbaa !1240
  %118 = shl nuw nsw i64 %117, 2
  %119 = add nsw i64 %118, -3152
  %120 = add i64 %119, %109
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121
  %123 = zext i32 %122 to i64
  store i64 %123, i64* %579, align 8, !tbaa !1240
  %124 = add i64 %111, -1037
  %125 = add i64 %111, 24
  %126 = load i64, i64* %11, align 8, !tbaa !1240
  %127 = add i64 %126, -8
  %128 = inttoptr i64 %127 to i64*
  store i64 %125, i64* %128
  store i64 %127, i64* %11, align 8, !tbaa !1240
  %129 = tail call %struct.Memory* @sub_409940_onessort(%struct.State* nonnull %0, i64 %124, %struct.Memory* %318)
  %130 = load i64, i64* %12, align 8
  %131 = add i64 %130, -44
  %132 = load i64, i64* %3, align 8
  %133 = add i64 %132, 7
  %134 = inttoptr i64 %131 to i32*
  store i32 0, i32* %134
  br label %block_409d6c

block_409ae0:                                     ; preds = %block_409acd
  %135 = inttoptr i64 %24 to i64*
  %136 = load i64, i64* %135
  %137 = sext i32 %224 to i64
  %138 = shl nsw i64 %137, 4
  %139 = add i64 %138, %136
  %140 = add i64 %139, 8
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = inttoptr i64 %42 to i64*
  %144 = load i64, i64* %143
  %145 = inttoptr i64 %583 to i32*
  %146 = load i32, i32* %145
  %147 = zext i32 %146 to i64
  %148 = add i32 %146, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %579, align 8, !tbaa !1240
  %150 = inttoptr i64 %583 to i32*
  store i32 %148, i32* %150
  %151 = shl nuw nsw i64 %147, 3
  %152 = add i64 %144, %151
  %153 = add i64 %208, 42
  %154 = inttoptr i64 %152 to i64*
  store i64 %142, i64* %154
  br label %block_409b0a

block_409c5c:                                     ; preds = %block_409c36
  %155 = add i64 %287, -4
  %156 = inttoptr i64 %155 to i32*
  store i32 1, i32* %156
  br label %block_409ebd

block_409d6c:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_409d14
  %157 = phi i64 [ %133, %block_409d14 ], [ %500, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  %158 = phi i64 [ %130, %block_409d14 ], [ %491, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  %159 = phi %struct.Memory* [ %129, %block_409d14 ], [ %450, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  %160 = add i64 %158, -44
  %161 = inttoptr i64 %160 to i32*
  %162 = load i32, i32* %161
  %163 = add i64 %158, -36
  %164 = inttoptr i64 %163 to i32*
  %165 = load i32, i32* %164
  %166 = zext i32 %165 to i64
  %167 = shl nuw nsw i64 %166, 2
  %168 = add nsw i64 %167, -3152
  %169 = add i64 %168, %158
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170
  %172 = icmp ult i32 %162, %171
  %173 = select i1 %172, i64 21, i64 249
  %174 = add i64 %157, %173
  %175 = add i64 %174, 5
  br i1 %172, label %block_409d81, label %block_409e65

block_409c23:                                     ; preds = %block_409c14, %block_409bff
  %176 = phi i64 [ %78, %block_409bff ], [ %345, %block_409c14 ]
  %177 = phi %struct.Memory* [ %351, %block_409bff ], [ %351, %block_409c14 ]
  %178 = inttoptr i64 %44 to i32*
  %179 = load i32, i32* %178
  %180 = add i32 %179, 1
  %181 = inttoptr i64 %44 to i32*
  store i32 %180, i32* %181
  %182 = add i64 %176, -55
  br label %block_409bec

block_409bde:                                     ; preds = %block_409ac3
  %183 = add i64 %14, -72
  %184 = inttoptr i64 %183 to i32*
  store i32 0, i32* %184
  %185 = add i64 %229, 14
  %186 = inttoptr i64 %44 to i32*
  store i32 0, i32* %186
  br label %block_409bec

block_409b51:                                     ; preds = %block_409b0a
  %187 = inttoptr i64 %581 to i32*
  %188 = load i32, i32* %187
  %189 = inttoptr i64 %30 to i64*
  %190 = load i64, i64* %189
  %191 = add i64 %190, 524
  %192 = inttoptr i64 %191 to i32*
  %193 = load i32, i32* %192
  %194 = add i32 %193, -1
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %9, align 8, !tbaa !1240
  %196 = icmp ne i32 %188, %194
  %197 = select i1 %196, i64 38, i64 24
  %198 = add i64 %630, %197
  br i1 %196, label %block_409b77, label %block_409b69

block_409acd:                                     ; preds = %block_409ac3
  %199 = inttoptr i64 %581 to i32*
  %200 = load i32, i32* %199
  %201 = inttoptr i64 %30 to i64*
  %202 = load i64, i64* %201
  %203 = add i64 %202, 528
  %204 = inttoptr i64 %203 to i32*
  %205 = load i32, i32* %204
  %206 = icmp ne i32 %200, %205
  %207 = select i1 %206, i64 61, i64 19
  %208 = add i64 %229, %207
  br i1 %206, label %block_409b0a, label %block_409ae0

block_409bc9:                                     ; preds = %block_409b99, %block_409bc4
  %209 = phi i64 [ %341, %block_409b99 ], [ %219, %block_409bc4 ]
  %210 = phi %struct.Memory* [ %336, %block_409b99 ], [ %218, %block_409bc4 ]
  %211 = inttoptr i64 %35 to i32*
  store i32 0, i32* %211
  %212 = inttoptr i64 %588 to i32*
  %213 = load i32, i32* %212
  %214 = add i32 %213, -1
  %215 = inttoptr i64 %588 to i32*
  store i32 %214, i32* %215
  %216 = add i64 %209, -262
  br label %block_409ac3

block_409bc4:                                     ; preds = %block_409bad, %block_409bbb
  %217 = phi i64 [ %266, %block_409bbb ], [ %298, %block_409bad ]
  %218 = phi %struct.Memory* [ %336, %block_409bbb ], [ %336, %block_409bad ]
  %219 = add i64 %217, 5
  br label %block_409bc9

block_409ac3:                                     ; preds = %block_409aac, %block_409bc9
  %220 = phi i64 [ %589, %block_409aac ], [ %216, %block_409bc9 ]
  %221 = phi %struct.Memory* [ %659, %block_409aac ], [ %210, %block_409bc9 ]
  %222 = add i64 %220, 4
  %223 = inttoptr i64 %588 to i32*
  %224 = load i32, i32* %223
  %225 = lshr i32 %224, 31
  %226 = trunc i32 %225 to i8
  %227 = icmp ne i8 %226, 0
  %228 = select i1 %227, i64 279, i64 6
  %229 = add i64 %222, %228
  br i1 %227, label %block_409bde, label %block_409acd

block_409ebd:                                     ; preds = %block_409eb6, %block_409c5c
  %230 = phi i64 [ %517, %block_409eb6 ], [ %287, %block_409c5c ]
  %231 = phi %struct.Memory* [ %518, %block_409eb6 ], [ %351, %block_409c5c ]
  %232 = add i64 %230, -4
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233
  %235 = zext i32 %234 to i64
  store i64 %235, i64* %8, align 8, !tbaa !1240
  %236 = load i64, i64* %11, align 8
  %237 = add i64 %236, 3200
  %238 = icmp ugt i64 %236, -3201
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %18, align 1, !tbaa !1264
  %240 = trunc i64 %237 to i32
  %241 = and i32 %240, 255
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #10
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %19, align 1, !tbaa !1278
  %246 = xor i64 %237, %236
  %247 = lshr i64 %246, 4
  %248 = trunc i64 %247 to i8
  %249 = and i8 %248, 1
  store i8 %249, i8* %20, align 1, !tbaa !1279
  %250 = icmp eq i64 %237, 0
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %21, align 1, !tbaa !1280
  %252 = lshr i64 %237, 63
  %253 = trunc i64 %252 to i8
  store i8 %253, i8* %22, align 1, !tbaa !1281
  %254 = lshr i64 %236, 63
  %255 = xor i64 %252, %254
  %256 = add nuw nsw i64 %255, %252
  %257 = icmp eq i64 %256, 2
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %23, align 1, !tbaa !1282
  %259 = add i64 %236, 3208
  %260 = inttoptr i64 %237 to i64*
  %261 = load i64, i64* %260
  store i64 %261, i64* %12, align 8, !tbaa !1240
  %262 = inttoptr i64 %259 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %3, align 8, !tbaa !1240
  %264 = add i64 %236, 3216
  store i64 %264, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %231

block_409bbb:                                     ; preds = %block_409ba3
  %265 = add i32 %315, 1
  %266 = add i64 %313, 9
  %267 = inttoptr i64 %581 to i32*
  store i32 %265, i32* %267
  br label %block_409bc4

block_409e6a:                                     ; preds = %block_409c82, %block_409e65
  %268 = phi i64 [ %644, %block_409c82 ], [ %158, %block_409e65 ]
  %269 = phi i64 [ %637, %block_409c82 ], [ %175, %block_409e65 ]
  %270 = phi %struct.Memory* [ %645, %block_409c82 ], [ %159, %block_409e65 ]
  %271 = add i64 %268, -36
  %272 = inttoptr i64 %271 to i32*
  %273 = load i32, i32* %272
  %274 = add i32 %273, 1
  %275 = inttoptr i64 %271 to i32*
  store i32 %274, i32* %275
  %276 = add i64 %269, -507
  br label %block_409c6f

block_409c36:                                     ; preds = %block_409bec
  %277 = inttoptr i64 %183 to i32*
  %278 = load i32, i32* %277
  %279 = zext i32 %278 to i64
  %280 = shl nuw nsw i64 %279, 4
  store i64 %280, i64* %578, align 8, !tbaa !1240
  store i64 %280, i64* %10, align 8, !tbaa !1240
  %281 = add i64 %361, 17
  %282 = add i64 %14, -3216
  %283 = inttoptr i64 %282 to i64*
  store i64 %281, i64* %283
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %3, align 8, !alias.scope !2488, !noalias !2491
  store i64 %17, i64* %11, align 8, !alias.scope !2488, !noalias !2491
  %286 = tail call i64 @malloc(i64 %280)
  %287 = load i64, i64* %12, align 8
  %288 = add i64 %287, -3160
  %289 = load i64, i64* %3, align 8
  %290 = inttoptr i64 %288 to i64*
  store i64 %286, i64* %290
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291
  %293 = icmp eq i64 %292, 0
  %294 = select i1 %293, i64 21, i64 33
  %295 = add i64 %289, %294
  br i1 %293, label %block_409c5c, label %block_409c68

block_409bad:                                     ; preds = %block_409ba3
  %296 = add i32 %315, -1
  %297 = inttoptr i64 %581 to i32*
  store i32 %296, i32* %297
  %298 = add i64 %313, 23
  br label %block_409bc4

block_409ea7:                                     ; preds = %block_409e7d
  %299 = inttoptr i64 %58 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %10, align 8, !tbaa !1240
  %301 = add i64 %67, 15
  %302 = load i64, i64* %11, align 8, !tbaa !1240
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %301, i64* %304
  %305 = inttoptr i64 %303 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %3, align 8, !alias.scope !2493, !noalias !2496
  store i64 %302, i64* %11, align 8, !alias.scope !2493, !noalias !2496
  %307 = tail call i64 @free(i64 %300), !noalias !2493
  %308 = load i64, i64* %12, align 8
  br label %block_409eb6

block_409ba3:                                     ; preds = %block_409b99
  %309 = inttoptr i64 %33 to i32*
  %310 = load i32, i32* %309
  %311 = icmp eq i32 %310, 0
  %312 = select i1 %311, i64 24, i64 10
  %313 = add i64 %341, %312
  %314 = inttoptr i64 %581 to i32*
  %315 = load i32, i32* %314
  br i1 %311, label %block_409bbb, label %block_409bad

block_409c9c:                                     ; preds = %block_409cb1, %block_409c95
  %316 = phi i64 [ %343, %block_409c95 ], [ %577, %block_409cb1 ]
  %317 = phi i64 [ %644, %block_409c95 ], [ %574, %block_409cb1 ]
  %318 = phi %struct.Memory* [ %645, %block_409c95 ], [ %557, %block_409cb1 ]
  %319 = add i64 %317, -44
  %320 = inttoptr i64 %319 to i32*
  %321 = load i32, i32* %320
  %322 = zext i32 %321 to i64
  %323 = add i64 %317, -36
  %324 = inttoptr i64 %323 to i32*
  %325 = load i32, i32* %324
  %326 = zext i32 %325 to i64
  %327 = shl nuw nsw i64 %326, 2
  %328 = add nsw i64 %327, -3152
  %329 = add i64 %328, %317
  %330 = inttoptr i64 %329 to i32*
  %331 = load i32, i32* %330
  %332 = icmp ult i32 %321, %331
  %333 = select i1 %332, i64 21, i64 120
  %334 = add i64 %316, %333
  br i1 %332, label %block_409cb1, label %block_409d14

block_409b99:                                     ; preds = %block_409b81, %block_409b8b, %block_409b77
  %335 = phi i64 [ %85, %block_409b77 ], [ %642, %block_409b81 ], [ %348, %block_409b8b ]
  %336 = phi %struct.Memory* [ %80, %block_409b77 ], [ %80, %block_409b81 ], [ %80, %block_409b8b ]
  %337 = inttoptr i64 %35 to i32*
  %338 = load i32, i32* %337
  %339 = icmp ne i32 %338, 0
  %340 = select i1 %339, i64 48, i64 10
  %341 = add i64 %335, %340
  br i1 %339, label %block_409bc9, label %block_409ba3

block_409c95:                                     ; preds = %block_409c82
  %342 = add i64 %644, -44
  %343 = add i64 %637, 7
  %344 = inttoptr i64 %342 to i32*
  store i32 0, i32* %344
  br label %block_409c9c

block_409c14:                                     ; preds = %block_409bff
  %345 = add i64 %78, 15
  %346 = inttoptr i64 %183 to i32*
  store i32 %73, i32* %346
  br label %block_409c23

block_409b8b:                                     ; preds = %block_409b81
  %347 = inttoptr i64 %33 to i32*
  store i32 0, i32* %347
  %348 = add i64 %642, 14
  %349 = inttoptr i64 %35 to i32*
  store i32 1, i32* %349
  br label %block_409b99

block_409bec:                                     ; preds = %block_409bde, %block_409c23
  %350 = phi i64 [ %185, %block_409bde ], [ %182, %block_409c23 ]
  %351 = phi %struct.Memory* [ %221, %block_409bde ], [ %177, %block_409c23 ]
  %352 = inttoptr i64 %44 to i32*
  %353 = load i32, i32* %352
  %354 = inttoptr i64 %30 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %355, 524
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357
  %359 = icmp ult i32 %353, %358
  %360 = select i1 %359, i64 19, i64 74
  %361 = add i64 %350, %360
  br i1 %359, label %block_409bff, label %block_409c36

block_409d81:                                     ; preds = %block_409d6c
  %362 = add i64 %158, -32
  %363 = inttoptr i64 %362 to i64*
  %364 = load i64, i64* %363
  %365 = add i64 %364, 536
  %366 = inttoptr i64 %365 to i32*
  %367 = load i32, i32* %366
  %368 = sub i32 64, %367
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %8, align 8, !tbaa !1240
  %370 = add i64 %158, -3160
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  %373 = add i32 %171, -1
  %374 = sub i32 %373, %162
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %9, align 8, !tbaa !1240
  %376 = shl nuw nsw i64 %375, 4
  %377 = add i64 %376, %372
  %378 = add i64 %377, 8
  %379 = inttoptr i64 %378 to i64*
  %380 = load i64, i64* %379
  %381 = load i32, i32* %5, align 4
  %382 = zext i32 %381 to i64
  %383 = load i64, i64* %12, align 8
  %384 = add i64 %383, -3176
  %385 = inttoptr i64 %384 to i64*
  store i64 %377, i64* %385
  store i64 %382, i64* %578, align 8, !tbaa !1240
  %386 = trunc i32 %381 to i6
  switch i6 %386, label %389 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %387
  ]

; <label>:387:                                    ; preds = %block_409d81
  %388 = shl i64 %380, 1
  br label %395

; <label>:389:                                    ; preds = %block_409d81
  %390 = and i32 %381, 63
  %391 = zext i32 %390 to i64
  %392 = add nsw i64 %391, -1
  %393 = shl i64 %380, %392
  %394 = shl i64 %393, 1
  br label %395

; <label>:395:                                    ; preds = %389, %387
  %396 = phi i64 [ %388, %387 ], [ %394, %389 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %395, %block_409d81
  %397 = phi i64 [ %380, %block_409d81 ], [ %396, %395 ]
  %398 = inttoptr i64 %384 to i64*
  %399 = load i64, i64* %398
  %400 = add i64 %399, 8
  %401 = inttoptr i64 %400 to i64*
  store i64 %397, i64* %401
  %402 = add i64 %383, -3160
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  store i64 %404, i64* %579, align 8, !tbaa !1240
  %405 = add i64 %383, -36
  %406 = inttoptr i64 %405 to i32*
  %407 = load i32, i32* %406
  %408 = zext i32 %407 to i64
  %409 = shl nuw nsw i64 %408, 2
  %410 = add nsw i64 %409, -3152
  %411 = add i64 %410, %383
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412
  %414 = add i32 %413, -1
  %415 = add i64 %383, -44
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = sub i32 %414, %417
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %8, align 8, !tbaa !1240
  %420 = shl nuw nsw i64 %419, 4
  store i64 %420, i64* %580, align 8, !tbaa !1240
  %421 = load i64, i64* %579, align 8
  %422 = add i64 %420, %421
  %423 = lshr i64 %422, 63
  %424 = add i64 %422, 8
  store i64 %424, i64* %579, align 8, !tbaa !1240
  %425 = icmp ugt i64 %422, -9
  %426 = zext i1 %425 to i8
  store i8 %426, i8* %18, align 1, !tbaa !1264
  %427 = trunc i64 %424 to i32
  %428 = and i32 %427, 255
  %429 = tail call i32 @llvm.ctpop.i32(i32 %428) #10
  %430 = trunc i32 %429 to i8
  %431 = and i8 %430, 1
  %432 = xor i8 %431, 1
  store i8 %432, i8* %19, align 1, !tbaa !1278
  %433 = xor i64 %424, %422
  %434 = lshr i64 %433, 4
  %435 = trunc i64 %434 to i8
  %436 = and i8 %435, 1
  store i8 %436, i8* %20, align 1, !tbaa !1279
  %437 = icmp eq i64 %424, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %21, align 1, !tbaa !1280
  %439 = lshr i64 %424, 63
  %440 = trunc i64 %439 to i8
  store i8 %440, i8* %22, align 1, !tbaa !1281
  %441 = xor i64 %439, %423
  %442 = add nuw nsw i64 %441, %439
  %443 = icmp eq i64 %442, 2
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %23, align 1, !tbaa !1282
  store i64 %424, i64* %10, align 8, !tbaa !1240
  %445 = add i64 %174, -36529
  %446 = add i64 %174, 134
  %447 = load i64, i64* %11, align 8, !tbaa !1240
  %448 = add i64 %447, -8
  %449 = inttoptr i64 %448 to i64*
  store i64 %446, i64* %449
  store i64 %448, i64* %11, align 8, !tbaa !1240
  %450 = tail call %struct.Memory* @sub_400ed0_swap8(%struct.State* nonnull %0, i64 %445, %struct.Memory* %159)
  %451 = load i64, i64* %3, align 8
  store i64 8, i64* %579, align 8, !tbaa !1240
  store i64 1, i64* %9, align 8, !tbaa !1240
  %452 = load i64, i64* %12, align 8
  %453 = add i64 %452, -3160
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  store i64 %455, i64* %10, align 8, !tbaa !1240
  %456 = add i64 %452, -36
  %457 = inttoptr i64 %456 to i32*
  %458 = load i32, i32* %457
  %459 = zext i32 %458 to i64
  %460 = shl nuw nsw i64 %459, 2
  %461 = add nsw i64 %460, -3152
  %462 = add i64 %461, %452
  %463 = inttoptr i64 %462 to i32*
  %464 = load i32, i32* %463
  %465 = add i32 %464, -1
  %466 = add i64 %452, -44
  %467 = inttoptr i64 %466 to i32*
  %468 = load i32, i32* %467
  %469 = sub i32 %465, %468
  %470 = zext i32 %469 to i64
  %471 = shl nuw nsw i64 %470, 4
  %472 = load i64, i64* %10, align 8
  %473 = add i64 %471, %472
  %474 = add i64 %473, 8
  %475 = load i64, i64* %12, align 8
  %476 = add i64 %475, -32
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  store i64 %478, i64* %580, align 8, !tbaa !1240
  %479 = add i64 %478, 4256
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %451, 73
  %483 = load i64, i64* %11, align 8, !tbaa !1240
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485
  %486 = load i64, i64* %93, align 8, !alias.scope !2498, !noalias !2501
  %487 = load i64, i64* %92, align 8, !alias.scope !2498, !noalias !2501
  %488 = inttoptr i64 %484 to i64*
  %489 = load i64, i64* %488
  store i64 %489, i64* %3, align 8, !alias.scope !2498, !noalias !2501
  store i64 %483, i64* %11, align 8, !alias.scope !2498, !noalias !2501
  %490 = tail call i64 @fwrite(i64 %474, i64 %486, i64 %487, i64 %481)
  %491 = load i64, i64* %12, align 8
  %492 = add i64 %491, -3184
  %493 = load i64, i64* %3, align 8
  %494 = inttoptr i64 %492 to i64*
  store i64 %490, i64* %494
  %495 = add i64 %491, -44
  %496 = inttoptr i64 %495 to i32*
  %497 = load i32, i32* %496
  %498 = add i32 %497, 1
  %499 = inttoptr i64 %495 to i32*
  store i32 %498, i32* %499
  %500 = add i64 %493, -228
  br label %block_409d6c

block_409a7d:                                     ; preds = %block_409a6a
  %501 = shl nuw nsw i64 %662, 2
  %502 = add nsw i64 %501, -3152
  %503 = add i64 %502, %15
  %504 = inttoptr i64 %503 to i32*
  store i32 0, i32* %504
  %505 = inttoptr i64 %44 to i32*
  %506 = load i32, i32* %505
  %507 = zext i32 %506 to i64
  %508 = shl nuw nsw i64 %507, 3
  %509 = add nsw i64 %508, -2128
  %510 = add i64 %509, %15
  %511 = inttoptr i64 %510 to i64*
  store i64 0, i64* %511
  %512 = inttoptr i64 %44 to i32*
  %513 = load i32, i32* %512
  %514 = add i32 %513, 1
  %515 = inttoptr i64 %44 to i32*
  store i32 %514, i32* %515
  %516 = add i64 %670, -19
  br label %block_409a6a

block_409eb6:                                     ; preds = %block_409ea7, %block_409e7d
  %517 = phi i64 [ %57, %block_409e7d ], [ %308, %block_409ea7 ]
  %518 = phi %struct.Memory* [ %645, %block_409e7d ], [ %645, %block_409ea7 ]
  %519 = add i64 %517, -4
  %520 = inttoptr i64 %519 to i32*
  store i32 0, i32* %520
  br label %block_409ebd

block_409cb1:                                     ; preds = %block_409c9c
  %521 = add i64 %317, -72
  %522 = inttoptr i64 %521 to i64*
  %523 = load i64, i64* %522
  %524 = shl nuw nsw i64 %322, 3
  %525 = add i64 %523, %524
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %317, -3160
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = shl nuw nsw i64 %322, 4
  %532 = add i64 %531, %530
  %533 = add i64 %532, 8
  %534 = inttoptr i64 %533 to i64*
  store i64 %527, i64* %534
  %535 = inttoptr i64 %521 to i64*
  %536 = load i64, i64* %535
  %537 = inttoptr i64 %319 to i32*
  %538 = load i32, i32* %537
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %578, align 8, !tbaa !1240
  store i64 %539, i64* %9, align 8, !tbaa !1240
  %540 = shl nuw nsw i64 %539, 3
  %541 = add i64 %536, %540
  %542 = inttoptr i64 %541 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %10, align 8, !tbaa !1240
  %544 = load i64, i64* %12, align 8
  %545 = add i64 %544, -32
  %546 = inttoptr i64 %545 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %547, 536
  %549 = inttoptr i64 %548 to i32*
  %550 = load i32, i32* %549
  %551 = zext i32 %550 to i64
  store i64 %551, i64* %579, align 8, !tbaa !1240
  %552 = add i64 %334, -1377
  %553 = add i64 %334, 64
  %554 = load i64, i64* %11, align 8, !tbaa !1240
  %555 = add i64 %554, -8
  %556 = inttoptr i64 %555 to i64*
  store i64 %553, i64* %556
  store i64 %555, i64* %11, align 8, !tbaa !1240
  %557 = tail call %struct.Memory* @sub_409750_countTupleOnes(%struct.State* nonnull %0, i64 %552, %struct.Memory* %318)
  %558 = load i64, i64* %12, align 8
  %559 = add i64 %558, -3160
  %560 = load i64, i64* %3, align 8
  %561 = inttoptr i64 %559 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %558, -44
  %564 = inttoptr i64 %563 to i32*
  %565 = load i32, i32* %564
  %566 = zext i32 %565 to i64
  %567 = shl nuw nsw i64 %566, 4
  %568 = add i64 %567, %562
  %569 = load i32, i32* %5, align 4
  %570 = inttoptr i64 %568 to i32*
  store i32 %569, i32* %570
  %571 = inttoptr i64 %563 to i32*
  %572 = load i32, i32* %571
  %573 = add i32 %572, 1
  %574 = load i64, i64* %12, align 8
  %575 = add i64 %574, -44
  %576 = inttoptr i64 %575 to i32*
  store i32 %573, i32* %576
  %577 = add i64 %560, -85
  br label %block_409c9c

block_409aac:                                     ; preds = %block_409a6a
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %579 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %581 = add i64 %14, -56
  %582 = inttoptr i64 %581 to i32*
  store i32 0, i32* %582
  %583 = add i64 %14, -68
  %584 = inttoptr i64 %583 to i32*
  store i32 0, i32* %584
  %585 = inttoptr i64 %27 to i32*
  %586 = load i32, i32* %585
  %587 = add i32 %586, -1
  %588 = add i64 %14, -48
  %589 = add i64 %670, 23
  %590 = inttoptr i64 %588 to i32*
  store i32 %587, i32* %590
  %591 = add i64 %14, -3160
  %592 = add i64 %14, -2136
  br label %block_409ac3

block_409b0a:                                     ; preds = %block_409acd, %block_409ae0
  %593 = phi i64 [ %208, %block_409acd ], [ %153, %block_409ae0 ]
  %594 = phi %struct.Memory* [ %221, %block_409acd ], [ %221, %block_409ae0 ]
  %595 = inttoptr i64 %581 to i32*
  %596 = load i32, i32* %595
  %597 = zext i32 %596 to i64
  %598 = shl nuw nsw i64 %597, 2
  %599 = add nsw i64 %598, -3152
  %600 = add i64 %599, %15
  %601 = inttoptr i64 %600 to i32*
  %602 = load i32, i32* %601
  %603 = add i32 %602, 1
  %604 = add i64 %591, %598
  %605 = inttoptr i64 %604 to i32*
  store i32 %603, i32* %605
  %606 = inttoptr i64 %24 to i64*
  %607 = load i64, i64* %606
  %608 = inttoptr i64 %588 to i32*
  %609 = load i32, i32* %608
  %610 = sext i32 %609 to i64
  %611 = shl nsw i64 %610, 4
  %612 = add i64 %611, %607
  %613 = inttoptr i64 %612 to i64*
  %614 = load i64, i64* %613
  %615 = inttoptr i64 %581 to i32*
  %616 = load i32, i32* %615
  %617 = zext i32 %616 to i64
  store i64 %617, i64* %9, align 8, !tbaa !1240
  %618 = shl nuw nsw i64 %617, 3
  %619 = add nsw i64 %618, -2128
  %620 = add i64 %619, %15
  %621 = inttoptr i64 %620 to i64*
  %622 = load i64, i64* %621
  %623 = add i64 %622, %614
  %624 = add i64 %592, %618
  %625 = inttoptr i64 %624 to i64*
  store i64 %623, i64* %625
  %626 = inttoptr i64 %33 to i32*
  %627 = load i32, i32* %626
  %628 = icmp ne i32 %627, 0
  %629 = select i1 %628, i64 109, i64 71
  %630 = add i64 %593, %629
  br i1 %628, label %block_409b77, label %block_409b51

block_409c82:                                     ; preds = %block_409c6f
  %631 = add i64 %651, 528
  %632 = inttoptr i64 %631 to i32*
  %633 = load i32, i32* %632
  %634 = sub i32 %648, %633
  %635 = icmp eq i32 %634, 0
  %636 = select i1 %635, i64 19, i64 488
  %637 = add i64 %657, %636
  br i1 %635, label %block_409c95, label %block_409e6a

block_409b81:                                     ; preds = %block_409b77
  %638 = inttoptr i64 %581 to i32*
  %639 = load i32, i32* %638
  %640 = icmp ne i32 %639, 0
  %641 = select i1 %640, i64 24, i64 10
  %642 = add i64 %85, %641
  br i1 %640, label %block_409b99, label %block_409b8b

block_409c6f:                                     ; preds = %block_409e6a, %block_409c68
  %643 = phi i64 [ %90, %block_409c68 ], [ %276, %block_409e6a ]
  %644 = phi i64 [ %287, %block_409c68 ], [ %268, %block_409e6a ]
  %645 = phi %struct.Memory* [ %351, %block_409c68 ], [ %270, %block_409e6a ]
  %646 = add i64 %644, -36
  %647 = inttoptr i64 %646 to i32*
  %648 = load i32, i32* %647
  %649 = add i64 %644, -32
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %651, 524
  %653 = inttoptr i64 %652 to i32*
  %654 = load i32, i32* %653
  %655 = icmp ult i32 %648, %654
  %656 = select i1 %655, i64 19, i64 526
  %657 = add i64 %643, %656
  br i1 %655, label %block_409c82, label %block_409e7d

block_409a6a:                                     ; preds = %block_409a7d, %block_409a30
  %658 = phi i64 [ %45, %block_409a30 ], [ %516, %block_409a7d ]
  %659 = phi %struct.Memory* [ %2, %block_409a30 ], [ %659, %block_409a7d ]
  %660 = inttoptr i64 %44 to i32*
  %661 = load i32, i32* %660
  %662 = zext i32 %661 to i64
  %663 = inttoptr i64 %30 to i64*
  %664 = load i64, i64* %663
  %665 = add i64 %664, 524
  %666 = inttoptr i64 %665 to i32*
  %667 = load i32, i32* %666
  %668 = icmp ult i32 %661, %667
  %669 = select i1 %668, i64 19, i64 66
  %670 = add i64 %658, %669
  br i1 %668, label %block_409a7d, label %block_409aac
}

; Function Attrs: noinline
define %struct.Memory* @sub_40216c(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40216c:
  %3 = add i64 %1, 35
  %4 = tail call %struct.Memory* @sub_40218f_def_40215B(%struct.State* nonnull %0, i64 %3, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4081d0_SetOneBit(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4081d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  %16 = add i64 %13, -16
  %17 = load i64, i64* %9, align 8
  %18 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %18
  %19 = add i64 %13, -20
  %20 = load i32, i32* %5, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %13, -32
  %23 = inttoptr i64 %22 to i64*
  store i64 -9223372036854775808, i64* %23
  %24 = inttoptr i64 %19 to i32*
  %25 = load i32, i32* %24
  %26 = zext i32 %25 to i64
  %27 = inttoptr i64 %22 to i64*
  %28 = load i64, i64* %27
  store i64 %26, i64* %8, align 8, !tbaa !1240
  store i64 %26, i64* %7, align 8, !tbaa !1240
  %29 = trunc i32 %25 to i6
  switch i6 %29, label %37 [
    i6 0, label %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge
    i6 1, label %36
  ]

block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge: ; preds = %block_4081d0
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

; <label>:36:                                     ; preds = %block_4081d0
  br label %42

; <label>:37:                                     ; preds = %block_4081d0
  %38 = and i32 %25, 63
  %39 = zext i32 %38 to i64
  %40 = add nsw i64 %39, -1
  %41 = lshr i64 %28, %40
  br label %42

; <label>:42:                                     ; preds = %37, %36
  %43 = phi i64 [ %41, %37 ], [ %28, %36 ]
  %44 = lshr i64 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %42, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge
  %51 = phi i8* [ %35, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %47, %42 ]
  %52 = phi i8* [ %34, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %50, %42 ]
  %53 = phi i8* [ %33, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %49, %42 ]
  %54 = phi i8* [ %32, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %48, %42 ]
  %55 = phi i8* [ %31, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %46, %42 ]
  %56 = phi i8* [ %30, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %45, %42 ]
  %57 = phi i64 [ %28, %block_4081d0._ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit_crit_edge ], [ %44, %42 ]
  %58 = inttoptr i64 %22 to i64*
  store i64 %57, i64* %58
  %59 = inttoptr i64 %22 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %13, -16
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %9, align 8, !tbaa !1240
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = or i64 %65, %60
  store i64 %66, i64* %6, align 8, !tbaa !1240
  store i8 0, i8* %56, align 1, !tbaa !1264
  %67 = trunc i64 %66 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #10
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %55, align 1, !tbaa !1278
  %73 = icmp eq i64 %66, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %54, align 1, !tbaa !1280
  %75 = lshr i64 %66, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %53, align 1, !tbaa !1281
  store i8 0, i8* %52, align 1, !tbaa !1282
  store i8 0, i8* %51, align 1, !tbaa !1279
  %77 = inttoptr i64 %63 to i64*
  store i64 %66, i64* %77
  %78 = inttoptr i64 %14 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %11, align 8, !tbaa !1240
  %80 = inttoptr i64 %13 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %3, align 8, !tbaa !1240
  %82 = add i64 %13, 8
  store i64 %82, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40272a(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40272a:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -24
  %9 = inttoptr i64 %8 to i64*
  %10 = load i64, i64* %9
  %11 = add i64 %10, 4
  %12 = inttoptr i64 %11 to i32*
  store i32 5, i32* %12
  %13 = inttoptr i64 %8 to i64*
  %14 = load i64, i64* %13
  %15 = add i64 %14, 8
  %16 = inttoptr i64 %15 to i32*
  store i32 1, i32* %16
  %17 = inttoptr i64 %8 to i64*
  %18 = load i64, i64* %17
  %19 = add i64 %18, 16
  %20 = inttoptr i64 %19 to i64*
  store i64 1000, i64* %20
  %21 = add i64 %7, -4
  %22 = inttoptr i64 %21 to i32*
  store i32 1, i32* %22
  %23 = inttoptr i64 %21 to i32*
  %24 = load i32, i32* %23
  %25 = zext i32 %24 to i64
  store i64 %25, i64* %4, align 8, !tbaa !1240
  %26 = load i64, i64* %5, align 8
  %27 = add i64 %26, 1168
  %28 = icmp ugt i64 %26, -1169
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %29, i8* %30, align 1, !tbaa !1264
  %31 = trunc i64 %27 to i32
  %32 = and i32 %31, 255
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #10
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %36, i8* %37, align 1, !tbaa !1278
  %38 = xor i64 %26, 16
  %39 = xor i64 %38, %27
  %40 = lshr i64 %39, 4
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %42, i8* %43, align 1, !tbaa !1279
  %44 = icmp eq i64 %27, 0
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %45, i8* %46, align 1, !tbaa !1280
  %47 = lshr i64 %27, 63
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %48, i8* %49, align 1, !tbaa !1281
  %50 = lshr i64 %26, 63
  %51 = xor i64 %47, %50
  %52 = add nuw nsw i64 %51, %47
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %54, i8* %55, align 1, !tbaa !1282
  %56 = add i64 %26, 1176
  %57 = inttoptr i64 %27 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %6, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %26, 1184
  store i64 %61, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_407dc0_ComputeGivenGroupbys(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407dc0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -136
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -48
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %14, -60
  %30 = add i64 %1, 29
  %31 = inttoptr i64 %29 to i32*
  store i32 1, i32* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_407ddd

block_407ff7:                                     ; preds = %block_407fe4
  %38 = shl nuw nsw i64 %521, 3
  %39 = add nuw nsw i64 %38, 4392
  %40 = add i64 %39, %523
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41
  %43 = add nuw nsw i64 %38, 4424
  %44 = add i64 %43, %523
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %46, %42
  %48 = add i64 %523, 4424
  %49 = add i64 %48, %38
  %50 = inttoptr i64 %49 to i64*
  store i64 %47, i64* %50
  %51 = inttoptr i64 %421 to i32*
  %52 = load i32, i32* %51
  %53 = add i32 %52, 1
  %54 = inttoptr i64 %421 to i32*
  store i32 %53, i32* %54
  %55 = add i64 %529, -19
  br label %block_407fe4

block_407f76:                                     ; preds = %block_407f4c, %block_407f3b
  %56 = phi i64 [ %139, %block_407f3b ], [ %447, %block_407f4c ]
  %57 = phi i64 [ %148, %block_407f3b ], [ %446, %block_407f4c ]
  %58 = phi %struct.Memory* [ %140, %block_407f3b ], [ %445, %block_407f4c ]
  store i64 1, i64* %6, align 8, !tbaa !1240
  %59 = add i64 %56, -16
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %10, align 8, !tbaa !1240
  %62 = add i64 %56, -44
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %9, align 8, !tbaa !1240
  %66 = add i64 %61, 4312
  store i64 %66, i64* %8, align 8, !tbaa !1240
  %67 = add i64 %56, -48
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68
  %70 = zext i32 %69 to i64
  store i64 %70, i64* %35, align 8, !tbaa !1240
  %71 = add i32 %69, -3
  %72 = icmp eq i32 %71, 0
  %73 = load i64, i64* %6, align 8, !tbaa !1240
  %74 = and i64 %73, 4294967295
  %75 = select i1 %72, i64 0, i64 %74
  store i64 %75, i64* %7, align 8, !tbaa !1240
  %76 = add i64 %57, -3174
  %77 = add i64 %57, 43
  %78 = load i64, i64* %11, align 8, !tbaa !1240
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80
  store i64 %79, i64* %11, align 8, !tbaa !1240
  %81 = tail call %struct.Memory* @sub_407310_InitAdcViewCntl(%struct.State* nonnull %0, i64 %76, %struct.Memory* %58)
  %82 = load i64, i64* %12, align 8
  %83 = add i64 %82, -16
  %84 = load i64, i64* %3, align 8
  %85 = inttoptr i64 %83 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %10, align 8, !tbaa !1240
  %87 = add i64 %84, -15441
  %88 = add i64 %84, 9
  %89 = load i64, i64* %11, align 8, !tbaa !1240
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91
  store i64 %90, i64* %11, align 8, !tbaa !1240
  %92 = tail call %struct.Memory* @sub_404350_ComputeMemoryFittedView(%struct.State* nonnull %0, i64 %87, %struct.Memory* %81)
  %93 = load i64, i64* %12, align 8
  %94 = add i64 %93, -20
  %95 = load i32, i32* %5, align 4
  %96 = load i64, i64* %3, align 8
  %97 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %97
  %98 = icmp eq i32 %95, 0
  %99 = select i1 %98, i64 51, i64 12
  %100 = add i64 %96, %99
  br i1 %98, label %block_407fdd, label %block_407fb6

block_407eea:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %101 = inttoptr i64 %792 to i32*
  store i32 0, i32* %101
  %102 = inttoptr i64 %736 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %10, align 8, !tbaa !1240
  %104 = add i64 %103, 4232
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %9, align 8, !tbaa !1240
  %107 = add i64 %797, -15578
  %108 = add i64 %797, 27
  %109 = load i64, i64* %11, align 8, !tbaa !1240
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111
  store i64 %110, i64* %11, align 8, !tbaa !1240
  %112 = tail call %struct.Memory* @sub_404210_ReadWholeInputData(%struct.State* nonnull %0, i64 %107, %struct.Memory* %730)
  %113 = load i32, i32* %5, align 4
  %114 = load i64, i64* %3, align 8
  %115 = icmp eq i32 %113, 0
  %116 = select i1 %115, i64 49, i64 9
  %117 = add i64 %114, %116
  br i1 %115, label %block_407f36, label %block_407f0e

block_40818e:                                     ; preds = %block_407ddd
  %118 = add i64 %676, -40
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119
  %121 = add i64 %676, -16
  %122 = inttoptr i64 %121 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %123, 4504
  %125 = inttoptr i64 %124 to i32*
  store i32 %120, i32* %125
  %126 = inttoptr i64 %121 to i64*
  %127 = load i64, i64* %126
  store i64 %127, i64* %10, align 8, !tbaa !1240
  %128 = add i64 %675, -2126
  %129 = add i64 %675, 22
  %130 = load i64, i64* %11, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  store i64 %131, i64* %11, align 8, !tbaa !1240
  %133 = tail call %struct.Memory* @sub_407940_ViewSizesVerification(%struct.State* nonnull %0, i64 %128, %struct.Memory* %654)
  %134 = load i32, i32* %5, align 4
  %135 = icmp eq i32 %134, 0
  %136 = load i64, i64* %12, align 8
  %137 = add i64 %136, -4
  br i1 %135, label %block_4081b9, label %block_4081ad

block_407f3b:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_407f36
  %138 = phi i64 [ %797, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %530, %block_407f36 ]
  %139 = phi i64 [ %732, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %531, %block_407f36 ]
  %140 = phi %struct.Memory* [ %730, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %112, %block_407f36 ]
  %141 = add i64 %139, -48
  %142 = inttoptr i64 %141 to i32*
  store i32 3, i32* %142
  %143 = inttoptr i64 %141 to i32*
  %144 = load i32, i32* %143
  %145 = add i32 %144, -3
  %146 = icmp eq i32 %145, 0
  %147 = select i1 %146, i64 59, i64 17
  %148 = add i64 %138, %147
  br i1 %146, label %block_407f76, label %block_407f4c

block_4081b9:                                     ; preds = %block_40818e
  %149 = inttoptr i64 %137 to i32*
  store i32 0, i32* %149
  br label %block_4081c0

block_4081c0:                                     ; preds = %block_407f0e, %block_4081ad, %block_407fb6, %block_4081b9
  %150 = phi i64 [ %136, %block_4081b9 ], [ %136, %block_4081ad ], [ %226, %block_407fb6 ], [ %593, %block_407f0e ]
  %151 = phi %struct.Memory* [ %133, %block_4081b9 ], [ %133, %block_4081ad ], [ %92, %block_407fb6 ], [ %112, %block_407f0e ]
  %152 = add i64 %150, -4
  %153 = inttoptr i64 %152 to i32*
  %154 = load i32, i32* %153
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %6, align 8, !tbaa !1240
  %156 = load i64, i64* %11, align 8
  %157 = add i64 %156, 128
  %158 = icmp ugt i64 %156, -129
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %18, align 1, !tbaa !1264
  %160 = trunc i64 %157 to i32
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #10
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %19, align 1, !tbaa !1278
  %166 = xor i64 %157, %156
  %167 = lshr i64 %166, 4
  %168 = trunc i64 %167 to i8
  %169 = and i8 %168, 1
  store i8 %169, i8* %20, align 1, !tbaa !1279
  %170 = icmp eq i64 %157, 0
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %21, align 1, !tbaa !1280
  %172 = lshr i64 %157, 63
  %173 = trunc i64 %172 to i8
  store i8 %173, i8* %22, align 1, !tbaa !1281
  %174 = lshr i64 %156, 63
  %175 = xor i64 %172, %174
  %176 = add nuw nsw i64 %175, %172
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %23, align 1, !tbaa !1282
  %179 = add i64 %156, 136
  %180 = inttoptr i64 %157 to i64*
  %181 = load i64, i64* %180
  store i64 %181, i64* %12, align 8, !tbaa !1240
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182
  store i64 %183, i64* %3, align 8, !tbaa !1240
  %184 = add i64 %156, 144
  store i64 %184, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %151

block_407fb6:                                     ; preds = %block_407f76
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5097), i64* %9, align 8, !tbaa !1240
  %185 = load i64, i64* @stderr
  store i64 %185, i64* %10, align 8, !tbaa !1240
  %186 = add i64 %100, 25
  %187 = load i64, i64* %11, align 8, !tbaa !1240
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %186, i64* %189
  %190 = load i64, i64* %34, align 8, !alias.scope !2503, !noalias !2506
  %191 = load i64, i64* %33, align 8, !alias.scope !2503, !noalias !2506
  %192 = load i64, i64* %36, align 8, !alias.scope !2503, !noalias !2506
  %193 = load i64, i64* %37, align 8, !alias.scope !2503, !noalias !2506
  %194 = inttoptr i64 %187 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %187, 8
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %187, 16
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %187, 24
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %187, 32
  %206 = inttoptr i64 %205 to i64*
  %207 = load i64, i64* %206
  %208 = add i64 %187, 40
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209
  %211 = add i64 %187, 48
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %187, 56
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %187, 64
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %187, 72
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = inttoptr i64 %188 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %3, align 8, !alias.scope !2503, !noalias !2506
  store i64 %187, i64* %11, align 8, !alias.scope !2503, !noalias !2506
  %225 = tail call i64 @fprintf(i64 %185, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5097), i64 %190, i64 %191, i64 %192, i64 %193, i64 %195, i64 %198, i64 %201, i64 %204, i64 %207, i64 %210, i64 %213, i64 %216, i64 %219, i64 %222), !noalias !2503
  %226 = load i64, i64* %12, align 8
  %227 = add i64 %226, -20
  %228 = inttoptr i64 %227 to i32*
  %229 = load i32, i32* %228
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %7, align 8, !tbaa !1240
  %231 = add i64 %226, -4
  %232 = inttoptr i64 %231 to i32*
  store i32 %229, i32* %232
  %233 = add i64 %226, -96
  %234 = trunc i64 %225 to i32
  %235 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %235
  br label %block_4081c0

block_40802f:                                     ; preds = %block_407fe4
  %236 = add i64 %93, -60
  %237 = add i64 %523, 556
  %238 = inttoptr i64 %237 to i32*
  %239 = load i32, i32* %238
  %240 = add i64 %93, -56
  %241 = inttoptr i64 %240 to i32*
  store i32 %239, i32* %241
  %242 = inttoptr i64 %424 to i64*
  %243 = load i64, i64* %242
  %244 = add i64 %243, 4272
  %245 = inttoptr i64 %244 to i64*
  %246 = load i64, i64* %245
  %247 = add i64 %93, -104
  %248 = inttoptr i64 %247 to i64*
  store i64 %246, i64* %248
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249
  %251 = add i64 %529, 58
  %252 = load i64, i64* %11, align 8, !tbaa !1240
  %253 = add i64 %252, -8
  %254 = inttoptr i64 %253 to i64*
  store i64 %251, i64* %254
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %3, align 8, !alias.scope !2508, !noalias !2511
  store i64 %252, i64* %11, align 8, !alias.scope !2508, !noalias !2511
  %257 = tail call i64 @fwrite(i64 %236, i64 8, i64 1, i64 %250), !noalias !2508
  store i64 %257, i64* %32, align 8, !alias.scope !2508, !noalias !2511
  %258 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5130), i64* %9, align 8, !tbaa !1240
  %259 = load i64, i64* %12, align 8
  %260 = add i64 %259, -80
  store i64 %260, i64* %10, align 8, !tbaa !1240
  %261 = add i64 %259, -16
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  %264 = add i64 %263, 588
  %265 = inttoptr i64 %264 to i32*
  %266 = load i32, i32* %265
  %267 = add i64 %263, 556
  %268 = inttoptr i64 %267 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %266 to i64
  %271 = sext i32 %269 to i64
  %272 = mul nsw i64 %271, %270
  %273 = and i64 %272, 4294967295
  %274 = add i64 %263, 4496
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %276, %273
  %278 = inttoptr i64 %274 to i64*
  store i64 %277, i64* %278
  %279 = load i64, i64* %12, align 8
  %280 = add i64 %279, -40
  %281 = inttoptr i64 %280 to i32*
  %282 = load i32, i32* %281
  %283 = zext i32 %282 to i64
  %284 = add i64 %279, -112
  %285 = load i64, i64* %6, align 8
  %286 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %286
  %287 = add i64 %258, 75
  %288 = load i64, i64* %11, align 8, !tbaa !1240
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290
  %291 = load i64, i64* %10, align 8, !alias.scope !2513, !noalias !2516
  %292 = load i64, i64* %9, align 8, !alias.scope !2513, !noalias !2516
  %293 = load i64, i64* %37, align 8, !alias.scope !2513, !noalias !2516
  %294 = inttoptr i64 %288 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %288, 8
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %288, 16
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %288, 24
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = add i64 %288, 32
  %306 = inttoptr i64 %305 to i64*
  %307 = load i64, i64* %306
  %308 = add i64 %288, 40
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309
  %311 = add i64 %288, 48
  %312 = inttoptr i64 %311 to i64*
  %313 = load i64, i64* %312
  %314 = add i64 %288, 56
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  %317 = add i64 %288, 64
  %318 = inttoptr i64 %317 to i64*
  %319 = load i64, i64* %318
  %320 = add i64 %288, 72
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = inttoptr i64 %289 to i64*
  %324 = load i64, i64* %323
  store i64 %324, i64* %3, align 8, !alias.scope !2513, !noalias !2516
  store i64 %288, i64* %11, align 8, !alias.scope !2513, !noalias !2516
  %325 = tail call i64 @sprintf(i64 %291, i64 %292, i64 %283, i64 %277, i64 %273, i64 %293, i64 %295, i64 %298, i64 %301, i64 %304, i64 %307, i64 %310, i64 %313, i64 %316, i64 %319, i64 %322), !noalias !2513
  %326 = load i64, i64* %12, align 8
  %327 = add i64 %326, -80
  %328 = load i64, i64* %3, align 8
  store i64 %327, i64* %10, align 8, !tbaa !1240
  %329 = add i64 %326, -16
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330
  %332 = add i64 %331, 4476
  %333 = inttoptr i64 %332 to i32*
  %334 = load i32, i32* %333
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %9, align 8, !tbaa !1240
  %336 = add i64 %331, 536
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %8, align 8, !tbaa !1240
  %340 = add i64 %331, 4224
  %341 = inttoptr i64 %340 to i64*
  %342 = load i64, i64* %341
  store i64 %342, i64* %7, align 8, !tbaa !1240
  %343 = add i64 %326, -116
  %344 = trunc i64 %325 to i32
  %345 = inttoptr i64 %343 to i32*
  store i32 %344, i32* %345
  %346 = add i64 %328, 700
  %347 = add i64 %328, 43
  %348 = load i64, i64* %11, align 8, !tbaa !1240
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350
  store i64 %349, i64* %11, align 8, !tbaa !1240
  %351 = tail call %struct.Memory* @sub_408370_WriteOne32Tuple(%struct.State* nonnull %0, i64 %346, %struct.Memory* %518)
  %352 = load i64, i64* %3, align 8
  %353 = load i64, i64* %12, align 8
  %354 = add i64 %353, -16
  %355 = inttoptr i64 %354 to i64*
  %356 = load i64, i64* %355
  %357 = add i64 %356, 4224
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  %360 = add i64 %356, 556
  %361 = inttoptr i64 %360 to i32*
  %362 = load i32, i32* %361
  %363 = zext i32 %362 to i64
  %364 = add i64 %352, 38
  %365 = load i64, i64* %11, align 8, !tbaa !1240
  %366 = add i64 %365, -8
  %367 = inttoptr i64 %366 to i64*
  store i64 %364, i64* %367
  %368 = load i64, i64* %36, align 8, !alias.scope !2518, !noalias !2521
  %369 = load i64, i64* %37, align 8, !alias.scope !2518, !noalias !2521
  %370 = inttoptr i64 %365 to i64*
  %371 = load i64, i64* %370
  %372 = add i64 %365, 8
  %373 = inttoptr i64 %372 to i64*
  %374 = load i64, i64* %373
  %375 = add i64 %365, 16
  %376 = inttoptr i64 %375 to i64*
  %377 = load i64, i64* %376
  %378 = add i64 %365, 24
  %379 = inttoptr i64 %378 to i64*
  %380 = load i64, i64* %379
  %381 = add i64 %365, 32
  %382 = inttoptr i64 %381 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %365, 40
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %365, 48
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %365, 56
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = add i64 %365, 64
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  %396 = add i64 %365, 72
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  %399 = inttoptr i64 %366 to i64*
  %400 = load i64, i64* %399
  store i64 %400, i64* %3, align 8, !alias.scope !2518, !noalias !2521
  store i64 %365, i64* %11, align 8, !alias.scope !2518, !noalias !2521
  %401 = tail call i64 @fprintf(i64 %359, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5135), i64 %363, i64 %356, i64 %368, i64 %369, i64 %371, i64 %374, i64 %377, i64 %380, i64 %383, i64 %386, i64 %389, i64 %392, i64 %395, i64 %398), !noalias !2518
  %402 = load i64, i64* %12, align 8
  %403 = add i64 %402, -24
  %404 = load i64, i64* %3, align 8
  %405 = inttoptr i64 %403 to i32*
  store i32 0, i32* %405
  %406 = add i64 %402, -120
  %407 = trunc i64 %401 to i32
  %408 = add i64 %404, 10
  %409 = inttoptr i64 %406 to i32*
  store i32 %407, i32* %409
  %410 = load i64, i64* %36, align 8
  %411 = load i64, i64* %37, align 8
  br label %block_40810f

block_407e2e:                                     ; preds = %block_407e1b
  store i64 %508, i64* %8, align 8, !tbaa !1240
  %412 = shl nuw nsw i64 %508, 3
  %413 = add nuw nsw i64 %412, 4392
  %414 = add i64 %413, %510
  %415 = inttoptr i64 %414 to i64*
  store i64 0, i64* %415
  %416 = inttoptr i64 %532 to i32*
  %417 = load i32, i32* %416
  %418 = add i32 %417, 1
  %419 = inttoptr i64 %532 to i32*
  store i32 %418, i32* %419
  %420 = add i64 %516, -19
  br label %block_407e1b

block_407fdd:                                     ; preds = %block_407f76
  %421 = add i64 %93, -24
  %422 = add i64 %100, 7
  %423 = inttoptr i64 %421 to i32*
  store i32 0, i32* %423
  %424 = add i64 %93, -16
  br label %block_407fe4

block_407f4c:                                     ; preds = %block_407f3b
  %425 = add i64 %139, -32
  %426 = inttoptr i64 %425 to i64*
  %427 = load i64, i64* %426
  store i64 %427, i64* %10, align 8, !tbaa !1240
  %428 = add i64 %139, -16
  %429 = inttoptr i64 %428 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %430, 4484
  %432 = inttoptr i64 %431 to i32*
  %433 = load i32, i32* %432
  %434 = zext i32 %433 to i64
  store i64 %434, i64* %9, align 8, !tbaa !1240
  %435 = add i64 %430, 4312
  %436 = add i64 %430, 536
  %437 = inttoptr i64 %436 to i32*
  %438 = load i32, i32* %437
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %7, align 8, !tbaa !1240
  store i64 %435, i64* %8, align 8, !tbaa !1240
  %440 = add i64 %148, 4964
  %441 = add i64 %148, 42
  %442 = load i64, i64* %11, align 8, !tbaa !1240
  %443 = add i64 %442, -8
  %444 = inttoptr i64 %443 to i64*
  store i64 %441, i64* %444
  store i64 %443, i64* %11, align 8, !tbaa !1240
  %445 = tail call %struct.Memory* @sub_4092b0_GetRegTupleFromParent(%struct.State* nonnull %0, i64 %440, %struct.Memory* %140)
  %446 = load i64, i64* %3, align 8
  %447 = load i64, i64* %12, align 8
  br label %block_407f76

block_4081ad:                                     ; preds = %block_40818e
  %448 = inttoptr i64 %137 to i32*
  store i32 7, i32* %448
  br label %block_4081c0

block_408122:                                     ; preds = %block_40810f
  %449 = add i64 %545, 4224
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = shl nuw nsw i64 %542, 3
  %453 = add nuw nsw i64 %452, 4392
  %454 = add i64 %453, %545
  %455 = inttoptr i64 %454 to i64*
  %456 = load i64, i64* %455
  %457 = add i64 %551, 45
  %458 = load i64, i64* %11, align 8, !tbaa !1240
  %459 = add i64 %458, -8
  %460 = inttoptr i64 %459 to i64*
  store i64 %457, i64* %460
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461
  %463 = add i64 %458, 8
  %464 = inttoptr i64 %463 to i64*
  %465 = load i64, i64* %464
  %466 = add i64 %458, 16
  %467 = inttoptr i64 %466 to i64*
  %468 = load i64, i64* %467
  %469 = add i64 %458, 24
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  %472 = add i64 %458, 32
  %473 = inttoptr i64 %472 to i64*
  %474 = load i64, i64* %473
  %475 = add i64 %458, 40
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = add i64 %458, 48
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479
  %481 = add i64 %458, 56
  %482 = inttoptr i64 %481 to i64*
  %483 = load i64, i64* %482
  %484 = add i64 %458, 64
  %485 = inttoptr i64 %484 to i64*
  %486 = load i64, i64* %485
  %487 = add i64 %458, 72
  %488 = inttoptr i64 %487 to i64*
  %489 = load i64, i64* %488
  %490 = inttoptr i64 %459 to i64*
  %491 = load i64, i64* %490
  store i64 %491, i64* %3, align 8, !alias.scope !2523, !noalias !2526
  store i64 %458, i64* %11, align 8, !alias.scope !2523, !noalias !2526
  %492 = tail call i64 @fprintf(i64 %451, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5147), i64 %456, i64 %542, i64 %410, i64 %411, i64 %462, i64 %465, i64 %468, i64 %471, i64 %474, i64 %477, i64 %480, i64 %483, i64 %486, i64 %489), !noalias !2523
  %493 = load i64, i64* %12, align 8
  %494 = add i64 %493, -124
  %495 = trunc i64 %492 to i32
  %496 = load i64, i64* %3, align 8
  %497 = inttoptr i64 %494 to i32*
  store i32 %495, i32* %497
  %498 = add i64 %493, -24
  %499 = inttoptr i64 %498 to i32*
  %500 = load i32, i32* %499
  %501 = add i32 %500, 1
  %502 = inttoptr i64 %498 to i32*
  store i32 %501, i32* %502
  %503 = add i64 %496, -64
  br label %block_40810f

block_407e1b:                                     ; preds = %block_407e14, %block_407e2e
  %504 = phi i64 [ %533, %block_407e14 ], [ %420, %block_407e2e ]
  %505 = phi %struct.Memory* [ %654, %block_407e14 ], [ %505, %block_407e2e ]
  %506 = inttoptr i64 %532 to i32*
  %507 = load i32, i32* %506
  %508 = zext i32 %507 to i64
  %509 = inttoptr i64 %535 to i64*
  %510 = load i64, i64* %509
  %511 = add i64 %510, 540
  %512 = inttoptr i64 %511 to i32*
  %513 = load i32, i32* %512
  %514 = icmp ult i32 %507, %513
  %515 = select i1 %514, i64 19, i64 54
  %516 = add i64 %504, %515
  br i1 %514, label %block_407e2e, label %block_407e51

block_407fe4:                                     ; preds = %block_407fdd, %block_407ff7
  %517 = phi i64 [ %422, %block_407fdd ], [ %55, %block_407ff7 ]
  %518 = phi %struct.Memory* [ %92, %block_407fdd ], [ %518, %block_407ff7 ]
  %519 = inttoptr i64 %421 to i32*
  %520 = load i32, i32* %519
  %521 = zext i32 %520 to i64
  %522 = inttoptr i64 %424 to i64*
  %523 = load i64, i64* %522
  %524 = add i64 %523, 540
  %525 = inttoptr i64 %524 to i32*
  %526 = load i32, i32* %525
  %527 = icmp ult i32 %520, %526
  %528 = select i1 %527, i64 19, i64 75
  %529 = add i64 %517, %528
  br i1 %527, label %block_407ff7, label %block_40802f

block_407f36:                                     ; preds = %block_407eea
  %530 = add i64 %117, 5
  %531 = load i64, i64* %12, align 8
  br label %block_407f3b

block_407e14:                                     ; preds = %block_407ddd
  %532 = add i64 %676, -24
  %533 = add i64 %675, 7
  %534 = inttoptr i64 %532 to i32*
  store i32 0, i32* %534
  %535 = add i64 %676, -16
  br label %block_407e1b

block_40810f:                                     ; preds = %block_408122, %block_40802f
  %536 = phi i64 [ %408, %block_40802f ], [ %503, %block_408122 ]
  %537 = phi i64 [ %402, %block_40802f ], [ %493, %block_408122 ]
  %538 = phi %struct.Memory* [ %351, %block_40802f ], [ %538, %block_408122 ]
  %539 = add i64 %537, -24
  %540 = inttoptr i64 %539 to i32*
  %541 = load i32, i32* %540
  %542 = zext i32 %541 to i64
  %543 = add i64 %537, -16
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %545, 540
  %547 = inttoptr i64 %546 to i32*
  %548 = load i32, i32* %547
  %549 = icmp ult i32 %541, %548
  %550 = select i1 %549, i64 19, i64 81
  %551 = add i64 %536, %550
  br i1 %549, label %block_408122, label %block_408160

block_407f0e:                                     ; preds = %block_407eea
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5069), i64* %9, align 8, !tbaa !1240
  %552 = load i64, i64* @stderr
  store i64 %552, i64* %10, align 8, !tbaa !1240
  %553 = add i64 %117, 25
  %554 = load i64, i64* %11, align 8, !tbaa !1240
  %555 = add i64 %554, -8
  %556 = inttoptr i64 %555 to i64*
  store i64 %553, i64* %556
  %557 = load i64, i64* %34, align 8, !alias.scope !2528, !noalias !2531
  %558 = load i64, i64* %33, align 8, !alias.scope !2528, !noalias !2531
  %559 = load i64, i64* %36, align 8, !alias.scope !2528, !noalias !2531
  %560 = load i64, i64* %37, align 8, !alias.scope !2528, !noalias !2531
  %561 = inttoptr i64 %554 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %554, 8
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %554, 16
  %567 = inttoptr i64 %566 to i64*
  %568 = load i64, i64* %567
  %569 = add i64 %554, 24
  %570 = inttoptr i64 %569 to i64*
  %571 = load i64, i64* %570
  %572 = add i64 %554, 32
  %573 = inttoptr i64 %572 to i64*
  %574 = load i64, i64* %573
  %575 = add i64 %554, 40
  %576 = inttoptr i64 %575 to i64*
  %577 = load i64, i64* %576
  %578 = add i64 %554, 48
  %579 = inttoptr i64 %578 to i64*
  %580 = load i64, i64* %579
  %581 = add i64 %554, 56
  %582 = inttoptr i64 %581 to i64*
  %583 = load i64, i64* %582
  %584 = add i64 %554, 64
  %585 = inttoptr i64 %584 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %554, 72
  %588 = inttoptr i64 %587 to i64*
  %589 = load i64, i64* %588
  %590 = inttoptr i64 %555 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %3, align 8, !alias.scope !2528, !noalias !2531
  store i64 %554, i64* %11, align 8, !alias.scope !2528, !noalias !2531
  %592 = tail call i64 @fprintf(i64 %552, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5069), i64 %557, i64 %558, i64 %559, i64 %560, i64 %562, i64 %565, i64 %568, i64 %571, i64 %574, i64 %577, i64 %580, i64 %583, i64 %586, i64 %589), !noalias !2528
  %593 = load i64, i64* %12, align 8
  %594 = add i64 %593, -4
  %595 = inttoptr i64 %594 to i32*
  store i32 2, i32* %595
  %596 = add i64 %593, -92
  %597 = trunc i64 %592 to i32
  %598 = inttoptr i64 %596 to i32*
  store i32 %597, i32* %598
  br label %block_4081c0

block_408160:                                     ; preds = %block_40810f
  %599 = add i64 %545, 4224
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %545, 624
  %603 = inttoptr i64 %602 to i32*
  %604 = load i32, i32* %603
  %605 = zext i32 %604 to i64
  %606 = add i64 %551, 38
  %607 = load i64, i64* %11, align 8, !tbaa !1240
  %608 = add i64 %607, -8
  %609 = inttoptr i64 %608 to i64*
  store i64 %606, i64* %609
  %610 = load i64, i64* %36, align 8, !alias.scope !2533, !noalias !2536
  %611 = load i64, i64* %37, align 8, !alias.scope !2533, !noalias !2536
  %612 = inttoptr i64 %607 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %607, 8
  %615 = inttoptr i64 %614 to i64*
  %616 = load i64, i64* %615
  %617 = add i64 %607, 16
  %618 = inttoptr i64 %617 to i64*
  %619 = load i64, i64* %618
  %620 = add i64 %607, 24
  %621 = inttoptr i64 %620 to i64*
  %622 = load i64, i64* %621
  %623 = add i64 %607, 32
  %624 = inttoptr i64 %623 to i64*
  %625 = load i64, i64* %624
  %626 = add i64 %607, 40
  %627 = inttoptr i64 %626 to i64*
  %628 = load i64, i64* %627
  %629 = add i64 %607, 48
  %630 = inttoptr i64 %629 to i64*
  %631 = load i64, i64* %630
  %632 = add i64 %607, 56
  %633 = inttoptr i64 %632 to i64*
  %634 = load i64, i64* %633
  %635 = add i64 %607, 64
  %636 = inttoptr i64 %635 to i64*
  %637 = load i64, i64* %636
  %638 = add i64 %607, 72
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = inttoptr i64 %608 to i64*
  %642 = load i64, i64* %641
  store i64 %642, i64* %3, align 8, !alias.scope !2533, !noalias !2536
  store i64 %607, i64* %11, align 8, !alias.scope !2533, !noalias !2536
  %643 = tail call i64 @fprintf(i64 %601, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5155), i64 %605, i64 %545, i64 %610, i64 %611, i64 %613, i64 %616, i64 %619, i64 %622, i64 %625, i64 %628, i64 %631, i64 %634, i64 %637, i64 %640), !noalias !2533
  %644 = load i64, i64* %12, align 8
  %645 = add i64 %644, -128
  %646 = trunc i64 %643 to i32
  %647 = load i64, i64* %3, align 8
  %648 = inttoptr i64 %645 to i32*
  store i32 %646, i32* %648
  %649 = add i64 %647, -937
  %650 = load i64, i64* %11, align 8, !tbaa !1240
  br label %block_407ddd

block_407ddd:                                     ; preds = %block_408160, %block_407dc0
  %651 = phi i64 [ %17, %block_407dc0 ], [ %650, %block_408160 ]
  %652 = phi i64 [ %15, %block_407dc0 ], [ %644, %block_408160 ]
  %653 = phi i64 [ %30, %block_407dc0 ], [ %649, %block_408160 ]
  %654 = phi %struct.Memory* [ %2, %block_407dc0 ], [ %538, %block_408160 ]
  store i64 8, i64* %9, align 8, !tbaa !1240
  store i64 1, i64* %8, align 8, !tbaa !1240
  %655 = add i64 %652, -32
  %656 = add i64 %652, -16
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %658, 4256
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %652, -88
  %663 = inttoptr i64 %662 to i64*
  store i64 %661, i64* %663
  %664 = inttoptr i64 %662 to i64*
  %665 = load i64, i64* %664
  %666 = add i64 %653, 45
  %667 = add i64 %651, -8
  %668 = inttoptr i64 %667 to i64*
  store i64 %666, i64* %668
  %669 = inttoptr i64 %667 to i64*
  %670 = load i64, i64* %669
  store i64 %670, i64* %3, align 8, !alias.scope !2538, !noalias !2541
  store i64 %651, i64* %11, align 8, !alias.scope !2538, !noalias !2541
  %671 = tail call i64 @fread(i64 %655, i64 8, i64 1, i64 %665)
  %672 = load i64, i64* %3, align 8
  %673 = icmp eq i64 %671, 0
  %674 = select i1 %673, i64 900, i64 10
  %675 = add i64 %672, %674
  %676 = load i64, i64* %12, align 8
  br i1 %673, label %block_40818e, label %block_407e14

block_407e51:                                     ; preds = %block_407e1b
  %677 = add i64 %676, -32
  store i64 %677, i64* %6, align 8, !tbaa !1240
  %678 = add i64 %676, -40
  %679 = inttoptr i64 %678 to i32*
  %680 = load i32, i32* %679
  %681 = add i32 %680, 1
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %7, align 8, !tbaa !1240
  %683 = icmp eq i32 %680, -1
  %684 = icmp eq i32 %681, 0
  %685 = or i1 %683, %684
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %18, align 1, !tbaa !1264
  %687 = and i32 %681, 255
  %688 = tail call i32 @llvm.ctpop.i32(i32 %687) #10
  %689 = trunc i32 %688 to i8
  %690 = and i8 %689, 1
  %691 = xor i8 %690, 1
  store i8 %691, i8* %19, align 1, !tbaa !1278
  %692 = xor i32 %681, %680
  %693 = lshr i32 %692, 4
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  store i8 %695, i8* %20, align 1, !tbaa !1279
  %696 = zext i1 %684 to i8
  store i8 %696, i8* %21, align 1, !tbaa !1280
  %697 = lshr i32 %681, 31
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %22, align 1, !tbaa !1281
  %699 = lshr i32 %680, 31
  %700 = xor i32 %697, %699
  %701 = add nuw nsw i32 %700, %697
  %702 = icmp eq i32 %701, 2
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %23, align 1, !tbaa !1282
  %704 = inttoptr i64 %678 to i32*
  store i32 %681, i32* %704
  store i64 %677, i64* %10, align 8, !tbaa !1240
  %705 = add i64 %516, -28545
  %706 = add i64 %516, 21
  %707 = load i64, i64* %11, align 8, !tbaa !1240
  %708 = add i64 %707, -8
  %709 = inttoptr i64 %708 to i64*
  store i64 %706, i64* %709
  store i64 %708, i64* %11, align 8, !tbaa !1240
  %710 = tail call %struct.Memory* @sub_400ed0_swap8(%struct.State* nonnull %0, i64 %705, %struct.Memory* %505)
  %711 = load i64, i64* %12, align 8
  %712 = add i64 %711, -44
  %713 = load i64, i64* %3, align 8
  store i64 %712, i64* %7, align 8, !tbaa !1240
  %714 = add i64 %711, -32
  %715 = inttoptr i64 %714 to i64*
  %716 = load i64, i64* %715
  store i64 %716, i64* %10, align 8, !tbaa !1240
  %717 = add i64 %711, -16
  %718 = inttoptr i64 %717 to i64*
  %719 = load i64, i64* %718
  %720 = add i64 %719, 4312
  %721 = add i64 %719, 536
  %722 = inttoptr i64 %721 to i32*
  %723 = load i32, i32* %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %8, align 8, !tbaa !1240
  store i64 %720, i64* %9, align 8, !tbaa !1240
  %725 = add i64 %713, 4890
  %726 = add i64 %713, 36
  %727 = load i64, i64* %11, align 8, !tbaa !1240
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i64*
  store i64 %726, i64* %729
  store i64 %728, i64* %11, align 8, !tbaa !1240
  %730 = tail call %struct.Memory* @sub_409180_GetRegTupleFromBin64(%struct.State* nonnull %0, i64 %725, %struct.Memory* %710)
  %731 = load i64, i64* %3, align 8
  %732 = load i64, i64* %12, align 8
  %733 = add i64 %732, -32
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %732, -16
  %737 = inttoptr i64 %736 to i64*
  %738 = load i64, i64* %737
  %739 = add i64 %738, 536
  %740 = inttoptr i64 %739 to i32*
  %741 = load i32, i32* %740
  %742 = sub i32 64, %741
  %743 = trunc i32 %742 to i6
  %744 = trunc i64 %735 to i32
  switch i6 %743, label %746 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %745
  ]

; <label>:745:                                    ; preds = %block_407e51
  br label %751

; <label>:746:                                    ; preds = %block_407e51
  %747 = and i32 %742, 63
  %748 = zext i32 %747 to i64
  %749 = add nsw i64 %748, -1
  %750 = lshr i64 %735, %749
  br label %751

; <label>:751:                                    ; preds = %746, %745
  %752 = phi i64 [ %750, %746 ], [ %735, %745 ]
  %753 = lshr i64 %752, 1
  %754 = trunc i64 %753 to i32
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %751, %block_407e51
  %755 = phi i32 [ %744, %block_407e51 ], [ %754, %751 ]
  %756 = add i64 %732, -36
  %757 = inttoptr i64 %756 to i32*
  store i32 %755, i32* %757
  %758 = inttoptr i64 %756 to i32*
  %759 = load i32, i32* %758
  %760 = add i64 %732, -60
  %761 = inttoptr i64 %760 to i32*
  store i32 %759, i32* %761
  %762 = inttoptr i64 %736 to i64*
  %763 = load i64, i64* %762
  %764 = add i64 %763, 536
  %765 = inttoptr i64 %764 to i32*
  %766 = load i32, i32* %765
  %767 = sub i32 32, %766
  %768 = inttoptr i64 %756 to i32*
  %769 = load i32, i32* %768
  %770 = zext i32 %769 to i64
  %771 = trunc i32 %767 to i5
  switch i5 %771, label %774 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %772
  ]

; <label>:772:                                    ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %773 = shl i32 %769, 1
  br label %782

; <label>:774:                                    ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %775 = and i32 %767, 31
  %776 = zext i32 %775 to i64
  %777 = add nuw nsw i64 %776, 4294967295
  %778 = and i64 %777, 4294967295
  %779 = shl i64 %770, %778
  %780 = trunc i64 %779 to i32
  %781 = shl i32 %780, 1
  br label %782

; <label>:782:                                    ; preds = %774, %772
  %783 = phi i32 [ %773, %772 ], [ %781, %774 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %782, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %784 = phi i32 [ %769, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %783, %782 ]
  %785 = inttoptr i64 %756 to i32*
  store i32 %784, i32* %785
  %786 = inttoptr i64 %756 to i32*
  %787 = load i32, i32* %786
  %788 = inttoptr i64 %736 to i64*
  %789 = load i64, i64* %788
  %790 = add i64 %789, 4476
  %791 = inttoptr i64 %790 to i32*
  store i32 %787, i32* %791
  %792 = add i64 %732, -52
  %793 = inttoptr i64 %792 to i32*
  %794 = load i32, i32* %793
  %795 = icmp eq i32 %794, 0
  %796 = select i1 %795, i64 177, i64 96
  %797 = add i64 %731, %796
  br i1 %795, label %block_407f3b, label %block_407eea
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400e70_swap4(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400e70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  %13 = add i64 %10, -16
  %14 = load i64, i64* %6, align 8
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = inttoptr i64 %13 to i64*
  %17 = load i64, i64* %16
  %18 = add i64 %10, -32
  %19 = inttoptr i64 %18 to i64*
  store i64 %17, i64* %19
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %10, -17
  %25 = inttoptr i64 %24 to i8*
  store i8 %23, i8* %25
  %26 = inttoptr i64 %18 to i64*
  %27 = load i64, i64* %26
  %28 = add i64 %27, 3
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = inttoptr i64 %27 to i8*
  store i8 %30, i8* %31
  %32 = inttoptr i64 %24 to i8*
  %33 = load i8, i8* %32
  %34 = inttoptr i64 %18 to i64*
  %35 = load i64, i64* %34
  %36 = add i64 %35, 3
  %37 = inttoptr i64 %36 to i8*
  store i8 %33, i8* %37
  %38 = inttoptr i64 %18 to i64*
  %39 = load i64, i64* %38
  %40 = add i64 %39, 1
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8, i8* %41
  %43 = inttoptr i64 %24 to i8*
  store i8 %42, i8* %43
  %44 = inttoptr i64 %18 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %45, 2
  %47 = inttoptr i64 %46 to i8*
  %48 = load i8, i8* %47
  %49 = add i64 %45, 1
  %50 = inttoptr i64 %49 to i8*
  store i8 %48, i8* %50
  %51 = inttoptr i64 %24 to i8*
  %52 = load i8, i8* %51
  store i8 %52, i8* %5, align 1, !tbaa !1428
  %53 = inttoptr i64 %18 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %6, align 8, !tbaa !1240
  %55 = add i64 %54, 2
  %56 = inttoptr i64 %55 to i8*
  store i8 %52, i8* %56
  %57 = inttoptr i64 %11 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %8, align 8, !tbaa !1240
  %59 = inttoptr i64 %10 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %10, 8
  store i64 %61, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_407870_fake_fscanf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407870:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -56
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -24
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -32
  %27 = load i64, i64* %8, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %13, -40
  %30 = inttoptr i64 %29 to i32*
  store i32 0, i32* %30
  %31 = add i64 %13, -44
  %32 = add i64 %1, 30
  %33 = inttoptr i64 %31 to i32*
  store i32 0, i32* %33
  %34 = load i64, i64* %11, align 8
  %35 = add i64 %34, -25
  %36 = add i64 %34, -32
  %37 = add i64 %34, -24
  %38 = add i64 %34, -32
  br label %block_40788e

block_4078ba:                                     ; preds = %block_40788e
  %39 = inttoptr i64 %35 to i8*
  %40 = load i8, i8* %39
  %41 = sext i8 %40 to i32
  %42 = add nsw i32 %41, -32
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, i64 39, i64 13
  %45 = add i64 %79, %44
  br i1 %43, label %block_4078e1, label %block_4078c7

block_4078d4:                                     ; preds = %block_4078c7
  %46 = add nsw i32 %41, -10
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, i64 13, i64 52
  %49 = add i64 %98, %48
  br i1 %47, label %block_4078e1, label %block_407908

block_4078f0:                                     ; preds = %block_4078e1
  %50 = add i64 %34, -24
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = sext i32 %141 to i64
  store i64 %53, i64* %6, align 8, !tbaa !1240
  %54 = add i64 %52, %53
  %55 = inttoptr i64 %54 to i8*
  store i8 0, i8* %55
  %56 = add i64 %34, -4
  %57 = inttoptr i64 %56 to i32*
  store i32 0, i32* %57
  br label %block_407936

block_40788e:                                     ; preds = %block_40788e.backedge, %block_407870
  %58 = phi i64 [ %16, %block_407870 ], [ %84, %block_40788e.backedge ]
  %59 = phi i64 [ %32, %block_407870 ], [ %82, %block_40788e.backedge ]
  %60 = phi i64 [ %14, %block_407870 ], [ %34, %block_40788e.backedge ]
  %61 = phi %struct.Memory* [ %2, %block_407870 ], [ %83, %block_40788e.backedge ]
  %62 = add i64 %60, -25
  store i64 %62, i64* %9, align 8, !tbaa !1240
  %63 = add i64 %60, -16
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 1, i64* %8, align 8, !tbaa !1240
  %66 = add i64 %60, -48
  %67 = inttoptr i64 %66 to i64*
  store i64 %65, i64* %67
  store i64 1, i64* %7, align 8, !tbaa !1240
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68
  store i64 %69, i64* %6, align 8, !tbaa !1240
  %70 = add i64 %59, 34
  %71 = add i64 %58, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 %70, i64* %72
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73
  store i64 %58, i64* %10, align 8, !alias.scope !2543, !noalias !2546
  %75 = tail call i64 @fread(i64 %62, i64 1, i64 1, i64 %69)
  %76 = add i64 %75, -1
  %77 = icmp eq i64 %76, 0
  %78 = select i1 %77, i64 10, i64 117
  %79 = add i64 %74, %78
  br i1 %77, label %block_4078ba, label %block_407925

block_40792f:                                     ; preds = %block_407925
  %80 = inttoptr i64 %138 to i32*
  store i32 -1, i32* %80
  br label %block_407936

block_4078eb:                                     ; preds = %block_4078e1
  %81 = add i64 %144, -93
  br label %block_40788e.backedge

block_40788e.backedge:                            ; preds = %block_407908, %block_4078eb
  %82 = phi i64 [ %81, %block_4078eb ], [ %94, %block_407908 ]
  %83 = phi %struct.Memory* [ %61, %block_4078eb ], [ %61, %block_407908 ]
  %84 = load i64, i64* %10, align 8, !tbaa !1240
  br label %block_40788e

block_407908:                                     ; preds = %block_4078d4
  %85 = inttoptr i64 %37 to i64*
  %86 = load i64, i64* %85
  %87 = inttoptr i64 %38 to i32*
  %88 = load i32, i32* %87
  %89 = add i32 %88, 1
  %90 = inttoptr i64 %38 to i32*
  store i32 %89, i32* %90
  %91 = sext i32 %88 to i64
  %92 = add i64 %86, %91
  %93 = inttoptr i64 %92 to i8*
  store i8 %40, i8* %93
  %94 = add i64 %49, -122
  br label %block_40788e.backedge

block_4078c7:                                     ; preds = %block_4078ba
  %95 = add nsw i32 %41, -9
  %96 = icmp eq i32 %95, 0
  %97 = select i1 %96, i64 26, i64 13
  %98 = add i64 %45, %97
  br i1 %96, label %block_4078e1, label %block_4078d4

block_407936:                                     ; preds = %block_407925, %block_40792f, %block_4078f0
  %99 = phi i64 [ %138, %block_40792f ], [ %56, %block_4078f0 ], [ %138, %block_407925 ]
  %100 = phi %struct.Memory* [ %61, %block_40792f ], [ %61, %block_4078f0 ], [ %61, %block_407925 ]
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %5, align 8, !tbaa !1240
  %104 = load i64, i64* %10, align 8
  %105 = add i64 %104, 48
  %106 = icmp ugt i64 %104, -49
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %17, align 1, !tbaa !1264
  %108 = trunc i64 %105 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #10
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %18, align 1, !tbaa !1278
  %114 = xor i64 %104, 16
  %115 = xor i64 %114, %105
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %19, align 1, !tbaa !1279
  %119 = icmp eq i64 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %20, align 1, !tbaa !1280
  %121 = lshr i64 %105, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %21, align 1, !tbaa !1281
  %123 = lshr i64 %104, 63
  %124 = xor i64 %121, %123
  %125 = add nuw nsw i64 %124, %121
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %22, align 1, !tbaa !1282
  %128 = add i64 %104, 56
  %129 = inttoptr i64 %105 to i64*
  %130 = load i64, i64* %129
  store i64 %130, i64* %11, align 8, !tbaa !1240
  %131 = inttoptr i64 %128 to i64*
  %132 = load i64, i64* %131
  store i64 %132, i64* %3, align 8, !tbaa !1240
  %133 = add i64 %104, 64
  store i64 %133, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %100

block_407925:                                     ; preds = %block_40788e
  %134 = add i64 %34, -36
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135
  %137 = icmp eq i32 %136, 0
  %138 = add i64 %34, -4
  br i1 %137, label %block_40792f, label %block_407936

block_4078e1:                                     ; preds = %block_4078c7, %block_4078d4, %block_4078ba
  %139 = phi i64 [ %98, %block_4078c7 ], [ %49, %block_4078d4 ], [ %45, %block_4078ba ]
  %140 = inttoptr i64 %36 to i32*
  %141 = load i32, i32* %140
  %142 = icmp eq i32 %141, 0
  %143 = select i1 %142, i64 10, i64 15
  %144 = add i64 %139, %143
  br i1 %142, label %block_4078eb, label %block_4078f0
}

; Function Attrs: noinline
define %struct.Memory* @sub_40b920_DestroyTree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40b920:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  store i64 %10, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %9, -24
  store i64 %12, i64* %6, align 8, !tbaa !1240
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %9, -24
  %20 = load i64, i64* %5, align 8
  %21 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %21
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  %24 = icmp eq i64 %23, 0
  %25 = select i1 %24, i64 23, i64 35
  %26 = add i64 %25, %1
  br i1 %24, label %block_40b937, label %block_40b943

block_40b97e:                                     ; preds = %block_40b96e, %block_40b95f
  %27 = phi i64 [ %67, %block_40b95f ], [ %130, %block_40b96e ]
  %28 = phi i64 [ %57, %block_40b95f ], [ %132, %block_40b96e ]
  %29 = phi %struct.Memory* [ %58, %block_40b95f ], [ %58, %block_40b96e ]
  %30 = add i64 %28, -16
  %31 = inttoptr i64 %30 to i64*
  %32 = load i64, i64* %31
  %33 = add i64 %32, 80
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i64 31, i64 15
  %38 = add i64 %27, %37
  br i1 %36, label %block_40b99d, label %block_40b98d

block_40b99d:                                     ; preds = %block_40b98d, %block_40b97e
  %39 = phi i64 [ %38, %block_40b97e ], [ %116, %block_40b98d ]
  %40 = phi i64 [ %28, %block_40b97e ], [ %118, %block_40b98d ]
  %41 = phi %struct.Memory* [ %29, %block_40b97e ], [ %29, %block_40b98d ]
  %42 = add i64 %40, -16
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %5, align 8, !tbaa !1240
  %45 = add i64 %39, 12
  %46 = load i64, i64* %6, align 8, !tbaa !1240
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48
  store i64 %46, i64* %6, align 8, !alias.scope !2548, !noalias !2551
  %49 = tail call i64 @free(i64 %44), !noalias !2548
  %50 = load i64, i64* %7, align 8
  %51 = add i64 %50, -4
  %52 = inttoptr i64 %51 to i32*
  store i32 0, i32* %52
  %53 = load i64, i64* %6, align 8
  br label %block_40b9b0

block_40b937:                                     ; preds = %block_40b920
  %54 = add i64 %9, -12
  %55 = inttoptr i64 %54 to i32*
  store i32 3, i32* %55
  br label %block_40b9b0

block_40b95f:                                     ; preds = %block_40b943, %block_40b952
  %56 = phi i64 [ %124, %block_40b943 ], [ %72, %block_40b952 ]
  %57 = phi i64 [ %10, %block_40b943 ], [ %74, %block_40b952 ]
  %58 = phi %struct.Memory* [ %2, %block_40b943 ], [ %2, %block_40b952 ]
  %59 = add i64 %57, -16
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %61, 88
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = icmp eq i64 %64, 0
  %66 = select i1 %65, i64 31, i64 15
  %67 = add i64 %56, %66
  br i1 %65, label %block_40b97e, label %block_40b96e

block_40b952:                                     ; preds = %block_40b943
  %68 = add i64 %124, 13
  %69 = add i64 %9, -32
  %70 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %70
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71
  store i64 %12, i64* %6, align 8, !alias.scope !2553, !noalias !2556
  %73 = tail call i64 @free(i64 %121), !noalias !2553
  %74 = load i64, i64* %7, align 8
  br label %block_40b95f

block_40b9b0:                                     ; preds = %block_40b937, %block_40b99d
  %75 = phi i64 [ %53, %block_40b99d ], [ %12, %block_40b937 ]
  %76 = phi i64 [ %50, %block_40b99d ], [ %10, %block_40b937 ]
  %77 = phi %struct.Memory* [ %41, %block_40b99d ], [ %2, %block_40b937 ]
  %78 = add i64 %76, -4
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %4, align 8, !tbaa !1240
  %82 = add i64 %75, 16
  %83 = icmp ugt i64 %75, -17
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %13, align 1, !tbaa !1264
  %85 = trunc i64 %82 to i32
  %86 = and i32 %85, 255
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #10
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %14, align 1, !tbaa !1278
  %91 = xor i64 %75, 16
  %92 = xor i64 %91, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %15, align 1, !tbaa !1279
  %96 = icmp eq i64 %82, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %16, align 1, !tbaa !1280
  %98 = lshr i64 %82, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %17, align 1, !tbaa !1281
  %100 = lshr i64 %75, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %18, align 1, !tbaa !1282
  %105 = add i64 %75, 24
  %106 = inttoptr i64 %82 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %7, align 8, !tbaa !1240
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %3, align 8, !tbaa !1240
  %110 = add i64 %75, 32
  store i64 %110, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %77

block_40b98d:                                     ; preds = %block_40b97e
  %111 = add i64 %38, 16
  %112 = load i64, i64* %6, align 8, !tbaa !1240
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %111, i64* %114
  %115 = inttoptr i64 %113 to i64*
  %116 = load i64, i64* %115
  store i64 %112, i64* %6, align 8, !alias.scope !2558, !noalias !2561
  %117 = tail call i64 @free(i64 %35), !noalias !2558
  %118 = load i64, i64* %7, align 8
  br label %block_40b99d

block_40b943:                                     ; preds = %block_40b920
  %119 = add i64 %23, 96
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = icmp eq i64 %121, 0
  %123 = select i1 %122, i64 28, i64 15
  %124 = add i64 %26, %123
  br i1 %122, label %block_40b95f, label %block_40b952

block_40b96e:                                     ; preds = %block_40b95f
  %125 = add i64 %67, 16
  %126 = load i64, i64* %6, align 8, !tbaa !1240
  %127 = add i64 %126, -8
  %128 = inttoptr i64 %127 to i64*
  store i64 %125, i64* %128
  %129 = inttoptr i64 %127 to i64*
  %130 = load i64, i64* %129
  store i64 %126, i64* %6, align 8, !alias.scope !2563, !noalias !2566
  %131 = tail call i64 @free(i64 %64), !noalias !2563
  %132 = load i64, i64* %7, align 8
  br label %block_40b97e
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f36_def_401E8A(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = load i64, i64* %13, align 8
  br label %block_401f36

block_40216c:                                     ; preds = %block_40214c
  br label %block_40218f

block_402176:                                     ; preds = %block_40214c
  %21 = add i64 %398, -156
  %22 = inttoptr i64 %21 to i32*
  store i32 64, i32* %22
  br label %block_40218f

block_401e7b:                                     ; preds = %block_401e51
  %23 = inttoptr i64 %570 to i64*
  %24 = load i64, i64* %23
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %25 = shl i64 %24, 3
  %26 = add i64 %25, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 192)
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %8, align 8, !tbaa !1240
  store i64 %28, i64* %4, align 8, !tbaa !1240
  switch i64 %28, label %588 [
    i64 4202294, label %block_401f36.backedge
    i64 4202159, label %block_401eaf
    i64 4202124, label %block_401e8c
    i64 4202194, label %block_401ed2
    i64 4202229, label %block_401ef5
    i64 4202264, label %block_401f18
  ]

block_40215d:                                     ; preds = %block_40214c
  %29 = add i64 %398, -156
  %30 = inttoptr i64 %29 to i32*
  store i32 8, i32* %30
  br label %block_40218f

block_401ed2:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpW_type* @adcexpW to i64), i64* %9, align 8, !tbaa !1240
  %31 = inttoptr i64 %148 to i64*
  %32 = load i64, i64* %31
  store i64 %32, i64* %11, align 8, !tbaa !1240
  %33 = add i64 %147, -96
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %10, align 8, !tbaa !1240
  %36 = load i64, i64* %12, align 8, !tbaa !1240
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 4202217, i64* %38
  store i64 %37, i64* %12, align 8, !tbaa !1240
  %39 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %127)
  %40 = load i64, i64* %13, align 8
  %41 = add i64 %40, -176
  %42 = load i64, i64* %7, align 8
  %43 = load i64, i64* %4, align 8
  %44 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %44
  %45 = add i64 %43, 77
  br label %block_401f36.backedge

block_4020d7:                                     ; preds = %block_402046
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 845), i64* %10, align 8, !tbaa !1240
  %47 = load i64, i64* @stderr
  store i64 %47, i64* %11, align 8, !tbaa !1240
  %48 = add i64 %304, -136
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  store i64 %50, i64* %9, align 8, !tbaa !1240
  %51 = add i64 %310, 32
  %52 = load i64, i64* %12, align 8, !tbaa !1240
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %46, align 8, !alias.scope !2568, !noalias !2571
  %56 = load i64, i64* %246, align 8, !alias.scope !2568, !noalias !2571
  %57 = load i64, i64* %255, align 8, !alias.scope !2568, !noalias !2571
  %58 = inttoptr i64 %52 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %52, 8
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %52, 16
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %52, 24
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %52, 32
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %52, 40
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73
  %75 = add i64 %52, 48
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  %78 = add i64 %52, 56
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = add i64 %52, 64
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82
  %84 = add i64 %52, 72
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  store i64 %52, i64* %12, align 8, !alias.scope !2568, !noalias !2571
  %87 = tail call i64 @fprintf(i64 %47, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 845), i64 %50, i64 %55, i64 %56, i64 %57, i64 %59, i64 %62, i64 %65, i64 %68, i64 %71, i64 %74, i64 %77, i64 %80, i64 %83, i64 %86), !noalias !2568
  %88 = load i64, i64* %13, align 8
  %89 = add i64 %88, -4
  %90 = inttoptr i64 %89 to i32*
  store i32 0, i32* %90
  %91 = add i64 %88, -204
  %92 = trunc i64 %87 to i32
  %93 = inttoptr i64 %91 to i32*
  store i32 %92, i32* %93
  %94 = inttoptr i64 %89 to i32*
  %95 = load i32, i32* %94
  %96 = zext i32 %95 to i64
  store i64 %96, i64* %7, align 8, !tbaa !1240
  %97 = load i64, i64* %12, align 8
  %98 = add i64 %97, 256
  %99 = icmp ugt i64 %97, -257
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %14, align 1, !tbaa !1264
  %101 = trunc i64 %98 to i32
  %102 = and i32 %101, 255
  %103 = tail call i32 @llvm.ctpop.i32(i32 %102) #10
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  store i8 %106, i8* %15, align 1, !tbaa !1278
  %107 = xor i64 %98, %97
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %16, align 1, !tbaa !1279
  %111 = icmp eq i64 %98, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %17, align 1, !tbaa !1280
  %113 = lshr i64 %98, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %18, align 1, !tbaa !1281
  %115 = lshr i64 %97, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %113
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %19, align 1, !tbaa !1282
  %120 = add i64 %97, 264
  %121 = inttoptr i64 %98 to i64*
  %122 = load i64, i64* %121
  store i64 %122, i64* %13, align 8, !tbaa !1240
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %4, align 8, !tbaa !1240
  %125 = add i64 %97, 272
  store i64 %125, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %459

block_401f52:                                     ; preds = %block_401f47, %block_401f36
  %126 = phi i64 [ %340, %block_401f36 ], [ %580, %block_401f47 ]
  %127 = phi %struct.Memory* [ %319, %block_401f36 ], [ %319, %block_401f47 ]
  %128 = inttoptr i64 %320 to i64*
  %129 = load i64, i64* %128
  %130 = add i64 %318, -120
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %318, -80
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = shl i64 %135, 4
  %137 = add i64 %136, %132
  %138 = inttoptr i64 %137 to i64*
  store i64 %129, i64* %138
  %139 = inttoptr i64 %133 to i64*
  %140 = load i64, i64* %139
  %141 = inttoptr i64 %130 to i64*
  %142 = load i64, i64* %141
  %143 = shl i64 %140, 4
  %144 = add i64 %143, %142
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %145 to i64*
  store i64 %140, i64* %146
  %147 = load i64, i64* %13, align 8
  %148 = add i64 %147, -80
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %150, 1
  %152 = inttoptr i64 %148 to i64*
  store i64 %151, i64* %152
  %153 = inttoptr i64 %148 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %147, -60
  %156 = inttoptr i64 %155 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %9, align 8, !tbaa !1240
  %159 = add i64 %147, -184
  %160 = inttoptr i64 %159 to i64*
  store i64 %154, i64* %160
  %161 = trunc i32 %157 to i5
  switch i5 %161, label %162 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %170
  ]

; <label>:162:                                    ; preds = %block_401f52
  %163 = and i32 %157, 31
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %164, 4294967295
  %166 = and i64 %165, 4294967295
  %167 = shl i64 1, %166
  %168 = trunc i64 %167 to i32
  %169 = shl i32 %168, 1
  br label %170

; <label>:170:                                    ; preds = %162, %block_401f52
  %171 = phi i32 [ %169, %162 ], [ 2, %block_401f52 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %170, %block_401f52
  %172 = phi i32 [ 1, %block_401f52 ], [ %171, %170 ]
  %173 = sext i32 %172 to i64
  store i64 %173, i64* %10, align 8, !tbaa !1240
  %174 = inttoptr i64 %159 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %11, align 8, !tbaa !1240
  %176 = sub i64 %175, %173
  %177 = lshr i64 %176, 63
  %178 = trunc i64 %177 to i8
  %179 = lshr i64 %175, 63
  %180 = lshr i64 %173, 63
  %181 = xor i64 %180, %179
  %182 = xor i64 %177, %179
  %183 = add nuw nsw i64 %182, %181
  %184 = icmp eq i64 %183, 2
  %185 = icmp ne i8 %178, 0
  %186 = xor i1 %185, %184
  %187 = select i1 %186, i64 -257, i64 65
  %188 = add i64 %126, %187
  br i1 %186, label %block_401e51, label %block_401f93

block_401fdb:                                     ; preds = %block_401fc5
  %189 = add i64 %315, 23
  %190 = load i64, i64* %12, align 8, !tbaa !1240
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  store i64 %189, i64* %192
  %193 = inttoptr i64 %191 to i64*
  %194 = load i64, i64* %193
  store i64 %194, i64* %4, align 8, !alias.scope !2573, !noalias !2576
  store i64 %190, i64* %12, align 8, !alias.scope !2573, !noalias !2576
  %195 = tail call i64 @free(i64 %312), !noalias !2573
  %196 = load i64, i64* %13, align 8
  %197 = load i64, i64* %4, align 8
  br label %block_401ff2

block_40214c:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32
  %198 = inttoptr i64 %428 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %7, align 8, !tbaa !1240
  %200 = shl i64 %199, 3
  %201 = add i64 %200, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 8)
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %8, align 8, !tbaa !1240
  store i64 %203, i64* %4, align 8, !tbaa !1240
  switch i64 %203, label %590 [
    i64 4202860, label %block_40216c
    i64 4202895, label %block_40218f
    i64 4202885, label %block_402185
    i64 4202865, label %block_402171
    i64 4202845, label %block_40215d
    i64 4202870, label %block_402176
  ]

block_402046:                                     ; preds = %block_401f9b
  %204 = add i64 %476, 12
  %205 = load i64, i64* %12, align 8, !tbaa !1240
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %4, align 8, !alias.scope !2578, !noalias !2581
  store i64 %205, i64* %12, align 8, !alias.scope !2578, !noalias !2581
  %210 = tail call i64 @free(i64 %479), !noalias !2578
  %211 = load i64, i64* %13, align 8
  %212 = add i64 %211, -104
  %213 = load i64, i64* %4, align 8
  %214 = inttoptr i64 %212 to i64*
  %215 = load i64, i64* %214
  %216 = add i64 %213, 12
  %217 = load i64, i64* %12, align 8, !tbaa !1240
  %218 = add i64 %217, -8
  %219 = inttoptr i64 %218 to i64*
  store i64 %216, i64* %219
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220
  store i64 %221, i64* %4, align 8, !alias.scope !2583, !noalias !2586
  store i64 %217, i64* %12, align 8, !alias.scope !2583, !noalias !2586
  %222 = tail call i64 @free(i64 %215), !noalias !2583
  %223 = load i64, i64* %4, align 8
  %224 = load i64, i64* %13, align 8
  %225 = add i64 %224, -128
  %226 = inttoptr i64 %225 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 825), i64* %226
  %227 = add i64 %223, 33
  %228 = load i64, i64* %12, align 8, !tbaa !1240
  %229 = add i64 %228, -8
  %230 = inttoptr i64 %229 to i64*
  store i64 %227, i64* %230
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %4, align 8, !alias.scope !2588, !noalias !2591
  store i64 %228, i64* %12, align 8, !alias.scope !2588, !noalias !2591
  %233 = tail call i64 @calloc(i64 1024, i64 1)
  %234 = load i64, i64* %4, align 8
  %235 = load i64, i64* %13, align 8
  %236 = add i64 %235, -136
  %237 = inttoptr i64 %236 to i64*
  store i64 %233, i64* %237
  %238 = inttoptr i64 %236 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %235, -48
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %235, -128
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %8, align 8, !tbaa !1240
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %247 = add i64 %235, -52
  %248 = inttoptr i64 %247 to i32*
  %249 = load i32, i32* %248
  %250 = zext i32 %249 to i64
  store i64 %250, i64* %246, align 8, !tbaa !1240
  %251 = add i64 %234, 43
  %252 = load i64, i64* %12, align 8, !tbaa !1240
  %253 = add i64 %252, -8
  %254 = inttoptr i64 %253 to i64*
  store i64 %251, i64* %254
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %256 = load i64, i64* %255, align 8, !alias.scope !2593, !noalias !2596
  %257 = inttoptr i64 %252 to i64*
  %258 = load i64, i64* %257
  %259 = add i64 %252, 8
  %260 = inttoptr i64 %259 to i64*
  %261 = load i64, i64* %260
  %262 = add i64 %252, 16
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263
  %265 = add i64 %252, 24
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %252, 32
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = add i64 %252, 40
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %252, 48
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %252, 56
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  %280 = add i64 %252, 64
  %281 = inttoptr i64 %280 to i64*
  %282 = load i64, i64* %281
  %283 = add i64 %252, 72
  %284 = inttoptr i64 %283 to i64*
  %285 = load i64, i64* %284
  %286 = inttoptr i64 %253 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %4, align 8, !alias.scope !2593, !noalias !2596
  store i64 %252, i64* %12, align 8, !alias.scope !2593, !noalias !2596
  %288 = tail call i64 @sprintf(i64 %239, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 833), i64 %242, i64 %245, i64 %250, i64 %256, i64 %258, i64 %261, i64 %264, i64 %267, i64 %270, i64 %273, i64 %276, i64 %279, i64 %282, i64 %285), !noalias !2593
  %289 = load i64, i64* %4, align 8
  %290 = load i64, i64* %13, align 8
  %291 = add i64 %290, -136
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %290, -200
  %295 = trunc i64 %288 to i32
  %296 = inttoptr i64 %294 to i32*
  store i32 %295, i32* %296
  %297 = add i64 %289, 28
  %298 = load i64, i64* %12, align 8, !tbaa !1240
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %297, i64* %300
  %301 = inttoptr i64 %299 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %4, align 8, !alias.scope !2598, !noalias !2601
  store i64 %298, i64* %12, align 8, !alias.scope !2598, !noalias !2601
  %303 = tail call i64 @fopen(i64 %293, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 842))
  %304 = load i64, i64* %13, align 8
  %305 = add i64 %304, -144
  %306 = load i64, i64* %4, align 8
  %307 = inttoptr i64 %305 to i64*
  store i64 %303, i64* %307
  %308 = icmp eq i64 %303, 0
  %309 = select i1 %308, i64 17, i64 67
  %310 = add i64 %306, %309
  br i1 %308, label %block_4020d7, label %block_402109

block_401fc5:                                     ; preds = %block_401fad
  %311 = inttoptr i64 %368 to i64*
  %312 = load i64, i64* %311
  %313 = icmp eq i64 %312, 0
  %314 = select i1 %313, i64 45, i64 22
  %315 = add i64 %371, %314
  br i1 %313, label %block_401ff2, label %block_401fdb

block_401fc0:                                     ; preds = %block_401fad
  %316 = add i64 %371, 117
  br label %block_402035

block_401f36:                                     ; preds = %block_401f36.backedge, %3
  %317 = phi i64 [ %1, %3 ], [ %577, %block_401f36.backedge ]
  %318 = phi i64 [ %20, %3 ], [ %578, %block_401f36.backedge ]
  %319 = phi %struct.Memory* [ %2, %3 ], [ %579, %block_401f36.backedge ]
  %320 = add i64 %318, -176
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %318, -72
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  %326 = sub i64 %322, %325
  %327 = icmp eq i64 %326, 0
  %328 = lshr i64 %326, 63
  %329 = trunc i64 %328 to i8
  %330 = lshr i64 %322, 63
  %331 = lshr i64 %325, 63
  %332 = xor i64 %331, %330
  %333 = xor i64 %328, %330
  %334 = add nuw nsw i64 %333, %332
  %335 = icmp eq i64 %334, 2
  %336 = icmp ne i8 %329, 0
  %337 = xor i1 %336, %335
  %338 = or i1 %327, %337
  %339 = select i1 %338, i64 28, i64 17
  %340 = add i64 %317, %339
  br i1 %338, label %block_401f52, label %block_401f47

block_402035:                                     ; preds = %block_402021, %block_401fc0
  %341 = phi i64 [ %456, %block_402021 ], [ %316, %block_401fc0 ]
  %342 = phi i64 [ %455, %block_402021 ], [ %458, %block_401fc0 ]
  %343 = phi %struct.Memory* [ %437, %block_402021 ], [ %459, %block_401fc0 ]
  %344 = add i64 %342, -80
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %346, 1
  %348 = inttoptr i64 %344 to i64*
  store i64 %347, i64* %348
  %349 = add i64 %341, -154
  br label %block_401f9b

block_401eaf:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpS_type* @adcexpS to i64), i64* %9, align 8, !tbaa !1240
  %350 = inttoptr i64 %148 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %11, align 8, !tbaa !1240
  %352 = add i64 %147, -96
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  store i64 %354, i64* %10, align 8, !tbaa !1240
  %355 = load i64, i64* %12, align 8, !tbaa !1240
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 4202182, i64* %357
  store i64 %356, i64* %12, align 8, !tbaa !1240
  %358 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %127)
  %359 = load i64, i64* %13, align 8
  %360 = add i64 %359, -176
  %361 = load i64, i64* %7, align 8
  %362 = load i64, i64* %4, align 8
  %363 = inttoptr i64 %360 to i64*
  store i64 %361, i64* %363
  %364 = add i64 %362, 112
  br label %block_401f36.backedge

block_401fad:                                     ; preds = %block_401f9b
  %365 = shl i64 %462, 3
  %366 = add i64 %479, %365
  %367 = inttoptr i64 %366 to i64*
  %368 = load i64, i64* %367
  %369 = icmp eq i64 %368, 0
  %370 = select i1 %369, i64 19, i64 24
  %371 = add i64 %476, %370
  br i1 %369, label %block_401fc0, label %block_401fc5

block_402109:                                     ; preds = %block_402046
  %372 = add i64 %304, -120
  %373 = inttoptr i64 %372 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %11, align 8, !tbaa !1240
  %375 = add i64 %304, -60
  %376 = inttoptr i64 %375 to i8*
  %377 = load i8, i8* %376
  %378 = trunc i8 %377 to i5
  switch i5 %378, label %379 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32
    i5 1, label %387
  ]

; <label>:379:                                    ; preds = %block_402109
  %380 = and i8 %377, 31
  %381 = zext i8 %380 to i64
  %382 = add nuw nsw i64 %381, 4294967295
  %383 = and i64 %382, 4294967295
  %384 = shl i64 1, %383
  %385 = trunc i64 %384 to i32
  %386 = shl i32 %385, 1
  br label %387

; <label>:387:                                    ; preds = %379, %block_402109
  %388 = phi i32 [ %386, %379 ], [ 2, %block_402109 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32: ; preds = %387, %block_402109
  %389 = phi i32 [ 1, %block_402109 ], [ %388, %387 ]
  %390 = sext i32 %389 to i64
  store i64 %390, i64* %10, align 8, !tbaa !1240
  store i64 16, i64* %9, align 8, !tbaa !1240
  %391 = add i64 %310, 36
  %392 = load i64, i64* %12, align 8, !tbaa !1240
  %393 = add i64 %392, -8
  %394 = inttoptr i64 %393 to i64*
  store i64 %391, i64* %394
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %4, align 8, !alias.scope !2603, !noalias !2606
  store i64 %392, i64* %12, align 8, !alias.scope !2603, !noalias !2606
  %397 = tail call i64 @qsort(i64 %374, i64 %390, i64 16, i64 zext (i32 trunc (i64 and (i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @CompareViewsBySize to i64), i64 4294967295) to i32) to i64)), !noalias !2603
  %398 = load i64, i64* %13, align 8
  %399 = add i64 %398, -53
  %400 = load i64, i64* %4, align 8
  %401 = inttoptr i64 %399 to i8*
  %402 = load i8, i8* %401
  %403 = sext i8 %402 to i32
  %404 = add nsw i32 %403, -65
  %405 = zext i32 %404 to i64
  %406 = lshr i32 %404, 31
  %407 = add nsw i32 %403, -87
  %408 = icmp ult i32 %404, 22
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %14, align 1, !tbaa !1264
  %410 = and i32 %407, 255
  %411 = tail call i32 @llvm.ctpop.i32(i32 %410) #10
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  store i8 %414, i8* %15, align 1, !tbaa !1278
  %415 = xor i32 %404, 16
  %416 = xor i32 %415, %407
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  store i8 %419, i8* %16, align 1, !tbaa !1279
  %420 = icmp eq i32 %407, 0
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %17, align 1, !tbaa !1280
  %422 = lshr i32 %407, 31
  %423 = trunc i32 %422 to i8
  store i8 %423, i8* %18, align 1, !tbaa !1281
  %424 = xor i32 %422, %406
  %425 = add nuw nsw i32 %424, %406
  %426 = icmp eq i32 %425, 2
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %19, align 1, !tbaa !1282
  %428 = add i64 %398, -216
  %429 = inttoptr i64 %428 to i64*
  store i64 %405, i64* %429
  %430 = add i64 %398, -220
  %431 = inttoptr i64 %430 to i32*
  store i32 %407, i32* %431
  %432 = or i1 %420, %408
  %433 = select i1 %432, i64 31, i64 98
  %434 = add i64 %400, %433
  br i1 %432, label %block_40214c, label %block_40218f

block_402021:                                     ; preds = %block_401ff2, %block_402009
  %435 = phi i64 [ %524, %block_401ff2 ], [ %505, %block_402009 ]
  %436 = phi i64 [ %507, %block_401ff2 ], [ %504, %block_402009 ]
  %437 = phi %struct.Memory* [ %508, %block_401ff2 ], [ %508, %block_402009 ]
  %438 = add i64 %436, -96
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %436, -80
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = shl i64 %443, 3
  %445 = add i64 %440, %444
  %446 = inttoptr i64 %445 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %435, 20
  %449 = load i64, i64* %12, align 8, !tbaa !1240
  %450 = add i64 %449, -8
  %451 = inttoptr i64 %450 to i64*
  store i64 %448, i64* %451
  %452 = inttoptr i64 %450 to i64*
  %453 = load i64, i64* %452
  store i64 %453, i64* %4, align 8, !alias.scope !2608, !noalias !2611
  store i64 %449, i64* %12, align 8, !alias.scope !2608, !noalias !2611
  %454 = tail call i64 @free(i64 %447), !noalias !2608
  %455 = load i64, i64* %13, align 8
  %456 = load i64, i64* %4, align 8
  br label %block_402035

block_401f9b:                                     ; preds = %block_401f93, %block_402035
  %457 = phi i64 [ %480, %block_401f93 ], [ %349, %block_402035 ]
  %458 = phi i64 [ %147, %block_401f93 ], [ %342, %block_402035 ]
  %459 = phi %struct.Memory* [ %127, %block_401f93 ], [ %343, %block_402035 ]
  %460 = add i64 %458, -80
  %461 = inttoptr i64 %460 to i64*
  %462 = load i64, i64* %461
  %463 = load i64, i64* bitcast (%UpPrimeLim_type* @UpPrimeLim to i64*)
  %464 = sub i64 %462, %463
  %465 = lshr i64 %464, 63
  %466 = trunc i64 %465 to i8
  %467 = lshr i64 %462, 63
  %468 = lshr i64 %463, 63
  %469 = xor i64 %468, %467
  %470 = xor i64 %465, %467
  %471 = add nuw nsw i64 %470, %469
  %472 = icmp eq i64 %471, 2
  %473 = icmp ne i8 %466, 0
  %474 = xor i1 %473, %472
  %475 = select i1 %474, i64 18, i64 171
  %476 = add i64 %457, %475
  %477 = add i64 %458, -96
  %478 = inttoptr i64 %477 to i64*
  %479 = load i64, i64* %478
  br i1 %474, label %block_401fad, label %block_402046

block_402171:                                     ; preds = %block_40214c
  br label %block_40218f

block_401f93:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %480 = add i64 %188, 8
  %481 = inttoptr i64 %148 to i64*
  store i64 0, i64* %481
  br label %block_401f9b

block_401e8c:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexp_type* @adcexp to i64), i64* %9, align 8, !tbaa !1240
  %482 = inttoptr i64 %148 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %11, align 8, !tbaa !1240
  %484 = add i64 %147, -96
  %485 = inttoptr i64 %484 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %10, align 8, !tbaa !1240
  %487 = load i64, i64* %12, align 8, !tbaa !1240
  %488 = add i64 %487, -8
  %489 = inttoptr i64 %488 to i64*
  store i64 4202147, i64* %489
  store i64 %488, i64* %12, align 8, !tbaa !1240
  %490 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %127)
  %491 = load i64, i64* %13, align 8
  %492 = add i64 %491, -176
  %493 = load i64, i64* %7, align 8
  %494 = load i64, i64* %4, align 8
  %495 = inttoptr i64 %492 to i64*
  store i64 %493, i64* %495
  %496 = add i64 %494, 147
  br label %block_401f36.backedge

block_402009:                                     ; preds = %block_401ff2
  %497 = add i64 %524, 24
  %498 = load i64, i64* %12, align 8, !tbaa !1240
  %499 = add i64 %498, -8
  %500 = inttoptr i64 %499 to i64*
  store i64 %497, i64* %500
  %501 = inttoptr i64 %499 to i64*
  %502 = load i64, i64* %501
  store i64 %502, i64* %4, align 8, !alias.scope !2613, !noalias !2616
  store i64 %498, i64* %12, align 8, !alias.scope !2613, !noalias !2616
  %503 = tail call i64 @free(i64 %521), !noalias !2613
  %504 = load i64, i64* %13, align 8
  %505 = load i64, i64* %4, align 8
  br label %block_402021

block_401ff2:                                     ; preds = %block_401fc5, %block_401fdb
  %506 = phi i64 [ %315, %block_401fc5 ], [ %197, %block_401fdb ]
  %507 = phi i64 [ %458, %block_401fc5 ], [ %196, %block_401fdb ]
  %508 = phi %struct.Memory* [ %459, %block_401fc5 ], [ %459, %block_401fdb ]
  %509 = add i64 %507, -96
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %507, -80
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = shl i64 %514, 3
  %516 = add i64 %511, %515
  %517 = inttoptr i64 %516 to i64*
  %518 = load i64, i64* %517
  %519 = add i64 %518, 8
  %520 = inttoptr i64 %519 to i64*
  %521 = load i64, i64* %520
  %522 = icmp eq i64 %521, 0
  %523 = select i1 %522, i64 47, i64 23
  %524 = add i64 %506, %523
  br i1 %522, label %block_402021, label %block_402009

block_401ef5:                                     ; preds = %block_401e7b
  store i64 ptrtoint (%adcexpA_type* @adcexpA to i64), i64* %9, align 8, !tbaa !1240
  %525 = inttoptr i64 %148 to i64*
  %526 = load i64, i64* %525
  store i64 %526, i64* %11, align 8, !tbaa !1240
  %527 = add i64 %147, -96
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  store i64 %529, i64* %10, align 8, !tbaa !1240
  %530 = load i64, i64* %12, align 8, !tbaa !1240
  %531 = add i64 %530, -8
  %532 = inttoptr i64 %531 to i64*
  store i64 4202252, i64* %532
  store i64 %531, i64* %12, align 8, !tbaa !1240
  %533 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 4199072, %struct.Memory* %127)
  %534 = load i64, i64* %13, align 8
  %535 = add i64 %534, -176
  %536 = load i64, i64* %7, align 8
  %537 = load i64, i64* %4, align 8
  %538 = inttoptr i64 %535 to i64*
  store i64 %536, i64* %538
  %539 = add i64 %537, 42
  br label %block_401f36.backedge

block_401e51:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %540 = add i64 %147, -176
  %541 = inttoptr i64 %540 to i64*
  store i64 1, i64* %541
  %542 = add i64 %147, -53
  %543 = inttoptr i64 %542 to i8*
  %544 = load i8, i8* %543
  %545 = sext i8 %544 to i32
  %546 = add nsw i32 %545, -65
  %547 = zext i32 %546 to i64
  %548 = lshr i32 %546, 31
  %549 = add nsw i32 %545, -87
  %550 = icmp ult i32 %546, 22
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %14, align 1, !tbaa !1264
  %552 = and i32 %549, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #10
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %15, align 1, !tbaa !1278
  %557 = xor i32 %546, 16
  %558 = xor i32 %557, %549
  %559 = lshr i32 %558, 4
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  store i8 %561, i8* %16, align 1, !tbaa !1279
  %562 = icmp eq i32 %549, 0
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %17, align 1, !tbaa !1280
  %564 = lshr i32 %549, 31
  %565 = trunc i32 %564 to i8
  store i8 %565, i8* %18, align 1, !tbaa !1281
  %566 = xor i32 %564, %548
  %567 = add nuw nsw i32 %566, %548
  %568 = icmp eq i32 %567, 2
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %19, align 1, !tbaa !1282
  %570 = add i64 %147, -192
  %571 = inttoptr i64 %570 to i64*
  store i64 %547, i64* %571
  %572 = add i64 %147, -196
  %573 = inttoptr i64 %572 to i32*
  store i32 %549, i32* %573
  %574 = or i1 %562, %550
  %575 = select i1 %574, i64 42, i64 229
  %576 = add i64 %188, %575
  br i1 %574, label %block_401e7b, label %block_401f36.backedge

block_401f36.backedge:                            ; preds = %block_401e51, %block_401ef5, %block_401e8c, %block_401eaf, %block_401ed2, %block_401e7b
  %577 = phi i64 [ %576, %block_401e51 ], [ %539, %block_401ef5 ], [ %45, %block_401ed2 ], [ %496, %block_401e8c ], [ %364, %block_401eaf ], [ 4202294, %block_401e7b ]
  %578 = phi i64 [ %147, %block_401e51 ], [ %534, %block_401ef5 ], [ %40, %block_401ed2 ], [ %491, %block_401e8c ], [ %359, %block_401eaf ], [ %147, %block_401e7b ]
  %579 = phi %struct.Memory* [ %127, %block_401e51 ], [ %533, %block_401ef5 ], [ %39, %block_401ed2 ], [ %490, %block_401e8c ], [ %358, %block_401eaf ], [ %127, %block_401e7b ]
  br label %block_401f36

block_401f47:                                     ; preds = %block_401f36
  %580 = add i64 %340, 11
  %581 = inttoptr i64 %320 to i64*
  store i64 %325, i64* %581
  br label %block_401f52

block_402185:                                     ; preds = %block_40214c
  %582 = add i64 %398, -156
  %583 = inttoptr i64 %582 to i32*
  store i32 16384, i32* %583
  br label %block_40218f

block_40218f:                                     ; preds = %block_402185, %block_402171, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32, %block_40214c, %block_40215d, %block_402176, %block_40216c
  %584 = phi i64 [ %434, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32 ], [ 4202895, %block_402176 ], [ 4202895, %block_40215d ], [ 4202895, %block_402171 ], [ 4202895, %block_402185 ], [ 4202895, %block_40214c ], [ 4202895, %block_40216c ]
  %585 = phi %struct.Memory* [ %459, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit32 ], [ %459, %block_402176 ], [ %459, %block_40215d ], [ %459, %block_402171 ], [ %459, %block_402185 ], [ %459, %block_40214c ], [ %459, %block_40216c ]
  %586 = tail call %struct.Memory* @sub_40218f_def_40215B(%struct.State* nonnull %0, i64 %584, %struct.Memory* %585)
  ret %struct.Memory* %586

block_401f18:                                     ; preds = %block_401e7b
  %587 = tail call %struct.Memory* @sub_401f18(%struct.State* nonnull %0, i64 4202264, %struct.Memory* %127)
  ret %struct.Memory* %587

; <label>:588:                                    ; preds = %block_401e7b
  %589 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %28, %struct.Memory* %127)
  ret %struct.Memory* %589

; <label>:590:                                    ; preds = %block_40214c
  %591 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %203, %struct.Memory* %459)
  ret %struct.Memory* %591
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408240_Mlo32(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408240:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  %13 = add i64 %10, -12
  %14 = load i32, i32* %5, align 4
  %15 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %15
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i32*
  store i32 -2147483648, i32* %17
  %18 = add i64 %10, -24
  %19 = inttoptr i64 %18 to i32*
  store i32 0, i32* %19
  %20 = add i64 %10, -20
  %21 = add i64 %1, 28
  %22 = inttoptr i64 %20 to i32*
  store i32 0, i32* %22
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = add i64 %10, -16
  %30 = add i64 %10, -12
  %31 = add i64 %10, -24
  br label %block_40825c

block_40829a.loopexit:                            ; preds = %block_40825c
  %32 = add i32 %62, -32
  %33 = lshr i32 %32, 31
  %34 = lshr i32 %62, 31
  %35 = and i32 %32, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #10
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  %40 = xor i32 %32, %62
  %41 = lshr i32 %40, 4
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = icmp eq i32 %32, 0
  %45 = zext i1 %44 to i8
  %46 = trunc i32 %33 to i8
  %47 = xor i32 %33, %34
  %48 = add nuw nsw i32 %47, %34
  %49 = icmp eq i32 %48, 2
  %50 = zext i1 %49 to i8
  store i8 0, i8* %23, align 1, !tbaa !1428
  store i8 %39, i8* %24, align 1, !tbaa !1428
  store i8 %43, i8* %25, align 1, !tbaa !1428
  store i8 %45, i8* %26, align 1, !tbaa !1428
  store i8 %46, i8* %27, align 1, !tbaa !1428
  store i8 %50, i8* %28, align 1, !tbaa !1428
  br label %block_40829a

block_40829a:                                     ; preds = %block_408275, %block_40829a.loopexit
  %51 = inttoptr i64 %31 to i32*
  %52 = load i32, i32* %51
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %6, align 8, !tbaa !1240
  %54 = inttoptr i64 %11 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %8, align 8, !tbaa !1240
  %56 = inttoptr i64 %10 to i64*
  %57 = load i64, i64* %56
  store i64 %57, i64* %3, align 8, !tbaa !1240
  %58 = add i64 %10, 8
  store i64 %58, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %60

block_40825c:                                     ; preds = %block_40827a, %block_408240
  %59 = phi i64 [ %21, %block_408240 ], [ %76, %block_40827a ]
  %60 = phi %struct.Memory* [ %2, %block_408240 ], [ %60, %block_40827a ]
  %61 = inttoptr i64 %20 to i32*
  %62 = load i32, i32* %61
  %63 = icmp ult i32 %62, 32
  %64 = select i1 %63, i64 10, i64 62
  %65 = add i64 %59, %64
  br i1 %63, label %block_408266, label %block_40829a.loopexit

block_40827a:                                     ; preds = %block_408266
  %66 = lshr i32 %85, 1
  %67 = inttoptr i64 %29 to i32*
  store i32 %66, i32* %67
  %68 = inttoptr i64 %31 to i32*
  %69 = load i32, i32* %68
  %70 = add i32 %69, 1
  %71 = inttoptr i64 %31 to i32*
  store i32 %70, i32* %71
  %72 = inttoptr i64 %20 to i32*
  %73 = load i32, i32* %72
  %74 = add i32 %73, 1
  %75 = inttoptr i64 %20 to i32*
  store i32 %74, i32* %75
  %76 = add i64 %91, -30
  br label %block_40825c

block_408275:                                     ; preds = %block_408266
  %77 = and i32 %88, 255
  %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #10
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = lshr i32 %88, 31
  %83 = trunc i32 %82 to i8
  store i8 0, i8* %23, align 1, !tbaa !1428
  store i8 %81, i8* %24, align 1, !tbaa !1428
  store i8 0, i8* %25, align 1, !tbaa !1428
  store i8 0, i8* %26, align 1, !tbaa !1428
  store i8 %83, i8* %27, align 1, !tbaa !1428
  store i8 0, i8* %28, align 1, !tbaa !1428
  br label %block_40829a

block_408266:                                     ; preds = %block_40825c
  %84 = inttoptr i64 %29 to i32*
  %85 = load i32, i32* %84
  %86 = inttoptr i64 %30 to i32*
  %87 = load i32, i32* %86
  %88 = and i32 %87, %85
  %89 = icmp eq i32 %88, 0
  %90 = select i1 %89, i64 20, i64 15
  %91 = add i64 %65, %90
  br i1 %89, label %block_40827a, label %block_408275
}

; Function Attrs: noinline
define %struct.Memory* @sub_404650_SharedSortAggregate(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_404650:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %14 = load i64, i64* %12, align 8
  %15 = load i64, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %12, align 8, !tbaa !1240
  %18 = add i64 %15, -440
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -24
  %26 = load i64, i64* %10, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %15, -32
  %29 = inttoptr i64 %28 to i32*
  store i32 0, i32* %29
  %30 = add i64 %15, -272
  %31 = inttoptr i64 %30 to i64*
  store i64 0, i64* %31
  %32 = add i64 %15, -284
  %33 = inttoptr i64 %32 to i32*
  store i32 0, i32* %33
  %34 = add i64 %15, -296
  %35 = inttoptr i64 %34 to i32*
  store i32 0, i32* %35
  %36 = add i64 %15, -308
  %37 = inttoptr i64 %36 to i32*
  store i32 1048576, i32* %37
  %38 = add i64 %15, -336
  %39 = inttoptr i64 %38 to i32*
  store i32 0, i32* %39
  %40 = add i64 %15, -344
  %41 = inttoptr i64 %40 to i64*
  store i64 0, i64* %41
  %42 = inttoptr i64 %36 to i32*
  %43 = load i32, i32* %42
  %44 = zext i32 %43 to i64
  %45 = add i64 %1, 97
  %46 = add i64 %15, -448
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %49 = inttoptr i64 %46 to i64*
  %50 = load i64, i64* %49
  store i64 %50, i64* %3, align 8, !alias.scope !2618, !noalias !2621
  store i64 %18, i64* %11, align 8, !alias.scope !2618, !noalias !2621
  %51 = tail call i64 @malloc(i64 %44)
  %52 = load i64, i64* %12, align 8
  %53 = add i64 %52, -296
  %54 = load i64, i64* %3, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %51, i64* %55
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  %58 = icmp eq i64 %57, 0
  %59 = select i1 %58, i64 21, i64 64
  %60 = add i64 %54, %59
  br i1 %58, label %block_4046c6, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit73

block_404b79:                                     ; preds = %block_404ae4
  %61 = add i64 %226, -16
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %63, 616
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %10, align 8, !tbaa !1240
  %67 = add i64 %63, 548
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68
  %70 = zext i32 %69 to i64
  store i64 %70, i64* %9, align 8, !tbaa !1240
  %71 = add i64 %63, 540
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72
  %74 = zext i32 %73 to i64
  store i64 %74, i64* %8, align 8, !tbaa !1240
  %75 = add i64 %235, 27831
  %76 = add i64 %235, 36
  %77 = load i64, i64* %11, align 8, !tbaa !1240
  %78 = add i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64 %76, i64* %79
  store i64 %78, i64* %11, align 8, !tbaa !1240
  %80 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %75, %struct.Memory* %225)
  %81 = load i64, i64* %3, align 8
  %82 = load i64, i64* %12, align 8
  br label %block_404b9d

block_404fa6:                                     ; preds = %block_404e65, %block_404fa1, %block_404e76
  %83 = phi i64 [ %1439, %block_404e65 ], [ %1439, %block_404e76 ], [ %556, %block_404fa1 ]
  %84 = phi i64 [ %675, %block_404e65 ], [ %121, %block_404e76 ], [ %442, %block_404fa1 ]
  %85 = phi %struct.Memory* [ %1440, %block_404e65 ], [ %1440, %block_404e76 ], [ %555, %block_404fa1 ]
  %86 = add i64 %83, -16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %88, 4240
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %84, 25
  %93 = load i64, i64* %11, align 8, !tbaa !1240
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96
  store i64 %97, i64* %3, align 8, !alias.scope !2623, !noalias !2626
  store i64 %93, i64* %11, align 8, !alias.scope !2623, !noalias !2626
  %98 = tail call i64 @fseek(i64 %91, i64 0, i64 2), !noalias !2623
  %99 = load i64, i64* %12, align 8
  %100 = add i64 %99, -16
  %101 = load i64, i64* %3, align 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %103, 624
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = icmp eq i32 %106, 0
  %108 = add i64 %99, -412
  %109 = trunc i64 %98 to i32
  %110 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %110
  %111 = select i1 %107, i64 23, i64 142
  %112 = add i64 %101, %111
  br i1 %107, label %block_404fd6, label %block_40504d

block_404e76:                                     ; preds = %block_404e65
  %113 = add i64 %669, 616
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %115, 40
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117
  %119 = icmp eq i32 %118, 0
  %120 = select i1 %119, i64 304, i64 21
  %121 = add i64 %675, %120
  br i1 %119, label %block_404fa6, label %block_404e8b

block_404f77:                                     ; preds = %block_404e8b
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64* %9, align 8, !tbaa !1240
  %122 = load i64, i64* @stderr
  store i64 %122, i64* %10, align 8, !tbaa !1240
  %123 = add i64 %565, 25
  %124 = load i64, i64* %11, align 8, !tbaa !1240
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %123, i64* %126
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %129 = load i64, i64* %589, align 8, !alias.scope !2628, !noalias !2631
  %130 = load i64, i64* %588, align 8, !alias.scope !2628, !noalias !2631
  %131 = load i64, i64* %127, align 8, !alias.scope !2628, !noalias !2631
  %132 = load i64, i64* %128, align 8, !alias.scope !2628, !noalias !2631
  %133 = inttoptr i64 %124 to i64*
  %134 = load i64, i64* %133
  %135 = add i64 %124, 8
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %124, 16
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  %141 = add i64 %124, 24
  %142 = inttoptr i64 %141 to i64*
  %143 = load i64, i64* %142
  %144 = add i64 %124, 32
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %124, 40
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %124, 48
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %124, 56
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  %156 = add i64 %124, 64
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %124, 72
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = inttoptr i64 %125 to i64*
  %163 = load i64, i64* %162
  store i64 %163, i64* %3, align 8, !alias.scope !2628, !noalias !2631
  store i64 %124, i64* %11, align 8, !alias.scope !2628, !noalias !2631
  %164 = tail call i64 @fprintf(i64 %122, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64 %129, i64 %130, i64 %131, i64 %132, i64 %134, i64 %137, i64 %140, i64 %143, i64 %146, i64 %149, i64 %152, i64 %155, i64 %158, i64 %161), !noalias !2628
  %165 = load i64, i64* %12, align 8
  %166 = add i64 %165, -20
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  %169 = zext i32 %168 to i64
  store i64 %169, i64* %7, align 8, !tbaa !1240
  %170 = add i64 %165, -4
  %171 = inttoptr i64 %170 to i32*
  store i32 %168, i32* %171
  %172 = add i64 %165, -408
  %173 = trunc i64 %164 to i32
  %174 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %174
  br label %block_4050fb

block_4047e9:                                     ; preds = %block_4047d7
  %175 = add i32 %1443, -1
  %176 = icmp eq i32 %1443, 0
  %177 = icmp eq i32 %175, 0
  %178 = or i1 %177, %176
  %179 = select i1 %178, i64 44, i64 13
  %180 = add i64 %1452, %179
  br i1 %178, label %block_404815, label %block_4047f6

block_404ae4:                                     ; preds = %block_404a3d
  %181 = add i64 %640, 616
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %183, 40
  %185 = inttoptr i64 %184 to i32*
  %186 = load i32, i32* %185
  %187 = add i64 %640, 588
  %188 = inttoptr i64 %187 to i32*
  %189 = load i32, i32* %188
  %190 = sext i32 %186 to i64
  %191 = sext i32 %189 to i64
  %192 = mul nsw i64 %191, %190
  %193 = and i64 %192, 4294967295
  %194 = add i64 %637, -264
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %196, %193
  %198 = inttoptr i64 %194 to i64*
  store i64 %197, i64* %198
  %199 = inttoptr i64 %638 to i64*
  %200 = load i64, i64* %199
  %201 = add i64 %200, 588
  %202 = inttoptr i64 %201 to i32*
  %203 = load i32, i32* %202
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %10, align 8, !tbaa !1240
  %205 = load i64, i64* %12, align 8
  %206 = add i64 %205, -16
  %207 = inttoptr i64 %206 to i64*
  %208 = load i64, i64* %207
  %209 = add i64 %208, 4248
  %210 = inttoptr i64 %209 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %9, align 8, !tbaa !1240
  %212 = add i64 %208, 616
  %213 = inttoptr i64 %212 to i64*
  %214 = load i64, i64* %213
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %8, align 8, !tbaa !1240
  %217 = add i64 %208, 4224
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %7, align 8, !tbaa !1240
  %220 = add i64 %666, 27292
  %221 = add i64 %666, 94
  %222 = load i64, i64* %11, align 8, !tbaa !1240
  %223 = add i64 %222, -8
  %224 = inttoptr i64 %223 to i64*
  store i64 %221, i64* %224
  store i64 %223, i64* %11, align 8, !tbaa !1240
  %225 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %220, %struct.Memory* %1064)
  %226 = load i64, i64* %12, align 8
  %227 = add i64 %226, -20
  %228 = load i32, i32* %5, align 4
  %229 = load i64, i64* %3, align 8
  %230 = inttoptr i64 %227 to i32*
  store i32 %228, i32* %230
  %231 = inttoptr i64 %227 to i32*
  %232 = load i32, i32* %231
  %233 = icmp eq i32 %232, 0
  %234 = select i1 %233, i64 55, i64 13
  %235 = add i64 %229, %234
  br i1 %233, label %block_404b79, label %block_404b4f

block_405063:                                     ; preds = %block_40504d
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3879), i64* %9, align 8, !tbaa !1240
  %236 = load i64, i64* @stderr
  store i64 %236, i64* %10, align 8, !tbaa !1240
  %237 = add i64 %381, 25
  %238 = load i64, i64* %11, align 8, !tbaa !1240
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %243 = load i64, i64* %589, align 8, !alias.scope !2633, !noalias !2636
  %244 = load i64, i64* %588, align 8, !alias.scope !2633, !noalias !2636
  %245 = load i64, i64* %241, align 8, !alias.scope !2633, !noalias !2636
  %246 = load i64, i64* %242, align 8, !alias.scope !2633, !noalias !2636
  %247 = inttoptr i64 %238 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %238, 8
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %238, 16
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %238, 24
  %256 = inttoptr i64 %255 to i64*
  %257 = load i64, i64* %256
  %258 = add i64 %238, 32
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  %261 = add i64 %238, 40
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  %264 = add i64 %238, 48
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  %267 = add i64 %238, 56
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %238, 64
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %238, 72
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  %276 = inttoptr i64 %239 to i64*
  %277 = load i64, i64* %276
  store i64 %277, i64* %3, align 8, !alias.scope !2633, !noalias !2636
  store i64 %238, i64* %11, align 8, !alias.scope !2633, !noalias !2636
  %278 = tail call i64 @fprintf(i64 %236, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3879), i64 %243, i64 %244, i64 %245, i64 %246, i64 %248, i64 %251, i64 %254, i64 %257, i64 %260, i64 %263, i64 %266, i64 %269, i64 %272, i64 %275), !noalias !2633
  %279 = load i64, i64* %12, align 8
  %280 = add i64 %279, -20
  %281 = inttoptr i64 %280 to i32*
  %282 = load i32, i32* %281
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %7, align 8, !tbaa !1240
  %284 = add i64 %279, -4
  %285 = inttoptr i64 %284 to i32*
  store i32 %282, i32* %285
  %286 = add i64 %279, -420
  %287 = trunc i64 %278 to i32
  %288 = inttoptr i64 %286 to i32*
  store i32 %287, i32* %288
  br label %block_4050fb

block_4050f4:                                     ; preds = %block_405092, %block_4050e8
  %289 = phi i64 [ %1529, %block_405092 ], [ %575, %block_4050e8 ]
  %290 = phi %struct.Memory* [ %1493, %block_405092 ], [ %1493, %block_4050e8 ]
  %291 = add i64 %289, -4
  %292 = inttoptr i64 %291 to i32*
  store i32 0, i32* %292
  br label %block_4050fb

block_404dd0:                                     ; preds = %block_404d86, %block_404dcb
  %293 = phi i64 [ %1481, %block_404d86 ], [ %1676, %block_404dcb ]
  %294 = phi i64 [ %1686, %block_404d86 ], [ %916, %block_404dcb ]
  %295 = phi %struct.Memory* [ %1480, %block_404d86 ], [ %1675, %block_404dcb ]
  %296 = add i64 %293, -16
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %298, 616
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %10, align 8, !tbaa !1240
  %302 = add i64 %298, 548
  %303 = inttoptr i64 %302 to i32*
  %304 = load i32, i32* %303
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %9, align 8, !tbaa !1240
  %306 = add i64 %298, 540
  %307 = inttoptr i64 %306 to i32*
  %308 = load i32, i32* %307
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %8, align 8, !tbaa !1240
  %310 = add i64 %294, 27232
  %311 = add i64 %294, 36
  %312 = load i64, i64* %11, align 8, !tbaa !1240
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %311, i64* %314
  store i64 %313, i64* %11, align 8, !tbaa !1240
  %315 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %310, %struct.Memory* %295)
  %316 = load i64, i64* %12, align 8
  %317 = add i64 %316, -256
  %318 = load i64, i64* %3, align 8
  store i64 %317, i64* %9, align 8, !tbaa !1240
  %319 = add i64 %316, -16
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320
  %322 = add i64 %321, 616
  %323 = inttoptr i64 %322 to i64*
  %324 = load i64, i64* %323
  store i64 %324, i64* %10, align 8, !tbaa !1240
  %325 = add i64 %318, 23500
  %326 = add i64 %318, 23
  %327 = load i64, i64* %11, align 8, !tbaa !1240
  %328 = add i64 %327, -8
  %329 = inttoptr i64 %328 to i64*
  store i64 %326, i64* %329
  store i64 %328, i64* %11, align 8, !tbaa !1240
  %330 = tail call %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* nonnull %0, i64 %325, %struct.Memory* %315)
  %331 = load i64, i64* %12, align 8
  %332 = add i64 %331, -276
  %333 = load i64, i64* %3, align 8
  %334 = inttoptr i64 %332 to i32*
  %335 = load i32, i32* %334
  %336 = add i64 %331, -288
  %337 = inttoptr i64 %336 to i32*
  %338 = load i32, i32* %337
  %339 = add i32 %338, %335
  %340 = inttoptr i64 %336 to i32*
  store i32 %339, i32* %340
  %341 = inttoptr i64 %332 to i32*
  store i32 1, i32* %341
  %342 = add i64 %331, -404
  %343 = load i32, i32* %5, align 4
  %344 = add i64 %333, 34
  %345 = inttoptr i64 %342 to i32*
  store i32 %343, i32* %345
  br label %block_404e32

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit39: ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit73
  %346 = add i64 %52, -304
  %347 = inttoptr i64 %346 to i32*
  %348 = load i32, i32* %347
  %349 = add i64 %52, -312
  %350 = inttoptr i64 %349 to i32*
  store i32 %348, i32* %350
  %351 = add i64 %52, -16
  %352 = inttoptr i64 %351 to i64*
  %353 = load i64, i64* %352
  %354 = add i64 %353, 4488
  %355 = inttoptr i64 %354 to i32*
  %356 = load i32, i32* %355
  %357 = add i64 %760, 30
  %358 = inttoptr i64 %346 to i32*
  %359 = load i32, i32* %358
  %360 = urem i32 %356, %359
  %361 = icmp eq i32 %360, 0
  %362 = select i1 %361, i64 53, i64 9
  %363 = add i64 %357, %362
  br i1 %361, label %block_4047ae, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

block_40504d:                                     ; preds = %block_404fa6
  %364 = inttoptr i64 %100 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %10, align 8, !tbaa !1240
  %366 = add i64 %112, 195
  %367 = add i64 %112, 9
  %368 = load i64, i64* %11, align 8, !tbaa !1240
  %369 = add i64 %368, -8
  %370 = inttoptr i64 %369 to i64*
  store i64 %367, i64* %370
  store i64 %369, i64* %11, align 8, !tbaa !1240
  %371 = tail call %struct.Memory* @sub_405110_MultiWayMerge(%struct.State* nonnull %0, i64 %366, %struct.Memory* %85)
  %372 = load i64, i64* %12, align 8
  %373 = add i64 %372, -20
  %374 = load i32, i32* %5, align 4
  %375 = load i64, i64* %3, align 8
  %376 = inttoptr i64 %373 to i32*
  store i32 %374, i32* %376
  %377 = inttoptr i64 %373 to i32*
  %378 = load i32, i32* %377
  %379 = icmp eq i32 %378, 0
  %380 = select i1 %379, i64 55, i64 13
  %381 = add i64 %375, %380
  br i1 %379, label %block_40508d, label %block_405063

block_404e4c:                                     ; preds = %block_4048a6
  %382 = add i64 %1142, -308
  %383 = inttoptr i64 %382 to i32*
  %384 = load i32, i32* %383
  %385 = add i32 %384, 1
  %386 = inttoptr i64 %382 to i32*
  store i32 %385, i32* %386
  %387 = add i64 %1155, -1653
  br label %block_4047d7

block_404b4f:                                     ; preds = %block_404ae4
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64* %9, align 8, !tbaa !1240
  %388 = load i64, i64* @stderr
  store i64 %388, i64* %10, align 8, !tbaa !1240
  %389 = add i64 %235, 25
  %390 = load i64, i64* %11, align 8, !tbaa !1240
  %391 = add i64 %390, -8
  %392 = inttoptr i64 %391 to i64*
  store i64 %389, i64* %392
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %395 = load i64, i64* %589, align 8, !alias.scope !2638, !noalias !2641
  %396 = load i64, i64* %588, align 8, !alias.scope !2638, !noalias !2641
  %397 = load i64, i64* %393, align 8, !alias.scope !2638, !noalias !2641
  %398 = load i64, i64* %394, align 8, !alias.scope !2638, !noalias !2641
  %399 = inttoptr i64 %390 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %390, 8
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %390, 16
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %390, 24
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %390, 32
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %390, 40
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = add i64 %390, 48
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %390, 56
  %420 = inttoptr i64 %419 to i64*
  %421 = load i64, i64* %420
  %422 = add i64 %390, 64
  %423 = inttoptr i64 %422 to i64*
  %424 = load i64, i64* %423
  %425 = add i64 %390, 72
  %426 = inttoptr i64 %425 to i64*
  %427 = load i64, i64* %426
  %428 = inttoptr i64 %391 to i64*
  %429 = load i64, i64* %428
  store i64 %429, i64* %3, align 8, !alias.scope !2638, !noalias !2641
  store i64 %390, i64* %11, align 8, !alias.scope !2638, !noalias !2641
  %430 = tail call i64 @fprintf(i64 %388, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64 %395, i64 %396, i64 %397, i64 %398, i64 %400, i64 %403, i64 %406, i64 %409, i64 %412, i64 %415, i64 %418, i64 %421, i64 %424, i64 %427), !noalias !2638
  %431 = load i64, i64* %12, align 8
  %432 = add i64 %431, -20
  %433 = inttoptr i64 %432 to i32*
  %434 = load i32, i32* %433
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %7, align 8, !tbaa !1240
  %436 = add i64 %431, -4
  %437 = inttoptr i64 %436 to i32*
  store i32 %434, i32* %437
  %438 = add i64 %431, -384
  %439 = trunc i64 %430 to i32
  %440 = inttoptr i64 %438 to i32*
  store i32 %439, i32* %440
  br label %block_4050fb

block_405048:                                     ; preds = %block_404fd6
  %441 = add i64 %1574, 74
  br label %block_405092

block_404fa1:                                     ; preds = %block_404e8b
  %442 = add i64 %565, 5
  br label %block_404fa6

block_4047f6:                                     ; preds = %block_4047e9
  %443 = add i64 %1439, -16
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %445, 4240
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %1439, -272
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %180, 25
  %453 = load i64, i64* %11, align 8, !tbaa !1240
  %454 = add i64 %453, -8
  %455 = inttoptr i64 %454 to i64*
  store i64 %452, i64* %455
  %456 = inttoptr i64 %454 to i64*
  %457 = load i64, i64* %456
  store i64 %457, i64* %3, align 8, !alias.scope !2643, !noalias !2646
  store i64 %453, i64* %11, align 8, !alias.scope !2643, !noalias !2646
  %458 = tail call i64 @fseek(i64 %448, i64 %451, i64 0), !noalias !2643
  %459 = load i64, i64* %12, align 8
  %460 = add i64 %459, -344
  %461 = trunc i64 %458 to i32
  %462 = load i64, i64* %3, align 8
  %463 = add i64 %462, 6
  %464 = inttoptr i64 %460 to i32*
  store i32 %461, i32* %464
  br label %block_404815

block_404e8b:                                     ; preds = %block_404e76
  %465 = add i64 %669, 632
  %466 = inttoptr i64 %465 to i64*
  %467 = load i64, i64* %466
  %468 = zext i32 %672 to i64
  %469 = mul nuw nsw i64 %468, 24
  %470 = add i64 %469, %467
  %471 = inttoptr i64 %470 to i32*
  store i32 %118, i32* %471
  %472 = add i64 %1439, -264
  %473 = inttoptr i64 %472 to i64*
  %474 = load i64, i64* %473
  %475 = inttoptr i64 %667 to i64*
  %476 = load i64, i64* %475
  %477 = add i64 %476, 632
  %478 = inttoptr i64 %477 to i64*
  %479 = load i64, i64* %478
  %480 = load i64, i64* %12, align 8
  %481 = add i64 %480, -16
  %482 = inttoptr i64 %481 to i64*
  %483 = load i64, i64* %482
  %484 = add i64 %483, 624
  %485 = inttoptr i64 %484 to i32*
  %486 = load i32, i32* %485
  %487 = zext i32 %486 to i64
  %488 = mul nuw nsw i64 %487, 24
  %489 = add i64 %488, %479
  %490 = add i64 %489, 8
  %491 = inttoptr i64 %490 to i64*
  store i64 %474, i64* %491
  %492 = inttoptr i64 %481 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %493, 624
  %495 = inttoptr i64 %494 to i32*
  %496 = load i32, i32* %495
  %497 = add i32 %496, 1
  %498 = inttoptr i64 %494 to i32*
  store i32 %497, i32* %498
  %499 = load i64, i64* %12, align 8
  %500 = add i64 %499, -16
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %502, 616
  %504 = inttoptr i64 %503 to i64*
  %505 = load i64, i64* %504
  %506 = add i64 %505, 40
  %507 = inttoptr i64 %506 to i32*
  %508 = load i32, i32* %507
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %7, align 8, !tbaa !1240
  %510 = add i64 %502, 548
  %511 = inttoptr i64 %510 to i32*
  %512 = load i32, i32* %511
  %513 = shl i32 %512, 2
  %514 = add i64 %502, 540
  %515 = inttoptr i64 %514 to i32*
  %516 = load i32, i32* %515
  %517 = shl i32 %516, 3
  %518 = zext i32 %517 to i64
  store i64 %518, i64* %13, align 8, !tbaa !1240
  %519 = add i32 %517, %513
  %520 = load i64, i64* %7, align 8
  %521 = shl i64 %520, 32
  %522 = ashr exact i64 %521, 32
  %523 = sext i32 %519 to i64
  %524 = mul nsw i64 %523, %522
  %525 = and i64 %524, 4294967292
  %526 = load i64, i64* %12, align 8
  %527 = add i64 %526, -264
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %529, %525
  %531 = inttoptr i64 %527 to i64*
  store i64 %530, i64* %531
  %532 = add i64 %526, -16
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  %535 = add i64 %534, 588
  %536 = inttoptr i64 %535 to i32*
  %537 = load i32, i32* %536
  %538 = zext i32 %537 to i64
  store i64 %538, i64* %10, align 8, !tbaa !1240
  %539 = add i64 %534, 4248
  %540 = inttoptr i64 %539 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %9, align 8, !tbaa !1240
  %542 = add i64 %534, 616
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  store i64 %546, i64* %8, align 8, !tbaa !1240
  %547 = add i64 %534, 4224
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %7, align 8, !tbaa !1240
  %550 = add i64 %121, 26357
  %551 = add i64 %121, 223
  %552 = load i64, i64* %11, align 8, !tbaa !1240
  %553 = add i64 %552, -8
  %554 = inttoptr i64 %553 to i64*
  store i64 %551, i64* %554
  store i64 %553, i64* %11, align 8, !tbaa !1240
  %555 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %550, %struct.Memory* %1440)
  %556 = load i64, i64* %12, align 8
  %557 = add i64 %556, -20
  %558 = load i32, i32* %5, align 4
  %559 = load i64, i64* %3, align 8
  %560 = inttoptr i64 %557 to i32*
  store i32 %558, i32* %560
  %561 = inttoptr i64 %557 to i32*
  %562 = load i32, i32* %561
  %563 = icmp eq i32 %562, 0
  %564 = select i1 %563, i64 55, i64 13
  %565 = add i64 %559, %564
  br i1 %563, label %block_404fa1, label %block_404f77

block_4050e8:                                     ; preds = %block_405092
  %566 = inttoptr i64 %1530 to i64*
  %567 = load i64, i64* %566
  store i64 %567, i64* %10, align 8, !tbaa !1240
  %568 = add i64 %1538, 12
  %569 = load i64, i64* %11, align 8, !tbaa !1240
  %570 = add i64 %569, -8
  %571 = inttoptr i64 %570 to i64*
  store i64 %568, i64* %571
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %3, align 8, !alias.scope !2648, !noalias !2651
  store i64 %569, i64* %11, align 8, !alias.scope !2648, !noalias !2651
  %574 = tail call i64 @free(i64 %567), !noalias !2648
  %575 = load i64, i64* %12, align 8
  br label %block_4050f4

block_4047bf:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, %block_4047ae, %block_404730
  %576 = phi i64 [ %1039, %block_404730 ], [ %1711, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %1045, %block_4047ae ]
  %577 = phi i64 [ 105, %block_404730 ], [ 5, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ 5, %block_4047ae ]
  %578 = phi %struct.Memory* [ %2, %block_404730 ], [ %2, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %2, %block_4047ae ]
  %579 = add i64 %576, %577
  %580 = add i64 %52, -16
  %581 = inttoptr i64 %580 to i64*
  %582 = load i64, i64* %581
  %583 = add i64 %582, 556
  %584 = inttoptr i64 %583 to i32*
  store i32 0, i32* %584
  %585 = add i64 %52, -308
  %586 = add i64 %579, 24
  %587 = inttoptr i64 %585 to i32*
  store i32 1, i32* %587
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_4047d7

block_404a3d:                                     ; preds = %block_4049fc
  %591 = inttoptr i64 %1066 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %592, 616
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %595, 40
  %597 = inttoptr i64 %596 to i32*
  %598 = load i32, i32* %597
  %599 = add i64 %592, 632
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = add i64 %592, 624
  %603 = inttoptr i64 %602 to i32*
  %604 = load i32, i32* %603
  %605 = zext i32 %604 to i64
  %606 = mul nuw nsw i64 %605, 24
  %607 = add i64 %606, %601
  %608 = inttoptr i64 %607 to i32*
  store i32 %598, i32* %608
  %609 = add i64 %1065, -264
  %610 = inttoptr i64 %609 to i64*
  %611 = load i64, i64* %610
  %612 = inttoptr i64 %1066 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %613, 632
  %615 = inttoptr i64 %614 to i64*
  %616 = load i64, i64* %615
  %617 = load i64, i64* %12, align 8
  %618 = add i64 %617, -16
  %619 = inttoptr i64 %618 to i64*
  %620 = load i64, i64* %619
  %621 = add i64 %620, 624
  %622 = inttoptr i64 %621 to i32*
  %623 = load i32, i32* %622
  %624 = zext i32 %623 to i64
  %625 = mul nuw nsw i64 %624, 24
  %626 = add i64 %625, %616
  store i64 %626, i64* %8, align 8, !tbaa !1240
  %627 = add i64 %626, 8
  %628 = inttoptr i64 %627 to i64*
  store i64 %611, i64* %628
  %629 = inttoptr i64 %618 to i64*
  %630 = load i64, i64* %629
  %631 = add i64 %630, 624
  %632 = inttoptr i64 %631 to i32*
  %633 = load i32, i32* %632
  %634 = add i32 %633, 1
  %635 = zext i32 %634 to i64
  store i64 %635, i64* %7, align 8, !tbaa !1240
  %636 = inttoptr i64 %631 to i32*
  store i32 %634, i32* %636
  %637 = load i64, i64* %12, align 8
  %638 = add i64 %637, -16
  %639 = inttoptr i64 %638 to i64*
  %640 = load i64, i64* %639
  %641 = add i64 %640, 624
  %642 = inttoptr i64 %641 to i32*
  %643 = load i32, i32* %642
  %644 = add i32 %643, -1024
  %645 = icmp ult i32 %643, 1024
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %19, align 1, !tbaa !1264
  %647 = and i32 %644, 255
  %648 = tail call i32 @llvm.ctpop.i32(i32 %647) #10
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  store i8 %651, i8* %20, align 1, !tbaa !1278
  %652 = xor i32 %644, %643
  %653 = lshr i32 %652, 4
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  store i8 %655, i8* %21, align 1, !tbaa !1279
  %656 = icmp eq i32 %644, 0
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %22, align 1, !tbaa !1280
  %658 = lshr i32 %644, 31
  %659 = trunc i32 %658 to i8
  store i8 %659, i8* %23, align 1, !tbaa !1281
  %660 = lshr i32 %643, 31
  %661 = xor i32 %658, %660
  %662 = add nuw nsw i32 %661, %660
  %663 = icmp eq i32 %662, 2
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %24, align 1, !tbaa !1282
  %665 = select i1 %645, i64 167, i64 126
  %666 = add i64 %1081, %665
  br i1 %645, label %block_404ae4, label %block_404abb

block_404e65:                                     ; preds = %block_4047d7
  %667 = add i64 %1439, -16
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668
  %670 = add i64 %669, 624
  %671 = inttoptr i64 %670 to i32*
  %672 = load i32, i32* %671
  %673 = icmp eq i32 %672, 0
  %674 = select i1 %673, i64 321, i64 17
  %675 = add i64 %1452, %674
  br i1 %673, label %block_404fa6, label %block_404e76

block_404abb:                                     ; preds = %block_404a3d
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4059), i64* %9, align 8, !tbaa !1240
  %676 = load i64, i64* @stderr
  %677 = add i64 %666, 25
  %678 = load i64, i64* %11, align 8, !tbaa !1240
  %679 = add i64 %678, -8
  %680 = inttoptr i64 %679 to i64*
  store i64 %677, i64* %680
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %683 = load i64, i64* %589, align 8, !alias.scope !2653, !noalias !2656
  %684 = load i64, i64* %681, align 8, !alias.scope !2653, !noalias !2656
  %685 = load i64, i64* %682, align 8, !alias.scope !2653, !noalias !2656
  %686 = inttoptr i64 %678 to i64*
  %687 = load i64, i64* %686
  %688 = add i64 %678, 8
  %689 = inttoptr i64 %688 to i64*
  %690 = load i64, i64* %689
  %691 = add i64 %678, 16
  %692 = inttoptr i64 %691 to i64*
  %693 = load i64, i64* %692
  %694 = add i64 %678, 24
  %695 = inttoptr i64 %694 to i64*
  %696 = load i64, i64* %695
  %697 = add i64 %678, 32
  %698 = inttoptr i64 %697 to i64*
  %699 = load i64, i64* %698
  %700 = add i64 %678, 40
  %701 = inttoptr i64 %700 to i64*
  %702 = load i64, i64* %701
  %703 = add i64 %678, 48
  %704 = inttoptr i64 %703 to i64*
  %705 = load i64, i64* %704
  %706 = add i64 %678, 56
  %707 = inttoptr i64 %706 to i64*
  %708 = load i64, i64* %707
  %709 = add i64 %678, 64
  %710 = inttoptr i64 %709 to i64*
  %711 = load i64, i64* %710
  %712 = add i64 %678, 72
  %713 = inttoptr i64 %712 to i64*
  %714 = load i64, i64* %713
  %715 = inttoptr i64 %679 to i64*
  %716 = load i64, i64* %715
  store i64 %716, i64* %3, align 8, !alias.scope !2653, !noalias !2656
  store i64 %678, i64* %11, align 8, !alias.scope !2653, !noalias !2656
  %717 = tail call i64 @fprintf(i64 %676, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4059), i64 %683, i64 %635, i64 %684, i64 %685, i64 %687, i64 %690, i64 %693, i64 %696, i64 %699, i64 %702, i64 %705, i64 %708, i64 %711, i64 %714), !noalias !2653
  %718 = load i64, i64* %3, align 8
  store i64 1, i64* %10, align 8, !tbaa !1240
  %719 = load i64, i64* %12, align 8
  %720 = add i64 %719, -380
  %721 = trunc i64 %717 to i32
  %722 = inttoptr i64 %720 to i32*
  store i32 %721, i32* %722
  %723 = add i64 %718, 16
  %724 = load i64, i64* %11, align 8, !tbaa !1240
  %725 = add i64 %724, -8
  %726 = inttoptr i64 %725 to i64*
  store i64 %723, i64* %726
  %727 = inttoptr i64 %725 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %3, align 8, !alias.scope !2658, !noalias !2661
  store i64 %724, i64* %11, align 8, !alias.scope !2658, !noalias !2661
  %729 = tail call i64 @exit(i64 1), !noalias !2658
  store i64 %729, i64* %48, align 8, !alias.scope !2658, !noalias !2661
  %730 = load i64, i64* %3, align 8
  %731 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %730, %struct.Memory* %1064)
  ret %struct.Memory* %731

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit73: ; preds = %block_404650
  %732 = add i64 %52, -300
  %733 = inttoptr i64 %732 to i32*
  %734 = load i32, i32* %733
  %735 = add i64 %52, -16
  %736 = inttoptr i64 %735 to i64*
  %737 = load i64, i64* %736
  %738 = add i64 %737, 584
  %739 = inttoptr i64 %738 to i32*
  %740 = load i32, i32* %739
  %741 = udiv i32 %734, %740
  %742 = add i64 %52, -304
  %743 = inttoptr i64 %742 to i32*
  store i32 %741, i32* %743
  %744 = add i64 %52, -16
  %745 = inttoptr i64 %744 to i64*
  %746 = load i64, i64* %745
  %747 = add i64 %746, 4488
  %748 = inttoptr i64 %747 to i32*
  %749 = load i32, i32* %748
  %750 = add i64 %60, 44
  %751 = inttoptr i64 %742 to i32*
  %752 = load i32, i32* %751
  %753 = udiv i32 %749, %752
  %754 = add i64 %52, -320
  %755 = inttoptr i64 %754 to i32*
  store i32 %753, i32* %755
  %756 = inttoptr i64 %754 to i32*
  %757 = load i32, i32* %756
  %758 = icmp eq i32 %757, 0
  %759 = select i1 %758, i64 19, i64 62
  %760 = add i64 %750, %759
  br i1 %758, label %block_404730, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit39

block_404838:                                     ; preds = %block_404815
  %761 = add i64 %1426, -312
  %762 = inttoptr i64 %761 to i32*
  %763 = load i32, i32* %762
  %764 = add i64 %1426, -324
  %765 = add i64 %1437, 12
  %766 = inttoptr i64 %764 to i32*
  store i32 %763, i32* %766
  br label %block_404844

block_4048b5:                                     ; preds = %block_4048a6
  %767 = add i64 %1142, -256
  %768 = add i64 %1142, -144
  %769 = add i64 %1142, -296
  %770 = inttoptr i64 %769 to i64*
  %771 = load i64, i64* %770
  %772 = add i64 %1142, -328
  %773 = inttoptr i64 %772 to i32*
  %774 = load i32, i32* %773
  %775 = zext i32 %774 to i64
  %776 = add i64 %771, %775
  %777 = add i64 %1142, -16
  %778 = inttoptr i64 %777 to i64*
  %779 = load i64, i64* %778
  %780 = add i64 %779, 584
  %781 = inttoptr i64 %780 to i32*
  %782 = load i32, i32* %781
  %783 = zext i32 %782 to i64
  %784 = add i64 %1142, -360
  %785 = inttoptr i64 %784 to i64*
  store i64 %767, i64* %785
  %786 = add i64 %1142, -368
  %787 = inttoptr i64 %786 to i64*
  store i64 %768, i64* %787
  %788 = add i64 %1155, 75
  %789 = load i64, i64* %11, align 8, !tbaa !1240
  %790 = add i64 %789, -8
  %791 = inttoptr i64 %790 to i64*
  store i64 %788, i64* %791
  %792 = inttoptr i64 %790 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %3, align 8, !alias.scope !2663, !noalias !2666
  store i64 %789, i64* %11, align 8, !alias.scope !2663, !noalias !2666
  %794 = tail call i64 @memcpy(i64 %768, i64 %776, i64 %783), !noalias !2663
  %795 = load i64, i64* %12, align 8
  %796 = add i64 %795, -16
  %797 = load i64, i64* %3, align 8
  %798 = inttoptr i64 %796 to i64*
  %799 = load i64, i64* %798
  %800 = add i64 %799, 584
  %801 = inttoptr i64 %800 to i32*
  %802 = load i32, i32* %801
  %803 = add i64 %795, -328
  %804 = inttoptr i64 %803 to i32*
  %805 = load i32, i32* %804
  %806 = add i32 %805, %802
  %807 = inttoptr i64 %803 to i32*
  store i32 %806, i32* %807
  %808 = inttoptr i64 %796 to i64*
  %809 = load i64, i64* %808
  %810 = add i64 %809, 4312
  %811 = add i64 %809, 544
  %812 = inttoptr i64 %811 to i32*
  %813 = load i32, i32* %812
  %814 = zext i32 %813 to i64
  store i64 %814, i64* %7, align 8, !tbaa !1240
  %815 = load i64, i64* %12, align 8
  %816 = add i64 %815, -16
  %817 = inttoptr i64 %816 to i64*
  %818 = load i64, i64* %817
  %819 = add i64 %818, 540
  %820 = inttoptr i64 %819 to i32*
  %821 = load i32, i32* %820
  %822 = zext i32 %821 to i64
  store i64 %822, i64* %13, align 8, !tbaa !1240
  %823 = add i64 %818, 548
  %824 = inttoptr i64 %823 to i32*
  %825 = load i32, i32* %824
  %826 = zext i32 %825 to i64
  store i64 %826, i64* %590, align 8, !tbaa !1240
  %827 = add i64 %815, -368
  %828 = inttoptr i64 %827 to i64*
  %829 = load i64, i64* %828
  store i64 %829, i64* %10, align 8, !tbaa !1240
  store i64 %810, i64* %9, align 8, !tbaa !1240
  %830 = add i64 %815, -360
  %831 = inttoptr i64 %830 to i64*
  %832 = load i64, i64* %831
  store i64 %832, i64* %8, align 8, !tbaa !1240
  %833 = add i64 %797, -864
  %834 = add i64 %797, 89
  %835 = load i64, i64* %11, align 8, !tbaa !1240
  %836 = add i64 %835, -8
  %837 = inttoptr i64 %836 to i64*
  store i64 %834, i64* %837
  store i64 %836, i64* %11, align 8, !tbaa !1240
  %838 = tail call %struct.Memory* @sub_4045a0_SelectToView(%struct.State* nonnull %0, i64 %833, %struct.Memory* %1143)
  %839 = load i64, i64* %12, align 8
  %840 = add i64 %839, -16
  %841 = load i64, i64* %3, align 8
  %842 = inttoptr i64 %840 to i64*
  %843 = load i64, i64* %842
  %844 = add i64 %843, 540
  %845 = inttoptr i64 %844 to i32*
  %846 = load i32, i32* %845
  %847 = shl i32 %846, 1
  %848 = zext i32 %847 to i64
  %849 = shl nuw nsw i64 %848, 2
  %850 = add nsw i64 %849, -256
  %851 = add i64 %850, %839
  %852 = inttoptr i64 %851 to i32*
  %853 = load i32, i32* %852
  %854 = add i64 %839, -284
  %855 = inttoptr i64 %854 to i32*
  store i32 %853, i32* %855
  %856 = add i64 %839, -308
  %857 = inttoptr i64 %856 to i32*
  %858 = load i32, i32* %857
  %859 = add i32 %858, -1
  %860 = icmp eq i32 %859, 0
  %861 = select i1 %860, i64 43, i64 145
  %862 = add i64 %841, %861
  br i1 %860, label %block_404984, label %block_4049ea

block_404cb4:                                     ; preds = %block_404bc8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64* %9, align 8, !tbaa !1240
  %863 = load i64, i64* @stderr
  store i64 %863, i64* %10, align 8, !tbaa !1240
  %864 = add i64 %1026, 25
  %865 = load i64, i64* %11, align 8, !tbaa !1240
  %866 = add i64 %865, -8
  %867 = inttoptr i64 %866 to i64*
  store i64 %864, i64* %867
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %870 = load i64, i64* %589, align 8, !alias.scope !2668, !noalias !2671
  %871 = load i64, i64* %588, align 8, !alias.scope !2668, !noalias !2671
  %872 = load i64, i64* %868, align 8, !alias.scope !2668, !noalias !2671
  %873 = load i64, i64* %869, align 8, !alias.scope !2668, !noalias !2671
  %874 = inttoptr i64 %865 to i64*
  %875 = load i64, i64* %874
  %876 = add i64 %865, 8
  %877 = inttoptr i64 %876 to i64*
  %878 = load i64, i64* %877
  %879 = add i64 %865, 16
  %880 = inttoptr i64 %879 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %865, 24
  %883 = inttoptr i64 %882 to i64*
  %884 = load i64, i64* %883
  %885 = add i64 %865, 32
  %886 = inttoptr i64 %885 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %865, 40
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = add i64 %865, 48
  %892 = inttoptr i64 %891 to i64*
  %893 = load i64, i64* %892
  %894 = add i64 %865, 56
  %895 = inttoptr i64 %894 to i64*
  %896 = load i64, i64* %895
  %897 = add i64 %865, 64
  %898 = inttoptr i64 %897 to i64*
  %899 = load i64, i64* %898
  %900 = add i64 %865, 72
  %901 = inttoptr i64 %900 to i64*
  %902 = load i64, i64* %901
  %903 = inttoptr i64 %866 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %3, align 8, !alias.scope !2668, !noalias !2671
  store i64 %865, i64* %11, align 8, !alias.scope !2668, !noalias !2671
  %905 = tail call i64 @fprintf(i64 %863, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64 %870, i64 %871, i64 %872, i64 %873, i64 %875, i64 %878, i64 %881, i64 %884, i64 %887, i64 %890, i64 %893, i64 %896, i64 %899, i64 %902), !noalias !2668
  %906 = load i64, i64* %12, align 8
  %907 = add i64 %906, -20
  %908 = inttoptr i64 %907 to i32*
  %909 = load i32, i32* %908
  %910 = zext i32 %909 to i64
  store i64 %910, i64* %7, align 8, !tbaa !1240
  %911 = add i64 %906, -4
  %912 = inttoptr i64 %911 to i32*
  store i32 %909, i32* %912
  %913 = add i64 %906, -388
  %914 = trunc i64 %905 to i32
  %915 = inttoptr i64 %913 to i32*
  store i32 %914, i32* %915
  br label %block_4050fb

block_404dcb:                                     ; preds = %block_404d8b
  %916 = add i64 %1685, 5
  br label %block_404dd0

block_404bb3:                                     ; preds = %block_404ba2
  %917 = add i64 %1157, 616
  %918 = inttoptr i64 %917 to i64*
  %919 = load i64, i64* %918
  %920 = add i64 %919, 40
  %921 = inttoptr i64 %920 to i32*
  %922 = load i32, i32* %921
  %923 = icmp eq i32 %922, 0
  %924 = select i1 %923, i64 304, i64 21
  %925 = add i64 %1163, %924
  br i1 %923, label %block_404ce3, label %block_404bc8

block_404bc8:                                     ; preds = %block_404bb3
  %926 = add i64 %1157, 632
  %927 = inttoptr i64 %926 to i64*
  %928 = load i64, i64* %927
  %929 = zext i32 %1160 to i64
  %930 = mul nuw nsw i64 %929, 24
  %931 = add i64 %930, %928
  %932 = inttoptr i64 %931 to i32*
  store i32 %922, i32* %932
  %933 = add i64 %839, -264
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = inttoptr i64 %840 to i64*
  %937 = load i64, i64* %936
  %938 = add i64 %937, 632
  %939 = inttoptr i64 %938 to i64*
  %940 = load i64, i64* %939
  %941 = load i64, i64* %12, align 8
  %942 = add i64 %941, -16
  %943 = inttoptr i64 %942 to i64*
  %944 = load i64, i64* %943
  %945 = add i64 %944, 624
  %946 = inttoptr i64 %945 to i32*
  %947 = load i32, i32* %946
  %948 = zext i32 %947 to i64
  %949 = mul nuw nsw i64 %948, 24
  %950 = add i64 %949, %940
  %951 = add i64 %950, 8
  %952 = inttoptr i64 %951 to i64*
  store i64 %935, i64* %952
  %953 = inttoptr i64 %942 to i64*
  %954 = load i64, i64* %953
  %955 = add i64 %954, 624
  %956 = inttoptr i64 %955 to i32*
  %957 = load i32, i32* %956
  %958 = add i32 %957, 1
  %959 = inttoptr i64 %955 to i32*
  store i32 %958, i32* %959
  %960 = load i64, i64* %12, align 8
  %961 = add i64 %960, -16
  %962 = inttoptr i64 %961 to i64*
  %963 = load i64, i64* %962
  %964 = add i64 %963, 616
  %965 = inttoptr i64 %964 to i64*
  %966 = load i64, i64* %965
  %967 = add i64 %966, 40
  %968 = inttoptr i64 %967 to i32*
  %969 = load i32, i32* %968
  %970 = zext i32 %969 to i64
  store i64 %970, i64* %7, align 8, !tbaa !1240
  %971 = add i64 %963, 548
  %972 = inttoptr i64 %971 to i32*
  %973 = load i32, i32* %972
  %974 = shl i32 %973, 2
  %975 = add i64 %963, 540
  %976 = inttoptr i64 %975 to i32*
  %977 = load i32, i32* %976
  %978 = shl i32 %977, 3
  %979 = zext i32 %978 to i64
  store i64 %979, i64* %13, align 8, !tbaa !1240
  %980 = add i32 %978, %974
  %981 = load i64, i64* %7, align 8
  %982 = shl i64 %981, 32
  %983 = ashr exact i64 %982, 32
  %984 = sext i32 %980 to i64
  %985 = mul nsw i64 %984, %983
  %986 = and i64 %985, 4294967292
  %987 = load i64, i64* %12, align 8
  %988 = add i64 %987, -264
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %990, %986
  %992 = inttoptr i64 %988 to i64*
  store i64 %991, i64* %992
  %993 = add i64 %987, -16
  %994 = inttoptr i64 %993 to i64*
  %995 = load i64, i64* %994
  %996 = add i64 %995, 588
  %997 = inttoptr i64 %996 to i32*
  %998 = load i32, i32* %997
  %999 = zext i32 %998 to i64
  store i64 %999, i64* %10, align 8, !tbaa !1240
  %1000 = add i64 %995, 4248
  %1001 = inttoptr i64 %1000 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %9, align 8, !tbaa !1240
  %1003 = add i64 %995, 616
  %1004 = inttoptr i64 %1003 to i64*
  %1005 = load i64, i64* %1004
  %1006 = inttoptr i64 %1005 to i64*
  %1007 = load i64, i64* %1006
  store i64 %1007, i64* %8, align 8, !tbaa !1240
  %1008 = add i64 %995, 4224
  %1009 = inttoptr i64 %1008 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %7, align 8, !tbaa !1240
  %1011 = add i64 %925, 27064
  %1012 = add i64 %925, 223
  %1013 = load i64, i64* %11, align 8, !tbaa !1240
  %1014 = add i64 %1013, -8
  %1015 = inttoptr i64 %1014 to i64*
  store i64 %1012, i64* %1015
  store i64 %1014, i64* %11, align 8, !tbaa !1240
  %1016 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull %0, i64 %1011, %struct.Memory* %838)
  %1017 = load i64, i64* %12, align 8
  %1018 = add i64 %1017, -20
  %1019 = load i32, i32* %5, align 4
  %1020 = load i64, i64* %3, align 8
  %1021 = inttoptr i64 %1018 to i32*
  store i32 %1019, i32* %1021
  %1022 = inttoptr i64 %1018 to i32*
  %1023 = load i32, i32* %1022
  %1024 = icmp eq i32 %1023, 0
  %1025 = select i1 %1024, i64 55, i64 13
  %1026 = add i64 %1020, %1025
  br i1 %1024, label %block_404cde, label %block_404cb4

block_404730:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit73
  %1027 = add i64 %52, -16
  %1028 = inttoptr i64 %1027 to i64*
  %1029 = load i64, i64* %1028
  %1030 = add i64 %1029, 4488
  %1031 = inttoptr i64 %1030 to i32*
  %1032 = load i32, i32* %1031
  %1033 = add i64 %52, -312
  %1034 = inttoptr i64 %1033 to i32*
  store i32 %1032, i32* %1034
  %1035 = inttoptr i64 %1033 to i32*
  %1036 = load i32, i32* %1035
  %1037 = add i64 %52, -316
  %1038 = inttoptr i64 %1037 to i32*
  store i32 %1036, i32* %1038
  %1039 = add i64 %760, 38
  %1040 = inttoptr i64 %754 to i32*
  store i32 1, i32* %1040
  br label %block_4047bf

block_4047ae:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit39
  %1041 = add i64 %52, -312
  %1042 = inttoptr i64 %1041 to i32*
  %1043 = load i32, i32* %1042
  %1044 = add i64 %52, -316
  %1045 = add i64 %363, 12
  %1046 = inttoptr i64 %1044 to i32*
  store i32 %1043, i32* %1046
  br label %block_4047bf

block_404cde:                                     ; preds = %block_404bc8
  %1047 = add i64 %1026, 5
  br label %block_404ce3

block_4049fc:                                     ; preds = %block_4049ea
  %1048 = add i64 %839, -256
  store i64 %1048, i64* %9, align 8, !tbaa !1240
  %1049 = add i64 %839, -276
  %1050 = inttoptr i64 %1049 to i32*
  %1051 = load i32, i32* %1050
  %1052 = add i32 %1051, 1
  %1053 = inttoptr i64 %1049 to i32*
  store i32 %1052, i32* %1053
  %1054 = inttoptr i64 %840 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1055, 616
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  store i64 %1058, i64* %10, align 8, !tbaa !1240
  %1059 = add i64 %1373, 24516
  %1060 = add i64 %1373, 38
  %1061 = load i64, i64* %11, align 8, !tbaa !1240
  %1062 = add i64 %1061, -8
  %1063 = inttoptr i64 %1062 to i64*
  store i64 %1060, i64* %1063
  store i64 %1062, i64* %11, align 8, !tbaa !1240
  %1064 = tail call %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* nonnull %0, i64 %1059, %struct.Memory* %838)
  %1065 = load i64, i64* %12, align 8
  %1066 = add i64 %1065, -16
  %1067 = load i64, i64* %3, align 8
  %1068 = inttoptr i64 %1066 to i64*
  %1069 = load i64, i64* %1068
  %1070 = add i64 %1069, 616
  %1071 = inttoptr i64 %1070 to i64*
  %1072 = load i64, i64* %1071
  %1073 = add i64 %1072, 60
  %1074 = inttoptr i64 %1073 to i32*
  %1075 = load i32, i32* %1074
  %1076 = icmp eq i32 %1075, 0
  %1077 = add i64 %1065, -376
  %1078 = load i32, i32* %5, align 4
  %1079 = inttoptr i64 %1077 to i32*
  store i32 %1078, i32* %1079
  %1080 = select i1 %1076, i64 379, i64 27
  %1081 = add i64 %1067, %1080
  br i1 %1076, label %block_404b9d, label %block_404a3d

block_404827:                                     ; preds = %block_404815
  %1082 = add i64 %1426, -316
  %1083 = inttoptr i64 %1082 to i32*
  %1084 = load i32, i32* %1083
  %1085 = add i64 %1426, -324
  %1086 = inttoptr i64 %1085 to i32*
  store i32 %1084, i32* %1086
  %1087 = add i64 %1437, 29
  br label %block_404844

block_404d5c:                                     ; preds = %block_404d13
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64* %9, align 8, !tbaa !1240
  %1088 = load i64, i64* @stderr
  store i64 %1088, i64* %10, align 8, !tbaa !1240
  %1089 = add i64 %1490, 25
  %1090 = load i64, i64* %11, align 8, !tbaa !1240
  %1091 = add i64 %1090, -8
  %1092 = inttoptr i64 %1091 to i64*
  store i64 %1089, i64* %1092
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1095 = load i64, i64* %589, align 8, !alias.scope !2673, !noalias !2676
  %1096 = load i64, i64* %588, align 8, !alias.scope !2673, !noalias !2676
  %1097 = load i64, i64* %1093, align 8, !alias.scope !2673, !noalias !2676
  %1098 = load i64, i64* %1094, align 8, !alias.scope !2673, !noalias !2676
  %1099 = inttoptr i64 %1090 to i64*
  %1100 = load i64, i64* %1099
  %1101 = add i64 %1090, 8
  %1102 = inttoptr i64 %1101 to i64*
  %1103 = load i64, i64* %1102
  %1104 = add i64 %1090, 16
  %1105 = inttoptr i64 %1104 to i64*
  %1106 = load i64, i64* %1105
  %1107 = add i64 %1090, 24
  %1108 = inttoptr i64 %1107 to i64*
  %1109 = load i64, i64* %1108
  %1110 = add i64 %1090, 32
  %1111 = inttoptr i64 %1110 to i64*
  %1112 = load i64, i64* %1111
  %1113 = add i64 %1090, 40
  %1114 = inttoptr i64 %1113 to i64*
  %1115 = load i64, i64* %1114
  %1116 = add i64 %1090, 48
  %1117 = inttoptr i64 %1116 to i64*
  %1118 = load i64, i64* %1117
  %1119 = add i64 %1090, 56
  %1120 = inttoptr i64 %1119 to i64*
  %1121 = load i64, i64* %1120
  %1122 = add i64 %1090, 64
  %1123 = inttoptr i64 %1122 to i64*
  %1124 = load i64, i64* %1123
  %1125 = add i64 %1090, 72
  %1126 = inttoptr i64 %1125 to i64*
  %1127 = load i64, i64* %1126
  %1128 = inttoptr i64 %1091 to i64*
  %1129 = load i64, i64* %1128
  store i64 %1129, i64* %3, align 8, !alias.scope !2673, !noalias !2676
  store i64 %1090, i64* %11, align 8, !alias.scope !2673, !noalias !2676
  %1130 = tail call i64 @fprintf(i64 %1088, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64 %1095, i64 %1096, i64 %1097, i64 %1098, i64 %1100, i64 %1103, i64 %1106, i64 %1109, i64 %1112, i64 %1115, i64 %1118, i64 %1121, i64 %1124, i64 %1127), !noalias !2673
  %1131 = load i64, i64* %12, align 8
  %1132 = add i64 %1131, -20
  %1133 = inttoptr i64 %1132 to i32*
  %1134 = load i32, i32* %1133
  %1135 = zext i32 %1134 to i64
  store i64 %1135, i64* %7, align 8, !tbaa !1240
  %1136 = add i64 %1131, -4
  %1137 = inttoptr i64 %1136 to i32*
  store i32 %1134, i32* %1137
  %1138 = add i64 %1131, -396
  %1139 = trunc i64 %1130 to i32
  %1140 = inttoptr i64 %1138 to i32*
  store i32 %1139, i32* %1140
  br label %block_4050fb

block_4048a6:                                     ; preds = %block_404e32, %block_404844
  %1141 = phi i64 [ %1269, %block_404844 ], [ %1666, %block_404e32 ]
  %1142 = phi i64 [ %1262, %block_404844 ], [ %1651, %block_404e32 ]
  %1143 = phi %struct.Memory* [ %1219, %block_404844 ], [ %1654, %block_404e32 ]
  %1144 = add i64 %1142, -24
  %1145 = inttoptr i64 %1144 to i32*
  %1146 = load i32, i32* %1145
  %1147 = add i64 %1142, -324
  %1148 = inttoptr i64 %1147 to i32*
  %1149 = load i32, i32* %1148
  %1150 = sub i32 %1146, %1149
  %1151 = icmp ult i32 %1146, %1149
  %1152 = icmp eq i32 %1150, 0
  %1153 = or i1 %1152, %1151
  %1154 = select i1 %1153, i64 15, i64 1446
  %1155 = add i64 %1141, %1154
  br i1 %1153, label %block_4048b5, label %block_404e4c

block_404ba2:                                     ; preds = %block_4049ea
  %1156 = inttoptr i64 %840 to i64*
  %1157 = load i64, i64* %1156
  %1158 = add i64 %1157, 624
  %1159 = inttoptr i64 %1158 to i32*
  %1160 = load i32, i32* %1159
  %1161 = icmp eq i32 %1160, 0
  %1162 = select i1 %1161, i64 321, i64 17
  %1163 = add i64 %1373, %1162
  br i1 %1161, label %block_404ce3, label %block_404bb3

block_404da1:                                     ; preds = %block_404d8b
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3835), i64* %9, align 8, !tbaa !1240
  %1164 = load i64, i64* @stderr
  store i64 %1164, i64* %10, align 8, !tbaa !1240
  %1165 = add i64 %1685, 25
  %1166 = load i64, i64* %11, align 8, !tbaa !1240
  %1167 = add i64 %1166, -8
  %1168 = inttoptr i64 %1167 to i64*
  store i64 %1165, i64* %1168
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1171 = load i64, i64* %589, align 8, !alias.scope !2678, !noalias !2681
  %1172 = load i64, i64* %588, align 8, !alias.scope !2678, !noalias !2681
  %1173 = load i64, i64* %1169, align 8, !alias.scope !2678, !noalias !2681
  %1174 = load i64, i64* %1170, align 8, !alias.scope !2678, !noalias !2681
  %1175 = inttoptr i64 %1166 to i64*
  %1176 = load i64, i64* %1175
  %1177 = add i64 %1166, 8
  %1178 = inttoptr i64 %1177 to i64*
  %1179 = load i64, i64* %1178
  %1180 = add i64 %1166, 16
  %1181 = inttoptr i64 %1180 to i64*
  %1182 = load i64, i64* %1181
  %1183 = add i64 %1166, 24
  %1184 = inttoptr i64 %1183 to i64*
  %1185 = load i64, i64* %1184
  %1186 = add i64 %1166, 32
  %1187 = inttoptr i64 %1186 to i64*
  %1188 = load i64, i64* %1187
  %1189 = add i64 %1166, 40
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1166, 48
  %1193 = inttoptr i64 %1192 to i64*
  %1194 = load i64, i64* %1193
  %1195 = add i64 %1166, 56
  %1196 = inttoptr i64 %1195 to i64*
  %1197 = load i64, i64* %1196
  %1198 = add i64 %1166, 64
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = add i64 %1166, 72
  %1202 = inttoptr i64 %1201 to i64*
  %1203 = load i64, i64* %1202
  %1204 = inttoptr i64 %1167 to i64*
  %1205 = load i64, i64* %1204
  store i64 %1205, i64* %3, align 8, !alias.scope !2678, !noalias !2681
  store i64 %1166, i64* %11, align 8, !alias.scope !2678, !noalias !2681
  %1206 = tail call i64 @fprintf(i64 %1164, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3835), i64 %1171, i64 %1172, i64 %1173, i64 %1174, i64 %1176, i64 %1179, i64 %1182, i64 %1185, i64 %1188, i64 %1191, i64 %1194, i64 %1197, i64 %1200, i64 %1203), !noalias !2678
  %1207 = load i64, i64* %12, align 8
  %1208 = add i64 %1207, -20
  %1209 = inttoptr i64 %1208 to i32*
  %1210 = load i32, i32* %1209
  %1211 = zext i32 %1210 to i64
  store i64 %1211, i64* %7, align 8, !tbaa !1240
  %1212 = add i64 %1207, -4
  %1213 = inttoptr i64 %1212 to i32*
  store i32 %1210, i32* %1213
  %1214 = add i64 %1207, -400
  %1215 = trunc i64 %1206 to i32
  %1216 = inttoptr i64 %1214 to i32*
  store i32 %1215, i32* %1216
  br label %block_4050fb

block_404844:                                     ; preds = %block_404827, %block_404838
  %1217 = phi i64 [ %1085, %block_404827 ], [ %764, %block_404838 ]
  %1218 = phi i64 [ %1087, %block_404827 ], [ %765, %block_404838 ]
  %1219 = phi %struct.Memory* [ %1427, %block_404827 ], [ %1427, %block_404838 ]
  %1220 = add i64 %1426, -296
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = inttoptr i64 %1217 to i32*
  %1224 = load i32, i32* %1223
  %1225 = add i64 %1426, -16
  %1226 = inttoptr i64 %1225 to i64*
  %1227 = load i64, i64* %1226
  %1228 = add i64 %1227, 584
  %1229 = inttoptr i64 %1228 to i32*
  %1230 = load i32, i32* %1229
  %1231 = sext i32 %1224 to i64
  %1232 = sext i32 %1230 to i64
  %1233 = mul nsw i64 %1232, %1231
  %1234 = and i64 %1233, 4294967295
  %1235 = add i64 %1227, 4240
  %1236 = inttoptr i64 %1235 to i64*
  %1237 = load i64, i64* %1236
  %1238 = add i64 %1218, 51
  %1239 = load i64, i64* %11, align 8, !tbaa !1240
  %1240 = add i64 %1239, -8
  %1241 = inttoptr i64 %1240 to i64*
  store i64 %1238, i64* %1241
  %1242 = inttoptr i64 %1240 to i64*
  %1243 = load i64, i64* %1242
  store i64 %1243, i64* %3, align 8, !alias.scope !2683, !noalias !2686
  store i64 %1239, i64* %11, align 8, !alias.scope !2683, !noalias !2686
  %1244 = tail call i64 @fread(i64 %1222, i64 %1234, i64 1, i64 %1237)
  %1245 = load i64, i64* %12, align 8
  %1246 = add i64 %1245, -16
  %1247 = load i64, i64* %3, align 8
  %1248 = inttoptr i64 %1246 to i64*
  %1249 = load i64, i64* %1248
  %1250 = add i64 %1249, 4240
  %1251 = inttoptr i64 %1250 to i64*
  %1252 = load i64, i64* %1251
  %1253 = add i64 %1245, -352
  %1254 = inttoptr i64 %1253 to i64*
  store i64 %1244, i64* %1254
  %1255 = add i64 %1247, 23
  %1256 = load i64, i64* %11, align 8, !tbaa !1240
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1255, i64* %1258
  %1259 = inttoptr i64 %1257 to i64*
  %1260 = load i64, i64* %1259
  store i64 %1260, i64* %3, align 8, !alias.scope !2688, !noalias !2691
  store i64 %1256, i64* %11, align 8, !alias.scope !2688, !noalias !2691
  %1261 = tail call i64 @ftell(i64 %1252)
  %1262 = load i64, i64* %12, align 8
  %1263 = add i64 %1262, -272
  %1264 = load i64, i64* %3, align 8
  %1265 = inttoptr i64 %1263 to i64*
  store i64 %1261, i64* %1265
  %1266 = add i64 %1262, -328
  %1267 = inttoptr i64 %1266 to i32*
  store i32 0, i32* %1267
  %1268 = add i64 %1262, -24
  %1269 = add i64 %1264, 24
  %1270 = inttoptr i64 %1268 to i32*
  store i32 1, i32* %1270
  br label %block_4048a6

block_40501e:                                     ; preds = %block_404fd6
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64* %9, align 8, !tbaa !1240
  %1271 = load i64, i64* @stderr
  store i64 %1271, i64* %10, align 8, !tbaa !1240
  %1272 = add i64 %1574, 25
  %1273 = load i64, i64* %11, align 8, !tbaa !1240
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1272, i64* %1275
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1278 = load i64, i64* %589, align 8, !alias.scope !2693, !noalias !2696
  %1279 = load i64, i64* %588, align 8, !alias.scope !2693, !noalias !2696
  %1280 = load i64, i64* %1276, align 8, !alias.scope !2693, !noalias !2696
  %1281 = load i64, i64* %1277, align 8, !alias.scope !2693, !noalias !2696
  %1282 = inttoptr i64 %1273 to i64*
  %1283 = load i64, i64* %1282
  %1284 = add i64 %1273, 8
  %1285 = inttoptr i64 %1284 to i64*
  %1286 = load i64, i64* %1285
  %1287 = add i64 %1273, 16
  %1288 = inttoptr i64 %1287 to i64*
  %1289 = load i64, i64* %1288
  %1290 = add i64 %1273, 24
  %1291 = inttoptr i64 %1290 to i64*
  %1292 = load i64, i64* %1291
  %1293 = add i64 %1273, 32
  %1294 = inttoptr i64 %1293 to i64*
  %1295 = load i64, i64* %1294
  %1296 = add i64 %1273, 40
  %1297 = inttoptr i64 %1296 to i64*
  %1298 = load i64, i64* %1297
  %1299 = add i64 %1273, 48
  %1300 = inttoptr i64 %1299 to i64*
  %1301 = load i64, i64* %1300
  %1302 = add i64 %1273, 56
  %1303 = inttoptr i64 %1302 to i64*
  %1304 = load i64, i64* %1303
  %1305 = add i64 %1273, 64
  %1306 = inttoptr i64 %1305 to i64*
  %1307 = load i64, i64* %1306
  %1308 = add i64 %1273, 72
  %1309 = inttoptr i64 %1308 to i64*
  %1310 = load i64, i64* %1309
  %1311 = inttoptr i64 %1274 to i64*
  %1312 = load i64, i64* %1311
  store i64 %1312, i64* %3, align 8, !alias.scope !2693, !noalias !2696
  store i64 %1273, i64* %11, align 8, !alias.scope !2693, !noalias !2696
  %1313 = tail call i64 @fprintf(i64 %1271, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3792), i64 %1278, i64 %1279, i64 %1280, i64 %1281, i64 %1283, i64 %1286, i64 %1289, i64 %1292, i64 %1295, i64 %1298, i64 %1301, i64 %1304, i64 %1307, i64 %1310), !noalias !2693
  %1314 = load i64, i64* %12, align 8
  %1315 = add i64 %1314, -20
  %1316 = inttoptr i64 %1315 to i32*
  %1317 = load i32, i32* %1316
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %7, align 8, !tbaa !1240
  %1319 = add i64 %1314, -4
  %1320 = inttoptr i64 %1319 to i32*
  store i32 %1317, i32* %1320
  %1321 = add i64 %1314, -416
  %1322 = trunc i64 %1313 to i32
  %1323 = inttoptr i64 %1321 to i32*
  store i32 %1322, i32* %1323
  br label %block_4050fb

block_404b9d:                                     ; preds = %block_4049fc, %block_404b79
  %1324 = phi i64 [ %1065, %block_4049fc ], [ %82, %block_404b79 ]
  %1325 = phi i64 [ %1081, %block_4049fc ], [ %81, %block_404b79 ]
  %1326 = phi %struct.Memory* [ %1064, %block_4049fc ], [ %80, %block_404b79 ]
  %1327 = add i64 %1325, 656
  br label %block_404e32

block_4050fb:                                     ; preds = %block_4046c6, %block_40501e, %block_404da1, %block_404d5c, %block_404cb4, %block_404b4f, %block_4050f4, %block_405063, %block_404f77
  %1328 = phi i64 [ %289, %block_4050f4 ], [ %279, %block_405063 ], [ %1314, %block_40501e ], [ %165, %block_404f77 ], [ %1207, %block_404da1 ], [ %1131, %block_404d5c ], [ %906, %block_404cb4 ], [ %431, %block_404b4f ], [ %1419, %block_4046c6 ]
  %1329 = phi %struct.Memory* [ %290, %block_4050f4 ], [ %371, %block_405063 ], [ %1566, %block_40501e ], [ %555, %block_404f77 ], [ %1675, %block_404da1 ], [ %1480, %block_404d5c ], [ %1016, %block_404cb4 ], [ %225, %block_404b4f ], [ %2, %block_4046c6 ]
  %1330 = add i64 %1328, -4
  %1331 = inttoptr i64 %1330 to i32*
  %1332 = load i32, i32* %1331
  %1333 = zext i32 %1332 to i64
  store i64 %1333, i64* %6, align 8, !tbaa !1240
  %1334 = load i64, i64* %11, align 8
  %1335 = add i64 %1334, 432
  %1336 = icmp ugt i64 %1334, -433
  %1337 = zext i1 %1336 to i8
  store i8 %1337, i8* %19, align 1, !tbaa !1264
  %1338 = trunc i64 %1335 to i32
  %1339 = and i32 %1338, 255
  %1340 = tail call i32 @llvm.ctpop.i32(i32 %1339) #10
  %1341 = trunc i32 %1340 to i8
  %1342 = and i8 %1341, 1
  %1343 = xor i8 %1342, 1
  store i8 %1343, i8* %20, align 1, !tbaa !1278
  %1344 = xor i64 %1334, 16
  %1345 = xor i64 %1344, %1335
  %1346 = lshr i64 %1345, 4
  %1347 = trunc i64 %1346 to i8
  %1348 = and i8 %1347, 1
  store i8 %1348, i8* %21, align 1, !tbaa !1279
  %1349 = icmp eq i64 %1335, 0
  %1350 = zext i1 %1349 to i8
  store i8 %1350, i8* %22, align 1, !tbaa !1280
  %1351 = lshr i64 %1335, 63
  %1352 = trunc i64 %1351 to i8
  store i8 %1352, i8* %23, align 1, !tbaa !1281
  %1353 = lshr i64 %1334, 63
  %1354 = xor i64 %1351, %1353
  %1355 = add nuw nsw i64 %1354, %1351
  %1356 = icmp eq i64 %1355, 2
  %1357 = zext i1 %1356 to i8
  store i8 %1357, i8* %24, align 1, !tbaa !1282
  %1358 = add i64 %1334, 440
  %1359 = inttoptr i64 %1335 to i64*
  %1360 = load i64, i64* %1359
  store i64 %1360, i64* %12, align 8, !tbaa !1240
  %1361 = inttoptr i64 %1358 to i64*
  %1362 = load i64, i64* %1361
  store i64 %1362, i64* %3, align 8, !tbaa !1240
  %1363 = add i64 %1334, 448
  store i64 %1363, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %1329

block_4049ea:                                     ; preds = %block_404984, %block_4048b5
  %1364 = phi i64 [ %1693, %block_404984 ], [ %862, %block_4048b5 ]
  %1365 = inttoptr i64 %854 to i32*
  %1366 = load i32, i32* %1365
  %1367 = add i64 %839, -280
  %1368 = inttoptr i64 %1367 to i32*
  %1369 = load i32, i32* %1368
  %1370 = sub i32 %1366, %1369
  %1371 = icmp eq i32 %1370, 0
  %1372 = select i1 %1371, i64 18, i64 440
  %1373 = add i64 %1364, %1372
  br i1 %1371, label %block_4049fc, label %block_404ba2

block_4046c6:                                     ; preds = %block_404650
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3745), i64* %9, align 8, !tbaa !1240
  %1374 = load i64, i64* @stderr
  store i64 %1374, i64* %10, align 8, !tbaa !1240
  %1375 = add i64 %60, 25
  %1376 = load i64, i64* %11, align 8, !tbaa !1240
  %1377 = add i64 %1376, -8
  %1378 = inttoptr i64 %1377 to i64*
  store i64 %1375, i64* %1378
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1383 = load i64, i64* %1380, align 8, !alias.scope !2698, !noalias !2701
  %1384 = load i64, i64* %1379, align 8, !alias.scope !2698, !noalias !2701
  %1385 = load i64, i64* %1381, align 8, !alias.scope !2698, !noalias !2701
  %1386 = load i64, i64* %1382, align 8, !alias.scope !2698, !noalias !2701
  %1387 = inttoptr i64 %1376 to i64*
  %1388 = load i64, i64* %1387
  %1389 = add i64 %1376, 8
  %1390 = inttoptr i64 %1389 to i64*
  %1391 = load i64, i64* %1390
  %1392 = add i64 %1376, 16
  %1393 = inttoptr i64 %1392 to i64*
  %1394 = load i64, i64* %1393
  %1395 = add i64 %1376, 24
  %1396 = inttoptr i64 %1395 to i64*
  %1397 = load i64, i64* %1396
  %1398 = add i64 %1376, 32
  %1399 = inttoptr i64 %1398 to i64*
  %1400 = load i64, i64* %1399
  %1401 = add i64 %1376, 40
  %1402 = inttoptr i64 %1401 to i64*
  %1403 = load i64, i64* %1402
  %1404 = add i64 %1376, 48
  %1405 = inttoptr i64 %1404 to i64*
  %1406 = load i64, i64* %1405
  %1407 = add i64 %1376, 56
  %1408 = inttoptr i64 %1407 to i64*
  %1409 = load i64, i64* %1408
  %1410 = add i64 %1376, 64
  %1411 = inttoptr i64 %1410 to i64*
  %1412 = load i64, i64* %1411
  %1413 = add i64 %1376, 72
  %1414 = inttoptr i64 %1413 to i64*
  %1415 = load i64, i64* %1414
  %1416 = inttoptr i64 %1377 to i64*
  %1417 = load i64, i64* %1416
  store i64 %1417, i64* %3, align 8, !alias.scope !2698, !noalias !2701
  store i64 %1376, i64* %11, align 8, !alias.scope !2698, !noalias !2701
  %1418 = tail call i64 @fprintf(i64 %1374, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3745), i64 %1383, i64 %1384, i64 %1385, i64 %1386, i64 %1388, i64 %1391, i64 %1394, i64 %1397, i64 %1400, i64 %1403, i64 %1406, i64 %1409, i64 %1412, i64 %1415), !noalias !2698
  %1419 = load i64, i64* %12, align 8
  %1420 = add i64 %1419, -4
  %1421 = inttoptr i64 %1420 to i32*
  store i32 5, i32* %1421
  %1422 = add i64 %1419, -340
  %1423 = trunc i64 %1418 to i32
  %1424 = inttoptr i64 %1422 to i32*
  store i32 %1423, i32* %1424
  br label %block_4050fb

block_404815:                                     ; preds = %block_4047f6, %block_4047e9
  %1425 = phi i64 [ %180, %block_4047e9 ], [ %463, %block_4047f6 ]
  %1426 = phi i64 [ %1439, %block_4047e9 ], [ %459, %block_4047f6 ]
  %1427 = phi %struct.Memory* [ %1440, %block_4047e9 ], [ %1440, %block_4047f6 ]
  %1428 = add i64 %1426, -308
  %1429 = inttoptr i64 %1428 to i32*
  %1430 = load i32, i32* %1429
  %1431 = add i64 %1426, -320
  %1432 = inttoptr i64 %1431 to i32*
  %1433 = load i32, i32* %1432
  %1434 = sub i32 %1430, %1433
  %1435 = icmp eq i32 %1434, 0
  %1436 = select i1 %1435, i64 18, i64 35
  %1437 = add i64 %1425, %1436
  br i1 %1435, label %block_404827, label %block_404838

block_4047d7:                                     ; preds = %block_4047bf, %block_404e4c
  %1438 = phi i64 [ %586, %block_4047bf ], [ %387, %block_404e4c ]
  %1439 = phi i64 [ %52, %block_4047bf ], [ %1142, %block_404e4c ]
  %1440 = phi %struct.Memory* [ %578, %block_4047bf ], [ %1143, %block_404e4c ]
  %1441 = add i64 %1439, -308
  %1442 = inttoptr i64 %1441 to i32*
  %1443 = load i32, i32* %1442
  %1444 = add i64 %1439, -320
  %1445 = inttoptr i64 %1444 to i32*
  %1446 = load i32, i32* %1445
  %1447 = sub i32 %1443, %1446
  %1448 = icmp ult i32 %1443, %1446
  %1449 = icmp eq i32 %1447, 0
  %1450 = or i1 %1449, %1448
  %1451 = select i1 %1450, i64 18, i64 1678
  %1452 = add i64 %1438, %1451
  br i1 %1450, label %block_4047e9, label %block_404e65

block_404d13:                                     ; preds = %block_404ce3
  %1453 = add i64 %1637, -336
  store i64 %1453, i64* %8, align 8, !tbaa !1240
  %1454 = inttoptr i64 %1638 to i64*
  %1455 = load i64, i64* %1454
  %1456 = add i64 %1455, 616
  %1457 = inttoptr i64 %1456 to i64*
  %1458 = load i64, i64* %1457
  %1459 = add i64 %1458, 40
  %1460 = inttoptr i64 %1459 to i32*
  %1461 = load i32, i32* %1460
  %1462 = add i64 %1455, 556
  %1463 = inttoptr i64 %1462 to i32*
  %1464 = load i32, i32* %1463
  %1465 = add i32 %1464, %1461
  %1466 = zext i32 %1465 to i64
  store i64 %1466, i64* %7, align 8, !tbaa !1240
  %1467 = inttoptr i64 %1462 to i32*
  store i32 %1465, i32* %1467
  %1468 = inttoptr i64 %1638 to i64*
  %1469 = load i64, i64* %1468
  store i64 %1469, i64* %10, align 8, !tbaa !1240
  %1470 = add i64 %1469, 616
  %1471 = inttoptr i64 %1470 to i64*
  %1472 = load i64, i64* %1471
  %1473 = inttoptr i64 %1472 to i64*
  %1474 = load i64, i64* %1473
  store i64 %1474, i64* %9, align 8, !tbaa !1240
  %1475 = add i64 %1650, 26045
  %1476 = add i64 %1650, 60
  %1477 = load i64, i64* %11, align 8, !tbaa !1240
  %1478 = add i64 %1477, -8
  %1479 = inttoptr i64 %1478 to i64*
  store i64 %1476, i64* %1479
  store i64 %1478, i64* %11, align 8, !tbaa !1240
  %1480 = tail call %struct.Memory* @sub_40b2d0_WriteViewToDiskCS(%struct.State* nonnull %0, i64 %1475, %struct.Memory* %1623)
  %1481 = load i64, i64* %12, align 8
  %1482 = add i64 %1481, -20
  %1483 = load i32, i32* %5, align 4
  %1484 = load i64, i64* %3, align 8
  %1485 = inttoptr i64 %1482 to i32*
  store i32 %1483, i32* %1485
  %1486 = inttoptr i64 %1482 to i32*
  %1487 = load i32, i32* %1486
  %1488 = icmp eq i32 %1487, 0
  %1489 = select i1 %1488, i64 55, i64 13
  %1490 = add i64 %1484, %1489
  br i1 %1488, label %block_404d86, label %block_404d5c

block_405092:                                     ; preds = %block_40508d, %block_405048
  %1491 = phi i64 [ %372, %block_40508d ], [ %1567, %block_405048 ]
  %1492 = phi i64 [ %1667, %block_40508d ], [ %441, %block_405048 ]
  %1493 = phi %struct.Memory* [ %371, %block_40508d ], [ %1566, %block_405048 ]
  store i64 0, i64* %9, align 8, !tbaa !1240
  %1494 = add i64 %1491, -16
  %1495 = inttoptr i64 %1494 to i64*
  %1496 = load i64, i64* %1495
  %1497 = add i64 %1496, 4248
  %1498 = inttoptr i64 %1497 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %10, align 8, !tbaa !1240
  %1500 = add i64 %1492, 22
  %1501 = load i64, i64* %11, align 8, !tbaa !1240
  %1502 = add i64 %1501, -8
  %1503 = inttoptr i64 %1502 to i64*
  store i64 %1500, i64* %1503
  %1504 = inttoptr i64 %1502 to i64*
  %1505 = load i64, i64* %1504
  store i64 %1505, i64* %3, align 8, !alias.scope !2703, !noalias !2706
  store i64 %1501, i64* %11, align 8, !alias.scope !2703, !noalias !2706
  %1506 = tail call i64 @fseek(i64 %1499, i64 0, i64 0), !noalias !2703
  store i64 %1506, i64* %48, align 8, !alias.scope !2703, !noalias !2706
  %1507 = load i64, i64* %12, align 8
  %1508 = add i64 %1507, -276
  %1509 = load i64, i64* %3, align 8
  %1510 = inttoptr i64 %1508 to i32*
  %1511 = load i32, i32* %1510
  %1512 = add i64 %1507, -288
  %1513 = inttoptr i64 %1512 to i32*
  %1514 = load i32, i32* %1513
  %1515 = add i32 %1514, %1511
  %1516 = inttoptr i64 %1512 to i32*
  store i32 %1515, i32* %1516
  %1517 = add i64 %1507, -16
  %1518 = inttoptr i64 %1517 to i64*
  %1519 = load i64, i64* %1518
  %1520 = add i64 %1519, 556
  %1521 = inttoptr i64 %1520 to i32*
  %1522 = load i32, i32* %1521
  store i64 %1519, i64* %7, align 8, !tbaa !1240
  %1523 = add i64 %1519, 560
  %1524 = inttoptr i64 %1523 to i32*
  %1525 = load i32, i32* %1524
  %1526 = add i32 %1525, %1522
  %1527 = zext i32 %1526 to i64
  store i64 %1527, i64* %8, align 8, !tbaa !1240
  %1528 = inttoptr i64 %1523 to i32*
  store i32 %1526, i32* %1528
  %1529 = load i64, i64* %12, align 8
  %1530 = add i64 %1529, -296
  %1531 = inttoptr i64 %1530 to i64*
  %1532 = load i64, i64* %1531
  %1533 = icmp eq i64 %1532, 0
  %1534 = add i64 %1529, -424
  %1535 = load i32, i32* %5, align 4
  %1536 = inttoptr i64 %1534 to i32*
  store i32 %1535, i32* %1536
  %1537 = select i1 %1533, i64 76, i64 64
  %1538 = add i64 %1509, %1537
  br i1 %1533, label %block_4050f4, label %block_4050e8

block_404fd6:                                     ; preds = %block_404fa6
  %1539 = add i64 %99, -336
  store i64 %1539, i64* %8, align 8, !tbaa !1240
  %1540 = inttoptr i64 %100 to i64*
  %1541 = load i64, i64* %1540
  %1542 = add i64 %1541, 616
  %1543 = inttoptr i64 %1542 to i64*
  %1544 = load i64, i64* %1543
  %1545 = add i64 %1544, 40
  %1546 = inttoptr i64 %1545 to i32*
  %1547 = load i32, i32* %1546
  %1548 = add i64 %1541, 556
  %1549 = inttoptr i64 %1548 to i32*
  %1550 = load i32, i32* %1549
  %1551 = add i32 %1550, %1547
  %1552 = zext i32 %1551 to i64
  store i64 %1552, i64* %7, align 8, !tbaa !1240
  %1553 = inttoptr i64 %1548 to i32*
  store i32 %1551, i32* %1553
  %1554 = inttoptr i64 %100 to i64*
  %1555 = load i64, i64* %1554
  store i64 %1555, i64* %10, align 8, !tbaa !1240
  %1556 = add i64 %1555, 616
  %1557 = inttoptr i64 %1556 to i64*
  %1558 = load i64, i64* %1557
  %1559 = inttoptr i64 %1558 to i64*
  %1560 = load i64, i64* %1559
  store i64 %1560, i64* %9, align 8, !tbaa !1240
  %1561 = add i64 %112, 25338
  %1562 = add i64 %112, 60
  %1563 = load i64, i64* %11, align 8, !tbaa !1240
  %1564 = add i64 %1563, -8
  %1565 = inttoptr i64 %1564 to i64*
  store i64 %1562, i64* %1565
  store i64 %1564, i64* %11, align 8, !tbaa !1240
  %1566 = tail call %struct.Memory* @sub_40b2d0_WriteViewToDiskCS(%struct.State* nonnull %0, i64 %1561, %struct.Memory* %85)
  %1567 = load i64, i64* %12, align 8
  %1568 = add i64 %1567, -20
  %1569 = load i32, i32* %5, align 4
  %1570 = load i64, i64* %3, align 8
  %1571 = inttoptr i64 %1568 to i32*
  store i32 %1569, i32* %1571
  %1572 = icmp eq i32 %1569, 0
  %1573 = select i1 %1572, i64 54, i64 12
  %1574 = add i64 %1570, %1573
  br i1 %1572, label %block_405048, label %block_40501e

block_40498e:                                     ; preds = %block_404984
  %1575 = inttoptr i64 %854 to i32*
  %1576 = load i32, i32* %1575
  %1577 = add i64 %839, -280
  %1578 = inttoptr i64 %1577 to i32*
  store i32 %1576, i32* %1578
  %1579 = add i64 %839, -276
  %1580 = inttoptr i64 %1579 to i32*
  store i32 1, i32* %1580
  %1581 = inttoptr i64 %840 to i64*
  %1582 = load i64, i64* %1581
  %1583 = add i64 %1582, 616
  %1584 = inttoptr i64 %1583 to i64*
  %1585 = load i64, i64* %1584
  store i64 %1585, i64* %10, align 8, !tbaa !1240
  %1586 = add i64 %1582, 548
  %1587 = inttoptr i64 %1586 to i32*
  %1588 = load i32, i32* %1587
  %1589 = zext i32 %1588 to i64
  store i64 %1589, i64* %9, align 8, !tbaa !1240
  %1590 = add i64 %1582, 540
  %1591 = inttoptr i64 %1590 to i32*
  %1592 = load i32, i32* %1591
  %1593 = zext i32 %1592 to i64
  store i64 %1593, i64* %8, align 8, !tbaa !1240
  %1594 = add i64 %1693, 28322
  %1595 = add i64 %1693, 58
  %1596 = load i64, i64* %11, align 8, !tbaa !1240
  %1597 = add i64 %1596, -8
  %1598 = inttoptr i64 %1597 to i64*
  store i64 %1595, i64* %1598
  store i64 %1597, i64* %11, align 8, !tbaa !1240
  %1599 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %1594, %struct.Memory* %838)
  %1600 = load i64, i64* %12, align 8
  %1601 = add i64 %1600, -256
  %1602 = load i64, i64* %3, align 8
  store i64 %1601, i64* %9, align 8, !tbaa !1240
  %1603 = add i64 %1600, -16
  %1604 = inttoptr i64 %1603 to i64*
  %1605 = load i64, i64* %1604
  %1606 = add i64 %1605, 616
  %1607 = inttoptr i64 %1606 to i64*
  %1608 = load i64, i64* %1607
  store i64 %1608, i64* %10, align 8, !tbaa !1240
  %1609 = add i64 %1602, 24568
  %1610 = add i64 %1602, 23
  %1611 = load i64, i64* %11, align 8, !tbaa !1240
  %1612 = add i64 %1611, -8
  %1613 = inttoptr i64 %1612 to i64*
  store i64 %1610, i64* %1613
  store i64 %1612, i64* %11, align 8, !tbaa !1240
  %1614 = tail call %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* nonnull %0, i64 %1609, %struct.Memory* %1599)
  %1615 = load i64, i64* %12, align 8
  %1616 = add i64 %1615, -372
  %1617 = load i32, i32* %5, align 4
  %1618 = load i64, i64* %3, align 8
  %1619 = add i64 %1618, 6
  %1620 = inttoptr i64 %1616 to i32*
  store i32 %1617, i32* %1620
  br label %block_404e32

block_404ce3:                                     ; preds = %block_404ba2, %block_404cde, %block_404bb3
  %1621 = phi i64 [ %839, %block_404ba2 ], [ %839, %block_404bb3 ], [ %1017, %block_404cde ]
  %1622 = phi i64 [ %1163, %block_404ba2 ], [ %925, %block_404bb3 ], [ %1047, %block_404cde ]
  %1623 = phi %struct.Memory* [ %838, %block_404ba2 ], [ %838, %block_404bb3 ], [ %1016, %block_404cde ]
  %1624 = add i64 %1621, -16
  %1625 = inttoptr i64 %1624 to i64*
  %1626 = load i64, i64* %1625
  %1627 = add i64 %1626, 4240
  %1628 = inttoptr i64 %1627 to i64*
  %1629 = load i64, i64* %1628
  %1630 = add i64 %1622, 25
  %1631 = load i64, i64* %11, align 8, !tbaa !1240
  %1632 = add i64 %1631, -8
  %1633 = inttoptr i64 %1632 to i64*
  store i64 %1630, i64* %1633
  %1634 = inttoptr i64 %1632 to i64*
  %1635 = load i64, i64* %1634
  store i64 %1635, i64* %3, align 8, !alias.scope !2708, !noalias !2711
  store i64 %1631, i64* %11, align 8, !alias.scope !2708, !noalias !2711
  %1636 = tail call i64 @fseek(i64 %1629, i64 0, i64 2), !noalias !2708
  %1637 = load i64, i64* %12, align 8
  %1638 = add i64 %1637, -16
  %1639 = load i64, i64* %3, align 8
  %1640 = inttoptr i64 %1638 to i64*
  %1641 = load i64, i64* %1640
  %1642 = add i64 %1641, 624
  %1643 = inttoptr i64 %1642 to i32*
  %1644 = load i32, i32* %1643
  %1645 = icmp eq i32 %1644, 0
  %1646 = add i64 %1637, -392
  %1647 = trunc i64 %1636 to i32
  %1648 = inttoptr i64 %1646 to i32*
  store i32 %1647, i32* %1648
  %1649 = select i1 %1645, i64 23, i64 143
  %1650 = add i64 %1639, %1649
  br i1 %1645, label %block_404d13, label %block_404d8b

block_404e32:                                     ; preds = %block_40498e, %block_404b9d, %block_404dd0
  %1651 = phi i64 [ %1615, %block_40498e ], [ %1324, %block_404b9d ], [ %331, %block_404dd0 ]
  %1652 = phi i64 [ %1619, %block_40498e ], [ %1327, %block_404b9d ], [ %344, %block_404dd0 ]
  %1653 = phi i64 [ 1101, %block_40498e ], [ 5, %block_404b9d ], [ 5, %block_404dd0 ]
  %1654 = phi %struct.Memory* [ %1614, %block_40498e ], [ %1326, %block_404b9d ], [ %330, %block_404dd0 ]
  %1655 = add i64 %1652, %1653
  %1656 = add i64 %1651, -284
  %1657 = inttoptr i64 %1656 to i32*
  %1658 = load i32, i32* %1657
  %1659 = add i64 %1651, -280
  %1660 = inttoptr i64 %1659 to i32*
  store i32 %1658, i32* %1660
  %1661 = add i64 %1651, -24
  %1662 = inttoptr i64 %1661 to i32*
  %1663 = load i32, i32* %1662
  %1664 = add i32 %1663, 1
  %1665 = inttoptr i64 %1661 to i32*
  store i32 %1664, i32* %1665
  %1666 = add i64 %1655, -1420
  br label %block_4048a6

block_40508d:                                     ; preds = %block_40504d
  %1667 = add i64 %381, 5
  br label %block_405092

block_404d8b:                                     ; preds = %block_404ce3
  %1668 = inttoptr i64 %1638 to i64*
  %1669 = load i64, i64* %1668
  store i64 %1669, i64* %10, align 8, !tbaa !1240
  %1670 = add i64 %1650, 901
  %1671 = add i64 %1650, 9
  %1672 = load i64, i64* %11, align 8, !tbaa !1240
  %1673 = add i64 %1672, -8
  %1674 = inttoptr i64 %1673 to i64*
  store i64 %1671, i64* %1674
  store i64 %1673, i64* %11, align 8, !tbaa !1240
  %1675 = tail call %struct.Memory* @sub_405110_MultiWayMerge(%struct.State* nonnull %0, i64 %1670, %struct.Memory* %1623)
  %1676 = load i64, i64* %12, align 8
  %1677 = add i64 %1676, -20
  %1678 = load i32, i32* %5, align 4
  %1679 = load i64, i64* %3, align 8
  %1680 = inttoptr i64 %1677 to i32*
  store i32 %1678, i32* %1680
  %1681 = inttoptr i64 %1677 to i32*
  %1682 = load i32, i32* %1681
  %1683 = icmp eq i32 %1682, 0
  %1684 = select i1 %1683, i64 55, i64 13
  %1685 = add i64 %1679, %1684
  br i1 %1683, label %block_404dcb, label %block_404da1

block_404d86:                                     ; preds = %block_404d13
  %1686 = add i64 %1490, 74
  br label %block_404dd0

block_404984:                                     ; preds = %block_4048b5
  %1687 = add i64 %839, -24
  %1688 = inttoptr i64 %1687 to i32*
  %1689 = load i32, i32* %1688
  %1690 = add i32 %1689, -1
  %1691 = icmp eq i32 %1690, 0
  %1692 = select i1 %1691, i64 10, i64 102
  %1693 = add i64 %862, %1692
  br i1 %1691, label %block_40498e, label %block_4049ea

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit39
  %1694 = add i64 %52, -320
  %1695 = inttoptr i64 %1694 to i32*
  %1696 = load i32, i32* %1695
  %1697 = add i32 %1696, 1
  %1698 = inttoptr i64 %1694 to i32*
  store i32 %1697, i32* %1698
  %1699 = add i64 %52, -16
  %1700 = inttoptr i64 %1699 to i64*
  %1701 = load i64, i64* %1700
  %1702 = add i64 %1701, 4488
  %1703 = inttoptr i64 %1702 to i32*
  %1704 = load i32, i32* %1703
  %1705 = add i64 %52, -304
  %1706 = inttoptr i64 %1705 to i32*
  %1707 = load i32, i32* %1706
  %1708 = urem i32 %1704, %1707
  %1709 = add i64 %52, -316
  %1710 = inttoptr i64 %1709 to i32*
  store i32 %1708, i32* %1710
  %1711 = add i64 %363, 56
  br label %block_4047bf
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400e60_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400e60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* %3, align 8, !tbaa !1240
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %5, i64* %8
  %9 = inttoptr i64 %7 to i64*
  %10 = load i64, i64* %9
  store i64 %10, i64* %4, align 8, !tbaa !1240
  store i64 %6, i64* %3, align 8, !tbaa !1240
  %11 = add i64 %1, -112
  %12 = tail call %struct.Memory* @sub_400df0_register_tm_clones(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  ret %struct.Memory* %12
}

; Function Attrs: noinline
define %struct.Memory* @sub_401e8c(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401e8c:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 ptrtoint (%adcexp_type* @adcexp to i64), i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -80
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %7, align 8, !tbaa !1240
  %13 = add i64 %9, -96
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %1, -3052
  %17 = add i64 %1, 23
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !1240
  %22 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 %16, %struct.Memory* %2)
  %23 = load i64, i64* %8, align 8
  %24 = add i64 %23, -176
  %25 = load i64, i64* %4, align 8
  %26 = load i64, i64* %3, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27
  %28 = add i64 %26, 147
  %29 = tail call %struct.Memory* @sub_401f36_def_401E8A(%struct.State* nonnull %0, i64 %28, %struct.Memory* %22)
  ret %struct.Memory* %29
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027e0_WriteADCPar(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4027e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -88
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 1024, i64* %6, align 8, !tbaa !1240
  %23 = add i64 %13, -24
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -32
  %27 = load i64, i64* %8, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %1, 41
  %30 = add i64 %13, -96
  %31 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %31
  %32 = inttoptr i64 %30 to i64*
  %33 = load i64, i64* %32
  store i64 %33, i64* %3, align 8, !alias.scope !2713, !noalias !2716
  store i64 %16, i64* %10, align 8, !alias.scope !2713, !noalias !2716
  %34 = tail call i64 @calloc(i64 1024, i64 1)
  %35 = load i64, i64* %3, align 8
  %36 = load i64, i64* %11, align 8
  %37 = add i64 %36, -32
  %38 = inttoptr i64 %37 to i64*
  store i64 %34, i64* %38
  %39 = add i64 %36, -40
  %40 = inttoptr i64 %39 to i64*
  store i64 0, i64* %40
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %36, -24
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %35, 37
  %47 = load i64, i64* %10, align 8, !tbaa !1240
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %46, i64* %49
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %52 = load i64, i64* %6, align 8, !alias.scope !2718, !noalias !2721
  %53 = load i64, i64* %50, align 8, !alias.scope !2718, !noalias !2721
  %54 = load i64, i64* %51, align 8, !alias.scope !2718, !noalias !2721
  %55 = inttoptr i64 %47 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %47, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %47, 16
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %47, 24
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %47, 32
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %47, 40
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = add i64 %47, 48
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73
  %75 = add i64 %47, 56
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  %78 = add i64 %47, 64
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  %81 = add i64 %47, 72
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82
  %84 = inttoptr i64 %48 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %3, align 8, !alias.scope !2718, !noalias !2721
  store i64 %47, i64* %10, align 8, !alias.scope !2718, !noalias !2721
  %86 = tail call i64 @sprintf(i64 %42, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %45, i64 %52, i64 %53, i64 %54, i64 %56, i64 %59, i64 %62, i64 %65, i64 %68, i64 %71, i64 %74, i64 %77, i64 %80, i64 %83), !noalias !2718
  %87 = load i64, i64* %3, align 8
  %88 = load i64, i64* %11, align 8
  %89 = add i64 %88, -32
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %88, -44
  %93 = trunc i64 %86 to i32
  %94 = inttoptr i64 %92 to i32*
  store i32 %93, i32* %94
  %95 = add i64 %87, 22
  %96 = load i64, i64* %10, align 8, !tbaa !1240
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %95, i64* %98
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %3, align 8, !alias.scope !2723, !noalias !2726
  store i64 %96, i64* %10, align 8, !alias.scope !2723, !noalias !2726
  %101 = tail call i64 @fopen(i64 %91, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4930))
  %102 = load i64, i64* %11, align 8
  %103 = add i64 %102, -40
  %104 = load i64, i64* %3, align 8
  %105 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %105
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106
  %108 = icmp eq i64 %107, 0
  %109 = select i1 %108, i64 15, i64 59
  %110 = add i64 %104, %109
  br i1 %108, label %block_402853, label %block_40287f

block_40294f:                                     ; preds = %block_40287f, %block_402853
  %111 = phi i64 [ %521, %block_40287f ], [ %190, %block_402853 ]
  %112 = phi %struct.Memory* [ %2, %block_40287f ], [ %2, %block_402853 ]
  %113 = add i64 %111, -4
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = zext i32 %115 to i64
  store i64 %116, i64* %5, align 8, !tbaa !1240
  %117 = load i64, i64* %10, align 8
  %118 = add i64 %117, 80
  %119 = icmp ugt i64 %117, -81
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %17, align 1, !tbaa !1264
  %121 = trunc i64 %118 to i32
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #10
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %18, align 1, !tbaa !1278
  %127 = xor i64 %117, 16
  %128 = xor i64 %127, %118
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %19, align 1, !tbaa !1279
  %132 = icmp eq i64 %118, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %20, align 1, !tbaa !1280
  %134 = lshr i64 %118, 63
  %135 = trunc i64 %134 to i8
  store i8 %135, i8* %21, align 1, !tbaa !1281
  %136 = lshr i64 %117, 63
  %137 = xor i64 %134, %136
  %138 = add nuw nsw i64 %137, %134
  %139 = icmp eq i64 %138, 2
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %22, align 1, !tbaa !1282
  %141 = add i64 %117, 88
  %142 = inttoptr i64 %118 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %11, align 8, !tbaa !1240
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %3, align 8, !tbaa !1240
  %146 = add i64 %117, 96
  store i64 %146, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %112

block_402853:                                     ; preds = %block_4027e0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1042), i64* %8, align 8, !tbaa !1240
  %147 = load i64, i64* @stderr
  store i64 %147, i64* %9, align 8, !tbaa !1240
  %148 = add i64 %102, -32
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %7, align 8, !tbaa !1240
  %151 = add i64 %110, 29
  %152 = load i64, i64* %10, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  %155 = load i64, i64* %6, align 8, !alias.scope !2728, !noalias !2731
  %156 = load i64, i64* %50, align 8, !alias.scope !2728, !noalias !2731
  %157 = load i64, i64* %51, align 8, !alias.scope !2728, !noalias !2731
  %158 = inttoptr i64 %152 to i64*
  %159 = load i64, i64* %158
  %160 = add i64 %152, 8
  %161 = inttoptr i64 %160 to i64*
  %162 = load i64, i64* %161
  %163 = add i64 %152, 16
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164
  %166 = add i64 %152, 24
  %167 = inttoptr i64 %166 to i64*
  %168 = load i64, i64* %167
  %169 = add i64 %152, 32
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  %172 = add i64 %152, 40
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  %175 = add i64 %152, 48
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %152, 56
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %152, 64
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %152, 72
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = inttoptr i64 %153 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %3, align 8, !alias.scope !2728, !noalias !2731
  store i64 %152, i64* %10, align 8, !alias.scope !2728, !noalias !2731
  %189 = tail call i64 @fprintf(i64 %147, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1042), i64 %150, i64 %155, i64 %156, i64 %157, i64 %159, i64 %162, i64 %165, i64 %168, i64 %171, i64 %174, i64 %177, i64 %180, i64 %183, i64 %186), !noalias !2728
  %190 = load i64, i64* %11, align 8
  %191 = add i64 %190, -4
  %192 = inttoptr i64 %191 to i32*
  store i32 0, i32* %192
  %193 = add i64 %190, -48
  %194 = trunc i64 %189 to i32
  %195 = inttoptr i64 %193 to i32*
  store i32 %194, i32* %195
  br label %block_40294f

block_40287f:                                     ; preds = %block_4027e0
  %196 = add i64 %102, -16
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %198, 4
  %200 = inttoptr i64 %199 to i32*
  %201 = load i32, i32* %200
  %202 = zext i32 %201 to i64
  %203 = add i64 %110, 28
  %204 = load i64, i64* %10, align 8, !tbaa !1240
  %205 = add i64 %204, -8
  %206 = inttoptr i64 %205 to i64*
  store i64 %203, i64* %206
  %207 = load i64, i64* %6, align 8, !alias.scope !2733, !noalias !2736
  %208 = load i64, i64* %50, align 8, !alias.scope !2733, !noalias !2736
  %209 = load i64, i64* %51, align 8, !alias.scope !2733, !noalias !2736
  %210 = inttoptr i64 %204 to i64*
  %211 = load i64, i64* %210
  %212 = add i64 %204, 8
  %213 = inttoptr i64 %212 to i64*
  %214 = load i64, i64* %213
  %215 = add i64 %204, 16
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  %218 = add i64 %204, 24
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219
  %221 = add i64 %204, 32
  %222 = inttoptr i64 %221 to i64*
  %223 = load i64, i64* %222
  %224 = add i64 %204, 40
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = add i64 %204, 48
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %204, 56
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %204, 64
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %204, 72
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = inttoptr i64 %205 to i64*
  %240 = load i64, i64* %239
  store i64 %240, i64* %3, align 8, !alias.scope !2733, !noalias !2736
  store i64 %204, i64* %10, align 8, !alias.scope !2733, !noalias !2736
  %241 = tail call i64 @fprintf(i64 %107, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1075), i64 %202, i64 %207, i64 %208, i64 %209, i64 %211, i64 %214, i64 %217, i64 %220, i64 %223, i64 %226, i64 %229, i64 %232, i64 %235, i64 %238), !noalias !2733
  %242 = load i64, i64* %3, align 8
  %243 = load i64, i64* %11, align 8
  %244 = add i64 %243, -40
  %245 = inttoptr i64 %244 to i64*
  %246 = load i64, i64* %245
  %247 = add i64 %243, -16
  %248 = inttoptr i64 %247 to i64*
  %249 = load i64, i64* %248
  %250 = add i64 %249, 8
  %251 = inttoptr i64 %250 to i32*
  %252 = load i32, i32* %251
  %253 = zext i32 %252 to i64
  %254 = add i64 %243, -52
  %255 = trunc i64 %241 to i32
  %256 = inttoptr i64 %254 to i32*
  store i32 %255, i32* %256
  %257 = add i64 %242, 31
  %258 = load i64, i64* %10, align 8, !tbaa !1240
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260
  %261 = load i64, i64* %50, align 8, !alias.scope !2738, !noalias !2741
  %262 = load i64, i64* %51, align 8, !alias.scope !2738, !noalias !2741
  %263 = inttoptr i64 %258 to i64*
  %264 = load i64, i64* %263
  %265 = add i64 %258, 8
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %258, 16
  %269 = inttoptr i64 %268 to i64*
  %270 = load i64, i64* %269
  %271 = add i64 %258, 24
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  %274 = add i64 %258, 32
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %258, 40
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  %280 = add i64 %258, 48
  %281 = inttoptr i64 %280 to i64*
  %282 = load i64, i64* %281
  %283 = add i64 %258, 56
  %284 = inttoptr i64 %283 to i64*
  %285 = load i64, i64* %284
  %286 = add i64 %258, 64
  %287 = inttoptr i64 %286 to i64*
  %288 = load i64, i64* %287
  %289 = add i64 %258, 72
  %290 = inttoptr i64 %289 to i64*
  %291 = load i64, i64* %290
  %292 = inttoptr i64 %259 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %3, align 8, !alias.scope !2738, !noalias !2741
  store i64 %258, i64* %10, align 8, !alias.scope !2738, !noalias !2741
  %294 = tail call i64 @fprintf(i64 %246, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1087), i64 %253, i64 %249, i64 %261, i64 %262, i64 %264, i64 %267, i64 %270, i64 %273, i64 %276, i64 %279, i64 %282, i64 %285, i64 %288, i64 %291), !noalias !2738
  %295 = load i64, i64* %3, align 8
  %296 = load i64, i64* %11, align 8
  %297 = add i64 %296, -40
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %296, -16
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %302, 16
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %296, -56
  %307 = trunc i64 %294 to i32
  %308 = inttoptr i64 %306 to i32*
  store i32 %307, i32* %308
  %309 = add i64 %295, 32
  %310 = load i64, i64* %10, align 8, !tbaa !1240
  %311 = add i64 %310, -8
  %312 = inttoptr i64 %311 to i64*
  store i64 %309, i64* %312
  %313 = load i64, i64* %50, align 8, !alias.scope !2743, !noalias !2746
  %314 = load i64, i64* %51, align 8, !alias.scope !2743, !noalias !2746
  %315 = inttoptr i64 %310 to i64*
  %316 = load i64, i64* %315
  %317 = add i64 %310, 8
  %318 = inttoptr i64 %317 to i64*
  %319 = load i64, i64* %318
  %320 = add i64 %310, 16
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %310, 24
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %310, 32
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  %329 = add i64 %310, 40
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330
  %332 = add i64 %310, 48
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %310, 56
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %310, 64
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %310, 72
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = inttoptr i64 %311 to i64*
  %345 = load i64, i64* %344
  store i64 %345, i64* %3, align 8, !alias.scope !2743, !noalias !2746
  store i64 %310, i64* %10, align 8, !alias.scope !2743, !noalias !2746
  %346 = tail call i64 @fprintf(i64 %299, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1103), i64 %305, i64 %302, i64 %313, i64 %314, i64 %316, i64 %319, i64 %322, i64 %325, i64 %328, i64 %331, i64 %334, i64 %337, i64 %340, i64 %343), !noalias !2743
  %347 = load i64, i64* %3, align 8
  %348 = load i64, i64* %11, align 8
  %349 = add i64 %348, -40
  %350 = inttoptr i64 %349 to i64*
  %351 = load i64, i64* %350
  %352 = add i64 %348, -16
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %354, 40
  %356 = inttoptr i64 %355 to i8*
  %357 = load i8, i8* %356
  %358 = sext i8 %357 to i64
  %359 = and i64 %358, 4294967295
  %360 = add i64 %348, -60
  %361 = trunc i64 %346 to i32
  %362 = inttoptr i64 %360 to i32*
  store i32 %361, i32* %362
  %363 = add i64 %347, 32
  %364 = load i64, i64* %10, align 8, !tbaa !1240
  %365 = add i64 %364, -8
  %366 = inttoptr i64 %365 to i64*
  store i64 %363, i64* %366
  %367 = load i64, i64* %50, align 8, !alias.scope !2748, !noalias !2751
  %368 = load i64, i64* %51, align 8, !alias.scope !2748, !noalias !2751
  %369 = inttoptr i64 %364 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %364, 8
  %372 = inttoptr i64 %371 to i64*
  %373 = load i64, i64* %372
  %374 = add i64 %364, 16
  %375 = inttoptr i64 %374 to i64*
  %376 = load i64, i64* %375
  %377 = add i64 %364, 24
  %378 = inttoptr i64 %377 to i64*
  %379 = load i64, i64* %378
  %380 = add i64 %364, 32
  %381 = inttoptr i64 %380 to i64*
  %382 = load i64, i64* %381
  %383 = add i64 %364, 40
  %384 = inttoptr i64 %383 to i64*
  %385 = load i64, i64* %384
  %386 = add i64 %364, 48
  %387 = inttoptr i64 %386 to i64*
  %388 = load i64, i64* %387
  %389 = add i64 %364, 56
  %390 = inttoptr i64 %389 to i64*
  %391 = load i64, i64* %390
  %392 = add i64 %364, 64
  %393 = inttoptr i64 %392 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %364, 72
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = inttoptr i64 %365 to i64*
  %399 = load i64, i64* %398
  store i64 %399, i64* %3, align 8, !alias.scope !2748, !noalias !2751
  store i64 %364, i64* %10, align 8, !alias.scope !2748, !noalias !2751
  %400 = tail call i64 @fprintf(i64 %351, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1119), i64 %359, i64 %354, i64 %367, i64 %368, i64 %370, i64 %373, i64 %376, i64 %379, i64 %382, i64 %385, i64 %388, i64 %391, i64 %394, i64 %397), !noalias !2748
  %401 = load i64, i64* %3, align 8
  %402 = load i64, i64* %11, align 8
  %403 = add i64 %402, -40
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %402, -16
  %407 = inttoptr i64 %406 to i64*
  %408 = load i64, i64* %407
  %409 = add i64 %408, 24
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410
  %412 = zext i32 %411 to i64
  %413 = add i64 %402, -64
  %414 = trunc i64 %400 to i32
  %415 = inttoptr i64 %413 to i32*
  store i32 %414, i32* %415
  %416 = add i64 %401, 31
  %417 = load i64, i64* %10, align 8, !tbaa !1240
  %418 = add i64 %417, -8
  %419 = inttoptr i64 %418 to i64*
  store i64 %416, i64* %419
  %420 = load i64, i64* %50, align 8, !alias.scope !2753, !noalias !2756
  %421 = load i64, i64* %51, align 8, !alias.scope !2753, !noalias !2756
  %422 = inttoptr i64 %417 to i64*
  %423 = load i64, i64* %422
  %424 = add i64 %417, 8
  %425 = inttoptr i64 %424 to i64*
  %426 = load i64, i64* %425
  %427 = add i64 %417, 16
  %428 = inttoptr i64 %427 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %417, 24
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431
  %433 = add i64 %417, 32
  %434 = inttoptr i64 %433 to i64*
  %435 = load i64, i64* %434
  %436 = add i64 %417, 40
  %437 = inttoptr i64 %436 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %417, 48
  %440 = inttoptr i64 %439 to i64*
  %441 = load i64, i64* %440
  %442 = add i64 %417, 56
  %443 = inttoptr i64 %442 to i64*
  %444 = load i64, i64* %443
  %445 = add i64 %417, 64
  %446 = inttoptr i64 %445 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %417, 72
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = inttoptr i64 %418 to i64*
  %452 = load i64, i64* %451
  store i64 %452, i64* %3, align 8, !alias.scope !2753, !noalias !2756
  store i64 %417, i64* %10, align 8, !alias.scope !2753, !noalias !2756
  %453 = tail call i64 @fprintf(i64 %405, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1129), i64 %412, i64 %408, i64 %420, i64 %421, i64 %423, i64 %426, i64 %429, i64 %432, i64 %435, i64 %438, i64 %441, i64 %444, i64 %447, i64 %450), !noalias !2753
  %454 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1148), i64* %8, align 8, !tbaa !1240
  %455 = load i64, i64* %11, align 8
  %456 = add i64 %455, -40
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %455, -16
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  store i64 %461, i64* %6, align 8, !tbaa !1240
  %462 = add i64 %461, 32
  %463 = inttoptr i64 %462 to i64*
  %464 = load i64, i64* %463
  store i64 %464, i64* %7, align 8, !tbaa !1240
  %465 = add i64 %455, -68
  %466 = trunc i64 %453 to i32
  %467 = inttoptr i64 %465 to i32*
  store i32 %466, i32* %467
  %468 = add i64 %454, 32
  %469 = load i64, i64* %10, align 8, !tbaa !1240
  %470 = add i64 %469, -8
  %471 = inttoptr i64 %470 to i64*
  store i64 %468, i64* %471
  %472 = load i64, i64* %50, align 8, !alias.scope !2758, !noalias !2761
  %473 = load i64, i64* %51, align 8, !alias.scope !2758, !noalias !2761
  %474 = inttoptr i64 %469 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %469, 8
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = add i64 %469, 16
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %469, 24
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483
  %485 = add i64 %469, 32
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %469, 40
  %489 = inttoptr i64 %488 to i64*
  %490 = load i64, i64* %489
  %491 = add i64 %469, 48
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  %494 = add i64 %469, 56
  %495 = inttoptr i64 %494 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %469, 64
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %469, 72
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = inttoptr i64 %470 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %3, align 8, !alias.scope !2758, !noalias !2761
  store i64 %469, i64* %10, align 8, !alias.scope !2758, !noalias !2761
  %505 = tail call i64 @fprintf(i64 %458, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1148), i64 %464, i64 %461, i64 %472, i64 %473, i64 %475, i64 %478, i64 %481, i64 %484, i64 %487, i64 %490, i64 %493, i64 %496, i64 %499, i64 %502), !noalias !2758
  %506 = load i64, i64* %11, align 8
  %507 = add i64 %506, -40
  %508 = load i64, i64* %3, align 8
  %509 = inttoptr i64 %507 to i64*
  %510 = load i64, i64* %509
  store i64 %510, i64* %9, align 8, !tbaa !1240
  %511 = add i64 %506, -72
  %512 = trunc i64 %505 to i32
  %513 = inttoptr i64 %511 to i32*
  store i32 %512, i32* %513
  %514 = add i64 %508, 12
  %515 = load i64, i64* %10, align 8, !tbaa !1240
  %516 = add i64 %515, -8
  %517 = inttoptr i64 %516 to i64*
  store i64 %514, i64* %517
  %518 = inttoptr i64 %516 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %3, align 8, !alias.scope !2763, !noalias !2766
  store i64 %515, i64* %10, align 8, !alias.scope !2763, !noalias !2766
  %520 = tail call i64 @fclose(i64 %510), !noalias !2763
  %521 = load i64, i64* %11, align 8
  %522 = add i64 %521, -4
  %523 = inttoptr i64 %522 to i32*
  store i32 1, i32* %523
  %524 = add i64 %521, -76
  %525 = trunc i64 %520 to i32
  %526 = inttoptr i64 %524 to i32*
  store i32 %525, i32* %526
  br label %block_40294f
}

; Function Attrs: noinline
define %struct.Memory* @sub_406540_SeekAndReadNextSubChunk(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_406540:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %16 = load i64, i64* %14, align 8
  %17 = load i64, i64* %13, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %14, align 8, !tbaa !1240
  %20 = add i64 %17, -88
  store i64 %20, i64* %13, align 8, !tbaa !1240
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %27 = add i64 %17, -16
  %28 = load i64, i64* %12, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = add i64 %17, -20
  %31 = load i32, i32* %7, align 4
  %32 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %32
  %33 = add i64 %17, -32
  %34 = load i64, i64* %10, align 8
  %35 = inttoptr i64 %33 to i64*
  store i64 %34, i64* %35
  %36 = add i64 %17, -36
  %37 = load i32, i32* %5, align 4
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = add i64 %17, -48
  %40 = load i64, i64* %15, align 8
  %41 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %41
  %42 = add i64 %17, -52
  %43 = load i32, i32* %9, align 4
  %44 = inttoptr i64 %42 to i32*
  store i32 %43, i32* %44
  %45 = inttoptr i64 %33 to i64*
  %46 = load i64, i64* %45
  %47 = inttoptr i64 %39 to i64*
  %48 = load i64, i64* %47
  store i64 0, i64* %10, align 8, !tbaa !1240
  %49 = add i64 %1, 47
  %50 = load i64, i64* %13, align 8, !tbaa !1240
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %3, align 8, !alias.scope !2768, !noalias !2771
  store i64 %50, i64* %13, align 8, !alias.scope !2768, !noalias !2771
  %56 = tail call i64 @fseek(i64 %46, i64 %48, i64 0), !noalias !2768
  %57 = load i64, i64* %3, align 8
  %58 = shl i64 %56, 32
  %59 = ashr exact i64 %58, 32
  %60 = load i64, i64* %14, align 8
  %61 = add i64 %60, -56
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62
  %63 = add i64 %57, 12
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64
  store i8 0, i8* %21, align 1, !tbaa !1264
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #10
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %22, align 1, !tbaa !1278
  store i8 0, i8* %23, align 1, !tbaa !1279
  %72 = icmp eq i64 %65, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %24, align 1, !tbaa !1280
  %74 = lshr i64 %65, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %25, align 1, !tbaa !1281
  store i8 0, i8* %26, align 1, !tbaa !1282
  %76 = icmp ne i8 %75, 0
  %77 = select i1 %76, i64 6, i64 44
  %78 = add i64 %63, %77
  br i1 %76, label %block_406581, label %block_4065a7

block_4065a7:                                     ; preds = %block_406540
  %79 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  store i64 1, i64* %10, align 8, !tbaa !1240
  %80 = add i64 %60, -8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %60, -12
  %84 = inttoptr i64 %83 to i32*
  %85 = load i32, i32* %84
  %86 = zext i32 %85 to i64
  %87 = shl nuw nsw i64 %86, 2
  %88 = add i64 %87, %82
  %89 = add i64 %60, -28
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = add i64 %60, -44
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93
  %95 = sext i32 %91 to i64
  %96 = sext i32 %94 to i64
  %97 = mul nsw i64 %96, %95
  %98 = and i64 %97, 4294967295
  store i64 %98, i64* %11, align 8, !tbaa !1240
  %99 = load i64, i64* %14, align 8
  %100 = add i64 %99, -24
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %99, -72
  %104 = inttoptr i64 %103 to i64*
  store i64 %102, i64* %104
  store i64 %88, i64* %12, align 8, !tbaa !1240
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %79, align 8, !tbaa !1240
  %107 = add i64 %78, 54
  %108 = load i64, i64* %13, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110
  %111 = load i64, i64* %10, align 8, !alias.scope !2773, !noalias !2776
  store i64 %108, i64* %13, align 8, !alias.scope !2773, !noalias !2776
  %112 = tail call i64 @fread(i64 %88, i64 %98, i64 %111, i64 %106)
  store i64 %112, i64* %53, align 8, !alias.scope !2773, !noalias !2776
  %113 = load i64, i64* %14, align 8
  %114 = add i64 %113, -80
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %13, align 8
  %117 = add i64 %116, 80
  %118 = icmp ugt i64 %116, -81
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %21, align 1, !tbaa !1264
  %120 = trunc i64 %117 to i32
  %121 = and i32 %120, 255
  %122 = tail call i32 @llvm.ctpop.i32(i32 %121) #10
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  store i8 %125, i8* %22, align 1, !tbaa !1278
  %126 = xor i64 %116, 16
  %127 = xor i64 %126, %117
  %128 = lshr i64 %127, 4
  %129 = trunc i64 %128 to i8
  %130 = and i8 %129, 1
  store i8 %130, i8* %23, align 1, !tbaa !1279
  %131 = icmp eq i64 %117, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %24, align 1, !tbaa !1280
  %133 = lshr i64 %117, 63
  %134 = trunc i64 %133 to i8
  store i8 %134, i8* %25, align 1, !tbaa !1281
  %135 = lshr i64 %116, 63
  %136 = xor i64 %133, %135
  %137 = add nuw nsw i64 %136, %133
  %138 = icmp eq i64 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %26, align 1, !tbaa !1282
  %140 = add i64 %116, 88
  %141 = inttoptr i64 %117 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %14, align 8, !tbaa !1240
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %3, align 8, !tbaa !1240
  %145 = add i64 %116, 96
  store i64 %145, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_406581:                                     ; preds = %block_406540
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4203), i64* %11, align 8, !tbaa !1240
  %146 = load i64, i64* @stderr
  %147 = add i64 %78, 25
  %148 = load i64, i64* %13, align 8, !tbaa !1240
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %153 = load i64, i64* %10, align 8, !alias.scope !2778, !noalias !2781
  %154 = load i64, i64* %151, align 8, !alias.scope !2778, !noalias !2781
  %155 = load i64, i64* %15, align 8, !alias.scope !2778, !noalias !2781
  %156 = load i64, i64* %152, align 8, !alias.scope !2778, !noalias !2781
  %157 = inttoptr i64 %148 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %148, 8
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %148, 16
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  %165 = add i64 %148, 24
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  %168 = add i64 %148, 32
  %169 = inttoptr i64 %168 to i64*
  %170 = load i64, i64* %169
  %171 = add i64 %148, 40
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  %174 = add i64 %148, 48
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = add i64 %148, 56
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %148, 64
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  %183 = add i64 %148, 72
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = inttoptr i64 %149 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %3, align 8, !alias.scope !2778, !noalias !2781
  store i64 %148, i64* %13, align 8, !alias.scope !2778, !noalias !2781
  %188 = tail call i64 @fprintf(i64 %146, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4203), i64 %153, i64 %154, i64 %155, i64 %156, i64 %158, i64 %161, i64 %164, i64 %167, i64 %170, i64 %173, i64 %176, i64 %179, i64 %182, i64 %185), !noalias !2778
  %189 = load i64, i64* %3, align 8
  store i64 1, i64* %12, align 8, !tbaa !1240
  %190 = load i64, i64* %14, align 8
  %191 = add i64 %190, -60
  %192 = trunc i64 %188 to i32
  %193 = inttoptr i64 %191 to i32*
  store i32 %192, i32* %193
  %194 = add i64 %189, 13
  %195 = load i64, i64* %13, align 8, !tbaa !1240
  %196 = add i64 %195, -8
  %197 = inttoptr i64 %196 to i64*
  store i64 %194, i64* %197
  %198 = inttoptr i64 %196 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %3, align 8, !alias.scope !2783, !noalias !2786
  store i64 %195, i64* %13, align 8, !alias.scope !2783, !noalias !2786
  %200 = tail call i64 @exit(i64 1), !noalias !2783
  store i64 %200, i64* %53, align 8, !alias.scope !2783, !noalias !2786
  %201 = load i64, i64* %3, align 8
  %202 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %201, %struct.Memory* %2)
  ret %struct.Memory* %202
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400e30___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400e30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 40) to i8*)
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !1264
  %7 = zext i8 %5 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #10
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !1278
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !1279
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !1280
  %17 = lshr i8 %5, 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %17, i8* %18, align 1, !tbaa !1281
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !1282
  %20 = select i1 %14, i64 9, i64 32
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br i1 %14, label %block_400e39, label %block_400e50

block_400e50:                                     ; preds = %block_400e30
  %23 = load i64, i64* %22, align 8, !tbaa !1240
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  store i64 %25, i64* %3, align 8, !tbaa !1240
  %26 = add i64 %23, 8
  store i64 %26, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %2

block_400e39:                                     ; preds = %block_400e30
  %27 = load i64, i64* %4, align 8
  %28 = load i64, i64* %22, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %4, align 8, !tbaa !1240
  %31 = add i64 %21, -121
  %32 = add i64 %21, 9
  %33 = add i64 %28, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %32, i64* %34
  store i64 %33, i64* %22, align 8, !tbaa !1240
  %35 = tail call %struct.Memory* @sub_400dc0_deregister_tm_clones(%struct.State* nonnull %0, i64 %31, %struct.Memory* %2)
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 40) to i8*)
  %36 = load i64, i64* %22, align 8, !tbaa !1240
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %4, align 8, !tbaa !1240
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %3, align 8, !tbaa !1240
  %42 = add i64 %36, 16
  store i64 %42, i64* %22, align 8, !tbaa !1240
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_403580_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403580:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %8, align 8, !tbaa !1240
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %20 = add i64 %11, -12
  %21 = load i32, i32* %5, align 4
  %22 = inttoptr i64 %20 to i32*
  store i32 %21, i32* %22
  %23 = add i64 %1, 48
  %24 = add i64 %1, 16
  %25 = add i64 %11, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %24, i64* %26
  store i64 %25, i64* %7, align 8, !tbaa !1240
  %27 = tail call %struct.Memory* @sub_4035b0_elapsed_time(%struct.State* nonnull %0, i64 %23, %struct.Memory* %2)
  %28 = load i64, i64* %8, align 8
  %29 = add i64 %28, -4
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %6, align 8, !tbaa !1240
  %33 = shl nsw i64 %32, 3
  %34 = add i64 %33, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 736)
  %35 = bitcast %union.VectorReg* %9 to double*
  %36 = load double, double* %35, align 1
  %37 = inttoptr i64 %34 to double*
  store double %36, double* %37
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 16
  %40 = icmp ugt i64 %38, -17
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %14, align 1, !tbaa !1264
  %42 = trunc i64 %39 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #10
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %15, align 1, !tbaa !1278
  %48 = xor i64 %38, 16
  %49 = xor i64 %48, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %16, align 1, !tbaa !1279
  %53 = icmp eq i64 %39, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %17, align 1, !tbaa !1280
  %55 = lshr i64 %39, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %18, align 1, !tbaa !1281
  %57 = lshr i64 %38, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %19, align 1, !tbaa !1282
  %62 = add i64 %38, 24
  %63 = inttoptr i64 %39 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %8, align 8, !tbaa !1240
  %65 = inttoptr i64 %62 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %3, align 8, !tbaa !1240
  %67 = add i64 %38, 32
  store i64 %67, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %27
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ef5(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_401ef5:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 ptrtoint (%adcexpA_type* @adcexpA to i64), i64* %5, align 8, !tbaa !1240
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -80
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %7, align 8, !tbaa !1240
  %13 = add i64 %9, -96
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %6, align 8, !tbaa !1240
  %16 = add i64 %1, -3157
  %17 = add i64 %1, 23
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !1240
  %22 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull %0, i64 %16, %struct.Memory* %2)
  %23 = load i64, i64* %8, align 8
  %24 = add i64 %23, -176
  %25 = load i64, i64* %4, align 8
  %26 = load i64, i64* %3, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27
  %28 = add i64 %26, 42
  %29 = tail call %struct.Memory* @sub_401f36_def_401E8A(%struct.State* nonnull %0, i64 %28, %struct.Memory* %22)
  ret %struct.Memory* %29
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40bab0___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
block_40bab0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1240
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8, !tbaa !1240
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400d80__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400d80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %10, align 8, !tbaa !1240
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = load i64, i64* %6, align 8
  store i64 %19, i64* %12, align 8, !tbaa !1240
  %20 = load i64, i64* %9, align 8, !tbaa !1240
  %21 = add i64 %20, 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %7, align 8, !tbaa !1240
  store i64 %21, i64* %6, align 8, !tbaa !1240
  %24 = and i64 %21, -16
  store i8 0, i8* %13, align 1, !tbaa !1264
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 240
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #10
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %14, align 1, !tbaa !1278
  %31 = icmp eq i64 %24, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !1280
  %33 = lshr i64 %21, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %16, align 1, !tbaa !1281
  store i8 0, i8* %17, align 1, !tbaa !1282
  store i8 0, i8* %18, align 1, !tbaa !1279
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %24, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = add i64 %24, -16
  %39 = inttoptr i64 %38 to i64*
  store i64 %36, i64* %39
  store i64 ptrtoint (i64 ()* @callback_sub_40bab0___libc_csu_fini to i64), i64* %11, align 8, !tbaa !1240
  store i64 ptrtoint (i64 ()* @callback_sub_40ba40___libc_csu_init to i64), i64* %5, align 8, !tbaa !1240
  store i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64* %8, align 8, !tbaa !1240
  %40 = add i64 %1, 42
  %41 = add i64 %24, -24
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  %45 = add i64 %24, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = inttoptr i64 %41 to i64*
  %49 = load i64, i64* %48
  store i64 %38, i64* %9, align 8, !alias.scope !2788, !noalias !2791
  %50 = tail call i64 @__libc_start_main(i64 ptrtoint (i64 (i64, i64, i64)* @main to i64), i64 %23, i64 %21, i64 ptrtoint (i64 ()* @callback_sub_40ba40___libc_csu_init to i64), i64 ptrtoint (i64 ()* @callback_sub_40bab0___libc_csu_fini to i64), i64 %19, i64 %44, i64 %47), !noalias !2788
  store i64 %50, i64* %4, align 8, !alias.scope !2788, !noalias !2791
  %51 = add i64 %49, 1
  store i64 %51, i64* %3, align 8
  %52 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  ret %struct.Memory* %52
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409650_vszsort(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409650:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -56
  store i64 %16, i64* %10, align 8, !tbaa !1240
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -16
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = add i64 %13, -20
  %27 = load i32, i32* %5, align 4
  %28 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %28
  %29 = inttoptr i64 %26 to i32*
  %30 = load i32, i32* %29
  %31 = lshr i32 %30, 1
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %8, align 8, !tbaa !1240
  %33 = add i64 %13, -24
  %34 = add i64 %1, 24
  %35 = inttoptr i64 %33 to i32*
  store i32 %31, i32* %35
  br label %block_409668

block_409672:                                     ; preds = %block_409668
  %36 = add i64 %191, -8
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %9, align 8, !tbaa !1240
  %39 = zext i32 %195 to i64
  store i64 %39, i64* %8, align 8, !tbaa !1240
  %40 = add i64 %191, -12
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %7, align 8, !tbaa !1240
  %44 = add i64 %206, -434
  %45 = add i64 %206, 15
  %46 = load i64, i64* %10, align 8, !tbaa !1240
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48
  store i64 %47, i64* %10, align 8, !tbaa !1240
  %49 = tail call %struct.Memory* @sub_4094c0_restore(%struct.State* nonnull %0, i64 %44, %struct.Memory* %192)
  %50 = load i64, i64* %11, align 8
  %51 = add i64 %50, -16
  %52 = load i64, i64* %3, align 8
  %53 = inttoptr i64 %51 to i32*
  %54 = load i32, i32* %53
  %55 = add i32 %54, -1
  %56 = inttoptr i64 %51 to i32*
  store i32 %55, i32* %56
  %57 = add i64 %52, -25
  br label %block_409668

block_40973f:                                     ; preds = %block_409695
  %58 = load i64, i64* %10, align 8
  %59 = add i64 %58, 48
  %60 = icmp ugt i64 %58, -49
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %17, align 1, !tbaa !1264
  %62 = trunc i64 %59 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #10
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %18, align 1, !tbaa !1278
  %68 = xor i64 %58, 16
  %69 = xor i64 %68, %59
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %19, align 1, !tbaa !1279
  %73 = icmp eq i64 %59, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %20, align 1, !tbaa !1280
  %75 = lshr i64 %59, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %21, align 1, !tbaa !1281
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %75
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %22, align 1, !tbaa !1282
  %82 = add i64 %58, 56
  %83 = inttoptr i64 %59 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %11, align 8, !tbaa !1240
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %3, align 8, !tbaa !1240
  %87 = add i64 %58, 64
  store i64 %87, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %209

block_40968f:                                     ; preds = %block_409668
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %89 = add i64 %191, -12
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = zext i32 %91 to i64
  store i64 %92, i64* %6, align 8, !tbaa !1240
  %93 = add i64 %206, 6
  %94 = inttoptr i64 %193 to i32*
  store i32 %91, i32* %94
  br label %block_409695

block_40969f:                                     ; preds = %block_409695
  store i64 1, i64* %8, align 8, !tbaa !1240
  %95 = add i32 %212, -1
  %96 = add i64 %208, -20
  %97 = inttoptr i64 %96 to i32*
  store i32 %95, i32* %97
  %98 = add i64 %208, -8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %208, -32
  %104 = inttoptr i64 %103 to i64*
  store i64 %102, i64* %104
  %105 = inttoptr i64 %98 to i64*
  %106 = load i64, i64* %105
  %107 = inttoptr i64 %96 to i32*
  %108 = load i32, i32* %107
  %109 = sext i32 %108 to i64
  %110 = shl nsw i64 %109, 4
  %111 = add i64 %110, %106
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = load i64, i64* %11, align 8
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = inttoptr i64 %117 to i64*
  store i64 %113, i64* %118
  %119 = add i64 %114, -32
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = inttoptr i64 %115 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %114, -20
  %125 = inttoptr i64 %124 to i32*
  %126 = load i32, i32* %125
  %127 = sext i32 %126 to i64
  %128 = shl nsw i64 %127, 4
  %129 = add i64 %128, %123
  %130 = inttoptr i64 %129 to i64*
  store i64 %121, i64* %130
  %131 = inttoptr i64 %115 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %132, 8
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %114, -40
  %137 = inttoptr i64 %136 to i64*
  store i64 %135, i64* %137
  %138 = inttoptr i64 %115 to i64*
  %139 = load i64, i64* %138
  %140 = load i64, i64* %11, align 8
  %141 = add i64 %140, -20
  %142 = inttoptr i64 %141 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 4
  %146 = add i64 %145, %139
  %147 = add i64 %146, 8
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %140, -8
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %152, 8
  %154 = inttoptr i64 %153 to i64*
  store i64 %149, i64* %154
  %155 = add i64 %140, -40
  %156 = inttoptr i64 %155 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %88, align 8, !tbaa !1240
  %158 = inttoptr i64 %150 to i64*
  %159 = load i64, i64* %158
  %160 = inttoptr i64 %141 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  %163 = shl nsw i64 %162, 4
  %164 = add i64 %163, %159
  %165 = add i64 %164, 8
  %166 = inttoptr i64 %165 to i64*
  store i64 %157, i64* %166
  %167 = load i64, i64* %11, align 8
  %168 = add i64 %167, -8
  %169 = inttoptr i64 %168 to i64*
  %170 = load i64, i64* %169
  store i64 %170, i64* %9, align 8, !tbaa !1240
  %171 = add i64 %167, -20
  %172 = inttoptr i64 %171 to i32*
  %173 = load i32, i32* %172
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %7, align 8, !tbaa !1240
  %175 = add i64 %223, -479
  %176 = add i64 %223, 146
  %177 = load i64, i64* %10, align 8, !tbaa !1240
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179
  store i64 %178, i64* %10, align 8, !tbaa !1240
  %180 = tail call %struct.Memory* @sub_4094c0_restore(%struct.State* nonnull %0, i64 %175, %struct.Memory* %209)
  %181 = load i64, i64* %11, align 8
  %182 = add i64 %181, -16
  %183 = load i64, i64* %3, align 8
  %184 = inttoptr i64 %182 to i32*
  %185 = load i32, i32* %184
  %186 = add i32 %185, -1
  %187 = zext i32 %186 to i64
  store i64 %187, i64* %6, align 8, !tbaa !1240
  %188 = inttoptr i64 %182 to i32*
  store i32 %186, i32* %188
  %189 = add i64 %183, -156
  br label %block_409695

block_409668:                                     ; preds = %block_409672, %block_409650
  %190 = phi i64 [ %34, %block_409650 ], [ %57, %block_409672 ]
  %191 = phi i64 [ %14, %block_409650 ], [ %50, %block_409672 ]
  %192 = phi %struct.Memory* [ %2, %block_409650 ], [ %49, %block_409672 ]
  %193 = add i64 %191, -16
  %194 = inttoptr i64 %193 to i32*
  %195 = load i32, i32* %194
  %196 = add i32 %195, -1
  %197 = lshr i32 %196, 31
  %198 = trunc i32 %197 to i8
  %199 = lshr i32 %195, 31
  %200 = xor i32 %197, %199
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = icmp ne i8 %198, 0
  %204 = xor i1 %203, %202
  %205 = select i1 %204, i64 39, i64 10
  %206 = add i64 %190, %205
  br i1 %204, label %block_40968f, label %block_409672

block_409695:                                     ; preds = %block_40969f, %block_40968f
  %207 = phi i64 [ %93, %block_40968f ], [ %189, %block_40969f ]
  %208 = phi i64 [ %191, %block_40968f ], [ %181, %block_40969f ]
  %209 = phi %struct.Memory* [ %192, %block_40968f ], [ %180, %block_40969f ]
  %210 = add i64 %208, -16
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211
  %213 = add i32 %212, -2
  %214 = lshr i32 %213, 31
  %215 = trunc i32 %214 to i8
  %216 = lshr i32 %212, 31
  %217 = xor i32 %214, %216
  %218 = add nuw nsw i32 %217, %216
  %219 = icmp eq i32 %218, 2
  %220 = icmp ne i8 %215, 0
  %221 = xor i1 %220, %219
  %222 = select i1 %221, i64 170, i64 10
  %223 = add i64 %207, %222
  br i1 %221, label %block_40973f, label %block_40969f
}

; Function Attrs: noinline
define %struct.Memory* @sub_402599(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %19, align 8, !alias.scope !2793, !noalias !2796
  %24 = add i64 %1, 35
  br label %block_402599

block_4025fa:                                     ; preds = %block_40255a
  %25 = inttoptr i64 %442 to i64*
  %26 = load i64, i64* %25
  %27 = add i64 %438, -24
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  %30 = add i64 %29, 24
  %31 = load i64, i64* %11, align 8, !tbaa !1240
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 4204061, i64* %33
  %34 = load i64, i64* %20, align 8, !alias.scope !2798, !noalias !2801
  %35 = load i64, i64* %21, align 8, !alias.scope !2798, !noalias !2801
  %36 = inttoptr i64 %31 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %31, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %31, 16
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %31, 24
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %31, 32
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = add i64 %31, 40
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %31, 48
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %31, 56
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  %59 = add i64 %31, 64
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %31, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = inttoptr i64 %32 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %4, align 8, !alias.scope !2798, !noalias !2801
  store i64 %31, i64* %11, align 8, !alias.scope !2798, !noalias !2801
  %67 = tail call i64 @__isoc99_sscanf(i64 %26, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %30, i64 4204026, i64 %34, i64 %35, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49, i64 %52, i64 %55, i64 %58, i64 %61, i64 %64), !noalias !2798
  %68 = load i64, i64* %12, align 8
  %69 = add i64 %68, -1136
  %70 = trunc i64 %67 to i32
  %71 = load i64, i64* %4, align 8
  %72 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %72
  %73 = add i64 %71, 127
  br label %block_40269c.backedge

block_4024da:                                     ; preds = %block_4024cc
  %74 = add i64 %530, -1056
  %75 = add i64 %537, 22
  %76 = load i64, i64* %11, align 8, !tbaa !1240
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %4, align 8, !alias.scope !2803, !noalias !2806
  store i64 %76, i64* %11, align 8, !alias.scope !2803, !noalias !2806
  %81 = tail call i64 @strstr(i64 %74, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %82 = load i64, i64* %4, align 8
  %83 = icmp eq i64 %81, 0
  %84 = select i1 %83, i64 15, i64 10
  %85 = add i64 %82, %84
  br i1 %83, label %block_4024ff, label %block_4026a6

block_4024ff:                                     ; preds = %block_4024da
  %86 = load i64, i64* %12, align 8
  %87 = add i64 %86, -1056
  %88 = add i64 %86, -1088
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %9, align 8, !tbaa !1240
  %91 = add i64 %85, 19
  %92 = load i64, i64* %11, align 8, !tbaa !1240
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %4, align 8, !alias.scope !2808, !noalias !2811
  store i64 %92, i64* %11, align 8, !alias.scope !2808, !noalias !2811
  %97 = tail call i64 @strstr(i64 %87, i64 %90)
  %98 = load i64, i64* %4, align 8
  %99 = icmp eq i64 %97, 0
  %100 = select i1 %99, i64 399, i64 10
  %101 = add i64 %98, %100
  br i1 %99, label %block_4026a6, label %block_40251c

block_402673:                                     ; preds = %block_40255a
  %102 = inttoptr i64 %442 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %438, -24
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = add i64 %106, 40
  %108 = load i64, i64* %11, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 4204182, i64* %110
  %111 = load i64, i64* %20, align 8, !alias.scope !2813, !noalias !2816
  %112 = load i64, i64* %21, align 8, !alias.scope !2813, !noalias !2816
  %113 = inttoptr i64 %108 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %108, 8
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = add i64 %108, 16
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119
  %121 = add i64 %108, 24
  %122 = inttoptr i64 %121 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %108, 32
  %125 = inttoptr i64 %124 to i64*
  %126 = load i64, i64* %125
  %127 = add i64 %108, 40
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128
  %130 = add i64 %108, 48
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %108, 64
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %108, 72
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  %142 = inttoptr i64 %109 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %4, align 8, !alias.scope !2813, !noalias !2816
  store i64 %108, i64* %11, align 8, !alias.scope !2813, !noalias !2816
  %144 = tail call i64 @__isoc99_sscanf(i64 %103, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %107, i64 4204147, i64 %111, i64 %112, i64 %114, i64 %117, i64 %120, i64 %123, i64 %126, i64 %129, i64 %132, i64 %135, i64 %138, i64 %141), !noalias !2813
  %145 = load i64, i64* %12, align 8
  %146 = add i64 %145, -1144
  %147 = trunc i64 %144 to i32
  %148 = load i64, i64* %4, align 8
  %149 = add i64 %148, 6
  %150 = inttoptr i64 %146 to i32*
  store i32 %147, i32* %150
  br label %block_40269c.backedge

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_40269c, %block_4026d0.loopexit
  %151 = phi i64 [ %560, %block_40269c ], [ %537, %block_4026d0.loopexit ]
  %152 = phi i64 [ %557, %block_40269c ], [ %530, %block_4026d0.loopexit ]
  %153 = phi %struct.Memory* [ %559, %block_40269c ], [ %531, %block_4026d0.loopexit ]
  %154 = add i64 %152, -1076
  %155 = inttoptr i64 %154 to i32*
  %156 = load i32, i32* %155
  %157 = add i32 %156, 1
  %158 = inttoptr i64 %154 to i32*
  store i32 %157, i32* %158
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %159 = add i64 %152, -1056
  %160 = add i64 %152, -1064
  %161 = inttoptr i64 %160 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %8, align 8, !tbaa !1240
  %163 = add i64 %151, -558
  %164 = load i64, i64* %11, align 8, !tbaa !1240
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  store i64 %163, i64* %166
  %167 = inttoptr i64 %165 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %4, align 8, !alias.scope !2818, !noalias !2821
  store i64 %164, i64* %11, align 8, !alias.scope !2818, !noalias !2821
  %169 = tail call i64 @fgets(i64 %159, i64 1024, i64 %162)
  %170 = load i64, i64* %4, align 8
  %171 = icmp eq i64 %169, 0
  %172 = select i1 %171, i64 578, i64 10
  %173 = add i64 %170, %172
  %174 = load i64, i64* %12, align 8
  br i1 %171, label %block_4026e4, label %block_4024ac

block_4025c7:                                     ; preds = %block_40255a
  %175 = inttoptr i64 %442 to i64*
  %176 = load i64, i64* %175
  %177 = add i64 %438, -24
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %179, 16
  %181 = load i64, i64* %11, align 8, !tbaa !1240
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 4204010, i64* %183
  %184 = load i64, i64* %20, align 8, !alias.scope !2823, !noalias !2826
  %185 = load i64, i64* %21, align 8, !alias.scope !2823, !noalias !2826
  %186 = inttoptr i64 %181 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %181, 8
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = add i64 %181, 16
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = add i64 %181, 24
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  %197 = add i64 %181, 32
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198
  %200 = add i64 %181, 40
  %201 = inttoptr i64 %200 to i64*
  %202 = load i64, i64* %201
  %203 = add i64 %181, 48
  %204 = inttoptr i64 %203 to i64*
  %205 = load i64, i64* %204
  %206 = add i64 %181, 56
  %207 = inttoptr i64 %206 to i64*
  %208 = load i64, i64* %207
  %209 = add i64 %181, 64
  %210 = inttoptr i64 %209 to i64*
  %211 = load i64, i64* %210
  %212 = add i64 %181, 72
  %213 = inttoptr i64 %212 to i64*
  %214 = load i64, i64* %213
  %215 = inttoptr i64 %182 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %4, align 8, !alias.scope !2823, !noalias !2826
  store i64 %181, i64* %11, align 8, !alias.scope !2823, !noalias !2826
  %217 = tail call i64 @__isoc99_sscanf(i64 %176, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %180, i64 4203975, i64 %184, i64 %185, i64 %187, i64 %190, i64 %193, i64 %196, i64 %199, i64 %202, i64 %205, i64 %208, i64 %211, i64 %214), !noalias !2823
  %218 = load i64, i64* %12, align 8
  %219 = add i64 %218, -1132
  %220 = trunc i64 %217 to i32
  %221 = load i64, i64* %4, align 8
  %222 = inttoptr i64 %219 to i32*
  store i32 %220, i32* %222
  %223 = add i64 %221, 178
  br label %block_40269c.backedge

block_4027c1:                                     ; preds = %block_402719, %block_40279f, %block_4026e4
  %224 = phi %struct.Memory* [ %153, %block_40279f ], [ %153, %block_402719 ], [ %153, %block_4026e4 ]
  %225 = add i64 %387, -4
  %226 = inttoptr i64 %225 to i32*
  store i32 1, i32* %226
  %227 = inttoptr i64 %225 to i32*
  %228 = load i32, i32* %227
  %229 = zext i32 %228 to i64
  store i64 %229, i64* %6, align 8, !tbaa !1240
  %230 = load i64, i64* %11, align 8
  %231 = add i64 %230, 1168
  %232 = icmp ugt i64 %230, -1169
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %13, align 1, !tbaa !1264
  %234 = trunc i64 %231 to i32
  %235 = and i32 %234, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %14, align 1, !tbaa !1278
  %240 = xor i64 %230, 16
  %241 = xor i64 %240, %231
  %242 = lshr i64 %241, 4
  %243 = trunc i64 %242 to i8
  %244 = and i8 %243, 1
  store i8 %244, i8* %15, align 1, !tbaa !1279
  %245 = icmp eq i64 %231, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %16, align 1, !tbaa !1280
  %247 = lshr i64 %231, 63
  %248 = trunc i64 %247 to i8
  store i8 %248, i8* %17, align 1, !tbaa !1281
  %249 = lshr i64 %230, 63
  %250 = xor i64 %247, %249
  %251 = add nuw nsw i64 %250, %247
  %252 = icmp eq i64 %251, 2
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %18, align 1, !tbaa !1282
  %254 = add i64 %230, 1176
  %255 = inttoptr i64 %231 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %12, align 8, !tbaa !1240
  %257 = inttoptr i64 %254 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %4, align 8, !tbaa !1240
  %259 = add i64 %230, 1184
  store i64 %259, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %224

block_402628:                                     ; preds = %block_40255a
  %260 = inttoptr i64 %442 to i64*
  %261 = load i64, i64* %260
  %262 = load i64, i64* %11, align 8, !tbaa !1240
  %263 = add i64 %262, -8
  %264 = inttoptr i64 %263 to i64*
  store i64 4204084, i64* %264
  %265 = inttoptr i64 %263 to i64*
  %266 = load i64, i64* %265
  store i64 %266, i64* %4, align 8, !alias.scope !2828, !noalias !2831
  store i64 %262, i64* %11, align 8, !alias.scope !2828, !noalias !2831
  %267 = tail call i64 @strlen(i64 %261)
  %268 = load i64, i64* %4, align 8
  %269 = add i64 %268, 12
  %270 = load i64, i64* %11, align 8, !tbaa !1240
  %271 = add i64 %270, -8
  %272 = inttoptr i64 %271 to i64*
  store i64 %269, i64* %272
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273
  store i64 %274, i64* %4, align 8, !alias.scope !2833, !noalias !2836
  store i64 %270, i64* %11, align 8, !alias.scope !2833, !noalias !2836
  %275 = tail call i64 @malloc(i64 %267)
  %276 = load i64, i64* %4, align 8
  %277 = load i64, i64* %12, align 8
  %278 = add i64 %277, -24
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %280, 32
  %282 = inttoptr i64 %281 to i64*
  store i64 %275, i64* %282
  %283 = add i64 %277, -1096
  %284 = inttoptr i64 %283 to i64*
  %285 = load i64, i64* %284
  %286 = inttoptr i64 %278 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %287, 32
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %276, 40
  %292 = load i64, i64* %11, align 8, !tbaa !1240
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294
  %295 = load i64, i64* %19, align 8, !alias.scope !2838, !noalias !2841
  %296 = load i64, i64* %20, align 8, !alias.scope !2838, !noalias !2841
  %297 = load i64, i64* %21, align 8, !alias.scope !2838, !noalias !2841
  %298 = inttoptr i64 %292 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %292, 8
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %292, 16
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %292, 24
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %292, 32
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %292, 40
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = add i64 %292, 48
  %316 = inttoptr i64 %315 to i64*
  %317 = load i64, i64* %316
  %318 = add i64 %292, 56
  %319 = inttoptr i64 %318 to i64*
  %320 = load i64, i64* %319
  %321 = add i64 %292, 64
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322
  %324 = add i64 %292, 72
  %325 = inttoptr i64 %324 to i64*
  %326 = load i64, i64* %325
  %327 = inttoptr i64 %293 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %4, align 8, !alias.scope !2838, !noalias !2841
  store i64 %292, i64* %11, align 8, !alias.scope !2838, !noalias !2841
  %329 = tail call i64 @__isoc99_sscanf(i64 %285, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 %290, i64 %295, i64 %296, i64 %297, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314, i64 %317, i64 %320, i64 %323, i64 %326), !noalias !2838
  %330 = load i64, i64* %12, align 8
  %331 = add i64 %330, -1140
  %332 = trunc i64 %329 to i32
  %333 = load i64, i64* %4, align 8
  %334 = inttoptr i64 %331 to i32*
  store i32 %332, i32* %334
  %335 = add i64 %333, 52
  br label %block_40269c.backedge

block_4026e4:                                     ; preds = %block_4026d0
  %336 = add i64 %174, -1064
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337
  %339 = add i64 %173, 12
  %340 = load i64, i64* %11, align 8, !tbaa !1240
  %341 = add i64 %340, -8
  %342 = inttoptr i64 %341 to i64*
  store i64 %339, i64* %342
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343
  store i64 %344, i64* %4, align 8, !alias.scope !2843, !noalias !2846
  store i64 %340, i64* %11, align 8, !alias.scope !2843, !noalias !2846
  %345 = tail call i64 @fclose(i64 %338), !noalias !2843
  %346 = load i64, i64* %12, align 8
  %347 = add i64 %346, -24
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %349, 40
  %351 = inttoptr i64 %350 to i8*
  %352 = load i8, i8* %351
  %353 = sext i8 %352 to i32
  %354 = add nsw i32 %353, -65
  %355 = zext i32 %354 to i64
  %356 = lshr i32 %354, 31
  store i64 %355, i64* %10, align 8, !tbaa !1240
  %357 = add nsw i32 %353, -87
  %358 = zext i32 %357 to i64
  store i64 %358, i64* %7, align 8, !tbaa !1240
  %359 = icmp ult i32 %354, 22
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %13, align 1, !tbaa !1264
  %361 = and i32 %357, 255
  %362 = tail call i32 @llvm.ctpop.i32(i32 %361) #10
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  store i8 %365, i8* %14, align 1, !tbaa !1278
  %366 = xor i32 %354, 16
  %367 = xor i32 %366, %357
  %368 = lshr i32 %367, 4
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  store i8 %370, i8* %15, align 1, !tbaa !1279
  %371 = icmp eq i32 %357, 0
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %16, align 1, !tbaa !1280
  %373 = lshr i32 %357, 31
  %374 = trunc i32 %373 to i8
  store i8 %374, i8* %17, align 1, !tbaa !1281
  %375 = xor i32 %373, %356
  %376 = add nuw nsw i32 %375, %356
  %377 = icmp eq i32 %376, 2
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %18, align 1, !tbaa !1282
  %379 = add i64 %346, -1148
  %380 = trunc i64 %345 to i32
  %381 = inttoptr i64 %379 to i32*
  store i32 %380, i32* %381
  %382 = add i64 %346, -1160
  %383 = inttoptr i64 %382 to i64*
  store i64 %355, i64* %383
  %384 = add i64 %346, -1164
  %385 = inttoptr i64 %384 to i32*
  store i32 %357, i32* %385
  %386 = or i1 %371, %359
  %387 = load i64, i64* %12, align 8
  br i1 %386, label %block_402719, label %block_4027c1

block_4026a6:                                     ; preds = %block_4024ff, %block_4024da
  %388 = phi i64 [ %101, %block_4024ff ], [ %85, %block_4024da ]
  %389 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %390 = phi %struct.Memory* [ %531, %block_4024ff ], [ %531, %block_4024da ]
  %391 = add i64 %388, %389
  %392 = load i64, i64* %12, align 8
  %393 = add i64 %392, -1080
  %394 = inttoptr i64 %393 to i32*
  %395 = load i32, i32* %394
  %396 = add i32 %395, 1
  %397 = inttoptr i64 %393 to i32*
  store i32 %396, i32* %397
  %398 = inttoptr i64 %393 to i32*
  %399 = load i32, i32* %398
  %400 = sext i32 %399 to i64
  %401 = shl nsw i64 %400, 3
  %402 = add i64 %401, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = add i64 %392, -1088
  %406 = inttoptr i64 %405 to i64*
  store i64 %404, i64* %406
  %407 = add i64 %391, -474
  br label %block_4024cc

block_40279f:                                     ; preds = %block_402719
  %408 = add i64 %387, -24
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = add i64 %410, 4
  %412 = inttoptr i64 %411 to i32*
  store i32 20, i32* %412
  %413 = inttoptr i64 %408 to i64*
  %414 = load i64, i64* %413
  %415 = add i64 %414, 8
  %416 = inttoptr i64 %415 to i32*
  store i32 1, i32* %416
  %417 = inttoptr i64 %408 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %418, 16
  %420 = inttoptr i64 %419 to i64*
  store i64 10000000, i64* %420
  br label %block_4027c1

block_4025f5:                                     ; preds = %block_40255a
  br label %block_40269c.backedge

block_40255a:                                     ; preds = %block_40251c
  %421 = inttoptr i64 %465 to i64*
  %422 = load i64, i64* %421
  store i64 %422, i64* %6, align 8, !tbaa !1240
  %423 = shl i64 %422, 3
  %424 = add i64 %423, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %425 = inttoptr i64 %424 to i64*
  %426 = load i64, i64* %425
  store i64 %426, i64* %7, align 8, !tbaa !1240
  store i64 %426, i64* %4, align 8, !tbaa !1240
  switch i64 %426, label %562 [
    i64 4203929, label %block_402599.loopexit
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5
  ]

block_40251c:                                     ; preds = %block_4024ff
  %427 = load i64, i64* %12, align 8
  %428 = add i64 %427, -1088
  %429 = inttoptr i64 %428 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %101, 12
  %432 = load i64, i64* %11, align 8, !tbaa !1240
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434
  %435 = inttoptr i64 %433 to i64*
  %436 = load i64, i64* %435
  store i64 %436, i64* %4, align 8, !alias.scope !2848, !noalias !2851
  store i64 %432, i64* %11, align 8, !alias.scope !2848, !noalias !2851
  %437 = tail call i64 @strlen(i64 %430)
  %438 = load i64, i64* %12, align 8
  %439 = add i64 %438, -1055
  %440 = add i64 %439, %437
  %441 = load i64, i64* %4, align 8
  %442 = add i64 %438, -1096
  %443 = inttoptr i64 %442 to i64*
  store i64 %440, i64* %443
  %444 = add i64 %438, -1080
  %445 = inttoptr i64 %444 to i32*
  %446 = load i32, i32* %445
  %447 = zext i32 %446 to i64
  %448 = add nsw i64 %447, -6
  store i64 %448, i64* %10, align 8, !tbaa !1240
  %449 = icmp ult i32 %446, 6
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %13, align 1, !tbaa !1264
  %451 = trunc i64 %448 to i32
  %452 = and i32 %451, 255
  %453 = tail call i32 @llvm.ctpop.i32(i32 %452) #10
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  %456 = xor i8 %455, 1
  store i8 %456, i8* %14, align 1, !tbaa !1278
  %457 = xor i64 %448, %447
  %458 = lshr i64 %457, 4
  %459 = trunc i64 %458 to i8
  %460 = and i8 %459, 1
  store i8 %460, i8* %15, align 1, !tbaa !1279
  %461 = icmp eq i64 %448, 0
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %16, align 1, !tbaa !1280
  %463 = lshr i64 %448, 63
  %464 = trunc i64 %463 to i8
  store i8 %464, i8* %17, align 1, !tbaa !1281
  store i8 0, i8* %18, align 1, !tbaa !1282
  %465 = add i64 %438, -1112
  %466 = inttoptr i64 %465 to i64*
  store i64 %447, i64* %466
  %467 = add i64 %438, -1120
  %468 = inttoptr i64 %467 to i64*
  store i64 %448, i64* %468
  %469 = or i1 %461, %449
  %470 = select i1 %469, i64 50, i64 372
  %471 = add i64 %441, %470
  br i1 %469, label %block_40255a, label %block_40269c.backedge

block_40269c.backedge:                            ; preds = %block_40251c, %block_4025f5, %block_402628, %block_4025c7, %block_402673, %block_4025fa
  %472 = phi i64 [ %438, %block_40251c ], [ %438, %block_4025f5 ], [ %330, %block_402628 ], [ %145, %block_402673 ], [ %218, %block_4025c7 ], [ %68, %block_4025fa ]
  %473 = phi i64 [ %471, %block_40251c ], [ 4204188, %block_4025f5 ], [ %335, %block_402628 ], [ %149, %block_402673 ], [ %223, %block_4025c7 ], [ %73, %block_4025fa ]
  %474 = phi %struct.Memory* [ %531, %block_40251c ], [ %531, %block_4025f5 ], [ %531, %block_402628 ], [ %531, %block_402673 ], [ %531, %block_4025c7 ], [ %531, %block_4025fa ]
  br label %block_40269c

block_402599.loopexit:                            ; preds = %block_40255a
  br label %block_402599

block_402599:                                     ; preds = %block_402599.loopexit, %3
  %475 = phi i64 [ %23, %3 ], [ 4203929, %block_402599.loopexit ]
  %476 = phi i64 [ %22, %3 ], [ %438, %block_402599.loopexit ]
  %477 = phi i64 [ %24, %3 ], [ 4203964, %block_402599.loopexit ]
  %478 = phi %struct.Memory* [ %2, %3 ], [ %531, %block_402599.loopexit ]
  %479 = add i64 %476, -1096
  %480 = inttoptr i64 %479 to i64*
  %481 = load i64, i64* %480
  %482 = add i64 %476, -24
  %483 = inttoptr i64 %482 to i64*
  %484 = load i64, i64* %483
  %485 = add i64 %484, 8
  %486 = load i64, i64* %11, align 8, !tbaa !1240
  %487 = add i64 %486, -8
  %488 = inttoptr i64 %487 to i64*
  store i64 %477, i64* %488
  %489 = load i64, i64* %20, align 8, !alias.scope !2793, !noalias !2796
  %490 = load i64, i64* %21, align 8, !alias.scope !2793, !noalias !2796
  %491 = inttoptr i64 %486 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %486, 8
  %494 = inttoptr i64 %493 to i64*
  %495 = load i64, i64* %494
  %496 = add i64 %486, 16
  %497 = inttoptr i64 %496 to i64*
  %498 = load i64, i64* %497
  %499 = add i64 %486, 24
  %500 = inttoptr i64 %499 to i64*
  %501 = load i64, i64* %500
  %502 = add i64 %486, 32
  %503 = inttoptr i64 %502 to i64*
  %504 = load i64, i64* %503
  %505 = add i64 %486, 40
  %506 = inttoptr i64 %505 to i64*
  %507 = load i64, i64* %506
  %508 = add i64 %486, 48
  %509 = inttoptr i64 %508 to i64*
  %510 = load i64, i64* %509
  %511 = add i64 %486, 56
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %486, 64
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  %517 = add i64 %486, 72
  %518 = inttoptr i64 %517 to i64*
  %519 = load i64, i64* %518
  %520 = inttoptr i64 %487 to i64*
  %521 = load i64, i64* %520
  store i64 %521, i64* %4, align 8, !alias.scope !2793, !noalias !2796
  store i64 %486, i64* %11, align 8, !alias.scope !2793, !noalias !2796
  %522 = tail call i64 @__isoc99_sscanf(i64 %481, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5175), i64 %485, i64 %475, i64 %489, i64 %490, i64 %492, i64 %495, i64 %498, i64 %501, i64 %504, i64 %507, i64 %510, i64 %513, i64 %516, i64 %519), !noalias !2793
  %523 = load i64, i64* %12, align 8
  %524 = add i64 %523, -1128
  %525 = trunc i64 %522 to i32
  %526 = load i64, i64* %4, align 8
  %527 = inttoptr i64 %524 to i32*
  store i32 %525, i32* %527
  %528 = add i64 %526, 224
  br label %block_40269c

block_4024cc:                                     ; preds = %block_4024ac, %block_4026a6
  %529 = phi i64 [ %555, %block_4024ac ], [ %407, %block_4026a6 ]
  %530 = phi i64 [ %174, %block_4024ac ], [ %392, %block_4026a6 ]
  %531 = phi %struct.Memory* [ %153, %block_4024ac ], [ %390, %block_4026a6 ]
  %532 = add i64 %530, -1088
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  %535 = icmp eq i64 %534, 0
  %536 = select i1 %535, i64 516, i64 14
  %537 = add i64 %529, %536
  br i1 %535, label %block_4026d0.loopexit, label %block_4024da

block_402719:                                     ; preds = %block_4026e4
  %538 = add i64 %387, -1160
  %539 = inttoptr i64 %538 to i64*
  %540 = load i64, i64* %539
  store i64 %540, i64* %6, align 8, !tbaa !1240
  %541 = shl i64 %540, 3
  %542 = add i64 %541, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  store i64 %544, i64* %7, align 8, !tbaa !1240
  store i64 %544, i64* %4, align 8, !tbaa !1240
  switch i64 %544, label %567 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_4024ac:                                     ; preds = %block_4026d0
  %545 = add i64 %174, -1080
  %546 = inttoptr i64 %545 to i32*
  store i32 0, i32* %546
  %547 = inttoptr i64 %545 to i32*
  %548 = load i32, i32* %547
  %549 = sext i32 %548 to i64
  %550 = shl nsw i64 %549, 3
  %551 = add i64 %550, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = add i64 %174, -1088
  %555 = add i64 %173, 32
  %556 = inttoptr i64 %554 to i64*
  store i64 %553, i64* %556
  br label %block_4024cc

block_40269c:                                     ; preds = %block_402599, %block_40269c.backedge
  %557 = phi i64 [ %523, %block_402599 ], [ %472, %block_40269c.backedge ]
  %558 = phi i64 [ %528, %block_402599 ], [ %473, %block_40269c.backedge ]
  %559 = phi %struct.Memory* [ %478, %block_402599 ], [ %474, %block_40269c.backedge ]
  %560 = add i64 %558, 52
  br label %block_4026d0

block_40256b:                                     ; preds = %block_40255a
  %561 = tail call %struct.Memory* @sub_40256b(%struct.State* nonnull %0, i64 4203883, %struct.Memory* %531)
  ret %struct.Memory* %561

; <label>:562:                                    ; preds = %block_40255a
  %563 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %426, %struct.Memory* %531)
  ret %struct.Memory* %563

block_40272a:                                     ; preds = %block_402719
  %564 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %153)
  ret %struct.Memory* %564

block_402778:                                     ; preds = %block_402719
  %565 = tail call %struct.Memory* @sub_402778(%struct.State* nonnull %0, i64 4204408, %struct.Memory* %153)
  ret %struct.Memory* %565

block_402751:                                     ; preds = %block_402719
  %566 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %153)
  ret %struct.Memory* %566

; <label>:567:                                    ; preds = %block_402719
  %568 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %544, %struct.Memory* %153)
  ret %struct.Memory* %568
}

; Function Attrs: noinline
define %struct.Memory* @sub_4017d0_GetFactorization(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4017d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -104
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %22 = add i64 %12, -16
  %23 = load i64, i64* %8, align 8
  %24 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %12, -24
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %12, -32
  %29 = load i64, i64* %6, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %12, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 0, i64* %32
  %33 = add i64 %12, -48
  %34 = inttoptr i64 %33 to i64*
  store i64 0, i64* %34
  %35 = add i64 %1, 51
  %36 = add i64 %12, -112
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38
  store i64 %39, i64* %3, align 8, !alias.scope !2853, !noalias !2856
  store i64 %15, i64* %9, align 8, !alias.scope !2853, !noalias !2856
  %40 = tail call i64 @malloc(i64 48)
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %42 = load i64, i64* %3, align 8
  %43 = load i64, i64* %10, align 8
  %44 = add i64 %43, -48
  %45 = inttoptr i64 %44 to i64*
  store i64 %40, i64* %45
  %46 = add i64 %43, -56
  %47 = inttoptr i64 %46 to i64*
  store i64 0, i64* %47
  %48 = add i64 %43, -64
  %49 = inttoptr i64 %48 to i64*
  store i64 0, i64* %49
  %50 = add i64 %43, -72
  %51 = inttoptr i64 %50 to i64*
  store i64 1, i64* %51
  %52 = add i64 %43, -80
  %53 = inttoptr i64 %52 to i64*
  store i64 1, i64* %53
  %54 = inttoptr i64 %44 to i64*
  %55 = load i64, i64* %54
  %56 = add i64 %55, 16
  %57 = inttoptr i64 %56 to i64*
  store i64 2, i64* %57
  %58 = add i64 %42, 62
  %59 = load i64, i64* %9, align 8, !tbaa !1240
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %3, align 8, !alias.scope !2858, !noalias !2861
  store i64 %59, i64* %9, align 8, !alias.scope !2858, !noalias !2861
  %64 = tail call i64 @malloc(i64 16)
  %65 = load i64, i64* %3, align 8
  store i64 16, i64* %41, align 8, !tbaa !1240
  %66 = load i64, i64* %10, align 8
  %67 = add i64 %66, -48
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  %70 = inttoptr i64 %69 to i64*
  store i64 %64, i64* %70
  %71 = add i64 %65, 21
  %72 = load i64, i64* %9, align 8, !tbaa !1240
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %3, align 8, !alias.scope !2863, !noalias !2866
  store i64 %72, i64* %9, align 8, !alias.scope !2863, !noalias !2866
  %77 = tail call i64 @malloc(i64 16)
  %78 = load i64, i64* %10, align 8
  %79 = add i64 %78, -48
  %80 = load i64, i64* %3, align 8
  %81 = inttoptr i64 %79 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %82, 8
  %84 = inttoptr i64 %83 to i64*
  store i64 %77, i64* %84
  %85 = add i64 %78, -32
  %86 = add i64 %80, 16
  %87 = inttoptr i64 %85 to i64*
  store i64 0, i64* %87
  br label %block_401866

block_4019d4:                                     ; preds = %block_4019c9
  %88 = inttoptr i64 %583 to i64*
  %89 = load i64, i64* %88
  %90 = add i64 %89, 1
  %91 = inttoptr i64 %583 to i64*
  store i64 %90, i64* %91
  %92 = inttoptr i64 %587 to i64*
  %93 = load i64, i64* %92
  %94 = ashr i64 %93, 1
  %95 = inttoptr i64 %587 to i64*
  store i64 %94, i64* %95
  %96 = add i64 %218, -11
  br label %block_4019c9

block_401b7f.loopexit:                            ; preds = %block_401ab1
  br label %block_401b7f

block_401b7f:                                     ; preds = %block_401b64, %block_401b7f.loopexit
  %97 = phi i64 [ %222, %block_401b64 ], [ %641, %block_401b7f.loopexit ]
  %98 = phi i64 [ %219, %block_401b64 ], [ %591, %block_401b7f.loopexit ]
  %99 = phi %struct.Memory* [ %221, %block_401b64 ], [ %592, %block_401b7f.loopexit ]
  %100 = add i64 %98, -72
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101
  %103 = add i64 %102, -1
  %104 = icmp eq i64 %103, 0
  %105 = select i1 %104, i64 11, i64 40
  %106 = add i64 %97, %105
  br i1 %104, label %block_401b8a, label %block_401b7f.block_401ba7_crit_edge

block_401b7f.block_401ba7_crit_edge:              ; preds = %block_401b7f
  %107 = add i64 %98, -48
  %108 = add i64 %98, -32
  br label %block_401ba7

block_401878:                                     ; preds = %block_401866
  %109 = inttoptr i64 %429 to i64*
  %110 = load i64, i64* %109
  %111 = shl i64 %427, 3
  %112 = add i64 %110, %111
  %113 = inttoptr i64 %112 to i64*
  store i64 1, i64* %113
  %114 = inttoptr i64 %79 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = inttoptr i64 %85 to i64*
  %120 = load i64, i64* %119
  %121 = shl i64 %120, 3
  %122 = add i64 %118, %121
  %123 = inttoptr i64 %122 to i64*
  store i64 0, i64* %123
  %124 = inttoptr i64 %85 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %125, 1
  %127 = inttoptr i64 %85 to i64*
  store i64 %126, i64* %127
  %128 = add i64 %445, -18
  br label %block_401866

block_4019f1:                                     ; preds = %block_4019c9
  %129 = add i64 %218, 12
  %130 = load i64, i64* %9, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %3, align 8, !alias.scope !2868, !noalias !2871
  store i64 %130, i64* %9, align 8, !alias.scope !2868, !noalias !2871
  %135 = tail call i64 @malloc(i64 48)
  %136 = load i64, i64* %10, align 8
  %137 = add i64 %136, -48
  %138 = load i64, i64* %3, align 8
  %139 = inttoptr i64 %137 to i64*
  store i64 %135, i64* %139
  %140 = add i64 %136, -56
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = inttoptr i64 %137 to i64*
  %144 = load i64, i64* %143
  %145 = add i64 %144, 16
  %146 = inttoptr i64 %145 to i64*
  store i64 %142, i64* %146
  %147 = inttoptr i64 %140 to i64*
  %148 = load i64, i64* %147
  %149 = icmp eq i64 %148, 0
  %150 = select i1 %149, i64 27, i64 35
  %151 = add i64 %138, %150
  br i1 %149, label %block_401a18, label %block_401a20

block_401a69:                                     ; preds = %block_401a57
  %152 = inttoptr i64 %177 to i64*
  %153 = load i64, i64* %152
  %154 = shl i64 %175, 3
  %155 = add i64 %153, %154
  %156 = inttoptr i64 %155 to i64*
  store i64 1, i64* %156
  %157 = inttoptr i64 %385 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %158, 8
  %160 = inttoptr i64 %159 to i64*
  %161 = load i64, i64* %160
  %162 = inttoptr i64 %391 to i64*
  %163 = load i64, i64* %162
  %164 = shl i64 %163, 3
  %165 = add i64 %161, %164
  %166 = inttoptr i64 %165 to i64*
  store i64 0, i64* %166
  %167 = inttoptr i64 %391 to i64*
  %168 = load i64, i64* %167
  %169 = add i64 %168, 1
  %170 = inttoptr i64 %391 to i64*
  store i64 %169, i64* %170
  %171 = add i64 %193, -18
  br label %block_401a57

block_401a57:                                     ; preds = %block_401a20, %block_401a69
  %172 = phi i64 [ %392, %block_401a20 ], [ %171, %block_401a69 ]
  %173 = phi %struct.Memory* [ %356, %block_401a20 ], [ %173, %block_401a69 ]
  %174 = inttoptr i64 %391 to i64*
  %175 = load i64, i64* %174
  %176 = inttoptr i64 %385 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %177, 16
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = sub i64 %175, %180
  %182 = lshr i64 %181, 63
  %183 = trunc i64 %182 to i8
  %184 = lshr i64 %175, 63
  %185 = lshr i64 %180, 63
  %186 = xor i64 %185, %184
  %187 = xor i64 %182, %184
  %188 = add nuw nsw i64 %187, %186
  %189 = icmp eq i64 %188, 2
  %190 = icmp ne i8 %183, 0
  %191 = xor i1 %190, %189
  %192 = select i1 %191, i64 18, i64 74
  %193 = add i64 %172, %192
  br i1 %191, label %block_401a69, label %block_401aa1

block_401b4f:                                     ; preds = %block_401b12
  store i64 %527, i64* %8, align 8, !tbaa !1240
  store i64 %517, i64* %7, align 8, !tbaa !1240
  %194 = add i64 %498, -48
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %6, align 8, !tbaa !1240
  %197 = add i64 %498, -24
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %5, align 8, !tbaa !1240
  %200 = add i64 %553, -1391
  %201 = add i64 %553, 21
  %202 = load i64, i64* %9, align 8, !tbaa !1240
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204
  store i64 %203, i64* %9, align 8, !tbaa !1240
  %205 = tail call %struct.Memory* @sub_4015e0_ExtendFactors(%struct.State* nonnull %0, i64 %200, %struct.Memory* %502)
  %206 = load i64, i64* %3, align 8
  %207 = load i64, i64* %10, align 8
  br label %block_401b64

block_4019c9:                                     ; preds = %block_4019b9, %block_4019d4
  %208 = phi i64 [ %588, %block_4019b9 ], [ %96, %block_4019d4 ]
  %209 = phi %struct.Memory* [ %396, %block_4019b9 ], [ %209, %block_4019d4 ]
  %210 = inttoptr i64 %587 to i64*
  %211 = load i64, i64* %210
  %212 = icmp eq i64 %211, 0
  %213 = lshr i64 %211, 63
  %214 = trunc i64 %213 to i8
  %215 = icmp ne i8 %214, 0
  %216 = or i1 %212, %215
  %217 = select i1 %216, i64 40, i64 11
  %218 = add i64 %208, %217
  br i1 %216, label %block_4019f1, label %block_4019d4

block_401b64:                                     ; preds = %block_401b2d, %block_401b4f
  %219 = phi i64 [ %207, %block_401b4f ], [ %498, %block_401b2d ]
  %220 = phi i64 [ %206, %block_401b4f ], [ %654, %block_401b2d ]
  %221 = phi %struct.Memory* [ %205, %block_401b4f ], [ %502, %block_401b2d ]
  %222 = add i64 %220, 27
  br label %block_401b7f

block_401936:                                     ; preds = %block_401924
  %223 = shl i64 %330, 3
  %224 = add i64 %350, %223
  %225 = inttoptr i64 %224 to i64*
  store i64 1, i64* %225
  %226 = inttoptr i64 %293 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %227, 8
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = inttoptr i64 %299 to i64*
  %232 = load i64, i64* %231
  %233 = shl i64 %232, 3
  %234 = add i64 %230, %233
  %235 = inttoptr i64 %234 to i64*
  store i64 0, i64* %235
  %236 = inttoptr i64 %299 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %237, 1
  %239 = inttoptr i64 %299 to i64*
  store i64 %238, i64* %239
  %240 = add i64 %348, -18
  br label %block_401924

block_4018b0:                                     ; preds = %block_401866
  %241 = inttoptr i64 %429 to i64*
  %242 = load i64, i64* %241
  %243 = inttoptr i64 %242 to i64*
  store i64 2, i64* %243
  %244 = inttoptr i64 %79 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %245, 8
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = inttoptr i64 %248 to i64*
  store i64 1, i64* %249
  %250 = inttoptr i64 %79 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %78, -24
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = add i64 %254, 16
  %256 = inttoptr i64 %255 to i64*
  store i64 %251, i64* %256
  %257 = add i64 %445, 53
  %258 = load i64, i64* %9, align 8, !tbaa !1240
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260
  %261 = inttoptr i64 %259 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %3, align 8, !alias.scope !2873, !noalias !2876
  store i64 %258, i64* %9, align 8, !alias.scope !2873, !noalias !2876
  %263 = tail call i64 @malloc(i64 48)
  %264 = load i64, i64* %3, align 8
  %265 = load i64, i64* %10, align 8
  %266 = add i64 %265, -48
  %267 = inttoptr i64 %266 to i64*
  store i64 %263, i64* %267
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268
  %270 = add i64 %269, 16
  %271 = inttoptr i64 %270 to i64*
  store i64 2, i64* %271
  %272 = add i64 %264, 28
  %273 = load i64, i64* %9, align 8, !tbaa !1240
  %274 = add i64 %273, -8
  %275 = inttoptr i64 %274 to i64*
  store i64 %272, i64* %275
  %276 = inttoptr i64 %274 to i64*
  %277 = load i64, i64* %276
  store i64 %277, i64* %3, align 8, !alias.scope !2878, !noalias !2881
  store i64 %273, i64* %9, align 8, !alias.scope !2878, !noalias !2881
  %278 = tail call i64 @malloc(i64 16)
  %279 = load i64, i64* %3, align 8
  store i64 16, i64* %7, align 8, !tbaa !1240
  store i64 16, i64* %8, align 8, !tbaa !1240
  %280 = load i64, i64* %10, align 8
  %281 = add i64 %280, -48
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = inttoptr i64 %283 to i64*
  store i64 %278, i64* %284
  %285 = add i64 %279, 19
  %286 = load i64, i64* %9, align 8, !tbaa !1240
  %287 = add i64 %286, -8
  %288 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %288
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %3, align 8, !alias.scope !2883, !noalias !2886
  store i64 %286, i64* %9, align 8, !alias.scope !2883, !noalias !2886
  %291 = tail call i64 @malloc(i64 16)
  %292 = load i64, i64* %10, align 8
  %293 = add i64 %292, -48
  %294 = load i64, i64* %3, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %296, 8
  %298 = inttoptr i64 %297 to i64*
  store i64 %291, i64* %298
  %299 = add i64 %292, -32
  %300 = add i64 %294, 16
  %301 = inttoptr i64 %299 to i64*
  store i64 0, i64* %301
  br label %block_401924

block_401b69:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %302 = add i64 %498, -40
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = add i64 %304, 1
  %306 = inttoptr i64 %302 to i64*
  store i64 %305, i64* %306
  %307 = add i64 %510, -184
  br label %block_401ab1

block_401ba7:                                     ; preds = %block_401b8a, %block_401b7f.block_401ba7_crit_edge
  %308 = phi i64 [ %108, %block_401b7f.block_401ba7_crit_edge ], [ %655, %block_401b8a ]
  %309 = phi i64 [ %107, %block_401b7f.block_401ba7_crit_edge ], [ %658, %block_401b8a ]
  %310 = phi i64 [ %106, %block_401b7f.block_401ba7_crit_edge ], [ %669, %block_401b8a ]
  %311 = phi %struct.Memory* [ %99, %block_401b7f.block_401ba7_crit_edge ], [ %99, %block_401b8a ]
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312
  %314 = add i64 %98, -24
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  %317 = inttoptr i64 %308 to i64*
  %318 = load i64, i64* %317
  %319 = shl i64 %318, 3
  %320 = add i64 %319, %316
  %321 = inttoptr i64 %320 to i64*
  store i64 %313, i64* %321
  %322 = inttoptr i64 %308 to i64*
  %323 = load i64, i64* %322
  %324 = add i64 %323, 1
  %325 = inttoptr i64 %308 to i64*
  store i64 %324, i64* %325
  %326 = add i64 %310, -520
  br label %block_40199f

block_401924:                                     ; preds = %block_4018b0, %block_401936
  %327 = phi i64 [ %300, %block_4018b0 ], [ %240, %block_401936 ]
  %328 = phi %struct.Memory* [ %425, %block_4018b0 ], [ %328, %block_401936 ]
  %329 = inttoptr i64 %299 to i64*
  %330 = load i64, i64* %329
  %331 = inttoptr i64 %293 to i64*
  %332 = load i64, i64* %331
  %333 = add i64 %332, 16
  %334 = inttoptr i64 %333 to i64*
  %335 = load i64, i64* %334
  %336 = sub i64 %330, %335
  %337 = lshr i64 %336, 63
  %338 = trunc i64 %337 to i8
  %339 = lshr i64 %330, 63
  %340 = lshr i64 %335, 63
  %341 = xor i64 %340, %339
  %342 = xor i64 %337, %339
  %343 = add nuw nsw i64 %342, %341
  %344 = icmp eq i64 %343, 2
  %345 = icmp ne i8 %338, 0
  %346 = xor i1 %345, %344
  %347 = select i1 %346, i64 18, i64 74
  %348 = add i64 %327, %347
  %349 = inttoptr i64 %332 to i64*
  %350 = load i64, i64* %349
  br i1 %346, label %block_401936, label %block_40196e

block_401aa1:                                     ; preds = %block_401a57
  %351 = add i64 %384, -72
  %352 = inttoptr i64 %351 to i64*
  store i64 1, i64* %352
  %353 = add i64 %193, 16
  %354 = inttoptr i64 %391 to i64*
  store i64 0, i64* %354
  br label %block_401ab1

block_401a20:                                     ; preds = %block_401a18, %block_4019f1
  %355 = phi i64 [ %151, %block_4019f1 ], [ %446, %block_401a18 ]
  %356 = phi %struct.Memory* [ %209, %block_4019f1 ], [ %209, %block_401a18 ]
  %357 = inttoptr i64 %140 to i64*
  %358 = load i64, i64* %357
  %359 = shl i64 %358, 3
  %360 = add i64 %355, 16
  %361 = load i64, i64* %9, align 8, !tbaa !1240
  %362 = add i64 %361, -8
  %363 = inttoptr i64 %362 to i64*
  store i64 %360, i64* %363
  %364 = inttoptr i64 %362 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %3, align 8, !alias.scope !2888, !noalias !2891
  store i64 %361, i64* %9, align 8, !alias.scope !2888, !noalias !2891
  %366 = tail call i64 @malloc(i64 %359)
  %367 = load i64, i64* %10, align 8
  %368 = add i64 %367, -48
  %369 = load i64, i64* %3, align 8
  %370 = inttoptr i64 %368 to i64*
  %371 = load i64, i64* %370
  %372 = inttoptr i64 %371 to i64*
  store i64 %366, i64* %372
  %373 = add i64 %367, -56
  %374 = inttoptr i64 %373 to i64*
  %375 = load i64, i64* %374
  %376 = shl i64 %375, 3
  %377 = add i64 %369, 23
  %378 = load i64, i64* %9, align 8, !tbaa !1240
  %379 = add i64 %378, -8
  %380 = inttoptr i64 %379 to i64*
  store i64 %377, i64* %380
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381
  store i64 %382, i64* %3, align 8, !alias.scope !2893, !noalias !2896
  store i64 %378, i64* %9, align 8, !alias.scope !2893, !noalias !2896
  %383 = tail call i64 @malloc(i64 %376)
  %384 = load i64, i64* %10, align 8
  %385 = add i64 %384, -48
  %386 = load i64, i64* %3, align 8
  %387 = inttoptr i64 %385 to i64*
  %388 = load i64, i64* %387
  store i64 %388, i64* %8, align 8, !tbaa !1240
  %389 = add i64 %388, 8
  %390 = inttoptr i64 %389 to i64*
  store i64 %383, i64* %390
  %391 = add i64 %384, -40
  %392 = add i64 %386, 16
  %393 = inttoptr i64 %391 to i64*
  store i64 0, i64* %393
  br label %block_401a57

block_40199f:                                     ; preds = %block_40196e, %block_401ba7
  %394 = phi i64 [ %462, %block_40196e ], [ %326, %block_401ba7 ]
  %395 = phi i64 [ %292, %block_40196e ], [ %98, %block_401ba7 ]
  %396 = phi %struct.Memory* [ %328, %block_40196e ], [ %311, %block_401ba7 ]
  %397 = add i64 %395, -32
  %398 = inttoptr i64 %397 to i64*
  %399 = load i64, i64* %398
  store i64 %399, i64* %4, align 8, !tbaa !1240
  %400 = add i64 %395, -16
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %5, align 8, !tbaa !1240
  %403 = add i64 %395, -8
  %404 = inttoptr i64 %403 to i64*
  %405 = load i64, i64* %404
  %406 = add i64 %405, -1
  store i64 %406, i64* %6, align 8, !tbaa !1240
  %407 = shl i64 %406, 3
  %408 = add i64 %407, %402
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = sub i64 %399, %410
  %412 = lshr i64 %411, 63
  %413 = trunc i64 %412 to i8
  %414 = lshr i64 %399, 63
  %415 = lshr i64 %410, 63
  %416 = xor i64 %415, %414
  %417 = xor i64 %412, %414
  %418 = add nuw nsw i64 %417, %416
  %419 = icmp eq i64 %418, 2
  %420 = icmp ne i8 %413, 0
  %421 = xor i1 %420, %419
  %422 = select i1 %421, i64 26, i64 553
  %423 = add i64 %394, %422
  br i1 %421, label %block_4019b9, label %block_401bc8

block_401866:                                     ; preds = %block_401878, %block_4017d0
  %424 = phi i64 [ %86, %block_4017d0 ], [ %128, %block_401878 ]
  %425 = phi %struct.Memory* [ %2, %block_4017d0 ], [ %425, %block_401878 ]
  %426 = inttoptr i64 %85 to i64*
  %427 = load i64, i64* %426
  %428 = inttoptr i64 %79 to i64*
  %429 = load i64, i64* %428
  %430 = add i64 %429, 16
  %431 = inttoptr i64 %430 to i64*
  %432 = load i64, i64* %431
  %433 = sub i64 %427, %432
  %434 = lshr i64 %433, 63
  %435 = trunc i64 %434 to i8
  %436 = lshr i64 %427, 63
  %437 = lshr i64 %432, 63
  %438 = xor i64 %437, %436
  %439 = xor i64 %434, %436
  %440 = add nuw nsw i64 %439, %438
  %441 = icmp eq i64 %440, 2
  %442 = icmp ne i8 %435, 0
  %443 = xor i1 %442, %441
  %444 = select i1 %443, i64 18, i64 74
  %445 = add i64 %424, %444
  br i1 %443, label %block_401878, label %block_4018b0

block_401a18:                                     ; preds = %block_4019f1
  %446 = add i64 %151, 8
  %447 = inttoptr i64 %140 to i64*
  store i64 1, i64* %447
  br label %block_401a20

block_40196e:                                     ; preds = %block_401924
  %448 = inttoptr i64 %350 to i64*
  store i64 3, i64* %448
  %449 = inttoptr i64 %293 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %450, 8
  %452 = inttoptr i64 %451 to i64*
  %453 = load i64, i64* %452
  %454 = inttoptr i64 %453 to i64*
  store i64 1, i64* %454
  %455 = inttoptr i64 %293 to i64*
  %456 = load i64, i64* %455
  %457 = add i64 %292, -24
  %458 = inttoptr i64 %457 to i64*
  %459 = load i64, i64* %458
  %460 = add i64 %459, 24
  %461 = inttoptr i64 %460 to i64*
  store i64 %456, i64* %461
  %462 = add i64 %348, 49
  %463 = inttoptr i64 %299 to i64*
  store i64 0, i64* %463
  br label %block_40199f

block_401ad4:                                     ; preds = %block_401ab1
  %464 = add i64 %591, -80
  %465 = inttoptr i64 %464 to i64*
  store i64 %602, i64* %465
  %466 = inttoptr i64 %610 to i64*
  %467 = load i64, i64* %466
  %468 = inttoptr i64 %464 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %5, align 8, !tbaa !1240
  %470 = add i64 %591, -88
  %471 = inttoptr i64 %470 to i64*
  store i64 %467, i64* %471
  store i64 %467, i64* %4, align 8, !tbaa !1240
  %472 = ashr i64 %467, 63
  store i64 %472, i64* %6, align 8, !tbaa !1240
  %473 = add i64 %641, 41
  store i64 %473, i64* %3, align 8
  %474 = inttoptr i64 %464 to i64*
  %475 = load i64, i64* %474
  %476 = sext i64 %475 to i128
  %477 = and i128 %476, -18446744073709551616
  %478 = zext i64 %472 to i128
  %479 = shl nuw i128 %478, 64
  %480 = zext i64 %467 to i128
  %481 = or i128 %480, %479
  %482 = zext i64 %475 to i128
  %483 = or i128 %477, %482
  %484 = sdiv i128 %481, %483
  %485 = trunc i128 %484 to i64
  %486 = and i128 %484, 18446744073709551615
  %487 = sext i64 %485 to i128
  %488 = and i128 %487, -18446744073709551616
  %489 = or i128 %488, %486
  %490 = icmp eq i128 %484, %489
  br i1 %490, label %497, label %491

; <label>:491:                                    ; preds = %block_401ad4
  %492 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %473, %struct.Memory* %592) #14
  %493 = load i64, i64* %5, align 8
  %494 = load i64, i64* %4, align 8
  %495 = load i64, i64* %3, align 8
  %496 = load i64, i64* %10, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:497:                                    ; preds = %block_401ad4
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %497, %491
  %498 = phi i64 [ %496, %491 ], [ %591, %497 ]
  %499 = phi i64 [ %495, %491 ], [ %473, %497 ]
  %500 = phi i64 [ %494, %491 ], [ %485, %497 ]
  %501 = phi i64 [ %493, %491 ], [ %469, %497 ]
  %502 = phi %struct.Memory* [ %492, %491 ], [ %592, %497 ]
  %503 = mul i64 %500, %501
  %504 = add i64 %498, -88
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = sub i64 %506, %503
  %508 = icmp eq i64 %507, 0
  %509 = select i1 %508, i64 21, i64 108
  %510 = add i64 %499, %509
  br i1 %508, label %block_401b12, label %block_401b69

block_401b12:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %511 = add i64 %498, -80
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %498, -72
  %515 = inttoptr i64 %514 to i64*
  store i64 %513, i64* %515
  %516 = inttoptr i64 %511 to i64*
  %517 = load i64, i64* %516
  %518 = sext i64 %517 to i128
  %519 = and i128 %518, -18446744073709551616
  %520 = zext i64 %517 to i128
  %521 = or i128 %519, %520
  %522 = mul nsw i128 %521, %521
  %523 = trunc i128 %522 to i64
  %524 = lshr i64 %523, 63
  %525 = add i64 %498, -32
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = sub i64 %523, %527
  %529 = icmp ult i64 %523, %527
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %16, align 1, !tbaa !1264
  %531 = trunc i64 %528 to i32
  %532 = and i32 %531, 255
  %533 = tail call i32 @llvm.ctpop.i32(i32 %532) #10
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  store i8 %536, i8* %17, align 1, !tbaa !1278
  %537 = xor i64 %527, %523
  %538 = xor i64 %537, %528
  %539 = lshr i64 %538, 4
  %540 = trunc i64 %539 to i8
  %541 = and i8 %540, 1
  store i8 %541, i8* %18, align 1, !tbaa !1279
  %542 = icmp eq i64 %528, 0
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %19, align 1, !tbaa !1280
  %544 = lshr i64 %528, 63
  %545 = trunc i64 %544 to i8
  store i8 %545, i8* %20, align 1, !tbaa !1281
  %546 = lshr i64 %527, 63
  %547 = xor i64 %546, %524
  %548 = xor i64 %544, %524
  %549 = add nuw nsw i64 %548, %547
  %550 = icmp eq i64 %549, 2
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %21, align 1, !tbaa !1282
  %552 = select i1 %542, i64 27, i64 61
  %553 = add i64 %510, %552
  br i1 %542, label %block_401b2d, label %block_401b4f

block_401bc8:                                     ; preds = %block_40199f
  %554 = load i64, i64* %9, align 8
  %555 = add i64 %554, 96
  %556 = icmp ugt i64 %554, -97
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %16, align 1, !tbaa !1264
  %558 = trunc i64 %555 to i32
  %559 = and i32 %558, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559) #10
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %17, align 1, !tbaa !1278
  %564 = xor i64 %555, %554
  %565 = lshr i64 %564, 4
  %566 = trunc i64 %565 to i8
  %567 = and i8 %566, 1
  store i8 %567, i8* %18, align 1, !tbaa !1279
  %568 = icmp eq i64 %555, 0
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %19, align 1, !tbaa !1280
  %570 = lshr i64 %555, 63
  %571 = trunc i64 %570 to i8
  store i8 %571, i8* %20, align 1, !tbaa !1281
  %572 = lshr i64 %554, 63
  %573 = xor i64 %570, %572
  %574 = add nuw nsw i64 %573, %570
  %575 = icmp eq i64 %574, 2
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %21, align 1, !tbaa !1282
  %577 = add i64 %554, 104
  %578 = inttoptr i64 %555 to i64*
  %579 = load i64, i64* %578
  store i64 %579, i64* %10, align 8, !tbaa !1240
  %580 = inttoptr i64 %577 to i64*
  %581 = load i64, i64* %580
  store i64 %581, i64* %3, align 8, !tbaa !1240
  %582 = add i64 %554, 112
  store i64 %582, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %396

block_4019b9:                                     ; preds = %block_40199f
  %583 = add i64 %395, -56
  %584 = inttoptr i64 %583 to i64*
  store i64 0, i64* %584
  %585 = inttoptr i64 %397 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %395, -64
  %588 = add i64 %423, 16
  %589 = inttoptr i64 %587 to i64*
  store i64 %586, i64* %589
  br label %block_4019c9

block_401ab1:                                     ; preds = %block_401aa1, %block_401b69
  %590 = phi i64 [ %353, %block_401aa1 ], [ %307, %block_401b69 ]
  %591 = phi i64 [ %384, %block_401aa1 ], [ %498, %block_401b69 ]
  %592 = phi %struct.Memory* [ %173, %block_401aa1 ], [ %502, %block_401b69 ]
  %593 = add i64 %591, -16
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %591, -40
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = shl i64 %598, 3
  %600 = add i64 %595, %599
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = sext i64 %602 to i128
  %604 = and i128 %603, -18446744073709551616
  %605 = zext i64 %602 to i128
  %606 = or i128 %604, %605
  %607 = mul nsw i128 %606, %606
  %608 = trunc i128 %607 to i64
  %609 = lshr i64 %608, 63
  %610 = add i64 %591, -32
  %611 = inttoptr i64 %610 to i64*
  %612 = load i64, i64* %611
  %613 = sub i64 %608, %612
  %614 = icmp ult i64 %608, %612
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %16, align 1, !tbaa !1264
  %616 = trunc i64 %613 to i32
  %617 = and i32 %616, 255
  %618 = tail call i32 @llvm.ctpop.i32(i32 %617) #10
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  store i8 %621, i8* %17, align 1, !tbaa !1278
  %622 = xor i64 %612, %608
  %623 = xor i64 %622, %613
  %624 = lshr i64 %623, 4
  %625 = trunc i64 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %18, align 1, !tbaa !1279
  %627 = icmp eq i64 %613, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %19, align 1, !tbaa !1280
  %629 = lshr i64 %613, 63
  %630 = trunc i64 %629 to i8
  store i8 %630, i8* %20, align 1, !tbaa !1281
  %631 = lshr i64 %612, 63
  %632 = xor i64 %631, %609
  %633 = xor i64 %629, %609
  %634 = add nuw nsw i64 %633, %632
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %21, align 1, !tbaa !1282
  %637 = icmp ne i8 %630, 0
  %638 = xor i1 %637, %635
  %639 = or i1 %627, %638
  %640 = select i1 %639, i64 35, i64 206
  %641 = add i64 %590, %640
  br i1 %639, label %block_401ad4, label %block_401b7f.loopexit

block_401b2d:                                     ; preds = %block_401b12
  %642 = add i64 %498, -48
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  %647 = inttoptr i64 %646 to i64*
  store i64 %517, i64* %647
  %648 = inttoptr i64 %642 to i64*
  %649 = load i64, i64* %648
  %650 = add i64 %649, 8
  %651 = inttoptr i64 %650 to i64*
  %652 = load i64, i64* %651
  %653 = inttoptr i64 %652 to i64*
  store i64 2, i64* %653
  %654 = add i64 %553, 55
  br label %block_401b64

block_401b8a:                                     ; preds = %block_401b7f
  %655 = add i64 %98, -32
  %656 = inttoptr i64 %655 to i64*
  %657 = load i64, i64* %656
  %658 = add i64 %98, -48
  %659 = inttoptr i64 %658 to i64*
  %660 = load i64, i64* %659
  %661 = inttoptr i64 %660 to i64*
  %662 = load i64, i64* %661
  %663 = inttoptr i64 %662 to i64*
  store i64 %657, i64* %663
  %664 = inttoptr i64 %658 to i64*
  %665 = load i64, i64* %664
  %666 = add i64 %665, 8
  %667 = inttoptr i64 %666 to i64*
  %668 = load i64, i64* %667
  %669 = add i64 %106, 29
  %670 = inttoptr i64 %668 to i64*
  store i64 1, i64* %670
  br label %block_401ba7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b60__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400b60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_60eff0__got_type* @seg_60eff0__got to i64), i64 8) to i64*)
  store i64 %14, i64* %4, align 8, !tbaa !1240
  store i8 0, i8* %8, align 1, !tbaa !1264
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %9, align 1, !tbaa !1278
  %21 = icmp eq i64 %14, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %11, align 1, !tbaa !1280
  %23 = lshr i64 %14, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %12, align 1, !tbaa !1281
  store i8 0, i8* %13, align 1, !tbaa !1282
  store i8 0, i8* %10, align 1, !tbaa !1279
  %25 = select i1 %21, i64 18, i64 16
  %26 = add i64 %25, %1
  br i1 %21, label %block_400b72, label %block_400b70

block_400b72:                                     ; preds = %block_400b70, %block_400b60
  %27 = phi i64 [ %7, %block_400b60 ], [ %58, %block_400b70 ]
  %28 = phi %struct.Memory* [ %2, %block_400b60 ], [ %57, %block_400b70 ]
  %29 = add i64 %27, 8
  %30 = icmp ugt i64 %27, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %8, align 1, !tbaa !1264
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #10
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %9, align 1, !tbaa !1278
  %38 = xor i64 %29, %27
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %10, align 1, !tbaa !1279
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %11, align 1, !tbaa !1280
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %12, align 1, !tbaa !1281
  %46 = lshr i64 %27, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %13, align 1, !tbaa !1282
  %51 = inttoptr i64 %29 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %3, align 8, !tbaa !1240
  %53 = add i64 %27, 16
  store i64 %53, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %28

block_400b70:                                     ; preds = %block_400b60
  %54 = add i64 %26, 2
  %55 = add i64 %6, -16
  %56 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %56
  store i64 %55, i64* %5, align 8, !tbaa !1240
  store i64 %14, i64* %3, align 8, !tbaa !1240
  %57 = tail call %struct.Memory* @__mcsema_detach_call_value(%struct.State* nonnull %0, i64 %14, %struct.Memory* %2)
  %58 = load i64, i64* %5, align 8
  br label %block_400b72
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b94(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402b94:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = load i64, i64* %13, align 8
  %16 = add i64 %15, -56
  %17 = inttoptr i64 %16 to i64*
  store i64 ptrtoint (%adcexpB_type* @adcexpB to i64), i64* %17
  %18 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = icmp eq i32 %18, 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %26 = select i1 %22, i64 28, i64 368
  %27 = add i64 %26, %1
  br i1 %22, label %block_402bb0, label %block_402b94.block_402d04_crit_edge

block_402b94.block_402d04_crit_edge:              ; preds = %block_402b94
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402d04

block_402df9:                                     ; preds = %block_402d23
  %29 = add i64 %433, 7
  %30 = inttoptr i64 %415 to i32*
  store i32 0, i32* %30
  br label %block_402e00

block_402c77:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2, %block_402c54
  %31 = phi i64 [ %107, %block_402c54 ], [ %567, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %32 = phi i64 [ %101, %block_402c54 ], [ %557, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %33 = phi %struct.Memory* [ %122, %block_402c54 ], [ %498, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ]
  %34 = add i64 %32, -40
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35
  %37 = add i64 %32, -8
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38
  %40 = sub i32 %36, %39
  %41 = lshr i32 %40, 31
  %42 = trunc i32 %41 to i8
  %43 = lshr i32 %36, 31
  %44 = lshr i32 %39, 31
  %45 = xor i32 %44, %43
  %46 = xor i32 %41, %43
  %47 = add nuw nsw i32 %46, %45
  %48 = icmp eq i32 %47, 2
  %49 = icmp ne i8 %42, 0
  %50 = xor i1 %49, %48
  %51 = select i1 %50, i64 12, i64 136
  %52 = add i64 %31, %51
  br i1 %50, label %block_402c83, label %block_402cff

block_402dd5:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1
  %53 = trunc i64 %692 to i32
  %54 = and i64 %692, 4294967295
  store i64 %54, i64* %8, align 8, !tbaa !1240
  %55 = add i64 %711, 17
  %56 = inttoptr i64 %693 to i32*
  store i32 %53, i32* %56
  br label %block_402de6

block_402c54:                                     ; preds = %block_402bb7
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64* %10, align 8, !tbaa !1240
  %57 = load i64, i64* @stdout
  store i64 %57, i64* %11, align 8, !tbaa !1240
  %58 = add i64 %141, 25
  %59 = load i64, i64* %12, align 8, !tbaa !1240
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %65 = load i64, i64* %234, align 8, !alias.scope !2898, !noalias !2901
  %66 = load i64, i64* %62, align 8, !alias.scope !2898, !noalias !2901
  %67 = load i64, i64* %14, align 8, !alias.scope !2898, !noalias !2901
  %68 = load i64, i64* %64, align 8, !alias.scope !2898, !noalias !2901
  %69 = inttoptr i64 %59 to i64*
  %70 = load i64, i64* %69
  %71 = add i64 %59, 8
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  %74 = add i64 %59, 16
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75
  %77 = add i64 %59, 24
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78
  %80 = add i64 %59, 32
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %59, 40
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %59, 48
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %59, 56
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  %92 = add i64 %59, 64
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  %95 = add i64 %59, 72
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96
  %98 = inttoptr i64 %60 to i64*
  %99 = load i64, i64* %98
  store i64 %99, i64* %3, align 8, !alias.scope !2898, !noalias !2901
  store i64 %59, i64* %12, align 8, !alias.scope !2898, !noalias !2901
  %100 = tail call i64 @fprintf(i64 %57, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64 %65, i64 %66, i64 %67, i64 %68, i64 %70, i64 %73, i64 %76, i64 %79, i64 %82, i64 %85, i64 %88, i64 %91, i64 %94, i64 %97), !noalias !2898
  %101 = load i64, i64* %13, align 8
  %102 = add i64 %101, -40
  %103 = load i64, i64* %3, align 8
  %104 = inttoptr i64 %102 to i32*
  store i32 0, i32* %104
  %105 = add i64 %101, -88
  %106 = trunc i64 %100 to i32
  %107 = add i64 %103, 10
  %108 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %108
  br label %block_402c77

block_402bc3:                                     ; preds = %block_402bb7
  %109 = sext i32 %125 to i64
  %110 = shl nsw i64 %109, 3
  %111 = add i64 %110, ptrtoint (%adcgen_type* @adcgen to i64)
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = trunc i64 %113 to i32
  %115 = add i64 %121, -60
  %116 = inttoptr i64 %115 to i32*
  store i32 %114, i32* %116
  %117 = add i64 %121, -44
  %118 = add i64 %141, 24
  %119 = inttoptr i64 %117 to i32*
  store i32 0, i32* %119
  br label %block_402bdb

block_402bb7:                                     ; preds = %block_402bb0, %block_402c36
  %120 = phi i64 [ %232, %block_402bb0 ], [ %230, %block_402c36 ]
  %121 = phi i64 [ %15, %block_402bb0 ], [ %347, %block_402c36 ]
  %122 = phi %struct.Memory* [ %2, %block_402bb0 ], [ %348, %block_402c36 ]
  %123 = add i64 %121, -40
  %124 = inttoptr i64 %123 to i32*
  %125 = load i32, i32* %124
  %126 = add i64 %121, -8
  %127 = inttoptr i64 %126 to i32*
  %128 = load i32, i32* %127
  %129 = sub i32 %125, %128
  %130 = lshr i32 %129, 31
  %131 = trunc i32 %130 to i8
  %132 = lshr i32 %125, 31
  %133 = lshr i32 %128, 31
  %134 = xor i32 %133, %132
  %135 = xor i32 %130, %132
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = icmp ne i8 %131, 0
  %139 = xor i1 %138, %137
  %140 = select i1 %139, i64 12, i64 157
  %141 = add i64 %120, %140
  br i1 %139, label %block_402bc3, label %block_402c54

block_402bf8:                                     ; preds = %block_402bdb
  %142 = add i64 %360, ptrtoint (%adcgen_type* @adcgen to i64)
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  %145 = add i64 %347, -60
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146
  %148 = sext i32 %147 to i64
  %149 = sext i32 %147 to i128
  %150 = and i128 %149, -18446744073709551616
  %151 = sext i64 %144 to i128
  %152 = and i128 %151, -18446744073709551616
  %153 = zext i64 %148 to i128
  %154 = or i128 %150, %153
  %155 = zext i64 %144 to i128
  %156 = or i128 %152, %155
  %157 = mul nsw i128 %156, %154
  %158 = trunc i128 %157 to i64
  %159 = sext i64 %158 to i128
  %160 = icmp ne i128 %159, %157
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %19, align 1, !tbaa !1264
  %162 = trunc i128 %157 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #10
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %168 = lshr i64 %158, 63
  %169 = trunc i64 %168 to i8
  store i8 %169, i8* %24, align 1, !tbaa !1281
  store i8 %161, i8* %25, align 1, !tbaa !1282
  %170 = trunc i128 %157 to i32
  %171 = inttoptr i64 %145 to i32*
  store i32 %170, i32* %171
  %172 = inttoptr i64 %145 to i32*
  %173 = load i32, i32* %172
  %174 = sext i32 %173 to i64
  store i64 %174, i64* %7, align 8, !tbaa !1240
  %175 = inttoptr i64 %356 to i32*
  %176 = load i32, i32* %175
  %177 = sext i32 %176 to i64
  store i64 %177, i64* %8, align 8, !tbaa !1240
  %178 = ashr i64 %174, 63
  store i64 %178, i64* %234, align 8, !tbaa !1240
  %179 = shl nsw i64 %177, 3
  %180 = add i64 %179, ptrtoint (%adcprime_type* @adcprime to i64)
  %181 = add i64 %377, 43
  store i64 %181, i64* %3, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182
  %184 = sext i64 %183 to i128
  %185 = and i128 %184, -18446744073709551616
  %186 = zext i64 %178 to i128
  %187 = shl nuw i128 %186, 64
  %188 = zext i64 %174 to i128
  %189 = or i128 %187, %188
  %190 = zext i64 %183 to i128
  %191 = or i128 %185, %190
  %192 = sdiv i128 %189, %191
  %193 = trunc i128 %192 to i64
  %194 = and i128 %192, 18446744073709551615
  %195 = sext i64 %193 to i128
  %196 = and i128 %195, -18446744073709551616
  %197 = or i128 %196, %194
  %198 = icmp eq i128 %192, %197
  br i1 %198, label %204, label %199

; <label>:199:                                    ; preds = %block_402bf8
  %200 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %181, %struct.Memory* %348) #14
  %201 = load i32, i32* %6, align 4
  %202 = load i64, i64* %3, align 8
  %203 = load i64, i64* %13, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:204:                                    ; preds = %block_402bf8
  %205 = srem i128 %189, %191
  %206 = trunc i128 %205 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %204, %199
  %207 = phi i64 [ %203, %199 ], [ %347, %204 ]
  %208 = phi i64 [ %202, %199 ], [ %181, %204 ]
  %209 = phi i32 [ %201, %199 ], [ %206, %204 ]
  %210 = phi %struct.Memory* [ %200, %199 ], [ %348, %204 ]
  %211 = zext i32 %209 to i64
  store i64 %211, i64* %10, align 8, !tbaa !1240
  %212 = add i64 %207, -60
  %213 = inttoptr i64 %212 to i32*
  store i32 %209, i32* %213
  %214 = add i64 %207, -44
  %215 = inttoptr i64 %214 to i32*
  %216 = load i32, i32* %215
  %217 = add i32 %216, 1
  %218 = inttoptr i64 %214 to i32*
  store i32 %217, i32* %218
  %219 = add i64 %208, -72
  br label %block_402bdb

block_402c36:                                     ; preds = %block_402bdb
  %220 = add i64 %347, -60
  %221 = inttoptr i64 %220 to i32*
  %222 = load i32, i32* %221
  %223 = sext i32 %222 to i64
  store i64 %359, i64* %8, align 8, !tbaa !1240
  %224 = add i64 %360, ptrtoint (%adcgen_type* @adcgen to i64)
  %225 = inttoptr i64 %224 to i64*
  store i64 %223, i64* %225
  %226 = inttoptr i64 %356 to i32*
  %227 = load i32, i32* %226
  %228 = add i32 %227, 1
  %229 = inttoptr i64 %356 to i32*
  store i32 %228, i32* %229
  %230 = add i64 %377, -127
  br label %block_402bb7

block_402bb0:                                     ; preds = %block_402b94
  %231 = add i64 %15, -40
  %232 = add i64 %27, 7
  %233 = inttoptr i64 %231 to i32*
  store i32 0, i32* %233
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402bb7

block_402e0c:                                     ; preds = %block_402e00
  %235 = sext i32 %717 to i64
  %236 = shl nsw i64 %235, 3
  %237 = add i64 %236, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %713, -48
  %241 = inttoptr i64 %240 to i32*
  %242 = load i32, i32* %241
  %243 = sext i32 %242 to i64
  %244 = sext i64 %239 to i128
  %245 = and i128 %244, -18446744073709551616
  %246 = sext i32 %242 to i128
  %247 = and i128 %246, -18446744073709551616
  %248 = zext i64 %239 to i128
  %249 = or i128 %245, %248
  %250 = zext i64 %243 to i128
  %251 = or i128 %247, %250
  %252 = mul nsw i128 %249, %251
  %253 = trunc i128 %252 to i64
  %254 = sext i64 %253 to i128
  %255 = icmp ne i128 %254, %252
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %19, align 1, !tbaa !1264
  %257 = trunc i128 %252 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #10
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %263 = lshr i64 %253, 63
  %264 = trunc i64 %263 to i8
  store i8 %264, i8* %24, align 1, !tbaa !1281
  store i8 %256, i8* %25, align 1, !tbaa !1282
  %265 = add i64 %713, -32
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %236, %267
  %269 = inttoptr i64 %268 to i64*
  store i64 %253, i64* %269
  %270 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%adcgen_type* @adcgen to i64), i64 160) to i32*)
  %271 = sext i32 %270 to i64
  %272 = inttoptr i64 %265 to i64*
  %273 = load i64, i64* %272
  %274 = inttoptr i64 %715 to i32*
  %275 = load i32, i32* %274
  %276 = sext i32 %275 to i64
  %277 = shl nsw i64 %276, 3
  %278 = add i64 %277, %273
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %713, -120
  %282 = inttoptr i64 %281 to i64*
  store i64 %271, i64* %282
  store i64 %280, i64* %7, align 8, !tbaa !1240
  %283 = add i64 %713, -128
  %284 = inttoptr i64 %283 to i64*
  store i64 %271, i64* %284
  %285 = ashr i64 %280, 63
  store i64 %285, i64* %434, align 8, !tbaa !1240
  %286 = inttoptr i64 %283 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %8, align 8, !tbaa !1240
  %288 = add i64 %733, 80
  store i64 %288, i64* %3, align 8
  %289 = sext i64 %287 to i128
  %290 = and i128 %289, -18446744073709551616
  %291 = zext i64 %285 to i128
  %292 = shl nuw i128 %291, 64
  %293 = zext i64 %280 to i128
  %294 = or i128 %292, %293
  %295 = zext i64 %287 to i128
  %296 = or i128 %290, %295
  %297 = sdiv i128 %294, %296
  %298 = trunc i128 %297 to i64
  %299 = and i128 %297, 18446744073709551615
  %300 = sext i64 %298 to i128
  %301 = and i128 %300, -18446744073709551616
  %302 = or i128 %301, %299
  %303 = icmp eq i128 %297, %302
  br i1 %303, label %308, label %304

; <label>:304:                                    ; preds = %block_402e0c
  %305 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %288, %struct.Memory* %714) #14
  %306 = load i64, i64* %3, align 8
  %307 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:308:                                    ; preds = %block_402e0c
  %309 = srem i128 %294, %296
  %310 = trunc i128 %309 to i64
  store i64 %310, i64* %434, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %308, %304
  %311 = phi i64 [ %307, %304 ], [ %298, %308 ]
  %312 = phi i64 [ %306, %304 ], [ %288, %308 ]
  %313 = phi %struct.Memory* [ %305, %304 ], [ %714, %308 ]
  %314 = load i64, i64* %13, align 8
  %315 = add i64 %314, -120
  %316 = inttoptr i64 %315 to i64*
  %317 = load i64, i64* %316
  %318 = mul i64 %311, %317
  store i64 %318, i64* %10, align 8, !tbaa !1240
  %319 = add i64 %314, -32
  %320 = inttoptr i64 %319 to i64*
  %321 = load i64, i64* %320
  %322 = add i64 %314, -40
  %323 = inttoptr i64 %322 to i32*
  %324 = load i32, i32* %323
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %11, align 8, !tbaa !1240
  %326 = shl nsw i64 %325, 3
  %327 = add i64 %326, %321
  %328 = inttoptr i64 %327 to i64*
  %329 = load i64, i64* %328
  %330 = sub i64 %329, %318
  store i64 %330, i64* %14, align 8, !tbaa !1240
  %331 = inttoptr i64 %327 to i64*
  store i64 %330, i64* %331
  %332 = inttoptr i64 %322 to i32*
  %333 = load i32, i32* %332
  %334 = add i32 %333, 1
  %335 = load i64, i64* %13, align 8
  %336 = add i64 %335, -40
  %337 = inttoptr i64 %336 to i32*
  store i32 %334, i32* %337
  %338 = add i64 %312, -92
  br label %block_402e00

block_402de6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1, %block_402dd5
  %339 = phi i64 [ %711, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %55, %block_402dd5 ]
  %340 = phi %struct.Memory* [ %650, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %650, %block_402dd5 ]
  %341 = inttoptr i64 %679 to i32*
  %342 = load i32, i32* %341
  %343 = add i32 %342, 1
  %344 = inttoptr i64 %679 to i32*
  store i32 %343, i32* %344
  %345 = add i64 %339, -195
  br label %block_402d23

block_402bdb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit, %block_402bc3
  %346 = phi i64 [ %118, %block_402bc3 ], [ %219, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %347 = phi i64 [ %121, %block_402bc3 ], [ %207, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %348 = phi %struct.Memory* [ %122, %block_402bc3 ], [ %210, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %349 = add i64 %347, -44
  %350 = inttoptr i64 %349 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  %353 = add i64 %347, -56
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %347, -40
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  store i64 %359, i64* %9, align 8, !tbaa !1240
  %360 = shl nsw i64 %359, 3
  %361 = add i64 %360, %355
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %363, -1
  %365 = lshr i64 %364, 63
  %366 = sub i64 %352, %364
  %367 = lshr i64 %366, 63
  %368 = trunc i64 %367 to i8
  %369 = lshr i64 %352, 63
  %370 = xor i64 %365, %369
  %371 = xor i64 %367, %369
  %372 = add nuw nsw i64 %371, %370
  %373 = icmp eq i64 %372, 2
  %374 = icmp ne i8 %368, 0
  %375 = xor i1 %374, %373
  %376 = select i1 %375, i64 29, i64 91
  %377 = add i64 %346, %376
  br i1 %375, label %block_402bf8, label %block_402c36

block_402e85:                                     ; preds = %block_402e00
  %378 = add i64 %713, -4
  %379 = inttoptr i64 %378 to i32*
  store i32 1, i32* %379
  %380 = inttoptr i64 %378 to i32*
  %381 = load i32, i32* %380
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %7, align 8, !tbaa !1240
  %383 = load i64, i64* %12, align 8
  %384 = add i64 %383, 128
  %385 = icmp ugt i64 %383, -129
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %19, align 1, !tbaa !1264
  %387 = trunc i64 %384 to i32
  %388 = and i32 %387, 255
  %389 = tail call i32 @llvm.ctpop.i32(i32 %388) #10
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  store i8 %392, i8* %20, align 1, !tbaa !1278
  %393 = xor i64 %384, %383
  %394 = lshr i64 %393, 4
  %395 = trunc i64 %394 to i8
  %396 = and i8 %395, 1
  store i8 %396, i8* %21, align 1, !tbaa !1279
  %397 = icmp eq i64 %384, 0
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %23, align 1, !tbaa !1280
  %399 = lshr i64 %384, 63
  %400 = trunc i64 %399 to i8
  store i8 %400, i8* %24, align 1, !tbaa !1281
  %401 = lshr i64 %383, 63
  %402 = xor i64 %399, %401
  %403 = add nuw nsw i64 %402, %399
  %404 = icmp eq i64 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %25, align 1, !tbaa !1282
  %406 = add i64 %383, 136
  %407 = inttoptr i64 %384 to i64*
  %408 = load i64, i64* %407
  store i64 %408, i64* %13, align 8, !tbaa !1240
  %409 = inttoptr i64 %406 to i64*
  %410 = load i64, i64* %409
  store i64 %410, i64* %3, align 8, !tbaa !1240
  %411 = add i64 %383, 144
  store i64 %411, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %714

block_402d23:                                     ; preds = %block_402d04, %block_402de6
  %412 = phi i64 [ %443, %block_402d04 ], [ %345, %block_402de6 ]
  %413 = phi i64 [ %435, %block_402d04 ], [ %678, %block_402de6 ]
  %414 = phi %struct.Memory* [ %437, %block_402d04 ], [ %340, %block_402de6 ]
  %415 = add i64 %413, -40
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = add i64 %413, -8
  %419 = inttoptr i64 %418 to i32*
  %420 = load i32, i32* %419
  %421 = sub i32 %417, %420
  %422 = lshr i32 %421, 31
  %423 = trunc i32 %422 to i8
  %424 = lshr i32 %417, 31
  %425 = lshr i32 %420, 31
  %426 = xor i32 %425, %424
  %427 = xor i32 %422, %424
  %428 = add nuw nsw i32 %427, %426
  %429 = icmp eq i32 %428, 2
  %430 = icmp ne i8 %423, 0
  %431 = xor i1 %430, %429
  %432 = select i1 %431, i64 12, i64 214
  %433 = add i64 %412, %432
  br i1 %431, label %block_402d2f, label %block_402df9

block_402d04:                                     ; preds = %block_402cff, %block_402b94.block_402d04_crit_edge
  %434 = phi i64* [ %28, %block_402b94.block_402d04_crit_edge ], [ %234, %block_402cff ]
  %435 = phi i64 [ %15, %block_402b94.block_402d04_crit_edge ], [ %32, %block_402cff ]
  %436 = phi i64 [ %27, %block_402b94.block_402d04_crit_edge ], [ %445, %block_402cff ]
  %437 = phi %struct.Memory* [ %2, %block_402b94.block_402d04_crit_edge ], [ %33, %block_402cff ]
  %438 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %439 = add i32 %438, 1
  store i32 %439, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %440 = add i64 %435, -48
  %441 = inttoptr i64 %440 to i32*
  store i32 0, i32* %441
  %442 = add i64 %435, -40
  %443 = add i64 %436, 31
  %444 = inttoptr i64 %442 to i32*
  store i32 0, i32* %444
  br label %block_402d23

block_402cff:                                     ; preds = %block_402c77
  %445 = add i64 %52, 5
  br label %block_402d04

block_402c83:                                     ; preds = %block_402c77
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), i64* %10, align 8, !tbaa !1240
  store i64 2, i64* %8, align 8, !tbaa !1240
  %446 = sext i32 %36 to i64
  %447 = shl nsw i64 %446, 3
  %448 = add i64 %447, ptrtoint (%adcprime_type* @adcprime to i64)
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449
  %451 = add i64 %450, 1
  %452 = icmp eq i64 %450, -1
  %453 = icmp eq i64 %451, 0
  %454 = or i1 %452, %453
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %19, align 1, !tbaa !1264
  %456 = trunc i64 %451 to i32
  %457 = and i32 %456, 255
  %458 = tail call i32 @llvm.ctpop.i32(i32 %457) #10
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  store i8 %461, i8* %20, align 1, !tbaa !1278
  %462 = xor i64 %451, %450
  %463 = lshr i64 %462, 4
  %464 = trunc i64 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %21, align 1, !tbaa !1279
  %466 = zext i1 %453 to i8
  store i8 %466, i8* %23, align 1, !tbaa !1280
  %467 = lshr i64 %451, 63
  %468 = trunc i64 %467 to i8
  store i8 %468, i8* %24, align 1, !tbaa !1281
  %469 = lshr i64 %450, 63
  %470 = xor i64 %467, %469
  %471 = add nuw nsw i64 %470, %467
  %472 = icmp eq i64 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %25, align 1, !tbaa !1282
  store i64 %451, i64* %7, align 8, !tbaa !1240
  %474 = ashr i64 %451, 63
  store i64 %474, i64* %234, align 8, !tbaa !1240
  %475 = add i64 %52, 41
  store i64 %475, i64* %3, align 8
  %476 = zext i64 %474 to i128
  %477 = shl nuw i128 %476, 64
  %478 = zext i64 %451 to i128
  %479 = or i128 %477, %478
  %480 = sdiv i128 %479, 2
  %481 = trunc i128 %480 to i64
  %482 = and i128 %480, 18446744073709551615
  %483 = sext i64 %481 to i128
  %484 = and i128 %483, -18446744073709551616
  %485 = or i128 %484, %482
  %486 = icmp eq i128 %480, %485
  br i1 %486, label %493, label %487

; <label>:487:                                    ; preds = %block_402c83
  %488 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %475, %struct.Memory* %33) #14
  %489 = load i64, i64* %13, align 8
  %490 = load i64, i64* %3, align 8
  %491 = load i64, i64* %7, align 8
  %492 = load i64, i64* %63, align 8, !alias.scope !2903, !noalias !2906
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:493:                                    ; preds = %block_402c83
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %493, %487
  %494 = phi i64 [ %492, %487 ], [ add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), %493 ]
  %495 = phi i64 [ %491, %487 ], [ %481, %493 ]
  %496 = phi i64 [ %490, %487 ], [ %475, %493 ]
  %497 = phi i64 [ %489, %487 ], [ %32, %493 ]
  %498 = phi %struct.Memory* [ %488, %487 ], [ %33, %493 ]
  %499 = add i64 %497, -40
  %500 = inttoptr i64 %499 to i32*
  %501 = load i32, i32* %500
  %502 = sext i32 %501 to i64
  %503 = shl nsw i64 %502, 3
  %504 = add i64 %503, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %505 = inttoptr i64 %504 to i64*
  store i64 %495, i64* %505
  %506 = load i64, i64* @stdout
  store i64 %506, i64* %11, align 8, !tbaa !1240
  %507 = inttoptr i64 %499 to i32*
  %508 = load i32, i32* %507
  %509 = sext i32 %508 to i64
  %510 = shl nsw i64 %509, 3
  %511 = add i64 %510, ptrtoint (%adcprime_type* @adcprime to i64)
  %512 = inttoptr i64 %511 to i64*
  %513 = load i64, i64* %512
  %514 = add i64 %510, ptrtoint (%adcgen_type* @adcgen to i64)
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  store i64 %516, i64* %8, align 8, !tbaa !1240
  %517 = add i64 %510, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %518 = inttoptr i64 %517 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %14, align 8, !tbaa !1240
  store i64 %513, i64* %9, align 8, !tbaa !1240
  %520 = add i64 %496, 66
  %521 = load i64, i64* %12, align 8, !tbaa !1240
  %522 = add i64 %521, -8
  %523 = inttoptr i64 %522 to i64*
  store i64 %520, i64* %523
  %524 = load i64, i64* %64, align 8, !alias.scope !2903, !noalias !2906
  %525 = inttoptr i64 %521 to i64*
  %526 = load i64, i64* %525
  %527 = add i64 %521, 8
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %521, 16
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  %533 = add i64 %521, 24
  %534 = inttoptr i64 %533 to i64*
  %535 = load i64, i64* %534
  %536 = add i64 %521, 32
  %537 = inttoptr i64 %536 to i64*
  %538 = load i64, i64* %537
  %539 = add i64 %521, 40
  %540 = inttoptr i64 %539 to i64*
  %541 = load i64, i64* %540
  %542 = add i64 %521, 48
  %543 = inttoptr i64 %542 to i64*
  %544 = load i64, i64* %543
  %545 = add i64 %521, 56
  %546 = inttoptr i64 %545 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %521, 64
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %521, 72
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = inttoptr i64 %522 to i64*
  %555 = load i64, i64* %554
  store i64 %555, i64* %3, align 8, !alias.scope !2903, !noalias !2906
  store i64 %521, i64* %12, align 8, !alias.scope !2903, !noalias !2906
  %556 = tail call i64 @fprintf(i64 %506, i64 %494, i64 %513, i64 %516, i64 %519, i64 %524, i64 %526, i64 %529, i64 %532, i64 %535, i64 %538, i64 %541, i64 %544, i64 %547, i64 %550, i64 %553), !noalias !2903
  %557 = load i64, i64* %13, align 8
  %558 = add i64 %557, -92
  %559 = trunc i64 %556 to i32
  %560 = load i64, i64* %3, align 8
  %561 = inttoptr i64 %558 to i32*
  store i32 %559, i32* %561
  %562 = add i64 %557, -40
  %563 = inttoptr i64 %562 to i32*
  %564 = load i32, i32* %563
  %565 = add i32 %564, 1
  %566 = inttoptr i64 %562 to i32*
  store i32 %565, i32* %566
  %567 = add i64 %560, -119
  br label %block_402c77

block_402d2f:                                     ; preds = %block_402d23
  %568 = sext i32 %417 to i64
  %569 = shl nsw i64 %568, 3
  %570 = add i64 %569, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %571 = inttoptr i64 %570 to i64*
  %572 = load i64, i64* %571
  %573 = add i64 %569, ptrtoint (%adcgen_type* @adcgen to i64)
  %574 = inttoptr i64 %573 to i64*
  %575 = load i64, i64* %574
  %576 = sext i64 %572 to i128
  %577 = and i128 %576, -18446744073709551616
  %578 = sext i64 %575 to i128
  %579 = and i128 %578, -18446744073709551616
  %580 = zext i64 %572 to i128
  %581 = or i128 %577, %580
  %582 = zext i64 %575 to i128
  %583 = or i128 %579, %582
  %584 = mul nsw i128 %583, %581
  %585 = trunc i128 %584 to i64
  %586 = sext i64 %585 to i128
  %587 = icmp ne i128 %586, %584
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %19, align 1, !tbaa !1264
  %589 = trunc i128 %584 to i32
  %590 = and i32 %589, 255
  %591 = tail call i32 @llvm.ctpop.i32(i32 %590) #10
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  %594 = xor i8 %593, 1
  store i8 %594, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %595 = lshr i64 %585, 63
  %596 = trunc i64 %595 to i8
  store i8 %596, i8* %24, align 1, !tbaa !1281
  store i8 %588, i8* %25, align 1, !tbaa !1282
  %597 = add i64 %413, -24
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %569, %599
  %601 = inttoptr i64 %600 to i64*
  store i64 %585, i64* %601
  %602 = inttoptr i64 %415 to i32*
  %603 = load i32, i32* %602
  %604 = sext i32 %603 to i64
  %605 = shl nsw i64 %604, 3
  %606 = add i64 %605, ptrtoint (%adcprime_type* @adcprime to i64)
  %607 = inttoptr i64 %606 to i64*
  %608 = load i64, i64* %607
  %609 = inttoptr i64 %597 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %605, %610
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %413, -104
  %615 = inttoptr i64 %614 to i64*
  store i64 %608, i64* %615
  store i64 %613, i64* %7, align 8, !tbaa !1240
  %616 = add i64 %413, -112
  %617 = inttoptr i64 %616 to i64*
  store i64 %604, i64* %617
  %618 = ashr i64 %613, 63
  store i64 %618, i64* %434, align 8, !tbaa !1240
  %619 = inttoptr i64 %616 to i64*
  %620 = load i64, i64* %619
  store i64 %620, i64* %8, align 8, !tbaa !1240
  %621 = shl i64 %620, 3
  %622 = add i64 %621, ptrtoint (%adcprime_type* @adcprime to i64)
  %623 = add i64 %433, 90
  store i64 %623, i64* %3, align 8
  %624 = inttoptr i64 %622 to i64*
  %625 = load i64, i64* %624
  %626 = sext i64 %625 to i128
  %627 = and i128 %626, -18446744073709551616
  %628 = zext i64 %618 to i128
  %629 = shl nuw i128 %628, 64
  %630 = zext i64 %613 to i128
  %631 = or i128 %629, %630
  %632 = zext i64 %625 to i128
  %633 = or i128 %627, %632
  %634 = sdiv i128 %631, %633
  %635 = trunc i128 %634 to i64
  %636 = and i128 %634, 18446744073709551615
  %637 = sext i64 %635 to i128
  %638 = and i128 %637, -18446744073709551616
  %639 = or i128 %638, %636
  %640 = icmp eq i128 %634, %639
  br i1 %640, label %645, label %641

; <label>:641:                                    ; preds = %block_402d2f
  %642 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %623, %struct.Memory* %414) #14
  %643 = load i64, i64* %3, align 8
  %644 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:645:                                    ; preds = %block_402d2f
  %646 = srem i128 %631, %633
  %647 = trunc i128 %646 to i64
  store i64 %647, i64* %434, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %645, %641
  %648 = phi i64 [ %644, %641 ], [ %635, %645 ]
  %649 = phi i64 [ %643, %641 ], [ %623, %645 ]
  %650 = phi %struct.Memory* [ %642, %641 ], [ %414, %645 ]
  %651 = load i64, i64* %13, align 8
  %652 = add i64 %651, -104
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = mul i64 %648, %654
  %656 = add i64 %651, -24
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  %659 = add i64 %651, -40
  %660 = inttoptr i64 %659 to i32*
  %661 = load i32, i32* %660
  %662 = sext i32 %661 to i64
  store i64 %662, i64* %11, align 8, !tbaa !1240
  %663 = shl nsw i64 %662, 3
  %664 = add i64 %663, %658
  %665 = inttoptr i64 %664 to i64*
  %666 = load i64, i64* %665
  %667 = sub i64 %666, %655
  store i64 %667, i64* %14, align 8, !tbaa !1240
  %668 = inttoptr i64 %664 to i64*
  store i64 %667, i64* %668
  %669 = inttoptr i64 %656 to i64*
  %670 = load i64, i64* %669
  %671 = inttoptr i64 %659 to i32*
  %672 = load i32, i32* %671
  %673 = sext i32 %672 to i64
  %674 = shl nsw i64 %673, 3
  %675 = add i64 %674, %670
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = load i64, i64* %13, align 8
  %679 = add i64 %678, -40
  %680 = inttoptr i64 %679 to i32*
  %681 = load i32, i32* %680
  %682 = sext i32 %681 to i64
  %683 = shl nsw i64 %682, 3
  %684 = add i64 %683, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %685 = inttoptr i64 %684 to i64*
  store i64 %677, i64* %685
  %686 = inttoptr i64 %679 to i32*
  %687 = load i32, i32* %686
  %688 = sext i32 %687 to i64
  %689 = shl nsw i64 %688, 3
  %690 = add i64 %689, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %678, -48
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %10, align 8, !tbaa !1240
  %697 = sub i64 %692, %696
  %698 = icmp eq i64 %697, 0
  %699 = lshr i64 %697, 63
  %700 = trunc i64 %699 to i8
  %701 = lshr i64 %692, 63
  %702 = lshr i64 %696, 63
  %703 = xor i64 %701, %702
  %704 = xor i64 %699, %701
  %705 = add nuw nsw i64 %704, %703
  %706 = icmp eq i64 %705, 2
  %707 = icmp ne i8 %700, 0
  %708 = xor i1 %707, %706
  %709 = or i1 %698, %708
  %710 = select i1 %709, i64 93, i64 76
  %711 = add i64 %649, %710
  br i1 %709, label %block_402de6, label %block_402dd5

block_402e00:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402df9
  %712 = phi i64 [ %29, %block_402df9 ], [ %338, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %713 = phi i64 [ %413, %block_402df9 ], [ %335, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %714 = phi %struct.Memory* [ %414, %block_402df9 ], [ %313, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %715 = add i64 %713, -40
  %716 = inttoptr i64 %715 to i32*
  %717 = load i32, i32* %716
  %718 = add i64 %713, -12
  %719 = inttoptr i64 %718 to i32*
  %720 = load i32, i32* %719
  %721 = sub i32 %717, %720
  %722 = lshr i32 %721, 31
  %723 = trunc i32 %722 to i8
  %724 = lshr i32 %717, 31
  %725 = lshr i32 %720, 31
  %726 = xor i32 %725, %724
  %727 = xor i32 %722, %724
  %728 = add nuw nsw i32 %727, %726
  %729 = icmp eq i32 %728, 2
  %730 = icmp ne i8 %723, 0
  %731 = xor i1 %730, %729
  %732 = select i1 %731, i64 12, i64 133
  %733 = add i64 %712, %732
  br i1 %731, label %block_402e0c, label %block_402e85
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40bab4__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
block_40bab4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9 = xor i64 %6, %5
  %10 = lshr i64 %9, 4
  %11 = trunc i64 %10 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = lshr i64 %6, 63
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %5, 63
  %18 = xor i64 %15, %17
  %19 = add nuw nsw i64 %18, %17
  %20 = icmp eq i64 %19, 2
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = icmp ult i64 %5, 8
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !1264
  %25 = trunc i64 %5 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #10
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %8, align 1, !tbaa !1278
  store i8 %12, i8* %13, align 1, !tbaa !1279
  %31 = icmp eq i64 %5, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %14, align 1, !tbaa !1280
  %33 = trunc i64 %17 to i8
  store i8 %33, i8* %16, align 1, !tbaa !1281
  store i8 %21, i8* %22, align 1, !tbaa !1282
  %34 = inttoptr i64 %5 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %3, align 8, !tbaa !1240
  %36 = add i64 %5, 8
  store i64 %36, i64* %4, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_40a770_vranlc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_40a770:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5
  %19 = load i64, i64* %12, align 8
  %20 = load i64, i64* %11, align 8, !tbaa !1240
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %19, i64* %22
  store i64 %21, i64* %12, align 8, !tbaa !1240
  %23 = add i64 %20, -24
  store i64 %23, i64* %11, align 8, !tbaa !1240
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5888) to double*)
  %31 = bitcast %union.VectorReg* %14 to double*
  store double %30, double* %31, align 1, !tbaa !1439
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to double*
  %34 = bitcast %union.VectorReg* %15 to i8*
  %35 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5896) to double*)
  %36 = bitcast %union.VectorReg* %15 to double*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %38 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5880) to double*)
  %39 = bitcast %union.VectorReg* %16 to double*
  store double %38, double* %39, align 1, !tbaa !1439
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !1439
  %42 = bitcast %union.VectorReg* %17 to i8*
  %43 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5872) to double*)
  %44 = bitcast %union.VectorReg* %17 to double*
  store double %43, double* %44, align 1, !tbaa !1439
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %46 = bitcast i64* %45 to double*
  store double 0.000000e+00, double* %46, align 1, !tbaa !1439
  %47 = add i64 %20, -12
  %48 = load i32, i32* %5, align 4
  %49 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %49
  %50 = add i64 %20, -24
  %51 = load i64, i64* %9, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %52
  %53 = add i64 %20, -32
  %54 = bitcast [32 x %union.VectorReg]* %13 to double*
  %55 = load double, double* %54, align 1
  %56 = inttoptr i64 %53 to double*
  store double %55, double* %56
  %57 = add i64 %20, -40
  %58 = load i64, i64* %8, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %59
  %60 = add i64 %20, -48
  %61 = inttoptr i64 %60 to double*
  store double %35, double* %61
  %62 = add i64 %20, -56
  %63 = inttoptr i64 %62 to double*
  store double %43, double* %63
  %64 = add i64 %20, -64
  %65 = inttoptr i64 %64 to double*
  store double %30, double* %65
  %66 = load i64, i64* %12, align 8
  %67 = add i64 %66, -64
  %68 = inttoptr i64 %67 to double*
  store double %38, double* %68
  %69 = add i64 %66, -24
  %70 = inttoptr i64 %69 to double*
  %71 = load double, double* %70
  %72 = fmul double %35, %71
  store double %72, double* %36, align 1, !tbaa !1439
  store i64 0, i64* %37, align 1, !tbaa !1439
  %73 = add i64 %66, -72
  %74 = inttoptr i64 %73 to double*
  store double %72, double* %74
  %75 = inttoptr i64 %73 to double*
  %76 = load double, double* %75
  %77 = tail call double @llvm.trunc.f64(double %76) #10
  %78 = tail call double @llvm.fabs.f64(double %77) #10
  %79 = fcmp ogt double %78, 0x41DFFFFFFFC00000
  %80 = fptosi double %77 to i32
  %81 = zext i32 %80 to i64
  %82 = select i1 %79, i64 2147483648, i64 %81
  store i64 %82, i64* %10, align 8, !tbaa !1240
  %83 = trunc i64 %82 to i32
  %84 = sitofp i32 %83 to double
  %85 = add i64 %66, -104
  %86 = inttoptr i64 %85 to double*
  store double %84, double* %86
  %87 = inttoptr i64 %69 to double*
  %88 = load double, double* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %90 = bitcast i64* %89 to double*
  %91 = load double, double* %31, align 1
  %92 = inttoptr i64 %85 to double*
  %93 = load double, double* %92
  %94 = fmul double %91, %93
  store double %94, double* %31, align 1, !tbaa !1439
  store i64 0, i64* %32, align 1, !tbaa !1439
  %95 = fsub double %88, %94
  store double %95, double* %54, align 1, !tbaa !1439
  store i64 0, i64* %89, align 1, !tbaa !1439
  %96 = add i64 %66, -112
  %97 = inttoptr i64 %96 to double*
  store double %95, double* %97
  %98 = add i64 %66, -140
  %99 = inttoptr i64 %98 to i32*
  store i32 0, i32* %99
  %100 = add i64 %66, -4
  %101 = add i64 %66, -16
  %102 = bitcast %union.VectorReg* %17 to i32*
  %103 = getelementptr inbounds i8, i8* %42, i64 4
  %104 = bitcast i8* %103 to i32*
  %105 = bitcast i64* %45 to i32*
  %106 = getelementptr inbounds i8, i8* %42, i64 12
  %107 = bitcast i8* %106 to i32*
  %108 = add i64 %66, -120
  %109 = bitcast %union.VectorReg* %18 to i8*
  %110 = bitcast %union.VectorReg* %18 to i32*
  %111 = getelementptr inbounds i8, i8* %109, i64 4
  %112 = bitcast i8* %111 to i32*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 5, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast %union.VectorReg* %18 to double*
  %115 = add i64 %66, -128
  %116 = add i64 %66, -80
  %117 = add i64 %66, -136
  %118 = add i64 %66, -88
  %119 = bitcast [32 x %union.VectorReg]* %13 to <2 x i32>*
  %120 = bitcast %union.VectorReg* %15 to i32*
  %121 = getelementptr inbounds i8, i8* %34, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = add i64 %66, -96
  %124 = add i64 %66, -32
  br label %block_40a7f1

block_40a911:                                     ; preds = %block_40a7f1
  %125 = zext i32 %280 to i64
  store i64 %125, i64* %6, align 8, !tbaa !1240
  %126 = load i64, i64* %11, align 8
  %127 = add i64 %126, 16
  %128 = icmp ugt i64 %126, -17
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %24, align 1, !tbaa !1264
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = tail call i32 @llvm.ctpop.i32(i32 %131) #10
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* %25, align 1, !tbaa !1278
  %136 = xor i64 %126, 16
  %137 = xor i64 %136, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %26, align 1, !tbaa !1279
  %141 = icmp eq i64 %127, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !1280
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !1281
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %29, align 1, !tbaa !1282
  %150 = add i64 %126, 24
  %151 = inttoptr i64 %127 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %12, align 8, !tbaa !1240
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %3, align 8, !tbaa !1240
  %155 = add i64 %126, 32
  store i64 %155, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %278

block_40a800:                                     ; preds = %block_40a7f1
  %156 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5872) to double*)
  store double %156, double* %54, align 1, !tbaa !1439
  store double 0.000000e+00, double* %90, align 1, !tbaa !1439
  %157 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5880) to double*)
  store double %157, double* %31, align 1, !tbaa !1439
  store double 0.000000e+00, double* %33, align 1, !tbaa !1439
  %158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5888) to double*)
  store double %158, double* %36, align 1, !tbaa !1439
  %159 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5896) to double*)
  %160 = inttoptr i64 %101 to i64*
  %161 = load i64, i64* %160
  %162 = bitcast double %159 to <2 x i32>
  %163 = extractelement <2 x i32> %162, i32 0
  store i32 %163, i32* %102, align 1, !tbaa !2106
  %164 = extractelement <2 x i32> %162, i32 1
  store i32 %164, i32* %104, align 1, !tbaa !2106
  %165 = load double, double* %44, align 1
  %166 = inttoptr i64 %161 to double*
  %167 = load double, double* %166
  %168 = fmul double %165, %167
  %169 = inttoptr i64 %73 to double*
  store double %168, double* %169
  %170 = inttoptr i64 %73 to double*
  %171 = load double, double* %170
  %172 = tail call double @llvm.trunc.f64(double %171) #10
  %173 = tail call double @llvm.fabs.f64(double %172) #10
  %174 = fcmp ogt double %173, 0x41DFFFFFFFC00000
  %175 = fptosi double %172 to i32
  %176 = sitofp i32 %175 to double
  %177 = select i1 %174, double 0xC1E0000000000000, double %176
  %178 = inttoptr i64 %108 to double*
  store double %177, double* %178
  %179 = inttoptr i64 %101 to i64*
  %180 = load i64, i64* %179
  %181 = inttoptr i64 %180 to double*
  %182 = load double, double* %181
  %183 = bitcast double %158 to <2 x i32>
  %184 = extractelement <2 x i32> %183, i32 0
  store i32 %184, i32* %110, align 1, !tbaa !2106
  %185 = extractelement <2 x i32> %183, i32 1
  store i32 %185, i32* %112, align 1, !tbaa !2106
  %186 = load double, double* %114, align 1
  %187 = inttoptr i64 %108 to double*
  %188 = load double, double* %187
  %189 = fmul double %186, %188
  %190 = fsub double %182, %189
  %191 = inttoptr i64 %115 to double*
  store double %190, double* %191
  %192 = inttoptr i64 %85 to double*
  %193 = load double, double* %192
  %194 = inttoptr i64 %115 to double*
  %195 = load double, double* %194
  %196 = fmul double %193, %195
  %197 = inttoptr i64 %96 to double*
  %198 = load double, double* %197
  %199 = inttoptr i64 %108 to double*
  %200 = load double, double* %199
  %201 = fmul double %198, %200
  store double %201, double* %114, align 1, !tbaa !1439
  store i64 0, i64* %113, align 1, !tbaa !1439
  %202 = fadd double %196, %201
  %203 = inttoptr i64 %73 to double*
  store double %202, double* %203
  %204 = inttoptr i64 %73 to double*
  %205 = load double, double* %204
  %206 = fmul double %159, %205
  %207 = tail call double @llvm.trunc.f64(double %206) #10
  %208 = tail call double @llvm.fabs.f64(double %207) #10
  %209 = fcmp ogt double %208, 0x41DFFFFFFFC00000
  %210 = fptosi double %207 to i32
  %211 = sitofp i32 %210 to double
  %212 = select i1 %209, double 0xC1E0000000000000, double %211
  %213 = inttoptr i64 %116 to double*
  store double %212, double* %213
  %214 = inttoptr i64 %73 to double*
  %215 = load double, double* %214
  store i32 %184, i32* %102, align 1, !tbaa !2106
  store i32 %185, i32* %104, align 1, !tbaa !2106
  store i32 0, i32* %105, align 1, !tbaa !2106
  store i32 0, i32* %107, align 1, !tbaa !2106
  %216 = load double, double* %44, align 1
  %217 = inttoptr i64 %116 to double*
  %218 = load double, double* %217
  %219 = fmul double %216, %218
  store double %219, double* %44, align 1, !tbaa !1439
  %220 = fsub double %215, %219
  %221 = inttoptr i64 %117 to double*
  store double %220, double* %221
  %222 = load double, double* %36, align 1
  %223 = inttoptr i64 %117 to double*
  %224 = load double, double* %223
  %225 = fmul double %222, %224
  %226 = inttoptr i64 %96 to double*
  %227 = load double, double* %226
  %228 = inttoptr i64 %115 to double*
  %229 = load double, double* %228
  %230 = fmul double %227, %229
  store double %230, double* %39, align 1, !tbaa !1439
  store i64 0, i64* %40, align 1, !tbaa !1439
  %231 = fadd double %230, %225
  %232 = inttoptr i64 %118 to double*
  store double %231, double* %232
  %233 = load <2 x i32>, <2 x i32>* %119, align 1
  %234 = load i64, i64* %89, align 1
  %235 = extractelement <2 x i32> %233, i32 0
  store i32 %235, i32* %120, align 1, !tbaa !2106
  %236 = extractelement <2 x i32> %233, i32 1
  store i32 %236, i32* %122, align 1, !tbaa !2106
  %237 = load double, double* %36, align 1
  %238 = inttoptr i64 %118 to double*
  %239 = load double, double* %238
  %240 = fmul double %237, %239
  %241 = tail call double @llvm.trunc.f64(double %240) #10
  %242 = tail call double @llvm.fabs.f64(double %241) #10
  %243 = fcmp ogt double %242, 0x41DFFFFFFFC00000
  %244 = fptosi double %241 to i32
  %245 = zext i32 %244 to i64
  %246 = select i1 %243, i64 2147483648, i64 %245
  store i64 %246, i64* %7, align 8, !tbaa !1240
  %247 = trunc i64 %246 to i32
  %248 = sitofp i32 %247 to double
  %249 = inttoptr i64 %123 to double*
  store double %248, double* %249
  %250 = inttoptr i64 %118 to double*
  %251 = load double, double* %250
  %252 = load double, double* %31, align 1
  %253 = inttoptr i64 %123 to double*
  %254 = load double, double* %253
  %255 = fmul double %252, %254
  store double %255, double* %31, align 1, !tbaa !1439
  %256 = fsub double %251, %255
  store double %256, double* %36, align 1, !tbaa !1439
  store i64 0, i64* %37, align 1, !tbaa !1439
  %257 = inttoptr i64 %101 to i64*
  %258 = load i64, i64* %257
  %259 = inttoptr i64 %258 to double*
  store double %256, double* %259
  %260 = inttoptr i64 %101 to i64*
  %261 = load i64, i64* %260
  %262 = bitcast <2 x i32> %233 to double
  %263 = inttoptr i64 %261 to double*
  %264 = load double, double* %263
  %265 = fmul double %262, %264
  store double %265, double* %54, align 1, !tbaa !1439
  store i64 %234, i64* %89, align 1, !tbaa !1439
  %266 = inttoptr i64 %124 to i64*
  %267 = load i64, i64* %266
  %268 = inttoptr i64 %98 to i32*
  %269 = load i32, i32* %268
  %270 = sext i32 %269 to i64
  store i64 %270, i64* %8, align 8, !tbaa !1240
  %271 = shl nsw i64 %270, 3
  %272 = add i64 %271, %267
  %273 = inttoptr i64 %272 to double*
  store double %265, double* %273
  %274 = inttoptr i64 %98 to i32*
  %275 = load i32, i32* %274
  %276 = add i32 %275, 1
  %277 = inttoptr i64 %98 to i32*
  store i32 %276, i32* %277
  br label %block_40a7f1

block_40a7f1:                                     ; preds = %block_40a800, %block_40a770
  %278 = phi %struct.Memory* [ %2, %block_40a770 ], [ %278, %block_40a800 ]
  %279 = inttoptr i64 %98 to i32*
  %280 = load i32, i32* %279
  %281 = inttoptr i64 %100 to i32*
  %282 = load i32, i32* %281
  %283 = sub i32 %280, %282
  %284 = lshr i32 %283, 31
  %285 = lshr i32 %280, 31
  %286 = lshr i32 %282, 31
  %287 = xor i32 %286, %285
  %288 = xor i32 %284, %285
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = icmp ne i32 %284, 0
  %292 = xor i1 %291, %290
  br i1 %292, label %block_40a800, label %block_40a911
}

; Function Attrs: noinline
define %struct.Memory* @sub_40b9c0_wtime_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40b9c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %9, align 8, !tbaa !1240
  %17 = add i64 %14, -40
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -32
  store i64 0, i64* %6, align 8, !tbaa !1240
  %25 = add i64 %14, -16
  %26 = load i64, i64* %7, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  store i64 %24, i64* %7, align 8, !tbaa !1240
  %28 = add i64 %1, 28
  %29 = add i64 %14, -48
  %30 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %30
  store i64 %17, i64* %8, align 8, !alias.scope !2908, !noalias !2911
  %31 = tail call i64 @gettimeofday(i64 %24, i64 0), !noalias !2908
  %32 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 16) to i32*)
  %33 = lshr i32 %32, 31
  %34 = trunc i32 %33 to i8
  %35 = load i64, i64* %9, align 8
  %36 = add i64 %35, -28
  %37 = trunc i64 %31 to i32
  %38 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %38
  %39 = icmp ne i8 %34, 0
  %40 = add i64 %35, -24
  br i1 %39, label %block_40b9ed, label %block_40b9fa

block_40b9fa:                                     ; preds = %block_40b9ed, %block_40b9c0
  %41 = phi %struct.Memory* [ %2, %block_40b9ed ], [ %2, %block_40b9c0 ]
  %42 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2512) to double*)
  %43 = bitcast [32 x %union.VectorReg]* %10 to double*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %45 = inttoptr i64 %40 to i64*
  %46 = load i64, i64* %45
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 16) to i32*)
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %5, align 8, !tbaa !1240
  %49 = sub i64 %46, %48
  %50 = sitofp i64 %49 to double
  %51 = bitcast %union.VectorReg* %11 to double*
  %52 = add i64 %35, -16
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = sitofp i64 %54 to double
  %56 = bitcast %union.VectorReg* %12 to double*
  store double %55, double* %56, align 1, !tbaa !1439
  %57 = fmul double %55, %42
  store double %57, double* %43, align 1, !tbaa !1439
  store i64 0, i64* %44, align 1, !tbaa !1439
  %58 = fadd double %50, %57
  store double %58, double* %51, align 1, !tbaa !1439
  %59 = add i64 %35, -8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %4, align 8, !tbaa !1240
  %62 = inttoptr i64 %61 to double*
  store double %58, double* %62
  %63 = load i64, i64* %8, align 8
  %64 = add i64 %63, 32
  %65 = icmp ugt i64 %63, -33
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %18, align 1, !tbaa !1264
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #10
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %19, align 1, !tbaa !1278
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %20, align 1, !tbaa !1279
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %21, align 1, !tbaa !1280
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %22, align 1, !tbaa !1281
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %23, align 1, !tbaa !1282
  %86 = add i64 %63, 40
  %87 = inttoptr i64 %64 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %9, align 8, !tbaa !1240
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %3, align 8, !tbaa !1240
  %91 = add i64 %63, 48
  store i64 %91, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %41

block_40b9ed:                                     ; preds = %block_40b9c0
  %92 = inttoptr i64 %40 to i64*
  %93 = load i64, i64* %92
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 16) to i32*)
  br label %block_40b9fa
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409470_Comp8gbuf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409470:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8, !tbaa !1240
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  %13 = add i64 %10, -24
  %14 = load i64, i64* %6, align 8
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = add i64 %10, -32
  %17 = load i64, i64* %5, align 8
  %18 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %18
  %19 = inttoptr i64 %13 to i64*
  %20 = load i64, i64* %19
  store i64 %20, i64* %5, align 8, !tbaa !1240
  %21 = add i64 %10, -32
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22
  %24 = sub i64 %20, %23
  %25 = icmp ult i64 %20, %23
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %26, i8* %27, align 1, !tbaa !1264
  %28 = trunc i64 %24 to i32
  %29 = and i32 %28, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) #10
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %33, i8* %34, align 1, !tbaa !1278
  %35 = xor i64 %23, %20
  %36 = xor i64 %35, %24
  %37 = lshr i64 %36, 4
  %38 = trunc i64 %37 to i8
  %39 = and i8 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %39, i8* %40, align 1, !tbaa !1279
  %41 = icmp eq i64 %24, 0
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %42, i8* %43, align 1, !tbaa !1280
  %44 = lshr i64 %24, 63
  %45 = trunc i64 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %45, i8* %46, align 1, !tbaa !1281
  %47 = lshr i64 %20, 63
  %48 = lshr i64 %23, 63
  %49 = xor i64 %48, %47
  %50 = xor i64 %44, %47
  %51 = add nuw nsw i64 %50, %49
  %52 = icmp eq i64 %51, 2
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %53, i8* %54, align 1, !tbaa !1282
  br i1 %25, label %block_40948a, label %block_409496

block_4094b7:                                     ; preds = %block_4094a4, %block_40948a, %block_4094b0
  %55 = phi i64 [ %93, %block_4094a4 ], [ %95, %block_40948a ], [ %93, %block_4094b0 ]
  %56 = phi %struct.Memory* [ %2, %block_4094a4 ], [ %2, %block_40948a ], [ %2, %block_4094b0 ]
  %57 = inttoptr i64 %55 to i32*
  %58 = load i32, i32* %57
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %4, align 8, !tbaa !1240
  %60 = inttoptr i64 %11 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %8, align 8, !tbaa !1240
  %62 = inttoptr i64 %10 to i64*
  %63 = load i64, i64* %62
  store i64 %63, i64* %3, align 8, !tbaa !1240
  %64 = add i64 %10, 8
  store i64 %64, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %56

block_409496:                                     ; preds = %block_409470
  %65 = add i64 %10, -24
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  %68 = sub i64 %67, %23
  %69 = icmp ult i64 %67, %23
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %27, align 1, !tbaa !1264
  %71 = trunc i64 %68 to i32
  %72 = and i32 %71, 255
  %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #10
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  %76 = xor i8 %75, 1
  store i8 %76, i8* %34, align 1, !tbaa !1278
  %77 = xor i64 %23, %67
  %78 = xor i64 %77, %68
  %79 = lshr i64 %78, 4
  %80 = trunc i64 %79 to i8
  %81 = and i8 %80, 1
  store i8 %81, i8* %40, align 1, !tbaa !1279
  %82 = icmp eq i64 %68, 0
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %43, align 1, !tbaa !1280
  %84 = lshr i64 %68, 63
  %85 = trunc i64 %84 to i8
  store i8 %85, i8* %46, align 1, !tbaa !1281
  %86 = lshr i64 %67, 63
  %87 = xor i64 %48, %86
  %88 = xor i64 %84, %86
  %89 = add nuw nsw i64 %88, %87
  %90 = icmp eq i64 %89, 2
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %54, align 1, !tbaa !1282
  %92 = or i1 %82, %69
  %93 = add i64 %10, -12
  br i1 %92, label %block_4094b0, label %block_4094a4

block_4094b0:                                     ; preds = %block_409496
  %94 = inttoptr i64 %93 to i32*
  store i32 0, i32* %94
  br label %block_4094b7

block_40948a:                                     ; preds = %block_409470
  %95 = add i64 %10, -12
  %96 = inttoptr i64 %95 to i32*
  store i32 -1, i32* %96
  br label %block_4094b7

block_4094a4:                                     ; preds = %block_409496
  %97 = inttoptr i64 %93 to i32*
  store i32 1, i32* %97
  br label %block_4094b7
}

; Function Attrs: noinline
define %struct.Memory* @sub_404350_ComputeMemoryFittedView(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_404350:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -200
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = add i64 %14, -28
  %28 = inttoptr i64 %27 to i32*
  store i32 0, i32* %28
  %29 = add i64 %14, -176
  %30 = inttoptr i64 %29 to i64*
  store i64 0, i64* %30
  %31 = inttoptr i64 %24 to i64*
  %32 = load i64, i64* %31
  %33 = add i64 %32, 4240
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  %36 = add i64 %1, 58
  %37 = add i64 %14, -208
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %3, align 8, !alias.scope !2913, !noalias !2916
  store i64 %17, i64* %11, align 8, !alias.scope !2913, !noalias !2916
  %42 = tail call i64 @fseek(i64 %35, i64 0, i64 2), !noalias !2913
  store i64 %42, i64* %39, align 8, !alias.scope !2913, !noalias !2916
  %43 = load i64, i64* %12, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %3, align 8
  %46 = inttoptr i64 %44 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %47, 540
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49
  %51 = shl i32 %50, 3
  %52 = add i64 %47, 536
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53
  %55 = shl i32 %54, 2
  %56 = add i32 %55, %51
  %57 = load i64, i64* %12, align 8
  %58 = add i64 %57, -156
  %59 = inttoptr i64 %58 to i32*
  store i32 %56, i32* %59
  %60 = inttoptr i64 %58 to i32*
  %61 = load i32, i32* %60
  %62 = add i64 %57, -148
  %63 = inttoptr i64 %62 to i32*
  store i32 %61, i32* %63
  %64 = inttoptr i64 %62 to i32*
  %65 = load i32, i32* %64
  %66 = and i32 %65, 7
  %67 = icmp eq i32 %66, 0
  %68 = add i64 %57, -172
  %69 = load i32, i32* %5, align 4
  %70 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %70
  %71 = select i1 %67, i64 85, i64 70
  %72 = add i64 %45, %71
  br i1 %67, label %block_4043df, label %block_4043d0

block_4044f9:                                     ; preds = %block_404436
  %73 = add i64 %135, -20
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74
  %76 = add i32 %75, 1
  %77 = inttoptr i64 %73 to i32*
  store i32 %76, i32* %77
  %78 = add i64 %151, -214
  br label %block_404423

block_404436:                                     ; preds = %block_404423
  %79 = add i64 %301, -144
  store i64 %79, i64* %8, align 8, !tbaa !1240
  %80 = add i64 %308, 608
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81
  %83 = add i64 %301, -160
  %84 = inttoptr i64 %83 to i32*
  %85 = load i32, i32* %84
  %86 = zext i32 %85 to i64
  %87 = shl nuw nsw i64 %86, 2
  %88 = add i64 %87, %82
  %89 = add i64 %308, 4312
  store i64 %89, i64* %9, align 8, !tbaa !1240
  %90 = load i64, i64* %12, align 8
  %91 = add i64 %90, -16
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92
  %94 = add i64 %93, 544
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95
  %97 = zext i32 %96 to i64
  store i64 %97, i64* %7, align 8, !tbaa !1240
  %98 = add i64 %93, 540
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %352, align 8, !tbaa !1240
  %102 = add i64 %93, 548
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %353, align 8, !tbaa !1240
  store i64 %88, i64* %10, align 8, !tbaa !1240
  %106 = add i64 %317, 362
  %107 = add i64 %317, 84
  %108 = load i64, i64* %11, align 8, !tbaa !1240
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110
  store i64 %109, i64* %11, align 8, !tbaa !1240
  %111 = tail call %struct.Memory* @sub_4045a0_SelectToView(%struct.State* nonnull %0, i64 %106, %struct.Memory* %302)
  %112 = load i64, i64* %12, align 8
  %113 = add i64 %112, -144
  %114 = load i64, i64* %3, align 8
  store i64 %113, i64* %9, align 8, !tbaa !1240
  %115 = add i64 %112, -152
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116
  %118 = add i64 %112, -160
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119
  %121 = add i32 %120, %117
  %122 = inttoptr i64 %118 to i32*
  store i32 %121, i32* %122
  %123 = add i64 %112, -16
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124
  %126 = add i64 %125, 616
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %10, align 8, !tbaa !1240
  %129 = add i64 %114, 25910
  %130 = add i64 %114, 41
  %131 = load i64, i64* %11, align 8, !tbaa !1240
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133
  store i64 %132, i64* %11, align 8, !tbaa !1240
  %134 = tail call %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* nonnull %0, i64 %129, %struct.Memory* %111)
  %135 = load i64, i64* %12, align 8
  %136 = add i64 %135, -16
  %137 = load i64, i64* %3, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %139, 616
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %8, align 8, !tbaa !1240
  %143 = add i64 %142, 60
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144
  %146 = icmp eq i32 %145, 0
  %147 = add i64 %135, -176
  %148 = load i32, i32* %5, align 4
  %149 = inttoptr i64 %147 to i32*
  store i32 %148, i32* %149
  %150 = select i1 %146, i64 70, i64 27
  %151 = add i64 %137, %150
  br i1 %146, label %block_4044f9, label %block_4044ce

block_4043d0:                                     ; preds = %block_404350
  %152 = inttoptr i64 %62 to i32*
  %153 = load i32, i32* %152
  %154 = add i32 %153, 4
  %155 = add i64 %72, 15
  %156 = inttoptr i64 %62 to i32*
  store i32 %154, i32* %156
  br label %block_4043df

block_4044ce:                                     ; preds = %block_404436
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3698), i64* %9, align 8, !tbaa !1240
  %157 = load i64, i64* @stderr
  store i64 %157, i64* %10, align 8, !tbaa !1240
  %158 = add i64 %151, 25
  %159 = load i64, i64* %11, align 8, !tbaa !1240
  %160 = add i64 %159, -8
  %161 = inttoptr i64 %160 to i64*
  store i64 %158, i64* %161
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %163 = load i64, i64* %162, align 8, !alias.scope !2918, !noalias !2921
  %164 = load i64, i64* %352, align 8, !alias.scope !2918, !noalias !2921
  %165 = load i64, i64* %353, align 8, !alias.scope !2918, !noalias !2921
  %166 = inttoptr i64 %159 to i64*
  %167 = load i64, i64* %166
  %168 = add i64 %159, 8
  %169 = inttoptr i64 %168 to i64*
  %170 = load i64, i64* %169
  %171 = add i64 %159, 16
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  %174 = add i64 %159, 24
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = add i64 %159, 32
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = add i64 %159, 40
  %181 = inttoptr i64 %180 to i64*
  %182 = load i64, i64* %181
  %183 = add i64 %159, 48
  %184 = inttoptr i64 %183 to i64*
  %185 = load i64, i64* %184
  %186 = add i64 %159, 56
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = add i64 %159, 64
  %190 = inttoptr i64 %189 to i64*
  %191 = load i64, i64* %190
  %192 = add i64 %159, 72
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193
  %195 = inttoptr i64 %160 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %3, align 8, !alias.scope !2918, !noalias !2921
  store i64 %159, i64* %11, align 8, !alias.scope !2918, !noalias !2921
  %197 = tail call i64 @fprintf(i64 %157, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3698), i64 %142, i64 %163, i64 %164, i64 %165, i64 %167, i64 %170, i64 %173, i64 %176, i64 %179, i64 %182, i64 %185, i64 %188, i64 %191, i64 %194), !noalias !2918
  %198 = load i64, i64* %12, align 8
  %199 = add i64 %198, -4
  %200 = inttoptr i64 %199 to i32*
  store i32 1, i32* %200
  %201 = add i64 %198, -180
  %202 = trunc i64 %197 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  br label %block_40458d

block_40458d:                                     ; preds = %block_40450c, %block_4044ce
  %204 = phi i64 [ %297, %block_40450c ], [ %198, %block_4044ce ]
  %205 = phi %struct.Memory* [ %296, %block_40450c ], [ %134, %block_4044ce ]
  %206 = add i64 %204, -4
  %207 = inttoptr i64 %206 to i32*
  %208 = load i32, i32* %207
  %209 = zext i32 %208 to i64
  store i64 %209, i64* %6, align 8, !tbaa !1240
  %210 = load i64, i64* %11, align 8
  %211 = add i64 %210, 192
  %212 = icmp ugt i64 %210, -193
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %18, align 1, !tbaa !1264
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #10
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %19, align 1, !tbaa !1278
  %220 = xor i64 %211, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %20, align 1, !tbaa !1279
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %21, align 1, !tbaa !1280
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %22, align 1, !tbaa !1281
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %226
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %23, align 1, !tbaa !1282
  %233 = add i64 %210, 200
  %234 = inttoptr i64 %211 to i64*
  %235 = load i64, i64* %234
  store i64 %235, i64* %12, align 8, !tbaa !1240
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %3, align 8, !tbaa !1240
  %238 = add i64 %210, 208
  store i64 %238, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %205

block_40450c:                                     ; preds = %block_404423
  %239 = add i64 %301, -168
  store i64 %239, i64* %8, align 8, !tbaa !1240
  store i64 %308, i64* %10, align 8, !tbaa !1240
  %240 = add i64 %308, 616
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = inttoptr i64 %242 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %9, align 8, !tbaa !1240
  %245 = add i64 %317, 28516
  %246 = add i64 %317, 30
  %247 = load i64, i64* %11, align 8, !tbaa !1240
  %248 = add i64 %247, -8
  %249 = inttoptr i64 %248 to i64*
  store i64 %246, i64* %249
  store i64 %248, i64* %11, align 8, !tbaa !1240
  %250 = tail call %struct.Memory* @sub_40b470_computeChecksum(%struct.State* nonnull %0, i64 %245, %struct.Memory* %302)
  %251 = load i64, i64* %12, align 8
  %252 = add i64 %251, -16
  %253 = load i64, i64* %3, align 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  %256 = add i64 %255, 616
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  %259 = add i64 %258, 40
  %260 = inttoptr i64 %259 to i32*
  %261 = load i32, i32* %260
  %262 = add i64 %255, 556
  %263 = inttoptr i64 %262 to i32*
  store i32 %261, i32* %263
  %264 = inttoptr i64 %252 to i64*
  %265 = load i64, i64* %264
  %266 = add i64 %265, 556
  %267 = inttoptr i64 %266 to i32*
  %268 = load i32, i32* %267
  %269 = add i64 %265, 560
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  %272 = add i32 %271, %268
  %273 = inttoptr i64 %269 to i32*
  store i32 %272, i32* %273
  %274 = inttoptr i64 %252 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %275, 616
  %277 = inttoptr i64 %276 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %10, align 8, !tbaa !1240
  %279 = add i64 %275, 548
  %280 = inttoptr i64 %279 to i32*
  %281 = load i32, i32* %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %9, align 8, !tbaa !1240
  %283 = add i64 %275, 540
  %284 = inttoptr i64 %283 to i32*
  %285 = load i32, i32* %284
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %8, align 8, !tbaa !1240
  %287 = load i64, i64* %12, align 8
  %288 = add i64 %287, -184
  %289 = load i32, i32* %5, align 4
  %290 = inttoptr i64 %288 to i32*
  store i32 %289, i32* %290
  %291 = add i64 %253, 29446
  %292 = add i64 %253, 92
  %293 = load i64, i64* %11, align 8, !tbaa !1240
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %295
  store i64 %294, i64* %11, align 8, !tbaa !1240
  %296 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %291, %struct.Memory* %250)
  %297 = load i64, i64* %12, align 8
  %298 = add i64 %297, -4
  %299 = inttoptr i64 %298 to i32*
  store i32 0, i32* %299
  br label %block_40458d

block_404423:                                     ; preds = %block_4043df, %block_4044f9
  %300 = phi i64 [ %350, %block_4043df ], [ %78, %block_4044f9 ]
  %301 = phi i64 [ %345, %block_4043df ], [ %135, %block_4044f9 ]
  %302 = phi %struct.Memory* [ %344, %block_4043df ], [ %134, %block_4044f9 ]
  %303 = add i64 %301, -20
  %304 = inttoptr i64 %303 to i32*
  %305 = load i32, i32* %304
  %306 = add i64 %301, -16
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %7, align 8, !tbaa !1240
  %309 = add i64 %308, 4488
  %310 = inttoptr i64 %309 to i32*
  %311 = load i32, i32* %310
  %312 = sub i32 %305, %311
  %313 = icmp ult i32 %305, %311
  %314 = icmp eq i32 %312, 0
  %315 = or i1 %314, %313
  %316 = select i1 %315, i64 19, i64 233
  %317 = add i64 %300, %316
  br i1 %315, label %block_404436, label %block_40450c

block_4043df:                                     ; preds = %block_4043d0, %block_404350
  %318 = phi i64 [ %72, %block_404350 ], [ %155, %block_4043d0 ]
  %319 = phi %struct.Memory* [ %2, %block_404350 ], [ %2, %block_4043d0 ]
  %320 = inttoptr i64 %62 to i32*
  %321 = load i32, i32* %320
  %322 = lshr i32 %321, 2
  %323 = add i64 %57, -152
  %324 = inttoptr i64 %323 to i32*
  store i32 %322, i32* %324
  %325 = add i64 %57, -16
  %326 = inttoptr i64 %325 to i64*
  %327 = load i64, i64* %326
  %328 = add i64 %327, 616
  %329 = inttoptr i64 %328 to i64*
  %330 = load i64, i64* %329
  store i64 %330, i64* %10, align 8, !tbaa !1240
  %331 = add i64 %327, 548
  %332 = inttoptr i64 %331 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %9, align 8, !tbaa !1240
  %335 = add i64 %327, 540
  %336 = inttoptr i64 %335 to i32*
  %337 = load i32, i32* %336
  %338 = zext i32 %337 to i64
  store i64 %338, i64* %8, align 8, !tbaa !1240
  %339 = add i64 %318, 29777
  %340 = add i64 %318, 51
  %341 = load i64, i64* %11, align 8, !tbaa !1240
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343
  store i64 %342, i64* %11, align 8, !tbaa !1240
  %344 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull %0, i64 %339, %struct.Memory* %319)
  %345 = load i64, i64* %12, align 8
  %346 = add i64 %345, -160
  %347 = load i64, i64* %3, align 8
  %348 = inttoptr i64 %346 to i32*
  store i32 0, i32* %348
  %349 = add i64 %345, -20
  %350 = add i64 %347, 17
  %351 = inttoptr i64 %349 to i32*
  store i32 1, i32* %351
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_404423
}

; Function Attrs: noinline
define %struct.Memory* @sub_4068a0_NewAdcViewCntl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4068a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %16 = load i64, i64* %14, align 8
  %17 = load i64, i64* %13, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19
  store i64 %18, i64* %14, align 8, !tbaa !1240
  %20 = add i64 %17, -200
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 4520, i64* %9, align 8, !tbaa !1240
  %27 = add i64 %17, -24
  %28 = load i64, i64* %12, align 8
  %29 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %29
  %30 = add i64 %17, -28
  %31 = load i32, i32* %7, align 4
  %32 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %32
  store i64 4520, i64* %12, align 8, !tbaa !1240
  %33 = add i64 %1, 33
  %34 = add i64 %17, -208
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %37 = inttoptr i64 %34 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %3, align 8, !alias.scope !2923, !noalias !2926
  store i64 %20, i64* %13, align 8, !alias.scope !2923, !noalias !2926
  %39 = tail call i64 @malloc(i64 4520)
  %40 = load i64, i64* %14, align 8
  %41 = add i64 %40, -32
  %42 = load i64, i64* %3, align 8
  %43 = inttoptr i64 %41 to i64*
  store i64 %39, i64* %43
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 15, i64 28
  %48 = add i64 %42, %47
  br i1 %46, label %block_4068d0, label %block_4068dd

block_406dfc:                                     ; preds = %block_406d64
  %49 = add i64 %294, 4224
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %12, align 8, !tbaa !1240
  %52 = add i64 %300, 28
  %53 = load i64, i64* %13, align 8, !tbaa !1240
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55
  %56 = load i64, i64* %543, align 8, !alias.scope !2928, !noalias !2931
  %57 = load i64, i64* %545, align 8, !alias.scope !2928, !noalias !2931
  %58 = load i64, i64* %15, align 8, !alias.scope !2928, !noalias !2931
  %59 = inttoptr i64 %53 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %53, 8
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %53, 16
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %53, 24
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  %70 = add i64 %53, 32
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %53, 40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %53, 48
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %53, 56
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  %82 = add i64 %53, 64
  %83 = inttoptr i64 %82 to i64*
  %84 = load i64, i64* %83
  %85 = add i64 %53, 72
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  %88 = inttoptr i64 %54 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %3, align 8, !alias.scope !2928, !noalias !2931
  store i64 %53, i64* %13, align 8, !alias.scope !2928, !noalias !2931
  %90 = tail call i64 @fprintf(i64 %51, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4399), i64 %290, i64 %56, i64 %57, i64 %58, i64 %60, i64 %63, i64 %66, i64 %69, i64 %72, i64 %75, i64 %78, i64 %81, i64 %84, i64 %87), !noalias !2928
  %91 = load i64, i64* %14, align 8
  %92 = add i64 %91, -32
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  %95 = add i64 %94, 512
  %96 = inttoptr i64 %95 to i32*
  store i32 5, i32* %96
  %97 = inttoptr i64 %92 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %11, align 8, !tbaa !1240
  %99 = add i64 %91, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %98, i64* %100
  %101 = add i64 %91, -156
  %102 = trunc i64 %90 to i32
  %103 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %103
  br label %block_4072f9

block_40707e:                                     ; preds = %block_40706b
  %104 = add i32 %837, 1
  %105 = shl nuw nsw i64 %838, 2
  %106 = add nuw nsw i64 %105, 4312
  %107 = add i64 %106, %840
  %108 = inttoptr i64 %107 to i32*
  store i32 %104, i32* %108
  %109 = inttoptr i64 %831 to i32*
  %110 = load i32, i32* %109
  %111 = add i32 %110, 1
  %112 = inttoptr i64 %831 to i32*
  store i32 %111, i32* %112
  %113 = add i64 %846, -19
  br label %block_40706b

block_406f7b:                                     ; preds = %block_406f68
  %114 = zext i32 %850 to i64
  %115 = shl nuw nsw i64 %114, 3
  %116 = add nuw nsw i64 %115, 4280
  %117 = add i64 %116, %852
  %118 = inttoptr i64 %117 to i64*
  store i64 0, i64* %118
  %119 = inttoptr i64 %322 to i64*
  %120 = load i64, i64* %119
  %121 = inttoptr i64 %820 to i32*
  %122 = load i32, i32* %121
  %123 = zext i32 %122 to i64
  %124 = shl nuw nsw i64 %123, 3
  %125 = add nuw nsw i64 %124, 4392
  %126 = add i64 %125, %120
  %127 = inttoptr i64 %126 to i64*
  store i64 0, i64* %127
  %128 = inttoptr i64 %322 to i64*
  %129 = load i64, i64* %128
  %130 = inttoptr i64 %820 to i32*
  %131 = load i32, i32* %130
  %132 = zext i32 %131 to i64
  %133 = shl nuw nsw i64 %132, 3
  %134 = add nuw nsw i64 %133, 4424
  %135 = add i64 %134, %129
  %136 = inttoptr i64 %135 to i64*
  store i64 0, i64* %136
  %137 = inttoptr i64 %820 to i32*
  %138 = load i32, i32* %137
  %139 = add i32 %138, 1
  %140 = inttoptr i64 %820 to i32*
  store i32 %139, i32* %140
  %141 = add i64 %858, -19
  br label %block_406f68

block_4072f9:                                     ; preds = %block_407180, %block_406b85, %block_407013, %block_406f16, %block_4070f7, %block_406d49, %block_407276, %block_4068d0, %block_406e67, %block_406dfc
  %142 = phi i64 [ %800, %block_407276 ], [ %1546, %block_407180 ], [ %1313, %block_4070f7 ], [ %1424, %block_407013 ], [ %1369, %block_406f16 ], [ %219, %block_406e67 ], [ %91, %block_406dfc ], [ %1169, %block_406d49 ], [ %667, %block_406b85 ], [ %40, %block_4068d0 ]
  %143 = phi %struct.Memory* [ %700, %block_407276 ], [ %835, %block_407180 ], [ %835, %block_4070f7 ], [ %980, %block_407013 ], [ %302, %block_406f16 ], [ %270, %block_406e67 ], [ %270, %block_406dfc ], [ %1168, %block_406d49 ], [ %666, %block_406b85 ], [ %2, %block_4068d0 ]
  %144 = add i64 %142, -8
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  store i64 %146, i64* %8, align 8, !tbaa !1240
  %147 = load i64, i64* %13, align 8
  %148 = add i64 %147, 192
  %149 = icmp ugt i64 %147, -193
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %21, align 1, !tbaa !1264
  %151 = trunc i64 %148 to i32
  %152 = and i32 %151, 255
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #10
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %22, align 1, !tbaa !1278
  %157 = xor i64 %148, %147
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* %23, align 1, !tbaa !1279
  %161 = icmp eq i64 %148, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %24, align 1, !tbaa !1280
  %163 = lshr i64 %148, 63
  %164 = trunc i64 %163 to i8
  store i8 %164, i8* %25, align 1, !tbaa !1281
  %165 = lshr i64 %147, 63
  %166 = xor i64 %163, %165
  %167 = add nuw nsw i64 %166, %163
  %168 = icmp eq i64 %167, 2
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %26, align 1, !tbaa !1282
  %170 = add i64 %147, 200
  %171 = inttoptr i64 %148 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %14, align 8, !tbaa !1240
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %3, align 8, !tbaa !1240
  %175 = add i64 %147, 208
  store i64 %175, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %143

block_406e67:                                     ; preds = %block_406e39
  %176 = add i64 %1204, 4224
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %12, align 8, !tbaa !1240
  %179 = add i64 %1210, 28
  %180 = load i64, i64* %13, align 8, !tbaa !1240
  %181 = add i64 %180, -8
  %182 = inttoptr i64 %181 to i64*
  store i64 %179, i64* %182
  %183 = load i64, i64* %544, align 8, !alias.scope !2933, !noalias !2936
  %184 = load i64, i64* %543, align 8, !alias.scope !2933, !noalias !2936
  %185 = load i64, i64* %545, align 8, !alias.scope !2933, !noalias !2936
  %186 = load i64, i64* %15, align 8, !alias.scope !2933, !noalias !2936
  %187 = inttoptr i64 %180 to i64*
  %188 = load i64, i64* %187
  %189 = add i64 %180, 8
  %190 = inttoptr i64 %189 to i64*
  %191 = load i64, i64* %190
  %192 = add i64 %180, 16
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193
  %195 = add i64 %180, 24
  %196 = inttoptr i64 %195 to i64*
  %197 = load i64, i64* %196
  %198 = add i64 %180, 32
  %199 = inttoptr i64 %198 to i64*
  %200 = load i64, i64* %199
  %201 = add i64 %180, 40
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  %204 = add i64 %180, 48
  %205 = inttoptr i64 %204 to i64*
  %206 = load i64, i64* %205
  %207 = add i64 %180, 56
  %208 = inttoptr i64 %207 to i64*
  %209 = load i64, i64* %208
  %210 = add i64 %180, 64
  %211 = inttoptr i64 %210 to i64*
  %212 = load i64, i64* %211
  %213 = add i64 %180, 72
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = inttoptr i64 %181 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %3, align 8, !alias.scope !2933, !noalias !2936
  store i64 %180, i64* %13, align 8, !alias.scope !2933, !noalias !2936
  %218 = tail call i64 @fprintf(i64 %178, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4447), i64 %183, i64 %184, i64 %185, i64 %186, i64 %188, i64 %191, i64 %194, i64 %197, i64 %200, i64 %203, i64 %206, i64 %209, i64 %212, i64 %215), !noalias !2933
  %219 = load i64, i64* %14, align 8
  %220 = add i64 %219, -32
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %222, 512
  %224 = inttoptr i64 %223 to i32*
  store i32 5, i32* %224
  %225 = inttoptr i64 %220 to i64*
  %226 = load i64, i64* %225
  store i64 %226, i64* %11, align 8, !tbaa !1240
  %227 = add i64 %219, -8
  %228 = inttoptr i64 %227 to i64*
  store i64 %226, i64* %228
  %229 = add i64 %219, -160
  %230 = trunc i64 %218 to i32
  %231 = inttoptr i64 %229 to i32*
  store i32 %230, i32* %231
  br label %block_4072f9

block_406d64:                                     ; preds = %block_406ba0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4388), i64* %10, align 8, !tbaa !1240
  %232 = add i64 %1178, 3712
  store i64 %1178, i64* %11, align 8, !tbaa !1240
  %233 = add i64 %1178, 528
  %234 = inttoptr i64 %233 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %9, align 8, !tbaa !1240
  store i64 %232, i64* %12, align 8, !tbaa !1240
  %237 = add i64 %1184, -1300
  %238 = add i64 %1184, 42
  %239 = load i64, i64* %13, align 8, !tbaa !1240
  %240 = add i64 %239, -8
  %241 = inttoptr i64 %240 to i64*
  store i64 %238, i64* %241
  store i64 %240, i64* %13, align 8, !tbaa !1240
  %242 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %237, %struct.Memory* %1168)
  %243 = load i64, i64* %14, align 8
  %244 = add i64 %243, -57
  %245 = load i64, i64* %3, align 8
  %246 = add i64 %243, -32
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %248, 3712
  %250 = add i64 %245, 22
  %251 = load i64, i64* %13, align 8, !tbaa !1240
  %252 = add i64 %251, -8
  %253 = inttoptr i64 %252 to i64*
  store i64 %250, i64* %253
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %3, align 8, !alias.scope !2938, !noalias !2941
  store i64 %251, i64* %13, align 8, !alias.scope !2938, !noalias !2941
  %256 = tail call i64 @strcat(i64 %249, i64 %244)
  %257 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1470), i64* %11, align 8, !tbaa !1240
  %258 = load i64, i64* %14, align 8
  %259 = add i64 %258, -32
  %260 = inttoptr i64 %259 to i64*
  %261 = load i64, i64* %260
  %262 = add i64 %261, 3712
  store i64 %262, i64* %10, align 8, !tbaa !1240
  store i64 %262, i64* %12, align 8, !tbaa !1240
  %263 = add i64 %258, -152
  %264 = inttoptr i64 %263 to i64*
  store i64 %256, i64* %264
  %265 = add i64 %257, -1476
  %266 = add i64 %257, 36
  %267 = load i64, i64* %13, align 8, !tbaa !1240
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %266, i64* %269
  store i64 %268, i64* %13, align 8, !tbaa !1240
  %270 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %265, %struct.Memory* %242)
  %271 = load i64, i64* %3, align 8
  store i64 24576, i64* %9, align 8, !tbaa !1240
  %272 = load i64, i64* %14, align 8
  %273 = add i64 %272, -32
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274
  %276 = add i64 %275, 4272
  %277 = load i64, i64* %8, align 8
  %278 = inttoptr i64 %276 to i64*
  store i64 %277, i64* %278
  %279 = add i64 %271, 23
  %280 = load i64, i64* %13, align 8, !tbaa !1240
  %281 = add i64 %280, -8
  %282 = inttoptr i64 %281 to i64*
  store i64 %279, i64* %282
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283
  store i64 %284, i64* %3, align 8, !alias.scope !2943, !noalias !2946
  store i64 %280, i64* %13, align 8, !alias.scope !2943, !noalias !2946
  %285 = tail call i64 @malloc(i64 24576)
  %286 = load i64, i64* %14, align 8
  %287 = add i64 %286, -32
  %288 = load i64, i64* %3, align 8
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %10, align 8, !tbaa !1240
  %291 = add i64 %290, 632
  %292 = inttoptr i64 %291 to i64*
  store i64 %285, i64* %292
  %293 = inttoptr i64 %287 to i64*
  %294 = load i64, i64* %293
  %295 = add i64 %294, 632
  %296 = inttoptr i64 %295 to i64*
  %297 = load i64, i64* %296
  %298 = icmp eq i64 %297, 0
  %299 = select i1 %298, i64 29, i64 90
  %300 = add i64 %288, %299
  br i1 %298, label %block_406dfc, label %block_406e39

block_406ee2:                                     ; preds = %block_406ea4, %block_406ed9
  %301 = phi i64 [ %1244, %block_406ea4 ], [ %816, %block_406ed9 ]
  %302 = phi %struct.Memory* [ %270, %block_406ea4 ], [ %270, %block_406ed9 ]
  %303 = inttoptr i64 %1235 to i64*
  %304 = load i64, i64* %303
  %305 = add i64 %304, 552
  %306 = inttoptr i64 %305 to i32*
  %307 = load i32, i32* %306
  %308 = inttoptr i64 %1233 to i32*
  %309 = load i32, i32* %308
  %310 = sext i32 %307 to i64
  %311 = sext i32 %309 to i64
  %312 = mul nsw i64 %311, %310
  %313 = and i64 %312, 4294967295
  store i64 %313, i64* %9, align 8, !tbaa !1240
  %314 = add i64 %301, 23
  %315 = load i64, i64* %13, align 8, !tbaa !1240
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %314, i64* %317
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318
  store i64 %319, i64* %3, align 8, !alias.scope !2948, !noalias !2951
  store i64 %315, i64* %13, align 8, !alias.scope !2948, !noalias !2951
  %320 = tail call i64 @malloc(i64 %313)
  %321 = load i64, i64* %14, align 8
  %322 = add i64 %321, -32
  %323 = load i64, i64* %3, align 8
  %324 = inttoptr i64 %322 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %325, 608
  %327 = inttoptr i64 %326 to i64*
  store i64 %320, i64* %327
  %328 = inttoptr i64 %322 to i64*
  %329 = load i64, i64* %328
  %330 = add i64 %329, 608
  %331 = inttoptr i64 %330 to i64*
  %332 = load i64, i64* %331
  %333 = icmp eq i64 %332, 0
  %334 = select i1 %333, i64 29, i64 90
  %335 = add i64 %323, %334
  br i1 %333, label %block_406f16, label %block_406f53

block_4068d0:                                     ; preds = %block_4068a0
  %336 = add i64 %40, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 0, i64* %337
  br label %block_4072f9

block_4068dd:                                     ; preds = %block_4068a0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 838), i64* %11, align 8, !tbaa !1240
  %338 = add i64 %40, -57
  %339 = add i64 %40, -16
  %340 = inttoptr i64 %339 to i64*
  %341 = load i64, i64* %340
  %342 = inttoptr i64 %341 to i32*
  %343 = load i32, i32* %342
  %344 = add i64 %45, 532
  %345 = inttoptr i64 %344 to i32*
  store i32 %343, i32* %345
  %346 = add i64 %40, -20
  %347 = inttoptr i64 %346 to i32*
  %348 = load i32, i32* %347
  %349 = inttoptr i64 %41 to i64*
  %350 = load i64, i64* %349
  %351 = add i64 %350, 528
  %352 = inttoptr i64 %351 to i32*
  store i32 %348, i32* %352
  %353 = inttoptr i64 %41 to i64*
  %354 = load i64, i64* %353
  %355 = add i64 %354, 512
  %356 = inttoptr i64 %355 to i32*
  store i32 0, i32* %356
  %357 = inttoptr i64 %41 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %358, 520
  %360 = inttoptr i64 %359 to i32*
  store i32 0, i32* %360
  %361 = inttoptr i64 %41 to i64*
  %362 = load i64, i64* %361
  %363 = inttoptr i64 %339 to i64*
  %364 = load i64, i64* %363
  %365 = add i64 %364, 5
  %366 = add i64 %40, -72
  %367 = inttoptr i64 %366 to i64*
  store i64 %338, i64* %367
  %368 = load i64, i64* %14, align 8
  %369 = add i64 %368, -80
  %370 = load i64, i64* %11, align 8
  %371 = inttoptr i64 %369 to i64*
  store i64 %370, i64* %371
  %372 = add i64 %48, 102
  %373 = load i64, i64* %13, align 8, !tbaa !1240
  %374 = add i64 %373, -8
  %375 = inttoptr i64 %374 to i64*
  store i64 %372, i64* %375
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376
  store i64 %377, i64* %3, align 8, !alias.scope !2953, !noalias !2956
  store i64 %373, i64* %13, align 8, !alias.scope !2953, !noalias !2956
  %378 = tail call i64 @strcpy(i64 %362, i64 %365), !noalias !2953
  store i64 %378, i64* %36, align 8, !alias.scope !2953, !noalias !2956
  %379 = load i64, i64* %14, align 8
  %380 = add i64 %379, -16
  %381 = load i64, i64* %3, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %383, 1032
  %385 = inttoptr i64 %384 to i32*
  %386 = load i32, i32* %385
  %387 = add i64 %379, -32
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %389, 536
  %391 = inttoptr i64 %390 to i32*
  store i32 %386, i32* %391
  %392 = inttoptr i64 %380 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %393, 1032
  %395 = inttoptr i64 %394 to i32*
  %396 = load i32, i32* %395
  %397 = inttoptr i64 %387 to i64*
  %398 = load i64, i64* %397
  %399 = add i64 %398, 544
  %400 = inttoptr i64 %399 to i32*
  store i32 %396, i32* %400
  %401 = inttoptr i64 %380 to i64*
  %402 = load i64, i64* %401
  %403 = add i64 %402, 1036
  %404 = inttoptr i64 %403 to i32*
  %405 = load i32, i32* %404
  %406 = inttoptr i64 %387 to i64*
  %407 = load i64, i64* %406
  %408 = add i64 %407, 540
  %409 = inttoptr i64 %408 to i32*
  store i32 %405, i32* %409
  %410 = inttoptr i64 %380 to i64*
  %411 = load i64, i64* %410
  %412 = add i64 %411, 1040
  %413 = inttoptr i64 %412 to i32*
  %414 = load i32, i32* %413
  %415 = inttoptr i64 %387 to i64*
  %416 = load i64, i64* %415
  %417 = add i64 %416, 552
  %418 = inttoptr i64 %417 to i32*
  store i32 %414, i32* %418
  %419 = inttoptr i64 %387 to i64*
  %420 = load i64, i64* %419
  %421 = add i64 %420, 544
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422
  %424 = shl i32 %423, 2
  %425 = load i64, i64* %14, align 8
  %426 = add i64 %425, -32
  %427 = inttoptr i64 %426 to i64*
  %428 = load i64, i64* %427
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %430 = add i64 %428, 540
  %431 = inttoptr i64 %430 to i32*
  %432 = load i32, i32* %431
  %433 = shl i32 %432, 3
  %434 = add i32 %433, %424
  %435 = add i64 %428, 584
  %436 = inttoptr i64 %435 to i32*
  store i32 %434, i32* %436
  %437 = inttoptr i64 %426 to i64*
  %438 = load i64, i64* %437
  %439 = add i64 %438, 548
  %440 = inttoptr i64 %439 to i32*
  %441 = load i32, i32* %440
  %442 = shl i32 %441, 2
  %443 = load i64, i64* %14, align 8
  %444 = add i64 %443, -32
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %446, 540
  %448 = inttoptr i64 %447 to i32*
  %449 = load i32, i32* %448
  %450 = shl i32 %449, 3
  %451 = zext i32 %450 to i64
  store i64 %451, i64* %429, align 8, !tbaa !1240
  %452 = add i32 %450, %442
  %453 = add i64 %446, 588
  %454 = inttoptr i64 %453 to i32*
  store i32 %452, i32* %454
  %455 = inttoptr i64 %444 to i64*
  %456 = load i64, i64* %455
  %457 = add i64 %456, 576
  %458 = inttoptr i64 %457 to i64*
  store i64 0, i64* %458
  %459 = inttoptr i64 %444 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %460, 4496
  %462 = inttoptr i64 %461 to i64*
  store i64 0, i64* %462
  %463 = load i64, i64* %14, align 8
  %464 = add i64 %463, -32
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %466, 4504
  %468 = inttoptr i64 %467 to i32*
  store i32 0, i32* %468
  %469 = inttoptr i64 %464 to i64*
  %470 = load i64, i64* %469
  %471 = add i64 %470, 4508
  %472 = inttoptr i64 %471 to i32*
  store i32 0, i32* %472
  %473 = inttoptr i64 %464 to i64*
  %474 = load i64, i64* %473
  %475 = add i64 %474, 4512
  %476 = inttoptr i64 %475 to i32*
  store i32 0, i32* %476
  %477 = inttoptr i64 %464 to i64*
  %478 = load i64, i64* %477
  %479 = add i64 %478, 4516
  %480 = inttoptr i64 %479 to i32*
  store i32 0, i32* %480
  %481 = inttoptr i64 %464 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %482, 560
  %484 = inttoptr i64 %483 to i32*
  store i32 0, i32* %484
  %485 = add i64 %463, -16
  %486 = inttoptr i64 %485 to i64*
  %487 = load i64, i64* %486
  %488 = add i64 %487, 1044
  %489 = inttoptr i64 %488 to i32*
  %490 = load i32, i32* %489
  %491 = inttoptr i64 %464 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %492, 592
  %494 = inttoptr i64 %493 to i32*
  store i32 %490, i32* %494
  %495 = inttoptr i64 %485 to i64*
  %496 = load i64, i64* %495
  %497 = add i64 %496, 1048
  %498 = inttoptr i64 %497 to i32*
  %499 = load i32, i32* %498
  %500 = zext i32 %499 to i64
  store i64 %500, i64* %9, align 8, !tbaa !1240
  %501 = inttoptr i64 %464 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %502, 524
  %504 = inttoptr i64 %503 to i32*
  store i32 %499, i32* %504
  %505 = inttoptr i64 %464 to i64*
  %506 = load i64, i64* %505
  %507 = add i64 %506, 1152
  %508 = load i64, i64* %14, align 8
  %509 = add i64 %508, -16
  %510 = inttoptr i64 %509 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %511, 517
  %513 = add i64 %508, -88
  %514 = load i64, i64* %8, align 8
  %515 = inttoptr i64 %513 to i64*
  store i64 %514, i64* %515
  %516 = add i64 %381, 336
  %517 = load i64, i64* %13, align 8, !tbaa !1240
  %518 = add i64 %517, -8
  %519 = inttoptr i64 %518 to i64*
  store i64 %516, i64* %519
  %520 = inttoptr i64 %518 to i64*
  %521 = load i64, i64* %520
  store i64 %521, i64* %3, align 8, !alias.scope !2958, !noalias !2961
  store i64 %517, i64* %13, align 8, !alias.scope !2958, !noalias !2961
  %522 = tail call i64 @strcpy(i64 %507, i64 %512)
  %523 = load i64, i64* %14, align 8
  %524 = add i64 %523, -16
  %525 = load i64, i64* %3, align 8
  %526 = inttoptr i64 %524 to i64*
  %527 = load i64, i64* %526
  %528 = inttoptr i64 %527 to i32*
  %529 = load i32, i32* %528
  %530 = zext i32 %529 to i64
  %531 = add i64 %523, -72
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %523, -80
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %523, -96
  %538 = inttoptr i64 %537 to i64*
  store i64 %522, i64* %538
  %539 = add i64 %525, 25
  %540 = load i64, i64* %13, align 8, !tbaa !1240
  %541 = add i64 %540, -8
  %542 = inttoptr i64 %541 to i64*
  store i64 %539, i64* %542
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %546 = load i64, i64* %543, align 8, !alias.scope !2963, !noalias !2966
  %547 = load i64, i64* %545, align 8, !alias.scope !2963, !noalias !2966
  %548 = load i64, i64* %15, align 8, !alias.scope !2963, !noalias !2966
  %549 = inttoptr i64 %540 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %540, 8
  %552 = inttoptr i64 %551 to i64*
  %553 = load i64, i64* %552
  %554 = add i64 %540, 16
  %555 = inttoptr i64 %554 to i64*
  %556 = load i64, i64* %555
  %557 = add i64 %540, 24
  %558 = inttoptr i64 %557 to i64*
  %559 = load i64, i64* %558
  %560 = add i64 %540, 32
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %540, 40
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %540, 48
  %567 = inttoptr i64 %566 to i64*
  %568 = load i64, i64* %567
  %569 = add i64 %540, 56
  %570 = inttoptr i64 %569 to i64*
  %571 = load i64, i64* %570
  %572 = add i64 %540, 64
  %573 = inttoptr i64 %572 to i64*
  %574 = load i64, i64* %573
  %575 = add i64 %540, 72
  %576 = inttoptr i64 %575 to i64*
  %577 = load i64, i64* %576
  %578 = inttoptr i64 %541 to i64*
  %579 = load i64, i64* %578
  store i64 %579, i64* %3, align 8, !alias.scope !2963, !noalias !2966
  store i64 %540, i64* %13, align 8, !alias.scope !2963, !noalias !2966
  %580 = tail call i64 @sprintf(i64 %533, i64 %536, i64 %530, i64 %546, i64 %547, i64 %548, i64 %550, i64 %553, i64 %556, i64 %559, i64 %562, i64 %565, i64 %568, i64 %571, i64 %574, i64 %577), !noalias !2963
  %581 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4348), i64* %10, align 8, !tbaa !1240
  %582 = load i64, i64* %14, align 8
  %583 = add i64 %582, -32
  %584 = inttoptr i64 %583 to i64*
  %585 = load i64, i64* %584
  %586 = add i64 %585, 640
  store i64 %585, i64* %15, align 8, !tbaa !1240
  %587 = add i64 %585, 528
  %588 = inttoptr i64 %587 to i32*
  %589 = load i32, i32* %588
  %590 = zext i32 %589 to i64
  store i64 %590, i64* %9, align 8, !tbaa !1240
  %591 = add i64 %582, -104
  %592 = inttoptr i64 %591 to i64*
  store i64 %585, i64* %592
  store i64 %586, i64* %12, align 8, !tbaa !1240
  %593 = inttoptr i64 %591 to i64*
  %594 = load i64, i64* %593
  store i64 %594, i64* %11, align 8, !tbaa !1240
  %595 = add i64 %582, -108
  %596 = trunc i64 %580 to i32
  %597 = inttoptr i64 %595 to i32*
  store i32 %596, i32* %597
  %598 = add i64 %581, -604
  %599 = add i64 %581, 55
  %600 = load i64, i64* %13, align 8, !tbaa !1240
  %601 = add i64 %600, -8
  %602 = inttoptr i64 %601 to i64*
  store i64 %599, i64* %602
  store i64 %601, i64* %13, align 8, !tbaa !1240
  %603 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %598, %struct.Memory* %2)
  %604 = load i64, i64* %14, align 8
  %605 = add i64 %604, -57
  %606 = load i64, i64* %3, align 8
  %607 = add i64 %604, -32
  %608 = inttoptr i64 %607 to i64*
  %609 = load i64, i64* %608
  %610 = add i64 %609, 640
  %611 = add i64 %606, 23
  %612 = load i64, i64* %13, align 8, !tbaa !1240
  %613 = add i64 %612, -8
  %614 = inttoptr i64 %613 to i64*
  store i64 %611, i64* %614
  %615 = inttoptr i64 %613 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %3, align 8, !alias.scope !2968, !noalias !2971
  store i64 %612, i64* %13, align 8, !alias.scope !2968, !noalias !2971
  %617 = tail call i64 @strcat(i64 %610, i64 %605)
  %618 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4930), i64* %11, align 8, !tbaa !1240
  %619 = load i64, i64* %14, align 8
  %620 = add i64 %619, -32
  %621 = inttoptr i64 %620 to i64*
  %622 = load i64, i64* %621
  %623 = add i64 %622, 640
  store i64 %623, i64* %10, align 8, !tbaa !1240
  store i64 %623, i64* %12, align 8, !tbaa !1240
  %624 = add i64 %619, -120
  %625 = inttoptr i64 %624 to i64*
  store i64 %617, i64* %625
  %626 = add i64 %618, -794
  %627 = add i64 %618, 33
  %628 = load i64, i64* %13, align 8, !tbaa !1240
  %629 = add i64 %628, -8
  %630 = inttoptr i64 %629 to i64*
  store i64 %627, i64* %630
  store i64 %629, i64* %13, align 8, !tbaa !1240
  %631 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %626, %struct.Memory* %603)
  %632 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4372), i64* %10, align 8, !tbaa !1240
  %633 = load i64, i64* %14, align 8
  %634 = add i64 %633, -32
  %635 = inttoptr i64 %634 to i64*
  %636 = load i64, i64* %635
  %637 = add i64 %636, 4224
  %638 = load i64, i64* %8, align 8
  %639 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %639
  %640 = inttoptr i64 %634 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %641, 1152
  store i64 %641, i64* %11, align 8, !tbaa !1240
  %643 = add i64 %633, -16
  %644 = inttoptr i64 %643 to i64*
  %645 = load i64, i64* %644
  %646 = inttoptr i64 %645 to i32*
  %647 = load i32, i32* %646
  %648 = zext i32 %647 to i64
  store i64 %648, i64* %9, align 8, !tbaa !1240
  store i64 %642, i64* %12, align 8, !tbaa !1240
  %649 = add i64 %632, -715
  %650 = add i64 %632, 49
  %651 = load i64, i64* %13, align 8, !tbaa !1240
  %652 = add i64 %651, -8
  %653 = inttoptr i64 %652 to i64*
  store i64 %650, i64* %653
  store i64 %652, i64* %13, align 8, !tbaa !1240
  %654 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %649, %struct.Memory* %631)
  %655 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4353), i64* %11, align 8, !tbaa !1240
  %656 = load i64, i64* %14, align 8
  %657 = add i64 %656, -32
  %658 = inttoptr i64 %657 to i64*
  %659 = load i64, i64* %658
  %660 = add i64 %659, 1152
  store i64 %660, i64* %12, align 8, !tbaa !1240
  %661 = add i64 %655, -876
  %662 = add i64 %655, 28
  %663 = load i64, i64* %13, align 8, !tbaa !1240
  %664 = add i64 %663, -8
  %665 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %665
  store i64 %664, i64* %13, align 8, !tbaa !1240
  %666 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %661, %struct.Memory* %654)
  %667 = load i64, i64* %14, align 8
  %668 = add i64 %667, -32
  %669 = load i64, i64* %3, align 8
  %670 = inttoptr i64 %668 to i64*
  %671 = load i64, i64* %670
  store i64 %671, i64* %10, align 8, !tbaa !1240
  %672 = add i64 %671, 4232
  %673 = load i64, i64* %8, align 8
  %674 = inttoptr i64 %672 to i64*
  store i64 %673, i64* %674
  %675 = inttoptr i64 %668 to i64*
  %676 = load i64, i64* %675
  %677 = add i64 %676, 4232
  %678 = inttoptr i64 %677 to i64*
  %679 = load i64, i64* %678
  %680 = icmp eq i64 %679, 0
  %681 = select i1 %680, i64 29, i64 56
  %682 = add i64 %669, %681
  br i1 %680, label %block_406b85, label %block_406ba0

block_407276:                                     ; preds = %block_4071e0
  %683 = add i64 %1246, -32
  %684 = inttoptr i64 %683 to i64*
  %685 = load i64, i64* %684
  %686 = add i64 %685, 4456
  %687 = inttoptr i64 %686 to i64*
  %688 = load i64, i64* %687
  store i64 %688, i64* %12, align 8, !tbaa !1240
  %689 = add i64 %685, 4472
  %690 = inttoptr i64 %689 to i32*
  %691 = load i32, i32* %690
  %692 = add i32 %691, 1
  %693 = zext i32 %692 to i64
  store i64 %693, i64* %9, align 8, !tbaa !1240
  %694 = zext i32 %1257 to i64
  store i64 %694, i64* %10, align 8, !tbaa !1240
  store i64 %693, i64* %11, align 8, !tbaa !1240
  %695 = add i64 %1263, 7610
  %696 = add i64 %1263, 41
  %697 = load i64, i64* %13, align 8, !tbaa !1240
  %698 = add i64 %697, -8
  %699 = inttoptr i64 %698 to i64*
  store i64 %696, i64* %699
  store i64 %698, i64* %13, align 8, !tbaa !1240
  %700 = tail call %struct.Memory* @sub_409030_JobPoolInit(%struct.State* nonnull %0, i64 %695, %struct.Memory* %1247)
  %701 = load i64, i64* %3, align 8
  %702 = load i64, i64* %14, align 8
  %703 = add i64 %702, -32
  %704 = inttoptr i64 %703 to i64*
  %705 = load i64, i64* %704
  %706 = add i64 %705, 4224
  %707 = inttoptr i64 %706 to i64*
  %708 = load i64, i64* %707
  %709 = add i64 %701, 28
  %710 = load i64, i64* %13, align 8, !tbaa !1240
  %711 = add i64 %710, -8
  %712 = inttoptr i64 %711 to i64*
  store i64 %709, i64* %712
  %713 = load i64, i64* %544, align 8, !alias.scope !2973, !noalias !2976
  %714 = load i64, i64* %543, align 8, !alias.scope !2973, !noalias !2976
  %715 = load i64, i64* %545, align 8, !alias.scope !2973, !noalias !2976
  %716 = load i64, i64* %15, align 8, !alias.scope !2973, !noalias !2976
  %717 = inttoptr i64 %710 to i64*
  %718 = load i64, i64* %717
  %719 = add i64 %710, 8
  %720 = inttoptr i64 %719 to i64*
  %721 = load i64, i64* %720
  %722 = add i64 %710, 16
  %723 = inttoptr i64 %722 to i64*
  %724 = load i64, i64* %723
  %725 = add i64 %710, 24
  %726 = inttoptr i64 %725 to i64*
  %727 = load i64, i64* %726
  %728 = add i64 %710, 32
  %729 = inttoptr i64 %728 to i64*
  %730 = load i64, i64* %729
  %731 = add i64 %710, 40
  %732 = inttoptr i64 %731 to i64*
  %733 = load i64, i64* %732
  %734 = add i64 %710, 48
  %735 = inttoptr i64 %734 to i64*
  %736 = load i64, i64* %735
  %737 = add i64 %710, 56
  %738 = inttoptr i64 %737 to i64*
  %739 = load i64, i64* %738
  %740 = add i64 %710, 64
  %741 = inttoptr i64 %740 to i64*
  %742 = load i64, i64* %741
  %743 = add i64 %710, 72
  %744 = inttoptr i64 %743 to i64*
  %745 = load i64, i64* %744
  %746 = inttoptr i64 %711 to i64*
  %747 = load i64, i64* %746
  store i64 %747, i64* %3, align 8, !alias.scope !2973, !noalias !2976
  store i64 %710, i64* %13, align 8, !alias.scope !2973, !noalias !2976
  %748 = tail call i64 @fprintf(i64 %708, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4981), i64 %713, i64 %714, i64 %715, i64 %716, i64 %718, i64 %721, i64 %724, i64 %727, i64 %730, i64 %733, i64 %736, i64 %739, i64 %742, i64 %745), !noalias !2973
  %749 = load i64, i64* %3, align 8
  %750 = load i64, i64* %14, align 8
  %751 = add i64 %750, -32
  %752 = inttoptr i64 %751 to i64*
  %753 = load i64, i64* %752
  %754 = add i64 %753, 4224
  %755 = inttoptr i64 %754 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %12, align 8, !tbaa !1240
  %757 = add i64 %750, -180
  %758 = trunc i64 %748 to i32
  %759 = inttoptr i64 %757 to i32*
  store i32 %758, i32* %759
  %760 = add i64 %749, 34
  %761 = load i64, i64* %13, align 8, !tbaa !1240
  %762 = add i64 %761, -8
  %763 = inttoptr i64 %762 to i64*
  store i64 %760, i64* %763
  %764 = load i64, i64* %544, align 8, !alias.scope !2978, !noalias !2981
  %765 = load i64, i64* %543, align 8, !alias.scope !2978, !noalias !2981
  %766 = load i64, i64* %545, align 8, !alias.scope !2978, !noalias !2981
  %767 = load i64, i64* %15, align 8, !alias.scope !2978, !noalias !2981
  %768 = inttoptr i64 %761 to i64*
  %769 = load i64, i64* %768
  %770 = add i64 %761, 8
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = add i64 %761, 16
  %774 = inttoptr i64 %773 to i64*
  %775 = load i64, i64* %774
  %776 = add i64 %761, 24
  %777 = inttoptr i64 %776 to i64*
  %778 = load i64, i64* %777
  %779 = add i64 %761, 32
  %780 = inttoptr i64 %779 to i64*
  %781 = load i64, i64* %780
  %782 = add i64 %761, 40
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = add i64 %761, 48
  %786 = inttoptr i64 %785 to i64*
  %787 = load i64, i64* %786
  %788 = add i64 %761, 56
  %789 = inttoptr i64 %788 to i64*
  %790 = load i64, i64* %789
  %791 = add i64 %761, 64
  %792 = inttoptr i64 %791 to i64*
  %793 = load i64, i64* %792
  %794 = add i64 %761, 72
  %795 = inttoptr i64 %794 to i64*
  %796 = load i64, i64* %795
  %797 = inttoptr i64 %762 to i64*
  %798 = load i64, i64* %797
  store i64 %798, i64* %3, align 8, !alias.scope !2978, !noalias !2981
  store i64 %761, i64* %13, align 8, !alias.scope !2978, !noalias !2981
  %799 = tail call i64 @fprintf(i64 %756, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4718), i64 %764, i64 %765, i64 %766, i64 %767, i64 %769, i64 %772, i64 %775, i64 %778, i64 %781, i64 %784, i64 %787, i64 %790, i64 %793, i64 %796), !noalias !2978
  %800 = load i64, i64* %14, align 8
  %801 = add i64 %800, -32
  %802 = inttoptr i64 %801 to i64*
  %803 = load i64, i64* %802
  %804 = add i64 %803, 516
  %805 = inttoptr i64 %804 to i32*
  store i32 1, i32* %805
  %806 = inttoptr i64 %801 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %11, align 8, !tbaa !1240
  %808 = add i64 %800, -8
  %809 = inttoptr i64 %808 to i64*
  store i64 %807, i64* %809
  %810 = add i64 %800, -184
  %811 = trunc i64 %799 to i32
  %812 = inttoptr i64 %810 to i32*
  store i32 %811, i32* %812
  br label %block_4072f9

block_406ed9:                                     ; preds = %block_406ea4
  %813 = inttoptr i64 %1233 to i32*
  %814 = load i32, i32* %813
  %815 = add i32 %814, 4
  %816 = add i64 %1244, 9
  %817 = inttoptr i64 %1233 to i32*
  store i32 %815, i32* %817
  br label %block_406ee2

block_406f53:                                     ; preds = %block_406ee2
  %818 = add i64 %329, 624
  %819 = inttoptr i64 %818 to i32*
  store i32 0, i32* %819
  %820 = add i64 %321, -36
  %821 = add i64 %335, 21
  %822 = inttoptr i64 %820 to i32*
  store i32 0, i32* %822
  br label %block_406f68

block_407050:                                     ; preds = %block_406fc8
  %823 = add i64 %981, -16
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %825, 1032
  %827 = inttoptr i64 %826 to i32*
  %828 = load i32, i32* %827
  %829 = add i64 %990, 548
  %830 = inttoptr i64 %829 to i32*
  store i32 %828, i32* %830
  %831 = add i64 %981, -36
  %832 = add i64 %996, 27
  %833 = inttoptr i64 %831 to i32*
  store i32 0, i32* %833
  br label %block_40706b

block_40706b:                                     ; preds = %block_407050, %block_40707e
  %834 = phi i64 [ %832, %block_407050 ], [ %113, %block_40707e ]
  %835 = phi %struct.Memory* [ %980, %block_407050 ], [ %835, %block_40707e ]
  %836 = inttoptr i64 %831 to i32*
  %837 = load i32, i32* %836
  %838 = zext i32 %837 to i64
  %839 = inttoptr i64 %982 to i64*
  %840 = load i64, i64* %839
  %841 = add i64 %840, 548
  %842 = inttoptr i64 %841 to i32*
  %843 = load i32, i32* %842
  %844 = icmp ult i32 %837, %843
  %845 = select i1 %844, i64 19, i64 55
  %846 = add i64 %834, %845
  br i1 %844, label %block_40707e, label %block_4070a2

block_406f68:                                     ; preds = %block_406f53, %block_406f7b
  %847 = phi i64 [ %821, %block_406f53 ], [ %141, %block_406f7b ]
  %848 = phi %struct.Memory* [ %302, %block_406f53 ], [ %848, %block_406f7b ]
  %849 = inttoptr i64 %820 to i32*
  %850 = load i32, i32* %849
  %851 = inttoptr i64 %322 to i64*
  %852 = load i64, i64* %851
  %853 = add i64 %852, 540
  %854 = inttoptr i64 %853 to i32*
  %855 = load i32, i32* %854
  %856 = icmp ult i32 %850, %855
  %857 = select i1 %856, i64 19, i64 96
  %858 = add i64 %847, %857
  br i1 %856, label %block_406f7b, label %block_406fc8

block_407149:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %859 = add i64 %1479, -16
  %860 = inttoptr i64 %859 to i64*
  %861 = load i64, i64* %860
  %862 = add i64 %861, 1032
  %863 = inttoptr i64 %862 to i32*
  %864 = load i32, i32* %863
  %865 = add i32 %864, 1
  %866 = zext i32 %865 to i128
  %867 = mul nuw nsw i128 %866, 12
  %868 = trunc i128 %867 to i64
  %869 = add i64 %1493, 26
  %870 = load i64, i64* %13, align 8, !tbaa !1240
  %871 = add i64 %870, -8
  %872 = inttoptr i64 %871 to i64*
  store i64 %869, i64* %872
  %873 = inttoptr i64 %871 to i64*
  %874 = load i64, i64* %873
  store i64 %874, i64* %3, align 8, !alias.scope !2983, !noalias !2986
  store i64 %870, i64* %13, align 8, !alias.scope !2983, !noalias !2986
  %875 = tail call i64 @malloc(i64 %868)
  %876 = load i64, i64* %14, align 8
  %877 = add i64 %876, -32
  %878 = load i64, i64* %3, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879
  %881 = add i64 %880, 4464
  %882 = inttoptr i64 %881 to i64*
  store i64 %875, i64* %882
  %883 = inttoptr i64 %877 to i64*
  %884 = load i64, i64* %883
  %885 = add i64 %884, 4464
  %886 = inttoptr i64 %885 to i64*
  %887 = load i64, i64* %886
  %888 = icmp eq i64 %887, 0
  %889 = select i1 %888, i64 29, i64 111
  %890 = add i64 %878, %889
  br i1 %888, label %block_407180, label %block_4071d2

block_4071f3:                                     ; preds = %block_4071e0
  %891 = zext i32 %1257 to i64
  store i64 %891, i64* %12, align 8, !tbaa !1240
  store i64 %1251, i64* %11, align 8, !tbaa !1240
  %892 = add i64 %1263, 4669
  %893 = add i64 %1263, 18
  %894 = load i64, i64* %13, align 8, !tbaa !1240
  %895 = add i64 %894, -8
  %896 = inttoptr i64 %895 to i64*
  store i64 %893, i64* %896
  store i64 %895, i64* %13, align 8, !tbaa !1240
  %897 = tail call %struct.Memory* @sub_408430_NumOfCombsFromNbyK(%struct.State* nonnull %0, i64 %892, %struct.Memory* %1247)
  %898 = load i64, i64* %14, align 8
  %899 = add i64 %898, -44
  %900 = load i32, i32* %5, align 4
  %901 = load i64, i64* %3, align 8
  %902 = inttoptr i64 %899 to i32*
  store i32 %900, i32* %902
  %903 = add i64 %898, -40
  %904 = inttoptr i64 %903 to i32*
  %905 = load i32, i32* %904
  %906 = add i64 %898, -32
  %907 = inttoptr i64 %906 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %908, 4464
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %898, -36
  %913 = inttoptr i64 %912 to i32*
  %914 = load i32, i32* %913
  %915 = zext i32 %914 to i64
  %916 = mul nuw nsw i64 %915, 12
  %917 = add i64 %916, %911
  %918 = inttoptr i64 %917 to i32*
  store i32 %905, i32* %918
  %919 = inttoptr i64 %899 to i32*
  %920 = load i32, i32* %919
  %921 = inttoptr i64 %903 to i32*
  %922 = load i32, i32* %921
  %923 = add i32 %922, %920
  %924 = load i64, i64* %14, align 8
  %925 = add i64 %924, -40
  %926 = inttoptr i64 %925 to i32*
  store i32 %923, i32* %926
  %927 = add i64 %924, -44
  %928 = inttoptr i64 %927 to i32*
  %929 = load i32, i32* %928
  %930 = add i64 %924, -32
  %931 = inttoptr i64 %930 to i64*
  %932 = load i64, i64* %931
  %933 = add i64 %932, 4464
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = add i64 %924, -36
  %937 = inttoptr i64 %936 to i32*
  %938 = load i32, i32* %937
  %939 = zext i32 %938 to i64
  %940 = mul nuw nsw i64 %939, 12
  %941 = add i64 %940, %935
  %942 = add i64 %941, 4
  %943 = inttoptr i64 %942 to i32*
  store i32 %929, i32* %943
  %944 = inttoptr i64 %930 to i64*
  %945 = load i64, i64* %944
  %946 = add i64 %945, 4464
  %947 = inttoptr i64 %946 to i64*
  %948 = load i64, i64* %947
  %949 = inttoptr i64 %936 to i32*
  %950 = load i32, i32* %949
  %951 = zext i32 %950 to i64
  %952 = mul nuw nsw i64 %951, 12
  store i64 %952, i64* %10, align 8, !tbaa !1240
  %953 = add i64 %952, %948
  %954 = add i64 %953, 8
  %955 = inttoptr i64 %954 to i32*
  store i32 0, i32* %955
  %956 = load i64, i64* %14, align 8
  %957 = add i64 %956, -36
  %958 = inttoptr i64 %957 to i32*
  %959 = load i32, i32* %958
  %960 = add i32 %959, 1
  %961 = inttoptr i64 %957 to i32*
  store i32 %960, i32* %961
  %962 = add i64 %901, -37
  br label %block_4071e0

block_406fc8:                                     ; preds = %block_406f68
  %963 = add i64 %852, 544
  %964 = inttoptr i64 %963 to i32*
  %965 = load i32, i32* %964
  %966 = zext i32 %965 to i64
  store i64 %966, i64* %12, align 8, !tbaa !1240
  %967 = zext i32 %855 to i64
  store i64 %967, i64* %11, align 8, !tbaa !1240
  %968 = add i64 %852, 592
  %969 = inttoptr i64 %968 to i32*
  %970 = load i32, i32* %969
  %971 = zext i32 %970 to i64
  store i64 %971, i64* %10, align 8, !tbaa !1240
  %972 = add i64 %852, 600
  %973 = inttoptr i64 %972 to i64*
  %974 = load i64, i64* %973
  store i64 %974, i64* %9, align 8, !tbaa !1240
  %975 = add i64 %858, 18104
  %976 = add i64 %858, 46
  %977 = load i64, i64* %13, align 8, !tbaa !1240
  %978 = add i64 %977, -8
  %979 = inttoptr i64 %978 to i64*
  store i64 %976, i64* %979
  store i64 %978, i64* %13, align 8, !tbaa !1240
  %980 = tail call %struct.Memory* @sub_40b680_CreateEmptyTree(%struct.State* nonnull %0, i64 %975, %struct.Memory* %848)
  %981 = load i64, i64* %14, align 8
  %982 = add i64 %981, -32
  %983 = load i64, i64* %3, align 8
  %984 = inttoptr i64 %982 to i64*
  %985 = load i64, i64* %984
  store i64 %985, i64* %9, align 8, !tbaa !1240
  %986 = add i64 %985, 616
  %987 = load i64, i64* %8, align 8
  %988 = inttoptr i64 %986 to i64*
  store i64 %987, i64* %988
  %989 = inttoptr i64 %982 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %990, 616
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = icmp eq i64 %993, 0
  %995 = select i1 %994, i64 29, i64 90
  %996 = add i64 %983, %995
  br i1 %994, label %block_407013, label %block_407050

block_406ba0:                                     ; preds = %block_4068dd
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4356), i64* %10, align 8, !tbaa !1240
  %997 = add i64 %676, 1664
  store i64 %676, i64* %11, align 8, !tbaa !1240
  %998 = add i64 %676, 528
  %999 = inttoptr i64 %998 to i32*
  %1000 = load i32, i32* %999
  %1001 = zext i32 %1000 to i64
  store i64 %1001, i64* %9, align 8, !tbaa !1240
  store i64 %997, i64* %12, align 8, !tbaa !1240
  %1002 = add i64 %682, -848
  %1003 = add i64 %682, 42
  %1004 = load i64, i64* %13, align 8, !tbaa !1240
  %1005 = add i64 %1004, -8
  %1006 = inttoptr i64 %1005 to i64*
  store i64 %1003, i64* %1006
  store i64 %1005, i64* %13, align 8, !tbaa !1240
  %1007 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %1002, %struct.Memory* %666)
  %1008 = load i64, i64* %14, align 8
  %1009 = add i64 %1008, -57
  %1010 = load i64, i64* %3, align 8
  %1011 = add i64 %1008, -32
  %1012 = inttoptr i64 %1011 to i64*
  %1013 = load i64, i64* %1012
  %1014 = add i64 %1013, 1664
  %1015 = add i64 %1010, 22
  %1016 = load i64, i64* %13, align 8, !tbaa !1240
  %1017 = add i64 %1016, -8
  %1018 = inttoptr i64 %1017 to i64*
  store i64 %1015, i64* %1018
  %1019 = inttoptr i64 %1017 to i64*
  %1020 = load i64, i64* %1019
  store i64 %1020, i64* %3, align 8, !alias.scope !2988, !noalias !2991
  store i64 %1016, i64* %13, align 8, !alias.scope !2988, !noalias !2991
  %1021 = tail call i64 @strcat(i64 %1014, i64 %1009)
  %1022 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1470), i64* %11, align 8, !tbaa !1240
  %1023 = load i64, i64* %14, align 8
  %1024 = add i64 %1023, -32
  %1025 = inttoptr i64 %1024 to i64*
  %1026 = load i64, i64* %1025
  %1027 = add i64 %1026, 1664
  store i64 %1027, i64* %10, align 8, !tbaa !1240
  store i64 %1027, i64* %12, align 8, !tbaa !1240
  %1028 = add i64 %1023, -128
  %1029 = inttoptr i64 %1028 to i64*
  store i64 %1021, i64* %1029
  %1030 = add i64 %1022, -1024
  %1031 = add i64 %1022, 33
  %1032 = load i64, i64* %13, align 8, !tbaa !1240
  %1033 = add i64 %1032, -8
  %1034 = inttoptr i64 %1033 to i64*
  store i64 %1031, i64* %1034
  store i64 %1033, i64* %13, align 8, !tbaa !1240
  %1035 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %1030, %struct.Memory* %1007)
  %1036 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4365), i64* %10, align 8, !tbaa !1240
  %1037 = load i64, i64* %14, align 8
  %1038 = add i64 %1037, -32
  %1039 = inttoptr i64 %1038 to i64*
  %1040 = load i64, i64* %1039
  %1041 = add i64 %1040, 4240
  %1042 = load i64, i64* %8, align 8
  %1043 = inttoptr i64 %1041 to i64*
  store i64 %1042, i64* %1043
  %1044 = inttoptr i64 %1038 to i64*
  %1045 = load i64, i64* %1044
  %1046 = add i64 %1045, 2176
  store i64 %1045, i64* %11, align 8, !tbaa !1240
  %1047 = add i64 %1045, 528
  %1048 = inttoptr i64 %1047 to i32*
  %1049 = load i32, i32* %1048
  %1050 = zext i32 %1049 to i64
  store i64 %1050, i64* %9, align 8, !tbaa !1240
  store i64 %1046, i64* %12, align 8, !tbaa !1240
  %1051 = add i64 %1036, -945
  %1052 = add i64 %1036, 53
  %1053 = load i64, i64* %13, align 8, !tbaa !1240
  %1054 = add i64 %1053, -8
  %1055 = inttoptr i64 %1054 to i64*
  store i64 %1052, i64* %1055
  store i64 %1054, i64* %13, align 8, !tbaa !1240
  %1056 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %1051, %struct.Memory* %1035)
  %1057 = load i64, i64* %14, align 8
  %1058 = add i64 %1057, -57
  %1059 = load i64, i64* %3, align 8
  %1060 = add i64 %1057, -32
  %1061 = inttoptr i64 %1060 to i64*
  %1062 = load i64, i64* %1061
  %1063 = add i64 %1062, 2176
  %1064 = add i64 %1059, 22
  %1065 = load i64, i64* %13, align 8, !tbaa !1240
  %1066 = add i64 %1065, -8
  %1067 = inttoptr i64 %1066 to i64*
  store i64 %1064, i64* %1067
  %1068 = inttoptr i64 %1066 to i64*
  %1069 = load i64, i64* %1068
  store i64 %1069, i64* %3, align 8, !alias.scope !2993, !noalias !2996
  store i64 %1065, i64* %13, align 8, !alias.scope !2993, !noalias !2996
  %1070 = tail call i64 @strcat(i64 %1063, i64 %1058)
  %1071 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1470), i64* %11, align 8, !tbaa !1240
  %1072 = load i64, i64* %14, align 8
  %1073 = add i64 %1072, -32
  %1074 = inttoptr i64 %1073 to i64*
  %1075 = load i64, i64* %1074
  %1076 = add i64 %1075, 2176
  store i64 %1076, i64* %10, align 8, !tbaa !1240
  store i64 %1076, i64* %12, align 8, !tbaa !1240
  %1077 = add i64 %1072, -136
  %1078 = inttoptr i64 %1077 to i64*
  store i64 %1070, i64* %1078
  %1079 = add i64 %1071, -1132
  %1080 = add i64 %1071, 36
  %1081 = load i64, i64* %13, align 8, !tbaa !1240
  %1082 = add i64 %1081, -8
  %1083 = inttoptr i64 %1082 to i64*
  store i64 %1080, i64* %1083
  store i64 %1082, i64* %13, align 8, !tbaa !1240
  %1084 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %1079, %struct.Memory* %1056)
  %1085 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4376), i64* %10, align 8, !tbaa !1240
  %1086 = load i64, i64* %14, align 8
  %1087 = add i64 %1086, -32
  %1088 = inttoptr i64 %1087 to i64*
  %1089 = load i64, i64* %1088
  %1090 = add i64 %1089, 4248
  %1091 = load i64, i64* %8, align 8
  %1092 = inttoptr i64 %1090 to i64*
  store i64 %1091, i64* %1092
  %1093 = inttoptr i64 %1087 to i64*
  %1094 = load i64, i64* %1093
  %1095 = add i64 %1094, 2688
  store i64 %1094, i64* %11, align 8, !tbaa !1240
  %1096 = add i64 %1094, 528
  %1097 = inttoptr i64 %1096 to i32*
  %1098 = load i32, i32* %1097
  %1099 = zext i32 %1098 to i64
  store i64 %1099, i64* %9, align 8, !tbaa !1240
  store i64 %1095, i64* %12, align 8, !tbaa !1240
  %1100 = add i64 %1085, -1056
  %1101 = add i64 %1085, 53
  %1102 = load i64, i64* %13, align 8, !tbaa !1240
  %1103 = add i64 %1102, -8
  %1104 = inttoptr i64 %1103 to i64*
  store i64 %1101, i64* %1104
  store i64 %1103, i64* %13, align 8, !tbaa !1240
  %1105 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %1100, %struct.Memory* %1084)
  %1106 = load i64, i64* %14, align 8
  %1107 = add i64 %1106, -57
  %1108 = load i64, i64* %3, align 8
  %1109 = add i64 %1106, -32
  %1110 = inttoptr i64 %1109 to i64*
  %1111 = load i64, i64* %1110
  %1112 = add i64 %1111, 2688
  %1113 = add i64 %1108, 22
  %1114 = load i64, i64* %13, align 8, !tbaa !1240
  %1115 = add i64 %1114, -8
  %1116 = inttoptr i64 %1115 to i64*
  store i64 %1113, i64* %1116
  %1117 = inttoptr i64 %1115 to i64*
  %1118 = load i64, i64* %1117
  store i64 %1118, i64* %3, align 8, !alias.scope !2998, !noalias !3001
  store i64 %1114, i64* %13, align 8, !alias.scope !2998, !noalias !3001
  %1119 = tail call i64 @strcat(i64 %1112, i64 %1107)
  %1120 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1470), i64* %11, align 8, !tbaa !1240
  %1121 = load i64, i64* %14, align 8
  %1122 = add i64 %1121, -32
  %1123 = inttoptr i64 %1122 to i64*
  %1124 = load i64, i64* %1123
  %1125 = add i64 %1124, 2688
  store i64 %1125, i64* %10, align 8, !tbaa !1240
  store i64 %1125, i64* %12, align 8, !tbaa !1240
  %1126 = add i64 %1121, -144
  %1127 = inttoptr i64 %1126 to i64*
  store i64 %1119, i64* %1127
  %1128 = add i64 %1120, -1243
  %1129 = add i64 %1120, 36
  %1130 = load i64, i64* %13, align 8, !tbaa !1240
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1129, i64* %1132
  store i64 %1131, i64* %13, align 8, !tbaa !1240
  %1133 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %1128, %struct.Memory* %1105)
  %1134 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 825), i64* %10, align 8, !tbaa !1240
  %1135 = load i64, i64* %14, align 8
  %1136 = add i64 %1135, -32
  %1137 = inttoptr i64 %1136 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1138, 4256
  %1140 = load i64, i64* %8, align 8
  %1141 = inttoptr i64 %1139 to i64*
  store i64 %1140, i64* %1141
  %1142 = inttoptr i64 %1136 to i64*
  %1143 = load i64, i64* %1142
  %1144 = add i64 %1143, 3200
  store i64 %1143, i64* %11, align 8, !tbaa !1240
  %1145 = add i64 %1135, -16
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = inttoptr i64 %1147 to i32*
  %1149 = load i32, i32* %1148
  %1150 = zext i32 %1149 to i64
  store i64 %1150, i64* %9, align 8, !tbaa !1240
  store i64 %1144, i64* %12, align 8, !tbaa !1240
  %1151 = add i64 %1134, -1167
  %1152 = add i64 %1134, 49
  %1153 = load i64, i64* %13, align 8, !tbaa !1240
  %1154 = add i64 %1153, -8
  %1155 = inttoptr i64 %1154 to i64*
  store i64 %1152, i64* %1155
  store i64 %1154, i64* %13, align 8, !tbaa !1240
  %1156 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull %0, i64 %1151, %struct.Memory* %1133)
  %1157 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1000), i64* %11, align 8, !tbaa !1240
  %1158 = load i64, i64* %14, align 8
  %1159 = add i64 %1158, -32
  %1160 = inttoptr i64 %1159 to i64*
  %1161 = load i64, i64* %1160
  %1162 = add i64 %1161, 3200
  store i64 %1162, i64* %12, align 8, !tbaa !1240
  %1163 = add i64 %1157, -1328
  %1164 = add i64 %1157, 28
  %1165 = load i64, i64* %13, align 8, !tbaa !1240
  %1166 = add i64 %1165, -8
  %1167 = inttoptr i64 %1166 to i64*
  store i64 %1164, i64* %1167
  store i64 %1166, i64* %13, align 8, !tbaa !1240
  %1168 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull %0, i64 %1163, %struct.Memory* %1156)
  %1169 = load i64, i64* %14, align 8
  %1170 = add i64 %1169, -32
  %1171 = load i64, i64* %3, align 8
  %1172 = inttoptr i64 %1170 to i64*
  %1173 = load i64, i64* %1172
  store i64 %1173, i64* %10, align 8, !tbaa !1240
  %1174 = add i64 %1173, 4264
  %1175 = load i64, i64* %8, align 8
  %1176 = inttoptr i64 %1174 to i64*
  store i64 %1175, i64* %1176
  %1177 = inttoptr i64 %1170 to i64*
  %1178 = load i64, i64* %1177
  %1179 = add i64 %1178, 4264
  %1180 = inttoptr i64 %1179 to i64*
  %1181 = load i64, i64* %1180
  %1182 = icmp eq i64 %1181, 0
  %1183 = select i1 %1182, i64 29, i64 56
  %1184 = add i64 %1171, %1183
  br i1 %1182, label %block_406d49, label %block_406d64

block_406e39:                                     ; preds = %block_406d64
  %1185 = add i64 %294, 592
  %1186 = inttoptr i64 %1185 to i32*
  %1187 = load i32, i32* %1186
  %1188 = zext i32 %1187 to i64
  store i64 %1188, i64* %9, align 8, !tbaa !1240
  %1189 = add i64 %300, 17
  %1190 = load i64, i64* %13, align 8, !tbaa !1240
  %1191 = add i64 %1190, -8
  %1192 = inttoptr i64 %1191 to i64*
  store i64 %1189, i64* %1192
  %1193 = inttoptr i64 %1191 to i64*
  %1194 = load i64, i64* %1193
  store i64 %1194, i64* %3, align 8, !alias.scope !3003, !noalias !3006
  store i64 %1190, i64* %13, align 8, !alias.scope !3003, !noalias !3006
  %1195 = tail call i64 @malloc(i64 %1188)
  %1196 = load i64, i64* %14, align 8
  %1197 = add i64 %1196, -32
  %1198 = load i64, i64* %3, align 8
  %1199 = inttoptr i64 %1197 to i64*
  %1200 = load i64, i64* %1199
  %1201 = add i64 %1200, 600
  %1202 = inttoptr i64 %1201 to i64*
  store i64 %1195, i64* %1202
  %1203 = inttoptr i64 %1197 to i64*
  %1204 = load i64, i64* %1203
  %1205 = add i64 %1204, 600
  %1206 = inttoptr i64 %1205 to i64*
  %1207 = load i64, i64* %1206
  %1208 = icmp eq i64 %1207, 0
  %1209 = select i1 %1208, i64 29, i64 90
  %1210 = add i64 %1198, %1209
  br i1 %1208, label %block_406e67, label %block_406ea4

block_406d49:                                     ; preds = %block_406ba0
  %1211 = add i64 %1178, 512
  %1212 = inttoptr i64 %1211 to i32*
  store i32 4, i32* %1212
  %1213 = inttoptr i64 %1170 to i64*
  %1214 = load i64, i64* %1213
  %1215 = add i64 %1169, -8
  %1216 = inttoptr i64 %1215 to i64*
  store i64 %1214, i64* %1216
  br label %block_4072f9

block_4071d2:                                     ; preds = %block_407149
  %1217 = add i64 %876, -40
  %1218 = inttoptr i64 %1217 to i32*
  store i32 1, i32* %1218
  %1219 = add i64 %876, -36
  %1220 = add i64 %890, 14
  %1221 = inttoptr i64 %1219 to i32*
  store i32 1, i32* %1221
  br label %block_4071e0

block_406ea4:                                     ; preds = %block_406e39
  %1222 = add i64 %1204, 536
  %1223 = inttoptr i64 %1222 to i32*
  %1224 = load i32, i32* %1223
  %1225 = shl i32 %1224, 2
  %1226 = add i64 %1204, 540
  %1227 = inttoptr i64 %1226 to i32*
  %1228 = load i32, i32* %1227
  %1229 = shl i32 %1228, 3
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %10, align 8, !tbaa !1240
  %1231 = add i32 %1229, %1225
  %1232 = load i64, i64* %14, align 8
  %1233 = add i64 %1232, -48
  %1234 = inttoptr i64 %1233 to i32*
  store i32 %1231, i32* %1234
  %1235 = add i64 %1232, -32
  %1236 = inttoptr i64 %1235 to i64*
  %1237 = load i64, i64* %1236
  %1238 = add i64 %1237, 536
  %1239 = inttoptr i64 %1238 to i32*
  %1240 = load i32, i32* %1239
  %1241 = and i32 %1240, 7
  %1242 = icmp eq i32 %1241, 0
  %1243 = select i1 %1242, i64 62, i64 53
  %1244 = add i64 %1210, %1243
  br i1 %1242, label %block_406ee2, label %block_406ed9

block_4071e0:                                     ; preds = %block_4071d2, %block_4071f3
  %1245 = phi i64 [ %1220, %block_4071d2 ], [ %962, %block_4071f3 ]
  %1246 = phi i64 [ %876, %block_4071d2 ], [ %956, %block_4071f3 ]
  %1247 = phi %struct.Memory* [ %835, %block_4071d2 ], [ %897, %block_4071f3 ]
  %1248 = add i64 %1246, -36
  %1249 = inttoptr i64 %1248 to i32*
  %1250 = load i32, i32* %1249
  %1251 = zext i32 %1250 to i64
  %1252 = add i64 %1246, -16
  %1253 = inttoptr i64 %1252 to i64*
  %1254 = load i64, i64* %1253
  store i64 %1254, i64* %9, align 8, !tbaa !1240
  %1255 = add i64 %1254, 1032
  %1256 = inttoptr i64 %1255 to i32*
  %1257 = load i32, i32* %1256
  %1258 = sub i32 %1250, %1257
  %1259 = icmp ult i32 %1250, %1257
  %1260 = icmp eq i32 %1258, 0
  %1261 = or i1 %1260, %1259
  %1262 = select i1 %1261, i64 19, i64 150
  %1263 = add i64 %1245, %1262
  br i1 %1261, label %block_4071f3, label %block_407276

block_4070f7:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4593), i64* %11, align 8, !tbaa !1240
  %1264 = add i64 %1487, 4224
  %1265 = inttoptr i64 %1264 to i64*
  %1266 = load i64, i64* %1265
  store i64 %1266, i64* %12, align 8, !tbaa !1240
  %1267 = add i64 %1487, 4472
  %1268 = inttoptr i64 %1267 to i32*
  %1269 = load i32, i32* %1268
  %1270 = add i32 %1269, 1
  %1271 = zext i32 %1270 to i64
  store i64 %1271, i64* %9, align 8, !tbaa !1240
  %1272 = zext i32 %1270 to i128
  %1273 = mul nuw nsw i128 %1272, 24
  %1274 = trunc i128 %1273 to i64
  %1275 = add i64 %1493, 49
  %1276 = load i64, i64* %13, align 8, !tbaa !1240
  %1277 = add i64 %1276, -8
  %1278 = inttoptr i64 %1277 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %545, align 8, !alias.scope !3008, !noalias !3011
  %1280 = load i64, i64* %15, align 8, !alias.scope !3008, !noalias !3011
  %1281 = inttoptr i64 %1276 to i64*
  %1282 = load i64, i64* %1281
  %1283 = add i64 %1276, 8
  %1284 = inttoptr i64 %1283 to i64*
  %1285 = load i64, i64* %1284
  %1286 = add i64 %1276, 16
  %1287 = inttoptr i64 %1286 to i64*
  %1288 = load i64, i64* %1287
  %1289 = add i64 %1276, 24
  %1290 = inttoptr i64 %1289 to i64*
  %1291 = load i64, i64* %1290
  %1292 = add i64 %1276, 32
  %1293 = inttoptr i64 %1292 to i64*
  %1294 = load i64, i64* %1293
  %1295 = add i64 %1276, 40
  %1296 = inttoptr i64 %1295 to i64*
  %1297 = load i64, i64* %1296
  %1298 = add i64 %1276, 48
  %1299 = inttoptr i64 %1298 to i64*
  %1300 = load i64, i64* %1299
  %1301 = add i64 %1276, 56
  %1302 = inttoptr i64 %1301 to i64*
  %1303 = load i64, i64* %1302
  %1304 = add i64 %1276, 64
  %1305 = inttoptr i64 %1304 to i64*
  %1306 = load i64, i64* %1305
  %1307 = add i64 %1276, 72
  %1308 = inttoptr i64 %1307 to i64*
  %1309 = load i64, i64* %1308
  %1310 = inttoptr i64 %1277 to i64*
  %1311 = load i64, i64* %1310
  store i64 %1311, i64* %3, align 8, !alias.scope !3008, !noalias !3011
  store i64 %1276, i64* %13, align 8, !alias.scope !3008, !noalias !3011
  %1312 = tail call i64 @fprintf(i64 %1266, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4593), i64 %1274, i64 %1271, i64 %1279, i64 %1280, i64 %1282, i64 %1285, i64 %1288, i64 %1291, i64 %1294, i64 %1297, i64 %1300, i64 %1303, i64 %1306, i64 %1309), !noalias !3008
  %1313 = load i64, i64* %14, align 8
  %1314 = add i64 %1313, -32
  %1315 = inttoptr i64 %1314 to i64*
  %1316 = load i64, i64* %1315
  %1317 = add i64 %1316, 512
  %1318 = inttoptr i64 %1317 to i32*
  store i32 5, i32* %1318
  %1319 = inttoptr i64 %1314 to i64*
  %1320 = load i64, i64* %1319
  store i64 %1320, i64* %10, align 8, !tbaa !1240
  %1321 = add i64 %1313, -8
  %1322 = inttoptr i64 %1321 to i64*
  store i64 %1320, i64* %1322
  %1323 = add i64 %1313, -172
  %1324 = trunc i64 %1312 to i32
  %1325 = inttoptr i64 %1323 to i32*
  store i32 %1324, i32* %1325
  br label %block_4072f9

block_406f16:                                     ; preds = %block_406ee2
  %1326 = add i64 %329, 4224
  %1327 = inttoptr i64 %1326 to i64*
  %1328 = load i64, i64* %1327
  store i64 %1328, i64* %12, align 8, !tbaa !1240
  %1329 = add i64 %335, 28
  %1330 = load i64, i64* %13, align 8, !tbaa !1240
  %1331 = add i64 %1330, -8
  %1332 = inttoptr i64 %1331 to i64*
  store i64 %1329, i64* %1332
  %1333 = load i64, i64* %544, align 8, !alias.scope !3013, !noalias !3016
  %1334 = load i64, i64* %543, align 8, !alias.scope !3013, !noalias !3016
  %1335 = load i64, i64* %545, align 8, !alias.scope !3013, !noalias !3016
  %1336 = load i64, i64* %15, align 8, !alias.scope !3013, !noalias !3016
  %1337 = inttoptr i64 %1330 to i64*
  %1338 = load i64, i64* %1337
  %1339 = add i64 %1330, 8
  %1340 = inttoptr i64 %1339 to i64*
  %1341 = load i64, i64* %1340
  %1342 = add i64 %1330, 16
  %1343 = inttoptr i64 %1342 to i64*
  %1344 = load i64, i64* %1343
  %1345 = add i64 %1330, 24
  %1346 = inttoptr i64 %1345 to i64*
  %1347 = load i64, i64* %1346
  %1348 = add i64 %1330, 32
  %1349 = inttoptr i64 %1348 to i64*
  %1350 = load i64, i64* %1349
  %1351 = add i64 %1330, 40
  %1352 = inttoptr i64 %1351 to i64*
  %1353 = load i64, i64* %1352
  %1354 = add i64 %1330, 48
  %1355 = inttoptr i64 %1354 to i64*
  %1356 = load i64, i64* %1355
  %1357 = add i64 %1330, 56
  %1358 = inttoptr i64 %1357 to i64*
  %1359 = load i64, i64* %1358
  %1360 = add i64 %1330, 64
  %1361 = inttoptr i64 %1360 to i64*
  %1362 = load i64, i64* %1361
  %1363 = add i64 %1330, 72
  %1364 = inttoptr i64 %1363 to i64*
  %1365 = load i64, i64* %1364
  %1366 = inttoptr i64 %1331 to i64*
  %1367 = load i64, i64* %1366
  store i64 %1367, i64* %3, align 8, !alias.scope !3013, !noalias !3016
  store i64 %1330, i64* %13, align 8, !alias.scope !3013, !noalias !3016
  %1368 = tail call i64 @fprintf(i64 %1328, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4499), i64 %1333, i64 %1334, i64 %1335, i64 %1336, i64 %1338, i64 %1341, i64 %1344, i64 %1347, i64 %1350, i64 %1353, i64 %1356, i64 %1359, i64 %1362, i64 %1365), !noalias !3013
  %1369 = load i64, i64* %14, align 8
  %1370 = add i64 %1369, -32
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1372, 512
  %1374 = inttoptr i64 %1373 to i32*
  store i32 5, i32* %1374
  %1375 = inttoptr i64 %1370 to i64*
  %1376 = load i64, i64* %1375
  store i64 %1376, i64* %11, align 8, !tbaa !1240
  %1377 = add i64 %1369, -8
  %1378 = inttoptr i64 %1377 to i64*
  store i64 %1376, i64* %1378
  %1379 = add i64 %1369, -164
  %1380 = trunc i64 %1368 to i32
  %1381 = inttoptr i64 %1379 to i32*
  store i32 %1380, i32* %1381
  br label %block_4072f9

block_407013:                                     ; preds = %block_406fc8
  %1382 = add i64 %990, 4224
  %1383 = inttoptr i64 %1382 to i64*
  %1384 = load i64, i64* %1383
  store i64 %1384, i64* %12, align 8, !tbaa !1240
  %1385 = add i64 %996, 28
  %1386 = load i64, i64* %13, align 8, !tbaa !1240
  %1387 = add i64 %1386, -8
  %1388 = inttoptr i64 %1387 to i64*
  store i64 %1385, i64* %1388
  %1389 = load i64, i64* %544, align 8, !alias.scope !3018, !noalias !3021
  %1390 = load i64, i64* %545, align 8, !alias.scope !3018, !noalias !3021
  %1391 = load i64, i64* %15, align 8, !alias.scope !3018, !noalias !3021
  %1392 = inttoptr i64 %1386 to i64*
  %1393 = load i64, i64* %1392
  %1394 = add i64 %1386, 8
  %1395 = inttoptr i64 %1394 to i64*
  %1396 = load i64, i64* %1395
  %1397 = add i64 %1386, 16
  %1398 = inttoptr i64 %1397 to i64*
  %1399 = load i64, i64* %1398
  %1400 = add i64 %1386, 24
  %1401 = inttoptr i64 %1400 to i64*
  %1402 = load i64, i64* %1401
  %1403 = add i64 %1386, 32
  %1404 = inttoptr i64 %1403 to i64*
  %1405 = load i64, i64* %1404
  %1406 = add i64 %1386, 40
  %1407 = inttoptr i64 %1406 to i64*
  %1408 = load i64, i64* %1407
  %1409 = add i64 %1386, 48
  %1410 = inttoptr i64 %1409 to i64*
  %1411 = load i64, i64* %1410
  %1412 = add i64 %1386, 56
  %1413 = inttoptr i64 %1412 to i64*
  %1414 = load i64, i64* %1413
  %1415 = add i64 %1386, 64
  %1416 = inttoptr i64 %1415 to i64*
  %1417 = load i64, i64* %1416
  %1418 = add i64 %1386, 72
  %1419 = inttoptr i64 %1418 to i64*
  %1420 = load i64, i64* %1419
  %1421 = inttoptr i64 %1387 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %3, align 8, !alias.scope !3018, !noalias !3021
  store i64 %1386, i64* %13, align 8, !alias.scope !3018, !noalias !3021
  %1423 = tail call i64 @fprintf(i64 %1384, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4552), i64 %1389, i64 %985, i64 %1390, i64 %1391, i64 %1393, i64 %1396, i64 %1399, i64 %1402, i64 %1405, i64 %1408, i64 %1411, i64 %1414, i64 %1417, i64 %1420), !noalias !3018
  %1424 = load i64, i64* %14, align 8
  %1425 = add i64 %1424, -32
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1427, 512
  %1429 = inttoptr i64 %1428 to i32*
  store i32 5, i32* %1429
  %1430 = inttoptr i64 %1425 to i64*
  %1431 = load i64, i64* %1430
  store i64 %1431, i64* %11, align 8, !tbaa !1240
  %1432 = add i64 %1424, -8
  %1433 = inttoptr i64 %1432 to i64*
  store i64 %1431, i64* %1433
  %1434 = add i64 %1424, -168
  %1435 = trunc i64 %1423 to i32
  %1436 = inttoptr i64 %1434 to i32*
  store i32 %1435, i32* %1436
  br label %block_4072f9

block_406b85:                                     ; preds = %block_4068dd
  %1437 = add i64 %676, 512
  %1438 = inttoptr i64 %1437 to i32*
  store i32 4, i32* %1438
  %1439 = inttoptr i64 %668 to i64*
  %1440 = load i64, i64* %1439
  %1441 = add i64 %667, -8
  %1442 = inttoptr i64 %1441 to i64*
  store i64 %1440, i64* %1442
  br label %block_4072f9

block_4070a2:                                     ; preds = %block_40706b
  %1443 = inttoptr i64 %823 to i64*
  %1444 = load i64, i64* %1443
  %1445 = add i64 %1444, 1032
  %1446 = inttoptr i64 %1445 to i32*
  %1447 = load i32, i32* %1446
  %1448 = trunc i32 %1447 to i5
  switch i5 %1448, label %1449 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %1457
  ]

; <label>:1449:                                   ; preds = %block_4070a2
  %1450 = and i32 %1447, 31
  %1451 = zext i32 %1450 to i64
  %1452 = add nuw nsw i64 %1451, 4294967295
  %1453 = and i64 %1452, 4294967295
  %1454 = shl i64 1, %1453
  %1455 = trunc i64 %1454 to i32
  %1456 = shl i32 %1455, 1
  br label %1457

; <label>:1457:                                   ; preds = %1449, %block_4070a2
  %1458 = phi i32 [ %1456, %1449 ], [ 2, %block_4070a2 ]
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %1457, %block_4070a2
  %1459 = phi i32 [ 1, %block_4070a2 ], [ %1458, %1457 ]
  %1460 = add i32 %1459, -1
  %1461 = add i64 %840, 4472
  %1462 = inttoptr i64 %1461 to i32*
  store i32 %1460, i32* %1462
  %1463 = inttoptr i64 %982 to i64*
  %1464 = load i64, i64* %1463
  %1465 = add i64 %1464, 4472
  %1466 = inttoptr i64 %1465 to i32*
  %1467 = load i32, i32* %1466
  %1468 = add i32 %1467, 1
  %1469 = zext i32 %1468 to i128
  %1470 = mul nuw nsw i128 %1469, 24
  %1471 = trunc i128 %1470 to i64
  %1472 = add i64 %846, 56
  %1473 = load i64, i64* %13, align 8, !tbaa !1240
  %1474 = add i64 %1473, -8
  %1475 = inttoptr i64 %1474 to i64*
  store i64 %1472, i64* %1475
  %1476 = inttoptr i64 %1474 to i64*
  %1477 = load i64, i64* %1476
  store i64 %1477, i64* %3, align 8, !alias.scope !3023, !noalias !3026
  store i64 %1473, i64* %13, align 8, !alias.scope !3023, !noalias !3026
  %1478 = tail call i64 @malloc(i64 %1471)
  %1479 = load i64, i64* %14, align 8
  %1480 = add i64 %1479, -32
  %1481 = load i64, i64* %3, align 8
  %1482 = inttoptr i64 %1480 to i64*
  %1483 = load i64, i64* %1482
  store i64 %1483, i64* %10, align 8, !tbaa !1240
  %1484 = add i64 %1483, 4456
  %1485 = inttoptr i64 %1484 to i64*
  store i64 %1478, i64* %1485
  %1486 = inttoptr i64 %1480 to i64*
  %1487 = load i64, i64* %1486
  %1488 = add i64 %1487, 4456
  %1489 = inttoptr i64 %1488 to i64*
  %1490 = load i64, i64* %1489
  %1491 = icmp eq i64 %1490, 0
  %1492 = select i1 %1491, i64 29, i64 111
  %1493 = add i64 %1481, %1492
  br i1 %1491, label %block_4070f7, label %block_407149

block_407180:                                     ; preds = %block_407149
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4649), i64* %11, align 8, !tbaa !1240
  %1494 = add i64 %884, 4224
  %1495 = inttoptr i64 %1494 to i64*
  %1496 = load i64, i64* %1495
  store i64 %1496, i64* %12, align 8, !tbaa !1240
  %1497 = add i64 %876, -16
  %1498 = inttoptr i64 %1497 to i64*
  %1499 = load i64, i64* %1498
  %1500 = add i64 %1499, 1032
  %1501 = inttoptr i64 %1500 to i32*
  %1502 = load i32, i32* %1501
  %1503 = add i32 %1502, 1
  %1504 = zext i32 %1503 to i64
  store i64 %1504, i64* %9, align 8, !tbaa !1240
  %1505 = zext i32 %1503 to i128
  %1506 = mul nuw nsw i128 %1505, 12
  %1507 = trunc i128 %1506 to i64
  %1508 = add i64 %890, 49
  %1509 = load i64, i64* %13, align 8, !tbaa !1240
  %1510 = add i64 %1509, -8
  %1511 = inttoptr i64 %1510 to i64*
  store i64 %1508, i64* %1511
  %1512 = load i64, i64* %545, align 8, !alias.scope !3028, !noalias !3031
  %1513 = load i64, i64* %15, align 8, !alias.scope !3028, !noalias !3031
  %1514 = inttoptr i64 %1509 to i64*
  %1515 = load i64, i64* %1514
  %1516 = add i64 %1509, 8
  %1517 = inttoptr i64 %1516 to i64*
  %1518 = load i64, i64* %1517
  %1519 = add i64 %1509, 16
  %1520 = inttoptr i64 %1519 to i64*
  %1521 = load i64, i64* %1520
  %1522 = add i64 %1509, 24
  %1523 = inttoptr i64 %1522 to i64*
  %1524 = load i64, i64* %1523
  %1525 = add i64 %1509, 32
  %1526 = inttoptr i64 %1525 to i64*
  %1527 = load i64, i64* %1526
  %1528 = add i64 %1509, 40
  %1529 = inttoptr i64 %1528 to i64*
  %1530 = load i64, i64* %1529
  %1531 = add i64 %1509, 48
  %1532 = inttoptr i64 %1531 to i64*
  %1533 = load i64, i64* %1532
  %1534 = add i64 %1509, 56
  %1535 = inttoptr i64 %1534 to i64*
  %1536 = load i64, i64* %1535
  %1537 = add i64 %1509, 64
  %1538 = inttoptr i64 %1537 to i64*
  %1539 = load i64, i64* %1538
  %1540 = add i64 %1509, 72
  %1541 = inttoptr i64 %1540 to i64*
  %1542 = load i64, i64* %1541
  %1543 = inttoptr i64 %1510 to i64*
  %1544 = load i64, i64* %1543
  store i64 %1544, i64* %3, align 8, !alias.scope !3028, !noalias !3031
  store i64 %1509, i64* %13, align 8, !alias.scope !3028, !noalias !3031
  %1545 = tail call i64 @fprintf(i64 %1496, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4649), i64 %1507, i64 %1504, i64 %1512, i64 %1513, i64 %1515, i64 %1518, i64 %1521, i64 %1524, i64 %1527, i64 %1530, i64 %1533, i64 %1536, i64 %1539, i64 %1542), !noalias !3028
  %1546 = load i64, i64* %14, align 8
  %1547 = add i64 %1546, -32
  %1548 = inttoptr i64 %1547 to i64*
  %1549 = load i64, i64* %1548
  %1550 = add i64 %1549, 512
  %1551 = inttoptr i64 %1550 to i32*
  store i32 5, i32* %1551
  %1552 = inttoptr i64 %1547 to i64*
  %1553 = load i64, i64* %1552
  store i64 %1553, i64* %10, align 8, !tbaa !1240
  %1554 = add i64 %1546, -8
  %1555 = inttoptr i64 %1554 to i64*
  store i64 %1553, i64* %1555
  %1556 = add i64 %1546, -176
  %1557 = trunc i64 %1545 to i32
  %1558 = inttoptr i64 %1556 to i32*
  store i32 %1557, i32* %1558
  br label %block_4072f9
}

; Function Attrs: noinline
define %struct.Memory* @sub_40a230_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40a230:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %16 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %17 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %19, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %20, align 8, !tbaa !1240
  %33 = load i64, i64* %26, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %25, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %24, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %23, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %14, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -328
  store i64 %48, i64* %19, align 8, !tbaa !1240
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = load i8, i8* %5, align 1
  %56 = add i64 %30, 88
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %21, align 8, !tbaa !1240
  %59 = add i64 %30, 80
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %22, align 8, !tbaa !1240
  %62 = add i64 %30, 72
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %14, align 8, !tbaa !1240
  %65 = add i64 %30, 64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66
  store i64 %67, i64* %25, align 8, !tbaa !1240
  %68 = add i64 %30, 56
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %26, align 8, !tbaa !1240
  %71 = add i64 %30, 48
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %23, align 8, !tbaa !1240
  %74 = load i64, i64* %20, align 8
  %75 = add i64 %74, 48
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %24, align 8, !tbaa !1240
  %78 = add i64 %74, 40
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %17, align 8, !tbaa !1240
  %81 = add i64 %74, -117
  %82 = inttoptr i64 %81 to i8*
  store i8 %55, i8* %82
  %83 = add i64 %74, 32
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %74, -124
  %87 = load i32, i32* %7, align 4
  %88 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %88
  %89 = add i64 %74, 24
  %90 = inttoptr i64 %89 to i32*
  %91 = load i32, i32* %90
  %92 = add i64 %74, -136
  %93 = inttoptr i64 %92 to i64*
  store i64 %85, i64* %93
  %94 = add i64 %74, 16
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %74, -140
  %98 = inttoptr i64 %97 to i32*
  store i32 %91, i32* %98
  %99 = inttoptr i64 %86 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %15, align 8, !tbaa !1240
  %102 = add i64 %74, -152
  %103 = inttoptr i64 %102 to i64*
  store i64 %96, i64* %103
  %104 = add i64 %74, -48
  %105 = load i64, i64* %18, align 8
  %106 = inttoptr i64 %104 to i64*
  store i64 %105, i64* %106
  %107 = inttoptr i64 %81 to i8*
  %108 = load i8, i8* %107
  %109 = add i64 %74, -49
  %110 = inttoptr i64 %109 to i8*
  store i8 %108, i8* %110
  %111 = add i64 %74, -56
  %112 = load i32, i32* %9, align 4
  %113 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %113
  %114 = add i64 %74, -60
  %115 = inttoptr i64 %114 to i32*
  store i32 %100, i32* %115
  %116 = add i64 %74, -64
  %117 = load i32, i32* %11, align 4
  %118 = inttoptr i64 %116 to i32*
  store i32 %117, i32* %118
  %119 = add i64 %74, -68
  %120 = load i32, i32* %13, align 4
  %121 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %121
  %122 = add i64 %74, -80
  %123 = bitcast [32 x %union.VectorReg]* %27 to double*
  %124 = load double, double* %123, align 1
  %125 = inttoptr i64 %122 to double*
  store double %124, double* %125
  %126 = add i64 %74, -88
  %127 = bitcast %union.VectorReg* %28 to double*
  %128 = load double, double* %127, align 1
  %129 = inttoptr i64 %126 to double*
  store double %128, double* %129
  %130 = inttoptr i64 %104 to i64*
  %131 = load i64, i64* %130
  %132 = add i64 %74, -160
  %133 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %133
  %134 = load i64, i64* %20, align 8
  %135 = add i64 %134, -160
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136
  %138 = add i64 %134, -168
  %139 = load i64, i64* %17, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %140
  %141 = add i64 %134, -176
  %142 = load i64, i64* %22, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %142, i64* %143
  %144 = add i64 %134, -184
  %145 = load i64, i64* %14, align 8
  %146 = inttoptr i64 %144 to i64*
  store i64 %145, i64* %146
  %147 = add i64 %134, -192
  %148 = load i64, i64* %25, align 8
  %149 = inttoptr i64 %147 to i64*
  store i64 %148, i64* %149
  %150 = add i64 %134, -200
  %151 = load i64, i64* %26, align 8
  %152 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %152
  %153 = add i64 %134, -208
  %154 = load i64, i64* %24, align 8
  %155 = inttoptr i64 %153 to i64*
  store i64 %154, i64* %155
  %156 = add i64 %134, -216
  %157 = load i64, i64* %23, align 8
  %158 = inttoptr i64 %156 to i64*
  store i64 %157, i64* %158
  %159 = add i64 %134, -224
  %160 = load i64, i64* %21, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %161
  %162 = add i64 %1, 228
  %163 = load i64, i64* %19, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %172 = load i64, i64* %168, align 8, !alias.scope !3033, !noalias !3036
  %173 = load i64, i64* %167, align 8, !alias.scope !3033, !noalias !3036
  %174 = load i64, i64* %170, align 8, !alias.scope !3033, !noalias !3036
  %175 = load i64, i64* %171, align 8, !alias.scope !3033, !noalias !3036
  %176 = inttoptr i64 %163 to i64*
  %177 = load i64, i64* %176
  %178 = add i64 %163, 8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %163, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %163, 24
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %163, 32
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %163, 40
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %163, 48
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %163, 56
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %163, 64
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %163, 72
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = inttoptr i64 %164 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %3, align 8, !alias.scope !3033, !noalias !3036
  store i64 %163, i64* %19, align 8, !alias.scope !3033, !noalias !3036
  %207 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5296), i64 %137, i64 %172, i64 %173, i64 %174, i64 %175, i64 %177, i64 %180, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204), !noalias !3033
  %208 = load i64, i64* %3, align 8
  %209 = load i64, i64* %20, align 8
  %210 = add i64 %209, -49
  %211 = inttoptr i64 %210 to i8*
  %212 = load i8, i8* %211
  %213 = sext i8 %212 to i64
  %214 = and i64 %213, 4294967295
  store i64 %214, i64* %17, align 8, !tbaa !1240
  %215 = add i64 %209, -228
  %216 = trunc i64 %207 to i32
  %217 = inttoptr i64 %215 to i32*
  store i32 %216, i32* %217
  %218 = add i64 %208, 27
  %219 = load i64, i64* %19, align 8, !tbaa !1240
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %168, align 8, !alias.scope !3038, !noalias !3041
  %223 = load i64, i64* %167, align 8, !alias.scope !3038, !noalias !3041
  %224 = load i64, i64* %170, align 8, !alias.scope !3038, !noalias !3041
  %225 = load i64, i64* %171, align 8, !alias.scope !3038, !noalias !3041
  %226 = inttoptr i64 %219 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %219, 8
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = add i64 %219, 16
  %232 = inttoptr i64 %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %219, 24
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235
  %237 = add i64 %219, 32
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  %240 = add i64 %219, 40
  %241 = inttoptr i64 %240 to i64*
  %242 = load i64, i64* %241
  %243 = add i64 %219, 48
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244
  %246 = add i64 %219, 56
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %219, 64
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %219, 72
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  %255 = inttoptr i64 %220 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %3, align 8, !alias.scope !3038, !noalias !3041
  store i64 %219, i64* %19, align 8, !alias.scope !3038, !noalias !3041
  %257 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5324), i64 %214, i64 %222, i64 %223, i64 %224, i64 %225, i64 %227, i64 %230, i64 %233, i64 %236, i64 %239, i64 %242, i64 %245, i64 %248, i64 %251, i64 %254), !noalias !3038
  %258 = load i64, i64* %20, align 8
  %259 = add i64 %258, -60
  %260 = load i64, i64* %3, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261
  %263 = icmp eq i32 %262, 0
  %264 = add i64 %258, -232
  %265 = trunc i64 %257 to i32
  %266 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %266
  %267 = select i1 %263, i64 16, i64 240
  %268 = add i64 %260, %267
  %269 = add i64 %258, -64
  %270 = inttoptr i64 %269 to i32*
  %271 = load i32, i32* %270
  br i1 %263, label %block_40a33f, label %block_40a41f

block_40a4fd:                                     ; preds = %block_40a4b6, %block_40a4dc
  %272 = phi i64 [ %835, %block_40a4dc ], [ %1199, %block_40a4b6 ]
  %273 = phi i64 [ %839, %block_40a4dc ], [ %1204, %block_40a4b6 ]
  %274 = phi %struct.Memory* [ %955, %block_40a4dc ], [ %955, %block_40a4b6 ]
  %275 = add i64 %272, 32
  %276 = inttoptr i64 %275 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %273, 21
  %279 = load i64, i64* %19, align 8, !tbaa !1240
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281
  %282 = load i64, i64* %168, align 8, !alias.scope !3043, !noalias !3046
  %283 = load i64, i64* %167, align 8, !alias.scope !3043, !noalias !3046
  %284 = load i64, i64* %170, align 8, !alias.scope !3043, !noalias !3046
  %285 = load i64, i64* %171, align 8, !alias.scope !3043, !noalias !3046
  %286 = inttoptr i64 %279 to i64*
  %287 = load i64, i64* %286
  %288 = add i64 %279, 8
  %289 = inttoptr i64 %288 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %279, 16
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %279, 24
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %279, 32
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %279, 40
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %279, 48
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %279, 56
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %279, 64
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %279, 72
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = inttoptr i64 %280 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %3, align 8, !alias.scope !3043, !noalias !3046
  store i64 %279, i64* %19, align 8, !alias.scope !3043, !noalias !3046
  %317 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2112), i64 %277, i64 %282, i64 %283, i64 %284, i64 %285, i64 %287, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314), !noalias !3043
  %318 = load i64, i64* %3, align 8
  %319 = load i64, i64* %20, align 8
  %320 = add i64 %319, 40
  %321 = inttoptr i64 %320 to i64*
  %322 = load i64, i64* %321
  %323 = add i64 %319, -284
  %324 = trunc i64 %317 to i32
  %325 = inttoptr i64 %323 to i32*
  store i32 %324, i32* %325
  %326 = add i64 %318, 27
  %327 = load i64, i64* %19, align 8, !tbaa !1240
  %328 = add i64 %327, -8
  %329 = inttoptr i64 %328 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %168, align 8, !alias.scope !3048, !noalias !3051
  %331 = load i64, i64* %167, align 8, !alias.scope !3048, !noalias !3051
  %332 = load i64, i64* %170, align 8, !alias.scope !3048, !noalias !3051
  %333 = load i64, i64* %171, align 8, !alias.scope !3048, !noalias !3051
  %334 = inttoptr i64 %327 to i64*
  %335 = load i64, i64* %334
  %336 = add i64 %327, 8
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337
  %339 = add i64 %327, 16
  %340 = inttoptr i64 %339 to i64*
  %341 = load i64, i64* %340
  %342 = add i64 %327, 24
  %343 = inttoptr i64 %342 to i64*
  %344 = load i64, i64* %343
  %345 = add i64 %327, 32
  %346 = inttoptr i64 %345 to i64*
  %347 = load i64, i64* %346
  %348 = add i64 %327, 40
  %349 = inttoptr i64 %348 to i64*
  %350 = load i64, i64* %349
  %351 = add i64 %327, 48
  %352 = inttoptr i64 %351 to i64*
  %353 = load i64, i64* %352
  %354 = add i64 %327, 56
  %355 = inttoptr i64 %354 to i64*
  %356 = load i64, i64* %355
  %357 = add i64 %327, 64
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  %360 = add i64 %327, 72
  %361 = inttoptr i64 %360 to i64*
  %362 = load i64, i64* %361
  %363 = inttoptr i64 %328 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %3, align 8, !alias.scope !3048, !noalias !3051
  store i64 %327, i64* %19, align 8, !alias.scope !3048, !noalias !3051
  %365 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2149), i64 %322, i64 %330, i64 %331, i64 %332, i64 %333, i64 %335, i64 %338, i64 %341, i64 %344, i64 %347, i64 %350, i64 %353, i64 %356, i64 %359, i64 %362), !noalias !3048
  %366 = load i64, i64* %3, align 8
  %367 = load i64, i64* %20, align 8
  %368 = add i64 %367, 48
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = add i64 %367, -288
  %372 = trunc i64 %365 to i32
  %373 = inttoptr i64 %371 to i32*
  store i32 %372, i32* %373
  %374 = add i64 %366, 27
  %375 = load i64, i64* %19, align 8, !tbaa !1240
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377
  %378 = load i64, i64* %168, align 8, !alias.scope !3053, !noalias !3056
  %379 = load i64, i64* %167, align 8, !alias.scope !3053, !noalias !3056
  %380 = load i64, i64* %170, align 8, !alias.scope !3053, !noalias !3056
  %381 = load i64, i64* %171, align 8, !alias.scope !3053, !noalias !3056
  %382 = inttoptr i64 %375 to i64*
  %383 = load i64, i64* %382
  %384 = add i64 %375, 8
  %385 = inttoptr i64 %384 to i64*
  %386 = load i64, i64* %385
  %387 = add i64 %375, 16
  %388 = inttoptr i64 %387 to i64*
  %389 = load i64, i64* %388
  %390 = add i64 %375, 24
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391
  %393 = add i64 %375, 32
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* %394
  %396 = add i64 %375, 40
  %397 = inttoptr i64 %396 to i64*
  %398 = load i64, i64* %397
  %399 = add i64 %375, 48
  %400 = inttoptr i64 %399 to i64*
  %401 = load i64, i64* %400
  %402 = add i64 %375, 56
  %403 = inttoptr i64 %402 to i64*
  %404 = load i64, i64* %403
  %405 = add i64 %375, 64
  %406 = inttoptr i64 %405 to i64*
  %407 = load i64, i64* %406
  %408 = add i64 %375, 72
  %409 = inttoptr i64 %408 to i64*
  %410 = load i64, i64* %409
  %411 = inttoptr i64 %376 to i64*
  %412 = load i64, i64* %411
  store i64 %412, i64* %3, align 8, !alias.scope !3053, !noalias !3056
  store i64 %375, i64* %19, align 8, !alias.scope !3053, !noalias !3056
  %413 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5609), i64 %370, i64 %378, i64 %379, i64 %380, i64 %381, i64 %383, i64 %386, i64 %389, i64 %392, i64 %395, i64 %398, i64 %401, i64 %404, i64 %407, i64 %410), !noalias !3053
  %414 = load i64, i64* %3, align 8
  %415 = load i64, i64* %20, align 8
  %416 = add i64 %415, 56
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %415, -292
  %420 = trunc i64 %413 to i32
  %421 = inttoptr i64 %419 to i32*
  store i32 %420, i32* %421
  %422 = add i64 %414, 27
  %423 = load i64, i64* %19, align 8, !tbaa !1240
  %424 = add i64 %423, -8
  %425 = inttoptr i64 %424 to i64*
  store i64 %422, i64* %425
  %426 = load i64, i64* %168, align 8, !alias.scope !3058, !noalias !3061
  %427 = load i64, i64* %167, align 8, !alias.scope !3058, !noalias !3061
  %428 = load i64, i64* %170, align 8, !alias.scope !3058, !noalias !3061
  %429 = load i64, i64* %171, align 8, !alias.scope !3058, !noalias !3061
  %430 = inttoptr i64 %423 to i64*
  %431 = load i64, i64* %430
  %432 = add i64 %423, 8
  %433 = inttoptr i64 %432 to i64*
  %434 = load i64, i64* %433
  %435 = add i64 %423, 16
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %423, 24
  %439 = inttoptr i64 %438 to i64*
  %440 = load i64, i64* %439
  %441 = add i64 %423, 32
  %442 = inttoptr i64 %441 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %423, 40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %423, 48
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %423, 56
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  %453 = add i64 %423, 64
  %454 = inttoptr i64 %453 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %423, 72
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = inttoptr i64 %424 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %3, align 8, !alias.scope !3058, !noalias !3061
  store i64 %423, i64* %19, align 8, !alias.scope !3058, !noalias !3061
  %461 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2206), i64 %418, i64 %426, i64 %427, i64 %428, i64 %429, i64 %431, i64 %434, i64 %437, i64 %440, i64 %443, i64 %446, i64 %449, i64 %452, i64 %455, i64 %458), !noalias !3058
  %462 = load i64, i64* %3, align 8
  %463 = load i64, i64* %20, align 8
  %464 = add i64 %463, 64
  %465 = inttoptr i64 %464 to i64*
  %466 = load i64, i64* %465
  %467 = add i64 %463, -296
  %468 = trunc i64 %461 to i32
  %469 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %469
  %470 = add i64 %462, 27
  %471 = load i64, i64* %19, align 8, !tbaa !1240
  %472 = add i64 %471, -8
  %473 = inttoptr i64 %472 to i64*
  store i64 %470, i64* %473
  %474 = load i64, i64* %168, align 8, !alias.scope !3063, !noalias !3066
  %475 = load i64, i64* %167, align 8, !alias.scope !3063, !noalias !3066
  %476 = load i64, i64* %170, align 8, !alias.scope !3063, !noalias !3066
  %477 = load i64, i64* %171, align 8, !alias.scope !3063, !noalias !3066
  %478 = inttoptr i64 %471 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %471, 8
  %481 = inttoptr i64 %480 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %471, 16
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %471, 24
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %471, 32
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %471, 40
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %471, 48
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = add i64 %471, 56
  %499 = inttoptr i64 %498 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %471, 64
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %471, 72
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = inttoptr i64 %472 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %3, align 8, !alias.scope !3063, !noalias !3066
  store i64 %471, i64* %19, align 8, !alias.scope !3063, !noalias !3066
  %509 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2229), i64 %466, i64 %474, i64 %475, i64 %476, i64 %477, i64 %479, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497, i64 %500, i64 %503, i64 %506), !noalias !3063
  %510 = load i64, i64* %3, align 8
  %511 = load i64, i64* %20, align 8
  %512 = add i64 %511, 72
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %511, -300
  %516 = trunc i64 %509 to i32
  %517 = inttoptr i64 %515 to i32*
  store i32 %516, i32* %517
  %518 = add i64 %510, 27
  %519 = load i64, i64* %19, align 8, !tbaa !1240
  %520 = add i64 %519, -8
  %521 = inttoptr i64 %520 to i64*
  store i64 %518, i64* %521
  %522 = load i64, i64* %168, align 8, !alias.scope !3068, !noalias !3071
  %523 = load i64, i64* %167, align 8, !alias.scope !3068, !noalias !3071
  %524 = load i64, i64* %170, align 8, !alias.scope !3068, !noalias !3071
  %525 = load i64, i64* %171, align 8, !alias.scope !3068, !noalias !3071
  %526 = inttoptr i64 %519 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %519, 8
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %519, 16
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %519, 24
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %519, 32
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %519, 40
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %519, 48
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %519, 56
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = add i64 %519, 64
  %550 = inttoptr i64 %549 to i64*
  %551 = load i64, i64* %550
  %552 = add i64 %519, 72
  %553 = inttoptr i64 %552 to i64*
  %554 = load i64, i64* %553
  %555 = inttoptr i64 %520 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %3, align 8, !alias.scope !3068, !noalias !3071
  store i64 %519, i64* %19, align 8, !alias.scope !3068, !noalias !3071
  %557 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2252), i64 %514, i64 %522, i64 %523, i64 %524, i64 %525, i64 %527, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548, i64 %551, i64 %554), !noalias !3068
  %558 = load i64, i64* %3, align 8
  %559 = load i64, i64* %20, align 8
  %560 = add i64 %559, 80
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %559, -304
  %564 = trunc i64 %557 to i32
  %565 = inttoptr i64 %563 to i32*
  store i32 %564, i32* %565
  %566 = add i64 %558, 27
  %567 = load i64, i64* %19, align 8, !tbaa !1240
  %568 = add i64 %567, -8
  %569 = inttoptr i64 %568 to i64*
  store i64 %566, i64* %569
  %570 = load i64, i64* %168, align 8, !alias.scope !3073, !noalias !3076
  %571 = load i64, i64* %167, align 8, !alias.scope !3073, !noalias !3076
  %572 = load i64, i64* %170, align 8, !alias.scope !3073, !noalias !3076
  %573 = load i64, i64* %171, align 8, !alias.scope !3073, !noalias !3076
  %574 = inttoptr i64 %567 to i64*
  %575 = load i64, i64* %574
  %576 = add i64 %567, 8
  %577 = inttoptr i64 %576 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %567, 16
  %580 = inttoptr i64 %579 to i64*
  %581 = load i64, i64* %580
  %582 = add i64 %567, 24
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = add i64 %567, 32
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  %588 = add i64 %567, 40
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %567, 48
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = add i64 %567, 56
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  %597 = add i64 %567, 64
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %567, 72
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = inttoptr i64 %568 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %3, align 8, !alias.scope !3073, !noalias !3076
  store i64 %567, i64* %19, align 8, !alias.scope !3073, !noalias !3076
  %605 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2275), i64 %562, i64 %570, i64 %571, i64 %572, i64 %573, i64 %575, i64 %578, i64 %581, i64 %584, i64 %587, i64 %590, i64 %593, i64 %596, i64 %599, i64 %602), !noalias !3073
  %606 = load i64, i64* %3, align 8
  %607 = load i64, i64* %20, align 8
  %608 = add i64 %607, 88
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %607, -308
  %612 = trunc i64 %605 to i32
  %613 = inttoptr i64 %611 to i32*
  store i32 %612, i32* %613
  %614 = add i64 %606, 27
  %615 = load i64, i64* %19, align 8, !tbaa !1240
  %616 = add i64 %615, -8
  %617 = inttoptr i64 %616 to i64*
  store i64 %614, i64* %617
  %618 = load i64, i64* %168, align 8, !alias.scope !3078, !noalias !3081
  %619 = load i64, i64* %167, align 8, !alias.scope !3078, !noalias !3081
  %620 = load i64, i64* %170, align 8, !alias.scope !3078, !noalias !3081
  %621 = load i64, i64* %171, align 8, !alias.scope !3078, !noalias !3081
  %622 = inttoptr i64 %615 to i64*
  %623 = load i64, i64* %622
  %624 = add i64 %615, 8
  %625 = inttoptr i64 %624 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %615, 16
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %615, 24
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = add i64 %615, 32
  %634 = inttoptr i64 %633 to i64*
  %635 = load i64, i64* %634
  %636 = add i64 %615, 40
  %637 = inttoptr i64 %636 to i64*
  %638 = load i64, i64* %637
  %639 = add i64 %615, 48
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %615, 56
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = add i64 %615, 64
  %646 = inttoptr i64 %645 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %615, 72
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = inttoptr i64 %616 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %3, align 8, !alias.scope !3078, !noalias !3081
  store i64 %615, i64* %19, align 8, !alias.scope !3078, !noalias !3081
  %653 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2298), i64 %610, i64 %618, i64 %619, i64 %620, i64 %621, i64 %623, i64 %626, i64 %629, i64 %632, i64 %635, i64 %638, i64 %641, i64 %644, i64 %647, i64 %650), !noalias !3078
  %654 = load i64, i64* %3, align 8
  %655 = load i64, i64* %20, align 8
  %656 = add i64 %655, 96
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %17, align 8, !tbaa !1240
  %659 = add i64 %655, -312
  %660 = trunc i64 %653 to i32
  %661 = inttoptr i64 %659 to i32*
  store i32 %660, i32* %661
  %662 = add i64 %654, 27
  %663 = load i64, i64* %19, align 8, !tbaa !1240
  %664 = add i64 %663, -8
  %665 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %665
  %666 = load i64, i64* %168, align 8, !alias.scope !3083, !noalias !3086
  %667 = load i64, i64* %167, align 8, !alias.scope !3083, !noalias !3086
  %668 = load i64, i64* %170, align 8, !alias.scope !3083, !noalias !3086
  %669 = load i64, i64* %171, align 8, !alias.scope !3083, !noalias !3086
  %670 = inttoptr i64 %663 to i64*
  %671 = load i64, i64* %670
  %672 = add i64 %663, 8
  %673 = inttoptr i64 %672 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %663, 16
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %663, 24
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %663, 32
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %663, 40
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %663, 48
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %663, 56
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %663, 64
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = add i64 %663, 72
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = inttoptr i64 %664 to i64*
  %700 = load i64, i64* %699
  store i64 %700, i64* %3, align 8, !alias.scope !3083, !noalias !3086
  store i64 %663, i64* %19, align 8, !alias.scope !3083, !noalias !3086
  %701 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5651), i64 %658, i64 %666, i64 %667, i64 %668, i64 %669, i64 %671, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695, i64 %698), !noalias !3083
  %702 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5674), i64* %18, align 8, !tbaa !1240
  %703 = load i64, i64* %20, align 8
  %704 = add i64 %703, -316
  %705 = trunc i64 %701 to i32
  %706 = inttoptr i64 %704 to i32*
  store i32 %705, i32* %706
  %707 = add i64 %702, 23
  %708 = load i64, i64* %19, align 8, !tbaa !1240
  %709 = add i64 %708, -8
  %710 = inttoptr i64 %709 to i64*
  store i64 %707, i64* %710
  %711 = load i64, i64* %169, align 8, !alias.scope !3088, !noalias !3091
  %712 = load i64, i64* %168, align 8, !alias.scope !3088, !noalias !3091
  %713 = load i64, i64* %167, align 8, !alias.scope !3088, !noalias !3091
  %714 = load i64, i64* %170, align 8, !alias.scope !3088, !noalias !3091
  %715 = load i64, i64* %171, align 8, !alias.scope !3088, !noalias !3091
  %716 = inttoptr i64 %708 to i64*
  %717 = load i64, i64* %716
  %718 = add i64 %708, 8
  %719 = inttoptr i64 %718 to i64*
  %720 = load i64, i64* %719
  %721 = add i64 %708, 16
  %722 = inttoptr i64 %721 to i64*
  %723 = load i64, i64* %722
  %724 = add i64 %708, 24
  %725 = inttoptr i64 %724 to i64*
  %726 = load i64, i64* %725
  %727 = add i64 %708, 32
  %728 = inttoptr i64 %727 to i64*
  %729 = load i64, i64* %728
  %730 = add i64 %708, 40
  %731 = inttoptr i64 %730 to i64*
  %732 = load i64, i64* %731
  %733 = add i64 %708, 48
  %734 = inttoptr i64 %733 to i64*
  %735 = load i64, i64* %734
  %736 = add i64 %708, 56
  %737 = inttoptr i64 %736 to i64*
  %738 = load i64, i64* %737
  %739 = add i64 %708, 64
  %740 = inttoptr i64 %739 to i64*
  %741 = load i64, i64* %740
  %742 = add i64 %708, 72
  %743 = inttoptr i64 %742 to i64*
  %744 = load i64, i64* %743
  store i64 %708, i64* %19, align 8, !alias.scope !3088, !noalias !3091
  %745 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5674), i64 %711, i64 %712, i64 %713, i64 %714, i64 %715, i64 %717, i64 %720, i64 %723, i64 %726, i64 %729, i64 %732, i64 %735, i64 %738, i64 %741, i64 %744), !noalias !3088
  store i64 %745, i64* %166, align 8, !alias.scope !3088, !noalias !3091
  %746 = load i64, i64* %20, align 8
  %747 = add i64 %746, -320
  %748 = trunc i64 %745 to i32
  %749 = inttoptr i64 %747 to i32*
  store i32 %748, i32* %749
  %750 = load i64, i64* %19, align 8
  %751 = add i64 %750, 280
  %752 = icmp ugt i64 %750, -281
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %49, align 1, !tbaa !1264
  %754 = trunc i64 %751 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #10
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %50, align 1, !tbaa !1278
  %760 = xor i64 %750, 16
  %761 = xor i64 %760, %751
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %51, align 1, !tbaa !1279
  %765 = icmp eq i64 %751, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %52, align 1, !tbaa !1280
  %767 = lshr i64 %751, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %53, align 1, !tbaa !1281
  %769 = lshr i64 %750, 63
  %770 = xor i64 %767, %769
  %771 = add nuw nsw i64 %770, %767
  %772 = icmp eq i64 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %54, align 1, !tbaa !1282
  %774 = add i64 %750, 288
  %775 = inttoptr i64 %751 to i64*
  %776 = load i64, i64* %775
  store i64 %776, i64* %14, align 8, !tbaa !1240
  %777 = add i64 %750, 296
  %778 = inttoptr i64 %774 to i64*
  %779 = load i64, i64* %778
  store i64 %779, i64* %23, align 8, !tbaa !1240
  %780 = add i64 %750, 304
  %781 = inttoptr i64 %777 to i64*
  %782 = load i64, i64* %781
  store i64 %782, i64* %24, align 8, !tbaa !1240
  %783 = add i64 %750, 312
  %784 = inttoptr i64 %780 to i64*
  %785 = load i64, i64* %784
  store i64 %785, i64* %25, align 8, !tbaa !1240
  %786 = add i64 %750, 320
  %787 = inttoptr i64 %783 to i64*
  %788 = load i64, i64* %787
  store i64 %788, i64* %26, align 8, !tbaa !1240
  %789 = add i64 %750, 328
  %790 = inttoptr i64 %786 to i64*
  %791 = load i64, i64* %790
  store i64 %791, i64* %20, align 8, !tbaa !1240
  %792 = inttoptr i64 %789 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %3, align 8, !tbaa !1240
  %794 = add i64 %750, 336
  store i64 %794, i64* %19, align 8, !tbaa !1240
  ret %struct.Memory* %274

block_40a4dc:                                     ; preds = %block_40a43f
  %795 = add i64 %1158, 27
  %796 = load i64, i64* %19, align 8, !tbaa !1240
  %797 = add i64 %796, -8
  %798 = inttoptr i64 %797 to i64*
  store i64 %795, i64* %798
  %799 = load i64, i64* %168, align 8, !alias.scope !3093, !noalias !3096
  %800 = load i64, i64* %167, align 8, !alias.scope !3093, !noalias !3096
  %801 = load i64, i64* %170, align 8, !alias.scope !3093, !noalias !3096
  %802 = load i64, i64* %171, align 8, !alias.scope !3093, !noalias !3096
  %803 = inttoptr i64 %796 to i64*
  %804 = load i64, i64* %803
  %805 = add i64 %796, 8
  %806 = inttoptr i64 %805 to i64*
  %807 = load i64, i64* %806
  %808 = add i64 %796, 16
  %809 = inttoptr i64 %808 to i64*
  %810 = load i64, i64* %809
  %811 = add i64 %796, 24
  %812 = inttoptr i64 %811 to i64*
  %813 = load i64, i64* %812
  %814 = add i64 %796, 32
  %815 = inttoptr i64 %814 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %796, 40
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %796, 48
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %796, 56
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %796, 64
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  %829 = add i64 %796, 72
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = inttoptr i64 %797 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %3, align 8, !alias.scope !3093, !noalias !3096
  store i64 %796, i64* %19, align 8, !alias.scope !3093, !noalias !3096
  %834 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5559), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5596), i64 %799, i64 %800, i64 %801, i64 %802, i64 %804, i64 %807, i64 %810, i64 %813, i64 %816, i64 %819, i64 %822, i64 %825, i64 %828, i64 %831), !noalias !3093
  %835 = load i64, i64* %20, align 8
  %836 = add i64 %835, -280
  %837 = trunc i64 %834 to i32
  %838 = load i64, i64* %3, align 8
  %839 = add i64 %838, 6
  %840 = inttoptr i64 %836 to i32*
  store i32 %837, i32* %840
  br label %block_40a4fd

block_40a41f:                                     ; preds = %block_40a33f, %block_40a230
  %841 = phi i64 [ %1207, %block_40a33f ], [ %268, %block_40a230 ]
  %842 = add i64 %258, -56
  %843 = inttoptr i64 %842 to i32*
  %844 = load i32, i32* %843
  %845 = zext i32 %844 to i64
  %846 = inttoptr i64 %259 to i32*
  %847 = load i32, i32* %846
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %16, align 8, !tbaa !1240
  %849 = zext i32 %271 to i64
  store i64 %849, i64* %15, align 8, !tbaa !1240
  %850 = add i64 %841, 26
  %851 = load i64, i64* %19, align 8, !tbaa !1240
  %852 = add i64 %851, -8
  %853 = inttoptr i64 %852 to i64*
  store i64 %850, i64* %853
  %854 = load i64, i64* %170, align 8, !alias.scope !3098, !noalias !3101
  %855 = load i64, i64* %171, align 8, !alias.scope !3098, !noalias !3101
  %856 = inttoptr i64 %851 to i64*
  %857 = load i64, i64* %856
  %858 = add i64 %851, 8
  %859 = inttoptr i64 %858 to i64*
  %860 = load i64, i64* %859
  %861 = add i64 %851, 16
  %862 = inttoptr i64 %861 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %851, 24
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = add i64 %851, 32
  %868 = inttoptr i64 %867 to i64*
  %869 = load i64, i64* %868
  %870 = add i64 %851, 40
  %871 = inttoptr i64 %870 to i64*
  %872 = load i64, i64* %871
  %873 = add i64 %851, 48
  %874 = inttoptr i64 %873 to i64*
  %875 = load i64, i64* %874
  %876 = add i64 %851, 56
  %877 = inttoptr i64 %876 to i64*
  %878 = load i64, i64* %877
  %879 = add i64 %851, 64
  %880 = inttoptr i64 %879 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %851, 72
  %883 = inttoptr i64 %882 to i64*
  %884 = load i64, i64* %883
  %885 = inttoptr i64 %852 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %3, align 8, !alias.scope !3098, !noalias !3101
  store i64 %851, i64* %19, align 8, !alias.scope !3098, !noalias !3101
  %887 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5440), i64 %845, i64 %848, i64 %849, i64 %854, i64 %855, i64 %857, i64 %860, i64 %863, i64 %866, i64 %869, i64 %872, i64 %875, i64 %878, i64 %881, i64 %884), !noalias !3098
  %888 = load i64, i64* %20, align 8
  %889 = add i64 %888, -256
  %890 = trunc i64 %887 to i32
  %891 = load i64, i64* %3, align 8
  %892 = add i64 %891, 6
  %893 = inttoptr i64 %889 to i32*
  store i32 %890, i32* %893
  br label %block_40a43f

block_40a41a:                                     ; preds = %block_40a400, %block_40a3d2
  %894 = phi i64 [ %1345, %block_40a400 ], [ %947, %block_40a3d2 ]
  %895 = phi i64 [ %1349, %block_40a400 ], [ %952, %block_40a3d2 ]
  %896 = phi %struct.Memory* [ %2, %block_40a400 ], [ %899, %block_40a3d2 ]
  %897 = add i64 %895, 37
  br label %block_40a43f

block_40a3d2:                                     ; preds = %block_40a3c0, %block_40a36a
  %898 = phi i64 [ %1299, %block_40a36a ], [ %1372, %block_40a3c0 ]
  %899 = phi %struct.Memory* [ %2, %block_40a36a ], [ %2, %block_40a3c0 ]
  %900 = add i64 %1281, -112
  %901 = inttoptr i64 %1282 to i32*
  %902 = load i32, i32* %901
  %903 = add i32 %902, 1
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %15, align 8, !tbaa !1240
  %905 = add nsw i64 %904, -112
  %906 = add i64 %905, %1281
  %907 = inttoptr i64 %906 to i8*
  store i8 0, i8* %907
  %908 = add i64 %898, 35
  %909 = load i64, i64* %19, align 8, !tbaa !1240
  %910 = add i64 %909, -8
  %911 = inttoptr i64 %910 to i64*
  store i64 %908, i64* %911
  %912 = load i64, i64* %168, align 8, !alias.scope !3103, !noalias !3106
  %913 = load i64, i64* %170, align 8, !alias.scope !3103, !noalias !3106
  %914 = load i64, i64* %171, align 8, !alias.scope !3103, !noalias !3106
  %915 = inttoptr i64 %909 to i64*
  %916 = load i64, i64* %915
  %917 = add i64 %909, 8
  %918 = inttoptr i64 %917 to i64*
  %919 = load i64, i64* %918
  %920 = add i64 %909, 16
  %921 = inttoptr i64 %920 to i64*
  %922 = load i64, i64* %921
  %923 = add i64 %909, 24
  %924 = inttoptr i64 %923 to i64*
  %925 = load i64, i64* %924
  %926 = add i64 %909, 32
  %927 = inttoptr i64 %926 to i64*
  %928 = load i64, i64* %927
  %929 = add i64 %909, 40
  %930 = inttoptr i64 %929 to i64*
  %931 = load i64, i64* %930
  %932 = add i64 %909, 48
  %933 = inttoptr i64 %932 to i64*
  %934 = load i64, i64* %933
  %935 = add i64 %909, 56
  %936 = inttoptr i64 %935 to i64*
  %937 = load i64, i64* %936
  %938 = add i64 %909, 64
  %939 = inttoptr i64 %938 to i64*
  %940 = load i64, i64* %939
  %941 = add i64 %909, 72
  %942 = inttoptr i64 %941 to i64*
  %943 = load i64, i64* %942
  %944 = inttoptr i64 %910 to i64*
  %945 = load i64, i64* %944
  store i64 %945, i64* %3, align 8, !alias.scope !3103, !noalias !3106
  store i64 %909, i64* %19, align 8, !alias.scope !3103, !noalias !3106
  %946 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5369), i64 %900, i64 %912, i64 %904, i64 %913, i64 %914, i64 %916, i64 %919, i64 %922, i64 %925, i64 %928, i64 %931, i64 %934, i64 %937, i64 %940, i64 %943), !noalias !3103
  %947 = load i64, i64* %20, align 8
  %948 = add i64 %947, -248
  %949 = trunc i64 %946 to i32
  %950 = load i64, i64* %3, align 8
  %951 = inttoptr i64 %948 to i32*
  store i32 %949, i32* %951
  %952 = add i64 %950, 37
  br label %block_40a41a

block_40a43f:                                     ; preds = %block_40a41a, %block_40a41f
  %953 = phi i64 [ %888, %block_40a41f ], [ %894, %block_40a41a ]
  %954 = phi i64 [ %892, %block_40a41f ], [ %897, %block_40a41a ]
  %955 = phi %struct.Memory* [ %2, %block_40a41f ], [ %896, %block_40a41a ]
  %956 = add i64 %953, -68
  %957 = inttoptr i64 %956 to i32*
  %958 = load i32, i32* %957
  %959 = zext i32 %958 to i64
  store i64 %959, i64* %17, align 8, !tbaa !1240
  %960 = add i64 %954, 20
  %961 = load i64, i64* %19, align 8, !tbaa !1240
  %962 = add i64 %961, -8
  %963 = inttoptr i64 %962 to i64*
  store i64 %960, i64* %963
  %964 = load i64, i64* %168, align 8, !alias.scope !3108, !noalias !3111
  %965 = load i64, i64* %167, align 8, !alias.scope !3108, !noalias !3111
  %966 = load i64, i64* %170, align 8, !alias.scope !3108, !noalias !3111
  %967 = load i64, i64* %171, align 8, !alias.scope !3108, !noalias !3111
  %968 = inttoptr i64 %961 to i64*
  %969 = load i64, i64* %968
  %970 = add i64 %961, 8
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %961, 16
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = add i64 %961, 24
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %961, 32
  %980 = inttoptr i64 %979 to i64*
  %981 = load i64, i64* %980
  %982 = add i64 %961, 40
  %983 = inttoptr i64 %982 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %961, 48
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  %988 = add i64 %961, 56
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  %991 = add i64 %961, 64
  %992 = inttoptr i64 %991 to i64*
  %993 = load i64, i64* %992
  %994 = add i64 %961, 72
  %995 = inttoptr i64 %994 to i64*
  %996 = load i64, i64* %995
  %997 = inttoptr i64 %962 to i64*
  %998 = load i64, i64* %997
  store i64 %998, i64* %3, align 8, !alias.scope !3108, !noalias !3111
  store i64 %961, i64* %19, align 8, !alias.scope !3108, !noalias !3111
  %999 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1837), i64 %959, i64 %964, i64 %965, i64 %966, i64 %967, i64 %969, i64 %972, i64 %975, i64 %978, i64 %981, i64 %984, i64 %987, i64 %990, i64 %993, i64 %996), !noalias !3108
  %1000 = load i64, i64* %3, align 8
  %1001 = load i64, i64* %20, align 8
  %1002 = add i64 %1001, -80
  %1003 = inttoptr i64 %1002 to double*
  %1004 = load double, double* %1003
  store double %1004, double* %123, align 1, !tbaa !1439
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1006 = bitcast i64* %1005 to double*
  store double 0.000000e+00, double* %1006, align 1, !tbaa !1439
  %1007 = add i64 %1001, -260
  %1008 = trunc i64 %999 to i32
  %1009 = inttoptr i64 %1007 to i32*
  store i32 %1008, i32* %1009
  %1010 = add i64 %1000, 28
  %1011 = load i64, i64* %19, align 8, !tbaa !1240
  %1012 = add i64 %1011, -8
  %1013 = inttoptr i64 %1012 to i64*
  store i64 %1010, i64* %1013
  %1014 = load i64, i64* %169, align 8, !alias.scope !3113, !noalias !3116
  %1015 = load i64, i64* %168, align 8, !alias.scope !3113, !noalias !3116
  %1016 = load i64, i64* %167, align 8, !alias.scope !3113, !noalias !3116
  %1017 = load i64, i64* %170, align 8, !alias.scope !3113, !noalias !3116
  %1018 = load i64, i64* %171, align 8, !alias.scope !3113, !noalias !3116
  %1019 = inttoptr i64 %1011 to i64*
  %1020 = load i64, i64* %1019
  %1021 = add i64 %1011, 8
  %1022 = inttoptr i64 %1021 to i64*
  %1023 = load i64, i64* %1022
  %1024 = add i64 %1011, 16
  %1025 = inttoptr i64 %1024 to i64*
  %1026 = load i64, i64* %1025
  %1027 = add i64 %1011, 24
  %1028 = inttoptr i64 %1027 to i64*
  %1029 = load i64, i64* %1028
  %1030 = add i64 %1011, 32
  %1031 = inttoptr i64 %1030 to i64*
  %1032 = load i64, i64* %1031
  %1033 = add i64 %1011, 40
  %1034 = inttoptr i64 %1033 to i64*
  %1035 = load i64, i64* %1034
  %1036 = add i64 %1011, 48
  %1037 = inttoptr i64 %1036 to i64*
  %1038 = load i64, i64* %1037
  %1039 = add i64 %1011, 56
  %1040 = inttoptr i64 %1039 to i64*
  %1041 = load i64, i64* %1040
  %1042 = add i64 %1011, 64
  %1043 = inttoptr i64 %1042 to i64*
  %1044 = load i64, i64* %1043
  %1045 = add i64 %1011, 72
  %1046 = inttoptr i64 %1045 to i64*
  %1047 = load i64, i64* %1046
  %1048 = inttoptr i64 %1012 to i64*
  %1049 = load i64, i64* %1048
  store i64 %1049, i64* %3, align 8, !alias.scope !3113, !noalias !3116
  store i64 %1011, i64* %19, align 8, !alias.scope !3113, !noalias !3116
  %1050 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5482), i64 %1014, i64 %1015, i64 %1016, i64 %1017, i64 %1018, i64 %1020, i64 %1023, i64 %1026, i64 %1029, i64 %1032, i64 %1035, i64 %1038, i64 %1041, i64 %1044, i64 %1047), !noalias !3113
  %1051 = load i64, i64* %3, align 8
  %1052 = load i64, i64* %20, align 8
  %1053 = add i64 %1052, -88
  %1054 = inttoptr i64 %1053 to double*
  %1055 = load double, double* %1054
  store double %1055, double* %123, align 1, !tbaa !1439
  store double 0.000000e+00, double* %1006, align 1, !tbaa !1439
  %1056 = add i64 %1052, -264
  %1057 = trunc i64 %1050 to i32
  %1058 = inttoptr i64 %1056 to i32*
  store i32 %1057, i32* %1058
  %1059 = add i64 %1051, 28
  %1060 = load i64, i64* %19, align 8, !tbaa !1240
  %1061 = add i64 %1060, -8
  %1062 = inttoptr i64 %1061 to i64*
  store i64 %1059, i64* %1062
  %1063 = load i64, i64* %169, align 8, !alias.scope !3118, !noalias !3121
  %1064 = load i64, i64* %168, align 8, !alias.scope !3118, !noalias !3121
  %1065 = load i64, i64* %167, align 8, !alias.scope !3118, !noalias !3121
  %1066 = load i64, i64* %170, align 8, !alias.scope !3118, !noalias !3121
  %1067 = load i64, i64* %171, align 8, !alias.scope !3118, !noalias !3121
  %1068 = inttoptr i64 %1060 to i64*
  %1069 = load i64, i64* %1068
  %1070 = add i64 %1060, 8
  %1071 = inttoptr i64 %1070 to i64*
  %1072 = load i64, i64* %1071
  %1073 = add i64 %1060, 16
  %1074 = inttoptr i64 %1073 to i64*
  %1075 = load i64, i64* %1074
  %1076 = add i64 %1060, 24
  %1077 = inttoptr i64 %1076 to i64*
  %1078 = load i64, i64* %1077
  %1079 = add i64 %1060, 32
  %1080 = inttoptr i64 %1079 to i64*
  %1081 = load i64, i64* %1080
  %1082 = add i64 %1060, 40
  %1083 = inttoptr i64 %1082 to i64*
  %1084 = load i64, i64* %1083
  %1085 = add i64 %1060, 48
  %1086 = inttoptr i64 %1085 to i64*
  %1087 = load i64, i64* %1086
  %1088 = add i64 %1060, 56
  %1089 = inttoptr i64 %1088 to i64*
  %1090 = load i64, i64* %1089
  %1091 = add i64 %1060, 64
  %1092 = inttoptr i64 %1091 to i64*
  %1093 = load i64, i64* %1092
  %1094 = add i64 %1060, 72
  %1095 = inttoptr i64 %1094 to i64*
  %1096 = load i64, i64* %1095
  %1097 = inttoptr i64 %1061 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %3, align 8, !alias.scope !3118, !noalias !3121
  store i64 %1060, i64* %19, align 8, !alias.scope !3118, !noalias !3121
  %1099 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5522), i64 %1063, i64 %1064, i64 %1065, i64 %1066, i64 %1067, i64 %1069, i64 %1072, i64 %1075, i64 %1078, i64 %1081, i64 %1084, i64 %1087, i64 %1090, i64 %1093, i64 %1096), !noalias !3118
  %1100 = load i64, i64* %3, align 8
  %1101 = load i64, i64* %20, align 8
  %1102 = add i64 %1101, 16
  %1103 = inttoptr i64 %1102 to i64*
  %1104 = load i64, i64* %1103
  %1105 = add i64 %1101, -268
  %1106 = trunc i64 %1099 to i32
  %1107 = inttoptr i64 %1105 to i32*
  store i32 %1106, i32* %1107
  %1108 = add i64 %1100, 27
  %1109 = load i64, i64* %19, align 8, !tbaa !1240
  %1110 = add i64 %1109, -8
  %1111 = inttoptr i64 %1110 to i64*
  store i64 %1108, i64* %1111
  %1112 = load i64, i64* %168, align 8, !alias.scope !3123, !noalias !3126
  %1113 = load i64, i64* %167, align 8, !alias.scope !3123, !noalias !3126
  %1114 = load i64, i64* %170, align 8, !alias.scope !3123, !noalias !3126
  %1115 = load i64, i64* %171, align 8, !alias.scope !3123, !noalias !3126
  %1116 = inttoptr i64 %1109 to i64*
  %1117 = load i64, i64* %1116
  %1118 = add i64 %1109, 8
  %1119 = inttoptr i64 %1118 to i64*
  %1120 = load i64, i64* %1119
  %1121 = add i64 %1109, 16
  %1122 = inttoptr i64 %1121 to i64*
  %1123 = load i64, i64* %1122
  %1124 = add i64 %1109, 24
  %1125 = inttoptr i64 %1124 to i64*
  %1126 = load i64, i64* %1125
  %1127 = add i64 %1109, 32
  %1128 = inttoptr i64 %1127 to i64*
  %1129 = load i64, i64* %1128
  %1130 = add i64 %1109, 40
  %1131 = inttoptr i64 %1130 to i64*
  %1132 = load i64, i64* %1131
  %1133 = add i64 %1109, 48
  %1134 = inttoptr i64 %1133 to i64*
  %1135 = load i64, i64* %1134
  %1136 = add i64 %1109, 56
  %1137 = inttoptr i64 %1136 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1109, 64
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1109, 72
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = inttoptr i64 %1110 to i64*
  %1146 = load i64, i64* %1145
  store i64 %1146, i64* %3, align 8, !alias.scope !3123, !noalias !3126
  store i64 %1109, i64* %19, align 8, !alias.scope !3123, !noalias !3126
  %1147 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1952), i64 %1104, i64 %1112, i64 %1113, i64 %1114, i64 %1115, i64 %1117, i64 %1120, i64 %1123, i64 %1126, i64 %1129, i64 %1132, i64 %1135, i64 %1138, i64 %1141, i64 %1144), !noalias !3123
  %1148 = load i64, i64* %20, align 8
  %1149 = add i64 %1148, 24
  %1150 = load i64, i64* %3, align 8
  %1151 = inttoptr i64 %1149 to i32*
  %1152 = load i32, i32* %1151
  %1153 = icmp eq i32 %1152, 0
  %1154 = add i64 %1148, -272
  %1155 = trunc i64 %1147 to i32
  %1156 = inttoptr i64 %1154 to i32*
  store i32 %1155, i32* %1156
  %1157 = select i1 %1153, i64 54, i64 16
  %1158 = add i64 %1150, %1157
  br i1 %1153, label %block_40a4dc, label %block_40a4b6

block_40a4b6:                                     ; preds = %block_40a43f
  %1159 = add i64 %1158, 27
  %1160 = load i64, i64* %19, align 8, !tbaa !1240
  %1161 = add i64 %1160, -8
  %1162 = inttoptr i64 %1161 to i64*
  store i64 %1159, i64* %1162
  %1163 = load i64, i64* %168, align 8, !alias.scope !3128, !noalias !3131
  %1164 = load i64, i64* %167, align 8, !alias.scope !3128, !noalias !3131
  %1165 = load i64, i64* %170, align 8, !alias.scope !3128, !noalias !3131
  %1166 = load i64, i64* %171, align 8, !alias.scope !3128, !noalias !3131
  %1167 = inttoptr i64 %1160 to i64*
  %1168 = load i64, i64* %1167
  %1169 = add i64 %1160, 8
  %1170 = inttoptr i64 %1169 to i64*
  %1171 = load i64, i64* %1170
  %1172 = add i64 %1160, 16
  %1173 = inttoptr i64 %1172 to i64*
  %1174 = load i64, i64* %1173
  %1175 = add i64 %1160, 24
  %1176 = inttoptr i64 %1175 to i64*
  %1177 = load i64, i64* %1176
  %1178 = add i64 %1160, 32
  %1179 = inttoptr i64 %1178 to i64*
  %1180 = load i64, i64* %1179
  %1181 = add i64 %1160, 40
  %1182 = inttoptr i64 %1181 to i64*
  %1183 = load i64, i64* %1182
  %1184 = add i64 %1160, 48
  %1185 = inttoptr i64 %1184 to i64*
  %1186 = load i64, i64* %1185
  %1187 = add i64 %1160, 56
  %1188 = inttoptr i64 %1187 to i64*
  %1189 = load i64, i64* %1188
  %1190 = add i64 %1160, 64
  %1191 = inttoptr i64 %1190 to i64*
  %1192 = load i64, i64* %1191
  %1193 = add i64 %1160, 72
  %1194 = inttoptr i64 %1193 to i64*
  %1195 = load i64, i64* %1194
  %1196 = inttoptr i64 %1161 to i64*
  %1197 = load i64, i64* %1196
  store i64 %1197, i64* %3, align 8, !alias.scope !3128, !noalias !3131
  store i64 %1160, i64* %19, align 8, !alias.scope !3128, !noalias !3131
  %1198 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5559), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5598), i64 %1163, i64 %1164, i64 %1165, i64 %1166, i64 %1168, i64 %1171, i64 %1174, i64 %1177, i64 %1180, i64 %1183, i64 %1186, i64 %1189, i64 %1192, i64 %1195), !noalias !3128
  %1199 = load i64, i64* %20, align 8
  %1200 = add i64 %1199, -276
  %1201 = trunc i64 %1198 to i32
  %1202 = load i64, i64* %3, align 8
  %1203 = inttoptr i64 %1200 to i32*
  store i32 %1201, i32* %1203
  %1204 = add i64 %1202, 44
  br label %block_40a4fd

block_40a33f:                                     ; preds = %block_40a230
  %1205 = icmp eq i32 %271, 0
  %1206 = select i1 %1205, i64 10, i64 224
  %1207 = add i64 %268, %1206
  br i1 %1205, label %block_40a349, label %block_40a41f

block_40a359:                                     ; preds = %block_40a349
  %1208 = add i64 %1353, 1
  %1209 = inttoptr i64 %1208 to i8*
  %1210 = load i8, i8* %1209
  %1211 = sext i8 %1210 to i64
  %1212 = and i64 %1211, 4294967295
  store i64 %1212, i64* %15, align 8, !tbaa !1240
  %1213 = sext i8 %1210 to i32
  %1214 = add nsw i32 %1213, -80
  %1215 = icmp eq i32 %1214, 0
  %1216 = select i1 %1215, i64 17, i64 167
  %1217 = add i64 %1362, %1216
  br i1 %1215, label %block_40a36a, label %block_40a400

block_40a36a:                                     ; preds = %block_40a359
  %1218 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5288) to double*)
  store double %1218, double* %123, align 1, !tbaa !1439
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1220 = bitcast i64* %1219 to double*
  store double 0.000000e+00, double* %1220, align 1, !tbaa !1439
  %1221 = add i64 %258, -112
  %1222 = add i64 %258, -56
  %1223 = inttoptr i64 %1222 to i32*
  %1224 = load i32, i32* %1223
  %1225 = sitofp i32 %1224 to double
  store double %1225, double* %127, align 1, !tbaa !1439
  %1226 = add i64 %258, -240
  %1227 = inttoptr i64 %1226 to i64*
  store i64 %1221, i64* %1227
  %1228 = add i64 %1217, 31
  %1229 = load i64, i64* %19, align 8, !tbaa !1240
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %169, align 8, !alias.scope !3133, !noalias !3136
  %1233 = inttoptr i64 %1230 to i64*
  %1234 = load i64, i64* %1233
  store i64 %1234, i64* %3, align 8, !alias.scope !3133, !noalias !3136
  store i64 %1229, i64* %19, align 8, !alias.scope !3133, !noalias !3136
  %1235 = tail call i64 @pow(i64 %1221, i64 %1232), !noalias !3133
  %1236 = load i64, i64* %3, align 8
  %1237 = load i64, i64* %20, align 8
  %1238 = add i64 %1237, -240
  %1239 = inttoptr i64 %1238 to i64*
  %1240 = load i64, i64* %1239
  %1241 = add i64 %1236, 24
  %1242 = load i64, i64* %19, align 8, !tbaa !1240
  %1243 = add i64 %1242, -8
  %1244 = inttoptr i64 %1243 to i64*
  store i64 %1241, i64* %1244
  %1245 = load i64, i64* %168, align 8, !alias.scope !3138, !noalias !3141
  %1246 = load i64, i64* %167, align 8, !alias.scope !3138, !noalias !3141
  %1247 = load i64, i64* %170, align 8, !alias.scope !3138, !noalias !3141
  %1248 = load i64, i64* %171, align 8, !alias.scope !3138, !noalias !3141
  %1249 = inttoptr i64 %1242 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1242, 8
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1242, 16
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1242, 24
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1242, 32
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1242, 40
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1242, 48
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1242, 56
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1242, 64
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1242, 72
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = inttoptr i64 %1243 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %3, align 8, !alias.scope !3138, !noalias !3141
  store i64 %1242, i64* %19, align 8, !alias.scope !3138, !noalias !3141
  %1280 = tail call i64 @sprintf(i64 %1240, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5361), i64 %1245, i64 %1246, i64 %1247, i64 %1248, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277), !noalias !3138
  %1281 = load i64, i64* %20, align 8
  %1282 = add i64 %1281, -116
  %1283 = load i64, i64* %3, align 8
  %1284 = inttoptr i64 %1282 to i32*
  store i32 14, i32* %1284
  %1285 = inttoptr i64 %1282 to i32*
  %1286 = load i32, i32* %1285
  %1287 = sext i32 %1286 to i64
  %1288 = add nsw i64 %1287, -112
  %1289 = add i64 %1288, %1281
  %1290 = inttoptr i64 %1289 to i8*
  %1291 = load i8, i8* %1290
  %1292 = sext i8 %1291 to i32
  %1293 = add nsw i32 %1292, -46
  %1294 = icmp eq i32 %1293, 0
  %1295 = add i64 %1281, -244
  %1296 = trunc i64 %1280 to i32
  %1297 = inttoptr i64 %1295 to i32*
  store i32 %1296, i32* %1297
  %1298 = select i1 %1294, i64 31, i64 49
  %1299 = add i64 %1283, %1298
  br i1 %1294, label %block_40a3c0, label %block_40a3d2

block_40a400:                                     ; preds = %block_40a349, %block_40a359
  %1300 = phi i64 [ %1357, %block_40a349 ], [ %1212, %block_40a359 ]
  %1301 = phi i64 [ %1362, %block_40a349 ], [ %1217, %block_40a359 ]
  %1302 = add i64 %258, -56
  %1303 = inttoptr i64 %1302 to i32*
  %1304 = load i32, i32* %1303
  %1305 = zext i32 %1304 to i64
  %1306 = add i64 %1301, 20
  %1307 = load i64, i64* %19, align 8, !tbaa !1240
  %1308 = add i64 %1307, -8
  %1309 = inttoptr i64 %1308 to i64*
  store i64 %1306, i64* %1309
  %1310 = load i64, i64* %168, align 8, !alias.scope !3143, !noalias !3146
  %1311 = load i64, i64* %170, align 8, !alias.scope !3143, !noalias !3146
  %1312 = load i64, i64* %171, align 8, !alias.scope !3143, !noalias !3146
  %1313 = inttoptr i64 %1307 to i64*
  %1314 = load i64, i64* %1313
  %1315 = add i64 %1307, 8
  %1316 = inttoptr i64 %1315 to i64*
  %1317 = load i64, i64* %1316
  %1318 = add i64 %1307, 16
  %1319 = inttoptr i64 %1318 to i64*
  %1320 = load i64, i64* %1319
  %1321 = add i64 %1307, 24
  %1322 = inttoptr i64 %1321 to i64*
  %1323 = load i64, i64* %1322
  %1324 = add i64 %1307, 32
  %1325 = inttoptr i64 %1324 to i64*
  %1326 = load i64, i64* %1325
  %1327 = add i64 %1307, 40
  %1328 = inttoptr i64 %1327 to i64*
  %1329 = load i64, i64* %1328
  %1330 = add i64 %1307, 48
  %1331 = inttoptr i64 %1330 to i64*
  %1332 = load i64, i64* %1331
  %1333 = add i64 %1307, 56
  %1334 = inttoptr i64 %1333 to i64*
  %1335 = load i64, i64* %1334
  %1336 = add i64 %1307, 64
  %1337 = inttoptr i64 %1336 to i64*
  %1338 = load i64, i64* %1337
  %1339 = add i64 %1307, 72
  %1340 = inttoptr i64 %1339 to i64*
  %1341 = load i64, i64* %1340
  %1342 = inttoptr i64 %1308 to i64*
  %1343 = load i64, i64* %1342
  store i64 %1343, i64* %3, align 8, !alias.scope !3143, !noalias !3146
  store i64 %1307, i64* %19, align 8, !alias.scope !3143, !noalias !3146
  %1344 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5403), i64 %1305, i64 %1310, i64 %1300, i64 %1311, i64 %1312, i64 %1314, i64 %1317, i64 %1320, i64 %1323, i64 %1326, i64 %1329, i64 %1332, i64 %1335, i64 %1338, i64 %1341), !noalias !3143
  %1345 = load i64, i64* %20, align 8
  %1346 = add i64 %1345, -252
  %1347 = trunc i64 %1344 to i32
  %1348 = load i64, i64* %3, align 8
  %1349 = add i64 %1348, 6
  %1350 = inttoptr i64 %1346 to i32*
  store i32 %1347, i32* %1350
  br label %block_40a41a

block_40a349:                                     ; preds = %block_40a33f
  %1351 = add i64 %258, -48
  %1352 = inttoptr i64 %1351 to i64*
  %1353 = load i64, i64* %1352
  %1354 = inttoptr i64 %1353 to i8*
  %1355 = load i8, i8* %1354
  %1356 = sext i8 %1355 to i64
  %1357 = and i64 %1356, 4294967295
  store i64 %1357, i64* %15, align 8, !tbaa !1240
  %1358 = sext i8 %1355 to i32
  %1359 = add nsw i32 %1358, -69
  %1360 = icmp eq i32 %1359, 0
  %1361 = select i1 %1360, i64 16, i64 183
  %1362 = add i64 %1207, %1361
  br i1 %1360, label %block_40a359, label %block_40a400

block_40a3c0:                                     ; preds = %block_40a36a
  %1363 = inttoptr i64 %1282 to i32*
  %1364 = load i32, i32* %1363
  %1365 = sext i32 %1364 to i64
  %1366 = add nsw i64 %1365, -112
  %1367 = add i64 %1366, %1281
  %1368 = inttoptr i64 %1367 to i8*
  store i8 32, i8* %1368
  %1369 = inttoptr i64 %1282 to i32*
  %1370 = load i32, i32* %1369
  %1371 = add i32 %1370, -1
  %1372 = add i64 %1299, 18
  %1373 = inttoptr i64 %1282 to i32*
  store i32 %1371, i32* %1373
  br label %block_40a3d2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fd0_ShowFactorization(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_400fd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %8, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  store i64 %12, i64* %9, align 8, !tbaa !1240
  %14 = add i64 %11, -40
  store i64 %14, i64* %8, align 8, !tbaa !1240
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = add i64 %11, -16
  %22 = load i64, i64* %7, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = add i64 %11, -20
  %25 = inttoptr i64 %24 to i32*
  store i32 0, i32* %25
  %26 = add i64 %1, 26
  %27 = inttoptr i64 %24 to i32*
  store i32 0, i32* %27
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_400fea

block_4010aa:                                     ; preds = %block_401063
  %31 = load i64, i64* @stdout
  %32 = inttoptr i64 %360 to i64*
  %33 = load i64, i64* %32
  %34 = add i64 %368, %33
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %5, align 8, !tbaa !1240
  %37 = add i64 %375, 56
  %38 = load i64, i64* %8, align 8, !tbaa !1240
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %37, i64* %40
  %41 = load i64, i64* %29, align 8, !alias.scope !3148, !noalias !3151
  %42 = load i64, i64* %30, align 8, !alias.scope !3148, !noalias !3151
  %43 = inttoptr i64 %38 to i64*
  %44 = load i64, i64* %43
  %45 = add i64 %38, 8
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46
  %48 = add i64 %38, 16
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %38, 24
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %38, 32
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  %57 = add i64 %38, 40
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  %60 = add i64 %38, 48
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  %63 = add i64 %38, 56
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %38, 64
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  %69 = add i64 %38, 72
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  %72 = inttoptr i64 %39 to i64*
  %73 = load i64, i64* %72
  store i64 %73, i64* %3, align 8, !alias.scope !3148, !noalias !3151
  store i64 %38, i64* %8, align 8, !alias.scope !3148, !noalias !3151
  %74 = tail call i64 @fprintf(i64 %31, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 817), i64 %36, i64 %371, i64 %41, i64 %42, i64 %44, i64 %47, i64 %50, i64 %53, i64 %56, i64 %59, i64 %62, i64 %65, i64 %68, i64 %71), !noalias !3148
  %75 = load i64, i64* %9, align 8
  %76 = add i64 %75, -28
  %77 = trunc i64 %74 to i32
  %78 = load i64, i64* %3, align 8
  %79 = add i64 %78, 3
  %80 = inttoptr i64 %76 to i32*
  store i32 %77, i32* %80
  br label %block_4010e5

block_400ffc:                                     ; preds = %block_400fea
  %81 = inttoptr i64 %109 to i64*
  %82 = load i64, i64* %81
  store i64 %106, i64* %4, align 8, !tbaa !1240
  %83 = shl nsw i64 %106, 3
  %84 = add i64 %83, %82
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = icmp eq i64 %86, 1
  %88 = select i1 %87, i64 22, i64 65
  %89 = add i64 %125, %88
  %90 = icmp eq i32 %105, 0
  %91 = lshr i32 %105, 31
  %92 = trunc i32 %91 to i8
  %93 = add i64 %89, 38
  %94 = add i64 %89, 10
  br i1 %87, label %block_401012, label %block_40103d

block_401012:                                     ; preds = %block_400ffc
  %95 = select i1 %90, i64 %94, i64 %93
  br i1 %90, label %block_40101c, label %block_401038

block_401038:                                     ; preds = %block_40101c, %block_401012
  %96 = phi i64 [ %106, %block_401012 ], [ %172, %block_40101c ]
  %97 = phi i64 [ %93, %block_401012 ], [ %170, %block_40101c ]
  %98 = phi %struct.Memory* [ %102, %block_401012 ], [ %102, %block_40101c ]
  %99 = add i64 %97, 192
  br label %block_4010f8

block_400fea:                                     ; preds = %block_4010e5, %block_400fd0
  %100 = phi i64 [ %26, %block_400fd0 ], [ %277, %block_4010e5 ]
  %101 = phi i64 [ %12, %block_400fd0 ], [ %269, %block_4010e5 ]
  %102 = phi %struct.Memory* [ %2, %block_400fd0 ], [ %271, %block_4010e5 ]
  %103 = add i64 %101, -12
  %104 = inttoptr i64 %103 to i32*
  %105 = load i32, i32* %104
  %106 = sext i32 %105 to i64
  %107 = add i64 %101, -8
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %4, align 8, !tbaa !1240
  %110 = add i64 %109, 16
  %111 = inttoptr i64 %110 to i64*
  %112 = load i64, i64* %111
  %113 = sub i64 %106, %112
  %114 = lshr i64 %113, 63
  %115 = trunc i64 %114 to i8
  %116 = lshr i64 %106, 63
  %117 = lshr i64 %112, 63
  %118 = xor i64 %117, %116
  %119 = xor i64 %114, %116
  %120 = add nuw nsw i64 %119, %118
  %121 = icmp eq i64 %120, 2
  %122 = icmp ne i8 %115, 0
  %123 = xor i1 %122, %121
  %124 = select i1 %123, i64 18, i64 270
  %125 = add i64 %100, %124
  br i1 %123, label %block_400ffc, label %block_4010f8.loopexit

block_40101c:                                     ; preds = %block_401012
  %126 = load i64, i64* @stdout
  %127 = add i64 %95, 25
  %128 = load i64, i64* %8, align 8, !tbaa !1240
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %5, align 8, !alias.scope !3153, !noalias !3156
  %132 = load i64, i64* %29, align 8, !alias.scope !3153, !noalias !3156
  %133 = load i64, i64* %30, align 8, !alias.scope !3153, !noalias !3156
  %134 = inttoptr i64 %128 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %128, 8
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %128, 16
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  %142 = add i64 %128, 24
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  %145 = add i64 %128, 32
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  %148 = add i64 %128, 40
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %128, 48
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152
  %154 = add i64 %128, 56
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  %157 = add i64 %128, 64
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158
  %160 = add i64 %128, 72
  %161 = inttoptr i64 %160 to i64*
  %162 = load i64, i64* %161
  %163 = inttoptr i64 %129 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %3, align 8, !alias.scope !3153, !noalias !3156
  store i64 %128, i64* %8, align 8, !alias.scope !3153, !noalias !3156
  %165 = tail call i64 @fprintf(i64 %126, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 808), i64 %131, i64 %106, i64 %132, i64 %133, i64 %135, i64 %138, i64 %141, i64 %144, i64 %147, i64 %150, i64 %153, i64 %156, i64 %159, i64 %162), !noalias !3153
  %166 = load i64, i64* %9, align 8
  %167 = add i64 %166, -16
  %168 = trunc i64 %165 to i32
  %169 = load i64, i64* %3, align 8
  %170 = add i64 %169, 3
  %171 = inttoptr i64 %167 to i32*
  store i32 %168, i32* %171
  %172 = load i64, i64* %4, align 8, !alias.scope !3158, !noalias !3161
  br label %block_401038

block_40107a:                                     ; preds = %block_401063
  %173 = load i64, i64* @stdout
  %174 = inttoptr i64 %360 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %368, %175
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %5, align 8, !tbaa !1240
  %179 = add i64 %375, 40
  %180 = load i64, i64* %8, align 8, !tbaa !1240
  %181 = add i64 %180, -8
  %182 = inttoptr i64 %181 to i64*
  store i64 %179, i64* %182
  %183 = load i64, i64* %29, align 8, !alias.scope !3163, !noalias !3166
  %184 = load i64, i64* %30, align 8, !alias.scope !3163, !noalias !3166
  %185 = inttoptr i64 %180 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %180, 8
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %180, 16
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %180, 24
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %180, 32
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %180, 40
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %180, 48
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %180, 56
  %206 = inttoptr i64 %205 to i64*
  %207 = load i64, i64* %206
  %208 = add i64 %180, 64
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209
  %211 = add i64 %180, 72
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  %214 = inttoptr i64 %181 to i64*
  %215 = load i64, i64* %214
  store i64 %215, i64* %3, align 8, !alias.scope !3163, !noalias !3166
  store i64 %180, i64* %8, align 8, !alias.scope !3163, !noalias !3166
  %216 = tail call i64 @fprintf(i64 %173, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 821), i64 %178, i64 %367, i64 %183, i64 %184, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204, i64 %207, i64 %210, i64 %213), !noalias !3163
  %217 = load i64, i64* %9, align 8
  %218 = add i64 %217, -24
  %219 = trunc i64 %216 to i32
  %220 = load i64, i64* %3, align 8
  %221 = inttoptr i64 %218 to i32*
  store i32 %219, i32* %221
  %222 = add i64 %220, 67
  br label %block_4010e5

block_401047:                                     ; preds = %block_40103d
  %223 = load i64, i64* @stdout
  %224 = add i64 %354, 25
  %225 = load i64, i64* %8, align 8, !tbaa !1240
  %226 = add i64 %225, -8
  %227 = inttoptr i64 %226 to i64*
  store i64 %224, i64* %227
  %228 = load i64, i64* %5, align 8, !alias.scope !3168, !noalias !3171
  %229 = load i64, i64* %29, align 8, !alias.scope !3168, !noalias !3171
  %230 = load i64, i64* %30, align 8, !alias.scope !3168, !noalias !3171
  %231 = inttoptr i64 %225 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %225, 8
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %225, 16
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %225, 24
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %225, 32
  %243 = inttoptr i64 %242 to i64*
  %244 = load i64, i64* %243
  %245 = add i64 %225, 40
  %246 = inttoptr i64 %245 to i64*
  %247 = load i64, i64* %246
  %248 = add i64 %225, 48
  %249 = inttoptr i64 %248 to i64*
  %250 = load i64, i64* %249
  %251 = add i64 %225, 56
  %252 = inttoptr i64 %251 to i64*
  %253 = load i64, i64* %252
  %254 = add i64 %225, 64
  %255 = inttoptr i64 %254 to i64*
  %256 = load i64, i64* %255
  %257 = add i64 %225, 72
  %258 = inttoptr i64 %257 to i64*
  %259 = load i64, i64* %258
  %260 = inttoptr i64 %226 to i64*
  %261 = load i64, i64* %260
  store i64 %261, i64* %3, align 8, !alias.scope !3168, !noalias !3171
  store i64 %225, i64* %8, align 8, !alias.scope !3168, !noalias !3171
  %262 = tail call i64 @fprintf(i64 %223, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 815), i64 %228, i64 %106, i64 %229, i64 %230, i64 %232, i64 %235, i64 %238, i64 %241, i64 %244, i64 %247, i64 %250, i64 %253, i64 %256, i64 %259), !noalias !3168
  %263 = load i64, i64* %9, align 8
  %264 = add i64 %263, -20
  %265 = trunc i64 %262 to i32
  %266 = load i64, i64* %3, align 8
  %267 = add i64 %266, 3
  %268 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %268
  br label %block_401063

block_4010e5:                                     ; preds = %block_40107a, %block_4010aa
  %269 = phi i64 [ %75, %block_4010aa ], [ %217, %block_40107a ]
  %270 = phi i64 [ %79, %block_4010aa ], [ %222, %block_40107a ]
  %271 = phi %struct.Memory* [ %357, %block_4010aa ], [ %357, %block_40107a ]
  %272 = add i64 %269, -12
  %273 = inttoptr i64 %272 to i32*
  %274 = load i32, i32* %273
  %275 = add i32 %274, 1
  %276 = inttoptr i64 %272 to i32*
  store i32 %275, i32* %276
  %277 = add i64 %270, -251
  br label %block_400fea

block_4010f8.loopexit:                            ; preds = %block_400fea
  br label %block_4010f8

block_4010f8:                                     ; preds = %block_4010f8.loopexit, %block_401038
  %278 = phi i64 [ %96, %block_401038 ], [ %109, %block_4010f8.loopexit ]
  %279 = phi i64 [ %99, %block_401038 ], [ %125, %block_4010f8.loopexit ]
  %280 = phi %struct.Memory* [ %98, %block_401038 ], [ %102, %block_4010f8.loopexit ]
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5867), i64* %6, align 8, !tbaa !1240
  %281 = load i64, i64* @stdout
  store i64 %281, i64* %7, align 8, !tbaa !1240
  %282 = add i64 %279, 25
  %283 = load i64, i64* %8, align 8, !tbaa !1240
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285
  %286 = load i64, i64* %5, align 8, !alias.scope !3158, !noalias !3161
  %287 = load i64, i64* %29, align 8, !alias.scope !3158, !noalias !3161
  %288 = load i64, i64* %30, align 8, !alias.scope !3158, !noalias !3161
  %289 = inttoptr i64 %283 to i64*
  %290 = load i64, i64* %289
  %291 = add i64 %283, 8
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  %294 = add i64 %283, 16
  %295 = inttoptr i64 %294 to i64*
  %296 = load i64, i64* %295
  %297 = add i64 %283, 24
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  %300 = add i64 %283, 32
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %283, 40
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304
  %306 = add i64 %283, 48
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %283, 56
  %310 = inttoptr i64 %309 to i64*
  %311 = load i64, i64* %310
  %312 = add i64 %283, 64
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = add i64 %283, 72
  %316 = inttoptr i64 %315 to i64*
  %317 = load i64, i64* %316
  store i64 %283, i64* %8, align 8, !alias.scope !3158, !noalias !3161
  %318 = tail call i64 @fprintf(i64 %281, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5867), i64 %286, i64 %278, i64 %287, i64 %288, i64 %290, i64 %293, i64 %296, i64 %299, i64 %302, i64 %305, i64 %308, i64 %311, i64 %314, i64 %317), !noalias !3158
  store i64 %318, i64* %28, align 8, !alias.scope !3158, !noalias !3161
  %319 = load i64, i64* %9, align 8
  %320 = add i64 %319, -32
  %321 = trunc i64 %318 to i32
  %322 = inttoptr i64 %320 to i32*
  store i32 %321, i32* %322
  %323 = load i64, i64* %8, align 8
  %324 = add i64 %323, 32
  %325 = icmp ugt i64 %323, -33
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %15, align 1, !tbaa !1264
  %327 = trunc i64 %324 to i32
  %328 = and i32 %327, 255
  %329 = tail call i32 @llvm.ctpop.i32(i32 %328) #10
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = xor i8 %331, 1
  store i8 %332, i8* %16, align 1, !tbaa !1278
  %333 = xor i64 %324, %323
  %334 = lshr i64 %333, 4
  %335 = trunc i64 %334 to i8
  %336 = and i8 %335, 1
  store i8 %336, i8* %17, align 1, !tbaa !1279
  %337 = icmp eq i64 %324, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %18, align 1, !tbaa !1280
  %339 = lshr i64 %324, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %19, align 1, !tbaa !1281
  %341 = lshr i64 %323, 63
  %342 = xor i64 %339, %341
  %343 = add nuw nsw i64 %342, %339
  %344 = icmp eq i64 %343, 2
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %20, align 1, !tbaa !1282
  %346 = add i64 %323, 40
  %347 = inttoptr i64 %324 to i64*
  %348 = load i64, i64* %347
  store i64 %348, i64* %9, align 8, !tbaa !1240
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %3, align 8, !tbaa !1240
  %351 = add i64 %323, 48
  store i64 %351, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %280

block_40103d:                                     ; preds = %block_400ffc
  %352 = icmp ne i8 %92, 0
  %353 = or i1 %90, %352
  %354 = select i1 %353, i64 %93, i64 %94
  br i1 %353, label %block_401063, label %block_401047

block_401063:                                     ; preds = %block_40103d, %block_401047
  %355 = phi i64 [ %93, %block_40103d ], [ %267, %block_401047 ]
  %356 = phi i64 [ %101, %block_40103d ], [ %263, %block_401047 ]
  %357 = phi %struct.Memory* [ %102, %block_40103d ], [ %102, %block_401047 ]
  %358 = add i64 %356, -8
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %360, 8
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %356, -12
  %365 = inttoptr i64 %364 to i32*
  %366 = load i32, i32* %365
  %367 = sext i32 %366 to i64
  %368 = shl nsw i64 %367, 3
  %369 = add i64 %368, %363
  %370 = inttoptr i64 %369 to i64*
  %371 = load i64, i64* %370
  %372 = add i64 %371, -1
  %373 = icmp eq i64 %372, 0
  %374 = select i1 %373, i64 23, i64 71
  %375 = add i64 %355, %374
  br i1 %373, label %block_40107a, label %block_4010aa
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c40_CompareViewsBySize(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_401c40:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %8, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = add i64 %11, -16
  %15 = load i64, i64* %7, align 8
  %16 = inttoptr i64 %14 to i64*
  store i64 %15, i64* %16
  %17 = add i64 %11, -24
  %18 = load i64, i64* %6, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %19
  %20 = inttoptr i64 %14 to i64*
  %21 = load i64, i64* %20
  %22 = add i64 %11, -32
  %23 = inttoptr i64 %22 to i64*
  store i64 %21, i64* %23
  %24 = add i64 %11, -24
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25
  %27 = add i64 %11, -40
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28
  %29 = add i64 %11, -44
  %30 = inttoptr i64 %29 to i32*
  store i32 0, i32* %30
  %31 = inttoptr i64 %22 to i64*
  %32 = load i64, i64* %31
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %6, align 8, !tbaa !1240
  %35 = inttoptr i64 %27 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %7, align 8, !tbaa !1240
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37
  %39 = sub i64 %34, %38
  %40 = icmp ult i64 %34, %38
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !1264
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !1278
  %50 = xor i64 %38, %34
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !1279
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !1280
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !1281
  %62 = lshr i64 %34, 63
  %63 = lshr i64 %38, 63
  %64 = xor i64 %63, %62
  %65 = xor i64 %59, %62
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !1282
  %70 = icmp ne i8 %60, 0
  %71 = xor i1 %70, %67
  %72 = or i1 %56, %71
  br i1 %72, label %block_401c83, label %block_401c77

block_401c77:                                     ; preds = %block_401c40
  %73 = inttoptr i64 %29 to i32*
  store i32 1, i32* %73
  br label %block_401cf1

block_401cf1:                                     ; preds = %block_401ce7, %block_401c97, %block_401c77
  %74 = phi %struct.Memory* [ %2, %block_401c77 ], [ %120, %block_401ce7 ], [ %2, %block_401c97 ]
  %75 = inttoptr i64 %29 to i32*
  %76 = load i32, i32* %75
  %77 = zext i32 %76 to i64
  store i64 %77, i64* %4, align 8, !tbaa !1240
  %78 = inttoptr i64 %12 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %9, align 8, !tbaa !1240
  %80 = inttoptr i64 %11 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %3, align 8, !tbaa !1240
  %82 = add i64 %11, 8
  store i64 %82, i64* %8, align 8, !tbaa !1240
  ret %struct.Memory* %74

block_401c97:                                     ; preds = %block_401c83
  %83 = inttoptr i64 %29 to i32*
  store i32 -1, i32* %83
  br label %block_401cf1

block_401ca3:                                     ; preds = %block_401c83
  %84 = add i64 %32, 8
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  store i64 %36, i64* %5, align 8, !tbaa !1240
  %87 = add i64 %36, 8
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88
  %90 = sub i64 %86, %89
  %91 = icmp ult i64 %86, %89
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %42, align 1, !tbaa !1264
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #10
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %49, align 1, !tbaa !1278
  %99 = xor i64 %89, %86
  %100 = xor i64 %99, %90
  %101 = lshr i64 %100, 4
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  store i8 %103, i8* %55, align 1, !tbaa !1279
  %104 = icmp eq i64 %90, 0
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %58, align 1, !tbaa !1280
  %106 = lshr i64 %90, 63
  %107 = trunc i64 %106 to i8
  store i8 %107, i8* %61, align 1, !tbaa !1281
  %108 = lshr i64 %86, 63
  %109 = lshr i64 %89, 63
  %110 = xor i64 %109, %108
  %111 = xor i64 %106, %108
  %112 = add nuw nsw i64 %111, %110
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %69, align 1, !tbaa !1282
  %115 = icmp ne i8 %107, 0
  %116 = xor i1 %115, %113
  %117 = or i1 %104, %116
  br i1 %117, label %block_401cc5, label %block_401ce7.sink.split

block_401ce7.sink.split:                          ; preds = %block_401cc5, %block_401ca3
  %118 = phi i32 [ 1, %block_401ca3 ], [ -1, %block_401cc5 ]
  %119 = inttoptr i64 %29 to i32*
  store i32 %118, i32* %119
  br label %block_401ce7

block_401ce7:                                     ; preds = %block_401cc5, %block_401ce7.sink.split
  %120 = phi %struct.Memory* [ %2, %block_401cc5 ], [ %2, %block_401ce7.sink.split ]
  br label %block_401cf1

block_401cc5:                                     ; preds = %block_401ca3
  store i64 %36, i64* %5, align 8, !tbaa !1240
  store i8 %92, i8* %42, align 1, !tbaa !1264
  store i8 %98, i8* %49, align 1, !tbaa !1278
  store i8 %103, i8* %55, align 1, !tbaa !1279
  store i8 %105, i8* %58, align 1, !tbaa !1280
  store i8 %107, i8* %61, align 1, !tbaa !1281
  store i8 %114, i8* %69, align 1, !tbaa !1282
  br i1 %116, label %block_401ce7.sink.split, label %block_401ce7

block_401c83:                                     ; preds = %block_401c40
  store i64 %36, i64* %5, align 8, !tbaa !1240
  store i8 %41, i8* %42, align 1, !tbaa !1264
  store i8 %48, i8* %49, align 1, !tbaa !1278
  store i8 %54, i8* %55, align 1, !tbaa !1279
  store i8 %57, i8* %58, align 1, !tbaa !1280
  store i8 %60, i8* %61, align 1, !tbaa !1281
  store i8 %68, i8* %69, align 1, !tbaa !1282
  br i1 %71, label %block_401c97, label %block_401ca3
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b81(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402b81:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %15 = load i64, i64* %13, align 8
  %16 = add i64 %15, -56
  %17 = inttoptr i64 %16 to i64*
  store i64 ptrtoint (%adcexpA_type* @adcexpA to i64), i64* %17
  %18 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = icmp eq i32 %18, 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %26 = select i1 %22, i64 47, i64 387
  %27 = add i64 %26, %1
  br i1 %22, label %block_402bb0, label %block_402b81.block_402d04_crit_edge

block_402b81.block_402d04_crit_edge:              ; preds = %block_402b81
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402d04

block_402cff:                                     ; preds = %block_402c77
  %29 = add i64 %131, 5
  br label %block_402d04

block_402df9:                                     ; preds = %block_402d23
  %30 = add i64 %403, 7
  %31 = inttoptr i64 %385 to i32*
  store i32 0, i32* %31
  br label %block_402e00

block_402bf8:                                     ; preds = %block_402bdb
  %32 = add i64 %153, ptrtoint (%adcgen_type* @adcgen to i64)
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %140, -60
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36
  %38 = sext i32 %37 to i64
  %39 = sext i32 %37 to i128
  %40 = and i128 %39, -18446744073709551616
  %41 = sext i64 %34 to i128
  %42 = and i128 %41, -18446744073709551616
  %43 = zext i64 %38 to i128
  %44 = or i128 %40, %43
  %45 = zext i64 %34 to i128
  %46 = or i128 %42, %45
  %47 = mul nsw i128 %46, %44
  %48 = trunc i128 %47 to i64
  %49 = sext i64 %48 to i128
  %50 = icmp ne i128 %49, %47
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %19, align 1, !tbaa !1264
  %52 = trunc i128 %47 to i32
  %53 = and i32 %52, 255
  %54 = tail call i32 @llvm.ctpop.i32(i32 %53) #10
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  store i8 %57, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %58 = lshr i64 %48, 63
  %59 = trunc i64 %58 to i8
  store i8 %59, i8* %24, align 1, !tbaa !1281
  store i8 %51, i8* %25, align 1, !tbaa !1282
  %60 = trunc i128 %47 to i32
  %61 = inttoptr i64 %35 to i32*
  store i32 %60, i32* %61
  %62 = inttoptr i64 %35 to i32*
  %63 = load i32, i32* %62
  %64 = sext i32 %63 to i64
  store i64 %64, i64* %7, align 8, !tbaa !1240
  %65 = inttoptr i64 %149 to i32*
  %66 = load i32, i32* %65
  %67 = sext i32 %66 to i64
  store i64 %67, i64* %8, align 8, !tbaa !1240
  %68 = ashr i64 %64, 63
  store i64 %68, i64* %711, align 8, !tbaa !1240
  %69 = shl nsw i64 %67, 3
  %70 = add i64 %69, ptrtoint (%adcprime_type* @adcprime to i64)
  %71 = add i64 %170, 43
  store i64 %71, i64* %3, align 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72
  %74 = sext i64 %73 to i128
  %75 = and i128 %74, -18446744073709551616
  %76 = zext i64 %68 to i128
  %77 = shl nuw i128 %76, 64
  %78 = zext i64 %64 to i128
  %79 = or i128 %77, %78
  %80 = zext i64 %73 to i128
  %81 = or i128 %75, %80
  %82 = sdiv i128 %79, %81
  %83 = trunc i128 %82 to i64
  %84 = and i128 %82, 18446744073709551615
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = or i128 %86, %84
  %88 = icmp eq i128 %82, %87
  br i1 %88, label %94, label %89

; <label>:89:                                     ; preds = %block_402bf8
  %90 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %71, %struct.Memory* %141) #14
  %91 = load i32, i32* %6, align 4
  %92 = load i64, i64* %3, align 8
  %93 = load i64, i64* %13, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:94:                                     ; preds = %block_402bf8
  %95 = srem i128 %79, %81
  %96 = trunc i128 %95 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %94, %89
  %97 = phi i64 [ %93, %89 ], [ %140, %94 ]
  %98 = phi i64 [ %92, %89 ], [ %71, %94 ]
  %99 = phi i32 [ %91, %89 ], [ %96, %94 ]
  %100 = phi %struct.Memory* [ %90, %89 ], [ %141, %94 ]
  %101 = zext i32 %99 to i64
  store i64 %101, i64* %10, align 8, !tbaa !1240
  %102 = add i64 %97, -60
  %103 = inttoptr i64 %102 to i32*
  store i32 %99, i32* %103
  %104 = add i64 %97, -44
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = add i32 %106, 1
  %108 = inttoptr i64 %104 to i32*
  store i32 %107, i32* %108
  %109 = add i64 %98, -72
  br label %block_402bdb

block_402c77:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11, %block_402c54
  %110 = phi i64 [ %380, %block_402c54 ], [ %707, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11 ]
  %111 = phi i64 [ %374, %block_402c54 ], [ %697, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11 ]
  %112 = phi %struct.Memory* [ %555, %block_402c54 ], [ %638, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11 ]
  %113 = add i64 %111, -40
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114
  %116 = add i64 %111, -8
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117
  %119 = sub i32 %115, %118
  %120 = lshr i32 %119, 31
  %121 = trunc i32 %120 to i8
  %122 = lshr i32 %115, 31
  %123 = lshr i32 %118, 31
  %124 = xor i32 %123, %122
  %125 = xor i32 %120, %122
  %126 = add nuw nsw i32 %125, %124
  %127 = icmp eq i32 %126, 2
  %128 = icmp ne i8 %121, 0
  %129 = xor i1 %128, %127
  %130 = select i1 %129, i64 12, i64 136
  %131 = add i64 %110, %130
  br i1 %129, label %block_402c83, label %block_402cff

block_402de6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1, %block_402dd5
  %132 = phi i64 [ %329, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %173, %block_402dd5 ]
  %133 = phi %struct.Memory* [ %268, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %268, %block_402dd5 ]
  %134 = inttoptr i64 %297 to i32*
  %135 = load i32, i32* %134
  %136 = add i32 %135, 1
  %137 = inttoptr i64 %297 to i32*
  store i32 %136, i32* %137
  %138 = add i64 %132, -195
  br label %block_402d23

block_402bdb:                                     ; preds = %block_402bc3, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %139 = phi i64 [ %184, %block_402bc3 ], [ %109, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %140 = phi i64 [ %554, %block_402bc3 ], [ %97, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %141 = phi %struct.Memory* [ %555, %block_402bc3 ], [ %100, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ]
  %142 = add i64 %140, -44
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143
  %145 = sext i32 %144 to i64
  %146 = add i64 %140, -56
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  %149 = add i64 %140, -40
  %150 = inttoptr i64 %149 to i32*
  %151 = load i32, i32* %150
  %152 = sext i32 %151 to i64
  store i64 %152, i64* %9, align 8, !tbaa !1240
  %153 = shl nsw i64 %152, 3
  %154 = add i64 %153, %148
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  %157 = add i64 %156, -1
  %158 = lshr i64 %157, 63
  %159 = sub i64 %145, %157
  %160 = lshr i64 %159, 63
  %161 = trunc i64 %160 to i8
  %162 = lshr i64 %145, 63
  %163 = xor i64 %158, %162
  %164 = xor i64 %160, %162
  %165 = add nuw nsw i64 %164, %163
  %166 = icmp eq i64 %165, 2
  %167 = icmp ne i8 %161, 0
  %168 = xor i1 %167, %166
  %169 = select i1 %168, i64 29, i64 91
  %170 = add i64 %139, %169
  br i1 %168, label %block_402bf8, label %block_402c36

block_402dd5:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1
  %171 = trunc i64 %310 to i32
  %172 = and i64 %310, 4294967295
  store i64 %172, i64* %8, align 8, !tbaa !1240
  %173 = add i64 %329, 17
  %174 = inttoptr i64 %311 to i32*
  store i32 %171, i32* %174
  br label %block_402de6

block_402bc3:                                     ; preds = %block_402bb7
  %175 = sext i32 %558 to i64
  %176 = shl nsw i64 %175, 3
  %177 = add i64 %176, ptrtoint (%adcgen_type* @adcgen to i64)
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  %180 = trunc i64 %179 to i32
  %181 = add i64 %554, -60
  %182 = inttoptr i64 %181 to i32*
  store i32 %180, i32* %182
  %183 = add i64 %554, -44
  %184 = add i64 %574, 24
  %185 = inttoptr i64 %183 to i32*
  store i32 0, i32* %185
  br label %block_402bdb

block_402d2f:                                     ; preds = %block_402d23
  %186 = sext i32 %387 to i64
  %187 = shl nsw i64 %186, 3
  %188 = add i64 %187, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = add i64 %187, ptrtoint (%adcgen_type* @adcgen to i64)
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = sext i64 %190 to i128
  %195 = and i128 %194, -18446744073709551616
  %196 = sext i64 %193 to i128
  %197 = and i128 %196, -18446744073709551616
  %198 = zext i64 %190 to i128
  %199 = or i128 %195, %198
  %200 = zext i64 %193 to i128
  %201 = or i128 %197, %200
  %202 = mul nsw i128 %201, %199
  %203 = trunc i128 %202 to i64
  %204 = sext i64 %203 to i128
  %205 = icmp ne i128 %204, %202
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %19, align 1, !tbaa !1264
  %207 = trunc i128 %202 to i32
  %208 = and i32 %207, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #10
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %213 = lshr i64 %203, 63
  %214 = trunc i64 %213 to i8
  store i8 %214, i8* %24, align 1, !tbaa !1281
  store i8 %206, i8* %25, align 1, !tbaa !1282
  %215 = add i64 %383, -24
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  %218 = add i64 %187, %217
  %219 = inttoptr i64 %218 to i64*
  store i64 %203, i64* %219
  %220 = inttoptr i64 %385 to i32*
  %221 = load i32, i32* %220
  %222 = sext i32 %221 to i64
  %223 = shl nsw i64 %222, 3
  %224 = add i64 %223, ptrtoint (%adcprime_type* @adcprime to i64)
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = inttoptr i64 %215 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %223, %228
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %383, -104
  %233 = inttoptr i64 %232 to i64*
  store i64 %226, i64* %233
  store i64 %231, i64* %7, align 8, !tbaa !1240
  %234 = add i64 %383, -112
  %235 = inttoptr i64 %234 to i64*
  store i64 %222, i64* %235
  %236 = ashr i64 %231, 63
  store i64 %236, i64* %575, align 8, !tbaa !1240
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %8, align 8, !tbaa !1240
  %239 = shl i64 %238, 3
  %240 = add i64 %239, ptrtoint (%adcprime_type* @adcprime to i64)
  %241 = add i64 %403, 90
  store i64 %241, i64* %3, align 8
  %242 = inttoptr i64 %240 to i64*
  %243 = load i64, i64* %242
  %244 = sext i64 %243 to i128
  %245 = and i128 %244, -18446744073709551616
  %246 = zext i64 %236 to i128
  %247 = shl nuw i128 %246, 64
  %248 = zext i64 %231 to i128
  %249 = or i128 %247, %248
  %250 = zext i64 %243 to i128
  %251 = or i128 %245, %250
  %252 = sdiv i128 %249, %251
  %253 = trunc i128 %252 to i64
  %254 = and i128 %252, 18446744073709551615
  %255 = sext i64 %253 to i128
  %256 = and i128 %255, -18446744073709551616
  %257 = or i128 %256, %254
  %258 = icmp eq i128 %252, %257
  br i1 %258, label %263, label %259

; <label>:259:                                    ; preds = %block_402d2f
  %260 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %241, %struct.Memory* %384) #14
  %261 = load i64, i64* %3, align 8
  %262 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:263:                                    ; preds = %block_402d2f
  %264 = srem i128 %249, %251
  %265 = trunc i128 %264 to i64
  store i64 %265, i64* %575, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %263, %259
  %266 = phi i64 [ %262, %259 ], [ %253, %263 ]
  %267 = phi i64 [ %261, %259 ], [ %241, %263 ]
  %268 = phi %struct.Memory* [ %260, %259 ], [ %384, %263 ]
  %269 = load i64, i64* %13, align 8
  %270 = add i64 %269, -104
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  %273 = mul i64 %266, %272
  %274 = add i64 %269, -24
  %275 = inttoptr i64 %274 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %269, -40
  %278 = inttoptr i64 %277 to i32*
  %279 = load i32, i32* %278
  %280 = sext i32 %279 to i64
  store i64 %280, i64* %11, align 8, !tbaa !1240
  %281 = shl nsw i64 %280, 3
  %282 = add i64 %281, %276
  %283 = inttoptr i64 %282 to i64*
  %284 = load i64, i64* %283
  %285 = sub i64 %284, %273
  store i64 %285, i64* %14, align 8, !tbaa !1240
  %286 = inttoptr i64 %282 to i64*
  store i64 %285, i64* %286
  %287 = inttoptr i64 %274 to i64*
  %288 = load i64, i64* %287
  %289 = inttoptr i64 %277 to i32*
  %290 = load i32, i32* %289
  %291 = sext i32 %290 to i64
  %292 = shl nsw i64 %291, 3
  %293 = add i64 %292, %288
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = load i64, i64* %13, align 8
  %297 = add i64 %296, -40
  %298 = inttoptr i64 %297 to i32*
  %299 = load i32, i32* %298
  %300 = sext i32 %299 to i64
  %301 = shl nsw i64 %300, 3
  %302 = add i64 %301, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %303 = inttoptr i64 %302 to i64*
  store i64 %295, i64* %303
  %304 = inttoptr i64 %297 to i32*
  %305 = load i32, i32* %304
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 3
  %308 = add i64 %307, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %309 = inttoptr i64 %308 to i64*
  %310 = load i64, i64* %309
  %311 = add i64 %296, -48
  %312 = inttoptr i64 %311 to i32*
  %313 = load i32, i32* %312
  %314 = sext i32 %313 to i64
  store i64 %314, i64* %10, align 8, !tbaa !1240
  %315 = sub i64 %310, %314
  %316 = icmp eq i64 %315, 0
  %317 = lshr i64 %315, 63
  %318 = trunc i64 %317 to i8
  %319 = lshr i64 %310, 63
  %320 = lshr i64 %314, 63
  %321 = xor i64 %319, %320
  %322 = xor i64 %317, %319
  %323 = add nuw nsw i64 %322, %321
  %324 = icmp eq i64 %323, 2
  %325 = icmp ne i8 %318, 0
  %326 = xor i1 %325, %324
  %327 = or i1 %316, %326
  %328 = select i1 %327, i64 93, i64 76
  %329 = add i64 %267, %328
  br i1 %327, label %block_402de6, label %block_402dd5

block_402c54:                                     ; preds = %block_402bb7
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64* %10, align 8, !tbaa !1240
  %330 = load i64, i64* @stdout
  store i64 %330, i64* %11, align 8, !tbaa !1240
  %331 = add i64 %574, 25
  %332 = load i64, i64* %12, align 8, !tbaa !1240
  %333 = add i64 %332, -8
  %334 = inttoptr i64 %333 to i64*
  store i64 %331, i64* %334
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %338 = load i64, i64* %711, align 8, !alias.scope !3173, !noalias !3176
  %339 = load i64, i64* %335, align 8, !alias.scope !3173, !noalias !3176
  %340 = load i64, i64* %14, align 8, !alias.scope !3173, !noalias !3176
  %341 = load i64, i64* %337, align 8, !alias.scope !3173, !noalias !3176
  %342 = inttoptr i64 %332 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %332, 8
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %332, 16
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %332, 24
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %332, 32
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %332, 40
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %332, 48
  %360 = inttoptr i64 %359 to i64*
  %361 = load i64, i64* %360
  %362 = add i64 %332, 56
  %363 = inttoptr i64 %362 to i64*
  %364 = load i64, i64* %363
  %365 = add i64 %332, 64
  %366 = inttoptr i64 %365 to i64*
  %367 = load i64, i64* %366
  %368 = add i64 %332, 72
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = inttoptr i64 %333 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %3, align 8, !alias.scope !3173, !noalias !3176
  store i64 %332, i64* %12, align 8, !alias.scope !3173, !noalias !3176
  %373 = tail call i64 @fprintf(i64 %330, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1419), i64 %338, i64 %339, i64 %340, i64 %341, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355, i64 %358, i64 %361, i64 %364, i64 %367, i64 %370), !noalias !3173
  %374 = load i64, i64* %13, align 8
  %375 = add i64 %374, -40
  %376 = load i64, i64* %3, align 8
  %377 = inttoptr i64 %375 to i32*
  store i32 0, i32* %377
  %378 = add i64 %374, -88
  %379 = trunc i64 %373 to i32
  %380 = add i64 %376, 10
  %381 = inttoptr i64 %378 to i32*
  store i32 %379, i32* %381
  br label %block_402c77

block_402d23:                                     ; preds = %block_402d04, %block_402de6
  %382 = phi i64 [ %584, %block_402d04 ], [ %138, %block_402de6 ]
  %383 = phi i64 [ %576, %block_402d04 ], [ %296, %block_402de6 ]
  %384 = phi %struct.Memory* [ %578, %block_402d04 ], [ %133, %block_402de6 ]
  %385 = add i64 %383, -40
  %386 = inttoptr i64 %385 to i32*
  %387 = load i32, i32* %386
  %388 = add i64 %383, -8
  %389 = inttoptr i64 %388 to i32*
  %390 = load i32, i32* %389
  %391 = sub i32 %387, %390
  %392 = lshr i32 %391, 31
  %393 = trunc i32 %392 to i8
  %394 = lshr i32 %387, 31
  %395 = lshr i32 %390, 31
  %396 = xor i32 %395, %394
  %397 = xor i32 %392, %394
  %398 = add nuw nsw i32 %397, %396
  %399 = icmp eq i32 %398, 2
  %400 = icmp ne i8 %393, 0
  %401 = xor i1 %400, %399
  %402 = select i1 %401, i64 12, i64 214
  %403 = add i64 %382, %402
  br i1 %401, label %block_402d2f, label %block_402df9

block_402c36:                                     ; preds = %block_402bdb
  %404 = add i64 %140, -60
  %405 = inttoptr i64 %404 to i32*
  %406 = load i32, i32* %405
  %407 = sext i32 %406 to i64
  store i64 %152, i64* %8, align 8, !tbaa !1240
  %408 = add i64 %153, ptrtoint (%adcgen_type* @adcgen to i64)
  %409 = inttoptr i64 %408 to i64*
  store i64 %407, i64* %409
  %410 = inttoptr i64 %149 to i32*
  %411 = load i32, i32* %410
  %412 = add i32 %411, 1
  %413 = inttoptr i64 %149 to i32*
  store i32 %412, i32* %413
  %414 = add i64 %170, -127
  br label %block_402bb7

block_402e0c:                                     ; preds = %block_402e00
  %415 = sext i32 %717 to i64
  %416 = shl nsw i64 %415, 3
  %417 = add i64 %416, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %418 = inttoptr i64 %417 to i64*
  %419 = load i64, i64* %418
  %420 = add i64 %713, -48
  %421 = inttoptr i64 %420 to i32*
  %422 = load i32, i32* %421
  %423 = sext i32 %422 to i64
  %424 = sext i64 %419 to i128
  %425 = and i128 %424, -18446744073709551616
  %426 = sext i32 %422 to i128
  %427 = and i128 %426, -18446744073709551616
  %428 = zext i64 %419 to i128
  %429 = or i128 %425, %428
  %430 = zext i64 %423 to i128
  %431 = or i128 %427, %430
  %432 = mul nsw i128 %429, %431
  %433 = trunc i128 %432 to i64
  %434 = sext i64 %433 to i128
  %435 = icmp ne i128 %434, %432
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %19, align 1, !tbaa !1264
  %437 = trunc i128 %432 to i32
  %438 = and i32 %437, 255
  %439 = tail call i32 @llvm.ctpop.i32(i32 %438) #10
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  store i8 %442, i8* %20, align 1, !tbaa !1278
  store i8 0, i8* %21, align 1, !tbaa !1279
  store i8 0, i8* %23, align 1, !tbaa !1280
  %443 = lshr i64 %433, 63
  %444 = trunc i64 %443 to i8
  store i8 %444, i8* %24, align 1, !tbaa !1281
  store i8 %436, i8* %25, align 1, !tbaa !1282
  %445 = add i64 %713, -32
  %446 = inttoptr i64 %445 to i64*
  %447 = load i64, i64* %446
  %448 = add i64 %416, %447
  %449 = inttoptr i64 %448 to i64*
  store i64 %433, i64* %449
  %450 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%adcgen_type* @adcgen to i64), i64 160) to i32*)
  %451 = sext i32 %450 to i64
  %452 = inttoptr i64 %445 to i64*
  %453 = load i64, i64* %452
  %454 = inttoptr i64 %715 to i32*
  %455 = load i32, i32* %454
  %456 = sext i32 %455 to i64
  %457 = shl nsw i64 %456, 3
  %458 = add i64 %457, %453
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %713, -120
  %462 = inttoptr i64 %461 to i64*
  store i64 %451, i64* %462
  store i64 %460, i64* %7, align 8, !tbaa !1240
  %463 = add i64 %713, -128
  %464 = inttoptr i64 %463 to i64*
  store i64 %451, i64* %464
  %465 = ashr i64 %460, 63
  store i64 %465, i64* %575, align 8, !tbaa !1240
  %466 = inttoptr i64 %463 to i64*
  %467 = load i64, i64* %466
  store i64 %467, i64* %8, align 8, !tbaa !1240
  %468 = add i64 %733, 80
  store i64 %468, i64* %3, align 8
  %469 = sext i64 %467 to i128
  %470 = and i128 %469, -18446744073709551616
  %471 = zext i64 %465 to i128
  %472 = shl nuw i128 %471, 64
  %473 = zext i64 %460 to i128
  %474 = or i128 %472, %473
  %475 = zext i64 %467 to i128
  %476 = or i128 %470, %475
  %477 = sdiv i128 %474, %476
  %478 = trunc i128 %477 to i64
  %479 = and i128 %477, 18446744073709551615
  %480 = sext i64 %478 to i128
  %481 = and i128 %480, -18446744073709551616
  %482 = or i128 %481, %479
  %483 = icmp eq i128 %477, %482
  br i1 %483, label %488, label %484

; <label>:484:                                    ; preds = %block_402e0c
  %485 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %468, %struct.Memory* %714) #14
  %486 = load i64, i64* %3, align 8
  %487 = load i64, i64* %7, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:488:                                    ; preds = %block_402e0c
  %489 = srem i128 %474, %476
  %490 = trunc i128 %489 to i64
  store i64 %490, i64* %575, align 8, !tbaa !1240
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %488, %484
  %491 = phi i64 [ %487, %484 ], [ %478, %488 ]
  %492 = phi i64 [ %486, %484 ], [ %468, %488 ]
  %493 = phi %struct.Memory* [ %485, %484 ], [ %714, %488 ]
  %494 = load i64, i64* %13, align 8
  %495 = add i64 %494, -120
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = mul i64 %491, %497
  store i64 %498, i64* %10, align 8, !tbaa !1240
  %499 = add i64 %494, -32
  %500 = inttoptr i64 %499 to i64*
  %501 = load i64, i64* %500
  %502 = add i64 %494, -40
  %503 = inttoptr i64 %502 to i32*
  %504 = load i32, i32* %503
  %505 = sext i32 %504 to i64
  store i64 %505, i64* %11, align 8, !tbaa !1240
  %506 = shl nsw i64 %505, 3
  %507 = add i64 %506, %501
  %508 = inttoptr i64 %507 to i64*
  %509 = load i64, i64* %508
  %510 = sub i64 %509, %498
  store i64 %510, i64* %14, align 8, !tbaa !1240
  %511 = inttoptr i64 %507 to i64*
  store i64 %510, i64* %511
  %512 = inttoptr i64 %502 to i32*
  %513 = load i32, i32* %512
  %514 = add i32 %513, 1
  %515 = load i64, i64* %13, align 8
  %516 = add i64 %515, -40
  %517 = inttoptr i64 %516 to i32*
  store i32 %514, i32* %517
  %518 = add i64 %492, -92
  br label %block_402e00

block_402e85:                                     ; preds = %block_402e00
  %519 = add i64 %713, -4
  %520 = inttoptr i64 %519 to i32*
  store i32 1, i32* %520
  %521 = inttoptr i64 %519 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %7, align 8, !tbaa !1240
  %524 = load i64, i64* %12, align 8
  %525 = add i64 %524, 128
  %526 = icmp ugt i64 %524, -129
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %19, align 1, !tbaa !1264
  %528 = trunc i64 %525 to i32
  %529 = and i32 %528, 255
  %530 = tail call i32 @llvm.ctpop.i32(i32 %529) #10
  %531 = trunc i32 %530 to i8
  %532 = and i8 %531, 1
  %533 = xor i8 %532, 1
  store i8 %533, i8* %20, align 1, !tbaa !1278
  %534 = xor i64 %525, %524
  %535 = lshr i64 %534, 4
  %536 = trunc i64 %535 to i8
  %537 = and i8 %536, 1
  store i8 %537, i8* %21, align 1, !tbaa !1279
  %538 = icmp eq i64 %525, 0
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %23, align 1, !tbaa !1280
  %540 = lshr i64 %525, 63
  %541 = trunc i64 %540 to i8
  store i8 %541, i8* %24, align 1, !tbaa !1281
  %542 = lshr i64 %524, 63
  %543 = xor i64 %540, %542
  %544 = add nuw nsw i64 %543, %540
  %545 = icmp eq i64 %544, 2
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %25, align 1, !tbaa !1282
  %547 = add i64 %524, 136
  %548 = inttoptr i64 %525 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %13, align 8, !tbaa !1240
  %550 = inttoptr i64 %547 to i64*
  %551 = load i64, i64* %550
  store i64 %551, i64* %3, align 8, !tbaa !1240
  %552 = add i64 %524, 144
  store i64 %552, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %714

block_402bb7:                                     ; preds = %block_402bb0, %block_402c36
  %553 = phi i64 [ %709, %block_402bb0 ], [ %414, %block_402c36 ]
  %554 = phi i64 [ %15, %block_402bb0 ], [ %140, %block_402c36 ]
  %555 = phi %struct.Memory* [ %2, %block_402bb0 ], [ %141, %block_402c36 ]
  %556 = add i64 %554, -40
  %557 = inttoptr i64 %556 to i32*
  %558 = load i32, i32* %557
  %559 = add i64 %554, -8
  %560 = inttoptr i64 %559 to i32*
  %561 = load i32, i32* %560
  %562 = sub i32 %558, %561
  %563 = lshr i32 %562, 31
  %564 = trunc i32 %563 to i8
  %565 = lshr i32 %558, 31
  %566 = lshr i32 %561, 31
  %567 = xor i32 %566, %565
  %568 = xor i32 %563, %565
  %569 = add nuw nsw i32 %568, %567
  %570 = icmp eq i32 %569, 2
  %571 = icmp ne i8 %564, 0
  %572 = xor i1 %571, %570
  %573 = select i1 %572, i64 12, i64 157
  %574 = add i64 %553, %573
  br i1 %572, label %block_402bc3, label %block_402c54

block_402d04:                                     ; preds = %block_402cff, %block_402b81.block_402d04_crit_edge
  %575 = phi i64* [ %28, %block_402b81.block_402d04_crit_edge ], [ %711, %block_402cff ]
  %576 = phi i64 [ %15, %block_402b81.block_402d04_crit_edge ], [ %111, %block_402cff ]
  %577 = phi i64 [ %27, %block_402b81.block_402d04_crit_edge ], [ %29, %block_402cff ]
  %578 = phi %struct.Memory* [ %2, %block_402b81.block_402d04_crit_edge ], [ %112, %block_402cff ]
  %579 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %580 = add i32 %579, 1
  store i32 %580, i32* inttoptr (i64 add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 48) to i32*)
  %581 = add i64 %576, -48
  %582 = inttoptr i64 %581 to i32*
  store i32 0, i32* %582
  %583 = add i64 %576, -40
  %584 = add i64 %577, 31
  %585 = inttoptr i64 %583 to i32*
  store i32 0, i32* %585
  br label %block_402d23

block_402c83:                                     ; preds = %block_402c77
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), i64* %10, align 8, !tbaa !1240
  store i64 2, i64* %8, align 8, !tbaa !1240
  %586 = sext i32 %115 to i64
  %587 = shl nsw i64 %586, 3
  %588 = add i64 %587, ptrtoint (%adcprime_type* @adcprime to i64)
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %590, 1
  %592 = icmp eq i64 %590, -1
  %593 = icmp eq i64 %591, 0
  %594 = or i1 %592, %593
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %19, align 1, !tbaa !1264
  %596 = trunc i64 %591 to i32
  %597 = and i32 %596, 255
  %598 = tail call i32 @llvm.ctpop.i32(i32 %597) #10
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  store i8 %601, i8* %20, align 1, !tbaa !1278
  %602 = xor i64 %591, %590
  %603 = lshr i64 %602, 4
  %604 = trunc i64 %603 to i8
  %605 = and i8 %604, 1
  store i8 %605, i8* %21, align 1, !tbaa !1279
  %606 = zext i1 %593 to i8
  store i8 %606, i8* %23, align 1, !tbaa !1280
  %607 = lshr i64 %591, 63
  %608 = trunc i64 %607 to i8
  store i8 %608, i8* %24, align 1, !tbaa !1281
  %609 = lshr i64 %590, 63
  %610 = xor i64 %607, %609
  %611 = add nuw nsw i64 %610, %607
  %612 = icmp eq i64 %611, 2
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %25, align 1, !tbaa !1282
  store i64 %591, i64* %7, align 8, !tbaa !1240
  %614 = ashr i64 %591, 63
  store i64 %614, i64* %711, align 8, !tbaa !1240
  %615 = add i64 %131, 41
  store i64 %615, i64* %3, align 8
  %616 = zext i64 %614 to i128
  %617 = shl nuw i128 %616, 64
  %618 = zext i64 %591 to i128
  %619 = or i128 %617, %618
  %620 = sdiv i128 %619, 2
  %621 = trunc i128 %620 to i64
  %622 = and i128 %620, 18446744073709551615
  %623 = sext i64 %621 to i128
  %624 = and i128 %623, -18446744073709551616
  %625 = or i128 %624, %622
  %626 = icmp eq i128 %620, %625
  br i1 %626, label %633, label %627

; <label>:627:                                    ; preds = %block_402c83
  %628 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %615, %struct.Memory* %112) #14
  %629 = load i64, i64* %13, align 8
  %630 = load i64, i64* %3, align 8
  %631 = load i64, i64* %7, align 8
  %632 = load i64, i64* %336, align 8, !alias.scope !3178, !noalias !3181
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11

; <label>:633:                                    ; preds = %block_402c83
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit11: ; preds = %633, %627
  %634 = phi i64 [ %632, %627 ], [ add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1443), %633 ]
  %635 = phi i64 [ %631, %627 ], [ %621, %633 ]
  %636 = phi i64 [ %630, %627 ], [ %615, %633 ]
  %637 = phi i64 [ %629, %627 ], [ %111, %633 ]
  %638 = phi %struct.Memory* [ %628, %627 ], [ %112, %633 ]
  %639 = add i64 %637, -40
  %640 = inttoptr i64 %639 to i32*
  %641 = load i32, i32* %640
  %642 = sext i32 %641 to i64
  %643 = shl nsw i64 %642, 3
  %644 = add i64 %643, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %645 = inttoptr i64 %644 to i64*
  store i64 %635, i64* %645
  %646 = load i64, i64* @stdout
  store i64 %646, i64* %11, align 8, !tbaa !1240
  %647 = inttoptr i64 %639 to i32*
  %648 = load i32, i32* %647
  %649 = sext i32 %648 to i64
  %650 = shl nsw i64 %649, 3
  %651 = add i64 %650, ptrtoint (%adcprime_type* @adcprime to i64)
  %652 = inttoptr i64 %651 to i64*
  %653 = load i64, i64* %652
  %654 = add i64 %650, ptrtoint (%adcgen_type* @adcgen to i64)
  %655 = inttoptr i64 %654 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %8, align 8, !tbaa !1240
  %657 = add i64 %650, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 64)
  %658 = inttoptr i64 %657 to i64*
  %659 = load i64, i64* %658
  store i64 %659, i64* %14, align 8, !tbaa !1240
  store i64 %653, i64* %9, align 8, !tbaa !1240
  %660 = add i64 %636, 66
  %661 = load i64, i64* %12, align 8, !tbaa !1240
  %662 = add i64 %661, -8
  %663 = inttoptr i64 %662 to i64*
  store i64 %660, i64* %663
  %664 = load i64, i64* %337, align 8, !alias.scope !3178, !noalias !3181
  %665 = inttoptr i64 %661 to i64*
  %666 = load i64, i64* %665
  %667 = add i64 %661, 8
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668
  %670 = add i64 %661, 16
  %671 = inttoptr i64 %670 to i64*
  %672 = load i64, i64* %671
  %673 = add i64 %661, 24
  %674 = inttoptr i64 %673 to i64*
  %675 = load i64, i64* %674
  %676 = add i64 %661, 32
  %677 = inttoptr i64 %676 to i64*
  %678 = load i64, i64* %677
  %679 = add i64 %661, 40
  %680 = inttoptr i64 %679 to i64*
  %681 = load i64, i64* %680
  %682 = add i64 %661, 48
  %683 = inttoptr i64 %682 to i64*
  %684 = load i64, i64* %683
  %685 = add i64 %661, 56
  %686 = inttoptr i64 %685 to i64*
  %687 = load i64, i64* %686
  %688 = add i64 %661, 64
  %689 = inttoptr i64 %688 to i64*
  %690 = load i64, i64* %689
  %691 = add i64 %661, 72
  %692 = inttoptr i64 %691 to i64*
  %693 = load i64, i64* %692
  %694 = inttoptr i64 %662 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %3, align 8, !alias.scope !3178, !noalias !3181
  store i64 %661, i64* %12, align 8, !alias.scope !3178, !noalias !3181
  %696 = tail call i64 @fprintf(i64 %646, i64 %634, i64 %653, i64 %656, i64 %659, i64 %664, i64 %666, i64 %669, i64 %672, i64 %675, i64 %678, i64 %681, i64 %684, i64 %687, i64 %690, i64 %693), !noalias !3178
  %697 = load i64, i64* %13, align 8
  %698 = add i64 %697, -92
  %699 = trunc i64 %696 to i32
  %700 = load i64, i64* %3, align 8
  %701 = inttoptr i64 %698 to i32*
  store i32 %699, i32* %701
  %702 = add i64 %697, -40
  %703 = inttoptr i64 %702 to i32*
  %704 = load i32, i32* %703
  %705 = add i32 %704, 1
  %706 = inttoptr i64 %702 to i32*
  store i32 %705, i32* %706
  %707 = add i64 %700, -119
  br label %block_402c77

block_402bb0:                                     ; preds = %block_402b81
  %708 = add i64 %15, -40
  %709 = add i64 %27, 7
  %710 = inttoptr i64 %708 to i32*
  store i32 0, i32* %710
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_402bb7

block_402e00:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402df9
  %712 = phi i64 [ %30, %block_402df9 ], [ %518, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %713 = phi i64 [ %383, %block_402df9 ], [ %515, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %714 = phi %struct.Memory* [ %384, %block_402df9 ], [ %493, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %715 = add i64 %713, -40
  %716 = inttoptr i64 %715 to i32*
  %717 = load i32, i32* %716
  %718 = add i64 %713, -12
  %719 = inttoptr i64 %718 to i32*
  %720 = load i32, i32* %719
  %721 = sub i32 %717, %720
  %722 = lshr i32 %721, 31
  %723 = trunc i32 %722 to i8
  %724 = lshr i32 %717, 31
  %725 = lshr i32 %720, 31
  %726 = xor i32 %725, %724
  %727 = xor i32 %722, %724
  %728 = add nuw nsw i32 %727, %726
  %729 = icmp eq i32 %728, 2
  %730 = icmp ne i8 %723, 0
  %731 = xor i1 %730, %729
  %732 = select i1 %731, i64 12, i64 133
  %733 = add i64 %712, %732
  br i1 %731, label %block_402e0c, label %block_402e85
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4085a0_GetParent(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4085a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %16, -16
  %26 = load i64, i64* %12, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %16, -20
  %29 = load i32, i32* %7, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = add i64 %16, -76
  %32 = inttoptr i64 %31 to i32*
  store i32 0, i32* %32
  %33 = inttoptr i64 %28 to i32*
  %34 = load i32, i32* %33
  %35 = zext i32 %34 to i64
  store i64 %35, i64* %11, align 8, !tbaa !1240
  store i64 %35, i64* %12, align 8, !tbaa !1240
  %36 = add i64 %1, 1424
  %37 = add i64 %1, 35
  %38 = add i64 %16, -144
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  store i64 %38, i64* %13, align 8, !tbaa !1240
  %40 = tail call %struct.Memory* @sub_408b30_NumberOfOnes(%struct.State* nonnull %0, i64 %36, %struct.Memory* %2)
  %41 = load i64, i64* %14, align 8
  %42 = add i64 %41, -76
  %43 = load i32, i32* %5, align 4
  %44 = load i64, i64* %3, align 8
  %45 = inttoptr i64 %42 to i32*
  store i32 %43, i32* %45
  %46 = add i64 %41, -92
  %47 = inttoptr i64 %46 to i32*
  store i32 3, i32* %47
  %48 = add i64 %41, -8
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = add i64 %50, 4476
  %52 = inttoptr i64 %51 to i32*
  %53 = load i32, i32* %52
  %54 = zext i32 %53 to i64
  store i64 %54, i64* %12, align 8, !tbaa !1240
  %55 = add i64 %44, -803
  %56 = add i64 %44, 25
  %57 = load i64, i64* %13, align 8, !tbaa !1240
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %56, i64* %59
  store i64 %58, i64* %13, align 8, !tbaa !1240
  %60 = tail call %struct.Memory* @sub_4082a0_mro32(%struct.State* nonnull %0, i64 %55, %struct.Memory* %40)
  %61 = load i32, i32* %5, align 4
  %62 = zext i32 %61 to i64
  %63 = load i64, i64* %3, align 8
  store i64 %62, i64* %12, align 8, !tbaa !1240
  %64 = add i64 %63, -732
  %65 = add i64 %63, 7
  %66 = load i64, i64* %13, align 8, !tbaa !1240
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68
  store i64 %67, i64* %13, align 8, !tbaa !1240
  %69 = tail call %struct.Memory* @sub_408300_setLeadingOnes32(%struct.State* nonnull %0, i64 %64, %struct.Memory* %60)
  %70 = load i64, i64* %14, align 8
  %71 = add i64 %70, -64
  %72 = load i32, i32* %5, align 4
  %73 = load i64, i64* %3, align 8
  %74 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %74
  %75 = add i64 %70, -8
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %9, align 8, !tbaa !1240
  %78 = add i64 %77, 4476
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %12, align 8, !tbaa !1240
  %82 = add i64 %73, -931
  %83 = add i64 %73, 18
  %84 = load i64, i64* %13, align 8, !tbaa !1240
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86
  store i64 %85, i64* %13, align 8, !tbaa !1240
  %87 = tail call %struct.Memory* @sub_408240_Mlo32(%struct.State* nonnull %0, i64 %82, %struct.Memory* %69)
  %88 = load i64, i64* %14, align 8
  %89 = add i64 %88, -68
  %90 = load i64, i64* %3, align 8
  store i64 %89, i64* %12, align 8, !tbaa !1240
  %91 = load i32, i32* %5, align 4
  %92 = zext i32 %91 to i64
  store i64 %92, i64* %11, align 8, !tbaa !1240
  %93 = add i64 %90, -997
  %94 = add i64 %90, 11
  %95 = load i64, i64* %13, align 8, !tbaa !1240
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97
  store i64 %96, i64* %13, align 8, !tbaa !1240
  %98 = tail call %struct.Memory* @sub_408210_SetOneBit32(%struct.State* nonnull %0, i64 %93, %struct.Memory* %87)
  %99 = load i64, i64* %14, align 8
  %100 = add i64 %99, -8
  %101 = load i64, i64* %3, align 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %9, align 8, !tbaa !1240
  %104 = add i64 %103, 4476
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %12, align 8, !tbaa !1240
  %108 = add i64 %101, -960
  %109 = add i64 %101, 15
  %110 = load i64, i64* %13, align 8, !tbaa !1240
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112
  store i64 %111, i64* %13, align 8, !tbaa !1240
  %113 = tail call %struct.Memory* @sub_408240_Mlo32(%struct.State* nonnull %0, i64 %108, %struct.Memory* %98)
  %114 = load i32, i32* %5, align 4
  %115 = zext i32 %114 to i64
  %116 = load i64, i64* %3, align 8
  store i64 %115, i64* %12, align 8, !tbaa !1240
  %117 = add i64 %116, -783
  %118 = add i64 %116, 7
  %119 = load i64, i64* %13, align 8, !tbaa !1240
  %120 = add i64 %119, -8
  %121 = inttoptr i64 %120 to i64*
  store i64 %118, i64* %121
  store i64 %120, i64* %13, align 8, !tbaa !1240
  %122 = tail call %struct.Memory* @sub_408300_setLeadingOnes32(%struct.State* nonnull %0, i64 %117, %struct.Memory* %113)
  %123 = load i64, i64* %14, align 8
  %124 = add i64 %123, -72
  %125 = load i32, i32* %5, align 4
  %126 = load i64, i64* %3, align 8
  %127 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %127
  %128 = add i64 %123, -88
  %129 = inttoptr i64 %128 to i32*
  store i32 0, i32* %129
  %130 = add i64 %123, -84
  %131 = inttoptr i64 %130 to i32*
  store i32 0, i32* %131
  %132 = add i64 %123, -80
  %133 = inttoptr i64 %132 to i32*
  store i32 0, i32* %133
  %134 = add i64 %123, -76
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135
  %137 = add i64 %123, -16
  %138 = add i64 %126, 30
  %139 = inttoptr i64 %137 to i32*
  store i32 %136, i32* %139
  %140 = add i64 %123, -8
  %141 = add i64 %123, -20
  %142 = add i64 %123, -104
  %143 = add i64 %123, -100
  %144 = add i64 %123, -96
  %145 = add i64 %123, -28
  %146 = add i64 %123, -24
  %147 = add i64 %123, -56
  %148 = add i64 %123, -44
  %149 = add i64 %123, -32
  %150 = add i64 %123, -64
  %151 = add i64 %123, -60
  %152 = add i64 %123, -12
  %153 = add i64 %123, -68
  %154 = add i64 %123, -52
  %155 = add i64 %123, -40
  %156 = add i64 %123, -48
  %157 = add i64 %123, -36
  %158 = add i64 %123, -92
  %159 = add i64 %123, -108
  %160 = add i64 %123, -112
  %161 = add i64 %123, -116
  br label %block_408634

block_408753:                                     ; preds = %block_408730
  store i64 %482, i64* %10, align 8, !tbaa !1240
  %162 = inttoptr i64 %148 to i32*
  store i32 %486, i32* %162
  %163 = inttoptr i64 %145 to i32*
  %164 = load i32, i32* %163
  %165 = zext i32 %164 to i64
  %166 = add i64 %489, 35
  %167 = inttoptr i64 %149 to i32*
  store i32 %164, i32* %167
  br label %block_40877b

block_40887e:                                     ; preds = %block_40883e
  %168 = inttoptr i64 %154 to i32*
  %169 = load i32, i32* %168
  %170 = inttoptr i64 %140 to i64*
  %171 = load i64, i64* %170
  %172 = add i64 %171, 4456
  %173 = inttoptr i64 %172 to i64*
  %174 = load i64, i64* %173
  %175 = inttoptr i64 %145 to i32*
  %176 = load i32, i32* %175
  %177 = zext i32 %176 to i64
  store i64 %177, i64* %10, align 8, !tbaa !1240
  %178 = mul nuw nsw i64 %177, 24
  store i64 %178, i64* %11, align 8, !tbaa !1240
  %179 = add i64 %178, %174
  %180 = add i64 %179, 8
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181
  %183 = icmp ule i32 %169, %182
  %184 = select i1 %183, i64 70, i64 35
  %185 = add i64 %669, %184
  br i1 %183, label %block_4088c9, label %block_4088a1

block_4088f4:                                     ; preds = %block_4088ea
  %186 = add i64 %198, 7
  %187 = inttoptr i64 %158 to i32*
  store i32 1, i32* %187
  br label %block_408931

block_4087f3:                                     ; preds = %block_4087d0
  store i64 %605, i64* %10, align 8, !tbaa !1240
  %188 = inttoptr i64 %156 to i32*
  store i32 %609, i32* %188
  %189 = inttoptr i64 %145 to i32*
  %190 = load i32, i32* %189
  %191 = zext i32 %190 to i64
  %192 = add i64 %612, 35
  %193 = inttoptr i64 %157 to i32*
  store i32 %190, i32* %193
  br label %block_40881b

block_4088ea:                                     ; preds = %block_4086ab
  %194 = inttoptr i64 %130 to i32*
  %195 = load i32, i32* %194
  %196 = icmp eq i32 %195, 0
  %197 = select i1 %196, i64 22, i64 10
  %198 = add i64 %633, %197
  br i1 %196, label %block_408900, label %block_4088f4

block_40877b:                                     ; preds = %block_408701, %block_408730, %block_408753
  %199 = phi i64 [ %688, %block_408701 ], [ %483, %block_408730 ], [ %165, %block_408753 ]
  %200 = phi i64 [ %690, %block_408701 ], [ %489, %block_408730 ], [ %166, %block_408753 ]
  %201 = phi i64 [ 80, %block_408701 ], [ 5, %block_408730 ], [ 5, %block_408753 ]
  %202 = phi %struct.Memory* [ %626, %block_408701 ], [ %626, %block_408730 ], [ %626, %block_408753 ]
  %203 = add i64 %200, %201
  %204 = inttoptr i64 %147 to i32*
  %205 = load i32, i32* %204
  %206 = inttoptr i64 %150 to i32*
  %207 = load i32, i32* %206
  %208 = and i32 %207, %205
  %209 = inttoptr i64 %151 to i32*
  store i32 %208, i32* %209
  %210 = inttoptr i64 %151 to i32*
  %211 = load i32, i32* %210
  %212 = inttoptr i64 %152 to i32*
  %213 = load i32, i32* %212
  %214 = icmp ne i32 %211, %213
  %215 = select i1 %214, i64 165, i64 21
  %216 = add i64 %203, %215
  br i1 %214, label %block_408820, label %block_408790

block_408953:                                     ; preds = %block_40893f
  %217 = inttoptr i64 %159 to i32*
  %218 = load i32, i32* %217
  %219 = add i32 %218, -2
  %220 = icmp eq i32 %219, 0
  %221 = inttoptr i64 %161 to i32*
  store i32 %219, i32* %221
  %222 = select i1 %220, i64 152, i64 20
  %223 = add i64 %318, %222
  br i1 %220, label %block_4089eb, label %block_408967

block_408647:                                     ; preds = %block_408634
  %224 = add i64 %350, 4464
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225
  %227 = mul nuw nsw i64 %348, 12
  %228 = add i64 %227, %226
  %229 = add i64 %228, 8
  %230 = inttoptr i64 %229 to i32*
  %231 = load i32, i32* %230
  %232 = inttoptr i64 %141 to i32*
  store i32 %231, i32* %232
  %233 = inttoptr i64 %141 to i32*
  %234 = load i32, i32* %233
  %235 = icmp eq i32 %234, 0
  %236 = select i1 %235, i64 44, i64 39
  %237 = add i64 %359, %236
  %238 = add i64 %237, 5
  %239 = select i1 %235, i64 %237, i64 %238
  %240 = inttoptr i64 %142 to i32*
  store i32 1, i32* %240
  %241 = inttoptr i64 %143 to i32*
  store i32 1, i32* %241
  %242 = inttoptr i64 %144 to i32*
  store i32 1, i32* %242
  %243 = inttoptr i64 %140 to i64*
  %244 = load i64, i64* %243
  %245 = add i64 %244, 4464
  %246 = inttoptr i64 %245 to i64*
  %247 = load i64, i64* %246
  %248 = inttoptr i64 %137 to i32*
  %249 = load i32, i32* %248
  %250 = zext i32 %249 to i64
  %251 = mul nuw nsw i64 %250, 12
  store i64 %251, i64* %10, align 8, !tbaa !1240
  %252 = add i64 %251, %247
  %253 = inttoptr i64 %252 to i32*
  %254 = load i32, i32* %253
  %255 = zext i32 %254 to i64
  %256 = inttoptr i64 %145 to i32*
  store i32 %254, i32* %256
  %257 = add i64 %239, 56
  %258 = inttoptr i64 %146 to i32*
  store i32 0, i32* %258
  br label %block_4086ab

block_4088d3:                                     ; preds = %block_4086b7, %block_4088ce
  %259 = phi i64 [ %340, %block_4086b7 ], [ %297, %block_4088ce ]
  %260 = phi i64 [ %343, %block_4086b7 ], [ %300, %block_4088ce ]
  %261 = phi %struct.Memory* [ %626, %block_4086b7 ], [ %299, %block_4088ce ]
  %262 = inttoptr i64 %145 to i32*
  %263 = load i32, i32* %262
  %264 = add i32 %263, 1
  %265 = inttoptr i64 %145 to i32*
  store i32 %264, i32* %265
  %266 = inttoptr i64 %146 to i32*
  %267 = load i32, i32* %266
  %268 = add i32 %267, 1
  %269 = inttoptr i64 %146 to i32*
  store i32 %268, i32* %269
  %270 = add i64 %260, -552
  br label %block_4086ab

block_4086f0:                                     ; preds = %block_4086b7
  %271 = inttoptr i64 %132 to i32*
  store i32 1, i32* %271
  %272 = inttoptr i64 %144 to i32*
  %273 = load i32, i32* %272
  %274 = icmp eq i32 %273, 0
  %275 = select i1 %274, i64 64, i64 17
  %276 = add i64 %343, %275
  br i1 %274, label %block_408730, label %block_408701

block_4087a1:                                     ; preds = %block_408790
  %277 = inttoptr i64 %140 to i64*
  %278 = load i64, i64* %277
  %279 = add i64 %278, 4456
  %280 = inttoptr i64 %279 to i64*
  %281 = load i64, i64* %280
  %282 = inttoptr i64 %145 to i32*
  %283 = load i32, i32* %282
  %284 = zext i32 %283 to i64
  %285 = mul nuw nsw i64 %284, 24
  store i64 %285, i64* %10, align 8, !tbaa !1240
  %286 = add i64 %285, %281
  %287 = add i64 %286, 8
  %288 = inttoptr i64 %287 to i32*
  %289 = load i32, i32* %288
  %290 = inttoptr i64 %156 to i32*
  store i32 %289, i32* %290
  %291 = inttoptr i64 %145 to i32*
  %292 = load i32, i32* %291
  %293 = zext i32 %292 to i64
  %294 = inttoptr i64 %157 to i32*
  store i32 %292, i32* %294
  %295 = add i64 %623, 42
  %296 = inttoptr i64 %143 to i32*
  store i32 0, i32* %296
  br label %block_40881b

block_4088ce:                                     ; preds = %block_408820, %block_40882f, %block_4088c9
  %297 = phi i64 [ %636, %block_408820 ], [ %636, %block_40882f ], [ %307, %block_4088c9 ]
  %298 = phi i64 [ %646, %block_408820 ], [ %495, %block_40882f ], [ %311, %block_4088c9 ]
  %299 = phi %struct.Memory* [ %638, %block_408820 ], [ %638, %block_40882f ], [ %310, %block_4088c9 ]
  %300 = add i64 %298, 5
  br label %block_4088d3

block_408af8:                                     ; preds = %block_408aee
  %301 = add i32 %653, -2
  %302 = icmp eq i32 %301, 0
  %303 = select i1 %302, i64 20, i64 10
  %304 = add i64 %658, %303
  br i1 %302, label %block_408b0c, label %block_408b02

block_408920:                                     ; preds = %block_408916
  %305 = add i64 %663, 7
  %306 = inttoptr i64 %158 to i32*
  store i32 0, i32* %306
  br label %block_408927

block_4088c9:                                     ; preds = %block_40884f, %block_4088a1, %block_40887e
  %307 = phi i64 [ %708, %block_40884f ], [ %536, %block_4088a1 ], [ %179, %block_40887e ]
  %308 = phi i64 [ %710, %block_40884f ], [ %537, %block_4088a1 ], [ %185, %block_40887e ]
  %309 = phi i64 [ 85, %block_40884f ], [ 10, %block_4088a1 ], [ 10, %block_40887e ]
  %310 = phi %struct.Memory* [ %638, %block_40884f ], [ %638, %block_4088a1 ], [ %638, %block_40887e ]
  %311 = add i64 %309, %308
  br label %block_4088ce

block_40893f:                                     ; preds = %block_408931
  %312 = inttoptr i64 %159 to i32*
  %313 = load i32, i32* %312
  %314 = add i32 %313, -1
  %315 = icmp eq i32 %314, 0
  %316 = inttoptr i64 %160 to i32*
  store i32 %314, i32* %316
  %317 = select i1 %315, i64 45, i64 20
  %318 = add i64 %420, %317
  br i1 %315, label %block_40896c, label %block_408953

block_4086b7:                                     ; preds = %block_4086ab
  %319 = inttoptr i64 %140 to i64*
  %320 = load i64, i64* %319
  %321 = add i64 %320, 4456
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322
  %324 = inttoptr i64 %145 to i32*
  %325 = load i32, i32* %324
  %326 = zext i32 %325 to i64
  %327 = mul nuw nsw i64 %326, 24
  store i64 %327, i64* %10, align 8, !tbaa !1240
  %328 = add i64 %327, %323
  %329 = inttoptr i64 %328 to i32*
  %330 = load i32, i32* %329
  %331 = inttoptr i64 %147 to i32*
  store i32 %330, i32* %331
  %332 = inttoptr i64 %140 to i64*
  %333 = load i64, i64* %332
  %334 = add i64 %333, 4476
  %335 = inttoptr i64 %334 to i32*
  %336 = load i32, i32* %335
  %337 = inttoptr i64 %147 to i32*
  %338 = load i32, i32* %337
  %339 = and i32 %338, %336
  %340 = zext i32 %339 to i64
  %341 = icmp ne i32 %339, %336
  %342 = select i1 %341, i64 540, i64 57
  %343 = add i64 %633, %342
  br i1 %341, label %block_4088d3, label %block_4086f0

block_408634:                                     ; preds = %block_408b11, %block_4085a0
  %344 = phi i64 [ %138, %block_4085a0 ], [ %617, %block_408b11 ]
  %345 = phi %struct.Memory* [ %122, %block_4085a0 ], [ %650, %block_408b11 ]
  %346 = inttoptr i64 %137 to i32*
  %347 = load i32, i32* %346
  %348 = zext i32 %347 to i64
  %349 = inttoptr i64 %140 to i64*
  %350 = load i64, i64* %349
  %351 = add i64 %350, 536
  %352 = inttoptr i64 %351 to i32*
  %353 = load i32, i32* %352
  %354 = sub i32 %347, %353
  %355 = icmp ult i32 %347, %353
  %356 = icmp eq i32 %354, 0
  %357 = or i1 %356, %355
  %358 = select i1 %357, i64 19, i64 1264
  %359 = add i64 %344, %358
  br i1 %357, label %block_408647, label %block_408b24.loopexit

block_40896c:                                     ; preds = %block_40893f
  %360 = inttoptr i64 %137 to i32*
  %361 = load i32, i32* %360
  %362 = inttoptr i64 %140 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %363, 4480
  %365 = inttoptr i64 %364 to i32*
  store i32 %361, i32* %365
  %366 = inttoptr i64 %140 to i64*
  %367 = load i64, i64* %366
  %368 = add i64 %367, 4456
  %369 = inttoptr i64 %368 to i64*
  %370 = load i64, i64* %369
  %371 = inttoptr i64 %157 to i32*
  %372 = load i32, i32* %371
  %373 = zext i32 %372 to i64
  %374 = mul nuw nsw i64 %373, 24
  %375 = add i64 %374, %370
  %376 = add i64 %375, 16
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %367, 568
  %380 = inttoptr i64 %379 to i64*
  store i64 %378, i64* %380
  %381 = inttoptr i64 %140 to i64*
  %382 = load i64, i64* %381
  %383 = add i64 %382, 4456
  %384 = inttoptr i64 %383 to i64*
  %385 = load i64, i64* %384
  %386 = inttoptr i64 %157 to i32*
  %387 = load i32, i32* %386
  %388 = zext i32 %387 to i64
  %389 = mul nuw nsw i64 %388, 24
  %390 = add i64 %389, %385
  %391 = add i64 %390, 8
  %392 = inttoptr i64 %391 to i32*
  %393 = load i32, i32* %392
  %394 = add i64 %382, 564
  %395 = inttoptr i64 %394 to i32*
  store i32 %393, i32* %395
  %396 = inttoptr i64 %140 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %397, 4456
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = inttoptr i64 %157 to i32*
  %402 = load i32, i32* %401
  %403 = zext i32 %402 to i64
  %404 = mul nuw nsw i64 %403, 24
  store i64 %404, i64* %10, align 8, !tbaa !1240
  %405 = add i64 %404, %400
  %406 = inttoptr i64 %405 to i32*
  %407 = load i32, i32* %406
  %408 = add i64 %397, 4484
  %409 = add i64 %318, 122
  %410 = inttoptr i64 %408 to i32*
  store i32 %407, i32* %410
  br label %block_408aee

block_408931:                                     ; preds = %block_40890a, %block_408927, %block_4088f4
  %411 = phi i64 [ %186, %block_4088f4 ], [ %635, %block_40890a ], [ %499, %block_408927 ]
  %412 = phi i64 [ 54, %block_4088f4 ], [ 5, %block_40890a ], [ 5, %block_408927 ]
  %413 = phi %struct.Memory* [ %626, %block_4088f4 ], [ %626, %block_40890a ], [ %498, %block_408927 ]
  %414 = add i64 %411, %412
  %415 = inttoptr i64 %158 to i32*
  %416 = load i32, i32* %415
  %417 = icmp eq i32 %416, 0
  %418 = inttoptr i64 %159 to i32*
  store i32 %416, i32* %418
  %419 = select i1 %417, i64 313, i64 14
  %420 = add i64 %414, %419
  br i1 %417, label %block_408a6a, label %block_40893f

block_408a6a:                                     ; preds = %block_408931
  %421 = inttoptr i64 %137 to i32*
  %422 = load i32, i32* %421
  %423 = inttoptr i64 %140 to i64*
  %424 = load i64, i64* %423
  %425 = add i64 %424, 4480
  %426 = inttoptr i64 %425 to i32*
  store i32 %422, i32* %426
  %427 = inttoptr i64 %140 to i64*
  %428 = load i64, i64* %427
  %429 = add i64 %428, 4456
  %430 = inttoptr i64 %429 to i64*
  %431 = load i64, i64* %430
  %432 = inttoptr i64 %149 to i32*
  %433 = load i32, i32* %432
  %434 = zext i32 %433 to i64
  %435 = mul nuw nsw i64 %434, 24
  %436 = add i64 %435, %431
  %437 = add i64 %436, 16
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %428, 568
  %441 = inttoptr i64 %440 to i64*
  store i64 %439, i64* %441
  %442 = inttoptr i64 %140 to i64*
  %443 = load i64, i64* %442
  %444 = add i64 %443, 4456
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = inttoptr i64 %149 to i32*
  %448 = load i32, i32* %447
  %449 = zext i32 %448 to i64
  %450 = mul nuw nsw i64 %449, 24
  %451 = add i64 %450, %446
  %452 = add i64 %451, 8
  %453 = inttoptr i64 %452 to i32*
  %454 = load i32, i32* %453
  %455 = add i64 %443, 564
  %456 = inttoptr i64 %455 to i32*
  store i32 %454, i32* %456
  %457 = inttoptr i64 %140 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %458, 4456
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  %462 = inttoptr i64 %149 to i32*
  %463 = load i32, i32* %462
  %464 = zext i32 %463 to i64
  %465 = mul nuw nsw i64 %464, 24
  store i64 %465, i64* %10, align 8, !tbaa !1240
  %466 = add i64 %465, %461
  %467 = inttoptr i64 %466 to i32*
  %468 = load i32, i32* %467
  %469 = add i64 %458, 4484
  %470 = add i64 %420, 122
  %471 = inttoptr i64 %469 to i32*
  store i32 %468, i32* %471
  br label %block_408aee

block_408730:                                     ; preds = %block_4086f0
  %472 = inttoptr i64 %148 to i32*
  %473 = load i32, i32* %472
  %474 = inttoptr i64 %140 to i64*
  %475 = load i64, i64* %474
  %476 = add i64 %475, 4456
  %477 = inttoptr i64 %476 to i64*
  %478 = load i64, i64* %477
  %479 = inttoptr i64 %145 to i32*
  %480 = load i32, i32* %479
  %481 = zext i32 %480 to i64
  store i64 %481, i64* %10, align 8, !tbaa !1240
  %482 = mul nuw nsw i64 %481, 24
  store i64 %482, i64* %11, align 8, !tbaa !1240
  %483 = add i64 %482, %478
  %484 = add i64 %483, 8
  %485 = inttoptr i64 %484 to i32*
  %486 = load i32, i32* %485
  %487 = icmp ule i32 %473, %486
  %488 = select i1 %487, i64 70, i64 35
  %489 = add i64 %276, %488
  br i1 %487, label %block_40877b, label %block_408753

block_40882f:                                     ; preds = %block_408820
  %490 = inttoptr i64 %124 to i32*
  %491 = load i32, i32* %490
  %492 = and i32 %491, %640
  %493 = icmp ne i32 %492, 0
  %494 = select i1 %493, i64 159, i64 15
  %495 = add i64 %646, %494
  br i1 %493, label %block_4088ce, label %block_40883e

block_408967:                                     ; preds = %block_408953
  %496 = add i64 %223, 386
  br label %block_408aee

block_408927:                                     ; preds = %block_408916, %block_408920
  %497 = phi i64 [ %663, %block_408916 ], [ %305, %block_408920 ]
  %498 = phi %struct.Memory* [ %626, %block_408916 ], [ %626, %block_408920 ]
  %499 = add i64 %497, 5
  br label %block_408931

block_408b24.loopexit:                            ; preds = %block_408634
  store i64 %350, i64* %9, align 8, !tbaa !1240
  br label %block_408b24

block_408b24:                                     ; preds = %block_408b0c, %block_408b24.loopexit
  %500 = phi %struct.Memory* [ %650, %block_408b0c ], [ %345, %block_408b24.loopexit ]
  %501 = inttoptr i64 %158 to i32*
  %502 = load i32, i32* %501
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %8, align 8, !tbaa !1240
  %504 = load i64, i64* %13, align 8
  %505 = add i64 %504, 128
  %506 = icmp ugt i64 %504, -129
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %19, align 1, !tbaa !1264
  %508 = trunc i64 %505 to i32
  %509 = and i32 %508, 255
  %510 = tail call i32 @llvm.ctpop.i32(i32 %509) #10
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  store i8 %513, i8* %20, align 1, !tbaa !1278
  %514 = xor i64 %505, %504
  %515 = lshr i64 %514, 4
  %516 = trunc i64 %515 to i8
  %517 = and i8 %516, 1
  store i8 %517, i8* %21, align 1, !tbaa !1279
  %518 = icmp eq i64 %505, 0
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %22, align 1, !tbaa !1280
  %520 = lshr i64 %505, 63
  %521 = trunc i64 %520 to i8
  store i8 %521, i8* %23, align 1, !tbaa !1281
  %522 = lshr i64 %504, 63
  %523 = xor i64 %520, %522
  %524 = add nuw nsw i64 %523, %520
  %525 = icmp eq i64 %524, 2
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %24, align 1, !tbaa !1282
  %527 = add i64 %504, 136
  %528 = inttoptr i64 %505 to i64*
  %529 = load i64, i64* %528
  store i64 %529, i64* %14, align 8, !tbaa !1240
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  store i64 %531, i64* %3, align 8, !tbaa !1240
  %532 = add i64 %504, 144
  store i64 %532, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %500

block_4088a1:                                     ; preds = %block_40887e
  store i64 %178, i64* %10, align 8, !tbaa !1240
  %533 = inttoptr i64 %154 to i32*
  store i32 %182, i32* %533
  %534 = inttoptr i64 %145 to i32*
  %535 = load i32, i32* %534
  %536 = zext i32 %535 to i64
  %537 = add i64 %185, 35
  %538 = inttoptr i64 %155 to i32*
  store i32 %535, i32* %538
  br label %block_4088c9

block_40881b:                                     ; preds = %block_4087d0, %block_4087a1, %block_4087f3
  %539 = phi i64 [ %293, %block_4087a1 ], [ %606, %block_4087d0 ], [ %191, %block_4087f3 ]
  %540 = phi i64 [ %295, %block_4087a1 ], [ %612, %block_4087d0 ], [ %192, %block_4087f3 ]
  %541 = phi i64 [ 85, %block_4087a1 ], [ 10, %block_4087d0 ], [ 10, %block_4087f3 ]
  %542 = phi %struct.Memory* [ %202, %block_4087a1 ], [ %202, %block_4087d0 ], [ %202, %block_4087f3 ]
  %543 = add i64 %541, %540
  br label %block_408820

block_4089eb:                                     ; preds = %block_408953
  %544 = inttoptr i64 %137 to i32*
  %545 = load i32, i32* %544
  %546 = inttoptr i64 %140 to i64*
  %547 = load i64, i64* %546
  %548 = add i64 %547, 4480
  %549 = inttoptr i64 %548 to i32*
  store i32 %545, i32* %549
  %550 = inttoptr i64 %140 to i64*
  %551 = load i64, i64* %550
  %552 = add i64 %551, 4456
  %553 = inttoptr i64 %552 to i64*
  %554 = load i64, i64* %553
  %555 = inttoptr i64 %155 to i32*
  %556 = load i32, i32* %555
  %557 = zext i32 %556 to i64
  %558 = mul nuw nsw i64 %557, 24
  %559 = add i64 %558, %554
  %560 = add i64 %559, 16
  %561 = inttoptr i64 %560 to i64*
  %562 = load i64, i64* %561
  %563 = add i64 %551, 568
  %564 = inttoptr i64 %563 to i64*
  store i64 %562, i64* %564
  %565 = inttoptr i64 %140 to i64*
  %566 = load i64, i64* %565
  %567 = add i64 %566, 4456
  %568 = inttoptr i64 %567 to i64*
  %569 = load i64, i64* %568
  %570 = inttoptr i64 %155 to i32*
  %571 = load i32, i32* %570
  %572 = zext i32 %571 to i64
  %573 = mul nuw nsw i64 %572, 24
  %574 = add i64 %573, %569
  %575 = add i64 %574, 8
  %576 = inttoptr i64 %575 to i32*
  %577 = load i32, i32* %576
  %578 = add i64 %566, 564
  %579 = inttoptr i64 %578 to i32*
  store i32 %577, i32* %579
  %580 = inttoptr i64 %140 to i64*
  %581 = load i64, i64* %580
  %582 = add i64 %581, 4456
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = inttoptr i64 %155 to i32*
  %586 = load i32, i32* %585
  %587 = zext i32 %586 to i64
  %588 = mul nuw nsw i64 %587, 24
  store i64 %588, i64* %10, align 8, !tbaa !1240
  %589 = add i64 %588, %584
  %590 = inttoptr i64 %589 to i32*
  %591 = load i32, i32* %590
  %592 = add i64 %581, 4484
  %593 = add i64 %223, 122
  %594 = inttoptr i64 %592 to i32*
  store i32 %591, i32* %594
  br label %block_408aee

block_4087d0:                                     ; preds = %block_408790
  %595 = inttoptr i64 %156 to i32*
  %596 = load i32, i32* %595
  %597 = inttoptr i64 %140 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %598, 4456
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = inttoptr i64 %145 to i32*
  %603 = load i32, i32* %602
  %604 = zext i32 %603 to i64
  store i64 %604, i64* %10, align 8, !tbaa !1240
  %605 = mul nuw nsw i64 %604, 24
  store i64 %605, i64* %11, align 8, !tbaa !1240
  %606 = add i64 %605, %601
  %607 = add i64 %606, 8
  %608 = inttoptr i64 %607 to i32*
  %609 = load i32, i32* %608
  %610 = icmp ule i32 %596, %609
  %611 = select i1 %610, i64 70, i64 35
  %612 = add i64 %623, %611
  br i1 %610, label %block_40881b, label %block_4087f3

block_408b11:                                     ; preds = %block_408b02
  %613 = inttoptr i64 %137 to i32*
  %614 = load i32, i32* %613
  %615 = add i32 %614, 1
  %616 = inttoptr i64 %137 to i32*
  store i32 %615, i32* %616
  %617 = add i64 %671, -1245
  br label %block_408634

block_408790:                                     ; preds = %block_40877b
  %618 = inttoptr i64 %130 to i32*
  store i32 1, i32* %618
  %619 = inttoptr i64 %143 to i32*
  %620 = load i32, i32* %619
  %621 = icmp eq i32 %620, 0
  %622 = select i1 %621, i64 64, i64 17
  %623 = add i64 %216, %622
  br i1 %621, label %block_4087d0, label %block_4087a1

block_4086ab:                                     ; preds = %block_4088d3, %block_408647
  %624 = phi i64 [ %255, %block_408647 ], [ %259, %block_4088d3 ]
  %625 = phi i64 [ %257, %block_408647 ], [ %270, %block_4088d3 ]
  %626 = phi %struct.Memory* [ %345, %block_408647 ], [ %261, %block_4088d3 ]
  %627 = inttoptr i64 %146 to i32*
  %628 = load i32, i32* %627
  %629 = inttoptr i64 %141 to i32*
  %630 = load i32, i32* %629
  %631 = icmp uge i32 %628, %630
  %632 = select i1 %631, i64 575, i64 12
  %633 = add i64 %625, %632
  br i1 %631, label %block_4088ea, label %block_4086b7

block_408b0c:                                     ; preds = %block_408b02, %block_408aee, %block_408af8
  store i64 %647, i64* %9, align 8, !tbaa !1240
  br label %block_408b24

block_40890a:                                     ; preds = %block_408900
  %634 = inttoptr i64 %158 to i32*
  store i32 2, i32* %634
  %635 = add i64 %716, 34
  br label %block_408931

block_408820:                                     ; preds = %block_40881b, %block_40877b
  %636 = phi i64 [ %199, %block_40877b ], [ %539, %block_40881b ]
  %637 = phi i64 [ %216, %block_40877b ], [ %543, %block_40881b ]
  %638 = phi %struct.Memory* [ %202, %block_40877b ], [ %542, %block_40881b ]
  %639 = inttoptr i64 %147 to i32*
  %640 = load i32, i32* %639
  %641 = inttoptr i64 %153 to i32*
  %642 = load i32, i32* %641
  %643 = and i32 %642, %640
  %644 = icmp eq i32 %643, 0
  %645 = select i1 %644, i64 174, i64 15
  %646 = add i64 %637, %645
  br i1 %644, label %block_4088ce, label %block_40882f

block_408aee:                                     ; preds = %block_4089eb, %block_408967, %block_408a6a, %block_40896c
  %647 = phi i64 [ %581, %block_4089eb ], [ %624, %block_408967 ], [ %458, %block_408a6a ], [ %397, %block_40896c ]
  %648 = phi i64 [ %593, %block_4089eb ], [ %496, %block_408967 ], [ %470, %block_408a6a ], [ %409, %block_40896c ]
  %649 = phi i64 [ 137, %block_4089eb ], [ 5, %block_408967 ], [ 10, %block_408a6a ], [ 264, %block_40896c ]
  %650 = phi %struct.Memory* [ %413, %block_4089eb ], [ %413, %block_408967 ], [ %413, %block_408a6a ], [ %413, %block_40896c ]
  %651 = add i64 %648, %649
  %652 = inttoptr i64 %158 to i32*
  %653 = load i32, i32* %652
  %654 = add i32 %653, -1
  %655 = icmp eq i32 %653, 0
  %656 = icmp eq i32 %654, 0
  %657 = select i1 %656, i64 30, i64 10
  %658 = add i64 %651, %657
  br i1 %656, label %block_408b0c, label %block_408af8

block_408916:                                     ; preds = %block_408900
  %659 = inttoptr i64 %132 to i32*
  %660 = load i32, i32* %659
  %661 = icmp eq i32 %660, 0
  %662 = select i1 %661, i64 17, i64 10
  %663 = add i64 %716, %662
  br i1 %661, label %block_408927, label %block_408920

block_40883e:                                     ; preds = %block_40882f
  %664 = inttoptr i64 %128 to i32*
  store i32 1, i32* %664
  %665 = inttoptr i64 %142 to i32*
  %666 = load i32, i32* %665
  %667 = icmp eq i32 %666, 0
  %668 = select i1 %667, i64 64, i64 17
  %669 = add i64 %495, %668
  br i1 %667, label %block_40887e, label %block_40884f

block_408b02:                                     ; preds = %block_408af8
  %670 = select i1 %655, i64 10, i64 15
  %671 = add i64 %304, %670
  br i1 %655, label %block_408b0c, label %block_408b11

block_408701:                                     ; preds = %block_4086f0
  %672 = inttoptr i64 %140 to i64*
  %673 = load i64, i64* %672
  %674 = add i64 %673, 4456
  %675 = inttoptr i64 %674 to i64*
  %676 = load i64, i64* %675
  %677 = inttoptr i64 %145 to i32*
  %678 = load i32, i32* %677
  %679 = zext i32 %678 to i64
  %680 = mul nuw nsw i64 %679, 24
  store i64 %680, i64* %10, align 8, !tbaa !1240
  %681 = add i64 %680, %676
  %682 = add i64 %681, 8
  %683 = inttoptr i64 %682 to i32*
  %684 = load i32, i32* %683
  %685 = inttoptr i64 %148 to i32*
  store i32 %684, i32* %685
  %686 = inttoptr i64 %145 to i32*
  %687 = load i32, i32* %686
  %688 = zext i32 %687 to i64
  %689 = inttoptr i64 %149 to i32*
  store i32 %687, i32* %689
  %690 = add i64 %276, 42
  %691 = inttoptr i64 %144 to i32*
  store i32 0, i32* %691
  br label %block_40877b

block_40884f:                                     ; preds = %block_40883e
  %692 = inttoptr i64 %140 to i64*
  %693 = load i64, i64* %692
  %694 = add i64 %693, 4456
  %695 = inttoptr i64 %694 to i64*
  %696 = load i64, i64* %695
  %697 = inttoptr i64 %145 to i32*
  %698 = load i32, i32* %697
  %699 = zext i32 %698 to i64
  %700 = mul nuw nsw i64 %699, 24
  store i64 %700, i64* %10, align 8, !tbaa !1240
  %701 = add i64 %700, %696
  %702 = add i64 %701, 8
  %703 = inttoptr i64 %702 to i32*
  %704 = load i32, i32* %703
  %705 = inttoptr i64 %154 to i32*
  store i32 %704, i32* %705
  %706 = inttoptr i64 %145 to i32*
  %707 = load i32, i32* %706
  %708 = zext i32 %707 to i64
  %709 = inttoptr i64 %155 to i32*
  store i32 %707, i32* %709
  %710 = add i64 %669, 42
  %711 = inttoptr i64 %142 to i32*
  store i32 0, i32* %711
  br label %block_4088c9

block_408900:                                     ; preds = %block_4088ea
  %712 = inttoptr i64 %128 to i32*
  %713 = load i32, i32* %712
  %714 = icmp eq i32 %713, 0
  %715 = select i1 %714, i64 22, i64 10
  %716 = add i64 %198, %715
  br i1 %714, label %block_408916, label %block_40890a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4027c1_def_402728(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4027c1:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -4
  %9 = inttoptr i64 %8 to i32*
  store i32 1, i32* %9
  %10 = inttoptr i64 %8 to i32*
  %11 = load i32, i32* %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %4, align 8, !tbaa !1240
  %13 = load i64, i64* %5, align 8
  %14 = add i64 %13, 1168
  %15 = icmp ugt i64 %13, -1169
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !1264
  %18 = trunc i64 %14 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #10
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !1278
  %25 = xor i64 %13, 16
  %26 = xor i64 %25, %14
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !1279
  %31 = icmp eq i64 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !1280
  %34 = lshr i64 %14, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !1281
  %37 = lshr i64 %13, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %34
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !1282
  %43 = add i64 %13, 1176
  %44 = inttoptr i64 %14 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %6, align 8, !tbaa !1240
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46
  store i64 %47, i64* %3, align 8, !tbaa !1240
  %48 = add i64 %13, 1184
  store i64 %48, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4015e0_ExtendFactors(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4015e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %9, align 8, !tbaa !1240
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -16
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = add i64 %12, -24
  %19 = load i64, i64* %7, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = add i64 %12, -32
  %22 = load i64, i64* %6, align 8
  %23 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %23
  %24 = add i64 %12, -40
  %25 = load i64, i64* %5, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = inttoptr i64 %24 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %5, align 8, !tbaa !1240
  %29 = add i64 %12, -16
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  store i64 %31, i64* %4, align 8, !tbaa !1240
  %32 = ashr i64 %31, 63
  store i64 %32, i64* %6, align 8, !tbaa !1240
  %33 = add i64 %12, -24
  %34 = add i64 %1, 34
  store i64 %34, i64* %3, align 8
  %35 = inttoptr i64 %33 to i64*
  %36 = load i64, i64* %35
  %37 = sext i64 %36 to i128
  %38 = and i128 %37, -18446744073709551616
  %39 = zext i64 %32 to i128
  %40 = shl nuw i128 %39, 64
  %41 = zext i64 %31 to i128
  %42 = or i128 %40, %41
  %43 = zext i64 %36 to i128
  %44 = or i128 %38, %43
  %45 = sdiv i128 %42, %44
  %46 = trunc i128 %45 to i64
  %47 = and i128 %45, 18446744073709551615
  %48 = sext i64 %46 to i128
  %49 = and i128 %48, -18446744073709551616
  %50 = or i128 %49, %47
  %51 = icmp eq i128 %45, %50
  br i1 %51, label %64, label %52

; <label>:52:                                     ; preds = %block_4015e0
  %53 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %34, %struct.Memory* %2) #14
  %54 = load i64, i64* %5, align 8
  %55 = load i64, i64* %4, align 8
  %56 = load i64, i64* %3, align 8
  %57 = load i64, i64* %10, align 8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

; <label>:64:                                     ; preds = %block_4015e0
  %65 = srem i128 %42, %44
  %66 = trunc i128 %65 to i64
  store i64 %66, i64* %6, align 8, !tbaa !1240
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %64, %52
  %73 = phi i8* [ %63, %52 ], [ %72, %64 ]
  %74 = phi i8* [ %62, %52 ], [ %71, %64 ]
  %75 = phi i8* [ %61, %52 ], [ %70, %64 ]
  %76 = phi i8* [ %60, %52 ], [ %69, %64 ]
  %77 = phi i8* [ %59, %52 ], [ %68, %64 ]
  %78 = phi i8* [ %58, %52 ], [ %67, %64 ]
  %79 = phi i64 [ %57, %52 ], [ %13, %64 ]
  %80 = phi i64 [ %56, %52 ], [ %34, %64 ]
  %81 = phi i64 [ %55, %52 ], [ %46, %64 ]
  %82 = phi i64 [ %54, %52 ], [ %28, %64 ]
  %83 = phi %struct.Memory* [ %53, %52 ], [ %2, %64 ]
  %84 = shl i64 %81, 3
  %85 = add i64 %84, %82
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86
  %88 = add i64 %79, -40
  %89 = inttoptr i64 %88 to i64*
  store i64 %87, i64* %89
  %90 = add i64 %79, -44
  %91 = inttoptr i64 %90 to i32*
  store i32 0, i32* %91
  %92 = add i64 %79, -48
  %93 = inttoptr i64 %92 to i32*
  store i32 0, i32* %93
  %94 = add i64 %79, -52
  %95 = inttoptr i64 %94 to i32*
  store i32 0, i32* %95
  %96 = add i64 %80, 36
  %97 = inttoptr i64 %94 to i32*
  store i32 0, i32* %97
  %98 = add i64 %79, -16
  %99 = add i64 %79, -24
  %100 = add i64 %79, -56
  br label %block_401626

block_401658:                                     ; preds = %block_40164e
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101
  %103 = inttoptr i64 %99 to i64*
  %104 = load i64, i64* %103
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105
  %107 = inttoptr i64 %92 to i32*
  %108 = load i32, i32* %107
  %109 = sext i32 %108 to i64
  store i64 %109, i64* %6, align 8, !tbaa !1240
  %110 = shl nsw i64 %109, 3
  %111 = add i64 %110, %106
  %112 = inttoptr i64 %111 to i64*
  store i64 %102, i64* %112
  %113 = inttoptr i64 %99 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %114, 8
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %4, align 8, !tbaa !1240
  %118 = inttoptr i64 %92 to i32*
  %119 = load i32, i32* %118
  %120 = sext i32 %119 to i64
  store i64 %120, i64* %5, align 8, !tbaa !1240
  %121 = shl nsw i64 %120, 3
  %122 = add i64 %121, %117
  %123 = inttoptr i64 %122 to i64*
  store i64 1, i64* %123
  br label %block_40167f

block_40167f:                                     ; preds = %block_40164e, %block_401658
  %124 = phi %struct.Memory* [ %224, %block_40164e ], [ %224, %block_401658 ]
  br label %block_4017bf

block_401750:                                     ; preds = %block_4016e9
  %125 = inttoptr i64 %100 to i32*
  store i32 %226, i32* %125
  %126 = inttoptr i64 %90 to i32*
  %127 = load i32, i32* %126
  %128 = icmp ne i32 %127, 0
  %129 = select i1 %128, i64 25, i64 16
  %130 = add i64 %175, %129
  br i1 %128, label %block_401769, label %block_401760

block_40164e:                                     ; preds = %block_401638
  store i64 %247, i64* %4, align 8, !tbaa !1240
  store i64 %227, i64* %5, align 8
  %131 = inttoptr i64 %90 to i32*
  %132 = load i32, i32* %131
  store i8 0, i8* %78, align 1, !tbaa !1264
  %133 = and i32 %132, 255
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #10
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* %77, align 1, !tbaa !1278
  store i8 0, i8* %76, align 1, !tbaa !1279
  %138 = icmp eq i32 %132, 0
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %75, align 1, !tbaa !1280
  %140 = lshr i32 %132, 31
  %141 = trunc i32 %140 to i8
  store i8 %141, i8* %74, align 1, !tbaa !1281
  store i8 0, i8* %73, align 1, !tbaa !1282
  br i1 %138, label %block_401658, label %block_40167f

block_40169d:                                     ; preds = %block_401684
  %142 = inttoptr i64 %99 to i64*
  %143 = load i64, i64* %142
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %248, %145
  %147 = inttoptr i64 %146 to i64*
  store i64 %251, i64* %147
  %148 = inttoptr i64 %88 to i64*
  %149 = load i64, i64* %148
  %150 = add i64 %149, 8
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151
  %153 = inttoptr i64 %94 to i32*
  %154 = load i32, i32* %153
  %155 = sext i32 %154 to i64
  %156 = shl nsw i64 %155, 3
  %157 = add i64 %156, %152
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158
  %160 = inttoptr i64 %99 to i64*
  %161 = load i64, i64* %160
  %162 = add i64 %161, 8
  %163 = inttoptr i64 %162 to i64*
  %164 = load i64, i64* %163
  store i64 %155, i64* %6, align 8, !tbaa !1240
  %165 = add i64 %156, %164
  %166 = inttoptr i64 %165 to i64*
  store i64 %159, i64* %166
  %167 = inttoptr i64 %92 to i32*
  %168 = load i32, i32* %167
  %169 = add i32 %168, 1
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %7, align 8, !tbaa !1240
  %171 = add i64 %268, 71
  %172 = inttoptr i64 %92 to i32*
  store i32 %169, i32* %172
  br label %block_4017ac

block_4016e9:                                     ; preds = %block_401684
  %173 = icmp ne i64 %251, %257
  %174 = select i1 %173, i64 103, i64 25
  %175 = add i64 %268, %174
  br i1 %173, label %block_401750, label %block_401702

block_401769:                                     ; preds = %block_401760, %block_401750
  %176 = phi i64 [ %130, %block_401750 ], [ %333, %block_401760 ]
  %177 = phi %struct.Memory* [ %224, %block_401750 ], [ %224, %block_401760 ]
  %178 = inttoptr i64 %88 to i64*
  %179 = load i64, i64* %178
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = inttoptr i64 %94 to i32*
  %183 = load i32, i32* %182
  %184 = sext i32 %183 to i64
  %185 = shl nsw i64 %184, 3
  %186 = add i64 %185, %181
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = inttoptr i64 %99 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = inttoptr i64 %100 to i32*
  %194 = load i32, i32* %193
  %195 = sext i32 %194 to i64
  %196 = shl nsw i64 %195, 3
  %197 = add i64 %196, %192
  %198 = inttoptr i64 %197 to i64*
  store i64 %188, i64* %198
  %199 = inttoptr i64 %88 to i64*
  %200 = load i64, i64* %199
  %201 = add i64 %200, 8
  %202 = inttoptr i64 %201 to i64*
  %203 = load i64, i64* %202
  %204 = inttoptr i64 %94 to i32*
  %205 = load i32, i32* %204
  %206 = sext i32 %205 to i64
  %207 = shl nsw i64 %206, 3
  %208 = add i64 %207, %203
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209
  %211 = inttoptr i64 %99 to i64*
  %212 = load i64, i64* %211
  %213 = add i64 %212, 8
  %214 = inttoptr i64 %213 to i64*
  %215 = load i64, i64* %214
  %216 = inttoptr i64 %100 to i32*
  %217 = load i32, i32* %216
  %218 = sext i32 %217 to i64
  store i64 %218, i64* %6, align 8, !tbaa !1240
  %219 = shl nsw i64 %218, 3
  %220 = add i64 %219, %215
  %221 = add i64 %176, 62
  %222 = inttoptr i64 %220 to i64*
  store i64 %210, i64* %222
  br label %block_4017ac

block_401626:                                     ; preds = %block_4017ac, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit
  %223 = phi i64 [ %96, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ], [ %329, %block_4017ac ]
  %224 = phi %struct.Memory* [ %83, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_.exit ], [ %323, %block_4017ac ]
  %225 = inttoptr i64 %94 to i32*
  %226 = load i32, i32* %225
  %227 = sext i32 %226 to i64
  %228 = inttoptr i64 %88 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %229, 16
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = sub i64 %227, %232
  %234 = lshr i64 %233, 63
  %235 = trunc i64 %234 to i8
  %236 = lshr i64 %227, 63
  %237 = lshr i64 %232, 63
  %238 = xor i64 %237, %236
  %239 = xor i64 %234, %236
  %240 = add nuw nsw i64 %239, %238
  %241 = icmp eq i64 %240, 2
  %242 = icmp ne i8 %235, 0
  %243 = xor i1 %242, %241
  %244 = select i1 %243, i64 18, i64 409
  %245 = add i64 %223, %244
  br i1 %243, label %block_401638, label %block_4017bf.loopexit

block_401638:                                     ; preds = %block_401626
  %246 = inttoptr i64 %229 to i64*
  %247 = load i64, i64* %246
  %248 = shl nsw i64 %227, 3
  %249 = add i64 %248, %247
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = icmp eq i64 %251, 1
  %253 = lshr i64 %251, 63
  %254 = select i1 %252, i64 22, i64 76
  %255 = add i64 %245, %254
  br i1 %252, label %block_40164e, label %block_401684

block_401684:                                     ; preds = %block_401638
  %256 = inttoptr i64 %98 to i64*
  %257 = load i64, i64* %256
  %258 = sub i64 %251, %257
  %259 = lshr i64 %258, 63
  %260 = lshr i64 %257, 63
  %261 = xor i64 %260, %253
  %262 = xor i64 %259, %253
  %263 = add nuw nsw i64 %262, %261
  %264 = icmp eq i64 %263, 2
  %265 = icmp ne i64 %259, 0
  %266 = xor i1 %265, %264
  %267 = select i1 %266, i64 25, i64 101
  %268 = add i64 %255, %267
  br i1 %266, label %block_40169d, label %block_4016e9

block_401702:                                     ; preds = %block_4016e9
  %269 = inttoptr i64 %99 to i64*
  %270 = load i64, i64* %269
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  %273 = add i64 %248, %272
  %274 = inttoptr i64 %273 to i64*
  store i64 %251, i64* %274
  %275 = inttoptr i64 %88 to i64*
  %276 = load i64, i64* %275
  %277 = add i64 %276, 8
  %278 = inttoptr i64 %277 to i64*
  %279 = load i64, i64* %278
  %280 = inttoptr i64 %94 to i32*
  %281 = load i32, i32* %280
  %282 = sext i32 %281 to i64
  %283 = shl nsw i64 %282, 3
  %284 = add i64 %283, %279
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %286, 1
  %288 = inttoptr i64 %99 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  store i64 %282, i64* %6, align 8, !tbaa !1240
  %293 = add i64 %283, %292
  %294 = inttoptr i64 %293 to i64*
  store i64 %287, i64* %294
  %295 = inttoptr i64 %90 to i32*
  store i32 1, i32* %295
  %296 = add i64 %175, 165
  br label %block_4017ac

block_4017bf.loopexit:                            ; preds = %block_401626
  store i64 %227, i64* %4, align 8, !tbaa !1240
  %297 = icmp ult i64 %227, %232
  %298 = zext i1 %297 to i8
  %299 = trunc i64 %233 to i32
  %300 = and i32 %299, 255
  %301 = tail call i32 @llvm.ctpop.i32(i32 %300) #10
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  %304 = xor i8 %303, 1
  %305 = xor i64 %232, %227
  %306 = xor i64 %305, %233
  %307 = lshr i64 %306, 4
  %308 = trunc i64 %307 to i8
  %309 = and i8 %308, 1
  %310 = icmp eq i64 %233, 0
  %311 = zext i1 %310 to i8
  %312 = zext i1 %241 to i8
  store i64 %229, i64* %5, align 8
  store i8 %298, i8* %78, align 1, !tbaa !1264
  store i8 %304, i8* %77, align 1, !tbaa !1278
  store i8 %309, i8* %76, align 1, !tbaa !1279
  store i8 %311, i8* %75, align 1, !tbaa !1280
  store i8 %235, i8* %74, align 1, !tbaa !1281
  store i8 %312, i8* %73, align 1, !tbaa !1282
  br label %block_4017bf

block_4017bf:                                     ; preds = %block_4017bf.loopexit, %block_40167f
  %313 = phi %struct.Memory* [ %124, %block_40167f ], [ %224, %block_4017bf.loopexit ]
  %314 = load i64, i64* %9, align 8, !tbaa !1240
  %315 = add i64 %314, 8
  %316 = inttoptr i64 %314 to i64*
  %317 = load i64, i64* %316
  store i64 %317, i64* %10, align 8, !tbaa !1240
  %318 = inttoptr i64 %315 to i64*
  %319 = load i64, i64* %318
  store i64 %319, i64* %3, align 8, !tbaa !1240
  %320 = add i64 %314, 16
  store i64 %320, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %313

block_4017ac:                                     ; preds = %block_401702, %block_401769, %block_40169d
  %321 = phi i64 [ %171, %block_40169d ], [ %296, %block_401702 ], [ %221, %block_401769 ]
  %322 = phi i64 [ 200, %block_40169d ], [ 5, %block_401702 ], [ 5, %block_401769 ]
  %323 = phi %struct.Memory* [ %224, %block_40169d ], [ %224, %block_401702 ], [ %177, %block_401769 ]
  %324 = add i64 %321, %322
  %325 = inttoptr i64 %94 to i32*
  %326 = load i32, i32* %325
  %327 = add i32 %326, 1
  %328 = inttoptr i64 %94 to i32*
  store i32 %327, i32* %328
  %329 = add i64 %324, -390
  br label %block_401626

block_401760:                                     ; preds = %block_401750
  %330 = inttoptr i64 %94 to i32*
  %331 = load i32, i32* %330
  %332 = add i32 %331, 1
  %333 = add i64 %130, 9
  %334 = inttoptr i64 %100 to i32*
  store i32 %332, i32* %334
  br label %block_401769
}

; Function Attrs: noinline
define %struct.Memory* @sub_407310_InitAdcViewCntl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407310:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %12, align 8, !tbaa !1240
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17
  store i64 %16, i64* %13, align 8, !tbaa !1240
  %18 = add i64 %15, -56
  store i64 %18, i64* %12, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %15, -16
  %26 = load i64, i64* %11, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %15, -20
  %29 = load i32, i32* %7, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = add i64 %15, -32
  %32 = load i64, i64* %10, align 8
  %33 = inttoptr i64 %31 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %15, -36
  %35 = load i32, i32* %5, align 4
  %36 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %36
  %37 = inttoptr i64 %28 to i32*
  %38 = load i32, i32* %37
  %39 = inttoptr i64 %25 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %40, 548
  %42 = inttoptr i64 %41 to i32*
  store i32 %38, i32* %42
  %43 = add i64 %15, -40
  %44 = add i64 %1, 42
  %45 = inttoptr i64 %43 to i32*
  store i32 0, i32* %45
  br label %block_40733a

block_40733a:                                     ; preds = %block_40734d, %block_407310
  %46 = phi i64 [ %44, %block_407310 ], [ %112, %block_40734d ]
  %47 = phi %struct.Memory* [ %2, %block_407310 ], [ %47, %block_40734d ]
  %48 = inttoptr i64 %43 to i32*
  %49 = load i32, i32* %48
  %50 = zext i32 %49 to i64
  %51 = inttoptr i64 %25 to i64*
  %52 = load i64, i64* %51
  %53 = add i64 %52, 540
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54
  %56 = icmp ult i32 %49, %55
  %57 = select i1 %56, i64 19, i64 54
  %58 = add i64 %46, %57
  br i1 %56, label %block_40734d, label %block_407370

block_407377:                                     ; preds = %block_40738a, %block_407370
  %59 = phi i64 [ %128, %block_407370 ], [ %143, %block_40738a ]
  %60 = phi %struct.Memory* [ %47, %block_407370 ], [ %60, %block_40738a ]
  %61 = inttoptr i64 %43 to i32*
  %62 = load i32, i32* %61
  %63 = zext i32 %62 to i64
  %64 = inttoptr i64 %25 to i64*
  %65 = load i64, i64* %64
  %66 = add i64 %65, 548
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67
  %69 = icmp ult i32 %62, %68
  %70 = select i1 %69, i64 19, i64 61
  %71 = add i64 %59, %70
  br i1 %69, label %block_40738a, label %block_4073b4

block_4073b4:                                     ; preds = %block_407377
  %72 = shl i32 %68, 2
  %73 = add i64 %65, 540
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74
  %76 = shl i32 %75, 3
  %77 = add i32 %76, %72
  %78 = load i64, i64* %13, align 8
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  %82 = add i64 %81, 588
  %83 = inttoptr i64 %82 to i32*
  store i32 %77, i32* %83
  %84 = inttoptr i64 %79 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %85, 624
  %87 = inttoptr i64 %86 to i32*
  store i32 0, i32* %87
  %88 = add i64 %78, -28
  %89 = inttoptr i64 %88 to i32*
  %90 = load i32, i32* %89
  %91 = inttoptr i64 %79 to i64*
  %92 = load i64, i64* %91
  %93 = add i64 %92, 4492
  %94 = inttoptr i64 %93 to i32*
  store i32 %90, i32* %94
  %95 = inttoptr i64 %79 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %96, 556
  %98 = inttoptr i64 %97 to i32*
  store i32 0, i32* %98
  %99 = inttoptr i64 %88 to i32*
  %100 = load i32, i32* %99
  %101 = icmp eq i32 %100, 0
  %102 = select i1 %101, i64 166, i64 89
  %103 = add i64 %71, %102
  br i1 %101, label %block_40745a, label %block_40740d

block_40734d:                                     ; preds = %block_40733a
  %104 = shl nuw nsw i64 %50, 3
  %105 = add nuw nsw i64 %104, 4280
  %106 = add i64 %105, %52
  %107 = inttoptr i64 %106 to i64*
  store i64 0, i64* %107
  %108 = inttoptr i64 %43 to i32*
  %109 = load i32, i32* %108
  %110 = add i32 %109, 1
  %111 = inttoptr i64 %43 to i32*
  store i32 %110, i32* %111
  %112 = add i64 %58, -19
  br label %block_40733a

block_40745a:                                     ; preds = %block_4073b4
  %113 = inttoptr i64 %79 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %114, 536
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116
  %118 = add i64 %114, 544
  %119 = inttoptr i64 %118 to i32*
  store i32 %117, i32* %119
  %120 = inttoptr i64 %79 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %121, 552
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123
  %125 = add i64 %121, 4488
  %126 = inttoptr i64 %125 to i32*
  store i32 %124, i32* %126
  br label %block_407482

block_407370:                                     ; preds = %block_40733a
  %127 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %128 = add i64 %58, 7
  %129 = inttoptr i64 %43 to i32*
  store i32 0, i32* %129
  br label %block_407377

block_40738a:                                     ; preds = %block_407377
  %130 = inttoptr i64 %31 to i64*
  %131 = load i64, i64* %130
  %132 = shl nuw nsw i64 %63, 2
  %133 = add i64 %131, %132
  %134 = inttoptr i64 %133 to i32*
  %135 = load i32, i32* %134
  store i64 %63, i64* %127, align 8, !tbaa !1240
  %136 = add nuw nsw i64 %132, 4312
  %137 = add i64 %136, %65
  %138 = inttoptr i64 %137 to i32*
  store i32 %135, i32* %138
  %139 = inttoptr i64 %43 to i32*
  %140 = load i32, i32* %139
  %141 = add i32 %140, 1
  %142 = inttoptr i64 %43 to i32*
  store i32 %141, i32* %142
  %143 = add i64 %71, -19
  br label %block_407377

block_40740d:                                     ; preds = %block_4073b4
  %144 = inttoptr i64 %79 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %145, 4480
  %147 = inttoptr i64 %146 to i32*
  %148 = load i32, i32* %147
  %149 = add i64 %145, 544
  %150 = inttoptr i64 %149 to i32*
  store i32 %148, i32* %150
  %151 = inttoptr i64 %79 to i64*
  %152 = load i64, i64* %151
  %153 = add i64 %152, 4240
  %154 = inttoptr i64 %153 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %11, align 8, !tbaa !1240
  %156 = add i64 %152, 568
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %103, 49
  %160 = load i64, i64* %12, align 8, !tbaa !1240
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162
  store i64 %160, i64* %12, align 8, !alias.scope !3183, !noalias !3186
  %163 = tail call i64 @fseek(i64 %155, i64 %158, i64 0), !noalias !3183
  %164 = load i64, i64* %13, align 8
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  %167 = load i64, i64* %166
  %168 = add i64 %167, 564
  %169 = inttoptr i64 %168 to i32*
  %170 = load i32, i32* %169
  store i64 %167, i64* %127, align 8, !tbaa !1240
  %171 = add i64 %167, 4488
  %172 = inttoptr i64 %171 to i32*
  store i32 %170, i32* %172
  %173 = add i64 %164, -36
  %174 = trunc i64 %163 to i32
  %175 = inttoptr i64 %173 to i32*
  store i32 %174, i32* %175
  br label %block_407482

block_407482:                                     ; preds = %block_40740d, %block_40745a
  %176 = phi i64 [ %78, %block_40745a ], [ %164, %block_40740d ]
  %177 = phi %struct.Memory* [ %60, %block_40745a ], [ %60, %block_40740d ]
  %178 = add i64 %176, -8
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179
  %181 = add i64 %180, 544
  %182 = inttoptr i64 %181 to i32*
  %183 = load i32, i32* %182
  %184 = shl i32 %183, 2
  %185 = add i64 %180, 540
  %186 = inttoptr i64 %185 to i32*
  %187 = load i32, i32* %186
  %188 = shl i32 %187, 3
  %189 = add i32 %188, %184
  %190 = load i64, i64* %13, align 8
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = add i64 %193, 584
  %195 = inttoptr i64 %194 to i32*
  store i32 %189, i32* %195
  %196 = inttoptr i64 %191 to i64*
  %197 = load i64, i64* %196
  %198 = add i64 %197, 548
  %199 = inttoptr i64 %198 to i32*
  %200 = load i32, i32* %199
  %201 = shl i32 %200, 2
  %202 = add i64 %197, 540
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203
  %205 = shl i32 %204, 3
  %206 = zext i32 %205 to i64
  store i64 %206, i64* %10, align 8, !tbaa !1240
  %207 = add i32 %205, %201
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %9, align 8, !tbaa !1240
  %209 = load i64, i64* %13, align 8
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %8, align 8, !tbaa !1240
  %213 = add i64 %212, 588
  %214 = inttoptr i64 %213 to i32*
  store i32 %207, i32* %214
  %215 = load i64, i64* %12, align 8
  %216 = add i64 %215, 48
  %217 = icmp ugt i64 %215, -49
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %19, align 1, !tbaa !1264
  %219 = trunc i64 %216 to i32
  %220 = and i32 %219, 255
  %221 = tail call i32 @llvm.ctpop.i32(i32 %220) #10
  %222 = trunc i32 %221 to i8
  %223 = and i8 %222, 1
  %224 = xor i8 %223, 1
  store i8 %224, i8* %20, align 1, !tbaa !1278
  %225 = xor i64 %215, 16
  %226 = xor i64 %225, %216
  %227 = lshr i64 %226, 4
  %228 = trunc i64 %227 to i8
  %229 = and i8 %228, 1
  store i8 %229, i8* %21, align 1, !tbaa !1279
  %230 = icmp eq i64 %216, 0
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %22, align 1, !tbaa !1280
  %232 = lshr i64 %216, 63
  %233 = trunc i64 %232 to i8
  store i8 %233, i8* %23, align 1, !tbaa !1281
  %234 = lshr i64 %215, 63
  %235 = xor i64 %232, %234
  %236 = add nuw nsw i64 %235, %232
  %237 = icmp eq i64 %236, 2
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %24, align 1, !tbaa !1282
  %239 = add i64 %215, 56
  %240 = inttoptr i64 %216 to i64*
  %241 = load i64, i64* %240
  store i64 %241, i64* %13, align 8, !tbaa !1240
  %242 = inttoptr i64 %239 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %3, align 8, !tbaa !1240
  %244 = add i64 %215, 64
  store i64 %244, i64* %12, align 8, !tbaa !1240
  ret %struct.Memory* %177
}

; Function Attrs: noinline
define %struct.Memory* @sub_402171(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402171:
  %3 = add i64 %1, 30
  %4 = tail call %struct.Memory* @sub_40218f_def_40215B(%struct.State* nonnull %0, i64 %3, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ea0_GenerateADC(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_402ea0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -152
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -24
  %25 = load i64, i64* %10, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %26
  %27 = inttoptr i64 %24 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %28, 4
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30
  %32 = add i64 %14, -28
  %33 = inttoptr i64 %32 to i32*
  store i32 %31, i32* %33
  %34 = inttoptr i64 %24 to i64*
  %35 = load i64, i64* %34
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37
  %39 = add i64 %14, -32
  %40 = inttoptr i64 %39 to i32*
  store i32 %38, i32* %40
  %41 = inttoptr i64 %24 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %42, 16
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = trunc i64 %45 to i32
  %47 = add i64 %14, -36
  %48 = inttoptr i64 %47 to i32*
  store i32 %46, i32* %48
  %49 = add i64 %1, 70
  %50 = load i64, i64* %11, align 8, !tbaa !1240
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %3, align 8, !alias.scope !3188, !noalias !3191
  store i64 %50, i64* %11, align 8, !alias.scope !3188, !noalias !3191
  %55 = tail call i64 @calloc(i64 1024, i64 1)
  %56 = load i64, i64* %3, align 8
  %57 = load i64, i64* %12, align 8
  %58 = add i64 %57, -40
  %59 = inttoptr i64 %58 to i64*
  store i64 %55, i64* %59
  %60 = add i64 %57, -52
  %61 = inttoptr i64 %60 to i32*
  store i32 0, i32* %61
  %62 = add i64 %57, -56
  %63 = inttoptr i64 %62 to i32*
  store i32 0, i32* %63
  %64 = add i64 %57, -64
  %65 = inttoptr i64 %64 to i64*
  store i64 0, i64* %65
  %66 = add i64 %57, -72
  %67 = inttoptr i64 %66 to i64*
  store i64 0, i64* %67
  %68 = inttoptr i64 %58 to i64*
  %69 = load i64, i64* %68
  %70 = add i64 %57, -16
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %72, 32
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = inttoptr i64 %72 to i32*
  %77 = load i32, i32* %76
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %7, align 8, !tbaa !1240
  %79 = add i64 %56, 69
  %80 = load i64, i64* %11, align 8, !tbaa !1240
  %81 = add i64 %80, -8
  %82 = inttoptr i64 %81 to i64*
  store i64 %79, i64* %82
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %86 = load i64, i64* %84, align 8, !alias.scope !3193, !noalias !3196
  %87 = load i64, i64* %85, align 8, !alias.scope !3193, !noalias !3196
  %88 = inttoptr i64 %80 to i64*
  %89 = load i64, i64* %88
  %90 = add i64 %80, 8
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91
  %93 = add i64 %80, 16
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %80, 24
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %80, 32
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %80, 40
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %80, 48
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %80, 56
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  %111 = add i64 %80, 64
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %80, 72
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  %117 = inttoptr i64 %81 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %3, align 8, !alias.scope !3193, !noalias !3196
  store i64 %80, i64* %11, align 8, !alias.scope !3193, !noalias !3196
  %119 = tail call i64 @sprintf(i64 %69, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1460), i64 %75, i64 %78, i64 %86, i64 %87, i64 %89, i64 %92, i64 %95, i64 %98, i64 %101, i64 %104, i64 %107, i64 %110, i64 %113, i64 %116), !noalias !3193
  %120 = load i64, i64* %3, align 8
  %121 = load i64, i64* %12, align 8
  %122 = add i64 %121, -40
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %121, -88
  %126 = trunc i64 %119 to i32
  %127 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %127
  %128 = add i64 %120, 22
  %129 = load i64, i64* %11, align 8, !tbaa !1240
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %3, align 8, !alias.scope !3198, !noalias !3201
  store i64 %129, i64* %11, align 8, !alias.scope !3198, !noalias !3201
  %134 = tail call i64 @fopen(i64 %124, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1470))
  %135 = load i64, i64* %12, align 8
  %136 = add i64 %135, -48
  %137 = load i64, i64* %3, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 %134, i64* %138
  %139 = icmp eq i64 %134, 0
  %140 = select i1 %139, i64 14, i64 58
  %141 = add i64 %137, %140
  br i1 %139, label %block_402f4f, label %block_402f7b

block_4030b8:                                     ; preds = %block_403099
  store i64 %326, i64* %6, align 8, !tbaa !1240
  store i64 %326, i64* %10, align 8, !tbaa !1240
  %142 = add i64 %356, -8776
  %143 = add i64 %356, 12
  %144 = load i64, i64* %11, align 8, !tbaa !1240
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146
  store i64 %145, i64* %11, align 8, !tbaa !1240
  %147 = tail call %struct.Memory* @sub_400e70_swap4(%struct.State* nonnull %0, i64 %142, %struct.Memory* %522)
  %148 = load i64, i64* %3, align 8
  %149 = load i64, i64* %12, align 8
  br label %block_4030c4

block_4030fc:                                     ; preds = %block_40308d
  %150 = add i64 %521, -52
  %151 = inttoptr i64 %150 to i32*
  %152 = load i32, i32* %151
  %153 = add i32 %152, 1
  %154 = inttoptr i64 %150 to i32*
  store i32 %153, i32* %154
  %155 = add i64 %541, -296
  br label %block_402fd4

block_40310f:                                     ; preds = %block_402fd4
  %156 = add i64 %419, -48
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  %159 = add i64 %439, 9
  %160 = load i64, i64* %11, align 8, !tbaa !1240
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162
  %163 = inttoptr i64 %161 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %3, align 8, !alias.scope !3203, !noalias !3206
  store i64 %160, i64* %11, align 8, !alias.scope !3203, !noalias !3206
  %165 = tail call i64 @fclose(i64 %158), !noalias !3203
  %166 = load i64, i64* %3, align 8
  %167 = load i64, i64* @stdout
  %168 = load i64, i64* %12, align 8
  %169 = add i64 %168, -40
  %170 = inttoptr i64 %169 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %8, align 8, !tbaa !1240
  %172 = add i64 %168, -132
  %173 = trunc i64 %165 to i32
  %174 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %174
  %175 = add i64 %166, 35
  %176 = load i64, i64* %11, align 8, !tbaa !1240
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i64*
  store i64 %175, i64* %178
  %179 = load i64, i64* %7, align 8, !alias.scope !3208, !noalias !3211
  %180 = load i64, i64* %84, align 8, !alias.scope !3208, !noalias !3211
  %181 = load i64, i64* %85, align 8, !alias.scope !3208, !noalias !3211
  %182 = inttoptr i64 %176 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %176, 8
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %176, 16
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188
  %190 = add i64 %176, 24
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %176, 32
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %176, 40
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %176, 48
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %176, 56
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203
  %205 = add i64 %176, 64
  %206 = inttoptr i64 %205 to i64*
  %207 = load i64, i64* %206
  %208 = add i64 %176, 72
  %209 = inttoptr i64 %208 to i64*
  %210 = load i64, i64* %209
  %211 = inttoptr i64 %177 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %3, align 8, !alias.scope !3208, !noalias !3211
  store i64 %176, i64* %11, align 8, !alias.scope !3208, !noalias !3211
  %213 = tail call i64 @fprintf(i64 %167, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1580), i64 %171, i64 %179, i64 %180, i64 %181, i64 %183, i64 %186, i64 %189, i64 %192, i64 %195, i64 %198, i64 %201, i64 %204, i64 %207, i64 %210), !noalias !3208
  %214 = load i64, i64* %3, align 8
  %215 = load i64, i64* @stdout
  %216 = load i64, i64* %12, align 8
  %217 = add i64 %216, -136
  %218 = trunc i64 %213 to i32
  %219 = inttoptr i64 %217 to i32*
  store i32 %218, i32* %219
  %220 = add i64 %214, 31
  %221 = load i64, i64* %11, align 8, !tbaa !1240
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %220, i64* %223
  %224 = load i64, i64* %83, align 8, !alias.scope !3213, !noalias !3216
  %225 = load i64, i64* %7, align 8, !alias.scope !3213, !noalias !3216
  %226 = load i64, i64* %84, align 8, !alias.scope !3213, !noalias !3216
  %227 = load i64, i64* %85, align 8, !alias.scope !3213, !noalias !3216
  %228 = inttoptr i64 %221 to i64*
  %229 = load i64, i64* %228
  %230 = add i64 %221, 8
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  %233 = add i64 %221, 16
  %234 = inttoptr i64 %233 to i64*
  %235 = load i64, i64* %234
  %236 = add i64 %221, 24
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %221, 32
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %221, 40
  %243 = inttoptr i64 %242 to i64*
  %244 = load i64, i64* %243
  %245 = add i64 %221, 48
  %246 = inttoptr i64 %245 to i64*
  %247 = load i64, i64* %246
  %248 = add i64 %221, 56
  %249 = inttoptr i64 %248 to i64*
  %250 = load i64, i64* %249
  %251 = add i64 %221, 64
  %252 = inttoptr i64 %251 to i64*
  %253 = load i64, i64* %252
  %254 = add i64 %221, 72
  %255 = inttoptr i64 %254 to i64*
  %256 = load i64, i64* %255
  %257 = inttoptr i64 %222 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %3, align 8, !alias.scope !3213, !noalias !3216
  store i64 %221, i64* %11, align 8, !alias.scope !3213, !noalias !3216
  %259 = tail call i64 @fprintf(i64 %215, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1600), i64 %224, i64 %225, i64 %226, i64 %227, i64 %229, i64 %232, i64 %235, i64 %238, i64 %241, i64 %244, i64 %247, i64 %250, i64 %253, i64 %256), !noalias !3213
  %260 = load i64, i64* %12, align 8
  %261 = add i64 %260, -64
  %262 = load i64, i64* %3, align 8
  %263 = inttoptr i64 %261 to i64*
  %264 = load i64, i64* %263
  %265 = add i64 %260, -140
  %266 = trunc i64 %259 to i32
  %267 = inttoptr i64 %265 to i32*
  store i32 %266, i32* %267
  %268 = add i64 %262, 18
  %269 = load i64, i64* %11, align 8, !tbaa !1240
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272
  store i64 %273, i64* %3, align 8, !alias.scope !3218, !noalias !3221
  store i64 %269, i64* %11, align 8, !alias.scope !3218, !noalias !3221
  %274 = tail call i64 @free(i64 %264), !noalias !3218
  %275 = load i64, i64* %12, align 8
  %276 = add i64 %275, -72
  %277 = load i64, i64* %3, align 8
  %278 = inttoptr i64 %276 to i64*
  %279 = load i64, i64* %278
  %280 = add i64 %277, 12
  %281 = load i64, i64* %11, align 8, !tbaa !1240
  %282 = add i64 %281, -8
  %283 = inttoptr i64 %282 to i64*
  store i64 %280, i64* %283
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %3, align 8, !alias.scope !3223, !noalias !3226
  store i64 %281, i64* %11, align 8, !alias.scope !3223, !noalias !3226
  %286 = tail call i64 @free(i64 %279), !noalias !3223
  %287 = load i64, i64* %12, align 8
  %288 = add i64 %287, -40
  %289 = load i64, i64* %3, align 8
  %290 = inttoptr i64 %288 to i64*
  %291 = load i64, i64* %290
  %292 = add i64 %289, 9
  %293 = load i64, i64* %11, align 8, !tbaa !1240
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %295
  %296 = inttoptr i64 %294 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %3, align 8, !alias.scope !3228, !noalias !3231
  store i64 %293, i64* %11, align 8, !alias.scope !3228, !noalias !3231
  %298 = tail call i64 @free(i64 %291), !noalias !3228
  %299 = load i64, i64* %12, align 8
  %300 = add i64 %299, -16
  %301 = load i64, i64* %3, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302
  store i64 %303, i64* %10, align 8, !tbaa !1240
  %304 = add i64 %301, -5249
  %305 = add i64 %301, 9
  %306 = load i64, i64* %11, align 8, !tbaa !1240
  %307 = add i64 %306, -8
  %308 = inttoptr i64 %307 to i64*
  store i64 %305, i64* %308
  store i64 %307, i64* %11, align 8, !tbaa !1240
  %309 = tail call %struct.Memory* @sub_401d00_CalculateVeiwSizes(%struct.State* nonnull %0, i64 %304, %struct.Memory* %420)
  %310 = load i64, i64* %12, align 8
  %311 = add i64 %310, -4
  %312 = inttoptr i64 %311 to i32*
  store i32 1, i32* %312
  %313 = add i64 %310, -144
  %314 = load i32, i32* %5, align 4
  %315 = inttoptr i64 %313 to i32*
  store i32 %314, i32* %315
  br label %block_403197

block_403099:                                     ; preds = %block_40308d
  %316 = add i64 %521, -64
  %317 = inttoptr i64 %316 to i64*
  %318 = load i64, i64* %317
  %319 = sext i32 %525 to i64
  store i64 %319, i64* %7, align 8, !tbaa !1240
  %320 = shl nsw i64 %319, 3
  %321 = add i64 %320, %318
  %322 = inttoptr i64 %321 to i64*
  %323 = load i64, i64* %322
  %324 = trunc i64 %323 to i32
  %325 = and i64 %323, 4294967295
  store i64 %325, i64* %8, align 8, !tbaa !1240
  %326 = add i64 %521, -84
  %327 = inttoptr i64 %326 to i32*
  store i32 %324, i32* %327
  %328 = add i64 %521, -16
  %329 = inttoptr i64 %328 to i64*
  %330 = load i64, i64* %329
  %331 = add i64 %330, 24
  %332 = inttoptr i64 %331 to i32*
  %333 = load i32, i32* %332
  %334 = add i32 %333, -1
  %335 = icmp eq i32 %333, 0
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %18, align 1, !tbaa !1264
  %337 = and i32 %334, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #10
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %19, align 1, !tbaa !1278
  %342 = xor i32 %334, %333
  %343 = lshr i32 %342, 4
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  store i8 %345, i8* %20, align 1, !tbaa !1279
  %346 = icmp eq i32 %334, 0
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %21, align 1, !tbaa !1280
  %348 = lshr i32 %334, 31
  %349 = trunc i32 %348 to i8
  store i8 %349, i8* %22, align 1, !tbaa !1281
  %350 = lshr i32 %333, 31
  %351 = xor i32 %348, %350
  %352 = add nuw nsw i32 %351, %350
  %353 = icmp eq i32 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %23, align 1, !tbaa !1282
  %355 = select i1 %346, i64 31, i64 43
  %356 = add i64 %541, %355
  br i1 %346, label %block_4030b8, label %block_4030c4

block_403024:                                     ; preds = %block_403018
  %357 = add i64 %397, -72
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  %360 = sext i32 %401 to i64
  store i64 %360, i64* %7, align 8, !tbaa !1240
  %361 = shl nsw i64 %360, 3
  %362 = add i64 %361, %359
  %363 = inttoptr i64 %362 to i64*
  %364 = load i64, i64* %363
  %365 = add i64 %397, -80
  %366 = inttoptr i64 %365 to i64*
  store i64 %364, i64* %366
  %367 = add i64 %397, -16
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = add i64 %369, 24
  %371 = inttoptr i64 %370 to i32*
  %372 = load i32, i32* %371
  %373 = add i32 %372, -1
  %374 = icmp eq i32 %372, 0
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %18, align 1, !tbaa !1264
  %376 = and i32 %373, 255
  %377 = tail call i32 @llvm.ctpop.i32(i32 %376) #10
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  store i8 %380, i8* %19, align 1, !tbaa !1278
  %381 = xor i32 %373, %372
  %382 = lshr i32 %381, 4
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  store i8 %384, i8* %20, align 1, !tbaa !1279
  %385 = icmp eq i32 %373, 0
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %21, align 1, !tbaa !1280
  %387 = lshr i32 %373, 31
  %388 = trunc i32 %387 to i8
  store i8 %388, i8* %22, align 1, !tbaa !1281
  %389 = lshr i32 %372, 31
  %390 = xor i32 %387, %389
  %391 = add nuw nsw i32 %390, %389
  %392 = icmp eq i32 %391, 2
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %23, align 1, !tbaa !1282
  %394 = select i1 %385, i64 30, i64 42
  %395 = add i64 %417, %394
  br i1 %385, label %block_403042, label %block_40304e

block_403018:                                     ; preds = %block_40304e, %block_403011
  %396 = phi i64 [ %441, %block_403011 ], [ %519, %block_40304e ]
  %397 = phi i64 [ %707, %block_403011 ], [ %510, %block_40304e ]
  %398 = phi %struct.Memory* [ %701, %block_403011 ], [ %494, %block_40304e ]
  %399 = add i64 %397, -56
  %400 = inttoptr i64 %399 to i32*
  %401 = load i32, i32* %400
  %402 = add i64 %397, -24
  %403 = inttoptr i64 %402 to i32*
  %404 = load i32, i32* %403
  %405 = sub i32 %401, %404
  %406 = lshr i32 %405, 31
  %407 = trunc i32 %406 to i8
  %408 = lshr i32 %401, 31
  %409 = lshr i32 %404, 31
  %410 = xor i32 %409, %408
  %411 = xor i32 %406, %408
  %412 = add nuw nsw i32 %411, %410
  %413 = icmp eq i32 %412, 2
  %414 = icmp ne i8 %407, 0
  %415 = xor i1 %414, %413
  %416 = select i1 %415, i64 12, i64 110
  %417 = add i64 %396, %416
  br i1 %415, label %block_403024, label %block_403086

block_402fd4:                                     ; preds = %block_402f7b, %block_4030fc
  %418 = phi i64 [ %664, %block_402f7b ], [ %155, %block_4030fc ]
  %419 = phi i64 [ %658, %block_402f7b ], [ %521, %block_4030fc ]
  %420 = phi %struct.Memory* [ %2, %block_402f7b ], [ %522, %block_4030fc ]
  %421 = add i64 %419, -52
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422
  %424 = add i64 %419, -28
  %425 = inttoptr i64 %424 to i32*
  %426 = load i32, i32* %425
  %427 = sub i32 %423, %426
  %428 = lshr i32 %427, 31
  %429 = trunc i32 %428 to i8
  %430 = lshr i32 %423, 31
  %431 = lshr i32 %426, 31
  %432 = xor i32 %431, %430
  %433 = xor i32 %428, %430
  %434 = add nuw nsw i32 %433, %432
  %435 = icmp eq i32 %434, 2
  %436 = icmp ne i8 %429, 0
  %437 = xor i1 %436, %435
  %438 = select i1 %437, i64 12, i64 315
  %439 = add i64 %418, %438
  br i1 %437, label %block_402fe0, label %block_40310f

block_403011:                                     ; preds = %block_402fe0
  %440 = add i64 %707, -56
  %441 = add i64 %706, 7
  %442 = inttoptr i64 %440 to i32*
  store i32 0, i32* %442
  br label %block_403018

block_402f4f:                                     ; preds = %block_402ea0
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1474), i64* %9, align 8, !tbaa !1240
  %443 = load i64, i64* @stderr
  store i64 %443, i64* %10, align 8, !tbaa !1240
  %444 = add i64 %135, -40
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %8, align 8, !tbaa !1240
  %447 = add i64 %141, 29
  %448 = load i64, i64* %11, align 8, !tbaa !1240
  %449 = add i64 %448, -8
  %450 = inttoptr i64 %449 to i64*
  store i64 %447, i64* %450
  %451 = load i64, i64* %7, align 8, !alias.scope !3233, !noalias !3236
  %452 = load i64, i64* %84, align 8, !alias.scope !3233, !noalias !3236
  %453 = load i64, i64* %85, align 8, !alias.scope !3233, !noalias !3236
  %454 = inttoptr i64 %448 to i64*
  %455 = load i64, i64* %454
  %456 = add i64 %448, 8
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %448, 16
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  %462 = add i64 %448, 24
  %463 = inttoptr i64 %462 to i64*
  %464 = load i64, i64* %463
  %465 = add i64 %448, 32
  %466 = inttoptr i64 %465 to i64*
  %467 = load i64, i64* %466
  %468 = add i64 %448, 40
  %469 = inttoptr i64 %468 to i64*
  %470 = load i64, i64* %469
  %471 = add i64 %448, 48
  %472 = inttoptr i64 %471 to i64*
  %473 = load i64, i64* %472
  %474 = add i64 %448, 56
  %475 = inttoptr i64 %474 to i64*
  %476 = load i64, i64* %475
  %477 = add i64 %448, 64
  %478 = inttoptr i64 %477 to i64*
  %479 = load i64, i64* %478
  %480 = add i64 %448, 72
  %481 = inttoptr i64 %480 to i64*
  %482 = load i64, i64* %481
  %483 = inttoptr i64 %449 to i64*
  %484 = load i64, i64* %483
  store i64 %484, i64* %3, align 8, !alias.scope !3233, !noalias !3236
  store i64 %448, i64* %11, align 8, !alias.scope !3233, !noalias !3236
  %485 = tail call i64 @fprintf(i64 %443, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1474), i64 %446, i64 %451, i64 %452, i64 %453, i64 %455, i64 %458, i64 %461, i64 %464, i64 %467, i64 %470, i64 %473, i64 %476, i64 %479, i64 %482), !noalias !3233
  %486 = load i64, i64* %12, align 8
  %487 = add i64 %486, -4
  %488 = inttoptr i64 %487 to i32*
  store i32 0, i32* %488
  %489 = add i64 %486, -92
  %490 = trunc i64 %485 to i32
  %491 = inttoptr i64 %489 to i32*
  store i32 %490, i32* %491
  br label %block_403197

block_40304e:                                     ; preds = %block_403042, %block_403024
  %492 = phi i64 [ %397, %block_403024 ], [ %673, %block_403042 ]
  %493 = phi i64 [ %395, %block_403024 ], [ %672, %block_403042 ]
  %494 = phi %struct.Memory* [ %398, %block_403024 ], [ %671, %block_403042 ]
  store i64 8, i64* %9, align 8, !tbaa !1240
  store i64 1, i64* %8, align 8, !tbaa !1240
  %495 = add i64 %492, -80
  %496 = add i64 %492, -48
  %497 = inttoptr i64 %496 to i64*
  %498 = load i64, i64* %497
  %499 = add i64 %492, -104
  %500 = inttoptr i64 %499 to i64*
  store i64 %498, i64* %500
  %501 = inttoptr i64 %499 to i64*
  %502 = load i64, i64* %501
  store i64 %502, i64* %7, align 8, !tbaa !1240
  %503 = add i64 %493, 38
  %504 = load i64, i64* %11, align 8, !tbaa !1240
  %505 = add i64 %504, -8
  %506 = inttoptr i64 %505 to i64*
  store i64 %503, i64* %506
  %507 = inttoptr i64 %505 to i64*
  %508 = load i64, i64* %507
  store i64 %508, i64* %3, align 8, !alias.scope !3238, !noalias !3241
  store i64 %504, i64* %11, align 8, !alias.scope !3238, !noalias !3241
  %509 = tail call i64 @fwrite(i64 %495, i64 8, i64 1, i64 %502)
  %510 = load i64, i64* %12, align 8
  %511 = add i64 %510, -112
  %512 = load i64, i64* %3, align 8
  %513 = inttoptr i64 %511 to i64*
  store i64 %509, i64* %513
  %514 = add i64 %510, -56
  %515 = inttoptr i64 %514 to i32*
  %516 = load i32, i32* %515
  %517 = add i32 %516, 1
  %518 = inttoptr i64 %514 to i32*
  store i32 %517, i32* %518
  %519 = add i64 %512, -92
  br label %block_403018

block_40308d:                                     ; preds = %block_4030c4, %block_403086
  %520 = phi i64 [ %542, %block_403086 ], [ %571, %block_4030c4 ]
  %521 = phi i64 [ %397, %block_403086 ], [ %562, %block_4030c4 ]
  %522 = phi %struct.Memory* [ %398, %block_403086 ], [ %546, %block_4030c4 ]
  %523 = add i64 %521, -56
  %524 = inttoptr i64 %523 to i32*
  %525 = load i32, i32* %524
  %526 = add i64 %521, -20
  %527 = inttoptr i64 %526 to i32*
  %528 = load i32, i32* %527
  %529 = sub i32 %525, %528
  %530 = lshr i32 %529, 31
  %531 = trunc i32 %530 to i8
  %532 = lshr i32 %525, 31
  %533 = lshr i32 %528, 31
  %534 = xor i32 %533, %532
  %535 = xor i32 %530, %532
  %536 = add nuw nsw i32 %535, %534
  %537 = icmp eq i32 %536, 2
  %538 = icmp ne i8 %531, 0
  %539 = xor i1 %538, %537
  %540 = select i1 %539, i64 12, i64 111
  %541 = add i64 %520, %540
  br i1 %539, label %block_403099, label %block_4030fc

block_403086:                                     ; preds = %block_403018
  %542 = add i64 %417, 7
  %543 = inttoptr i64 %399 to i32*
  store i32 0, i32* %543
  br label %block_40308d

block_4030c4:                                     ; preds = %block_403099, %block_4030b8
  %544 = phi i64 [ %521, %block_403099 ], [ %149, %block_4030b8 ]
  %545 = phi i64 [ %356, %block_403099 ], [ %148, %block_4030b8 ]
  %546 = phi %struct.Memory* [ %522, %block_403099 ], [ %147, %block_4030b8 ]
  store i64 4, i64* %9, align 8, !tbaa !1240
  %547 = add i64 %544, -84
  %548 = add i64 %544, -48
  %549 = inttoptr i64 %548 to i64*
  %550 = load i64, i64* %549
  %551 = add i64 %544, -120
  %552 = inttoptr i64 %551 to i64*
  store i64 %550, i64* %552
  %553 = inttoptr i64 %551 to i64*
  %554 = load i64, i64* %553
  store i64 %554, i64* %7, align 8, !tbaa !1240
  %555 = add i64 %545, 38
  %556 = load i64, i64* %11, align 8, !tbaa !1240
  %557 = add i64 %556, -8
  %558 = inttoptr i64 %557 to i64*
  store i64 %555, i64* %558
  %559 = inttoptr i64 %557 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %3, align 8, !alias.scope !3243, !noalias !3246
  store i64 %556, i64* %11, align 8, !alias.scope !3243, !noalias !3246
  %561 = tail call i64 @fwrite(i64 %547, i64 4, i64 1, i64 %554)
  %562 = load i64, i64* %12, align 8
  %563 = add i64 %562, -128
  %564 = load i64, i64* %3, align 8
  %565 = inttoptr i64 %563 to i64*
  store i64 %561, i64* %565
  %566 = add i64 %562, -56
  %567 = inttoptr i64 %566 to i32*
  %568 = load i32, i32* %567
  %569 = add i32 %568, 1
  %570 = inttoptr i64 %566 to i32*
  store i32 %569, i32* %570
  %571 = add i64 %564, -93
  br label %block_40308d

block_403005:                                     ; preds = %block_402fe0
  %572 = add i64 %707, -4
  %573 = inttoptr i64 %572 to i32*
  store i32 0, i32* %573
  br label %block_403197

block_402f7b:                                     ; preds = %block_402ea0
  %574 = add i64 %135, -20
  %575 = inttoptr i64 %574 to i32*
  %576 = load i32, i32* %575
  %577 = sext i32 %576 to i64
  %578 = shl nsw i64 %577, 3
  %579 = add i64 %141, 16
  %580 = load i64, i64* %11, align 8, !tbaa !1240
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %579, i64* %582
  %583 = inttoptr i64 %581 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %3, align 8, !alias.scope !3248, !noalias !3251
  store i64 %580, i64* %11, align 8, !alias.scope !3248, !noalias !3251
  %585 = tail call i64 @malloc(i64 %578)
  %586 = load i64, i64* %12, align 8
  %587 = add i64 %586, -64
  %588 = load i64, i64* %3, align 8
  %589 = inttoptr i64 %587 to i64*
  store i64 %585, i64* %589
  %590 = add i64 %586, -24
  %591 = inttoptr i64 %590 to i32*
  %592 = load i32, i32* %591
  %593 = sext i32 %592 to i64
  %594 = shl nsw i64 %593, 3
  %595 = add i64 %588, 20
  %596 = load i64, i64* %11, align 8, !tbaa !1240
  %597 = add i64 %596, -8
  %598 = inttoptr i64 %597 to i64*
  store i64 %595, i64* %598
  %599 = inttoptr i64 %597 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %3, align 8, !alias.scope !3253, !noalias !3256
  store i64 %596, i64* %11, align 8, !alias.scope !3253, !noalias !3256
  %601 = tail call i64 @malloc(i64 %594)
  %602 = load i64, i64* %3, align 8
  %603 = load i64, i64* %12, align 8
  %604 = add i64 %603, -72
  %605 = inttoptr i64 %604 to i64*
  store i64 %601, i64* %605
  %606 = load i64, i64* @stdout
  %607 = add i64 %603, -28
  %608 = inttoptr i64 %607 to i32*
  %609 = load i32, i32* %608
  %610 = zext i32 %609 to i64
  %611 = add i64 %603, -20
  %612 = inttoptr i64 %611 to i32*
  %613 = load i32, i32* %612
  %614 = zext i32 %613 to i64
  store i64 %614, i64* %7, align 8, !tbaa !1240
  %615 = add i64 %603, -24
  %616 = inttoptr i64 %615 to i32*
  %617 = load i32, i32* %616
  %618 = zext i32 %617 to i64
  store i64 %618, i64* %84, align 8, !tbaa !1240
  %619 = add i64 %603, -40
  %620 = inttoptr i64 %619 to i64*
  %621 = load i64, i64* %620
  store i64 %621, i64* %85, align 8, !tbaa !1240
  %622 = add i64 %602, 43
  %623 = load i64, i64* %11, align 8, !tbaa !1240
  %624 = add i64 %623, -8
  %625 = inttoptr i64 %624 to i64*
  store i64 %622, i64* %625
  %626 = inttoptr i64 %623 to i64*
  %627 = load i64, i64* %626
  %628 = add i64 %623, 8
  %629 = inttoptr i64 %628 to i64*
  %630 = load i64, i64* %629
  %631 = add i64 %623, 16
  %632 = inttoptr i64 %631 to i64*
  %633 = load i64, i64* %632
  %634 = add i64 %623, 24
  %635 = inttoptr i64 %634 to i64*
  %636 = load i64, i64* %635
  %637 = add i64 %623, 32
  %638 = inttoptr i64 %637 to i64*
  %639 = load i64, i64* %638
  %640 = add i64 %623, 40
  %641 = inttoptr i64 %640 to i64*
  %642 = load i64, i64* %641
  %643 = add i64 %623, 48
  %644 = inttoptr i64 %643 to i64*
  %645 = load i64, i64* %644
  %646 = add i64 %623, 56
  %647 = inttoptr i64 %646 to i64*
  %648 = load i64, i64* %647
  %649 = add i64 %623, 64
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %623, 72
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = inttoptr i64 %624 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %3, align 8, !alias.scope !3258, !noalias !3261
  store i64 %623, i64* %11, align 8, !alias.scope !3258, !noalias !3261
  %657 = tail call i64 @fprintf(i64 %606, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1508), i64 %610, i64 %614, i64 %618, i64 %621, i64 %627, i64 %630, i64 %633, i64 %636, i64 %639, i64 %642, i64 %645, i64 %648, i64 %651, i64 %654), !noalias !3258
  %658 = load i64, i64* %12, align 8
  %659 = add i64 %658, -52
  %660 = load i64, i64* %3, align 8
  %661 = inttoptr i64 %659 to i32*
  store i32 0, i32* %661
  %662 = add i64 %658, -96
  %663 = trunc i64 %657 to i32
  %664 = add i64 %660, 10
  %665 = inttoptr i64 %662 to i32*
  store i32 %663, i32* %665
  br label %block_402fd4

block_403042:                                     ; preds = %block_403024
  store i64 %365, i64* %6, align 8, !tbaa !1240
  store i64 %365, i64* %10, align 8, !tbaa !1240
  %666 = add i64 %395, -8562
  %667 = add i64 %395, 12
  %668 = load i64, i64* %11, align 8, !tbaa !1240
  %669 = add i64 %668, -8
  %670 = inttoptr i64 %669 to i64*
  store i64 %667, i64* %670
  store i64 %669, i64* %11, align 8, !tbaa !1240
  %671 = tail call %struct.Memory* @sub_400ed0_swap8(%struct.State* nonnull %0, i64 %666, %struct.Memory* %398)
  %672 = load i64, i64* %3, align 8
  %673 = load i64, i64* %12, align 8
  br label %block_40304e

block_402fe0:                                     ; preds = %block_402fd4
  %674 = add i64 %419, -20
  %675 = inttoptr i64 %674 to i32*
  %676 = load i32, i32* %675
  %677 = zext i32 %676 to i64
  store i64 %677, i64* %10, align 8, !tbaa !1240
  %678 = add i64 %419, -24
  %679 = inttoptr i64 %678 to i32*
  %680 = load i32, i32* %679
  %681 = zext i32 %680 to i64
  store i64 %681, i64* %9, align 8, !tbaa !1240
  %682 = add i64 %419, -64
  %683 = inttoptr i64 %682 to i64*
  %684 = load i64, i64* %683
  store i64 %684, i64* %8, align 8, !tbaa !1240
  %685 = add i64 %419, -72
  %686 = inttoptr i64 %685 to i64*
  %687 = load i64, i64* %686
  store i64 %687, i64* %7, align 8, !tbaa !1240
  %688 = add i64 %419, -16
  %689 = inttoptr i64 %688 to i64*
  %690 = load i64, i64* %689
  %691 = add i64 %690, 40
  %692 = inttoptr i64 %691 to i8*
  %693 = load i8, i8* %692
  %694 = sext i8 %693 to i64
  %695 = and i64 %694, 4294967295
  store i64 %695, i64* %84, align 8, !tbaa !1240
  %696 = add i64 %439, -1376
  %697 = add i64 %439, 28
  %698 = load i64, i64* %11, align 8, !tbaa !1240
  %699 = add i64 %698, -8
  %700 = inttoptr i64 %699 to i64*
  store i64 %697, i64* %700
  store i64 %699, i64* %11, align 8, !tbaa !1240
  %701 = tail call %struct.Memory* @sub_402a80_GetNextTuple(%struct.State* nonnull %0, i64 %696, %struct.Memory* %420)
  %702 = load i32, i32* %5, align 4
  %703 = load i64, i64* %3, align 8
  %704 = icmp eq i32 %702, 0
  %705 = select i1 %704, i64 9, i64 21
  %706 = add i64 %703, %705
  %707 = load i64, i64* %12, align 8
  br i1 %704, label %block_403005, label %block_403011

block_403197:                                     ; preds = %block_403005, %block_402f4f, %block_40310f
  %708 = phi i64 [ %310, %block_40310f ], [ %707, %block_403005 ], [ %486, %block_402f4f ]
  %709 = phi %struct.Memory* [ %309, %block_40310f ], [ %701, %block_403005 ], [ %2, %block_402f4f ]
  %710 = add i64 %708, -4
  %711 = inttoptr i64 %710 to i32*
  %712 = load i32, i32* %711
  %713 = zext i32 %712 to i64
  store i64 %713, i64* %6, align 8, !tbaa !1240
  %714 = load i64, i64* %11, align 8
  %715 = add i64 %714, 144
  %716 = icmp ugt i64 %714, -145
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %18, align 1, !tbaa !1264
  %718 = trunc i64 %715 to i32
  %719 = and i32 %718, 255
  %720 = tail call i32 @llvm.ctpop.i32(i32 %719) #10
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  store i8 %723, i8* %19, align 1, !tbaa !1278
  %724 = xor i64 %714, 16
  %725 = xor i64 %724, %715
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  store i8 %728, i8* %20, align 1, !tbaa !1279
  %729 = icmp eq i64 %715, 0
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %21, align 1, !tbaa !1280
  %731 = lshr i64 %715, 63
  %732 = trunc i64 %731 to i8
  store i8 %732, i8* %22, align 1, !tbaa !1281
  %733 = lshr i64 %714, 63
  %734 = xor i64 %731, %733
  %735 = add nuw nsw i64 %734, %731
  %736 = icmp eq i64 %735, 2
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %23, align 1, !tbaa !1282
  %738 = add i64 %714, 152
  %739 = inttoptr i64 %715 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %12, align 8, !tbaa !1240
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741
  store i64 %742, i64* %3, align 8, !tbaa !1240
  %743 = add i64 %714, 160
  store i64 %743, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %709
}

; Function Attrs: noinline
define %struct.Memory* @sub_407940_ViewSizesVerification(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_407940:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* %11, align 8, !tbaa !1240
  %16 = add i64 %13, -88
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %23 = add i64 %13, -24
  %24 = load i64, i64* %9, align 8
  %25 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %25
  %26 = inttoptr i64 %23 to i64*
  %27 = load i64, i64* %26
  %28 = add i64 %27, 600
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* bitcast (%viewCounts_type* @viewCounts to i64*)
  %31 = add i64 %1, 42
  store i32 0, i32* bitcast (%i_type* @i to i32*)
  br label %block_40796a

block_40796a:                                     ; preds = %block_407981, %block_407940
  %32 = phi i64 [ %31, %block_407940 ], [ %705, %block_407981 ]
  %33 = phi %struct.Memory* [ %2, %block_407940 ], [ %33, %block_407981 ]
  %34 = load i32, i32* bitcast (%i_type* @i to i32*)
  %35 = zext i32 %34 to i64
  %36 = inttoptr i64 %23 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %37, 4472
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39
  %41 = icmp ule i32 %34, %40
  %42 = select i1 %41, i64 23, i64 69
  %43 = add i64 %32, %42
  br i1 %41, label %block_407981, label %block_4079af

block_407a64:                                     ; preds = %block_407a41
  %44 = add i64 %161, 19
  %45 = load i64, i64* %10, align 8, !tbaa !1240
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47
  %48 = inttoptr i64 %46 to i64*
  %49 = load i64, i64* %48
  store i64 %49, i64* %3, align 8, !alias.scope !3263, !noalias !3266
  store i64 %45, i64* %10, align 8, !alias.scope !3263, !noalias !3266
  %50 = tail call i64 @strcmp(i64 zext (i32 trunc (i64 and (i64 ptrtoint (%inps_type* @inps to i64), i64 4294967295) to i32) to i64), i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 886), i64 4294967295) to i32) to i64)), !noalias !3263
  %51 = trunc i64 %50 to i32
  %52 = load i64, i64* %3, align 8
  %53 = icmp eq i32 %51, 0
  %54 = select i1 %53, i64 9, i64 137
  %55 = add i64 %52, %54
  br i1 %53, label %block_407a80, label %block_407b00

block_4079e1:                                     ; preds = %block_407a16, %block_4079af
  %56 = phi i64 [ %472, %block_4079af ], [ %642, %block_407a16 ]
  %57 = phi i64 [ %476, %block_4079af ], [ %641, %block_407a16 ]
  %58 = phi %struct.Memory* [ %33, %block_4079af ], [ %58, %block_407a16 ]
  %59 = add i64 %56, -16
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60
  %62 = add i64 %61, 4272
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = add i64 %57, 43
  %66 = load i64, i64* %10, align 8, !tbaa !1240
  %67 = add i64 %66, -8
  %68 = inttoptr i64 %67 to i64*
  store i64 %65, i64* %68
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69
  store i64 %70, i64* %3, align 8, !alias.scope !3268, !noalias !3271
  store i64 %66, i64* %10, align 8, !alias.scope !3268, !noalias !3271
  %71 = tail call i64 @fread(i64 ptrtoint (%selection_viewSize_type* @selection_viewSize to i64), i64 8, i64 1, i64 %64)
  %72 = load i64, i64* %3, align 8
  %73 = icmp eq i64 %71, 0
  %74 = select i1 %73, i64 42, i64 10
  %75 = add i64 %72, %74
  br i1 %73, label %block_407a36, label %block_407a16

block_407c4c:                                     ; preds = %block_407c28
  %76 = add i64 %301, 4224
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %9, align 8, !tbaa !1240
  %79 = zext i32 %629 to i64
  store i64 %79, i64* %8, align 8, !tbaa !1240
  store i64 %132, i64* %443, align 8, !tbaa !1240
  store i64 %628, i64* %7, align 8, !tbaa !1240
  %80 = add i64 %308, 57
  %81 = load i64, i64* %10, align 8, !tbaa !1240
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %707, align 8, !alias.scope !3273, !noalias !3276
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85
  %87 = add i64 %81, 8
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88
  %90 = add i64 %81, 16
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91
  %93 = add i64 %81, 24
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %81, 32
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %81, 40
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %81, 48
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %81, 56
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %81, 64
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  %111 = add i64 %81, 72
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = inttoptr i64 %82 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %3, align 8, !alias.scope !3273, !noalias !3276
  store i64 %81, i64* %10, align 8, !alias.scope !3273, !noalias !3276
  %116 = tail call i64 @fprintf(i64 %78, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4938), i64 %79, i64 %628, i64 %132, i64 %84, i64 %86, i64 %89, i64 %92, i64 %95, i64 %98, i64 %101, i64 %104, i64 %107, i64 %110, i64 %113), !noalias !3273
  %117 = load i64, i64* %11, align 8
  %118 = add i64 %117, -16
  %119 = inttoptr i64 %118 to i64*
  %120 = load i64, i64* %119
  store i64 %120, i64* %442, align 8, !tbaa !1240
  %121 = add i64 %120, 516
  %122 = inttoptr i64 %121 to i32*
  store i32 1, i32* %122
  %123 = add i64 %117, -4
  %124 = inttoptr i64 %123 to i32*
  store i32 7, i32* %124
  %125 = add i64 %117, -36
  %126 = trunc i64 %116 to i32
  %127 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %127
  br label %block_407db2

block_407bec:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %block_407bde
  %128 = phi i64 [ %615, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %310, %block_407bde ]
  %129 = phi %struct.Memory* [ %580, %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %580, %block_407bde ]
  %130 = load i64, i64* bitcast (%viewCounts_type* @viewCounts to i64*)
  %131 = load i32, i32* bitcast (%iTx_type* @iTx to i32*)
  %132 = zext i32 %131 to i64
  %133 = shl nuw nsw i64 %132, 2
  %134 = add i64 %130, %133
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135
  %137 = icmp eq i32 %136, 0
  %138 = select i1 %137, i64 192, i64 27
  %139 = add i64 %128, %138
  br i1 %137, label %block_407cac, label %block_407c07

block_407ac4:                                     ; preds = %block_407aa8
  %140 = add i64 %492, 55
  br label %block_407afb

block_407a41:                                     ; preds = %block_407a36, %block_407cb7
  %141 = phi i64 [ %706, %block_407a36 ], [ %429, %block_407cb7 ]
  %142 = phi %struct.Memory* [ %58, %block_407a36 ], [ %428, %block_407cb7 ]
  store i64 ptrtoint (%inps_type* @inps to i64), i64* %442, align 8, !tbaa !1240
  %143 = load i64, i64* %11, align 8
  %144 = add i64 %143, -16
  %145 = inttoptr i64 %144 to i64*
  %146 = load i64, i64* %145
  %147 = add i64 %146, 4264
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %9, align 8, !tbaa !1240
  %150 = add i64 %141, -465
  %151 = add i64 %141, 26
  %152 = load i64, i64* %10, align 8, !tbaa !1240
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154
  store i64 %153, i64* %10, align 8, !tbaa !1240
  %155 = tail call %struct.Memory* @sub_407870_fake_fscanf(%struct.State* nonnull %0, i64 %150, %struct.Memory* %142)
  %156 = load i32, i32* %5, align 4
  %157 = load i64, i64* %3, align 8
  %158 = add i32 %156, 1
  %159 = icmp eq i32 %158, 0
  %160 = select i1 %159, i64 609, i64 9
  %161 = add i64 %157, %160
  br i1 %159, label %block_407cbc, label %block_407a64

block_407ac9:                                     ; preds = %block_407aa8
  %162 = add i64 %492, 15
  %163 = load i64, i64* %10, align 8, !tbaa !1240
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %3, align 8, !alias.scope !3278, !noalias !3281
  store i64 %163, i64* %10, align 8, !alias.scope !3278, !noalias !3281
  %168 = tail call i64 @atoi(i64 ptrtoint (%inps_type* @inps to i64)), !noalias !3278
  %169 = load i64, i64* %3, align 8
  %170 = load i32, i32* bitcast (%k_type* @k to i32*)
  %171 = zext i32 %170 to i64
  %172 = add i32 %170, 1
  store i32 %172, i32* bitcast (%k_type* @k to i32*)
  %173 = shl nuw nsw i64 %171, 2
  %174 = add i64 %173, ptrtoint (%sel_type* @sel to i64)
  %175 = trunc i64 %168 to i32
  %176 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %176
  %177 = add i64 %169, -83
  br label %block_407a85

block_407d3e:                                     ; preds = %block_407d0b, %block_407d27
  %178 = phi i64 [ %437, %block_407d27 ], [ %623, %block_407d0b ]
  %179 = phi i64 [ %440, %block_407d27 ], [ %627, %block_407d0b ]
  %180 = phi %struct.Memory* [ %155, %block_407d27 ], [ %155, %block_407d0b ]
  store i64 0, i64* %8, align 8, !tbaa !1240
  %181 = add i64 %178, -16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %183, 4224
  %185 = inttoptr i64 %184 to i64*
  %186 = load i64, i64* %185
  %187 = add i64 %179, 22
  %188 = load i64, i64* %10, align 8, !tbaa !1240
  %189 = add i64 %188, -8
  %190 = inttoptr i64 %189 to i64*
  store i64 %187, i64* %190
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %3, align 8, !alias.scope !3283, !noalias !3286
  store i64 %188, i64* %10, align 8, !alias.scope !3283, !noalias !3286
  %193 = tail call i64 @fseek(i64 %186, i64 0, i64 0), !noalias !3283
  %194 = load i64, i64* %3, align 8
  %195 = load i64, i64* %11, align 8
  %196 = add i64 %195, -16
  %197 = inttoptr i64 %196 to i64*
  %198 = load i64, i64* %197
  %199 = add i64 %198, 4224
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %195, -68
  %203 = trunc i64 %193 to i32
  %204 = inttoptr i64 %202 to i32*
  store i32 %203, i32* %204
  %205 = add i64 %194, 31
  %206 = load i64, i64* %10, align 8, !tbaa !1240
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %205, i64* %208
  %209 = load i64, i64* %450, align 8, !alias.scope !3288, !noalias !3291
  %210 = load i64, i64* %443, align 8, !alias.scope !3288, !noalias !3291
  %211 = load i64, i64* %707, align 8, !alias.scope !3288, !noalias !3291
  %212 = inttoptr i64 %206 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %206, 8
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %206, 16
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %206, 24
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %206, 32
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %206, 40
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %206, 48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %206, 56
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %206, 64
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %206, 72
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = inttoptr i64 %207 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %3, align 8, !alias.scope !3288, !noalias !3291
  store i64 %206, i64* %10, align 8, !alias.scope !3288, !noalias !3291
  %243 = tail call i64 @fprintf(i64 %201, i64 ptrtoint (%msg_type* @msg to i64), i64 %209, i64 %198, i64 %210, i64 %211, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237, i64 %240), !noalias !3288
  %244 = load i64, i64* %3, align 8
  %245 = load i64, i64* %11, align 8
  %246 = add i64 %245, -16
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %248, 4224
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = add i64 %245, -72
  %253 = trunc i64 %243 to i32
  %254 = inttoptr i64 %252 to i32*
  store i32 %253, i32* %254
  %255 = add i64 %244, 28
  %256 = load i64, i64* %10, align 8, !tbaa !1240
  %257 = add i64 %256, -8
  %258 = inttoptr i64 %257 to i64*
  store i64 %255, i64* %258
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259
  store i64 %260, i64* %3, align 8, !alias.scope !3293, !noalias !3296
  store i64 %256, i64* %10, align 8, !alias.scope !3293, !noalias !3296
  %261 = tail call i64 @fseek(i64 %251, i64 0, i64 2), !noalias !3293
  %262 = load i64, i64* %3, align 8
  store i64 0, i64* %442, align 8, !tbaa !1240
  store i64 0, i64* %8, align 8, !tbaa !1240
  %263 = load i64, i64* %11, align 8
  %264 = add i64 %263, -16
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265
  store i64 %266, i64* %7, align 8, !tbaa !1240
  %267 = add i64 %266, 4272
  %268 = inttoptr i64 %267 to i64*
  %269 = load i64, i64* %268
  store i64 %269, i64* %9, align 8, !tbaa !1240
  %270 = add i64 %263, -76
  %271 = trunc i64 %261 to i32
  %272 = inttoptr i64 %270 to i32*
  store i32 %271, i32* %272
  %273 = add i64 %262, 25
  %274 = load i64, i64* %10, align 8, !tbaa !1240
  %275 = add i64 %274, -8
  %276 = inttoptr i64 %275 to i64*
  store i64 %273, i64* %276
  %277 = inttoptr i64 %275 to i64*
  %278 = load i64, i64* %277
  store i64 %278, i64* %3, align 8, !alias.scope !3298, !noalias !3301
  store i64 %274, i64* %10, align 8, !alias.scope !3298, !noalias !3301
  %279 = tail call i64 @fseek(i64 %269, i64 0, i64 0), !noalias !3298
  %280 = load i64, i64* %11, align 8
  %281 = add i64 %280, -4
  %282 = inttoptr i64 %281 to i32*
  store i32 0, i32* %282
  %283 = add i64 %280, -80
  %284 = trunc i64 %279 to i32
  %285 = inttoptr i64 %283 to i32*
  store i32 %284, i32* %285
  br label %block_407db2

block_407b00:                                     ; preds = %block_407afb, %block_407a64
  %286 = phi i64 [ %55, %block_407a64 ], [ %426, %block_407afb ]
  %287 = phi %struct.Memory* [ %155, %block_407a64 ], [ %425, %block_407afb ]
  %288 = add i64 %286, 19
  %289 = load i64, i64* %10, align 8, !tbaa !1240
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %3, align 8, !alias.scope !3303, !noalias !3306
  store i64 %289, i64* %10, align 8, !alias.scope !3303, !noalias !3306
  %294 = tail call i64 @strcmp(i64 zext (i32 trunc (i64 and (i64 ptrtoint (%inps_type* @inps to i64), i64 4294967295) to i32) to i64), i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4932), i64 4294967295) to i32) to i64)), !noalias !3303
  %295 = trunc i64 %294 to i32
  %296 = load i64, i64* %3, align 8
  %297 = icmp eq i32 %295, 0
  %298 = select i1 %297, i64 9, i64 420
  %299 = add i64 %296, %298
  br i1 %297, label %block_407b1c, label %block_407cb7

block_407c28:                                     ; preds = %block_407c07
  %300 = inttoptr i64 %584 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %301, 552
  %303 = inttoptr i64 %302 to i32*
  %304 = load i32, i32* %303
  %305 = sub i32 %136, %304
  %306 = icmp eq i32 %305, 0
  %307 = select i1 %306, i64 122, i64 36
  %308 = add i64 %633, %307
  br i1 %306, label %block_407ca2, label %block_407c4c

block_407bde:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %309 = add i64 %609, 516
  %310 = add i64 %615, 14
  %311 = inttoptr i64 %309 to i32*
  store i32 1, i32* %311
  br label %block_407bec

block_407cbc:                                     ; preds = %block_407a41
  %312 = load i64, i64* %11, align 8
  %313 = add i64 %312, -16
  %314 = inttoptr i64 %313 to i64*
  %315 = load i64, i64* %314
  %316 = add i64 %315, 4224
  %317 = inttoptr i64 %316 to i64*
  %318 = load i64, i64* %317
  %319 = add i64 %161, 28
  %320 = load i64, i64* %10, align 8, !tbaa !1240
  %321 = add i64 %320, -8
  %322 = inttoptr i64 %321 to i64*
  store i64 %319, i64* %322
  %323 = load i64, i64* %450, align 8, !alias.scope !3308, !noalias !3311
  %324 = load i64, i64* %478, align 8, !alias.scope !3308, !noalias !3311
  %325 = load i64, i64* %443, align 8, !alias.scope !3308, !noalias !3311
  %326 = load i64, i64* %707, align 8, !alias.scope !3308, !noalias !3311
  %327 = inttoptr i64 %320 to i64*
  %328 = load i64, i64* %327
  %329 = add i64 %320, 8
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330
  %332 = add i64 %320, 16
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %320, 24
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %320, 32
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %320, 40
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %320, 48
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %320, 56
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %320, 64
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %320, 72
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = inttoptr i64 %321 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %3, align 8, !alias.scope !3308, !noalias !3311
  store i64 %320, i64* %10, align 8, !alias.scope !3308, !noalias !3311
  %358 = tail call i64 @fprintf(i64 %318, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4980), i64 %323, i64 %324, i64 %325, i64 %326, i64 %328, i64 %331, i64 %334, i64 %337, i64 %340, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355), !noalias !3308
  %359 = load i64, i64* %3, align 8
  %360 = load i64, i64* %11, align 8
  %361 = add i64 %360, -16
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %363, 4224
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %360, -40
  %368 = trunc i64 %358 to i32
  %369 = inttoptr i64 %367 to i32*
  store i32 %368, i32* %369
  %370 = add i64 %359, 31
  %371 = load i64, i64* %10, align 8, !tbaa !1240
  %372 = add i64 %371, -8
  %373 = inttoptr i64 %372 to i64*
  store i64 %370, i64* %373
  %374 = load i64, i64* %450, align 8, !alias.scope !3313, !noalias !3316
  %375 = load i64, i64* %478, align 8, !alias.scope !3313, !noalias !3316
  %376 = load i64, i64* %443, align 8, !alias.scope !3313, !noalias !3316
  %377 = load i64, i64* %707, align 8, !alias.scope !3313, !noalias !3316
  %378 = inttoptr i64 %371 to i64*
  %379 = load i64, i64* %378
  %380 = add i64 %371, 8
  %381 = inttoptr i64 %380 to i64*
  %382 = load i64, i64* %381
  %383 = add i64 %371, 16
  %384 = inttoptr i64 %383 to i64*
  %385 = load i64, i64* %384
  %386 = add i64 %371, 24
  %387 = inttoptr i64 %386 to i64*
  %388 = load i64, i64* %387
  %389 = add i64 %371, 32
  %390 = inttoptr i64 %389 to i64*
  %391 = load i64, i64* %390
  %392 = add i64 %371, 40
  %393 = inttoptr i64 %392 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %371, 48
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %371, 56
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %371, 64
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %371, 72
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = inttoptr i64 %372 to i64*
  %408 = load i64, i64* %407
  store i64 %408, i64* %3, align 8, !alias.scope !3313, !noalias !3316
  store i64 %371, i64* %10, align 8, !alias.scope !3313, !noalias !3316
  %409 = tail call i64 @fprintf(i64 %366, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4718), i64 %374, i64 %375, i64 %376, i64 %377, i64 %379, i64 %382, i64 %385, i64 %388, i64 %391, i64 %394, i64 %397, i64 %400, i64 %403, i64 %406), !noalias !3313
  %410 = load i64, i64* %11, align 8
  %411 = add i64 %410, -16
  %412 = load i64, i64* %3, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413
  %415 = add i64 %414, 516
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416
  %418 = icmp eq i32 %417, 0
  %419 = add i64 %410, -44
  %420 = trunc i64 %409 to i32
  %421 = inttoptr i64 %419 to i32*
  store i32 %420, i32* %421
  %422 = select i1 %418, i64 20, i64 48
  %423 = add i64 %412, %422
  br i1 %418, label %block_407d0b, label %block_407d27

block_407afb.loopexit:                            ; preds = %block_407a85
  br label %block_407afb

block_407afb:                                     ; preds = %block_407afb.loopexit, %block_407ac4
  %424 = phi i64 [ %140, %block_407ac4 ], [ %662, %block_407afb.loopexit ]
  %425 = phi %struct.Memory* [ %657, %block_407ac4 ], [ %657, %block_407afb.loopexit ]
  %426 = add i64 %424, 5
  br label %block_407b00

block_407cb7:                                     ; preds = %block_407cac, %block_407b00
  %427 = phi i64 [ %299, %block_407b00 ], [ %480, %block_407cac ]
  %428 = phi %struct.Memory* [ %287, %block_407b00 ], [ %129, %block_407cac ]
  %429 = add i64 %427, -630
  br label %block_407a41

block_407d27:                                     ; preds = %block_407cbc
  %430 = add i64 %423, 19
  %431 = load i64, i64* %10, align 8, !tbaa !1240
  %432 = add i64 %431, -8
  %433 = inttoptr i64 %432 to i64*
  store i64 %430, i64* %433
  %434 = inttoptr i64 %432 to i64*
  %435 = load i64, i64* %434
  store i64 %435, i64* %3, align 8, !alias.scope !3318, !noalias !3321
  store i64 %431, i64* %10, align 8, !alias.scope !3318, !noalias !3321
  %436 = tail call i64 @strcpy(i64 zext (i32 trunc (i64 and (i64 ptrtoint (%msg_type* @msg to i64), i64 4294967295) to i32) to i64), i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5049), i64 4294967295) to i32) to i64))
  %437 = load i64, i64* %11, align 8
  %438 = add i64 %437, -64
  %439 = load i64, i64* %3, align 8
  %440 = add i64 %439, 4
  %441 = inttoptr i64 %438 to i64*
  store i64 %436, i64* %441
  br label %block_407d3e

block_4079af:                                     ; preds = %block_40796a
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %444 = add i64 %37, 4272
  %445 = inttoptr i64 %444 to i64*
  %446 = load i64, i64* %445
  %447 = add i64 %43, 22
  %448 = add i64 %13, -96
  %449 = inttoptr i64 %448 to i64*
  store i64 %447, i64* %449
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %451 = inttoptr i64 %448 to i64*
  %452 = load i64, i64* %451
  store i64 %452, i64* %3, align 8, !alias.scope !3323, !noalias !3326
  store i64 %16, i64* %10, align 8, !alias.scope !3323, !noalias !3326
  %453 = tail call i64 @fseek(i64 %446, i64 0, i64 0), !noalias !3323
  %454 = load i64, i64* %3, align 8
  %455 = load i64, i64* %11, align 8
  %456 = add i64 %455, -16
  %457 = inttoptr i64 %456 to i64*
  %458 = load i64, i64* %457
  %459 = add i64 %458, 4264
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460
  %462 = add i64 %455, -20
  %463 = trunc i64 %453 to i32
  %464 = inttoptr i64 %462 to i32*
  store i32 %463, i32* %464
  %465 = add i64 %454, 25
  %466 = load i64, i64* %10, align 8, !tbaa !1240
  %467 = add i64 %466, -8
  %468 = inttoptr i64 %467 to i64*
  store i64 %465, i64* %468
  %469 = inttoptr i64 %467 to i64*
  %470 = load i64, i64* %469
  store i64 %470, i64* %3, align 8, !alias.scope !3328, !noalias !3331
  store i64 %466, i64* %10, align 8, !alias.scope !3328, !noalias !3331
  %471 = tail call i64 @fseek(i64 %461, i64 0, i64 0), !noalias !3328
  %472 = load i64, i64* %11, align 8
  %473 = add i64 %472, -24
  %474 = trunc i64 %471 to i32
  %475 = load i64, i64* %3, align 8
  %476 = add i64 %475, 3
  %477 = inttoptr i64 %473 to i32*
  store i32 %474, i32* %477
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  br label %block_4079e1

block_407cac:                                     ; preds = %block_407ca7, %block_407bec
  %479 = phi i64 [ %494, %block_407ca7 ], [ %139, %block_407bec ]
  %480 = add i64 %479, 11
  store i32 0, i32* bitcast (%k_type* @k to i32*)
  br label %block_407cb7

block_407aa8:                                     ; preds = %block_407a85
  %481 = add i64 %662, 19
  %482 = load i64, i64* %10, align 8, !tbaa !1240
  %483 = add i64 %482, -8
  %484 = inttoptr i64 %483 to i64*
  store i64 %481, i64* %484
  %485 = inttoptr i64 %483 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %3, align 8, !alias.scope !3333, !noalias !3336
  store i64 %482, i64* %10, align 8, !alias.scope !3333, !noalias !3336
  %487 = tail call i64 @strcmp(i64 zext (i32 trunc (i64 and (i64 ptrtoint (%inps_type* @inps to i64), i64 4294967295) to i32) to i64), i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4927), i64 4294967295) to i32) to i64)), !noalias !3333
  %488 = trunc i64 %487 to i32
  %489 = load i64, i64* %3, align 8
  %490 = icmp eq i32 %488, 0
  %491 = select i1 %490, i64 9, i64 14
  %492 = add i64 %489, %491
  br i1 %490, label %block_407ac4, label %block_407ac9

block_407ca7:                                     ; preds = %block_407c07, %block_407ca2
  %493 = phi i64 [ %633, %block_407c07 ], [ %495, %block_407ca2 ]
  %494 = add i64 %493, 5
  br label %block_407cac

block_407ca2:                                     ; preds = %block_407c28
  %495 = add i64 %308, 5
  br label %block_407ca7

block_407b1c:                                     ; preds = %block_407b00
  %496 = load i64, i64* %11, align 8
  %497 = add i64 %496, -16
  %498 = inttoptr i64 %497 to i64*
  %499 = load i64, i64* %498
  %500 = add i64 %499, 4264
  %501 = inttoptr i64 %500 to i64*
  %502 = load i64, i64* %501
  %503 = add i64 %299, 38
  %504 = load i64, i64* %10, align 8, !tbaa !1240
  %505 = add i64 %504, -8
  %506 = inttoptr i64 %505 to i64*
  store i64 %503, i64* %506
  %507 = load i64, i64* %478, align 8, !alias.scope !3338, !noalias !3341
  %508 = load i64, i64* %443, align 8, !alias.scope !3338, !noalias !3341
  %509 = load i64, i64* %707, align 8, !alias.scope !3338, !noalias !3341
  %510 = inttoptr i64 %504 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %504, 8
  %513 = inttoptr i64 %512 to i64*
  %514 = load i64, i64* %513
  %515 = add i64 %504, 16
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = add i64 %504, 24
  %519 = inttoptr i64 %518 to i64*
  %520 = load i64, i64* %519
  %521 = add i64 %504, 32
  %522 = inttoptr i64 %521 to i64*
  %523 = load i64, i64* %522
  %524 = add i64 %504, 40
  %525 = inttoptr i64 %524 to i64*
  %526 = load i64, i64* %525
  %527 = add i64 %504, 48
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %504, 56
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  %533 = add i64 %504, 64
  %534 = inttoptr i64 %533 to i64*
  %535 = load i64, i64* %534
  %536 = add i64 %504, 72
  %537 = inttoptr i64 %536 to i64*
  %538 = load i64, i64* %537
  %539 = inttoptr i64 %505 to i64*
  %540 = load i64, i64* %539
  store i64 %540, i64* %3, align 8, !alias.scope !3338, !noalias !3341
  store i64 %504, i64* %10, align 8, !alias.scope !3338, !noalias !3341
  %541 = tail call i64 @__isoc99_fscanf(i64 %502, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5164), i64 ptrtoint (%inps_type* @inps to i64), i64 %507, i64 %508, i64 %509, i64 %511, i64 %514, i64 %517, i64 %520, i64 %523, i64 %526, i64 %529, i64 %532, i64 %535, i64 %538), !noalias !3338
  %542 = load i64, i64* %3, align 8
  store i64 ptrtoint (%inps_type* @inps to i64), i64* %442, align 8, !tbaa !1240
  %543 = load i64, i64* %11, align 8
  %544 = add i64 %543, -16
  %545 = inttoptr i64 %544 to i64*
  %546 = load i64, i64* %545
  %547 = add i64 %546, 4264
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %9, align 8, !tbaa !1240
  %550 = add i64 %543, -28
  %551 = trunc i64 %541 to i32
  %552 = inttoptr i64 %550 to i32*
  store i32 %551, i32* %552
  %553 = add i64 %542, -722
  %554 = add i64 %542, 29
  %555 = load i64, i64* %10, align 8, !tbaa !1240
  %556 = add i64 %555, -8
  %557 = inttoptr i64 %556 to i64*
  store i64 %554, i64* %557
  store i64 %556, i64* %10, align 8, !tbaa !1240
  %558 = tail call %struct.Memory* @sub_407870_fake_fscanf(%struct.State* nonnull %0, i64 %553, %struct.Memory* %287)
  %559 = load i64, i64* %3, align 8
  %560 = load i64, i64* %11, align 8
  %561 = add i64 %560, -32
  %562 = load i32, i32* %5, align 4
  %563 = inttoptr i64 %561 to i32*
  store i32 %562, i32* %563
  %564 = add i64 %559, 18
  %565 = load i64, i64* %10, align 8, !tbaa !1240
  %566 = add i64 %565, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %564, i64* %567
  %568 = inttoptr i64 %566 to i64*
  %569 = load i64, i64* %568
  store i64 %569, i64* %3, align 8, !alias.scope !3343, !noalias !3346
  store i64 %565, i64* %10, align 8, !alias.scope !3343, !noalias !3346
  %570 = tail call i64 @atoi(i64 ptrtoint (%inps_type* @inps to i64)), !noalias !3343
  %571 = load i64, i64* %3, align 8
  store i64 ptrtoint (%tx_type* @tx to i64), i64* %9, align 8, !tbaa !1240
  store i64 ptrtoint (%sel_type* @sel to i64), i64* %442, align 8, !tbaa !1240
  %572 = trunc i64 %570 to i32
  store i32 %572, i32* bitcast (%sz_type* @sz to i32*)
  %573 = load i32, i32* bitcast (%k_type* @k to i32*)
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %8, align 8, !tbaa !1240
  %575 = add i64 %571, 6159
  %576 = add i64 %571, 39
  %577 = load i64, i64* %10, align 8, !tbaa !1240
  %578 = add i64 %577, -8
  %579 = inttoptr i64 %578 to i64*
  store i64 %576, i64* %579
  store i64 %578, i64* %10, align 8, !tbaa !1240
  %580 = tail call %struct.Memory* @sub_409380_CreateBinTuple(%struct.State* nonnull %0, i64 %575, %struct.Memory* %558)
  %581 = load i64, i64* %3, align 8
  %582 = load i64, i64* bitcast (%tx_type* @tx to i64*)
  %583 = load i64, i64* %11, align 8
  %584 = add i64 %583, -16
  %585 = inttoptr i64 %584 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %586, 536
  %588 = inttoptr i64 %587 to i32*
  %589 = load i32, i32* %588
  %590 = sub i32 64, %589
  %591 = trunc i32 %590 to i6
  %592 = trunc i64 %582 to i32
  switch i6 %591, label %594 [
    i6 0, label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i6 1, label %593
  ]

; <label>:593:                                    ; preds = %block_407b1c
  br label %599

; <label>:594:                                    ; preds = %block_407b1c
  %595 = and i32 %590, 63
  %596 = zext i32 %595 to i64
  %597 = add nsw i64 %596, -1
  %598 = lshr i64 %582, %597
  br label %599

; <label>:599:                                    ; preds = %594, %593
  %600 = phi i64 [ %598, %594 ], [ %582, %593 ]
  %601 = lshr i64 %600, 1
  %602 = trunc i64 %601 to i32
  br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %599, %block_407b1c
  %603 = phi i32 [ %592, %block_407b1c ], [ %602, %599 ]
  store i32 %603, i32* bitcast (%iTx_type* @iTx to i32*)
  %604 = inttoptr i64 %584 to i64*
  %605 = load i64, i64* %604
  %606 = add i64 %605, 516
  %607 = inttoptr i64 %606 to i32*
  store i32 0, i32* %607
  %608 = inttoptr i64 %584 to i64*
  %609 = load i64, i64* %608
  %610 = add i64 %609, 4504
  %611 = inttoptr i64 %610 to i32*
  %612 = load i32, i32* %611
  %613 = icmp eq i32 %612, 0
  %614 = select i1 %613, i64 70, i64 84
  %615 = add i64 %581, %614
  br i1 %613, label %block_407bde, label %block_407bec

block_407d0b:                                     ; preds = %block_407cbc
  %616 = add i64 %423, 19
  %617 = load i64, i64* %10, align 8, !tbaa !1240
  %618 = add i64 %617, -8
  %619 = inttoptr i64 %618 to i64*
  store i64 %616, i64* %619
  %620 = inttoptr i64 %618 to i64*
  %621 = load i64, i64* %620
  store i64 %621, i64* %3, align 8, !alias.scope !3348, !noalias !3351
  store i64 %617, i64* %10, align 8, !alias.scope !3348, !noalias !3351
  %622 = tail call i64 @strcpy(i64 zext (i32 trunc (i64 and (i64 ptrtoint (%msg_type* @msg to i64), i64 4294967295) to i32) to i64), i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5029), i64 4294967295) to i32) to i64))
  %623 = load i64, i64* %11, align 8
  %624 = add i64 %623, -56
  %625 = load i64, i64* %3, align 8
  %626 = inttoptr i64 %624 to i64*
  store i64 %622, i64* %626
  %627 = add i64 %625, 32
  br label %block_407d3e

block_407c07:                                     ; preds = %block_407bec
  %628 = zext i32 %136 to i64
  %629 = load i32, i32* bitcast (%sz_type* @sz to i32*)
  %630 = sub i32 %136, %629
  %631 = icmp eq i32 %630, 0
  %632 = select i1 %631, i64 160, i64 33
  %633 = add i64 %139, %632
  br i1 %631, label %block_407ca7, label %block_407c28

block_407a16:                                     ; preds = %block_4079e1
  %634 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%selection_viewSize_type* @selection_viewSize to i64), i64 4) to i32*)
  %635 = load i64, i64* bitcast (%viewCounts_type* @viewCounts to i64*)
  %636 = load i32, i32* bitcast (%selection_viewSize_type* @selection_viewSize to i32*)
  %637 = zext i32 %636 to i64
  %638 = shl nuw nsw i64 %637, 2
  %639 = add i64 %635, %638
  %640 = inttoptr i64 %639 to i32*
  store i32 %634, i32* %640
  %641 = add i64 %75, -53
  %642 = load i64, i64* %11, align 8
  br label %block_4079e1

block_407a85:                                     ; preds = %block_407a80, %block_407ac9
  %643 = phi i64 [ %708, %block_407a80 ], [ %177, %block_407ac9 ]
  %644 = phi %struct.Memory* [ %155, %block_407a80 ], [ %657, %block_407ac9 ]
  store i64 ptrtoint (%inps_type* @inps to i64), i64* %442, align 8, !tbaa !1240
  %645 = load i64, i64* %11, align 8
  %646 = add i64 %645, -16
  %647 = inttoptr i64 %646 to i64*
  %648 = load i64, i64* %647
  %649 = add i64 %648, 4264
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  store i64 %651, i64* %9, align 8, !tbaa !1240
  %652 = add i64 %643, -533
  %653 = add i64 %643, 26
  %654 = load i64, i64* %10, align 8, !tbaa !1240
  %655 = add i64 %654, -8
  %656 = inttoptr i64 %655 to i64*
  store i64 %653, i64* %656
  store i64 %655, i64* %10, align 8, !tbaa !1240
  %657 = tail call %struct.Memory* @sub_407870_fake_fscanf(%struct.State* nonnull %0, i64 %652, %struct.Memory* %644)
  %658 = load i32, i32* %5, align 4
  %659 = load i64, i64* %3, align 8
  %660 = icmp eq i32 %658, 0
  %661 = select i1 %660, i64 92, i64 9
  %662 = add i64 %659, %661
  br i1 %660, label %block_407afb.loopexit, label %block_407aa8

block_407db2:                                     ; preds = %block_407d3e, %block_407c4c
  %663 = phi i64 [ %280, %block_407d3e ], [ %117, %block_407c4c ]
  %664 = phi %struct.Memory* [ %180, %block_407d3e ], [ %129, %block_407c4c ]
  %665 = add i64 %663, -4
  %666 = inttoptr i64 %665 to i32*
  %667 = load i32, i32* %666
  %668 = zext i32 %667 to i64
  store i64 %668, i64* %6, align 8, !tbaa !1240
  %669 = load i64, i64* %10, align 8
  %670 = add i64 %669, 80
  %671 = icmp ugt i64 %669, -81
  %672 = zext i1 %671 to i8
  store i8 %672, i8* %17, align 1, !tbaa !1264
  %673 = trunc i64 %670 to i32
  %674 = and i32 %673, 255
  %675 = tail call i32 @llvm.ctpop.i32(i32 %674) #10
  %676 = trunc i32 %675 to i8
  %677 = and i8 %676, 1
  %678 = xor i8 %677, 1
  store i8 %678, i8* %18, align 1, !tbaa !1278
  %679 = xor i64 %669, 16
  %680 = xor i64 %679, %670
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  store i8 %683, i8* %19, align 1, !tbaa !1279
  %684 = icmp eq i64 %670, 0
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %20, align 1, !tbaa !1280
  %686 = lshr i64 %670, 63
  %687 = trunc i64 %686 to i8
  store i8 %687, i8* %21, align 1, !tbaa !1281
  %688 = lshr i64 %669, 63
  %689 = xor i64 %686, %688
  %690 = add nuw nsw i64 %689, %686
  %691 = icmp eq i64 %690, 2
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %22, align 1, !tbaa !1282
  %693 = add i64 %669, 88
  %694 = inttoptr i64 %670 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %11, align 8, !tbaa !1240
  %696 = inttoptr i64 %693 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %3, align 8, !tbaa !1240
  %698 = add i64 %669, 96
  store i64 %698, i64* %10, align 8, !tbaa !1240
  ret %struct.Memory* %664

block_407981:                                     ; preds = %block_40796a
  %699 = load i64, i64* bitcast (%viewCounts_type* @viewCounts to i64*)
  %700 = shl nuw nsw i64 %35, 2
  %701 = add i64 %699, %700
  %702 = inttoptr i64 %701 to i32*
  store i32 0, i32* %702
  %703 = load i32, i32* bitcast (%i_type* @i to i32*)
  %704 = add i32 %703, 1
  store i32 %704, i32* bitcast (%i_type* @i to i32*)
  %705 = add i64 %43, -23
  br label %block_40796a

block_407a36:                                     ; preds = %block_4079e1
  %706 = add i64 %75, 11
  store i32 0, i32* bitcast (%k_type* @k to i32*)
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  br label %block_407a41

block_407a80:                                     ; preds = %block_407a64
  %708 = add i64 %55, 5
  br label %block_407a85
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_409220_getRegTupleFromBin32(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_409220:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %12 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  %19 = add i64 %16, -12
  %20 = load i32, i32* %7, align 4
  %21 = inttoptr i64 %19 to i32*
  store i32 %20, i32* %21
  %22 = add i64 %16, -24
  %23 = load i64, i64* %11, align 8
  %24 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %16, -28
  %26 = load i32, i32* %5, align 4
  %27 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %27
  %28 = add i64 %16, -40
  %29 = load i64, i64* %9, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %30
  %31 = add i64 %16, -44
  %32 = inttoptr i64 %31 to i32*
  store i32 -2147483648, i32* %32
  %33 = inttoptr i64 %28 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %9, align 8, !tbaa !1240
  %35 = inttoptr i64 %34 to i32*
  store i32 0, i32* %35
  %36 = add i64 %16, -52
  %37 = inttoptr i64 %36 to i32*
  store i32 0, i32* %37
  %38 = add i64 %16, -48
  %39 = inttoptr i64 %38 to i32*
  store i32 0, i32* %39
  %40 = add i64 %16, -28
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %44 = add i64 %16, -12
  %45 = add i64 %16, -24
  br label %block_409251

block_409293:                                     ; preds = %block_40925d, %block_40926c
  %46 = phi %struct.Memory* [ %55, %block_40925d ], [ %55, %block_40926c ]
  %47 = inttoptr i64 %31 to i32*
  %48 = load i32, i32* %47
  %49 = lshr i32 %48, 1
  %50 = inttoptr i64 %31 to i32*
  store i32 %49, i32* %50
  %51 = inttoptr i64 %38 to i32*
  %52 = load i32, i32* %51
  %53 = add i32 %52, 1
  %54 = inttoptr i64 %38 to i32*
  store i32 %53, i32* %54
  br label %block_409251

block_409251:                                     ; preds = %block_409293, %block_409220
  %55 = phi %struct.Memory* [ %2, %block_409220 ], [ %46, %block_409293 ]
  %56 = inttoptr i64 %38 to i32*
  %57 = load i32, i32* %56
  %58 = inttoptr i64 %40 to i32*
  %59 = load i32, i32* %58
  %60 = icmp ult i32 %57, %59
  br i1 %60, label %block_40925d, label %block_4092aa

block_40926c:                                     ; preds = %block_40925d
  %61 = add i32 %57, 1
  %62 = inttoptr i64 %45 to i64*
  %63 = load i64, i64* %62
  %64 = inttoptr i64 %36 to i32*
  %65 = load i32, i32* %64
  %66 = zext i32 %65 to i64
  %67 = add i32 %65, 1
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %11, align 8, !tbaa !1240
  %69 = inttoptr i64 %36 to i32*
  store i32 %67, i32* %69
  store i64 %66, i64* %10, align 8, !tbaa !1240
  store i64 %66, i64* %12, align 8, !tbaa !1240
  %70 = shl nuw nsw i64 %66, 2
  %71 = add i64 %63, %70
  %72 = inttoptr i64 %71 to i32*
  store i32 %61, i32* %72
  %73 = inttoptr i64 %28 to i64*
  %74 = load i64, i64* %73
  store i64 %74, i64* %9, align 8, !tbaa !1240
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75
  %77 = add i32 %76, 1
  %78 = inttoptr i64 %74 to i32*
  store i32 %77, i32* %78
  br label %block_409293

block_40925d:                                     ; preds = %block_409251
  %79 = inttoptr i64 %44 to i32*
  %80 = load i32, i32* %79
  %81 = inttoptr i64 %31 to i32*
  %82 = load i32, i32* %81
  %83 = and i32 %82, %80
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %block_409293, label %block_40926c

block_4092aa:                                     ; preds = %block_409251
  %85 = zext i32 %57 to i64
  store i64 %85, i64* %8, align 8, !tbaa !1240
  %86 = sub i32 %57, %59
  %87 = lshr i32 %86, 31
  %88 = lshr i32 %57, 31
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %92 = and i32 %86, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #10
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = xor i32 %59, %57
  %98 = xor i32 %97, %86
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = icmp eq i32 %86, 0
  %103 = zext i1 %102 to i8
  %104 = trunc i32 %87 to i8
  %105 = xor i32 %87, %88
  %106 = lshr i32 %59, 31
  %107 = xor i32 %106, %88
  %108 = add nuw nsw i32 %105, %107
  %109 = icmp eq i32 %108, 2
  %110 = zext i1 %109 to i8
  store i8 0, i8* %41, align 1, !tbaa !1428
  store i8 %96, i8* %89, align 1, !tbaa !1428
  store i8 %101, i8* %42, align 1, !tbaa !1428
  store i8 %103, i8* %90, align 1, !tbaa !1428
  store i8 %104, i8* %43, align 1, !tbaa !1428
  store i8 %110, i8* %91, align 1, !tbaa !1428
  %111 = inttoptr i64 %17 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %14, align 8, !tbaa !1240
  %113 = inttoptr i64 %16 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %3, align 8, !tbaa !1240
  %115 = add i64 %16, 8
  store i64 %115, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %55
}

; Function Attrs: noinline
define %struct.Memory* @sub_40215d(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_40215d:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -156
  %6 = inttoptr i64 %5 to i32*
  store i32 8, i32* %6
  %7 = add i64 %1, 50
  %8 = tail call %struct.Memory* @sub_40218f_def_40215B(%struct.State* nonnull %0, i64 %7, %struct.Memory* %2)
  ret %struct.Memory* %8
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031b0_c_print_results(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_4031b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %11 = bitcast %union.anon* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %27 = load i64, i64* %18, align 8
  %28 = load i64, i64* %17, align 8, !tbaa !1240
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30
  store i64 %29, i64* %18, align 8, !tbaa !1240
  %31 = load i64, i64* %24, align 8
  %32 = add i64 %28, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %31, i64* %33
  %34 = load i64, i64* %23, align 8
  %35 = add i64 %28, -24
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36
  %37 = load i64, i64* %22, align 8
  %38 = add i64 %28, -32
  %39 = inttoptr i64 %38 to i64*
  store i64 %37, i64* %39
  %40 = load i64, i64* %21, align 8
  %41 = add i64 %28, -40
  %42 = inttoptr i64 %41 to i64*
  store i64 %40, i64* %42
  %43 = load i64, i64* %14, align 8
  %44 = add i64 %28, -48
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  %46 = add i64 %28, -312
  store i64 %46, i64* %17, align 8, !tbaa !1240
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = load i8, i8* %5, align 1
  %54 = add i64 %28, 80
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %19, align 8, !tbaa !1240
  %57 = add i64 %28, 72
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58
  store i64 %59, i64* %20, align 8, !tbaa !1240
  %60 = add i64 %28, 64
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %14, align 8, !tbaa !1240
  %63 = add i64 %28, 56
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %23, align 8, !tbaa !1240
  %66 = add i64 %28, 48
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %24, align 8, !tbaa !1240
  %69 = add i64 %28, 40
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %21, align 8, !tbaa !1240
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %72, 40
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %22, align 8, !tbaa !1240
  %76 = add i64 %72, 32
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77
  %79 = add i64 %72, -97
  %80 = inttoptr i64 %79 to i8*
  store i8 %53, i8* %80
  %81 = add i64 %72, 24
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82
  %84 = add i64 %72, -112
  %85 = inttoptr i64 %84 to i64*
  store i64 %78, i64* %85
  %86 = add i64 %72, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %72, -120
  %90 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %90
  %91 = add i64 %72, -48
  %92 = load i64, i64* %16, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %93
  %94 = inttoptr i64 %79 to i8*
  %95 = load i8, i8* %94
  %96 = add i64 %72, -49
  %97 = inttoptr i64 %96 to i8*
  store i8 %95, i8* %97
  %98 = add i64 %72, -56
  %99 = load i32, i32* %9, align 4
  %100 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %100
  %101 = add i64 %72, -60
  %102 = load i32, i32* %7, align 4
  %103 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %103
  %104 = add i64 %72, -64
  %105 = load i32, i32* %11, align 4
  %106 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %106
  %107 = add i64 %72, -68
  %108 = load i32, i32* %13, align 4
  %109 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %109
  %110 = add i64 %72, -80
  %111 = bitcast [32 x %union.VectorReg]* %25 to double*
  %112 = load double, double* %111, align 1
  %113 = inttoptr i64 %110 to double*
  store double %112, double* %113
  %114 = add i64 %72, -88
  %115 = bitcast %union.VectorReg* %26 to double*
  %116 = load double, double* %115, align 1
  %117 = inttoptr i64 %114 to double*
  store double %116, double* %117
  %118 = inttoptr i64 %91 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %72, -128
  %121 = inttoptr i64 %120 to i64*
  store i64 %119, i64* %121
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122
  %124 = add i64 %72, -132
  %125 = inttoptr i64 %124 to i32*
  store i32 %83, i32* %125
  %126 = add i64 %72, -144
  %127 = load i64, i64* %20, align 8
  %128 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %128
  %129 = add i64 %72, -152
  %130 = load i64, i64* %14, align 8
  %131 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %131
  %132 = add i64 %72, -160
  %133 = load i64, i64* %23, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %134
  %135 = load i64, i64* %18, align 8
  %136 = add i64 %135, -168
  %137 = load i64, i64* %24, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %138
  %139 = add i64 %135, -176
  %140 = load i64, i64* %21, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %141
  %142 = add i64 %135, -184
  %143 = load i64, i64* %22, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %144
  %145 = add i64 %135, -192
  %146 = load i64, i64* %19, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %147
  %148 = add i64 %1, 196
  %149 = load i64, i64* %17, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %158 = load i64, i64* %154, align 8, !alias.scope !3353, !noalias !3356
  %159 = load i64, i64* %153, align 8, !alias.scope !3353, !noalias !3356
  %160 = load i64, i64* %156, align 8, !alias.scope !3353, !noalias !3356
  %161 = load i64, i64* %157, align 8, !alias.scope !3353, !noalias !3356
  %162 = inttoptr i64 %149 to i64*
  %163 = load i64, i64* %162
  %164 = add i64 %149, 8
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165
  %167 = add i64 %149, 16
  %168 = inttoptr i64 %167 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %149, 24
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171
  %173 = add i64 %149, 32
  %174 = inttoptr i64 %173 to i64*
  %175 = load i64, i64* %174
  %176 = add i64 %149, 40
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  %179 = add i64 %149, 48
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %149, 56
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = add i64 %149, 64
  %186 = inttoptr i64 %185 to i64*
  %187 = load i64, i64* %186
  %188 = add i64 %149, 72
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189
  %191 = inttoptr i64 %150 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %3, align 8, !alias.scope !3353, !noalias !3356
  store i64 %149, i64* %17, align 8, !alias.scope !3353, !noalias !3356
  %193 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1682), i64 %123, i64 %158, i64 %159, i64 %160, i64 %161, i64 %163, i64 %166, i64 %169, i64 %172, i64 %175, i64 %178, i64 %181, i64 %184, i64 %187, i64 %190), !noalias !3353
  %194 = load i64, i64* %3, align 8
  %195 = load i64, i64* %18, align 8
  %196 = add i64 %195, -49
  %197 = inttoptr i64 %196 to i8*
  %198 = load i8, i8* %197
  %199 = sext i8 %198 to i64
  %200 = and i64 %199, 4294967295
  %201 = add i64 %195, -196
  %202 = trunc i64 %193 to i32
  %203 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %203
  %204 = add i64 %194, 27
  %205 = load i64, i64* %17, align 8, !tbaa !1240
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207
  %208 = load i64, i64* %154, align 8, !alias.scope !3358, !noalias !3361
  %209 = load i64, i64* %153, align 8, !alias.scope !3358, !noalias !3361
  %210 = load i64, i64* %156, align 8, !alias.scope !3358, !noalias !3361
  %211 = load i64, i64* %157, align 8, !alias.scope !3358, !noalias !3361
  %212 = inttoptr i64 %205 to i64*
  %213 = load i64, i64* %212
  %214 = add i64 %205, 8
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = add i64 %205, 16
  %218 = inttoptr i64 %217 to i64*
  %219 = load i64, i64* %218
  %220 = add i64 %205, 24
  %221 = inttoptr i64 %220 to i64*
  %222 = load i64, i64* %221
  %223 = add i64 %205, 32
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  %226 = add i64 %205, 40
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %227
  %229 = add i64 %205, 48
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  %232 = add i64 %205, 56
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233
  %235 = add i64 %205, 64
  %236 = inttoptr i64 %235 to i64*
  %237 = load i64, i64* %236
  %238 = add i64 %205, 72
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239
  %241 = inttoptr i64 %206 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %3, align 8, !alias.scope !3358, !noalias !3361
  store i64 %205, i64* %17, align 8, !alias.scope !3358, !noalias !3361
  %243 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1709), i64 %200, i64 %208, i64 %209, i64 %210, i64 %211, i64 %213, i64 %216, i64 %219, i64 %222, i64 %225, i64 %228, i64 %231, i64 %234, i64 %237, i64 %240), !noalias !3358
  %244 = load i64, i64* %18, align 8
  %245 = add i64 %244, -64
  %246 = load i64, i64* %3, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247
  %249 = icmp eq i32 %248, 0
  %250 = add i64 %244, -200
  %251 = trunc i64 %243 to i32
  %252 = inttoptr i64 %250 to i32*
  store i32 %251, i32* %252
  %253 = select i1 %249, i64 16, i64 79
  %254 = add i64 %246, %253
  br i1 %249, label %block_40329f, label %block_4032de

block_40329f:                                     ; preds = %block_4031b0
  %255 = add i64 %244, -56
  %256 = inttoptr i64 %255 to i32*
  %257 = load i32, i32* %256
  %258 = sext i32 %257 to i64
  %259 = add i64 %244, -96
  %260 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %260
  %261 = add i64 %244, -60
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i64 31, i64 18
  %266 = add i64 %254, %265
  br i1 %264, label %block_4032be, label %block_4032b1

block_4033b7:                                     ; preds = %block_403391
  %267 = add i64 %1127, 17
  %268 = load i64, i64* %17, align 8, !tbaa !1240
  %269 = add i64 %268, -8
  %270 = inttoptr i64 %269 to i64*
  store i64 %267, i64* %270
  %271 = load i64, i64* %155, align 8, !alias.scope !3363, !noalias !3366
  %272 = load i64, i64* %154, align 8, !alias.scope !3363, !noalias !3366
  %273 = load i64, i64* %153, align 8, !alias.scope !3363, !noalias !3366
  %274 = load i64, i64* %156, align 8, !alias.scope !3363, !noalias !3366
  %275 = load i64, i64* %157, align 8, !alias.scope !3363, !noalias !3366
  %276 = inttoptr i64 %268 to i64*
  %277 = load i64, i64* %276
  %278 = add i64 %268, 8
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  %281 = add i64 %268, 16
  %282 = inttoptr i64 %281 to i64*
  %283 = load i64, i64* %282
  %284 = add i64 %268, 24
  %285 = inttoptr i64 %284 to i64*
  %286 = load i64, i64* %285
  %287 = add i64 %268, 32
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* %288
  %290 = add i64 %268, 40
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  %293 = add i64 %268, 48
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294
  %296 = add i64 %268, 56
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297
  %299 = add i64 %268, 64
  %300 = inttoptr i64 %299 to i64*
  %301 = load i64, i64* %300
  %302 = add i64 %268, 72
  %303 = inttoptr i64 %302 to i64*
  %304 = load i64, i64* %303
  %305 = inttoptr i64 %269 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %3, align 8, !alias.scope !3363, !noalias !3366
  store i64 %268, i64* %17, align 8, !alias.scope !3363, !noalias !3366
  %307 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2067), i64 %271, i64 %272, i64 %273, i64 %274, i64 %275, i64 %277, i64 %280, i64 %283, i64 %286, i64 %289, i64 %292, i64 %295, i64 %298, i64 %301, i64 %304), !noalias !3363
  %308 = load i64, i64* %18, align 8
  %309 = add i64 %308, -236
  %310 = trunc i64 %307 to i32
  %311 = load i64, i64* %3, align 8
  %312 = add i64 %311, 6
  %313 = inttoptr i64 %309 to i32*
  store i32 %310, i32* %313
  br label %block_4033d3

block_4032de:                                     ; preds = %block_4031b0
  %314 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %315 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %316 = add i64 %244, -56
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  %320 = add i64 %244, -60
  %321 = inttoptr i64 %320 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %314, align 8, !tbaa !1240
  %324 = inttoptr i64 %245 to i32*
  %325 = load i32, i32* %324
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %315, align 8, !tbaa !1240
  %327 = add i64 %254, 26
  %328 = load i64, i64* %17, align 8, !tbaa !1240
  %329 = add i64 %328, -8
  %330 = inttoptr i64 %329 to i64*
  store i64 %327, i64* %330
  %331 = load i64, i64* %156, align 8, !alias.scope !3368, !noalias !3371
  %332 = load i64, i64* %157, align 8, !alias.scope !3368, !noalias !3371
  %333 = inttoptr i64 %328 to i64*
  %334 = load i64, i64* %333
  %335 = add i64 %328, 8
  %336 = inttoptr i64 %335 to i64*
  %337 = load i64, i64* %336
  %338 = add i64 %328, 16
  %339 = inttoptr i64 %338 to i64*
  %340 = load i64, i64* %339
  %341 = add i64 %328, 24
  %342 = inttoptr i64 %341 to i64*
  %343 = load i64, i64* %342
  %344 = add i64 %328, 32
  %345 = inttoptr i64 %344 to i64*
  %346 = load i64, i64* %345
  %347 = add i64 %328, 40
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348
  %350 = add i64 %328, 48
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351
  %353 = add i64 %328, 56
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  %356 = add i64 %328, 64
  %357 = inttoptr i64 %356 to i64*
  %358 = load i64, i64* %357
  %359 = add i64 %328, 72
  %360 = inttoptr i64 %359 to i64*
  %361 = load i64, i64* %360
  %362 = inttoptr i64 %329 to i64*
  %363 = load i64, i64* %362
  store i64 %363, i64* %3, align 8, !alias.scope !3368, !noalias !3371
  store i64 %328, i64* %17, align 8, !alias.scope !3368, !noalias !3371
  %364 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1793), i64 %319, i64 %323, i64 %326, i64 %331, i64 %332, i64 %334, i64 %337, i64 %340, i64 %343, i64 %346, i64 %349, i64 %352, i64 %355, i64 %358, i64 %361), !noalias !3368
  %365 = load i64, i64* %18, align 8
  %366 = add i64 %365, -208
  %367 = trunc i64 %364 to i32
  %368 = load i64, i64* %3, align 8
  %369 = add i64 %368, 6
  %370 = inttoptr i64 %366 to i32*
  store i32 %367, i32* %370
  br label %block_4032fe

block_4033d3:                                     ; preds = %block_403375, %block_40339b, %block_4033b7
  %371 = phi i64 [ %1281, %block_403375 ], [ %1169, %block_40339b ], [ %308, %block_4033b7 ]
  %372 = phi i64 [ %1285, %block_403375 ], [ %1174, %block_40339b ], [ %312, %block_4033b7 ]
  %373 = phi i64 [ 71, %block_403375 ], [ 5, %block_40339b ], [ 5, %block_4033b7 ]
  %374 = phi %struct.Memory* [ %1289, %block_403375 ], [ %1289, %block_40339b ], [ %1289, %block_4033b7 ]
  %375 = add i64 %372, %373
  %376 = add i64 %371, 32
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %375, 21
  %380 = load i64, i64* %17, align 8, !tbaa !1240
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %382
  %383 = load i64, i64* %154, align 8, !alias.scope !3373, !noalias !3376
  %384 = load i64, i64* %153, align 8, !alias.scope !3373, !noalias !3376
  %385 = load i64, i64* %156, align 8, !alias.scope !3373, !noalias !3376
  %386 = load i64, i64* %157, align 8, !alias.scope !3373, !noalias !3376
  %387 = inttoptr i64 %380 to i64*
  %388 = load i64, i64* %387
  %389 = add i64 %380, 8
  %390 = inttoptr i64 %389 to i64*
  %391 = load i64, i64* %390
  %392 = add i64 %380, 16
  %393 = inttoptr i64 %392 to i64*
  %394 = load i64, i64* %393
  %395 = add i64 %380, 24
  %396 = inttoptr i64 %395 to i64*
  %397 = load i64, i64* %396
  %398 = add i64 %380, 32
  %399 = inttoptr i64 %398 to i64*
  %400 = load i64, i64* %399
  %401 = add i64 %380, 40
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  %404 = add i64 %380, 48
  %405 = inttoptr i64 %404 to i64*
  %406 = load i64, i64* %405
  %407 = add i64 %380, 56
  %408 = inttoptr i64 %407 to i64*
  %409 = load i64, i64* %408
  %410 = add i64 %380, 64
  %411 = inttoptr i64 %410 to i64*
  %412 = load i64, i64* %411
  %413 = add i64 %380, 72
  %414 = inttoptr i64 %413 to i64*
  %415 = load i64, i64* %414
  %416 = inttoptr i64 %381 to i64*
  %417 = load i64, i64* %416
  store i64 %417, i64* %3, align 8, !alias.scope !3373, !noalias !3376
  store i64 %380, i64* %17, align 8, !alias.scope !3373, !noalias !3376
  %418 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2112), i64 %378, i64 %383, i64 %384, i64 %385, i64 %386, i64 %388, i64 %391, i64 %394, i64 %397, i64 %400, i64 %403, i64 %406, i64 %409, i64 %412, i64 %415), !noalias !3373
  %419 = load i64, i64* %3, align 8
  %420 = load i64, i64* %18, align 8
  %421 = add i64 %420, 40
  %422 = inttoptr i64 %421 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %15, align 8, !tbaa !1240
  %424 = add i64 %420, -240
  %425 = trunc i64 %418 to i32
  %426 = inttoptr i64 %424 to i32*
  store i32 %425, i32* %426
  %427 = add i64 %419, 27
  %428 = load i64, i64* %17, align 8, !tbaa !1240
  %429 = add i64 %428, -8
  %430 = inttoptr i64 %429 to i64*
  store i64 %427, i64* %430
  %431 = load i64, i64* %154, align 8, !alias.scope !3378, !noalias !3381
  %432 = load i64, i64* %153, align 8, !alias.scope !3378, !noalias !3381
  %433 = load i64, i64* %156, align 8, !alias.scope !3378, !noalias !3381
  %434 = load i64, i64* %157, align 8, !alias.scope !3378, !noalias !3381
  %435 = inttoptr i64 %428 to i64*
  %436 = load i64, i64* %435
  %437 = add i64 %428, 8
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %428, 16
  %441 = inttoptr i64 %440 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %428, 24
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = add i64 %428, 32
  %447 = inttoptr i64 %446 to i64*
  %448 = load i64, i64* %447
  %449 = add i64 %428, 40
  %450 = inttoptr i64 %449 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %428, 48
  %453 = inttoptr i64 %452 to i64*
  %454 = load i64, i64* %453
  %455 = add i64 %428, 56
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  %458 = add i64 %428, 64
  %459 = inttoptr i64 %458 to i64*
  %460 = load i64, i64* %459
  %461 = add i64 %428, 72
  %462 = inttoptr i64 %461 to i64*
  %463 = load i64, i64* %462
  %464 = inttoptr i64 %429 to i64*
  %465 = load i64, i64* %464
  store i64 %465, i64* %3, align 8, !alias.scope !3378, !noalias !3381
  store i64 %428, i64* %17, align 8, !alias.scope !3378, !noalias !3381
  %466 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2149), i64 %423, i64 %431, i64 %432, i64 %433, i64 %434, i64 %436, i64 %439, i64 %442, i64 %445, i64 %448, i64 %451, i64 %454, i64 %457, i64 %460, i64 %463), !noalias !3378
  %467 = load i64, i64* %3, align 8
  %468 = load i64, i64* %18, align 8
  %469 = add i64 %468, -244
  %470 = trunc i64 %466 to i32
  %471 = inttoptr i64 %469 to i32*
  store i32 %470, i32* %471
  %472 = add i64 %467, 23
  %473 = load i64, i64* %17, align 8, !tbaa !1240
  %474 = add i64 %473, -8
  %475 = inttoptr i64 %474 to i64*
  store i64 %472, i64* %475
  %476 = load i64, i64* %155, align 8, !alias.scope !3383, !noalias !3386
  %477 = load i64, i64* %154, align 8, !alias.scope !3383, !noalias !3386
  %478 = load i64, i64* %153, align 8, !alias.scope !3383, !noalias !3386
  %479 = load i64, i64* %156, align 8, !alias.scope !3383, !noalias !3386
  %480 = load i64, i64* %157, align 8, !alias.scope !3383, !noalias !3386
  %481 = inttoptr i64 %473 to i64*
  %482 = load i64, i64* %481
  %483 = add i64 %473, 8
  %484 = inttoptr i64 %483 to i64*
  %485 = load i64, i64* %484
  %486 = add i64 %473, 16
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  %489 = add i64 %473, 24
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %473, 32
  %493 = inttoptr i64 %492 to i64*
  %494 = load i64, i64* %493
  %495 = add i64 %473, 40
  %496 = inttoptr i64 %495 to i64*
  %497 = load i64, i64* %496
  %498 = add i64 %473, 48
  %499 = inttoptr i64 %498 to i64*
  %500 = load i64, i64* %499
  %501 = add i64 %473, 56
  %502 = inttoptr i64 %501 to i64*
  %503 = load i64, i64* %502
  %504 = add i64 %473, 64
  %505 = inttoptr i64 %504 to i64*
  %506 = load i64, i64* %505
  %507 = add i64 %473, 72
  %508 = inttoptr i64 %507 to i64*
  %509 = load i64, i64* %508
  %510 = inttoptr i64 %474 to i64*
  %511 = load i64, i64* %510
  store i64 %511, i64* %3, align 8, !alias.scope !3383, !noalias !3386
  store i64 %473, i64* %17, align 8, !alias.scope !3383, !noalias !3386
  %512 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2186), i64 %476, i64 %477, i64 %478, i64 %479, i64 %480, i64 %482, i64 %485, i64 %488, i64 %491, i64 %494, i64 %497, i64 %500, i64 %503, i64 %506, i64 %509), !noalias !3383
  %513 = load i64, i64* %3, align 8
  %514 = load i64, i64* %18, align 8
  %515 = add i64 %514, 48
  %516 = inttoptr i64 %515 to i64*
  %517 = load i64, i64* %516
  %518 = add i64 %514, -248
  %519 = trunc i64 %512 to i32
  %520 = inttoptr i64 %518 to i32*
  store i32 %519, i32* %520
  %521 = add i64 %513, 27
  %522 = load i64, i64* %17, align 8, !tbaa !1240
  %523 = add i64 %522, -8
  %524 = inttoptr i64 %523 to i64*
  store i64 %521, i64* %524
  %525 = load i64, i64* %154, align 8, !alias.scope !3388, !noalias !3391
  %526 = load i64, i64* %153, align 8, !alias.scope !3388, !noalias !3391
  %527 = load i64, i64* %156, align 8, !alias.scope !3388, !noalias !3391
  %528 = load i64, i64* %157, align 8, !alias.scope !3388, !noalias !3391
  %529 = inttoptr i64 %522 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %522, 8
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %522, 16
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %522, 24
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %522, 32
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %522, 40
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %522, 48
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = add i64 %522, 56
  %550 = inttoptr i64 %549 to i64*
  %551 = load i64, i64* %550
  %552 = add i64 %522, 64
  %553 = inttoptr i64 %552 to i64*
  %554 = load i64, i64* %553
  %555 = add i64 %522, 72
  %556 = inttoptr i64 %555 to i64*
  %557 = load i64, i64* %556
  %558 = inttoptr i64 %523 to i64*
  %559 = load i64, i64* %558
  store i64 %559, i64* %3, align 8, !alias.scope !3388, !noalias !3391
  store i64 %522, i64* %17, align 8, !alias.scope !3388, !noalias !3391
  %560 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 5628), i64 %517, i64 %525, i64 %526, i64 %527, i64 %528, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548, i64 %551, i64 %554, i64 %557), !noalias !3388
  %561 = load i64, i64* %3, align 8
  %562 = load i64, i64* %18, align 8
  %563 = add i64 %562, 56
  %564 = inttoptr i64 %563 to i64*
  %565 = load i64, i64* %564
  %566 = add i64 %562, -252
  %567 = trunc i64 %560 to i32
  %568 = inttoptr i64 %566 to i32*
  store i32 %567, i32* %568
  %569 = add i64 %561, 27
  %570 = load i64, i64* %17, align 8, !tbaa !1240
  %571 = add i64 %570, -8
  %572 = inttoptr i64 %571 to i64*
  store i64 %569, i64* %572
  %573 = load i64, i64* %154, align 8, !alias.scope !3393, !noalias !3396
  %574 = load i64, i64* %153, align 8, !alias.scope !3393, !noalias !3396
  %575 = load i64, i64* %156, align 8, !alias.scope !3393, !noalias !3396
  %576 = load i64, i64* %157, align 8, !alias.scope !3393, !noalias !3396
  %577 = inttoptr i64 %570 to i64*
  %578 = load i64, i64* %577
  %579 = add i64 %570, 8
  %580 = inttoptr i64 %579 to i64*
  %581 = load i64, i64* %580
  %582 = add i64 %570, 16
  %583 = inttoptr i64 %582 to i64*
  %584 = load i64, i64* %583
  %585 = add i64 %570, 24
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  %588 = add i64 %570, 32
  %589 = inttoptr i64 %588 to i64*
  %590 = load i64, i64* %589
  %591 = add i64 %570, 40
  %592 = inttoptr i64 %591 to i64*
  %593 = load i64, i64* %592
  %594 = add i64 %570, 48
  %595 = inttoptr i64 %594 to i64*
  %596 = load i64, i64* %595
  %597 = add i64 %570, 56
  %598 = inttoptr i64 %597 to i64*
  %599 = load i64, i64* %598
  %600 = add i64 %570, 64
  %601 = inttoptr i64 %600 to i64*
  %602 = load i64, i64* %601
  %603 = add i64 %570, 72
  %604 = inttoptr i64 %603 to i64*
  %605 = load i64, i64* %604
  %606 = inttoptr i64 %571 to i64*
  %607 = load i64, i64* %606
  store i64 %607, i64* %3, align 8, !alias.scope !3393, !noalias !3396
  store i64 %570, i64* %17, align 8, !alias.scope !3393, !noalias !3396
  %608 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2206), i64 %565, i64 %573, i64 %574, i64 %575, i64 %576, i64 %578, i64 %581, i64 %584, i64 %587, i64 %590, i64 %593, i64 %596, i64 %599, i64 %602, i64 %605), !noalias !3393
  %609 = load i64, i64* %3, align 8
  %610 = load i64, i64* %18, align 8
  %611 = add i64 %610, 64
  %612 = inttoptr i64 %611 to i64*
  %613 = load i64, i64* %612
  %614 = add i64 %610, -256
  %615 = trunc i64 %608 to i32
  %616 = inttoptr i64 %614 to i32*
  store i32 %615, i32* %616
  %617 = add i64 %609, 27
  %618 = load i64, i64* %17, align 8, !tbaa !1240
  %619 = add i64 %618, -8
  %620 = inttoptr i64 %619 to i64*
  store i64 %617, i64* %620
  %621 = load i64, i64* %154, align 8, !alias.scope !3398, !noalias !3401
  %622 = load i64, i64* %153, align 8, !alias.scope !3398, !noalias !3401
  %623 = load i64, i64* %156, align 8, !alias.scope !3398, !noalias !3401
  %624 = load i64, i64* %157, align 8, !alias.scope !3398, !noalias !3401
  %625 = inttoptr i64 %618 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %618, 8
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %618, 16
  %631 = inttoptr i64 %630 to i64*
  %632 = load i64, i64* %631
  %633 = add i64 %618, 24
  %634 = inttoptr i64 %633 to i64*
  %635 = load i64, i64* %634
  %636 = add i64 %618, 32
  %637 = inttoptr i64 %636 to i64*
  %638 = load i64, i64* %637
  %639 = add i64 %618, 40
  %640 = inttoptr i64 %639 to i64*
  %641 = load i64, i64* %640
  %642 = add i64 %618, 48
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  %645 = add i64 %618, 56
  %646 = inttoptr i64 %645 to i64*
  %647 = load i64, i64* %646
  %648 = add i64 %618, 64
  %649 = inttoptr i64 %648 to i64*
  %650 = load i64, i64* %649
  %651 = add i64 %618, 72
  %652 = inttoptr i64 %651 to i64*
  %653 = load i64, i64* %652
  %654 = inttoptr i64 %619 to i64*
  %655 = load i64, i64* %654
  store i64 %655, i64* %3, align 8, !alias.scope !3398, !noalias !3401
  store i64 %618, i64* %17, align 8, !alias.scope !3398, !noalias !3401
  %656 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2229), i64 %613, i64 %621, i64 %622, i64 %623, i64 %624, i64 %626, i64 %629, i64 %632, i64 %635, i64 %638, i64 %641, i64 %644, i64 %647, i64 %650, i64 %653), !noalias !3398
  %657 = load i64, i64* %3, align 8
  %658 = load i64, i64* %18, align 8
  %659 = add i64 %658, 72
  %660 = inttoptr i64 %659 to i64*
  %661 = load i64, i64* %660
  %662 = add i64 %658, -260
  %663 = trunc i64 %656 to i32
  %664 = inttoptr i64 %662 to i32*
  store i32 %663, i32* %664
  %665 = add i64 %657, 27
  %666 = load i64, i64* %17, align 8, !tbaa !1240
  %667 = add i64 %666, -8
  %668 = inttoptr i64 %667 to i64*
  store i64 %665, i64* %668
  %669 = load i64, i64* %154, align 8, !alias.scope !3403, !noalias !3406
  %670 = load i64, i64* %153, align 8, !alias.scope !3403, !noalias !3406
  %671 = load i64, i64* %156, align 8, !alias.scope !3403, !noalias !3406
  %672 = load i64, i64* %157, align 8, !alias.scope !3403, !noalias !3406
  %673 = inttoptr i64 %666 to i64*
  %674 = load i64, i64* %673
  %675 = add i64 %666, 8
  %676 = inttoptr i64 %675 to i64*
  %677 = load i64, i64* %676
  %678 = add i64 %666, 16
  %679 = inttoptr i64 %678 to i64*
  %680 = load i64, i64* %679
  %681 = add i64 %666, 24
  %682 = inttoptr i64 %681 to i64*
  %683 = load i64, i64* %682
  %684 = add i64 %666, 32
  %685 = inttoptr i64 %684 to i64*
  %686 = load i64, i64* %685
  %687 = add i64 %666, 40
  %688 = inttoptr i64 %687 to i64*
  %689 = load i64, i64* %688
  %690 = add i64 %666, 48
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691
  %693 = add i64 %666, 56
  %694 = inttoptr i64 %693 to i64*
  %695 = load i64, i64* %694
  %696 = add i64 %666, 64
  %697 = inttoptr i64 %696 to i64*
  %698 = load i64, i64* %697
  %699 = add i64 %666, 72
  %700 = inttoptr i64 %699 to i64*
  %701 = load i64, i64* %700
  %702 = inttoptr i64 %667 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %3, align 8, !alias.scope !3403, !noalias !3406
  store i64 %666, i64* %17, align 8, !alias.scope !3403, !noalias !3406
  %704 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2252), i64 %661, i64 %669, i64 %670, i64 %671, i64 %672, i64 %674, i64 %677, i64 %680, i64 %683, i64 %686, i64 %689, i64 %692, i64 %695, i64 %698, i64 %701), !noalias !3403
  %705 = load i64, i64* %3, align 8
  %706 = load i64, i64* %18, align 8
  %707 = add i64 %706, 80
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = add i64 %706, -264
  %711 = trunc i64 %704 to i32
  %712 = inttoptr i64 %710 to i32*
  store i32 %711, i32* %712
  %713 = add i64 %705, 27
  %714 = load i64, i64* %17, align 8, !tbaa !1240
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716
  %717 = load i64, i64* %154, align 8, !alias.scope !3408, !noalias !3411
  %718 = load i64, i64* %153, align 8, !alias.scope !3408, !noalias !3411
  %719 = load i64, i64* %156, align 8, !alias.scope !3408, !noalias !3411
  %720 = load i64, i64* %157, align 8, !alias.scope !3408, !noalias !3411
  %721 = inttoptr i64 %714 to i64*
  %722 = load i64, i64* %721
  %723 = add i64 %714, 8
  %724 = inttoptr i64 %723 to i64*
  %725 = load i64, i64* %724
  %726 = add i64 %714, 16
  %727 = inttoptr i64 %726 to i64*
  %728 = load i64, i64* %727
  %729 = add i64 %714, 24
  %730 = inttoptr i64 %729 to i64*
  %731 = load i64, i64* %730
  %732 = add i64 %714, 32
  %733 = inttoptr i64 %732 to i64*
  %734 = load i64, i64* %733
  %735 = add i64 %714, 40
  %736 = inttoptr i64 %735 to i64*
  %737 = load i64, i64* %736
  %738 = add i64 %714, 48
  %739 = inttoptr i64 %738 to i64*
  %740 = load i64, i64* %739
  %741 = add i64 %714, 56
  %742 = inttoptr i64 %741 to i64*
  %743 = load i64, i64* %742
  %744 = add i64 %714, 64
  %745 = inttoptr i64 %744 to i64*
  %746 = load i64, i64* %745
  %747 = add i64 %714, 72
  %748 = inttoptr i64 %747 to i64*
  %749 = load i64, i64* %748
  %750 = inttoptr i64 %715 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %3, align 8, !alias.scope !3408, !noalias !3411
  store i64 %714, i64* %17, align 8, !alias.scope !3408, !noalias !3411
  %752 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2275), i64 %709, i64 %717, i64 %718, i64 %719, i64 %720, i64 %722, i64 %725, i64 %728, i64 %731, i64 %734, i64 %737, i64 %740, i64 %743, i64 %746, i64 %749), !noalias !3408
  %753 = load i64, i64* %3, align 8
  %754 = load i64, i64* %18, align 8
  %755 = add i64 %754, 88
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %15, align 8, !tbaa !1240
  %758 = add i64 %754, -268
  %759 = trunc i64 %752 to i32
  %760 = inttoptr i64 %758 to i32*
  store i32 %759, i32* %760
  %761 = add i64 %753, 27
  %762 = load i64, i64* %17, align 8, !tbaa !1240
  %763 = add i64 %762, -8
  %764 = inttoptr i64 %763 to i64*
  store i64 %761, i64* %764
  %765 = load i64, i64* %154, align 8, !alias.scope !3413, !noalias !3416
  %766 = load i64, i64* %153, align 8, !alias.scope !3413, !noalias !3416
  %767 = load i64, i64* %156, align 8, !alias.scope !3413, !noalias !3416
  %768 = load i64, i64* %157, align 8, !alias.scope !3413, !noalias !3416
  %769 = inttoptr i64 %762 to i64*
  %770 = load i64, i64* %769
  %771 = add i64 %762, 8
  %772 = inttoptr i64 %771 to i64*
  %773 = load i64, i64* %772
  %774 = add i64 %762, 16
  %775 = inttoptr i64 %774 to i64*
  %776 = load i64, i64* %775
  %777 = add i64 %762, 24
  %778 = inttoptr i64 %777 to i64*
  %779 = load i64, i64* %778
  %780 = add i64 %762, 32
  %781 = inttoptr i64 %780 to i64*
  %782 = load i64, i64* %781
  %783 = add i64 %762, 40
  %784 = inttoptr i64 %783 to i64*
  %785 = load i64, i64* %784
  %786 = add i64 %762, 48
  %787 = inttoptr i64 %786 to i64*
  %788 = load i64, i64* %787
  %789 = add i64 %762, 56
  %790 = inttoptr i64 %789 to i64*
  %791 = load i64, i64* %790
  %792 = add i64 %762, 64
  %793 = inttoptr i64 %792 to i64*
  %794 = load i64, i64* %793
  %795 = add i64 %762, 72
  %796 = inttoptr i64 %795 to i64*
  %797 = load i64, i64* %796
  %798 = inttoptr i64 %763 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %3, align 8, !alias.scope !3413, !noalias !3416
  store i64 %762, i64* %17, align 8, !alias.scope !3413, !noalias !3416
  %800 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2298), i64 %757, i64 %765, i64 %766, i64 %767, i64 %768, i64 %770, i64 %773, i64 %776, i64 %779, i64 %782, i64 %785, i64 %788, i64 %791, i64 %794, i64 %797), !noalias !3413
  %801 = load i64, i64* %3, align 8
  %802 = load i64, i64* %18, align 8
  %803 = add i64 %802, -272
  %804 = trunc i64 %800 to i32
  %805 = inttoptr i64 %803 to i32*
  store i32 %804, i32* %805
  %806 = add i64 %801, 23
  %807 = load i64, i64* %17, align 8, !tbaa !1240
  %808 = add i64 %807, -8
  %809 = inttoptr i64 %808 to i64*
  store i64 %806, i64* %809
  %810 = load i64, i64* %155, align 8, !alias.scope !3418, !noalias !3421
  %811 = load i64, i64* %154, align 8, !alias.scope !3418, !noalias !3421
  %812 = load i64, i64* %153, align 8, !alias.scope !3418, !noalias !3421
  %813 = load i64, i64* %156, align 8, !alias.scope !3418, !noalias !3421
  %814 = load i64, i64* %157, align 8, !alias.scope !3418, !noalias !3421
  %815 = inttoptr i64 %807 to i64*
  %816 = load i64, i64* %815
  %817 = add i64 %807, 8
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818
  %820 = add i64 %807, 16
  %821 = inttoptr i64 %820 to i64*
  %822 = load i64, i64* %821
  %823 = add i64 %807, 24
  %824 = inttoptr i64 %823 to i64*
  %825 = load i64, i64* %824
  %826 = add i64 %807, 32
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  %829 = add i64 %807, 40
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = add i64 %807, 48
  %833 = inttoptr i64 %832 to i64*
  %834 = load i64, i64* %833
  %835 = add i64 %807, 56
  %836 = inttoptr i64 %835 to i64*
  %837 = load i64, i64* %836
  %838 = add i64 %807, 64
  %839 = inttoptr i64 %838 to i64*
  %840 = load i64, i64* %839
  %841 = add i64 %807, 72
  %842 = inttoptr i64 %841 to i64*
  %843 = load i64, i64* %842
  %844 = inttoptr i64 %808 to i64*
  %845 = load i64, i64* %844
  store i64 %845, i64* %3, align 8, !alias.scope !3418, !noalias !3421
  store i64 %807, i64* %17, align 8, !alias.scope !3418, !noalias !3421
  %846 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2321), i64 %810, i64 %811, i64 %812, i64 %813, i64 %814, i64 %816, i64 %819, i64 %822, i64 %825, i64 %828, i64 %831, i64 %834, i64 %837, i64 %840, i64 %843), !noalias !3418
  %847 = load i64, i64* %3, align 8
  %848 = load i64, i64* %18, align 8
  %849 = add i64 %848, -276
  %850 = trunc i64 %846 to i32
  %851 = inttoptr i64 %849 to i32*
  store i32 %850, i32* %851
  %852 = add i64 %847, 23
  %853 = load i64, i64* %17, align 8, !tbaa !1240
  %854 = add i64 %853, -8
  %855 = inttoptr i64 %854 to i64*
  store i64 %852, i64* %855
  %856 = load i64, i64* %155, align 8, !alias.scope !3423, !noalias !3426
  %857 = load i64, i64* %154, align 8, !alias.scope !3423, !noalias !3426
  %858 = load i64, i64* %153, align 8, !alias.scope !3423, !noalias !3426
  %859 = load i64, i64* %156, align 8, !alias.scope !3423, !noalias !3426
  %860 = load i64, i64* %157, align 8, !alias.scope !3423, !noalias !3426
  %861 = inttoptr i64 %853 to i64*
  %862 = load i64, i64* %861
  %863 = add i64 %853, 8
  %864 = inttoptr i64 %863 to i64*
  %865 = load i64, i64* %864
  %866 = add i64 %853, 16
  %867 = inttoptr i64 %866 to i64*
  %868 = load i64, i64* %867
  %869 = add i64 %853, 24
  %870 = inttoptr i64 %869 to i64*
  %871 = load i64, i64* %870
  %872 = add i64 %853, 32
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %853, 40
  %876 = inttoptr i64 %875 to i64*
  %877 = load i64, i64* %876
  %878 = add i64 %853, 48
  %879 = inttoptr i64 %878 to i64*
  %880 = load i64, i64* %879
  %881 = add i64 %853, 56
  %882 = inttoptr i64 %881 to i64*
  %883 = load i64, i64* %882
  %884 = add i64 %853, 64
  %885 = inttoptr i64 %884 to i64*
  %886 = load i64, i64* %885
  %887 = add i64 %853, 72
  %888 = inttoptr i64 %887 to i64*
  %889 = load i64, i64* %888
  %890 = inttoptr i64 %854 to i64*
  %891 = load i64, i64* %890
  store i64 %891, i64* %3, align 8, !alias.scope !3423, !noalias !3426
  store i64 %853, i64* %17, align 8, !alias.scope !3423, !noalias !3426
  %892 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2362), i64 %856, i64 %857, i64 %858, i64 %859, i64 %860, i64 %862, i64 %865, i64 %868, i64 %871, i64 %874, i64 %877, i64 %880, i64 %883, i64 %886, i64 %889), !noalias !3423
  %893 = load i64, i64* %3, align 8
  %894 = load i64, i64* %18, align 8
  %895 = add i64 %894, -280
  %896 = trunc i64 %892 to i32
  %897 = inttoptr i64 %895 to i32*
  store i32 %896, i32* %897
  %898 = add i64 %893, 23
  %899 = load i64, i64* %17, align 8, !tbaa !1240
  %900 = add i64 %899, -8
  %901 = inttoptr i64 %900 to i64*
  store i64 %898, i64* %901
  %902 = load i64, i64* %155, align 8, !alias.scope !3428, !noalias !3431
  %903 = load i64, i64* %154, align 8, !alias.scope !3428, !noalias !3431
  %904 = load i64, i64* %153, align 8, !alias.scope !3428, !noalias !3431
  %905 = load i64, i64* %156, align 8, !alias.scope !3428, !noalias !3431
  %906 = load i64, i64* %157, align 8, !alias.scope !3428, !noalias !3431
  %907 = inttoptr i64 %899 to i64*
  %908 = load i64, i64* %907
  %909 = add i64 %899, 8
  %910 = inttoptr i64 %909 to i64*
  %911 = load i64, i64* %910
  %912 = add i64 %899, 16
  %913 = inttoptr i64 %912 to i64*
  %914 = load i64, i64* %913
  %915 = add i64 %899, 24
  %916 = inttoptr i64 %915 to i64*
  %917 = load i64, i64* %916
  %918 = add i64 %899, 32
  %919 = inttoptr i64 %918 to i64*
  %920 = load i64, i64* %919
  %921 = add i64 %899, 40
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  %924 = add i64 %899, 48
  %925 = inttoptr i64 %924 to i64*
  %926 = load i64, i64* %925
  %927 = add i64 %899, 56
  %928 = inttoptr i64 %927 to i64*
  %929 = load i64, i64* %928
  %930 = add i64 %899, 64
  %931 = inttoptr i64 %930 to i64*
  %932 = load i64, i64* %931
  %933 = add i64 %899, 72
  %934 = inttoptr i64 %933 to i64*
  %935 = load i64, i64* %934
  %936 = inttoptr i64 %900 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %3, align 8, !alias.scope !3428, !noalias !3431
  store i64 %899, i64* %17, align 8, !alias.scope !3428, !noalias !3431
  %938 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2401), i64 %902, i64 %903, i64 %904, i64 %905, i64 %906, i64 %908, i64 %911, i64 %914, i64 %917, i64 %920, i64 %923, i64 %926, i64 %929, i64 %932, i64 %935), !noalias !3428
  %939 = load i64, i64* %3, align 8
  %940 = load i64, i64* %18, align 8
  %941 = add i64 %940, -284
  %942 = trunc i64 %938 to i32
  %943 = inttoptr i64 %941 to i32*
  store i32 %942, i32* %943
  %944 = add i64 %939, 23
  %945 = load i64, i64* %17, align 8, !tbaa !1240
  %946 = add i64 %945, -8
  %947 = inttoptr i64 %946 to i64*
  store i64 %944, i64* %947
  %948 = load i64, i64* %155, align 8, !alias.scope !3433, !noalias !3436
  %949 = load i64, i64* %154, align 8, !alias.scope !3433, !noalias !3436
  %950 = load i64, i64* %153, align 8, !alias.scope !3433, !noalias !3436
  %951 = load i64, i64* %156, align 8, !alias.scope !3433, !noalias !3436
  %952 = load i64, i64* %157, align 8, !alias.scope !3433, !noalias !3436
  %953 = inttoptr i64 %945 to i64*
  %954 = load i64, i64* %953
  %955 = add i64 %945, 8
  %956 = inttoptr i64 %955 to i64*
  %957 = load i64, i64* %956
  %958 = add i64 %945, 16
  %959 = inttoptr i64 %958 to i64*
  %960 = load i64, i64* %959
  %961 = add i64 %945, 24
  %962 = inttoptr i64 %961 to i64*
  %963 = load i64, i64* %962
  %964 = add i64 %945, 32
  %965 = inttoptr i64 %964 to i64*
  %966 = load i64, i64* %965
  %967 = add i64 %945, 40
  %968 = inttoptr i64 %967 to i64*
  %969 = load i64, i64* %968
  %970 = add i64 %945, 48
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  %973 = add i64 %945, 56
  %974 = inttoptr i64 %973 to i64*
  %975 = load i64, i64* %974
  %976 = add i64 %945, 64
  %977 = inttoptr i64 %976 to i64*
  %978 = load i64, i64* %977
  %979 = add i64 %945, 72
  %980 = inttoptr i64 %979 to i64*
  %981 = load i64, i64* %980
  %982 = inttoptr i64 %946 to i64*
  %983 = load i64, i64* %982
  store i64 %983, i64* %3, align 8, !alias.scope !3433, !noalias !3436
  store i64 %945, i64* %17, align 8, !alias.scope !3433, !noalias !3436
  %984 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2435), i64 %948, i64 %949, i64 %950, i64 %951, i64 %952, i64 %954, i64 %957, i64 %960, i64 %963, i64 %966, i64 %969, i64 %972, i64 %975, i64 %978, i64 %981), !noalias !3433
  %985 = load i64, i64* %3, align 8
  %986 = load i64, i64* %18, align 8
  %987 = add i64 %986, -288
  %988 = trunc i64 %984 to i32
  %989 = inttoptr i64 %987 to i32*
  store i32 %988, i32* %989
  %990 = add i64 %985, 23
  %991 = load i64, i64* %17, align 8, !tbaa !1240
  %992 = add i64 %991, -8
  %993 = inttoptr i64 %992 to i64*
  store i64 %990, i64* %993
  %994 = load i64, i64* %155, align 8, !alias.scope !3438, !noalias !3441
  %995 = load i64, i64* %154, align 8, !alias.scope !3438, !noalias !3441
  %996 = load i64, i64* %153, align 8, !alias.scope !3438, !noalias !3441
  %997 = load i64, i64* %156, align 8, !alias.scope !3438, !noalias !3441
  %998 = load i64, i64* %157, align 8, !alias.scope !3438, !noalias !3441
  %999 = inttoptr i64 %991 to i64*
  %1000 = load i64, i64* %999
  %1001 = add i64 %991, 8
  %1002 = inttoptr i64 %1001 to i64*
  %1003 = load i64, i64* %1002
  %1004 = add i64 %991, 16
  %1005 = inttoptr i64 %1004 to i64*
  %1006 = load i64, i64* %1005
  %1007 = add i64 %991, 24
  %1008 = inttoptr i64 %1007 to i64*
  %1009 = load i64, i64* %1008
  %1010 = add i64 %991, 32
  %1011 = inttoptr i64 %1010 to i64*
  %1012 = load i64, i64* %1011
  %1013 = add i64 %991, 40
  %1014 = inttoptr i64 %1013 to i64*
  %1015 = load i64, i64* %1014
  %1016 = add i64 %991, 48
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = add i64 %991, 56
  %1020 = inttoptr i64 %1019 to i64*
  %1021 = load i64, i64* %1020
  %1022 = add i64 %991, 64
  %1023 = inttoptr i64 %1022 to i64*
  %1024 = load i64, i64* %1023
  %1025 = add i64 %991, 72
  %1026 = inttoptr i64 %1025 to i64*
  %1027 = load i64, i64* %1026
  %1028 = inttoptr i64 %992 to i64*
  %1029 = load i64, i64* %1028
  store i64 %1029, i64* %3, align 8, !alias.scope !3438, !noalias !3441
  store i64 %991, i64* %17, align 8, !alias.scope !3438, !noalias !3441
  %1030 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2456), i64 %994, i64 %995, i64 %996, i64 %997, i64 %998, i64 %1000, i64 %1003, i64 %1006, i64 %1009, i64 %1012, i64 %1015, i64 %1018, i64 %1021, i64 %1024, i64 %1027), !noalias !3438
  %1031 = load i64, i64* %3, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2322), i64* %16, align 8, !tbaa !1240
  %1032 = load i64, i64* %18, align 8
  %1033 = add i64 %1032, -292
  %1034 = trunc i64 %1030 to i32
  %1035 = inttoptr i64 %1033 to i32*
  store i32 %1034, i32* %1035
  %1036 = add i64 %1031, 23
  %1037 = load i64, i64* %17, align 8, !tbaa !1240
  %1038 = add i64 %1037, -8
  %1039 = inttoptr i64 %1038 to i64*
  store i64 %1036, i64* %1039
  %1040 = load i64, i64* %155, align 8, !alias.scope !3443, !noalias !3446
  %1041 = load i64, i64* %154, align 8, !alias.scope !3443, !noalias !3446
  %1042 = load i64, i64* %153, align 8, !alias.scope !3443, !noalias !3446
  %1043 = load i64, i64* %156, align 8, !alias.scope !3443, !noalias !3446
  %1044 = load i64, i64* %157, align 8, !alias.scope !3443, !noalias !3446
  %1045 = inttoptr i64 %1037 to i64*
  %1046 = load i64, i64* %1045
  %1047 = add i64 %1037, 8
  %1048 = inttoptr i64 %1047 to i64*
  %1049 = load i64, i64* %1048
  %1050 = add i64 %1037, 16
  %1051 = inttoptr i64 %1050 to i64*
  %1052 = load i64, i64* %1051
  %1053 = add i64 %1037, 24
  %1054 = inttoptr i64 %1053 to i64*
  %1055 = load i64, i64* %1054
  %1056 = add i64 %1037, 32
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  %1059 = add i64 %1037, 40
  %1060 = inttoptr i64 %1059 to i64*
  %1061 = load i64, i64* %1060
  %1062 = add i64 %1037, 48
  %1063 = inttoptr i64 %1062 to i64*
  %1064 = load i64, i64* %1063
  %1065 = add i64 %1037, 56
  %1066 = inttoptr i64 %1065 to i64*
  %1067 = load i64, i64* %1066
  %1068 = add i64 %1037, 64
  %1069 = inttoptr i64 %1068 to i64*
  %1070 = load i64, i64* %1069
  %1071 = add i64 %1037, 72
  %1072 = inttoptr i64 %1071 to i64*
  %1073 = load i64, i64* %1072
  store i64 %1037, i64* %17, align 8, !alias.scope !3443, !noalias !3446
  %1074 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2322), i64 %1040, i64 %1041, i64 %1042, i64 %1043, i64 %1044, i64 %1046, i64 %1049, i64 %1052, i64 %1055, i64 %1058, i64 %1061, i64 %1064, i64 %1067, i64 %1070, i64 %1073), !noalias !3443
  store i64 %1074, i64* %152, align 8, !alias.scope !3443, !noalias !3446
  %1075 = load i64, i64* %18, align 8
  %1076 = add i64 %1075, -296
  %1077 = trunc i64 %1074 to i32
  %1078 = inttoptr i64 %1076 to i32*
  store i32 %1077, i32* %1078
  %1079 = load i64, i64* %17, align 8
  %1080 = add i64 %1079, 264
  %1081 = icmp ugt i64 %1079, -265
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %47, align 1, !tbaa !1264
  %1083 = trunc i64 %1080 to i32
  %1084 = and i32 %1083, 255
  %1085 = tail call i32 @llvm.ctpop.i32(i32 %1084) #10
  %1086 = trunc i32 %1085 to i8
  %1087 = and i8 %1086, 1
  %1088 = xor i8 %1087, 1
  store i8 %1088, i8* %48, align 1, !tbaa !1278
  %1089 = xor i64 %1080, %1079
  %1090 = lshr i64 %1089, 4
  %1091 = trunc i64 %1090 to i8
  %1092 = and i8 %1091, 1
  store i8 %1092, i8* %49, align 1, !tbaa !1279
  %1093 = icmp eq i64 %1080, 0
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %50, align 1, !tbaa !1280
  %1095 = lshr i64 %1080, 63
  %1096 = trunc i64 %1095 to i8
  store i8 %1096, i8* %51, align 1, !tbaa !1281
  %1097 = lshr i64 %1079, 63
  %1098 = xor i64 %1095, %1097
  %1099 = add nuw nsw i64 %1098, %1095
  %1100 = icmp eq i64 %1099, 2
  %1101 = zext i1 %1100 to i8
  store i8 %1101, i8* %52, align 1, !tbaa !1282
  %1102 = add i64 %1079, 272
  %1103 = inttoptr i64 %1080 to i64*
  %1104 = load i64, i64* %1103
  store i64 %1104, i64* %14, align 8, !tbaa !1240
  %1105 = add i64 %1079, 280
  %1106 = inttoptr i64 %1102 to i64*
  %1107 = load i64, i64* %1106
  store i64 %1107, i64* %21, align 8, !tbaa !1240
  %1108 = add i64 %1079, 288
  %1109 = inttoptr i64 %1105 to i64*
  %1110 = load i64, i64* %1109
  store i64 %1110, i64* %22, align 8, !tbaa !1240
  %1111 = add i64 %1079, 296
  %1112 = inttoptr i64 %1108 to i64*
  %1113 = load i64, i64* %1112
  store i64 %1113, i64* %23, align 8, !tbaa !1240
  %1114 = add i64 %1079, 304
  %1115 = inttoptr i64 %1111 to i64*
  %1116 = load i64, i64* %1115
  store i64 %1116, i64* %24, align 8, !tbaa !1240
  %1117 = add i64 %1079, 312
  %1118 = inttoptr i64 %1114 to i64*
  %1119 = load i64, i64* %1118
  store i64 %1119, i64* %18, align 8, !tbaa !1240
  %1120 = inttoptr i64 %1117 to i64*
  %1121 = load i64, i64* %1120
  store i64 %1121, i64* %3, align 8, !tbaa !1240
  %1122 = add i64 %1079, 320
  store i64 %1122, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %374

block_403391:                                     ; preds = %block_4032fe
  %1123 = inttoptr i64 %1483 to i32*
  %1124 = load i32, i32* %1123
  %1125 = icmp eq i32 %1124, 0
  %1126 = select i1 %1125, i64 38, i64 10
  %1127 = add i64 %1494, %1126
  br i1 %1125, label %block_4033b7, label %block_40339b

block_40339b:                                     ; preds = %block_403391
  %1128 = add i64 %1127, 17
  %1129 = load i64, i64* %17, align 8, !tbaa !1240
  %1130 = add i64 %1129, -8
  %1131 = inttoptr i64 %1130 to i64*
  store i64 %1128, i64* %1131
  %1132 = load i64, i64* %155, align 8, !alias.scope !3448, !noalias !3451
  %1133 = load i64, i64* %154, align 8, !alias.scope !3448, !noalias !3451
  %1134 = load i64, i64* %153, align 8, !alias.scope !3448, !noalias !3451
  %1135 = load i64, i64* %156, align 8, !alias.scope !3448, !noalias !3451
  %1136 = load i64, i64* %157, align 8, !alias.scope !3448, !noalias !3451
  %1137 = inttoptr i64 %1129 to i64*
  %1138 = load i64, i64* %1137
  %1139 = add i64 %1129, 8
  %1140 = inttoptr i64 %1139 to i64*
  %1141 = load i64, i64* %1140
  %1142 = add i64 %1129, 16
  %1143 = inttoptr i64 %1142 to i64*
  %1144 = load i64, i64* %1143
  %1145 = add i64 %1129, 24
  %1146 = inttoptr i64 %1145 to i64*
  %1147 = load i64, i64* %1146
  %1148 = add i64 %1129, 32
  %1149 = inttoptr i64 %1148 to i64*
  %1150 = load i64, i64* %1149
  %1151 = add i64 %1129, 40
  %1152 = inttoptr i64 %1151 to i64*
  %1153 = load i64, i64* %1152
  %1154 = add i64 %1129, 48
  %1155 = inttoptr i64 %1154 to i64*
  %1156 = load i64, i64* %1155
  %1157 = add i64 %1129, 56
  %1158 = inttoptr i64 %1157 to i64*
  %1159 = load i64, i64* %1158
  %1160 = add i64 %1129, 64
  %1161 = inttoptr i64 %1160 to i64*
  %1162 = load i64, i64* %1161
  %1163 = add i64 %1129, 72
  %1164 = inttoptr i64 %1163 to i64*
  %1165 = load i64, i64* %1164
  %1166 = inttoptr i64 %1130 to i64*
  %1167 = load i64, i64* %1166
  store i64 %1167, i64* %3, align 8, !alias.scope !3448, !noalias !3451
  store i64 %1129, i64* %17, align 8, !alias.scope !3448, !noalias !3451
  %1168 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2022), i64 %1132, i64 %1133, i64 %1134, i64 %1135, i64 %1136, i64 %1138, i64 %1141, i64 %1144, i64 %1147, i64 %1150, i64 %1153, i64 %1156, i64 %1159, i64 %1162, i64 %1165), !noalias !3448
  %1169 = load i64, i64* %18, align 8
  %1170 = add i64 %1169, -232
  %1171 = trunc i64 %1168 to i32
  %1172 = load i64, i64* %3, align 8
  %1173 = inttoptr i64 %1170 to i32*
  store i32 %1171, i32* %1173
  %1174 = add i64 %1172, 34
  br label %block_4033d3

block_4032be:                                     ; preds = %block_4032b1, %block_40329f
  %1175 = phi i64 [ %266, %block_40329f ], [ %1238, %block_4032b1 ]
  %1176 = phi %struct.Memory* [ %2, %block_40329f ], [ %2, %block_4032b1 ]
  %1177 = inttoptr i64 %259 to i64*
  %1178 = load i64, i64* %1177
  %1179 = add i64 %1175, 21
  %1180 = load i64, i64* %17, align 8, !tbaa !1240
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1179, i64* %1182
  %1183 = load i64, i64* %154, align 8, !alias.scope !3453, !noalias !3456
  %1184 = load i64, i64* %153, align 8, !alias.scope !3453, !noalias !3456
  %1185 = load i64, i64* %156, align 8, !alias.scope !3453, !noalias !3456
  %1186 = load i64, i64* %157, align 8, !alias.scope !3453, !noalias !3456
  %1187 = inttoptr i64 %1180 to i64*
  %1188 = load i64, i64* %1187
  %1189 = add i64 %1180, 8
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1180, 16
  %1193 = inttoptr i64 %1192 to i64*
  %1194 = load i64, i64* %1193
  %1195 = add i64 %1180, 24
  %1196 = inttoptr i64 %1195 to i64*
  %1197 = load i64, i64* %1196
  %1198 = add i64 %1180, 32
  %1199 = inttoptr i64 %1198 to i64*
  %1200 = load i64, i64* %1199
  %1201 = add i64 %1180, 40
  %1202 = inttoptr i64 %1201 to i64*
  %1203 = load i64, i64* %1202
  %1204 = add i64 %1180, 48
  %1205 = inttoptr i64 %1204 to i64*
  %1206 = load i64, i64* %1205
  %1207 = add i64 %1180, 56
  %1208 = inttoptr i64 %1207 to i64*
  %1209 = load i64, i64* %1208
  %1210 = add i64 %1180, 64
  %1211 = inttoptr i64 %1210 to i64*
  %1212 = load i64, i64* %1211
  %1213 = add i64 %1180, 72
  %1214 = inttoptr i64 %1213 to i64*
  %1215 = load i64, i64* %1214
  %1216 = inttoptr i64 %1181 to i64*
  %1217 = load i64, i64* %1216
  store i64 %1217, i64* %3, align 8, !alias.scope !3453, !noalias !3456
  store i64 %1180, i64* %17, align 8, !alias.scope !3453, !noalias !3456
  %1218 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1755), i64 %1178, i64 %1183, i64 %1184, i64 %1185, i64 %1186, i64 %1188, i64 %1191, i64 %1194, i64 %1197, i64 %1200, i64 %1203, i64 %1206, i64 %1209, i64 %1212, i64 %1215), !noalias !3453
  %1219 = load i64, i64* %18, align 8
  %1220 = add i64 %1219, -204
  %1221 = trunc i64 %1218 to i32
  %1222 = load i64, i64* %3, align 8
  %1223 = inttoptr i64 %1220 to i32*
  store i32 %1221, i32* %1223
  %1224 = add i64 %1222, 43
  br label %block_4032fe

block_4032b1:                                     ; preds = %block_40329f
  %1225 = sext i32 %263 to i64
  %1226 = inttoptr i64 %259 to i64*
  %1227 = load i64, i64* %1226
  %1228 = sext i32 %263 to i128
  %1229 = and i128 %1228, -18446744073709551616
  %1230 = sext i64 %1227 to i128
  %1231 = and i128 %1230, -18446744073709551616
  %1232 = zext i64 %1225 to i128
  %1233 = or i128 %1229, %1232
  %1234 = zext i64 %1227 to i128
  %1235 = or i128 %1231, %1234
  %1236 = mul nsw i128 %1235, %1233
  %1237 = trunc i128 %1236 to i64
  %1238 = add i64 %266, 13
  %1239 = inttoptr i64 %259 to i64*
  store i64 %1237, i64* %1239
  br label %block_4032be

block_403375:                                     ; preds = %block_4032fe
  %1240 = add i64 %1494, 17
  %1241 = load i64, i64* %17, align 8, !tbaa !1240
  %1242 = add i64 %1241, -8
  %1243 = inttoptr i64 %1242 to i64*
  store i64 %1240, i64* %1243
  %1244 = load i64, i64* %155, align 8, !alias.scope !3458, !noalias !3461
  %1245 = load i64, i64* %154, align 8, !alias.scope !3458, !noalias !3461
  %1246 = load i64, i64* %153, align 8, !alias.scope !3458, !noalias !3461
  %1247 = load i64, i64* %156, align 8, !alias.scope !3458, !noalias !3461
  %1248 = load i64, i64* %157, align 8, !alias.scope !3458, !noalias !3461
  %1249 = inttoptr i64 %1241 to i64*
  %1250 = load i64, i64* %1249
  %1251 = add i64 %1241, 8
  %1252 = inttoptr i64 %1251 to i64*
  %1253 = load i64, i64* %1252
  %1254 = add i64 %1241, 16
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1241, 24
  %1258 = inttoptr i64 %1257 to i64*
  %1259 = load i64, i64* %1258
  %1260 = add i64 %1241, 32
  %1261 = inttoptr i64 %1260 to i64*
  %1262 = load i64, i64* %1261
  %1263 = add i64 %1241, 40
  %1264 = inttoptr i64 %1263 to i64*
  %1265 = load i64, i64* %1264
  %1266 = add i64 %1241, 48
  %1267 = inttoptr i64 %1266 to i64*
  %1268 = load i64, i64* %1267
  %1269 = add i64 %1241, 56
  %1270 = inttoptr i64 %1269 to i64*
  %1271 = load i64, i64* %1270
  %1272 = add i64 %1241, 64
  %1273 = inttoptr i64 %1272 to i64*
  %1274 = load i64, i64* %1273
  %1275 = add i64 %1241, 72
  %1276 = inttoptr i64 %1275 to i64*
  %1277 = load i64, i64* %1276
  %1278 = inttoptr i64 %1242 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %3, align 8, !alias.scope !3458, !noalias !3461
  store i64 %1241, i64* %17, align 8, !alias.scope !3458, !noalias !3461
  %1280 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1977), i64 %1244, i64 %1245, i64 %1246, i64 %1247, i64 %1248, i64 %1250, i64 %1253, i64 %1256, i64 %1259, i64 %1262, i64 %1265, i64 %1268, i64 %1271, i64 %1274, i64 %1277), !noalias !3458
  %1281 = load i64, i64* %18, align 8
  %1282 = add i64 %1281, -228
  %1283 = trunc i64 %1280 to i32
  %1284 = load i64, i64* %3, align 8
  %1285 = add i64 %1284, 6
  %1286 = inttoptr i64 %1282 to i32*
  store i32 %1283, i32* %1286
  br label %block_4033d3

block_4032fe:                                     ; preds = %block_4032be, %block_4032de
  %1287 = phi i64 [ %365, %block_4032de ], [ %1219, %block_4032be ]
  %1288 = phi i64 [ %369, %block_4032de ], [ %1224, %block_4032be ]
  %1289 = phi %struct.Memory* [ %2, %block_4032de ], [ %1176, %block_4032be ]
  %1290 = add i64 %1287, -68
  %1291 = inttoptr i64 %1290 to i32*
  %1292 = load i32, i32* %1291
  %1293 = zext i32 %1292 to i64
  store i64 %1293, i64* %15, align 8, !tbaa !1240
  %1294 = add i64 %1288, 20
  %1295 = load i64, i64* %17, align 8, !tbaa !1240
  %1296 = add i64 %1295, -8
  %1297 = inttoptr i64 %1296 to i64*
  store i64 %1294, i64* %1297
  %1298 = load i64, i64* %154, align 8, !alias.scope !3463, !noalias !3466
  %1299 = load i64, i64* %153, align 8, !alias.scope !3463, !noalias !3466
  %1300 = load i64, i64* %156, align 8, !alias.scope !3463, !noalias !3466
  %1301 = load i64, i64* %157, align 8, !alias.scope !3463, !noalias !3466
  %1302 = inttoptr i64 %1295 to i64*
  %1303 = load i64, i64* %1302
  %1304 = add i64 %1295, 8
  %1305 = inttoptr i64 %1304 to i64*
  %1306 = load i64, i64* %1305
  %1307 = add i64 %1295, 16
  %1308 = inttoptr i64 %1307 to i64*
  %1309 = load i64, i64* %1308
  %1310 = add i64 %1295, 24
  %1311 = inttoptr i64 %1310 to i64*
  %1312 = load i64, i64* %1311
  %1313 = add i64 %1295, 32
  %1314 = inttoptr i64 %1313 to i64*
  %1315 = load i64, i64* %1314
  %1316 = add i64 %1295, 40
  %1317 = inttoptr i64 %1316 to i64*
  %1318 = load i64, i64* %1317
  %1319 = add i64 %1295, 48
  %1320 = inttoptr i64 %1319 to i64*
  %1321 = load i64, i64* %1320
  %1322 = add i64 %1295, 56
  %1323 = inttoptr i64 %1322 to i64*
  %1324 = load i64, i64* %1323
  %1325 = add i64 %1295, 64
  %1326 = inttoptr i64 %1325 to i64*
  %1327 = load i64, i64* %1326
  %1328 = add i64 %1295, 72
  %1329 = inttoptr i64 %1328 to i64*
  %1330 = load i64, i64* %1329
  %1331 = inttoptr i64 %1296 to i64*
  %1332 = load i64, i64* %1331
  store i64 %1332, i64* %3, align 8, !alias.scope !3463, !noalias !3466
  store i64 %1295, i64* %17, align 8, !alias.scope !3463, !noalias !3466
  %1333 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1837), i64 %1293, i64 %1298, i64 %1299, i64 %1300, i64 %1301, i64 %1303, i64 %1306, i64 %1309, i64 %1312, i64 %1315, i64 %1318, i64 %1321, i64 %1324, i64 %1327, i64 %1330), !noalias !3463
  %1334 = load i64, i64* %3, align 8
  %1335 = load i64, i64* %18, align 8
  %1336 = add i64 %1335, -80
  %1337 = inttoptr i64 %1336 to double*
  %1338 = load double, double* %1337
  store double %1338, double* %111, align 1, !tbaa !1439
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1340 = bitcast i64* %1339 to double*
  store double 0.000000e+00, double* %1340, align 1, !tbaa !1439
  %1341 = add i64 %1335, -212
  %1342 = trunc i64 %1333 to i32
  %1343 = inttoptr i64 %1341 to i32*
  store i32 %1342, i32* %1343
  %1344 = add i64 %1334, 28
  %1345 = load i64, i64* %17, align 8, !tbaa !1240
  %1346 = add i64 %1345, -8
  %1347 = inttoptr i64 %1346 to i64*
  store i64 %1344, i64* %1347
  %1348 = load i64, i64* %155, align 8, !alias.scope !3468, !noalias !3471
  %1349 = load i64, i64* %154, align 8, !alias.scope !3468, !noalias !3471
  %1350 = load i64, i64* %153, align 8, !alias.scope !3468, !noalias !3471
  %1351 = load i64, i64* %156, align 8, !alias.scope !3468, !noalias !3471
  %1352 = load i64, i64* %157, align 8, !alias.scope !3468, !noalias !3471
  %1353 = inttoptr i64 %1345 to i64*
  %1354 = load i64, i64* %1353
  %1355 = add i64 %1345, 8
  %1356 = inttoptr i64 %1355 to i64*
  %1357 = load i64, i64* %1356
  %1358 = add i64 %1345, 16
  %1359 = inttoptr i64 %1358 to i64*
  %1360 = load i64, i64* %1359
  %1361 = add i64 %1345, 24
  %1362 = inttoptr i64 %1361 to i64*
  %1363 = load i64, i64* %1362
  %1364 = add i64 %1345, 32
  %1365 = inttoptr i64 %1364 to i64*
  %1366 = load i64, i64* %1365
  %1367 = add i64 %1345, 40
  %1368 = inttoptr i64 %1367 to i64*
  %1369 = load i64, i64* %1368
  %1370 = add i64 %1345, 48
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1345, 56
  %1374 = inttoptr i64 %1373 to i64*
  %1375 = load i64, i64* %1374
  %1376 = add i64 %1345, 64
  %1377 = inttoptr i64 %1376 to i64*
  %1378 = load i64, i64* %1377
  %1379 = add i64 %1345, 72
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = inttoptr i64 %1346 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %3, align 8, !alias.scope !3468, !noalias !3471
  store i64 %1345, i64* %17, align 8, !alias.scope !3468, !noalias !3471
  %1384 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1874), i64 %1348, i64 %1349, i64 %1350, i64 %1351, i64 %1352, i64 %1354, i64 %1357, i64 %1360, i64 %1363, i64 %1366, i64 %1369, i64 %1372, i64 %1375, i64 %1378, i64 %1381), !noalias !3468
  %1385 = load i64, i64* %3, align 8
  %1386 = load i64, i64* %18, align 8
  %1387 = add i64 %1386, -88
  %1388 = inttoptr i64 %1387 to double*
  %1389 = load double, double* %1388
  store double %1389, double* %111, align 1, !tbaa !1439
  store double 0.000000e+00, double* %1340, align 1, !tbaa !1439
  %1390 = add i64 %1386, -216
  %1391 = trunc i64 %1384 to i32
  %1392 = inttoptr i64 %1390 to i32*
  store i32 %1391, i32* %1392
  %1393 = add i64 %1385, 28
  %1394 = load i64, i64* %17, align 8, !tbaa !1240
  %1395 = add i64 %1394, -8
  %1396 = inttoptr i64 %1395 to i64*
  store i64 %1393, i64* %1396
  %1397 = load i64, i64* %155, align 8, !alias.scope !3473, !noalias !3476
  %1398 = load i64, i64* %154, align 8, !alias.scope !3473, !noalias !3476
  %1399 = load i64, i64* %153, align 8, !alias.scope !3473, !noalias !3476
  %1400 = load i64, i64* %156, align 8, !alias.scope !3473, !noalias !3476
  %1401 = load i64, i64* %157, align 8, !alias.scope !3473, !noalias !3476
  %1402 = inttoptr i64 %1394 to i64*
  %1403 = load i64, i64* %1402
  %1404 = add i64 %1394, 8
  %1405 = inttoptr i64 %1404 to i64*
  %1406 = load i64, i64* %1405
  %1407 = add i64 %1394, 16
  %1408 = inttoptr i64 %1407 to i64*
  %1409 = load i64, i64* %1408
  %1410 = add i64 %1394, 24
  %1411 = inttoptr i64 %1410 to i64*
  %1412 = load i64, i64* %1411
  %1413 = add i64 %1394, 32
  %1414 = inttoptr i64 %1413 to i64*
  %1415 = load i64, i64* %1414
  %1416 = add i64 %1394, 40
  %1417 = inttoptr i64 %1416 to i64*
  %1418 = load i64, i64* %1417
  %1419 = add i64 %1394, 48
  %1420 = inttoptr i64 %1419 to i64*
  %1421 = load i64, i64* %1420
  %1422 = add i64 %1394, 56
  %1423 = inttoptr i64 %1422 to i64*
  %1424 = load i64, i64* %1423
  %1425 = add i64 %1394, 64
  %1426 = inttoptr i64 %1425 to i64*
  %1427 = load i64, i64* %1426
  %1428 = add i64 %1394, 72
  %1429 = inttoptr i64 %1428 to i64*
  %1430 = load i64, i64* %1429
  %1431 = inttoptr i64 %1395 to i64*
  %1432 = load i64, i64* %1431
  store i64 %1432, i64* %3, align 8, !alias.scope !3473, !noalias !3476
  store i64 %1394, i64* %17, align 8, !alias.scope !3473, !noalias !3476
  %1433 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1913), i64 %1397, i64 %1398, i64 %1399, i64 %1400, i64 %1401, i64 %1403, i64 %1406, i64 %1409, i64 %1412, i64 %1415, i64 %1418, i64 %1421, i64 %1424, i64 %1427, i64 %1430), !noalias !3473
  %1434 = load i64, i64* %3, align 8
  %1435 = load i64, i64* %18, align 8
  %1436 = add i64 %1435, 16
  %1437 = inttoptr i64 %1436 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %15, align 8, !tbaa !1240
  %1439 = add i64 %1435, -220
  %1440 = trunc i64 %1433 to i32
  %1441 = inttoptr i64 %1439 to i32*
  store i32 %1440, i32* %1441
  %1442 = add i64 %1434, 27
  %1443 = load i64, i64* %17, align 8, !tbaa !1240
  %1444 = add i64 %1443, -8
  %1445 = inttoptr i64 %1444 to i64*
  store i64 %1442, i64* %1445
  %1446 = load i64, i64* %154, align 8, !alias.scope !3478, !noalias !3481
  %1447 = load i64, i64* %153, align 8, !alias.scope !3478, !noalias !3481
  %1448 = load i64, i64* %156, align 8, !alias.scope !3478, !noalias !3481
  %1449 = load i64, i64* %157, align 8, !alias.scope !3478, !noalias !3481
  %1450 = inttoptr i64 %1443 to i64*
  %1451 = load i64, i64* %1450
  %1452 = add i64 %1443, 8
  %1453 = inttoptr i64 %1452 to i64*
  %1454 = load i64, i64* %1453
  %1455 = add i64 %1443, 16
  %1456 = inttoptr i64 %1455 to i64*
  %1457 = load i64, i64* %1456
  %1458 = add i64 %1443, 24
  %1459 = inttoptr i64 %1458 to i64*
  %1460 = load i64, i64* %1459
  %1461 = add i64 %1443, 32
  %1462 = inttoptr i64 %1461 to i64*
  %1463 = load i64, i64* %1462
  %1464 = add i64 %1443, 40
  %1465 = inttoptr i64 %1464 to i64*
  %1466 = load i64, i64* %1465
  %1467 = add i64 %1443, 48
  %1468 = inttoptr i64 %1467 to i64*
  %1469 = load i64, i64* %1468
  %1470 = add i64 %1443, 56
  %1471 = inttoptr i64 %1470 to i64*
  %1472 = load i64, i64* %1471
  %1473 = add i64 %1443, 64
  %1474 = inttoptr i64 %1473 to i64*
  %1475 = load i64, i64* %1474
  %1476 = add i64 %1443, 72
  %1477 = inttoptr i64 %1476 to i64*
  %1478 = load i64, i64* %1477
  %1479 = inttoptr i64 %1444 to i64*
  %1480 = load i64, i64* %1479
  store i64 %1480, i64* %3, align 8, !alias.scope !3478, !noalias !3481
  store i64 %1443, i64* %17, align 8, !alias.scope !3478, !noalias !3481
  %1481 = tail call i64 @printf(i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1952), i64 %1438, i64 %1446, i64 %1447, i64 %1448, i64 %1449, i64 %1451, i64 %1454, i64 %1457, i64 %1460, i64 %1463, i64 %1466, i64 %1469, i64 %1472, i64 %1475, i64 %1478), !noalias !3478
  %1482 = load i64, i64* %18, align 8
  %1483 = add i64 %1482, 24
  %1484 = load i64, i64* %3, align 8
  %1485 = inttoptr i64 %1483 to i32*
  %1486 = load i32, i32* %1485
  %1487 = lshr i32 %1486, 31
  %1488 = trunc i32 %1487 to i8
  %1489 = add i64 %1482, -224
  %1490 = trunc i64 %1481 to i32
  %1491 = inttoptr i64 %1489 to i32*
  store i32 %1490, i32* %1491
  %1492 = icmp ne i8 %1488, 0
  %1493 = select i1 %1492, i64 16, i64 44
  %1494 = add i64 %1484, %1493
  br i1 %1492, label %block_403375, label %block_403391
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_408ba0_GetSmallestParent(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_408ba0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %13, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18
  store i64 %17, i64* %14, align 8, !tbaa !1240
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %25 = add i64 %16, -16
  %26 = load i64, i64* %12, align 8
  %27 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %27
  %28 = add i64 %16, -20
  %29 = load i32, i32* %7, align 4
  %30 = inttoptr i64 %28 to i32*
  store i32 %29, i32* %30
  %31 = inttoptr i64 %28 to i32*
  %32 = load i32, i32* %31
  %33 = zext i32 %32 to i64
  store i64 %33, i64* %11, align 8, !tbaa !1240
  store i64 %33, i64* %12, align 8, !tbaa !1240
  %34 = add i64 %1, -112
  %35 = add i64 %1, 25
  %36 = add i64 %16, -80
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37
  store i64 %36, i64* %13, align 8, !tbaa !1240
  %38 = tail call %struct.Memory* @sub_408b30_NumberOfOnes(%struct.State* nonnull %0, i64 %34, %struct.Memory* %2)
  %39 = load i64, i64* %14, align 8
  %40 = add i64 %39, -52
  %41 = load i32, i32* %5, align 4
  %42 = load i64, i64* %3, align 8
  %43 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %43
  %44 = add i64 %39, -16
  %45 = inttoptr i64 %44 to i32*
  store i32 0, i32* %45
  %46 = inttoptr i64 %40 to i32*
  %47 = load i32, i32* %46
  %48 = add i64 %39, -20
  %49 = add i64 %42, 16
  %50 = inttoptr i64 %48 to i32*
  store i32 %47, i32* %50
  %51 = add i64 %39, -8
  %52 = add i64 %39, -24
  %53 = add i64 %39, -48
  %54 = add i64 %39, -32
  %55 = add i64 %39, -28
  %56 = add i64 %39, -44
  %57 = add i64 %39, -40
  %58 = add i64 %39, -36
  br label %block_408bc9

block_408cfd:                                     ; preds = %block_408cb2, %block_408c83, %block_408cd5
  %59 = phi i64 [ %130, %block_408c83 ], [ %149, %block_408cb2 ], [ %111, %block_408cd5 ]
  %60 = phi i64 [ 85, %block_408c83 ], [ 10, %block_408cb2 ], [ 10, %block_408cd5 ]
  %61 = phi %struct.Memory* [ %232, %block_408c83 ], [ %232, %block_408cb2 ], [ %232, %block_408cd5 ]
  %62 = add i64 %60, %59
  br label %block_408d02

block_408d1e:                                     ; preds = %block_408d19, %block_408bdc
  %63 = phi i64 [ %83, %block_408bdc ], [ %297, %block_408d19 ]
  %64 = phi %struct.Memory* [ %151, %block_408bdc ], [ %232, %block_408d19 ]
  %65 = inttoptr i64 %44 to i32*
  %66 = load i32, i32* %65
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i64 137, i64 10
  %69 = add i64 %63, %68
  br i1 %67, label %block_408da7, label %block_408d28

block_408bdc:                                     ; preds = %block_408bc9
  %70 = add i64 %156, 4464
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71
  %73 = mul nuw nsw i64 %154, 12
  store i64 %73, i64* %10, align 8, !tbaa !1240
  %74 = add i64 %73, %72
  %75 = add i64 %74, 8
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76
  %78 = inttoptr i64 %52 to i32*
  store i32 %77, i32* %78
  %79 = inttoptr i64 %52 to i32*
  %80 = load i32, i32* %79
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, i64 322, i64 39
  %83 = add i64 %165, %82
  br i1 %81, label %block_408d1e, label %block_408c03

block_408c39:                                     ; preds = %block_408c2d
  %84 = inttoptr i64 %51 to i64*
  %85 = load i64, i64* %84
  %86 = add i64 %85, 4456
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87
  %89 = inttoptr i64 %54 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  %92 = mul nuw nsw i64 %91, 24
  store i64 %92, i64* %10, align 8, !tbaa !1240
  %93 = add i64 %92, %88
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94
  %96 = inttoptr i64 %56 to i32*
  store i32 %95, i32* %96
  %97 = inttoptr i64 %51 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %98, 4476
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100
  %102 = inttoptr i64 %56 to i32*
  %103 = load i32, i32* %102
  %104 = and i32 %103, %101
  %105 = icmp ne i32 %104, %101
  %106 = select i1 %105, i64 201, i64 57
  %107 = add i64 %239, %106
  br i1 %105, label %block_408d02, label %block_408c72

block_408cd5:                                     ; preds = %block_408cb2
  store i64 %142, i64* %10, align 8, !tbaa !1240
  %108 = inttoptr i64 %57 to i32*
  store i32 %146, i32* %108
  %109 = inttoptr i64 %54 to i32*
  %110 = load i32, i32* %109
  %111 = add i64 %149, 35
  %112 = inttoptr i64 %58 to i32*
  store i32 %110, i32* %112
  br label %block_408cfd

block_408c83:                                     ; preds = %block_408c72
  %113 = inttoptr i64 %51 to i64*
  %114 = load i64, i64* %113
  %115 = add i64 %114, 4456
  %116 = inttoptr i64 %115 to i64*
  %117 = load i64, i64* %116
  %118 = inttoptr i64 %54 to i32*
  %119 = load i32, i32* %118
  %120 = zext i32 %119 to i64
  %121 = mul nuw nsw i64 %120, 24
  store i64 %121, i64* %10, align 8, !tbaa !1240
  %122 = add i64 %121, %117
  %123 = add i64 %122, 8
  %124 = inttoptr i64 %123 to i32*
  %125 = load i32, i32* %124
  %126 = inttoptr i64 %57 to i32*
  store i32 %125, i32* %126
  %127 = inttoptr i64 %54 to i32*
  %128 = load i32, i32* %127
  %129 = inttoptr i64 %58 to i32*
  store i32 %128, i32* %129
  %130 = add i64 %245, 42
  %131 = inttoptr i64 %53 to i32*
  store i32 0, i32* %131
  br label %block_408cfd

block_408cb2:                                     ; preds = %block_408c72
  %132 = inttoptr i64 %57 to i32*
  %133 = load i32, i32* %132
  %134 = inttoptr i64 %51 to i64*
  %135 = load i64, i64* %134
  %136 = add i64 %135, 4456
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137
  %139 = inttoptr i64 %54 to i32*
  %140 = load i32, i32* %139
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %10, align 8, !tbaa !1240
  %142 = mul nuw nsw i64 %141, 24
  store i64 %142, i64* %11, align 8, !tbaa !1240
  %143 = add i64 %142, %138
  %144 = add i64 %143, 8
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145
  %147 = icmp ule i32 %133, %146
  %148 = select i1 %147, i64 70, i64 35
  %149 = add i64 %245, %148
  br i1 %147, label %block_408cfd, label %block_408cd5

block_408bc9:                                     ; preds = %block_408da7, %block_408ba0
  %150 = phi i64 [ %49, %block_408ba0 ], [ %230, %block_408da7 ]
  %151 = phi %struct.Memory* [ %38, %block_408ba0 ], [ %64, %block_408da7 ]
  %152 = inttoptr i64 %48 to i32*
  %153 = load i32, i32* %152
  %154 = zext i32 %153 to i64
  %155 = inttoptr i64 %51 to i64*
  %156 = load i64, i64* %155
  %157 = add i64 %156, 536
  %158 = inttoptr i64 %157 to i32*
  %159 = load i32, i32* %158
  %160 = sub i32 %153, %159
  %161 = icmp ult i32 %153, %159
  %162 = icmp eq i32 %160, 0
  %163 = or i1 %162, %161
  %164 = select i1 %163, i64 19, i64 497
  %165 = add i64 %150, %164
  br i1 %163, label %block_408bdc, label %block_408dba.loopexit

block_408d28:                                     ; preds = %block_408d1e
  %166 = inttoptr i64 %48 to i32*
  %167 = load i32, i32* %166
  %168 = inttoptr i64 %51 to i64*
  %169 = load i64, i64* %168
  %170 = add i64 %169, 4480
  %171 = inttoptr i64 %170 to i32*
  store i32 %167, i32* %171
  %172 = inttoptr i64 %51 to i64*
  %173 = load i64, i64* %172
  %174 = add i64 %173, 4456
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = inttoptr i64 %58 to i32*
  %178 = load i32, i32* %177
  %179 = zext i32 %178 to i64
  %180 = mul nuw nsw i64 %179, 24
  %181 = add i64 %180, %176
  %182 = add i64 %181, 16
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183
  %185 = load i64, i64* %14, align 8
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187
  %189 = add i64 %188, 568
  %190 = inttoptr i64 %189 to i64*
  store i64 %184, i64* %190
  %191 = inttoptr i64 %186 to i64*
  %192 = load i64, i64* %191
  %193 = add i64 %192, 4456
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194
  %196 = add i64 %185, -36
  %197 = inttoptr i64 %196 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  %200 = mul nuw nsw i64 %199, 24
  %201 = add i64 %200, %195
  %202 = add i64 %201, 8
  %203 = inttoptr i64 %202 to i32*
  %204 = load i32, i32* %203
  %205 = add i64 %192, 564
  %206 = inttoptr i64 %205 to i32*
  store i32 %204, i32* %206
  %207 = inttoptr i64 %186 to i64*
  %208 = load i64, i64* %207
  %209 = add i64 %208, 4456
  %210 = inttoptr i64 %209 to i64*
  %211 = load i64, i64* %210
  %212 = load i64, i64* %14, align 8
  %213 = add i64 %212, -36
  %214 = inttoptr i64 %213 to i32*
  %215 = load i32, i32* %214
  %216 = zext i32 %215 to i64
  %217 = mul nuw nsw i64 %216, 24
  store i64 %217, i64* %10, align 8, !tbaa !1240
  %218 = add i64 %217, %211
  %219 = inttoptr i64 %218 to i32*
  %220 = load i32, i32* %219
  %221 = add i64 %212, -8
  %222 = inttoptr i64 %221 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %9, align 8, !tbaa !1240
  %224 = add i64 %223, 4484
  %225 = inttoptr i64 %224 to i32*
  store i32 %220, i32* %225
  br label %block_408dba

block_408da7:                                     ; preds = %block_408d1e
  %226 = inttoptr i64 %48 to i32*
  %227 = load i32, i32* %226
  %228 = add i32 %227, 1
  %229 = inttoptr i64 %48 to i32*
  store i32 %228, i32* %229
  %230 = add i64 %69, -478
  br label %block_408bc9

block_408c2d:                                     ; preds = %block_408d02, %block_408c03
  %231 = phi i64 [ %260, %block_408c03 ], [ %308, %block_408d02 ]
  %232 = phi %struct.Memory* [ %151, %block_408c03 ], [ %299, %block_408d02 ]
  %233 = inttoptr i64 %55 to i32*
  %234 = load i32, i32* %233
  %235 = inttoptr i64 %52 to i32*
  %236 = load i32, i32* %235
  %237 = icmp uge i32 %234, %236
  %238 = select i1 %237, i64 236, i64 12
  %239 = add i64 %231, %238
  br i1 %237, label %block_408d19, label %block_408c39

block_408c72:                                     ; preds = %block_408c39
  %240 = inttoptr i64 %44 to i32*
  store i32 1, i32* %240
  %241 = inttoptr i64 %53 to i32*
  %242 = load i32, i32* %241
  %243 = icmp eq i32 %242, 0
  %244 = select i1 %243, i64 64, i64 17
  %245 = add i64 %107, %244
  br i1 %243, label %block_408cb2, label %block_408c83

block_408c03:                                     ; preds = %block_408bdc
  %246 = inttoptr i64 %53 to i32*
  store i32 1, i32* %246
  %247 = inttoptr i64 %51 to i64*
  %248 = load i64, i64* %247
  %249 = add i64 %248, 4464
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250
  %252 = inttoptr i64 %48 to i32*
  %253 = load i32, i32* %252
  %254 = zext i32 %253 to i64
  %255 = mul nuw nsw i64 %254, 12
  store i64 %255, i64* %10, align 8, !tbaa !1240
  %256 = add i64 %255, %251
  %257 = inttoptr i64 %256 to i32*
  %258 = load i32, i32* %257
  %259 = inttoptr i64 %54 to i32*
  store i32 %258, i32* %259
  %260 = add i64 %83, 42
  %261 = inttoptr i64 %55 to i32*
  store i32 0, i32* %261
  br label %block_408c2d

block_408dba.loopexit:                            ; preds = %block_408bc9
  store i64 %156, i64* %9, align 8, !tbaa !1240
  br label %block_408dba

block_408dba:                                     ; preds = %block_408dba.loopexit, %block_408d28
  %262 = phi i64 [ %212, %block_408d28 ], [ %39, %block_408dba.loopexit ]
  %263 = phi %struct.Memory* [ %64, %block_408d28 ], [ %151, %block_408dba.loopexit ]
  %264 = add i64 %262, -16
  %265 = inttoptr i64 %264 to i32*
  %266 = load i32, i32* %265
  %267 = zext i32 %266 to i64
  store i64 %267, i64* %8, align 8, !tbaa !1240
  %268 = load i64, i64* %13, align 8
  %269 = add i64 %268, 64
  %270 = icmp ugt i64 %268, -65
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %19, align 1, !tbaa !1264
  %272 = trunc i64 %269 to i32
  %273 = and i32 %272, 255
  %274 = tail call i32 @llvm.ctpop.i32(i32 %273) #10
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  %277 = xor i8 %276, 1
  store i8 %277, i8* %20, align 1, !tbaa !1278
  %278 = xor i64 %269, %268
  %279 = lshr i64 %278, 4
  %280 = trunc i64 %279 to i8
  %281 = and i8 %280, 1
  store i8 %281, i8* %21, align 1, !tbaa !1279
  %282 = icmp eq i64 %269, 0
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %22, align 1, !tbaa !1280
  %284 = lshr i64 %269, 63
  %285 = trunc i64 %284 to i8
  store i8 %285, i8* %23, align 1, !tbaa !1281
  %286 = lshr i64 %268, 63
  %287 = xor i64 %284, %286
  %288 = add nuw nsw i64 %287, %284
  %289 = icmp eq i64 %288, 2
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %24, align 1, !tbaa !1282
  %291 = add i64 %268, 72
  %292 = inttoptr i64 %269 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %14, align 8, !tbaa !1240
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %3, align 8, !tbaa !1240
  %296 = add i64 %268, 80
  store i64 %296, i64* %13, align 8, !tbaa !1240
  ret %struct.Memory* %263

block_408d19:                                     ; preds = %block_408c2d
  %297 = add i64 %239, 5
  br label %block_408d1e

block_408d02:                                     ; preds = %block_408c39, %block_408cfd
  %298 = phi i64 [ %107, %block_408c39 ], [ %62, %block_408cfd ]
  %299 = phi %struct.Memory* [ %232, %block_408c39 ], [ %61, %block_408cfd ]
  %300 = inttoptr i64 %54 to i32*
  %301 = load i32, i32* %300
  %302 = add i32 %301, 1
  %303 = inttoptr i64 %54 to i32*
  store i32 %302, i32* %303
  %304 = inttoptr i64 %55 to i32*
  %305 = load i32, i32* %304
  %306 = add i32 %305, 1
  %307 = inttoptr i64 %55 to i32*
  store i32 %306, i32* %307
  %308 = add i64 %298, -213
  br label %block_408c2d
}

; Function Attrs: noinline
define %struct.Memory* @sub_405aa0_PrefixedAggregate(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_405aa0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8, !tbaa !1240
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16
  store i64 %15, i64* %12, align 8, !tbaa !1240
  %17 = add i64 %14, -616
  store i64 %17, i64* %11, align 8, !tbaa !1240
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %24 = add i64 %14, -376
  %25 = add i64 %14, -264
  %26 = add i64 %14, -24
  %27 = load i64, i64* %10, align 8
  %28 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %28
  %29 = add i64 %14, -32
  %30 = load i64, i64* %9, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %31
  %32 = add i64 %14, -40
  %33 = inttoptr i64 %32 to i32*
  store i32 0, i32* %33
  %34 = add i64 %14, -512
  %35 = inttoptr i64 %34 to i32*
  store i32 0, i32* %35
  %36 = add i64 %14, -516
  %37 = inttoptr i64 %36 to i32*
  store i32 0, i32* %37
  %38 = add i64 %14, -524
  %39 = inttoptr i64 %38 to i32*
  store i32 0, i32* %39
  %40 = add i64 %14, -496
  %41 = inttoptr i64 %40 to i64*
  store i64 %25, i64* %41
  %42 = add i64 %14, -504
  %43 = inttoptr i64 %42 to i64*
  store i64 %24, i64* %43
  %44 = add i64 %14, -36
  %45 = add i64 %1, 91
  %46 = inttoptr i64 %44 to i32*
  store i32 0, i32* %46
  br label %block_405afb

block_405afb:                                     ; preds = %block_405b1d, %block_405aa0
  %47 = phi i64 [ %45, %block_405aa0 ], [ %569, %block_405b1d ]
  %48 = phi %struct.Memory* [ %2, %block_405aa0 ], [ %48, %block_405b1d ]
  %49 = inttoptr i64 %44 to i32*
  %50 = load i32, i32* %49
  %51 = zext i32 %50 to i64
  %52 = inttoptr i64 %26 to i64*
  %53 = load i64, i64* %52
  %54 = add i64 %53, 540
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55
  %57 = shl i32 %56, 1
  %58 = add i64 %53, 548
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59
  %61 = add i32 %60, %57
  %62 = icmp ult i32 %50, %61
  %63 = select i1 %62, i64 34, i64 80
  %64 = add i64 %47, %63
  br i1 %62, label %block_405b1d, label %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

block_405df9:                                     ; preds = %block_405de6
  %65 = inttoptr i64 %596 to i64*
  %66 = load i64, i64* %65
  %67 = shl nuw nsw i64 %136, 3
  %68 = add i64 %66, %67
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69
  %71 = inttoptr i64 %597 to i64*
  %72 = load i64, i64* %71
  %73 = add i64 %72, %67
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74
  %76 = add i64 %75, %70
  %77 = inttoptr i64 %73 to i64*
  store i64 %76, i64* %77
  %78 = inttoptr i64 %592 to i32*
  %79 = load i32, i32* %78
  %80 = add i32 %79, 1
  %81 = inttoptr i64 %592 to i32*
  store i32 %80, i32* %81
  %82 = add i64 %144, -19
  br label %block_405de6

block_405ef6:                                     ; preds = %block_405e94
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %9, align 8, !tbaa !1240
  %83 = load i64, i64* @stderr
  store i64 %83, i64* %10, align 8, !tbaa !1240
  %84 = add i64 %657, 25
  %85 = load i64, i64* %11, align 8, !tbaa !1240
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %90 = load i64, i64* %387, align 8, !alias.scope !3483, !noalias !3486
  %91 = load i64, i64* %386, align 8, !alias.scope !3483, !noalias !3486
  %92 = load i64, i64* %88, align 8, !alias.scope !3483, !noalias !3486
  %93 = load i64, i64* %89, align 8, !alias.scope !3483, !noalias !3486
  %94 = inttoptr i64 %85 to i64*
  %95 = load i64, i64* %94
  %96 = add i64 %85, 8
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  %99 = add i64 %85, 16
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100
  %102 = add i64 %85, 24
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %85, 32
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %85, 40
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  %111 = add i64 %85, 48
  %112 = inttoptr i64 %111 to i64*
  %113 = load i64, i64* %112
  %114 = add i64 %85, 56
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115
  %117 = add i64 %85, 64
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118
  %120 = add i64 %85, 72
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121
  %123 = inttoptr i64 %86 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %3, align 8, !alias.scope !3483, !noalias !3486
  store i64 %85, i64* %11, align 8, !alias.scope !3483, !noalias !3486
  %125 = tail call i64 @fprintf(i64 %83, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %90, i64 %91, i64 %92, i64 %93, i64 %95, i64 %98, i64 %101, i64 %104, i64 %107, i64 %110, i64 %113, i64 %116, i64 %119, i64 %122), !noalias !3483
  %126 = load i64, i64* %12, align 8
  %127 = add i64 %126, -4
  %128 = inttoptr i64 %127 to i32*
  store i32 1, i32* %128
  %129 = add i64 %126, -584
  %130 = trunc i64 %125 to i32
  %131 = inttoptr i64 %129 to i32*
  store i32 %130, i32* %131
  br label %block_40612c

block_405de6:                                     ; preds = %block_405ddf, %block_405df9
  %132 = phi i64 [ %593, %block_405ddf ], [ %82, %block_405df9 ]
  %133 = phi %struct.Memory* [ %334, %block_405ddf ], [ %133, %block_405df9 ]
  %134 = inttoptr i64 %592 to i32*
  %135 = load i32, i32* %134
  %136 = zext i32 %135 to i64
  %137 = inttoptr i64 %595 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %138, 540
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140
  %142 = icmp ult i32 %135, %141
  %143 = select i1 %142, i64 19, i64 69
  %144 = add i64 %132, %143
  br i1 %142, label %block_405df9, label %block_405e82.loopexit

block_405f64:                                     ; preds = %block_405e82, %block_405c11, %block_405f21
  %145 = phi i64 [ %810, %block_405c11 ], [ %979, %block_405e82 ], [ %537, %block_405f21 ]
  %146 = phi i64 [ %809, %block_405c11 ], [ %993, %block_405e82 ], [ %552, %block_405f21 ]
  %147 = phi i64 [ 814, %block_405c11 ], [ 5, %block_405e82 ], [ 5, %block_405f21 ]
  %148 = phi %struct.Memory* [ %1089, %block_405c11 ], [ %982, %block_405e82 ], [ %982, %block_405f21 ]
  %149 = add i64 %146, %147
  %150 = add i64 %145, -368
  %151 = add i64 %145, -480
  %152 = add i64 %145, -16
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  %155 = add i64 %154, 588
  %156 = inttoptr i64 %155 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  %159 = add i64 %149, 37
  %160 = load i64, i64* %11, align 8, !tbaa !1240
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162
  %163 = inttoptr i64 %161 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %3, align 8, !alias.scope !3488, !noalias !3491
  store i64 %160, i64* %11, align 8, !alias.scope !3488, !noalias !3491
  %165 = tail call i64 @memcpy(i64 %151, i64 %150, i64 %158), !noalias !3488
  %166 = load i64, i64* %12, align 8
  %167 = add i64 %166, -32
  %168 = load i64, i64* %3, align 8
  %169 = inttoptr i64 %167 to i32*
  %170 = load i32, i32* %169
  %171 = add i32 %170, 1
  %172 = inttoptr i64 %167 to i32*
  store i32 %171, i32* %172
  %173 = add i64 %168, -1051
  br label %block_405b6e

block_405fe2:                                     ; preds = %block_405f97, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %174 = phi i64 [ %791, %block_405f97 ], [ %293, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %175 = phi i64 [ %782, %block_405f97 ], [ %290, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %176 = phi %struct.Memory* [ %296, %block_405f97 ], [ %270, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %177 = add i64 %175, -28
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  %181 = add i64 %175, -16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182
  %184 = add i64 %183, 540
  %185 = inttoptr i64 %184 to i32*
  %186 = load i32, i32* %185
  %187 = icmp ult i32 %179, %186
  %188 = select i1 %187, i64 19, i64 152
  %189 = add i64 %174, %188
  br i1 %187, label %block_405ff5, label %block_40607a

block_405ff5:                                     ; preds = %block_405fe2
  %190 = add i64 %175, -488
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = shl nuw nsw i64 %180, 3
  %194 = add i64 %192, %193
  %195 = inttoptr i64 %194 to i64*
  %196 = load i64, i64* %195
  %197 = add nuw nsw i64 %193, 4280
  %198 = add i64 %197, %183
  %199 = inttoptr i64 %198 to i64*
  %200 = load i64, i64* %199
  %201 = add i64 %200, %196
  %202 = add i64 %183, 4280
  %203 = add i64 %202, %193
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204
  %205 = add i64 %175, -504
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206
  %208 = inttoptr i64 %190 to i64*
  %209 = load i64, i64* %208
  %210 = inttoptr i64 %177 to i32*
  %211 = load i32, i32* %210
  %212 = zext i32 %211 to i64
  store i64 %212, i64* %7, align 8, !tbaa !1240
  %213 = shl nuw nsw i64 %212, 3
  %214 = add i64 %209, %213
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  %217 = sext i64 %216 to i128
  %218 = and i128 %217, -18446744073709551616
  %219 = zext i32 %207 to i128
  %220 = zext i64 %216 to i128
  %221 = or i128 %218, %220
  %222 = mul nsw i128 %221, %219
  %223 = trunc i128 %222 to i64
  store i64 %223, i64* %6, align 8, !tbaa !1240
  %224 = sext i64 %223 to i128
  %225 = icmp ne i128 %224, %222
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %18, align 1, !tbaa !1264
  %227 = trunc i128 %222 to i32
  %228 = and i32 %227, 255
  %229 = tail call i32 @llvm.ctpop.i32(i32 %228) #10
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  %232 = xor i8 %231, 1
  store i8 %232, i8* %19, align 1, !tbaa !1278
  store i8 0, i8* %20, align 1, !tbaa !1279
  store i8 0, i8* %21, align 1, !tbaa !1280
  %233 = lshr i64 %223, 63
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %22, align 1, !tbaa !1281
  store i8 %226, i8* %23, align 1, !tbaa !1282
  %235 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 8) to i32*)
  %236 = sext i32 %235 to i64
  %237 = load i64, i64* %12, align 8
  %238 = add i64 %237, -600
  %239 = inttoptr i64 %238 to i64*
  store i64 %236, i64* %239
  %240 = ashr i64 %223, 63
  store i64 %240, i64* %387, align 8, !tbaa !1240
  %241 = inttoptr i64 %238 to i64*
  %242 = load i64, i64* %241
  store i64 %242, i64* %9, align 8, !tbaa !1240
  %243 = add i64 %189, 93
  store i64 %243, i64* %3, align 8
  %244 = sext i64 %242 to i128
  %245 = and i128 %244, -18446744073709551616
  %246 = zext i64 %240 to i128
  %247 = shl nuw i128 %246, 64
  %248 = and i128 %222, 18446744073709551615
  %249 = or i128 %247, %248
  %250 = zext i64 %242 to i128
  %251 = or i128 %245, %250
  %252 = sdiv i128 %249, %251
  %253 = trunc i128 %252 to i64
  %254 = and i128 %252, 18446744073709551615
  %255 = sext i64 %253 to i128
  %256 = and i128 %255, -18446744073709551616
  %257 = or i128 %256, %254
  %258 = icmp eq i128 %252, %257
  br i1 %258, label %264, label %259

; <label>:259:                                    ; preds = %block_405ff5
  %260 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %243, %struct.Memory* %176) #14
  %261 = load i64, i64* %12, align 8
  %262 = load i64, i64* %3, align 8
  %263 = load i64, i64* %8, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:264:                                    ; preds = %block_405ff5
  %265 = srem i128 %249, %251
  %266 = trunc i128 %265 to i64
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %264, %259
  %267 = phi i64 [ %263, %259 ], [ %266, %264 ]
  %268 = phi i64 [ %262, %259 ], [ %243, %264 ]
  %269 = phi i64 [ %261, %259 ], [ %237, %264 ]
  %270 = phi %struct.Memory* [ %260, %259 ], [ %176, %264 ]
  %271 = add i64 %269, -16
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272
  store i64 %273, i64* %10, align 8, !tbaa !1240
  %274 = add i64 %269, -28
  %275 = inttoptr i64 %274 to i32*
  %276 = load i32, i32* %275
  %277 = zext i32 %276 to i64
  store i64 %277, i64* %372, align 8, !tbaa !1240
  %278 = shl nuw nsw i64 %277, 3
  %279 = add nuw nsw i64 %278, 4392
  %280 = add i64 %279, %273
  %281 = inttoptr i64 %280 to i64*
  %282 = load i64, i64* %281
  %283 = add i64 %282, %267
  %284 = add i64 %273, 4392
  %285 = add i64 %284, %278
  %286 = inttoptr i64 %285 to i64*
  store i64 %283, i64* %286
  %287 = inttoptr i64 %274 to i32*
  %288 = load i32, i32* %287
  %289 = add i32 %288, 1
  %290 = load i64, i64* %12, align 8
  %291 = add i64 %290, -28
  %292 = inttoptr i64 %291 to i32*
  store i32 %289, i32* %292
  %293 = add i64 %268, -112
  br label %block_405fe2

block_405b6e:                                     ; preds = %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, %block_405f64
  %294 = phi i64 [ %383, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %173, %block_405f64 ]
  %295 = phi i64 [ %15, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %166, %block_405f64 ]
  %296 = phi %struct.Memory* [ %48, %_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %148, %block_405f64 ]
  %297 = add i64 %295, -32
  %298 = inttoptr i64 %297 to i32*
  %299 = load i32, i32* %298
  %300 = add i64 %295, -16
  %301 = inttoptr i64 %300 to i64*
  %302 = load i64, i64* %301
  %303 = add i64 %302, 4488
  %304 = inttoptr i64 %303 to i32*
  %305 = load i32, i32* %304
  %306 = sub i32 %299, %305
  %307 = icmp ult i32 %299, %305
  %308 = icmp eq i32 %306, 0
  %309 = or i1 %308, %307
  %310 = select i1 %309, i64 19, i64 1065
  %311 = add i64 %294, %310
  br i1 %309, label %block_405b81, label %block_405f97

block_405c3b:                                     ; preds = %block_405b81
  %312 = add i64 %1090, -16
  %313 = inttoptr i64 %312 to i64*
  %314 = load i64, i64* %313
  %315 = add i64 %314, 540
  %316 = inttoptr i64 %315 to i32*
  %317 = load i32, i32* %316
  %318 = add i64 %314, 548
  %319 = inttoptr i64 %318 to i32*
  %320 = load i32, i32* %319
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %8, align 8, !tbaa !1240
  %322 = shl i32 %317, 1
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %7, align 8, !tbaa !1240
  %324 = shl nuw nsw i64 %323, 2
  %325 = add nsw i64 %324, -368
  %326 = add i64 %325, %1090
  store i64 %326, i64* %10, align 8, !tbaa !1240
  %327 = add i64 %1090, -480
  %328 = add i64 %327, %324
  store i64 %328, i64* %9, align 8, !tbaa !1240
  %329 = add i64 %1098, 19685
  %330 = add i64 %1098, 41
  %331 = load i64, i64* %11, align 8, !tbaa !1240
  %332 = add i64 %331, -8
  %333 = inttoptr i64 %332 to i64*
  store i64 %330, i64* %333
  store i64 %332, i64* %11, align 8, !tbaa !1240
  %334 = tail call %struct.Memory* @sub_40a920_KeyComp(%struct.State* nonnull %0, i64 %329, %struct.Memory* %1089)
  %335 = load i64, i64* %12, align 8
  %336 = add i64 %335, -500
  %337 = load i32, i32* %5, align 4
  %338 = load i64, i64* %3, align 8
  %339 = inttoptr i64 %336 to i32*
  store i32 %337, i32* %339
  %340 = inttoptr i64 %336 to i32*
  %341 = load i32, i32* %340
  %342 = add i32 %341, 1
  %343 = zext i32 %342 to i64
  store i64 %343, i64* %7, align 8, !tbaa !1240
  %344 = icmp ne i32 %341, -1
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %18, align 1, !tbaa !1264
  %346 = and i32 %342, 255
  %347 = tail call i32 @llvm.ctpop.i32(i32 %346) #10
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = xor i8 %349, 1
  store i8 %350, i8* %19, align 1, !tbaa !1278
  %351 = xor i32 %341, 16
  %352 = xor i32 %351, %342
  %353 = lshr i32 %352, 4
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  store i8 %355, i8* %20, align 1, !tbaa !1279
  %356 = icmp eq i32 %342, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %21, align 1, !tbaa !1280
  %358 = lshr i32 %342, 31
  %359 = trunc i32 %358 to i8
  store i8 %359, i8* %22, align 1, !tbaa !1281
  %360 = lshr i32 %341, 31
  %361 = xor i32 %360, 1
  %362 = xor i32 %358, %360
  %363 = add nuw nsw i32 %362, %361
  %364 = icmp eq i32 %363, 2
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %23, align 1, !tbaa !1282
  %366 = add i64 %335, -548
  %367 = inttoptr i64 %366 to i32*
  store i32 %341, i32* %367
  %368 = add i64 %335, -552
  %369 = inttoptr i64 %368 to i32*
  store i32 %342, i32* %369
  %370 = select i1 %356, i64 460, i64 35
  %371 = add i64 %338, %370
  br i1 %356, label %block_405e30, label %block_405c87

_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %block_405afb
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %373 = add i64 %53, 592
  %374 = inttoptr i64 %373 to i32*
  %375 = load i32, i32* %374
  %376 = add i64 %53, 588
  %377 = inttoptr i64 %376 to i32*
  %378 = load i32, i32* %377
  %379 = udiv i32 %375, %378
  %380 = add i64 %14, -520
  %381 = inttoptr i64 %380 to i32*
  store i32 %379, i32* %381
  %382 = add i64 %14, -40
  %383 = add i64 %64, 35
  %384 = inttoptr i64 %382 to i32*
  store i32 1, i32* %384
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  br label %block_405b6e

block_405cb4:                                     ; preds = %block_405c9a
  %390 = add i64 %335, -256
  %391 = add i64 %335, -16
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  %394 = add i64 %393, 600
  %395 = inttoptr i64 %394 to i64*
  %396 = load i64, i64* %395
  %397 = add i64 %335, -508
  %398 = inttoptr i64 %397 to i32*
  %399 = load i32, i32* %398
  %400 = zext i32 %399 to i64
  %401 = add i64 %396, %400
  %402 = add i64 %393, 588
  %403 = inttoptr i64 %402 to i32*
  %404 = load i32, i32* %403
  %405 = zext i32 %404 to i64
  store i64 %401, i64* %10, align 8, !tbaa !1240
  %406 = add i64 %591, 55
  %407 = load i64, i64* %11, align 8, !tbaa !1240
  %408 = add i64 %407, -8
  %409 = inttoptr i64 %408 to i64*
  store i64 %406, i64* %409
  %410 = inttoptr i64 %408 to i64*
  %411 = load i64, i64* %410
  store i64 %411, i64* %3, align 8, !alias.scope !3493, !noalias !3496
  store i64 %407, i64* %11, align 8, !alias.scope !3493, !noalias !3496
  %412 = tail call i64 @memcpy(i64 %401, i64 %390, i64 %405), !noalias !3493
  %413 = load i64, i64* %12, align 8
  %414 = add i64 %413, -16
  %415 = load i64, i64* %3, align 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416
  %418 = add i64 %417, 588
  %419 = inttoptr i64 %418 to i32*
  %420 = load i32, i32* %419
  %421 = add i64 %413, -508
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422
  %424 = add i32 %423, %420
  %425 = inttoptr i64 %421 to i32*
  store i32 %424, i32* %425
  %426 = add i64 %413, -504
  %427 = inttoptr i64 %426 to i32*
  %428 = load i32, i32* %427
  %429 = add i32 %428, 1
  %430 = zext i32 %429 to i64
  store i64 %430, i64* %372, align 8, !tbaa !1240
  %431 = inttoptr i64 %426 to i32*
  store i32 %429, i32* %431
  %432 = add i64 %413, -28
  %433 = add i64 %415, 50
  %434 = inttoptr i64 %432 to i32*
  store i32 0, i32* %434
  br label %block_405d1d

block_40607a:                                     ; preds = %block_405fe2
  %435 = add i64 %175, -24
  %436 = inttoptr i64 %435 to i64*
  %437 = load i64, i64* %436
  %438 = add i64 %189, 18
  %439 = load i64, i64* %11, align 8, !tbaa !1240
  %440 = add i64 %439, -8
  %441 = inttoptr i64 %440 to i64*
  store i64 %438, i64* %441
  %442 = inttoptr i64 %440 to i64*
  %443 = load i64, i64* %442
  store i64 %443, i64* %3, align 8, !alias.scope !3498, !noalias !3501
  store i64 %439, i64* %11, align 8, !alias.scope !3498, !noalias !3501
  %444 = tail call i64 @fseek(i64 %437, i64 0, i64 2), !noalias !3498
  %445 = load i64, i64* %3, align 8
  store i64 1, i64* %8, align 8, !tbaa !1240
  %446 = load i64, i64* %12, align 8
  %447 = add i64 %446, -16
  %448 = inttoptr i64 %447 to i64*
  %449 = load i64, i64* %448
  %450 = add i64 %449, 600
  %451 = inttoptr i64 %450 to i64*
  %452 = load i64, i64* %451
  store i64 %452, i64* %10, align 8, !tbaa !1240
  %453 = add i64 %446, -504
  %454 = inttoptr i64 %453 to i32*
  %455 = load i32, i32* %454
  %456 = add i64 %449, 588
  %457 = inttoptr i64 %456 to i32*
  %458 = load i32, i32* %457
  %459 = sext i32 %455 to i64
  %460 = sext i32 %458 to i64
  %461 = mul nsw i64 %460, %459
  %462 = and i64 %461, 4294967295
  store i64 %462, i64* %9, align 8, !tbaa !1240
  %463 = add i64 %446, -24
  %464 = inttoptr i64 %463 to i64*
  %465 = load i64, i64* %464
  store i64 %465, i64* %7, align 8, !tbaa !1240
  %466 = add i64 %446, -604
  %467 = trunc i64 %444 to i32
  %468 = inttoptr i64 %466 to i32*
  store i32 %467, i32* %468
  %469 = add i64 %445, 52
  %470 = load i64, i64* %11, align 8, !tbaa !1240
  %471 = add i64 %470, -8
  %472 = inttoptr i64 %471 to i64*
  store i64 %469, i64* %472
  %473 = inttoptr i64 %471 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %3, align 8, !alias.scope !3503, !noalias !3506
  store i64 %470, i64* %11, align 8, !alias.scope !3503, !noalias !3506
  %475 = tail call i64 @fwrite(i64 %452, i64 %462, i64 1, i64 %465)
  %476 = load i64, i64* %3, align 8
  %477 = add i64 %475, -1
  %478 = icmp eq i64 %477, 0
  %479 = select i1 %478, i64 53, i64 10
  %480 = add i64 %476, %479
  br i1 %478, label %block_4060f5, label %block_4060ca

block_4060f5:                                     ; preds = %block_40607a
  %481 = load i64, i64* %12, align 8
  %482 = add i64 %481, -516
  %483 = inttoptr i64 %482 to i32*
  %484 = load i32, i32* %483
  %485 = add i64 %481, -504
  %486 = inttoptr i64 %485 to i32*
  %487 = load i32, i32* %486
  %488 = add i32 %487, %484
  %489 = add i64 %481, -16
  %490 = inttoptr i64 %489 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %491, 556
  %493 = inttoptr i64 %492 to i32*
  store i32 %488, i32* %493
  %494 = inttoptr i64 %489 to i64*
  %495 = load i64, i64* %494
  %496 = add i64 %495, 556
  %497 = inttoptr i64 %496 to i32*
  %498 = load i32, i32* %497
  store i64 %495, i64* %7, align 8, !tbaa !1240
  %499 = add i64 %495, 560
  %500 = inttoptr i64 %499 to i32*
  %501 = load i32, i32* %500
  %502 = add i32 %501, %498
  %503 = inttoptr i64 %499 to i32*
  store i32 %502, i32* %503
  %504 = load i64, i64* %12, align 8
  %505 = add i64 %504, -4
  %506 = inttoptr i64 %505 to i32*
  store i32 0, i32* %506
  br label %block_40612c

block_405d1d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89, %block_405cb4
  %507 = phi i64 [ %433, %block_405cb4 ], [ %761, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89 ]
  %508 = phi i64 [ %413, %block_405cb4 ], [ %758, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89 ]
  %509 = phi %struct.Memory* [ %334, %block_405cb4 ], [ %738, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89 ]
  %510 = add i64 %508, -28
  %511 = inttoptr i64 %510 to i32*
  %512 = load i32, i32* %511
  %513 = zext i32 %512 to i64
  %514 = add i64 %508, -16
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  %517 = add i64 %516, 540
  %518 = inttoptr i64 %517 to i32*
  %519 = load i32, i32* %518
  %520 = icmp ult i32 %512, %519
  %521 = select i1 %520, i64 19, i64 152
  %522 = add i64 %507, %521
  br i1 %520, label %block_405d30, label %block_405db5

block_405f21:                                     ; preds = %block_405e94
  %523 = load i64, i64* %12, align 8
  %524 = add i64 %523, -24
  %525 = inttoptr i64 %524 to i64*
  %526 = load i64, i64* %525
  %527 = add i64 %523, -528
  %528 = inttoptr i64 %527 to i64*
  %529 = load i64, i64* %528
  %530 = add i64 %657, 18
  %531 = load i64, i64* %11, align 8, !tbaa !1240
  %532 = add i64 %531, -8
  %533 = inttoptr i64 %532 to i64*
  store i64 %530, i64* %533
  %534 = inttoptr i64 %532 to i64*
  %535 = load i64, i64* %534
  store i64 %535, i64* %3, align 8, !alias.scope !3508, !noalias !3511
  store i64 %531, i64* %11, align 8, !alias.scope !3508, !noalias !3511
  %536 = tail call i64 @fseek(i64 %526, i64 %529, i64 0), !noalias !3508
  %537 = load i64, i64* %12, align 8
  %538 = add i64 %537, -508
  %539 = load i64, i64* %3, align 8
  %540 = inttoptr i64 %538 to i32*
  store i32 0, i32* %540
  %541 = add i64 %537, -504
  %542 = inttoptr i64 %541 to i32*
  %543 = load i32, i32* %542
  %544 = add i64 %537, -516
  %545 = inttoptr i64 %544 to i32*
  %546 = load i32, i32* %545
  %547 = add i32 %546, %543
  %548 = inttoptr i64 %544 to i32*
  store i32 %547, i32* %548
  %549 = inttoptr i64 %541 to i32*
  store i32 0, i32* %549
  %550 = add i64 %537, -588
  %551 = trunc i64 %536 to i32
  %552 = add i64 %539, 44
  %553 = inttoptr i64 %550 to i32*
  store i32 %551, i32* %553
  br label %block_405f64

block_405b1d:                                     ; preds = %block_405afb
  %554 = shl nuw nsw i64 %51, 2
  %555 = add nsw i64 %554, -480
  %556 = add i64 %555, %15
  %557 = inttoptr i64 %556 to i32*
  store i32 0, i32* %557
  %558 = inttoptr i64 %44 to i32*
  %559 = load i32, i32* %558
  %560 = zext i32 %559 to i64
  %561 = shl nuw nsw i64 %560, 2
  %562 = add nsw i64 %561, -256
  %563 = add i64 %562, %15
  %564 = inttoptr i64 %563 to i32*
  store i32 0, i32* %564
  %565 = inttoptr i64 %44 to i32*
  %566 = load i32, i32* %565
  %567 = add i32 %566, 1
  %568 = inttoptr i64 %44 to i32*
  store i32 %567, i32* %568
  %569 = add i64 %64, -34
  br label %block_405afb

block_405c9a:                                     ; preds = %block_405c87
  %570 = add i32 %847, -1
  store i8 0, i8* %18, align 1, !tbaa !1264
  %571 = and i32 %570, 255
  %572 = tail call i32 @llvm.ctpop.i32(i32 %571) #10
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  store i8 %575, i8* %19, align 1, !tbaa !1278
  %576 = xor i32 %570, %847
  %577 = lshr i32 %576, 4
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  store i8 %579, i8* %20, align 1, !tbaa !1279
  %580 = icmp eq i32 %570, 0
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %21, align 1, !tbaa !1280
  %582 = lshr i32 %570, 31
  %583 = trunc i32 %582 to i8
  store i8 %583, i8* %22, align 1, !tbaa !1281
  %584 = xor i32 %582, %849
  %585 = add nuw nsw i32 %584, %849
  %586 = icmp eq i32 %585, 2
  %587 = zext i1 %586 to i8
  store i8 %587, i8* %23, align 1, !tbaa !1282
  %588 = add i64 %335, -556
  %589 = inttoptr i64 %588 to i32*
  store i32 %570, i32* %589
  %590 = select i1 %580, i64 26, i64 447
  %591 = add i64 %851, %590
  br i1 %580, label %block_405cb4, label %block_405e59

block_405ddf:                                     ; preds = %block_405c87
  %592 = add i64 %335, -28
  %593 = add i64 %851, 7
  %594 = inttoptr i64 %592 to i32*
  store i32 0, i32* %594
  %595 = add i64 %335, -16
  %596 = add i64 %335, -496
  %597 = add i64 %335, -488
  br label %block_405de6

block_405e94:                                     ; preds = %block_405e82
  %598 = add i64 %979, -24
  %599 = inttoptr i64 %598 to i64*
  %600 = load i64, i64* %599
  %601 = add i64 %993, 9
  %602 = load i64, i64* %11, align 8, !tbaa !1240
  %603 = add i64 %602, -8
  %604 = inttoptr i64 %603 to i64*
  store i64 %601, i64* %604
  %605 = inttoptr i64 %603 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %3, align 8, !alias.scope !3513, !noalias !3516
  store i64 %602, i64* %11, align 8, !alias.scope !3513, !noalias !3516
  %607 = tail call i64 @ftell(i64 %600)
  %608 = load i64, i64* %3, align 8
  %609 = load i64, i64* %12, align 8
  %610 = add i64 %609, -528
  %611 = inttoptr i64 %610 to i64*
  store i64 %607, i64* %611
  %612 = add i64 %609, -24
  %613 = inttoptr i64 %612 to i64*
  %614 = load i64, i64* %613
  %615 = add i64 %608, 25
  %616 = load i64, i64* %11, align 8, !tbaa !1240
  %617 = add i64 %616, -8
  %618 = inttoptr i64 %617 to i64*
  store i64 %615, i64* %618
  %619 = inttoptr i64 %617 to i64*
  %620 = load i64, i64* %619
  store i64 %620, i64* %3, align 8, !alias.scope !3518, !noalias !3521
  store i64 %616, i64* %11, align 8, !alias.scope !3518, !noalias !3521
  %621 = tail call i64 @fseek(i64 %614, i64 0, i64 2), !noalias !3518
  %622 = load i64, i64* %3, align 8
  store i64 1, i64* %8, align 8, !tbaa !1240
  %623 = load i64, i64* %12, align 8
  %624 = add i64 %623, -16
  %625 = inttoptr i64 %624 to i64*
  %626 = load i64, i64* %625
  %627 = add i64 %626, 600
  %628 = inttoptr i64 %627 to i64*
  %629 = load i64, i64* %628
  %630 = add i64 %623, -504
  %631 = inttoptr i64 %630 to i32*
  %632 = load i32, i32* %631
  %633 = add i64 %626, 588
  %634 = inttoptr i64 %633 to i32*
  %635 = load i32, i32* %634
  %636 = sext i32 %632 to i64
  %637 = sext i32 %635 to i64
  %638 = mul nsw i64 %637, %636
  %639 = and i64 %638, 4294967295
  %640 = add i64 %623, -24
  %641 = inttoptr i64 %640 to i64*
  %642 = load i64, i64* %641
  store i64 %642, i64* %7, align 8, !tbaa !1240
  %643 = add i64 %623, -580
  %644 = trunc i64 %621 to i32
  %645 = inttoptr i64 %643 to i32*
  store i32 %644, i32* %645
  %646 = add i64 %622, 54
  %647 = load i64, i64* %11, align 8, !tbaa !1240
  %648 = add i64 %647, -8
  %649 = inttoptr i64 %648 to i64*
  store i64 %646, i64* %649
  %650 = inttoptr i64 %648 to i64*
  %651 = load i64, i64* %650
  store i64 %651, i64* %3, align 8, !alias.scope !3523, !noalias !3526
  store i64 %647, i64* %11, align 8, !alias.scope !3523, !noalias !3526
  %652 = tail call i64 @fwrite(i64 %629, i64 %639, i64 1, i64 %642)
  %653 = load i64, i64* %3, align 8
  %654 = add i64 %652, -1
  %655 = icmp eq i64 %654, 0
  %656 = select i1 %655, i64 53, i64 10
  %657 = add i64 %653, %656
  br i1 %655, label %block_405f21, label %block_405ef6

block_405d30:                                     ; preds = %block_405d1d
  %658 = add i64 %508, -488
  %659 = inttoptr i64 %658 to i64*
  %660 = load i64, i64* %659
  %661 = shl nuw nsw i64 %513, 3
  %662 = add i64 %660, %661
  %663 = inttoptr i64 %662 to i64*
  %664 = load i64, i64* %663
  %665 = add nuw nsw i64 %661, 4280
  %666 = add i64 %665, %516
  %667 = inttoptr i64 %666 to i64*
  %668 = load i64, i64* %667
  %669 = add i64 %668, %664
  %670 = add i64 %516, 4280
  %671 = add i64 %670, %661
  %672 = inttoptr i64 %671 to i64*
  store i64 %669, i64* %672
  %673 = add i64 %508, -504
  %674 = inttoptr i64 %673 to i32*
  %675 = load i32, i32* %674
  %676 = inttoptr i64 %658 to i64*
  %677 = load i64, i64* %676
  %678 = inttoptr i64 %510 to i32*
  %679 = load i32, i32* %678
  %680 = zext i32 %679 to i64
  store i64 %680, i64* %7, align 8, !tbaa !1240
  %681 = shl nuw nsw i64 %680, 3
  %682 = add i64 %677, %681
  %683 = inttoptr i64 %682 to i64*
  %684 = load i64, i64* %683
  %685 = sext i64 %684 to i128
  %686 = and i128 %685, -18446744073709551616
  %687 = zext i32 %675 to i128
  %688 = zext i64 %684 to i128
  %689 = or i128 %686, %688
  %690 = mul nsw i128 %689, %687
  %691 = trunc i128 %690 to i64
  store i64 %691, i64* %6, align 8, !tbaa !1240
  %692 = sext i64 %691 to i128
  %693 = icmp ne i128 %692, %690
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %18, align 1, !tbaa !1264
  %695 = trunc i128 %690 to i32
  %696 = and i32 %695, 255
  %697 = tail call i32 @llvm.ctpop.i32(i32 %696) #10
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  store i8 %700, i8* %19, align 1, !tbaa !1278
  store i8 0, i8* %20, align 1, !tbaa !1279
  store i8 0, i8* %21, align 1, !tbaa !1280
  %701 = lshr i64 %691, 63
  %702 = trunc i64 %701 to i8
  store i8 %702, i8* %22, align 1, !tbaa !1281
  store i8 %694, i8* %23, align 1, !tbaa !1282
  %703 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%checksumBhi_type* @checksumBhi to i64), i64 8) to i32*)
  %704 = sext i32 %703 to i64
  %705 = load i64, i64* %12, align 8
  %706 = add i64 %705, -568
  %707 = inttoptr i64 %706 to i64*
  store i64 %704, i64* %707
  %708 = ashr i64 %691, 63
  store i64 %708, i64* %387, align 8, !tbaa !1240
  %709 = inttoptr i64 %706 to i64*
  %710 = load i64, i64* %709
  store i64 %710, i64* %9, align 8, !tbaa !1240
  %711 = add i64 %522, 93
  store i64 %711, i64* %3, align 8
  %712 = sext i64 %710 to i128
  %713 = and i128 %712, -18446744073709551616
  %714 = zext i64 %708 to i128
  %715 = shl nuw i128 %714, 64
  %716 = and i128 %690, 18446744073709551615
  %717 = or i128 %715, %716
  %718 = zext i64 %710 to i128
  %719 = or i128 %713, %718
  %720 = sdiv i128 %717, %719
  %721 = trunc i128 %720 to i64
  %722 = and i128 %720, 18446744073709551615
  %723 = sext i64 %721 to i128
  %724 = and i128 %723, -18446744073709551616
  %725 = or i128 %724, %722
  %726 = icmp eq i128 %720, %725
  br i1 %726, label %732, label %727

; <label>:727:                                    ; preds = %block_405d30
  %728 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %711, %struct.Memory* %509) #14
  %729 = load i64, i64* %12, align 8
  %730 = load i64, i64* %3, align 8
  %731 = load i64, i64* %8, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89

; <label>:732:                                    ; preds = %block_405d30
  %733 = srem i128 %717, %719
  %734 = trunc i128 %733 to i64
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit89: ; preds = %732, %727
  %735 = phi i64 [ %731, %727 ], [ %734, %732 ]
  %736 = phi i64 [ %730, %727 ], [ %711, %732 ]
  %737 = phi i64 [ %729, %727 ], [ %705, %732 ]
  %738 = phi %struct.Memory* [ %728, %727 ], [ %509, %732 ]
  %739 = add i64 %737, -16
  %740 = inttoptr i64 %739 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %10, align 8, !tbaa !1240
  %742 = add i64 %737, -28
  %743 = inttoptr i64 %742 to i32*
  %744 = load i32, i32* %743
  %745 = zext i32 %744 to i64
  store i64 %745, i64* %372, align 8, !tbaa !1240
  %746 = shl nuw nsw i64 %745, 3
  %747 = add nuw nsw i64 %746, 4392
  %748 = add i64 %747, %741
  %749 = inttoptr i64 %748 to i64*
  %750 = load i64, i64* %749
  %751 = add i64 %750, %735
  %752 = add i64 %741, 4392
  %753 = add i64 %752, %746
  %754 = inttoptr i64 %753 to i64*
  store i64 %751, i64* %754
  %755 = inttoptr i64 %742 to i32*
  %756 = load i32, i32* %755
  %757 = add i32 %756, 1
  %758 = load i64, i64* %12, align 8
  %759 = add i64 %758, -28
  %760 = inttoptr i64 %759 to i32*
  store i32 %757, i32* %760
  %761 = add i64 %736, -112
  br label %block_405d1d

block_405f97:                                     ; preds = %block_405b6e
  %762 = add i64 %295, -256
  %763 = add i64 %302, 600
  %764 = inttoptr i64 %763 to i64*
  %765 = load i64, i64* %764
  %766 = add i64 %295, -508
  %767 = inttoptr i64 %766 to i32*
  %768 = load i32, i32* %767
  %769 = zext i32 %768 to i64
  %770 = add i64 %765, %769
  %771 = add i64 %302, 588
  %772 = inttoptr i64 %771 to i32*
  %773 = load i32, i32* %772
  %774 = zext i32 %773 to i64
  store i64 %770, i64* %10, align 8, !tbaa !1240
  %775 = add i64 %311, 50
  %776 = load i64, i64* %11, align 8, !tbaa !1240
  %777 = add i64 %776, -8
  %778 = inttoptr i64 %777 to i64*
  store i64 %775, i64* %778
  %779 = inttoptr i64 %777 to i64*
  %780 = load i64, i64* %779
  store i64 %780, i64* %3, align 8, !alias.scope !3528, !noalias !3531
  store i64 %776, i64* %11, align 8, !alias.scope !3528, !noalias !3531
  %781 = tail call i64 @memcpy(i64 %770, i64 %762, i64 %774), !noalias !3528
  %782 = load i64, i64* %12, align 8
  %783 = add i64 %782, -504
  %784 = load i64, i64* %3, align 8
  %785 = inttoptr i64 %783 to i32*
  %786 = load i32, i32* %785
  %787 = add i32 %786, 1
  %788 = zext i32 %787 to i64
  store i64 %788, i64* %372, align 8, !tbaa !1240
  %789 = inttoptr i64 %783 to i32*
  store i32 %787, i32* %789
  %790 = add i64 %782, -28
  %791 = add i64 %784, 25
  %792 = inttoptr i64 %790 to i32*
  store i32 0, i32* %792
  br label %block_405fe2

block_405c11:                                     ; preds = %block_405b81
  %793 = add i64 %1090, -368
  %794 = add i64 %1090, -256
  %795 = add i64 %1090, -16
  %796 = inttoptr i64 %795 to i64*
  %797 = load i64, i64* %796
  %798 = add i64 %797, 588
  %799 = inttoptr i64 %798 to i32*
  %800 = load i32, i32* %799
  %801 = zext i32 %800 to i64
  %802 = add i64 %1098, 37
  %803 = load i64, i64* %11, align 8, !tbaa !1240
  %804 = add i64 %803, -8
  %805 = inttoptr i64 %804 to i64*
  store i64 %802, i64* %805
  %806 = inttoptr i64 %804 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %3, align 8, !alias.scope !3533, !noalias !3536
  store i64 %803, i64* %11, align 8, !alias.scope !3533, !noalias !3536
  %808 = tail call i64 @memcpy(i64 %794, i64 %793, i64 %801), !noalias !3533
  %809 = load i64, i64* %3, align 8
  %810 = load i64, i64* %12, align 8
  br label %block_405f64

block_40612c:                                     ; preds = %block_4060ca, %block_4060f5, %block_405ef6
  %811 = phi i64 [ %504, %block_4060f5 ], [ %1037, %block_4060ca ], [ %126, %block_405ef6 ]
  %812 = phi %struct.Memory* [ %176, %block_4060f5 ], [ %176, %block_4060ca ], [ %982, %block_405ef6 ]
  %813 = add i64 %811, -4
  %814 = inttoptr i64 %813 to i32*
  %815 = load i32, i32* %814
  %816 = zext i32 %815 to i64
  store i64 %816, i64* %6, align 8, !tbaa !1240
  %817 = load i64, i64* %11, align 8
  %818 = add i64 %817, 608
  %819 = icmp ugt i64 %817, -609
  %820 = zext i1 %819 to i8
  store i8 %820, i8* %18, align 1, !tbaa !1264
  %821 = trunc i64 %818 to i32
  %822 = and i32 %821, 255
  %823 = tail call i32 @llvm.ctpop.i32(i32 %822) #10
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = xor i8 %825, 1
  store i8 %826, i8* %19, align 1, !tbaa !1278
  %827 = xor i64 %818, %817
  %828 = lshr i64 %827, 4
  %829 = trunc i64 %828 to i8
  %830 = and i8 %829, 1
  store i8 %830, i8* %20, align 1, !tbaa !1279
  %831 = icmp eq i64 %818, 0
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %21, align 1, !tbaa !1280
  %833 = lshr i64 %818, 63
  %834 = trunc i64 %833 to i8
  store i8 %834, i8* %22, align 1, !tbaa !1281
  %835 = lshr i64 %817, 63
  %836 = xor i64 %833, %835
  %837 = add nuw nsw i64 %836, %833
  %838 = icmp eq i64 %837, 2
  %839 = zext i1 %838 to i8
  store i8 %839, i8* %23, align 1, !tbaa !1282
  %840 = add i64 %817, 616
  %841 = inttoptr i64 %818 to i64*
  %842 = load i64, i64* %841
  store i64 %842, i64* %12, align 8, !tbaa !1240
  %843 = inttoptr i64 %840 to i64*
  %844 = load i64, i64* %843
  store i64 %844, i64* %3, align 8, !tbaa !1240
  %845 = add i64 %817, 624
  store i64 %845, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %812

block_405c87:                                     ; preds = %block_405c3b
  %846 = inttoptr i64 %366 to i32*
  %847 = load i32, i32* %846
  %848 = icmp eq i32 %847, 0
  %849 = lshr i32 %847, 31
  %850 = select i1 %848, i64 344, i64 19
  %851 = add i64 %371, %850
  br i1 %848, label %block_405ddf, label %block_405c9a

block_405e59:                                     ; preds = %block_405c9a
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3967), i64* %9, align 8, !tbaa !1240
  %852 = load i64, i64* @stderr
  %853 = add i64 %591, 25
  %854 = load i64, i64* %11, align 8, !tbaa !1240
  %855 = add i64 %854, -8
  %856 = inttoptr i64 %855 to i64*
  store i64 %853, i64* %856
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %859 = load i64, i64* %387, align 8, !alias.scope !3538, !noalias !3541
  %860 = load i64, i64* %857, align 8, !alias.scope !3538, !noalias !3541
  %861 = load i64, i64* %858, align 8, !alias.scope !3538, !noalias !3541
  %862 = inttoptr i64 %854 to i64*
  %863 = load i64, i64* %862
  %864 = add i64 %854, 8
  %865 = inttoptr i64 %864 to i64*
  %866 = load i64, i64* %865
  %867 = add i64 %854, 16
  %868 = inttoptr i64 %867 to i64*
  %869 = load i64, i64* %868
  %870 = add i64 %854, 24
  %871 = inttoptr i64 %870 to i64*
  %872 = load i64, i64* %871
  %873 = add i64 %854, 32
  %874 = inttoptr i64 %873 to i64*
  %875 = load i64, i64* %874
  %876 = add i64 %854, 40
  %877 = inttoptr i64 %876 to i64*
  %878 = load i64, i64* %877
  %879 = add i64 %854, 48
  %880 = inttoptr i64 %879 to i64*
  %881 = load i64, i64* %880
  %882 = add i64 %854, 56
  %883 = inttoptr i64 %882 to i64*
  %884 = load i64, i64* %883
  %885 = add i64 %854, 64
  %886 = inttoptr i64 %885 to i64*
  %887 = load i64, i64* %886
  %888 = add i64 %854, 72
  %889 = inttoptr i64 %888 to i64*
  %890 = load i64, i64* %889
  %891 = inttoptr i64 %855 to i64*
  %892 = load i64, i64* %891
  store i64 %892, i64* %3, align 8, !alias.scope !3538, !noalias !3541
  store i64 %854, i64* %11, align 8, !alias.scope !3538, !noalias !3541
  %893 = tail call i64 @fprintf(i64 %852, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3967), i64 %859, i64 %343, i64 %860, i64 %861, i64 %863, i64 %866, i64 %869, i64 %872, i64 %875, i64 %878, i64 %881, i64 %884, i64 %887, i64 %890), !noalias !3538
  %894 = load i64, i64* %3, align 8
  store i64 1, i64* %10, align 8, !tbaa !1240
  %895 = load i64, i64* %12, align 8
  %896 = add i64 %895, -576
  %897 = trunc i64 %893 to i32
  %898 = inttoptr i64 %896 to i32*
  store i32 %897, i32* %898
  %899 = add i64 %894, 16
  %900 = load i64, i64* %11, align 8, !tbaa !1240
  %901 = add i64 %900, -8
  %902 = inttoptr i64 %901 to i64*
  store i64 %899, i64* %902
  %903 = inttoptr i64 %901 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %3, align 8, !alias.scope !3543, !noalias !3546
  store i64 %900, i64* %11, align 8, !alias.scope !3543, !noalias !3546
  %905 = tail call i64 @exit(i64 1), !noalias !3543
  store i64 %905, i64* %385, align 8, !alias.scope !3543, !noalias !3546
  %906 = load i64, i64* %3, align 8
  %907 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %906, %struct.Memory* %334)
  ret %struct.Memory* %907

block_405db5:                                     ; preds = %block_405d1d
  %908 = add i64 %508, -368
  %909 = add i64 %508, -256
  %910 = add i64 %516, 588
  %911 = inttoptr i64 %910 to i32*
  %912 = load i32, i32* %911
  %913 = zext i32 %912 to i64
  %914 = add i64 %522, 37
  %915 = load i64, i64* %11, align 8, !tbaa !1240
  %916 = add i64 %915, -8
  %917 = inttoptr i64 %916 to i64*
  store i64 %914, i64* %917
  %918 = inttoptr i64 %916 to i64*
  %919 = load i64, i64* %918
  store i64 %919, i64* %3, align 8, !alias.scope !3548, !noalias !3551
  store i64 %915, i64* %11, align 8, !alias.scope !3548, !noalias !3551
  %920 = tail call i64 @memcpy(i64 %909, i64 %908, i64 %913), !noalias !3548
  %921 = load i64, i64* %3, align 8
  %922 = load i64, i64* %12, align 8
  br label %block_405e82

block_405e30:                                     ; preds = %block_405c3b
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3922), i64* %9, align 8, !tbaa !1240
  %923 = load i64, i64* @stderr
  %924 = add i64 %371, 25
  %925 = load i64, i64* %11, align 8, !tbaa !1240
  %926 = add i64 %925, -8
  %927 = inttoptr i64 %926 to i64*
  store i64 %924, i64* %927
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %930 = load i64, i64* %387, align 8, !alias.scope !3553, !noalias !3556
  %931 = load i64, i64* %928, align 8, !alias.scope !3553, !noalias !3556
  %932 = load i64, i64* %929, align 8, !alias.scope !3553, !noalias !3556
  %933 = inttoptr i64 %925 to i64*
  %934 = load i64, i64* %933
  %935 = add i64 %925, 8
  %936 = inttoptr i64 %935 to i64*
  %937 = load i64, i64* %936
  %938 = add i64 %925, 16
  %939 = inttoptr i64 %938 to i64*
  %940 = load i64, i64* %939
  %941 = add i64 %925, 24
  %942 = inttoptr i64 %941 to i64*
  %943 = load i64, i64* %942
  %944 = add i64 %925, 32
  %945 = inttoptr i64 %944 to i64*
  %946 = load i64, i64* %945
  %947 = add i64 %925, 40
  %948 = inttoptr i64 %947 to i64*
  %949 = load i64, i64* %948
  %950 = add i64 %925, 48
  %951 = inttoptr i64 %950 to i64*
  %952 = load i64, i64* %951
  %953 = add i64 %925, 56
  %954 = inttoptr i64 %953 to i64*
  %955 = load i64, i64* %954
  %956 = add i64 %925, 64
  %957 = inttoptr i64 %956 to i64*
  %958 = load i64, i64* %957
  %959 = add i64 %925, 72
  %960 = inttoptr i64 %959 to i64*
  %961 = load i64, i64* %960
  %962 = inttoptr i64 %926 to i64*
  %963 = load i64, i64* %962
  store i64 %963, i64* %3, align 8, !alias.scope !3553, !noalias !3556
  store i64 %925, i64* %11, align 8, !alias.scope !3553, !noalias !3556
  %964 = tail call i64 @fprintf(i64 %923, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3922), i64 %930, i64 %343, i64 %931, i64 %932, i64 %934, i64 %937, i64 %940, i64 %943, i64 %946, i64 %949, i64 %952, i64 %955, i64 %958, i64 %961), !noalias !3553
  %965 = load i64, i64* %3, align 8
  store i64 1, i64* %10, align 8, !tbaa !1240
  %966 = load i64, i64* %12, align 8
  %967 = add i64 %966, -572
  %968 = trunc i64 %964 to i32
  %969 = inttoptr i64 %967 to i32*
  store i32 %968, i32* %969
  %970 = add i64 %965, 16
  %971 = load i64, i64* %11, align 8, !tbaa !1240
  %972 = add i64 %971, -8
  %973 = inttoptr i64 %972 to i64*
  store i64 %970, i64* %973
  %974 = inttoptr i64 %972 to i64*
  %975 = load i64, i64* %974
  store i64 %975, i64* %3, align 8, !alias.scope !3558, !noalias !3561
  store i64 %971, i64* %11, align 8, !alias.scope !3558, !noalias !3561
  %976 = tail call i64 @exit(i64 1), !noalias !3558
  store i64 %976, i64* %385, align 8, !alias.scope !3558, !noalias !3561
  %977 = load i64, i64* %3, align 8
  %978 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %977, %struct.Memory* %334)
  ret %struct.Memory* %978

block_405e82.loopexit:                            ; preds = %block_405de6
  br label %block_405e82

block_405e82:                                     ; preds = %block_405e82.loopexit, %block_405db5
  %979 = phi i64 [ %922, %block_405db5 ], [ %335, %block_405e82.loopexit ]
  %980 = phi i64 [ %921, %block_405db5 ], [ %144, %block_405e82.loopexit ]
  %981 = phi i64 [ 168, %block_405db5 ], [ 87, %block_405e82.loopexit ]
  %982 = phi %struct.Memory* [ %509, %block_405db5 ], [ %133, %block_405e82.loopexit ]
  %983 = add i64 %980, %981
  %984 = add i64 %979, -504
  %985 = inttoptr i64 %984 to i32*
  %986 = load i32, i32* %985
  %987 = add i64 %979, -512
  %988 = inttoptr i64 %987 to i32*
  %989 = load i32, i32* %988
  %990 = sub i32 %986, %989
  %991 = icmp eq i32 %990, 0
  %992 = select i1 %991, i64 18, i64 221
  %993 = add i64 %983, %992
  br i1 %991, label %block_405e94, label %block_405f64

block_4060ca:                                     ; preds = %block_40607a
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64* %9, align 8, !tbaa !1240
  %994 = load i64, i64* @stderr
  store i64 %994, i64* %10, align 8, !tbaa !1240
  %995 = add i64 %480, 25
  %996 = load i64, i64* %11, align 8, !tbaa !1240
  %997 = add i64 %996, -8
  %998 = inttoptr i64 %997 to i64*
  store i64 %995, i64* %998
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1001 = load i64, i64* %387, align 8, !alias.scope !3563, !noalias !3566
  %1002 = load i64, i64* %386, align 8, !alias.scope !3563, !noalias !3566
  %1003 = load i64, i64* %999, align 8, !alias.scope !3563, !noalias !3566
  %1004 = load i64, i64* %1000, align 8, !alias.scope !3563, !noalias !3566
  %1005 = inttoptr i64 %996 to i64*
  %1006 = load i64, i64* %1005
  %1007 = add i64 %996, 8
  %1008 = inttoptr i64 %1007 to i64*
  %1009 = load i64, i64* %1008
  %1010 = add i64 %996, 16
  %1011 = inttoptr i64 %1010 to i64*
  %1012 = load i64, i64* %1011
  %1013 = add i64 %996, 24
  %1014 = inttoptr i64 %1013 to i64*
  %1015 = load i64, i64* %1014
  %1016 = add i64 %996, 32
  %1017 = inttoptr i64 %1016 to i64*
  %1018 = load i64, i64* %1017
  %1019 = add i64 %996, 40
  %1020 = inttoptr i64 %1019 to i64*
  %1021 = load i64, i64* %1020
  %1022 = add i64 %996, 48
  %1023 = inttoptr i64 %1022 to i64*
  %1024 = load i64, i64* %1023
  %1025 = add i64 %996, 56
  %1026 = inttoptr i64 %1025 to i64*
  %1027 = load i64, i64* %1026
  %1028 = add i64 %996, 64
  %1029 = inttoptr i64 %1028 to i64*
  %1030 = load i64, i64* %1029
  %1031 = add i64 %996, 72
  %1032 = inttoptr i64 %1031 to i64*
  %1033 = load i64, i64* %1032
  %1034 = inttoptr i64 %997 to i64*
  %1035 = load i64, i64* %1034
  store i64 %1035, i64* %3, align 8, !alias.scope !3563, !noalias !3566
  store i64 %996, i64* %11, align 8, !alias.scope !3563, !noalias !3566
  %1036 = tail call i64 @fprintf(i64 %994, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 4011), i64 %1001, i64 %1002, i64 %1003, i64 %1004, i64 %1006, i64 %1009, i64 %1012, i64 %1015, i64 %1018, i64 %1021, i64 %1024, i64 %1027, i64 %1030, i64 %1033), !noalias !3563
  %1037 = load i64, i64* %12, align 8
  %1038 = add i64 %1037, -4
  %1039 = inttoptr i64 %1038 to i32*
  store i32 1, i32* %1039
  %1040 = add i64 %1037, -608
  %1041 = trunc i64 %1036 to i32
  %1042 = inttoptr i64 %1040 to i32*
  store i32 %1041, i32* %1042
  br label %block_40612c

block_405b81:                                     ; preds = %block_405b6e
  %1043 = add i64 %295, -144
  %1044 = add i64 %302, 584
  %1045 = inttoptr i64 %1044 to i32*
  %1046 = load i32, i32* %1045
  %1047 = zext i32 %1046 to i64
  %1048 = add i64 %295, -24
  %1049 = inttoptr i64 %1048 to i64*
  %1050 = load i64, i64* %1049
  %1051 = add i64 %295, -536
  %1052 = inttoptr i64 %1051 to i64*
  store i64 %1050, i64* %1052
  %1053 = inttoptr i64 %1051 to i64*
  %1054 = load i64, i64* %1053
  %1055 = add i64 %311, 52
  %1056 = load i64, i64* %11, align 8, !tbaa !1240
  %1057 = add i64 %1056, -8
  %1058 = inttoptr i64 %1057 to i64*
  store i64 %1055, i64* %1058
  %1059 = inttoptr i64 %1057 to i64*
  %1060 = load i64, i64* %1059
  store i64 %1060, i64* %3, align 8, !alias.scope !3568, !noalias !3571
  store i64 %1056, i64* %11, align 8, !alias.scope !3568, !noalias !3571
  %1061 = tail call i64 @fread(i64 %1043, i64 %1047, i64 1, i64 %1054)
  %1062 = load i64, i64* %12, align 8
  %1063 = add i64 %1062, -368
  %1064 = load i64, i64* %3, align 8
  store i64 %1063, i64* %8, align 8, !tbaa !1240
  %1065 = add i64 %1062, -144
  store i64 %1065, i64* %10, align 8, !tbaa !1240
  %1066 = add i64 %1062, -16
  %1067 = inttoptr i64 %1066 to i64*
  %1068 = load i64, i64* %1067
  %1069 = add i64 %1068, 4312
  %1070 = add i64 %1068, 544
  %1071 = inttoptr i64 %1070 to i32*
  %1072 = load i32, i32* %1071
  %1073 = zext i32 %1072 to i64
  %1074 = add i64 %1068, 540
  %1075 = inttoptr i64 %1074 to i32*
  %1076 = load i32, i32* %1075
  %1077 = zext i32 %1076 to i64
  %1078 = add i64 %1068, 548
  %1079 = inttoptr i64 %1078 to i32*
  %1080 = load i32, i32* %1079
  %1081 = zext i32 %1080 to i64
  store i64 %1081, i64* %389, align 8, !tbaa !1240
  store i64 %1069, i64* %9, align 8, !tbaa !1240
  store i64 %1073, i64* %7, align 8, !tbaa !1240
  store i64 %1077, i64* %372, align 8, !tbaa !1240
  store i64 %1081, i64* %388, align 8, !tbaa !1240
  %1082 = add i64 %1062, -544
  %1083 = inttoptr i64 %1082 to i64*
  store i64 %1061, i64* %1083
  %1084 = add i64 %1064, -5653
  %1085 = add i64 %1064, 82
  %1086 = load i64, i64* %11, align 8, !tbaa !1240
  %1087 = add i64 %1086, -8
  %1088 = inttoptr i64 %1087 to i64*
  store i64 %1085, i64* %1088
  store i64 %1087, i64* %11, align 8, !tbaa !1240
  %1089 = tail call %struct.Memory* @sub_4045a0_SelectToView(%struct.State* nonnull %0, i64 %1084, %struct.Memory* %296)
  %1090 = load i64, i64* %12, align 8
  %1091 = add i64 %1090, -32
  %1092 = load i64, i64* %3, align 8
  %1093 = inttoptr i64 %1091 to i32*
  %1094 = load i32, i32* %1093
  %1095 = add i32 %1094, -1
  %1096 = icmp eq i32 %1095, 0
  %1097 = select i1 %1096, i64 10, i64 52
  %1098 = add i64 %1092, %1097
  br i1 %1096, label %block_405c11, label %block_405c3b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402751(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_402751:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -24
  %9 = inttoptr i64 %8 to i64*
  %10 = load i64, i64* %9
  %11 = add i64 %10, 4
  %12 = inttoptr i64 %11 to i32*
  store i32 10, i32* %12
  %13 = inttoptr i64 %8 to i64*
  %14 = load i64, i64* %13
  %15 = add i64 %14, 8
  %16 = inttoptr i64 %15 to i32*
  store i32 1, i32* %16
  %17 = inttoptr i64 %8 to i64*
  %18 = load i64, i64* %17
  %19 = add i64 %18, 16
  %20 = inttoptr i64 %19 to i64*
  store i64 100000, i64* %20
  %21 = add i64 %7, -4
  %22 = inttoptr i64 %21 to i32*
  store i32 1, i32* %22
  %23 = inttoptr i64 %21 to i32*
  %24 = load i32, i32* %23
  %25 = zext i32 %24 to i64
  store i64 %25, i64* %4, align 8, !tbaa !1240
  %26 = load i64, i64* %5, align 8
  %27 = add i64 %26, 1168
  %28 = icmp ugt i64 %26, -1169
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %29, i8* %30, align 1, !tbaa !1264
  %31 = trunc i64 %27 to i32
  %32 = and i32 %31, 255
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #10
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %36, i8* %37, align 1, !tbaa !1278
  %38 = xor i64 %26, 16
  %39 = xor i64 %38, %27
  %40 = lshr i64 %39, 4
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %42, i8* %43, align 1, !tbaa !1279
  %44 = icmp eq i64 %27, 0
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %45, i8* %46, align 1, !tbaa !1280
  %47 = lshr i64 %27, 63
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %48, i8* %49, align 1, !tbaa !1281
  %50 = lshr i64 %26, 63
  %51 = xor i64 %47, %50
  %52 = add nuw nsw i64 %51, %47
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %54, i8* %55, align 1, !tbaa !1282
  %56 = add i64 %26, 1176
  %57 = inttoptr i64 %27 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %6, align 8, !tbaa !1240
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %3, align 8, !tbaa !1240
  %61 = add i64 %26, 1184
  store i64 %61, i64* %5, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403ac0_DC(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
block_403ac0:
  %3 = alloca <2 x i64>, align 16
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i8*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %9 = bitcast %union.anon* %8 to i8*
  %10 = bitcast %union.anon* %5 to i32*
  %11 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %14 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %29 = load i64, i64* %18, align 8
  %30 = load i64, i64* %17, align 8, !tbaa !1240
  %31 = add i64 %30, -8
  %32 = inttoptr i64 %31 to i64*
  store i64 %29, i64* %32
  store i64 %31, i64* %18, align 8, !tbaa !1240
  %33 = load i64, i64* %25, align 8
  %34 = add i64 %30, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35
  %36 = load i64, i64* %24, align 8
  %37 = add i64 %30, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38
  %39 = load i64, i64* %23, align 8
  %40 = add i64 %30, -32
  %41 = inttoptr i64 %40 to i64*
  store i64 %39, i64* %41
  %42 = load i64, i64* %22, align 8
  %43 = add i64 %30, -40
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44
  %45 = load i64, i64* %12, align 8
  %46 = add i64 %30, -48
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47
  %48 = add i64 %30, -344
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %52 = getelementptr %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %55 = bitcast [32 x %union.VectorReg]* %26 to i8*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast [32 x %union.VectorReg]* %26 to i32*
  store i32 0, i32* %57, align 1, !tbaa !3573
  %58 = getelementptr inbounds i8, i8* %55, i64 4
  %59 = bitcast i8* %58 to i32*
  store i32 0, i32* %59, align 1, !tbaa !3573
  %60 = bitcast i64* %56 to i32*
  store i32 0, i32* %60, align 1, !tbaa !3573
  %61 = getelementptr inbounds i8, i8* %55, i64 12
  %62 = bitcast i8* %61 to i32*
  store i32 0, i32* %62, align 1, !tbaa !3573
  %63 = add i64 %30, -64
  %64 = load i64, i64* %16, align 8
  %65 = inttoptr i64 %63 to i64*
  store i64 %64, i64* %65
  %66 = add i64 %30, -68
  %67 = inttoptr i64 %66 to i32*
  store i32 0, i32* %67
  %68 = add i64 %30, -80
  %69 = bitcast [32 x %union.VectorReg]* %26 to double*
  %70 = load double, double* %69, align 1
  %71 = inttoptr i64 %68 to double*
  store double %70, double* %71
  %72 = add i64 %1, 54
  %73 = add i64 %30, -352
  %74 = inttoptr i64 %73 to i64*
  store i64 %72, i64* %74
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %77 = inttoptr i64 %73 to i64*
  %78 = load i64, i64* %77
  store i64 %78, i64* %4, align 8, !alias.scope !3574, !noalias !3577
  store i64 %48, i64* %17, align 8, !alias.scope !3574, !noalias !3577
  %79 = tail call i64 @malloc(i64 40)
  %80 = load i64, i64* %4, align 8
  store i32 0, i32* %57, align 1, !tbaa !3573
  store i32 0, i32* %59, align 1, !tbaa !3573
  store i32 0, i32* %60, align 1, !tbaa !3573
  store i32 0, i32* %62, align 1, !tbaa !3573
  %81 = load i64, i64* %18, align 8
  %82 = add i64 %81, -88
  %83 = inttoptr i64 %82 to i64*
  store i64 %79, i64* %83
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84
  %86 = inttoptr i64 %85 to i32*
  store i32 0, i32* %86
  %87 = inttoptr i64 %82 to i64*
  %88 = load i64, i64* %87
  %89 = add i64 %88, 4
  %90 = inttoptr i64 %89 to i32*
  store i32 0, i32* %90
  %91 = inttoptr i64 %82 to i64*
  %92 = load i64, i64* %91
  %93 = add i64 %92, 8
  %94 = inttoptr i64 %93 to i64*
  store i64 0, i64* %94
  %95 = inttoptr i64 %82 to i64*
  %96 = load i64, i64* %95
  %97 = add i64 %96, 16
  %98 = inttoptr i64 %97 to i32*
  store i32 0, i32* %98
  %99 = inttoptr i64 %82 to i64*
  %100 = load i64, i64* %99
  %101 = add i64 %100, 24
  %102 = inttoptr i64 %101 to i64*
  store i64 0, i64* %102
  %103 = inttoptr i64 %82 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %104, 32
  %106 = load double, double* %69, align 1
  %107 = inttoptr i64 %105 to double*
  store double %106, double* %107
  %108 = add i64 %81, -56
  %109 = inttoptr i64 %108 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %16, align 8, !tbaa !1240
  %111 = add i64 %81, -60
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %15, align 8, !tbaa !1240
  %115 = add i64 %80, 11690
  %116 = add i64 %80, 84
  %117 = load i64, i64* %17, align 8, !tbaa !1240
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %116, i64* %119
  store i64 %118, i64* %17, align 8, !tbaa !1240
  %120 = tail call %struct.Memory* @sub_4068a0_NewAdcViewCntl(%struct.State* nonnull %0, i64 %115, %struct.Memory* %2)
  %121 = load i64, i64* %18, align 8
  %122 = add i64 %121, -96
  %123 = load i64, i64* %11, align 8
  %124 = load i64, i64* %4, align 8
  %125 = inttoptr i64 %122 to i64*
  store i64 %123, i64* %125
  %126 = inttoptr i64 %122 to i64*
  %127 = load i64, i64* %126
  %128 = icmp eq i64 %127, 0
  %129 = select i1 %128, i64 15, i64 80
  %130 = add i64 %124, %129
  br i1 %128, label %block_403b59, label %block_403b9a

block_403d9f:                                     ; preds = %block_403d6d
  %131 = add i64 %997, -160
  %132 = inttoptr i64 %131 to i32*
  store i32 -1, i32* %132
  %133 = add i64 %1011, 41
  br label %block_403dc8

block_403cb9:                                     ; preds = %block_403c7d
  %134 = add i64 %964, 4504
  %135 = inttoptr i64 %134 to i32*
  %136 = load i32, i32* %135
  %137 = inttoptr i64 %944 to i64*
  %138 = load i64, i64* %137
  %139 = add i64 %138, 16
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140
  %142 = add i32 %141, %136
  %143 = inttoptr i64 %139 to i32*
  store i32 %142, i32* %143
  %144 = inttoptr i64 %951 to i64*
  %145 = load i64, i64* %144
  %146 = add i64 %145, 4496
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  %149 = inttoptr i64 %944 to i64*
  %150 = load i64, i64* %149
  %151 = add i64 %150, 8
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152
  %154 = add i64 %153, %148
  %155 = inttoptr i64 %151 to i64*
  store i64 %154, i64* %155
  %156 = load i64, i64* %18, align 8
  %157 = add i64 %156, -96
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158
  %160 = add i64 %159, 560
  %161 = inttoptr i64 %160 to i32*
  %162 = load i32, i32* %161
  %163 = add i64 %156, -88
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164
  %166 = add i64 %165, 4
  %167 = inttoptr i64 %166 to i32*
  %168 = load i32, i32* %167
  %169 = add i32 %168, %162
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %13, align 8, !tbaa !1240
  %171 = inttoptr i64 %166 to i32*
  store i32 %169, i32* %171
  %172 = inttoptr i64 %157 to i64*
  %173 = load i64, i64* %172
  %174 = add i64 %173, 4424
  %175 = inttoptr i64 %174 to i64*
  %176 = load i64, i64* %175
  %177 = inttoptr i64 %163 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %14, align 8, !tbaa !1240
  %179 = add i64 %178, 24
  %180 = inttoptr i64 %179 to i64*
  %181 = load i64, i64* %180
  %182 = add i64 %181, %176
  %183 = add i64 %970, 86
  %184 = inttoptr i64 %179 to i64*
  store i64 %182, i64* %184
  %185 = load i64, i64* %18, align 8
  br label %block_403d0f

block_403f9c:                                     ; preds = %block_403dc8, %block_403f7d
  %186 = phi i64 [ %887, %block_403dc8 ], [ %388, %block_403f7d ]
  %187 = phi i64 [ %899, %block_403dc8 ], [ %392, %block_403f7d ]
  %188 = phi %struct.Memory* [ %396, %block_403dc8 ], [ %396, %block_403f7d ]
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 805), i64* %16, align 8, !tbaa !1240
  store i64 0, i64* %11, align 8, !tbaa !1240
  %189 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  store i64 1, i64* %189, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3575), i64* %14, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3593), i64* %19, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3597), i64* %20, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3603), i64* %21, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3607), i64* %12, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3619), i64* %24, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3628), i64* %25, align 8, !tbaa !1240
  %190 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2512) to double*)
  %191 = add i64 %186, -56
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  %194 = add i64 %193, 4
  %195 = inttoptr i64 %194 to i8*
  %196 = load i8, i8* %195
  %197 = add i64 %193, 1040
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198
  %200 = zext i32 %199 to i64
  %201 = add i64 %186, -72
  %202 = inttoptr i64 %201 to double*
  %203 = load double, double* %202
  %204 = add i64 %186, -224
  %205 = inttoptr i64 %204 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3558), i64* %205
  %206 = add i64 %186, -88
  %207 = inttoptr i64 %206 to i64*
  %208 = load i64, i64* %207
  %209 = add i64 %208, 4
  %210 = inttoptr i64 %209 to i32*
  %211 = load i32, i32* %210
  %212 = uitofp i32 %211 to double
  %213 = bitcast %union.VectorReg* %28 to double*
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %215 = bitcast i64* %214 to <2 x i32>*
  %216 = load <2 x i32>, <2 x i32>* %215, align 1
  %217 = fmul double %212, %190
  %218 = load i64, i64* %18, align 8
  %219 = add i64 %218, -72
  %220 = inttoptr i64 %219 to double*
  %221 = load double, double* %220
  %222 = fdiv double %217, %221
  store double %222, double* %213, align 1, !tbaa !1439
  %223 = add i64 %218, -76
  %224 = inttoptr i64 %223 to i32*
  %225 = load i32, i32* %224
  %226 = sext i8 %196 to i64
  %227 = and i64 %226, 4294967295
  store i64 %227, i64* %23, align 8, !tbaa !1240
  %228 = add i64 %218, -232
  %229 = inttoptr i64 %228 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3581), i64* %229
  %230 = sext i8 %196 to i64
  %231 = and i64 %230, 4294967295
  store i64 %231, i64* %15, align 8, !tbaa !1240
  %232 = add i64 %218, -240
  %233 = load i64, i64* %14, align 8
  %234 = inttoptr i64 %232 to i64*
  store i64 %233, i64* %234
  store i64 %200, i64* %14, align 8, !tbaa !1240
  %235 = add i64 %218, -244
  %236 = inttoptr i64 %235 to i32*
  store i32 %225, i32* %236
  %237 = load i32, i32* %10, align 4
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %13, align 8, !tbaa !1240
  %239 = add i64 %218, -256
  %240 = load i64, i64* %19, align 8
  %241 = inttoptr i64 %239 to i64*
  store i64 %240, i64* %241
  store i64 %238, i64* %19, align 8, !tbaa !1240
  %242 = bitcast double %203 to <2 x i32>
  %243 = extractelement <2 x i32> %242, i32 0
  store i32 %243, i32* %57, align 1, !tbaa !2106
  %244 = extractelement <2 x i32> %242, i32 1
  store i32 %244, i32* %59, align 1, !tbaa !2106
  store i32 0, i32* %60, align 1, !tbaa !2106
  store i32 0, i32* %62, align 1, !tbaa !2106
  %245 = bitcast double %222 to <2 x i32>
  %246 = extractelement <2 x i32> %245, i32 0
  store i32 %246, i32* %823, align 1, !tbaa !2106
  %247 = extractelement <2 x i32> %245, i32 1
  store i32 %247, i32* %824, align 1, !tbaa !2106
  %248 = extractelement <2 x i32> %216, i32 0
  store i32 %248, i32* %825, align 1, !tbaa !2106
  %249 = extractelement <2 x i32> %216, i32 1
  store i32 %249, i32* %826, align 1, !tbaa !2106
  %250 = add i64 %218, -224
  %251 = inttoptr i64 %250 to i64*
  %252 = load i64, i64* %251
  %253 = load i64, i64* %17, align 8
  %254 = inttoptr i64 %253 to i64*
  store i64 %252, i64* %254
  %255 = inttoptr i64 %235 to i32*
  %256 = load i32, i32* %255
  %257 = add i64 %253, 8
  %258 = inttoptr i64 %257 to i32*
  store i32 %256, i32* %258
  %259 = load i64, i64* %18, align 8
  %260 = add i64 %259, -240
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  %263 = add i64 %253, 16
  %264 = inttoptr i64 %263 to i64*
  store i64 %262, i64* %264
  %265 = add i64 %259, -232
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266
  %268 = add i64 %253, 24
  %269 = inttoptr i64 %268 to i64*
  store i64 %267, i64* %269
  %270 = add i64 %259, -256
  %271 = inttoptr i64 %270 to i64*
  %272 = load i64, i64* %271
  store i64 %272, i64* %22, align 8, !tbaa !1240
  %273 = add i64 %253, 32
  %274 = inttoptr i64 %273 to i64*
  store i64 %272, i64* %274
  %275 = add i64 %253, 40
  %276 = load i64, i64* %20, align 8
  %277 = inttoptr i64 %275 to i64*
  store i64 %276, i64* %277
  %278 = add i64 %253, 48
  %279 = load i64, i64* %21, align 8
  %280 = inttoptr i64 %278 to i64*
  store i64 %279, i64* %280
  %281 = add i64 %253, 56
  %282 = load i64, i64* %12, align 8
  %283 = inttoptr i64 %281 to i64*
  store i64 %282, i64* %283
  %284 = add i64 %253, 64
  %285 = load i64, i64* %24, align 8
  %286 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %286
  %287 = add i64 %253, 72
  %288 = load i64, i64* %25, align 8
  %289 = inttoptr i64 %287 to i64*
  store i64 %288, i64* %289
  %290 = add i64 %187, -3564
  %291 = add i64 %187, 304
  %292 = add i64 %253, -8
  %293 = inttoptr i64 %292 to i64*
  store i64 %291, i64* %293
  store i64 %292, i64* %17, align 8, !tbaa !1240
  %294 = tail call %struct.Memory* @sub_4031b0_c_print_results(%struct.State* nonnull %0, i64 %290, %struct.Memory* %188)
  %295 = load i64, i64* %18, align 8
  %296 = add i64 %295, -44
  %297 = inttoptr i64 %296 to i32*
  store i32 0, i32* %297
  br label %block_4040d3

block_4040d3:                                     ; preds = %block_403b59, %block_403f9c
  %298 = phi i64 [ %295, %block_403f9c ], [ %1167, %block_403b59 ]
  %299 = phi %struct.Memory* [ %294, %block_403f9c ], [ %120, %block_403b59 ]
  %300 = add i64 %298, -44
  %301 = inttoptr i64 %300 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %11, align 8, !tbaa !1240
  %304 = load i64, i64* %17, align 8
  %305 = add i64 %304, 296
  %306 = icmp ugt i64 %304, -297
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %49, align 1, !tbaa !1264
  %308 = trunc i64 %305 to i32
  %309 = and i32 %308, 255
  %310 = tail call i32 @llvm.ctpop.i32(i32 %309) #10
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  store i8 %313, i8* %50, align 1, !tbaa !1278
  %314 = xor i64 %305, %304
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  store i8 %317, i8* %51, align 1, !tbaa !1279
  %318 = icmp eq i64 %305, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %52, align 1, !tbaa !1280
  %320 = lshr i64 %305, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %53, align 1, !tbaa !1281
  %322 = lshr i64 %304, 63
  %323 = xor i64 %320, %322
  %324 = add nuw nsw i64 %323, %320
  %325 = icmp eq i64 %324, 2
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %54, align 1, !tbaa !1282
  %327 = add i64 %304, 304
  %328 = inttoptr i64 %305 to i64*
  %329 = load i64, i64* %328
  store i64 %329, i64* %12, align 8, !tbaa !1240
  %330 = add i64 %304, 312
  %331 = inttoptr i64 %327 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %22, align 8, !tbaa !1240
  %333 = add i64 %304, 320
  %334 = inttoptr i64 %330 to i64*
  %335 = load i64, i64* %334
  store i64 %335, i64* %23, align 8, !tbaa !1240
  %336 = add i64 %304, 328
  %337 = inttoptr i64 %333 to i64*
  %338 = load i64, i64* %337
  store i64 %338, i64* %24, align 8, !tbaa !1240
  %339 = add i64 %304, 336
  %340 = inttoptr i64 %336 to i64*
  %341 = load i64, i64* %340
  store i64 %341, i64* %25, align 8, !tbaa !1240
  %342 = add i64 %304, 344
  %343 = inttoptr i64 %339 to i64*
  %344 = load i64, i64* %343
  store i64 %344, i64* %18, align 8, !tbaa !1240
  %345 = inttoptr i64 %342 to i64*
  %346 = load i64, i64* %345
  store i64 %346, i64* %4, align 8, !tbaa !1240
  %347 = add i64 %304, 352
  store i64 %347, i64* %17, align 8, !tbaa !1240
  ret %struct.Memory* %299

block_403f7d:                                     ; preds = %block_403dc8
  %348 = load i64, i64* @stdout
  %349 = add i64 %899, 25
  %350 = load i64, i64* %17, align 8, !tbaa !1240
  %351 = add i64 %350, -8
  %352 = inttoptr i64 %351 to i64*
  store i64 %349, i64* %352
  %353 = load i64, i64* %411, align 8, !alias.scope !3579, !noalias !3582
  %354 = load i64, i64* %412, align 8, !alias.scope !3579, !noalias !3582
  %355 = load i64, i64* %413, align 8, !alias.scope !3579, !noalias !3582
  %356 = inttoptr i64 %350 to i64*
  %357 = load i64, i64* %356
  %358 = add i64 %350, 8
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  %361 = add i64 %350, 16
  %362 = inttoptr i64 %361 to i64*
  %363 = load i64, i64* %362
  %364 = add i64 %350, 24
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  %367 = add i64 %350, 32
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  %370 = add i64 %350, 40
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  %373 = add i64 %350, 48
  %374 = inttoptr i64 %373 to i64*
  %375 = load i64, i64* %374
  %376 = add i64 %350, 56
  %377 = inttoptr i64 %376 to i64*
  %378 = load i64, i64* %377
  %379 = add i64 %350, 64
  %380 = inttoptr i64 %379 to i64*
  %381 = load i64, i64* %380
  %382 = add i64 %350, 72
  %383 = inttoptr i64 %382 to i64*
  %384 = load i64, i64* %383
  %385 = inttoptr i64 %351 to i64*
  %386 = load i64, i64* %385
  store i64 %386, i64* %4, align 8, !alias.scope !3579, !noalias !3582
  store i64 %350, i64* %17, align 8, !alias.scope !3579, !noalias !3582
  %387 = tail call i64 @fprintf(i64 %348, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3536), i64 %353, i64 %891, i64 %354, i64 %355, i64 %357, i64 %360, i64 %363, i64 %366, i64 %369, i64 %372, i64 %375, i64 %378, i64 %381, i64 %384), !noalias !3579
  %388 = load i64, i64* %18, align 8
  %389 = add i64 %388, -212
  %390 = trunc i64 %387 to i32
  %391 = load i64, i64* %4, align 8
  %392 = add i64 %391, 6
  %393 = inttoptr i64 %389 to i32*
  store i32 %390, i32* %393
  br label %block_403f9c

block_403dc8:                                     ; preds = %block_403daf, %block_403d9f
  %394 = phi i64 [ %1105, %block_403daf ], [ %131, %block_403d9f ]
  %395 = phi i64 [ %1107, %block_403daf ], [ %133, %block_403d9f ]
  %396 = phi %struct.Memory* [ %996, %block_403daf ], [ %996, %block_403d9f ]
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = add i64 %997, -76
  %400 = inttoptr i64 %399 to i32*
  store i32 %398, i32* %400
  %401 = load i64, i64* @stdout
  store i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295) to i32) to i64), i64* %13, align 8, !tbaa !1240
  store i8 trunc (i64 xor (i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295) to i32) to i64), i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295)) to i8), i8* %7, align 1, !tbaa !1428
  %402 = add i64 %997, -168
  %403 = inttoptr i64 %402 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3507), i64* %403
  %404 = add i64 %997, -169
  %405 = inttoptr i64 %404 to i8*
  store i8 trunc (i64 xor (i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295) to i32) to i64), i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295)) to i8), i8* %405
  %406 = add i64 %395, 60
  %407 = load i64, i64* %17, align 8, !tbaa !1240
  %408 = add i64 %407, -8
  %409 = inttoptr i64 %408 to i64*
  store i64 %406, i64* %409
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %414 = load i64, i64* %411, align 8, !alias.scope !3584, !noalias !3587
  %415 = load i64, i64* %412, align 8, !alias.scope !3584, !noalias !3587
  %416 = load i64, i64* %413, align 8, !alias.scope !3584, !noalias !3587
  %417 = inttoptr i64 %407 to i64*
  %418 = load i64, i64* %417
  %419 = add i64 %407, 8
  %420 = inttoptr i64 %419 to i64*
  %421 = load i64, i64* %420
  %422 = add i64 %407, 16
  %423 = inttoptr i64 %422 to i64*
  %424 = load i64, i64* %423
  %425 = add i64 %407, 24
  %426 = inttoptr i64 %425 to i64*
  %427 = load i64, i64* %426
  %428 = add i64 %407, 32
  %429 = inttoptr i64 %428 to i64*
  %430 = load i64, i64* %429
  %431 = add i64 %407, 40
  %432 = inttoptr i64 %431 to i64*
  %433 = load i64, i64* %432
  %434 = add i64 %407, 48
  %435 = inttoptr i64 %434 to i64*
  %436 = load i64, i64* %435
  %437 = add i64 %407, 56
  %438 = inttoptr i64 %437 to i64*
  %439 = load i64, i64* %438
  %440 = add i64 %407, 64
  %441 = inttoptr i64 %440 to i64*
  %442 = load i64, i64* %441
  %443 = add i64 %407, 72
  %444 = inttoptr i64 %443 to i64*
  %445 = load i64, i64* %444
  %446 = inttoptr i64 %408 to i64*
  %447 = load i64, i64* %446
  store i64 %447, i64* %4, align 8, !alias.scope !3584, !noalias !3587
  store i64 %407, i64* %17, align 8, !alias.scope !3584, !noalias !3587
  %448 = tail call i64 @fprintf(i64 %401, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295) to i32) to i64), i64 %414, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3293), i64 4294967295) to i32) to i64), i64 %415, i64 %416, i64 %418, i64 %421, i64 %424, i64 %427, i64 %430, i64 %433, i64 %436, i64 %439, i64 %442, i64 %445), !noalias !3584
  %449 = load i64, i64* %4, align 8
  %450 = load i64, i64* @stdout
  %451 = load i64, i64* %18, align 8
  %452 = add i64 %451, -72
  %453 = inttoptr i64 %452 to double*
  %454 = load double, double* %453
  store double %454, double* %69, align 1, !tbaa !1439
  store double 0.000000e+00, double* %980, align 1, !tbaa !1439
  store i8 1, i8* %7, align 1, !tbaa !1428
  %455 = add i64 %451, -176
  %456 = trunc i64 %448 to i32
  %457 = inttoptr i64 %455 to i32*
  store i32 %456, i32* %457
  %458 = add i64 %451, -177
  %459 = inttoptr i64 %458 to i8*
  store i8 1, i8* %459
  %460 = add i64 %449, 42
  %461 = load i64, i64* %17, align 8, !tbaa !1240
  %462 = add i64 %461, -8
  %463 = inttoptr i64 %462 to i64*
  store i64 %460, i64* %463
  %464 = load i64, i64* %411, align 8, !alias.scope !3589, !noalias !3592
  %465 = load i64, i64* %410, align 8, !alias.scope !3589, !noalias !3592
  %466 = load i64, i64* %413, align 8, !alias.scope !3589, !noalias !3592
  %467 = inttoptr i64 %461 to i64*
  %468 = load i64, i64* %467
  %469 = add i64 %461, 8
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  %472 = add i64 %461, 16
  %473 = inttoptr i64 %472 to i64*
  %474 = load i64, i64* %473
  %475 = add i64 %461, 24
  %476 = inttoptr i64 %475 to i64*
  %477 = load i64, i64* %476
  %478 = add i64 %461, 32
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479
  %481 = add i64 %461, 40
  %482 = inttoptr i64 %481 to i64*
  %483 = load i64, i64* %482
  %484 = add i64 %461, 48
  %485 = inttoptr i64 %484 to i64*
  %486 = load i64, i64* %485
  %487 = add i64 %461, 56
  %488 = inttoptr i64 %487 to i64*
  %489 = load i64, i64* %488
  %490 = add i64 %461, 64
  %491 = inttoptr i64 %490 to i64*
  %492 = load i64, i64* %491
  %493 = add i64 %461, 72
  %494 = inttoptr i64 %493 to i64*
  %495 = load i64, i64* %494
  %496 = inttoptr i64 %462 to i64*
  %497 = load i64, i64* %496
  store i64 %497, i64* %4, align 8, !alias.scope !3589, !noalias !3592
  store i64 %461, i64* %17, align 8, !alias.scope !3589, !noalias !3592
  %498 = tail call i64 @fprintf(i64 %450, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3321), i64 4294967295) to i32) to i64), i64 %464, i64 %465, i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3321), i64 4294967295), i64 %466, i64 %468, i64 %471, i64 %474, i64 %477, i64 %480, i64 %483, i64 %486, i64 %489, i64 %492, i64 %495), !noalias !3589
  %499 = load i64, i64* %4, align 8
  %500 = load i64, i64* @stdout
  %501 = load i64, i64* %18, align 8
  %502 = add i64 %501, -56
  %503 = inttoptr i64 %502 to i64*
  %504 = load i64, i64* %503
  %505 = add i64 %504, 1040
  %506 = inttoptr i64 %505 to i32*
  %507 = load i32, i32* %506
  %508 = zext i32 %507 to i64
  %509 = add i64 %501, -169
  %510 = inttoptr i64 %509 to i8*
  %511 = load i8, i8* %510
  store i8 %511, i8* %9, align 1, !tbaa !1428
  %512 = add i64 %501, -184
  %513 = trunc i64 %498 to i32
  %514 = inttoptr i64 %512 to i32*
  store i32 %513, i32* %514
  %515 = add i64 %499, 47
  %516 = load i64, i64* %17, align 8, !tbaa !1240
  %517 = add i64 %516, -8
  %518 = inttoptr i64 %517 to i64*
  store i64 %515, i64* %518
  %519 = load i64, i64* %413, align 8, !alias.scope !3594, !noalias !3597
  %520 = inttoptr i64 %516 to i64*
  %521 = load i64, i64* %520
  %522 = add i64 %516, 8
  %523 = inttoptr i64 %522 to i64*
  %524 = load i64, i64* %523
  %525 = add i64 %516, 16
  %526 = inttoptr i64 %525 to i64*
  %527 = load i64, i64* %526
  %528 = add i64 %516, 24
  %529 = inttoptr i64 %528 to i64*
  %530 = load i64, i64* %529
  %531 = add i64 %516, 32
  %532 = inttoptr i64 %531 to i64*
  %533 = load i64, i64* %532
  %534 = add i64 %516, 40
  %535 = inttoptr i64 %534 to i64*
  %536 = load i64, i64* %535
  %537 = add i64 %516, 48
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = add i64 %516, 56
  %541 = inttoptr i64 %540 to i64*
  %542 = load i64, i64* %541
  %543 = add i64 %516, 64
  %544 = inttoptr i64 %543 to i64*
  %545 = load i64, i64* %544
  %546 = add i64 %516, 72
  %547 = inttoptr i64 %546 to i64*
  %548 = load i64, i64* %547
  %549 = inttoptr i64 %517 to i64*
  %550 = load i64, i64* %549
  store i64 %550, i64* %4, align 8, !alias.scope !3594, !noalias !3597
  store i64 %516, i64* %17, align 8, !alias.scope !3594, !noalias !3597
  %551 = tail call i64 @fprintf(i64 %500, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3349), i64 4294967295) to i32) to i64), i64 %508, i64 %504, i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3349), i64 4294967295), i64 %519, i64 %521, i64 %524, i64 %527, i64 %530, i64 %533, i64 %536, i64 %539, i64 %542, i64 %545, i64 %548), !noalias !3594
  %552 = load i64, i64* %4, align 8
  %553 = load i64, i64* @stdout
  %554 = load i64, i64* %18, align 8
  %555 = add i64 %554, -88
  %556 = inttoptr i64 %555 to i64*
  %557 = load i64, i64* %556
  %558 = add i64 %557, 16
  %559 = inttoptr i64 %558 to i32*
  %560 = load i32, i32* %559
  %561 = zext i32 %560 to i64
  %562 = add i64 %554, -169
  %563 = inttoptr i64 %562 to i8*
  %564 = load i8, i8* %563
  store i8 %564, i8* %9, align 1, !tbaa !1428
  %565 = add i64 %554, -188
  %566 = trunc i64 %551 to i32
  %567 = inttoptr i64 %565 to i32*
  store i32 %566, i32* %567
  %568 = add i64 %552, 44
  %569 = load i64, i64* %17, align 8, !tbaa !1240
  %570 = add i64 %569, -8
  %571 = inttoptr i64 %570 to i64*
  store i64 %568, i64* %571
  %572 = load i64, i64* %413, align 8, !alias.scope !3599, !noalias !3602
  %573 = inttoptr i64 %569 to i64*
  %574 = load i64, i64* %573
  %575 = add i64 %569, 8
  %576 = inttoptr i64 %575 to i64*
  %577 = load i64, i64* %576
  %578 = add i64 %569, 16
  %579 = inttoptr i64 %578 to i64*
  %580 = load i64, i64* %579
  %581 = add i64 %569, 24
  %582 = inttoptr i64 %581 to i64*
  %583 = load i64, i64* %582
  %584 = add i64 %569, 32
  %585 = inttoptr i64 %584 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %569, 40
  %588 = inttoptr i64 %587 to i64*
  %589 = load i64, i64* %588
  %590 = add i64 %569, 48
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  %593 = add i64 %569, 56
  %594 = inttoptr i64 %593 to i64*
  %595 = load i64, i64* %594
  %596 = add i64 %569, 64
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  %599 = add i64 %569, 72
  %600 = inttoptr i64 %599 to i64*
  %601 = load i64, i64* %600
  %602 = inttoptr i64 %570 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %4, align 8, !alias.scope !3599, !noalias !3602
  store i64 %569, i64* %17, align 8, !alias.scope !3599, !noalias !3602
  %604 = tail call i64 @fprintf(i64 %553, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3383), i64 4294967295) to i32) to i64), i64 %561, i64 %557, i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3383), i64 4294967295), i64 %572, i64 %574, i64 %577, i64 %580, i64 %583, i64 %586, i64 %589, i64 %592, i64 %595, i64 %598, i64 %601), !noalias !3599
  %605 = load i64, i64* %4, align 8
  %606 = load i64, i64* @stdout
  %607 = load i64, i64* %18, align 8
  %608 = add i64 %607, -56
  %609 = inttoptr i64 %608 to i64*
  %610 = load i64, i64* %609
  %611 = add i64 %610, 1048
  %612 = inttoptr i64 %611 to i32*
  %613 = load i32, i32* %612
  %614 = zext i32 %613 to i64
  store i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3417), i64 4294967295), i64* %19, align 8, !tbaa !1240
  %615 = add i64 %607, -169
  %616 = inttoptr i64 %615 to i8*
  %617 = load i8, i8* %616
  store i8 %617, i8* %9, align 1, !tbaa !1428
  %618 = add i64 %607, -192
  %619 = trunc i64 %604 to i32
  %620 = inttoptr i64 %618 to i32*
  store i32 %619, i32* %620
  %621 = add i64 %605, 47
  %622 = load i64, i64* %17, align 8, !tbaa !1240
  %623 = add i64 %622, -8
  %624 = inttoptr i64 %623 to i64*
  store i64 %621, i64* %624
  %625 = load i64, i64* %413, align 8, !alias.scope !3604, !noalias !3607
  %626 = inttoptr i64 %622 to i64*
  %627 = load i64, i64* %626
  %628 = add i64 %622, 8
  %629 = inttoptr i64 %628 to i64*
  %630 = load i64, i64* %629
  %631 = add i64 %622, 16
  %632 = inttoptr i64 %631 to i64*
  %633 = load i64, i64* %632
  %634 = add i64 %622, 24
  %635 = inttoptr i64 %634 to i64*
  %636 = load i64, i64* %635
  %637 = add i64 %622, 32
  %638 = inttoptr i64 %637 to i64*
  %639 = load i64, i64* %638
  %640 = add i64 %622, 40
  %641 = inttoptr i64 %640 to i64*
  %642 = load i64, i64* %641
  %643 = add i64 %622, 48
  %644 = inttoptr i64 %643 to i64*
  %645 = load i64, i64* %644
  %646 = add i64 %622, 56
  %647 = inttoptr i64 %646 to i64*
  %648 = load i64, i64* %647
  %649 = add i64 %622, 64
  %650 = inttoptr i64 %649 to i64*
  %651 = load i64, i64* %650
  %652 = add i64 %622, 72
  %653 = inttoptr i64 %652 to i64*
  %654 = load i64, i64* %653
  %655 = inttoptr i64 %623 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %4, align 8, !alias.scope !3604, !noalias !3607
  store i64 %622, i64* %17, align 8, !alias.scope !3604, !noalias !3607
  %657 = tail call i64 @fprintf(i64 %606, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3417), i64 4294967295) to i32) to i64), i64 %614, i64 %610, i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3417), i64 4294967295), i64 %625, i64 %627, i64 %630, i64 %633, i64 %636, i64 %639, i64 %642, i64 %645, i64 %648, i64 %651, i64 %654), !noalias !3604
  %658 = load i64, i64* %4, align 8
  %659 = load i64, i64* @stdout
  %660 = load i64, i64* %18, align 8
  %661 = add i64 %660, -88
  %662 = inttoptr i64 %661 to i64*
  %663 = load i64, i64* %662
  %664 = add i64 %663, 4
  %665 = inttoptr i64 %664 to i32*
  %666 = load i32, i32* %665
  %667 = zext i32 %666 to i64
  %668 = uitofp i32 %666 to double
  store double %668, double* %69, align 1, !tbaa !1439
  %669 = add i64 %660, -177
  %670 = inttoptr i64 %669 to i8*
  %671 = load i8, i8* %670
  store i8 %671, i8* %9, align 1, !tbaa !1428
  %672 = add i64 %660, -196
  %673 = trunc i64 %657 to i32
  %674 = inttoptr i64 %672 to i32*
  store i32 %673, i32* %674
  %675 = add i64 %658, 49
  %676 = load i64, i64* %17, align 8, !tbaa !1240
  %677 = add i64 %676, -8
  %678 = inttoptr i64 %677 to i64*
  store i64 %675, i64* %678
  %679 = load i64, i64* %412, align 8, !alias.scope !3609, !noalias !3612
  %680 = load i64, i64* %413, align 8, !alias.scope !3609, !noalias !3612
  %681 = inttoptr i64 %676 to i64*
  %682 = load i64, i64* %681
  %683 = add i64 %676, 8
  %684 = inttoptr i64 %683 to i64*
  %685 = load i64, i64* %684
  %686 = add i64 %676, 16
  %687 = inttoptr i64 %686 to i64*
  %688 = load i64, i64* %687
  %689 = add i64 %676, 24
  %690 = inttoptr i64 %689 to i64*
  %691 = load i64, i64* %690
  %692 = add i64 %676, 32
  %693 = inttoptr i64 %692 to i64*
  %694 = load i64, i64* %693
  %695 = add i64 %676, 40
  %696 = inttoptr i64 %695 to i64*
  %697 = load i64, i64* %696
  %698 = add i64 %676, 48
  %699 = inttoptr i64 %698 to i64*
  %700 = load i64, i64* %699
  %701 = add i64 %676, 56
  %702 = inttoptr i64 %701 to i64*
  %703 = load i64, i64* %702
  %704 = add i64 %676, 64
  %705 = inttoptr i64 %704 to i64*
  %706 = load i64, i64* %705
  %707 = add i64 %676, 72
  %708 = inttoptr i64 %707 to i64*
  %709 = load i64, i64* %708
  %710 = inttoptr i64 %677 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %4, align 8, !alias.scope !3609, !noalias !3612
  store i64 %676, i64* %17, align 8, !alias.scope !3609, !noalias !3612
  %712 = tail call i64 @fprintf(i64 %659, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3451), i64 4294967295) to i32) to i64), i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3451), i64 4294967295), i64 %667, i64 %679, i64 %680, i64 %682, i64 %685, i64 %688, i64 %691, i64 %694, i64 %697, i64 %700, i64 %703, i64 %706, i64 %709), !noalias !3609
  %713 = load i64, i64* %4, align 8
  %714 = load i64, i64* @stdout
  %715 = load i64, i64* %18, align 8
  %716 = add i64 %715, -88
  %717 = inttoptr i64 %716 to i64*
  %718 = load i64, i64* %717
  %719 = add i64 %718, 4
  %720 = inttoptr i64 %719 to i32*
  %721 = load i32, i32* %720
  %722 = zext i32 %721 to i64
  %723 = uitofp i32 %721 to double
  %724 = bitcast %union.VectorReg* %27 to i8*
  %725 = add i64 %715, -72
  %726 = inttoptr i64 %725 to double*
  %727 = load double, double* %726
  %728 = bitcast %union.VectorReg* %27 to double*
  store double %727, double* %728, align 1, !tbaa !1439
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %730 = bitcast i64* %729 to double*
  store double 0.000000e+00, double* %730, align 1, !tbaa !1439
  %731 = fdiv double %723, %727
  store double %731, double* %69, align 1, !tbaa !1439
  store i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3479), i64 4294967295), i64* %14, align 8, !tbaa !1240
  %732 = add i64 %715, -177
  %733 = inttoptr i64 %732 to i8*
  %734 = load i8, i8* %733
  store i8 %734, i8* %9, align 1, !tbaa !1428
  %735 = add i64 %715, -200
  %736 = trunc i64 %712 to i32
  %737 = inttoptr i64 %735 to i32*
  store i32 %736, i32* %737
  %738 = add i64 %713, 58
  %739 = load i64, i64* %17, align 8, !tbaa !1240
  %740 = add i64 %739, -8
  %741 = inttoptr i64 %740 to i64*
  store i64 %738, i64* %741
  %742 = load i64, i64* %412, align 8, !alias.scope !3614, !noalias !3617
  %743 = load i64, i64* %413, align 8, !alias.scope !3614, !noalias !3617
  %744 = inttoptr i64 %739 to i64*
  %745 = load i64, i64* %744
  %746 = add i64 %739, 8
  %747 = inttoptr i64 %746 to i64*
  %748 = load i64, i64* %747
  %749 = add i64 %739, 16
  %750 = inttoptr i64 %749 to i64*
  %751 = load i64, i64* %750
  %752 = add i64 %739, 24
  %753 = inttoptr i64 %752 to i64*
  %754 = load i64, i64* %753
  %755 = add i64 %739, 32
  %756 = inttoptr i64 %755 to i64*
  %757 = load i64, i64* %756
  %758 = add i64 %739, 40
  %759 = inttoptr i64 %758 to i64*
  %760 = load i64, i64* %759
  %761 = add i64 %739, 48
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  %764 = add i64 %739, 56
  %765 = inttoptr i64 %764 to i64*
  %766 = load i64, i64* %765
  %767 = add i64 %739, 64
  %768 = inttoptr i64 %767 to i64*
  %769 = load i64, i64* %768
  %770 = add i64 %739, 72
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  %773 = inttoptr i64 %740 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %4, align 8, !alias.scope !3614, !noalias !3617
  store i64 %739, i64* %17, align 8, !alias.scope !3614, !noalias !3617
  %775 = tail call i64 @fprintf(i64 %714, i64 zext (i32 trunc (i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3479), i64 4294967295) to i32) to i64), i64 and (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3479), i64 4294967295), i64 %722, i64 %742, i64 %743, i64 %745, i64 %748, i64 %751, i64 %754, i64 %757, i64 %760, i64 %763, i64 %766, i64 %769, i64 %772), !noalias !3614
  store i64 %775, i64* %75, align 8, !alias.scope !3614, !noalias !3617
  %776 = load i64, i64* %4, align 8
  %777 = load i64, i64* @stdout
  store i64 %777, i64* %16, align 8, !tbaa !1240
  %778 = load i64, i64* %18, align 8
  %779 = add i64 %778, -88
  %780 = inttoptr i64 %779 to i64*
  %781 = load i64, i64* %780
  store i64 %781, i64* %13, align 8, !tbaa !1240
  %782 = add i64 %781, 24
  %783 = inttoptr i64 %782 to i64*
  %784 = load i64, i64* %783
  %785 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2480) to float*)
  %786 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2484) to float*)
  %787 = bitcast %union.VectorReg* %27 to float*
  store float %785, float* %787, align 1, !tbaa !2106
  %788 = getelementptr inbounds i8, i8* %724, i64 4
  %789 = bitcast i8* %788 to float*
  store float %786, float* %789, align 1, !tbaa !2106
  %790 = getelementptr inbounds i8, i8* %724, i64 12
  %791 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %27, i64 0, i32 0, i32 0, i32 0, i64 0
  %792 = load i64, i64* %791, align 1
  %793 = trunc i64 %784 to i32
  %794 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %794)
  store <2 x i64> zeroinitializer, <2 x i64>* %3, align 16
  %795 = bitcast <2 x i64>* %3 to i32*
  store i32 %793, i32* %795, align 16
  %796 = getelementptr inbounds <2 x i64>, <2 x i64>* %3, i64 0, i64 0
  %797 = load i64, i64* %796, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %794)
  %798 = shl i64 %792, 32
  %799 = and i64 %797, 4294967295
  %800 = or i64 %799, %798
  %801 = lshr i64 %784, 32
  %802 = trunc i64 %801 to i32
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %794)
  store i64 %800, i64* %796, align 16
  %803 = getelementptr inbounds <2 x i64>, <2 x i64>* %3, i64 0, i64 1
  store i64 0, i64* %803, align 8
  %804 = bitcast i64* %803 to i32*
  store i32 %802, i32* %804, align 8
  %805 = load i64, i64* %803, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %794)
  %806 = trunc i64 %797 to i32
  %807 = trunc i64 %792 to i32
  store i32 %806, i32* %57, align 1, !tbaa !3573
  store i32 %807, i32* %59, align 1, !tbaa !3573
  %808 = trunc i64 %805 to i32
  store i32 %808, i32* %60, align 1, !tbaa !3573
  %809 = lshr i64 %792, 32
  %810 = trunc i64 %809 to i32
  store i32 %810, i32* %62, align 1, !tbaa !3573
  %811 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2496) to double*)
  %812 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2504) to double*)
  store double %811, double* %728, align 1, !tbaa !1439
  store double %812, double* %730, align 1, !tbaa !1439
  %813 = bitcast [32 x %union.VectorReg]* %26 to <2 x double>*
  %814 = load <2 x double>, <2 x double>* %813, align 1
  %815 = bitcast %union.VectorReg* %27 to <2 x double>*
  %816 = load <2 x double>, <2 x double>* %815, align 1
  %817 = fsub <2 x double> %814, %816
  %818 = bitcast <2 x double> %817 to <4 x i32>
  %819 = extractelement <4 x i32> %818, i32 2
  %820 = extractelement <4 x i32> %818, i32 3
  %821 = extractelement <4 x i32> %818, i32 0
  %822 = extractelement <4 x i32> %818, i32 1
  %823 = bitcast %union.VectorReg* %27 to i32*
  store i32 %819, i32* %823, align 1, !tbaa !3573
  %824 = bitcast i8* %788 to i32*
  store i32 %820, i32* %824, align 1, !tbaa !3573
  %825 = bitcast i64* %729 to i32*
  store i32 %821, i32* %825, align 1, !tbaa !3573
  %826 = bitcast i8* %790 to i32*
  store i32 %822, i32* %826, align 1, !tbaa !3573
  %827 = load <2 x double>, <2 x double>* %815, align 1
  %828 = fadd <2 x double> %827, %817
  store <2 x double> %828, <2 x double>* %815, align 1, !tbaa !1439
  %829 = add i64 %778, -168
  %830 = inttoptr i64 %829 to i64*
  %831 = load i64, i64* %830
  %832 = bitcast <2 x double> %828 to <2 x i64>
  %833 = extractelement <2 x i64> %832, i32 0
  %834 = bitcast i64 %833 to <2 x i32>
  %835 = bitcast <2 x double> %828 to <2 x i64>
  %836 = extractelement <2 x i64> %835, i32 1
  %837 = bitcast i64 %836 to <2 x i32>
  %838 = extractelement <2 x i32> %834, i32 0
  store i32 %838, i32* %57, align 1, !tbaa !2106
  %839 = extractelement <2 x i32> %834, i32 1
  store i32 %839, i32* %59, align 1, !tbaa !2106
  %840 = extractelement <2 x i32> %837, i32 0
  store i32 %840, i32* %60, align 1, !tbaa !2106
  %841 = extractelement <2 x i32> %837, i32 1
  store i32 %841, i32* %62, align 1, !tbaa !2106
  %842 = load i64, i64* %18, align 8
  %843 = add i64 %842, -204
  %844 = load i32, i32* %10, align 4
  %845 = inttoptr i64 %843 to i32*
  store i32 %844, i32* %845
  %846 = add i64 %776, 71
  %847 = load i64, i64* %17, align 8, !tbaa !1240
  %848 = add i64 %847, -8
  %849 = inttoptr i64 %848 to i64*
  store i64 %846, i64* %849
  %850 = load i64, i64* %76, align 8, !alias.scope !3619, !noalias !3622
  %851 = load i64, i64* %411, align 8, !alias.scope !3619, !noalias !3622
  %852 = load i64, i64* %410, align 8, !alias.scope !3619, !noalias !3622
  %853 = load i64, i64* %412, align 8, !alias.scope !3619, !noalias !3622
  %854 = load i64, i64* %413, align 8, !alias.scope !3619, !noalias !3622
  %855 = inttoptr i64 %847 to i64*
  %856 = load i64, i64* %855
  %857 = add i64 %847, 8
  %858 = inttoptr i64 %857 to i64*
  %859 = load i64, i64* %858
  %860 = add i64 %847, 16
  %861 = inttoptr i64 %860 to i64*
  %862 = load i64, i64* %861
  %863 = add i64 %847, 24
  %864 = inttoptr i64 %863 to i64*
  %865 = load i64, i64* %864
  %866 = add i64 %847, 32
  %867 = inttoptr i64 %866 to i64*
  %868 = load i64, i64* %867
  %869 = add i64 %847, 40
  %870 = inttoptr i64 %869 to i64*
  %871 = load i64, i64* %870
  %872 = add i64 %847, 48
  %873 = inttoptr i64 %872 to i64*
  %874 = load i64, i64* %873
  %875 = add i64 %847, 56
  %876 = inttoptr i64 %875 to i64*
  %877 = load i64, i64* %876
  %878 = add i64 %847, 64
  %879 = inttoptr i64 %878 to i64*
  %880 = load i64, i64* %879
  %881 = add i64 %847, 72
  %882 = inttoptr i64 %881 to i64*
  %883 = load i64, i64* %882
  %884 = inttoptr i64 %848 to i64*
  %885 = load i64, i64* %884
  store i64 %885, i64* %4, align 8, !alias.scope !3619, !noalias !3622
  store i64 %847, i64* %17, align 8, !alias.scope !3619, !noalias !3622
  %886 = tail call i64 @fprintf(i64 %850, i64 %831, i64 %851, i64 %852, i64 %853, i64 %854, i64 %856, i64 %859, i64 %862, i64 %865, i64 %868, i64 %871, i64 %874, i64 %877, i64 %880, i64 %883), !noalias !3619
  %887 = load i64, i64* %18, align 8
  %888 = add i64 %887, -88
  %889 = load i64, i64* %4, align 8
  %890 = inttoptr i64 %888 to i64*
  %891 = load i64, i64* %890
  %892 = inttoptr i64 %891 to i32*
  %893 = load i32, i32* %892
  %894 = icmp eq i32 %893, 0
  %895 = add i64 %887, -208
  %896 = trunc i64 %886 to i32
  %897 = inttoptr i64 %895 to i32*
  store i32 %896, i32* %897
  %898 = select i1 %894, i64 50, i64 19
  %899 = add i64 %889, %898
  br i1 %894, label %block_403f9c, label %block_403f7d

block_403d0f:                                     ; preds = %block_403c7d, %block_403cb9
  %900 = phi i64 [ %970, %block_403c7d ], [ %183, %block_403cb9 ]
  %901 = phi i64 [ %943, %block_403c7d ], [ %185, %block_403cb9 ]
  %902 = phi %struct.Memory* [ %942, %block_403c7d ], [ %942, %block_403cb9 ]
  %903 = add i64 %901, -96
  %904 = inttoptr i64 %903 to i64*
  %905 = load i64, i64* %904
  store i64 %905, i64* %16, align 8, !tbaa !1240
  %906 = add i64 %900, 14289
  %907 = add i64 %900, 9
  %908 = load i64, i64* %17, align 8, !tbaa !1240
  %909 = add i64 %908, -8
  %910 = inttoptr i64 %909 to i64*
  store i64 %907, i64* %910
  store i64 %909, i64* %17, align 8, !tbaa !1240
  %911 = tail call %struct.Memory* @sub_4074e0_CloseAdcView(%struct.State* nonnull %0, i64 %906, %struct.Memory* %902)
  %912 = load i32, i32* %10, align 4
  %913 = load i64, i64* %4, align 8
  %914 = icmp eq i32 %912, 0
  %915 = select i1 %914, i64 85, i64 9
  %916 = add i64 %913, %915
  br i1 %914, label %block_403d0f.block_403d6d_crit_edge, label %block_403d21

block_403d0f.block_403d6d_crit_edge:              ; preds = %block_403d0f
  %917 = load i64, i64* %18, align 8
  br label %block_403d6d

block_403c7d:                                     ; preds = %block_403c3f, %block_403c1d.block_403c7d_crit_edge
  %918 = phi i64 [ %1052, %block_403c1d.block_403c7d_crit_edge ], [ %1236, %block_403c3f ]
  %919 = phi i64 [ %1053, %block_403c1d.block_403c7d_crit_edge ], [ %1232, %block_403c3f ]
  %920 = phi %struct.Memory* [ %1047, %block_403c1d.block_403c7d_crit_edge ], [ %1047, %block_403c3f ]
  %921 = add i64 %919, -60
  %922 = inttoptr i64 %921 to i32*
  %923 = load i32, i32* %922
  %924 = zext i32 %923 to i64
  store i64 %924, i64* %16, align 8, !tbaa !1240
  %925 = add i64 %918, -1709
  %926 = add i64 %918, 8
  %927 = load i64, i64* %17, align 8, !tbaa !1240
  %928 = add i64 %927, -8
  %929 = inttoptr i64 %928 to i64*
  store i64 %926, i64* %929
  store i64 %928, i64* %17, align 8, !tbaa !1240
  %930 = tail call %struct.Memory* @sub_4035d0_timer_stop(%struct.State* nonnull %0, i64 %925, %struct.Memory* %920)
  %931 = load i64, i64* %18, align 8
  %932 = add i64 %931, -60
  %933 = load i64, i64* %4, align 8
  %934 = inttoptr i64 %932 to i32*
  %935 = load i32, i32* %934
  %936 = zext i32 %935 to i64
  store i64 %936, i64* %16, align 8, !tbaa !1240
  %937 = add i64 %933, -1637
  %938 = add i64 %933, 8
  %939 = load i64, i64* %17, align 8, !tbaa !1240
  %940 = add i64 %939, -8
  %941 = inttoptr i64 %940 to i64*
  store i64 %938, i64* %941
  store i64 %940, i64* %17, align 8, !tbaa !1240
  %942 = tail call %struct.Memory* @sub_403620_timer_read(%struct.State* nonnull %0, i64 %937, %struct.Memory* %930)
  %943 = load i64, i64* %18, align 8
  %944 = add i64 %943, -88
  %945 = load i64, i64* %4, align 8
  %946 = inttoptr i64 %944 to i64*
  %947 = load i64, i64* %946
  %948 = add i64 %947, 32
  %949 = load double, double* %69, align 1
  %950 = inttoptr i64 %948 to double*
  store double %949, double* %950
  %951 = add i64 %943, -96
  %952 = inttoptr i64 %951 to i64*
  %953 = load i64, i64* %952
  %954 = add i64 %953, 516
  %955 = inttoptr i64 %954 to i32*
  %956 = load i32, i32* %955
  %957 = inttoptr i64 %944 to i64*
  %958 = load i64, i64* %957
  %959 = inttoptr i64 %958 to i32*
  %960 = load i32, i32* %959
  %961 = add i32 %960, %956
  %962 = inttoptr i64 %958 to i32*
  store i32 %961, i32* %962
  %963 = inttoptr i64 %951 to i64*
  %964 = load i64, i64* %963
  %965 = add i64 %964, 516
  %966 = inttoptr i64 %965 to i32*
  %967 = load i32, i32* %966
  %968 = icmp eq i32 %967, 0
  %969 = select i1 %968, i64 44, i64 130
  %970 = add i64 %945, %969
  br i1 %968, label %block_403cb9, label %block_403d0f

block_403d6d:                                     ; preds = %block_403d21, %block_403d0f.block_403d6d_crit_edge
  %971 = phi i64 [ %916, %block_403d0f.block_403d6d_crit_edge ], [ %1403, %block_403d21 ]
  %972 = phi i64 [ %917, %block_403d0f.block_403d6d_crit_edge ], [ %1394, %block_403d21 ]
  %973 = phi %struct.Memory* [ %911, %block_403d0f.block_403d6d_crit_edge ], [ %911, %block_403d21 ]
  %974 = add i64 %972, -88
  %975 = inttoptr i64 %974 to i64*
  %976 = load i64, i64* %975
  %977 = add i64 %976, 32
  %978 = inttoptr i64 %977 to double*
  %979 = load double, double* %978
  store double %979, double* %69, align 1, !tbaa !1439
  %980 = bitcast i64* %56 to double*
  store double 0.000000e+00, double* %980, align 1, !tbaa !1439
  %981 = add i64 %972, -72
  %982 = inttoptr i64 %981 to double*
  store double %979, double* %982
  %983 = inttoptr i64 %974 to i64*
  %984 = load i64, i64* %983
  %985 = add i64 %984, 24
  %986 = inttoptr i64 %985 to i64*
  %987 = load i64, i64* %986
  store i64 %987, i64* %16, align 8, !tbaa !1240
  %988 = add i64 %972, -56
  %989 = inttoptr i64 %988 to i64*
  %990 = load i64, i64* %989
  store i64 %990, i64* %15, align 8, !tbaa !1240
  %991 = add i64 %971, 899
  %992 = add i64 %971, 31
  %993 = load i64, i64* %17, align 8, !tbaa !1240
  %994 = add i64 %993, -8
  %995 = inttoptr i64 %994 to i64*
  store i64 %992, i64* %995
  store i64 %994, i64* %17, align 8, !tbaa !1240
  %996 = tail call %struct.Memory* @sub_4040f0_Verify(%struct.State* nonnull %0, i64 %991, %struct.Memory* %973)
  %997 = load i64, i64* %18, align 8
  %998 = add i64 %997, -88
  %999 = load i64, i64* %4, align 8
  %1000 = inttoptr i64 %998 to i64*
  %1001 = load i64, i64* %1000
  %1002 = load i32, i32* %10, align 4
  %1003 = inttoptr i64 %1001 to i32*
  store i32 %1002, i32* %1003
  %1004 = inttoptr i64 %998 to i64*
  %1005 = load i64, i64* %1004
  %1006 = inttoptr i64 %1005 to i32*
  %1007 = load i32, i32* %1006
  %1008 = add i32 %1007, 1
  %1009 = icmp eq i32 %1008, 0
  %1010 = select i1 %1009, i64 19, i64 35
  %1011 = add i64 %999, %1010
  br i1 %1009, label %block_403d9f, label %block_403daf

block_403c1d:                                     ; preds = %block_403bd1.block_403c1d_crit_edge, %block_403be8
  %1012 = phi i64 [ %1327, %block_403bd1.block_403c1d_crit_edge ], [ %1301, %block_403be8 ]
  %1013 = phi i64 [ %1328, %block_403bd1.block_403c1d_crit_edge ], [ %1297, %block_403be8 ]
  %1014 = phi %struct.Memory* [ %1314, %block_403bd1.block_403c1d_crit_edge ], [ %1314, %block_403be8 ]
  %1015 = add i64 %1013, -60
  %1016 = inttoptr i64 %1015 to i32*
  %1017 = load i32, i32* %1016
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %16, align 8, !tbaa !1240
  %1019 = add i64 %1012, -1725
  %1020 = add i64 %1012, 8
  %1021 = load i64, i64* %17, align 8, !tbaa !1240
  %1022 = add i64 %1021, -8
  %1023 = inttoptr i64 %1022 to i64*
  store i64 %1020, i64* %1023
  store i64 %1022, i64* %17, align 8, !tbaa !1240
  %1024 = tail call %struct.Memory* @sub_403560_timer_clear(%struct.State* nonnull %0, i64 %1019, %struct.Memory* %1014)
  %1025 = load i64, i64* %18, align 8
  %1026 = add i64 %1025, -60
  %1027 = load i64, i64* %4, align 8
  %1028 = inttoptr i64 %1026 to i32*
  %1029 = load i32, i32* %1028
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %16, align 8, !tbaa !1240
  %1031 = add i64 %1027, -1701
  %1032 = add i64 %1027, 8
  %1033 = load i64, i64* %17, align 8, !tbaa !1240
  %1034 = add i64 %1033, -8
  %1035 = inttoptr i64 %1034 to i64*
  store i64 %1032, i64* %1035
  store i64 %1034, i64* %17, align 8, !tbaa !1240
  %1036 = tail call %struct.Memory* @sub_403580_timer_start(%struct.State* nonnull %0, i64 %1031, %struct.Memory* %1024)
  %1037 = load i64, i64* %18, align 8
  %1038 = add i64 %1037, -96
  %1039 = load i64, i64* %4, align 8
  %1040 = inttoptr i64 %1038 to i64*
  %1041 = load i64, i64* %1040
  store i64 %1041, i64* %16, align 8, !tbaa !1240
  %1042 = add i64 %1039, 16787
  %1043 = add i64 %1039, 9
  %1044 = load i64, i64* %17, align 8, !tbaa !1240
  %1045 = add i64 %1044, -8
  %1046 = inttoptr i64 %1045 to i64*
  store i64 %1043, i64* %1046
  store i64 %1045, i64* %17, align 8, !tbaa !1240
  %1047 = tail call %struct.Memory* @sub_407dc0_ComputeGivenGroupbys(%struct.State* nonnull %0, i64 %1042, %struct.Memory* %1036)
  %1048 = load i32, i32* %10, align 4
  %1049 = load i64, i64* %4, align 8
  %1050 = icmp eq i32 %1048, 0
  %1051 = select i1 %1050, i64 71, i64 9
  %1052 = add i64 %1049, %1051
  br i1 %1050, label %block_403c1d.block_403c7d_crit_edge, label %block_403c3f

block_403c1d.block_403c7d_crit_edge:              ; preds = %block_403c1d
  %1053 = load i64, i64* %18, align 8
  br label %block_403c7d

block_403bab:                                     ; preds = %block_403b9a
  %1054 = load i64, i64* @stderr
  %1055 = zext i32 %1331 to i64
  store i64 %1055, i64* %14, align 8, !tbaa !1240
  %1056 = add i64 %1334, 35
  %1057 = load i64, i64* %17, align 8, !tbaa !1240
  %1058 = add i64 %1057, -8
  %1059 = inttoptr i64 %1058 to i64*
  store i64 %1056, i64* %1059
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1063 = load i64, i64* %1060, align 8, !alias.scope !3624, !noalias !3627
  %1064 = load i64, i64* %1061, align 8, !alias.scope !3624, !noalias !3627
  %1065 = load i64, i64* %1062, align 8, !alias.scope !3624, !noalias !3627
  %1066 = inttoptr i64 %1057 to i64*
  %1067 = load i64, i64* %1066
  %1068 = add i64 %1057, 8
  %1069 = inttoptr i64 %1068 to i64*
  %1070 = load i64, i64* %1069
  %1071 = add i64 %1057, 16
  %1072 = inttoptr i64 %1071 to i64*
  %1073 = load i64, i64* %1072
  %1074 = add i64 %1057, 24
  %1075 = inttoptr i64 %1074 to i64*
  %1076 = load i64, i64* %1075
  %1077 = add i64 %1057, 32
  %1078 = inttoptr i64 %1077 to i64*
  %1079 = load i64, i64* %1078
  %1080 = add i64 %1057, 40
  %1081 = inttoptr i64 %1080 to i64*
  %1082 = load i64, i64* %1081
  %1083 = add i64 %1057, 48
  %1084 = inttoptr i64 %1083 to i64*
  %1085 = load i64, i64* %1084
  %1086 = add i64 %1057, 56
  %1087 = inttoptr i64 %1086 to i64*
  %1088 = load i64, i64* %1087
  %1089 = add i64 %1057, 64
  %1090 = inttoptr i64 %1089 to i64*
  %1091 = load i64, i64* %1090
  %1092 = add i64 %1057, 72
  %1093 = inttoptr i64 %1092 to i64*
  %1094 = load i64, i64* %1093
  %1095 = inttoptr i64 %1058 to i64*
  %1096 = load i64, i64* %1095
  store i64 %1096, i64* %4, align 8, !alias.scope !3624, !noalias !3627
  store i64 %1057, i64* %17, align 8, !alias.scope !3624, !noalias !3627
  %1097 = tail call i64 @fprintf(i64 %1054, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3170), i64 %1055, i64 %1063, i64 %1064, i64 %1065, i64 %1067, i64 %1070, i64 %1073, i64 %1076, i64 %1079, i64 %1082, i64 %1085, i64 %1088, i64 %1091, i64 %1094), !noalias !3624
  %1098 = load i64, i64* %18, align 8
  %1099 = add i64 %1098, -112
  %1100 = trunc i64 %1097 to i32
  %1101 = load i64, i64* %4, align 8
  %1102 = add i64 %1101, 3
  %1103 = inttoptr i64 %1099 to i32*
  store i32 %1100, i32* %1103
  br label %block_403bd1

block_403daf:                                     ; preds = %block_403d6d
  store i64 %1005, i64* %14, align 8, !tbaa !1240
  %1104 = icmp eq i32 %1007, 0
  %1105 = add i64 %997, -160
  %1106 = zext i1 %1104 to i32
  %1107 = add i64 %1011, 25
  %1108 = inttoptr i64 %1105 to i32*
  store i32 %1106, i32* %1108
  br label %block_403dc8

block_403b59:                                     ; preds = %block_403ac0
  %1109 = load i64, i64* @stderr
  %1110 = add i64 %121, -104
  %1111 = inttoptr i64 %1110 to i64*
  store i64 %1109, i64* %1111
  %1112 = add i64 %130, 17
  %1113 = load i64, i64* %17, align 8, !tbaa !1240
  %1114 = add i64 %1113, -8
  %1115 = inttoptr i64 %1114 to i64*
  store i64 %1112, i64* %1115
  %1116 = inttoptr i64 %1114 to i64*
  %1117 = load i64, i64* %1116
  store i64 %1117, i64* %4, align 8, !alias.scope !3629, !noalias !3632
  store i64 %1113, i64* %17, align 8, !alias.scope !3629, !noalias !3632
  %1118 = tail call i64 @__errno_location()
  %1119 = load i64, i64* %4, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64* %15, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3133), i64* %14, align 8, !tbaa !1240
  %1120 = inttoptr i64 %1118 to i32*
  %1121 = load i32, i32* %1120
  %1122 = zext i32 %1121 to i64
  store i64 %1122, i64* %13, align 8, !tbaa !1240
  %1123 = load i64, i64* %18, align 8
  %1124 = add i64 %1123, -104
  %1125 = inttoptr i64 %1124 to i64*
  %1126 = load i64, i64* %1125
  store i64 %1126, i64* %16, align 8, !tbaa !1240
  %1127 = add i64 %1119, 33
  %1128 = load i64, i64* %17, align 8, !tbaa !1240
  %1129 = add i64 %1128, -8
  %1130 = inttoptr i64 %1129 to i64*
  store i64 %1127, i64* %1130
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1133 = load i64, i64* %1131, align 8, !alias.scope !3634, !noalias !3637
  %1134 = load i64, i64* %1132, align 8, !alias.scope !3634, !noalias !3637
  %1135 = inttoptr i64 %1128 to i64*
  %1136 = load i64, i64* %1135
  %1137 = add i64 %1128, 8
  %1138 = inttoptr i64 %1137 to i64*
  %1139 = load i64, i64* %1138
  %1140 = add i64 %1128, 16
  %1141 = inttoptr i64 %1140 to i64*
  %1142 = load i64, i64* %1141
  %1143 = add i64 %1128, 24
  %1144 = inttoptr i64 %1143 to i64*
  %1145 = load i64, i64* %1144
  %1146 = add i64 %1128, 32
  %1147 = inttoptr i64 %1146 to i64*
  %1148 = load i64, i64* %1147
  %1149 = add i64 %1128, 40
  %1150 = inttoptr i64 %1149 to i64*
  %1151 = load i64, i64* %1150
  %1152 = add i64 %1128, 48
  %1153 = inttoptr i64 %1152 to i64*
  %1154 = load i64, i64* %1153
  %1155 = add i64 %1128, 56
  %1156 = inttoptr i64 %1155 to i64*
  %1157 = load i64, i64* %1156
  %1158 = add i64 %1128, 64
  %1159 = inttoptr i64 %1158 to i64*
  %1160 = load i64, i64* %1159
  %1161 = add i64 %1128, 72
  %1162 = inttoptr i64 %1161 to i64*
  %1163 = load i64, i64* %1162
  %1164 = inttoptr i64 %1129 to i64*
  %1165 = load i64, i64* %1164
  store i64 %1165, i64* %4, align 8, !alias.scope !3634, !noalias !3637
  store i64 %1128, i64* %17, align 8, !alias.scope !3634, !noalias !3637
  %1166 = tail call i64 @fprintf(i64 %1126, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3133), i64 %1122, i64 %1133, i64 %1134, i64 %1136, i64 %1139, i64 %1142, i64 %1145, i64 %1148, i64 %1151, i64 %1154, i64 %1157, i64 %1160, i64 %1163), !noalias !3634
  %1167 = load i64, i64* %18, align 8
  %1168 = add i64 %1167, -44
  %1169 = inttoptr i64 %1168 to i32*
  store i32 2, i32* %1169
  %1170 = add i64 %1167, -108
  %1171 = trunc i64 %1166 to i32
  %1172 = inttoptr i64 %1170 to i32*
  store i32 %1171, i32* %1172
  br label %block_4040d3

block_403c3f:                                     ; preds = %block_403c1d
  %1173 = load i64, i64* @stderr
  %1174 = load i64, i64* %18, align 8
  %1175 = add i64 %1174, -136
  %1176 = inttoptr i64 %1175 to i64*
  store i64 %1173, i64* %1176
  %1177 = add i64 %1052, 20
  %1178 = load i64, i64* %17, align 8, !tbaa !1240
  %1179 = add i64 %1178, -8
  %1180 = inttoptr i64 %1179 to i64*
  store i64 %1177, i64* %1180
  %1181 = inttoptr i64 %1179 to i64*
  %1182 = load i64, i64* %1181
  store i64 %1182, i64* %4, align 8, !alias.scope !3639, !noalias !3642
  store i64 %1178, i64* %17, align 8, !alias.scope !3639, !noalias !3642
  %1183 = tail call i64 @__errno_location()
  %1184 = load i64, i64* %4, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3231), i64* %14, align 8, !tbaa !1240
  %1185 = inttoptr i64 %1183 to i32*
  %1186 = load i32, i32* %1185
  %1187 = zext i32 %1186 to i64
  %1188 = load i64, i64* %18, align 8
  %1189 = add i64 %1188, -136
  %1190 = inttoptr i64 %1189 to i64*
  %1191 = load i64, i64* %1190
  %1192 = add i64 %1184, 36
  %1193 = load i64, i64* %17, align 8, !tbaa !1240
  %1194 = add i64 %1193, -8
  %1195 = inttoptr i64 %1194 to i64*
  store i64 %1192, i64* %1195
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1198 = load i64, i64* %1196, align 8, !alias.scope !3644, !noalias !3647
  %1199 = load i64, i64* %1197, align 8, !alias.scope !3644, !noalias !3647
  %1200 = inttoptr i64 %1193 to i64*
  %1201 = load i64, i64* %1200
  %1202 = add i64 %1193, 8
  %1203 = inttoptr i64 %1202 to i64*
  %1204 = load i64, i64* %1203
  %1205 = add i64 %1193, 16
  %1206 = inttoptr i64 %1205 to i64*
  %1207 = load i64, i64* %1206
  %1208 = add i64 %1193, 24
  %1209 = inttoptr i64 %1208 to i64*
  %1210 = load i64, i64* %1209
  %1211 = add i64 %1193, 32
  %1212 = inttoptr i64 %1211 to i64*
  %1213 = load i64, i64* %1212
  %1214 = add i64 %1193, 40
  %1215 = inttoptr i64 %1214 to i64*
  %1216 = load i64, i64* %1215
  %1217 = add i64 %1193, 48
  %1218 = inttoptr i64 %1217 to i64*
  %1219 = load i64, i64* %1218
  %1220 = add i64 %1193, 56
  %1221 = inttoptr i64 %1220 to i64*
  %1222 = load i64, i64* %1221
  %1223 = add i64 %1193, 64
  %1224 = inttoptr i64 %1223 to i64*
  %1225 = load i64, i64* %1224
  %1226 = add i64 %1193, 72
  %1227 = inttoptr i64 %1226 to i64*
  %1228 = load i64, i64* %1227
  %1229 = inttoptr i64 %1194 to i64*
  %1230 = load i64, i64* %1229
  store i64 %1230, i64* %4, align 8, !alias.scope !3644, !noalias !3647
  store i64 %1193, i64* %17, align 8, !alias.scope !3644, !noalias !3647
  %1231 = tail call i64 @fprintf(i64 %1191, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3231), i64 %1187, i64 %1198, i64 %1199, i64 %1201, i64 %1204, i64 %1207, i64 %1210, i64 %1213, i64 %1216, i64 %1219, i64 %1222, i64 %1225, i64 %1228), !noalias !3644
  %1232 = load i64, i64* %18, align 8
  %1233 = add i64 %1232, -140
  %1234 = trunc i64 %1231 to i32
  %1235 = load i64, i64* %4, align 8
  %1236 = add i64 %1235, 6
  %1237 = inttoptr i64 %1233 to i32*
  store i32 %1234, i32* %1237
  br label %block_403c7d

block_403be8:                                     ; preds = %block_403bd1
  %1238 = load i64, i64* @stderr
  %1239 = load i64, i64* %18, align 8
  %1240 = add i64 %1239, -120
  %1241 = inttoptr i64 %1240 to i64*
  store i64 %1238, i64* %1241
  %1242 = add i64 %1327, 17
  %1243 = load i64, i64* %17, align 8, !tbaa !1240
  %1244 = add i64 %1243, -8
  %1245 = inttoptr i64 %1244 to i64*
  store i64 %1242, i64* %1245
  %1246 = inttoptr i64 %1244 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %4, align 8, !alias.scope !3649, !noalias !3652
  store i64 %1243, i64* %17, align 8, !alias.scope !3649, !noalias !3652
  %1248 = tail call i64 @__errno_location()
  %1249 = load i64, i64* %4, align 8
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64* %15, align 8, !tbaa !1240
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3207), i64* %14, align 8, !tbaa !1240
  %1250 = inttoptr i64 %1248 to i32*
  %1251 = load i32, i32* %1250
  %1252 = zext i32 %1251 to i64
  store i64 %1252, i64* %13, align 8, !tbaa !1240
  %1253 = load i64, i64* %18, align 8
  %1254 = add i64 %1253, -120
  %1255 = inttoptr i64 %1254 to i64*
  %1256 = load i64, i64* %1255
  %1257 = add i64 %1249, 33
  %1258 = load i64, i64* %17, align 8, !tbaa !1240
  %1259 = add i64 %1258, -8
  %1260 = inttoptr i64 %1259 to i64*
  store i64 %1257, i64* %1260
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1263 = load i64, i64* %1261, align 8, !alias.scope !3654, !noalias !3657
  %1264 = load i64, i64* %1262, align 8, !alias.scope !3654, !noalias !3657
  %1265 = inttoptr i64 %1258 to i64*
  %1266 = load i64, i64* %1265
  %1267 = add i64 %1258, 8
  %1268 = inttoptr i64 %1267 to i64*
  %1269 = load i64, i64* %1268
  %1270 = add i64 %1258, 16
  %1271 = inttoptr i64 %1270 to i64*
  %1272 = load i64, i64* %1271
  %1273 = add i64 %1258, 24
  %1274 = inttoptr i64 %1273 to i64*
  %1275 = load i64, i64* %1274
  %1276 = add i64 %1258, 32
  %1277 = inttoptr i64 %1276 to i64*
  %1278 = load i64, i64* %1277
  %1279 = add i64 %1258, 40
  %1280 = inttoptr i64 %1279 to i64*
  %1281 = load i64, i64* %1280
  %1282 = add i64 %1258, 48
  %1283 = inttoptr i64 %1282 to i64*
  %1284 = load i64, i64* %1283
  %1285 = add i64 %1258, 56
  %1286 = inttoptr i64 %1285 to i64*
  %1287 = load i64, i64* %1286
  %1288 = add i64 %1258, 64
  %1289 = inttoptr i64 %1288 to i64*
  %1290 = load i64, i64* %1289
  %1291 = add i64 %1258, 72
  %1292 = inttoptr i64 %1291 to i64*
  %1293 = load i64, i64* %1292
  %1294 = inttoptr i64 %1259 to i64*
  %1295 = load i64, i64* %1294
  store i64 %1295, i64* %4, align 8, !alias.scope !3654, !noalias !3657
  store i64 %1258, i64* %17, align 8, !alias.scope !3654, !noalias !3657
  %1296 = tail call i64 @fprintf(i64 %1256, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3207), i64 %1252, i64 %1263, i64 %1264, i64 %1266, i64 %1269, i64 %1272, i64 %1275, i64 %1278, i64 %1281, i64 %1284, i64 %1287, i64 %1290, i64 %1293), !noalias !3654
  %1297 = load i64, i64* %18, align 8
  %1298 = add i64 %1297, -124
  %1299 = trunc i64 %1296 to i32
  %1300 = load i64, i64* %4, align 8
  %1301 = add i64 %1300, 3
  %1302 = inttoptr i64 %1298 to i32*
  store i32 %1299, i32* %1302
  br label %block_403c1d

block_403bd1:                                     ; preds = %block_403b9a, %block_403bab
  %1303 = phi i64 [ %121, %block_403b9a ], [ %1098, %block_403bab ]
  %1304 = phi i64 [ %1334, %block_403b9a ], [ %1102, %block_403bab ]
  %1305 = phi %struct.Memory* [ %120, %block_403b9a ], [ %120, %block_403bab ]
  %1306 = add i64 %1303, -96
  %1307 = inttoptr i64 %1306 to i64*
  %1308 = load i64, i64* %1307
  store i64 %1308, i64* %16, align 8, !tbaa !1240
  %1309 = add i64 %1304, 25343
  %1310 = add i64 %1304, 14
  %1311 = load i64, i64* %17, align 8, !tbaa !1240
  %1312 = add i64 %1311, -8
  %1313 = inttoptr i64 %1312 to i64*
  store i64 %1310, i64* %1313
  store i64 %1312, i64* %17, align 8, !tbaa !1240
  %1314 = tail call %struct.Memory* @sub_409ed0_PartitionCube(%struct.State* nonnull %0, i64 %1309, %struct.Memory* %1305)
  %1315 = load i32, i32* %10, align 4
  %1316 = load i64, i64* %4, align 8
  store i8 0, i8* %49, align 1, !tbaa !1264
  %1317 = and i32 %1315, 255
  %1318 = tail call i32 @llvm.ctpop.i32(i32 %1317) #10
  %1319 = trunc i32 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = xor i8 %1320, 1
  store i8 %1321, i8* %50, align 1, !tbaa !1278
  store i8 0, i8* %51, align 1, !tbaa !1279
  %1322 = icmp eq i32 %1315, 0
  %1323 = zext i1 %1322 to i8
  store i8 %1323, i8* %52, align 1, !tbaa !1280
  %1324 = lshr i32 %1315, 31
  %1325 = trunc i32 %1324 to i8
  store i8 %1325, i8* %53, align 1, !tbaa !1281
  store i8 0, i8* %54, align 1, !tbaa !1282
  %1326 = select i1 %1322, i64 62, i64 9
  %1327 = add i64 %1316, %1326
  br i1 %1322, label %block_403bd1.block_403c1d_crit_edge, label %block_403be8

block_403bd1.block_403c1d_crit_edge:              ; preds = %block_403bd1
  %1328 = load i64, i64* %18, align 8
  br label %block_403c1d

block_403b9a:                                     ; preds = %block_403ac0
  %1329 = add i64 %127, 512
  %1330 = inttoptr i64 %1329 to i32*
  %1331 = load i32, i32* %1330
  %1332 = icmp eq i32 %1331, 0
  %1333 = select i1 %1332, i64 55, i64 17
  %1334 = add i64 %130, %1333
  br i1 %1332, label %block_403bd1, label %block_403bab

block_403d21:                                     ; preds = %block_403d0f
  %1335 = load i64, i64* @stderr
  %1336 = load i64, i64* %18, align 8
  %1337 = add i64 %1336, -152
  %1338 = inttoptr i64 %1337 to i64*
  store i64 %1335, i64* %1338
  %1339 = add i64 %916, 20
  %1340 = load i64, i64* %17, align 8, !tbaa !1240
  %1341 = add i64 %1340, -8
  %1342 = inttoptr i64 %1341 to i64*
  store i64 %1339, i64* %1342
  %1343 = inttoptr i64 %1341 to i64*
  %1344 = load i64, i64* %1343
  store i64 %1344, i64* %4, align 8, !alias.scope !3659, !noalias !3662
  store i64 %1340, i64* %17, align 8, !alias.scope !3659, !noalias !3662
  %1345 = tail call i64 @__errno_location()
  %1346 = load i64, i64* %4, align 8
  %1347 = inttoptr i64 %1345 to i32*
  %1348 = load i32, i32* %1347
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* %13, align 8, !tbaa !1240
  %1350 = load i64, i64* %18, align 8
  %1351 = add i64 %1350, -152
  %1352 = inttoptr i64 %1351 to i64*
  %1353 = load i64, i64* %1352
  %1354 = add i64 %1346, 36
  %1355 = load i64, i64* %17, align 8, !tbaa !1240
  %1356 = add i64 %1355, -8
  %1357 = inttoptr i64 %1356 to i64*
  store i64 %1354, i64* %1357
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1360 = load i64, i64* %1358, align 8, !alias.scope !3664, !noalias !3667
  %1361 = load i64, i64* %1359, align 8, !alias.scope !3664, !noalias !3667
  %1362 = inttoptr i64 %1355 to i64*
  %1363 = load i64, i64* %1362
  %1364 = add i64 %1355, 8
  %1365 = inttoptr i64 %1364 to i64*
  %1366 = load i64, i64* %1365
  %1367 = add i64 %1355, 16
  %1368 = inttoptr i64 %1367 to i64*
  %1369 = load i64, i64* %1368
  %1370 = add i64 %1355, 24
  %1371 = inttoptr i64 %1370 to i64*
  %1372 = load i64, i64* %1371
  %1373 = add i64 %1355, 32
  %1374 = inttoptr i64 %1373 to i64*
  %1375 = load i64, i64* %1374
  %1376 = add i64 %1355, 40
  %1377 = inttoptr i64 %1376 to i64*
  %1378 = load i64, i64* %1377
  %1379 = add i64 %1355, 48
  %1380 = inttoptr i64 %1379 to i64*
  %1381 = load i64, i64* %1380
  %1382 = add i64 %1355, 56
  %1383 = inttoptr i64 %1382 to i64*
  %1384 = load i64, i64* %1383
  %1385 = add i64 %1355, 64
  %1386 = inttoptr i64 %1385 to i64*
  %1387 = load i64, i64* %1386
  %1388 = add i64 %1355, 72
  %1389 = inttoptr i64 %1388 to i64*
  %1390 = load i64, i64* %1389
  %1391 = inttoptr i64 %1356 to i64*
  %1392 = load i64, i64* %1391
  store i64 %1392, i64* %4, align 8, !alias.scope !3664, !noalias !3667
  store i64 %1355, i64* %17, align 8, !alias.scope !3664, !noalias !3667
  %1393 = tail call i64 @fprintf(i64 %1353, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2968), i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 3262), i64 %1349, i64 %1360, i64 %1361, i64 %1363, i64 %1366, i64 %1369, i64 %1372, i64 %1375, i64 %1378, i64 %1381, i64 %1384, i64 %1387, i64 %1390), !noalias !3664
  %1394 = load i64, i64* %18, align 8
  %1395 = add i64 %1394, -96
  %1396 = load i64, i64* %4, align 8
  %1397 = inttoptr i64 %1395 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %14, align 8, !tbaa !1240
  %1399 = add i64 %1398, 516
  %1400 = inttoptr i64 %1399 to i32*
  store i32 1, i32* %1400
  %1401 = add i64 %1394, -156
  %1402 = trunc i64 %1393 to i32
  %1403 = add i64 %1396, 20
  %1404 = inttoptr i64 %1401 to i32*
  store i32 %1402, i32* %1404
  br label %block_403d6d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4040f0_Verify(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_4040f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %9, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* %9, align 8, !tbaa !1240
  store i64 %13, i64* %10, align 8, !tbaa !1240
  %15 = add i64 %12, -24
  %16 = load i64, i64* %8, align 8
  %17 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %17
  %18 = add i64 %12, -32
  %19 = load i64, i64* %7, align 8
  %20 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %20
  %21 = inttoptr i64 %18 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %22, 4
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = sext i8 %25 to i32
  %27 = add nsw i32 %26, -65
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %33 = lshr i32 %27, 31
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %28, i64* %7, align 8, !tbaa !1240
  %36 = add nsw i32 %26, -87
  %37 = icmp ult i32 %27, 22
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %29, align 1, !tbaa !1264
  %39 = and i32 %36, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #10
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %30, align 1, !tbaa !1278
  %44 = xor i32 %27, 16
  %45 = xor i32 %44, %36
  %46 = lshr i32 %45, 4
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %31, align 1, !tbaa !1279
  %49 = icmp eq i32 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %32, align 1, !tbaa !1280
  %51 = lshr i32 %36, 31
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %34, align 1, !tbaa !1281
  %53 = xor i32 %51, %33
  %54 = add nuw nsw i32 %53, %33
  %55 = icmp eq i32 %54, 2
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %35, align 1, !tbaa !1282
  %57 = add i64 %12, -40
  %58 = inttoptr i64 %57 to i64*
  store i64 %28, i64* %58
  %59 = load i64, i64* %10, align 8
  %60 = add i64 %59, -36
  %61 = inttoptr i64 %60 to i32*
  store i32 %36, i32* %61
  %62 = or i1 %49, %37
  br i1 %62, label %block_404119, label %block_4041e9

block_40417f:                                     ; preds = %block_404119
  %63 = add i64 %59, -16
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64
  %66 = load i64, i64* bitcast (%checksumAlo_type* @checksumAlo to i64*)
  %67 = load i64, i64* bitcast (%checksumAhi_type* @checksumAhi to i64*)
  %68 = mul i64 %67, 1000000
  store i64 %68, i64* %6, align 8, !tbaa !1240
  %69 = add i64 %68, %66
  store i64 %69, i64* %5, align 8, !tbaa !1240
  %70 = lshr i64 %69, 63
  %71 = sub i64 %65, %69
  %72 = icmp ult i64 %65, %69
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %29, align 1, !tbaa !1264
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #10
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %30, align 1, !tbaa !1278
  %80 = xor i64 %69, %65
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %31, align 1, !tbaa !1279
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1, !tbaa !1280
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %34, align 1, !tbaa !1281
  %89 = lshr i64 %65, 63
  %90 = xor i64 %70, %89
  %91 = xor i64 %87, %89
  %92 = add nuw nsw i64 %91, %90
  %93 = icmp eq i64 %92, 2
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %35, align 1, !tbaa !1282
  br i1 %85, label %block_4041a3, label %block_4041f5

block_4041d8:                                     ; preds = %block_4041b4
  %95 = load i64, i64* %10, align 8
  %96 = add i64 %95, -4
  %97 = inttoptr i64 %96 to i32*
  store i32 0, i32* %97
  br label %block_4041fc

block_404119:                                     ; preds = %block_4040f0
  %98 = add i64 %59, -32
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %4, align 8, !tbaa !1240
  %101 = shl i64 %100, 3
  %102 = add i64 %101, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 2520)
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %5, align 8, !tbaa !1240
  store i64 %104, i64* %3, align 8, !tbaa !1240
  switch i64 %104, label %224 [
    i64 4211018, label %block_40414a
    i64 4210983, label %block_404127
    i64 4211177, label %block_4041e9
    i64 4211071, label %block_40417f
    i64 4211124, label %block_4041b4
  ]

block_4041b4:                                     ; preds = %block_404119
  %105 = add i64 %59, -16
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = load i64, i64* bitcast (%checksumBlo_type* @checksumBlo to i64*)
  %109 = load i64, i64* bitcast (%checksumBhi_type* @checksumBhi to i64*)
  %110 = mul i64 %109, 1000000
  store i64 %110, i64* %6, align 8, !tbaa !1240
  %111 = add i64 %110, %108
  store i64 %111, i64* %5, align 8, !tbaa !1240
  %112 = lshr i64 %111, 63
  %113 = sub i64 %107, %111
  %114 = icmp ult i64 %107, %111
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %29, align 1, !tbaa !1264
  %116 = trunc i64 %113 to i32
  %117 = and i32 %116, 255
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #10
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  store i8 %121, i8* %30, align 1, !tbaa !1278
  %122 = xor i64 %111, %107
  %123 = xor i64 %122, %113
  %124 = lshr i64 %123, 4
  %125 = trunc i64 %124 to i8
  %126 = and i8 %125, 1
  store i8 %126, i8* %31, align 1, !tbaa !1279
  %127 = icmp eq i64 %113, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %32, align 1, !tbaa !1280
  %129 = lshr i64 %113, 63
  %130 = trunc i64 %129 to i8
  store i8 %130, i8* %34, align 1, !tbaa !1281
  %131 = lshr i64 %107, 63
  %132 = xor i64 %112, %131
  %133 = xor i64 %129, %131
  %134 = add nuw nsw i64 %133, %132
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %35, align 1, !tbaa !1282
  br i1 %127, label %block_4041d8, label %block_4041f5

block_40416e:                                     ; preds = %block_40414a
  %137 = load i64, i64* %10, align 8
  %138 = add i64 %137, -4
  %139 = inttoptr i64 %138 to i32*
  store i32 0, i32* %139
  br label %block_4041fc

block_4041f5:                                     ; preds = %block_404127, %block_40414a, %block_4041b4, %block_40417f
  %140 = load i64, i64* %10, align 8
  %141 = add i64 %140, -4
  %142 = inttoptr i64 %141 to i32*
  store i32 1, i32* %142
  br label %block_4041fc

block_40414a:                                     ; preds = %block_404119
  %143 = add i64 %59, -16
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  %146 = load i64, i64* bitcast (%checksumWlo_type* @checksumWlo to i64*)
  %147 = load i64, i64* bitcast (%checksumWhi_type* @checksumWhi to i64*)
  %148 = mul i64 %147, 1000000
  store i64 %148, i64* %6, align 8, !tbaa !1240
  %149 = add i64 %148, %146
  store i64 %149, i64* %5, align 8, !tbaa !1240
  %150 = lshr i64 %149, 63
  %151 = sub i64 %145, %149
  %152 = icmp ult i64 %145, %149
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %29, align 1, !tbaa !1264
  %154 = trunc i64 %151 to i32
  %155 = and i32 %154, 255
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #10
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = xor i8 %158, 1
  store i8 %159, i8* %30, align 1, !tbaa !1278
  %160 = xor i64 %149, %145
  %161 = xor i64 %160, %151
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  store i8 %164, i8* %31, align 1, !tbaa !1279
  %165 = icmp eq i64 %151, 0
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %32, align 1, !tbaa !1280
  %167 = lshr i64 %151, 63
  %168 = trunc i64 %167 to i8
  store i8 %168, i8* %34, align 1, !tbaa !1281
  %169 = lshr i64 %145, 63
  %170 = xor i64 %150, %169
  %171 = xor i64 %167, %169
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %35, align 1, !tbaa !1282
  br i1 %165, label %block_40416e, label %block_4041f5

block_4041fc:                                     ; preds = %block_4041a3, %block_404139, %block_4041e9, %block_4041f5, %block_40416e, %block_4041d8
  %175 = phi i64 [ %59, %block_4041e9 ], [ %140, %block_4041f5 ], [ %95, %block_4041d8 ], [ %221, %block_4041a3 ], [ %59, %block_404139 ], [ %137, %block_40416e ]
  %176 = phi %struct.Memory* [ %2, %block_4041e9 ], [ %2, %block_4041f5 ], [ %2, %block_4041d8 ], [ %2, %block_4041a3 ], [ %2, %block_404139 ], [ %2, %block_40416e ]
  %177 = add i64 %175, -4
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %4, align 8, !tbaa !1240
  %181 = load i64, i64* %9, align 8, !tbaa !1240
  %182 = add i64 %181, 8
  %183 = inttoptr i64 %181 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %10, align 8, !tbaa !1240
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %3, align 8, !tbaa !1240
  %187 = add i64 %181, 16
  store i64 %187, i64* %9, align 8, !tbaa !1240
  ret %struct.Memory* %176

block_4041e9:                                     ; preds = %block_404119, %block_4040f0
  %188 = add i64 %59, -4
  %189 = inttoptr i64 %188 to i32*
  store i32 -1, i32* %189
  br label %block_4041fc

block_404127:                                     ; preds = %block_404119
  %190 = add i64 %59, -16
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  %193 = load i64, i64* bitcast (%checksumS_type* @checksumS to i64*)
  %194 = sub i64 %192, %193
  %195 = icmp ult i64 %192, %193
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %29, align 1, !tbaa !1264
  %197 = trunc i64 %194 to i32
  %198 = and i32 %197, 255
  %199 = tail call i32 @llvm.ctpop.i32(i32 %198) #10
  %200 = trunc i32 %199 to i8
  %201 = and i8 %200, 1
  %202 = xor i8 %201, 1
  store i8 %202, i8* %30, align 1, !tbaa !1278
  %203 = xor i64 %193, %192
  %204 = xor i64 %203, %194
  %205 = lshr i64 %204, 4
  %206 = trunc i64 %205 to i8
  %207 = and i8 %206, 1
  store i8 %207, i8* %31, align 1, !tbaa !1279
  %208 = icmp eq i64 %194, 0
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %32, align 1, !tbaa !1280
  %210 = lshr i64 %194, 63
  %211 = trunc i64 %210 to i8
  store i8 %211, i8* %34, align 1, !tbaa !1281
  %212 = lshr i64 %192, 63
  %213 = lshr i64 %193, 63
  %214 = xor i64 %213, %212
  %215 = xor i64 %210, %212
  %216 = add nuw nsw i64 %215, %214
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %35, align 1, !tbaa !1282
  br i1 %208, label %block_404139, label %block_4041f5

block_404139:                                     ; preds = %block_404127
  %219 = add i64 %59, -4
  %220 = inttoptr i64 %219 to i32*
  store i32 0, i32* %220
  br label %block_4041fc

block_4041a3:                                     ; preds = %block_40417f
  %221 = load i64, i64* %10, align 8
  %222 = add i64 %221, -4
  %223 = inttoptr i64 %222 to i32*
  store i32 0, i32* %223
  br label %block_4041fc

; <label>:224:                                    ; preds = %block_404119
  %225 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %225
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400f70_initADCpar(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_400f70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load i64, i64* %6, align 8, !tbaa !1240
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %8, i64* %11
  %12 = add i64 %9, -16
  %13 = load i64, i64* %5, align 8
  %14 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %14
  %15 = add i64 %9, -16
  %16 = inttoptr i64 %15 to i64*
  %17 = load i64, i64* %16
  %18 = inttoptr i64 %17 to i32*
  store i32 0, i32* %18
  %19 = inttoptr i64 %15 to i64*
  %20 = load i64, i64* %19
  %21 = add i64 %20, 4
  %22 = inttoptr i64 %21 to i32*
  store i32 5, i32* %22
  %23 = inttoptr i64 %15 to i64*
  %24 = load i64, i64* %23
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %25 to i32*
  store i32 1, i32* %26
  %27 = inttoptr i64 %15 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %28, 16
  %30 = inttoptr i64 %29 to i64*
  store i64 100, i64* %30
  %31 = inttoptr i64 %15 to i64*
  %32 = load i64, i64* %31
  %33 = add i64 %32, 24
  %34 = inttoptr i64 %33 to i32*
  store i32 0, i32* %34
  %35 = inttoptr i64 %15 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %5, align 8, !tbaa !1240
  %37 = add i64 %36, 32
  %38 = inttoptr i64 %37 to i64*
  store i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 804), i64* %38
  %39 = inttoptr i64 %15 to i64*
  %40 = load i64, i64* %39
  store i64 %40, i64* %4, align 8, !tbaa !1240
  %41 = add i64 %40, 40
  %42 = inttoptr i64 %41 to i8*
  store i8 85, i8* %42
  %43 = inttoptr i64 %10 to i64*
  %44 = load i64, i64* %43
  store i64 %44, i64* %7, align 8, !tbaa !1240
  %45 = inttoptr i64 %9 to i64*
  %46 = load i64, i64* %45
  store i64 %46, i64* %3, align 8, !tbaa !1240
  %47 = add i64 %9, 8
  store i64 %47, i64* %6, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403560_timer_clear(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #5 {
block_403560:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8, !tbaa !1240
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13
  %14 = bitcast %union.VectorReg* %9 to i8*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %16 = bitcast %union.VectorReg* %9 to i32*
  store i32 0, i32* %16, align 1, !tbaa !3573
  %17 = getelementptr inbounds i8, i8* %14, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !3573
  %19 = bitcast i64* %15 to i32*
  store i32 0, i32* %19, align 1, !tbaa !3573
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 1, !tbaa !3573
  %22 = add i64 %11, -12
  %23 = load i32, i32* %5, align 4
  %24 = inttoptr i64 %22 to i32*
  store i32 %23, i32* %24
  %25 = inttoptr i64 %22 to i32*
  %26 = load i32, i32* %25
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %6, align 8, !tbaa !1240
  %28 = shl nsw i64 %27, 3
  %29 = add i64 %28, add (i64 ptrtoint (%seg_60f560__bss_type* @seg_60f560__bss to i64), i64 224)
  %30 = bitcast %union.VectorReg* %9 to double*
  %31 = load double, double* %30, align 1
  %32 = inttoptr i64 %29 to double*
  store double %31, double* %32
  %33 = inttoptr i64 %12 to i64*
  %34 = load i64, i64* %33
  store i64 %34, i64* %8, align 8, !tbaa !1240
  %35 = inttoptr i64 %11 to i64*
  %36 = load i64, i64* %35
  store i64 %36, i64* %3, align 8, !tbaa !1240
  %37 = add i64 %11, 8
  store i64 %37, i64* %7, align 8, !tbaa !1240
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402673(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %22 = load i64, i64* %12, align 8
  %23 = load i64, i64* %19, align 8, !alias.scope !3669, !noalias !3672
  %24 = add i64 %1, 35
  br label %block_402673

block_402673.loopexit:                            ; preds = %block_40255a
  br label %block_402673

block_402673:                                     ; preds = %block_402673.loopexit, %3
  %25 = phi i64 [ %23, %3 ], [ 4204147, %block_402673.loopexit ]
  %26 = phi i64 [ %22, %3 ], [ %316, %block_402673.loopexit ]
  %27 = phi i64 [ %24, %3 ], [ 4204182, %block_402673.loopexit ]
  %28 = phi %struct.Memory* [ %2, %3 ], [ %362, %block_402673.loopexit ]
  %29 = add i64 %26, -1096
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %26, -24
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %34, 40
  %36 = load i64, i64* %11, align 8, !tbaa !1240
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %27, i64* %38
  %39 = load i64, i64* %20, align 8, !alias.scope !3669, !noalias !3672
  %40 = load i64, i64* %21, align 8, !alias.scope !3669, !noalias !3672
  %41 = inttoptr i64 %36 to i64*
  %42 = load i64, i64* %41
  %43 = add i64 %36, 8
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  %46 = add i64 %36, 16
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  %49 = add i64 %36, 24
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  %52 = add i64 %36, 32
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  %55 = add i64 %36, 40
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56
  %58 = add i64 %36, 48
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59
  %61 = add i64 %36, 56
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62
  %64 = add i64 %36, 64
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = add i64 %36, 72
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  %70 = inttoptr i64 %37 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %4, align 8, !alias.scope !3669, !noalias !3672
  store i64 %36, i64* %11, align 8, !alias.scope !3669, !noalias !3672
  %72 = tail call i64 @__isoc99_sscanf(i64 %31, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1039), i64 %35, i64 %25, i64 %39, i64 %40, i64 %42, i64 %45, i64 %48, i64 %51, i64 %54, i64 %57, i64 %60, i64 %63, i64 %66, i64 %69), !noalias !3669
  %73 = load i64, i64* %12, align 8
  %74 = add i64 %73, -1144
  %75 = trunc i64 %72 to i32
  %76 = load i64, i64* %4, align 8
  %77 = add i64 %76, 6
  %78 = inttoptr i64 %74 to i32*
  store i32 %75, i32* %78
  br label %block_40269c

block_4026d0.loopexit:                            ; preds = %block_4024cc
  br label %block_4026d0

block_4026d0:                                     ; preds = %block_40269c, %block_4026d0.loopexit
  %79 = phi i64 [ %372, %block_40269c ], [ %368, %block_4026d0.loopexit ]
  %80 = phi i64 [ %369, %block_40269c ], [ %361, %block_4026d0.loopexit ]
  %81 = phi %struct.Memory* [ %371, %block_40269c ], [ %362, %block_4026d0.loopexit ]
  %82 = add i64 %80, -1076
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83
  %85 = add i32 %84, 1
  %86 = inttoptr i64 %82 to i32*
  store i32 %85, i32* %86
  store i64 1024, i64* %9, align 8, !tbaa !1240
  %87 = add i64 %80, -1056
  %88 = add i64 %80, -1064
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %8, align 8, !tbaa !1240
  %91 = add i64 %79, -558
  %92 = load i64, i64* %11, align 8, !tbaa !1240
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %4, align 8, !alias.scope !3674, !noalias !3677
  store i64 %92, i64* %11, align 8, !alias.scope !3674, !noalias !3677
  %97 = tail call i64 @fgets(i64 %87, i64 1024, i64 %90)
  %98 = load i64, i64* %4, align 8
  %99 = icmp eq i64 %97, 0
  %100 = select i1 %99, i64 578, i64 10
  %101 = add i64 %98, %100
  %102 = load i64, i64* %12, align 8
  br i1 %99, label %block_4026e4, label %block_4024ac

block_4025c7:                                     ; preds = %block_40255a
  %103 = inttoptr i64 %320 to i64*
  %104 = load i64, i64* %103
  %105 = add i64 %316, -24
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  %108 = add i64 %107, 16
  %109 = load i64, i64* %11, align 8, !tbaa !1240
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 4204010, i64* %111
  %112 = load i64, i64* %20, align 8, !alias.scope !3679, !noalias !3682
  %113 = load i64, i64* %21, align 8, !alias.scope !3679, !noalias !3682
  %114 = inttoptr i64 %109 to i64*
  %115 = load i64, i64* %114
  %116 = add i64 %109, 8
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117
  %119 = add i64 %109, 16
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120
  %122 = add i64 %109, 24
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %109, 32
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126
  %128 = add i64 %109, 40
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129
  %131 = add i64 %109, 48
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  %134 = add i64 %109, 56
  %135 = inttoptr i64 %134 to i64*
  %136 = load i64, i64* %135
  %137 = add i64 %109, 64
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = add i64 %109, 72
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = inttoptr i64 %110 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %4, align 8, !alias.scope !3679, !noalias !3682
  store i64 %109, i64* %11, align 8, !alias.scope !3679, !noalias !3682
  %145 = tail call i64 @__isoc99_sscanf(i64 %104, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 898), i64 %108, i64 4203975, i64 %112, i64 %113, i64 %115, i64 %118, i64 %121, i64 %124, i64 %127, i64 %130, i64 %133, i64 %136, i64 %139, i64 %142), !noalias !3679
  %146 = load i64, i64* %12, align 8
  %147 = add i64 %146, -1132
  %148 = trunc i64 %145 to i32
  %149 = load i64, i64* %4, align 8
  %150 = inttoptr i64 %147 to i32*
  store i32 %148, i32* %150
  %151 = add i64 %149, 178
  br label %block_40269c.backedge

block_4027c1:                                     ; preds = %block_402719, %block_4026e4
  %152 = add i64 %276, -4
  %153 = inttoptr i64 %152 to i32*
  store i32 1, i32* %153
  %154 = inttoptr i64 %152 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %6, align 8, !tbaa !1240
  %157 = load i64, i64* %11, align 8
  %158 = add i64 %157, 1168
  %159 = icmp ugt i64 %157, -1169
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %13, align 1, !tbaa !1264
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #10
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %14, align 1, !tbaa !1278
  %167 = xor i64 %157, 16
  %168 = xor i64 %167, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %15, align 1, !tbaa !1279
  %172 = icmp eq i64 %158, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %16, align 1, !tbaa !1280
  %174 = lshr i64 %158, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %17, align 1, !tbaa !1281
  %176 = lshr i64 %157, 63
  %177 = xor i64 %174, %176
  %178 = add nuw nsw i64 %177, %174
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %18, align 1, !tbaa !1282
  %181 = add i64 %157, 1176
  %182 = inttoptr i64 %158 to i64*
  %183 = load i64, i64* %182
  store i64 %183, i64* %12, align 8, !tbaa !1240
  %184 = inttoptr i64 %181 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %4, align 8, !tbaa !1240
  %186 = add i64 %157, 1184
  store i64 %186, i64* %11, align 8, !tbaa !1240
  ret %struct.Memory* %81

block_40255a:                                     ; preds = %block_40251c
  %187 = inttoptr i64 %343 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %6, align 8, !tbaa !1240
  %189 = shl i64 %188, 3
  %190 = add i64 %189, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 560)
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %7, align 8, !tbaa !1240
  store i64 %192, i64* %4, align 8, !tbaa !1240
  switch i64 %192, label %378 [
    i64 4203929, label %block_402599
    i64 4203883, label %block_40256b
    i64 4204026, label %block_4025fa
    i64 4203975, label %block_4025c7
    i64 4204147, label %block_402673.loopexit
    i64 4204072, label %block_402628
    i64 4204021, label %block_4025f5
  ]

block_4024ac:                                     ; preds = %block_4026d0
  %193 = add i64 %102, -1080
  %194 = inttoptr i64 %193 to i32*
  store i32 0, i32* %194
  %195 = inttoptr i64 %193 to i32*
  %196 = load i32, i32* %195
  %197 = sext i32 %196 to i64
  %198 = shl nsw i64 %197, 3
  %199 = add i64 %198, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200
  %202 = add i64 %102, -1088
  %203 = add i64 %101, 32
  %204 = inttoptr i64 %202 to i64*
  store i64 %201, i64* %204
  br label %block_4024cc

block_4026a6:                                     ; preds = %block_4024ff, %block_4024da
  %205 = phi i64 [ %304, %block_4024ff ], [ %288, %block_4024da ]
  %206 = phi i64 [ 5, %block_4024ff ], [ 428, %block_4024da ]
  %207 = phi %struct.Memory* [ %362, %block_4024ff ], [ %362, %block_4024da ]
  %208 = add i64 %205, %206
  %209 = load i64, i64* %12, align 8
  %210 = add i64 %209, -1080
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211
  %213 = add i32 %212, 1
  %214 = inttoptr i64 %210 to i32*
  store i32 %213, i32* %214
  %215 = inttoptr i64 %210 to i32*
  %216 = load i32, i32* %215
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 3
  %219 = add i64 %218, add (i64 ptrtoint (%UpPrimeLim_type* @UpPrimeLim to i64), i64 16)
  %220 = inttoptr i64 %219 to i64*
  %221 = load i64, i64* %220
  %222 = add i64 %209, -1088
  %223 = inttoptr i64 %222 to i64*
  store i64 %221, i64* %223
  %224 = add i64 %208, -474
  br label %block_4024cc

block_4026e4:                                     ; preds = %block_4026d0
  %225 = add i64 %102, -1064
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  %228 = add i64 %101, 12
  %229 = load i64, i64* %11, align 8, !tbaa !1240
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %228, i64* %231
  %232 = inttoptr i64 %230 to i64*
  %233 = load i64, i64* %232
  store i64 %233, i64* %4, align 8, !alias.scope !3684, !noalias !3687
  store i64 %229, i64* %11, align 8, !alias.scope !3684, !noalias !3687
  %234 = tail call i64 @fclose(i64 %227), !noalias !3684
  %235 = load i64, i64* %12, align 8
  %236 = add i64 %235, -24
  %237 = inttoptr i64 %236 to i64*
  %238 = load i64, i64* %237
  %239 = add i64 %238, 40
  %240 = inttoptr i64 %239 to i8*
  %241 = load i8, i8* %240
  %242 = sext i8 %241 to i32
  %243 = add nsw i32 %242, -65
  %244 = zext i32 %243 to i64
  %245 = lshr i32 %243, 31
  store i64 %244, i64* %10, align 8, !tbaa !1240
  %246 = add nsw i32 %242, -87
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %7, align 8, !tbaa !1240
  %248 = icmp ult i32 %243, 22
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %13, align 1, !tbaa !1264
  %250 = and i32 %246, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #10
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %14, align 1, !tbaa !1278
  %255 = xor i32 %243, 16
  %256 = xor i32 %255, %246
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %15, align 1, !tbaa !1279
  %260 = icmp eq i32 %246, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %16, align 1, !tbaa !1280
  %262 = lshr i32 %246, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %17, align 1, !tbaa !1281
  %264 = xor i32 %262, %245
  %265 = add nuw nsw i32 %264, %245
  %266 = icmp eq i32 %265, 2
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %18, align 1, !tbaa !1282
  %268 = add i64 %235, -1148
  %269 = trunc i64 %234 to i32
  %270 = inttoptr i64 %268 to i32*
  store i32 %269, i32* %270
  %271 = add i64 %235, -1160
  %272 = inttoptr i64 %271 to i64*
  store i64 %244, i64* %272
  %273 = add i64 %235, -1164
  %274 = inttoptr i64 %273 to i32*
  store i32 %246, i32* %274
  %275 = or i1 %260, %248
  %276 = load i64, i64* %12, align 8
  br i1 %275, label %block_402719, label %block_4027c1

block_4024da:                                     ; preds = %block_4024cc
  %277 = add i64 %361, -1056
  %278 = add i64 %368, 22
  %279 = load i64, i64* %11, align 8, !tbaa !1240
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281
  %282 = inttoptr i64 %280 to i64*
  %283 = load i64, i64* %282
  store i64 %283, i64* %4, align 8, !alias.scope !3689, !noalias !3692
  store i64 %279, i64* %11, align 8, !alias.scope !3689, !noalias !3692
  %284 = tail call i64 @strstr(i64 %277, i64 add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 1037))
  %285 = load i64, i64* %4, align 8
  %286 = icmp eq i64 %284, 0
  %287 = select i1 %286, i64 15, i64 10
  %288 = add i64 %285, %287
  br i1 %286, label %block_4024ff, label %block_4026a6

block_4024ff:                                     ; preds = %block_4024da
  %289 = load i64, i64* %12, align 8
  %290 = add i64 %289, -1056
  %291 = add i64 %289, -1088
  %292 = inttoptr i64 %291 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %9, align 8, !tbaa !1240
  %294 = add i64 %288, 19
  %295 = load i64, i64* %11, align 8, !tbaa !1240
  %296 = add i64 %295, -8
  %297 = inttoptr i64 %296 to i64*
  store i64 %294, i64* %297
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %4, align 8, !alias.scope !3694, !noalias !3697
  store i64 %295, i64* %11, align 8, !alias.scope !3694, !noalias !3697
  %300 = tail call i64 @strstr(i64 %290, i64 %293)
  %301 = load i64, i64* %4, align 8
  %302 = icmp eq i64 %300, 0
  %303 = select i1 %302, i64 399, i64 10
  %304 = add i64 %301, %303
  br i1 %302, label %block_4026a6, label %block_40251c

block_40251c:                                     ; preds = %block_4024ff
  %305 = load i64, i64* %12, align 8
  %306 = add i64 %305, -1088
  %307 = inttoptr i64 %306 to i64*
  %308 = load i64, i64* %307
  %309 = add i64 %304, 12
  %310 = load i64, i64* %11, align 8, !tbaa !1240
  %311 = add i64 %310, -8
  %312 = inttoptr i64 %311 to i64*
  store i64 %309, i64* %312
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %4, align 8, !alias.scope !3699, !noalias !3702
  store i64 %310, i64* %11, align 8, !alias.scope !3699, !noalias !3702
  %315 = tail call i64 @strlen(i64 %308)
  %316 = load i64, i64* %12, align 8
  %317 = add i64 %316, -1055
  %318 = add i64 %317, %315
  %319 = load i64, i64* %4, align 8
  %320 = add i64 %316, -1096
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321
  %322 = add i64 %316, -1080
  %323 = inttoptr i64 %322 to i32*
  %324 = load i32, i32* %323
  %325 = zext i32 %324 to i64
  %326 = add nsw i64 %325, -6
  store i64 %326, i64* %10, align 8, !tbaa !1240
  %327 = icmp ult i32 %324, 6
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %13, align 1, !tbaa !1264
  %329 = trunc i64 %326 to i32
  %330 = and i32 %329, 255
  %331 = tail call i32 @llvm.ctpop.i32(i32 %330) #10
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  store i8 %334, i8* %14, align 1, !tbaa !1278
  %335 = xor i64 %326, %325
  %336 = lshr i64 %335, 4
  %337 = trunc i64 %336 to i8
  %338 = and i8 %337, 1
  store i8 %338, i8* %15, align 1, !tbaa !1279
  %339 = icmp eq i64 %326, 0
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %16, align 1, !tbaa !1280
  %341 = lshr i64 %326, 63
  %342 = trunc i64 %341 to i8
  store i8 %342, i8* %17, align 1, !tbaa !1281
  store i8 0, i8* %18, align 1, !tbaa !1282
  %343 = add i64 %316, -1112
  %344 = inttoptr i64 %343 to i64*
  store i64 %325, i64* %344
  %345 = add i64 %316, -1120
  %346 = inttoptr i64 %345 to i64*
  store i64 %326, i64* %346
  %347 = or i1 %339, %327
  %348 = select i1 %347, i64 50, i64 372
  %349 = add i64 %319, %348
  br i1 %347, label %block_40255a, label %block_40269c.backedge

block_40269c.backedge:                            ; preds = %block_40251c, %block_4025c7
  %350 = phi i64 [ %316, %block_40251c ], [ %146, %block_4025c7 ]
  %351 = phi i64 [ %349, %block_40251c ], [ %151, %block_4025c7 ]
  %352 = phi %struct.Memory* [ %362, %block_40251c ], [ %362, %block_4025c7 ]
  br label %block_40269c

block_402719:                                     ; preds = %block_4026e4
  %353 = add i64 %276, -1160
  %354 = inttoptr i64 %353 to i64*
  %355 = load i64, i64* %354
  store i64 %355, i64* %6, align 8, !tbaa !1240
  %356 = shl i64 %355, 3
  %357 = add i64 %356, add (i64 ptrtoint (%seg_40bac0__rodata_type* @seg_40bac0__rodata to i64), i64 376)
  %358 = inttoptr i64 %357 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %7, align 8, !tbaa !1240
  store i64 %359, i64* %4, align 8, !tbaa !1240
  switch i64 %359, label %384 [
    i64 4204369, label %block_402751
    i64 4204481, label %block_4027c1
    i64 4204408, label %block_402778
    i64 4204447, label %block_40279f
    i64 4204330, label %block_40272a
  ]

block_4024cc:                                     ; preds = %block_4026a6, %block_4024ac
  %360 = phi i64 [ %203, %block_4024ac ], [ %224, %block_4026a6 ]
  %361 = phi i64 [ %102, %block_4024ac ], [ %209, %block_4026a6 ]
  %362 = phi %struct.Memory* [ %81, %block_4024ac ], [ %207, %block_4026a6 ]
  %363 = add i64 %361, -1088
  %364 = inttoptr i64 %363 to i64*
  %365 = load i64, i64* %364
  %366 = icmp eq i64 %365, 0
  %367 = select i1 %366, i64 516, i64 14
  %368 = add i64 %360, %367
  br i1 %366, label %block_4026d0.loopexit, label %block_4024da

block_40269c:                                     ; preds = %block_40269c.backedge, %block_402673
  %369 = phi i64 [ %73, %block_402673 ], [ %350, %block_40269c.backedge ]
  %370 = phi i64 [ %77, %block_402673 ], [ %351, %block_40269c.backedge ]
  %371 = phi %struct.Memory* [ %28, %block_402673 ], [ %352, %block_40269c.backedge ]
  %372 = add i64 %370, 52
  br label %block_4026d0

block_40256b:                                     ; preds = %block_40255a
  %373 = tail call %struct.Memory* @sub_40256b(%struct.State* nonnull %0, i64 4203883, %struct.Memory* %362)
  ret %struct.Memory* %373

block_4025fa:                                     ; preds = %block_40255a
  %374 = tail call %struct.Memory* @sub_4025fa(%struct.State* nonnull %0, i64 4204026, %struct.Memory* %362)
  ret %struct.Memory* %374

block_402628:                                     ; preds = %block_40255a
  %375 = tail call %struct.Memory* @sub_402628(%struct.State* nonnull %0, i64 4204072, %struct.Memory* %362)
  ret %struct.Memory* %375

block_4025f5:                                     ; preds = %block_40255a
  %376 = tail call %struct.Memory* @sub_4025f5(%struct.State* nonnull %0, i64 4204021, %struct.Memory* %362)
  ret %struct.Memory* %376

block_402599:                                     ; preds = %block_40255a
  %377 = tail call %struct.Memory* @sub_402599(%struct.State* nonnull %0, i64 4203929, %struct.Memory* %362)
  ret %struct.Memory* %377

; <label>:378:                                    ; preds = %block_40255a
  %379 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %192, %struct.Memory* %362)
  ret %struct.Memory* %379

block_40279f:                                     ; preds = %block_402719
  %380 = tail call %struct.Memory* @sub_40279f(%struct.State* nonnull %0, i64 4204447, %struct.Memory* %81)
  ret %struct.Memory* %380

block_40272a:                                     ; preds = %block_402719
  %381 = tail call %struct.Memory* @sub_40272a(%struct.State* nonnull %0, i64 4204330, %struct.Memory* %81)
  ret %struct.Memory* %381

block_402778:                                     ; preds = %block_402719
  %382 = tail call %struct.Memory* @sub_402778(%struct.State* nonnull %0, i64 4204408, %struct.Memory* %81)
  ret %struct.Memory* %382

block_402751:                                     ; preds = %block_402719
  %383 = tail call %struct.Memory* @sub_402751(%struct.State* nonnull %0, i64 4204369, %struct.Memory* %81)
  ret %struct.Memory* %383

; <label>:384:                                    ; preds = %block_402719
  %385 = tail call %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %359, %struct.Memory* %81)
  ret %struct.Memory* %385
}

; Function Attrs: nobuiltin noinline
define i64 @callback_sub_400d80__start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197760, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400d80__start(%struct.State* nonnull @__mcsema_reg_state, i64 4197760, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: norecurse nounwind
define void @__mcsema_verify_reg_state() local_unnamed_addr #7 {
entry:
  %0 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %is_null, label %end

is_null:                                          ; preds = %entry
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %end

end:                                              ; preds = %is_null, %entry
  ret void
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400e60_frame_dummy(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197984, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400e60_frame_dummy(%struct.State* nonnull @__mcsema_reg_state, i64 4197984, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_400e30___do_global_dtors_aux(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197936, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400e30___do_global_dtors_aux(%struct.State* nonnull @__mcsema_reg_state, i64 4197936, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: noinline nounwind
define %struct.Memory* @__mcsema_detach_call_value(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %1 to i64 (i64, i64, i64, i64, i64, i64, i64, i64)*
  %27 = tail call i64 %26(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25) #10
  store i64 %27, i64* %5, align 8
  %28 = inttoptr i64 %19 to i64*
  %29 = load i64, i64* %28
  store i64 %29, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @CompareViewsBySize(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4201536, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_401c40_CompareViewsBySize(%struct.State* nonnull @__mcsema_reg_state, i64 4201536, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400be0_qsort(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %9, align 8
  %12 = load i64, i64* %8, align 8
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* %10, align 8
  %16 = inttoptr i64 %15 to i64*
  %17 = load i64, i64* %16
  store i64 %17, i64* %4, align 8
  %18 = add i64 %15, 8
  store i64 %18, i64* %10, align 8
  %19 = tail call i64 @qsort(i64 %11, i64 %12, i64 %13, i64 %14)
  store i64 %19, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400c90_fprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @fprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400b90_free(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @free(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400c70_calloc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @calloc(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6100a0_sprintf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @sprintf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610088_fopen(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @fopen(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610000_fclose(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fclose(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610078___isoc99_sscanf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @__isoc99_sscanf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610010_strchr(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @strchr(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400d60_strstr(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @strstr(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400c10_strlen(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @strlen(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610038_fgets(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* %9, align 8
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %4, align 8
  %16 = add i64 %13, 8
  store i64 %16, i64* %9, align 8
  %17 = tail call i64 @fgets(i64 %10, i64 %11, i64 %12)
  store i64 %17, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610068_malloc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @malloc(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6100b0_fwrite(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %9, align 8
  %12 = load i64, i64* %8, align 8
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* %10, align 8
  %16 = inttoptr i64 %15 to i64*
  %17 = load i64, i64* %16
  store i64 %17, i64* %4, align 8
  %18 = add i64 %15, 8
  store i64 %18, i64* %10, align 8
  %19 = tail call i64 @fwrite(i64 %11, i64 %12, i64 %13, i64 %14)
  store i64 %19, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400cf0_fseek(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* %9, align 8
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %4, align 8
  %16 = add i64 %13, 8
  store i64 %16, i64* %9, align 8
  %17 = tail call i64 @fseek(i64 %10, i64 %11, i64 %12)
  store i64 %17, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_60fff8_fread(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %9, align 8
  %12 = load i64, i64* %8, align 8
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* %10, align 8
  %16 = inttoptr i64 %15 to i64*
  %17 = load i64, i64* %16
  store i64 %17, i64* %4, align 8
  %18 = add i64 %15, 8
  store i64 %18, i64* %10, align 8
  %19 = tail call i64 @fread(i64 %11, i64 %12, i64 %13, i64 %14)
  store i64 %19, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610060_memcpy(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* %9, align 8
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  store i64 %15, i64* %4, align 8
  %16 = add i64 %13, 8
  store i64 %16, i64* %9, align 8
  %17 = tail call i64 @memcpy(i64 %10, i64 %11, i64 %12)
  store i64 %17, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6100a8_exit(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @exit(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_60ffd0___errno_location(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8
  store i64 %9, i64* %4, align 8
  %10 = add i64 %7, 8
  store i64 %10, i64* %6, align 8
  %11 = tail call i64 @__errno_location()
  store i64 %11, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610090_atoi(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @atoi(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400d70___ctype_b_loc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8
  store i64 %9, i64* %4, align 8
  %10 = add i64 %7, 8
  store i64 %10, i64* %6, align 8
  %11 = tail call i64 @__ctype_b_loc()
  store i64 %11, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_60ffe0_strcpy(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @strcpy(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400c80_strcmp(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @strcmp(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_60ffe8___isoc99_fscanf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @__isoc99_fscanf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400cd0_fflush(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @fflush(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_60ffd8_unlink(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @unlink(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @Comp8gbuf(i64, i64, i64, i64, i64, i64, i64, i64) #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4232304, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409470_Comp8gbuf(%struct.State* nonnull @__mcsema_reg_state, i64 4232304, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610058_ftell(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %4, align 8
  %12 = add i64 %9, 8
  store i64 %12, i64* %7, align 8
  %13 = tail call i64 @ftell(i64 %8)
  store i64 %13, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_40bab0___libc_csu_fini() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4242096, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_40bab0___libc_csu_fini(%struct.State* nonnull @__mcsema_reg_state, i64 4242096, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @callback_sub_40ba40___libc_csu_init() #8 {
  %1 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %0
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %0
  %3 = phi i64 [ %1, %0 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4241984, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %__mcsema_verify_reg_state.exit
  %6 = add i64 %3, -8
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %7 = tail call %struct.Memory* @sub_40ba40___libc_csu_init(%struct.State* nonnull @__mcsema_reg_state, i64 4241984, %struct.Memory* null)
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %8
}

; Function Attrs: nobuiltin noinline
define i64 @main(i64, i64, i64) #6 {
  %4 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %3
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %3
  %6 = phi i64 [ %4, %3 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4208192, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %7 = load volatile i1, i1* @0, align 1
  br i1 %7, label %__mcsema_early_init.exit, label %8

; <label>:8:                                      ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %8, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  %9 = add i64 %6, -8
  store i64 %9, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = tail call %struct.Memory* @sub_403640_main(%struct.State* nonnull @__mcsema_reg_state, i64 4208192, %struct.Memory* null)
  store i64 %6, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %11 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %11
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610030___libc_start_main(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = inttoptr i64 %19 to i64*
  %27 = load i64, i64* %26
  store i64 %27, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %28 = tail call i64 @__libc_start_main(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25)
  store i64 %28, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610020_gettimeofday(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @gettimeofday(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_610098_strcat(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @strcat(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400c30_printf(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %13 = load i64, i64* %9, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i64, i64* %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21
  %23 = add i64 %19, 16
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24
  %26 = add i64 %19, 24
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27
  %29 = add i64 %19, 32
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30
  %32 = add i64 %19, 40
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33
  %35 = add i64 %19, 48
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  %38 = add i64 %19, 56
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39
  %41 = add i64 %19, 64
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42
  %44 = add i64 %19, 72
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45
  %47 = add i64 %19, 80
  %48 = inttoptr i64 %47 to i64*
  %49 = load i64, i64* %48
  %50 = inttoptr i64 %19 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %4, align 8
  store i64 %20, i64* %10, align 8
  %52 = tail call i64 @printf(i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %22, i64 %25, i64 %28, i64 %31, i64 %34, i64 %37, i64 %40, i64 %43, i64 %46, i64 %49)
  store i64 %52, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400c50_pow(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias returned) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %8, align 8
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  store i64 %13, i64* %4, align 8
  %14 = add i64 %11, 8
  store i64 %14, i64* %8, align 8
  %15 = tail call i64 @pow(i64 %9, i64 %10)
  store i64 %15, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @NumberOfOnes(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4229936, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408b30_NumberOfOnes(%struct.State* nonnull @__mcsema_reg_state, i64 4229936, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @SetOneBit32(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227600, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408210_SetOneBit32(%struct.State* nonnull @__mcsema_reg_state, i64 4227600, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @AdcCntlLog(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4224848, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407750_AdcCntlLog(%struct.State* nonnull @__mcsema_reg_state, i64 4224848, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @AdcFileOpen(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4220896, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4067e0_AdcFileOpen(%struct.State* nonnull @__mcsema_reg_state, i64 4220896, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ReadWholeInputData(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4211216, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_404210_ReadWholeInputData(%struct.State* nonnull @__mcsema_reg_state, i64 4211216, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @computeChecksum(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4240496, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b470_computeChecksum(%struct.State* nonnull @__mcsema_reg_state, i64 4240496, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @countTupleOnes(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4233040, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409750_countTupleOnes(%struct.State* nonnull @__mcsema_reg_state, i64 4233040, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @randlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4236832, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40a620_randlc(%struct.State* nonnull @__mcsema_reg_state, i64 4236832, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ViewSizesVerification(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225344, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407940_ViewSizesVerification(%struct.State* nonnull @__mcsema_reg_state, i64 4225344, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @AdcFileName(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4221008, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_406850_AdcFileName(%struct.State* nonnull @__mcsema_reg_state, i64 4221008, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @restore(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4232384, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4094c0_restore(%struct.State* nonnull @__mcsema_reg_state, i64 4232384, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @DeleteOneFile(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227920, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408350_DeleteOneFile(%struct.State* nonnull @__mcsema_reg_state, i64 4227920, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @getRegTupleFromBin32(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4231712, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409220_getRegTupleFromBin32(%struct.State* nonnull @__mcsema_reg_state, i64 4231712, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ShowADCPar(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4204896, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_402960_ShowADCPar(%struct.State* nonnull @__mcsema_reg_state, i64 4204896, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @initADCpar(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4198256, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400f70_initADCpar(%struct.State* nonnull @__mcsema_reg_state, i64 4198256, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @Mlo32(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227648, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408240_Mlo32(%struct.State* nonnull @__mcsema_reg_state, i64 4227648, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @TreeInsert(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4237760, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40a9c0_TreeInsert(%struct.State* nonnull @__mcsema_reg_state, i64 4237760, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @GetNextTuple(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4205184, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_402a80_GetNextTuple(%struct.State* nonnull @__mcsema_reg_state, i64 4205184, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_start(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4208000, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403580_timer_start(%struct.State* nonnull @__mcsema_reg_state, i64 4208000, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @SetOneBit(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227536, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4081d0_SetOneBit(%struct.State* nonnull @__mcsema_reg_state, i64 4227536, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @GetPrefixedParent(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4230608, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408dd0_GetPrefixedParent(%struct.State* nonnull @__mcsema_reg_state, i64 4230608, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @CreateEmptyTree(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4241024, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b680_CreateEmptyTree(%struct.State* nonnull @__mcsema_reg_state, i64 4241024, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @WriteViewToDisk(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4239760, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b190_WriteViewToDisk(%struct.State* nonnull @__mcsema_reg_state, i64 4239760, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_read(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4208160, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403620_timer_read(%struct.State* nonnull @__mcsema_reg_state, i64 4208160, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.init_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4197216, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400b60__init_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4197216, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @InitializeTree(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4241456, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b830_InitializeTree(%struct.State* nonnull @__mcsema_reg_state, i64 4241456, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @JobPoolInit(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4231216, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409030_JobPoolInit(%struct.State* nonnull @__mcsema_reg_state, i64 4231216, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @WriteOne32Tuple(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227952, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408370_WriteOne32Tuple(%struct.State* nonnull @__mcsema_reg_state, i64 4227952, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @wtime_(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4241856, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b9c0_wtime_(%struct.State* nonnull @__mcsema_reg_state, i64 4241856, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @setLeadingOnes32(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227840, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408300_setLeadingOnes32(%struct.State* nonnull @__mcsema_reg_state, i64 4227840, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @GenerateADC(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4206240, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_402ea0_GenerateADC(%struct.State* nonnull @__mcsema_reg_state, i64 4206240, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @swap4(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4198000, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400e70_swap4(%struct.State* nonnull @__mcsema_reg_state, i64 4198000, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @InitAdcViewCntl(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4223760, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407310_InitAdcViewCntl(%struct.State* nonnull @__mcsema_reg_state, i64 4223760, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @NewAdcViewCntl(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4221088, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4068a0_NewAdcViewCntl(%struct.State* nonnull @__mcsema_reg_state, i64 4221088, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @vszsort(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4232784, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409650_vszsort(%struct.State* nonnull @__mcsema_reg_state, i64 4232784, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ParseParFile(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4203392, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_402380_ParseParFile(%struct.State* nonnull @__mcsema_reg_state, i64 4203392, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @MultiFileProcJobs(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4233776, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409a30_MultiFileProcJobs(%struct.State* nonnull @__mcsema_reg_state, i64 4233776, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @restoreo(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4233152, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4097c0_restoreo(%struct.State* nonnull @__mcsema_reg_state, i64 4233152, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4235824, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40a230_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4235824, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @fake_fscanf(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4225136, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407870_fake_fscanf(%struct.State* nonnull @__mcsema_reg_state, i64 4225136, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @.term_proc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4242100, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40bab4__term_proc(%struct.State* nonnull @__mcsema_reg_state, i64 4242100, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @c_print_results(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4207024, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4031b0_c_print_results(%struct.State* nonnull @__mcsema_reg_state, i64 4207024, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @GetParent(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4228512, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4085a0_GetParent(%struct.State* nonnull @__mcsema_reg_state, i64 4228512, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @Verify(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4210928, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4040f0_Verify(%struct.State* nonnull @__mcsema_reg_state, i64 4210928, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @CloseAdcView(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4224224, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4074e0_CloseAdcView(%struct.State* nonnull @__mcsema_reg_state, i64 4224224, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @ListFirstPrimes(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4198688, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_401120_ListFirstPrimes(%struct.State* nonnull @__mcsema_reg_state, i64 4198688, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @GetRegTupleFromBin64(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4231552, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409180_GetRegTupleFromBin64(%struct.State* nonnull @__mcsema_reg_state, i64 4231552, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ComputeGivenGroupbys(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4226496, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_407dc0_ComputeGivenGroupbys(%struct.State* nonnull @__mcsema_reg_state, i64 4226496, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @DC(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4209344, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403ac0_DC(%struct.State* nonnull @__mcsema_reg_state, i64 4209344, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @timer_stop(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4208080, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4035d0_timer_stop(%struct.State* nonnull @__mcsema_reg_state, i64 4208080, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @vranlc(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4237168, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40a770_vranlc(%struct.State* nonnull @__mcsema_reg_state, i64 4237168, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ShowFactorization(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4198352, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400fd0_ShowFactorization(%struct.State* nonnull @__mcsema_reg_state, i64 4198352, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @mro32(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4227744, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4082a0_mro32(%struct.State* nonnull @__mcsema_reg_state, i64 4227744, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @swap8(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4198096, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_400ed0_swap8(%struct.State* nonnull @__mcsema_reg_state, i64 4198096, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @d32v(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4232160, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4093e0_d32v(%struct.State* nonnull @__mcsema_reg_state, i64 4232160, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @RunFormation(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4219200, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_406140_RunFormation(%struct.State* nonnull @__mcsema_reg_state, i64 4219200, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @JobPoolUpdate(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4228256, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4084a0_JobPoolUpdate(%struct.State* nonnull @__mcsema_reg_state, i64 4228256, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @timer_clear(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4207968, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_403560_timer_clear(%struct.State* nonnull @__mcsema_reg_state, i64 4207968, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @SelectToView(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4212128, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4045a0_SelectToView(%struct.State* nonnull @__mcsema_reg_state, i64 4212128, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @ExtendFactors(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4199904, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4015e0_ExtendFactors(%struct.State* nonnull @__mcsema_reg_state, i64 4199904, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @CalculateVeiwSizes(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4201728, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_401d00_CalculateVeiwSizes(%struct.State* nonnull @__mcsema_reg_state, i64 4201728, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @WriteViewToDiskCS(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4240080, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b2d0_WriteViewToDiskCS(%struct.State* nonnull @__mcsema_reg_state, i64 4240080, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @CreateBinTuple(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4232064, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409380_CreateBinTuple(%struct.State* nonnull @__mcsema_reg_state, i64 4232064, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @WriteOne64Tuple(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4231360, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4090c0_WriteOne64Tuple(%struct.State* nonnull @__mcsema_reg_state, i64 4231360, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @KeyComp(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4237600, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40a920_KeyComp(%struct.State* nonnull @__mcsema_reg_state, i64 4237600, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ReadSubChunk(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4220400, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4065f0_ReadSubChunk(%struct.State* nonnull @__mcsema_reg_state, i64 4220400, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @MultiWayMerge(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4215056, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_405110_MultiWayMerge(%struct.State* nonnull @__mcsema_reg_state, i64 4215056, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @GetSmallestParent(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4230048, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408ba0_GetSmallestParent(%struct.State* nonnull @__mcsema_reg_state, i64 4230048, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @GetRegTupleFromParent(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4231856, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4092b0_GetRegTupleFromParent(%struct.State* nonnull @__mcsema_reg_state, i64 4231856, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @SeekAndReadNextSubChunk(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4220224, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_406540_SeekAndReadNextSubChunk(%struct.State* nonnull @__mcsema_reg_state, i64 4220224, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @WriteADCPar(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4204512, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4027e0_WriteADCPar(%struct.State* nonnull @__mcsema_reg_state, i64 4204512, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @ComputeMemoryFittedView(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4211536, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_404350_ComputeMemoryFittedView(%struct.State* nonnull @__mcsema_reg_state, i64 4211536, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @GetLCM(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4199072, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4012a0_GetLCM(%struct.State* nonnull @__mcsema_reg_state, i64 4199072, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @CompareSizesByValue(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4201424, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_401bd0_CompareSizesByValue(%struct.State* nonnull @__mcsema_reg_state, i64 4201424, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @NumOfCombsFromNbyK(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4228144, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_408430_NumOfCombsFromNbyK(%struct.State* nonnull @__mcsema_reg_state, i64 4228144, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @PartitionCube(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4234960, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409ed0_PartitionCube(%struct.State* nonnull @__mcsema_reg_state, i64 4234960, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @SharedSortAggregate(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4212304, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_404650_SharedSortAggregate(%struct.State* nonnull @__mcsema_reg_state, i64 4212304, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @DestroyTree(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4241696, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b920_DestroyTree(%struct.State* nonnull @__mcsema_reg_state, i64 4241696, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @WriteChunkToDisk(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4240768, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_40b580_WriteChunkToDisk(%struct.State* nonnull @__mcsema_reg_state, i64 4240768, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @PrefixedAggregate(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4217504, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_405aa0_PrefixedAggregate(%struct.State* nonnull @__mcsema_reg_state, i64 4217504, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline nounwind
define i64 @onessort(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #8 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4233536, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_409940_onessort(%struct.State* nonnull @__mcsema_reg_state, i64 4233536, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nobuiltin noinline
define i64 @GetFactorization(i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #6 {
  %9 = load volatile i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %is_null.i, label %__mcsema_verify_reg_state.exit

is_null.i:                                        ; preds = %8
  store i64 ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  br label %__mcsema_verify_reg_state.exit

__mcsema_verify_reg_state.exit:                   ; preds = %is_null.i, %8
  %11 = phi i64 [ %9, %8 ], [ ptrtoint (i64* getelementptr inbounds ([131072 x i64], [131072 x i64]* @__mcsema_stack, i64 0, i64 131064) to i64), %is_null.i ]
  store i64 4200400, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 33, i32 0, i32 0), align 8
  store i64 ptrtoint ([512 x i64]* @__mcsema_tls to i64), i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 5, i32 7, i32 0, i32 0), align 8
  %12 = load volatile i1, i1* @0, align 1
  br i1 %12, label %__mcsema_early_init.exit, label %13

; <label>:13:                                     ; preds = %__mcsema_verify_reg_state.exit
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %13, %__mcsema_verify_reg_state.exit
  store i64 %0, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 11, i32 0, i32 0), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 9, i32 0, i32 0), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 7, i32 0, i32 0), align 8
  store i64 %3, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 5, i32 0, i32 0), align 8
  store i64 %4, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 17, i32 0, i32 0), align 8
  store i64 %5, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 19, i32 0, i32 0), align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %14
  %15 = add i64 %11, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %6, i64* %16
  %17 = add i64 %11, -24
  store i64 %17, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %18 = tail call %struct.Memory* @sub_4017d0_GetFactorization(%struct.State* nonnull @__mcsema_reg_state, i64 4200400, %struct.Memory* null)
  store i64 %11, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 13, i32 0, i32 0), align 8
  %19 = load i64, i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i64 0, i32 6, i32 1, i32 0, i32 0), align 8
  ret i64 %19
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #10 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  %3 = tail call i64 @callback_sub_40ba40___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #10 {
  %1 = tail call i64 @callback_sub_40bab0___libc_csu_fini()
  ret void
}

; Function Attrs: noinline optnone
define %struct.State* @__mcsema_debug_get_reg_state() #11 {
  ret %struct.State* @__mcsema_reg_state
}

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #12

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #13

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #13

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline }
attributes #4 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin noinline }
attributes #7 = { norecurse nounwind }
attributes #8 = { nobuiltin noinline nounwind }
attributes #9 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline optnone }
attributes #12 = { noreturn nounwind }
attributes #13 = { argmemonly nounwind }
attributes #14 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1238, !1239}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/antonio/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/antonio/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !75, !81, !84, !91, !95, !100, !102, !110, !114, !118, !130, !134, !138, !142, !146, !151, !155, !159, !163, !167, !175, !179, !183, !185, !189, !193, !197, !203, !207, !211, !213, !221, !225, !233, !235, !239, !243, !247, !251, !256, !261, !266, !267, !268, !269, !272, !273, !274, !275, !276, !277, !278, !334, !338, !354, !357, !362, !370, !375, !379, !383, !387, !391, !393, !395, !399, !405, !409, !415, !421, !423, !427, !431, !435, !439, !450, !452, !456, !460, !464, !466, !470, !474, !478, !480, !482, !486, !494, !498, !502, !506, !508, !514, !516, !522, !526, !530, !534, !538, !542, !546, !548, !550, !554, !558, !562, !564, !568, !572, !574, !576, !580, !584, !588, !592, !593, !594, !522, !450, !456, !464, !592, !593, !594, !595, !598, !601, !603, !605, !607, !609, !611, !613, !615, !617, !619, !621, !623, !625, !626, !627, !628, !630, !632, !634, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !657, !661, !666, !669, !671, !673, !675, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !698, !704, !709, !713, !715, !717, !719, !721, !728, !732, !736, !740, !744, !748, !753, !757, !759, !763, !769, !773, !778, !780, !782, !786, !790, !794, !796, !798, !800, !802, !806, !808, !810, !814, !818, !822, !826, !830, !832, !834, !838, !842, !846, !850, !852, !854, !858, !862, !863, !864, !865, !866, !867, !872, !874, !876, !880, !882, !884, !886, !888, !890, !892, !894, !899, !903, !905, !907, !912, !914, !916, !918, !920, !922, !924, !927, !929, !931, !935, !939, !941, !943, !945, !947, !949, !951, !953, !955, !957, !959, !963, !967, !969, !971, !973, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !1001, !1005, !1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1031, !1035, !1039, !1041, !1043, !1045, !1049, !1053, !1057, !1059, !1061, !1063, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1085, !1089, !1093, !1095, !1097, !1099, !1101, !1105, !1109, !1111, !1113, !1115, !1117, !1119, !1121, !1125, !1129, !1131, !1133, !1135, !1137, !1141, !1145, !1149, !1151, !1153, !1155, !1157, !1159, !1161, !1165, !1169, !1173, !1175, !1179, !1183, !1185, !1187, !1189, !1191, !1193, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236, !1195, !1199, !1201, !1204, !1209, !1211, !1217, !1219, !1221, !1223, !1228, !1230, !1236}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !73)
!72 = !DINamespace(name: "__gnu_debug", scope: null)
!73 = !DINamespace(name: "__debug", scope: !74)
!74 = !DINamespace(name: "std", scope: null)
!75 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !76)
!76 = !DISubprogram(name: "abs", scope: !77, file: !77, line: 837, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!77 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!78 = !DISubroutineType(types: !79)
!79 = !{!80, !80}
!80 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !82)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !77, line: 62, baseType: !83)
!83 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !85)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !77, line: 70, baseType: !86)
!86 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 66, size: 128, elements: !87, identifier: "_ZTS6ldiv_t")
!87 = !{!88, !90}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !86, file: !77, line: 68, baseType: !89, size: 64)
!89 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !86, file: !77, line: 69, baseType: !89, size: 64, offset: 64)
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !92)
!92 = !DISubprogram(name: "abort", scope: !77, file: !77, line: 588, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{null}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !96)
!96 = !DISubprogram(name: "atexit", scope: !77, file: !77, line: 592, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!80, !99}
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!100 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !101)
!101 = !DISubprogram(name: "at_quick_exit", scope: !77, file: !77, line: 597, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !103)
!103 = !DISubprogram(name: "atof", scope: !77, file: !77, line: 101, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DISubroutineType(types: !105)
!105 = !{!106, !107}
!106 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !109)
!109 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!110 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !111)
!111 = !DISubprogram(name: "atoi", scope: !77, file: !77, line: 104, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!112 = !DISubroutineType(types: !113)
!113 = !{!80, !107}
!114 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !115)
!115 = !DISubprogram(name: "atol", scope: !77, file: !77, line: 107, type: !116, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!116 = !DISubroutineType(types: !117)
!117 = !{!89, !107}
!118 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !119)
!119 = !DISubprogram(name: "bsearch", scope: !77, file: !77, line: 817, type: !120, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!120 = !DISubroutineType(types: !121)
!121 = !{!122, !68, !68, !123, !123, !126}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !124, line: 62, baseType: !125)
!124 = !DIFile(filename: "/home/antonio/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!125 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !77, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!80, !68, !68}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !131)
!131 = !DISubprogram(name: "calloc", scope: !77, file: !77, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!122, !123, !123}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !135)
!135 = !DISubprogram(name: "div", scope: !77, file: !77, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!82, !80, !80}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !139)
!139 = !DISubprogram(name: "exit", scope: !77, file: !77, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !80}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !143)
!143 = !DISubprogram(name: "free", scope: !77, file: !77, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !122}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !147)
!147 = !DISubprogram(name: "getenv", scope: !77, file: !77, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!150, !107}
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !152)
!152 = !DISubprogram(name: "labs", scope: !77, file: !77, line: 838, type: !153, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!153 = !DISubroutineType(types: !154)
!154 = !{!89, !89}
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !156)
!156 = !DISubprogram(name: "ldiv", scope: !77, file: !77, line: 851, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!85, !89, !89}
!159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !160)
!160 = !DISubprogram(name: "malloc", scope: !77, file: !77, line: 539, type: !161, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!161 = !DISubroutineType(types: !162)
!162 = !{!122, !123}
!163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !164)
!164 = !DISubprogram(name: "mblen", scope: !77, file: !77, line: 919, type: !165, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!165 = !DISubroutineType(types: !166)
!166 = !{!80, !107, !123}
!167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !168)
!168 = !DISubprogram(name: "mbstowcs", scope: !77, file: !77, line: 930, type: !169, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!169 = !DISubroutineType(types: !170)
!170 = !{!123, !171, !174, !123}
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !172)
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!173 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!174 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !107)
!175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !176)
!176 = !DISubprogram(name: "mbtowc", scope: !77, file: !77, line: 922, type: !177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!177 = !DISubroutineType(types: !178)
!178 = !{!80, !171, !174, !123}
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !180)
!180 = !DISubprogram(name: "qsort", scope: !77, file: !77, line: 827, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !122, !123, !123, !126}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !184)
!184 = !DISubprogram(name: "quick_exit", scope: !77, file: !77, line: 620, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !186)
!186 = !DISubprogram(name: "rand", scope: !77, file: !77, line: 453, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!187 = !DISubroutineType(types: !188)
!188 = !{!80}
!189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !190)
!190 = !DISubprogram(name: "realloc", scope: !77, file: !77, line: 549, type: !191, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!191 = !DISubroutineType(types: !192)
!192 = !{!122, !122, !123}
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !194)
!194 = !DISubprogram(name: "srand", scope: !77, file: !77, line: 455, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !10}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !198)
!198 = !DISubprogram(name: "strtod", scope: !77, file: !77, line: 117, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!106, !174, !201}
!201 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !202)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !204)
!204 = !DISubprogram(name: "strtol", scope: !77, file: !77, line: 176, type: !205, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!205 = !DISubroutineType(types: !206)
!206 = !{!89, !174, !201, !80}
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !208)
!208 = !DISubprogram(name: "strtoul", scope: !77, file: !77, line: 180, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!125, !174, !201, !80}
!211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !212)
!212 = !DISubprogram(name: "system", scope: !77, file: !77, line: 781, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !214)
!214 = !DISubprogram(name: "wcstombs", scope: !77, file: !77, line: 933, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!123, !217, !218, !123}
!217 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !150)
!218 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !219)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64)
!220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !173)
!221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !222)
!222 = !DISubprogram(name: "wctomb", scope: !77, file: !77, line: 926, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!223 = !DISubroutineType(types: !224)
!224 = !{!80, !150, !173}
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !227)
!226 = !DINamespace(name: "__gnu_cxx", scope: null)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !77, line: 80, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !77, line: 76, size: 128, elements: !229, identifier: "_ZTS7lldiv_t")
!229 = !{!230, !232}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !228, file: !77, line: 78, baseType: !231, size: 64)
!231 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !228, file: !77, line: 79, baseType: !231, size: 64, offset: 64)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !234)
!234 = !DISubprogram(name: "_Exit", scope: !77, file: !77, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !236)
!236 = !DISubprogram(name: "llabs", scope: !77, file: !77, line: 841, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!231, !231}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !240)
!240 = !DISubprogram(name: "lldiv", scope: !77, file: !77, line: 855, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!227, !231, !231}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !244)
!244 = !DISubprogram(name: "atoll", scope: !77, file: !77, line: 112, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!231, !107}
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !248)
!248 = !DISubprogram(name: "strtoll", scope: !77, file: !77, line: 200, type: !249, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!249 = !DISubroutineType(types: !250)
!250 = !{!231, !174, !201, !80}
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !252)
!252 = !DISubprogram(name: "strtoull", scope: !77, file: !77, line: 205, type: !253, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!253 = !DISubroutineType(types: !254)
!254 = !{!255, !174, !201, !80}
!255 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !257)
!257 = !DISubprogram(name: "strtof", scope: !77, file: !77, line: 123, type: !258, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!258 = !DISubroutineType(types: !259)
!259 = !{!260, !174, !201}
!260 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !262)
!262 = !DISubprogram(name: "strtold", scope: !77, file: !77, line: 126, type: !263, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!263 = !DISubroutineType(types: !264)
!264 = !{!265, !174, !201}
!265 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !227)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !234)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !236)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !270)
!270 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !226, file: !271, line: 213, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!271 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/cstdlib", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !240)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !244)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !257)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !252)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !262)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !279)
!279 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !281, file: !280, line: 79, size: 64, elements: !282, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!280 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/bits/exception_ptr.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!281 = !DINamespace(name: "__exception_ptr", scope: !74)
!282 = !{!283, !284, !288, !291, !292, !297, !298, !302, !308, !312, !316, !319, !320, !323, !327}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !279, file: !280, line: 81, baseType: !122, size: 64)
!284 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 83, type: !285, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!285 = !DISubroutineType(types: !286)
!286 = !{null, !287, !122}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!288 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !279, file: !280, line: 85, type: !289, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!289 = !DISubroutineType(types: !290)
!290 = !{null, !287}
!291 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !279, file: !280, line: 86, type: !289, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!292 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !279, file: !280, line: 88, type: !293, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!293 = !DISubroutineType(types: !294)
!294 = !{!122, !295}
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!296 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !279)
!297 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 96, type: !289, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!298 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 98, type: !299, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!299 = !DISubroutineType(types: !300)
!300 = !{null, !287, !301}
!301 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !296, size: 64)
!302 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 101, type: !303, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!303 = !DISubroutineType(types: !304)
!304 = !{null, !287, !305}
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !74, file: !306, line: 235, baseType: !307)
!306 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/x86_64-linux-gnu/c++/7.3.0/bits/c++config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!307 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!308 = !DISubprogram(name: "exception_ptr", scope: !279, file: !280, line: 105, type: !309, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!309 = !DISubroutineType(types: !310)
!310 = !{null, !287, !311}
!311 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !279, size: 64)
!312 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !279, file: !280, line: 118, type: !313, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!313 = !DISubroutineType(types: !314)
!314 = !{!315, !287, !301}
!315 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !279, size: 64)
!316 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !279, file: !280, line: 122, type: !317, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!317 = !DISubroutineType(types: !318)
!318 = !{!315, !287, !311}
!319 = !DISubprogram(name: "~exception_ptr", scope: !279, file: !280, line: 129, type: !289, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!320 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !279, file: !280, line: 132, type: !321, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !287, !315}
!323 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !279, file: !280, line: 144, type: !324, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!324 = !DISubroutineType(types: !325)
!325 = !{!326, !295}
!326 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!327 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !279, file: !280, line: 153, type: !328, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!328 = !DISubroutineType(types: !329)
!329 = !{!330, !295}
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !74, file: !333, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!333 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/typeinfo", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !281, entity: !335)
!335 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !74, file: !280, line: 69, type: !336, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!336 = !DISubroutineType(types: !337)
!337 = !{null, !279}
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !339)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !340, line: 6, baseType: !341)
!340 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !342, line: 21, baseType: !343)
!342 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!343 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !342, line: 13, size: 64, elements: !344, identifier: "_ZTS11__mbstate_t")
!344 = !{!345, !346}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !343, file: !342, line: 15, baseType: !80, size: 32)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !343, file: !342, line: 20, baseType: !347, size: 32, offset: 32)
!347 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !343, file: !342, line: 16, size: 32, elements: !348, identifier: "_ZTSN11__mbstate_tUt_E")
!348 = !{!349, !350}
!349 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !347, file: !342, line: 18, baseType: !10, size: 32)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !347, file: !342, line: 19, baseType: !351, size: 32)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !109, size: 32, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 4)
!354 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !355)
!355 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !356, line: 20, baseType: !10)
!356 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!357 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !358)
!358 = !DISubprogram(name: "btowc", scope: !359, file: !359, line: 284, type: !360, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!359 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!360 = !DISubroutineType(types: !361)
!361 = !{!355, !80}
!362 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !363)
!363 = !DISubprogram(name: "fgetwc", scope: !359, file: !359, line: 727, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!364 = !DISubroutineType(types: !365)
!365 = !{!355, !366}
!366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !367, size: 64)
!367 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !368, line: 5, baseType: !369)
!368 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !368, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!370 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !371)
!371 = !DISubprogram(name: "fgetws", scope: !359, file: !359, line: 756, type: !372, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!372 = !DISubroutineType(types: !373)
!373 = !{!172, !171, !80, !374}
!374 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !366)
!375 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !376)
!376 = !DISubprogram(name: "fputwc", scope: !359, file: !359, line: 741, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!377 = !DISubroutineType(types: !378)
!378 = !{!355, !173, !366}
!379 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !380)
!380 = !DISubprogram(name: "fputws", scope: !359, file: !359, line: 763, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!381 = !DISubroutineType(types: !382)
!382 = !{!80, !218, !374}
!383 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !384)
!384 = !DISubprogram(name: "fwide", scope: !359, file: !359, line: 573, type: !385, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!385 = !DISubroutineType(types: !386)
!386 = !{!80, !366, !80}
!387 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !388)
!388 = !DISubprogram(name: "fwprintf", scope: !359, file: !359, line: 580, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!389 = !DISubroutineType(types: !390)
!390 = !{!80, !374, !218, null}
!391 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !392)
!392 = !DISubprogram(name: "fwscanf", scope: !359, file: !359, line: 621, type: !389, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!393 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !394)
!394 = !DISubprogram(name: "getwc", scope: !359, file: !359, line: 728, type: !364, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!395 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !396)
!396 = !DISubprogram(name: "getwchar", scope: !359, file: !359, line: 734, type: !397, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!397 = !DISubroutineType(types: !398)
!398 = !{!355}
!399 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !400)
!400 = !DISubprogram(name: "mbrlen", scope: !359, file: !359, line: 307, type: !401, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!401 = !DISubroutineType(types: !402)
!402 = !{!123, !174, !123, !403}
!403 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !404)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!405 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !406)
!406 = !DISubprogram(name: "mbrtowc", scope: !359, file: !359, line: 296, type: !407, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!407 = !DISubroutineType(types: !408)
!408 = !{!123, !171, !174, !123, !403}
!409 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !410)
!410 = !DISubprogram(name: "mbsinit", scope: !359, file: !359, line: 292, type: !411, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!411 = !DISubroutineType(types: !412)
!412 = !{!80, !413}
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !339)
!415 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !416)
!416 = !DISubprogram(name: "mbsrtowcs", scope: !359, file: !359, line: 337, type: !417, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!417 = !DISubroutineType(types: !418)
!418 = !{!123, !171, !419, !123, !403}
!419 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !420)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!421 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !422)
!422 = !DISubprogram(name: "putwc", scope: !359, file: !359, line: 742, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!423 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !424)
!424 = !DISubprogram(name: "putwchar", scope: !359, file: !359, line: 748, type: !425, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!425 = !DISubroutineType(types: !426)
!426 = !{!355, !173}
!427 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !428)
!428 = !DISubprogram(name: "swprintf", scope: !359, file: !359, line: 590, type: !429, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!429 = !DISubroutineType(types: !430)
!430 = !{!80, !171, !123, !218, null}
!431 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !432)
!432 = !DISubprogram(name: "swscanf", scope: !359, file: !359, line: 631, type: !433, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!433 = !DISubroutineType(types: !434)
!434 = !{!80, !218, !218, null}
!435 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !436)
!436 = !DISubprogram(name: "ungetwc", scope: !359, file: !359, line: 771, type: !437, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!437 = !DISubroutineType(types: !438)
!438 = !{!355, !355, !366}
!439 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !440)
!440 = !DISubprogram(name: "vfwprintf", scope: !359, file: !359, line: 598, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!441 = !DISubroutineType(types: !442)
!442 = !{!80, !374, !218, !443}
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !445, identifier: "_ZTS13__va_list_tag")
!445 = !{!446, !447, !448, !449}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !444, file: !2, baseType: !10, size: 32)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !444, file: !2, baseType: !10, size: 32, offset: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 64)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !444, file: !2, baseType: !122, size: 64, offset: 128)
!450 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !451)
!451 = !DISubprogram(name: "vfwscanf", scope: !359, file: !359, line: 673, type: !441, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!452 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !453)
!453 = !DISubprogram(name: "vswprintf", scope: !359, file: !359, line: 611, type: !454, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!454 = !DISubroutineType(types: !455)
!455 = !{!80, !171, !123, !218, !443}
!456 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !457)
!457 = !DISubprogram(name: "vswscanf", scope: !359, file: !359, line: 685, type: !458, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!458 = !DISubroutineType(types: !459)
!459 = !{!80, !218, !218, !443}
!460 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !461)
!461 = !DISubprogram(name: "vwprintf", scope: !359, file: !359, line: 606, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!462 = !DISubroutineType(types: !463)
!463 = !{!80, !218, !443}
!464 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !465)
!465 = !DISubprogram(name: "vwscanf", scope: !359, file: !359, line: 681, type: !462, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!466 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !467)
!467 = !DISubprogram(name: "wcrtomb", scope: !359, file: !359, line: 301, type: !468, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!468 = !DISubroutineType(types: !469)
!469 = !{!123, !217, !173, !403}
!470 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !471)
!471 = !DISubprogram(name: "wcscat", scope: !359, file: !359, line: 97, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!472 = !DISubroutineType(types: !473)
!473 = !{!172, !171, !218}
!474 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !475)
!475 = !DISubprogram(name: "wcscmp", scope: !359, file: !359, line: 106, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!476 = !DISubroutineType(types: !477)
!477 = !{!80, !219, !219}
!478 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !479)
!479 = !DISubprogram(name: "wcscoll", scope: !359, file: !359, line: 131, type: !476, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!480 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !481)
!481 = !DISubprogram(name: "wcscpy", scope: !359, file: !359, line: 87, type: !472, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!482 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !483)
!483 = !DISubprogram(name: "wcscspn", scope: !359, file: !359, line: 187, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!484 = !DISubroutineType(types: !485)
!485 = !{!123, !219, !219}
!486 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !487)
!487 = !DISubprogram(name: "wcsftime", scope: !359, file: !359, line: 835, type: !488, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!488 = !DISubroutineType(types: !489)
!489 = !{!123, !171, !123, !218, !490}
!490 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !491)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !493)
!493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !359, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!494 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !495)
!495 = !DISubprogram(name: "wcslen", scope: !359, file: !359, line: 222, type: !496, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!496 = !DISubroutineType(types: !497)
!497 = !{!123, !219}
!498 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !499)
!499 = !DISubprogram(name: "wcsncat", scope: !359, file: !359, line: 101, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!500 = !DISubroutineType(types: !501)
!501 = !{!172, !171, !218, !123}
!502 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !503)
!503 = !DISubprogram(name: "wcsncmp", scope: !359, file: !359, line: 109, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!504 = !DISubroutineType(types: !505)
!505 = !{!80, !219, !219, !123}
!506 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !507)
!507 = !DISubprogram(name: "wcsncpy", scope: !359, file: !359, line: 92, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!508 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !509)
!509 = !DISubprogram(name: "wcsrtombs", scope: !359, file: !359, line: 343, type: !510, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!510 = !DISubroutineType(types: !511)
!511 = !{!123, !217, !512, !123, !403}
!512 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !513)
!513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!514 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !515)
!515 = !DISubprogram(name: "wcsspn", scope: !359, file: !359, line: 191, type: !484, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!516 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !517)
!517 = !DISubprogram(name: "wcstod", scope: !359, file: !359, line: 377, type: !518, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!518 = !DISubroutineType(types: !519)
!519 = !{!106, !218, !520}
!520 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !521)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!522 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !523)
!523 = !DISubprogram(name: "wcstof", scope: !359, file: !359, line: 382, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!524 = !DISubroutineType(types: !525)
!525 = !{!260, !218, !520}
!526 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !527)
!527 = !DISubprogram(name: "wcstok", scope: !359, file: !359, line: 217, type: !528, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!528 = !DISubroutineType(types: !529)
!529 = !{!172, !171, !218, !520}
!530 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !531)
!531 = !DISubprogram(name: "wcstol", scope: !359, file: !359, line: 428, type: !532, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!532 = !DISubroutineType(types: !533)
!533 = !{!89, !218, !520, !80}
!534 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !535)
!535 = !DISubprogram(name: "wcstoul", scope: !359, file: !359, line: 433, type: !536, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!536 = !DISubroutineType(types: !537)
!537 = !{!125, !218, !520, !80}
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !539)
!539 = !DISubprogram(name: "wcsxfrm", scope: !359, file: !359, line: 135, type: !540, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!540 = !DISubroutineType(types: !541)
!541 = !{!123, !171, !218, !123}
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !543)
!543 = !DISubprogram(name: "wctob", scope: !359, file: !359, line: 288, type: !544, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!544 = !DISubroutineType(types: !545)
!545 = !{!80, !355}
!546 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !547)
!547 = !DISubprogram(name: "wmemcmp", scope: !359, file: !359, line: 258, type: !504, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!548 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !549)
!549 = !DISubprogram(name: "wmemcpy", scope: !359, file: !359, line: 262, type: !500, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !551)
!551 = !DISubprogram(name: "wmemmove", scope: !359, file: !359, line: 267, type: !552, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!552 = !DISubroutineType(types: !553)
!553 = !{!172, !172, !219, !123}
!554 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !555)
!555 = !DISubprogram(name: "wmemset", scope: !359, file: !359, line: 271, type: !556, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!556 = !DISubroutineType(types: !557)
!557 = !{!172, !172, !173, !123}
!558 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !559)
!559 = !DISubprogram(name: "wprintf", scope: !359, file: !359, line: 587, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!560 = !DISubroutineType(types: !561)
!561 = !{!80, !218, null}
!562 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !563)
!563 = !DISubprogram(name: "wscanf", scope: !359, file: !359, line: 628, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!564 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !565)
!565 = !DISubprogram(name: "wcschr", scope: !359, file: !359, line: 164, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!566 = !DISubroutineType(types: !567)
!567 = !{!172, !219, !173}
!568 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !569)
!569 = !DISubprogram(name: "wcspbrk", scope: !359, file: !359, line: 201, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!570 = !DISubroutineType(types: !571)
!571 = !{!172, !219, !219}
!572 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !573)
!573 = !DISubprogram(name: "wcsrchr", scope: !359, file: !359, line: 174, type: !566, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!574 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !575)
!575 = !DISubprogram(name: "wcsstr", scope: !359, file: !359, line: 212, type: !570, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!576 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !577)
!577 = !DISubprogram(name: "wmemchr", scope: !359, file: !359, line: 253, type: !578, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!578 = !DISubroutineType(types: !579)
!579 = !{!172, !219, !173, !123}
!580 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !581)
!581 = !DISubprogram(name: "wcstold", scope: !359, file: !359, line: 384, type: !582, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!582 = !DISubroutineType(types: !583)
!583 = !{!265, !218, !520}
!584 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !585)
!585 = !DISubprogram(name: "wcstoll", scope: !359, file: !359, line: 441, type: !586, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!586 = !DISubroutineType(types: !587)
!587 = !{!231, !218, !520, !80}
!588 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !589)
!589 = !DISubprogram(name: "wcstoull", scope: !359, file: !359, line: 448, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!590 = !DISubroutineType(types: !591)
!591 = !{!255, !218, !520, !80}
!592 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !581)
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !585)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !589)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !596)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !597)
!597 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !599)
!599 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !600)
!600 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !602)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !80)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !604)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !89)
!605 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !606)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !596)
!607 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !608)
!608 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !599)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !610)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !602)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !612)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !604)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !614)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !596)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !616)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !599)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !618)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !602)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !620)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !604)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !622)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !89)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !624)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !604)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !62)
!626 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !28)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !8)
!628 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !629)
!629 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !125)
!630 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !631)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!632 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !633)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !635)
!635 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !637)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !629)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !639)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !641)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !643)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !645)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !629)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !647)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !125)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !649)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !629)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !651)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !74, file: !306, line: 231, baseType: !125)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !653)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !74, file: !306, line: 232, baseType: !89)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !656, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!656 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!657 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !658)
!658 = !DISubprogram(name: "setlocale", scope: !656, file: !656, line: 122, type: !659, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!659 = !DISubroutineType(types: !660)
!660 = !{!150, !80, !107}
!661 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !662)
!662 = !DISubprogram(name: "localeconv", scope: !656, file: !656, line: 125, type: !663, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!663 = !DISubroutineType(types: !664)
!664 = !{!665}
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!666 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !667)
!667 = !DISubprogram(name: "isalnum", scope: !668, file: !668, line: 108, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!668 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !670)
!670 = !DISubprogram(name: "isalpha", scope: !668, file: !668, line: 109, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !672)
!672 = !DISubprogram(name: "iscntrl", scope: !668, file: !668, line: 110, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!673 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !674)
!674 = !DISubprogram(name: "isdigit", scope: !668, file: !668, line: 111, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!675 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !676)
!676 = !DISubprogram(name: "isgraph", scope: !668, file: !668, line: 113, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !678)
!678 = !DISubprogram(name: "islower", scope: !668, file: !668, line: 112, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !680)
!680 = !DISubprogram(name: "isprint", scope: !668, file: !668, line: 114, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !682)
!682 = !DISubprogram(name: "ispunct", scope: !668, file: !668, line: 115, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !684)
!684 = !DISubprogram(name: "isspace", scope: !668, file: !668, line: 116, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !686)
!686 = !DISubprogram(name: "isupper", scope: !668, file: !668, line: 117, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !688)
!688 = !DISubprogram(name: "isxdigit", scope: !668, file: !668, line: 118, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !690)
!690 = !DISubprogram(name: "tolower", scope: !668, file: !668, line: 122, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !692)
!692 = !DISubprogram(name: "toupper", scope: !668, file: !668, line: 125, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !694)
!694 = !DISubprogram(name: "isblank", scope: !668, file: !668, line: 130, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !696)
!696 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !697, line: 7, baseType: !369)
!697 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!698 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !699)
!699 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !700, line: 78, baseType: !701)
!700 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !702, line: 30, baseType: !703)
!702 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !702, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!704 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !705)
!705 = !DISubprogram(name: "clearerr", scope: !700, file: !700, line: 757, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!706 = !DISubroutineType(types: !707)
!707 = !{null, !708}
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!709 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !710)
!710 = !DISubprogram(name: "fclose", scope: !700, file: !700, line: 199, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!711 = !DISubroutineType(types: !712)
!712 = !{!80, !708}
!713 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !714)
!714 = !DISubprogram(name: "feof", scope: !700, file: !700, line: 759, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!715 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !716)
!716 = !DISubprogram(name: "ferror", scope: !700, file: !700, line: 761, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !718)
!718 = !DISubprogram(name: "fflush", scope: !700, file: !700, line: 204, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !720)
!720 = !DISubprogram(name: "fgetc", scope: !700, file: !700, line: 477, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !722)
!722 = !DISubprogram(name: "fgetpos", scope: !700, file: !700, line: 731, type: !723, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DISubroutineType(types: !724)
!724 = !{!80, !725, !726}
!725 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !708)
!726 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !727)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!728 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !729)
!729 = !DISubprogram(name: "fgets", scope: !700, file: !700, line: 564, type: !730, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!730 = !DISubroutineType(types: !731)
!731 = !{!150, !217, !80, !725}
!732 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !733)
!733 = !DISubprogram(name: "fopen", scope: !700, file: !700, line: 232, type: !734, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!734 = !DISubroutineType(types: !735)
!735 = !{!708, !174, !174}
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !737)
!737 = !DISubprogram(name: "fprintf", scope: !700, file: !700, line: 312, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!80, !725, !174, null}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !741)
!741 = !DISubprogram(name: "fputc", scope: !700, file: !700, line: 517, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!80, !80, !708}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !745)
!745 = !DISubprogram(name: "fputs", scope: !700, file: !700, line: 626, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!80, !174, !725}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !749)
!749 = !DISubprogram(name: "fread", scope: !700, file: !700, line: 646, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!123, !752, !123, !123, !725}
!752 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !122)
!753 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !754)
!754 = !DISubprogram(name: "freopen", scope: !700, file: !700, line: 238, type: !755, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!755 = !DISubroutineType(types: !756)
!756 = !{!708, !174, !174, !725}
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !758)
!758 = !DISubprogram(name: "fscanf", scope: !700, file: !700, line: 377, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!759 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !760)
!760 = !DISubprogram(name: "fseek", scope: !700, file: !700, line: 684, type: !761, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!761 = !DISubroutineType(types: !762)
!762 = !{!80, !708, !89, !80}
!763 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !764)
!764 = !DISubprogram(name: "fsetpos", scope: !700, file: !700, line: 736, type: !765, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!765 = !DISubroutineType(types: !766)
!766 = !{!80, !708, !767}
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !699)
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !770)
!770 = !DISubprogram(name: "ftell", scope: !700, file: !700, line: 689, type: !771, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!771 = !DISubroutineType(types: !772)
!772 = !{!89, !708}
!773 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !774)
!774 = !DISubprogram(name: "fwrite", scope: !700, file: !700, line: 652, type: !775, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!775 = !DISubroutineType(types: !776)
!776 = !{!123, !777, !123, !123, !725}
!777 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!778 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !779)
!779 = !DISubprogram(name: "getc", scope: !700, file: !700, line: 478, type: !711, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!780 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !781)
!781 = !DISubprogram(name: "getchar", scope: !700, file: !700, line: 484, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!782 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !783)
!783 = !DISubprogram(name: "gets", scope: !700, file: !700, line: 577, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!784 = !DISubroutineType(types: !785)
!785 = !{!150, !150}
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !787)
!787 = !DISubprogram(name: "perror", scope: !700, file: !700, line: 775, type: !788, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DISubroutineType(types: !789)
!789 = !{null, !107}
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !791)
!791 = !DISubprogram(name: "printf", scope: !700, file: !700, line: 318, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!80, !174, null}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !795)
!795 = !DISubprogram(name: "putc", scope: !700, file: !700, line: 518, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !797)
!797 = !DISubprogram(name: "putchar", scope: !700, file: !700, line: 524, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !799)
!799 = !DISubprogram(name: "puts", scope: !700, file: !700, line: 632, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !801)
!801 = !DISubprogram(name: "remove", scope: !700, file: !700, line: 144, type: !112, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !803)
!803 = !DISubprogram(name: "rename", scope: !700, file: !700, line: 146, type: !804, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DISubroutineType(types: !805)
!805 = !{!80, !107, !107}
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !807)
!807 = !DISubprogram(name: "rewind", scope: !700, file: !700, line: 694, type: !706, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !809)
!809 = !DISubprogram(name: "scanf", scope: !700, file: !700, line: 383, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !811)
!811 = !DISubprogram(name: "setbuf", scope: !700, file: !700, line: 290, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{null, !725, !217}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !815)
!815 = !DISubprogram(name: "setvbuf", scope: !700, file: !700, line: 294, type: !816, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DISubroutineType(types: !817)
!817 = !{!80, !725, !217, !80, !123}
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !819)
!819 = !DISubprogram(name: "sprintf", scope: !700, file: !700, line: 320, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{!80, !217, !174, null}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !823)
!823 = !DISubprogram(name: "sscanf", scope: !700, file: !700, line: 385, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!80, !174, !174, null}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !827)
!827 = !DISubprogram(name: "tmpfile", scope: !700, file: !700, line: 159, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!708}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !831)
!831 = !DISubprogram(name: "tmpnam", scope: !700, file: !700, line: 173, type: !784, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !833)
!833 = !DISubprogram(name: "ungetc", scope: !700, file: !700, line: 639, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !835)
!835 = !DISubprogram(name: "vfprintf", scope: !700, file: !700, line: 327, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!80, !725, !174, !443}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !839)
!839 = !DISubprogram(name: "vprintf", scope: !700, file: !700, line: 333, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DISubroutineType(types: !841)
!841 = !{!80, !174, !443}
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !843)
!843 = !DISubprogram(name: "vsprintf", scope: !700, file: !700, line: 335, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!80, !217, !174, !443}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !847)
!847 = !DISubprogram(name: "snprintf", scope: !700, file: !700, line: 340, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!80, !217, !123, !174, null}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !851)
!851 = !DISubprogram(name: "vfscanf", scope: !700, file: !700, line: 420, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !853)
!853 = !DISubprogram(name: "vscanf", scope: !700, file: !700, line: 428, type: !840, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !855)
!855 = !DISubprogram(name: "vsnprintf", scope: !700, file: !700, line: 344, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!80, !217, !123, !174, !443}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !226, entity: !859)
!859 = !DISubprogram(name: "vsscanf", scope: !700, file: !700, line: 432, type: !860, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DISubroutineType(types: !861)
!861 = !{!80, !174, !174, !443}
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !847)
!863 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !851)
!864 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !853)
!865 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !855)
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !859)
!867 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !868)
!868 = !DISubprogram(name: "acos", scope: !869, file: !869, line: 53, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!869 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!870 = !DISubroutineType(types: !871)
!871 = !{!106, !106}
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !873)
!873 = !DISubprogram(name: "asin", scope: !869, file: !869, line: 55, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !875)
!875 = !DISubprogram(name: "atan", scope: !869, file: !869, line: 57, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!876 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !877)
!877 = !DISubprogram(name: "atan2", scope: !869, file: !869, line: 59, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!878 = !DISubroutineType(types: !879)
!879 = !{!106, !106, !106}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !881)
!881 = !DISubprogram(name: "ceil", scope: !869, file: !869, line: 159, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !883)
!883 = !DISubprogram(name: "cos", scope: !869, file: !869, line: 62, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !885)
!885 = !DISubprogram(name: "cosh", scope: !869, file: !869, line: 71, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !887)
!887 = !DISubprogram(name: "exp", scope: !869, file: !869, line: 95, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !889)
!889 = !DISubprogram(name: "fabs", scope: !869, file: !869, line: 162, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !891)
!891 = !DISubprogram(name: "floor", scope: !869, file: !869, line: 165, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !893)
!893 = !DISubprogram(name: "fmod", scope: !869, file: !869, line: 168, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !895)
!895 = !DISubprogram(name: "frexp", scope: !869, file: !869, line: 98, type: !896, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DISubroutineType(types: !897)
!897 = !{!106, !106, !898}
!898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!899 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !900)
!900 = !DISubprogram(name: "ldexp", scope: !869, file: !869, line: 101, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!901 = !DISubroutineType(types: !902)
!902 = !{!106, !106, !80}
!903 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !904)
!904 = !DISubprogram(name: "log", scope: !869, file: !869, line: 104, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!905 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !906)
!906 = !DISubprogram(name: "log10", scope: !869, file: !869, line: 107, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !908)
!908 = !DISubprogram(name: "modf", scope: !869, file: !869, line: 110, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!106, !106, !911}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!912 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !913)
!913 = !DISubprogram(name: "pow", scope: !869, file: !869, line: 140, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!914 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !915)
!915 = !DISubprogram(name: "sin", scope: !869, file: !869, line: 64, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!916 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !917)
!917 = !DISubprogram(name: "sinh", scope: !869, file: !869, line: 73, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!918 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !919)
!919 = !DISubprogram(name: "sqrt", scope: !869, file: !869, line: 143, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !921)
!921 = !DISubprogram(name: "tan", scope: !869, file: !869, line: 66, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !923)
!923 = !DISubprogram(name: "tanh", scope: !869, file: !869, line: 75, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !925)
!925 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !926, line: 150, baseType: !106)
!926 = !DIFile(filename: "/usr/include/math.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!927 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !928)
!928 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !926, line: 149, baseType: !260)
!929 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !930)
!930 = !DISubprogram(name: "acosh", scope: !869, file: !869, line: 85, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!931 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !932)
!932 = !DISubprogram(name: "acoshf", scope: !869, file: !869, line: 85, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!933 = !DISubroutineType(types: !934)
!934 = !{!260, !260}
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !936)
!936 = !DISubprogram(name: "acoshl", scope: !869, file: !869, line: 85, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!937 = !DISubroutineType(types: !938)
!938 = !{!265, !265}
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !940)
!940 = !DISubprogram(name: "asinh", scope: !869, file: !869, line: 87, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !942)
!942 = !DISubprogram(name: "asinhf", scope: !869, file: !869, line: 87, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !944)
!944 = !DISubprogram(name: "asinhl", scope: !869, file: !869, line: 87, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !946)
!946 = !DISubprogram(name: "atanh", scope: !869, file: !869, line: 89, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !948)
!948 = !DISubprogram(name: "atanhf", scope: !869, file: !869, line: 89, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !950)
!950 = !DISubprogram(name: "atanhl", scope: !869, file: !869, line: 89, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !952)
!952 = !DISubprogram(name: "cbrt", scope: !869, file: !869, line: 152, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !954)
!954 = !DISubprogram(name: "cbrtf", scope: !869, file: !869, line: 152, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !956)
!956 = !DISubprogram(name: "cbrtl", scope: !869, file: !869, line: 152, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !958)
!958 = !DISubprogram(name: "copysign", scope: !869, file: !869, line: 196, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !960)
!960 = !DISubprogram(name: "copysignf", scope: !869, file: !869, line: 196, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DISubroutineType(types: !962)
!962 = !{!260, !260, !260}
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !964)
!964 = !DISubprogram(name: "copysignl", scope: !869, file: !869, line: 196, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DISubroutineType(types: !966)
!966 = !{!265, !265, !265}
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !968)
!968 = !DISubprogram(name: "erf", scope: !869, file: !869, line: 228, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !970)
!970 = !DISubprogram(name: "erff", scope: !869, file: !869, line: 228, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !972)
!972 = !DISubprogram(name: "erfl", scope: !869, file: !869, line: 228, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !974)
!974 = !DISubprogram(name: "erfc", scope: !869, file: !869, line: 229, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !976)
!976 = !DISubprogram(name: "erfcf", scope: !869, file: !869, line: 229, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !978)
!978 = !DISubprogram(name: "erfcl", scope: !869, file: !869, line: 229, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !980)
!980 = !DISubprogram(name: "exp2", scope: !869, file: !869, line: 130, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !982)
!982 = !DISubprogram(name: "exp2f", scope: !869, file: !869, line: 130, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !984)
!984 = !DISubprogram(name: "exp2l", scope: !869, file: !869, line: 130, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !986)
!986 = !DISubprogram(name: "expm1", scope: !869, file: !869, line: 119, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !988)
!988 = !DISubprogram(name: "expm1f", scope: !869, file: !869, line: 119, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !990)
!990 = !DISubprogram(name: "expm1l", scope: !869, file: !869, line: 119, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !992)
!992 = !DISubprogram(name: "fdim", scope: !869, file: !869, line: 326, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !994)
!994 = !DISubprogram(name: "fdimf", scope: !869, file: !869, line: 326, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !996)
!996 = !DISubprogram(name: "fdiml", scope: !869, file: !869, line: 326, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !998)
!998 = !DISubprogram(name: "fma", scope: !869, file: !869, line: 335, type: !999, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!106, !106, !106, !106}
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1002)
!1002 = !DISubprogram(name: "fmaf", scope: !869, file: !869, line: 335, type: !1003, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!260, !260, !260, !260}
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1006)
!1006 = !DISubprogram(name: "fmal", scope: !869, file: !869, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!265, !265, !265, !265}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1010)
!1010 = !DISubprogram(name: "fmax", scope: !869, file: !869, line: 329, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1012)
!1012 = !DISubprogram(name: "fmaxf", scope: !869, file: !869, line: 329, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1014)
!1014 = !DISubprogram(name: "fmaxl", scope: !869, file: !869, line: 329, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1016)
!1016 = !DISubprogram(name: "fmin", scope: !869, file: !869, line: 332, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1018)
!1018 = !DISubprogram(name: "fminf", scope: !869, file: !869, line: 332, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1020)
!1020 = !DISubprogram(name: "fminl", scope: !869, file: !869, line: 332, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1022)
!1022 = !DISubprogram(name: "hypot", scope: !869, file: !869, line: 147, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1024)
!1024 = !DISubprogram(name: "hypotf", scope: !869, file: !869, line: 147, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1026)
!1026 = !DISubprogram(name: "hypotl", scope: !869, file: !869, line: 147, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1028)
!1028 = !DISubprogram(name: "ilogb", scope: !869, file: !869, line: 280, type: !1029, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DISubroutineType(types: !1030)
!1030 = !{!80, !106}
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1032)
!1032 = !DISubprogram(name: "ilogbf", scope: !869, file: !869, line: 280, type: !1033, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DISubroutineType(types: !1034)
!1034 = !{!80, !260}
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1036)
!1036 = !DISubprogram(name: "ilogbl", scope: !869, file: !869, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!80, !265}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1040)
!1040 = !DISubprogram(name: "lgamma", scope: !869, file: !869, line: 230, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1042)
!1042 = !DISubprogram(name: "lgammaf", scope: !869, file: !869, line: 230, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1044)
!1044 = !DISubprogram(name: "lgammal", scope: !869, file: !869, line: 230, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1046)
!1046 = !DISubprogram(name: "llrint", scope: !869, file: !869, line: 316, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1047 = !DISubroutineType(types: !1048)
!1048 = !{!231, !106}
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1050)
!1050 = !DISubprogram(name: "llrintf", scope: !869, file: !869, line: 316, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!231, !260}
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1054)
!1054 = !DISubprogram(name: "llrintl", scope: !869, file: !869, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!231, !265}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1058)
!1058 = !DISubprogram(name: "llround", scope: !869, file: !869, line: 322, type: !1047, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1060)
!1060 = !DISubprogram(name: "llroundf", scope: !869, file: !869, line: 322, type: !1051, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1062)
!1062 = !DISubprogram(name: "llroundl", scope: !869, file: !869, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1064)
!1064 = !DISubprogram(name: "log1p", scope: !869, file: !869, line: 122, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1066)
!1066 = !DISubprogram(name: "log1pf", scope: !869, file: !869, line: 122, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1068)
!1068 = !DISubprogram(name: "log1pl", scope: !869, file: !869, line: 122, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1070)
!1070 = !DISubprogram(name: "log2", scope: !869, file: !869, line: 133, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1072)
!1072 = !DISubprogram(name: "log2f", scope: !869, file: !869, line: 133, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1074)
!1074 = !DISubprogram(name: "log2l", scope: !869, file: !869, line: 133, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1076)
!1076 = !DISubprogram(name: "logb", scope: !869, file: !869, line: 125, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1078)
!1078 = !DISubprogram(name: "logbf", scope: !869, file: !869, line: 125, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1080)
!1080 = !DISubprogram(name: "logbl", scope: !869, file: !869, line: 125, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1082)
!1082 = !DISubprogram(name: "lrint", scope: !869, file: !869, line: 314, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!89, !106}
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1086)
!1086 = !DISubprogram(name: "lrintf", scope: !869, file: !869, line: 314, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DISubroutineType(types: !1088)
!1088 = !{!89, !260}
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1090)
!1090 = !DISubprogram(name: "lrintl", scope: !869, file: !869, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!89, !265}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1094)
!1094 = !DISubprogram(name: "lround", scope: !869, file: !869, line: 320, type: !1083, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1096)
!1096 = !DISubprogram(name: "lroundf", scope: !869, file: !869, line: 320, type: !1087, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1098)
!1098 = !DISubprogram(name: "lroundl", scope: !869, file: !869, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1100)
!1100 = !DISubprogram(name: "nan", scope: !869, file: !869, line: 201, type: !104, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1102)
!1102 = !DISubprogram(name: "nanf", scope: !869, file: !869, line: 201, type: !1103, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!260, !107}
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1106)
!1106 = !DISubprogram(name: "nanl", scope: !869, file: !869, line: 201, type: !1107, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!265, !107}
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1110)
!1110 = !DISubprogram(name: "nearbyint", scope: !869, file: !869, line: 294, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1112)
!1112 = !DISubprogram(name: "nearbyintf", scope: !869, file: !869, line: 294, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1114)
!1114 = !DISubprogram(name: "nearbyintl", scope: !869, file: !869, line: 294, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1116)
!1116 = !DISubprogram(name: "nextafter", scope: !869, file: !869, line: 259, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1118)
!1118 = !DISubprogram(name: "nextafterf", scope: !869, file: !869, line: 259, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1120)
!1120 = !DISubprogram(name: "nextafterl", scope: !869, file: !869, line: 259, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1122)
!1122 = !DISubprogram(name: "nexttoward", scope: !869, file: !869, line: 261, type: !1123, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!106, !106, !265}
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1126)
!1126 = !DISubprogram(name: "nexttowardf", scope: !869, file: !869, line: 261, type: !1127, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DISubroutineType(types: !1128)
!1128 = !{!260, !260, !265}
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1130)
!1130 = !DISubprogram(name: "nexttowardl", scope: !869, file: !869, line: 261, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1132)
!1132 = !DISubprogram(name: "remainder", scope: !869, file: !869, line: 272, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1134)
!1134 = !DISubprogram(name: "remainderf", scope: !869, file: !869, line: 272, type: !961, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1136)
!1136 = !DISubprogram(name: "remainderl", scope: !869, file: !869, line: 272, type: !965, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1138)
!1138 = !DISubprogram(name: "remquo", scope: !869, file: !869, line: 307, type: !1139, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!106, !106, !106, !898}
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1142)
!1142 = !DISubprogram(name: "remquof", scope: !869, file: !869, line: 307, type: !1143, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!260, !260, !260, !898}
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1146)
!1146 = !DISubprogram(name: "remquol", scope: !869, file: !869, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!265, !265, !265, !898}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1150)
!1150 = !DISubprogram(name: "rint", scope: !869, file: !869, line: 256, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1152)
!1152 = !DISubprogram(name: "rintf", scope: !869, file: !869, line: 256, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1154)
!1154 = !DISubprogram(name: "rintl", scope: !869, file: !869, line: 256, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1156)
!1156 = !DISubprogram(name: "round", scope: !869, file: !869, line: 298, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1158)
!1158 = !DISubprogram(name: "roundf", scope: !869, file: !869, line: 298, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1160)
!1160 = !DISubprogram(name: "roundl", scope: !869, file: !869, line: 298, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1162)
!1162 = !DISubprogram(name: "scalbln", scope: !869, file: !869, line: 290, type: !1163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!106, !106, !89}
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1166)
!1166 = !DISubprogram(name: "scalblnf", scope: !869, file: !869, line: 290, type: !1167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DISubroutineType(types: !1168)
!1168 = !{!260, !260, !89}
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1170)
!1170 = !DISubprogram(name: "scalblnl", scope: !869, file: !869, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!265, !265, !89}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1174)
!1174 = !DISubprogram(name: "scalbn", scope: !869, file: !869, line: 276, type: !901, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1176)
!1176 = !DISubprogram(name: "scalbnf", scope: !869, file: !869, line: 276, type: !1177, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{!260, !260, !80}
!1179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1180)
!1180 = !DISubprogram(name: "scalbnl", scope: !869, file: !869, line: 276, type: !1181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!265, !265, !80}
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1184)
!1184 = !DISubprogram(name: "tgamma", scope: !869, file: !869, line: 235, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1186)
!1186 = !DISubprogram(name: "tgammaf", scope: !869, file: !869, line: 235, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1188)
!1188 = !DISubprogram(name: "tgammal", scope: !869, file: !869, line: 235, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1190)
!1190 = !DISubprogram(name: "trunc", scope: !869, file: !869, line: 302, type: !870, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1192)
!1192 = !DISubprogram(name: "truncf", scope: !869, file: !869, line: 302, type: !933, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1194)
!1194 = !DISubprogram(name: "truncl", scope: !869, file: !869, line: 302, type: !937, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1197, line: 94, baseType: !1198)
!1197 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1197, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1197, line: 68, baseType: !29)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1202)
!1202 = !DISubprogram(name: "feclearexcept", scope: !1203, file: !1203, line: 71, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/antonio/remill-build/remill/Arch/X86/Runtime")
!1204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1205)
!1205 = !DISubprogram(name: "fegetexceptflag", scope: !1203, file: !1203, line: 75, type: !1206, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!80, !1208, !80}
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1200, size: 64)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1210)
!1210 = !DISubprogram(name: "feraiseexcept", scope: !1203, file: !1203, line: 78, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1212)
!1212 = !DISubprogram(name: "fesetexceptflag", scope: !1203, file: !1203, line: 88, type: !1213, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1213 = !DISubroutineType(types: !1214)
!1214 = !{!80, !1215, !80}
!1215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1216, size: 64)
!1216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1200)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1218)
!1218 = !DISubprogram(name: "fetestexcept", scope: !1203, file: !1203, line: 92, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1220)
!1220 = !DISubprogram(name: "fegetround", scope: !1203, file: !1203, line: 104, type: !187, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1222)
!1222 = !DISubprogram(name: "fesetround", scope: !1203, file: !1203, line: 107, type: !78, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1224)
!1224 = !DISubprogram(name: "fegetenv", scope: !1203, file: !1203, line: 114, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1225 = !DISubroutineType(types: !1226)
!1226 = !{!80, !1227}
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1228 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1229)
!1229 = !DISubprogram(name: "feholdexcept", scope: !1203, file: !1203, line: 119, type: !1225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1231)
!1231 = !DISubprogram(name: "fesetenv", scope: !1203, file: !1203, line: 123, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1232 = !DISubroutineType(types: !1233)
!1233 = !{!80, !1234}
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1196)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !74, entity: !1237)
!1237 = !DISubprogram(name: "feupdateenv", scope: !1203, file: !1203, line: 128, type: !1232, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !{i32 2, !"Dwarf Version", i32 4}
!1239 = !{i32 2, !"Debug Info Version", i32 3}
!1240 = !{!1241, !1241, i64 0}
!1241 = !{!"long", !1242, i64 0}
!1242 = !{!"omnipotent char", !1243, i64 0}
!1243 = !{!"Simple C++ TBAA"}
!1244 = !{!1245}
!1245 = distinct !{!1245, !1246, !"ext_610078___isoc99_sscanf: argument 0"}
!1246 = distinct !{!1246, !"ext_610078___isoc99_sscanf"}
!1247 = !{!1248}
!1248 = distinct !{!1248, !1246, !"ext_610078___isoc99_sscanf: argument 1"}
!1249 = !{!1250}
!1250 = distinct !{!1250, !1251, !"ext_610078___isoc99_sscanf: argument 0"}
!1251 = distinct !{!1251, !"ext_610078___isoc99_sscanf"}
!1252 = !{!1253}
!1253 = distinct !{!1253, !1251, !"ext_610078___isoc99_sscanf: argument 1"}
!1254 = !{!1255}
!1255 = distinct !{!1255, !1256, !"ext_610038_fgets: argument 0"}
!1256 = distinct !{!1256, !"ext_610038_fgets"}
!1257 = !{!1258}
!1258 = distinct !{!1258, !1256, !"ext_610038_fgets: argument 1"}
!1259 = !{!1260}
!1260 = distinct !{!1260, !1261, !"ext_610078___isoc99_sscanf: argument 0"}
!1261 = distinct !{!1261, !"ext_610078___isoc99_sscanf"}
!1262 = !{!1263}
!1263 = distinct !{!1263, !1261, !"ext_610078___isoc99_sscanf: argument 1"}
!1264 = !{!1265, !1242, i64 2065}
!1265 = !{!"_ZTS5State", !1242, i64 16, !1266, i64 2064, !1242, i64 2080, !1267, i64 2088, !1269, i64 2112, !1271, i64 2208, !1272, i64 2480, !1273, i64 2608, !1274, i64 2736, !1242, i64 2760, !1242, i64 2768, !1275, i64 3280}
!1266 = !{!"_ZTS10ArithFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15}
!1267 = !{!"_ZTS8Segments", !1268, i64 0, !1242, i64 2, !1268, i64 4, !1242, i64 6, !1268, i64 8, !1242, i64 10, !1268, i64 12, !1242, i64 14, !1268, i64 16, !1242, i64 18, !1268, i64 20, !1242, i64 22}
!1268 = !{!"short", !1242, i64 0}
!1269 = !{!"_ZTS12AddressSpace", !1241, i64 0, !1270, i64 8, !1241, i64 16, !1270, i64 24, !1241, i64 32, !1270, i64 40, !1241, i64 48, !1270, i64 56, !1241, i64 64, !1270, i64 72, !1241, i64 80, !1270, i64 88}
!1270 = !{!"_ZTS3Reg", !1242, i64 0}
!1271 = !{!"_ZTS3GPR", !1241, i64 0, !1270, i64 8, !1241, i64 16, !1270, i64 24, !1241, i64 32, !1270, i64 40, !1241, i64 48, !1270, i64 56, !1241, i64 64, !1270, i64 72, !1241, i64 80, !1270, i64 88, !1241, i64 96, !1270, i64 104, !1241, i64 112, !1270, i64 120, !1241, i64 128, !1270, i64 136, !1241, i64 144, !1270, i64 152, !1241, i64 160, !1270, i64 168, !1241, i64 176, !1270, i64 184, !1241, i64 192, !1270, i64 200, !1241, i64 208, !1270, i64 216, !1241, i64 224, !1270, i64 232, !1241, i64 240, !1270, i64 248, !1241, i64 256, !1270, i64 264}
!1272 = !{!"_ZTS8X87Stack", !1242, i64 0}
!1273 = !{!"_ZTS3MMX", !1242, i64 0}
!1274 = !{!"_ZTS14FPUStatusFlags", !1242, i64 0, !1242, i64 1, !1242, i64 2, !1242, i64 3, !1242, i64 4, !1242, i64 5, !1242, i64 6, !1242, i64 7, !1242, i64 8, !1242, i64 9, !1242, i64 10, !1242, i64 11, !1242, i64 12, !1242, i64 13, !1242, i64 14, !1242, i64 15, !1242, i64 16, !1242, i64 17, !1242, i64 18, !1242, i64 19, !1242, i64 20}
!1275 = !{!"_ZTS13SegmentCaches", !1276, i64 0, !1276, i64 16, !1276, i64 32, !1276, i64 48, !1276, i64 64, !1276, i64 80}
!1276 = !{!"_ZTS13SegmentShadow", !1242, i64 0, !1277, i64 8, !1277, i64 12}
!1277 = !{!"int", !1242, i64 0}
!1278 = !{!1265, !1242, i64 2067}
!1279 = !{!1265, !1242, i64 2069}
!1280 = !{!1265, !1242, i64 2071}
!1281 = !{!1265, !1242, i64 2073}
!1282 = !{!1265, !1242, i64 2077}
!1283 = !{!1284}
!1284 = distinct !{!1284, !1285, !"ext_610000_fclose: argument 0"}
!1285 = distinct !{!1285, !"ext_610000_fclose"}
!1286 = !{!1287}
!1287 = distinct !{!1287, !1285, !"ext_610000_fclose: argument 1"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1290, !"ext_400d60_strstr: argument 0"}
!1290 = distinct !{!1290, !"ext_400d60_strstr"}
!1291 = !{!1292}
!1292 = distinct !{!1292, !1290, !"ext_400d60_strstr: argument 1"}
!1293 = !{!1294}
!1294 = distinct !{!1294, !1295, !"ext_400d60_strstr: argument 0"}
!1295 = distinct !{!1295, !"ext_400d60_strstr"}
!1296 = !{!1297}
!1297 = distinct !{!1297, !1295, !"ext_400d60_strstr: argument 1"}
!1298 = !{!1299}
!1299 = distinct !{!1299, !1300, !"ext_400c10_strlen: argument 0"}
!1300 = distinct !{!1300, !"ext_400c10_strlen"}
!1301 = !{!1302}
!1302 = distinct !{!1302, !1300, !"ext_400c10_strlen: argument 1"}
!1303 = !{!1304}
!1304 = distinct !{!1304, !1305, !"ext_400c10_strlen: argument 0"}
!1305 = distinct !{!1305, !"ext_400c10_strlen"}
!1306 = !{!1307}
!1307 = distinct !{!1307, !1305, !"ext_400c10_strlen: argument 1"}
!1308 = !{!1309}
!1309 = distinct !{!1309, !1310, !"ext_610068_malloc: argument 0"}
!1310 = distinct !{!1310, !"ext_610068_malloc"}
!1311 = !{!1312}
!1312 = distinct !{!1312, !1310, !"ext_610068_malloc: argument 1"}
!1313 = !{!1314}
!1314 = distinct !{!1314, !1315, !"ext_610078___isoc99_sscanf: argument 0"}
!1315 = distinct !{!1315, !"ext_610078___isoc99_sscanf"}
!1316 = !{!1317}
!1317 = distinct !{!1317, !1315, !"ext_610078___isoc99_sscanf: argument 1"}
!1318 = !{!1319}
!1319 = distinct !{!1319, !1320, !"ext_400c90_fprintf: argument 0"}
!1320 = distinct !{!1320, !"ext_400c90_fprintf"}
!1321 = !{!1322}
!1322 = distinct !{!1322, !1320, !"ext_400c90_fprintf: argument 1"}
!1323 = !{!1324}
!1324 = distinct !{!1324, !1325, !"ext_610000_fclose: argument 0"}
!1325 = distinct !{!1325, !"ext_610000_fclose"}
!1326 = !{!1327}
!1327 = distinct !{!1327, !1325, !"ext_610000_fclose: argument 1"}
!1328 = !{!1329}
!1329 = distinct !{!1329, !1330, !"ext_400b90_free: argument 0"}
!1330 = distinct !{!1330, !"ext_400b90_free"}
!1331 = !{!1332}
!1332 = distinct !{!1332, !1330, !"ext_400b90_free: argument 1"}
!1333 = !{!1334}
!1334 = distinct !{!1334, !1335, !"ext_400c90_fprintf: argument 0"}
!1335 = distinct !{!1335, !"ext_400c90_fprintf"}
!1336 = !{!1337}
!1337 = distinct !{!1337, !1335, !"ext_400c90_fprintf: argument 1"}
!1338 = !{!1339}
!1339 = distinct !{!1339, !1340, !"ext_400b90_free: argument 0"}
!1340 = distinct !{!1340, !"ext_400b90_free"}
!1341 = !{!1342}
!1342 = distinct !{!1342, !1340, !"ext_400b90_free: argument 1"}
!1343 = !{!1344}
!1344 = distinct !{!1344, !1345, !"ext_400c90_fprintf: argument 0"}
!1345 = distinct !{!1345, !"ext_400c90_fprintf"}
!1346 = !{!1347}
!1347 = distinct !{!1347, !1345, !"ext_400c90_fprintf: argument 1"}
!1348 = !{!1349}
!1349 = distinct !{!1349, !1350, !"ext_400c90_fprintf: argument 0"}
!1350 = distinct !{!1350, !"ext_400c90_fprintf"}
!1351 = !{!1352}
!1352 = distinct !{!1352, !1350, !"ext_400c90_fprintf: argument 1"}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355, !"ext_400c90_fprintf: argument 0"}
!1355 = distinct !{!1355, !"ext_400c90_fprintf"}
!1356 = !{!1357}
!1357 = distinct !{!1357, !1355, !"ext_400c90_fprintf: argument 1"}
!1358 = !{!1359}
!1359 = distinct !{!1359, !1360, !"ext_6100b0_fwrite: argument 0"}
!1360 = distinct !{!1360, !"ext_6100b0_fwrite"}
!1361 = !{!1362}
!1362 = distinct !{!1362, !1360, !"ext_6100b0_fwrite: argument 1"}
!1363 = !{!1364}
!1364 = distinct !{!1364, !1365, !"ext_400c90_fprintf: argument 0"}
!1365 = distinct !{!1365, !"ext_400c90_fprintf"}
!1366 = !{!1367}
!1367 = distinct !{!1367, !1365, !"ext_400c90_fprintf: argument 1"}
!1368 = !{!1369}
!1369 = distinct !{!1369, !1370, !"ext_400c90_fprintf: argument 0"}
!1370 = distinct !{!1370, !"ext_400c90_fprintf"}
!1371 = !{!1372}
!1372 = distinct !{!1372, !1370, !"ext_400c90_fprintf: argument 1"}
!1373 = !{!1374}
!1374 = distinct !{!1374, !1375, !"ext_400c90_fprintf: argument 0"}
!1375 = distinct !{!1375, !"ext_400c90_fprintf"}
!1376 = !{!1377}
!1377 = distinct !{!1377, !1375, !"ext_400c90_fprintf: argument 1"}
!1378 = !{!1379}
!1379 = distinct !{!1379, !1380, !"ext_400c90_fprintf: argument 0"}
!1380 = distinct !{!1380, !"ext_400c90_fprintf"}
!1381 = !{!1382}
!1382 = distinct !{!1382, !1380, !"ext_400c90_fprintf: argument 1"}
!1383 = !{!1384}
!1384 = distinct !{!1384, !1385, !"ext_400c90_fprintf: argument 0"}
!1385 = distinct !{!1385, !"ext_400c90_fprintf"}
!1386 = !{!1387}
!1387 = distinct !{!1387, !1385, !"ext_400c90_fprintf: argument 1"}
!1388 = !{!1389}
!1389 = distinct !{!1389, !1390, !"ext_400c90_fprintf: argument 0"}
!1390 = distinct !{!1390, !"ext_400c90_fprintf"}
!1391 = !{!1392}
!1392 = distinct !{!1392, !1390, !"ext_400c90_fprintf: argument 1"}
!1393 = !{!1394}
!1394 = distinct !{!1394, !1395, !"ext_400c90_fprintf: argument 0"}
!1395 = distinct !{!1395, !"ext_400c90_fprintf"}
!1396 = !{!1397}
!1397 = distinct !{!1397, !1395, !"ext_400c90_fprintf: argument 1"}
!1398 = !{!1399}
!1399 = distinct !{!1399, !1400, !"ext_400cf0_fseek: argument 0"}
!1400 = distinct !{!1400, !"ext_400cf0_fseek"}
!1401 = !{!1402}
!1402 = distinct !{!1402, !1400, !"ext_400cf0_fseek: argument 1"}
!1403 = !{!1404}
!1404 = distinct !{!1404, !1405, !"ext_400c90_fprintf: argument 0"}
!1405 = distinct !{!1405, !"ext_400c90_fprintf"}
!1406 = !{!1407}
!1407 = distinct !{!1407, !1405, !"ext_400c90_fprintf: argument 1"}
!1408 = !{!1409}
!1409 = distinct !{!1409, !1410, !"ext_60fff8_fread: argument 0"}
!1410 = distinct !{!1410, !"ext_60fff8_fread"}
!1411 = !{!1412}
!1412 = distinct !{!1412, !1410, !"ext_60fff8_fread: argument 1"}
!1413 = !{!1414}
!1414 = distinct !{!1414, !1415, !"ext_400cf0_fseek: argument 0"}
!1415 = distinct !{!1415, !"ext_400cf0_fseek"}
!1416 = !{!1417}
!1417 = distinct !{!1417, !1415, !"ext_400cf0_fseek: argument 1"}
!1418 = !{!1419}
!1419 = distinct !{!1419, !1420, !"ext_400c90_fprintf: argument 0"}
!1420 = distinct !{!1420, !"ext_400c90_fprintf"}
!1421 = !{!1422}
!1422 = distinct !{!1422, !1420, !"ext_400c90_fprintf: argument 1"}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"ext_400c90_fprintf: argument 0"}
!1425 = distinct !{!1425, !"ext_400c90_fprintf"}
!1426 = !{!1427}
!1427 = distinct !{!1427, !1425, !"ext_400c90_fprintf: argument 1"}
!1428 = !{!1242, !1242, i64 0}
!1429 = !{!1430}
!1430 = distinct !{!1430, !1431, !"ext_610060_memcpy: argument 0"}
!1431 = distinct !{!1431, !"ext_610060_memcpy"}
!1432 = !{!1433}
!1433 = distinct !{!1433, !1431, !"ext_610060_memcpy: argument 1"}
!1434 = !{!1435}
!1435 = distinct !{!1435, !1436, !"ext_610060_memcpy: argument 0"}
!1436 = distinct !{!1436, !"ext_610060_memcpy"}
!1437 = !{!1438}
!1438 = distinct !{!1438, !1436, !"ext_610060_memcpy: argument 1"}
!1439 = !{!1440, !1440, i64 0}
!1440 = !{!"double", !1242, i64 0}
!1441 = !{!1442}
!1442 = distinct !{!1442, !1443, !"ext_610078___isoc99_sscanf: argument 0"}
!1443 = distinct !{!1443, !"ext_610078___isoc99_sscanf"}
!1444 = !{!1445}
!1445 = distinct !{!1445, !1443, !"ext_610078___isoc99_sscanf: argument 1"}
!1446 = !{!1447}
!1447 = distinct !{!1447, !1448, !"ext_610038_fgets: argument 0"}
!1448 = distinct !{!1448, !"ext_610038_fgets"}
!1449 = !{!1450}
!1450 = distinct !{!1450, !1448, !"ext_610038_fgets: argument 1"}
!1451 = !{!1452}
!1452 = distinct !{!1452, !1453, !"ext_610078___isoc99_sscanf: argument 0"}
!1453 = distinct !{!1453, !"ext_610078___isoc99_sscanf"}
!1454 = !{!1455}
!1455 = distinct !{!1455, !1453, !"ext_610078___isoc99_sscanf: argument 1"}
!1456 = !{!1457}
!1457 = distinct !{!1457, !1458, !"ext_610078___isoc99_sscanf: argument 0"}
!1458 = distinct !{!1458, !"ext_610078___isoc99_sscanf"}
!1459 = !{!1460}
!1460 = distinct !{!1460, !1458, !"ext_610078___isoc99_sscanf: argument 1"}
!1461 = !{!1462}
!1462 = distinct !{!1462, !1463, !"ext_610000_fclose: argument 0"}
!1463 = distinct !{!1463, !"ext_610000_fclose"}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1463, !"ext_610000_fclose: argument 1"}
!1466 = !{!1467}
!1467 = distinct !{!1467, !1468, !"ext_400d60_strstr: argument 0"}
!1468 = distinct !{!1468, !"ext_400d60_strstr"}
!1469 = !{!1470}
!1470 = distinct !{!1470, !1468, !"ext_400d60_strstr: argument 1"}
!1471 = !{!1472}
!1472 = distinct !{!1472, !1473, !"ext_400d60_strstr: argument 0"}
!1473 = distinct !{!1473, !"ext_400d60_strstr"}
!1474 = !{!1475}
!1475 = distinct !{!1475, !1473, !"ext_400d60_strstr: argument 1"}
!1476 = !{!1477}
!1477 = distinct !{!1477, !1478, !"ext_400c10_strlen: argument 0"}
!1478 = distinct !{!1478, !"ext_400c10_strlen"}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1478, !"ext_400c10_strlen: argument 1"}
!1481 = !{!1482}
!1482 = distinct !{!1482, !1483, !"ext_400c10_strlen: argument 0"}
!1483 = distinct !{!1483, !"ext_400c10_strlen"}
!1484 = !{!1485}
!1485 = distinct !{!1485, !1483, !"ext_400c10_strlen: argument 1"}
!1486 = !{!1487}
!1487 = distinct !{!1487, !1488, !"ext_610068_malloc: argument 0"}
!1488 = distinct !{!1488, !"ext_610068_malloc"}
!1489 = !{!1490}
!1490 = distinct !{!1490, !1488, !"ext_610068_malloc: argument 1"}
!1491 = !{!1492}
!1492 = distinct !{!1492, !1493, !"ext_610078___isoc99_sscanf: argument 0"}
!1493 = distinct !{!1493, !"ext_610078___isoc99_sscanf"}
!1494 = !{!1495}
!1495 = distinct !{!1495, !1493, !"ext_610078___isoc99_sscanf: argument 1"}
!1496 = !{!1497}
!1497 = distinct !{!1497, !1498, !"ext_400b90_free: argument 0"}
!1498 = distinct !{!1498, !"ext_400b90_free"}
!1499 = !{!1500}
!1500 = distinct !{!1500, !1498, !"ext_400b90_free: argument 1"}
!1501 = !{!1502}
!1502 = distinct !{!1502, !1503, !"ext_400c90_fprintf: argument 0"}
!1503 = distinct !{!1503, !"ext_400c90_fprintf"}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1503, !"ext_400c90_fprintf: argument 1"}
!1506 = !{!1507}
!1507 = distinct !{!1507, !1508, !"ext_400c90_fprintf: argument 0"}
!1508 = distinct !{!1508, !"ext_400c90_fprintf"}
!1509 = !{!1510}
!1510 = distinct !{!1510, !1508, !"ext_400c90_fprintf: argument 1"}
!1511 = !{!1512}
!1512 = distinct !{!1512, !1513, !"ext_400c90_fprintf: argument 0"}
!1513 = distinct !{!1513, !"ext_400c90_fprintf"}
!1514 = !{!1515}
!1515 = distinct !{!1515, !1513, !"ext_400c90_fprintf: argument 1"}
!1516 = !{!1517}
!1517 = distinct !{!1517, !1518, !"ext_610068_malloc: argument 0"}
!1518 = distinct !{!1518, !"ext_610068_malloc"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1518, !"ext_610068_malloc: argument 1"}
!1521 = !{!1522}
!1522 = distinct !{!1522, !1523, !"ext_610068_malloc: argument 0"}
!1523 = distinct !{!1523, !"ext_610068_malloc"}
!1524 = !{!1525}
!1525 = distinct !{!1525, !1523, !"ext_610068_malloc: argument 1"}
!1526 = !{!1527}
!1527 = distinct !{!1527, !1528, !"ext_400c90_fprintf: argument 0"}
!1528 = distinct !{!1528, !"ext_400c90_fprintf"}
!1529 = !{!1530}
!1530 = distinct !{!1530, !1528, !"ext_400c90_fprintf: argument 1"}
!1531 = !{!1532}
!1532 = distinct !{!1532, !1533, !"ext_400c90_fprintf: argument 0"}
!1533 = distinct !{!1533, !"ext_400c90_fprintf"}
!1534 = !{!1535}
!1535 = distinct !{!1535, !1533, !"ext_400c90_fprintf: argument 1"}
!1536 = !{!1537}
!1537 = distinct !{!1537, !1538, !"ext_400c90_fprintf: argument 0"}
!1538 = distinct !{!1538, !"ext_400c90_fprintf"}
!1539 = !{!1540}
!1540 = distinct !{!1540, !1538, !"ext_400c90_fprintf: argument 1"}
!1541 = !{!1542}
!1542 = distinct !{!1542, !1543, !"ext_400c90_fprintf: argument 0"}
!1543 = distinct !{!1543, !"ext_400c90_fprintf"}
!1544 = !{!1545}
!1545 = distinct !{!1545, !1543, !"ext_400c90_fprintf: argument 1"}
!1546 = !{!1547}
!1547 = distinct !{!1547, !1548, !"ext_6100a8_exit: argument 0"}
!1548 = distinct !{!1548, !"ext_6100a8_exit"}
!1549 = !{!1550}
!1550 = distinct !{!1550, !1548, !"ext_6100a8_exit: argument 1"}
!1551 = !{!1552}
!1552 = distinct !{!1552, !1553, !"ext_60ffd0___errno_location: argument 0"}
!1553 = distinct !{!1553, !"ext_60ffd0___errno_location"}
!1554 = !{!1555}
!1555 = distinct !{!1555, !1553, !"ext_60ffd0___errno_location: argument 1"}
!1556 = !{!1557}
!1557 = distinct !{!1557, !1558, !"ext_400c90_fprintf: argument 0"}
!1558 = distinct !{!1558, !"ext_400c90_fprintf"}
!1559 = !{!1560}
!1560 = distinct !{!1560, !1558, !"ext_400c90_fprintf: argument 1"}
!1561 = !{!1562}
!1562 = distinct !{!1562, !1563, !"ext_6100a8_exit: argument 0"}
!1563 = distinct !{!1563, !"ext_6100a8_exit"}
!1564 = !{!1565}
!1565 = distinct !{!1565, !1563, !"ext_6100a8_exit: argument 1"}
!1566 = !{!1567}
!1567 = distinct !{!1567, !1568, !"ext_610090_atoi: argument 0"}
!1568 = distinct !{!1568, !"ext_610090_atoi"}
!1569 = !{!1570}
!1570 = distinct !{!1570, !1568, !"ext_610090_atoi: argument 1"}
!1571 = !{!1572}
!1572 = distinct !{!1572, !1573, !"ext_400d70___ctype_b_loc: argument 0"}
!1573 = distinct !{!1573, !"ext_400d70___ctype_b_loc"}
!1574 = !{!1575}
!1575 = distinct !{!1575, !1573, !"ext_400d70___ctype_b_loc: argument 1"}
!1576 = !{!1577}
!1577 = distinct !{!1577, !1578, !"ext_400b90_free: argument 0"}
!1578 = distinct !{!1578, !"ext_400b90_free"}
!1579 = !{!1580}
!1580 = distinct !{!1580, !1578, !"ext_400b90_free: argument 1"}
!1581 = !{!1582}
!1582 = distinct !{!1582, !1583, !"ext_60ffe0_strcpy: argument 0"}
!1583 = distinct !{!1583, !"ext_60ffe0_strcpy"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1583, !"ext_60ffe0_strcpy: argument 1"}
!1586 = !{!1587}
!1587 = distinct !{!1587, !1588, !"ext_60ffe0_strcpy: argument 0"}
!1588 = distinct !{!1588, !"ext_60ffe0_strcpy"}
!1589 = !{!1590}
!1590 = distinct !{!1590, !1588, !"ext_60ffe0_strcpy: argument 1"}
!1591 = !{!1592}
!1592 = distinct !{!1592, !1593, !"ext_400b90_free: argument 0"}
!1593 = distinct !{!1593, !"ext_400b90_free"}
!1594 = !{!1595}
!1595 = distinct !{!1595, !1593, !"ext_400b90_free: argument 1"}
!1596 = !{!1597}
!1597 = distinct !{!1597, !1598, !"ext_60ffd0___errno_location: argument 0"}
!1598 = distinct !{!1598, !"ext_60ffd0___errno_location"}
!1599 = !{!1600}
!1600 = distinct !{!1600, !1598, !"ext_60ffd0___errno_location: argument 1"}
!1601 = !{!1602}
!1602 = distinct !{!1602, !1603, !"ext_400c90_fprintf: argument 0"}
!1603 = distinct !{!1603, !"ext_400c90_fprintf"}
!1604 = !{!1605}
!1605 = distinct !{!1605, !1603, !"ext_400c90_fprintf: argument 1"}
!1606 = !{!1607}
!1607 = distinct !{!1607, !1608, !"ext_6100a8_exit: argument 0"}
!1608 = distinct !{!1608, !"ext_6100a8_exit"}
!1609 = !{!1610}
!1610 = distinct !{!1610, !1608, !"ext_6100a8_exit: argument 1"}
!1611 = !{!1612}
!1612 = distinct !{!1612, !1613, !"ext_60ffd0___errno_location: argument 0"}
!1613 = distinct !{!1613, !"ext_60ffd0___errno_location"}
!1614 = !{!1615}
!1615 = distinct !{!1615, !1613, !"ext_60ffd0___errno_location: argument 1"}
!1616 = !{!1617}
!1617 = distinct !{!1617, !1618, !"ext_400c90_fprintf: argument 0"}
!1618 = distinct !{!1618, !"ext_400c90_fprintf"}
!1619 = !{!1620}
!1620 = distinct !{!1620, !1618, !"ext_400c90_fprintf: argument 1"}
!1621 = !{!1622}
!1622 = distinct !{!1622, !1623, !"ext_400c90_fprintf: argument 0"}
!1623 = distinct !{!1623, !"ext_400c90_fprintf"}
!1624 = !{!1625}
!1625 = distinct !{!1625, !1623, !"ext_400c90_fprintf: argument 1"}
!1626 = !{!1627}
!1627 = distinct !{!1627, !1628, !"ext_6100a8_exit: argument 0"}
!1628 = distinct !{!1628, !"ext_6100a8_exit"}
!1629 = !{!1630}
!1630 = distinct !{!1630, !1628, !"ext_6100a8_exit: argument 1"}
!1631 = !{!1632}
!1632 = distinct !{!1632, !1633, !"ext_400c90_fprintf: argument 0"}
!1633 = distinct !{!1633, !"ext_400c90_fprintf"}
!1634 = !{!1635}
!1635 = distinct !{!1635, !1633, !"ext_400c90_fprintf: argument 1"}
!1636 = !{!1637}
!1637 = distinct !{!1637, !1638, !"ext_60ffd0___errno_location: argument 0"}
!1638 = distinct !{!1638, !"ext_60ffd0___errno_location"}
!1639 = !{!1640}
!1640 = distinct !{!1640, !1638, !"ext_60ffd0___errno_location: argument 1"}
!1641 = !{!1642}
!1642 = distinct !{!1642, !1643, !"ext_400c90_fprintf: argument 0"}
!1643 = distinct !{!1643, !"ext_400c90_fprintf"}
!1644 = !{!1645}
!1645 = distinct !{!1645, !1643, !"ext_400c90_fprintf: argument 1"}
!1646 = !{!1647}
!1647 = distinct !{!1647, !1648, !"ext_6100a8_exit: argument 0"}
!1648 = distinct !{!1648, !"ext_6100a8_exit"}
!1649 = !{!1650}
!1650 = distinct !{!1650, !1648, !"ext_6100a8_exit: argument 1"}
!1651 = !{!1652}
!1652 = distinct !{!1652, !1653, !"ext_400c90_fprintf: argument 0"}
!1653 = distinct !{!1653, !"ext_400c90_fprintf"}
!1654 = !{!1655}
!1655 = distinct !{!1655, !1653, !"ext_400c90_fprintf: argument 1"}
!1656 = !{!1657}
!1657 = distinct !{!1657, !1658, !"ext_610068_malloc: argument 0"}
!1658 = distinct !{!1658, !"ext_610068_malloc"}
!1659 = !{!1660}
!1660 = distinct !{!1660, !1658, !"ext_610068_malloc: argument 1"}
!1661 = !{!1662}
!1662 = distinct !{!1662, !1663, !"ext_400c80_strcmp: argument 0"}
!1663 = distinct !{!1663, !"ext_400c80_strcmp"}
!1664 = !{!1665}
!1665 = distinct !{!1665, !1663, !"ext_400c80_strcmp: argument 1"}
!1666 = !{!1667}
!1667 = distinct !{!1667, !1668, !"ext_400cf0_fseek: argument 0"}
!1668 = distinct !{!1668, !"ext_400cf0_fseek"}
!1669 = !{!1670}
!1670 = distinct !{!1670, !1668, !"ext_400cf0_fseek: argument 1"}
!1671 = !{!1672}
!1672 = distinct !{!1672, !1673, !"ext_400b90_free: argument 0"}
!1673 = distinct !{!1673, !"ext_400b90_free"}
!1674 = !{!1675}
!1675 = distinct !{!1675, !1673, !"ext_400b90_free: argument 1"}
!1676 = !{!1677}
!1677 = distinct !{!1677, !1678, !"ext_610090_atoi: argument 0"}
!1678 = distinct !{!1678, !"ext_610090_atoi"}
!1679 = !{!1680}
!1680 = distinct !{!1680, !1678, !"ext_610090_atoi: argument 1"}
!1681 = !{!1682}
!1682 = distinct !{!1682, !1683, !"ext_400c80_strcmp: argument 0"}
!1683 = distinct !{!1683, !"ext_400c80_strcmp"}
!1684 = !{!1685}
!1685 = distinct !{!1685, !1683, !"ext_400c80_strcmp: argument 1"}
!1686 = !{!1687}
!1687 = distinct !{!1687, !1688, !"ext_400c80_strcmp: argument 0"}
!1688 = distinct !{!1688, !"ext_400c80_strcmp"}
!1689 = !{!1690}
!1690 = distinct !{!1690, !1688, !"ext_400c80_strcmp: argument 1"}
!1691 = !{!1692}
!1692 = distinct !{!1692, !1693, !"ext_400c90_fprintf: argument 0"}
!1693 = distinct !{!1693, !"ext_400c90_fprintf"}
!1694 = !{!1695}
!1695 = distinct !{!1695, !1693, !"ext_400c90_fprintf: argument 1"}
!1696 = !{!1697}
!1697 = distinct !{!1697, !1698, !"ext_60ffe8___isoc99_fscanf: argument 0"}
!1698 = distinct !{!1698, !"ext_60ffe8___isoc99_fscanf"}
!1699 = !{!1700}
!1700 = distinct !{!1700, !1698, !"ext_60ffe8___isoc99_fscanf: argument 1"}
!1701 = !{!1702}
!1702 = distinct !{!1702, !1703, !"ext_60ffe8___isoc99_fscanf: argument 0"}
!1703 = distinct !{!1703, !"ext_60ffe8___isoc99_fscanf"}
!1704 = !{!1705}
!1705 = distinct !{!1705, !1703, !"ext_60ffe8___isoc99_fscanf: argument 1"}
!1706 = !{!1707}
!1707 = distinct !{!1707, !1708, !"ext_60ffe8___isoc99_fscanf: argument 0"}
!1708 = distinct !{!1708, !"ext_60ffe8___isoc99_fscanf"}
!1709 = !{!1710}
!1710 = distinct !{!1710, !1708, !"ext_60ffe8___isoc99_fscanf: argument 1"}
!1711 = !{!1712}
!1712 = distinct !{!1712, !1713, !"ext_610090_atoi: argument 0"}
!1713 = distinct !{!1713, !"ext_610090_atoi"}
!1714 = !{!1715}
!1715 = distinct !{!1715, !1713, !"ext_610090_atoi: argument 1"}
!1716 = !{!1717}
!1717 = distinct !{!1717, !1718, !"ext_400c90_fprintf: argument 0"}
!1718 = distinct !{!1718, !"ext_400c90_fprintf"}
!1719 = !{!1720}
!1720 = distinct !{!1720, !1718, !"ext_400c90_fprintf: argument 1"}
!1721 = !{!1722}
!1722 = distinct !{!1722, !1723, !"ext_400c90_fprintf: argument 0"}
!1723 = distinct !{!1723, !"ext_400c90_fprintf"}
!1724 = !{!1725}
!1725 = distinct !{!1725, !1723, !"ext_400c90_fprintf: argument 1"}
!1726 = !{!1727}
!1727 = distinct !{!1727, !1728, !"ext_400cd0_fflush: argument 0"}
!1728 = distinct !{!1728, !"ext_400cd0_fflush"}
!1729 = !{!1730}
!1730 = distinct !{!1730, !1728, !"ext_400cd0_fflush: argument 1"}
!1731 = !{!1732}
!1732 = distinct !{!1732, !1733, !"ext_400c70_calloc: argument 0"}
!1733 = distinct !{!1733, !"ext_400c70_calloc"}
!1734 = !{!1735}
!1735 = distinct !{!1735, !1733, !"ext_400c70_calloc: argument 1"}
!1736 = !{!1737}
!1737 = distinct !{!1737, !1738, !"ext_400b90_free: argument 0"}
!1738 = distinct !{!1738, !"ext_400b90_free"}
!1739 = !{!1740}
!1740 = distinct !{!1740, !1738, !"ext_400b90_free: argument 1"}
!1741 = !{!1742}
!1742 = distinct !{!1742, !1743, !"ext_610078___isoc99_sscanf: argument 0"}
!1743 = distinct !{!1743, !"ext_610078___isoc99_sscanf"}
!1744 = !{!1745}
!1745 = distinct !{!1745, !1743, !"ext_610078___isoc99_sscanf: argument 1"}
!1746 = !{!1747}
!1747 = distinct !{!1747, !1748, !"ext_610038_fgets: argument 0"}
!1748 = distinct !{!1748, !"ext_610038_fgets"}
!1749 = !{!1750}
!1750 = distinct !{!1750, !1748, !"ext_610038_fgets: argument 1"}
!1751 = !{!1752}
!1752 = distinct !{!1752, !1753, !"ext_610078___isoc99_sscanf: argument 0"}
!1753 = distinct !{!1753, !"ext_610078___isoc99_sscanf"}
!1754 = !{!1755}
!1755 = distinct !{!1755, !1753, !"ext_610078___isoc99_sscanf: argument 1"}
!1756 = !{!1757}
!1757 = distinct !{!1757, !1758, !"ext_610000_fclose: argument 0"}
!1758 = distinct !{!1758, !"ext_610000_fclose"}
!1759 = !{!1760}
!1760 = distinct !{!1760, !1758, !"ext_610000_fclose: argument 1"}
!1761 = !{!1762}
!1762 = distinct !{!1762, !1763, !"ext_400d60_strstr: argument 0"}
!1763 = distinct !{!1763, !"ext_400d60_strstr"}
!1764 = !{!1765}
!1765 = distinct !{!1765, !1763, !"ext_400d60_strstr: argument 1"}
!1766 = !{!1767}
!1767 = distinct !{!1767, !1768, !"ext_400d60_strstr: argument 0"}
!1768 = distinct !{!1768, !"ext_400d60_strstr"}
!1769 = !{!1770}
!1770 = distinct !{!1770, !1768, !"ext_400d60_strstr: argument 1"}
!1771 = !{!1772}
!1772 = distinct !{!1772, !1773, !"ext_400c10_strlen: argument 0"}
!1773 = distinct !{!1773, !"ext_400c10_strlen"}
!1774 = !{!1775}
!1775 = distinct !{!1775, !1773, !"ext_400c10_strlen: argument 1"}
!1776 = !{!1777}
!1777 = distinct !{!1777, !1778, !"ext_400c10_strlen: argument 0"}
!1778 = distinct !{!1778, !"ext_400c10_strlen"}
!1779 = !{!1780}
!1780 = distinct !{!1780, !1778, !"ext_400c10_strlen: argument 1"}
!1781 = !{!1782}
!1782 = distinct !{!1782, !1783, !"ext_610068_malloc: argument 0"}
!1783 = distinct !{!1783, !"ext_610068_malloc"}
!1784 = !{!1785}
!1785 = distinct !{!1785, !1783, !"ext_610068_malloc: argument 1"}
!1786 = !{!1787}
!1787 = distinct !{!1787, !1788, !"ext_610078___isoc99_sscanf: argument 0"}
!1788 = distinct !{!1788, !"ext_610078___isoc99_sscanf"}
!1789 = !{!1790}
!1790 = distinct !{!1790, !1788, !"ext_610078___isoc99_sscanf: argument 1"}
!1791 = !{!1792}
!1792 = distinct !{!1792, !1793, !"ext_400c90_fprintf: argument 0"}
!1793 = distinct !{!1793, !"ext_400c90_fprintf"}
!1794 = !{!1795}
!1795 = distinct !{!1795, !1793, !"ext_400c90_fprintf: argument 1"}
!1796 = !{!1797}
!1797 = distinct !{!1797, !1798, !"ext_400c90_fprintf: argument 0"}
!1798 = distinct !{!1798, !"ext_400c90_fprintf"}
!1799 = !{!1800}
!1800 = distinct !{!1800, !1798, !"ext_400c90_fprintf: argument 1"}
!1801 = !{!1802}
!1802 = distinct !{!1802, !1803, !"ext_400c90_fprintf: argument 0"}
!1803 = distinct !{!1803, !"ext_400c90_fprintf"}
!1804 = !{!1805}
!1805 = distinct !{!1805, !1803, !"ext_400c90_fprintf: argument 1"}
!1806 = !{!1807}
!1807 = distinct !{!1807, !1808, !"ext_400cf0_fseek: argument 0"}
!1808 = distinct !{!1808, !"ext_400cf0_fseek"}
!1809 = !{!1810}
!1810 = distinct !{!1810, !1808, !"ext_400cf0_fseek: argument 1"}
!1811 = !{!1812}
!1812 = distinct !{!1812, !1813, !"ext_400c90_fprintf: argument 0"}
!1813 = distinct !{!1813, !"ext_400c90_fprintf"}
!1814 = !{!1815}
!1815 = distinct !{!1815, !1813, !"ext_400c90_fprintf: argument 1"}
!1816 = !{!1817}
!1817 = distinct !{!1817, !1818, !"ext_610060_memcpy: argument 0"}
!1818 = distinct !{!1818, !"ext_610060_memcpy"}
!1819 = !{!1820}
!1820 = distinct !{!1820, !1818, !"ext_610060_memcpy: argument 1"}
!1821 = !{!1822}
!1822 = distinct !{!1822, !1823, !"ext_610060_memcpy: argument 0"}
!1823 = distinct !{!1823, !"ext_610060_memcpy"}
!1824 = !{!1825}
!1825 = distinct !{!1825, !1823, !"ext_610060_memcpy: argument 1"}
!1826 = !{!1827}
!1827 = distinct !{!1827, !1828, !"ext_400c90_fprintf: argument 0"}
!1828 = distinct !{!1828, !"ext_400c90_fprintf"}
!1829 = !{!1830}
!1830 = distinct !{!1830, !1828, !"ext_400c90_fprintf: argument 1"}
!1831 = !{!1832}
!1832 = distinct !{!1832, !1833, !"ext_610060_memcpy: argument 0"}
!1833 = distinct !{!1833, !"ext_610060_memcpy"}
!1834 = !{!1835}
!1835 = distinct !{!1835, !1833, !"ext_610060_memcpy: argument 1"}
!1836 = !{!1837}
!1837 = distinct !{!1837, !1838, !"ext_6100b0_fwrite: argument 0"}
!1838 = distinct !{!1838, !"ext_6100b0_fwrite"}
!1839 = !{!1840}
!1840 = distinct !{!1840, !1838, !"ext_6100b0_fwrite: argument 1"}
!1841 = !{!1842}
!1842 = distinct !{!1842, !1843, !"ext_400c90_fprintf: argument 0"}
!1843 = distinct !{!1843, !"ext_400c90_fprintf"}
!1844 = !{!1845}
!1845 = distinct !{!1845, !1843, !"ext_400c90_fprintf: argument 1"}
!1846 = !{!1847}
!1847 = distinct !{!1847, !1848, !"ext_610060_memcpy: argument 0"}
!1848 = distinct !{!1848, !"ext_610060_memcpy"}
!1849 = !{!1850}
!1850 = distinct !{!1850, !1848, !"ext_610060_memcpy: argument 1"}
!1851 = !{!1852}
!1852 = distinct !{!1852, !1853, !"ext_610060_memcpy: argument 0"}
!1853 = distinct !{!1853, !"ext_610060_memcpy"}
!1854 = !{!1855}
!1855 = distinct !{!1855, !1853, !"ext_610060_memcpy: argument 1"}
!1856 = !{!1857}
!1857 = distinct !{!1857, !1858, !"ext_6100b0_fwrite: argument 0"}
!1858 = distinct !{!1858, !"ext_6100b0_fwrite"}
!1859 = !{!1860}
!1860 = distinct !{!1860, !1858, !"ext_6100b0_fwrite: argument 1"}
!1861 = !{!1862}
!1862 = distinct !{!1862, !1863, !"ext_400c90_fprintf: argument 0"}
!1863 = distinct !{!1863, !"ext_400c90_fprintf"}
!1864 = !{!1865}
!1865 = distinct !{!1865, !1863, !"ext_400c90_fprintf: argument 1"}
!1866 = !{!1867}
!1867 = distinct !{!1867, !1868, !"ext_400c90_fprintf: argument 0"}
!1868 = distinct !{!1868, !"ext_400c90_fprintf"}
!1869 = !{!1870}
!1870 = distinct !{!1870, !1868, !"ext_400c90_fprintf: argument 1"}
!1871 = !{!1872}
!1872 = distinct !{!1872, !1873, !"ext_400c90_fprintf: argument 0"}
!1873 = distinct !{!1873, !"ext_400c90_fprintf"}
!1874 = !{!1875}
!1875 = distinct !{!1875, !1873, !"ext_400c90_fprintf: argument 1"}
!1876 = !{!1877}
!1877 = distinct !{!1877, !1878, !"ext_610078___isoc99_sscanf: argument 0"}
!1878 = distinct !{!1878, !"ext_610078___isoc99_sscanf"}
!1879 = !{!1880}
!1880 = distinct !{!1880, !1878, !"ext_610078___isoc99_sscanf: argument 1"}
!1881 = !{!1882}
!1882 = distinct !{!1882, !1883, !"ext_610038_fgets: argument 0"}
!1883 = distinct !{!1883, !"ext_610038_fgets"}
!1884 = !{!1885}
!1885 = distinct !{!1885, !1883, !"ext_610038_fgets: argument 1"}
!1886 = !{!1887}
!1887 = distinct !{!1887, !1888, !"ext_610000_fclose: argument 0"}
!1888 = distinct !{!1888, !"ext_610000_fclose"}
!1889 = !{!1890}
!1890 = distinct !{!1890, !1888, !"ext_610000_fclose: argument 1"}
!1891 = !{!1892}
!1892 = distinct !{!1892, !1893, !"ext_400d60_strstr: argument 0"}
!1893 = distinct !{!1893, !"ext_400d60_strstr"}
!1894 = !{!1895}
!1895 = distinct !{!1895, !1893, !"ext_400d60_strstr: argument 1"}
!1896 = !{!1897}
!1897 = distinct !{!1897, !1898, !"ext_400c10_strlen: argument 0"}
!1898 = distinct !{!1898, !"ext_400c10_strlen"}
!1899 = !{!1900}
!1900 = distinct !{!1900, !1898, !"ext_400c10_strlen: argument 1"}
!1901 = !{!1902}
!1902 = distinct !{!1902, !1903, !"ext_400d60_strstr: argument 0"}
!1903 = distinct !{!1903, !"ext_400d60_strstr"}
!1904 = !{!1905}
!1905 = distinct !{!1905, !1903, !"ext_400d60_strstr: argument 1"}
!1906 = !{!1907}
!1907 = distinct !{!1907, !1908, !"ext_60ffd8_unlink: argument 0"}
!1908 = distinct !{!1908, !"ext_60ffd8_unlink"}
!1909 = !{!1910}
!1910 = distinct !{!1910, !1908, !"ext_60ffd8_unlink: argument 1"}
!1911 = !{!1912}
!1912 = distinct !{!1912, !1913, !"ext_610010_strchr: argument 0"}
!1913 = distinct !{!1913, !"ext_610010_strchr"}
!1914 = !{!1915}
!1915 = distinct !{!1915, !1913, !"ext_610010_strchr: argument 1"}
!1916 = !{!1917}
!1917 = distinct !{!1917, !1918, !"ext_610088_fopen: argument 0"}
!1918 = distinct !{!1918, !"ext_610088_fopen"}
!1919 = !{!1920}
!1920 = distinct !{!1920, !1918, !"ext_610088_fopen: argument 1"}
!1921 = !{!1922}
!1922 = distinct !{!1922, !1923, !"ext_610078___isoc99_sscanf: argument 0"}
!1923 = distinct !{!1923, !"ext_610078___isoc99_sscanf"}
!1924 = !{!1925}
!1925 = distinct !{!1925, !1923, !"ext_610078___isoc99_sscanf: argument 1"}
!1926 = !{!1927}
!1927 = distinct !{!1927, !1928, !"ext_610000_fclose: argument 0"}
!1928 = distinct !{!1928, !"ext_610000_fclose"}
!1929 = !{!1930}
!1930 = distinct !{!1930, !1928, !"ext_610000_fclose: argument 1"}
!1931 = !{!1932}
!1932 = distinct !{!1932, !1933, !"ext_400d60_strstr: argument 0"}
!1933 = distinct !{!1933, !"ext_400d60_strstr"}
!1934 = !{!1935}
!1935 = distinct !{!1935, !1933, !"ext_400d60_strstr: argument 1"}
!1936 = !{!1937}
!1937 = distinct !{!1937, !1938, !"ext_400d60_strstr: argument 0"}
!1938 = distinct !{!1938, !"ext_400d60_strstr"}
!1939 = !{!1940}
!1940 = distinct !{!1940, !1938, !"ext_400d60_strstr: argument 1"}
!1941 = !{!1942}
!1942 = distinct !{!1942, !1943, !"ext_400c90_fprintf: argument 0"}
!1943 = distinct !{!1943, !"ext_400c90_fprintf"}
!1944 = !{!1945}
!1945 = distinct !{!1945, !1943, !"ext_400c90_fprintf: argument 1"}
!1946 = !{!1947}
!1947 = distinct !{!1947, !1948, !"ext_610078___isoc99_sscanf: argument 0"}
!1948 = distinct !{!1948, !"ext_610078___isoc99_sscanf"}
!1949 = !{!1950}
!1950 = distinct !{!1950, !1948, !"ext_610078___isoc99_sscanf: argument 1"}
!1951 = !{!1952}
!1952 = distinct !{!1952, !1953, !"ext_610078___isoc99_sscanf: argument 0"}
!1953 = distinct !{!1953, !"ext_610078___isoc99_sscanf"}
!1954 = !{!1955}
!1955 = distinct !{!1955, !1953, !"ext_610078___isoc99_sscanf: argument 1"}
!1956 = !{!1957}
!1957 = distinct !{!1957, !1958, !"ext_610010_strchr: argument 0"}
!1958 = distinct !{!1958, !"ext_610010_strchr"}
!1959 = !{!1960}
!1960 = distinct !{!1960, !1958, !"ext_610010_strchr: argument 1"}
!1961 = !{!1962}
!1962 = distinct !{!1962, !1963, !"ext_400c10_strlen: argument 0"}
!1963 = distinct !{!1963, !"ext_400c10_strlen"}
!1964 = !{!1965}
!1965 = distinct !{!1965, !1963, !"ext_400c10_strlen: argument 1"}
!1966 = !{!1967}
!1967 = distinct !{!1967, !1968, !"ext_610068_malloc: argument 0"}
!1968 = distinct !{!1968, !"ext_610068_malloc"}
!1969 = !{!1970}
!1970 = distinct !{!1970, !1968, !"ext_610068_malloc: argument 1"}
!1971 = !{!1972}
!1972 = distinct !{!1972, !1973, !"ext_610078___isoc99_sscanf: argument 0"}
!1973 = distinct !{!1973, !"ext_610078___isoc99_sscanf"}
!1974 = !{!1975}
!1975 = distinct !{!1975, !1973, !"ext_610078___isoc99_sscanf: argument 1"}
!1976 = !{!1977}
!1977 = distinct !{!1977, !1978, !"ext_610078___isoc99_sscanf: argument 0"}
!1978 = distinct !{!1978, !"ext_610078___isoc99_sscanf"}
!1979 = !{!1980}
!1980 = distinct !{!1980, !1978, !"ext_610078___isoc99_sscanf: argument 1"}
!1981 = !{!1982}
!1982 = distinct !{!1982, !1983, !"ext_610078___isoc99_sscanf: argument 0"}
!1983 = distinct !{!1983, !"ext_610078___isoc99_sscanf"}
!1984 = !{!1985}
!1985 = distinct !{!1985, !1983, !"ext_610078___isoc99_sscanf: argument 1"}
!1986 = !{!1987}
!1987 = distinct !{!1987, !1988, !"ext_400c10_strlen: argument 0"}
!1988 = distinct !{!1988, !"ext_400c10_strlen"}
!1989 = !{!1990}
!1990 = distinct !{!1990, !1988, !"ext_400c10_strlen: argument 1"}
!1991 = !{!1992}
!1992 = distinct !{!1992, !1993, !"ext_610038_fgets: argument 0"}
!1993 = distinct !{!1993, !"ext_610038_fgets"}
!1994 = !{!1995}
!1995 = distinct !{!1995, !1993, !"ext_610038_fgets: argument 1"}
!1996 = !{!1997}
!1997 = distinct !{!1997, !1998, !"ext_610078___isoc99_sscanf: argument 0"}
!1998 = distinct !{!1998, !"ext_610078___isoc99_sscanf"}
!1999 = !{!2000}
!2000 = distinct !{!2000, !1998, !"ext_610078___isoc99_sscanf: argument 1"}
!2001 = !{!2002}
!2002 = distinct !{!2002, !2003, !"ext_400c70_calloc: argument 0"}
!2003 = distinct !{!2003, !"ext_400c70_calloc"}
!2004 = !{!2005}
!2005 = distinct !{!2005, !2003, !"ext_400c70_calloc: argument 1"}
!2006 = !{!2007}
!2007 = distinct !{!2007, !2008, !"ext_400c70_calloc: argument 0"}
!2008 = distinct !{!2008, !"ext_400c70_calloc"}
!2009 = !{!2010}
!2010 = distinct !{!2010, !2008, !"ext_400c70_calloc: argument 1"}
!2011 = !{!2012}
!2012 = distinct !{!2012, !2013, !"ext_400c70_calloc: argument 0"}
!2013 = distinct !{!2013, !"ext_400c70_calloc"}
!2014 = !{!2015}
!2015 = distinct !{!2015, !2013, !"ext_400c70_calloc: argument 1"}
!2016 = !{!2017}
!2017 = distinct !{!2017, !2018, !"ext_400b90_free: argument 0"}
!2018 = distinct !{!2018, !"ext_400b90_free"}
!2019 = !{!2020}
!2020 = distinct !{!2020, !2018, !"ext_400b90_free: argument 1"}
!2021 = !{!2022}
!2022 = distinct !{!2022, !2023, !"ext_400c90_fprintf: argument 0"}
!2023 = distinct !{!2023, !"ext_400c90_fprintf"}
!2024 = !{!2025}
!2025 = distinct !{!2025, !2023, !"ext_400c90_fprintf: argument 1"}
!2026 = !{!2027}
!2027 = distinct !{!2027, !2028, !"ext_400c90_fprintf: argument 0"}
!2028 = distinct !{!2028, !"ext_400c90_fprintf"}
!2029 = !{!2030}
!2030 = distinct !{!2030, !2028, !"ext_400c90_fprintf: argument 1"}
!2031 = !{!2032}
!2032 = distinct !{!2032, !2033, !"ext_400c90_fprintf: argument 0"}
!2033 = distinct !{!2033, !"ext_400c90_fprintf"}
!2034 = !{!2035}
!2035 = distinct !{!2035, !2033, !"ext_400c90_fprintf: argument 1"}
!2036 = !{!2037}
!2037 = distinct !{!2037, !2038, !"ext_400be0_qsort: argument 0"}
!2038 = distinct !{!2038, !"ext_400be0_qsort"}
!2039 = !{!2040}
!2040 = distinct !{!2040, !2038, !"ext_400be0_qsort: argument 1"}
!2041 = !{!2042}
!2042 = distinct !{!2042, !2043, !"ext_400c90_fprintf: argument 0"}
!2043 = distinct !{!2043, !"ext_400c90_fprintf"}
!2044 = !{!2045}
!2045 = distinct !{!2045, !2043, !"ext_400c90_fprintf: argument 1"}
!2046 = !{!2047}
!2047 = distinct !{!2047, !2048, !"ext_400b90_free: argument 0"}
!2048 = distinct !{!2048, !"ext_400b90_free"}
!2049 = !{!2050}
!2050 = distinct !{!2050, !2048, !"ext_400b90_free: argument 1"}
!2051 = !{!2052}
!2052 = distinct !{!2052, !2053, !"ext_400c90_fprintf: argument 0"}
!2053 = distinct !{!2053, !"ext_400c90_fprintf"}
!2054 = !{!2055}
!2055 = distinct !{!2055, !2053, !"ext_400c90_fprintf: argument 1"}
!2056 = !{!2057}
!2057 = distinct !{!2057, !2058, !"ext_610000_fclose: argument 0"}
!2058 = distinct !{!2058, !"ext_610000_fclose"}
!2059 = !{!2060}
!2060 = distinct !{!2060, !2058, !"ext_610000_fclose: argument 1"}
!2061 = !{!2062}
!2062 = distinct !{!2062, !2063, !"ext_400b90_free: argument 0"}
!2063 = distinct !{!2063, !"ext_400b90_free"}
!2064 = !{!2065}
!2065 = distinct !{!2065, !2063, !"ext_400b90_free: argument 1"}
!2066 = !{!2067}
!2067 = distinct !{!2067, !2068, !"ext_400c90_fprintf: argument 0"}
!2068 = distinct !{!2068, !"ext_400c90_fprintf"}
!2069 = !{!2070}
!2070 = distinct !{!2070, !2068, !"ext_400c90_fprintf: argument 1"}
!2071 = !{!2072}
!2072 = distinct !{!2072, !2073, !"ext_400b90_free: argument 0"}
!2073 = distinct !{!2073, !"ext_400b90_free"}
!2074 = !{!2075}
!2075 = distinct !{!2075, !2073, !"ext_400b90_free: argument 1"}
!2076 = !{!2077}
!2077 = distinct !{!2077, !2078, !"ext_400b90_free: argument 0"}
!2078 = distinct !{!2078, !"ext_400b90_free"}
!2079 = !{!2080}
!2080 = distinct !{!2080, !2078, !"ext_400b90_free: argument 1"}
!2081 = !{!2082}
!2082 = distinct !{!2082, !2083, !"ext_400b90_free: argument 0"}
!2083 = distinct !{!2083, !"ext_400b90_free"}
!2084 = !{!2085}
!2085 = distinct !{!2085, !2083, !"ext_400b90_free: argument 1"}
!2086 = !{!2087}
!2087 = distinct !{!2087, !2088, !"ext_400c70_calloc: argument 0"}
!2088 = distinct !{!2088, !"ext_400c70_calloc"}
!2089 = !{!2090}
!2090 = distinct !{!2090, !2088, !"ext_400c70_calloc: argument 1"}
!2091 = !{!2092}
!2092 = distinct !{!2092, !2093, !"ext_6100a0_sprintf: argument 0"}
!2093 = distinct !{!2093, !"ext_6100a0_sprintf"}
!2094 = !{!2095}
!2095 = distinct !{!2095, !2093, !"ext_6100a0_sprintf: argument 1"}
!2096 = !{!2097}
!2097 = distinct !{!2097, !2098, !"ext_610088_fopen: argument 0"}
!2098 = distinct !{!2098, !"ext_610088_fopen"}
!2099 = !{!2100}
!2100 = distinct !{!2100, !2098, !"ext_610088_fopen: argument 1"}
!2101 = !{!2102}
!2102 = distinct !{!2102, !2103, !"ext_400b90_free: argument 0"}
!2103 = distinct !{!2103, !"ext_400b90_free"}
!2104 = !{!2105}
!2105 = distinct !{!2105, !2103, !"ext_400b90_free: argument 1"}
!2106 = !{!2107, !2107, i64 0}
!2107 = !{!"float", !1242, i64 0}
!2108 = !{!2109}
!2109 = distinct !{!2109, !2110, !"ext_610088_fopen: argument 0"}
!2110 = distinct !{!2110, !"ext_610088_fopen"}
!2111 = !{!2112}
!2112 = distinct !{!2112, !2110, !"ext_610088_fopen: argument 1"}
!2113 = !{!2114}
!2114 = distinct !{!2114, !2115, !"ext_60ffd0___errno_location: argument 0"}
!2115 = distinct !{!2115, !"ext_60ffd0___errno_location"}
!2116 = !{!2117}
!2117 = distinct !{!2117, !2115, !"ext_60ffd0___errno_location: argument 1"}
!2118 = !{!2119}
!2119 = distinct !{!2119, !2120, !"ext_400c90_fprintf: argument 0"}
!2120 = distinct !{!2120, !"ext_400c90_fprintf"}
!2121 = !{!2122}
!2122 = distinct !{!2122, !2120, !"ext_400c90_fprintf: argument 1"}
!2123 = !{!2124}
!2124 = distinct !{!2124, !2125, !"ext_6100b0_fwrite: argument 0"}
!2125 = distinct !{!2125, !"ext_6100b0_fwrite"}
!2126 = !{!2127}
!2127 = distinct !{!2127, !2125, !"ext_6100b0_fwrite: argument 1"}
!2128 = !{!2129}
!2129 = distinct !{!2129, !2130, !"ext_400c90_fprintf: argument 0"}
!2130 = distinct !{!2130, !"ext_400c90_fprintf"}
!2131 = !{!2132}
!2132 = distinct !{!2132, !2130, !"ext_400c90_fprintf: argument 1"}
!2133 = !{!2134}
!2134 = distinct !{!2134, !2135, !"ext_610060_memcpy: argument 0"}
!2135 = distinct !{!2135, !"ext_610060_memcpy"}
!2136 = !{!2137}
!2137 = distinct !{!2137, !2135, !"ext_610060_memcpy: argument 1"}
!2138 = !{!2139}
!2139 = distinct !{!2139, !2140, !"ext_400c90_fprintf: argument 0"}
!2140 = distinct !{!2140, !"ext_400c90_fprintf"}
!2141 = !{!2142}
!2142 = distinct !{!2142, !2140, !"ext_400c90_fprintf: argument 1"}
!2143 = !{!2144}
!2144 = distinct !{!2144, !2145, !"ext_400c90_fprintf: argument 0"}
!2145 = distinct !{!2145, !"ext_400c90_fprintf"}
!2146 = !{!2147}
!2147 = distinct !{!2147, !2145, !"ext_400c90_fprintf: argument 1"}
!2148 = !{!2149}
!2149 = distinct !{!2149, !2150, !"ext_400cf0_fseek: argument 0"}
!2150 = distinct !{!2150, !"ext_400cf0_fseek"}
!2151 = !{!2152}
!2152 = distinct !{!2152, !2150, !"ext_400cf0_fseek: argument 1"}
!2153 = !{!2154}
!2154 = distinct !{!2154, !2155, !"ext_400c90_fprintf: argument 0"}
!2155 = distinct !{!2155, !"ext_400c90_fprintf"}
!2156 = !{!2157}
!2157 = distinct !{!2157, !2155, !"ext_400c90_fprintf: argument 1"}
!2158 = !{!2159}
!2159 = distinct !{!2159, !2160, !"ext_60fff8_fread: argument 0"}
!2160 = distinct !{!2160, !"ext_60fff8_fread"}
!2161 = !{!2162}
!2162 = distinct !{!2162, !2160, !"ext_60fff8_fread: argument 1"}
!2163 = !{!2164}
!2164 = distinct !{!2164, !2165, !"ext_400c90_fprintf: argument 0"}
!2165 = distinct !{!2165, !"ext_400c90_fprintf"}
!2166 = !{!2167}
!2167 = distinct !{!2167, !2165, !"ext_400c90_fprintf: argument 1"}
!2168 = !{!2169}
!2169 = distinct !{!2169, !2170, !"ext_610000_fclose: argument 0"}
!2170 = distinct !{!2170, !"ext_610000_fclose"}
!2171 = !{!2172}
!2172 = distinct !{!2172, !2170, !"ext_610000_fclose: argument 1"}
!2173 = !{!2174}
!2174 = distinct !{!2174, !2175, !"ext_400b90_free: argument 0"}
!2175 = distinct !{!2175, !"ext_400b90_free"}
!2176 = !{!2177}
!2177 = distinct !{!2177, !2175, !"ext_400b90_free: argument 1"}
!2178 = !{!2179}
!2179 = distinct !{!2179, !2180, !"ext_400c90_fprintf: argument 0"}
!2180 = distinct !{!2180, !"ext_400c90_fprintf"}
!2181 = !{!2182}
!2182 = distinct !{!2182, !2180, !"ext_400c90_fprintf: argument 1"}
!2183 = !{!2184}
!2184 = distinct !{!2184, !2185, !"ext_400b90_free: argument 0"}
!2185 = distinct !{!2185, !"ext_400b90_free"}
!2186 = !{!2187}
!2187 = distinct !{!2187, !2185, !"ext_400b90_free: argument 1"}
!2188 = !{!2189}
!2189 = distinct !{!2189, !2190, !"ext_400b90_free: argument 0"}
!2190 = distinct !{!2190, !"ext_400b90_free"}
!2191 = !{!2192}
!2192 = distinct !{!2192, !2190, !"ext_400b90_free: argument 1"}
!2193 = !{!2194}
!2194 = distinct !{!2194, !2195, !"ext_400b90_free: argument 0"}
!2195 = distinct !{!2195, !"ext_400b90_free"}
!2196 = !{!2197}
!2197 = distinct !{!2197, !2195, !"ext_400b90_free: argument 1"}
!2198 = !{!2199}
!2199 = distinct !{!2199, !2200, !"ext_400b90_free: argument 0"}
!2200 = distinct !{!2200, !"ext_400b90_free"}
!2201 = !{!2202}
!2202 = distinct !{!2202, !2200, !"ext_400b90_free: argument 1"}
!2203 = !{!2204}
!2204 = distinct !{!2204, !2205, !"ext_400c70_calloc: argument 0"}
!2205 = distinct !{!2205, !"ext_400c70_calloc"}
!2206 = !{!2207}
!2207 = distinct !{!2207, !2205, !"ext_400c70_calloc: argument 1"}
!2208 = !{!2209}
!2209 = distinct !{!2209, !2210, !"ext_6100a0_sprintf: argument 0"}
!2210 = distinct !{!2210, !"ext_6100a0_sprintf"}
!2211 = !{!2212}
!2212 = distinct !{!2212, !2210, !"ext_6100a0_sprintf: argument 1"}
!2213 = !{!2214}
!2214 = distinct !{!2214, !2215, !"ext_610088_fopen: argument 0"}
!2215 = distinct !{!2215, !"ext_610088_fopen"}
!2216 = !{!2217}
!2217 = distinct !{!2217, !2215, !"ext_610088_fopen: argument 1"}
!2218 = !{!2219}
!2219 = distinct !{!2219, !2220, !"ext_400be0_qsort: argument 0"}
!2220 = distinct !{!2220, !"ext_400be0_qsort"}
!2221 = !{!2222}
!2222 = distinct !{!2222, !2220, !"ext_400be0_qsort: argument 1"}
!2223 = !{!2224}
!2224 = distinct !{!2224, !2225, !"ext_400c90_fprintf: argument 0"}
!2225 = distinct !{!2225, !"ext_400c90_fprintf"}
!2226 = !{!2227}
!2227 = distinct !{!2227, !2225, !"ext_400c90_fprintf: argument 1"}
!2228 = !{!2229}
!2229 = distinct !{!2229, !2230, !"ext_400c90_fprintf: argument 0"}
!2230 = distinct !{!2230, !"ext_400c90_fprintf"}
!2231 = !{!2232}
!2232 = distinct !{!2232, !2230, !"ext_400c90_fprintf: argument 1"}
!2233 = !{!2234}
!2234 = distinct !{!2234, !2235, !"ext_400c90_fprintf: argument 0"}
!2235 = distinct !{!2235, !"ext_400c90_fprintf"}
!2236 = !{!2237}
!2237 = distinct !{!2237, !2235, !"ext_400c90_fprintf: argument 1"}
!2238 = !{!2239}
!2239 = distinct !{!2239, !2240, !"ext_400b90_free: argument 0"}
!2240 = distinct !{!2240, !"ext_400b90_free"}
!2241 = !{!2242}
!2242 = distinct !{!2242, !2240, !"ext_400b90_free: argument 1"}
!2243 = !{!2244}
!2244 = distinct !{!2244, !2245, !"ext_400c90_fprintf: argument 0"}
!2245 = distinct !{!2245, !"ext_400c90_fprintf"}
!2246 = !{!2247}
!2247 = distinct !{!2247, !2245, !"ext_400c90_fprintf: argument 1"}
!2248 = !{!2249}
!2249 = distinct !{!2249, !2250, !"ext_400b90_free: argument 0"}
!2250 = distinct !{!2250, !"ext_400b90_free"}
!2251 = !{!2252}
!2252 = distinct !{!2252, !2250, !"ext_400b90_free: argument 1"}
!2253 = !{!2254}
!2254 = distinct !{!2254, !2255, !"ext_400c90_fprintf: argument 0"}
!2255 = distinct !{!2255, !"ext_400c90_fprintf"}
!2256 = !{!2257}
!2257 = distinct !{!2257, !2255, !"ext_400c90_fprintf: argument 1"}
!2258 = !{!2259}
!2259 = distinct !{!2259, !2260, !"ext_6100b0_fwrite: argument 0"}
!2260 = distinct !{!2260, !"ext_6100b0_fwrite"}
!2261 = !{!2262}
!2262 = distinct !{!2262, !2260, !"ext_6100b0_fwrite: argument 1"}
!2263 = !{!2264}
!2264 = distinct !{!2264, !2265, !"ext_610068_malloc: argument 0"}
!2265 = distinct !{!2265, !"ext_610068_malloc"}
!2266 = !{!2267}
!2267 = distinct !{!2267, !2265, !"ext_610068_malloc: argument 1"}
!2268 = !{!2269}
!2269 = distinct !{!2269, !2270, !"ext_610068_malloc: argument 0"}
!2270 = distinct !{!2270, !"ext_610068_malloc"}
!2271 = !{!2272}
!2272 = distinct !{!2272, !2270, !"ext_610068_malloc: argument 1"}
!2273 = !{!2274}
!2274 = distinct !{!2274, !2275, !"ext_610068_malloc: argument 0"}
!2275 = distinct !{!2275, !"ext_610068_malloc"}
!2276 = !{!2277}
!2277 = distinct !{!2277, !2275, !"ext_610068_malloc: argument 1"}
!2278 = !{!2279}
!2279 = distinct !{!2279, !2280, !"ext_400c90_fprintf: argument 0"}
!2280 = distinct !{!2280, !"ext_400c90_fprintf"}
!2281 = !{!2282}
!2282 = distinct !{!2282, !2280, !"ext_400c90_fprintf: argument 1"}
!2283 = !{!2284}
!2284 = distinct !{!2284, !2285, !"ext_400c90_fprintf: argument 0"}
!2285 = distinct !{!2285, !"ext_400c90_fprintf"}
!2286 = !{!2287}
!2287 = distinct !{!2287, !2285, !"ext_400c90_fprintf: argument 1"}
!2288 = !{!2289}
!2289 = distinct !{!2289, !2290, !"ext_610078___isoc99_sscanf: argument 0"}
!2290 = distinct !{!2290, !"ext_610078___isoc99_sscanf"}
!2291 = !{!2292}
!2292 = distinct !{!2292, !2290, !"ext_610078___isoc99_sscanf: argument 1"}
!2293 = !{!2294}
!2294 = distinct !{!2294, !2295, !"ext_610078___isoc99_sscanf: argument 0"}
!2295 = distinct !{!2295, !"ext_610078___isoc99_sscanf"}
!2296 = !{!2297}
!2297 = distinct !{!2297, !2295, !"ext_610078___isoc99_sscanf: argument 1"}
!2298 = !{!2299}
!2299 = distinct !{!2299, !2300, !"ext_610000_fclose: argument 0"}
!2300 = distinct !{!2300, !"ext_610000_fclose"}
!2301 = !{!2302}
!2302 = distinct !{!2302, !2300, !"ext_610000_fclose: argument 1"}
!2303 = !{!2304}
!2304 = distinct !{!2304, !2305, !"ext_400d60_strstr: argument 0"}
!2305 = distinct !{!2305, !"ext_400d60_strstr"}
!2306 = !{!2307}
!2307 = distinct !{!2307, !2305, !"ext_400d60_strstr: argument 1"}
!2308 = !{!2309}
!2309 = distinct !{!2309, !2310, !"ext_400d60_strstr: argument 0"}
!2310 = distinct !{!2310, !"ext_400d60_strstr"}
!2311 = !{!2312}
!2312 = distinct !{!2312, !2310, !"ext_400d60_strstr: argument 1"}
!2313 = !{!2314}
!2314 = distinct !{!2314, !2315, !"ext_610078___isoc99_sscanf: argument 0"}
!2315 = distinct !{!2315, !"ext_610078___isoc99_sscanf"}
!2316 = !{!2317}
!2317 = distinct !{!2317, !2315, !"ext_610078___isoc99_sscanf: argument 1"}
!2318 = !{!2319}
!2319 = distinct !{!2319, !2320, !"ext_400c10_strlen: argument 0"}
!2320 = distinct !{!2320, !"ext_400c10_strlen"}
!2321 = !{!2322}
!2322 = distinct !{!2322, !2320, !"ext_400c10_strlen: argument 1"}
!2323 = !{!2324}
!2324 = distinct !{!2324, !2325, !"ext_610068_malloc: argument 0"}
!2325 = distinct !{!2325, !"ext_610068_malloc"}
!2326 = !{!2327}
!2327 = distinct !{!2327, !2325, !"ext_610068_malloc: argument 1"}
!2328 = !{!2329}
!2329 = distinct !{!2329, !2330, !"ext_610078___isoc99_sscanf: argument 0"}
!2330 = distinct !{!2330, !"ext_610078___isoc99_sscanf"}
!2331 = !{!2332}
!2332 = distinct !{!2332, !2330, !"ext_610078___isoc99_sscanf: argument 1"}
!2333 = !{!2334}
!2334 = distinct !{!2334, !2335, !"ext_610078___isoc99_sscanf: argument 0"}
!2335 = distinct !{!2335, !"ext_610078___isoc99_sscanf"}
!2336 = !{!2337}
!2337 = distinct !{!2337, !2335, !"ext_610078___isoc99_sscanf: argument 1"}
!2338 = !{!2339}
!2339 = distinct !{!2339, !2340, !"ext_400c10_strlen: argument 0"}
!2340 = distinct !{!2340, !"ext_400c10_strlen"}
!2341 = !{!2342}
!2342 = distinct !{!2342, !2340, !"ext_400c10_strlen: argument 1"}
!2343 = !{!2344}
!2344 = distinct !{!2344, !2345, !"ext_610078___isoc99_sscanf: argument 0"}
!2345 = distinct !{!2345, !"ext_610078___isoc99_sscanf"}
!2346 = !{!2347}
!2347 = distinct !{!2347, !2345, !"ext_610078___isoc99_sscanf: argument 1"}
!2348 = !{!2349}
!2349 = distinct !{!2349, !2350, !"ext_610038_fgets: argument 0"}
!2350 = distinct !{!2350, !"ext_610038_fgets"}
!2351 = !{!2352}
!2352 = distinct !{!2352, !2350, !"ext_610038_fgets: argument 1"}
!2353 = !{!2354}
!2354 = distinct !{!2354, !2355, !"ext_6100a0_sprintf: argument 0"}
!2355 = distinct !{!2355, !"ext_6100a0_sprintf"}
!2356 = !{!2357}
!2357 = distinct !{!2357, !2355, !"ext_6100a0_sprintf: argument 1"}
!2358 = !{!2359}
!2359 = distinct !{!2359, !2360, !"ext_400c90_fprintf: argument 0"}
!2360 = distinct !{!2360, !"ext_400c90_fprintf"}
!2361 = !{!2362}
!2362 = distinct !{!2362, !2360, !"ext_400c90_fprintf: argument 1"}
!2363 = !{!2364}
!2364 = distinct !{!2364, !2365, !"ext_400c90_fprintf: argument 0"}
!2365 = distinct !{!2365, !"ext_400c90_fprintf"}
!2366 = !{!2367}
!2367 = distinct !{!2367, !2365, !"ext_400c90_fprintf: argument 1"}
!2368 = !{!2369}
!2369 = distinct !{!2369, !2370, !"ext_400c90_fprintf: argument 0"}
!2370 = distinct !{!2370, !"ext_400c90_fprintf"}
!2371 = !{!2372}
!2372 = distinct !{!2372, !2370, !"ext_400c90_fprintf: argument 1"}
!2373 = !{!2374}
!2374 = distinct !{!2374, !2375, !"ext_400c90_fprintf: argument 0"}
!2375 = distinct !{!2375, !"ext_400c90_fprintf"}
!2376 = !{!2377}
!2377 = distinct !{!2377, !2375, !"ext_400c90_fprintf: argument 1"}
!2378 = !{!2379}
!2379 = distinct !{!2379, !2380, !"ext_400c90_fprintf: argument 0"}
!2380 = distinct !{!2380, !"ext_400c90_fprintf"}
!2381 = !{!2382}
!2382 = distinct !{!2382, !2380, !"ext_400c90_fprintf: argument 1"}
!2383 = !{!2384}
!2384 = distinct !{!2384, !2385, !"ext_400c90_fprintf: argument 0"}
!2385 = distinct !{!2385, !"ext_400c90_fprintf"}
!2386 = !{!2387}
!2387 = distinct !{!2387, !2385, !"ext_400c90_fprintf: argument 1"}
!2388 = !{!2389}
!2389 = distinct !{!2389, !2390, !"ext_400c90_fprintf: argument 0"}
!2390 = distinct !{!2390, !"ext_400c90_fprintf"}
!2391 = !{!2392}
!2392 = distinct !{!2392, !2390, !"ext_400c90_fprintf: argument 1"}
!2393 = !{!2394}
!2394 = distinct !{!2394, !2395, !"ext_400c90_fprintf: argument 0"}
!2395 = distinct !{!2395, !"ext_400c90_fprintf"}
!2396 = !{!2397}
!2397 = distinct !{!2397, !2395, !"ext_400c90_fprintf: argument 1"}
!2398 = !{!2399}
!2399 = distinct !{!2399, !2400, !"ext_400c90_fprintf: argument 0"}
!2400 = distinct !{!2400, !"ext_400c90_fprintf"}
!2401 = !{!2402}
!2402 = distinct !{!2402, !2400, !"ext_400c90_fprintf: argument 1"}
!2403 = !{!2404}
!2404 = distinct !{!2404, !2405, !"ext_400c90_fprintf: argument 0"}
!2405 = distinct !{!2405, !"ext_400c90_fprintf"}
!2406 = !{!2407}
!2407 = distinct !{!2407, !2405, !"ext_400c90_fprintf: argument 1"}
!2408 = !{!2409}
!2409 = distinct !{!2409, !2410, !"ext_400c90_fprintf: argument 0"}
!2410 = distinct !{!2410, !"ext_400c90_fprintf"}
!2411 = !{!2412}
!2412 = distinct !{!2412, !2410, !"ext_400c90_fprintf: argument 1"}
!2413 = !{!2414}
!2414 = distinct !{!2414, !2415, !"ext_400c90_fprintf: argument 0"}
!2415 = distinct !{!2415, !"ext_400c90_fprintf"}
!2416 = !{!2417}
!2417 = distinct !{!2417, !2415, !"ext_400c90_fprintf: argument 1"}
!2418 = !{!2419}
!2419 = distinct !{!2419, !2420, !"ext_400b90_free: argument 0"}
!2420 = distinct !{!2420, !"ext_400b90_free"}
!2421 = !{!2422}
!2422 = distinct !{!2422, !2420, !"ext_400b90_free: argument 1"}
!2423 = !{!2424}
!2424 = distinct !{!2424, !2425, !"ext_400b90_free: argument 0"}
!2425 = distinct !{!2425, !"ext_400b90_free"}
!2426 = !{!2427}
!2427 = distinct !{!2427, !2425, !"ext_400b90_free: argument 1"}
!2428 = !{!2429}
!2429 = distinct !{!2429, !2430, !"ext_400b90_free: argument 0"}
!2430 = distinct !{!2430, !"ext_400b90_free"}
!2431 = !{!2432}
!2432 = distinct !{!2432, !2430, !"ext_400b90_free: argument 1"}
!2433 = !{!2434}
!2434 = distinct !{!2434, !2435, !"ext_610000_fclose: argument 0"}
!2435 = distinct !{!2435, !"ext_610000_fclose"}
!2436 = !{!2437}
!2437 = distinct !{!2437, !2435, !"ext_610000_fclose: argument 1"}
!2438 = !{!2439}
!2439 = distinct !{!2439, !2440, !"ext_610000_fclose: argument 0"}
!2440 = distinct !{!2440, !"ext_610000_fclose"}
!2441 = !{!2442}
!2442 = distinct !{!2442, !2440, !"ext_610000_fclose: argument 1"}
!2443 = !{!2444}
!2444 = distinct !{!2444, !2445, !"ext_610000_fclose: argument 0"}
!2445 = distinct !{!2445, !"ext_610000_fclose"}
!2446 = !{!2447}
!2447 = distinct !{!2447, !2445, !"ext_610000_fclose: argument 1"}
!2448 = !{!2449}
!2449 = distinct !{!2449, !2450, !"ext_610000_fclose: argument 0"}
!2450 = distinct !{!2450, !"ext_610000_fclose"}
!2451 = !{!2452}
!2452 = distinct !{!2452, !2450, !"ext_610000_fclose: argument 1"}
!2453 = !{!2454}
!2454 = distinct !{!2454, !2455, !"ext_610000_fclose: argument 0"}
!2455 = distinct !{!2455, !"ext_610000_fclose"}
!2456 = !{!2457}
!2457 = distinct !{!2457, !2455, !"ext_610000_fclose: argument 1"}
!2458 = !{!2459}
!2459 = distinct !{!2459, !2460, !"ext_610000_fclose: argument 0"}
!2460 = distinct !{!2460, !"ext_610000_fclose"}
!2461 = !{!2462}
!2462 = distinct !{!2462, !2460, !"ext_610000_fclose: argument 1"}
!2463 = !{!2464}
!2464 = distinct !{!2464, !2465, !"ext_610000_fclose: argument 0"}
!2465 = distinct !{!2465, !"ext_610000_fclose"}
!2466 = !{!2467}
!2467 = distinct !{!2467, !2465, !"ext_610000_fclose: argument 1"}
!2468 = !{!2469}
!2469 = distinct !{!2469, !2470, !"ext_400b90_free: argument 0"}
!2470 = distinct !{!2470, !"ext_400b90_free"}
!2471 = !{!2472}
!2472 = distinct !{!2472, !2470, !"ext_400b90_free: argument 1"}
!2473 = !{!2474}
!2474 = distinct !{!2474, !2475, !"ext_400b90_free: argument 0"}
!2475 = distinct !{!2475, !"ext_400b90_free"}
!2476 = !{!2477}
!2477 = distinct !{!2477, !2475, !"ext_400b90_free: argument 1"}
!2478 = !{!2479}
!2479 = distinct !{!2479, !2480, !"ext_400cf0_fseek: argument 0"}
!2480 = distinct !{!2480, !"ext_400cf0_fseek"}
!2481 = !{!2482}
!2482 = distinct !{!2482, !2480, !"ext_400cf0_fseek: argument 1"}
!2483 = !{!2484}
!2484 = distinct !{!2484, !2485, !"ext_400be0_qsort: argument 0"}
!2485 = distinct !{!2485, !"ext_400be0_qsort"}
!2486 = !{!2487}
!2487 = distinct !{!2487, !2485, !"ext_400be0_qsort: argument 1"}
!2488 = !{!2489}
!2489 = distinct !{!2489, !2490, !"ext_610068_malloc: argument 0"}
!2490 = distinct !{!2490, !"ext_610068_malloc"}
!2491 = !{!2492}
!2492 = distinct !{!2492, !2490, !"ext_610068_malloc: argument 1"}
!2493 = !{!2494}
!2494 = distinct !{!2494, !2495, !"ext_400b90_free: argument 0"}
!2495 = distinct !{!2495, !"ext_400b90_free"}
!2496 = !{!2497}
!2497 = distinct !{!2497, !2495, !"ext_400b90_free: argument 1"}
!2498 = !{!2499}
!2499 = distinct !{!2499, !2500, !"ext_6100b0_fwrite: argument 0"}
!2500 = distinct !{!2500, !"ext_6100b0_fwrite"}
!2501 = !{!2502}
!2502 = distinct !{!2502, !2500, !"ext_6100b0_fwrite: argument 1"}
!2503 = !{!2504}
!2504 = distinct !{!2504, !2505, !"ext_400c90_fprintf: argument 0"}
!2505 = distinct !{!2505, !"ext_400c90_fprintf"}
!2506 = !{!2507}
!2507 = distinct !{!2507, !2505, !"ext_400c90_fprintf: argument 1"}
!2508 = !{!2509}
!2509 = distinct !{!2509, !2510, !"ext_6100b0_fwrite: argument 0"}
!2510 = distinct !{!2510, !"ext_6100b0_fwrite"}
!2511 = !{!2512}
!2512 = distinct !{!2512, !2510, !"ext_6100b0_fwrite: argument 1"}
!2513 = !{!2514}
!2514 = distinct !{!2514, !2515, !"ext_6100a0_sprintf: argument 0"}
!2515 = distinct !{!2515, !"ext_6100a0_sprintf"}
!2516 = !{!2517}
!2517 = distinct !{!2517, !2515, !"ext_6100a0_sprintf: argument 1"}
!2518 = !{!2519}
!2519 = distinct !{!2519, !2520, !"ext_400c90_fprintf: argument 0"}
!2520 = distinct !{!2520, !"ext_400c90_fprintf"}
!2521 = !{!2522}
!2522 = distinct !{!2522, !2520, !"ext_400c90_fprintf: argument 1"}
!2523 = !{!2524}
!2524 = distinct !{!2524, !2525, !"ext_400c90_fprintf: argument 0"}
!2525 = distinct !{!2525, !"ext_400c90_fprintf"}
!2526 = !{!2527}
!2527 = distinct !{!2527, !2525, !"ext_400c90_fprintf: argument 1"}
!2528 = !{!2529}
!2529 = distinct !{!2529, !2530, !"ext_400c90_fprintf: argument 0"}
!2530 = distinct !{!2530, !"ext_400c90_fprintf"}
!2531 = !{!2532}
!2532 = distinct !{!2532, !2530, !"ext_400c90_fprintf: argument 1"}
!2533 = !{!2534}
!2534 = distinct !{!2534, !2535, !"ext_400c90_fprintf: argument 0"}
!2535 = distinct !{!2535, !"ext_400c90_fprintf"}
!2536 = !{!2537}
!2537 = distinct !{!2537, !2535, !"ext_400c90_fprintf: argument 1"}
!2538 = !{!2539}
!2539 = distinct !{!2539, !2540, !"ext_60fff8_fread: argument 0"}
!2540 = distinct !{!2540, !"ext_60fff8_fread"}
!2541 = !{!2542}
!2542 = distinct !{!2542, !2540, !"ext_60fff8_fread: argument 1"}
!2543 = !{!2544}
!2544 = distinct !{!2544, !2545, !"ext_60fff8_fread: argument 0"}
!2545 = distinct !{!2545, !"ext_60fff8_fread"}
!2546 = !{!2547}
!2547 = distinct !{!2547, !2545, !"ext_60fff8_fread: argument 1"}
!2548 = !{!2549}
!2549 = distinct !{!2549, !2550, !"ext_400b90_free: argument 0"}
!2550 = distinct !{!2550, !"ext_400b90_free"}
!2551 = !{!2552}
!2552 = distinct !{!2552, !2550, !"ext_400b90_free: argument 1"}
!2553 = !{!2554}
!2554 = distinct !{!2554, !2555, !"ext_400b90_free: argument 0"}
!2555 = distinct !{!2555, !"ext_400b90_free"}
!2556 = !{!2557}
!2557 = distinct !{!2557, !2555, !"ext_400b90_free: argument 1"}
!2558 = !{!2559}
!2559 = distinct !{!2559, !2560, !"ext_400b90_free: argument 0"}
!2560 = distinct !{!2560, !"ext_400b90_free"}
!2561 = !{!2562}
!2562 = distinct !{!2562, !2560, !"ext_400b90_free: argument 1"}
!2563 = !{!2564}
!2564 = distinct !{!2564, !2565, !"ext_400b90_free: argument 0"}
!2565 = distinct !{!2565, !"ext_400b90_free"}
!2566 = !{!2567}
!2567 = distinct !{!2567, !2565, !"ext_400b90_free: argument 1"}
!2568 = !{!2569}
!2569 = distinct !{!2569, !2570, !"ext_400c90_fprintf: argument 0"}
!2570 = distinct !{!2570, !"ext_400c90_fprintf"}
!2571 = !{!2572}
!2572 = distinct !{!2572, !2570, !"ext_400c90_fprintf: argument 1"}
!2573 = !{!2574}
!2574 = distinct !{!2574, !2575, !"ext_400b90_free: argument 0"}
!2575 = distinct !{!2575, !"ext_400b90_free"}
!2576 = !{!2577}
!2577 = distinct !{!2577, !2575, !"ext_400b90_free: argument 1"}
!2578 = !{!2579}
!2579 = distinct !{!2579, !2580, !"ext_400b90_free: argument 0"}
!2580 = distinct !{!2580, !"ext_400b90_free"}
!2581 = !{!2582}
!2582 = distinct !{!2582, !2580, !"ext_400b90_free: argument 1"}
!2583 = !{!2584}
!2584 = distinct !{!2584, !2585, !"ext_400b90_free: argument 0"}
!2585 = distinct !{!2585, !"ext_400b90_free"}
!2586 = !{!2587}
!2587 = distinct !{!2587, !2585, !"ext_400b90_free: argument 1"}
!2588 = !{!2589}
!2589 = distinct !{!2589, !2590, !"ext_400c70_calloc: argument 0"}
!2590 = distinct !{!2590, !"ext_400c70_calloc"}
!2591 = !{!2592}
!2592 = distinct !{!2592, !2590, !"ext_400c70_calloc: argument 1"}
!2593 = !{!2594}
!2594 = distinct !{!2594, !2595, !"ext_6100a0_sprintf: argument 0"}
!2595 = distinct !{!2595, !"ext_6100a0_sprintf"}
!2596 = !{!2597}
!2597 = distinct !{!2597, !2595, !"ext_6100a0_sprintf: argument 1"}
!2598 = !{!2599}
!2599 = distinct !{!2599, !2600, !"ext_610088_fopen: argument 0"}
!2600 = distinct !{!2600, !"ext_610088_fopen"}
!2601 = !{!2602}
!2602 = distinct !{!2602, !2600, !"ext_610088_fopen: argument 1"}
!2603 = !{!2604}
!2604 = distinct !{!2604, !2605, !"ext_400be0_qsort: argument 0"}
!2605 = distinct !{!2605, !"ext_400be0_qsort"}
!2606 = !{!2607}
!2607 = distinct !{!2607, !2605, !"ext_400be0_qsort: argument 1"}
!2608 = !{!2609}
!2609 = distinct !{!2609, !2610, !"ext_400b90_free: argument 0"}
!2610 = distinct !{!2610, !"ext_400b90_free"}
!2611 = !{!2612}
!2612 = distinct !{!2612, !2610, !"ext_400b90_free: argument 1"}
!2613 = !{!2614}
!2614 = distinct !{!2614, !2615, !"ext_400b90_free: argument 0"}
!2615 = distinct !{!2615, !"ext_400b90_free"}
!2616 = !{!2617}
!2617 = distinct !{!2617, !2615, !"ext_400b90_free: argument 1"}
!2618 = !{!2619}
!2619 = distinct !{!2619, !2620, !"ext_610068_malloc: argument 0"}
!2620 = distinct !{!2620, !"ext_610068_malloc"}
!2621 = !{!2622}
!2622 = distinct !{!2622, !2620, !"ext_610068_malloc: argument 1"}
!2623 = !{!2624}
!2624 = distinct !{!2624, !2625, !"ext_400cf0_fseek: argument 0"}
!2625 = distinct !{!2625, !"ext_400cf0_fseek"}
!2626 = !{!2627}
!2627 = distinct !{!2627, !2625, !"ext_400cf0_fseek: argument 1"}
!2628 = !{!2629}
!2629 = distinct !{!2629, !2630, !"ext_400c90_fprintf: argument 0"}
!2630 = distinct !{!2630, !"ext_400c90_fprintf"}
!2631 = !{!2632}
!2632 = distinct !{!2632, !2630, !"ext_400c90_fprintf: argument 1"}
!2633 = !{!2634}
!2634 = distinct !{!2634, !2635, !"ext_400c90_fprintf: argument 0"}
!2635 = distinct !{!2635, !"ext_400c90_fprintf"}
!2636 = !{!2637}
!2637 = distinct !{!2637, !2635, !"ext_400c90_fprintf: argument 1"}
!2638 = !{!2639}
!2639 = distinct !{!2639, !2640, !"ext_400c90_fprintf: argument 0"}
!2640 = distinct !{!2640, !"ext_400c90_fprintf"}
!2641 = !{!2642}
!2642 = distinct !{!2642, !2640, !"ext_400c90_fprintf: argument 1"}
!2643 = !{!2644}
!2644 = distinct !{!2644, !2645, !"ext_400cf0_fseek: argument 0"}
!2645 = distinct !{!2645, !"ext_400cf0_fseek"}
!2646 = !{!2647}
!2647 = distinct !{!2647, !2645, !"ext_400cf0_fseek: argument 1"}
!2648 = !{!2649}
!2649 = distinct !{!2649, !2650, !"ext_400b90_free: argument 0"}
!2650 = distinct !{!2650, !"ext_400b90_free"}
!2651 = !{!2652}
!2652 = distinct !{!2652, !2650, !"ext_400b90_free: argument 1"}
!2653 = !{!2654}
!2654 = distinct !{!2654, !2655, !"ext_400c90_fprintf: argument 0"}
!2655 = distinct !{!2655, !"ext_400c90_fprintf"}
!2656 = !{!2657}
!2657 = distinct !{!2657, !2655, !"ext_400c90_fprintf: argument 1"}
!2658 = !{!2659}
!2659 = distinct !{!2659, !2660, !"ext_6100a8_exit: argument 0"}
!2660 = distinct !{!2660, !"ext_6100a8_exit"}
!2661 = !{!2662}
!2662 = distinct !{!2662, !2660, !"ext_6100a8_exit: argument 1"}
!2663 = !{!2664}
!2664 = distinct !{!2664, !2665, !"ext_610060_memcpy: argument 0"}
!2665 = distinct !{!2665, !"ext_610060_memcpy"}
!2666 = !{!2667}
!2667 = distinct !{!2667, !2665, !"ext_610060_memcpy: argument 1"}
!2668 = !{!2669}
!2669 = distinct !{!2669, !2670, !"ext_400c90_fprintf: argument 0"}
!2670 = distinct !{!2670, !"ext_400c90_fprintf"}
!2671 = !{!2672}
!2672 = distinct !{!2672, !2670, !"ext_400c90_fprintf: argument 1"}
!2673 = !{!2674}
!2674 = distinct !{!2674, !2675, !"ext_400c90_fprintf: argument 0"}
!2675 = distinct !{!2675, !"ext_400c90_fprintf"}
!2676 = !{!2677}
!2677 = distinct !{!2677, !2675, !"ext_400c90_fprintf: argument 1"}
!2678 = !{!2679}
!2679 = distinct !{!2679, !2680, !"ext_400c90_fprintf: argument 0"}
!2680 = distinct !{!2680, !"ext_400c90_fprintf"}
!2681 = !{!2682}
!2682 = distinct !{!2682, !2680, !"ext_400c90_fprintf: argument 1"}
!2683 = !{!2684}
!2684 = distinct !{!2684, !2685, !"ext_60fff8_fread: argument 0"}
!2685 = distinct !{!2685, !"ext_60fff8_fread"}
!2686 = !{!2687}
!2687 = distinct !{!2687, !2685, !"ext_60fff8_fread: argument 1"}
!2688 = !{!2689}
!2689 = distinct !{!2689, !2690, !"ext_610058_ftell: argument 0"}
!2690 = distinct !{!2690, !"ext_610058_ftell"}
!2691 = !{!2692}
!2692 = distinct !{!2692, !2690, !"ext_610058_ftell: argument 1"}
!2693 = !{!2694}
!2694 = distinct !{!2694, !2695, !"ext_400c90_fprintf: argument 0"}
!2695 = distinct !{!2695, !"ext_400c90_fprintf"}
!2696 = !{!2697}
!2697 = distinct !{!2697, !2695, !"ext_400c90_fprintf: argument 1"}
!2698 = !{!2699}
!2699 = distinct !{!2699, !2700, !"ext_400c90_fprintf: argument 0"}
!2700 = distinct !{!2700, !"ext_400c90_fprintf"}
!2701 = !{!2702}
!2702 = distinct !{!2702, !2700, !"ext_400c90_fprintf: argument 1"}
!2703 = !{!2704}
!2704 = distinct !{!2704, !2705, !"ext_400cf0_fseek: argument 0"}
!2705 = distinct !{!2705, !"ext_400cf0_fseek"}
!2706 = !{!2707}
!2707 = distinct !{!2707, !2705, !"ext_400cf0_fseek: argument 1"}
!2708 = !{!2709}
!2709 = distinct !{!2709, !2710, !"ext_400cf0_fseek: argument 0"}
!2710 = distinct !{!2710, !"ext_400cf0_fseek"}
!2711 = !{!2712}
!2712 = distinct !{!2712, !2710, !"ext_400cf0_fseek: argument 1"}
!2713 = !{!2714}
!2714 = distinct !{!2714, !2715, !"ext_400c70_calloc: argument 0"}
!2715 = distinct !{!2715, !"ext_400c70_calloc"}
!2716 = !{!2717}
!2717 = distinct !{!2717, !2715, !"ext_400c70_calloc: argument 1"}
!2718 = !{!2719}
!2719 = distinct !{!2719, !2720, !"ext_6100a0_sprintf: argument 0"}
!2720 = distinct !{!2720, !"ext_6100a0_sprintf"}
!2721 = !{!2722}
!2722 = distinct !{!2722, !2720, !"ext_6100a0_sprintf: argument 1"}
!2723 = !{!2724}
!2724 = distinct !{!2724, !2725, !"ext_610088_fopen: argument 0"}
!2725 = distinct !{!2725, !"ext_610088_fopen"}
!2726 = !{!2727}
!2727 = distinct !{!2727, !2725, !"ext_610088_fopen: argument 1"}
!2728 = !{!2729}
!2729 = distinct !{!2729, !2730, !"ext_400c90_fprintf: argument 0"}
!2730 = distinct !{!2730, !"ext_400c90_fprintf"}
!2731 = !{!2732}
!2732 = distinct !{!2732, !2730, !"ext_400c90_fprintf: argument 1"}
!2733 = !{!2734}
!2734 = distinct !{!2734, !2735, !"ext_400c90_fprintf: argument 0"}
!2735 = distinct !{!2735, !"ext_400c90_fprintf"}
!2736 = !{!2737}
!2737 = distinct !{!2737, !2735, !"ext_400c90_fprintf: argument 1"}
!2738 = !{!2739}
!2739 = distinct !{!2739, !2740, !"ext_400c90_fprintf: argument 0"}
!2740 = distinct !{!2740, !"ext_400c90_fprintf"}
!2741 = !{!2742}
!2742 = distinct !{!2742, !2740, !"ext_400c90_fprintf: argument 1"}
!2743 = !{!2744}
!2744 = distinct !{!2744, !2745, !"ext_400c90_fprintf: argument 0"}
!2745 = distinct !{!2745, !"ext_400c90_fprintf"}
!2746 = !{!2747}
!2747 = distinct !{!2747, !2745, !"ext_400c90_fprintf: argument 1"}
!2748 = !{!2749}
!2749 = distinct !{!2749, !2750, !"ext_400c90_fprintf: argument 0"}
!2750 = distinct !{!2750, !"ext_400c90_fprintf"}
!2751 = !{!2752}
!2752 = distinct !{!2752, !2750, !"ext_400c90_fprintf: argument 1"}
!2753 = !{!2754}
!2754 = distinct !{!2754, !2755, !"ext_400c90_fprintf: argument 0"}
!2755 = distinct !{!2755, !"ext_400c90_fprintf"}
!2756 = !{!2757}
!2757 = distinct !{!2757, !2755, !"ext_400c90_fprintf: argument 1"}
!2758 = !{!2759}
!2759 = distinct !{!2759, !2760, !"ext_400c90_fprintf: argument 0"}
!2760 = distinct !{!2760, !"ext_400c90_fprintf"}
!2761 = !{!2762}
!2762 = distinct !{!2762, !2760, !"ext_400c90_fprintf: argument 1"}
!2763 = !{!2764}
!2764 = distinct !{!2764, !2765, !"ext_610000_fclose: argument 0"}
!2765 = distinct !{!2765, !"ext_610000_fclose"}
!2766 = !{!2767}
!2767 = distinct !{!2767, !2765, !"ext_610000_fclose: argument 1"}
!2768 = !{!2769}
!2769 = distinct !{!2769, !2770, !"ext_400cf0_fseek: argument 0"}
!2770 = distinct !{!2770, !"ext_400cf0_fseek"}
!2771 = !{!2772}
!2772 = distinct !{!2772, !2770, !"ext_400cf0_fseek: argument 1"}
!2773 = !{!2774}
!2774 = distinct !{!2774, !2775, !"ext_60fff8_fread: argument 0"}
!2775 = distinct !{!2775, !"ext_60fff8_fread"}
!2776 = !{!2777}
!2777 = distinct !{!2777, !2775, !"ext_60fff8_fread: argument 1"}
!2778 = !{!2779}
!2779 = distinct !{!2779, !2780, !"ext_400c90_fprintf: argument 0"}
!2780 = distinct !{!2780, !"ext_400c90_fprintf"}
!2781 = !{!2782}
!2782 = distinct !{!2782, !2780, !"ext_400c90_fprintf: argument 1"}
!2783 = !{!2784}
!2784 = distinct !{!2784, !2785, !"ext_6100a8_exit: argument 0"}
!2785 = distinct !{!2785, !"ext_6100a8_exit"}
!2786 = !{!2787}
!2787 = distinct !{!2787, !2785, !"ext_6100a8_exit: argument 1"}
!2788 = !{!2789}
!2789 = distinct !{!2789, !2790, !"ext_610030___libc_start_main: argument 0"}
!2790 = distinct !{!2790, !"ext_610030___libc_start_main"}
!2791 = !{!2792}
!2792 = distinct !{!2792, !2790, !"ext_610030___libc_start_main: argument 1"}
!2793 = !{!2794}
!2794 = distinct !{!2794, !2795, !"ext_610078___isoc99_sscanf: argument 0"}
!2795 = distinct !{!2795, !"ext_610078___isoc99_sscanf"}
!2796 = !{!2797}
!2797 = distinct !{!2797, !2795, !"ext_610078___isoc99_sscanf: argument 1"}
!2798 = !{!2799}
!2799 = distinct !{!2799, !2800, !"ext_610078___isoc99_sscanf: argument 0"}
!2800 = distinct !{!2800, !"ext_610078___isoc99_sscanf"}
!2801 = !{!2802}
!2802 = distinct !{!2802, !2800, !"ext_610078___isoc99_sscanf: argument 1"}
!2803 = !{!2804}
!2804 = distinct !{!2804, !2805, !"ext_400d60_strstr: argument 0"}
!2805 = distinct !{!2805, !"ext_400d60_strstr"}
!2806 = !{!2807}
!2807 = distinct !{!2807, !2805, !"ext_400d60_strstr: argument 1"}
!2808 = !{!2809}
!2809 = distinct !{!2809, !2810, !"ext_400d60_strstr: argument 0"}
!2810 = distinct !{!2810, !"ext_400d60_strstr"}
!2811 = !{!2812}
!2812 = distinct !{!2812, !2810, !"ext_400d60_strstr: argument 1"}
!2813 = !{!2814}
!2814 = distinct !{!2814, !2815, !"ext_610078___isoc99_sscanf: argument 0"}
!2815 = distinct !{!2815, !"ext_610078___isoc99_sscanf"}
!2816 = !{!2817}
!2817 = distinct !{!2817, !2815, !"ext_610078___isoc99_sscanf: argument 1"}
!2818 = !{!2819}
!2819 = distinct !{!2819, !2820, !"ext_610038_fgets: argument 0"}
!2820 = distinct !{!2820, !"ext_610038_fgets"}
!2821 = !{!2822}
!2822 = distinct !{!2822, !2820, !"ext_610038_fgets: argument 1"}
!2823 = !{!2824}
!2824 = distinct !{!2824, !2825, !"ext_610078___isoc99_sscanf: argument 0"}
!2825 = distinct !{!2825, !"ext_610078___isoc99_sscanf"}
!2826 = !{!2827}
!2827 = distinct !{!2827, !2825, !"ext_610078___isoc99_sscanf: argument 1"}
!2828 = !{!2829}
!2829 = distinct !{!2829, !2830, !"ext_400c10_strlen: argument 0"}
!2830 = distinct !{!2830, !"ext_400c10_strlen"}
!2831 = !{!2832}
!2832 = distinct !{!2832, !2830, !"ext_400c10_strlen: argument 1"}
!2833 = !{!2834}
!2834 = distinct !{!2834, !2835, !"ext_610068_malloc: argument 0"}
!2835 = distinct !{!2835, !"ext_610068_malloc"}
!2836 = !{!2837}
!2837 = distinct !{!2837, !2835, !"ext_610068_malloc: argument 1"}
!2838 = !{!2839}
!2839 = distinct !{!2839, !2840, !"ext_610078___isoc99_sscanf: argument 0"}
!2840 = distinct !{!2840, !"ext_610078___isoc99_sscanf"}
!2841 = !{!2842}
!2842 = distinct !{!2842, !2840, !"ext_610078___isoc99_sscanf: argument 1"}
!2843 = !{!2844}
!2844 = distinct !{!2844, !2845, !"ext_610000_fclose: argument 0"}
!2845 = distinct !{!2845, !"ext_610000_fclose"}
!2846 = !{!2847}
!2847 = distinct !{!2847, !2845, !"ext_610000_fclose: argument 1"}
!2848 = !{!2849}
!2849 = distinct !{!2849, !2850, !"ext_400c10_strlen: argument 0"}
!2850 = distinct !{!2850, !"ext_400c10_strlen"}
!2851 = !{!2852}
!2852 = distinct !{!2852, !2850, !"ext_400c10_strlen: argument 1"}
!2853 = !{!2854}
!2854 = distinct !{!2854, !2855, !"ext_610068_malloc: argument 0"}
!2855 = distinct !{!2855, !"ext_610068_malloc"}
!2856 = !{!2857}
!2857 = distinct !{!2857, !2855, !"ext_610068_malloc: argument 1"}
!2858 = !{!2859}
!2859 = distinct !{!2859, !2860, !"ext_610068_malloc: argument 0"}
!2860 = distinct !{!2860, !"ext_610068_malloc"}
!2861 = !{!2862}
!2862 = distinct !{!2862, !2860, !"ext_610068_malloc: argument 1"}
!2863 = !{!2864}
!2864 = distinct !{!2864, !2865, !"ext_610068_malloc: argument 0"}
!2865 = distinct !{!2865, !"ext_610068_malloc"}
!2866 = !{!2867}
!2867 = distinct !{!2867, !2865, !"ext_610068_malloc: argument 1"}
!2868 = !{!2869}
!2869 = distinct !{!2869, !2870, !"ext_610068_malloc: argument 0"}
!2870 = distinct !{!2870, !"ext_610068_malloc"}
!2871 = !{!2872}
!2872 = distinct !{!2872, !2870, !"ext_610068_malloc: argument 1"}
!2873 = !{!2874}
!2874 = distinct !{!2874, !2875, !"ext_610068_malloc: argument 0"}
!2875 = distinct !{!2875, !"ext_610068_malloc"}
!2876 = !{!2877}
!2877 = distinct !{!2877, !2875, !"ext_610068_malloc: argument 1"}
!2878 = !{!2879}
!2879 = distinct !{!2879, !2880, !"ext_610068_malloc: argument 0"}
!2880 = distinct !{!2880, !"ext_610068_malloc"}
!2881 = !{!2882}
!2882 = distinct !{!2882, !2880, !"ext_610068_malloc: argument 1"}
!2883 = !{!2884}
!2884 = distinct !{!2884, !2885, !"ext_610068_malloc: argument 0"}
!2885 = distinct !{!2885, !"ext_610068_malloc"}
!2886 = !{!2887}
!2887 = distinct !{!2887, !2885, !"ext_610068_malloc: argument 1"}
!2888 = !{!2889}
!2889 = distinct !{!2889, !2890, !"ext_610068_malloc: argument 0"}
!2890 = distinct !{!2890, !"ext_610068_malloc"}
!2891 = !{!2892}
!2892 = distinct !{!2892, !2890, !"ext_610068_malloc: argument 1"}
!2893 = !{!2894}
!2894 = distinct !{!2894, !2895, !"ext_610068_malloc: argument 0"}
!2895 = distinct !{!2895, !"ext_610068_malloc"}
!2896 = !{!2897}
!2897 = distinct !{!2897, !2895, !"ext_610068_malloc: argument 1"}
!2898 = !{!2899}
!2899 = distinct !{!2899, !2900, !"ext_400c90_fprintf: argument 0"}
!2900 = distinct !{!2900, !"ext_400c90_fprintf"}
!2901 = !{!2902}
!2902 = distinct !{!2902, !2900, !"ext_400c90_fprintf: argument 1"}
!2903 = !{!2904}
!2904 = distinct !{!2904, !2905, !"ext_400c90_fprintf: argument 0"}
!2905 = distinct !{!2905, !"ext_400c90_fprintf"}
!2906 = !{!2907}
!2907 = distinct !{!2907, !2905, !"ext_400c90_fprintf: argument 1"}
!2908 = !{!2909}
!2909 = distinct !{!2909, !2910, !"ext_610020_gettimeofday: argument 0"}
!2910 = distinct !{!2910, !"ext_610020_gettimeofday"}
!2911 = !{!2912}
!2912 = distinct !{!2912, !2910, !"ext_610020_gettimeofday: argument 1"}
!2913 = !{!2914}
!2914 = distinct !{!2914, !2915, !"ext_400cf0_fseek: argument 0"}
!2915 = distinct !{!2915, !"ext_400cf0_fseek"}
!2916 = !{!2917}
!2917 = distinct !{!2917, !2915, !"ext_400cf0_fseek: argument 1"}
!2918 = !{!2919}
!2919 = distinct !{!2919, !2920, !"ext_400c90_fprintf: argument 0"}
!2920 = distinct !{!2920, !"ext_400c90_fprintf"}
!2921 = !{!2922}
!2922 = distinct !{!2922, !2920, !"ext_400c90_fprintf: argument 1"}
!2923 = !{!2924}
!2924 = distinct !{!2924, !2925, !"ext_610068_malloc: argument 0"}
!2925 = distinct !{!2925, !"ext_610068_malloc"}
!2926 = !{!2927}
!2927 = distinct !{!2927, !2925, !"ext_610068_malloc: argument 1"}
!2928 = !{!2929}
!2929 = distinct !{!2929, !2930, !"ext_400c90_fprintf: argument 0"}
!2930 = distinct !{!2930, !"ext_400c90_fprintf"}
!2931 = !{!2932}
!2932 = distinct !{!2932, !2930, !"ext_400c90_fprintf: argument 1"}
!2933 = !{!2934}
!2934 = distinct !{!2934, !2935, !"ext_400c90_fprintf: argument 0"}
!2935 = distinct !{!2935, !"ext_400c90_fprintf"}
!2936 = !{!2937}
!2937 = distinct !{!2937, !2935, !"ext_400c90_fprintf: argument 1"}
!2938 = !{!2939}
!2939 = distinct !{!2939, !2940, !"ext_610098_strcat: argument 0"}
!2940 = distinct !{!2940, !"ext_610098_strcat"}
!2941 = !{!2942}
!2942 = distinct !{!2942, !2940, !"ext_610098_strcat: argument 1"}
!2943 = !{!2944}
!2944 = distinct !{!2944, !2945, !"ext_610068_malloc: argument 0"}
!2945 = distinct !{!2945, !"ext_610068_malloc"}
!2946 = !{!2947}
!2947 = distinct !{!2947, !2945, !"ext_610068_malloc: argument 1"}
!2948 = !{!2949}
!2949 = distinct !{!2949, !2950, !"ext_610068_malloc: argument 0"}
!2950 = distinct !{!2950, !"ext_610068_malloc"}
!2951 = !{!2952}
!2952 = distinct !{!2952, !2950, !"ext_610068_malloc: argument 1"}
!2953 = !{!2954}
!2954 = distinct !{!2954, !2955, !"ext_60ffe0_strcpy: argument 0"}
!2955 = distinct !{!2955, !"ext_60ffe0_strcpy"}
!2956 = !{!2957}
!2957 = distinct !{!2957, !2955, !"ext_60ffe0_strcpy: argument 1"}
!2958 = !{!2959}
!2959 = distinct !{!2959, !2960, !"ext_60ffe0_strcpy: argument 0"}
!2960 = distinct !{!2960, !"ext_60ffe0_strcpy"}
!2961 = !{!2962}
!2962 = distinct !{!2962, !2960, !"ext_60ffe0_strcpy: argument 1"}
!2963 = !{!2964}
!2964 = distinct !{!2964, !2965, !"ext_6100a0_sprintf: argument 0"}
!2965 = distinct !{!2965, !"ext_6100a0_sprintf"}
!2966 = !{!2967}
!2967 = distinct !{!2967, !2965, !"ext_6100a0_sprintf: argument 1"}
!2968 = !{!2969}
!2969 = distinct !{!2969, !2970, !"ext_610098_strcat: argument 0"}
!2970 = distinct !{!2970, !"ext_610098_strcat"}
!2971 = !{!2972}
!2972 = distinct !{!2972, !2970, !"ext_610098_strcat: argument 1"}
!2973 = !{!2974}
!2974 = distinct !{!2974, !2975, !"ext_400c90_fprintf: argument 0"}
!2975 = distinct !{!2975, !"ext_400c90_fprintf"}
!2976 = !{!2977}
!2977 = distinct !{!2977, !2975, !"ext_400c90_fprintf: argument 1"}
!2978 = !{!2979}
!2979 = distinct !{!2979, !2980, !"ext_400c90_fprintf: argument 0"}
!2980 = distinct !{!2980, !"ext_400c90_fprintf"}
!2981 = !{!2982}
!2982 = distinct !{!2982, !2980, !"ext_400c90_fprintf: argument 1"}
!2983 = !{!2984}
!2984 = distinct !{!2984, !2985, !"ext_610068_malloc: argument 0"}
!2985 = distinct !{!2985, !"ext_610068_malloc"}
!2986 = !{!2987}
!2987 = distinct !{!2987, !2985, !"ext_610068_malloc: argument 1"}
!2988 = !{!2989}
!2989 = distinct !{!2989, !2990, !"ext_610098_strcat: argument 0"}
!2990 = distinct !{!2990, !"ext_610098_strcat"}
!2991 = !{!2992}
!2992 = distinct !{!2992, !2990, !"ext_610098_strcat: argument 1"}
!2993 = !{!2994}
!2994 = distinct !{!2994, !2995, !"ext_610098_strcat: argument 0"}
!2995 = distinct !{!2995, !"ext_610098_strcat"}
!2996 = !{!2997}
!2997 = distinct !{!2997, !2995, !"ext_610098_strcat: argument 1"}
!2998 = !{!2999}
!2999 = distinct !{!2999, !3000, !"ext_610098_strcat: argument 0"}
!3000 = distinct !{!3000, !"ext_610098_strcat"}
!3001 = !{!3002}
!3002 = distinct !{!3002, !3000, !"ext_610098_strcat: argument 1"}
!3003 = !{!3004}
!3004 = distinct !{!3004, !3005, !"ext_610068_malloc: argument 0"}
!3005 = distinct !{!3005, !"ext_610068_malloc"}
!3006 = !{!3007}
!3007 = distinct !{!3007, !3005, !"ext_610068_malloc: argument 1"}
!3008 = !{!3009}
!3009 = distinct !{!3009, !3010, !"ext_400c90_fprintf: argument 0"}
!3010 = distinct !{!3010, !"ext_400c90_fprintf"}
!3011 = !{!3012}
!3012 = distinct !{!3012, !3010, !"ext_400c90_fprintf: argument 1"}
!3013 = !{!3014}
!3014 = distinct !{!3014, !3015, !"ext_400c90_fprintf: argument 0"}
!3015 = distinct !{!3015, !"ext_400c90_fprintf"}
!3016 = !{!3017}
!3017 = distinct !{!3017, !3015, !"ext_400c90_fprintf: argument 1"}
!3018 = !{!3019}
!3019 = distinct !{!3019, !3020, !"ext_400c90_fprintf: argument 0"}
!3020 = distinct !{!3020, !"ext_400c90_fprintf"}
!3021 = !{!3022}
!3022 = distinct !{!3022, !3020, !"ext_400c90_fprintf: argument 1"}
!3023 = !{!3024}
!3024 = distinct !{!3024, !3025, !"ext_610068_malloc: argument 0"}
!3025 = distinct !{!3025, !"ext_610068_malloc"}
!3026 = !{!3027}
!3027 = distinct !{!3027, !3025, !"ext_610068_malloc: argument 1"}
!3028 = !{!3029}
!3029 = distinct !{!3029, !3030, !"ext_400c90_fprintf: argument 0"}
!3030 = distinct !{!3030, !"ext_400c90_fprintf"}
!3031 = !{!3032}
!3032 = distinct !{!3032, !3030, !"ext_400c90_fprintf: argument 1"}
!3033 = !{!3034}
!3034 = distinct !{!3034, !3035, !"ext_400c30_printf: argument 0"}
!3035 = distinct !{!3035, !"ext_400c30_printf"}
!3036 = !{!3037}
!3037 = distinct !{!3037, !3035, !"ext_400c30_printf: argument 1"}
!3038 = !{!3039}
!3039 = distinct !{!3039, !3040, !"ext_400c30_printf: argument 0"}
!3040 = distinct !{!3040, !"ext_400c30_printf"}
!3041 = !{!3042}
!3042 = distinct !{!3042, !3040, !"ext_400c30_printf: argument 1"}
!3043 = !{!3044}
!3044 = distinct !{!3044, !3045, !"ext_400c30_printf: argument 0"}
!3045 = distinct !{!3045, !"ext_400c30_printf"}
!3046 = !{!3047}
!3047 = distinct !{!3047, !3045, !"ext_400c30_printf: argument 1"}
!3048 = !{!3049}
!3049 = distinct !{!3049, !3050, !"ext_400c30_printf: argument 0"}
!3050 = distinct !{!3050, !"ext_400c30_printf"}
!3051 = !{!3052}
!3052 = distinct !{!3052, !3050, !"ext_400c30_printf: argument 1"}
!3053 = !{!3054}
!3054 = distinct !{!3054, !3055, !"ext_400c30_printf: argument 0"}
!3055 = distinct !{!3055, !"ext_400c30_printf"}
!3056 = !{!3057}
!3057 = distinct !{!3057, !3055, !"ext_400c30_printf: argument 1"}
!3058 = !{!3059}
!3059 = distinct !{!3059, !3060, !"ext_400c30_printf: argument 0"}
!3060 = distinct !{!3060, !"ext_400c30_printf"}
!3061 = !{!3062}
!3062 = distinct !{!3062, !3060, !"ext_400c30_printf: argument 1"}
!3063 = !{!3064}
!3064 = distinct !{!3064, !3065, !"ext_400c30_printf: argument 0"}
!3065 = distinct !{!3065, !"ext_400c30_printf"}
!3066 = !{!3067}
!3067 = distinct !{!3067, !3065, !"ext_400c30_printf: argument 1"}
!3068 = !{!3069}
!3069 = distinct !{!3069, !3070, !"ext_400c30_printf: argument 0"}
!3070 = distinct !{!3070, !"ext_400c30_printf"}
!3071 = !{!3072}
!3072 = distinct !{!3072, !3070, !"ext_400c30_printf: argument 1"}
!3073 = !{!3074}
!3074 = distinct !{!3074, !3075, !"ext_400c30_printf: argument 0"}
!3075 = distinct !{!3075, !"ext_400c30_printf"}
!3076 = !{!3077}
!3077 = distinct !{!3077, !3075, !"ext_400c30_printf: argument 1"}
!3078 = !{!3079}
!3079 = distinct !{!3079, !3080, !"ext_400c30_printf: argument 0"}
!3080 = distinct !{!3080, !"ext_400c30_printf"}
!3081 = !{!3082}
!3082 = distinct !{!3082, !3080, !"ext_400c30_printf: argument 1"}
!3083 = !{!3084}
!3084 = distinct !{!3084, !3085, !"ext_400c30_printf: argument 0"}
!3085 = distinct !{!3085, !"ext_400c30_printf"}
!3086 = !{!3087}
!3087 = distinct !{!3087, !3085, !"ext_400c30_printf: argument 1"}
!3088 = !{!3089}
!3089 = distinct !{!3089, !3090, !"ext_400c30_printf: argument 0"}
!3090 = distinct !{!3090, !"ext_400c30_printf"}
!3091 = !{!3092}
!3092 = distinct !{!3092, !3090, !"ext_400c30_printf: argument 1"}
!3093 = !{!3094}
!3094 = distinct !{!3094, !3095, !"ext_400c30_printf: argument 0"}
!3095 = distinct !{!3095, !"ext_400c30_printf"}
!3096 = !{!3097}
!3097 = distinct !{!3097, !3095, !"ext_400c30_printf: argument 1"}
!3098 = !{!3099}
!3099 = distinct !{!3099, !3100, !"ext_400c30_printf: argument 0"}
!3100 = distinct !{!3100, !"ext_400c30_printf"}
!3101 = !{!3102}
!3102 = distinct !{!3102, !3100, !"ext_400c30_printf: argument 1"}
!3103 = !{!3104}
!3104 = distinct !{!3104, !3105, !"ext_400c30_printf: argument 0"}
!3105 = distinct !{!3105, !"ext_400c30_printf"}
!3106 = !{!3107}
!3107 = distinct !{!3107, !3105, !"ext_400c30_printf: argument 1"}
!3108 = !{!3109}
!3109 = distinct !{!3109, !3110, !"ext_400c30_printf: argument 0"}
!3110 = distinct !{!3110, !"ext_400c30_printf"}
!3111 = !{!3112}
!3112 = distinct !{!3112, !3110, !"ext_400c30_printf: argument 1"}
!3113 = !{!3114}
!3114 = distinct !{!3114, !3115, !"ext_400c30_printf: argument 0"}
!3115 = distinct !{!3115, !"ext_400c30_printf"}
!3116 = !{!3117}
!3117 = distinct !{!3117, !3115, !"ext_400c30_printf: argument 1"}
!3118 = !{!3119}
!3119 = distinct !{!3119, !3120, !"ext_400c30_printf: argument 0"}
!3120 = distinct !{!3120, !"ext_400c30_printf"}
!3121 = !{!3122}
!3122 = distinct !{!3122, !3120, !"ext_400c30_printf: argument 1"}
!3123 = !{!3124}
!3124 = distinct !{!3124, !3125, !"ext_400c30_printf: argument 0"}
!3125 = distinct !{!3125, !"ext_400c30_printf"}
!3126 = !{!3127}
!3127 = distinct !{!3127, !3125, !"ext_400c30_printf: argument 1"}
!3128 = !{!3129}
!3129 = distinct !{!3129, !3130, !"ext_400c30_printf: argument 0"}
!3130 = distinct !{!3130, !"ext_400c30_printf"}
!3131 = !{!3132}
!3132 = distinct !{!3132, !3130, !"ext_400c30_printf: argument 1"}
!3133 = !{!3134}
!3134 = distinct !{!3134, !3135, !"ext_400c50_pow: argument 0"}
!3135 = distinct !{!3135, !"ext_400c50_pow"}
!3136 = !{!3137}
!3137 = distinct !{!3137, !3135, !"ext_400c50_pow: argument 1"}
!3138 = !{!3139}
!3139 = distinct !{!3139, !3140, !"ext_6100a0_sprintf: argument 0"}
!3140 = distinct !{!3140, !"ext_6100a0_sprintf"}
!3141 = !{!3142}
!3142 = distinct !{!3142, !3140, !"ext_6100a0_sprintf: argument 1"}
!3143 = !{!3144}
!3144 = distinct !{!3144, !3145, !"ext_400c30_printf: argument 0"}
!3145 = distinct !{!3145, !"ext_400c30_printf"}
!3146 = !{!3147}
!3147 = distinct !{!3147, !3145, !"ext_400c30_printf: argument 1"}
!3148 = !{!3149}
!3149 = distinct !{!3149, !3150, !"ext_400c90_fprintf: argument 0"}
!3150 = distinct !{!3150, !"ext_400c90_fprintf"}
!3151 = !{!3152}
!3152 = distinct !{!3152, !3150, !"ext_400c90_fprintf: argument 1"}
!3153 = !{!3154}
!3154 = distinct !{!3154, !3155, !"ext_400c90_fprintf: argument 0"}
!3155 = distinct !{!3155, !"ext_400c90_fprintf"}
!3156 = !{!3157}
!3157 = distinct !{!3157, !3155, !"ext_400c90_fprintf: argument 1"}
!3158 = !{!3159}
!3159 = distinct !{!3159, !3160, !"ext_400c90_fprintf: argument 0"}
!3160 = distinct !{!3160, !"ext_400c90_fprintf"}
!3161 = !{!3162}
!3162 = distinct !{!3162, !3160, !"ext_400c90_fprintf: argument 1"}
!3163 = !{!3164}
!3164 = distinct !{!3164, !3165, !"ext_400c90_fprintf: argument 0"}
!3165 = distinct !{!3165, !"ext_400c90_fprintf"}
!3166 = !{!3167}
!3167 = distinct !{!3167, !3165, !"ext_400c90_fprintf: argument 1"}
!3168 = !{!3169}
!3169 = distinct !{!3169, !3170, !"ext_400c90_fprintf: argument 0"}
!3170 = distinct !{!3170, !"ext_400c90_fprintf"}
!3171 = !{!3172}
!3172 = distinct !{!3172, !3170, !"ext_400c90_fprintf: argument 1"}
!3173 = !{!3174}
!3174 = distinct !{!3174, !3175, !"ext_400c90_fprintf: argument 0"}
!3175 = distinct !{!3175, !"ext_400c90_fprintf"}
!3176 = !{!3177}
!3177 = distinct !{!3177, !3175, !"ext_400c90_fprintf: argument 1"}
!3178 = !{!3179}
!3179 = distinct !{!3179, !3180, !"ext_400c90_fprintf: argument 0"}
!3180 = distinct !{!3180, !"ext_400c90_fprintf"}
!3181 = !{!3182}
!3182 = distinct !{!3182, !3180, !"ext_400c90_fprintf: argument 1"}
!3183 = !{!3184}
!3184 = distinct !{!3184, !3185, !"ext_400cf0_fseek: argument 0"}
!3185 = distinct !{!3185, !"ext_400cf0_fseek"}
!3186 = !{!3187}
!3187 = distinct !{!3187, !3185, !"ext_400cf0_fseek: argument 1"}
!3188 = !{!3189}
!3189 = distinct !{!3189, !3190, !"ext_400c70_calloc: argument 0"}
!3190 = distinct !{!3190, !"ext_400c70_calloc"}
!3191 = !{!3192}
!3192 = distinct !{!3192, !3190, !"ext_400c70_calloc: argument 1"}
!3193 = !{!3194}
!3194 = distinct !{!3194, !3195, !"ext_6100a0_sprintf: argument 0"}
!3195 = distinct !{!3195, !"ext_6100a0_sprintf"}
!3196 = !{!3197}
!3197 = distinct !{!3197, !3195, !"ext_6100a0_sprintf: argument 1"}
!3198 = !{!3199}
!3199 = distinct !{!3199, !3200, !"ext_610088_fopen: argument 0"}
!3200 = distinct !{!3200, !"ext_610088_fopen"}
!3201 = !{!3202}
!3202 = distinct !{!3202, !3200, !"ext_610088_fopen: argument 1"}
!3203 = !{!3204}
!3204 = distinct !{!3204, !3205, !"ext_610000_fclose: argument 0"}
!3205 = distinct !{!3205, !"ext_610000_fclose"}
!3206 = !{!3207}
!3207 = distinct !{!3207, !3205, !"ext_610000_fclose: argument 1"}
!3208 = !{!3209}
!3209 = distinct !{!3209, !3210, !"ext_400c90_fprintf: argument 0"}
!3210 = distinct !{!3210, !"ext_400c90_fprintf"}
!3211 = !{!3212}
!3212 = distinct !{!3212, !3210, !"ext_400c90_fprintf: argument 1"}
!3213 = !{!3214}
!3214 = distinct !{!3214, !3215, !"ext_400c90_fprintf: argument 0"}
!3215 = distinct !{!3215, !"ext_400c90_fprintf"}
!3216 = !{!3217}
!3217 = distinct !{!3217, !3215, !"ext_400c90_fprintf: argument 1"}
!3218 = !{!3219}
!3219 = distinct !{!3219, !3220, !"ext_400b90_free: argument 0"}
!3220 = distinct !{!3220, !"ext_400b90_free"}
!3221 = !{!3222}
!3222 = distinct !{!3222, !3220, !"ext_400b90_free: argument 1"}
!3223 = !{!3224}
!3224 = distinct !{!3224, !3225, !"ext_400b90_free: argument 0"}
!3225 = distinct !{!3225, !"ext_400b90_free"}
!3226 = !{!3227}
!3227 = distinct !{!3227, !3225, !"ext_400b90_free: argument 1"}
!3228 = !{!3229}
!3229 = distinct !{!3229, !3230, !"ext_400b90_free: argument 0"}
!3230 = distinct !{!3230, !"ext_400b90_free"}
!3231 = !{!3232}
!3232 = distinct !{!3232, !3230, !"ext_400b90_free: argument 1"}
!3233 = !{!3234}
!3234 = distinct !{!3234, !3235, !"ext_400c90_fprintf: argument 0"}
!3235 = distinct !{!3235, !"ext_400c90_fprintf"}
!3236 = !{!3237}
!3237 = distinct !{!3237, !3235, !"ext_400c90_fprintf: argument 1"}
!3238 = !{!3239}
!3239 = distinct !{!3239, !3240, !"ext_6100b0_fwrite: argument 0"}
!3240 = distinct !{!3240, !"ext_6100b0_fwrite"}
!3241 = !{!3242}
!3242 = distinct !{!3242, !3240, !"ext_6100b0_fwrite: argument 1"}
!3243 = !{!3244}
!3244 = distinct !{!3244, !3245, !"ext_6100b0_fwrite: argument 0"}
!3245 = distinct !{!3245, !"ext_6100b0_fwrite"}
!3246 = !{!3247}
!3247 = distinct !{!3247, !3245, !"ext_6100b0_fwrite: argument 1"}
!3248 = !{!3249}
!3249 = distinct !{!3249, !3250, !"ext_610068_malloc: argument 0"}
!3250 = distinct !{!3250, !"ext_610068_malloc"}
!3251 = !{!3252}
!3252 = distinct !{!3252, !3250, !"ext_610068_malloc: argument 1"}
!3253 = !{!3254}
!3254 = distinct !{!3254, !3255, !"ext_610068_malloc: argument 0"}
!3255 = distinct !{!3255, !"ext_610068_malloc"}
!3256 = !{!3257}
!3257 = distinct !{!3257, !3255, !"ext_610068_malloc: argument 1"}
!3258 = !{!3259}
!3259 = distinct !{!3259, !3260, !"ext_400c90_fprintf: argument 0"}
!3260 = distinct !{!3260, !"ext_400c90_fprintf"}
!3261 = !{!3262}
!3262 = distinct !{!3262, !3260, !"ext_400c90_fprintf: argument 1"}
!3263 = !{!3264}
!3264 = distinct !{!3264, !3265, !"ext_400c80_strcmp: argument 0"}
!3265 = distinct !{!3265, !"ext_400c80_strcmp"}
!3266 = !{!3267}
!3267 = distinct !{!3267, !3265, !"ext_400c80_strcmp: argument 1"}
!3268 = !{!3269}
!3269 = distinct !{!3269, !3270, !"ext_60fff8_fread: argument 0"}
!3270 = distinct !{!3270, !"ext_60fff8_fread"}
!3271 = !{!3272}
!3272 = distinct !{!3272, !3270, !"ext_60fff8_fread: argument 1"}
!3273 = !{!3274}
!3274 = distinct !{!3274, !3275, !"ext_400c90_fprintf: argument 0"}
!3275 = distinct !{!3275, !"ext_400c90_fprintf"}
!3276 = !{!3277}
!3277 = distinct !{!3277, !3275, !"ext_400c90_fprintf: argument 1"}
!3278 = !{!3279}
!3279 = distinct !{!3279, !3280, !"ext_610090_atoi: argument 0"}
!3280 = distinct !{!3280, !"ext_610090_atoi"}
!3281 = !{!3282}
!3282 = distinct !{!3282, !3280, !"ext_610090_atoi: argument 1"}
!3283 = !{!3284}
!3284 = distinct !{!3284, !3285, !"ext_400cf0_fseek: argument 0"}
!3285 = distinct !{!3285, !"ext_400cf0_fseek"}
!3286 = !{!3287}
!3287 = distinct !{!3287, !3285, !"ext_400cf0_fseek: argument 1"}
!3288 = !{!3289}
!3289 = distinct !{!3289, !3290, !"ext_400c90_fprintf: argument 0"}
!3290 = distinct !{!3290, !"ext_400c90_fprintf"}
!3291 = !{!3292}
!3292 = distinct !{!3292, !3290, !"ext_400c90_fprintf: argument 1"}
!3293 = !{!3294}
!3294 = distinct !{!3294, !3295, !"ext_400cf0_fseek: argument 0"}
!3295 = distinct !{!3295, !"ext_400cf0_fseek"}
!3296 = !{!3297}
!3297 = distinct !{!3297, !3295, !"ext_400cf0_fseek: argument 1"}
!3298 = !{!3299}
!3299 = distinct !{!3299, !3300, !"ext_400cf0_fseek: argument 0"}
!3300 = distinct !{!3300, !"ext_400cf0_fseek"}
!3301 = !{!3302}
!3302 = distinct !{!3302, !3300, !"ext_400cf0_fseek: argument 1"}
!3303 = !{!3304}
!3304 = distinct !{!3304, !3305, !"ext_400c80_strcmp: argument 0"}
!3305 = distinct !{!3305, !"ext_400c80_strcmp"}
!3306 = !{!3307}
!3307 = distinct !{!3307, !3305, !"ext_400c80_strcmp: argument 1"}
!3308 = !{!3309}
!3309 = distinct !{!3309, !3310, !"ext_400c90_fprintf: argument 0"}
!3310 = distinct !{!3310, !"ext_400c90_fprintf"}
!3311 = !{!3312}
!3312 = distinct !{!3312, !3310, !"ext_400c90_fprintf: argument 1"}
!3313 = !{!3314}
!3314 = distinct !{!3314, !3315, !"ext_400c90_fprintf: argument 0"}
!3315 = distinct !{!3315, !"ext_400c90_fprintf"}
!3316 = !{!3317}
!3317 = distinct !{!3317, !3315, !"ext_400c90_fprintf: argument 1"}
!3318 = !{!3319}
!3319 = distinct !{!3319, !3320, !"ext_60ffe0_strcpy: argument 0"}
!3320 = distinct !{!3320, !"ext_60ffe0_strcpy"}
!3321 = !{!3322}
!3322 = distinct !{!3322, !3320, !"ext_60ffe0_strcpy: argument 1"}
!3323 = !{!3324}
!3324 = distinct !{!3324, !3325, !"ext_400cf0_fseek: argument 0"}
!3325 = distinct !{!3325, !"ext_400cf0_fseek"}
!3326 = !{!3327}
!3327 = distinct !{!3327, !3325, !"ext_400cf0_fseek: argument 1"}
!3328 = !{!3329}
!3329 = distinct !{!3329, !3330, !"ext_400cf0_fseek: argument 0"}
!3330 = distinct !{!3330, !"ext_400cf0_fseek"}
!3331 = !{!3332}
!3332 = distinct !{!3332, !3330, !"ext_400cf0_fseek: argument 1"}
!3333 = !{!3334}
!3334 = distinct !{!3334, !3335, !"ext_400c80_strcmp: argument 0"}
!3335 = distinct !{!3335, !"ext_400c80_strcmp"}
!3336 = !{!3337}
!3337 = distinct !{!3337, !3335, !"ext_400c80_strcmp: argument 1"}
!3338 = !{!3339}
!3339 = distinct !{!3339, !3340, !"ext_60ffe8___isoc99_fscanf: argument 0"}
!3340 = distinct !{!3340, !"ext_60ffe8___isoc99_fscanf"}
!3341 = !{!3342}
!3342 = distinct !{!3342, !3340, !"ext_60ffe8___isoc99_fscanf: argument 1"}
!3343 = !{!3344}
!3344 = distinct !{!3344, !3345, !"ext_610090_atoi: argument 0"}
!3345 = distinct !{!3345, !"ext_610090_atoi"}
!3346 = !{!3347}
!3347 = distinct !{!3347, !3345, !"ext_610090_atoi: argument 1"}
!3348 = !{!3349}
!3349 = distinct !{!3349, !3350, !"ext_60ffe0_strcpy: argument 0"}
!3350 = distinct !{!3350, !"ext_60ffe0_strcpy"}
!3351 = !{!3352}
!3352 = distinct !{!3352, !3350, !"ext_60ffe0_strcpy: argument 1"}
!3353 = !{!3354}
!3354 = distinct !{!3354, !3355, !"ext_400c30_printf: argument 0"}
!3355 = distinct !{!3355, !"ext_400c30_printf"}
!3356 = !{!3357}
!3357 = distinct !{!3357, !3355, !"ext_400c30_printf: argument 1"}
!3358 = !{!3359}
!3359 = distinct !{!3359, !3360, !"ext_400c30_printf: argument 0"}
!3360 = distinct !{!3360, !"ext_400c30_printf"}
!3361 = !{!3362}
!3362 = distinct !{!3362, !3360, !"ext_400c30_printf: argument 1"}
!3363 = !{!3364}
!3364 = distinct !{!3364, !3365, !"ext_400c30_printf: argument 0"}
!3365 = distinct !{!3365, !"ext_400c30_printf"}
!3366 = !{!3367}
!3367 = distinct !{!3367, !3365, !"ext_400c30_printf: argument 1"}
!3368 = !{!3369}
!3369 = distinct !{!3369, !3370, !"ext_400c30_printf: argument 0"}
!3370 = distinct !{!3370, !"ext_400c30_printf"}
!3371 = !{!3372}
!3372 = distinct !{!3372, !3370, !"ext_400c30_printf: argument 1"}
!3373 = !{!3374}
!3374 = distinct !{!3374, !3375, !"ext_400c30_printf: argument 0"}
!3375 = distinct !{!3375, !"ext_400c30_printf"}
!3376 = !{!3377}
!3377 = distinct !{!3377, !3375, !"ext_400c30_printf: argument 1"}
!3378 = !{!3379}
!3379 = distinct !{!3379, !3380, !"ext_400c30_printf: argument 0"}
!3380 = distinct !{!3380, !"ext_400c30_printf"}
!3381 = !{!3382}
!3382 = distinct !{!3382, !3380, !"ext_400c30_printf: argument 1"}
!3383 = !{!3384}
!3384 = distinct !{!3384, !3385, !"ext_400c30_printf: argument 0"}
!3385 = distinct !{!3385, !"ext_400c30_printf"}
!3386 = !{!3387}
!3387 = distinct !{!3387, !3385, !"ext_400c30_printf: argument 1"}
!3388 = !{!3389}
!3389 = distinct !{!3389, !3390, !"ext_400c30_printf: argument 0"}
!3390 = distinct !{!3390, !"ext_400c30_printf"}
!3391 = !{!3392}
!3392 = distinct !{!3392, !3390, !"ext_400c30_printf: argument 1"}
!3393 = !{!3394}
!3394 = distinct !{!3394, !3395, !"ext_400c30_printf: argument 0"}
!3395 = distinct !{!3395, !"ext_400c30_printf"}
!3396 = !{!3397}
!3397 = distinct !{!3397, !3395, !"ext_400c30_printf: argument 1"}
!3398 = !{!3399}
!3399 = distinct !{!3399, !3400, !"ext_400c30_printf: argument 0"}
!3400 = distinct !{!3400, !"ext_400c30_printf"}
!3401 = !{!3402}
!3402 = distinct !{!3402, !3400, !"ext_400c30_printf: argument 1"}
!3403 = !{!3404}
!3404 = distinct !{!3404, !3405, !"ext_400c30_printf: argument 0"}
!3405 = distinct !{!3405, !"ext_400c30_printf"}
!3406 = !{!3407}
!3407 = distinct !{!3407, !3405, !"ext_400c30_printf: argument 1"}
!3408 = !{!3409}
!3409 = distinct !{!3409, !3410, !"ext_400c30_printf: argument 0"}
!3410 = distinct !{!3410, !"ext_400c30_printf"}
!3411 = !{!3412}
!3412 = distinct !{!3412, !3410, !"ext_400c30_printf: argument 1"}
!3413 = !{!3414}
!3414 = distinct !{!3414, !3415, !"ext_400c30_printf: argument 0"}
!3415 = distinct !{!3415, !"ext_400c30_printf"}
!3416 = !{!3417}
!3417 = distinct !{!3417, !3415, !"ext_400c30_printf: argument 1"}
!3418 = !{!3419}
!3419 = distinct !{!3419, !3420, !"ext_400c30_printf: argument 0"}
!3420 = distinct !{!3420, !"ext_400c30_printf"}
!3421 = !{!3422}
!3422 = distinct !{!3422, !3420, !"ext_400c30_printf: argument 1"}
!3423 = !{!3424}
!3424 = distinct !{!3424, !3425, !"ext_400c30_printf: argument 0"}
!3425 = distinct !{!3425, !"ext_400c30_printf"}
!3426 = !{!3427}
!3427 = distinct !{!3427, !3425, !"ext_400c30_printf: argument 1"}
!3428 = !{!3429}
!3429 = distinct !{!3429, !3430, !"ext_400c30_printf: argument 0"}
!3430 = distinct !{!3430, !"ext_400c30_printf"}
!3431 = !{!3432}
!3432 = distinct !{!3432, !3430, !"ext_400c30_printf: argument 1"}
!3433 = !{!3434}
!3434 = distinct !{!3434, !3435, !"ext_400c30_printf: argument 0"}
!3435 = distinct !{!3435, !"ext_400c30_printf"}
!3436 = !{!3437}
!3437 = distinct !{!3437, !3435, !"ext_400c30_printf: argument 1"}
!3438 = !{!3439}
!3439 = distinct !{!3439, !3440, !"ext_400c30_printf: argument 0"}
!3440 = distinct !{!3440, !"ext_400c30_printf"}
!3441 = !{!3442}
!3442 = distinct !{!3442, !3440, !"ext_400c30_printf: argument 1"}
!3443 = !{!3444}
!3444 = distinct !{!3444, !3445, !"ext_400c30_printf: argument 0"}
!3445 = distinct !{!3445, !"ext_400c30_printf"}
!3446 = !{!3447}
!3447 = distinct !{!3447, !3445, !"ext_400c30_printf: argument 1"}
!3448 = !{!3449}
!3449 = distinct !{!3449, !3450, !"ext_400c30_printf: argument 0"}
!3450 = distinct !{!3450, !"ext_400c30_printf"}
!3451 = !{!3452}
!3452 = distinct !{!3452, !3450, !"ext_400c30_printf: argument 1"}
!3453 = !{!3454}
!3454 = distinct !{!3454, !3455, !"ext_400c30_printf: argument 0"}
!3455 = distinct !{!3455, !"ext_400c30_printf"}
!3456 = !{!3457}
!3457 = distinct !{!3457, !3455, !"ext_400c30_printf: argument 1"}
!3458 = !{!3459}
!3459 = distinct !{!3459, !3460, !"ext_400c30_printf: argument 0"}
!3460 = distinct !{!3460, !"ext_400c30_printf"}
!3461 = !{!3462}
!3462 = distinct !{!3462, !3460, !"ext_400c30_printf: argument 1"}
!3463 = !{!3464}
!3464 = distinct !{!3464, !3465, !"ext_400c30_printf: argument 0"}
!3465 = distinct !{!3465, !"ext_400c30_printf"}
!3466 = !{!3467}
!3467 = distinct !{!3467, !3465, !"ext_400c30_printf: argument 1"}
!3468 = !{!3469}
!3469 = distinct !{!3469, !3470, !"ext_400c30_printf: argument 0"}
!3470 = distinct !{!3470, !"ext_400c30_printf"}
!3471 = !{!3472}
!3472 = distinct !{!3472, !3470, !"ext_400c30_printf: argument 1"}
!3473 = !{!3474}
!3474 = distinct !{!3474, !3475, !"ext_400c30_printf: argument 0"}
!3475 = distinct !{!3475, !"ext_400c30_printf"}
!3476 = !{!3477}
!3477 = distinct !{!3477, !3475, !"ext_400c30_printf: argument 1"}
!3478 = !{!3479}
!3479 = distinct !{!3479, !3480, !"ext_400c30_printf: argument 0"}
!3480 = distinct !{!3480, !"ext_400c30_printf"}
!3481 = !{!3482}
!3482 = distinct !{!3482, !3480, !"ext_400c30_printf: argument 1"}
!3483 = !{!3484}
!3484 = distinct !{!3484, !3485, !"ext_400c90_fprintf: argument 0"}
!3485 = distinct !{!3485, !"ext_400c90_fprintf"}
!3486 = !{!3487}
!3487 = distinct !{!3487, !3485, !"ext_400c90_fprintf: argument 1"}
!3488 = !{!3489}
!3489 = distinct !{!3489, !3490, !"ext_610060_memcpy: argument 0"}
!3490 = distinct !{!3490, !"ext_610060_memcpy"}
!3491 = !{!3492}
!3492 = distinct !{!3492, !3490, !"ext_610060_memcpy: argument 1"}
!3493 = !{!3494}
!3494 = distinct !{!3494, !3495, !"ext_610060_memcpy: argument 0"}
!3495 = distinct !{!3495, !"ext_610060_memcpy"}
!3496 = !{!3497}
!3497 = distinct !{!3497, !3495, !"ext_610060_memcpy: argument 1"}
!3498 = !{!3499}
!3499 = distinct !{!3499, !3500, !"ext_400cf0_fseek: argument 0"}
!3500 = distinct !{!3500, !"ext_400cf0_fseek"}
!3501 = !{!3502}
!3502 = distinct !{!3502, !3500, !"ext_400cf0_fseek: argument 1"}
!3503 = !{!3504}
!3504 = distinct !{!3504, !3505, !"ext_6100b0_fwrite: argument 0"}
!3505 = distinct !{!3505, !"ext_6100b0_fwrite"}
!3506 = !{!3507}
!3507 = distinct !{!3507, !3505, !"ext_6100b0_fwrite: argument 1"}
!3508 = !{!3509}
!3509 = distinct !{!3509, !3510, !"ext_400cf0_fseek: argument 0"}
!3510 = distinct !{!3510, !"ext_400cf0_fseek"}
!3511 = !{!3512}
!3512 = distinct !{!3512, !3510, !"ext_400cf0_fseek: argument 1"}
!3513 = !{!3514}
!3514 = distinct !{!3514, !3515, !"ext_610058_ftell: argument 0"}
!3515 = distinct !{!3515, !"ext_610058_ftell"}
!3516 = !{!3517}
!3517 = distinct !{!3517, !3515, !"ext_610058_ftell: argument 1"}
!3518 = !{!3519}
!3519 = distinct !{!3519, !3520, !"ext_400cf0_fseek: argument 0"}
!3520 = distinct !{!3520, !"ext_400cf0_fseek"}
!3521 = !{!3522}
!3522 = distinct !{!3522, !3520, !"ext_400cf0_fseek: argument 1"}
!3523 = !{!3524}
!3524 = distinct !{!3524, !3525, !"ext_6100b0_fwrite: argument 0"}
!3525 = distinct !{!3525, !"ext_6100b0_fwrite"}
!3526 = !{!3527}
!3527 = distinct !{!3527, !3525, !"ext_6100b0_fwrite: argument 1"}
!3528 = !{!3529}
!3529 = distinct !{!3529, !3530, !"ext_610060_memcpy: argument 0"}
!3530 = distinct !{!3530, !"ext_610060_memcpy"}
!3531 = !{!3532}
!3532 = distinct !{!3532, !3530, !"ext_610060_memcpy: argument 1"}
!3533 = !{!3534}
!3534 = distinct !{!3534, !3535, !"ext_610060_memcpy: argument 0"}
!3535 = distinct !{!3535, !"ext_610060_memcpy"}
!3536 = !{!3537}
!3537 = distinct !{!3537, !3535, !"ext_610060_memcpy: argument 1"}
!3538 = !{!3539}
!3539 = distinct !{!3539, !3540, !"ext_400c90_fprintf: argument 0"}
!3540 = distinct !{!3540, !"ext_400c90_fprintf"}
!3541 = !{!3542}
!3542 = distinct !{!3542, !3540, !"ext_400c90_fprintf: argument 1"}
!3543 = !{!3544}
!3544 = distinct !{!3544, !3545, !"ext_6100a8_exit: argument 0"}
!3545 = distinct !{!3545, !"ext_6100a8_exit"}
!3546 = !{!3547}
!3547 = distinct !{!3547, !3545, !"ext_6100a8_exit: argument 1"}
!3548 = !{!3549}
!3549 = distinct !{!3549, !3550, !"ext_610060_memcpy: argument 0"}
!3550 = distinct !{!3550, !"ext_610060_memcpy"}
!3551 = !{!3552}
!3552 = distinct !{!3552, !3550, !"ext_610060_memcpy: argument 1"}
!3553 = !{!3554}
!3554 = distinct !{!3554, !3555, !"ext_400c90_fprintf: argument 0"}
!3555 = distinct !{!3555, !"ext_400c90_fprintf"}
!3556 = !{!3557}
!3557 = distinct !{!3557, !3555, !"ext_400c90_fprintf: argument 1"}
!3558 = !{!3559}
!3559 = distinct !{!3559, !3560, !"ext_6100a8_exit: argument 0"}
!3560 = distinct !{!3560, !"ext_6100a8_exit"}
!3561 = !{!3562}
!3562 = distinct !{!3562, !3560, !"ext_6100a8_exit: argument 1"}
!3563 = !{!3564}
!3564 = distinct !{!3564, !3565, !"ext_400c90_fprintf: argument 0"}
!3565 = distinct !{!3565, !"ext_400c90_fprintf"}
!3566 = !{!3567}
!3567 = distinct !{!3567, !3565, !"ext_400c90_fprintf: argument 1"}
!3568 = !{!3569}
!3569 = distinct !{!3569, !3570, !"ext_60fff8_fread: argument 0"}
!3570 = distinct !{!3570, !"ext_60fff8_fread"}
!3571 = !{!3572}
!3572 = distinct !{!3572, !3570, !"ext_60fff8_fread: argument 1"}
!3573 = !{!1277, !1277, i64 0}
!3574 = !{!3575}
!3575 = distinct !{!3575, !3576, !"ext_610068_malloc: argument 0"}
!3576 = distinct !{!3576, !"ext_610068_malloc"}
!3577 = !{!3578}
!3578 = distinct !{!3578, !3576, !"ext_610068_malloc: argument 1"}
!3579 = !{!3580}
!3580 = distinct !{!3580, !3581, !"ext_400c90_fprintf: argument 0"}
!3581 = distinct !{!3581, !"ext_400c90_fprintf"}
!3582 = !{!3583}
!3583 = distinct !{!3583, !3581, !"ext_400c90_fprintf: argument 1"}
!3584 = !{!3585}
!3585 = distinct !{!3585, !3586, !"ext_400c90_fprintf: argument 0"}
!3586 = distinct !{!3586, !"ext_400c90_fprintf"}
!3587 = !{!3588}
!3588 = distinct !{!3588, !3586, !"ext_400c90_fprintf: argument 1"}
!3589 = !{!3590}
!3590 = distinct !{!3590, !3591, !"ext_400c90_fprintf: argument 0"}
!3591 = distinct !{!3591, !"ext_400c90_fprintf"}
!3592 = !{!3593}
!3593 = distinct !{!3593, !3591, !"ext_400c90_fprintf: argument 1"}
!3594 = !{!3595}
!3595 = distinct !{!3595, !3596, !"ext_400c90_fprintf: argument 0"}
!3596 = distinct !{!3596, !"ext_400c90_fprintf"}
!3597 = !{!3598}
!3598 = distinct !{!3598, !3596, !"ext_400c90_fprintf: argument 1"}
!3599 = !{!3600}
!3600 = distinct !{!3600, !3601, !"ext_400c90_fprintf: argument 0"}
!3601 = distinct !{!3601, !"ext_400c90_fprintf"}
!3602 = !{!3603}
!3603 = distinct !{!3603, !3601, !"ext_400c90_fprintf: argument 1"}
!3604 = !{!3605}
!3605 = distinct !{!3605, !3606, !"ext_400c90_fprintf: argument 0"}
!3606 = distinct !{!3606, !"ext_400c90_fprintf"}
!3607 = !{!3608}
!3608 = distinct !{!3608, !3606, !"ext_400c90_fprintf: argument 1"}
!3609 = !{!3610}
!3610 = distinct !{!3610, !3611, !"ext_400c90_fprintf: argument 0"}
!3611 = distinct !{!3611, !"ext_400c90_fprintf"}
!3612 = !{!3613}
!3613 = distinct !{!3613, !3611, !"ext_400c90_fprintf: argument 1"}
!3614 = !{!3615}
!3615 = distinct !{!3615, !3616, !"ext_400c90_fprintf: argument 0"}
!3616 = distinct !{!3616, !"ext_400c90_fprintf"}
!3617 = !{!3618}
!3618 = distinct !{!3618, !3616, !"ext_400c90_fprintf: argument 1"}
!3619 = !{!3620}
!3620 = distinct !{!3620, !3621, !"ext_400c90_fprintf: argument 0"}
!3621 = distinct !{!3621, !"ext_400c90_fprintf"}
!3622 = !{!3623}
!3623 = distinct !{!3623, !3621, !"ext_400c90_fprintf: argument 1"}
!3624 = !{!3625}
!3625 = distinct !{!3625, !3626, !"ext_400c90_fprintf: argument 0"}
!3626 = distinct !{!3626, !"ext_400c90_fprintf"}
!3627 = !{!3628}
!3628 = distinct !{!3628, !3626, !"ext_400c90_fprintf: argument 1"}
!3629 = !{!3630}
!3630 = distinct !{!3630, !3631, !"ext_60ffd0___errno_location: argument 0"}
!3631 = distinct !{!3631, !"ext_60ffd0___errno_location"}
!3632 = !{!3633}
!3633 = distinct !{!3633, !3631, !"ext_60ffd0___errno_location: argument 1"}
!3634 = !{!3635}
!3635 = distinct !{!3635, !3636, !"ext_400c90_fprintf: argument 0"}
!3636 = distinct !{!3636, !"ext_400c90_fprintf"}
!3637 = !{!3638}
!3638 = distinct !{!3638, !3636, !"ext_400c90_fprintf: argument 1"}
!3639 = !{!3640}
!3640 = distinct !{!3640, !3641, !"ext_60ffd0___errno_location: argument 0"}
!3641 = distinct !{!3641, !"ext_60ffd0___errno_location"}
!3642 = !{!3643}
!3643 = distinct !{!3643, !3641, !"ext_60ffd0___errno_location: argument 1"}
!3644 = !{!3645}
!3645 = distinct !{!3645, !3646, !"ext_400c90_fprintf: argument 0"}
!3646 = distinct !{!3646, !"ext_400c90_fprintf"}
!3647 = !{!3648}
!3648 = distinct !{!3648, !3646, !"ext_400c90_fprintf: argument 1"}
!3649 = !{!3650}
!3650 = distinct !{!3650, !3651, !"ext_60ffd0___errno_location: argument 0"}
!3651 = distinct !{!3651, !"ext_60ffd0___errno_location"}
!3652 = !{!3653}
!3653 = distinct !{!3653, !3651, !"ext_60ffd0___errno_location: argument 1"}
!3654 = !{!3655}
!3655 = distinct !{!3655, !3656, !"ext_400c90_fprintf: argument 0"}
!3656 = distinct !{!3656, !"ext_400c90_fprintf"}
!3657 = !{!3658}
!3658 = distinct !{!3658, !3656, !"ext_400c90_fprintf: argument 1"}
!3659 = !{!3660}
!3660 = distinct !{!3660, !3661, !"ext_60ffd0___errno_location: argument 0"}
!3661 = distinct !{!3661, !"ext_60ffd0___errno_location"}
!3662 = !{!3663}
!3663 = distinct !{!3663, !3661, !"ext_60ffd0___errno_location: argument 1"}
!3664 = !{!3665}
!3665 = distinct !{!3665, !3666, !"ext_400c90_fprintf: argument 0"}
!3666 = distinct !{!3666, !"ext_400c90_fprintf"}
!3667 = !{!3668}
!3668 = distinct !{!3668, !3666, !"ext_400c90_fprintf: argument 1"}
!3669 = !{!3670}
!3670 = distinct !{!3670, !3671, !"ext_610078___isoc99_sscanf: argument 0"}
!3671 = distinct !{!3671, !"ext_610078___isoc99_sscanf"}
!3672 = !{!3673}
!3673 = distinct !{!3673, !3671, !"ext_610078___isoc99_sscanf: argument 1"}
!3674 = !{!3675}
!3675 = distinct !{!3675, !3676, !"ext_610038_fgets: argument 0"}
!3676 = distinct !{!3676, !"ext_610038_fgets"}
!3677 = !{!3678}
!3678 = distinct !{!3678, !3676, !"ext_610038_fgets: argument 1"}
!3679 = !{!3680}
!3680 = distinct !{!3680, !3681, !"ext_610078___isoc99_sscanf: argument 0"}
!3681 = distinct !{!3681, !"ext_610078___isoc99_sscanf"}
!3682 = !{!3683}
!3683 = distinct !{!3683, !3681, !"ext_610078___isoc99_sscanf: argument 1"}
!3684 = !{!3685}
!3685 = distinct !{!3685, !3686, !"ext_610000_fclose: argument 0"}
!3686 = distinct !{!3686, !"ext_610000_fclose"}
!3687 = !{!3688}
!3688 = distinct !{!3688, !3686, !"ext_610000_fclose: argument 1"}
!3689 = !{!3690}
!3690 = distinct !{!3690, !3691, !"ext_400d60_strstr: argument 0"}
!3691 = distinct !{!3691, !"ext_400d60_strstr"}
!3692 = !{!3693}
!3693 = distinct !{!3693, !3691, !"ext_400d60_strstr: argument 1"}
!3694 = !{!3695}
!3695 = distinct !{!3695, !3696, !"ext_400d60_strstr: argument 0"}
!3696 = distinct !{!3696, !"ext_400d60_strstr"}
!3697 = !{!3698}
!3698 = distinct !{!3698, !3696, !"ext_400d60_strstr: argument 1"}
!3699 = !{!3700}
!3700 = distinct !{!3700, !3701, !"ext_400c10_strlen: argument 0"}
!3701 = distinct !{!3701, !"ext_400c10_strlen"}
!3702 = !{!3703}
!3703 = distinct !{!3703, !3701, !"ext_400c10_strlen: argument 1"}
